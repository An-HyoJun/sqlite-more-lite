cscope 15 $HOME/SaS/sqlite-src-3130000/src               0003958404
	@alter.c

15 
	~"sqlôeI¡.h
"

21 #i‚de‡
SQLITE_OMIT_ALTERTABLE


37 
	$ª«meTabÀFunc
(

38 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

39 
NŸU£d
,

40 
sqlôe3_vÆue
 **
¨gv


42 c⁄° *
zSql
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

43 c⁄° *
zTabÀName
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[1]);

45 
tokí
;

46 
Tokí
 
äame
;

47 c⁄° *
zC§
 = 
zSql
;

48 
Àn
 = 0;

49 *
zRë
;

51 
sqlôe3
 *
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
);

53 
	`UNUSED_PARAMETER
(
NŸU£d
);

59 if–
zSql
 ){

61 if–!*
zC§
 ){

67 
äame
.
z
 = (*)
zC§
;

68 
äame
.
n
 = 
Àn
;

74 
zC§
 +
Àn
;

75 
Àn
 = 
	`sqlôe3GëTokí
(
zC§
, &
tokí
);

76 }  
tokí
==
TK_SPACE
 );

77 
	`as£π
–
Àn
>0 );

78 }  
tokí
!=
TK_LP
 &&Åokí!=
TK_USING
 );

80 
zRë
 = 
	`sqlôe3MPrötf
(
db
, "%.*s\"%w\"%s", ()(((
u8
*)
äame
.
z
Ë- 
zSql
),

81 
zSql
, 
zTabÀName
, 
äame
.
z
+äame.
n
);

82 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zRë
, -1, 
SQLITE_DYNAMIC
);

84 
	}
}

101 #i‚de‡
SQLITE_OMIT_FOREIGN_KEY


102 
	$ª«meP¨ítFunc
(

103 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

104 
NŸU£d
,

105 
sqlôe3_vÆue
 **
¨gv


107 
sqlôe3
 *
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
);

108 *
zOuçut
 = 0;

109 *
zResu…
;

110 c⁄° *
zI≈ut
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

111 c⁄° *
zOld
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[1]);

112 c⁄° *
zNew
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[2]);

114 c⁄° *
z
;

115 
n
;

116 
tokí
;

118 
	`UNUSED_PARAMETER
(
NŸU£d
);

119 if–
zI≈ut
==0 || 
zOld
==0 ) ;

120 
z
=
zI≈ut
; *z; z=z+
n
){

121 
n
 = 
	`sqlôe3GëTokí
(
z
, &
tokí
);

122 if–
tokí
==
TK_REFERENCES
 ){

123 *
zP¨ít
;

125 
z
 +
n
;

126 
n
 = 
	`sqlôe3GëTokí
(
z
, &
tokí
);

127 } 
tokí
==
TK_SPACE
 );

129 if–
tokí
==
TK_ILLEGAL
 ) ;

130 
zP¨ít
 = 
	`sqlôe3DbSåNDup
(
db
, (c⁄° *)
z
, 
n
);

131 if–
zP¨ít
==0 ) ;

132 
	`sqlôe3DequŸe
(
zP¨ít
);

133 if–0==
	`sqlôe3SåICmp
((c⁄° *)
zOld
, 
zP¨ít
) ){

134 *
zOut
 = 
	`sqlôe3MPrötf
(
db
, "%s%.*s\"%w\"",

135 (
zOuçut
?zOuçut:""), ()(
z
-
zI≈ut
), zI≈ut, (c⁄° *)
zNew


137 
	`sqlôe3DbFªe
(
db
, 
zOuçut
);

138 
zOuçut
 = 
zOut
;

139 
zI≈ut
 = &
z
[
n
];

141 
	`sqlôe3DbFªe
(
db
, 
zP¨ít
);

145 
zResu…
 = 
	`sqlôe3MPrötf
(
db
, "%s%s", (
zOuçut
?zOuçut:""), 
zI≈ut
),

146 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zResu…
, -1, 
SQLITE_DYNAMIC
);

147 
	`sqlôe3DbFªe
(
db
, 
zOuçut
);

148 
	}
}

151 #i‚de‡
SQLITE_OMIT_TRIGGER


159 
	$ª«meTriggîFunc
(

160 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

161 
NŸU£d
,

162 
sqlôe3_vÆue
 **
¨gv


164 c⁄° *
zSql
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

165 c⁄° *
zTabÀName
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[1]);

167 
tokí
;

168 
Tokí
 
äame
;

169 
di°
 = 3;

170 c⁄° *
zC§
 = 
zSql
;

171 
Àn
 = 0;

172 *
zRë
;

173 
sqlôe3
 *
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
);

175 
	`UNUSED_PARAMETER
(
NŸU£d
);

182 if–
zSql
 ){

185 if–!*
zC§
 ){

191 
äame
.
z
 = (*)
zC§
;

192 
äame
.
n
 = 
Àn
;

198 
zC§
 +
Àn
;

199 
Àn
 = 
	`sqlôe3GëTokí
(
zC§
, &
tokí
);

200 } 
tokí
==
TK_SPACE
 );

201 
	`as£π
–
Àn
>0 );

212 
di°
++;

213 if–
tokí
==
TK_DOT
 ||Åokí==
TK_ON
 ){

214 
di°
 = 0;

216 }  
di°
!=2 || (
tokí
!=
TK_WHEN
 &&Åokí!=
TK_FOR
 &&Åokí!=
TK_BEGIN
) );

221 
zRë
 = 
	`sqlôe3MPrötf
(
db
, "%.*s\"%w\"%s", ()(((
u8
*)
äame
.
z
Ë- 
zSql
),

222 
zSql
, 
zTabÀName
, 
äame
.
z
+äame.
n
);

223 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zRë
, -1, 
SQLITE_DYNAMIC
);

225 
	}
}

231 
	$sqlôe3A…îFun˘i⁄s
(){

232 
FuncDef
 
aA…îTabÀFuncs
[] = {

233 
	`FUNCTION
(
sqlôe_ª«me_èbÀ
, 2, 0, 0, 
ª«meTabÀFunc
),

234 #i‚de‡
SQLITE_OMIT_TRIGGER


235 
	`FUNCTION
(
sqlôe_ª«me_åiggî
, 2, 0, 0, 
ª«meTriggîFunc
),

237 #i‚de‡
SQLITE_OMIT_FOREIGN_KEY


238 
	`FUNCTION
(
sqlôe_ª«me_∑ª¡
, 3, 0, 0, 
ª«meP¨ítFunc
),

241 
	`sqlôe3In£πBuûtöFuncs
(
aA…îTabÀFuncs
, 
	`AºaySize
(aAlterTableFuncs));

242 
	}
}

260 *
	$whîeOrName
(
sqlôe3
 *
db
, *
zWhîe
, *
zC⁄°™t
){

261 *
zNew
;

262 if–!
zWhîe
 ){

263 
zNew
 = 
	`sqlôe3MPrötf
(
db
, "«me=%Q", 
zC⁄°™t
);

265 
zNew
 = 
	`sqlôe3MPrötf
(
db
, "%†ORÇame=%Q", 
zWhîe
, 
zC⁄°™t
);

266 
	`sqlôe3DbFªe
(
db
, 
zWhîe
);

268  
zNew
;

269 
	}
}

271 #i‡!
deföed
(
SQLITE_OMIT_FOREIGN_KEY
Ë&& !deföed(
SQLITE_OMIT_TRIGGER
)

278 *
	$whîeF‹eignKeys
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTab
){

279 
FKey
 *
p
;

280 *
zWhîe
 = 0;

281 
p
=
	`sqlôe3FkRe„ªn˚s
(
pTab
);Ö;Öı->
pNextTo
){

282 
zWhîe
 = 
	`whîeOrName
(
pP¨£
->
db
, zWhîe, 
p
->
pFrom
->
zName
);

284  
zWhîe
;

285 
	}
}

294 *
	$whîeTempTriggîs
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTab
){

295 
Triggî
 *
pTrig
;

296 *
zWhîe
 = 0;

297 c⁄° 
Schema
 *
pTempSchema
 = 
pP¨£
->
db
->
aDb
[1].
pSchema
;

304 if–
pTab
->
pSchema
!=
pTempSchema
 ){

305 
sqlôe3
 *
db
 = 
pP¨£
->db;

306 
pTrig
=
	`sqlôe3TriggîLi°
(
pP¨£
, 
pTab
);ÖTrig;ÖTrigıTrig->
pNext
){

307 if–
pTrig
->
pSchema
==
pTempSchema
 ){

308 
zWhîe
 = 
	`whîeOrName
(
db
, zWhîe, 
pTrig
->
zName
);

312 if–
zWhîe
 ){

313 *
zNew
 = 
	`sqlôe3MPrötf
(
pP¨£
->
db
, "ty≥='åiggî' AND (%s)", 
zWhîe
);

314 
	`sqlôe3DbFªe
(
pP¨£
->
db
, 
zWhîe
);

315 
zWhîe
 = 
zNew
;

317  
zWhîe
;

318 
	}
}

328 
	$ªlﬂdTabÀSchema
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTab
, c⁄° *
zName
){

329 
Vdbe
 *
v
;

330 *
zWhîe
;

331 
iDb
;

332 #i‚de‡
SQLITE_OMIT_TRIGGER


333 
Triggî
 *
pTrig
;

336 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

337 if–
	`NEVER
(
v
==0) ) ;

338 
	`as£π
–
	`sqlôe3BåìHﬁdsAŒMuãxes
(
pP¨£
->
db
) );

339 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTab
->
pSchema
);

340 
	`as£π
–
iDb
>=0 );

342 #i‚de‡
SQLITE_OMIT_TRIGGER


344 
pTrig
=
	`sqlôe3TriggîLi°
(
pP¨£
, 
pTab
);ÖTrig;ÖTrigıTrig->
pNext
){

345 
iTrigDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTrig
->
pSchema
);

346 
	`as£π
–
iTrigDb
==
iDb
 || iTrigDb==1 );

347 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Dr›Triggî
, 
iTrigDb
, 0, 0, 
pTrig
->
zName
, 0);

352 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Dr›TabÀ
, 
iDb
, 0, 0, 
pTab
->
zName
, 0);

355 
zWhîe
 = 
	`sqlôe3MPrötf
(
pP¨£
->
db
, "tbl_«me=%Q", 
zName
);

356 if–!
zWhîe
 ) ;

357 
	`sqlôe3VdbeAddP¨£SchemaOp
(
v
, 
iDb
, 
zWhîe
);

359 #i‚de‡
SQLITE_OMIT_TRIGGER


363 if–(
zWhîe
=
	`whîeTempTriggîs
(
pP¨£
, 
pTab
))!=0 ){

364 
	`sqlôe3VdbeAddP¨£SchemaOp
(
v
, 1, 
zWhîe
);

367 
	}
}

377 
	$isSy°emTabÀ
(
P¨£
 *
pP¨£
, c⁄° *
zName
){

378 if–
	`sqlôe3SåÀn30
(
zName
)>6 && 0==
	`sqlôe3SåNICmp
(zName, "sqlite_", 7) ){

379 
	`sqlôe3Eº‹Msg
(
pP¨£
, "èbÀ %†mayÇŸ bêÆãªd", 
zName
);

383 
	}
}

389 
	$sqlôe3A…îRíameTabÀ
(

390 
P¨£
 *
pP¨£
,

391 
SrcLi°
 *
pSrc
,

392 
Tokí
 *
pName


394 
iDb
;

395 *
zDb
;

396 
TabÀ
 *
pTab
;

397 *
zName
 = 0;

398 
sqlôe3
 *
db
 = 
pP¨£
->db;

399 
nTabName
;

400 c⁄° *
zTabName
;

401 
Vdbe
 *
v
;

402 #i‚de‡
SQLITE_OMIT_TRIGGER


403 *
zWhîe
 = 0;

405 
VTabÀ
 *
pVTab
 = 0;

406 
ßvedDbFœgs
;

408 
ßvedDbFœgs
 = 
db
->
Êags
;

409 if–
	`NEVER
(
db
->
mÆlocFaûed
ËË
exô_ª«me_èbÀ
;

410 
	`as£π
–
pSrc
->
nSrc
==1 );

411 
	`as£π
–
	`sqlôe3BåìHﬁdsAŒMuãxes
(
pP¨£
->
db
) );

413 
pTab
 = 
	`sqlôe3LoˇãTabÀIãm
(
pP¨£
, 0, &
pSrc
->
a
[0]);

414 if–!
pTab
 ) 
exô_ª«me_èbÀ
;

415 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTab
->
pSchema
);

416 
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

417 
db
->
Êags
 |
SQLITE_Pª„rBuûtö
;

420 
zName
 = 
	`sqlôe3NameFromTokí
(
db
, 
pName
);

421 if–!
zName
 ) 
exô_ª«me_èbÀ
;

426 if–
	`sqlôe3FödTabÀ
(
db
, 
zName
, 
zDb
Ë|| 
	`sqlôe3FödIndex
(db, zName, zDb) ){

427 
	`sqlôe3Eº‹Msg
(
pP¨£
,

428 "thîêi†ÆªadyánŸhîÅabÀ o∏ödex wôhÅhi†«me: %s", 
zName
);

429 
exô_ª«me_èbÀ
;

435 if–
SQLITE_OK
!=
	`isSy°emTabÀ
(
pP¨£
, 
pTab
->
zName
) ){

436 
exô_ª«me_èbÀ
;

438 if–
SQLITE_OK
!=
	`sqlôe3CheckObje˘Name
(
pP¨£
, 
zName
) ){ 

439 
exô_ª«me_èbÀ
;

442 #i‚de‡
SQLITE_OMIT_VIEW


443 if–
pTab
->
pSñe˘
 ){

444 
	`sqlôe3Eº‹Msg
(
pP¨£
, "võw %†mayÇŸ bêÆãªd", 
pTab
->
zName
);

445 
exô_ª«me_èbÀ
;

449 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


451 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_ALTER_TABLE
, 
zDb
, 
pTab
->
zName
, 0) ){

452 
exô_ª«me_èbÀ
;

456 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


457 if–
	`sqlôe3VõwGëCﬁumnNames
(
pP¨£
, 
pTab
) ){

458 
exô_ª«me_èbÀ
;

460 if–
	`IsVútuÆ
(
pTab
) ){

461 
pVTab
 = 
	`sqlôe3GëVTabÀ
(
db
, 
pTab
);

462 if–
pVTab
->
pVèb
->
pModuÀ
->
xRíame
==0 ){

463 
pVTab
 = 0;

473 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

474 if–
v
==0 ){

475 
exô_ª«me_èbÀ
;

477 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 
pVTab
!=0, 
iDb
);

478 
	`sqlôe3Ch™geCookõ
(
pP¨£
, 
iDb
);

485 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


486 if–
pVTab
 ){

487 
i
 = ++
pP¨£
->
nMem
;

488 
	`sqlôe3VdbeLﬂdSåög
(
v
, 
i
, 
zName
);

489 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_VRíame
, 
i
, 0, 0,(c⁄° *)
pVTab
, 
P4_VTAB
);

490 
	`sqlôe3MayAb‹t
(
pP¨£
);

495 
zTabName
 = 
pTab
->
zName
;

496 
nTabName
 = 
	`sqlôe3Utf8Ch¨Lí
(
zTabName
, -1);

498 #i‡!
	`deföed
(
SQLITE_OMIT_FOREIGN_KEY
Ë&& !deföed(
SQLITE_OMIT_TRIGGER
)

499 if–
db
->
Êags
&
SQLITE_F‹eignKeys
 ){

503 if–(
zWhîe
=
	`whîeF‹eignKeys
(
pP¨£
, 
pTab
))!=0 ){

504 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

507 "WHERE %s;", 
zDb
, 
	`SCHEMA_TABLE
(
iDb
), 
zTabName
, 
zName
, 
zWhîe
);

508 
	`sqlôe3DbFªe
(
db
, 
zWhîe
);

514 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

516 #ifde‡
SQLITE_OMIT_TRIGGER


531 
zDb
, 
	`SCHEMA_TABLE
(
iDb
), 
zName
, zName, zName,

532 #i‚de‡
SQLITE_OMIT_TRIGGER


533 
zName
,

535 
zName
, 
nTabName
, 
zTabName


538 #i‚de‡
SQLITE_OMIT_AUTOINCREMENT


542 if–
	`sqlôe3FödTabÀ
(
db
, "sqlôe_£quí˚", 
zDb
) ){

543 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

545 
zDb
, 
zName
, 
pTab
->zName);

549 #i‚de‡
SQLITE_OMIT_TRIGGER


554 if–(
zWhîe
=
	`whîeTempTriggîs
(
pP¨£
, 
pTab
))!=0 ){

555 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

559 "WHERE %s;", 
zName
, zName, 
zWhîe
);

560 
	`sqlôe3DbFªe
(
db
, 
zWhîe
);

564 #i‡!
	`deföed
(
SQLITE_OMIT_FOREIGN_KEY
Ë&& !deföed(
SQLITE_OMIT_TRIGGER
)

565 if–
db
->
Êags
&
SQLITE_F‹eignKeys
 ){

566 
FKey
 *
p
;

567 
p
=
	`sqlôe3FkRe„ªn˚s
(
pTab
);Ö;Öı->
pNextTo
){

568 
TabÀ
 *
pFrom
 = 
p
->pFrom;

569 if–
pFrom
!=
pTab
 ){

570 
	`ªlﬂdTabÀSchema
(
pP¨£
, 
p
->
pFrom
,ÖFrom->
zName
);

577 
	`ªlﬂdTabÀSchema
(
pP¨£
, 
pTab
, 
zName
);

579 
exô_ª«me_èbÀ
:

580 
	`sqlôe3SrcLi°Dñëe
(
db
, 
pSrc
);

581 
	`sqlôe3DbFªe
(
db
, 
zName
);

582 
db
->
Êags
 = 
ßvedDbFœgs
;

583 
	}
}

593 
	$sqlôe3A…îFöishAddCﬁumn
(
P¨£
 *
pP¨£
, 
Tokí
 *
pCﬁDef
){

594 
TabÀ
 *
pNew
;

595 
TabÀ
 *
pTab
;

596 
iDb
;

597 c⁄° *
zDb
;

598 c⁄° *
zTab
;

599 *
zCﬁ
;

600 
Cﬁumn
 *
pCﬁ
;

601 
Ex¥
 *
pDÊt
;

602 
sqlôe3
 *
db
;

603 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

605 
db
 = 
pP¨£
->db;

606 if–
pP¨£
->
nEº
 || 
db
->
mÆlocFaûed
 ) ;

607 
	`as£π
–
v
!=0 );

608 
pNew
 = 
pP¨£
->
pNewTabÀ
;

609 
	`as£π
–
pNew
 );

611 
	`as£π
–
	`sqlôe3BåìHﬁdsAŒMuãxes
(
db
) );

612 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pNew
->
pSchema
);

613 
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

614 
zTab
 = &
pNew
->
zName
[16];

615 
pCﬁ
 = &
pNew
->
aCﬁ
[pNew->
nCﬁ
-1];

616 
pDÊt
 = 
pCﬁ
->pDflt;

617 
pTab
 = 
	`sqlôe3FödTabÀ
(
db
, 
zTab
, 
zDb
);

618 
	`as£π
–
pTab
 );

620 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


622 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_ALTER_TABLE
, 
zDb
, 
pTab
->
zName
, 0) ){

631 
	`as£π
–
pDÊt
==0 ||ÖDÊt->
›
==
TK_SPAN
 );

632 if–
pDÊt
 &&ÖDÊt->
pLe·
->
›
==
TK_NULL
 ){

633 
pDÊt
 = 0;

640 if–
pCﬁ
->
cﬁFœgs
 & 
COLFLAG_PRIMKEY
 ){

641 
	`sqlôe3Eº‹Msg
(
pP¨£
, "Cannotáddá PRIMARY KEY column");

644 if–
pNew
->
pIndex
 ){

645 
	`sqlôe3Eº‹Msg
(
pP¨£
, "Cannotáddá UNIQUE column");

648 if–(
db
->
Êags
&
SQLITE_F‹eignKeys
Ë&& 
pNew
->
pFKey
 && 
pDÊt
 ){

649 
	`sqlôe3Eº‹Msg
(
pP¨£
,

653 if–
pCﬁ
->
nŸNuŒ
 && !
pDÊt
 ){

654 
	`sqlôe3Eº‹Msg
(
pP¨£
,

662 if–
pDÊt
 ){

663 
sqlôe3_vÆue
 *
pVÆ
 = 0;

664 
rc
;

665 
rc
 = 
	`sqlôe3VÆueFromEx¥
(
db
, 
pDÊt
, 
SQLITE_UTF8
, 
SQLITE_AFF_BLOB
, &
pVÆ
);

666 
	`as£π
–
rc
==
SQLITE_OK
 ||Ñc==
SQLITE_NOMEM
 );

667 if–
rc
!=
SQLITE_OK
 ){

668 
	`as£π
–
db
->
mÆlocFaûed
 == 1 );

671 if–!
pVÆ
 ){

672 
	`sqlôe3Eº‹Msg
(
pP¨£
, "Cannotáddá column withÇon-constant default");

675 
	`sqlôe3VÆueFªe
(
pVÆ
);

679 
zCﬁ
 = 
	`sqlôe3DbSåNDup
(
db
, (*)
pCﬁDef
->
z
,ÖCﬁDef->
n
);

680 if–
zCﬁ
 ){

681 *
zEnd
 = &
zCﬁ
[
pCﬁDef
->
n
-1];

682 
ßvedDbFœgs
 = 
db
->
Êags
;

683  
zEnd
>
zCﬁ
 && (*zEnd==';' || 
	`sqlôe3Is•a˚
(*zEnd)) ){

684 *
zEnd
-- = '\0';

686 
db
->
Êags
 |
SQLITE_Pª„rBuûtö
;

687 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

691 
zDb
, 
	`SCHEMA_TABLE
(
iDb
), 
pNew
->
addCﬁOff£t
, 
zCﬁ
,ÖNew->addColOffset+1,

692 
zTab


694 
	`sqlôe3DbFªe
(
db
, 
zCﬁ
);

695 
db
->
Êags
 = 
ßvedDbFœgs
;

706 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_SëCookõ
, 
iDb
, 
BTREE_FILE_FORMAT
,

707 
SQLITE_MAX_FILE_FORMAT
);

710 
	`ªlﬂdTabÀSchema
(
pP¨£
, 
pTab
,ÖTab->
zName
);

711 
	}
}

728 
	$sqlôe3A…îBegöAddCﬁumn
(
P¨£
 *
pP¨£
, 
SrcLi°
 *
pSrc
){

729 
TabÀ
 *
pNew
;

730 
TabÀ
 *
pTab
;

731 
Vdbe
 *
v
;

732 
iDb
;

733 
i
;

734 
nAŒoc
;

735 
sqlôe3
 *
db
 = 
pP¨£
->db;

738 
	`as£π
–
pP¨£
->
pNewTabÀ
==0 );

739 
	`as£π
–
	`sqlôe3BåìHﬁdsAŒMuãxes
(
db
) );

740 if–
db
->
mÆlocFaûed
 ) 
exô_begö_add_cﬁumn
;

741 
pTab
 = 
	`sqlôe3LoˇãTabÀIãm
(
pP¨£
, 0, &
pSrc
->
a
[0]);

742 if–!
pTab
 ) 
exô_begö_add_cﬁumn
;

744 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


745 if–
	`IsVútuÆ
(
pTab
) ){

746 
	`sqlôe3Eº‹Msg
(
pP¨£
, "virtualÅables mayÇot beáltered");

747 
exô_begö_add_cﬁumn
;

752 if–
pTab
->
pSñe˘
 ){

753 
	`sqlôe3Eº‹Msg
(
pP¨£
, "Cannotáddá columnÅoá view");

754 
exô_begö_add_cﬁumn
;

756 if–
SQLITE_OK
!=
	`isSy°emTabÀ
(
pP¨£
, 
pTab
->
zName
) ){

757 
exô_begö_add_cﬁumn
;

760 
	`as£π
–
pTab
->
addCﬁOff£t
>0 );

761 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pTab
->
pSchema
);

770 
pNew
 = (
TabÀ
*)
	`sqlôe3DbMÆlocZîo
(
db
, (Table));

771 if–!
pNew
 ) 
exô_begö_add_cﬁumn
;

772 
pP¨£
->
pNewTabÀ
 = 
pNew
;

773 
pNew
->
nRef
 = 1;

774 
pNew
->
nCﬁ
 = 
pTab
->nCol;

775 
	`as£π
–
pNew
->
nCﬁ
>0 );

776 
nAŒoc
 = (((
pNew
->
nCﬁ
-1)/8)*8)+8;

777 
	`as£π
–
nAŒoc
>=
pNew
->
nCﬁ
 &&ÇAlloc%8==0 &&ÇAlloc-pNew->nCol<8 );

778 
pNew
->
aCﬁ
 = (
Cﬁumn
*)
	`sqlôe3DbMÆlocZîo
(
db
, (Cﬁumn)*
nAŒoc
);

779 
pNew
->
zName
 = 
	`sqlôe3MPrötf
(
db
, "sqlôe_Æãπab_%s", 
pTab
->zName);

780 if–!
pNew
->
aCﬁ
 || !pNew->
zName
 ){

781 
	`as£π
–
db
->
mÆlocFaûed
 );

782 
exô_begö_add_cﬁumn
;

784 
	`mem˝y
(
pNew
->
aCﬁ
, 
pTab
->aCﬁ, (
Cﬁumn
)*pNew->
nCﬁ
);

785 
i
=0; i<
pNew
->
nCﬁ
; i++){

786 
Cﬁumn
 *
pCﬁ
 = &
pNew
->
aCﬁ
[
i
];

787 
pCﬁ
->
zName
 = 
	`sqlôe3DbSåDup
(
db
,ÖCol->zName);

788 
pCﬁ
->
zCﬁl
 = 0;

789 
pCﬁ
->
pDÊt
 = 0;

791 
pNew
->
pSchema
 = 
db
->
aDb
[
iDb
].pSchema;

792 
pNew
->
addCﬁOff£t
 = 
pTab
->addColOffset;

793 
pNew
->
nRef
 = 1;

796 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 0, 
iDb
);

797 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

798 if–!
v
 ) 
exô_begö_add_cﬁumn
;

799 
	`sqlôe3Ch™geCookõ
(
pP¨£
, 
iDb
);

801 
exô_begö_add_cﬁumn
:

802 
	`sqlôe3SrcLi°Dñëe
(
db
, 
pSrc
);

804 
	}
}

	@analyze.c

142 #i‚de‡
SQLITE_OMIT_ANALYZE


143 
	~"sqlôeI¡.h
"

145 #i‡
deföed
(
SQLITE_ENABLE_STAT4
)

146 
	#IsSèt4
 1

	)

147 
	#IsSèt3
 0

	)

148 #ñi‡
deföed
(
SQLITE_ENABLE_STAT3
)

149 
	#IsSèt4
 0

	)

150 
	#IsSèt3
 1

	)

152 
	#IsSèt4
 0

	)

153 
	#IsSèt3
 0

	)

154 #unde‡
SQLITE_STAT4_SAMPLES


155 
	#SQLITE_STAT4_SAMPLES
 1

	)

157 
	#IsSèt34
 (
IsSèt3
+
IsSèt4
Ë

	)

172 
	$›íSètTabÀ
(

173 
P¨£
 *
pP¨£
,

174 
iDb
,

175 
iSètCur
,

176 c⁄° *
zWhîe
,

177 c⁄° *
zWhîeTy≥


180 c⁄° *
zName
;

181 c⁄° *
zCﬁs
;

182 } 
aTabÀ
[] = {

184 #i‡
	`deföed
(
SQLITE_ENABLE_STAT4
)

187 #ñi‡
	`deföed
(
SQLITE_ENABLE_STAT3
)

195 
i
;

196 
sqlôe3
 *
db
 = 
pP¨£
->db;

197 
Db
 *
pDb
;

198 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

199 
aRoŸ
[
	`AºaySize
(
aTabÀ
)];

200 
u8
 
aCª©eTbl
[
	`AºaySize
(
aTabÀ
)];

202 if–
v
==0 ) ;

203 
	`as£π
–
	`sqlôe3BåìHﬁdsAŒMuãxes
(
db
) );

204 
	`as£π
–
	`sqlôe3VdbeDb
(
v
)==
db
 );

205 
pDb
 = &
db
->
aDb
[
iDb
];

210 
i
=0; i<
	`AºaySize
(
aTabÀ
); i++){

211 c⁄° *
zTab
 = 
aTabÀ
[
i
].
zName
;

212 
TabÀ
 *
pSèt
;

213 if–(
pSèt
 = 
	`sqlôe3FödTabÀ
(
db
, 
zTab
, 
pDb
->
zName
))==0 ){

214 if–
aTabÀ
[
i
].
zCﬁs
 ){

219 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

220 "CREATE TABLE %Q.%s(%s)", 
pDb
->
zName
, 
zTab
, 
aTabÀ
[
i
].
zCﬁs


222 
aRoŸ
[
i
] = 
pP¨£
->
ªgRoŸ
;

223 
aCª©eTbl
[
i
] = 
OPFLAG_P2ISREG
;

229 
aRoŸ
[
i
] = 
pSèt
->
äum
;

230 
aCª©eTbl
[
i
] = 0;

231 
	`sqlôe3TabÀLock
(
pP¨£
, 
iDb
, 
aRoŸ
[
i
], 1, 
zTab
);

232 if–
zWhîe
 ){

233 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

235 
pDb
->
zName
, 
zTab
, 
zWhîeTy≥
, 
zWhîe


239 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_CÀ¨
, 
aRoŸ
[
i
], 
iDb
);

245 
i
=0; 
aTabÀ
[i].
zCﬁs
; i++){

246 
	`as£π
–
i
<
	`AºaySize
(
aTabÀ
) );

247 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_O≥nWrôe
, 
iSètCur
+
i
, 
aRoŸ
[i], 
iDb
, 3);

248 
	`sqlôe3VdbeCh™geP5
(
v
, 
aCª©eTbl
[
i
]);

249 
	`VdbeCommít
((
v
, 
aTabÀ
[
i
].
zName
));

251 
	}
}

256 #i‚de‡
SQLITE_STAT4_SAMPLES


257 
	#SQLITE_STAT4_SAMPLES
 24

	)

265 
Sèt4Accum
 
	tSèt4Accum
;

266 
Sèt4Sam∂e
 
	tSèt4Sam∂e
;

267 
	sSèt4Sam∂e
 {

268 
tRow˙t
 *
	m™Eq
;

269 
tRow˙t
 *
	m™DLt
;

270 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


271 
tRow˙t
 *
	m™Lt
;

273 
i64
 
	miRowid
;

274 
u8
 *
	maRowid
;

275 } 
	mu
;

276 
u32
 
	mnRowid
;

277 
u8
 
	misPSam∂e
;

278 
	miCﬁ
;

279 
u32
 
	miHash
;

282 
	sSèt4Accum
 {

283 
tRow˙t
 
	mnRow
;

284 
tRow˙t
 
	mnPSam∂e
;

285 
	mnCﬁ
;

286 
	mnKeyCﬁ
;

287 
	mmxSam∂e
;

288 
Sèt4Sam∂e
 
	mcuºít
;

289 
u32
 
	miP∫
;

290 
Sèt4Sam∂e
 *
	maBe°
;

291 
	miMö
;

292 
	mnSam∂e
;

293 
	miGë
;

294 
Sèt4Sam∂e
 *
	ma
;

295 
sqlôe3
 *
	mdb
;

300 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


301 
	$ßm∂eCÀ¨
(
sqlôe3
 *
db
, 
Sèt4Sam∂e
 *
p
){

302 
	`as£π
–
db
!=0 );

303 if–
p
->
nRowid
 ){

304 
	`sqlôe3DbFªe
(
db
, 
p
->
u
.
aRowid
);

305 
p
->
nRowid
 = 0;

307 
	}
}

312 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


313 
	$ßm∂eSëRowid
(
sqlôe3
 *
db
, 
Sèt4Sam∂e
 *
p
, 
n
, c⁄° 
u8
 *
pD©a
){

314 
	`as£π
–
db
!=0 );

315 if–
p
->
nRowid
 ) 
	`sqlôe3DbFªe
(
db
,Ö->
u
.
aRowid
);

316 
p
->
u
.
aRowid
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, 
n
);

317 if–
p
->
u
.
aRowid
 ){

318 
p
->
nRowid
 = 
n
;

319 
	`mem˝y
(
p
->
u
.
aRowid
, 
pD©a
, 
n
);

321 
p
->
nRowid
 = 0;

323 
	}
}

328 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


329 
	$ßm∂eSëRowidI¡64
(
sqlôe3
 *
db
, 
Sèt4Sam∂e
 *
p
, 
i64
 
iRowid
){

330 
	`as£π
–
db
!=0 );

331 if–
p
->
nRowid
 ) 
	`sqlôe3DbFªe
(
db
,Ö->
u
.
aRowid
);

332 
p
->
nRowid
 = 0;

333 
p
->
u
.
iRowid
 = iRowid;

334 
	}
}

341 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


342 
	$ßm∂eC›y
(
Sèt4Accum
 *
p
, 
Sèt4Sam∂e
 *
pTo
, Sèt4Sam∂ê*
pFrom
){

343 
pTo
->
isPSam∂e
 = 
pFrom
->isPSample;

344 
pTo
->
iCﬁ
 = 
pFrom
->iCol;

345 
pTo
->
iHash
 = 
pFrom
->iHash;

346 
	`mem˝y
(
pTo
->
™Eq
, 
pFrom
->™Eq, (
tRow˙t
)*
p
->
nCﬁ
);

347 
	`mem˝y
(
pTo
->
™Lt
, 
pFrom
->™Lt, (
tRow˙t
)*
p
->
nCﬁ
);

348 
	`mem˝y
(
pTo
->
™DLt
, 
pFrom
->™DLt, (
tRow˙t
)*
p
->
nCﬁ
);

349 if–
pFrom
->
nRowid
 ){

350 
	`ßm∂eSëRowid
(
p
->
db
, 
pTo
, 
pFrom
->
nRowid
,ÖFrom->
u
.
aRowid
);

352 
	`ßm∂eSëRowidI¡64
(
p
->
db
, 
pTo
, 
pFrom
->
u
.
iRowid
);

354 
	}
}

360 
	$°©4De°ru˘‹
(*
pOld
){

361 
Sèt4Accum
 *
p
 = (Sèt4Accum*)
pOld
;

362 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


363 
i
;

364 
i
=0; i<
p
->
nCﬁ
; i++Ë
	`ßm∂eCÀ¨
’->
db
,Ö->
aBe°
+i);

365 
i
=0; i<
p
->
mxSam∂e
; i++Ë
	`ßm∂eCÀ¨
’->
db
,Ö->
a
+i);

366 
	`ßm∂eCÀ¨
(
p
->
db
, &p->
cuºít
);

368 
	`sqlôe3DbFªe
(
p
->
db
,Ö);

369 
	}
}

394 
	$°©Inô
(

395 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

396 
¨gc
,

397 
sqlôe3_vÆue
 **
¨gv


399 
Sèt4Accum
 *
p
;

400 
nCﬁ
;

401 
nKeyCﬁ
;

402 
nCﬁUp
;

403 
n
;

404 
sqlôe3
 *
db
;

405 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


406 
mxSam∂e
 = 
SQLITE_STAT4_SAMPLES
;

410 
	`UNUSED_PARAMETER
(
¨gc
);

411 
nCﬁ
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[0]);

412 
	`as£π
–
nCﬁ
>0 );

413 
nCﬁUp
 = (
tRow˙t
)<8 ? (
nCﬁ
+1)&~1 :ÇCol;

414 
nKeyCﬁ
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[1]);

415 
	`as£π
–
nKeyCﬁ
<=
nCﬁ
 );

416 
	`as£π
–
nKeyCﬁ
>0 );

419 
n
 = (*
p
)

420 + (
tRow˙t
)*
nCﬁUp


421 + (
tRow˙t
)*
nCﬁUp


422 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


423 + (
tRow˙t
)*
nCﬁUp


424 + (
Sèt4Sam∂e
)*(
nCﬁ
+
mxSam∂e
)

425 + (
tRow˙t
)*3*
nCﬁUp
*(
nCﬁ
+
mxSam∂e
)

428 
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
);

429 
p
 = 
	`sqlôe3DbMÆlocZîo
(
db
, 
n
);

430 if–
p
==0 ){

431 
	`sqlôe3_ªsu…_îr‹_nomem
(
c⁄ãxt
);

435 
p
->
db
 = db;

436 
p
->
nRow
 = 0;

437 
p
->
nCﬁ
 =ÇCol;

438 
p
->
nKeyCﬁ
 =ÇKeyCol;

439 
p
->
cuºít
.
™DLt
 = (
tRow˙t
*)&p[1];

440 
p
->
cuºít
.
™Eq
 = &p->cuºít.
™DLt
[
nCﬁUp
];

442 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


444 
u8
 *
pS∑˚
;

445 
i
;

447 
p
->
iGë
 = -1;

448 
p
->
mxSam∂e
 = mxSample;

449 
p
->
nPSam∂e
 = (
tRow˙t
)(
	`sqlôe3_vÆue_öt64
(
¨gv
[2])/(
mxSam∂e
/3+1) + 1);

450 
p
->
cuºít
.
™Lt
 = &p->cuºít.
™Eq
[
nCﬁUp
];

451 
p
->
iP∫
 = 0x689e962d*(
u32
)
nCﬁ
 ^ 0xd0944565*(u32)
	`sqlôe3_vÆue_öt
(
¨gv
[2]);

454 
p
->
a
 = (
Sèt4Sam∂e
*)&p->
cuºít
.
™Lt
[
nCﬁUp
];

455 
p
->
aBe°
 = &p->
a
[
mxSam∂e
];

456 
pS∑˚
 = (
u8
*)(&
p
->
a
[
mxSam∂e
+
nCﬁ
]);

457 
i
=0; i<(
mxSam∂e
+
nCﬁ
); i++){

458 
p
->
a
[
i
].
™Eq
 = (
tRow˙t
 *)
pS∑˚
;ÖS∑˚ +(—Row˙tË* 
nCﬁUp
);

459 
p
->
a
[
i
].
™Lt
 = (
tRow˙t
 *)
pS∑˚
;ÖS∑˚ +(—Row˙tË* 
nCﬁUp
);

460 
p
->
a
[
i
].
™DLt
 = (
tRow˙t
 *)
pS∑˚
;ÖS∑˚ +(—Row˙tË* 
nCﬁUp
);

462 
	`as£π
–(
pS∑˚
 - (
u8
*)
p
)==
n
 );

464 
i
=0; i<
nCﬁ
; i++){

465 
p
->
aBe°
[
i
].
iCﬁ
 = i;

474 
	`sqlôe3_ªsu…_blob
(
c⁄ãxt
, 
p
, (*p), 
°©4De°ru˘‹
);

475 
	}
}

476 c⁄° 
FuncDef
 
	g°©InôFuncdef
 = {

477 2+
IsSèt34
,

478 
SQLITE_UTF8
,

481 
°©Inô
,

487 #ifde‡
SQLITE_ENABLE_STAT4


499 
	$ßm∂eIsBëãrPo°
(

500 
Sèt4Accum
 *
pAccum
,

501 
Sèt4Sam∂e
 *
pNew
,

502 
Sèt4Sam∂e
 *
pOld


504 
nCﬁ
 = 
pAccum
->nCol;

505 
i
;

506 
	`as£π
–
pNew
->
iCﬁ
==
pOld
->iCol );

507 
i
=
pNew
->
iCﬁ
+1; i<
nCﬁ
; i++){

508 if–
pNew
->
™Eq
[
i
]>
pOld
->anEq[i] )  1;

509 if–
pNew
->
™Eq
[
i
]<
pOld
->anEq[i] )  0;

511 if–
pNew
->
iHash
>
pOld
->iHash )  1;

513 
	}
}

516 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


523 
	$ßm∂eIsBëãr
(

524 
Sèt4Accum
 *
pAccum
,

525 
Sèt4Sam∂e
 *
pNew
,

526 
Sèt4Sam∂e
 *
pOld


528 
tRow˙t
 
nEqNew
 = 
pNew
->
™Eq
[pNew->
iCﬁ
];

529 
tRow˙t
 
nEqOld
 = 
pOld
->
™Eq
[pOld->
iCﬁ
];

531 
	`as£π
–
pOld
->
isPSam∂e
==0 && 
pNew
->isPSample==0 );

532 
	`as£π
–
IsSèt4
 || (
pNew
->
iCﬁ
==0 && 
pOld
->iCol==0) );

534 if–(
nEqNew
>
nEqOld
) )  1;

535 #ifde‡
SQLITE_ENABLE_STAT4


536 if–
nEqNew
==
nEqOld
 ){

537 if–
pNew
->
iCﬁ
<
pOld
->iCol )  1;

538  (
pNew
->
iCﬁ
==
pOld
->iCﬁ && 
	`ßm∂eIsBëãrPo°
(
pAccum
,ÖNew,ÖOld));

542  (
nEqNew
==
nEqOld
 && 
pNew
->
iHash
>
pOld
->iHash);

544 
	}
}

550 
	$ßm∂eIn£π
(
Sèt4Accum
 *
p
, 
Sèt4Sam∂e
 *
pNew
, 
nEqZîo
){

551 
Sèt4Sam∂e
 *
pSam∂e
 = 0;

552 
i
;

554 
	`as£π
–
IsSèt4
 || 
nEqZîo
==0 );

556 #ifde‡
SQLITE_ENABLE_STAT4


557 if–
pNew
->
isPSam∂e
==0 ){

558 
Sèt4Sam∂e
 *
pUpgøde
 = 0;

559 
	`as£π
–
pNew
->
™Eq
[pNew->
iCﬁ
]>0 );

566 
i
=
p
->
nSam∂e
-1; i>=0; i--){

567 
Sèt4Sam∂e
 *
pOld
 = &
p
->
a
[
i
];

568 if–
pOld
->
™Eq
[
pNew
->
iCﬁ
]==0 ){

569 if–
pOld
->
isPSam∂e
 ) ;

570 
	`as£π
–
pOld
->
iCﬁ
>
pNew
->iCol );

571 
	`as£π
–
	`ßm∂eIsBëãr
(
p
, 
pNew
, 
pOld
) );

572 if–
pUpgøde
==0 || 
	`ßm∂eIsBëãr
(
p
, 
pOld
,ÖUpgrade) ){

573 
pUpgøde
 = 
pOld
;

577 if–
pUpgøde
 ){

578 
pUpgøde
->
iCﬁ
 = 
pNew
->iCol;

579 
pUpgøde
->
™Eq
[pUpgøde->
iCﬁ
] = 
pNew
->anEq[pUpgrade->iCol];

580 
föd_√w_mö
;

586 if–
p
->
nSam∂e
>ı->
mxSam∂e
 ){

587 
Sèt4Sam∂e
 *
pMö
 = &
p
->
a
[p->
iMö
];

588 
tRow˙t
 *
™Eq
 = 
pMö
->anEq;

589 
tRow˙t
 *
™Lt
 = 
pMö
->anLt;

590 
tRow˙t
 *
™DLt
 = 
pMö
->anDLt;

591 
	`ßm∂eCÀ¨
(
p
->
db
, 
pMö
);

592 
	`memmove
(
pMö
, &pMö[1], (
p
->
a
[0])*’->
nSam∂e
-p->
iMö
-1));

593 
pSam∂e
 = &
p
->
a
[p->
nSam∂e
-1];

594 
pSam∂e
->
nRowid
 = 0;

595 
pSam∂e
->
™Eq
 =ánEq;

596 
pSam∂e
->
™DLt
 =ánDLt;

597 
pSam∂e
->
™Lt
 =ánLt;

598 
p
->
nSam∂e
 =Ö->
mxSam∂e
-1;

604 #ifde‡
SQLITE_ENABLE_STAT4


605 
	`as£π
–
p
->
nSam∂e
==0

606 || 
pNew
->
™Lt
[
p
->
nCﬁ
-1] >Ö->
a
[p->
nSam∂e
-1].anLt[p->nCol-1] );

610 
pSam∂e
 = &
p
->
a
[p->
nSam∂e
];

611 
	`ßm∂eC›y
(
p
, 
pSam∂e
, 
pNew
);

612 
p
->
nSam∂e
++;

615 
	`mem£t
(
pSam∂e
->
™Eq
, 0, (
tRow˙t
)*
nEqZîo
);

617 #ifde‡
SQLITE_ENABLE_STAT4


618 
föd_√w_mö
:

620 if–
p
->
nSam∂e
>ı->
mxSam∂e
 ){

621 
iMö
 = -1;

622 
i
=0; i<
p
->
mxSam∂e
; i++){

623 if–
p
->
a
[
i
].
isPSam∂e
 ) ;

624 if–
iMö
<0 || 
	`ßm∂eIsBëãr
(
p
, &p->
a
[iMö], &p->a[
i
]) ){

625 
iMö
 = 
i
;

628 
	`as£π
–
iMö
>=0 );

629 
p
->
iMö
 = iMin;

631 
	}
}

640 
	$ßm∂ePushPªvious
(
Sèt4Accum
 *
p
, 
iChng
){

641 #ifde‡
SQLITE_ENABLE_STAT4


642 
i
;

646 
i
=(
p
->
nCﬁ
-2); i>=
iChng
; i--){

647 
Sèt4Sam∂e
 *
pBe°
 = &
p
->
aBe°
[
i
];

648 
pBe°
->
™Eq
[
i
] = 
p
->
cuºít
.anEq[i];

649 if–
p
->
nSam∂e
<p->
mxSam∂e
 || 
	`ßm∂eIsBëãr
’, 
pBe°
, &p->
a
[p->
iMö
]) ){

650 
	`ßm∂eIn£π
(
p
, 
pBe°
, 
i
);

655 
i
=
p
->
nSam∂e
-1; i>=0; i--){

656 
j
;

657 
j
=
iChng
; j<
p
->
nCﬁ
; j++){

658 if–
p
->
a
[
i
].
™Eq
[
j
]==0 )Ö->a[i].™Eq[j] =Ö->
cuºít
.anEq[j];

663 #i‡
	`deföed
(
SQLITE_ENABLE_STAT3
Ë&& !deföed(
SQLITE_ENABLE_STAT4
)

664 if–
iChng
==0 ){

665 
tRow˙t
 
nLt
 = 
p
->
cuºít
.
™Lt
[0];

666 
tRow˙t
 
nEq
 = 
p
->
cuºít
.
™Eq
[0];

669 if–(
nLt
/
p
->
nPSam∂e
)!=“Lt+
nEq
)/p->nPSample ){

670 
p
->
cuºít
.
isPSam∂e
 = 1;

671 
	`ßm∂eIn£π
(
p
, &p->
cuºít
, 0);

672 
p
->
cuºít
.
isPSam∂e
 = 0;

676 if–
p
->
nSam∂e
<p->
mxSam∂e


677 || 
	`ßm∂eIsBëãr
(
p
, &p->
cuºít
, &p->
a
[p->
iMö
])

679 
	`ßm∂eIn£π
(
p
, &p->
cuºít
, 0);

684 #i‚de‡
SQLITE_ENABLE_STAT3_OR_STAT4


685 
	`UNUSED_PARAMETER
–
p
 );

686 
	`UNUSED_PARAMETER
–
iChng
 );

688 
	}
}

706 
	$°©Push
(

707 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

708 
¨gc
,

709 
sqlôe3_vÆue
 **
¨gv


711 
i
;

714 
Sèt4Accum
 *
p
 = (Sèt4Accum*)
	`sqlôe3_vÆue_blob
(
¨gv
[0]);

715 
iChng
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[1]);

717 
	`UNUSED_PARAMETER
–
¨gc
 );

718 
	`UNUSED_PARAMETER
–
c⁄ãxt
 );

719 
	`as£π
–
p
->
nCﬁ
>0 );

720 
	`as£π
–
iChng
<
p
->
nCﬁ
 );

722 if–
p
->
nRow
==0 ){

724 
i
=0; i<
p
->
nCﬁ
; i++Ëp->
cuºít
.
™Eq
[i] = 1;

727 
	`ßm∂ePushPªvious
(
p
, 
iChng
);

731 
i
=0; i<
iChng
; i++){

732 
p
->
cuºít
.
™Eq
[
i
]++;

734 
i
=
iChng
; i<
p
->
nCﬁ
; i++){

735 
p
->
cuºít
.
™DLt
[
i
]++;

736 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


737 
p
->
cuºít
.
™Lt
[
i
] +p->cuºít.
™Eq
[i];

739 
p
->
cuºít
.
™Eq
[
i
] = 1;

742 
p
->
nRow
++;

743 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


744 if–
	`sqlôe3_vÆue_ty≥
(
¨gv
[2])==
SQLITE_INTEGER
 ){

745 
	`ßm∂eSëRowidI¡64
(
p
->
db
, &p->
cuºít
, 
	`sqlôe3_vÆue_öt64
(
¨gv
[2]));

747 
	`ßm∂eSëRowid
(
p
->
db
, &p->
cuºít
, 
	`sqlôe3_vÆue_byãs
(
¨gv
[2]),

748 
	`sqlôe3_vÆue_blob
(
¨gv
[2]));

750 
p
->
cuºít
.
iHash
 =Ö->
iP∫
 =Ö->iPrn*1103515245 + 12345;

753 #ifde‡
SQLITE_ENABLE_STAT4


755 
tRow˙t
 
nLt
 = 
p
->
cuºít
.
™Lt
[p->
nCﬁ
-1];

758 if–(
nLt
/
p
->
nPSam∂e
)!=(nLt+1)/p->nPSample ){

759 
p
->
cuºít
.
isPSam∂e
 = 1;

760 
p
->
cuºít
.
iCﬁ
 = 0;

761 
	`ßm∂eIn£π
(
p
, &p->
cuºít
,Ö->
nCﬁ
-1);

762 
p
->
cuºít
.
isPSam∂e
 = 0;

766 
i
=0; i<(
p
->
nCﬁ
-1); i++){

767 
p
->
cuºít
.
iCﬁ
 = 
i
;

768 if–
i
>=
iChng
 || 
	`ßm∂eIsBëãrPo°
(
p
, &p->
cuºít
, &p->
aBe°
[i]) ){

769 
	`ßm∂eC›y
(
p
, &p->
aBe°
[
i
], &p->
cuºít
);

774 
	}
}

775 c⁄° 
FuncDef
 
	g°©PushFuncdef
 = {

776 2+
IsSèt34
,

777 
SQLITE_UTF8
,

780 
°©Push
,

786 
	#STAT_GET_STAT1
 0

	)

787 
	#STAT_GET_ROWID
 1

	)

788 
	#STAT_GET_NEQ
 2

	)

789 
	#STAT_GET_NLT
 3

	)

790 
	#STAT_GET_NDLT
 4

	)

805 
	$°©Gë
(

806 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

807 
¨gc
,

808 
sqlôe3_vÆue
 **
¨gv


810 
Sèt4Accum
 *
p
 = (Sèt4Accum*)
	`sqlôe3_vÆue_blob
(
¨gv
[0]);

811 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


813 
eCÆl
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[1]);

814 
	`as£π
–
¨gc
==2 );

815 
	`as£π
–
eCÆl
==
STAT_GET_STAT1
 ||ÉCÆl==
STAT_GET_NEQ


816 || 
eCÆl
==
STAT_GET_ROWID
 ||ÉCÆl==
STAT_GET_NLT


817 || 
eCÆl
==
STAT_GET_NDLT


819 if–
eCÆl
==
STAT_GET_STAT1
 )

821 
	`as£π
–
¨gc
==1 );

845 *
z
;

846 
i
;

848 *
zRë
 = 
	`sqlôe3MÆlocZîo
–(
p
->
nKeyCﬁ
+1)*25 );

849 if–
zRë
==0 ){

850 
	`sqlôe3_ªsu…_îr‹_nomem
(
c⁄ãxt
);

854 
	`sqlôe3_¢¥ötf
(24, 
zRë
, "%Œu", (
u64
)
p
->
nRow
);

855 
z
 = 
zRë
 + 
	`sqlôe3SåÀn30
(zRet);

856 
i
=0; i<
p
->
nKeyCﬁ
; i++){

857 
u64
 
nDi°ö˘
 = 
p
->
cuºít
.
™DLt
[
i
] + 1;

858 
u64
 
iVÆ
 = (
p
->
nRow
 + 
nDi°ö˘
 - 1) /ÇDistinct;

859 
	`sqlôe3_¢¥ötf
(24, 
z
, " %Œu", 
iVÆ
);

860 
z
 +
	`sqlôe3SåÀn30
(z);

861 
	`as£π
–
p
->
cuºít
.
™Eq
[
i
] );

863 
	`as£π
–
z
[0]=='\0' && z>
zRë
 );

865 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zRë
, -1, 
sqlôe3_‰ì
);

867 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


868 if–
eCÆl
==
STAT_GET_ROWID
 ){

869 if–
p
->
iGë
<0 ){

870 
	`ßm∂ePushPªvious
(
p
, 0);

871 
p
->
iGë
 = 0;

873 if–
p
->
iGë
<p->
nSam∂e
 ){

874 
Sèt4Sam∂e
 *
pS
 = 
p
->
a
 +Ö->
iGë
;

875 if–
pS
->
nRowid
==0 ){

876 
	`sqlôe3_ªsu…_öt64
(
c⁄ãxt
, 
pS
->
u
.
iRowid
);

878 
	`sqlôe3_ªsu…_blob
(
c⁄ãxt
, 
pS
->
u
.
aRowid
,ÖS->
nRowid
,

879 
SQLITE_TRANSIENT
);

883 
tRow˙t
 *
aC¡
 = 0;

885 
	`as£π
–
p
->
iGë
<p->
nSam∂e
 );

886  
eCÆl
 ){

887 
STAT_GET_NEQ
: 
aC¡
 = 
p
->
a
[p->
iGë
].
™Eq
; ;

888 
STAT_GET_NLT
: 
aC¡
 = 
p
->
a
[p->
iGë
].
™Lt
; ;

890 
aC¡
 = 
p
->
a
[p->
iGë
].
™DLt
;

891 
p
->
iGë
++;

896 if–
IsSèt3
 ){

897 
	`sqlôe3_ªsu…_öt64
(
c⁄ãxt
, (
i64
)
aC¡
[0]);

899 *
zRë
 = 
	`sqlôe3MÆlocZîo
(
p
->
nCﬁ
 * 25);

900 if–
zRë
==0 ){

901 
	`sqlôe3_ªsu…_îr‹_nomem
(
c⁄ãxt
);

903 
i
;

904 *
z
 = 
zRë
;

905 
i
=0; i<
p
->
nCﬁ
; i++){

906 
	`sqlôe3_¢¥ötf
(24, 
z
, "%Œu ", (
u64
)
aC¡
[
i
]);

907 
z
 +
	`sqlôe3SåÀn30
(z);

909 
	`as£π
–
z
[0]=='\0' && z>
zRë
 );

910 
z
[-1] = '\0';

911 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zRë
, -1, 
sqlôe3_‰ì
);

916 #i‚de‡
SQLITE_DEBUG


917 
	`UNUSED_PARAMETER
–
¨gc
 );

919 
	}
}

920 c⁄° 
FuncDef
 
	g°©GëFuncdef
 = {

921 1+
IsSèt34
,

922 
SQLITE_UTF8
,

925 
°©Gë
,

931 
	$ˇŒSètGë
(
Vdbe
 *
v
, 
ªgSèt4
, 
iP¨am
, 
ªgOut
){

932 
	`as£π
–
ªgOut
!=
ªgSèt4
 &&ÑegOut!=regStat4+1 );

933 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


934 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 
iP¨am
, 
ªgSèt4
+1);

935 #ñi‡
SQLITE_DEBUG


936 
	`as£π
–
iP¨am
==
STAT_GET_STAT1
 );

938 
	`UNUSED_PARAMETER
–
iP¨am
 );

940 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Fun˘i⁄0
, 0, 
ªgSèt4
, 
ªgOut
,

941 (*)&
°©GëFuncdef
, 
P4_FUNCDEF
);

942 
	`sqlôe3VdbeCh™geP5
(
v
, 1 + 
IsSèt34
);

943 
	}
}

949 
	$™ÆyzeO√TabÀ
(

950 
P¨£
 *
pP¨£
,

951 
TabÀ
 *
pTab
,

952 
Index
 *
pO∆yIdx
,

953 
iSètCur
,

954 
iMem
,

955 
iTab


957 
sqlôe3
 *
db
 = 
pP¨£
->db;

958 
Index
 *
pIdx
;

959 
iIdxCur
;

960 
iTabCur
;

961 
Vdbe
 *
v
;

962 
i
;

963 
jZîoRows
 = -1;

964 
iDb
;

965 
u8
 
√edTabÀC¡
 = 1;

966 
ªgNewRowid
 = 
iMem
++;

967 
ªgSèt4
 = 
iMem
++;

968 
ªgChng
 = 
iMem
++;

969 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


970 
ªgRowid
 = 
iMem
++;

972 
ªgTemp
 = 
iMem
++;

973 
ªgTab«me
 = 
iMem
++;

974 
ªgIdx«me
 = 
iMem
++;

975 
ªgSèt1
 = 
iMem
++;

976 
ªgPªv
 = 
iMem
;

978 
pP¨£
->
nMem
 = 
	`MAX
’P¨£->nMem, 
iMem
);

979 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

980 if–
v
==0 || 
	`NEVER
(
pTab
==0) ){

983 if–
pTab
->
äum
==0 ){

987 if–
	`sqlôe3_°æike
("sqlôe_%", 
pTab
->
zName
, 0)==0 ){

991 
	`as£π
–
	`sqlôe3BåìHﬁdsAŒMuãxes
(
db
) );

992 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pTab
->
pSchema
);

993 
	`as£π
–
iDb
>=0 );

994 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

995 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


996 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_ANALYZE
, 
pTab
->
zName
, 0,

997 
db
->
aDb
[
iDb
].
zName
 ) ){

1006 
	`sqlôe3TabÀLock
(
pP¨£
, 
iDb
, 
pTab
->
äum
, 0,ÖTab->
zName
);

1007 
iTabCur
 = 
iTab
++;

1008 
iIdxCur
 = 
iTab
++;

1009 
pP¨£
->
nTab
 = 
	`MAX
’P¨£->nTab, 
iTab
);

1010 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 
iTabCur
, 
iDb
, 
pTab
, 
OP_O≥nRód
);

1011 
	`sqlôe3VdbeLﬂdSåög
(
v
, 
ªgTab«me
, 
pTab
->
zName
);

1013 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

1014 
nCﬁ
;

1015 
addrRewöd
;

1016 
addrNextRow
;

1017 c⁄° *
zIdxName
;

1018 
nCﬁTe°
;

1020 if–
pO∆yIdx
 &&ÖO∆yIdx!=
pIdx
 ) ;

1021 if–
pIdx
->
pP¨tIdxWhîe
==0 ) 
√edTabÀC¡
 = 0;

1022 if–!
	`HasRowid
(
pTab
Ë&& 
	`IsPrim¨yKeyIndex
(
pIdx
) ){

1023 
nCﬁ
 = 
pIdx
->
nKeyCﬁ
;

1024 
zIdxName
 = 
pTab
->
zName
;

1025 
nCﬁTe°
 = 
nCﬁ
 - 1;

1027 
nCﬁ
 = 
pIdx
->
nCﬁumn
;

1028 
zIdxName
 = 
pIdx
->
zName
;

1029 
nCﬁTe°
 = 
pIdx
->
uniqNŸNuŒ
 ?ÖIdx->
nKeyCﬁ
-1 : 
nCﬁ
-1;

1033 
	`sqlôe3VdbeLﬂdSåög
(
v
, 
ªgIdx«me
, 
zIdxName
);

1034 
	`VdbeCommít
((
v
, "A«lysi†f‹ %s.%s", 
pTab
->
zName
, 
zIdxName
));

1072 
pP¨£
->
nMem
 = 
	`MAX
’P¨£->nMem, 
ªgPªv
+
nCﬁTe°
);

1075 
	`as£π
–
iDb
==
	`sqlôe3SchemaToIndex
(
db
, 
pIdx
->
pSchema
) );

1076 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_O≥nRód
, 
iIdxCur
, 
pIdx
->
äum
, 
iDb
);

1077 
	`sqlôe3VdbeSëP4KeyInfo
(
pP¨£
, 
pIdx
);

1078 
	`VdbeCommít
((
v
, "%s", 
pIdx
->
zName
));

1090 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


1091 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Cou¡
, 
iIdxCur
, 
ªgSèt4
+3);

1093 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 
nCﬁ
, 
ªgSèt4
+1);

1094 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 
pIdx
->
nKeyCﬁ
, 
ªgSèt4
+2);

1095 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Fun˘i⁄0
, 0, 
ªgSèt4
+1,ÑegStat4,

1096 (*)&
°©InôFuncdef
, 
P4_FUNCDEF
);

1097 
	`sqlôe3VdbeCh™geP5
(
v
, 2+
IsSèt34
);

1107 
addrRewöd
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Rewöd
, 
iIdxCur
);

1108 
	`VdbeCovîage
(
v
);

1109 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 0, 
ªgChng
);

1110 
addrNextRow
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

1112 if–
nCﬁTe°
>0 ){

1113 
ídDi°ö˘Te°
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

1114 *
aGŸoChng
;

1115 
aGŸoChng
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, ()*
nCﬁTe°
);

1116 if–
aGŸoChng
==0 ) ;

1128 
	`sqlôe3VdbeAddOp0
(
v
, 
OP_GŸo
);

1129 
addrNextRow
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

1130 if–
nCﬁTe°
==1 && 
pIdx
->
nKeyCﬁ
==1 && 
	`IsUniqueIndex
(pIdx) ){

1134 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NŸNuŒ
, 
ªgPªv
, 
ídDi°ö˘Te°
);

1135 
	`VdbeCovîage
(
v
);

1137 
i
=0; i<
nCﬁTe°
; i++){

1138 *
pCﬁl
 = (*)
	`sqlôe3LoˇãCﬁlSeq
(
pP¨£
, 
pIdx
->
azCﬁl
[
i
]);

1139 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 
i
, 
ªgChng
);

1140 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Cﬁumn
, 
iIdxCur
, 
i
, 
ªgTemp
);

1141 
aGŸoChng
[
i
] =

1142 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Ne
, 
ªgTemp
, 0, 
ªgPªv
+
i
, 
pCﬁl
, 
P4_COLLSEQ
);

1143 
	`sqlôe3VdbeCh™geP5
(
v
, 
SQLITE_NULLEQ
);

1144 
	`VdbeCovîage
(
v
);

1146 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 
nCﬁTe°
, 
ªgChng
);

1147 
	`sqlôe3VdbeGŸo
(
v
, 
ídDi°ö˘Te°
);

1157 
	`sqlôe3VdbeJumpHîe
(
v
, 
addrNextRow
-1);

1158 
i
=0; i<
nCﬁTe°
; i++){

1159 
	`sqlôe3VdbeJumpHîe
(
v
, 
aGŸoChng
[
i
]);

1160 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Cﬁumn
, 
iIdxCur
, 
i
, 
ªgPªv
+i);

1162 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
ídDi°ö˘Te°
);

1163 
	`sqlôe3DbFªe
(
db
, 
aGŸoChng
);

1173 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


1174 
	`as£π
–
ªgRowid
==(
ªgSèt4
+2) );

1175 if–
	`HasRowid
(
pTab
) ){

1176 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IdxRowid
, 
iIdxCur
, 
ªgRowid
);

1178 
Index
 *
pPk
 = 
	`sqlôe3Prim¨yKeyIndex
(
pIdx
->
pTabÀ
);

1179 
j
, 
k
, 
ªgKey
;

1180 
ªgKey
 = 
	`sqlôe3GëTempR™ge
(
pP¨£
, 
pPk
->
nKeyCﬁ
);

1181 
j
=0; j<
pPk
->
nKeyCﬁ
; j++){

1182 
k
 = 
	`sqlôe3CﬁumnOfIndex
(
pIdx
, 
pPk
->
aiCﬁumn
[
j
]);

1183 
	`as£π
–
k
>=0 && k<
pTab
->
nCﬁ
 );

1184 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Cﬁumn
, 
iIdxCur
, 
k
, 
ªgKey
+
j
);

1185 
	`VdbeCommít
((
v
, "%s", 
pTab
->
aCﬁ
[
pPk
->
aiCﬁumn
[
j
]].
zName
));

1187 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_MakeRec‹d
, 
ªgKey
, 
pPk
->
nKeyCﬁ
, 
ªgRowid
);

1188 
	`sqlôe3Rñó£TempR™ge
(
pP¨£
, 
ªgKey
, 
pPk
->
nKeyCﬁ
);

1191 
	`as£π
–
ªgChng
==(
ªgSèt4
+1) );

1192 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Fun˘i⁄0
, 1, 
ªgSèt4
, 
ªgTemp
,

1193 (*)&
°©PushFuncdef
, 
P4_FUNCDEF
);

1194 
	`sqlôe3VdbeCh™geP5
(
v
, 2+
IsSèt34
);

1195 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Next
, 
iIdxCur
, 
addrNextRow
); 
	`VdbeCovîage
(v);

1198 
	`ˇŒSètGë
(
v
, 
ªgSèt4
, 
STAT_GET_STAT1
, 
ªgSèt1
);

1199 
	`as£π
–"BBB"[0]==
SQLITE_AFF_TEXT
 );

1200 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_MakeRec‹d
, 
ªgTab«me
, 3, 
ªgTemp
, "BBB", 0);

1201 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NewRowid
, 
iSètCur
, 
ªgNewRowid
);

1202 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_In£π
, 
iSètCur
, 
ªgTemp
, 
ªgNewRowid
);

1203 
	`sqlôe3VdbeCh™geP5
(
v
, 
OPFLAG_APPEND
);

1206 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


1208 
ªgEq
 = 
ªgSèt1
;

1209 
ªgLt
 = 
ªgSèt1
+1;

1210 
ªgDLt
 = 
ªgSèt1
+2;

1211 
ªgSam∂e
 = 
ªgSèt1
+3;

1212 
ªgCﬁ
 = 
ªgSèt1
+4;

1213 
ªgSam∂eRowid
 = 
ªgCﬁ
 + 
nCﬁ
;

1214 
addrNext
;

1215 
addrIsNuŒ
;

1216 
u8
 
£ekOp
 = 
	`HasRowid
(
pTab
Ë? 
OP_NŸExi°s
 : 
OP_NŸFound
;

1218 
pP¨£
->
nMem
 = 
	`MAX
’P¨£->nMem, 
ªgCﬁ
+
nCﬁ
);

1220 
addrNext
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

1221 
	`ˇŒSètGë
(
v
, 
ªgSèt4
, 
STAT_GET_ROWID
, 
ªgSam∂eRowid
);

1222 
addrIsNuŒ
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_IsNuŒ
, 
ªgSam∂eRowid
);

1223 
	`VdbeCovîage
(
v
);

1224 
	`ˇŒSètGë
(
v
, 
ªgSèt4
, 
STAT_GET_NEQ
, 
ªgEq
);

1225 
	`ˇŒSètGë
(
v
, 
ªgSèt4
, 
STAT_GET_NLT
, 
ªgLt
);

1226 
	`ˇŒSètGë
(
v
, 
ªgSèt4
, 
STAT_GET_NDLT
, 
ªgDLt
);

1227 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
£ekOp
, 
iTabCur
, 
addrNext
, 
ªgSam∂eRowid
, 0);

1231 
	`VdbeCovîageNevîTakí
(
v
);

1232 #ifde‡
SQLITE_ENABLE_STAT3


1233 
	`sqlôe3Ex¥CodeLﬂdIndexCﬁumn
(
pP¨£
, 
pIdx
, 
iTabCur
, 0, 
ªgSam∂e
);

1235 
i
=0; i<
nCﬁ
; i++){

1236 
	`sqlôe3Ex¥CodeLﬂdIndexCﬁumn
(
pP¨£
, 
pIdx
, 
iTabCur
, 
i
, 
ªgCﬁ
+i);

1238 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_MakeRec‹d
, 
ªgCﬁ
, 
nCﬁ
, 
ªgSam∂e
);

1240 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_MakeRec‹d
, 
ªgTab«me
, 6, 
ªgTemp
);

1241 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NewRowid
, 
iSètCur
+1, 
ªgNewRowid
);

1242 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_In£π
, 
iSètCur
+1, 
ªgTemp
, 
ªgNewRowid
);

1243 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_GŸo
, 1, 
addrNext
);

1244 
	`sqlôe3VdbeJumpHîe
(
v
, 
addrIsNuŒ
);

1249 
	`sqlôe3VdbeJumpHîe
(
v
, 
addrRewöd
);

1256 if–
pO∆yIdx
==0 && 
√edTabÀC¡
 ){

1257 
	`VdbeCommít
((
v
, "%s", 
pTab
->
zName
));

1258 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Cou¡
, 
iTabCur
, 
ªgSèt1
);

1259 
jZîoRows
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_IfNŸ
, 
ªgSèt1
); 
	`VdbeCovîage
(v);

1260 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NuŒ
, 0, 
ªgIdx«me
);

1261 
	`as£π
–"BBB"[0]==
SQLITE_AFF_TEXT
 );

1262 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_MakeRec‹d
, 
ªgTab«me
, 3, 
ªgTemp
, "BBB", 0);

1263 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NewRowid
, 
iSètCur
, 
ªgNewRowid
);

1264 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_In£π
, 
iSètCur
, 
ªgTemp
, 
ªgNewRowid
);

1265 
	`sqlôe3VdbeCh™geP5
(
v
, 
OPFLAG_APPEND
);

1266 
	`sqlôe3VdbeJumpHîe
(
v
, 
jZîoRows
);

1268 
	}
}

1275 
	$lﬂdA«lysis
(
P¨£
 *
pP¨£
, 
iDb
){

1276 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1277 if–
v
 ){

1278 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_LﬂdA«lysis
, 
iDb
);

1280 
	}
}

1285 
	$™ÆyzeD©aba£
(
P¨£
 *
pP¨£
, 
iDb
){

1286 
sqlôe3
 *
db
 = 
pP¨£
->db;

1287 
Schema
 *
pSchema
 = 
db
->
aDb
[
iDb
].pSchema;

1288 
HashEÀm
 *
k
;

1289 
iSètCur
;

1290 
iMem
;

1291 
iTab
;

1293 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 0, 
iDb
);

1294 
iSètCur
 = 
pP¨£
->
nTab
;

1295 
pP¨£
->
nTab
 += 3;

1296 
	`›íSètTabÀ
(
pP¨£
, 
iDb
, 
iSètCur
, 0, 0);

1297 
iMem
 = 
pP¨£
->
nMem
+1;

1298 
iTab
 = 
pP¨£
->
nTab
;

1299 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

1300 
k
=
	`sqlôeHashFú°
(&
pSchema
->
tblHash
); k; k=
	`sqlôeHashNext
(k)){

1301 
TabÀ
 *
pTab
 = (TabÀ*)
	`sqlôeHashD©a
(
k
);

1302 
	`™ÆyzeO√TabÀ
(
pP¨£
, 
pTab
, 0, 
iSètCur
, 
iMem
, 
iTab
);

1304 
	`lﬂdA«lysis
(
pP¨£
, 
iDb
);

1305 
	}
}

1312 
	$™ÆyzeTabÀ
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTab
, 
Index
 *
pO∆yIdx
){

1313 
iDb
;

1314 
iSètCur
;

1316 
	`as£π
–
pTab
!=0 );

1317 
	`as£π
–
	`sqlôe3BåìHﬁdsAŒMuãxes
(
pP¨£
->
db
) );

1318 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTab
->
pSchema
);

1319 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 0, 
iDb
);

1320 
iSètCur
 = 
pP¨£
->
nTab
;

1321 
pP¨£
->
nTab
 += 3;

1322 if–
pO∆yIdx
 ){

1323 
	`›íSètTabÀ
(
pP¨£
, 
iDb
, 
iSètCur
, 
pO∆yIdx
->
zName
, "idx");

1325 
	`›íSètTabÀ
(
pP¨£
, 
iDb
, 
iSètCur
, 
pTab
->
zName
, "tbl");

1327 
	`™ÆyzeO√TabÀ
(
pP¨£
, 
pTab
, 
pO∆yIdx
, 
iSètCur
,pP¨£->
nMem
+1,pP¨£->
nTab
);

1328 
	`lﬂdA«lysis
(
pP¨£
, 
iDb
);

1329 
	}
}

1343 
	$sqlôe3A«lyze
(
P¨£
 *
pP¨£
, 
Tokí
 *
pName1
, Tokí *
pName2
){

1344 
sqlôe3
 *
db
 = 
pP¨£
->db;

1345 
iDb
;

1346 
i
;

1347 *
z
, *
zDb
;

1348 
TabÀ
 *
pTab
;

1349 
Index
 *
pIdx
;

1350 
Tokí
 *
pTabÀName
;

1351 
Vdbe
 *
v
;

1355 
	`as£π
–
	`sqlôe3BåìHﬁdsAŒMuãxes
(
pP¨£
->
db
) );

1356 if–
SQLITE_OK
!=
	`sqlôe3RódSchema
(
pP¨£
) ){

1360 
	`as£π
–
pName2
!=0 || 
pName1
==0 );

1361 if–
pName1
==0 ){

1363 
i
=0; i<
db
->
nDb
; i++){

1364 if–
i
==1 ) ;

1365 
	`™ÆyzeD©aba£
(
pP¨£
, 
i
);

1367 }if–
pName2
->
n
==0 ){

1369 
iDb
 = 
	`sqlôe3FödDb
(
db
, 
pName1
);

1370 if–
iDb
>=0 ){

1371 
	`™ÆyzeD©aba£
(
pP¨£
, 
iDb
);

1373 
z
 = 
	`sqlôe3NameFromTokí
(
db
, 
pName1
);

1374 if–
z
 ){

1375 if–(
pIdx
 = 
	`sqlôe3FödIndex
(
db
, 
z
, 0))!=0 ){

1376 
	`™ÆyzeTabÀ
(
pP¨£
, 
pIdx
->
pTabÀ
,ÖIdx);

1377 }if–(
pTab
 = 
	`sqlôe3LoˇãTabÀ
(
pP¨£
, 0, 
z
, 0))!=0 ){

1378 
	`™ÆyzeTabÀ
(
pP¨£
, 
pTab
, 0);

1380 
	`sqlôe3DbFªe
(
db
, 
z
);

1385 
iDb
 = 
	`sqlôe3TwoP¨tName
(
pP¨£
, 
pName1
, 
pName2
, &
pTabÀName
);

1386 if–
iDb
>=0 ){

1387 
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

1388 
z
 = 
	`sqlôe3NameFromTokí
(
db
, 
pTabÀName
);

1389 if–
z
 ){

1390 if–(
pIdx
 = 
	`sqlôe3FödIndex
(
db
, 
z
, 
zDb
))!=0 ){

1391 
	`™ÆyzeTabÀ
(
pP¨£
, 
pIdx
->
pTabÀ
,ÖIdx);

1392 }if–(
pTab
 = 
	`sqlôe3LoˇãTabÀ
(
pP¨£
, 0, 
z
, 
zDb
))!=0 ){

1393 
	`™ÆyzeTabÀ
(
pP¨£
, 
pTab
, 0);

1395 
	`sqlôe3DbFªe
(
db
, 
z
);

1399 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1400 if–
v
 ) 
	`sqlôe3VdbeAddOp0
(v, 
OP_Expúe
);

1401 
	}
}

1407 
™ÆysisInfo
 
	t™ÆysisInfo
;

1408 
	s™ÆysisInfo
 {

1409 
sqlôe3
 *
	mdb
;

1410 c⁄° *
	mzD©aba£
;

1418 
	$decodeI¡Aºay
(

1419 *
zI¡Aºay
,

1420 
nOut
,

1421 
tRow˙t
 *
aOut
,

1422 
LogE°
 *
aLog
,

1423 
Index
 *
pIndex


1425 *
z
 = 
zI¡Aºay
;

1426 
c
;

1427 
i
;

1428 
tRow˙t
 
v
;

1430 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


1431 if–
z
==0 ) z = "";

1433 
	`as£π
–
z
!=0 );

1435 
i
=0; *
z
 && i<
nOut
; i++){

1436 
v
 = 0;

1437  (
c
=
z
[0])>='0' && c<='9' ){

1438 
v
 = v*10 + 
c
 - '0';

1439 
z
++;

1441 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


1442 if–
aOut
 )áOut[
i
] = 
v
;

1443 if–
aLog
 )áLog[
i
] = 
	`sqlôe3LogE°
(
v
);

1445 
	`as£π
–
aOut
==0 );

1446 
	`UNUSED_PARAMETER
(
aOut
);

1447 
	`as£π
–
aLog
!=0 );

1448 
aLog
[
i
] = 
	`sqlôe3LogE°
(
v
);

1450 if–*
z
==' ' ) z++;

1452 #i‚de‡
SQLITE_ENABLE_STAT3_OR_STAT4


1453 
	`as£π
–
pIndex
!=0 ); {

1455 if–
pIndex
 ){

1457 
pIndex
->
bUn‹dîed
 = 0;

1458 
pIndex
->
noSkùSˇn
 = 0;

1459  
z
[0] ){

1460 if–
	`sqlôe3_°rglob
("un‹dîed*", 
z
)==0 ){

1461 
pIndex
->
bUn‹dîed
 = 1;

1462 }if–
	`sqlôe3_°rglob
("sz=[0-9]*", 
z
)==0 ){

1463 
pIndex
->
szIdxRow
 = 
	`sqlôe3LogE°
(
	`sqlôe3Atoi
(
z
+3));

1464 }if–
	`sqlôe3_°rglob
("noskùsˇn*", 
z
)==0 ){

1465 
pIndex
->
noSkùSˇn
 = 1;

1467 #ifde‡
SQLITE_ENABLE_COSTMULT


1468 if–
	`sqlôe3_°rglob
("co°mu…=[0-9]*",
z
)==0 ){

1469 
pIndex
->
pTabÀ
->
co°Mu…
 = 
	`sqlôe3LogE°
(
	`sqlôe3Atoi
(
z
+9));

1472  
z
[0]!=0 && z[0]!=' ' ) z++;

1473  
z
[0]==' ' ) z++;

1476 
	}
}

1489 
	$™ÆysisLﬂdî
(*
pD©a
, 
¨gc
, **
¨gv
, **
NŸU£d
){

1490 
™ÆysisInfo
 *
pInfo
 = (™ÆysisInfo*)
pD©a
;

1491 
Index
 *
pIndex
;

1492 
TabÀ
 *
pTabÀ
;

1493 c⁄° *
z
;

1495 
	`as£π
–
¨gc
==3 );

1496 
	`UNUSED_PARAMETER2
(
NŸU£d
, 
¨gc
);

1498 if–
¨gv
==0 ||árgv[0]==0 ||árgv[2]==0 ){

1501 
pTabÀ
 = 
	`sqlôe3FödTabÀ
(
pInfo
->
db
, 
¨gv
[0],ÖInfo->
zD©aba£
);

1502 if–
pTabÀ
==0 ){

1505 if–
¨gv
[1]==0 ){

1506 
pIndex
 = 0;

1507 }if–
	`sqlôe3_°ricmp
(
¨gv
[0],argv[1])==0 ){

1508 
pIndex
 = 
	`sqlôe3Prim¨yKeyIndex
(
pTabÀ
);

1510 
pIndex
 = 
	`sqlôe3FödIndex
(
pInfo
->
db
, 
¨gv
[1],ÖInfo->
zD©aba£
);

1512 
z
 = 
¨gv
[2];

1514 if–
pIndex
 ){

1515 
tRow˙t
 *
aiRowE°
 = 0;

1516 
nCﬁ
 = 
pIndex
->
nKeyCﬁ
+1;

1517 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


1521 if–
pIndex
->
aiRowE°
==0 ){

1522 
pIndex
->
aiRowE°
 = (
tRow˙t
*)
	`sqlôe3MÆlocZîo
(—Row˙tË* 
nCﬁ
);

1523 if–
pIndex
->
aiRowE°
==0 ) 
	`sqlôe3OomFau…
(
pInfo
->
db
);

1525 
aiRowE°
 = 
pIndex
->aiRowEst;

1527 
pIndex
->
bUn‹dîed
 = 0;

1528 
	`decodeI¡Aºay
((*)
z
, 
nCﬁ
, 
aiRowE°
, 
pIndex
->
aiRowLogE°
,ÖIndex);

1529 if–
pIndex
->
pP¨tIdxWhîe
==0 ) 
pTabÀ
->
nRowLogE°
 =ÖIndex->
aiRowLogE°
[0];

1531 
Index
 
ÁkeIdx
;

1532 
ÁkeIdx
.
szIdxRow
 = 
pTabÀ
->
szTabRow
;

1533 #ifde‡
SQLITE_ENABLE_COSTMULT


1534 
ÁkeIdx
.
pTabÀ
 =ÖTable;

1536 
	`decodeI¡Aºay
((*)
z
, 1, 0, &
pTabÀ
->
nRowLogE°
, &
ÁkeIdx
);

1537 
pTabÀ
->
szTabRow
 = 
ÁkeIdx
.
szIdxRow
;

1541 
	}
}

1547 
	$sqlôe3DñëeIndexSam∂es
(
sqlôe3
 *
db
, 
Index
 *
pIdx
){

1548 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


1549 if–
pIdx
->
aSam∂e
 ){

1550 
j
;

1551 
j
=0; j<
pIdx
->
nSam∂e
; j++){

1552 
IndexSam∂e
 *
p
 = &
pIdx
->
aSam∂e
[
j
];

1553 
	`sqlôe3DbFªe
(
db
, 
p
->p);

1555 
	`sqlôe3DbFªe
(
db
, 
pIdx
->
aSam∂e
);

1557 if–
db
 && db->
≤ByãsFªed
==0 ){

1558 
pIdx
->
nSam∂e
 = 0;

1559 
pIdx
->
aSam∂e
 = 0;

1562 
	`UNUSED_PARAMETER
(
db
);

1563 
	`UNUSED_PARAMETER
(
pIdx
);

1565 
	}
}

1567 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


1572 
	$öôAvgEq
(
Index
 *
pIdx
){

1573 if–
pIdx
 ){

1574 
IndexSam∂e
 *
aSam∂e
 = 
pIdx
->aSample;

1575 
IndexSam∂e
 *
pFöÆ
 = &
aSam∂e
[
pIdx
->
nSam∂e
-1];

1576 
iCﬁ
;

1577 
nCﬁ
 = 1;

1578 if–
pIdx
->
nSam∂eCﬁ
>1 ){

1583 
nCﬁ
 = 
pIdx
->
nSam∂eCﬁ
-1;

1584 
pIdx
->
aAvgEq
[
nCﬁ
] = 1;

1586 
iCﬁ
=0; iCﬁ<
nCﬁ
; iCol++){

1587 
nSam∂e
 = 
pIdx
->nSample;

1588 
i
;

1589 
tRow˙t
 
sumEq
 = 0;

1590 
tRow˙t
 
avgEq
 = 0;

1591 
tRow˙t
 
nRow
;

1592 
i64
 
nSum100
 = 0;

1593 
i64
 
nDi°100
;

1595 if–!
pIdx
->
aiRowE°
 || 
iCﬁ
>ıIdx->
nKeyCﬁ
 ||ÖIdx->aiRowEst[iCol+1]==0 ){

1596 
nRow
 = 
pFöÆ
->
™Lt
[
iCﬁ
];

1597 
nDi°100
 = (
i64
)100 * 
pFöÆ
->
™DLt
[
iCﬁ
];

1598 
nSam∂e
--;

1600 
nRow
 = 
pIdx
->
aiRowE°
[0];

1601 
nDi°100
 = ((
i64
)100 * 
pIdx
->
aiRowE°
[0]Ë/ÖIdx->aiRowE°[
iCﬁ
+1];

1603 
pIdx
->
nRowE°0
 = 
nRow
;

1609 
i
=0; i<
nSam∂e
; i++){

1610 if–
i
==(
pIdx
->
nSam∂e
-1)

1611 || 
aSam∂e
[
i
].
™DLt
[
iCﬁ
]!=aSample[i+1].anDLt[iCol]

1613 
sumEq
 +
aSam∂e
[
i
].
™Eq
[
iCﬁ
];

1614 
nSum100
 += 100;

1618 if–
nDi°100
>
nSum100
 ){

1619 
avgEq
 = ((
i64
)100 * (
nRow
 - 
sumEq
))/(
nDi°100
 - 
nSum100
);

1621 if–
avgEq
==0 )ávgEq = 1;

1622 
pIdx
->
aAvgEq
[
iCﬁ
] = 
avgEq
;

1625 
	}
}

1631 
Index
 *
	$födIndexOrPrim¨yKey
(

1632 
sqlôe3
 *
db
,

1633 c⁄° *
zName
,

1634 c⁄° *
zDb


1636 
Index
 *
pIdx
 = 
	`sqlôe3FödIndex
(
db
, 
zName
, 
zDb
);

1637 if–
pIdx
==0 ){

1638 
TabÀ
 *
pTab
 = 
	`sqlôe3FödTabÀ
(
db
, 
zName
, 
zDb
);

1639 if–
pTab
 && !
	`HasRowid
’TabËË
pIdx
 = 
	`sqlôe3Prim¨yKeyIndex
(pTab);

1641  
pIdx
;

1642 
	}
}

1657 
	$lﬂdSètTbl
(

1658 
sqlôe3
 *
db
,

1659 
bSèt3
,

1660 c⁄° *
zSql1
,

1661 c⁄° *
zSql2
,

1662 c⁄° *
zDb


1664 
rc
;

1665 
sqlôe3_°mt
 *
pStmt
 = 0;

1666 *
zSql
;

1667 
Index
 *
pPªvIdx
 = 0;

1668 
IndexSam∂e
 *
pSam∂e
;

1670 
	`as£π
–
db
->
lookaside
.
bDißbÀ
 );

1671 
zSql
 = 
	`sqlôe3MPrötf
(
db
, 
zSql1
, 
zDb
);

1672 if–!
zSql
 ){

1673  
SQLITE_NOMEM_BKPT
;

1675 
rc
 = 
	`sqlôe3_¥ï¨e
(
db
, 
zSql
, -1, &
pStmt
, 0);

1676 
	`sqlôe3DbFªe
(
db
, 
zSql
);

1677 if–
rc
 ) Ñc;

1679  
	`sqlôe3_°ï
(
pStmt
)==
SQLITE_ROW
 ){

1680 
nIdxCﬁ
 = 1;

1682 *
zIndex
;

1683 
Index
 *
pIdx
;

1684 
nSam∂e
;

1685 
nByã
;

1686 
i
;

1687 
tRow˙t
 *
pS∑˚
;

1689 
zIndex
 = (*)
	`sqlôe3_cﬁumn_ãxt
(
pStmt
, 0);

1690 if–
zIndex
==0 ) ;

1691 
nSam∂e
 = 
	`sqlôe3_cﬁumn_öt
(
pStmt
, 1);

1692 
pIdx
 = 
	`födIndexOrPrim¨yKey
(
db
, 
zIndex
, 
zDb
);

1693 
	`as£π
–
pIdx
==0 || 
bSèt3
 ||ÖIdx->
nSam∂e
==0 );

1696 if–
pIdx
==0 ||ÖIdx->
nSam∂e
 ) ;

1697 if–
bSèt3
==0 ){

1698 
	`as£π
–!
	`HasRowid
(
pIdx
->
pTabÀ
Ë||ÖIdx->
nCﬁumn
=ıIdx->
nKeyCﬁ
+1 );

1699 if–!
	`HasRowid
(
pIdx
->
pTabÀ
Ë&& 
	`IsPrim¨yKeyIndex
(pIdx) ){

1700 
nIdxCﬁ
 = 
pIdx
->
nKeyCﬁ
;

1702 
nIdxCﬁ
 = 
pIdx
->
nCﬁumn
;

1705 
pIdx
->
nSam∂eCﬁ
 = 
nIdxCﬁ
;

1706 
nByã
 = (
IndexSam∂e
Ë* 
nSam∂e
;

1707 
nByã
 +(
tRow˙t
Ë* 
nIdxCﬁ
 * 3 * 
nSam∂e
;

1708 
nByã
 +
nIdxCﬁ
 * (
tRow˙t
);

1710 
pIdx
->
aSam∂e
 = 
	`sqlôe3DbMÆlocZîo
(
db
, 
nByã
);

1711 if–
pIdx
->
aSam∂e
==0 ){

1712 
	`sqlôe3_föÆize
(
pStmt
);

1713  
SQLITE_NOMEM_BKPT
;

1715 
pS∑˚
 = (
tRow˙t
*)&
pIdx
->
aSam∂e
[
nSam∂e
];

1716 
pIdx
->
aAvgEq
 = 
pS∑˚
;ÖS∑˚ +
nIdxCﬁ
;

1717 
i
=0; i<
nSam∂e
; i++){

1718 
pIdx
->
aSam∂e
[
i
].
™Eq
 = 
pS∑˚
;ÖS∑˚ +
nIdxCﬁ
;

1719 
pIdx
->
aSam∂e
[
i
].
™Lt
 = 
pS∑˚
;ÖS∑˚ +
nIdxCﬁ
;

1720 
pIdx
->
aSam∂e
[
i
].
™DLt
 = 
pS∑˚
;ÖS∑˚ +
nIdxCﬁ
;

1722 
	`as£π
–((
u8
*)
pS∑˚
)-
nByã
==(u8*)(
pIdx
->
aSam∂e
) );

1724 
rc
 = 
	`sqlôe3_föÆize
(
pStmt
);

1725 if–
rc
 ) Ñc;

1727 
zSql
 = 
	`sqlôe3MPrötf
(
db
, 
zSql2
, 
zDb
);

1728 if–!
zSql
 ){

1729  
SQLITE_NOMEM_BKPT
;

1731 
rc
 = 
	`sqlôe3_¥ï¨e
(
db
, 
zSql
, -1, &
pStmt
, 0);

1732 
	`sqlôe3DbFªe
(
db
, 
zSql
);

1733 if–
rc
 ) Ñc;

1735  
	`sqlôe3_°ï
(
pStmt
)==
SQLITE_ROW
 ){

1736 *
zIndex
;

1737 
Index
 *
pIdx
;

1738 
nCﬁ
 = 1;

1740 
zIndex
 = (*)
	`sqlôe3_cﬁumn_ãxt
(
pStmt
, 0);

1741 if–
zIndex
==0 ) ;

1742 
pIdx
 = 
	`födIndexOrPrim¨yKey
(
db
, 
zIndex
, 
zDb
);

1743 if–
pIdx
==0 ) ;

1746 
nCﬁ
 = 
pIdx
->
nSam∂eCﬁ
;

1747 if–
bSèt3
 && 
nCﬁ
>1 ) ;

1748 if–
pIdx
!=
pPªvIdx
 ){

1749 
	`öôAvgEq
(
pPªvIdx
);

1750 
pPªvIdx
 = 
pIdx
;

1752 
pSam∂e
 = &
pIdx
->
aSam∂e
[pIdx->
nSam∂e
];

1753 
	`decodeI¡Aºay
((*)
	`sqlôe3_cﬁumn_ãxt
(
pStmt
,1),
nCﬁ
,
pSam∂e
->
™Eq
,0,0);

1754 
	`decodeI¡Aºay
((*)
	`sqlôe3_cﬁumn_ãxt
(
pStmt
,2),
nCﬁ
,
pSam∂e
->
™Lt
,0,0);

1755 
	`decodeI¡Aºay
((*)
	`sqlôe3_cﬁumn_ãxt
(
pStmt
,3),
nCﬁ
,
pSam∂e
->
™DLt
,0,0);

1763 
pSam∂e
->
n
 = 
	`sqlôe3_cﬁumn_byãs
(
pStmt
, 4);

1764 
pSam∂e
->
p
 = 
	`sqlôe3DbMÆlocZîo
(
db
,ÖSam∂e->
n
 + 2);

1765 if–
pSam∂e
->
p
==0 ){

1766 
	`sqlôe3_föÆize
(
pStmt
);

1767  
SQLITE_NOMEM_BKPT
;

1769 
	`mem˝y
(
pSam∂e
->
p
, 
	`sqlôe3_cﬁumn_blob
(
pStmt
, 4),ÖSam∂e->
n
);

1770 
pIdx
->
nSam∂e
++;

1772 
rc
 = 
	`sqlôe3_föÆize
(
pStmt
);

1773 if–
rc
==
SQLITE_OK
 ) 
	`öôAvgEq
(
pPªvIdx
);

1774  
rc
;

1775 
	}
}

1781 
	$lﬂdSèt4
(
sqlôe3
 *
db
, c⁄° *
zDb
){

1782 
rc
 = 
SQLITE_OK
;

1784 
	`as£π
–
db
->
lookaside
.
bDißbÀ
 );

1785 if–
	`sqlôe3FödTabÀ
(
db
, "sqlôe_°©4", 
zDb
) ){

1786 
rc
 = 
	`lﬂdSètTbl
(
db
, 0,

1789 
zDb


1793 if–
rc
==
SQLITE_OK
 && 
	`sqlôe3FödTabÀ
(
db
, "sqlôe_°©3", 
zDb
) ){

1794 
rc
 = 
	`lﬂdSètTbl
(
db
, 1,

1797 
zDb


1801  
rc
;

1802 
	}
}

1825 
	$sqlôe3A«lysisLﬂd
(
sqlôe3
 *
db
, 
iDb
){

1826 
™ÆysisInfo
 
sInfo
;

1827 
HashEÀm
 *
i
;

1828 *
zSql
;

1829 
rc
 = 
SQLITE_OK
;

1831 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

1832 
	`as£π
–
db
->
aDb
[
iDb
].
pBt
!=0 );

1835 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

1836 
i
=
	`sqlôeHashFú°
(&
db
->
aDb
[
iDb
].
pSchema
->
idxHash
);i;i=
	`sqlôeHashNext
(i)){

1837 
Index
 *
pIdx
 = 
	`sqlôeHashD©a
(
i
);

1838 
pIdx
->
aiRowLogE°
[0] = 0;

1839 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


1840 
	`sqlôe3DñëeIndexSam∂es
(
db
, 
pIdx
);

1841 
pIdx
->
aSam∂e
 = 0;

1846 
sInfo
.
db
 = db;

1847 
sInfo
.
zD©aba£
 = 
db
->
aDb
[
iDb
].
zName
;

1848 if–
	`sqlôe3FödTabÀ
(
db
, "sqlôe_°©1", 
sInfo
.
zD©aba£
)!=0 ){

1849 
zSql
 = 
	`sqlôe3MPrötf
(
db
,

1850 "SELECTÅbl,idx,°© FROM %Q.sqlôe_°©1", 
sInfo
.
zD©aba£
);

1851 if–
zSql
==0 ){

1852 
rc
 = 
SQLITE_NOMEM_BKPT
;

1854 
rc
 = 
	`sqlôe3_exec
(
db
, 
zSql
, 
™ÆysisLﬂdî
, &
sInfo
, 0);

1855 
	`sqlôe3DbFªe
(
db
, 
zSql
);

1860 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

1861 
i
=
	`sqlôeHashFú°
(&
db
->
aDb
[
iDb
].
pSchema
->
idxHash
);i;i=
	`sqlôeHashNext
(i)){

1862 
Index
 *
pIdx
 = 
	`sqlôeHashD©a
(
i
);

1863 if–
pIdx
->
aiRowLogE°
[0]==0 ) 
	`sqlôe3DeÁu…RowE°
(pIdx);

1867 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


1868 if–
rc
==
SQLITE_OK
 && 
	`O±imiz©i⁄E«bÀd
(
db
, 
SQLITE_Sèt34
) ){

1869 
db
->
lookaside
.
bDißbÀ
++;

1870 
rc
 = 
	`lﬂdSèt4
(
db
, 
sInfo
.
zD©aba£
);

1871 
db
->
lookaside
.
bDißbÀ
--;

1873 
i
=
	`sqlôeHashFú°
(&
db
->
aDb
[
iDb
].
pSchema
->
idxHash
);i;i=
	`sqlôeHashNext
(i)){

1874 
Index
 *
pIdx
 = 
	`sqlôeHashD©a
(
i
);

1875 
	`sqlôe3_‰ì
(
pIdx
->
aiRowE°
);

1876 
pIdx
->
aiRowE°
 = 0;

1880 if–
rc
==
SQLITE_NOMEM
 ){

1881 
	`sqlôe3OomFau…
(
db
);

1883  
rc
;

1884 
	}
}

	@attach.c

14 
	~"sqlôeI¡.h
"

16 #i‚de‡
SQLITE_OMIT_ATTACH


35 
	$ªsﬁveAâachEx¥
(
NameC⁄ãxt
 *
pName
, 
Ex¥
 *
pEx¥
)

37 
rc
 = 
SQLITE_OK
;

38 if–
pEx¥
 ){

39 if–
pEx¥
->
›
!=
TK_ID
 ){

40 
rc
 = 
	`sqlôe3ResﬁveEx¥Names
(
pName
, 
pEx¥
);

42 
pEx¥
->
›
 = 
TK_STRING
;

45  
rc
;

46 
	}
}

59 
	$©èchFunc
(

60 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

61 
NŸU£d
,

62 
sqlôe3_vÆue
 **
¨gv


64 
i
;

65 
rc
 = 0;

66 
sqlôe3
 *
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
);

67 c⁄° *
zName
;

68 c⁄° *
zFûe
;

69 *
zP©h
 = 0;

70 *
zEº
 = 0;

71 
Êags
;

72 
Db
 *
aNew
;

73 *
zEºDyn
 = 0;

74 
sqlôe3_vfs
 *
pVfs
;

76 
	`UNUSED_PARAMETER
(
NŸU£d
);

78 
zFûe
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

79 
zName
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[1]);

80 if–
zFûe
==0 ) zFile = "";

81 if–
zName
==0 ) zName = "";

89 if–
db
->
nDb
>=db->
aLimô
[
SQLITE_LIMIT_ATTACHED
]+2 ){

90 
zEºDyn
 = 
	`sqlôe3MPrötf
(
db
, "too manyáttached databases - max %d",

91 
db
->
aLimô
[
SQLITE_LIMIT_ATTACHED
]

93 
©èch_îr‹
;

95 if–!
db
->
autoCommô
 ){

96 
zEºDyn
 = 
	`sqlôe3MPrötf
(
db
, "cannot ATTACH database withinÅransaction");

97 
©èch_îr‹
;

99 
i
=0; i<
db
->
nDb
; i++){

100 *
z
 = 
db
->
aDb
[
i
].
zName
;

101 
	`as£π
–
z
 && 
zName
 );

102 if–
	`sqlôe3SåICmp
(
z
, 
zName
)==0 ){

103 
zEºDyn
 = 
	`sqlôe3MPrötf
(
db
, "d©aba£ %†i†Æªady i¿u£", 
zName
);

104 
©èch_îr‹
;

111 if–
db
->
aDb
==db->
aDbSètic
 ){

112 
aNew
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, (db->
aDb
[0])*3 );

113 if–
aNew
==0 ) ;

114 
	`mem˝y
(
aNew
, 
db
->
aDb
, (db->aDb[0])*2);

116 
aNew
 = 
	`sqlôe3DbRóŒoc
(
db
, db->
aDb
, (db->aDb[0])*(db->
nDb
+1) );

117 if–
aNew
==0 ) ;

119 
db
->
aDb
 = 
aNew
;

120 
aNew
 = &
db
->
aDb
[db->
nDb
];

121 
	`mem£t
(
aNew
, 0, (*aNew));

127 
Êags
 = 
db
->
›íFœgs
;

128 
rc
 = 
	`sqlôe3P¨£Uri
(
db
->
pVfs
->
zName
, 
zFûe
, &
Êags
, &pVfs, &
zP©h
, &
zEº
);

129 if–
rc
!=
SQLITE_OK
 ){

130 if–
rc
==
SQLITE_NOMEM
 ) 
	`sqlôe3OomFau…
(
db
);

131 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, 
zEº
, -1);

132 
	`sqlôe3_‰ì
(
zEº
);

135 
	`as£π
–
pVfs
 );

136 
Êags
 |
SQLITE_OPEN_MAIN_DB
;

137 
rc
 = 
	`sqlôe3BåìO≥n
(
pVfs
, 
zP©h
, 
db
, &
aNew
->
pBt
, 0, 
Êags
);

138 
	`sqlôe3_‰ì
–
zP©h
 );

139 
db
->
nDb
++;

140 if–
rc
==
SQLITE_CONSTRAINT
 ){

141 
rc
 = 
SQLITE_ERROR
;

142 
zEºDyn
 = 
	`sqlôe3MPrötf
(
db
, "database isálreadyáttached");

143 }if–
rc
==
SQLITE_OK
 ){

144 
Pagî
 *
pPagî
;

145 
aNew
->
pSchema
 = 
	`sqlôe3SchemaGë
(
db
,áNew->
pBt
);

146 if–!
aNew
->
pSchema
 ){

147 
rc
 = 
SQLITE_NOMEM_BKPT
;

148 }if–
aNew
->
pSchema
->
fûe_f‹m©
 &&áNew->pSchema->
íc
!=
	`ENC
(
db
) ){

149 
zEºDyn
 = 
	`sqlôe3MPrötf
(
db
,

151 
rc
 = 
SQLITE_ERROR
;

153 
	`sqlôe3BåìE¡î
(
aNew
->
pBt
);

154 
pPagî
 = 
	`sqlôe3BåìPagî
(
aNew
->
pBt
);

155 
	`sqlôe3PagîLockögMode
(
pPagî
, 
db
->
dÊtLockMode
);

156 
	`sqlôe3BåìSecuªDñëe
(
aNew
->
pBt
,

157 
	`sqlôe3BåìSecuªDñëe
(
db
->
aDb
[0].
pBt
,-1) );

158 #i‚de‡
SQLITE_OMIT_PAGER_PRAGMAS


159 
	`sqlôe3BåìSëPagîFœgs
(
aNew
->
pBt
,

160 
PAGER_SYNCHRONOUS_FULL
 | (
db
->
Êags
 & 
PAGER_FLAGS_MASK
));

162 
	`sqlôe3BåìLóve
(
aNew
->
pBt
);

164 
aNew
->
ß„ty_Àvñ
 = 
SQLITE_DEFAULT_SYNCHRONOUS
+1;

165 
aNew
->
zName
 = 
	`sqlôe3DbSåDup
(
db
, zName);

166 if–
rc
==
SQLITE_OK
 && 
aNew
->
zName
==0 ){

167 
rc
 = 
SQLITE_NOMEM_BKPT
;

171 #ifde‡
SQLITE_HAS_CODEC


172 if–
rc
==
SQLITE_OK
 ){

173 
	`sqlôe3CodecAâach
(
sqlôe3
*, , const *, );

174 
	`sqlôe3CodecGëKey
(
sqlôe3
*, , **, *);

175 
nKey
;

176 *
zKey
;

177 
t
 = 
	`sqlôe3_vÆue_ty≥
(
¨gv
[2]);

178  
t
 ){

179 
SQLITE_INTEGER
:

180 
SQLITE_FLOAT
:

181 
zEºDyn
 = 
	`sqlôe3DbSåDup
(
db
, "Invalid key value");

182 
rc
 = 
SQLITE_ERROR
;

185 
SQLITE_TEXT
:

186 
SQLITE_BLOB
:

187 
nKey
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[2]);

188 
zKey
 = (*)
	`sqlôe3_vÆue_blob
(
¨gv
[2]);

189 
rc
 = 
	`sqlôe3CodecAâach
(
db
, db->
nDb
-1, 
zKey
, 
nKey
);

192 
SQLITE_NULL
:

194 
	`sqlôe3CodecGëKey
(
db
, 0, (**)&
zKey
, &
nKey
);

195 if–
nKey
>0 || 
	`sqlôe3BåìGëO±imÆRe£rve
(
db
->
aDb
[0].
pBt
)>0 ){

196 
rc
 = 
	`sqlôe3CodecAâach
(
db
, db->
nDb
-1, 
zKey
, 
nKey
);

208 if–
rc
==
SQLITE_OK
 ){

209 
	`sqlôe3BåìE¡îAŒ
(
db
);

210 
rc
 = 
	`sqlôe3Inô
(
db
, &
zEºDyn
);

211 
	`sqlôe3BåìLóveAŒ
(
db
);

213 #ifde‡
SQLITE_USER_AUTHENTICATION


214 if–
rc
==
SQLITE_OK
 ){

215 
u8
 
√wAuth
 = 0;

216 
rc
 = 
	`sqlôe3U£rAuthCheckLogö
(
db
, 
zName
, &
√wAuth
);

217 if–
√wAuth
<
db
->
auth
.
authLevñ
 ){

218 
rc
 = 
SQLITE_AUTH_USER
;

222 if–
rc
 ){

223 
iDb
 = 
db
->
nDb
 - 1;

224 
	`as£π
–
iDb
>=2 );

225 if–
db
->
aDb
[
iDb
].
pBt
 ){

226 
	`sqlôe3BåìClo£
(
db
->
aDb
[
iDb
].
pBt
);

227 
db
->
aDb
[
iDb
].
pBt
 = 0;

228 
db
->
aDb
[
iDb
].
pSchema
 = 0;

230 
	`sqlôe3Re£tAŒSchemasOfC⁄√˘i⁄
(
db
);

231 
db
->
nDb
 = 
iDb
;

232 if–
rc
==
SQLITE_NOMEM
 ||Ñc==
SQLITE_IOERR_NOMEM
 ){

233 
	`sqlôe3OomFau…
(
db
);

234 
	`sqlôe3DbFªe
(
db
, 
zEºDyn
);

235 
zEºDyn
 = 
	`sqlôe3MPrötf
(
db
, "out of memory");

236 }if–
zEºDyn
==0 ){

237 
zEºDyn
 = 
	`sqlôe3MPrötf
(
db
, "u«bÀÅÿ›í d©aba£: %s", 
zFûe
);

239 
©èch_îr‹
;

244 
©èch_îr‹
:

246 if–
zEºDyn
 ){

247 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, 
zEºDyn
, -1);

248 
	`sqlôe3DbFªe
(
db
, 
zEºDyn
);

250 if–
rc
 ) 
	`sqlôe3_ªsu…_îr‹_code
(
c⁄ãxt
,Ñc);

251 
	}
}

261 
	$dëachFunc
(

262 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

263 
NŸU£d
,

264 
sqlôe3_vÆue
 **
¨gv


266 c⁄° *
zName
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

267 
sqlôe3
 *
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
);

268 
i
;

269 
Db
 *
pDb
 = 0;

270 
zEº
[128];

272 
	`UNUSED_PARAMETER
(
NŸU£d
);

274 if–
zName
==0 ) zName = "";

275 
i
=0; i<
db
->
nDb
; i++){

276 
pDb
 = &
db
->
aDb
[
i
];

277 if–
pDb
->
pBt
==0 ) ;

278 if–
	`sqlôe3SåICmp
(
pDb
->
zName
, zName)==0 ) ;

281 if–
i
>=
db
->
nDb
 ){

282 
	`sqlôe3_¢¥ötf
((
zEº
),zEº, "nÿsuch d©aba£: %s", 
zName
);

283 
dëach_îr‹
;

285 if–
i
<2 ){

286 
	`sqlôe3_¢¥ötf
((
zEº
),zEº, "ˇ¬Ÿ dëach d©aba£ %s", 
zName
);

287 
dëach_îr‹
;

289 if–!
db
->
autoCommô
 ){

290 
	`sqlôe3_¢¥ötf
((
zEº
), zErr,

292 
dëach_îr‹
;

294 if–
	`sqlôe3BåìIsInRódTøns
(
pDb
->
pBt
Ë|| 
	`sqlôe3BåìIsInBackup
(pDb->pBt) ){

295 
	`sqlôe3_¢¥ötf
((
zEº
),zEº, "d©aba£ %†i†locked", 
zName
);

296 
dëach_îr‹
;

299 
	`sqlôe3BåìClo£
(
pDb
->
pBt
);

300 
pDb
->
pBt
 = 0;

301 
pDb
->
pSchema
 = 0;

302 
	`sqlôe3Cﬁœp£D©aba£Aºay
(
db
);

305 
dëach_îr‹
:

306 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, 
zEº
, -1);

307 
	}
}

313 
	$codeAâach
(

314 
P¨£
 *
pP¨£
,

315 
ty≥
,

316 
FuncDef
 c⁄° *
pFunc
,

317 
Ex¥
 *
pAuthArg
,

318 
Ex¥
 *
pFûíame
,

319 
Ex¥
 *
pDb«me
,

320 
Ex¥
 *
pKey


322 
rc
;

323 
NameC⁄ãxt
 
sName
;

324 
Vdbe
 *
v
;

325 
sqlôe3
* 
db
 = 
pP¨£
->db;

326 
ªgArgs
;

328 
	`mem£t
(&
sName
, 0, (
NameC⁄ãxt
));

329 
sName
.
pP¨£
 =ÖParse;

332 
SQLITE_OK
!=(
rc
 = 
	`ªsﬁveAâachEx¥
(&
sName
, 
pFûíame
)) ||

333 
SQLITE_OK
!=(
rc
 = 
	`ªsﬁveAâachEx¥
(&
sName
, 
pDb«me
)) ||

334 
SQLITE_OK
!=(
rc
 = 
	`ªsﬁveAâachEx¥
(&
sName
, 
pKey
))

336 
©èch_íd
;

339 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


340 if–
pAuthArg
 ){

341 *
zAuthArg
;

342 if–
pAuthArg
->
›
==
TK_STRING
 ){

343 
zAuthArg
 = 
pAuthArg
->
u
.
zTokí
;

345 
zAuthArg
 = 0;

347 
rc
 = 
	`sqlôe3AuthCheck
(
pP¨£
, 
ty≥
, 
zAuthArg
, 0, 0);

348 if(
rc
!=
SQLITE_OK
 ){

349 
©èch_íd
;

355 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

356 
ªgArgs
 = 
	`sqlôe3GëTempR™ge
(
pP¨£
, 4);

357 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pFûíame
, 
ªgArgs
);

358 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pDb«me
, 
ªgArgs
+1);

359 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pKey
, 
ªgArgs
+2);

361 
	`as£π
–
v
 || 
db
->
mÆlocFaûed
 );

362 if–
v
 ){

363 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Fun˘i⁄0
, 0, 
ªgArgs
+3-
pFunc
->
nArg
,ÑegArgs+3,

364 (*)
pFunc
, 
P4_FUNCDEF
);

365 
	`as£π
–
pFunc
->
nArg
==-1 || (pFunc->nArg&0xff)==pFunc->nArg );

366 
	`sqlôe3VdbeCh™geP5
(
v
, (
u8
)(
pFunc
->
nArg
));

372 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Expúe
, (
ty≥
==
SQLITE_ATTACH
));

375 
©èch_íd
:

376 
	`sqlôe3Ex¥Dñëe
(
db
, 
pFûíame
);

377 
	`sqlôe3Ex¥Dñëe
(
db
, 
pDb«me
);

378 
	`sqlôe3Ex¥Dñëe
(
db
, 
pKey
);

379 
	}
}

386 
	$sqlôe3Dëach
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pDb«me
){

387 c⁄° 
FuncDef
 
dëach_func
 = {

389 
SQLITE_UTF8
,

392 
dëachFunc
,

397 
	`codeAâach
(
pP¨£
, 
SQLITE_DETACH
, &
dëach_func
, 
pDb«me
, 0, 0,ÖDbname);

398 
	}
}

405 
	$sqlôe3Aâach
(
P¨£
 *
pP¨£
, 
Ex¥
 *
p
, Ex¥ *
pDb«me
, Ex¥ *
pKey
){

406 c⁄° 
FuncDef
 
©èch_func
 = {

408 
SQLITE_UTF8
,

411 
©èchFunc
,

416 
	`codeAâach
(
pP¨£
, 
SQLITE_ATTACH
, &
©èch_func
, 
p
,Ö, 
pDb«me
, 
pKey
);

417 
	}
}

424 
	$sqlôe3FixInô
(

425 
DbFixî
 *
pFix
,

426 
P¨£
 *
pP¨£
,

427 
iDb
,

428 c⁄° *
zTy≥
,

429 c⁄° 
Tokí
 *
pName


431 
sqlôe3
 *
db
;

433 
db
 = 
pP¨£
->db;

434 
	`as£π
–
db
->
nDb
>
iDb
 );

435 
pFix
->
pP¨£
 =ÖParse;

436 
pFix
->
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

437 
pFix
->
pSchema
 = 
db
->
aDb
[
iDb
].pSchema;

438 
pFix
->
zTy≥
 = zType;

439 
pFix
->
pName
 =ÖName;

440 
pFix
->
bV¨O∆y
 = (
iDb
==1);

441 
	}
}

457 
	$sqlôe3FixSrcLi°
(

458 
DbFixî
 *
pFix
,

459 
SrcLi°
 *
pLi°


461 
i
;

462 c⁄° *
zDb
;

463 
SrcLi°_ôem
 *
pIãm
;

465 if–
	`NEVER
(
pLi°
==0) )  0;

466 
zDb
 = 
pFix
->zDb;

467 
i
=0, 
pIãm
=
pLi°
->
a
; i<pLi°->
nSrc
; i++,ÖItem++){

468 if–
pFix
->
bV¨O∆y
==0 ){

469 if–
pIãm
->
zD©aba£
 && 
	`sqlôe3SåICmp
’Iãm->zD©aba£, 
zDb
) ){

470 
	`sqlôe3Eº‹Msg
(
pFix
->
pP¨£
,

472 
pFix
->
zTy≥
,ÖFix->
pName
, 
pIãm
->
zD©aba£
);

475 
	`sqlôe3DbFªe
(
pFix
->
pP¨£
->
db
, 
pIãm
->
zD©aba£
);

476 
pIãm
->
zD©aba£
 = 0;

477 
pIãm
->
pSchema
 = 
pFix
->pSchema;

479 #i‡!
	`deföed
(
SQLITE_OMIT_VIEW
Ë|| !deföed(
SQLITE_OMIT_TRIGGER
)

480 if–
	`sqlôe3FixSñe˘
(
pFix
, 
pIãm
->
pSñe˘
) )  1;

481 if–
	`sqlôe3FixEx¥
(
pFix
, 
pIãm
->
pOn
) )  1;

485 
	}
}

486 #i‡!
deföed
(
SQLITE_OMIT_VIEW
Ë|| !deföed(
SQLITE_OMIT_TRIGGER
)

487 
	$sqlôe3FixSñe˘
(

488 
DbFixî
 *
pFix
,

489 
Sñe˘
 *
pSñe˘


491  
pSñe˘
 ){

492 if–
	`sqlôe3FixEx¥Li°
(
pFix
, 
pSñe˘
->
pELi°
) ){

495 if–
	`sqlôe3FixSrcLi°
(
pFix
, 
pSñe˘
->
pSrc
) ){

498 if–
	`sqlôe3FixEx¥
(
pFix
, 
pSñe˘
->
pWhîe
) ){

501 if–
	`sqlôe3FixEx¥Li°
(
pFix
, 
pSñe˘
->
pGroupBy
) ){

504 if–
	`sqlôe3FixEx¥
(
pFix
, 
pSñe˘
->
pHavög
) ){

507 if–
	`sqlôe3FixEx¥Li°
(
pFix
, 
pSñe˘
->
pOrdîBy
) ){

510 if–
	`sqlôe3FixEx¥
(
pFix
, 
pSñe˘
->
pLimô
) ){

513 if–
	`sqlôe3FixEx¥
(
pFix
, 
pSñe˘
->
pOff£t
) ){

516 
pSñe˘
 =ÖSñe˘->
pPri‹
;

519 
	}
}

520 
	$sqlôe3FixEx¥
(

521 
DbFixî
 *
pFix
,

522 
Ex¥
 *
pEx¥


524  
pEx¥
 ){

525 if–
pEx¥
->
›
==
TK_VARIABLE
 ){

526 if–
pFix
->
pP¨£
->
db
->
öô
.
busy
 ){

527 
pEx¥
->
›
 = 
TK_NULL
;

529 
	`sqlôe3Eº‹Msg
(
pFix
->
pP¨£
, "%†ˇ¬Ÿ u£ v¨übÀs",ÖFix->
zTy≥
);

533 if–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_TokíO∆y
) ) ;

534 if–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_xIsSñe˘
) ){

535 if–
	`sqlôe3FixSñe˘
(
pFix
, 
pEx¥
->
x
.
pSñe˘
) )  1;

537 if–
	`sqlôe3FixEx¥Li°
(
pFix
, 
pEx¥
->
x
.
pLi°
) )  1;

539 if–
	`sqlôe3FixEx¥
(
pFix
, 
pEx¥
->
pRight
) ){

542 
pEx¥
 =ÖEx¥->
pLe·
;

545 
	}
}

546 
	$sqlôe3FixEx¥Li°
(

547 
DbFixî
 *
pFix
,

548 
Ex¥Li°
 *
pLi°


550 
i
;

551 
Ex¥Li°_ôem
 *
pIãm
;

552 if–
pLi°
==0 )  0;

553 
i
=0, 
pIãm
=
pLi°
->
a
; i<pLi°->
nEx¥
; i++,ÖItem++){

554 if–
	`sqlôe3FixEx¥
(
pFix
, 
pIãm
->
pEx¥
) ){

559 
	}
}

562 #i‚de‡
SQLITE_OMIT_TRIGGER


563 
	$sqlôe3FixTriggîSãp
(

564 
DbFixî
 *
pFix
,

565 
TriggîSãp
 *
pSãp


567  
pSãp
 ){

568 if–
	`sqlôe3FixSñe˘
(
pFix
, 
pSãp
->
pSñe˘
) ){

571 if–
	`sqlôe3FixEx¥
(
pFix
, 
pSãp
->
pWhîe
) ){

574 if–
	`sqlôe3FixEx¥Li°
(
pFix
, 
pSãp
->
pEx¥Li°
) ){

577 
pSãp
 =ÖSãp->
pNext
;

580 
	}
}

	@auth.c

17 
	~"sqlôeI¡.h
"

23 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


70 
sqlôe3_£t_auth‹izî
(

71 
sqlôe3
 *
db
,

72 (*
xAuth
)(*,,const *,const *,const *,const *),

73 *
pArg


75 #ifde‡
SQLITE_ENABLE_API_ARMOR


76 if–!
	`sqlôe3Sa„tyCheckOk
(
db
ËË 
SQLITE_MISUSE_BKPT
;

78 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

79 
db
->
xAuth
 = (
sqlôe3_xauth
)xAuth;

80 
db
->
pAuthArg
 = 
pArg
;

81 
	`sqlôe3ExpúePª∑ªdSèãmíts
(
db
);

82 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

83  
SQLITE_OK
;

84 
	}
}

90 
	$sqlôeAuthBadRëu∫Code
(
P¨£
 *
pP¨£
){

91 
	`sqlôe3Eº‹Msg
(
pP¨£
, "authorizer malfunction");

92 
pP¨£
->
rc
 = 
SQLITE_ERROR
;

93 
	}
}

104 
	$sqlôe3AuthRódCﬁ
(

105 
P¨£
 *
pP¨£
,

106 c⁄° *
zTab
,

107 c⁄° *
zCﬁ
,

108 
iDb


110 
sqlôe3
 *
db
 = 
pP¨£
->db;

111 *
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

112 
rc
;

114 
rc
 = 
db
->
	`xAuth
(db->
pAuthArg
, 
SQLITE_READ
, 
zTab
,
zCﬁ
,
zDb
,
pP¨£
->
zAuthC⁄ãxt


115 #ifde‡
SQLITE_USER_AUTHENTICATION


116 ,
db
->
auth
.
zAuthU£r


119 if–
rc
==
SQLITE_DENY
 ){

120 if–
db
->
nDb
>2 || 
iDb
!=0 ){

121 
	`sqlôe3Eº‹Msg
(
pP¨£
, "ac˚s†tÿ%s.%s.%†i†¥ohibôed",
zDb
,
zTab
,
zCﬁ
);

123 
	`sqlôe3Eº‹Msg
(
pP¨£
, "ac˚s†tÿ%s.%†i†¥ohibôed", 
zTab
, 
zCﬁ
);

125 
pP¨£
->
rc
 = 
SQLITE_AUTH
;

126 }if–
rc
!=
SQLITE_IGNORE
 &&Ñc!=
SQLITE_OK
 ){

127 
	`sqlôeAuthBadRëu∫Code
(
pP¨£
);

129  
rc
;

130 
	}
}

141 
	$sqlôe3AuthRód
(

142 
P¨£
 *
pP¨£
,

143 
Ex¥
 *
pEx¥
,

144 
Schema
 *
pSchema
,

145 
SrcLi°
 *
pTabLi°


147 
sqlôe3
 *
db
 = 
pP¨£
->db;

148 
TabÀ
 *
pTab
 = 0;

149 c⁄° *
zCﬁ
;

150 
iSrc
;

151 
iDb
;

152 
iCﬁ
;

154 if–
db
->
xAuth
==0 ) ;

155 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pSchema
);

156 if–
iDb
<0 ){

162 
	`as£π
–
pEx¥
->
›
==
TK_COLUMN
 ||ÖEx¥->›==
TK_TRIGGER
 );

163 if–
pEx¥
->
›
==
TK_TRIGGER
 ){

164 
pTab
 = 
pP¨£
->
pTriggîTab
;

166 
	`as£π
–
pTabLi°
 );

167 
iSrc
=0; 
	`ALWAYS
(iSrc<
pTabLi°
->
nSrc
); iSrc++){

168 if–
pEx¥
->
iTabÀ
==
pTabLi°
->
a
[
iSrc
].
iCurs‹
 ){

169 
pTab
 = 
pTabLi°
->
a
[
iSrc
].pTab;

174 
iCﬁ
 = 
pEx¥
->
iCﬁumn
;

175 if–
	`NEVER
(
pTab
==0) ) ;

177 if–
iCﬁ
>=0 ){

178 
	`as£π
–
iCﬁ
<
pTab
->
nCﬁ
 );

179 
zCﬁ
 = 
pTab
->
aCﬁ
[
iCﬁ
].
zName
;

180 }if–
pTab
->
iPKey
>=0 ){

181 
	`as£π
–
pTab
->
iPKey
<pTab->
nCﬁ
 );

182 
zCﬁ
 = 
pTab
->
aCﬁ
[pTab->
iPKey
].
zName
;

184 
zCﬁ
 = "ROWID";

186 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

187 if–
SQLITE_IGNORE
==
	`sqlôe3AuthRódCﬁ
(
pP¨£
, 
pTab
->
zName
, 
zCﬁ
, 
iDb
) ){

188 
pEx¥
->
›
 = 
TK_NULL
;

190 
	}
}

198 
	$sqlôe3AuthCheck
(

199 
P¨£
 *
pP¨£
,

200 
code
,

201 c⁄° *
zArg1
,

202 c⁄° *
zArg2
,

203 c⁄° *
zArg3


205 
sqlôe3
 *
db
 = 
pP¨£
->db;

206 
rc
;

211 if–
db
->
öô
.
busy
 || 
IN_DECLARE_VTAB
 ){

212  
SQLITE_OK
;

215 if–
db
->
xAuth
==0 ){

216  
SQLITE_OK
;

218 
rc
 = 
db
->
	`xAuth
(db->
pAuthArg
, 
code
, 
zArg1
, 
zArg2
, 
zArg3
, 
pP¨£
->
zAuthC⁄ãxt


219 #ifde‡
SQLITE_USER_AUTHENTICATION


220 ,
db
->
auth
.
zAuthU£r


223 if–
rc
==
SQLITE_DENY
 ){

224 
	`sqlôe3Eº‹Msg
(
pP¨£
, "notáuthorized");

225 
pP¨£
->
rc
 = 
SQLITE_AUTH
;

226 }if–
rc
!=
SQLITE_OK
 &&Ñc!=
SQLITE_IGNORE
 ){

227 
rc
 = 
SQLITE_DENY
;

228 
	`sqlôeAuthBadRëu∫Code
(
pP¨£
);

230  
rc
;

231 
	}
}

238 
	$sqlôe3AuthC⁄ãxtPush
(

239 
P¨£
 *
pP¨£
,

240 
AuthC⁄ãxt
 *
pC⁄ãxt
,

241 c⁄° *
zC⁄ãxt


243 
	`as£π
–
pP¨£
 );

244 
pC⁄ãxt
->
pP¨£
 =ÖParse;

245 
pC⁄ãxt
->
zAuthC⁄ãxt
 = 
pP¨£
->zAuthContext;

246 
pP¨£
->
zAuthC⁄ãxt
 = 
zC⁄ãxt
;

247 
	}
}

253 
	$sqlôe3AuthC⁄ãxtP›
(
AuthC⁄ãxt
 *
pC⁄ãxt
){

254 if–
pC⁄ãxt
->
pP¨£
 ){

255 
pC⁄ãxt
->
pP¨£
->
zAuthC⁄ãxt
 =ÖContext->zAuthContext;

256 
pC⁄ãxt
->
pP¨£
 = 0;

258 
	}
}

	@backup.c

15 
	~"sqlôeI¡.h
"

16 
	~"båìI¡.h
"

21 
	ssqlôe3_backup
 {

22 
sqlôe3
* 
	mpDe°Db
;

23 
Båì
 *
	mpDe°
;

24 
u32
 
	miDe°Schema
;

25 
	mbDe°Locked
;

27 
Pgno
 
	miNext
;

28 
sqlôe3
* 
	mpSrcDb
;

29 
Båì
 *
	mpSrc
;

31 
	mrc
;

36 
Pgno
 
	mnRemaöög
;

37 
Pgno
 
	mnPagecou¡
;

39 
	misAâached
;

40 
sqlôe3_backup
 *
	mpNext
;

82 
Båì
 *
	$födBåì
(
sqlôe3
 *
pEº‹Db
, sqlôe3 *
pDb
, c⁄° *
zDb
){

83 
i
 = 
	`sqlôe3FödDbName
(
pDb
, 
zDb
);

85 if–
i
==1 ){

86 
P¨£
 *
pP¨£
;

87 
rc
 = 0;

88 
pP¨£
 = 
	`sqlôe3SèckAŒocZîo
(
pEº‹Db
, (*pParse));

89 if–
pP¨£
==0 ){

90 
	`sqlôe3Eº‹WôhMsg
(
pEº‹Db
, 
SQLITE_NOMEM
, "out of memory");

91 
rc
 = 
SQLITE_NOMEM_BKPT
;

93 
pP¨£
->
db
 = 
pDb
;

94 if–
	`sqlôe3O≥nTempD©aba£
(
pP¨£
) ){

95 
	`sqlôe3Eº‹WôhMsg
(
pEº‹Db
, 
pP¨£
->
rc
, "%s",ÖP¨£->
zEºMsg
);

96 
rc
 = 
SQLITE_ERROR
;

98 
	`sqlôe3DbFªe
(
pEº‹Db
, 
pP¨£
->
zEºMsg
);

99 
	`sqlôe3P¨£rRe£t
(
pP¨£
);

100 
	`sqlôe3SèckFªe
(
pEº‹Db
, 
pP¨£
);

102 if–
rc
 ){

107 if–
i
<0 ){

108 
	`sqlôe3Eº‹WôhMsg
(
pEº‹Db
, 
SQLITE_ERROR
, "unknow¿d©aba£ %s", 
zDb
);

112  
pDb
->
aDb
[
i
].
pBt
;

113 
	}
}

119 
	$£tDe°Pgsz
(
sqlôe3_backup
 *
p
){

120 
rc
;

121 
rc
 = 
	`sqlôe3BåìSëPageSize
(
p
->
pDe°
,
	`sqlôe3BåìGëPageSize
’->
pSrc
),-1,0);

122  
rc
;

123 
	}
}

131 
	$checkRódTønß˘i⁄
(
sqlôe3
 *
db
, 
Båì
 *
p
){

132 if–
	`sqlôe3BåìIsInRódTøns
(
p
) ){

133 
	`sqlôe3Eº‹WôhMsg
(
db
, 
SQLITE_ERROR
, "destination database is in use");

134  
SQLITE_ERROR
;

136  
SQLITE_OK
;

137 
	}
}

147 
sqlôe3_backup
 *
	$sqlôe3_backup_öô
(

148 
sqlôe3
* 
pDe°Db
,

149 c⁄° *
zDe°Db
,

150 
sqlôe3
* 
pSrcDb
,

151 c⁄° *
zSrcDb


153 
sqlôe3_backup
 *
p
;

155 #ifde‡
SQLITE_ENABLE_API_ARMOR


156 if–!
	`sqlôe3Sa„tyCheckOk
(
pSrcDb
)||!sqlôe3Sa„tyCheckOk(
pDe°Db
) ){

157 ()
SQLITE_MISUSE_BKPT
;

170 
	`sqlôe3_muãx_íãr
(
pSrcDb
->
muãx
);

171 
	`sqlôe3_muãx_íãr
(
pDe°Db
->
muãx
);

173 if–
pSrcDb
==
pDe°Db
 ){

174 
	`sqlôe3Eº‹WôhMsg
(

175 
pDe°Db
, 
SQLITE_ERROR
, "sourceánd destination must be distinct"

177 
p
 = 0;

183 
p
 = (
sqlôe3_backup
 *)
	`sqlôe3MÆlocZîo
((sqlite3_backup));

184 if–!
p
 ){

185 
	`sqlôe3Eº‹
(
pDe°Db
, 
SQLITE_NOMEM_BKPT
);

190 if–
p
 ){

191 
p
->
pSrc
 = 
	`födBåì
(
pDe°Db
, 
pSrcDb
, 
zSrcDb
);

192 
p
->
pDe°
 = 
	`födBåì
(
pDe°Db
,ÖDe°Db, 
zDe°Db
);

193 
p
->
pDe°Db
 =ÖDestDb;

194 
p
->
pSrcDb
 =ÖSrcDb;

195 
p
->
iNext
 = 1;

196 
p
->
isAâached
 = 0;

198 if–0==
p
->
pSrc
 || 0=ı->
pDe°


199 || 
	`£tDe°Pgsz
(
p
)==
SQLITE_NOMEM


200 || 
	`checkRódTønß˘i⁄
(
pDe°Db
, 
p
->
pDe°
)!=
SQLITE_OK


207 
	`sqlôe3_‰ì
(
p
);

208 
p
 = 0;

211 if–
p
 ){

212 
p
->
pSrc
->
nBackup
++;

215 
	`sqlôe3_muãx_Àave
(
pDe°Db
->
muãx
);

216 
	`sqlôe3_muãx_Àave
(
pSrcDb
->
muãx
);

217  
p
;

218 
	}
}

225 
	$isF©ÆEº‹
(
rc
){

226  (
rc
!=
SQLITE_OK
 &&Ñc!=
SQLITE_BUSY
 && 
	`ALWAYS
‘c!=
SQLITE_LOCKED
));

227 
	}
}

234 
	$backupO√Page
(

235 
sqlôe3_backup
 *
p
,

236 
Pgno
 
iSrcPg
,

237 c⁄° 
u8
 *
zSrcD©a
,

238 
bUpd©e


240 
Pagî
 * c⁄° 
pDe°Pagî
 = 
	`sqlôe3BåìPagî
(
p
->
pDe°
);

241 c⁄° 
nSrcPgsz
 = 
	`sqlôe3BåìGëPageSize
(
p
->
pSrc
);

242 
nDe°Pgsz
 = 
	`sqlôe3BåìGëPageSize
(
p
->
pDe°
);

243 c⁄° 
nC›y
 = 
	`MIN
(
nSrcPgsz
, 
nDe°Pgsz
);

244 c⁄° 
i64
 
iEnd
 = (i64)
iSrcPg
*(i64)
nSrcPgsz
;

245 #ifde‡
SQLITE_HAS_CODEC


249 
nSrcRe£rve
 = 
	`sqlôe3BåìGëRe£rveNoMuãx
(
p
->
pSrc
);

250 
nDe°Re£rve
 = 
	`sqlôe3BåìGëO±imÆRe£rve
(
p
->
pDe°
);

252 
rc
 = 
SQLITE_OK
;

253 
i64
 
iOff
;

255 
	`as£π
–
	`sqlôe3BåìGëRe£rveNoMuãx
(
p
->
pSrc
)>=0 );

256 
	`as£π
–
p
->
bDe°Locked
 );

257 
	`as£π
–!
	`isF©ÆEº‹
(
p
->
rc
) );

258 
	`as£π
–
iSrcPg
!=
	`PENDING_BYTE_PAGE
(
p
->
pSrc
->
pBt
) );

259 
	`as£π
–
zSrcD©a
 );

264 if–
nSrcPgsz
!=
nDe°Pgsz
 && 
	`sqlôe3PagîIsMemdb
(
pDe°Pagî
) ){

265 
rc
 = 
SQLITE_READONLY
;

268 #ifde‡
SQLITE_HAS_CODEC


272 if–
nSrcPgsz
!=
nDe°Pgsz
 && 
	`sqlôe3PagîGëCodec
(
pDe°Pagî
)!=0 ){

273 
rc
 = 
SQLITE_READONLY
;

281 if–
nSrcRe£rve
!=
nDe°Re£rve
 ){

282 
u32
 
√wPgsz
 = 
nSrcPgsz
;

283 
rc
 = 
	`sqlôe3PagîSëPagesize
(
pDe°Pagî
, &
√wPgsz
, 
nSrcRe£rve
);

284 if–
rc
==
SQLITE_OK
 && 
√wPgsz
!=
nSrcPgsz
 )Ñ¯
SQLITE_READONLY
;

292 
iOff
=
iEnd
-(
i64
)
nSrcPgsz
; 
rc
==
SQLITE_OK
 && iOff<iEnd; iOff+=
nDe°Pgsz
){

293 
DbPage
 *
pDe°Pg
 = 0;

294 
Pgno
 
iDe°
 = (Pgno)(
iOff
/
nDe°Pgsz
)+1;

295 if–
iDe°
==
	`PENDING_BYTE_PAGE
(
p
->
pDe°
->
pBt
) ) ;

296 if–
SQLITE_OK
==(
rc
 = 
	`sqlôe3PagîGë
(
pDe°Pagî
, 
iDe°
, &
pDe°Pg
, 0))

297 && 
SQLITE_OK
==(
rc
 = 
	`sqlôe3PagîWrôe
(
pDe°Pg
))

299 c⁄° 
u8
 *
zIn
 = &
zSrcD©a
[
iOff
%
nSrcPgsz
];

300 
u8
 *
zDe°D©a
 = 
	`sqlôe3PagîGëD©a
(
pDe°Pg
);

301 
u8
 *
zOut
 = &
zDe°D©a
[
iOff
%
nDe°Pgsz
];

310 
	`mem˝y
(
zOut
, 
zIn
, 
nC›y
);

311 ((
u8
 *)
	`sqlôe3PagîGëExåa
(
pDe°Pg
))[0] = 0;

312 if–
iOff
==0 && 
bUpd©e
==0 ){

313 
	`sqlôe3Put4byã
(&
zOut
[28], 
	`sqlôe3BåìLa°Page
(
p
->
pSrc
));

316 
	`sqlôe3PagîUƒef
(
pDe°Pg
);

319  
rc
;

320 
	}
}

330 
	$backupTrunˇãFûe
(
sqlôe3_fûe
 *
pFûe
, 
i64
 
iSize
){

331 
i64
 
iCuºít
;

332 
rc
 = 
	`sqlôe3OsFûeSize
(
pFûe
, &
iCuºít
);

333 if–
rc
==
SQLITE_OK
 && 
iCuºít
>
iSize
 ){

334 
rc
 = 
	`sqlôe3OsTrunˇã
(
pFûe
, 
iSize
);

336  
rc
;

337 
	}
}

343 
	$©èchBackupObje˘
(
sqlôe3_backup
 *
p
){

344 
sqlôe3_backup
 **
µ
;

345 
	`as£π
–
	`sqlôe3BåìHﬁdsMuãx
(
p
->
pSrc
) );

346 
µ
 = 
	`sqlôe3PagîBackupPå
(
	`sqlôe3BåìPagî
(
p
->
pSrc
));

347 
p
->
pNext
 = *
µ
;

348 *
µ
 = 
p
;

349 
p
->
isAâached
 = 1;

350 
	}
}

355 
	$sqlôe3_backup_°ï
(
sqlôe3_backup
 *
p
, 
nPage
){

356 
rc
;

357 
de°Mode
;

358 
pgszSrc
 = 0;

359 
pgszDe°
 = 0;

361 #ifde‡
SQLITE_ENABLE_API_ARMOR


362 if–
p
==0 )  
SQLITE_MISUSE_BKPT
;

364 
	`sqlôe3_muãx_íãr
(
p
->
pSrcDb
->
muãx
);

365 
	`sqlôe3BåìE¡î
(
p
->
pSrc
);

366 if–
p
->
pDe°Db
 ){

367 
	`sqlôe3_muãx_íãr
(
p
->
pDe°Db
->
muãx
);

370 
rc
 = 
p
->rc;

371 if–!
	`isF©ÆEº‹
(
rc
) ){

372 
Pagî
 * c⁄° 
pSrcPagî
 = 
	`sqlôe3BåìPagî
(
p
->
pSrc
);

373 
Pagî
 * c⁄° 
pDe°Pagî
 = 
	`sqlôe3BåìPagî
(
p
->
pDe°
);

374 
ii
;

375 
nSrcPage
 = -1;

376 
bClo£Tøns
 = 0;

381 if–
p
->
pDe°Db
 &&Ö->
pSrc
->
pBt
->
öTønß˘i⁄
==
TRANS_WRITE
 ){

382 
rc
 = 
SQLITE_BUSY
;

384 
rc
 = 
SQLITE_OK
;

388 if–
SQLITE_OK
==
rc
 && 
p
->
bDe°Locked
==0

389 && 
SQLITE_OK
==(
rc
 = 
	`sqlôe3BåìBegöTøns
(
p
->
pDe°
, 2))

391 
p
->
bDe°Locked
 = 1;

392 
	`sqlôe3BåìGëMëa
(
p
->
pDe°
, 
BTREE_SCHEMA_VERSION
, &p->
iDe°Schema
);

399 if–
rc
==
SQLITE_OK
 && 0==
	`sqlôe3BåìIsInRódTøns
(
p
->
pSrc
) ){

400 
rc
 = 
	`sqlôe3BåìBegöTøns
(
p
->
pSrc
, 0);

401 
bClo£Tøns
 = 1;

406 
pgszSrc
 = 
	`sqlôe3BåìGëPageSize
(
p
->
pSrc
);

407 
pgszDe°
 = 
	`sqlôe3BåìGëPageSize
(
p
->
pDe°
);

408 
de°Mode
 = 
	`sqlôe3PagîGëJou∫ÆMode
(
	`sqlôe3BåìPagî
(
p
->
pDe°
));

409 if–
SQLITE_OK
==
rc
 && 
de°Mode
==
PAGER_JOURNALMODE_WAL
 && 
pgszSrc
!=
pgszDe°
 ){

410 
rc
 = 
SQLITE_READONLY
;

416 
nSrcPage
 = ()
	`sqlôe3BåìLa°Page
(
p
->
pSrc
);

417 
	`as£π
–
nSrcPage
>=0 );

418 
ii
=0; (
nPage
<0 || ii<nPageË&& 
p
->
iNext
<=(
Pgno
)
nSrcPage
 && !
rc
; ii++){

419 c⁄° 
Pgno
 
iSrcPg
 = 
p
->
iNext
;

420 if–
iSrcPg
!=
	`PENDING_BYTE_PAGE
(
p
->
pSrc
->
pBt
) ){

421 
DbPage
 *
pSrcPg
;

422 
rc
 = 
	`sqlôe3PagîGë
(
pSrcPagî
, 
iSrcPg
, &
pSrcPg
,
PAGER_GET_READONLY
);

423 if–
rc
==
SQLITE_OK
 ){

424 
rc
 = 
	`backupO√Page
(
p
, 
iSrcPg
, 
	`sqlôe3PagîGëD©a
(
pSrcPg
), 0);

425 
	`sqlôe3PagîUƒef
(
pSrcPg
);

428 
p
->
iNext
++;

430 if–
rc
==
SQLITE_OK
 ){

431 
p
->
nPagecou¡
 = 
nSrcPage
;

432 
p
->
nRemaöög
 = 
nSrcPage
+1-p->
iNext
;

433 if–
p
->
iNext
>(
Pgno
)
nSrcPage
 ){

434 
rc
 = 
SQLITE_DONE
;

435 }if–!
p
->
isAâached
 ){

436 
	`©èchBackupObje˘
(
p
);

445 if–
rc
==
SQLITE_DONE
 ){

446 if–
nSrcPage
==0 ){

447 
rc
 = 
	`sqlôe3BåìNewDb
(
p
->
pDe°
);

448 
nSrcPage
 = 1;

450 if–
rc
==
SQLITE_OK
 ||Ñc==
SQLITE_DONE
 ){

451 
rc
 = 
	`sqlôe3BåìUpd©eMëa
(
p
->
pDe°
,1,p->
iDe°Schema
+1);

453 if–
rc
==
SQLITE_OK
 ){

454 if–
p
->
pDe°Db
 ){

455 
	`sqlôe3Re£tAŒSchemasOfC⁄√˘i⁄
(
p
->
pDe°Db
);

457 if–
de°Mode
==
PAGER_JOURNALMODE_WAL
 ){

458 
rc
 = 
	`sqlôe3BåìSëVîsi⁄
(
p
->
pDe°
, 2);

461 if–
rc
==
SQLITE_OK
 ){

462 
nDe°Trunˇã
;

475 
	`as£π
–
pgszSrc
==
	`sqlôe3BåìGëPageSize
(
p
->
pSrc
) );

476 
	`as£π
–
pgszDe°
==
	`sqlôe3BåìGëPageSize
(
p
->
pDe°
) );

477 if–
pgszSrc
<
pgszDe°
 ){

478 
øtio
 = 
pgszDe°
/
pgszSrc
;

479 
nDe°Trunˇã
 = (
nSrcPage
+
øtio
-1)/ratio;

480 if–
nDe°Trunˇã
==()
	`PENDING_BYTE_PAGE
(
p
->
pDe°
->
pBt
) ){

481 
nDe°Trunˇã
--;

484 
nDe°Trunˇã
 = 
nSrcPage
 * (
pgszSrc
/
pgszDe°
);

486 
	`as£π
–
nDe°Trunˇã
>0 );

488 if–
pgszSrc
<
pgszDe°
 ){

498 c⁄° 
i64
 
iSize
 = (i64)
pgszSrc
 * (i64)
nSrcPage
;

499 
sqlôe3_fûe
 * c⁄° 
pFûe
 = 
	`sqlôe3PagîFûe
(
pDe°Pagî
);

500 
Pgno
 
iPg
;

501 
nD°Page
;

502 
i64
 
iOff
;

503 
i64
 
iEnd
;

505 
	`as£π
–
pFûe
 );

506 
	`as£π
–
nDe°Trunˇã
==0

507 || (
i64
)
nDe°Trunˇã
*(i64)
pgszDe°
 >
iSize
 || (

508 
nDe°Trunˇã
==()(
	`PENDING_BYTE_PAGE
(
p
->
pDe°
->
pBt
)-1)

509 && 
iSize
>=
PENDING_BYTE
 && iSize<=PENDING_BYTE+
pgszDe°


518 
	`sqlôe3PagîPagecou¡
(
pDe°Pagî
, &
nD°Page
);

519 
iPg
=
nDe°Trunˇã
; 
rc
==
SQLITE_OK
 && iPg<=(
Pgno
)
nD°Page
; iPg++){

520 if–
iPg
!=
	`PENDING_BYTE_PAGE
(
p
->
pDe°
->
pBt
) ){

521 
DbPage
 *
pPg
;

522 
rc
 = 
	`sqlôe3PagîGë
(
pDe°Pagî
, 
iPg
, &
pPg
, 0);

523 if–
rc
==
SQLITE_OK
 ){

524 
rc
 = 
	`sqlôe3PagîWrôe
(
pPg
);

525 
	`sqlôe3PagîUƒef
(
pPg
);

529 if–
rc
==
SQLITE_OK
 ){

530 
rc
 = 
	`sqlôe3PagîCommôPha£O√
(
pDe°Pagî
, 0, 1);

534 
iEnd
 = 
	`MIN
(
PENDING_BYTE
 + 
pgszDe°
, 
iSize
);

536 
iOff
=
PENDING_BYTE
+
pgszSrc
;

537 
rc
==
SQLITE_OK
 && 
iOff
<
iEnd
;

538 
iOff
+=
pgszSrc


540 
PgHdr
 *
pSrcPg
 = 0;

541 c⁄° 
Pgno
 
iSrcPg
 = (Pgno)((
iOff
/
pgszSrc
)+1);

542 
rc
 = 
	`sqlôe3PagîGë
(
pSrcPagî
, 
iSrcPg
, &
pSrcPg
, 0);

543 if–
rc
==
SQLITE_OK
 ){

544 
u8
 *
zD©a
 = 
	`sqlôe3PagîGëD©a
(
pSrcPg
);

545 
rc
 = 
	`sqlôe3OsWrôe
(
pFûe
, 
zD©a
, 
pgszSrc
, 
iOff
);

547 
	`sqlôe3PagîUƒef
(
pSrcPg
);

549 if–
rc
==
SQLITE_OK
 ){

550 
rc
 = 
	`backupTrunˇãFûe
(
pFûe
, 
iSize
);

554 if–
rc
==
SQLITE_OK
 ){

555 
rc
 = 
	`sqlôe3PagîSync
(
pDe°Pagî
, 0);

558 
	`sqlôe3PagîTrunˇãImage
(
pDe°Pagî
, 
nDe°Trunˇã
);

559 
rc
 = 
	`sqlôe3PagîCommôPha£O√
(
pDe°Pagî
, 0, 0);

563 if–
SQLITE_OK
==
rc


564 && 
SQLITE_OK
==(
rc
 = 
	`sqlôe3BåìCommôPha£Two
(
p
->
pDe°
, 0))

566 
rc
 = 
SQLITE_DONE
;

576 if–
bClo£Tøns
 ){

577 
	`TESTONLY
–
rc2
 );

578 
	`TESTONLY
–
rc2
 = ) 
	`sqlôe3BåìCommôPha£O√
(
p
->
pSrc
, 0);

579 
	`TESTONLY
–
rc2
 |Ë
	`sqlôe3BåìCommôPha£Two
(
p
->
pSrc
, 0);

580 
	`as£π
–
rc2
==
SQLITE_OK
 );

583 if–
rc
==
SQLITE_IOERR_NOMEM
 ){

584 
rc
 = 
SQLITE_NOMEM_BKPT
;

586 
p
->
rc
 =Ñc;

588 if–
p
->
pDe°Db
 ){

589 
	`sqlôe3_muãx_Àave
(
p
->
pDe°Db
->
muãx
);

591 
	`sqlôe3BåìLóve
(
p
->
pSrc
);

592 
	`sqlôe3_muãx_Àave
(
p
->
pSrcDb
->
muãx
);

593  
rc
;

594 
	}
}

599 
	$sqlôe3_backup_föish
(
sqlôe3_backup
 *
p
){

600 
sqlôe3_backup
 **
µ
;

601 
sqlôe3
 *
pSrcDb
;

602 
rc
;

605 if–
p
==0 )  
SQLITE_OK
;

606 
pSrcDb
 = 
p
->pSrcDb;

607 
	`sqlôe3_muãx_íãr
(
pSrcDb
->
muãx
);

608 
	`sqlôe3BåìE¡î
(
p
->
pSrc
);

609 if–
p
->
pDe°Db
 ){

610 
	`sqlôe3_muãx_íãr
(
p
->
pDe°Db
->
muãx
);

614 if–
p
->
pDe°Db
 ){

615 
p
->
pSrc
->
nBackup
--;

617 if–
p
->
isAâached
 ){

618 
µ
 = 
	`sqlôe3PagîBackupPå
(
	`sqlôe3BåìPagî
(
p
->
pSrc
));

619  *
µ
!=
p
 ){

620 
µ
 = &(*µ)->
pNext
;

622 *
µ
 = 
p
->
pNext
;

626 
	`sqlôe3BåìRﬁlback
(
p
->
pDe°
, 
SQLITE_OK
, 0);

629 
rc
 = (
p
->rc==
SQLITE_DONE
Ë? 
SQLITE_OK
 :Ö->rc;

630 if–
p
->
pDe°Db
 ){

631 
	`sqlôe3Eº‹
(
p
->
pDe°Db
, 
rc
);

634 
	`sqlôe3LóveMuãxAndClo£Zombõ
(
p
->
pDe°Db
);

636 
	`sqlôe3BåìLóve
(
p
->
pSrc
);

637 if–
p
->
pDe°Db
 ){

641 
	`sqlôe3_‰ì
(
p
);

643 
	`sqlôe3LóveMuãxAndClo£Zombõ
(
pSrcDb
);

644  
rc
;

645 
	}
}

651 
	$sqlôe3_backup_ªmaöög
(
sqlôe3_backup
 *
p
){

652 #ifde‡
SQLITE_ENABLE_API_ARMOR


653 if–
p
==0 ){

654 ()
SQLITE_MISUSE_BKPT
;

658  
p
->
nRemaöög
;

659 
	}
}

665 
	$sqlôe3_backup_∑gecou¡
(
sqlôe3_backup
 *
p
){

666 #ifde‡
SQLITE_ENABLE_API_ARMOR


667 if–
p
==0 ){

668 ()
SQLITE_MISUSE_BKPT
;

672  
p
->
nPagecou¡
;

673 
	}
}

687 
SQLITE_NOINLINE
 
	$backupUpd©e
(

688 
sqlôe3_backup
 *
p
,

689 
Pgno
 
iPage
,

690 c⁄° 
u8
 *
aD©a


692 
	`as£π
–
p
!=0 );

694 
	`as£π
–
	`sqlôe3_muãx_hñd
(
p
->
pSrc
->
pBt
->
muãx
) );

695 if–!
	`isF©ÆEº‹
(
p
->
rc
Ë&& 
iPage
<p->
iNext
 ){

700 
rc
;

701 
	`as£π
–
p
->
pDe°Db
 );

702 
	`sqlôe3_muãx_íãr
(
p
->
pDe°Db
->
muãx
);

703 
rc
 = 
	`backupO√Page
(
p
, 
iPage
, 
aD©a
, 1);

704 
	`sqlôe3_muãx_Àave
(
p
->
pDe°Db
->
muãx
);

705 
	`as£π
–
rc
!=
SQLITE_BUSY
 &&Ñc!=
SQLITE_LOCKED
 );

706 if–
rc
!=
SQLITE_OK
 ){

707 
p
->
rc
 =Ñc;

710 } (
p
 =Ö->
pNext
)!=0 );

711 
	}
}

712 
	$sqlôe3BackupUpd©e
(
sqlôe3_backup
 *
pBackup
, 
Pgno
 
iPage
, c⁄° 
u8
 *
aD©a
){

713 if–
pBackup
 ) 
	`backupUpd©e
’Backup, 
iPage
, 
aD©a
);

714 
	}
}

727 
	$sqlôe3BackupRe°¨t
(
sqlôe3_backup
 *
pBackup
){

728 
sqlôe3_backup
 *
p
;

729 
p
=
pBackup
;Ö;Öı->
pNext
){

730 
	`as£π
–
	`sqlôe3_muãx_hñd
(
p
->
pSrc
->
pBt
->
muãx
) );

731 
p
->
iNext
 = 1;

733 
	}
}

735 #i‚de‡
SQLITE_OMIT_VACUUM


744 
	$sqlôe3BåìC›yFûe
(
Båì
 *
pTo
, Båì *
pFrom
){

745 
rc
;

746 
sqlôe3_fûe
 *
pFd
;

747 
sqlôe3_backup
 
b
;

748 
	`sqlôe3BåìE¡î
(
pTo
);

749 
	`sqlôe3BåìE¡î
(
pFrom
);

751 
	`as£π
–
	`sqlôe3BåìIsInTøns
(
pTo
) );

752 
pFd
 = 
	`sqlôe3PagîFûe
(
	`sqlôe3BåìPagî
(
pTo
));

753 if–
pFd
->
pMëhods
 ){

754 
i64
 
nByã
 = 
	`sqlôe3BåìGëPageSize
(
pFrom
)*(i64)
	`sqlôe3BåìLa°Page
(pFrom);

755 
rc
 = 
	`sqlôe3OsFûeC⁄åﬁ
(
pFd
, 
SQLITE_FCNTL_OVERWRITE
, &
nByã
);

756 if–
rc
==
SQLITE_NOTFOUND
 )Ñ¯
SQLITE_OK
;

757 if–
rc
 ) 
c›y_föished
;

765 
	`mem£t
(&
b
, 0, (b));

766 
b
.
pSrcDb
 = 
pFrom
->
db
;

767 
b
.
pSrc
 = 
pFrom
;

768 
b
.
pDe°
 = 
pTo
;

769 
b
.
iNext
 = 1;

771 #ifde‡
SQLITE_HAS_CODEC


772 
	`sqlôe3PagîAlignRe£rve
(
	`sqlôe3BåìPagî
(
pTo
), sqlôe3BåìPagî(
pFrom
));

782 
	`sqlôe3_backup_°ï
(&
b
, 0x7FFFFFFF);

783 
	`as£π
–
b
.
rc
!=
SQLITE_OK
 );

784 
rc
 = 
	`sqlôe3_backup_föish
(&
b
);

785 if–
rc
==
SQLITE_OK
 ){

786 
pTo
->
pBt
->
btsFœgs
 &~
BTS_PAGESIZE_FIXED
;

788 
	`sqlôe3PagîCÀ¨Cache
(
	`sqlôe3BåìPagî
(
b
.
pDe°
));

791 
	`as£π
–
	`sqlôe3BåìIsInTøns
(
pTo
)==0 );

792 
c›y_föished
:

793 
	`sqlôe3BåìLóve
(
pFrom
);

794 
	`sqlôe3BåìLóve
(
pTo
);

795  
rc
;

796 
	}
}

	@bitvec.c

37 
	~"sqlôeI¡.h
"

40 
	#BITVEC_SZ
 512

	)

44 
	#BITVEC_USIZE
 \

45 (((
BITVEC_SZ
-(3*(
u32
)))/(
Bôvec
*))*(Bôvec*))

	)

51 
	#BITVEC_TELEM
 
u8


	)

53 
	#BITVEC_SZELEM
 8

	)

55 
	#BITVEC_NELEM
 (
BITVEC_USIZE
/(
BITVEC_TELEM
))

	)

57 
	#BITVEC_NBIT
 (
BITVEC_NELEM
*
BITVEC_SZELEM
)

	)

60 
	#BITVEC_NINT
 (
BITVEC_USIZE
/(
u32
))

	)

63 
	#BITVEC_MXHASH
 (
BITVEC_NINT
/2)

	)

68 
	#BITVEC_HASH
(
X
Ë(((X)*1)%
BITVEC_NINT
)

	)

70 
	#BITVEC_NPTR
 (
BITVEC_USIZE
/(
Bôvec
 *))

	)

94 
	sBôvec
 {

95 
u32
 
	miSize
;

96 
u32
 
	mnSë
;

99 
u32
 
	miDivis‹
;

104 
BITVEC_TELEM
 
	maBôm≠
[
BITVEC_NELEM
];

105 
u32
 
	maHash
[
BITVEC_NINT
];

106 
Bôvec
 *
	m≠Sub
[
BITVEC_NPTR
];

107 } 
	mu
;

115 
Bôvec
 *
	$sqlôe3BôvecCª©e
(
u32
 
iSize
){

116 
Bôvec
 *
p
;

117 
	`as£π
–(*
p
)==
BITVEC_SZ
 );

118 
p
 = 
	`sqlôe3MÆlocZîo
( (*p) );

119 if–
p
 ){

120 
p
->
iSize
 = iSize;

122  
p
;

123 
	}
}

130 
	$sqlôe3BôvecTe°NŸNuŒ
(
Bôvec
 *
p
, 
u32
 
i
){

131 
	`as£π
–
p
!=0 );

132 
i
--;

133 if–
i
>=
p
->
iSize
 )  0;

134  
p
->
iDivis‹
 ){

135 
u32
 
bö
 = 
i
/
p
->
iDivis‹
;

136 
i
 = i%
p
->
iDivis‹
;

137 
p
 =Ö->
u
.
≠Sub
[
bö
];

138 i‡(!
p
) {

142 if–
p
->
iSize
<=
BITVEC_NBIT
 ){

143  (
p
->
u
.
aBôm≠
[
i
/
BITVEC_SZELEM
] & (1<<(i&(BITVEC_SZELEM-1))))!=0;

145 
u32
 
h
 = 
	`BITVEC_HASH
(
i
++);

146  
p
->
u
.
aHash
[
h
] ){

147 if–
p
->
u
.
aHash
[
h
]==
i
 )  1;

148 
h
 = (h+1Ë% 
BITVEC_NINT
;

152 
	}
}

153 
	$sqlôe3BôvecTe°
(
Bôvec
 *
p
, 
u32
 
i
){

154  
p
!=0 && 
	`sqlôe3BôvecTe°NŸNuŒ
’,
i
);

155 
	}
}

169 
	$sqlôe3BôvecSë
(
Bôvec
 *
p
, 
u32
 
i
){

170 
u32
 
h
;

171 if–
p
==0 )  
SQLITE_OK
;

172 
	`as£π
–
i
>0 );

173 
	`as£π
–
i
<=
p
->
iSize
 );

174 
i
--;

175 (
p
->
iSize
 > 
BITVEC_NBIT
Ë&&Ö->
iDivis‹
) {

176 
u32
 
bö
 = 
i
/
p
->
iDivis‹
;

177 
i
 = i%
p
->
iDivis‹
;

178 if–
p
->
u
.
≠Sub
[
bö
]==0 ){

179 
p
->
u
.
≠Sub
[
bö
] = 
	`sqlôe3BôvecCª©e
–p->
iDivis‹
 );

180 if–
p
->
u
.
≠Sub
[
bö
]==0 )  
SQLITE_NOMEM_BKPT
;

182 
p
 =Ö->
u
.
≠Sub
[
bö
];

184 if–
p
->
iSize
<=
BITVEC_NBIT
 ){

185 
p
->
u
.
aBôm≠
[
i
/
BITVEC_SZELEM
] |= 1 << (i&(BITVEC_SZELEM-1));

186  
SQLITE_OK
;

188 
h
 = 
	`BITVEC_HASH
(
i
++);

192 if–!
p
->
u
.
aHash
[
h
] ){

193 i‡(
p
->
nSë
<(
BITVEC_NINT
-1)) {

194 
bôvec_£t_íd
;

196 
bôvec_£t_ªhash
;

202 if–
p
->
u
.
aHash
[
h
]==
i
 )  
SQLITE_OK
;

203 
h
++;

204 if–
h
>=
BITVEC_NINT
 ) h = 0;

205 }  
p
->
u
.
aHash
[
h
] );

209 
bôvec_£t_ªhash
:

210 if–
p
->
nSë
>=
BITVEC_MXHASH
 ){

211 
j
;

212 
rc
;

213 
u32
 *
aiVÆues
 = 
	`sqlôe3SèckAŒocRaw
(0, (
p
->
u
.
aHash
));

214 if–
aiVÆues
==0 ){

215  
SQLITE_NOMEM_BKPT
;

217 
	`mem˝y
(
aiVÆues
, 
p
->
u
.
aHash
, (p->u.aHash));

218 
	`mem£t
(
p
->
u
.
≠Sub
, 0, (p->u.apSub));

219 
p
->
iDivis‹
 = (p->
iSize
 + 
BITVEC_NPTR
 - 1)/BITVEC_NPTR;

220 
rc
 = 
	`sqlôe3BôvecSë
(
p
, 
i
);

221 
j
=0; j<
BITVEC_NINT
; j++){

222 if–
aiVÆues
[
j
] ) 
rc
 |
	`sqlôe3BôvecSë
(
p
,áiValues[j]);

224 
	`sqlôe3SèckFªe
(0, 
aiVÆues
);

225  
rc
;

228 
bôvec_£t_íd
:

229 
p
->
nSë
++;

230 
p
->
u
.
aHash
[
h
] = 
i
;

231  
SQLITE_OK
;

232 
	}
}

240 
	$sqlôe3BôvecCÀ¨
(
Bôvec
 *
p
, 
u32
 
i
, *
pBuf
){

241 if–
p
==0 ) ;

242 
	`as£π
–
i
>0 );

243 
i
--;

244  
p
->
iDivis‹
 ){

245 
u32
 
bö
 = 
i
/
p
->
iDivis‹
;

246 
i
 = i%
p
->
iDivis‹
;

247 
p
 =Ö->
u
.
≠Sub
[
bö
];

248 i‡(!
p
) {

252 if–
p
->
iSize
<=
BITVEC_NBIT
 ){

253 
p
->
u
.
aBôm≠
[
i
/
BITVEC_SZELEM
] &= ~(1 << (i&(BITVEC_SZELEM-1)));

255 
j
;

256 
u32
 *
aiVÆues
 = 
pBuf
;

257 
	`mem˝y
(
aiVÆues
, 
p
->
u
.
aHash
, (p->u.aHash));

258 
	`mem£t
(
p
->
u
.
aHash
, 0, (p->u.aHash));

259 
p
->
nSë
 = 0;

260 
j
=0; j<
BITVEC_NINT
; j++){

261 if–
aiVÆues
[
j
] &&áiVÆues[j]!=(
i
+1) ){

262 
u32
 
h
 = 
	`BITVEC_HASH
(
aiVÆues
[
j
]-1);

263 
p
->
nSë
++;

264  
p
->
u
.
aHash
[
h
] ){

265 
h
++;

266 if–
h
>=
BITVEC_NINT
 ) h = 0;

268 
p
->
u
.
aHash
[
h
] = 
aiVÆues
[
j
];

272 
	}
}

277 
	$sqlôe3BôvecDe°roy
(
Bôvec
 *
p
){

278 if–
p
==0 ) ;

279 if–
p
->
iDivis‹
 ){

280 
i
;

281 
i
=0; i<
BITVEC_NPTR
; i++){

282 
	`sqlôe3BôvecDe°roy
(
p
->
u
.
≠Sub
[
i
]);

285 
	`sqlôe3_‰ì
(
p
);

286 
	}
}

292 
u32
 
	$sqlôe3BôvecSize
(
Bôvec
 *
p
){

293  
p
->
iSize
;

294 
	}
}

296 #i‚de‡
SQLITE_OMIT_BUILTIN_TEST


303 
	#SETBIT
(
V
,
I
ËV[I>>3] |(1<<(I&7))

	)

304 
	#CLEARBIT
(
V
,
I
ËV[I>>3] &~(1<<(I&7))

	)

305 
	#TESTBIT
(
V
,
I
Ë(V[I>>3]&(1<<(I&7)))!=0

	)

337 
	$sqlôe3BôvecBuûtöTe°
(
sz
, *
aOp
){

338 
Bôvec
 *
pBôvec
 = 0;

339 *
pV
 = 0;

340 
rc
 = -1;

341 
i
, 
nx
, 
pc
, 
›
;

342 *
pTmpS∑˚
;

346 
pBôvec
 = 
	`sqlôe3BôvecCª©e
–
sz
 );

347 
pV
 = 
	`sqlôe3MÆlocZîo
–(
sz
+7)/8 + 1 );

348 
pTmpS∑˚
 = 
	`sqlôe3_mÆloc64
(
BITVEC_SZ
);

349 if–
pBôvec
==0 || 
pV
==0 || 
pTmpS∑˚
==0 ) 
bôvec_íd
;

352 
	`sqlôe3BôvecSë
(0, 1);

353 
	`sqlôe3BôvecCÀ¨
(0, 1, 
pTmpS∑˚
);

356 
pc
 = 0;

357  (
›
 = 
aOp
[
pc
])!=0 ){

358  
›
 ){

362 
nx
 = 4;

363 
i
 = 
aOp
[
pc
+2] - 1;

364 
aOp
[
pc
+2] +=áOp[pc+3];

370 
nx
 = 2;

371 
	`sqlôe3_øndom√ss
((
i
), &i);

375 if–(--
aOp
[
pc
+1]Ë> 0 ) 
nx
 = 0;

376 
pc
 +
nx
;

377 
i
 = (ò& 0x7fffffff)%
sz
;

378 if–(
›
 & 1)!=0 ){

379 
	`SETBIT
(
pV
, (
i
+1));

380 if–
›
!=5 ){

381 if–
	`sqlôe3BôvecSë
(
pBôvec
, 
i
+1ËË
bôvec_íd
;

384 
	`CLEARBIT
(
pV
, (
i
+1));

385 
	`sqlôe3BôvecCÀ¨
(
pBôvec
, 
i
+1, 
pTmpS∑˚
);

394 
rc
 = 
	`sqlôe3BôvecTe°
(0,0Ë+ sqlôe3BôvecTe°(
pBôvec
, 
sz
+1)

395 + 
	`sqlôe3BôvecTe°
(
pBôvec
, 0)

396 + (
	`sqlôe3BôvecSize
(
pBôvec
Ë- 
sz
);

397 
i
=1; i<=
sz
; i++){

398 if–(
	`TESTBIT
(
pV
,
i
))!=
	`sqlôe3BôvecTe°
(
pBôvec
,i) ){

399 
rc
 = 
i
;

405 
bôvec_íd
:

406 
	`sqlôe3_‰ì
(
pTmpS∑˚
);

407 
	`sqlôe3_‰ì
(
pV
);

408 
	`sqlôe3BôvecDe°roy
(
pBôvec
);

409  
rc
;

410 
	}
}

	@btmutex.c

18 
	~"båìI¡.h
"

19 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


20 #i‡
SQLITE_THREADSAFE


27 
	$lockBåìMuãx
(
Båì
 *
p
){

28 
	`as£π
–
p
->
locked
==0 );

29 
	`as£π
–
	`sqlôe3_muãx_nŸhñd
(
p
->
pBt
->
muãx
) );

30 
	`as£π
–
	`sqlôe3_muãx_hñd
(
p
->
db
->
muãx
) );

32 
	`sqlôe3_muãx_íãr
(
p
->
pBt
->
muãx
);

33 
p
->
pBt
->
db
 =Ö->db;

34 
p
->
locked
 = 1;

35 
	}
}

41 
SQLITE_NOINLINE
 
	$u∆ockBåìMuãx
(
Båì
 *
p
){

42 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

43 
	`as£π
–
p
->
locked
==1 );

44 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

45 
	`as£π
–
	`sqlôe3_muãx_hñd
(
p
->
db
->
muãx
) );

46 
	`as£π
–
p
->
db
==
pBt
->db );

48 
	`sqlôe3_muãx_Àave
(
pBt
->
muãx
);

49 
p
->
locked
 = 0;

50 
	}
}

53 
SQLITE_NOINLINE
 
båìLockC¨efuŒy
(
Båì
 *
p
);

71 
	$sqlôe3BåìE¡î
(
Båì
 *
p
){

76 
	`as£π
–
p
->
pNext
==0 ||Ö->pNext->
pBt
>p->pBt );

77 
	`as£π
–
p
->
pPªv
==0 ||Ö->pPªv->
pBt
<p->pBt );

78 
	`as£π
–
p
->
pNext
==0 ||Ö->pNext->
db
==p->db );

79 
	`as£π
–
p
->
pPªv
==0 ||Ö->pPªv->
db
==p->db );

80 
	`as£π
–
p
->
sh¨abÀ
 || (p->
pNext
==0 &&Ö->
pPªv
==0) );

83 
	`as£π
–!
p
->
locked
 ||Ö->
w™tToLock
>0 );

84 
	`as£π
–
p
->
sh¨abÀ
 ||Ö->
w™tToLock
==0 );

87 
	`as£π
–
	`sqlôe3_muãx_hñd
(
p
->
db
->
muãx
) );

91 
	`as£π
–(
p
->
locked
==0 &&Ö->
sh¨abÀ
Ë||Ö->
pBt
->
db
==p->db );

93 if–!
p
->
sh¨abÀ
 ) ;

94 
p
->
w™tToLock
++;

95 if–
p
->
locked
 ) ;

96 
	`båìLockC¨efuŒy
(
p
);

97 
	}
}

105 
SQLITE_NOINLINE
 
	$båìLockC¨efuŒy
(
Båì
 *
p
){

106 
Båì
 *
pL©î
;

112 if–
	`sqlôe3_muãx_åy
(
p
->
pBt
->
muãx
)==
SQLITE_OK
 ){

113 
p
->
pBt
->
db
 =Ö->db;

114 
p
->
locked
 = 1;

123 
pL©î
=
p
->
pNext
;ÖLater;ÖLater=pLater->pNext){

124 
	`as£π
–
pL©î
->
sh¨abÀ
 );

125 
	`as£π
–
pL©î
->
pNext
==0 ||ÖL©î->pNext->
pBt
>pLater->pBt );

126 
	`as£π
–!
pL©î
->
locked
 ||ÖL©î->
w™tToLock
>0 );

127 if–
pL©î
->
locked
 ){

128 
	`u∆ockBåìMuãx
(
pL©î
);

131 
	`lockBåìMuãx
(
p
);

132 
pL©î
=
p
->
pNext
;ÖLater;ÖLater=pLater->pNext){

133 if–
pL©î
->
w™tToLock
 ){

134 
	`lockBåìMuãx
(
pL©î
);

137 
	}
}

143 
	$sqlôe3BåìLóve
(
Båì
 *
p
){

144 
	`as£π
–
	`sqlôe3_muãx_hñd
(
p
->
db
->
muãx
) );

145 if–
p
->
sh¨abÀ
 ){

146 
	`as£π
–
p
->
w™tToLock
>0 );

147 
p
->
w™tToLock
--;

148 if–
p
->
w™tToLock
==0 ){

149 
	`u∆ockBåìMuãx
(
p
);

152 
	}
}

154 #i‚de‡
NDEBUG


161 
	$sqlôe3BåìHﬁdsMuãx
(
Båì
 *
p
){

162 
	`as£π
–
p
->
sh¨abÀ
==0 ||Ö->
locked
==0 ||Ö->
w™tToLock
>0 );

163 
	`as£π
–
p
->
sh¨abÀ
==0 ||Ö->
locked
==0 ||Ö->
db
=ı->
pBt
->db );

164 
	`as£π
–
p
->
sh¨abÀ
==0 ||Ö->
locked
==0 || 
	`sqlôe3_muãx_hñd
’->
pBt
->
muãx
) );

165 
	`as£π
–
p
->
sh¨abÀ
==0 ||Ö->
locked
==0 || 
	`sqlôe3_muãx_hñd
’->
db
->
muãx
) );

167  (
p
->
sh¨abÀ
==0 ||Ö->
locked
);

168 
	}
}

186 
	$sqlôe3BåìE¡îAŒ
(
sqlôe3
 *
db
){

187 
i
;

188 
Båì
 *
p
;

189 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

190 
i
=0; i<
db
->
nDb
; i++){

191 
p
 = 
db
->
aDb
[
i
].
pBt
;

192 if–
p
 ) 
	`sqlôe3BåìE¡î
(p);

194 
	}
}

195 
	$sqlôe3BåìLóveAŒ
(
sqlôe3
 *
db
){

196 
i
;

197 
Båì
 *
p
;

198 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

199 
i
=0; i<
db
->
nDb
; i++){

200 
p
 = 
db
->
aDb
[
i
].
pBt
;

201 if–
p
 ) 
	`sqlôe3BåìLóve
(p);

203 
	}
}

205 #i‚de‡
NDEBUG


212 
	$sqlôe3BåìHﬁdsAŒMuãxes
(
sqlôe3
 *
db
){

213 
i
;

214 if–!
	`sqlôe3_muãx_hñd
(
db
->
muãx
) ){

217 
i
=0; i<
db
->
nDb
; i++){

218 
Båì
 *
p
;

219 
p
 = 
db
->
aDb
[
i
].
pBt
;

220 if–
p
 &&Ö->
sh¨abÀ
 &&

221 (
p
->
w™tToLock
==0 || !
	`sqlôe3_muãx_hñd
’->
pBt
->
muãx
)) ){

226 
	}
}

229 #i‚de‡
NDEBUG


241 
	$sqlôe3SchemaMuãxHñd
(
sqlôe3
 *
db
, 
iDb
, 
Schema
 *
pSchema
){

242 
Båì
 *
p
;

243 
	`as£π
–
db
!=0 );

244 if–
pSchema
 ) 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
,ÖSchema);

245 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

246 if–!
	`sqlôe3_muãx_hñd
(
db
->
muãx
) )  0;

247 if–
iDb
==1 )  1;

248 
p
 = 
db
->
aDb
[
iDb
].
pBt
;

249 
	`as£π
–
p
!=0 );

250  
p
->
sh¨abÀ
==0 ||Ö->
locked
==1;

251 
	}
}

265 
	$sqlôe3BåìE¡î
(
Båì
 *
p
){

266 
p
->
pBt
->
db
 =Ö->db;

267 
	}
}

268 
	$sqlôe3BåìE¡îAŒ
(
sqlôe3
 *
db
){

269 
i
;

270 
i
=0; i<
db
->
nDb
; i++){

271 
Båì
 *
p
 = 
db
->
aDb
[
i
].
pBt
;

272 if–
p
 ){

273 
p
->
pBt
->
db
 =Ö->db;

276 
	}
}

279 #i‚de‡
SQLITE_OMIT_INCRBLOB


287 
	$sqlôe3BåìE¡îCurs‹
(
BtCurs‹
 *
pCur
){

288 
	`sqlôe3BåìE¡î
(
pCur
->
pBåì
);

289 
	}
}

290 #i‡
SQLITE_THREADSAFE


291 
	$sqlôe3BåìLóveCurs‹
(
BtCurs‹
 *
pCur
){

292 
	`sqlôe3BåìLóve
(
pCur
->
pBåì
);

293 
	}
}

	@btree.c

16 
	~"båìI¡.h
"

22 c⁄° 
	gzMagicHódî
[] = 
SQLITE_FILE_HEADER
;

29 
	gsqlôe3BåìTø˚
=1;

30 
	#TRACE
(
X
Ëif(
sqlôe3BåìTø˚
){
¥ötf
 X;
	`fÊush
(
°dout
);}

	)

32 
	#TRACE
(
X
)

	)

44 
	#gë2byãNŸZîo
(
X
Ë((((()
	`gë2byã
(X))-1)&0xffff)+1)

	)

49 
	#BTALLOC_ANY
 0

	)

50 
	#BTALLOC_EXACT
 1

	)

51 
	#BTALLOC_LE
 2

	)

59 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


60 
	#IfNŸOmôAV
(
ex¥
Ë”x¥)

	)

62 
	#IfNŸOmôAV
(
ex¥
Ë0

	)

65 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


74 #ifde‡
SQLITE_TEST


75 
BtSh¨ed
 *
SQLITE_WSD
 
	gsqlôe3Sh¨edCacheLi°
 = 0;

77 
BtSh¨ed
 *
SQLITE_WSD
 
	gsqlôe3Sh¨edCacheLi°
 = 0;

81 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


89 
	$sqlôe3_íabÀ_sh¨ed_ˇche
(
íabÀ
){

90 
sqlôe3GlobÆC⁄fig
.
sh¨edCacheE«bÀd
 = 
íabÀ
;

91  
SQLITE_OK
;

92 
	}
}

97 #ifde‡
SQLITE_OMIT_SHARED_CACHE


107 
	#quîySh¨edCacheTabÀLock
(
a
,
b
,
c
Ë
SQLITE_OK


	)

108 
	#£tSh¨edCacheTabÀLock
(
a
,
b
,
c
Ë
SQLITE_OK


	)

109 
	#˛órAŒSh¨edCacheTabÀLocks
(
a
)

	)

110 
	#downgødeAŒSh¨edCacheTabÀLocks
(
a
)

	)

111 
	#hasSh¨edCacheTabÀLock
(
a
,
b
,
c
,
d
Ë1

	)

112 
	#hasRódC⁄Êi˘s
(
a
, 
b
Ë0

	)

115 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


117 #ifde‡
SQLITE_DEBUG


140 
	$hasSh¨edCacheTabÀLock
(

141 
Båì
 *
pBåì
,

142 
Pgno
 
iRoŸ
,

143 
isIndex
,

144 
eLockTy≥


146 
Schema
 *
pSchema
 = (Schem®*)
pBåì
->
pBt
->pSchema;

147 
Pgno
 
iTab
 = 0;

148 
BtLock
 *
pLock
;

154 if–(
pBåì
->
sh¨abÀ
==0)

155 || (
eLockTy≥
==
READ_LOCK
 && (
pBåì
->
db
->
Êags
 & 
SQLITE_RódUncommôãd
))

165 if–
isIndex
 && (!
pSchema
 || (pSchema->
schemaFœgs
&
DB_SchemaLﬂded
)==0) ){

173 if–
isIndex
 ){

174 
HashEÀm
 *
p
;

175 
p
=
	`sqlôeHashFú°
(&
pSchema
->
idxHash
);Ö;Ö=
	`sqlôeHashNext
(p)){

176 
Index
 *
pIdx
 = (Index *)
	`sqlôeHashD©a
(
p
);

177 if–
pIdx
->
äum
==()
iRoŸ
 ){

178 if–
iTab
 ){

184 
iTab
 = 
pIdx
->
pTabÀ
->
äum
;

188 
iTab
 = 
iRoŸ
;

194 
pLock
=
pBåì
->
pBt
->pLock;ÖLock;ÖLockıLock->
pNext
){

195 if–
pLock
->
pBåì
==pBtree

196 && (
pLock
->
iTabÀ
==
iTab
 || (pLock->
eLock
==
WRITE_LOCK
 &&ÖLock->iTable==1))

197 && 
pLock
->
eLock
>=
eLockTy≥


205 
	}
}

208 #ifde‡
SQLITE_DEBUG


227 
	$hasRódC⁄Êi˘s
(
Båì
 *
pBåì
, 
Pgno
 
iRoŸ
){

228 
BtCurs‹
 *
p
;

229 
p
=
pBåì
->
pBt
->
pCurs‹
;Ö;Öı->
pNext
){

230 if–
p
->
pgnoRoŸ
==
iRoŸ


231 && 
p
->
pBåì
!=pBtree

232 && 0==(
p
->
pBåì
->
db
->
Êags
 & 
SQLITE_RódUncommôãd
)

238 
	}
}

247 
	$quîySh¨edCacheTabÀLock
(
Båì
 *
p
, 
Pgno
 
iTab
, 
u8
 
eLock
){

248 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

249 
BtLock
 *
pIãr
;

251 
	`as£π
–
	`sqlôe3BåìHﬁdsMuãx
(
p
) );

252 
	`as£π
–
eLock
==
READ_LOCK
 ||ÉLock==
WRITE_LOCK
 );

253 
	`as£π
–
p
->
db
!=0 );

254 
	`as£π
–!(
p
->
db
->
Êags
&
SQLITE_RódUncommôãd
)||
eLock
==
WRITE_LOCK
||
iTab
==1 );

260 
	`as£π
–
eLock
==
READ_LOCK
 || (
p
==
pBt
->
pWrôî
 &&Ö->
öTøns
==
TRANS_WRITE
) );

261 
	`as£π
–
eLock
==
READ_LOCK
 || 
pBt
->
öTønß˘i⁄
==
TRANS_WRITE
 );

264 if–!
p
->
sh¨abÀ
 ){

265  
SQLITE_OK
;

271 if–
pBt
->
pWrôî
!=
p
 && (pBt->
btsFœgs
 & 
BTS_EXCLUSIVE
)!=0 ){

272 
	`sqlôe3C⁄√˘i⁄Blocked
(
p
->
db
, 
pBt
->
pWrôî
->db);

273  
SQLITE_LOCKED_SHAREDCACHE
;

276 
pIãr
=
pBt
->
pLock
;ÖIãr;ÖIãrıIãr->
pNext
){

286 
	`as£π
–
pIãr
->
eLock
==
READ_LOCK
 ||ÖIãr->eLock==
WRITE_LOCK
 );

287 
	`as£π
–
eLock
==
READ_LOCK
 || 
pIãr
->
pBåì
==
p
 ||ÖIter->eLock==READ_LOCK);

288 if–
pIãr
->
pBåì
!=
p
 &&ÖIãr->
iTabÀ
==
iTab
 &&ÖIãr->
eLock
!=eLock ){

289 
	`sqlôe3C⁄√˘i⁄Blocked
(
p
->
db
, 
pIãr
->
pBåì
->db);

290 if–
eLock
==
WRITE_LOCK
 ){

291 
	`as£π
–
p
==
pBt
->
pWrôî
 );

292 
pBt
->
btsFœgs
 |
BTS_PENDING
;

294  
SQLITE_LOCKED_SHAREDCACHE
;

297  
SQLITE_OK
;

298 
	}
}

301 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


319 
	$£tSh¨edCacheTabÀLock
(
Båì
 *
p
, 
Pgno
 
iTabÀ
, 
u8
 
eLock
){

320 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

321 
BtLock
 *
pLock
 = 0;

322 
BtLock
 *
pIãr
;

324 
	`as£π
–
	`sqlôe3BåìHﬁdsMuãx
(
p
) );

325 
	`as£π
–
eLock
==
READ_LOCK
 ||ÉLock==
WRITE_LOCK
 );

326 
	`as£π
–
p
->
db
!=0 );

332 
	`as£π
–0==(
p
->
db
->
Êags
&
SQLITE_RódUncommôãd
Ë|| 
eLock
==
WRITE_LOCK
 );

336 
	`as£π
–
p
->
sh¨abÀ
 );

337 
	`as£π
–
SQLITE_OK
==
	`quîySh¨edCacheTabÀLock
(
p
, 
iTabÀ
, 
eLock
) );

340 
pIãr
=
pBt
->
pLock
;ÖIãr;ÖIãrıIãr->
pNext
){

341 if–
pIãr
->
iTabÀ
==iTabÀ &&ÖIãr->
pBåì
==
p
 ){

342 
pLock
 = 
pIãr
;

350 if–!
pLock
 ){

351 
pLock
 = (
BtLock
 *)
	`sqlôe3MÆlocZîo
((BtLock));

352 if–!
pLock
 ){

353  
SQLITE_NOMEM_BKPT
;

355 
pLock
->
iTabÀ
 = iTable;

356 
pLock
->
pBåì
 = 
p
;

357 
pLock
->
pNext
 = 
pBt
->pLock;

358 
pBt
->
pLock
 =ÖLock;

365 
	`as£π
–
WRITE_LOCK
>
READ_LOCK
 );

366 if–
eLock
>
pLock
->eLock ){

367 
pLock
->
eLock
 =ÉLock;

370  
SQLITE_OK
;

371 
	}
}

374 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


383 
	$˛órAŒSh¨edCacheTabÀLocks
(
Båì
 *
p
){

384 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

385 
BtLock
 **
µIãr
 = &
pBt
->
pLock
;

387 
	`as£π
–
	`sqlôe3BåìHﬁdsMuãx
(
p
) );

388 
	`as£π
–
p
->
sh¨abÀ
 || 0==*
µIãr
 );

389 
	`as£π
–
p
->
öTøns
>0 );

391  *
µIãr
 ){

392 
BtLock
 *
pLock
 = *
µIãr
;

393 
	`as£π
–(
pBt
->
btsFœgs
 & 
BTS_EXCLUSIVE
)==0 ||ÖBt->
pWrôî
==
pLock
->
pBåì
 );

394 
	`as£π
–
pLock
->
pBåì
->
öTøns
>ıLock->
eLock
 );

395 if–
pLock
->
pBåì
==
p
 ){

396 *
µIãr
 = 
pLock
->
pNext
;

397 
	`as£π
–
pLock
->
iTabÀ
!=1 ||ÖLock==&
p
->
lock
 );

398 if–
pLock
->
iTabÀ
!=1 ){

399 
	`sqlôe3_‰ì
(
pLock
);

402 
µIãr
 = &
pLock
->
pNext
;

406 
	`as£π
–(
pBt
->
btsFœgs
 & 
BTS_PENDING
)==0 ||ÖBt->
pWrôî
 );

407 if–
pBt
->
pWrôî
==
p
 ){

408 
pBt
->
pWrôî
 = 0;

409 
pBt
->
btsFœgs
 &~(
BTS_EXCLUSIVE
|
BTS_PENDING
);

410 }if–
pBt
->
nTønß˘i⁄
==2 ){

420 
pBt
->
btsFœgs
 &~
BTS_PENDING
;

422 
	}
}

427 
	$downgødeAŒSh¨edCacheTabÀLocks
(
Båì
 *
p
){

428 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

429 if–
pBt
->
pWrôî
==
p
 ){

430 
BtLock
 *
pLock
;

431 
pBt
->
pWrôî
 = 0;

432 
pBt
->
btsFœgs
 &~(
BTS_EXCLUSIVE
|
BTS_PENDING
);

433 
pLock
=
pBt
->pLock;ÖLock;ÖLockıLock->
pNext
){

434 
	`as£π
–
pLock
->
eLock
==
READ_LOCK
 ||ÖLock->
pBåì
==
p
 );

435 
pLock
->
eLock
 = 
READ_LOCK
;

438 
	}
}

442 
ªÀa£Page
(
MemPage
 *
pPage
);

449 #ifde‡
SQLITE_DEBUG


450 
	$curs‹HﬁdsMuãx
(
BtCurs‹
 *
p
){

451  
	`sqlôe3_muãx_hñd
(
p
->
pBt
->
muãx
);

452 
	}
}

453 
	$curs‹OwnsBtSh¨ed
(
BtCurs‹
 *
p
){

454 
	`as£π
–
	`curs‹HﬁdsMuãx
(
p
) );

455  (
p
->
pBåì
->
db
=ı->
pBt
->db);

456 
	}
}

463 
	#övÆid©eOvîÊowCache
(
pCur
Ë’Cur->
curFœgs
 &~
BTCF_VÆidOvÊ
)

	)

469 
	$övÆid©eAŒOvîÊowCache
(
BtSh¨ed
 *
pBt
){

470 
BtCurs‹
 *
p
;

471 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

472 
p
=
pBt
->
pCurs‹
;Ö;Öı->
pNext
){

473 
	`övÆid©eOvîÊowCache
(
p
);

475 
	}
}

477 #i‚de‡
SQLITE_OMIT_INCRBLOB


491 
	$övÆid©eIn¸blobCurs‹s
(

492 
Båì
 *
pBåì
,

493 
i64
 
iRow
,

494 
isCÀ¨TabÀ


496 
BtCurs‹
 *
p
;

497 if–
pBåì
->
hasIn¸blobCur
==0 ) ;

498 
	`as£π
–
	`sqlôe3BåìHﬁdsMuãx
(
pBåì
) );

499 
pBåì
->
hasIn¸blobCur
 = 0;

500 
p
=
pBåì
->
pBt
->
pCurs‹
;Ö;Öı->
pNext
){

501 if–(
p
->
curFœgs
 & 
BTCF_In¸blob
)!=0 ){

502 
pBåì
->
hasIn¸blobCur
 = 1;

503 if–
isCÀ¨TabÀ
 || 
p
->
öfo
.
nKey
==
iRow
 ){

504 
p
->
eSèã
 = 
CURSOR_INVALID
;

508 
	}
}

512 
	#övÆid©eIn¸blobCurs‹s
(
x
,
y
,
z
)

	)

550 
	$båìSëHasC⁄ã¡
(
BtSh¨ed
 *
pBt
, 
Pgno
 
pgno
){

551 
rc
 = 
SQLITE_OK
;

552 if–!
pBt
->
pHasC⁄ã¡
 ){

553 
	`as£π
–
pgno
<=
pBt
->
nPage
 );

554 
pBt
->
pHasC⁄ã¡
 = 
	`sqlôe3BôvecCª©e
’Bt->
nPage
);

555 if–!
pBt
->
pHasC⁄ã¡
 ){

556 
rc
 = 
SQLITE_NOMEM_BKPT
;

559 if–
rc
==
SQLITE_OK
 && 
pgno
<=
	`sqlôe3BôvecSize
(
pBt
->
pHasC⁄ã¡
) ){

560 
rc
 = 
	`sqlôe3BôvecSë
(
pBt
->
pHasC⁄ã¡
, 
pgno
);

562  
rc
;

563 
	}
}

572 
	$båìGëHasC⁄ã¡
(
BtSh¨ed
 *
pBt
, 
Pgno
 
pgno
){

573 
Bôvec
 *
p
 = 
pBt
->
pHasC⁄ã¡
;

574  (
p
 && (
pgno
>
	`sqlôe3BôvecSize
’Ë|| 
	`sqlôe3BôvecTe°
(p,Ögno)));

575 
	}
}

581 
	$båìCÀ¨HasC⁄ã¡
(
BtSh¨ed
 *
pBt
){

582 
	`sqlôe3BôvecDe°roy
(
pBt
->
pHasC⁄ã¡
);

583 
pBt
->
pHasC⁄ã¡
 = 0;

584 
	}
}

589 
	$båìRñó£AŒCurs‹Pages
(
BtCurs‹
 *
pCur
){

590 
i
;

591 
i
=0; i<=
pCur
->
iPage
; i++){

592 
	`ªÀa£Page
(
pCur
->
≠Page
[
i
]);

593 
pCur
->
≠Page
[
i
] = 0;

595 
pCur
->
iPage
 = -1;

596 
	}
}

611 
	$ßveCurs‹Key
(
BtCurs‹
 *
pCur
){

612 
rc
;

613 
	`as£π
–
CURSOR_VALID
==
pCur
->
eSèã
 );

614 
	`as£π
–0==
pCur
->
pKey
 );

615 
	`as£π
–
	`curs‹HﬁdsMuãx
(
pCur
) );

617 
rc
 = 
	`sqlôe3BåìKeySize
(
pCur
, &pCur->
nKey
);

618 
	`as£π
–
rc
==
SQLITE_OK
 );

625 if–0==
pCur
->
curI¡Key
 ){

626 *
pKey
 = 
	`sqlôe3MÆloc
–
pCur
->
nKey
 );

627 if–
pKey
 ){

628 
rc
 = 
	`sqlôe3BåìKey
(
pCur
, 0, (ÌCur->
nKey
, 
pKey
);

629 if–
rc
==
SQLITE_OK
 ){

630 
pCur
->
pKey
 =ÖKey;

632 
	`sqlôe3_‰ì
(
pKey
);

635 
rc
 = 
SQLITE_NOMEM_BKPT
;

638 
	`as£π
–!
pCur
->
curI¡Key
 || !pCur->
pKey
 );

639  
rc
;

640 
	}
}

649 
	$ßveCurs‹Posôi⁄
(
BtCurs‹
 *
pCur
){

650 
rc
;

652 
	`as£π
–
CURSOR_VALID
==
pCur
->
eSèã
 || 
CURSOR_SKIPNEXT
==pCur->eState );

653 
	`as£π
–0==
pCur
->
pKey
 );

654 
	`as£π
–
	`curs‹HﬁdsMuãx
(
pCur
) );

656 if–
pCur
->
eSèã
==
CURSOR_SKIPNEXT
 ){

657 
pCur
->
eSèã
 = 
CURSOR_VALID
;

659 
pCur
->
skùNext
 = 0;

662 
rc
 = 
	`ßveCurs‹Key
(
pCur
);

663 if–
rc
==
SQLITE_OK
 ){

664 
	`båìRñó£AŒCurs‹Pages
(
pCur
);

665 
pCur
->
eSèã
 = 
CURSOR_REQUIRESEEK
;

668 
pCur
->
curFœgs
 &~(
BTCF_VÆidNKey
|
BTCF_VÆidOvÊ
|
BTCF_AtLa°
);

669  
rc
;

670 
	}
}

673 
SQLITE_NOINLINE
 
ßveCurs‹sOnLi°
(
BtCurs‹
*,
Pgno
,BtCursor*);

696 
	$ßveAŒCurs‹s
(
BtSh¨ed
 *
pBt
, 
Pgno
 
iRoŸ
, 
BtCurs‹
 *
pEx˚±
){

697 
BtCurs‹
 *
p
;

698 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

699 
	`as£π
–
pEx˚±
==0 ||ÖEx˚±->
pBt
==pBt );

700 
p
=
pBt
->
pCurs‹
;Ö;Öı->
pNext
){

701 if–
p
!=
pEx˚±
 && (0==
iRoŸ
 ||Ö->
pgnoRoŸ
==iRoot) ) ;

703 if–
p
 )  
	`ßveCurs‹sOnLi°
’, 
iRoŸ
, 
pEx˚±
);

704 if–
pEx˚±
 )ÖEx˚±->
curFœgs
 &~
BTCF_Mu…ùÀ
;

705  
SQLITE_OK
;

706 
	}
}

713 
SQLITE_NOINLINE
 
	$ßveCurs‹sOnLi°
(

714 
BtCurs‹
 *
p
,

715 
Pgno
 
iRoŸ
,

716 
BtCurs‹
 *
pEx˚±


719 if–
p
!=
pEx˚±
 && (0==
iRoŸ
 ||Ö->
pgnoRoŸ
==iRoot) ){

720 if–
p
->
eSèã
==
CURSOR_VALID
 ||Ö->eSèã==
CURSOR_SKIPNEXT
 ){

721 
rc
 = 
	`ßveCurs‹Posôi⁄
(
p
);

722 if–
SQLITE_OK
!=
rc
 ){

723  
rc
;

726 
	`ã°ˇ£
–
p
->
iPage
>0 );

727 
	`båìRñó£AŒCurs‹Pages
(
p
);

730 
p
 =Ö->
pNext
;

731 } 
p
 );

732  
SQLITE_OK
;

733 
	}
}

738 
	$sqlôe3BåìCÀ¨Curs‹
(
BtCurs‹
 *
pCur
){

739 
	`as£π
–
	`curs‹HﬁdsMuãx
(
pCur
) );

740 
	`sqlôe3_‰ì
(
pCur
->
pKey
);

741 
pCur
->
pKey
 = 0;

742 
pCur
->
eSèã
 = 
CURSOR_INVALID
;

743 
	}
}

750 
	$båìMovëo
(

751 
BtCurs‹
 *
pCur
,

752 c⁄° *
pKey
,

753 
i64
 
nKey
,

754 
büs
,

755 *
pRes


757 
rc
;

758 
U≈ackedRec‹d
 *
pIdxKey
;

759 
aS∑˚
[200];

760 *
pFªe
 = 0;

762 if–
pKey
 ){

763 
	`as£π
–
nKey
==(
i64
)()nKey );

764 
pIdxKey
 = 
	`sqlôe3VdbeAŒocU≈ackedRec‹d
(

765 
pCur
->
pKeyInfo
, 
aS∑˚
, ◊S∑˚), &
pFªe


767 if–
pIdxKey
==0 )  
SQLITE_NOMEM_BKPT
;

768 
	`sqlôe3VdbeRec‹dU≈ack
(
pCur
->
pKeyInfo
, ()
nKey
, 
pKey
, 
pIdxKey
);

769 if–
pIdxKey
->
nFõld
==0 ){

770 
	`sqlôe3DbFªe
(
pCur
->
pKeyInfo
->
db
, 
pFªe
);

771  
SQLITE_CORRUPT_BKPT
;

774 
pIdxKey
 = 0;

776 
rc
 = 
	`sqlôe3BåìMovëoU≈acked
(
pCur
, 
pIdxKey
, 
nKey
, 
büs
, 
pRes
);

777 if–
pFªe
 ){

778 
	`sqlôe3DbFªe
(
pCur
->
pKeyInfo
->
db
, 
pFªe
);

780  
rc
;

781 
	}
}

790 
	$båìRe°‹eCurs‹Posôi⁄
(
BtCurs‹
 *
pCur
){

791 
rc
;

792 
skùNext
;

793 
	`as£π
–
	`curs‹OwnsBtSh¨ed
(
pCur
) );

794 
	`as£π
–
pCur
->
eSèã
>=
CURSOR_REQUIRESEEK
 );

795 if–
pCur
->
eSèã
==
CURSOR_FAULT
 ){

796  
pCur
->
skùNext
;

798 
pCur
->
eSèã
 = 
CURSOR_INVALID
;

799 
rc
 = 
	`båìMovëo
(
pCur
,ÖCur->
pKey
,ÖCur->
nKey
, 0, &
skùNext
);

800 if–
rc
==
SQLITE_OK
 ){

801 
	`sqlôe3_‰ì
(
pCur
->
pKey
);

802 
pCur
->
pKey
 = 0;

803 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 ||ÖCur->eSèã==
CURSOR_INVALID
 );

804 
pCur
->
skùNext
 |= skipNext;

805 if–
pCur
->
skùNext
 &&ÖCur->
eSèã
==
CURSOR_VALID
 ){

806 
pCur
->
eSèã
 = 
CURSOR_SKIPNEXT
;

809  
rc
;

810 
	}
}

812 
	#ª°‹eCurs‹Posôi⁄
(
p
) \

813 (
p
->
eSèã
>=
CURSOR_REQUIRESEEK
 ? \

814 
	`båìRe°‹eCurs‹Posôi⁄
(
p
) : \

815 
SQLITE_OK
)

	)

829 
	$sqlôe3BåìCurs‹HasMoved
(
BtCurs‹
 *
pCur
){

830  
pCur
->
eSèã
!=
CURSOR_VALID
;

831 
	}
}

846 
	$sqlôe3BåìCurs‹Re°‹e
(
BtCurs‹
 *
pCur
, *
pDif„ª¡Row
){

847 
rc
;

849 
	`as£π
–
pCur
!=0 );

850 
	`as£π
–
pCur
->
eSèã
!=
CURSOR_VALID
 );

851 
rc
 = 
	`ª°‹eCurs‹Posôi⁄
(
pCur
);

852 if–
rc
 ){

853 *
pDif„ª¡Row
 = 1;

854  
rc
;

856 if–
pCur
->
eSèã
!=
CURSOR_VALID
 ){

857 *
pDif„ª¡Row
 = 1;

859 
	`as£π
–
pCur
->
skùNext
==0 );

860 *
pDif„ª¡Row
 = 0;

862  
SQLITE_OK
;

863 
	}
}

865 #ifde‡
SQLITE_ENABLE_CURSOR_HINTS


871 
	$sqlôe3BåìCurs‹Höt
(
BtCurs‹
 *
pCur
, 
eHötTy≥
, ...){

873 
	}
}

879 
	$sqlôe3BåìCurs‹HötFœgs
(
BtCurs‹
 *
pCur
, 
x
){

880 
	`as£π
–
x
==
BTREE_SEEK_EQ
 || x==
BTREE_BULKLOAD
 || x==0 );

881 
pCur
->
höts
 = 
x
;

882 
	}
}

885 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


895 
Pgno
 
	$±rm≠Pagío
(
BtSh¨ed
 *
pBt
, 
Pgno
 
pgno
){

896 
nPagesPîM≠Page
;

897 
Pgno
 
iPåM≠
, 
ªt
;

898 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

899 if–
pgno
<2 )  0;

900 
nPagesPîM≠Page
 = (
pBt
->
ußbÀSize
/5)+1;

901 
iPåM≠
 = (
pgno
-2)/
nPagesPîM≠Page
;

902 
ªt
 = (
iPåM≠
*
nPagesPîM≠Page
) + 2;

903 if–
ªt
==
	`PENDING_BYTE_PAGE
(
pBt
) ){

904 
ªt
++;

906  
ªt
;

907 
	}
}

919 
	$±rm≠Put
(
BtSh¨ed
 *
pBt
, 
Pgno
 
key
, 
u8
 
eTy≥
, Pgnÿ
∑ª¡
, *
pRC
){

920 
DbPage
 *
pDbPage
;

921 
u8
 *
pPåm≠
;

922 
Pgno
 
iPåm≠
;

923 
off£t
;

924 
rc
;

926 if–*
pRC
 ) ;

928 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

930 
	`as£π
–0==
	`PTRMAP_ISPAGE
(
pBt
, 
	`PENDING_BYTE_PAGE
(pBt)) );

932 
	`as£π
–
pBt
->
autoVacuum
 );

933 if–
key
==0 ){

934 *
pRC
 = 
SQLITE_CORRUPT_BKPT
;

937 
iPåm≠
 = 
	`PTRMAP_PAGENO
(
pBt
, 
key
);

938 
rc
 = 
	`sqlôe3PagîGë
(
pBt
->
pPagî
, 
iPåm≠
, &
pDbPage
, 0);

939 if–
rc
!=
SQLITE_OK
 ){

940 *
pRC
 = 
rc
;

943 
off£t
 = 
	`PTRMAP_PTROFFSET
(
iPåm≠
, 
key
);

944 if–
off£t
<0 ){

945 *
pRC
 = 
SQLITE_CORRUPT_BKPT
;

946 
±rm≠_exô
;

948 
	`as£π
–
off£t
 <()
pBt
->
ußbÀSize
-5 );

949 
pPåm≠
 = (
u8
 *)
	`sqlôe3PagîGëD©a
(
pDbPage
);

951 if–
eTy≥
!=
pPåm≠
[
off£t
] || 
	`gë4byã
(&pPåm≠[off£t+1])!=
∑ª¡
 ){

952 
	`TRACE
(("PTRMAP_UPDATE: %d->(%d,%d)\n", 
key
, 
eTy≥
, 
∑ª¡
));

953 *
pRC

rc
 = 
	`sqlôe3PagîWrôe
(
pDbPage
);

954 if–
rc
==
SQLITE_OK
 ){

955 
pPåm≠
[
off£t
] = 
eTy≥
;

956 
	`put4byã
(&
pPåm≠
[
off£t
+1], 
∑ª¡
);

960 
±rm≠_exô
:

961 
	`sqlôe3PagîUƒef
(
pDbPage
);

962 
	}
}

971 
	$±rm≠Gë
(
BtSh¨ed
 *
pBt
, 
Pgno
 
key
, 
u8
 *
pETy≥
, Pgnÿ*
pPgno
){

972 
DbPage
 *
pDbPage
;

973 
iPåm≠
;

974 
u8
 *
pPåm≠
;

975 
off£t
;

976 
rc
;

978 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

980 
iPåm≠
 = 
	`PTRMAP_PAGENO
(
pBt
, 
key
);

981 
rc
 = 
	`sqlôe3PagîGë
(
pBt
->
pPagî
, 
iPåm≠
, &
pDbPage
, 0);

982 if–
rc
!=0 ){

983  
rc
;

985 
pPåm≠
 = (
u8
 *)
	`sqlôe3PagîGëD©a
(
pDbPage
);

987 
off£t
 = 
	`PTRMAP_PTROFFSET
(
iPåm≠
, 
key
);

988 if–
off£t
<0 ){

989 
	`sqlôe3PagîUƒef
(
pDbPage
);

990  
SQLITE_CORRUPT_BKPT
;

992 
	`as£π
–
off£t
 <()
pBt
->
ußbÀSize
-5 );

993 
	`as£π
–
pETy≥
!=0 );

994 *
pETy≥
 = 
pPåm≠
[
off£t
];

995 if–
pPgno
 ) *pPgnÿ
	`gë4byã
(&
pPåm≠
[
off£t
+1]);

997 
	`sqlôe3PagîUƒef
(
pDbPage
);

998 if–*
pETy≥
<1 || *pETy≥>5 )  
SQLITE_CORRUPT_BKPT
;

999  
SQLITE_OK
;

1000 
	}
}

1003 
	#±rm≠Put
(
w
,
x
,
y
,
z
,
rc
)

	)

1004 
	#±rm≠Gë
(
w
,
x
,
y
,
z
Ë
SQLITE_OK


	)

1005 
	#±rm≠PutOvÊPå
(
x
, 
y
, 
rc
)

	)

1018 
	#födCñl
(
P
,
I
) \

1019 ((
P
)->
aD©a
 + ((P)->
maskPage
 & 
	`gë2byãAlig√d
(&(P)->
aCñlIdx
[2*(
I
)])))

	)

1020 
	#födCñlPa°På
(
P
,
I
) \

1021 ((
P
)->
aD©aOf°
 + ((P)->
maskPage
 & 
	`gë2byãAlig√d
(&(P)->
aCñlIdx
[2*(
I
)])))

	)

1030 
SQLITE_NOINLINE
 
	$båìP¨£CñlAdju°SizeF‹OvîÊow
(

1031 
MemPage
 *
pPage
,

1032 
u8
 *
pCñl
,

1033 
CñlInfo
 *
pInfo


1044 
möLoˇl
;

1045 
maxLoˇl
;

1046 
suΩlus
;

1048 
möLoˇl
 = 
pPage
->minLocal;

1049 
maxLoˇl
 = 
pPage
->maxLocal;

1050 
suΩlus
 = 
möLoˇl
 + (
pInfo
->
nPaylﬂd
 - möLoˇl)%(
pPage
->
pBt
->
ußbÀSize
-4);

1051 
	`ã°ˇ£
–
suΩlus
==
maxLoˇl
 );

1052 
	`ã°ˇ£
–
suΩlus
==
maxLoˇl
+1 );

1053 if–
suΩlus
 <
maxLoˇl
 ){

1054 
pInfo
->
nLoˇl
 = (
u16
)
suΩlus
;

1056 
pInfo
->
nLoˇl
 = (
u16
)
möLoˇl
;

1058 
pInfo
->
nSize
 = (
u16
)(&pInfo->
pPaylﬂd
[pInfo->
nLoˇl
] - 
pCñl
) + 4;

1059 
	}
}

1075 
	$båìP¨£CñlPåNoPaylﬂd
(

1076 
MemPage
 *
pPage
,

1077 
u8
 *
pCñl
,

1078 
CñlInfo
 *
pInfo


1080 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pPage
->
pBt
->
muãx
) );

1081 
	`as£π
–
pPage
->
Àaf
==0 );

1082 
	`as£π
–
pPage
->
chûdPåSize
==4 );

1083 #i‚de‡
SQLITE_DEBUG


1084 
	`UNUSED_PARAMETER
(
pPage
);

1086 
pInfo
->
nSize
 = 4 + 
	`gëV¨öt
(&
pCñl
[4], (
u64
*)&pInfo->
nKey
);

1087 
pInfo
->
nPaylﬂd
 = 0;

1088 
pInfo
->
nLoˇl
 = 0;

1089 
pInfo
->
pPaylﬂd
 = 0;

1091 
	}
}

1092 
	$båìP¨£CñlPå
(

1093 
MemPage
 *
pPage
,

1094 
u8
 *
pCñl
,

1095 
CñlInfo
 *
pInfo


1097 
u8
 *
pIãr
;

1098 
u32
 
nPaylﬂd
;

1099 
u64
 
iKey
;

1101 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pPage
->
pBt
->
muãx
) );

1102 
	`as£π
–
pPage
->
Àaf
==0 ||ÖPage->leaf==1 );

1103 
	`as£π
–
pPage
->
ötKeyLóf
 );

1104 
	`as£π
–
pPage
->
chûdPåSize
==0 );

1105 
pIãr
 = 
pCñl
;

1113 
nPaylﬂd
 = *
pIãr
;

1114 if–
nPaylﬂd
>=0x80 ){

1115 
u8
 *
pEnd
 = &
pIãr
[8];

1116 
nPaylﬂd
 &= 0x7f;

1118 
nPaylﬂd
 = (nPaylﬂd<<7Ë| (*++
pIãr
 & 0x7f);

1119 } (*
pIãr
)>=0x80 &&ÖIãr<
pEnd
 );

1121 
pIãr
++;

1129 
iKey
 = *
pIãr
;

1130 if–
iKey
>=0x80 ){

1131 
u8
 *
pEnd
 = &
pIãr
[7];

1132 
iKey
 &= 0x7f;

1134 
iKey
 = (iKey<<7Ë| (*++
pIãr
 & 0x7f);

1135 if–(*
pIãr
)<0x80 ) ;

1136 if–
pIãr
>=
pEnd
 ){

1137 
iKey
 = (iKey<<8Ë| *++
pIãr
;

1142 
pIãr
++;

1144 
pInfo
->
nKey
 = *(
i64
*)&
iKey
;

1145 
pInfo
->
nPaylﬂd
 =ÇPayload;

1146 
pInfo
->
pPaylﬂd
 = 
pIãr
;

1147 
	`ã°ˇ£
–
nPaylﬂd
==
pPage
->
maxLoˇl
 );

1148 
	`ã°ˇ£
–
nPaylﬂd
==
pPage
->
maxLoˇl
+1 );

1149 if–
nPaylﬂd
<=
pPage
->
maxLoˇl
 ){

1153 
pInfo
->
nSize
 = 
nPaylﬂd
 + (
u16
)(
pIãr
 - 
pCñl
);

1154 if–
pInfo
->
nSize
<4 )ÖInfo->nSize = 4;

1155 
pInfo
->
nLoˇl
 = (
u16
)
nPaylﬂd
;

1157 
	`båìP¨£CñlAdju°SizeF‹OvîÊow
(
pPage
, 
pCñl
, 
pInfo
);

1159 
	}
}

1160 
	$båìP¨£CñlPåIndex
(

1161 
MemPage
 *
pPage
,

1162 
u8
 *
pCñl
,

1163 
CñlInfo
 *
pInfo


1165 
u8
 *
pIãr
;

1166 
u32
 
nPaylﬂd
;

1168 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pPage
->
pBt
->
muãx
) );

1169 
	`as£π
–
pPage
->
Àaf
==0 ||ÖPage->leaf==1 );

1170 
	`as£π
–
pPage
->
ötKeyLóf
==0 );

1171 
pIãr
 = 
pCñl
 + 
pPage
->
chûdPåSize
;

1172 
nPaylﬂd
 = *
pIãr
;

1173 if–
nPaylﬂd
>=0x80 ){

1174 
u8
 *
pEnd
 = &
pIãr
[8];

1175 
nPaylﬂd
 &= 0x7f;

1177 
nPaylﬂd
 = (nPaylﬂd<<7Ë| (*++
pIãr
 & 0x7f);

1178 } *(
pIãr
)>=0x80 &&ÖIãr<
pEnd
 );

1180 
pIãr
++;

1181 
pInfo
->
nKey
 = 
nPaylﬂd
;

1182 
pInfo
->
nPaylﬂd
 =ÇPayload;

1183 
pInfo
->
pPaylﬂd
 = 
pIãr
;

1184 
	`ã°ˇ£
–
nPaylﬂd
==
pPage
->
maxLoˇl
 );

1185 
	`ã°ˇ£
–
nPaylﬂd
==
pPage
->
maxLoˇl
+1 );

1186 if–
nPaylﬂd
<=
pPage
->
maxLoˇl
 ){

1190 
pInfo
->
nSize
 = 
nPaylﬂd
 + (
u16
)(
pIãr
 - 
pCñl
);

1191 if–
pInfo
->
nSize
<4 )ÖInfo->nSize = 4;

1192 
pInfo
->
nLoˇl
 = (
u16
)
nPaylﬂd
;

1194 
	`båìP¨£CñlAdju°SizeF‹OvîÊow
(
pPage
, 
pCñl
, 
pInfo
);

1196 
	}
}

1197 
	$båìP¨£Cñl
(

1198 
MemPage
 *
pPage
,

1199 
iCñl
,

1200 
CñlInfo
 *
pInfo


1202 
pPage
->
	`xP¨£Cñl
’Page, 
	`födCñl
’Page, 
iCñl
), 
pInfo
);

1203 
	}
}

1217 
u16
 
	$˚ŒSizePå
(
MemPage
 *
pPage
, 
u8
 *
pCñl
){

1218 
u8
 *
pIãr
 = 
pCñl
 + 
pPage
->
chûdPåSize
;

1219 
u8
 *
pEnd
;

1220 
u32
 
nSize
;

1222 #ifde‡
SQLITE_DEBUG


1227 
CñlInfo
 
debugöfo
;

1228 
pPage
->
	`xP¨£Cñl
’Page, 
pCñl
, &
debugöfo
);

1231 
nSize
 = *
pIãr
;

1232 if–
nSize
>=0x80 ){

1233 
pEnd
 = &
pIãr
[8];

1234 
nSize
 &= 0x7f;

1236 
nSize
 = (nSize<<7Ë| (*++
pIãr
 & 0x7f);

1237 } *(
pIãr
)>=0x80 &&ÖIãr<
pEnd
 );

1239 
pIãr
++;

1240 if–
pPage
->
ötKey
 ){

1244 
pEnd
 = &
pIãr
[9];

1245  (*
pIãr
++)&0x80 &&ÖIãr<
pEnd
 );

1247 
	`ã°ˇ£
–
nSize
==
pPage
->
maxLoˇl
 );

1248 
	`ã°ˇ£
–
nSize
==
pPage
->
maxLoˇl
+1 );

1249 if–
nSize
<=
pPage
->
maxLoˇl
 ){

1250 
nSize
 +(
u32
)(
pIãr
 - 
pCñl
);

1251 if–
nSize
<4 )ÇSize = 4;

1253 
möLoˇl
 = 
pPage
->minLocal;

1254 
nSize
 = 
möLoˇl
 + (nSizê- möLoˇlË% (
pPage
->
pBt
->
ußbÀSize
 - 4);

1255 
	`ã°ˇ£
–
nSize
==
pPage
->
maxLoˇl
 );

1256 
	`ã°ˇ£
–
nSize
==
pPage
->
maxLoˇl
+1 );

1257 if–
nSize
>
pPage
->
maxLoˇl
 ){

1258 
nSize
 = 
möLoˇl
;

1260 
nSize
 +4 + (
u16
)(
pIãr
 - 
pCñl
);

1262 
	`as£π
–
nSize
==
debugöfo
.nSizê|| 
CORRUPT_DB
 );

1263  (
u16
)
nSize
;

1264 
	}
}

1265 
u16
 
	$˚ŒSizePåNoPaylﬂd
(
MemPage
 *
pPage
, 
u8
 *
pCñl
){

1266 
u8
 *
pIãr
 = 
pCñl
 + 4;

1267 
u8
 *
pEnd
;

1269 #ifde‡
SQLITE_DEBUG


1274 
CñlInfo
 
debugöfo
;

1275 
pPage
->
	`xP¨£Cñl
’Page, 
pCñl
, &
debugöfo
);

1277 
	`UNUSED_PARAMETER
(
pPage
);

1280 
	`as£π
–
pPage
->
chûdPåSize
==4 );

1281 
pEnd
 = 
pIãr
 + 9;

1282  (*
pIãr
++)&0x80 &&ÖIãr<
pEnd
 );

1283 
	`as£π
–
debugöfo
.
nSize
==(
u16
)(
pIãr
 - 
pCñl
Ë|| 
CORRUPT_DB
 );

1284  (
u16
)(
pIãr
 - 
pCñl
);

1285 
	}
}

1288 #ifde‡
SQLITE_DEBUG


1291 
u16
 
	$˚ŒSize
(
MemPage
 *
pPage
, 
iCñl
){

1292  
pPage
->
	`xCñlSize
’Page, 
	`födCñl
’Page, 
iCñl
));

1293 
	}
}

1296 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


1302 
	$±rm≠PutOvÊPå
(
MemPage
 *
pPage
, 
u8
 *
pCñl
, *
pRC
){

1303 
CñlInfo
 
öfo
;

1304 if–*
pRC
 ) ;

1305 
	`as£π
–
pCñl
!=0 );

1306 
pPage
->
	`xP¨£Cñl
’Page, 
pCñl
, &
öfo
);

1307 if–
öfo
.
nLoˇl
<öfo.
nPaylﬂd
 ){

1308 
Pgno
 
ovÊ
 = 
	`gë4byã
(&
pCñl
[
öfo
.
nSize
-4]);

1309 
	`±rm≠Put
(
pPage
->
pBt
, 
ovÊ
, 
PTRMAP_OVERFLOW1
,ÖPage->
pgno
, 
pRC
);

1311 
	}
}

1326 
	$de‰agmítPage
(
MemPage
 *
pPage
){

1327 
i
;

1328 
pc
;

1329 
hdr
;

1330 
size
;

1331 
ußbÀSize
;

1332 
˚ŒOff£t
;

1333 
cbrk
;

1334 
nCñl
;

1335 *
d©a
;

1336 *
ãmp
;

1337 *
§c
;

1338 
iCñlFú°
;

1339 
iCñlLa°
;

1342 
	`as£π
–
	`sqlôe3PagîIswrôóbÀ
(
pPage
->
pDbPage
) );

1343 
	`as£π
–
pPage
->
pBt
!=0 );

1344 
	`as£π
–
pPage
->
pBt
->
ußbÀSize
 <
SQLITE_MAX_PAGE_SIZE
 );

1345 
	`as£π
–
pPage
->
nOvîÊow
==0 );

1346 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pPage
->
pBt
->
muãx
) );

1347 
ãmp
 = 0;

1348 
§c
 = 
d©a
 = 
pPage
->
aD©a
;

1349 
hdr
 = 
pPage
->
hdrOff£t
;

1350 
˚ŒOff£t
 = 
pPage
->cellOffset;

1351 
nCñl
 = 
pPage
->nCell;

1352 
	`as£π
–
nCñl
==
	`gë2byã
(&
d©a
[
hdr
+3]) );

1353 
ußbÀSize
 = 
pPage
->
pBt
->usableSize;

1354 
cbrk
 = 
ußbÀSize
;

1355 
iCñlFú°
 = 
˚ŒOff£t
 + 2*
nCñl
;

1356 
iCñlLa°
 = 
ußbÀSize
 - 4;

1357 
i
=0; i<
nCñl
; i++){

1358 
u8
 *
pAddr
;

1359 
pAddr
 = &
d©a
[
˚ŒOff£t
 + 
i
*2];

1360 
pc
 = 
	`gë2byã
(
pAddr
);

1361 
	`ã°ˇ£
–
pc
==
iCñlFú°
 );

1362 
	`ã°ˇ£
–
pc
==
iCñlLa°
 );

1366 if–
pc
<
iCñlFú°
 ||Öc>
iCñlLa°
 ){

1367  
SQLITE_CORRUPT_BKPT
;

1369 
	`as£π
–
pc
>=
iCñlFú°
 &&Öc<=
iCñlLa°
 );

1370 
size
 = 
pPage
->
	`xCñlSize
’Page, &
§c
[
pc
]);

1371 
cbrk
 -
size
;

1372 if–
cbrk
<
iCñlFú°
 || 
pc
+
size
>
ußbÀSize
 ){

1373  
SQLITE_CORRUPT_BKPT
;

1375 
	`as£π
–
cbrk
+
size
<=
ußbÀSize
 && cbrk>=
iCñlFú°
 );

1376 
	`ã°ˇ£
–
cbrk
+
size
==
ußbÀSize
 );

1377 
	`ã°ˇ£
–
pc
+
size
==
ußbÀSize
 );

1378 
	`put2byã
(
pAddr
, 
cbrk
);

1379 if–
ãmp
==0 ){

1380 
x
;

1381 if–
cbrk
==
pc
 ) ;

1382 
ãmp
 = 
	`sqlôe3PagîTempS∑˚
(
pPage
->
pBt
->
pPagî
);

1383 
x
 = 
	`gë2byã
(&
d©a
[
hdr
+5]);

1384 
	`mem˝y
(&
ãmp
[
x
], &
d©a
[x], (
cbrk
+
size
) - x);

1385 
§c
 = 
ãmp
;

1387 
	`mem˝y
(&
d©a
[
cbrk
], &
§c
[
pc
], 
size
);

1389 
	`as£π
–
cbrk
>=
iCñlFú°
 );

1390 
	`put2byã
(&
d©a
[
hdr
+5], 
cbrk
);

1391 
d©a
[
hdr
+1] = 0;

1392 
d©a
[
hdr
+2] = 0;

1393 
d©a
[
hdr
+7] = 0;

1394 
	`mem£t
(&
d©a
[
iCñlFú°
], 0, 
cbrk
-iCellFirst);

1395 
	`as£π
–
	`sqlôe3PagîIswrôóbÀ
(
pPage
->
pDbPage
) );

1396 if–
cbrk
-
iCñlFú°
!=
pPage
->
nFªe
 ){

1397  
SQLITE_CORRUPT_BKPT
;

1399  
SQLITE_OK
;

1400 
	}
}

1416 
u8
 *
	$∑geFödSlŸ
(
MemPage
 *
pPg
, 
nByã
, *
pRc
){

1417 c⁄° 
hdr
 = 
pPg
->
hdrOff£t
;

1418 
u8
 * c⁄° 
aD©a
 = 
pPg
->aData;

1419 
iAddr
 = 
hdr
 + 1;

1420 
pc
 = 
	`gë2byã
(&
aD©a
[
iAddr
]);

1421 
x
;

1422 
ußbÀSize
 = 
pPg
->
pBt
->usableSize;

1424 
	`as£π
–
pc
>0 );

1426 
size
;

1429 if–
pc
>
ußbÀSize
-4 ||Öc<
iAddr
+4 ){

1430 *
pRc
 = 
SQLITE_CORRUPT_BKPT
;

1436 
size
 = 
	`gë2byã
(&
aD©a
[
pc
+2]);

1437 if–(
x
 = 
size
 - 
nByã
)>=0 ){

1438 
	`ã°ˇ£
–
x
==4 );

1439 
	`ã°ˇ£
–
x
==3 );

1440 if–
pc
 < 
pPg
->
˚ŒOff£t
+2*pPg->
nCñl
 || 
size
+p¯> 
ußbÀSize
 ){

1441 *
pRc
 = 
SQLITE_CORRUPT_BKPT
;

1443 }if–
x
<4 ){

1446 if–
aD©a
[
hdr
+7]>57 )  0;

1450 
	`mem˝y
(&
aD©a
[
iAddr
], &aD©a[
pc
], 2);

1451 
aD©a
[
hdr
+7] +(
u8
)
x
;

1455 
	`put2byã
(&
aD©a
[
pc
+2], 
x
);

1457  &
aD©a
[
pc
 + 
x
];

1459 
iAddr
 = 
pc
;

1460 
pc
 = 
	`gë2byã
(&
aD©a
[pc]);

1461 } 
pc
 );

1464 
	}
}

1479 
	$ÆloˇãS∑˚
(
MemPage
 *
pPage
, 
nByã
, *
pIdx
){

1480 c⁄° 
hdr
 = 
pPage
->
hdrOff£t
;

1481 
u8
 * c⁄° 
d©a
 = 
pPage
->
aD©a
;

1482 
t›
;

1483 
rc
 = 
SQLITE_OK
;

1484 
g≠
;

1486 
	`as£π
–
	`sqlôe3PagîIswrôóbÀ
(
pPage
->
pDbPage
) );

1487 
	`as£π
–
pPage
->
pBt
 );

1488 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pPage
->
pBt
->
muãx
) );

1489 
	`as£π
–
nByã
>=0 );

1490 
	`as£π
–
pPage
->
nFªe
>=
nByã
 );

1491 
	`as£π
–
pPage
->
nOvîÊow
==0 );

1492 
	`as£π
–
nByã
 < ()(
pPage
->
pBt
->
ußbÀSize
-8) );

1494 
	`as£π
–
pPage
->
˚ŒOff£t
 =
hdr
 + 12 - 4*pPage->
Àaf
 );

1495 
g≠
 = 
pPage
->
˚ŒOff£t
 + 2*pPage->
nCñl
;

1496 
	`as£π
–
g≠
<=65536 );

1502 
t›
 = 
	`gë2byã
(&
d©a
[
hdr
+5]);

1503 
	`as£π
–
t›
<=()
pPage
->
pBt
->
ußbÀSize
 );

1504 if–
g≠
>
t›
 ){

1505 if–
t›
==0 && 
pPage
->
pBt
->
ußbÀSize
==65536 ){

1506 
t›
 = 65536;

1508  
SQLITE_CORRUPT_BKPT
;

1516 
	`ã°ˇ£
–
g≠
+2==
t›
 );

1517 
	`ã°ˇ£
–
g≠
+1==
t›
 );

1518 
	`ã°ˇ£
–
g≠
==
t›
 );

1519 if–(
d©a
[
hdr
+2] || d©a[hdr+1]Ë&& 
g≠
+2<=
t›
 ){

1520 
u8
 *
pS∑˚
 = 
	`∑geFödSlŸ
(
pPage
, 
nByã
, &
rc
);

1521 if–
pS∑˚
 ){

1522 
	`as£π
–
pS∑˚
>=
d©a
 && (pSpace - data)<65536 );

1523 *
pIdx
 = ()(
pS∑˚
 - 
d©a
);

1524  
SQLITE_OK
;

1525 }if–
rc
 ){

1526  
rc
;

1533 
	`ã°ˇ£
–
g≠
+2+
nByã
==
t›
 );

1534 if–
g≠
+2+
nByã
>
t›
 ){

1535 
	`as£π
–
pPage
->
nCñl
>0 || 
CORRUPT_DB
 );

1536 
rc
 = 
	`de‰agmítPage
(
pPage
);

1537 if–
rc
 ) Ñc;

1538 
t›
 = 
	`gë2byãNŸZîo
(&
d©a
[
hdr
+5]);

1539 
	`as£π
–
g≠
+
nByã
<=
t›
 );

1549 
t›
 -
nByã
;

1550 
	`put2byã
(&
d©a
[
hdr
+5], 
t›
);

1551 
	`as£π
–
t›
+
nByã
 <()
pPage
->
pBt
->
ußbÀSize
 );

1552 *
pIdx
 = 
t›
;

1553  
SQLITE_OK
;

1554 
	}
}

1569 
	$‰ìS∑˚
(
MemPage
 *
pPage
, 
u16
 
iSèπ
, u16 
iSize
){

1570 
u16
 
iPå
;

1571 
u16
 
iFªeBlk
;

1572 
u8
 
hdr
;

1573 
u8
 
nFøg
 = 0;

1574 
u16
 
iOrigSize
 = 
iSize
;

1575 
u32
 
iLa°
 = 
pPage
->
pBt
->
ußbÀSize
-4;

1576 
u32
 
iEnd
 = 
iSèπ
 + 
iSize
;

1577 *
d©a
 = 
pPage
->
aD©a
;

1579 
	`as£π
–
pPage
->
pBt
!=0 );

1580 
	`as£π
–
	`sqlôe3PagîIswrôóbÀ
(
pPage
->
pDbPage
) );

1581 
	`as£π
–
CORRUPT_DB
 || 
iSèπ
>=
pPage
->
hdrOff£t
+6+pPage->
chûdPåSize
 );

1582 
	`as£π
–
CORRUPT_DB
 || 
iEnd
 <
pPage
->
pBt
->
ußbÀSize
 );

1583 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pPage
->
pBt
->
muãx
) );

1584 
	`as£π
–
iSize
>=4 );

1585 
	`as£π
–
iSèπ
<=
iLa°
 );

1589 if–
pPage
->
pBt
->
btsFœgs
 & 
BTS_SECURE_DELETE
 ){

1590 
	`mem£t
(&
d©a
[
iSèπ
], 0, 
iSize
);

1596 
hdr
 = 
pPage
->
hdrOff£t
;

1597 
iPå
 = 
hdr
 + 1;

1598 if–
d©a
[
iPå
+1]==0 && data[iPtr]==0 ){

1599 
iFªeBlk
 = 0;

1601  (
iFªeBlk
 = 
	`gë2byã
(&
d©a
[
iPå
]))>0 && iFªeBlk<
iSèπ
 ){

1602 if–
iFªeBlk
<
iPå
+4 )  
SQLITE_CORRUPT_BKPT
;

1603 
iPå
 = 
iFªeBlk
;

1605 if–
iFªeBlk
>
iLa°
 )  
SQLITE_CORRUPT_BKPT
;

1606 
	`as£π
–
iFªeBlk
>
iPå
 || iFreeBlk==0 );

1614 if–
iFªeBlk
 && 
iEnd
+3>=iFreeBlk ){

1615 
nFøg
 = 
iFªeBlk
 - 
iEnd
;

1616 if–
iEnd
>
iFªeBlk
 )  
SQLITE_CORRUPT_BKPT
;

1617 
iEnd
 = 
iFªeBlk
 + 
	`gë2byã
(&
d©a
[iFreeBlk+2]);

1618 if–
iEnd
 > 
pPage
->
pBt
->
ußbÀSize
 )  
SQLITE_CORRUPT_BKPT
;

1619 
iSize
 = 
iEnd
 - 
iSèπ
;

1620 
iFªeBlk
 = 
	`gë2byã
(&
d©a
[iFreeBlk]);

1627 if–
iPå
>
hdr
+1 ){

1628 
iPåEnd
 = 
iPå
 + 
	`gë2byã
(&
d©a
[iPtr+2]);

1629 if–
iPåEnd
+3>=
iSèπ
 ){

1630 if–
iPåEnd
>
iSèπ
 )  
SQLITE_CORRUPT_BKPT
;

1631 
nFøg
 +
iSèπ
 - 
iPåEnd
;

1632 
iSize
 = 
iEnd
 - 
iPå
;

1633 
iSèπ
 = 
iPå
;

1636 if–
nFøg
>
d©a
[
hdr
+7] )  
SQLITE_CORRUPT_BKPT
;

1637 
d©a
[
hdr
+7] -
nFøg
;

1639 if–
iSèπ
==
	`gë2byã
(&
d©a
[
hdr
+5]) ){

1643 if–
iPå
!=
hdr
+1 )  
SQLITE_CORRUPT_BKPT
;

1644 
	`put2byã
(&
d©a
[
hdr
+1], 
iFªeBlk
);

1645 
	`put2byã
(&
d©a
[
hdr
+5], 
iEnd
);

1648 
	`put2byã
(&
d©a
[
iPå
], 
iSèπ
);

1649 
	`put2byã
(&
d©a
[
iSèπ
], 
iFªeBlk
);

1650 
	`put2byã
(&
d©a
[
iSèπ
+2], 
iSize
);

1652 
pPage
->
nFªe
 +
iOrigSize
;

1653  
SQLITE_OK
;

1654 
	}
}

1668 
	$decodeFœgs
(
MemPage
 *
pPage
, 
ÊagByã
){

1669 
BtSh¨ed
 *
pBt
;

1671 
	`as£π
–
pPage
->
hdrOff£t
==’Page->
pgno
==1 ? 100 : 0) );

1672 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pPage
->
pBt
->
muãx
) );

1673 
pPage
->
Àaf
 = (
u8
)(
ÊagByã
>>3); 
	`as£π
–
PTF_LEAF
 == 1<<3 );

1674 
ÊagByã
 &~
PTF_LEAF
;

1675 
pPage
->
chûdPåSize
 = 4-4*pPage->
Àaf
;

1676 
pPage
->
xCñlSize
 = 
˚ŒSizePå
;

1677 
pBt
 = 
pPage
->pBt;

1678 if–
ÊagByã
==(
PTF_LEAFDATA
 | 
PTF_INTKEY
) ){

1681 
	`as£π
–(
PTF_LEAFDATA
|
PTF_INTKEY
)==5 );

1684 
	`as£π
–(
PTF_LEAFDATA
|
PTF_INTKEY
|
PTF_LEAF
)==13 );

1685 
pPage
->
ötKey
 = 1;

1686 if–
pPage
->
Àaf
 ){

1687 
pPage
->
ötKeyLóf
 = 1;

1688 
pPage
->
xP¨£Cñl
 = 
båìP¨£CñlPå
;

1690 
pPage
->
ötKeyLóf
 = 0;

1691 
pPage
->
xCñlSize
 = 
˚ŒSizePåNoPaylﬂd
;

1692 
pPage
->
xP¨£Cñl
 = 
båìP¨£CñlPåNoPaylﬂd
;

1694 
pPage
->
maxLoˇl
 = 
pBt
->
maxLóf
;

1695 
pPage
->
möLoˇl
 = 
pBt
->
möLóf
;

1696 }if–
ÊagByã
==
PTF_ZERODATA
 ){

1699 
	`as£π
–(
PTF_ZERODATA
)==2 );

1702 
	`as£π
–(
PTF_ZERODATA
|
PTF_LEAF
)==10 );

1703 
pPage
->
ötKey
 = 0;

1704 
pPage
->
ötKeyLóf
 = 0;

1705 
pPage
->
xP¨£Cñl
 = 
båìP¨£CñlPåIndex
;

1706 
pPage
->
maxLoˇl
 = 
pBt
->maxLocal;

1707 
pPage
->
möLoˇl
 = 
pBt
->minLocal;

1711  
SQLITE_CORRUPT_BKPT
;

1713 
pPage
->
max1byãPaylﬂd
 = 
pBt
->max1bytePayload;

1714  
SQLITE_OK
;

1715 
	}
}

1726 
	$båìInôPage
(
MemPage
 *
pPage
){

1728 
	`as£π
–
pPage
->
pBt
!=0 );

1729 
	`as£π
–
pPage
->
pBt
->
db
!=0 );

1730 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pPage
->
pBt
->
muãx
) );

1731 
	`as£π
–
pPage
->
pgno
==
	`sqlôe3PagîPagíumbî
’Page->
pDbPage
) );

1732 
	`as£π
–
pPage
 =
	`sqlôe3PagîGëExåa
’Page->
pDbPage
) );

1733 
	`as£π
–
pPage
->
aD©a
 =
	`sqlôe3PagîGëD©a
’Page->
pDbPage
) );

1735 if–!
pPage
->
isInô
 ){

1736 
u16
 
pc
;

1737 
u8
 
hdr
;

1738 
u8
 *
d©a
;

1739 
BtSh¨ed
 *
pBt
;

1740 
ußbÀSize
;

1741 
u16
 
˚ŒOff£t
;

1742 
nFªe
;

1743 
t›
;

1744 
iCñlFú°
;

1745 
iCñlLa°
;

1747 
pBt
 = 
pPage
->pBt;

1749 
hdr
 = 
pPage
->
hdrOff£t
;

1750 
d©a
 = 
pPage
->
aD©a
;

1753 if–
	`decodeFœgs
(
pPage
, 
d©a
[
hdr
]ËË 
SQLITE_CORRUPT_BKPT
;

1754 
	`as£π
–
pBt
->
∑geSize
>=512 &&ÖBt->pageSize<=65536 );

1755 
pPage
->
maskPage
 = (
u16
)(
pBt
->
∑geSize
 - 1);

1756 
pPage
->
nOvîÊow
 = 0;

1757 
ußbÀSize
 = 
pBt
->usableSize;

1758 
pPage
->
˚ŒOff£t
 = cñlOff£à
hdr
 + 8 +ÖPage->
chûdPåSize
;

1759 
pPage
->
aD©aEnd
 = &
d©a
[
ußbÀSize
];

1760 
pPage
->
aCñlIdx
 = &
d©a
[
˚ŒOff£t
];

1761 
pPage
->
aD©aOf°
 = &
d©a
[pPage->
chûdPåSize
];

1765 
t›
 = 
	`gë2byãNŸZîo
(&
d©a
[
hdr
+5]);

1768 
pPage
->
nCñl
 = 
	`gë2byã
(&
d©a
[
hdr
+3]);

1769 if–
pPage
->
nCñl
>
	`MX_CELL
(
pBt
) ){

1771  
SQLITE_CORRUPT_BKPT
;

1773 
	`ã°ˇ£
–
pPage
->
nCñl
==
	`MX_CELL
(
pBt
) );

1778 
	`as£π
–
pPage
->
nCñl
>0 || 
t›
==
ußbÀSize
 || 
CORRUPT_DB
 );

1787 
iCñlFú°
 = 
˚ŒOff£t
 + 2*
pPage
->
nCñl
;

1788 
iCñlLa°
 = 
ußbÀSize
 - 4;

1789 if–
pBt
->
db
->
Êags
 & 
SQLITE_CñlSizeCk
 ){

1790 
i
;

1791 
sz
;

1793 if–!
pPage
->
Àaf
 ) 
iCñlLa°
--;

1794 
i
=0; i<
pPage
->
nCñl
; i++){

1795 
pc
 = 
	`gë2byãAlig√d
(&
d©a
[
˚ŒOff£t
+
i
*2]);

1796 
	`ã°ˇ£
–
pc
==
iCñlFú°
 );

1797 
	`ã°ˇ£
–
pc
==
iCñlLa°
 );

1798 if–
pc
<
iCñlFú°
 ||Öc>
iCñlLa°
 ){

1799  
SQLITE_CORRUPT_BKPT
;

1801 
sz
 = 
pPage
->
	`xCñlSize
’Page, &
d©a
[
pc
]);

1802 
	`ã°ˇ£
–
pc
+
sz
==
ußbÀSize
 );

1803 if–
pc
+
sz
>
ußbÀSize
 ){

1804  
SQLITE_CORRUPT_BKPT
;

1807 if–!
pPage
->
Àaf
 ) 
iCñlLa°
++;

1814 
pc
 = 
	`gë2byã
(&
d©a
[
hdr
+1]);

1815 
nFªe
 = 
d©a
[
hdr
+7] + 
t›
;

1816  
pc
>0 ){

1817 
u16
 
√xt
, 
size
;

1818 if–
pc
<
iCñlFú°
 ||Öc>
iCñlLa°
 ){

1824  
SQLITE_CORRUPT_BKPT
;

1826 
√xt
 = 
	`gë2byã
(&
d©a
[
pc
]);

1827 
size
 = 
	`gë2byã
(&
d©a
[
pc
+2]);

1828 if–(
√xt
>0 &&Çext<=
pc
+
size
+3Ë||Öc+size>
ußbÀSize
 ){

1831  
SQLITE_CORRUPT_BKPT
;

1833 
nFªe
 =ÇFªê+ 
size
;

1834 
pc
 = 
√xt
;

1844 if–
nFªe
>
ußbÀSize
 ){

1845  
SQLITE_CORRUPT_BKPT
;

1847 
pPage
->
nFªe
 = (
u16
)“Fªê- 
iCñlFú°
);

1848 
pPage
->
isInô
 = 1;

1850  
SQLITE_OK
;

1851 
	}
}

1857 
	$zîoPage
(
MemPage
 *
pPage
, 
Êags
){

1858 *
d©a
 = 
pPage
->
aD©a
;

1859 
BtSh¨ed
 *
pBt
 = 
pPage
->pBt;

1860 
u8
 
hdr
 = 
pPage
->
hdrOff£t
;

1861 
u16
 
fú°
;

1863 
	`as£π
–
	`sqlôe3PagîPagíumbî
(
pPage
->
pDbPage
)=ıPage->
pgno
 );

1864 
	`as£π
–
	`sqlôe3PagîGëExåa
(
pPage
->
pDbPage
) == (*)pPage );

1865 
	`as£π
–
	`sqlôe3PagîGëD©a
(
pPage
->
pDbPage
Ë=
d©a
 );

1866 
	`as£π
–
	`sqlôe3PagîIswrôóbÀ
(
pPage
->
pDbPage
) );

1867 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

1868 if–
pBt
->
btsFœgs
 & 
BTS_SECURE_DELETE
 ){

1869 
	`mem£t
(&
d©a
[
hdr
], 0, 
pBt
->
ußbÀSize
 - hdr);

1871 
d©a
[
hdr
] = ()
Êags
;

1872 
fú°
 = 
hdr
 + ((
Êags
&
PTF_LEAF
)==0 ? 12 : 8);

1873 
	`mem£t
(&
d©a
[
hdr
+1], 0, 4);

1874 
d©a
[
hdr
+7] = 0;

1875 
	`put2byã
(&
d©a
[
hdr
+5], 
pBt
->
ußbÀSize
);

1876 
pPage
->
nFªe
 = (
u16
)(
pBt
->
ußbÀSize
 - 
fú°
);

1877 
	`decodeFœgs
(
pPage
, 
Êags
);

1878 
pPage
->
˚ŒOff£t
 = 
fú°
;

1879 
pPage
->
aD©aEnd
 = &
d©a
[
pBt
->
ußbÀSize
];

1880 
pPage
->
aCñlIdx
 = &
d©a
[
fú°
];

1881 
pPage
->
aD©aOf°
 = &
d©a
[pPage->
chûdPåSize
];

1882 
pPage
->
nOvîÊow
 = 0;

1883 
	`as£π
–
pBt
->
∑geSize
>=512 &&ÖBt->pageSize<=65536 );

1884 
pPage
->
maskPage
 = (
u16
)(
pBt
->
∑geSize
 - 1);

1885 
pPage
->
nCñl
 = 0;

1886 
pPage
->
isInô
 = 1;

1887 
	}
}

1894 
MemPage
 *
	$båìPageFromDbPage
(
DbPage
 *
pDbPage
, 
Pgno
 
pgno
, 
BtSh¨ed
 *
pBt
){

1895 
MemPage
 *
pPage
 = (MemPage*)
	`sqlôe3PagîGëExåa
(
pDbPage
);

1896 if–
pgno
!=
pPage
->pgno ){

1897 
pPage
->
aD©a
 = 
	`sqlôe3PagîGëD©a
(
pDbPage
);

1898 
pPage
->
pDbPage
 =ÖDbPage;

1899 
pPage
->
pBt
 =ÖBt;

1900 
pPage
->
pgno
 =Ögno;

1901 
pPage
->
hdrOff£t
 = 
pgno
==1 ? 100 : 0;

1903 
	`as£π
–
pPage
->
aD©a
==
	`sqlôe3PagîGëD©a
(
pDbPage
) );

1904  
pPage
;

1905 
	}
}

1918 
	$båìGëPage
(

1919 
BtSh¨ed
 *
pBt
,

1920 
Pgno
 
pgno
,

1921 
MemPage
 **
µPage
,

1922 
Êags


1924 
rc
;

1925 
DbPage
 *
pDbPage
;

1927 
	`as£π
–
Êags
==0 || fœgs==
PAGER_GET_NOCONTENT
 || fœgs==
PAGER_GET_READONLY
 );

1928 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

1929 
rc
 = 
	`sqlôe3PagîGë
(
pBt
->
pPagî
, 
pgno
, (
DbPage
**)&
pDbPage
, 
Êags
);

1930 if–
rc
 ) Ñc;

1931 *
µPage
 = 
	`båìPageFromDbPage
(
pDbPage
, 
pgno
, 
pBt
);

1932  
SQLITE_OK
;

1933 
	}
}

1940 
MemPage
 *
	$båìPageLookup
(
BtSh¨ed
 *
pBt
, 
Pgno
 
pgno
){

1941 
DbPage
 *
pDbPage
;

1942 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

1943 
pDbPage
 = 
	`sqlôe3PagîLookup
(
pBt
->
pPagî
, 
pgno
);

1944 if–
pDbPage
 ){

1945  
	`båìPageFromDbPage
(
pDbPage
, 
pgno
, 
pBt
);

1948 
	}
}

1954 
Pgno
 
	$båìPagecou¡
(
BtSh¨ed
 *
pBt
){

1955  
pBt
->
nPage
;

1956 
	}
}

1957 
u32
 
	$sqlôe3BåìLa°Page
(
Båì
 *
p
){

1958 
	`as£π
–
	`sqlôe3BåìHﬁdsMuãx
(
p
) );

1959 
	`as£π
–((
p
->
pBt
->
nPage
)&0x8000000)==0 );

1960  
	`båìPagecou¡
(
p
->
pBt
);

1961 
	}
}

1976 
	$gëAndInôPage
(

1977 
BtSh¨ed
 *
pBt
,

1978 
Pgno
 
pgno
,

1979 
MemPage
 **
µPage
,

1980 
BtCurs‹
 *
pCur
,

1981 
bRódO∆y


1983 
rc
;

1984 
DbPage
 *
pDbPage
;

1985 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

1986 
	`as£π
–
pCur
==0 || 
µPage
==&pCur->
≠Page
[pCur->
iPage
] );

1987 
	`as£π
–
pCur
==0 || 
bRódO∆y
=ıCur->
curPagîFœgs
 );

1988 
	`as£π
–
pCur
==0 ||ÖCur->
iPage
>0 );

1990 if–
pgno
>
	`båìPagecou¡
(
pBt
) ){

1991 
rc
 = 
SQLITE_CORRUPT_BKPT
;

1992 
gëAndInôPage_îr‹
;

1994 
rc
 = 
	`sqlôe3PagîGë
(
pBt
->
pPagî
, 
pgno
, (
DbPage
**)&
pDbPage
, 
bRódO∆y
);

1995 if–
rc
 ){

1996 
gëAndInôPage_îr‹
;

1998 *
µPage
 = (
MemPage
*)
	`sqlôe3PagîGëExåa
(
pDbPage
);

1999 if–(*
µPage
)->
isInô
==0 ){

2000 
	`båìPageFromDbPage
(
pDbPage
, 
pgno
, 
pBt
);

2001 
rc
 = 
	`båìInôPage
(*
µPage
);

2002 if–
rc
!=
SQLITE_OK
 ){

2003 
	`ªÀa£Page
(*
µPage
);

2004 
gëAndInôPage_îr‹
;

2007 
	`as£π
–(*
µPage
)->
pgno
==pgno );

2008 
	`as£π
–(*
µPage
)->
aD©a
==
	`sqlôe3PagîGëD©a
(
pDbPage
) );

2012 if–
pCur
 && ((*
µPage
)->
nCñl
<1 || (*µPage)->
ötKey
!ıCur->
curI¡Key
) ){

2013 
rc
 = 
SQLITE_CORRUPT_BKPT
;

2014 
	`ªÀa£Page
(*
µPage
);

2015 
gëAndInôPage_îr‹
;

2017  
SQLITE_OK
;

2019 
gëAndInôPage_îr‹
:

2020 if–
pCur
 )ÖCur->
iPage
--;

2021 
	`ã°ˇ£
–
pgno
==0 );

2022 
	`as£π
–
pgno
!=0 || 
rc
==
SQLITE_CORRUPT
 );

2023  
rc
;

2024 
	}
}

2030 
	$ªÀa£PageNŸNuŒ
(
MemPage
 *
pPage
){

2031 
	`as£π
–
pPage
->
aD©a
 );

2032 
	`as£π
–
pPage
->
pBt
 );

2033 
	`as£π
–
pPage
->
pDbPage
!=0 );

2034 
	`as£π
–
	`sqlôe3PagîGëExåa
(
pPage
->
pDbPage
) == (*)pPage );

2035 
	`as£π
–
	`sqlôe3PagîGëD©a
(
pPage
->
pDbPage
)=ıPage->
aD©a
 );

2036 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pPage
->
pBt
->
muãx
) );

2037 
	`sqlôe3PagîUƒefNŸNuŒ
(
pPage
->
pDbPage
);

2038 
	}
}

2039 
	$ªÀa£Page
(
MemPage
 *
pPage
){

2040 if–
pPage
 ) 
	`ªÀa£PageNŸNuŒ
(pPage);

2041 
	}
}

2052 
	$båìGëUnu£dPage
(

2053 
BtSh¨ed
 *
pBt
,

2054 
Pgno
 
pgno
,

2055 
MemPage
 **
µPage
,

2056 
Êags


2058 
rc
 = 
	`båìGëPage
(
pBt
, 
pgno
, 
µPage
, 
Êags
);

2059 if–
rc
==
SQLITE_OK
 ){

2060 if–
	`sqlôe3PagîPageRefcou¡
((*
µPage
)->
pDbPage
)>1 ){

2061 
	`ªÀa£Page
(*
µPage
);

2062 *
µPage
 = 0;

2063  
SQLITE_CORRUPT_BKPT
;

2065 (*
µPage
)->
isInô
 = 0;

2067 *
µPage
 = 0;

2069  
rc
;

2070 
	}
}

2081 
	$∑geReöô
(
DbPage
 *
pD©a
){

2082 
MemPage
 *
pPage
;

2083 
pPage
 = (
MemPage
 *)
	`sqlôe3PagîGëExåa
(
pD©a
);

2084 
	`as£π
–
	`sqlôe3PagîPageRefcou¡
(
pD©a
)>0 );

2085 if–
pPage
->
isInô
 ){

2086 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pPage
->
pBt
->
muãx
) );

2087 
pPage
->
isInô
 = 0;

2088 if–
	`sqlôe3PagîPageRefcou¡
(
pD©a
)>1 ){

2095 
	`båìInôPage
(
pPage
);

2098 
	}
}

2103 
	$båìInvokeBusyH™dÀr
(*
pArg
){

2104 
BtSh¨ed
 *
pBt
 = (BtSh¨ed*)
pArg
;

2105 
	`as£π
–
pBt
->
db
 );

2106 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
db
->
muãx
) );

2107  
	`sqlôe3InvokeBusyH™dÀr
(&
pBt
->
db
->
busyH™dÀr
);

2108 
	}
}

2131 
	$sqlôe3BåìO≥n
(

2132 
sqlôe3_vfs
 *
pVfs
,

2133 c⁄° *
zFûíame
,

2134 
sqlôe3
 *
db
,

2135 
Båì
 **
µBåì
,

2136 
Êags
,

2137 
vfsFœgs


2139 
BtSh¨ed
 *
pBt
 = 0;

2140 
Båì
 *
p
;

2141 
sqlôe3_muãx
 *
muãxO≥n
 = 0;

2142 
rc
 = 
SQLITE_OK
;

2143 
u8
 
nRe£rve
;

2144 
zDbHódî
[100];

2147 c⁄° 
isTempDb
 = 
zFûíame
==0 || zFilename[0]==0;

2152 #ifde‡
SQLITE_OMIT_MEMORYDB


2153 c⁄° 
isMemdb
 = 0;

2155 c⁄° 
isMemdb
 = (
zFûíame
 && 
	`°rcmp
(zFilename, ":memory:")==0)

2156 || (
isTempDb
 && 
	`sqlôe3TempInMem‹y
(
db
))

2157 || (
vfsFœgs
 & 
SQLITE_OPEN_MEMORY
)!=0;

2160 
	`as£π
–
db
!=0 );

2161 
	`as£π
–
pVfs
!=0 );

2162 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

2163 
	`as£π
–(
Êags
&0xff)==flags );

2166 
	`as£π
–(
Êags
 & 
BTREE_UNORDERED
)==0 || (Êag†& 
BTREE_SINGLE
)!=0 );

2169 
	`as£π
–(
Êags
 & 
BTREE_SINGLE
)==0 || 
isTempDb
 );

2171 if–
isMemdb
 ){

2172 
Êags
 |
BTREE_MEMORY
;

2174 if–(
vfsFœgs
 & 
SQLITE_OPEN_MAIN_DB
)!=0 && (
isMemdb
 || 
isTempDb
) ){

2175 
vfsFœgs
 = (vfsFœg†& ~
SQLITE_OPEN_MAIN_DB
Ë| 
SQLITE_OPEN_TEMP_DB
;

2177 
p
 = 
	`sqlôe3MÆlocZîo
((
Båì
));

2178 if–!
p
 ){

2179  
SQLITE_NOMEM_BKPT
;

2181 
p
->
öTøns
 = 
TRANS_NONE
;

2182 
p
->
db
 = db;

2183 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


2184 
p
->
lock
.
pBåì
 =Ö;

2185 
p
->
lock
.
iTabÀ
 = 1;

2188 #i‡!
	`deföed
(
SQLITE_OMIT_SHARED_CACHE
Ë&& !deföed(
SQLITE_OMIT_DISKIO
)

2193 if–
isTempDb
==0 && (
isMemdb
==0 || (
vfsFœgs
&
SQLITE_OPEN_URI
)!=0) ){

2194 if–
vfsFœgs
 & 
SQLITE_OPEN_SHAREDCACHE
 ){

2195 
nFûíame
 = 
	`sqlôe3SåÀn30
(
zFûíame
)+1;

2196 
nFuŒP©h«me
 = 
pVfs
->
mxP©h«me
+1;

2197 *
zFuŒP©h«me
 = 
	`sqlôe3MÆloc
(
	`MAX
(
nFuŒP©h«me
,
nFûíame
));

2198 
	`MUTEX_LOGIC
–
sqlôe3_muãx
 *
muãxSh¨ed
; )

2200 
p
->
sh¨abÀ
 = 1;

2201 if–!
zFuŒP©h«me
 ){

2202 
	`sqlôe3_‰ì
(
p
);

2203  
SQLITE_NOMEM_BKPT
;

2205 if–
isMemdb
 ){

2206 
	`mem˝y
(
zFuŒP©h«me
, 
zFûíame
, 
nFûíame
);

2208 
rc
 = 
	`sqlôe3OsFuŒP©h«me
(
pVfs
, 
zFûíame
,

2209 
nFuŒP©h«me
, 
zFuŒP©h«me
);

2210 if–
rc
 ){

2211 
	`sqlôe3_‰ì
(
zFuŒP©h«me
);

2212 
	`sqlôe3_‰ì
(
p
);

2213  
rc
;

2216 #i‡
SQLITE_THREADSAFE


2217 
muãxO≥n
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_OPEN
);

2218 
	`sqlôe3_muãx_íãr
(
muãxO≥n
);

2219 
muãxSh¨ed
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MASTER
);

2220 
	`sqlôe3_muãx_íãr
(
muãxSh¨ed
);

2222 
pBt
=
	`GLOBAL
(
BtSh¨ed
*,
sqlôe3Sh¨edCacheLi°
);ÖBt;ÖBtıBt->
pNext
){

2223 
	`as£π
–
pBt
->
nRef
>0 );

2224 if–0==
	`°rcmp
(
zFuŒP©h«me
, 
	`sqlôe3PagîFûíame
(
pBt
->
pPagî
, 0))

2225 && 
	`sqlôe3PagîVfs
(
pBt
->
pPagî
)==
pVfs
 ){

2226 
iDb
;

2227 
iDb
=
db
->
nDb
-1; iDb>=0; iDb--){

2228 
Båì
 *
pExi°ög
 = 
db
->
aDb
[
iDb
].
pBt
;

2229 if–
pExi°ög
 &&ÖExi°ög->
pBt
==pBt ){

2230 
	`sqlôe3_muãx_Àave
(
muãxSh¨ed
);

2231 
	`sqlôe3_muãx_Àave
(
muãxO≥n
);

2232 
	`sqlôe3_‰ì
(
zFuŒP©h«me
);

2233 
	`sqlôe3_‰ì
(
p
);

2234  
SQLITE_CONSTRAINT
;

2237 
p
->
pBt
 =ÖBt;

2238 
pBt
->
nRef
++;

2242 
	`sqlôe3_muãx_Àave
(
muãxSh¨ed
);

2243 
	`sqlôe3_‰ì
(
zFuŒP©h«me
);

2245 #ifde‡
SQLITE_DEBUG


2252 
p
->
sh¨abÀ
 = 1;

2257 if–
pBt
==0 ){

2263 
	`as£π
–(
i64
)==8 );

2264 
	`as£π
–(
u64
)==8 );

2265 
	`as£π
–(
u32
)==4 );

2266 
	`as£π
–(
u16
)==2 );

2267 
	`as£π
–(
Pgno
)==4 );

2269 
pBt
 = 
	`sqlôe3MÆlocZîo
( (*pBt) );

2270 if–
pBt
==0 ){

2271 
rc
 = 
SQLITE_NOMEM_BKPT
;

2272 
båì_›í_out
;

2274 
rc
 = 
	`sqlôe3PagîO≥n
(
pVfs
, &
pBt
->
pPagî
, 
zFûíame
,

2275 
EXTRA_SIZE
, 
Êags
, 
vfsFœgs
, 
∑geReöô
);

2276 if–
rc
==
SQLITE_OK
 ){

2277 
	`sqlôe3PagîSëMm≠Limô
(
pBt
->
pPagî
, 
db
->
szMm≠
);

2278 
rc
 = 
	`sqlôe3PagîRódFûehódî
(
pBt
->
pPagî
,(
zDbHódî
),zDbHeader);

2280 if–
rc
!=
SQLITE_OK
 ){

2281 
båì_›í_out
;

2283 
pBt
->
›íFœgs
 = (
u8
)
Êags
;

2284 
pBt
->
db
 = db;

2285 
	`sqlôe3PagîSëBusyh™dÀr
(
pBt
->
pPagî
, 
båìInvokeBusyH™dÀr
,ÖBt);

2286 
p
->
pBt
 =ÖBt;

2288 
pBt
->
pCurs‹
 = 0;

2289 
pBt
->
pPage1
 = 0;

2290 if–
	`sqlôe3PagîI§ód⁄ly
(
pBt
->
pPagî
ËËpBt->
btsFœgs
 |
BTS_READ_ONLY
;

2291 #ifde‡
SQLITE_SECURE_DELETE


2292 
pBt
->
btsFœgs
 |
BTS_SECURE_DELETE
;

2297 
pBt
->
∑geSize
 = (
zDbHódî
[16]<<8) | (zDbHeader[17]<<16);

2298 if–
pBt
->
∑geSize
<512 ||ÖBt->∑geSize>
SQLITE_MAX_PAGE_SIZE


2299 || ((
pBt
->
∑geSize
-1)&pBt->pageSize)!=0 ){

2300 
pBt
->
∑geSize
 = 0;

2301 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


2308 if–
zFûíame
 && !
isMemdb
 ){

2309 
pBt
->
autoVacuum
 = (
SQLITE_DEFAULT_AUTOVACUUM
 ? 1 : 0);

2310 
pBt
->
ö¸Vacuum
 = (
SQLITE_DEFAULT_AUTOVACUUM
==2 ? 1 : 0);

2313 
nRe£rve
 = 0;

2318 
nRe£rve
 = 
zDbHódî
[20];

2319 
pBt
->
btsFœgs
 |
BTS_PAGESIZE_FIXED
;

2320 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


2321 
pBt
->
autoVacuum
 = (
	`gë4byã
(&
zDbHódî
[36 + 4*4])?1:0);

2322 
pBt
->
ö¸Vacuum
 = (
	`gë4byã
(&
zDbHódî
[36 + 7*4])?1:0);

2325 
rc
 = 
	`sqlôe3PagîSëPagesize
(
pBt
->
pPagî
, &pBt->
∑geSize
, 
nRe£rve
);

2326 if–
rc
 ) 
båì_›í_out
;

2327 
pBt
->
ußbÀSize
 =ÖBt->
∑geSize
 - 
nRe£rve
;

2328 
	`as£π
–(
pBt
->
∑geSize
 & 7)==0 );

2330 #i‡!
	`deföed
(
SQLITE_OMIT_SHARED_CACHE
Ë&& !deföed(
SQLITE_OMIT_DISKIO
)

2333 if–
p
->
sh¨abÀ
 ){

2334 
	`MUTEX_LOGIC
–
sqlôe3_muãx
 *
muãxSh¨ed
; )

2335 
pBt
->
nRef
 = 1;

2336 
	`MUTEX_LOGIC
–
muãxSh¨ed
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MASTER
);)

2337 if–
SQLITE_THREADSAFE
 && 
sqlôe3GlobÆC⁄fig
.
bC‹eMuãx
 ){

2338 
pBt
->
muãx
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_FAST
);

2339 if–
pBt
->
muãx
==0 ){

2340 
rc
 = 
SQLITE_NOMEM_BKPT
;

2341 
båì_›í_out
;

2344 
	`sqlôe3_muãx_íãr
(
muãxSh¨ed
);

2345 
pBt
->
pNext
 = 
	`GLOBAL
(
BtSh¨ed
*,
sqlôe3Sh¨edCacheLi°
);

2346 
	`GLOBAL
(
BtSh¨ed
*,
sqlôe3Sh¨edCacheLi°
Ë
pBt
;

2347 
	`sqlôe3_muãx_Àave
(
muãxSh¨ed
);

2352 #i‡!
	`deföed
(
SQLITE_OMIT_SHARED_CACHE
Ë&& !deföed(
SQLITE_OMIT_DISKIO
)

2357 if–
p
->
sh¨abÀ
 ){

2358 
i
;

2359 
Båì
 *
pSib
;

2360 
i
=0; i<
db
->
nDb
; i++){

2361 if–(
pSib
 = 
db
->
aDb
[
i
].
pBt
)!=0 &&ÖSib->
sh¨abÀ
 ){

2362  
pSib
->
pPªv
 ){ÖSib =ÖSib->pPrev; }

2363 if–(
u±r
)
p
->
pBt
<(u±r)
pSib
->pBt ){

2364 
p
->
pNext
 = 
pSib
;

2365 
p
->
pPªv
 = 0;

2366 
pSib
->
pPªv
 = 
p
;

2368  
pSib
->
pNext
 && (
u±r
ÌSib->pNext->
pBt
<(u±r)
p
->pBt ){

2369 
pSib
 =ÖSib->
pNext
;

2371 
p
->
pNext
 = 
pSib
->pNext;

2372 
p
->
pPªv
 = 
pSib
;

2373 if–
p
->
pNext
 ){

2374 
p
->
pNext
->
pPªv
 =Ö;

2376 
pSib
->
pNext
 = 
p
;

2383 *
µBåì
 = 
p
;

2385 
båì_›í_out
:

2386 if–
rc
!=
SQLITE_OK
 ){

2387 if–
pBt
 &&ÖBt->
pPagî
 ){

2388 
	`sqlôe3PagîClo£
(
pBt
->
pPagî
);

2390 
	`sqlôe3_‰ì
(
pBt
);

2391 
	`sqlôe3_‰ì
(
p
);

2392 *
µBåì
 = 0;

2398 if–
	`sqlôe3BåìSchema
(
p
, 0, 0)==0 ){

2399 
	`sqlôe3PagîSëCachesize
(
p
->
pBt
->
pPagî
, 
SQLITE_DEFAULT_CACHE_SIZE
);

2402 if–
muãxO≥n
 ){

2403 
	`as£π
–
	`sqlôe3_muãx_hñd
(
muãxO≥n
) );

2404 
	`sqlôe3_muãx_Àave
(
muãxO≥n
);

2406  
rc
;

2407 
	}
}

2415 
	$ªmoveFromSh¨ögLi°
(
BtSh¨ed
 *
pBt
){

2416 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


2417 
	`MUTEX_LOGIC
–
sqlôe3_muãx
 *
pMa°î
; )

2418 
BtSh¨ed
 *
pLi°
;

2419 
ªmoved
 = 0;

2421 
	`as£π
–
	`sqlôe3_muãx_nŸhñd
(
pBt
->
muãx
) );

2422 
	`MUTEX_LOGIC
–
pMa°î
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MASTER
); )

2423 
	`sqlôe3_muãx_íãr
(
pMa°î
);

2424 
pBt
->
nRef
--;

2425 if–
pBt
->
nRef
<=0 ){

2426 if–
	`GLOBAL
(
BtSh¨ed
*,
sqlôe3Sh¨edCacheLi°
)==
pBt
 ){

2427 
	`GLOBAL
(
BtSh¨ed
*,
sqlôe3Sh¨edCacheLi°
Ë
pBt
->
pNext
;

2429 
pLi°
 = 
	`GLOBAL
(
BtSh¨ed
*,
sqlôe3Sh¨edCacheLi°
);

2430  
	`ALWAYS
(
pLi°
Ë&&ÖLi°->
pNext
!=
pBt
 ){

2431 
pLi°
ıLi°->
pNext
;

2433 if–
	`ALWAYS
(
pLi°
) ){

2434 
pLi°
->
pNext
 = 
pBt
->pNext;

2437 if–
SQLITE_THREADSAFE
 ){

2438 
	`sqlôe3_muãx_‰ì
(
pBt
->
muãx
);

2440 
ªmoved
 = 1;

2442 
	`sqlôe3_muãx_Àave
(
pMa°î
);

2443  
ªmoved
;

2447 
	}
}

2454 
	$ÆloˇãTempS∑˚
(
BtSh¨ed
 *
pBt
){

2455 if–!
pBt
->
pTmpS∑˚
 ){

2456 
pBt
->
pTmpS∑˚
 = 
	`sqlôe3PageMÆloc
–pBt->
∑geSize
 );

2473 if–
pBt
->
pTmpS∑˚
 ){

2474 
	`mem£t
(
pBt
->
pTmpS∑˚
, 0, 8);

2475 
pBt
->
pTmpS∑˚
 += 4;

2478 
	}
}

2483 
	$‰ìTempS∑˚
(
BtSh¨ed
 *
pBt
){

2484 if–
pBt
->
pTmpS∑˚
 ){

2485 
pBt
->
pTmpS∑˚
 -= 4;

2486 
	`sqlôe3PageFªe
(
pBt
->
pTmpS∑˚
);

2487 
pBt
->
pTmpS∑˚
 = 0;

2489 
	}
}

2494 
	$sqlôe3BåìClo£
(
Båì
 *
p
){

2495 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

2496 
BtCurs‹
 *
pCur
;

2499 
	`as£π
–
	`sqlôe3_muãx_hñd
(
p
->
db
->
muãx
) );

2500 
	`sqlôe3BåìE¡î
(
p
);

2501 
pCur
 = 
pBt
->
pCurs‹
;

2502  
pCur
 ){

2503 
BtCurs‹
 *
pTmp
 = 
pCur
;

2504 
pCur
 =ÖCur->
pNext
;

2505 if–
pTmp
->
pBåì
==
p
 ){

2506 
	`sqlôe3BåìClo£Curs‹
(
pTmp
);

2514 
	`sqlôe3BåìRﬁlback
(
p
, 
SQLITE_OK
, 0);

2515 
	`sqlôe3BåìLóve
(
p
);

2521 
	`as£π
–
p
->
w™tToLock
==0 &&Ö->
locked
==0 );

2522 if–!
p
->
sh¨abÀ
 || 
	`ªmoveFromSh¨ögLi°
(
pBt
) ){

2528 
	`as£π
–!
pBt
->
pCurs‹
 );

2529 
	`sqlôe3PagîClo£
(
pBt
->
pPagî
);

2530 if–
pBt
->
xFªeSchema
 &&ÖBt->
pSchema
 ){

2531 
pBt
->
	`xFªeSchema
’Bt->
pSchema
);

2533 
	`sqlôe3DbFªe
(0, 
pBt
->
pSchema
);

2534 
	`‰ìTempS∑˚
(
pBt
);

2535 
	`sqlôe3_‰ì
(
pBt
);

2538 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


2539 
	`as£π
–
p
->
w™tToLock
==0 );

2540 
	`as£π
–
p
->
locked
==0 );

2541 if–
p
->
pPªv
 )Ö->pPªv->
pNext
 =Ö->pNext;

2542 if–
p
->
pNext
 )Ö->pNext->
pPªv
 =Ö->pPrev;

2545 
	`sqlôe3_‰ì
(
p
);

2546  
SQLITE_OK
;

2547 
	}
}

2556 
	$sqlôe3BåìSëCacheSize
(
Båì
 *
p
, 
mxPage
){

2557 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

2558 
	`as£π
–
	`sqlôe3_muãx_hñd
(
p
->
db
->
muãx
) );

2559 
	`sqlôe3BåìE¡î
(
p
);

2560 
	`sqlôe3PagîSëCachesize
(
pBt
->
pPagî
, 
mxPage
);

2561 
	`sqlôe3BåìLóve
(
p
);

2562  
SQLITE_OK
;

2563 
	}
}

2575 
	$sqlôe3BåìSëSpûlSize
(
Båì
 *
p
, 
mxPage
){

2576 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

2577 
ªs
;

2578 
	`as£π
–
	`sqlôe3_muãx_hñd
(
p
->
db
->
muãx
) );

2579 
	`sqlôe3BåìE¡î
(
p
);

2580 
ªs
 = 
	`sqlôe3PagîSëSpûlsize
(
pBt
->
pPagî
, 
mxPage
);

2581 
	`sqlôe3BåìLóve
(
p
);

2582  
ªs
;

2583 
	}
}

2585 #i‡
SQLITE_MAX_MMAP_SIZE
>0

2590 
	$sqlôe3BåìSëMm≠Limô
(
Båì
 *
p
, 
sqlôe3_öt64
 
szMm≠
){

2591 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

2592 
	`as£π
–
	`sqlôe3_muãx_hñd
(
p
->
db
->
muãx
) );

2593 
	`sqlôe3BåìE¡î
(
p
);

2594 
	`sqlôe3PagîSëMm≠Limô
(
pBt
->
pPagî
, 
szMm≠
);

2595 
	`sqlôe3BåìLóve
(
p
);

2596  
SQLITE_OK
;

2597 
	}
}

2608 #i‚de‡
SQLITE_OMIT_PAGER_PRAGMAS


2609 
	$sqlôe3BåìSëPagîFœgs
(

2610 
Båì
 *
p
,

2611 
pgFœgs


2613 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

2614 
	`as£π
–
	`sqlôe3_muãx_hñd
(
p
->
db
->
muãx
) );

2615 
	`sqlôe3BåìE¡î
(
p
);

2616 
	`sqlôe3PagîSëFœgs
(
pBt
->
pPagî
, 
pgFœgs
);

2617 
	`sqlôe3BåìLóve
(
p
);

2618  
SQLITE_OK
;

2619 
	}
}

2642 
	$sqlôe3BåìSëPageSize
(
Båì
 *
p
, 
∑geSize
, 
nRe£rve
, 
iFix
){

2643 
rc
 = 
SQLITE_OK
;

2644 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

2645 
	`as£π
–
nRe£rve
>=-1 &&ÇReserve<=255 );

2646 
	`sqlôe3BåìE¡î
(
p
);

2647 #i‡
SQLITE_HAS_CODEC


2648 if–
nRe£rve
>
pBt
->
›timÆRe£rve
 )ÖBt->›timÆRe£rvê(
u8
)nReserve;

2650 if–
pBt
->
btsFœgs
 & 
BTS_PAGESIZE_FIXED
 ){

2651 
	`sqlôe3BåìLóve
(
p
);

2652  
SQLITE_READONLY
;

2654 if–
nRe£rve
<0 ){

2655 
nRe£rve
 = 
pBt
->
∑geSize
 -ÖBt->
ußbÀSize
;

2657 
	`as£π
–
nRe£rve
>=0 &&ÇReserve<=255 );

2658 if–
∑geSize
>=512 &&ÖageSize<=
SQLITE_MAX_PAGE_SIZE
 &&

2659 ((
∑geSize
-1)&pageSize)==0 ){

2660 
	`as£π
–(
∑geSize
 & 7)==0 );

2661 
	`as£π
–!
pBt
->
pCurs‹
 );

2662 
pBt
->
∑geSize
 = (
u32
)pageSize;

2663 
	`‰ìTempS∑˚
(
pBt
);

2665 
rc
 = 
	`sqlôe3PagîSëPagesize
(
pBt
->
pPagî
, &pBt->
∑geSize
, 
nRe£rve
);

2666 
pBt
->
ußbÀSize
 =ÖBt->
∑geSize
 - (
u16
)
nRe£rve
;

2667 if–
iFix
 ) 
pBt
->
btsFœgs
 |
BTS_PAGESIZE_FIXED
;

2668 
	`sqlôe3BåìLóve
(
p
);

2669  
rc
;

2670 
	}
}

2675 
	$sqlôe3BåìGëPageSize
(
Båì
 *
p
){

2676  
p
->
pBt
->
∑geSize
;

2677 
	}
}

2690 
	$sqlôe3BåìGëRe£rveNoMuãx
(
Båì
 *
p
){

2691 
n
;

2692 
	`as£π
–
	`sqlôe3_muãx_hñd
(
p
->
pBt
->
muãx
) );

2693 
n
 = 
p
->
pBt
->
∑geSize
 -Ö->pBt->
ußbÀSize
;

2694  
n
;

2695 
	}
}

2706 
	$sqlôe3BåìGëO±imÆRe£rve
(
Båì
 *
p
){

2707 
n
;

2708 
	`sqlôe3BåìE¡î
(
p
);

2709 
n
 = 
	`sqlôe3BåìGëRe£rveNoMuãx
(
p
);

2710 #ifde‡
SQLITE_HAS_CODEC


2711 if–
n
<
p
->
pBt
->
›timÆRe£rve
 )Ç =Ö->pBt->optimalReserve;

2713 
	`sqlôe3BåìLóve
(
p
);

2714  
n
;

2715 
	}
}

2723 
	$sqlôe3BåìMaxPageCou¡
(
Båì
 *
p
, 
mxPage
){

2724 
n
;

2725 
	`sqlôe3BåìE¡î
(
p
);

2726 
n
 = 
	`sqlôe3PagîMaxPageCou¡
(
p
->
pBt
->
pPagî
, 
mxPage
);

2727 
	`sqlôe3BåìLóve
(
p
);

2728  
n
;

2729 
	}
}

2736 
	$sqlôe3BåìSecuªDñëe
(
Båì
 *
p
, 
√wFœg
){

2737 
b
;

2738 if–
p
==0 )  0;

2739 
	`sqlôe3BåìE¡î
(
p
);

2740 if–
√wFœg
>=0 ){

2741 
p
->
pBt
->
btsFœgs
 &~
BTS_SECURE_DELETE
;

2742 if–
√wFœg
 ) 
p
->
pBt
->
btsFœgs
 |
BTS_SECURE_DELETE
;

2744 
b
 = (
p
->
pBt
->
btsFœgs
 & 
BTS_SECURE_DELETE
)!=0;

2745 
	`sqlôe3BåìLóve
(
p
);

2746  
b
;

2747 
	}
}

2755 
	$sqlôe3BåìSëAutoVacuum
(
Båì
 *
p
, 
autoVacuum
){

2756 #ifde‡
SQLITE_OMIT_AUTOVACUUM


2757  
SQLITE_READONLY
;

2759 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

2760 
rc
 = 
SQLITE_OK
;

2761 
u8
 
av
 = (u8)
autoVacuum
;

2763 
	`sqlôe3BåìE¡î
(
p
);

2764 if–(
pBt
->
btsFœgs
 & 
BTS_PAGESIZE_FIXED
)!=0 && (
av
 ?1:0)!ıBt->
autoVacuum
 ){

2765 
rc
 = 
SQLITE_READONLY
;

2767 
pBt
->
autoVacuum
 = 
av
 ?1:0;

2768 
pBt
->
ö¸Vacuum
 = 
av
==2 ?1:0;

2770 
	`sqlôe3BåìLóve
(
p
);

2771  
rc
;

2773 
	}
}

2779 
	$sqlôe3BåìGëAutoVacuum
(
Båì
 *
p
){

2780 #ifde‡
SQLITE_OMIT_AUTOVACUUM


2781  
BTREE_AUTOVACUUM_NONE
;

2783 
rc
;

2784 
	`sqlôe3BåìE¡î
(
p
);

2785 
rc
 = (

2786 (!
p
->
pBt
->
autoVacuum
)?
BTREE_AUTOVACUUM_NONE
:

2787 (!
p
->
pBt
->
ö¸Vacuum
)?
BTREE_AUTOVACUUM_FULL
:

2788 
BTREE_AUTOVACUUM_INCR


2790 
	`sqlôe3BåìLóve
(
p
);

2791  
rc
;

2793 
	}
}

2805 
	$lockBåì
(
BtSh¨ed
 *
pBt
){

2806 
rc
;

2807 
MemPage
 *
pPage1
;

2808 
nPage
;

2809 
nPageFûe
 = 0;

2810 
nPageHódî
;

2812 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

2813 
	`as£π
–
pBt
->
pPage1
==0 );

2814 
rc
 = 
	`sqlôe3PagîSh¨edLock
(
pBt
->
pPagî
);

2815 if–
rc
!=
SQLITE_OK
 ) Ñc;

2816 
rc
 = 
	`båìGëPage
(
pBt
, 1, &
pPage1
, 0);

2817 if–
rc
!=
SQLITE_OK
 ) Ñc;

2822 
nPage
 = 
nPageHódî
 = 
	`gë4byã
(28+(
u8
*)
pPage1
->
aD©a
);

2823 
	`sqlôe3PagîPagecou¡
(
pBt
->
pPagî
, &
nPageFûe
);

2824 if–
nPage
==0 || 
	`memcmp
(24+(
u8
*)
pPage1
->
aD©a
, 92+(u8*)pPage1->aData,4)!=0 ){

2825 
nPage
 = 
nPageFûe
;

2827 if–
nPage
>0 ){

2828 
u32
 
∑geSize
;

2829 
u32
 
ußbÀSize
;

2830 
u8
 *
∑ge1
 = 
pPage1
->
aD©a
;

2831 
rc
 = 
SQLITE_NOTADB
;

2835 if–
	`memcmp
(
∑ge1
, 
zMagicHódî
, 16)!=0 ){

2836 
∑ge1_öô_Áûed
;

2839 #ifde‡
SQLITE_OMIT_WAL


2840 if–
∑ge1
[18]>1 ){

2841 
pBt
->
btsFœgs
 |
BTS_READ_ONLY
;

2843 if–
∑ge1
[19]>1 ){

2844 
∑ge1_öô_Áûed
;

2847 if–
∑ge1
[18]>2 ){

2848 
pBt
->
btsFœgs
 |
BTS_READ_ONLY
;

2850 if–
∑ge1
[19]>2 ){

2851 
∑ge1_öô_Áûed
;

2862 if–
∑ge1
[19]==2 && (
pBt
->
btsFœgs
 & 
BTS_NO_WAL
)==0 ){

2863 
isO≥n
 = 0;

2864 
rc
 = 
	`sqlôe3PagîO≥nWÆ
(
pBt
->
pPagî
, &
isO≥n
);

2865 if–
rc
!=
SQLITE_OK
 ){

2866 
∑ge1_öô_Áûed
;

2868 #i‡
SQLITE_DEFAULT_SYNCHRONOUS
!=
SQLITE_DEFAULT_WAL_SYNCHRONOUS


2869 
sqlôe3
 *
db
;

2870 
Db
 *
pDb
;

2871 if–(
db
=
pBt
->db)!=0 && (
pDb
=db->
aDb
)!=0 ){

2872  
pDb
->
pBt
==0 ||ÖDb->pBt->pBt!=pBt ){ÖDb++; }

2873 if–
pDb
->
bSyncSë
==0

2874 && 
pDb
->
ß„ty_Àvñ
==
SQLITE_DEFAULT_SYNCHRONOUS
+1

2876 
pDb
->
ß„ty_Àvñ
 = 
SQLITE_DEFAULT_WAL_SYNCHRONOUS
+1;

2877 
	`sqlôe3PagîSëFœgs
(
pBt
->
pPagî
,

2878 
pDb
->
ß„ty_Àvñ
 | (
db
->
Êags
 & 
PAGER_FLAGS_MASK
));

2882 if–
isO≥n
==0 ){

2883 
	`ªÀa£Page
(
pPage1
);

2884  
SQLITE_OK
;

2887 
rc
 = 
SQLITE_NOTADB
;

2897 if–
	`memcmp
(&
∑ge1
[21], "\100\040\040",3)!=0 ){

2898 
∑ge1_öô_Áûed
;

2903 
∑geSize
 = (
∑ge1
[16]<<8) | (page1[17]<<16);

2906 if–((
∑geSize
-1)&pageSize)!=0

2907 || 
∑geSize
>
SQLITE_MAX_PAGE_SIZE


2908 || 
∑geSize
<=256

2910 
∑ge1_öô_Áûed
;

2912 
	`as£π
–(
∑geSize
 & 7)==0 );

2920 
ußbÀSize
 = 
∑geSize
 - 
∑ge1
[20];

2921 if–(
u32
)
∑geSize
!=
pBt
->pageSize ){

2928 
	`ªÀa£Page
(
pPage1
);

2929 
pBt
->
ußbÀSize
 = usableSize;

2930 
pBt
->
∑geSize
 =ÖageSize;

2931 
	`‰ìTempS∑˚
(
pBt
);

2932 
rc
 = 
	`sqlôe3PagîSëPagesize
(
pBt
->
pPagî
, &pBt->
∑geSize
,

2933 
∑geSize
-
ußbÀSize
);

2934  
rc
;

2936 if–(
pBt
->
db
->
Êags
 & 
SQLITE_RecovîyMode
)==0 && 
nPage
>
nPageFûe
 ){

2937 
rc
 = 
SQLITE_CORRUPT_BKPT
;

2938 
∑ge1_öô_Áûed
;

2943 if–
ußbÀSize
<480 ){

2944 
∑ge1_öô_Áûed
;

2946 
pBt
->
∑geSize
 =ÖageSize;

2947 
pBt
->
ußbÀSize
 = usableSize;

2948 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


2949 
pBt
->
autoVacuum
 = (
	`gë4byã
(&
∑ge1
[36 + 4*4])?1:0);

2950 
pBt
->
ö¸Vacuum
 = (
	`gë4byã
(&
∑ge1
[36 + 7*4])?1:0);

2967 
pBt
->
maxLoˇl
 = (
u16
)(’Bt->
ußbÀSize
-12)*64/255 - 23);

2968 
pBt
->
möLoˇl
 = (
u16
)(’Bt->
ußbÀSize
-12)*32/255 - 23);

2969 
pBt
->
maxLóf
 = (
u16
)’Bt->
ußbÀSize
 - 35);

2970 
pBt
->
möLóf
 = (
u16
)(’Bt->
ußbÀSize
-12)*32/255 - 23);

2971 if–
pBt
->
maxLoˇl
>127 ){

2972 
pBt
->
max1byãPaylﬂd
 = 127;

2974 
pBt
->
max1byãPaylﬂd
 = (
u8
ÌBt->
maxLoˇl
;

2976 
	`as£π
–
pBt
->
maxLóf
 + 23 <
	`MX_CELL_SIZE
(pBt) );

2977 
pBt
->
pPage1
 =ÖPage1;

2978 
pBt
->
nPage
 =ÇPage;

2979  
SQLITE_OK
;

2981 
∑ge1_öô_Áûed
:

2982 
	`ªÀa£Page
(
pPage1
);

2983 
pBt
->
pPage1
 = 0;

2984  
rc
;

2985 
	}
}

2987 #i‚de‡
NDEBUG


3000 
	$cou¡VÆidCurs‹s
(
BtSh¨ed
 *
pBt
, 
wrO∆y
){

3001 
BtCurs‹
 *
pCur
;

3002 
r
 = 0;

3003 
pCur
=
pBt
->
pCurs‹
;ÖCur;ÖCurıCur->
pNext
){

3004 if–(
wrO∆y
==0 || (
pCur
->
curFœgs
 & 
BTCF_WrôeFœg
)!=0)

3005 && 
pCur
->
eSèã
!=
CURSOR_FAULT
 ) 
r
++;

3007  
r
;

3008 
	}
}

3019 
	$u∆ockBåìIfUnu£d
(
BtSh¨ed
 *
pBt
){

3020 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

3021 
	`as£π
–
	`cou¡VÆidCurs‹s
(
pBt
,0)==0 ||ÖBt->
öTønß˘i⁄
>
TRANS_NONE
 );

3022 if–
pBt
->
öTønß˘i⁄
==
TRANS_NONE
 &&ÖBt->
pPage1
!=0 ){

3023 
MemPage
 *
pPage1
 = 
pBt
->pPage1;

3024 
	`as£π
–
pPage1
->
aD©a
 );

3025 
	`as£π
–
	`sqlôe3PagîRefcou¡
(
pBt
->
pPagî
)==1 );

3026 
pBt
->
pPage1
 = 0;

3027 
	`ªÀa£PageNŸNuŒ
(
pPage1
);

3029 
	}
}

3036 
	$√wD©aba£
(
BtSh¨ed
 *
pBt
){

3037 
MemPage
 *
pP1
;

3038 *
d©a
;

3039 
rc
;

3041 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

3042 if–
pBt
->
nPage
>0 ){

3043  
SQLITE_OK
;

3045 
pP1
 = 
pBt
->
pPage1
;

3046 
	`as£π
–
pP1
!=0 );

3047 
d©a
 = 
pP1
->
aD©a
;

3048 
rc
 = 
	`sqlôe3PagîWrôe
(
pP1
->
pDbPage
);

3049 if–
rc
 ) Ñc;

3050 
	`mem˝y
(
d©a
, 
zMagicHódî
, (zMagicHeader));

3051 
	`as£π
–(
zMagicHódî
)==16 );

3052 
d©a
[16] = (
u8
)((
pBt
->
∑geSize
>>8)&0xff);

3053 
d©a
[17] = (
u8
)((
pBt
->
∑geSize
>>16)&0xff);

3054 
d©a
[18] = 1;

3055 
d©a
[19] = 1;

3056 
	`as£π
–
pBt
->
ußbÀSize
<ıBt->
∑geSize
 &&ÖBt->usableSize+255>=pBt->pageSize);

3057 
d©a
[20] = (
u8
)(
pBt
->
∑geSize
 -ÖBt->
ußbÀSize
);

3058 
d©a
[21] = 64;

3059 
d©a
[22] = 32;

3060 
d©a
[23] = 32;

3061 
	`mem£t
(&
d©a
[24], 0, 100-24);

3062 
	`zîoPage
(
pP1
, 
PTF_INTKEY
|
PTF_LEAF
|
PTF_LEAFDATA
 );

3063 
pBt
->
btsFœgs
 |
BTS_PAGESIZE_FIXED
;

3064 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


3065 
	`as£π
–
pBt
->
autoVacuum
==1 ||ÖBt->autoVacuum==0 );

3066 
	`as£π
–
pBt
->
ö¸Vacuum
==1 ||ÖBt->incrVacuum==0 );

3067 
	`put4byã
(&
d©a
[36 + 4*4], 
pBt
->
autoVacuum
);

3068 
	`put4byã
(&
d©a
[36 + 7*4], 
pBt
->
ö¸Vacuum
);

3070 
pBt
->
nPage
 = 1;

3071 
d©a
[31] = 1;

3072  
SQLITE_OK
;

3073 
	}
}

3080 
	$sqlôe3BåìNewDb
(
Båì
 *
p
){

3081 
rc
;

3082 
	`sqlôe3BåìE¡î
(
p
);

3083 
p
->
pBt
->
nPage
 = 0;

3084 
rc
 = 
	`√wD©aba£
(
p
->
pBt
);

3085 
	`sqlôe3BåìLóve
(
p
);

3086  
rc
;

3087 
	}
}

3124 
	$sqlôe3BåìBegöTøns
(
Båì
 *
p
, 
wrÊag
){

3125 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

3126 
rc
 = 
SQLITE_OK
;

3128 
	`sqlôe3BåìE¡î
(
p
);

3129 
	`båìI¡egrôy
(
p
);

3135 if–
p
->
öTøns
==
TRANS_WRITE
 || (p->öTøns==
TRANS_READ
 && !
wrÊag
) ){

3136 
å™s_begun
;

3138 
	`as£π
–
pBt
->
öTønß˘i⁄
==
TRANS_WRITE
 || 
	`IfNŸOmôAV
’Bt->
bDoTrunˇã
)==0 );

3141 if–(
pBt
->
btsFœgs
 & 
BTS_READ_ONLY
)!=0 && 
wrÊag
 ){

3142 
rc
 = 
SQLITE_READONLY
;

3143 
å™s_begun
;

3146 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


3148 
sqlôe3
 *
pBlock
 = 0;

3153 if–(
wrÊag
 && 
pBt
->
öTønß˘i⁄
==
TRANS_WRITE
)

3154 || (
pBt
->
btsFœgs
 & 
BTS_PENDING
)!=0

3156 
pBlock
 = 
pBt
->
pWrôî
->
db
;

3157 }if–
wrÊag
>1 ){

3158 
BtLock
 *
pIãr
;

3159 
pIãr
=
pBt
->
pLock
;ÖIãr;ÖIãrıIãr->
pNext
){

3160 if–
pIãr
->
pBåì
!=
p
 ){

3161 
pBlock
 = 
pIãr
->
pBåì
->
db
;

3166 if–
pBlock
 ){

3167 
	`sqlôe3C⁄√˘i⁄Blocked
(
p
->
db
, 
pBlock
);

3168 
rc
 = 
SQLITE_LOCKED_SHAREDCACHE
;

3169 
å™s_begun
;

3177 
rc
 = 
	`quîySh¨edCacheTabÀLock
(
p
, 
MASTER_ROOT
, 
READ_LOCK
);

3178 if–
SQLITE_OK
!=
rc
 ) 
å™s_begun
;

3180 
pBt
->
btsFœgs
 &~
BTS_INITIALLY_EMPTY
;

3181 if–
pBt
->
nPage
==0 )ÖBt->
btsFœgs
 |
BTS_INITIALLY_EMPTY
;

3190  
pBt
->
pPage1
==0 && 
SQLITE_OK
==(
rc
 = 
	`lockBåì
(pBt)) );

3192 if–
rc
==
SQLITE_OK
 && 
wrÊag
 ){

3193 if–(
pBt
->
btsFœgs
 & 
BTS_READ_ONLY
)!=0 ){

3194 
rc
 = 
SQLITE_READONLY
;

3196 
rc
 = 
	`sqlôe3PagîBegö
(
pBt
->
pPagî
,
wrÊag
>1,
	`sqlôe3TempInMem‹y
(
p
->
db
));

3197 if–
rc
==
SQLITE_OK
 ){

3198 
rc
 = 
	`√wD©aba£
(
pBt
);

3203 if–
rc
!=
SQLITE_OK
 ){

3204 
	`u∆ockBåìIfUnu£d
(
pBt
);

3206 } (
rc
&0xFF)==
SQLITE_BUSY
 && 
pBt
->
öTønß˘i⁄
==
TRANS_NONE
 &&

3207 
	`båìInvokeBusyH™dÀr
(
pBt
) );

3209 if–
rc
==
SQLITE_OK
 ){

3210 if–
p
->
öTøns
==
TRANS_NONE
 ){

3211 
pBt
->
nTønß˘i⁄
++;

3212 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


3213 if–
p
->
sh¨abÀ
 ){

3214 
	`as£π
–
p
->
lock
.
pBåì
=ı &&Ö->lock.
iTabÀ
==1 );

3215 
p
->
lock
.
eLock
 = 
READ_LOCK
;

3216 
p
->
lock
.
pNext
 = 
pBt
->
pLock
;

3217 
pBt
->
pLock
 = &
p
->
lock
;

3221 
p
->
öTøns
 = (
wrÊag
?
TRANS_WRITE
:
TRANS_READ
);

3222 if–
p
->
öTøns
>
pBt
->
öTønß˘i⁄
 ){

3223 
pBt
->
öTønß˘i⁄
 = 
p
->
öTøns
;

3225 if–
wrÊag
 ){

3226 
MemPage
 *
pPage1
 = 
pBt
->pPage1;

3227 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


3228 
	`as£π
–!
pBt
->
pWrôî
 );

3229 
pBt
->
pWrôî
 = 
p
;

3230 
pBt
->
btsFœgs
 &~
BTS_EXCLUSIVE
;

3231 if–
wrÊag
>1 ) 
pBt
->
btsFœgs
 |
BTS_EXCLUSIVE
;

3240 if–
pBt
->
nPage
!=
	`gë4byã
(&
pPage1
->
aD©a
[28]) ){

3241 
rc
 = 
	`sqlôe3PagîWrôe
(
pPage1
->
pDbPage
);

3242 if–
rc
==
SQLITE_OK
 ){

3243 
	`put4byã
(&
pPage1
->
aD©a
[28], 
pBt
->
nPage
);

3250 
å™s_begun
:

3251 if–
rc
==
SQLITE_OK
 && 
wrÊag
 ){

3256 
rc
 = 
	`sqlôe3PagîO≥nSavïoöt
(
pBt
->
pPagî
, 
p
->
db
->
nSavïoöt
);

3259 
	`båìI¡egrôy
(
p
);

3260 
	`sqlôe3BåìLóve
(
p
);

3261  
rc
;

3262 
	}
}

3264 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


3271 
	$£tChûdPåm≠s
(
MemPage
 *
pPage
){

3272 
i
;

3273 
nCñl
;

3274 
rc
;

3275 
BtSh¨ed
 *
pBt
 = 
pPage
->pBt;

3276 
u8
 
isInôOrig
 = 
pPage
->
isInô
;

3277 
Pgno
 
pgno
 = 
pPage
->pgno;

3279 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pPage
->
pBt
->
muãx
) );

3280 
rc
 = 
	`båìInôPage
(
pPage
);

3281 if–
rc
!=
SQLITE_OK
 ){

3282 
£t_chûd_±rm≠s_out
;

3284 
nCñl
 = 
pPage
->nCell;

3286 
i
=0; i<
nCñl
; i++){

3287 
u8
 *
pCñl
 = 
	`födCñl
(
pPage
, 
i
);

3289 
	`±rm≠PutOvÊPå
(
pPage
, 
pCñl
, &
rc
);

3291 if–!
pPage
->
Àaf
 ){

3292 
Pgno
 
chûdPgno
 = 
	`gë4byã
(
pCñl
);

3293 
	`±rm≠Put
(
pBt
, 
chûdPgno
, 
PTRMAP_BTREE
, 
pgno
, &
rc
);

3297 if–!
pPage
->
Àaf
 ){

3298 
Pgno
 
chûdPgno
 = 
	`gë4byã
(&
pPage
->
aD©a
[pPage->
hdrOff£t
+8]);

3299 
	`±rm≠Put
(
pBt
, 
chûdPgno
, 
PTRMAP_BTREE
, 
pgno
, &
rc
);

3302 
£t_chûd_±rm≠s_out
:

3303 
pPage
->
isInô
 = 
isInôOrig
;

3304  
rc
;

3305 
	}
}

3321 
	$modifyPagePoöãr
(
MemPage
 *
pPage
, 
Pgno
 
iFrom
, Pgnÿ
iTo
, 
u8
 
eTy≥
){

3322 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pPage
->
pBt
->
muãx
) );

3323 
	`as£π
–
	`sqlôe3PagîIswrôóbÀ
(
pPage
->
pDbPage
) );

3324 if–
eTy≥
==
PTRMAP_OVERFLOW2
 ){

3326 if–
	`gë4byã
(
pPage
->
aD©a
)!=
iFrom
 ){

3327  
SQLITE_CORRUPT_BKPT
;

3329 
	`put4byã
(
pPage
->
aD©a
, 
iTo
);

3331 
u8
 
isInôOrig
 = 
pPage
->
isInô
;

3332 
i
;

3333 
nCñl
;

3334 
rc
;

3336 
rc
 = 
	`båìInôPage
(
pPage
);

3337 if–
rc
 ) Ñc;

3338 
nCñl
 = 
pPage
->nCell;

3340 
i
=0; i<
nCñl
; i++){

3341 
u8
 *
pCñl
 = 
	`födCñl
(
pPage
, 
i
);

3342 if–
eTy≥
==
PTRMAP_OVERFLOW1
 ){

3343 
CñlInfo
 
öfo
;

3344 
pPage
->
	`xP¨£Cñl
’Page, 
pCñl
, &
öfo
);

3345 if–
öfo
.
nLoˇl
<öfo.
nPaylﬂd


3346 && 
pCñl
+
öfo
.
nSize
-1<=
pPage
->
aD©a
+pPage->
maskPage


3347 && 
iFrom
==
	`gë4byã
(
pCñl
+
öfo
.
nSize
-4)

3349 
	`put4byã
(
pCñl
+
öfo
.
nSize
-4, 
iTo
);

3353 if–
	`gë4byã
(
pCñl
)==
iFrom
 ){

3354 
	`put4byã
(
pCñl
, 
iTo
);

3360 if–
i
==
nCñl
 ){

3361 if–
eTy≥
!=
PTRMAP_BTREE
 ||

3362 
	`gë4byã
(&
pPage
->
aD©a
[pPage->
hdrOff£t
+8])!=
iFrom
 ){

3363  
SQLITE_CORRUPT_BKPT
;

3365 
	`put4byã
(&
pPage
->
aD©a
[pPage->
hdrOff£t
+8], 
iTo
);

3368 
pPage
->
isInô
 = 
isInôOrig
;

3370  
SQLITE_OK
;

3371 
	}
}

3383 
	$ªloˇãPage
(

3384 
BtSh¨ed
 *
pBt
,

3385 
MemPage
 *
pDbPage
,

3386 
u8
 
eTy≥
,

3387 
Pgno
 
iPåPage
,

3388 
Pgno
 
iFªePage
,

3389 
isCommô


3391 
MemPage
 *
pPåPage
;

3392 
Pgno
 
iDbPage
 = 
pDbPage
->
pgno
;

3393 
Pagî
 *
pPagî
 = 
pBt
->pPager;

3394 
rc
;

3396 
	`as£π
–
eTy≥
==
PTRMAP_OVERFLOW2
 ||ÉTy≥==
PTRMAP_OVERFLOW1
 ||

3397 
eTy≥
==
PTRMAP_BTREE
 ||ÉTy≥==
PTRMAP_ROOTPAGE
 );

3398 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

3399 
	`as£π
–
pDbPage
->
pBt
==pBt );

3402 
	`TRACE
(("AUTOVACUUM: Moving %dÅo freeÖage %d (ptrÖage %dÅype %d)\n",

3403 
iDbPage
, 
iFªePage
, 
iPåPage
, 
eTy≥
));

3404 
rc
 = 
	`sqlôe3PagîMovïage
(
pPagî
, 
pDbPage
->pDbPage, 
iFªePage
, 
isCommô
);

3405 if–
rc
!=
SQLITE_OK
 ){

3406  
rc
;

3408 
pDbPage
->
pgno
 = 
iFªePage
;

3418 if–
eTy≥
==
PTRMAP_BTREE
 ||ÉTy≥==
PTRMAP_ROOTPAGE
 ){

3419 
rc
 = 
	`£tChûdPåm≠s
(
pDbPage
);

3420 if–
rc
!=
SQLITE_OK
 ){

3421  
rc
;

3424 
Pgno
 
√xtOvÊ
 = 
	`gë4byã
(
pDbPage
->
aD©a
);

3425 if–
√xtOvÊ
!=0 ){

3426 
	`±rm≠Put
(
pBt
, 
√xtOvÊ
, 
PTRMAP_OVERFLOW2
, 
iFªePage
, &
rc
);

3427 if–
rc
!=
SQLITE_OK
 ){

3428  
rc
;

3437 if–
eTy≥
!=
PTRMAP_ROOTPAGE
 ){

3438 
rc
 = 
	`båìGëPage
(
pBt
, 
iPåPage
, &
pPåPage
, 0);

3439 if–
rc
!=
SQLITE_OK
 ){

3440  
rc
;

3442 
rc
 = 
	`sqlôe3PagîWrôe
(
pPåPage
->
pDbPage
);

3443 if–
rc
!=
SQLITE_OK
 ){

3444 
	`ªÀa£Page
(
pPåPage
);

3445  
rc
;

3447 
rc
 = 
	`modifyPagePoöãr
(
pPåPage
, 
iDbPage
, 
iFªePage
, 
eTy≥
);

3448 
	`ªÀa£Page
(
pPåPage
);

3449 if–
rc
==
SQLITE_OK
 ){

3450 
	`±rm≠Put
(
pBt
, 
iFªePage
, 
eTy≥
, 
iPåPage
, &
rc
);

3453  
rc
;

3454 
	}
}

3457 
ÆloˇãBåìPage
(
BtSh¨ed
 *, 
MemPage
 **, 
Pgno
 *, Pgno, 
u8
);

3476 
	$ö¸VacuumSãp
(
BtSh¨ed
 *
pBt
, 
Pgno
 
nFö
, Pgnÿ
iLa°Pg
, 
bCommô
){

3477 
Pgno
 
nFªeLi°
;

3478 
rc
;

3480 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

3481 
	`as£π
–
iLa°Pg
>
nFö
 );

3483 if–!
	`PTRMAP_ISPAGE
(
pBt
, 
iLa°Pg
Ë&& iLa°Pg!=
	`PENDING_BYTE_PAGE
(pBt) ){

3484 
u8
 
eTy≥
;

3485 
Pgno
 
iPåPage
;

3487 
nFªeLi°
 = 
	`gë4byã
(&
pBt
->
pPage1
->
aD©a
[36]);

3488 if–
nFªeLi°
==0 ){

3489  
SQLITE_DONE
;

3492 
rc
 = 
	`±rm≠Gë
(
pBt
, 
iLa°Pg
, &
eTy≥
, &
iPåPage
);

3493 if–
rc
!=
SQLITE_OK
 ){

3494  
rc
;

3496 if–
eTy≥
==
PTRMAP_ROOTPAGE
 ){

3497  
SQLITE_CORRUPT_BKPT
;

3500 if–
eTy≥
==
PTRMAP_FREEPAGE
 ){

3501 if–
bCommô
==0 ){

3507 
Pgno
 
iFªePg
;

3508 
MemPage
 *
pFªePg
;

3509 
rc
 = 
	`ÆloˇãBåìPage
(
pBt
, &
pFªePg
, &
iFªePg
, 
iLa°Pg
, 
BTALLOC_EXACT
);

3510 if–
rc
!=
SQLITE_OK
 ){

3511  
rc
;

3513 
	`as£π
–
iFªePg
==
iLa°Pg
 );

3514 
	`ªÀa£Page
(
pFªePg
);

3517 
Pgno
 
iFªePg
;

3518 
MemPage
 *
pLa°Pg
;

3519 
u8
 
eMode
 = 
BTALLOC_ANY
;

3520 
Pgno
 
iNór
 = 0;

3522 
rc
 = 
	`båìGëPage
(
pBt
, 
iLa°Pg
, &
pLa°Pg
, 0);

3523 if–
rc
!=
SQLITE_OK
 ){

3524  
rc
;

3534 if–
bCommô
==0 ){

3535 
eMode
 = 
BTALLOC_LE
;

3536 
iNór
 = 
nFö
;

3539 
MemPage
 *
pFªePg
;

3540 
rc
 = 
	`ÆloˇãBåìPage
(
pBt
, &
pFªePg
, &
iFªePg
, 
iNór
, 
eMode
);

3541 if–
rc
!=
SQLITE_OK
 ){

3542 
	`ªÀa£Page
(
pLa°Pg
);

3543  
rc
;

3545 
	`ªÀa£Page
(
pFªePg
);

3546 } 
bCommô
 && 
iFªePg
>
nFö
 );

3547 
	`as£π
–
iFªePg
<
iLa°Pg
 );

3549 
rc
 = 
	`ªloˇãPage
(
pBt
, 
pLa°Pg
, 
eTy≥
, 
iPåPage
, 
iFªePg
, 
bCommô
);

3550 
	`ªÀa£Page
(
pLa°Pg
);

3551 if–
rc
!=
SQLITE_OK
 ){

3552  
rc
;

3557 if–
bCommô
==0 ){

3559 
iLa°Pg
--;

3560 } 
iLa°Pg
==
	`PENDING_BYTE_PAGE
(
pBt
Ë|| 
	`PTRMAP_ISPAGE
(pBt, iLastPg) );

3561 
pBt
->
bDoTrunˇã
 = 1;

3562 
pBt
->
nPage
 = 
iLa°Pg
;

3564  
SQLITE_OK
;

3565 
	}
}

3572 
Pgno
 
	$föÆDbSize
(
BtSh¨ed
 *
pBt
, 
Pgno
 
nOrig
, Pgnÿ
nFªe
){

3573 
nE¡ry
;

3574 
Pgno
 
nPåm≠
;

3575 
Pgno
 
nFö
;

3577 
nE¡ry
 = 
pBt
->
ußbÀSize
/5;

3578 
nPåm≠
 = (
nFªe
-
nOrig
+
	`PTRMAP_PAGENO
(
pBt
,ÇOrig)+
nE¡ry
)/nEntry;

3579 
nFö
 = 
nOrig
 - 
nFªe
 - 
nPåm≠
;

3580 if–
nOrig
>
	`PENDING_BYTE_PAGE
(
pBt
Ë&& 
nFö
<PENDING_BYTE_PAGE(pBt) ){

3581 
nFö
--;

3583  
	`PTRMAP_ISPAGE
(
pBt
, 
nFö
Ë||ÇFö==
	`PENDING_BYTE_PAGE
(pBt) ){

3584 
nFö
--;

3587  
nFö
;

3588 
	}
}

3598 
	$sqlôe3BåìIn¸Vacuum
(
Båì
 *
p
){

3599 
rc
;

3600 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

3602 
	`sqlôe3BåìE¡î
(
p
);

3603 
	`as£π
–
pBt
->
öTønß˘i⁄
==
TRANS_WRITE
 && 
p
->
öTøns
==TRANS_WRITE );

3604 if–!
pBt
->
autoVacuum
 ){

3605 
rc
 = 
SQLITE_DONE
;

3607 
Pgno
 
nOrig
 = 
	`båìPagecou¡
(
pBt
);

3608 
Pgno
 
nFªe
 = 
	`gë4byã
(&
pBt
->
pPage1
->
aD©a
[36]);

3609 
Pgno
 
nFö
 = 
	`föÆDbSize
(
pBt
, 
nOrig
, 
nFªe
);

3611 if–
nOrig
<
nFö
 ){

3612 
rc
 = 
SQLITE_CORRUPT_BKPT
;

3613 }if–
nFªe
>0 ){

3614 
rc
 = 
	`ßveAŒCurs‹s
(
pBt
, 0, 0);

3615 if–
rc
==
SQLITE_OK
 ){

3616 
	`övÆid©eAŒOvîÊowCache
(
pBt
);

3617 
rc
 = 
	`ö¸VacuumSãp
(
pBt
, 
nFö
, 
nOrig
, 0);

3619 if–
rc
==
SQLITE_OK
 ){

3620 
rc
 = 
	`sqlôe3PagîWrôe
(
pBt
->
pPage1
->
pDbPage
);

3621 
	`put4byã
(&
pBt
->
pPage1
->
aD©a
[28],ÖBt->
nPage
);

3624 
rc
 = 
SQLITE_DONE
;

3627 
	`sqlôe3BåìLóve
(
p
);

3628  
rc
;

3629 
	}
}

3640 
	$autoVacuumCommô
(
BtSh¨ed
 *
pBt
){

3641 
rc
 = 
SQLITE_OK
;

3642 
Pagî
 *
pPagî
 = 
pBt
->pPager;

3643 
	`VVA_ONLY
–
nRef
 = 
	`sqlôe3PagîRefcou¡
(
pPagî
); )

3645 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

3646 
	`övÆid©eAŒOvîÊowCache
(
pBt
);

3647 
	`as£π
(
pBt
->
autoVacuum
);

3648 if–!
pBt
->
ö¸Vacuum
 ){

3649 
Pgno
 
nFö
;

3650 
Pgno
 
nFªe
;

3651 
Pgno
 
iFªe
;

3652 
Pgno
 
nOrig
;

3654 
nOrig
 = 
	`båìPagecou¡
(
pBt
);

3655 if–
	`PTRMAP_ISPAGE
(
pBt
, 
nOrig
Ë||ÇOrig==
	`PENDING_BYTE_PAGE
(pBt) ){

3660  
SQLITE_CORRUPT_BKPT
;

3663 
nFªe
 = 
	`gë4byã
(&
pBt
->
pPage1
->
aD©a
[36]);

3664 
nFö
 = 
	`föÆDbSize
(
pBt
, 
nOrig
, 
nFªe
);

3665 if–
nFö
>
nOrig
 )  
SQLITE_CORRUPT_BKPT
;

3666 if–
nFö
<
nOrig
 ){

3667 
rc
 = 
	`ßveAŒCurs‹s
(
pBt
, 0, 0);

3669 
iFªe
=
nOrig
; iFªe>
nFö
 && 
rc
==
SQLITE_OK
; iFree--){

3670 
rc
 = 
	`ö¸VacuumSãp
(
pBt
, 
nFö
, 
iFªe
, 1);

3672 if–(
rc
==
SQLITE_DONE
 ||Ñc==
SQLITE_OK
Ë&& 
nFªe
>0 ){

3673 
rc
 = 
	`sqlôe3PagîWrôe
(
pBt
->
pPage1
->
pDbPage
);

3674 
	`put4byã
(&
pBt
->
pPage1
->
aD©a
[32], 0);

3675 
	`put4byã
(&
pBt
->
pPage1
->
aD©a
[36], 0);

3676 
	`put4byã
(&
pBt
->
pPage1
->
aD©a
[28], 
nFö
);

3677 
pBt
->
bDoTrunˇã
 = 1;

3678 
pBt
->
nPage
 = 
nFö
;

3680 if–
rc
!=
SQLITE_OK
 ){

3681 
	`sqlôe3PagîRﬁlback
(
pPagî
);

3685 
	`as£π
–
nRef
>=
	`sqlôe3PagîRefcou¡
(
pPagî
) );

3686  
rc
;

3687 
	}
}

3690 
	#£tChûdPåm≠s
(
x
Ë
SQLITE_OK


	)

3719 
	$sqlôe3BåìCommôPha£O√
(
Båì
 *
p
, c⁄° *
zMa°î
){

3720 
rc
 = 
SQLITE_OK
;

3721 if–
p
->
öTøns
==
TRANS_WRITE
 ){

3722 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

3723 
	`sqlôe3BåìE¡î
(
p
);

3724 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


3725 if–
pBt
->
autoVacuum
 ){

3726 
rc
 = 
	`autoVacuumCommô
(
pBt
);

3727 if–
rc
!=
SQLITE_OK
 ){

3728 
	`sqlôe3BåìLóve
(
p
);

3729  
rc
;

3732 if–
pBt
->
bDoTrunˇã
 ){

3733 
	`sqlôe3PagîTrunˇãImage
(
pBt
->
pPagî
,ÖBt->
nPage
);

3736 
rc
 = 
	`sqlôe3PagîCommôPha£O√
(
pBt
->
pPagî
, 
zMa°î
, 0);

3737 
	`sqlôe3BåìLóve
(
p
);

3739  
rc
;

3740 
	}
}

3746 
	$båìEndTønß˘i⁄
(
Båì
 *
p
){

3747 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

3748 
sqlôe3
 *
db
 = 
p
->db;

3749 
	`as£π
–
	`sqlôe3BåìHﬁdsMuãx
(
p
) );

3751 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


3752 
pBt
->
bDoTrunˇã
 = 0;

3754 if–
p
->
öTøns
>
TRANS_NONE
 && 
db
->
nVdbeRód
>1 ){

3758 
	`downgødeAŒSh¨edCacheTabÀLocks
(
p
);

3759 
p
->
öTøns
 = 
TRANS_READ
;

3765 if–
p
->
öTøns
!=
TRANS_NONE
 ){

3766 
	`˛órAŒSh¨edCacheTabÀLocks
(
p
);

3767 
pBt
->
nTønß˘i⁄
--;

3768 if–0==
pBt
->
nTønß˘i⁄
 ){

3769 
pBt
->
öTønß˘i⁄
 = 
TRANS_NONE
;

3775 
p
->
öTøns
 = 
TRANS_NONE
;

3776 
	`u∆ockBåìIfUnu£d
(
pBt
);

3779 
	`båìI¡egrôy
(
p
);

3780 
	}
}

3808 
	$sqlôe3BåìCommôPha£Two
(
Båì
 *
p
, 
bCÀ™up
){

3810 if–
p
->
öTøns
==
TRANS_NONE
 )  
SQLITE_OK
;

3811 
	`sqlôe3BåìE¡î
(
p
);

3812 
	`båìI¡egrôy
(
p
);

3817 if–
p
->
öTøns
==
TRANS_WRITE
 ){

3818 
rc
;

3819 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

3820 
	`as£π
–
pBt
->
öTønß˘i⁄
==
TRANS_WRITE
 );

3821 
	`as£π
–
pBt
->
nTønß˘i⁄
>0 );

3822 
rc
 = 
	`sqlôe3PagîCommôPha£Two
(
pBt
->
pPagî
);

3823 if–
rc
!=
SQLITE_OK
 && 
bCÀ™up
==0 ){

3824 
	`sqlôe3BåìLóve
(
p
);

3825  
rc
;

3827 
p
->
iD©aVîsi⁄
--;

3828 
pBt
->
öTønß˘i⁄
 = 
TRANS_READ
;

3829 
	`båìCÀ¨HasC⁄ã¡
(
pBt
);

3832 
	`båìEndTønß˘i⁄
(
p
);

3833 
	`sqlôe3BåìLóve
(
p
);

3834  
SQLITE_OK
;

3835 
	}
}

3840 
	$sqlôe3BåìCommô
(
Båì
 *
p
){

3841 
rc
;

3842 
	`sqlôe3BåìE¡î
(
p
);

3843 
rc
 = 
	`sqlôe3BåìCommôPha£O√
(
p
, 0);

3844 if–
rc
==
SQLITE_OK
 ){

3845 
rc
 = 
	`sqlôe3BåìCommôPha£Two
(
p
, 0);

3847 
	`sqlôe3BåìLóve
(
p
);

3848  
rc
;

3849 
	}
}

3877 
	$sqlôe3BåìTrùAŒCurs‹s
(
Båì
 *
pBåì
, 
îrCode
, 
wrôeO∆y
){

3878 
BtCurs‹
 *
p
;

3879 
rc
 = 
SQLITE_OK
;

3881 
	`as£π
–(
wrôeO∆y
==0 || wrôeO∆y==1Ë&& 
BTCF_WrôeFœg
==1 );

3882 if–
pBåì
 ){

3883 
	`sqlôe3BåìE¡î
(
pBåì
);

3884 
p
=
pBåì
->
pBt
->
pCurs‹
;Ö;Öı->
pNext
){

3885 
i
;

3886 if–
wrôeO∆y
 && (
p
->
curFœgs
 & 
BTCF_WrôeFœg
)==0 ){

3887 if–
p
->
eSèã
==
CURSOR_VALID
 ||Ö->eSèã==
CURSOR_SKIPNEXT
 ){

3888 
rc
 = 
	`ßveCurs‹Posôi⁄
(
p
);

3889 if–
rc
!=
SQLITE_OK
 ){

3890 ()
	`sqlôe3BåìTrùAŒCurs‹s
(
pBåì
, 
rc
, 0);

3895 
	`sqlôe3BåìCÀ¨Curs‹
(
p
);

3896 
p
->
eSèã
 = 
CURSOR_FAULT
;

3897 
p
->
skùNext
 = 
îrCode
;

3899 
i
=0; i<=
p
->
iPage
; i++){

3900 
	`ªÀa£Page
(
p
->
≠Page
[
i
]);

3901 
p
->
≠Page
[
i
] = 0;

3904 
	`sqlôe3BåìLóve
(
pBåì
);

3906  
rc
;

3907 
	}
}

3920 
	$sqlôe3BåìRﬁlback
(
Båì
 *
p
, 
åùCode
, 
wrôeO∆y
){

3921 
rc
;

3922 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

3923 
MemPage
 *
pPage1
;

3925 
	`as£π
–
wrôeO∆y
==1 || writeOnly==0 );

3926 
	`as£π
–
åùCode
==
SQLITE_ABORT_ROLLBACK
 ||ÅrùCode==
SQLITE_OK
 );

3927 
	`sqlôe3BåìE¡î
(
p
);

3928 if–
åùCode
==
SQLITE_OK
 ){

3929 
rc
 = 
åùCode
 = 
	`ßveAŒCurs‹s
(
pBt
, 0, 0);

3930 if–
rc
 ) 
wrôeO∆y
 = 0;

3932 
rc
 = 
SQLITE_OK
;

3934 if–
åùCode
 ){

3935 
rc2
 = 
	`sqlôe3BåìTrùAŒCurs‹s
(
p
, 
åùCode
, 
wrôeO∆y
);

3936 
	`as£π
–
rc
==
SQLITE_OK
 || (
wrôeO∆y
==0 && 
rc2
==SQLITE_OK) );

3937 if–
rc2
!=
SQLITE_OK
 ) 
rc
 =Ñc2;

3939 
	`båìI¡egrôy
(
p
);

3941 if–
p
->
öTøns
==
TRANS_WRITE
 ){

3942 
rc2
;

3944 
	`as£π
–
TRANS_WRITE
==
pBt
->
öTønß˘i⁄
 );

3945 
rc2
 = 
	`sqlôe3PagîRﬁlback
(
pBt
->
pPagî
);

3946 if–
rc2
!=
SQLITE_OK
 ){

3947 
rc
 = 
rc2
;

3953 if–
	`båìGëPage
(
pBt
, 1, &
pPage1
, 0)==
SQLITE_OK
 ){

3954 
nPage
 = 
	`gë4byã
(28+(
u8
*)
pPage1
->
aD©a
);

3955 
	`ã°ˇ£
–
nPage
==0 );

3956 if–
nPage
==0 ) 
	`sqlôe3PagîPagecou¡
(
pBt
->
pPagî
, &nPage);

3957 
	`ã°ˇ£
–
pBt
->
nPage
!=nPage );

3958 
pBt
->
nPage
 =ÇPage;

3959 
	`ªÀa£Page
(
pPage1
);

3961 
	`as£π
–
	`cou¡VÆidCurs‹s
(
pBt
, 1)==0 );

3962 
pBt
->
öTønß˘i⁄
 = 
TRANS_READ
;

3963 
	`båìCÀ¨HasC⁄ã¡
(
pBt
);

3966 
	`båìEndTønß˘i⁄
(
p
);

3967 
	`sqlôe3BåìLóve
(
p
);

3968  
rc
;

3969 
	}
}

3989 
	$sqlôe3BåìBegöStmt
(
Båì
 *
p
, 
iSèãmít
){

3990 
rc
;

3991 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

3992 
	`sqlôe3BåìE¡î
(
p
);

3993 
	`as£π
–
p
->
öTøns
==
TRANS_WRITE
 );

3994 
	`as£π
–(
pBt
->
btsFœgs
 & 
BTS_READ_ONLY
)==0 );

3995 
	`as£π
–
iSèãmít
>0 );

3996 
	`as£π
–
iSèãmít
>
p
->
db
->
nSavïoöt
 );

3997 
	`as£π
–
pBt
->
öTønß˘i⁄
==
TRANS_WRITE
 );

4003 
rc
 = 
	`sqlôe3PagîO≥nSavïoöt
(
pBt
->
pPagî
, 
iSèãmít
);

4004 
	`sqlôe3BåìLóve
(
p
);

4005  
rc
;

4006 
	}
}

4020 
	$sqlôe3BåìSavïoöt
(
Båì
 *
p
, 
›
, 
iSavïoöt
){

4021 
rc
 = 
SQLITE_OK
;

4022 if–
p
 &&Ö->
öTøns
==
TRANS_WRITE
 ){

4023 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

4024 
	`as£π
–
›
==
SAVEPOINT_RELEASE
 || op==
SAVEPOINT_ROLLBACK
 );

4025 
	`as£π
–
iSavïoöt
>=0 || (iSavïoöt==-1 && 
›
==
SAVEPOINT_ROLLBACK
) );

4026 
	`sqlôe3BåìE¡î
(
p
);

4027 
rc
 = 
	`sqlôe3PagîSavïoöt
(
pBt
->
pPagî
, 
›
, 
iSavïoöt
);

4028 if–
rc
==
SQLITE_OK
 ){

4029 if–
iSavïoöt
<0 && (
pBt
->
btsFœgs
 & 
BTS_INITIALLY_EMPTY
)!=0 ){

4030 
pBt
->
nPage
 = 0;

4032 
rc
 = 
	`√wD©aba£
(
pBt
);

4033 
pBt
->
nPage
 = 
	`gë4byã
(28 +ÖBt->
pPage1
->
aD©a
);

4038 
	`as£π
–
pBt
->
nPage
>0 );

4040 
	`sqlôe3BåìLóve
(
p
);

4042  
rc
;

4043 
	}
}

4087 
	$båìCurs‹
(

4088 
Båì
 *
p
,

4089 
iTabÀ
,

4090 
wrFœg
,

4091 
KeyInfo
 *
pKeyInfo
,

4092 
BtCurs‹
 *
pCur


4094 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

4095 
BtCurs‹
 *
pX
;

4097 
	`as£π
–
	`sqlôe3BåìHﬁdsMuãx
(
p
) );

4098 
	`as£π
–
wrFœg
==0

4099 || 
wrFœg
==
BTREE_WRCSR


4100 || 
wrFœg
==(
BTREE_WRCSR
|
BTREE_FORDELETE
)

4107 
	`as£π
–
	`hasSh¨edCacheTabÀLock
(
p
, 
iTabÀ
, 
pKeyInfo
!=0, (
wrFœg
?2:1)) );

4108 
	`as£π
–
wrFœg
==0 || !
	`hasRódC⁄Êi˘s
(
p
, 
iTabÀ
) );

4111 
	`as£π
–
p
->
öTøns
>
TRANS_NONE
 );

4112 
	`as£π
–
wrFœg
==0 || 
p
->
öTøns
==
TRANS_WRITE
 );

4113 
	`as£π
–
pBt
->
pPage1
 &&ÖBt->pPage1->
aD©a
 );

4114 
	`as£π
–
wrFœg
==0 || (
pBt
->
btsFœgs
 & 
BTS_READ_ONLY
)==0 );

4116 if–
wrFœg
 ){

4117 
	`ÆloˇãTempS∑˚
(
pBt
);

4118 if–
pBt
->
pTmpS∑˚
==0 )  
SQLITE_NOMEM_BKPT
;

4120 if–
iTabÀ
==1 && 
	`båìPagecou¡
(
pBt
)==0 ){

4121 
	`as£π
–
wrFœg
==0 );

4122 
iTabÀ
 = 0;

4127 
pCur
->
pgnoRoŸ
 = (
Pgno
)
iTabÀ
;

4128 
pCur
->
iPage
 = -1;

4129 
pCur
->
pKeyInfo
 =ÖKeyInfo;

4130 
pCur
->
pBåì
 = 
p
;

4131 
pCur
->
pBt
 =ÖBt;

4132 
pCur
->
curFœgs
 = 
wrFœg
 ? 
BTCF_WrôeFœg
 : 0;

4133 
pCur
->
curPagîFœgs
 = 
wrFœg
 ? 0 : 
PAGER_GET_READONLY
;

4136 
pX
=
pBt
->
pCurs‹
;ÖX;ÖXıX->
pNext
){

4137 if–
pX
->
pgnoRoŸ
==(
Pgno
)
iTabÀ
 ){

4138 
pX
->
curFœgs
 |
BTCF_Mu…ùÀ
;

4139 
pCur
->
curFœgs
 |
BTCF_Mu…ùÀ
;

4142 
pCur
->
pNext
 = 
pBt
->
pCurs‹
;

4143 
pBt
->
pCurs‹
 = 
pCur
;

4144 
pCur
->
eSèã
 = 
CURSOR_INVALID
;

4145  
SQLITE_OK
;

4146 
	}
}

4147 
	$sqlôe3BåìCurs‹
(

4148 
Båì
 *
p
,

4149 
iTabÀ
,

4150 
wrFœg
,

4151 
KeyInfo
 *
pKeyInfo
,

4152 
BtCurs‹
 *
pCur


4154 
rc
;

4155 if–
iTabÀ
<1 ){

4156 
rc
 = 
SQLITE_CORRUPT_BKPT
;

4158 
	`sqlôe3BåìE¡î
(
p
);

4159 
rc
 = 
	`båìCurs‹
(
p
, 
iTabÀ
, 
wrFœg
, 
pKeyInfo
, 
pCur
);

4160 
	`sqlôe3BåìLóve
(
p
);

4162  
rc
;

4163 
	}
}

4173 
	$sqlôe3BåìCurs‹Size
(){

4174  
	`ROUND8
((
BtCurs‹
));

4175 
	}
}

4185 
	$sqlôe3BåìCurs‹Zîo
(
BtCurs‹
 *
p
){

4186 
	`mem£t
(
p
, 0, 
	`off£tof
(
BtCurs‹
, 
iPage
));

4187 
	}
}

4193 
	$sqlôe3BåìClo£Curs‹
(
BtCurs‹
 *
pCur
){

4194 
Båì
 *
pBåì
 = 
pCur
->pBtree;

4195 if–
pBåì
 ){

4196 
i
;

4197 
BtSh¨ed
 *
pBt
 = 
pCur
->pBt;

4198 
	`sqlôe3BåìE¡î
(
pBåì
);

4199 
	`sqlôe3BåìCÀ¨Curs‹
(
pCur
);

4200 
	`as£π
–
pBt
->
pCurs‹
!=0 );

4201 if–
pBt
->
pCurs‹
==
pCur
 ){

4202 
pBt
->
pCurs‹
 = 
pCur
->
pNext
;

4204 
BtCurs‹
 *
pPªv
 = 
pBt
->
pCurs‹
;

4206 if–
pPªv
->
pNext
==
pCur
 ){

4207 
pPªv
->
pNext
 = 
pCur
->pNext;

4210 
pPªv
 =ÖPªv->
pNext
;

4211 } 
	`ALWAYS
(
pPªv
) );

4213 
i
=0; i<=
pCur
->
iPage
; i++){

4214 
	`ªÀa£Page
(
pCur
->
≠Page
[
i
]);

4216 
	`u∆ockBåìIfUnu£d
(
pBt
);

4217 
	`sqlôe3_‰ì
(
pCur
->
aOvîÊow
);

4219 
	`sqlôe3BåìLóve
(
pBåì
);

4221  
SQLITE_OK
;

4222 
	}
}

4232 #i‚de‡
NDEBUG


4233 
	$as£πCñlInfo
(
BtCurs‹
 *
pCur
){

4234 
CñlInfo
 
öfo
;

4235 
iPage
 = 
pCur
->iPage;

4236 
	`mem£t
(&
öfo
, 0, (info));

4237 
	`båìP¨£Cñl
(
pCur
->
≠Page
[
iPage
],ÖCur->
aiIdx
[iPage], &
öfo
);

4238 
	`as£π
–
CORRUPT_DB
 || 
	`memcmp
(&
öfo
, &
pCur
->info, (info))==0 );

4239 
	}
}

4241 
	#as£πCñlInfo
(
x
)

	)

4243 
SQLITE_NOINLINE
 
	$gëCñlInfo
(
BtCurs‹
 *
pCur
){

4244 if–
pCur
->
öfo
.
nSize
==0 ){

4245 
iPage
 = 
pCur
->iPage;

4246 
pCur
->
curFœgs
 |
BTCF_VÆidNKey
;

4247 
	`båìP¨£Cñl
(
pCur
->
≠Page
[
iPage
],pCur->
aiIdx
[iPage],&pCur->
öfo
);

4249 
	`as£πCñlInfo
(
pCur
);

4251 
	}
}

4253 #i‚de‡
NDEBUG


4259 
	$sqlôe3BåìCurs‹IsVÆid
(
BtCurs‹
 *
pCur
){

4260  
pCur
 &&ÖCur->
eSèã
==
CURSOR_VALID
;

4261 
	}
}

4276 
	$sqlôe3BåìKeySize
(
BtCurs‹
 *
pCur
, 
i64
 *
pSize
){

4277 
	`as£π
–
	`curs‹HﬁdsMuãx
(
pCur
) );

4278 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 );

4279 
	`gëCñlInfo
(
pCur
);

4280 *
pSize
 = 
pCur
->
öfo
.
nKey
;

4281  
SQLITE_OK
;

4282 
	}
}

4296 
	$sqlôe3BåìD©aSize
(
BtCurs‹
 *
pCur
, 
u32
 *
pSize
){

4297 
	`as£π
–
	`curs‹OwnsBtSh¨ed
(
pCur
) );

4298 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 );

4299 
	`as£π
–
pCur
->
iPage
>=0 );

4300 
	`as£π
–
pCur
->
iPage
<
BTCURSOR_MAX_DEPTH
 );

4301 
	`as£π
–
pCur
->
≠Page
[pCur->
iPage
]->
ötKeyLóf
==1 );

4302 
	`gëCñlInfo
(
pCur
);

4303 *
pSize
 = 
pCur
->
öfo
.
nPaylﬂd
;

4304  
SQLITE_OK
;

4305 
	}
}

4326 
	$gëOvîÊowPage
(

4327 
BtSh¨ed
 *
pBt
,

4328 
Pgno
 
ovÊ
,

4329 
MemPage
 **
µPage
,

4330 
Pgno
 *
pPgnoNext


4332 
Pgno
 
√xt
 = 0;

4333 
MemPage
 *
pPage
 = 0;

4334 
rc
 = 
SQLITE_OK
;

4336 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

4337 
	`as£π
(
pPgnoNext
);

4339 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


4346 if–
pBt
->
autoVacuum
 ){

4347 
Pgno
 
pgno
;

4348 
Pgno
 
iGuess
 = 
ovÊ
+1;

4349 
u8
 
eTy≥
;

4351  
	`PTRMAP_ISPAGE
(
pBt
, 
iGuess
Ë|| iGuess==
	`PENDING_BYTE_PAGE
(pBt) ){

4352 
iGuess
++;

4355 if–
iGuess
<=
	`båìPagecou¡
(
pBt
) ){

4356 
rc
 = 
	`±rm≠Gë
(
pBt
, 
iGuess
, &
eTy≥
, &
pgno
);

4357 if–
rc
==
SQLITE_OK
 && 
eTy≥
==
PTRMAP_OVERFLOW2
 && 
pgno
==
ovÊ
 ){

4358 
√xt
 = 
iGuess
;

4359 
rc
 = 
SQLITE_DONE
;

4365 
	`as£π
–
√xt
==0 || 
rc
==
SQLITE_DONE
 );

4366 if–
rc
==
SQLITE_OK
 ){

4367 
rc
 = 
	`båìGëPage
(
pBt
, 
ovÊ
, &
pPage
, (
µPage
==0Ë? 
PAGER_GET_READONLY
 : 0);

4368 
	`as£π
–
rc
==
SQLITE_OK
 || 
pPage
==0 );

4369 if–
rc
==
SQLITE_OK
 ){

4370 
√xt
 = 
	`gë4byã
(
pPage
->
aD©a
);

4374 *
pPgnoNext
 = 
√xt
;

4375 if–
µPage
 ){

4376 *
µPage
 = 
pPage
;

4378 
	`ªÀa£Page
(
pPage
);

4380  (
rc
==
SQLITE_DONE
 ? 
SQLITE_OK
 :Ñc);

4381 
	}
}

4394 
	$c›yPaylﬂd
(

4395 *
pPaylﬂd
,

4396 *
pBuf
,

4397 
nByã
,

4398 
eOp
,

4399 
DbPage
 *
pDbPage


4401 if–
eOp
 ){

4403 
rc
 = 
	`sqlôe3PagîWrôe
(
pDbPage
);

4404 if–
rc
!=
SQLITE_OK
 ){

4405  
rc
;

4407 
	`mem˝y
(
pPaylﬂd
, 
pBuf
, 
nByã
);

4410 
	`mem˝y
(
pBuf
, 
pPaylﬂd
, 
nByã
);

4412  
SQLITE_OK
;

4413 
	}
}

4445 
	$ac˚ssPaylﬂd
(

4446 
BtCurs‹
 *
pCur
,

4447 
u32
 
off£t
,

4448 
u32
 
amt
,

4449 *
pBuf
,

4450 
eOp


4452 *
aPaylﬂd
;

4453 
rc
 = 
SQLITE_OK
;

4454 
iIdx
 = 0;

4455 
MemPage
 *
pPage
 = 
pCur
->
≠Page
[pCur->
iPage
];

4456 
BtSh¨ed
 *
pBt
 = 
pCur
->pBt;

4457 #ifde‡
SQLITE_DIRECT_OVERFLOW_READ


4458 * c⁄° 
pBufSèπ
 = 
pBuf
;

4459 
bEnd
;

4462 
	`as£π
–
pPage
 );

4463 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 );

4464 
	`as£π
–
pCur
->
aiIdx
[pCur->
iPage
]<
pPage
->
nCñl
 );

4465 
	`as£π
–
	`curs‹HﬁdsMuãx
(
pCur
) );

4466 
	`as£π
–
eOp
!=2 || 
off£t
==0 );

4468 
	`gëCñlInfo
(
pCur
);

4469 
aPaylﬂd
 = 
pCur
->
öfo
.
pPaylﬂd
;

4470 #ifde‡
SQLITE_DIRECT_OVERFLOW_READ


4471 
bEnd
 = 
off£t
+
amt
==
pCur
->
öfo
.
nPaylﬂd
;

4473 
	`as£π
–
off£t
+
amt
 <
pCur
->
öfo
.
nPaylﬂd
 );

4475 
	`as£π
–
aPaylﬂd
 > 
pPage
->
aD©a
 );

4476 if–(
u±r
)(
aPaylﬂd
 - 
pPage
->
aD©a
Ë> (
pBt
->
ußbÀSize
 - 
pCur
->
öfo
.
nLoˇl
) ){

4482  
SQLITE_CORRUPT_BKPT
;

4486 if–
off£t
<
pCur
->
öfo
.
nLoˇl
 ){

4487 
a
 = 
amt
;

4488 if–
a
+
off£t
>
pCur
->
öfo
.
nLoˇl
 ){

4489 
a
 = 
pCur
->
öfo
.
nLoˇl
 - 
off£t
;

4491 
rc
 = 
	`c›yPaylﬂd
(&
aPaylﬂd
[
off£t
], 
pBuf
, 
a
, (
eOp
 & 0x01), 
pPage
->
pDbPage
);

4492 
off£t
 = 0;

4493 
pBuf
 +
a
;

4494 
amt
 -
a
;

4496 
off£t
 -
pCur
->
öfo
.
nLoˇl
;

4500 if–
rc
==
SQLITE_OK
 && 
amt
>0 ){

4501 c⁄° 
u32
 
ovÊSize
 = 
pBt
->
ußbÀSize
 - 4;

4502 
Pgno
 
√xtPage
;

4504 
√xtPage
 = 
	`gë4byã
(&
aPaylﬂd
[
pCur
->
öfo
.
nLoˇl
]);

4514 if–
eOp
!=2 && (
pCur
->
curFœgs
 & 
BTCF_VÆidOvÊ
)==0 ){

4515 
nOvÊ
 = (
pCur
->
öfo
.
nPaylﬂd
-pCur->öfo.
nLoˇl
+
ovÊSize
-1)/ovflSize;

4516 if–
nOvÊ
>
pCur
->
nOvÊAŒoc
 ){

4517 
Pgno
 *
aNew
 = (Pgno*)
	`sqlôe3RóŒoc
(

4518 
pCur
->
aOvîÊow
, 
nOvÊ
*2*(
Pgno
)

4520 if–
aNew
==0 ){

4521 
rc
 = 
SQLITE_NOMEM_BKPT
;

4523 
pCur
->
nOvÊAŒoc
 = 
nOvÊ
*2;

4524 
pCur
->
aOvîÊow
 = 
aNew
;

4527 if–
rc
==
SQLITE_OK
 ){

4528 
	`mem£t
(
pCur
->
aOvîÊow
, 0, 
nOvÊ
*(
Pgno
));

4529 
pCur
->
curFœgs
 |
BTCF_VÆidOvÊ
;

4537 if–(
pCur
->
curFœgs
 & 
BTCF_VÆidOvÊ
)!=0

4538 && 
pCur
->
aOvîÊow
[
off£t
/
ovÊSize
]

4540 
iIdx
 = (
off£t
/
ovÊSize
);

4541 
√xtPage
 = 
pCur
->
aOvîÊow
[
iIdx
];

4542 
off£t
 = (off£t%
ovÊSize
);

4545  ; 
rc
==
SQLITE_OK
 && 
amt
>0 && 
√xtPage
; 
iIdx
++){

4548 if–(
pCur
->
curFœgs
 & 
BTCF_VÆidOvÊ
)!=0 ){

4549 
	`as£π
–
pCur
->
aOvîÊow
[
iIdx
]==0

4550 || 
pCur
->
aOvîÊow
[
iIdx
]==
√xtPage


4551 || 
CORRUPT_DB
 );

4552 
pCur
->
aOvîÊow
[
iIdx
] = 
√xtPage
;

4555 if–
off£t
>=
ovÊSize
 ){

4565 
	`as£π
–
eOp
!=2 );

4566 
	`as£π
–
pCur
->
curFœgs
 & 
BTCF_VÆidOvÊ
 );

4567 
	`as£π
–
pCur
->
pBåì
->
db
==
pBt
->db );

4568 if–
pCur
->
aOvîÊow
[
iIdx
+1] ){

4569 
√xtPage
 = 
pCur
->
aOvîÊow
[
iIdx
+1];

4571 
rc
 = 
	`gëOvîÊowPage
(
pBt
, 
√xtPage
, 0, &nextPage);

4573 
off£t
 -
ovÊSize
;

4578 #ifde‡
SQLITE_DIRECT_OVERFLOW_READ


4579 
sqlôe3_fûe
 *
fd
;

4581 
a
 = 
amt
;

4582 if–
a
 + 
off£t
 > 
ovÊSize
 ){

4583 
a
 = 
ovÊSize
 - 
off£t
;

4586 #ifde‡
SQLITE_DIRECT_OVERFLOW_READ


4601 if–(
eOp
&0x01)==0

4602 && 
off£t
==0

4603 && (
bEnd
 || 
a
==
ovÊSize
)

4604 && 
pBt
->
öTønß˘i⁄
==
TRANS_READ


4605 && (
fd
 = 
	`sqlôe3PagîFûe
(
pBt
->
pPagî
))->
pMëhods


4606 && 
pBt
->
pPage1
->
aD©a
[19]==0x01

4607 && &
pBuf
[-4]>=
pBufSèπ


4609 
u8
 
aSave
[4];

4610 
u8
 *
aWrôe
 = &
pBuf
[-4];

4611 
	`as£π
–
aWrôe
>=
pBufSèπ
 );

4612 
	`mem˝y
(
aSave
, 
aWrôe
, 4);

4613 
rc
 = 
	`sqlôe3OsRód
(
fd
, 
aWrôe
, 
a
+4, (
i64
)
pBt
->
∑geSize
*(
√xtPage
-1));

4614 
√xtPage
 = 
	`gë4byã
(
aWrôe
);

4615 
	`mem˝y
(
aWrôe
, 
aSave
, 4);

4620 
DbPage
 *
pDbPage
;

4621 
rc
 = 
	`sqlôe3PagîGë
(
pBt
->
pPagî
, 
√xtPage
, &
pDbPage
,

4622 ((
eOp
&0x01)==0 ? 
PAGER_GET_READONLY
 : 0)

4624 if–
rc
==
SQLITE_OK
 ){

4625 
aPaylﬂd
 = 
	`sqlôe3PagîGëD©a
(
pDbPage
);

4626 
√xtPage
 = 
	`gë4byã
(
aPaylﬂd
);

4627 
rc
 = 
	`c›yPaylﬂd
(&
aPaylﬂd
[
off£t
+4], 
pBuf
, 
a
, (
eOp
&0x01), 
pDbPage
);

4628 
	`sqlôe3PagîUƒef
(
pDbPage
);

4629 
off£t
 = 0;

4632 
amt
 -
a
;

4633 
pBuf
 +
a
;

4638 if–
rc
==
SQLITE_OK
 && 
amt
>0 ){

4639  
SQLITE_CORRUPT_BKPT
;

4641  
rc
;

4642 
	}
}

4656 
	$sqlôe3BåìKey
(
BtCurs‹
 *
pCur
, 
u32
 
off£t
, u32 
amt
, *
pBuf
){

4657 
	`as£π
–
	`curs‹HﬁdsMuãx
(
pCur
) );

4658 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 );

4659 
	`as£π
–
pCur
->
iPage
>=0 &&ÖCur->
≠Page
[pCur->iPage] );

4660 
	`as£π
–
pCur
->
aiIdx
[pCur->
iPage
]<pCur->
≠Page
[pCur->iPage]->
nCñl
 );

4661  
	`ac˚ssPaylﬂd
(
pCur
, 
off£t
, 
amt
, (*)
pBuf
, 0);

4662 
	}
}

4673 
	$sqlôe3BåìD©a
(
BtCurs‹
 *
pCur
, 
u32
 
off£t
, u32 
amt
, *
pBuf
){

4674 
rc
;

4676 #i‚de‡
SQLITE_OMIT_INCRBLOB


4677 i‡–
pCur
->
eSèã
==
CURSOR_INVALID
 ){

4678  
SQLITE_ABORT
;

4682 
	`as£π
–
	`curs‹OwnsBtSh¨ed
(
pCur
) );

4683 
rc
 = 
	`ª°‹eCurs‹Posôi⁄
(
pCur
);

4684 if–
rc
==
SQLITE_OK
 ){

4685 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 );

4686 
	`as£π
–
pCur
->
iPage
>=0 &&ÖCur->
≠Page
[pCur->iPage] );

4687 
	`as£π
–
pCur
->
aiIdx
[pCur->
iPage
]<pCur->
≠Page
[pCur->iPage]->
nCñl
 );

4688 
rc
 = 
	`ac˚ssPaylﬂd
(
pCur
, 
off£t
, 
amt
, 
pBuf
, 0);

4690  
rc
;

4691 
	}
}

4712 c⁄° *
	$„tchPaylﬂd
(

4713 
BtCurs‹
 *
pCur
,

4714 
u32
 *
pAmt


4716 
u32
 
amt
;

4717 
	`as£π
–
pCur
!=0 &&ÖCur->
iPage
>=0 &&ÖCur->
≠Page
[pCur->iPage]);

4718 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 );

4719 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCur
->
pBåì
->
db
->
muãx
) );

4720 
	`as£π
–
	`curs‹OwnsBtSh¨ed
(
pCur
) );

4721 
	`as£π
–
pCur
->
aiIdx
[pCur->
iPage
]<pCur->
≠Page
[pCur->iPage]->
nCñl
 );

4722 
	`as£π
–
pCur
->
öfo
.
nSize
>0 );

4723 
	`as£π
–
pCur
->
öfo
.
pPaylﬂd
>pCur->
≠Page
[pCur->
iPage
]->
aD©a
 || 
CORRUPT_DB
 );

4724 
	`as£π
–
pCur
->
öfo
.
pPaylﬂd
<pCur->
≠Page
[pCur->
iPage
]->
aD©aEnd
 ||
CORRUPT_DB
);

4725 
amt
 = ()(
pCur
->
≠Page
[pCur->
iPage
]->
aD©aEnd
 -ÖCur->
öfo
.
pPaylﬂd
);

4726 if–
pCur
->
öfo
.
nLoˇl
<
amt
 )ámt =ÖCur->info.nLocal;

4727 *
pAmt
 = 
amt
;

4728  (*)
pCur
->
öfo
.
pPaylﬂd
;

4729 
	}
}

4746 c⁄° *
	$sqlôe3BåìKeyFëch
(
BtCurs‹
 *
pCur
, 
u32
 *
pAmt
){

4747  
	`„tchPaylﬂd
(
pCur
, 
pAmt
);

4748 
	}
}

4749 c⁄° *
	$sqlôe3BåìD©aFëch
(
BtCurs‹
 *
pCur
, 
u32
 *
pAmt
){

4750  
	`„tchPaylﬂd
(
pCur
, 
pAmt
);

4751 
	}
}

4763 
	$moveToChûd
(
BtCurs‹
 *
pCur
, 
u32
 
√wPgno
){

4764 
BtSh¨ed
 *
pBt
 = 
pCur
->pBt;

4766 
	`as£π
–
	`curs‹OwnsBtSh¨ed
(
pCur
) );

4767 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 );

4768 
	`as£π
–
pCur
->
iPage
<
BTCURSOR_MAX_DEPTH
 );

4769 
	`as£π
–
pCur
->
iPage
>=0 );

4770 if–
pCur
->
iPage
>=(
BTCURSOR_MAX_DEPTH
-1) ){

4771  
SQLITE_CORRUPT_BKPT
;

4773 
pCur
->
öfo
.
nSize
 = 0;

4774 
pCur
->
curFœgs
 &~(
BTCF_VÆidNKey
|
BTCF_VÆidOvÊ
);

4775 
pCur
->
iPage
++;

4776 
pCur
->
aiIdx
[pCur->
iPage
] = 0;

4777  
	`gëAndInôPage
(
pBt
, 
√wPgno
, &
pCur
->
≠Page
[pCur->
iPage
],

4778 
pCur
,ÖCur->
curPagîFœgs
);

4779 
	}
}

4781 #i‡
SQLITE_DEBUG


4789 
	$as£πP¨ítIndex
(
MemPage
 *
pP¨ít
, 
iIdx
, 
Pgno
 
iChûd
){

4790 if–
CORRUPT_DB
 ) ;

4792 
	`as£π
–
iIdx
<=
pP¨ít
->
nCñl
 );

4793 if–
iIdx
==
pP¨ít
->
nCñl
 ){

4794 
	`as£π
–
	`gë4byã
(&
pP¨ít
->
aD©a
[pP¨ít->
hdrOff£t
+8])==
iChûd
 );

4796 
	`as£π
–
	`gë4byã
(
	`födCñl
(
pP¨ít
, 
iIdx
))==
iChûd
 );

4798 
	}
}

4800 
	#as£πP¨ítIndex
(
x
,
y
,
z
)

	)

4811 
	$moveToP¨ít
(
BtCurs‹
 *
pCur
){

4812 
	`as£π
–
	`curs‹OwnsBtSh¨ed
(
pCur
) );

4813 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 );

4814 
	`as£π
–
pCur
->
iPage
>0 );

4815 
	`as£π
–
pCur
->
≠Page
[pCur->
iPage
] );

4816 
	`as£πP¨ítIndex
(

4817 
pCur
->
≠Page
[pCur->
iPage
-1],

4818 
pCur
->
aiIdx
[pCur->
iPage
-1],

4819 
pCur
->
≠Page
[pCur->
iPage
]->
pgno


4821 
	`ã°ˇ£
–
pCur
->
aiIdx
[pCur->
iPage
-1] >ÖCur->
≠Page
[pCur->iPage-1]->
nCñl
 );

4822 
pCur
->
öfo
.
nSize
 = 0;

4823 
pCur
->
curFœgs
 &~(
BTCF_VÆidNKey
|
BTCF_VÆidOvÊ
);

4824 
	`ªÀa£PageNŸNuŒ
(
pCur
->
≠Page
[pCur->
iPage
--]);

4825 
	}
}

4848 
	$moveToRoŸ
(
BtCurs‹
 *
pCur
){

4849 
MemPage
 *
pRoŸ
;

4850 
rc
 = 
SQLITE_OK
;

4852 
	`as£π
–
	`curs‹OwnsBtSh¨ed
(
pCur
) );

4853 
	`as£π
–
CURSOR_INVALID
 < 
CURSOR_REQUIRESEEK
 );

4854 
	`as£π
–
CURSOR_VALID
 < 
CURSOR_REQUIRESEEK
 );

4855 
	`as£π
–
CURSOR_FAULT
 > 
CURSOR_REQUIRESEEK
 );

4856 if–
pCur
->
eSèã
>=
CURSOR_REQUIRESEEK
 ){

4857 if–
pCur
->
eSèã
==
CURSOR_FAULT
 ){

4858 
	`as£π
–
pCur
->
skùNext
!=
SQLITE_OK
 );

4859  
pCur
->
skùNext
;

4861 
	`sqlôe3BåìCÀ¨Curs‹
(
pCur
);

4864 if–
pCur
->
iPage
>=0 ){

4865  
pCur
->
iPage
 ){

4866 
	`as£π
–
pCur
->
≠Page
[pCur->
iPage
]!=0 );

4867 
	`ªÀa£PageNŸNuŒ
(
pCur
->
≠Page
[pCur->
iPage
--]);

4869 }if–
pCur
->
pgnoRoŸ
==0 ){

4870 
pCur
->
eSèã
 = 
CURSOR_INVALID
;

4871  
SQLITE_OK
;

4873 
	`as£π
–
pCur
->
iPage
==(-1) );

4874 
rc
 = 
	`gëAndInôPage
(
pCur
->
pBåì
->
pBt
,ÖCur->
pgnoRoŸ
, &pCur->
≠Page
[0],

4875 0, 
pCur
->
curPagîFœgs
);

4876 if–
rc
!=
SQLITE_OK
 ){

4877 
pCur
->
eSèã
 = 
CURSOR_INVALID
;

4878  
rc
;

4880 
pCur
->
iPage
 = 0;

4881 
pCur
->
curI¡Key
 =ÖCur->
≠Page
[0]->
ötKey
;

4883 
pRoŸ
 = 
pCur
->
≠Page
[0];

4884 
	`as£π
–
pRoŸ
->
pgno
==
pCur
->
pgnoRoŸ
 );

4896 
	`as£π
–
pRoŸ
->
ötKey
==1 ||ÖRoot->intKey==0 );

4897 if–
pRoŸ
->
isInô
==0 || (
pCur
->
pKeyInfo
==0)!ıRoŸ->
ötKey
 ){

4898  
SQLITE_CORRUPT_BKPT
;

4901 
pCur
->
aiIdx
[0] = 0;

4902 
pCur
->
öfo
.
nSize
 = 0;

4903 
pCur
->
curFœgs
 &~(
BTCF_AtLa°
|
BTCF_VÆidNKey
|
BTCF_VÆidOvÊ
);

4905 if–
pRoŸ
->
nCñl
>0 ){

4906 
pCur
->
eSèã
 = 
CURSOR_VALID
;

4907 }if–!
pRoŸ
->
Àaf
 ){

4908 
Pgno
 
sub∑ge
;

4909 if–
pRoŸ
->
pgno
!=1 )  
SQLITE_CORRUPT_BKPT
;

4910 
sub∑ge
 = 
	`gë4byã
(&
pRoŸ
->
aD©a
[pRoŸ->
hdrOff£t
+8]);

4911 
pCur
->
eSèã
 = 
CURSOR_VALID
;

4912 
rc
 = 
	`moveToChûd
(
pCur
, 
sub∑ge
);

4914 
pCur
->
eSèã
 = 
CURSOR_INVALID
;

4916  
rc
;

4917 
	}
}

4926 
	$moveToLe·mo°
(
BtCurs‹
 *
pCur
){

4927 
Pgno
 
pgno
;

4928 
rc
 = 
SQLITE_OK
;

4929 
MemPage
 *
pPage
;

4931 
	`as£π
–
	`curs‹OwnsBtSh¨ed
(
pCur
) );

4932 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 );

4933  
rc
==
SQLITE_OK
 && !(
pPage
 = 
pCur
->
≠Page
[pCur->
iPage
])->
Àaf
 ){

4934 
	`as£π
–
pCur
->
aiIdx
[pCur->
iPage
]<
pPage
->
nCñl
 );

4935 
pgno
 = 
	`gë4byã
(
	`födCñl
(
pPage
, 
pCur
->
aiIdx
[pCur->
iPage
]));

4936 
rc
 = 
	`moveToChûd
(
pCur
, 
pgno
);

4938  
rc
;

4939 
	}
}

4951 
	$moveToRightmo°
(
BtCurs‹
 *
pCur
){

4952 
Pgno
 
pgno
;

4953 
rc
 = 
SQLITE_OK
;

4954 
MemPage
 *
pPage
 = 0;

4956 
	`as£π
–
	`curs‹OwnsBtSh¨ed
(
pCur
) );

4957 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 );

4958  !(
pPage
 = 
pCur
->
≠Page
[pCur->
iPage
])->
Àaf
 ){

4959 
pgno
 = 
	`gë4byã
(&
pPage
->
aD©a
[pPage->
hdrOff£t
+8]);

4960 
pCur
->
aiIdx
[pCur->
iPage
] = 
pPage
->
nCñl
;

4961 
rc
 = 
	`moveToChûd
(
pCur
, 
pgno
);

4962 if–
rc
 ) Ñc;

4964 
pCur
->
aiIdx
[pCur->
iPage
] = 
pPage
->
nCñl
-1;

4965 
	`as£π
–
pCur
->
öfo
.
nSize
==0 );

4966 
	`as£π
–(
pCur
->
curFœgs
 & 
BTCF_VÆidNKey
)==0 );

4967  
SQLITE_OK
;

4968 
	}
}

4974 
	$sqlôe3BåìFú°
(
BtCurs‹
 *
pCur
, *
pRes
){

4975 
rc
;

4977 
	`as£π
–
	`curs‹OwnsBtSh¨ed
(
pCur
) );

4978 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCur
->
pBåì
->
db
->
muãx
) );

4979 
rc
 = 
	`moveToRoŸ
(
pCur
);

4980 if–
rc
==
SQLITE_OK
 ){

4981 if–
pCur
->
eSèã
==
CURSOR_INVALID
 ){

4982 
	`as£π
–
pCur
->
pgnoRoŸ
==0 ||ÖCur->
≠Page
[pCur->
iPage
]->
nCñl
==0 );

4983 *
pRes
 = 1;

4985 
	`as£π
–
pCur
->
≠Page
[pCur->
iPage
]->
nCñl
>0 );

4986 *
pRes
 = 0;

4987 
rc
 = 
	`moveToLe·mo°
(
pCur
);

4990  
rc
;

4991 
	}
}

4997 
	$sqlôe3BåìLa°
(
BtCurs‹
 *
pCur
, *
pRes
){

4998 
rc
;

5000 
	`as£π
–
	`curs‹OwnsBtSh¨ed
(
pCur
) );

5001 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCur
->
pBåì
->
db
->
muãx
) );

5004 if–
CURSOR_VALID
==
pCur
->
eSèã
 && (pCur->
curFœgs
 & 
BTCF_AtLa°
)!=0 ){

5005 #ifde‡
SQLITE_DEBUG


5008 
ii
;

5009 
ii
=0; ii<
pCur
->
iPage
; ii++){

5010 
	`as£π
–
pCur
->
aiIdx
[
ii
]=ıCur->
≠Page
[ii]->
nCñl
 );

5012 
	`as£π
–
pCur
->
aiIdx
[pCur->
iPage
]=ıCur->
≠Page
[pCur->iPage]->
nCñl
-1 );

5013 
	`as£π
–
pCur
->
≠Page
[pCur->
iPage
]->
Àaf
 );

5015  
SQLITE_OK
;

5018 
rc
 = 
	`moveToRoŸ
(
pCur
);

5019 if–
rc
==
SQLITE_OK
 ){

5020 if–
CURSOR_INVALID
==
pCur
->
eSèã
 ){

5021 
	`as£π
–
pCur
->
pgnoRoŸ
==0 ||ÖCur->
≠Page
[pCur->
iPage
]->
nCñl
==0 );

5022 *
pRes
 = 1;

5024 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 );

5025 *
pRes
 = 0;

5026 
rc
 = 
	`moveToRightmo°
(
pCur
);

5027 if–
rc
==
SQLITE_OK
 ){

5028 
pCur
->
curFœgs
 |
BTCF_AtLa°
;

5030 
pCur
->
curFœgs
 &~
BTCF_AtLa°
;

5035  
rc
;

5036 
	}
}

5068 
	$sqlôe3BåìMovëoU≈acked
(

5069 
BtCurs‹
 *
pCur
,

5070 
U≈ackedRec‹d
 *
pIdxKey
,

5071 
i64
 
ötKey
,

5072 
büsRight
,

5073 *
pRes


5075 
rc
;

5076 
Rec‹dCom∑ª
 
xRec‹dCom∑ª
;

5078 
	`as£π
–
	`curs‹OwnsBtSh¨ed
(
pCur
) );

5079 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCur
->
pBåì
->
db
->
muãx
) );

5080 
	`as£π
–
pRes
 );

5081 
	`as£π
–(
pIdxKey
==0)==(
pCur
->
pKeyInfo
==0) );

5085 if–
pCur
->
eSèã
==
CURSOR_VALID
 && (pCur->
curFœgs
 & 
BTCF_VÆidNKey
)!=0

5086 && 
pCur
->
curI¡Key


5088 if–
pCur
->
öfo
.
nKey
==
ötKey
 ){

5089 *
pRes
 = 0;

5090  
SQLITE_OK
;

5092 if–(
pCur
->
curFœgs
 & 
BTCF_AtLa°
)!=0 &&ÖCur->
öfo
.
nKey
<
ötKey
 ){

5093 *
pRes
 = -1;

5094  
SQLITE_OK
;

5098 if–
pIdxKey
 ){

5099 
xRec‹dCom∑ª
 = 
	`sqlôe3VdbeFödCom∑ª
(
pIdxKey
);

5100 
pIdxKey
->
îrCode
 = 0;

5101 
	`as£π
–
pIdxKey
->
deÁu…_rc
==1

5102 || 
pIdxKey
->
deÁu…_rc
==0

5103 || 
pIdxKey
->
deÁu…_rc
==-1

5106 
xRec‹dCom∑ª
 = 0;

5109 
rc
 = 
	`moveToRoŸ
(
pCur
);

5110 if–
rc
 ){

5111  
rc
;

5113 
	`as£π
–
pCur
->
pgnoRoŸ
==0 ||ÖCur->
≠Page
[pCur->
iPage
] );

5114 
	`as£π
–
pCur
->
pgnoRoŸ
==0 ||ÖCur->
≠Page
[pCur->
iPage
]->
isInô
 );

5115 
	`as£π
–
pCur
->
eSèã
==
CURSOR_INVALID
 ||ÖCur->
≠Page
[pCur->
iPage
]->
nCñl
>0 );

5116 if–
pCur
->
eSèã
==
CURSOR_INVALID
 ){

5117 *
pRes
 = -1;

5118 
	`as£π
–
pCur
->
pgnoRoŸ
==0 ||ÖCur->
≠Page
[pCur->
iPage
]->
nCñl
==0 );

5119  
SQLITE_OK
;

5121 
	`as£π
–
pCur
->
≠Page
[0]->
ötKey
=ıCur->
curI¡Key
 );

5122 
	`as£π
–
pCur
->
curI¡Key
 || 
pIdxKey
 );

5124 
lwr
, 
u¥
, 
idx
, 
c
;

5125 
Pgno
 
chldPg
;

5126 
MemPage
 *
pPage
 = 
pCur
->
≠Page
[pCur->
iPage
];

5127 
u8
 *
pCñl
;

5135 
	`as£π
–
pPage
->
nCñl
>0 );

5136 
	`as£π
–
pPage
->
ötKey
==(
pIdxKey
==0) );

5137 
lwr
 = 0;

5138 
u¥
 = 
pPage
->
nCñl
-1;

5139 
	`as£π
–
büsRight
==0 || biasRight==1 );

5140 
idx
 = 
u¥
>>(1-
büsRight
);

5141 
pCur
->
aiIdx
[pCur->
iPage
] = (
u16
)
idx
;

5142 if–
xRec‹dCom∑ª
==0 ){

5144 
i64
 
nCñlKey
;

5145 
pCñl
 = 
	`födCñlPa°På
(
pPage
, 
idx
);

5146 if–
pPage
->
ötKeyLóf
 ){

5147  0x80 <*(
pCñl
++) ){

5148 if–
pCñl
>=
pPage
->
aD©aEnd
 )  
SQLITE_CORRUPT_BKPT
;

5151 
	`gëV¨öt
(
pCñl
, (
u64
*)&
nCñlKey
);

5152 if–
nCñlKey
<
ötKey
 ){

5153 
lwr
 = 
idx
+1;

5154 if–
lwr
>
u¥
 ){ 
c
 = -1; ; }

5155 }if–
nCñlKey
>
ötKey
 ){

5156 
u¥
 = 
idx
-1;

5157 if–
lwr
>
u¥
 ){ 
c
 = +1; ; }

5159 
	`as£π
–
nCñlKey
==
ötKey
 );

5160 
pCur
->
curFœgs
 |
BTCF_VÆidNKey
;

5161 
pCur
->
öfo
.
nKey
 = 
nCñlKey
;

5162 
pCur
->
aiIdx
[pCur->
iPage
] = (
u16
)
idx
;

5163 if–!
pPage
->
Àaf
 ){

5164 
lwr
 = 
idx
;

5165 
movëo_√xt_œyî
;

5167 *
pRes
 = 0;

5168 
rc
 = 
SQLITE_OK
;

5169 
movëo_föish
;

5172 
	`as£π
–
lwr
+
u¥
>=0 );

5173 
idx
 = (
lwr
+
u¥
)>>1;

5177 
nCñl
;

5178 
pCñl
 = 
	`födCñlPa°På
(
pPage
, 
idx
);

5188 
nCñl
 = 
pCñl
[0];

5189 if–
nCñl
<=
pPage
->
max1byãPaylﬂd
 ){

5193 
	`ã°ˇ£
–
pCñl
+
nCñl
+1==
pPage
->
aD©aEnd
 );

5194 
c
 = 
	`xRec‹dCom∑ª
(
nCñl
, (*)&
pCñl
[1], 
pIdxKey
);

5195 }if–!(
pCñl
[1] & 0x80)

5196 && (
nCñl
 = (“Cñl&0x7f)<<7Ë+ 
pCñl
[1])<=
pPage
->
maxLoˇl


5200 
	`ã°ˇ£
–
pCñl
+
nCñl
+2==
pPage
->
aD©aEnd
 );

5201 
c
 = 
	`xRec‹dCom∑ª
(
nCñl
, (*)&
pCñl
[2], 
pIdxKey
);

5212 *
pCñlKey
;

5213 
u8
 * c⁄° 
pCñlBody
 = 
pCñl
 - 
pPage
->
chûdPåSize
;

5214 
pPage
->
	`xP¨£Cñl
’Page, 
pCñlBody
, &
pCur
->
öfo
);

5215 
nCñl
 = ()
pCur
->
öfo
.
nKey
;

5216 
	`ã°ˇ£
–
nCñl
<0 );

5217 
	`ã°ˇ£
–
nCñl
==0 );

5218 
	`ã°ˇ£
–
nCñl
==1 );

5219 
	`ã°ˇ£
–
nCñl
==2 );

5220 if–
nCñl
<2 ){

5221 
rc
 = 
SQLITE_CORRUPT_BKPT
;

5222 
movëo_föish
;

5224 
pCñlKey
 = 
	`sqlôe3MÆloc
–
nCñl
+18 );

5225 if–
pCñlKey
==0 ){

5226 
rc
 = 
SQLITE_NOMEM_BKPT
;

5227 
movëo_föish
;

5229 
pCur
->
aiIdx
[pCur->
iPage
] = (
u16
)
idx
;

5230 
rc
 = 
	`ac˚ssPaylﬂd
(
pCur
, 0, 
nCñl
, (*)
pCñlKey
, 2);

5231 if–
rc
 ){

5232 
	`sqlôe3_‰ì
(
pCñlKey
);

5233 
movëo_föish
;

5235 
c
 = 
	`xRec‹dCom∑ª
(
nCñl
, 
pCñlKey
, 
pIdxKey
);

5236 
	`sqlôe3_‰ì
(
pCñlKey
);

5238 
	`as£π
(

5239 (
pIdxKey
->
îrCode
!=
SQLITE_CORRUPT
 || 
c
==0)

5240 && (
pIdxKey
->
îrCode
!=
SQLITE_NOMEM
 || 
pCur
->
pBåì
->
db
->
mÆlocFaûed
)

5242 if–
c
<0 ){

5243 
lwr
 = 
idx
+1;

5244 }if–
c
>0 ){

5245 
u¥
 = 
idx
-1;

5247 
	`as£π
–
c
==0 );

5248 *
pRes
 = 0;

5249 
rc
 = 
SQLITE_OK
;

5250 
pCur
->
aiIdx
[pCur->
iPage
] = (
u16
)
idx
;

5251 if–
pIdxKey
->
îrCode
 ) 
rc
 = 
SQLITE_CORRUPT
;

5252 
movëo_föish
;

5254 if–
lwr
>
u¥
 ) ;

5255 
	`as£π
–
lwr
+
u¥
>=0 );

5256 
idx
 = (
lwr
+
u¥
)>>1;

5259 
	`as£π
–
lwr
==
u¥
+1 || (
pPage
->
ötKey
 && !pPage->
Àaf
) );

5260 
	`as£π
–
pPage
->
isInô
 );

5261 if–
pPage
->
Àaf
 ){

5262 
	`as£π
–
pCur
->
aiIdx
[pCur->
iPage
]<pCur->
≠Page
[pCur->iPage]->
nCñl
 );

5263 
pCur
->
aiIdx
[pCur->
iPage
] = (
u16
)
idx
;

5264 *
pRes
 = 
c
;

5265 
rc
 = 
SQLITE_OK
;

5266 
movëo_föish
;

5268 
movëo_√xt_œyî
:

5269 if–
lwr
>=
pPage
->
nCñl
 ){

5270 
chldPg
 = 
	`gë4byã
(&
pPage
->
aD©a
[pPage->
hdrOff£t
+8]);

5272 
chldPg
 = 
	`gë4byã
(
	`födCñl
(
pPage
, 
lwr
));

5274 
pCur
->
aiIdx
[pCur->
iPage
] = (
u16
)
lwr
;

5275 
rc
 = 
	`moveToChûd
(
pCur
, 
chldPg
);

5276 if–
rc
 ) ;

5278 
movëo_föish
:

5279 
pCur
->
öfo
.
nSize
 = 0;

5280 
pCur
->
curFœgs
 &~(
BTCF_VÆidNKey
|
BTCF_VÆidOvÊ
);

5281  
rc
;

5282 
	}
}

5292 
	$sqlôe3BåìEof
(
BtCurs‹
 *
pCur
){

5297  (
CURSOR_VALID
!=
pCur
->
eSèã
);

5298 
	}
}

5321 
SQLITE_NOINLINE
 
	$båìNext
(
BtCurs‹
 *
pCur
, *
pRes
){

5322 
rc
;

5323 
idx
;

5324 
MemPage
 *
pPage
;

5326 
	`as£π
–
	`curs‹OwnsBtSh¨ed
(
pCur
) );

5327 
	`as£π
–
pCur
->
skùNext
==0 ||ÖCur->
eSèã
!=
CURSOR_VALID
 );

5328 
	`as£π
–*
pRes
==0 );

5329 if–
pCur
->
eSèã
!=
CURSOR_VALID
 ){

5330 
	`as£π
–(
pCur
->
curFœgs
 & 
BTCF_VÆidOvÊ
)==0 );

5331 
rc
 = 
	`ª°‹eCurs‹Posôi⁄
(
pCur
);

5332 if–
rc
!=
SQLITE_OK
 ){

5333  
rc
;

5335 if–
CURSOR_INVALID
==
pCur
->
eSèã
 ){

5336 *
pRes
 = 1;

5337  
SQLITE_OK
;

5339 if–
pCur
->
skùNext
 ){

5340 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 ||ÖCur->eSèã==
CURSOR_SKIPNEXT
 );

5341 
pCur
->
eSèã
 = 
CURSOR_VALID
;

5342 if–
pCur
->
skùNext
>0 ){

5343 
pCur
->
skùNext
 = 0;

5344  
SQLITE_OK
;

5346 
pCur
->
skùNext
 = 0;

5350 
pPage
 = 
pCur
->
≠Page
[pCur->
iPage
];

5351 
idx
 = ++
pCur
->
aiIdx
[pCur->
iPage
];

5352 
	`as£π
–
pPage
->
isInô
 );

5359 
	`ã°ˇ£
–
idx
>
pPage
->
nCñl
 );

5361 if–
idx
>=
pPage
->
nCñl
 ){

5362 if–!
pPage
->
Àaf
 ){

5363 
rc
 = 
	`moveToChûd
(
pCur
, 
	`gë4byã
(&
pPage
->
aD©a
[pPage->
hdrOff£t
+8]));

5364 if–
rc
 ) Ñc;

5365  
	`moveToLe·mo°
(
pCur
);

5368 if–
pCur
->
iPage
==0 ){

5369 *
pRes
 = 1;

5370 
pCur
->
eSèã
 = 
CURSOR_INVALID
;

5371  
SQLITE_OK
;

5373 
	`moveToP¨ít
(
pCur
);

5374 
pPage
 = 
pCur
->
≠Page
[pCur->
iPage
];

5375 } 
pCur
->
aiIdx
[pCur->
iPage
]>=
pPage
->
nCñl
 );

5376 if–
pPage
->
ötKey
 ){

5377  
	`sqlôe3BåìNext
(
pCur
, 
pRes
);

5379  
SQLITE_OK
;

5382 if–
pPage
->
Àaf
 ){

5383  
SQLITE_OK
;

5385  
	`moveToLe·mo°
(
pCur
);

5387 
	}
}

5388 
	$sqlôe3BåìNext
(
BtCurs‹
 *
pCur
, *
pRes
){

5389 
MemPage
 *
pPage
;

5390 
	`as£π
–
	`curs‹OwnsBtSh¨ed
(
pCur
) );

5391 
	`as£π
–
pRes
!=0 );

5392 
	`as£π
–*
pRes
==0 || *pRes==1 );

5393 
	`as£π
–
pCur
->
skùNext
==0 ||ÖCur->
eSèã
!=
CURSOR_VALID
 );

5394 
pCur
->
öfo
.
nSize
 = 0;

5395 
pCur
->
curFœgs
 &~(
BTCF_VÆidNKey
|
BTCF_VÆidOvÊ
);

5396 *
pRes
 = 0;

5397 if–
pCur
->
eSèã
!=
CURSOR_VALID
 )  
	`båìNext
’Cur, 
pRes
);

5398 
pPage
 = 
pCur
->
≠Page
[pCur->
iPage
];

5399 if–(++
pCur
->
aiIdx
[pCur->
iPage
])>=
pPage
->
nCñl
 ){

5400 
pCur
->
aiIdx
[pCur->
iPage
]--;

5401  
	`båìNext
(
pCur
, 
pRes
);

5403 if–
pPage
->
Àaf
 ){

5404  
SQLITE_OK
;

5406  
	`moveToLe·mo°
(
pCur
);

5408 
	}
}

5431 
SQLITE_NOINLINE
 
	$båìPªvious
(
BtCurs‹
 *
pCur
, *
pRes
){

5432 
rc
;

5433 
MemPage
 *
pPage
;

5435 
	`as£π
–
	`curs‹OwnsBtSh¨ed
(
pCur
) );

5436 
	`as£π
–
pRes
!=0 );

5437 
	`as£π
–*
pRes
==0 );

5438 
	`as£π
–
pCur
->
skùNext
==0 ||ÖCur->
eSèã
!=
CURSOR_VALID
 );

5439 
	`as£π
–(
pCur
->
curFœgs
 & (
BTCF_AtLa°
|
BTCF_VÆidOvÊ
|
BTCF_VÆidNKey
))==0 );

5440 
	`as£π
–
pCur
->
öfo
.
nSize
==0 );

5441 if–
pCur
->
eSèã
!=
CURSOR_VALID
 ){

5442 
rc
 = 
	`ª°‹eCurs‹Posôi⁄
(
pCur
);

5443 if–
rc
!=
SQLITE_OK
 ){

5444  
rc
;

5446 if–
CURSOR_INVALID
==
pCur
->
eSèã
 ){

5447 *
pRes
 = 1;

5448  
SQLITE_OK
;

5450 if–
pCur
->
skùNext
 ){

5451 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 ||ÖCur->eSèã==
CURSOR_SKIPNEXT
 );

5452 
pCur
->
eSèã
 = 
CURSOR_VALID
;

5453 if–
pCur
->
skùNext
<0 ){

5454 
pCur
->
skùNext
 = 0;

5455  
SQLITE_OK
;

5457 
pCur
->
skùNext
 = 0;

5461 
pPage
 = 
pCur
->
≠Page
[pCur->
iPage
];

5462 
	`as£π
–
pPage
->
isInô
 );

5463 if–!
pPage
->
Àaf
 ){

5464 
idx
 = 
pCur
->
aiIdx
[pCur->
iPage
];

5465 
rc
 = 
	`moveToChûd
(
pCur
, 
	`gë4byã
(
	`födCñl
(
pPage
, 
idx
)));

5466 if–
rc
 ) Ñc;

5467 
rc
 = 
	`moveToRightmo°
(
pCur
);

5469  
pCur
->
aiIdx
[pCur->
iPage
]==0 ){

5470 if–
pCur
->
iPage
==0 ){

5471 
pCur
->
eSèã
 = 
CURSOR_INVALID
;

5472 *
pRes
 = 1;

5473  
SQLITE_OK
;

5475 
	`moveToP¨ít
(
pCur
);

5477 
	`as£π
–
pCur
->
öfo
.
nSize
==0 );

5478 
	`as£π
–(
pCur
->
curFœgs
 & (
BTCF_VÆidNKey
|
BTCF_VÆidOvÊ
))==0 );

5480 
pCur
->
aiIdx
[pCur->
iPage
]--;

5481 
pPage
 = 
pCur
->
≠Page
[pCur->
iPage
];

5482 if–
pPage
->
ötKey
 && !pPage->
Àaf
 ){

5483 
rc
 = 
	`sqlôe3BåìPªvious
(
pCur
, 
pRes
);

5485 
rc
 = 
SQLITE_OK
;

5488  
rc
;

5489 
	}
}

5490 
	$sqlôe3BåìPªvious
(
BtCurs‹
 *
pCur
, *
pRes
){

5491 
	`as£π
–
	`curs‹OwnsBtSh¨ed
(
pCur
) );

5492 
	`as£π
–
pRes
!=0 );

5493 
	`as£π
–*
pRes
==0 || *pRes==1 );

5494 
	`as£π
–
pCur
->
skùNext
==0 ||ÖCur->
eSèã
!=
CURSOR_VALID
 );

5495 *
pRes
 = 0;

5496 
pCur
->
curFœgs
 &~(
BTCF_AtLa°
|
BTCF_VÆidOvÊ
|
BTCF_VÆidNKey
);

5497 
pCur
->
öfo
.
nSize
 = 0;

5498 if–
pCur
->
eSèã
!=
CURSOR_VALID


5499 || 
pCur
->
aiIdx
[pCur->
iPage
]==0

5500 || 
pCur
->
≠Page
[pCur->
iPage
]->
Àaf
==0

5502  
	`båìPªvious
(
pCur
, 
pRes
);

5504 
pCur
->
aiIdx
[pCur->
iPage
]--;

5505  
SQLITE_OK
;

5506 
	}
}

5530 
	$ÆloˇãBåìPage
(

5531 
BtSh¨ed
 *
pBt
,

5532 
MemPage
 **
µPage
,

5533 
Pgno
 *
pPgno
,

5534 
Pgno
 
√¨by
,

5535 
u8
 
eMode


5537 
MemPage
 *
pPage1
;

5538 
rc
;

5539 
u32
 
n
;

5540 
u32
 
k
;

5541 
MemPage
 *
pTrunk
 = 0;

5542 
MemPage
 *
pPªvTrunk
 = 0;

5543 
Pgno
 
mxPage
;

5545 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

5546 
	`as£π
–
eMode
==
BTALLOC_ANY
 || (
√¨by
>0 && 
	`IfNŸOmôAV
(
pBt
->
autoVacuum
)) );

5547 
pPage1
 = 
pBt
->pPage1;

5548 
mxPage
 = 
	`båìPagecou¡
(
pBt
);

5551 
n
 = 
	`gë4byã
(&
pPage1
->
aD©a
[36]);

5552 
	`ã°ˇ£
–
n
==
mxPage
-1 );

5553 if–
n
>=
mxPage
 ){

5554  
SQLITE_CORRUPT_BKPT
;

5556 if–
n
>0 ){

5558 
Pgno
 
iTrunk
;

5559 
u8
 
£¨chLi°
 = 0;

5560 
u32
 
nSórch
 = 0;

5566 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


5567 if–
eMode
==
BTALLOC_EXACT
 ){

5568 if–
√¨by
<=
mxPage
 ){

5569 
u8
 
eTy≥
;

5570 
	`as£π
–
√¨by
>0 );

5571 
	`as£π
–
pBt
->
autoVacuum
 );

5572 
rc
 = 
	`±rm≠Gë
(
pBt
, 
√¨by
, &
eTy≥
, 0);

5573 if–
rc
 ) Ñc;

5574 if–
eTy≥
==
PTRMAP_FREEPAGE
 ){

5575 
£¨chLi°
 = 1;

5578 }if–
eMode
==
BTALLOC_LE
 ){

5579 
£¨chLi°
 = 1;

5586 
rc
 = 
	`sqlôe3PagîWrôe
(
pPage1
->
pDbPage
);

5587 if–
rc
 ) Ñc;

5588 
	`put4byã
(&
pPage1
->
aD©a
[36], 
n
-1);

5596 
pPªvTrunk
 = 
pTrunk
;

5597 if–
pPªvTrunk
 ){

5601 
iTrunk
 = 
	`gë4byã
(&
pPªvTrunk
->
aD©a
[0]);

5606 
iTrunk
 = 
	`gë4byã
(&
pPage1
->
aD©a
[32]);

5608 
	`ã°ˇ£
–
iTrunk
==
mxPage
 );

5609 if–
iTrunk
>
mxPage
 || 
nSórch
++ > 
n
 ){

5610 
rc
 = 
SQLITE_CORRUPT_BKPT
;

5612 
rc
 = 
	`båìGëUnu£dPage
(
pBt
, 
iTrunk
, &
pTrunk
, 0);

5614 if–
rc
 ){

5615 
pTrunk
 = 0;

5616 
íd_Æloˇã_∑ge
;

5618 
	`as£π
–
pTrunk
!=0 );

5619 
	`as£π
–
pTrunk
->
aD©a
!=0 );

5622 
k
 = 
	`gë4byã
(&
pTrunk
->
aD©a
[4]);

5623 if–
k
==0 && !
£¨chLi°
 ){

5627 
	`as£π
–
pPªvTrunk
==0 );

5628 
rc
 = 
	`sqlôe3PagîWrôe
(
pTrunk
->
pDbPage
);

5629 if–
rc
 ){

5630 
íd_Æloˇã_∑ge
;

5632 *
pPgno
 = 
iTrunk
;

5633 
	`mem˝y
(&
pPage1
->
aD©a
[32], &
pTrunk
->aData[0], 4);

5634 *
µPage
 = 
pTrunk
;

5635 
pTrunk
 = 0;

5636 
	`TRACE
(("ALLOCATE: %dÅrunk - %d fªê∑ge†À·\n", *
pPgno
, 
n
-1));

5637 }if–
k
>(
u32
)(
pBt
->
ußbÀSize
/4 - 2) ){

5639 
rc
 = 
SQLITE_CORRUPT_BKPT
;

5640 
íd_Æloˇã_∑ge
;

5641 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


5642 }if–
£¨chLi°


5643 && (
√¨by
==
iTrunk
 || (iTrunk<√¨by && 
eMode
==
BTALLOC_LE
))

5648 *
pPgno
 = 
iTrunk
;

5649 *
µPage
 = 
pTrunk
;

5650 
£¨chLi°
 = 0;

5651 
rc
 = 
	`sqlôe3PagîWrôe
(
pTrunk
->
pDbPage
);

5652 if–
rc
 ){

5653 
íd_Æloˇã_∑ge
;

5655 if–
k
==0 ){

5656 if–!
pPªvTrunk
 ){

5657 
	`mem˝y
(&
pPage1
->
aD©a
[32], &
pTrunk
->aData[0], 4);

5659 
rc
 = 
	`sqlôe3PagîWrôe
(
pPªvTrunk
->
pDbPage
);

5660 if–
rc
!=
SQLITE_OK
 ){

5661 
íd_Æloˇã_∑ge
;

5663 
	`mem˝y
(&
pPªvTrunk
->
aD©a
[0], &
pTrunk
->aData[0], 4);

5670 
MemPage
 *
pNewTrunk
;

5671 
Pgno
 
iNewTrunk
 = 
	`gë4byã
(&
pTrunk
->
aD©a
[8]);

5672 if–
iNewTrunk
>
mxPage
 ){

5673 
rc
 = 
SQLITE_CORRUPT_BKPT
;

5674 
íd_Æloˇã_∑ge
;

5676 
	`ã°ˇ£
–
iNewTrunk
==
mxPage
 );

5677 
rc
 = 
	`båìGëUnu£dPage
(
pBt
, 
iNewTrunk
, &
pNewTrunk
, 0);

5678 if–
rc
!=
SQLITE_OK
 ){

5679 
íd_Æloˇã_∑ge
;

5681 
rc
 = 
	`sqlôe3PagîWrôe
(
pNewTrunk
->
pDbPage
);

5682 if–
rc
!=
SQLITE_OK
 ){

5683 
	`ªÀa£Page
(
pNewTrunk
);

5684 
íd_Æloˇã_∑ge
;

5686 
	`mem˝y
(&
pNewTrunk
->
aD©a
[0], &
pTrunk
->aData[0], 4);

5687 
	`put4byã
(&
pNewTrunk
->
aD©a
[4], 
k
-1);

5688 
	`mem˝y
(&
pNewTrunk
->
aD©a
[8], &
pTrunk
->aD©a[12], (
k
-1)*4);

5689 
	`ªÀa£Page
(
pNewTrunk
);

5690 if–!
pPªvTrunk
 ){

5691 
	`as£π
–
	`sqlôe3PagîIswrôóbÀ
(
pPage1
->
pDbPage
) );

5692 
	`put4byã
(&
pPage1
->
aD©a
[32], 
iNewTrunk
);

5694 
rc
 = 
	`sqlôe3PagîWrôe
(
pPªvTrunk
->
pDbPage
);

5695 if–
rc
 ){

5696 
íd_Æloˇã_∑ge
;

5698 
	`put4byã
(&
pPªvTrunk
->
aD©a
[0], 
iNewTrunk
);

5701 
pTrunk
 = 0;

5702 
	`TRACE
(("ALLOCATE: %dÅrunk - %d fªê∑ge†À·\n", *
pPgno
, 
n
-1));

5704 }if–
k
>0 ){

5706 
u32
 
˛o£°
;

5707 
Pgno
 
iPage
;

5708 *
aD©a
 = 
pTrunk
->aData;

5709 if–
√¨by
>0 ){

5710 
u32
 
i
;

5711 
˛o£°
 = 0;

5712 if–
eMode
==
BTALLOC_LE
 ){

5713 
i
=0; i<
k
; i++){

5714 
iPage
 = 
	`gë4byã
(&
aD©a
[8+
i
*4]);

5715 if–
iPage
<=
√¨by
 ){

5716 
˛o£°
 = 
i
;

5721 
di°
;

5722 
di°
 = 
	`sqlôe3AbsI¡32
(
	`gë4byã
(&
aD©a
[8]Ë- 
√¨by
);

5723 
i
=1; i<
k
; i++){

5724 
d2
 = 
	`sqlôe3AbsI¡32
(
	`gë4byã
(&
aD©a
[8+
i
*4]Ë- 
√¨by
);

5725 if–
d2
<
di°
 ){

5726 
˛o£°
 = 
i
;

5727 
di°
 = 
d2
;

5732 
˛o£°
 = 0;

5735 
iPage
 = 
	`gë4byã
(&
aD©a
[8+
˛o£°
*4]);

5736 
	`ã°ˇ£
–
iPage
==
mxPage
 );

5737 if–
iPage
>
mxPage
 ){

5738 
rc
 = 
SQLITE_CORRUPT_BKPT
;

5739 
íd_Æloˇã_∑ge
;

5741 
	`ã°ˇ£
–
iPage
==
mxPage
 );

5742 if–!
£¨chLi°


5743 || (
iPage
==
√¨by
 || (iPage<√¨by && 
eMode
==
BTALLOC_LE
))

5745 
noC⁄ã¡
;

5746 *
pPgno
 = 
iPage
;

5747 
	`TRACE
(("ALLOCATE: %d wasÜeaf %d of %d onÅrunk %d"

5749 *
pPgno
, 
˛o£°
+1, 
k
, 
pTrunk
->
pgno
, 
n
-1));

5750 
rc
 = 
	`sqlôe3PagîWrôe
(
pTrunk
->
pDbPage
);

5751 if–
rc
 ) 
íd_Æloˇã_∑ge
;

5752 if–
˛o£°
<
k
-1 ){

5753 
	`mem˝y
(&
aD©a
[8+
˛o£°
*4], &aD©a[4+
k
*4], 4);

5755 
	`put4byã
(&
aD©a
[4], 
k
-1);

5756 
noC⁄ã¡
 = !
	`båìGëHasC⁄ã¡
(
pBt
, *
pPgno
)? 
PAGER_GET_NOCONTENT
 : 0;

5757 
rc
 = 
	`båìGëUnu£dPage
(
pBt
, *
pPgno
, 
µPage
, 
noC⁄ã¡
);

5758 if–
rc
==
SQLITE_OK
 ){

5759 
rc
 = 
	`sqlôe3PagîWrôe
((*
µPage
)->
pDbPage
);

5760 if–
rc
!=
SQLITE_OK
 ){

5761 
	`ªÀa£Page
(*
µPage
);

5762 *
µPage
 = 0;

5765 
£¨chLi°
 = 0;

5768 
	`ªÀa£Page
(
pPªvTrunk
);

5769 
pPªvTrunk
 = 0;

5770 } 
£¨chLi°
 );

5790 
bNoC⁄ã¡
 = (0==
	`IfNŸOmôAV
(
pBt
->
bDoTrunˇã
))? 
PAGER_GET_NOCONTENT
:0;

5792 
rc
 = 
	`sqlôe3PagîWrôe
(
pBt
->
pPage1
->
pDbPage
);

5793 if–
rc
 ) Ñc;

5794 
pBt
->
nPage
++;

5795 if–
pBt
->
nPage
==
	`PENDING_BYTE_PAGE
(pBt) )ÖBt->nPage++;

5797 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


5798 if–
pBt
->
autoVacuum
 && 
	`PTRMAP_ISPAGE
’Bt,ÖBt->
nPage
) ){

5803 
MemPage
 *
pPg
 = 0;

5804 
	`TRACE
(("ALLOCATE: %d fromÉnd o‡fûê’oöãr-m≠Öage)\n", 
pBt
->
nPage
));

5805 
	`as£π
–
pBt
->
nPage
!=
	`PENDING_BYTE_PAGE
(pBt) );

5806 
rc
 = 
	`båìGëUnu£dPage
(
pBt
,ÖBt->
nPage
, &
pPg
, 
bNoC⁄ã¡
);

5807 if–
rc
==
SQLITE_OK
 ){

5808 
rc
 = 
	`sqlôe3PagîWrôe
(
pPg
->
pDbPage
);

5809 
	`ªÀa£Page
(
pPg
);

5811 if–
rc
 ) Ñc;

5812 
pBt
->
nPage
++;

5813 if–
pBt
->
nPage
==
	`PENDING_BYTE_PAGE
(pBt) ){ÖBt->nPage++; }

5816 
	`put4byã
(28 + (
u8
*)
pBt
->
pPage1
->
aD©a
,ÖBt->
nPage
);

5817 *
pPgno
 = 
pBt
->
nPage
;

5819 
	`as£π
–*
pPgno
!=
	`PENDING_BYTE_PAGE
(
pBt
) );

5820 
rc
 = 
	`båìGëUnu£dPage
(
pBt
, *
pPgno
, 
µPage
, 
bNoC⁄ã¡
);

5821 if–
rc
 ) Ñc;

5822 
rc
 = 
	`sqlôe3PagîWrôe
((*
µPage
)->
pDbPage
);

5823 if–
rc
!=
SQLITE_OK
 ){

5824 
	`ªÀa£Page
(*
µPage
);

5825 *
µPage
 = 0;

5827 
	`TRACE
(("ALLOCATE: %d fromÉnd o‡fûe\n", *
pPgno
));

5830 
	`as£π
–*
pPgno
!=
	`PENDING_BYTE_PAGE
(
pBt
) );

5832 
íd_Æloˇã_∑ge
:

5833 
	`ªÀa£Page
(
pTrunk
);

5834 
	`ªÀa£Page
(
pPªvTrunk
);

5835 
	`as£π
–
rc
!=
SQLITE_OK
 || 
	`sqlôe3PagîPageRefcou¡
((*
µPage
)->
pDbPage
)<=1 );

5836 
	`as£π
–
rc
!=
SQLITE_OK
 || (*
µPage
)->
isInô
==0 );

5837  
rc
;

5838 
	}
}

5852 
	$‰ìPage2
(
BtSh¨ed
 *
pBt
, 
MemPage
 *
pMemPage
, 
Pgno
 
iPage
){

5853 
MemPage
 *
pTrunk
 = 0;

5854 
Pgno
 
iTrunk
 = 0;

5855 
MemPage
 *
pPage1
 = 
pBt
->pPage1;

5856 
MemPage
 *
pPage
;

5857 
rc
;

5858 
nFªe
;

5860 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

5861 
	`as£π
–
CORRUPT_DB
 || 
iPage
>1 );

5862 
	`as£π
–!
pMemPage
 ||ÖMemPage->
pgno
==
iPage
 );

5864 if–
iPage
<2 )  
SQLITE_CORRUPT_BKPT
;

5865 if–
pMemPage
 ){

5866 
pPage
 = 
pMemPage
;

5867 
	`sqlôe3PagîRef
(
pPage
->
pDbPage
);

5869 
pPage
 = 
	`båìPageLookup
(
pBt
, 
iPage
);

5873 
rc
 = 
	`sqlôe3PagîWrôe
(
pPage1
->
pDbPage
);

5874 if–
rc
 ) 
‰ì∑ge_out
;

5875 
nFªe
 = 
	`gë4byã
(&
pPage1
->
aD©a
[36]);

5876 
	`put4byã
(&
pPage1
->
aD©a
[36], 
nFªe
+1);

5878 if–
pBt
->
btsFœgs
 & 
BTS_SECURE_DELETE
 ){

5882 if–(!
pPage
 && ((
rc
 = 
	`båìGëPage
(
pBt
, 
iPage
, &pPage, 0))!=0) )

5883 || ((
rc
 = 
	`sqlôe3PagîWrôe
(
pPage
->
pDbPage
))!=0)

5885 
‰ì∑ge_out
;

5887 
	`mem£t
(
pPage
->
aD©a
, 0,ÖPage->
pBt
->
∑geSize
);

5893 if–
ISAUTOVACUUM
 ){

5894 
	`±rm≠Put
(
pBt
, 
iPage
, 
PTRMAP_FREEPAGE
, 0, &
rc
);

5895 if–
rc
 ) 
‰ì∑ge_out
;

5905 if–
nFªe
!=0 ){

5906 
u32
 
nLóf
;

5908 
iTrunk
 = 
	`gë4byã
(&
pPage1
->
aD©a
[32]);

5909 
rc
 = 
	`båìGëPage
(
pBt
, 
iTrunk
, &
pTrunk
, 0);

5910 if–
rc
!=
SQLITE_OK
 ){

5911 
‰ì∑ge_out
;

5914 
nLóf
 = 
	`gë4byã
(&
pTrunk
->
aD©a
[4]);

5915 
	`as£π
–
pBt
->
ußbÀSize
>32 );

5916 if–
nLóf
 > (
u32
)
pBt
->
ußbÀSize
/4 - 2 ){

5917 
rc
 = 
SQLITE_CORRUPT_BKPT
;

5918 
‰ì∑ge_out
;

5920 if–
nLóf
 < (
u32
)
pBt
->
ußbÀSize
/4 - 8 ){

5940 
rc
 = 
	`sqlôe3PagîWrôe
(
pTrunk
->
pDbPage
);

5941 if–
rc
==
SQLITE_OK
 ){

5942 
	`put4byã
(&
pTrunk
->
aD©a
[4], 
nLóf
+1);

5943 
	`put4byã
(&
pTrunk
->
aD©a
[8+
nLóf
*4], 
iPage
);

5944 if–
pPage
 && (
pBt
->
btsFœgs
 & 
BTS_SECURE_DELETE
)==0 ){

5945 
	`sqlôe3PagîD⁄tWrôe
(
pPage
->
pDbPage
);

5947 
rc
 = 
	`båìSëHasC⁄ã¡
(
pBt
, 
iPage
);

5949 
	`TRACE
(("FREE-PAGE: %dÜó‡⁄ÅrunkÖagê%d\n",
pPage
->
pgno
,
pTrunk
->pgno));

5950 
‰ì∑ge_out
;

5960 if–
pPage
==0 && 
SQLITE_OK
!=(
rc
 = 
	`båìGëPage
(
pBt
, 
iPage
, &pPage, 0)) ){

5961 
‰ì∑ge_out
;

5963 
rc
 = 
	`sqlôe3PagîWrôe
(
pPage
->
pDbPage
);

5964 if–
rc
!=
SQLITE_OK
 ){

5965 
‰ì∑ge_out
;

5967 
	`put4byã
(
pPage
->
aD©a
, 
iTrunk
);

5968 
	`put4byã
(&
pPage
->
aD©a
[4], 0);

5969 
	`put4byã
(&
pPage1
->
aD©a
[32], 
iPage
);

5970 
	`TRACE
(("FREE-PAGE: %dÇewÅrunkÖagêª∂acög %d\n", 
pPage
->
pgno
, 
iTrunk
));

5972 
‰ì∑ge_out
:

5973 if–
pPage
 ){

5974 
pPage
->
isInô
 = 0;

5976 
	`ªÀa£Page
(
pPage
);

5977 
	`ªÀa£Page
(
pTrunk
);

5978  
rc
;

5979 
	}
}

5980 
	$‰ìPage
(
MemPage
 *
pPage
, *
pRC
){

5981 if–(*
pRC
)==
SQLITE_OK
 ){

5982 *
pRC
 = 
	`‰ìPage2
(
pPage
->
pBt
,ÖPage,ÖPage->
pgno
);

5984 
	}
}

5991 
	$˛órCñl
(

5992 
MemPage
 *
pPage
,

5993 *
pCñl
,

5994 
u16
 *
≤Size


5996 
BtSh¨ed
 *
pBt
 = 
pPage
->pBt;

5997 
CñlInfo
 
öfo
;

5998 
Pgno
 
ovÊPgno
;

5999 
rc
;

6000 
nOvÊ
;

6001 
u32
 
ovÊPageSize
;

6003 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pPage
->
pBt
->
muãx
) );

6004 
pPage
->
	`xP¨£Cñl
’Page, 
pCñl
, &
öfo
);

6005 *
≤Size
 = 
öfo
.
nSize
;

6006 if–
öfo
.
nLoˇl
==öfo.
nPaylﬂd
 ){

6007  
SQLITE_OK
;

6009 if–
pCñl
+
öfo
.
nSize
-1 > 
pPage
->
aD©a
+pPage->
maskPage
 ){

6010  
SQLITE_CORRUPT_BKPT
;

6012 
ovÊPgno
 = 
	`gë4byã
(
pCñl
 + 
öfo
.
nSize
 - 4);

6013 
	`as£π
–
pBt
->
ußbÀSize
 > 4 );

6014 
ovÊPageSize
 = 
pBt
->
ußbÀSize
 - 4;

6015 
nOvÊ
 = (
öfo
.
nPaylﬂd
 - info.
nLoˇl
 + 
ovÊPageSize
 - 1)/ovflPageSize;

6016 
	`as£π
–
nOvÊ
>0 ||

6017 (
CORRUPT_DB
 && (
öfo
.
nPaylﬂd
 + 
ovÊPageSize
)<ovflPageSize)

6019  
nOvÊ
-- ){

6020 
Pgno
 
iNext
 = 0;

6021 
MemPage
 *
pOvÊ
 = 0;

6022 if–
ovÊPgno
<2 || ovÊPgno>
	`båìPagecou¡
(
pBt
) ){

6026  
SQLITE_CORRUPT_BKPT
;

6028 if–
nOvÊ
 ){

6029 
rc
 = 
	`gëOvîÊowPage
(
pBt
, 
ovÊPgno
, &
pOvÊ
, &
iNext
);

6030 if–
rc
 ) Ñc;

6033 if––
pOvÊ
 || (’OvÊ = 
	`båìPageLookup
(
pBt
, 
ovÊPgno
))!=0) )

6034 && 
	`sqlôe3PagîPageRefcou¡
(
pOvÊ
->
pDbPage
)!=1

6046 
rc
 = 
SQLITE_CORRUPT_BKPT
;

6048 
rc
 = 
	`‰ìPage2
(
pBt
, 
pOvÊ
, 
ovÊPgno
);

6051 if–
pOvÊ
 ){

6052 
	`sqlôe3PagîUƒef
(
pOvÊ
->
pDbPage
);

6054 if–
rc
 ) Ñc;

6055 
ovÊPgno
 = 
iNext
;

6057  
SQLITE_OK
;

6058 
	}
}

6072 
	$fûlInCñl
(

6073 
MemPage
 *
pPage
,

6074 *
pCñl
,

6075 c⁄° *
pKey
, 
i64
 
nKey
,

6076 c⁄° *
pD©a
,
nD©a
,

6077 
nZîo
,

6078 *
≤Size


6080 
nPaylﬂd
;

6081 c⁄° 
u8
 *
pSrc
;

6082 
nSrc
, 
n
, 
rc
;

6083 
•a˚Le·
;

6084 
MemPage
 *
pOvÊ
 = 0;

6085 
MemPage
 *
pToRñó£
 = 0;

6086 *
pPri‹
;

6087 *
pPaylﬂd
;

6088 
BtSh¨ed
 *
pBt
 = 
pPage
->pBt;

6089 
Pgno
 
pgnoOvÊ
 = 0;

6090 
nHódî
;

6092 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pPage
->
pBt
->
muãx
) );

6096 
	`as£π
–
pCñl
<
pPage
->
aD©a
 ||ÖCñl>=&pPage->aD©a[
pBt
->
∑geSize
]

6097 || 
	`sqlôe3PagîIswrôóbÀ
(
pPage
->
pDbPage
) );

6100 
nHódî
 = 
pPage
->
chûdPåSize
;

6101 
nPaylﬂd
 = 
nD©a
 + 
nZîo
;

6102 if–
pPage
->
ötKeyLóf
 ){

6103 
nHódî
 +
	`putV¨öt32
(&
pCñl
[nHódî], 
nPaylﬂd
);

6105 
	`as£π
–
nD©a
==0 );

6106 
	`as£π
–
nZîo
==0 );

6108 
nHódî
 +
	`putV¨öt
(&
pCñl
[nHódî], *(
u64
*)&
nKey
);

6111 if–
pPage
->
ötKey
 ){

6112 
pSrc
 = 
pD©a
;

6113 
nSrc
 = 
nD©a
;

6114 
nD©a
 = 0;

6116 
	`as£π
–
nKey
<=0x7ffffff‡&& 
pKey
!=0 );

6117 
nPaylﬂd
 = ()
nKey
;

6118 
pSrc
 = 
pKey
;

6119 
nSrc
 = ()
nKey
;

6121 if–
nPaylﬂd
<=
pPage
->
maxLoˇl
 ){

6122 
n
 = 
nHódî
 + 
nPaylﬂd
;

6123 
	`ã°ˇ£
–
n
==3 );

6124 
	`ã°ˇ£
–
n
==4 );

6125 if–
n
<4 )Ç = 4;

6126 *
≤Size
 = 
n
;

6127 
•a˚Le·
 = 
nPaylﬂd
;

6128 
pPri‹
 = 
pCñl
;

6130 
mn
 = 
pPage
->
möLoˇl
;

6131 
n
 = 
mn
 + (
nPaylﬂd
 - mnË% (
pPage
->
pBt
->
ußbÀSize
 - 4);

6132 
	`ã°ˇ£
–
n
==
pPage
->
maxLoˇl
 );

6133 
	`ã°ˇ£
–
n
==
pPage
->
maxLoˇl
+1 );

6134 if–
n
 > 
pPage
->
maxLoˇl
 )Ç = 
mn
;

6135 
•a˚Le·
 = 
n
;

6136 *
≤Size
 = 
n
 + 
nHódî
 + 4;

6137 
pPri‹
 = &
pCñl
[
nHódî
+
n
];

6139 
pPaylﬂd
 = &
pCñl
[
nHódî
];

6153 #i‡
SQLITE_DEBUG


6155 
CñlInfo
 
öfo
;

6156 
pPage
->
	`xP¨£Cñl
’Page, 
pCñl
, &
öfo
);

6157 
	`as£π
–
nHódî
==()(
öfo
.
pPaylﬂd
 - 
pCñl
) );

6158 
	`as£π
–
öfo
.
nKey
==nKey );

6159 
	`as£π
–*
≤Size
 =
öfo
.
nSize
 );

6160 
	`as£π
–
•a˚Le·
 =
öfo
.
nLoˇl
 );

6165  
nPaylﬂd
>0 ){

6166 if–
•a˚Le·
==0 ){

6167 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


6168 
Pgno
 
pgnoPåm≠
 = 
pgnoOvÊ
;

6169 if–
pBt
->
autoVacuum
 ){

6171 
pgnoOvÊ
++;

6173 
	`PTRMAP_ISPAGE
(
pBt
, 
pgnoOvÊ
Ë||ÖgnoOvÊ==
	`PENDING_BYTE_PAGE
(pBt)

6177 
rc
 = 
	`ÆloˇãBåìPage
(
pBt
, &
pOvÊ
, &
pgnoOvÊ
,ÖgnoOvfl, 0);

6178 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


6189 if–
pBt
->
autoVacuum
 && 
rc
==
SQLITE_OK
 ){

6190 
u8
 
eTy≥
 = (
pgnoPåm≠
?
PTRMAP_OVERFLOW2
:
PTRMAP_OVERFLOW1
);

6191 
	`±rm≠Put
(
pBt
, 
pgnoOvÊ
, 
eTy≥
, 
pgnoPåm≠
, &
rc
);

6192 if–
rc
 ){

6193 
	`ªÀa£Page
(
pOvÊ
);

6197 if–
rc
 ){

6198 
	`ªÀa£Page
(
pToRñó£
);

6199  
rc
;

6204 
	`as£π
–
pToRñó£
==0 || 
	`sqlôe3PagîIswrôóbÀ
’ToRñó£->
pDbPage
) );

6208 
	`as£π
–
pPri‹
<
pPage
->
aD©a
 ||ÖPri‹>=&pPage->aD©a[
pBt
->
∑geSize
]

6209 || 
	`sqlôe3PagîIswrôóbÀ
(
pPage
->
pDbPage
) );

6211 
	`put4byã
(
pPri‹
, 
pgnoOvÊ
);

6212 
	`ªÀa£Page
(
pToRñó£
);

6213 
pToRñó£
 = 
pOvÊ
;

6214 
pPri‹
 = 
pOvÊ
->
aD©a
;

6215 
	`put4byã
(
pPri‹
, 0);

6216 
pPaylﬂd
 = &
pOvÊ
->
aD©a
[4];

6217 
•a˚Le·
 = 
pBt
->
ußbÀSize
 - 4;

6219 
n
 = 
nPaylﬂd
;

6220 if–
n
>
•a˚Le·
 )Ç = spaceLeft;

6224 
	`as£π
–
pToRñó£
==0 || 
	`sqlôe3PagîIswrôóbÀ
’ToRñó£->
pDbPage
) );

6228 
	`as£π
–
pPaylﬂd
<
pPage
->
aD©a
 ||ÖPaylﬂd>=&pPage->aD©a[
pBt
->
∑geSize
]

6229 || 
	`sqlôe3PagîIswrôóbÀ
(
pPage
->
pDbPage
) );

6231 if–
nSrc
>0 ){

6232 if–
n
>
nSrc
 )Ç =ÇSrc;

6233 
	`as£π
–
pSrc
 );

6234 
	`mem˝y
(
pPaylﬂd
, 
pSrc
, 
n
);

6236 
	`mem£t
(
pPaylﬂd
, 0, 
n
);

6238 
nPaylﬂd
 -
n
;

6239 
pPaylﬂd
 +
n
;

6240 
pSrc
 +
n
;

6241 
nSrc
 -
n
;

6242 
•a˚Le·
 -
n
;

6243 if–
nSrc
==0 ){

6244 
nSrc
 = 
nD©a
;

6245 
pSrc
 = 
pD©a
;

6248 
	`ªÀa£Page
(
pToRñó£
);

6249  
SQLITE_OK
;

6250 
	}
}

6260 
	$dr›Cñl
(
MemPage
 *
pPage
, 
idx
, 
sz
, *
pRC
){

6261 
u32
 
pc
;

6262 
u8
 *
d©a
;

6263 
u8
 *
±r
;

6264 
rc
;

6265 
hdr
;

6267 if–*
pRC
 ) ;

6269 
	`as£π
–
idx
>=0 && idx<
pPage
->
nCñl
 );

6270 
	`as£π
–
CORRUPT_DB
 || 
sz
==
	`˚ŒSize
(
pPage
, 
idx
) );

6271 
	`as£π
–
	`sqlôe3PagîIswrôóbÀ
(
pPage
->
pDbPage
) );

6272 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pPage
->
pBt
->
muãx
) );

6273 
d©a
 = 
pPage
->
aD©a
;

6274 
±r
 = &
pPage
->
aCñlIdx
[2*
idx
];

6275 
pc
 = 
	`gë2byã
(
±r
);

6276 
hdr
 = 
pPage
->
hdrOff£t
;

6277 
	`ã°ˇ£
–
pc
==
	`gë2byã
(&
d©a
[
hdr
+5]) );

6278 
	`ã°ˇ£
–
pc
+
sz
==
pPage
->
pBt
->
ußbÀSize
 );

6279 if–
pc
 < (
u32
)
	`gë2byã
(&
d©a
[
hdr
+5]Ë||Öc+
sz
 > 
pPage
->
pBt
->
ußbÀSize
 ){

6280 *
pRC
 = 
SQLITE_CORRUPT_BKPT
;

6283 
rc
 = 
	`‰ìS∑˚
(
pPage
, 
pc
, 
sz
);

6284 if–
rc
 ){

6285 *
pRC
 = 
rc
;

6288 
pPage
->
nCñl
--;

6289 if–
pPage
->
nCñl
==0 ){

6290 
	`mem£t
(&
d©a
[
hdr
+1], 0, 4);

6291 
d©a
[
hdr
+7] = 0;

6292 
	`put2byã
(&
d©a
[
hdr
+5], 
pPage
->
pBt
->
ußbÀSize
);

6293 
pPage
->
nFªe
 =ÖPage->
pBt
->
ußbÀSize
 -ÖPage->
hdrOff£t


6294 - 
pPage
->
chûdPåSize
 - 8;

6296 
	`memmove
(
±r
,Öå+2, 2*(
pPage
->
nCñl
 - 
idx
));

6297 
	`put2byã
(&
d©a
[
hdr
+3], 
pPage
->
nCñl
);

6298 
pPage
->
nFªe
 += 2;

6300 
	}
}

6314 
	$ö£πCñl
(

6315 
MemPage
 *
pPage
,

6316 
i
,

6317 
u8
 *
pCñl
,

6318 
sz
,

6319 
u8
 *
pTemp
,

6320 
Pgno
 
iChûd
,

6321 *
pRC


6323 
idx
 = 0;

6324 
j
;

6325 
u8
 *
d©a
;

6326 
u8
 *
pIns
;

6328 if–*
pRC
 ) ;

6330 
	`as£π
–
i
>=0 && i<=
pPage
->
nCñl
+pPage->
nOvîÊow
 );

6331 
	`as£π
–
	`MX_CELL
(
pPage
->
pBt
)<=10921 );

6332 
	`as£π
–
pPage
->
nCñl
<=
	`MX_CELL
’Page->
pBt
Ë|| 
CORRUPT_DB
 );

6333 
	`as£π
–
pPage
->
nOvîÊow
<=
	`AºaySize
’Page->
≠OvÊ
) );

6334 
	`as£π
–
	`AºaySize
(
pPage
->
≠OvÊ
)==AºaySize’Page->
aiOvÊ
) );

6335 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pPage
->
pBt
->
muãx
) );

6341 
	`as£π
–
sz
==
pPage
->
	`xCñlSize
’Page, 
pCñl
Ë|| (sz==8 && 
iChûd
>0) );

6342 if–
pPage
->
nOvîÊow
 || 
sz
+2>pPage->
nFªe
 ){

6343 if–
pTemp
 ){

6344 
	`mem˝y
(
pTemp
, 
pCñl
, 
sz
);

6345 
pCñl
 = 
pTemp
;

6347 if–
iChûd
 ){

6348 
	`put4byã
(
pCñl
, 
iChûd
);

6350 
j
 = 
pPage
->
nOvîÊow
++;

6351 
	`as£π
–
j
<()((
pPage
->
≠OvÊ
)/(pPage->apOvfl[0])) );

6352 
pPage
->
≠OvÊ
[
j
] = 
pCñl
;

6353 
pPage
->
aiOvÊ
[
j
] = (
u16
)
i
;

6360 
	`as£π
–
j
==0 || 
pPage
->
aiOvÊ
[j-1]<(
u16
)
i
 );

6361 
	`as£π
–
j
==0 || 
i
==
pPage
->
aiOvÊ
[j-1]+1 );

6363 
rc
 = 
	`sqlôe3PagîWrôe
(
pPage
->
pDbPage
);

6364 if–
rc
!=
SQLITE_OK
 ){

6365 *
pRC
 = 
rc
;

6368 
	`as£π
–
	`sqlôe3PagîIswrôóbÀ
(
pPage
->
pDbPage
) );

6369 
d©a
 = 
pPage
->
aD©a
;

6370 
	`as£π
–&
d©a
[
pPage
->
˚ŒOff£t
]=ıPage->
aCñlIdx
 );

6371 
rc
 = 
	`ÆloˇãS∑˚
(
pPage
, 
sz
, &
idx
);

6372 if–
rc
 ){ *
pRC
 =Ñc; ; }

6375 
	`as£π
–
idx
 >= 0 );

6376 
	`as£π
–
idx
 >
pPage
->
˚ŒOff£t
+2*pPage->
nCñl
+2 || 
CORRUPT_DB
 );

6377 
	`as£π
–
idx
+
sz
 <()
pPage
->
pBt
->
ußbÀSize
 );

6378 
pPage
->
nFªe
 -(
u16
)(2 + 
sz
);

6379 
	`mem˝y
(&
d©a
[
idx
], 
pCñl
, 
sz
);

6380 if–
iChûd
 ){

6381 
	`put4byã
(&
d©a
[
idx
], 
iChûd
);

6383 
pIns
 = 
pPage
->
aCñlIdx
 + 
i
*2;

6384 
	`memmove
(
pIns
+2,ÖIns, 2*(
pPage
->
nCñl
 - 
i
));

6385 
	`put2byã
(
pIns
, 
idx
);

6386 
pPage
->
nCñl
++;

6388 if–(++
d©a
[
pPage
->
hdrOff£t
+4])==0 ) data[pPage->hdrOffset+3]++;

6389 
	`as£π
–
	`gë2byã
(&
d©a
[
pPage
->
hdrOff£t
+3])=ıPage->
nCñl
 );

6390 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


6391 if–
pPage
->
pBt
->
autoVacuum
 ){

6395 
	`±rm≠PutOvÊPå
(
pPage
, 
pCñl
, 
pRC
);

6399 
	}
}

6405 
CñlAºay
 
	tCñlAºay
;

6406 
	sCñlAºay
 {

6407 
	mnCñl
;

6408 
MemPage
 *
	mpRef
;

6409 
u8
 **
	m≠Cñl
;

6410 
u16
 *
	mszCñl
;

6417 
	$p›uœãCñlCache
(
CñlAºay
 *
p
, 
idx
, 
N
){

6418 
	`as£π
–
idx
>=0 && idx+
N
<=
p
->
nCñl
 );

6419  
N
>0 ){

6420 
	`as£π
–
p
->
≠Cñl
[
idx
]!=0 );

6421 if–
p
->
szCñl
[
idx
]==0 ){

6422 
p
->
szCñl
[
idx
] =Ö->
pRef
->
	`xCñlSize
’->pRef,Ö->
≠Cñl
[idx]);

6424 
	`as£π
–
CORRUPT_DB
 ||

6425 
p
->
szCñl
[
idx
]=ı->
pRef
->
	`xCñlSize
’->pRef,Ö->
≠Cñl
[idx]) );

6427 
idx
++;

6428 
N
--;

6430 
	}
}

6435 
SQLITE_NOINLINE
 
u16
 
	$compuãCñlSize
(
CñlAºay
 *
p
, 
N
){

6436 
	`as£π
–
N
>=0 && N<
p
->
nCñl
 );

6437 
	`as£π
–
p
->
szCñl
[
N
]==0 );

6438 
p
->
szCñl
[
N
] =Ö->
pRef
->
	`xCñlSize
’->pRef,Ö->
≠Cñl
[N]);

6439  
p
->
szCñl
[
N
];

6440 
	}
}

6441 
u16
 
	$ˇchedCñlSize
(
CñlAºay
 *
p
, 
N
){

6442 
	`as£π
–
N
>=0 && N<
p
->
nCñl
 );

6443 if–
p
->
szCñl
[
N
] ) Ö->szCell[N];

6444  
	`compuãCñlSize
(
p
, 
N
);

6445 
	}
}

6460 
	$ªbuûdPage
(

6461 
MemPage
 *
pPg
,

6462 
nCñl
,

6463 
u8
 **
≠Cñl
,

6464 
u16
 *
szCñl


6466 c⁄° 
hdr
 = 
pPg
->
hdrOff£t
;

6467 
u8
 * c⁄° 
aD©a
 = 
pPg
->aData;

6468 c⁄° 
ußbÀSize
 = 
pPg
->
pBt
->usableSize;

6469 
u8
 * c⁄° 
pEnd
 = &
aD©a
[
ußbÀSize
];

6470 
i
;

6471 
u8
 *
pCñÕå
 = 
pPg
->
aCñlIdx
;

6472 
u8
 *
pTmp
 = 
	`sqlôe3PagîTempS∑˚
(
pPg
->
pBt
->
pPagî
);

6473 
u8
 *
pD©a
;

6475 
i
 = 
	`gë2byã
(&
aD©a
[
hdr
+5]);

6476 
	`mem˝y
(&
pTmp
[
i
], &
aD©a
[i], 
ußbÀSize
 - i);

6478 
pD©a
 = 
pEnd
;

6479 
i
=0; i<
nCñl
; i++){

6480 
u8
 *
pCñl
 = 
≠Cñl
[
i
];

6481 if–
	`SQLITE_WITHIN
(
pCñl
,
aD©a
,
pEnd
) ){

6482 
pCñl
 = &
pTmp
[pCñ»- 
aD©a
];

6484 
pD©a
 -
szCñl
[
i
];

6485 
	`put2byã
(
pCñÕå
, (
pD©a
 - 
aD©a
));

6486 
pCñÕå
 += 2;

6487 if–
pD©a
 < 
pCñÕå
 )  
SQLITE_CORRUPT_BKPT
;

6488 
	`mem˝y
(
pD©a
, 
pCñl
, 
szCñl
[
i
]);

6489 
	`as£π
–
szCñl
[
i
]==
pPg
->
	`xCñlSize
’Pg, 
pCñl
Ë|| 
CORRUPT_DB
 );

6490 
	`ã°ˇ£
–
szCñl
[
i
]!=
pPg
->
	`xCñlSize
’Pg,
pCñl
) );

6494 
pPg
->
nCñl
 =ÇCell;

6495 
pPg
->
nOvîÊow
 = 0;

6497 
	`put2byã
(&
aD©a
[
hdr
+1], 0);

6498 
	`put2byã
(&
aD©a
[
hdr
+3], 
pPg
->
nCñl
);

6499 
	`put2byã
(&
aD©a
[
hdr
+5], 
pD©a
 -áData);

6500 
aD©a
[
hdr
+7] = 0x00;

6501  
SQLITE_OK
;

6502 
	}
}

6529 
	$∑geIn£πAºay
(

6530 
MemPage
 *
pPg
,

6531 
u8
 *
pBegö
,

6532 
u8
 **
µD©a
,

6533 
u8
 *
pCñÕå
,

6534 
iFú°
,

6535 
nCñl
,

6536 
CñlAºay
 *
pCAºay


6538 
i
;

6539 
u8
 *
aD©a
 = 
pPg
->aData;

6540 
u8
 *
pD©a
 = *
µD©a
;

6541 
iEnd
 = 
iFú°
 + 
nCñl
;

6542 
	`as£π
–
CORRUPT_DB
 || 
pPg
->
hdrOff£t
==0 );

6543 
i
=
iFú°
; i<
iEnd
; i++){

6544 
sz
, 
rc
;

6545 
u8
 *
pSlŸ
;

6546 
sz
 = 
	`ˇchedCñlSize
(
pCAºay
, 
i
);

6547 if–(
aD©a
[1]==0 &&áD©a[2]==0Ë|| (
pSlŸ
 = 
	`∑geFödSlŸ
(
pPg
,
sz
,&
rc
))==0 ){

6548 if–(
pD©a
 - 
pBegö
)<
sz
 )  1;

6549 
pD©a
 -
sz
;

6550 
pSlŸ
 = 
pD©a
;

6555 
	`as£π
–(
pSlŸ
+
sz
)<=
pCAºay
->
≠Cñl
[
i
]

6556 || 
pSlŸ
>=(
pCAºay
->
≠Cñl
[
i
]+
sz
)

6557 || 
CORRUPT_DB
 );

6558 
	`memmove
(
pSlŸ
, 
pCAºay
->
≠Cñl
[
i
], 
sz
);

6559 
	`put2byã
(
pCñÕå
, (
pSlŸ
 - 
aD©a
));

6560 
pCñÕå
 += 2;

6562 *
µD©a
 = 
pD©a
;

6564 
	}
}

6575 
	$∑geFªeAºay
(

6576 
MemPage
 *
pPg
,

6577 
iFú°
,

6578 
nCñl
,

6579 
CñlAºay
 *
pCAºay


6581 
u8
 * c⁄° 
aD©a
 = 
pPg
->aData;

6582 
u8
 * c⁄° 
pEnd
 = &
aD©a
[
pPg
->
pBt
->
ußbÀSize
];

6583 
u8
 * c⁄° 
pSèπ
 = &
aD©a
[
pPg
->
hdrOff£t
 + 8 +ÖPg->
chûdPåSize
];

6584 
nRë
 = 0;

6585 
i
;

6586 
iEnd
 = 
iFú°
 + 
nCñl
;

6587 
u8
 *
pFªe
 = 0;

6588 
szFªe
 = 0;

6590 
i
=
iFú°
; i<
iEnd
; i++){

6591 
u8
 *
pCñl
 = 
pCAºay
->
≠Cñl
[
i
];

6592 if–
	`SQLITE_WITHIN
(
pCñl
, 
pSèπ
, 
pEnd
) ){

6593 
sz
;

6597 
sz
 = 
pCAºay
->
szCñl
[
i
]; 
	`as£π
( sz>0 );

6598 if–
pFªe
!=(
pCñl
 + 
sz
) ){

6599 if–
pFªe
 ){

6600 
	`as£π
–
pFªe
>
aD©a
 && (pFree -áData)<65536 );

6601 
	`‰ìS∑˚
(
pPg
, (
u16
)(
pFªe
 - 
aD©a
), 
szFªe
);

6603 
pFªe
 = 
pCñl
;

6604 
szFªe
 = 
sz
;

6605 if–
pFªe
+
sz
>
pEnd
 )  0;

6607 
pFªe
 = 
pCñl
;

6608 
szFªe
 +
sz
;

6610 
nRë
++;

6613 if–
pFªe
 ){

6614 
	`as£π
–
pFªe
>
aD©a
 && (pFree -áData)<65536 );

6615 
	`‰ìS∑˚
(
pPg
, (
u16
)(
pFªe
 - 
aD©a
), 
szFªe
);

6617  
nRë
;

6618 
	}
}

6632 
	$edôPage
(

6633 
MemPage
 *
pPg
,

6634 
iOld
,

6635 
iNew
,

6636 
nNew
,

6637 
CñlAºay
 *
pCAºay


6639 
u8
 * c⁄° 
aD©a
 = 
pPg
->aData;

6640 c⁄° 
hdr
 = 
pPg
->
hdrOff£t
;

6641 
u8
 *
pBegö
 = &
pPg
->
aCñlIdx
[
nNew
 * 2];

6642 
nCñl
 = 
pPg
->nCell;

6643 
u8
 *
pD©a
;

6644 
u8
 *
pCñÕå
;

6645 
i
;

6646 
iOldEnd
 = 
iOld
 + 
pPg
->
nCñl
 +ÖPg->
nOvîÊow
;

6647 
iNewEnd
 = 
iNew
 + 
nNew
;

6649 #ifde‡
SQLITE_DEBUG


6650 
u8
 *
pTmp
 = 
	`sqlôe3PagîTempS∑˚
(
pPg
->
pBt
->
pPagî
);

6651 
	`mem˝y
(
pTmp
, 
aD©a
, 
pPg
->
pBt
->
ußbÀSize
);

6655 if–
iOld
<
iNew
 ){

6656 
nShi·
 = 
	`∑geFªeAºay
(
pPg
, 
iOld
, 
iNew
-iOld, 
pCAºay
);

6657 
	`memmove
(
pPg
->
aCñlIdx
, &pPg->aCñlIdx[
nShi·
*2], 
nCñl
*2);

6658 
nCñl
 -
nShi·
;

6660 if–
iNewEnd
 < 
iOldEnd
 ){

6661 
nCñl
 -
	`∑geFªeAºay
(
pPg
, 
iNewEnd
, 
iOldEnd
 - iNewEnd, 
pCAºay
);

6664 
pD©a
 = &
aD©a
[
	`gë2byãNŸZîo
(&aD©a[
hdr
+5])];

6665 if–
pD©a
<
pBegö
 ) 
edô∑ge_Áû
;

6668 if–
iNew
<
iOld
 ){

6669 
nAdd
 = 
	`MIN
(
nNew
,
iOld
-
iNew
);

6670 
	`as£π
–(
iOld
-
iNew
)<
nNew
 || 
nCñl
==0 || 
CORRUPT_DB
 );

6671 
pCñÕå
 = 
pPg
->
aCñlIdx
;

6672 
	`memmove
(&
pCñÕå
[
nAdd
*2],ÖCñÕå, 
nCñl
*2);

6673 if–
	`∑geIn£πAºay
(

6674 
pPg
, 
pBegö
, &
pD©a
, 
pCñÕå
,

6675 
iNew
, 
nAdd
, 
pCAºay


6676 ËË
edô∑ge_Áû
;

6677 
nCñl
 +
nAdd
;

6681 
i
=0; i<
pPg
->
nOvîÊow
; i++){

6682 
iCñl
 = (
iOld
 + 
pPg
->
aiOvÊ
[
i
]Ë- 
iNew
;

6683 if–
iCñl
>=0 && iCñl<
nNew
 ){

6684 
pCñÕå
 = &
pPg
->
aCñlIdx
[
iCñl
 * 2];

6685 
	`memmove
(&
pCñÕå
[2],ÖCñÕå, (
nCñl
 - 
iCñl
) * 2);

6686 
nCñl
++;

6687 if–
	`∑geIn£πAºay
(

6688 
pPg
, 
pBegö
, &
pD©a
, 
pCñÕå
,

6689 
iCñl
+
iNew
, 1, 
pCAºay


6690 ËË
edô∑ge_Áû
;

6695 
pCñÕå
 = &
pPg
->
aCñlIdx
[
nCñl
*2];

6696 if–
	`∑geIn£πAºay
(

6697 
pPg
, 
pBegö
, &
pD©a
, 
pCñÕå
,

6698 
iNew
+
nCñl
, 
nNew
-nCñl, 
pCAºay


6699 ËË
edô∑ge_Áû
;

6701 
pPg
->
nCñl
 = 
nNew
;

6702 
pPg
->
nOvîÊow
 = 0;

6704 
	`put2byã
(&
aD©a
[
hdr
+3], 
pPg
->
nCñl
);

6705 
	`put2byã
(&
aD©a
[
hdr
+5], 
pD©a
 -áData);

6707 #ifde‡
SQLITE_DEBUG


6708 
i
=0; i<
nNew
 && !
CORRUPT_DB
; i++){

6709 
u8
 *
pCñl
 = 
pCAºay
->
≠Cñl
[
i
+
iNew
];

6710 
iOff
 = 
	`gë2byãAlig√d
(&
pPg
->
aCñlIdx
[
i
*2]);

6711 if–
	`SQLITE_WITHIN
(
pCñl
, 
aD©a
, &aD©a[
pPg
->
pBt
->
ußbÀSize
]) ){

6712 
pCñl
 = &
pTmp
[pCñ»- 
aD©a
];

6714 
	`as£π
–0==
	`memcmp
(
pCñl
, &
aD©a
[
iOff
],

6715 
pCAºay
->
pRef
->
	`xCñlSize
’CAºay->pRef,ÖCAºay->
≠Cñl
[
i
+
iNew
])) );

6719  
SQLITE_OK
;

6720 
edô∑ge_Áû
:

6722 
	`p›uœãCñlCache
(
pCAºay
, 
iNew
, 
nNew
);

6723  
	`ªbuûdPage
(
pPg
, 
nNew
, &
pCAºay
->
≠Cñl
[
iNew
], &pCAºay->
szCñl
[iNew]);

6724 
	}
}

6738 
	#NN
 1

	)

6739 
	#NB
 (
NN
*2+1Ë

	)

6742 #i‚de‡
SQLITE_OMIT_QUICKBALANCE


6766 
	$bÆ™˚_quick
(
MemPage
 *
pP¨ít
, MemPagê*
pPage
, 
u8
 *
pS∑˚
){

6767 
BtSh¨ed
 *c⁄° 
pBt
 = 
pPage
->pBt;

6768 
MemPage
 *
pNew
;

6769 
rc
;

6770 
Pgno
 
pgnoNew
;

6772 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pPage
->
pBt
->
muãx
) );

6773 
	`as£π
–
	`sqlôe3PagîIswrôóbÀ
(
pP¨ít
->
pDbPage
) );

6774 
	`as£π
–
pPage
->
nOvîÊow
==1 );

6777 if–
	`NEVER
(
pPage
->
nCñl
==0ËË 
SQLITE_CORRUPT_BKPT
;

6783 
rc
 = 
	`ÆloˇãBåìPage
(
pBt
, &
pNew
, &
pgnoNew
, 0, 0);

6785 if–
rc
==
SQLITE_OK
 ){

6787 
u8
 *
pOut
 = &
pS∑˚
[4];

6788 
u8
 *
pCñl
 = 
pPage
->
≠OvÊ
[0];

6789 
u16
 
szCñl
 = 
pPage
->
	`xCñlSize
’Page, 
pCñl
);

6790 
u8
 *
pSt›
;

6792 
	`as£π
–
	`sqlôe3PagîIswrôóbÀ
(
pNew
->
pDbPage
) );

6793 
	`as£π
–
pPage
->
aD©a
[0]==(
PTF_INTKEY
|
PTF_LEAFDATA
|
PTF_LEAF
) );

6794 
	`zîoPage
(
pNew
, 
PTF_INTKEY
|
PTF_LEAFDATA
|
PTF_LEAF
);

6795 
rc
 = 
	`ªbuûdPage
(
pNew
, 1, &
pCñl
, &
szCñl
);

6796 if–
	`NEVER
(
rc
) ) Ñc;

6797 
pNew
->
nFªe
 = 
pBt
->
ußbÀSize
 -ÖNew->
˚ŒOff£t
 - 2 - 
szCñl
;

6808 if–
ISAUTOVACUUM
 ){

6809 
	`±rm≠Put
(
pBt
, 
pgnoNew
, 
PTRMAP_BTREE
, 
pP¨ít
->
pgno
, &
rc
);

6810 if–
szCñl
>
pNew
->
möLoˇl
 ){

6811 
	`±rm≠PutOvÊPå
(
pNew
, 
pCñl
, &
rc
);

6828 
pCñl
 = 
	`födCñl
(
pPage
,ÖPage->
nCñl
-1);

6829 
pSt›
 = &
pCñl
[9];

6830  (*(
pCñl
++)&0x80Ë&&ÖCñl<
pSt›
 );

6831 
pSt›
 = &
pCñl
[9];

6832  ((*(
pOut
++Ë*(
pCñl
++))&0x80Ë&&ÖCñl<
pSt›
 );

6835 
	`ö£πCñl
(
pP¨ít
,ÖP¨ít->
nCñl
, 
pS∑˚
, ()(
pOut
-pSpace),

6836 0, 
pPage
->
pgno
, &
rc
);

6839 
	`put4byã
(&
pP¨ít
->
aD©a
[pP¨ít->
hdrOff£t
+8], 
pgnoNew
);

6842 
	`ªÀa£Page
(
pNew
);

6845  
rc
;

6846 
	}
}

6855 
	$±rm≠CheckPages
(
MemPage
 **
≠Page
, 
nPage
){

6856 
i
, 
j
;

6857 
i
=0; i<
nPage
; i++){

6858 
Pgno
 
n
;

6859 
u8
 
e
;

6860 
MemPage
 *
pPage
 = 
≠Page
[
i
];

6861 
BtSh¨ed
 *
pBt
 = 
pPage
->pBt;

6862 
	`as£π
–
pPage
->
isInô
 );

6864 
j
=0; j<
pPage
->
nCñl
; j++){

6865 
CñlInfo
 
öfo
;

6866 
u8
 *
z
;

6868 
z
 = 
	`födCñl
(
pPage
, 
j
);

6869 
pPage
->
	`xP¨£Cñl
’Page, 
z
, &
öfo
);

6870 if–
öfo
.
nLoˇl
<öfo.
nPaylﬂd
 ){

6871 
Pgno
 
ovÊ
 = 
	`gë4byã
(&
z
[
öfo
.
nSize
-4]);

6872 
	`±rm≠Gë
(
pBt
, 
ovÊ
, &
e
, &
n
);

6873 
	`as£π
–
n
==
pPage
->
pgno
 && 
e
==
PTRMAP_OVERFLOW1
 );

6875 if–!
pPage
->
Àaf
 ){

6876 
Pgno
 
chûd
 = 
	`gë4byã
(
z
);

6877 
	`±rm≠Gë
(
pBt
, 
chûd
, &
e
, &
n
);

6878 
	`as£π
–
n
==
pPage
->
pgno
 && 
e
==
PTRMAP_BTREE
 );

6881 if–!
pPage
->
Àaf
 ){

6882 
Pgno
 
chûd
 = 
	`gë4byã
(&
pPage
->
aD©a
[pPage->
hdrOff£t
+8]);

6883 
	`±rm≠Gë
(
pBt
, 
chûd
, &
e
, &
n
);

6884 
	`as£π
–
n
==
pPage
->
pgno
 && 
e
==
PTRMAP_BTREE
 );

6888 
	}
}

6908 
	$c›yNodeC⁄ã¡
(
MemPage
 *
pFrom
, MemPagê*
pTo
, *
pRC
){

6909 if–(*
pRC
)==
SQLITE_OK
 ){

6910 
BtSh¨ed
 * c⁄° 
pBt
 = 
pFrom
->pBt;

6911 
u8
 * c⁄° 
aFrom
 = 
pFrom
->
aD©a
;

6912 
u8
 * c⁄° 
aTo
 = 
pTo
->
aD©a
;

6913 c⁄° 
iFromHdr
 = 
pFrom
->
hdrOff£t
;

6914 c⁄° 
iToHdr
 = ((
pTo
->
pgno
==1) ? 100 : 0);

6915 
rc
;

6916 
iD©a
;

6919 
	`as£π
–
pFrom
->
isInô
 );

6920 
	`as£π
–
pFrom
->
nFªe
>=
iToHdr
 );

6921 
	`as£π
–
	`gë2byã
(&
aFrom
[
iFromHdr
+5]Ë<()
pBt
->
ußbÀSize
 );

6924 
iD©a
 = 
	`gë2byã
(&
aFrom
[
iFromHdr
+5]);

6925 
	`mem˝y
(&
aTo
[
iD©a
], &
aFrom
[iD©a], 
pBt
->
ußbÀSize
-iData);

6926 
	`mem˝y
(&
aTo
[
iToHdr
], &
aFrom
[
iFromHdr
], 
pFrom
->
˚ŒOff£t
 + 2*pFrom->
nCñl
);

6933 
pTo
->
isInô
 = 0;

6934 
rc
 = 
	`båìInôPage
(
pTo
);

6935 if–
rc
!=
SQLITE_OK
 ){

6936 *
pRC
 = 
rc
;

6943 if–
ISAUTOVACUUM
 ){

6944 *
pRC
 = 
	`£tChûdPåm≠s
(
pTo
);

6947 
	}
}

6989 
	$bÆ™˚_n⁄roŸ
(

6990 
MemPage
 *
pP¨ít
,

6991 
iP¨ítIdx
,

6992 
u8
 *
aOvÊS∑˚
,

6993 
isRoŸ
,

6994 
bBulk


6996 
BtSh¨ed
 *
pBt
;

6997 
nMaxCñls
 = 0;

6998 
nNew
 = 0;

6999 
nOld
;

7000 
i
, 
j
, 
k
;

7001 
nxDiv
;

7002 
rc
 = 
SQLITE_OK
;

7003 
u16
 
ÀafC‹ª˘i⁄
;

7004 
ÀafD©a
;

7005 
ußbÀS∑˚
;

7006 
∑geFœgs
;

7007 
iS∑˚1
 = 0;

7008 
iOvÊS∑˚
 = 0;

7009 
szS¸©ch
;

7010 
MemPage
 *
≠Old
[
NB
];

7011 
MemPage
 *
≠New
[
NB
+2];

7012 
u8
 *
pRight
;

7013 
u8
 *
≠Div
[
NB
-1];

7014 
˙tNew
[
NB
+2];

7015 
˙tOld
[
NB
+2];

7016 
szNew
[
NB
+2];

7017 
u8
 *
aS∑˚1
;

7018 
Pgno
 
pgno
;

7019 
u8
 
abD⁄e
[
NB
+2];

7020 
Pgno
 
aPgno
[
NB
+2];

7021 
Pgno
 
aPgOrdî
[
NB
+2];

7022 
u16
 
aPgFœgs
[
NB
+2];

7023 
CñlAºay
 
b
;

7025 
	`mem£t
(
abD⁄e
, 0, (abDone));

7026 
b
.
nCñl
 = 0;

7027 
b
.
≠Cñl
 = 0;

7028 
pBt
 = 
pP¨ít
->pBt;

7029 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

7030 
	`as£π
–
	`sqlôe3PagîIswrôóbÀ
(
pP¨ít
->
pDbPage
) );

7033 
	`TRACE
(("BALANCE: begöÖagê%d chûd o‡%d\n", 
pPage
->
pgno
, 
pP¨ít
->pgno));

7041 
	`as£π
–
pP¨ít
->
nOvîÊow
==0 ||ÖParent->nOverflow==1 );

7042 
	`as£π
–
pP¨ít
->
nOvîÊow
==0 ||ÖP¨ít->
aiOvÊ
[0]==
iP¨ítIdx
 );

7044 if–!
aOvÊS∑˚
 ){

7045  
SQLITE_NOMEM_BKPT
;

7059 
i
 = 
pP¨ít
->
nOvîÊow
 +ÖP¨ít->
nCñl
;

7060 if–
i
<2 ){

7061 
nxDiv
 = 0;

7063 
	`as£π
–
bBulk
==0 || bBulk==1 );

7064 if–
iP¨ítIdx
==0 ){

7065 
nxDiv
 = 0;

7066 }if–
iP¨ítIdx
==
i
 ){

7067 
nxDiv
 = 
i
-2+
bBulk
;

7069 
nxDiv
 = 
iP¨ítIdx
-1;

7071 
i
 = 2-
bBulk
;

7073 
nOld
 = 
i
+1;

7074 if–(
i
+
nxDiv
-
pP¨ít
->
nOvîÊow
)=ıP¨ít->
nCñl
 ){

7075 
pRight
 = &
pP¨ít
->
aD©a
[pP¨ít->
hdrOff£t
+8];

7077 
pRight
 = 
	`födCñl
(
pP¨ít
, 
i
+
nxDiv
-pP¨ít->
nOvîÊow
);

7079 
pgno
 = 
	`gë4byã
(
pRight
);

7081 
rc
 = 
	`gëAndInôPage
(
pBt
, 
pgno
, &
≠Old
[
i
], 0, 0);

7082 if–
rc
 ){

7083 
	`mem£t
(
≠Old
, 0, (
i
+1)*(
MemPage
*));

7084 
bÆ™˚_˛ónup
;

7086 
nMaxCñls
 +1+
≠Old
[
i
]->
nCñl
+≠Old[i]->
nOvîÊow
;

7087 if–(
i
--)==0 ) ;

7089 if–
i
+
nxDiv
==
pP¨ít
->
aiOvÊ
[0] &&ÖP¨ít->
nOvîÊow
 ){

7090 
≠Div
[
i
] = 
pP¨ít
->
≠OvÊ
[0];

7091 
pgno
 = 
	`gë4byã
(
≠Div
[
i
]);

7092 
szNew
[
i
] = 
pP¨ít
->
	`xCñlSize
’P¨ít, 
≠Div
[i]);

7093 
pP¨ít
->
nOvîÊow
 = 0;

7095 
≠Div
[
i
] = 
	`födCñl
(
pP¨ít
, i+
nxDiv
-pP¨ít->
nOvîÊow
);

7096 
pgno
 = 
	`gë4byã
(
≠Div
[
i
]);

7097 
szNew
[
i
] = 
pP¨ít
->
	`xCñlSize
’P¨ít, 
≠Div
[i]);

7111 if–
pBt
->
btsFœgs
 & 
BTS_SECURE_DELETE
 ){

7112 
iOff
;

7114 
iOff
 = 
	`SQLITE_PTR_TO_INT
(
≠Div
[
i
]Ë- SQLITE_PTR_TO_INT(
pP¨ít
->
aD©a
);

7115 if–(
iOff
+
szNew
[
i
])>()
pBt
->
ußbÀSize
 ){

7116 
rc
 = 
SQLITE_CORRUPT_BKPT
;

7117 
	`mem£t
(
≠Old
, 0, (
i
+1)*(
MemPage
*));

7118 
bÆ™˚_˛ónup
;

7120 
	`mem˝y
(&
aOvÊS∑˚
[
iOff
], 
≠Div
[
i
], 
szNew
[i]);

7121 
≠Div
[
i
] = &
aOvÊS∑˚
[≠Div[i]-
pP¨ít
->
aD©a
];

7124 
	`dr›Cñl
(
pP¨ít
, 
i
+
nxDiv
-pP¨ít->
nOvîÊow
, 
szNew
[i], &
rc
);

7130 
nMaxCñls
 = (nMaxCells + 3)&~3;

7135 
szS¸©ch
 =

7136 
nMaxCñls
*(
u8
*)

7137 + 
nMaxCñls
*(
u16
)

7138 + 
pBt
->
∑geSize
;

7142 
	`as£π
–
szS¸©ch
<=6*()
pBt
->
∑geSize
 );

7143 
b
.
≠Cñl
 = 
	`sqlôe3S¸©chMÆloc
–
szS¸©ch
 );

7144 if–
b
.
≠Cñl
==0 ){

7145 
rc
 = 
SQLITE_NOMEM_BKPT
;

7146 
bÆ™˚_˛ónup
;

7148 
b
.
szCñl
 = (
u16
*)&b.
≠Cñl
[
nMaxCñls
];

7149 
aS∑˚1
 = (
u8
*)&
b
.
szCñl
[
nMaxCñls
];

7150 
	`as£π
–
	`EIGHT_BYTE_ALIGNMENT
(
aS∑˚1
) );

7168 
b
.
pRef
 = 
≠Old
[0];

7169 
ÀafC‹ª˘i⁄
 = 
b
.
pRef
->
Àaf
*4;

7170 
ÀafD©a
 = 
b
.
pRef
->
ötKeyLóf
;

7171 
i
=0; i<
nOld
; i++){

7172 
MemPage
 *
pOld
 = 
≠Old
[
i
];

7173 
limô
 = 
pOld
->
nCñl
;

7174 
u8
 *
aD©a
 = 
pOld
->aData;

7175 
u16
 
maskPage
 = 
pOld
->maskPage;

7176 
u8
 *
piCñl
 = 
aD©a
 + 
pOld
->
˚ŒOff£t
;

7177 
u8
 *
piEnd
;

7182 if–
pOld
->
aD©a
[0]!=
≠Old
[0]->aData[0] ){

7183 
rc
 = 
SQLITE_CORRUPT_BKPT
;

7184 
bÆ™˚_˛ónup
;

7204 
	`mem£t
(&
b
.
szCñl
[b.
nCñl
], 0, (b.szCñl[0])*(
limô
+
pOld
->
nOvîÊow
));

7205 if–
pOld
->
nOvîÊow
>0 ){

7206 
limô
 = 
pOld
->
aiOvÊ
[0];

7207 
j
=0; j<
limô
; j++){

7208 
b
.
≠Cñl
[b.
nCñl
] = 
aD©a
 + (
maskPage
 & 
	`gë2byãAlig√d
(
piCñl
));

7209 
piCñl
 += 2;

7210 
b
.
nCñl
++;

7212 
k
=0; k<
pOld
->
nOvîÊow
; k++){

7213 
	`as£π
–
k
==0 || 
pOld
->
aiOvÊ
[k-1]+1==pOld->aiOvfl[k] );

7214 
b
.
≠Cñl
[b.
nCñl
] = 
pOld
->
≠OvÊ
[
k
];

7215 
b
.
nCñl
++;

7218 
piEnd
 = 
aD©a
 + 
pOld
->
˚ŒOff£t
 + 2*pOld->
nCñl
;

7219  
piCñl
<
piEnd
 ){

7220 
	`as£π
–
b
.
nCñl
<
nMaxCñls
 );

7221 
b
.
≠Cñl
[b.
nCñl
] = 
aD©a
 + (
maskPage
 & 
	`gë2byãAlig√d
(
piCñl
));

7222 
piCñl
 += 2;

7223 
b
.
nCñl
++;

7226 
˙tOld
[
i
] = 
b
.
nCñl
;

7227 if–
i
<
nOld
-1 && !
ÀafD©a
){

7228 
u16
 
sz
 = (u16)
szNew
[
i
];

7229 
u8
 *
pTemp
;

7230 
	`as£π
–
b
.
nCñl
<
nMaxCñls
 );

7231 
b
.
szCñl
[b.
nCñl
] = 
sz
;

7232 
pTemp
 = &
aS∑˚1
[
iS∑˚1
];

7233 
iS∑˚1
 +
sz
;

7234 
	`as£π
–
sz
<=
pBt
->
maxLoˇl
+23 );

7235 
	`as£π
–
iS∑˚1
 <()
pBt
->
∑geSize
 );

7236 
	`mem˝y
(
pTemp
, 
≠Div
[
i
], 
sz
);

7237 
b
.
≠Cñl
[b.
nCñl
] = 
pTemp
+
ÀafC‹ª˘i⁄
;

7238 
	`as£π
–
ÀafC‹ª˘i⁄
==0 ||ÜeafCorrection==4 );

7239 
b
.
szCñl
[b.
nCñl
] = b.szCñl[b.nCñl] - 
ÀafC‹ª˘i⁄
;

7240 if–!
pOld
->
Àaf
 ){

7241 
	`as£π
–
ÀafC‹ª˘i⁄
==0 );

7242 
	`as£π
–
pOld
->
hdrOff£t
==0 );

7245 
	`mem˝y
(
b
.
≠Cñl
[b.
nCñl
], &
pOld
->
aD©a
[8], 4);

7247 
	`as£π
–
ÀafC‹ª˘i⁄
==4 );

7248  
b
.
szCñl
[b.
nCñl
]<4 ){

7251 
	`as£π
–
b
.
szCñl
[b.
nCñl
]==3 || 
CORRUPT_DB
 );

7252 
	`as£π
–
b
.
≠Cñl
[b.
nCñl
]==&
aS∑˚1
[
iS∑˚1
-3] || 
CORRUPT_DB
 );

7253 
aS∑˚1
[
iS∑˚1
++] = 0x00;

7254 
b
.
szCñl
[b.
nCñl
]++;

7257 
b
.
nCñl
++;

7277 
ußbÀS∑˚
 = 
pBt
->
ußbÀSize
 - 12 + 
ÀafC‹ª˘i⁄
;

7278 
i
=0; i<
nOld
; i++){

7279 
MemPage
 *
p
 = 
≠Old
[
i
];

7280 
szNew
[
i
] = 
ußbÀS∑˚
 - 
p
->
nFªe
;

7281 if–
szNew
[
i
]<0 ){ 
rc
 = 
SQLITE_CORRUPT_BKPT
; 
bÆ™˚_˛ónup
; }

7282 
j
=0; j<
p
->
nOvîÊow
; j++){

7283 
szNew
[
i
] +2 + 
p
->
	`xCñlSize
’,Ö->
≠OvÊ
[
j
]);

7285 
˙tNew
[
i
] = 
˙tOld
[i];

7287 
k
 = 
nOld
;

7288 
i
=0; i<
k
; i++){

7289 
sz
;

7290  
szNew
[
i
]>
ußbÀS∑˚
 ){

7291 if–
i
+1>=
k
 ){

7292 
k
 = 
i
+2;

7293 if–
k
>
NB
+2 ){ 
rc
 = 
SQLITE_CORRUPT_BKPT
; 
bÆ™˚_˛ónup
; }

7294 
szNew
[
k
-1] = 0;

7295 
˙tNew
[
k
-1] = 
b
.
nCñl
;

7297 
sz
 = 2 + 
	`ˇchedCñlSize
(&
b
, 
˙tNew
[
i
]-1);

7298 
szNew
[
i
] -
sz
;

7299 if–!
ÀafD©a
 ){

7300 if–
˙tNew
[
i
]<
b
.
nCñl
 ){

7301 
sz
 = 2 + 
	`ˇchedCñlSize
(&
b
, 
˙tNew
[
i
]);

7303 
sz
 = 0;

7306 
szNew
[
i
+1] +
sz
;

7307 
˙tNew
[
i
]--;

7309  
˙tNew
[
i
]<
b
.
nCñl
 ){

7310 
sz
 = 2 + 
	`ˇchedCñlSize
(&
b
, 
˙tNew
[
i
]);

7311 if–
szNew
[
i
]+
sz
>
ußbÀS∑˚
 ) ;

7312 
szNew
[
i
] +
sz
;

7313 
˙tNew
[
i
]++;

7314 if–!
ÀafD©a
 ){

7315 if–
˙tNew
[
i
]<
b
.
nCñl
 ){

7316 
sz
 = 2 + 
	`ˇchedCñlSize
(&
b
, 
˙tNew
[
i
]);

7318 
sz
 = 0;

7321 
szNew
[
i
+1] -
sz
;

7323 if–
˙tNew
[
i
]>=
b
.
nCñl
 ){

7324 
k
 = 
i
+1;

7325 }if–
˙tNew
[
i
] <= (i>0 ? cntNew[i-1] : 0) ){

7326 
rc
 = 
SQLITE_CORRUPT_BKPT
;

7327 
bÆ™˚_˛ónup
;

7342 
i
=
k
-1; i>0; i--){

7343 
szRight
 = 
szNew
[
i
];

7344 
szLe·
 = 
szNew
[
i
-1];

7345 
r
;

7346 
d
;

7348 
r
 = 
˙tNew
[
i
-1] - 1;

7349 
d
 = 
r
 + 1 - 
ÀafD©a
;

7350 ()
	`ˇchedCñlSize
(&
b
, 
d
);

7352 
	`as£π
–
d
<
nMaxCñls
 );

7353 
	`as£π
–
r
<
nMaxCñls
 );

7354 ()
	`ˇchedCñlSize
(&
b
, 
r
);

7355 if–
szRight
!=0

7356 && (
bBulk
 || 
szRight
+
b
.
szCñl
[
d
]+2 > 
szLe·
-(b.szCñl[
r
]+2)) ){

7359 
szRight
 +
b
.
szCñl
[
d
] + 2;

7360 
szLe·
 -
b
.
szCñl
[
r
] + 2;

7361 
˙tNew
[
i
-1] = 
r
;

7362 
r
--;

7363 
d
--;

7364 } 
r
>=0 );

7365 
szNew
[
i
] = 
szRight
;

7366 
szNew
[
i
-1] = 
szLe·
;

7367 if–
˙tNew
[
i
-1] <= (i>1 ? cntNew[i-2] : 0) ){

7368 
rc
 = 
SQLITE_CORRUPT_BKPT
;

7369 
bÆ™˚_˛ónup
;

7380 
	`as£π
–
˙tNew
[0]>0 || (
pP¨ít
->
pgno
==1 &&ÖP¨ít->
nCñl
==0Ë|| 
CORRUPT_DB
);

7381 
	`TRACE
(("BALANCE: old: %d(nc=%d) %d(nc=%d) %d(nc=%d)\n",

7382 
≠Old
[0]->
pgno
,ápOld[0]->
nCñl
,

7383 
nOld
>=2 ? 
≠Old
[1]->
pgno
 : 0,ÇOld>=2 ?ápOld[1]->
nCñl
 : 0,

7384 
nOld
>=3 ? 
≠Old
[2]->
pgno
 : 0,ÇOld>=3 ?ápOld[2]->
nCñl
 : 0

7390 
∑geFœgs
 = 
≠Old
[0]->
aD©a
[0];

7391 
i
=0; i<
k
; i++){

7392 
MemPage
 *
pNew
;

7393 if–
i
<
nOld
 ){

7394 
pNew
 = 
≠New
[
i
] = 
≠Old
[i];

7395 
≠Old
[
i
] = 0;

7396 
rc
 = 
	`sqlôe3PagîWrôe
(
pNew
->
pDbPage
);

7397 
nNew
++;

7398 if–
rc
 ) 
bÆ™˚_˛ónup
;

7400 
	`as£π
–
i
>0 );

7401 
rc
 = 
	`ÆloˇãBåìPage
(
pBt
, &
pNew
, &
pgno
, (
bBulk
 ? 1 :Ögno), 0);

7402 if–
rc
 ) 
bÆ™˚_˛ónup
;

7403 
	`zîoPage
(
pNew
, 
∑geFœgs
);

7404 
≠New
[
i
] = 
pNew
;

7405 
nNew
++;

7406 
˙tOld
[
i
] = 
b
.
nCñl
;

7409 if–
ISAUTOVACUUM
 ){

7410 
	`±rm≠Put
(
pBt
, 
pNew
->
pgno
, 
PTRMAP_BTREE
, 
pP¨ít
->pgno, &
rc
);

7411 if–
rc
!=
SQLITE_OK
 ){

7412 
bÆ™˚_˛ónup
;

7430 
i
=0; i<
nNew
; i++){

7431 
aPgOrdî
[
i
] = 
aPgno
[i] = 
≠New
[i]->
pgno
;

7432 
aPgFœgs
[
i
] = 
≠New
[i]->
pDbPage
->
Êags
;

7433 
j
=0; j<
i
; j++){

7434 if–
aPgno
[
j
]=˜Pgno[
i
] ){

7441 
	`as£π
–
CORRUPT_DB
 );

7442 
rc
 = 
SQLITE_CORRUPT_BKPT
;

7443 
bÆ™˚_˛ónup
;

7447 
i
=0; i<
nNew
; i++){

7448 
iBe°
 = 0;

7449 
j
=1; j<
nNew
; j++){

7450 if–
aPgOrdî
[
j
]<aPgOrdî[
iBe°
] ) iBest = j;

7452 
pgno
 = 
aPgOrdî
[
iBe°
];

7453 
aPgOrdî
[
iBe°
] = 0xffffffff;

7454 if–
iBe°
!=
i
 ){

7455 if–
iBe°
>
i
 ){

7456 
	`sqlôe3PagîRekey
(
≠New
[
iBe°
]->
pDbPage
, 
pBt
->
nPage
+iBest+1, 0);

7458 
	`sqlôe3PagîRekey
(
≠New
[
i
]->
pDbPage
, 
pgno
, 
aPgFœgs
[
iBe°
]);

7459 
≠New
[
i
]->
pgno
 =Ögno;

7463 
	`TRACE
(("BALANCE:Çew: %d(%dÇc=%d) %d(%dÇc=%d) %d(%dÇc=%d) "

7465 
≠New
[0]->
pgno
, 
szNew
[0], 
˙tNew
[0],

7466 
nNew
>=2 ? 
≠New
[1]->
pgno
 : 0,ÇNew>=2 ? 
szNew
[1] : 0,

7467 
nNew
>=2 ? 
˙tNew
[1] - c¡New[0] - !
ÀafD©a
 : 0,

7468 
nNew
>=3 ? 
≠New
[2]->
pgno
 : 0,ÇNew>=3 ? 
szNew
[2] : 0,

7469 
nNew
>=3 ? 
˙tNew
[2] - c¡New[1] - !
ÀafD©a
 : 0,

7470 
nNew
>=4 ? 
≠New
[3]->
pgno
 : 0,ÇNew>=4 ? 
szNew
[3] : 0,

7471 
nNew
>=4 ? 
˙tNew
[3] - c¡New[2] - !
ÀafD©a
 : 0,

7472 
nNew
>=5 ? 
≠New
[4]->
pgno
 : 0,ÇNew>=5 ? 
szNew
[4] : 0,

7473 
nNew
>=5 ? 
˙tNew
[4] - c¡New[3] - !
ÀafD©a
 : 0

7476 
	`as£π
–
	`sqlôe3PagîIswrôóbÀ
(
pP¨ít
->
pDbPage
) );

7477 
	`put4byã
(
pRight
, 
≠New
[
nNew
-1]->
pgno
);

7482 if–(
∑geFœgs
 & 
PTF_LEAF
)==0 && 
nOld
!=
nNew
 ){

7483 
MemPage
 *
pOld
 = (
nNew
>
nOld
 ? 
≠New
 : 
≠Old
)[nOld-1];

7484 
	`mem˝y
(&
≠New
[
nNew
-1]->
aD©a
[8], &
pOld
->aData[8], 4);

7503 if–
ISAUTOVACUUM
 ){

7504 
MemPage
 *
pNew
 = 
≠New
[0];

7505 
u8
 *
aOld
 = 
pNew
->
aD©a
;

7506 
˙tOldNext
 = 
pNew
->
nCñl
 +ÖNew->
nOvîÊow
;

7507 
ußbÀSize
 = 
pBt
->usableSize;

7508 
iNew
 = 0;

7509 
iOld
 = 0;

7511 
i
=0; i<
b
.
nCñl
; i++){

7512 
u8
 *
pCñl
 = 
b
.
≠Cñl
[
i
];

7513 if–
i
==
˙tOldNext
 ){

7514 
MemPage
 *
pOld
 = (++
iOld
)<
nNew
 ? 
≠New
[iOld] : 
≠Old
[iOld];

7515 
˙tOldNext
 +
pOld
->
nCñl
 +ÖOld->
nOvîÊow
 + !
ÀafD©a
;

7516 
aOld
 = 
pOld
->
aD©a
;

7518 if–
i
==
˙tNew
[
iNew
] ){

7519 
pNew
 = 
≠New
[++
iNew
];

7520 if–!
ÀafD©a
 ) ;

7529 if–
iOld
>=
nNew


7530 || 
pNew
->
pgno
!=
aPgno
[
iOld
]

7531 || !
	`SQLITE_WITHIN
(
pCñl
,
aOld
,&aOld[
ußbÀSize
])

7533 if–!
ÀafC‹ª˘i⁄
 ){

7534 
	`±rm≠Put
(
pBt
, 
	`gë4byã
(
pCñl
), 
PTRMAP_BTREE
, 
pNew
->
pgno
, &
rc
);

7536 if–
	`ˇchedCñlSize
(&
b
,
i
)>
pNew
->
möLoˇl
 ){

7537 
	`±rm≠PutOvÊPå
(
pNew
, 
pCñl
, &
rc
);

7539 if–
rc
 ) 
bÆ™˚_˛ónup
;

7545 
i
=0; i<
nNew
-1; i++){

7546 
u8
 *
pCñl
;

7547 
u8
 *
pTemp
;

7548 
sz
;

7549 
MemPage
 *
pNew
 = 
≠New
[
i
];

7550 
j
 = 
˙tNew
[
i
];

7552 
	`as£π
–
j
<
nMaxCñls
 );

7553 
	`as£π
–
b
.
≠Cñl
[
j
]!=0 );

7554 
pCñl
 = 
b
.
≠Cñl
[
j
];

7555 
sz
 = 
b
.
szCñl
[
j
] + 
ÀafC‹ª˘i⁄
;

7556 
pTemp
 = &
aOvÊS∑˚
[
iOvÊS∑˚
];

7557 if–!
pNew
->
Àaf
 ){

7558 
	`mem˝y
(&
pNew
->
aD©a
[8], 
pCñl
, 4);

7559 }if–
ÀafD©a
 ){

7565 
CñlInfo
 
öfo
;

7566 
j
--;

7567 
pNew
->
	`xP¨£Cñl
’New, 
b
.
≠Cñl
[
j
], &
öfo
);

7568 
pCñl
 = 
pTemp
;

7569 
sz
 = 4 + 
	`putV¨öt
(&
pCñl
[4], 
öfo
.
nKey
);

7570 
pTemp
 = 0;

7572 
pCñl
 -= 4;

7584 if–
b
.
szCñl
[
j
]==4 ){

7585 
	`as£π
(
ÀafC‹ª˘i⁄
==4);

7586 
sz
 = 
pP¨ít
->
	`xCñlSize
’P¨ít, 
pCñl
);

7589 
iOvÊS∑˚
 +
sz
;

7590 
	`as£π
–
sz
<=
pBt
->
maxLoˇl
+23 );

7591 
	`as£π
–
iOvÊS∑˚
 <()
pBt
->
∑geSize
 );

7592 
	`ö£πCñl
(
pP¨ít
, 
nxDiv
+
i
, 
pCñl
, 
sz
, 
pTemp
, 
pNew
->
pgno
, &
rc
);

7593 if–
rc
!=
SQLITE_OK
 ) 
bÆ™˚_˛ónup
;

7594 
	`as£π
–
	`sqlôe3PagîIswrôóbÀ
(
pP¨ít
->
pDbPage
) );

7619 
i
=1-
nNew
; i<nNew; i++){

7620 
iPg
 = 
i
<0 ? -i : i;

7621 
	`as£π
–
iPg
>=0 && iPg<
nNew
 );

7622 if–
abD⁄e
[
iPg
] ) ;

7623 if–
i
>=0

7624 || 
˙tOld
[
iPg
-1]>=
˙tNew
[iPg-1]

7626 
iNew
;

7627 
iOld
;

7628 
nNewCñl
;

7632 
	`as£π
–
iPg
==0 || 
˙tOld
[iPg-1]>=
˙tNew
[iPg-1] || 
abD⁄e
[iPg-1] );

7636 
	`as£π
–
˙tNew
[
iPg
]>=
˙tOld
[iPg] || 
abD⁄e
[iPg+1] );

7638 if–
iPg
==0 ){

7639 
iNew
 = 
iOld
 = 0;

7640 
nNewCñl
 = 
˙tNew
[0];

7642 
iOld
 = 
iPg
<
nOld
 ? (
˙tOld
[iPg-1] + !
ÀafD©a
Ë: 
b
.
nCñl
;

7643 
iNew
 = 
˙tNew
[
iPg
-1] + !
ÀafD©a
;

7644 
nNewCñl
 = 
˙tNew
[
iPg
] - 
iNew
;

7647 
rc
 = 
	`edôPage
(
≠New
[
iPg
], 
iOld
, 
iNew
, 
nNewCñl
, &
b
);

7648 if–
rc
 ) 
bÆ™˚_˛ónup
;

7649 
abD⁄e
[
iPg
]++;

7650 
≠New
[
iPg
]->
nFªe
 = 
ußbÀS∑˚
-
szNew
[iPg];

7651 
	`as£π
–
≠New
[
iPg
]->
nOvîÊow
==0 );

7652 
	`as£π
–
≠New
[
iPg
]->
nCñl
==
nNewCñl
 );

7657 
	`as£π
–
	`memcmp
(
abD⁄e
, "\01\01\01\01\01", 
nNew
)==0 );

7659 
	`as£π
–
nOld
>0 );

7660 
	`as£π
–
nNew
>0 );

7662 if–
isRoŸ
 && 
pP¨ít
->
nCñl
==0 &&ÖP¨ít->
hdrOff£t
<=
≠New
[0]->
nFªe
 ){

7678 
	`as£π
–
nNew
==1 || 
CORRUPT_DB
 );

7679 
rc
 = 
	`de‰agmítPage
(
≠New
[0]);

7680 
	`ã°ˇ£
–
rc
!=
SQLITE_OK
 );

7681 
	`as£π
–
≠New
[0]->
nFªe
 ==

7682 (
	`gë2byã
(&
≠New
[0]->
aD©a
[5])-≠New[0]->
˚ŒOff£t
-≠New[0]->
nCñl
*2)

7683 || 
rc
!=
SQLITE_OK


7685 
	`c›yNodeC⁄ã¡
(
≠New
[0], 
pP¨ít
, &
rc
);

7686 
	`‰ìPage
(
≠New
[0], &
rc
);

7687 }if–
ISAUTOVACUUM
 && !
ÀafC‹ª˘i⁄
 ){

7691 
i
=0; i<
nNew
; i++){

7692 
u32
 
key
 = 
	`gë4byã
(&
≠New
[
i
]->
aD©a
[8]);

7693 
	`±rm≠Put
(
pBt
, 
key
, 
PTRMAP_BTREE
, 
≠New
[
i
]->
pgno
, &
rc
);

7697 
	`as£π
–
pP¨ít
->
isInô
 );

7698 
	`TRACE
(("BALANCE: finished: old=%dÇew=%d cells=%d\n",

7699 
nOld
, 
nNew
, 
b
.
nCñl
));

7703 
i
=
nNew
; i<
nOld
; i++){

7704 
	`‰ìPage
(
≠Old
[
i
], &
rc
);

7708 if–
ISAUTOVACUUM
 && 
rc
==
SQLITE_OK
 && 
≠New
[0]->
isInô
 ){

7713 
	`±rm≠CheckPages
(
≠New
, 
nNew
);

7714 
	`±rm≠CheckPages
(&
pP¨ít
, 1);

7721 
bÆ™˚_˛ónup
:

7722 
	`sqlôe3S¸©chFªe
(
b
.
≠Cñl
);

7723 
i
=0; i<
nOld
; i++){

7724 
	`ªÀa£Page
(
≠Old
[
i
]);

7726 
i
=0; i<
nNew
; i++){

7727 
	`ªÀa£Page
(
≠New
[
i
]);

7730  
rc
;

7731 
	}
}

7753 
	$bÆ™˚_dì≥r
(
MemPage
 *
pRoŸ
, MemPagê**
µChûd
){

7754 
rc
;

7755 
MemPage
 *
pChûd
 = 0;

7756 
Pgno
 
pgnoChûd
 = 0;

7757 
BtSh¨ed
 *
pBt
 = 
pRoŸ
->pBt;

7759 
	`as£π
–
pRoŸ
->
nOvîÊow
>0 );

7760 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

7766 
rc
 = 
	`sqlôe3PagîWrôe
(
pRoŸ
->
pDbPage
);

7767 if–
rc
==
SQLITE_OK
 ){

7768 
rc
 = 
	`ÆloˇãBåìPage
(
pBt
,&
pChûd
,&
pgnoChûd
,
pRoŸ
->
pgno
,0);

7769 
	`c›yNodeC⁄ã¡
(
pRoŸ
, 
pChûd
, &
rc
);

7770 if–
ISAUTOVACUUM
 ){

7771 
	`±rm≠Put
(
pBt
, 
pgnoChûd
, 
PTRMAP_BTREE
, 
pRoŸ
->
pgno
, &
rc
);

7774 if–
rc
 ){

7775 *
µChûd
 = 0;

7776 
	`ªÀa£Page
(
pChûd
);

7777  
rc
;

7779 
	`as£π
–
	`sqlôe3PagîIswrôóbÀ
(
pChûd
->
pDbPage
) );

7780 
	`as£π
–
	`sqlôe3PagîIswrôóbÀ
(
pRoŸ
->
pDbPage
) );

7781 
	`as£π
–
pChûd
->
nCñl
==
pRoŸ
->nCell );

7783 
	`TRACE
(("BALANCE: c›yÑoŸ %d i¡ÿ%d\n", 
pRoŸ
->
pgno
, 
pChûd
->pgno));

7786 
	`mem˝y
(
pChûd
->
aiOvÊ
, 
pRoŸ
->aiOvfl,

7787 
pRoŸ
->
nOvîÊow
*’RoŸ->
aiOvÊ
[0]));

7788 
	`mem˝y
(
pChûd
->
≠OvÊ
, 
pRoŸ
->apOvfl,

7789 
pRoŸ
->
nOvîÊow
*’RoŸ->
≠OvÊ
[0]));

7790 
pChûd
->
nOvîÊow
 = 
pRoŸ
->nOverflow;

7793 
	`zîoPage
(
pRoŸ
, 
pChûd
->
aD©a
[0] & ~
PTF_LEAF
);

7794 
	`put4byã
(&
pRoŸ
->
aD©a
[pRoŸ->
hdrOff£t
+8], 
pgnoChûd
);

7796 *
µChûd
 = 
pChûd
;

7797  
SQLITE_OK
;

7798 
	}
}

7810 
	$bÆ™˚
(
BtCurs‹
 *
pCur
){

7811 
rc
 = 
SQLITE_OK
;

7812 c⁄° 
nMö
 = 
pCur
->
pBt
->
ußbÀSize
 * 2 / 3;

7813 
u8
 
aBÆ™˚QuickS∑˚
[13];

7814 
u8
 *
pFªe
 = 0;

7816 
	`VVA_ONLY
–
bÆ™˚_quick_ˇŒed
 = 0 );

7817 
	`VVA_ONLY
–
bÆ™˚_dì≥r_ˇŒed
 = 0 );

7820 
iPage
 = 
pCur
->iPage;

7821 
MemPage
 *
pPage
 = 
pCur
->
≠Page
[
iPage
];

7823 if–
iPage
==0 ){

7824 if–
pPage
->
nOvîÊow
 ){

7830 
	`as£π
–
bÆ™˚_dì≥r_ˇŒed
==0 );

7831 
	`VVA_ONLY
–
bÆ™˚_dì≥r_ˇŒed
++ );

7832 
rc
 = 
	`bÆ™˚_dì≥r
(
pPage
, &
pCur
->
≠Page
[1]);

7833 if–
rc
==
SQLITE_OK
 ){

7834 
pCur
->
iPage
 = 1;

7835 
pCur
->
aiIdx
[0] = 0;

7836 
pCur
->
aiIdx
[1] = 0;

7837 
	`as£π
–
pCur
->
≠Page
[1]->
nOvîÊow
 );

7842 }if–
pPage
->
nOvîÊow
==0 &&ÖPage->
nFªe
<=
nMö
 ){

7845 
MemPage
 * c⁄° 
pP¨ít
 = 
pCur
->
≠Page
[
iPage
-1];

7846 c⁄° 
iIdx
 = 
pCur
->
aiIdx
[
iPage
-1];

7848 
rc
 = 
	`sqlôe3PagîWrôe
(
pP¨ít
->
pDbPage
);

7849 if–
rc
==
SQLITE_OK
 ){

7850 #i‚de‡
SQLITE_OMIT_QUICKBALANCE


7851 if–
pPage
->
ötKeyLóf


7852 && 
pPage
->
nOvîÊow
==1

7853 && 
pPage
->
aiOvÊ
[0]=ıPage->
nCñl


7854 && 
pP¨ít
->
pgno
!=1

7855 && 
pP¨ít
->
nCñl
==
iIdx


7870 
	`as£π
–
bÆ™˚_quick_ˇŒed
==0 );

7871 
	`VVA_ONLY
–
bÆ™˚_quick_ˇŒed
++ );

7872 
rc
 = 
	`bÆ™˚_quick
(
pP¨ít
, 
pPage
, 
aBÆ™˚QuickS∑˚
);

7893 
u8
 *
pS∑˚
 = 
	`sqlôe3PageMÆloc
(
pCur
->
pBt
->
∑geSize
);

7894 
rc
 = 
	`bÆ™˚_n⁄roŸ
(
pP¨ít
, 
iIdx
, 
pS∑˚
, 
iPage
==1,

7895 
pCur
->
höts
&
BTREE_BULKLOAD
);

7896 if–
pFªe
 ){

7901 
	`sqlôe3PageFªe
(
pFªe
);

7907 
pFªe
 = 
pS∑˚
;

7911 
pPage
->
nOvîÊow
 = 0;

7914 
	`ªÀa£Page
(
pPage
);

7915 
pCur
->
iPage
--;

7916 
	`as£π
–
pCur
->
iPage
>=0 );

7918 } 
rc
==
SQLITE_OK
 );

7920 if–
pFªe
 ){

7921 
	`sqlôe3PageFªe
(
pFªe
);

7923  
rc
;

7924 
	}
}

7949 
	$sqlôe3BåìIn£π
(

7950 
BtCurs‹
 *
pCur
,

7951 c⁄° *
pKey
, 
i64
 
nKey
,

7952 c⁄° *
pD©a
, 
nD©a
,

7953 
nZîo
,

7954 
≠≥ndBüs
,

7955 
£ekResu…


7957 
rc
;

7958 
loc
 = 
£ekResu…
;

7959 
szNew
 = 0;

7960 
idx
;

7961 
MemPage
 *
pPage
;

7962 
Båì
 *
p
 = 
pCur
->
pBåì
;

7963 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

7964 *
ﬁdCñl
;

7965 *
√wCñl
 = 0;

7967 if–
pCur
->
eSèã
==
CURSOR_FAULT
 ){

7968 
	`as£π
–
pCur
->
skùNext
!=
SQLITE_OK
 );

7969  
pCur
->
skùNext
;

7972 
	`as£π
–
	`curs‹OwnsBtSh¨ed
(
pCur
) );

7973 
	`as£π
–(
pCur
->
curFœgs
 & 
BTCF_WrôeFœg
)!=0

7974 && 
pBt
->
öTønß˘i⁄
==
TRANS_WRITE


7975 && (
pBt
->
btsFœgs
 & 
BTS_READ_ONLY
)==0 );

7976 
	`as£π
–
	`hasSh¨edCacheTabÀLock
(
p
, 
pCur
->
pgnoRoŸ
,ÖCur->
pKeyInfo
!=0, 2) );

7983 
	`as£π
–(
pKey
==0)==(
pCur
->
pKeyInfo
==0) );

7996 if–
pCur
->
curFœgs
 & 
BTCF_Mu…ùÀ
 ){

7997 
rc
 = 
	`ßveAŒCurs‹s
(
pBt
, 
pCur
->
pgnoRoŸ
,ÖCur);

7998 if–
rc
 ) Ñc;

8001 if–
pCur
->
pKeyInfo
==0 ){

8002 
	`as£π
–
pKey
==0 );

8005 
	`övÆid©eIn¸blobCurs‹s
(
p
, 
nKey
, 0);

8010 if–(
pCur
->
curFœgs
&
BTCF_VÆidNKey
)!=0 && 
nKey
>0

8011 && 
pCur
->
öfo
.
nKey
==nKey-1 ){

8012 
loc
 = -1;

8013 }if–
loc
==0 ){

8014 
rc
 = 
	`sqlôe3BåìMovëoU≈acked
(
pCur
, 0, 
nKey
, 
≠≥ndBüs
, &
loc
);

8015 if–
rc
 ) Ñc;

8017 }if–
loc
==0 ){

8018 
rc
 = 
	`båìMovëo
(
pCur
, 
pKey
, 
nKey
, 
≠≥ndBüs
, &
loc
);

8019 if–
rc
 ) Ñc;

8021 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 || (pCur->eSèã==
CURSOR_INVALID
 && 
loc
) );

8023 
pPage
 = 
pCur
->
≠Page
[pCur->
iPage
];

8024 
	`as£π
–
pPage
->
ötKey
 || 
nKey
>=0 );

8025 
	`as£π
–
pPage
->
Àaf
 || !pPage->
ötKey
 );

8027 
	`TRACE
(("INSERT:Åable=%dÇkey=%lldÇdata=%dÖage=%d %s\n",

8028 
pCur
->
pgnoRoŸ
, 
nKey
, 
nD©a
, 
pPage
->
pgno
,

8029 
loc
==0 ? "overwrite" : "newÉntry"));

8030 
	`as£π
–
pPage
->
isInô
 );

8031 
√wCñl
 = 
pBt
->
pTmpS∑˚
;

8032 
	`as£π
–
√wCñl
!=0 );

8033 
rc
 = 
	`fûlInCñl
(
pPage
, 
√wCñl
, 
pKey
, 
nKey
, 
pD©a
, 
nD©a
, 
nZîo
, &
szNew
);

8034 if–
rc
 ) 
íd_ö£π
;

8035 
	`as£π
–
szNew
==
pPage
->
	`xCñlSize
’Page, 
√wCñl
) );

8036 
	`as£π
–
szNew
 <
	`MX_CELL_SIZE
(
pBt
) );

8037 
idx
 = 
pCur
->
aiIdx
[pCur->
iPage
];

8038 if–
loc
==0 ){

8039 
u16
 
szOld
;

8040 
	`as£π
–
idx
<
pPage
->
nCñl
 );

8041 
rc
 = 
	`sqlôe3PagîWrôe
(
pPage
->
pDbPage
);

8042 if–
rc
 ){

8043 
íd_ö£π
;

8045 
ﬁdCñl
 = 
	`födCñl
(
pPage
, 
idx
);

8046 if–!
pPage
->
Àaf
 ){

8047 
	`mem˝y
(
√wCñl
, 
ﬁdCñl
, 4);

8049 
rc
 = 
	`˛órCñl
(
pPage
, 
ﬁdCñl
, &
szOld
);

8050 
	`dr›Cñl
(
pPage
, 
idx
, 
szOld
, &
rc
);

8051 if–
rc
 ) 
íd_ö£π
;

8052 }if–
loc
<0 && 
pPage
->
nCñl
>0 ){

8053 
	`as£π
–
pPage
->
Àaf
 );

8054 
idx
 = ++
pCur
->
aiIdx
[pCur->
iPage
];

8056 
	`as£π
–
pPage
->
Àaf
 );

8058 
	`ö£πCñl
(
pPage
, 
idx
, 
√wCñl
, 
szNew
, 0, 0, &
rc
);

8059 
	`as£π
–
rc
!=
SQLITE_OK
 || 
pPage
->
nCñl
>0 ||ÖPage->
nOvîÊow
>0 );

8081 
pCur
->
öfo
.
nSize
 = 0;

8082 if–
rc
==
SQLITE_OK
 && 
pPage
->
nOvîÊow
 ){

8083 
pCur
->
curFœgs
 &~(
BTCF_VÆidNKey
);

8084 
rc
 = 
	`bÆ™˚
(
pCur
);

8090 
pCur
->
≠Page
[pCur->
iPage
]->
nOvîÊow
 = 0;

8091 
pCur
->
eSèã
 = 
CURSOR_INVALID
;

8093 
	`as£π
–
pCur
->
≠Page
[pCur->
iPage
]->
nOvîÊow
==0 );

8095 
íd_ö£π
:

8096  
rc
;

8097 
	}
}

8116 
	$sqlôe3BåìDñëe
(
BtCurs‹
 *
pCur
, 
u8
 
Êags
){

8117 
Båì
 *
p
 = 
pCur
->
pBåì
;

8118 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

8119 
rc
;

8120 
MemPage
 *
pPage
;

8121 *
pCñl
;

8122 
iCñlIdx
;

8123 
iCñlDïth
;

8124 
u16
 
szCñl
;

8125 
bSkù√xt
 = 0;

8126 
u8
 
bPª£rve
 = 
Êags
 & 
BTREE_SAVEPOSITION
;

8128 
	`as£π
–
	`curs‹OwnsBtSh¨ed
(
pCur
) );

8129 
	`as£π
–
pBt
->
öTønß˘i⁄
==
TRANS_WRITE
 );

8130 
	`as£π
–(
pBt
->
btsFœgs
 & 
BTS_READ_ONLY
)==0 );

8131 
	`as£π
–
pCur
->
curFœgs
 & 
BTCF_WrôeFœg
 );

8132 
	`as£π
–
	`hasSh¨edCacheTabÀLock
(
p
, 
pCur
->
pgnoRoŸ
,ÖCur->
pKeyInfo
!=0, 2) );

8133 
	`as£π
–!
	`hasRódC⁄Êi˘s
(
p
, 
pCur
->
pgnoRoŸ
) );

8134 
	`as£π
–
pCur
->
aiIdx
[pCur->
iPage
]<pCur->
≠Page
[pCur->iPage]->
nCñl
 );

8135 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 );

8136 
	`as£π
–(
Êags
 & ~(
BTREE_SAVEPOSITION
 | 
BTREE_AUXDELETE
))==0 );

8138 
iCñlDïth
 = 
pCur
->
iPage
;

8139 
iCñlIdx
 = 
pCur
->
aiIdx
[
iCñlDïth
];

8140 
pPage
 = 
pCur
->
≠Page
[
iCñlDïth
];

8141 
pCñl
 = 
	`födCñl
(
pPage
, 
iCñlIdx
);

8152 if–
bPª£rve
 ){

8153 if–!
pPage
->
Àaf


8154 || (
pPage
->
nFªe
+
	`˚ŒSizePå
’Page,
pCñl
)+2)>()(
pBt
->
ußbÀSize
*2/3)

8158 
rc
 = 
	`ßveCurs‹Key
(
pCur
);

8159 if–
rc
 ) Ñc;

8161 
bSkù√xt
 = 1;

8172 if–!
pPage
->
Àaf
 ){

8173 
nŸU£d
 = 0;

8174 
rc
 = 
	`sqlôe3BåìPªvious
(
pCur
, &
nŸU£d
);

8175 if–
rc
 ) Ñc;

8180 if–
pCur
->
curFœgs
 & 
BTCF_Mu…ùÀ
 ){

8181 
rc
 = 
	`ßveAŒCurs‹s
(
pBt
, 
pCur
->
pgnoRoŸ
,ÖCur);

8182 if–
rc
 ) Ñc;

8187 if–
pCur
->
pKeyInfo
==0 ){

8188 
	`övÆid©eIn¸blobCurs‹s
(
p
, 
pCur
->
öfo
.
nKey
, 0);

8194 
rc
 = 
	`sqlôe3PagîWrôe
(
pPage
->
pDbPage
);

8195 if–
rc
 ) Ñc;

8196 
rc
 = 
	`˛órCñl
(
pPage
, 
pCñl
, &
szCñl
);

8197 
	`dr›Cñl
(
pPage
, 
iCñlIdx
, 
szCñl
, &
rc
);

8198 if–
rc
 ) Ñc;

8205 if–!
pPage
->
Àaf
 ){

8206 
MemPage
 *
pLóf
 = 
pCur
->
≠Page
[pCur->
iPage
];

8207 
nCñl
;

8208 
Pgno
 
n
 = 
pCur
->
≠Page
[
iCñlDïth
+1]->
pgno
;

8209 *
pTmp
;

8211 
pCñl
 = 
	`födCñl
(
pLóf
,ÖLóf->
nCñl
-1);

8212 if–
pCñl
<&
pLóf
->
aD©a
[4] )  
SQLITE_CORRUPT_BKPT
;

8213 
nCñl
 = 
pLóf
->
	`xCñlSize
’Lóf, 
pCñl
);

8214 
	`as£π
–
	`MX_CELL_SIZE
(
pBt
Ë>
nCñl
 );

8215 
pTmp
 = 
pBt
->
pTmpS∑˚
;

8216 
	`as£π
–
pTmp
!=0 );

8217 
rc
 = 
	`sqlôe3PagîWrôe
(
pLóf
->
pDbPage
);

8218 
	`ö£πCñl
(
pPage
, 
iCñlIdx
, 
pCñl
-4, 
nCñl
+4, 
pTmp
, 
n
, &
rc
);

8219 
	`dr›Cñl
(
pLóf
,ÖLóf->
nCñl
-1,ÇCñl, &
rc
);

8220 if–
rc
 ) Ñc;

8238 
rc
 = 
	`bÆ™˚
(
pCur
);

8239 if–
rc
==
SQLITE_OK
 && 
pCur
->
iPage
>
iCñlDïth
 ){

8240  
pCur
->
iPage
>
iCñlDïth
 ){

8241 
	`ªÀa£Page
(
pCur
->
≠Page
[pCur->
iPage
--]);

8243 
rc
 = 
	`bÆ™˚
(
pCur
);

8246 if–
rc
==
SQLITE_OK
 ){

8247 if–
bSkù√xt
 ){

8248 
	`as£π
–
bPª£rve
 && (
pCur
->
iPage
==
iCñlDïth
 || 
CORRUPT_DB
) );

8249 
	`as£π
–
pPage
==
pCur
->
≠Page
[pCur->
iPage
] || 
CORRUPT_DB
 );

8250 
	`as£π
–(
pPage
->
nCñl
>0 || 
CORRUPT_DB
Ë&& 
iCñlIdx
<=pPage->nCell );

8251 
pCur
->
eSèã
 = 
CURSOR_SKIPNEXT
;

8252 if–
iCñlIdx
>=
pPage
->
nCñl
 ){

8253 
pCur
->
skùNext
 = -1;

8254 
pCur
->
aiIdx
[
iCñlDïth
] = 
pPage
->
nCñl
-1;

8256 
pCur
->
skùNext
 = 1;

8259 
rc
 = 
	`moveToRoŸ
(
pCur
);

8260 if–
bPª£rve
 ){

8261 
pCur
->
eSèã
 = 
CURSOR_REQUIRESEEK
;

8265  
rc
;

8266 
	}
}

8279 
	$båìCª©eTabÀ
(
Båì
 *
p
, *
piTabÀ
, 
¸óãTabFœgs
){

8280 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

8281 
MemPage
 *
pRoŸ
;

8282 
Pgno
 
pgnoRoŸ
;

8283 
rc
;

8284 
±fFœgs
;

8286 
	`as£π
–
	`sqlôe3BåìHﬁdsMuãx
(
p
) );

8287 
	`as£π
–
pBt
->
öTønß˘i⁄
==
TRANS_WRITE
 );

8288 
	`as£π
–(
pBt
->
btsFœgs
 & 
BTS_READ_ONLY
)==0 );

8290 #ifde‡
SQLITE_OMIT_AUTOVACUUM


8291 
rc
 = 
	`ÆloˇãBåìPage
(
pBt
, &
pRoŸ
, &
pgnoRoŸ
, 1, 0);

8292 if–
rc
 ){

8293  
rc
;

8296 if–
pBt
->
autoVacuum
 ){

8297 
Pgno
 
pgnoMove
;

8298 
MemPage
 *
pPageMove
;

8305 
	`övÆid©eAŒOvîÊowCache
(
pBt
);

8311 
	`sqlôe3BåìGëMëa
(
p
, 
BTREE_LARGEST_ROOT_PAGE
, &
pgnoRoŸ
);

8312 
pgnoRoŸ
++;

8317  
pgnoRoŸ
==
	`PTRMAP_PAGENO
(
pBt
,ÖgnoRoot) ||

8318 
pgnoRoŸ
==
	`PENDING_BYTE_PAGE
(
pBt
) ){

8319 
pgnoRoŸ
++;

8321 
	`as£π
–
pgnoRoŸ
>=3 || 
CORRUPT_DB
 );

8322 
	`ã°ˇ£
–
pgnoRoŸ
<3 );

8328 
rc
 = 
	`ÆloˇãBåìPage
(
pBt
, &
pPageMove
, &
pgnoMove
, 
pgnoRoŸ
, 
BTALLOC_EXACT
);

8329 if–
rc
!=
SQLITE_OK
 ){

8330  
rc
;

8333 if–
pgnoMove
!=
pgnoRoŸ
 ){

8340 
u8
 
eTy≥
 = 0;

8341 
Pgno
 
iPåPage
 = 0;

8346 
rc
 = 
	`ßveAŒCurs‹s
(
pBt
, 0, 0);

8347 
	`ªÀa£Page
(
pPageMove
);

8348 if–
rc
!=
SQLITE_OK
 ){

8349  
rc
;

8353 
rc
 = 
	`båìGëPage
(
pBt
, 
pgnoRoŸ
, &
pRoŸ
, 0);

8354 if–
rc
!=
SQLITE_OK
 ){

8355  
rc
;

8357 
rc
 = 
	`±rm≠Gë
(
pBt
, 
pgnoRoŸ
, &
eTy≥
, &
iPåPage
);

8358 if–
eTy≥
==
PTRMAP_ROOTPAGE
 ||ÉTy≥==
PTRMAP_FREEPAGE
 ){

8359 
rc
 = 
SQLITE_CORRUPT_BKPT
;

8361 if–
rc
!=
SQLITE_OK
 ){

8362 
	`ªÀa£Page
(
pRoŸ
);

8363  
rc
;

8365 
	`as£π
–
eTy≥
!=
PTRMAP_ROOTPAGE
 );

8366 
	`as£π
–
eTy≥
!=
PTRMAP_FREEPAGE
 );

8367 
rc
 = 
	`ªloˇãPage
(
pBt
, 
pRoŸ
, 
eTy≥
, 
iPåPage
, 
pgnoMove
, 0);

8368 
	`ªÀa£Page
(
pRoŸ
);

8371 if–
rc
!=
SQLITE_OK
 ){

8372  
rc
;

8374 
rc
 = 
	`båìGëPage
(
pBt
, 
pgnoRoŸ
, &
pRoŸ
, 0);

8375 if–
rc
!=
SQLITE_OK
 ){

8376  
rc
;

8378 
rc
 = 
	`sqlôe3PagîWrôe
(
pRoŸ
->
pDbPage
);

8379 if–
rc
!=
SQLITE_OK
 ){

8380 
	`ªÀa£Page
(
pRoŸ
);

8381  
rc
;

8384 
pRoŸ
 = 
pPageMove
;

8388 
	`±rm≠Put
(
pBt
, 
pgnoRoŸ
, 
PTRMAP_ROOTPAGE
, 0, &
rc
);

8389 if–
rc
 ){

8390 
	`ªÀa£Page
(
pRoŸ
);

8391  
rc
;

8398 
	`as£π
–
	`sqlôe3PagîIswrôóbÀ
(
pBt
->
pPage1
->
pDbPage
) );

8399 
rc
 = 
	`sqlôe3BåìUpd©eMëa
(
p
, 4, 
pgnoRoŸ
);

8400 if–
	`NEVER
(
rc
) ){

8401 
	`ªÀa£Page
(
pRoŸ
);

8402  
rc
;

8406 
rc
 = 
	`ÆloˇãBåìPage
(
pBt
, &
pRoŸ
, &
pgnoRoŸ
, 1, 0);

8407 if–
rc
 ) Ñc;

8410 
	`as£π
–
	`sqlôe3PagîIswrôóbÀ
(
pRoŸ
->
pDbPage
) );

8411 if–
¸óãTabFœgs
 & 
BTREE_INTKEY
 ){

8412 
±fFœgs
 = 
PTF_INTKEY
 | 
PTF_LEAFDATA
 | 
PTF_LEAF
;

8414 
±fFœgs
 = 
PTF_ZERODATA
 | 
PTF_LEAF
;

8416 
	`zîoPage
(
pRoŸ
, 
±fFœgs
);

8417 
	`sqlôe3PagîUƒef
(
pRoŸ
->
pDbPage
);

8418 
	`as£π
–(
pBt
->
›íFœgs
 & 
BTREE_SINGLE
)==0 || 
pgnoRoŸ
==2 );

8419 *
piTabÀ
 = ()
pgnoRoŸ
;

8420  
SQLITE_OK
;

8421 
	}
}

8422 
	$sqlôe3BåìCª©eTabÀ
(
Båì
 *
p
, *
piTabÀ
, 
Êags
){

8423 
rc
;

8424 
	`sqlôe3BåìE¡î
(
p
);

8425 
rc
 = 
	`båìCª©eTabÀ
(
p
, 
piTabÀ
, 
Êags
);

8426 
	`sqlôe3BåìLóve
(
p
);

8427  
rc
;

8428 
	}
}

8434 
	$˛órD©aba£Page
(

8435 
BtSh¨ed
 *
pBt
,

8436 
Pgno
 
pgno
,

8437 
‰ìPageFœg
,

8438 *
≤Ch™ge


8440 
MemPage
 *
pPage
;

8441 
rc
;

8442 *
pCñl
;

8443 
i
;

8444 
hdr
;

8445 
u16
 
szCñl
;

8447 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pBt
->
muãx
) );

8448 if–
pgno
>
	`båìPagecou¡
(
pBt
) ){

8449  
SQLITE_CORRUPT_BKPT
;

8451 
rc
 = 
	`gëAndInôPage
(
pBt
, 
pgno
, &
pPage
, 0, 0);

8452 if–
rc
 ) Ñc;

8453 if–
pPage
->
bBusy
 ){

8454 
rc
 = 
SQLITE_CORRUPT_BKPT
;

8455 
˛órd©aba£∑ge_out
;

8457 
pPage
->
bBusy
 = 1;

8458 
hdr
 = 
pPage
->
hdrOff£t
;

8459 
i
=0; i<
pPage
->
nCñl
; i++){

8460 
pCñl
 = 
	`födCñl
(
pPage
, 
i
);

8461 if–!
pPage
->
Àaf
 ){

8462 
rc
 = 
	`˛órD©aba£Page
(
pBt
, 
	`gë4byã
(
pCñl
), 1, 
≤Ch™ge
);

8463 if–
rc
 ) 
˛órd©aba£∑ge_out
;

8465 
rc
 = 
	`˛órCñl
(
pPage
, 
pCñl
, &
szCñl
);

8466 if–
rc
 ) 
˛órd©aba£∑ge_out
;

8468 if–!
pPage
->
Àaf
 ){

8469 
rc
 = 
	`˛órD©aba£Page
(
pBt
, 
	`gë4byã
(&
pPage
->
aD©a
[
hdr
+8]), 1, 
≤Ch™ge
);

8470 if–
rc
 ) 
˛órd©aba£∑ge_out
;

8471 }if–
≤Ch™ge
 ){

8472 
	`as£π
–
pPage
->
ötKey
 || 
CORRUPT_DB
 );

8473 
	`ã°ˇ£
–!
pPage
->
ötKey
 );

8474 *
≤Ch™ge
 +
pPage
->
nCñl
;

8476 if–
‰ìPageFœg
 ){

8477 
	`‰ìPage
(
pPage
, &
rc
);

8478 }if–(
rc
 = 
	`sqlôe3PagîWrôe
(
pPage
->
pDbPage
))==0 ){

8479 
	`zîoPage
(
pPage
,ÖPage->
aD©a
[
hdr
] | 
PTF_LEAF
);

8482 
˛órd©aba£∑ge_out
:

8483 
pPage
->
bBusy
 = 0;

8484 
	`ªÀa£Page
(
pPage
);

8485  
rc
;

8486 
	}
}

8501 
	$sqlôe3BåìCÀ¨TabÀ
(
Båì
 *
p
, 
iTabÀ
, *
≤Ch™ge
){

8502 
rc
;

8503 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

8504 
	`sqlôe3BåìE¡î
(
p
);

8505 
	`as£π
–
p
->
öTøns
==
TRANS_WRITE
 );

8507 
rc
 = 
	`ßveAŒCurs‹s
(
pBt
, (
Pgno
)
iTabÀ
, 0);

8509 if–
SQLITE_OK
==
rc
 ){

8513 
	`övÆid©eIn¸blobCurs‹s
(
p
, 0, 1);

8514 
rc
 = 
	`˛órD©aba£Page
(
pBt
, (
Pgno
)
iTabÀ
, 0, 
≤Ch™ge
);

8516 
	`sqlôe3BåìLóve
(
p
);

8517  
rc
;

8518 
	}
}

8525 
	$sqlôe3BåìCÀ¨TabÀOfCurs‹
(
BtCurs‹
 *
pCur
){

8526  
	`sqlôe3BåìCÀ¨TabÀ
(
pCur
->
pBåì
,ÖCur->
pgnoRoŸ
, 0);

8527 
	}
}

8549 
	$båìDr›TabÀ
(
Båì
 *
p
, 
Pgno
 
iTabÀ
, *
piMoved
){

8550 
rc
;

8551 
MemPage
 *
pPage
 = 0;

8552 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

8554 
	`as£π
–
	`sqlôe3BåìHﬁdsMuãx
(
p
) );

8555 
	`as£π
–
p
->
öTøns
==
TRANS_WRITE
 );

8565 if–
	`NEVER
(
pBt
->
pCurs‹
) ){

8566 
	`sqlôe3C⁄√˘i⁄Blocked
(
p
->
db
, 
pBt
->
pCurs‹
->
pBåì
->db);

8567  
SQLITE_LOCKED_SHAREDCACHE
;

8574 if–
	`NEVER
(
iTabÀ
<2) ){

8575  
SQLITE_CORRUPT_BKPT
;

8578 
rc
 = 
	`båìGëPage
(
pBt
, (
Pgno
)
iTabÀ
, &
pPage
, 0);

8579 if–
rc
 ) Ñc;

8580 
rc
 = 
	`sqlôe3BåìCÀ¨TabÀ
(
p
, 
iTabÀ
, 0);

8581 if–
rc
 ){

8582 
	`ªÀa£Page
(
pPage
);

8583  
rc
;

8586 *
piMoved
 = 0;

8588 #ifde‡
SQLITE_OMIT_AUTOVACUUM


8589 
	`‰ìPage
(
pPage
, &
rc
);

8590 
	`ªÀa£Page
(
pPage
);

8592 if–
pBt
->
autoVacuum
 ){

8593 
Pgno
 
maxRoŸPgno
;

8594 
	`sqlôe3BåìGëMëa
(
p
, 
BTREE_LARGEST_ROOT_PAGE
, &
maxRoŸPgno
);

8596 if–
iTabÀ
==
maxRoŸPgno
 ){

8600 
	`‰ìPage
(
pPage
, &
rc
);

8601 
	`ªÀa£Page
(
pPage
);

8602 if–
rc
!=
SQLITE_OK
 ){

8603  
rc
;

8610 
MemPage
 *
pMove
;

8611 
	`ªÀa£Page
(
pPage
);

8612 
rc
 = 
	`båìGëPage
(
pBt
, 
maxRoŸPgno
, &
pMove
, 0);

8613 if–
rc
!=
SQLITE_OK
 ){

8614  
rc
;

8616 
rc
 = 
	`ªloˇãPage
(
pBt
, 
pMove
, 
PTRMAP_ROOTPAGE
, 0, 
iTabÀ
, 0);

8617 
	`ªÀa£Page
(
pMove
);

8618 if–
rc
!=
SQLITE_OK
 ){

8619  
rc
;

8621 
pMove
 = 0;

8622 
rc
 = 
	`båìGëPage
(
pBt
, 
maxRoŸPgno
, &
pMove
, 0);

8623 
	`‰ìPage
(
pMove
, &
rc
);

8624 
	`ªÀa£Page
(
pMove
);

8625 if–
rc
!=
SQLITE_OK
 ){

8626  
rc
;

8628 *
piMoved
 = 
maxRoŸPgno
;

8636 
maxRoŸPgno
--;

8637  
maxRoŸPgno
==
	`PENDING_BYTE_PAGE
(
pBt
)

8638 || 
	`PTRMAP_ISPAGE
(
pBt
, 
maxRoŸPgno
) ){

8639 
maxRoŸPgno
--;

8641 
	`as£π
–
maxRoŸPgno
!=
	`PENDING_BYTE_PAGE
(
pBt
) );

8643 
rc
 = 
	`sqlôe3BåìUpd©eMëa
(
p
, 4, 
maxRoŸPgno
);

8645 
	`‰ìPage
(
pPage
, &
rc
);

8646 
	`ªÀa£Page
(
pPage
);

8649  
rc
;

8650 
	}
}

8651 
	$sqlôe3BåìDr›TabÀ
(
Båì
 *
p
, 
iTabÀ
, *
piMoved
){

8652 
rc
;

8653 
	`sqlôe3BåìE¡î
(
p
);

8654 
rc
 = 
	`båìDr›TabÀ
(
p
, 
iTabÀ
, 
piMoved
);

8655 
	`sqlôe3BåìLóve
(
p
);

8656  
rc
;

8657 
	}
}

8680 
	$sqlôe3BåìGëMëa
(
Båì
 *
p
, 
idx
, 
u32
 *
pMëa
){

8681 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

8683 
	`sqlôe3BåìE¡î
(
p
);

8684 
	`as£π
–
p
->
öTøns
>
TRANS_NONE
 );

8685 
	`as£π
–
SQLITE_OK
==
	`quîySh¨edCacheTabÀLock
(
p
, 
MASTER_ROOT
, 
READ_LOCK
) );

8686 
	`as£π
–
pBt
->
pPage1
 );

8687 
	`as£π
–
idx
>=0 && idx<=15 );

8689 if–
idx
==
BTREE_DATA_VERSION
 ){

8690 *
pMëa
 = 
	`sqlôe3PagîD©aVîsi⁄
(
pBt
->
pPagî
Ë+ 
p
->
iD©aVîsi⁄
;

8692 *
pMëa
 = 
	`gë4byã
(&
pBt
->
pPage1
->
aD©a
[36 + 
idx
*4]);

8697 #ifde‡
SQLITE_OMIT_AUTOVACUUM


8698 if–
idx
==
BTREE_LARGEST_ROOT_PAGE
 && *
pMëa
>0 ){

8699 
pBt
->
btsFœgs
 |
BTS_READ_ONLY
;

8703 
	`sqlôe3BåìLóve
(
p
);

8704 
	}
}

8710 
	$sqlôe3BåìUpd©eMëa
(
Båì
 *
p
, 
idx
, 
u32
 
iMëa
){

8711 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

8712 *
pP1
;

8713 
rc
;

8714 
	`as£π
–
idx
>=1 && idx<=15 );

8715 
	`sqlôe3BåìE¡î
(
p
);

8716 
	`as£π
–
p
->
öTøns
==
TRANS_WRITE
 );

8717 
	`as£π
–
pBt
->
pPage1
!=0 );

8718 
pP1
 = 
pBt
->
pPage1
->
aD©a
;

8719 
rc
 = 
	`sqlôe3PagîWrôe
(
pBt
->
pPage1
->
pDbPage
);

8720 if–
rc
==
SQLITE_OK
 ){

8721 
	`put4byã
(&
pP1
[36 + 
idx
*4], 
iMëa
);

8722 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


8723 if–
idx
==
BTREE_INCR_VACUUM
 ){

8724 
	`as£π
–
pBt
->
autoVacuum
 || 
iMëa
==0 );

8725 
	`as£π
–
iMëa
==0 || iMeta==1 );

8726 
pBt
->
ö¸Vacuum
 = (
u8
)
iMëa
;

8730 
	`sqlôe3BåìLóve
(
p
);

8731  
rc
;

8732 
	}
}

8734 #i‚de‡
SQLITE_OMIT_BTREECOUNT


8743 
	$sqlôe3BåìCou¡
(
BtCurs‹
 *
pCur
, 
i64
 *
≤E¡ry
){

8744 
i64
 
nE¡ry
 = 0;

8745 
rc
;

8747 if–
pCur
->
pgnoRoŸ
==0 ){

8748 *
≤E¡ry
 = 0;

8749  
SQLITE_OK
;

8751 
rc
 = 
	`moveToRoŸ
(
pCur
);

8756  
rc
==
SQLITE_OK
 ){

8757 
iIdx
;

8758 
MemPage
 *
pPage
;

8764 
pPage
 = 
pCur
->
≠Page
[pCur->
iPage
];

8765 if–
pPage
->
Àaf
 || !pPage->
ötKey
 ){

8766 
nE¡ry
 +
pPage
->
nCñl
;

8779 if–
pPage
->
Àaf
 ){

8781 if–
pCur
->
iPage
==0 ){

8783 *
≤E¡ry
 = 
nE¡ry
;

8784  
	`moveToRoŸ
(
pCur
);

8786 
	`moveToP¨ít
(
pCur
);

8787 } 
pCur
->
aiIdx
[pCur->
iPage
]>ıCur->
≠Page
[pCur->iPage]->
nCñl
 );

8789 
pCur
->
aiIdx
[pCur->
iPage
]++;

8790 
pPage
 = 
pCur
->
≠Page
[pCur->
iPage
];

8796 
iIdx
 = 
pCur
->
aiIdx
[pCur->
iPage
];

8797 if–
iIdx
==
pPage
->
nCñl
 ){

8798 
rc
 = 
	`moveToChûd
(
pCur
, 
	`gë4byã
(&
pPage
->
aD©a
[pPage->
hdrOff£t
+8]));

8800 
rc
 = 
	`moveToChûd
(
pCur
, 
	`gë4byã
(
	`födCñl
(
pPage
, 
iIdx
)));

8805  
rc
;

8806 
	}
}

8813 
Pagî
 *
	$sqlôe3BåìPagî
(
Båì
 *
p
){

8814  
p
->
pBt
->
pPagî
;

8815 
	}
}

8817 #i‚de‡
SQLITE_OMIT_INTEGRITY_CHECK


8821 
	$checkAµídMsg
(

8822 
I¡egrôyCk
 *
pCheck
,

8823 c⁄° *
zF‹m©
,

8826 
va_li°
 
≠
;

8827 if–!
pCheck
->
mxEº
 ) ;

8828 
pCheck
->
mxEº
--;

8829 
pCheck
->
nEº
++;

8830 
	`va_°¨t
(
≠
, 
zF‹m©
);

8831 if–
pCheck
->
îrMsg
.
nCh¨
 ){

8832 
	`sqlôe3SåAccumAµíd
(&
pCheck
->
îrMsg
, "\n", 1);

8834 if–
pCheck
->
zPfx
 ){

8835 
	`sqlôe3XPrötf
(&
pCheck
->
îrMsg
,ÖCheck->
zPfx
,ÖCheck->
v1
,ÖCheck->
v2
);

8837 
	`sqlôe3VXPrötf
(&
pCheck
->
îrMsg
, 
zF‹m©
, 
≠
);

8838 
	`va_íd
(
≠
);

8839 if–
pCheck
->
îrMsg
.
accEº‹
==
STRACCUM_NOMEM
 ){

8840 
pCheck
->
mÆlocFaûed
 = 1;

8842 
	}
}

8845 #i‚de‡
SQLITE_OMIT_INTEGRITY_CHECK


8851 
	$gëPageRe„ªn˚d
(
I¡egrôyCk
 *
pCheck
, 
Pgno
 
iPg
){

8852 
	`as£π
–
iPg
<=
pCheck
->
nPage
 && ’Check->
aPgRef
[0])==1 );

8853  (
pCheck
->
aPgRef
[
iPg
/8] & (1 << (iPg & 0x07)));

8854 
	}
}

8859 
	$£tPageRe„ªn˚d
(
I¡egrôyCk
 *
pCheck
, 
Pgno
 
iPg
){

8860 
	`as£π
–
iPg
<=
pCheck
->
nPage
 && ’Check->
aPgRef
[0])==1 );

8861 
pCheck
->
aPgRef
[
iPg
/8] |= (1 << (iPg & 0x07));

8862 
	}
}

8873 
	$checkRef
(
I¡egrôyCk
 *
pCheck
, 
Pgno
 
iPage
){

8874 if–
iPage
==0 )  1;

8875 if–
iPage
>
pCheck
->
nPage
 ){

8876 
	`checkAµídMsg
(
pCheck
, "övÆidÖagênumbî %d", 
iPage
);

8879 if–
	`gëPageRe„ªn˚d
(
pCheck
, 
iPage
) ){

8880 
	`checkAµídMsg
(
pCheck
, "2ndÑe„ªn˚Åÿ∑gê%d", 
iPage
);

8883 
	`£tPageRe„ªn˚d
(
pCheck
, 
iPage
);

8885 
	}
}

8887 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


8893 
	$checkPåm≠
(

8894 
I¡egrôyCk
 *
pCheck
,

8895 
Pgno
 
iChûd
,

8896 
u8
 
eTy≥
,

8897 
Pgno
 
iP¨ít


8899 
rc
;

8900 
u8
 
ePåm≠Ty≥
;

8901 
Pgno
 
iPåm≠P¨ít
;

8903 
rc
 = 
	`±rm≠Gë
(
pCheck
->
pBt
, 
iChûd
, &
ePåm≠Ty≥
, &
iPåm≠P¨ít
);

8904 if–
rc
!=
SQLITE_OK
 ){

8905 if–
rc
==
SQLITE_NOMEM
 ||Ñc==
SQLITE_IOERR_NOMEM
 ) 
pCheck
->
mÆlocFaûed
 = 1;

8906 
	`checkAµídMsg
(
pCheck
, "FaûedÅÿªadÖåm≠ key=%d", 
iChûd
);

8910 if–
ePåm≠Ty≥
!=
eTy≥
 || 
iPåm≠P¨ít
!=
iP¨ít
 ){

8911 
	`checkAµídMsg
(
pCheck
,

8913 
iChûd
, 
eTy≥
, 
iP¨ít
, 
ePåm≠Ty≥
, 
iPåm≠P¨ít
);

8915 
	}
}

8922 
	$checkLi°
(

8923 
I¡egrôyCk
 *
pCheck
,

8924 
isFªeLi°
,

8925 
iPage
,

8926 
N


8928 
i
;

8929 
ex≥˘ed
 = 
N
;

8930 
iFú°
 = 
iPage
;

8931  
N
-- > 0 && 
pCheck
->
mxEº
 ){

8932 
DbPage
 *
pOvÊPage
;

8933 *
pOvÊD©a
;

8934 if–
iPage
<1 ){

8935 
	`checkAµídMsg
(
pCheck
,

8937 
N
+1, 
ex≥˘ed
, 
iFú°
);

8940 if–
	`checkRef
(
pCheck
, 
iPage
) ) ;

8941 if–
	`sqlôe3PagîGë
(
pCheck
->
pPagî
, (
Pgno
)
iPage
, &
pOvÊPage
, 0) ){

8942 
	`checkAµídMsg
(
pCheck
, "ÁûedÅÿgëÖagê%d", 
iPage
);

8945 
pOvÊD©a
 = (*)
	`sqlôe3PagîGëD©a
(
pOvÊPage
);

8946 if–
isFªeLi°
 ){

8947 
n
 = 
	`gë4byã
(&
pOvÊD©a
[4]);

8948 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


8949 if–
pCheck
->
pBt
->
autoVacuum
 ){

8950 
	`checkPåm≠
(
pCheck
, 
iPage
, 
PTRMAP_FREEPAGE
, 0);

8953 if–
n
>()
pCheck
->
pBt
->
ußbÀSize
/4-2 ){

8954 
	`checkAµídMsg
(
pCheck
,

8955 "‰ìli°Üó‡cou¡Åoÿbig o¿∑gê%d", 
iPage
);

8956 
N
--;

8958 
i
=0; i<
n
; i++){

8959 
Pgno
 
iFªePage
 = 
	`gë4byã
(&
pOvÊD©a
[8+
i
*4]);

8960 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


8961 if–
pCheck
->
pBt
->
autoVacuum
 ){

8962 
	`checkPåm≠
(
pCheck
, 
iFªePage
, 
PTRMAP_FREEPAGE
, 0);

8965 
	`checkRef
(
pCheck
, 
iFªePage
);

8967 
N
 -
n
;

8970 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


8976 if–
pCheck
->
pBt
->
autoVacuum
 && 
N
>0 ){

8977 
i
 = 
	`gë4byã
(
pOvÊD©a
);

8978 
	`checkPåm≠
(
pCheck
, 
i
, 
PTRMAP_OVERFLOW2
, 
iPage
);

8982 
iPage
 = 
	`gë4byã
(
pOvÊD©a
);

8983 
	`sqlôe3PagîUƒef
(
pOvÊPage
);

8985 if–
isFªeLi°
 && 
N
<(
iPage
!=0) ){

8986 
	`checkAµídMsg
(
pCheck
, "free-page count in header isÅoo small");

8989 
	}
}

9014 
	$båìHópIn£π
(
u32
 *
aHóp
, u32 
x
){

9015 
u32
 
j
, 
i
 = ++
aHóp
[0];

9016 
aHóp
[
i
] = 
x
;

9017  (
j
 = 
i
/2)>0 && 
aHóp
[j]>aHeap[i] ){

9018 
x
 = 
aHóp
[
j
];

9019 
aHóp
[
j
] =áHóp[
i
];

9020 
aHóp
[
i
] = 
x
;

9021 
i
 = 
j
;

9023 
	}
}

9024 
	$båìHópPuŒ
(
u32
 *
aHóp
, u32 *
pOut
){

9025 
u32
 
j
, 
i
, 
x
;

9026 if–(
x
 = 
aHóp
[0])==0 )  0;

9027 *
pOut
 = 
aHóp
[1];

9028 
aHóp
[1] =áHóp[
x
];

9029 
aHóp
[
x
] = 0xffffffff;

9030 
aHóp
[0]--;

9031 
i
 = 1;

9032  (
j
 = 
i
*2)<=
aHóp
[0] ){

9033 if–
aHóp
[
j
]>aHeap[j+1] ) j++;

9034 if–
aHóp
[
i
]<aHóp[
j
] ) ;

9035 
x
 = 
aHóp
[
i
];

9036 
aHóp
[
i
] =áHóp[
j
];

9037 
aHóp
[
j
] = 
x
;

9038 
i
 = 
j
;

9041 
	}
}

9043 #i‚de‡
SQLITE_OMIT_INTEGRITY_CHECK


9058 
	$checkTªePage
(

9059 
I¡egrôyCk
 *
pCheck
,

9060 
iPage
,

9061 
i64
 *
piMöKey
,

9062 
i64
 
maxKey


9064 
MemPage
 *
pPage
 = 0;

9065 
i
;

9066 
rc
;

9067 
dïth
 = -1, 
d2
;

9068 
pgno
;

9069 
nFøg
;

9070 
hdr
;

9071 
˚ŒSèπ
;

9072 
nCñl
;

9073 
doCovîageCheck
 = 1;

9074 
keyC™BeEquÆ
 = 1;

9076 
u8
 *
d©a
;

9077 
u8
 *
pCñl
;

9078 
u8
 *
pCñlIdx
;

9079 
BtSh¨ed
 *
pBt
;

9080 
u32
 
pc
;

9081 
u32
 
ußbÀSize
;

9082 
u32
 
c⁄ã¡Off£t
;

9083 
u32
 *
hóp
 = 0;

9084 
u32
 
x
, 
¥ev
 = 0;

9085 c⁄° *
ßved_zPfx
 = 
pCheck
->
zPfx
;

9086 
ßved_v1
 = 
pCheck
->
v1
;

9087 
ßved_v2
 = 
pCheck
->
v2
;

9088 
u8
 
ßvedIsInô
 = 0;

9092 
pBt
 = 
pCheck
->pBt;

9093 
ußbÀSize
 = 
pBt
->usableSize;

9094 if–
iPage
==0 )  0;

9095 if–
	`checkRef
(
pCheck
, 
iPage
) )  0;

9096 
pCheck
->
zPfx
 = "Page %d: ";

9097 
pCheck
->
v1
 = 
iPage
;

9098 if–(
rc
 = 
	`båìGëPage
(
pBt
, (
Pgno
)
iPage
, &
pPage
, 0))!=0 ){

9099 
	`checkAµídMsg
(
pCheck
,

9100 "u«bÀÅÿgëÅhê∑ge.Éº‹ code=%d", 
rc
);

9101 
íd_of_check
;

9106 
ßvedIsInô
 = 
pPage
->
isInô
;

9107 
pPage
->
isInô
 = 0;

9108 if–(
rc
 = 
	`båìInôPage
(
pPage
))!=0 ){

9109 
	`as£π
–
rc
==
SQLITE_CORRUPT
 );

9110 
	`checkAµídMsg
(
pCheck
,

9111 "båìInôPage(Ëªtu∫†îr‹ codê%d", 
rc
);

9112 
íd_of_check
;

9114 
d©a
 = 
pPage
->
aD©a
;

9115 
hdr
 = 
pPage
->
hdrOff£t
;

9118 
pCheck
->
zPfx
 = "OnÅreeÖage %d cell %d: ";

9119 
c⁄ã¡Off£t
 = 
	`gë2byãNŸZîo
(&
d©a
[
hdr
+5]);

9120 
	`as£π
–
c⁄ã¡Off£t
<=
ußbÀSize
 );

9124 
nCñl
 = 
	`gë2byã
(&
d©a
[
hdr
+3]);

9125 
	`as£π
–
pPage
->
nCñl
==nCell );

9129 
˚ŒSèπ
 = 
hdr
 + 12 - 4*
pPage
->
Àaf
;

9130 
	`as£π
–
pPage
->
aCñlIdx
==&
d©a
[
˚ŒSèπ
] );

9131 
pCñlIdx
 = &
d©a
[
˚ŒSèπ
 + 2*(
nCñl
-1)];

9133 if–!
pPage
->
Àaf
 ){

9135 
pgno
 = 
	`gë4byã
(&
d©a
[
hdr
+8]);

9136 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


9137 if–
pBt
->
autoVacuum
 ){

9138 
pCheck
->
zPfx
 = "OnÖage %dátÑight child: ";

9139 
	`checkPåm≠
(
pCheck
, 
pgno
, 
PTRMAP_BTREE
, 
iPage
);

9142 
dïth
 = 
	`checkTªePage
(
pCheck
, 
pgno
, &
maxKey
, maxKey);

9143 
keyC™BeEquÆ
 = 0;

9147 
hóp
 = 
pCheck
->heap;

9148 
hóp
[0] = 0;

9153 
i
=
nCñl
-1; i>=0 && 
pCheck
->
mxEº
; i--){

9154 
CñlInfo
 
öfo
;

9157 
pCheck
->
v2
 = 
i
;

9158 
	`as£π
–
pCñlIdx
==&
d©a
[
˚ŒSèπ
 + 
i
*2] );

9159 
pc
 = 
	`gë2byãAlig√d
(
pCñlIdx
);

9160 
pCñlIdx
 -= 2;

9161 if–
pc
<
c⁄ã¡Off£t
 ||Öc>
ußbÀSize
-4 ){

9162 
	`checkAµídMsg
(
pCheck
, "Offset %d out ofÑange %d..%d",

9163 
pc
, 
c⁄ã¡Off£t
, 
ußbÀSize
-4);

9164 
doCovîageCheck
 = 0;

9167 
pCñl
 = &
d©a
[
pc
];

9168 
pPage
->
	`xP¨£Cñl
’Page, 
pCñl
, &
öfo
);

9169 if–
pc
+
öfo
.
nSize
>
ußbÀSize
 ){

9170 
	`checkAµídMsg
(
pCheck
, "Extends offÉnd ofÖage");

9171 
doCovîageCheck
 = 0;

9176 if–
pPage
->
ötKey
 ){

9177 if–
keyC™BeEquÆ
 ? (
öfo
.
nKey
 > 
maxKey
) : (info.nKey >= maxKey) ){

9178 
	`checkAµídMsg
(
pCheck
, "Rowid %Œd ouào‡‹dî", 
öfo
.
nKey
);

9180 
maxKey
 = 
öfo
.
nKey
;

9184 if–
öfo
.
nPaylﬂd
>öfo.
nLoˇl
 ){

9185 
nPage
;

9186 
Pgno
 
pgnoOvÊ
;

9187 
	`as£π
–
pc
 + 
öfo
.
nSize
 - 4 <
ußbÀSize
 );

9188 
nPage
 = (
öfo
.
nPaylﬂd
 - info.
nLoˇl
 + 
ußbÀSize
 - 5)/(usableSize - 4);

9189 
pgnoOvÊ
 = 
	`gë4byã
(&
pCñl
[
öfo
.
nSize
 - 4]);

9190 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


9191 if–
pBt
->
autoVacuum
 ){

9192 
	`checkPåm≠
(
pCheck
, 
pgnoOvÊ
, 
PTRMAP_OVERFLOW1
, 
iPage
);

9195 
	`checkLi°
(
pCheck
, 0, 
pgnoOvÊ
, 
nPage
);

9198 if–!
pPage
->
Àaf
 ){

9200 
pgno
 = 
	`gë4byã
(
pCñl
);

9201 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


9202 if–
pBt
->
autoVacuum
 ){

9203 
	`checkPåm≠
(
pCheck
, 
pgno
, 
PTRMAP_BTREE
, 
iPage
);

9206 
d2
 = 
	`checkTªePage
(
pCheck
, 
pgno
, &
maxKey
, maxKey);

9207 
keyC™BeEquÆ
 = 0;

9208 if–
d2
!=
dïth
 ){

9209 
	`checkAµídMsg
(
pCheck
, "ChildÖage depth differs");

9210 
dïth
 = 
d2
;

9214 
	`båìHópIn£π
(
hóp
, (
pc
<<16)|’c+
öfo
.
nSize
-1));

9217 *
piMöKey
 = 
maxKey
;

9221 
pCheck
->
zPfx
 = 0;

9222 if–
doCovîageCheck
 && 
pCheck
->
mxEº
>0 ){

9226 if–!
pPage
->
Àaf
 ){

9227 
hóp
 = 
pCheck
->heap;

9228 
hóp
[0] = 0;

9229 
i
=
nCñl
-1; i>=0; i--){

9230 
u32
 
size
;

9231 
pc
 = 
	`gë2byãAlig√d
(&
d©a
[
˚ŒSèπ
+
i
*2]);

9232 
size
 = 
pPage
->
	`xCñlSize
’Page, &
d©a
[
pc
]);

9233 
	`båìHópIn£π
(
hóp
, (
pc
<<16)|’c+
size
-1));

9242 
i
 = 
	`gë2byã
(&
d©a
[
hdr
+1]);

9243  
i
>0 ){

9244 
size
, 
j
;

9245 
	`as£π
–(
u32
)
i
<=
ußbÀSize
-4 );

9246 
size
 = 
	`gë2byã
(&
d©a
[
i
+2]);

9247 
	`as£π
–(
u32
)(
i
+
size
)<=
ußbÀSize
 );

9248 
	`båìHópIn£π
(
hóp
, (((
u32
)
i
)<<16)|(i+
size
-1));

9253 
j
 = 
	`gë2byã
(&
d©a
[
i
]);

9256 
	`as£π
–
j
==0 || j>
i
+
size
 );

9257 
	`as£π
–(
u32
)
j
<=
ußbÀSize
-4 );

9258 
i
 = 
j
;

9273 
nFøg
 = 0;

9274 
¥ev
 = 
c⁄ã¡Off£t
 - 1;

9275  
	`båìHópPuŒ
(
hóp
,&
x
) ){

9276 if–(
¥ev
&0xffff)>=(
x
>>16) ){

9277 
	`checkAµídMsg
(
pCheck
,

9278 "Mu…ùÀ u£†f‹ byã %u o‡∑gê%d", 
x
>>16, 
iPage
);

9281 
nFøg
 +(
x
>>16Ë- (
¥ev
&0xffff) - 1;

9282 
¥ev
 = 
x
;

9285 
nFøg
 +
ußbÀSize
 - (
¥ev
&0xffff) - 1;

9291 if–
hóp
[0]==0 && 
nFøg
!=
d©a
[
hdr
+7] ){

9292 
	`checkAµídMsg
(
pCheck
,

9294 
nFøg
, 
d©a
[
hdr
+7], 
iPage
);

9298 
íd_of_check
:

9299 if–!
doCovîageCheck
 ) 
pPage
->
isInô
 = 
ßvedIsInô
;

9300 
	`ªÀa£Page
(
pPage
);

9301 
pCheck
->
zPfx
 = 
ßved_zPfx
;

9302 
pCheck
->
v1
 = 
ßved_v1
;

9303 
pCheck
->
v2
 = 
ßved_v2
;

9304  
dïth
+1;

9305 
	}
}

9308 #i‚de‡
SQLITE_OMIT_INTEGRITY_CHECK


9322 *
	$sqlôe3BåìI¡egrôyCheck
(

9323 
Båì
 *
p
,

9324 *
aRoŸ
,

9325 
nRoŸ
,

9326 
mxEº
,

9327 *
≤Eº


9329 
Pgno
 
i
;

9330 
I¡egrôyCk
 
sCheck
;

9331 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

9332 
ßvedDbFœgs
 = 
pBt
->
db
->
Êags
;

9333 
zEº
[100];

9334 
	`VVA_ONLY
–
nRef
 );

9336 
	`sqlôe3BåìE¡î
(
p
);

9337 
	`as£π
–
p
->
öTøns
>
TRANS_NONE
 && 
pBt
->
öTønß˘i⁄
>TRANS_NONE );

9338 
	`VVA_ONLY
–
nRef
 = 
	`sqlôe3PagîRefcou¡
(
pBt
->
pPagî
) );

9339 
	`as£π
–
nRef
>=0 );

9340 
sCheck
.
pBt
 =ÖBt;

9341 
sCheck
.
pPagî
 = 
pBt
->pPager;

9342 
sCheck
.
nPage
 = 
	`båìPagecou¡
(sCheck.
pBt
);

9343 
sCheck
.
mxEº
 = mxErr;

9344 
sCheck
.
nEº
 = 0;

9345 
sCheck
.
mÆlocFaûed
 = 0;

9346 
sCheck
.
zPfx
 = 0;

9347 
sCheck
.
v1
 = 0;

9348 
sCheck
.
v2
 = 0;

9349 
sCheck
.
aPgRef
 = 0;

9350 
sCheck
.
hóp
 = 0;

9351 
	`sqlôe3SåAccumInô
(&
sCheck
.
îrMsg
, 0, 
zEº
, (zEº), 
SQLITE_MAX_LENGTH
);

9352 
sCheck
.
îrMsg
.
¥ötfFœgs
 = 
SQLITE_PRINTF_INTERNAL
;

9353 if–
sCheck
.
nPage
==0 ){

9354 
öãgrôy_ck_˛ónup
;

9357 
sCheck
.
aPgRef
 = 
	`sqlôe3MÆlocZîo
((sCheck.
nPage
 / 8)+ 1);

9358 if–!
sCheck
.
aPgRef
 ){

9359 
sCheck
.
mÆlocFaûed
 = 1;

9360 
öãgrôy_ck_˛ónup
;

9362 
sCheck
.
hóp
 = (
u32
*)
	`sqlôe3PageMÆloc
–
pBt
->
∑geSize
 );

9363 if–
sCheck
.
hóp
==0 ){

9364 
sCheck
.
mÆlocFaûed
 = 1;

9365 
öãgrôy_ck_˛ónup
;

9368 
i
 = 
	`PENDING_BYTE_PAGE
(
pBt
);

9369 if–
i
<=
sCheck
.
nPage
 ) 
	`£tPageRe„ªn˚d
(&sCheck, i);

9373 
sCheck
.
zPfx
 = "Main freelist: ";

9374 
	`checkLi°
(&
sCheck
, 1, 
	`gë4byã
(&
pBt
->
pPage1
->
aD©a
[32]),

9375 
	`gë4byã
(&
pBt
->
pPage1
->
aD©a
[36]));

9376 
sCheck
.
zPfx
 = 0;

9380 
	`ã°ˇ£
–
pBt
->
db
->
Êags
 & 
SQLITE_CñlSizeCk
 );

9381 
pBt
->
db
->
Êags
 &~
SQLITE_CñlSizeCk
;

9382 
i
=0; ()i<
nRoŸ
 && 
sCheck
.
mxEº
; i++){

9383 
i64
 
nŸU£d
;

9384 if–
aRoŸ
[
i
]==0 ) ;

9385 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


9386 if–
pBt
->
autoVacuum
 && 
aRoŸ
[
i
]>1 ){

9387 
	`checkPåm≠
(&
sCheck
, 
aRoŸ
[
i
], 
PTRMAP_ROOTPAGE
, 0);

9390 
	`checkTªePage
(&
sCheck
, 
aRoŸ
[
i
], &
nŸU£d
, 
LARGEST_INT64
);

9392 
pBt
->
db
->
Êags
 = 
ßvedDbFœgs
;

9396 
i
=1; i<=
sCheck
.
nPage
 && sCheck.
mxEº
; i++){

9397 #ifde‡
SQLITE_OMIT_AUTOVACUUM


9398 if–
	`gëPageRe„ªn˚d
(&
sCheck
, 
i
)==0 ){

9399 
	`checkAµídMsg
(&
sCheck
, "Pagê%d i†√vî u£d", 
i
);

9405 if–
	`gëPageRe„ªn˚d
(&
sCheck
, 
i
)==0 &&

9406 (
	`PTRMAP_PAGENO
(
pBt
, 
i
)!=ò|| !pBt->
autoVacuum
) ){

9407 
	`checkAµídMsg
(&
sCheck
, "Pagê%d i†√vî u£d", 
i
);

9409 if–
	`gëPageRe„ªn˚d
(&
sCheck
, 
i
)!=0 &&

9410 (
	`PTRMAP_PAGENO
(
pBt
, 
i
)==ò&&ÖBt->
autoVacuum
) ){

9411 
	`checkAµídMsg
(&
sCheck
, "Poöã∏m≠Öagê%d i†ª„ªn˚d", 
i
);

9418 
öãgrôy_ck_˛ónup
:

9419 
	`sqlôe3PageFªe
(
sCheck
.
hóp
);

9420 
	`sqlôe3_‰ì
(
sCheck
.
aPgRef
);

9421 if–
sCheck
.
mÆlocFaûed
 ){

9422 
	`sqlôe3SåAccumRe£t
(&
sCheck
.
îrMsg
);

9423 
sCheck
.
nEº
++;

9425 *
≤Eº
 = 
sCheck
.
nEº
;

9426 if–
sCheck
.
nEº
==0 ) 
	`sqlôe3SåAccumRe£t
(&sCheck.
îrMsg
);

9428 
	`as£π
–
nRef
==
	`sqlôe3PagîRefcou¡
(
pBt
->
pPagî
) );

9429 
	`sqlôe3BåìLóve
(
p
);

9430  
	`sqlôe3SåAccumFöish
(&
sCheck
.
îrMsg
);

9431 
	}
}

9441 c⁄° *
	$sqlôe3BåìGëFûíame
(
Båì
 *
p
){

9442 
	`as£π
–
p
->
pBt
->
pPagî
!=0 );

9443  
	`sqlôe3PagîFûíame
(
p
->
pBt
->
pPagî
, 1);

9444 
	}
}

9454 c⁄° *
	$sqlôe3BåìGëJou∫Æ«me
(
Båì
 *
p
){

9455 
	`as£π
–
p
->
pBt
->
pPagî
!=0 );

9456  
	`sqlôe3PagîJou∫Æ«me
(
p
->
pBt
->
pPagî
);

9457 
	}
}

9462 
	$sqlôe3BåìIsInTøns
(
Båì
 *
p
){

9463 
	`as£π
–
p
==0 || 
	`sqlôe3_muãx_hñd
’->
db
->
muãx
) );

9464  (
p
 && (p->
öTøns
==
TRANS_WRITE
));

9465 
	}
}

9467 #i‚de‡
SQLITE_OMIT_WAL


9476 
	$sqlôe3BåìCheckpoöt
(
Båì
 *
p
, 
eMode
, *
≤Log
, *
≤Ck±
){

9477 
rc
 = 
SQLITE_OK
;

9478 if–
p
 ){

9479 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

9480 
	`sqlôe3BåìE¡î
(
p
);

9481 if–
pBt
->
öTønß˘i⁄
!=
TRANS_NONE
 ){

9482 
rc
 = 
SQLITE_LOCKED
;

9484 
rc
 = 
	`sqlôe3PagîCheckpoöt
(
pBt
->
pPagî
, 
eMode
, 
≤Log
, 
≤Ck±
);

9486 
	`sqlôe3BåìLóve
(
p
);

9488  
rc
;

9489 
	}
}

9495 
	$sqlôe3BåìIsInRódTøns
(
Båì
 *
p
){

9496 
	`as£π
–
p
 );

9497 
	`as£π
–
	`sqlôe3_muãx_hñd
(
p
->
db
->
muãx
) );

9498  
p
->
öTøns
!=
TRANS_NONE
;

9499 
	}
}

9501 
	$sqlôe3BåìIsInBackup
(
Båì
 *
p
){

9502 
	`as£π
–
p
 );

9503 
	`as£π
–
	`sqlôe3_muãx_hñd
(
p
->
db
->
muãx
) );

9504  
p
->
nBackup
!=0;

9505 
	}
}

9527 *
sqlôe3BåìSchema
(
Båì
 *
p
, 
nByãs
, (*
xFªe
)(*)){

9528 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

9529 
	`sqlôe3BåìE¡î
(
p
);

9530 if–!
pBt
->
pSchema
 && 
nByãs
 ){

9531 
pBt
->
pSchema
 = 
	`sqlôe3DbMÆlocZîo
(0, 
nByãs
);

9532 
pBt
->
xFªeSchema
 = 
xFªe
;

9534 
	`sqlôe3BåìLóve
(
p
);

9535  
pBt
->
pSchema
;

9536 
	}
}

9543 
	$sqlôe3BåìSchemaLocked
(
Båì
 *
p
){

9544 
rc
;

9545 
	`as£π
–
	`sqlôe3_muãx_hñd
(
p
->
db
->
muãx
) );

9546 
	`sqlôe3BåìE¡î
(
p
);

9547 
rc
 = 
	`quîySh¨edCacheTabÀLock
(
p
, 
MASTER_ROOT
, 
READ_LOCK
);

9548 
	`as£π
–
rc
==
SQLITE_OK
 ||Ñc==
SQLITE_LOCKED_SHAREDCACHE
 );

9549 
	`sqlôe3BåìLóve
(
p
);

9550  
rc
;

9551 
	}
}

9554 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


9560 
	$sqlôe3BåìLockTabÀ
(
Båì
 *
p
, 
iTab
, 
u8
 
isWrôeLock
){

9561 
rc
 = 
SQLITE_OK
;

9562 
	`as£π
–
p
->
öTøns
!=
TRANS_NONE
 );

9563 if–
p
->
sh¨abÀ
 ){

9564 
u8
 
lockTy≥
 = 
READ_LOCK
 + 
isWrôeLock
;

9565 
	`as£π
–
READ_LOCK
+1==
WRITE_LOCK
 );

9566 
	`as£π
–
isWrôeLock
==0 || isWriteLock==1 );

9568 
	`sqlôe3BåìE¡î
(
p
);

9569 
rc
 = 
	`quîySh¨edCacheTabÀLock
(
p
, 
iTab
, 
lockTy≥
);

9570 if–
rc
==
SQLITE_OK
 ){

9571 
rc
 = 
	`£tSh¨edCacheTabÀLock
(
p
, 
iTab
, 
lockTy≥
);

9573 
	`sqlôe3BåìLóve
(
p
);

9575  
rc
;

9576 
	}
}

9579 #i‚de‡
SQLITE_OMIT_INCRBLOB


9590 
	$sqlôe3BåìPutD©a
(
BtCurs‹
 *
pC§
, 
u32
 
off£t
, u32 
amt
, *
z
){

9591 
rc
;

9592 
	`as£π
–
	`curs‹OwnsBtSh¨ed
(
pC§
) );

9593 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pC§
->
pBåì
->
db
->
muãx
) );

9594 
	`as£π
–
pC§
->
curFœgs
 & 
BTCF_In¸blob
 );

9596 
rc
 = 
	`ª°‹eCurs‹Posôi⁄
(
pC§
);

9597 if–
rc
!=
SQLITE_OK
 ){

9598  
rc
;

9600 
	`as£π
–
pC§
->
eSèã
!=
CURSOR_REQUIRESEEK
 );

9601 if–
pC§
->
eSèã
!=
CURSOR_VALID
 ){

9602  
SQLITE_ABORT
;

9613 
	`VVA_ONLY
(
rc
 =Ë
	`ßveAŒCurs‹s
(
pC§
->
pBt
,ÖC§->
pgnoRoŸ
,ÖCsr);

9614 
	`as£π
–
rc
==
SQLITE_OK
 );

9623 if–(
pC§
->
curFœgs
 & 
BTCF_WrôeFœg
)==0 ){

9624  
SQLITE_READONLY
;

9626 
	`as£π
–(
pC§
->
pBt
->
btsFœgs
 & 
BTS_READ_ONLY
)==0

9627 && 
pC§
->
pBt
->
öTønß˘i⁄
==
TRANS_WRITE
 );

9628 
	`as£π
–
	`hasSh¨edCacheTabÀLock
(
pC§
->
pBåì
,ÖC§->
pgnoRoŸ
, 0, 2) );

9629 
	`as£π
–!
	`hasRódC⁄Êi˘s
(
pC§
->
pBåì
,ÖC§->
pgnoRoŸ
) );

9630 
	`as£π
–
pC§
->
≠Page
[pC§->
iPage
]->
ötKey
 );

9632  
	`ac˚ssPaylﬂd
(
pC§
, 
off£t
, 
amt
, (*)
z
, 1);

9633 
	}
}

9638 
	$sqlôe3BåìIn¸blobCurs‹
(
BtCurs‹
 *
pCur
){

9639 
pCur
->
curFœgs
 |
BTCF_In¸blob
;

9640 
pCur
->
pBåì
->
hasIn¸blobCur
 = 1;

9641 
	}
}

9649 
	$sqlôe3BåìSëVîsi⁄
(
Båì
 *
pBåì
, 
iVîsi⁄
){

9650 
BtSh¨ed
 *
pBt
 = 
pBåì
->pBt;

9651 
rc
;

9653 
	`as£π
–
iVîsi⁄
==1 || iVersion==2 );

9658 
pBt
->
btsFœgs
 &~
BTS_NO_WAL
;

9659 if–
iVîsi⁄
==1 ) 
pBt
->
btsFœgs
 |
BTS_NO_WAL
;

9661 
rc
 = 
	`sqlôe3BåìBegöTøns
(
pBåì
, 0);

9662 if–
rc
==
SQLITE_OK
 ){

9663 
u8
 *
aD©a
 = 
pBt
->
pPage1
->aData;

9664 if–
aD©a
[18]!=(
u8
)
iVîsi⁄
 ||áData[19]!=(u8)iVersion ){

9665 
rc
 = 
	`sqlôe3BåìBegöTøns
(
pBåì
, 2);

9666 if–
rc
==
SQLITE_OK
 ){

9667 
rc
 = 
	`sqlôe3PagîWrôe
(
pBt
->
pPage1
->
pDbPage
);

9668 if–
rc
==
SQLITE_OK
 ){

9669 
aD©a
[18] = (
u8
)
iVîsi⁄
;

9670 
aD©a
[19] = (
u8
)
iVîsi⁄
;

9676 
pBt
->
btsFœgs
 &~
BTS_NO_WAL
;

9677  
rc
;

9678 
	}
}

9684 
	$sqlôe3BåìCurs‹HasHöt
(
BtCurs‹
 *
pC§
, 
mask
){

9685  (
pC§
->
höts
 & 
mask
)!=0;

9686 
	}
}

9691 
	$sqlôe3BåìIsRód⁄ly
(
Båì
 *
p
){

9692  (
p
->
pBt
->
btsFœgs
 & 
BTS_READ_ONLY
)!=0;

9693 
	}
}

9698 
	$sqlôe3HódîSizeBåì
(){  
	`ROUND8
((
MemPage
)); 
	}
}

9700 #i‡!
deföed
(
SQLITE_OMIT_SHARED_CACHE
)

9704 
	$sqlôe3BåìSh¨abÀ
(
Båì
 *
p
){

9705  
p
->
sh¨abÀ
;

9706 
	}
}

	@btree.h

16 #i‚de‡
_BTREE_H_


17 
	#_BTREE_H_


	)

22 
	#SQLITE_N_BTREE_META
 16

	)

28 #i‚de‡
SQLITE_DEFAULT_AUTOVACUUM


29 
	#SQLITE_DEFAULT_AUTOVACUUM
 0

	)

32 
	#BTREE_AUTOVACUUM_NONE
 0

	)

33 
	#BTREE_AUTOVACUUM_FULL
 1

	)

34 
	#BTREE_AUTOVACUUM_INCR
 2

	)

39 
Båì
 
	tBåì
;

40 
BtCurs‹
 
	tBtCurs‹
;

41 
BtSh¨ed
 
	tBtSh¨ed
;

44 
sqlôe3BåìO≥n
(

45 
sqlôe3_vfs
 *
pVfs
,

46 c⁄° *
zFûíame
,

47 
sqlôe3
 *
db
,

48 
Båì
 **
µBåì
,

49 
Êags
,

50 
vfsFœgs


59 
	#BTREE_OMIT_JOURNAL
 1

	)

60 
	#BTREE_MEMORY
 2

	)

61 
	#BTREE_SINGLE
 4

	)

62 
	#BTREE_UNORDERED
 8

	)

64 
sqlôe3BåìClo£
(
Båì
*);

65 
sqlôe3BåìSëCacheSize
(
Båì
*,);

66 
sqlôe3BåìSëSpûlSize
(
Båì
*,);

67 #i‡
SQLITE_MAX_MMAP_SIZE
>0

68 
sqlôe3BåìSëMm≠Limô
(
Båì
*,
sqlôe3_öt64
);

70 
sqlôe3BåìSëPagîFœgs
(
Båì
*,);

71 
sqlôe3BåìSëPageSize
(
Båì
 *
p
, 
nPagesize
, 
nRe£rve
, 
eFix
);

72 
sqlôe3BåìGëPageSize
(
Båì
*);

73 
sqlôe3BåìMaxPageCou¡
(
Båì
*,);

74 
u32
 
sqlôe3BåìLa°Page
(
Båì
*);

75 
sqlôe3BåìSecuªDñëe
(
Båì
*,);

76 
sqlôe3BåìGëO±imÆRe£rve
(
Båì
*);

77 
sqlôe3BåìGëRe£rveNoMuãx
(
Båì
 *
p
);

78 
sqlôe3BåìSëAutoVacuum
(
Båì
 *, );

79 
sqlôe3BåìGëAutoVacuum
(
Båì
 *);

80 
sqlôe3BåìBegöTøns
(
Båì
*,);

81 
sqlôe3BåìCommôPha£O√
(
Båì
*, c⁄° *
zMa°î
);

82 
sqlôe3BåìCommôPha£Two
(
Båì
*, );

83 
sqlôe3BåìCommô
(
Båì
*);

84 
sqlôe3BåìRﬁlback
(
Båì
*,,);

85 
sqlôe3BåìBegöStmt
(
Båì
*,);

86 
sqlôe3BåìCª©eTabÀ
(
Båì
*, *, 
Êags
);

87 
sqlôe3BåìIsInTøns
(
Båì
*);

88 
sqlôe3BåìIsInRódTøns
(
Båì
*);

89 
sqlôe3BåìIsInBackup
(
Båì
*);

90 *
sqlôe3BåìSchema
(
Båì
 *, , (*)(*));

91 
	`sqlôe3BåìSchemaLocked
(
Båì
 *
pBåì
);

92 
	`sqlôe3BåìLockTabÀ
(
Båì
 *
pBåì
, 
iTab
, 
u8
 
isWrôeLock
);

93 
	`sqlôe3BåìSavïoöt
(
Båì
 *, , );

95 c⁄° *
	`sqlôe3BåìGëFûíame
(
Båì
 *);

96 c⁄° *
	`sqlôe3BåìGëJou∫Æ«me
(
Båì
 *);

97 
	`sqlôe3BåìC›yFûe
(
Båì
 *, Btree *);

99 
	`sqlôe3BåìIn¸Vacuum
(
Båì
 *);

111 
	#BTREE_INTKEY
 1

	)

112 
	#BTREE_BLOBKEY
 2

	)

114 
	`sqlôe3BåìDr›TabÀ
(
Båì
*, , *);

115 
	`sqlôe3BåìCÀ¨TabÀ
(
Båì
*, , *);

116 
	`sqlôe3BåìCÀ¨TabÀOfCurs‹
(
BtCurs‹
*);

117 
	`sqlôe3BåìTrùAŒCurs‹s
(
Båì
*, , );

119 
	`sqlôe3BåìGëMëa
(
Båì
 *
pBåì
, 
idx
, 
u32
 *
pVÆue
);

120 
	`sqlôe3BåìUpd©eMëa
(
Båì
*, 
idx
, 
u32
 
vÆue
);

122 
	`sqlôe3BåìNewDb
(
Båì
 *
p
);

141 
	#BTREE_FREE_PAGE_COUNT
 0

	)

142 
	#BTREE_SCHEMA_VERSION
 1

	)

143 
	#BTREE_FILE_FORMAT
 2

	)

144 
	#BTREE_DEFAULT_CACHE_SIZE
 3

	)

145 
	#BTREE_LARGEST_ROOT_PAGE
 4

	)

146 
	#BTREE_TEXT_ENCODING
 5

	)

147 
	#BTREE_USER_VERSION
 6

	)

148 
	#BTREE_INCR_VACUUM
 7

	)

149 
	#BTREE_APPLICATION_ID
 8

	)

150 
	#BTREE_DATA_VERSION
 15

	)

179 
	#BTREE_HINT_RANGE
 0

	)

194 
	#BTREE_BULKLOAD
 0x00000001

	)

195 
	#BTREE_SEEK_EQ
 0x00000002

	)

220 
	#BTREE_WRCSR
 0x00000004

	)

221 
	#BTREE_FORDELETE
 0x00000008

	)

223 
	`sqlôe3BåìCurs‹
(

224 
Båì
*,

225 
iTabÀ
,

226 
wrFœg
,

227 
KeyInfo
*,

228 
BtCurs‹
 *
pCurs‹


230 
	`sqlôe3BåìCurs‹Size
();

231 
	`sqlôe3BåìCurs‹Zîo
(
BtCurs‹
*);

232 
	`sqlôe3BåìCurs‹HötFœgs
(
BtCurs‹
*, );

233 #ifde‡
SQLITE_ENABLE_CURSOR_HINTS


234 
	`sqlôe3BåìCurs‹Höt
(
BtCurs‹
*, , ...);

237 
	`sqlôe3BåìClo£Curs‹
(
BtCurs‹
*);

238 
	`sqlôe3BåìMovëoU≈acked
(

239 
BtCurs‹
*,

240 
U≈ackedRec‹d
 *
pUnKey
,

241 
i64
 
ötKey
,

242 
büs
,

243 *
pRes


245 
	`sqlôe3BåìCurs‹HasMoved
(
BtCurs‹
*);

246 
	`sqlôe3BåìCurs‹Re°‹e
(
BtCurs‹
*, *);

247 
	`sqlôe3BåìDñëe
(
BtCurs‹
*, 
u8
 
Êags
);

250 
	#BTREE_SAVEPOSITION
 0x02

	)

251 
	#BTREE_AUXDELETE
 0x04

	)

253 
	`sqlôe3BåìIn£π
(
BtCurs‹
*, c⁄° *
pKey
, 
i64
 
nKey
,

254 c⁄° *
pD©a
, 
nD©a
,

255 
nZîo
, 
büs
, 
£ekResu…
);

256 
	`sqlôe3BåìFú°
(
BtCurs‹
*, *
pRes
);

257 
	`sqlôe3BåìLa°
(
BtCurs‹
*, *
pRes
);

258 
	`sqlôe3BåìNext
(
BtCurs‹
*, *
pRes
);

259 
	`sqlôe3BåìEof
(
BtCurs‹
*);

260 
	`sqlôe3BåìPªvious
(
BtCurs‹
*, *
pRes
);

261 
	`sqlôe3BåìKeySize
(
BtCurs‹
*, 
i64
 *
pSize
);

262 
	`sqlôe3BåìKey
(
BtCurs‹
*, 
u32
 
off£t
, u32 
amt
, *);

263 c⁄° *
	`sqlôe3BåìKeyFëch
(
BtCurs‹
*, 
u32
 *
pAmt
);

264 c⁄° *
	`sqlôe3BåìD©aFëch
(
BtCurs‹
*, 
u32
 *
pAmt
);

265 
	`sqlôe3BåìD©aSize
(
BtCurs‹
*, 
u32
 *
pSize
);

266 
	`sqlôe3BåìD©a
(
BtCurs‹
*, 
u32
 
off£t
, u32 
amt
, *);

268 *
	`sqlôe3BåìI¡egrôyCheck
(
Båì
*, *
aRoŸ
, 
nRoŸ
, , *);

269 
Pagî
 *
	`sqlôe3BåìPagî
(
Båì
*);

271 
	`sqlôe3BåìPutD©a
(
BtCurs‹
*, 
u32
 
off£t
, u32 
amt
, *);

272 
	`sqlôe3BåìIn¸blobCurs‹
(
BtCurs‹
 *);

273 
	`sqlôe3BåìCÀ¨Curs‹
(
BtCurs‹
 *);

274 
	`sqlôe3BåìSëVîsi⁄
(
Båì
 *
pBt
, 
iVîsi⁄
);

275 
	`sqlôe3BåìCurs‹HasHöt
(
BtCurs‹
*, 
mask
);

276 
	`sqlôe3BåìIsRód⁄ly
(
Båì
 *
pBt
);

277 
	`sqlôe3HódîSizeBåì
();

279 #i‚de‡
NDEBUG


280 
	`sqlôe3BåìCurs‹IsVÆid
(
BtCurs‹
*);

283 #i‚de‡
SQLITE_OMIT_BTREECOUNT


284 
	`sqlôe3BåìCou¡
(
BtCurs‹
 *, 
i64
 *);

287 #ifde‡
SQLITE_TEST


288 
	`sqlôe3BåìCurs‹Info
(
BtCurs‹
*, *, );

289 
	`sqlôe3BåìCurs‹Li°
(
Båì
*);

292 #i‚de‡
SQLITE_OMIT_WAL


293 
	`sqlôe3BåìCheckpoöt
(
Båì
*, , *, *);

301 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


302 
	`sqlôe3BåìE¡î
(
Båì
*);

303 
	`sqlôe3BåìE¡îAŒ
(
sqlôe3
*);

304 
	`sqlôe3BåìSh¨abÀ
(
Båì
*);

305 
	`sqlôe3BåìE¡îCurs‹
(
BtCurs‹
*);

307 
	#sqlôe3BåìE¡î
(
X
)

	)

308 
	#sqlôe3BåìE¡îAŒ
(
X
)

	)

309 
	#sqlôe3BåìSh¨abÀ
(
X
Ë0

	)

310 
	#sqlôe3BåìE¡îCurs‹
(
X
)

	)

313 #i‡!
	`deföed
(
SQLITE_OMIT_SHARED_CACHE
Ë&& 
SQLITE_THREADSAFE


314 
	`sqlôe3BåìLóve
(
Båì
*);

315 
	`sqlôe3BåìLóveCurs‹
(
BtCurs‹
*);

316 
	`sqlôe3BåìLóveAŒ
(
sqlôe3
*);

317 #i‚de‡
NDEBUG


319 
	`sqlôe3BåìHﬁdsMuãx
(
Båì
*);

320 
	`sqlôe3BåìHﬁdsAŒMuãxes
(
sqlôe3
*);

321 
	`sqlôe3SchemaMuãxHñd
(
sqlôe3
*,,
Schema
*);

325 
	#sqlôe3BåìLóve
(
X
)

	)

326 
	#sqlôe3BåìLóveCurs‹
(
X
)

	)

327 
	#sqlôe3BåìLóveAŒ
(
X
)

	)

329 
	#sqlôe3BåìHﬁdsMuãx
(
X
Ë1

	)

330 
	#sqlôe3BåìHﬁdsAŒMuãxes
(
X
Ë1

	)

331 
	#sqlôe3SchemaMuãxHñd
(
X
,
Y
,
Z
Ë1

	)

	@btreeInt.h

216 
	~"sqlôeI¡.h
"

222 
	#MX_CELL_SIZE
(
pBt
Ë(()’Bt->
∑geSize
-8))

	)

229 
	#MX_CELL
(
pBt
Ë(’Bt->
∑geSize
-8)/6)

	)

232 
MemPage
 
	tMemPage
;

233 
BtLock
 
	tBtLock
;

234 
CñlInfo
 
	tCñlInfo
;

248 #i‚de‡
SQLITE_FILE_HEADER


249 
	#SQLITE_FILE_HEADER
 "SQLôêf‹m© 3"

	)

256 
	#PTF_INTKEY
 0x01

	)

257 
	#PTF_ZERODATA
 0x02

	)

258 
	#PTF_LEAFDATA
 0x04

	)

259 
	#PTF_LEAF
 0x08

	)

274 
	sMemPage
 {

275 
u8
 
	misInô
;

276 
u8
 
	mnOvîÊow
;

277 
u8
 
	mötKey
;

278 
u8
 
	mötKeyLóf
;

279 
u8
 
	mÀaf
;

280 
u8
 
	mhdrOff£t
;

281 
u8
 
	mchûdPåSize
;

282 
u8
 
	mmax1byãPaylﬂd
;

283 
u8
 
	mbBusy
;

284 
u16
 
	mmaxLoˇl
;

285 
u16
 
	mmöLoˇl
;

286 
u16
 
	m˚ŒOff£t
;

287 
u16
 
	mnFªe
;

288 
u16
 
	mnCñl
;

289 
u16
 
	mmaskPage
;

290 
u16
 
	maiOvÊ
[5];

292 
u8
 *
	m≠OvÊ
[5];

293 
BtSh¨ed
 *
	mpBt
;

294 
u8
 *
	maD©a
;

295 
u8
 *
	maD©aEnd
;

296 
u8
 *
	maCñlIdx
;

297 
u8
 *
	maD©aOf°
;

298 
DbPage
 *
	mpDbPage
;

299 
u16
 (*
xCñlSize
)(
	mMemPage
*,
	mu8
*);

300 (*
	mxP¨£Cñl
)(
	mMemPage
*,
	mu8
*,
	mCñlInfo
*);

301 
Pgno
 
	mpgno
;

309 
	#EXTRA_SIZE
 (
MemPage
)

	)

318 
	sBtLock
 {

319 
Båì
 *
	mpBåì
;

320 
Pgno
 
	miTabÀ
;

321 
u8
 
	meLock
;

322 
BtLock
 *
	mpNext
;

326 
	#READ_LOCK
 1

	)

327 
	#WRITE_LOCK
 2

	)

350 
	sBåì
 {

351 
sqlôe3
 *
	mdb
;

352 
BtSh¨ed
 *
	mpBt
;

353 
u8
 
	möTøns
;

354 
u8
 
	msh¨abÀ
;

355 
u8
 
	mlocked
;

356 
u8
 
	mhasIn¸blobCur
;

357 
	mw™tToLock
;

358 
	mnBackup
;

359 
u32
 
	miD©aVîsi⁄
;

360 
Båì
 *
	mpNext
;

361 
Båì
 *
	mpPªv
;

362 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


363 
BtLock
 
	mlock
;

374 
	#TRANS_NONE
 0

	)

375 
	#TRANS_READ
 1

	)

376 
	#TRANS_WRITE
 2

	)

413 
	sBtSh¨ed
 {

414 
Pagî
 *
	mpPagî
;

415 
sqlôe3
 *
	mdb
;

416 
BtCurs‹
 *
	mpCurs‹
;

417 
MemPage
 *
	mpPage1
;

418 
u8
 
	m›íFœgs
;

419 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


420 
u8
 
	mautoVacuum
;

421 
u8
 
	mö¸Vacuum
;

422 
u8
 
	mbDoTrunˇã
;

424 
u8
 
	möTønß˘i⁄
;

425 
u8
 
	mmax1byãPaylﬂd
;

426 #ifde‡
SQLITE_HAS_CODEC


427 
u8
 
	m›timÆRe£rve
;

429 
u16
 
	mbtsFœgs
;

430 
u16
 
	mmaxLoˇl
;

431 
u16
 
	mmöLoˇl
;

432 
u16
 
	mmaxLóf
;

433 
u16
 
	mmöLóf
;

434 
u32
 
	m∑geSize
;

435 
u32
 
	mußbÀSize
;

436 
	mnTønß˘i⁄
;

437 
u32
 
	mnPage
;

438 *
	mpSchema
;

439 (*
	mxFªeSchema
)(*);

440 
sqlôe3_muãx
 *
	mmuãx
;

441 
Bôvec
 *
	mpHasC⁄ã¡
;

442 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


443 
	mnRef
;

444 
BtSh¨ed
 *
	mpNext
;

445 
BtLock
 *
	mpLock
;

446 
Båì
 *
	mpWrôî
;

448 
u8
 *
	mpTmpS∑˚
;

454 
	#BTS_READ_ONLY
 0x0001

	)

455 
	#BTS_PAGESIZE_FIXED
 0x0002

	)

456 
	#BTS_SECURE_DELETE
 0x0004

	)

457 
	#BTS_INITIALLY_EMPTY
 0x0008

	)

458 
	#BTS_NO_WAL
 0x0010

	)

459 
	#BTS_EXCLUSIVE
 0x0020

	)

460 
	#BTS_PENDING
 0x0040

	)

467 
	sCñlInfo
 {

468 
i64
 
	mnKey
;

469 
u8
 *
	mpPaylﬂd
;

470 
u32
 
	mnPaylﬂd
;

471 
u16
 
	mnLoˇl
;

472 
u16
 
	mnSize
;

484 
	#BTCURSOR_MAX_DEPTH
 20

	)

505 
	sBtCurs‹
 {

506 
Båì
 *
	mpBåì
;

507 
BtSh¨ed
 *
	mpBt
;

508 
BtCurs‹
 *
	mpNext
;

509 
Pgno
 *
	maOvîÊow
;

510 
CñlInfo
 
	möfo
;

511 
i64
 
	mnKey
;

512 *
	mpKey
;

513 
Pgno
 
	mpgnoRoŸ
;

514 
	mnOvÊAŒoc
;

515 
	mskùNext
;

517 
u8
 
	mcurFœgs
;

518 
u8
 
	mcurPagîFœgs
;

519 
u8
 
	meSèã
;

520 
u8
 
	mhöts
;

524 
i8
 
	miPage
;

525 
u8
 
	mcurI¡Key
;

526 
KeyInfo
 *
	mpKeyInfo
;

527 *
	m∑ddög1
;

528 
u16
 
	maiIdx
[
BTCURSOR_MAX_DEPTH
];

529 
MemPage
 *
	m≠Page
[
BTCURSOR_MAX_DEPTH
];

535 
	#BTCF_WrôeFœg
 0x01

	)

536 
	#BTCF_VÆidNKey
 0x02

	)

537 
	#BTCF_VÆidOvÊ
 0x04

	)

538 
	#BTCF_AtLa°
 0x08

	)

539 
	#BTCF_In¸blob
 0x10

	)

540 
	#BTCF_Mu…ùÀ
 0x20

	)

572 
	#CURSOR_INVALID
 0

	)

573 
	#CURSOR_VALID
 1

	)

574 
	#CURSOR_SKIPNEXT
 2

	)

575 
	#CURSOR_REQUIRESEEK
 3

	)

576 
	#CURSOR_FAULT
 4

	)

581 
	#PENDING_BYTE_PAGE
(
pBt
Ë
	`PAGER_MJ_PGNO
’Bt)

	)

598 
	#PTRMAP_PAGENO
(
pBt
, 
pgno
Ë
	`±rm≠Pagío
’Bt,Ögno)

	)

599 
	#PTRMAP_PTROFFSET
(
pg±rm≠
, 
pgno
Ë(5*’gno-pg±rm≠-1))

	)

600 
	#PTRMAP_ISPAGE
(
pBt
, 
pgno
Ë(
	`PTRMAP_PAGENO
(’Bt),’gno))==’gno))

	)

633 
	#PTRMAP_ROOTPAGE
 1

	)

634 
	#PTRMAP_FREEPAGE
 2

	)

635 
	#PTRMAP_OVERFLOW1
 3

	)

636 
	#PTRMAP_OVERFLOW2
 4

	)

637 
	#PTRMAP_BTREE
 5

	)

642 
	#båìI¡egrôy
(
p
) \

643 
	`as£π
–
p
->
pBt
->
öTønß˘i⁄
!=
TRANS_NONE
 ||Ö->pBt->
nTønß˘i⁄
==0 ); \

644 
	`as£π
–
p
->
pBt
->
öTønß˘i⁄
>ı->
öTøns
 );

	)

654 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


655 
	#ISAUTOVACUUM
 (
pBt
->
autoVacuum
)

	)

657 
	#ISAUTOVACUUM
 0

	)

671 
I¡egrôyCk
 
	tI¡egrôyCk
;

672 
	sI¡egrôyCk
 {

673 
BtSh¨ed
 *
	mpBt
;

674 
Pagî
 *
	mpPagî
;

675 
u8
 *
	maPgRef
;

676 
Pgno
 
	mnPage
;

677 
	mmxEº
;

678 
	mnEº
;

679 
	mmÆlocFaûed
;

680 c⁄° *
	mzPfx
;

681 
	mv1
, 
	mv2
;

682 
SåAccum
 
	mîrMsg
;

683 
u32
 *
	mhóp
;

689 
	#gë2byã
(
x
Ë((x)[0]<<8 | (x)[1])

	)

690 
	#put2byã
(
p
,
v
Ë(’)[0] = (
u8
)((v)>>8), (p)[1] = (u8)(v))

	)

691 
	#gë4byã
 
sqlôe3Gë4byã


	)

692 
	#put4byã
 
sqlôe3Put4byã


	)

699 #i‡
SQLITE_BYTEORDER
==4321

700 
	#gë2byãAlig√d
(
x
Ë(*(
u16
*)(x))

	)

701 #ñi‡
SQLITE_BYTEORDER
==1234 && !
deföed
(
SQLITE_DISABLE_INTRINSIC
) \

702 && 
	gGCC_VERSION
>=4008000

703 
	#gë2byãAlig√d
(
x
Ë
	`__buûtö_bsw≠16
(*(
u16
*)(x))

	)

704 #ñi‡
SQLITE_BYTEORDER
==1234 && !
deföed
(
SQLITE_DISABLE_INTRINSIC
) \

705 && 
deföed
(
_MSC_VER
) && _MSC_VER>=1300

706 
	#gë2byãAlig√d
(
x
Ë
	`_byãsw≠_ush‹t
(*(
u16
*)(x))

	)

708 
	#gë2byãAlig√d
(
x
Ë((x)[0]<<8 | (x)[1])

	)

	@build.c

25 
	~"sqlôeI¡.h
"

27 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


32 
	sTabÀLock
 {

33 
	miDb
;

34 
	miTab
;

35 
u8
 
	misWrôeLock
;

36 c⁄° *
	mzName
;

49 
	$sqlôe3TabÀLock
(

50 
P¨£
 *
pP¨£
,

51 
iDb
,

52 
iTab
,

53 
u8
 
isWrôeLock
,

54 c⁄° *
zName


56 
P¨£
 *
pT›Àvñ
 = 
	`sqlôe3P¨£T›Àvñ
(
pP¨£
);

57 
i
;

58 
nByãs
;

59 
TabÀLock
 *
p
;

60 
	`as£π
–
iDb
>=0 );

62 
i
=0; i<
pT›Àvñ
->
nTabÀLock
; i++){

63 
p
 = &
pT›Àvñ
->
aTabÀLock
[
i
];

64 if–
p
->
iDb
==iDb &&Ö->
iTab
==iTab ){

65 
p
->
isWrôeLock
 = (p->isWriteLock || isWriteLock);

70 
nByãs
 = (
TabÀLock
Ë* (
pT›Àvñ
->
nTabÀLock
+1);

71 
pT›Àvñ
->
aTabÀLock
 =

72 
	`sqlôe3DbRóŒocOrFªe
(
pT›Àvñ
->
db
,ÖT›Àvñ->
aTabÀLock
, 
nByãs
);

73 if–
pT›Àvñ
->
aTabÀLock
 ){

74 
p
 = &
pT›Àvñ
->
aTabÀLock
[pT›Àvñ->
nTabÀLock
++];

75 
p
->
iDb
 = iDb;

76 
p
->
iTab
 = iTab;

77 
p
->
isWrôeLock
 = isWriteLock;

78 
p
->
zName
 = zName;

80 
pT›Àvñ
->
nTabÀLock
 = 0;

81 
	`sqlôe3OomFau…
(
pT›Àvñ
->
db
);

83 
	}
}

89 
	$codeTabÀLocks
(
P¨£
 *
pP¨£
){

90 
i
;

91 
Vdbe
 *
pVdbe
;

93 
pVdbe
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

94 
	`as£π
–
pVdbe
!=0 );

96 
i
=0; i<
pP¨£
->
nTabÀLock
; i++){

97 
TabÀLock
 *
p
 = &
pP¨£
->
aTabÀLock
[
i
];

98 
p1
 = 
p
->
iDb
;

99 
	`sqlôe3VdbeAddOp4
(
pVdbe
, 
OP_TabÀLock
, 
p1
, 
p
->
iTab
,Ö->
isWrôeLock
,

100 
p
->
zName
, 
P4_STATIC
);

102 
	}
}

104 
	#codeTabÀLocks
(
x
)

	)

112 #i‡
SQLITE_MAX_ATTACHED
>30

113 
	$sqlôe3DbMaskAŒZîo
(
yDbMask
 
m
){

114 
i
;

115 
i
=0; i<(
yDbMask
); i++Ëif–
m
[i] )  0;

117 
	}
}

130 
	$sqlôe3FöishCodög
(
P¨£
 *
pP¨£
){

131 
sqlôe3
 *
db
;

132 
Vdbe
 *
v
;

134 
	`as£π
–
pP¨£
->
pT›Àvñ
==0 );

135 
db
 = 
pP¨£
->db;

136 if–
pP¨£
->
√°ed
 ) ;

137 if–
db
->
mÆlocFaûed
 || 
pP¨£
->
nEº
 ){

138 if–
pP¨£
->
rc
==
SQLITE_OK
 )ÖP¨£->r¯
SQLITE_ERROR
;

145 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

146 
	`as£π
–!
pP¨£
->
isMu…iWrôe


147 || 
	`sqlôe3VdbeAs£πMayAb‹t
(
v
, 
pP¨£
->
mayAb‹t
));

148 if–
v
 ){

149  
	`sqlôe3VdbeDñëePri‹Opcode
(
v
, 
OP_Clo£
) ){}

150 
	`sqlôe3VdbeAddOp0
(
v
, 
OP_HÆt
);

152 #i‡
SQLITE_USER_AUTHENTICATION


153 if–
pP¨£
->
nTabÀLock
>0 && 
db
->
öô
.
busy
==0 ){

154 
	`sqlôe3U£rAuthInô
(
db
);

155 if–
db
->
auth
.
authLevñ
<
UAUTH_U£r
 ){

156 
pP¨£
->
rc
 = 
SQLITE_AUTH_USER
;

157 
	`sqlôe3Eº‹Msg
(
pP¨£
, "userÇotáuthenticated");

169 if–
db
->
mÆlocFaûed
==0

170 && (
	`DbMaskN⁄Zîo
(
pP¨£
->
cookõMask
Ë||ÖP¨£->
pC⁄°Ex¥
)

172 
iDb
, 
i
;

173 
	`as£π
–
	`sqlôe3VdbeGëOp
(
v
, 0)->
›code
==
OP_Inô
 );

174 
	`sqlôe3VdbeJumpHîe
(
v
, 0);

175 
iDb
=0; iDb<
db
->
nDb
; iDb++){

176 if–
	`DbMaskTe°
(
pP¨£
->
cookõMask
, 
iDb
)==0 ) ;

177 
	`sqlôe3VdbeU£sBåì
(
v
, 
iDb
);

178 
	`sqlôe3VdbeAddOp4I¡
(
v
,

179 
OP_Tønß˘i⁄
,

180 
iDb
,

181 
	`DbMaskTe°
(
pP¨£
->
wrôeMask
,
iDb
),

182 
pP¨£
->
cookõVÆue
[
iDb
],

183 
db
->
aDb
[
iDb
].
pSchema
->
iGíî©i⁄


185 if–
db
->
öô
.
busy
==0 ) 
	`sqlôe3VdbeCh™geP5
(
v
, 1);

186 
	`VdbeCommít
((
v
,

187 "u£sStmtJou∫Æ=%d", 
pP¨£
->
mayAb‹t
 &&ÖP¨£->
isMu…iWrôe
));

189 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


190 
i
=0; i<
pP¨£
->
nVèbLock
; i++){

191 *
vèb
 = (*)
	`sqlôe3GëVTabÀ
(
db
, 
pP¨£
->
≠VèbLock
[
i
]);

192 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_VBegö
, 0, 0, 0, 
vèb
, 
P4_VTAB
);

194 
pP¨£
->
nVèbLock
 = 0;

201 
	`codeTabÀLocks
(
pP¨£
);

205 
	`sqlôe3Autoö¸emítBegö
(
pP¨£
);

208 if–
pP¨£
->
pC⁄°Ex¥
 ){

209 
Ex¥Li°
 *
pEL
 = 
pP¨£
->
pC⁄°Ex¥
;

210 
pP¨£
->
okC⁄°Fa˘‹
 = 0;

211 
i
=0; i<
pEL
->
nEx¥
; i++){

212 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEL
->
a
[
i
].
pEx¥
,ÖEL->a[i].
u
.
iC⁄°Ex¥Reg
);

217 
	`sqlôe3VdbeGŸo
(
v
, 1);

224 if–
v
 && 
pP¨£
->
nEº
==0 && !
db
->
mÆlocFaûed
 ){

225 
	`as£π
–
pP¨£
->
iCacheLevñ
==0 );

228 if–
pP¨£
->
pAöc
!=0 &&ÖP¨£->
nTab
==0 )ÖParse->nTab = 1;

229 
	`sqlôe3VdbeMakeRódy
(
v
, 
pP¨£
);

230 
pP¨£
->
rc
 = 
SQLITE_DONE
;

232 
pP¨£
->
rc
 = 
SQLITE_ERROR
;

237 
pP¨£
->
cﬁNamesSë
 = 0;

238 
pP¨£
->
nTab
 = 0;

239 
pP¨£
->
nMem
 = 0;

240 
pP¨£
->
nSë
 = 0;

241 
pP¨£
->
nV¨
 = 0;

242 
	`DbMaskZîo
(
pP¨£
->
cookõMask
);

244 
	}
}

258 
	$sqlôe3Ne°edP¨£
(
P¨£
 *
pP¨£
, c⁄° *
zF‹m©
, ...){

259 
va_li°
 
≠
;

260 *
zSql
;

261 *
zEºMsg
 = 0;

262 
sqlôe3
 *
db
 = 
pP¨£
->db;

263 
	#SAVE_SZ
 ((
P¨£
Ë- 
	`off£tof
(P¨£,
nV¨
))

	)

264 
ßveBuf
[
SAVE_SZ
];

266 if–
pP¨£
->
nEº
 ) ;

267 
	`as£π
–
pP¨£
->
√°ed
<10 );

268 
	`va_°¨t
(
≠
, 
zF‹m©
);

269 
zSql
 = 
	`sqlôe3VMPrötf
(
db
, 
zF‹m©
, 
≠
);

270 
	`va_íd
(
≠
);

271 if–
zSql
==0 ){

274 
pP¨£
->
√°ed
++;

275 
	`mem˝y
(
ßveBuf
, &
pP¨£
->
nV¨
, 
SAVE_SZ
);

276 
	`mem£t
(&
pP¨£
->
nV¨
, 0, 
SAVE_SZ
);

277 
	`sqlôe3RunP¨£r
(
pP¨£
, 
zSql
, &
zEºMsg
);

278 
	`sqlôe3DbFªe
(
db
, 
zEºMsg
);

279 
	`sqlôe3DbFªe
(
db
, 
zSql
);

280 
	`mem˝y
(&
pP¨£
->
nV¨
, 
ßveBuf
, 
SAVE_SZ
);

281 
pP¨£
->
√°ed
--;

282 
	}
}

284 #i‡
SQLITE_USER_AUTHENTICATION


289 
	$sqlôe3U£rAuthTabÀ
(c⁄° *
zTabÀ
){

290  
	`sqlôe3_°ricmp
(
zTabÀ
, "sqlite_user")==0;

291 
	}
}

306 
TabÀ
 *
	$sqlôe3FödTabÀ
(
sqlôe3
 *
db
, c⁄° *
zName
, c⁄° *
zD©aba£
){

307 
TabÀ
 *
p
 = 0;

308 
i
;

311 
	`as£π
–
zD©aba£
!=0 || 
	`sqlôe3BåìHﬁdsAŒMuãxes
(
db
) );

312 #i‡
SQLITE_USER_AUTHENTICATION


315 if–
db
->
auth
.
authLevñ
<
UAUTH_Admö
 && 
	`sqlôe3U£rAuthTabÀ
(
zName
)!=0 ){

319 
i
=
OMIT_TEMPDB
; i<
db
->
nDb
; i++){

320 
j
 = (
i
<2) ? i^1 : i;

321 if–
zD©aba£
!=0 && 
	`sqlôe3SåICmp
(zD©aba£, 
db
->
aDb
[
j
].
zName
) ) ;

322 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
j
, 0) );

323 
p
 = 
	`sqlôe3HashFöd
(&
db
->
aDb
[
j
].
pSchema
->
tblHash
, 
zName
);

324 if–
p
 ) ;

326  
p
;

327 
	}
}

339 
TabÀ
 *
	$sqlôe3LoˇãTabÀ
(

340 
P¨£
 *
pP¨£
,

341 
isVõw
,

342 c⁄° *
zName
,

343 c⁄° *
zDba£


345 
TabÀ
 *
p
;

349 if–
SQLITE_OK
!=
	`sqlôe3RódSchema
(
pP¨£
) ){

353 
p
 = 
	`sqlôe3FödTabÀ
(
pP¨£
->
db
, 
zName
, 
zDba£
);

354 if–
p
==0 ){

355 c⁄° *
zMsg
 = 
isVõw
 ? "no such view" : "no suchÅable";

356 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


357 if–
	`sqlôe3FödDbName
(
pP¨£
->
db
, 
zDba£
)<1 ){

361 
ModuÀ
 *
pMod
 = (ModuÀ*)
	`sqlôe3HashFöd
(&
pP¨£
->
db
->
aModuÀ
, 
zName
);

362 if–
pMod
 && 
	`sqlôe3VèbEp⁄ymousTabÀInô
(
pP¨£
,ÖMod) ){

363  
pMod
->
pEpoTab
;

367 if–
zDba£
 ){

368 
	`sqlôe3Eº‹Msg
(
pP¨£
, "%s: %s.%s", 
zMsg
, 
zDba£
, 
zName
);

370 
	`sqlôe3Eº‹Msg
(
pP¨£
, "%s: %s", 
zMsg
, 
zName
);

372 
pP¨£
->
checkSchema
 = 1;

375  
p
;

376 
	}
}

387 
TabÀ
 *
	$sqlôe3LoˇãTabÀIãm
(

388 
P¨£
 *
pP¨£
,

389 
isVõw
,

390 
SrcLi°_ôem
 *
p


392 c⁄° *
zDb
;

393 
	`as£π
–
p
->
pSchema
==0 ||Ö->
zD©aba£
==0 );

394 if–
p
->
pSchema
 ){

395 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
p
->
pSchema
);

396 
zDb
 = 
pP¨£
->
db
->
aDb
[
iDb
].
zName
;

398 
zDb
 = 
p
->
zD©aba£
;

400  
	`sqlôe3LoˇãTabÀ
(
pP¨£
, 
isVõw
, 
p
->
zName
, 
zDb
);

401 
	}
}

415 
Index
 *
	$sqlôe3FödIndex
(
sqlôe3
 *
db
, c⁄° *
zName
, c⁄° *
zDb
){

416 
Index
 *
p
 = 0;

417 
i
;

419 
	`as£π
–
zDb
!=0 || 
	`sqlôe3BåìHﬁdsAŒMuãxes
(
db
) );

420 
i
=
OMIT_TEMPDB
; i<
db
->
nDb
; i++){

421 
j
 = (
i
<2) ? i^1 : i;

422 
Schema
 *
pSchema
 = 
db
->
aDb
[
j
].pSchema;

423 
	`as£π
–
pSchema
 );

424 if–
zDb
 && 
	`sqlôe3SåICmp
(zDb, 
db
->
aDb
[
j
].
zName
) ) ;

425 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
j
, 0) );

426 
p
 = 
	`sqlôe3HashFöd
(&
pSchema
->
idxHash
, 
zName
);

427 if–
p
 ) ;

429  
p
;

430 
	}
}

435 
	$‰ìIndex
(
sqlôe3
 *
db
, 
Index
 *
p
){

436 #i‚de‡
SQLITE_OMIT_ANALYZE


437 
	`sqlôe3DñëeIndexSam∂es
(
db
, 
p
);

439 
	`sqlôe3Ex¥Dñëe
(
db
, 
p
->
pP¨tIdxWhîe
);

440 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
p
->
aCﬁEx¥
);

441 
	`sqlôe3DbFªe
(
db
, 
p
->
zCﬁAff
);

442 if–
p
->
isResized
 ) 
	`sqlôe3DbFªe
(
db
, (*Ì->
azCﬁl
);

443 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


444 
	`sqlôe3_‰ì
(
p
->
aiRowE°
);

446 
	`sqlôe3DbFªe
(
db
, 
p
);

447 
	}
}

455 
	$sqlôe3U∆ökAndDñëeIndex
(
sqlôe3
 *
db
, 
iDb
, c⁄° *
zIdxName
){

456 
Index
 *
pIndex
;

457 
Hash
 *
pHash
;

459 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

460 
pHash
 = &
db
->
aDb
[
iDb
].
pSchema
->
idxHash
;

461 
pIndex
 = 
	`sqlôe3HashIn£π
(
pHash
, 
zIdxName
, 0);

462 if–
	`ALWAYS
(
pIndex
) ){

463 if–
pIndex
->
pTabÀ
->pIndex==pIndex ){

464 
pIndex
->
pTabÀ
->pIndex =ÖIndex->
pNext
;

466 
Index
 *
p
;

469 
p
 = 
pIndex
->
pTabÀ
->pIndex;

470  
	`ALWAYS
(
p
Ë&&Ö->
pNext
!=
pIndex
 ){Ö =Ö->pNext; }

471 if–
	`ALWAYS
(
p
 &&Ö->
pNext
==
pIndex
) ){

472 
p
->
pNext
 = 
pIndex
->pNext;

475 
	`‰ìIndex
(
db
, 
pIndex
);

477 
db
->
Êags
 |
SQLITE_I¡înCh™ges
;

478 
	}
}

488 
	$sqlôe3Cﬁœp£D©aba£Aºay
(
sqlôe3
 *
db
){

489 
i
, 
j
;

490 
i
=
j
=2; i<
db
->
nDb
; i++){

491 
Db
 *
pDb
 = &
db
->
aDb
[
i
];

492 if–
pDb
->
pBt
==0 ){

493 
	`sqlôe3DbFªe
(
db
, 
pDb
->
zName
);

494 
pDb
->
zName
 = 0;

497 if–
j
<
i
 ){

498 
db
->
aDb
[
j
] = db->aDb[
i
];

500 
j
++;

502 
db
->
nDb
 = 
j
;

503 if–
db
->
nDb
<=2 && db->
aDb
!=db->
aDbSètic
 ){

504 
	`mem˝y
(
db
->
aDbSètic
, db->
aDb
, 2*(db->aDb[0]));

505 
	`sqlôe3DbFªe
(
db
, db->
aDb
);

506 
db
->
aDb
 = db->
aDbSètic
;

508 
	}
}

514 
	$sqlôe3Re£tO√Schema
(
sqlôe3
 *
db
, 
iDb
){

515 
Db
 *
pDb
;

516 
	`as£π
–
iDb
<
db
->
nDb
 );

519 
pDb
 = &
db
->
aDb
[
iDb
];

520 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

521 
	`as£π
–
pDb
->
pSchema
!=0 );

522 
	`sqlôe3SchemaCÀ¨
(
pDb
->
pSchema
);

528 if–
iDb
!=1 ){

529 
pDb
 = &
db
->
aDb
[1];

530 
	`as£π
–
pDb
->
pSchema
!=0 );

531 
	`sqlôe3SchemaCÀ¨
(
pDb
->
pSchema
);

534 
	}
}

540 
	$sqlôe3Re£tAŒSchemasOfC⁄√˘i⁄
(
sqlôe3
 *
db
){

541 
i
;

542 
	`sqlôe3BåìE¡îAŒ
(
db
);

543 
i
=0; i<
db
->
nDb
; i++){

544 
Db
 *
pDb
 = &
db
->
aDb
[
i
];

545 if–
pDb
->
pSchema
 ){

546 
	`sqlôe3SchemaCÀ¨
(
pDb
->
pSchema
);

549 
db
->
Êags
 &~
SQLITE_I¡înCh™ges
;

550 
	`sqlôe3VèbU∆ockLi°
(
db
);

551 
	`sqlôe3BåìLóveAŒ
(
db
);

552 
	`sqlôe3Cﬁœp£D©aba£Aºay
(
db
);

553 
	}
}

558 
	$sqlôe3CommôI¡î«lCh™ges
(
sqlôe3
 *
db
){

559 
db
->
Êags
 &~
SQLITE_I¡înCh™ges
;

560 
	}
}

566 
	$sqlôe3DñëeCﬁumnNames
(
sqlôe3
 *
db
, 
TabÀ
 *
pTabÀ
){

567 
i
;

568 
Cﬁumn
 *
pCﬁ
;

569 
	`as£π
–
pTabÀ
!=0 );

570 if–(
pCﬁ
 = 
pTabÀ
->
aCﬁ
)!=0 ){

571 
i
=0; i<
pTabÀ
->
nCﬁ
; i++, 
pCﬁ
++){

572 
	`sqlôe3DbFªe
(
db
, 
pCﬁ
->
zName
);

573 
	`sqlôe3Ex¥Dñëe
(
db
, 
pCﬁ
->
pDÊt
);

574 
	`sqlôe3DbFªe
(
db
, 
pCﬁ
->
zCﬁl
);

576 
	`sqlôe3DbFªe
(
db
, 
pTabÀ
->
aCﬁ
);

578 
	}
}

595 
SQLITE_NOINLINE
 
	$dñëeTabÀ
(
sqlôe3
 *
db
, 
TabÀ
 *
pTabÀ
){

596 
Index
 *
pIndex
, *
pNext
;

597 
	`TESTONLY
–
nLookaside
; )

602 
	`TESTONLY
–
nLookaside
 = (
db
 && (
pTabÀ
->
èbFœgs
 & 
TF_EphemîÆ
)==0) ?

603 
db
->
lookaside
.
nOut
 : 0 );

606 
pIndex
 = 
pTabÀ
->pIndex;ÖIndex;ÖIndex=
pNext
){

607 
pNext
 = 
pIndex
->pNext;

608 
	`as£π
–
pIndex
->
pSchema
==
pTabÀ
->pSchema );

609 if–!
db
 || db->
≤ByãsFªed
==0 ){

610 *
zName
 = 
pIndex
->zName;

611 
	`TESTONLY
 ( 
Index
 *
pOld
 = ) 
	`sqlôe3HashIn£π
(

612 &
pIndex
->
pSchema
->
idxHash
, 
zName
, 0

614 
	`as£π
–
db
==0 || 
	`sqlôe3SchemaMuãxHñd
(db, 0, 
pIndex
->
pSchema
) );

615 
	`as£π
–
pOld
==
pIndex
 ||ÖOld==0 );

617 
	`‰ìIndex
(
db
, 
pIndex
);

621 
	`sqlôe3FkDñëe
(
db
, 
pTabÀ
);

625 
	`sqlôe3DñëeCﬁumnNames
(
db
, 
pTabÀ
);

626 
	`sqlôe3DbFªe
(
db
, 
pTabÀ
->
zName
);

627 
	`sqlôe3DbFªe
(
db
, 
pTabÀ
->
zCﬁAff
);

628 
	`sqlôe3Sñe˘Dñëe
(
db
, 
pTabÀ
->
pSñe˘
);

629 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
pTabÀ
->
pCheck
);

630 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


631 
	`sqlôe3VèbCÀ¨
(
db
, 
pTabÀ
);

633 
	`sqlôe3DbFªe
(
db
, 
pTabÀ
);

636 
	`as£π
–
nLookaside
==0 ||ÇLookaside==
db
->
lookaside
.
nOut
 );

637 
	}
}

638 
	$sqlôe3DñëeTabÀ
(
sqlôe3
 *
db
, 
TabÀ
 *
pTabÀ
){

640 if–!
pTabÀ
 ) ;

641 if–((!
db
 || db->
≤ByãsFªed
==0Ë&& (--
pTabÀ
->
nRef
)>0) ) ;

642 
	`dñëeTabÀ
(
db
, 
pTabÀ
);

643 
	}
}

650 
	$sqlôe3U∆ökAndDñëeTabÀ
(
sqlôe3
 *
db
, 
iDb
, c⁄° *
zTabName
){

651 
TabÀ
 *
p
;

652 
Db
 *
pDb
;

654 
	`as£π
–
db
!=0 );

655 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

656 
	`as£π
–
zTabName
 );

657 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

658 
	`ã°ˇ£
–
zTabName
[0]==0 );

659 
pDb
 = &
db
->
aDb
[
iDb
];

660 
p
 = 
	`sqlôe3HashIn£π
(&
pDb
->
pSchema
->
tblHash
, 
zTabName
, 0);

661 
	`sqlôe3DñëeTabÀ
(
db
, 
p
);

662 
db
->
Êags
 |
SQLITE_I¡înCh™ges
;

663 
	}
}

678 *
	$sqlôe3NameFromTokí
(
sqlôe3
 *
db
, 
Tokí
 *
pName
){

679 *
zName
;

680 if–
pName
 ){

681 
zName
 = 
	`sqlôe3DbSåNDup
(
db
, (*)
pName
->
z
,ÖName->
n
);

682 
	`sqlôe3DequŸe
(
zName
);

684 
zName
 = 0;

686  
zName
;

687 
	}
}

693 
	$sqlôe3O≥nMa°îTabÀ
(
P¨£
 *
p
, 
iDb
){

694 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
p
);

695 
	`sqlôe3TabÀLock
(
p
, 
iDb
, 
MASTER_ROOT
, 1, 
	`SCHEMA_TABLE
(iDb));

696 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_O≥nWrôe
, 0, 
MASTER_ROOT
, 
iDb
, 5);

697 if–
p
->
nTab
==0 ){

698 
p
->
nTab
 = 1;

700 
	}
}

708 
	$sqlôe3FödDbName
(
sqlôe3
 *
db
, c⁄° *
zName
){

709 
i
 = -1;

710 if–
zName
 ){

711 
Db
 *
pDb
;

712 
i
=(
db
->
nDb
-1), 
pDb
=&db->
aDb
[i]; i>=0; i--,ÖDb--){

713 if–0==
	`sqlôe3SåICmp
(
pDb
->
zName
, zName) ) ;

716  
i
;

717 
	}
}

725 
	$sqlôe3FödDb
(
sqlôe3
 *
db
, 
Tokí
 *
pName
){

726 
i
;

727 *
zName
;

728 
zName
 = 
	`sqlôe3NameFromTokí
(
db
, 
pName
);

729 
i
 = 
	`sqlôe3FödDbName
(
db
, 
zName
);

730 
	`sqlôe3DbFªe
(
db
, 
zName
);

731  
i
;

732 
	}
}

750 
	$sqlôe3TwoP¨tName
(

751 
P¨£
 *
pP¨£
,

752 
Tokí
 *
pName1
,

753 
Tokí
 *
pName2
,

754 
Tokí
 **
pUnquÆ


756 
iDb
;

757 
sqlôe3
 *
db
 = 
pP¨£
->db;

759 
	`as£π
–
pName2
!=0 );

760 if–
pName2
->
n
>0 ){

761 if–
db
->
öô
.
busy
 ) {

762 
	`sqlôe3Eº‹Msg
(
pP¨£
, "corrupt database");

765 *
pUnquÆ
 = 
pName2
;

766 
iDb
 = 
	`sqlôe3FödDb
(
db
, 
pName1
);

767 if–
iDb
<0 ){

768 
	`sqlôe3Eº‹Msg
(
pP¨£
, "unknow¿d©aba£ %T", 
pName1
);

772 
	`as£π
–
db
->
öô
.
iDb
==0 || db->öô.
busy
 );

773 
iDb
 = 
db
->
öô
.iDb;

774 *
pUnquÆ
 = 
pName1
;

776  
iDb
;

777 
	}
}

786 
	$sqlôe3CheckObje˘Name
(
P¨£
 *
pP¨£
, c⁄° *
zName
){

787 if–!
pP¨£
->
db
->
öô
.
busy
 &&ÖP¨£->
√°ed
==0

788 && (
pP¨£
->
db
->
Êags
 & 
SQLITE_WrôeSchema
)==0

789 && 0==
	`sqlôe3SåNICmp
(
zName
, "sqlite_", 7) ){

790 
	`sqlôe3Eº‹Msg
(
pP¨£
, "obje˘Çamêª£rved f‹ i¡î«»u£: %s", 
zName
);

791  
SQLITE_ERROR
;

793  
SQLITE_OK
;

794 
	}
}

799 
Index
 *
	$sqlôe3Prim¨yKeyIndex
(
TabÀ
 *
pTab
){

800 
Index
 *
p
;

801 
p
=
pTab
->
pIndex
;Ö && !
	`IsPrim¨yKeyIndex
’);Öı->
pNext
){}

802  
p
;

803 
	}
}

809 
i16
 
	$sqlôe3CﬁumnOfIndex
(
Index
 *
pIdx
, 
i16
 
iCﬁ
){

810 
i
;

811 
i
=0; i<
pIdx
->
nCﬁumn
; i++){

812 if–
iCﬁ
==
pIdx
->
aiCﬁumn
[
i
] )  i;

815 
	}
}

833 
	$sqlôe3SèπTabÀ
(

834 
P¨£
 *
pP¨£
,

835 
Tokí
 *
pName1
,

836 
Tokí
 *
pName2
,

837 
isTemp
,

838 
isVõw
,

839 
isVútuÆ
,

840 
noEº


842 
TabÀ
 *
pTabÀ
;

843 *
zName
 = 0;

844 
sqlôe3
 *
db
 = 
pP¨£
->db;

845 
Vdbe
 *
v
;

846 
iDb
;

847 
Tokí
 *
pName
;

849 if–
db
->
öô
.
busy
 && db->öô.
√wTnum
==1 ){

851 
iDb
 = 
db
->
öô
.iDb;

852 
zName
 = 
	`sqlôe3DbSåDup
(
db
, 
	`SCHEMA_TABLE
(
iDb
));

853 
pName
 = 
pName1
;

856 
iDb
 = 
	`sqlôe3TwoP¨tName
(
pP¨£
, 
pName1
, 
pName2
, &
pName
);

857 if–
iDb
<0 ) ;

858 if–!
OMIT_TEMPDB
 && 
isTemp
 && 
pName2
->
n
>0 && 
iDb
!=1 ){

861 
	`sqlôe3Eº‹Msg
(
pP¨£
, "temporaryÅableÇame must be unqualified");

864 if–!
OMIT_TEMPDB
 && 
isTemp
 ) 
iDb
 = 1;

865 
zName
 = 
	`sqlôe3NameFromTokí
(
db
, 
pName
);

867 
pP¨£
->
sNameTokí
 = *
pName
;

868 if–
zName
==0 ) ;

869 if–
SQLITE_OK
!=
	`sqlôe3CheckObje˘Name
(
pP¨£
, 
zName
) ){

870 
begö_èbÀ_îr‹
;

872 if–
db
->
öô
.
iDb
==1 ) 
isTemp
 = 1;

873 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


874 
	`as£π
–
isTemp
==0 || isTemp==1 );

875 
	`as£π
–
isVõw
==0 || isView==1 );

877 c⁄° 
u8
 
aCode
[] = {

878 
SQLITE_CREATE_TABLE
,

879 
SQLITE_CREATE_TEMP_TABLE
,

880 
SQLITE_CREATE_VIEW
,

881 
SQLITE_CREATE_TEMP_VIEW


883 *
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

884 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_INSERT
, 
	`SCHEMA_TABLE
(
isTemp
), 0, 
zDb
) ){

885 
begö_èbÀ_îr‹
;

887 if–!
isVútuÆ
 && 
	`sqlôe3AuthCheck
(
pP¨£
, ()
aCode
[
isTemp
+2*
isVõw
],

888 
zName
, 0, 
zDb
) ){

889 
begö_èbÀ_îr‹
;

901 if–!
IN_DECLARE_VTAB
 ){

902 *
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

903 if–
SQLITE_OK
!=
	`sqlôe3RódSchema
(
pP¨£
) ){

904 
begö_èbÀ_îr‹
;

906 
pTabÀ
 = 
	`sqlôe3FödTabÀ
(
db
, 
zName
, 
zDb
);

907 if–
pTabÀ
 ){

908 if–!
noEº
 ){

909 
	`sqlôe3Eº‹Msg
(
pP¨£
, "èbÀ %TáÃódyÉxi°s", 
pName
);

911 
	`as£π
–!
db
->
öô
.
busy
 || 
CORRUPT_DB
 );

912 
	`sqlôe3CodeVîifySchema
(
pP¨£
, 
iDb
);

914 
begö_èbÀ_îr‹
;

916 if–
	`sqlôe3FödIndex
(
db
, 
zName
, 
zDb
)!=0 ){

917 
	`sqlôe3Eº‹Msg
(
pP¨£
, "thîêi†Æªadyá¿ödexÇamed %s", 
zName
);

918 
begö_èbÀ_îr‹
;

922 
pTabÀ
 = 
	`sqlôe3DbMÆlocZîo
(
db
, (
TabÀ
));

923 if–
pTabÀ
==0 ){

924 
	`as£π
–
db
->
mÆlocFaûed
 );

925 
pP¨£
->
rc
 = 
SQLITE_NOMEM_BKPT
;

926 
pP¨£
->
nEº
++;

927 
begö_èbÀ_îr‹
;

929 
pTabÀ
->
zName
 = zName;

930 
pTabÀ
->
iPKey
 = -1;

931 
pTabÀ
->
pSchema
 = 
db
->
aDb
[
iDb
].pSchema;

932 
pTabÀ
->
nRef
 = 1;

933 
pTabÀ
->
nRowLogE°
 = 200; 
	`as£π
–200==
	`sqlôe3LogE°
(1048576) );

934 
	`as£π
–
pP¨£
->
pNewTabÀ
==0 );

935 
pP¨£
->
pNewTabÀ
 = 
pTabÀ
;

941 #i‚de‡
SQLITE_OMIT_AUTOINCREMENT


942 if–!
pP¨£
->
√°ed
 && 
	`°rcmp
(
zName
, "sqlite_sequence")==0 ){

943 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

944 
pTabÀ
->
pSchema
->
pSeqTab
 =ÖTable;

956 if–!
db
->
öô
.
busy
 && (
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
))!=0 ){

957 
addr1
;

958 
fûeF‹m©
;

959 
ªg1
, 
ªg2
, 
ªg3
;

961 c⁄° 
nuŒRow
[] = { 6, 0, 0, 0, 0, 0 };

962 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 1, 
iDb
);

964 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


965 if–
isVútuÆ
 ){

966 
	`sqlôe3VdbeAddOp0
(
v
, 
OP_VBegö
);

973 
ªg1
 = 
pP¨£
->
ªgRowid
 = ++pP¨£->
nMem
;

974 
ªg2
 = 
pP¨£
->
ªgRoŸ
 = ++pP¨£->
nMem
;

975 
ªg3
 = ++
pP¨£
->
nMem
;

976 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_RódCookõ
, 
iDb
, 
ªg3
, 
BTREE_FILE_FORMAT
);

977 
	`sqlôe3VdbeU£sBåì
(
v
, 
iDb
);

978 
addr1
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_If
, 
ªg3
); 
	`VdbeCovîage
(v);

979 
fûeF‹m©
 = (
db
->
Êags
 & 
SQLITE_LegacyFûeFmt
)!=0 ?

980 1 : 
SQLITE_MAX_FILE_FORMAT
;

981 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_SëCookõ
, 
iDb
, 
BTREE_FILE_FORMAT
, 
fûeF‹m©
);

982 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_SëCookõ
, 
iDb
, 
BTREE_TEXT_ENCODING
, 
	`ENC
(
db
));

983 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr1
);

994 #i‡!
	`deföed
(
SQLITE_OMIT_VIEW
Ë|| !deföed(
SQLITE_OMIT_VIRTUALTABLE
)

995 if–
isVõw
 || 
isVútuÆ
 ){

996 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 0, 
ªg2
);

1000 
pP¨£
->
addrCrTab
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Cª©eTabÀ
, 
iDb
, 
ªg2
);

1002 
	`sqlôe3O≥nMa°îTabÀ
(
pP¨£
, 
iDb
);

1003 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NewRowid
, 0, 
ªg1
);

1004 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Blob
, 6, 
ªg3
, 0, 
nuŒRow
, 
P4_STATIC
);

1005 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_In£π
, 0, 
ªg3
, 
ªg1
);

1006 
	`sqlôe3VdbeCh™geP5
(
v
, 
OPFLAG_APPEND
);

1007 
	`sqlôe3VdbeAddOp0
(
v
, 
OP_Clo£
);

1014 
begö_èbÀ_îr‹
:

1015 
	`sqlôe3DbFªe
(
db
, 
zName
);

1017 
	}
}

1022 #i‡
SQLITE_ENABLE_HIDDEN_COLUMNS


1023 
	$sqlôe3CﬁumnPr›îtõsFromName
(
TabÀ
 *
pTab
, 
Cﬁumn
 *
pCﬁ
){

1024 if–
	`sqlôe3_°∫icmp
(
pCﬁ
->
zName
, "__hidden__", 10)==0 ){

1025 
pCﬁ
->
cﬁFœgs
 |
COLFLAG_HIDDEN
;

1026 }if–
pTab
 && 
pCﬁ
!ıTab->
aCﬁ
 && (pCﬁ[-1].
cﬁFœgs
 & 
COLFLAG_HIDDEN
) ){

1027 
pTab
->
èbFœgs
 |
TF_OOOHiddí
;

1029 
	}
}

1041 
	$sqlôe3AddCﬁumn
(
P¨£
 *
pP¨£
, 
Tokí
 *
pName
, Tokí *
pTy≥
){

1042 
TabÀ
 *
p
;

1043 
i
;

1044 *
z
;

1045 *
zTy≥
;

1046 
Cﬁumn
 *
pCﬁ
;

1047 
sqlôe3
 *
db
 = 
pP¨£
->db;

1048 if–(
p
 = 
pP¨£
->
pNewTabÀ
)==0 ) ;

1049 #i‡
SQLITE_MAX_COLUMN


1050 if–
p
->
nCﬁ
+1>
db
->
aLimô
[
SQLITE_LIMIT_COLUMN
] ){

1051 
	`sqlôe3Eº‹Msg
(
pP¨£
, "toÿm™y cﬁumn†⁄ %s", 
p
->
zName
);

1055 
z
 = 
	`sqlôe3DbMÆlocRaw
(
db
, 
pName
->
n
 + 
pTy≥
->n + 2);

1056 if–
z
==0 ) ;

1057 
	`mem˝y
(
z
, 
pName
->z,ÖName->
n
);

1058 
z
[
pName
->
n
] = 0;

1059 
	`sqlôe3DequŸe
(
z
);

1060 
i
=0; i<
p
->
nCﬁ
; i++){

1061 if–
	`sqlôe3_°ricmp
(
z
, 
p
->
aCﬁ
[
i
].
zName
)==0 ){

1062 
	`sqlôe3Eº‹Msg
(
pP¨£
, "du∂iˇã cﬁum¿«me: %s", 
z
);

1063 
	`sqlôe3DbFªe
(
db
, 
z
);

1067 if–(
p
->
nCﬁ
 & 0x7)==0 ){

1068 
Cﬁumn
 *
aNew
;

1069 
aNew
 = 
	`sqlôe3DbRóŒoc
(
db
,
p
->
aCﬁ
,’->
nCﬁ
+8)*(p->aCol[0]));

1070 if–
aNew
==0 ){

1071 
	`sqlôe3DbFªe
(
db
, 
z
);

1074 
p
->
aCﬁ
 = 
aNew
;

1076 
pCﬁ
 = &
p
->
aCﬁ
[p->
nCﬁ
];

1077 
	`mem£t
(
pCﬁ
, 0, (
p
->
aCﬁ
[0]));

1078 
pCﬁ
->
zName
 = 
z
;

1079 
	`sqlôe3CﬁumnPr›îtõsFromName
(
p
, 
pCﬁ
);

1081 if–
pTy≥
->
n
==0 ){

1084 
pCﬁ
->
afföôy
 = 
SQLITE_AFF_BLOB
;

1085 
pCﬁ
->
szE°
 = 1;

1087 
zTy≥
 = 
z
 + 
	`sqlôe3SåÀn30
(z) + 1;

1088 
	`mem˝y
(
zTy≥
, 
pTy≥
->
z
,ÖTy≥->
n
);

1089 
zTy≥
[
pTy≥
->
n
] = 0;

1090 
	`sqlôe3DequŸe
(
zTy≥
);

1091 
pCﬁ
->
afföôy
 = 
	`sqlôe3AfföôyTy≥
(
zTy≥
, &pCﬁ->
szE°
);

1092 
pCﬁ
->
cﬁFœgs
 |
COLFLAG_HASTYPE
;

1094 
p
->
nCﬁ
++;

1095 
pP¨£
->
c⁄°øötName
.
n
 = 0;

1096 
	}
}

1104 
	$sqlôe3AddNŸNuŒ
(
P¨£
 *
pP¨£
, 
⁄Eº‹
){

1105 
TabÀ
 *
p
;

1106 
p
 = 
pP¨£
->
pNewTabÀ
;

1107 if–
p
==0 || 
	`NEVER
’->
nCﬁ
<1) ) ;

1108 
p
->
aCﬁ
[p->
nCﬁ
-1].
nŸNuŒ
 = (
u8
)
⁄Eº‹
;

1109 
	}
}

1136 
	$sqlôe3AfföôyTy≥
(c⁄° *
zIn
, 
u8
 *
pszE°
){

1137 
u32
 
h
 = 0;

1138 
aff
 = 
SQLITE_AFF_NUMERIC
;

1139 c⁄° *
zCh¨
 = 0;

1141 
	`as£π
–
zIn
!=0 );

1142  
zIn
[0] ){

1143 
h
 = (h<<8Ë+ 
sqlôe3UµîToLowî
[(*
zIn
)&0xff];

1144 
zIn
++;

1145 if–
h
==(('c'<<24)+('h'<<16)+('a'<<8)+'r') ){

1146 
aff
 = 
SQLITE_AFF_TEXT
;

1147 
zCh¨
 = 
zIn
;

1148 }if–
h
==(('c'<<24)+('l'<<16)+('o'<<8)+'b') ){

1149 
aff
 = 
SQLITE_AFF_TEXT
;

1150 }if–
h
==(('t'<<24)+('e'<<16)+('x'<<8)+'t') ){

1151 
aff
 = 
SQLITE_AFF_TEXT
;

1152 }if–
h
==(('b'<<24)+('l'<<16)+('o'<<8)+'b')

1153 && (
aff
==
SQLITE_AFF_NUMERIC
 ||áff==
SQLITE_AFF_REAL
) ){

1154 
aff
 = 
SQLITE_AFF_BLOB
;

1155 if–
zIn
[0]=='(' ) 
zCh¨
 = zIn;

1156 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


1157 }if–
h
==(('r'<<24)+('e'<<16)+('a'<<8)+'l')

1158 && 
aff
==
SQLITE_AFF_NUMERIC
 ){

1159 
aff
 = 
SQLITE_AFF_REAL
;

1160 }if–
h
==(('f'<<24)+('l'<<16)+('o'<<8)+'a')

1161 && 
aff
==
SQLITE_AFF_NUMERIC
 ){

1162 
aff
 = 
SQLITE_AFF_REAL
;

1163 }if–
h
==(('d'<<24)+('o'<<16)+('u'<<8)+'b')

1164 && 
aff
==
SQLITE_AFF_NUMERIC
 ){

1165 
aff
 = 
SQLITE_AFF_REAL
;

1167 }if–(
h
&0x00FFFFFF)==(('i'<<16)+('n'<<8)+'t') ){

1168 
aff
 = 
SQLITE_AFF_INTEGER
;

1175 if–
pszE°
 ){

1176 *
pszE°
 = 1;

1177 if–
aff
<
SQLITE_AFF_NUMERIC
 ){

1178 if–
zCh¨
 ){

1179  
zCh¨
[0] ){

1180 if–
	`sqlôe3Isdigô
(
zCh¨
[0]) ){

1181 
v
 = 0;

1182 
	`sqlôe3GëI¡32
(
zCh¨
, &
v
);

1183 
v
 = v/4 + 1;

1184 if–
v
>255 ) v = 255;

1185 *
pszE°
 = 
v
;

1188 
zCh¨
++;

1191 *
pszE°
 = 5;

1195  
aff
;

1196 
	}
}

1208 
	$sqlôe3AddDeÁu…VÆue
(
P¨£
 *
pP¨£
, 
Ex¥S∑n
 *
pS∑n
){

1209 
TabÀ
 *
p
;

1210 
Cﬁumn
 *
pCﬁ
;

1211 
sqlôe3
 *
db
 = 
pP¨£
->db;

1212 
p
 = 
pP¨£
->
pNewTabÀ
;

1213 if–
p
!=0 ){

1214 
pCﬁ
 = &(
p
->
aCﬁ
[p->
nCﬁ
-1]);

1215 if–!
	`sqlôe3Ex¥IsC⁄°™tOrFun˘i⁄
(
pS∑n
->
pEx¥
, 
db
->
öô
.
busy
) ){

1216 
	`sqlôe3Eº‹Msg
(
pP¨£
, "default value of column [%s] isÇot constant",

1217 
pCﬁ
->
zName
);

1223 
Ex¥
 
x
;

1224 
	`sqlôe3Ex¥Dñëe
(
db
, 
pCﬁ
->
pDÊt
);

1225 
	`mem£t
(&
x
, 0, (x));

1226 
x
.
›
 = 
TK_SPAN
;

1227 
x
.
u
.
zTokí
 = 
	`sqlôe3DbSåNDup
(
db
, (*)
pS∑n
->
zSèπ
,

1228 ()(
pS∑n
->
zEnd
 -ÖS∑n->
zSèπ
));

1229 
x
.
pLe·
 = 
pS∑n
->
pEx¥
;

1230 
x
.
Êags
 = 
EP_Skù
;

1231 
pCﬁ
->
pDÊt
 = 
	`sqlôe3Ex¥Dup
(
db
, &
x
, 
EXPRDUP_REDUCE
);

1232 
	`sqlôe3DbFªe
(
db
, 
x
.
u
.
zTokí
);

1235 
	`sqlôe3Ex¥Dñëe
(
db
, 
pS∑n
->
pEx¥
);

1236 
	}
}

1254 
	$sqlôe3SåögToId
(
Ex¥
 *
p
){

1255 if–
p
->
›
==
TK_STRING
 ){

1256 
p
->
›
 = 
TK_ID
;

1257 }if–
p
->
›
==
TK_COLLATE
 &&Ö->
pLe·
->›==
TK_STRING
 ){

1258 
p
->
pLe·
->
›
 = 
TK_ID
;

1260 
	}
}

1280 
	$sqlôe3AddPrim¨yKey
(

1281 
P¨£
 *
pP¨£
,

1282 
Ex¥Li°
 *
pLi°
,

1283 
⁄Eº‹
,

1284 
autoInc
,

1285 
s‹tOrdî


1287 
TabÀ
 *
pTab
 = 
pP¨£
->
pNewTabÀ
;

1288 
Cﬁumn
 *
pCﬁ
 = 0;

1289 
iCﬁ
 = -1, 
i
;

1290 
nTîm
;

1291 if–
pTab
==0 || 
IN_DECLARE_VTAB
 ) 
¥im¨y_key_exô
;

1292 if–
pTab
->
èbFœgs
 & 
TF_HasPrim¨yKey
 ){

1293 
	`sqlôe3Eº‹Msg
(
pP¨£
,

1294 "èbÀ \"%s\" ha†m‹êth™ o√Örim¨y key", 
pTab
->
zName
);

1295 
¥im¨y_key_exô
;

1297 
pTab
->
èbFœgs
 |
TF_HasPrim¨yKey
;

1298 if–
pLi°
==0 ){

1299 
iCﬁ
 = 
pTab
->
nCﬁ
 - 1;

1300 
pCﬁ
 = &
pTab
->
aCﬁ
[
iCﬁ
];

1301 
pCﬁ
->
cﬁFœgs
 |
COLFLAG_PRIMKEY
;

1302 
nTîm
 = 1;

1304 
nTîm
 = 
pLi°
->
nEx¥
;

1305 
i
=0; i<
nTîm
; i++){

1306 
Ex¥
 *
pCEx¥
 = 
	`sqlôe3Ex¥SkùCﬁœã
(
pLi°
->
a
[
i
].
pEx¥
);

1307 
	`as£π
–
pCEx¥
!=0 );

1308 
	`sqlôe3SåögToId
(
pCEx¥
);

1309 if–
pCEx¥
->
›
==
TK_ID
 ){

1310 c⁄° *
zCName
 = 
pCEx¥
->
u
.
zTokí
;

1311 
iCﬁ
=0; iCﬁ<
pTab
->
nCﬁ
; iCol++){

1312 if–
	`sqlôe3SåICmp
(
zCName
, 
pTab
->
aCﬁ
[
iCﬁ
].
zName
)==0 ){

1313 
pCﬁ
 = &
pTab
->
aCﬁ
[
iCﬁ
];

1314 
pCﬁ
->
cﬁFœgs
 |
COLFLAG_PRIMKEY
;

1321 if–
nTîm
==1

1322 && 
pCﬁ


1323 && 
	`sqlôe3SåICmp
(
	`sqlôe3CﬁumnTy≥
(
pCﬁ
,""), "INTEGER")==0

1324 && 
s‹tOrdî
!=
SQLITE_SO_DESC


1326 
pTab
->
iPKey
 = 
iCﬁ
;

1327 
pTab
->
keyC⁄f
 = (
u8
)
⁄Eº‹
;

1328 
	`as£π
–
autoInc
==0 ||áutoInc==1 );

1329 
pTab
->
èbFœgs
 |
autoInc
*
TF_Autoö¸emít
;

1330 if–
pLi°
 ) 
pP¨£
->
iPkS‹tOrdî
 =ÖLi°->
a
[0].
s‹tOrdî
;

1331 }if–
autoInc
 ){

1332 #i‚de‡
SQLITE_OMIT_AUTOINCREMENT


1333 
	`sqlôe3Eº‹Msg
(
pP¨£
, "AUTOINCREMENT is onlyállowed onán "

1337 
Index
 *
p
;

1338 
p
 = 
	`sqlôe3Cª©eIndex
(
pP¨£
, 0, 0, 0, 
pLi°
, 
⁄Eº‹
, 0,

1339 0, 
s‹tOrdî
, 0);

1340 if–
p
 ){

1341 
p
->
idxTy≥
 = 
SQLITE_IDXTYPE_PRIMARYKEY
;

1343 
pLi°
 = 0;

1346 
¥im¨y_key_exô
:

1347 
	`sqlôe3Ex¥Li°Dñëe
(
pP¨£
->
db
, 
pLi°
);

1349 
	}
}

1354 
	$sqlôe3AddCheckC⁄°øöt
(

1355 
P¨£
 *
pP¨£
,

1356 
Ex¥
 *
pCheckEx¥


1358 #i‚de‡
SQLITE_OMIT_CHECK


1359 
TabÀ
 *
pTab
 = 
pP¨£
->
pNewTabÀ
;

1360 
sqlôe3
 *
db
 = 
pP¨£
->db;

1361 if–
pTab
 && !
IN_DECLARE_VTAB


1362 && !
	`sqlôe3BåìIsRód⁄ly
(
db
->
aDb
[db->
öô
.
iDb
].
pBt
)

1364 
pTab
->
pCheck
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,ÖTab->pCheck, 
pCheckEx¥
);

1365 if–
pP¨£
->
c⁄°øötName
.
n
 ){

1366 
	`sqlôe3Ex¥Li°SëName
(
pP¨£
, 
pTab
->
pCheck
, &pP¨£->
c⁄°øötName
, 1);

1371 
	`sqlôe3Ex¥Dñëe
(
pP¨£
->
db
, 
pCheckEx¥
);

1373 
	}
}

1379 
	$sqlôe3AddCﬁœãTy≥
(
P¨£
 *
pP¨£
, 
Tokí
 *
pTokí
){

1380 
TabÀ
 *
p
;

1381 
i
;

1382 *
zCﬁl
;

1383 
sqlôe3
 *
db
;

1385 if–(
p
 = 
pP¨£
->
pNewTabÀ
)==0 ) ;

1386 
i
 = 
p
->
nCﬁ
-1;

1387 
db
 = 
pP¨£
->db;

1388 
zCﬁl
 = 
	`sqlôe3NameFromTokí
(
db
, 
pTokí
);

1389 if–!
zCﬁl
 ) ;

1391 if–
	`sqlôe3LoˇãCﬁlSeq
(
pP¨£
, 
zCﬁl
) ){

1392 
Index
 *
pIdx
;

1393 
	`sqlôe3DbFªe
(
db
, 
p
->
aCﬁ
[
i
].
zCﬁl
);

1394 
p
->
aCﬁ
[
i
].
zCﬁl
 = zColl;

1400 
pIdx
=
p
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

1401 
	`as£π
–
pIdx
->
nKeyCﬁ
==1 );

1402 if–
pIdx
->
aiCﬁumn
[0]==
i
 ){

1403 
pIdx
->
azCﬁl
[0] = 
p
->
aCﬁ
[
i
].
zCﬁl
;

1407 
	`sqlôe3DbFªe
(
db
, 
zCﬁl
);

1409 
	}
}

1431 
CﬁlSeq
 *
	$sqlôe3LoˇãCﬁlSeq
(
P¨£
 *
pP¨£
, c⁄° *
zName
){

1432 
sqlôe3
 *
db
 = 
pP¨£
->db;

1433 
u8
 
íc
 = 
	`ENC
(
db
);

1434 
u8
 
öôbusy
 = 
db
->
öô
.
busy
;

1435 
CﬁlSeq
 *
pCﬁl
;

1437 
pCﬁl
 = 
	`sqlôe3FödCﬁlSeq
(
db
, 
íc
, 
zName
, 
öôbusy
);

1438 if–!
öôbusy
 && (!
pCﬁl
 || !pCﬁl->
xCmp
) ){

1439 
pCﬁl
 = 
	`sqlôe3GëCﬁlSeq
(
pP¨£
, 
íc
,ÖCﬁl, 
zName
);

1442  
pCﬁl
;

1443 
	}
}

1462 
	$sqlôe3Ch™geCookõ
(
P¨£
 *
pP¨£
, 
iDb
){

1463 
sqlôe3
 *
db
 = 
pP¨£
->db;

1464 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1465 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

1466 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_SëCookõ
, 
iDb
, 
BTREE_SCHEMA_VERSION
,

1467 
db
->
aDb
[
iDb
].
pSchema
->
schema_cookõ
+1);

1468 
	}
}

1478 
	$idítLígth
(c⁄° *
z
){

1479 
n
;

1480 
n
=0; *
z
;Ç++, z++){

1481 if–*
z
=='"' ){ 
n
++; }

1483  
n
 + 2;

1484 
	}
}

1499 
	$idítPut
(*
z
, *
pIdx
, *
zSig√dIdít
){

1500 *
zIdít
 = (*)
zSig√dIdít
;

1501 
i
, 
j
, 
√edQuŸe
;

1502 
i
 = *
pIdx
;

1504 
j
=0; 
zIdít
[j]; j++){

1505 if–!
	`sqlôe3Iß um
(
zIdít
[
j
]) && zIdent[j]!='_' ) ;

1507 
√edQuŸe
 = 
	`sqlôe3Isdigô
(
zIdít
[0])

1508 || 
	`sqlôe3Keyw‹dCode
(
zIdít
, 
j
)!=
TK_ID


1509 || 
zIdít
[
j
]!=0

1510 || 
j
==0;

1512 if–
√edQuŸe
 ) 
z
[
i
++] = '"';

1513 
j
=0; 
zIdít
[j]; j++){

1514 
z
[
i
++] = 
zIdít
[
j
];

1515 if–
zIdít
[
j
]=='"' ) 
z
[
i
++] = '"';

1517 if–
√edQuŸe
 ) 
z
[
i
++] = '"';

1518 
z
[
i
] = 0;

1519 *
pIdx
 = 
i
;

1520 
	}
}

1527 *
	$¸óãTabÀStmt
(
sqlôe3
 *
db
, 
TabÀ
 *
p
){

1528 
i
, 
k
, 
n
;

1529 *
zStmt
;

1530 *
zSï
, *
zSï2
, *
zEnd
;

1531 
Cﬁumn
 *
pCﬁ
;

1532 
n
 = 0;

1533 
pCﬁ
 = 
p
->
aCﬁ
, 
i
=0; i<p->
nCﬁ
; i++,ÖCol++){

1534 
n
 +
	`idítLígth
(
pCﬁ
->
zName
) + 5;

1536 
n
 +
	`idítLígth
(
p
->
zName
);

1537 if–
n
<50 ){

1538 
zSï
 = "";

1539 
zSï2
 = ",";

1540 
zEnd
 = ")";

1542 
zSï
 = "\n ";

1543 
zSï2
 = ",\n ";

1544 
zEnd
 = "\n)";

1546 
n
 +35 + 6*
p
->
nCﬁ
;

1547 
zStmt
 = 
	`sqlôe3DbMÆlocRaw
(0, 
n
);

1548 if–
zStmt
==0 ){

1549 
	`sqlôe3OomFau…
(
db
);

1552 
	`sqlôe3_¢¥ötf
(
n
, 
zStmt
, "CREATE TABLE ");

1553 
k
 = 
	`sqlôe3SåÀn30
(
zStmt
);

1554 
	`idítPut
(
zStmt
, &
k
, 
p
->
zName
);

1555 
zStmt
[
k
++] = '(';

1556 
pCﬁ
=
p
->
aCﬁ
, 
i
=0; i<p->
nCﬁ
; i++,ÖCol++){

1557 c⁄° * c⁄° 
azTy≥
[] = {

1564 
Àn
;

1565 c⁄° *
zTy≥
;

1567 
	`sqlôe3_¢¥ötf
(
n
-
k
, &
zStmt
[k], 
zSï
);

1568 
k
 +
	`sqlôe3SåÀn30
(&
zStmt
[k]);

1569 
zSï
 = 
zSï2
;

1570 
	`idítPut
(
zStmt
, &
k
, 
pCﬁ
->
zName
);

1571 
	`as£π
–
pCﬁ
->
afföôy
-
SQLITE_AFF_BLOB
 >= 0 );

1572 
	`as£π
–
pCﬁ
->
afföôy
-
SQLITE_AFF_BLOB
 < 
	`AºaySize
(
azTy≥
) );

1573 
	`ã°ˇ£
–
pCﬁ
->
afföôy
==
SQLITE_AFF_BLOB
 );

1574 
	`ã°ˇ£
–
pCﬁ
->
afföôy
==
SQLITE_AFF_TEXT
 );

1575 
	`ã°ˇ£
–
pCﬁ
->
afföôy
==
SQLITE_AFF_NUMERIC
 );

1576 
	`ã°ˇ£
–
pCﬁ
->
afföôy
==
SQLITE_AFF_INTEGER
 );

1577 
	`ã°ˇ£
–
pCﬁ
->
afföôy
==
SQLITE_AFF_REAL
 );

1579 
zTy≥
 = 
azTy≥
[
pCﬁ
->
afföôy
 - 
SQLITE_AFF_BLOB
];

1580 
Àn
 = 
	`sqlôe3SåÀn30
(
zTy≥
);

1581 
	`as£π
–
pCﬁ
->
afföôy
==
SQLITE_AFF_BLOB


1582 || 
pCﬁ
->
afföôy
==
	`sqlôe3AfföôyTy≥
(
zTy≥
, 0) );

1583 
	`mem˝y
(&
zStmt
[
k
], 
zTy≥
, 
Àn
);

1584 
k
 +
Àn
;

1585 
	`as£π
–
k
<=
n
 );

1587 
	`sqlôe3_¢¥ötf
(
n
-
k
, &
zStmt
[k], "%s", 
zEnd
);

1588  
zStmt
;

1589 
	}
}

1595 
	$ªsizeIndexObje˘
(
sqlôe3
 *
db
, 
Index
 *
pIdx
, 
N
){

1596 *
zExåa
;

1597 
nByã
;

1598 if–
pIdx
->
nCﬁumn
>=
N
 )  
SQLITE_OK
;

1599 
	`as£π
–
pIdx
->
isResized
==0 );

1600 
nByã
 = ((*Ë+ (
i16
Ë+ 1)*
N
;

1601 
zExåa
 = 
	`sqlôe3DbMÆlocZîo
(
db
, 
nByã
);

1602 if–
zExåa
==0 )  
SQLITE_NOMEM_BKPT
;

1603 
	`mem˝y
(
zExåa
, 
pIdx
->
azCﬁl
, (*)*pIdx->
nCﬁumn
);

1604 
pIdx
->
azCﬁl
 = (c⁄° **)
zExåa
;

1605 
zExåa
 +(*)*
N
;

1606 
	`mem˝y
(
zExåa
, 
pIdx
->
aiCﬁumn
, (
i16
)*pIdx->
nCﬁumn
);

1607 
pIdx
->
aiCﬁumn
 = (
i16
*)
zExåa
;

1608 
zExåa
 +(
i16
)*
N
;

1609 
	`mem˝y
(
zExåa
, 
pIdx
->
aS‹tOrdî
,ÖIdx->
nCﬁumn
);

1610 
pIdx
->
aS‹tOrdî
 = (
u8
*)
zExåa
;

1611 
pIdx
->
nCﬁumn
 = 
N
;

1612 
pIdx
->
isResized
 = 1;

1613  
SQLITE_OK
;

1614 
	}
}

1619 
	$e°im©eTabÀWidth
(
TabÀ
 *
pTab
){

1620 
wTabÀ
 = 0;

1621 c⁄° 
Cﬁumn
 *
pTabCﬁ
;

1622 
i
;

1623 
i
=
pTab
->
nCﬁ
, 
pTabCﬁ
ıTab->
aCﬁ
; i>0; i--,ÖTabCol++){

1624 
wTabÀ
 +
pTabCﬁ
->
szE°
;

1626 if–
pTab
->
iPKey
<0 ) 
wTabÀ
++;

1627 
pTab
->
szTabRow
 = 
	`sqlôe3LogE°
(
wTabÀ
*4);

1628 
	}
}

1633 
	$e°im©eIndexWidth
(
Index
 *
pIdx
){

1634 
wIndex
 = 0;

1635 
i
;

1636 c⁄° 
Cﬁumn
 *
aCﬁ
 = 
pIdx
->
pTabÀ
->aCol;

1637 
i
=0; i<
pIdx
->
nCﬁumn
; i++){

1638 
i16
 
x
 = 
pIdx
->
aiCﬁumn
[
i
];

1639 
	`as£π
–
x
<
pIdx
->
pTabÀ
->
nCﬁ
 );

1640 
wIndex
 +
x
<0 ? 1 : 
aCﬁ
[
pIdx
->
aiCﬁumn
[
i
]].
szE°
;

1642 
pIdx
->
szIdxRow
 = 
	`sqlôe3LogE°
(
wIndex
*4);

1643 
	}
}

1647 
	$hasCﬁumn
(c⁄° 
i16
 *
aiCﬁ
, 
nCﬁ
, 
x
){

1648  
nCﬁ
-- > 0 ) if–
x
==*(
aiCﬁ
++) )  1;

1650 
	}
}

1675 
	$c⁄vîtToWôhoutRowidTabÀ
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTab
){

1676 
Index
 *
pIdx
;

1677 
Index
 *
pPk
;

1678 
nPk
;

1679 
i
, 
j
;

1680 
sqlôe3
 *
db
 = 
pP¨£
->db;

1681 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1687 if–
pP¨£
->
addrCrTab
 ){

1688 
	`as£π
–
v
 );

1689 
	`sqlôe3VdbeCh™geOpcode
(
v
, 
pP¨£
->
addrCrTab
, 
OP_Cª©eIndex
);

1695 if–
pTab
->
iPKey
>=0 ){

1696 
Ex¥Li°
 *
pLi°
;

1697 
Tokí
 
ùkTokí
;

1698 
	`sqlôe3TokíInô
(&
ùkTokí
, 
pTab
->
aCﬁ
[pTab->
iPKey
].
zName
);

1699 
pLi°
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
, 0,

1700 
	`sqlôe3Ex¥AŒoc
(
db
, 
TK_ID
, &
ùkTokí
, 0));

1701 if–
pLi°
==0 ) ;

1702 
pLi°
->
a
[0].
s‹tOrdî
 = 
pP¨£
->
iPkS‹tOrdî
;

1703 
	`as£π
–
pP¨£
->
pNewTabÀ
==
pTab
 );

1704 
pPk
 = 
	`sqlôe3Cª©eIndex
(
pP¨£
, 0, 0, 0, 
pLi°
, 
pTab
->
keyC⁄f
, 0, 0, 0, 0);

1705 if–
pPk
==0 ) ;

1706 
pPk
->
idxTy≥
 = 
SQLITE_IDXTYPE_PRIMARYKEY
;

1707 
pTab
->
iPKey
 = -1;

1709 
pPk
 = 
	`sqlôe3Prim¨yKeyIndex
(
pTab
);

1715 if–
v
 ){

1716 
	`as£π
–
db
->
öô
.
busy
==0 );

1717 
	`sqlôe3VdbeCh™geOpcode
(
v
, 
pPk
->
äum
, 
OP_GŸo
);

1725 
i
=
j
=1; i<
pPk
->
nKeyCﬁ
; i++){

1726 if–
	`hasCﬁumn
(
pPk
->
aiCﬁumn
, 
j
,ÖPk->aiCﬁumn[
i
]) ){

1727 
pPk
->
nCﬁumn
--;

1729 
pPk
->
aiCﬁumn
[
j
++] =ÖPk->aiCﬁumn[
i
];

1732 
pPk
->
nKeyCﬁ
 = 
j
;

1734 
pPk
->
isCovîög
 = 1;

1735 
	`as£π
–
pPk
!=0 );

1736 
nPk
 = 
pPk
->
nKeyCﬁ
;

1740 if–!
db
->
öô
.
impo°îTabÀ
 ){

1741 
i
=0; i<
nPk
; i++){

1742 
pTab
->
aCﬁ
[
pPk
->
aiCﬁumn
[
i
]].
nŸNuŒ
 = 
OE_Ab‹t
;

1744 
pPk
->
uniqNŸNuŒ
 = 1;

1748 
pPk
->
äum
 = 
pTab
->tnum;

1753 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

1754 
n
;

1755 if–
	`IsPrim¨yKeyIndex
(
pIdx
) ) ;

1756 
i
=
n
=0; i<
nPk
; i++){

1757 if–!
	`hasCﬁumn
(
pIdx
->
aiCﬁumn
,ÖIdx->
nKeyCﬁ
, 
pPk
->aiCﬁumn[
i
]ËË
n
++;

1759 if–
n
==0 ){

1761 
pIdx
->
nCﬁumn
 =ÖIdx->
nKeyCﬁ
;

1764 if–
	`ªsizeIndexObje˘
(
db
, 
pIdx
,ÖIdx->
nKeyCﬁ
+
n
) ) ;

1765 
i
=0, 
j
=
pIdx
->
nKeyCﬁ
; i<
nPk
; i++){

1766 if–!
	`hasCﬁumn
(
pIdx
->
aiCﬁumn
,ÖIdx->
nKeyCﬁ
, 
pPk
->aiCﬁumn[
i
]) ){

1767 
pIdx
->
aiCﬁumn
[
j
] = 
pPk
->aiCﬁumn[
i
];

1768 
pIdx
->
azCﬁl
[
j
] = 
pPk
->azCﬁl[
i
];

1769 
j
++;

1772 
	`as£π
–
pIdx
->
nCﬁumn
>ıIdx->
nKeyCﬁ
+
n
 );

1773 
	`as£π
–
pIdx
->
nCﬁumn
>=
j
 );

1778 if–
nPk
<
pTab
->
nCﬁ
 ){

1779 if–
	`ªsizeIndexObje˘
(
db
, 
pPk
, 
pTab
->
nCﬁ
) ) ;

1780 
i
=0, 
j
=
nPk
; i<
pTab
->
nCﬁ
; i++){

1781 if–!
	`hasCﬁumn
(
pPk
->
aiCﬁumn
, 
j
, 
i
) ){

1782 
	`as£π
–
j
<
pPk
->
nCﬁumn
 );

1783 
pPk
->
aiCﬁumn
[
j
] = 
i
;

1784 
pPk
->
azCﬁl
[
j
] = 
sqlôe3SåBINARY
;

1785 
j
++;

1788 
	`as£π
–
pPk
->
nCﬁumn
==
j
 );

1789 
	`as£π
–
pTab
->
nCﬁ
==
j
 );

1791 
pPk
->
nCﬁumn
 = 
pTab
->
nCﬁ
;

1793 
	}
}

1815 
	$sqlôe3EndTabÀ
(

1816 
P¨£
 *
pP¨£
,

1817 
Tokí
 *
pC⁄s
,

1818 
Tokí
 *
pEnd
,

1819 
u8
 
èbO±s
,

1820 
Sñe˘
 *
pSñe˘


1822 
TabÀ
 *
p
;

1823 
sqlôe3
 *
db
 = 
pP¨£
->db;

1824 
iDb
;

1825 
Index
 *
pIdx
;

1827 if–
pEnd
==0 && 
pSñe˘
==0 ){

1830 
	`as£π
–!
db
->
mÆlocFaûed
 );

1831 
p
 = 
pP¨£
->
pNewTabÀ
;

1832 if–
p
==0 ) ;

1834 
	`as£π
–!
db
->
öô
.
busy
 || !
pSñe˘
 );

1845 if–
db
->
öô
.
busy
 ){

1846 
p
->
äum
 = 
db
->
öô
.
√wTnum
;

1847 if–
p
->
äum
==1 )Ö->
èbFœgs
 |
TF_Ród⁄ly
;

1851 if–
èbO±s
 & 
TF_WôhoutRowid
 ){

1852 if–(
p
->
èbFœgs
 & 
TF_Autoö¸emít
) ){

1853 
	`sqlôe3Eº‹Msg
(
pP¨£
,

1857 if–(
p
->
èbFœgs
 & 
TF_HasPrim¨yKey
)==0 ){

1858 
	`sqlôe3Eº‹Msg
(
pP¨£
, "PRIMARY KEY missög o¿èbÀ %s", 
p
->
zName
);

1860 
p
->
èbFœgs
 |
TF_WôhoutRowid
 | 
TF_NoVisibÀRowid
;

1861 
	`c⁄vîtToWôhoutRowidTabÀ
(
pP¨£
, 
p
);

1865 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
p
->
pSchema
);

1867 #i‚de‡
SQLITE_OMIT_CHECK


1870 if–
p
->
pCheck
 ){

1871 
	`sqlôe3ResﬁveSñfRe„ªn˚
(
pP¨£
, 
p
, 
NC_IsCheck
, 0,Ö->
pCheck
);

1876 
	`e°im©eTabÀWidth
(
p
);

1877 
pIdx
=
p
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

1878 
	`e°im©eIndexWidth
(
pIdx
);

1887 if–!
db
->
öô
.
busy
 ){

1888 
n
;

1889 
Vdbe
 *
v
;

1890 *
zTy≥
;

1891 *
zTy≥2
;

1892 *
zStmt
;

1894 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1895 if–
	`NEVER
(
v
==0) ) ;

1897 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Clo£
, 0);

1902 if–
p
->
pSñe˘
==0 ){

1904 
zTy≥
 = "table";

1905 
zTy≥2
 = "TABLE";

1906 #i‚de‡
SQLITE_OMIT_VIEW


1909 
zTy≥
 = "view";

1910 
zTy≥2
 = "VIEW";

1927 if–
pSñe˘
 ){

1928 
Sñe˘De°
 
de°
;

1929 
ªgYõld
;

1930 
addrT›
;

1931 
ªgRec
;

1932 
ªgRowid
;

1933 
addrInsLo›
;

1934 
TabÀ
 *
pSñTab
;

1936 
ªgYõld
 = ++
pP¨£
->
nMem
;

1937 
ªgRec
 = ++
pP¨£
->
nMem
;

1938 
ªgRowid
 = ++
pP¨£
->
nMem
;

1939 
	`as£π
(
pP¨£
->
nTab
==1);

1940 
	`sqlôe3MayAb‹t
(
pP¨£
);

1941 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_O≥nWrôe
, 1, 
pP¨£
->
ªgRoŸ
, 
iDb
);

1942 
	`sqlôe3VdbeCh™geP5
(
v
, 
OPFLAG_P2ISREG
);

1943 
pP¨£
->
nTab
 = 2;

1944 
addrT›
 = 
	`sqlôe3VdbeCuºítAddr
(
v
) + 1;

1945 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_InôC‹outöe
, 
ªgYõld
, 0, 
addrT›
);

1946 
	`sqlôe3Sñe˘De°Inô
(&
de°
, 
SRT_C‹outöe
, 
ªgYõld
);

1947 
	`sqlôe3Sñe˘
(
pP¨£
, 
pSñe˘
, &
de°
);

1948 
	`sqlôe3VdbeEndC‹outöe
(
v
, 
ªgYõld
);

1949 
	`sqlôe3VdbeJumpHîe
(
v
, 
addrT›
 - 1);

1950 if–
pP¨£
->
nEº
 ) ;

1951 
pSñTab
 = 
	`sqlôe3Resu…SëOfSñe˘
(
pP¨£
, 
pSñe˘
);

1952 if–
pSñTab
==0 ) ;

1953 
	`as£π
–
p
->
aCﬁ
==0 );

1954 
p
->
nCﬁ
 = 
pSñTab
->nCol;

1955 
p
->
aCﬁ
 = 
pSñTab
->aCol;

1956 
pSñTab
->
nCﬁ
 = 0;

1957 
pSñTab
->
aCﬁ
 = 0;

1958 
	`sqlôe3DñëeTabÀ
(
db
, 
pSñTab
);

1959 
addrInsLo›
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Yõld
, 
de°
.
iSDP¨m
);

1960 
	`VdbeCovîage
(
v
);

1961 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_MakeRec‹d
, 
de°
.
iSd°
, de°.
nSd°
, 
ªgRec
);

1962 
	`sqlôe3TabÀAfföôy
(
v
, 
p
, 0);

1963 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NewRowid
, 1, 
ªgRowid
);

1964 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_In£π
, 1, 
ªgRec
, 
ªgRowid
);

1965 
	`sqlôe3VdbeGŸo
(
v
, 
addrInsLo›
);

1966 
	`sqlôe3VdbeJumpHîe
(
v
, 
addrInsLo›
);

1967 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Clo£
, 1);

1971 if–
pSñe˘
 ){

1972 
zStmt
 = 
	`¸óãTabÀStmt
(
db
, 
p
);

1974 
Tokí
 *
pEnd2
 = 
èbO±s
 ? &
pP¨£
->
sLa°Tokí
 : 
pEnd
;

1975 
n
 = ()(
pEnd2
->
z
 - 
pP¨£
->
sNameTokí
.z);

1976 if–
pEnd2
->
z
[0]!=';' ) 
n
 +=ÖEnd2->n;

1977 
zStmt
 = 
	`sqlôe3MPrötf
(
db
,

1978 "CREATE %†%.*s", 
zTy≥2
, 
n
, 
pP¨£
->
sNameTokí
.
z


1986 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

1990 
db
->
aDb
[
iDb
].
zName
, 
	`SCHEMA_TABLE
(iDb),

1991 
zTy≥
,

1992 
p
->
zName
,

1993 
p
->
zName
,

1994 
pP¨£
->
ªgRoŸ
,

1995 
zStmt
,

1996 
pP¨£
->
ªgRowid


1998 
	`sqlôe3DbFªe
(
db
, 
zStmt
);

1999 
	`sqlôe3Ch™geCookõ
(
pP¨£
, 
iDb
);

2001 #i‚de‡
SQLITE_OMIT_AUTOINCREMENT


2005 if–
p
->
èbFœgs
 & 
TF_Autoö¸emít
 ){

2006 
Db
 *
pDb
 = &
db
->
aDb
[
iDb
];

2007 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

2008 if–
pDb
->
pSchema
->
pSeqTab
==0 ){

2009 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

2011 
pDb
->
zName


2018 
	`sqlôe3VdbeAddP¨£SchemaOp
(
v
, 
iDb
,

2019 
	`sqlôe3MPrötf
(
db
, "tbl_«me='%q' ANDÅy≥!='åiggî'", 
p
->
zName
));

2025 if–
db
->
öô
.
busy
 ){

2026 
TabÀ
 *
pOld
;

2027 
Schema
 *
pSchema
 = 
p
->pSchema;

2028 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

2029 
pOld
 = 
	`sqlôe3HashIn£π
(&
pSchema
->
tblHash
, 
p
->
zName
,Ö);

2030 if–
pOld
 ){

2031 
	`as£π
–
p
==
pOld
 );

2032 
	`sqlôe3OomFau…
(
db
);

2035 
pP¨£
->
pNewTabÀ
 = 0;

2036 
db
->
Êags
 |
SQLITE_I¡înCh™ges
;

2038 #i‚de‡
SQLITE_OMIT_ALTERTABLE


2039 if–!
p
->
pSñe˘
 ){

2040 c⁄° *
zName
 = (c⁄° *)
pP¨£
->
sNameTokí
.
z
;

2041 
nName
;

2042 
	`as£π
–!
pSñe˘
 && 
pC⁄s
 && 
pEnd
 );

2043 if–
pC⁄s
->
z
==0 ){

2044 
pC⁄s
 = 
pEnd
;

2046 
nName
 = ()((c⁄° *)
pC⁄s
->
z
 - 
zName
);

2047 
p
->
addCﬁOff£t
 = 13 + 
	`sqlôe3Utf8Ch¨Lí
(
zName
, 
nName
);

2051 
	}
}

2053 #i‚de‡
SQLITE_OMIT_VIEW


2057 
	$sqlôe3Cª©eVõw
(

2058 
P¨£
 *
pP¨£
,

2059 
Tokí
 *
pBegö
,

2060 
Tokí
 *
pName1
,

2061 
Tokí
 *
pName2
,

2062 
Ex¥Li°
 *
pCNames
,

2063 
Sñe˘
 *
pSñe˘
,

2064 
isTemp
,

2065 
noEº


2067 
TabÀ
 *
p
;

2068 
n
;

2069 c⁄° *
z
;

2070 
Tokí
 
sEnd
;

2071 
DbFixî
 
sFix
;

2072 
Tokí
 *
pName
 = 0;

2073 
iDb
;

2074 
sqlôe3
 *
db
 = 
pP¨£
->db;

2076 if–
pP¨£
->
nV¨
>0 ){

2077 
	`sqlôe3Eº‹Msg
(
pP¨£
, "parametersáreÇotállowed in views");

2078 
¸óã_võw_Áû
;

2080 
	`sqlôe3SèπTabÀ
(
pP¨£
, 
pName1
, 
pName2
, 
isTemp
, 1, 0, 
noEº
);

2081 
p
 = 
pP¨£
->
pNewTabÀ
;

2082 if–
p
==0 || 
pP¨£
->
nEº
 ) 
¸óã_võw_Áû
;

2083 
	`sqlôe3TwoP¨tName
(
pP¨£
, 
pName1
, 
pName2
, &
pName
);

2084 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
p
->
pSchema
);

2085 
	`sqlôe3FixInô
(&
sFix
, 
pP¨£
, 
iDb
, "võw", 
pName
);

2086 if–
	`sqlôe3FixSñe˘
(&
sFix
, 
pSñe˘
ËË
¸óã_võw_Áû
;

2093 
p
->
pSñe˘
 = 
	`sqlôe3Sñe˘Dup
(
db
,ÖSñe˘, 
EXPRDUP_REDUCE
);

2094 
p
->
pCheck
 = 
	`sqlôe3Ex¥Li°Dup
(
db
, 
pCNames
, 
EXPRDUP_REDUCE
);

2095 if–
db
->
mÆlocFaûed
 ) 
¸óã_võw_Áû
;

2100 
sEnd
 = 
pP¨£
->
sLa°Tokí
;

2101 
	`as£π
–
sEnd
.
z
[0]!=0 );

2102 if–
sEnd
.
z
[0]!=';' ){

2103 
sEnd
.
z
 +sEnd.
n
;

2105 
sEnd
.
n
 = 0;

2106 
n
 = ()(
sEnd
.
z
 - 
pBegö
->z);

2107 
	`as£π
–
n
>0 );

2108 
z
 = 
pBegö
->z;

2109  
	`sqlôe3Is•a˚
(
z
[
n
-1]) ){Ç--; }

2110 
sEnd
.
z
 = &z[
n
-1];

2111 
sEnd
.
n
 = 1;

2114 
	`sqlôe3EndTabÀ
(
pP¨£
, 0, &
sEnd
, 0, 0);

2116 
¸óã_võw_Áû
:

2117 
	`sqlôe3Sñe˘Dñëe
(
db
, 
pSñe˘
);

2118 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
pCNames
);

2120 
	}
}

2123 #i‡!
deföed
(
SQLITE_OMIT_VIEW
Ë|| !deföed(
SQLITE_OMIT_VIRTUALTABLE
)

2129 
	$sqlôe3VõwGëCﬁumnNames
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTabÀ
){

2130 
TabÀ
 *
pSñTab
;

2131 
Sñe˘
 *
pSñ
;

2132 
nEº
 = 0;

2133 
n
;

2134 
sqlôe3
 *
db
 = 
pP¨£
->db;

2135 
sqlôe3_xauth
 
xAuth
;

2137 
	`as£π
–
pTabÀ
 );

2139 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


2140 if–
	`sqlôe3VèbCÆlC⁄√˘
(
pP¨£
, 
pTabÀ
) ){

2141  
SQLITE_ERROR
;

2143 if–
	`IsVútuÆ
(
pTabÀ
) )  0;

2146 #i‚de‡
SQLITE_OMIT_VIEW


2150 if–
pTabÀ
->
nCﬁ
>0 )  0;

2167 if–
pTabÀ
->
nCﬁ
<0 ){

2168 
	`sqlôe3Eº‹Msg
(
pP¨£
, "võw %†i†cúcuœæy deföed", 
pTabÀ
->
zName
);

2171 
	`as£π
–
pTabÀ
->
nCﬁ
>=0 );

2180 
	`as£π
–
pTabÀ
->
pSñe˘
 );

2181 
pSñ
 = 
	`sqlôe3Sñe˘Dup
(
db
, 
pTabÀ
->
pSñe˘
, 0);

2182 if–
pSñ
 ){

2183 
n
 = 
pP¨£
->
nTab
;

2184 
	`sqlôe3SrcLi°AssignCurs‹s
(
pP¨£
, 
pSñ
->
pSrc
);

2185 
pTabÀ
->
nCﬁ
 = -1;

2186 
db
->
lookaside
.
bDißbÀ
++;

2187 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


2188 
xAuth
 = 
db
->xAuth;

2189 
db
->
xAuth
 = 0;

2190 
pSñTab
 = 
	`sqlôe3Resu…SëOfSñe˘
(
pP¨£
, 
pSñ
);

2191 
db
->
xAuth
 = xAuth;

2193 
pSñTab
 = 
	`sqlôe3Resu…SëOfSñe˘
(
pP¨£
, 
pSñ
);

2195 
pP¨£
->
nTab
 = 
n
;

2196 if–
pTabÀ
->
pCheck
 ){

2203 
	`sqlôe3CﬁumnsFromEx¥Li°
(
pP¨£
, 
pTabÀ
->
pCheck
,

2204 &
pTabÀ
->
nCﬁ
, &pTabÀ->
aCﬁ
);

2205 if–
db
->
mÆlocFaûed
==0

2206 && 
pP¨£
->
nEº
==0

2207 && 
pTabÀ
->
nCﬁ
==
pSñ
->
pELi°
->
nEx¥


2209 
	`sqlôe3Sñe˘AddCﬁumnTy≥AndCﬁœti⁄
(
pP¨£
, 
pTabÀ
, 
pSñ
);

2211 }if–
pSñTab
 ){

2215 
	`as£π
–
pTabÀ
->
aCﬁ
==0 );

2216 
pTabÀ
->
nCﬁ
 = 
pSñTab
->nCol;

2217 
pTabÀ
->
aCﬁ
 = 
pSñTab
->aCol;

2218 
pSñTab
->
nCﬁ
 = 0;

2219 
pSñTab
->
aCﬁ
 = 0;

2220 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 0, 
pTabÀ
->
pSchema
) );

2222 
pTabÀ
->
nCﬁ
 = 0;

2223 
nEº
++;

2225 
	`sqlôe3DñëeTabÀ
(
db
, 
pSñTab
);

2226 
	`sqlôe3Sñe˘Dñëe
(
db
, 
pSñ
);

2227 
db
->
lookaside
.
bDißbÀ
--;

2229 
nEº
++;

2231 
pTabÀ
->
pSchema
->
schemaFœgs
 |
DB_Uƒe£tVõws
;

2233  
nEº
;

2234 
	}
}

2237 #i‚de‡
SQLITE_OMIT_VIEW


2241 
	$sqlôeVõwRe£tAŒ
(
sqlôe3
 *
db
, 
idx
){

2242 
HashEÀm
 *
i
;

2243 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
idx
, 0) );

2244 if–!
	`DbHasPr›îty
(
db
, 
idx
, 
DB_Uƒe£tVõws
) ) ;

2245 
i
=
	`sqlôeHashFú°
(&
db
->
aDb
[
idx
].
pSchema
->
tblHash
); i;i=
	`sqlôeHashNext
(i)){

2246 
TabÀ
 *
pTab
 = 
	`sqlôeHashD©a
(
i
);

2247 if–
pTab
->
pSñe˘
 ){

2248 
	`sqlôe3DñëeCﬁumnNames
(
db
, 
pTab
);

2249 
pTab
->
aCﬁ
 = 0;

2250 
pTab
->
nCﬁ
 = 0;

2253 
	`DbCÀ¨Pr›îty
(
db
, 
idx
, 
DB_Uƒe£tVõws
);

2254 
	}
}

2256 
	#sqlôeVõwRe£tAŒ
(
A
,
B
)

	)

2276 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


2277 
	$sqlôe3RoŸPageMoved
(
sqlôe3
 *
db
, 
iDb
, 
iFrom
, 
iTo
){

2278 
HashEÀm
 *
pEÀm
;

2279 
Hash
 *
pHash
;

2280 
Db
 *
pDb
;

2282 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

2283 
pDb
 = &
db
->
aDb
[
iDb
];

2284 
pHash
 = &
pDb
->
pSchema
->
tblHash
;

2285 
pEÀm
=
	`sqlôeHashFú°
(
pHash
);ÖEÀm;ÖEÀm=
	`sqlôeHashNext
(pElem)){

2286 
TabÀ
 *
pTab
 = 
	`sqlôeHashD©a
(
pEÀm
);

2287 if–
pTab
->
äum
==
iFrom
 ){

2288 
pTab
->
äum
 = 
iTo
;

2291 
pHash
 = &
pDb
->
pSchema
->
idxHash
;

2292 
pEÀm
=
	`sqlôeHashFú°
(
pHash
);ÖEÀm;ÖEÀm=
	`sqlôeHashNext
(pElem)){

2293 
Index
 *
pIdx
 = 
	`sqlôeHashD©a
(
pEÀm
);

2294 if–
pIdx
->
äum
==
iFrom
 ){

2295 
pIdx
->
äum
 = 
iTo
;

2298 
	}
}

2307 
	$de°royRoŸPage
(
P¨£
 *
pP¨£
, 
iTabÀ
, 
iDb
){

2308 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

2309 
r1
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

2310 
	`as£π
–
iTabÀ
>1 );

2311 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_De°roy
, 
iTabÀ
, 
r1
, 
iDb
);

2312 
	`sqlôe3MayAb‹t
(
pP¨£
);

2313 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


2323 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

2325 
pP¨£
->
db
->
aDb
[
iDb
].
zName
, 
	`SCHEMA_TABLE
(iDb), 
iTabÀ
, 
r1
,Ñ1);

2327 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
r1
);

2328 
	}
}

2336 
	$de°royTabÀ
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTab
){

2337 #ifde‡
SQLITE_OMIT_AUTOVACUUM


2338 
Index
 *
pIdx
;

2339 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTab
->
pSchema
);

2340 
	`de°royRoŸPage
(
pP¨£
, 
pTab
->
äum
, 
iDb
);

2341 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

2342 
	`de°royRoŸPage
(
pP¨£
, 
pIdx
->
äum
, 
iDb
);

2361 
iTab
 = 
pTab
->
äum
;

2362 
iDe°royed
 = 0;

2365 
Index
 *
pIdx
;

2366 
iL¨ge°
 = 0;

2368 if–
iDe°royed
==0 || 
iTab
<iDestroyed ){

2369 
iL¨ge°
 = 
iTab
;

2371 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

2372 
iIdx
 = 
pIdx
->
äum
;

2373 
	`as£π
–
pIdx
->
pSchema
==
pTab
->pSchema );

2374 if–(
iDe°royed
==0 || (
iIdx
<iDe°royed)Ë&& iIdx>
iL¨ge°
 ){

2375 
iL¨ge°
 = 
iIdx
;

2378 if–
iL¨ge°
==0 ){

2381 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTab
->
pSchema
);

2382 
	`as£π
–
iDb
>=0 && iDb<
pP¨£
->
db
->
nDb
 );

2383 
	`de°royRoŸPage
(
pP¨£
, 
iL¨ge°
, 
iDb
);

2384 
iDe°royed
 = 
iL¨ge°
;

2388 
	}
}

2394 
	$sqlôe3CÀ¨SètTabÀs
(

2395 
P¨£
 *
pP¨£
,

2396 
iDb
,

2397 c⁄° *
zTy≥
,

2398 c⁄° *
zName


2400 
i
;

2401 c⁄° *
zDbName
 = 
pP¨£
->
db
->
aDb
[
iDb
].
zName
;

2402 
i
=1; i<=4; i++){

2403 
zTab
[24];

2404 
	`sqlôe3_¢¥ötf
((
zTab
),zTab,"sqlôe_°©%d",
i
);

2405 if–
	`sqlôe3FödTabÀ
(
pP¨£
->
db
, 
zTab
, 
zDbName
) ){

2406 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

2408 
zDbName
, 
zTab
, 
zTy≥
, 
zName


2412 
	}
}

2417 
	$sqlôe3CodeDr›TabÀ
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTab
, 
iDb
, 
isVõw
){

2418 
Vdbe
 *
v
;

2419 
sqlôe3
 *
db
 = 
pP¨£
->db;

2420 
Triggî
 *
pTriggî
;

2421 
Db
 *
pDb
 = &
db
->
aDb
[
iDb
];

2423 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

2424 
	`as£π
–
v
!=0 );

2425 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 1, 
iDb
);

2427 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


2428 if–
	`IsVútuÆ
(
pTab
) ){

2429 
	`sqlôe3VdbeAddOp0
(
v
, 
OP_VBegö
);

2437 
pTriggî
 = 
	`sqlôe3TriggîLi°
(
pP¨£
, 
pTab
);

2438  
pTriggî
 ){

2439 
	`as£π
–
pTriggî
->
pSchema
==
pTab
->pSchema ||

2440 
pTriggî
->
pSchema
==
db
->
aDb
[1].pSchema );

2441 
	`sqlôe3Dr›TriggîPå
(
pP¨£
, 
pTriggî
);

2442 
pTriggî
 =ÖTriggî->
pNext
;

2445 #i‚de‡
SQLITE_OMIT_AUTOINCREMENT


2451 if–
pTab
->
èbFœgs
 & 
TF_Autoö¸emít
 ){

2452 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

2454 
pDb
->
zName
, 
pTab
->zName

2466 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

2468 
pDb
->
zName
, 
	`SCHEMA_TABLE
(
iDb
), 
pTab
->zName);

2469 if–!
isVõw
 && !
	`IsVútuÆ
(
pTab
) ){

2470 
	`de°royTabÀ
(
pP¨£
, 
pTab
);

2476 if–
	`IsVútuÆ
(
pTab
) ){

2477 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_VDe°roy
, 
iDb
, 0, 0, 
pTab
->
zName
, 0);

2479 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Dr›TabÀ
, 
iDb
, 0, 0, 
pTab
->
zName
, 0);

2480 
	`sqlôe3Ch™geCookõ
(
pP¨£
, 
iDb
);

2481 
	`sqlôeVõwRe£tAŒ
(
db
, 
iDb
);

2482 
	}
}

2488 
	$sqlôe3Dr›TabÀ
(
P¨£
 *
pP¨£
, 
SrcLi°
 *
pName
, 
isVõw
, 
noEº
){

2489 
TabÀ
 *
pTab
;

2490 
Vdbe
 *
v
;

2491 
sqlôe3
 *
db
 = 
pP¨£
->db;

2492 
iDb
;

2494 if–
db
->
mÆlocFaûed
 ){

2495 
exô_dr›_èbÀ
;

2497 
	`as£π
–
pP¨£
->
nEº
==0 );

2498 
	`as£π
–
pName
->
nSrc
==1 );

2499 if–
	`sqlôe3RódSchema
(
pP¨£
ËË
exô_dr›_èbÀ
;

2500 if–
noEº
 ) 
db
->
suµªssEº
++;

2501 
pTab
 = 
	`sqlôe3LoˇãTabÀIãm
(
pP¨£
, 
isVõw
, &
pName
->
a
[0]);

2502 if–
noEº
 ) 
db
->
suµªssEº
--;

2504 if–
pTab
==0 ){

2505 if–
noEº
 ) 
	`sqlôe3CodeVîifyNamedSchema
(
pP¨£
, 
pName
->
a
[0].
zD©aba£
);

2506 
exô_dr›_èbÀ
;

2508 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pTab
->
pSchema
);

2509 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

2514 if–
	`IsVútuÆ
(
pTab
Ë&& 
	`sqlôe3VõwGëCﬁumnNames
(
pP¨£
,ÖTab) ){

2515 
exô_dr›_èbÀ
;

2517 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


2519 
code
;

2520 c⁄° *
zTab
 = 
	`SCHEMA_TABLE
(
iDb
);

2521 c⁄° *
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

2522 c⁄° *
zArg2
 = 0;

2523 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_DELETE
, 
zTab
, 0, 
zDb
)){

2524 
exô_dr›_èbÀ
;

2526 if–
isVõw
 ){

2527 if–!
OMIT_TEMPDB
 && 
iDb
==1 ){

2528 
code
 = 
SQLITE_DROP_TEMP_VIEW
;

2530 
code
 = 
SQLITE_DROP_VIEW
;

2532 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


2533 }if–
	`IsVútuÆ
(
pTab
) ){

2534 
code
 = 
SQLITE_DROP_VTABLE
;

2535 
zArg2
 = 
	`sqlôe3GëVTabÀ
(
db
, 
pTab
)->
pMod
->
zName
;

2538 if–!
OMIT_TEMPDB
 && 
iDb
==1 ){

2539 
code
 = 
SQLITE_DROP_TEMP_TABLE
;

2541 
code
 = 
SQLITE_DROP_TABLE
;

2544 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
code
, 
pTab
->
zName
, 
zArg2
, 
zDb
) ){

2545 
exô_dr›_èbÀ
;

2547 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_DELETE
, 
pTab
->
zName
, 0, 
zDb
) ){

2548 
exô_dr›_èbÀ
;

2552 if–
	`sqlôe3SåNICmp
(
pTab
->
zName
, "sqlite_", 7)==0

2553 && 
	`sqlôe3SåNICmp
(
pTab
->
zName
, "sqlite_stat", 11)!=0 ){

2554 
	`sqlôe3Eº‹Msg
(
pP¨£
, "èbÀ %†mayÇŸ bêdr›≥d", 
pTab
->
zName
);

2555 
exô_dr›_èbÀ
;

2558 #i‚de‡
SQLITE_OMIT_VIEW


2562 if–
isVõw
 && 
pTab
->
pSñe˘
==0 ){

2563 
	`sqlôe3Eº‹Msg
(
pP¨£
, "u£ DROP TABLEÅÿdñëêèbÀ %s", 
pTab
->
zName
);

2564 
exô_dr›_èbÀ
;

2566 if–!
isVõw
 && 
pTab
->
pSñe˘
 ){

2567 
	`sqlôe3Eº‹Msg
(
pP¨£
, "u£ DROP VIEWÅÿdñëêvõw %s", 
pTab
->
zName
);

2568 
exô_dr›_èbÀ
;

2575 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

2576 if–
v
 ){

2577 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 1, 
iDb
);

2578 
	`sqlôe3CÀ¨SètTabÀs
(
pP¨£
, 
iDb
, "tbl", 
pTab
->
zName
);

2579 
	`sqlôe3FkDr›TabÀ
(
pP¨£
, 
pName
, 
pTab
);

2580 
	`sqlôe3CodeDr›TabÀ
(
pP¨£
, 
pTab
, 
iDb
, 
isVõw
);

2583 
exô_dr›_èbÀ
:

2584 
	`sqlôe3SrcLi°Dñëe
(
db
, 
pName
);

2585 
	}
}

2603 
	$sqlôe3Cª©eF‹eignKey
(

2604 
P¨£
 *
pP¨£
,

2605 
Ex¥Li°
 *
pFromCﬁ
,

2606 
Tokí
 *
pTo
,

2607 
Ex¥Li°
 *
pToCﬁ
,

2608 
Êags


2610 
sqlôe3
 *
db
 = 
pP¨£
->db;

2611 #i‚de‡
SQLITE_OMIT_FOREIGN_KEY


2612 
FKey
 *
pFKey
 = 0;

2613 
FKey
 *
pNextTo
;

2614 
TabÀ
 *
p
 = 
pP¨£
->
pNewTabÀ
;

2615 
nByã
;

2616 
i
;

2617 
nCﬁ
;

2618 *
z
;

2620 
	`as£π
–
pTo
!=0 );

2621 if–
p
==0 || 
IN_DECLARE_VTAB
 ) 
fk_íd
;

2622 if–
pFromCﬁ
==0 ){

2623 
iCﬁ
 = 
p
->
nCﬁ
-1;

2624 if–
	`NEVER
(
iCﬁ
<0ËË
fk_íd
;

2625 if–
pToCﬁ
 &&ÖToCﬁ->
nEx¥
!=1 ){

2626 
	`sqlôe3Eº‹Msg
(
pP¨£
, "foreign key on %s"

2628 
p
->
aCﬁ
[
iCﬁ
].
zName
, 
pTo
);

2629 
fk_íd
;

2631 
nCﬁ
 = 1;

2632 }if–
pToCﬁ
 &&ÖToCﬁ->
nEx¥
!=
pFromCﬁ
->nExpr ){

2633 
	`sqlôe3Eº‹Msg
(
pP¨£
,

2636 
fk_íd
;

2638 
nCﬁ
 = 
pFromCﬁ
->
nEx¥
;

2640 
nByã
 = (*
pFKey
Ë+ (
nCﬁ
-1)*’FKey->
aCﬁ
[0]Ë+ 
pTo
->
n
 + 1;

2641 if–
pToCﬁ
 ){

2642 
i
=0; i<
pToCﬁ
->
nEx¥
; i++){

2643 
nByã
 +
	`sqlôe3SåÀn30
(
pToCﬁ
->
a
[
i
].
zName
) + 1;

2646 
pFKey
 = 
	`sqlôe3DbMÆlocZîo
(
db
, 
nByã
 );

2647 if–
pFKey
==0 ){

2648 
fk_íd
;

2650 
pFKey
->
pFrom
 = 
p
;

2651 
pFKey
->
pNextFrom
 = 
p
->pFKey;

2652 
z
 = (*)&
pFKey
->
aCﬁ
[
nCﬁ
];

2653 
pFKey
->
zTo
 = 
z
;

2654 
	`mem˝y
(
z
, 
pTo
->z,ÖTo->
n
);

2655 
z
[
pTo
->
n
] = 0;

2656 
	`sqlôe3DequŸe
(
z
);

2657 
z
 +
pTo
->
n
+1;

2658 
pFKey
->
nCﬁ
 =ÇCol;

2659 if–
pFromCﬁ
==0 ){

2660 
pFKey
->
aCﬁ
[0].
iFrom
 = 
p
->
nCﬁ
-1;

2662 
i
=0; i<
nCﬁ
; i++){

2663 
j
;

2664 
j
=0; j<
p
->
nCﬁ
; j++){

2665 if–
	`sqlôe3SåICmp
(
p
->
aCﬁ
[
j
].
zName
, 
pFromCﬁ
->
a
[
i
].zName)==0 ){

2666 
pFKey
->
aCﬁ
[
i
].
iFrom
 = 
j
;

2670 if–
j
>=
p
->
nCﬁ
 ){

2671 
	`sqlôe3Eº‹Msg
(
pP¨£
,

2673 
pFromCﬁ
->
a
[
i
].
zName
);

2674 
fk_íd
;

2678 if–
pToCﬁ
 ){

2679 
i
=0; i<
nCﬁ
; i++){

2680 
n
 = 
	`sqlôe3SåÀn30
(
pToCﬁ
->
a
[
i
].
zName
);

2681 
pFKey
->
aCﬁ
[
i
].
zCﬁ
 = 
z
;

2682 
	`mem˝y
(
z
, 
pToCﬁ
->
a
[
i
].
zName
, 
n
);

2683 
z
[
n
] = 0;

2684 
z
 +
n
+1;

2687 
pFKey
->
isDe„ºed
 = 0;

2688 
pFKey
->
aA˘i⁄
[0] = (
u8
)(
Êags
 & 0xff);

2689 
pFKey
->
aA˘i⁄
[1] = (
u8
)((
Êags
 >> 8 ) & 0xff);

2691 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 0, 
p
->
pSchema
) );

2692 
pNextTo
 = (
FKey
 *)
	`sqlôe3HashIn£π
(&
p
->
pSchema
->
fkeyHash
,

2693 
pFKey
->
zTo
, (*)pFKey

2695 if–
pNextTo
==
pFKey
 ){

2696 
	`sqlôe3OomFau…
(
db
);

2697 
fk_íd
;

2699 if–
pNextTo
 ){

2700 
	`as£π
–
pNextTo
->
pPªvTo
==0 );

2701 
pFKey
->
pNextTo
 =ÖNextTo;

2702 
pNextTo
->
pPªvTo
 = 
pFKey
;

2707 
p
->
pFKey
 =ÖFKey;

2708 
pFKey
 = 0;

2710 
fk_íd
:

2711 
	`sqlôe3DbFªe
(
db
, 
pFKey
);

2713 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
pFromCﬁ
);

2714 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
pToCﬁ
);

2715 
	}
}

2724 
	$sqlôe3De„rF‹eignKey
(
P¨£
 *
pP¨£
, 
isDe„ºed
){

2725 #i‚de‡
SQLITE_OMIT_FOREIGN_KEY


2726 
TabÀ
 *
pTab
;

2727 
FKey
 *
pFKey
;

2728 if–(
pTab
 = 
pP¨£
->
pNewTabÀ
)==0 || (
pFKey
 =ÖTab->pFKey)==0 ) ;

2729 
	`as£π
–
isDe„ºed
==0 || isDeferred==1 );

2730 
pFKey
->
isDe„ºed
 = (
u8
)isDeferred;

2732 
	}
}

2745 
	$sqlôe3RefûlIndex
(
P¨£
 *
pP¨£
, 
Index
 *
pIndex
, 
memRoŸPage
){

2746 
TabÀ
 *
pTab
 = 
pIndex
->
pTabÀ
;

2747 
iTab
 = 
pP¨£
->
nTab
++;

2748 
iIdx
 = 
pP¨£
->
nTab
++;

2749 
iS‹ãr
;

2750 
addr1
;

2751 
addr2
;

2752 
äum
;

2753 
iP¨tIdxLabñ
;

2754 
Vdbe
 *
v
;

2755 
KeyInfo
 *
pKey
;

2756 
ªgRec‹d
;

2757 
sqlôe3
 *
db
 = 
pP¨£
->db;

2758 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pIndex
->
pSchema
);

2760 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


2761 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_REINDEX
, 
pIndex
->
zName
, 0,

2762 
db
->
aDb
[
iDb
].
zName
 ) ){

2768 
	`sqlôe3TabÀLock
(
pP¨£
, 
iDb
, 
pTab
->
äum
, 1,ÖTab->
zName
);

2770 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

2771 if–
v
==0 ) ;

2772 if–
memRoŸPage
>=0 ){

2773 
äum
 = 
memRoŸPage
;

2775 
äum
 = 
pIndex
->tnum;

2777 
pKey
 = 
	`sqlôe3KeyInfoOfIndex
(
pP¨£
, 
pIndex
);

2778 
	`as£π
–
pKey
!=0 || 
db
->
mÆlocFaûed
 || 
pP¨£
->
nEº
 );

2781 
iS‹ãr
 = 
pP¨£
->
nTab
++;

2782 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_S‹ãrO≥n
, 
iS‹ãr
, 0, 
pIndex
->
nKeyCﬁ
, (*)

2783 
	`sqlôe3KeyInfoRef
(
pKey
), 
P4_KEYINFO
);

2787 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 
iTab
, 
iDb
, 
pTab
, 
OP_O≥nRód
);

2788 
addr1
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Rewöd
, 
iTab
, 0); 
	`VdbeCovîage
(v);

2789 
ªgRec‹d
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

2791 
	`sqlôe3Gíî©eIndexKey
(
pP¨£
,
pIndex
,
iTab
,
ªgRec‹d
,0,&
iP¨tIdxLabñ
,0,0);

2792 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_S‹ãrIn£π
, 
iS‹ãr
, 
ªgRec‹d
);

2793 
	`sqlôe3ResﬁveP¨tIdxLabñ
(
pP¨£
, 
iP¨tIdxLabñ
);

2794 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Next
, 
iTab
, 
addr1
+1); 
	`VdbeCovîage
(v);

2795 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr1
);

2796 if–
memRoŸPage
<0 ) 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_CÀ¨
, 
äum
, 
iDb
);

2797 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_O≥nWrôe
, 
iIdx
, 
äum
, 
iDb
,

2798 (*)
pKey
, 
P4_KEYINFO
);

2799 
	`sqlôe3VdbeCh™geP5
(
v
, 
OPFLAG_BULKCSR
|((
memRoŸPage
>=0)?
OPFLAG_P2ISREG
:0));

2801 
addr1
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_S‹ãrS‹t
, 
iS‹ãr
, 0); 
	`VdbeCovîage
(v);

2802 if–
	`IsUniqueIndex
(
pIndex
) ){

2803 
j2
 = 
	`sqlôe3VdbeCuºítAddr
(
v
) + 3;

2804 
	`sqlôe3VdbeGŸo
(
v
, 
j2
);

2805 
addr2
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

2806 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_S‹ãrCom∑ª
, 
iS‹ãr
, 
j2
, 
ªgRec‹d
,

2807 
pIndex
->
nKeyCﬁ
); 
	`VdbeCovîage
(
v
);

2808 
	`sqlôe3UniqueC⁄°øöt
(
pP¨£
, 
OE_Ab‹t
, 
pIndex
);

2810 
addr2
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

2812 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_S‹ãrD©a
, 
iS‹ãr
, 
ªgRec‹d
, 
iIdx
);

2813 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_La°
, 
iIdx
, 0, -1);

2814 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_IdxIn£π
, 
iIdx
, 
ªgRec‹d
, 0);

2815 
	`sqlôe3VdbeCh™geP5
(
v
, 
OPFLAG_USESEEKRESULT
);

2816 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgRec‹d
);

2817 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_S‹ãrNext
, 
iS‹ãr
, 
addr2
); 
	`VdbeCovîage
(v);

2818 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr1
);

2820 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Clo£
, 
iTab
);

2821 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Clo£
, 
iIdx
);

2822 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Clo£
, 
iS‹ãr
);

2823 
	}
}

2832 
Index
 *
	$sqlôe3AŒoˇãIndexObje˘
(

2833 
sqlôe3
 *
db
,

2834 
i16
 
nCﬁ
,

2835 
nExåa
,

2836 **
µExåa


2838 
Index
 *
p
;

2839 
nByã
;

2841 
nByã
 = 
	`ROUND8
((
Index
)) +

2842 
	`ROUND8
((*)*
nCﬁ
) +

2843 
	`ROUND8
((
LogE°
)*(
nCﬁ
+1) +

2844 (
i16
)*
nCﬁ
 +

2845 (
u8
)*
nCﬁ
);

2846 
p
 = 
	`sqlôe3DbMÆlocZîo
(
db
, 
nByã
 + 
nExåa
);

2847 if–
p
 ){

2848 *
pExåa
 = ((*)
p
)+
	`ROUND8
((
Index
));

2849 
p
->
azCﬁl
 = (c⁄° **)
pExåa
;ÖExå®+
	`ROUND8
((*)*
nCﬁ
);

2850 
p
->
aiRowLogE°
 = (
LogE°
*)
pExåa
;ÖExå®+(LogE°)*(
nCﬁ
+1);

2851 
p
->
aiCﬁumn
 = (
i16
*)
pExåa
;ÖExå®+(i16)*
nCﬁ
;

2852 
p
->
aS‹tOrdî
 = (
u8
*)
pExåa
;

2853 
p
->
nCﬁumn
 = 
nCﬁ
;

2854 
p
->
nKeyCﬁ
 = 
nCﬁ
 - 1;

2855 *
µExåa
 = ((*)
p
Ë+ 
nByã
;

2857  
p
;

2858 
	}
}

2876 
Index
 *
	$sqlôe3Cª©eIndex
(

2877 
P¨£
 *
pP¨£
,

2878 
Tokí
 *
pName1
,

2879 
Tokí
 *
pName2
,

2880 
SrcLi°
 *
pTblName
,

2881 
Ex¥Li°
 *
pLi°
,

2882 
⁄Eº‹
,

2883 
Tokí
 *
pSèπ
,

2884 
Ex¥
 *
pPIWhîe
,

2885 
s‹tOrdî
,

2886 
ifNŸExi°


2888 
Index
 *
pRë
 = 0;

2889 
TabÀ
 *
pTab
 = 0;

2890 
Index
 *
pIndex
 = 0;

2891 *
zName
 = 0;

2892 
nName
;

2893 
i
, 
j
;

2894 
DbFixî
 
sFix
;

2895 
s‹tOrdîMask
;

2896 
sqlôe3
 *
db
 = 
pP¨£
->db;

2897 
Db
 *
pDb
;

2898 
iDb
;

2899 
Tokí
 *
pName
 = 0;

2900 
Ex¥Li°_ôem
 *
pLi°Iãm
;

2901 
nExåa
 = 0;

2902 
nExåaCﬁ
;

2903 *
zExåa
 = 0;

2904 
Index
 *
pPk
 = 0;

2906 if–
db
->
mÆlocFaûed
 || 
IN_DECLARE_VTAB
 || 
pP¨£
->
nEº
>0 ){

2907 
exô_¸óã_ödex
;

2909 if–
SQLITE_OK
!=
	`sqlôe3RódSchema
(
pP¨£
) ){

2910 
exô_¸óã_ödex
;

2916 if–
pTblName
!=0 ){

2922 
	`as£π
–
pName1
 && 
pName2
 );

2923 
iDb
 = 
	`sqlôe3TwoP¨tName
(
pP¨£
, 
pName1
, 
pName2
, &
pName
);

2924 if–
iDb
<0 ) 
exô_¸óã_ödex
;

2925 
	`as£π
–
pName
 &&ÖName->
z
 );

2927 #i‚de‡
SQLITE_OMIT_TEMPDB


2932 if–!
db
->
öô
.
busy
 ){

2933 
pTab
 = 
	`sqlôe3SrcLi°Lookup
(
pP¨£
, 
pTblName
);

2934 if–
pName2
->
n
==0 && 
pTab
 &&ÖTab->
pSchema
==
db
->
aDb
[1].pSchema ){

2935 
iDb
 = 1;

2940 
	`sqlôe3FixInô
(&
sFix
, 
pP¨£
, 
iDb
, "ödex", 
pName
);

2941 if–
	`sqlôe3FixSrcLi°
(&
sFix
, 
pTblName
) ){

2944 
	`as£π
(0);

2946 
pTab
 = 
	`sqlôe3LoˇãTabÀIãm
(
pP¨£
, 0, &
pTblName
->
a
[0]);

2947 
	`as£π
–
db
->
mÆlocFaûed
==0 || 
pTab
==0 );

2948 if–
pTab
==0 ) 
exô_¸óã_ödex
;

2949 if–
iDb
==1 && 
db
->
aDb
[iDb].
pSchema
!=
pTab
->pSchema ){

2950 
	`sqlôe3Eº‹Msg
(
pP¨£
,

2952 
pTab
->
zName
);

2953 
exô_¸óã_ödex
;

2955 if–!
	`HasRowid
(
pTab
ËË
pPk
 = 
	`sqlôe3Prim¨yKeyIndex
(pTab);

2957 
	`as£π
–
pName
==0 );

2958 
	`as£π
–
pSèπ
==0 );

2959 
pTab
 = 
pP¨£
->
pNewTabÀ
;

2960 if–!
pTab
 ) 
exô_¸óã_ödex
;

2961 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pTab
->
pSchema
);

2963 
pDb
 = &
db
->
aDb
[
iDb
];

2965 
	`as£π
–
pTab
!=0 );

2966 
	`as£π
–
pP¨£
->
nEº
==0 );

2967 if–
	`sqlôe3SåNICmp
(
pTab
->
zName
, "sqlite_", 7)==0

2968 && 
db
->
öô
.
busy
==0

2969 #i‡
SQLITE_USER_AUTHENTICATION


2970 && 
	`sqlôe3U£rAuthTabÀ
(
pTab
->
zName
)==0

2972 && 
	`sqlôe3SåNICmp
(&
pTab
->
zName
[7],"altertab_",9)!=0 ){

2973 
	`sqlôe3Eº‹Msg
(
pP¨£
, "èbÀ %†mayÇŸ bêödexed", 
pTab
->
zName
);

2974 
exô_¸óã_ödex
;

2976 #i‚de‡
SQLITE_OMIT_VIEW


2977 if–
pTab
->
pSñe˘
 ){

2978 
	`sqlôe3Eº‹Msg
(
pP¨£
, "views mayÇot be indexed");

2979 
exô_¸óã_ödex
;

2982 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


2983 if–
	`IsVútuÆ
(
pTab
) ){

2984 
	`sqlôe3Eº‹Msg
(
pP¨£
, "virtualÅables mayÇot be indexed");

2985 
exô_¸óã_ödex
;

3002 if–
pName
 ){

3003 
zName
 = 
	`sqlôe3NameFromTokí
(
db
, 
pName
);

3004 if–
zName
==0 ) 
exô_¸óã_ödex
;

3005 
	`as£π
–
pName
->
z
!=0 );

3006 if–
SQLITE_OK
!=
	`sqlôe3CheckObje˘Name
(
pP¨£
, 
zName
) ){

3007 
exô_¸óã_ödex
;

3009 if–!
db
->
öô
.
busy
 ){

3010 if–
	`sqlôe3FödTabÀ
(
db
, 
zName
, 0)!=0 ){

3011 
	`sqlôe3Eº‹Msg
(
pP¨£
, "thîêi†ÆªadyáÅabÀÇamed %s", 
zName
);

3012 
exô_¸óã_ödex
;

3015 if–
	`sqlôe3FödIndex
(
db
, 
zName
, 
pDb
->zName)!=0 ){

3016 if–!
ifNŸExi°
 ){

3017 
	`sqlôe3Eº‹Msg
(
pP¨£
, "ödex %†ÆªadyÉxi°s", 
zName
);

3019 
	`as£π
–!
db
->
öô
.
busy
 );

3020 
	`sqlôe3CodeVîifySchema
(
pP¨£
, 
iDb
);

3022 
exô_¸óã_ödex
;

3025 
n
;

3026 
Index
 *
pLo›
;

3027 
pLo›
=
pTab
->
pIndex
, 
n
=1;ÖLo›;ÖLo›ıLo›->
pNext
,Ç++){}

3028 
zName
 = 
	`sqlôe3MPrötf
(
db
, "sqlôe_autoödex_%s_%d", 
pTab
->zName, 
n
);

3029 if–
zName
==0 ){

3030 
exô_¸óã_ödex
;

3036 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


3038 c⁄° *
zDb
 = 
pDb
->
zName
;

3039 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_INSERT
, 
	`SCHEMA_TABLE
(
iDb
), 0, 
zDb
) ){

3040 
exô_¸óã_ödex
;

3042 
i
 = 
SQLITE_CREATE_INDEX
;

3043 if–!
OMIT_TEMPDB
 && 
iDb
==1 ) 
i
 = 
SQLITE_CREATE_TEMP_INDEX
;

3044 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
i
, 
zName
, 
pTab
->zName, 
zDb
) ){

3045 
exô_¸óã_ödex
;

3054 if–
pLi°
==0 ){

3055 
Tokí
 
¥evCﬁ
;

3056 
	`sqlôe3TokíInô
(&
¥evCﬁ
, 
pTab
->
aCﬁ
[pTab->
nCﬁ
-1].
zName
);

3057 
pLi°
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
, 0,

3058 
	`sqlôe3Ex¥AŒoc
(
db
, 
TK_ID
, &
¥evCﬁ
, 0));

3059 if–
pLi°
==0 ) 
exô_¸óã_ödex
;

3060 
	`as£π
–
pLi°
->
nEx¥
==1 );

3061 
	`sqlôe3Ex¥Li°SëS‹tOrdî
(
pLi°
, 
s‹tOrdî
);

3063 
	`sqlôe3Ex¥Li°CheckLígth
(
pP¨£
, 
pLi°
, "index");

3069 
i
=0; i<
pLi°
->
nEx¥
; i++){

3070 
Ex¥
 *
pEx¥
 = 
pLi°
->
a
[
i
].pExpr;

3071 
	`as£π
–
pEx¥
!=0 );

3072 if–
pEx¥
->
›
==
TK_COLLATE
 ){

3073 
nExåa
 +(1 + 
	`sqlôe3SåÀn30
(
pEx¥
->
u
.
zTokí
));

3080 
nName
 = 
	`sqlôe3SåÀn30
(
zName
);

3081 
nExåaCﬁ
 = 
pPk
 ?ÖPk->
nKeyCﬁ
 : 1;

3082 
pIndex
 = 
	`sqlôe3AŒoˇãIndexObje˘
(
db
, 
pLi°
->
nEx¥
 + 
nExåaCﬁ
,

3083 
nName
 + 
nExåa
 + 1, &
zExåa
);

3084 if–
db
->
mÆlocFaûed
 ){

3085 
exô_¸óã_ödex
;

3087 
	`as£π
–
	`EIGHT_BYTE_ALIGNMENT
(
pIndex
->
aiRowLogE°
) );

3088 
	`as£π
–
	`EIGHT_BYTE_ALIGNMENT
(
pIndex
->
azCﬁl
) );

3089 
pIndex
->
zName
 = 
zExåa
;

3090 
zExåa
 +
nName
 + 1;

3091 
	`mem˝y
(
pIndex
->
zName
, zName, 
nName
+1);

3092 
pIndex
->
pTabÀ
 = 
pTab
;

3093 
pIndex
->
⁄Eº‹
 = (
u8
)onError;

3094 
pIndex
->
uniqNŸNuŒ
 = 
⁄Eº‹
!=
OE_N⁄e
;

3095 
pIndex
->
idxTy≥
 = 
pName
 ? 
SQLITE_IDXTYPE_APPDEF
 : 
SQLITE_IDXTYPE_UNIQUE
;

3096 
pIndex
->
pSchema
 = 
db
->
aDb
[
iDb
].pSchema;

3097 
pIndex
->
nKeyCﬁ
 = 
pLi°
->
nEx¥
;

3098 if–
pPIWhîe
 ){

3099 
	`sqlôe3ResﬁveSñfRe„ªn˚
(
pP¨£
, 
pTab
, 
NC_P¨tIdx
, 
pPIWhîe
, 0);

3100 
pIndex
->
pP¨tIdxWhîe
 = 
pPIWhîe
;

3101 
pPIWhîe
 = 0;

3103 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

3107 if–
pDb
->
pSchema
->
fûe_f‹m©
>=4 ){

3108 
s‹tOrdîMask
 = -1;

3110 
s‹tOrdîMask
 = 0;

3122 
i
=0, 
pLi°Iãm
=
pLi°
->
a
; i<pLi°->
nEx¥
; i++,ÖListItem++){

3123 
Ex¥
 *
pCEx¥
;

3124 
ªque°edS‹tOrdî
;

3125 c⁄° *
zCﬁl
;

3127 
	`sqlôe3SåögToId
(
pLi°Iãm
->
pEx¥
);

3128 
	`sqlôe3ResﬁveSñfRe„ªn˚
(
pP¨£
, 
pTab
, 
NC_IdxEx¥
, 
pLi°Iãm
->
pEx¥
, 0);

3129 if–
pP¨£
->
nEº
 ) 
exô_¸óã_ödex
;

3130 
pCEx¥
 = 
	`sqlôe3Ex¥SkùCﬁœã
(
pLi°Iãm
->
pEx¥
);

3131 if–
pCEx¥
->
›
!=
TK_COLUMN
 ){

3132 if–
pTab
==
pP¨£
->
pNewTabÀ
 ){

3133 
	`sqlôe3Eº‹Msg
(
pP¨£
, "expressionsÖrohibited in PRIMARY KEYánd "

3135 
exô_¸óã_ödex
;

3137 if–
pIndex
->
aCﬁEx¥
==0 ){

3138 
Ex¥Li°
 *
pC›y
 = 
	`sqlôe3Ex¥Li°Dup
(
db
, 
pLi°
, 0);

3139 
pIndex
->
aCﬁEx¥
 = 
pC›y
;

3140 if–!
db
->
mÆlocFaûed
 ){

3141 
	`as£π
–
pC›y
!=0 );

3142 
pLi°Iãm
 = &
pC›y
->
a
[
i
];

3145 
j
 = 
XN_EXPR
;

3146 
pIndex
->
aiCﬁumn
[
i
] = 
XN_EXPR
;

3147 
pIndex
->
uniqNŸNuŒ
 = 0;

3149 
j
 = 
pCEx¥
->
iCﬁumn
;

3150 
	`as£π
–
j
<=0x7fff );

3151 if–
j
<0 ){

3152 
j
 = 
pTab
->
iPKey
;

3153 }if–
pTab
->
aCﬁ
[
j
].
nŸNuŒ
==0 ){

3154 
pIndex
->
uniqNŸNuŒ
 = 0;

3156 
pIndex
->
aiCﬁumn
[
i
] = (
i16
)
j
;

3158 
zCﬁl
 = 0;

3159 if–
pLi°Iãm
->
pEx¥
->
›
==
TK_COLLATE
 ){

3160 
nCﬁl
;

3161 
zCﬁl
 = 
pLi°Iãm
->
pEx¥
->
u
.
zTokí
;

3162 
nCﬁl
 = 
	`sqlôe3SåÀn30
(
zCﬁl
) + 1;

3163 
	`as£π
–
nExåa
>=
nCﬁl
 );

3164 
	`mem˝y
(
zExåa
, 
zCﬁl
, 
nCﬁl
);

3165 
zCﬁl
 = 
zExåa
;

3166 
zExåa
 +
nCﬁl
;

3167 
nExåa
 -
nCﬁl
;

3168 }if–
j
>=0 ){

3169 
zCﬁl
 = 
pTab
->
aCﬁ
[
j
].zColl;

3171 if–!
zCﬁl
 ) zCﬁ»
sqlôe3SåBINARY
;

3172 if–!
db
->
öô
.
busy
 && !
	`sqlôe3LoˇãCﬁlSeq
(
pP¨£
, 
zCﬁl
) ){

3173 
exô_¸óã_ödex
;

3175 
pIndex
->
azCﬁl
[
i
] = 
zCﬁl
;

3176 
ªque°edS‹tOrdî
 = 
pLi°Iãm
->
s‹tOrdî
 & 
s‹tOrdîMask
;

3177 
pIndex
->
aS‹tOrdî
[
i
] = (
u8
)
ªque°edS‹tOrdî
;

3184 if–
pPk
 ){

3185 
j
=0; j<
pPk
->
nKeyCﬁ
; j++){

3186 
x
 = 
pPk
->
aiCﬁumn
[
j
];

3187 
	`as£π
–
x
>=0 );

3188 if–
	`hasCﬁumn
(
pIndex
->
aiCﬁumn
,ÖIndex->
nKeyCﬁ
, 
x
) ){

3189 
pIndex
->
nCﬁumn
--;

3191 
pIndex
->
aiCﬁumn
[
i
] = 
x
;

3192 
pIndex
->
azCﬁl
[
i
] = 
pPk
->azCﬁl[
j
];

3193 
pIndex
->
aS‹tOrdî
[
i
] = 
pPk
->aS‹tOrdî[
j
];

3194 
i
++;

3197 
	`as£π
–
i
==
pIndex
->
nCﬁumn
 );

3199 
pIndex
->
aiCﬁumn
[
i
] = 
XN_ROWID
;

3200 
pIndex
->
azCﬁl
[
i
] = 
sqlôe3SåBINARY
;

3202 
	`sqlôe3DeÁu…RowE°
(
pIndex
);

3203 if–
pP¨£
->
pNewTabÀ
==0 ) 
	`e°im©eIndexWidth
(
pIndex
);

3207 
	`as£π
–
	`HasRowid
(
pTab
)

3208 || 
pTab
->
iPKey
<0 || 
	`sqlôe3CﬁumnOfIndex
(
pIndex
,ÖTab->iPKey)>=0 );

3209 if–
pTblName
!=0 && 
pIndex
->
nCﬁumn
>=
pTab
->
nCﬁ
 ){

3210 
pIndex
->
isCovîög
 = 1;

3211 
j
=0; j<
pTab
->
nCﬁ
; j++){

3212 if–
j
==
pTab
->
iPKey
 ) ;

3213 if–
	`sqlôe3CﬁumnOfIndex
(
pIndex
,
j
)>=0 ) ;

3214 
pIndex
->
isCovîög
 = 0;

3219 if–
pTab
==
pP¨£
->
pNewTabÀ
 ){

3241 
Index
 *
pIdx
;

3242 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

3243 
k
;

3244 
	`as£π
–
	`IsUniqueIndex
(
pIdx
) );

3245 
	`as£π
–
pIdx
->
idxTy≥
!=
SQLITE_IDXTYPE_APPDEF
 );

3246 
	`as£π
–
	`IsUniqueIndex
(
pIndex
) );

3248 if–
pIdx
->
nKeyCﬁ
!=
pIndex
->nKeyCol ) ;

3249 
k
=0; k<
pIdx
->
nKeyCﬁ
; k++){

3250 c⁄° *
z1
;

3251 c⁄° *
z2
;

3252 
	`as£π
–
pIdx
->
aiCﬁumn
[
k
]>=0 );

3253 if–
pIdx
->
aiCﬁumn
[
k
]!=
pIndex
->aiColumn[k] ) ;

3254 
z1
 = 
pIdx
->
azCﬁl
[
k
];

3255 
z2
 = 
pIndex
->
azCﬁl
[
k
];

3256 if–
	`sqlôe3SåICmp
(
z1
, 
z2
) ) ;

3258 if–
k
==
pIdx
->
nKeyCﬁ
 ){

3259 if–
pIdx
->
⁄Eº‹
!=
pIndex
->onError ){

3267 if–!(
pIdx
->
⁄Eº‹
==
OE_DeÁu…
 || 
pIndex
->onError==OE_Default) ){

3268 
	`sqlôe3Eº‹Msg
(
pP¨£
,

3271 if–
pIdx
->
⁄Eº‹
==
OE_DeÁu…
 ){

3272 
pIdx
->
⁄Eº‹
 = 
pIndex
->onError;

3275 
pRë
 = 
pIdx
;

3276 
exô_¸óã_ödex
;

3284 
	`as£π
–
pP¨£
->
nEº
==0 );

3285 if–
db
->
öô
.
busy
 ){

3286 
Index
 *
p
;

3287 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 0, 
pIndex
->
pSchema
) );

3288 
p
 = 
	`sqlôe3HashIn£π
(&
pIndex
->
pSchema
->
idxHash
,

3289 
pIndex
->
zName
,ÖIndex);

3290 if–
p
 ){

3291 
	`as£π
–
p
==
pIndex
 );

3292 
	`sqlôe3OomFau…
(
db
);

3293 
exô_¸óã_ödex
;

3295 
db
->
Êags
 |
SQLITE_I¡înCh™ges
;

3296 if–
pTblName
!=0 ){

3297 
pIndex
->
äum
 = 
db
->
öô
.
√wTnum
;

3314 if–
	`HasRowid
(
pTab
Ë|| 
pTblName
!=0 ){

3315 
Vdbe
 *
v
;

3316 *
zStmt
;

3317 
iMem
 = ++
pP¨£
->
nMem
;

3319 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

3320 if–
v
==0 ) 
exô_¸óã_ödex
;

3322 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 1, 
iDb
);

3330 
pIndex
->
äum
 = 
	`sqlôe3VdbeAddOp0
(
v
, 
OP_No›
);

3331 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Cª©eIndex
, 
iDb
, 
iMem
);

3336 if–
pSèπ
 ){

3337 
n
 = ()(
pP¨£
->
sLa°Tokí
.
z
 - 
pName
->z) +ÖParse->sLastToken.n;

3338 if–
pName
->
z
[
n
-1]==';' )Ç--;

3340 
zStmt
 = 
	`sqlôe3MPrötf
(
db
, "CREATE%s INDEX %.*s",

3341 
⁄Eº‹
==
OE_N⁄e
 ? "" : " UNIQUE", 
n
, 
pName
->
z
);

3345 
zStmt
 = 0;

3350 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

3352 
db
->
aDb
[
iDb
].
zName
, 
	`SCHEMA_TABLE
(iDb),

3353 
pIndex
->
zName
,

3354 
pTab
->
zName
,

3355 
iMem
,

3356 
zStmt


3358 
	`sqlôe3DbFªe
(
db
, 
zStmt
);

3363 if–
pTblName
 ){

3364 
	`sqlôe3RefûlIndex
(
pP¨£
, 
pIndex
, 
iMem
);

3365 
	`sqlôe3Ch™geCookõ
(
pP¨£
, 
iDb
);

3366 
	`sqlôe3VdbeAddP¨£SchemaOp
(
v
, 
iDb
,

3367 
	`sqlôe3MPrötf
(
db
, "«me='%q' ANDÅy≥='ödex'", 
pIndex
->
zName
));

3368 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Expúe
, 0);

3371 
	`sqlôe3VdbeJumpHîe
(
v
, 
pIndex
->
äum
);

3380 if–
db
->
öô
.
busy
 || 
pTblName
==0 ){

3381 if–
⁄Eº‹
!=
OE_Rïœ˚
 || 
pTab
->
pIndex
==0

3382 || 
pTab
->
pIndex
->
⁄Eº‹
==
OE_Rïœ˚
){

3383 
pIndex
->
pNext
 = 
pTab
->pIndex;

3384 
pTab
->
pIndex
 =ÖIndex;

3386 
Index
 *
pOthî
 = 
pTab
->
pIndex
;

3387  
pOthî
->
pNext
 &&ÖOthî->pNext->
⁄Eº‹
!=
OE_Rïœ˚
 ){

3388 
pOthî
 =ÖOthî->
pNext
;

3390 
pIndex
->
pNext
 = 
pOthî
->pNext;

3391 
pOthî
->
pNext
 = 
pIndex
;

3393 
pRë
 = 
pIndex
;

3394 
pIndex
 = 0;

3398 
exô_¸óã_ödex
:

3399 if–
pIndex
 ) 
	`‰ìIndex
(
db
,ÖIndex);

3400 
	`sqlôe3Ex¥Dñëe
(
db
, 
pPIWhîe
);

3401 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
pLi°
);

3402 
	`sqlôe3SrcLi°Dñëe
(
db
, 
pTblName
);

3403 
	`sqlôe3DbFªe
(
db
, 
zName
);

3404  
pRë
;

3405 
	}
}

3425 
	$sqlôe3DeÁu…RowE°
(
Index
 *
pIdx
){

3427 
LogE°
 
aVÆ
[] = { 33, 32, 30, 28, 26 };

3428 
LogE°
 *
a
 = 
pIdx
->
aiRowLogE°
;

3429 
nC›y
 = 
	`MIN
(
	`AºaySize
(
aVÆ
), 
pIdx
->
nKeyCﬁ
);

3430 
i
;

3435 
a
[0] = 
pIdx
->
pTabÀ
->
nRowLogE°
;

3436 if–
a
[0]<33 )á[0] = 33; 
	`as£π
–33==
	`sqlôe3LogE°
(10) );

3440 
	`mem˝y
(&
a
[1], 
aVÆ
, 
nC›y
*(
LogE°
));

3441 
i
=
nC›y
+1; i<=
pIdx
->
nKeyCﬁ
; i++){

3442 
a
[
i
] = 23; 
	`as£π
–23==
	`sqlôe3LogE°
(5) );

3445 
	`as£π
–0==
	`sqlôe3LogE°
(1) );

3446 if–
	`IsUniqueIndex
(
pIdx
ËË
a
[pIdx->
nKeyCﬁ
] = 0;

3447 
	}
}

3453 
	$sqlôe3Dr›Index
(
P¨£
 *
pP¨£
, 
SrcLi°
 *
pName
, 
ifExi°s
){

3454 
Index
 *
pIndex
;

3455 
Vdbe
 *
v
;

3456 
sqlôe3
 *
db
 = 
pP¨£
->db;

3457 
iDb
;

3459 
	`as£π
–
pP¨£
->
nEº
==0 );

3460 if–
db
->
mÆlocFaûed
 ){

3461 
exô_dr›_ödex
;

3463 
	`as£π
–
pName
->
nSrc
==1 );

3464 if–
SQLITE_OK
!=
	`sqlôe3RódSchema
(
pP¨£
) ){

3465 
exô_dr›_ödex
;

3467 
pIndex
 = 
	`sqlôe3FödIndex
(
db
, 
pName
->
a
[0].
zName
,ÖName->a[0].
zD©aba£
);

3468 if–
pIndex
==0 ){

3469 if–!
ifExi°s
 ){

3470 
	`sqlôe3Eº‹Msg
(
pP¨£
, "nÿsuch index: %S", 
pName
, 0);

3472 
	`sqlôe3CodeVîifyNamedSchema
(
pP¨£
, 
pName
->
a
[0].
zD©aba£
);

3474 
pP¨£
->
checkSchema
 = 1;

3475 
exô_dr›_ödex
;

3477 if–
pIndex
->
idxTy≥
!=
SQLITE_IDXTYPE_APPDEF
 ){

3478 
	`sqlôe3Eº‹Msg
(
pP¨£
, "indexássociated with UNIQUE "

3480 
exô_dr›_ödex
;

3482 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pIndex
->
pSchema
);

3483 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


3485 
code
 = 
SQLITE_DROP_INDEX
;

3486 
TabÀ
 *
pTab
 = 
pIndex
->
pTabÀ
;

3487 c⁄° *
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

3488 c⁄° *
zTab
 = 
	`SCHEMA_TABLE
(
iDb
);

3489 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_DELETE
, 
zTab
, 0, 
zDb
) ){

3490 
exô_dr›_ödex
;

3492 if–!
OMIT_TEMPDB
 && 
iDb
 ) 
code
 = 
SQLITE_DROP_TEMP_INDEX
;

3493 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
code
, 
pIndex
->
zName
, 
pTab
->zName, 
zDb
) ){

3494 
exô_dr›_ödex
;

3500 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

3501 if–
v
 ){

3502 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 1, 
iDb
);

3503 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

3505 
db
->
aDb
[
iDb
].
zName
, 
	`SCHEMA_TABLE
(iDb), 
pIndex
->zName

3507 
	`sqlôe3CÀ¨SètTabÀs
(
pP¨£
, 
iDb
, "idx", 
pIndex
->
zName
);

3508 
	`sqlôe3Ch™geCookõ
(
pP¨£
, 
iDb
);

3509 
	`de°royRoŸPage
(
pP¨£
, 
pIndex
->
äum
, 
iDb
);

3510 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Dr›Index
, 
iDb
, 0, 0, 
pIndex
->
zName
, 0);

3513 
exô_dr›_ödex
:

3514 
	`sqlôe3SrcLi°Dñëe
(
db
, 
pName
);

3515 
	}
}

3534 *
	$sqlôe3AºayAŒoˇã
(

3535 
sqlôe3
 *
db
,

3536 *
pAºay
,

3537 
szE¡ry
,

3538 *
≤E¡ry
,

3539 *
pIdx


3541 *
z
;

3542 
n
 = *
≤E¡ry
;

3543 if–(
n
 & (n-1))==0 ){

3544 
sz
 = (
n
==0) ? 1 : 2*n;

3545 *
pNew
 = 
	`sqlôe3DbRóŒoc
(
db
, 
pAºay
, 
sz
*
szE¡ry
);

3546 if–
pNew
==0 ){

3547 *
pIdx
 = -1;

3548  
pAºay
;

3550 
pAºay
 = 
pNew
;

3552 
z
 = (*)
pAºay
;

3553 
	`mem£t
(&
z
[
n
 * 
szE¡ry
], 0, szEntry);

3554 *
pIdx
 = 
n
;

3555 ++*
≤E¡ry
;

3556  
pAºay
;

3557 
	}
}

3565 
IdLi°
 *
	$sqlôe3IdLi°Aµíd
(
sqlôe3
 *
db
, 
IdLi°
 *
pLi°
, 
Tokí
 *
pTokí
){

3566 
i
;

3567 if–
pLi°
==0 ){

3568 
pLi°
 = 
	`sqlôe3DbMÆlocZîo
(
db
, (
IdLi°
) );

3569 if–
pLi°
==0 )  0;

3571 
pLi°
->
a
 = 
	`sqlôe3AºayAŒoˇã
(

3572 
db
,

3573 
pLi°
->
a
,

3574 (
pLi°
->
a
[0]),

3575 &
pLi°
->
nId
,

3576 &
i


3578 if–
i
<0 ){

3579 
	`sqlôe3IdLi°Dñëe
(
db
, 
pLi°
);

3582 
pLi°
->
a
[
i
].
zName
 = 
	`sqlôe3NameFromTokí
(
db
, 
pTokí
);

3583  
pLi°
;

3584 
	}
}

3589 
	$sqlôe3IdLi°Dñëe
(
sqlôe3
 *
db
, 
IdLi°
 *
pLi°
){

3590 
i
;

3591 if–
pLi°
==0 ) ;

3592 
i
=0; i<
pLi°
->
nId
; i++){

3593 
	`sqlôe3DbFªe
(
db
, 
pLi°
->
a
[
i
].
zName
);

3595 
	`sqlôe3DbFªe
(
db
, 
pLi°
->
a
);

3596 
	`sqlôe3DbFªe
(
db
, 
pLi°
);

3597 
	}
}

3603 
	$sqlôe3IdLi°Index
(
IdLi°
 *
pLi°
, c⁄° *
zName
){

3604 
i
;

3605 if–
pLi°
==0 )  -1;

3606 
i
=0; i<
pLi°
->
nId
; i++){

3607 if–
	`sqlôe3SåICmp
(
pLi°
->
a
[
i
].
zName
, zName)==0 )  i;

3610 
	}
}

3631 
SrcLi°
 *
	$sqlôe3SrcLi°E∆¨ge
(

3632 
sqlôe3
 *
db
,

3633 
SrcLi°
 *
pSrc
,

3634 
nExåa
,

3635 
iSèπ


3637 
i
;

3640 
	`as£π
–
iSèπ
>=0 );

3641 
	`as£π
–
nExåa
>=1 );

3642 
	`as£π
–
pSrc
!=0 );

3643 
	`as£π
–
iSèπ
<=
pSrc
->
nSrc
 );

3646 if–(
u32
)
pSrc
->
nSrc
+
nExåa
>pSrc->
nAŒoc
 ){

3647 
SrcLi°
 *
pNew
;

3648 
nAŒoc
 = 
pSrc
->
nSrc
+
nExåa
;

3649 
nGŸ
;

3650 
pNew
 = 
	`sqlôe3DbRóŒoc
(
db
, 
pSrc
,

3651 (*
pSrc
Ë+ (
nAŒoc
-1)*’Src->
a
[0]) );

3652 if–
pNew
==0 ){

3653 
	`as£π
–
db
->
mÆlocFaûed
 );

3654  
pSrc
;

3656 
pSrc
 = 
pNew
;

3657 
nGŸ
 = (
	`sqlôe3DbMÆlocSize
(
db
, 
pNew
Ë- (*
pSrc
))/’Src->
a
[0])+1;

3658 
pSrc
->
nAŒoc
 = 
nGŸ
;

3663 
i
=
pSrc
->
nSrc
-1; i>=
iSèπ
; i--){

3664 
pSrc
->
a
[
i
+
nExåa
] =ÖSrc->a[i];

3666 
pSrc
->
nSrc
 +
nExåa
;

3669 
	`mem£t
(&
pSrc
->
a
[
iSèπ
], 0, ’Src->a[0])*
nExåa
);

3670 
i
=
iSèπ
; i<iSèπ+
nExåa
; i++){

3671 
pSrc
->
a
[
i
].
iCurs‹
 = -1;

3675  
pSrc
;

3676 
	}
}

3713 
SrcLi°
 *
	$sqlôe3SrcLi°Aµíd
(

3714 
sqlôe3
 *
db
,

3715 
SrcLi°
 *
pLi°
,

3716 
Tokí
 *
pTabÀ
,

3717 
Tokí
 *
pD©aba£


3719 
SrcLi°_ôem
 *
pIãm
;

3720 
	`as£π
–
pD©aba£
==0 || 
pTabÀ
!=0 );

3721 
	`as£π
–
db
!=0 );

3722 if–
pLi°
==0 ){

3723 
pLi°
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, (
SrcLi°
) );

3724 if–
pLi°
==0 )  0;

3725 
pLi°
->
nAŒoc
 = 1;

3726 
pLi°
->
nSrc
 = 0;

3728 
pLi°
 = 
	`sqlôe3SrcLi°E∆¨ge
(
db
,ÖLi°, 1,ÖLi°->
nSrc
);

3729 if–
db
->
mÆlocFaûed
 ){

3730 
	`sqlôe3SrcLi°Dñëe
(
db
, 
pLi°
);

3733 
pIãm
 = &
pLi°
->
a
[pLi°->
nSrc
-1];

3734 if–
pD©aba£
 &&ÖD©aba£->
z
==0 ){

3735 
pD©aba£
 = 0;

3737 if–
pD©aba£
 ){

3738 
Tokí
 *
pTemp
 = 
pD©aba£
;

3739 
pD©aba£
 = 
pTabÀ
;

3740 
pTabÀ
 = 
pTemp
;

3742 
pIãm
->
zName
 = 
	`sqlôe3NameFromTokí
(
db
, 
pTabÀ
);

3743 
pIãm
->
zD©aba£
 = 
	`sqlôe3NameFromTokí
(
db
, 
pD©aba£
);

3744  
pLi°
;

3745 
	}
}

3750 
	$sqlôe3SrcLi°AssignCurs‹s
(
P¨£
 *
pP¨£
, 
SrcLi°
 *
pLi°
){

3751 
i
;

3752 
SrcLi°_ôem
 *
pIãm
;

3753 
	`as£π
(
pLi°
 || 
pP¨£
->
db
->
mÆlocFaûed
 );

3754 if–
pLi°
 ){

3755 
i
=0, 
pIãm
=
pLi°
->
a
; i<pLi°->
nSrc
; i++,ÖItem++){

3756 if–
pIãm
->
iCurs‹
>=0 ) ;

3757 
pIãm
->
iCurs‹
 = 
pP¨£
->
nTab
++;

3758 if–
pIãm
->
pSñe˘
 ){

3759 
	`sqlôe3SrcLi°AssignCurs‹s
(
pP¨£
, 
pIãm
->
pSñe˘
->
pSrc
);

3763 
	}
}

3768 
	$sqlôe3SrcLi°Dñëe
(
sqlôe3
 *
db
, 
SrcLi°
 *
pLi°
){

3769 
i
;

3770 
SrcLi°_ôem
 *
pIãm
;

3771 if–
pLi°
==0 ) ;

3772 
pIãm
=
pLi°
->
a
, 
i
=0; i<pLi°->
nSrc
; i++,ÖItem++){

3773 
	`sqlôe3DbFªe
(
db
, 
pIãm
->
zD©aba£
);

3774 
	`sqlôe3DbFªe
(
db
, 
pIãm
->
zName
);

3775 
	`sqlôe3DbFªe
(
db
, 
pIãm
->
zAlüs
);

3776 if–
pIãm
->
fg
.
isIndexedBy
 ) 
	`sqlôe3DbFªe
(
db
,ÖIãm->
u1
.
zIndexedBy
);

3777 if–
pIãm
->
fg
.
isTabFunc
 ) 
	`sqlôe3Ex¥Li°Dñëe
(
db
,ÖIãm->
u1
.
pFuncArg
);

3778 
	`sqlôe3DñëeTabÀ
(
db
, 
pIãm
->
pTab
);

3779 
	`sqlôe3Sñe˘Dñëe
(
db
, 
pIãm
->
pSñe˘
);

3780 
	`sqlôe3Ex¥Dñëe
(
db
, 
pIãm
->
pOn
);

3781 
	`sqlôe3IdLi°Dñëe
(
db
, 
pIãm
->
pUsög
);

3783 
	`sqlôe3DbFªe
(
db
, 
pLi°
);

3784 
	}
}

3802 
SrcLi°
 *
	$sqlôe3SrcLi°AµídFromTîm
(

3803 
P¨£
 *
pP¨£
,

3804 
SrcLi°
 *
p
,

3805 
Tokí
 *
pTabÀ
,

3806 
Tokí
 *
pD©aba£
,

3807 
Tokí
 *
pAlüs
,

3808 
Sñe˘
 *
pSubquîy
,

3809 
Ex¥
 *
pOn
,

3810 
IdLi°
 *
pUsög


3812 
SrcLi°_ôem
 *
pIãm
;

3813 
sqlôe3
 *
db
 = 
pP¨£
->db;

3814 if–!
p
 && (
pOn
 || 
pUsög
) ){

3815 
	`sqlôe3Eº‹Msg
(
pP¨£
, "a JOIN clause isÑequired before %s",

3816 (
pOn
 ? "ON" : "USING")

3818 
≠≥nd_‰om_îr‹
;

3820 
p
 = 
	`sqlôe3SrcLi°Aµíd
(
db
,Ö, 
pTabÀ
, 
pD©aba£
);

3821 if–
p
==0 || 
	`NEVER
’->
nSrc
==0) ){

3822 
≠≥nd_‰om_îr‹
;

3824 
pIãm
 = &
p
->
a
[p->
nSrc
-1];

3825 
	`as£π
–
pAlüs
!=0 );

3826 if–
pAlüs
->
n
 ){

3827 
pIãm
->
zAlüs
 = 
	`sqlôe3NameFromTokí
(
db
, 
pAlüs
);

3829 
pIãm
->
pSñe˘
 = 
pSubquîy
;

3830 
pIãm
->
pOn
 =ÖOn;

3831 
pIãm
->
pUsög
 =ÖUsing;

3832  
p
;

3834 
≠≥nd_‰om_îr‹
:

3835 
	`as£π
–
p
==0 );

3836 
	`sqlôe3Ex¥Dñëe
(
db
, 
pOn
);

3837 
	`sqlôe3IdLi°Dñëe
(
db
, 
pUsög
);

3838 
	`sqlôe3Sñe˘Dñëe
(
db
, 
pSubquîy
);

3840 
	}
}

3846 
	$sqlôe3SrcLi°IndexedBy
(
P¨£
 *
pP¨£
, 
SrcLi°
 *
p
, 
Tokí
 *
pIndexedBy
){

3847 
	`as£π
–
pIndexedBy
!=0 );

3848 if–
p
 && 
	`ALWAYS
’->
nSrc
>0) ){

3849 
SrcLi°_ôem
 *
pIãm
 = &
p
->
a
[p->
nSrc
-1];

3850 
	`as£π
–
pIãm
->
fg
.
nŸIndexed
==0 );

3851 
	`as£π
–
pIãm
->
fg
.
isIndexedBy
==0 );

3852 
	`as£π
–
pIãm
->
fg
.
isTabFunc
==0 );

3853 if–
pIndexedBy
->
n
==1 && !pIndexedBy->
z
 ){

3856 
pIãm
->
fg
.
nŸIndexed
 = 1;

3858 
pIãm
->
u1
.
zIndexedBy
 = 
	`sqlôe3NameFromTokí
(
pP¨£
->
db
, 
pIndexedBy
);

3859 
pIãm
->
fg
.
isIndexedBy
 = (pIãm->
u1
.
zIndexedBy
!=0);

3862 
	}
}

3868 
	$sqlôe3SrcLi°FuncArgs
(
P¨£
 *
pP¨£
, 
SrcLi°
 *
p
, 
Ex¥Li°
 *
pLi°
){

3869 if–
p
 ){

3870 
SrcLi°_ôem
 *
pIãm
 = &
p
->
a
[p->
nSrc
-1];

3871 
	`as£π
–
pIãm
->
fg
.
nŸIndexed
==0 );

3872 
	`as£π
–
pIãm
->
fg
.
isIndexedBy
==0 );

3873 
	`as£π
–
pIãm
->
fg
.
isTabFunc
==0 );

3874 
pIãm
->
u1
.
pFuncArg
 = 
pLi°
;

3875 
pIãm
->
fg
.
isTabFunc
 = 1;

3877 
	`sqlôe3Ex¥Li°Dñëe
(
pP¨£
->
db
, 
pLi°
);

3879 
	}
}

3896 
	$sqlôe3SrcLi°Shi·JoöTy≥
(
SrcLi°
 *
p
){

3897 if–
p
 ){

3898 
i
;

3899 
i
=
p
->
nSrc
-1; i>0; i--){

3900 
p
->
a
[
i
].
fg
.
joöty≥
 =Ö->a[i-1].fg.jointype;

3902 
p
->
a
[0].
fg
.
joöty≥
 = 0;

3904 
	}
}

3909 
	$sqlôe3BegöTønß˘i⁄
(
P¨£
 *
pP¨£
, 
ty≥
){

3910 
sqlôe3
 *
db
;

3911 
Vdbe
 *
v
;

3912 
i
;

3914 
	`as£π
–
pP¨£
!=0 );

3915 
db
 = 
pP¨£
->db;

3916 
	`as£π
–
db
!=0 );

3917 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_TRANSACTION
, "BEGIN", 0, 0) ){

3920 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

3921 if–!
v
 ) ;

3922 if–
ty≥
!=
TK_DEFERRED
 ){

3923 
i
=0; i<
db
->
nDb
; i++){

3924 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Tønß˘i⁄
, 
i
, (
ty≥
==
TK_EXCLUSIVE
)+1);

3925 
	`sqlôe3VdbeU£sBåì
(
v
, 
i
);

3928 
	`sqlôe3VdbeAddOp0
(
v
, 
OP_AutoCommô
);

3929 
	}
}

3934 
	$sqlôe3CommôTønß˘i⁄
(
P¨£
 *
pP¨£
){

3935 
Vdbe
 *
v
;

3937 
	`as£π
–
pP¨£
!=0 );

3938 
	`as£π
–
pP¨£
->
db
!=0 );

3939 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_TRANSACTION
, "COMMIT", 0, 0) ){

3942 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

3943 if–
v
 ){

3944 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_AutoCommô
, 1);

3946 
	}
}

3951 
	$sqlôe3RﬁlbackTønß˘i⁄
(
P¨£
 *
pP¨£
){

3952 
Vdbe
 *
v
;

3954 
	`as£π
–
pP¨£
!=0 );

3955 
	`as£π
–
pP¨£
->
db
!=0 );

3956 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_TRANSACTION
, "ROLLBACK", 0, 0) ){

3959 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

3960 if–
v
 ){

3961 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_AutoCommô
, 1, 1);

3963 
	}
}

3969 
	$sqlôe3Savïoöt
(
P¨£
 *
pP¨£
, 
›
, 
Tokí
 *
pName
){

3970 *
zName
 = 
	`sqlôe3NameFromTokí
(
pP¨£
->
db
, 
pName
);

3971 if–
zName
 ){

3972 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

3973 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


3974 c⁄° * c⁄° 
az
[] = { "BEGIN", "RELEASE", "ROLLBACK" };

3975 
	`as£π
–!
SAVEPOINT_BEGIN
 && 
SAVEPOINT_RELEASE
==1 && 
SAVEPOINT_ROLLBACK
==2 );

3977 if–!
v
 || 
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_SAVEPOINT
, 
az
[
›
], 
zName
, 0) ){

3978 
	`sqlôe3DbFªe
(
pP¨£
->
db
, 
zName
);

3981 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Savïoöt
, 
›
, 0, 0, 
zName
, 
P4_DYNAMIC
);

3983 
	}
}

3989 
	$sqlôe3O≥nTempD©aba£
(
P¨£
 *
pP¨£
){

3990 
sqlôe3
 *
db
 = 
pP¨£
->db;

3991 if–
db
->
aDb
[1].
pBt
==0 && !
pP¨£
->
ex∂aö
 ){

3992 
rc
;

3993 
Båì
 *
pBt
;

3994 c⁄° 
Êags
 =

3995 
SQLITE_OPEN_READWRITE
 |

3996 
SQLITE_OPEN_CREATE
 |

3997 
SQLITE_OPEN_EXCLUSIVE
 |

3998 
SQLITE_OPEN_DELETEONCLOSE
 |

3999 
SQLITE_OPEN_TEMP_DB
;

4001 
rc
 = 
	`sqlôe3BåìO≥n
(
db
->
pVfs
, 0, db, &
pBt
, 0, 
Êags
);

4002 if–
rc
!=
SQLITE_OK
 ){

4003 
	`sqlôe3Eº‹Msg
(
pP¨£
, "unableÅo openáÅemporary database "

4005 
pP¨£
->
rc
 =Ñc;

4008 
db
->
aDb
[1].
pBt
 =ÖBt;

4009 
	`as£π
–
db
->
aDb
[1].
pSchema
 );

4010 if–
SQLITE_NOMEM
==
	`sqlôe3BåìSëPageSize
(
pBt
, 
db
->
√xtPagesize
, -1, 0) ){

4011 
	`sqlôe3OomFau…
(
db
);

4016 
	}
}

4024 
	$sqlôe3CodeVîifySchema
(
P¨£
 *
pP¨£
, 
iDb
){

4025 
P¨£
 *
pT›Àvñ
 = 
	`sqlôe3P¨£T›Àvñ
(
pP¨£
);

4026 
sqlôe3
 *
db
 = 
pT›Àvñ
->db;

4028 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

4029 
	`as£π
–
db
->
aDb
[
iDb
].
pBt
!=0 || iDb==1 );

4030 
	`as£π
–
iDb
<
SQLITE_MAX_ATTACHED
+2 );

4031 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

4032 if–
	`DbMaskTe°
(
pT›Àvñ
->
cookõMask
, 
iDb
)==0 ){

4033 
	`DbMaskSë
(
pT›Àvñ
->
cookõMask
, 
iDb
);

4034 
pT›Àvñ
->
cookõVÆue
[
iDb
] = 
db
->
aDb
[iDb].
pSchema
->
schema_cookõ
;

4035 if–!
OMIT_TEMPDB
 && 
iDb
==1 ){

4036 
	`sqlôe3O≥nTempD©aba£
(
pT›Àvñ
);

4039 
	}
}

4045 
	$sqlôe3CodeVîifyNamedSchema
(
P¨£
 *
pP¨£
, c⁄° *
zDb
){

4046 
sqlôe3
 *
db
 = 
pP¨£
->db;

4047 
i
;

4048 
i
=0; i<
db
->
nDb
; i++){

4049 
Db
 *
pDb
 = &
db
->
aDb
[
i
];

4050 if–
pDb
->
pBt
 && (!
zDb
 || 0==
	`sqlôe3SåICmp
(zDb,ÖDb->
zName
)) ){

4051 
	`sqlôe3CodeVîifySchema
(
pP¨£
, 
i
);

4054 
	}
}

4069 
	$sqlôe3BegöWrôeO≥øti⁄
(
P¨£
 *
pP¨£
, 
£tSèãmít
, 
iDb
){

4070 
P¨£
 *
pT›Àvñ
 = 
	`sqlôe3P¨£T›Àvñ
(
pP¨£
);

4071 
	`sqlôe3CodeVîifySchema
(
pP¨£
, 
iDb
);

4072 
	`DbMaskSë
(
pT›Àvñ
->
wrôeMask
, 
iDb
);

4073 
pT›Àvñ
->
isMu…iWrôe
 |
£tSèãmít
;

4074 
	}
}

4083 
	$sqlôe3Mu…iWrôe
(
P¨£
 *
pP¨£
){

4084 
P¨£
 *
pT›Àvñ
 = 
	`sqlôe3P¨£T›Àvñ
(
pP¨£
);

4085 
pT›Àvñ
->
isMu…iWrôe
 = 1;

4086 
	}
}

4104 
	$sqlôe3MayAb‹t
(
P¨£
 *
pP¨£
){

4105 
P¨£
 *
pT›Àvñ
 = 
	`sqlôe3P¨£T›Àvñ
(
pP¨£
);

4106 
pT›Àvñ
->
mayAb‹t
 = 1;

4107 
	}
}

4114 
	$sqlôe3HÆtC⁄°øöt
(

4115 
P¨£
 *
pP¨£
,

4116 
îrCode
,

4117 
⁄Eº‹
,

4118 *
p4
,

4119 
i8
 
p4ty≥
,

4120 
u8
 
p5Eºmsg


4122 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

4123 
	`as£π
–(
îrCode
&0xff)==
SQLITE_CONSTRAINT
 );

4124 if–
⁄Eº‹
==
OE_Ab‹t
 ){

4125 
	`sqlôe3MayAb‹t
(
pP¨£
);

4127 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_HÆt
, 
îrCode
, 
⁄Eº‹
, 0, 
p4
, 
p4ty≥
);

4128 
	`sqlôe3VdbeCh™geP5
(
v
, 
p5Eºmsg
);

4129 
	}
}

4134 
	$sqlôe3UniqueC⁄°øöt
(

4135 
P¨£
 *
pP¨£
,

4136 
⁄Eº‹
,

4137 
Index
 *
pIdx


4139 *
zEº
;

4140 
j
;

4141 
SåAccum
 
îrMsg
;

4142 
TabÀ
 *
pTab
 = 
pIdx
->
pTabÀ
;

4144 
	`sqlôe3SåAccumInô
(&
îrMsg
, 
pP¨£
->
db
, 0, 0, 200);

4145 if–
pIdx
->
aCﬁEx¥
 ){

4146 
	`sqlôe3XPrötf
(&
îrMsg
, "ödex '%q'", 
pIdx
->
zName
);

4148 
j
=0; j<
pIdx
->
nKeyCﬁ
; j++){

4149 *
zCﬁ
;

4150 
	`as£π
–
pIdx
->
aiCﬁumn
[
j
]>=0 );

4151 
zCﬁ
 = 
pTab
->
aCﬁ
[
pIdx
->
aiCﬁumn
[
j
]].
zName
;

4152 if–
j
 ) 
	`sqlôe3SåAccumAµíd
(&
îrMsg
, ", ", 2);

4153 
	`sqlôe3XPrötf
(&
îrMsg
, "%s.%s", 
pTab
->
zName
, 
zCﬁ
);

4156 
zEº
 = 
	`sqlôe3SåAccumFöish
(&
îrMsg
);

4157 
	`sqlôe3HÆtC⁄°øöt
(
pP¨£
,

4158 
	`IsPrim¨yKeyIndex
(
pIdx
Ë? 
SQLITE_CONSTRAINT_PRIMARYKEY


4159 : 
SQLITE_CONSTRAINT_UNIQUE
,

4160 
⁄Eº‹
, 
zEº
, 
P4_DYNAMIC
, 
P5_C⁄°øötUnique
);

4161 
	}
}

4167 
	$sqlôe3RowidC⁄°øöt
(

4168 
P¨£
 *
pP¨£
,

4169 
⁄Eº‹
,

4170 
TabÀ
 *
pTab


4172 *
zMsg
;

4173 
rc
;

4174 if–
pTab
->
iPKey
>=0 ){

4175 
zMsg
 = 
	`sqlôe3MPrötf
(
pP¨£
->
db
, "%s.%s", 
pTab
->
zName
,

4176 
pTab
->
aCﬁ
[pTab->
iPKey
].
zName
);

4177 
rc
 = 
SQLITE_CONSTRAINT_PRIMARYKEY
;

4179 
zMsg
 = 
	`sqlôe3MPrötf
(
pP¨£
->
db
, "%s.rowid", 
pTab
->
zName
);

4180 
rc
 = 
SQLITE_CONSTRAINT_ROWID
;

4182 
	`sqlôe3HÆtC⁄°øöt
(
pP¨£
, 
rc
, 
⁄Eº‹
, 
zMsg
, 
P4_DYNAMIC
,

4183 
P5_C⁄°øötUnique
);

4184 
	}
}

4190 #i‚de‡
SQLITE_OMIT_REINDEX


4191 
	$cﬁœti⁄M©ch
(c⁄° *
zCﬁl
, 
Index
 *
pIndex
){

4192 
i
;

4193 
	`as£π
–
zCﬁl
!=0 );

4194 
i
=0; i<
pIndex
->
nCﬁumn
; i++){

4195 c⁄° *
z
 = 
pIndex
->
azCﬁl
[
i
];

4196 
	`as£π
–
z
!=0 || 
pIndex
->
aiCﬁumn
[
i
]<0 );

4197 if–
pIndex
->
aiCﬁumn
[
i
]>=0 && 0==
	`sqlôe3SåICmp
(
z
, 
zCﬁl
) ){

4202 
	}
}

4209 #i‚de‡
SQLITE_OMIT_REINDEX


4210 
	$ªödexTabÀ
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTab
, c⁄° *
zCﬁl
){

4211 
Index
 *
pIndex
;

4213 
pIndex
=
pTab
->pIndex;ÖIndex;ÖIndexıIndex->
pNext
){

4214 if–
zCﬁl
==0 || 
	`cﬁœti⁄M©ch
(zCﬁl, 
pIndex
) ){

4215 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTab
->
pSchema
);

4216 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 0, 
iDb
);

4217 
	`sqlôe3RefûlIndex
(
pP¨£
, 
pIndex
, -1);

4220 
	}
}

4228 #i‚de‡
SQLITE_OMIT_REINDEX


4229 
	$ªödexD©aba£s
(
P¨£
 *
pP¨£
, c⁄° *
zCﬁl
){

4230 
Db
 *
pDb
;

4231 
iDb
;

4232 
sqlôe3
 *
db
 = 
pP¨£
->db;

4233 
HashEÀm
 *
k
;

4234 
TabÀ
 *
pTab
;

4236 
	`as£π
–
	`sqlôe3BåìHﬁdsAŒMuãxes
(
db
) );

4237 
iDb
=0, 
pDb
=
db
->
aDb
; iDb<db->
nDb
; iDb++,ÖDb++){

4238 
	`as£π
–
pDb
!=0 );

4239 
k
=
	`sqlôeHashFú°
(&
pDb
->
pSchema
->
tblHash
); k; k=
	`sqlôeHashNext
(k)){

4240 
pTab
 = (
TabÀ
*)
	`sqlôeHashD©a
(
k
);

4241 
	`ªödexTabÀ
(
pP¨£
, 
pTab
, 
zCﬁl
);

4244 
	}
}

4260 #i‚de‡
SQLITE_OMIT_REINDEX


4261 
	$sqlôe3Reödex
(
P¨£
 *
pP¨£
, 
Tokí
 *
pName1
, Tokí *
pName2
){

4262 
CﬁlSeq
 *
pCﬁl
;

4263 *
z
;

4264 c⁄° *
zDb
;

4265 
TabÀ
 *
pTab
;

4266 
Index
 *
pIndex
;

4267 
iDb
;

4268 
sqlôe3
 *
db
 = 
pP¨£
->db;

4269 
Tokí
 *
pObjName
;

4273 if–
SQLITE_OK
!=
	`sqlôe3RódSchema
(
pP¨£
) ){

4277 if–
pName1
==0 ){

4278 
	`ªödexD©aba£s
(
pP¨£
, 0);

4280 }if–
	`NEVER
(
pName2
==0Ë||ÖName2->
z
==0 ){

4281 *
zCﬁl
;

4282 
	`as£π
–
pName1
->
z
 );

4283 
zCﬁl
 = 
	`sqlôe3NameFromTokí
(
pP¨£
->
db
, 
pName1
);

4284 if–!
zCﬁl
 ) ;

4285 
pCﬁl
 = 
	`sqlôe3FödCﬁlSeq
(
db
, 
	`ENC
(db), 
zCﬁl
, 0);

4286 if–
pCﬁl
 ){

4287 
	`ªödexD©aba£s
(
pP¨£
, 
zCﬁl
);

4288 
	`sqlôe3DbFªe
(
db
, 
zCﬁl
);

4291 
	`sqlôe3DbFªe
(
db
, 
zCﬁl
);

4293 
iDb
 = 
	`sqlôe3TwoP¨tName
(
pP¨£
, 
pName1
, 
pName2
, &
pObjName
);

4294 if–
iDb
<0 ) ;

4295 
z
 = 
	`sqlôe3NameFromTokí
(
db
, 
pObjName
);

4296 if–
z
==0 ) ;

4297 
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

4298 
pTab
 = 
	`sqlôe3FödTabÀ
(
db
, 
z
, 
zDb
);

4299 if–
pTab
 ){

4300 
	`ªödexTabÀ
(
pP¨£
, 
pTab
, 0);

4301 
	`sqlôe3DbFªe
(
db
, 
z
);

4304 
pIndex
 = 
	`sqlôe3FödIndex
(
db
, 
z
, 
zDb
);

4305 
	`sqlôe3DbFªe
(
db
, 
z
);

4306 if–
pIndex
 ){

4307 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 0, 
iDb
);

4308 
	`sqlôe3RefûlIndex
(
pP¨£
, 
pIndex
, -1);

4311 
	`sqlôe3Eº‹Msg
(
pP¨£
, "unableÅo identifyÅhe objectÅo beÑeindexed");

4312 
	}
}

4325 
KeyInfo
 *
	$sqlôe3KeyInfoOfIndex
(
P¨£
 *
pP¨£
, 
Index
 *
pIdx
){

4326 
i
;

4327 
nCﬁ
 = 
pIdx
->
nCﬁumn
;

4328 
nKey
 = 
pIdx
->
nKeyCﬁ
;

4329 
KeyInfo
 *
pKey
;

4330 if–
pP¨£
->
nEº
 )  0;

4331 if–
pIdx
->
uniqNŸNuŒ
 ){

4332 
pKey
 = 
	`sqlôe3KeyInfoAŒoc
(
pP¨£
->
db
, 
nKey
, 
nCﬁ
-nKey);

4334 
pKey
 = 
	`sqlôe3KeyInfoAŒoc
(
pP¨£
->
db
, 
nCﬁ
, 0);

4336 if–
pKey
 ){

4337 
	`as£π
–
	`sqlôe3KeyInfoIsWrôóbÀ
(
pKey
) );

4338 
i
=0; i<
nCﬁ
; i++){

4339 c⁄° *
zCﬁl
 = 
pIdx
->
azCﬁl
[
i
];

4340 
pKey
->
aCﬁl
[
i
] = 
zCﬁl
==
sqlôe3SåBINARY
 ? 0 :

4341 
	`sqlôe3LoˇãCﬁlSeq
(
pP¨£
, 
zCﬁl
);

4342 
pKey
->
aS‹tOrdî
[
i
] = 
pIdx
->aSortOrder[i];

4344 if–
pP¨£
->
nEº
 ){

4345 
	`sqlôe3KeyInfoUƒef
(
pKey
);

4346 
pKey
 = 0;

4349  
pKey
;

4350 
	}
}

4352 #i‚de‡
SQLITE_OMIT_CTE


4357 
Wôh
 *
	$sqlôe3WôhAdd
(

4358 
P¨£
 *
pP¨£
,

4359 
Wôh
 *
pWôh
,

4360 
Tokí
 *
pName
,

4361 
Ex¥Li°
 *
pArgli°
,

4362 
Sñe˘
 *
pQuîy


4364 
sqlôe3
 *
db
 = 
pP¨£
->db;

4365 
Wôh
 *
pNew
;

4366 *
zName
;

4370 
zName
 = 
	`sqlôe3NameFromTokí
(
pP¨£
->
db
, 
pName
);

4371 if–
zName
 && 
pWôh
 ){

4372 
i
;

4373 
i
=0; i<
pWôh
->
nCã
; i++){

4374 if–
	`sqlôe3SåICmp
(
zName
, 
pWôh
->
a
[
i
].zName)==0 ){

4375 
	`sqlôe3Eº‹Msg
(
pP¨£
, "du∂iˇã WITHÅabÀÇame: %s", 
zName
);

4380 if–
pWôh
 ){

4381 
nByã
 = (*
pWôh
Ë+ (’Wôh->
a
[1]Ë*ÖWôh->
nCã
);

4382 
pNew
 = 
	`sqlôe3DbRóŒoc
(
db
, 
pWôh
, 
nByã
);

4384 
pNew
 = 
	`sqlôe3DbMÆlocZîo
(
db
, (*
pWôh
));

4386 
	`as£π
–(
pNew
!=0 && 
zName
!=0Ë|| 
db
->
mÆlocFaûed
 );

4388 if–
db
->
mÆlocFaûed
 ){

4389 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
pArgli°
);

4390 
	`sqlôe3Sñe˘Dñëe
(
db
, 
pQuîy
);

4391 
	`sqlôe3DbFªe
(
db
, 
zName
);

4392 
pNew
 = 
pWôh
;

4394 
pNew
->
a
[pNew->
nCã
].
pSñe˘
 = 
pQuîy
;

4395 
pNew
->
a
[pNew->
nCã
].
pCﬁs
 = 
pArgli°
;

4396 
pNew
->
a
[pNew->
nCã
].
zName
 = zName;

4397 
pNew
->
a
[pNew->
nCã
].
zCãEº
 = 0;

4398 
pNew
->
nCã
++;

4401  
pNew
;

4402 
	}
}

4407 
	$sqlôe3WôhDñëe
(
sqlôe3
 *
db
, 
Wôh
 *
pWôh
){

4408 if–
pWôh
 ){

4409 
i
;

4410 
i
=0; i<
pWôh
->
nCã
; i++){

4411 
Cã
 *
pCã
 = &
pWôh
->
a
[
i
];

4412 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
pCã
->
pCﬁs
);

4413 
	`sqlôe3Sñe˘Dñëe
(
db
, 
pCã
->
pSñe˘
);

4414 
	`sqlôe3DbFªe
(
db
, 
pCã
->
zName
);

4416 
	`sqlôe3DbFªe
(
db
, 
pWôh
);

4418 
	}
}

	@callback.c

17 
	~"sqlôeI¡.h
"

23 
	$ˇŒCﬁlNìded
(
sqlôe3
 *
db
, 
íc
, c⁄° *
zName
){

24 
	`as£π
–!
db
->
xCﬁlNìded
 || !db->
xCﬁlNìded16
 );

25 if–
db
->
xCﬁlNìded
 ){

26 *
zExã∫Æ
 = 
	`sqlôe3DbSåDup
(
db
, 
zName
);

27 if–!
zExã∫Æ
 ) ;

28 
db
->
	`xCﬁlNìded
(db->
pCﬁlNìdedArg
, db, 
íc
, 
zExã∫Æ
);

29 
	`sqlôe3DbFªe
(
db
, 
zExã∫Æ
);

31 #i‚de‡
SQLITE_OMIT_UTF16


32 if–
db
->
xCﬁlNìded16
 ){

33 c⁄° *
zExã∫Æ
;

34 
sqlôe3_vÆue
 *
pTmp
 = 
	`sqlôe3VÆueNew
(
db
);

35 
	`sqlôe3VÆueSëSå
(
pTmp
, -1, 
zName
, 
SQLITE_UTF8
, 
SQLITE_STATIC
);

36 
zExã∫Æ
 = 
	`sqlôe3VÆueText
(
pTmp
, 
SQLITE_UTF16NATIVE
);

37 if–
zExã∫Æ
 ){

38 
db
->
	`xCﬁlNìded16
(db->
pCﬁlNìdedArg
, db, ()
	`ENC
(db), 
zExã∫Æ
);

40 
	`sqlôe3VÆueFªe
(
pTmp
);

43 
	}
}

52 
	$sy¡hCﬁlSeq
(
sqlôe3
 *
db
, 
CﬁlSeq
 *
pCﬁl
){

53 
CﬁlSeq
 *
pCﬁl2
;

54 *
z
 = 
pCﬁl
->
zName
;

55 
i
;

56 c⁄° 
u8
 
aEnc
[] = { 
SQLITE_UTF16BE
, 
SQLITE_UTF16LE
, 
SQLITE_UTF8
 };

57 
i
=0; i<3; i++){

58 
pCﬁl2
 = 
	`sqlôe3FödCﬁlSeq
(
db
, 
aEnc
[
i
], 
z
, 0);

59 if–
pCﬁl2
->
xCmp
!=0 ){

60 
	`mem˝y
(
pCﬁl
, 
pCﬁl2
, (
CﬁlSeq
));

61 
pCﬁl
->
xDñ
 = 0;

62  
SQLITE_OK
;

65  
SQLITE_ERROR
;

66 
	}
}

82 
CﬁlSeq
 *
	$sqlôe3GëCﬁlSeq
(

83 
P¨£
 *
pP¨£
,

84 
u8
 
íc
,

85 
CﬁlSeq
 *
pCﬁl
,

86 c⁄° *
zName


88 
CﬁlSeq
 *
p
;

89 
sqlôe3
 *
db
 = 
pP¨£
->db;

91 
p
 = 
pCﬁl
;

92 if–!
p
 ){

93 
p
 = 
	`sqlôe3FödCﬁlSeq
(
db
, 
íc
, 
zName
, 0);

95 if–!
p
 || !p->
xCmp
 ){

99 
	`ˇŒCﬁlNìded
(
db
, 
íc
, 
zName
);

100 
p
 = 
	`sqlôe3FödCﬁlSeq
(
db
, 
íc
, 
zName
, 0);

102 if–
p
 && !p->
xCmp
 && 
	`sy¡hCﬁlSeq
(
db
,Ö) ){

103 
p
 = 0;

105 
	`as£π
–!
p
 ||Ö->
xCmp
 );

106 if–
p
==0 ){

107 
	`sqlôe3Eº‹Msg
(
pP¨£
, "nÿsuch cﬁœti⁄ sequí˚: %s", 
zName
);

109  
p
;

110 
	}
}

123 
	$sqlôe3CheckCﬁlSeq
(
P¨£
 *
pP¨£
, 
CﬁlSeq
 *
pCﬁl
){

124 if–
pCﬁl
 ){

125 c⁄° *
zName
 = 
pCﬁl
->zName;

126 
sqlôe3
 *
db
 = 
pP¨£
->db;

127 
CﬁlSeq
 *
p
 = 
	`sqlôe3GëCﬁlSeq
(
pP¨£
, 
	`ENC
(
db
), 
pCﬁl
, 
zName
);

128 if–!
p
 ){

129  
SQLITE_ERROR
;

131 
	`as£π
–
p
==
pCﬁl
 );

133  
SQLITE_OK
;

134 
	}
}

151 
CﬁlSeq
 *
	$födCﬁlSeqE¡ry
(

152 
sqlôe3
 *
db
,

153 c⁄° *
zName
,

154 
¸óã


156 
CﬁlSeq
 *
pCﬁl
;

157 
pCﬁl
 = 
	`sqlôe3HashFöd
(&
db
->
aCﬁlSeq
, 
zName
);

159 if–0==
pCﬁl
 && 
¸óã
 ){

160 
nName
 = 
	`sqlôe3SåÀn30
(
zName
);

161 
pCﬁl
 = 
	`sqlôe3DbMÆlocZîo
(
db
, 3*(*pCﬁlË+ 
nName
 + 1);

162 if–
pCﬁl
 ){

163 
CﬁlSeq
 *
pDñ
 = 0;

164 
pCﬁl
[0].
zName
 = (*)&pColl[3];

165 
pCﬁl
[0].
íc
 = 
SQLITE_UTF8
;

166 
pCﬁl
[1].
zName
 = (*)&pColl[3];

167 
pCﬁl
[1].
íc
 = 
SQLITE_UTF16LE
;

168 
pCﬁl
[2].
zName
 = (*)&pColl[3];

169 
pCﬁl
[2].
íc
 = 
SQLITE_UTF16BE
;

170 
	`mem˝y
(
pCﬁl
[0].
zName
, zName, 
nName
);

171 
pCﬁl
[0].
zName
[
nName
] = 0;

172 
pDñ
 = 
	`sqlôe3HashIn£π
(&
db
->
aCﬁlSeq
, 
pCﬁl
[0].
zName
,ÖColl);

178 
	`as£π
–
pDñ
==0 ||ÖDñ==
pCﬁl
 );

179 if–
pDñ
!=0 ){

180 
	`sqlôe3OomFau…
(
db
);

181 
	`sqlôe3DbFªe
(
db
, 
pDñ
);

182 
pCﬁl
 = 0;

186  
pCﬁl
;

187 
	}
}

204 
CﬁlSeq
 *
	$sqlôe3FödCﬁlSeq
(

205 
sqlôe3
 *
db
,

206 
u8
 
íc
,

207 c⁄° *
zName
,

208 
¸óã


210 
CﬁlSeq
 *
pCﬁl
;

211 if–
zName
 ){

212 
pCﬁl
 = 
	`födCﬁlSeqE¡ry
(
db
, 
zName
, 
¸óã
);

214 
pCﬁl
 = 
db
->
pDÊtCﬁl
;

216 
	`as£π
–
SQLITE_UTF8
==1 && 
SQLITE_UTF16LE
==2 && 
SQLITE_UTF16BE
==3 );

217 
	`as£π
–
íc
>=
SQLITE_UTF8
 &&Énc<=
SQLITE_UTF16BE
 );

218 if–
pCﬁl
 )ÖCﬁ»+
íc
-1;

219  
pCﬁl
;

220 
	}
}

250 
	#FUNC_PERFECT_MATCH
 6

	)

251 
	$m©chQuÆôy
(

252 
FuncDef
 *
p
,

253 
nArg
,

254 
u8
 
íc


256 
m©ch
;

259 if–
nArg
==(-2ËË (
p
->
xSFunc
==0Ë? 0 : 
FUNC_PERFECT_MATCH
;

262 if–
p
->
nArg
!=nArg &&Ö->nArg>=0 )  0;

266 if–
p
->
nArg
==nArg ){

267 
m©ch
 = 4;

269 
m©ch
 = 1;

273 if–
íc
==(
p
->
funcFœgs
 & 
SQLITE_FUNC_ENCMASK
) ){

274 
m©ch
 += 2;

275 }if–(
íc
 & 
p
->
funcFœgs
 & 2)!=0 ){

276 
m©ch
 += 1;

279  
m©ch
;

280 
	}
}

286 
FuncDef
 *
	$fun˘i⁄Sórch
(

287 
h
,

288 c⁄° *
zFunc


290 
FuncDef
 *
p
;

291 
p
=
sqlôe3BuûtöFun˘i⁄s
.
a
[
h
];Ö;Öı->
u
.
pHash
){

292 if–
	`sqlôe3SåICmp
(
p
->
zName
, 
zFunc
)==0 ){

293  
p
;

297 
	}
}

302 
	$sqlôe3In£πBuûtöFuncs
(

303 
FuncDef
 *
aDef
,

304 
nDef


306 
i
;

307 
i
=0; i<
nDef
; i++){

308 
FuncDef
 *
pOthî
;

309 c⁄° *
zName
 = 
aDef
[
i
].zName;

310 
nName
 = 
	`sqlôe3SåÀn30
(
zName
);

311 
h
 = (
sqlôe3UµîToLowî
[(
u8
)
zName
[0]] + 
nName
Ë% 
SQLITE_FUNC_HASH_SZ
;

312 
pOthî
 = 
	`fun˘i⁄Sórch
(
h
, 
zName
);

313 if–
pOthî
 ){

314 
	`as£π
–
pOthî
!=&
aDef
[
i
] &&ÖOthî->
pNext
!=&aDef[i] );

315 
aDef
[
i
].
pNext
 = 
pOthî
->pNext;

316 
pOthî
->
pNext
 = &
aDef
[
i
];

318 
aDef
[
i
].
pNext
 = 0;

319 
aDef
[
i
].
u
.
pHash
 = 
sqlôe3BuûtöFun˘i⁄s
.
a
[
h
];

320 
sqlôe3BuûtöFun˘i⁄s
.
a
[
h
] = &
aDef
[
i
];

323 
	}
}

346 
FuncDef
 *
	$sqlôe3FödFun˘i⁄
(

347 
sqlôe3
 *
db
,

348 c⁄° *
zName
,

349 
nArg
,

350 
u8
 
íc
,

351 
u8
 
¸óãFœg


353 
FuncDef
 *
p
;

354 
FuncDef
 *
pBe°
 = 0;

355 
be°Sc‹e
 = 0;

356 
h
;

357 
nName
;

359 
	`as£π
–
nArg
>=(-2) );

360 
	`as£π
–
nArg
>=(-1Ë|| 
¸óãFœg
==0 );

361 
nName
 = 
	`sqlôe3SåÀn30
(
zName
);

365 
p
 = (
FuncDef
*)
	`sqlôe3HashFöd
(&
db
->
aFunc
, 
zName
);

366  
p
 ){

367 
sc‹e
 = 
	`m©chQuÆôy
(
p
, 
nArg
, 
íc
);

368 if–
sc‹e
>
be°Sc‹e
 ){

369 
pBe°
 = 
p
;

370 
be°Sc‹e
 = 
sc‹e
;

372 
p
 =Ö->
pNext
;

387 if–!
¸óãFœg
 && (
pBe°
==0 || (
db
->
Êags
 & 
SQLITE_Pª„rBuûtö
)!=0) ){

388 
be°Sc‹e
 = 0;

389 
h
 = (
sqlôe3UµîToLowî
[(
u8
)
zName
[0]] + 
nName
Ë% 
SQLITE_FUNC_HASH_SZ
;

390 
p
 = 
	`fun˘i⁄Sórch
(
h
, 
zName
);

391  
p
 ){

392 
sc‹e
 = 
	`m©chQuÆôy
(
p
, 
nArg
, 
íc
);

393 if–
sc‹e
>
be°Sc‹e
 ){

394 
pBe°
 = 
p
;

395 
be°Sc‹e
 = 
sc‹e
;

397 
p
 =Ö->
pNext
;

405 if–
¸óãFœg
 && 
be°Sc‹e
<
FUNC_PERFECT_MATCH
 &&

406 (
pBe°
 = 
	`sqlôe3DbMÆlocZîo
(
db
, (*pBe°)+
nName
+1))!=0 ){

407 
FuncDef
 *
pOthî
;

408 
pBe°
->
zName
 = (const *)&pBest[1];

409 
pBe°
->
nArg
 = (
u16
)nArg;

410 
pBe°
->
funcFœgs
 = 
íc
;

411 
	`mem˝y
((*)&
pBe°
[1], 
zName
, 
nName
+1);

412 
pOthî
 = (
FuncDef
*)
	`sqlôe3HashIn£π
(&
db
->
aFunc
, 
pBe°
->
zName
,ÖBest);

413 if–
pOthî
==
pBe°
 ){

414 
	`sqlôe3DbFªe
(
db
, 
pBe°
);

415 
	`sqlôe3OomFau…
(
db
);

418 
pBe°
->
pNext
 = 
pOthî
;

422 if–
pBe°
 && (pBe°->
xSFunc
 || 
¸óãFœg
) ){

423  
pBe°
;

426 
	}
}

436 
	$sqlôe3SchemaCÀ¨
(*
p
){

437 
Hash
 
ãmp1
;

438 
Hash
 
ãmp2
;

439 
HashEÀm
 *
pEÀm
;

440 
Schema
 *
pSchema
 = (Schem®*)
p
;

442 
ãmp1
 = 
pSchema
->
tblHash
;

443 
ãmp2
 = 
pSchema
->
åigHash
;

444 
	`sqlôe3HashInô
(&
pSchema
->
åigHash
);

445 
	`sqlôe3HashCÀ¨
(&
pSchema
->
idxHash
);

446 
pEÀm
=
	`sqlôeHashFú°
(&
ãmp2
);ÖEÀm;ÖEÀm=
	`sqlôeHashNext
(pElem)){

447 
	`sqlôe3DñëeTriggî
(0, (
Triggî
*)
	`sqlôeHashD©a
(
pEÀm
));

449 
	`sqlôe3HashCÀ¨
(&
ãmp2
);

450 
	`sqlôe3HashInô
(&
pSchema
->
tblHash
);

451 
pEÀm
=
	`sqlôeHashFú°
(&
ãmp1
);ÖEÀm;ÖEÀm=
	`sqlôeHashNext
(pElem)){

452 
TabÀ
 *
pTab
 = 
	`sqlôeHashD©a
(
pEÀm
);

453 
	`sqlôe3DñëeTabÀ
(0, 
pTab
);

455 
	`sqlôe3HashCÀ¨
(&
ãmp1
);

456 
	`sqlôe3HashCÀ¨
(&
pSchema
->
fkeyHash
);

457 
pSchema
->
pSeqTab
 = 0;

458 if–
pSchema
->
schemaFœgs
 & 
DB_SchemaLﬂded
 ){

459 
pSchema
->
iGíî©i⁄
++;

460 
pSchema
->
schemaFœgs
 &~
DB_SchemaLﬂded
;

462 
	}
}

468 
Schema
 *
	$sqlôe3SchemaGë
(
sqlôe3
 *
db
, 
Båì
 *
pBt
){

469 
Schema
 * 
p
;

470 if–
pBt
 ){

471 
p
 = (
Schema
 *)
	`sqlôe3BåìSchema
(
pBt
, (Schema), 
sqlôe3SchemaCÀ¨
);

473 
p
 = (
Schema
 *)
	`sqlôe3DbMÆlocZîo
(0, (Schema));

475 if–!
p
 ){

476 
	`sqlôe3OomFau…
(
db
);

477 }i‡–0==
p
->
fûe_f‹m©
 ){

478 
	`sqlôe3HashInô
(&
p
->
tblHash
);

479 
	`sqlôe3HashInô
(&
p
->
idxHash
);

480 
	`sqlôe3HashInô
(&
p
->
åigHash
);

481 
	`sqlôe3HashInô
(&
p
->
fkeyHash
);

482 
p
->
íc
 = 
SQLITE_UTF8
;

484  
p
;

485 
	}
}

	@complete.c

19 
	~"sqlôeI¡.h
"

20 #i‚de‡
SQLITE_OMIT_COMPLETE


25 #i‚de‡
SQLITE_AMALGAMATION


26 #ifde‡
SQLITE_ASCII


27 
	#IdCh¨
(
C
Ë((
sqlôe3Cty≥M≠
[()C]&0x46)!=0)

	)

29 #ifde‡
SQLITE_EBCDIC


30 c⁄° 
sqlôe3IsEbcdicIdCh¨
[];

31 
	#IdCh¨
(
C
Ë(((
c
=C)>=0x42 && 
sqlôe3IsEbcdicIdCh¨
[c-0x40]))

	)

40 
	#tkSEMI
 0

	)

41 
	#tkWS
 1

	)

42 
	#tkOTHER
 2

	)

43 #i‚de‡
SQLITE_OMIT_TRIGGER


44 
	#tkEXPLAIN
 3

	)

45 
	#tkCREATE
 4

	)

46 
	#tkTEMP
 5

	)

47 
	#tkTRIGGER
 6

	)

48 
	#tkEND
 7

	)

104 
	$sqlôe3_com∂ëe
(c⁄° *
zSql
){

105 
u8
 
°©e
 = 0;

106 
u8
 
tokí
;

108 #i‚de‡
SQLITE_OMIT_TRIGGER


112 c⁄° 
u8
 
å™s
[8][8] = {

128 c⁄° 
u8
 
å™s
[3][3] = {

137 #ifde‡
SQLITE_ENABLE_API_ARMOR


138 if–
zSql
==0 ){

139 ()
SQLITE_MISUSE_BKPT
;

144  *
zSql
 ){

145  *
zSql
 ){

147 
tokí
 = 
tkSEMI
;

155 
tokí
 = 
tkWS
;

159 if–
zSql
[1]!='*' ){

160 
tokí
 = 
tkOTHER
;

163 
zSql
 += 2;

164  
zSql
[0] && (zSql[0]!='*' || zSql[1]!='/') ){ zSql++; }

165 if–
zSql
[0]==0 )  0;

166 
zSql
++;

167 
tokí
 = 
tkWS
;

171 if–
zSql
[1]!='-' ){

172 
tokí
 = 
tkOTHER
;

175  *
zSql
 && *zSql!='\n' ){ zSql++; }

176 if–*
zSql
==0 )  
°©e
==1;

177 
tokí
 = 
tkWS
;

181 
zSql
++;

182  *
zSql
 && *zSql!=']' ){ zSql++; }

183 if–*
zSql
==0 )  0;

184 
tokí
 = 
tkOTHER
;

190 
c
 = *
zSql
;

191 
zSql
++;

192  *
zSql
 && *zSql!=
c
 ){ zSql++; }

193 if–*
zSql
==0 )  0;

194 
tokí
 = 
tkOTHER
;

198 #ifde‡
SQLITE_EBCDIC


199 
c
;

201 if–
	`IdCh¨
((
u8
)*
zSql
) ){

203 
nId
;

204 
nId
=1; 
	`IdCh¨
(
zSql
[nId]);ÇId++){}

205 #ifde‡
SQLITE_OMIT_TRIGGER


206 
tokí
 = 
tkOTHER
;

208  *
zSql
 ){

210 if–
nId
==6 && 
	`sqlôe3SåNICmp
(
zSql
, "create", 6)==0 ){

211 
tokí
 = 
tkCREATE
;

213 
tokí
 = 
tkOTHER
;

218 if–
nId
==7 && 
	`sqlôe3SåNICmp
(
zSql
, "trigger", 7)==0 ){

219 
tokí
 = 
tkTRIGGER
;

220 }if–
nId
==4 && 
	`sqlôe3SåNICmp
(
zSql
, "temp", 4)==0 ){

221 
tokí
 = 
tkTEMP
;

222 }if–
nId
==9 && 
	`sqlôe3SåNICmp
(
zSql
, "temporary", 9)==0 ){

223 
tokí
 = 
tkTEMP
;

225 
tokí
 = 
tkOTHER
;

230 if–
nId
==3 && 
	`sqlôe3SåNICmp
(
zSql
, "end", 3)==0 ){

231 
tokí
 = 
tkEND
;

233 #i‚de‡
SQLITE_OMIT_EXPLAIN


234 if–
nId
==7 && 
	`sqlôe3SåNICmp
(
zSql
, "explain", 7)==0 ){

235 
tokí
 = 
tkEXPLAIN
;

239 
tokí
 = 
tkOTHER
;

244 
tokí
 = 
tkOTHER
;

249 
zSql
 +
nId
-1;

252 
tokí
 = 
tkOTHER
;

257 
°©e
 = 
å™s
[°©e][
tokí
];

258 
zSql
++;

260  
°©e
==1;

261 
	}
}

263 #i‚de‡
SQLITE_OMIT_UTF16


269 
	$sqlôe3_com∂ëe16
(c⁄° *
zSql
){

270 
sqlôe3_vÆue
 *
pVÆ
;

271 c⁄° *
zSql8
;

272 
rc
;

274 #i‚de‡
SQLITE_OMIT_AUTOINIT


275 
rc
 = 
	`sqlôe3_öôülize
();

276 if–
rc
 ) Ñc;

278 
pVÆ
 = 
	`sqlôe3VÆueNew
(0);

279 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, 
zSql
, 
SQLITE_UTF16NATIVE
, 
SQLITE_STATIC
);

280 
zSql8
 = 
	`sqlôe3VÆueText
(
pVÆ
, 
SQLITE_UTF8
);

281 if–
zSql8
 ){

282 
rc
 = 
	`sqlôe3_com∂ëe
(
zSql8
);

284 
rc
 = 
SQLITE_NOMEM_BKPT
;

286 
	`sqlôe3VÆueFªe
(
pVÆ
);

287  
rc
 & 0xff;

288 
	}
}

	@ctime.c

17 #i‚de‡
SQLITE_OMIT_COMPILEOPTION_DIAGS


19 
	~"sqlôeI¡.h
"

29 c⁄° * c⁄° 
	gazCompûeO±
[] = {

33 
	#CTIMEOPT_VAL_
(
›t
Ë#›t

	)

34 
	#CTIMEOPT_VAL
(
›t
Ë
	`CTIMEOPT_VAL_
(›t)

	)

36 #i‡
SQLITE_32BIT_ROWID


39 #i‡
SQLITE_4_BYTE_ALIGNED_MALLOC


42 #i‡
SQLITE_CASE_SENSITIVE_LIKE


45 #i‡
SQLITE_CHECK_PAGES


48 #i‡
SQLITE_COVERAGE_TEST


51 #i‡
SQLITE_DEBUG


54 #i‡
SQLITE_DEFAULT_LOCKING_MODE


55 "DEFAULT_LOCKING_MODE=" 
CTIMEOPT_VAL
(
SQLITE_DEFAULT_LOCKING_MODE
),

57 #i‡
deföed
(
SQLITE_DEFAULT_MMAP_SIZE
Ë&& !deföed(
SQLITE_DEFAULT_MMAP_SIZE_xc
)

58 "DEFAULT_MMAP_SIZE=" 
CTIMEOPT_VAL
(
SQLITE_DEFAULT_MMAP_SIZE
),

60 #i‡
SQLITE_DISABLE_DIRSYNC


63 #i‡
SQLITE_DISABLE_LFS


66 #i‡
SQLITE_ENABLE_8_3_NAMES


69 #i‡
SQLITE_ENABLE_API_ARMOR


72 #i‡
SQLITE_ENABLE_ATOMIC_WRITE


75 #i‡
SQLITE_ENABLE_CEROD


78 #i‡
SQLITE_ENABLE_COLUMN_METADATA


81 #i‡
SQLITE_ENABLE_DBSTAT_VTAB


84 #i‡
SQLITE_ENABLE_EXPENSIVE_ASSERT


87 #i‡
SQLITE_ENABLE_FTS1


90 #i‡
SQLITE_ENABLE_FTS2


93 #i‡
SQLITE_ENABLE_FTS3


96 #i‡
SQLITE_ENABLE_FTS3_PARENTHESIS


99 #i‡
SQLITE_ENABLE_FTS4


102 #i‡
SQLITE_ENABLE_FTS5


105 #i‡
SQLITE_ENABLE_ICU


108 #i‡
SQLITE_ENABLE_IOTRACE


111 #i‡
SQLITE_ENABLE_JSON1


114 #i‡
SQLITE_ENABLE_LOAD_EXTENSION


117 #i‡
SQLITE_ENABLE_LOCKING_STYLE


118 "ENABLE_LOCKING_STYLE=" 
CTIMEOPT_VAL
(
SQLITE_ENABLE_LOCKING_STYLE
),

120 #i‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


123 #i‡
SQLITE_ENABLE_MEMSYS3


126 #i‡
SQLITE_ENABLE_MEMSYS5


129 #i‡
SQLITE_ENABLE_OVERSIZE_CELL_CHECK


132 #i‡
SQLITE_ENABLE_RTREE


135 #i‡
deföed
(
SQLITE_ENABLE_STAT4
)

137 #ñi‡
deföed
(
SQLITE_ENABLE_STAT3
)

140 #i‡
SQLITE_ENABLE_UNLOCK_NOTIFY


143 #i‡
SQLITE_ENABLE_UPDATE_DELETE_LIMIT


146 #i‡
SQLITE_HAS_CODEC


149 #i‡
HAVE_ISNAN
 || 
SQLITE_HAVE_ISNAN


152 #i‡
SQLITE_HOMEGROWN_RECURSIVE_MUTEX


155 #i‡
SQLITE_IGNORE_AFP_LOCK_ERRORS


158 #i‡
SQLITE_IGNORE_FLOCK_LOCK_ERRORS


161 #ifde‡
SQLITE_INT64_TYPE


164 #ifde‡
SQLITE_LIKE_DOESNT_MATCH_BLOBS


167 #i‡
SQLITE_LOCK_TRACE


170 #i‡
deföed
(
SQLITE_MAX_MMAP_SIZE
Ë&& !deföed(
SQLITE_MAX_MMAP_SIZE_xc
)

171 "MAX_MMAP_SIZE=" 
CTIMEOPT_VAL
(
SQLITE_MAX_MMAP_SIZE
),

173 #ifde‡
SQLITE_MAX_SCHEMA_RETRY


174 "MAX_SCHEMA_RETRY=" 
CTIMEOPT_VAL
(
SQLITE_MAX_SCHEMA_RETRY
),

176 #i‡
SQLITE_MEMDEBUG


179 #i‡
SQLITE_MIXED_ENDIAN_64BIT_FLOAT


182 #i‡
SQLITE_NO_SYNC


185 #i‡
SQLITE_OMIT_ALTERTABLE


188 #i‡
SQLITE_OMIT_ANALYZE


191 #i‡
SQLITE_OMIT_ATTACH


194 #i‡
SQLITE_OMIT_AUTHORIZATION


197 #i‡
SQLITE_OMIT_AUTOINCREMENT


200 #i‡
SQLITE_OMIT_AUTOINIT


203 #i‡
SQLITE_OMIT_AUTOMATIC_INDEX


206 #i‡
SQLITE_OMIT_AUTORESET


209 #i‡
SQLITE_OMIT_AUTOVACUUM


212 #i‡
SQLITE_OMIT_BETWEEN_OPTIMIZATION


215 #i‡
SQLITE_OMIT_BLOB_LITERAL


218 #i‡
SQLITE_OMIT_BTREECOUNT


221 #i‡
SQLITE_OMIT_BUILTIN_TEST


224 #i‡
SQLITE_OMIT_CAST


227 #i‡
SQLITE_OMIT_CHECK


230 #i‡
SQLITE_OMIT_COMPLETE


233 #i‡
SQLITE_OMIT_COMPOUND_SELECT


236 #i‡
SQLITE_OMIT_CTE


239 #i‡
SQLITE_OMIT_DATETIME_FUNCS


242 #i‡
SQLITE_OMIT_DECLTYPE


245 #i‡
SQLITE_OMIT_DEPRECATED


248 #i‡
SQLITE_OMIT_DISKIO


251 #i‡
SQLITE_OMIT_EXPLAIN


254 #i‡
SQLITE_OMIT_FLAG_PRAGMAS


257 #i‡
SQLITE_OMIT_FLOATING_POINT


260 #i‡
SQLITE_OMIT_FOREIGN_KEY


263 #i‡
SQLITE_OMIT_GET_TABLE


266 #i‡
SQLITE_OMIT_INCRBLOB


269 #i‡
SQLITE_OMIT_INTEGRITY_CHECK


272 #i‡
SQLITE_OMIT_LIKE_OPTIMIZATION


275 #i‡
SQLITE_OMIT_LOAD_EXTENSION


278 #i‡
SQLITE_OMIT_LOCALTIME


281 #i‡
SQLITE_OMIT_LOOKASIDE


284 #i‡
SQLITE_OMIT_MEMORYDB


287 #i‡
SQLITE_OMIT_OR_OPTIMIZATION


290 #i‡
SQLITE_OMIT_PAGER_PRAGMAS


293 #i‡
SQLITE_OMIT_PRAGMA


296 #i‡
SQLITE_OMIT_PROGRESS_CALLBACK


299 #i‡
SQLITE_OMIT_QUICKBALANCE


302 #i‡
SQLITE_OMIT_REINDEX


305 #i‡
SQLITE_OMIT_SCHEMA_PRAGMAS


308 #i‡
SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS


311 #i‡
SQLITE_OMIT_SHARED_CACHE


314 #i‡
SQLITE_OMIT_SUBQUERY


317 #i‡
SQLITE_OMIT_TCL_VARIABLE


320 #i‡
SQLITE_OMIT_TEMPDB


323 #i‡
SQLITE_OMIT_TRACE


326 #i‡
SQLITE_OMIT_TRIGGER


329 #i‡
SQLITE_OMIT_TRUNCATE_OPTIMIZATION


332 #i‡
SQLITE_OMIT_UTF16


335 #i‡
SQLITE_OMIT_VACUUM


338 #i‡
SQLITE_OMIT_VIEW


341 #i‡
SQLITE_OMIT_VIRTUALTABLE


344 #i‡
SQLITE_OMIT_WAL


347 #i‡
SQLITE_OMIT_WSD


350 #i‡
SQLITE_OMIT_XFER_OPT


353 #i‡
SQLITE_PERFORMANCE_TRACE


356 #i‡
SQLITE_PROXY_DEBUG


359 #i‡
SQLITE_RTREE_INT_ONLY


362 #i‡
SQLITE_SECURE_DELETE


365 #i‡
SQLITE_SMALL_STACK


368 #i‡
SQLITE_SOUNDEX


371 #i‡
SQLITE_SYSTEM_MALLOC


374 #i‡
SQLITE_TCL


377 #i‡
deföed
(
SQLITE_TEMP_STORE
Ë&& !deföed(
SQLITE_TEMP_STORE_xc
)

378 "TEMP_STORE=" 
CTIMEOPT_VAL
(
SQLITE_TEMP_STORE
),

380 #i‡
SQLITE_TEST


383 #i‡
deföed
(
SQLITE_THREADSAFE
)

384 "THREADSAFE=" 
CTIMEOPT_VAL
(
SQLITE_THREADSAFE
),

386 #i‡
SQLITE_USE_ALLOCA


389 #i‡
SQLITE_USER_AUTHENTICATION


392 #i‡
SQLITE_WIN32_MALLOC


395 #i‡
SQLITE_ZERO_MALLOC


407 
	$sqlôe3_compûe›ti⁄_u£d
(c⁄° *
zO±Name
){

408 
i
, 
n
;

410 #i‡
SQLITE_ENABLE_API_ARMOR


411 if–
zO±Name
==0 ){

412 ()
SQLITE_MISUSE_BKPT
;

416 if–
	`sqlôe3SåNICmp
(
zO±Name
, "SQLITE_", 7)==0 ) zOptName += 7;

417 
n
 = 
	`sqlôe3SåÀn30
(
zO±Name
);

421 
i
=0; i<
	`AºaySize
(
azCompûeO±
); i++){

422 if–
	`sqlôe3SåNICmp
(
zO±Name
, 
azCompûeO±
[
i
], 
n
)==0

423 && 
	`sqlôe3IsIdCh¨
(()
azCompûeO±
[
i
][
n
])==0

429 
	}
}

435 c⁄° *
	$sqlôe3_compûe›ti⁄_gë
(
N
){

436 if–
N
>=0 && N<
	`AºaySize
(
azCompûeO±
) ){

437  
azCompûeO±
[
N
];

440 
	}
}

	@date.c

46 
	~"sqlôeI¡.h
"

47 
	~<°dlib.h
>

48 
	~<as£π.h
>

49 
	~<time.h
>

51 #i‚de‡
SQLITE_OMIT_DATETIME_FUNCS


58 #i‡!
deföed
(
SQLITE_OMIT_LOCALTIME
Ë&& deföed(
_WIN32_WCE
) && \

59 (!
deföed
(
SQLITE_MSVC_LOCALTIME_API
Ë|| !
	gSQLITE_MSVC_LOCALTIME_API
)

60 
tm
 *
__cde˛
 
loˇ…ime
(c⁄° 
time_t
 *);

66 
D©eTime
 
	tD©eTime
;

67 
	sD©eTime
 {

68 
sqlôe3_öt64
 
	miJD
;

69 
	mY
, 
	mM
, 
	mD
;

70 
	mh
, 
	mm
;

71 
	mtz
;

72 
	ms
;

73 
	mvÆidYMD
;

74 
	mvÆidHMS
;

75 
	mvÆidJD
;

76 
	mvÆidTZ
;

77 
	mtzSë
;

108 
	$gëDigôs
(c⁄° *
zD©e
, c⁄° *
zF‹m©
, ...){

111 c⁄° 
u16
 
aMx
[] = { 12, 14, 24, 31, 59, 9999 };

112 
va_li°
 
≠
;

113 
˙t
 = 0;

114 
√xtC
;

115 
	`va_°¨t
(
≠
, 
zF‹m©
);

117 
N
 = 
zF‹m©
[0] - '0';

118 
mö
 = 
zF‹m©
[1] - '0';

119 
vÆ
 = 0;

120 
u16
 
max
;

122 
	`as£π
–
zF‹m©
[2]>='a' && zFormat[2]<='f' );

123 
max
 = 
aMx
[
zF‹m©
[2] - 'a'];

124 
√xtC
 = 
zF‹m©
[3];

125 
vÆ
 = 0;

126  
N
-- ){

127 if–!
	`sqlôe3Isdigô
(*
zD©e
) ){

128 
íd_gëDigôs
;

130 
vÆ
 = vÆ*10 + *
zD©e
 - '0';

131 
zD©e
++;

133 if–
vÆ
<()
mö
 || vÆ>()
max
 || (
√xtC
!=0 &&ÇextC!=*
zD©e
) ){

134 
íd_gëDigôs
;

136 *
	`va_¨g
(
≠
,*Ë
vÆ
;

137 
zD©e
++;

138 
˙t
++;

139 
zF‹m©
 += 4;

140 } 
√xtC
 );

141 
íd_gëDigôs
:

142 
	`va_íd
(
≠
);

143  
˙t
;

144 
	}
}

162 
	$∑r£Timez⁄e
(c⁄° *
zD©e
, 
D©eTime
 *
p
){

163 
sgn
 = 0;

164 
nHr
, 
nMn
;

165 
c
;

166  
	`sqlôe3Is•a˚
(*
zD©e
) ){ zDate++; }

167 
p
->
tz
 = 0;

168 
c
 = *
zD©e
;

169 if–
c
=='-' ){

170 
sgn
 = -1;

171 }if–
c
=='+' ){

172 
sgn
 = +1;

173 }if–
c
=='Z' || c=='z' ){

174 
zD©e
++;

175 
zulu_time
;

177  
c
!=0;

179 
zD©e
++;

180 if–
	`gëDigôs
(
zD©e
, "20b:20e", &
nHr
, &
nMn
)!=2 ){

183 
zD©e
 += 5;

184 
p
->
tz
 = 
sgn
*(
nMn
 + 
nHr
*60);

185 
zulu_time
:

186  
	`sqlôe3Is•a˚
(*
zD©e
) ){ zDate++; }

187 
p
->
tzSë
 = 1;

188  *
zD©e
!=0;

189 
	}
}

198 
	$∑r£HhMmSs
(c⁄° *
zD©e
, 
D©eTime
 *
p
){

199 
h
, 
m
, 
s
;

200 
ms
 = 0.0;

201 if–
	`gëDigôs
(
zD©e
, "20c:20e", &
h
, &
m
)!=2 ){

204 
zD©e
 += 5;

205 if–*
zD©e
==':' ){

206 
zD©e
++;

207 if–
	`gëDigôs
(
zD©e
, "20e", &
s
)!=1 ){

210 
zD©e
 += 2;

211 if–*
zD©e
=='.' && 
	`sqlôe3Isdigô
(zDate[1]) ){

212 
rSˇÀ
 = 1.0;

213 
zD©e
++;

214  
	`sqlôe3Isdigô
(*
zD©e
) ){

215 
ms
 = ms*10.0 + *
zD©e
 - '0';

216 
rSˇÀ
 *= 10.0;

217 
zD©e
++;

219 
ms
 /
rSˇÀ
;

222 
s
 = 0;

224 
p
->
vÆidJD
 = 0;

225 
p
->
vÆidHMS
 = 1;

226 
p
->
h
 = h;

227 
p
->
m
 = m;

228 
p
->
s
 = s + 
ms
;

229 if–
	`∑r£Timez⁄e
(
zD©e
, 
p
) )  1;

230 
p
->
vÆidTZ
 = (p->
tz
!=0)?1:0;

232 
	}
}

240 
	$compuãJD
(
D©eTime
 *
p
){

241 
Y
, 
M
, 
D
, 
A
, 
B
, 
X1
, 
X2
;

243 if–
p
->
vÆidJD
 ) ;

244 if–
p
->
vÆidYMD
 ){

245 
Y
 = 
p
->Y;

246 
M
 = 
p
->M;

247 
D
 = 
p
->D;

249 
Y
 = 2000;

250 
M
 = 1;

251 
D
 = 1;

253 if–
M
<=2 ){

254 
Y
--;

255 
M
 += 12;

257 
A
 = 
Y
/100;

258 
B
 = 2 - 
A
 + (A/4);

259 
X1
 = 36525*(
Y
+4716)/100;

260 
X2
 = 306001*(
M
+1)/10000;

261 
p
->
iJD
 = (
sqlôe3_öt64
)((
X1
 + 
X2
 + 
D
 + 
B
 - 1524.5 ) * 86400000);

262 
p
->
vÆidJD
 = 1;

263 if–
p
->
vÆidHMS
 ){

264 
p
->
iJD
 +p->
h
*3600000 +Ö->
m
*60000 + (
sqlôe3_öt64
)’->
s
*1000);

265 if–
p
->
vÆidTZ
 ){

266 
p
->
iJD
 -p->
tz
*60000;

267 
p
->
vÆidYMD
 = 0;

268 
p
->
vÆidHMS
 = 0;

269 
p
->
vÆidTZ
 = 0;

272 
	}
}

286 
	$∑r£YyyyMmDd
(c⁄° *
zD©e
, 
D©eTime
 *
p
){

287 
Y
, 
M
, 
D
, 
√g
;

289 if–
zD©e
[0]=='-' ){

290 
zD©e
++;

291 
√g
 = 1;

293 
√g
 = 0;

295 if–
	`gëDigôs
(
zD©e
, "40f-21a-21d", &
Y
, &
M
, &
D
)!=3 ){

298 
zD©e
 += 10;

299  
	`sqlôe3Is•a˚
(*
zD©e
Ë|| 'T'==*(
u8
*)zDate ){ zDate++; }

300 if–
	`∑r£HhMmSs
(
zD©e
, 
p
)==0 ){

302 }if–*
zD©e
==0 ){

303 
p
->
vÆidHMS
 = 0;

307 
p
->
vÆidJD
 = 0;

308 
p
->
vÆidYMD
 = 1;

309 
p
->
Y
 = 
√g
 ? -Y : Y;

310 
p
->
M
 = M;

311 
p
->
D
 = D;

312 if–
p
->
vÆidTZ
 ){

313 
	`compuãJD
(
p
);

316 
	}
}

323 
	$£tD©eTimeToCuºít
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
D©eTime
 *
p
){

324 
p
->
iJD
 = 
	`sqlôe3StmtCuºítTime
(
c⁄ãxt
);

325 if–
p
->
iJD
>0 ){

326 
p
->
vÆidJD
 = 1;

331 
	}
}

349 
	$∑r£D©eOrTime
(

350 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

351 c⁄° *
zD©e
,

352 
D©eTime
 *
p


354 
r
;

355 if–
	`∑r£YyyyMmDd
(
zD©e
,
p
)==0 ){

357 }if–
	`∑r£HhMmSs
(
zD©e
, 
p
)==0 ){

359 }if–
	`sqlôe3SåICmp
(
zD©e
,"now")==0){

360  
	`£tD©eTimeToCuºít
(
c⁄ãxt
, 
p
);

361 }if–
	`sqlôe3AtoF
(
zD©e
, &
r
, 
	`sqlôe3SåÀn30
(zD©e), 
SQLITE_UTF8
) ){

362 
p
->
iJD
 = (
sqlôe3_öt64
)(
r
*86400000.0 + 0.5);

363 
p
->
vÆidJD
 = 1;

367 
	}
}

372 
	$compuãYMD
(
D©eTime
 *
p
){

373 
Z
, 
A
, 
B
, 
C
, 
D
, 
E
, 
X1
;

374 if–
p
->
vÆidYMD
 ) ;

375 if–!
p
->
vÆidJD
 ){

376 
p
->
Y
 = 2000;

377 
p
->
M
 = 1;

378 
p
->
D
 = 1;

380 
Z
 = ()((
p
->
iJD
 + 43200000)/86400000);

381 
A
 = ()((
Z
 - 1867216.25)/36524.25);

382 
A
 = 
Z
 + 1 + A - (A/4);

383 
B
 = 
A
 + 1524;

384 
C
 = ()((
B
 - 122.1)/365.25);

385 
D
 = (36525*(
C
&32767))/100;

386 
E
 = ()((
B
-
D
)/30.6001);

387 
X1
 = ()(30.6001*
E
);

388 
p
->
D
 = 
B
 - D - 
X1
;

389 
p
->
M
 = 
E
<14 ? E-1 : E-13;

390 
p
->
Y
 =Ö->
M
>2 ? 
C
 - 4716 : C - 4715;

392 
p
->
vÆidYMD
 = 1;

393 
	}
}

398 
	$compuãHMS
(
D©eTime
 *
p
){

399 
s
;

400 if–
p
->
vÆidHMS
 ) ;

401 
	`compuãJD
(
p
);

402 
s
 = ()((
p
->
iJD
 + 43200000) % 86400000);

403 
p
->
s
 = s/1000.0;

404 
s
 = ()
p
->s;

405 
p
->
s
 -= s;

406 
p
->
h
 = 
s
/3600;

407 
s
 -
p
->
h
*3600;

408 
p
->
m
 = 
s
/60;

409 
p
->
s
 +†-Ö->
m
*60;

410 
p
->
vÆidHMS
 = 1;

411 
	}
}

416 
	$compuãYMD_HMS
(
D©eTime
 *
p
){

417 
	`compuãYMD
(
p
);

418 
	`compuãHMS
(
p
);

419 
	}
}

424 
	$˛órYMD_HMS_TZ
(
D©eTime
 *
p
){

425 
p
->
vÆidYMD
 = 0;

426 
p
->
vÆidHMS
 = 0;

427 
p
->
vÆidTZ
 = 0;

428 
	}
}

430 #i‚de‡
SQLITE_OMIT_LOCALTIME


443 #i‡!
HAVE_LOCALTIME_R
 && !
HAVE_LOCALTIME_S
 \

444 && 
deföed
(
_MSC_VER
Ë&& 
	$deföed
(
_CRT_INSECURE_DEPRECATE
)

445 #unde‡
HAVE_LOCALTIME_S


446 
	#HAVE_LOCALTIME_S
 1

	)

462 
	$osLoˇ…ime
(
time_t
 *
t
, 
tm
 *
pTm
){

463 
rc
;

464 #i‡!
HAVE_LOCALTIME_R
 && !
HAVE_LOCALTIME_S


465 
tm
 *
pX
;

466 #i‡
SQLITE_THREADSAFE
>0

467 
sqlôe3_muãx
 *
muãx
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MASTER
);

469 
	`sqlôe3_muãx_íãr
(
muãx
);

470 
pX
 = 
	`loˇ…ime
(
t
);

471 #i‚de‡
SQLITE_OMIT_BUILTIN_TEST


472 if–
sqlôe3GlobÆC⁄fig
.
bLoˇ…imeFau…
 ) 
pX
 = 0;

474 if–
pX
 ) *
pTm
 = *pX;

475 
	`sqlôe3_muãx_Àave
(
muãx
);

476 
rc
 = 
pX
==0;

478 #i‚de‡
SQLITE_OMIT_BUILTIN_TEST


479 if–
sqlôe3GlobÆC⁄fig
.
bLoˇ…imeFau…
 )  1;

481 #i‡
HAVE_LOCALTIME_R


482 
rc
 = 
	`loˇ…ime_r
(
t
, 
pTm
)==0;

484 
rc
 = 
	`loˇ…ime_s
(
pTm
, 
t
);

487  
rc
;

488 
	}
}

492 #i‚de‡
SQLITE_OMIT_LOCALTIME


501 
sqlôe3_öt64
 
	$loˇ…imeOff£t
(

502 
D©eTime
 *
p
,

503 
sqlôe3_c⁄ãxt
 *
pCtx
,

504 *
pRc


506 
D©eTime
 
x
, 
y
;

507 
time_t
 
t
;

508 
tm
 
sLoˇl
;

511 
	`mem£t
(&
sLoˇl
, 0, (sLocal));

513 
x
 = *
p
;

514 
	`compuãYMD_HMS
(&
x
);

515 if–
x
.
Y
<1971 || x.Y>=2038 ){

521 
x
.
Y
 = 2000;

522 
x
.
M
 = 1;

523 
x
.
D
 = 1;

524 
x
.
h
 = 0;

525 
x
.
m
 = 0;

526 
x
.
s
 = 0.0;

528 
s
 = ()(
x
.s + 0.5);

529 
x
.
s
 = s;

531 
x
.
tz
 = 0;

532 
x
.
vÆidJD
 = 0;

533 
	`compuãJD
(&
x
);

534 
t
 = (
time_t
)(
x
.
iJD
/1000 - 21086676*(
i64
)10000);

535 if–
	`osLoˇ…ime
(&
t
, &
sLoˇl
) ){

536 
	`sqlôe3_ªsu…_îr‹
(
pCtx
, "localÅime unavailable", -1);

537 *
pRc
 = 
SQLITE_ERROR
;

540 
y
.
Y
 = 
sLoˇl
.
tm_yór
 + 1900;

541 
y
.
M
 = 
sLoˇl
.
tm_m⁄
 + 1;

542 
y
.
D
 = 
sLoˇl
.
tm_mday
;

543 
y
.
h
 = 
sLoˇl
.
tm_hour
;

544 
y
.
m
 = 
sLoˇl
.
tm_mö
;

545 
y
.
s
 = 
sLoˇl
.
tm_£c
;

546 
y
.
vÆidYMD
 = 1;

547 
y
.
vÆidHMS
 = 1;

548 
y
.
vÆidJD
 = 0;

549 
y
.
vÆidTZ
 = 0;

550 
	`compuãJD
(&
y
);

551 *
pRc
 = 
SQLITE_OK
;

552  
y
.
iJD
 - 
x
.iJD;

553 
	}
}

580 
	$∑r£Modifõr
(
sqlôe3_c⁄ãxt
 *
pCtx
, c⁄° *
zMod
, 
D©eTime
 *
p
){

581 
rc
 = 1;

582 
n
;

583 
r
;

584 *
z
, 
zBuf
[30];

585 
z
 = 
zBuf
;

586 
n
=0;Ç<
	`AºaySize
(
zBuf
)-1 && 
zMod
[n];Ç++){

587 
z
[
n
] = ()
sqlôe3UµîToLowî
[(
u8
)
zMod
[n]];

589 
z
[
n
] = 0;

590  
z
[0] ){

591 #i‚de‡
SQLITE_OMIT_LOCALTIME


598 if–
	`°rcmp
(
z
, "localtime")==0 ){

599 
	`compuãJD
(
p
);

600 
p
->
iJD
 +
	`loˇ…imeOff£t
’, 
pCtx
, &
rc
);

601 
	`˛órYMD_HMS_TZ
(
p
);

613 if–
	`°rcmp
(
z
, "unixïoch")==0 && 
p
->
vÆidJD
 ){

614 
p
->
iJD
 = (p->iJD + 43200)/86400 + 21086676*(
i64
)10000000;

615 
	`˛órYMD_HMS_TZ
(
p
);

616 
rc
 = 0;

618 #i‚de‡
SQLITE_OMIT_LOCALTIME


619 if–
	`°rcmp
(
z
, "utc")==0 ){

620 if–
p
->
tzSë
==0 ){

621 
sqlôe3_öt64
 
c1
;

622 
	`compuãJD
(
p
);

623 
c1
 = 
	`loˇ…imeOff£t
(
p
, 
pCtx
, &
rc
);

624 if–
rc
==
SQLITE_OK
 ){

625 
p
->
iJD
 -
c1
;

626 
	`˛órYMD_HMS_TZ
(
p
);

627 
p
->
iJD
 +
c1
 - 
	`loˇ…imeOff£t
’, 
pCtx
, &
rc
);

629 
p
->
tzSë
 = 1;

631 
rc
 = 
SQLITE_OK
;

645 if–
	`°∫cmp
(
z
, "weekday ", 8)==0

646 && 
	`sqlôe3AtoF
(&
z
[8], &
r
, 
	`sqlôe3SåÀn30
(&z[8]), 
SQLITE_UTF8
)

647 && (
n
=()
r
)==r &&Ç>=0 &&Ñ<7 ){

648 
sqlôe3_öt64
 
Z
;

649 
	`compuãYMD_HMS
(
p
);

650 
p
->
vÆidTZ
 = 0;

651 
p
->
vÆidJD
 = 0;

652 
	`compuãJD
(
p
);

653 
Z
 = ((
p
->
iJD
 + 129600000)/86400000) % 7;

654 if–
Z
>
n
 ) Z -= 7;

655 
p
->
iJD
 +(
n
 - 
Z
)*86400000;

656 
	`˛órYMD_HMS_TZ
(
p
);

657 
rc
 = 0;

668 if–
	`°∫cmp
(
z
, "start of ", 9)!=0 ) ;

669 
z
 += 9;

670 
	`compuãYMD
(
p
);

671 
p
->
vÆidHMS
 = 1;

672 
p
->
h
 =Ö->
m
 = 0;

673 
p
->
s
 = 0.0;

674 
p
->
vÆidTZ
 = 0;

675 
p
->
vÆidJD
 = 0;

676 if–
	`°rcmp
(
z
,"month")==0 ){

677 
p
->
D
 = 1;

678 
rc
 = 0;

679 }if–
	`°rcmp
(
z
,"year")==0 ){

680 
	`compuãYMD
(
p
);

681 
p
->
M
 = 1;

682 
p
->
D
 = 1;

683 
rc
 = 0;

684 }if–
	`°rcmp
(
z
,"day")==0 ){

685 
rc
 = 0;

701 
rRoundî
;

702 
n
=1; 
z
[n] && z[n]!=':' && !
	`sqlôe3Is•a˚
(z[n]);Ç++){}

703 if–!
	`sqlôe3AtoF
(
z
, &
r
, 
n
, 
SQLITE_UTF8
) ){

704 
rc
 = 1;

707 if–
z
[
n
]==':' ){

713 c⁄° *
z2
 = 
z
;

714 
D©eTime
 
tx
;

715 
sqlôe3_öt64
 
day
;

716 if–!
	`sqlôe3Isdigô
(*
z2
) ) z2++;

717 
	`mem£t
(&
tx
, 0, (tx));

718 if–
	`∑r£HhMmSs
(
z2
, &
tx
) ) ;

719 
	`compuãJD
(&
tx
);

720 
tx
.
iJD
 -= 43200000;

721 
day
 = 
tx
.
iJD
/86400000;

722 
tx
.
iJD
 -
day
*86400000;

723 if–
z
[0]=='-' ) 
tx
.
iJD
 = -tx.iJD;

724 
	`compuãJD
(
p
);

725 
	`˛órYMD_HMS_TZ
(
p
);

726 
p
->
iJD
 +
tx
.iJD;

727 
rc
 = 0;

730 
z
 +
n
;

731  
	`sqlôe3Is•a˚
(*
z
) ) z++;

732 
n
 = 
	`sqlôe3SåÀn30
(
z
);

733 if–
n
>10 ||Ç<3 ) ;

734 if–
z
[
n
-1]=='s' ){ z[n-1] = 0;Ç--; }

735 
	`compuãJD
(
p
);

736 
rc
 = 0;

737 
rRoundî
 = 
r
<0 ? -0.5 : +0.5;

738 if–
n
==3 && 
	`°rcmp
(
z
,"day")==0 ){

739 
p
->
iJD
 +(
sqlôe3_öt64
)(
r
*86400000.0 + 
rRoundî
);

740 }if–
n
==4 && 
	`°rcmp
(
z
,"hour")==0 ){

741 
p
->
iJD
 +(
sqlôe3_öt64
)(
r
*(86400000.0/24.0Ë+ 
rRoundî
);

742 }if–
n
==6 && 
	`°rcmp
(
z
,"minute")==0 ){

743 
p
->
iJD
 +(
sqlôe3_öt64
)(
r
*(86400000.0/(24.0*60.0)Ë+ 
rRoundî
);

744 }if–
n
==6 && 
	`°rcmp
(
z
,"second")==0 ){

745 
p
->
iJD
 +(
sqlôe3_öt64
)(
r
*(86400000.0/(24.0*60.0*60.0)Ë+ 
rRoundî
);

746 }if–
n
==5 && 
	`°rcmp
(
z
,"month")==0 ){

747 
x
, 
y
;

748 
	`compuãYMD_HMS
(
p
);

749 
p
->
M
 +()
r
;

750 
x
 = 
p
->
M
>0 ? (p->M-1)/12 : (p->M-12)/12;

751 
p
->
Y
 +
x
;

752 
p
->
M
 -
x
*12;

753 
p
->
vÆidJD
 = 0;

754 
	`compuãJD
(
p
);

755 
y
 = ()
r
;

756 if–
y
!=
r
 ){

757 
p
->
iJD
 +(
sqlôe3_öt64
)((
r
 - 
y
)*30.0*86400000.0 + 
rRoundî
);

759 }if–
n
==4 && 
	`°rcmp
(
z
,"year")==0 ){

760 
y
 = ()
r
;

761 
	`compuãYMD_HMS
(
p
);

762 
p
->
Y
 +
y
;

763 
p
->
vÆidJD
 = 0;

764 
	`compuãJD
(
p
);

765 if–
y
!=
r
 ){

766 
p
->
iJD
 +(
sqlôe3_öt64
)((
r
 - 
y
)*365.0*86400000.0 + 
rRoundî
);

769 
rc
 = 1;

771 
	`˛órYMD_HMS_TZ
(
p
);

778  
rc
;

779 
	}
}

790 
	$isD©e
(

791 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

792 
¨gc
,

793 
sqlôe3_vÆue
 **
¨gv
,

794 
D©eTime
 *
p


796 
i
;

797 c⁄° *
z
;

798 
eTy≥
;

799 
	`mem£t
(
p
, 0, (*p));

800 if–
¨gc
==0 ){

801  
	`£tD©eTimeToCuºít
(
c⁄ãxt
, 
p
);

803 if–(
eTy≥
 = 
	`sqlôe3_vÆue_ty≥
(
¨gv
[0]))==
SQLITE_FLOAT


804 || 
eTy≥
==
SQLITE_INTEGER
 ){

805 
p
->
iJD
 = (
sqlôe3_öt64
)(
	`sqlôe3_vÆue_doubÀ
(
¨gv
[0])*86400000.0 + 0.5);

806 
p
->
vÆidJD
 = 1;

808 
z
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

809 if–!
z
 || 
	`∑r£D©eOrTime
(
c⁄ãxt
, (*)z, 
p
) ){

813 
i
=1; i<
¨gc
; i++){

814 
z
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[
i
]);

815 if–
z
==0 || 
	`∑r£Modifõr
(
c⁄ãxt
, (*)z, 
p
) )  1;

818 
	}
}

831 
	$julündayFunc
(

832 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

833 
¨gc
,

834 
sqlôe3_vÆue
 **
¨gv


836 
D©eTime
 
x
;

837 if–
	`isD©e
(
c⁄ãxt
, 
¨gc
, 
¨gv
, &
x
)==0 ){

838 
	`compuãJD
(&
x
);

839 
	`sqlôe3_ªsu…_doubÀ
(
c⁄ãxt
, 
x
.
iJD
/86400000.0);

841 
	}
}

848 
	$d©ëimeFunc
(

849 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

850 
¨gc
,

851 
sqlôe3_vÆue
 **
¨gv


853 
D©eTime
 
x
;

854 if–
	`isD©e
(
c⁄ãxt
, 
¨gc
, 
¨gv
, &
x
)==0 ){

855 
zBuf
[100];

856 
	`compuãYMD_HMS
(&
x
);

857 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%04d-%02d-%02d %02d:%02d:%02d",

858 
x
.
Y
, x.
M
, x.
D
, x.
h
, x.
m
, ()(x.
s
));

859 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zBuf
, -1, 
SQLITE_TRANSIENT
);

861 
	}
}

868 
	$timeFunc
(

869 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

870 
¨gc
,

871 
sqlôe3_vÆue
 **
¨gv


873 
D©eTime
 
x
;

874 if–
	`isD©e
(
c⁄ãxt
, 
¨gc
, 
¨gv
, &
x
)==0 ){

875 
zBuf
[100];

876 
	`compuãHMS
(&
x
);

877 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%02d:%02d:%02d", 
x
.
h
, x.
m
, ()x.
s
);

878 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zBuf
, -1, 
SQLITE_TRANSIENT
);

880 
	}
}

887 
	$d©eFunc
(

888 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

889 
¨gc
,

890 
sqlôe3_vÆue
 **
¨gv


892 
D©eTime
 
x
;

893 if–
	`isD©e
(
c⁄ãxt
, 
¨gc
, 
¨gv
, &
x
)==0 ){

894 
zBuf
[100];

895 
	`compuãYMD
(&
x
);

896 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%04d-%02d-%02d", 
x
.
Y
, x.
M
, x.
D
);

897 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zBuf
, -1, 
SQLITE_TRANSIENT
);

899 
	}
}

920 
	$°r·imeFunc
(

921 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

922 
¨gc
,

923 
sqlôe3_vÆue
 **
¨gv


925 
D©eTime
 
x
;

926 
u64
 
n
;

927 
size_t
 
i
,
j
;

928 *
z
;

929 
sqlôe3
 *
db
;

930 c⁄° *
zFmt
;

931 
zBuf
[100];

932 if–
¨gc
==0 ) ;

933 
zFmt
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

934 if–
zFmt
==0 || 
	`isD©e
(
c⁄ãxt
, 
¨gc
-1, 
¨gv
+1, &
x
) ) ;

935 
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
);

936 
i
=0, 
n
=1; 
zFmt
[i]; i++,Ç++){

937 if–
zFmt
[
i
]=='%' ){

938  
zFmt
[
i
+1] ){

945 
n
++;

951 
n
 += 8;

954 
n
 += 3;

957 
n
 += 8;

961 
n
 += 50;

966 
i
++;

969 
	`ã°ˇ£
–
n
==(
zBuf
)-1 );

970 
	`ã°ˇ£
–
n
==(
zBuf
) );

971 
	`ã°ˇ£
–
n
==(
u64
)
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
]+1 );

972 
	`ã°ˇ£
–
n
==(
u64
)
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
] );

973 if–
n
<(
zBuf
) ){

974 
z
 = 
zBuf
;

975 }if–
n
>(
u64
)
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
] ){

976 
	`sqlôe3_ªsu…_îr‹_toobig
(
c⁄ãxt
);

979 
z
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, ()
n
);

980 if–
z
==0 ){

981 
	`sqlôe3_ªsu…_îr‹_nomem
(
c⁄ãxt
);

985 
	`compuãJD
(&
x
);

986 
	`compuãYMD_HMS
(&
x
);

987 
i
=
j
=0; 
zFmt
[i]; i++){

988 if–
zFmt
[
i
]!='%' ){

989 
z
[
j
++] = 
zFmt
[
i
];

991 
i
++;

992  
zFmt
[
i
] ){

993 'd': 
	`sqlôe3_¢¥ötf
(3, &
z
[
j
],"%02d",
x
.
D
); j+=2; ;

995 
s
 = 
x
.s;

996 if–
s
>59.999 ) s = 59.999;

997 
	`sqlôe3_¢¥ötf
(7, &
z
[
j
],"%06.3f", 
s
);

998 
j
 +
	`sqlôe3SåÀn30
(&
z
[j]);

1001 'H': 
	`sqlôe3_¢¥ötf
(3, &
z
[
j
],"%02d",
x
.
h
); j+=2; ;

1004 
nDay
;

1005 
D©eTime
 
y
 = 
x
;

1006 
y
.
vÆidJD
 = 0;

1007 
y
.
M
 = 1;

1008 
y
.
D
 = 1;

1009 
	`compuãJD
(&
y
);

1010 
nDay
 = ()((
x
.
iJD
-
y
.iJD+43200000)/86400000);

1011 if–
zFmt
[
i
]=='W' ){

1012 
wd
;

1013 
wd
 = ()(((
x
.
iJD
+43200000)/86400000)%7);

1014 
	`sqlôe3_¢¥ötf
(3, &
z
[
j
],"%02d",(
nDay
+7-
wd
)/7);

1015 
j
 += 2;

1017 
	`sqlôe3_¢¥ötf
(4, &
z
[
j
],"%03d",
nDay
+1);

1018 
j
 += 3;

1023 
	`sqlôe3_¢¥ötf
(20, &
z
[
j
],"%.16g",
x
.
iJD
/86400000.0);

1024 
j
+=
	`sqlôe3SåÀn30
(&
z
[j]);

1027 'm': 
	`sqlôe3_¢¥ötf
(3, &
z
[
j
],"%02d",
x
.
M
); j+=2; ;

1028 'M': 
	`sqlôe3_¢¥ötf
(3, &
z
[
j
],"%02d",
x
.
m
); j+=2; ;

1030 
	`sqlôe3_¢¥ötf
(30,&
z
[
j
],"%lld",

1031 (
i64
)(
x
.
iJD
/1000 - 21086676*(i64)10000));

1032 
j
 +
	`sqlôe3SåÀn30
(&
z
[j]);

1035 'S': 
	`sqlôe3_¢¥ötf
(3,&
z
[
j
],"%02d",()
x
.
s
); j+=2; ;

1037 
z
[
j
++] = ()(((
x
.
iJD
+129600000)/86400000) % 7) + '0';

1041 
	`sqlôe3_¢¥ötf
(5,&
z
[
j
],"%04d",
x
.
Y
); j+=
	`sqlôe3SåÀn30
(&z[j]);

1044 : 
z
[
j
++] = '%'; ;

1048 
z
[
j
] = 0;

1049 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
z
, -1,

1050 
z
==
zBuf
 ? 
SQLITE_TRANSIENT
 : 
SQLITE_DYNAMIC
);

1051 
	}
}

1058 
	$˘imeFunc
(

1059 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

1060 
NŸU£d
,

1061 
sqlôe3_vÆue
 **
NŸU£d2


1063 
	`UNUSED_PARAMETER2
(
NŸU£d
, 
NŸU£d2
);

1064 
	`timeFunc
(
c⁄ãxt
, 0, 0);

1065 
	}
}

1072 
	$cd©eFunc
(

1073 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

1074 
NŸU£d
,

1075 
sqlôe3_vÆue
 **
NŸU£d2


1077 
	`UNUSED_PARAMETER2
(
NŸU£d
, 
NŸU£d2
);

1078 
	`d©eFunc
(
c⁄ãxt
, 0, 0);

1079 
	}
}

1086 
	$˘ime°ampFunc
(

1087 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

1088 
NŸU£d
,

1089 
sqlôe3_vÆue
 **
NŸU£d2


1091 
	`UNUSED_PARAMETER2
(
NŸU£d
, 
NŸU£d2
);

1092 
	`d©ëimeFunc
(
c⁄ãxt
, 0, 0);

1093 
	}
}

1096 #ifde‡
SQLITE_OMIT_DATETIME_FUNCS


1108 
	$cuºítTimeFunc
(

1109 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

1110 
¨gc
,

1111 
sqlôe3_vÆue
 **
¨gv


1113 
time_t
 
t
;

1114 *
zF‹m©
 = (*)
	`sqlôe3_u£r_d©a
(
c⁄ãxt
);

1115 
sqlôe3
 *
db
;

1116 
sqlôe3_öt64
 
iT
;

1117 
tm
 *
pTm
;

1118 
tm
 
sNow
;

1119 
zBuf
[20];

1121 
	`UNUSED_PARAMETER
(
¨gc
);

1122 
	`UNUSED_PARAMETER
(
¨gv
);

1124 
iT
 = 
	`sqlôe3StmtCuºítTime
(
c⁄ãxt
);

1125 if–
iT
<=0 ) ;

1126 
t
 = 
iT
/1000 - 10000*(
sqlôe3_öt64
)21086676;

1127 #i‡
HAVE_GMTIME_R


1128 
pTm
 = 
	`gmtime_r
(&
t
, &
sNow
);

1130 
	`sqlôe3_muãx_íãr
(
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MASTER
));

1131 
pTm
 = 
	`gmtime
(&
t
);

1132 if–
pTm
 ) 
	`mem˝y
(&
sNow
,ÖTm, (sNow));

1133 
	`sqlôe3_muãx_Àave
(
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MASTER
));

1135 if–
pTm
 ){

1136 
	`°r·ime
(
zBuf
, 20, 
zF‹m©
, &
sNow
);

1137 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zBuf
, -1, 
SQLITE_TRANSIENT
);

1139 
	}
}

1147 
	$sqlôe3Regi°îD©eTimeFun˘i⁄s
(){

1148 
FuncDef
 
aD©eTimeFuncs
[] = {

1149 #i‚de‡
SQLITE_OMIT_DATETIME_FUNCS


1150 
	`DFUNCTION
(
julünday
, -1, 0, 0, 
julündayFunc
 ),

1151 
	`DFUNCTION
(
d©e
, -1, 0, 0, 
d©eFunc
 ),

1152 
	`DFUNCTION
(
time
, -1, 0, 0, 
timeFunc
 ),

1153 
	`DFUNCTION
(
d©ëime
, -1, 0, 0, 
d©ëimeFunc
 ),

1154 
	`DFUNCTION
(
°r·ime
, -1, 0, 0, 
°r·imeFunc
 ),

1155 
	`DFUNCTION
(
cuºít_time
, 0, 0, 0, 
˘imeFunc
 ),

1156 
	`DFUNCTION
(
cuºít_time°amp
, 0, 0, 0, 
˘ime°ampFunc
),

1157 
	`DFUNCTION
(
cuºít_d©e
, 0, 0, 0, 
cd©eFunc
 ),

1159 
	`STR_FUNCTION
(
cuºít_time
, 0, "%H:%M:%S", 0, 
cuºítTimeFunc
),

1160 
	`STR_FUNCTION
(
cuºít_d©e
, 0, "%Y-%m-%d", 0, 
cuºítTimeFunc
),

1161 
	`STR_FUNCTION
(
cuºít_time°amp
, 0, "%Y-%m-%d %H:%M:%S", 0, 
cuºítTimeFunc
),

1164 
	`sqlôe3In£πBuûtöFuncs
(
aD©eTimeFuncs
, 
	`AºaySize
(aDateTimeFuncs));

1165 
	}
}

	@dbstat.c

24 
	~"sqlôeI¡.h
"

25 #i‡(
deföed
(
SQLITE_ENABLE_DBSTAT_VTAB
Ë|| deföed(
SQLITE_TEST
)) \

26 && !
	$deföed
(
SQLITE_OMIT_VIRTUALTABLE
)

59 
	#VTAB_SCHEMA
 \

72 ");"

	)

75 
SètTabÀ
 
	tSètTabÀ
;

76 
SètCurs‹
 
	tSètCurs‹
;

77 
SètPage
 
	tSètPage
;

78 
SètCñl
 
	tSètCñl
;

80 
	sSètCñl
 {

81 
nLoˇl
;

82 
u32
 
iChûdPg
;

83 
nOvÊ
;

84 
u32
 *
aOvÊ
;

85 
nLa°OvÊ
;

86 
iOvÊ
;

89 
	sSètPage
 {

90 
u32
 
iPgno
;

91 
DbPage
 *
pPg
;

92 
iCñl
;

94 *
zP©h
;

97 
u8
 
Êags
;

98 
nCñl
;

99 
nUnu£d
;

100 
SètCñl
 *
aCñl
;

101 
u32
 
iRightChûdPg
;

102 
nMxPaylﬂd
;

105 
	sSètCurs‹
 {

106 
sqlôe3_vèb_curs‹
 
ba£
;

107 
sqlôe3_°mt
 *
pStmt
;

108 
isEof
;

109 
iDb
;

111 
SètPage
 
aPage
[32];

112 
iPage
;

115 *
zName
;

116 *
zP©h
;

117 
u32
 
iPagío
;

118 *
zPagëy≥
;

119 
nCñl
;

120 
nPaylﬂd
;

121 
nUnu£d
;

122 
nMxPaylﬂd
;

123 
i64
 
iOff£t
;

124 
szPage
;

127 
	sSètTabÀ
 {

128 
sqlôe3_vèb
 
ba£
;

129 
sqlôe3
 *
db
;

130 
iDb
;

133 #i‚de‡
gë2byã


134 
	#gë2byã
(
x
Ë((x)[0]<<8 | (x)[1])

	)

140 
	$°©C⁄√˘
(

141 
sqlôe3
 *
db
,

142 *
pAux
,

143 
¨gc
, c⁄° *c⁄°*
¨gv
,

144 
sqlôe3_vèb
 **
µVèb
,

145 **
pzEº


147 
SètTabÀ
 *
pTab
 = 0;

148 
rc
 = 
SQLITE_OK
;

149 
iDb
;

151 if–
¨gc
>=4 ){

152 
Tokí
 
nm
;

153 
	`sqlôe3TokíInô
(&
nm
, (*)
¨gv
[3]);

154 
iDb
 = 
	`sqlôe3FödDb
(
db
, &
nm
);

155 if–
iDb
<0 ){

156 *
pzEº
 = 
	`sqlôe3_m¥ötf
("nÿsuch d©aba£: %s", 
¨gv
[3]);

157  
SQLITE_ERROR
;

160 
iDb
 = 0;

162 
rc
 = 
	`sqlôe3_de˛¨e_vèb
(
db
, 
VTAB_SCHEMA
);

163 if–
rc
==
SQLITE_OK
 ){

164 
pTab
 = (
SètTabÀ
 *)
	`sqlôe3_mÆloc64
((StatTable));

165 if–
pTab
==0 ) 
rc
 = 
SQLITE_NOMEM_BKPT
;

168 
	`as£π
–
rc
==
SQLITE_OK
 || 
pTab
==0 );

169 if–
rc
==
SQLITE_OK
 ){

170 
	`mem£t
(
pTab
, 0, (
SètTabÀ
));

171 
pTab
->
db
 = db;

172 
pTab
->
iDb
 = iDb;

175 *
µVèb
 = (
sqlôe3_vèb
*)
pTab
;

176  
rc
;

177 
	}
}

182 
	$°©Disc⁄√˘
(
sqlôe3_vèb
 *
pVèb
){

183 
	`sqlôe3_‰ì
(
pVèb
);

184  
SQLITE_OK
;

185 
	}
}

194 
	$°©Be°Index
(
sqlôe3_vèb
 *
èb
, 
sqlôe3_ödex_öfo
 *
pIdxInfo
){

195 
i
;

197 
pIdxInfo
->
e°im©edCo°
 = 1.0e6;

204 
i
=0; i<
pIdxInfo
->
nC⁄°øöt
; i++){

205 if–
pIdxInfo
->
aC⁄°øöt
[
i
].
ußbÀ
==0 ) ;

206 if–
pIdxInfo
->
aC⁄°øöt
[
i
].
›
!=
SQLITE_INDEX_CONSTRAINT_EQ
 ) ;

207 if–
pIdxInfo
->
aC⁄°øöt
[
i
].
iCﬁumn
!=10 ) ;

208 
pIdxInfo
->
idxNum
 = 1;

209 
pIdxInfo
->
e°im©edCo°
 = 1.0;

210 
pIdxInfo
->
aC⁄°øötUßge
[
i
].
¨gvIndex
 = 1;

211 
pIdxInfo
->
aC⁄°øötUßge
[
i
].
omô
 = 1;

220 if––
pIdxInfo
->
nOrdîBy
==1

221 && 
pIdxInfo
->
aOrdîBy
[0].
iCﬁumn
==0

222 && 
pIdxInfo
->
aOrdîBy
[0].
desc
==0

224 –
pIdxInfo
->
nOrdîBy
==2

225 && 
pIdxInfo
->
aOrdîBy
[0].
iCﬁumn
==0

226 && 
pIdxInfo
->
aOrdîBy
[0].
desc
==0

227 && 
pIdxInfo
->
aOrdîBy
[1].
iCﬁumn
==1

228 && 
pIdxInfo
->
aOrdîBy
[1].
desc
==0

231 
pIdxInfo
->
‹dîByC⁄sumed
 = 1;

234  
SQLITE_OK
;

235 
	}
}

240 
	$°©O≥n
(
sqlôe3_vèb
 *
pVTab
, 
sqlôe3_vèb_curs‹
 **
µCurs‹
){

241 
SètTabÀ
 *
pTab
 = (SètTabÀ *)
pVTab
;

242 
SètCurs‹
 *
pC§
;

244 
pC§
 = (
SètCurs‹
 *)
	`sqlôe3_mÆloc64
((StatCursor));

245 if–
pC§
==0 ){

246  
SQLITE_NOMEM_BKPT
;

248 
	`mem£t
(
pC§
, 0, (
SètCurs‹
));

249 
pC§
->
ba£
.
pVèb
 = 
pVTab
;

250 
pC§
->
iDb
 = 
pTab
->iDb;

253 *
µCurs‹
 = (
sqlôe3_vèb_curs‹
 *)
pC§
;

254  
SQLITE_OK
;

255 
	}
}

257 
	$°©CÀ¨Page
(
SètPage
 *
p
){

258 
i
;

259 if–
p
->
aCñl
 ){

260 
i
=0; i<
p
->
nCñl
; i++){

261 
	`sqlôe3_‰ì
(
p
->
aCñl
[
i
].
aOvÊ
);

263 
	`sqlôe3_‰ì
(
p
->
aCñl
);

265 
	`sqlôe3PagîUƒef
(
p
->
pPg
);

266 
	`sqlôe3_‰ì
(
p
->
zP©h
);

267 
	`mem£t
(
p
, 0, (
SètPage
));

268 
	}
}

270 
	$°©Re£tC§
(
SètCurs‹
 *
pC§
){

271 
i
;

272 
	`sqlôe3_ª£t
(
pC§
->
pStmt
);

273 
i
=0; i<
	`AºaySize
(
pC§
->
aPage
); i++){

274 
	`°©CÀ¨Page
(&
pC§
->
aPage
[
i
]);

276 
pC§
->
iPage
 = 0;

277 
	`sqlôe3_‰ì
(
pC§
->
zP©h
);

278 
pC§
->
zP©h
 = 0;

279 
pC§
->
isEof
 = 0;

280 
	}
}

285 
	$°©Clo£
(
sqlôe3_vèb_curs‹
 *
pCurs‹
){

286 
SètCurs‹
 *
pC§
 = (SètCurs‹ *)
pCurs‹
;

287 
	`°©Re£tC§
(
pC§
);

288 
	`sqlôe3_föÆize
(
pC§
->
pStmt
);

289 
	`sqlôe3_‰ì
(
pC§
);

290  
SQLITE_OK
;

291 
	}
}

293 
	$gëLoˇlPaylﬂd
(

294 
nUßbÀ
,

295 
u8
 
Êags
,

296 
nTŸÆ
,

297 *
≤Loˇl


299 
nLoˇl
;

300 
nMöLoˇl
;

301 
nMaxLoˇl
;

303 if–
Êags
==0x0D ){

304 
nMöLoˇl
 = (
nUßbÀ
 - 12) * 32 / 255 - 23;

305 
nMaxLoˇl
 = 
nUßbÀ
 - 35;

307 
nMöLoˇl
 = (
nUßbÀ
 - 12) * 32 / 255 - 23;

308 
nMaxLoˇl
 = (
nUßbÀ
 - 12) * 64 / 255 - 23;

311 
nLoˇl
 = 
nMöLoˇl
 + (
nTŸÆ
 -ÇMöLoˇlË% (
nUßbÀ
 - 4);

312 if–
nLoˇl
>
nMaxLoˇl
 )ÇLoˇ»
nMöLoˇl
;

313 *
≤Loˇl
 = 
nLoˇl
;

314 
	}
}

316 
	$°©DecodePage
(
Båì
 *
pBt
, 
SètPage
 *
p
){

317 
nUnu£d
;

318 
iOff
;

319 
nHdr
;

320 
isLóf
;

321 
szPage
;

323 
u8
 *
aD©a
 = 
	`sqlôe3PagîGëD©a
(
p
->
pPg
);

324 
u8
 *
aHdr
 = &
aD©a
[
p
->
iPgno
==1 ? 100 : 0];

326 
p
->
Êags
 = 
aHdr
[0];

327 
p
->
nCñl
 = 
	`gë2byã
(&
aHdr
[3]);

328 
p
->
nMxPaylﬂd
 = 0;

330 
isLóf
 = (
p
->
Êags
==0x0A ||Ö->flags==0x0D);

331 
nHdr
 = 12 - 
isLóf
*4 + (
p
->
iPgno
==1)*100;

333 
nUnu£d
 = 
	`gë2byã
(&
aHdr
[5]Ë- 
nHdr
 - 2*
p
->
nCñl
;

334 
nUnu£d
 +()
aHdr
[7];

335 
iOff
 = 
	`gë2byã
(&
aHdr
[1]);

336  
iOff
 ){

337 
nUnu£d
 +
	`gë2byã
(&
aD©a
[
iOff
+2]);

338 
iOff
 = 
	`gë2byã
(&
aD©a
[iOff]);

340 
p
->
nUnu£d
 =ÇUnused;

341 
p
->
iRightChûdPg
 = 
isLóf
 ? 0 : 
	`sqlôe3Gë4byã
(&
aHdr
[8]);

342 
szPage
 = 
	`sqlôe3BåìGëPageSize
(
pBt
);

344 if–
p
->
nCñl
 ){

345 
i
;

346 
nUßbÀ
;

348 
	`sqlôe3BåìE¡î
(
pBt
);

349 
nUßbÀ
 = 
szPage
 - 
	`sqlôe3BåìGëRe£rveNoMuãx
(
pBt
);

350 
	`sqlôe3BåìLóve
(
pBt
);

351 
p
->
aCñl
 = 
	`sqlôe3_mÆloc64
(’->
nCñl
+1Ë* (
SètCñl
));

352 if–
p
->
aCñl
==0 )  
SQLITE_NOMEM_BKPT
;

353 
	`mem£t
(
p
->
aCñl
, 0, (p->
nCñl
+1Ë* (
SètCñl
));

355 
i
=0; i<
p
->
nCñl
; i++){

356 
SètCñl
 *
pCñl
 = &
p
->
aCñl
[
i
];

358 
iOff
 = 
	`gë2byã
(&
aD©a
[
nHdr
+
i
*2]);

359 if–!
isLóf
 ){

360 
pCñl
->
iChûdPg
 = 
	`sqlôe3Gë4byã
(&
aD©a
[
iOff
]);

361 
iOff
 += 4;

363 if–
p
->
Êags
==0x05 ){

366 
u32
 
nPaylﬂd
;

367 
nLoˇl
;

368 
iOff
 +
	`gëV¨öt32
(&
aD©a
[iOff], 
nPaylﬂd
);

369 if–
p
->
Êags
==0x0D ){

370 
u64
 
dummy
;

371 
iOff
 +
	`sqlôe3GëV¨öt
(&
aD©a
[iOff], &
dummy
);

373 if–
nPaylﬂd
>(
u32
)
p
->
nMxPaylﬂd
 )Ö->nMxPayload =ÇPayload;

374 
	`gëLoˇlPaylﬂd
(
nUßbÀ
, 
p
->
Êags
, 
nPaylﬂd
, &
nLoˇl
);

375 
pCñl
->
nLoˇl
 =ÇLocal;

376 
	`as£π
–
nLoˇl
>=0 );

377 
	`as£π
–
nPaylﬂd
>=(
u32
)
nLoˇl
 );

378 
	`as£π
–
nLoˇl
<=(
nUßbÀ
-35) );

379 if–
nPaylﬂd
>(
u32
)
nLoˇl
 ){

380 
j
;

381 
nOvÊ
 = ((
nPaylﬂd
 - 
nLoˇl
Ë+ 
nUßbÀ
-4 - 1) / (nUsable - 4);

382 
pCñl
->
nLa°OvÊ
 = (
nPaylﬂd
-
nLoˇl
Ë- (
nOvÊ
-1Ë* (
nUßbÀ
-4);

383 
pCñl
->
nOvÊ
 =ÇOvfl;

384 
pCñl
->
aOvÊ
 = 
	`sqlôe3_mÆloc64
((
u32
)*
nOvÊ
);

385 if–
pCñl
->
aOvÊ
==0 )  
SQLITE_NOMEM_BKPT
;

386 
pCñl
->
aOvÊ
[0] = 
	`sqlôe3Gë4byã
(&
aD©a
[
iOff
+
nLoˇl
]);

387 
j
=1; j<
nOvÊ
; j++){

388 
rc
;

389 
u32
 
iPªv
 = 
pCñl
->
aOvÊ
[
j
-1];

390 
DbPage
 *
pPg
 = 0;

391 
rc
 = 
	`sqlôe3PagîGë
(
	`sqlôe3BåìPagî
(
pBt
), 
iPªv
, &
pPg
, 0);

392 if–
rc
!=
SQLITE_OK
 ){

393 
	`as£π
–
pPg
==0 );

394  
rc
;

396 
pCñl
->
aOvÊ
[
j
] = 
	`sqlôe3Gë4byã
(
	`sqlôe3PagîGëD©a
(
pPg
));

397 
	`sqlôe3PagîUƒef
(
pPg
);

404  
SQLITE_OK
;

405 
	}
}

411 
	$°©SizeAndOff£t
(
SètCurs‹
 *
pC§
){

412 
SètTabÀ
 *
pTab
 = (SètTabÀ *)((
sqlôe3_vèb_curs‹
 *)
pC§
)->
pVèb
;

413 
Båì
 *
pBt
 = 
pTab
->
db
->
aDb
[pTab->
iDb
].pBt;

414 
Pagî
 *
pPagî
 = 
	`sqlôe3BåìPagî
(
pBt
);

415 
sqlôe3_fûe
 *
fd
;

416 
sqlôe3_öt64
 
x
[2];

419 
pC§
->
szPage
 = 
	`sqlôe3BåìGëPageSize
(
pBt
);

420 
pC§
->
iOff£t
 = (
i64
ÌC§->
szPage
 * (pC§->
iPagío
 - 1);

425 
fd
 = 
	`sqlôe3PagîFûe
(
pPagî
);

426 
x
[0] = 
pC§
->
iPagío
;

427 if–
fd
->
pMëhods
!=0 && 
	`sqlôe3OsFûeC⁄åﬁ
(fd, 230440, &
x
)==
SQLITE_OK
 ){

428 
pC§
->
iOff£t
 = 
x
[0];

429 
pC§
->
szPage
 = ()
x
[1];

431 
	}
}

436 
	$°©Next
(
sqlôe3_vèb_curs‹
 *
pCurs‹
){

437 
rc
;

438 
nPaylﬂd
;

439 *
z
;

440 
SètCurs‹
 *
pC§
 = (SètCurs‹ *)
pCurs‹
;

441 
SètTabÀ
 *
pTab
 = (SètTabÀ *)
pCurs‹
->
pVèb
;

442 
Båì
 *
pBt
 = 
pTab
->
db
->
aDb
[
pC§
->
iDb
].pBt;

443 
Pagî
 *
pPagî
 = 
	`sqlôe3BåìPagî
(
pBt
);

445 
	`sqlôe3_‰ì
(
pC§
->
zP©h
);

446 
pC§
->
zP©h
 = 0;

448 
°©NextRe°¨t
:

449 if–
pC§
->
aPage
[0].
pPg
==0 ){

450 
rc
 = 
	`sqlôe3_°ï
(
pC§
->
pStmt
);

451 if–
rc
==
SQLITE_ROW
 ){

452 
nPage
;

453 
u32
 
iRoŸ
 = (u32)
	`sqlôe3_cﬁumn_öt64
(
pC§
->
pStmt
, 1);

454 
	`sqlôe3PagîPagecou¡
(
pPagî
, &
nPage
);

455 if–
nPage
==0 ){

456 
pC§
->
isEof
 = 1;

457  
	`sqlôe3_ª£t
(
pC§
->
pStmt
);

459 
rc
 = 
	`sqlôe3PagîGë
(
pPagî
, 
iRoŸ
, &
pC§
->
aPage
[0].
pPg
, 0);

460 
pC§
->
aPage
[0].
iPgno
 = 
iRoŸ
;

461 
pC§
->
aPage
[0].
iCñl
 = 0;

462 
pC§
->
aPage
[0].
zP©h
 = 
z
 = 
	`sqlôe3_m¥ötf
("/");

463 
pC§
->
iPage
 = 0;

464 if–
z
==0 ) 
rc
 = 
SQLITE_NOMEM_BKPT
;

466 
pC§
->
isEof
 = 1;

467  
	`sqlôe3_ª£t
(
pC§
->
pStmt
);

472 
SètPage
 *
p
 = &
pC§
->
aPage
[pC§->
iPage
];

474  
p
->
iCñl
<p->
nCñl
 ){

475 
SètCñl
 *
pCñl
 = &
p
->
aCñl
[p->
iCñl
];

476 if–
pCñl
->
iOvÊ
<pCñl->
nOvÊ
 ){

477 
nUßbÀ
;

478 
	`sqlôe3BåìE¡î
(
pBt
);

479 
nUßbÀ
 = 
	`sqlôe3BåìGëPageSize
(
pBt
) -

480 
	`sqlôe3BåìGëRe£rveNoMuãx
(
pBt
);

481 
	`sqlôe3BåìLóve
(
pBt
);

482 
pC§
->
zName
 = (*)
	`sqlôe3_cﬁumn_ãxt
’C§->
pStmt
, 0);

483 
pC§
->
iPagío
 = 
pCñl
->
aOvÊ
[pCñl->
iOvÊ
];

484 
pC§
->
zPagëy≥
 = "overflow";

485 
pC§
->
nCñl
 = 0;

486 
pC§
->
nMxPaylﬂd
 = 0;

487 
pC§
->
zP©h
 = 
z
 = 
	`sqlôe3_m¥ötf
(

488 "%s%.3x+%.6x", 
p
->
zP©h
,Ö->
iCñl
, 
pCñl
->
iOvÊ


490 if–
pCñl
->
iOvÊ
<pCñl->
nOvÊ
-1 ){

491 
pC§
->
nUnu£d
 = 0;

492 
pC§
->
nPaylﬂd
 = 
nUßbÀ
 - 4;

494 
pC§
->
nPaylﬂd
 = 
pCñl
->
nLa°OvÊ
;

495 
pC§
->
nUnu£d
 = 
nUßbÀ
 - 4 -ÖC§->
nPaylﬂd
;

497 
pCñl
->
iOvÊ
++;

498 
	`°©SizeAndOff£t
(
pC§
);

499  
z
==0 ? 
SQLITE_NOMEM_BKPT
 : 
SQLITE_OK
;

501 if–
p
->
iRightChûdPg
 ) ;

502 
p
->
iCñl
++;

505 if–!
p
->
iRightChûdPg
 ||Ö->
iCñl
>p->
nCñl
 ){

506 
	`°©CÀ¨Page
(
p
);

507 if–
pC§
->
iPage
==0 )  
	`°©Next
(
pCurs‹
);

508 
pC§
->
iPage
--;

509 
°©NextRe°¨t
;

511 
pC§
->
iPage
++;

512 
	`as£π
–
p
==&
pC§
->
aPage
[pC§->
iPage
-1] );

514 if–
p
->
iCñl
=ı->
nCñl
 ){

515 
p
[1].
iPgno
 =Ö->
iRightChûdPg
;

517 
p
[1].
iPgno
 =Ö->
aCñl
[p->
iCñl
].
iChûdPg
;

519 
rc
 = 
	`sqlôe3PagîGë
(
pPagî
, 
p
[1].
iPgno
, &p[1].
pPg
, 0);

520 
p
[1].
iCñl
 = 0;

521 
p
[1].
zP©h
 = 
z
 = 
	`sqlôe3_m¥ötf
("%s%.3x/",Ö->zP©h,Ö->
iCñl
);

522 
p
->
iCñl
++;

523 if–
z
==0 ) 
rc
 = 
SQLITE_NOMEM_BKPT
;

530 if–
rc
==
SQLITE_OK
 ){

531 
i
;

532 
SètPage
 *
p
 = &
pC§
->
aPage
[pC§->
iPage
];

533 
pC§
->
zName
 = (*)
	`sqlôe3_cﬁumn_ãxt
’C§->
pStmt
, 0);

534 
pC§
->
iPagío
 = 
p
->
iPgno
;

536 
rc
 = 
	`°©DecodePage
(
pBt
, 
p
);

537 if–
rc
==
SQLITE_OK
 ){

538 
	`°©SizeAndOff£t
(
pC§
);

540  
p
->
Êags
 ){

543 
pC§
->
zPagëy≥
 = "internal";

547 
pC§
->
zPagëy≥
 = "leaf";

550 
pC§
->
zPagëy≥
 = "corrupted";

553 
pC§
->
nCñl
 = 
p
->nCell;

554 
pC§
->
nUnu£d
 = 
p
->nUnused;

555 
pC§
->
nMxPaylﬂd
 = 
p
->nMxPayload;

556 
pC§
->
zP©h
 = 
z
 = 
	`sqlôe3_m¥ötf
("%s", 
p
->zPath);

557 if–
z
==0 ) 
rc
 = 
SQLITE_NOMEM_BKPT
;

558 
nPaylﬂd
 = 0;

559 
i
=0; i<
p
->
nCñl
; i++){

560 
nPaylﬂd
 +
p
->
aCñl
[
i
].
nLoˇl
;

562 
pC§
->
nPaylﬂd
 =ÇPayload;

566  
rc
;

567 
	}
}

569 
	$°©Eof
(
sqlôe3_vèb_curs‹
 *
pCurs‹
){

570 
SètCurs‹
 *
pC§
 = (SètCurs‹ *)
pCurs‹
;

571  
pC§
->
isEof
;

572 
	}
}

574 
	$°©Fûãr
(

575 
sqlôe3_vèb_curs‹
 *
pCurs‹
,

576 
idxNum
, c⁄° *
idxSå
,

577 
¨gc
, 
sqlôe3_vÆue
 **
¨gv


579 
SètCurs‹
 *
pC§
 = (SètCurs‹ *)
pCurs‹
;

580 
SètTabÀ
 *
pTab
 = (SètTabÀ*)(
pCurs‹
->
pVèb
);

581 *
zSql
;

582 
rc
 = 
SQLITE_OK
;

583 *
zMa°î
;

585 if–
idxNum
==1 ){

586 c⁄° *
zDba£
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

587 
pC§
->
iDb
 = 
	`sqlôe3FödDbName
(
pTab
->
db
, 
zDba£
);

588 if–
pC§
->
iDb
<0 ){

589 
	`sqlôe3_‰ì
(
pCurs‹
->
pVèb
->
zEºMsg
);

590 
pCurs‹
->
pVèb
->
zEºMsg
 = 
	`sqlôe3_m¥ötf
("nÿsuch schema: %s", 
zDba£
);

591  
pCurs‹
->
pVèb
->
zEºMsg
 ? 
SQLITE_ERROR
 : 
SQLITE_NOMEM_BKPT
;

594 
pC§
->
iDb
 = 
pTab
->iDb;

596 
	`°©Re£tC§
(
pC§
);

597 
	`sqlôe3_föÆize
(
pC§
->
pStmt
);

598 
pC§
->
pStmt
 = 0;

599 
zMa°î
 = 
pC§
->
iDb
==1 ? "sqlite_temp_master" : "sqlite_master";

600 
zSql
 = 
	`sqlôe3_m¥ötf
(

605 " ORDER BYÇame", 
pTab
->
db
->
aDb
[
pC§
->
iDb
].
zName
, 
zMa°î
);

606 if–
zSql
==0 ){

607  
SQLITE_NOMEM_BKPT
;

609 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
pTab
->
db
, 
zSql
, -1, &
pC§
->
pStmt
, 0);

610 
	`sqlôe3_‰ì
(
zSql
);

613 if–
rc
==
SQLITE_OK
 ){

614 
rc
 = 
	`°©Next
(
pCurs‹
);

616  
rc
;

617 
	}
}

619 
	$°©Cﬁumn
(

620 
sqlôe3_vèb_curs‹
 *
pCurs‹
,

621 
sqlôe3_c⁄ãxt
 *
˘x
,

622 
i


624 
SètCurs‹
 *
pC§
 = (SètCurs‹ *)
pCurs‹
;

625  
i
 ){

627 
	`sqlôe3_ªsu…_ãxt
(
˘x
, 
pC§
->
zName
, -1, 
SQLITE_TRANSIENT
);

630 
	`sqlôe3_ªsu…_ãxt
(
˘x
, 
pC§
->
zP©h
, -1, 
SQLITE_TRANSIENT
);

633 
	`sqlôe3_ªsu…_öt64
(
˘x
, 
pC§
->
iPagío
);

636 
	`sqlôe3_ªsu…_ãxt
(
˘x
, 
pC§
->
zPagëy≥
, -1, 
SQLITE_STATIC
);

639 
	`sqlôe3_ªsu…_öt
(
˘x
, 
pC§
->
nCñl
);

642 
	`sqlôe3_ªsu…_öt
(
˘x
, 
pC§
->
nPaylﬂd
);

645 
	`sqlôe3_ªsu…_öt
(
˘x
, 
pC§
->
nUnu£d
);

648 
	`sqlôe3_ªsu…_öt
(
˘x
, 
pC§
->
nMxPaylﬂd
);

651 
	`sqlôe3_ªsu…_öt64
(
˘x
, 
pC§
->
iOff£t
);

654 
	`sqlôe3_ªsu…_öt
(
˘x
, 
pC§
->
szPage
);

657 
sqlôe3
 *
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
˘x
);

658 
iDb
 = 
pC§
->iDb;

659 
	`sqlôe3_ªsu…_ãxt
(
˘x
, 
db
->
aDb
[
iDb
].
zName
, -1, 
SQLITE_STATIC
);

663  
SQLITE_OK
;

664 
	}
}

666 
	$°©Rowid
(
sqlôe3_vèb_curs‹
 *
pCurs‹
, 
sqlôe_öt64
 *
pRowid
){

667 
SètCurs‹
 *
pC§
 = (SètCurs‹ *)
pCurs‹
;

668 *
pRowid
 = 
pC§
->
iPagío
;

669  
SQLITE_OK
;

670 
	}
}

675 
	$sqlôe3Db°©Regi°î
(
sqlôe3
 *
db
){

676 
sqlôe3_moduÀ
 
db°©_moduÀ
 = {

678 
°©C⁄√˘
,

679 
°©C⁄√˘
,

680 
°©Be°Index
,

681 
°©Disc⁄√˘
,

682 
°©Disc⁄√˘
,

683 
°©O≥n
,

684 
°©Clo£
,

685 
°©Fûãr
,

686 
°©Next
,

687 
°©Eof
,

688 
°©Cﬁumn
,

689 
°©Rowid
,

698  
	`sqlôe3_¸óã_moduÀ
(
db
, "db°©", &
db°©_moduÀ
, 0);

699 
	}
}

700 #ñi‡
deföed
(
SQLITE_ENABLE_DBSTAT_VTAB
)

701 
	$sqlôe3Db°©Regi°î
(
sqlôe3
 *
db
){  
SQLITE_OK
; 
	}
}

	@delete.c

15 
	~"sqlôeI¡.h
"

31 
TabÀ
 *
	$sqlôe3SrcLi°Lookup
(
P¨£
 *
pP¨£
, 
SrcLi°
 *
pSrc
){

32 
SrcLi°_ôem
 *
pIãm
 = 
pSrc
->
a
;

33 
TabÀ
 *
pTab
;

34 
	`as£π
–
pIãm
 && 
pSrc
->
nSrc
==1 );

35 
pTab
 = 
	`sqlôe3LoˇãTabÀIãm
(
pP¨£
, 0, 
pIãm
);

36 
	`sqlôe3DñëeTabÀ
(
pP¨£
->
db
, 
pIãm
->
pTab
);

37 
pIãm
->
pTab
 =ÖTab;

38 if–
pTab
 ){

39 
pTab
->
nRef
++;

41 if–
	`sqlôe3IndexedByLookup
(
pP¨£
, 
pIãm
) ){

42 
pTab
 = 0;

44  
pTab
;

45 
	}
}

52 
	$sqlôe3IsRódO∆y
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTab
, 
võwOk
){

63 if––
	`IsVútuÆ
(
pTab
)

64 && 
	`sqlôe3GëVTabÀ
(
pP¨£
->
db
, 
pTab
)->
pMod
->
pModuÀ
->
xUpd©e
==0 )

65 || ( (
pTab
->
èbFœgs
 & 
TF_Ród⁄ly
)!=0

66 && (
pP¨£
->
db
->
Êags
 & 
SQLITE_WrôeSchema
)==0

67 && 
pP¨£
->
√°ed
==0 )

69 
	`sqlôe3Eº‹Msg
(
pP¨£
, "èbÀ %†mayÇŸ bêmodifõd", 
pTab
->
zName
);

73 #i‚de‡
SQLITE_OMIT_VIEW


74 if–!
võwOk
 && 
pTab
->
pSñe˘
 ){

75 
	`sqlôe3Eº‹Msg
(
pP¨£
,"ˇ¬Ÿ modify %†beˇu£ iài†®võw",
pTab
->
zName
);

80 
	}
}

83 #i‡!
deföed
(
SQLITE_OMIT_VIEW
Ë&& !deföed(
SQLITE_OMIT_TRIGGER
)

89 
	$sqlôe3M©îülizeVõw
(

90 
P¨£
 *
pP¨£
,

91 
TabÀ
 *
pVõw
,

92 
Ex¥
 *
pWhîe
,

93 
iCur


95 
Sñe˘De°
 
de°
;

96 
Sñe˘
 *
pSñ
;

97 
SrcLi°
 *
pFrom
;

98 
sqlôe3
 *
db
 = 
pP¨£
->db;

99 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pVõw
->
pSchema
);

100 
pWhîe
 = 
	`sqlôe3Ex¥Dup
(
db
,ÖWhere, 0);

101 
pFrom
 = 
	`sqlôe3SrcLi°Aµíd
(
db
, 0, 0, 0);

102 if–
pFrom
 ){

103 
	`as£π
–
pFrom
->
nSrc
==1 );

104 
pFrom
->
a
[0].
zName
 = 
	`sqlôe3DbSåDup
(
db
, 
pVõw
->zName);

105 
pFrom
->
a
[0].
zD©aba£
 = 
	`sqlôe3DbSåDup
(
db
, db->
aDb
[
iDb
].
zName
);

106 
	`as£π
–
pFrom
->
a
[0].
pOn
==0 );

107 
	`as£π
–
pFrom
->
a
[0].
pUsög
==0 );

109 
pSñ
 = 
	`sqlôe3Sñe˘New
(
pP¨£
, 0, 
pFrom
, 
pWhîe
, 0, 0, 0,

110 
SF_In˛udeHiddí
, 0, 0);

111 
	`sqlôe3Sñe˘De°Inô
(&
de°
, 
SRT_EphemTab
, 
iCur
);

112 
	`sqlôe3Sñe˘
(
pP¨£
, 
pSñ
, &
de°
);

113 
	`sqlôe3Sñe˘Dñëe
(
db
, 
pSñ
);

114 
	}
}

117 #i‡
deföed
(
SQLITE_ENABLE_UPDATE_DELETE_LIMIT
Ë&& !deföed(
SQLITE_OMIT_SUBQUERY
)

126 
Ex¥
 *
	$sqlôe3LimôWhîe
(

127 
P¨£
 *
pP¨£
,

128 
SrcLi°
 *
pSrc
,

129 
Ex¥
 *
pWhîe
,

130 
Ex¥Li°
 *
pOrdîBy
,

131 
Ex¥
 *
pLimô
,

132 
Ex¥
 *
pOff£t
,

133 *
zStmtTy≥


135 
Ex¥
 *
pWhîeRowid
 = 
NULL
;

136 
Ex¥
 *
pInCœu£
 = 
NULL
;

137 
Ex¥
 *
pSñe˘Rowid
 = 
NULL
;

138 
Ex¥Li°
 *
pELi°
 = 
NULL
;

139 
SrcLi°
 *
pSñe˘Src
 = 
NULL
;

140 
Sñe˘
 *
pSñe˘
 = 
NULL
;

144 if–
pOrdîBy
 && (
pLimô
 == 0) ) {

145 
	`sqlôe3Eº‹Msg
(
pP¨£
, "ORDER BY wôhouàLIMIT o¿%s", 
zStmtTy≥
);

146 
limô_whîe_˛ónup
;

152 if–
pLimô
 == 0 ) {

154 
	`as£π
–
pOff£t
 == 0 );

155  
pWhîe
;

167 
pSñe˘Rowid
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_ROW
, 0, 0, 0);

168 if–
pSñe˘Rowid
 =0 ) 
limô_whîe_˛ónup
;

169 
pELi°
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
, 0, 
pSñe˘Rowid
);

170 if–
pELi°
 =0 ) 
limô_whîe_˛ónup
;

174 
pSñe˘Src
 = 
	`sqlôe3SrcLi°Dup
(
pP¨£
->
db
, 
pSrc
, 0);

175 if–
pSñe˘Src
 == 0 ) {

176 
	`sqlôe3Ex¥Li°Dñëe
(
pP¨£
->
db
, 
pELi°
);

177 
limô_whîe_˛ónup
;

181 
pSñe˘
 = 
	`sqlôe3Sñe˘New
(
pP¨£
,
pELi°
,
pSñe˘Src
,
pWhîe
,0,0,

182 
pOrdîBy
,0,
pLimô
,
pOff£t
);

183 if–
pSñe˘
 == 0 )  0;

186 
pWhîeRowid
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_ROW
, 0, 0, 0);

187 
pInCœu£
 = 
pWhîeRowid
 ? 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_IN
,ÖWhereRowid, 0, 0) : 0;

188 
	`sqlôe3PEx¥AddSñe˘
(
pP¨£
, 
pInCœu£
, 
pSñe˘
);

189  
pInCœu£
;

191 
limô_whîe_˛ónup
:

192 
	`sqlôe3Ex¥Dñëe
(
pP¨£
->
db
, 
pWhîe
);

193 
	`sqlôe3Ex¥Li°Dñëe
(
pP¨£
->
db
, 
pOrdîBy
);

194 
	`sqlôe3Ex¥Dñëe
(
pP¨£
->
db
, 
pLimô
);

195 
	`sqlôe3Ex¥Dñëe
(
pP¨£
->
db
, 
pOff£t
);

197 
	}
}

208 
	$sqlôe3DñëeFrom
(

209 
P¨£
 *
pP¨£
,

210 
SrcLi°
 *
pTabLi°
,

211 
Ex¥
 *
pWhîe


213 
Vdbe
 *
v
;

214 
TabÀ
 *
pTab
;

215 c⁄° *
zDb
;

216 
i
;

217 
WhîeInfo
 *
pWInfo
;

218 
Index
 *
pIdx
;

219 
iTabCur
;

220 
iD©aCur
 = 0;

221 
iIdxCur
 = 0;

222 
nIdx
;

223 
sqlôe3
 *
db
;

224 
AuthC⁄ãxt
 
sC⁄ãxt
;

225 
NameC⁄ãxt
 
sNC
;

226 
iDb
;

227 
memC¡
 = -1;

228 
rˇuth
;

229 
eO√Pass
;

230 
aiCurO√Pass
[2];

231 
u8
 *
aToO≥n
 = 0;

232 
Index
 *
pPk
;

233 
iPk
 = 0;

234 
i16
 
nPk
 = 1;

235 
iKey
;

236 
i16
 
nKey
;

237 
iEphCur
 = 0;

238 
iRowSë
 = 0;

239 
addrBy∑ss
 = 0;

240 
addrLo›
 = 0;

241 
addrEphO≥n
 = 0;

242 
bCom∂ex
;

245 #i‚de‡
SQLITE_OMIT_TRIGGER


246 
isVõw
;

247 
Triggî
 *
pTriggî
;

250 
	`mem£t
(&
sC⁄ãxt
, 0, (sContext));

251 
db
 = 
pP¨£
->db;

252 if–
pP¨£
->
nEº
 || 
db
->
mÆlocFaûed
 ){

253 
dñëe_‰om_˛ónup
;

255 
	`as£π
–
pTabLi°
->
nSrc
==1 );

262 
pTab
 = 
	`sqlôe3SrcLi°Lookup
(
pP¨£
, 
pTabLi°
);

263 if–
pTab
==0 ) 
dñëe_‰om_˛ónup
;

268 #i‚de‡
SQLITE_OMIT_TRIGGER


269 
pTriggî
 = 
	`sqlôe3TriggîsExi°
(
pP¨£
, 
pTab
, 
TK_DELETE
, 0, 0);

270 
isVõw
 = 
pTab
->
pSñe˘
!=0;

271 
bCom∂ex
 = 
pTriggî
 || 
	`sqlôe3FkRequúed
(
pP¨£
, 
pTab
, 0, 0);

273 
	#pTriggî
 0

	)

274 
	#isVõw
 0

	)

276 #ifde‡
SQLITE_OMIT_VIEW


277 #unde‡
isVõw


278 
	#isVõw
 0

	)

283 if–
	`sqlôe3VõwGëCﬁumnNames
(
pP¨£
, 
pTab
) ){

284 
dñëe_‰om_˛ónup
;

287 if–
	`sqlôe3IsRódO∆y
(
pP¨£
, 
pTab
, (
pTriggî
?1:0)) ){

288 
dñëe_‰om_˛ónup
;

290 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pTab
->
pSchema
);

291 
	`as£π
–
iDb
<
db
->
nDb
 );

292 
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

293 
rˇuth
 = 
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_DELETE
, 
pTab
->
zName
, 0, 
zDb
);

294 
	`as£π
–
rˇuth
==
SQLITE_OK
 ||Ñˇuth==
SQLITE_DENY
 ||Ñˇuth==
SQLITE_IGNORE
 );

295 if–
rˇuth
==
SQLITE_DENY
 ){

296 
dñëe_‰om_˛ónup
;

298 
	`as£π
(!
isVõw
 || 
pTriggî
);

302 
	`as£π
–
pTabLi°
->
nSrc
==1 );

303 
iTabCur
 = 
pTabLi°
->
a
[0].
iCurs‹
 = 
pP¨£
->
nTab
++;

304 
nIdx
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
,ÇIdx++){

305 
pP¨£
->
nTab
++;

310 if–
isVõw
 ){

311 
	`sqlôe3AuthC⁄ãxtPush
(
pP¨£
, &
sC⁄ãxt
, 
pTab
->
zName
);

316 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

317 if–
v
==0 ){

318 
dñëe_‰om_˛ónup
;

320 if–
pP¨£
->
√°ed
==0 ) 
	`sqlôe3VdbeCou¡Ch™ges
(
v
);

321 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 1, 
iDb
);

326 #i‡!
	`deföed
(
SQLITE_OMIT_VIEW
Ë&& !deföed(
SQLITE_OMIT_TRIGGER
)

327 if–
isVõw
 ){

328 
	`sqlôe3M©îülizeVõw
(
pP¨£
, 
pTab
, 
pWhîe
, 
iTabCur
);

329 
iD©aCur
 = 
iIdxCur
 = 
iTabCur
;

335 
	`mem£t
(&
sNC
, 0, (sNC));

336 
sNC
.
pP¨£
 =ÖParse;

337 
sNC
.
pSrcLi°
 = 
pTabLi°
;

338 if–
	`sqlôe3ResﬁveEx¥Names
(&
sNC
, 
pWhîe
) ){

339 
dñëe_‰om_˛ónup
;

345 if–
db
->
Êags
 & 
SQLITE_Cou¡Rows
 ){

346 
memC¡
 = ++
pP¨£
->
nMem
;

347 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 0, 
memC¡
);

350 #i‚de‡
SQLITE_OMIT_TRUNCATE_OPTIMIZATION


355 if–
rˇuth
==
SQLITE_OK


356 && 
pWhîe
==0

357 && !
bCom∂ex


358 && !
	`IsVútuÆ
(
pTab
)

359 #ifde‡
SQLITE_ENABLE_PREUPDATE_HOOK


360 && 
db
->
xPªUpd©eCÆlback
==0

363 
	`as£π
–!
isVõw
 );

364 
	`sqlôe3TabÀLock
(
pP¨£
, 
iDb
, 
pTab
->
äum
, 1,ÖTab->
zName
);

365 if–
	`HasRowid
(
pTab
) ){

366 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_CÀ¨
, 
pTab
->
äum
, 
iDb
, 
memC¡
,

367 
pTab
->
zName
, 
P4_STATIC
);

369 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

370 
	`as£π
–
pIdx
->
pSchema
==
pTab
->pSchema );

371 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_CÀ¨
, 
pIdx
->
äum
, 
iDb
);

376 
u16
 
wcf
 = 
WHERE_ONEPASS_DESIRED
|
WHERE_DUPLICATES_OK
|
WHERE_SEEK_TABLE
;

377 if–
sNC
.
ncFœgs
 & 
NC_V¨Sñe˘
 ) 
bCom∂ex
 = 1;

378 
wcf
 |(
bCom∂ex
 ? 0 : 
WHERE_ONEPASS_MULTIROW
);

379 if–
	`HasRowid
(
pTab
) ){

381 
pPk
 = 0;

382 
nPk
 = 1;

383 
iRowSë
 = ++
pP¨£
->
nMem
;

384 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NuŒ
, 0, 
iRowSë
);

388 
pPk
 = 
	`sqlôe3Prim¨yKeyIndex
(
pTab
);

389 
	`as£π
–
pPk
!=0 );

390 
nPk
 = 
pPk
->
nKeyCﬁ
;

391 
iPk
 = 
pP¨£
->
nMem
+1;

392 
pP¨£
->
nMem
 +
nPk
;

393 
iEphCur
 = 
pP¨£
->
nTab
++;

394 
addrEphO≥n
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_O≥nEphemîÆ
, 
iEphCur
, 
nPk
);

395 
	`sqlôe3VdbeSëP4KeyInfo
(
pP¨£
, 
pPk
);

406 
pWInfo
 = 
	`sqlôe3WhîeBegö
(
pP¨£
, 
pTabLi°
, 
pWhîe
, 0, 0, 
wcf
, 
iTabCur
+1);

407 if–
pWInfo
==0 ) 
dñëe_‰om_˛ónup
;

408 
eO√Pass
 = 
	`sqlôe3WhîeOkO√Pass
(
pWInfo
, 
aiCurO√Pass
);

409 
	`as£π
–
	`IsVútuÆ
(
pTab
)==0 || 
eO√Pass
!=
ONEPASS_MULTI
 );

410 
	`as£π
–
	`IsVútuÆ
(
pTab
Ë|| 
bCom∂ex
 || 
eO√Pass
!=
ONEPASS_OFF
 );

413 if–
db
->
Êags
 & 
SQLITE_Cou¡Rows
 ){

414 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_AddImm
, 
memC¡
, 1);

418 if–
pPk
 ){

419 
i
=0; i<
nPk
; i++){

420 
	`as£π
–
pPk
->
aiCﬁumn
[
i
]>=0 );

421 
	`sqlôe3Ex¥CodeGëCﬁumnOfTabÀ
(
v
, 
pTab
, 
iTabCur
,

422 
pPk
->
aiCﬁumn
[
i
], 
iPk
+i);

424 
iKey
 = 
iPk
;

426 
iKey
 = 
pP¨£
->
nMem
 + 1;

427 
iKey
 = 
	`sqlôe3Ex¥CodeGëCﬁumn
(
pP¨£
, 
pTab
, -1, 
iTabCur
, iKey, 0);

428 if–
iKey
>
pP¨£
->
nMem
 )ÖParse->nMem = iKey;

431 if–
eO√Pass
!=
ONEPASS_OFF
 ){

435 
nKey
 = 
nPk
;

436 
aToO≥n
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, 
nIdx
+2);

437 if–
aToO≥n
==0 ){

438 
	`sqlôe3WhîeEnd
(
pWInfo
);

439 
dñëe_‰om_˛ónup
;

441 
	`mem£t
(
aToO≥n
, 1, 
nIdx
+1);

442 
aToO≥n
[
nIdx
+1] = 0;

443 if–
aiCurO√Pass
[0]>=0 ) 
aToO≥n
[aiCurO√Pass[0]-
iTabCur
] = 0;

444 if–
aiCurO√Pass
[1]>=0 ) 
aToO≥n
[aiCurO√Pass[1]-
iTabCur
] = 0;

445 if–
addrEphO≥n
 ) 
	`sqlôe3VdbeCh™geToNo›
(
v
,áddrEphOpen);

447 if–
pPk
 ){

449 
iKey
 = ++
pP¨£
->
nMem
;

450 
nKey
 = 0;

451 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_MakeRec‹d
, 
iPk
, 
nPk
, 
iKey
,

452 
	`sqlôe3IndexAfföôySå
(
pP¨£
->
db
, 
pPk
), 
nPk
);

453 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IdxIn£π
, 
iEphCur
, 
iKey
);

456 
nKey
 = 1;

457 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_RowSëAdd
, 
iRowSë
, 
iKey
);

463 if–
eO√Pass
!=
ONEPASS_OFF
 ){

464 
addrBy∑ss
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

466 
	`sqlôe3WhîeEnd
(
pWInfo
);

474 if–!
isVõw
 ){

475 
iAddrOn˚
 = 0;

476 if–
eO√Pass
==
ONEPASS_MULTI
 ){

477 
iAddrOn˚
 = 
	`sqlôe3CodeOn˚
(
pP¨£
); 
	`VdbeCovîage
(
v
);

479 
	`ã°ˇ£
–
	`IsVútuÆ
(
pTab
) );

480 
	`sqlôe3O≥nTabÀAndIndi˚s
(
pP¨£
, 
pTab
, 
OP_O≥nWrôe
, 
OPFLAG_FORDELETE
,

481 
iTabCur
, 
aToO≥n
, &
iD©aCur
, &
iIdxCur
);

482 
	`as£π
–
pPk
 || 
	`IsVútuÆ
(
pTab
Ë|| 
iD©aCur
==
iTabCur
 );

483 
	`as£π
–
pPk
 || 
	`IsVútuÆ
(
pTab
Ë|| 
iIdxCur
==
iD©aCur
+1 );

484 if–
eO√Pass
==
ONEPASS_MULTI
 ) 
	`sqlôe3VdbeJumpHîe
(
v
, 
iAddrOn˚
);

490 if–
eO√Pass
!=
ONEPASS_OFF
 ){

491 
	`as£π
–
nKey
==
nPk
 );

492 if–!
	`IsVútuÆ
(
pTab
Ë&& 
aToO≥n
[
iD©aCur
-
iTabCur
] ){

493 
	`as£π
–
pPk
!=0 || 
pTab
->
pSñe˘
!=0 );

494 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_NŸFound
, 
iD©aCur
, 
addrBy∑ss
, 
iKey
, 
nKey
);

495 
	`VdbeCovîage
(
v
);

497 }if–
pPk
 ){

498 
addrLo›
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Rewöd
, 
iEphCur
); 
	`VdbeCovîage
(v);

499 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_RowKey
, 
iEphCur
, 
iKey
);

500 
	`as£π
–
nKey
==0 );

502 
addrLo›
 = 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_RowSëRód
, 
iRowSë
, 0, 
iKey
);

503 
	`VdbeCovîage
(
v
);

504 
	`as£π
–
nKey
==1 );

508 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


509 if–
	`IsVútuÆ
(
pTab
) ){

510 c⁄° *
pVTab
 = (c⁄° *)
	`sqlôe3GëVTabÀ
(
db
, 
pTab
);

511 
	`sqlôe3VèbMakeWrôabÀ
(
pP¨£
, 
pTab
);

512 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_VUpd©e
, 0, 1, 
iKey
, 
pVTab
, 
P4_VTAB
);

513 
	`sqlôe3VdbeCh™geP5
(
v
, 
OE_Ab‹t
);

514 
	`as£π
–
eO√Pass
==
ONEPASS_OFF
 ||ÉO√Pass==
ONEPASS_SINGLE
 );

515 
	`sqlôe3MayAb‹t
(
pP¨£
);

516 if–
eO√Pass
==
ONEPASS_SINGLE
 && 
	`sqlôe3IsT›Àvñ
(
pP¨£
) ){

517 
pP¨£
->
isMu…iWrôe
 = 0;

522 
cou¡
 = (
pP¨£
->
√°ed
==0);

523 
iIdxNoSìk
 = -1;

524 if–
bCom∂ex
==0 && 
aiCurO√Pass
[1]!=
iD©aCur
 ){

525 
iIdxNoSìk
 = 
aiCurO√Pass
[1];

527 
	`sqlôe3Gíî©eRowDñëe
(
pP¨£
, 
pTab
, 
pTriggî
, 
iD©aCur
, 
iIdxCur
,

528 
iKey
, 
nKey
, 
cou¡
, 
OE_DeÁu…
, 
eO√Pass
, 
iIdxNoSìk
);

532 if–
eO√Pass
!=
ONEPASS_OFF
 ){

533 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
addrBy∑ss
);

534 
	`sqlôe3WhîeEnd
(
pWInfo
);

535 }if–
pPk
 ){

536 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Next
, 
iEphCur
, 
addrLo›
+1); 
	`VdbeCovîage
(v);

537 
	`sqlôe3VdbeJumpHîe
(
v
, 
addrLo›
);

539 
	`sqlôe3VdbeGŸo
(
v
, 
addrLo›
);

540 
	`sqlôe3VdbeJumpHîe
(
v
, 
addrLo›
);

544 if–!
isVõw
 && !
	`IsVútuÆ
(
pTab
) ){

545 if–!
pPk
 ) 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Clo£
, 
iD©aCur
);

546 
i
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx; i++,ÖIdxıIdx->
pNext
){

547 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Clo£
, 
iIdxCur
 + 
i
);

556 if–
pP¨£
->
√°ed
==0 &&ÖP¨£->
pTriggîTab
==0 ){

557 
	`sqlôe3Autoö¸emítEnd
(
pP¨£
);

564 if–(
db
->
Êags
&
SQLITE_Cou¡Rows
Ë&& !
pP¨£
->
√°ed
 && !pP¨£->
pTriggîTab
 ){

565 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 
memC¡
, 1);

566 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 1);

567 
	`sqlôe3VdbeSëCﬁName
(
v
, 0, 
COLNAME_NAME
, "row†dñëed", 
SQLITE_STATIC
);

570 
dñëe_‰om_˛ónup
:

571 
	`sqlôe3AuthC⁄ãxtP›
(&
sC⁄ãxt
);

572 
	`sqlôe3SrcLi°Dñëe
(
db
, 
pTabLi°
);

573 
	`sqlôe3Ex¥Dñëe
(
db
, 
pWhîe
);

574 
	`sqlôe3DbFªe
(
db
, 
aToO≥n
);

576 
	}
}

580 #ifde‡
isVõw


581 #unde‡
isVõw


583 #ifde‡
pTriggî


584 #unde‡
pTriggî


626 
	$sqlôe3Gíî©eRowDñëe
(

627 
P¨£
 *
pP¨£
,

628 
TabÀ
 *
pTab
,

629 
Triggî
 *
pTriggî
,

630 
iD©aCur
,

631 
iIdxCur
,

632 
iPk
,

633 
i16
 
nPk
,

634 
u8
 
cou¡
,

635 
u8
 
⁄c⁄f
,

636 
u8
 
eMode
,

637 
iIdxNoSìk


639 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

640 
iOld
 = 0;

641 
iLabñ
;

642 
u8
 
›Sìk
;

645 
	`as£π
–
v
 );

646 
	`VdbeModuÀCommít
((
v
, "BEGIN: GenRowDel(%d,%d,%d,%d)",

647 
iD©aCur
, 
iIdxCur
, 
iPk
, ()
nPk
));

652 
iLabñ
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

653 
›Sìk
 = 
	`HasRowid
(
pTab
Ë? 
OP_NŸExi°s
 : 
OP_NŸFound
;

654 if–
eMode
==
ONEPASS_OFF
 ){

655 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
›Sìk
, 
iD©aCur
, 
iLabñ
, 
iPk
, 
nPk
);

656 
	`VdbeCovîageIf
(
v
, 
›Sìk
==
OP_NŸExi°s
);

657 
	`VdbeCovîageIf
(
v
, 
›Sìk
==
OP_NŸFound
);

662 if–
	`sqlôe3FkRequúed
(
pP¨£
, 
pTab
, 0, 0Ë|| 
pTriggî
 ){

663 
u32
 
mask
;

664 
iCﬁ
;

665 
addrSèπ
;

669 
mask
 = 
	`sqlôe3TriggîCﬁmask
(

670 
pP¨£
, 
pTriggî
, 0, 0, 
TRIGGER_BEFORE
|
TRIGGER_AFTER
, 
pTab
, 
⁄c⁄f


672 
mask
 |
	`sqlôe3FkOldmask
(
pP¨£
, 
pTab
);

673 
iOld
 = 
pP¨£
->
nMem
+1;

674 
pP¨£
->
nMem
 +(1 + 
pTab
->
nCﬁ
);

678 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_C›y
, 
iPk
, 
iOld
);

679 
iCﬁ
=0; iCﬁ<
pTab
->
nCﬁ
; iCol++){

680 
	`ã°ˇ£
–
mask
!=0xfffffff‡&& 
iCﬁ
==31 );

681 
	`ã°ˇ£
–
mask
!=0xfffffff‡&& 
iCﬁ
==32 );

682 if–
mask
==0xfffffff‡|| (
iCﬁ
<=31 && (mask & 
	`MASKBIT32
(iCol))!=0) ){

683 
	`sqlôe3Ex¥CodeGëCﬁumnOfTabÀ
(
v
, 
pTab
, 
iD©aCur
, 
iCﬁ
, 
iOld
+iCol+1);

688 
addrSèπ
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

689 
	`sqlôe3CodeRowTriggî
(
pP¨£
, 
pTriggî
,

690 
TK_DELETE
, 0, 
TRIGGER_BEFORE
, 
pTab
, 
iOld
, 
⁄c⁄f
, 
iLabñ


698 if–
addrSèπ
<
	`sqlôe3VdbeCuºítAddr
(
v
) ){

699 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
›Sìk
, 
iD©aCur
, 
iLabñ
, 
iPk
, 
nPk
);

700 
	`VdbeCovîageIf
(
v
, 
›Sìk
==
OP_NŸExi°s
);

701 
	`VdbeCovîageIf
(
v
, 
›Sìk
==
OP_NŸFound
);

707 
	`sqlôe3FkCheck
(
pP¨£
, 
pTab
, 
iOld
, 0, 0, 0);

720 if–
pTab
->
pSñe˘
==0 ){

721 
u8
 
p5
 = 0;

722 
	`sqlôe3Gíî©eRowIndexDñëe
(
pP¨£
, 
pTab
, 
iD©aCur
, 
iIdxCur
,0,
iIdxNoSìk
);

723 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Dñëe
, 
iD©aCur
, (
cou¡
?
OPFLAG_NCHANGE
:0));

724 
	`sqlôe3VdbeCh™geP4
(
v
, -1, (*)
pTab
, 
P4_TABLE
);

725 if–
eMode
!=
ONEPASS_OFF
 ){

726 
	`sqlôe3VdbeCh™geP5
(
v
, 
OPFLAG_AUXDELETE
);

728 if–
iIdxNoSìk
>=0 ){

729 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Dñëe
, 
iIdxNoSìk
);

731 if–
eMode
==
ONEPASS_MULTI
 ) 
p5
 |
OPFLAG_SAVEPOSITION
;

732 
	`sqlôe3VdbeCh™geP5
(
v
, 
p5
);

738 
	`sqlôe3FkA˘i⁄s
(
pP¨£
, 
pTab
, 0, 
iOld
, 0, 0);

741 
	`sqlôe3CodeRowTriggî
(
pP¨£
, 
pTriggî
,

742 
TK_DELETE
, 0, 
TRIGGER_AFTER
, 
pTab
, 
iOld
, 
⁄c⁄f
, 
iLabñ


748 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iLabñ
);

749 
	`VdbeModuÀCommít
((
v
, "END: GenRowDel()"));

750 
	}
}

770 
	$sqlôe3Gíî©eRowIndexDñëe
(

771 
P¨£
 *
pP¨£
,

772 
TabÀ
 *
pTab
,

773 
iD©aCur
,

774 
iIdxCur
,

775 *
aRegIdx
,

776 
iIdxNoSìk


778 
i
;

779 
r1
 = -1;

780 
iP¨tIdxLabñ
;

781 
Index
 *
pIdx
;

782 
Index
 *
pPri‹
 = 0;

783 
Vdbe
 *
v
;

784 
Index
 *
pPk
;

786 
v
 = 
pP¨£
->
pVdbe
;

787 
pPk
 = 
	`HasRowid
(
pTab
Ë? 0 : 
	`sqlôe3Prim¨yKeyIndex
(pTab);

788 
i
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx; i++,ÖIdxıIdx->
pNext
){

789 
	`as£π
–
iIdxCur
+
i
!=
iD©aCur
 || 
pPk
==
pIdx
 );

790 if–
aRegIdx
!=0 &&áRegIdx[
i
]==0 ) ;

791 if–
pIdx
==
pPk
 ) ;

792 if–
iIdxCur
+
i
==
iIdxNoSìk
 ) ;

793 
	`VdbeModuÀCommít
((
v
, "GíRowIdxDñ f‹ %s", 
pIdx
->
zName
));

794 
r1
 = 
	`sqlôe3Gíî©eIndexKey
(
pP¨£
, 
pIdx
, 
iD©aCur
, 0, 1,

795 &
iP¨tIdxLabñ
, 
pPri‹
, 
r1
);

796 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_IdxDñëe
, 
iIdxCur
+
i
, 
r1
,

797 
pIdx
->
uniqNŸNuŒ
 ?ÖIdx->
nKeyCﬁ
 :ÖIdx->
nCﬁumn
);

798 
	`sqlôe3ResﬁveP¨tIdxLabñ
(
pP¨£
, 
iP¨tIdxLabñ
);

799 
pPri‹
 = 
pIdx
;

801 
	}
}

834 
	$sqlôe3Gíî©eIndexKey
(

835 
P¨£
 *
pP¨£
,

836 
Index
 *
pIdx
,

837 
iD©aCur
,

838 
ªgOut
,

839 
¥efixO∆y
,

840 *
piP¨tIdxLabñ
,

841 
Index
 *
pPri‹
,

842 
ªgPri‹


844 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

845 
j
;

846 
ªgBa£
;

847 
nCﬁ
;

849 if–
piP¨tIdxLabñ
 ){

850 if–
pIdx
->
pP¨tIdxWhîe
 ){

851 *
piP¨tIdxLabñ
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

852 
pP¨£
->
iSñfTab
 = 
iD©aCur
;

853 
	`sqlôe3Ex¥CachePush
(
pP¨£
);

854 
	`sqlôe3Ex¥IfFÆ£Dup
(
pP¨£
, 
pIdx
->
pP¨tIdxWhîe
, *
piP¨tIdxLabñ
,

855 
SQLITE_JUMPIFNULL
);

857 *
piP¨tIdxLabñ
 = 0;

860 
nCﬁ
 = (
¥efixO∆y
 && 
pIdx
->
uniqNŸNuŒ
Ë?ÖIdx->
nKeyCﬁ
 :ÖIdx->
nCﬁumn
;

861 
ªgBa£
 = 
	`sqlôe3GëTempR™ge
(
pP¨£
, 
nCﬁ
);

862 if–
pPri‹
 && (
ªgBa£
!=
ªgPri‹
 ||ÖPri‹->
pP¨tIdxWhîe
) )ÖPrior = 0;

863 
j
=0; j<
nCﬁ
; j++){

864 if–
pPri‹


865 && 
pPri‹
->
aiCﬁumn
[
j
]==
pIdx
->aiColumn[j]

866 && 
pPri‹
->
aiCﬁumn
[
j
]!=
XN_EXPR


871 
	`sqlôe3Ex¥CodeLﬂdIndexCﬁumn
(
pP¨£
, 
pIdx
, 
iD©aCur
, 
j
, 
ªgBa£
+j);

878 
	`sqlôe3VdbeDñëePri‹Opcode
(
v
, 
OP_RólAfföôy
);

880 if–
ªgOut
 ){

881 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_MakeRec‹d
, 
ªgBa£
, 
nCﬁ
, 
ªgOut
);

883 
	`sqlôe3Rñó£TempR™ge
(
pP¨£
, 
ªgBa£
, 
nCﬁ
);

884  
ªgBa£
;

885 
	}
}

892 
	$sqlôe3ResﬁveP¨tIdxLabñ
(
P¨£
 *
pP¨£
, 
iLabñ
){

893 if–
iLabñ
 ){

894 
	`sqlôe3VdbeResﬁveLabñ
(
pP¨£
->
pVdbe
, 
iLabñ
);

895 
	`sqlôe3Ex¥CacheP›
(
pP¨£
);

897 
	}
}

	@expr.c

15 
	~"sqlôeI¡.h
"

33 
	$sqlôe3Ex¥Afföôy
(
Ex¥
 *
pEx¥
){

34 
›
;

35 
pEx¥
 = 
	`sqlôe3Ex¥SkùCﬁœã
(pExpr);

36 if–
pEx¥
->
Êags
 & 
EP_Gíîic
 )  0;

37 
›
 = 
pEx¥
->op;

38 if–
›
==
TK_SELECT
 ){

39 
	`as£π
–
pEx¥
->
Êags
&
EP_xIsSñe˘
 );

40  
	`sqlôe3Ex¥Afföôy
(
pEx¥
->
x
.
pSñe˘
->
pELi°
->
a
[0].pExpr);

42 #i‚de‡
SQLITE_OMIT_CAST


43 if–
›
==
TK_CAST
 ){

44 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_I¡VÆue
) );

45  
	`sqlôe3AfföôyTy≥
(
pEx¥
->
u
.
zTokí
, 0);

48 if–(
›
==
TK_AGG_COLUMN
 || op==
TK_COLUMN
 || op==
TK_REGISTER
)

49 && 
pEx¥
->
pTab
!=0

53 
j
 = 
pEx¥
->
iCﬁumn
;

54 if–
j
<0 )  
SQLITE_AFF_INTEGER
;

55 
	`as£π
–
pEx¥
->
pTab
 && 
j
<pEx¥->pTab->
nCﬁ
 );

56  
pEx¥
->
pTab
->
aCﬁ
[
j
].
afföôy
;

58  
pEx¥
->
afföôy
;

59 
	}
}

69 
Ex¥
 *
	$sqlôe3Ex¥AddCﬁœãTokí
(

70 
P¨£
 *
pP¨£
,

71 
Ex¥
 *
pEx¥
,

72 c⁄° 
Tokí
 *
pCﬁlName
,

73 
dequŸe


75 if–
pCﬁlName
->
n
>0 ){

76 
Ex¥
 *
pNew
 = 
	`sqlôe3Ex¥AŒoc
(
pP¨£
->
db
, 
TK_COLLATE
, 
pCﬁlName
, 
dequŸe
);

77 if–
pNew
 ){

78 
pNew
->
pLe·
 = 
pEx¥
;

79 
pNew
->
Êags
 |
EP_Cﬁœã
|
EP_Skù
;

80 
pEx¥
 = 
pNew
;

83  
pEx¥
;

84 
	}
}

85 
Ex¥
 *
	$sqlôe3Ex¥AddCﬁœãSåög
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
, c⁄° *
zC
){

86 
Tokí
 
s
;

87 
	`as£π
–
zC
!=0 );

88 
	`sqlôe3TokíInô
(&
s
, (*)
zC
);

89  
	`sqlôe3Ex¥AddCﬁœãTokí
(
pP¨£
, 
pEx¥
, &
s
, 0);

90 
	}
}

96 
Ex¥
 *
	$sqlôe3Ex¥SkùCﬁœã
(
Ex¥
 *
pEx¥
){

97  
pEx¥
 && 
	`Ex¥HasPr›îty
’Ex¥, 
EP_Skù
) ){

98 if–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_U∆ikñy
) ){

99 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_xIsSñe˘
) );

100 
	`as£π
–
pEx¥
->
x
.
pLi°
->
nEx¥
>0 );

101 
	`as£π
–
pEx¥
->
›
==
TK_FUNCTION
 );

102 
pEx¥
 =ÖEx¥->
x
.
pLi°
->
a
[0].pExpr;

104 
	`as£π
–
pEx¥
->
›
==
TK_COLLATE
 );

105 
pEx¥
 =ÖEx¥->
pLe·
;

108  
pEx¥
;

109 
	}
}

120 
CﬁlSeq
 *
	$sqlôe3Ex¥CﬁlSeq
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
){

121 
sqlôe3
 *
db
 = 
pP¨£
->db;

122 
CﬁlSeq
 *
pCﬁl
 = 0;

123 
Ex¥
 *
p
 = 
pEx¥
;

124  
p
 ){

125 
›
 = 
p
->op;

126 if–
p
->
Êags
 & 
EP_Gíîic
 ) ;

127 if–
›
==
TK_CAST
 || op==
TK_UPLUS
 ){

128 
p
 =Ö->
pLe·
;

131 if–
›
==
TK_COLLATE
 || (›==
TK_REGISTER
 && 
p
->
›2
==TK_COLLATE) ){

132 
pCﬁl
 = 
	`sqlôe3GëCﬁlSeq
(
pP¨£
, 
	`ENC
(
db
), 0, 
p
->
u
.
zTokí
);

135 if–(
›
==
TK_AGG_COLUMN
 || op==
TK_COLUMN


136 || 
›
==
TK_REGISTER
 || op==
TK_TRIGGER
)

137 && 
p
->
pTab
!=0

141 
j
 = 
p
->
iCﬁumn
;

142 if–
j
>=0 ){

143 c⁄° *
zCﬁl
 = 
p
->
pTab
->
aCﬁ
[
j
].zColl;

144 
pCﬁl
 = 
	`sqlôe3FödCﬁlSeq
(
db
, 
	`ENC
(db), 
zCﬁl
, 0);

148 if–
p
->
Êags
 & 
EP_Cﬁœã
 ){

149 if–
p
->
pLe·
 && (p->pLe·->
Êags
 & 
EP_Cﬁœã
)!=0 ){

150 
p
 =Ö->
pLe·
;

152 
Ex¥
 *
pNext
 = 
p
->
pRight
;

154 
	`as£π
–
p
->
x
.
pLi°
==0 ||Ö->
pRight
==0 );

158 if–
p
->
x
.
pLi°
!=0 && 
	`ALWAYS
(!
	`Ex¥HasPr›îty
’, 
EP_xIsSñe˘
)) ){

159 
i
;

160 
i
=0; 
	`ALWAYS
(i<
p
->
x
.
pLi°
->
nEx¥
); i++){

161 if–
	`Ex¥HasPr›îty
(
p
->
x
.
pLi°
->
a
[
i
].
pEx¥
, 
EP_Cﬁœã
) ){

162 
pNext
 = 
p
->
x
.
pLi°
->
a
[
i
].
pEx¥
;

167 
p
 = 
pNext
;

173 if–
	`sqlôe3CheckCﬁlSeq
(
pP¨£
, 
pCﬁl
) ){

174 
pCﬁl
 = 0;

176  
pCﬁl
;

177 
	}
}

184 
	$sqlôe3Com∑ªAfföôy
(
Ex¥
 *
pEx¥
, 
aff2
){

185 
aff1
 = 
	`sqlôe3Ex¥Afföôy
(
pEx¥
);

186 if–
aff1
 && 
aff2
 ){

190 if–
	`sqlôe3IsNumîicAfföôy
(
aff1
Ë|| sqlôe3IsNumîicAfföôy(
aff2
) ){

191  
SQLITE_AFF_NUMERIC
;

193  
SQLITE_AFF_BLOB
;

195 }if–!
aff1
 && !
aff2
 ){

199  
SQLITE_AFF_BLOB
;

202 
	`as£π
–
aff1
==0 || 
aff2
==0 );

203  (
aff1
 + 
aff2
);

205 
	}
}

211 
	$com∑ris⁄Afföôy
(
Ex¥
 *
pEx¥
){

212 
aff
;

213 
	`as£π
–
pEx¥
->
›
==
TK_EQ
 ||ÖEx¥->›==
TK_IN
 ||ÖEx¥->›==
TK_LT
 ||

214 
pEx¥
->
›
==
TK_GT
 ||ÖEx¥->›==
TK_GE
 ||ÖEx¥->›==
TK_LE
 ||

215 
pEx¥
->
›
==
TK_NE
 ||ÖEx¥->›==
TK_IS
 ||ÖEx¥->›==
TK_ISNOT
 );

216 
	`as£π
–
pEx¥
->
pLe·
 );

217 
aff
 = 
	`sqlôe3Ex¥Afföôy
(
pEx¥
->
pLe·
);

218 if–
pEx¥
->
pRight
 ){

219 
aff
 = 
	`sqlôe3Com∑ªAfföôy
(
pEx¥
->
pRight
,áff);

220 }if–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_xIsSñe˘
) ){

221 
aff
 = 
	`sqlôe3Com∑ªAfföôy
(
pEx¥
->
x
.
pSñe˘
->
pELi°
->
a
[0].pExpr,áff);

222 }if–!
aff
 ){

223 
aff
 = 
SQLITE_AFF_BLOB
;

225  
aff
;

226 
	}
}

234 
	$sqlôe3IndexAfföôyOk
(
Ex¥
 *
pEx¥
, 
idx_afföôy
){

235 
aff
 = 
	`com∑ris⁄Afföôy
(
pEx¥
);

236  
aff
 ){

237 
SQLITE_AFF_BLOB
:

239 
SQLITE_AFF_TEXT
:

240  
idx_afföôy
==
SQLITE_AFF_TEXT
;

242  
	`sqlôe3IsNumîicAfföôy
(
idx_afföôy
);

244 
	}
}

250 
u8
 
	$bö¨yCom∑ªP5
(
Ex¥
 *
pEx¥1
, Ex¥ *
pEx¥2
, 
jumpIfNuŒ
){

251 
u8
 
aff
 = ()
	`sqlôe3Ex¥Afföôy
(
pEx¥2
);

252 
aff
 = (
u8
)
	`sqlôe3Com∑ªAfföôy
(
pEx¥1
,áffË| (u8)
jumpIfNuŒ
;

253  
aff
;

254 
	}
}

268 
CﬁlSeq
 *
	$sqlôe3Bö¨yCom∑ªCﬁlSeq
(

269 
P¨£
 *
pP¨£
,

270 
Ex¥
 *
pLe·
,

271 
Ex¥
 *
pRight


273 
CﬁlSeq
 *
pCﬁl
;

274 
	`as£π
–
pLe·
 );

275 if–
pLe·
->
Êags
 & 
EP_Cﬁœã
 ){

276 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pLe·
);

277 }if–
pRight
 && (pRight->
Êags
 & 
EP_Cﬁœã
)!=0 ){

278 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pRight
);

280 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pLe·
);

281 if–!
pCﬁl
 ){

282 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pRight
);

285  
pCﬁl
;

286 
	}
}

291 
	$codeCom∑ª
(

292 
P¨£
 *
pP¨£
,

293 
Ex¥
 *
pLe·
,

294 
Ex¥
 *
pRight
,

295 
›code
,

296 
ö1
, 
ö2
,

297 
de°
,

298 
jumpIfNuŒ


300 
p5
;

301 
addr
;

302 
CﬁlSeq
 *
p4
;

304 
p4
 = 
	`sqlôe3Bö¨yCom∑ªCﬁlSeq
(
pP¨£
, 
pLe·
, 
pRight
);

305 
p5
 = 
	`bö¨yCom∑ªP5
(
pLe·
, 
pRight
, 
jumpIfNuŒ
);

306 
addr
 = 
	`sqlôe3VdbeAddOp4
(
pP¨£
->
pVdbe
, 
›code
, 
ö2
, 
de°
, 
ö1
,

307 (*)
p4
, 
P4_COLLSEQ
);

308 
	`sqlôe3VdbeCh™geP5
(
pP¨£
->
pVdbe
, (
u8
)
p5
);

309  
addr
;

310 
	}
}

312 #i‡
SQLITE_MAX_EXPR_DEPTH
>0

318 
	$sqlôe3Ex¥CheckHeight
(
P¨£
 *
pP¨£
, 
nHeight
){

319 
rc
 = 
SQLITE_OK
;

320 
mxHeight
 = 
pP¨£
->
db
->
aLimô
[
SQLITE_LIMIT_EXPR_DEPTH
];

321 if–
nHeight
>
mxHeight
 ){

322 
	`sqlôe3Eº‹Msg
(
pP¨£
,

323 "Ex¥essi⁄Åªêi†toÿœrgê(maximum dïth %d)", 
mxHeight


325 
rc
 = 
SQLITE_ERROR
;

327  
rc
;

328 
	}
}

339 
	$heightOfEx¥
(
Ex¥
 *
p
, *
≤Height
){

340 if–
p
 ){

341 if–
p
->
nHeight
>*
≤Height
 ){

342 *
≤Height
 = 
p
->
nHeight
;

345 
	}
}

346 
	$heightOfEx¥Li°
(
Ex¥Li°
 *
p
, *
≤Height
){

347 if–
p
 ){

348 
i
;

349 
i
=0; i<
p
->
nEx¥
; i++){

350 
	`heightOfEx¥
(
p
->
a
[
i
].
pEx¥
, 
≤Height
);

353 
	}
}

354 
	$heightOfSñe˘
(
Sñe˘
 *
p
, *
≤Height
){

355 if–
p
 ){

356 
	`heightOfEx¥
(
p
->
pWhîe
, 
≤Height
);

357 
	`heightOfEx¥
(
p
->
pHavög
, 
≤Height
);

358 
	`heightOfEx¥
(
p
->
pLimô
, 
≤Height
);

359 
	`heightOfEx¥
(
p
->
pOff£t
, 
≤Height
);

360 
	`heightOfEx¥Li°
(
p
->
pELi°
, 
≤Height
);

361 
	`heightOfEx¥Li°
(
p
->
pGroupBy
, 
≤Height
);

362 
	`heightOfEx¥Li°
(
p
->
pOrdîBy
, 
≤Height
);

363 
	`heightOfSñe˘
(
p
->
pPri‹
, 
≤Height
);

365 
	}
}

377 
	$ex¥SëHeight
(
Ex¥
 *
p
){

378 
nHeight
 = 0;

379 
	`heightOfEx¥
(
p
->
pLe·
, &
nHeight
);

380 
	`heightOfEx¥
(
p
->
pRight
, &
nHeight
);

381 if–
	`Ex¥HasPr›îty
(
p
, 
EP_xIsSñe˘
) ){

382 
	`heightOfSñe˘
(
p
->
x
.
pSñe˘
, &
nHeight
);

383 }if–
p
->
x
.
pLi°
 ){

384 
	`heightOfEx¥Li°
(
p
->
x
.
pLi°
, &
nHeight
);

385 
p
->
Êags
 |
EP_Pr›ag©e
 & 
	`sqlôe3Ex¥Li°Fœgs
’->
x
.
pLi°
);

387 
p
->
nHeight
 =ÇHeight + 1;

388 
	}
}

398 
	$sqlôe3Ex¥SëHeightAndFœgs
(
P¨£
 *
pP¨£
, 
Ex¥
 *
p
){

399 if–
pP¨£
->
nEº
 ) ;

400 
	`ex¥SëHeight
(
p
);

401 
	`sqlôe3Ex¥CheckHeight
(
pP¨£
, 
p
->
nHeight
);

402 
	}
}

408 
	$sqlôe3Sñe˘Ex¥Height
(
Sñe˘
 *
p
){

409 
nHeight
 = 0;

410 
	`heightOfSñe˘
(
p
, &
nHeight
);

411  
nHeight
;

412 
	}
}

418 
	$sqlôe3Ex¥SëHeightAndFœgs
(
P¨£
 *
pP¨£
, 
Ex¥
 *
p
){

419 if–
p
 &&Ö->
x
.
pLi°
 && !
	`Ex¥HasPr›îty
’, 
EP_xIsSñe˘
) ){

420 
p
->
Êags
 |
EP_Pr›ag©e
 & 
	`sqlôe3Ex¥Li°Fœgs
’->
x
.
pLi°
);

422 
	}
}

423 
	#ex¥SëHeight
(
y
)

	)

446 
Ex¥
 *
	$sqlôe3Ex¥AŒoc
(

447 
sqlôe3
 *
db
,

448 
›
,

449 c⁄° 
Tokí
 *
pTokí
,

450 
dequŸe


452 
Ex¥
 *
pNew
;

453 
nExåa
 = 0;

454 
iVÆue
 = 0;

456 
	`as£π
–
db
!=0 );

457 if–
pTokí
 ){

458 if–
›
!=
TK_INTEGER
 || 
pTokí
->
z
==0

459 || 
	`sqlôe3GëI¡32
(
pTokí
->
z
, &
iVÆue
)==0 ){

460 
nExåa
 = 
pTokí
->
n
+1;

461 
	`as£π
–
iVÆue
>=0 );

464 
pNew
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, (
Ex¥
)+
nExåa
);

465 if–
pNew
 ){

466 
	`mem£t
(
pNew
, 0, (
Ex¥
));

467 
pNew
->
›
 = (
u8
)op;

468 
pNew
->
iAgg
 = -1;

469 if–
pTokí
 ){

470 if–
nExåa
==0 ){

471 
pNew
->
Êags
 |
EP_I¡VÆue
;

472 
pNew
->
u
.
iVÆue
 = iValue;

474 
pNew
->
u
.
zTokí
 = (*)&pNew[1];

475 
	`as£π
–
pTokí
->
z
!=0 ||ÖTokí->
n
==0 );

476 if–
pTokí
->
n
 ) 
	`mem˝y
(
pNew
->
u
.
zTokí
,ÖTokí->
z
,ÖToken->n);

477 
pNew
->
u
.
zTokí
[
pTokí
->
n
] = 0;

478 if–
dequŸe
 && 
	`sqlôe3IsquŸe
(
pNew
->
u
.
zTokí
[0]) ){

479 if–
pNew
->
u
.
zTokí
[0]=='"' )ÖNew->
Êags
 |
EP_DblQuŸed
;

480 
	`sqlôe3DequŸe
(
pNew
->
u
.
zTokí
);

484 #i‡
SQLITE_MAX_EXPR_DEPTH
>0

485 
pNew
->
nHeight
 = 1;

488  
pNew
;

489 
	}
}

495 
Ex¥
 *
	$sqlôe3Ex¥
(

496 
sqlôe3
 *
db
,

497 
›
,

498 c⁄° *
zTokí


500 
Tokí
 
x
;

501 
x
.
z
 = 
zTokí
;

502 
x
.
n
 = 
zTokí
 ? 
	`sqlôe3SåÀn30
(zToken) : 0;

503  
	`sqlôe3Ex¥AŒoc
(
db
, 
›
, &
x
, 0);

504 
	}
}

512 
	$sqlôe3Ex¥AâachSubåìs
(

513 
sqlôe3
 *
db
,

514 
Ex¥
 *
pRoŸ
,

515 
Ex¥
 *
pLe·
,

516 
Ex¥
 *
pRight


518 if–
pRoŸ
==0 ){

519 
	`as£π
–
db
->
mÆlocFaûed
 );

520 
	`sqlôe3Ex¥Dñëe
(
db
, 
pLe·
);

521 
	`sqlôe3Ex¥Dñëe
(
db
, 
pRight
);

523 if–
pRight
 ){

524 
pRoŸ
->
pRight
 =ÖRight;

525 
pRoŸ
->
Êags
 |
EP_Pr›ag©e
 & 
pRight
->flags;

527 if–
pLe·
 ){

528 
pRoŸ
->
pLe·
 =ÖLeft;

529 
pRoŸ
->
Êags
 |
EP_Pr›ag©e
 & 
pLe·
->flags;

531 
	`ex¥SëHeight
(
pRoŸ
);

533 
	}
}

542 
Ex¥
 *
	$sqlôe3PEx¥
(

543 
P¨£
 *
pP¨£
,

544 
›
,

545 
Ex¥
 *
pLe·
,

546 
Ex¥
 *
pRight
,

547 c⁄° 
Tokí
 *
pTokí


549 
Ex¥
 *
p
;

550 if–
›
==
TK_AND
 && 
pP¨£
->
nEº
==0 ){

552 
p
 = 
	`sqlôe3Ex¥And
(
pP¨£
->
db
, 
pLe·
, 
pRight
);

554 
p
 = 
	`sqlôe3Ex¥AŒoc
(
pP¨£
->
db
, 
›
 & 
TKFLG_MASK
, 
pTokí
, 1);

555 
	`sqlôe3Ex¥AâachSubåìs
(
pP¨£
->
db
, 
p
, 
pLe·
, 
pRight
);

557 if–
p
 ) {

558 
	`sqlôe3Ex¥CheckHeight
(
pP¨£
, 
p
->
nHeight
);

560  
p
;

561 
	}
}

567 
	$sqlôe3PEx¥AddSñe˘
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
, 
Sñe˘
 *
pSñe˘
){

568 if–
pEx¥
 ){

569 
pEx¥
->
x
.
pSñe˘
 =ÖSelect;

570 
	`Ex¥SëPr›îty
(
pEx¥
, 
EP_xIsSñe˘
|
EP_Subquîy
);

571 
	`sqlôe3Ex¥SëHeightAndFœgs
(
pP¨£
, 
pEx¥
);

573 
	`as£π
–
pP¨£
->
db
->
mÆlocFaûed
 );

574 
	`sqlôe3Sñe˘Dñëe
(
pP¨£
->
db
, 
pSñe˘
);

576 
	}
}

593 
	$ex¥AlwaysTrue
(
Ex¥
 *
p
){

594 
v
 = 0;

595 if–
	`Ex¥HasPr›îty
(
p
, 
EP_FromJoö
) )  0;

596 if–!
	`sqlôe3Ex¥IsI¡egî
(
p
, &
v
) )  0;

597  
v
!=0;

598 
	}
}

599 
	$ex¥AlwaysFÆ£
(
Ex¥
 *
p
){

600 
v
 = 0;

601 if–
	`Ex¥HasPr›îty
(
p
, 
EP_FromJoö
) )  0;

602 if–!
	`sqlôe3Ex¥IsI¡egî
(
p
, &
v
) )  0;

603  
v
==0;

604 
	}
}

614 
Ex¥
 *
	$sqlôe3Ex¥And
(
sqlôe3
 *
db
, 
Ex¥
 *
pLe·
, Ex¥ *
pRight
){

615 if–
pLe·
==0 ){

616  
pRight
;

617 }if–
pRight
==0 ){

618  
pLe·
;

619 }if–
	`ex¥AlwaysFÆ£
(
pLe·
Ë||Éx¥AlwaysFÆ£(
pRight
) ){

620 
	`sqlôe3Ex¥Dñëe
(
db
, 
pLe·
);

621 
	`sqlôe3Ex¥Dñëe
(
db
, 
pRight
);

622  
	`sqlôe3Ex¥AŒoc
(
db
, 
TK_INTEGER
, &
sqlôe3I¡Tokís
[0], 0);

624 
Ex¥
 *
pNew
 = 
	`sqlôe3Ex¥AŒoc
(
db
, 
TK_AND
, 0, 0);

625 
	`sqlôe3Ex¥AâachSubåìs
(
db
, 
pNew
, 
pLe·
, 
pRight
);

626  
pNew
;

628 
	}
}

634 
Ex¥
 *
	$sqlôe3Ex¥Fun˘i⁄
(
P¨£
 *
pP¨£
, 
Ex¥Li°
 *
pLi°
, 
Tokí
 *
pTokí
){

635 
Ex¥
 *
pNew
;

636 
sqlôe3
 *
db
 = 
pP¨£
->db;

637 
	`as£π
–
pTokí
 );

638 
pNew
 = 
	`sqlôe3Ex¥AŒoc
(
db
, 
TK_FUNCTION
, 
pTokí
, 1);

639 if–
pNew
==0 ){

640 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
pLi°
);

643 
pNew
->
x
.
pLi°
 =ÖList;

644 
	`as£π
–!
	`Ex¥HasPr›îty
(
pNew
, 
EP_xIsSñe˘
) );

645 
	`sqlôe3Ex¥SëHeightAndFœgs
(
pP¨£
, 
pNew
);

646  
pNew
;

647 
	}
}

665 
	$sqlôe3Ex¥AssignV¨Numbî
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
){

666 
sqlôe3
 *
db
 = 
pP¨£
->db;

667 c⁄° *
z
;

669 if–
pEx¥
==0 ) ;

670 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_I¡VÆue
|
EP_Redu˚d
|
EP_TokíO∆y
) );

671 
z
 = 
pEx¥
->
u
.
zTokí
;

672 
	`as£π
–
z
!=0 );

673 
	`as£π
–
z
[0]!=0 );

674 if–
z
[1]==0 ){

676 
	`as£π
–
z
[0]=='?' );

677 
pEx¥
->
iCﬁumn
 = (
ynV¨
)(++
pP¨£
->
nV¨
);

679 
ynV¨
 
x
 = 0;

680 
u32
 
n
 = 
	`sqlôe3SåÀn30
(
z
);

681 if–
z
[0]=='?' ){

684 
i64
 
i
;

685 
bOk
 = 0==
	`sqlôe3Atoi64
(&
z
[1], &
i
, 
n
-1, 
SQLITE_UTF8
);

686 
pEx¥
->
iCﬁumn
 = 
x
 = (
ynV¨
)
i
;

687 
	`ã°ˇ£
–
i
==0 );

688 
	`ã°ˇ£
–
i
==1 );

689 
	`ã°ˇ£
–
i
==
db
->
aLimô
[
SQLITE_LIMIT_VARIABLE_NUMBER
]-1 );

690 
	`ã°ˇ£
–
i
==
db
->
aLimô
[
SQLITE_LIMIT_VARIABLE_NUMBER
] );

691 if–
bOk
==0 || 
i
<1 || i>
db
->
aLimô
[
SQLITE_LIMIT_VARIABLE_NUMBER
] ){

692 
	`sqlôe3Eº‹Msg
(
pP¨£
, "variableÇumber must be between ?1ánd ?%d",

693 
db
->
aLimô
[
SQLITE_LIMIT_VARIABLE_NUMBER
]);

694 
x
 = 0;

696 if–
i
>
pP¨£
->
nV¨
 ){

697 
pP¨£
->
nV¨
 = ()
i
;

704 
ynV¨
 
i
;

705 
i
=0; i<
pP¨£
->
nzV¨
; i++){

706 if–
pP¨£
->
azV¨
[
i
] && 
	`°rcmp
’P¨£->azV¨[i],
z
)==0 ){

707 
pEx¥
->
iCﬁumn
 = 
x
 = (
ynV¨
)
i
+1;

711 if–
x
==0 ) x = 
pEx¥
->
iCﬁumn
 = (
ynV¨
)(++
pP¨£
->
nV¨
);

713 if–
x
>0 ){

714 if–
x
>
pP¨£
->
nzV¨
 ){

715 **
a
;

716 
a
 = 
	`sqlôe3DbRóŒoc
(
db
, 
pP¨£
->
azV¨
, 
x
*(a[0]));

717 if–
a
==0 ){

718 
	`as£π
–
db
->
mÆlocFaûed
 );

721 
pP¨£
->
azV¨
 = 
a
;

722 
	`mem£t
(&
a
[
pP¨£
->
nzV¨
], 0, (
x
-pParse->nzVar)*(a[0]));

723 
pP¨£
->
nzV¨
 = 
x
;

725 if–
z
[0]!='?' || 
pP¨£
->
azV¨
[
x
-1]==0 ){

726 
	`sqlôe3DbFªe
(
db
, 
pP¨£
->
azV¨
[
x
-1]);

727 
pP¨£
->
azV¨
[
x
-1] = 
	`sqlôe3DbSåNDup
(
db
, 
z
, 
n
);

731 if–!
pP¨£
->
nEº
 &&ÖP¨£->
nV¨
>
db
->
aLimô
[
SQLITE_LIMIT_VARIABLE_NUMBER
] ){

732 
	`sqlôe3Eº‹Msg
(
pP¨£
, "too many SQL variables");

734 
	}
}

739 
SQLITE_NOINLINE
 
	$sqlôe3Ex¥DñëeNN
(
sqlôe3
 *
db
, 
Ex¥
 *
p
){

740 
	`as£π
–
p
!=0 );

742 
	`as£π
–!
	`Ex¥HasPr›îty
(
p
, 
EP_I¡VÆue
Ë||Ö->
u
.
iVÆue
>=0 );

743 if–!
	`Ex¥HasPr›îty
(
p
, 
EP_TokíO∆y
) ){

745 
	`as£π
–
p
->
x
.
pLi°
==0 ||Ö->
pRight
==0 );

746 
	`sqlôe3Ex¥Dñëe
(
db
, 
p
->
pLe·
);

747 
	`sqlôe3Ex¥Dñëe
(
db
, 
p
->
pRight
);

748 if–
	`Ex¥HasPr›îty
(
p
, 
EP_MemTokí
ËË
	`sqlôe3DbFªe
(
db
,Ö->
u
.
zTokí
);

749 if–
	`Ex¥HasPr›îty
(
p
, 
EP_xIsSñe˘
) ){

750 
	`sqlôe3Sñe˘Dñëe
(
db
, 
p
->
x
.
pSñe˘
);

752 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
p
->
x
.
pLi°
);

755 if–!
	`Ex¥HasPr›îty
(
p
, 
EP_Sètic
) ){

756 
	`sqlôe3DbFªe
(
db
, 
p
);

758 
	}
}

759 
	$sqlôe3Ex¥Dñëe
(
sqlôe3
 *
db
, 
Ex¥
 *
p
){

760 if–
p
 ) 
	`sqlôe3Ex¥DñëeNN
(
db
,Ö);

761 
	}
}

768 
	$ex¥Såu˘Size
(
Ex¥
 *
p
){

769 if–
	`Ex¥HasPr›îty
(
p
, 
EP_TokíO∆y
ËË 
EXPR_TOKENONLYSIZE
;

770 if–
	`Ex¥HasPr›îty
(
p
, 
EP_Redu˚d
ËË 
EXPR_REDUCEDSIZE
;

771  
EXPR_FULLSIZE
;

772 
	}
}

808 
	$du≥dEx¥Såu˘Size
(
Ex¥
 *
p
, 
Êags
){

809 
nSize
;

810 
	`as£π
–
Êags
==
EXPRDUP_REDUCE
 || flags==0 );

811 
	`as£π
–
EXPR_FULLSIZE
<=0xfff );

812 
	`as£π
–(0xff‡& (
EP_Redu˚d
|
EP_TokíO∆y
))==0 );

813 if–0==
Êags
 ){

814 
nSize
 = 
EXPR_FULLSIZE
;

816 
	`as£π
–!
	`Ex¥HasPr›îty
(
p
, 
EP_TokíO∆y
|
EP_Redu˚d
) );

817 
	`as£π
–!
	`Ex¥HasPr›îty
(
p
, 
EP_FromJoö
) );

818 
	`as£π
–!
	`Ex¥HasPr›îty
(
p
, 
EP_MemTokí
) );

819 
	`as£π
–!
	`Ex¥HasPr›îty
(
p
, 
EP_NoRedu˚
) );

820 if–
p
->
pLe·
 ||Ö->
x
.
pLi°
 ){

821 
nSize
 = 
EXPR_REDUCEDSIZE
 | 
EP_Redu˚d
;

823 
	`as£π
–
p
->
pRight
==0 );

824 
nSize
 = 
EXPR_TOKENONLYSIZE
 | 
EP_TokíO∆y
;

827  
nSize
;

828 
	}
}

835 
	$du≥dEx¥NodeSize
(
Ex¥
 *
p
, 
Êags
){

836 
nByã
 = 
	`du≥dEx¥Såu˘Size
(
p
, 
Êags
) & 0xfff;

837 if–!
	`Ex¥HasPr›îty
(
p
, 
EP_I¡VÆue
Ë&&Ö->
u
.
zTokí
 ){

838 
nByã
 +
	`sqlôe3SåÀn30
(
p
->
u
.
zTokí
)+1;

840  
	`ROUND8
(
nByã
);

841 
	}
}

856 
	$du≥dEx¥Size
(
Ex¥
 *
p
, 
Êags
){

857 
nByã
 = 0;

858 if–
p
 ){

859 
nByã
 = 
	`du≥dEx¥NodeSize
(
p
, 
Êags
);

860 if–
Êags
&
EXPRDUP_REDUCE
 ){

861 
nByã
 +
	`du≥dEx¥Size
(
p
->
pLe·
, 
Êags
Ë+ du≥dEx¥Size’->
pRight
, flags);

864  
nByã
;

865 
	}
}

875 
Ex¥
 *
	$ex¥Dup
(
sqlôe3
 *
db
, 
Ex¥
 *
p
, 
dupFœgs
, 
u8
 **
pzBuf„r
){

876 
Ex¥
 *
pNew
;

877 
u8
 *
zAŒoc
;

878 
u32
 
°©icFœg
;

880 
	`as£π
–
db
!=0 );

881 
	`as£π
–
p
 );

882 
	`as£π
–
dupFœgs
==0 || dupFœgs==
EXPRDUP_REDUCE
 );

883 
	`as£π
–
pzBuf„r
==0 || 
dupFœgs
==
EXPRDUP_REDUCE
 );

886 if–
pzBuf„r
 ){

887 
zAŒoc
 = *
pzBuf„r
;

888 
°©icFœg
 = 
EP_Sètic
;

890 
zAŒoc
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, 
	`du≥dEx¥Size
(
p
, 
dupFœgs
));

891 
°©icFœg
 = 0;

893 
pNew
 = (
Ex¥
 *)
zAŒoc
;

895 if–
pNew
 ){

901 c⁄° 
nSåu˘Size
 = 
	`du≥dEx¥Såu˘Size
(
p
, 
dupFœgs
);

902 c⁄° 
nNewSize
 = 
nSåu˘Size
 & 0xfff;

903 
nTokí
;

904 if–!
	`Ex¥HasPr›îty
(
p
, 
EP_I¡VÆue
Ë&&Ö->
u
.
zTokí
 ){

905 
nTokí
 = 
	`sqlôe3SåÀn30
(
p
->
u
.
zTokí
) + 1;

907 
nTokí
 = 0;

909 if–
dupFœgs
 ){

910 
	`as£π
–
	`Ex¥HasPr›îty
(
p
, 
EP_Redu˚d
)==0 );

911 
	`mem˝y
(
zAŒoc
, 
p
, 
nNewSize
);

913 
u32
 
nSize
 = (u32)
	`ex¥Såu˘Size
(
p
);

914 
	`mem˝y
(
zAŒoc
, 
p
, 
nSize
);

915 if–
nSize
<
EXPR_FULLSIZE
 ){

916 
	`mem£t
(&
zAŒoc
[
nSize
], 0, 
EXPR_FULLSIZE
-nSize);

921 
pNew
->
Êags
 &~(
EP_Redu˚d
|
EP_TokíO∆y
|
EP_Sètic
|
EP_MemTokí
);

922 
pNew
->
Êags
 |
nSåu˘Size
 & (
EP_Redu˚d
|
EP_TokíO∆y
);

923 
pNew
->
Êags
 |
°©icFœg
;

926 if–
nTokí
 ){

927 *
zTokí
 = 
pNew
->
u
.zTokí = (*)&
zAŒoc
[
nNewSize
];

928 
	`mem˝y
(
zTokí
, 
p
->
u
.zTokí, 
nTokí
);

931 if–0==((
p
->
Êags
|
pNew
->ÊagsË& 
EP_TokíO∆y
) ){

933 if–
	`Ex¥HasPr›îty
(
p
, 
EP_xIsSñe˘
) ){

934 
pNew
->
x
.
pSñe˘
 = 
	`sqlôe3Sñe˘Dup
(
db
, 
p
->x.pSñe˘, 
dupFœgs
);

936 
pNew
->
x
.
pLi°
 = 
	`sqlôe3Ex¥Li°Dup
(
db
, 
p
->x.pLi°, 
dupFœgs
);

941 if–
	`Ex¥HasPr›îty
(
pNew
, 
EP_Redu˚d
|
EP_TokíO∆y
) ){

942 
zAŒoc
 +
	`du≥dEx¥NodeSize
(
p
, 
dupFœgs
);

943 if–
	`Ex¥HasPr›îty
(
pNew
, 
EP_Redu˚d
) ){

944 
pNew
->
pLe·
 = 
p
->pLeft ?

945 
	`ex¥Dup
(
db
, 
p
->
pLe·
, 
EXPRDUP_REDUCE
, &
zAŒoc
) : 0;

946 
pNew
->
pRight
 = 
p
->pRight ?

947 
	`ex¥Dup
(
db
, 
p
->
pRight
, 
EXPRDUP_REDUCE
, &
zAŒoc
) : 0;

949 if–
pzBuf„r
 ){

950 *
pzBuf„r
 = 
zAŒoc
;

953 if–!
	`Ex¥HasPr›îty
(
p
, 
EP_TokíO∆y
) ){

954 
pNew
->
pLe·
 = 
	`sqlôe3Ex¥Dup
(
db
, 
p
->pLeft, 0);

955 
pNew
->
pRight
 = 
	`sqlôe3Ex¥Dup
(
db
, 
p
->pRight, 0);

959  
pNew
;

960 
	}
}

967 #i‚de‡
SQLITE_OMIT_CTE


968 
Wôh
 *
	$wôhDup
(
sqlôe3
 *
db
, 
Wôh
 *
p
){

969 
Wôh
 *
pRë
 = 0;

970 if–
p
 ){

971 
nByã
 = (*
p
Ë+ ’->
a
[0]Ë* (p->
nCã
-1);

972 
pRë
 = 
	`sqlôe3DbMÆlocZîo
(
db
, 
nByã
);

973 if–
pRë
 ){

974 
i
;

975 
pRë
->
nCã
 = 
p
->nCte;

976 
i
=0; i<
p
->
nCã
; i++){

977 
pRë
->
a
[
i
].
pSñe˘
 = 
	`sqlôe3Sñe˘Dup
(
db
, 
p
->a[i].pSelect, 0);

978 
pRë
->
a
[
i
].
pCﬁs
 = 
	`sqlôe3Ex¥Li°Dup
(
db
, 
p
->a[i].pCols, 0);

979 
pRë
->
a
[
i
].
zName
 = 
	`sqlôe3DbSåDup
(
db
, 
p
->a[i].zName);

983  
pRë
;

984 
	}
}

986 
	#wôhDup
(
x
,
y
Ë0

	)

1006 
Ex¥
 *
	$sqlôe3Ex¥Dup
(
sqlôe3
 *
db
, 
Ex¥
 *
p
, 
Êags
){

1007 
	`as£π
–
Êags
==0 || fœgs==
EXPRDUP_REDUCE
 );

1008  
p
 ? 
	`ex¥Dup
(
db
,Ö, 
Êags
, 0) : 0;

1009 
	}
}

1010 
Ex¥Li°
 *
	$sqlôe3Ex¥Li°Dup
(
sqlôe3
 *
db
, 
Ex¥Li°
 *
p
, 
Êags
){

1011 
Ex¥Li°
 *
pNew
;

1012 
Ex¥Li°_ôem
 *
pIãm
, *
pOldIãm
;

1013 
i
;

1014 
	`as£π
–
db
!=0 );

1015 if–
p
==0 )  0;

1016 
pNew
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, (*pNew) );

1017 if–
pNew
==0 )  0;

1018 
pNew
->
nEx¥
 = 
i
 = 
p
->nExpr;

1019 if–(
Êags
 & 
EXPRDUP_REDUCE
)==0 ) 
i
=1; i<
p
->
nEx¥
; i+=i){}

1020 
pNew
->
a
 = 
pIãm
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, 
i
*(
p
->a[0]) );

1021 if–
pIãm
==0 ){

1022 
	`sqlôe3DbFªe
(
db
, 
pNew
);

1025 
pOldIãm
 = 
p
->
a
;

1026 
i
=0; i<
p
->
nEx¥
; i++, 
pIãm
++, 
pOldIãm
++){

1027 
Ex¥
 *
pOldEx¥
 = 
pOldIãm
->
pEx¥
;

1028 
pIãm
->
pEx¥
 = 
	`sqlôe3Ex¥Dup
(
db
, 
pOldEx¥
, 
Êags
);

1029 
pIãm
->
zName
 = 
	`sqlôe3DbSåDup
(
db
, 
pOldIãm
->zName);

1030 
pIãm
->
zS∑n
 = 
	`sqlôe3DbSåDup
(
db
, 
pOldIãm
->zSpan);

1031 
pIãm
->
s‹tOrdî
 = 
pOldIãm
->sortOrder;

1032 
pIãm
->
d⁄e
 = 0;

1033 
pIãm
->
bS∑nIsTab
 = 
pOldIãm
->bSpanIsTab;

1034 
pIãm
->
u
 = 
pOldIãm
->u;

1036  
pNew
;

1037 
	}
}

1045 #i‡!
deföed
(
SQLITE_OMIT_VIEW
Ë|| !deföed(
SQLITE_OMIT_TRIGGER
) \

1046 || !
	$deföed
(
SQLITE_OMIT_SUBQUERY
)

1047 
SrcLi°
 *
	$sqlôe3SrcLi°Dup
(
sqlôe3
 *
db
, 
SrcLi°
 *
p
, 
Êags
){

1048 
SrcLi°
 *
pNew
;

1049 
i
;

1050 
nByã
;

1051 
	`as£π
–
db
!=0 );

1052 if–
p
==0 )  0;

1053 
nByã
 = (*
p
Ë+ (p->
nSrc
>0 ? ’->
a
[0]) * (p->nSrc-1) : 0);

1054 
pNew
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, 
nByã
 );

1055 if–
pNew
==0 )  0;

1056 
pNew
->
nSrc
 =ÖNew->
nAŒoc
 = 
p
->nSrc;

1057 
i
=0; i<
p
->
nSrc
; i++){

1058 
SrcLi°_ôem
 *
pNewIãm
 = &
pNew
->
a
[
i
];

1059 
SrcLi°_ôem
 *
pOldIãm
 = &
p
->
a
[
i
];

1060 
TabÀ
 *
pTab
;

1061 
pNewIãm
->
pSchema
 = 
pOldIãm
->pSchema;

1062 
pNewIãm
->
zD©aba£
 = 
	`sqlôe3DbSåDup
(
db
, 
pOldIãm
->zDatabase);

1063 
pNewIãm
->
zName
 = 
	`sqlôe3DbSåDup
(
db
, 
pOldIãm
->zName);

1064 
pNewIãm
->
zAlüs
 = 
	`sqlôe3DbSåDup
(
db
, 
pOldIãm
->zAlias);

1065 
pNewIãm
->
fg
 = 
pOldIãm
->fg;

1066 
pNewIãm
->
iCurs‹
 = 
pOldIãm
->iCursor;

1067 
pNewIãm
->
addrFûlSub
 = 
pOldIãm
->addrFillSub;

1068 
pNewIãm
->
ªgRëu∫
 = 
pOldIãm
->regReturn;

1069 if–
pNewIãm
->
fg
.
isIndexedBy
 ){

1070 
pNewIãm
->
u1
.
zIndexedBy
 = 
	`sqlôe3DbSåDup
(
db
, 
pOldIãm
->u1.zIndexedBy);

1072 
pNewIãm
->
pIBIndex
 = 
pOldIãm
->pIBIndex;

1073 if–
pNewIãm
->
fg
.
isTabFunc
 ){

1074 
pNewIãm
->
u1
.
pFuncArg
 =

1075 
	`sqlôe3Ex¥Li°Dup
(
db
, 
pOldIãm
->
u1
.
pFuncArg
, 
Êags
);

1077 
pTab
 = 
pNewIãm
->pTab = 
pOldIãm
->pTab;

1078 if–
pTab
 ){

1079 
pTab
->
nRef
++;

1081 
pNewIãm
->
pSñe˘
 = 
	`sqlôe3Sñe˘Dup
(
db
, 
pOldIãm
->pSñe˘, 
Êags
);

1082 
pNewIãm
->
pOn
 = 
	`sqlôe3Ex¥Dup
(
db
, 
pOldIãm
->pOn, 
Êags
);

1083 
pNewIãm
->
pUsög
 = 
	`sqlôe3IdLi°Dup
(
db
, 
pOldIãm
->pUsing);

1084 
pNewIãm
->
cﬁU£d
 = 
pOldIãm
->colUsed;

1086  
pNew
;

1087 
	}
}

1088 
IdLi°
 *
	$sqlôe3IdLi°Dup
(
sqlôe3
 *
db
, 
IdLi°
 *
p
){

1089 
IdLi°
 *
pNew
;

1090 
i
;

1091 
	`as£π
–
db
!=0 );

1092 if–
p
==0 )  0;

1093 
pNew
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, (*pNew) );

1094 if–
pNew
==0 )  0;

1095 
pNew
->
nId
 = 
p
->nId;

1096 
pNew
->
a
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, 
p
->
nId
*(p->a[0]) );

1097 if–
pNew
->
a
==0 ){

1098 
	`sqlôe3DbFªe
(
db
, 
pNew
);

1104 
i
=0; i<
p
->
nId
; i++){

1105 
IdLi°_ôem
 *
pNewIãm
 = &
pNew
->
a
[
i
];

1106 
IdLi°_ôem
 *
pOldIãm
 = &
p
->
a
[
i
];

1107 
pNewIãm
->
zName
 = 
	`sqlôe3DbSåDup
(
db
, 
pOldIãm
->zName);

1108 
pNewIãm
->
idx
 = 
pOldIãm
->idx;

1110  
pNew
;

1111 
	}
}

1112 
Sñe˘
 *
	$sqlôe3Sñe˘Dup
(
sqlôe3
 *
db
, 
Sñe˘
 *
p
, 
Êags
){

1113 
Sñe˘
 *
pNew
, *
pPri‹
;

1114 
	`as£π
–
db
!=0 );

1115 if–
p
==0 )  0;

1116 
pNew
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, (*
p
) );

1117 if–
pNew
==0 )  0;

1118 
pNew
->
pELi°
 = 
	`sqlôe3Ex¥Li°Dup
(
db
, 
p
->pELi°, 
Êags
);

1119 
pNew
->
pSrc
 = 
	`sqlôe3SrcLi°Dup
(
db
, 
p
->pSrc, 
Êags
);

1120 
pNew
->
pWhîe
 = 
	`sqlôe3Ex¥Dup
(
db
, 
p
->pWhîe, 
Êags
);

1121 
pNew
->
pGroupBy
 = 
	`sqlôe3Ex¥Li°Dup
(
db
, 
p
->pGroupBy, 
Êags
);

1122 
pNew
->
pHavög
 = 
	`sqlôe3Ex¥Dup
(
db
, 
p
->pHavög, 
Êags
);

1123 
pNew
->
pOrdîBy
 = 
	`sqlôe3Ex¥Li°Dup
(
db
, 
p
->pOrdîBy, 
Êags
);

1124 
pNew
->
›
 = 
p
->op;

1125 
pNew
->
pPri‹
 =ÖPri‹ = 
	`sqlôe3Sñe˘Dup
(
db
, 
p
->pPri‹, 
Êags
);

1126 if–
pPri‹
 )ÖPri‹->
pNext
 = 
pNew
;

1127 
pNew
->
pNext
 = 0;

1128 
pNew
->
pLimô
 = 
	`sqlôe3Ex¥Dup
(
db
, 
p
->pLimô, 
Êags
);

1129 
pNew
->
pOff£t
 = 
	`sqlôe3Ex¥Dup
(
db
, 
p
->pOff£t, 
Êags
);

1130 
pNew
->
iLimô
 = 0;

1131 
pNew
->
iOff£t
 = 0;

1132 
pNew
->
£lFœgs
 = 
p
->£lFœg†& ~
SF_U£sEphemîÆ
;

1133 
pNew
->
addrO≥nEphm
[0] = -1;

1134 
pNew
->
addrO≥nEphm
[1] = -1;

1135 
pNew
->
nSñe˘Row
 = 
p
->nSelectRow;

1136 
pNew
->
pWôh
 = 
	`wôhDup
(
db
, 
p
->pWith);

1137 
	`sqlôe3Sñe˘SëName
(
pNew
, 
p
->
zSñName
);

1138  
pNew
;

1139 
	}
}

1141 
Sñe˘
 *
	$sqlôe3Sñe˘Dup
(
sqlôe3
 *
db
, 
Sñe˘
 *
p
, 
Êags
){

1142 
	`as£π
–
p
==0 );

1144 
	}
}

1156 
Ex¥Li°
 *
	$sqlôe3Ex¥Li°Aµíd
(

1157 
P¨£
 *
pP¨£
,

1158 
Ex¥Li°
 *
pLi°
,

1159 
Ex¥
 *
pEx¥


1161 
sqlôe3
 *
db
 = 
pP¨£
->db;

1162 
	`as£π
–
db
!=0 );

1163 if–
pLi°
==0 ){

1164 
pLi°
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, (
Ex¥Li°
) );

1165 if–
pLi°
==0 ){

1166 
no_mem
;

1168 
pLi°
->
nEx¥
 = 0;

1169 
pLi°
->
a
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, (pList->a[0]));

1170 if–
pLi°
->
a
==0 ) 
no_mem
;

1171 }if–(
pLi°
->
nEx¥
 & (pList->nExpr-1))==0 ){

1172 
Ex¥Li°_ôem
 *
a
;

1173 
	`as£π
–
pLi°
->
nEx¥
>0 );

1174 
a
 = 
	`sqlôe3DbRóŒoc
(
db
, 
pLi°
->a,ÖLi°->
nEx¥
*2*(pList->a[0]));

1175 if–
a
==0 ){

1176 
no_mem
;

1178 
pLi°
->
a
 =á;

1180 
	`as£π
–
pLi°
->
a
!=0 );

1182 
Ex¥Li°_ôem
 *
pIãm
 = &
pLi°
->
a
[pLi°->
nEx¥
++];

1183 
	`mem£t
(
pIãm
, 0, (*pItem));

1184 
pIãm
->
pEx¥
 =ÖExpr;

1186  
pLi°
;

1188 
no_mem
:

1190 
	`sqlôe3Ex¥Dñëe
(
db
, 
pEx¥
);

1191 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
pLi°
);

1193 
	}
}

1198 
	$sqlôe3Ex¥Li°SëS‹tOrdî
(
Ex¥Li°
 *
p
, 
iS‹tOrdî
){

1199 if–
p
==0 ) ;

1200 
	`as£π
–
SQLITE_SO_UNDEFINED
<0 && 
SQLITE_SO_ASC
>=0 && 
SQLITE_SO_DESC
>0 );

1201 
	`as£π
–
p
->
nEx¥
>0 );

1202 if–
iS‹tOrdî
<0 ){

1203 
	`as£π
–
p
->
a
[p->
nEx¥
-1].
s‹tOrdî
==
SQLITE_SO_ASC
 );

1206 
p
->
a
[p->
nEx¥
-1].
s‹tOrdî
 = (
u8
)
iS‹tOrdî
;

1207 
	}
}

1217 
	$sqlôe3Ex¥Li°SëName
(

1218 
P¨£
 *
pP¨£
,

1219 
Ex¥Li°
 *
pLi°
,

1220 
Tokí
 *
pName
,

1221 
dequŸe


1223 
	`as£π
–
pLi°
!=0 || 
pP¨£
->
db
->
mÆlocFaûed
!=0 );

1224 if–
pLi°
 ){

1225 
Ex¥Li°_ôem
 *
pIãm
;

1226 
	`as£π
–
pLi°
->
nEx¥
>0 );

1227 
pIãm
 = &
pLi°
->
a
[pLi°->
nEx¥
-1];

1228 
	`as£π
–
pIãm
->
zName
==0 );

1229 
pIãm
->
zName
 = 
	`sqlôe3DbSåNDup
(
pP¨£
->
db
, 
pName
->
z
,ÖName->
n
);

1230 if–
dequŸe
 ) 
	`sqlôe3DequŸe
(
pIãm
->
zName
);

1232 
	}
}

1242 
	$sqlôe3Ex¥Li°SëS∑n
(

1243 
P¨£
 *
pP¨£
,

1244 
Ex¥Li°
 *
pLi°
,

1245 
Ex¥S∑n
 *
pS∑n


1247 
sqlôe3
 *
db
 = 
pP¨£
->db;

1248 
	`as£π
–
pLi°
!=0 || 
db
->
mÆlocFaûed
!=0 );

1249 if–
pLi°
 ){

1250 
Ex¥Li°_ôem
 *
pIãm
 = &
pLi°
->
a
[pLi°->
nEx¥
-1];

1251 
	`as£π
–
pLi°
->
nEx¥
>0 );

1252 
	`as£π
–
db
->
mÆlocFaûed
 || 
pIãm
->
pEx¥
==
pS∑n
->pExpr );

1253 
	`sqlôe3DbFªe
(
db
, 
pIãm
->
zS∑n
);

1254 
pIãm
->
zS∑n
 = 
	`sqlôe3DbSåNDup
(
db
, (*)
pS∑n
->
zSèπ
,

1255 ()(
pS∑n
->
zEnd
 -ÖS∑n->
zSèπ
));

1257 
	}
}

1263 
	$sqlôe3Ex¥Li°CheckLígth
(

1264 
P¨£
 *
pP¨£
,

1265 
Ex¥Li°
 *
pELi°
,

1266 c⁄° *
zObje˘


1268 
mx
 = 
pP¨£
->
db
->
aLimô
[
SQLITE_LIMIT_COLUMN
];

1269 
	`ã°ˇ£
–
pELi°
 &&ÖELi°->
nEx¥
==
mx
 );

1270 
	`ã°ˇ£
–
pELi°
 &&ÖELi°->
nEx¥
==
mx
+1 );

1271 if–
pELi°
 &&ÖELi°->
nEx¥
>
mx
 ){

1272 
	`sqlôe3Eº‹Msg
(
pP¨£
, "toÿm™y cﬁumn†ö %s", 
zObje˘
);

1274 
	}
}

1279 
SQLITE_NOINLINE
 
	$ex¥Li°DñëeNN
(
sqlôe3
 *
db
, 
Ex¥Li°
 *
pLi°
){

1280 
i
;

1281 
Ex¥Li°_ôem
 *
pIãm
;

1282 
	`as£π
–
pLi°
->
a
!=0 ||ÖLi°->
nEx¥
==0 );

1283 
pIãm
=
pLi°
->
a
, 
i
=0; i<pLi°->
nEx¥
; i++,ÖItem++){

1284 
	`sqlôe3Ex¥Dñëe
(
db
, 
pIãm
->
pEx¥
);

1285 
	`sqlôe3DbFªe
(
db
, 
pIãm
->
zName
);

1286 
	`sqlôe3DbFªe
(
db
, 
pIãm
->
zS∑n
);

1288 
	`sqlôe3DbFªe
(
db
, 
pLi°
->
a
);

1289 
	`sqlôe3DbFªe
(
db
, 
pLi°
);

1290 
	}
}

1291 
	$sqlôe3Ex¥Li°Dñëe
(
sqlôe3
 *
db
, 
Ex¥Li°
 *
pLi°
){

1292 if–
pLi°
 ) 
	`ex¥Li°DñëeNN
(
db
,ÖList);

1293 
	}
}

1299 
u32
 
	$sqlôe3Ex¥Li°Fœgs
(c⁄° 
Ex¥Li°
 *
pLi°
){

1300 
i
;

1301 
u32
 
m
 = 0;

1302 if–
pLi°
 ){

1303 
i
=0; i<
pLi°
->
nEx¥
; i++){

1304 
Ex¥
 *
pEx¥
 = 
pLi°
->
a
[
i
].pExpr;

1305 
	`as£π
–
pEx¥
!=0 );

1306 
m
 |
pEx¥
->
Êags
;

1309  
m
;

1310 
	}
}

1337 
	$ex¥NodeIsC⁄°™t
(
WÆkî
 *
pWÆkî
, 
Ex¥
 *
pEx¥
){

1342 if–
pWÆkî
->
eCode
==2 && 
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_FromJoö
) ){

1343 
pWÆkî
->
eCode
 = 0;

1344  
WRC_Ab‹t
;

1347  
pEx¥
->
›
 ){

1351 
TK_FUNCTION
:

1352 if–
pWÆkî
->
eCode
>=4 || 
	`Ex¥HasPr›îty
(
pEx¥
,
EP_C⁄°Func
) ){

1353  
WRC_C⁄töue
;

1355 
pWÆkî
->
eCode
 = 0;

1356  
WRC_Ab‹t
;

1358 
TK_ID
:

1359 
TK_COLUMN
:

1360 
TK_AGG_FUNCTION
:

1361 
TK_AGG_COLUMN
:

1362 
	`ã°ˇ£
–
pEx¥
->
›
==
TK_ID
 );

1363 
	`ã°ˇ£
–
pEx¥
->
›
==
TK_COLUMN
 );

1364 
	`ã°ˇ£
–
pEx¥
->
›
==
TK_AGG_FUNCTION
 );

1365 
	`ã°ˇ£
–
pEx¥
->
›
==
TK_AGG_COLUMN
 );

1366 if–
pWÆkî
->
eCode
==3 && 
pEx¥
->
iTabÀ
=ıWÆkî->
u
.
iCur
 ){

1367  
WRC_C⁄töue
;

1369 
pWÆkî
->
eCode
 = 0;

1370  
WRC_Ab‹t
;

1372 
TK_VARIABLE
:

1373 if–
pWÆkî
->
eCode
==5 ){

1377 
pEx¥
->
›
 = 
TK_NULL
;

1378 }if–
pWÆkî
->
eCode
==4 ){

1381 
pWÆkî
->
eCode
 = 0;

1382  
WRC_Ab‹t
;

1386 
	`ã°ˇ£
–
pEx¥
->
›
==
TK_SELECT
 );

1387 
	`ã°ˇ£
–
pEx¥
->
›
==
TK_EXISTS
 );

1388  
WRC_C⁄töue
;

1390 
	}
}

1391 
	$£À˘NodeIsC⁄°™t
(
WÆkî
 *
pWÆkî
, 
Sñe˘
 *
NŸU£d
){

1392 
	`UNUSED_PARAMETER
(
NŸU£d
);

1393 
pWÆkî
->
eCode
 = 0;

1394  
WRC_Ab‹t
;

1395 
	}
}

1396 
	$ex¥IsC⁄°
(
Ex¥
 *
p
, 
öôFœg
, 
iCur
){

1397 
WÆkî
 
w
;

1398 
	`mem£t
(&
w
, 0, (w));

1399 
w
.
eCode
 = 
öôFœg
;

1400 
w
.
xEx¥CÆlback
 = 
ex¥NodeIsC⁄°™t
;

1401 
w
.
xSñe˘CÆlback
 = 
£À˘NodeIsC⁄°™t
;

1402 
w
.
u
.
iCur
 = iCur;

1403 
	`sqlôe3WÆkEx¥
(&
w
, 
p
);

1404  
w
.
eCode
;

1405 
	}
}

1415 
	$sqlôe3Ex¥IsC⁄°™t
(
Ex¥
 *
p
){

1416  
	`ex¥IsC⁄°
(
p
, 1, 0);

1417 
	}
}

1425 
	$sqlôe3Ex¥IsC⁄°™tNŸJoö
(
Ex¥
 *
p
){

1426  
	`ex¥IsC⁄°
(
p
, 2, 0);

1427 
	}
}

1435 
	$sqlôe3Ex¥IsTabÀC⁄°™t
(
Ex¥
 *
p
, 
iCur
){

1436  
	`ex¥IsC⁄°
(
p
, 3, 
iCur
);

1437 
	}
}

1448 
	$sqlôe3Ex¥IsC⁄°™tOrFun˘i⁄
(
Ex¥
 *
p
, 
u8
 
isInô
){

1449 
	`as£π
–
isInô
==0 || isInit==1 );

1450  
	`ex¥IsC⁄°
(
p
, 4+
isInô
, 0);

1451 
	}
}

1453 #ifde‡
SQLITE_ENABLE_CURSOR_HINTS


1458 
	$sqlôe3Ex¥C⁄èösSubquîy
(
Ex¥
 *
p
){

1459 
WÆkî
 
w
;

1460 
	`mem£t
(&
w
, 0, (w));

1461 
w
.
eCode
 = 1;

1462 
w
.
xEx¥CÆlback
 = 
sqlôe3Ex¥WÆkNo›
;

1463 
w
.
xSñe˘CÆlback
 = 
£À˘NodeIsC⁄°™t
;

1464 
	`sqlôe3WÆkEx¥
(&
w
, 
p
);

1465  
w
.
eCode
==0;

1466 
	}
}

1475 
	$sqlôe3Ex¥IsI¡egî
(
Ex¥
 *
p
, *
pVÆue
){

1476 
rc
 = 0;

1480 
	`as£π
–
p
->
›
!=
TK_INTEGER
 || (p->
Êags
 & 
EP_I¡VÆue
)!=0

1481 || 
	`sqlôe3GëI¡32
(
p
->
u
.
zTokí
, &
rc
)==0 );

1483 if–
p
->
Êags
 & 
EP_I¡VÆue
 ){

1484 *
pVÆue
 = 
p
->
u
.
iVÆue
;

1487  
p
->
›
 ){

1488 
TK_UPLUS
: {

1489 
rc
 = 
	`sqlôe3Ex¥IsI¡egî
(
p
->
pLe·
, 
pVÆue
);

1492 
TK_UMINUS
: {

1493 
v
;

1494 if–
	`sqlôe3Ex¥IsI¡egî
(
p
->
pLe·
, &
v
) ){

1495 
	`as£π
–
v
!=(-2147483647-1) );

1496 *
pVÆue
 = -
v
;

1497 
rc
 = 1;

1503  
rc
;

1504 
	}
}

1520 
	$sqlôe3Ex¥C™BeNuŒ
(c⁄° 
Ex¥
 *
p
){

1521 
u8
 
›
;

1522  
p
->
›
==
TK_UPLUS
 ||Ö->›==
TK_UMINUS
 ){Ö =Ö->
pLe·
; }

1523 
›
 = 
p
->op;

1524 if–
›
==
TK_REGISTER
 ) o∞
p
->
›2
;

1525  
›
 ){

1526 
TK_INTEGER
:

1527 
TK_STRING
:

1528 
TK_FLOAT
:

1529 
TK_BLOB
:

1531 
TK_COLUMN
:

1532 
	`as£π
–
p
->
pTab
!=0 );

1533  
	`Ex¥HasPr›îty
(
p
, 
EP_C™BeNuŒ
) ||

1534 (
p
->
iCﬁumn
>=0 &&Ö->
pTab
->
aCﬁ
[p->iCﬁumn].
nŸNuŒ
==0);

1538 
	}
}

1550 
	$sqlôe3Ex¥NìdsNoAfföôyCh™ge
(c⁄° 
Ex¥
 *
p
, 
aff
){

1551 
u8
 
›
;

1552 if–
aff
==
SQLITE_AFF_BLOB
 )  1;

1553  
p
->
›
==
TK_UPLUS
 ||Ö->›==
TK_UMINUS
 ){Ö =Ö->
pLe·
; }

1554 
›
 = 
p
->op;

1555 if–
›
==
TK_REGISTER
 ) o∞
p
->
›2
;

1556  
›
 ){

1557 
TK_INTEGER
: {

1558  
aff
==
SQLITE_AFF_INTEGER
 ||áff==
SQLITE_AFF_NUMERIC
;

1560 
TK_FLOAT
: {

1561  
aff
==
SQLITE_AFF_REAL
 ||áff==
SQLITE_AFF_NUMERIC
;

1563 
TK_STRING
: {

1564  
aff
==
SQLITE_AFF_TEXT
;

1566 
TK_BLOB
: {

1569 
TK_COLUMN
: {

1570 
	`as£π
–
p
->
iTabÀ
>=0 );

1571  
p
->
iCﬁumn
<0

1572 && (
aff
==
SQLITE_AFF_INTEGER
 ||áff==
SQLITE_AFF_NUMERIC
);

1578 
	}
}

1583 
	$sqlôe3IsRowid
(c⁄° *
z
){

1584 if–
	`sqlôe3SåICmp
(
z
, "_ROWID_")==0 )  1;

1585 if–
	`sqlôe3SåICmp
(
z
, "ROWID")==0 )  1;

1586 if–
	`sqlôe3SåICmp
(
z
, "OID")==0 )  1;

1588 
	}
}

1597 #i‚de‡
SQLITE_OMIT_SUBQUERY


1598 
Sñe˘
 *
	$isC™did©eF‹InO±
(
Ex¥
 *
pX
){

1599 
Sñe˘
 *
p
;

1600 
SrcLi°
 *
pSrc
;

1601 
Ex¥Li°
 *
pELi°
;

1602 
Ex¥
 *
pRes
;

1603 
TabÀ
 *
pTab
;

1604 if–!
	`Ex¥HasPr›îty
(
pX
, 
EP_xIsSñe˘
) )  0;

1605 if–
	`Ex¥HasPr›îty
(
pX
, 
EP_V¨Sñe˘
) )  0;

1606 
p
 = 
pX
->
x
.
pSñe˘
;

1607 if–
p
->
pPri‹
 )  0;

1608 if–
p
->
£lFœgs
 & (
SF_Di°ö˘
|
SF_Aggªg©e
) ){

1609 
	`ã°ˇ£
–(
p
->
£lFœgs
 & (
SF_Di°ö˘
|
SF_Aggªg©e
))==SF_Distinct );

1610 
	`ã°ˇ£
–(
p
->
£lFœgs
 & (
SF_Di°ö˘
|
SF_Aggªg©e
))==SF_Aggregate );

1613 
	`as£π
–
p
->
pGroupBy
==0 );

1614 if–
p
->
pLimô
 )  0;

1615 
	`as£π
–
p
->
pOff£t
==0 );

1616 if–
p
->
pWhîe
 )  0;

1617 
pSrc
 = 
p
->pSrc;

1618 
	`as£π
–
pSrc
!=0 );

1619 if–
pSrc
->
nSrc
!=1 )  0;

1620 if–
pSrc
->
a
[0].
pSñe˘
 )  0;

1621 
pTab
 = 
pSrc
->
a
[0].pTab;

1622 
	`as£π
–
pTab
!=0 );

1623 
	`as£π
–
pTab
->
pSñe˘
==0 );

1624 if–
	`IsVútuÆ
(
pTab
) )  0;

1625 
pELi°
 = 
p
->pEList;

1626 if–
pELi°
->
nEx¥
!=1 )  0;

1627 
pRes
 = 
pELi°
->
a
[0].
pEx¥
;

1628 if–
pRes
->
›
!=
TK_COLUMN
 )  0;

1629 
	`as£π
–
pRes
->
iTabÀ
==
pSrc
->
a
[0].
iCurs‹
 );

1630  
p
;

1631 
	}
}

1638 
	$sqlôe3CodeOn˚
(
P¨£
 *
pP¨£
){

1639 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1640  
	`sqlôe3VdbeAddOp1
(
v
, 
OP_On˚
, 
pP¨£
->
nOn˚
++);

1641 
	}
}

1649 
	$sqlôe3SëHasNuŒFœg
(
Vdbe
 *
v
, 
iCur
, 
ªgHasNuŒ
){

1650 
addr1
;

1651 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 0, 
ªgHasNuŒ
);

1652 
addr1
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Rewöd
, 
iCur
); 
	`VdbeCovîage
(v);

1653 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Cﬁumn
, 
iCur
, 0, 
ªgHasNuŒ
);

1654 
	`sqlôe3VdbeCh™geP5
(
v
, 
OPFLAG_TYPEOFARG
);

1655 
	`VdbeCommít
((
v
, "fú°_íåy_ö(%d)", 
iCur
));

1656 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr1
);

1657 
	}
}

1660 #i‚de‡
SQLITE_OMIT_SUBQUERY


1665 
	$sqlôe3InRhsIsC⁄°™t
(
Ex¥
 *
pIn
){

1666 
Ex¥
 *
pLHS
;

1667 
ªs
;

1668 
	`as£π
–!
	`Ex¥HasPr›îty
(
pIn
, 
EP_xIsSñe˘
) );

1669 
pLHS
 = 
pIn
->
pLe·
;

1670 
pIn
->
pLe·
 = 0;

1671 
ªs
 = 
	`sqlôe3Ex¥IsC⁄°™t
(
pIn
);

1672 
pIn
->
pLe·
 = 
pLHS
;

1673  
ªs
;

1674 
	}
}

1747 #i‚de‡
SQLITE_OMIT_SUBQUERY


1748 
	$sqlôe3FödInIndex
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pX
, 
u32
 
öFœgs
, *
¥RhsHasNuŒ
){

1749 
Sñe˘
 *
p
;

1750 
eTy≥
 = 0;

1751 
iTab
 = 
pP¨£
->
nTab
++;

1752 
mu°BeUnique
;

1753 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1755 
	`as£π
–
pX
->
›
==
TK_IN
 );

1756 
mu°BeUnique
 = (
öFœgs
 & 
IN_INDEX_LOOP
)!=0;

1762 if–
pP¨£
->
nEº
==0 && (
p
 = 
	`isC™did©eF‹InO±
(
pX
))!=0 ){

1763 
sqlôe3
 *
db
 = 
pP¨£
->db;

1764 
TabÀ
 *
pTab
;

1765 
Ex¥
 *
pEx¥
;

1766 
i16
 
iCﬁ
;

1767 
i16
 
iDb
;

1769 
	`as£π
–
p
->
pELi°
!=0 );

1770 
	`as£π
–
p
->
pELi°
->
a
[0].
pEx¥
!=0 );

1771 
	`as£π
–
p
->
pSrc
!=0 );

1772 
pTab
 = 
p
->
pSrc
->
a
[0].pTab;

1773 
pEx¥
 = 
p
->
pELi°
->
a
[0].pExpr;

1774 
iCﬁ
 = (
i16
)
pEx¥
->
iCﬁumn
;

1777 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pTab
->
pSchema
);

1778 
	`sqlôe3CodeVîifySchema
(
pP¨£
, 
iDb
);

1779 
	`sqlôe3TabÀLock
(
pP¨£
, 
iDb
, 
pTab
->
äum
, 0,ÖTab->
zName
);

1785 
	`as£π
(
v
);

1786 if–
iCﬁ
<0 ){

1787 
iAddr
 = 
	`sqlôe3CodeOn˚
(
pP¨£
);

1788 
	`VdbeCovîage
(
v
);

1790 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 
iTab
, 
iDb
, 
pTab
, 
OP_O≥nRód
);

1791 
eTy≥
 = 
IN_INDEX_ROWID
;

1793 
	`sqlôe3VdbeJumpHîe
(
v
, 
iAddr
);

1795 
Index
 *
pIdx
;

1800 
CﬁlSeq
 *
pReq
 = 
	`sqlôe3Bö¨yCom∑ªCﬁlSeq
(
pP¨£
, 
pX
->
pLe·
, 
pEx¥
);

1806 
afföôy_ok
 = 
	`sqlôe3IndexAfföôyOk
(
pX
, 
pTab
->
aCﬁ
[
iCﬁ
].
afföôy
);

1808 
pIdx
=
pTab
->
pIndex
;ÖIdx && 
eTy≥
==0 && 
afföôy_ok
;ÖIdxıIdx->
pNext
){

1809 if–(
pIdx
->
aiCﬁumn
[0]==
iCﬁ
)

1810 && 
	`sqlôe3FödCﬁlSeq
(
db
, 
	`ENC
(db), 
pIdx
->
azCﬁl
[0], 0)==
pReq


1811 && (!
mu°BeUnique
 || (
pIdx
->
nKeyCﬁ
==1 && 
	`IsUniqueIndex
(pIdx)))

1813 
iAddr
 = 
	`sqlôe3CodeOn˚
(
pP¨£
); 
	`VdbeCovîage
(
v
);

1814 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_O≥nRód
, 
iTab
, 
pIdx
->
äum
, 
iDb
);

1815 
	`sqlôe3VdbeSëP4KeyInfo
(
pP¨£
, 
pIdx
);

1816 
	`VdbeCommít
((
v
, "%s", 
pIdx
->
zName
));

1817 
	`as£π
–
IN_INDEX_INDEX_DESC
 =
IN_INDEX_INDEX_ASC
+1 );

1818 
eTy≥
 = 
IN_INDEX_INDEX_ASC
 + 
pIdx
->
aS‹tOrdî
[0];

1820 if–
¥RhsHasNuŒ
 && !
pTab
->
aCﬁ
[
iCﬁ
].
nŸNuŒ
 ){

1821 *
¥RhsHasNuŒ
 = ++
pP¨£
->
nMem
;

1822 
	`sqlôe3SëHasNuŒFœg
(
v
, 
iTab
, *
¥RhsHasNuŒ
);

1824 
	`sqlôe3VdbeJumpHîe
(
v
, 
iAddr
);

1837 if–
eTy≥
==0

1838 && (
öFœgs
 & 
IN_INDEX_NOOP_OK
)

1839 && !
	`Ex¥HasPr›îty
(
pX
, 
EP_xIsSñe˘
)

1840 && (!
	`sqlôe3InRhsIsC⁄°™t
(
pX
Ë||ÖX->
x
.
pLi°
->
nEx¥
<=2)

1842 
eTy≥
 = 
IN_INDEX_NOOP
;

1846 if–
eTy≥
==0 ){

1850 
u32
 
ßvedNQuîyLo›
 = 
pP¨£
->
nQuîyLo›
;

1851 
rMayHaveNuŒ
 = 0;

1852 
eTy≥
 = 
IN_INDEX_EPH
;

1853 if–
öFœgs
 & 
IN_INDEX_LOOP
 ){

1854 
pP¨£
->
nQuîyLo›
 = 0;

1855 if–
pX
->
pLe·
->
iCﬁumn
<0 && !
	`Ex¥HasPr›îty
’X, 
EP_xIsSñe˘
) ){

1856 
eTy≥
 = 
IN_INDEX_ROWID
;

1858 }if–
¥RhsHasNuŒ
 ){

1859 *
¥RhsHasNuŒ
 = 
rMayHaveNuŒ
 = ++
pP¨£
->
nMem
;

1861 
	`sqlôe3CodeSub£À˘
(
pP¨£
, 
pX
, 
rMayHaveNuŒ
, 
eTy≥
==
IN_INDEX_ROWID
);

1862 
pP¨£
->
nQuîyLo›
 = 
ßvedNQuîyLo›
;

1864 
pX
->
iTabÀ
 = 
iTab
;

1866  
eTy≥
;

1867 
	}
}

1897 #i‚de‡
SQLITE_OMIT_SUBQUERY


1898 
	$sqlôe3CodeSub£À˘
(

1899 
P¨£
 *
pP¨£
,

1900 
Ex¥
 *
pEx¥
,

1901 
rHasNuŒFœg
,

1902 
isRowid


1904 
jmpIfDy«mic
 = -1;

1905 
rReg
 = 0;

1906 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1907 if–
	`NEVER
(
v
==0) )  0;

1908 
	`sqlôe3Ex¥CachePush
(
pP¨£
);

1920 if–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_V¨Sñe˘
) ){

1921 
jmpIfDy«mic
 = 
	`sqlôe3CodeOn˚
(
pP¨£
); 
	`VdbeCovîage
(
v
);

1924 #i‚de‡
SQLITE_OMIT_EXPLAIN


1925 if–
pP¨£
->
ex∂aö
==2 ){

1926 *
zMsg
 = 
	`sqlôe3MPrötf
(
pP¨£
->
db
, "EXECUTE %s%s SUBQUERY %d",

1927 
jmpIfDy«mic
>=0?"":"CORRELATED ",

1928 
pEx¥
->
›
==
TK_IN
?"LIST":"SCALAR",

1929 
pP¨£
->
iNextSñe˘Id


1931 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Ex∂aö
, 
pP¨£
->
iSñe˘Id
, 0, 0, 
zMsg
, 
P4_DYNAMIC
);

1935  
pEx¥
->
›
 ){

1936 
TK_IN
: {

1937 
afföôy
;

1938 
addr
;

1939 
Ex¥
 *
pLe·
 = 
pEx¥
->pLeft;

1940 
KeyInfo
 *
pKeyInfo
 = 0;

1942 
afföôy
 = 
	`sqlôe3Ex¥Afföôy
(
pLe·
);

1957 
pEx¥
->
iTabÀ
 = 
pP¨£
->
nTab
++;

1958 
addr
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_O≥nEphemîÆ
, 
pEx¥
->
iTabÀ
, !
isRowid
);

1959 
pKeyInfo
 = 
isRowid
 ? 0 : 
	`sqlôe3KeyInfoAŒoc
(
pP¨£
->
db
, 1, 1);

1961 if–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_xIsSñe˘
) ){

1967 
Sñe˘
 *
pSñe˘
 = 
pEx¥
->
x
.pSelect;

1968 
Sñe˘De°
 
de°
;

1969 
Ex¥Li°
 *
pELi°
;

1971 
	`as£π
–!
isRowid
 );

1972 
	`sqlôe3Sñe˘De°Inô
(&
de°
, 
SRT_Së
, 
pEx¥
->
iTabÀ
);

1973 
de°
.
affSd°
 = (
u8
)
afföôy
;

1974 
	`as£π
–(
pEx¥
->
iTabÀ
&0x0000FFFF)==pExpr->iTable );

1975 
pSñe˘
->
iLimô
 = 0;

1976 
	`ã°ˇ£
–
pSñe˘
->
£lFœgs
 & 
SF_Di°ö˘
 );

1977 
	`ã°ˇ£
–
pKeyInfo
==0 );

1978 if–
	`sqlôe3Sñe˘
(
pP¨£
, 
pSñe˘
, &
de°
) ){

1979 
	`sqlôe3KeyInfoUƒef
(
pKeyInfo
);

1982 
pELi°
 = 
pSñe˘
->pEList;

1983 
	`as£π
–
pKeyInfo
!=0 );

1984 
	`as£π
–
pELi°
!=0 );

1985 
	`as£π
–
pELi°
->
nEx¥
>0 );

1986 
	`as£π
–
	`sqlôe3KeyInfoIsWrôóbÀ
(
pKeyInfo
) );

1987 
pKeyInfo
->
aCﬁl
[0] = 
	`sqlôe3Bö¨yCom∑ªCﬁlSeq
(
pP¨£
, 
pEx¥
->
pLe·
,

1988 
pELi°
->
a
[0].
pEx¥
);

1989 }if–
	`ALWAYS
(
pEx¥
->
x
.
pLi°
!=0) ){

1997 
i
;

1998 
Ex¥Li°
 *
pLi°
 = 
pEx¥
->
x
.pList;

1999 
Ex¥Li°_ôem
 *
pIãm
;

2000 
r1
, 
r2
, 
r3
;

2002 if–!
afföôy
 ){

2003 
afföôy
 = 
SQLITE_AFF_BLOB
;

2005 if–
pKeyInfo
 ){

2006 
	`as£π
–
	`sqlôe3KeyInfoIsWrôóbÀ
(
pKeyInfo
) );

2007 
pKeyInfo
->
aCﬁl
[0] = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pEx¥
->
pLe·
);

2011 
r1
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

2012 
r2
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

2013 if–
isRowid
 ) 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NuŒ
, 0, 
r2
);

2014 
i
=
pLi°
->
nEx¥
, 
pIãm
ıLi°->
a
; i>0; i--,ÖItem++){

2015 
Ex¥
 *
pE2
 = 
pIãm
->
pEx¥
;

2016 
iVÆToIns
;

2023 if–
jmpIfDy«mic
>=0 && !
	`sqlôe3Ex¥IsC⁄°™t
(
pE2
) ){

2024 
	`sqlôe3VdbeCh™geToNo›
(
v
, 
jmpIfDy«mic
);

2025 
jmpIfDy«mic
 = -1;

2029 if–
isRowid
 && 
	`sqlôe3Ex¥IsI¡egî
(
pE2
, &
iVÆToIns
) ){

2030 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_In£πI¡
, 
pEx¥
->
iTabÀ
, 
r2
, 
iVÆToIns
);

2032 
r3
 = 
	`sqlôe3Ex¥CodeT¨gë
(
pP¨£
, 
pE2
, 
r1
);

2033 if–
isRowid
 ){

2034 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Mu°BeI¡
, 
r3
,

2035 
	`sqlôe3VdbeCuºítAddr
(
v
)+2);

2036 
	`VdbeCovîage
(
v
);

2037 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_In£π
, 
pEx¥
->
iTabÀ
, 
r2
, 
r3
);

2039 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_MakeRec‹d
, 
r3
, 1, 
r2
, &
afföôy
, 1);

2040 
	`sqlôe3Ex¥CacheAfföôyCh™ge
(
pP¨£
, 
r3
, 1);

2041 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IdxIn£π
, 
pEx¥
->
iTabÀ
, 
r2
);

2045 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
r1
);

2046 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
r2
);

2048 if–
pKeyInfo
 ){

2049 
	`sqlôe3VdbeCh™geP4
(
v
, 
addr
, (*)
pKeyInfo
, 
P4_KEYINFO
);

2054 
TK_EXISTS
:

2055 
TK_SELECT
:

2063 
Sñe˘
 *
pSñ
;

2064 
Sñe˘De°
 
de°
;

2066 
	`ã°ˇ£
–
pEx¥
->
›
==
TK_EXISTS
 );

2067 
	`ã°ˇ£
–
pEx¥
->
›
==
TK_SELECT
 );

2068 
	`as£π
–
pEx¥
->
›
==
TK_EXISTS
 ||ÖEx¥->›==
TK_SELECT
 );

2070 
	`as£π
–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_xIsSñe˘
) );

2071 
pSñ
 = 
pEx¥
->
x
.
pSñe˘
;

2072 
	`sqlôe3Sñe˘De°Inô
(&
de°
, 0, ++
pP¨£
->
nMem
);

2073 if–
pEx¥
->
›
==
TK_SELECT
 ){

2074 
de°
.
eDe°
 = 
SRT_Mem
;

2075 
de°
.
iSd°
 = de°.
iSDP¨m
;

2076 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NuŒ
, 0, 
de°
.
iSDP¨m
);

2077 
	`VdbeCommít
((
v
, "Init subqueryÑesult"));

2079 
de°
.
eDe°
 = 
SRT_Exi°s
;

2080 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 0, 
de°
.
iSDP¨m
);

2081 
	`VdbeCommít
((
v
, "Init EXISTSÑesult"));

2083 
	`sqlôe3Ex¥Dñëe
(
pP¨£
->
db
, 
pSñ
->
pLimô
);

2084 
pSñ
->
pLimô
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_INTEGER
, 0, 0,

2085 &
sqlôe3I¡Tokís
[1]);

2086 
pSñ
->
iLimô
 = 0;

2087 
pSñ
->
£lFœgs
 &~
SF_Mu…iVÆue
;

2088 if–
	`sqlôe3Sñe˘
(
pP¨£
, 
pSñ
, &
de°
) ){

2091 
rReg
 = 
de°
.
iSDP¨m
;

2092 
	`Ex¥SëVVAPr›îty
(
pEx¥
, 
EP_NoRedu˚
);

2097 if–
rHasNuŒFœg
 ){

2098 
	`sqlôe3SëHasNuŒFœg
(
v
, 
pEx¥
->
iTabÀ
, 
rHasNuŒFœg
);

2101 if–
jmpIfDy«mic
>=0 ){

2102 
	`sqlôe3VdbeJumpHîe
(
v
, 
jmpIfDy«mic
);

2104 
	`sqlôe3Ex¥CacheP›
(
pP¨£
);

2106  
rReg
;

2107 
	}
}

2110 #i‚de‡
SQLITE_OMIT_SUBQUERY


2128 
	$sqlôe3Ex¥CodeIN
(

2129 
P¨£
 *
pP¨£
,

2130 
Ex¥
 *
pEx¥
,

2131 
de°IfFÆ£
,

2132 
de°IfNuŒ


2134 
rRhsHasNuŒ
 = 0;

2135 
afföôy
;

2136 
eTy≥
;

2137 
r1
;

2138 
Vdbe
 *
v
;

2143 
v
 = 
pP¨£
->
pVdbe
;

2144 
	`as£π
–
v
!=0 );

2145 
	`VdbeNo›Commít
((
v
, "begin INÉxpr"));

2146 
eTy≥
 = 
	`sqlôe3FödInIndex
(
pP¨£
, 
pEx¥
,

2147 
IN_INDEX_MEMBERSHIP
 | 
IN_INDEX_NOOP_OK
,

2148 
de°IfFÆ£
==
de°IfNuŒ
 ? 0 : &
rRhsHasNuŒ
);

2154 
afföôy
 = 
	`com∑ris⁄Afföôy
(
pEx¥
);

2158 
	`sqlôe3Ex¥CachePush
(
pP¨£
);

2159 
r1
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

2160 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
->
pLe·
, 
r1
);

2166 if–
eTy≥
==
IN_INDEX_NOOP
 ){

2167 
Ex¥Li°
 *
pLi°
 = 
pEx¥
->
x
.pList;

2168 
CﬁlSeq
 *
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pEx¥
->
pLe·
);

2169 
œbñOk
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

2170 
r2
, 
ªgToFªe
;

2171 
ªgCkNuŒ
 = 0;

2172 
ii
;

2173 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_xIsSñe˘
) );

2174 if–
de°IfNuŒ
!=
de°IfFÆ£
 ){

2175 
ªgCkNuŒ
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

2176 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_BôAnd
, 
r1
,Ñ1, 
ªgCkNuŒ
);

2178 
ii
=0; ii<
pLi°
->
nEx¥
; ii++){

2179 
r2
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pLi°
->
a
[
ii
].
pEx¥
, &
ªgToFªe
);

2180 if–
ªgCkNuŒ
 && 
	`sqlôe3Ex¥C™BeNuŒ
(
pLi°
->
a
[
ii
].
pEx¥
) ){

2181 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_BôAnd
, 
ªgCkNuŒ
, 
r2
,ÑegCkNull);

2183 if–
ii
<
pLi°
->
nEx¥
-1 || 
de°IfNuŒ
!=
de°IfFÆ£
 ){

2184 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Eq
, 
r1
, 
œbñOk
, 
r2
,

2185 (*)
pCﬁl
, 
P4_COLLSEQ
);

2186 
	`VdbeCovîageIf
(
v
, 
ii
<
pLi°
->
nEx¥
-1);

2187 
	`VdbeCovîageIf
(
v
, 
ii
==
pLi°
->
nEx¥
-1);

2188 
	`sqlôe3VdbeCh™geP5
(
v
, 
afföôy
);

2190 
	`as£π
–
de°IfNuŒ
==
de°IfFÆ£
 );

2191 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Ne
, 
r1
, 
de°IfFÆ£
, 
r2
,

2192 (*)
pCﬁl
, 
P4_COLLSEQ
); 
	`VdbeCovîage
(
v
);

2193 
	`sqlôe3VdbeCh™geP5
(
v
, 
afföôy
 | 
SQLITE_JUMPIFNULL
);

2195 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgToFªe
);

2197 if–
ªgCkNuŒ
 ){

2198 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IsNuŒ
, 
ªgCkNuŒ
, 
de°IfNuŒ
); 
	`VdbeCovîage
(v);

2199 
	`sqlôe3VdbeGŸo
(
v
, 
de°IfFÆ£
);

2201 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
œbñOk
);

2202 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgCkNuŒ
);

2208 if–
	`sqlôe3Ex¥C™BeNuŒ
(
pEx¥
->
pLe·
) ){

2209 if–
de°IfNuŒ
==
de°IfFÆ£
 ){

2212 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IsNuŒ
, 
r1
, 
de°IfNuŒ
); 
	`VdbeCovîage
(v);

2214 
addr1
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_NŸNuŒ
, 
r1
); 
	`VdbeCovîage
(v);

2215 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Rewöd
, 
pEx¥
->
iTabÀ
, 
de°IfFÆ£
);

2216 
	`VdbeCovîage
(
v
);

2217 
	`sqlôe3VdbeGŸo
(
v
, 
de°IfNuŒ
);

2218 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr1
);

2222 if–
eTy≥
==
IN_INDEX_ROWID
 ){

2225 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Mu°BeI¡
, 
r1
, 
de°IfFÆ£
); 
	`VdbeCovîage
(v);

2226 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_NŸExi°s
, 
pEx¥
->
iTabÀ
, 
de°IfFÆ£
, 
r1
);

2227 
	`VdbeCovîage
(
v
);

2231 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Afföôy
, 
r1
, 1, 0, &
afföôy
, 1);

2239 
	`as£π
–
de°IfFÆ£
!=
de°IfNuŒ
 || 
rRhsHasNuŒ
==0 );

2240 if–
rRhsHasNuŒ
==0 ){

2248 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_NŸFound
, 
pEx¥
->
iTabÀ
, 
de°IfFÆ£
, 
r1
, 1);

2249 
	`VdbeCovîage
(
v
);

2255 
addr1
;

2263 
addr1
 = 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_Found
, 
pEx¥
->
iTabÀ
, 0, 
r1
, 1);

2264 
	`VdbeCovîage
(
v
);

2265 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IsNuŒ
, 
rRhsHasNuŒ
, 
de°IfNuŒ
);

2266 
	`VdbeCovîage
(
v
);

2267 
	`sqlôe3VdbeGŸo
(
v
, 
de°IfFÆ£
);

2268 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr1
);

2272 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
r1
);

2273 
	`sqlôe3Ex¥CacheP›
(
pP¨£
);

2274 
	`VdbeCommít
((
v
, "end INÉxpr"));

2275 
	}
}

2278 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


2287 
	$codeRól
(
Vdbe
 *
v
, c⁄° *
z
, 
√g©eFœg
, 
iMem
){

2288 if–
	`ALWAYS
(
z
!=0) ){

2289 
vÆue
;

2290 
	`sqlôe3AtoF
(
z
, &
vÆue
, 
	`sqlôe3SåÀn30
(z), 
SQLITE_UTF8
);

2291 
	`as£π
–!
	`sqlôe3IsNaN
(
vÆue
) );

2292 if–
√g©eFœg
 ) 
vÆue
 = -value;

2293 
	`sqlôe3VdbeAddOp4Dup8
(
v
, 
OP_Ról
, 0, 
iMem
, 0, (
u8
*)&
vÆue
, 
P4_REAL
);

2295 
	}
}

2305 
	$codeI¡egî
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
, 
√gFœg
, 
iMem
){

2306 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

2307 if–
pEx¥
->
Êags
 & 
EP_I¡VÆue
 ){

2308 
i
 = 
pEx¥
->
u
.
iVÆue
;

2309 
	`as£π
–
i
>=0 );

2310 if–
√gFœg
 ) 
i
 = -i;

2311 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 
i
, 
iMem
);

2313 
c
;

2314 
i64
 
vÆue
;

2315 c⁄° *
z
 = 
pEx¥
->
u
.
zTokí
;

2316 
	`as£π
–
z
!=0 );

2317 
c
 = 
	`sqlôe3DecOrHexToI64
(
z
, &
vÆue
);

2318 if–
c
==0 || (c==2 && 
√gFœg
) ){

2319 if–
√gFœg
 ){ 
vÆue
 = 
c
==2 ? 
SMALLEST_INT64
 : -value; }

2320 
	`sqlôe3VdbeAddOp4Dup8
(
v
, 
OP_I¡64
, 0, 
iMem
, 0, (
u8
*)&
vÆue
, 
P4_INT64
);

2322 #ifde‡
SQLITE_OMIT_FLOATING_POINT


2323 
	`sqlôe3Eº‹Msg
(
pP¨£
, "ovîsized i¡egî: %s%s", 
√gFœg
 ? "-" : "", 
z
);

2325 #i‚de‡
SQLITE_OMIT_HEX_INTEGER


2326 if–
	`sqlôe3_°∫icmp
(
z
,"0x",2)==0 ){

2327 
	`sqlôe3Eº‹Msg
(
pP¨£
, "hexÜôîÆÅoÿbig: %s", 
z
);

2331 
	`codeRól
(
v
, 
z
, 
√gFœg
, 
iMem
);

2336 
	}
}

2338 #i‡
deföed
(
SQLITE_DEBUG
)

2342 
	$ˇcheIsVÆid
(
P¨£
 *
pP¨£
){

2343 
i
, 
n
;

2344 
i
=
n
=0; i<
SQLITE_N_COLCACHE
; i++){

2345 if–
pP¨£
->
aCﬁCache
[
i
].
iReg
>0 ) 
n
++;

2347  
n
==
pP¨£
->
nCﬁCache
;

2348 
	}
}

2354 
	$ˇcheE¡ryCÀ¨
(
P¨£
 *
pP¨£
, 
yCﬁCache
 *
p
){

2355 if–
p
->
ãmpReg
 ){

2356 if–
pP¨£
->
nTempReg
<
	`AºaySize
’P¨£->
aTempReg
) ){

2357 
pP¨£
->
aTempReg
[pP¨£->
nTempReg
++] = 
p
->
iReg
;

2359 
p
->
ãmpReg
 = 0;

2361 
p
->
iReg
 = 0;

2362 
pP¨£
->
nCﬁCache
--;

2363 
	`as£π
–
pP¨£
->
db
->
mÆlocFaûed
 || 
	`ˇcheIsVÆid
(pParse) );

2364 
	}
}

2371 
	$sqlôe3Ex¥CacheSt‹e
(
P¨£
 *
pP¨£
, 
iTab
, 
iCﬁ
, 
iReg
){

2372 
i
;

2373 
möLru
;

2374 
idxLru
;

2375 
yCﬁCache
 *
p
;

2378 
	`as£π
–
iReg
>0 || 
pP¨£
->
nEº
 ||ÖP¨£->
db
->
mÆlocFaûed
 );

2379 
	`as£π
–
iCﬁ
>=-1 && iCol<32768 );

2385 if–
	`O±imiz©i⁄DißbÀd
(
pP¨£
->
db
, 
SQLITE_CﬁumnCache
) ) ;

2392 #i‚de‡
NDEBUG


2393 
i
=0, 
p
=
pP¨£
->
aCﬁCache
; i<
SQLITE_N_COLCACHE
; i++,Ö++){

2394 
	`as£π
–
p
->
iReg
==0 ||Ö->
iTabÀ
!=
iTab
 ||Ö->
iCﬁumn
!=
iCﬁ
 );

2399 
i
=0, 
p
=
pP¨£
->
aCﬁCache
; i<
SQLITE_N_COLCACHE
; i++,Ö++){

2400 if–
p
->
iReg
==0 ){

2401 
p
->
iLevñ
 = 
pP¨£
->
iCacheLevñ
;

2402 
p
->
iTabÀ
 = 
iTab
;

2403 
p
->
iCﬁumn
 = 
iCﬁ
;

2404 
p
->
iReg
 = iReg;

2405 
p
->
ãmpReg
 = 0;

2406 
p
->
Ãu
 = 
pP¨£
->
iCacheC¡
++;

2407 
pP¨£
->
nCﬁCache
++;

2408 
	`as£π
–
pP¨£
->
db
->
mÆlocFaûed
 || 
	`ˇcheIsVÆid
(pParse) );

2414 
möLru
 = 0x7fffffff;

2415 
idxLru
 = -1;

2416 
i
=0, 
p
=
pP¨£
->
aCﬁCache
; i<
SQLITE_N_COLCACHE
; i++,Ö++){

2417 if–
p
->
Ãu
<
möLru
 ){

2418 
idxLru
 = 
i
;

2419 
möLru
 = 
p
->
Ãu
;

2422 if–
	`ALWAYS
(
idxLru
>=0) ){

2423 
p
 = &
pP¨£
->
aCﬁCache
[
idxLru
];

2424 
p
->
iLevñ
 = 
pP¨£
->
iCacheLevñ
;

2425 
p
->
iTabÀ
 = 
iTab
;

2426 
p
->
iCﬁumn
 = 
iCﬁ
;

2427 
p
->
iReg
 = iReg;

2428 
p
->
ãmpReg
 = 0;

2429 
p
->
Ãu
 = 
pP¨£
->
iCacheC¡
++;

2430 
	`as£π
–
	`ˇcheIsVÆid
(
pP¨£
) );

2433 
	}
}

2439 
	$sqlôe3Ex¥CacheRemove
(
P¨£
 *
pP¨£
, 
iReg
, 
nReg
){

2440 
yCﬁCache
 *
p
;

2441 if–
iReg
<=0 || 
pP¨£
->
nCﬁCache
==0 ) ;

2442 
p
 = &
pP¨£
->
aCﬁCache
[
SQLITE_N_COLCACHE
-1];

2444 if–
p
->
iReg
 >iReg &&Ö->iReg < iReg+
nReg
 ) 
	`ˇcheE¡ryCÀ¨
(
pP¨£
,Ö);

2445 if–
p
==
pP¨£
->
aCﬁCache
 ) ;

2446 
p
--;

2448 
	}
}

2455 
	$sqlôe3Ex¥CachePush
(
P¨£
 *
pP¨£
){

2456 
pP¨£
->
iCacheLevñ
++;

2457 #ifde‡
SQLITE_DEBUG


2458 if–
pP¨£
->
db
->
Êags
 & 
SQLITE_VdbeAdd›Tø˚
 ){

2459 
	`¥ötf
("PUSHÅÿ%d\n", 
pP¨£
->
iCacheLevñ
);

2462 
	}
}

2469 
	$sqlôe3Ex¥CacheP›
(
P¨£
 *
pP¨£
){

2470 
i
;

2471 
yCﬁCache
 *
p
;

2472 
	`as£π
–
pP¨£
->
iCacheLevñ
>=1 );

2473 
pP¨£
->
iCacheLevñ
--;

2474 #ifde‡
SQLITE_DEBUG


2475 if–
pP¨£
->
db
->
Êags
 & 
SQLITE_VdbeAdd›Tø˚
 ){

2476 
	`¥ötf
("POPÅÿ%d\n", 
pP¨£
->
iCacheLevñ
);

2479 
i
=0, 
p
=
pP¨£
->
aCﬁCache
; i<
SQLITE_N_COLCACHE
; i++,Ö++){

2480 if–
p
->
iReg
 &&Ö->
iLevñ
>
pP¨£
->
iCacheLevñ
 ){

2481 
	`ˇcheE¡ryCÀ¨
(
pP¨£
, 
p
);

2484 
	}
}

2492 
	$sqlôe3Ex¥CachePöRegi°î
(
P¨£
 *
pP¨£
, 
iReg
){

2493 
i
;

2494 
yCﬁCache
 *
p
;

2495 
i
=0, 
p
=
pP¨£
->
aCﬁCache
; i<
SQLITE_N_COLCACHE
; i++,Ö++){

2496 if–
p
->
iReg
==iReg ){

2497 
p
->
ãmpReg
 = 0;

2500 
	}
}

2505 
	$sqlôe3Ex¥CodeLﬂdIndexCﬁumn
(

2506 
P¨£
 *
pP¨£
,

2507 
Index
 *
pIdx
,

2508 
iTabCur
,

2509 
iIdxCﬁ
,

2510 
ªgOut


2512 
i16
 
iTabCﬁ
 = 
pIdx
->
aiCﬁumn
[
iIdxCﬁ
];

2513 if–
iTabCﬁ
==
XN_EXPR
 ){

2514 
	`as£π
–
pIdx
->
aCﬁEx¥
 );

2515 
	`as£π
–
pIdx
->
aCﬁEx¥
->
nEx¥
>
iIdxCﬁ
 );

2516 
pP¨£
->
iSñfTab
 = 
iTabCur
;

2517 
	`sqlôe3Ex¥CodeC›y
(
pP¨£
, 
pIdx
->
aCﬁEx¥
->
a
[
iIdxCﬁ
].
pEx¥
, 
ªgOut
);

2519 
	`sqlôe3Ex¥CodeGëCﬁumnOfTabÀ
(
pP¨£
->
pVdbe
, 
pIdx
->
pTabÀ
, 
iTabCur
,

2520 
iTabCﬁ
, 
ªgOut
);

2522 
	}
}

2527 
	$sqlôe3Ex¥CodeGëCﬁumnOfTabÀ
(

2528 
Vdbe
 *
v
,

2529 
TabÀ
 *
pTab
,

2530 
iTabCur
,

2531 
iCﬁ
,

2532 
ªgOut


2534 if–
iCﬁ
<0 || iCﬁ==
pTab
->
iPKey
 ){

2535 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Rowid
, 
iTabCur
, 
ªgOut
);

2537 
›
 = 
	`IsVútuÆ
(
pTab
Ë? 
OP_VCﬁumn
 : 
OP_Cﬁumn
;

2538 
x
 = 
iCﬁ
;

2539 if–!
	`HasRowid
(
pTab
) ){

2540 
x
 = 
	`sqlôe3CﬁumnOfIndex
(
	`sqlôe3Prim¨yKeyIndex
(
pTab
), 
iCﬁ
);

2542 
	`sqlôe3VdbeAddOp3
(
v
, 
›
, 
iTabCur
, 
x
, 
ªgOut
);

2544 if–
iCﬁ
>=0 ){

2545 
	`sqlôe3CﬁumnDeÁu…
(
v
, 
pTab
, 
iCﬁ
, 
ªgOut
);

2547 
	}
}

2561 
	$sqlôe3Ex¥CodeGëCﬁumn
(

2562 
P¨£
 *
pP¨£
,

2563 
TabÀ
 *
pTab
,

2564 
iCﬁumn
,

2565 
iTabÀ
,

2566 
iReg
,

2567 
u8
 
p5


2569 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

2570 
i
;

2571 
yCﬁCache
 *
p
;

2573 
i
=0, 
p
=
pP¨£
->
aCﬁCache
; i<
SQLITE_N_COLCACHE
; i++,Ö++){

2574 if–
p
->
iReg
>0 &&Ö->
iTabÀ
==iTabÀ &&Ö->
iCﬁumn
==iColumn ){

2575 
p
->
Ãu
 = 
pP¨£
->
iCacheC¡
++;

2576 
	`sqlôe3Ex¥CachePöRegi°î
(
pP¨£
, 
p
->
iReg
);

2577  
p
->
iReg
;

2580 
	`as£π
–
v
!=0 );

2581 
	`sqlôe3Ex¥CodeGëCﬁumnOfTabÀ
(
v
, 
pTab
, 
iTabÀ
, 
iCﬁumn
, 
iReg
);

2582 if–
p5
 ){

2583 
	`sqlôe3VdbeCh™geP5
(
v
, 
p5
);

2585 
	`sqlôe3Ex¥CacheSt‹e
(
pP¨£
, 
iTabÀ
, 
iCﬁumn
, 
iReg
);

2587  
iReg
;

2588 
	}
}

2589 
	$sqlôe3Ex¥CodeGëCﬁumnToReg
(

2590 
P¨£
 *
pP¨£
,

2591 
TabÀ
 *
pTab
,

2592 
iCﬁumn
,

2593 
iTabÀ
,

2594 
iReg


2596 
r1
 = 
	`sqlôe3Ex¥CodeGëCﬁumn
(
pP¨£
, 
pTab
, 
iCﬁumn
, 
iTabÀ
, 
iReg
, 0);

2597 if–
r1
!=
iReg
 ) 
	`sqlôe3VdbeAddOp2
(
pP¨£
->
pVdbe
, 
OP_SC›y
,Ñ1, iReg);

2598 
	}
}

2604 
	$sqlôe3Ex¥CacheCÀ¨
(
P¨£
 *
pP¨£
){

2605 
i
;

2606 
yCﬁCache
 *
p
;

2608 #i‡
SQLITE_DEBUG


2609 if–
pP¨£
->
db
->
Êags
 & 
SQLITE_VdbeAdd›Tø˚
 ){

2610 
	`¥ötf
("CLEAR\n");

2613 
i
=0, 
p
=
pP¨£
->
aCﬁCache
; i<
SQLITE_N_COLCACHE
; i++,Ö++){

2614 if–
p
->
iReg
 ){

2615 
	`ˇcheE¡ryCÀ¨
(
pP¨£
, 
p
);

2618 
	}
}

2624 
	$sqlôe3Ex¥CacheAfföôyCh™ge
(
P¨£
 *
pP¨£
, 
iSèπ
, 
iCou¡
){

2625 
	`sqlôe3Ex¥CacheRemove
(
pP¨£
, 
iSèπ
, 
iCou¡
);

2626 
	}
}

2632 
	$sqlôe3Ex¥CodeMove
(
P¨£
 *
pP¨£
, 
iFrom
, 
iTo
, 
nReg
){

2633 
	`as£π
–
iFrom
>=
iTo
+
nReg
 || iFrom+nReg<=iTo );

2634 
	`sqlôe3VdbeAddOp3
(
pP¨£
->
pVdbe
, 
OP_Move
, 
iFrom
, 
iTo
, 
nReg
);

2635 
	`sqlôe3Ex¥CacheRemove
(
pP¨£
, 
iFrom
, 
nReg
);

2636 
	}
}

2638 #i‡
deföed
(
SQLITE_DEBUG
Ë|| deföed(
SQLITE_COVERAGE_TEST
)

2646 
	$u£dAsCﬁumnCache
(
P¨£
 *
pP¨£
, 
iFrom
, 
iTo
){

2647 
i
;

2648 
yCﬁCache
 *
p
;

2649 
i
=0, 
p
=
pP¨£
->
aCﬁCache
; i<
SQLITE_N_COLCACHE
; i++,Ö++){

2650 
r
 = 
p
->
iReg
;

2651 if–
r
>=
iFrom
 &&Ñ<=
iTo
 )  1;

2654 
	}
}

2661 
	$ex¥ToRegi°î
(
Ex¥
 *
p
, 
iReg
){

2662 
p
->
›2
 =Ö->
›
;

2663 
p
->
›
 = 
TK_REGISTER
;

2664 
p
->
iTabÀ
 = 
iReg
;

2665 
	`Ex¥CÀ¨Pr›îty
(
p
, 
EP_Skù
);

2666 
	}
}

2679 
	$sqlôe3Ex¥CodeT¨gë
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
, 
èrgë
){

2680 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

2681 
›
;

2682 
öReg
 = 
èrgë
;

2683 
ªgFªe1
 = 0;

2684 
ªgFªe2
 = 0;

2685 
r1
, 
r2
, 
r3
, 
r4
;

2686 
sqlôe3
 *
db
 = 
pP¨£
->db;

2687 
Ex¥
 
ãmpX
;

2689 
	`as£π
–
èrgë
>0 &&Å¨gë<=
pP¨£
->
nMem
 );

2690 if–
v
==0 ){

2691 
	`as£π
–
pP¨£
->
db
->
mÆlocFaûed
 );

2695 if–
pEx¥
==0 ){

2696 
›
 = 
TK_NULL
;

2698 
›
 = 
pEx¥
->op;

2700  
›
 ){

2701 
TK_AGG_COLUMN
: {

2702 
AggInfo
 *
pAggInfo
 = 
pEx¥
->pAggInfo;

2703 
AggInfo_cﬁ
 *
pCﬁ
 = &
pAggInfo
->
aCﬁ
[
pEx¥
->
iAgg
];

2704 if–!
pAggInfo
->
dúe˘Mode
 ){

2705 
	`as£π
–
pCﬁ
->
iMem
>0 );

2706 
öReg
 = 
pCﬁ
->
iMem
;

2708 }if–
pAggInfo
->
u£S‹tögIdx
 ){

2709 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Cﬁumn
, 
pAggInfo
->
s‹tögIdxPTab
,

2710 
pCﬁ
->
iS‹ãrCﬁumn
, 
èrgë
);

2715 
TK_COLUMN
: {

2716 
iTab
 = 
pEx¥
->
iTabÀ
;

2717 if–
iTab
<0 ){

2718 if–
pP¨£
->
ckBa£
>0 ){

2720 
öReg
 = 
pEx¥
->
iCﬁumn
 + 
pP¨£
->
ckBa£
;

2725 
iTab
 = 
pP¨£
->
iSñfTab
;

2728 
öReg
 = 
	`sqlôe3Ex¥CodeGëCﬁumn
(
pP¨£
, 
pEx¥
->
pTab
,

2729 
pEx¥
->
iCﬁumn
, 
iTab
, 
èrgë
,

2730 
pEx¥
->
›2
);

2733 
TK_INTEGER
: {

2734 
	`codeI¡egî
(
pP¨£
, 
pEx¥
, 0, 
èrgë
);

2737 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


2738 
TK_FLOAT
: {

2739 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_I¡VÆue
) );

2740 
	`codeRól
(
v
, 
pEx¥
->
u
.
zTokí
, 0, 
èrgë
);

2744 
TK_STRING
: {

2745 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_I¡VÆue
) );

2746 
	`sqlôe3VdbeLﬂdSåög
(
v
, 
èrgë
, 
pEx¥
->
u
.
zTokí
);

2749 
TK_NULL
: {

2750 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NuŒ
, 0, 
èrgë
);

2753 #i‚de‡
SQLITE_OMIT_BLOB_LITERAL


2754 
TK_BLOB
: {

2755 
n
;

2756 c⁄° *
z
;

2757 *
zBlob
;

2758 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_I¡VÆue
) );

2759 
	`as£π
–
pEx¥
->
u
.
zTokí
[0]=='x' ||ÖExpr->u.zToken[0]=='X' );

2760 
	`as£π
–
pEx¥
->
u
.
zTokí
[1]=='\'' );

2761 
z
 = &
pEx¥
->
u
.
zTokí
[2];

2762 
n
 = 
	`sqlôe3SåÀn30
(
z
) - 1;

2763 
	`as£π
–
z
[
n
]=='\'' );

2764 
zBlob
 = 
	`sqlôe3HexToBlob
(
	`sqlôe3VdbeDb
(
v
), 
z
, 
n
);

2765 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Blob
, 
n
/2, 
èrgë
, 0, 
zBlob
, 
P4_DYNAMIC
);

2769 
TK_VARIABLE
: {

2770 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_I¡VÆue
) );

2771 
	`as£π
–
pEx¥
->
u
.
zTokí
!=0 );

2772 
	`as£π
–
pEx¥
->
u
.
zTokí
[0]!=0 );

2773 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_V¨übÀ
, 
pEx¥
->
iCﬁumn
, 
èrgë
);

2774 if–
pEx¥
->
u
.
zTokí
[1]!=0 ){

2775 
	`as£π
–
pEx¥
->
u
.
zTokí
[0]=='?'

2776 || 
	`°rcmp
(
pEx¥
->
u
.
zTokí
, 
pP¨£
->
azV¨
[pEx¥->
iCﬁumn
-1])==0 );

2777 
	`sqlôe3VdbeCh™geP4
(
v
, -1, 
pP¨£
->
azV¨
[
pEx¥
->
iCﬁumn
-1], 
P4_STATIC
);

2781 
TK_REGISTER
: {

2782 
öReg
 = 
pEx¥
->
iTabÀ
;

2785 #i‚de‡
SQLITE_OMIT_CAST


2786 
TK_CAST
: {

2788 
öReg
 = 
	`sqlôe3Ex¥CodeT¨gë
(
pP¨£
, 
pEx¥
->
pLe·
, 
èrgë
);

2789 if–
öReg
!=
èrgë
 ){

2790 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_SC›y
, 
öReg
, 
èrgë
);

2791 
öReg
 = 
èrgë
;

2793 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Ca°
, 
èrgë
,

2794 
	`sqlôe3AfföôyTy≥
(
pEx¥
->
u
.
zTokí
, 0));

2795 
	`ã°ˇ£
–
	`u£dAsCﬁumnCache
(
pP¨£
, 
öReg
, inReg) );

2796 
	`sqlôe3Ex¥CacheAfföôyCh™ge
(
pP¨£
, 
öReg
, 1);

2800 
TK_LT
:

2801 
TK_LE
:

2802 
TK_GT
:

2803 
TK_GE
:

2804 
TK_NE
:

2805 
TK_EQ
: {

2806 
r1
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pEx¥
->
pLe·
, &
ªgFªe1
);

2807 
r2
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pEx¥
->
pRight
, &
ªgFªe2
);

2808 
	`codeCom∑ª
(
pP¨£
, 
pEx¥
->
pLe·
,ÖEx¥->
pRight
, 
›
,

2809 
r1
, 
r2
, 
öReg
, 
SQLITE_STOREP2
);

2810 
	`as£π
(
TK_LT
==
OP_Lt
); 
	`ã°ˇ£
(
›
==OP_Lt); 
	`VdbeCovîageIf
(
v
,op==OP_Lt);

2811 
	`as£π
(
TK_LE
==
OP_Le
); 
	`ã°ˇ£
(
›
==OP_Le); 
	`VdbeCovîageIf
(
v
,op==OP_Le);

2812 
	`as£π
(
TK_GT
==
OP_Gt
); 
	`ã°ˇ£
(
›
==OP_Gt); 
	`VdbeCovîageIf
(
v
,op==OP_Gt);

2813 
	`as£π
(
TK_GE
==
OP_Ge
); 
	`ã°ˇ£
(
›
==OP_Ge); 
	`VdbeCovîageIf
(
v
,op==OP_Ge);

2814 
	`as£π
(
TK_EQ
==
OP_Eq
); 
	`ã°ˇ£
(
›
==OP_Eq); 
	`VdbeCovîageIf
(
v
,op==OP_Eq);

2815 
	`as£π
(
TK_NE
==
OP_Ne
); 
	`ã°ˇ£
(
›
==OP_Ne); 
	`VdbeCovîageIf
(
v
,op==OP_Ne);

2816 
	`ã°ˇ£
–
ªgFªe1
==0 );

2817 
	`ã°ˇ£
–
ªgFªe2
==0 );

2820 
TK_IS
:

2821 
TK_ISNOT
: {

2822 
	`ã°ˇ£
–
›
==
TK_IS
 );

2823 
	`ã°ˇ£
–
›
==
TK_ISNOT
 );

2824 
r1
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pEx¥
->
pLe·
, &
ªgFªe1
);

2825 
r2
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pEx¥
->
pRight
, &
ªgFªe2
);

2826 
›
 = (›==
TK_IS
Ë? 
TK_EQ
 : 
TK_NE
;

2827 
	`codeCom∑ª
(
pP¨£
, 
pEx¥
->
pLe·
,ÖEx¥->
pRight
, 
›
,

2828 
r1
, 
r2
, 
öReg
, 
SQLITE_STOREP2
 | 
SQLITE_NULLEQ
);

2829 
	`VdbeCovîageIf
(
v
, 
›
==
TK_EQ
);

2830 
	`VdbeCovîageIf
(
v
, 
›
==
TK_NE
);

2831 
	`ã°ˇ£
–
ªgFªe1
==0 );

2832 
	`ã°ˇ£
–
ªgFªe2
==0 );

2835 
TK_AND
:

2836 
TK_OR
:

2837 
TK_PLUS
:

2838 
TK_STAR
:

2839 
TK_MINUS
:

2840 
TK_REM
:

2841 
TK_BITAND
:

2842 
TK_BITOR
:

2843 
TK_SLASH
:

2844 
TK_LSHIFT
:

2845 
TK_RSHIFT
:

2846 
TK_CONCAT
: {

2847 
	`as£π
–
TK_AND
==
OP_And
 ); 
	`ã°ˇ£
–
›
==TK_AND );

2848 
	`as£π
–
TK_OR
==
OP_Or
 ); 
	`ã°ˇ£
–
›
==TK_OR );

2849 
	`as£π
–
TK_PLUS
==
OP_Add
 ); 
	`ã°ˇ£
–
›
==TK_PLUS );

2850 
	`as£π
–
TK_MINUS
==
OP_Subåa˘
 ); 
	`ã°ˇ£
–
›
==TK_MINUS );

2851 
	`as£π
–
TK_REM
==
OP_Remaödî
 ); 
	`ã°ˇ£
–
›
==TK_REM );

2852 
	`as£π
–
TK_BITAND
==
OP_BôAnd
 ); 
	`ã°ˇ£
–
›
==TK_BITAND );

2853 
	`as£π
–
TK_BITOR
==
OP_BôOr
 ); 
	`ã°ˇ£
–
›
==TK_BITOR );

2854 
	`as£π
–
TK_SLASH
==
OP_Divide
 ); 
	`ã°ˇ£
–
›
==TK_SLASH );

2855 
	`as£π
–
TK_LSHIFT
==
OP_Shi·Le·
 ); 
	`ã°ˇ£
–
›
==TK_LSHIFT );

2856 
	`as£π
–
TK_RSHIFT
==
OP_Shi·Right
 ); 
	`ã°ˇ£
–
›
==TK_RSHIFT );

2857 
	`as£π
–
TK_CONCAT
==
OP_C⁄ˇt
 ); 
	`ã°ˇ£
–
›
==TK_CONCAT );

2858 
r1
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pEx¥
->
pLe·
, &
ªgFªe1
);

2859 
r2
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pEx¥
->
pRight
, &
ªgFªe2
);

2860 
	`sqlôe3VdbeAddOp3
(
v
, 
›
, 
r2
, 
r1
, 
èrgë
);

2861 
	`ã°ˇ£
–
ªgFªe1
==0 );

2862 
	`ã°ˇ£
–
ªgFªe2
==0 );

2865 
TK_UMINUS
: {

2866 
Ex¥
 *
pLe·
 = 
pEx¥
->pLeft;

2867 
	`as£π
–
pLe·
 );

2868 if–
pLe·
->
›
==
TK_INTEGER
 ){

2869 
	`codeI¡egî
(
pP¨£
, 
pLe·
, 1, 
èrgë
);

2870 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


2871 }if–
pLe·
->
›
==
TK_FLOAT
 ){

2872 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_I¡VÆue
) );

2873 
	`codeRól
(
v
, 
pLe·
->
u
.
zTokí
, 1, 
èrgë
);

2876 
ãmpX
.
›
 = 
TK_INTEGER
;

2877 
ãmpX
.
Êags
 = 
EP_I¡VÆue
|
EP_TokíO∆y
;

2878 
ãmpX
.
u
.
iVÆue
 = 0;

2879 
r1
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, &
ãmpX
, &
ªgFªe1
);

2880 
r2
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pEx¥
->
pLe·
, &
ªgFªe2
);

2881 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Subåa˘
, 
r2
, 
r1
, 
èrgë
);

2882 
	`ã°ˇ£
–
ªgFªe2
==0 );

2884 
öReg
 = 
èrgë
;

2887 
TK_BITNOT
:

2888 
TK_NOT
: {

2889 
	`as£π
–
TK_BITNOT
==
OP_BôNŸ
 ); 
	`ã°ˇ£
–
›
==TK_BITNOT );

2890 
	`as£π
–
TK_NOT
==
OP_NŸ
 ); 
	`ã°ˇ£
–
›
==TK_NOT );

2891 
r1
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pEx¥
->
pLe·
, &
ªgFªe1
);

2892 
	`ã°ˇ£
–
ªgFªe1
==0 );

2893 
öReg
 = 
èrgë
;

2894 
	`sqlôe3VdbeAddOp2
(
v
, 
›
, 
r1
, 
öReg
);

2897 
TK_ISNULL
:

2898 
TK_NOTNULL
: {

2899 
addr
;

2900 
	`as£π
–
TK_ISNULL
==
OP_IsNuŒ
 ); 
	`ã°ˇ£
–
›
==TK_ISNULL );

2901 
	`as£π
–
TK_NOTNULL
==
OP_NŸNuŒ
 ); 
	`ã°ˇ£
–
›
==TK_NOTNULL );

2902 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 1, 
èrgë
);

2903 
r1
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pEx¥
->
pLe·
, &
ªgFªe1
);

2904 
	`ã°ˇ£
–
ªgFªe1
==0 );

2905 
addr
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
›
, 
r1
);

2906 
	`VdbeCovîageIf
(
v
, 
›
==
TK_ISNULL
);

2907 
	`VdbeCovîageIf
(
v
, 
›
==
TK_NOTNULL
);

2908 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 0, 
èrgë
);

2909 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr
);

2912 
TK_AGG_FUNCTION
: {

2913 
AggInfo
 *
pInfo
 = 
pEx¥
->
pAggInfo
;

2914 if–
pInfo
==0 ){

2915 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_I¡VÆue
) );

2916 
	`sqlôe3Eº‹Msg
(
pP¨£
, "misu£ o‡aggªg©e: %s()", 
pEx¥
->
u
.
zTokí
);

2918 
öReg
 = 
pInfo
->
aFunc
[
pEx¥
->
iAgg
].
iMem
;

2922 
TK_FUNCTION
: {

2923 
Ex¥Li°
 *
pF¨g
;

2924 
nF¨g
;

2925 
FuncDef
 *
pDef
;

2926 c⁄° *
zId
;

2927 
u32
 
c⁄°Mask
 = 0;

2928 
i
;

2929 
u8
 
íc
 = 
	`ENC
(
db
);

2930 
CﬁlSeq
 *
pCﬁl
 = 0;

2932 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_xIsSñe˘
) );

2933 if–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_TokíO∆y
) ){

2934 
pF¨g
 = 0;

2936 
pF¨g
 = 
pEx¥
->
x
.
pLi°
;

2938 
nF¨g
 = 
pF¨g
 ?ÖF¨g->
nEx¥
 : 0;

2939 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_I¡VÆue
) );

2940 
zId
 = 
pEx¥
->
u
.
zTokí
;

2941 
pDef
 = 
	`sqlôe3FödFun˘i⁄
(
db
, 
zId
, 
nF¨g
, 
íc
, 0);

2942 if–
pDef
==0 ||ÖDef->
xFöÆize
!=0 ){

2943 
	`sqlôe3Eº‹Msg
(
pP¨£
, "unknow¿fun˘i⁄: %s()", 
zId
);

2951 if–
pDef
->
funcFœgs
 & 
SQLITE_FUNC_COALESCE
 ){

2952 
ídCﬂÀs˚
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

2953 
	`as£π
–
nF¨g
>=2 );

2954 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pF¨g
->
a
[0].
pEx¥
, 
èrgë
);

2955 
i
=1; i<
nF¨g
; i++){

2956 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NŸNuŒ
, 
èrgë
, 
ídCﬂÀs˚
);

2957 
	`VdbeCovîage
(
v
);

2958 
	`sqlôe3Ex¥CacheRemove
(
pP¨£
, 
èrgë
, 1);

2959 
	`sqlôe3Ex¥CachePush
(
pP¨£
);

2960 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pF¨g
->
a
[
i
].
pEx¥
, 
èrgë
);

2961 
	`sqlôe3Ex¥CacheP›
(
pP¨£
);

2963 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
ídCﬂÀs˚
);

2970 if–
pDef
->
funcFœgs
 & 
SQLITE_FUNC_UNLIKELY
 ){

2971 
	`as£π
–
nF¨g
>=1 );

2972 
öReg
 = 
	`sqlôe3Ex¥CodeT¨gë
(
pP¨£
, 
pF¨g
->
a
[0].
pEx¥
, 
èrgë
);

2976 
i
=0; i<
nF¨g
; i++){

2977 if–
i
<32 && 
	`sqlôe3Ex¥IsC⁄°™t
(
pF¨g
->
a
[i].
pEx¥
) ){

2978 
	`ã°ˇ£
–
i
==31 );

2979 
c⁄°Mask
 |
	`MASKBIT32
(
i
);

2981 if–(
pDef
->
funcFœgs
 & 
SQLITE_FUNC_NEEDCOLL
)!=0 && !
pCﬁl
 ){

2982 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pF¨g
->
a
[
i
].
pEx¥
);

2985 if–
pF¨g
 ){

2986 if–
c⁄°Mask
 ){

2987 
r1
 = 
pP¨£
->
nMem
+1;

2988 
pP¨£
->
nMem
 +
nF¨g
;

2990 
r1
 = 
	`sqlôe3GëTempR™ge
(
pP¨£
, 
nF¨g
);

2998 if–(
pDef
->
funcFœgs
 & (
SQLITE_FUNC_LENGTH
|
SQLITE_FUNC_TYPEOF
))!=0 ){

2999 
u8
 
ex¥Op
;

3000 
	`as£π
–
nF¨g
==1 );

3001 
	`as£π
–
pF¨g
->
a
[0].
pEx¥
!=0 );

3002 
ex¥Op
 = 
pF¨g
->
a
[0].
pEx¥
->
›
;

3003 if–
ex¥Op
==
TK_COLUMN
 ||Éx¥Op==
TK_AGG_COLUMN
 ){

3004 
	`as£π
–
SQLITE_FUNC_LENGTH
==
OPFLAG_LENGTHARG
 );

3005 
	`as£π
–
SQLITE_FUNC_TYPEOF
==
OPFLAG_TYPEOFARG
 );

3006 
	`ã°ˇ£
–
pDef
->
funcFœgs
 & 
OPFLAG_LENGTHARG
 );

3007 
pF¨g
->
a
[0].
pEx¥
->
›2
 =

3008 
pDef
->
funcFœgs
 & (
OPFLAG_LENGTHARG
|
OPFLAG_TYPEOFARG
);

3012 
	`sqlôe3Ex¥CachePush
(
pP¨£
);

3013 
	`sqlôe3Ex¥CodeEx¥Li°
(
pP¨£
, 
pF¨g
, 
r1
, 0,

3014 
SQLITE_ECEL_DUP
|
SQLITE_ECEL_FACTOR
);

3015 
	`sqlôe3Ex¥CacheP›
(
pP¨£
);

3017 
r1
 = 0;

3019 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


3032 if–
nF¨g
>=2 && (
pEx¥
->
Êags
 & 
EP_InfixFunc
) ){

3033 
pDef
 = 
	`sqlôe3VèbOvîlﬂdFun˘i⁄
(
db
,ÖDef, 
nF¨g
, 
pF¨g
->
a
[1].
pEx¥
);

3034 }if–
nF¨g
>0 ){

3035 
pDef
 = 
	`sqlôe3VèbOvîlﬂdFun˘i⁄
(
db
,ÖDef, 
nF¨g
, 
pF¨g
->
a
[0].
pEx¥
);

3038 if–
pDef
->
funcFœgs
 & 
SQLITE_FUNC_NEEDCOLL
 ){

3039 if–!
pCﬁl
 )ÖCﬁ»
db
->
pDÊtCﬁl
;

3040 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_CﬁlSeq
, 0, 0, 0, (*)
pCﬁl
, 
P4_COLLSEQ
);

3042 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Fun˘i⁄0
, 
c⁄°Mask
, 
r1
, 
èrgë
,

3043 (*)
pDef
, 
P4_FUNCDEF
);

3044 
	`sqlôe3VdbeCh™geP5
(
v
, (
u8
)
nF¨g
);

3045 if–
nF¨g
 && 
c⁄°Mask
==0 ){

3046 
	`sqlôe3Rñó£TempR™ge
(
pP¨£
, 
r1
, 
nF¨g
);

3050 #i‚de‡
SQLITE_OMIT_SUBQUERY


3051 
TK_EXISTS
:

3052 
TK_SELECT
: {

3053 
	`ã°ˇ£
–
›
==
TK_EXISTS
 );

3054 
	`ã°ˇ£
–
›
==
TK_SELECT
 );

3055 
öReg
 = 
	`sqlôe3CodeSub£À˘
(
pP¨£
, 
pEx¥
, 0, 0);

3058 
TK_IN
: {

3059 
de°IfFÆ£
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

3060 
de°IfNuŒ
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

3061 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NuŒ
, 0, 
èrgë
);

3062 
	`sqlôe3Ex¥CodeIN
(
pP¨£
, 
pEx¥
, 
de°IfFÆ£
, 
de°IfNuŒ
);

3063 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 1, 
èrgë
);

3064 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
de°IfFÆ£
);

3065 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_AddImm
, 
èrgë
, 0);

3066 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
de°IfNuŒ
);

3083 
TK_BETWEEN
: {

3084 
Ex¥
 *
pLe·
 = 
pEx¥
->pLeft;

3085 
Ex¥Li°_ôem
 *
pLIãm
 = 
pEx¥
->
x
.
pLi°
->
a
;

3086 
Ex¥
 *
pRight
 = 
pLIãm
->
pEx¥
;

3088 
r1
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pLe·
, &
ªgFªe1
);

3089 
r2
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pRight
, &
ªgFªe2
);

3090 
	`ã°ˇ£
–
ªgFªe1
==0 );

3091 
	`ã°ˇ£
–
ªgFªe2
==0 );

3092 
r3
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

3093 
r4
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

3094 
	`codeCom∑ª
(
pP¨£
, 
pLe·
, 
pRight
, 
OP_Ge
,

3095 
r1
, 
r2
, 
r3
, 
SQLITE_STOREP2
); 
	`VdbeCovîage
(
v
);

3096 
pLIãm
++;

3097 
pRight
 = 
pLIãm
->
pEx¥
;

3098 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgFªe2
);

3099 
r2
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pRight
, &
ªgFªe2
);

3100 
	`ã°ˇ£
–
ªgFªe2
==0 );

3101 
	`codeCom∑ª
(
pP¨£
, 
pLe·
, 
pRight
, 
OP_Le
, 
r1
, 
r2
, 
r4
, 
SQLITE_STOREP2
);

3102 
	`VdbeCovîage
(
v
);

3103 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_And
, 
r3
, 
r4
, 
èrgë
);

3104 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
r3
);

3105 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
r4
);

3108 
TK_SPAN
:

3109 
TK_COLLATE
:

3110 
TK_UPLUS
: {

3111 
öReg
 = 
	`sqlôe3Ex¥CodeT¨gë
(
pP¨£
, 
pEx¥
->
pLe·
, 
èrgë
);

3115 
TK_TRIGGER
: {

3141 
TabÀ
 *
pTab
 = 
pEx¥
->pTab;

3142 
p1
 = 
pEx¥
->
iTabÀ
 * (
pTab
->
nCﬁ
+1Ë+ 1 +ÖEx¥->
iCﬁumn
;

3144 
	`as£π
–
pEx¥
->
iTabÀ
==0 ||ÖExpr->iTable==1 );

3145 
	`as£π
–
pEx¥
->
iCﬁumn
>=-1 &&ÖEx¥->iCﬁumn<
pTab
->
nCﬁ
 );

3146 
	`as£π
–
pTab
->
iPKey
<0 || 
pEx¥
->
iCﬁumn
!=pTab->iPKey );

3147 
	`as£π
–
p1
>=0 &&Ö1<(
pTab
->
nCﬁ
*2+2) );

3149 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_P¨am
, 
p1
, 
èrgë
);

3150 
	`VdbeCommít
((
v
, "%s.%s -> $%d",

3151 (
pEx¥
->
iTabÀ
 ? "new" : "old"),

3152 (
pEx¥
->
iCﬁumn
<0 ? "rowid" :ÖEx¥->
pTab
->
aCﬁ
[pEx¥->iCﬁumn].
zName
),

3153 
èrgë


3156 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


3162 if–
pEx¥
->
iCﬁumn
>=0

3163 && 
pTab
->
aCﬁ
[
pEx¥
->
iCﬁumn
].
afföôy
==
SQLITE_AFF_REAL


3165 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_RólAfföôy
, 
èrgë
);

3193 : 
	`as£π
–
›
==
TK_CASE
 ); {

3194 
ídLabñ
;

3195 
√xtCa£
;

3196 
nEx¥
;

3197 
i
;

3198 
Ex¥Li°
 *
pELi°
;

3199 
Ex¥Li°_ôem
 *
aLi°ñem
;

3200 
Ex¥
 
›Com∑ª
;

3201 
Ex¥
 *
pX
;

3202 
Ex¥
 *
pTe°
 = 0;

3203 
	`VVA_ONLY
–
iCacheLevñ
 = 
pP¨£
->iCacheLevel; )

3205 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_xIsSñe˘
Ë&&ÖEx¥->
x
.
pLi°
 );

3206 
	`as£π
(
pEx¥
->
x
.
pLi°
->
nEx¥
 > 0);

3207 
pELi°
 = 
pEx¥
->
x
.
pLi°
;

3208 
aLi°ñem
 = 
pELi°
->
a
;

3209 
nEx¥
 = 
pELi°
->nExpr;

3210 
ídLabñ
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

3211 if–(
pX
 = 
pEx¥
->
pLe·
)!=0 ){

3212 
ãmpX
 = *
pX
;

3213 
	`ã°ˇ£
–
pX
->
›
==
TK_COLUMN
 );

3214 
	`ex¥ToRegi°î
(&
ãmpX
, 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pX
, &
ªgFªe1
));

3215 
	`ã°ˇ£
–
ªgFªe1
==0 );

3216 
›Com∑ª
.
›
 = 
TK_EQ
;

3217 
›Com∑ª
.
pLe·
 = &
ãmpX
;

3218 
pTe°
 = &
›Com∑ª
;

3223 
ªgFªe1
 = 0;

3225 
i
=0; i<
nEx¥
-1; i=i+2){

3226 
	`sqlôe3Ex¥CachePush
(
pP¨£
);

3227 if–
pX
 ){

3228 
	`as£π
–
pTe°
!=0 );

3229 
›Com∑ª
.
pRight
 = 
aLi°ñem
[
i
].
pEx¥
;

3231 
pTe°
 = 
aLi°ñem
[
i
].
pEx¥
;

3233 
√xtCa£
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

3234 
	`ã°ˇ£
–
pTe°
->
›
==
TK_COLUMN
 );

3235 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pTe°
, 
√xtCa£
, 
SQLITE_JUMPIFNULL
);

3236 
	`ã°ˇ£
–
aLi°ñem
[
i
+1].
pEx¥
->
›
==
TK_COLUMN
 );

3237 
	`sqlôe3Ex¥Code
(
pP¨£
, 
aLi°ñem
[
i
+1].
pEx¥
, 
èrgë
);

3238 
	`sqlôe3VdbeGŸo
(
v
, 
ídLabñ
);

3239 
	`sqlôe3Ex¥CacheP›
(
pP¨£
);

3240 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
√xtCa£
);

3242 if–(
nEx¥
&1)!=0 ){

3243 
	`sqlôe3Ex¥CachePush
(
pP¨£
);

3244 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pELi°
->
a
[
nEx¥
-1].
pEx¥
, 
èrgë
);

3245 
	`sqlôe3Ex¥CacheP›
(
pP¨£
);

3247 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NuŒ
, 0, 
èrgë
);

3249 
	`as£π
–
db
->
mÆlocFaûed
 || 
pP¨£
->
nEº
>0

3250 || 
pP¨£
->
iCacheLevñ
==iCacheLevel );

3251 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
ídLabñ
);

3254 #i‚de‡
SQLITE_OMIT_TRIGGER


3255 
TK_RAISE
: {

3256 
	`as£π
–
pEx¥
->
afföôy
==
OE_Rﬁlback


3257 || 
pEx¥
->
afföôy
==
OE_Ab‹t


3258 || 
pEx¥
->
afföôy
==
OE_Faû


3259 || 
pEx¥
->
afföôy
==
OE_Ign‹e


3261 if–!
pP¨£
->
pTriggîTab
 ){

3262 
	`sqlôe3Eº‹Msg
(
pP¨£
,

3266 if–
pEx¥
->
afföôy
==
OE_Ab‹t
 ){

3267 
	`sqlôe3MayAb‹t
(
pP¨£
);

3269 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_I¡VÆue
) );

3270 if–
pEx¥
->
afföôy
==
OE_Ign‹e
 ){

3271 
	`sqlôe3VdbeAddOp4
(

3272 
v
, 
OP_HÆt
, 
SQLITE_OK
, 
OE_Ign‹e
, 0, 
pEx¥
->
u
.
zTokí
,0);

3273 
	`VdbeCovîage
(
v
);

3275 
	`sqlôe3HÆtC⁄°øöt
(
pP¨£
, 
SQLITE_CONSTRAINT_TRIGGER
,

3276 
pEx¥
->
afföôy
,ÖEx¥->
u
.
zTokí
, 0, 0);

3283 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgFªe1
);

3284 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgFªe2
);

3285  
öReg
;

3286 
	}
}

3291 
	$sqlôe3Ex¥CodeAtInô
(

3292 
P¨£
 *
pP¨£
,

3293 
Ex¥
 *
pEx¥
,

3294 
ªgDe°
,

3295 
u8
 
ªußbÀ


3297 
Ex¥Li°
 *
p
;

3298 
	`as£π
–
	`C⁄°Fa˘‹Ok
(
pP¨£
) );

3299 
p
 = 
pP¨£
->
pC⁄°Ex¥
;

3300 
pEx¥
 = 
	`sqlôe3Ex¥Dup
(
pP¨£
->
db
,ÖExpr, 0);

3301 
p
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,Ö, 
pEx¥
);

3302 if–
p
 ){

3303 
Ex¥Li°_ôem
 *
pIãm
 = &
p
->
a
[p->
nEx¥
-1];

3304 
pIãm
->
u
.
iC⁄°Ex¥Reg
 = 
ªgDe°
;

3305 
pIãm
->
ªußbÀ
 =Ñeusable;

3307 
pP¨£
->
pC⁄°Ex¥
 = 
p
;

3308 
	}
}

3323 
	$sqlôe3Ex¥CodeTemp
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
, *
pReg
){

3324 
r2
;

3325 
pEx¥
 = 
	`sqlôe3Ex¥SkùCﬁœã
(pExpr);

3326 if–
	`C⁄°Fa˘‹Ok
(
pP¨£
)

3327 && 
pEx¥
->
›
!=
TK_REGISTER


3328 && 
	`sqlôe3Ex¥IsC⁄°™tNŸJoö
(
pEx¥
)

3330 
Ex¥Li°
 *
p
 = 
pP¨£
->
pC⁄°Ex¥
;

3331 
i
;

3332 *
pReg
 = 0;

3333 if–
p
 ){

3334 
Ex¥Li°_ôem
 *
pIãm
;

3335 
pIãm
=
p
->
a
, 
i
ı->
nEx¥
; i>0;ÖItem++, i--){

3336 if–
pIãm
->
ªußbÀ
 && 
	`sqlôe3Ex¥Com∑ª
’Iãm->
pEx¥
,pExpr,-1)==0 ){

3337  
pIãm
->
u
.
iC⁄°Ex¥Reg
;

3341 
r2
 = ++
pP¨£
->
nMem
;

3342 
	`sqlôe3Ex¥CodeAtInô
(
pP¨£
, 
pEx¥
, 
r2
, 1);

3344 
r1
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

3345 
r2
 = 
	`sqlôe3Ex¥CodeT¨gë
(
pP¨£
, 
pEx¥
, 
r1
);

3346 if–
r2
==
r1
 ){

3347 *
pReg
 = 
r1
;

3349 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
r1
);

3350 *
pReg
 = 0;

3353  
r2
;

3354 
	}
}

3361 
	$sqlôe3Ex¥Code
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
, 
èrgë
){

3362 
öReg
;

3364 
	`as£π
–
èrgë
>0 &&Å¨gë<=
pP¨£
->
nMem
 );

3365 if–
pEx¥
 &&ÖEx¥->
›
==
TK_REGISTER
 ){

3366 
	`sqlôe3VdbeAddOp2
(
pP¨£
->
pVdbe
, 
OP_C›y
, 
pEx¥
->
iTabÀ
, 
èrgë
);

3368 
öReg
 = 
	`sqlôe3Ex¥CodeT¨gë
(
pP¨£
, 
pEx¥
, 
èrgë
);

3369 
	`as£π
–
pP¨£
->
pVdbe
!=0 ||ÖP¨£->
db
->
mÆlocFaûed
 );

3370 if–
öReg
!=
èrgë
 && 
pP¨£
->
pVdbe
 ){

3371 
	`sqlôe3VdbeAddOp2
(
pP¨£
->
pVdbe
, 
OP_SC›y
, 
öReg
, 
èrgë
);

3374 
	}
}

3381 
	$sqlôe3Ex¥CodeC›y
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
, 
èrgë
){

3382 
sqlôe3
 *
db
 = 
pP¨£
->db;

3383 
pEx¥
 = 
	`sqlôe3Ex¥Dup
(
db
,ÖExpr, 0);

3384 if–!
db
->
mÆlocFaûed
 ) 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
, 
èrgë
);

3385 
	`sqlôe3Ex¥Dñëe
(
db
, 
pEx¥
);

3386 
	}
}

3394 
	$sqlôe3Ex¥CodeFa˘‹abÀ
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
, 
èrgë
){

3395 if–
pP¨£
->
okC⁄°Fa˘‹
 && 
	`sqlôe3Ex¥IsC⁄°™t
(
pEx¥
) ){

3396 
	`sqlôe3Ex¥CodeAtInô
(
pP¨£
, 
pEx¥
, 
èrgë
, 0);

3398 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
, 
èrgë
);

3400 
	}
}

3414 
	$sqlôe3Ex¥CodeAndCache
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
, 
èrgë
){

3415 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

3416 
iMem
;

3418 
	`as£π
–
èrgë
>0 );

3419 
	`as£π
–
pEx¥
->
›
!=
TK_REGISTER
 );

3420 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
, 
èrgë
);

3421 
iMem
 = ++
pP¨£
->
nMem
;

3422 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_C›y
, 
èrgë
, 
iMem
);

3423 
	`ex¥ToRegi°î
(
pEx¥
, 
iMem
);

3424 
	}
}

3442 
	$sqlôe3Ex¥CodeEx¥Li°
(

3443 
P¨£
 *
pP¨£
,

3444 
Ex¥Li°
 *
pLi°
,

3445 
èrgë
,

3446 
§cReg
,

3447 
u8
 
Êags


3449 
Ex¥Li°_ôem
 *
pIãm
;

3450 
i
, 
j
, 
n
;

3451 
u8
 
c›yOp
 = (
Êags
 & 
SQLITE_ECEL_DUP
Ë? 
OP_C›y
 : 
OP_SC›y
;

3452 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

3453 
	`as£π
–
pLi°
!=0 );

3454 
	`as£π
–
èrgë
>0 );

3455 
	`as£π
–
pP¨£
->
pVdbe
!=0 );

3456 
n
 = 
pLi°
->
nEx¥
;

3457 if–!
	`C⁄°Fa˘‹Ok
(
pP¨£
ËË
Êags
 &~
SQLITE_ECEL_FACTOR
;

3458 
pIãm
=
pLi°
->
a
, 
i
=0; i<
n
; i++,ÖItem++){

3459 
Ex¥
 *
pEx¥
 = 
pIãm
->pExpr;

3460 if–(
Êags
 & 
SQLITE_ECEL_REF
)!=0 && (
j
 = 
pLi°
->
a
[
i
].
u
.
x
.
iOrdîByCﬁ
)>0 ){

3461 
	`sqlôe3VdbeAddOp2
(
v
, 
c›yOp
, 
j
+
§cReg
-1, 
èrgë
+
i
);

3462 }if–(
Êags
 & 
SQLITE_ECEL_FACTOR
)!=0 && 
	`sqlôe3Ex¥IsC⁄°™t
(
pEx¥
) ){

3463 
	`sqlôe3Ex¥CodeAtInô
(
pP¨£
, 
pEx¥
, 
èrgë
+
i
, 0);

3465 
öReg
 = 
	`sqlôe3Ex¥CodeT¨gë
(
pP¨£
, 
pEx¥
, 
èrgë
+
i
);

3466 if–
öReg
!=
èrgë
+
i
 ){

3467 
VdbeOp
 *
pOp
;

3468 if–
c›yOp
==
OP_C›y


3469 && (
pOp
=
	`sqlôe3VdbeGëOp
(
v
, -1))->
›code
==
OP_C›y


3470 && 
pOp
->
p1
+pOp->
p3
+1==
öReg


3471 && 
pOp
->
p2
+pOp->
p3
+1==
èrgë
+
i


3473 
pOp
->
p3
++;

3475 
	`sqlôe3VdbeAddOp2
(
v
, 
c›yOp
, 
öReg
, 
èrgë
+
i
);

3480  
n
;

3481 
	}
}

3495 
	$ex¥CodeBëwìn
(

3496 
P¨£
 *
pP¨£
,

3497 
Ex¥
 *
pEx¥
,

3498 
de°
,

3499 
jumpIfTrue
,

3500 
jumpIfNuŒ


3502 
Ex¥
 
ex¥And
;

3503 
Ex¥
 
compLe·
;

3504 
Ex¥
 
compRight
;

3505 
Ex¥
 
ex¥X
;

3506 
ªgFªe1
 = 0;

3508 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_xIsSñe˘
) );

3509 
ex¥X
 = *
pEx¥
->
pLe·
;

3510 
ex¥And
.
›
 = 
TK_AND
;

3511 
ex¥And
.
pLe·
 = &
compLe·
;

3512 
ex¥And
.
pRight
 = &
compRight
;

3513 
compLe·
.
›
 = 
TK_GE
;

3514 
compLe·
.
pLe·
 = &
ex¥X
;

3515 
compLe·
.
pRight
 = 
pEx¥
->
x
.
pLi°
->
a
[0].pExpr;

3516 
compRight
.
›
 = 
TK_LE
;

3517 
compRight
.
pLe·
 = &
ex¥X
;

3518 
compRight
.
pRight
 = 
pEx¥
->
x
.
pLi°
->
a
[1].pExpr;

3519 
	`ex¥ToRegi°î
(&
ex¥X
, 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, &ex¥X, &
ªgFªe1
));

3520 if–
jumpIfTrue
 ){

3521 
	`sqlôe3Ex¥IfTrue
(
pP¨£
, &
ex¥And
, 
de°
, 
jumpIfNuŒ
);

3523 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, &
ex¥And
, 
de°
, 
jumpIfNuŒ
);

3525 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgFªe1
);

3528 
	`ã°ˇ£
–
jumpIfTrue
==0 && 
jumpIfNuŒ
==0 && 
ªgFªe1
==0 );

3529 
	`ã°ˇ£
–
jumpIfTrue
==0 && 
jumpIfNuŒ
==0 && 
ªgFªe1
!=0 );

3530 
	`ã°ˇ£
–
jumpIfTrue
==0 && 
jumpIfNuŒ
!=0 && 
ªgFªe1
==0 );

3531 
	`ã°ˇ£
–
jumpIfTrue
==0 && 
jumpIfNuŒ
!=0 && 
ªgFªe1
!=0 );

3532 
	`ã°ˇ£
–
jumpIfTrue
!=0 && 
jumpIfNuŒ
==0 && 
ªgFªe1
==0 );

3533 
	`ã°ˇ£
–
jumpIfTrue
!=0 && 
jumpIfNuŒ
==0 && 
ªgFªe1
!=0 );

3534 
	`ã°ˇ£
–
jumpIfTrue
!=0 && 
jumpIfNuŒ
!=0 && 
ªgFªe1
==0 );

3535 
	`ã°ˇ£
–
jumpIfTrue
!=0 && 
jumpIfNuŒ
!=0 && 
ªgFªe1
!=0 );

3536 
	}
}

3552 
	$sqlôe3Ex¥IfTrue
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
, 
de°
, 
jumpIfNuŒ
){

3553 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

3554 
›
 = 0;

3555 
ªgFªe1
 = 0;

3556 
ªgFªe2
 = 0;

3557 
r1
, 
r2
;

3559 
	`as£π
–
jumpIfNuŒ
==
SQLITE_JUMPIFNULL
 || jumpIfNull==0 );

3560 if–
	`NEVER
(
v
==0) ) ;

3561 if–
	`NEVER
(
pEx¥
==0) ) ;

3562 
›
 = 
pEx¥
->op;

3563  
›
 ){

3564 
TK_AND
: {

3565 
d2
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

3566 
	`ã°ˇ£
–
jumpIfNuŒ
==0 );

3567 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pEx¥
->
pLe·
, 
d2
,
jumpIfNuŒ
^
SQLITE_JUMPIFNULL
);

3568 
	`sqlôe3Ex¥CachePush
(
pP¨£
);

3569 
	`sqlôe3Ex¥IfTrue
(
pP¨£
, 
pEx¥
->
pRight
, 
de°
, 
jumpIfNuŒ
);

3570 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
d2
);

3571 
	`sqlôe3Ex¥CacheP›
(
pP¨£
);

3574 
TK_OR
: {

3575 
	`ã°ˇ£
–
jumpIfNuŒ
==0 );

3576 
	`sqlôe3Ex¥IfTrue
(
pP¨£
, 
pEx¥
->
pLe·
, 
de°
, 
jumpIfNuŒ
);

3577 
	`sqlôe3Ex¥CachePush
(
pP¨£
);

3578 
	`sqlôe3Ex¥IfTrue
(
pP¨£
, 
pEx¥
->
pRight
, 
de°
, 
jumpIfNuŒ
);

3579 
	`sqlôe3Ex¥CacheP›
(
pP¨£
);

3582 
TK_NOT
: {

3583 
	`ã°ˇ£
–
jumpIfNuŒ
==0 );

3584 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pEx¥
->
pLe·
, 
de°
, 
jumpIfNuŒ
);

3587 
TK_IS
:

3588 
TK_ISNOT
:

3589 
	`ã°ˇ£
–
›
==
TK_IS
 );

3590 
	`ã°ˇ£
–
›
==
TK_ISNOT
 );

3591 
›
 = (›==
TK_IS
Ë? 
TK_EQ
 : 
TK_NE
;

3592 
jumpIfNuŒ
 = 
SQLITE_NULLEQ
;

3594 
TK_LT
:

3595 
TK_LE
:

3596 
TK_GT
:

3597 
TK_GE
:

3598 
TK_NE
:

3599 
TK_EQ
: {

3600 
	`ã°ˇ£
–
jumpIfNuŒ
==0 );

3601 
r1
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pEx¥
->
pLe·
, &
ªgFªe1
);

3602 
r2
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pEx¥
->
pRight
, &
ªgFªe2
);

3603 
	`codeCom∑ª
(
pP¨£
, 
pEx¥
->
pLe·
,ÖEx¥->
pRight
, 
›
,

3604 
r1
, 
r2
, 
de°
, 
jumpIfNuŒ
);

3605 
	`as£π
(
TK_LT
==
OP_Lt
); 
	`ã°ˇ£
(
›
==OP_Lt); 
	`VdbeCovîageIf
(
v
,op==OP_Lt);

3606 
	`as£π
(
TK_LE
==
OP_Le
); 
	`ã°ˇ£
(
›
==OP_Le); 
	`VdbeCovîageIf
(
v
,op==OP_Le);

3607 
	`as£π
(
TK_GT
==
OP_Gt
); 
	`ã°ˇ£
(
›
==OP_Gt); 
	`VdbeCovîageIf
(
v
,op==OP_Gt);

3608 
	`as£π
(
TK_GE
==
OP_Ge
); 
	`ã°ˇ£
(
›
==OP_Ge); 
	`VdbeCovîageIf
(
v
,op==OP_Ge);

3609 
	`as£π
(
TK_EQ
==
OP_Eq
); 
	`ã°ˇ£
(
›
==OP_Eq);

3610 
	`VdbeCovîageIf
(
v
, 
›
==
OP_Eq
 && 
jumpIfNuŒ
==
SQLITE_NULLEQ
);

3611 
	`VdbeCovîageIf
(
v
, 
›
==
OP_Eq
 && 
jumpIfNuŒ
!=
SQLITE_NULLEQ
);

3612 
	`as£π
(
TK_NE
==
OP_Ne
); 
	`ã°ˇ£
(
›
==OP_Ne);

3613 
	`VdbeCovîageIf
(
v
, 
›
==
OP_Ne
 && 
jumpIfNuŒ
==
SQLITE_NULLEQ
);

3614 
	`VdbeCovîageIf
(
v
, 
›
==
OP_Ne
 && 
jumpIfNuŒ
!=
SQLITE_NULLEQ
);

3615 
	`ã°ˇ£
–
ªgFªe1
==0 );

3616 
	`ã°ˇ£
–
ªgFªe2
==0 );

3619 
TK_ISNULL
:

3620 
TK_NOTNULL
: {

3621 
	`as£π
–
TK_ISNULL
==
OP_IsNuŒ
 ); 
	`ã°ˇ£
–
›
==TK_ISNULL );

3622 
	`as£π
–
TK_NOTNULL
==
OP_NŸNuŒ
 ); 
	`ã°ˇ£
–
›
==TK_NOTNULL );

3623 
r1
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pEx¥
->
pLe·
, &
ªgFªe1
);

3624 
	`sqlôe3VdbeAddOp2
(
v
, 
›
, 
r1
, 
de°
);

3625 
	`VdbeCovîageIf
(
v
, 
›
==
TK_ISNULL
);

3626 
	`VdbeCovîageIf
(
v
, 
›
==
TK_NOTNULL
);

3627 
	`ã°ˇ£
–
ªgFªe1
==0 );

3630 
TK_BETWEEN
: {

3631 
	`ã°ˇ£
–
jumpIfNuŒ
==0 );

3632 
	`ex¥CodeBëwìn
(
pP¨£
, 
pEx¥
, 
de°
, 1, 
jumpIfNuŒ
);

3635 #i‚de‡
SQLITE_OMIT_SUBQUERY


3636 
TK_IN
: {

3637 
de°IfFÆ£
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

3638 
de°IfNuŒ
 = 
jumpIfNuŒ
 ? 
de°
 : 
de°IfFÆ£
;

3639 
	`sqlôe3Ex¥CodeIN
(
pP¨£
, 
pEx¥
, 
de°IfFÆ£
, 
de°IfNuŒ
);

3640 
	`sqlôe3VdbeGŸo
(
v
, 
de°
);

3641 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
de°IfFÆ£
);

3646 if–
	`ex¥AlwaysTrue
(
pEx¥
) ){

3647 
	`sqlôe3VdbeGŸo
(
v
, 
de°
);

3648 }if–
	`ex¥AlwaysFÆ£
(
pEx¥
) ){

3651 
r1
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pEx¥
, &
ªgFªe1
);

3652 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_If
, 
r1
, 
de°
, 
jumpIfNuŒ
!=0);

3653 
	`VdbeCovîage
(
v
);

3654 
	`ã°ˇ£
–
ªgFªe1
==0 );

3655 
	`ã°ˇ£
–
jumpIfNuŒ
==0 );

3660 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgFªe1
);

3661 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgFªe2
);

3662 
	}
}

3673 
	$sqlôe3Ex¥IfFÆ£
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
, 
de°
, 
jumpIfNuŒ
){

3674 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

3675 
›
 = 0;

3676 
ªgFªe1
 = 0;

3677 
ªgFªe2
 = 0;

3678 
r1
, 
r2
;

3680 
	`as£π
–
jumpIfNuŒ
==
SQLITE_JUMPIFNULL
 || jumpIfNull==0 );

3681 if–
	`NEVER
(
v
==0) ) ;

3682 if–
pEx¥
==0 ) ;

3702 
›
 = ((
pEx¥
->›+(
TK_ISNULL
&1))^1)-(TK_ISNULL&1);

3706 
	`as£π
–
pEx¥
->
›
!=
TK_ISNULL
 || op==
OP_NŸNuŒ
 );

3707 
	`as£π
–
pEx¥
->
›
!=
TK_NOTNULL
 || op==
OP_IsNuŒ
 );

3708 
	`as£π
–
pEx¥
->
›
!=
TK_NE
 || op==
OP_Eq
 );

3709 
	`as£π
–
pEx¥
->
›
!=
TK_EQ
 || op==
OP_Ne
 );

3710 
	`as£π
–
pEx¥
->
›
!=
TK_LT
 || op==
OP_Ge
 );

3711 
	`as£π
–
pEx¥
->
›
!=
TK_LE
 || op==
OP_Gt
 );

3712 
	`as£π
–
pEx¥
->
›
!=
TK_GT
 || op==
OP_Le
 );

3713 
	`as£π
–
pEx¥
->
›
!=
TK_GE
 || op==
OP_Lt
 );

3715  
pEx¥
->
›
 ){

3716 
TK_AND
: {

3717 
	`ã°ˇ£
–
jumpIfNuŒ
==0 );

3718 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pEx¥
->
pLe·
, 
de°
, 
jumpIfNuŒ
);

3719 
	`sqlôe3Ex¥CachePush
(
pP¨£
);

3720 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pEx¥
->
pRight
, 
de°
, 
jumpIfNuŒ
);

3721 
	`sqlôe3Ex¥CacheP›
(
pP¨£
);

3724 
TK_OR
: {

3725 
d2
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

3726 
	`ã°ˇ£
–
jumpIfNuŒ
==0 );

3727 
	`sqlôe3Ex¥IfTrue
(
pP¨£
, 
pEx¥
->
pLe·
, 
d2
, 
jumpIfNuŒ
^
SQLITE_JUMPIFNULL
);

3728 
	`sqlôe3Ex¥CachePush
(
pP¨£
);

3729 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pEx¥
->
pRight
, 
de°
, 
jumpIfNuŒ
);

3730 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
d2
);

3731 
	`sqlôe3Ex¥CacheP›
(
pP¨£
);

3734 
TK_NOT
: {

3735 
	`ã°ˇ£
–
jumpIfNuŒ
==0 );

3736 
	`sqlôe3Ex¥IfTrue
(
pP¨£
, 
pEx¥
->
pLe·
, 
de°
, 
jumpIfNuŒ
);

3739 
TK_IS
:

3740 
TK_ISNOT
:

3741 
	`ã°ˇ£
–
pEx¥
->
›
==
TK_IS
 );

3742 
	`ã°ˇ£
–
pEx¥
->
›
==
TK_ISNOT
 );

3743 
›
 = (
pEx¥
->›==
TK_IS
Ë? 
TK_NE
 : 
TK_EQ
;

3744 
jumpIfNuŒ
 = 
SQLITE_NULLEQ
;

3746 
TK_LT
:

3747 
TK_LE
:

3748 
TK_GT
:

3749 
TK_GE
:

3750 
TK_NE
:

3751 
TK_EQ
: {

3752 
	`ã°ˇ£
–
jumpIfNuŒ
==0 );

3753 
r1
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pEx¥
->
pLe·
, &
ªgFªe1
);

3754 
r2
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pEx¥
->
pRight
, &
ªgFªe2
);

3755 
	`codeCom∑ª
(
pP¨£
, 
pEx¥
->
pLe·
,ÖEx¥->
pRight
, 
›
,

3756 
r1
, 
r2
, 
de°
, 
jumpIfNuŒ
);

3757 
	`as£π
(
TK_LT
==
OP_Lt
); 
	`ã°ˇ£
(
›
==OP_Lt); 
	`VdbeCovîageIf
(
v
,op==OP_Lt);

3758 
	`as£π
(
TK_LE
==
OP_Le
); 
	`ã°ˇ£
(
›
==OP_Le); 
	`VdbeCovîageIf
(
v
,op==OP_Le);

3759 
	`as£π
(
TK_GT
==
OP_Gt
); 
	`ã°ˇ£
(
›
==OP_Gt); 
	`VdbeCovîageIf
(
v
,op==OP_Gt);

3760 
	`as£π
(
TK_GE
==
OP_Ge
); 
	`ã°ˇ£
(
›
==OP_Ge); 
	`VdbeCovîageIf
(
v
,op==OP_Ge);

3761 
	`as£π
(
TK_EQ
==
OP_Eq
); 
	`ã°ˇ£
(
›
==OP_Eq);

3762 
	`VdbeCovîageIf
(
v
, 
›
==
OP_Eq
 && 
jumpIfNuŒ
!=
SQLITE_NULLEQ
);

3763 
	`VdbeCovîageIf
(
v
, 
›
==
OP_Eq
 && 
jumpIfNuŒ
==
SQLITE_NULLEQ
);

3764 
	`as£π
(
TK_NE
==
OP_Ne
); 
	`ã°ˇ£
(
›
==OP_Ne);

3765 
	`VdbeCovîageIf
(
v
, 
›
==
OP_Ne
 && 
jumpIfNuŒ
!=
SQLITE_NULLEQ
);

3766 
	`VdbeCovîageIf
(
v
, 
›
==
OP_Ne
 && 
jumpIfNuŒ
==
SQLITE_NULLEQ
);

3767 
	`ã°ˇ£
–
ªgFªe1
==0 );

3768 
	`ã°ˇ£
–
ªgFªe2
==0 );

3771 
TK_ISNULL
:

3772 
TK_NOTNULL
: {

3773 
r1
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pEx¥
->
pLe·
, &
ªgFªe1
);

3774 
	`sqlôe3VdbeAddOp2
(
v
, 
›
, 
r1
, 
de°
);

3775 
	`ã°ˇ£
–
›
==
TK_ISNULL
 ); 
	`VdbeCovîageIf
(
v
, op==TK_ISNULL);

3776 
	`ã°ˇ£
–
›
==
TK_NOTNULL
 ); 
	`VdbeCovîageIf
(
v
, op==TK_NOTNULL);

3777 
	`ã°ˇ£
–
ªgFªe1
==0 );

3780 
TK_BETWEEN
: {

3781 
	`ã°ˇ£
–
jumpIfNuŒ
==0 );

3782 
	`ex¥CodeBëwìn
(
pP¨£
, 
pEx¥
, 
de°
, 0, 
jumpIfNuŒ
);

3785 #i‚de‡
SQLITE_OMIT_SUBQUERY


3786 
TK_IN
: {

3787 if–
jumpIfNuŒ
 ){

3788 
	`sqlôe3Ex¥CodeIN
(
pP¨£
, 
pEx¥
, 
de°
, dest);

3790 
de°IfNuŒ
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

3791 
	`sqlôe3Ex¥CodeIN
(
pP¨£
, 
pEx¥
, 
de°
, 
de°IfNuŒ
);

3792 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
de°IfNuŒ
);

3798 if–
	`ex¥AlwaysFÆ£
(
pEx¥
) ){

3799 
	`sqlôe3VdbeGŸo
(
v
, 
de°
);

3800 }if–
	`ex¥AlwaysTrue
(
pEx¥
) ){

3803 
r1
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pEx¥
, &
ªgFªe1
);

3804 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_IfNŸ
, 
r1
, 
de°
, 
jumpIfNuŒ
!=0);

3805 
	`VdbeCovîage
(
v
);

3806 
	`ã°ˇ£
–
ªgFªe1
==0 );

3807 
	`ã°ˇ£
–
jumpIfNuŒ
==0 );

3812 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgFªe1
);

3813 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgFªe2
);

3814 
	}
}

3821 
	$sqlôe3Ex¥IfFÆ£Dup
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
, 
de°
,
jumpIfNuŒ
){

3822 
sqlôe3
 *
db
 = 
pP¨£
->db;

3823 
Ex¥
 *
pC›y
 = 
	`sqlôe3Ex¥Dup
(
db
, 
pEx¥
, 0);

3824 if–
db
->
mÆlocFaûed
==0 ){

3825 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pC›y
, 
de°
, 
jumpIfNuŒ
);

3827 
	`sqlôe3Ex¥Dñëe
(
db
, 
pC›y
);

3828 
	}
}

3853 
	$sqlôe3Ex¥Com∑ª
(
Ex¥
 *
pA
, Ex¥ *
pB
, 
iTab
){

3854 
u32
 
comböedFœgs
;

3855 if–
pA
==0 || 
pB
==0 ){

3856  
pB
==
pA
 ? 0 : 2;

3858 
comböedFœgs
 = 
pA
->
Êags
 | 
pB
->flags;

3859 if–
comböedFœgs
 & 
EP_I¡VÆue
 ){

3860 if–(
pA
->
Êags
&
pB
->Êags&
EP_I¡VÆue
)!=0 &&ÖA->
u
.
iVÆue
==pB->u.iValue ){

3865 if–
pA
->
›
!=
pB
->op ){

3866 if–
pA
->
›
==
TK_COLLATE
 && 
	`sqlôe3Ex¥Com∑ª
’A->
pLe·
, 
pB
, 
iTab
)<2 ){

3869 if–
pB
->
›
==
TK_COLLATE
 && 
	`sqlôe3Ex¥Com∑ª
(
pA
,ÖB->
pLe·
, 
iTab
)<2 ){

3874 if–
pA
->
›
!=
TK_COLUMN
 &&ÖA->›!=
TK_AGG_COLUMN
 &&ÖA->
u
.
zTokí
 ){

3875 if–
pA
->
›
==
TK_FUNCTION
 ){

3876 if–
	`sqlôe3SåICmp
(
pA
->
u
.
zTokí
,
pB
->u.zToken)!=0 )  2;

3877 }if–
	`°rcmp
(
pA
->
u
.
zTokí
,
pB
->u.zToken)!=0 ){

3878  
pA
->
›
==
TK_COLLATE
 ? 1 : 2;

3881 if–(
pA
->
Êags
 & 
EP_Di°ö˘
)!=(
pB
->flags & EP_Distinct) )  2;

3882 if–
	`ALWAYS
((
comböedFœgs
 & 
EP_TokíO∆y
)==0) ){

3883 if–
comböedFœgs
 & 
EP_xIsSñe˘
 )  2;

3884 if–
	`sqlôe3Ex¥Com∑ª
(
pA
->
pLe·
, 
pB
->pLe·, 
iTab
) )  2;

3885 if–
	`sqlôe3Ex¥Com∑ª
(
pA
->
pRight
, 
pB
->pRight, 
iTab
) )  2;

3886 if–
	`sqlôe3Ex¥Li°Com∑ª
(
pA
->
x
.
pLi°
, 
pB
->x.pLi°, 
iTab
) )  2;

3887 if–
	`ALWAYS
((
comböedFœgs
 & 
EP_Redu˚d
)==0Ë&& 
pA
->
›
!=
TK_STRING
 ){

3888 if–
pA
->
iCﬁumn
!=
pB
->iColumn )  2;

3889 if–
pA
->
iTabÀ
!=
pB
->iTable

3890 && (
pA
->
iTabÀ
!=
iTab
 || 
	`NEVER
(
pB
->iTable>=0)) )  2;

3894 
	}
}

3911 
	$sqlôe3Ex¥Li°Com∑ª
(
Ex¥Li°
 *
pA
, Ex¥Li° *
pB
, 
iTab
){

3912 
i
;

3913 if–
pA
==0 && 
pB
==0 )  0;

3914 if–
pA
==0 || 
pB
==0 )  1;

3915 if–
pA
->
nEx¥
!=
pB
->nExpr )  1;

3916 
i
=0; i<
pA
->
nEx¥
; i++){

3917 
Ex¥
 *
pEx¥A
 = 
pA
->
a
[
i
].
pEx¥
;

3918 
Ex¥
 *
pEx¥B
 = 
pB
->
a
[
i
].
pEx¥
;

3919 if–
pA
->
a
[
i
].
s‹tOrdî
!=
pB
->a[i].sortOrder )  1;

3920 if–
	`sqlôe3Ex¥Com∑ª
(
pEx¥A
, 
pEx¥B
, 
iTab
) )  1;

3923 
	}
}

3945 
	$sqlôe3Ex¥Im∂õsEx¥
(
Ex¥
 *
pE1
, Ex¥ *
pE2
, 
iTab
){

3946 if–
	`sqlôe3Ex¥Com∑ª
(
pE1
, 
pE2
, 
iTab
)==0 ){

3949 if–
pE2
->
›
==
TK_OR


3950 && (
	`sqlôe3Ex¥Im∂õsEx¥
(
pE1
, 
pE2
->
pLe·
, 
iTab
)

3951 || 
	`sqlôe3Ex¥Im∂õsEx¥
(
pE1
, 
pE2
->
pRight
, 
iTab
) )

3955 if–
pE2
->
›
==
TK_NOTNULL


3956 && 
	`sqlôe3Ex¥Com∑ª
(
pE1
->
pLe·
, 
pE2
->pLe·, 
iTab
)==0

3957 && (
pE1
->
›
!=
TK_ISNULL
 &&ÖE1->›!=
TK_IS
)

3962 
	}
}

3970 
	sSrcCou¡
 {

3971 
SrcLi°
 *
	mpSrc
;

3972 
	mnThis
;

3973 
	mnOthî
;

3979 
	$ex¥SrcCou¡
(
WÆkî
 *
pWÆkî
, 
Ex¥
 *
pEx¥
){

3985 if–
pEx¥
->
›
==
TK_COLUMN
 || 
	`NEVER
’Ex¥->›==
TK_AGG_COLUMN
) ){

3986 
i
;

3987 
SrcCou¡
 *
p
 = 
pWÆkî
->
u
.
pSrcCou¡
;

3988 
SrcLi°
 *
pSrc
 = 
p
->pSrc;

3989 
nSrc
 = 
pSrc
 ?ÖSrc->nSrc : 0;

3990 
i
=0; i<
nSrc
; i++){

3991 if–
pEx¥
->
iTabÀ
==
pSrc
->
a
[
i
].
iCurs‹
 ) ;

3993 if–
i
<
nSrc
 ){

3994 
p
->
nThis
++;

3996 
p
->
nOthî
++;

3999  
WRC_C⁄töue
;

4000 
	}
}

4008 
	$sqlôe3Fun˘i⁄U£sThisSrc
(
Ex¥
 *
pEx¥
, 
SrcLi°
 *
pSrcLi°
){

4009 
WÆkî
 
w
;

4010 
SrcCou¡
 
˙t
;

4011 
	`as£π
–
pEx¥
->
›
==
TK_AGG_FUNCTION
 );

4012 
	`mem£t
(&
w
, 0, (w));

4013 
w
.
xEx¥CÆlback
 = 
ex¥SrcCou¡
;

4014 
w
.
u
.
pSrcCou¡
 = &
˙t
;

4015 
˙t
.
pSrc
 = 
pSrcLi°
;

4016 
˙t
.
nThis
 = 0;

4017 
˙t
.
nOthî
 = 0;

4018 
	`sqlôe3WÆkEx¥Li°
(&
w
, 
pEx¥
->
x
.
pLi°
);

4019  
˙t
.
nThis
>0 || c¡.
nOthî
==0;

4020 
	}
}

4026 
	$addAggInfoCﬁumn
(
sqlôe3
 *
db
, 
AggInfo
 *
pInfo
){

4027 
i
;

4028 
pInfo
->
aCﬁ
 = 
	`sqlôe3AºayAŒoˇã
(

4029 
db
,

4030 
pInfo
->
aCﬁ
,

4031 (
pInfo
->
aCﬁ
[0]),

4032 &
pInfo
->
nCﬁumn
,

4033 &
i


4035  
i
;

4036 
	}
}

4042 
	$addAggInfoFunc
(
sqlôe3
 *
db
, 
AggInfo
 *
pInfo
){

4043 
i
;

4044 
pInfo
->
aFunc
 = 
	`sqlôe3AºayAŒoˇã
(

4045 
db
,

4046 
pInfo
->
aFunc
,

4047 (
pInfo
->
aFunc
[0]),

4048 &
pInfo
->
nFunc
,

4049 &
i


4051  
i
;

4052 
	}
}

4059 
	$™ÆyzeAggªg©e
(
WÆkî
 *
pWÆkî
, 
Ex¥
 *
pEx¥
){

4060 
i
;

4061 
NameC⁄ãxt
 *
pNC
 = 
pWÆkî
->
u
.pNC;

4062 
P¨£
 *
pP¨£
 = 
pNC
->pParse;

4063 
SrcLi°
 *
pSrcLi°
 = 
pNC
->pSrcList;

4064 
AggInfo
 *
pAggInfo
 = 
pNC
->pAggInfo;

4066  
pEx¥
->
›
 ){

4067 
TK_AGG_COLUMN
:

4068 
TK_COLUMN
: {

4069 
	`ã°ˇ£
–
pEx¥
->
›
==
TK_AGG_COLUMN
 );

4070 
	`ã°ˇ£
–
pEx¥
->
›
==
TK_COLUMN
 );

4073 if–
	`ALWAYS
(
pSrcLi°
!=0) ){

4074 
SrcLi°_ôem
 *
pIãm
 = 
pSrcLi°
->
a
;

4075 
i
=0; i<
pSrcLi°
->
nSrc
; i++, 
pIãm
++){

4076 
AggInfo_cﬁ
 *
pCﬁ
;

4077 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_TokíO∆y
|
EP_Redu˚d
) );

4078 if–
pEx¥
->
iTabÀ
==
pIãm
->
iCurs‹
 ){

4085 
k
;

4086 
pCﬁ
 = 
pAggInfo
->
aCﬁ
;

4087 
k
=0; k<
pAggInfo
->
nCﬁumn
; k++, 
pCﬁ
++){

4088 if–
pCﬁ
->
iTabÀ
==
pEx¥
->iTable &&

4089 
pCﬁ
->
iCﬁumn
==
pEx¥
->iColumn ){

4093 if–(
k
>=
pAggInfo
->
nCﬁumn
)

4094 && (
k
 = 
	`addAggInfoCﬁumn
(
pP¨£
->
db
, 
pAggInfo
))>=0

4096 
pCﬁ
 = &
pAggInfo
->
aCﬁ
[
k
];

4097 
pCﬁ
->
pTab
 = 
pEx¥
->pTab;

4098 
pCﬁ
->
iTabÀ
 = 
pEx¥
->iTable;

4099 
pCﬁ
->
iCﬁumn
 = 
pEx¥
->iColumn;

4100 
pCﬁ
->
iMem
 = ++
pP¨£
->
nMem
;

4101 
pCﬁ
->
iS‹ãrCﬁumn
 = -1;

4102 
pCﬁ
->
pEx¥
 =ÖExpr;

4103 if–
pAggInfo
->
pGroupBy
 ){

4104 
j
, 
n
;

4105 
Ex¥Li°
 *
pGB
 = 
pAggInfo
->
pGroupBy
;

4106 
Ex¥Li°_ôem
 *
pTîm
 = 
pGB
->
a
;

4107 
n
 = 
pGB
->
nEx¥
;

4108 
j
=0; j<
n
; j++, 
pTîm
++){

4109 
Ex¥
 *
pE
 = 
pTîm
->
pEx¥
;

4110 if–
pE
->
›
==
TK_COLUMN
 &&ÖE->
iTabÀ
==
pEx¥
->iTable &&

4111 
pE
->
iCﬁumn
==
pEx¥
->iColumn ){

4112 
pCﬁ
->
iS‹ãrCﬁumn
 = 
j
;

4117 if–
pCﬁ
->
iS‹ãrCﬁumn
<0 ){

4118 
pCﬁ
->
iS‹ãrCﬁumn
 = 
pAggInfo
->
nS‹tögCﬁumn
++;

4126 
	`Ex¥SëVVAPr›îty
(
pEx¥
, 
EP_NoRedu˚
);

4127 
pEx¥
->
pAggInfo
 =ÖAggInfo;

4128 
pEx¥
->
›
 = 
TK_AGG_COLUMN
;

4129 
pEx¥
->
iAgg
 = (
i16
)
k
;

4134  
WRC_Pru√
;

4136 
TK_AGG_FUNCTION
: {

4137 if–(
pNC
->
ncFœgs
 & 
NC_InAggFunc
)==0

4138 && 
pWÆkî
->
wÆkîDïth
==
pEx¥
->
›2


4143 
AggInfo_func
 *
pIãm
 = 
pAggInfo
->
aFunc
;

4144 
i
=0; i<
pAggInfo
->
nFunc
; i++, 
pIãm
++){

4145 if–
	`sqlôe3Ex¥Com∑ª
(
pIãm
->
pEx¥
,ÖExpr, -1)==0 ){

4149 if–
i
>=
pAggInfo
->
nFunc
 ){

4152 
u8
 
íc
 = 
	`ENC
(
pP¨£
->
db
);

4153 
i
 = 
	`addAggInfoFunc
(
pP¨£
->
db
, 
pAggInfo
);

4154 if–
i
>=0 ){

4155 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_xIsSñe˘
) );

4156 
pIãm
 = &
pAggInfo
->
aFunc
[
i
];

4157 
pIãm
->
pEx¥
 =ÖExpr;

4158 
pIãm
->
iMem
 = ++
pP¨£
->
nMem
;

4159 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_I¡VÆue
) );

4160 
pIãm
->
pFunc
 = 
	`sqlôe3FödFun˘i⁄
(
pP¨£
->
db
,

4161 
pEx¥
->
u
.
zTokí
,

4162 
pEx¥
->
x
.
pLi°
 ?ÖEx¥->x.pLi°->
nEx¥
 : 0, 
íc
, 0);

4163 if–
pEx¥
->
Êags
 & 
EP_Di°ö˘
 ){

4164 
pIãm
->
iDi°ö˘
 = 
pP¨£
->
nTab
++;

4166 
pIãm
->
iDi°ö˘
 = -1;

4172 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_TokíO∆y
|
EP_Redu˚d
) );

4173 
	`Ex¥SëVVAPr›îty
(
pEx¥
, 
EP_NoRedu˚
);

4174 
pEx¥
->
iAgg
 = (
i16
)
i
;

4175 
pEx¥
->
pAggInfo
 =ÖAggInfo;

4176  
WRC_Pru√
;

4178  
WRC_C⁄töue
;

4182  
WRC_C⁄töue
;

4183 
	}
}

4184 
	$™ÆyzeAggªg©esInSñe˘
(
WÆkî
 *
pWÆkî
, 
Sñe˘
 *
pSñe˘
){

4185 
	`UNUSED_PARAMETER
(
pWÆkî
);

4186 
	`UNUSED_PARAMETER
(
pSñe˘
);

4187  
WRC_C⁄töue
;

4188 
	}
}

4199 
	$sqlôe3Ex¥A«lyzeAggªg©es
(
NameC⁄ãxt
 *
pNC
, 
Ex¥
 *
pEx¥
){

4200 
WÆkî
 
w
;

4201 
	`mem£t
(&
w
, 0, (w));

4202 
w
.
xEx¥CÆlback
 = 
™ÆyzeAggªg©e
;

4203 
w
.
xSñe˘CÆlback
 = 
™ÆyzeAggªg©esInSñe˘
;

4204 
w
.
u
.
pNC
 =ÖNC;

4205 
	`as£π
–
pNC
->
pSrcLi°
!=0 );

4206 
	`sqlôe3WÆkEx¥
(&
w
, 
pEx¥
);

4207 
	}
}

4215 
	$sqlôe3Ex¥A«lyzeAggLi°
(
NameC⁄ãxt
 *
pNC
, 
Ex¥Li°
 *
pLi°
){

4216 
Ex¥Li°_ôem
 *
pIãm
;

4217 
i
;

4218 if–
pLi°
 ){

4219 
pIãm
=
pLi°
->
a
, 
i
=0; i<pLi°->
nEx¥
; i++,ÖItem++){

4220 
	`sqlôe3Ex¥A«lyzeAggªg©es
(
pNC
, 
pIãm
->
pEx¥
);

4223 
	}
}

4228 
	$sqlôe3GëTempReg
(
P¨£
 *
pP¨£
){

4229 if–
pP¨£
->
nTempReg
==0 ){

4230  ++
pP¨£
->
nMem
;

4232  
pP¨£
->
aTempReg
[--pP¨£->
nTempReg
];

4233 
	}
}

4243 
	$sqlôe3Rñó£TempReg
(
P¨£
 *
pP¨£
, 
iReg
){

4244 if–
iReg
 && 
pP¨£
->
nTempReg
<
	`AºaySize
’P¨£->
aTempReg
) ){

4245 
i
;

4246 
yCﬁCache
 *
p
;

4247 
i
=0, 
p
=
pP¨£
->
aCﬁCache
; i<
SQLITE_N_COLCACHE
; i++,Ö++){

4248 if–
p
->
iReg
==iReg ){

4249 
p
->
ãmpReg
 = 1;

4253 
pP¨£
->
aTempReg
[pP¨£->
nTempReg
++] = 
iReg
;

4255 
	}
}

4260 
	$sqlôe3GëTempR™ge
(
P¨£
 *
pP¨£
, 
nReg
){

4261 
i
, 
n
;

4262 
i
 = 
pP¨£
->
iR™geReg
;

4263 
n
 = 
pP¨£
->
nR™geReg
;

4264 if–
nReg
<=
n
 ){

4265 
	`as£π
–!
	`u£dAsCﬁumnCache
(
pP¨£
, 
i
, i+
n
-1) );

4266 
pP¨£
->
iR™geReg
 +
nReg
;

4267 
pP¨£
->
nR™geReg
 -
nReg
;

4269 
i
 = 
pP¨£
->
nMem
+1;

4270 
pP¨£
->
nMem
 +
nReg
;

4272  
i
;

4273 
	}
}

4274 
	$sqlôe3Rñó£TempR™ge
(
P¨£
 *
pP¨£
, 
iReg
, 
nReg
){

4275 
	`sqlôe3Ex¥CacheRemove
(
pP¨£
, 
iReg
, 
nReg
);

4276 if–
nReg
>
pP¨£
->
nR™geReg
 ){

4277 
pP¨£
->
nR™geReg
 = 
nReg
;

4278 
pP¨£
->
iR™geReg
 = 
iReg
;

4280 
	}
}

4285 
	$sqlôe3CÀ¨TempRegCache
(
P¨£
 *
pP¨£
){

4286 
pP¨£
->
nTempReg
 = 0;

4287 
pP¨£
->
nR™geReg
 = 0;

4288 
	}
}

4295 #ifde‡
SQLITE_DEBUG


4296 
	$sqlôe3NoTempsInR™ge
(
P¨£
 *
pP¨£
, 
iFú°
, 
iLa°
){

4297 
i
;

4298 if–
pP¨£
->
nR™geReg
>0

4299 && 
pP¨£
->
iR™geReg
+pP¨£->
nR™geReg
<
iLa°


4300 && 
pP¨£
->
iR™geReg
>=
iFú°


4304 
i
=0; i<
pP¨£
->
nTempReg
; i++){

4305 if–
pP¨£
->
aTempReg
[
i
]>=
iFú°
 &&ÖP¨£->aTempReg[i]<=
iLa°
 ){

4310 
	}
}

	@fault.c

27 
	~"sqlôeI¡.h
"

29 #i‚de‡
SQLITE_OMIT_BUILTIN_TEST


34 
BíignMÆlocHooks
 
	tBíignMÆlocHooks
;

35 
SQLITE_WSD
 
	sBíignMÆlocHooks
 {

36 (*
	mxBíignBegö
)();

37 (*
	mxBíignEnd
)();

38 } 
	gsqlôe3Hooks
 = { 0, 0 };

46 #ifde‡
SQLITE_OMIT_WSD


47 
	#wsdHooksInô
 \

48 
BíignMÆlocHooks
 *
x
 = &
	`GLOBAL
(BíignMÆlocHooks,
sqlôe3Hooks
)

	)

49 
	#wsdHooks
 
x
[0]

	)

51 
	#wsdHooksInô


	)

52 
	#wsdHooks
 
sqlôe3Hooks


	)

60 
sqlôe3BíignMÆlocHooks
(

61 (*
xBíignBegö
)(),

62 (*
xBíignEnd
)()

64 
wsdHooksInô
;

65 
wsdHooks
.
xBíignBegö
 = xBenignBegin;

66 
wsdHooks
.
xBíignEnd
 = xBenignEnd;

67 
	}
}

74 
	$sqlôe3BegöBíignMÆloc
(){

75 
wsdHooksInô
;

76 if–
wsdHooks
.
xBíignBegö
 ){

77 
wsdHooks
.
	`xBíignBegö
();

79 
	}
}

80 
	$sqlôe3EndBíignMÆloc
(){

81 
wsdHooksInô
;

82 if–
wsdHooks
.
xBíignEnd
 ){

83 
wsdHooks
.
	`xBíignEnd
();

85 
	}
}

	@fkey.c

14 
	~"sqlôeI¡.h
"

16 #i‚de‡
SQLITE_OMIT_FOREIGN_KEY


17 #i‚de‡
SQLITE_OMIT_TRIGGER


183 
	$sqlôe3FkLoˇãIndex
(

184 
P¨£
 *
pP¨£
,

185 
TabÀ
 *
pP¨ít
,

186 
FKey
 *
pFKey
,

187 
Index
 **
µIdx
,

188 **
∑iCﬁ


190 
Index
 *
pIdx
 = 0;

191 *
aiCﬁ
 = 0;

192 
nCﬁ
 = 
pFKey
->nCol;

193 *
zKey
 = 
pFKey
->
aCﬁ
[0].
zCﬁ
;

196 
	`as£π
–
µIdx
 && *ppIdx==0 );

197 
	`as£π
–!
∑iCﬁ
 || *paiCol==0 );

198 
	`as£π
–
pP¨£
 );

208 if–
nCﬁ
==1 ){

216 if–
pP¨ít
->
iPKey
>=0 ){

217 if–!
zKey
 )  0;

218 if–!
	`sqlôe3SåICmp
(
pP¨ít
->
aCﬁ
[pP¨ít->
iPKey
].
zName
, 
zKey
) )  0;

220 }if–
∑iCﬁ
 ){

221 
	`as£π
–
nCﬁ
>1 );

222 
aiCﬁ
 = (*)
	`sqlôe3DbMÆlocRawNN
(
pP¨£
->
db
, 
nCﬁ
*());

223 if–!
aiCﬁ
 )  1;

224 *
∑iCﬁ
 = 
aiCﬁ
;

227 
pIdx
=
pP¨ít
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

228 if–
pIdx
->
nKeyCﬁ
==
nCﬁ
 && 
	`IsUniqueIndex
(pIdx) ){

233 if–
zKey
==0 ){

237 if–
	`IsPrim¨yKeyIndex
(
pIdx
) ){

238 if–
aiCﬁ
 ){

239 
i
;

240 
i
=0; i<
nCﬁ
; i++Ë
aiCﬁ
[i] = 
pFKey
->
aCﬁ
[i].
iFrom
;

249 
i
, 
j
;

250 
i
=0; i<
nCﬁ
; i++){

251 
i16
 
iCﬁ
 = 
pIdx
->
aiCﬁumn
[
i
];

252 c⁄° *
zDÊtCﬁl
;

253 *
zIdxCﬁ
;

255 if–
iCﬁ
<0 ) ;

260 
zDÊtCﬁl
 = 
pP¨ít
->
aCﬁ
[
iCﬁ
].
zCﬁl
;

261 if–!
zDÊtCﬁl
 ) zDÊtCﬁ»
sqlôe3SåBINARY
;

262 if–
	`sqlôe3SåICmp
(
pIdx
->
azCﬁl
[
i
], 
zDÊtCﬁl
) ) ;

264 
zIdxCﬁ
 = 
pP¨ít
->
aCﬁ
[
iCﬁ
].
zName
;

265 
j
=0; j<
nCﬁ
; j++){

266 if–
	`sqlôe3SåICmp
(
pFKey
->
aCﬁ
[
j
].
zCﬁ
, 
zIdxCﬁ
)==0 ){

267 if–
aiCﬁ
 )áiCﬁ[
i
] = 
pFKey
->
aCﬁ
[
j
].
iFrom
;

271 if–
j
==
nCﬁ
 ) ;

273 if–
i
==
nCﬁ
 ) ;

278 if–!
pIdx
 ){

279 if–!
pP¨£
->
dißbÀTriggîs
 ){

280 
	`sqlôe3Eº‹Msg
(
pP¨£
,

282 
pFKey
->
pFrom
->
zName
,ÖFKey->
zTo
);

284 
	`sqlôe3DbFªe
(
pP¨£
->
db
, 
aiCﬁ
);

288 *
µIdx
 = 
pIdx
;

290 
	}
}

318 
	$fkLookupP¨ít
(

319 
P¨£
 *
pP¨£
,

320 
iDb
,

321 
TabÀ
 *
pTab
,

322 
Index
 *
pIdx
,

323 
FKey
 *
pFKey
,

324 *
aiCﬁ
,

325 
ªgD©a
,

326 
nIn¸
,

327 
isIgn‹e


329 
i
;

330 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

331 
iCur
 = 
pP¨£
->
nTab
 - 1;

332 
iOk
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

341 if–
nIn¸
<0 ){

342 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_FkIfZîo
, 
pFKey
->
isDe„ºed
, 
iOk
);

343 
	`VdbeCovîage
(
v
);

345 
i
=0; i<
pFKey
->
nCﬁ
; i++){

346 
iReg
 = 
aiCﬁ
[
i
] + 
ªgD©a
 + 1;

347 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IsNuŒ
, 
iReg
, 
iOk
); 
	`VdbeCovîage
(v);

350 if–
isIgn‹e
==0 ){

351 if–
pIdx
==0 ){

354 
iMu°BeI¡
;

355 
ªgTemp
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

362 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_SC›y
, 
aiCﬁ
[0]+1+
ªgD©a
, 
ªgTemp
);

363 
iMu°BeI¡
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Mu°BeI¡
, 
ªgTemp
, 0);

364 
	`VdbeCovîage
(
v
);

370 if–
pTab
==
pFKey
->
pFrom
 && 
nIn¸
==1 ){

371 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Eq
, 
ªgD©a
, 
iOk
, 
ªgTemp
); 
	`VdbeCovîage
(v);

372 
	`sqlôe3VdbeCh™geP5
(
v
, 
SQLITE_NOTNULL
);

375 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 
iCur
, 
iDb
, 
pTab
, 
OP_O≥nRód
);

376 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_NŸExi°s
, 
iCur
, 0, 
ªgTemp
); 
	`VdbeCovîage
(v);

377 
	`sqlôe3VdbeGŸo
(
v
, 
iOk
);

378 
	`sqlôe3VdbeJumpHîe
(
v
, 
	`sqlôe3VdbeCuºítAddr
(v)-2);

379 
	`sqlôe3VdbeJumpHîe
(
v
, 
iMu°BeI¡
);

380 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgTemp
);

382 
nCﬁ
 = 
pFKey
->nCol;

383 
ªgTemp
 = 
	`sqlôe3GëTempR™ge
(
pP¨£
, 
nCﬁ
);

384 
ªgRec
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

386 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_O≥nRód
, 
iCur
, 
pIdx
->
äum
, 
iDb
);

387 
	`sqlôe3VdbeSëP4KeyInfo
(
pP¨£
, 
pIdx
);

388 
i
=0; i<
nCﬁ
; i++){

389 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_C›y
, 
aiCﬁ
[
i
]+1+
ªgD©a
, 
ªgTemp
+i);

402 if–
pTab
==
pFKey
->
pFrom
 && 
nIn¸
==1 ){

403 
iJump
 = 
	`sqlôe3VdbeCuºítAddr
(
v
Ë+ 
nCﬁ
 + 1;

404 
i
=0; i<
nCﬁ
; i++){

405 
iChûd
 = 
aiCﬁ
[
i
]+1+
ªgD©a
;

406 
iP¨ít
 = 
pIdx
->
aiCﬁumn
[
i
]+1+
ªgD©a
;

407 
	`as£π
–
pIdx
->
aiCﬁumn
[
i
]>=0 );

408 
	`as£π
–
aiCﬁ
[
i
]!=
pTab
->
iPKey
 );

409 if–
pIdx
->
aiCﬁumn
[
i
]==
pTab
->
iPKey
 ){

411 
iP¨ít
 = 
ªgD©a
;

413 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Ne
, 
iChûd
, 
iJump
, 
iP¨ít
); 
	`VdbeCovîage
(v);

414 
	`sqlôe3VdbeCh™geP5
(
v
, 
SQLITE_JUMPIFNULL
);

416 
	`sqlôe3VdbeGŸo
(
v
, 
iOk
);

419 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_MakeRec‹d
, 
ªgTemp
, 
nCﬁ
, 
ªgRec
,

420 
	`sqlôe3IndexAfföôySå
(
pP¨£
->
db
,
pIdx
), 
nCﬁ
);

421 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_Found
, 
iCur
, 
iOk
, 
ªgRec
, 0); 
	`VdbeCovîage
(v);

423 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgRec
);

424 
	`sqlôe3Rñó£TempR™ge
(
pP¨£
, 
ªgTemp
, 
nCﬁ
);

428 if–!
pFKey
->
isDe„ºed
 && !(
pP¨£
->
db
->
Êags
 & 
SQLITE_De„rFKs
)

429 && !
pP¨£
->
pT›Àvñ


430 && !
pP¨£
->
isMu…iWrôe


436 
	`as£π
–
nIn¸
==1 );

437 
	`sqlôe3HÆtC⁄°øöt
(
pP¨£
, 
SQLITE_CONSTRAINT_FOREIGNKEY
,

438 
OE_Ab‹t
, 0, 
P4_STATIC
, 
P5_C⁄°øötFK
);

440 if–
nIn¸
>0 && 
pFKey
->
isDe„ºed
==0 ){

441 
	`sqlôe3MayAb‹t
(
pP¨£
);

443 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_FkCou¡î
, 
pFKey
->
isDe„ºed
, 
nIn¸
);

446 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iOk
);

447 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Clo£
, 
iCur
);

448 
	}
}

459 
Ex¥
 *
	$ex¥TabÀRegi°î
(

460 
P¨£
 *
pP¨£
,

461 
TabÀ
 *
pTab
,

462 
ªgBa£
,

463 
i16
 
iCﬁ


465 
Ex¥
 *
pEx¥
;

466 
Cﬁumn
 *
pCﬁ
;

467 c⁄° *
zCﬁl
;

468 
sqlôe3
 *
db
 = 
pP¨£
->db;

470 
pEx¥
 = 
	`sqlôe3Ex¥
(
db
, 
TK_REGISTER
, 0);

471 if–
pEx¥
 ){

472 if–
iCﬁ
>=0 && iCﬁ!=
pTab
->
iPKey
 ){

473 
pCﬁ
 = &
pTab
->
aCﬁ
[
iCﬁ
];

474 
pEx¥
->
iTabÀ
 = 
ªgBa£
 + 
iCﬁ
 + 1;

475 
pEx¥
->
afföôy
 = 
pCﬁ
->affinity;

476 
zCﬁl
 = 
pCﬁ
->zColl;

477 if–
zCﬁl
==0 ) zCﬁ»
db
->
pDÊtCﬁl
->
zName
;

478 
pEx¥
 = 
	`sqlôe3Ex¥AddCﬁœãSåög
(
pP¨£
,ÖEx¥, 
zCﬁl
);

480 
pEx¥
->
iTabÀ
 = 
ªgBa£
;

481 
pEx¥
->
afföôy
 = 
SQLITE_AFF_INTEGER
;

484  
pEx¥
;

485 
	}
}

491 
Ex¥
 *
	$ex¥TabÀCﬁumn
(

492 
sqlôe3
 *
db
,

493 
TabÀ
 *
pTab
,

494 
iCurs‹
,

495 
i16
 
iCﬁ


497 
Ex¥
 *
pEx¥
 = 
	`sqlôe3Ex¥
(
db
, 
TK_COLUMN
, 0);

498 if–
pEx¥
 ){

499 
pEx¥
->
pTab
 =ÖTab;

500 
pEx¥
->
iTabÀ
 = 
iCurs‹
;

501 
pEx¥
->
iCﬁumn
 = 
iCﬁ
;

503  
pEx¥
;

504 
	}
}

538 
	$fkSˇnChûdªn
(

539 
P¨£
 *
pP¨£
,

540 
SrcLi°
 *
pSrc
,

541 
TabÀ
 *
pTab
,

542 
Index
 *
pIdx
,

543 
FKey
 *
pFKey
,

544 *
aiCﬁ
,

545 
ªgD©a
,

546 
nIn¸


548 
sqlôe3
 *
db
 = 
pP¨£
->db;

549 
i
;

550 
Ex¥
 *
pWhîe
 = 0;

551 
NameC⁄ãxt
 
sNameC⁄ãxt
;

552 
WhîeInfo
 *
pWInfo
;

553 
iFkIfZîo
 = 0;

554 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

556 
	`as£π
–
pIdx
==0 ||ÖIdx->
pTabÀ
==
pTab
 );

557 
	`as£π
–
pIdx
==0 ||ÖIdx->
nKeyCﬁ
==
pFKey
->
nCﬁ
 );

558 
	`as£π
–
pIdx
!=0 || 
pFKey
->
nCﬁ
==1 );

559 
	`as£π
–
pIdx
!=0 || 
	`HasRowid
(
pTab
) );

561 if–
nIn¸
<0 ){

562 
iFkIfZîo
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_FkIfZîo
, 
pFKey
->
isDe„ºed
, 0);

563 
	`VdbeCovîage
(
v
);

574 
i
=0; i<
pFKey
->
nCﬁ
; i++){

575 
Ex¥
 *
pLe·
;

576 
Ex¥
 *
pRight
;

577 
Ex¥
 *
pEq
;

578 
i16
 
iCﬁ
;

579 c⁄° *
zCﬁ
;

581 
iCﬁ
 = 
pIdx
 ?ÖIdx->
aiCﬁumn
[
i
] : -1;

582 
pLe·
 = 
	`ex¥TabÀRegi°î
(
pP¨£
, 
pTab
, 
ªgD©a
, 
iCﬁ
);

583 
iCﬁ
 = 
aiCﬁ
 ?áiCﬁ[
i
] : 
pFKey
->
aCﬁ
[0].
iFrom
;

584 
	`as£π
–
iCﬁ
>=0 );

585 
zCﬁ
 = 
pFKey
->
pFrom
->
aCﬁ
[
iCﬁ
].
zName
;

586 
pRight
 = 
	`sqlôe3Ex¥
(
db
, 
TK_ID
, 
zCﬁ
);

587 
pEq
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_EQ
, 
pLe·
, 
pRight
, 0);

588 
pWhîe
 = 
	`sqlôe3Ex¥And
(
db
,ÖWhîe, 
pEq
);

602 if–
pTab
==
pFKey
->
pFrom
 && 
nIn¸
>0 ){

603 
Ex¥
 *
pNe
;

604 
Ex¥
 *
pLe·
;

605 
Ex¥
 *
pRight
;

606 if–
	`HasRowid
(
pTab
) ){

607 
pLe·
 = 
	`ex¥TabÀRegi°î
(
pP¨£
, 
pTab
, 
ªgD©a
, -1);

608 
pRight
 = 
	`ex¥TabÀCﬁumn
(
db
, 
pTab
, 
pSrc
->
a
[0].
iCurs‹
, -1);

609 
pNe
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_NE
, 
pLe·
, 
pRight
, 0);

611 
Ex¥
 *
pEq
, *
pAŒ
 = 0;

612 
Index
 *
pPk
 = 
	`sqlôe3Prim¨yKeyIndex
(
pTab
);

613 
	`as£π
–
pIdx
!=0 );

614 
i
=0; i<
pPk
->
nKeyCﬁ
; i++){

615 
i16
 
iCﬁ
 = 
pIdx
->
aiCﬁumn
[
i
];

616 
	`as£π
–
iCﬁ
>=0 );

617 
pLe·
 = 
	`ex¥TabÀRegi°î
(
pP¨£
, 
pTab
, 
ªgD©a
, 
iCﬁ
);

618 
pRight
 = 
	`ex¥TabÀCﬁumn
(
db
, 
pTab
, 
pSrc
->
a
[0].
iCurs‹
, 
iCﬁ
);

619 
pEq
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_EQ
, 
pLe·
, 
pRight
, 0);

620 
pAŒ
 = 
	`sqlôe3Ex¥And
(
db
,ÖAŒ, 
pEq
);

622 
pNe
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_NOT
, 
pAŒ
, 0, 0);

624 
pWhîe
 = 
	`sqlôe3Ex¥And
(
db
,ÖWhîe, 
pNe
);

628 
	`mem£t
(&
sNameC⁄ãxt
, 0, (
NameC⁄ãxt
));

629 
sNameC⁄ãxt
.
pSrcLi°
 = 
pSrc
;

630 
sNameC⁄ãxt
.
pP¨£
 =ÖParse;

631 
	`sqlôe3ResﬁveEx¥Names
(&
sNameC⁄ãxt
, 
pWhîe
);

636 
pWInfo
 = 
	`sqlôe3WhîeBegö
(
pP¨£
, 
pSrc
, 
pWhîe
, 0, 0, 0, 0);

637 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_FkCou¡î
, 
pFKey
->
isDe„ºed
, 
nIn¸
);

638 if–
pWInfo
 ){

639 
	`sqlôe3WhîeEnd
(
pWInfo
);

643 
	`sqlôe3Ex¥Dñëe
(
db
, 
pWhîe
);

644 if–
iFkIfZîo
 ){

645 
	`sqlôe3VdbeJumpHîe
(
v
, 
iFkIfZîo
);

647 
	}
}

663 
FKey
 *
	$sqlôe3FkRe„ªn˚s
(
TabÀ
 *
pTab
){

664  (
FKey
 *)
	`sqlôe3HashFöd
(&
pTab
->
pSchema
->
fkeyHash
,ÖTab->
zName
);

665 
	}
}

675 
	$fkTriggîDñëe
(
sqlôe3
 *
dbMem
, 
Triggî
 *
p
){

676 if–
p
 ){

677 
TriggîSãp
 *
pSãp
 = 
p
->
°ï_li°
;

678 
	`sqlôe3Ex¥Dñëe
(
dbMem
, 
pSãp
->
pWhîe
);

679 
	`sqlôe3Ex¥Li°Dñëe
(
dbMem
, 
pSãp
->
pEx¥Li°
);

680 
	`sqlôe3Sñe˘Dñëe
(
dbMem
, 
pSãp
->
pSñe˘
);

681 
	`sqlôe3Ex¥Dñëe
(
dbMem
, 
p
->
pWhí
);

682 
	`sqlôe3DbFªe
(
dbMem
, 
p
);

684 
	}
}

703 
	$sqlôe3FkDr›TabÀ
(
P¨£
 *
pP¨£
, 
SrcLi°
 *
pName
, 
TabÀ
 *
pTab
){

704 
sqlôe3
 *
db
 = 
pP¨£
->db;

705 if–(
db
->
Êags
&
SQLITE_F‹eignKeys
Ë&& !
	`IsVútuÆ
(
pTab
Ë&& !pTab->
pSñe˘
 ){

706 
iSkù
 = 0;

707 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

709 
	`as£π
–
v
 );

710 if–
	`sqlôe3FkRe„ªn˚s
(
pTab
)==0 ){

716 
FKey
 *
p
;

717 
p
=
pTab
->
pFKey
;Ö;Öı->
pNextFrom
){

718 if–
p
->
isDe„ºed
 || (
db
->
Êags
 & 
SQLITE_De„rFKs
) ) ;

720 if–!
p
 ) ;

721 
iSkù
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

722 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_FkIfZîo
, 1, 
iSkù
); 
	`VdbeCovîage
(v);

725 
pP¨£
->
dißbÀTriggîs
 = 1;

726 
	`sqlôe3DñëeFrom
(
pP¨£
, 
	`sqlôe3SrcLi°Dup
(
db
, 
pName
, 0), 0);

727 
pP¨£
->
dißbÀTriggîs
 = 0;

738 if–(
db
->
Êags
 & 
SQLITE_De„rFKs
)==0 ){

739 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_FkIfZîo
, 0, 
	`sqlôe3VdbeCuºítAddr
(v)+2);

740 
	`VdbeCovîage
(
v
);

741 
	`sqlôe3HÆtC⁄°øöt
(
pP¨£
, 
SQLITE_CONSTRAINT_FOREIGNKEY
,

742 
OE_Ab‹t
, 0, 
P4_STATIC
, 
P5_C⁄°øötFK
);

745 if–
iSkù
 ){

746 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iSkù
);

749 
	}
}

764 
	$fkChûdIsModifõd
(

765 
TabÀ
 *
pTab
,

766 
FKey
 *
p
,

767 *
aCh™ge
,

768 
bChngRowid


770 
i
;

771 
i
=0; i<
p
->
nCﬁ
; i++){

772 
iChûdKey
 = 
p
->
aCﬁ
[
i
].
iFrom
;

773 if–
aCh™ge
[
iChûdKey
]>=0 )  1;

774 if–
iChûdKey
==
pTab
->
iPKey
 && 
bChngRowid
 )  1;

777 
	}
}

791 
	$fkP¨ítIsModifõd
(

792 
TabÀ
 *
pTab
,

793 
FKey
 *
p
,

794 *
aCh™ge
,

795 
bChngRowid


797 
i
;

798 
i
=0; i<
p
->
nCﬁ
; i++){

799 *
zKey
 = 
p
->
aCﬁ
[
i
].
zCﬁ
;

800 
iKey
;

801 
iKey
=0; iKey<
pTab
->
nCﬁ
; iKey++){

802 if–
aCh™ge
[
iKey
]>=0 || (iKey==
pTab
->
iPKey
 && 
bChngRowid
) ){

803 
Cﬁumn
 *
pCﬁ
 = &
pTab
->
aCﬁ
[
iKey
];

804 if–
zKey
 ){

805 if–0==
	`sqlôe3SåICmp
(
pCﬁ
->
zName
, 
zKey
) )  1;

806 }if–
pCﬁ
->
cﬁFœgs
 & 
COLFLAG_PRIMKEY
 ){

813 
	}
}

820 
	$isSëNuŒA˘i⁄
(
P¨£
 *
pP¨£
, 
FKey
 *
pFKey
){

821 
P¨£
 *
pT›
 = 
	`sqlôe3P¨£T›Àvñ
(
pP¨£
);

822 if–
pT›
->
pTriggîPrg
 ){

823 
Triggî
 *
p
 = 
pT›
->
pTriggîPrg
->
pTriggî
;

824 if–(
p
==
pFKey
->
≠Triggî
[0] &&ÖFKey->
aA˘i⁄
[0]==
OE_SëNuŒ
)

825 || (
p
==
pFKey
->
≠Triggî
[1] &&ÖFKey->
aA˘i⁄
[1]==
OE_SëNuŒ
)

831 
	}
}

853 
	$sqlôe3FkCheck
(

854 
P¨£
 *
pP¨£
,

855 
TabÀ
 *
pTab
,

856 
ªgOld
,

857 
ªgNew
,

858 *
aCh™ge
,

859 
bChngRowid


861 
sqlôe3
 *
db
 = 
pP¨£
->db;

862 
FKey
 *
pFKey
;

863 
iDb
;

864 c⁄° *
zDb
;

865 
isIgn‹eEº‹s
 = 
pP¨£
->
dißbÀTriggîs
;

868 
	`as£π
–(
ªgOld
==0)!=(
ªgNew
==0) );

871 if–(
db
->
Êags
&
SQLITE_F‹eignKeys
)==0 ) ;

873 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pTab
->
pSchema
);

874 
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

878 
pFKey
=
pTab
->pFKey;ÖFKey;ÖFKeyıFKey->
pNextFrom
){

879 
TabÀ
 *
pTo
;

880 
Index
 *
pIdx
 = 0;

881 *
aiFªe
 = 0;

882 *
aiCﬁ
;

883 
iCﬁ
;

884 
i
;

885 
bIgn‹e
 = 0;

887 if–
aCh™ge


888 && 
	`sqlôe3_°ricmp
(
pTab
->
zName
, 
pFKey
->
zTo
)!=0

889 && 
	`fkChûdIsModifõd
(
pTab
, 
pFKey
, 
aCh™ge
, 
bChngRowid
)==0

898 if–
pP¨£
->
dißbÀTriggîs
 ){

899 
pTo
 = 
	`sqlôe3FödTabÀ
(
db
, 
pFKey
->
zTo
, 
zDb
);

901 
pTo
 = 
	`sqlôe3LoˇãTabÀ
(
pP¨£
, 0, 
pFKey
->
zTo
, 
zDb
);

903 if–!
pTo
 || 
	`sqlôe3FkLoˇãIndex
(
pP¨£
,ÖTo, 
pFKey
, &
pIdx
, &
aiFªe
) ){

904 
	`as£π
–
isIgn‹eEº‹s
==0 || (
ªgOld
!=0 && 
ªgNew
==0) );

905 if–!
isIgn‹eEº‹s
 || 
db
->
mÆlocFaûed
 ) ;

906 if–
pTo
==0 ){

914 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

915 
iJump
 = 
	`sqlôe3VdbeCuºítAddr
(
v
Ë+ 
pFKey
->
nCﬁ
 + 1;

916 
i
=0; i<
pFKey
->
nCﬁ
; i++){

917 
iReg
 = 
pFKey
->
aCﬁ
[
i
].
iFrom
 + 
ªgOld
 + 1;

918 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IsNuŒ
, 
iReg
, 
iJump
); 
	`VdbeCovîage
(v);

920 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_FkCou¡î
, 
pFKey
->
isDe„ºed
, -1);

924 
	`as£π
–
pFKey
->
nCﬁ
==1 || (
aiFªe
 && 
pIdx
) );

926 if–
aiFªe
 ){

927 
aiCﬁ
 = 
aiFªe
;

929 
iCﬁ
 = 
pFKey
->
aCﬁ
[0].
iFrom
;

930 
aiCﬁ
 = &
iCﬁ
;

932 
i
=0; i<
pFKey
->
nCﬁ
; i++){

933 if–
aiCﬁ
[
i
]==
pTab
->
iPKey
 ){

934 
aiCﬁ
[
i
] = -1;

936 
	`as£π
–
pIdx
==0 ||ÖIdx->
aiCﬁumn
[
i
]>=0 );

937 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


941 if–
db
->
xAuth
 ){

942 
rˇuth
;

943 *
zCﬁ
 = 
pTo
->
aCﬁ
[
pIdx
 ?ÖIdx->
aiCﬁumn
[
i
] :ÖTo->
iPKey
].
zName
;

944 
rˇuth
 = 
	`sqlôe3AuthRódCﬁ
(
pP¨£
, 
pTo
->
zName
, 
zCﬁ
, 
iDb
);

945 
bIgn‹e
 = (
rˇuth
==
SQLITE_IGNORE
);

953 
	`sqlôe3TabÀLock
(
pP¨£
, 
iDb
, 
pTo
->
äum
, 0,ÖTo->
zName
);

954 
pP¨£
->
nTab
++;

956 if–
ªgOld
!=0 ){

960 
	`fkLookupP¨ít
(
pP¨£
, 
iDb
, 
pTo
, 
pIdx
, 
pFKey
, 
aiCﬁ
, 
ªgOld
, -1, 
bIgn‹e
);

962 if–
ªgNew
!=0 && !
	`isSëNuŒA˘i⁄
(
pP¨£
, 
pFKey
) ){

971 
	`fkLookupP¨ít
(
pP¨£
, 
iDb
, 
pTo
, 
pIdx
, 
pFKey
, 
aiCﬁ
, 
ªgNew
, +1, 
bIgn‹e
);

974 
	`sqlôe3DbFªe
(
db
, 
aiFªe
);

979 
pFKey
 = 
	`sqlôe3FkRe„ªn˚s
(
pTab
);ÖFKey;ÖFKeyıFKey->
pNextTo
){

980 
Index
 *
pIdx
 = 0;

981 
SrcLi°
 *
pSrc
;

982 *
aiCﬁ
 = 0;

984 if–
aCh™ge
 && 
	`fkP¨ítIsModifõd
(
pTab
, 
pFKey
,áCh™ge, 
bChngRowid
)==0 ){

988 if–!
pFKey
->
isDe„ºed
 && !(
db
->
Êags
 & 
SQLITE_De„rFKs
)

989 && !
pP¨£
->
pT›Àvñ
 && !pP¨£->
isMu…iWrôe


991 
	`as£π
–
ªgOld
==0 && 
ªgNew
!=0 );

997 if–
	`sqlôe3FkLoˇãIndex
(
pP¨£
, 
pTab
, 
pFKey
, &
pIdx
, &
aiCﬁ
) ){

998 if–!
isIgn‹eEº‹s
 || 
db
->
mÆlocFaûed
 ) ;

1001 
	`as£π
–
aiCﬁ
 || 
pFKey
->
nCﬁ
==1 );

1005 
pSrc
 = 
	`sqlôe3SrcLi°Aµíd
(
db
, 0, 0, 0);

1006 if–
pSrc
 ){

1007 
SrcLi°_ôem
 *
pIãm
 = 
pSrc
->
a
;

1008 
pIãm
->
pTab
 = 
pFKey
->
pFrom
;

1009 
pIãm
->
zName
 = 
pFKey
->
pFrom
->zName;

1010 
pIãm
->
pTab
->
nRef
++;

1011 
pIãm
->
iCurs‹
 = 
pP¨£
->
nTab
++;

1013 if–
ªgNew
!=0 ){

1014 
	`fkSˇnChûdªn
(
pP¨£
, 
pSrc
, 
pTab
, 
pIdx
, 
pFKey
, 
aiCﬁ
, 
ªgNew
, -1);

1016 if–
ªgOld
!=0 ){

1017 
eA˘i⁄
 = 
pFKey
->
aA˘i⁄
[
aCh™ge
!=0];

1018 
	`fkSˇnChûdªn
(
pP¨£
, 
pSrc
, 
pTab
, 
pIdx
, 
pFKey
, 
aiCﬁ
, 
ªgOld
, 1);

1036 if–!
pFKey
->
isDe„ºed
 && 
eA˘i⁄
!=
OE_Casˇde
 &&ÉA˘i⁄!=
OE_SëNuŒ
 ){

1037 
	`sqlôe3MayAb‹t
(
pP¨£
);

1040 
pIãm
->
zName
 = 0;

1041 
	`sqlôe3SrcLi°Dñëe
(
db
, 
pSrc
);

1043 
	`sqlôe3DbFªe
(
db
, 
aiCﬁ
);

1045 
	}
}

1047 
	#COLUMN_MASK
(
x
Ë(((x)>31Ë? 0xfffffff‡: ((
u32
)1<<(x)))

	)

1053 
u32
 
	$sqlôe3FkOldmask
(

1054 
P¨£
 *
pP¨£
,

1055 
TabÀ
 *
pTab


1057 
u32
 
mask
 = 0;

1058 if–
pP¨£
->
db
->
Êags
&
SQLITE_F‹eignKeys
 ){

1059 
FKey
 *
p
;

1060 
i
;

1061 
p
=
pTab
->
pFKey
;Ö;Öı->
pNextFrom
){

1062 
i
=0; i<
p
->
nCﬁ
; i++Ë
mask
 |
	`COLUMN_MASK
’->
aCﬁ
[i].
iFrom
);

1064 
p
=
	`sqlôe3FkRe„ªn˚s
(
pTab
);Ö;Öı->
pNextTo
){

1065 
Index
 *
pIdx
 = 0;

1066 
	`sqlôe3FkLoˇãIndex
(
pP¨£
, 
pTab
, 
p
, &
pIdx
, 0);

1067 if–
pIdx
 ){

1068 
i
=0; i<
pIdx
->
nKeyCﬁ
; i++){

1069 
	`as£π
–
pIdx
->
aiCﬁumn
[
i
]>=0 );

1070 
mask
 |
	`COLUMN_MASK
(
pIdx
->
aiCﬁumn
[
i
]);

1075  
mask
;

1076 
	}
}

1093 
	$sqlôe3FkRequúed
(

1094 
P¨£
 *
pP¨£
,

1095 
TabÀ
 *
pTab
,

1096 *
aCh™ge
,

1097 
chngRowid


1099 if–
pP¨£
->
db
->
Êags
&
SQLITE_F‹eignKeys
 ){

1100 if–!
aCh™ge
 ){

1104  (
	`sqlôe3FkRe„ªn˚s
(
pTab
Ë||ÖTab->
pFKey
);

1108 
FKey
 *
p
;

1111 
p
=
pTab
->
pFKey
;Ö;Öı->
pNextFrom
){

1112 if–
	`fkChûdIsModifõd
(
pTab
, 
p
, 
aCh™ge
, 
chngRowid
) )  1;

1116 
p
=
	`sqlôe3FkRe„ªn˚s
(
pTab
);Ö;Öı->
pNextTo
){

1117 if–
	`fkP¨ítIsModifõd
(
pTab
, 
p
, 
aCh™ge
, 
chngRowid
) )  1;

1122 
	}
}

1153 
Triggî
 *
	$fkA˘i⁄Triggî
(

1154 
P¨£
 *
pP¨£
,

1155 
TabÀ
 *
pTab
,

1156 
FKey
 *
pFKey
,

1157 
Ex¥Li°
 *
pCh™ges


1159 
sqlôe3
 *
db
 = 
pP¨£
->db;

1160 
a˘i⁄
;

1161 
Triggî
 *
pTriggî
;

1162 
iA˘i⁄
 = (
pCh™ges
!=0);

1164 
a˘i⁄
 = 
pFKey
->
aA˘i⁄
[
iA˘i⁄
];

1165 if–
a˘i⁄
==
OE_Re°ri˘
 && (
db
->
Êags
 & 
SQLITE_De„rFKs
) ){

1168 
pTriggî
 = 
pFKey
->
≠Triggî
[
iA˘i⁄
];

1170 if–
a˘i⁄
!=
OE_N⁄e
 && !
pTriggî
 ){

1171 c⁄° *
zFrom
;

1172 
nFrom
;

1173 
Index
 *
pIdx
 = 0;

1174 *
aiCﬁ
 = 0;

1175 
TriggîSãp
 *
pSãp
 = 0;

1176 
Ex¥
 *
pWhîe
 = 0;

1177 
Ex¥Li°
 *
pLi°
 = 0;

1178 
Sñe˘
 *
pSñe˘
 = 0;

1179 
i
;

1180 
Ex¥
 *
pWhí
 = 0;

1182 if–
	`sqlôe3FkLoˇãIndex
(
pP¨£
, 
pTab
, 
pFKey
, &
pIdx
, &
aiCﬁ
) )  0;

1183 
	`as£π
–
aiCﬁ
 || 
pFKey
->
nCﬁ
==1 );

1185 
i
=0; i<
pFKey
->
nCﬁ
; i++){

1186 
Tokí
 
tOld
 = { "old", 3 };

1187 
Tokí
 
tNew
 = { "new", 3 };

1188 
Tokí
 
tFromCﬁ
;

1189 
Tokí
 
tToCﬁ
;

1190 
iFromCﬁ
;

1191 
Ex¥
 *
pEq
;

1193 
iFromCﬁ
 = 
aiCﬁ
 ?áiCﬁ[
i
] : 
pFKey
->
aCﬁ
[0].
iFrom
;

1194 
	`as£π
–
iFromCﬁ
>=0 );

1195 
	`as£π
–
pIdx
!=0 || (
pTab
->
iPKey
>=0 &&ÖTab->iPKey<pTab->
nCﬁ
) );

1196 
	`as£π
–
pIdx
==0 ||ÖIdx->
aiCﬁumn
[
i
]>=0 );

1197 
	`sqlôe3TokíInô
(&
tToCﬁ
,

1198 
pTab
->
aCﬁ
[
pIdx
 ?ÖIdx->
aiCﬁumn
[
i
] :ÖTab->
iPKey
].
zName
);

1199 
	`sqlôe3TokíInô
(&
tFromCﬁ
, 
pFKey
->
pFrom
->
aCﬁ
[
iFromCﬁ
].
zName
);

1205 
pEq
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_EQ
,

1206 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_DOT
,

1207 
	`sqlôe3Ex¥AŒoc
(
db
, 
TK_ID
, &
tOld
, 0),

1208 
	`sqlôe3Ex¥AŒoc
(
db
, 
TK_ID
, &
tToCﬁ
, 0)

1210 
	`sqlôe3Ex¥AŒoc
(
db
, 
TK_ID
, &
tFromCﬁ
, 0)

1212 
pWhîe
 = 
	`sqlôe3Ex¥And
(
db
,ÖWhîe, 
pEq
);

1219 if–
pCh™ges
 ){

1220 
pEq
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_IS
,

1221 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_DOT
,

1222 
	`sqlôe3Ex¥AŒoc
(
db
, 
TK_ID
, &
tOld
, 0),

1223 
	`sqlôe3Ex¥AŒoc
(
db
, 
TK_ID
, &
tToCﬁ
, 0),

1225 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_DOT
,

1226 
	`sqlôe3Ex¥AŒoc
(
db
, 
TK_ID
, &
tNew
, 0),

1227 
	`sqlôe3Ex¥AŒoc
(
db
, 
TK_ID
, &
tToCﬁ
, 0),

1230 
pWhí
 = 
	`sqlôe3Ex¥And
(
db
,ÖWhí, 
pEq
);

1233 if–
a˘i⁄
!=
OE_Re°ri˘
 && (a˘i⁄!=
OE_Casˇde
 || 
pCh™ges
) ){

1234 
Ex¥
 *
pNew
;

1235 if–
a˘i⁄
==
OE_Casˇde
 ){

1236 
pNew
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_DOT
,

1237 
	`sqlôe3Ex¥AŒoc
(
db
, 
TK_ID
, &
tNew
, 0),

1238 
	`sqlôe3Ex¥AŒoc
(
db
, 
TK_ID
, &
tToCﬁ
, 0)

1240 }if–
a˘i⁄
==
OE_SëDÊt
 ){

1241 
Ex¥
 *
pDÊt
 = 
pFKey
->
pFrom
->
aCﬁ
[
iFromCﬁ
].pDflt;

1242 if–
pDÊt
 ){

1243 
pNew
 = 
	`sqlôe3Ex¥Dup
(
db
, 
pDÊt
, 0);

1245 
pNew
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_NULL
, 0, 0, 0);

1248 
pNew
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_NULL
, 0, 0, 0);

1250 
pLi°
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,ÖLi°, 
pNew
);

1251 
	`sqlôe3Ex¥Li°SëName
(
pP¨£
, 
pLi°
, &
tFromCﬁ
, 0);

1254 
	`sqlôe3DbFªe
(
db
, 
aiCﬁ
);

1256 
zFrom
 = 
pFKey
->
pFrom
->
zName
;

1257 
nFrom
 = 
	`sqlôe3SåÀn30
(
zFrom
);

1259 if–
a˘i⁄
==
OE_Re°ri˘
 ){

1260 
Tokí
 
tFrom
;

1261 
Ex¥
 *
pRai£
;

1263 
tFrom
.
z
 = 
zFrom
;

1264 
tFrom
.
n
 = 
nFrom
;

1265 
pRai£
 = 
	`sqlôe3Ex¥
(
db
, 
TK_RAISE
, "FOREIGN KEY constraint failed");

1266 if–
pRai£
 ){

1267 
pRai£
->
afföôy
 = 
OE_Ab‹t
;

1269 
pSñe˘
 = 
	`sqlôe3Sñe˘New
(
pP¨£
,

1270 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
, 0, 
pRai£
),

1271 
	`sqlôe3SrcLi°Aµíd
(
db
, 0, &
tFrom
, 0),

1272 
pWhîe
,

1275 
pWhîe
 = 0;

1279 
db
->
lookaside
.
bDißbÀ
++;

1281 
pTriggî
 = (
Triggî
 *)
	`sqlôe3DbMÆlocZîo
(
db
,

1282 (
Triggî
) +

1283 (
TriggîSãp
) +

1284 
nFrom
 + 1

1286 if–
pTriggî
 ){

1287 
pSãp
 = 
pTriggî
->
°ï_li°
 = (
TriggîSãp
 *)&pTrigger[1];

1288 
pSãp
->
zT¨gë
 = (*)&pStep[1];

1289 
	`mem˝y
((*)
pSãp
->
zT¨gë
, 
zFrom
, 
nFrom
);

1291 
pSãp
->
pWhîe
 = 
	`sqlôe3Ex¥Dup
(
db
,ÖWhîe, 
EXPRDUP_REDUCE
);

1292 
pSãp
->
pEx¥Li°
 = 
	`sqlôe3Ex¥Li°Dup
(
db
, 
pLi°
, 
EXPRDUP_REDUCE
);

1293 
pSãp
->
pSñe˘
 = 
	`sqlôe3Sñe˘Dup
(
db
,ÖSñe˘, 
EXPRDUP_REDUCE
);

1294 if–
pWhí
 ){

1295 
pWhí
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_NOT
,ÖWhen, 0, 0);

1296 
pTriggî
->
pWhí
 = 
	`sqlôe3Ex¥Dup
(
db
,ÖWhí, 
EXPRDUP_REDUCE
);

1301 
db
->
lookaside
.
bDißbÀ
--;

1303 
	`sqlôe3Ex¥Dñëe
(
db
, 
pWhîe
);

1304 
	`sqlôe3Ex¥Dñëe
(
db
, 
pWhí
);

1305 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
pLi°
);

1306 
	`sqlôe3Sñe˘Dñëe
(
db
, 
pSñe˘
);

1307 if–
db
->
mÆlocFaûed
==1 ){

1308 
	`fkTriggîDñëe
(
db
, 
pTriggî
);

1311 
	`as£π
–
pSãp
!=0 );

1313  
a˘i⁄
 ){

1314 
OE_Re°ri˘
:

1315 
pSãp
->
›
 = 
TK_SELECT
;

1317 
OE_Casˇde
:

1318 if–!
pCh™ges
 ){

1319 
pSãp
->
›
 = 
TK_DELETE
;

1323 
pSãp
->
›
 = 
TK_UPDATE
;

1325 
pSãp
->
pTrig
 = 
pTriggî
;

1326 
pTriggî
->
pSchema
 = 
pTab
->pSchema;

1327 
pTriggî
->
pTabSchema
 = 
pTab
->
pSchema
;

1328 
pFKey
->
≠Triggî
[
iA˘i⁄
] = 
pTriggî
;

1329 
pTriggî
->
›
 = (
pCh™ges
 ? 
TK_UPDATE
 : 
TK_DELETE
);

1332  
pTriggî
;

1333 
	}
}

1339 
	$sqlôe3FkA˘i⁄s
(

1340 
P¨£
 *
pP¨£
,

1341 
TabÀ
 *
pTab
,

1342 
Ex¥Li°
 *
pCh™ges
,

1343 
ªgOld
,

1344 *
aCh™ge
,

1345 
bChngRowid


1351 if–
pP¨£
->
db
->
Êags
&
SQLITE_F‹eignKeys
 ){

1352 
FKey
 *
pFKey
;

1353 
pFKey
 = 
	`sqlôe3FkRe„ªn˚s
(
pTab
);ÖFKey;ÖFKeyıFKey->
pNextTo
){

1354 if–
aCh™ge
==0 || 
	`fkP¨ítIsModifõd
(
pTab
, 
pFKey
,áCh™ge, 
bChngRowid
) ){

1355 
Triggî
 *
pA˘
 = 
	`fkA˘i⁄Triggî
(
pP¨£
, 
pTab
, 
pFKey
, 
pCh™ges
);

1356 if–
pA˘
 ){

1357 
	`sqlôe3CodeRowTriggîDúe˘
(
pP¨£
, 
pA˘
, 
pTab
, 
ªgOld
, 
OE_Ab‹t
, 0);

1362 
	}
}

1371 
	$sqlôe3FkDñëe
(
sqlôe3
 *
db
, 
TabÀ
 *
pTab
){

1372 
FKey
 *
pFKey
;

1373 
FKey
 *
pNext
;

1375 
	`as£π
–
db
==0 || 
	`sqlôe3SchemaMuãxHñd
(db, 0, 
pTab
->
pSchema
) );

1376 
pFKey
=
pTab
->pFKey;ÖFKey;ÖFKey=
pNext
){

1379 if–!
db
 || db->
≤ByãsFªed
==0 ){

1380 if–
pFKey
->
pPªvTo
 ){

1381 
pFKey
->
pPªvTo
->
pNextTo
 =ÖFKey->pNextTo;

1383 *
p
 = (*)
pFKey
->
pNextTo
;

1384 c⁄° *
z
 = (
p
 ? 
pFKey
->
pNextTo
->
zTo
 :ÖFKey->zTo);

1385 
	`sqlôe3HashIn£π
(&
pTab
->
pSchema
->
fkeyHash
, 
z
, 
p
);

1387 if–
pFKey
->
pNextTo
 ){

1388 
pFKey
->
pNextTo
->
pPªvTo
 =ÖFKey->pPrevTo;

1395 
	`as£π
–
pFKey
->
isDe„ºed
==0 ||ÖFKey->isDeferred==1 );

1398 #i‚de‡
SQLITE_OMIT_TRIGGER


1399 
	`fkTriggîDñëe
(
db
, 
pFKey
->
≠Triggî
[0]);

1400 
	`fkTriggîDñëe
(
db
, 
pFKey
->
≠Triggî
[1]);

1403 
pNext
 = 
pFKey
->
pNextFrom
;

1404 
	`sqlôe3DbFªe
(
db
, 
pFKey
);

1406 
	}
}

	@func.c

16 
	~"sqlôeI¡.h
"

17 
	~<°dlib.h
>

18 
	~<as£π.h
>

19 
	~"vdbeI¡.h
"

24 
CﬁlSeq
 *
	$sqlôe3GëFuncCﬁlSeq
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
){

25 
VdbeOp
 *
pOp
;

26 
	`as£π
–
c⁄ãxt
->
pVdbe
!=0 );

27 
pOp
 = &
c⁄ãxt
->
pVdbe
->
aOp
[c⁄ãxt->
iOp
-1];

28 
	`as£π
–
pOp
->
›code
==
OP_CﬁlSeq
 );

29 
	`as£π
–
pOp
->
p4ty≥
==
P4_COLLSEQ
 );

30  
pOp
->
p4
.
pCﬁl
;

31 
	}
}

37 
	$sqlôe3SkùAccumuœt‹Lﬂd
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
){

38 
c⁄ãxt
->
skùFœg
 = 1;

39 
	}
}

44 
	$mömaxFunc
(

45 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

46 
¨gc
,

47 
sqlôe3_vÆue
 **
¨gv


49 
i
;

50 
mask
;

51 
iBe°
;

52 
CﬁlSeq
 *
pCﬁl
;

54 
	`as£π
–
¨gc
>1 );

55 
mask
 = 
	`sqlôe3_u£r_d©a
(
c⁄ãxt
)==0 ? 0 : -1;

56 
pCﬁl
 = 
	`sqlôe3GëFuncCﬁlSeq
(
c⁄ãxt
);

57 
	`as£π
–
pCﬁl
 );

58 
	`as£π
–
mask
==-1 || mask==0 );

59 
iBe°
 = 0;

60 if–
	`sqlôe3_vÆue_ty≥
(
¨gv
[0])==
SQLITE_NULL
 ) ;

61 
i
=1; i<
¨gc
; i++){

62 if–
	`sqlôe3_vÆue_ty≥
(
¨gv
[
i
])==
SQLITE_NULL
 ) ;

63 if–(
	`sqlôe3MemCom∑ª
(
¨gv
[
iBe°
],árgv[
i
], 
pCﬁl
)^
mask
)>=0 ){

64 
	`ã°ˇ£
–
mask
==0 );

65 
iBe°
 = 
i
;

68 
	`sqlôe3_ªsu…_vÆue
(
c⁄ãxt
, 
¨gv
[
iBe°
]);

69 
	}
}

74 
	$ty≥ofFunc
(

75 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

76 
NŸU£d
,

77 
sqlôe3_vÆue
 **
¨gv


79 c⁄° *
z
 = 0;

80 
	`UNUSED_PARAMETER
(
NŸU£d
);

81  
	`sqlôe3_vÆue_ty≥
(
¨gv
[0]) ){

82 
SQLITE_INTEGER
: 
z
 = "integer"; ;

83 
SQLITE_TEXT
: 
z
 = "text"; ;

84 
SQLITE_FLOAT
: 
z
 = "real"; ;

85 
SQLITE_BLOB
: 
z
 = "blob"; ;

86 : 
z
 = "null"; ;

88 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
z
, -1, 
SQLITE_STATIC
);

89 
	}
}

95 
	$ÀngthFunc
(

96 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

97 
¨gc
,

98 
sqlôe3_vÆue
 **
¨gv


100 
Àn
;

102 
	`as£π
–
¨gc
==1 );

103 
	`UNUSED_PARAMETER
(
¨gc
);

104  
	`sqlôe3_vÆue_ty≥
(
¨gv
[0]) ){

105 
SQLITE_BLOB
:

106 
SQLITE_INTEGER
:

107 
SQLITE_FLOAT
: {

108 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
	`sqlôe3_vÆue_byãs
(
¨gv
[0]));

111 
SQLITE_TEXT
: {

112 c⁄° *
z
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

113 if–
z
==0 ) ;

114 
Àn
 = 0;

115  *
z
 ){

116 
Àn
++;

117 
	`SQLITE_SKIP_UTF8
(
z
);

119 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
Àn
);

123 
	`sqlôe3_ªsu…_nuŒ
(
c⁄ãxt
);

127 
	}
}

135 
	$absFunc
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

136 
	`as£π
–
¨gc
==1 );

137 
	`UNUSED_PARAMETER
(
¨gc
);

138  
	`sqlôe3_vÆue_ty≥
(
¨gv
[0]) ){

139 
SQLITE_INTEGER
: {

140 
i64
 
iVÆ
 = 
	`sqlôe3_vÆue_öt64
(
¨gv
[0]);

141 if–
iVÆ
<0 ){

142 if–
iVÆ
==
SMALLEST_INT64
 ){

146 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, "integer overflow", -1);

149 
iVÆ
 = -iVal;

151 
	`sqlôe3_ªsu…_öt64
(
c⁄ãxt
, 
iVÆ
);

154 
SQLITE_NULL
: {

156 
	`sqlôe3_ªsu…_nuŒ
(
c⁄ãxt
);

165 
rVÆ
 = 
	`sqlôe3_vÆue_doubÀ
(
¨gv
[0]);

166 if–
rVÆ
<0 )ÑVal = -rVal;

167 
	`sqlôe3_ªsu…_doubÀ
(
c⁄ãxt
, 
rVÆ
);

171 
	}
}

184 
	$ö°rFunc
(

185 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

186 
¨gc
,

187 
sqlôe3_vÆue
 **
¨gv


189 c⁄° *
zHay°ack
;

190 c⁄° *
zNìdÀ
;

191 
nHay°ack
;

192 
nNìdÀ
;

193 
ty≥Hay°ack
, 
ty≥NìdÀ
;

194 
N
 = 1;

195 
isText
;

197 
	`UNUSED_PARAMETER
(
¨gc
);

198 
ty≥Hay°ack
 = 
	`sqlôe3_vÆue_ty≥
(
¨gv
[0]);

199 
ty≥NìdÀ
 = 
	`sqlôe3_vÆue_ty≥
(
¨gv
[1]);

200 if–
ty≥Hay°ack
==
SQLITE_NULL
 || 
ty≥NìdÀ
==SQLITE_NULL ) ;

201 
nHay°ack
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[0]);

202 
nNìdÀ
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[1]);

203 if–
ty≥Hay°ack
==
SQLITE_BLOB
 && 
ty≥NìdÀ
==SQLITE_BLOB ){

204 
zHay°ack
 = 
	`sqlôe3_vÆue_blob
(
¨gv
[0]);

205 
zNìdÀ
 = 
	`sqlôe3_vÆue_blob
(
¨gv
[1]);

206 
isText
 = 0;

208 
zHay°ack
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

209 
zNìdÀ
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[1]);

210 
isText
 = 1;

212  
nNìdÀ
<=
nHay°ack
 && 
	`memcmp
(
zHay°ack
, 
zNìdÀ
,ÇNeedle)!=0 ){

213 
N
++;

215 
nHay°ack
--;

216 
zHay°ack
++;

217 } 
isText
 && (
zHay°ack
[0]&0xc0)==0x80 );

219 if–
nNìdÀ
>
nHay°ack
 ) 
N
 = 0;

220 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
N
);

221 
	}
}

226 
	$¥ötfFunc
(

227 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

228 
¨gc
,

229 
sqlôe3_vÆue
 **
¨gv


231 
PrötfArgumíts
 
x
;

232 
SåAccum
 
°r
;

233 c⁄° *
zF‹m©
;

234 
n
;

235 
sqlôe3
 *
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
);

237 if–
¨gc
>=1 && (
zF‹m©
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]))!=0 ){

238 
x
.
nArg
 = 
¨gc
-1;

239 
x
.
nU£d
 = 0;

240 
x
.
≠Arg
 = 
¨gv
+1;

241 
	`sqlôe3SåAccumInô
(&
°r
, 
db
, 0, 0, db->
aLimô
[
SQLITE_LIMIT_LENGTH
]);

242 
°r
.
¥ötfFœgs
 = 
SQLITE_PRINTF_SQLFUNC
;

243 
	`sqlôe3XPrötf
(&
°r
, 
zF‹m©
, &
x
);

244 
n
 = 
°r
.
nCh¨
;

245 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
	`sqlôe3SåAccumFöish
(&
°r
), 
n
,

246 
SQLITE_DYNAMIC
);

248 
	}
}

262 
	$sub°rFunc
(

263 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

264 
¨gc
,

265 
sqlôe3_vÆue
 **
¨gv


267 c⁄° *
z
;

268 c⁄° *
z2
;

269 
Àn
;

270 
p0ty≥
;

271 
i64
 
p1
, 
p2
;

272 
√gP2
 = 0;

274 
	`as£π
–
¨gc
==3 ||árgc==2 );

275 if–
	`sqlôe3_vÆue_ty≥
(
¨gv
[1])==
SQLITE_NULL


276 || (
¨gc
==3 && 
	`sqlôe3_vÆue_ty≥
(
¨gv
[2])==
SQLITE_NULL
)

280 
p0ty≥
 = 
	`sqlôe3_vÆue_ty≥
(
¨gv
[0]);

281 
p1
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[1]);

282 if–
p0ty≥
==
SQLITE_BLOB
 ){

283 
Àn
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[0]);

284 
z
 = 
	`sqlôe3_vÆue_blob
(
¨gv
[0]);

285 if–
z
==0 ) ;

286 
	`as£π
–
Àn
==
	`sqlôe3_vÆue_byãs
(
¨gv
[0]) );

288 
z
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

289 if–
z
==0 ) ;

290 
Àn
 = 0;

291 if–
p1
<0 ){

292 
z2
=
z
; *z2; 
Àn
++){

293 
	`SQLITE_SKIP_UTF8
(
z2
);

297 #ifde‡
SQLITE_SUBSTR_COMPATIBILITY


303 if–
p1
==0 )Ö1 = 1;

305 if–
¨gc
==3 ){

306 
p2
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[2]);

307 if–
p2
<0 ){

308 
p2
 = -p2;

309 
√gP2
 = 1;

312 
p2
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
)->
aLimô
[
SQLITE_LIMIT_LENGTH
];

314 if–
p1
<0 ){

315 
p1
 +
Àn
;

316 if–
p1
<0 ){

317 
p2
 +
p1
;

318 if–
p2
<0 )Ö2 = 0;

319 
p1
 = 0;

321 }if–
p1
>0 ){

322 
p1
--;

323 }if–
p2
>0 ){

324 
p2
--;

326 if–
√gP2
 ){

327 
p1
 -
p2
;

328 if–
p1
<0 ){

329 
p2
 +
p1
;

330 
p1
 = 0;

333 
	`as£π
–
p1
>=0 && 
p2
>=0 );

334 if–
p0ty≥
!=
SQLITE_BLOB
 ){

335  *
z
 && 
p1
 ){

336 
	`SQLITE_SKIP_UTF8
(
z
);

337 
p1
--;

339 
z2
=
z
; *z2 && 
p2
;Ö2--){

340 
	`SQLITE_SKIP_UTF8
(
z2
);

342 
	`sqlôe3_ªsu…_ãxt64
(
c⁄ãxt
, (*)
z
, 
z2
-z, 
SQLITE_TRANSIENT
,

343 
SQLITE_UTF8
);

345 if–
p1
+
p2
>
Àn
 ){

346 
p2
 = 
Àn
-
p1
;

347 if–
p2
<0 )Ö2 = 0;

349 
	`sqlôe3_ªsu…_blob64
(
c⁄ãxt
, (*)&
z
[
p1
], (
u64
)
p2
, 
SQLITE_TRANSIENT
);

351 
	}
}

356 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


357 
	$roundFunc
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

358 
n
 = 0;

359 
r
;

360 *
zBuf
;

361 
	`as£π
–
¨gc
==1 ||árgc==2 );

362 if–
¨gc
==2 ){

363 if–
SQLITE_NULL
==
	`sqlôe3_vÆue_ty≥
(
¨gv
[1]) ) ;

364 
n
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[1]);

365 if–
n
>30 )Ç = 30;

366 if–
n
<0 )Ç = 0;

368 if–
	`sqlôe3_vÆue_ty≥
(
¨gv
[0])==
SQLITE_NULL
 ) ;

369 
r
 = 
	`sqlôe3_vÆue_doubÀ
(
¨gv
[0]);

374 if–
n
==0 && 
r
>=0 &&Ñ<
LARGEST_INT64
-1 ){

375 
r
 = ()((
sqlôe_öt64
)(r+0.5));

376 }if–
n
==0 && 
r
<0 && (-r)<
LARGEST_INT64
-1 ){

377 
r
 = -()((
sqlôe_öt64
)((-r)+0.5));

379 
zBuf
 = 
	`sqlôe3_m¥ötf
("%.*f",
n
,
r
);

380 if–
zBuf
==0 ){

381 
	`sqlôe3_ªsu…_îr‹_nomem
(
c⁄ãxt
);

384 
	`sqlôe3AtoF
(
zBuf
, &
r
, 
	`sqlôe3SåÀn30
(zBuf), 
SQLITE_UTF8
);

385 
	`sqlôe3_‰ì
(
zBuf
);

387 
	`sqlôe3_ªsu…_doubÀ
(
c⁄ãxt
, 
r
);

388 
	}
}

398 *
	$c⁄ãxtMÆloc
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
i64
 
nByã
){

399 *
z
;

400 
sqlôe3
 *
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
);

401 
	`as£π
–
nByã
>0 );

402 
	`ã°ˇ£
–
nByã
==
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
] );

403 
	`ã°ˇ£
–
nByã
==
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
]+1 );

404 if–
nByã
>
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
] ){

405 
	`sqlôe3_ªsu…_îr‹_toobig
(
c⁄ãxt
);

406 
z
 = 0;

408 
z
 = 
	`sqlôe3MÆloc
(
nByã
);

409 if–!
z
 ){

410 
	`sqlôe3_ªsu…_îr‹_nomem
(
c⁄ãxt
);

413  
z
;

414 
	}
}

419 
	$uµîFunc
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

420 *
z1
;

421 c⁄° *
z2
;

422 
i
, 
n
;

423 
	`UNUSED_PARAMETER
(
¨gc
);

424 
z2
 = (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

425 
n
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[0]);

427 
	`as£π
–
z2
==(*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]) );

428 if–
z2
 ){

429 
z1
 = 
	`c⁄ãxtMÆloc
(
c⁄ãxt
, ((
i64
)
n
)+1);

430 if–
z1
 ){

431 
i
=0; i<
n
; i++){

432 
z1
[
i
] = ()
	`sqlôe3Touµî
(
z2
[i]);

434 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
z1
, 
n
, 
sqlôe3_‰ì
);

437 
	}
}

438 
	$lowîFunc
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

439 *
z1
;

440 c⁄° *
z2
;

441 
i
, 
n
;

442 
	`UNUSED_PARAMETER
(
¨gc
);

443 
z2
 = (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

444 
n
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[0]);

446 
	`as£π
–
z2
==(*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]) );

447 if–
z2
 ){

448 
z1
 = 
	`c⁄ãxtMÆloc
(
c⁄ãxt
, ((
i64
)
n
)+1);

449 if–
z1
 ){

450 
i
=0; i<
n
; i++){

451 
z1
[
i
] = 
	`sqlôe3Tﬁowî
(
z2
[i]);

453 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
z1
, 
n
, 
sqlôe3_‰ì
);

456 
	}
}

466 
	#no›Func
 
vîsi⁄Func


	)

471 
	$øndomFunc
(

472 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

473 
NŸU£d
,

474 
sqlôe3_vÆue
 **
NŸU£d2


476 
sqlôe_öt64
 
r
;

477 
	`UNUSED_PARAMETER2
(
NŸU£d
, 
NŸU£d2
);

478 
	`sqlôe3_øndom√ss
((
r
), &r);

479 if–
r
<0 ){

488 
r
 = -‘ & 
LARGEST_INT64
);

490 
	`sqlôe3_ªsu…_öt64
(
c⁄ãxt
, 
r
);

491 
	}
}

497 
	$øndomBlob
(

498 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

499 
¨gc
,

500 
sqlôe3_vÆue
 **
¨gv


502 
n
;

503 *
p
;

504 
	`as£π
–
¨gc
==1 );

505 
	`UNUSED_PARAMETER
(
¨gc
);

506 
n
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[0]);

507 if–
n
<1 ){

508 
n
 = 1;

510 
p
 = 
	`c⁄ãxtMÆloc
(
c⁄ãxt
, 
n
);

511 if–
p
 ){

512 
	`sqlôe3_øndom√ss
(
n
, 
p
);

513 
	`sqlôe3_ªsu…_blob
(
c⁄ãxt
, (*)
p
, 
n
, 
sqlôe3_‰ì
);

515 
	}
}

521 
	$œ°_ö£π_rowid
(

522 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

523 
NŸU£d
,

524 
sqlôe3_vÆue
 **
NŸU£d2


526 
sqlôe3
 *
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
);

527 
	`UNUSED_PARAMETER2
(
NŸU£d
, 
NŸU£d2
);

531 
	`sqlôe3_ªsu…_öt64
(
c⁄ãxt
, 
	`sqlôe3_œ°_ö£π_rowid
(
db
));

532 
	}
}

541 
	$ch™ges
(

542 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

543 
NŸU£d
,

544 
sqlôe3_vÆue
 **
NŸU£d2


546 
sqlôe3
 *
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
);

547 
	`UNUSED_PARAMETER2
(
NŸU£d
, 
NŸU£d2
);

548 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
	`sqlôe3_ch™ges
(
db
));

549 
	}
}

555 
	$tŸÆ_ch™ges
(

556 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

557 
NŸU£d
,

558 
sqlôe3_vÆue
 **
NŸU£d2


560 
sqlôe3
 *
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
);

561 
	`UNUSED_PARAMETER2
(
NŸU£d
, 
NŸU£d2
);

564 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
	`sqlôe3_tŸÆ_ch™ges
(
db
));

565 
	}
}

570 
	scom∑ªInfo
 {

571 
u8
 
	mm©chAŒ
;

572 
u8
 
	mm©chO√
;

573 
u8
 
	mm©chSë
;

574 
u8
 
	mnoCa£
;

583 #i‡
deföed
(
SQLITE_EBCDIC
)

584 
	#sqlôe3Utf8Ród
(
A
Ë(*((*A)++))

	)

585 
	#Utf8Ród
(
A
Ë(*(A++))

	)

587 
	#Utf8Ród
(
A
Ë(A[0]<0x80?*(A++):
	`sqlôe3Utf8Ród
(&A))

	)

590 c⁄° 
com∑ªInfo
 
	gglobInfo
 = { '*', '?', '[', 0 };

593 c⁄° 
com∑ªInfo
 
	glikeInfoN‹m
 = { '%', '_', 0, 1 };

596 c⁄° 
com∑ªInfo
 
	glikeInfoA…
 = { '%', '_', 0, 0 };

633 
	$∑âînCom∑ª
(

634 c⁄° 
u8
 *
zP©ã∫
,

635 c⁄° 
u8
 *
zSåög
,

636 c⁄° 
com∑ªInfo
 *
pInfo
,

637 
u32
 
m©chOthî


639 
u32
 
c
, 
c2
;

640 
u32
 
m©chO√
 = 
pInfo
->matchOne;

641 
u32
 
m©chAŒ
 = 
pInfo
->matchAll;

642 
u8
 
noCa£
 = 
pInfo
->noCase;

643 c⁄° 
u8
 *
zEsˇ≥d
 = 0;

645  (
c
 = 
	`Utf8Ród
(
zP©ã∫
))!=0 ){

646 if–
c
==
m©chAŒ
 ){

650  (
c
=
	`Utf8Ród
(
zP©ã∫
)Ë=
m©chAŒ
 || c =
m©chO√
 ){

651 if–
c
==
m©chO√
 && 
	`sqlôe3Utf8Ród
(&
zSåög
)==0 ){

655 if–
c
==0 ){

657 }if–
c
==
m©chOthî
 ){

658 if–
pInfo
->
m©chSë
==0 ){

659 
c
 = 
	`sqlôe3Utf8Ród
(&
zP©ã∫
);

660 if–
c
==0 )  0;

664 
	`as£π
–
m©chOthî
<0x80 );

665  *
zSåög


666 && 
	`∑âînCom∑ª
(&
zP©ã∫
[-1],
zSåög
,
pInfo
,
m©chOthî
)==0 ){

667 
	`SQLITE_SKIP_UTF8
(
zSåög
);

669  *
zSåög
!=0;

682 if–
c
<=0x80 ){

683 
u32
 
cx
;

684 if–
noCa£
 ){

685 
cx
 = 
	`sqlôe3Touµî
(
c
);

686 
c
 = 
	`sqlôe3Tﬁowî
(c);

688 
cx
 = 
c
;

690  (
c2
 = *(
zSåög
++))!=0 ){

691 if–
c2
!=
c
 && c2!=
cx
 ) ;

692 if–
	`∑âînCom∑ª
(
zP©ã∫
,
zSåög
,
pInfo
,
m©chOthî
) )  1;

695  (
c2
 = 
	`Utf8Ród
(
zSåög
))!=0 ){

696 if–
c2
!=
c
 ) ;

697 if–
	`∑âînCom∑ª
(
zP©ã∫
,
zSåög
,
pInfo
,
m©chOthî
) )  1;

702 if–
c
==
m©chOthî
 ){

703 if–
pInfo
->
m©chSë
==0 ){

704 
c
 = 
	`sqlôe3Utf8Ród
(&
zP©ã∫
);

705 if–
c
==0 )  0;

706 
zEsˇ≥d
 = 
zP©ã∫
;

708 
u32
 
¥i‹_c
 = 0;

709 
£í
 = 0;

710 
övît
 = 0;

711 
c
 = 
	`sqlôe3Utf8Ród
(&
zSåög
);

712 if–
c
==0 )  0;

713 
c2
 = 
	`sqlôe3Utf8Ród
(&
zP©ã∫
);

714 if–
c2
=='^' ){

715 
övît
 = 1;

716 
c2
 = 
	`sqlôe3Utf8Ród
(&
zP©ã∫
);

718 if–
c2
==']' ){

719 if–
c
==']' ) 
£í
 = 1;

720 
c2
 = 
	`sqlôe3Utf8Ród
(&
zP©ã∫
);

722  
c2
 && c2!=']' ){

723 if–
c2
=='-' && 
zP©ã∫
[0]!=']' && zP©ã∫[0]!=0 && 
¥i‹_c
>0 ){

724 
c2
 = 
	`sqlôe3Utf8Ród
(&
zP©ã∫
);

725 if–
c
>=
¥i‹_c
 && c<=
c2
 ) 
£í
 = 1;

726 
¥i‹_c
 = 0;

728 if–
c
==
c2
 ){

729 
£í
 = 1;

731 
¥i‹_c
 = 
c2
;

733 
c2
 = 
	`sqlôe3Utf8Ród
(&
zP©ã∫
);

735 if–
c2
==0 || (
£í
 ^ 
övît
)==0 ){

741 
c2
 = 
	`Utf8Ród
(
zSåög
);

742 if–
c
==
c2
 ) ;

743 if–
noCa£
 && 
c
<0x80 && 
c2
<0x80 && 
	`sqlôe3Tﬁowî
(c)==sqlite3Tolower(c2) ){

746 if–
c
==
m©chO√
 && 
zP©ã∫
!=
zEsˇ≥d
 && 
c2
!=0 ) ;

749  *
zSåög
==0;

750 
	}
}

755 
	$sqlôe3_°rglob
(c⁄° *
zGlobP©ã∫
, c⁄° *
zSåög
){

756  
	`∑âînCom∑ª
((
u8
*)
zGlobP©ã∫
, (u8*)
zSåög
, &
globInfo
, '[')==0;

757 
	}
}

762 
	$sqlôe3_°æike
(c⁄° *
zP©ã∫
, c⁄° *
zSå
, 
esc
){

763  
	`∑âînCom∑ª
((
u8
*)
zP©ã∫
, (u8*)
zSå
, &
likeInfoN‹m
, 
esc
)==0;

764 
	}
}

771 #ifde‡
SQLITE_TEST


772 
	gsqlôe3_like_cou¡
 = 0;

788 
	$likeFunc
(

789 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

790 
¨gc
,

791 
sqlôe3_vÆue
 **
¨gv


793 c⁄° *
zA
, *
zB
;

794 
u32
 
esˇ≥
;

795 
nP©
;

796 
sqlôe3
 *
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
);

797 
com∑ªInfo
 *
pInfo
 = 
	`sqlôe3_u£r_d©a
(
c⁄ãxt
);

799 #ifde‡
SQLITE_LIKE_DOESNT_MATCH_BLOBS


800 if–
	`sqlôe3_vÆue_ty≥
(
¨gv
[0])==
SQLITE_BLOB


801 || 
	`sqlôe3_vÆue_ty≥
(
¨gv
[1])==
SQLITE_BLOB


803 #ifde‡
SQLITE_TEST


804 
sqlôe3_like_cou¡
++;

806 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 0);

810 
zB
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

811 
zA
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[1]);

816 
nP©
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[0]);

817 
	`ã°ˇ£
–
nP©
==
db
->
aLimô
[
SQLITE_LIMIT_LIKE_PATTERN_LENGTH
] );

818 
	`ã°ˇ£
–
nP©
==
db
->
aLimô
[
SQLITE_LIMIT_LIKE_PATTERN_LENGTH
]+1 );

819 if–
nP©
 > 
db
->
aLimô
[
SQLITE_LIMIT_LIKE_PATTERN_LENGTH
] ){

820 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, "LIKE or GLOBÖatternÅoo complex", -1);

823 
	`as£π
–
zB
==
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]) );

825 if–
¨gc
==3 ){

829 c⁄° *
zEsc
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[2]);

830 if–
zEsc
==0 ) ;

831 if–
	`sqlôe3Utf8Ch¨Lí
((*)
zEsc
, -1)!=1 ){

832 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
,

836 
esˇ≥
 = 
	`sqlôe3Utf8Ród
(&
zEsc
);

838 
esˇ≥
 = 
pInfo
->
m©chSë
;

840 if–
zA
 && 
zB
 ){

841 #ifde‡
SQLITE_TEST


842 
sqlôe3_like_cou¡
++;

844 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
	`∑âînCom∑ª
(
zB
, 
zA
, 
pInfo
, 
esˇ≥
));

846 
	}
}

853 
	$nuŒifFunc
(

854 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

855 
NŸU£d
,

856 
sqlôe3_vÆue
 **
¨gv


858 
CﬁlSeq
 *
pCﬁl
 = 
	`sqlôe3GëFuncCﬁlSeq
(
c⁄ãxt
);

859 
	`UNUSED_PARAMETER
(
NŸU£d
);

860 if–
	`sqlôe3MemCom∑ª
(
¨gv
[0],árgv[1], 
pCﬁl
)!=0 ){

861 
	`sqlôe3_ªsu…_vÆue
(
c⁄ãxt
, 
¨gv
[0]);

863 
	}
}

869 
	$vîsi⁄Func
(

870 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

871 
NŸU£d
,

872 
sqlôe3_vÆue
 **
NŸU£d2


874 
	`UNUSED_PARAMETER2
(
NŸU£d
, 
NŸU£d2
);

877 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
	`sqlôe3_libvîsi⁄
(), -1, 
SQLITE_STATIC
);

878 
	}
}

885 
	$sour˚idFunc
(

886 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

887 
NŸU£d
,

888 
sqlôe3_vÆue
 **
NŸU£d2


890 
	`UNUSED_PARAMETER2
(
NŸU£d
, 
NŸU£d2
);

893 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
	`sqlôe3_sour˚id
(), -1, 
SQLITE_STATIC
);

894 
	}
}

901 
	$îæogFunc
(

902 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

903 
¨gc
,

904 
sqlôe3_vÆue
 **
¨gv


906 
	`UNUSED_PARAMETER
(
¨gc
);

907 
	`UNUSED_PARAMETER
(
c⁄ãxt
);

908 
	`sqlôe3_log
(
	`sqlôe3_vÆue_öt
(
¨gv
[0]), "%s", 
	`sqlôe3_vÆue_ãxt
(argv[1]));

909 
	}
}

916 #i‚de‡
SQLITE_OMIT_COMPILEOPTION_DIAGS


917 
	$compûe›ti⁄u£dFunc
(

918 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

919 
¨gc
,

920 
sqlôe3_vÆue
 **
¨gv


922 c⁄° *
zO±Name
;

923 
	`as£π
–
¨gc
==1 );

924 
	`UNUSED_PARAMETER
(
¨gc
);

929 if–(
zO±Name
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]))!=0 ){

930 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
	`sqlôe3_compûe›ti⁄_u£d
(
zO±Name
));

932 
	}
}

940 #i‚de‡
SQLITE_OMIT_COMPILEOPTION_DIAGS


941 
	$compûe›ti⁄gëFunc
(

942 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

943 
¨gc
,

944 
sqlôe3_vÆue
 **
¨gv


946 
n
;

947 
	`as£π
–
¨gc
==1 );

948 
	`UNUSED_PARAMETER
(
¨gc
);

952 
n
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[0]);

953 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
	`sqlôe3_compûe›ti⁄_gë
(
n
), -1, 
SQLITE_STATIC
);

954 
	}
}

959 c⁄° 
	ghexdigôs
[] = {

971 
	$quŸeFunc
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

972 
	`as£π
–
¨gc
==1 );

973 
	`UNUSED_PARAMETER
(
¨gc
);

974  
	`sqlôe3_vÆue_ty≥
(
¨gv
[0]) ){

975 
SQLITE_FLOAT
: {

976 
r1
, 
r2
;

977 
zBuf
[50];

978 
r1
 = 
	`sqlôe3_vÆue_doubÀ
(
¨gv
[0]);

979 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%!.15g", 
r1
);

980 
	`sqlôe3AtoF
(
zBuf
, &
r2
, 20, 
SQLITE_UTF8
);

981 if–
r1
!=
r2
 ){

982 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%!.20e", 
r1
);

984 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zBuf
, -1, 
SQLITE_TRANSIENT
);

987 
SQLITE_INTEGER
: {

988 
	`sqlôe3_ªsu…_vÆue
(
c⁄ãxt
, 
¨gv
[0]);

991 
SQLITE_BLOB
: {

992 *
zText
 = 0;

993 c⁄° *
zBlob
 = 
	`sqlôe3_vÆue_blob
(
¨gv
[0]);

994 
nBlob
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[0]);

995 
	`as£π
–
zBlob
==
	`sqlôe3_vÆue_blob
(
¨gv
[0]) );

996 
zText
 = (*)
	`c⁄ãxtMÆloc
(
c⁄ãxt
, (2*(
i64
)
nBlob
)+4);

997 if–
zText
 ){

998 
i
;

999 
i
=0; i<
nBlob
; i++){

1000 
zText
[(
i
*2)+2] = 
hexdigôs
[(
zBlob
[i]>>4)&0x0F];

1001 
zText
[(
i
*2)+3] = 
hexdigôs
[(
zBlob
[i])&0x0F];

1003 
zText
[(
nBlob
*2)+2] = '\'';

1004 
zText
[(
nBlob
*2)+3] = '\0';

1005 
zText
[0] = 'X';

1006 
zText
[1] = '\'';

1007 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zText
, -1, 
SQLITE_TRANSIENT
);

1008 
	`sqlôe3_‰ì
(
zText
);

1012 
SQLITE_TEXT
: {

1013 
i
,
j
;

1014 
u64
 
n
;

1015 c⁄° *
zArg
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

1016 *
z
;

1018 if–
zArg
==0 ) ;

1019 
i
=0, 
n
=0; 
zArg
[i]; i++){ if( zArg[i]=='\'' )Ç++; }

1020 
z
 = 
	`c⁄ãxtMÆloc
(
c⁄ãxt
, ((
i64
)
i
)+((i64)
n
)+3);

1021 if–
z
 ){

1022 
z
[0] = '\'';

1023 
i
=0, 
j
=1; 
zArg
[i]; i++){

1024 
z
[
j
++] = 
zArg
[
i
];

1025 if–
zArg
[
i
]=='\'' ){

1026 
z
[
j
++] = '\'';

1029 
z
[
j
++] = '\'';

1030 
z
[
j
] = 0;

1031 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
z
, 
j
, 
sqlôe3_‰ì
);

1036 
	`as£π
–
	`sqlôe3_vÆue_ty≥
(
¨gv
[0])==
SQLITE_NULL
 );

1037 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, "NULL", 4, 
SQLITE_STATIC
);

1041 
	}
}

1047 
	$unicodeFunc
(

1048 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

1049 
¨gc
,

1050 
sqlôe3_vÆue
 **
¨gv


1052 c⁄° *
z
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

1053 ()
¨gc
;

1054 if–
z
 && z[0] ) 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
	`sqlôe3Utf8Ród
(&z));

1055 
	}
}

1062 
	$ch¨Func
(

1063 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

1064 
¨gc
,

1065 
sqlôe3_vÆue
 **
¨gv


1067 *
z
, *
zOut
;

1068 
i
;

1069 
zOut
 = 
z
 = 
	`sqlôe3_mÆloc64
–
¨gc
*4+1 );

1070 if–
z
==0 ){

1071 
	`sqlôe3_ªsu…_îr‹_nomem
(
c⁄ãxt
);

1074 
i
=0; i<
¨gc
; i++){

1075 
sqlôe3_öt64
 
x
;

1076 
c
;

1077 
x
 = 
	`sqlôe3_vÆue_öt64
(
¨gv
[
i
]);

1078 if–
x
<0 || x>0x10ffff ) x = 0xfffd;

1079 
c
 = ()(
x
 & 0x1fffff);

1080 if–
c
<0x00080 ){

1081 *
zOut
++ = (
u8
)(
c
&0xFF);

1082 }if–
c
<0x00800 ){

1083 *
zOut
++ = 0xC0 + (
u8
)((
c
>>6)&0x1F);

1084 *
zOut
++ = 0x80 + (
u8
)(
c
 & 0x3F);

1085 }if–
c
<0x10000 ){

1086 *
zOut
++ = 0xE0 + (
u8
)((
c
>>12)&0x0F);

1087 *
zOut
++ = 0x80 + (
u8
)((
c
>>6) & 0x3F);

1088 *
zOut
++ = 0x80 + (
u8
)(
c
 & 0x3F);

1090 *
zOut
++ = 0xF0 + (
u8
)((
c
>>18) & 0x07);

1091 *
zOut
++ = 0x80 + (
u8
)((
c
>>12) & 0x3F);

1092 *
zOut
++ = 0x80 + (
u8
)((
c
>>6) & 0x3F);

1093 *
zOut
++ = 0x80 + (
u8
)(
c
 & 0x3F);

1096 
	`sqlôe3_ªsu…_ãxt64
(
c⁄ãxt
, (*)
z
, 
zOut
-z, 
sqlôe3_‰ì
, 
SQLITE_UTF8
);

1097 
	}
}

1103 
	$hexFunc
(

1104 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

1105 
¨gc
,

1106 
sqlôe3_vÆue
 **
¨gv


1108 
i
, 
n
;

1109 c⁄° *
pBlob
;

1110 *
zHex
, *
z
;

1111 
	`as£π
–
¨gc
==1 );

1112 
	`UNUSED_PARAMETER
(
¨gc
);

1113 
pBlob
 = 
	`sqlôe3_vÆue_blob
(
¨gv
[0]);

1114 
n
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[0]);

1115 
	`as£π
–
pBlob
==
	`sqlôe3_vÆue_blob
(
¨gv
[0]) );

1116 
z
 = 
zHex
 = 
	`c⁄ãxtMÆloc
(
c⁄ãxt
, ((
i64
)
n
)*2 + 1);

1117 if–
zHex
 ){

1118 
i
=0; i<
n
; i++, 
pBlob
++){

1119 
c
 = *
pBlob
;

1120 *(
z
++Ë
hexdigôs
[(
c
>>4)&0xf];

1121 *(
z
++Ë
hexdigôs
[
c
&0xf];

1123 *
z
 = 0;

1124 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zHex
, 
n
*2, 
sqlôe3_‰ì
);

1126 
	}
}

1131 
	$zîoblobFunc
(

1132 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

1133 
¨gc
,

1134 
sqlôe3_vÆue
 **
¨gv


1136 
i64
 
n
;

1137 
rc
;

1138 
	`as£π
–
¨gc
==1 );

1139 
	`UNUSED_PARAMETER
(
¨gc
);

1140 
n
 = 
	`sqlôe3_vÆue_öt64
(
¨gv
[0]);

1141 if–
n
<0 )Ç = 0;

1142 
rc
 = 
	`sqlôe3_ªsu…_zîoblob64
(
c⁄ãxt
, 
n
);

1143 if–
rc
 ){

1144 
	`sqlôe3_ªsu…_îr‹_code
(
c⁄ãxt
, 
rc
);

1146 
	}
}

1154 
	$ª∂a˚Func
(

1155 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

1156 
¨gc
,

1157 
sqlôe3_vÆue
 **
¨gv


1159 c⁄° *
zSå
;

1160 c⁄° *
zP©ã∫
;

1161 c⁄° *
zRï
;

1162 *
zOut
;

1163 
nSå
;

1164 
nP©ã∫
;

1165 
nRï
;

1166 
i64
 
nOut
;

1167 
lo›Limô
;

1168 
i
, 
j
;

1170 
	`as£π
–
¨gc
==3 );

1171 
	`UNUSED_PARAMETER
(
¨gc
);

1172 
zSå
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

1173 if–
zSå
==0 ) ;

1174 
nSå
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[0]);

1175 
	`as£π
–
zSå
==
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]) );

1176 
zP©ã∫
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[1]);

1177 if–
zP©ã∫
==0 ){

1178 
	`as£π
–
	`sqlôe3_vÆue_ty≥
(
¨gv
[1])==
SQLITE_NULL


1179 || 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
)->
mÆlocFaûed
 );

1182 if–
zP©ã∫
[0]==0 ){

1183 
	`as£π
–
	`sqlôe3_vÆue_ty≥
(
¨gv
[1])!=
SQLITE_NULL
 );

1184 
	`sqlôe3_ªsu…_vÆue
(
c⁄ãxt
, 
¨gv
[0]);

1187 
nP©ã∫
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[1]);

1188 
	`as£π
–
zP©ã∫
==
	`sqlôe3_vÆue_ãxt
(
¨gv
[1]) );

1189 
zRï
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[2]);

1190 if–
zRï
==0 ) ;

1191 
nRï
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[2]);

1192 
	`as£π
–
zRï
==
	`sqlôe3_vÆue_ãxt
(
¨gv
[2]) );

1193 
nOut
 = 
nSå
 + 1;

1194 
	`as£π
–
nOut
<
SQLITE_MAX_LENGTH
 );

1195 
zOut
 = 
	`c⁄ãxtMÆloc
(
c⁄ãxt
, (
i64
)
nOut
);

1196 if–
zOut
==0 ){

1199 
lo›Limô
 = 
nSå
 - 
nP©ã∫
;

1200 
i
=
j
=0; i<=
lo›Limô
; i++){

1201 if–
zSå
[
i
]!=
zP©ã∫
[0] || 
	`memcmp
(&zSå[i], zP©ã∫, 
nP©ã∫
) ){

1202 
zOut
[
j
++] = 
zSå
[
i
];

1204 
u8
 *
zOld
;

1205 
sqlôe3
 *
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
);

1206 
nOut
 +
nRï
 - 
nP©ã∫
;

1207 
	`ã°ˇ£
–
nOut
-1==
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
] );

1208 
	`ã°ˇ£
–
nOut
-2==
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
] );

1209 if–
nOut
-1>
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
] ){

1210 
	`sqlôe3_ªsu…_îr‹_toobig
(
c⁄ãxt
);

1211 
	`sqlôe3_‰ì
(
zOut
);

1214 
zOld
 = 
zOut
;

1215 
zOut
 = 
	`sqlôe3_ªÆloc64
(zOut, ()
nOut
);

1216 if–
zOut
==0 ){

1217 
	`sqlôe3_ªsu…_îr‹_nomem
(
c⁄ãxt
);

1218 
	`sqlôe3_‰ì
(
zOld
);

1221 
	`mem˝y
(&
zOut
[
j
], 
zRï
, 
nRï
);

1222 
j
 +
nRï
;

1223 
i
 +
nP©ã∫
-1;

1226 
	`as£π
–
j
+
nSå
-
i
+1==
nOut
 );

1227 
	`mem˝y
(&
zOut
[
j
], &
zSå
[
i
], 
nSå
-i);

1228 
j
 +
nSå
 - 
i
;

1229 
	`as£π
–
j
<=
nOut
 );

1230 
zOut
[
j
] = 0;

1231 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, (*)
zOut
, 
j
, 
sqlôe3_‰ì
);

1232 
	}
}

1238 
	$åimFunc
(

1239 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

1240 
¨gc
,

1241 
sqlôe3_vÆue
 **
¨gv


1243 c⁄° *
zIn
;

1244 c⁄° *
zCh¨Së
;

1245 
nIn
;

1246 
Êags
;

1247 
i
;

1248 *
aLí
 = 0;

1249 **
azCh¨
 = 0;

1250 
nCh¨
;

1252 if–
	`sqlôe3_vÆue_ty≥
(
¨gv
[0])==
SQLITE_NULL
 ){

1255 
zIn
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

1256 if–
zIn
==0 ) ;

1257 
nIn
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[0]);

1258 
	`as£π
–
zIn
==
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]) );

1259 if–
¨gc
==1 ){

1260 c⁄° 
ÀnO√
[] = { 1 };

1261 * c⁄° 
azO√
[] = { (
u8
*)" " };

1262 
nCh¨
 = 1;

1263 
aLí
 = (
u8
*)
ÀnO√
;

1264 
azCh¨
 = (**)
azO√
;

1265 
zCh¨Së
 = 0;

1266 }if–(
zCh¨Së
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[1]))==0 ){

1269 c⁄° *
z
;

1270 
z
=
zCh¨Së
, 
nCh¨
=0; *z;ÇChar++){

1271 
	`SQLITE_SKIP_UTF8
(
z
);

1273 if–
nCh¨
>0 ){

1274 
azCh¨
 = 
	`c⁄ãxtMÆloc
(
c⁄ãxt
, ((
i64
)
nCh¨
)*((*)+1));

1275 if–
azCh¨
==0 ){

1278 
aLí
 = (*)&
azCh¨
[
nCh¨
];

1279 
z
=
zCh¨Së
, 
nCh¨
=0; *z;ÇChar++){

1280 
azCh¨
[
nCh¨
] = (*)
z
;

1281 
	`SQLITE_SKIP_UTF8
(
z
);

1282 
aLí
[
nCh¨
] = (
u8
)(
z
 - 
azCh¨
[nChar]);

1286 if–
nCh¨
>0 ){

1287 
Êags
 = 
	`SQLITE_PTR_TO_INT
(
	`sqlôe3_u£r_d©a
(
c⁄ãxt
));

1288 if–
Êags
 & 1 ){

1289  
nIn
>0 ){

1290 
Àn
 = 0;

1291 
i
=0; i<
nCh¨
; i++){

1292 
Àn
 = 
aLí
[
i
];

1293 if–
Àn
<=
nIn
 && 
	`memcmp
(
zIn
, 
azCh¨
[
i
],Üen)==0 ) ;

1295 if–
i
>=
nCh¨
 ) ;

1296 
zIn
 +
Àn
;

1297 
nIn
 -
Àn
;

1300 if–
Êags
 & 2 ){

1301  
nIn
>0 ){

1302 
Àn
 = 0;

1303 
i
=0; i<
nCh¨
; i++){

1304 
Àn
 = 
aLí
[
i
];

1305 if–
Àn
<=
nIn
 && 
	`memcmp
(&
zIn
[nIn-Àn],
azCh¨
[
i
],len)==0 ) ;

1307 if–
i
>=
nCh¨
 ) ;

1308 
nIn
 -
Àn
;

1311 if–
zCh¨Së
 ){

1312 
	`sqlôe3_‰ì
(
azCh¨
);

1315 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, (*)
zIn
, 
nIn
, 
SQLITE_TRANSIENT
);

1316 
	}
}

1323 #ifde‡
SQLITE_SOUNDEX


1330 
	$soundexFunc
(

1331 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

1332 
¨gc
,

1333 
sqlôe3_vÆue
 **
¨gv


1335 
zResu…
[8];

1336 c⁄° 
u8
 *
zIn
;

1337 
i
, 
j
;

1338 c⁄° 
iCode
[] = {

1348 
	`as£π
–
¨gc
==1 );

1349 
zIn
 = (
u8
*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

1350 if–
zIn
==0 ) zI¿(
u8
*)"";

1351 
i
=0; 
zIn
[i] && !
	`sqlôe3IßÕha
(zIn[i]); i++){}

1352 if–
zIn
[
i
] ){

1353 
u8
 
¥evcode
 = 
iCode
[
zIn
[
i
]&0x7f];

1354 
zResu…
[0] = 
	`sqlôe3Touµî
(
zIn
[
i
]);

1355 
j
=1; j<4 && 
zIn
[
i
]; i++){

1356 
code
 = 
iCode
[
zIn
[
i
]&0x7f];

1357 if–
code
>0 ){

1358 if–
code
!=
¥evcode
 ){

1359 
¥evcode
 = 
code
;

1360 
zResu…
[
j
++] = 
code
 + '0';

1363 
¥evcode
 = 0;

1366  
j
<4 ){

1367 
zResu…
[
j
++] = '0';

1369 
zResu…
[
j
] = 0;

1370 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zResu…
, 4, 
SQLITE_TRANSIENT
);

1374 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, "?000", 4, 
SQLITE_STATIC
);

1376 
	}
}

1379 #i‚de‡
SQLITE_OMIT_LOAD_EXTENSION


1383 
	$lﬂdExt
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

1384 c⁄° *
zFûe
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

1385 c⁄° *
zProc
;

1386 
sqlôe3
 *
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
);

1387 *
zEºMsg
 = 0;

1392 if–(
db
->
Êags
 & 
SQLITE_LﬂdExtFunc
)==0 ){

1393 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, "notáuthorized", -1);

1397 if–
¨gc
==2 ){

1398 
zProc
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[1]);

1400 
zProc
 = 0;

1402 if–
zFûe
 && 
	`sqlôe3_lﬂd_exãnsi⁄
(
db
, zFûe, 
zProc
, &
zEºMsg
) ){

1403 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, 
zEºMsg
, -1);

1404 
	`sqlôe3_‰ì
(
zEºMsg
);

1406 
	}
}

1414 
SumCtx
 
	tSumCtx
;

1415 
	sSumCtx
 {

1416 
	mrSum
;

1417 
i64
 
	miSum
;

1418 
i64
 
	m˙t
;

1419 
u8
 
	movîÊow
;

1420 
u8
 
	m≠¥ox
;

1433 
	$sumSãp
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

1434 
SumCtx
 *
p
;

1435 
ty≥
;

1436 
	`as£π
–
¨gc
==1 );

1437 
	`UNUSED_PARAMETER
(
¨gc
);

1438 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

1439 
ty≥
 = 
	`sqlôe3_vÆue_numîic_ty≥
(
¨gv
[0]);

1440 if–
p
 && 
ty≥
!=
SQLITE_NULL
 ){

1441 
p
->
˙t
++;

1442 if–
ty≥
==
SQLITE_INTEGER
 ){

1443 
i64
 
v
 = 
	`sqlôe3_vÆue_öt64
(
¨gv
[0]);

1444 
p
->
rSum
 +
v
;

1445 if–(
p
->
≠¥ox
|p->
ovîÊow
)==0 && 
	`sqlôe3AddI¡64
(&p->
iSum
, 
v
) ){

1446 
p
->
ovîÊow
 = 1;

1449 
p
->
rSum
 +
	`sqlôe3_vÆue_doubÀ
(
¨gv
[0]);

1450 
p
->
≠¥ox
 = 1;

1453 
	}
}

1454 
	$sumFöÆize
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
){

1455 
SumCtx
 *
p
;

1456 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, 0);

1457 if–
p
 &&Ö->
˙t
>0 ){

1458 if–
p
->
ovîÊow
 ){

1459 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
,"integer overflow",-1);

1460 }if–
p
->
≠¥ox
 ){

1461 
	`sqlôe3_ªsu…_doubÀ
(
c⁄ãxt
, 
p
->
rSum
);

1463 
	`sqlôe3_ªsu…_öt64
(
c⁄ãxt
, 
p
->
iSum
);

1466 
	}
}

1467 
	$avgFöÆize
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
){

1468 
SumCtx
 *
p
;

1469 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, 0);

1470 if–
p
 &&Ö->
˙t
>0 ){

1471 
	`sqlôe3_ªsu…_doubÀ
(
c⁄ãxt
, 
p
->
rSum
/(Ì->
˙t
);

1473 
	}
}

1474 
	$tŸÆFöÆize
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
){

1475 
SumCtx
 *
p
;

1476 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, 0);

1478 
	`sqlôe3_ªsu…_doubÀ
(
c⁄ãxt
, 
p
 ?Ö->
rSum
 : ()0);

1479 
	}
}

1485 
Cou¡Ctx
 
	tCou¡Ctx
;

1486 
	sCou¡Ctx
 {

1487 
i64
 
	mn
;

1493 
	$cou¡Sãp
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

1494 
Cou¡Ctx
 *
p
;

1495 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

1496 if–(
¨gc
==0 || 
SQLITE_NULL
!=
	`sqlôe3_vÆue_ty≥
(
¨gv
[0])Ë&& 
p
 ){

1497 
p
->
n
++;

1500 #i‚de‡
SQLITE_OMIT_DEPRECATED


1505 
	`as£π
–
¨gc
==1 || 
p
==0 ||Ö->
n
>0x7fffffff

1506 || 
p
->
n
==
	`sqlôe3_aggªg©e_cou¡
(
c⁄ãxt
) );

1508 
	}
}

1509 
	$cou¡FöÆize
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
){

1510 
Cou¡Ctx
 *
p
;

1511 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, 0);

1512 
	`sqlôe3_ªsu…_öt64
(
c⁄ãxt
, 
p
 ?Ö->
n
 : 0);

1513 
	}
}

1518 
	$mömaxSãp
(

1519 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

1520 
NŸU£d
,

1521 
sqlôe3_vÆue
 **
¨gv


1523 
Mem
 *
pArg
 = (Mem *)
¨gv
[0];

1524 
Mem
 *
pBe°
;

1525 
	`UNUSED_PARAMETER
(
NŸU£d
);

1527 
pBe°
 = (
Mem
 *)
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*pBest));

1528 if–!
pBe°
 ) ;

1530 if–
	`sqlôe3_vÆue_ty≥
(
¨gv
[0])==
SQLITE_NULL
 ){

1531 if–
pBe°
->
Êags
 ) 
	`sqlôe3SkùAccumuœt‹Lﬂd
(
c⁄ãxt
);

1532 }if–
pBe°
->
Êags
 ){

1533 
max
;

1534 
cmp
;

1535 
CﬁlSeq
 *
pCﬁl
 = 
	`sqlôe3GëFuncCﬁlSeq
(
c⁄ãxt
);

1544 
max
 = 
	`sqlôe3_u£r_d©a
(
c⁄ãxt
)!=0;

1545 
cmp
 = 
	`sqlôe3MemCom∑ª
(
pBe°
, 
pArg
, 
pCﬁl
);

1546 if–(
max
 && 
cmp
<0) || (!max && cmp>0) ){

1547 
	`sqlôe3VdbeMemC›y
(
pBe°
, 
pArg
);

1549 
	`sqlôe3SkùAccumuœt‹Lﬂd
(
c⁄ãxt
);

1552 
pBe°
->
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
);

1553 
	`sqlôe3VdbeMemC›y
(
pBe°
, 
pArg
);

1555 
	}
}

1556 
	$möMaxFöÆize
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
){

1557 
sqlôe3_vÆue
 *
pRes
;

1558 
pRes
 = (
sqlôe3_vÆue
 *)
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, 0);

1559 if–
pRes
 ){

1560 if–
pRes
->
Êags
 ){

1561 
	`sqlôe3_ªsu…_vÆue
(
c⁄ãxt
, 
pRes
);

1563 
	`sqlôe3VdbeMemRñó£
(
pRes
);

1565 
	}
}

1570 
	$groupC⁄ˇtSãp
(

1571 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

1572 
¨gc
,

1573 
sqlôe3_vÆue
 **
¨gv


1575 c⁄° *
zVÆ
;

1576 
SåAccum
 *
pAccum
;

1577 c⁄° *
zSï
;

1578 
nVÆ
, 
nSï
;

1579 
	`as£π
–
¨gc
==1 ||árgc==2 );

1580 if–
	`sqlôe3_vÆue_ty≥
(
¨gv
[0])==
SQLITE_NULL
 ) ;

1581 
pAccum
 = (
SåAccum
*)
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*pAccum));

1583 if–
pAccum
 ){

1584 
sqlôe3
 *
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
);

1585 
fú°Tîm
 = 
pAccum
->
mxAŒoc
==0;

1586 
pAccum
->
mxAŒoc
 = 
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
];

1587 if–!
fú°Tîm
 ){

1588 if–
¨gc
==2 ){

1589 
zSï
 = (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[1]);

1590 
nSï
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[1]);

1592 
zSï
 = ",";

1593 
nSï
 = 1;

1595 if–
nSï
 ) 
	`sqlôe3SåAccumAµíd
(
pAccum
, 
zSï
,ÇSep);

1597 
zVÆ
 = (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

1598 
nVÆ
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[0]);

1599 if–
zVÆ
 ) 
	`sqlôe3SåAccumAµíd
(
pAccum
, zVÆ, 
nVÆ
);

1601 
	}
}

1602 
	$groupC⁄ˇtFöÆize
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
){

1603 
SåAccum
 *
pAccum
;

1604 
pAccum
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, 0);

1605 if–
pAccum
 ){

1606 if–
pAccum
->
accEº‹
==
STRACCUM_TOOBIG
 ){

1607 
	`sqlôe3_ªsu…_îr‹_toobig
(
c⁄ãxt
);

1608 }if–
pAccum
->
accEº‹
==
STRACCUM_NOMEM
 ){

1609 
	`sqlôe3_ªsu…_îr‹_nomem
(
c⁄ãxt
);

1611 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
	`sqlôe3SåAccumFöish
(
pAccum
), -1,

1612 
sqlôe3_‰ì
);

1615 
	}
}

1622 
	$sqlôe3Regi°îPîC⁄√˘i⁄BuûtöFun˘i⁄s
(
sqlôe3
 *
db
){

1623 
rc
 = 
	`sqlôe3_ovîlﬂd_fun˘i⁄
(
db
, "MATCH", 2);

1624 
	`as£π
–
rc
==
SQLITE_NOMEM
 ||Ñc==
SQLITE_OK
 );

1625 if–
rc
==
SQLITE_NOMEM
 ){

1626 
	`sqlôe3OomFau…
(
db
);

1628 
	}
}

1633 
	$£tLikeO±Fœg
(
sqlôe3
 *
db
, c⁄° *
zName
, 
u8
 
ÊagVÆ
){

1634 
FuncDef
 *
pDef
;

1635 
pDef
 = 
	`sqlôe3FödFun˘i⁄
(
db
, 
zName
, 2, 
SQLITE_UTF8
, 0);

1636 if–
	`ALWAYS
(
pDef
) ){

1637 
pDef
->
funcFœgs
 |
ÊagVÆ
;

1639 
	}
}

1646 
	$sqlôe3Regi°îLikeFun˘i⁄s
(
sqlôe3
 *
db
, 
ˇ£Sísôive
){

1647 
com∑ªInfo
 *
pInfo
;

1648 if–
ˇ£Sísôive
 ){

1649 
pInfo
 = (
com∑ªInfo
*)&
likeInfoA…
;

1651 
pInfo
 = (
com∑ªInfo
*)&
likeInfoN‹m
;

1653 
	`sqlôe3Cª©eFunc
(
db
, "like", 2, 
SQLITE_UTF8
, 
pInfo
, 
likeFunc
, 0, 0, 0);

1654 
	`sqlôe3Cª©eFunc
(
db
, "like", 3, 
SQLITE_UTF8
, 
pInfo
, 
likeFunc
, 0, 0, 0);

1655 
	`sqlôe3Cª©eFunc
(
db
, "glob", 2, 
SQLITE_UTF8
,

1656 (
com∑ªInfo
*)&
globInfo
, 
likeFunc
, 0, 0, 0);

1657 
	`£tLikeO±Fœg
(
db
, "glob", 
SQLITE_FUNC_LIKE
 | 
SQLITE_FUNC_CASE
);

1658 
	`£tLikeO±Fœg
(
db
, "like",

1659 
ˇ£Sísôive
 ? (
SQLITE_FUNC_LIKE
 | 
SQLITE_FUNC_CASE
) : SQLITE_FUNC_LIKE);

1660 
	}
}

1674 
	$sqlôe3IsLikeFun˘i⁄
(
sqlôe3
 *
db
, 
Ex¥
 *
pEx¥
, *
pIsNoˇ£
, *
aWc
){

1675 
FuncDef
 *
pDef
;

1676 if–
pEx¥
->
›
!=
TK_FUNCTION


1677 || !
pEx¥
->
x
.
pLi°


1678 || 
pEx¥
->
x
.
pLi°
->
nEx¥
!=2

1682 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_xIsSñe˘
) );

1683 
pDef
 = 
	`sqlôe3FödFun˘i⁄
(
db
, 
pEx¥
->
u
.
zTokí
, 2, 
SQLITE_UTF8
, 0);

1684 if–
	`NEVER
(
pDef
==0Ë|| (pDef->
funcFœgs
 & 
SQLITE_FUNC_LIKE
)==0 ){

1692 
	`mem˝y
(
aWc
, 
pDef
->
pU£rD©a
, 3);

1693 
	`as£π
–(*)&
likeInfoA…
 =(*)&likeInfoA….
m©chAŒ
 );

1694 
	`as£π
–&((*)&
likeInfoA…
)[1] =(*)&likeInfoA….
m©chO√
 );

1695 
	`as£π
–&((*)&
likeInfoA…
)[2] =(*)&likeInfoA….
m©chSë
 );

1696 *
pIsNoˇ£
 = (
pDef
->
funcFœgs
 & 
SQLITE_FUNC_CASE
)==0;

1698 
	}
}

1707 
	$sqlôe3Regi°îBuûtöFun˘i⁄s
(){

1718 
FuncDef
 
aBuûtöFunc
[] = {

1719 #ifde‡
SQLITE_SOUNDEX


1720 
	`FUNCTION
(
soundex
, 1, 0, 0, 
soundexFunc
 ),

1722 #i‚de‡
SQLITE_OMIT_LOAD_EXTENSION


1723 
	`VFUNCTION
(
lﬂd_exãnsi⁄
, 1, 0, 0, 
lﬂdExt
 ),

1724 
	`VFUNCTION
(
lﬂd_exãnsi⁄
, 2, 0, 0, 
lﬂdExt
 ),

1726 #i‡
SQLITE_USER_AUTHENTICATION


1727 
	`FUNCTION
(
sqlôe_¸y±
, 2, 0, 0, 
sqlôe3Cry±Func
 ),

1729 #i‚de‡
SQLITE_OMIT_COMPILEOPTION_DIAGS


1730 
	`DFUNCTION
(
sqlôe_compûe›ti⁄_u£d
,1, 0, 0, 
compûe›ti⁄u£dFunc
 ),

1731 
	`DFUNCTION
(
sqlôe_compûe›ti⁄_gë
, 1, 0, 0, 
compûe›ti⁄gëFunc
 ),

1733 
	`FUNCTION2
(
u∆ikñy
, 1, 0, 0, 
no›Func
, 
SQLITE_FUNC_UNLIKELY
),

1734 
	`FUNCTION2
(
likñihood
, 2, 0, 0, 
no›Func
, 
SQLITE_FUNC_UNLIKELY
),

1735 
	`FUNCTION2
(
likñy
, 1, 0, 0, 
no›Func
, 
SQLITE_FUNC_UNLIKELY
),

1736 
	`FUNCTION
(
…rim
, 1, 1, 0, 
åimFunc
 ),

1737 
	`FUNCTION
(
…rim
, 2, 1, 0, 
åimFunc
 ),

1738 
	`FUNCTION
(
πrim
, 1, 2, 0, 
åimFunc
 ),

1739 
	`FUNCTION
(
πrim
, 2, 2, 0, 
åimFunc
 ),

1740 
	`FUNCTION
(
åim
, 1, 3, 0, 
åimFunc
 ),

1741 
	`FUNCTION
(
åim
, 2, 3, 0, 
åimFunc
 ),

1742 
	`FUNCTION
(
mö
, -1, 0, 1, 
mömaxFunc
 ),

1743 
	`FUNCTION
(
mö
, 0, 0, 1, 0 ),

1744 
	`AGGREGATE2
(
mö
, 1, 0, 1, 
mömaxSãp
, 
möMaxFöÆize
,

1745 
SQLITE_FUNC_MINMAX
 ),

1746 
	`FUNCTION
(
max
, -1, 1, 1, 
mömaxFunc
 ),

1747 
	`FUNCTION
(
max
, 0, 1, 1, 0 ),

1748 
	`AGGREGATE2
(
max
, 1, 1, 1, 
mömaxSãp
, 
möMaxFöÆize
,

1749 
SQLITE_FUNC_MINMAX
 ),

1750 
	`FUNCTION2
(
ty≥of
, 1, 0, 0, 
ty≥ofFunc
, 
SQLITE_FUNC_TYPEOF
),

1751 
	`FUNCTION2
(
Àngth
, 1, 0, 0, 
ÀngthFunc
, 
SQLITE_FUNC_LENGTH
),

1752 
	`FUNCTION
(
ö°r
, 2, 0, 0, 
ö°rFunc
 ),

1753 
	`FUNCTION
(
¥ötf
, -1, 0, 0, 
¥ötfFunc
 ),

1754 
	`FUNCTION
(
unicode
, 1, 0, 0, 
unicodeFunc
 ),

1755 
	`FUNCTION
(, -1, 0, 0, 
ch¨Func
 ),

1756 
	`FUNCTION
(
abs
, 1, 0, 0, 
absFunc
 ),

1757 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


1758 
	`FUNCTION
(
round
, 1, 0, 0, 
roundFunc
 ),

1759 
	`FUNCTION
(
round
, 2, 0, 0, 
roundFunc
 ),

1761 
	`FUNCTION
(
uµî
, 1, 0, 0, 
uµîFunc
 ),

1762 
	`FUNCTION
(
lowî
, 1, 0, 0, 
lowîFunc
 ),

1763 
	`FUNCTION
(
hex
, 1, 0, 0, 
hexFunc
 ),

1764 
	`FUNCTION2
(
i‚uŒ
, 2, 0, 0, 
no›Func
, 
SQLITE_FUNC_COALESCE
),

1765 
	`VFUNCTION
(
øndom
, 0, 0, 0, 
øndomFunc
 ),

1766 
	`VFUNCTION
(
øndomblob
, 1, 0, 0, 
øndomBlob
 ),

1767 
	`FUNCTION
(
nuŒif
, 2, 0, 1, 
nuŒifFunc
 ),

1768 
	`DFUNCTION
(
sqlôe_vîsi⁄
, 0, 0, 0, 
vîsi⁄Func
 ),

1769 
	`DFUNCTION
(
sqlôe_sour˚_id
, 0, 0, 0, 
sour˚idFunc
 ),

1770 
	`FUNCTION
(
sqlôe_log
, 2, 0, 0, 
îæogFunc
 ),

1771 
	`FUNCTION
(
quŸe
, 1, 0, 0, 
quŸeFunc
 ),

1772 
	`VFUNCTION
(
œ°_ö£π_rowid
, 0, 0, 0,Üast_insert_rowid),

1773 
	`VFUNCTION
(
ch™ges
, 0, 0, 0, changes ),

1774 
	`VFUNCTION
(
tŸÆ_ch™ges
, 0, 0, 0,Åotal_changes ),

1775 
	`FUNCTION
(
ª∂a˚
, 3, 0, 0, 
ª∂a˚Func
 ),

1776 
	`FUNCTION
(
zîoblob
, 1, 0, 0, 
zîoblobFunc
 ),

1777 
	`FUNCTION
(
sub°r
, 2, 0, 0, 
sub°rFunc
 ),

1778 
	`FUNCTION
(
sub°r
, 3, 0, 0, 
sub°rFunc
 ),

1779 
	`AGGREGATE
(
sum
, 1, 0, 0, 
sumSãp
, 
sumFöÆize
 ),

1780 
	`AGGREGATE
(
tŸÆ
, 1, 0, 0, 
sumSãp
, 
tŸÆFöÆize
 ),

1781 
	`AGGREGATE
(
avg
, 1, 0, 0, 
sumSãp
, 
avgFöÆize
 ),

1782 
	`AGGREGATE2
(
cou¡
, 0, 0, 0, 
cou¡Sãp
, 
cou¡FöÆize
,

1783 
SQLITE_FUNC_COUNT
 ),

1784 
	`AGGREGATE
(
cou¡
, 1, 0, 0, 
cou¡Sãp
, 
cou¡FöÆize
 ),

1785 
	`AGGREGATE
(
group_c⁄ˇt
, 1, 0, 0, 
groupC⁄ˇtSãp
, 
groupC⁄ˇtFöÆize
),

1786 
	`AGGREGATE
(
group_c⁄ˇt
, 2, 0, 0, 
groupC⁄ˇtSãp
, 
groupC⁄ˇtFöÆize
),

1788 
	`LIKEFUNC
(
glob
, 2, &
globInfo
, 
SQLITE_FUNC_LIKE
|
SQLITE_FUNC_CASE
),

1789 #ifde‡
SQLITE_CASE_SENSITIVE_LIKE


1790 
	`LIKEFUNC
(
like
, 2, &
likeInfoA…
, 
SQLITE_FUNC_LIKE
|
SQLITE_FUNC_CASE
),

1791 
	`LIKEFUNC
(
like
, 3, &
likeInfoA…
, 
SQLITE_FUNC_LIKE
|
SQLITE_FUNC_CASE
),

1793 
	`LIKEFUNC
(
like
, 2, &
likeInfoN‹m
, 
SQLITE_FUNC_LIKE
),

1794 
	`LIKEFUNC
(
like
, 3, &
likeInfoN‹m
, 
SQLITE_FUNC_LIKE
),

1796 
	`FUNCTION
(
cﬂÀs˚
, 1, 0, 0, 0 ),

1797 
	`FUNCTION
(
cﬂÀs˚
, 0, 0, 0, 0 ),

1798 
	`FUNCTION2
(
cﬂÀs˚
, -1, 0, 0, 
no›Func
, 
SQLITE_FUNC_COALESCE
),

1800 #i‚de‡
SQLITE_OMIT_ALTERTABLE


1801 
	`sqlôe3A…îFun˘i⁄s
();

1803 #i‡
	`deföed
(
SQLITE_ENABLE_STAT3
Ë|| deföed(
SQLITE_ENABLE_STAT4
)

1804 
	`sqlôe3A«lyzeFun˘i⁄s
();

1806 
	`sqlôe3Regi°îD©eTimeFun˘i⁄s
();

1807 
	`sqlôe3In£πBuûtöFuncs
(
aBuûtöFunc
, 
	`AºaySize
(aBuiltinFunc));

1811 
i
;

1812 
FuncDef
 *
p
;

1813 
i
=0; i<
SQLITE_FUNC_HASH_SZ
; i++){

1814 
	`¥ötf
("FUNC-HASH %02d:", 
i
);

1815 
p
=
sqlôe3BuûtöFun˘i⁄s
.
a
[
i
];Ö;Öı->
u
.
pHash
){

1816 
n
 = 
	`sqlôe3SåÀn30
(
p
->
zName
);

1817 
h
 = 
p
->
zName
[0] + 
n
;

1818 
	`¥ötf
(" %s(%d)", 
p
->
zName
, 
h
);

1820 
	`¥ötf
("\n");

1824 
	}
}

	@global.c

15 
	~"sqlôeI¡.h
"

24 c⁄° 
	gsqlôe3UµîToLowî
[] = {

25 #ifde‡
SQLITE_ASCII


42 #ifde‡
SQLITE_EBCDIC


93 #ifde‡
SQLITE_ASCII


94 c⁄° 
	gsqlôe3Cty≥M≠
[256] = {

144 #i‚de‡
SQLITE_USE_URI


145 
	#SQLITE_USE_URI
 0

	)

152 #i‚de‡
SQLITE_ALLOW_COVERING_INDEX_SCAN


153 
	#SQLITE_ALLOW_COVERING_INDEX_SCAN
 1

	)

159 #i‚de‡
SQLITE_SORTER_PMASZ


160 
	#SQLITE_SORTER_PMASZ
 250

	)

171 #i‚de‡
SQLITE_STMTJRNL_SPILL


172 
	#SQLITE_STMTJRNL_SPILL
 (64*1024)

	)

179 
SQLITE_WSD
 
Sqlôe3C⁄fig
 
	gsqlôe3C⁄fig
 = {

180 
SQLITE_DEFAULT_MEMSTATUS
,

182 
SQLITE_THREADSAFE
==1,

183 
	gSQLITE_USE_URI
,

184 
	gSQLITE_ALLOW_COVERING_INDEX_SCAN
,

189 
	gSQLITE_STMTJRNL_SPILL
,

196 
	gSQLITE_DEFAULT_MMAP_SIZE
,

197 
	gSQLITE_MAX_MMAP_SIZE
,

203 
	gSQLITE_DEFAULT_PCACHE_INITSZ
,

206 
	gSQLITE_SORTER_PMASZ
,

217 #ifde‡
SQLITE_ENABLE_SQLLOG


221 #ifde‡
SQLITE_VDBE_COVERAGE


225 #i‚de‡
SQLITE_OMIT_BUILTIN_TEST


236 
FuncDefHash
 
	gsqlôe3BuûtöFun˘i⁄s
;

241 c⁄° 
Tokí
 
	gsqlôe3I¡Tokís
[] = {

265 #i‚de‡
SQLITE_OMIT_WSD


266 
	gsqlôe3PídögByã
 = 0x40000000;

269 
	~"›codes.h
"

276 c⁄° 
	gsqlôe3OpcodePr›îty
[] = 
OPFLG_INITIALIZER
;

281 c⁄° 
	gsqlôe3SåBINARY
[] = "BINARY";

	@hash.c

15 
	~"sqlôeI¡.h
"

16 
	~<as£π.h
>

23 
	$sqlôe3HashInô
(
Hash
 *
pNew
){

24 
	`as£π
–
pNew
!=0 );

25 
pNew
->
fú°
 = 0;

26 
pNew
->
cou¡
 = 0;

27 
pNew
->
htsize
 = 0;

28 
pNew
->
ht
 = 0;

29 
	}
}

35 
	$sqlôe3HashCÀ¨
(
Hash
 *
pH
){

36 
HashEÀm
 *
ñem
;

38 
	`as£π
–
pH
!=0 );

39 
ñem
 = 
pH
->
fú°
;

40 
pH
->
fú°
 = 0;

41 
	`sqlôe3_‰ì
(
pH
->
ht
);

42 
pH
->
ht
 = 0;

43 
pH
->
htsize
 = 0;

44  
ñem
 ){

45 
HashEÀm
 *
√xt_ñem
 = 
ñem
->
√xt
;

46 
	`sqlôe3_‰ì
(
ñem
);

47 
ñem
 = 
√xt_ñem
;

49 
pH
->
cou¡
 = 0;

50 
	}
}

55 
	$°rHash
(c⁄° *
z
){

56 
h
 = 0;

57 
c
;

58  (
c
 = ()*
z
++)!=0 ){

59 
h
 = (h<<3Ë^ h ^ 
sqlôe3UµîToLowî
[
c
];

61  
h
;

62 
	}
}

68 
	$ö£πEÀmít
(

69 
Hash
 *
pH
,

70 
_ht
 *
pE¡ry
,

71 
HashEÀm
 *
pNew


73 
HashEÀm
 *
pHód
;

74 if–
pE¡ry
 ){

75 
pHód
 = 
pE¡ry
->
cou¡
 ?ÖE¡ry->
chaö
 : 0;

76 
pE¡ry
->
cou¡
++;

77 
pE¡ry
->
chaö
 = 
pNew
;

79 
pHód
 = 0;

81 if–
pHód
 ){

82 
pNew
->
√xt
 = 
pHód
;

83 
pNew
->
¥ev
 = 
pHód
->prev;

84 if–
pHód
->
¥ev
 ){ÖHód->¥ev->
√xt
 = 
pNew
; }

85 { 
pH
->
fú°
 = 
pNew
; }

86 
pHód
->
¥ev
 = 
pNew
;

88 
pNew
->
√xt
 = 
pH
->
fú°
;

89 if–
pH
->
fú°
 ){ÖH->fú°->
¥ev
 = 
pNew
; }

90 
pNew
->
¥ev
 = 0;

91 
pH
->
fú°
 = 
pNew
;

93 
	}
}

102 
	$ªhash
(
Hash
 *
pH
, 
√w_size
){

103 
_ht
 *
√w_ht
;

104 
HashEÀm
 *
ñem
, *
√xt_ñem
;

106 #i‡
SQLITE_MALLOC_SOFT_LIMIT
>0

107 if–
√w_size
*(
_ht
)>
SQLITE_MALLOC_SOFT_LIMIT
 ){

108 
√w_size
 = 
SQLITE_MALLOC_SOFT_LIMIT
/(
_ht
);

110 if–
√w_size
==
pH
->
htsize
 )  0;

121 
	`sqlôe3BegöBíignMÆloc
();

122 
√w_ht
 = (
_ht
 *)
	`sqlôe3MÆloc
–
√w_size
*(_ht) );

123 
	`sqlôe3EndBíignMÆloc
();

125 if–
√w_ht
==0 )  0;

126 
	`sqlôe3_‰ì
(
pH
->
ht
);

127 
pH
->
ht
 = 
√w_ht
;

128 
pH
->
htsize
 = 
√w_size
 = 
	`sqlôe3MÆlocSize
(
√w_ht
)/(
_ht
);

129 
	`mem£t
(
√w_ht
, 0, 
√w_size
*(
_ht
));

130 
ñem
=
pH
->
fú°
,ÖH->fú°=0;ÉÀm;ÉÀm = 
√xt_ñem
){

131 
h
 = 
	`°rHash
(
ñem
->
pKey
Ë% 
√w_size
;

132 
√xt_ñem
 = 
ñem
->
√xt
;

133 
	`ö£πEÀmít
(
pH
, &
√w_ht
[
h
], 
ñem
);

136 
	}
}

142 
HashEÀm
 *
	$födEÀmítWôhHash
(

143 c⁄° 
Hash
 *
pH
,

144 c⁄° *
pKey
,

145 *
pHash


147 
HashEÀm
 *
ñem
;

148 
cou¡
;

149 
h
;

151 if–
pH
->
ht
 ){

152 
_ht
 *
pE¡ry
;

153 
h
 = 
	`°rHash
(
pKey
Ë% 
pH
->
htsize
;

154 
pE¡ry
 = &
pH
->
ht
[
h
];

155 
ñem
 = 
pE¡ry
->
chaö
;

156 
cou¡
 = 
pE¡ry
->count;

158 
h
 = 0;

159 
ñem
 = 
pH
->
fú°
;

160 
cou¡
 = 
pH
->count;

162 *
pHash
 = 
h
;

163  
cou¡
-- ){

164 
	`as£π
–
ñem
!=0 );

165 if–
	`sqlôe3SåICmp
(
ñem
->
pKey
,pKey)==0 ){

166  
ñem
;

168 
ñem
 =ÉÀm->
√xt
;

171 
	}
}

176 
	$ªmoveEÀmítGivíHash
(

177 
Hash
 *
pH
,

178 
HashEÀm
* 
ñem
,

179 
h


181 
_ht
 *
pE¡ry
;

182 if–
ñem
->
¥ev
 ){

183 
ñem
->
¥ev
->
√xt
 =Élem->next;

185 
pH
->
fú°
 = 
ñem
->
√xt
;

187 if–
ñem
->
√xt
 ){

188 
ñem
->
√xt
->
¥ev
 =Élem->prev;

190 if–
pH
->
ht
 ){

191 
pE¡ry
 = &
pH
->
ht
[
h
];

192 if–
pE¡ry
->
chaö
==
ñem
 ){

193 
pE¡ry
->
chaö
 = 
ñem
->
√xt
;

195 
pE¡ry
->
cou¡
--;

196 
	`as£π
–
pE¡ry
->
cou¡
>=0 );

198 
	`sqlôe3_‰ì
–
ñem
 );

199 
pH
->
cou¡
--;

200 if–
pH
->
cou¡
==0 ){

201 
	`as£π
–
pH
->
fú°
==0 );

202 
	`as£π
–
pH
->
cou¡
==0 );

203 
	`sqlôe3HashCÀ¨
(
pH
);

205 
	}
}

211 *
	$sqlôe3HashFöd
(c⁄° 
Hash
 *
pH
, c⁄° *
pKey
){

212 
HashEÀm
 *
ñem
;

213 
h
;

215 
	`as£π
–
pH
!=0 );

216 
	`as£π
–
pKey
!=0 );

217 
ñem
 = 
	`födEÀmítWôhHash
(
pH
, 
pKey
, &
h
);

218  
ñem
 ?ÉÀm->
d©a
 : 0;

219 
	}
}

235 *
	$sqlôe3HashIn£π
(
Hash
 *
pH
, c⁄° *
pKey
, *
d©a
){

236 
h
;

237 
HashEÀm
 *
ñem
;

238 
HashEÀm
 *
√w_ñem
;

240 
	`as£π
–
pH
!=0 );

241 
	`as£π
–
pKey
!=0 );

242 
ñem
 = 
	`födEÀmítWôhHash
(
pH
,
pKey
,&
h
);

243 if–
ñem
 ){

244 *
ﬁd_d©a
 = 
ñem
->
d©a
;

245 if–
d©a
==0 ){

246 
	`ªmoveEÀmítGivíHash
(
pH
,
ñem
,
h
);

248 
ñem
->
d©a
 = data;

249 
ñem
->
pKey
 =ÖKey;

251  
ﬁd_d©a
;

253 if–
d©a
==0 )  0;

254 
√w_ñem
 = (
HashEÀm
*)
	`sqlôe3MÆloc
( (HashElem) );

255 if–
√w_ñem
==0 )  
d©a
;

256 
√w_ñem
->
pKey
 =ÖKey;

257 
√w_ñem
->
d©a
 = data;

258 
pH
->
cou¡
++;

259 if–
pH
->
cou¡
>=10 &&ÖH->cou¡ > 2*pH->
htsize
 ){

260 if–
	`ªhash
(
pH
,ÖH->
cou¡
*2) ){

261 
	`as£π
–
pH
->
htsize
>0 );

262 
h
 = 
	`°rHash
(
pKey
Ë% 
pH
->
htsize
;

265 
	`ö£πEÀmít
(
pH
,ÖH->
ht
 ? &pH->ht[
h
] : 0, 
√w_ñem
);

267 
	}
}

	@hash.h

15 #i‚de‡
_SQLITE_HASH_H_


16 
	#_SQLITE_HASH_H_


	)

19 
Hash
 
	tHash
;

20 
HashEÀm
 
	tHashEÀm
;

43 
	sHash
 {

44 
	mhtsize
;

45 
	mcou¡
;

46 
HashEÀm
 *
	mfú°
;

47 
	s_ht
 {

48 
	mcou¡
;

49 
HashEÀm
 *
	mchaö
;

50 } *
	mht
;

59 
	sHashEÀm
 {

60 
HashEÀm
 *
	m√xt
, *
	m¥ev
;

61 *
	md©a
;

62 c⁄° *
	mpKey
;

68 
sqlôe3HashInô
(
Hash
*);

69 *
sqlôe3HashIn£π
(
Hash
*, c⁄° *
pKey
, *
pD©a
);

70 *
sqlôe3HashFöd
(c⁄° 
Hash
*, c⁄° *
pKey
);

71 
sqlôe3HashCÀ¨
(
Hash
*);

85 
	#sqlôeHashFú°
(
H
Ë((H)->
fú°
)

	)

86 
	#sqlôeHashNext
(
E
Ë((E)->
√xt
)

	)

87 
	#sqlôeHashD©a
(
E
Ë((E)->
d©a
)

	)

	@hwtime.h

16 #i‚de‡
_HWTIME_H_


17 
	#_HWTIME_H_


	)

25 #i‡(
deföed
(
__GNUC__
Ë|| deföed(
_MSC_VER
)) && \

26 (
deföed
(
i386
Ë|| deföed(
__i386__
Ë|| 
	$deföed
(
_M_IX86
))

28 #i‡
	`deföed
(
__GNUC__
)

30 
__ölöe__
 
sqlôe_uöt64
 
	$sqlôe3Hwtime
(){

31 
lo
, 
hi
;

32 
__asm__
 
	`__vﬁ©ûe__
 ("rdtsc" : "˜" (
lo
), "=d" (
hi
));

33  (
sqlôe_uöt64
)
hi
 << 32 | 
lo
;

34 
	}
}

36 #ñi‡
deföed
(
_MSC_VER
)

38 
	$__de˛•ec
(
«ked
Ë
__ölöe
 
sqlôe_uöt64
 
__cde˛
 
	$sqlôe3Hwtime
(){

39 
__asm
 {

40 
rdtsc


41 
ªt
 ;  
vÆue
 
©
 
EDX
:
EAX


43 
	}
}

47 #ñi‡(
deföed
(
__GNUC__
Ë&& deföed(
__x86_64__
))

49 
__ölöe__
 
sqlôe_uöt64
 
	$sqlôe3Hwtime
(){

50 
vÆ
;

51 
__asm__
 
	`__vﬁ©ûe__
 ("rdtsc" : "=A" (
vÆ
));

52  
vÆ
;

53 
	}
}

55 #ñi‡(
deföed
(
__GNUC__
Ë&& deföed(
__µc__
))

57 
__ölöe__
 
sqlôe_uöt64
 
	$sqlôe3Hwtime
(){

58 
ªtvÆ
;

59 
junk
;

60 
__asm__
 
	`__vﬁ©ûe__
 ("\n\
1: mftbu %1\n\
 %L0\n\
 %0\n\
 %0,%1\n\
 1b"

66 : "Ù" (
ªtvÆ
), "Ù" (
junk
));

67  
ªtvÆ
;

68 
	}
}

72 #îr‹ 
Nìd
 
im∂emíèti⁄
 
of
 
sqlôe3Hwtime
(Ë
your
 
∂©f‹m
.

81 
sqlôe_uöt64
 
	$sqlôe3Hwtime
(){  ((
sqlôe_uöt64
)0); 
	}
}

	@insert.c

15 
	~"sqlôeI¡.h
"

26 
	$sqlôe3O≥nTabÀ
(

27 
P¨£
 *
pP¨£
,

28 
iCur
,

29 
iDb
,

30 
TabÀ
 *
pTab
,

31 
›code


33 
Vdbe
 *
v
;

34 
	`as£π
–!
	`IsVútuÆ
(
pTab
) );

35 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

36 
	`as£π
–
›code
==
OP_O≥nWrôe
 || opcode==
OP_O≥nRód
 );

37 
	`sqlôe3TabÀLock
(
pP¨£
, 
iDb
, 
pTab
->
äum
,

38 (
›code
==
OP_O≥nWrôe
)?1:0, 
pTab
->
zName
);

39 if–
	`HasRowid
(
pTab
) ){

40 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
›code
, 
iCur
, 
pTab
->
äum
, 
iDb
,ÖTab->
nCﬁ
);

41 
	`VdbeCommít
((
v
, "%s", 
pTab
->
zName
));

43 
Index
 *
pPk
 = 
	`sqlôe3Prim¨yKeyIndex
(
pTab
);

44 
	`as£π
–
pPk
!=0 );

45 
	`as£π
–
pPk
->
äum
==
pTab
->tnum );

46 
	`sqlôe3VdbeAddOp3
(
v
, 
›code
, 
iCur
, 
pPk
->
äum
, 
iDb
);

47 
	`sqlôe3VdbeSëP4KeyInfo
(
pP¨£
, 
pPk
);

48 
	`VdbeCommít
((
v
, "%s", 
pTab
->
zName
));

50 
	}
}

72 c⁄° *
	$sqlôe3IndexAfföôySå
(
sqlôe3
 *
db
, 
Index
 *
pIdx
){

73 if–!
pIdx
->
zCﬁAff
 ){

82 
n
;

83 
TabÀ
 *
pTab
 = 
pIdx
->
pTabÀ
;

84 
pIdx
->
zCﬁAff
 = (*)
	`sqlôe3DbMÆlocRaw
(0,ÖIdx->
nCﬁumn
+1);

85 if–!
pIdx
->
zCﬁAff
 ){

86 
	`sqlôe3OomFau…
(
db
);

89 
n
=0;Ç<
pIdx
->
nCﬁumn
;Ç++){

90 
i16
 
x
 = 
pIdx
->
aiCﬁumn
[
n
];

91 if–
x
>=0 ){

92 
pIdx
->
zCﬁAff
[
n
] = 
pTab
->
aCﬁ
[
x
].
afföôy
;

93 }if–
x
==
XN_ROWID
 ){

94 
pIdx
->
zCﬁAff
[
n
] = 
SQLITE_AFF_INTEGER
;

96 
aff
;

97 
	`as£π
–
x
==
XN_EXPR
 );

98 
	`as£π
–
pIdx
->
aCﬁEx¥
!=0 );

99 
aff
 = 
	`sqlôe3Ex¥Afföôy
(
pIdx
->
aCﬁEx¥
->
a
[
n
].
pEx¥
);

100 if–
aff
==0 )áf‡
SQLITE_AFF_BLOB
;

101 
pIdx
->
zCﬁAff
[
n
] = 
aff
;

104 
pIdx
->
zCﬁAff
[
n
] = 0;

107  
pIdx
->
zCﬁAff
;

108 
	}
}

130 
	$sqlôe3TabÀAfföôy
(
Vdbe
 *
v
, 
TabÀ
 *
pTab
, 
iReg
){

131 
i
;

132 *
zCﬁAff
 = 
pTab
->zColAff;

133 if–
zCﬁAff
==0 ){

134 
sqlôe3
 *
db
 = 
	`sqlôe3VdbeDb
(
v
);

135 
zCﬁAff
 = (*)
	`sqlôe3DbMÆlocRaw
(0, 
pTab
->
nCﬁ
+1);

136 if–!
zCﬁAff
 ){

137 
	`sqlôe3OomFau…
(
db
);

141 
i
=0; i<
pTab
->
nCﬁ
; i++){

142 
zCﬁAff
[
i
] = 
pTab
->
aCﬁ
[i].
afföôy
;

145 
zCﬁAff
[
i
--] = 0;

146 } 
i
>=0 && 
zCﬁAff
[i]==
SQLITE_AFF_BLOB
 );

147 
pTab
->
zCﬁAff
 = zColAff;

149 
i
 = 
	`sqlôe3SåÀn30
(
zCﬁAff
);

150 if–
i
 ){

151 if–
iReg
 ){

152 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Afföôy
, 
iReg
, 
i
, 0, 
zCﬁAff
, i);

154 
	`sqlôe3VdbeCh™geP4
(
v
, -1, 
zCﬁAff
, 
i
);

157 
	}
}

165 
	$ªadsTabÀ
(
P¨£
 *
p
, 
iDb
, 
TabÀ
 *
pTab
){

166 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
p
);

167 
i
;

168 
iEnd
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

169 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


170 
VTabÀ
 *
pVTab
 = 
	`IsVútuÆ
(
pTab
Ë? 
	`sqlôe3GëVTabÀ
(
p
->
db
,ÖTab) : 0;

173 
i
=1; i<
iEnd
; i++){

174 
VdbeOp
 *
pOp
 = 
	`sqlôe3VdbeGëOp
(
v
, 
i
);

175 
	`as£π
–
pOp
!=0 );

176 if–
pOp
->
›code
==
OP_O≥nRód
 &&ÖOp->
p3
==
iDb
 ){

177 
Index
 *
pIndex
;

178 
äum
 = 
pOp
->
p2
;

179 if–
äum
==
pTab
->tnum ){

182 
pIndex
=
pTab
->pIndex;ÖIndex;ÖIndexıIndex->
pNext
){

183 if–
äum
==
pIndex
->tnum ){

188 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


189 if–
pOp
->
›code
==
OP_VO≥n
 &&ÖOp->
p4
.
pVèb
==
pVTab
 ){

190 
	`as£π
–
pOp
->
p4
.
pVèb
!=0 );

191 
	`as£π
–
pOp
->
p4ty≥
==
P4_VTAB
 );

197 
	}
}

199 #i‚de‡
SQLITE_OMIT_AUTOINCREMENT


220 
	$autoIncBegö
(

221 
P¨£
 *
pP¨£
,

222 
iDb
,

223 
TabÀ
 *
pTab


225 
memId
 = 0;

226 if–
pTab
->
èbFœgs
 & 
TF_Autoö¸emít
 ){

227 
P¨£
 *
pT›Àvñ
 = 
	`sqlôe3P¨£T›Àvñ
(
pP¨£
);

228 
AutoöcInfo
 *
pInfo
;

230 
pInfo
 = 
pT›Àvñ
->
pAöc
;

231  
pInfo
 &&ÖInfo->
pTab
!ıTab ){ÖInfÿpInfo->
pNext
; }

232 if–
pInfo
==0 ){

233 
pInfo
 = 
	`sqlôe3DbMÆlocRawNN
(
pP¨£
->
db
, (*pInfo));

234 if–
pInfo
==0 )  0;

235 
pInfo
->
pNext
 = 
pT›Àvñ
->
pAöc
;

236 
pT›Àvñ
->
pAöc
 = 
pInfo
;

237 
pInfo
->
pTab
 =ÖTab;

238 
pInfo
->
iDb
 = iDb;

239 
pT›Àvñ
->
nMem
++;

240 
pInfo
->
ªgCå
 = ++
pT›Àvñ
->
nMem
;

241 
pT›Àvñ
->
nMem
++;

243 
memId
 = 
pInfo
->
ªgCå
;

245  
memId
;

246 
	}
}

252 
	$sqlôe3Autoö¸emítBegö
(
P¨£
 *
pP¨£
){

253 
AutoöcInfo
 *
p
;

254 
sqlôe3
 *
db
 = 
pP¨£
->db;

255 
Db
 *
pDb
;

256 
memId
;

257 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

261 
	`as£π
–
pP¨£
->
pTriggîTab
==0 );

262 
	`as£π
–
	`sqlôe3IsT›Àvñ
(
pP¨£
) );

264 
	`as£π
–
v
 );

265 
p
 = 
pP¨£
->
pAöc
;Ö;Ö =Ö->
pNext
){

266 c⁄° 
iLn
 = 
	`VDBE_OFFSET_LINENO
(2);

267 c⁄° 
VdbeOpLi°
 
autoInc
[] = {

268  {
OP_NuŒ
, 0, 0, 0},

269  {
OP_Rewöd
, 0, 9, 0},

270  {
OP_Cﬁumn
, 0, 0, 0},

271  {
OP_Ne
, 0, 7, 0},

272  {
OP_Rowid
, 0, 0, 0},

273  {
OP_Cﬁumn
, 0, 1, 0},

274  {
OP_GŸo
, 0, 9, 0},

275  {
OP_Next
, 0, 2, 0},

276  {
OP_I¡egî
, 0, 0, 0},

277  {
OP_Clo£
, 0, 0, 0}

279 
VdbeOp
 *
aOp
;

280 
pDb
 = &
db
->
aDb
[
p
->
iDb
];

281 
memId
 = 
p
->
ªgCå
;

282 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 0, 
pDb
->
pSchema
) );

283 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 0, 
p
->
iDb
, 
pDb
->
pSchema
->
pSeqTab
, 
OP_O≥nRód
);

284 
	`sqlôe3VdbeLﬂdSåög
(
v
, 
memId
-1, 
p
->
pTab
->
zName
);

285 
aOp
 = 
	`sqlôe3VdbeAddOpLi°
(
v
, 
	`AºaySize
(
autoInc
),áutoInc, 
iLn
);

286 if–
aOp
==0 ) ;

287 
aOp
[0].
p2
 = 
memId
;

288 
aOp
[0].
p3
 = 
memId
+1;

289 
aOp
[2].
p3
 = 
memId
;

290 
aOp
[3].
p1
 = 
memId
-1;

291 
aOp
[3].
p3
 = 
memId
;

292 
aOp
[3].
p5
 = 
SQLITE_JUMPIFNULL
;

293 
aOp
[4].
p2
 = 
memId
+1;

294 
aOp
[5].
p3
 = 
memId
;

295 
aOp
[8].
p2
 = 
memId
;

297 
	}
}

307 
	$autoIncSãp
(
P¨£
 *
pP¨£
, 
memId
, 
ªgRowid
){

308 if–
memId
>0 ){

309 
	`sqlôe3VdbeAddOp2
(
pP¨£
->
pVdbe
, 
OP_MemMax
, 
memId
, 
ªgRowid
);

311 
	}
}

320 
SQLITE_NOINLINE
 
	$autoIn¸emítEnd
(
P¨£
 *
pP¨£
){

321 
AutoöcInfo
 *
p
;

322 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

323 
sqlôe3
 *
db
 = 
pP¨£
->db;

325 
	`as£π
–
v
 );

326 
p
 = 
pP¨£
->
pAöc
;Ö;Ö =Ö->
pNext
){

327 c⁄° 
iLn
 = 
	`VDBE_OFFSET_LINENO
(2);

328 c⁄° 
VdbeOpLi°
 
autoIncEnd
[] = {

329  {
OP_NŸNuŒ
, 0, 2, 0},

330  {
OP_NewRowid
, 0, 0, 0},

331  {
OP_MakeRec‹d
, 0, 2, 0},

332  {
OP_In£π
, 0, 0, 0},

333  {
OP_Clo£
, 0, 0, 0}

335 
VdbeOp
 *
aOp
;

336 
Db
 *
pDb
 = &
db
->
aDb
[
p
->
iDb
];

337 
iRec
;

338 
memId
 = 
p
->
ªgCå
;

340 
iRec
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

341 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 0, 
pDb
->
pSchema
) );

342 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 0, 
p
->
iDb
, 
pDb
->
pSchema
->
pSeqTab
, 
OP_O≥nWrôe
);

343 
aOp
 = 
	`sqlôe3VdbeAddOpLi°
(
v
, 
	`AºaySize
(
autoIncEnd
),áutoIncEnd, 
iLn
);

344 if–
aOp
==0 ) ;

345 
aOp
[0].
p1
 = 
memId
+1;

346 
aOp
[1].
p2
 = 
memId
+1;

347 
aOp
[2].
p1
 = 
memId
-1;

348 
aOp
[2].
p3
 = 
iRec
;

349 
aOp
[3].
p2
 = 
iRec
;

350 
aOp
[3].
p3
 = 
memId
+1;

351 
aOp
[3].
p5
 = 
OPFLAG_APPEND
;

352 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
iRec
);

354 
	}
}

355 
	$sqlôe3Autoö¸emítEnd
(
P¨£
 *
pP¨£
){

356 if–
pP¨£
->
pAöc
 ) 
	`autoIn¸emítEnd
(pParse);

357 
	}
}

363 
	#autoIncBegö
(
A
,
B
,
C
Ë(0)

	)

364 
	#autoIncSãp
(
A
,
B
,
C
)

	)

369 
x„rO±imiz©i⁄
(

370 
P¨£
 *
pP¨£
,

371 
TabÀ
 *
pDe°
,

372 
Sñe˘
 *
pSñe˘
,

373 
⁄Eº‹
,

374 
iDbDe°


474 
	$sqlôe3In£π
(

475 
P¨£
 *
pP¨£
,

476 
SrcLi°
 *
pTabLi°
,

477 
Sñe˘
 *
pSñe˘
,

478 
IdLi°
 *
pCﬁumn
,

479 
⁄Eº‹


481 
sqlôe3
 *
db
;

482 
TabÀ
 *
pTab
;

483 *
zTab
;

484 c⁄° *
zDb
;

485 
i
, 
j
, 
idx
;

486 
Vdbe
 *
v
;

487 
Index
 *
pIdx
;

488 
nCﬁumn
;

489 
nHiddí
 = 0;

490 
iD©aCur
 = 0;

491 
iIdxCur
 = 0;

492 
ùkCﬁumn
 = -1;

493 
ídOfLo›
;

494 
§cTab
 = 0;

495 
addrInsT›
 = 0;

496 
addrC⁄t
 = 0;

497 
Sñe˘De°
 
de°
;

498 
iDb
;

499 
Db
 *
pDb
;

500 
u8
 
u£TempTabÀ
 = 0;

501 
u8
 
≠≥ndFœg
 = 0;

502 
u8
 
wôhoutRowid
;

503 
u8
 
bIdLi°InOrdî
;

504 
Ex¥Li°
 *
pLi°
 = 0;

507 
ªgFromSñe˘
 = 0;

508 
ªgAutoöc
 = 0;

509 
ªgRowCou¡
 = 0;

510 
ªgIns
;

511 
ªgRowid
;

512 
ªgD©a
;

513 *
aRegIdx
 = 0;

515 #i‚de‡
SQLITE_OMIT_TRIGGER


516 
isVõw
;

517 
Triggî
 *
pTriggî
;

518 
tmask
;

521 
db
 = 
pP¨£
->db;

522 
	`mem£t
(&
de°
, 0, (dest));

523 if–
pP¨£
->
nEº
 || 
db
->
mÆlocFaûed
 ){

524 
ö£π_˛ónup
;

531 if–
pSñe˘
 && (pSñe˘->
£lFœgs
 & 
SF_VÆues
)!=0 &&ÖSñe˘->
pPri‹
==0 ){

532 
pLi°
 = 
pSñe˘
->
pELi°
;

533 
pSñe˘
->
pELi°
 = 0;

534 
	`sqlôe3Sñe˘Dñëe
(
db
, 
pSñe˘
);

535 
pSñe˘
 = 0;

540 
	`as£π
–
pTabLi°
->
nSrc
==1 );

541 
zTab
 = 
pTabLi°
->
a
[0].
zName
;

542 if–
	`NEVER
(
zTab
==0ËË
ö£π_˛ónup
;

543 
pTab
 = 
	`sqlôe3SrcLi°Lookup
(
pP¨£
, 
pTabLi°
);

544 if–
pTab
==0 ){

545 
ö£π_˛ónup
;

547 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pTab
->
pSchema
);

548 
	`as£π
–
iDb
<
db
->
nDb
 );

549 
pDb
 = &
db
->
aDb
[
iDb
];

550 
zDb
 = 
pDb
->
zName
;

551 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_INSERT
, 
pTab
->
zName
, 0, 
zDb
) ){

552 
ö£π_˛ónup
;

554 
wôhoutRowid
 = !
	`HasRowid
(
pTab
);

559 #i‚de‡
SQLITE_OMIT_TRIGGER


560 
pTriggî
 = 
	`sqlôe3TriggîsExi°
(
pP¨£
, 
pTab
, 
TK_INSERT
, 0, &
tmask
);

561 
isVõw
 = 
pTab
->
pSñe˘
!=0;

563 
	#pTriggî
 0

	)

564 
	#tmask
 0

	)

565 
	#isVõw
 0

	)

567 #ifde‡
SQLITE_OMIT_VIEW


568 #unde‡
isVõw


569 
	#isVõw
 0

	)

571 
	`as£π
–(
pTriggî
 && 
tmask
) || (pTrigger==0 &&Åmask==0) );

576 if–
	`sqlôe3VõwGëCﬁumnNames
(
pP¨£
, 
pTab
) ){

577 
ö£π_˛ónup
;

582 if–
	`sqlôe3IsRódO∆y
(
pP¨£
, 
pTab
, 
tmask
) ){

583 
ö£π_˛ónup
;

588 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

589 if–
v
==0 ) 
ö£π_˛ónup
;

590 if–
pP¨£
->
√°ed
==0 ) 
	`sqlôe3VdbeCou¡Ch™ges
(
v
);

591 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 
pSñe˘
 || 
pTriggî
, 
iDb
);

593 #i‚de‡
SQLITE_OMIT_XFER_OPT


603 if–
pCﬁumn
==0 && 
	`x„rO±imiz©i⁄
(
pP¨£
, 
pTab
, 
pSñe˘
, 
⁄Eº‹
, 
iDb
) ){

604 
	`as£π
–!
pTriggî
 );

605 
	`as£π
–
pLi°
==0 );

606 
ö£π_íd
;

613 
ªgAutoöc
 = 
	`autoIncBegö
(
pP¨£
, 
iDb
, 
pTab
);

618 
ªgRowid
 = 
ªgIns
 = 
pP¨£
->
nMem
+1;

619 
pP¨£
->
nMem
 +
pTab
->
nCﬁ
 + 1;

620 if–
	`IsVútuÆ
(
pTab
) ){

621 
ªgRowid
++;

622 
pP¨£
->
nMem
++;

624 
ªgD©a
 = 
ªgRowid
+1;

637 
bIdLi°InOrdî
 = (
pTab
->
èbFœgs
 & 
TF_OOOHiddí
)==0;

638 if–
pCﬁumn
 ){

639 
i
=0; i<
pCﬁumn
->
nId
; i++){

640 
pCﬁumn
->
a
[
i
].
idx
 = -1;

642 
i
=0; i<
pCﬁumn
->
nId
; i++){

643 
j
=0; j<
pTab
->
nCﬁ
; j++){

644 if–
	`sqlôe3SåICmp
(
pCﬁumn
->
a
[
i
].
zName
, 
pTab
->
aCﬁ
[
j
].zName)==0 ){

645 
pCﬁumn
->
a
[
i
].
idx
 = 
j
;

646 if–
i
!=
j
 ) 
bIdLi°InOrdî
 = 0;

647 if–
j
==
pTab
->
iPKey
 ){

648 
ùkCﬁumn
 = 
i
; 
	`as£π
–!
wôhoutRowid
 );

653 if–
j
>=
pTab
->
nCﬁ
 ){

654 if–
	`sqlôe3IsRowid
(
pCﬁumn
->
a
[
i
].
zName
Ë&& !
wôhoutRowid
 ){

655 
ùkCﬁumn
 = 
i
;

656 
bIdLi°InOrdî
 = 0;

658 
	`sqlôe3Eº‹Msg
(
pP¨£
, "table %S hasÇo columnÇamed %s",

659 
pTabLi°
, 0, 
pCﬁumn
->
a
[
i
].
zName
);

660 
pP¨£
->
checkSchema
 = 1;

661 
ö£π_˛ónup
;

672 if–
pSñe˘
 ){

675 
ªgYõld
;

676 
addrT›
;

677 
rc
;

679 
ªgYõld
 = ++
pP¨£
->
nMem
;

680 
addrT›
 = 
	`sqlôe3VdbeCuºítAddr
(
v
) + 1;

681 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_InôC‹outöe
, 
ªgYõld
, 0, 
addrT›
);

682 
	`sqlôe3Sñe˘De°Inô
(&
de°
, 
SRT_C‹outöe
, 
ªgYõld
);

683 
de°
.
iSd°
 = 
bIdLi°InOrdî
 ? 
ªgD©a
 : 0;

684 
de°
.
nSd°
 = 
pTab
->
nCﬁ
;

685 
rc
 = 
	`sqlôe3Sñe˘
(
pP¨£
, 
pSñe˘
, &
de°
);

686 
ªgFromSñe˘
 = 
de°
.
iSd°
;

687 if–
rc
 || 
db
->
mÆlocFaûed
 || 
pP¨£
->
nEº
 ) 
ö£π_˛ónup
;

688 
	`sqlôe3VdbeEndC‹outöe
(
v
, 
ªgYõld
);

689 
	`sqlôe3VdbeJumpHîe
(
v
, 
addrT›
 - 1);

690 
	`as£π
–
pSñe˘
->
pELi°
 );

691 
nCﬁumn
 = 
pSñe˘
->
pELi°
->
nEx¥
;

702 if–
pTriggî
 || 
	`ªadsTabÀ
(
pP¨£
, 
iDb
, 
pTab
) ){

703 
u£TempTabÀ
 = 1;

706 if–
u£TempTabÀ
 ){

717 
ªgRec
;

718 
ªgTempRowid
;

719 
addrL
;

721 
§cTab
 = 
pP¨£
->
nTab
++;

722 
ªgRec
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

723 
ªgTempRowid
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

724 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_O≥nEphemîÆ
, 
§cTab
, 
nCﬁumn
);

725 
addrL
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Yõld
, 
de°
.
iSDP¨m
); 
	`VdbeCovîage
(v);

726 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_MakeRec‹d
, 
ªgFromSñe˘
, 
nCﬁumn
, 
ªgRec
);

727 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NewRowid
, 
§cTab
, 
ªgTempRowid
);

728 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_In£π
, 
§cTab
, 
ªgRec
, 
ªgTempRowid
);

729 
	`sqlôe3VdbeGŸo
(
v
, 
addrL
);

730 
	`sqlôe3VdbeJumpHîe
(
v
, 
addrL
);

731 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgRec
);

732 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgTempRowid
);

738 
NameC⁄ãxt
 
sNC
;

739 
	`mem£t
(&
sNC
, 0, (sNC));

740 
sNC
.
pP¨£
 =ÖParse;

741 
§cTab
 = -1;

742 
	`as£π
–
u£TempTabÀ
==0 );

743 if–
pLi°
 ){

744 
nCﬁumn
 = 
pLi°
->
nEx¥
;

745 if–
	`sqlôe3ResﬁveEx¥Li°Names
(&
sNC
, 
pLi°
) ){

746 
ö£π_˛ónup
;

749 
nCﬁumn
 = 0;

757 if–
pCﬁumn
==0 && 
nCﬁumn
>0 ){

758 
ùkCﬁumn
 = 
pTab
->
iPKey
;

764 
i
=0; i<
pTab
->
nCﬁ
; i++){

765 
nHiddí
 +(
	`IsHiddíCﬁumn
(&
pTab
->
aCﬁ
[
i
]) ? 1 : 0);

767 if–
pCﬁumn
==0 && 
nCﬁumn
 &&ÇCﬁumn!=(
pTab
->
nCﬁ
-
nHiddí
) ){

768 
	`sqlôe3Eº‹Msg
(
pP¨£
,

770 
pTabLi°
, 0, 
pTab
->
nCﬁ
-
nHiddí
, 
nCﬁumn
);

771 
ö£π_˛ónup
;

773 if–
pCﬁumn
!=0 && 
nCﬁumn
!ıCﬁumn->
nId
 ){

774 
	`sqlôe3Eº‹Msg
(
pP¨£
, "%d vÆue†f‹ %d cﬁumns", 
nCﬁumn
, 
pCﬁumn
->
nId
);

775 
ö£π_˛ónup
;

780 if–
db
->
Êags
 & 
SQLITE_Cou¡Rows
 ){

781 
ªgRowCou¡
 = ++
pP¨£
->
nMem
;

782 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 0, 
ªgRowCou¡
);

786 if–!
isVõw
 ){

787 
nIdx
;

788 
nIdx
 = 
	`sqlôe3O≥nTabÀAndIndi˚s
(
pP¨£
, 
pTab
, 
OP_O≥nWrôe
, 0, -1, 0,

789 &
iD©aCur
, &
iIdxCur
);

790 
aRegIdx
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, ()*(
nIdx
+1));

791 if–
aRegIdx
==0 ){

792 
ö£π_˛ónup
;

794 
i
=0; i<
nIdx
; i++){

795 
aRegIdx
[
i
] = ++
pP¨£
->
nMem
;

800 if–
u£TempTabÀ
 ){

810 
addrInsT›
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Rewöd
, 
§cTab
); 
	`VdbeCovîage
(v);

811 
addrC⁄t
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

812 }if–
pSñe˘
 ){

821 
addrInsT›
 = 
addrC⁄t
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Yõld
, 
de°
.
iSDP¨m
);

822 
	`VdbeCovîage
(
v
);

827 
ídOfLo›
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

828 if–
tmask
 & 
TRIGGER_BEFORE
 ){

829 
ªgCﬁs
 = 
	`sqlôe3GëTempR™ge
(
pP¨£
, 
pTab
->
nCﬁ
+1);

837 if–
ùkCﬁumn
<0 ){

838 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, -1, 
ªgCﬁs
);

840 
addr1
;

841 
	`as£π
–!
wôhoutRowid
 );

842 if–
u£TempTabÀ
 ){

843 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Cﬁumn
, 
§cTab
, 
ùkCﬁumn
, 
ªgCﬁs
);

845 
	`as£π
–
pSñe˘
==0 );

846 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pLi°
->
a
[
ùkCﬁumn
].
pEx¥
, 
ªgCﬁs
);

848 
addr1
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_NŸNuŒ
, 
ªgCﬁs
); 
	`VdbeCovîage
(v);

849 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, -1, 
ªgCﬁs
);

850 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr1
);

851 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Mu°BeI¡
, 
ªgCﬁs
); 
	`VdbeCovîage
(v);

857 
	`as£π
–!
	`IsVútuÆ
(
pTab
) );

861 
i
=
j
=0; i<
pTab
->
nCﬁ
; i++){

862 if–
pCﬁumn
 ){

863 
j
=0; j<
pCﬁumn
->
nId
; j++){

864 if–
pCﬁumn
->
a
[
j
].
idx
==
i
 ) ;

867 if–(!
u£TempTabÀ
 && !
pLi°
Ë|| (
pCﬁumn
 && 
j
>ıCﬁumn->
nId
)

868 || (
pCﬁumn
==0 && 
	`IsOrdö¨yHiddíCﬁumn
(&
pTab
->
aCﬁ
[
i
])) ){

869 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pTab
->
aCﬁ
[
i
].
pDÊt
, 
ªgCﬁs
+i+1);

870 }if–
u£TempTabÀ
 ){

871 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Cﬁumn
, 
§cTab
, 
j
, 
ªgCﬁs
+
i
+1);

873 
	`as£π
–
pSñe˘
==0 );

874 
	`sqlôe3Ex¥CodeAndCache
(
pP¨£
, 
pLi°
->
a
[
j
].
pEx¥
, 
ªgCﬁs
+
i
+1);

876 if–
pCﬁumn
==0 && !
	`IsOrdö¨yHiddíCﬁumn
(&
pTab
->
aCﬁ
[
i
]ËË
j
++;

884 if–!
isVõw
 ){

885 
	`sqlôe3TabÀAfföôy
(
v
, 
pTab
, 
ªgCﬁs
+1);

889 
	`sqlôe3CodeRowTriggî
(
pP¨£
, 
pTriggî
, 
TK_INSERT
, 0, 
TRIGGER_BEFORE
,

890 
pTab
, 
ªgCﬁs
-pTab->
nCﬁ
-1, 
⁄Eº‹
, 
ídOfLo›
);

892 
	`sqlôe3Rñó£TempR™ge
(
pP¨£
, 
ªgCﬁs
, 
pTab
->
nCﬁ
+1);

898 if–!
isVõw
 ){

899 if–
	`IsVútuÆ
(
pTab
) ){

901 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NuŒ
, 0, 
ªgIns
);

903 if–
ùkCﬁumn
>=0 ){

904 if–
u£TempTabÀ
 ){

905 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Cﬁumn
, 
§cTab
, 
ùkCﬁumn
, 
ªgRowid
);

906 }if–
pSñe˘
 ){

907 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_C›y
, 
ªgFromSñe˘
+
ùkCﬁumn
, 
ªgRowid
);

909 
VdbeOp
 *
pOp
;

910 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pLi°
->
a
[
ùkCﬁumn
].
pEx¥
, 
ªgRowid
);

911 
pOp
 = 
	`sqlôe3VdbeGëOp
(
v
, -1);

912 if–
	`ALWAYS
(
pOp
Ë&&ÖOp->
›code
==
OP_NuŒ
 && !
	`IsVútuÆ
(
pTab
) ){

913 
≠≥ndFœg
 = 1;

914 
pOp
->
›code
 = 
OP_NewRowid
;

915 
pOp
->
p1
 = 
iD©aCur
;

916 
pOp
->
p2
 = 
ªgRowid
;

917 
pOp
->
p3
 = 
ªgAutoöc
;

923 if–!
≠≥ndFœg
 ){

924 
addr1
;

925 if–!
	`IsVútuÆ
(
pTab
) ){

926 
addr1
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_NŸNuŒ
, 
ªgRowid
); 
	`VdbeCovîage
(v);

927 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_NewRowid
, 
iD©aCur
, 
ªgRowid
, 
ªgAutoöc
);

928 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr1
);

930 
addr1
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

931 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IsNuŒ
, 
ªgRowid
, 
addr1
+2); 
	`VdbeCovîage
(v);

933 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Mu°BeI¡
, 
ªgRowid
); 
	`VdbeCovîage
(v);

935 }if–
	`IsVútuÆ
(
pTab
Ë|| 
wôhoutRowid
 ){

936 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NuŒ
, 0, 
ªgRowid
);

938 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_NewRowid
, 
iD©aCur
, 
ªgRowid
, 
ªgAutoöc
);

939 
≠≥ndFœg
 = 1;

941 
	`autoIncSãp
(
pP¨£
, 
ªgAutoöc
, 
ªgRowid
);

946 
nHiddí
 = 0;

947 
i
=0; i<
pTab
->
nCﬁ
; i++){

948 
iRegSt‹e
 = 
ªgRowid
+1+
i
;

949 if–
i
==
pTab
->
iPKey
 ){

955 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_So·NuŒ
, 
iRegSt‹e
);

958 if–
pCﬁumn
==0 ){

959 if–
	`IsHiddíCﬁumn
(&
pTab
->
aCﬁ
[
i
]) ){

960 
j
 = -1;

961 
nHiddí
++;

963 
j
 = 
i
 - 
nHiddí
;

966 
j
=0; j<
pCﬁumn
->
nId
; j++){

967 if–
pCﬁumn
->
a
[
j
].
idx
==
i
 ) ;

970 if–
j
<0 || 
nCﬁumn
==0 || (
pCﬁumn
 && j>ıCﬁumn->
nId
) ){

971 
	`sqlôe3Ex¥CodeFa˘‹abÀ
(
pP¨£
, 
pTab
->
aCﬁ
[
i
].
pDÊt
, 
iRegSt‹e
);

972 }if–
u£TempTabÀ
 ){

973 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Cﬁumn
, 
§cTab
, 
j
, 
iRegSt‹e
);

974 }if–
pSñe˘
 ){

975 if–
ªgFromSñe˘
!=
ªgD©a
 ){

976 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_SC›y
, 
ªgFromSñe˘
+
j
, 
iRegSt‹e
);

979 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pLi°
->
a
[
j
].
pEx¥
, 
iRegSt‹e
);

986 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


987 if–
	`IsVútuÆ
(
pTab
) ){

988 c⁄° *
pVTab
 = (c⁄° *)
	`sqlôe3GëVTabÀ
(
db
, 
pTab
);

989 
	`sqlôe3VèbMakeWrôabÀ
(
pP¨£
, 
pTab
);

990 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_VUpd©e
, 1, 
pTab
->
nCﬁ
+2, 
ªgIns
, 
pVTab
, 
P4_VTAB
);

991 
	`sqlôe3VdbeCh™geP5
(
v
, 
⁄Eº‹
==
OE_DeÁu…
 ? 
OE_Ab‹t
 : onError);

992 
	`sqlôe3MayAb‹t
(
pP¨£
);

996 
isRïœ˚
;

997 
	`sqlôe3Gíî©eC⁄°øötChecks
(
pP¨£
, 
pTab
, 
aRegIdx
, 
iD©aCur
, 
iIdxCur
,

998 
ªgIns
, 0, 
ùkCﬁumn
>=0, 
⁄Eº‹
, 
ídOfLo›
, &
isRïœ˚
, 0

1000 
	`sqlôe3FkCheck
(
pP¨£
, 
pTab
, 0, 
ªgIns
, 0, 0);

1001 
	`sqlôe3Com∂ëeIn£πi⁄
(
pP¨£
, 
pTab
, 
iD©aCur
, 
iIdxCur
,

1002 
ªgIns
, 
aRegIdx
, 0, 
≠≥ndFœg
, 
isRïœ˚
==0);

1008 if–(
db
->
Êags
 & 
SQLITE_Cou¡Rows
)!=0 ){

1009 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_AddImm
, 
ªgRowCou¡
, 1);

1012 if–
pTriggî
 ){

1014 
	`sqlôe3CodeRowTriggî
(
pP¨£
, 
pTriggî
, 
TK_INSERT
, 0, 
TRIGGER_AFTER
,

1015 
pTab
, 
ªgD©a
-2-pTab->
nCﬁ
, 
⁄Eº‹
, 
ídOfLo›
);

1021 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
ídOfLo›
);

1022 if–
u£TempTabÀ
 ){

1023 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Next
, 
§cTab
, 
addrC⁄t
); 
	`VdbeCovîage
(v);

1024 
	`sqlôe3VdbeJumpHîe
(
v
, 
addrInsT›
);

1025 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Clo£
, 
§cTab
);

1026 }if–
pSñe˘
 ){

1027 
	`sqlôe3VdbeGŸo
(
v
, 
addrC⁄t
);

1028 
	`sqlôe3VdbeJumpHîe
(
v
, 
addrInsT›
);

1031 if–!
	`IsVútuÆ
(
pTab
Ë&& !
isVõw
 ){

1033 if–
iD©aCur
<
iIdxCur
 ) 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Clo£
, iDataCur);

1034 
idx
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, idx++){

1035 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Clo£
, 
idx
+
iIdxCur
);

1039 
ö£π_íd
:

1044 if–
pP¨£
->
√°ed
==0 &&ÖP¨£->
pTriggîTab
==0 ){

1045 
	`sqlôe3Autoö¸emítEnd
(
pP¨£
);

1053 if–(
db
->
Êags
&
SQLITE_Cou¡Rows
Ë&& !
pP¨£
->
√°ed
 && !pP¨£->
pTriggîTab
 ){

1054 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 
ªgRowCou¡
, 1);

1055 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 1);

1056 
	`sqlôe3VdbeSëCﬁName
(
v
, 0, 
COLNAME_NAME
, "row†ö£πed", 
SQLITE_STATIC
);

1059 
ö£π_˛ónup
:

1060 
	`sqlôe3SrcLi°Dñëe
(
db
, 
pTabLi°
);

1061 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
pLi°
);

1062 
	`sqlôe3Sñe˘Dñëe
(
db
, 
pSñe˘
);

1063 
	`sqlôe3IdLi°Dñëe
(
db
, 
pCﬁumn
);

1064 
	`sqlôe3DbFªe
(
db
, 
aRegIdx
);

1065 
	}
}

1070 #ifde‡
isVõw


1071 #unde‡
isVõw


1073 #ifde‡
pTriggî


1074 #unde‡
pTriggî


1076 #ifde‡
tmask


1077 #unde‡
tmask


1083 
	#CKCNSTRNT_COLUMN
 0x01

	)

1084 
	#CKCNSTRNT_ROWID
 0x02

	)

1091 
	$checkC⁄°øötEx¥Node
(
WÆkî
 *
pWÆkî
, 
Ex¥
 *
pEx¥
){

1092 if–
pEx¥
->
›
==
TK_COLUMN
 ){

1093 
	`as£π
–
pEx¥
->
iCﬁumn
>=0 ||ÖExpr->iColumn==-1 );

1094 if–
pEx¥
->
iCﬁumn
>=0 ){

1095 if–
pWÆkî
->
u
.
aiCﬁ
[
pEx¥
->
iCﬁumn
]>=0 ){

1096 
pWÆkî
->
eCode
 |
CKCNSTRNT_COLUMN
;

1099 
pWÆkî
->
eCode
 |
CKCNSTRNT_ROWID
;

1102  
WRC_C⁄töue
;

1103 
	}
}

1115 
	$checkC⁄°øötUnch™ged
(
Ex¥
 *
pEx¥
, *
aiChng
, 
chngRowid
){

1116 
WÆkî
 
w
;

1117 
	`mem£t
(&
w
, 0, (w));

1118 
w
.
eCode
 = 0;

1119 
w
.
xEx¥CÆlback
 = 
checkC⁄°øötEx¥Node
;

1120 
w
.
u
.
aiCﬁ
 = 
aiChng
;

1121 
	`sqlôe3WÆkEx¥
(&
w
, 
pEx¥
);

1122 if–!
chngRowid
 ){

1123 
	`ã°ˇ£
–(
w
.
eCode
 & 
CKCNSTRNT_ROWID
)!=0 );

1124 
w
.
eCode
 &~
CKCNSTRNT_ROWID
;

1126 
	`ã°ˇ£
–
w
.
eCode
==0 );

1127 
	`ã°ˇ£
–
w
.
eCode
==
CKCNSTRNT_COLUMN
 );

1128 
	`ã°ˇ£
–
w
.
eCode
==
CKCNSTRNT_ROWID
 );

1129 
	`ã°ˇ£
–
w
.
eCode
==(
CKCNSTRNT_ROWID
|
CKCNSTRNT_COLUMN
) );

1130  !
w
.
eCode
;

1131 
	}
}

1216 
	$sqlôe3Gíî©eC⁄°øötChecks
(

1217 
P¨£
 *
pP¨£
,

1218 
TabÀ
 *
pTab
,

1219 *
aRegIdx
,

1220 
iD©aCur
,

1221 
iIdxCur
,

1222 
ªgNewD©a
,

1223 
ªgOldD©a
,

1224 
u8
 
pkChng
,

1225 
u8
 
ovîrideEº‹
,

1226 
ign‹eDe°
,

1227 *
pbMayRïœ˚
,

1228 *
aiChng


1230 
Vdbe
 *
v
;

1231 
Index
 *
pIdx
;

1232 
Index
 *
pPk
 = 0;

1233 
sqlôe3
 *
db
;

1234 
i
;

1235 
ix
;

1236 
nCﬁ
;

1237 
⁄Eº‹
;

1238 
addr1
;

1239 
£íRïœ˚
 = 0;

1240 
nPkFõld
;

1241 
ùkT›
 = 0;

1242 
ùkBŸtom
 = 0;

1243 
u8
 
isUpd©e
;

1244 
u8
 
bAfföôyD⁄e
 = 0;

1245 
ªgRowid
 = -1;

1247 
isUpd©e
 = 
ªgOldD©a
!=0;

1248 
db
 = 
pP¨£
->db;

1249 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1250 
	`as£π
–
v
!=0 );

1251 
	`as£π
–
pTab
->
pSñe˘
==0 );

1252 
nCﬁ
 = 
pTab
->nCol;

1258 if–
	`HasRowid
(
pTab
) ){

1259 
pPk
 = 0;

1260 
nPkFõld
 = 1;

1262 
pPk
 = 
	`sqlôe3Prim¨yKeyIndex
(
pTab
);

1263 
nPkFõld
 = 
pPk
->
nKeyCﬁ
;

1267 
	`VdbeModuÀCommít
((
v
, "BEGIN: GenCnstCks(%d,%d,%d,%d,%d)",

1268 
iD©aCur
, 
iIdxCur
, 
ªgNewD©a
, 
ªgOldD©a
, 
pkChng
));

1272 
i
=0; i<
nCﬁ
; i++){

1273 if–
i
==
pTab
->
iPKey
 ){

1276 if–
aiChng
 &&áiChng[
i
]<0 ){

1280 
⁄Eº‹
 = 
pTab
->
aCﬁ
[
i
].
nŸNuŒ
;

1281 if–
⁄Eº‹
==
OE_N⁄e
 ) ;

1282 if–
ovîrideEº‹
!=
OE_DeÁu…
 ){

1283 
⁄Eº‹
 = 
ovîrideEº‹
;

1284 }if–
⁄Eº‹
==
OE_DeÁu…
 ){

1285 
⁄Eº‹
 = 
OE_Ab‹t
;

1287 if–
⁄Eº‹
==
OE_Rïœ˚
 && 
pTab
->
aCﬁ
[
i
].
pDÊt
==0 ){

1288 
⁄Eº‹
 = 
OE_Ab‹t
;

1290 
	`as£π
–
⁄Eº‹
==
OE_Rﬁlback
 || onEº‹==
OE_Ab‹t
 || onEº‹==
OE_Faû


1291 || 
⁄Eº‹
==
OE_Ign‹e
 || onEº‹==
OE_Rïœ˚
 );

1292  
⁄Eº‹
 ){

1293 
OE_Ab‹t
:

1294 
	`sqlôe3MayAb‹t
(
pP¨£
);

1296 
OE_Rﬁlback
:

1297 
OE_Faû
: {

1298 *
zMsg
 = 
	`sqlôe3MPrötf
(
db
, "%s.%s", 
pTab
->
zName
,

1299 
pTab
->
aCﬁ
[
i
].
zName
);

1300 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_HÆtIfNuŒ
, 
SQLITE_CONSTRAINT_NOTNULL
, 
⁄Eº‹
,

1301 
ªgNewD©a
+1+
i
, 
zMsg
, 
P4_DYNAMIC
);

1302 
	`sqlôe3VdbeCh™geP5
(
v
, 
P5_C⁄°øötNŸNuŒ
);

1303 
	`VdbeCovîage
(
v
);

1306 
OE_Ign‹e
: {

1307 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IsNuŒ
, 
ªgNewD©a
+1+
i
, 
ign‹eDe°
);

1308 
	`VdbeCovîage
(
v
);

1312 
	`as£π
–
⁄Eº‹
==
OE_Rïœ˚
 );

1313 
addr1
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_NŸNuŒ
, 
ªgNewD©a
+1+
i
);

1314 
	`VdbeCovîage
(
v
);

1315 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pTab
->
aCﬁ
[
i
].
pDÊt
, 
ªgNewD©a
+1+i);

1316 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr1
);

1324 #i‚de‡
SQLITE_OMIT_CHECK


1325 if–
pTab
->
pCheck
 && (
db
->
Êags
 & 
SQLITE_Ign‹eChecks
)==0 ){

1326 
Ex¥Li°
 *
pCheck
 = 
pTab
->pCheck;

1327 
pP¨£
->
ckBa£
 = 
ªgNewD©a
+1;

1328 
⁄Eº‹
 = 
ovîrideEº‹
!=
OE_DeÁu…
 ? ovîrideEº‹ : 
OE_Ab‹t
;

1329 
i
=0; i<
pCheck
->
nEx¥
; i++){

1330 
ÆlOk
;

1331 
Ex¥
 *
pEx¥
 = 
pCheck
->
a
[
i
].pExpr;

1332 if–
aiChng
 && 
	`checkC⁄°øötUnch™ged
(
pEx¥
,áiChng, 
pkChng
) ) ;

1333 
ÆlOk
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

1334 
	`sqlôe3Ex¥IfTrue
(
pP¨£
, 
pEx¥
, 
ÆlOk
, 
SQLITE_JUMPIFNULL
);

1335 if–
⁄Eº‹
==
OE_Ign‹e
 ){

1336 
	`sqlôe3VdbeGŸo
(
v
, 
ign‹eDe°
);

1338 *
zName
 = 
pCheck
->
a
[
i
].zName;

1339 if–
zName
==0 ) zNamê
pTab
->zName;

1340 if–
⁄Eº‹
==
OE_Rïœ˚
 ) onEº‹ = 
OE_Ab‹t
;

1341 
	`sqlôe3HÆtC⁄°øöt
(
pP¨£
, 
SQLITE_CONSTRAINT_CHECK
,

1342 
⁄Eº‹
, 
zName
, 
P4_TRANSIENT
,

1343 
P5_C⁄°øötCheck
);

1345 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
ÆlOk
);

1353 if–
pkChng
 && 
pPk
==0 ){

1354 
addrRowidOk
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

1357 
⁄Eº‹
 = 
pTab
->
keyC⁄f
;

1358 if–
ovîrideEº‹
!=
OE_DeÁu…
 ){

1359 
⁄Eº‹
 = 
ovîrideEº‹
;

1360 }if–
⁄Eº‹
==
OE_DeÁu…
 ){

1361 
⁄Eº‹
 = 
OE_Ab‹t
;

1364 if–
isUpd©e
 ){

1368 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Eq
, 
ªgNewD©a
, 
addrRowidOk
, 
ªgOldD©a
);

1369 
	`sqlôe3VdbeCh™geP5
(
v
, 
SQLITE_NOTNULL
);

1370 
	`VdbeCovîage
(
v
);

1378 if–
⁄Eº‹
==
OE_Rïœ˚
 && 
ovîrideEº‹
!=OE_Replace ){

1379 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

1380 if–
pIdx
->
⁄Eº‹
==
OE_Ign‹e
 ||ÖIdx->⁄Eº‹==
OE_Faû
 ){

1381 
ùkT›
 = 
	`sqlôe3VdbeAddOp0
(
v
, 
OP_GŸo
);

1389 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_NŸExi°s
, 
iD©aCur
, 
addrRowidOk
, 
ªgNewD©a
);

1390 
	`VdbeCovîage
(
v
);

1393  
⁄Eº‹
 ){

1395 
⁄Eº‹
 = 
OE_Ab‹t
;

1398 
OE_Rﬁlback
:

1399 
OE_Ab‹t
:

1400 
OE_Faû
: {

1401 
	`sqlôe3RowidC⁄°øöt
(
pP¨£
, 
⁄Eº‹
, 
pTab
);

1404 
OE_Rïœ˚
: {

1427 
Triggî
 *
pTriggî
 = 0;

1428 if–
db
->
Êags
&
SQLITE_RecTriggîs
 ){

1429 
pTriggî
 = 
	`sqlôe3TriggîsExi°
(
pP¨£
, 
pTab
, 
TK_DELETE
, 0, 0);

1431 if–
pTriggî
 || 
	`sqlôe3FkRequúed
(
pP¨£
, 
pTab
, 0, 0) ){

1432 
	`sqlôe3Mu…iWrôe
(
pP¨£
);

1433 
	`sqlôe3Gíî©eRowDñëe
(
pP¨£
, 
pTab
, 
pTriggî
, 
iD©aCur
, 
iIdxCur
,

1434 
ªgNewD©a
, 1, 0, 
OE_Rïœ˚
, 1, -1);

1436 #ifde‡
SQLITE_ENABLE_PREUPDATE_HOOK


1437 if–
	`HasRowid
(
pTab
) ){

1442 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Dñëe
, 
iD©aCur
, 
OPFLAG_ISNOOP
);

1443 
	`sqlôe3VdbeCh™geP4
(
v
, -1, (*)
pTab
, 
P4_TABLE
);

1446 if–
pTab
->
pIndex
 ){

1447 
	`sqlôe3Mu…iWrôe
(
pP¨£
);

1448 
	`sqlôe3Gíî©eRowIndexDñëe
(
pP¨£
, 
pTab
, 
iD©aCur
, 
iIdxCur
,0,-1);

1451 
£íRïœ˚
 = 1;

1454 
OE_Ign‹e
: {

1456 
	`sqlôe3VdbeGŸo
(
v
, 
ign‹eDe°
);

1460 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
addrRowidOk
);

1461 if–
ùkT›
 ){

1462 
ùkBŸtom
 = 
	`sqlôe3VdbeAddOp0
(
v
, 
OP_GŸo
);

1463 
	`sqlôe3VdbeJumpHîe
(
v
, 
ùkT›
);

1474 
ix
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, ix++){

1475 
ªgIdx
;

1476 
ªgR
;

1477 
iThisCur
;

1478 
addrUniqueOk
;

1480 if–
aRegIdx
[
ix
]==0 ) ;

1481 if–
bAfföôyD⁄e
==0 ){

1482 
	`sqlôe3TabÀAfföôy
(
v
, 
pTab
, 
ªgNewD©a
+1);

1483 
bAfföôyD⁄e
 = 1;

1485 
iThisCur
 = 
iIdxCur
+
ix
;

1486 
addrUniqueOk
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

1489 if–
pIdx
->
pP¨tIdxWhîe
 ){

1490 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NuŒ
, 0, 
aRegIdx
[
ix
]);

1491 
pP¨£
->
ckBa£
 = 
ªgNewD©a
+1;

1492 
	`sqlôe3Ex¥IfFÆ£Dup
(
pP¨£
, 
pIdx
->
pP¨tIdxWhîe
, 
addrUniqueOk
,

1493 
SQLITE_JUMPIFNULL
);

1494 
pP¨£
->
ckBa£
 = 0;

1500 
ªgIdx
 = 
	`sqlôe3GëTempR™ge
(
pP¨£
, 
pIdx
->
nCﬁumn
);

1501 
i
=0; i<
pIdx
->
nCﬁumn
; i++){

1502 
iFõld
 = 
pIdx
->
aiCﬁumn
[
i
];

1503 
x
;

1504 if–
iFõld
==
XN_EXPR
 ){

1505 
pP¨£
->
ckBa£
 = 
ªgNewD©a
+1;

1506 
	`sqlôe3Ex¥CodeC›y
(
pP¨£
, 
pIdx
->
aCﬁEx¥
->
a
[
i
].
pEx¥
, 
ªgIdx
+i);

1507 
pP¨£
->
ckBa£
 = 0;

1508 
	`VdbeCommít
((
v
, "%†cﬁum¿%d", 
pIdx
->
zName
, 
i
));

1510 if–
iFõld
==
XN_ROWID
 || iFõld==
pTab
->
iPKey
 ){

1511 if–
ªgRowid
==
ªgIdx
+
i
 ) ;

1512 
x
 = 
ªgNewD©a
;

1513 
ªgRowid
 = 
pIdx
->
pP¨tIdxWhîe
 ? -1 : 
ªgIdx
+
i
;

1515 
x
 = 
iFõld
 + 
ªgNewD©a
 + 1;

1517 
	`sqlôe3VdbeAddOp2
(
v
, 
iFõld
<0 ? 
OP_I¡C›y
 : 
OP_SC›y
, 
x
, 
ªgIdx
+
i
);

1518 
	`VdbeCommít
((
v
, "%s", 
iFõld
<0 ? "rowid" : 
pTab
->
aCﬁ
[iFõld].
zName
));

1521 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_MakeRec‹d
, 
ªgIdx
, 
pIdx
->
nCﬁumn
, 
aRegIdx
[
ix
]);

1522 
	`VdbeCommít
((
v
, "f‹ %s", 
pIdx
->
zName
));

1523 
	`sqlôe3Ex¥CacheAfföôyCh™ge
(
pP¨£
, 
ªgIdx
, 
pIdx
->
nCﬁumn
);

1529 if–
isUpd©e
 && 
pPk
==
pIdx
 && 
pkChng
==0 ){

1530 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
addrUniqueOk
);

1535 
⁄Eº‹
 = 
pIdx
->onError;

1536 if–
⁄Eº‹
==
OE_N⁄e
 ){

1537 
	`sqlôe3Rñó£TempR™ge
(
pP¨£
, 
ªgIdx
, 
pIdx
->
nCﬁumn
);

1538 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
addrUniqueOk
);

1541 if–
ovîrideEº‹
!=
OE_DeÁu…
 ){

1542 
⁄Eº‹
 = 
ovîrideEº‹
;

1543 }if–
⁄Eº‹
==
OE_DeÁu…
 ){

1544 
⁄Eº‹
 = 
OE_Ab‹t
;

1548 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_NoC⁄Êi˘
, 
iThisCur
, 
addrUniqueOk
,

1549 
ªgIdx
, 
pIdx
->
nKeyCﬁ
); 
	`VdbeCovîage
(
v
);

1552 
ªgR
 = (
pIdx
==
pPk
Ë? 
ªgIdx
 : 
	`sqlôe3GëTempR™ge
(
pP¨£
, 
nPkFõld
);

1553 if–
isUpd©e
 || 
⁄Eº‹
==
OE_Rïœ˚
 ){

1554 if–
	`HasRowid
(
pTab
) ){

1555 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IdxRowid
, 
iThisCur
, 
ªgR
);

1558 if–
isUpd©e
 ){

1559 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Eq
, 
ªgR
, 
addrUniqueOk
, 
ªgOldD©a
);

1560 
	`sqlôe3VdbeCh™geP5
(
v
, 
SQLITE_NOTNULL
);

1561 
	`VdbeCovîage
(
v
);

1564 
x
;

1567 if–
pIdx
!=
pPk
 ){

1568 
i
=0; i<
pPk
->
nKeyCﬁ
; i++){

1569 
	`as£π
–
pPk
->
aiCﬁumn
[
i
]>=0 );

1570 
x
 = 
	`sqlôe3CﬁumnOfIndex
(
pIdx
, 
pPk
->
aiCﬁumn
[
i
]);

1571 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Cﬁumn
, 
iThisCur
, 
x
, 
ªgR
+
i
);

1572 
	`VdbeCommít
((
v
, "%s.%s", 
pTab
->
zName
,

1573 
pTab
->
aCﬁ
[
pPk
->
aiCﬁumn
[
i
]].
zName
));

1576 if–
isUpd©e
 ){

1584 
addrJump
 = 
	`sqlôe3VdbeCuºítAddr
(
v
)+
pPk
->
nKeyCﬁ
;

1585 
›
 = 
OP_Ne
;

1586 
ªgCmp
 = (
	`IsPrim¨yKeyIndex
(
pIdx
Ë? 
ªgIdx
 : 
ªgR
);

1588 
i
=0; i<
pPk
->
nKeyCﬁ
; i++){

1589 *
p4
 = (*)
	`sqlôe3LoˇãCﬁlSeq
(
pP¨£
, 
pPk
->
azCﬁl
[
i
]);

1590 
x
 = 
pPk
->
aiCﬁumn
[
i
];

1591 
	`as£π
–
x
>=0 );

1592 if–
i
==(
pPk
->
nKeyCﬁ
-1) ){

1593 
addrJump
 = 
addrUniqueOk
;

1594 
›
 = 
OP_Eq
;

1596 
	`sqlôe3VdbeAddOp4
(
v
, 
›
,

1597 
ªgOldD©a
+1+
x
, 
addrJump
, 
ªgCmp
+
i
, 
p4
, 
P4_COLLSEQ


1599 
	`sqlôe3VdbeCh™geP5
(
v
, 
SQLITE_NOTNULL
);

1600 
	`VdbeCovîageIf
(
v
, 
›
==
OP_Eq
);

1601 
	`VdbeCovîageIf
(
v
, 
›
==
OP_Ne
);

1608 
	`as£π
–
⁄Eº‹
==
OE_Rﬁlback
 || onEº‹==
OE_Ab‹t
 || onEº‹==
OE_Faû


1609 || 
⁄Eº‹
==
OE_Ign‹e
 || onEº‹==
OE_Rïœ˚
 );

1610  
⁄Eº‹
 ){

1611 
OE_Rﬁlback
:

1612 
OE_Ab‹t
:

1613 
OE_Faû
: {

1614 
	`sqlôe3UniqueC⁄°øöt
(
pP¨£
, 
⁄Eº‹
, 
pIdx
);

1617 
OE_Ign‹e
: {

1618 
	`sqlôe3VdbeGŸo
(
v
, 
ign‹eDe°
);

1622 
Triggî
 *
pTriggî
 = 0;

1623 
	`as£π
–
⁄Eº‹
==
OE_Rïœ˚
 );

1624 
	`sqlôe3Mu…iWrôe
(
pP¨£
);

1625 if–
db
->
Êags
&
SQLITE_RecTriggîs
 ){

1626 
pTriggî
 = 
	`sqlôe3TriggîsExi°
(
pP¨£
, 
pTab
, 
TK_DELETE
, 0, 0);

1628 
	`sqlôe3Gíî©eRowDñëe
(
pP¨£
, 
pTab
, 
pTriggî
, 
iD©aCur
, 
iIdxCur
,

1629 
ªgR
, 
nPkFõld
, 0, 
OE_Rïœ˚
,

1630 (
pIdx
==
pPk
 ? 
ONEPASS_SINGLE
 : 
ONEPASS_OFF
), -1);

1631 
£íRïœ˚
 = 1;

1635 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
addrUniqueOk
);

1636 
	`sqlôe3Rñó£TempR™ge
(
pP¨£
, 
ªgIdx
, 
pIdx
->
nCﬁumn
);

1637 if–
ªgR
!=
ªgIdx
 ) 
	`sqlôe3Rñó£TempR™ge
(
pP¨£
,ÑegR, 
nPkFõld
);

1639 if–
ùkT›
 ){

1640 
	`sqlôe3VdbeGŸo
(
v
, 
ùkT›
+1);

1641 
	`sqlôe3VdbeJumpHîe
(
v
, 
ùkBŸtom
);

1644 *
pbMayRïœ˚
 = 
£íRïœ˚
;

1645 
	`VdbeModuÀCommít
((
v
, "END: GíCn°Cks(%d)", 
£íRïœ˚
));

1646 
	}
}

1657 
	$sqlôe3Com∂ëeIn£πi⁄
(

1658 
P¨£
 *
pP¨£
,

1659 
TabÀ
 *
pTab
,

1660 
iD©aCur
,

1661 
iIdxCur
,

1662 
ªgNewD©a
,

1663 *
aRegIdx
,

1664 
isUpd©e
,

1665 
≠≥ndBüs
,

1666 
u£SìkResu…


1668 
Vdbe
 *
v
;

1669 
Index
 *
pIdx
;

1670 
u8
 
pik_Êags
;

1671 
ªgD©a
;

1672 
ªgRec
;

1673 
i
;

1674 
u8
 
bAfföôyD⁄e
 = 0;

1676 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1677 
	`as£π
–
v
!=0 );

1678 
	`as£π
–
pTab
->
pSñe˘
==0 );

1679 
i
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, i++){

1680 if–
aRegIdx
[
i
]==0 ) ;

1681 
bAfföôyD⁄e
 = 1;

1682 if–
pIdx
->
pP¨tIdxWhîe
 ){

1683 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IsNuŒ
, 
aRegIdx
[
i
], 
	`sqlôe3VdbeCuºítAddr
(v)+2);

1684 
	`VdbeCovîage
(
v
);

1686 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IdxIn£π
, 
iIdxCur
+
i
, 
aRegIdx
[i]);

1687 
pik_Êags
 = 0;

1688 if–
u£SìkResu…
 ) 
pik_Êags
 = 
OPFLAG_USESEEKRESULT
;

1689 if–
	`IsPrim¨yKeyIndex
(
pIdx
Ë&& !
	`HasRowid
(
pTab
) ){

1690 
	`as£π
–
pP¨£
->
√°ed
==0 );

1691 
pik_Êags
 |
OPFLAG_NCHANGE
;

1693 
	`sqlôe3VdbeCh™geP5
(
v
, 
pik_Êags
);

1695 if–!
	`HasRowid
(
pTab
) ) ;

1696 
ªgD©a
 = 
ªgNewD©a
 + 1;

1697 
ªgRec
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

1698 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_MakeRec‹d
, 
ªgD©a
, 
pTab
->
nCﬁ
, 
ªgRec
);

1699 if–!
bAfföôyD⁄e
 ) 
	`sqlôe3TabÀAfföôy
(
v
, 
pTab
, 0);

1700 
	`sqlôe3Ex¥CacheAfföôyCh™ge
(
pP¨£
, 
ªgD©a
, 
pTab
->
nCﬁ
);

1701 if–
pP¨£
->
√°ed
 ){

1702 
pik_Êags
 = 0;

1704 
pik_Êags
 = 
OPFLAG_NCHANGE
;

1705 
pik_Êags
 |(
isUpd©e
?
OPFLAG_ISUPDATE
:
OPFLAG_LASTROWID
);

1707 if–
≠≥ndBüs
 ){

1708 
pik_Êags
 |
OPFLAG_APPEND
;

1710 if–
u£SìkResu…
 ){

1711 
pik_Êags
 |
OPFLAG_USESEEKRESULT
;

1713 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_In£π
, 
iD©aCur
, 
ªgRec
, 
ªgNewD©a
);

1714 if–!
pP¨£
->
√°ed
 ){

1715 
	`sqlôe3VdbeCh™geP4
(
v
, -1, (*)
pTab
, 
P4_TABLE
);

1717 
	`sqlôe3VdbeCh™geP5
(
v
, 
pik_Êags
);

1718 
	}
}

1741 
	$sqlôe3O≥nTabÀAndIndi˚s
(

1742 
P¨£
 *
pP¨£
,

1743 
TabÀ
 *
pTab
,

1744 
›
,

1745 
u8
 
p5
,

1746 
iBa£
,

1747 
u8
 *
aToO≥n
,

1748 *
piD©aCur
,

1749 *
piIdxCur


1751 
i
;

1752 
iDb
;

1753 
iD©aCur
;

1754 
Index
 *
pIdx
;

1755 
Vdbe
 *
v
;

1757 
	`as£π
–
›
==
OP_O≥nRód
 || op==
OP_O≥nWrôe
 );

1758 
	`as£π
–
›
==
OP_O≥nWrôe
 || 
p5
==0 );

1759 if–
	`IsVútuÆ
(
pTab
) ){

1765 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTab
->
pSchema
);

1766 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1767 
	`as£π
–
v
!=0 );

1768 if–
iBa£
<0 ) iBa£ = 
pP¨£
->
nTab
;

1769 
iD©aCur
 = 
iBa£
++;

1770 if–
piD©aCur
 ) *piD©aCu∏
iD©aCur
;

1771 if–
	`HasRowid
(
pTab
Ë&& (
aToO≥n
==0 ||áToOpen[0]) ){

1772 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 
iD©aCur
, 
iDb
, 
pTab
, 
›
);

1774 
	`sqlôe3TabÀLock
(
pP¨£
, 
iDb
, 
pTab
->
äum
, 
›
==
OP_O≥nWrôe
,ÖTab->
zName
);

1776 if–
piIdxCur
 ) *piIdxCu∏
iBa£
;

1777 
i
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, i++){

1778 
iIdxCur
 = 
iBa£
++;

1779 
	`as£π
–
pIdx
->
pSchema
==
pTab
->pSchema );

1780 if–
aToO≥n
==0 ||áToO≥n[
i
+1] ){

1781 
	`sqlôe3VdbeAddOp3
(
v
, 
›
, 
iIdxCur
, 
pIdx
->
äum
, 
iDb
);

1782 
	`sqlôe3VdbeSëP4KeyInfo
(
pP¨£
, 
pIdx
);

1783 
	`VdbeCommít
((
v
, "%s", 
pIdx
->
zName
));

1785 if–
	`IsPrim¨yKeyIndex
(
pIdx
Ë&& !
	`HasRowid
(
pTab
) ){

1786 if–
piD©aCur
 ) *piD©aCu∏
iIdxCur
;

1788 
	`sqlôe3VdbeCh™geP5
(
v
, 
p5
);

1791 if–
iBa£
>
pP¨£
->
nTab
 )ÖParse->nTab = iBase;

1792  
i
;

1793 
	}
}

1796 #ifde‡
SQLITE_TEST


1803 
	gsqlôe3_x„r›t_cou¡
;

1807 #i‚de‡
SQLITE_OMIT_XFER_OPT


1819 
	$x„rCom∑tibÀIndex
(
Index
 *
pDe°
, Index *
pSrc
){

1820 
i
;

1821 
	`as£π
–
pDe°
 && 
pSrc
 );

1822 
	`as£π
–
pDe°
->
pTabÀ
!=
pSrc
->pTable );

1823 if–
pDe°
->
nKeyCﬁ
!=
pSrc
->nKeyCol ){

1826 if–
pDe°
->
⁄Eº‹
!=
pSrc
->onError ){

1829 
i
=0; i<
pSrc
->
nKeyCﬁ
; i++){

1830 if–
pSrc
->
aiCﬁumn
[
i
]!=
pDe°
->aiColumn[i] ){

1833 if–
pSrc
->
aiCﬁumn
[
i
]==
XN_EXPR
 ){

1834 
	`as£π
–
pSrc
->
aCﬁEx¥
!=0 && 
pDe°
->aColExpr!=0 );

1835 if–
	`sqlôe3Ex¥Com∑ª
(
pSrc
->
aCﬁEx¥
->
a
[
i
].
pEx¥
,

1836 
pDe°
->
aCﬁEx¥
->
a
[
i
].
pEx¥
, -1)!=0 ){

1840 if–
pSrc
->
aS‹tOrdî
[
i
]!=
pDe°
->aSortOrder[i] ){

1843 if–
	`sqlôe3_°ricmp
(
pSrc
->
azCﬁl
[
i
],
pDe°
->azColl[i])!=0 ){

1847 if–
	`sqlôe3Ex¥Com∑ª
(
pSrc
->
pP¨tIdxWhîe
, 
pDe°
->pPartIdxWhere, -1) ){

1853 
	}
}

1880 
	$x„rO±imiz©i⁄
(

1881 
P¨£
 *
pP¨£
,

1882 
TabÀ
 *
pDe°
,

1883 
Sñe˘
 *
pSñe˘
,

1884 
⁄Eº‹
,

1885 
iDbDe°


1887 
sqlôe3
 *
db
 = 
pP¨£
->db;

1888 
Ex¥Li°
 *
pELi°
;

1889 
TabÀ
 *
pSrc
;

1890 
Index
 *
pSrcIdx
, *
pDe°Idx
;

1891 
SrcLi°_ôem
 *
pIãm
;

1892 
i
;

1893 
iDbSrc
;

1894 
iSrc
, 
iDe°
;

1895 
addr1
, 
addr2
;

1896 
em±yDe°Te°
 = 0;

1897 
em±ySrcTe°
 = 0;

1898 
Vdbe
 *
v
;

1899 
ªgAutoöc
;

1900 
de°HasUniqueIdx
 = 0;

1901 
ªgD©a
, 
ªgRowid
;

1903 if–
pSñe˘
==0 ){

1906 if–
pP¨£
->
pWôh
 || 
pSñe˘
->pWith ){

1912 if–
	`sqlôe3TriggîLi°
(
pP¨£
, 
pDe°
) ){

1915 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


1916 if–
pDe°
->
èbFœgs
 & 
TF_VútuÆ
 ){

1920 if–
⁄Eº‹
==
OE_DeÁu…
 ){

1921 if–
pDe°
->
iPKey
>=0 ) 
⁄Eº‹
 =ÖDe°->
keyC⁄f
;

1922 if–
⁄Eº‹
==
OE_DeÁu…
 ) onEº‹ = 
OE_Ab‹t
;

1924 
	`as£π
(
pSñe˘
->
pSrc
);

1925 if–
pSñe˘
->
pSrc
->
nSrc
!=1 ){

1928 if–
pSñe˘
->
pSrc
->
a
[0].pSelect ){

1931 if–
pSñe˘
->
pWhîe
 ){

1934 if–
pSñe˘
->
pOrdîBy
 ){

1939 if–
pSñe˘
->
pGroupBy
 ){

1942 if–
pSñe˘
->
pLimô
 ){

1945 
	`as£π
–
pSñe˘
->
pOff£t
==0 );

1946 if–
pSñe˘
->
pPri‹
 ){

1949 if–
pSñe˘
->
£lFœgs
 & 
SF_Di°ö˘
 ){

1952 
pELi°
 = 
pSñe˘
->pEList;

1953 
	`as£π
–
pELi°
!=0 );

1954 if–
pELi°
->
nEx¥
!=1 ){

1957 
	`as£π
–
pELi°
->
a
[0].
pEx¥
 );

1958 if–
pELi°
->
a
[0].
pEx¥
->
›
!=
TK_ASTERISK
 ){

1966 
pIãm
 = 
pSñe˘
->
pSrc
->
a
;

1967 
pSrc
 = 
	`sqlôe3LoˇãTabÀIãm
(
pP¨£
, 0, 
pIãm
);

1968 if–
pSrc
==0 ){

1971 if–
pSrc
==
pDe°
 ){

1974 if–
	`HasRowid
(
pDe°
)!=HasRowid(
pSrc
) ){

1977 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


1978 if–
pSrc
->
èbFœgs
 & 
TF_VútuÆ
 ){

1982 if–
pSrc
->
pSñe˘
 ){

1985 if–
pDe°
->
nCﬁ
!=
pSrc
->nCol ){

1988 if–
pDe°
->
iPKey
!=
pSrc
->iPKey ){

1991 
i
=0; i<
pDe°
->
nCﬁ
; i++){

1992 
Cﬁumn
 *
pDe°Cﬁ
 = &
pDe°
->
aCﬁ
[
i
];

1993 
Cﬁumn
 *
pSrcCﬁ
 = &
pSrc
->
aCﬁ
[
i
];

1994 #ifde‡
SQLITE_ENABLE_HIDDEN_COLUMNS


1995 if–(
db
->
Êags
 & 
SQLITE_Vacuum
)==0

1996 && (
pDe°Cﬁ
->
cﬁFœgs
 | 
pSrcCﬁ
->cﬁFœgsË& 
COLFLAG_HIDDEN


2001 if–
pDe°Cﬁ
->
afföôy
!=
pSrcCﬁ
->affinity ){

2004 if–
	`sqlôe3_°ricmp
(
pDe°Cﬁ
->
zCﬁl
, 
pSrcCﬁ
->zColl)!=0 ){

2007 if–
pDe°Cﬁ
->
nŸNuŒ
 && !
pSrcCﬁ
->notNull ){

2011 if–
i
>0 ){

2012 
	`as£π
–
pDe°Cﬁ
->
pDÊt
==0 ||ÖDe°Cﬁ->pDÊt->
›
==
TK_SPAN
 );

2013 
	`as£π
–
pSrcCﬁ
->
pDÊt
==0 ||ÖSrcCﬁ->pDÊt->
›
==
TK_SPAN
 );

2014 if–(
pDe°Cﬁ
->
pDÊt
==0)!=(
pSrcCﬁ
->pDflt==0)

2015 || (
pDe°Cﬁ
->
pDÊt
 && 
	`°rcmp
’De°Cﬁ->pDÊt->
u
.
zTokí
,

2016 
pSrcCﬁ
->
pDÊt
->
u
.
zTokí
)!=0)

2022 
pDe°Idx
=
pDe°
->
pIndex
;ÖDe°Idx;ÖDe°IdxıDe°Idx->
pNext
){

2023 if–
	`IsUniqueIndex
(
pDe°Idx
) ){

2024 
de°HasUniqueIdx
 = 1;

2026 
pSrcIdx
=
pSrc
->
pIndex
;ÖSrcIdx;ÖSrcIdxıSrcIdx->
pNext
){

2027 if–
	`x„rCom∑tibÀIndex
(
pDe°Idx
, 
pSrcIdx
) ) ;

2029 if–
pSrcIdx
==0 ){

2033 #i‚de‡
SQLITE_OMIT_CHECK


2034 if–
pDe°
->
pCheck
 && 
	`sqlôe3Ex¥Li°Com∑ª
(
pSrc
->pCheck,pDest->pCheck,-1) ){

2038 #i‚de‡
SQLITE_OMIT_FOREIGN_KEY


2046 if–(
db
->
Êags
 & 
SQLITE_F‹eignKeys
)!=0 && 
pDe°
->
pFKey
!=0 ){

2050 if–(
db
->
Êags
 & 
SQLITE_Cou¡Rows
)!=0 ){

2058 #ifde‡
SQLITE_TEST


2059 
sqlôe3_x„r›t_cou¡
++;

2061 
iDbSrc
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pSrc
->
pSchema
);

2062 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

2063 
	`sqlôe3CodeVîifySchema
(
pP¨£
, 
iDbSrc
);

2064 
iSrc
 = 
pP¨£
->
nTab
++;

2065 
iDe°
 = 
pP¨£
->
nTab
++;

2066 
ªgAutoöc
 = 
	`autoIncBegö
(
pP¨£
, 
iDbDe°
, 
pDe°
);

2067 
ªgD©a
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

2068 
ªgRowid
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

2069 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 
iDe°
, 
iDbDe°
, 
pDe°
, 
OP_O≥nWrôe
);

2070 
	`as£π
–
	`HasRowid
(
pDe°
Ë|| 
de°HasUniqueIdx
 );

2071 if–(
db
->
Êags
 & 
SQLITE_Vacuum
)==0 && (

2072 (
pDe°
->
iPKey
<0 &&ÖDe°->
pIndex
!=0)

2073 || 
de°HasUniqueIdx


2074 || (
⁄Eº‹
!=
OE_Ab‹t
 && onEº‹!=
OE_Rﬁlback
)

2093 
addr1
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Rewöd
, 
iDe°
, 0); 
	`VdbeCovîage
(v);

2094 
em±yDe°Te°
 = 
	`sqlôe3VdbeAddOp0
(
v
, 
OP_GŸo
);

2095 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr1
);

2097 if–
	`HasRowid
(
pSrc
) ){

2098 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 
iSrc
, 
iDbSrc
, 
pSrc
, 
OP_O≥nRód
);

2099 
em±ySrcTe°
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Rewöd
, 
iSrc
, 0); 
	`VdbeCovîage
(v);

2100 if–
pDe°
->
iPKey
>=0 ){

2101 
addr1
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Rowid
, 
iSrc
, 
ªgRowid
);

2102 
addr2
 = 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_NŸExi°s
, 
iDe°
, 0, 
ªgRowid
);

2103 
	`VdbeCovîage
(
v
);

2104 
	`sqlôe3RowidC⁄°øöt
(
pP¨£
, 
⁄Eº‹
, 
pDe°
);

2105 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr2
);

2106 
	`autoIncSãp
(
pP¨£
, 
ªgAutoöc
, 
ªgRowid
);

2107 }if–
pDe°
->
pIndex
==0 ){

2108 
addr1
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NewRowid
, 
iDe°
, 
ªgRowid
);

2110 
addr1
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Rowid
, 
iSrc
, 
ªgRowid
);

2111 
	`as£π
–(
pDe°
->
èbFœgs
 & 
TF_Autoö¸emít
)==0 );

2113 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_RowD©a
, 
iSrc
, 
ªgD©a
);

2114 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_In£π
, 
iDe°
, 
ªgD©a
, 
ªgRowid
,

2115 (*)
pDe°
, 
P4_TABLE
);

2116 
	`sqlôe3VdbeCh™geP5
(
v
, 
OPFLAG_NCHANGE
|
OPFLAG_LASTROWID
|
OPFLAG_APPEND
);

2117 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Next
, 
iSrc
, 
addr1
); 
	`VdbeCovîage
(v);

2118 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Clo£
, 
iSrc
, 0);

2119 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Clo£
, 
iDe°
, 0);

2121 
	`sqlôe3TabÀLock
(
pP¨£
, 
iDbDe°
, 
pDe°
->
äum
, 1,ÖDe°->
zName
);

2122 
	`sqlôe3TabÀLock
(
pP¨£
, 
iDbSrc
, 
pSrc
->
äum
, 0,ÖSrc->
zName
);

2124 
pDe°Idx
=
pDe°
->
pIndex
;ÖDe°Idx;ÖDe°IdxıDe°Idx->
pNext
){

2125 
u8
 
idxInsFœgs
 = 0;

2126 
pSrcIdx
=
pSrc
->
pIndex
; 
	`ALWAYS
’SrcIdx);ÖSrcIdxıSrcIdx->
pNext
){

2127 if–
	`x„rCom∑tibÀIndex
(
pDe°Idx
, 
pSrcIdx
) ) ;

2129 
	`as£π
–
pSrcIdx
 );

2130 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_O≥nRód
, 
iSrc
, 
pSrcIdx
->
äum
, 
iDbSrc
);

2131 
	`sqlôe3VdbeSëP4KeyInfo
(
pP¨£
, 
pSrcIdx
);

2132 
	`VdbeCommít
((
v
, "%s", 
pSrcIdx
->
zName
));

2133 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_O≥nWrôe
, 
iDe°
, 
pDe°Idx
->
äum
, 
iDbDe°
);

2134 
	`sqlôe3VdbeSëP4KeyInfo
(
pP¨£
, 
pDe°Idx
);

2135 
	`sqlôe3VdbeCh™geP5
(
v
, 
OPFLAG_BULKCSR
);

2136 
	`VdbeCommít
((
v
, "%s", 
pDe°Idx
->
zName
));

2137 
addr1
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Rewöd
, 
iSrc
, 0); 
	`VdbeCovîage
(v);

2138 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_RowKey
, 
iSrc
, 
ªgD©a
);

2139 if–
db
->
Êags
 & 
SQLITE_Vacuum
 ){

2154 
i
=0; i<
pSrcIdx
->
nCﬁumn
; i++){

2155 c⁄° *
zCﬁl
 = 
pSrcIdx
->
azCﬁl
[
i
];

2156 
	`as£π
–
	`sqlôe3_°ricmp
(
sqlôe3SåBINARY
, 
zCﬁl
)!=0

2157 || 
sqlôe3SåBINARY
==
zCﬁl
 );

2158 if–
	`sqlôe3_°ricmp
(
sqlôe3SåBINARY
, 
zCﬁl
) ) ;

2160 if–
i
==
pSrcIdx
->
nCﬁumn
 ){

2161 
idxInsFœgs
 = 
OPFLAG_USESEEKRESULT
;

2162 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_La°
, 
iDe°
, 0, -1);

2165 if–!
	`HasRowid
(
pSrc
Ë&& 
pDe°Idx
->
idxTy≥
==2 ){

2166 
idxInsFœgs
 |
OPFLAG_NCHANGE
;

2168 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_IdxIn£π
, 
iDe°
, 
ªgD©a
, 1);

2169 
	`sqlôe3VdbeCh™geP5
(
v
, 
idxInsFœgs
);

2170 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Next
, 
iSrc
, 
addr1
+1); 
	`VdbeCovîage
(v);

2171 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr1
);

2172 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Clo£
, 
iSrc
, 0);

2173 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Clo£
, 
iDe°
, 0);

2175 if–
em±ySrcTe°
 ) 
	`sqlôe3VdbeJumpHîe
(
v
,ÉmptySrcTest);

2176 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgRowid
);

2177 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgD©a
);

2178 if–
em±yDe°Te°
 ){

2179 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_HÆt
, 
SQLITE_OK
, 0);

2180 
	`sqlôe3VdbeJumpHîe
(
v
, 
em±yDe°Te°
);

2181 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Clo£
, 
iDe°
, 0);

2186 
	}
}

	@legacy.c

18 
	~"sqlôeI¡.h
"

30 
	$sqlôe3_exec
(

31 
sqlôe3
 *
db
,

32 c⁄° *
zSql
,

33 
sqlôe3_ˇŒback
 
xCÆlback
,

34 *
pArg
,

35 **
pzEºMsg


37 
rc
 = 
SQLITE_OK
;

38 c⁄° *
zLe·ovî
;

39 
sqlôe3_°mt
 *
pStmt
 = 0;

40 **
azCﬁs
 = 0;

41 
ˇŒbackIsInô
;

43 if–!
	`sqlôe3Sa„tyCheckOk
(
db
ËË 
SQLITE_MISUSE_BKPT
;

44 if–
zSql
==0 ) zSql = "";

46 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

47 
	`sqlôe3Eº‹
(
db
, 
SQLITE_OK
);

48  
rc
==
SQLITE_OK
 && 
zSql
[0] ){

49 
nCﬁ
;

50 **
azVÆs
 = 0;

52 
pStmt
 = 0;

53 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
db
, 
zSql
, -1, &
pStmt
, &
zLe·ovî
);

54 
	`as£π
–
rc
==
SQLITE_OK
 || 
pStmt
==0 );

55 if–
rc
!=
SQLITE_OK
 ){

58 if–!
pStmt
 ){

60 
zSql
 = 
zLe·ovî
;

64 
ˇŒbackIsInô
 = 0;

65 
nCﬁ
 = 
	`sqlôe3_cﬁumn_cou¡
(
pStmt
);

68 
i
;

69 
rc
 = 
	`sqlôe3_°ï
(
pStmt
);

72 if–
xCÆlback
 && (
SQLITE_ROW
==
rc
 ||

73 (
SQLITE_DONE
==
rc
 && !
ˇŒbackIsInô


74 && 
db
->
Êags
&
SQLITE_NuŒCÆlback
)) ){

75 if–!
ˇŒbackIsInô
 ){

76 
azCﬁs
 = 
	`sqlôe3DbMÆlocZîo
(
db
, 2*
nCﬁ
*(const *) + 1);

77 if–
azCﬁs
==0 ){

78 
exec_out
;

80 
i
=0; i<
nCﬁ
; i++){

81 
azCﬁs
[
i
] = (*)
	`sqlôe3_cﬁumn_«me
(
pStmt
, i);

84 
	`as£π
–
azCﬁs
[
i
]!=0 );

86 
ˇŒbackIsInô
 = 1;

88 if–
rc
==
SQLITE_ROW
 ){

89 
azVÆs
 = &
azCﬁs
[
nCﬁ
];

90 
i
=0; i<
nCﬁ
; i++){

91 
azVÆs
[
i
] = (*)
	`sqlôe3_cﬁumn_ãxt
(
pStmt
, i);

92 if–!
azVÆs
[
i
] && 
	`sqlôe3_cﬁumn_ty≥
(
pStmt
, i)!=
SQLITE_NULL
 ){

93 
	`sqlôe3OomFau…
(
db
);

94 
exec_out
;

98 if–
	`xCÆlback
(
pArg
, 
nCﬁ
, 
azVÆs
, 
azCﬁs
) ){

102 
rc
 = 
SQLITE_ABORT
;

103 
	`sqlôe3VdbeFöÆize
((
Vdbe
 *)
pStmt
);

104 
pStmt
 = 0;

105 
	`sqlôe3Eº‹
(
db
, 
SQLITE_ABORT
);

106 
exec_out
;

110 if–
rc
!=
SQLITE_ROW
 ){

111 
rc
 = 
	`sqlôe3VdbeFöÆize
((
Vdbe
 *)
pStmt
);

112 
pStmt
 = 0;

113 
zSql
 = 
zLe·ovî
;

114  
	`sqlôe3Is•a˚
(
zSql
[0]) ) zSql++;

119 
	`sqlôe3DbFªe
(
db
, 
azCﬁs
);

120 
azCﬁs
 = 0;

123 
exec_out
:

124 if–
pStmt
 ) 
	`sqlôe3VdbeFöÆize
((
Vdbe
 *)pStmt);

125 
	`sqlôe3DbFªe
(
db
, 
azCﬁs
);

127 
rc
 = 
	`sqlôe3ApiExô
(
db
,Ñc);

128 if–
rc
!=
SQLITE_OK
 && 
pzEºMsg
 ){

129 
nEºMsg
 = 1 + 
	`sqlôe3SåÀn30
(
	`sqlôe3_îrmsg
(
db
));

130 *
pzEºMsg
 = 
	`sqlôe3MÆloc
(
nEºMsg
);

131 if–*
pzEºMsg
 ){

132 
	`mem˝y
(*
pzEºMsg
, 
	`sqlôe3_îrmsg
(
db
), 
nEºMsg
);

134 
rc
 = 
SQLITE_NOMEM_BKPT
;

135 
	`sqlôe3Eº‹
(
db
, 
SQLITE_NOMEM
);

137 }if–
pzEºMsg
 ){

138 *
pzEºMsg
 = 0;

141 
	`as£π
–(
rc
&
db
->
îrMask
)==rc );

142 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

143  
rc
;

144 
	}
}

	@loadext.c

16 #i‚de‡
SQLITE_CORE


17 
	#SQLITE_CORE
 1

	)

19 
	~"sqlôe3ext.h
"

20 
	~"sqlôeI¡.h
"

21 
	~<°rög.h
>

23 #i‚de‡
SQLITE_OMIT_LOAD_EXTENSION


30 #i‚de‡
SQLITE_ENABLE_COLUMN_METADATA


31 
	#sqlôe3_cﬁumn_d©aba£_«me
 0

	)

32 
	#sqlôe3_cﬁumn_d©aba£_«me16
 0

	)

33 
	#sqlôe3_cﬁumn_èbÀ_«me
 0

	)

34 
	#sqlôe3_cﬁumn_èbÀ_«me16
 0

	)

35 
	#sqlôe3_cﬁumn_‹igö_«me
 0

	)

36 
	#sqlôe3_cﬁumn_‹igö_«me16
 0

	)

39 #ifde‡
SQLITE_OMIT_AUTHORIZATION


40 
	#sqlôe3_£t_auth‹izî
 0

	)

43 #ifde‡
SQLITE_OMIT_UTF16


44 
	#sqlôe3_böd_ãxt16
 0

	)

45 
	#sqlôe3_cﬁœti⁄_√eded16
 0

	)

46 
	#sqlôe3_cﬁumn_de˛ty≥16
 0

	)

47 
	#sqlôe3_cﬁumn_«me16
 0

	)

48 
	#sqlôe3_cﬁumn_ãxt16
 0

	)

49 
	#sqlôe3_com∂ëe16
 0

	)

50 
	#sqlôe3_¸óã_cﬁœti⁄16
 0

	)

51 
	#sqlôe3_¸óã_fun˘i⁄16
 0

	)

52 
	#sqlôe3_îrmsg16
 0

	)

53 
	#sqlôe3_›í16
 0

	)

54 
	#sqlôe3_¥ï¨e16
 0

	)

55 
	#sqlôe3_¥ï¨e16_v2
 0

	)

56 
	#sqlôe3_ªsu…_îr‹16
 0

	)

57 
	#sqlôe3_ªsu…_ãxt16
 0

	)

58 
	#sqlôe3_ªsu…_ãxt16be
 0

	)

59 
	#sqlôe3_ªsu…_ãxt16À
 0

	)

60 
	#sqlôe3_vÆue_ãxt16
 0

	)

61 
	#sqlôe3_vÆue_ãxt16be
 0

	)

62 
	#sqlôe3_vÆue_ãxt16À
 0

	)

63 
	#sqlôe3_cﬁumn_d©aba£_«me16
 0

	)

64 
	#sqlôe3_cﬁumn_èbÀ_«me16
 0

	)

65 
	#sqlôe3_cﬁumn_‹igö_«me16
 0

	)

68 #ifde‡
SQLITE_OMIT_COMPLETE


69 
	#sqlôe3_com∂ëe
 0

	)

70 
	#sqlôe3_com∂ëe16
 0

	)

73 #ifde‡
SQLITE_OMIT_DECLTYPE


74 
	#sqlôe3_cﬁumn_de˛ty≥16
 0

	)

75 
	#sqlôe3_cﬁumn_de˛ty≥
 0

	)

78 #ifde‡
SQLITE_OMIT_PROGRESS_CALLBACK


79 
	#sqlôe3_¥ogªss_h™dÀr
 0

	)

82 #ifde‡
SQLITE_OMIT_VIRTUALTABLE


83 
	#sqlôe3_¸óã_moduÀ
 0

	)

84 
	#sqlôe3_¸óã_moduÀ_v2
 0

	)

85 
	#sqlôe3_de˛¨e_vèb
 0

	)

86 
	#sqlôe3_vèb_c⁄fig
 0

	)

87 
	#sqlôe3_vèb_⁄_c⁄Êi˘
 0

	)

90 #ifde‡
SQLITE_OMIT_SHARED_CACHE


91 
	#sqlôe3_íabÀ_sh¨ed_ˇche
 0

	)

94 #ifde‡
SQLITE_OMIT_TRACE


95 
	#sqlôe3_¥ofûe
 0

	)

96 
	#sqlôe3_åa˚
 0

	)

99 #ifde‡
SQLITE_OMIT_GET_TABLE


100 
	#sqlôe3_‰ì_èbÀ
 0

	)

101 
	#sqlôe3_gë_èbÀ
 0

	)

104 #ifde‡
SQLITE_OMIT_INCRBLOB


105 
	#sqlôe3_böd_zîoblob
 0

	)

106 
	#sqlôe3_blob_byãs
 0

	)

107 
	#sqlôe3_blob_˛o£
 0

	)

108 
	#sqlôe3_blob_›í
 0

	)

109 
	#sqlôe3_blob_ªad
 0

	)

110 
	#sqlôe3_blob_wrôe
 0

	)

111 
	#sqlôe3_blob_ª›í
 0

	)

129 c⁄° 
sqlôe3_≠i_routöes
 
	gsqlôe3Apis
 = {

130 
sqlôe3_aggªg©e_c⁄ãxt
,

131 #i‚de‡
SQLITE_OMIT_DEPRECATED


132 
sqlôe3_aggªg©e_cou¡
,

136 
sqlôe3_böd_blob
,

137 
sqlôe3_böd_doubÀ
,

138 
sqlôe3_böd_öt
,

139 
sqlôe3_böd_öt64
,

140 
sqlôe3_böd_nuŒ
,

141 
sqlôe3_böd_∑ømëî_cou¡
,

142 
sqlôe3_böd_∑ømëî_ödex
,

143 
sqlôe3_böd_∑ømëî_«me
,

144 
sqlôe3_böd_ãxt
,

145 
sqlôe3_böd_ãxt16
,

146 
sqlôe3_böd_vÆue
,

147 
sqlôe3_busy_h™dÀr
,

148 
sqlôe3_busy_timeout
,

149 
sqlôe3_ch™ges
,

150 
sqlôe3_˛o£
,

151 
sqlôe3_cﬁœti⁄_√eded
,

152 
sqlôe3_cﬁœti⁄_√eded16
,

153 
sqlôe3_cﬁumn_blob
,

154 
sqlôe3_cﬁumn_byãs
,

155 
sqlôe3_cﬁumn_byãs16
,

156 
sqlôe3_cﬁumn_cou¡
,

157 
sqlôe3_cﬁumn_d©aba£_«me
,

158 
sqlôe3_cﬁumn_d©aba£_«me16
,

159 
sqlôe3_cﬁumn_de˛ty≥
,

160 
sqlôe3_cﬁumn_de˛ty≥16
,

161 
sqlôe3_cﬁumn_doubÀ
,

162 
sqlôe3_cﬁumn_öt
,

163 
sqlôe3_cﬁumn_öt64
,

164 
sqlôe3_cﬁumn_«me
,

165 
sqlôe3_cﬁumn_«me16
,

166 
sqlôe3_cﬁumn_‹igö_«me
,

167 
sqlôe3_cﬁumn_‹igö_«me16
,

168 
sqlôe3_cﬁumn_èbÀ_«me
,

169 
sqlôe3_cﬁumn_èbÀ_«me16
,

170 
sqlôe3_cﬁumn_ãxt
,

171 
sqlôe3_cﬁumn_ãxt16
,

172 
sqlôe3_cﬁumn_ty≥
,

173 
sqlôe3_cﬁumn_vÆue
,

174 
sqlôe3_commô_hook
,

175 
sqlôe3_com∂ëe
,

176 
sqlôe3_com∂ëe16
,

177 
sqlôe3_¸óã_cﬁœti⁄
,

178 
sqlôe3_¸óã_cﬁœti⁄16
,

179 
sqlôe3_¸óã_fun˘i⁄
,

180 
sqlôe3_¸óã_fun˘i⁄16
,

181 
sqlôe3_¸óã_moduÀ
,

182 
sqlôe3_d©a_cou¡
,

183 
sqlôe3_db_h™dÀ
,

184 
sqlôe3_de˛¨e_vèb
,

185 
sqlôe3_íabÀ_sh¨ed_ˇche
,

186 
sqlôe3_îrcode
,

187 
sqlôe3_îrmsg
,

188 
sqlôe3_îrmsg16
,

189 
sqlôe3_exec
,

190 #i‚de‡
SQLITE_OMIT_DEPRECATED


191 
sqlôe3_expúed
,

195 
sqlôe3_föÆize
,

196 
sqlôe3_‰ì
,

197 
sqlôe3_‰ì_èbÀ
,

198 
sqlôe3_gë_autocommô
,

199 
sqlôe3_gë_auxd©a
,

200 
sqlôe3_gë_èbÀ
,

202 
sqlôe3_öãºu±
,

203 
sqlôe3_œ°_ö£π_rowid
,

204 
sqlôe3_libvîsi⁄
,

205 
sqlôe3_libvîsi⁄_numbî
,

206 
sqlôe3_mÆloc
,

207 
sqlôe3_m¥ötf
,

208 
sqlôe3_›í
,

209 
sqlôe3_›í16
,

210 
sqlôe3_¥ï¨e
,

211 
sqlôe3_¥ï¨e16
,

212 
sqlôe3_¥ofûe
,

213 
sqlôe3_¥ogªss_h™dÀr
,

214 
sqlôe3_ªÆloc
,

215 
sqlôe3_ª£t
,

216 
sqlôe3_ªsu…_blob
,

217 
sqlôe3_ªsu…_doubÀ
,

218 
sqlôe3_ªsu…_îr‹
,

219 
sqlôe3_ªsu…_îr‹16
,

220 
sqlôe3_ªsu…_öt
,

221 
sqlôe3_ªsu…_öt64
,

222 
sqlôe3_ªsu…_nuŒ
,

223 
sqlôe3_ªsu…_ãxt
,

224 
sqlôe3_ªsu…_ãxt16
,

225 
sqlôe3_ªsu…_ãxt16be
,

226 
sqlôe3_ªsu…_ãxt16À
,

227 
sqlôe3_ªsu…_vÆue
,

228 
sqlôe3_rﬁlback_hook
,

229 
sqlôe3_£t_auth‹izî
,

230 
sqlôe3_£t_auxd©a
,

231 
sqlôe3_¢¥ötf
,

232 
sqlôe3_°ï
,

233 
sqlôe3_èbÀ_cﬁumn_mëad©a
,

234 #i‚de‡
SQLITE_OMIT_DEPRECATED


235 
sqlôe3_thªad_˛ónup
,

239 
sqlôe3_tŸÆ_ch™ges
,

240 
sqlôe3_åa˚
,

241 #i‚de‡
SQLITE_OMIT_DEPRECATED


242 
sqlôe3_å™s„r_bödögs
,

246 
sqlôe3_upd©e_hook
,

247 
sqlôe3_u£r_d©a
,

248 
sqlôe3_vÆue_blob
,

249 
sqlôe3_vÆue_byãs
,

250 
sqlôe3_vÆue_byãs16
,

251 
sqlôe3_vÆue_doubÀ
,

252 
sqlôe3_vÆue_öt
,

253 
sqlôe3_vÆue_öt64
,

254 
sqlôe3_vÆue_numîic_ty≥
,

255 
sqlôe3_vÆue_ãxt
,

256 
sqlôe3_vÆue_ãxt16
,

257 
sqlôe3_vÆue_ãxt16be
,

258 
sqlôe3_vÆue_ãxt16À
,

259 
sqlôe3_vÆue_ty≥
,

260 
sqlôe3_vm¥ötf
,

269 
sqlôe3_ovîlﬂd_fun˘i⁄
,

274 
sqlôe3_¥ï¨e_v2
,

275 
sqlôe3_¥ï¨e16_v2
,

276 
sqlôe3_˛ór_bödögs
,

281 
sqlôe3_¸óã_moduÀ_v2
,

286 
sqlôe3_böd_zîoblob
,

287 
sqlôe3_blob_byãs
,

288 
sqlôe3_blob_˛o£
,

289 
sqlôe3_blob_›í
,

290 
sqlôe3_blob_ªad
,

291 
sqlôe3_blob_wrôe
,

292 
sqlôe3_¸óã_cﬁœti⁄_v2
,

293 
sqlôe3_fûe_c⁄åﬁ
,

294 
sqlôe3_mem‹y_highw©î
,

295 
sqlôe3_mem‹y_u£d
,

296 #ifde‡
SQLITE_MUTEX_OMIT


303 
sqlôe3_muãx_Æloc
,

304 
sqlôe3_muãx_íãr
,

305 
sqlôe3_muãx_‰ì
,

306 
sqlôe3_muãx_Àave
,

307 
sqlôe3_muãx_åy
,

309 
sqlôe3_›í_v2
,

310 
sqlôe3_ªÀa£_mem‹y
,

311 
sqlôe3_ªsu…_îr‹_nomem
,

312 
sqlôe3_ªsu…_îr‹_toobig
,

313 
sqlôe3_¶ìp
,

314 
sqlôe3_so·_hóp_limô
,

315 
sqlôe3_vfs_föd
,

316 
sqlôe3_vfs_ªgi°î
,

317 
sqlôe3_vfs_uƒegi°î
,

322 
sqlôe3_thªadß„
,

323 
sqlôe3_ªsu…_zîoblob
,

324 
sqlôe3_ªsu…_îr‹_code
,

325 
sqlôe3_ã°_c⁄åﬁ
,

326 
sqlôe3_øndom√ss
,

327 
sqlôe3_c⁄ãxt_db_h™dÀ
,

332 
sqlôe3_exãnded_ªsu…_codes
,

333 
sqlôe3_limô
,

334 
sqlôe3_√xt_°mt
,

335 
sqlôe3_sql
,

336 
sqlôe3_°©us
,

341 
sqlôe3_backup_föish
,

342 
sqlôe3_backup_öô
,

343 
sqlôe3_backup_∑gecou¡
,

344 
sqlôe3_backup_ªmaöög
,

345 
sqlôe3_backup_°ï
,

346 #i‚de‡
SQLITE_OMIT_COMPILEOPTION_DIAGS


347 
sqlôe3_compûe›ti⁄_gë
,

348 
sqlôe3_compûe›ti⁄_u£d
,

353 
sqlôe3_¸óã_fun˘i⁄_v2
,

354 
sqlôe3_db_c⁄fig
,

355 
sqlôe3_db_muãx
,

356 
sqlôe3_db_°©us
,

357 
sqlôe3_exãnded_îrcode
,

358 
sqlôe3_log
,

359 
sqlôe3_so·_hóp_limô64
,

360 
sqlôe3_sour˚id
,

361 
sqlôe3_°mt_°©us
,

362 
sqlôe3_°∫icmp
,

363 #ifde‡
SQLITE_ENABLE_UNLOCK_NOTIFY


364 
sqlôe3_u∆ock_nŸify
,

368 #i‚de‡
SQLITE_OMIT_WAL


369 
sqlôe3_wÆ_autocheckpoöt
,

370 
sqlôe3_wÆ_checkpoöt
,

371 
sqlôe3_wÆ_hook
,

377 
sqlôe3_blob_ª›í
,

378 
sqlôe3_vèb_c⁄fig
,

379 
sqlôe3_vèb_⁄_c⁄Êi˘
,

380 
sqlôe3_˛o£_v2
,

381 
sqlôe3_db_fûíame
,

382 
sqlôe3_db_ªad⁄ly
,

383 
sqlôe3_db_ªÀa£_mem‹y
,

384 
sqlôe3_îr°r
,

385 
sqlôe3_°mt_busy
,

386 
sqlôe3_°mt_ªad⁄ly
,

387 
sqlôe3_°ricmp
,

388 
sqlôe3_uri_boﬁón
,

389 
sqlôe3_uri_öt64
,

390 
sqlôe3_uri_∑ømëî
,

391 
sqlôe3_v¢¥ötf
,

392 
sqlôe3_wÆ_checkpoöt_v2
,

394 
sqlôe3_auto_exãnsi⁄
,

395 
sqlôe3_böd_blob64
,

396 
sqlôe3_böd_ãxt64
,

397 
sqlôe3_ˇn˚l_auto_exãnsi⁄
,

398 
sqlôe3_lﬂd_exãnsi⁄
,

399 
sqlôe3_mÆloc64
,

400 
sqlôe3_msize
,

401 
sqlôe3_ªÆloc64
,

402 
sqlôe3_ª£t_auto_exãnsi⁄
,

403 
sqlôe3_ªsu…_blob64
,

404 
sqlôe3_ªsu…_ãxt64
,

405 
sqlôe3_°rglob
,

407 (
sqlôe3_vÆue
*(*)(c⁄° sqlôe3_vÆue*))
sqlôe3_vÆue_dup
,

408 
sqlôe3_vÆue_‰ì
,

409 
sqlôe3_ªsu…_zîoblob64
,

410 
sqlôe3_böd_zîoblob64
,

412 
sqlôe3_vÆue_subty≥
,

413 
sqlôe3_ªsu…_subty≥
,

415 
sqlôe3_°©us64
,

416 
sqlôe3_°æike
,

417 
sqlôe3_db_ˇcheÊush
,

419 
sqlôe3_sy°em_î∫o


434 
	$sqlôe3LﬂdExãnsi⁄
(

435 
sqlôe3
 *
db
,

436 c⁄° *
zFûe
,

437 c⁄° *
zProc
,

438 **
pzEºMsg


440 
sqlôe3_vfs
 *
pVfs
 = 
db
->pVfs;

441 *
h™dÀ
;

442 (*
xInô
)(
sqlôe3
*,**,c⁄° 
sqlôe3_≠i_routöes
*);

443 *
zEºmsg
 = 0;

444 c⁄° *
zE¡ry
;

445 *
zA…E¡ry
 = 0;

446 **
aH™dÀ
;

447 
u64
 
nMsg
 = 300 + 
	`sqlôe3SåÀn30
(
zFûe
);

448 
ii
;

451 c⁄° *
azEndögs
[] = {

452 #i‡
SQLITE_OS_WIN


454 #ñi‡
	`deföed
(
__APPLE__
)

462 if–
pzEºMsg
 ) *pzErrMsg = 0;

471 if–(
db
->
Êags
 & 
SQLITE_LﬂdExãnsi⁄
)==0 ){

472 if–
pzEºMsg
 ){

473 *
pzEºMsg
 = 
	`sqlôe3_m¥ötf
("notáuthorized");

475  
SQLITE_ERROR
;

478 
zE¡ry
 = 
zProc
 ? zProc : "sqlite3_extension_init";

480 
h™dÀ
 = 
	`sqlôe3OsDlO≥n
(
pVfs
, 
zFûe
);

481 #i‡
SQLITE_OS_UNIX
 || 
SQLITE_OS_WIN


482 
ii
=0; ii<
	`AºaySize
(
azEndögs
Ë&& 
h™dÀ
==0; ii++){

483 *
zA…Fûe
 = 
	`sqlôe3_m¥ötf
("%s.%s", 
zFûe
, 
azEndögs
[
ii
]);

484 if–
zA…Fûe
==0 )  
SQLITE_NOMEM_BKPT
;

485 
h™dÀ
 = 
	`sqlôe3OsDlO≥n
(
pVfs
, 
zA…Fûe
);

486 
	`sqlôe3_‰ì
(
zA…Fûe
);

489 if–
h™dÀ
==0 ){

490 if–
pzEºMsg
 ){

491 *
pzEºMsg
 = 
zEºmsg
 = 
	`sqlôe3_mÆloc64
(
nMsg
);

492 if–
zEºmsg
 ){

493 
	`sqlôe3_¢¥ötf
(
nMsg
, 
zEºmsg
,

494 "u«bÀÅÿ›í sh¨edÜibøry [%s]", 
zFûe
);

495 
	`sqlôe3OsDlEº‹
(
pVfs
, 
nMsg
-1, 
zEºmsg
);

498  
SQLITE_ERROR
;

500 
xInô
 = ((*)(
sqlôe3
*,**,c⁄° 
sqlôe3_≠i_routöes
*))

501 
	`sqlôe3OsDlSym
(
pVfs
, 
h™dÀ
, 
zE¡ry
);

514 if–
xInô
==0 && 
zProc
==0 ){

515 
iFûe
, 
iE¡ry
, 
c
;

516 
ncFûe
 = 
	`sqlôe3SåÀn30
(
zFûe
);

517 
zA…E¡ry
 = 
	`sqlôe3_mÆloc64
(
ncFûe
+30);

518 if–
zA…E¡ry
==0 ){

519 
	`sqlôe3OsDlClo£
(
pVfs
, 
h™dÀ
);

520  
SQLITE_NOMEM_BKPT
;

522 
	`mem˝y
(
zA…E¡ry
, "sqlite3_", 8);

523 
iFûe
=
ncFûe
-1; iFûe>=0 && 
zFûe
[iFile]!='/'; iFile--){}

524 
iFûe
++;

525 if–
	`sqlôe3_°∫icmp
(
zFûe
+
iFûe
, "lib", 3)==0 ) iFile += 3;

526 
iE¡ry
=8; (
c
 = 
zFûe
[
iFûe
])!=0 && c!='.'; iFile++){

527 if–
	`sqlôe3IßÕha
(
c
) ){

528 
zA…E¡ry
[
iE¡ry
++] = ()
sqlôe3UµîToLowî
[()
c
];

531 
	`mem˝y
(
zA…E¡ry
+
iE¡ry
, "_init", 6);

532 
zE¡ry
 = 
zA…E¡ry
;

533 
xInô
 = ((*)(
sqlôe3
*,**,c⁄° 
sqlôe3_≠i_routöes
*))

534 
	`sqlôe3OsDlSym
(
pVfs
, 
h™dÀ
, 
zE¡ry
);

536 if–
xInô
==0 ){

537 if–
pzEºMsg
 ){

538 
nMsg
 +
	`sqlôe3SåÀn30
(
zE¡ry
);

539 *
pzEºMsg
 = 
zEºmsg
 = 
	`sqlôe3_mÆloc64
(
nMsg
);

540 if–
zEºmsg
 ){

541 
	`sqlôe3_¢¥ötf
(
nMsg
, 
zEºmsg
,

542 "nÿíåyÖoöà[%s] i¿sh¨edÜibøry [%s]", 
zE¡ry
, 
zFûe
);

543 
	`sqlôe3OsDlEº‹
(
pVfs
, 
nMsg
-1, 
zEºmsg
);

546 
	`sqlôe3OsDlClo£
(
pVfs
, 
h™dÀ
);

547 
	`sqlôe3_‰ì
(
zA…E¡ry
);

548  
SQLITE_ERROR
;

550 
	`sqlôe3_‰ì
(
zA…E¡ry
);

551 if–
	`xInô
(
db
, &
zEºmsg
, &
sqlôe3Apis
) ){

552 if–
pzEºMsg
 ){

553 *
pzEºMsg
 = 
	`sqlôe3_m¥ötf
("îr‹ durög inôüliz©i⁄: %s", 
zEºmsg
);

555 
	`sqlôe3_‰ì
(
zEºmsg
);

556 
	`sqlôe3OsDlClo£
(
pVfs
, 
h™dÀ
);

557  
SQLITE_ERROR
;

561 
aH™dÀ
 = 
	`sqlôe3DbMÆlocZîo
(
db
, (
h™dÀ
)*(db->
nExãnsi⁄
+1));

562 if–
aH™dÀ
==0 ){

563  
SQLITE_NOMEM_BKPT
;

565 if–
db
->
nExãnsi⁄
>0 ){

566 
	`mem˝y
(
aH™dÀ
, 
db
->
aExãnsi⁄
, (
h™dÀ
)*db->
nExãnsi⁄
);

568 
	`sqlôe3DbFªe
(
db
, db->
aExãnsi⁄
);

569 
db
->
aExãnsi⁄
 = 
aH™dÀ
;

571 
db
->
aExãnsi⁄
[db->
nExãnsi⁄
++] = 
h™dÀ
;

572  
SQLITE_OK
;

573 
	}
}

574 
	$sqlôe3_lﬂd_exãnsi⁄
(

575 
sqlôe3
 *
db
,

576 c⁄° *
zFûe
,

577 c⁄° *
zProc
,

578 **
pzEºMsg


580 
rc
;

581 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

582 
rc
 = 
	`sqlôe3LﬂdExãnsi⁄
(
db
, 
zFûe
, 
zProc
, 
pzEºMsg
);

583 
rc
 = 
	`sqlôe3ApiExô
(
db
,Ñc);

584 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

585  
rc
;

586 
	}
}

592 
	$sqlôe3Clo£Exãnsi⁄s
(
sqlôe3
 *
db
){

593 
i
;

594 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

595 
i
=0; i<
db
->
nExãnsi⁄
; i++){

596 
	`sqlôe3OsDlClo£
(
db
->
pVfs
, db->
aExãnsi⁄
[
i
]);

598 
	`sqlôe3DbFªe
(
db
, db->
aExãnsi⁄
);

599 
	}
}

605 
	$sqlôe3_íabÀ_lﬂd_exãnsi⁄
(
sqlôe3
 *
db
, 
⁄off
){

606 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

607 if–
⁄off
 ){

608 
db
->
Êags
 |
SQLITE_LﬂdExãnsi⁄
|
SQLITE_LﬂdExtFunc
;

610 
db
->
Êags
 &~(
SQLITE_LﬂdExãnsi⁄
|
SQLITE_LﬂdExtFunc
);

612 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

613  
SQLITE_OK
;

614 
	}
}

624 #ifde‡
SQLITE_OMIT_LOAD_EXTENSION


625 c⁄° 
sqlôe3_≠i_routöes
 
	gsqlôe3Apis
 = { 0 };

636 
sqlôe3AutoExtLi°
 
	tsqlôe3AutoExtLi°
;

637 
SQLITE_WSD
 
	ssqlôe3AutoExtLi°
 {

638 
u32
 
	mnExt
;

639 (**
	maExt
)();

640 } 
	gsqlôe3Aut€xt
 = { 0, 0 };

648 #ifde‡
SQLITE_OMIT_WSD


649 
	#wsdAut€xtInô
 \

650 
sqlôe3AutoExtLi°
 *
x
 = &
	`GLOBAL
(sqlôe3AutoExtLi°,
sqlôe3Aut€xt
)

	)

651 
	#wsdAut€xt
 
x
[0]

	)

653 
	#wsdAut€xtInô


	)

654 
	#wsdAut€xt
 
sqlôe3Aut€xt


	)

662 
sqlôe3_auto_exãnsi⁄
((*
xInô
)()){

663 
rc
 = 
SQLITE_OK
;

664 #i‚de‡
SQLITE_OMIT_AUTOINIT


665 
rc
 = 
	`sqlôe3_öôülize
();

666 if–
rc
 ){

667  
rc
;

671 
u32
 
i
;

672 #i‡
SQLITE_THREADSAFE


673 
sqlôe3_muãx
 *
muãx
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MASTER
);

675 
wsdAut€xtInô
;

676 
	`sqlôe3_muãx_íãr
(
muãx
);

677 
i
=0; i<
wsdAut€xt
.
nExt
; i++){

678 if–
wsdAut€xt
.
aExt
[
i
]==
xInô
 ) ;

680 if–
i
==
wsdAut€xt
.
nExt
 ){

681 
u64
 
nByã
 = (
wsdAut€xt
.
nExt
+1)*(wsdAut€xt.
aExt
[0]);

682 (**
aNew
)();

683 
aNew
 = 
	`sqlôe3_ªÆloc64
(
wsdAut€xt
.
aExt
, 
nByã
);

684 if–
aNew
==0 ){

685 
rc
 = 
SQLITE_NOMEM_BKPT
;

687 
wsdAut€xt
.
aExt
 = 
aNew
;

688 
wsdAut€xt
.
aExt
[wsdAut€xt.
nExt
] = 
xInô
;

689 
wsdAut€xt
.
nExt
++;

692 
	`sqlôe3_muãx_Àave
(
muãx
);

693 
	`as£π
–(
rc
&0xff)==rc );

694  
rc
;

696 
	}
}

707 
sqlôe3_ˇn˚l_auto_exãnsi⁄
((*
xInô
)()){

708 #i‡
SQLITE_THREADSAFE


709 
sqlôe3_muãx
 *
muãx
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MASTER
);

711 
i
;

712 
n
 = 0;

713 
wsdAut€xtInô
;

714 
	`sqlôe3_muãx_íãr
(
muãx
);

715 
i
=()
wsdAut€xt
.
nExt
-1; i>=0; i--){

716 if–
wsdAut€xt
.
aExt
[
i
]==
xInô
 ){

717 
wsdAut€xt
.
nExt
--;

718 
wsdAut€xt
.
aExt
[
i
] = wsdAut€xt.aExt[wsdAut€xt.
nExt
];

719 
n
++;

723 
	`sqlôe3_muãx_Àave
(
muãx
);

724  
n
;

725 
	}
}

730 
	$sqlôe3_ª£t_auto_exãnsi⁄
(){

731 #i‚de‡
SQLITE_OMIT_AUTOINIT


732 if–
	`sqlôe3_öôülize
()==
SQLITE_OK
 )

735 #i‡
SQLITE_THREADSAFE


736 
sqlôe3_muãx
 *
muãx
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MASTER
);

738 
wsdAut€xtInô
;

739 
	`sqlôe3_muãx_íãr
(
muãx
);

740 
	`sqlôe3_‰ì
(
wsdAut€xt
.
aExt
);

741 
wsdAut€xt
.
aExt
 = 0;

742 
wsdAut€xt
.
nExt
 = 0;

743 
	`sqlôe3_muãx_Àave
(
muãx
);

745 
	}
}

752 
	$sqlôe3AutoLﬂdExãnsi⁄s
(
sqlôe3
 *
db
){

753 
u32
 
i
;

754 
go
 = 1;

755 
rc
;

756 (*
xInô
)(
sqlôe3
*,**,c⁄° 
sqlôe3_≠i_routöes
*);

758 
wsdAut€xtInô
;

759 if–
wsdAut€xt
.
nExt
==0 ){

763 
i
=0; 
go
; i++){

764 *
zEºmsg
;

765 #i‡
SQLITE_THREADSAFE


766 
sqlôe3_muãx
 *
muãx
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MASTER
);

768 
	`sqlôe3_muãx_íãr
(
muãx
);

769 if–
i
>=
wsdAut€xt
.
nExt
 ){

770 
xInô
 = 0;

771 
go
 = 0;

773 
xInô
 = ((*)(
sqlôe3
*,**,c⁄° 
sqlôe3_≠i_routöes
*))

774 
wsdAut€xt
.
aExt
[
i
];

776 
	`sqlôe3_muãx_Àave
(
muãx
);

777 
zEºmsg
 = 0;

778 if–
xInô
 && (
rc
 = 
	`xInô
(
db
, &
zEºmsg
, &
sqlôe3Apis
))!=0 ){

779 
	`sqlôe3Eº‹WôhMsg
(
db
, 
rc
,

780 "autom©i¯exãnsi⁄Üﬂdög faûed: %s", 
zEºmsg
);

781 
go
 = 0;

783 
	`sqlôe3_‰ì
(
zEºmsg
);

785 
	}
}

	@main.c

17 
	~"sqlôeI¡.h
"

19 #ifde‡
SQLITE_ENABLE_FTS3


20 
	~"·s3.h
"

22 #ifde‡
SQLITE_ENABLE_RTREE


23 
	~"πªe.h
"

25 #ifde‡
SQLITE_ENABLE_ICU


26 
	~"sqlôeicu.h
"

28 #ifde‡
SQLITE_ENABLE_JSON1


29 
sqlôe3Js⁄1Inô
(
sqlôe3
*);

31 #ifde‡
SQLITE_ENABLE_FTS5


32 
sqlôe3Fts5Inô
(
sqlôe3
*);

35 #i‚de‡
SQLITE_AMALGAMATION


39 c⁄° 
	gsqlôe3_vîsi⁄
[] = 
SQLITE_VERSION
;

45 c⁄° *
	$sqlôe3_libvîsi⁄
(){  
sqlôe3_vîsi⁄
; 
	}
}

51 c⁄° *
	$sqlôe3_sour˚id
(){  
SQLITE_SOURCE_ID
; 
	}
}

56 
	$sqlôe3_libvîsi⁄_numbî
(){  
SQLITE_VERSION_NUMBER
; 
	}
}

62 
	$sqlôe3_thªadß„
(){  
SQLITE_THREADSAFE
; 
	}
}

69 #ifde‡
SQLITE_HAVE_OS_TRACE


70 #i‚de‡
SQLITE_DEBUG_OS_TRACE


71 
	#SQLITE_DEBUG_OS_TRACE
 0

	)

73 
	gsqlôe3OSTø˚
 = 
SQLITE_DEBUG_OS_TRACE
;

76 #i‡!
deföed
(
SQLITE_OMIT_TRACE
Ë&& deföed(
SQLITE_ENABLE_IOTRACE
)

83 
SQLITE_API
 (
SQLITE_CDECL
 *
sqlôe3IoTø˚
)(const *, ...) = 0;

93 *
sqlôe3_ãmp_dúe˘‹y
 = 0;

102 *
sqlôe3_d©a_dúe˘‹y
 = 0;

135 
	$sqlôe3_öôülize
(){

136 
	`MUTEX_LOGIC
–
sqlôe3_muãx
 *
pMa°î
; )

137 
rc
;

138 #ifde‡
SQLITE_EXTRA_INIT


139 
bRunExåaInô
 = 0;

142 #ifde‡
SQLITE_OMIT_WSD


143 
rc
 = 
	`sqlôe3_wsd_öô
(4096, 24);

144 if–
rc
!=
SQLITE_OK
 ){

145  
rc
;

152 
	`as£π
–
SQLITE_PTRSIZE
==(*) );

159 if–
sqlôe3GlobÆC⁄fig
.
isInô
 )  
SQLITE_OK
;

169 
rc
 = 
	`sqlôe3MuãxInô
();

170 if–
rc
 ) Ñc;

178 
	`MUTEX_LOGIC
–
pMa°î
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MASTER
); )

179 
	`sqlôe3_muãx_íãr
(
pMa°î
);

180 
sqlôe3GlobÆC⁄fig
.
isMuãxInô
 = 1;

181 if–!
sqlôe3GlobÆC⁄fig
.
isMÆlocInô
 ){

182 
rc
 = 
	`sqlôe3MÆlocInô
();

184 if–
rc
==
SQLITE_OK
 ){

185 
sqlôe3GlobÆC⁄fig
.
isMÆlocInô
 = 1;

186 if–!
sqlôe3GlobÆC⁄fig
.
pInôMuãx
 ){

187 
sqlôe3GlobÆC⁄fig
.
pInôMuãx
 =

188 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_RECURSIVE
);

189 if–
sqlôe3GlobÆC⁄fig
.
bC‹eMuãx
 && !sqlôe3GlobÆC⁄fig.
pInôMuãx
 ){

190 
rc
 = 
SQLITE_NOMEM_BKPT
;

194 if–
rc
==
SQLITE_OK
 ){

195 
sqlôe3GlobÆC⁄fig
.
nRefInôMuãx
++;

197 
	`sqlôe3_muãx_Àave
(
pMa°î
);

202 if–
rc
!=
SQLITE_OK
 ){

203  
rc
;

219 
	`sqlôe3_muãx_íãr
(
sqlôe3GlobÆC⁄fig
.
pInôMuãx
);

220 if–
sqlôe3GlobÆC⁄fig
.
isInô
==0 && sqlôe3GlobÆC⁄fig.
öProgªss
==0 ){

221 
sqlôe3GlobÆC⁄fig
.
öProgªss
 = 1;

222 #ifde‡
SQLITE_ENABLE_SQLLOG


224 
	`sqlôe3_öô_sqŒog
();

225 
	`sqlôe3_öô_sqŒog
();

228 
	`mem£t
(&
sqlôe3BuûtöFun˘i⁄s
, 0, (sqlite3BuiltinFunctions));

229 
	`sqlôe3Regi°îBuûtöFun˘i⁄s
();

230 if–
sqlôe3GlobÆC⁄fig
.
isPCacheInô
==0 ){

231 
rc
 = 
	`sqlôe3PˇcheInôülize
();

233 if–
rc
==
SQLITE_OK
 ){

234 
sqlôe3GlobÆC⁄fig
.
isPCacheInô
 = 1;

235 
rc
 = 
	`sqlôe3OsInô
();

237 if–
rc
==
SQLITE_OK
 ){

238 
	`sqlôe3PCacheBuf„rSëup
–
sqlôe3GlobÆC⁄fig
.
pPage
,

239 
sqlôe3GlobÆC⁄fig
.
szPage
, sqlôe3GlobÆC⁄fig.
nPage
);

240 
sqlôe3GlobÆC⁄fig
.
isInô
 = 1;

241 #ifde‡
SQLITE_EXTRA_INIT


242 
bRunExåaInô
 = 1;

245 
sqlôe3GlobÆC⁄fig
.
öProgªss
 = 0;

247 
	`sqlôe3_muãx_Àave
(
sqlôe3GlobÆC⁄fig
.
pInôMuãx
);

252 
	`sqlôe3_muãx_íãr
(
pMa°î
);

253 
sqlôe3GlobÆC⁄fig
.
nRefInôMuãx
--;

254 if–
sqlôe3GlobÆC⁄fig
.
nRefInôMuãx
<=0 ){

255 
	`as£π
–
sqlôe3GlobÆC⁄fig
.
nRefInôMuãx
==0 );

256 
	`sqlôe3_muãx_‰ì
(
sqlôe3GlobÆC⁄fig
.
pInôMuãx
);

257 
sqlôe3GlobÆC⁄fig
.
pInôMuãx
 = 0;

259 
	`sqlôe3_muãx_Àave
(
pMa°î
);

266 #i‚de‡
NDEBUG


267 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


269 i‡–
rc
==
SQLITE_OK
 ){

270 
u64
 
x
 = (((u64)1)<<63)-1;

271 
y
;

272 
	`as£π
((
x
)==8);

273 
	`as£π
((
x
)==(
y
));

274 
	`mem˝y
(&
y
, &
x
, 8);

275 
	`as£π
–
	`sqlôe3IsNaN
(
y
) );

283 #ifde‡
SQLITE_EXTRA_INIT


284 if–
bRunExåaInô
 ){

285 
	`SQLITE_EXTRA_INIT
(const *);

286 
rc
 = 
	`SQLITE_EXTRA_INIT
(0);

290  
rc
;

291 
	}
}

301 
	$sqlôe3_shutdown
(){

302 #ifde‡
SQLITE_OMIT_WSD


303 
rc
 = 
	`sqlôe3_wsd_öô
(4096, 24);

304 if–
rc
!=
SQLITE_OK
 ){

305  
rc
;

309 if–
sqlôe3GlobÆC⁄fig
.
isInô
 ){

310 #ifde‡
SQLITE_EXTRA_SHUTDOWN


311 
	`SQLITE_EXTRA_SHUTDOWN
();

312 
	`SQLITE_EXTRA_SHUTDOWN
();

314 
	`sqlôe3_os_íd
();

315 
	`sqlôe3_ª£t_auto_exãnsi⁄
();

316 
sqlôe3GlobÆC⁄fig
.
isInô
 = 0;

318 if–
sqlôe3GlobÆC⁄fig
.
isPCacheInô
 ){

319 
	`sqlôe3PˇcheShutdown
();

320 
sqlôe3GlobÆC⁄fig
.
isPCacheInô
 = 0;

322 if–
sqlôe3GlobÆC⁄fig
.
isMÆlocInô
 ){

323 
	`sqlôe3MÆlocEnd
();

324 
sqlôe3GlobÆC⁄fig
.
isMÆlocInô
 = 0;

326 #i‚de‡
SQLITE_OMIT_SHUTDOWN_DIRECTORIES


334 
sqlôe3_d©a_dúe˘‹y
 = 0;

335 
sqlôe3_ãmp_dúe˘‹y
 = 0;

338 if–
sqlôe3GlobÆC⁄fig
.
isMuãxInô
 ){

339 
	`sqlôe3MuãxEnd
();

340 
sqlôe3GlobÆC⁄fig
.
isMuãxInô
 = 0;

343  
SQLITE_OK
;

344 
	}
}

355 
	$sqlôe3_c⁄fig
(
›
, ...){

356 
va_li°
 
≠
;

357 
rc
 = 
SQLITE_OK
;

361 if–
sqlôe3GlobÆC⁄fig
.
isInô
 )  
SQLITE_MISUSE_BKPT
;

363 
	`va_°¨t
(
≠
, 
›
);

364  
›
 ){

369 #i‡
	`deföed
(
SQLITE_THREADSAFE
) && SQLITE_THREADSAFE>0

370 
SQLITE_CONFIG_SINGLETHREAD
: {

373 
sqlôe3GlobÆC⁄fig
.
bC‹eMuãx
 = 0;

374 
sqlôe3GlobÆC⁄fig
.
bFuŒMuãx
 = 0;

378 #i‡
	`deföed
(
SQLITE_THREADSAFE
) && SQLITE_THREADSAFE>0

379 
SQLITE_CONFIG_MULTITHREAD
: {

382 
sqlôe3GlobÆC⁄fig
.
bC‹eMuãx
 = 1;

383 
sqlôe3GlobÆC⁄fig
.
bFuŒMuãx
 = 0;

387 #i‡
	`deföed
(
SQLITE_THREADSAFE
) && SQLITE_THREADSAFE>0

388 
SQLITE_CONFIG_SERIALIZED
: {

391 
sqlôe3GlobÆC⁄fig
.
bC‹eMuãx
 = 1;

392 
sqlôe3GlobÆC⁄fig
.
bFuŒMuãx
 = 1;

396 #i‡
	`deföed
(
SQLITE_THREADSAFE
) && SQLITE_THREADSAFE>0

397 
SQLITE_CONFIG_MUTEX
: {

399 
sqlôe3GlobÆC⁄fig
.
muãx
 = *
	`va_¨g
(
≠
, 
sqlôe3_muãx_mëhods
*);

403 #i‡
	`deföed
(
SQLITE_THREADSAFE
) && SQLITE_THREADSAFE>0

404 
SQLITE_CONFIG_GETMUTEX
: {

406 *
	`va_¨g
(
≠
, 
sqlôe3_muãx_mëhods
*Ë
sqlôe3GlobÆC⁄fig
.
muãx
;

411 
SQLITE_CONFIG_MALLOC
: {

417 
sqlôe3GlobÆC⁄fig
.
m
 = *
	`va_¨g
(
≠
, 
sqlôe3_mem_mëhods
*);

420 
SQLITE_CONFIG_GETMALLOC
: {

425 if–
sqlôe3GlobÆC⁄fig
.
m
.
xMÆloc
==0 ) 
	`sqlôe3MemSëDeÁu…
();

426 *
	`va_¨g
(
≠
, 
sqlôe3_mem_mëhods
*Ë
sqlôe3GlobÆC⁄fig
.
m
;

429 
SQLITE_CONFIG_MEMSTATUS
: {

433 
sqlôe3GlobÆC⁄fig
.
bMem°©
 = 
	`va_¨g
(
≠
, );

436 
SQLITE_CONFIG_SCRATCH
: {

441 
sqlôe3GlobÆC⁄fig
.
pS¸©ch
 = 
	`va_¨g
(
≠
, *);

442 
sqlôe3GlobÆC⁄fig
.
szS¸©ch
 = 
	`va_¨g
(
≠
, );

443 
sqlôe3GlobÆC⁄fig
.
nS¸©ch
 = 
	`va_¨g
(
≠
, );

446 
SQLITE_CONFIG_PAGECACHE
: {

451 
sqlôe3GlobÆC⁄fig
.
pPage
 = 
	`va_¨g
(
≠
, *);

452 
sqlôe3GlobÆC⁄fig
.
szPage
 = 
	`va_¨g
(
≠
, );

453 
sqlôe3GlobÆC⁄fig
.
nPage
 = 
	`va_¨g
(
≠
, );

456 
SQLITE_CONFIG_PCACHE_HDRSZ
: {

461 *
	`va_¨g
(
≠
, *) =

462 
	`sqlôe3HódîSizeBåì
() +

463 
	`sqlôe3HódîSizePˇche
() +

464 
	`sqlôe3HódîSizePˇche1
();

468 
SQLITE_CONFIG_PCACHE
: {

472 
SQLITE_CONFIG_GETPCACHE
: {

474 
rc
 = 
SQLITE_ERROR
;

478 
SQLITE_CONFIG_PCACHE2
: {

483 
sqlôe3GlobÆC⁄fig
.
pˇche2
 = *
	`va_¨g
(
≠
, 
sqlôe3_pˇche_mëhods2
*);

486 
SQLITE_CONFIG_GETPCACHE2
: {

491 if–
sqlôe3GlobÆC⁄fig
.
pˇche2
.
xInô
==0 ){

492 
	`sqlôe3PCacheSëDeÁu…
();

494 *
	`va_¨g
(
≠
, 
sqlôe3_pˇche_mëhods2
*Ë
sqlôe3GlobÆC⁄fig
.
pˇche2
;

501 #i‡
	`deföed
(
SQLITE_ENABLE_MEMSYS3
Ë|| deföed(
SQLITE_ENABLE_MEMSYS5
)

502 
SQLITE_CONFIG_HEAP
: {

507 
sqlôe3GlobÆC⁄fig
.
pHóp
 = 
	`va_¨g
(
≠
, *);

508 
sqlôe3GlobÆC⁄fig
.
nHóp
 = 
	`va_¨g
(
≠
, );

509 
sqlôe3GlobÆC⁄fig
.
mnReq
 = 
	`va_¨g
(
≠
, );

511 if–
sqlôe3GlobÆC⁄fig
.
mnReq
<1 ){

512 
sqlôe3GlobÆC⁄fig
.
mnReq
 = 1;

513 }if–
sqlôe3GlobÆC⁄fig
.
mnReq
>(1<<12) ){

515 
sqlôe3GlobÆC⁄fig
.
mnReq
 = (1<<12);

518 if–
sqlôe3GlobÆC⁄fig
.
pHóp
==0 ){

527 
	`mem£t
(&
sqlôe3GlobÆC⁄fig
.
m
, 0, (sqlite3GlobalConfig.m));

532 #ifde‡
SQLITE_ENABLE_MEMSYS3


533 
sqlôe3GlobÆC⁄fig
.
m
 = *
	`sqlôe3MemGëMemsys3
();

535 #ifde‡
SQLITE_ENABLE_MEMSYS5


536 
sqlôe3GlobÆC⁄fig
.
m
 = *
	`sqlôe3MemGëMemsys5
();

543 
SQLITE_CONFIG_LOOKASIDE
: {

544 
sqlôe3GlobÆC⁄fig
.
szLookaside
 = 
	`va_¨g
(
≠
, );

545 
sqlôe3GlobÆC⁄fig
.
nLookaside
 = 
	`va_¨g
(
≠
, );

553 
SQLITE_CONFIG_LOG
: {

558 (*
	tLOGFUNC_t
)(*,,const *);

559 
sqlôe3GlobÆC⁄fig
.
xLog
 = 
	`va_¨g
(
≠
, 
LOGFUNC_t
);

560 
sqlôe3GlobÆC⁄fig
.
pLogArg
 = 
	`va_¨g
(
≠
, *);

569 
SQLITE_CONFIG_URI
: {

574 
sqlôe3GlobÆC⁄fig
.
bO≥nUri
 = 
	`va_¨g
(
≠
, );

578 
SQLITE_CONFIG_COVERING_INDEX_SCAN
: {

583 
sqlôe3GlobÆC⁄fig
.
bU£Cis
 = 
	`va_¨g
(
≠
, );

587 #ifde‡
SQLITE_ENABLE_SQLLOG


588 
SQLITE_CONFIG_SQLLOG
: {

589 (*
	tSQLLOGFUNC_t
)(*, 
	tsqlôe3
*, const *, );

590 
sqlôe3GlobÆC⁄fig
.
xSqŒog
 = 
	`va_¨g
(
≠
, 
SQLLOGFUNC_t
);

591 
sqlôe3GlobÆC⁄fig
.
pSqŒogArg
 = 
	`va_¨g
(
≠
, *);

596 
SQLITE_CONFIG_MMAP_SIZE
: {

601 
sqlôe3_öt64
 
szMm≠
 = 
	`va_¨g
(
≠
, sqlite3_int64);

602 
sqlôe3_öt64
 
mxMm≠
 = 
	`va_¨g
(
≠
, sqlite3_int64);

611 if–
mxMm≠
<0 || mxMm≠>
SQLITE_MAX_MMAP_SIZE
 ){

612 
mxMm≠
 = 
SQLITE_MAX_MMAP_SIZE
;

614 if–
szMm≠
<0 ) szMm≠ = 
SQLITE_DEFAULT_MMAP_SIZE
;

615 if–
szMm≠
>
mxMm≠
) szMmap = mxMmap;

616 
sqlôe3GlobÆC⁄fig
.
mxMm≠
 = mxMmap;

617 
sqlôe3GlobÆC⁄fig
.
szMm≠
 = szMmap;

621 #i‡
SQLITE_OS_WIN
 && 
	`deföed
(
SQLITE_WIN32_MALLOC
)

622 
SQLITE_CONFIG_WIN32_HEAPSIZE
: {

626 
sqlôe3GlobÆC⁄fig
.
nHóp
 = 
	`va_¨g
(
≠
, );

631 
SQLITE_CONFIG_PMASZ
: {

632 
sqlôe3GlobÆC⁄fig
.
szPma
 = 
	`va_¨g
(
≠
, );

636 
SQLITE_CONFIG_STMTJRNL_SPILL
: {

637 
sqlôe3GlobÆC⁄fig
.
nStmtSpûl
 = 
	`va_¨g
(
≠
, );

642 
rc
 = 
SQLITE_ERROR
;

646 
	`va_íd
(
≠
);

647  
rc
;

648 
	}
}

661 
	$£tupLookaside
(
sqlôe3
 *
db
, *
pBuf
, 
sz
, 
˙t
){

662 #i‚de‡
SQLITE_OMIT_LOOKASIDE


663 *
pSèπ
;

664 if–
db
->
lookaside
.
nOut
 ){

665  
SQLITE_BUSY
;

671 if–
db
->
lookaside
.
bMÆlo˚d
 ){

672 
	`sqlôe3_‰ì
(
db
->
lookaside
.
pSèπ
);

677 
sz
 = 
	`ROUNDDOWN8
(sz);

678 if–
sz
<=()(
LookasideSlŸ
*) ) sz = 0;

679 if–
˙t
<0 ) cnt = 0;

680 if–
sz
==0 || 
˙t
==0 ){

681 
sz
 = 0;

682 
pSèπ
 = 0;

683 }if–
pBuf
==0 ){

684 
	`sqlôe3BegöBíignMÆloc
();

685 
pSèπ
 = 
	`sqlôe3MÆloc
–
sz
*
˙t
 );

686 
	`sqlôe3EndBíignMÆloc
();

687 if–
pSèπ
 ) 
˙t
 = 
	`sqlôe3MÆlocSize
’Sèπ)/
sz
;

689 
pSèπ
 = 
pBuf
;

691 
db
->
lookaside
.
pSèπ
 =ÖStart;

692 
db
->
lookaside
.
pFªe
 = 0;

693 
db
->
lookaside
.
sz
 = (
u16
)sz;

694 if–
pSèπ
 ){

695 
i
;

696 
LookasideSlŸ
 *
p
;

697 
	`as£π
–
sz
 > ()(
LookasideSlŸ
*) );

698 
p
 = (
LookasideSlŸ
*)
pSèπ
;

699 
i
=
˙t
-1; i>=0; i--){

700 
p
->
pNext
 = 
db
->
lookaside
.
pFªe
;

701 
db
->
lookaside
.
pFªe
 = 
p
;

702 
p
 = (
LookasideSlŸ
*)&((
u8
*Ì)[
sz
];

704 
db
->
lookaside
.
pEnd
 = 
p
;

705 
db
->
lookaside
.
bDißbÀ
 = 0;

706 
db
->
lookaside
.
bMÆlo˚d
 = 
pBuf
==0 ?1:0;

708 
db
->
lookaside
.
pSèπ
 = db;

709 
db
->
lookaside
.
pEnd
 = db;

710 
db
->
lookaside
.
bDißbÀ
 = 1;

711 
db
->
lookaside
.
bMÆlo˚d
 = 0;

714  
SQLITE_OK
;

715 
	}
}

720 
sqlôe3_muãx
 *
	$sqlôe3_db_muãx
(
sqlôe3
 *
db
){

721 #ifde‡
SQLITE_ENABLE_API_ARMOR


722 if–!
	`sqlôe3Sa„tyCheckOk
(
db
) ){

723 ()
SQLITE_MISUSE_BKPT
;

727  
db
->
muãx
;

728 
	}
}

734 
	$sqlôe3_db_ªÀa£_mem‹y
(
sqlôe3
 *
db
){

735 
i
;

737 #ifde‡
SQLITE_ENABLE_API_ARMOR


738 if–!
	`sqlôe3Sa„tyCheckOk
(
db
ËË 
SQLITE_MISUSE_BKPT
;

740 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

741 
	`sqlôe3BåìE¡îAŒ
(
db
);

742 
i
=0; i<
db
->
nDb
; i++){

743 
Båì
 *
pBt
 = 
db
->
aDb
[
i
].pBt;

744 if–
pBt
 ){

745 
Pagî
 *
pPagî
 = 
	`sqlôe3BåìPagî
(
pBt
);

746 
	`sqlôe3PagîShrök
(
pPagî
);

749 
	`sqlôe3BåìLóveAŒ
(
db
);

750 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

751  
SQLITE_OK
;

752 
	}
}

758 
	$sqlôe3_db_ˇcheÊush
(
sqlôe3
 *
db
){

759 
i
;

760 
rc
 = 
SQLITE_OK
;

761 
bSìnBusy
 = 0;

763 #ifde‡
SQLITE_ENABLE_API_ARMOR


764 if–!
	`sqlôe3Sa„tyCheckOk
(
db
ËË 
SQLITE_MISUSE_BKPT
;

766 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

767 
	`sqlôe3BåìE¡îAŒ
(
db
);

768 
i
=0; 
rc
==
SQLITE_OK
 && i<
db
->
nDb
; i++){

769 
Båì
 *
pBt
 = 
db
->
aDb
[
i
].pBt;

770 if–
pBt
 && 
	`sqlôe3BåìIsInTøns
(pBt) ){

771 
Pagî
 *
pPagî
 = 
	`sqlôe3BåìPagî
(
pBt
);

772 
rc
 = 
	`sqlôe3PagîFlush
(
pPagî
);

773 if–
rc
==
SQLITE_BUSY
 ){

774 
bSìnBusy
 = 1;

775 
rc
 = 
SQLITE_OK
;

779 
	`sqlôe3BåìLóveAŒ
(
db
);

780 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

781  ((
rc
==
SQLITE_OK
 && 
bSìnBusy
Ë? 
SQLITE_BUSY
 :Ñc);

782 
	}
}

787 
	$sqlôe3_db_c⁄fig
(
sqlôe3
 *
db
, 
›
, ...){

788 
va_li°
 
≠
;

789 
rc
;

790 
	`va_°¨t
(
≠
, 
›
);

791  
›
 ){

792 
SQLITE_DBCONFIG_LOOKASIDE
: {

793 *
pBuf
 = 
	`va_¨g
(
≠
, *);

794 
sz
 = 
	`va_¨g
(
≠
, );

795 
˙t
 = 
	`va_¨g
(
≠
, );

796 
rc
 = 
	`£tupLookaside
(
db
, 
pBuf
, 
sz
, 
˙t
);

801 
›
;

802 
u32
 
mask
;

803 } 
aFœgOp
[] = {

804 { 
SQLITE_DBCONFIG_ENABLE_FKEY
, 
SQLITE_F‹eignKeys
 },

805 { 
SQLITE_DBCONFIG_ENABLE_TRIGGER
, 
SQLITE_E«bÀTriggî
 },

806 { 
SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER
, 
SQLITE_Fts3Tokíizî
 },

807 { 
SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION
, 
SQLITE_LﬂdExãnsi⁄
 },

809 
i
;

810 
rc
 = 
SQLITE_ERROR
;

811 
i
=0; i<
	`AºaySize
(
aFœgOp
); i++){

812 if–
aFœgOp
[
i
].
›
==op ){

813 
⁄off
 = 
	`va_¨g
(
≠
, );

814 *
pRes
 = 
	`va_¨g
(
≠
, *);

815 
ﬁdFœgs
 = 
db
->
Êags
;

816 if–
⁄off
>0 ){

817 
db
->
Êags
 |
aFœgOp
[
i
].
mask
;

818 }if–
⁄off
==0 ){

819 
db
->
Êags
 &~
aFœgOp
[
i
].
mask
;

821 if–
ﬁdFœgs
!=
db
->
Êags
 ){

822 
	`sqlôe3ExpúePª∑ªdSèãmíts
(
db
);

824 if–
pRes
 ){

825 *
pRes
 = (
db
->
Êags
 & 
aFœgOp
[
i
].
mask
)!=0;

827 
rc
 = 
SQLITE_OK
;

834 
	`va_íd
(
≠
);

835  
rc
;

836 
	}
}

842 
	$ÆlS∑˚s
(c⁄° *
z
, 
n
){

843  
n
>0 && 
z
[n-1]==' ' ){Ç--; }

844  
n
==0;

845 
	}
}

854 
	$böCﬁlFunc
(

855 *
∑dFœg
,

856 
nKey1
, c⁄° *
pKey1
,

857 
nKey2
, c⁄° *
pKey2


859 
rc
, 
n
;

860 
n
 = 
nKey1
<
nKey2
 ?ÇKey1 :ÇKey2;

864 
rc
 = 
	`memcmp
(
pKey1
, 
pKey2
, 
n
);

865 if–
rc
==0 ){

866 if–
∑dFœg


867 && 
	`ÆlS∑˚s
(((*)
pKey1
)+
n
, 
nKey1
-n)

868 && 
	`ÆlS∑˚s
(((*)
pKey2
)+
n
, 
nKey2
-n)

876 
rc
 = 
nKey1
 - 
nKey2
;

879  
rc
;

880 
	}
}

891 
	$noˇ£CﬁœtögFunc
(

892 *
NŸU£d
,

893 
nKey1
, c⁄° *
pKey1
,

894 
nKey2
, c⁄° *
pKey2


896 
r
 = 
	`sqlôe3SåNICmp
(

897 (c⁄° *)
pKey1
, (c⁄° *)
pKey2
, (
nKey1
<
nKey2
)?nKey1:nKey2);

898 
	`UNUSED_PARAMETER
(
NŸU£d
);

899 if–0==
r
 ){

900 
r
 = 
nKey1
-
nKey2
;

902  
r
;

903 
	}
}

908 
sqlôe_öt64
 
	$sqlôe3_œ°_ö£π_rowid
(
sqlôe3
 *
db
){

909 #ifde‡
SQLITE_ENABLE_API_ARMOR


910 if–!
	`sqlôe3Sa„tyCheckOk
(
db
) ){

911 ()
SQLITE_MISUSE_BKPT
;

915  
db
->
œ°Rowid
;

916 
	}
}

921 
	$sqlôe3_ch™ges
(
sqlôe3
 *
db
){

922 #ifde‡
SQLITE_ENABLE_API_ARMOR


923 if–!
	`sqlôe3Sa„tyCheckOk
(
db
) ){

924 ()
SQLITE_MISUSE_BKPT
;

928  
db
->
nCh™ge
;

929 
	}
}

934 
	$sqlôe3_tŸÆ_ch™ges
(
sqlôe3
 *
db
){

935 #ifde‡
SQLITE_ENABLE_API_ARMOR


936 if–!
	`sqlôe3Sa„tyCheckOk
(
db
) ){

937 ()
SQLITE_MISUSE_BKPT
;

941  
db
->
nTŸÆCh™ge
;

942 
	}
}

949 
	$sqlôe3Clo£Savïoöts
(
sqlôe3
 *
db
){

950  
db
->
pSavïoöt
 ){

951 
Savïoöt
 *
pTmp
 = 
db
->
pSavïoöt
;

952 
db
->
pSavïoöt
 = 
pTmp
->
pNext
;

953 
	`sqlôe3DbFªe
(
db
, 
pTmp
);

955 
db
->
nSavïoöt
 = 0;

956 
db
->
nSèãmít
 = 0;

957 
db
->
isTønß˘i⁄Savïoöt
 = 0;

958 
	}
}

966 
	$fun˘i⁄De°roy
(
sqlôe3
 *
db
, 
FuncDef
 *
p
){

967 
FuncDe°ru˘‹
 *
pDe°ru˘‹
 = 
p
->
u
.pDestructor;

968 if–
pDe°ru˘‹
 ){

969 
pDe°ru˘‹
->
nRef
--;

970 if–
pDe°ru˘‹
->
nRef
==0 ){

971 
pDe°ru˘‹
->
	`xDe°roy
’De°ru˘‹->
pU£rD©a
);

972 
	`sqlôe3DbFªe
(
db
, 
pDe°ru˘‹
);

975 
	}
}

981 
	$disc⁄√˘AŒVèb
(
sqlôe3
 *
db
){

982 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


983 
i
;

984 
HashEÀm
 *
p
;

985 
	`sqlôe3BåìE¡îAŒ
(
db
);

986 
i
=0; i<
db
->
nDb
; i++){

987 
Schema
 *
pSchema
 = 
db
->
aDb
[
i
].pSchema;

988 if–
db
->
aDb
[
i
].
pSchema
 ){

989 
p
=
	`sqlôeHashFú°
(&
pSchema
->
tblHash
);Ö;Ö=
	`sqlôeHashNext
(p)){

990 
TabÀ
 *
pTab
 = (TabÀ *)
	`sqlôeHashD©a
(
p
);

991 if–
	`IsVútuÆ
(
pTab
ËË
	`sqlôe3VèbDisc⁄√˘
(
db
,ÖTab);

995 
p
=
	`sqlôeHashFú°
(&
db
->
aModuÀ
);Ö;Ö=
	`sqlôeHashNext
(p)){

996 
ModuÀ
 *
pMod
 = (ModuÀ *)
	`sqlôeHashD©a
(
p
);

997 if–
pMod
->
pEpoTab
 ){

998 
	`sqlôe3VèbDisc⁄√˘
(
db
, 
pMod
->
pEpoTab
);

1001 
	`sqlôe3VèbU∆ockLi°
(
db
);

1002 
	`sqlôe3BåìLóveAŒ
(
db
);

1004 
	`UNUSED_PARAMETER
(
db
);

1006 
	}
}

1012 
	$c⁄√˘i⁄IsBusy
(
sqlôe3
 *
db
){

1013 
j
;

1014 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

1015 if–
db
->
pVdbe
 )  1;

1016 
j
=0; j<
db
->
nDb
; j++){

1017 
Båì
 *
pBt
 = 
db
->
aDb
[
j
].pBt;

1018 if–
pBt
 && 
	`sqlôe3BåìIsInBackup
(pBt) )  1;

1021 
	}
}

1026 
	$sqlôe3Clo£
(
sqlôe3
 *
db
, 
f‹˚Zombõ
){

1027 if–!
db
 ){

1030  
SQLITE_OK
;

1032 if–!
	`sqlôe3Sa„tyCheckSickOrOk
(
db
) ){

1033  
SQLITE_MISUSE_BKPT
;

1035 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

1038 
	`disc⁄√˘AŒVèb
(
db
);

1047 
	`sqlôe3VèbRﬁlback
(
db
);

1052 if–!
f‹˚Zombõ
 && 
	`c⁄√˘i⁄IsBusy
(
db
) ){

1053 
	`sqlôe3Eº‹WôhMsg
(
db
, 
SQLITE_BUSY
, "unableÅo close dueÅo unfinalized "

1055 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

1056  
SQLITE_BUSY
;

1059 #ifde‡
SQLITE_ENABLE_SQLLOG


1060 if–
sqlôe3GlobÆC⁄fig
.
xSqŒog
 ){

1062 
sqlôe3GlobÆC⁄fig
.
	`xSqŒog
(sqlôe3GlobÆC⁄fig.
pSqŒogArg
, 
db
, 0, 2);

1068 
db
->
magic
 = 
SQLITE_MAGIC_ZOMBIE
;

1069 
	`sqlôe3LóveMuãxAndClo£Zombõ
(
db
);

1070  
SQLITE_OK
;

1071 
	}
}

1082 
	$sqlôe3_˛o£
(
sqlôe3
 *
db
){  
	`sqlôe3Clo£
(db,0); 
	}
}

1083 
	$sqlôe3_˛o£_v2
(
sqlôe3
 *
db
){  
	`sqlôe3Clo£
(db,1); 
	}
}

1094 
	$sqlôe3LóveMuãxAndClo£Zombõ
(
sqlôe3
 *
db
){

1095 
HashEÀm
 *
i
;

1096 
j
;

1102 if–
db
->
magic
!=
SQLITE_MAGIC_ZOMBIE
 || 
	`c⁄√˘i⁄IsBusy
(db) ){

1103 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

1117 
	`sqlôe3RﬁlbackAŒ
(
db
, 
SQLITE_OK
);

1120 
	`sqlôe3Clo£Savïoöts
(
db
);

1123 
j
=0; j<
db
->
nDb
; j++){

1124 
Db
 *
pDb
 = &
db
->
aDb
[
j
];

1125 if–
pDb
->
pBt
 ){

1126 
	`sqlôe3BåìClo£
(
pDb
->
pBt
);

1127 
pDb
->
pBt
 = 0;

1128 if–
j
!=1 ){

1129 
pDb
->
pSchema
 = 0;

1134 if–
db
->
aDb
[1].
pSchema
 ){

1135 
	`sqlôe3SchemaCÀ¨
(
db
->
aDb
[1].
pSchema
);

1137 
	`sqlôe3VèbU∆ockLi°
(
db
);

1140 
	`sqlôe3Cﬁœp£D©aba£Aºay
(
db
);

1141 
	`as£π
–
db
->
nDb
<=2 );

1142 
	`as£π
–
db
->
aDb
==db->
aDbSètic
 );

1147 
	`sqlôe3C⁄√˘i⁄Clo£d
(
db
);

1149 
i
=
	`sqlôeHashFú°
(&
db
->
aFunc
); i; i=
	`sqlôeHashNext
(i)){

1150 
FuncDef
 *
pNext
, *
p
;

1151 
p
 = 
	`sqlôeHashD©a
(
i
);

1153 
	`fun˘i⁄De°roy
(
db
, 
p
);

1154 
pNext
 = 
p
->pNext;

1155 
	`sqlôe3DbFªe
(
db
, 
p
);

1156 
p
 = 
pNext
;

1157 } 
p
 );

1159 
	`sqlôe3HashCÀ¨
(&
db
->
aFunc
);

1160 
i
=
	`sqlôeHashFú°
(&
db
->
aCﬁlSeq
); i; i=
	`sqlôeHashNext
(i)){

1161 
CﬁlSeq
 *
pCﬁl
 = (CﬁlSeq *)
	`sqlôeHashD©a
(
i
);

1163 
j
=0; j<3; j++){

1164 if–
pCﬁl
[
j
].
xDñ
 ){

1165 
pCﬁl
[
j
].
	`xDñ
’Cﬁl[j].
pU£r
);

1168 
	`sqlôe3DbFªe
(
db
, 
pCﬁl
);

1170 
	`sqlôe3HashCÀ¨
(&
db
->
aCﬁlSeq
);

1171 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


1172 
i
=
	`sqlôeHashFú°
(&
db
->
aModuÀ
); i; i=
	`sqlôeHashNext
(i)){

1173 
ModuÀ
 *
pMod
 = (ModuÀ *)
	`sqlôeHashD©a
(
i
);

1174 if–
pMod
->
xDe°roy
 ){

1175 
pMod
->
	`xDe°roy
’Mod->
pAux
);

1177 
	`sqlôe3VèbEp⁄ymousTabÀCÀ¨
(
db
, 
pMod
);

1178 
	`sqlôe3DbFªe
(
db
, 
pMod
);

1180 
	`sqlôe3HashCÀ¨
(&
db
->
aModuÀ
);

1183 
	`sqlôe3Eº‹
(
db
, 
SQLITE_OK
);

1184 
	`sqlôe3VÆueFªe
(
db
->
pEº
);

1185 
	`sqlôe3Clo£Exãnsi⁄s
(
db
);

1186 #i‡
SQLITE_USER_AUTHENTICATION


1187 
	`sqlôe3_‰ì
(
db
->
auth
.
zAuthU£r
);

1188 
	`sqlôe3_‰ì
(
db
->
auth
.
zAuthPW
);

1191 
db
->
magic
 = 
SQLITE_MAGIC_ERROR
;

1199 
	`sqlôe3DbFªe
(
db
, db->
aDb
[1].
pSchema
);

1200 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

1201 
db
->
magic
 = 
SQLITE_MAGIC_CLOSED
;

1202 
	`sqlôe3_muãx_‰ì
(
db
->
muãx
);

1203 
	`as£π
–
db
->
lookaside
.
nOut
==0 );

1204 if–
db
->
lookaside
.
bMÆlo˚d
 ){

1205 
	`sqlôe3_‰ì
(
db
->
lookaside
.
pSèπ
);

1207 
	`sqlôe3_‰ì
(
db
);

1208 
	}
}

1217 
	$sqlôe3RﬁlbackAŒ
(
sqlôe3
 *
db
, 
åùCode
){

1218 
i
;

1219 
öTøns
 = 0;

1220 
schemaCh™ge
;

1221 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

1222 
	`sqlôe3BegöBíignMÆloc
();

1230 
	`sqlôe3BåìE¡îAŒ
(
db
);

1231 
schemaCh™ge
 = (
db
->
Êags
 & 
SQLITE_I¡înCh™ges
)!=0 && db->
öô
.
busy
==0;

1233 
i
=0; i<
db
->
nDb
; i++){

1234 
Båì
 *
p
 = 
db
->
aDb
[
i
].
pBt
;

1235 if–
p
 ){

1236 if–
	`sqlôe3BåìIsInTøns
(
p
) ){

1237 
öTøns
 = 1;

1239 
	`sqlôe3BåìRﬁlback
(
p
, 
åùCode
, !
schemaCh™ge
);

1242 
	`sqlôe3VèbRﬁlback
(
db
);

1243 
	`sqlôe3EndBíignMÆloc
();

1245 if–(
db
->
Êags
&
SQLITE_I¡înCh™ges
)!=0 && db->
öô
.
busy
==0 ){

1246 
	`sqlôe3ExpúePª∑ªdSèãmíts
(
db
);

1247 
	`sqlôe3Re£tAŒSchemasOfC⁄√˘i⁄
(
db
);

1249 
	`sqlôe3BåìLóveAŒ
(
db
);

1252 
db
->
nDe„ºedC⁄s
 = 0;

1253 
db
->
nDe„ºedImmC⁄s
 = 0;

1254 
db
->
Êags
 &~
SQLITE_De„rFKs
;

1257 if–
db
->
xRﬁlbackCÆlback
 && (
öTøns
 || !db->
autoCommô
) ){

1258 
db
->
	`xRﬁlbackCÆlback
(db->
pRﬁlbackArg
);

1260 
	}
}

1266 #i‡
deföed
(
SQLITE_NEED_ERR_NAME
)

1267 c⁄° *
	$sqlôe3EºName
(
rc
){

1268 c⁄° *
zName
 = 0;

1269 
i
, 
‹igRc
 = 
rc
;

1270 
i
=0; i<2 && 
zName
==0; i++, 
rc
 &= 0xff){

1271  
rc
 ){

1272 
SQLITE_OK
: 
zName
 = "SQLITE_OK"; ;

1273 
SQLITE_ERROR
: 
zName
 = "SQLITE_ERROR"; ;

1274 
SQLITE_INTERNAL
: 
zName
 = "SQLITE_INTERNAL"; ;

1275 
SQLITE_PERM
: 
zName
 = "SQLITE_PERM"; ;

1276 
SQLITE_ABORT
: 
zName
 = "SQLITE_ABORT"; ;

1277 
SQLITE_ABORT_ROLLBACK
: 
zName
 = "SQLITE_ABORT_ROLLBACK"; ;

1278 
SQLITE_BUSY
: 
zName
 = "SQLITE_BUSY"; ;

1279 
SQLITE_BUSY_RECOVERY
: 
zName
 = "SQLITE_BUSY_RECOVERY"; ;

1280 
SQLITE_BUSY_SNAPSHOT
: 
zName
 = "SQLITE_BUSY_SNAPSHOT"; ;

1281 
SQLITE_LOCKED
: 
zName
 = "SQLITE_LOCKED"; ;

1282 
SQLITE_LOCKED_SHAREDCACHE
: 
zName
 = "SQLITE_LOCKED_SHAREDCACHE";;

1283 
SQLITE_NOMEM
: 
zName
 = "SQLITE_NOMEM"; ;

1284 
SQLITE_READONLY
: 
zName
 = "SQLITE_READONLY"; ;

1285 
SQLITE_READONLY_RECOVERY
: 
zName
 = "SQLITE_READONLY_RECOVERY"; ;

1286 
SQLITE_READONLY_CANTLOCK
: 
zName
 = "SQLITE_READONLY_CANTLOCK"; ;

1287 
SQLITE_READONLY_ROLLBACK
: 
zName
 = "SQLITE_READONLY_ROLLBACK"; ;

1288 
SQLITE_READONLY_DBMOVED
: 
zName
 = "SQLITE_READONLY_DBMOVED"; ;

1289 
SQLITE_INTERRUPT
: 
zName
 = "SQLITE_INTERRUPT"; ;

1290 
SQLITE_IOERR
: 
zName
 = "SQLITE_IOERR"; ;

1291 
SQLITE_IOERR_READ
: 
zName
 = "SQLITE_IOERR_READ"; ;

1292 
SQLITE_IOERR_SHORT_READ
: 
zName
 = "SQLITE_IOERR_SHORT_READ"; ;

1293 
SQLITE_IOERR_WRITE
: 
zName
 = "SQLITE_IOERR_WRITE"; ;

1294 
SQLITE_IOERR_FSYNC
: 
zName
 = "SQLITE_IOERR_FSYNC"; ;

1295 
SQLITE_IOERR_DIR_FSYNC
: 
zName
 = "SQLITE_IOERR_DIR_FSYNC"; ;

1296 
SQLITE_IOERR_TRUNCATE
: 
zName
 = "SQLITE_IOERR_TRUNCATE"; ;

1297 
SQLITE_IOERR_FSTAT
: 
zName
 = "SQLITE_IOERR_FSTAT"; ;

1298 
SQLITE_IOERR_UNLOCK
: 
zName
 = "SQLITE_IOERR_UNLOCK"; ;

1299 
SQLITE_IOERR_RDLOCK
: 
zName
 = "SQLITE_IOERR_RDLOCK"; ;

1300 
SQLITE_IOERR_DELETE
: 
zName
 = "SQLITE_IOERR_DELETE"; ;

1301 
SQLITE_IOERR_NOMEM
: 
zName
 = "SQLITE_IOERR_NOMEM"; ;

1302 
SQLITE_IOERR_ACCESS
: 
zName
 = "SQLITE_IOERR_ACCESS"; ;

1303 
SQLITE_IOERR_CHECKRESERVEDLOCK
:

1304 
zName
 = "SQLITE_IOERR_CHECKRESERVEDLOCK"; ;

1305 
SQLITE_IOERR_LOCK
: 
zName
 = "SQLITE_IOERR_LOCK"; ;

1306 
SQLITE_IOERR_CLOSE
: 
zName
 = "SQLITE_IOERR_CLOSE"; ;

1307 
SQLITE_IOERR_DIR_CLOSE
: 
zName
 = "SQLITE_IOERR_DIR_CLOSE"; ;

1308 
SQLITE_IOERR_SHMOPEN
: 
zName
 = "SQLITE_IOERR_SHMOPEN"; ;

1309 
SQLITE_IOERR_SHMSIZE
: 
zName
 = "SQLITE_IOERR_SHMSIZE"; ;

1310 
SQLITE_IOERR_SHMLOCK
: 
zName
 = "SQLITE_IOERR_SHMLOCK"; ;

1311 
SQLITE_IOERR_SHMMAP
: 
zName
 = "SQLITE_IOERR_SHMMAP"; ;

1312 
SQLITE_IOERR_SEEK
: 
zName
 = "SQLITE_IOERR_SEEK"; ;

1313 
SQLITE_IOERR_DELETE_NOENT
: 
zName
 = "SQLITE_IOERR_DELETE_NOENT";;

1314 
SQLITE_IOERR_MMAP
: 
zName
 = "SQLITE_IOERR_MMAP"; ;

1315 
SQLITE_IOERR_GETTEMPPATH
: 
zName
 = "SQLITE_IOERR_GETTEMPPATH"; ;

1316 
SQLITE_IOERR_CONVPATH
: 
zName
 = "SQLITE_IOERR_CONVPATH"; ;

1317 
SQLITE_CORRUPT
: 
zName
 = "SQLITE_CORRUPT"; ;

1318 
SQLITE_CORRUPT_VTAB
: 
zName
 = "SQLITE_CORRUPT_VTAB"; ;

1319 
SQLITE_NOTFOUND
: 
zName
 = "SQLITE_NOTFOUND"; ;

1320 
SQLITE_FULL
: 
zName
 = "SQLITE_FULL"; ;

1321 
SQLITE_CANTOPEN
: 
zName
 = "SQLITE_CANTOPEN"; ;

1322 
SQLITE_CANTOPEN_NOTEMPDIR
: 
zName
 = "SQLITE_CANTOPEN_NOTEMPDIR";;

1323 
SQLITE_CANTOPEN_ISDIR
: 
zName
 = "SQLITE_CANTOPEN_ISDIR"; ;

1324 
SQLITE_CANTOPEN_FULLPATH
: 
zName
 = "SQLITE_CANTOPEN_FULLPATH"; ;

1325 
SQLITE_CANTOPEN_CONVPATH
: 
zName
 = "SQLITE_CANTOPEN_CONVPATH"; ;

1326 
SQLITE_PROTOCOL
: 
zName
 = "SQLITE_PROTOCOL"; ;

1327 
SQLITE_EMPTY
: 
zName
 = "SQLITE_EMPTY"; ;

1328 
SQLITE_SCHEMA
: 
zName
 = "SQLITE_SCHEMA"; ;

1329 
SQLITE_TOOBIG
: 
zName
 = "SQLITE_TOOBIG"; ;

1330 
SQLITE_CONSTRAINT
: 
zName
 = "SQLITE_CONSTRAINT"; ;

1331 
SQLITE_CONSTRAINT_UNIQUE
: 
zName
 = "SQLITE_CONSTRAINT_UNIQUE"; ;

1332 
SQLITE_CONSTRAINT_TRIGGER
: 
zName
 = "SQLITE_CONSTRAINT_TRIGGER";;

1333 
SQLITE_CONSTRAINT_FOREIGNKEY
:

1334 
zName
 = "SQLITE_CONSTRAINT_FOREIGNKEY"; ;

1335 
SQLITE_CONSTRAINT_CHECK
: 
zName
 = "SQLITE_CONSTRAINT_CHECK"; ;

1336 
SQLITE_CONSTRAINT_PRIMARYKEY
:

1337 
zName
 = "SQLITE_CONSTRAINT_PRIMARYKEY"; ;

1338 
SQLITE_CONSTRAINT_NOTNULL
: 
zName
 = "SQLITE_CONSTRAINT_NOTNULL";;

1339 
SQLITE_CONSTRAINT_COMMITHOOK
:

1340 
zName
 = "SQLITE_CONSTRAINT_COMMITHOOK"; ;

1341 
SQLITE_CONSTRAINT_VTAB
: 
zName
 = "SQLITE_CONSTRAINT_VTAB"; ;

1342 
SQLITE_CONSTRAINT_FUNCTION
:

1343 
zName
 = "SQLITE_CONSTRAINT_FUNCTION"; ;

1344 
SQLITE_CONSTRAINT_ROWID
: 
zName
 = "SQLITE_CONSTRAINT_ROWID"; ;

1345 
SQLITE_MISMATCH
: 
zName
 = "SQLITE_MISMATCH"; ;

1346 
SQLITE_MISUSE
: 
zName
 = "SQLITE_MISUSE"; ;

1347 
SQLITE_NOLFS
: 
zName
 = "SQLITE_NOLFS"; ;

1348 
SQLITE_AUTH
: 
zName
 = "SQLITE_AUTH"; ;

1349 
SQLITE_FORMAT
: 
zName
 = "SQLITE_FORMAT"; ;

1350 
SQLITE_RANGE
: 
zName
 = "SQLITE_RANGE"; ;

1351 
SQLITE_NOTADB
: 
zName
 = "SQLITE_NOTADB"; ;

1352 
SQLITE_ROW
: 
zName
 = "SQLITE_ROW"; ;

1353 
SQLITE_NOTICE
: 
zName
 = "SQLITE_NOTICE"; ;

1354 
SQLITE_NOTICE_RECOVER_WAL
: 
zName
 = "SQLITE_NOTICE_RECOVER_WAL";;

1355 
SQLITE_NOTICE_RECOVER_ROLLBACK
:

1356 
zName
 = "SQLITE_NOTICE_RECOVER_ROLLBACK"; ;

1357 
SQLITE_WARNING
: 
zName
 = "SQLITE_WARNING"; ;

1358 
SQLITE_WARNING_AUTOINDEX
: 
zName
 = "SQLITE_WARNING_AUTOINDEX"; ;

1359 
SQLITE_DONE
: 
zName
 = "SQLITE_DONE"; ;

1362 if–
zName
==0 ){

1363 
zBuf
[50];

1364 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "SQLITE_UNKNOWN(%d)", 
‹igRc
);

1365 
zName
 = 
zBuf
;

1367  
zName
;

1368 
	}
}

1375 c⁄° *
	$sqlôe3EºSå
(
rc
){

1376 c⁄° * c⁄° 
aMsg
[] = {

1405 c⁄° *
zEº
 = "unknownÉrror";

1406  
rc
 ){

1407 
SQLITE_ABORT_ROLLBACK
: {

1408 
zEº
 = "abort dueÅo ROLLBACK";

1412 
rc
 &= 0xff;

1413 if–
	`ALWAYS
(
rc
>=0Ë&&Ñc<
	`AºaySize
(
aMsg
) &&áMsg[rc]!=0 ){

1414 
zEº
 = 
aMsg
[
rc
];

1419  
zEº
;

1420 
	}
}

1428 
	$sqlôeDeÁu…BusyCÆlback
(

1429 *
±r
,

1430 
cou¡


1432 #i‡
SQLITE_OS_WIN
 || 
HAVE_USLEEP


1433 c⁄° 
u8
 
dñays
[] =

1435 c⁄° 
u8
 
tŸÆs
[] =

1437 
	#NDELAY
 
	`AºaySize
(
dñays
)

	)

1438 
sqlôe3
 *
db
 = (sqlôe3 *)
±r
;

1439 
timeout
 = 
db
->
busyTimeout
;

1440 
dñay
, 
¥i‹
;

1442 
	`as£π
–
cou¡
>=0 );

1443 if–
cou¡
 < 
NDELAY
 ){

1444 
dñay
 = 
dñays
[
cou¡
];

1445 
¥i‹
 = 
tŸÆs
[
cou¡
];

1447 
dñay
 = 
dñays
[
NDELAY
-1];

1448 
¥i‹
 = 
tŸÆs
[
NDELAY
-1] + 
dñay
*(
cou¡
-(NDELAY-1));

1450 if–
¥i‹
 + 
dñay
 > 
timeout
 ){

1451 
dñay
 = 
timeout
 - 
¥i‹
;

1452 if–
dñay
<=0 )  0;

1454 
	`sqlôe3OsSÀï
(
db
->
pVfs
, 
dñay
*1000);

1457 
sqlôe3
 *
db
 = (sqlôe3 *)
±r
;

1458 
timeout
 = ((
sqlôe3
 *)
±r
)->
busyTimeout
;

1459 if–(
cou¡
+1)*1000 > 
timeout
 ){

1462 
	`sqlôe3OsSÀï
(
db
->
pVfs
, 1000000);

1465 
	}
}

1474 
	$sqlôe3InvokeBusyH™dÀr
(
BusyH™dÀr
 *
p
){

1475 
rc
;

1476 if–
	`NEVER
(
p
==0Ë||Ö->
xFunc
==0 ||Ö->
nBusy
<0 )  0;

1477 
rc
 = 
p
->
	`xFunc
’->
pArg
,Ö->
nBusy
);

1478 if–
rc
==0 ){

1479 
p
->
nBusy
 = -1;

1481 
p
->
nBusy
++;

1483  
rc
;

1484 
	}
}

1490 
sqlôe3_busy_h™dÀr
(

1491 
sqlôe3
 *
db
,

1492 (*
xBusy
)(*,),

1493 *
pArg


1495 #ifde‡
SQLITE_ENABLE_API_ARMOR


1496 if–!
	`sqlôe3Sa„tyCheckOk
(
db
ËË 
SQLITE_MISUSE_BKPT
;

1498 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

1499 
db
->
busyH™dÀr
.
xFunc
 = 
xBusy
;

1500 
db
->
busyH™dÀr
.
pArg
 =ÖArg;

1501 
db
->
busyH™dÀr
.
nBusy
 = 0;

1502 
db
->
busyTimeout
 = 0;

1503 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

1504  
SQLITE_OK
;

1505 
	}
}

1507 #i‚de‡
SQLITE_OMIT_PROGRESS_CALLBACK


1513 
sqlôe3_¥ogªss_h™dÀr
(

1514 
sqlôe3
 *
db
,

1515 
nOps
,

1516 (*
xProgªss
)(*),

1517 *
pArg


1519 #ifde‡
SQLITE_ENABLE_API_ARMOR


1520 if–!
	`sqlôe3Sa„tyCheckOk
(
db
) ){

1521 ()
SQLITE_MISUSE_BKPT
;

1525 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

1526 if–
nOps
>0 ){

1527 
db
->
xProgªss
 = xProgress;

1528 
db
->
nProgªssOps
 = ()
nOps
;

1529 
db
->
pProgªssArg
 = 
pArg
;

1531 
db
->
xProgªss
 = 0;

1532 
db
->
nProgªssOps
 = 0;

1533 
db
->
pProgªssArg
 = 0;

1535 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

1536 
	}
}

1544 
	$sqlôe3_busy_timeout
(
sqlôe3
 *
db
, 
ms
){

1545 #ifde‡
SQLITE_ENABLE_API_ARMOR


1546 if–!
	`sqlôe3Sa„tyCheckOk
(
db
ËË 
SQLITE_MISUSE_BKPT
;

1548 if–
ms
>0 ){

1549 
	`sqlôe3_busy_h™dÀr
(
db
, 
sqlôeDeÁu…BusyCÆlback
, (*)db);

1550 
db
->
busyTimeout
 = 
ms
;

1552 
	`sqlôe3_busy_h™dÀr
(
db
, 0, 0);

1554  
SQLITE_OK
;

1555 
	}
}

1560 
	$sqlôe3_öãºu±
(
sqlôe3
 *
db
){

1561 #ifde‡
SQLITE_ENABLE_API_ARMOR


1562 if–!
	`sqlôe3Sa„tyCheckOk
(
db
) ){

1563 ()
SQLITE_MISUSE_BKPT
;

1567 
db
->
u1
.
isI¡îru±ed
 = 1;

1568 
	}
}

1577 
sqlôe3Cª©eFunc
(

1578 
sqlôe3
 *
db
,

1579 c⁄° *
zFun˘i⁄Name
,

1580 
nArg
,

1581 
íc
,

1582 *
pU£rD©a
,

1583 (*
xSFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
 **),

1584 (*
xSãp
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
 **),

1585 (*
xFöÆ
)(
sqlôe3_c⁄ãxt
*),

1586 
FuncDe°ru˘‹
 *
pDe°ru˘‹


1588 
FuncDef
 *
p
;

1589 
nName
;

1590 
exåaFœgs
;

1592 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

1593 if–
zFun˘i⁄Name
==0 ||

1594 (
xSFunc
 && (
xFöÆ
 || 
xSãp
)) ||

1595 (!
xSFunc
 && (
xFöÆ
 && !
xSãp
)) ||

1596 (!
xSFunc
 && (!
xFöÆ
 && 
xSãp
)) ||

1597 (
nArg
<-1 ||ÇArg>
SQLITE_MAX_FUNCTION_ARG
) ||

1598 (255<(
nName
 = 
	`sqlôe3SåÀn30
–
zFun˘i⁄Name
))) ){

1599  
SQLITE_MISUSE_BKPT
;

1602 
	`as£π
–
SQLITE_FUNC_CONSTANT
==
SQLITE_DETERMINISTIC
 );

1603 
exåaFœgs
 = 
íc
 & 
SQLITE_DETERMINISTIC
;

1604 
íc
 &(
SQLITE_FUNC_ENCMASK
|
SQLITE_ANY
);

1606 #i‚de‡
SQLITE_OMIT_UTF16


1614 if–
íc
==
SQLITE_UTF16
 ){

1615 
íc
 = 
SQLITE_UTF16NATIVE
;

1616 }if–
íc
==
SQLITE_ANY
 ){

1617 
rc
;

1618 
rc
 = 
	`sqlôe3Cª©eFunc
(
db
, 
zFun˘i⁄Name
, 
nArg
, 
SQLITE_UTF8
|
exåaFœgs
,

1619 
pU£rD©a
, 
xSFunc
, 
xSãp
, 
xFöÆ
, 
pDe°ru˘‹
);

1620 if–
rc
==
SQLITE_OK
 ){

1621 
rc
 = 
	`sqlôe3Cª©eFunc
(
db
, 
zFun˘i⁄Name
, 
nArg
, 
SQLITE_UTF16LE
|
exåaFœgs
,

1622 
pU£rD©a
, 
xSFunc
, 
xSãp
, 
xFöÆ
, 
pDe°ru˘‹
);

1624 if–
rc
!=
SQLITE_OK
 ){

1625  
rc
;

1627 
íc
 = 
SQLITE_UTF16BE
;

1630 
íc
 = 
SQLITE_UTF8
;

1638 
p
 = 
	`sqlôe3FödFun˘i⁄
(
db
, 
zFun˘i⁄Name
, 
nArg
, (
u8
)
íc
, 0);

1639 if–
p
 && (p->
funcFœgs
 & 
SQLITE_FUNC_ENCMASK
)==
íc
 &&Ö->
nArg
==nArg ){

1640 if–
db
->
nVdbeA˘ive
 ){

1641 
	`sqlôe3Eº‹WôhMsg
(
db
, 
SQLITE_BUSY
,

1643 
	`as£π
–!
db
->
mÆlocFaûed
 );

1644  
SQLITE_BUSY
;

1646 
	`sqlôe3ExpúePª∑ªdSèãmíts
(
db
);

1650 
p
 = 
	`sqlôe3FödFun˘i⁄
(
db
, 
zFun˘i⁄Name
, 
nArg
, (
u8
)
íc
, 1);

1651 
	`as£π
(
p
 || 
db
->
mÆlocFaûed
);

1652 if–!
p
 ){

1653  
SQLITE_NOMEM_BKPT
;

1658 
	`fun˘i⁄De°roy
(
db
, 
p
);

1660 if–
pDe°ru˘‹
 ){

1661 
pDe°ru˘‹
->
nRef
++;

1663 
p
->
u
.
pDe°ru˘‹
 =ÖDestructor;

1664 
p
->
funcFœgs
 = (p->funcFœg†& 
SQLITE_FUNC_ENCMASK
Ë| 
exåaFœgs
;

1665 
	`ã°ˇ£
–
p
->
funcFœgs
 & 
SQLITE_DETERMINISTIC
 );

1666 
p
->
xSFunc
 = xSFun¯? xSFun¯: 
xSãp
;

1667 
p
->
xFöÆize
 = 
xFöÆ
;

1668 
p
->
pU£rD©a
 =ÖUserData;

1669 
p
->
nArg
 = (
u16
)nArg;

1670  
SQLITE_OK
;

1671 
	}
}

1676 
sqlôe3_¸óã_fun˘i⁄
(

1677 
sqlôe3
 *
db
,

1678 c⁄° *
zFunc
,

1679 
nArg
,

1680 
íc
,

1681 *
p
,

1682 (*
xSFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
 **),

1683 (*
xSãp
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
 **),

1684 (*
xFöÆ
)(
sqlôe3_c⁄ãxt
*)

1686  
	`sqlôe3_¸óã_fun˘i⁄_v2
(
db
, 
zFunc
, 
nArg
, 
íc
, 
p
, 
xSFunc
, 
xSãp
,

1687 
xFöÆ
, 0);

1688 
	}
}

1690 
sqlôe3_¸óã_fun˘i⁄_v2
(

1691 
sqlôe3
 *
db
,

1692 c⁄° *
zFunc
,

1693 
nArg
,

1694 
íc
,

1695 *
p
,

1696 (*
xSFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
 **),

1697 (*
xSãp
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
 **),

1698 (*
xFöÆ
)(
sqlôe3_c⁄ãxt
*),

1699 (*
xDe°roy
)(*)

1701 
rc
 = 
SQLITE_ERROR
;

1702 
FuncDe°ru˘‹
 *
pArg
 = 0;

1704 #ifde‡
SQLITE_ENABLE_API_ARMOR


1705 if–!
	`sqlôe3Sa„tyCheckOk
(
db
) ){

1706  
SQLITE_MISUSE_BKPT
;

1709 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

1710 if–
xDe°roy
 ){

1711 
pArg
 = (
FuncDe°ru˘‹
 *)
	`sqlôe3DbMÆlocZîo
(
db
, (FuncDestructor));

1712 if–!
pArg
 ){

1713 
	`xDe°roy
(
p
);

1714 
out
;

1716 
pArg
->
xDe°roy
 = xDestroy;

1717 
pArg
->
pU£rD©a
 = 
p
;

1719 
rc
 = 
	`sqlôe3Cª©eFunc
(
db
, 
zFunc
, 
nArg
, 
íc
, 
p
, 
xSFunc
, 
xSãp
, 
xFöÆ
, 
pArg
);

1720 if–
pArg
 &&ÖArg->
nRef
==0 ){

1721 
	`as£π
–
rc
!=
SQLITE_OK
 );

1722 
	`xDe°roy
(
p
);

1723 
	`sqlôe3DbFªe
(
db
, 
pArg
);

1726 
out
:

1727 
rc
 = 
	`sqlôe3ApiExô
(
db
,Ñc);

1728 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

1729  
rc
;

1730 
	}
}

1732 #i‚de‡
SQLITE_OMIT_UTF16


1733 
sqlôe3_¸óã_fun˘i⁄16
(

1734 
sqlôe3
 *
db
,

1735 c⁄° *
zFun˘i⁄Name
,

1736 
nArg
,

1737 
eTextRï
,

1738 *
p
,

1739 (*
xSFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**),

1740 (*
xSãp
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**),

1741 (*
xFöÆ
)(
sqlôe3_c⁄ãxt
*)

1743 
rc
;

1744 *
zFunc8
;

1746 #ifde‡
SQLITE_ENABLE_API_ARMOR


1747 if–!
	`sqlôe3Sa„tyCheckOk
(
db
Ë|| 
zFun˘i⁄Name
==0 )  
SQLITE_MISUSE_BKPT
;

1749 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

1750 
	`as£π
–!
db
->
mÆlocFaûed
 );

1751 
zFunc8
 = 
	`sqlôe3Utf16to8
(
db
, 
zFun˘i⁄Name
, -1, 
SQLITE_UTF16NATIVE
);

1752 
rc
 = 
	`sqlôe3Cª©eFunc
(
db
, 
zFunc8
, 
nArg
, 
eTextRï
, 
p
, 
xSFunc
,
xSãp
,
xFöÆ
,0);

1753 
	`sqlôe3DbFªe
(
db
, 
zFunc8
);

1754 
rc
 = 
	`sqlôe3ApiExô
(
db
,Ñc);

1755 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

1756  
rc
;

1757 
	}
}

1773 
	$sqlôe3_ovîlﬂd_fun˘i⁄
(

1774 
sqlôe3
 *
db
,

1775 c⁄° *
zName
,

1776 
nArg


1778 
rc
 = 
SQLITE_OK
;

1780 #ifde‡
SQLITE_ENABLE_API_ARMOR


1781 if–!
	`sqlôe3Sa„tyCheckOk
(
db
Ë|| 
zName
==0 || 
nArg
<-2 ){

1782  
SQLITE_MISUSE_BKPT
;

1785 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

1786 if–
	`sqlôe3FödFun˘i⁄
(
db
, 
zName
, 
nArg
, 
SQLITE_UTF8
, 0)==0 ){

1787 
rc
 = 
	`sqlôe3Cª©eFunc
(
db
, 
zName
, 
nArg
, 
SQLITE_UTF8
,

1788 0, 
sqlôe3InvÆidFun˘i⁄
, 0, 0, 0);

1790 
rc
 = 
	`sqlôe3ApiExô
(
db
,Ñc);

1791 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

1792  
rc
;

1793 
	}
}

1795 #i‚de‡
SQLITE_OMIT_TRACE


1804 *
sqlôe3_åa˚
(
sqlôe3
 *
db
, (*
xTø˚
)(*,c⁄° *), *
pArg
){

1805 *
pOld
;

1807 #ifde‡
SQLITE_ENABLE_API_ARMOR


1808 if–!
	`sqlôe3Sa„tyCheckOk
(
db
) ){

1809 ()
SQLITE_MISUSE_BKPT
;

1813 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

1814 
pOld
 = 
db
->
pTø˚Arg
;

1815 
db
->
xTø˚
 = xTrace;

1816 
db
->
pTø˚Arg
 = 
pArg
;

1817 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

1818  
pOld
;

1819 
	}
}

1828 *
sqlôe3_¥ofûe
(

1829 
sqlôe3
 *
db
,

1830 (*
xProfûe
)(*,c⁄° *,
sqlôe_uöt64
),

1831 *
pArg


1833 *
pOld
;

1835 #ifde‡
SQLITE_ENABLE_API_ARMOR


1836 if–!
	`sqlôe3Sa„tyCheckOk
(
db
) ){

1837 ()
SQLITE_MISUSE_BKPT
;

1841 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

1842 
pOld
 = 
db
->
pProfûeArg
;

1843 
db
->
xProfûe
 = xProfile;

1844 
db
->
pProfûeArg
 = 
pArg
;

1845 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

1846  
pOld
;

1847 
	}
}

1855 *
sqlôe3_commô_hook
(

1856 
sqlôe3
 *
db
,

1857 (*
xCÆlback
)(*),

1858 *
pArg


1860 *
pOld
;

1862 #ifde‡
SQLITE_ENABLE_API_ARMOR


1863 if–!
	`sqlôe3Sa„tyCheckOk
(
db
) ){

1864 ()
SQLITE_MISUSE_BKPT
;

1868 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

1869 
pOld
 = 
db
->
pCommôArg
;

1870 
db
->
xCommôCÆlback
 = 
xCÆlback
;

1871 
db
->
pCommôArg
 = 
pArg
;

1872 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

1873  
pOld
;

1874 
	}
}

1880 *
sqlôe3_upd©e_hook
(

1881 
sqlôe3
 *
db
,

1882 (*
xCÆlback
)(*,,c⁄° *,c⁄° *,
sqlôe_öt64
),

1883 *
pArg


1885 *
pRë
;

1887 #ifde‡
SQLITE_ENABLE_API_ARMOR


1888 if–!
	`sqlôe3Sa„tyCheckOk
(
db
) ){

1889 ()
SQLITE_MISUSE_BKPT
;

1893 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

1894 
pRë
 = 
db
->
pUpd©eArg
;

1895 
db
->
xUpd©eCÆlback
 = 
xCÆlback
;

1896 
db
->
pUpd©eArg
 = 
pArg
;

1897 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

1898  
pRë
;

1899 
	}
}

1905 *
sqlôe3_rﬁlback_hook
(

1906 
sqlôe3
 *
db
,

1907 (*
xCÆlback
)(*),

1908 *
pArg


1910 *
pRë
;

1912 #ifde‡
SQLITE_ENABLE_API_ARMOR


1913 if–!
	`sqlôe3Sa„tyCheckOk
(
db
) ){

1914 ()
SQLITE_MISUSE_BKPT
;

1918 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

1919 
pRë
 = 
db
->
pRﬁlbackArg
;

1920 
db
->
xRﬁlbackCÆlback
 = 
xCÆlback
;

1921 
db
->
pRﬁlbackArg
 = 
pArg
;

1922 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

1923  
pRë
;

1924 
	}
}

1926 #ifde‡
SQLITE_ENABLE_PREUPDATE_HOOK


1931 *
sqlôe3_¥eupd©e_hook
(

1932 
sqlôe3
 *
db
,

1933 (*
xCÆlback
)(

1934 *,
sqlôe3
*,,c⁄°*,c⁄°*,
sqlôe3_öt64
,sqlite3_int64),

1935 *
pArg


1937 *
pRë
;

1938 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

1939 
pRë
 = 
db
->
pPªUpd©eArg
;

1940 
db
->
xPªUpd©eCÆlback
 = 
xCÆlback
;

1941 
db
->
pPªUpd©eArg
 = 
pArg
;

1942 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

1943  
pRë
;

1944 
	}
}

1947 #i‚de‡
SQLITE_OMIT_WAL


1954 
	$sqlôe3WÆDeÁu…Hook
(

1955 *
pClõ¡D©a
,

1956 
sqlôe3
 *
db
,

1957 c⁄° *
zDb
,

1958 
nFøme


1960 if–
nFøme
>=
	`SQLITE_PTR_TO_INT
(
pClõ¡D©a
) ){

1961 
	`sqlôe3BegöBíignMÆloc
();

1962 
	`sqlôe3_wÆ_checkpoöt
(
db
, 
zDb
);

1963 
	`sqlôe3EndBíignMÆloc
();

1965  
SQLITE_OK
;

1966 
	}
}

1980 
	$sqlôe3_wÆ_autocheckpoöt
(
sqlôe3
 *
db
, 
nFøme
){

1981 #ifde‡
SQLITE_OMIT_WAL


1982 
	`UNUSED_PARAMETER
(
db
);

1983 
	`UNUSED_PARAMETER
(
nFøme
);

1985 #ifde‡
SQLITE_ENABLE_API_ARMOR


1986 if–!
	`sqlôe3Sa„tyCheckOk
(
db
ËË 
SQLITE_MISUSE_BKPT
;

1988 if–
nFøme
>0 ){

1989 
	`sqlôe3_wÆ_hook
(
db
, 
sqlôe3WÆDeÁu…Hook
, 
	`SQLITE_INT_TO_PTR
(
nFøme
));

1991 
	`sqlôe3_wÆ_hook
(
db
, 0, 0);

1994  
SQLITE_OK
;

1995 
	}
}

2001 *
sqlôe3_wÆ_hook
(

2002 
sqlôe3
 *
db
,

2003 (*
xCÆlback
)(*, 
sqlôe3
*, const *, ),

2004 *
pArg


2006 #i‚de‡
SQLITE_OMIT_WAL


2007 *
pRë
;

2008 #ifde‡
SQLITE_ENABLE_API_ARMOR


2009 if–!
	`sqlôe3Sa„tyCheckOk
(
db
) ){

2010 ()
SQLITE_MISUSE_BKPT
;

2014 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

2015 
pRë
 = 
db
->
pWÆArg
;

2016 
db
->
xWÆCÆlback
 = 
xCÆlback
;

2017 
db
->
pWÆArg
 = 
pArg
;

2018 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

2019  
pRë
;

2023 
	}
}

2028 
	$sqlôe3_wÆ_checkpoöt_v2
(

2029 
sqlôe3
 *
db
,

2030 c⁄° *
zDb
,

2031 
eMode
,

2032 *
≤Log
,

2033 *
≤Ck±


2035 #ifde‡
SQLITE_OMIT_WAL


2036  
SQLITE_OK
;

2038 
rc
;

2039 
iDb
 = 
SQLITE_MAX_ATTACHED
;

2041 #ifde‡
SQLITE_ENABLE_API_ARMOR


2042 if–!
	`sqlôe3Sa„tyCheckOk
(
db
ËË 
SQLITE_MISUSE_BKPT
;

2046 if–
≤Log
 ) *pnLog = -1;

2047 if–
≤Ck±
 ) *pnCkpt = -1;

2049 
	`as£π
–
SQLITE_CHECKPOINT_PASSIVE
==0 );

2050 
	`as£π
–
SQLITE_CHECKPOINT_FULL
==1 );

2051 
	`as£π
–
SQLITE_CHECKPOINT_RESTART
==2 );

2052 
	`as£π
–
SQLITE_CHECKPOINT_TRUNCATE
==3 );

2053 if–
eMode
<
SQLITE_CHECKPOINT_PASSIVE
 ||ÉMode>
SQLITE_CHECKPOINT_TRUNCATE
 ){

2056  
SQLITE_MISUSE
;

2059 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

2060 if–
zDb
 && zDb[0] ){

2061 
iDb
 = 
	`sqlôe3FödDbName
(
db
, 
zDb
);

2063 if–
iDb
<0 ){

2064 
rc
 = 
SQLITE_ERROR
;

2065 
	`sqlôe3Eº‹WôhMsg
(
db
, 
SQLITE_ERROR
, "unknow¿d©aba£: %s", 
zDb
);

2067 
db
->
busyH™dÀr
.
nBusy
 = 0;

2068 
rc
 = 
	`sqlôe3Checkpoöt
(
db
, 
iDb
, 
eMode
, 
≤Log
, 
≤Ck±
);

2069 
	`sqlôe3Eº‹
(
db
, 
rc
);

2071 
rc
 = 
	`sqlôe3ApiExô
(
db
,Ñc);

2072 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

2073  
rc
;

2075 
	}
}

2083 
	$sqlôe3_wÆ_checkpoöt
(
sqlôe3
 *
db
, c⁄° *
zDb
){

2086  
	`sqlôe3_wÆ_checkpoöt_v2
(
db
,
zDb
,
SQLITE_CHECKPOINT_PASSIVE
,0,0);

2087 
	}
}

2089 #i‚de‡
SQLITE_OMIT_WAL


2109 
	$sqlôe3Checkpoöt
(
sqlôe3
 *
db
, 
iDb
, 
eMode
, *
≤Log
, *
≤Ck±
){

2110 
rc
 = 
SQLITE_OK
;

2111 
i
;

2112 
bBusy
 = 0;

2114 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

2115 
	`as£π
–!
≤Log
 || *pnLog==-1 );

2116 
	`as£π
–!
≤Ck±
 || *pnCkpt==-1 );

2118 
i
=0; i<
db
->
nDb
 && 
rc
==
SQLITE_OK
; i++){

2119 if–
i
==
iDb
 || iDb==
SQLITE_MAX_ATTACHED
 ){

2120 
rc
 = 
	`sqlôe3BåìCheckpoöt
(
db
->
aDb
[
i
].
pBt
, 
eMode
, 
≤Log
, 
≤Ck±
);

2121 
≤Log
 = 0;

2122 
≤Ck±
 = 0;

2123 if–
rc
==
SQLITE_BUSY
 ){

2124 
bBusy
 = 1;

2125 
rc
 = 
SQLITE_OK
;

2130  (
rc
==
SQLITE_OK
 && 
bBusy
Ë? 
SQLITE_BUSY
 :Ñc;

2131 
	}
}

2153 
	$sqlôe3TempInMem‹y
(c⁄° 
sqlôe3
 *
db
){

2154 #i‡
SQLITE_TEMP_STORE
==1

2155  ( 
db
->
ãmp_°‹e
==2 );

2157 #i‡
SQLITE_TEMP_STORE
==2

2158  ( 
db
->
ãmp_°‹e
!=1 );

2160 #i‡
SQLITE_TEMP_STORE
==3

2161 
	`UNUSED_PARAMETER
(
db
);

2164 #i‡
SQLITE_TEMP_STORE
<1 || SQLITE_TEMP_STORE>3

2165 
	`UNUSED_PARAMETER
(
db
);

2168 
	}
}

2174 c⁄° *
	$sqlôe3_îrmsg
(
sqlôe3
 *
db
){

2175 c⁄° *
z
;

2176 if–!
db
 ){

2177  
	`sqlôe3EºSå
(
SQLITE_NOMEM_BKPT
);

2179 if–!
	`sqlôe3Sa„tyCheckSickOrOk
(
db
) ){

2180  
	`sqlôe3EºSå
(
SQLITE_MISUSE_BKPT
);

2182 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

2183 if–
db
->
mÆlocFaûed
 ){

2184 
z
 = 
	`sqlôe3EºSå
(
SQLITE_NOMEM_BKPT
);

2186 
	`ã°ˇ£
–
db
->
pEº
==0 );

2187 
z
 = (*)
	`sqlôe3_vÆue_ãxt
(
db
->
pEº
);

2188 
	`as£π
–!
db
->
mÆlocFaûed
 );

2189 if–
z
==0 ){

2190 
z
 = 
	`sqlôe3EºSå
(
db
->
îrCode
);

2193 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

2194  
z
;

2195 
	}
}

2197 #i‚de‡
SQLITE_OMIT_UTF16


2202 c⁄° *
	$sqlôe3_îrmsg16
(
sqlôe3
 *
db
){

2203 c⁄° 
u16
 
outOfMem
[] = {

2206 c⁄° 
u16
 
misu£
[] = {

2215 c⁄° *
z
;

2216 if–!
db
 ){

2217  (*)
outOfMem
;

2219 if–!
	`sqlôe3Sa„tyCheckSickOrOk
(
db
) ){

2220  (*)
misu£
;

2222 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

2223 if–
db
->
mÆlocFaûed
 ){

2224 
z
 = (*)
outOfMem
;

2226 
z
 = 
	`sqlôe3_vÆue_ãxt16
(
db
->
pEº
);

2227 if–
z
==0 ){

2228 
	`sqlôe3Eº‹WôhMsg
(
db
, db->
îrCode
, 
	`sqlôe3EºSå
(db->errCode));

2229 
z
 = 
	`sqlôe3_vÆue_ãxt16
(
db
->
pEº
);

2236 
	`sqlôe3OomCÀ¨
(
db
);

2238 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

2239  
z
;

2240 
	}
}

2247 
	$sqlôe3_îrcode
(
sqlôe3
 *
db
){

2248 if–
db
 && !
	`sqlôe3Sa„tyCheckSickOrOk
(db) ){

2249  
SQLITE_MISUSE_BKPT
;

2251 if–!
db
 || db->
mÆlocFaûed
 ){

2252  
SQLITE_NOMEM_BKPT
;

2254  
db
->
îrCode
 & db->
îrMask
;

2255 
	}
}

2256 
	$sqlôe3_exãnded_îrcode
(
sqlôe3
 *
db
){

2257 if–
db
 && !
	`sqlôe3Sa„tyCheckSickOrOk
(db) ){

2258  
SQLITE_MISUSE_BKPT
;

2260 if–!
db
 || db->
mÆlocFaûed
 ){

2261  
SQLITE_NOMEM_BKPT
;

2263  
db
->
îrCode
;

2264 
	}
}

2265 
	$sqlôe3_sy°em_î∫o
(
sqlôe3
 *
db
){

2266  
db
 ? db->
iSysEºno
 : 0;

2267 
	}
}

2274 c⁄° *
	$sqlôe3_îr°r
(
rc
){

2275  
	`sqlôe3EºSå
(
rc
);

2276 
	}
}

2282 
¸óãCﬁœti⁄
(

2283 
sqlôe3
* 
db
,

2284 c⁄° *
zName
,

2285 
u8
 
íc
,

2286 * 
pCtx
,

2287 (*
xCom∑ª
)(*,,const *,,const *),

2288 (*
xDñ
)(*)

2290 
CﬁlSeq
 *
pCﬁl
;

2291 
íc2
;

2293 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

2299 
íc2
 = 
íc
;

2300 
	`ã°ˇ£
–
íc2
==
SQLITE_UTF16
 );

2301 
	`ã°ˇ£
–
íc2
==
SQLITE_UTF16_ALIGNED
 );

2302 if–
íc2
==
SQLITE_UTF16
 ||Énc2==
SQLITE_UTF16_ALIGNED
 ){

2303 
íc2
 = 
SQLITE_UTF16NATIVE
;

2305 if–
íc2
<
SQLITE_UTF8
 ||Énc2>
SQLITE_UTF16BE
 ){

2306  
SQLITE_MISUSE_BKPT
;

2313 
pCﬁl
 = 
	`sqlôe3FödCﬁlSeq
(
db
, (
u8
)
íc2
, 
zName
, 0);

2314 if–
pCﬁl
 &&ÖCﬁl->
xCmp
 ){

2315 if–
db
->
nVdbeA˘ive
 ){

2316 
	`sqlôe3Eº‹WôhMsg
(
db
, 
SQLITE_BUSY
,

2318  
SQLITE_BUSY
;

2320 
	`sqlôe3ExpúePª∑ªdSèãmíts
(
db
);

2328 if–(
pCﬁl
->
íc
 & ~
SQLITE_UTF16_ALIGNED
)==
íc2
 ){

2329 
CﬁlSeq
 *
aCﬁl
 = 
	`sqlôe3HashFöd
(&
db
->
aCﬁlSeq
, 
zName
);

2330 
j
;

2331 
j
=0; j<3; j++){

2332 
CﬁlSeq
 *
p
 = &
aCﬁl
[
j
];

2333 if–
p
->
íc
==
pCﬁl
->enc ){

2334 if–
p
->
xDñ
 ){

2335 
p
->
	`xDñ
’->
pU£r
);

2337 
p
->
xCmp
 = 0;

2343 
pCﬁl
 = 
	`sqlôe3FödCﬁlSeq
(
db
, (
u8
)
íc2
, 
zName
, 1);

2344 if–
pCﬁl
==0 )  
SQLITE_NOMEM_BKPT
;

2345 
pCﬁl
->
xCmp
 = 
xCom∑ª
;

2346 
pCﬁl
->
pU£r
 = 
pCtx
;

2347 
pCﬁl
->
xDñ
 = xDel;

2348 
pCﬁl
->
íc
 = (
u8
)(
íc2
 | (í¯& 
SQLITE_UTF16_ALIGNED
));

2349 
	`sqlôe3Eº‹
(
db
, 
SQLITE_OK
);

2350  
SQLITE_OK
;

2351 
	}
}

2359 c⁄° 
	gaH¨dLimô
[] = {

2360 
SQLITE_MAX_LENGTH
,

2361 
SQLITE_MAX_SQL_LENGTH
,

2362 
SQLITE_MAX_COLUMN
,

2363 
SQLITE_MAX_EXPR_DEPTH
,

2364 
SQLITE_MAX_COMPOUND_SELECT
,

2365 
SQLITE_MAX_VDBE_OP
,

2366 
SQLITE_MAX_FUNCTION_ARG
,

2367 
SQLITE_MAX_ATTACHED
,

2368 
SQLITE_MAX_LIKE_PATTERN_LENGTH
,

2369 
SQLITE_MAX_VARIABLE_NUMBER
,

2370 
SQLITE_MAX_TRIGGER_DEPTH
,

2371 
SQLITE_MAX_WORKER_THREADS
,

2377 #i‡
SQLITE_MAX_LENGTH
<100

2378 #îr‹ 
SQLITE_MAX_LENGTH
 
mu°
 
be
 
©
 
Àa°
 100

2380 #i‡
SQLITE_MAX_SQL_LENGTH
<100

2381 #îr‹ 
SQLITE_MAX_SQL_LENGTH
 
mu°
 
be
 
©
 
Àa°
 100

2383 #i‡
SQLITE_MAX_SQL_LENGTH
>
SQLITE_MAX_LENGTH


2384 #îr‹ 
SQLITE_MAX_SQL_LENGTH
 
mu°
 
nŸ
 
be
 
gª©î
 
th™
 
SQLITE_MAX_LENGTH


2386 #i‡
SQLITE_MAX_COMPOUND_SELECT
<2

2387 #îr‹ 
SQLITE_MAX_COMPOUND_SELECT
 
mu°
 
be
 
©
 
Àa°
 2

2389 #i‡
SQLITE_MAX_VDBE_OP
<40

2390 #îr‹ 
SQLITE_MAX_VDBE_OP
 
mu°
 
be
 
©
 
Àa°
 40

2392 #i‡
SQLITE_MAX_FUNCTION_ARG
<0 || SQLITE_MAX_FUNCTION_ARG>127

2393 #îr‹ 
SQLITE_MAX_FUNCTION_ARG
 
mu°
 
be
 
bëwìn
 0 
™d
 127

2395 #i‡
SQLITE_MAX_ATTACHED
<0 || SQLITE_MAX_ATTACHED>125

2396 #îr‹ 
SQLITE_MAX_ATTACHED
 
mu°
 
be
 
bëwìn
 0 
™d
 125

2398 #i‡
SQLITE_MAX_LIKE_PATTERN_LENGTH
<1

2399 #îr‹ 
SQLITE_MAX_LIKE_PATTERN_LENGTH
 
mu°
 
be
 
©
 
Àa°
 1

2401 #i‡
SQLITE_MAX_COLUMN
>32767

2402 #îr‹ 
SQLITE_MAX_COLUMN
 
mu°
 
nŸ
 
ex˚ed
 32767

2404 #i‡
SQLITE_MAX_TRIGGER_DEPTH
<1

2405 #îr‹ 
SQLITE_MAX_TRIGGER_DEPTH
 
mu°
 
be
 
©
 
Àa°
 1

2407 #i‡
SQLITE_MAX_WORKER_THREADS
<0 || SQLITE_MAX_WORKER_THREADS>50

2408 #îr‹ 
SQLITE_MAX_WORKER_THREADS
 
mu°
 
be
 
bëwìn
 0 
™d
 50

2422 
	$sqlôe3_limô
(
sqlôe3
 *
db
, 
limôId
, 
√wLimô
){

2423 
ﬁdLimô
;

2425 #ifde‡
SQLITE_ENABLE_API_ARMOR


2426 if–!
	`sqlôe3Sa„tyCheckOk
(
db
) ){

2427 ()
SQLITE_MISUSE_BKPT
;

2437 
	`as£π
–
aH¨dLimô
[
SQLITE_LIMIT_LENGTH
]==
SQLITE_MAX_LENGTH
 );

2438 
	`as£π
–
aH¨dLimô
[
SQLITE_LIMIT_SQL_LENGTH
]==
SQLITE_MAX_SQL_LENGTH
 );

2439 
	`as£π
–
aH¨dLimô
[
SQLITE_LIMIT_COLUMN
]==
SQLITE_MAX_COLUMN
 );

2440 
	`as£π
–
aH¨dLimô
[
SQLITE_LIMIT_EXPR_DEPTH
]==
SQLITE_MAX_EXPR_DEPTH
 );

2441 
	`as£π
–
aH¨dLimô
[
SQLITE_LIMIT_COMPOUND_SELECT
]==
SQLITE_MAX_COMPOUND_SELECT
);

2442 
	`as£π
–
aH¨dLimô
[
SQLITE_LIMIT_VDBE_OP
]==
SQLITE_MAX_VDBE_OP
 );

2443 
	`as£π
–
aH¨dLimô
[
SQLITE_LIMIT_FUNCTION_ARG
]==
SQLITE_MAX_FUNCTION_ARG
 );

2444 
	`as£π
–
aH¨dLimô
[
SQLITE_LIMIT_ATTACHED
]==
SQLITE_MAX_ATTACHED
 );

2445 
	`as£π
–
aH¨dLimô
[
SQLITE_LIMIT_LIKE_PATTERN_LENGTH
]==

2446 
SQLITE_MAX_LIKE_PATTERN_LENGTH
 );

2447 
	`as£π
–
aH¨dLimô
[
SQLITE_LIMIT_VARIABLE_NUMBER
]==
SQLITE_MAX_VARIABLE_NUMBER
);

2448 
	`as£π
–
aH¨dLimô
[
SQLITE_LIMIT_TRIGGER_DEPTH
]==
SQLITE_MAX_TRIGGER_DEPTH
 );

2449 
	`as£π
–
aH¨dLimô
[
SQLITE_LIMIT_WORKER_THREADS
]==
SQLITE_MAX_WORKER_THREADS
 );

2450 
	`as£π
–
SQLITE_LIMIT_WORKER_THREADS
==(
SQLITE_N_LIMIT
-1) );

2453 if–
limôId
<0 ||ÜimôId>=
SQLITE_N_LIMIT
 ){

2456 
ﬁdLimô
 = 
db
->
aLimô
[
limôId
];

2457 if–
√wLimô
>=0 ){

2458 if–
√wLimô
>
aH¨dLimô
[
limôId
] ){

2459 
√wLimô
 = 
aH¨dLimô
[
limôId
];

2461 
db
->
aLimô
[
limôId
] = 
√wLimô
;

2463  
ﬁdLimô
;

2464 
	}
}

2490 
	$sqlôe3P¨£Uri
(

2491 c⁄° *
zDeÁu…Vfs
,

2492 c⁄° *
zUri
,

2493 *
pFœgs
,

2494 
sqlôe3_vfs
 **
µVfs
,

2495 **
pzFûe
,

2496 **
pzEºMsg


2498 
rc
 = 
SQLITE_OK
;

2499 
Êags
 = *
pFœgs
;

2500 c⁄° *
zVfs
 = 
zDeÁu…Vfs
;

2501 *
zFûe
;

2502 
c
;

2503 
nUri
 = 
	`sqlôe3SåÀn30
(
zUri
);

2505 
	`as£π
–*
pzEºMsg
==0 );

2507 if–((
Êags
 & 
SQLITE_OPEN_URI
)

2508 || 
sqlôe3GlobÆC⁄fig
.
bO≥nUri
)

2509 && 
nUri
>=5 && 
	`memcmp
(
zUri
, "file:", 5)==0

2511 *
zO±
;

2512 
eSèã
;

2513 
iIn
;

2514 
iOut
 = 0;

2515 
u64
 
nByã
 = 
nUri
+2;

2519 
Êags
 |
SQLITE_OPEN_URI
;

2521 
iIn
=0; iIn<
nUri
; iIn++Ë
nByã
 +(
zUri
[iIn]=='&');

2522 
zFûe
 = 
	`sqlôe3_mÆloc64
(
nByã
);

2523 if–!
zFûe
 )  
SQLITE_NOMEM_BKPT
;

2525 
iIn
 = 5;

2526 #ifde‡
SQLITE_ALLOW_URI_AUTHORITY


2527 if–
	`°∫cmp
(
zUri
+5, "///", 3)==0 ){

2528 
iIn
 = 7;

2534 if–
	`°∫cmp
(
zUri
+7, "///", 3)==0 ){ 
iIn
++; }

2535 }if–
	`°∫cmp
(
zUri
+5, "//localhost/", 12)==0 ){

2536 
iIn
 = 16;

2540 if–
zUri
[5]=='/' && zUri[6]=='/' ){

2541 
iIn
 = 7;

2542  
zUri
[
iIn
] && zUri[iIn]!='/' ) iIn++;

2543 if–
iIn
!=7 && (iIn!=16 || 
	`memcmp
("loˇlho°", &
zUri
[7], 9)) ){

2544 *
pzEºMsg
 = 
	`sqlôe3_m¥ötf
("invalid uriáuthority: %.*s",

2545 
iIn
-7, &
zUri
[7]);

2546 
rc
 = 
SQLITE_ERROR
;

2547 
∑r£_uri_out
;

2562 
eSèã
 = 0;

2563  (
c
 = 
zUri
[
iIn
])!=0 && c!='#' ){

2564 
iIn
++;

2565 if–
c
=='%'

2566 && 
	`sqlôe3Isxdigô
(
zUri
[
iIn
])

2567 && 
	`sqlôe3Isxdigô
(
zUri
[
iIn
+1])

2569 
o˘ë
 = (
	`sqlôe3HexToI¡
(
zUri
[
iIn
++]) << 4);

2570 
o˘ë
 +
	`sqlôe3HexToI¡
(
zUri
[
iIn
++]);

2572 
	`as£π
–
o˘ë
>=0 && octet<256 );

2573 if–
o˘ë
==0 ){

2578  (
c
 = 
zUri
[
iIn
])!=0 && c!='#'

2579 && (
eSèã
!=0 || 
c
!='?')

2580 && (
eSèã
!=1 || (
c
!='=' && c!='&'))

2581 && (
eSèã
!=2 || 
c
!='&')

2583 
iIn
++;

2587 
c
 = 
o˘ë
;

2588 }if–
eSèã
==1 && (
c
=='&' || c=='=') ){

2589 if–
zFûe
[
iOut
-1]==0 ){

2591  
zUri
[
iIn
] && zUri[iIn]!='#' && zUri[iIn-1]!='&' ) iIn++;

2594 if–
c
=='&' ){

2595 
zFûe
[
iOut
++] = '\0';

2597 
eSèã
 = 2;

2599 
c
 = 0;

2600 }if–(
eSèã
==0 && 
c
=='?') || (eState==2 && c=='&') ){

2601 
c
 = 0;

2602 
eSèã
 = 1;

2604 
zFûe
[
iOut
++] = 
c
;

2606 if–
eSèã
==1 ) 
zFûe
[
iOut
++] = '\0';

2607 
zFûe
[
iOut
++] = '\0';

2608 
zFûe
[
iOut
++] = '\0';

2614 
zO±
 = &
zFûe
[
	`sqlôe3SåÀn30
(zFile)+1];

2615  
zO±
[0] ){

2616 
nO±
 = 
	`sqlôe3SåÀn30
(
zO±
);

2617 *
zVÆ
 = &
zO±
[
nO±
+1];

2618 
nVÆ
 = 
	`sqlôe3SåÀn30
(
zVÆ
);

2620 if–
nO±
==3 && 
	`memcmp
("vfs", 
zO±
, 3)==0 ){

2621 
zVfs
 = 
zVÆ
;

2623 
	sO≥nMode
 {

2624 c⁄° *
z
;

2625 
mode
;

2626 } *
aMode
 = 0;

2627 *
zModeTy≥
 = 0;

2628 
mask
 = 0;

2629 
limô
 = 0;

2631 if–
nO±
==5 && 
	`memcmp
("ˇche", 
zO±
, 5)==0 ){

2632 
O≥nMode
 
aCacheMode
[] = {

2633 { "sh¨ed", 
SQLITE_OPEN_SHAREDCACHE
 },

2634 { "¥iv©e", 
SQLITE_OPEN_PRIVATECACHE
 },

2638 
mask
 = 
SQLITE_OPEN_SHAREDCACHE
|
SQLITE_OPEN_PRIVATECACHE
;

2639 
aMode
 = 
aCacheMode
;

2640 
limô
 = 
mask
;

2641 
zModeTy≥
 = "cache";

2643 if–
nO±
==4 && 
	`memcmp
("mode", 
zO±
, 4)==0 ){

2644 
O≥nMode
 
aO≥nMode
[] = {

2645 { "ro", 
SQLITE_OPEN_READONLY
 },

2646 { "rw", 
SQLITE_OPEN_READWRITE
 },

2647 { "rwc", 
SQLITE_OPEN_READWRITE
 | 
SQLITE_OPEN_CREATE
 },

2648 { "mem‹y", 
SQLITE_OPEN_MEMORY
 },

2652 
mask
 = 
SQLITE_OPEN_READONLY
 | 
SQLITE_OPEN_READWRITE


2653 | 
SQLITE_OPEN_CREATE
 | 
SQLITE_OPEN_MEMORY
;

2654 
aMode
 = 
aO≥nMode
;

2655 
limô
 = 
mask
 & 
Êags
;

2656 
zModeTy≥
 = "access";

2659 if–
aMode
 ){

2660 
i
;

2661 
mode
 = 0;

2662 
i
=0; 
aMode
[i].
z
; i++){

2663 c⁄° *
z
 = 
aMode
[
i
].z;

2664 if–
nVÆ
==
	`sqlôe3SåÀn30
(
z
Ë&& 0==
	`memcmp
(
zVÆ
, z,ÇVal) ){

2665 
mode
 = 
aMode
[
i
].mode;

2669 if–
mode
==0 ){

2670 *
pzEºMsg
 = 
	`sqlôe3_m¥ötf
("nÿsuch %†mode: %s", 
zModeTy≥
, 
zVÆ
);

2671 
rc
 = 
SQLITE_ERROR
;

2672 
∑r£_uri_out
;

2674 if–(
mode
 & ~
SQLITE_OPEN_MEMORY
)>
limô
 ){

2675 *
pzEºMsg
 = 
	`sqlôe3_m¥ötf
("%s modeÇotállowed: %s",

2676 
zModeTy≥
, 
zVÆ
);

2677 
rc
 = 
SQLITE_PERM
;

2678 
∑r£_uri_out
;

2680 
Êags
 = (Êag†& ~
mask
Ë| 
mode
;

2684 
zO±
 = &
zVÆ
[
nVÆ
+1];

2688 
zFûe
 = 
	`sqlôe3_mÆloc64
(
nUri
+2);

2689 if–!
zFûe
 )  
SQLITE_NOMEM_BKPT
;

2690 
	`mem˝y
(
zFûe
, 
zUri
, 
nUri
);

2691 
zFûe
[
nUri
] = '\0';

2692 
zFûe
[
nUri
+1] = '\0';

2693 
Êags
 &~
SQLITE_OPEN_URI
;

2696 *
µVfs
 = 
	`sqlôe3_vfs_föd
(
zVfs
);

2697 if–*
µVfs
==0 ){

2698 *
pzEºMsg
 = 
	`sqlôe3_m¥ötf
("nÿsuch vfs: %s", 
zVfs
);

2699 
rc
 = 
SQLITE_ERROR
;

2701 
∑r£_uri_out
:

2702 if–
rc
!=
SQLITE_OK
 ){

2703 
	`sqlôe3_‰ì
(
zFûe
);

2704 
zFûe
 = 0;

2706 *
pFœgs
 = 
Êags
;

2707 *
pzFûe
 = 
zFûe
;

2708  
rc
;

2709 
	}
}

2717 
	$›íD©aba£
(

2718 c⁄° *
zFûíame
,

2719 
sqlôe3
 **
µDb
,

2720 
Êags
,

2721 c⁄° *
zVfs


2723 
sqlôe3
 *
db
;

2724 
rc
;

2725 
isThªadß„
;

2726 *
zO≥n
 = 0;

2727 *
zEºMsg
 = 0;

2729 #ifde‡
SQLITE_ENABLE_API_ARMOR


2730 if–
µDb
==0 )  
SQLITE_MISUSE_BKPT
;

2732 *
µDb
 = 0;

2733 #i‚de‡
SQLITE_OMIT_AUTOINIT


2734 
rc
 = 
	`sqlôe3_öôülize
();

2735 if–
rc
 ) Ñc;

2748 
	`as£π
–
SQLITE_OPEN_READONLY
 == 0x01 );

2749 
	`as£π
–
SQLITE_OPEN_READWRITE
 == 0x02 );

2750 
	`as£π
–
SQLITE_OPEN_CREATE
 == 0x04 );

2751 
	`ã°ˇ£
–(1<<(
Êags
&7))==0x02 );

2752 
	`ã°ˇ£
–(1<<(
Êags
&7))==0x04 );

2753 
	`ã°ˇ£
–(1<<(
Êags
&7))==0x40 );

2754 if–((1<<(
Êags
&7)) & 0x46)==0 ){

2755  
SQLITE_MISUSE_BKPT
;

2758 if–
sqlôe3GlobÆC⁄fig
.
bC‹eMuãx
==0 ){

2759 
isThªadß„
 = 0;

2760 }if–
Êags
 & 
SQLITE_OPEN_NOMUTEX
 ){

2761 
isThªadß„
 = 0;

2762 }if–
Êags
 & 
SQLITE_OPEN_FULLMUTEX
 ){

2763 
isThªadß„
 = 1;

2765 
isThªadß„
 = 
sqlôe3GlobÆC⁄fig
.
bFuŒMuãx
;

2767 if–
Êags
 & 
SQLITE_OPEN_PRIVATECACHE
 ){

2768 
Êags
 &~
SQLITE_OPEN_SHAREDCACHE
;

2769 }if–
sqlôe3GlobÆC⁄fig
.
sh¨edCacheE«bÀd
 ){

2770 
Êags
 |
SQLITE_OPEN_SHAREDCACHE
;

2782 
Êags
 &~–
SQLITE_OPEN_DELETEONCLOSE
 |

2783 
SQLITE_OPEN_EXCLUSIVE
 |

2784 
SQLITE_OPEN_MAIN_DB
 |

2785 
SQLITE_OPEN_TEMP_DB
 |

2786 
SQLITE_OPEN_TRANSIENT_DB
 |

2787 
SQLITE_OPEN_MAIN_JOURNAL
 |

2788 
SQLITE_OPEN_TEMP_JOURNAL
 |

2789 
SQLITE_OPEN_SUBJOURNAL
 |

2790 
SQLITE_OPEN_MASTER_JOURNAL
 |

2791 
SQLITE_OPEN_NOMUTEX
 |

2792 
SQLITE_OPEN_FULLMUTEX
 |

2793 
SQLITE_OPEN_WAL


2797 
db
 = 
	`sqlôe3MÆlocZîo
–(
sqlôe3
) );

2798 if–
db
==0 ) 
›ídb_out
;

2799 if–
isThªadß„
 ){

2800 
db
->
muãx
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_RECURSIVE
);

2801 if–
db
->
muãx
==0 ){

2802 
	`sqlôe3_‰ì
(
db
);

2803 
db
 = 0;

2804 
›ídb_out
;

2807 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

2808 
db
->
îrMask
 = 0xff;

2809 
db
->
nDb
 = 2;

2810 
db
->
magic
 = 
SQLITE_MAGIC_BUSY
;

2811 
db
->
aDb
 = db->
aDbSètic
;

2813 
	`as£π
–(
db
->
aLimô
)==(
aH¨dLimô
) );

2814 
	`mem˝y
(
db
->
aLimô
, 
aH¨dLimô
, (db->aLimit));

2815 
db
->
aLimô
[
SQLITE_LIMIT_WORKER_THREADS
] = 
SQLITE_DEFAULT_WORKER_THREADS
;

2816 
db
->
autoCommô
 = 1;

2817 
db
->
√xtAutovac
 = -1;

2818 
db
->
szMm≠
 = 
sqlôe3GlobÆC⁄fig
.szMmap;

2819 
db
->
√xtPagesize
 = 0;

2820 
db
->
nMaxS‹ãrMm≠
 = 0x7FFFFFFF;

2821 
db
->
Êags
 |
SQLITE_Sh‹tCﬁNames
 | 
SQLITE_E«bÀTriggî
 | 
SQLITE_CacheSpûl


2822 #i‡!
	`deföed
(
SQLITE_DEFAULT_AUTOMATIC_INDEX
) || SQLITE_DEFAULT_AUTOMATIC_INDEX

2823 | 
SQLITE_AutoIndex


2825 #i‡
SQLITE_DEFAULT_CKPTFULLFSYNC


2826 | 
SQLITE_Ck±FuŒFSync


2828 #i‡
SQLITE_DEFAULT_FILE_FORMAT
<4

2829 | 
SQLITE_LegacyFûeFmt


2831 #ifde‡
SQLITE_ENABLE_LOAD_EXTENSION


2832 | 
SQLITE_LﬂdExãnsi⁄


2834 #i‡
SQLITE_DEFAULT_RECURSIVE_TRIGGERS


2835 | 
SQLITE_RecTriggîs


2837 #i‡
	`deföed
(
SQLITE_DEFAULT_FOREIGN_KEYS
) && SQLITE_DEFAULT_FOREIGN_KEYS

2838 | 
SQLITE_F‹eignKeys


2840 #i‡
	`deföed
(
SQLITE_REVERSE_UNORDERED_SELECTS
)

2841 | 
SQLITE_Revî£Ordî


2843 #i‡
	`deföed
(
SQLITE_ENABLE_OVERSIZE_CELL_CHECK
)

2844 | 
SQLITE_CñlSizeCk


2846 #i‡
	`deföed
(
SQLITE_ENABLE_FTS3_TOKENIZER
)

2847 | 
SQLITE_Fts3Tokíizî


2850 
	`sqlôe3HashInô
(&
db
->
aCﬁlSeq
);

2851 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


2852 
	`sqlôe3HashInô
(&
db
->
aModuÀ
);

2862 
	`¸óãCﬁœti⁄
(
db
, 
sqlôe3SåBINARY
, 
SQLITE_UTF8
, 0, 
böCﬁlFunc
, 0);

2863 
	`¸óãCﬁœti⁄
(
db
, 
sqlôe3SåBINARY
, 
SQLITE_UTF16BE
, 0, 
böCﬁlFunc
, 0);

2864 
	`¸óãCﬁœti⁄
(
db
, 
sqlôe3SåBINARY
, 
SQLITE_UTF16LE
, 0, 
böCﬁlFunc
, 0);

2865 
	`¸óãCﬁœti⁄
(
db
, "NOCASE", 
SQLITE_UTF8
, 0, 
noˇ£CﬁœtögFunc
, 0);

2866 
	`¸óãCﬁœti⁄
(
db
, "RTRIM", 
SQLITE_UTF8
, (*)1, 
böCﬁlFunc
, 0);

2867 if–
db
->
mÆlocFaûed
 ){

2868 
›ídb_out
;

2873 
db
->
pDÊtCﬁl
 = 
	`sqlôe3FödCﬁlSeq
(db, 
SQLITE_UTF8
, 
sqlôe3SåBINARY
, 0);

2874 
	`as£π
–
db
->
pDÊtCﬁl
!=0 );

2877 
db
->
›íFœgs
 = 
Êags
;

2878 
rc
 = 
	`sqlôe3P¨£Uri
(
zVfs
, 
zFûíame
, &
Êags
, &
db
->
pVfs
, &
zO≥n
, &
zEºMsg
);

2879 if–
rc
!=
SQLITE_OK
 ){

2880 if–
rc
==
SQLITE_NOMEM
 ) 
	`sqlôe3OomFau…
(
db
);

2881 
	`sqlôe3Eº‹WôhMsg
(
db
, 
rc
, 
zEºMsg
 ? "%s" : 0, zErrMsg);

2882 
	`sqlôe3_‰ì
(
zEºMsg
);

2883 
›ídb_out
;

2887 
rc
 = 
	`sqlôe3BåìO≥n
(
db
->
pVfs
, 
zO≥n
, db, &db->
aDb
[0].
pBt
, 0,

2888 
Êags
 | 
SQLITE_OPEN_MAIN_DB
);

2889 if–
rc
!=
SQLITE_OK
 ){

2890 if–
rc
==
SQLITE_IOERR_NOMEM
 ){

2891 
rc
 = 
SQLITE_NOMEM_BKPT
;

2893 
	`sqlôe3Eº‹
(
db
, 
rc
);

2894 
›ídb_out
;

2896 
	`sqlôe3BåìE¡î
(
db
->
aDb
[0].
pBt
);

2897 
db
->
aDb
[0].
pSchema
 = 
	`sqlôe3SchemaGë
(db, db->aDb[0].
pBt
);

2898 if–!
db
->
mÆlocFaûed
 ) 
	`ENC
(dbË
	`SCHEMA_ENC
(db);

2899 
	`sqlôe3BåìLóve
(
db
->
aDb
[0].
pBt
);

2900 
db
->
aDb
[1].
pSchema
 = 
	`sqlôe3SchemaGë
(db, 0);

2905 
db
->
aDb
[0].
zName
 = "main";

2906 
db
->
aDb
[0].
ß„ty_Àvñ
 = 
SQLITE_DEFAULT_SYNCHRONOUS
+1;

2907 
db
->
aDb
[1].
zName
 = "temp";

2908 
db
->
aDb
[1].
ß„ty_Àvñ
 = 
PAGER_SYNCHRONOUS_OFF
;

2910 
db
->
magic
 = 
SQLITE_MAGIC_OPEN
;

2911 if–
db
->
mÆlocFaûed
 ){

2912 
›ídb_out
;

2919 
	`sqlôe3Eº‹
(
db
, 
SQLITE_OK
);

2920 
	`sqlôe3Regi°îPîC⁄√˘i⁄BuûtöFun˘i⁄s
(
db
);

2925 
rc
 = 
	`sqlôe3_îrcode
(
db
);

2926 if–
rc
==
SQLITE_OK
 ){

2927 
	`sqlôe3AutoLﬂdExãnsi⁄s
(
db
);

2928 
rc
 = 
	`sqlôe3_îrcode
(
db
);

2929 if–
rc
!=
SQLITE_OK
 ){

2930 
›ídb_out
;

2934 #ifde‡
SQLITE_ENABLE_FTS1


2935 if–!
db
->
mÆlocFaûed
 ){

2936 
	`sqlôe3Fts1Inô
(
sqlôe3
*);

2937 
rc
 = 
	`sqlôe3Fts1Inô
(
db
);

2941 #ifde‡
SQLITE_ENABLE_FTS2


2942 if–!
db
->
mÆlocFaûed
 && 
rc
==
SQLITE_OK
 ){

2943 
	`sqlôe3Fts2Inô
(
sqlôe3
*);

2944 
rc
 = 
	`sqlôe3Fts2Inô
(
db
);

2948 #ifde‡
SQLITE_ENABLE_FTS3


2949 if–!
db
->
mÆlocFaûed
 && 
rc
==
SQLITE_OK
 ){

2950 
rc
 = 
	`sqlôe3Fts3Inô
(
db
);

2954 #ifde‡
SQLITE_ENABLE_FTS5


2955 if–!
db
->
mÆlocFaûed
 && 
rc
==
SQLITE_OK
 ){

2956 
rc
 = 
	`sqlôe3Fts5Inô
(
db
);

2960 #ifde‡
SQLITE_ENABLE_ICU


2961 if–!
db
->
mÆlocFaûed
 && 
rc
==
SQLITE_OK
 ){

2962 
rc
 = 
	`sqlôe3IcuInô
(
db
);

2966 #ifde‡
SQLITE_ENABLE_RTREE


2967 if–!
db
->
mÆlocFaûed
 && 
rc
==
SQLITE_OK
){

2968 
rc
 = 
	`sqlôe3RåìInô
(
db
);

2972 #ifde‡
SQLITE_ENABLE_DBSTAT_VTAB


2973 if–!
db
->
mÆlocFaûed
 && 
rc
==
SQLITE_OK
){

2974 
rc
 = 
	`sqlôe3Db°©Regi°î
(
db
);

2978 #ifde‡
SQLITE_ENABLE_JSON1


2979 if–!
db
->
mÆlocFaûed
 && 
rc
==
SQLITE_OK
){

2980 
rc
 = 
	`sqlôe3Js⁄1Inô
(
db
);

2988 #ifde‡
SQLITE_DEFAULT_LOCKING_MODE


2989 
db
->
dÊtLockMode
 = 
SQLITE_DEFAULT_LOCKING_MODE
;

2990 
	`sqlôe3PagîLockögMode
(
	`sqlôe3BåìPagî
(
db
->
aDb
[0].
pBt
),

2991 
SQLITE_DEFAULT_LOCKING_MODE
);

2994 if–
rc
 ) 
	`sqlôe3Eº‹
(
db
,Ñc);

2997 
	`£tupLookaside
(
db
, 0, 
sqlôe3GlobÆC⁄fig
.
szLookaside
,

2998 
sqlôe3GlobÆC⁄fig
.
nLookaside
);

3000 
	`sqlôe3_wÆ_autocheckpoöt
(
db
, 
SQLITE_DEFAULT_WAL_AUTOCHECKPOINT
);

3002 
›ídb_out
:

3003 if–
db
 ){

3004 
	`as£π
–
db
->
muãx
!=0 || 
isThªadß„
==0

3005 || 
sqlôe3GlobÆC⁄fig
.
bFuŒMuãx
==0 );

3006 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

3008 
rc
 = 
	`sqlôe3_îrcode
(
db
);

3009 
	`as£π
–
db
!=0 || 
rc
==
SQLITE_NOMEM
 );

3010 if–
rc
==
SQLITE_NOMEM
 ){

3011 
	`sqlôe3_˛o£
(
db
);

3012 
db
 = 0;

3013 }if–
rc
!=
SQLITE_OK
 ){

3014 
db
->
magic
 = 
SQLITE_MAGIC_SICK
;

3016 *
µDb
 = 
db
;

3017 #ifde‡
SQLITE_ENABLE_SQLLOG


3018 if–
sqlôe3GlobÆC⁄fig
.
xSqŒog
 ){

3020 *
pArg
 = 
sqlôe3GlobÆC⁄fig
.
pSqŒogArg
;

3021 
sqlôe3GlobÆC⁄fig
.
	`xSqŒog
(
pArg
, 
db
, 
zFûíame
, 0);

3024 #i‡
	`deföed
(
SQLITE_HAS_CODEC
)

3025 if–
rc
==
SQLITE_OK
 ){

3026 c⁄° *
zHexKey
 = 
	`sqlôe3_uri_∑ømëî
(
zO≥n
, "hexkey");

3027 if–
zHexKey
 && zHexKey[0] ){

3028 
u8
 
iByã
;

3029 
i
;

3030 
zKey
[40];

3031 
i
=0, 
iByã
=0; i<(
zKey
)*2 && 
	`sqlôe3Isxdigô
(
zHexKey
[i]); i++){

3032 
iByã
 = (iByã<<4Ë+ 
	`sqlôe3HexToI¡
(
zHexKey
[
i
]);

3033 if–(
i
&1)!=0 ) 
zKey
[i/2] = 
iByã
;

3035 
	`sqlôe3_key_v2
(
db
, 0, 
zKey
, 
i
/2);

3039 
	`sqlôe3_‰ì
(
zO≥n
);

3040  
rc
 & 0xff;

3041 
	}
}

3046 
	$sqlôe3_›í
(

3047 c⁄° *
zFûíame
,

3048 
sqlôe3
 **
µDb


3050  
	`›íD©aba£
(
zFûíame
, 
µDb
,

3051 
SQLITE_OPEN_READWRITE
 | 
SQLITE_OPEN_CREATE
, 0);

3052 
	}
}

3053 
	$sqlôe3_›í_v2
(

3054 c⁄° *
fûíame
,

3055 
sqlôe3
 **
µDb
,

3056 
Êags
,

3057 c⁄° *
zVfs


3059  
	`›íD©aba£
(
fûíame
, 
µDb
, ()
Êags
, 
zVfs
);

3060 
	}
}

3062 #i‚de‡
SQLITE_OMIT_UTF16


3066 
	$sqlôe3_›í16
(

3067 c⁄° *
zFûíame
,

3068 
sqlôe3
 **
µDb


3070 c⁄° *
zFûíame8
;

3071 
sqlôe3_vÆue
 *
pVÆ
;

3072 
rc
;

3074 #ifde‡
SQLITE_ENABLE_API_ARMOR


3075 if–
µDb
==0 )  
SQLITE_MISUSE_BKPT
;

3077 *
µDb
 = 0;

3078 #i‚de‡
SQLITE_OMIT_AUTOINIT


3079 
rc
 = 
	`sqlôe3_öôülize
();

3080 if–
rc
 ) Ñc;

3082 if–
zFûíame
==0 ) zFilename = "\000\000";

3083 
pVÆ
 = 
	`sqlôe3VÆueNew
(0);

3084 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, 
zFûíame
, 
SQLITE_UTF16NATIVE
, 
SQLITE_STATIC
);

3085 
zFûíame8
 = 
	`sqlôe3VÆueText
(
pVÆ
, 
SQLITE_UTF8
);

3086 if–
zFûíame8
 ){

3087 
rc
 = 
	`›íD©aba£
(
zFûíame8
, 
µDb
,

3088 
SQLITE_OPEN_READWRITE
 | 
SQLITE_OPEN_CREATE
, 0);

3089 
	`as£π
–*
µDb
 || 
rc
==
SQLITE_NOMEM
 );

3090 if–
rc
==
SQLITE_OK
 && !
	`DbHasPr›îty
(*
µDb
, 0, 
DB_SchemaLﬂded
) ){

3091 
	`SCHEMA_ENC
(*
µDb
Ë
	`ENC
(*µDbË
SQLITE_UTF16NATIVE
;

3094 
rc
 = 
SQLITE_NOMEM_BKPT
;

3096 
	`sqlôe3VÆueFªe
(
pVÆ
);

3098  
rc
 & 0xff;

3099 
	}
}

3105 
sqlôe3_¸óã_cﬁœti⁄
(

3106 
sqlôe3
* 
db
,

3107 c⁄° *
zName
,

3108 
íc
,

3109 * 
pCtx
,

3110 (*
xCom∑ª
)(*,,const *,,const *)

3112  
	`sqlôe3_¸óã_cﬁœti⁄_v2
(
db
, 
zName
, 
íc
, 
pCtx
, 
xCom∑ª
, 0);

3113 
	}
}

3118 
sqlôe3_¸óã_cﬁœti⁄_v2
(

3119 
sqlôe3
* 
db
,

3120 c⁄° *
zName
,

3121 
íc
,

3122 * 
pCtx
,

3123 (*
xCom∑ª
)(*,,const *,,const *),

3124 (*
xDñ
)(*)

3126 
rc
;

3128 #ifde‡
SQLITE_ENABLE_API_ARMOR


3129 if–!
	`sqlôe3Sa„tyCheckOk
(
db
Ë|| 
zName
==0 )  
SQLITE_MISUSE_BKPT
;

3131 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

3132 
	`as£π
–!
db
->
mÆlocFaûed
 );

3133 
rc
 = 
	`¸óãCﬁœti⁄
(
db
, 
zName
, (
u8
)
íc
, 
pCtx
, 
xCom∑ª
, 
xDñ
);

3134 
rc
 = 
	`sqlôe3ApiExô
(
db
,Ñc);

3135 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

3136  
rc
;

3137 
	}
}

3139 #i‚de‡
SQLITE_OMIT_UTF16


3143 
sqlôe3_¸óã_cﬁœti⁄16
(

3144 
sqlôe3
* 
db
,

3145 c⁄° *
zName
,

3146 
íc
,

3147 * 
pCtx
,

3148 (*
xCom∑ª
)(*,,const *,,const *)

3150 
rc
 = 
SQLITE_OK
;

3151 *
zName8
;

3153 #ifde‡
SQLITE_ENABLE_API_ARMOR


3154 if–!
	`sqlôe3Sa„tyCheckOk
(
db
Ë|| 
zName
==0 )  
SQLITE_MISUSE_BKPT
;

3156 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

3157 
	`as£π
–!
db
->
mÆlocFaûed
 );

3158 
zName8
 = 
	`sqlôe3Utf16to8
(
db
, 
zName
, -1, 
SQLITE_UTF16NATIVE
);

3159 if–
zName8
 ){

3160 
rc
 = 
	`¸óãCﬁœti⁄
(
db
, 
zName8
, (
u8
)
íc
, 
pCtx
, 
xCom∑ª
, 0);

3161 
	`sqlôe3DbFªe
(
db
, 
zName8
);

3163 
rc
 = 
	`sqlôe3ApiExô
(
db
,Ñc);

3164 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

3165  
rc
;

3166 
	}
}

3173 
sqlôe3_cﬁœti⁄_√eded
(

3174 
sqlôe3
 *
db
,

3175 *
pCﬁlNìdedArg
,

3176 (*
xCﬁlNìded
)(*,
sqlôe3
*,
eTextRï
,const *)

3178 #ifde‡
SQLITE_ENABLE_API_ARMOR


3179 if–!
	`sqlôe3Sa„tyCheckOk
(
db
ËË 
SQLITE_MISUSE_BKPT
;

3181 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

3182 
db
->
xCﬁlNìded
 = xCollNeeded;

3183 
db
->
xCﬁlNìded16
 = 0;

3184 
db
->
pCﬁlNìdedArg
 =ÖCollNeededArg;

3185 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

3186  
SQLITE_OK
;

3187 
	}
}

3189 #i‚de‡
SQLITE_OMIT_UTF16


3194 
sqlôe3_cﬁœti⁄_√eded16
(

3195 
sqlôe3
 *
db
,

3196 *
pCﬁlNìdedArg
,

3197 (*
xCﬁlNìded16
)(*,
sqlôe3
*,
eTextRï
,const *)

3199 #ifde‡
SQLITE_ENABLE_API_ARMOR


3200 if–!
	`sqlôe3Sa„tyCheckOk
(
db
ËË 
SQLITE_MISUSE_BKPT
;

3202 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

3203 
db
->
xCﬁlNìded
 = 0;

3204 
db
->
xCﬁlNìded16
 = xCollNeeded16;

3205 
db
->
pCﬁlNìdedArg
 =ÖCollNeededArg;

3206 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

3207  
SQLITE_OK
;

3208 
	}
}

3211 #i‚de‡
SQLITE_OMIT_DEPRECATED


3216 
	$sqlôe3_globÆ_ªcovî
(){

3217  
SQLITE_OK
;

3218 
	}
}

3227 
	$sqlôe3_gë_autocommô
(
sqlôe3
 *
db
){

3228 #ifde‡
SQLITE_ENABLE_API_ARMOR


3229 if–!
	`sqlôe3Sa„tyCheckOk
(
db
) ){

3230 ()
SQLITE_MISUSE_BKPT
;

3234  
db
->
autoCommô
;

3235 
	}
}

3248 
	$ªp‹tEº‹
(
iEº
, 
löío
, c⁄° *
zTy≥
){

3249 
	`sqlôe3_log
(
iEº
, "%sátÜine %d of [%.10s]",

3250 
zTy≥
, 
löío
, 20+
	`sqlôe3_sour˚id
());

3251  
iEº
;

3252 
	}
}

3253 
	$sqlôe3C‹ru±Eº‹
(
löío
){

3254 
	`ã°ˇ£
–
sqlôe3GlobÆC⁄fig
.
xLog
!=0 );

3255  
	`ªp‹tEº‹
(
SQLITE_CORRUPT
, 
löío
, "database corruption");

3256 
	}
}

3257 
	$sqlôe3Misu£Eº‹
(
löío
){

3258 
	`ã°ˇ£
–
sqlôe3GlobÆC⁄fig
.
xLog
!=0 );

3259  
	`ªp‹tEº‹
(
SQLITE_MISUSE
, 
löío
, "misuse");

3260 
	}
}

3261 
	$sqlôe3C™t›íEº‹
(
löío
){

3262 
	`ã°ˇ£
–
sqlôe3GlobÆC⁄fig
.
xLog
!=0 );

3263  
	`ªp‹tEº‹
(
SQLITE_CANTOPEN
, 
löío
, "cannot open file");

3264 
	}
}

3265 #ifde‡
SQLITE_DEBUG


3266 
	$sqlôe3NomemEº‹
(
löío
){

3267 
	`ã°ˇ£
–
sqlôe3GlobÆC⁄fig
.
xLog
!=0 );

3268  
	`ªp‹tEº‹
(
SQLITE_NOMEM
, 
löío
, "OOM");

3269 
	}
}

3270 
	$sqlôe3I€ºnomemEº‹
(
löío
){

3271 
	`ã°ˇ£
–
sqlôe3GlobÆC⁄fig
.
xLog
!=0 );

3272  
	`ªp‹tEº‹
(
SQLITE_IOERR_NOMEM
, 
löío
, "I/O OOMÉrror");

3273 
	}
}

3276 #i‚de‡
SQLITE_OMIT_DEPRECATED


3284 
	$sqlôe3_thªad_˛ónup
(){

3285 
	}
}

3292 
	$sqlôe3_èbÀ_cﬁumn_mëad©a
(

3293 
sqlôe3
 *
db
,

3294 c⁄° *
zDbName
,

3295 c⁄° *
zTabÀName
,

3296 c⁄° *
zCﬁumnName
,

3297 c⁄° **
pzD©aTy≥
,

3298 c⁄° **
pzCﬁlSeq
,

3299 *
pNŸNuŒ
,

3300 *
pPrim¨yKey
,

3301 *
pAutoöc


3303 
rc
;

3304 *
zEºMsg
 = 0;

3305 
TabÀ
 *
pTab
 = 0;

3306 
Cﬁumn
 *
pCﬁ
 = 0;

3307 
iCﬁ
 = 0;

3308 c⁄° *
zD©aTy≥
 = 0;

3309 c⁄° *
zCﬁlSeq
 = 0;

3310 
nŸnuŒ
 = 0;

3311 
¥im¨ykey
 = 0;

3312 
autoöc
 = 0;

3315 #ifde‡
SQLITE_ENABLE_API_ARMOR


3316 if–!
	`sqlôe3Sa„tyCheckOk
(
db
Ë|| 
zTabÀName
==0 ){

3317  
SQLITE_MISUSE_BKPT
;

3322 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

3323 
	`sqlôe3BåìE¡îAŒ
(
db
);

3324 
rc
 = 
	`sqlôe3Inô
(
db
, &
zEºMsg
);

3325 if–
SQLITE_OK
!=
rc
 ){

3326 
îr‹_out
;

3330 
pTab
 = 
	`sqlôe3FödTabÀ
(
db
, 
zTabÀName
, 
zDbName
);

3331 if–!
pTab
 ||ÖTab->
pSñe˘
 ){

3332 
pTab
 = 0;

3333 
îr‹_out
;

3337 if–
zCﬁumnName
==0 ){

3340 
iCﬁ
=0; iCﬁ<
pTab
->
nCﬁ
; iCol++){

3341 
pCﬁ
 = &
pTab
->
aCﬁ
[
iCﬁ
];

3342 if–0==
	`sqlôe3SåICmp
(
pCﬁ
->
zName
, 
zCﬁumnName
) ){

3346 if–
iCﬁ
==
pTab
->
nCﬁ
 ){

3347 if–
	`HasRowid
(
pTab
Ë&& 
	`sqlôe3IsRowid
(
zCﬁumnName
) ){

3348 
iCﬁ
 = 
pTab
->
iPKey
;

3349 
pCﬁ
 = 
iCﬁ
>=0 ? &
pTab
->
aCﬁ
[iCol] : 0;

3351 
pTab
 = 0;

3352 
îr‹_out
;

3367 if–
pCﬁ
 ){

3368 
zD©aTy≥
 = 
	`sqlôe3CﬁumnTy≥
(
pCﬁ
,0);

3369 
zCﬁlSeq
 = 
pCﬁ
->
zCﬁl
;

3370 
nŸnuŒ
 = 
pCﬁ
->
nŸNuŒ
!=0;

3371 
¥im¨ykey
 = (
pCﬁ
->
cﬁFœgs
 & 
COLFLAG_PRIMKEY
)!=0;

3372 
autoöc
 = 
pTab
->
iPKey
==
iCﬁ
 && (pTab->
èbFœgs
 & 
TF_Autoö¸emít
)!=0;

3374 
zD©aTy≥
 = "INTEGER";

3375 
¥im¨ykey
 = 1;

3377 if–!
zCﬁlSeq
 ){

3378 
zCﬁlSeq
 = 
sqlôe3SåBINARY
;

3381 
îr‹_out
:

3382 
	`sqlôe3BåìLóveAŒ
(
db
);

3388 if–
pzD©aTy≥
 ) *pzD©aTy≥ = 
zD©aTy≥
;

3389 if–
pzCﬁlSeq
 ) *pzCﬁlSeq = 
zCﬁlSeq
;

3390 if–
pNŸNuŒ
 ) *pNŸNuŒ = 
nŸnuŒ
;

3391 if–
pPrim¨yKey
 ) *pPrim¨yKey = 
¥im¨ykey
;

3392 if–
pAutoöc
 ) *pAutoö¯
autoöc
;

3394 if–
SQLITE_OK
==
rc
 && !
pTab
 ){

3395 
	`sqlôe3DbFªe
(
db
, 
zEºMsg
);

3396 
zEºMsg
 = 
	`sqlôe3MPrötf
(
db
, "nÿsuchÅabÀ cﬁumn: %s.%s", 
zTabÀName
,

3397 
zCﬁumnName
);

3398 
rc
 = 
SQLITE_ERROR
;

3400 
	`sqlôe3Eº‹WôhMsg
(
db
, 
rc
, (
zEºMsg
?"%s":0), zErrMsg);

3401 
	`sqlôe3DbFªe
(
db
, 
zEºMsg
);

3402 
rc
 = 
	`sqlôe3ApiExô
(
db
,Ñc);

3403 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

3404  
rc
;

3405 
	}
}

3410 
	$sqlôe3_¶ìp
(
ms
){

3411 
sqlôe3_vfs
 *
pVfs
;

3412 
rc
;

3413 
pVfs
 = 
	`sqlôe3_vfs_föd
(0);

3414 if–
pVfs
==0 )  0;

3419 
rc
 = (
	`sqlôe3OsSÀï
(
pVfs
, 1000*
ms
)/1000);

3420  
rc
;

3421 
	}
}

3426 
	$sqlôe3_exãnded_ªsu…_codes
(
sqlôe3
 *
db
, 
⁄off
){

3427 #ifde‡
SQLITE_ENABLE_API_ARMOR


3428 if–!
	`sqlôe3Sa„tyCheckOk
(
db
ËË 
SQLITE_MISUSE_BKPT
;

3430 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

3431 
db
->
îrMask
 = 
⁄off
 ? 0xffffffff : 0xff;

3432 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

3433  
SQLITE_OK
;

3434 
	}
}

3439 
	$sqlôe3_fûe_c⁄åﬁ
(
sqlôe3
 *
db
, c⁄° *
zDbName
, 
›
, *
pArg
){

3440 
rc
 = 
SQLITE_ERROR
;

3441 
Båì
 *
pBåì
;

3443 #ifde‡
SQLITE_ENABLE_API_ARMOR


3444 if–!
	`sqlôe3Sa„tyCheckOk
(
db
ËË 
SQLITE_MISUSE_BKPT
;

3446 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

3447 
pBåì
 = 
	`sqlôe3DbNameToBåì
(
db
, 
zDbName
);

3448 if–
pBåì
 ){

3449 
Pagî
 *
pPagî
;

3450 
sqlôe3_fûe
 *
fd
;

3451 
	`sqlôe3BåìE¡î
(
pBåì
);

3452 
pPagî
 = 
	`sqlôe3BåìPagî
(
pBåì
);

3453 
	`as£π
–
pPagî
!=0 );

3454 
fd
 = 
	`sqlôe3PagîFûe
(
pPagî
);

3455 
	`as£π
–
fd
!=0 );

3456 if–
›
==
SQLITE_FCNTL_FILE_POINTER
 ){

3457 *(
sqlôe3_fûe
**)
pArg
 = 
fd
;

3458 
rc
 = 
SQLITE_OK
;

3459 }if–
›
==
SQLITE_FCNTL_VFS_POINTER
 ){

3460 *(
sqlôe3_vfs
**)
pArg
 = 
	`sqlôe3PagîVfs
(
pPagî
);

3461 
rc
 = 
SQLITE_OK
;

3462 }if–
›
==
SQLITE_FCNTL_JOURNAL_POINTER
 ){

3463 *(
sqlôe3_fûe
**)
pArg
 = 
	`sqlôe3PagîJ∫lFûe
(
pPagî
);

3464 
rc
 = 
SQLITE_OK
;

3465 }if–
fd
->
pMëhods
 ){

3466 
rc
 = 
	`sqlôe3OsFûeC⁄åﬁ
(
fd
, 
›
, 
pArg
);

3468 
rc
 = 
SQLITE_NOTFOUND
;

3470 
	`sqlôe3BåìLóve
(
pBåì
);

3472 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

3473  
rc
;

3474 
	}
}

3479 
	$sqlôe3_ã°_c⁄åﬁ
(
›
, ...){

3480 
rc
 = 0;

3481 #ifde‡
SQLITE_OMIT_BUILTIN_TEST


3482 
	`UNUSED_PARAMETER
(
›
);

3484 
va_li°
 
≠
;

3485 
	`va_°¨t
(
≠
, 
›
);

3486  
›
 ){

3491 
SQLITE_TESTCTRL_PRNG_SAVE
: {

3492 
	`sqlôe3P∫gSaveSèã
();

3501 
SQLITE_TESTCTRL_PRNG_RESTORE
: {

3502 
	`sqlôe3P∫gRe°‹eSèã
();

3511 
SQLITE_TESTCTRL_PRNG_RESET
: {

3512 
	`sqlôe3_øndom√ss
(0,0);

3524 
SQLITE_TESTCTRL_BITVEC_TEST
: {

3525 
sz
 = 
	`va_¨g
(
≠
, );

3526 *
aProg
 = 
	`va_¨g
(
≠
, *);

3527 
rc
 = 
	`sqlôe3BôvecBuûtöTe°
(
sz
, 
aProg
);

3542 
SQLITE_TESTCTRL_FAULT_INSTALL
: {

3547 (*
	tTESTCALLBACKFUNC_t
)();

3548 
sqlôe3GlobÆC⁄fig
.
xTe°CÆlback
 = 
	`va_¨g
(
≠
, 
TESTCALLBACKFUNC_t
);

3549 
rc
 = 
	`sqlôe3Fau…Sim
(0);

3559 
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS
: {

3560 (*
	tvoid_fun˘i⁄
)();

3561 
void_fun˘i⁄
 
xBíignBegö
;

3562 
void_fun˘i⁄
 
xBíignEnd
;

3563 
xBíignBegö
 = 
	`va_¨g
(
≠
, 
void_fun˘i⁄
);

3564 
xBíignEnd
 = 
	`va_¨g
(
≠
, 
void_fun˘i⁄
);

3565 
	`sqlôe3BíignMÆlocHooks
(
xBíignBegö
, 
xBíignEnd
);

3581 
SQLITE_TESTCTRL_PENDING_BYTE
: {

3582 
rc
 = 
PENDING_BYTE
;

3583 #i‚de‡
SQLITE_OMIT_WSD


3585 
√wVÆ
 = 
	`va_¨g
(
≠
, );

3586 if–
√wVÆ
 ) 
sqlôe3PídögByã
 =ÇewVal;

3603 
SQLITE_TESTCTRL_ASSERT
: {

3604 vﬁ©ûê
x
 = 0;

3605 
	`as£π
– (
x
 = 
	`va_¨g
(
≠
,))!=0 );

3606 
rc
 = 
x
;

3638 
SQLITE_TESTCTRL_ALWAYS
: {

3639 
x
 = 
	`va_¨g
(
≠
,);

3640 
rc
 = 
	`ALWAYS
(
x
);

3655 
SQLITE_TESTCTRL_BYTEORDER
: {

3656 
rc
 = 
SQLITE_BYTEORDER
*100 + 
SQLITE_LITTLEENDIAN
*10 + 
SQLITE_BIGENDIAN
;

3665 
SQLITE_TESTCTRL_RESERVE
: {

3666 
sqlôe3
 *
db
 = 
	`va_¨g
(
≠
, sqlite3*);

3667 
x
 = 
	`va_¨g
(
≠
,);

3668 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

3669 
	`sqlôe3BåìSëPageSize
(
db
->
aDb
[0].
pBt
, 0, 
x
, 0);

3670 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

3683 
SQLITE_TESTCTRL_OPTIMIZATIONS
: {

3684 
sqlôe3
 *
db
 = 
	`va_¨g
(
≠
, sqlite3*);

3685 
db
->
dbO±Fœgs
 = (
u16
)(
	`va_¨g
(
≠
, ) & 0xffff);

3689 #ifde‡
SQLITE_N_KEYWORD


3699 
SQLITE_TESTCTRL_ISKEYWORD
: {

3700 c⁄° *
zW‹d
 = 
	`va_¨g
(
≠
, const *);

3701 
n
 = 
	`sqlôe3SåÀn30
(
zW‹d
);

3702 
rc
 = (
	`sqlôe3Keyw‹dCode
((
u8
*)
zW‹d
, 
n
)!=
TK_ID
Ë? 
SQLITE_N_KEYWORD
 : 0;

3712 
SQLITE_TESTCTRL_SCRATCHMALLOC
: {

3713 *
pFªe
, **
µNew
;

3714 
sz
;

3715 
sz
 = 
	`va_¨g
(
≠
, );

3716 
µNew
 = 
	`va_¨g
(
≠
, **);

3717 
pFªe
 = 
	`va_¨g
(
≠
, *);

3718 if–
sz
 ) *
µNew
 = 
	`sqlôe3S¸©chMÆloc
(sz);

3719 
	`sqlôe3S¸©chFªe
(
pFªe
);

3729 
SQLITE_TESTCTRL_LOCALTIME_FAULT
: {

3730 
sqlôe3GlobÆC⁄fig
.
bLoˇ…imeFau…
 = 
	`va_¨g
(
≠
, );

3742 
SQLITE_TESTCTRL_NEVER_CORRUPT
: {

3743 
sqlôe3GlobÆC⁄fig
.
√vîC‹ru±
 = 
	`va_¨g
(
≠
, );

3753 
SQLITE_TESTCTRL_VDBE_COVERAGE
: {

3754 #ifde‡
SQLITE_VDBE_COVERAGE


3755 (*
	tbønch_ˇŒback
)(*,,
	tu8
,u8);

3756 
sqlôe3GlobÆC⁄fig
.
xVdbeBønch
 = 
	`va_¨g
(
≠
,
bønch_ˇŒback
);

3757 
sqlôe3GlobÆC⁄fig
.
pVdbeBønchArg
 = 
	`va_¨g
(
≠
,*);

3763 
SQLITE_TESTCTRL_SORTER_MMAP
: {

3764 
sqlôe3
 *
db
 = 
	`va_¨g
(
≠
, sqlite3*);

3765 
db
->
nMaxS‹ãrMm≠
 = 
	`va_¨g
(
≠
, );

3774 
SQLITE_TESTCTRL_ISINIT
: {

3775 if–
sqlôe3GlobÆC⁄fig
.
isInô
==0 ) 
rc
 = 
SQLITE_ERROR
;

3795 
SQLITE_TESTCTRL_IMPOSTER
: {

3796 
sqlôe3
 *
db
 = 
	`va_¨g
(
≠
, sqlite3*);

3797 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

3798 
db
->
öô
.
iDb
 = 
	`sqlôe3FödDbName
(db, 
	`va_¨g
(
≠
,const *));

3799 
db
->
öô
.
busy
 = db->öô.
impo°îTabÀ
 = 
	`va_¨g
(
≠
,);

3800 
db
->
öô
.
√wTnum
 = 
	`va_¨g
(
≠
,);

3801 if–
db
->
öô
.
busy
==0 && db->öô.
√wTnum
>0 ){

3802 
	`sqlôe3Re£tAŒSchemasOfC⁄√˘i⁄
(
db
);

3804 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

3808 
	`va_íd
(
≠
);

3810  
rc
;

3811 
	}
}

3824 c⁄° *
	$sqlôe3_uri_∑ømëî
(c⁄° *
zFûíame
, c⁄° *
zP¨am
){

3825 if–
zFûíame
==0 || 
zP¨am
==0 )  0;

3826 
zFûíame
 +
	`sqlôe3SåÀn30
(zFilename) + 1;

3827  
zFûíame
[0] ){

3828 
x
 = 
	`°rcmp
(
zFûíame
, 
zP¨am
);

3829 
zFûíame
 +
	`sqlôe3SåÀn30
(zFilename) + 1;

3830 if–
x
==0 )  
zFûíame
;

3831 
zFûíame
 +
	`sqlôe3SåÀn30
(zFilename) + 1;

3834 
	}
}

3839 
	$sqlôe3_uri_boﬁón
(c⁄° *
zFûíame
, c⁄° *
zP¨am
, 
bDÊt
){

3840 c⁄° *
z
 = 
	`sqlôe3_uri_∑ømëî
(
zFûíame
, 
zP¨am
);

3841 
bDÊt
 = bDflt!=0;

3842  
z
 ? 
	`sqlôe3GëBoﬁón
(z, 
bDÊt
) : bDflt;

3843 
	}
}

3848 
sqlôe3_öt64
 
	$sqlôe3_uri_öt64
(

3849 c⁄° *
zFûíame
,

3850 c⁄° *
zP¨am
,

3851 
sqlôe3_öt64
 
bDÊt


3853 c⁄° *
z
 = 
	`sqlôe3_uri_∑ømëî
(
zFûíame
, 
zP¨am
);

3854 
sqlôe3_öt64
 
v
;

3855 if–
z
 && 
	`sqlôe3DecOrHexToI64
(z, &
v
)==
SQLITE_OK
 ){

3856 
bDÊt
 = 
v
;

3858  
bDÊt
;

3859 
	}
}

3864 
Båì
 *
	$sqlôe3DbNameToBåì
(
sqlôe3
 *
db
, c⁄° *
zDbName
){

3865 
i
;

3866 
i
=0; i<
db
->
nDb
; i++){

3867 if–
db
->
aDb
[
i
].
pBt


3868 && (
zDbName
==0 || 
	`sqlôe3SåICmp
(zDbName, 
db
->
aDb
[
i
].
zName
)==0)

3870  
db
->
aDb
[
i
].
pBt
;

3874 
	}
}

3880 c⁄° *
	$sqlôe3_db_fûíame
(
sqlôe3
 *
db
, c⁄° *
zDbName
){

3881 
Båì
 *
pBt
;

3882 #ifde‡
SQLITE_ENABLE_API_ARMOR


3883 if–!
	`sqlôe3Sa„tyCheckOk
(
db
) ){

3884 ()
SQLITE_MISUSE_BKPT
;

3888 
pBt
 = 
	`sqlôe3DbNameToBåì
(
db
, 
zDbName
);

3889  
pBt
 ? 
	`sqlôe3BåìGëFûíame
(pBt) : 0;

3890 
	}
}

3896 
	$sqlôe3_db_ªad⁄ly
(
sqlôe3
 *
db
, c⁄° *
zDbName
){

3897 
Båì
 *
pBt
;

3898 #ifde‡
SQLITE_ENABLE_API_ARMOR


3899 if–!
	`sqlôe3Sa„tyCheckOk
(
db
) ){

3900 ()
SQLITE_MISUSE_BKPT
;

3904 
pBt
 = 
	`sqlôe3DbNameToBåì
(
db
, 
zDbName
);

3905  
pBt
 ? 
	`sqlôe3BåìIsRód⁄ly
(pBt) : -1;

3906 
	}
}

3908 #ifde‡
SQLITE_ENABLE_SNAPSHOT


3913 
	$sqlôe3_¢≠shŸ_gë
(

3914 
sqlôe3
 *
db
,

3915 c⁄° *
zDb
,

3916 
sqlôe3_¢≠shŸ
 **
µS«pshŸ


3918 
rc
 = 
SQLITE_ERROR
;

3919 #i‚de‡
SQLITE_OMIT_WAL


3920 
iDb
;

3922 #ifde‡
SQLITE_ENABLE_API_ARMOR


3923 if–!
	`sqlôe3Sa„tyCheckOk
(
db
) ){

3924  
SQLITE_MISUSE_BKPT
;

3927 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

3929 
iDb
 = 
	`sqlôe3FödDbName
(
db
, 
zDb
);

3930 if–
iDb
==0 || iDb>1 ){

3931 
Båì
 *
pBt
 = 
db
->
aDb
[
iDb
].pBt;

3932 if–0==
	`sqlôe3BåìIsInTøns
(
pBt
) ){

3933 
rc
 = 
	`sqlôe3BåìBegöTøns
(
pBt
, 0);

3934 if–
rc
==
SQLITE_OK
 ){

3935 
rc
 = 
	`sqlôe3PagîS«pshŸGë
(
	`sqlôe3BåìPagî
(
pBt
), 
µS«pshŸ
);

3940 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

3942  
rc
;

3943 
	}
}

3948 
	$sqlôe3_¢≠shŸ_›í
(

3949 
sqlôe3
 *
db
,

3950 c⁄° *
zDb
,

3951 
sqlôe3_¢≠shŸ
 *
pS«pshŸ


3953 
rc
 = 
SQLITE_ERROR
;

3954 #i‚de‡
SQLITE_OMIT_WAL


3956 #ifde‡
SQLITE_ENABLE_API_ARMOR


3957 if–!
	`sqlôe3Sa„tyCheckOk
(
db
) ){

3958  
SQLITE_MISUSE_BKPT
;

3961 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

3962 if–
db
->
autoCommô
==0 ){

3963 
iDb
;

3964 
iDb
 = 
	`sqlôe3FödDbName
(
db
, 
zDb
);

3965 if–
iDb
==0 || iDb>1 ){

3966 
Båì
 *
pBt
 = 
db
->
aDb
[
iDb
].pBt;

3967 if–0==
	`sqlôe3BåìIsInRódTøns
(
pBt
) ){

3968 
rc
 = 
	`sqlôe3PagîS«pshŸO≥n
(
	`sqlôe3BåìPagî
(
pBt
), 
pS«pshŸ
);

3969 if–
rc
==
SQLITE_OK
 ){

3970 
rc
 = 
	`sqlôe3BåìBegöTøns
(
pBt
, 0);

3971 
	`sqlôe3PagîS«pshŸO≥n
(
	`sqlôe3BåìPagî
(
pBt
), 0);

3977 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

3979  
rc
;

3980 
	}
}

3985 
	$sqlôe3_¢≠shŸ_‰ì
(
sqlôe3_¢≠shŸ
 *
pS«pshŸ
){

3986 
	`sqlôe3_‰ì
(
pS«pshŸ
);

3987 
	}
}

	@malloc.c

15 
	~"sqlôeI¡.h
"

16 
	~<°d¨g.h
>

23 
	$sqlôe3_ªÀa£_mem‹y
(
n
){

24 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


25  
	`sqlôe3PˇcheRñó£Mem‹y
(
n
);

30 
	`UNUSED_PARAMETER
(
n
);

33 
	}
}

39 
	sS¸©chFªe¶Ÿ
 {

40 
S¸©chFªe¶Ÿ
 *
	mpNext
;

41 } 
	tS¸©chFªe¶Ÿ
;

46 
SQLITE_WSD
 
	sMem0GlobÆ
 {

47 
sqlôe3_muãx
 *
	mmuãx
;

48 
sqlôe3_öt64
 
	mÆ¨mThªshﬁd
;

56 *
	mpS¸©chEnd
;

57 
S¸©chFªe¶Ÿ
 *
	mpS¸©chFªe
;

58 
u32
 
	mnS¸©chFªe
;

64 
	m√¨lyFuŒ
;

65 } 
	gmem0
 = { 0, 0, 0, 0, 0, 0 };

67 
	#mem0
 
	`GLOBAL
(
Mem0GlobÆ
, 
mem0
)

	)

72 
sqlôe3_muãx
 *
	$sqlôe3MÆlocMuãx
(){

73  
mem0
.
muãx
;

74 
	}
}

76 #i‚de‡
SQLITE_OMIT_DEPRECATED


82 
sqlôe3_mem‹y_Æ¨m
(

83 (*
xCÆlback
)(*
pArg
, 
sqlôe3_öt64
 
u£d
,
N
),

84 *
pArg
,

85 
sqlôe3_öt64
 
iThªshﬁd


87 ()
xCÆlback
;

88 ()
pArg
;

89 ()
iThªshﬁd
;

90  
SQLITE_OK
;

91 
	}
}

98 
sqlôe3_öt64
 
	$sqlôe3_so·_hóp_limô64
(
sqlôe3_öt64
 
n
){

99 
sqlôe3_öt64
 
¥i‹Limô
;

100 
sqlôe3_öt64
 
ex˚ss
;

101 
sqlôe3_öt64
 
nU£d
;

102 #i‚de‡
SQLITE_OMIT_AUTOINIT


103 
rc
 = 
	`sqlôe3_öôülize
();

104 if–
rc
 )  -1;

106 
	`sqlôe3_muãx_íãr
(
mem0
.
muãx
);

107 
¥i‹Limô
 = 
mem0
.
Æ¨mThªshﬁd
;

108 if–
n
<0 ){

109 
	`sqlôe3_muãx_Àave
(
mem0
.
muãx
);

110  
¥i‹Limô
;

112 
mem0
.
Æ¨mThªshﬁd
 = 
n
;

113 
nU£d
 = 
	`sqlôe3SètusVÆue
(
SQLITE_STATUS_MEMORY_USED
);

114 
mem0
.
√¨lyFuŒ
 = (
n
>0 &&Ç<=
nU£d
);

115 
	`sqlôe3_muãx_Àave
(
mem0
.
muãx
);

116 
ex˚ss
 = 
	`sqlôe3_mem‹y_u£d
(Ë- 
n
;

117 if–
ex˚ss
>0 ) 
	`sqlôe3_ªÀa£_mem‹y
(()(excess & 0x7fffffff));

118  
¥i‹Limô
;

119 
	}
}

120 
	$sqlôe3_so·_hóp_limô
(
n
){

121 if–
n
<0 )Ç = 0;

122 
	`sqlôe3_so·_hóp_limô64
(
n
);

123 
	}
}

128 
	$sqlôe3MÆlocInô
(){

129 
rc
;

130 if–
sqlôe3GlobÆC⁄fig
.
m
.
xMÆloc
==0 ){

131 
	`sqlôe3MemSëDeÁu…
();

133 
	`mem£t
(&
mem0
, 0, (mem0));

134 
mem0
.
muãx
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MEM
);

135 if–
sqlôe3GlobÆC⁄fig
.
pS¸©ch
 && sqlôe3GlobÆC⁄fig.
szS¸©ch
>=100

136 && 
sqlôe3GlobÆC⁄fig
.
nS¸©ch
>0 ){

137 
i
, 
n
, 
sz
;

138 
S¸©chFªe¶Ÿ
 *
pSlŸ
;

139 
sz
 = 
	`ROUNDDOWN8
(
sqlôe3GlobÆC⁄fig
.
szS¸©ch
);

140 
sqlôe3GlobÆC⁄fig
.
szS¸©ch
 = 
sz
;

141 
pSlŸ
 = (
S¸©chFªe¶Ÿ
*)
sqlôe3GlobÆC⁄fig
.
pS¸©ch
;

142 
n
 = 
sqlôe3GlobÆC⁄fig
.
nS¸©ch
;

143 
mem0
.
pS¸©chFªe
 = 
pSlŸ
;

144 
mem0
.
nS¸©chFªe
 = 
n
;

145 
i
=0; i<
n
-1; i++){

146 
pSlŸ
->
pNext
 = (
S¸©chFªe¶Ÿ
*)(
sz
+(*)pSlot);

147 
pSlŸ
 =ÖSlŸ->
pNext
;

149 
pSlŸ
->
pNext
 = 0;

150 
mem0
.
pS¸©chEnd
 = (*)&
pSlŸ
[1];

152 
mem0
.
pS¸©chEnd
 = 0;

153 
sqlôe3GlobÆC⁄fig
.
pS¸©ch
 = 0;

154 
sqlôe3GlobÆC⁄fig
.
szS¸©ch
 = 0;

155 
sqlôe3GlobÆC⁄fig
.
nS¸©ch
 = 0;

157 if–
sqlôe3GlobÆC⁄fig
.
pPage
==0 || sqlôe3GlobÆC⁄fig.
szPage
<512

158 || 
sqlôe3GlobÆC⁄fig
.
nPage
<=0 ){

159 
sqlôe3GlobÆC⁄fig
.
pPage
 = 0;

160 
sqlôe3GlobÆC⁄fig
.
szPage
 = 0;

162 
rc
 = 
sqlôe3GlobÆC⁄fig
.
m
.
	`xInô
(sqlôe3GlobÆC⁄fig.m.
pAµD©a
);

163 if–
rc
!=
SQLITE_OK
 ) 
	`mem£t
(&
mem0
, 0, (mem0));

164  
rc
;

165 
	}
}

172 
	$sqlôe3HópNóæyFuŒ
(){

173  
mem0
.
√¨lyFuŒ
;

174 
	}
}

179 
	$sqlôe3MÆlocEnd
(){

180 if–
sqlôe3GlobÆC⁄fig
.
m
.
xShutdown
 ){

181 
sqlôe3GlobÆC⁄fig
.
m
.
	`xShutdown
(sqlôe3GlobÆC⁄fig.m.
pAµD©a
);

183 
	`mem£t
(&
mem0
, 0, (mem0));

184 
	}
}

189 
sqlôe3_öt64
 
	$sqlôe3_mem‹y_u£d
(){

190 
sqlôe3_öt64
 
ªs
, 
mx
;

191 
	`sqlôe3_°©us64
(
SQLITE_STATUS_MEMORY_USED
, &
ªs
, &
mx
, 0);

192  
ªs
;

193 
	}
}

200 
sqlôe3_öt64
 
	$sqlôe3_mem‹y_highw©î
(
ª£tFœg
){

201 
sqlôe3_öt64
 
ªs
, 
mx
;

202 
	`sqlôe3_°©us64
(
SQLITE_STATUS_MEMORY_USED
, &
ªs
, &
mx
, 
ª£tFœg
);

203  
mx
;

204 
	}
}

209 
	$sqlôe3MÆlocAœrm
(
nByã
){

210 if–
mem0
.
Æ¨mThªshﬁd
<=0 ) ;

211 
	`sqlôe3_muãx_Àave
(
mem0
.
muãx
);

212 
	`sqlôe3_ªÀa£_mem‹y
(
nByã
);

213 
	`sqlôe3_muãx_íãr
(
mem0
.
muãx
);

214 
	}
}

220 
	$mÆlocWôhAœrm
(
n
, **
µ
){

221 
nFuŒ
;

222 *
p
;

223 
	`as£π
–
	`sqlôe3_muãx_hñd
(
mem0
.
muãx
) );

224 
nFuŒ
 = 
sqlôe3GlobÆC⁄fig
.
m
.
	`xRoundup
(
n
);

225 
	`sqlôe3SètusHighw©î
(
SQLITE_STATUS_MALLOC_SIZE
, 
n
);

226 if–
mem0
.
Æ¨mThªshﬁd
>0 ){

227 
sqlôe3_öt64
 
nU£d
 = 
	`sqlôe3SètusVÆue
(
SQLITE_STATUS_MEMORY_USED
);

228 if–
nU£d
 >
mem0
.
Æ¨mThªshﬁd
 - 
nFuŒ
 ){

229 
mem0
.
√¨lyFuŒ
 = 1;

230 
	`sqlôe3MÆlocAœrm
(
nFuŒ
);

232 
mem0
.
√¨lyFuŒ
 = 0;

235 
p
 = 
sqlôe3GlobÆC⁄fig
.
m
.
	`xMÆloc
(
nFuŒ
);

236 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


237 if–
p
==0 && 
mem0
.
Æ¨mThªshﬁd
>0 ){

238 
	`sqlôe3MÆlocAœrm
(
nFuŒ
);

239 
p
 = 
sqlôe3GlobÆC⁄fig
.
m
.
	`xMÆloc
(
nFuŒ
);

242 if–
p
 ){

243 
nFuŒ
 = 
	`sqlôe3MÆlocSize
(
p
);

244 
	`sqlôe3SètusUp
(
SQLITE_STATUS_MEMORY_USED
, 
nFuŒ
);

245 
	`sqlôe3SètusUp
(
SQLITE_STATUS_MALLOC_COUNT
, 1);

247 *
µ
 = 
p
;

248  
nFuŒ
;

249 
	}
}

255 *
	$sqlôe3MÆloc
(
u64
 
n
){

256 *
p
;

257 if–
n
==0 ||Ç>=0x7fffff00 ){

263 
p
 = 0;

264 }if–
sqlôe3GlobÆC⁄fig
.
bMem°©
 ){

265 
	`sqlôe3_muãx_íãr
(
mem0
.
muãx
);

266 
	`mÆlocWôhAœrm
(()
n
, &
p
);

267 
	`sqlôe3_muãx_Àave
(
mem0
.
muãx
);

269 
p
 = 
sqlôe3GlobÆC⁄fig
.
m
.
	`xMÆloc
(()
n
);

271 
	`as£π
–
	`EIGHT_BYTE_ALIGNMENT
(
p
) );

272  
p
;

273 
	}
}

280 *
	$sqlôe3_mÆloc
(
n
){

281 #i‚de‡
SQLITE_OMIT_AUTOINIT


282 if–
	`sqlôe3_öôülize
() )  0;

284  
n
<=0 ? 0 : 
	`sqlôe3MÆloc
(n);

285 
	}
}

286 *
	$sqlôe3_mÆloc64
(
sqlôe3_uöt64
 
n
){

287 #i‚de‡
SQLITE_OMIT_AUTOINIT


288 if–
	`sqlôe3_öôülize
() )  0;

290  
	`sqlôe3MÆloc
(
n
);

291 
	}
}

299 #i‡
SQLITE_THREADSAFE
==0 && !
deföed
(
NDEBUG
)

300 
	gs¸©chAŒocOut
 = 0;

312 *
	$sqlôe3S¸©chMÆloc
(
n
){

313 *
p
;

314 
	`as£π
–
n
>0 );

316 
	`sqlôe3_muãx_íãr
(
mem0
.
muãx
);

317 
	`sqlôe3SètusHighw©î
(
SQLITE_STATUS_SCRATCH_SIZE
, 
n
);

318 if–
mem0
.
nS¸©chFªe
 && 
sqlôe3GlobÆC⁄fig
.
szS¸©ch
>=
n
 ){

319 
p
 = 
mem0
.
pS¸©chFªe
;

320 
mem0
.
pS¸©chFªe
 = mem0.pS¸©chFªe->
pNext
;

321 
mem0
.
nS¸©chFªe
--;

322 
	`sqlôe3SètusUp
(
SQLITE_STATUS_SCRATCH_USED
, 1);

323 
	`sqlôe3_muãx_Àave
(
mem0
.
muãx
);

325 
	`sqlôe3_muãx_Àave
(
mem0
.
muãx
);

326 
p
 = 
	`sqlôe3MÆloc
(
n
);

327 if–
sqlôe3GlobÆC⁄fig
.
bMem°©
 && 
p
 ){

328 
	`sqlôe3_muãx_íãr
(
mem0
.
muãx
);

329 
	`sqlôe3SètusUp
(
SQLITE_STATUS_SCRATCH_OVERFLOW
, 
	`sqlôe3MÆlocSize
(
p
));

330 
	`sqlôe3_muãx_Àave
(
mem0
.
muãx
);

332 
	`sqlôe3MemdebugSëTy≥
(
p
, 
MEMTYPE_SCRATCH
);

334 
	`as£π
–
	`sqlôe3_muãx_nŸhñd
(
mem0
.
muãx
) );

337 #i‡
SQLITE_THREADSAFE
==0 && !
	`deföed
(
NDEBUG
)

343 
	`as£π
–
s¸©chAŒocOut
==0 );

344 if–
p
 ) 
s¸©chAŒocOut
++;

347  
p
;

348 
	}
}

349 
	$sqlôe3S¸©chFªe
(*
p
){

350 if–
p
 ){

352 #i‡
SQLITE_THREADSAFE
==0 && !
	`deföed
(
NDEBUG
)

357 
	`as£π
–
s¸©chAŒocOut
>=1 && scratchAllocOut<=2 );

358 
s¸©chAŒocOut
--;

361 if–
	`SQLITE_WITHIN
(
p
, 
sqlôe3GlobÆC⁄fig
.
pS¸©ch
, 
mem0
.
pS¸©chEnd
) ){

363 
S¸©chFªe¶Ÿ
 *
pSlŸ
;

364 
pSlŸ
 = (
S¸©chFªe¶Ÿ
*)
p
;

365 
	`sqlôe3_muãx_íãr
(
mem0
.
muãx
);

366 
pSlŸ
->
pNext
 = 
mem0
.
pS¸©chFªe
;

367 
mem0
.
pS¸©chFªe
 = 
pSlŸ
;

368 
mem0
.
nS¸©chFªe
++;

369 
	`as£π
–
mem0
.
nS¸©chFªe
 <(
u32
)
sqlôe3GlobÆC⁄fig
.
nS¸©ch
 );

370 
	`sqlôe3SètusDown
(
SQLITE_STATUS_SCRATCH_USED
, 1);

371 
	`sqlôe3_muãx_Àave
(
mem0
.
muãx
);

374 
	`as£π
–
	`sqlôe3MemdebugHasTy≥
(
p
, 
MEMTYPE_SCRATCH
) );

375 
	`as£π
–
	`sqlôe3MemdebugNoTy≥
(
p
, (
u8
)~
MEMTYPE_SCRATCH
) );

376 
	`sqlôe3MemdebugSëTy≥
(
p
, 
MEMTYPE_HEAP
);

377 if–
sqlôe3GlobÆC⁄fig
.
bMem°©
 ){

378 
iSize
 = 
	`sqlôe3MÆlocSize
(
p
);

379 
	`sqlôe3_muãx_íãr
(
mem0
.
muãx
);

380 
	`sqlôe3SètusDown
(
SQLITE_STATUS_SCRATCH_OVERFLOW
, 
iSize
);

381 
	`sqlôe3SètusDown
(
SQLITE_STATUS_MEMORY_USED
, 
iSize
);

382 
	`sqlôe3SètusDown
(
SQLITE_STATUS_MALLOC_COUNT
, 1);

383 
sqlôe3GlobÆC⁄fig
.
m
.
	`xFªe
(
p
);

384 
	`sqlôe3_muãx_Àave
(
mem0
.
muãx
);

386 
sqlôe3GlobÆC⁄fig
.
m
.
	`xFªe
(
p
);

390 
	}
}

395 #i‚de‡
SQLITE_OMIT_LOOKASIDE


396 
	$isLookaside
(
sqlôe3
 *
db
, *
p
){

397  
	`SQLITE_WITHIN
(
p
, 
db
->
lookaside
.
pSèπ
, db->lookaside.
pEnd
);

398 
	}
}

400 
	#isLookaside
(
A
,
B
Ë0

	)

407 
	$sqlôe3MÆlocSize
(*
p
){

408 
	`as£π
–
	`sqlôe3MemdebugHasTy≥
(
p
, 
MEMTYPE_HEAP
) );

409  
sqlôe3GlobÆC⁄fig
.
m
.
	`xSize
(
p
);

410 
	}
}

411 
	$sqlôe3DbMÆlocSize
(
sqlôe3
 *
db
, *
p
){

412 
	`as£π
–
p
!=0 );

413 if–
db
==0 || !
	`isLookaside
(db,
p
) ){

414 #i‡
SQLITE_DEBUG


415 if–
db
==0 ){

416 
	`as£π
–
	`sqlôe3MemdebugNoTy≥
(
p
, (
u8
)~
MEMTYPE_HEAP
) );

417 
	`as£π
–
	`sqlôe3MemdebugHasTy≥
(
p
, 
MEMTYPE_HEAP
) );

419 
	`as£π
–
	`sqlôe3MemdebugHasTy≥
(
p
, (
MEMTYPE_LOOKASIDE
|
MEMTYPE_HEAP
)) );

420 
	`as£π
–
	`sqlôe3MemdebugNoTy≥
(
p
, (
u8
)~(
MEMTYPE_LOOKASIDE
|
MEMTYPE_HEAP
)) );

423  
sqlôe3GlobÆC⁄fig
.
m
.
	`xSize
(
p
);

425 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

426  
db
->
lookaside
.
sz
;

428 
	}
}

429 
sqlôe3_uöt64
 
	$sqlôe3_msize
(*
p
){

430 
	`as£π
–
	`sqlôe3MemdebugNoTy≥
(
p
, (
u8
)~
MEMTYPE_HEAP
) );

431 
	`as£π
–
	`sqlôe3MemdebugHasTy≥
(
p
, 
MEMTYPE_HEAP
) );

432  
p
 ? 
sqlôe3GlobÆC⁄fig
.
m
.
	`xSize
(p) : 0;

433 
	}
}

438 
	$sqlôe3_‰ì
(*
p
){

439 if–
p
==0 ) ;

440 
	`as£π
–
	`sqlôe3MemdebugHasTy≥
(
p
, 
MEMTYPE_HEAP
) );

441 
	`as£π
–
	`sqlôe3MemdebugNoTy≥
(
p
, (
u8
)~
MEMTYPE_HEAP
) );

442 if–
sqlôe3GlobÆC⁄fig
.
bMem°©
 ){

443 
	`sqlôe3_muãx_íãr
(
mem0
.
muãx
);

444 
	`sqlôe3SètusDown
(
SQLITE_STATUS_MEMORY_USED
, 
	`sqlôe3MÆlocSize
(
p
));

445 
	`sqlôe3SètusDown
(
SQLITE_STATUS_MALLOC_COUNT
, 1);

446 
sqlôe3GlobÆC⁄fig
.
m
.
	`xFªe
(
p
);

447 
	`sqlôe3_muãx_Àave
(
mem0
.
muãx
);

449 
sqlôe3GlobÆC⁄fig
.
m
.
	`xFªe
(
p
);

451 
	}
}

457 
SQLITE_NOINLINE
 
	$mósuªAŒoˇti⁄Size
(
sqlôe3
 *
db
, *
p
){

458 *
db
->
≤ByãsFªed
 +
	`sqlôe3DbMÆlocSize
(db,
p
);

459 
	}
}

465 
	$sqlôe3DbFªe
(
sqlôe3
 *
db
, *
p
){

466 
	`as£π
–
db
==0 || 
	`sqlôe3_muãx_hñd
(db->
muãx
) );

467 if–
p
==0 ) ;

468 if–
db
 ){

469 if–
db
->
≤ByãsFªed
 ){

470 
	`mósuªAŒoˇti⁄Size
(
db
, 
p
);

473 if–
	`isLookaside
(
db
, 
p
) ){

474 
LookasideSlŸ
 *
pBuf
 = (LookasideSlŸ*)
p
;

475 #i‡
SQLITE_DEBUG


477 
	`mem£t
(
p
, 0xØ, 
db
->
lookaside
.
sz
);

479 
pBuf
->
pNext
 = 
db
->
lookaside
.
pFªe
;

480 
db
->
lookaside
.
pFªe
 = 
pBuf
;

481 
db
->
lookaside
.
nOut
--;

485 
	`as£π
–
	`sqlôe3MemdebugHasTy≥
(
p
, (
MEMTYPE_LOOKASIDE
|
MEMTYPE_HEAP
)) );

486 
	`as£π
–
	`sqlôe3MemdebugNoTy≥
(
p
, (
u8
)~(
MEMTYPE_LOOKASIDE
|
MEMTYPE_HEAP
)) );

487 
	`as£π
–
db
!=0 || 
	`sqlôe3MemdebugNoTy≥
(
p
, 
MEMTYPE_LOOKASIDE
) );

488 
	`sqlôe3MemdebugSëTy≥
(
p
, 
MEMTYPE_HEAP
);

489 
	`sqlôe3_‰ì
(
p
);

490 
	}
}

495 *
	$sqlôe3RóŒoc
(*
pOld
, 
u64
 
nByãs
){

496 
nOld
, 
nNew
, 
nDiff
;

497 *
pNew
;

498 
	`as£π
–
	`sqlôe3MemdebugHasTy≥
(
pOld
, 
MEMTYPE_HEAP
) );

499 
	`as£π
–
	`sqlôe3MemdebugNoTy≥
(
pOld
, (
u8
)~
MEMTYPE_HEAP
) );

500 if–
pOld
==0 ){

501  
	`sqlôe3MÆloc
(
nByãs
);

503 if–
nByãs
==0 ){

504 
	`sqlôe3_‰ì
(
pOld
);

507 if–
nByãs
>=0x7fffff00 ){

511 
nOld
 = 
	`sqlôe3MÆlocSize
(
pOld
);

515 
nNew
 = 
sqlôe3GlobÆC⁄fig
.
m
.
	`xRoundup
(()
nByãs
);

516 if–
nOld
==
nNew
 ){

517 
pNew
 = 
pOld
;

518 }if–
sqlôe3GlobÆC⁄fig
.
bMem°©
 ){

519 
	`sqlôe3_muãx_íãr
(
mem0
.
muãx
);

520 
	`sqlôe3SètusHighw©î
(
SQLITE_STATUS_MALLOC_SIZE
, ()
nByãs
);

521 
nDiff
 = 
nNew
 - 
nOld
;

522 if–
	`sqlôe3SètusVÆue
(
SQLITE_STATUS_MEMORY_USED
) >=

523 
mem0
.
Æ¨mThªshﬁd
-
nDiff
 ){

524 
	`sqlôe3MÆlocAœrm
(
nDiff
);

526 
pNew
 = 
sqlôe3GlobÆC⁄fig
.
m
.
	`xRóŒoc
(
pOld
, 
nNew
);

527 if–
pNew
==0 && 
mem0
.
Æ¨mThªshﬁd
>0 ){

528 
	`sqlôe3MÆlocAœrm
(()
nByãs
);

529 
pNew
 = 
sqlôe3GlobÆC⁄fig
.
m
.
	`xRóŒoc
(
pOld
, 
nNew
);

531 if–
pNew
 ){

532 
nNew
 = 
	`sqlôe3MÆlocSize
(
pNew
);

533 
	`sqlôe3SètusUp
(
SQLITE_STATUS_MEMORY_USED
, 
nNew
-
nOld
);

535 
	`sqlôe3_muãx_Àave
(
mem0
.
muãx
);

537 
pNew
 = 
sqlôe3GlobÆC⁄fig
.
m
.
	`xRóŒoc
(
pOld
, 
nNew
);

539 
	`as£π
–
	`EIGHT_BYTE_ALIGNMENT
(
pNew
) );

540  
pNew
;

541 
	}
}

547 *
	$sqlôe3_ªÆloc
(*
pOld
, 
n
){

548 #i‚de‡
SQLITE_OMIT_AUTOINIT


549 if–
	`sqlôe3_öôülize
() )  0;

551 if–
n
<0 )Ç = 0;

552  
	`sqlôe3RóŒoc
(
pOld
, 
n
);

553 
	}
}

554 *
	$sqlôe3_ªÆloc64
(*
pOld
, 
sqlôe3_uöt64
 
n
){

555 #i‚de‡
SQLITE_OMIT_AUTOINIT


556 if–
	`sqlôe3_öôülize
() )  0;

558  
	`sqlôe3RóŒoc
(
pOld
, 
n
);

559 
	}
}

565 *
	$sqlôe3MÆlocZîo
(
u64
 
n
){

566 *
p
 = 
	`sqlôe3MÆloc
(
n
);

567 if–
p
 ){

568 
	`mem£t
(
p
, 0, (
size_t
)
n
);

570  
p
;

571 
	}
}

577 *
	$sqlôe3DbMÆlocZîo
(
sqlôe3
 *
db
, 
u64
 
n
){

578 *
p
;

579 
	`ã°ˇ£
–
db
==0 );

580 
p
 = 
	`sqlôe3DbMÆlocRaw
(
db
, 
n
);

581 if–
p
 ) 
	`mem£t
’, 0, (
size_t
)
n
);

582  
p
;

583 
	}
}

589 
SQLITE_NOINLINE
 *
	$dbMÆlocRawFöish
(
sqlôe3
 *
db
, 
u64
 
n
){

590 *
p
;

591 
	`as£π
–
db
!=0 );

592 
p
 = 
	`sqlôe3MÆloc
(
n
);

593 if–!
p
 ) 
	`sqlôe3OomFau…
(
db
);

594 
	`sqlôe3MemdebugSëTy≥
(
p
,

595 (
db
->
lookaside
.
bDißbÀ
==0Ë? 
MEMTYPE_LOOKASIDE
 : 
MEMTYPE_HEAP
);

596  
p
;

597 
	}
}

621 *
	$sqlôe3DbMÆlocRaw
(
sqlôe3
 *
db
, 
u64
 
n
){

622 *
p
;

623 if–
db
 )  
	`sqlôe3DbMÆlocRawNN
(db, 
n
);

624 
p
 = 
	`sqlôe3MÆloc
(
n
);

625 
	`sqlôe3MemdebugSëTy≥
(
p
, 
MEMTYPE_HEAP
);

626  
p
;

627 
	}
}

628 *
	$sqlôe3DbMÆlocRawNN
(
sqlôe3
 *
db
, 
u64
 
n
){

629 #i‚de‡
SQLITE_OMIT_LOOKASIDE


630 
LookasideSlŸ
 *
pBuf
;

631 
	`as£π
–
db
!=0 );

632 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

633 
	`as£π
–
db
->
≤ByãsFªed
==0 );

634 if–
db
->
lookaside
.
bDißbÀ
==0 ){

635 
	`as£π
–
db
->
mÆlocFaûed
==0 );

636 if–
n
>
db
->
lookaside
.
sz
 ){

637 
db
->
lookaside
.
™Sèt
[1]++;

638 }if–(
pBuf
 = 
db
->
lookaside
.
pFªe
)==0 ){

639 
db
->
lookaside
.
™Sèt
[2]++;

641 
db
->
lookaside
.
pFªe
 = 
pBuf
->
pNext
;

642 
db
->
lookaside
.
nOut
++;

643 
db
->
lookaside
.
™Sèt
[0]++;

644 if–
db
->
lookaside
.
nOut
>db->lookaside.
mxOut
 ){

645 
db
->
lookaside
.
mxOut
 = db->lookaside.
nOut
;

647  (*)
pBuf
;

649 }if–
db
->
mÆlocFaûed
 ){

653 
	`as£π
–
db
!=0 );

654 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

655 
	`as£π
–
db
->
≤ByãsFªed
==0 );

656 if–
db
->
mÆlocFaûed
 ){

660  
	`dbMÆlocRawFöish
(
db
, 
n
);

661 
	}
}

664 
SQLITE_NOINLINE
 *
dbRóŒocFöish
(
sqlôe3
 *
db
, *
p
, 
u64
 
n
);

670 *
	$sqlôe3DbRóŒoc
(
sqlôe3
 *
db
, *
p
, 
u64
 
n
){

671 
	`as£π
–
db
!=0 );

672 if–
p
==0 )  
	`sqlôe3DbMÆlocRawNN
(
db
, 
n
);

673 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

674 if–
	`isLookaside
(
db
,
p
Ë&& 
n
<=db->
lookaside
.
sz
 ) Ö;

675  
	`dbRóŒocFöish
(
db
, 
p
, 
n
);

676 
	}
}

677 
SQLITE_NOINLINE
 *
	$dbRóŒocFöish
(
sqlôe3
 *
db
, *
p
, 
u64
 
n
){

678 *
pNew
 = 0;

679 
	`as£π
–
db
!=0 );

680 
	`as£π
–
p
!=0 );

681 if–
db
->
mÆlocFaûed
==0 ){

682 if–
	`isLookaside
(
db
, 
p
) ){

683 
pNew
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, 
n
);

684 if–
pNew
 ){

685 
	`mem˝y
(
pNew
, 
p
, 
db
->
lookaside
.
sz
);

686 
	`sqlôe3DbFªe
(
db
, 
p
);

689 
	`as£π
–
	`sqlôe3MemdebugHasTy≥
(
p
, (
MEMTYPE_LOOKASIDE
|
MEMTYPE_HEAP
)) );

690 
	`as£π
–
	`sqlôe3MemdebugNoTy≥
(
p
, (
u8
)~(
MEMTYPE_LOOKASIDE
|
MEMTYPE_HEAP
)) );

691 
	`sqlôe3MemdebugSëTy≥
(
p
, 
MEMTYPE_HEAP
);

692 
pNew
 = 
	`sqlôe3_ªÆloc64
(
p
, 
n
);

693 if–!
pNew
 ){

694 
	`sqlôe3OomFau…
(
db
);

696 
	`sqlôe3MemdebugSëTy≥
(
pNew
,

697 (
db
->
lookaside
.
bDißbÀ
==0 ? 
MEMTYPE_LOOKASIDE
 : 
MEMTYPE_HEAP
));

700  
pNew
;

701 
	}
}

707 *
	$sqlôe3DbRóŒocOrFªe
(
sqlôe3
 *
db
, *
p
, 
u64
 
n
){

708 *
pNew
;

709 
pNew
 = 
	`sqlôe3DbRóŒoc
(
db
, 
p
, 
n
);

710 if–!
pNew
 ){

711 
	`sqlôe3DbFªe
(
db
, 
p
);

713  
pNew
;

714 
	}
}

723 *
	$sqlôe3DbSåDup
(
sqlôe3
 *
db
, c⁄° *
z
){

724 *
zNew
;

725 
size_t
 
n
;

726 if–
z
==0 ){

729 
n
 = 
	`sqlôe3SåÀn30
(
z
) + 1;

730 
	`as£π
–(
n
&0x7fffffff)==n );

731 
zNew
 = 
	`sqlôe3DbMÆlocRaw
(
db
, ()
n
);

732 if–
zNew
 ){

733 
	`mem˝y
(
zNew
, 
z
, 
n
);

735  
zNew
;

736 
	}
}

737 *
	$sqlôe3DbSåNDup
(
sqlôe3
 *
db
, c⁄° *
z
, 
u64
 
n
){

738 *
zNew
;

739 
	`as£π
–
db
!=0 );

740 if–
z
==0 ){

743 
	`as£π
–(
n
&0x7fffffff)==n );

744 
zNew
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, 
n
+1);

745 if–
zNew
 ){

746 
	`mem˝y
(
zNew
, 
z
, (
size_t
)
n
);

747 
zNew
[
n
] = 0;

749  
zNew
;

750 
	}
}

755 
	$sqlôe3SëSåög
(**
pz
, 
sqlôe3
 *
db
, c⁄° *
zNew
){

756 
	`sqlôe3DbFªe
(
db
, *
pz
);

757 *
pz
 = 
	`sqlôe3DbSåDup
(
db
, 
zNew
);

758 
	}
}

766 
	$sqlôe3OomFau…
(
sqlôe3
 *
db
){

767 if–
db
->
mÆlocFaûed
==0 && db->
bBíignMÆloc
==0 ){

768 
db
->
mÆlocFaûed
 = 1;

769 if–
db
->
nVdbeExec
>0 ){

770 
db
->
u1
.
isI¡îru±ed
 = 1;

772 
db
->
lookaside
.
bDißbÀ
++;

774 
	}
}

783 
	$sqlôe3OomCÀ¨
(
sqlôe3
 *
db
){

784 if–
db
->
mÆlocFaûed
 && db->
nVdbeExec
==0 ){

785 
db
->
mÆlocFaûed
 = 0;

786 
db
->
u1
.
isI¡îru±ed
 = 0;

787 
	`as£π
–
db
->
lookaside
.
bDißbÀ
>0 );

788 
db
->
lookaside
.
bDißbÀ
--;

790 
	}
}

795 
SQLITE_NOINLINE
 
	$≠iOomEº‹
(
sqlôe3
 *
db
){

796 
	`sqlôe3OomCÀ¨
(
db
);

797 
	`sqlôe3Eº‹
(
db
, 
SQLITE_NOMEM
);

798  
SQLITE_NOMEM_BKPT
;

799 
	}
}

813 
	$sqlôe3ApiExô
(
sqlôe3
* 
db
, 
rc
){

818 
	`as£π
–
db
!=0 );

819 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

820 if–
db
->
mÆlocFaûed
 || 
rc
==
SQLITE_IOERR_NOMEM
 ){

821  
	`≠iOomEº‹
(
db
);

823  
rc
 & 
db
->
îrMask
;

824 
	}
}

	@mem0.c

19 
	~"sqlôeI¡.h
"

26 #ifde‡
SQLITE_ZERO_MALLOC


31 *
	$sqlôe3MemMÆloc
(
nByã
){  0; 
	}
}

32 
	$sqlôe3MemFªe
(*
pPri‹
){ ; 
	}
}

33 *
	$sqlôe3MemRóŒoc
(*
pPri‹
, 
nByã
){  0; 
	}
}

34 
	$sqlôe3MemSize
(*
pPri‹
){  0; 
	}
}

35 
	$sqlôe3MemRoundup
(
n
){ Ç; 
	}
}

36 
	$sqlôe3MemInô
(*
NŸU£d
){  
SQLITE_OK
; 
	}
}

37 
	$sqlôe3MemShutdown
(*
NŸU£d
){ ; 
	}
}

45 
	$sqlôe3MemSëDeÁu…
(){

46 c⁄° 
sqlôe3_mem_mëhods
 
deÁu…Mëhods
 = {

47 
sqlôe3MemMÆloc
,

48 
sqlôe3MemFªe
,

49 
sqlôe3MemRóŒoc
,

50 
sqlôe3MemSize
,

51 
sqlôe3MemRoundup
,

52 
sqlôe3MemInô
,

53 
sqlôe3MemShutdown
,

56 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_MALLOC
, &
deÁu…Mëhods
);

57 
	}
}

	@mem1.c

44 
	~"sqlôeI¡.h
"

51 #ifde‡
SQLITE_SYSTEM_MALLOC


52 #i‡
deföed
(
__APPLE__
Ë&& !deföed(
SQLITE_WITHOUT_ZONEMALLOC
)

58 
	~<sys/sys˘l.h
>

59 
	~<mÆloc/mÆloc.h
>

60 
	~<libkîn/OSAtomic.h
>

61 
mÆloc_z⁄e_t
* 
	g_sqlôeZ⁄e_
;

62 
	#SQLITE_MALLOC
(
x
Ë
	`mÆloc_z⁄e_mÆloc
(
_sqlôeZ⁄e_
, (x))

	)

63 
	#SQLITE_FREE
(
x
Ë
	`mÆloc_z⁄e_‰ì
(
_sqlôeZ⁄e_
, (x));

	)

64 
	#SQLITE_REALLOC
(
x
,
y
Ë
	`mÆloc_z⁄e_ªÆloc
(
_sqlôeZ⁄e_
, (x), (y))

	)

65 
	#SQLITE_MALLOCSIZE
(
x
) \

66 (
_sqlôeZ⁄e_
 ? _sqlôeZ⁄e_->
	`size
(_sqlôeZ⁄e_,
x
Ë: 
	`mÆloc_size
(x))

	)

74 
	#SQLITE_MALLOC
(
x
Ë
	`mÆloc
(x)

	)

75 
	#SQLITE_FREE
(
x
Ë
	`‰ì
(x)

	)

76 
	#SQLITE_REALLOC
(
x
,
y
Ë
	`ªÆloc
((x),(y))

	)

82 #i‡
HAVE_MALLOC_H
 && 
HAVE_MALLOC_USABLE_SIZE


83 
	#SQLITE_USE_MALLOC_H
 1

	)

84 
	#SQLITE_USE_MALLOC_USABLE_SIZE
 1

	)

91 #ñi‡
deföed
(
_MSC_VER
Ë&& !deföed(
SQLITE_WITHOUT_MSIZE
)

92 
	#SQLITE_USE_MALLOC_H


	)

93 
	#SQLITE_USE_MSIZE


	)

103 #i‡
deföed
(
SQLITE_USE_MALLOC_H
)

104 
	~<mÆloc.h
>

105 #i‡
deföed
(
SQLITE_USE_MALLOC_USABLE_SIZE
)

106 #i‡!
deföed
(
SQLITE_MALLOCSIZE
)

107 
	#SQLITE_MALLOCSIZE
(
x
Ë
	`mÆloc_ußbÀ_size
(x)

	)

109 #ñi‡
deföed
(
SQLITE_USE_MSIZE
)

110 #i‡!
deföed
(
SQLITE_MALLOCSIZE
)

111 
	#SQLITE_MALLOCSIZE
 
_msize


	)

126 *
	$sqlôe3MemMÆloc
(
nByã
){

127 #ifde‡
SQLITE_MALLOCSIZE


128 *
p
 = 
	`SQLITE_MALLOC
–
nByã
 );

129 if–
p
==0 ){

130 
	`ã°ˇ£
–
sqlôe3GlobÆC⁄fig
.
xLog
!=0 );

131 
	`sqlôe3_log
(
SQLITE_NOMEM
, "ÁûedÅÿÆloˇã %u byã†o‡mem‹y", 
nByã
);

133  
p
;

135 
sqlôe3_öt64
 *
p
;

136 
	`as£π
–
nByã
>0 );

137 
nByã
 = 
	`ROUND8
(nByte);

138 
p
 = 
	`SQLITE_MALLOC
–
nByã
+8 );

139 if–
p
 ){

140 
p
[0] = 
nByã
;

141 
p
++;

143 
	`ã°ˇ£
–
sqlôe3GlobÆC⁄fig
.
xLog
!=0 );

144 
	`sqlôe3_log
(
SQLITE_NOMEM
, "ÁûedÅÿÆloˇã %u byã†o‡mem‹y", 
nByã
);

146  (*)
p
;

148 
	}
}

158 
	$sqlôe3MemFªe
(*
pPri‹
){

159 #ifde‡
SQLITE_MALLOCSIZE


160 
	`SQLITE_FREE
(
pPri‹
);

162 
sqlôe3_öt64
 *
p
 = (sqlôe3_öt64*)
pPri‹
;

163 
	`as£π
–
pPri‹
!=0 );

164 
p
--;

165 
	`SQLITE_FREE
(
p
);

167 
	}
}

173 
	$sqlôe3MemSize
(*
pPri‹
){

174 #ifde‡
SQLITE_MALLOCSIZE


175 
	`as£π
–
pPri‹
!=0 );

176  ()
	`SQLITE_MALLOCSIZE
(
pPri‹
);

178 
sqlôe3_öt64
 *
p
;

179 
	`as£π
–
pPri‹
!=0 );

180 
p
 = (
sqlôe3_öt64
*)
pPri‹
;

181 
p
--;

182  ()
p
[0];

184 
	}
}

196 *
	$sqlôe3MemRóŒoc
(*
pPri‹
, 
nByã
){

197 #ifde‡
SQLITE_MALLOCSIZE


198 *
p
 = 
	`SQLITE_REALLOC
(
pPri‹
, 
nByã
);

199 if–
p
==0 ){

200 
	`ã°ˇ£
–
sqlôe3GlobÆC⁄fig
.
xLog
!=0 );

201 
	`sqlôe3_log
(
SQLITE_NOMEM
,

203 
	`SQLITE_MALLOCSIZE
(
pPri‹
), 
nByã
);

205  
p
;

207 
sqlôe3_öt64
 *
p
 = (sqlôe3_öt64*)
pPri‹
;

208 
	`as£π
–
pPri‹
!=0 && 
nByã
>0 );

209 
	`as£π
–
nByã
==
	`ROUND8
(nByte) );

210 
p
--;

211 
p
 = 
	`SQLITE_REALLOC
’, 
nByã
+8 );

212 if–
p
 ){

213 
p
[0] = 
nByã
;

214 
p
++;

216 
	`ã°ˇ£
–
sqlôe3GlobÆC⁄fig
.
xLog
!=0 );

217 
	`sqlôe3_log
(
SQLITE_NOMEM
,

219 
	`sqlôe3MemSize
(
pPri‹
), 
nByã
);

221  (*)
p
;

223 
	}
}

228 
	$sqlôe3MemRoundup
(
n
){

229  
	`ROUND8
(
n
);

230 
	}
}

235 
	$sqlôe3MemInô
(*
NŸU£d
){

236 #i‡
	`deföed
(
__APPLE__
Ë&& !deföed(
SQLITE_WITHOUT_ZONEMALLOC
)

237 
˝uCou¡
;

238 
size_t
 
Àn
;

239 if–
_sqlôeZ⁄e_
 ){

240  
SQLITE_OK
;

242 
Àn
 = (
˝uCou¡
);

244 
	`sys˘lby«me
("hw.n˝u", &
˝uCou¡
, &
Àn
, 
NULL
, 0);

245 if–
˝uCou¡
>1 ){

247 
_sqlôeZ⁄e_
 = 
	`mÆloc_deÁu…_z⁄e
();

251 
boﬁ
 
suc˚ss
;

252 
mÆloc_z⁄e_t
* 
√wz⁄e
 = 
	`mÆloc_¸óã_z⁄e
(4096, 0);

253 
	`mÆloc_£t_z⁄e_«me
(
√wz⁄e
, "Sqlite_Heap");

255 
suc˚ss
 = 
	`OSAtomicCom∑ªAndSw≠PåB¨rõr
(
NULL
, 
√wz⁄e
,

256 (* vﬁ©ûê*)&
_sqlôeZ⁄e_
);

257 }!
_sqlôeZ⁄e_
);

258 if–!
suc˚ss
 ){

260 
	`mÆloc_de°roy_z⁄e
(
√wz⁄e
);

264 
	`UNUSED_PARAMETER
(
NŸU£d
);

265  
SQLITE_OK
;

266 
	}
}

271 
	$sqlôe3MemShutdown
(*
NŸU£d
){

272 
	`UNUSED_PARAMETER
(
NŸU£d
);

274 
	}
}

282 
	$sqlôe3MemSëDeÁu…
(){

283 c⁄° 
sqlôe3_mem_mëhods
 
deÁu…Mëhods
 = {

284 
sqlôe3MemMÆloc
,

285 
sqlôe3MemFªe
,

286 
sqlôe3MemRóŒoc
,

287 
sqlôe3MemSize
,

288 
sqlôe3MemRoundup
,

289 
sqlôe3MemInô
,

290 
sqlôe3MemShutdown
,

293 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_MALLOC
, &
deÁu…Mëhods
);

294 
	}
}

	@mem2.c

22 
	~"sqlôeI¡.h
"

28 #ifde‡
SQLITE_MEMDEBUG


33 #ifde‡
__GLIBC__


34 
backåa˚
(**,);

35 
backåa˚_symbﬁs_fd
(*const*,,);

37 
	#backåa˚
(
A
,
B
Ë1

	)

38 
	#backåa˚_symbﬁs_fd
(
A
,
B
,
C
)

	)

40 
	~<°dio.h
>

55 
	sMemBlockHdr
 {

56 
i64
 
	miSize
;

57 
MemBlockHdr
 *
	mpNext
, *
	mpPªv
;

58 
	mnBackåa˚
;

59 
	mnBackåa˚SlŸs
;

60 
u8
 
	mnTôÀ
;

61 
u8
 
	meTy≥
;

62 
	miF‹eGu¨d
;

68 
	#FOREGUARD
 0x80F5E153

	)

69 
	#REARGUARD
 0xE4676B53

	)

74 
	#NCSIZE
 1000

	)

87 
sqlôe3_muãx
 *
	mmuãx
;

92 
MemBlockHdr
 *
	mpFú°
;

93 
MemBlockHdr
 *
	mpLa°
;

98 
	mnBackåa˚
;

99 (*
	mxBackåa˚
)(, , **);

104 
	mnTôÀ
;

105 
	mzTôÀ
[100];

111 
	mdißŒow
;

119 
	mnAŒoc
[
NCSIZE
];

120 
	mnCuºít
[
NCSIZE
];

121 
	mmxCuºít
[
NCSIZE
];

123 } 
	gmem
;

129 
	$adju°Sèts
(
iSize
, 
ö¸emít
){

130 
i
 = 
	`ROUND8
(
iSize
)/8;

131 if–
i
>
NCSIZE
-1 ){

132 
i
 = 
NCSIZE
 - 1;

134 if–
ö¸emít
>0 ){

135 
mem
.
nAŒoc
[
i
]++;

136 
mem
.
nCuºít
[
i
]++;

137 if–
mem
.
nCuºít
[
i
]>mem.
mxCuºít
[i] ){

138 
mem
.
mxCuºít
[
i
] = mem.
nCuºít
[i];

141 
mem
.
nCuºít
[
i
]--;

142 
	`as£π
–
mem
.
nCuºít
[
i
]>=0 );

144 
	}
}

152 
MemBlockHdr
 *
	$sqlôe3MemsysGëHódî
(*
pAŒoˇti⁄
){

153 
MemBlockHdr
 *
p
;

154 *
pI¡
;

155 
u8
 *
pU8
;

156 
nRe£rve
;

158 
p
 = (
MemBlockHdr
*)
pAŒoˇti⁄
;

159 
p
--;

160 
	`as£π
–
p
->
iF‹eGu¨d
==()
FOREGUARD
 );

161 
nRe£rve
 = 
	`ROUND8
(
p
->
iSize
);

162 
pI¡
 = (*)
pAŒoˇti⁄
;

163 
pU8
 = (
u8
*)
pAŒoˇti⁄
;

164 
	`as£π
–
pI¡
[
nRe£rve
/()]==()
REARGUARD
 );

169  
nRe£rve
-- > 
p
->
iSize
 ) 
	`as£π
–
pU8
[nReserve]==0x65 );

170  
p
;

171 
	}
}

176 
	$sqlôe3MemSize
(*
p
){

177 
MemBlockHdr
 *
pHdr
;

178 if–!
p
 ){

181 
pHdr
 = 
	`sqlôe3MemsysGëHódî
(
p
);

182  ()
pHdr
->
iSize
;

183 
	}
}

188 
	$sqlôe3MemInô
(*
NŸU£d
){

189 
	`UNUSED_PARAMETER
(
NŸU£d
);

190 
	`as£π
–((
MemBlockHdr
)&7) == 0 );

191 if–!
sqlôe3GlobÆC⁄fig
.
bMem°©
 ){

194 
mem
.
muãx
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MEM
);

196  
SQLITE_OK
;

197 
	}
}

202 
	$sqlôe3MemShutdown
(*
NŸU£d
){

203 
	`UNUSED_PARAMETER
(
NŸU£d
);

204 
mem
.
muãx
 = 0;

205 
	}
}

210 
	$sqlôe3MemRoundup
(
n
){

211  
	`ROUND8
(
n
);

212 
	}
}

219 
	$øndomFûl
(*
pBuf
, 
nByã
){

220 
x
, 
y
, 
r
;

221 
x
 = 
	`SQLITE_PTR_TO_INT
(
pBuf
);

222 
y
 = 
nByã
 | 1;

223  
nByã
 >= 4 ){

224 
x
 = (x>>1) ^ (-()(x&1) & 0xd0000001);

225 
y
 = y*1103515245 + 12345;

226 
r
 = 
x
 ^ 
y
;

227 *(*)
pBuf
 = 
r
;

228 
pBuf
 += 4;

229 
nByã
 -= 4;

231  
nByã
-- > 0 ){

232 
x
 = (x>>1) ^ (-()(x&1) & 0xd0000001);

233 
y
 = y*1103515245 + 12345;

234 
r
 = 
x
 ^ 
y
;

235 *(
pBuf
++Ë
r
 & 0xff;

237 
	}
}

242 *
	$sqlôe3MemMÆloc
(
nByã
){

243 
MemBlockHdr
 *
pHdr
;

244 **
pBt
;

245 *
z
;

246 *
pI¡
;

247 *
p
 = 0;

248 
tŸÆSize
;

249 
nRe£rve
;

250 
	`sqlôe3_muãx_íãr
(
mem
.
muãx
);

251 
	`as£π
–
mem
.
dißŒow
==0 );

252 
nRe£rve
 = 
	`ROUND8
(
nByã
);

253 
tŸÆSize
 = 
nRe£rve
 + (*
pHdr
) + () +

254 
mem
.
nBackåa˚
*(*Ë+ mem.
nTôÀ
;

255 
p
 = 
	`mÆloc
(
tŸÆSize
);

256 if–
p
 ){

257 
z
 = 
p
;

258 
pBt
 = (**)&
z
[
mem
.
nTôÀ
];

259 
pHdr
 = (
MemBlockHdr
*)&
pBt
[
mem
.
nBackåa˚
];

260 
pHdr
->
pNext
 = 0;

261 
pHdr
->
pPªv
 = 
mem
.
pLa°
;

262 if–
mem
.
pLa°
 ){

263 
mem
.
pLa°
->
pNext
 = 
pHdr
;

265 
mem
.
pFú°
 = 
pHdr
;

267 
mem
.
pLa°
 = 
pHdr
;

268 
pHdr
->
iF‹eGu¨d
 = 
FOREGUARD
;

269 
pHdr
->
eTy≥
 = 
MEMTYPE_HEAP
;

270 
pHdr
->
nBackåa˚SlŸs
 = 
mem
.
nBackåa˚
;

271 
pHdr
->
nTôÀ
 = 
mem
.nTitle;

272 if–
mem
.
nBackåa˚
 ){

273 *
aAddr
[40];

274 
pHdr
->
nBackåa˚
 = 
	`backåa˚
(
aAddr
, 
mem
.nBacktrace+1)-1;

275 
	`mem˝y
(
pBt
, &
aAddr
[1], 
pHdr
->
nBackåa˚
*(*));

276 
	`as£π
(
pBt
[0]);

277 if–
mem
.
xBackåa˚
 ){

278 
mem
.
	`xBackåa˚
(
nByã
, 
pHdr
->
nBackåa˚
-1, &
aAddr
[1]);

281 
pHdr
->
nBackåa˚
 = 0;

283 if–
mem
.
nTôÀ
 ){

284 
	`mem˝y
(
z
, 
mem
.
zTôÀ
, mem.
nTôÀ
);

286 
pHdr
->
iSize
 = 
nByã
;

287 
	`adju°Sèts
(
nByã
, +1);

288 
pI¡
 = (*)&
pHdr
[1];

289 
pI¡
[
nRe£rve
/()] = 
REARGUARD
;

290 
	`øndomFûl
((*)
pI¡
, 
nByã
);

291 
	`mem£t
(((*)
pI¡
)+
nByã
, 0x65, 
nRe£rve
-nByte);

292 
p
 = (*)
pI¡
;

294 
	`sqlôe3_muãx_Àave
(
mem
.
muãx
);

295  
p
;

296 
	}
}

301 
	$sqlôe3MemFªe
(*
pPri‹
){

302 
MemBlockHdr
 *
pHdr
;

303 **
pBt
;

304 *
z
;

305 
	`as£π
–
sqlôe3GlobÆC⁄fig
.
bMem°©
 || sqlôe3GlobÆC⁄fig.
bC‹eMuãx
==0

306 || 
mem
.
muãx
!=0 );

307 
pHdr
 = 
	`sqlôe3MemsysGëHódî
(
pPri‹
);

308 
pBt
 = (**)
pHdr
;

309 
pBt
 -
pHdr
->
nBackåa˚SlŸs
;

310 
	`sqlôe3_muãx_íãr
(
mem
.
muãx
);

311 if–
pHdr
->
pPªv
 ){

312 
	`as£π
–
pHdr
->
pPªv
->
pNext
==pHdr );

313 
pHdr
->
pPªv
->
pNext
 =ÖHdr->pNext;

315 
	`as£π
–
mem
.
pFú°
==
pHdr
 );

316 
mem
.
pFú°
 = 
pHdr
->
pNext
;

318 if–
pHdr
->
pNext
 ){

319 
	`as£π
–
pHdr
->
pNext
->
pPªv
==pHdr );

320 
pHdr
->
pNext
->
pPªv
 =ÖHdr->pPrev;

322 
	`as£π
–
mem
.
pLa°
==
pHdr
 );

323 
mem
.
pLa°
 = 
pHdr
->
pPªv
;

325 
z
 = (*)
pBt
;

326 
z
 -
pHdr
->
nTôÀ
;

327 
	`adju°Sèts
(()
pHdr
->
iSize
, -1);

328 
	`øndomFûl
(
z
, (*)*
pHdr
->
nBackåa˚SlŸs
 + (*pHdr) +

329 ()
pHdr
->
iSize
 + (Ë+ÖHdr->
nTôÀ
);

330 
	`‰ì
(
z
);

331 
	`sqlôe3_muãx_Àave
(
mem
.
muãx
);

332 
	}
}

343 *
	$sqlôe3MemRóŒoc
(*
pPri‹
, 
nByã
){

344 
MemBlockHdr
 *
pOldHdr
;

345 *
pNew
;

346 
	`as£π
–
mem
.
dißŒow
==0 );

347 
	`as£π
–(
nByã
 & 7)==0 );

348 
pOldHdr
 = 
	`sqlôe3MemsysGëHódî
(
pPri‹
);

349 
pNew
 = 
	`sqlôe3MemMÆloc
(
nByã
);

350 if–
pNew
 ){

351 
	`mem˝y
(
pNew
, 
pPri‹
, ()(
nByã
<
pOldHdr
->
iSize
 ?ÇByte :ÖOldHdr->iSize));

352 if–
nByã
>
pOldHdr
->
iSize
 ){

353 
	`øndomFûl
(&((*)
pNew
)[
pOldHdr
->
iSize
], 
nByã
 - ()pOldHdr->iSize);

355 
	`sqlôe3MemFªe
(
pPri‹
);

357  
pNew
;

358 
	}
}

364 
	$sqlôe3MemSëDeÁu…
(){

365 c⁄° 
sqlôe3_mem_mëhods
 
deÁu…Mëhods
 = {

366 
sqlôe3MemMÆloc
,

367 
sqlôe3MemFªe
,

368 
sqlôe3MemRóŒoc
,

369 
sqlôe3MemSize
,

370 
sqlôe3MemRoundup
,

371 
sqlôe3MemInô
,

372 
sqlôe3MemShutdown
,

375 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_MALLOC
, &
deÁu…Mëhods
);

376 
	}
}

381 
	$sqlôe3MemdebugSëTy≥
(*
p
, 
u8
 
eTy≥
){

382 if–
p
 && 
sqlôe3GlobÆC⁄fig
.
m
.
xMÆloc
==
sqlôe3MemMÆloc
 ){

383 
MemBlockHdr
 *
pHdr
;

384 
pHdr
 = 
	`sqlôe3MemsysGëHódî
(
p
);

385 
	`as£π
–
pHdr
->
iF‹eGu¨d
==
FOREGUARD
 );

386 
pHdr
->
eTy≥
 =ÉType;

388 
	}
}

399 
	$sqlôe3MemdebugHasTy≥
(*
p
, 
u8
 
eTy≥
){

400 
rc
 = 1;

401 if–
p
 && 
sqlôe3GlobÆC⁄fig
.
m
.
xMÆloc
==
sqlôe3MemMÆloc
 ){

402 
MemBlockHdr
 *
pHdr
;

403 
pHdr
 = 
	`sqlôe3MemsysGëHódî
(
p
);

404 
	`as£π
–
pHdr
->
iF‹eGu¨d
==
FOREGUARD
 );

405 if–(
pHdr
->
eTy≥
&eType)==0 ){

406 
rc
 = 0;

409  
rc
;

410 
	}
}

421 
	$sqlôe3MemdebugNoTy≥
(*
p
, 
u8
 
eTy≥
){

422 
rc
 = 1;

423 if–
p
 && 
sqlôe3GlobÆC⁄fig
.
m
.
xMÆloc
==
sqlôe3MemMÆloc
 ){

424 
MemBlockHdr
 *
pHdr
;

425 
pHdr
 = 
	`sqlôe3MemsysGëHódî
(
p
);

426 
	`as£π
–
pHdr
->
iF‹eGu¨d
==
FOREGUARD
 );

427 if–(
pHdr
->
eTy≥
&eType)!=0 ){

428 
rc
 = 0;

431  
rc
;

432 
	}
}

439 
	$sqlôe3MemdebugBackåa˚
(
dïth
){

440 if–
dïth
<0 ){ depth = 0; }

441 if–
dïth
>20 ){ depth = 20; }

442 
dïth
 = (depth+1)&0xfe;

443 
mem
.
nBackåa˚
 = 
dïth
;

444 
	}
}

446 
sqlôe3MemdebugBackåa˚CÆlback
((*
xBackåa˚
)(, , **)){

447 
mem
.
xBackåa˚
 = xBacktrace;

448 
	}
}

453 
	$sqlôe3MemdebugSëtôÀ
(c⁄° *
zTôÀ
){

454 
n
 = 
	`sqlôe3SåÀn30
(
zTôÀ
) + 1;

455 
	`sqlôe3_muãx_íãr
(
mem
.
muãx
);

456 if–
n
>=(
mem
.
zTôÀ
) )Ç = (mem.zTitle)-1;

457 
	`mem˝y
(
mem
.
zTôÀ
, zTôÀ, 
n
);

458 
mem
.
zTôÀ
[
n
] = 0;

459 
mem
.
nTôÀ
 = 
	`ROUND8
(
n
);

460 
	`sqlôe3_muãx_Àave
(
mem
.
muãx
);

461 
	}
}

463 
	$sqlôe3MemdebugSync
(){

464 
MemBlockHdr
 *
pHdr
;

465 
pHdr
=
mem
.
pFú°
;ÖHdr;ÖHdrıHdr->
pNext
){

466 **
pBt
 = (**)
pHdr
;

467 
pBt
 -
pHdr
->
nBackåa˚SlŸs
;

468 
mem
.
	`xBackåa˚
(()
pHdr
->
iSize
,ÖHdr->
nBackåa˚
-1, &
pBt
[1]);

470 
	}
}

476 
	$sqlôe3MemdebugDump
(c⁄° *
zFûíame
){

477 
FILE
 *
out
;

478 
MemBlockHdr
 *
pHdr
;

479 **
pBt
;

480 
i
;

481 
out
 = 
	`f›í
(
zFûíame
, "w");

482 if–
out
==0 ){

483 
	`Ârötf
(
°dîr
, "** UnableÅo output memory debug outputÜog: %s **\n",

484 
zFûíame
);

487 
pHdr
=
mem
.
pFú°
;ÖHdr;ÖHdrıHdr->
pNext
){

488 *
z
 = (*)
pHdr
;

489 
z
 -
pHdr
->
nBackåa˚SlŸs
*(*Ë+ÖHdr->
nTôÀ
;

490 
	`Ârötf
(
out
, "**** %lld bytesát %p from %s ****\n",

491 
pHdr
->
iSize
, &pHdr[1],ÖHdr->
nTôÀ
 ? 
z
 : "???");

492 if–
pHdr
->
nBackåa˚
 ){

493 
	`fÊush
(
out
);

494 
pBt
 = (**)
pHdr
;

495 
pBt
 -
pHdr
->
nBackåa˚SlŸs
;

496 
	`backåa˚_symbﬁs_fd
(
pBt
, 
pHdr
->
nBackåa˚
, 
	`fûío
(
out
));

497 
	`Ârötf
(
out
, "\n");

500 
	`Ârötf
(
out
, "COUNTS:\n");

501 
i
=0; i<
NCSIZE
-1; i++){

502 if–
mem
.
nAŒoc
[
i
] ){

503 
	`Ârötf
(
out
, " %5d: %10d %10d %10d\n",

504 
i
*8, 
mem
.
nAŒoc
[i], mem.
nCuºít
[i], mem.
mxCuºít
[i]);

507 if–
mem
.
nAŒoc
[
NCSIZE
-1] ){

508 
	`Ârötf
(
out
, " %5d: %10d %10d %10d\n",

509 
NCSIZE
*8-8, 
mem
.
nAŒoc
[NCSIZE-1],

510 
mem
.
nCuºít
[
NCSIZE
-1], mem.
mxCuºít
[NCSIZE-1]);

512 
	`f˛o£
(
out
);

513 
	}
}

518 
	$sqlôe3MemdebugMÆlocCou¡
(){

519 
i
;

520 
nTŸÆ
 = 0;

521 
i
=0; i<
NCSIZE
; i++){

522 
nTŸÆ
 +
mem
.
nAŒoc
[
i
];

524  
nTŸÆ
;

525 
	}
}

	@mem3.c

26 
	~"sqlôeI¡.h
"

35 #ifde‡
SQLITE_ENABLE_MEMSYS3


40 
	#MX_SMALL
 10

	)

46 
	#N_HASH
 61

	)

80 
Mem3Block
 
	tMem3Block
;

81 
	sMem3Block
 {

84 
u32
 
	m¥evSize
;

85 
u32
 
	msize4x
;

86 } 
	mhdr
;

88 
u32
 
	m√xt
;

89 
u32
 
	m¥ev
;

90 } 
	mli°
;

91 } 
	mu
;

100 
SQLITE_WSD
 
	sMem3GlobÆ
 {

105 
u32
 
	mnPoﬁ
;

106 
Mem3Block
 *
	maPoﬁ
;

111 
	mÆ¨mBusy
;

116 
sqlôe3_muãx
 *
	mmuãx
;

121 
u32
 
	mmnMa°î
;

129 
u32
 
	miMa°î
;

130 
u32
 
	mszMa°î
;

137 
u32
 
	maiSmÆl
[
MX_SMALL
-1];

138 
u32
 
	maiHash
[
N_HASH
];

139 } 
	gmem3
 = { 97535575 };

141 
	#mem3
 
	`GLOBAL
(
Mem3GlobÆ
, 
mem3
)

	)

147 
	$memsys3U∆ökFromLi°
(
u32
 
i
, u32 *
pRoŸ
){

148 
u32
 
√xt
 = 
mem3
.
aPoﬁ
[
i
].
u
.
li°
.next;

149 
u32
 
¥ev
 = 
mem3
.
aPoﬁ
[
i
].
u
.
li°
.prev;

150 
	`as£π
–
	`sqlôe3_muãx_hñd
(
mem3
.
muãx
) );

151 if–
¥ev
==0 ){

152 *
pRoŸ
 = 
√xt
;

154 
mem3
.
aPoﬁ
[
¥ev
].
u
.
li°
.
√xt
 =Çext;

156 if–
√xt
 ){

157 
mem3
.
aPoﬁ
[
√xt
].
u
.
li°
.
¥ev
 =Örev;

159 
mem3
.
aPoﬁ
[
i
].
u
.
li°
.
√xt
 = 0;

160 
mem3
.
aPoﬁ
[
i
].
u
.
li°
.
¥ev
 = 0;

161 
	}
}

167 
	$memsys3U∆ök
(
u32
 
i
){

168 
u32
 
size
, 
hash
;

169 
	`as£π
–
	`sqlôe3_muãx_hñd
(
mem3
.
muãx
) );

170 
	`as£π
–(
mem3
.
aPoﬁ
[
i
-1].
u
.
hdr
.
size4x
 & 1)==0 );

171 
	`as£π
–
i
>=1 );

172 
size
 = 
mem3
.
aPoﬁ
[
i
-1].
u
.
hdr
.
size4x
/4;

173 
	`as£π
–
size
==
mem3
.
aPoﬁ
[
i
+size-1].
u
.
hdr
.
¥evSize
 );

174 
	`as£π
–
size
>=2 );

175 if–
size
 <
MX_SMALL
 ){

176 
	`memsys3U∆ökFromLi°
(
i
, &
mem3
.
aiSmÆl
[
size
-2]);

178 
hash
 = 
size
 % 
N_HASH
;

179 
	`memsys3U∆ökFromLi°
(
i
, &
mem3
.
aiHash
[
hash
]);

181 
	}
}

187 
	$memsys3LökI¡oLi°
(
u32
 
i
, u32 *
pRoŸ
){

188 
	`as£π
–
	`sqlôe3_muãx_hñd
(
mem3
.
muãx
) );

189 
mem3
.
aPoﬁ
[
i
].
u
.
li°
.
√xt
 = *
pRoŸ
;

190 
mem3
.
aPoﬁ
[
i
].
u
.
li°
.
¥ev
 = 0;

191 if–*
pRoŸ
 ){

192 
mem3
.
aPoﬁ
[*
pRoŸ
].
u
.
li°
.
¥ev
 = 
i
;

194 *
pRoŸ
 = 
i
;

195 
	}
}

201 
	$memsys3Lök
(
u32
 
i
){

202 
u32
 
size
, 
hash
;

203 
	`as£π
–
	`sqlôe3_muãx_hñd
(
mem3
.
muãx
) );

204 
	`as£π
–
i
>=1 );

205 
	`as£π
–(
mem3
.
aPoﬁ
[
i
-1].
u
.
hdr
.
size4x
 & 1)==0 );

206 
size
 = 
mem3
.
aPoﬁ
[
i
-1].
u
.
hdr
.
size4x
/4;

207 
	`as£π
–
size
==
mem3
.
aPoﬁ
[
i
+size-1].
u
.
hdr
.
¥evSize
 );

208 
	`as£π
–
size
>=2 );

209 if–
size
 <
MX_SMALL
 ){

210 
	`memsys3LökI¡oLi°
(
i
, &
mem3
.
aiSmÆl
[
size
-2]);

212 
hash
 = 
size
 % 
N_HASH
;

213 
	`memsys3LökI¡oLi°
(
i
, &
mem3
.
aiHash
[
hash
]);

215 
	}
}

222 
	$memsys3E¡î
(){

223 if–
sqlôe3GlobÆC⁄fig
.
bMem°©
==0 && 
mem3
.
muãx
==0 ){

224 
mem3
.
muãx
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MEM
);

226 
	`sqlôe3_muãx_íãr
(
mem3
.
muãx
);

227 
	}
}

228 
	$memsys3Lóve
(){

229 
	`sqlôe3_muãx_Àave
(
mem3
.
muãx
);

230 
	}
}

235 
	$memsys3OutOfMem‹y
(
nByã
){

236 if–!
mem3
.
Æ¨mBusy
 ){

237 
mem3
.
Æ¨mBusy
 = 1;

238 
	`as£π
–
	`sqlôe3_muãx_hñd
(
mem3
.
muãx
) );

239 
	`sqlôe3_muãx_Àave
(
mem3
.
muãx
);

240 
	`sqlôe3_ªÀa£_mem‹y
(
nByã
);

241 
	`sqlôe3_muãx_íãr
(
mem3
.
muãx
);

242 
mem3
.
Æ¨mBusy
 = 0;

244 
	}
}

252 *
	$memsys3Checkout
(
u32
 
i
, u32 
nBlock
){

253 
u32
 
x
;

254 
	`as£π
–
	`sqlôe3_muãx_hñd
(
mem3
.
muãx
) );

255 
	`as£π
–
i
>=1 );

256 
	`as£π
–
mem3
.
aPoﬁ
[
i
-1].
u
.
hdr
.
size4x
/4==
nBlock
 );

257 
	`as£π
–
mem3
.
aPoﬁ
[
i
+
nBlock
-1].
u
.
hdr
.
¥evSize
==nBlock );

258 
x
 = 
mem3
.
aPoﬁ
[
i
-1].
u
.
hdr
.
size4x
;

259 
mem3
.
aPoﬁ
[
i
-1].
u
.
hdr
.
size4x
 = 
nBlock
*4 | 1 | (
x
&2);

260 
mem3
.
aPoﬁ
[
i
+
nBlock
-1].
u
.
hdr
.
¥evSize
 =ÇBlock;

261 
mem3
.
aPoﬁ
[
i
+
nBlock
-1].
u
.
hdr
.
size4x
 |= 2;

262  &
mem3
.
aPoﬁ
[
i
];

263 
	}
}

270 *
	$memsys3FromMa°î
(
u32
 
nBlock
){

271 
	`as£π
–
	`sqlôe3_muãx_hñd
(
mem3
.
muãx
) );

272 
	`as£π
–
mem3
.
szMa°î
>=
nBlock
 );

273 if–
nBlock
>=
mem3
.
szMa°î
-1 ){

275 *
p
 = 
	`memsys3Checkout
(
mem3
.
iMa°î
, mem3.
szMa°î
);

276 
mem3
.
iMa°î
 = 0;

277 
mem3
.
szMa°î
 = 0;

278 
mem3
.
mnMa°î
 = 0;

279  
p
;

282 
u32
 
√wi
, 
x
;

283 
√wi
 = 
mem3
.
iMa°î
 + mem3.
szMa°î
 - 
nBlock
;

284 
	`as£π
–
√wi
 > 
mem3
.
iMa°î
+1 );

285 
mem3
.
aPoﬁ
[mem3.
iMa°î
+mem3.
szMa°î
-1].
u
.
hdr
.
¥evSize
 = 
nBlock
;

286 
mem3
.
aPoﬁ
[mem3.
iMa°î
+mem3.
szMa°î
-1].
u
.
hdr
.
size4x
 |= 2;

287 
mem3
.
aPoﬁ
[
√wi
-1].
u
.
hdr
.
size4x
 = 
nBlock
*4 + 1;

288 
mem3
.
szMa°î
 -
nBlock
;

289 
mem3
.
aPoﬁ
[
√wi
-1].
u
.
hdr
.
¥evSize
 = mem3.
szMa°î
;

290 
x
 = 
mem3
.
aPoﬁ
[mem3.
iMa°î
-1].
u
.
hdr
.
size4x
 & 2;

291 
mem3
.
aPoﬁ
[mem3.
iMa°î
-1].
u
.
hdr
.
size4x
 = mem3.
szMa°î
*4 | 
x
;

292 if–
mem3
.
szMa°î
 < mem3.
mnMa°î
 ){

293 
mem3
.
mnMa°î
 = mem3.
szMa°î
;

295  (*)&
mem3
.
aPoﬁ
[
√wi
];

297 
	}
}

315 
	$memsys3Mîge
(
u32
 *
pRoŸ
){

316 
u32
 
iNext
, 
¥ev
, 
size
, 
i
, 
x
;

318 
	`as£π
–
	`sqlôe3_muãx_hñd
(
mem3
.
muãx
) );

319 
i
=*
pRoŸ
; i>0; i=
iNext
){

320 
iNext
 = 
mem3
.
aPoﬁ
[
i
].
u
.
li°
.
√xt
;

321 
size
 = 
mem3
.
aPoﬁ
[
i
-1].
u
.
hdr
.
size4x
;

322 
	`as£π
–(
size
&1)==0 );

323 if–(
size
&2)==0 ){

324 
	`memsys3U∆ökFromLi°
(
i
, 
pRoŸ
);

325 
	`as£π
–
i
 > 
mem3
.
aPoﬁ
[i-1].
u
.
hdr
.
¥evSize
 );

326 
¥ev
 = 
i
 - 
mem3
.
aPoﬁ
[i-1].
u
.
hdr
.
¥evSize
;

327 if–
¥ev
==
iNext
 ){

328 
iNext
 = 
mem3
.
aPoﬁ
[
¥ev
].
u
.
li°
.
√xt
;

330 
	`memsys3U∆ök
(
¥ev
);

331 
size
 = 
i
 + size/4 - 
¥ev
;

332 
x
 = 
mem3
.
aPoﬁ
[
¥ev
-1].
u
.
hdr
.
size4x
 & 2;

333 
mem3
.
aPoﬁ
[
¥ev
-1].
u
.
hdr
.
size4x
 = 
size
*4 | 
x
;

334 
mem3
.
aPoﬁ
[
¥ev
+
size
-1].
u
.
hdr
.
¥evSize
 = size;

335 
	`memsys3Lök
(
¥ev
);

336 
i
 = 
¥ev
;

338 
size
 /= 4;

340 if–
size
>
mem3
.
szMa°î
 ){

341 
mem3
.
iMa°î
 = 
i
;

342 
mem3
.
szMa°î
 = 
size
;

345 
	}
}

354 *
	$memsys3MÆlocUnß„
(
nByã
){

355 
u32
 
i
;

356 
u32
 
nBlock
;

357 
u32
 
toFªe
;

359 
	`as£π
–
	`sqlôe3_muãx_hñd
(
mem3
.
muãx
) );

360 
	`as£π
–(
Mem3Block
)==8 );

361 if–
nByã
<=12 ){

362 
nBlock
 = 2;

364 
nBlock
 = (
nByã
 + 11)/8;

366 
	`as£π
–
nBlock
>=2 );

373 if–
nBlock
 <
MX_SMALL
 ){

374 
i
 = 
mem3
.
aiSmÆl
[
nBlock
-2];

375 if–
i
>0 ){

376 
	`memsys3U∆ökFromLi°
(
i
, &
mem3
.
aiSmÆl
[
nBlock
-2]);

377  
	`memsys3Checkout
(
i
, 
nBlock
);

380 
hash
 = 
nBlock
 % 
N_HASH
;

381 
i
=
mem3
.
aiHash
[
hash
]; i>0; i=mem3.
aPoﬁ
[i].
u
.
li°
.
√xt
){

382 if–
mem3
.
aPoﬁ
[
i
-1].
u
.
hdr
.
size4x
/4==
nBlock
 ){

383 
	`memsys3U∆ökFromLi°
(
i
, &
mem3
.
aiHash
[
hash
]);

384  
	`memsys3Checkout
(
i
, 
nBlock
);

393 if–
mem3
.
szMa°î
>=
nBlock
 ){

394  
	`memsys3FromMa°î
(
nBlock
);

405 
toFªe
=
nBlock
*16;ÅoFªe<(
mem3
.
nPoﬁ
*16);ÅoFree *= 2){

406 
	`memsys3OutOfMem‹y
(
toFªe
);

407 if–
mem3
.
iMa°î
 ){

408 
	`memsys3Lök
(
mem3
.
iMa°î
);

409 
mem3
.
iMa°î
 = 0;

410 
mem3
.
szMa°î
 = 0;

412 
i
=0; i<
N_HASH
; i++){

413 
	`memsys3Mîge
(&
mem3
.
aiHash
[
i
]);

415 
i
=0; i<
MX_SMALL
-1; i++){

416 
	`memsys3Mîge
(&
mem3
.
aiSmÆl
[
i
]);

418 if–
mem3
.
szMa°î
 ){

419 
	`memsys3U∆ök
(
mem3
.
iMa°î
);

420 if–
mem3
.
szMa°î
>=
nBlock
 ){

421  
	`memsys3FromMa°î
(
nBlock
);

428 
	}
}

436 
	$memsys3FªeUnß„
(*
pOld
){

437 
Mem3Block
 *
p
 = (Mem3Block*)
pOld
;

438 
i
;

439 
u32
 
size
, 
x
;

440 
	`as£π
–
	`sqlôe3_muãx_hñd
(
mem3
.
muãx
) );

441 
	`as£π
–
p
>
mem3
.
aPoﬁ
 &&Ö<&mem3.aPoﬁ[mem3.
nPoﬁ
] );

442 
i
 = 
p
 - 
mem3
.
aPoﬁ
;

443 
	`as£π
–(
mem3
.
aPoﬁ
[
i
-1].
u
.
hdr
.
size4x
&1)==1 );

444 
size
 = 
mem3
.
aPoﬁ
[
i
-1].
u
.
hdr
.
size4x
/4;

445 
	`as£π
–
i
+
size
<=
mem3
.
nPoﬁ
+1 );

446 
mem3
.
aPoﬁ
[
i
-1].
u
.
hdr
.
size4x
 &= ~1;

447 
mem3
.
aPoﬁ
[
i
+
size
-1].
u
.
hdr
.
¥evSize
 = size;

448 
mem3
.
aPoﬁ
[
i
+
size
-1].
u
.
hdr
.
size4x
 &= ~2;

449 
	`memsys3Lök
(
i
);

452 if–
mem3
.
iMa°î
 ){

453  (
mem3
.
aPoﬁ
[mem3.
iMa°î
-1].
u
.
hdr
.
size4x
&2)==0 ){

454 
size
 = 
mem3
.
aPoﬁ
[mem3.
iMa°î
-1].
u
.
hdr
.
¥evSize
;

455 
mem3
.
iMa°î
 -
size
;

456 
mem3
.
szMa°î
 +
size
;

457 
	`memsys3U∆ök
(
mem3
.
iMa°î
);

458 
x
 = 
mem3
.
aPoﬁ
[mem3.
iMa°î
-1].
u
.
hdr
.
size4x
 & 2;

459 
mem3
.
aPoﬁ
[mem3.
iMa°î
-1].
u
.
hdr
.
size4x
 = mem3.
szMa°î
*4 | 
x
;

460 
mem3
.
aPoﬁ
[mem3.
iMa°î
+mem3.
szMa°î
-1].
u
.
hdr
.
¥evSize
 = mem3.szMaster;

462 
x
 = 
mem3
.
aPoﬁ
[mem3.
iMa°î
-1].
u
.
hdr
.
size4x
 & 2;

463  (
mem3
.
aPoﬁ
[mem3.
iMa°î
+mem3.
szMa°î
-1].
u
.
hdr
.
size4x
&1)==0 ){

464 
	`memsys3U∆ök
(
mem3
.
iMa°î
+mem3.
szMa°î
);

465 
mem3
.
szMa°î
 +mem3.
aPoﬁ
[mem3.
iMa°î
+mem3.szMa°î-1].
u
.
hdr
.
size4x
/4;

466 
mem3
.
aPoﬁ
[mem3.
iMa°î
-1].
u
.
hdr
.
size4x
 = mem3.
szMa°î
*4 | 
x
;

467 
mem3
.
aPoﬁ
[mem3.
iMa°î
+mem3.
szMa°î
-1].
u
.
hdr
.
¥evSize
 = mem3.szMaster;

470 
	}
}

477 
	$memsys3Size
(*
p
){

478 
Mem3Block
 *
pBlock
;

479 
	`as£π
–
p
!=0 );

480 
pBlock
 = (
Mem3Block
*)
p
;

481 
	`as£π
–(
pBlock
[-1].
u
.
hdr
.
size4x
&1)!=0 );

482  (
pBlock
[-1].
u
.
hdr
.
size4x
&~3)*2 - 4;

483 
	}
}

488 
	$memsys3Roundup
(
n
){

489 if–
n
<=12 ){

492  ((
n
+11)&~7) - 4;

494 
	}
}

499 *
	$memsys3MÆloc
(
nByãs
){

500 
sqlôe3_öt64
 *
p
;

501 
	`as£π
–
nByãs
>0 );

502 
	`memsys3E¡î
();

503 
p
 = 
	`memsys3MÆlocUnß„
(
nByãs
);

504 
	`memsys3Lóve
();

505  (*)
p
;

506 
	}
}

511 
	$memsys3Fªe
(*
pPri‹
){

512 
	`as£π
–
pPri‹
 );

513 
	`memsys3E¡î
();

514 
	`memsys3FªeUnß„
(
pPri‹
);

515 
	`memsys3Lóve
();

516 
	}
}

521 *
	$memsys3RóŒoc
(*
pPri‹
, 
nByãs
){

522 
nOld
;

523 *
p
;

524 if–
pPri‹
==0 ){

525  
	`sqlôe3_mÆloc
(
nByãs
);

527 if–
nByãs
<=0 ){

528 
	`sqlôe3_‰ì
(
pPri‹
);

531 
nOld
 = 
	`memsys3Size
(
pPri‹
);

532 if–
nByãs
<=
nOld
 &&ÇBytes>=nOld-128 ){

533  
pPri‹
;

535 
	`memsys3E¡î
();

536 
p
 = 
	`memsys3MÆlocUnß„
(
nByãs
);

537 if–
p
 ){

538 if–
nOld
<
nByãs
 ){

539 
	`mem˝y
(
p
, 
pPri‹
, 
nOld
);

541 
	`mem˝y
(
p
, 
pPri‹
, 
nByãs
);

543 
	`memsys3FªeUnß„
(
pPri‹
);

545 
	`memsys3Lóve
();

546  
p
;

547 
	}
}

552 
	$memsys3Inô
(*
NŸU£d
){

553 
	`UNUSED_PARAMETER
(
NŸU£d
);

554 if–!
sqlôe3GlobÆC⁄fig
.
pHóp
 ){

555  
SQLITE_ERROR
;

559 
	`as£π
–(
Mem3Block
)==8 );

560 
mem3
.
aPoﬁ
 = (
Mem3Block
 *)
sqlôe3GlobÆC⁄fig
.
pHóp
;

561 
mem3
.
nPoﬁ
 = (
sqlôe3GlobÆC⁄fig
.
nHóp
 / (
Mem3Block
)) - 2;

564 
mem3
.
szMa°î
 = mem3.
nPoﬁ
;

565 
mem3
.
mnMa°î
 = mem3.
szMa°î
;

566 
mem3
.
iMa°î
 = 1;

567 
mem3
.
aPoﬁ
[0].
u
.
hdr
.
size4x
 = (mem3.
szMa°î
<<2) + 2;

568 
mem3
.
aPoﬁ
[mem3.
nPoﬁ
].
u
.
hdr
.
¥evSize
 = mem3.nPool;

569 
mem3
.
aPoﬁ
[mem3.
nPoﬁ
].
u
.
hdr
.
size4x
 = 1;

571  
SQLITE_OK
;

572 
	}
}

577 
	$memsys3Shutdown
(*
NŸU£d
){

578 
	`UNUSED_PARAMETER
(
NŸU£d
);

579 
mem3
.
muãx
 = 0;

581 
	}
}

589 
	$sqlôe3Memsys3Dump
(c⁄° *
zFûíame
){

590 #ifde‡
SQLITE_DEBUG


591 
FILE
 *
out
;

592 
u32
 
i
, 
j
;

593 
u32
 
size
;

594 if–
zFûíame
==0 || zFilename[0]==0 ){

595 
out
 = 
°dout
;

597 
out
 = 
	`f›í
(
zFûíame
, "w");

598 if–
out
==0 ){

599 
	`Ârötf
(
°dîr
, "** UnableÅo output memory debug outputÜog: %s **\n",

600 
zFûíame
);

604 
	`memsys3E¡î
();

605 
	`Ârötf
(
out
, "CHUNKS:\n");

606 
i
=1; i<=
mem3
.
nPoﬁ
; i+=
size
/4){

607 
size
 = 
mem3
.
aPoﬁ
[
i
-1].
u
.
hdr
.
size4x
;

608 if–
size
/4<=1 ){

609 
	`Ârötf
(
out
, "%∞sizêîr‹\n", &
mem3
.
aPoﬁ
[
i
]);

610 
	`as£π
( 0 );

613 if–(
size
&1)==0 && 
mem3
.
aPoﬁ
[
i
+size/4-1].
u
.
hdr
.
¥evSize
!=size/4 ){

614 
	`Ârötf
(
out
, "%∞èû sizêd€†nŸ m©ch\n", &
mem3
.
aPoﬁ
[
i
]);

615 
	`as£π
( 0 );

618 if–((
mem3
.
aPoﬁ
[
i
+
size
/4-1].
u
.
hdr
.
size4x
&2)>>1)!=(size&1) ){

619 
	`Ârötf
(
out
, "%∞èû checkouàbô i†öc‹ª˘\n", &
mem3
.
aPoﬁ
[
i
]);

620 
	`as£π
( 0 );

623 if–
size
&1 ){

624 
	`Ârötf
(
out
, "%∞%6d byã†checked out\n", &
mem3
.
aPoﬁ
[
i
], (
size
/4)*8-8);

626 
	`Ârötf
(
out
, "%∞%6d byã†‰ì%s\n", &
mem3
.
aPoﬁ
[
i
], (
size
/4)*8-8,

627 
i
==
mem3
.
iMa°î
 ? " **master**" : "");

630 
i
=0; i<
MX_SMALL
-1; i++){

631 if–
mem3
.
aiSmÆl
[
i
]==0 ) ;

632 
	`Ârötf
(
out
, "smÆl(%2d):", 
i
);

633 
j
 = 
mem3
.
aiSmÆl
[
i
]; j>0; j=mem3.
aPoﬁ
[j].
u
.
li°
.
√xt
){

634 
	`Ârötf
(
out
, " %p(%d)", &
mem3
.
aPoﬁ
[
j
],

635 (
mem3
.
aPoﬁ
[
j
-1].
u
.
hdr
.
size4x
/4)*8-8);

637 
	`Ârötf
(
out
, "\n");

639 
i
=0; i<
N_HASH
; i++){

640 if–
mem3
.
aiHash
[
i
]==0 ) ;

641 
	`Ârötf
(
out
, "hash(%2d):", 
i
);

642 
j
 = 
mem3
.
aiHash
[
i
]; j>0; j=mem3.
aPoﬁ
[j].
u
.
li°
.
√xt
){

643 
	`Ârötf
(
out
, " %p(%d)", &
mem3
.
aPoﬁ
[
j
],

644 (
mem3
.
aPoﬁ
[
j
-1].
u
.
hdr
.
size4x
/4)*8-8);

646 
	`Ârötf
(
out
, "\n");

648 
	`Ârötf
(
out
, "ma°î=%d\n", 
mem3
.
iMa°î
);

649 
	`Ârötf
(
out
, "nowU£d=%d\n", 
mem3
.
nPoﬁ
*8 - mem3.
szMa°î
*8);

650 
	`Ârötf
(
out
, "mxU£d=%d\n", 
mem3
.
nPoﬁ
*8 - mem3.
mnMa°î
*8);

651 
	`sqlôe3_muãx_Àave
(
mem3
.
muãx
);

652 if–
out
==
°dout
 ){

653 
	`fÊush
(
°dout
);

655 
	`f˛o£
(
out
);

658 
	`UNUSED_PARAMETER
(
zFûíame
);

660 
	}
}

673 c⁄° 
sqlôe3_mem_mëhods
 *
	$sqlôe3MemGëMemsys3
(){

674 c⁄° 
sqlôe3_mem_mëhods
 
mempoﬁMëhods
 = {

675 
memsys3MÆloc
,

676 
memsys3Fªe
,

677 
memsys3RóŒoc
,

678 
memsys3Size
,

679 
memsys3Roundup
,

680 
memsys3Inô
,

681 
memsys3Shutdown
,

684  &
mempoﬁMëhods
;

685 
	}
}

	@mem5.c

51 
	~"sqlôeI¡.h
"

57 #ifde‡
SQLITE_ENABLE_MEMSYS5


67 
Mem5Lök
 
	tMem5Lök
;

68 
	sMem5Lök
 {

69 
	m√xt
;

70 
	m¥ev
;

78 
	#LOGMAX
 30

	)

83 
	#CTRL_LOGSIZE
 0x1‡

	)

84 
	#CTRL_FREE
 0x20

	)

92 
SQLITE_WSD
 
	sMem5GlobÆ
 {

96 
	mszAtom
;

97 
	mnBlock
;

98 
u8
 *
	mzPoﬁ
;

103 
sqlôe3_muãx
 *
	mmuãx
;

105 #i‡
deföed
(
SQLITE_DEBUG
Ë|| deföed(
SQLITE_TEST
)

109 
u64
 
	mnAŒoc
;

110 
u64
 
	mtŸÆAŒoc
;

111 
u64
 
	mtŸÆEx˚ss
;

112 
u32
 
	mcuºítOut
;

113 
u32
 
	mcuºítCou¡
;

114 
u32
 
	mmaxOut
;

115 
u32
 
	mmaxCou¡
;

116 
u32
 
	mmaxReque°
;

124 
	maiFªñi°
[
LOGMAX
+1];

130 
u8
 *
	maCål
;

132 } 
	gmem5
;

137 
	#mem5
 
	`GLOBAL
(
Mem5GlobÆ
, 
mem5
)

	)

143 
	#MEM5LINK
(
idx
Ë((
Mem5Lök
 *)(&
mem5
.
zPoﬁ
[(idx)*mem5.
szAtom
]))

	)

149 
	$memsys5U∆ök
(
i
, 
iLogsize
){

150 
√xt
, 
¥ev
;

151 
	`as£π
–
i
>=0 && i<
mem5
.
nBlock
 );

152 
	`as£π
–
iLogsize
>=0 && iLogsize<=
LOGMAX
 );

153 
	`as£π
–(
mem5
.
aCål
[
i
] & 
CTRL_LOGSIZE
)==
iLogsize
 );

155 
√xt
 = 
	`MEM5LINK
(
i
)->next;

156 
¥ev
 = 
	`MEM5LINK
(
i
)->prev;

157 if–
¥ev
<0 ){

158 
mem5
.
aiFªñi°
[
iLogsize
] = 
√xt
;

160 
	`MEM5LINK
(
¥ev
)->
√xt
 =Çext;

162 if–
√xt
>=0 ){

163 
	`MEM5LINK
(
√xt
)->
¥ev
 =Örev;

165 
	}
}

171 
	$memsys5Lök
(
i
, 
iLogsize
){

172 
x
;

173 
	`as£π
–
	`sqlôe3_muãx_hñd
(
mem5
.
muãx
) );

174 
	`as£π
–
i
>=0 && i<
mem5
.
nBlock
 );

175 
	`as£π
–
iLogsize
>=0 && iLogsize<=
LOGMAX
 );

176 
	`as£π
–(
mem5
.
aCål
[
i
] & 
CTRL_LOGSIZE
)==
iLogsize
 );

178 
x
 = 
	`MEM5LINK
(
i
)->
√xt
 = 
mem5
.
aiFªñi°
[
iLogsize
];

179 
	`MEM5LINK
(
i
)->
¥ev
 = -1;

180 if–
x
>=0 ){

181 
	`as£π
–
x
<
mem5
.
nBlock
 );

182 
	`MEM5LINK
(
x
)->
¥ev
 = 
i
;

184 
mem5
.
aiFªñi°
[
iLogsize
] = 
i
;

185 
	}
}

190 
	$memsys5E¡î
(){

191 
	`sqlôe3_muãx_íãr
(
mem5
.
muãx
);

192 
	}
}

193 
	$memsys5Lóve
(){

194 
	`sqlôe3_muãx_Àave
(
mem5
.
muãx
);

195 
	}
}

201 
	$memsys5Size
(*
p
){

202 
iSize
, 
i
;

203 
	`as£π
–
p
!=0 );

204 
i
 = ()(((
u8
 *)
p
-
mem5
.
zPoﬁ
)/mem5.
szAtom
);

205 
	`as£π
–
i
>=0 && i<
mem5
.
nBlock
 );

206 
iSize
 = 
mem5
.
szAtom
 * (1 << (mem5.
aCål
[
i
]&
CTRL_LOGSIZE
));

207  
iSize
;

208 
	}
}

220 *
	$memsys5MÆlocUnß„
(
nByã
){

221 
i
;

222 
iBö
;

223 
iFuŒSz
;

224 
iLogsize
;

227 
	`as£π
–
nByã
>0 );

230 if–
nByã
 > 0x40000000 )  0;

232 #i‡
	`deföed
(
SQLITE_DEBUG
Ë|| deföed(
SQLITE_TEST
)

235 if–(
u32
)
nByã
>
mem5
.
maxReque°
 ){

236 
mem5
.
maxReque°
 = 
nByã
;

242 
iFuŒSz
=
mem5
.
szAtom
,
iLogsize
=0; iFuŒSz<
nByã
; iFullSz*=2,iLogsize++){}

248 
iBö
=
iLogsize
; iBö<=
LOGMAX
 && 
mem5
.
aiFªñi°
[iBin]<0; iBin++){}

249 if–
iBö
>
LOGMAX
 ){

250 
	`ã°ˇ£
–
sqlôe3GlobÆC⁄fig
.
xLog
!=0 );

251 
	`sqlôe3_log
(
SQLITE_NOMEM
, "ÁûedÅÿÆloˇã %u byãs", 
nByã
);

254 
i
 = 
mem5
.
aiFªñi°
[
iBö
];

255 
	`memsys5U∆ök
(
i
, 
iBö
);

256  
iBö
>
iLogsize
 ){

257 
√wSize
;

259 
iBö
--;

260 
√wSize
 = 1 << 
iBö
;

261 
mem5
.
aCål
[
i
+
√wSize
] = 
CTRL_FREE
 | 
iBö
;

262 
	`memsys5Lök
(
i
+
√wSize
, 
iBö
);

264 
mem5
.
aCål
[
i
] = 
iLogsize
;

266 #i‡
	`deföed
(
SQLITE_DEBUG
Ë|| deföed(
SQLITE_TEST
)

268 
mem5
.
nAŒoc
++;

269 
mem5
.
tŸÆAŒoc
 +
iFuŒSz
;

270 
mem5
.
tŸÆEx˚ss
 +
iFuŒSz
 - 
nByã
;

271 
mem5
.
cuºítCou¡
++;

272 
mem5
.
cuºítOut
 +
iFuŒSz
;

273 if–
mem5
.
maxCou¡
<mem5.
cuºítCou¡
 ) mem5.maxCount = mem5.currentCount;

274 if–
mem5
.
maxOut
<mem5.
cuºítOut
 ) mem5.maxOut = mem5.currentOut;

277 #ifde‡
SQLITE_DEBUG


280 
	`mem£t
(&
mem5
.
zPoﬁ
[
i
*mem5.
szAtom
], 0xAA, 
iFuŒSz
);

284  (*)&
mem5
.
zPoﬁ
[
i
*mem5.
szAtom
];

285 
	}
}

290 
	$memsys5FªeUnß„
(*
pOld
){

291 
u32
 
size
, 
iLogsize
;

292 
iBlock
;

297 
iBlock
 = ()(((
u8
 *)
pOld
-
mem5
.
zPoﬁ
)/mem5.
szAtom
);

300 
	`as£π
–
iBlock
>=0 && iBlock<
mem5
.
nBlock
 );

301 
	`as£π
–((
u8
 *)
pOld
-
mem5
.
zPoﬁ
)%mem5.
szAtom
==0 );

302 
	`as£π
–(
mem5
.
aCål
[
iBlock
] & 
CTRL_FREE
)==0 );

304 
iLogsize
 = 
mem5
.
aCål
[
iBlock
] & 
CTRL_LOGSIZE
;

305 
size
 = 1<<
iLogsize
;

306 
	`as£π
–
iBlock
+
size
-1<(
u32
)
mem5
.
nBlock
 );

308 
mem5
.
aCål
[
iBlock
] |
CTRL_FREE
;

309 
mem5
.
aCål
[
iBlock
+
size
-1] |
CTRL_FREE
;

311 #i‡
	`deföed
(
SQLITE_DEBUG
Ë|| deföed(
SQLITE_TEST
)

312 
	`as£π
–
mem5
.
cuºítCou¡
>0 );

313 
	`as£π
–
mem5
.
cuºítOut
>=(
size
*mem5.
szAtom
) );

314 
mem5
.
cuºítCou¡
--;

315 
mem5
.
cuºítOut
 -
size
*mem5.
szAtom
;

316 
	`as£π
–
mem5
.
cuºítOut
>0 || mem5.
cuºítCou¡
==0 );

317 
	`as£π
–
mem5
.
cuºítCou¡
>0 || mem5.
cuºítOut
==0 );

320 
mem5
.
aCål
[
iBlock
] = 
CTRL_FREE
 | 
iLogsize
;

321  
	`ALWAYS
(
iLogsize
<
LOGMAX
) ){

322 
iBuddy
;

323 if–(
iBlock
>>
iLogsize
) & 1 ){

324 
iBuddy
 = 
iBlock
 - 
size
;

325 
	`as£π
–
iBuddy
>=0 );

327 
iBuddy
 = 
iBlock
 + 
size
;

328 if–
iBuddy
>=
mem5
.
nBlock
 ) ;

330 if–
mem5
.
aCål
[
iBuddy
]!=(
CTRL_FREE
 | 
iLogsize
) ) ;

331 
	`memsys5U∆ök
(
iBuddy
, 
iLogsize
);

332 
iLogsize
++;

333 if–
iBuddy
<
iBlock
 ){

334 
mem5
.
aCål
[
iBuddy
] = 
CTRL_FREE
 | 
iLogsize
;

335 
mem5
.
aCål
[
iBlock
] = 0;

336 
iBlock
 = 
iBuddy
;

338 
mem5
.
aCål
[
iBlock
] = 
CTRL_FREE
 | 
iLogsize
;

339 
mem5
.
aCål
[
iBuddy
] = 0;

341 
size
 *= 2;

344 #ifde‡
SQLITE_DEBUG


347 
	`mem£t
(&
mem5
.
zPoﬁ
[
iBlock
*mem5.
szAtom
], 0x55, 
size
);

350 
	`memsys5Lök
(
iBlock
, 
iLogsize
);

351 
	}
}

356 *
	$memsys5MÆloc
(
nByãs
){

357 
sqlôe3_öt64
 *
p
 = 0;

358 if–
nByãs
>0 ){

359 
	`memsys5E¡î
();

360 
p
 = 
	`memsys5MÆlocUnß„
(
nByãs
);

361 
	`memsys5Lóve
();

363  (*)
p
;

364 
	}
}

372 
	$memsys5Fªe
(*
pPri‹
){

373 
	`as£π
–
pPri‹
!=0 );

374 
	`memsys5E¡î
();

375 
	`memsys5FªeUnß„
(
pPri‹
);

376 
	`memsys5Lóve
();

377 
	}
}

391 *
	$memsys5RóŒoc
(*
pPri‹
, 
nByãs
){

392 
nOld
;

393 *
p
;

394 
	`as£π
–
pPri‹
!=0 );

395 
	`as£π
–(
nByãs
&(nBytes-1))==0 );

396 
	`as£π
–
nByãs
>=0 );

397 if–
nByãs
==0 ){

400 
nOld
 = 
	`memsys5Size
(
pPri‹
);

401 if–
nByãs
<=
nOld
 ){

402  
pPri‹
;

404 
p
 = 
	`memsys5MÆloc
(
nByãs
);

405 if–
p
 ){

406 
	`mem˝y
(
p
, 
pPri‹
, 
nOld
);

407 
	`memsys5Fªe
(
pPri‹
);

409  
p
;

410 
	}
}

421 
	$memsys5Roundup
(
n
){

422 
iFuŒSz
;

423 if–
n
 > 0x40000000 )  0;

424 
iFuŒSz
=
mem5
.
szAtom
; iFuŒSz<
n
; iFullSz *= 2);

425  
iFuŒSz
;

426 
	}
}

438 
	$memsys5Log
(
iVÆue
){

439 
iLog
;

440 
iLog
=0; (iLog<()((()*8)-1)Ë&& (1<<iLog)<
iVÆue
; iLog++);

441  
iLog
;

442 
	}
}

450 
	$memsys5Inô
(*
NŸU£d
){

451 
ii
;

452 
nByã
;

453 
u8
 *
zByã
;

454 
nMöLog
;

455 
iOff£t
;

457 
	`UNUSED_PARAMETER
(
NŸU£d
);

460 
mem5
.
muãx
 = 0;

465 
	`as£π
–((
Mem5Lök
)&((Mem5Link)-1))==0 );

467 
nByã
 = 
sqlôe3GlobÆC⁄fig
.
nHóp
;

468 
zByã
 = (
u8
*)
sqlôe3GlobÆC⁄fig
.
pHóp
;

469 
	`as£π
–
zByã
!=0 );

472 
nMöLog
 = 
	`memsys5Log
(
sqlôe3GlobÆC⁄fig
.
mnReq
);

473 
mem5
.
szAtom
 = (1<<
nMöLog
);

474  ()(
Mem5Lök
)>
mem5
.
szAtom
 ){

475 
mem5
.
szAtom
 = mem5.szAtom << 1;

478 
mem5
.
nBlock
 = (
nByã
 / (mem5.
szAtom
+(
u8
)));

479 
mem5
.
zPoﬁ
 = 
zByã
;

480 
mem5
.
aCål
 = (
u8
 *)&mem5.
zPoﬁ
[mem5.
nBlock
*mem5.
szAtom
];

482 
ii
=0; ii<=
LOGMAX
; ii++){

483 
mem5
.
aiFªñi°
[
ii
] = -1;

486 
iOff£t
 = 0;

487 
ii
=
LOGMAX
; ii>=0; ii--){

488 
nAŒoc
 = (1<<
ii
);

489 if–(
iOff£t
+
nAŒoc
)<=
mem5
.
nBlock
 ){

490 
mem5
.
aCål
[
iOff£t
] = 
ii
 | 
CTRL_FREE
;

491 
	`memsys5Lök
(
iOff£t
, 
ii
);

492 
iOff£t
 +
nAŒoc
;

494 
	`as£π
((
iOff£t
+
nAŒoc
)>
mem5
.
nBlock
);

498 if–
sqlôe3GlobÆC⁄fig
.
bMem°©
==0 ){

499 
mem5
.
muãx
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MEM
);

502  
SQLITE_OK
;

503 
	}
}

508 
	$memsys5Shutdown
(*
NŸU£d
){

509 
	`UNUSED_PARAMETER
(
NŸU£d
);

510 
mem5
.
muãx
 = 0;

512 
	}
}

514 #ifde‡
SQLITE_TEST


519 
	$sqlôe3Memsys5Dump
(c⁄° *
zFûíame
){

520 
FILE
 *
out
;

521 
i
, 
j
, 
n
;

522 
nMöLog
;

524 if–
zFûíame
==0 || zFilename[0]==0 ){

525 
out
 = 
°dout
;

527 
out
 = 
	`f›í
(
zFûíame
, "w");

528 if–
out
==0 ){

529 
	`Ârötf
(
°dîr
, "** UnableÅo output memory debug outputÜog: %s **\n",

530 
zFûíame
);

534 
	`memsys5E¡î
();

535 
nMöLog
 = 
	`memsys5Log
(
mem5
.
szAtom
);

536 
i
=0; i<=
LOGMAX
 && i+
nMöLog
<32; i++){

537 
n
=0, 
j
=
mem5
.
aiFªñi°
[
i
]; j>=0; j = 
	`MEM5LINK
(j)->
√xt
,Ç++){}

538 
	`Ârötf
(
out
, "‰ìli° iãm†o‡sizê%d: %d\n", 
mem5
.
szAtom
 << 
i
, 
n
);

540 
	`Ârötf
(
out
, "mem5.nAŒo¯ = %Œu\n", 
mem5
.
nAŒoc
);

541 
	`Ârötf
(
out
, "mem5.tŸÆAŒo¯ = %Œu\n", 
mem5
.
tŸÆAŒoc
);

542 
	`Ârötf
(
out
, "mem5.tŸÆEx˚s† = %Œu\n", 
mem5
.
tŸÆEx˚ss
);

543 
	`Ârötf
(
out
, "mem5.cuºítOuà = %u\n", 
mem5
.
cuºítOut
);

544 
	`Ârötf
(
out
, "mem5.cuºítCou¡ = %u\n", 
mem5
.
cuºítCou¡
);

545 
	`Ârötf
(
out
, "mem5.maxOuà = %u\n", 
mem5
.
maxOut
);

546 
	`Ârötf
(
out
, "mem5.maxCou¡ = %u\n", 
mem5
.
maxCou¡
);

547 
	`Ârötf
(
out
, "mem5.maxReque° = %u\n", 
mem5
.
maxReque°
);

548 
	`memsys5Lóve
();

549 if–
out
==
°dout
 ){

550 
	`fÊush
(
°dout
);

552 
	`f˛o£
(
out
);

554 
	}
}

562 c⁄° 
sqlôe3_mem_mëhods
 *
	$sqlôe3MemGëMemsys5
(){

563 c⁄° 
sqlôe3_mem_mëhods
 
memsys5Mëhods
 = {

564 
memsys5MÆloc
,

565 
memsys5Fªe
,

566 
memsys5RóŒoc
,

567 
memsys5Size
,

568 
memsys5Roundup
,

569 
memsys5Inô
,

570 
memsys5Shutdown
,

573  &
memsys5Mëhods
;

574 
	}
}

	@memjournal.c

26 
	~"sqlôeI¡.h
"

29 
MemJou∫Æ
 
	tMemJou∫Æ
;

30 
FûePoöt
 
	tFûePoöt
;

31 
FûeChunk
 
	tFûeChunk
;

39 
	sFûeChunk
 {

40 
FûeChunk
 *
	mpNext
;

41 
u8
 
	mzChunk
[8];

47 
	#MEMJOURNAL_DFLT_FILECHUNKSIZE
 1024

	)

53 
	#fûeChunkSize
(
nChunkSize
Ë((
FûeChunk
Ë+ (“ChunkSize)-8))

	)

59 
	sFûePoöt
 {

60 
sqlôe3_öt64
 
	miOff£t
;

61 
FûeChunk
 *
	mpChunk
;

68 
	sMemJou∫Æ
 {

69 c⁄° 
sqlôe3_io_mëhods
 *
	mpMëhod
;

70 
	mnChunkSize
;

72 
	mnSpûl
;

73 
	mnSize
;

74 
FûeChunk
 *
	mpFú°
;

75 
FûePoöt
 
	mídpoöt
;

76 
FûePoöt
 
	mªadpoöt
;

78 
	mÊags
;

79 
sqlôe3_vfs
 *
	mpVfs
;

80 c⁄° *
	mzJou∫Æ
;

87 
	$memj∫lRód
(

88 
sqlôe3_fûe
 *
pJfd
,

89 *
zBuf
,

90 
iAmt
,

91 
sqlôe_öt64
 
iOf°


93 
MemJou∫Æ
 *
p
 = (MemJou∫Æ *)
pJfd
;

94 
u8
 *
zOut
 = 
zBuf
;

95 
nRód
 = 
iAmt
;

96 
iChunkOff£t
;

97 
FûeChunk
 *
pChunk
;

99 #ifde‡
SQLITE_ENABLE_ATOMIC_WRITE


100 if–(
iAmt
+
iOf°
)>
p
->
ídpoöt
.
iOff£t
 ){

101  
SQLITE_IOERR_SHORT_READ
;

105 
	`as£π
–(
iAmt
+
iOf°
)<=
p
->
ídpoöt
.
iOff£t
 );

106 
	`as£π
–
p
->
ªadpoöt
.
iOff£t
==0 ||Ö->ªadpoöt.
pChunk
!=0 );

107 if–
p
->
ªadpoöt
.
iOff£t
!=
iOf°
 || iOfst==0 ){

108 
sqlôe3_öt64
 
iOff
 = 0;

109 
pChunk
=
p
->
pFú°
;

110 
	`ALWAYS
(
pChunk
Ë&& (
iOff
+
p
->
nChunkSize
)<=
iOf°
;

111 
pChunk
ıChunk->
pNext


113 
iOff
 +
p
->
nChunkSize
;

116 
pChunk
 = 
p
->
ªadpoöt
.pChunk;

117 
	`as£π
–
pChunk
!=0 );

120 
iChunkOff£t
 = ()(
iOf°
%
p
->
nChunkSize
);

122 
iS∑˚
 = 
p
->
nChunkSize
 - 
iChunkOff£t
;

123 
nC›y
 = 
	`MIN
(
nRód
, (
p
->
nChunkSize
 - 
iChunkOff£t
));

124 
	`mem˝y
(
zOut
, (
u8
*)
pChunk
->
zChunk
 + 
iChunkOff£t
, 
nC›y
);

125 
zOut
 +
nC›y
;

126 
nRód
 -
iS∑˚
;

127 
iChunkOff£t
 = 0;

128 }  
nRód
>=0 && (
pChunk
ıChunk->
pNext
)!=0 &&ÇRead>0 );

129 
p
->
ªadpoöt
.
iOff£t
 = 
pChunk
 ? 
iOf°
+
iAmt
 : 0;

130 
p
->
ªadpoöt
.
pChunk
 =ÖChunk;

132  
SQLITE_OK
;

133 
	}
}

138 
	$memj∫lFªeChunks
(
MemJou∫Æ
 *
p
){

139 
FûeChunk
 *
pIãr
;

140 
FûeChunk
 *
pNext
;

141 
pIãr
=
p
->
pFú°
;ÖIãr;ÖIãr=
pNext
){

142 
pNext
 = 
pIãr
->pNext;

143 
	`sqlôe3_‰ì
(
pIãr
);

145 
p
->
pFú°
 = 0;

146 
	}
}

151 
	$memj∫lCª©eFûe
(
MemJou∫Æ
 *
p
){

152 
rc
;

153 
sqlôe3_fûe
 *
pRól
 = (sqlôe3_fûe*)
p
;

154 
MemJou∫Æ
 
c›y
 = *
p
;

156 
	`mem£t
(
p
, 0, (
MemJou∫Æ
));

157 
rc
 = 
	`sqlôe3OsO≥n
(
c›y
.
pVfs
, c›y.
zJou∫Æ
, 
pRól
, c›y.
Êags
, 0);

158 if–
rc
==
SQLITE_OK
 ){

159 
nChunk
 = 
c›y
.
nChunkSize
;

160 
i64
 
iOff
 = 0;

161 
FûeChunk
 *
pIãr
;

162 
pIãr
=
c›y
.
pFú°
;ÖIãr;ÖIãrıIãr->
pNext
){

163 if–
iOff
 + 
nChunk
 > 
c›y
.
ídpoöt
.
iOff£t
 ){

164 
nChunk
 = 
c›y
.
ídpoöt
.
iOff£t
 - 
iOff
;

166 
rc
 = 
	`sqlôe3OsWrôe
(
pRól
, (
u8
*)
pIãr
->
zChunk
, 
nChunk
, 
iOff
);

167 if–
rc
 ) ;

168 
iOff
 +
nChunk
;

170 if–
rc
==
SQLITE_OK
 ){

172 
	`memj∫lFªeChunks
(&
c›y
);

175 if–
rc
!=
SQLITE_OK
 ){

180 
	`sqlôe3OsClo£
(
pRól
);

181 *
p
 = 
c›y
;

183  
rc
;

184 
	}
}

190 
	$memj∫lWrôe
(

191 
sqlôe3_fûe
 *
pJfd
,

192 c⁄° *
zBuf
,

193 
iAmt
,

194 
sqlôe_öt64
 
iOf°


196 
MemJou∫Æ
 *
p
 = (MemJou∫Æ *)
pJfd
;

197 
nWrôe
 = 
iAmt
;

198 
u8
 *
zWrôe
 = (u8 *)
zBuf
;

202 if–
p
->
nSpûl
>0 && (
iAmt
+
iOf°
)>p->nSpill ){

203 
rc
 = 
	`memj∫lCª©eFûe
(
p
);

204 if–
rc
==
SQLITE_OK
 ){

205 
rc
 = 
	`sqlôe3OsWrôe
(
pJfd
, 
zBuf
, 
iAmt
, 
iOf°
);

207  
rc
;

217 
	`as£π
–
iOf°
==
p
->
ídpoöt
.
iOff£t
 || iOfst==0 );

218 #ifde‡
SQLITE_ENABLE_ATOMIC_WRITE


219 if–
iOf°
==0 && 
p
->
pFú°
 ){

220 
	`as£π
–
p
->
nChunkSize
>
iAmt
 );

221 
	`mem˝y
((
u8
*)
p
->
pFú°
->
zChunk
, 
zBuf
, 
iAmt
);

224 
	`as£π
–
iOf°
>0 || 
p
->
pFú°
==0 );

227  
nWrôe
>0 ){

228 
FûeChunk
 *
pChunk
 = 
p
->
ídpoöt
.pChunk;

229 
iChunkOff£t
 = ()(
p
->
ídpoöt
.
iOff£t
%p->
nChunkSize
);

230 
iS∑˚
 = 
	`MIN
(
nWrôe
, 
p
->
nChunkSize
 - 
iChunkOff£t
);

232 if–
iChunkOff£t
==0 ){

234 
FûeChunk
 *
pNew
 = 
	`sqlôe3_mÆloc
(
	`fûeChunkSize
(
p
->
nChunkSize
));

235 if–!
pNew
 ){

236  
SQLITE_IOERR_NOMEM_BKPT
;

238 
pNew
->
pNext
 = 0;

239 if–
pChunk
 ){

240 
	`as£π
–
p
->
pFú°
 );

241 
pChunk
->
pNext
 = 
pNew
;

243 
	`as£π
–!
p
->
pFú°
 );

244 
p
->
pFú°
 = 
pNew
;

246 
p
->
ídpoöt
.
pChunk
 = 
pNew
;

249 
	`mem˝y
((
u8
*)
p
->
ídpoöt
.
pChunk
->
zChunk
 + 
iChunkOff£t
, 
zWrôe
, 
iS∑˚
);

250 
zWrôe
 +
iS∑˚
;

251 
nWrôe
 -
iS∑˚
;

252 
p
->
ídpoöt
.
iOff£t
 +
iS∑˚
;

254 
p
->
nSize
 = 
iAmt
 + 
iOf°
;

258  
SQLITE_OK
;

259 
	}
}

268 
	$memj∫lTrunˇã
(
sqlôe3_fûe
 *
pJfd
, 
sqlôe_öt64
 
size
){

269 
MemJou∫Æ
 *
p
 = (MemJou∫Æ *)
pJfd
;

270 if–
	`ALWAYS
(
size
==0) ){

271 
	`memj∫lFªeChunks
(
p
);

272 
p
->
nSize
 = 0;

273 
p
->
ídpoöt
.
pChunk
 = 0;

274 
p
->
ídpoöt
.
iOff£t
 = 0;

275 
p
->
ªadpoöt
.
pChunk
 = 0;

276 
p
->
ªadpoöt
.
iOff£t
 = 0;

278  
SQLITE_OK
;

279 
	}
}

284 
	$memj∫lClo£
(
sqlôe3_fûe
 *
pJfd
){

285 
MemJou∫Æ
 *
p
 = (MemJou∫Æ *)
pJfd
;

286 
	`memj∫lFªeChunks
(
p
);

287  
SQLITE_OK
;

288 
	}
}

296 
	$memj∫lSync
(
sqlôe3_fûe
 *
pJfd
, 
Êags
){

297 
	`UNUSED_PARAMETER2
(
pJfd
, 
Êags
);

298  
SQLITE_OK
;

299 
	}
}

304 
	$memj∫lFûeSize
(
sqlôe3_fûe
 *
pJfd
, 
sqlôe_öt64
 *
pSize
){

305 
MemJou∫Æ
 *
p
 = (MemJou∫Æ *)
pJfd
;

306 *
pSize
 = (
sqlôe_öt64
Ë
p
->
ídpoöt
.
iOff£t
;

307  
SQLITE_OK
;

308 
	}
}

313 c⁄° 
sqlôe3_io_mëhods
 
	gMemJou∫ÆMëhods
 = {

315 
memj∫lClo£
,

316 
memj∫lRód
,

317 
memj∫lWrôe
,

318 
memj∫lTrunˇã
,

319 
memj∫lSync
,

320 
memj∫lFûeSize
,

347 
	$sqlôe3Jou∫ÆO≥n
(

348 
sqlôe3_vfs
 *
pVfs
,

349 c⁄° *
zName
,

350 
sqlôe3_fûe
 *
pJfd
,

351 
Êags
,

352 
nSpûl


354 
MemJou∫Æ
 *
p
 = (MemJou∫Æ*)
pJfd
;

360 
	`mem£t
(
p
, 0, (
MemJou∫Æ
));

361 if–
nSpûl
==0 ){

362  
	`sqlôe3OsO≥n
(
pVfs
, 
zName
, 
pJfd
, 
Êags
, 0);

365 if–
nSpûl
>0 ){

366 
p
->
nChunkSize
 = 
nSpûl
;

368 
p
->
nChunkSize
 = 8 + 
MEMJOURNAL_DFLT_FILECHUNKSIZE
 - (
FûeChunk
);

369 
	`as£π
–
MEMJOURNAL_DFLT_FILECHUNKSIZE
==
	`fûeChunkSize
(
p
->
nChunkSize
) );

372 
p
->
pMëhod
 = (c⁄° 
sqlôe3_io_mëhods
*)&
MemJou∫ÆMëhods
;

373 
p
->
nSpûl
 =ÇSpill;

374 
p
->
Êags
 = flags;

375 
p
->
zJou∫Æ
 = 
zName
;

376 
p
->
pVfs
 =ÖVfs;

377  
SQLITE_OK
;

378 
	}
}

383 
	$sqlôe3MemJou∫ÆO≥n
(
sqlôe3_fûe
 *
pJfd
){

384 
	`sqlôe3Jou∫ÆO≥n
(0, 0, 
pJfd
, 0, -1);

385 
	}
}

387 #ifde‡
SQLITE_ENABLE_ATOMIC_WRITE


394 
	$sqlôe3Jou∫ÆCª©e
(
sqlôe3_fûe
 *
p
){

395 
rc
 = 
SQLITE_OK
;

396 if–
p
->
pMëhods
==&
MemJou∫ÆMëhods
 && ((
MemJou∫Æ
*Ì)->
nSpûl
>0 ){

397 
rc
 = 
	`memj∫lCª©eFûe
((
MemJou∫Æ
*)
p
);

399  
rc
;

400 
	}
}

408 
	$sqlôe3Jou∫ÆIsInMem‹y
(
sqlôe3_fûe
 *
p
){

409  
p
->
pMëhods
==&
MemJou∫ÆMëhods
;

410 
	}
}

416 
	$sqlôe3Jou∫ÆSize
(
sqlôe3_vfs
 *
pVfs
){

417  
	`MAX
(
pVfs
->
szOsFûe
, ()(
MemJou∫Æ
));

418 
	}
}

	@msvc.h

15 #i‚de‡
_MSVC_H_


16 
	#_MSVC_H_


	)

18 #i‡
deföed
(
_MSC_VER
)

19 #¥agm®
w¨nög
(
dißbÀ
 : 4054)

20 #¥agm®
w¨nög
(
dißbÀ
 : 4055)

21 #¥agm®
w¨nög
(
dißbÀ
 : 4100)

22 #¥agm®
w¨nög
(
dißbÀ
 : 4127)

23 #¥agm®
w¨nög
(
dißbÀ
 : 4130)

24 #¥agm®
w¨nög
(
dißbÀ
 : 4152)

25 #¥agm®
w¨nög
(
dißbÀ
 : 4189)

26 #¥agm®
w¨nög
(
dißbÀ
 : 4206)

27 #¥agm®
w¨nög
(
dißbÀ
 : 4210)

28 #¥agm®
w¨nög
(
dißbÀ
 : 4232)

29 #¥agm®
w¨nög
(
dißbÀ
 : 4244)

30 #¥agm®
w¨nög
(
dißbÀ
 : 4305)

31 #¥agm®
w¨nög
(
dißbÀ
 : 4306)

32 #¥agm®
w¨nög
(
dißbÀ
 : 4702)

33 #¥agm®
w¨nög
(
dißbÀ
 : 4706)

	@mutex.c

16 
	~"sqlôeI¡.h
"

18 #i‡
deföed
(
SQLITE_DEBUG
Ë&& !deföed(
SQLITE_MUTEX_OMIT
)

24 
SQLITE_WSD
 
	gmuãxIsInô
 = 0;

28 #i‚de‡
SQLITE_MUTEX_OMIT


32 
	$sqlôe3MuãxInô
(){

33 
rc
 = 
SQLITE_OK
;

34 if–!
sqlôe3GlobÆC⁄fig
.
muãx
.
xMuãxAŒoc
 ){

40 
sqlôe3_muãx_mëhods
 c⁄° *
pFrom
;

41 
sqlôe3_muãx_mëhods
 *
pTo
 = &
sqlôe3GlobÆC⁄fig
.
muãx
;

43 if–
sqlôe3GlobÆC⁄fig
.
bC‹eMuãx
 ){

44 
pFrom
 = 
	`sqlôe3DeÁu…Muãx
();

46 
pFrom
 = 
	`sqlôe3No›Muãx
();

48 
pTo
->
xMuãxInô
 = 
pFrom
->xMutexInit;

49 
pTo
->
xMuãxEnd
 = 
pFrom
->xMutexEnd;

50 
pTo
->
xMuãxFªe
 = 
pFrom
->xMutexFree;

51 
pTo
->
xMuãxE¡î
 = 
pFrom
->xMutexEnter;

52 
pTo
->
xMuãxTry
 = 
pFrom
->xMutexTry;

53 
pTo
->
xMuãxLóve
 = 
pFrom
->xMutexLeave;

54 
pTo
->
xMuãxHñd
 = 
pFrom
->xMutexHeld;

55 
pTo
->
xMuãxNŸhñd
 = 
pFrom
->xMutexNotheld;

56 
	`sqlôe3Mem‹yB¨rõr
();

57 
pTo
->
xMuãxAŒoc
 = 
pFrom
->xMutexAlloc;

59 
	`as£π
–
sqlôe3GlobÆC⁄fig
.
muãx
.
xMuãxInô
 );

60 
rc
 = 
sqlôe3GlobÆC⁄fig
.
muãx
.
	`xMuãxInô
();

62 #ifde‡
SQLITE_DEBUG


63 
	`GLOBAL
(, 
muãxIsInô
) = 1;

66  
rc
;

67 
	}
}

73 
	$sqlôe3MuãxEnd
(){

74 
rc
 = 
SQLITE_OK
;

75 if–
sqlôe3GlobÆC⁄fig
.
muãx
.
xMuãxEnd
 ){

76 
rc
 = 
sqlôe3GlobÆC⁄fig
.
muãx
.
	`xMuãxEnd
();

79 #ifde‡
SQLITE_DEBUG


80 
	`GLOBAL
(, 
muãxIsInô
) = 0;

83  
rc
;

84 
	}
}

89 
sqlôe3_muãx
 *
	$sqlôe3_muãx_Æloc
(
id
){

90 #i‚de‡
SQLITE_OMIT_AUTOINIT


91 if–
id
<=
SQLITE_MUTEX_RECURSIVE
 && 
	`sqlôe3_öôülize
() )  0;

92 if–
id
>
SQLITE_MUTEX_RECURSIVE
 && 
	`sqlôe3MuãxInô
() )  0;

94 
	`as£π
–
sqlôe3GlobÆC⁄fig
.
muãx
.
xMuãxAŒoc
 );

95  
sqlôe3GlobÆC⁄fig
.
muãx
.
	`xMuãxAŒoc
(
id
);

96 
	}
}

98 
sqlôe3_muãx
 *
	$sqlôe3MuãxAŒoc
(
id
){

99 if–!
sqlôe3GlobÆC⁄fig
.
bC‹eMuãx
 ){

102 
	`as£π
–
	`GLOBAL
(, 
muãxIsInô
) );

103 
	`as£π
–
sqlôe3GlobÆC⁄fig
.
muãx
.
xMuãxAŒoc
 );

104  
sqlôe3GlobÆC⁄fig
.
muãx
.
	`xMuãxAŒoc
(
id
);

105 
	}
}

110 
	$sqlôe3_muãx_‰ì
(
sqlôe3_muãx
 *
p
){

111 if–
p
 ){

112 
	`as£π
–
sqlôe3GlobÆC⁄fig
.
muãx
.
xMuãxFªe
 );

113 
sqlôe3GlobÆC⁄fig
.
muãx
.
	`xMuãxFªe
(
p
);

115 
	}
}

121 
	$sqlôe3_muãx_íãr
(
sqlôe3_muãx
 *
p
){

122 if–
p
 ){

123 
	`as£π
–
sqlôe3GlobÆC⁄fig
.
muãx
.
xMuãxE¡î
 );

124 
sqlôe3GlobÆC⁄fig
.
muãx
.
	`xMuãxE¡î
(
p
);

126 
	}
}

132 
	$sqlôe3_muãx_åy
(
sqlôe3_muãx
 *
p
){

133 
rc
 = 
SQLITE_OK
;

134 if–
p
 ){

135 
	`as£π
–
sqlôe3GlobÆC⁄fig
.
muãx
.
xMuãxTry
 );

136  
sqlôe3GlobÆC⁄fig
.
muãx
.
	`xMuãxTry
(
p
);

138  
rc
;

139 
	}
}

147 
	$sqlôe3_muãx_Àave
(
sqlôe3_muãx
 *
p
){

148 if–
p
 ){

149 
	`as£π
–
sqlôe3GlobÆC⁄fig
.
muãx
.
xMuãxLóve
 );

150 
sqlôe3GlobÆC⁄fig
.
muãx
.
	`xMuãxLóve
(
p
);

152 
	}
}

154 #i‚de‡
NDEBUG


159 
	$sqlôe3_muãx_hñd
(
sqlôe3_muãx
 *
p
){

160 
	`as£π
–
p
==0 || 
sqlôe3GlobÆC⁄fig
.
muãx
.
xMuãxHñd
 );

161  
p
==0 || 
sqlôe3GlobÆC⁄fig
.
muãx
.
	`xMuãxHñd
(p);

162 
	}
}

163 
	$sqlôe3_muãx_nŸhñd
(
sqlôe3_muãx
 *
p
){

164 
	`as£π
–
p
==0 || 
sqlôe3GlobÆC⁄fig
.
muãx
.
xMuãxNŸhñd
 );

165  
p
==0 || 
sqlôe3GlobÆC⁄fig
.
muãx
.
	`xMuãxNŸhñd
(p);

166 
	}
}

	@mutex.h

40 #i‡!
SQLITE_THREADSAFE


41 
	#SQLITE_MUTEX_OMIT


	)

43 #i‡
SQLITE_THREADSAFE
 && !
deföed
(
SQLITE_MUTEX_NOOP
)

44 #i‡
SQLITE_OS_UNIX


45 
	#SQLITE_MUTEX_PTHREADS


	)

46 #ñi‡
SQLITE_OS_WIN


47 
	#SQLITE_MUTEX_W32


	)

49 
	#SQLITE_MUTEX_NOOP


	)

53 #ifde‡
SQLITE_MUTEX_OMIT


57 
	#sqlôe3_muãx_Æloc
(
X
Ë((
sqlôe3_muãx
*)8)

	)

58 
	#sqlôe3_muãx_‰ì
(
X
)

	)

59 
	#sqlôe3_muãx_íãr
(
X
)

	)

60 
	#sqlôe3_muãx_åy
(
X
Ë
SQLITE_OK


	)

61 
	#sqlôe3_muãx_Àave
(
X
)

	)

62 
	#sqlôe3_muãx_hñd
(
X
Ë(()(X),1)

	)

63 
	#sqlôe3_muãx_nŸhñd
(
X
Ë(()(X),1)

	)

64 
	#sqlôe3MuãxAŒoc
(
X
Ë((
sqlôe3_muãx
*)8)

	)

65 
	#sqlôe3MuãxInô
(Ë
SQLITE_OK


	)

66 
	#sqlôe3MuãxEnd
()

	)

67 
	#MUTEX_LOGIC
(
X
)

	)

69 
	#MUTEX_LOGIC
(
X
Ë
	)
X

	@mutex_noop.c

28 
	~"sqlôeI¡.h
"

30 #i‚de‡
SQLITE_MUTEX_OMIT


32 #i‚de‡
SQLITE_DEBUG


38 
	$no›MuãxInô
(){  
SQLITE_OK
; 
	}
}

39 
	$no›MuãxEnd
(){  
SQLITE_OK
; 
	}
}

40 
sqlôe3_muãx
 *
	$no›MuãxAŒoc
(
id
){

41 
	`UNUSED_PARAMETER
(
id
);

42  (
sqlôe3_muãx
*)8;

43 
	}
}

44 
	$no›MuãxFªe
(
sqlôe3_muãx
 *
p
){ 
	`UNUSED_PARAMETER
’); ; 
	}
}

45 
	$no›MuãxE¡î
(
sqlôe3_muãx
 *
p
){ 
	`UNUSED_PARAMETER
’); ; 
	}
}

46 
	$no›MuãxTry
(
sqlôe3_muãx
 *
p
){

47 
	`UNUSED_PARAMETER
(
p
);

48  
SQLITE_OK
;

49 
	}
}

50 
	$no›MuãxLóve
(
sqlôe3_muãx
 *
p
){ 
	`UNUSED_PARAMETER
’); ; 
	}
}

52 
sqlôe3_muãx_mëhods
 c⁄° *
	$sqlôe3No›Muãx
(){

53 c⁄° 
sqlôe3_muãx_mëhods
 
sMuãx
 = {

54 
no›MuãxInô
,

55 
no›MuãxEnd
,

56 
no›MuãxAŒoc
,

57 
no›MuãxFªe
,

58 
no›MuãxE¡î
,

59 
no›MuãxTry
,

60 
no›MuãxLóve
,

66  &
sMuãx
;

67 
	}
}

70 #ifde‡
SQLITE_DEBUG


80 
	ssqlôe3_debug_muãx
 {

81 
	mid
;

82 
	m˙t
;

83 } 
	tsqlôe3_debug_muãx
;

89 
	$debugMuãxHñd
(
sqlôe3_muãx
 *
pX
){

90 
sqlôe3_debug_muãx
 *
p
 = (sqlôe3_debug_muãx*)
pX
;

91  
p
==0 ||Ö->
˙t
>0;

92 
	}
}

93 
	$debugMuãxNŸhñd
(
sqlôe3_muãx
 *
pX
){

94 
sqlôe3_debug_muãx
 *
p
 = (sqlôe3_debug_muãx*)
pX
;

95  
p
==0 ||Ö->
˙t
==0;

96 
	}
}

101 
	$debugMuãxInô
(){  
SQLITE_OK
; 
	}
}

102 
	$debugMuãxEnd
(){  
SQLITE_OK
; 
	}
}

109 
sqlôe3_muãx
 *
	$debugMuãxAŒoc
(
id
){

110 
sqlôe3_debug_muãx
 
aSètic
[
SQLITE_MUTEX_STATIC_VFS3
 - 1];

111 
sqlôe3_debug_muãx
 *
pNew
 = 0;

112  
id
 ){

113 
SQLITE_MUTEX_FAST
:

114 
SQLITE_MUTEX_RECURSIVE
: {

115 
pNew
 = 
	`sqlôe3MÆloc
((*pNew));

116 if–
pNew
 ){

117 
pNew
->
id
 = id;

118 
pNew
->
˙t
 = 0;

123 #ifde‡
SQLITE_ENABLE_API_ARMOR


124 if–
id
-2<0 || id-2>=
	`AºaySize
(
aSètic
) ){

125 ()
SQLITE_MISUSE_BKPT
;

129 
pNew
 = &
aSètic
[
id
-2];

130 
pNew
->
id
 = id;

134  (
sqlôe3_muãx
*)
pNew
;

135 
	}
}

140 
	$debugMuãxFªe
(
sqlôe3_muãx
 *
pX
){

141 
sqlôe3_debug_muãx
 *
p
 = (sqlôe3_debug_muãx*)
pX
;

142 
	`as£π
–
p
->
˙t
==0 );

143 if–
p
->
id
==
SQLITE_MUTEX_RECURSIVE
 ||Ö->id==
SQLITE_MUTEX_FAST
 ){

144 
	`sqlôe3_‰ì
(
p
);

146 #ifde‡
SQLITE_ENABLE_API_ARMOR


147 ()
SQLITE_MISUSE_BKPT
;

150 
	}
}

163 
	$debugMuãxE¡î
(
sqlôe3_muãx
 *
pX
){

164 
sqlôe3_debug_muãx
 *
p
 = (sqlôe3_debug_muãx*)
pX
;

165 
	`as£π
–
p
->
id
==
SQLITE_MUTEX_RECURSIVE
 || 
	`debugMuãxNŸhñd
(
pX
) );

166 
p
->
˙t
++;

167 
	}
}

168 
	$debugMuãxTry
(
sqlôe3_muãx
 *
pX
){

169 
sqlôe3_debug_muãx
 *
p
 = (sqlôe3_debug_muãx*)
pX
;

170 
	`as£π
–
p
->
id
==
SQLITE_MUTEX_RECURSIVE
 || 
	`debugMuãxNŸhñd
(
pX
) );

171 
p
->
˙t
++;

172  
SQLITE_OK
;

173 
	}
}

181 
	$debugMuãxLóve
(
sqlôe3_muãx
 *
pX
){

182 
sqlôe3_debug_muãx
 *
p
 = (sqlôe3_debug_muãx*)
pX
;

183 
	`as£π
–
	`debugMuãxHñd
(
pX
) );

184 
p
->
˙t
--;

185 
	`as£π
–
p
->
id
==
SQLITE_MUTEX_RECURSIVE
 || 
	`debugMuãxNŸhñd
(
pX
) );

186 
	}
}

188 
sqlôe3_muãx_mëhods
 c⁄° *
	$sqlôe3No›Muãx
(){

189 c⁄° 
sqlôe3_muãx_mëhods
 
sMuãx
 = {

190 
debugMuãxInô
,

191 
debugMuãxEnd
,

192 
debugMuãxAŒoc
,

193 
debugMuãxFªe
,

194 
debugMuãxE¡î
,

195 
debugMuãxTry
,

196 
debugMuãxLóve
,

198 
debugMuãxHñd
,

199 
debugMuãxNŸhñd


202  &
sMuãx
;

203 
	}
}

210 #ifde‡
SQLITE_MUTEX_NOOP


211 
sqlôe3_muãx_mëhods
 c⁄° *
	$sqlôe3DeÁu…Muãx
(){

212  
	`sqlôe3No›Muãx
();

213 
	}
}

	@mutex_unix.c

14 
	~"sqlôeI¡.h
"

23 #ifde‡
SQLITE_MUTEX_PTHREADS


25 
	~<±hªad.h
>

32 #i‡
deföed
(
SQLITE_DEBUG
Ë|| deföed(
SQLITE_HOMEGROWN_RECURSIVE_MUTEX
)

33 
	#SQLITE_MUTEX_NREF
 1

	)

35 
	#SQLITE_MUTEX_NREF
 0

	)

41 
	ssqlôe3_muãx
 {

42 
±hªad_muãx_t
 
	mmuãx
;

43 #i‡
SQLITE_MUTEX_NREF
 || 
deföed
(
SQLITE_ENABLE_API_ARMOR
)

44 
	mid
;

46 #i‡
SQLITE_MUTEX_NREF


47 vﬁ©ûê
	mnRef
;

48 vﬁ©ûê
±hªad_t
 
	mow√r
;

49 
	måa˚
;

52 #i‡
SQLITE_MUTEX_NREF


53 
	#SQLITE3_MUTEX_INITIALIZER
 {
PTHREAD_MUTEX_INITIALIZER
,0,0,(
±hªad_t
)0,0}

	)

54 #ñi‡
deföed
(
SQLITE_ENABLE_API_ARMOR
)

55 
	#SQLITE3_MUTEX_INITIALIZER
 { 
PTHREAD_MUTEX_INITIALIZER
, 0 }

	)

57 
	#SQLITE3_MUTEX_INITIALIZER
 { 
PTHREAD_MUTEX_INITIALIZER
 }

	)

76 #i‡!
deföed
(
NDEBUG
Ë|| deföed(
SQLITE_DEBUG
)

77 
	$±hªadMuãxHñd
(
sqlôe3_muãx
 *
p
){

78  (
p
->
nRef
!=0 && 
	`±hªad_equÆ
’->
ow√r
, 
	`±hªad_£lf
()));

79 
	}
}

80 
	$±hªadMuãxNŸhñd
(
sqlôe3_muãx
 *
p
){

81  
p
->
nRef
==0 || 
	`±hªad_equÆ
’->
ow√r
, 
	`±hªad_£lf
())==0;

82 
	}
}

90 
	$sqlôe3Mem‹yB¨rõr
(){

91 #i‡
	`deföed
(
SQLITE_MEMORY_BARRIER
)

92 
SQLITE_MEMORY_BARRIER
;

93 #ñi‡
	`deföed
(
__GNUC__
Ë&& 
GCC_VERSION
>=4001000

94 
	`__sync_synchr⁄ize
();

96 
	}
}

101 
	$±hªadMuãxInô
(){  
SQLITE_OK
; 
	}
}

102 
	$±hªadMuãxEnd
(){  
SQLITE_OK
; 
	}
}

152 
sqlôe3_muãx
 *
	$±hªadMuãxAŒoc
(
iTy≥
){

153 
sqlôe3_muãx
 
°©icMuãxes
[] = {

154 
SQLITE3_MUTEX_INITIALIZER
,

155 
SQLITE3_MUTEX_INITIALIZER
,

156 
SQLITE3_MUTEX_INITIALIZER
,

157 
SQLITE3_MUTEX_INITIALIZER
,

158 
SQLITE3_MUTEX_INITIALIZER
,

159 
SQLITE3_MUTEX_INITIALIZER
,

160 
SQLITE3_MUTEX_INITIALIZER
,

161 
SQLITE3_MUTEX_INITIALIZER
,

162 
SQLITE3_MUTEX_INITIALIZER
,

163 
SQLITE3_MUTEX_INITIALIZER
,

164 
SQLITE3_MUTEX_INITIALIZER
,

165 
SQLITE3_MUTEX_INITIALIZER


167 
sqlôe3_muãx
 *
p
;

168  
iTy≥
 ){

169 
SQLITE_MUTEX_RECURSIVE
: {

170 
p
 = 
	`sqlôe3MÆlocZîo
( (*p) );

171 if–
p
 ){

172 #ifde‡
SQLITE_HOMEGROWN_RECURSIVE_MUTEX


175 
	`±hªad_muãx_öô
(&
p
->
muãx
, 0);

178 
±hªad_muãx©å_t
 
ªcursiveAâr
;

179 
	`±hªad_muãx©å_öô
(&
ªcursiveAâr
);

180 
	`±hªad_muãx©å_£ây≥
(&
ªcursiveAâr
, 
PTHREAD_MUTEX_RECURSIVE
);

181 
	`±hªad_muãx_öô
(&
p
->
muãx
, &
ªcursiveAâr
);

182 
	`±hªad_muãx©å_de°roy
(&
ªcursiveAâr
);

187 
SQLITE_MUTEX_FAST
: {

188 
p
 = 
	`sqlôe3MÆlocZîo
( (*p) );

189 if–
p
 ){

190 
	`±hªad_muãx_öô
(&
p
->
muãx
, 0);

195 #ifde‡
SQLITE_ENABLE_API_ARMOR


196 if–
iTy≥
-2<0 || iTy≥-2>=
	`AºaySize
(
°©icMuãxes
) ){

197 ()
SQLITE_MISUSE_BKPT
;

201 
p
 = &
°©icMuãxes
[
iTy≥
-2];

205 #i‡
SQLITE_MUTEX_NREF
 || 
	`deföed
(
SQLITE_ENABLE_API_ARMOR
)

206 if–
p
 )Ö->
id
 = 
iTy≥
;

208  
p
;

209 
	}
}

217 
	$±hªadMuãxFªe
(
sqlôe3_muãx
 *
p
){

218 
	`as£π
–
p
->
nRef
==0 );

219 #i‡
SQLITE_ENABLE_API_ARMOR


220 if–
p
->
id
==
SQLITE_MUTEX_FAST
 ||Ö->id==
SQLITE_MUTEX_RECURSIVE
 )

223 
	`±hªad_muãx_de°roy
(&
p
->
muãx
);

224 
	`sqlôe3_‰ì
(
p
);

226 #ifde‡
SQLITE_ENABLE_API_ARMOR


228 ()
SQLITE_MISUSE_BKPT
;

231 
	}
}

244 
	$±hªadMuãxE¡î
(
sqlôe3_muãx
 *
p
){

245 
	`as£π
–
p
->
id
==
SQLITE_MUTEX_RECURSIVE
 || 
	`±hªadMuãxNŸhñd
(p) );

247 #ifde‡
SQLITE_HOMEGROWN_RECURSIVE_MUTEX


259 
±hªad_t
 
£lf
 = 
	`±hªad_£lf
();

260 if–
p
->
nRef
>0 && 
	`±hªad_equÆ
’->
ow√r
, 
£lf
) ){

261 
p
->
nRef
++;

263 
	`±hªad_muãx_lock
(&
p
->
muãx
);

264 
	`as£π
–
p
->
nRef
==0 );

265 
p
->
ow√r
 = 
£lf
;

266 
p
->
nRef
 = 1;

272 
	`±hªad_muãx_lock
(&
p
->
muãx
);

273 #i‡
SQLITE_MUTEX_NREF


274 
	`as£π
–
p
->
nRef
>0 ||Ö->
ow√r
==0 );

275 
p
->
ow√r
 = 
	`±hªad_£lf
();

276 
p
->
nRef
++;

280 #ifde‡
SQLITE_DEBUG


281 if–
p
->
åa˚
 ){

282 
	`¥ötf
("íã∏muãx %∞(%dËwôhÇRef=%d\n", 
p
,Ö->
åa˚
,Ö->
nRef
);

285 
	}
}

286 
	$±hªadMuãxTry
(
sqlôe3_muãx
 *
p
){

287 
rc
;

288 
	`as£π
–
p
->
id
==
SQLITE_MUTEX_RECURSIVE
 || 
	`±hªadMuãxNŸhñd
(p) );

290 #ifde‡
SQLITE_HOMEGROWN_RECURSIVE_MUTEX


302 
±hªad_t
 
£lf
 = 
	`±hªad_£lf
();

303 if–
p
->
nRef
>0 && 
	`±hªad_equÆ
’->
ow√r
, 
£lf
) ){

304 
p
->
nRef
++;

305 
rc
 = 
SQLITE_OK
;

306 }if–
	`±hªad_muãx_åylock
(&
p
->
muãx
)==0 ){

307 
	`as£π
–
p
->
nRef
==0 );

308 
p
->
ow√r
 = 
£lf
;

309 
p
->
nRef
 = 1;

310 
rc
 = 
SQLITE_OK
;

312 
rc
 = 
SQLITE_BUSY
;

318 if–
	`±hªad_muãx_åylock
(&
p
->
muãx
)==0 ){

319 #i‡
SQLITE_MUTEX_NREF


320 
p
->
ow√r
 = 
	`±hªad_£lf
();

321 
p
->
nRef
++;

323 
rc
 = 
SQLITE_OK
;

325 
rc
 = 
SQLITE_BUSY
;

329 #ifde‡
SQLITE_DEBUG


330 if–
rc
==
SQLITE_OK
 && 
p
->
åa˚
 ){

331 
	`¥ötf
("íã∏muãx %∞(%dËwôhÇRef=%d\n", 
p
,Ö->
åa˚
,Ö->
nRef
);

334  
rc
;

335 
	}
}

343 
	$±hªadMuãxLóve
(
sqlôe3_muãx
 *
p
){

344 
	`as£π
–
	`±hªadMuãxHñd
(
p
) );

345 #i‡
SQLITE_MUTEX_NREF


346 
p
->
nRef
--;

347 if–
p
->
nRef
==0 )Ö->
ow√r
 = 0;

349 
	`as£π
–
p
->
nRef
==0 ||Ö->
id
==
SQLITE_MUTEX_RECURSIVE
 );

351 #ifde‡
SQLITE_HOMEGROWN_RECURSIVE_MUTEX


352 if–
p
->
nRef
==0 ){

353 
	`±hªad_muãx_u∆ock
(&
p
->
muãx
);

356 
	`±hªad_muãx_u∆ock
(&
p
->
muãx
);

359 #ifde‡
SQLITE_DEBUG


360 if–
p
->
åa˚
 ){

361 
	`¥ötf
("Àavêmuãx %∞(%dËwôhÇRef=%d\n", 
p
,Ö->
åa˚
,Ö->
nRef
);

364 
	}
}

366 
sqlôe3_muãx_mëhods
 c⁄° *
	$sqlôe3DeÁu…Muãx
(){

367 c⁄° 
sqlôe3_muãx_mëhods
 
sMuãx
 = {

368 
±hªadMuãxInô
,

369 
±hªadMuãxEnd
,

370 
±hªadMuãxAŒoc
,

371 
±hªadMuãxFªe
,

372 
±hªadMuãxE¡î
,

373 
±hªadMuãxTry
,

374 
±hªadMuãxLóve
,

375 #ifde‡
SQLITE_DEBUG


376 
±hªadMuãxHñd
,

377 
±hªadMuãxNŸhñd


384  &
sMuãx
;

385 
	}
}

	@mutex_w32.c

14 
	~"sqlôeI¡.h
"

16 #i‡
SQLITE_OS_WIN


20 
	~"os_comm⁄.h
"

25 
	~"os_wö.h
"

32 #ifde‡
SQLITE_MUTEX_W32


37 
	ssqlôe3_muãx
 {

38 
CRITICAL_SECTION
 
	mmuãx
;

39 
	mid
;

40 #ifde‡
SQLITE_DEBUG


41 vﬁ©ûê
	mnRef
;

42 vﬁ©ûê
DWORD
 
	mow√r
;

43 vﬁ©ûê
	måa˚
;

52 
	#SQLITE_W32_MUTEX_INITIALIZER
 { 0 }

	)

54 #ifde‡
SQLITE_DEBUG


55 
	#SQLITE3_MUTEX_INITIALIZER
 { 
SQLITE_W32_MUTEX_INITIALIZER
, 0, \

56 0L, (
DWORD
)0, 0 }

	)

58 
	#SQLITE3_MUTEX_INITIALIZER
 { 
SQLITE_W32_MUTEX_INITIALIZER
, 0 }

	)

61 #ifde‡
SQLITE_DEBUG


66 
	$wöMuãxHñd
(
sqlôe3_muãx
 *
p
){

67  
p
->
nRef
!=0 &&Ö->
ow√r
==
	`GëCuºítThªadId
();

68 
	}
}

70 
	$wöMuãxNŸhñd2
(
sqlôe3_muãx
 *
p
, 
DWORD
 
tid
){

71  
p
->
nRef
==0 ||Ö->
ow√r
!=
tid
;

72 
	}
}

74 
	$wöMuãxNŸhñd
(
sqlôe3_muãx
 *
p
){

75 
DWORD
 
tid
 = 
	`GëCuºítThªadId
();

76  
	`wöMuãxNŸhñd2
(
p
, 
tid
);

77 
	}
}

85 
	$sqlôe3Mem‹yB¨rõr
(){

86 #i‡
	`deföed
(
SQLITE_MEMORY_BARRIER
)

87 
SQLITE_MEMORY_BARRIER
;

88 #ñi‡
	`deföed
(
__GNUC__
)

89 
	`__sync_synchr⁄ize
();

90 #ñi‡!
	`deföed
(
SQLITE_DISABLE_INTRINSIC
) && \

91 
	`deföed
(
_MSC_VER
) && _MSC_VER>=1300

92 
	`_RódWrôeB¨rõr
();

93 #ñi‡
	`deföed
(
Mem‹yB¨rõr
)

94 
	`Mem‹yB¨rõr
();

96 
	}
}

101 
sqlôe3_muãx
 
	gwöMuãx_°©icMuãxes
[] = {

102 
SQLITE3_MUTEX_INITIALIZER
,

103 
SQLITE3_MUTEX_INITIALIZER
,

104 
SQLITE3_MUTEX_INITIALIZER
,

105 
SQLITE3_MUTEX_INITIALIZER
,

106 
SQLITE3_MUTEX_INITIALIZER
,

107 
SQLITE3_MUTEX_INITIALIZER
,

108 
SQLITE3_MUTEX_INITIALIZER
,

109 
SQLITE3_MUTEX_INITIALIZER
,

110 
SQLITE3_MUTEX_INITIALIZER
,

111 
SQLITE3_MUTEX_INITIALIZER
,

112 
SQLITE3_MUTEX_INITIALIZER
,

113 
SQLITE3_MUTEX_INITIALIZER


116 
	gwöMuãx_isInô
 = 0;

117 
	gwöMuãx_isNt
 = -1;

123 
LONG
 
SQLITE_WIN32_VOLATILE
 
	gwöMuãx_lock
 = 0;

125 
sqlôe3_wö32_is_¡
();

126 
sqlôe3_wö32_¶ìp
(
DWORD
 
mûli£c⁄ds
);

128 
	$wöMuãxInô
(){

130 if–
	`I¡îlockedCom∑ªExch™ge
(&
wöMuãx_lock
, 1, 0)==0 ){

131 
i
;

132 
i
=0; i<
	`AºaySize
(
wöMuãx_°©icMuãxes
); i++){

133 #i‡
SQLITE_OS_WINRT


134 
	`InôülizeCrôiˇlSe˘i⁄Ex
(&
wöMuãx_°©icMuãxes
[
i
].
muãx
, 0, 0);

136 
	`InôülizeCrôiˇlSe˘i⁄
(&
wöMuãx_°©icMuãxes
[
i
].
muãx
);

139 
wöMuãx_isInô
 = 1;

143  !
wöMuãx_isInô
 ){

144 
	`sqlôe3_wö32_¶ìp
(1);

147  
SQLITE_OK
;

148 
	}
}

150 
	$wöMuãxEnd
(){

153 if–
	`I¡îlockedCom∑ªExch™ge
(&
wöMuãx_lock
, 0, 1)==1 ){

154 if–
wöMuãx_isInô
==1 ){

155 
i
;

156 
i
=0; i<
	`AºaySize
(
wöMuãx_°©icMuãxes
); i++){

157 
	`DñëeCrôiˇlSe˘i⁄
(&
wöMuãx_°©icMuãxes
[
i
].
muãx
);

159 
wöMuãx_isInô
 = 0;

162  
SQLITE_OK
;

163 
	}
}

213 
sqlôe3_muãx
 *
	$wöMuãxAŒoc
(
iTy≥
){

214 
sqlôe3_muãx
 *
p
;

216  
iTy≥
 ){

217 
SQLITE_MUTEX_FAST
:

218 
SQLITE_MUTEX_RECURSIVE
: {

219 
p
 = 
	`sqlôe3MÆlocZîo
( (*p) );

220 if–
p
 ){

221 
p
->
id
 = 
iTy≥
;

222 #ifde‡
SQLITE_DEBUG


223 #ifde‡
SQLITE_WIN32_MUTEX_TRACE_DYNAMIC


224 
p
->
åa˚
 = 1;

227 #i‡
SQLITE_OS_WINRT


228 
	`InôülizeCrôiˇlSe˘i⁄Ex
(&
p
->
muãx
, 0, 0);

230 
	`InôülizeCrôiˇlSe˘i⁄
(&
p
->
muãx
);

236 #ifde‡
SQLITE_ENABLE_API_ARMOR


237 if–
iTy≥
-2<0 || iTy≥-2>=
	`AºaySize
(
wöMuãx_°©icMuãxes
) ){

238 ()
SQLITE_MISUSE_BKPT
;

242 
p
 = &
wöMuãx_°©icMuãxes
[
iTy≥
-2];

243 
p
->
id
 = 
iTy≥
;

244 #ifde‡
SQLITE_DEBUG


245 #ifde‡
SQLITE_WIN32_MUTEX_TRACE_STATIC


246 
p
->
åa˚
 = 1;

252  
p
;

253 
	}
}

261 
	$wöMuãxFªe
(
sqlôe3_muãx
 *
p
){

262 
	`as£π
–
p
 );

263 
	`as£π
–
p
->
nRef
==0 &&Ö->
ow√r
==0 );

264 if–
p
->
id
==
SQLITE_MUTEX_FAST
 ||Ö->id==
SQLITE_MUTEX_RECURSIVE
 ){

265 
	`DñëeCrôiˇlSe˘i⁄
(&
p
->
muãx
);

266 
	`sqlôe3_‰ì
(
p
);

268 #ifde‡
SQLITE_ENABLE_API_ARMOR


269 ()
SQLITE_MISUSE_BKPT
;

272 
	}
}

285 
	$wöMuãxE¡î
(
sqlôe3_muãx
 *
p
){

286 #i‡
	`deföed
(
SQLITE_DEBUG
Ë|| deföed(
SQLITE_TEST
)

287 
DWORD
 
tid
 = 
	`GëCuºítThªadId
();

289 #ifde‡
SQLITE_DEBUG


290 
	`as£π
–
p
 );

291 
	`as£π
–
p
->
id
==
SQLITE_MUTEX_RECURSIVE
 || 
	`wöMuãxNŸhñd2
’, 
tid
) );

293 
	`as£π
–
p
 );

295 
	`as£π
–
wöMuãx_isInô
==1 );

296 
	`E¡îCrôiˇlSe˘i⁄
(&
p
->
muãx
);

297 #ifde‡
SQLITE_DEBUG


298 
	`as£π
–
p
->
nRef
>0 ||Ö->
ow√r
==0 );

299 
p
->
ow√r
 = 
tid
;

300 
p
->
nRef
++;

301 if–
p
->
åa˚
 ){

302 
	`OSTRACE
(("ENTER-MUTEXÅid=%lu, mutex=%p (%d),ÇRef=%d\n",

303 
tid
, 
p
,Ö->
åa˚
,Ö->
nRef
));

306 
	}
}

308 
	$wöMuãxTry
(
sqlôe3_muãx
 *
p
){

309 #i‡
	`deföed
(
SQLITE_DEBUG
Ë|| deföed(
SQLITE_TEST
)

310 
DWORD
 
tid
 = 
	`GëCuºítThªadId
();

312 
rc
 = 
SQLITE_BUSY
;

313 
	`as£π
–
p
 );

314 
	`as£π
–
p
->
id
==
SQLITE_MUTEX_RECURSIVE
 || 
	`wöMuãxNŸhñd2
’, 
tid
) );

326 #i‡
	`deföed
(
_WIN32_WINNT
) && _WIN32_WINNT >= 0x0400

327 
	`as£π
–
wöMuãx_isInô
==1 );

328 
	`as£π
–
wöMuãx_isNt
>=-1 && winMutex_isNt<=1 );

329 if–
wöMuãx_isNt
<0 ){

330 
wöMuãx_isNt
 = 
	`sqlôe3_wö32_is_¡
();

332 
	`as£π
–
wöMuãx_isNt
==0 || winMutex_isNt==1 );

333 if–
wöMuãx_isNt
 && 
	`TryE¡îCrôiˇlSe˘i⁄
(&
p
->
muãx
) ){

334 #ifde‡
SQLITE_DEBUG


335 
p
->
ow√r
 = 
tid
;

336 
p
->
nRef
++;

338 
rc
 = 
SQLITE_OK
;

341 
	`UNUSED_PARAMETER
(
p
);

343 #ifde‡
SQLITE_DEBUG


344 if–
p
->
åa˚
 ){

345 
	`OSTRACE
(("TRY-MUTEXÅid=%lu, mutex=%p (%d), owner=%lu,ÇRef=%d,Ñc=%s\n",

346 
tid
, 
p
,Ö->
åa˚
,Ö->
ow√r
,Ö->
nRef
, 
	`sqlôe3EºName
(
rc
)));

349  
rc
;

350 
	}
}

358 
	$wöMuãxLóve
(
sqlôe3_muãx
 *
p
){

359 #i‡
	`deföed
(
SQLITE_DEBUG
Ë|| deföed(
SQLITE_TEST
)

360 
DWORD
 
tid
 = 
	`GëCuºítThªadId
();

362 
	`as£π
–
p
 );

363 #ifde‡
SQLITE_DEBUG


364 
	`as£π
–
p
->
nRef
>0 );

365 
	`as£π
–
p
->
ow√r
==
tid
 );

366 
p
->
nRef
--;

367 if–
p
->
nRef
==0 )Ö->
ow√r
 = 0;

368 
	`as£π
–
p
->
nRef
==0 ||Ö->
id
==
SQLITE_MUTEX_RECURSIVE
 );

370 
	`as£π
–
wöMuãx_isInô
==1 );

371 
	`LóveCrôiˇlSe˘i⁄
(&
p
->
muãx
);

372 #ifde‡
SQLITE_DEBUG


373 if–
p
->
åa˚
 ){

374 
	`OSTRACE
(("LEAVE-MUTEXÅid=%lu, mutex=%p (%d),ÇRef=%d\n",

375 
tid
, 
p
,Ö->
åa˚
,Ö->
nRef
));

378 
	}
}

380 
sqlôe3_muãx_mëhods
 c⁄° *
	$sqlôe3DeÁu…Muãx
(){

381 c⁄° 
sqlôe3_muãx_mëhods
 
sMuãx
 = {

382 
wöMuãxInô
,

383 
wöMuãxEnd
,

384 
wöMuãxAŒoc
,

385 
wöMuãxFªe
,

386 
wöMuãxE¡î
,

387 
wöMuãxTry
,

388 
wöMuãxLóve
,

389 #ifde‡
SQLITE_DEBUG


390 
wöMuãxHñd
,

391 
wöMuãxNŸhñd


397  &
sMuãx
;

398 
	}
}

	@notify.c

16 
	~"sqlôeI¡.h
"

17 
	~"båìI¡.h
"

20 #ifde‡
SQLITE_ENABLE_UNLOCK_NOTIFY


31 
	#as£πMuãxHñd
() \

32 
	`as£π
–
	`sqlôe3_muãx_hñd
(
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MASTER
)Ë)

	)

40 
sqlôe3
 *
SQLITE_WSD
 
	gsqlôe3BlockedLi°
 = 0;

42 #i‚de‡
NDEBUG


57 
	$checkLi°Pr›îtõs
(
sqlôe3
 *
db
){

58 
sqlôe3
 *
p
;

59 
p
=
sqlôe3BlockedLi°
;Ö;Öı->
pNextBlocked
){

60 
£í
 = 0;

61 
sqlôe3
 *
p2
;

64 
	`as£π
–
p
->
pU∆ockC⁄√˘i⁄
 ||Ö->
pBlockögC⁄√˘i⁄
 );

67 
p2
=
sqlôe3BlockedLi°
;Ö2!=
p
;Ö2ı2->
pNextBlocked
){

68 if–
p2
->
xU∆ockNŸify
==
p
->xU∆ockNŸify ) 
£í
 = 1;

69 
	`as£π
–
p2
->
xU∆ockNŸify
==
p
->xU∆ockNŸify || !
£í
 );

70 
	`as£π
–
db
==0 || 
p
->
pU∆ockC⁄√˘i⁄
!=db );

71 
	`as£π
–
db
==0 || 
p
->
pBlockögC⁄√˘i⁄
!=db );

74 
	}
}

76 
	#checkLi°Pr›îtõs
(
x
)

	)

83 
	$ªmoveFromBlockedLi°
(
sqlôe3
 *
db
){

84 
sqlôe3
 **
µ
;

85 
	`as£πMuãxHñd
();

86 
µ
=&
sqlôe3BlockedLi°
; *µ;Ö∞&(*µ)->
pNextBlocked
){

87 if–*
µ
==
db
 ){

88 *
µ
 = (*µ)->
pNextBlocked
;

92 
	}
}

98 
	$addToBlockedLi°
(
sqlôe3
 *
db
){

99 
sqlôe3
 **
µ
;

100 
	`as£πMuãxHñd
();

102 
µ
=&
sqlôe3BlockedLi°
;

103 *
µ
 && (*µ)->
xU∆ockNŸify
!=
db
->xUnlockNotify;

104 
µ
=&(*µ)->
pNextBlocked


106 
db
->
pNextBlocked
 = *
µ
;

107 *
µ
 = 
db
;

108 
	}
}

113 
	$íãrMuãx
(){

114 
	`sqlôe3_muãx_íãr
(
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MASTER
));

115 
	`checkLi°Pr›îtõs
(0);

116 
	}
}

121 
	$ÀaveMuãx
(){

122 
	`as£πMuãxHñd
();

123 
	`checkLi°Pr›îtõs
(0);

124 
	`sqlôe3_muãx_Àave
(
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MASTER
));

125 
	}
}

148 
sqlôe3_u∆ock_nŸify
(

149 
sqlôe3
 *
db
,

150 (*
xNŸify
)(**, ),

151 *
pArg


153 
rc
 = 
SQLITE_OK
;

155 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

156 
	`íãrMuãx
();

158 if–
xNŸify
==0 ){

159 
	`ªmoveFromBlockedLi°
(
db
);

160 
db
->
pBlockögC⁄√˘i⁄
 = 0;

161 
db
->
pU∆ockC⁄√˘i⁄
 = 0;

162 
db
->
xU∆ockNŸify
 = 0;

163 
db
->
pU∆ockArg
 = 0;

164 }if–0==
db
->
pBlockögC⁄√˘i⁄
 ){

169 
	`xNŸify
(&
pArg
, 1);

171 
sqlôe3
 *
p
;

173 
p
=
db
->
pBlockögC⁄√˘i⁄
;Ö &&Ö!=db;Öı->
pU∆ockC⁄√˘i⁄
){}

174 if–
p
 ){

175 
rc
 = 
SQLITE_LOCKED
;

177 
db
->
pU∆ockC⁄√˘i⁄
 = db->
pBlockögC⁄√˘i⁄
;

178 
db
->
xU∆ockNŸify
 = 
xNŸify
;

179 
db
->
pU∆ockArg
 = 
pArg
;

180 
	`ªmoveFromBlockedLi°
(
db
);

181 
	`addToBlockedLi°
(
db
);

185 
	`ÀaveMuãx
();

186 
	`as£π
–!
db
->
mÆlocFaûed
 );

187 
	`sqlôe3Eº‹WôhMsg
(
db
, 
rc
, (rc?"database is deadlocked":0));

188 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

189  
rc
;

190 
	}
}

198 
	$sqlôe3C⁄√˘i⁄Blocked
(
sqlôe3
 *
db
, sqlôe3 *
pBlockî
){

199 
	`íãrMuãx
();

200 if–
db
->
pBlockögC⁄√˘i⁄
==0 && db->
pU∆ockC⁄√˘i⁄
==0 ){

201 
	`addToBlockedLi°
(
db
);

203 
db
->
pBlockögC⁄√˘i⁄
 = 
pBlockî
;

204 
	`ÀaveMuãx
();

205 
	}
}

226 
	$sqlôe3C⁄√˘i⁄U∆ocked
(
sqlôe3
 *
db
){

227 (*
xU∆ockNŸify
)(**, ) = 0;

228 
nArg
 = 0;

229 
sqlôe3
 **
µ
;

230 **
aArg
;

231 **
aDyn
 = 0;

232 *
aSètic
[16];

234 
aArg
 = 
aSètic
;

235 
	`íãrMuãx
();

238 
µ
=&
sqlôe3BlockedLi°
; *pp; ){

239 
sqlôe3
 *
p
 = *
µ
;

242 if–
p
->
pBlockögC⁄√˘i⁄
==
db
 ){

243 
p
->
pBlockögC⁄√˘i⁄
 = 0;

247 if–
p
->
pU∆ockC⁄√˘i⁄
==
db
 ){

248 
	`as£π
–
p
->
xU∆ockNŸify
 );

249 if–
p
->
xU∆ockNŸify
!=xU∆ockNŸify && 
nArg
!=0 ){

250 
	`xU∆ockNŸify
(
aArg
, 
nArg
);

251 
nArg
 = 0;

254 
	`sqlôe3BegöBíignMÆloc
();

255 
	`as£π
–
aArg
==
aDyn
 || (aDyn==0 &&áArg==
aSètic
) );

256 
	`as£π
–
nArg
<=()
	`AºaySize
(
aSètic
Ë|| 
aArg
==
aDyn
 );

257 if–(!
aDyn
 && 
nArg
==()
	`AºaySize
(
aSètic
))

258 || (
aDyn
 && 
nArg
==()(
	`sqlôe3MÆlocSize
(aDyn)/(*)))

261 **
pNew
 = (**)
	`sqlôe3MÆloc
(
nArg
*(*)*2);

262 if–
pNew
 ){

263 
	`mem˝y
(
pNew
, 
aArg
, 
nArg
*(*));

264 
	`sqlôe3_‰ì
(
aDyn
);

265 
aDyn
 = 
aArg
 = 
pNew
;

291 
	`xU∆ockNŸify
(
aArg
, 
nArg
);

292 
nArg
 = 0;

295 
	`sqlôe3EndBíignMÆloc
();

297 
aArg
[
nArg
++] = 
p
->
pU∆ockArg
;

298 
xU∆ockNŸify
 = 
p
->xUnlockNotify;

299 
p
->
pU∆ockC⁄√˘i⁄
 = 0;

300 
p
->
xU∆ockNŸify
 = 0;

301 
p
->
pU∆ockArg
 = 0;

305 if–
p
->
pBlockögC⁄√˘i⁄
==0 &&Ö->
pU∆ockC⁄√˘i⁄
==0 ){

307 *
µ
 = 
p
->
pNextBlocked
;

308 
p
->
pNextBlocked
 = 0;

310 
µ
 = &
p
->
pNextBlocked
;

314 if–
nArg
!=0 ){

315 
	`xU∆ockNŸify
(
aArg
, 
nArg
);

317 
	`sqlôe3_‰ì
(
aDyn
);

318 
	`ÀaveMuãx
();

319 
	}
}

325 
	$sqlôe3C⁄√˘i⁄Clo£d
(
sqlôe3
 *
db
){

326 
	`sqlôe3C⁄√˘i⁄U∆ocked
(
db
);

327 
	`íãrMuãx
();

328 
	`ªmoveFromBlockedLi°
(
db
);

329 
	`checkLi°Pr›îtõs
(
db
);

330 
	`ÀaveMuãx
();

331 
	}
}

	@os.c

16 
	#_SQLITE_OS_C_
 1

	)

17 
	~"sqlôeI¡.h
"

18 #unde‡
_SQLITE_OS_C_


25 #i‡
deföed
(
SQLITE_TEST
)

26 
	gsqlôe3_io_îr‹_hô
 = 0;

27 
	gsqlôe3_io_îr‹_h¨dhô
 = 0;

28 
	gsqlôe3_io_îr‹_≥ndög
 = 0;

29 
	gsqlôe3_io_îr‹_≥rsi°
 = 0;

30 
	gsqlôe3_io_îr‹_bíign
 = 0;

31 
	gsqlôe3_diskfuŒ_≥ndög
 = 0;

32 
	gsqlôe3_diskfuŒ
 = 0;

38 #i‡
deföed
(
SQLITE_TEST
)

39 
	gsqlôe3_›í_fûe_cou¡
 = 0;

66 #i‡
deföed
(
SQLITE_TEST
)

67 
	gsqlôe3_memdebug_vfs_oom_ã°
 = 1;

68 
	#DO_OS_MALLOC_TEST
(
x
) \

69 i‡(
sqlôe3_memdebug_vfs_oom_ã°
 && (!
x
 || !
	`sqlôe3Jou∫ÆIsInMem‹y
(x))) { \

70 *
pT°AŒoc
 = 
	`sqlôe3MÆloc
(10); \

71 i‡(!
pT°AŒoc
Ë 
SQLITE_IOERR_NOMEM_BKPT
; \

72 
	`sqlôe3_‰ì
(
pT°AŒoc
); \

73 }

	)

75 
	#DO_OS_MALLOC_TEST
(
x
)

	)

84 
	$sqlôe3OsClo£
(
sqlôe3_fûe
 *
pId
){

85 if–
pId
->
pMëhods
 ){

86 
pId
->
pMëhods
->
	`xClo£
(pId);

87 
pId
->
pMëhods
 = 0;

89 
	}
}

90 
	$sqlôe3OsRód
(
sqlôe3_fûe
 *
id
, *
pBuf
, 
amt
, 
i64
 
off£t
){

91 
	`DO_OS_MALLOC_TEST
(
id
);

92  
id
->
pMëhods
->
	`xRód
(id, 
pBuf
, 
amt
, 
off£t
);

93 
	}
}

94 
	$sqlôe3OsWrôe
(
sqlôe3_fûe
 *
id
, c⁄° *
pBuf
, 
amt
, 
i64
 
off£t
){

95 
	`DO_OS_MALLOC_TEST
(
id
);

96  
id
->
pMëhods
->
	`xWrôe
(id, 
pBuf
, 
amt
, 
off£t
);

97 
	}
}

98 
	$sqlôe3OsTrunˇã
(
sqlôe3_fûe
 *
id
, 
i64
 
size
){

99  
id
->
pMëhods
->
	`xTrunˇã
(id, 
size
);

100 
	}
}

101 
	$sqlôe3OsSync
(
sqlôe3_fûe
 *
id
, 
Êags
){

102 
	`DO_OS_MALLOC_TEST
(
id
);

103  
id
->
pMëhods
->
	`xSync
(id, 
Êags
);

104 
	}
}

105 
	$sqlôe3OsFûeSize
(
sqlôe3_fûe
 *
id
, 
i64
 *
pSize
){

106 
	`DO_OS_MALLOC_TEST
(
id
);

107  
id
->
pMëhods
->
	`xFûeSize
(id, 
pSize
);

108 
	}
}

109 
	$sqlôe3OsLock
(
sqlôe3_fûe
 *
id
, 
lockTy≥
){

110 
	`DO_OS_MALLOC_TEST
(
id
);

111  
id
->
pMëhods
->
	`xLock
(id, 
lockTy≥
);

112 
	}
}

113 
	$sqlôe3OsU∆ock
(
sqlôe3_fûe
 *
id
, 
lockTy≥
){

114  
id
->
pMëhods
->
	`xU∆ock
(id, 
lockTy≥
);

115 
	}
}

116 
	$sqlôe3OsCheckRe£rvedLock
(
sqlôe3_fûe
 *
id
, *
pResOut
){

117 
	`DO_OS_MALLOC_TEST
(
id
);

118  
id
->
pMëhods
->
	`xCheckRe£rvedLock
(id, 
pResOut
);

119 
	}
}

129 
	$sqlôe3OsFûeC⁄åﬁ
(
sqlôe3_fûe
 *
id
, 
›
, *
pArg
){

130 #ifde‡
SQLITE_TEST


131 if–
›
!=
SQLITE_FCNTL_COMMIT_PHASETWO
 ){

142 
	`DO_OS_MALLOC_TEST
(
id
);

145  
id
->
pMëhods
->
	`xFûeC⁄åﬁ
(id, 
›
, 
pArg
);

146 
	}
}

147 
	$sqlôe3OsFûeC⁄åﬁHöt
(
sqlôe3_fûe
 *
id
, 
›
, *
pArg
){

148 ()
id
->
pMëhods
->
	`xFûeC⁄åﬁ
(id, 
›
, 
pArg
);

149 
	}
}

151 
	$sqlôe3OsSe˘‹Size
(
sqlôe3_fûe
 *
id
){

152 (*
xSe˘‹Size
)(
sqlôe3_fûe
*Ë
id
->
pMëhods
->xSectorSize;

153  (
xSe˘‹Size
 ? 
	`xSe˘‹Size
(
id
Ë: 
SQLITE_DEFAULT_SECTOR_SIZE
);

154 
	}
}

155 
	$sqlôe3OsDevi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
 *
id
){

156  
id
->
pMëhods
->
	`xDevi˚Ch¨a˘îi°ics
(id);

157 
	}
}

158 
	$sqlôe3OsShmLock
(
sqlôe3_fûe
 *
id
, 
off£t
, 
n
, 
Êags
){

159  
id
->
pMëhods
->
	`xShmLock
(id, 
off£t
, 
n
, 
Êags
);

160 
	}
}

161 
	$sqlôe3OsShmB¨rõr
(
sqlôe3_fûe
 *
id
){

162 
id
->
pMëhods
->
	`xShmB¨rõr
(id);

163 
	}
}

164 
	$sqlôe3OsShmUnm≠
(
sqlôe3_fûe
 *
id
, 
dñëeFœg
){

165  
id
->
pMëhods
->
	`xShmUnm≠
(id, 
dñëeFœg
);

166 
	}
}

167 
	$sqlôe3OsShmM≠
(

168 
sqlôe3_fûe
 *
id
,

169 
iPage
,

170 
pgsz
,

171 
bExãnd
,

172 vﬁ©ûê**
µ


174 
	`DO_OS_MALLOC_TEST
(
id
);

175  
id
->
pMëhods
->
	`xShmM≠
(id, 
iPage
, 
pgsz
, 
bExãnd
, 
µ
);

176 
	}
}

178 #i‡
SQLITE_MAX_MMAP_SIZE
>0

180 
	$sqlôe3OsFëch
(
sqlôe3_fûe
 *
id
, 
i64
 
iOff
, 
iAmt
, **
µ
){

181 
	`DO_OS_MALLOC_TEST
(
id
);

182  
id
->
pMëhods
->
	`xFëch
(id, 
iOff
, 
iAmt
, 
µ
);

183 
	}
}

184 
	$sqlôe3OsUn„tch
(
sqlôe3_fûe
 *
id
, 
i64
 
iOff
, *
p
){

185  
id
->
pMëhods
->
	`xUn„tch
(id, 
iOff
, 
p
);

186 
	}
}

189 
	$sqlôe3OsFëch
(
sqlôe3_fûe
 *
id
, 
i64
 
iOff
, 
iAmt
, **
µ
){

190 *
µ
 = 0;

191  
SQLITE_OK
;

192 
	}
}

193 
	$sqlôe3OsUn„tch
(
sqlôe3_fûe
 *
id
, 
i64
 
iOff
, *
p
){

194  
SQLITE_OK
;

195 
	}
}

202 
	$sqlôe3OsO≥n
(

203 
sqlôe3_vfs
 *
pVfs
,

204 c⁄° *
zP©h
,

205 
sqlôe3_fûe
 *
pFûe
,

206 
Êags
,

207 *
pFœgsOut


209 
rc
;

210 
	`DO_OS_MALLOC_TEST
(0);

215 
rc
 = 
pVfs
->
	`xO≥n
’Vfs, 
zP©h
, 
pFûe
, 
Êags
 & 0x87f7f, 
pFœgsOut
);

216 
	`as£π
–
rc
==
SQLITE_OK
 || 
pFûe
->
pMëhods
==0 );

217  
rc
;

218 
	}
}

219 
	$sqlôe3OsDñëe
(
sqlôe3_vfs
 *
pVfs
, c⁄° *
zP©h
, 
dúSync
){

220 
	`DO_OS_MALLOC_TEST
(0);

221 
	`as£π
–
dúSync
==0 || dirSync==1 );

222  
pVfs
->
	`xDñëe
’Vfs, 
zP©h
, 
dúSync
);

223 
	}
}

224 
	$sqlôe3OsAc˚ss
(

225 
sqlôe3_vfs
 *
pVfs
,

226 c⁄° *
zP©h
,

227 
Êags
,

228 *
pResOut


230 
	`DO_OS_MALLOC_TEST
(0);

231  
pVfs
->
	`xAc˚ss
’Vfs, 
zP©h
, 
Êags
, 
pResOut
);

232 
	}
}

233 
	$sqlôe3OsFuŒP©h«me
(

234 
sqlôe3_vfs
 *
pVfs
,

235 c⁄° *
zP©h
,

236 
nP©hOut
,

237 *
zP©hOut


239 
	`DO_OS_MALLOC_TEST
(0);

240 
zP©hOut
[0] = 0;

241  
pVfs
->
	`xFuŒP©h«me
’Vfs, 
zP©h
, 
nP©hOut
, 
zP©hOut
);

242 
	}
}

243 #i‚de‡
SQLITE_OMIT_LOAD_EXTENSION


244 *
	$sqlôe3OsDlO≥n
(
sqlôe3_vfs
 *
pVfs
, c⁄° *
zP©h
){

245  
pVfs
->
	`xDlO≥n
’Vfs, 
zP©h
);

246 
	}
}

247 
	$sqlôe3OsDlEº‹
(
sqlôe3_vfs
 *
pVfs
, 
nByã
, *
zBufOut
){

248 
pVfs
->
	`xDlEº‹
’Vfs, 
nByã
, 
zBufOut
);

249 
	}
}

250 (*
	$sqlôe3OsDlSym
(
sqlôe3_vfs
 *
pVfs
, *
pHdÀ
, c⁄° *
zSym
))(){

251  
pVfs
->
	`xDlSym
’Vfs, 
pHdÀ
, 
zSym
);

252 
	}
}

253 
	$sqlôe3OsDlClo£
(
sqlôe3_vfs
 *
pVfs
, *
pH™dÀ
){

254 
pVfs
->
	`xDlClo£
’Vfs, 
pH™dÀ
);

255 
	}
}

257 
	$sqlôe3OsR™dom√ss
(
sqlôe3_vfs
 *
pVfs
, 
nByã
, *
zBufOut
){

258  
pVfs
->
	`xR™dom√ss
’Vfs, 
nByã
, 
zBufOut
);

259 
	}
}

260 
	$sqlôe3OsSÀï
(
sqlôe3_vfs
 *
pVfs
, 
nMi¸o
){

261  
pVfs
->
	`xSÀï
’Vfs, 
nMi¸o
);

262 
	}
}

263 
	$sqlôe3OsGëLa°Eº‹
(
sqlôe3_vfs
 *
pVfs
){

264  
pVfs
->
xGëLa°Eº‹
 ?ÖVfs->
	`xGëLa°Eº‹
(pVfs, 0, 0) : 0;

265 
	}
}

266 
	$sqlôe3OsCuºítTimeI¡64
(
sqlôe3_vfs
 *
pVfs
, 
sqlôe3_öt64
 *
pTimeOut
){

267 
rc
;

274 if–
pVfs
->
iVîsi⁄
>=2 &&ÖVfs->
xCuºítTimeI¡64
 ){

275 
rc
 = 
pVfs
->
	`xCuºítTimeI¡64
’Vfs, 
pTimeOut
);

277 
r
;

278 
rc
 = 
pVfs
->
	`xCuºítTime
’Vfs, &
r
);

279 *
pTimeOut
 = (
sqlôe3_öt64
)(
r
*86400000.0);

281  
rc
;

282 
	}
}

284 
	$sqlôe3OsO≥nMÆloc
(

285 
sqlôe3_vfs
 *
pVfs
,

286 c⁄° *
zFûe
,

287 
sqlôe3_fûe
 **
µFûe
,

288 
Êags
,

289 *
pOutFœgs


291 
rc
;

292 
sqlôe3_fûe
 *
pFûe
;

293 
pFûe
 = (
sqlôe3_fûe
 *)
	`sqlôe3MÆlocZîo
(
pVfs
->
szOsFûe
);

294 if–
pFûe
 ){

295 
rc
 = 
	`sqlôe3OsO≥n
(
pVfs
, 
zFûe
, 
pFûe
, 
Êags
, 
pOutFœgs
);

296 if–
rc
!=
SQLITE_OK
 ){

297 
	`sqlôe3_‰ì
(
pFûe
);

299 *
µFûe
 = 
pFûe
;

302 
rc
 = 
SQLITE_NOMEM_BKPT
;

304  
rc
;

305 
	}
}

306 
	$sqlôe3OsClo£Fªe
(
sqlôe3_fûe
 *
pFûe
){

307 
	`as£π
–
pFûe
 );

308 
	`sqlôe3OsClo£
(
pFûe
);

309 
	`sqlôe3_‰ì
(
pFûe
);

310 
	}
}

318 
	$sqlôe3OsInô
(){

319 *
p
 = 
	`sqlôe3_mÆloc
(10);

320 if–
p
==0 )  
SQLITE_NOMEM_BKPT
;

321 
	`sqlôe3_‰ì
(
p
);

322  
	`sqlôe3_os_öô
();

323 
	}
}

328 
sqlôe3_vfs
 * 
SQLITE_WSD
 
	gvfsLi°
 = 0;

329 
	#vfsLi°
 
	`GLOBAL
(
sqlôe3_vfs
 *, 
vfsLi°
)

	)

335 
sqlôe3_vfs
 *
	$sqlôe3_vfs_föd
(c⁄° *
zVfs
){

336 
sqlôe3_vfs
 *
pVfs
 = 0;

337 #i‡
SQLITE_THREADSAFE


338 
sqlôe3_muãx
 *
muãx
;

340 #i‚de‡
SQLITE_OMIT_AUTOINIT


341 
rc
 = 
	`sqlôe3_öôülize
();

342 if–
rc
 )  0;

344 #i‡
SQLITE_THREADSAFE


345 
muãx
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MASTER
);

347 
	`sqlôe3_muãx_íãr
(
muãx
);

348 
pVfs
 = 
vfsLi°
;ÖVfs;ÖVfsıVfs->
pNext
){

349 if–
zVfs
==0 ) ;

350 if–
	`°rcmp
(
zVfs
, 
pVfs
->
zName
)==0 ) ;

352 
	`sqlôe3_muãx_Àave
(
muãx
);

353  
pVfs
;

354 
	}
}

359 
	$vfsU∆ök
(
sqlôe3_vfs
 *
pVfs
){

360 
	`as£π
–
	`sqlôe3_muãx_hñd
(
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MASTER
)) );

361 if–
pVfs
==0 ){

363 }if–
vfsLi°
==
pVfs
 ){

364 
vfsLi°
 = 
pVfs
->
pNext
;

365 }if–
vfsLi°
 ){

366 
sqlôe3_vfs
 *
p
 = 
vfsLi°
;

367  
p
->
pNext
 &&Ö->pNext!=
pVfs
 ){

368 
p
 =Ö->
pNext
;

370 if–
p
->
pNext
==
pVfs
 ){

371 
p
->
pNext
 = 
pVfs
->pNext;

374 
	}
}

381 
	$sqlôe3_vfs_ªgi°î
(
sqlôe3_vfs
 *
pVfs
, 
makeDÊt
){

382 
	`MUTEX_LOGIC
(
sqlôe3_muãx
 *
muãx
;)

383 #i‚de‡
SQLITE_OMIT_AUTOINIT


384 
rc
 = 
	`sqlôe3_öôülize
();

385 if–
rc
 ) Ñc;

387 #ifde‡
SQLITE_ENABLE_API_ARMOR


388 if–
pVfs
==0 )  
SQLITE_MISUSE_BKPT
;

391 
	`MUTEX_LOGIC
–
muãx
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MASTER
); )

392 
	`sqlôe3_muãx_íãr
(
muãx
);

393 
	`vfsU∆ök
(
pVfs
);

394 if–
makeDÊt
 || 
vfsLi°
==0 ){

395 
pVfs
->
pNext
 = 
vfsLi°
;

396 
vfsLi°
 = 
pVfs
;

398 
pVfs
->
pNext
 = 
vfsLi°
->pNext;

399 
vfsLi°
->
pNext
 = 
pVfs
;

401 
	`as£π
(
vfsLi°
);

402 
	`sqlôe3_muãx_Àave
(
muãx
);

403  
SQLITE_OK
;

404 
	}
}

409 
	$sqlôe3_vfs_uƒegi°î
(
sqlôe3_vfs
 *
pVfs
){

410 #i‡
SQLITE_THREADSAFE


411 
sqlôe3_muãx
 *
muãx
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MASTER
);

413 
	`sqlôe3_muãx_íãr
(
muãx
);

414 
	`vfsU∆ök
(
pVfs
);

415 
	`sqlôe3_muãx_Àave
(
muãx
);

416  
SQLITE_OK
;

417 
	}
}

	@os.h

20 #i‚de‡
_SQLITE_OS_H_


21 
	#_SQLITE_OS_H_


	)

27 
	~"os_£tup.h
"

32 #i‚de‡
SET_FULLSYNC


33 
	#SET_FULLSYNC
(
x
,
y
)

	)

39 #i‚de‡
SQLITE_DEFAULT_SECTOR_SIZE


40 
	#SQLITE_DEFAULT_SECTOR_SIZE
 4096

	)

64 #i‚de‡
SQLITE_TEMP_FILE_PREFIX


65 
	#SQLITE_TEMP_FILE_PREFIX
 "ëûqs_"

	)

85 
	#NO_LOCK
 0

	)

86 
	#SHARED_LOCK
 1

	)

87 
	#RESERVED_LOCK
 2

	)

88 
	#PENDING_LOCK
 3

	)

89 
	#EXCLUSIVE_LOCK
 4

	)

146 #ifde‡
SQLITE_OMIT_WSD


147 
	#PENDING_BYTE
 (0x40000000)

	)

149 
	#PENDING_BYTE
 
sqlôe3PídögByã


	)

151 
	#RESERVED_BYTE
 (
PENDING_BYTE
+1)

	)

152 
	#SHARED_FIRST
 (
PENDING_BYTE
+2)

	)

153 
	#SHARED_SIZE
 510

	)

158 
sqlôe3OsInô
();

163 
sqlôe3OsClo£
(
sqlôe3_fûe
*);

164 
sqlôe3OsRód
(
sqlôe3_fûe
*, *, 
amt
, 
i64
 
off£t
);

165 
sqlôe3OsWrôe
(
sqlôe3_fûe
*, c⁄° *, 
amt
, 
i64
 
off£t
);

166 
sqlôe3OsTrunˇã
(
sqlôe3_fûe
*, 
i64
 
size
);

167 
sqlôe3OsSync
(
sqlôe3_fûe
*, );

168 
sqlôe3OsFûeSize
(
sqlôe3_fûe
*, 
i64
 *
pSize
);

169 
sqlôe3OsLock
(
sqlôe3_fûe
*, );

170 
sqlôe3OsU∆ock
(
sqlôe3_fûe
*, );

171 
sqlôe3OsCheckRe£rvedLock
(
sqlôe3_fûe
 *
id
, *
pResOut
);

172 
sqlôe3OsFûeC⁄åﬁ
(
sqlôe3_fûe
*,,*);

173 
sqlôe3OsFûeC⁄åﬁHöt
(
sqlôe3_fûe
*,,*);

174 
	#SQLITE_FCNTL_DB_UNCHANGED
 0xˇ093Á0

	)

175 
sqlôe3OsSe˘‹Size
(
sqlôe3_fûe
 *
id
);

176 
sqlôe3OsDevi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
 *
id
);

177 
sqlôe3OsShmM≠
(
sqlôe3_fûe
 *,,,,volatile **);

178 
sqlôe3OsShmLock
(
sqlôe3_fûe
 *
id
, , , );

179 
sqlôe3OsShmB¨rõr
(
sqlôe3_fûe
 *
id
);

180 
sqlôe3OsShmUnm≠
(
sqlôe3_fûe
 *
id
, );

181 
sqlôe3OsFëch
(
sqlôe3_fûe
 *
id
, 
i64
, , **);

182 
sqlôe3OsUn„tch
(
sqlôe3_fûe
 *, 
i64
, *);

188 
sqlôe3OsO≥n
(
sqlôe3_vfs
 *, c⁄° *, 
sqlôe3_fûe
*, , *);

189 
sqlôe3OsDñëe
(
sqlôe3_vfs
 *, const *, );

190 
sqlôe3OsAc˚ss
(
sqlôe3_vfs
 *, c⁄° *, , *
pResOut
);

191 
sqlôe3OsFuŒP©h«me
(
sqlôe3_vfs
 *, const *, , *);

192 #i‚de‡
SQLITE_OMIT_LOAD_EXTENSION


193 *
sqlôe3OsDlO≥n
(
sqlôe3_vfs
 *, const *);

194 
sqlôe3OsDlEº‹
(
sqlôe3_vfs
 *, , *);

195 (*
	$sqlôe3OsDlSym
(
sqlôe3_vfs
 *, *, const *))();

196 
	`sqlôe3OsDlClo£
(
sqlôe3_vfs
 *, *);

198 
	`sqlôe3OsR™dom√ss
(
sqlôe3_vfs
 *, , *);

199 
	`sqlôe3OsSÀï
(
sqlôe3_vfs
 *, );

200 
	`sqlôe3OsGëLa°Eº‹
(
sqlôe3_vfs
*);

201 
	`sqlôe3OsCuºítTimeI¡64
(
sqlôe3_vfs
 *, 
sqlôe3_öt64
*);

207 
	`sqlôe3OsO≥nMÆloc
(
sqlôe3_vfs
 *, c⁄° *, 
sqlôe3_fûe
 **, ,*);

208 
	`sqlôe3OsClo£Fªe
(
sqlôe3_fûe
 *);

	@os_common.h

20 #i‚de‡
_OS_COMMON_H_


21 
	#_OS_COMMON_H_


	)

28 #ifde‡
MEMORY_DEBUG


36 #ifde‡
SQLITE_PERFORMANCE_TRACE


42 
	~"hwtime.h
"

44 
sqlôe_uöt64
 
	gg_°¨t
;

45 
sqlôe_uöt64
 
	gg_ñ≠£d
;

46 
	#TIMER_START
 
g_°¨t
=
	`sqlôe3Hwtime
()

	)

47 
	#TIMER_END
 
g_ñ≠£d
=
	`sqlôe3Hwtime
()-
g_°¨t


	)

48 
	#TIMER_ELAPSED
 
g_ñ≠£d


	)

50 
	#TIMER_START


	)

51 
	#TIMER_END


	)

52 
	#TIMER_ELAPSED
 ((
sqlôe_uöt64
)0)

	)

60 #i‡
deföed
(
SQLITE_TEST
)

61 
sqlôe3_io_îr‹_hô
;

62 
sqlôe3_io_îr‹_h¨dhô
;

63 
sqlôe3_io_îr‹_≥ndög
;

64 
sqlôe3_io_îr‹_≥rsi°
;

65 
sqlôe3_io_îr‹_bíign
;

66 
sqlôe3_diskfuŒ_≥ndög
;

67 
sqlôe3_diskfuŒ
;

68 
	#SimuœãIOEº‹Bíign
(
X
Ë
sqlôe3_io_îr‹_bíign
=(X)

	)

69 
	#SimuœãIOEº‹
(
CODE
) \

70 if–(
sqlôe3_io_îr‹_≥rsi°
 && 
sqlôe3_io_îr‹_hô
) \

71 || 
sqlôe3_io_îr‹_≥ndög
-- == 1 ) \

72 { 
	`loˇl_i€º
(); 
CODE
; }

	)

73 
	$loˇl_i€º
(){

74 
	`IOTRACE
(("IOERR\n"));

75 
sqlôe3_io_îr‹_hô
++;

76 if–!
sqlôe3_io_îr‹_bíign
 ) 
sqlôe3_io_îr‹_h¨dhô
++;

77 
	}
}

78 
	#SimuœãDiskfuŒEº‹
(
CODE
) \

79 if–
sqlôe3_diskfuŒ_≥ndög
 ){ \

80 if–
sqlôe3_diskfuŒ_≥ndög
 == 1 ){ \

81 
	`loˇl_i€º
(); \

82 
sqlôe3_diskfuŒ
 = 1; \

83 
sqlôe3_io_îr‹_hô
 = 1; \

84 
CODE
; \

86 
sqlôe3_diskfuŒ_≥ndög
--; \

88 }

	)

90 
	#SimuœãIOEº‹Bíign
(
X
)

	)

91 
	#SimuœãIOEº‹
(
A
)

	)

92 
	#SimuœãDiskfuŒEº‹
(
A
)

	)

98 #i‡
deföed
(
SQLITE_TEST
)

99 
sqlôe3_›í_fûe_cou¡
;

100 
	#O≥nCou¡î
(
X
Ë
sqlôe3_›í_fûe_cou¡
+=(X)

	)

102 
	#O≥nCou¡î
(
X
)

	)

	@os_setup.h

16 #i‚de‡
_OS_SETUP_H_


17 
	#_OS_SETUP_H_


	)

27 #i‡
deföed
(
SQLITE_OS_OTHER
)

28 #i‡
SQLITE_OS_OTHER
==1

29 #unde‡
SQLITE_OS_UNIX


30 
	#SQLITE_OS_UNIX
 0

	)

31 #unde‡
SQLITE_OS_WIN


32 
	#SQLITE_OS_WIN
 0

	)

34 #unde‡
SQLITE_OS_OTHER


37 #i‡!
deföed
(
SQLITE_OS_UNIX
Ë&& !deföed(
SQLITE_OS_OTHER
)

38 
	#SQLITE_OS_OTHER
 0

	)

39 #i‚de‡
SQLITE_OS_WIN


40 #i‡
deföed
(
_WIN32
Ë|| deföed(
WIN32
Ë|| deföed(
__CYGWIN__
) || \

41 
deföed
(
__MINGW32__
Ë|| 
	$deföed
(
__BORLANDC__
)

42 
	#SQLITE_OS_WIN
 1

	)

43 
	#SQLITE_OS_UNIX
 0

	)

45 
	#SQLITE_OS_WIN
 0

	)

46 
	#SQLITE_OS_UNIX
 1

	)

49 
	#SQLITE_OS_UNIX
 0

	)

52 #i‚de‡
SQLITE_OS_WIN


53 
	#SQLITE_OS_WIN
 0

	)

	@os_unix.c

46 
	~"sqlôeI¡.h
"

47 #i‡
SQLITE_OS_UNIX


66 #i‡!
deföed
(
SQLITE_ENABLE_LOCKING_STYLE
)

67 #i‡
deföed
(
__APPLE__
)

68 
	#SQLITE_ENABLE_LOCKING_STYLE
 1

	)

70 
	#SQLITE_ENABLE_LOCKING_STYLE
 0

	)

75 #i‡
deföed
(
__APPLE__
)

76 
	#HAVE_PREAD
 1

	)

77 
	#HAVE_PWRITE
 1

	)

79 #i‡
deföed
(
HAVE_PREAD64
Ë&& deföed(
HAVE_PWRITE64
)

80 #unde‡
USE_PREAD


81 
	#USE_PREAD64
 1

	)

82 #ñi‡
deföed
(
HAVE_PREAD
Ë&& deföed(
HAVE_PWRITE
)

83 #unde‡
USE_PREAD64


84 
	#USE_PREAD
 1

	)

90 
	~<sys/ty≥s.h
>

91 
	~<sys/°©.h
>

92 
	~<f˙é.h
>

93 
	~<uni°d.h
>

94 
	~<time.h
>

95 
	~<sys/time.h
>

96 
	~<î∫o.h
>

97 #i‡!
deföed
(
SQLITE_OMIT_WAL
Ë|| 
SQLITE_MAX_MMAP_SIZE
>0

98 
	~<sys/mm™.h
>

101 #i‡
SQLITE_ENABLE_LOCKING_STYLE


102 
	~<sys/io˘l.h
>

103 
	~<sys/fûe.h
>

104 
	~<sys/∑øm.h
>

107 #i‡
deföed
(
__APPLE__
Ë&& ((
__MAC_OS_X_VERSION_MIN_REQUIRED
 > 1050) || \

108 (
	g__IPHONE_OS_VERSION_MIN_REQUIRED
 > 2000))

109 #i‡(!
deföed
(
TARGET_OS_EMBEDDED
) || (TARGET_OS_EMBEDDED==0)) \

110 && (!
deföed
(
TARGET_IPHONE_SIMULATOR
Ë|| (
	gTARGET_IPHONE_SIMULATOR
==0))

111 
	#HAVE_GETHOSTUUID
 1

	)

118 #i‡
OS_VXWORKS


119 
	~<sys/io˘l.h
>

120 
	~<£m≠h‹e.h
>

121 
	~<limôs.h
>

124 #i‡
deföed
(
__APPLE__
Ë|| 
SQLITE_ENABLE_LOCKING_STYLE


125 
	~<sys/mou¡.h
>

128 #ifde‡
HAVE_UTIME


129 
	~<utime.h
>

135 
	#SQLITE_FSFLAGS_IS_MSDOS
 0x1

	)

141 #i‡
SQLITE_THREADSAFE


142 
	~<±hªad.h
>

143 
	#SQLITE_UNIX_THREADS
 1

	)

149 #i‚de‡
SQLITE_DEFAULT_FILE_PERMISSIONS


150 
	#SQLITE_DEFAULT_FILE_PERMISSIONS
 0644

	)

156 #i‚de‡
SQLITE_DEFAULT_PROXYDIR_PERMISSIONS


157 
	#SQLITE_DEFAULT_PROXYDIR_PERMISSIONS
 0755

	)

163 
	#MAX_PATHNAME
 512

	)

168 
	#SQLITE_MAX_SYMLINKS
 100

	)

172 
	#osGëpid
(
X
Ë(
pid_t
)
	`gëpid
()

	)

178 
	#IS_LOCK_ERROR
(
x
Ë((x !
SQLITE_OK
Ë&& (x !
SQLITE_BUSY
))

	)

181 
unixShm
 
	tunixShm
;

182 
unixShmNode
 
	tunixShmNode
;

183 
unixInodeInfo
 
	tunixInodeInfo
;

184 
UnixUnu£dFd
 
	tUnixUnu£dFd
;

192 
	sUnixUnu£dFd
 {

193 
	mfd
;

194 
	mÊags
;

195 
UnixUnu£dFd
 *
	mpNext
;

202 
unixFûe
 
	tunixFûe
;

203 
	sunixFûe
 {

204 
sqlôe3_io_mëhods
 c⁄° *
	mpMëhod
;

205 
sqlôe3_vfs
 *
	mpVfs
;

206 
unixInodeInfo
 *
	mpInode
;

207 
	mh
;

208 
	meFûeLock
;

209 
	m˘æFœgs
;

210 
	mœ°Eºno
;

211 *
	mlockögC⁄ãxt
;

212 
UnixUnu£dFd
 *
	mpUnu£d
;

213 c⁄° *
	mzP©h
;

214 
unixShm
 *
	mpShm
;

215 
	mszChunk
;

216 #i‡
SQLITE_MAX_MMAP_SIZE
>0

217 
	mnFëchOut
;

218 
sqlôe3_öt64
 
	mmm≠Size
;

219 
sqlôe3_öt64
 
	mmm≠SizeA˘uÆ
;

220 
sqlôe3_öt64
 
	mmm≠SizeMax
;

221 *
	mpM≠Regi⁄
;

223 #ifde‡
__QNXNTO__


224 
	m£˘‹Size
;

225 
	mdevi˚Ch¨a˘îi°ics
;

227 #i‡
SQLITE_ENABLE_LOCKING_STYLE


228 
	m›íFœgs
;

230 #i‡
SQLITE_ENABLE_LOCKING_STYLE
 || 
deföed
(
__APPLE__
)

231 
	mfsFœgs
;

233 #i‡
OS_VXWORKS


234 
vxw‹ksFûeId
 *
	mpId
;

236 #ifde‡
SQLITE_DEBUG


244 
	må™sC¡rChng
;

245 
	mdbUpd©e
;

246 
	möN‹mÆWrôe
;

250 #ifde‡
SQLITE_TEST


254 
	maPaddög
[32];

262 
pid_t
 
	gøndom√ssPid
 = 0;

267 
	#UNIXFILE_EXCL
 0x01

	)

268 
	#UNIXFILE_RDONLY
 0x02

	)

269 
	#UNIXFILE_PERSIST_WAL
 0x04

	)

270 #i‚de‡
SQLITE_DISABLE_DIRSYNC


271 
	#UNIXFILE_DIRSYNC
 0x08

	)

273 
	#UNIXFILE_DIRSYNC
 0x00

	)

275 
	#UNIXFILE_PSOW
 0x10

	)

276 
	#UNIXFILE_DELETE
 0x20

	)

277 
	#UNIXFILE_URI
 0x40

	)

278 
	#UNIXFILE_NOLOCK
 0x80

	)

283 
	~"os_comm⁄.h
"

288 #i‚de‡
O_LARGEFILE


289 
	#O_LARGEFILE
 0

	)

291 #ifde‡
SQLITE_DISABLE_LFS


292 #unde‡
O_LARGEFILE


293 
	#O_LARGEFILE
 0

	)

295 #i‚de‡
O_NOFOLLOW


296 
	#O_NOFOLLOW
 0

	)

298 #i‚de‡
O_BINARY


299 
	#O_BINARY
 0

	)

306 #i‡
SQLITE_THREADSAFE


307 
	#thªadid
 
	`±hªad_£lf
()

	)

309 
	#thªadid
 0

	)

315 #i‡!
deföed
(
HAVE_MREMAP
)

316 #i‡
deföed
(
__löux__
Ë&& deföed(
_GNU_SOURCE
)

317 
	#HAVE_MREMAP
 1

	)

319 
	#HAVE_MREMAP
 0

	)

327 #ifde‡
__ANDROID__


328 
	#l£ek
 
l£ek64


	)

339 
	$posixO≥n
(c⁄° *
zFûe
, 
Êags
, 
mode
){

340  
	`›í
(
zFûe
, 
Êags
, 
mode
);

341 
	}
}

344 
›íDúe˘‹y
(const *, *);

345 
unixGë∑gesize
();

353 
	sunix_sysˇŒ
 {

354 c⁄° *
	mzName
;

355 
sqlôe3_sysˇŒ_±r
 
	mpCuºít
;

356 
sqlôe3_sysˇŒ_±r
 
	mpDeÁu…
;

357 } 
	gaSysˇŒ
[] = {

358 { "›í", (
sqlôe3_sysˇŒ_±r
)
posixO≥n
, 0 },

359 
	#osO≥n
 (((*)(c⁄° *,,))
aSysˇŒ
[0].
pCuºít
)

	)

361 { "˛o£", (
sqlôe3_sysˇŒ_±r
)
˛o£
, 0 },

362 
	#osClo£
 (((*)())
aSysˇŒ
[1].
pCuºít
)

	)

364 { "ac˚ss", (
sqlôe3_sysˇŒ_±r
)
ac˚ss
, 0 },

365 
	#osAc˚ss
 (((*)(c⁄° *,))
aSysˇŒ
[2].
pCuºít
)

	)

367 { "gëcwd", (
sqlôe3_sysˇŒ_±r
)
gëcwd
, 0 },

368 
	#osGëcwd
 ((*(*)(*,
size_t
))
aSysˇŒ
[3].
pCuºít
)

	)

370 { "°©", (
sqlôe3_sysˇŒ_±r
)
°©
, 0 },

371 
	#osSèt
 (((*)(c⁄° *,
°©
*))
aSysˇŒ
[4].
pCuºít
)

	)

379 #ifde‡
__DJGPP__


381 
	#osF°©
(
a
,
b
,
c
Ë0

	)

383 { "f°©", (
sqlôe3_sysˇŒ_±r
)
f°©
, 0 },

384 
	#osF°©
 (((*)(,
°©
*))
aSysˇŒ
[5].
pCuºít
)

	)

387 { "·runˇã", (
sqlôe3_sysˇŒ_±r
)
·runˇã
, 0 },

388 
	#osFåunˇã
 (((*)(,
off_t
))
aSysˇŒ
[6].
pCuºít
)

	)

390 { "f˙é", (
sqlôe3_sysˇŒ_±r
)
f˙é
, 0 },

391 
	#osF˙é
 (((*)(,,...))
aSysˇŒ
[7].
pCuºít
)

	)

393 { "ªad", (
sqlôe3_sysˇŒ_±r
)
ªad
, 0 },

394 
	#osRód
 ((
	`ssize_t
(*)(,*,
size_t
))
aSysˇŒ
[8].
pCuºít
)

	)

396 #i‡
deföed
(
USE_PREAD
Ë|| 
SQLITE_ENABLE_LOCKING_STYLE


397 { "¥ód", (
sqlôe3_sysˇŒ_±r
)
¥ód
, 0 },

399 { "¥ód", (
sqlôe3_sysˇŒ_±r
)0, 0 },

401 
	#osPªad
 ((
	`ssize_t
(*)(,*,
size_t
,
off_t
))
aSysˇŒ
[9].
pCuºít
)

	)

403 #i‡
deföed
(
USE_PREAD64
)

404 { "¥ód64", (
sqlôe3_sysˇŒ_±r
)
¥ód64
, 0 },

406 { "¥ód64", (
sqlôe3_sysˇŒ_±r
)0, 0 },

408 
	#osPªad64
 ((
	`ssize_t
(*)(,*,
size_t
,
off64_t
))
aSysˇŒ
[10].
pCuºít
)

	)

410 { "wrôe", (
sqlôe3_sysˇŒ_±r
)
wrôe
, 0 },

411 
	#osWrôe
 ((
	`ssize_t
(*)(,c⁄° *,
size_t
))
aSysˇŒ
[11].
pCuºít
)

	)

413 #i‡
deföed
(
USE_PREAD
Ë|| 
SQLITE_ENABLE_LOCKING_STYLE


414 { "pwrôe", (
sqlôe3_sysˇŒ_±r
)
pwrôe
, 0 },

416 { "pwrôe", (
sqlôe3_sysˇŒ_±r
)0, 0 },

418 
	#osPwrôe
 ((
	`ssize_t
(*)(,c⁄° *,
size_t
,
off_t
))\

419 
aSysˇŒ
[12].
pCuºít
)

	)

421 #i‡
deföed
(
USE_PREAD64
)

422 { "pwrôe64", (
sqlôe3_sysˇŒ_±r
)
pwrôe64
, 0 },

424 { "pwrôe64", (
sqlôe3_sysˇŒ_±r
)0, 0 },

426 
	#osPwrôe64
 ((
	`ssize_t
(*)(,c⁄° *,
size_t
,
off64_t
))\

427 
aSysˇŒ
[13].
pCuºít
)

	)

429 { "fchmod", (
sqlôe3_sysˇŒ_±r
)
fchmod
, 0 },

430 
	#osFchmod
 (((*)(,
mode_t
))
aSysˇŒ
[14].
pCuºít
)

	)

432 #i‡
deföed
(
HAVE_POSIX_FALLOCATE
) && HAVE_POSIX_FALLOCATE

433 { "ÁŒoˇã", (
sqlôe3_sysˇŒ_±r
)
posix_ÁŒoˇã
, 0 },

435 { "ÁŒoˇã", (
sqlôe3_sysˇŒ_±r
)0, 0 },

437 
	#osFÆloˇã
 (((*)(,
off_t
,off_t))
aSysˇŒ
[15].
pCuºít
)

	)

439 { "u∆ök", (
sqlôe3_sysˇŒ_±r
)
u∆ök
, 0 },

440 
	#osU∆ök
 (((*)(c⁄° *))
aSysˇŒ
[16].
pCuºít
)

	)

442 { "›íDúe˘‹y", (
sqlôe3_sysˇŒ_±r
)
›íDúe˘‹y
, 0 },

443 
	#osO≥nDúe˘‹y
 (((*)(c⁄° *,*))
aSysˇŒ
[17].
pCuºít
)

	)

445 { "mkdú", (
sqlôe3_sysˇŒ_±r
)
mkdú
, 0 },

446 
	#osMkdú
 (((*)(c⁄° *,
mode_t
))
aSysˇŒ
[18].
pCuºít
)

	)

448 { "rmdú", (
sqlôe3_sysˇŒ_±r
)
rmdú
, 0 },

449 
	#osRmdú
 (((*)(c⁄° *))
aSysˇŒ
[19].
pCuºít
)

	)

451 #i‡
deföed
(
HAVE_FCHOWN
)

452 { "fchown", (
sqlôe3_sysˇŒ_±r
)
fchown
, 0 },

454 { "fchown", (
sqlôe3_sysˇŒ_±r
)0, 0 },

456 
	#osFchown
 (((*)(,
uid_t
,
gid_t
))
aSysˇŒ
[20].
pCuºít
)

	)

458 { "gëeuid", (
sqlôe3_sysˇŒ_±r
)
gëeuid
, 0 },

459 
	#osGëeuid
 ((
	`uid_t
(*)())
aSysˇŒ
[21].
pCuºít
)

	)

461 #i‡!
deföed
(
SQLITE_OMIT_WAL
Ë|| 
SQLITE_MAX_MMAP_SIZE
>0

462 { "mm≠", (
sqlôe3_sysˇŒ_±r
)
mm≠
, 0 },

464 { "mm≠", (
sqlôe3_sysˇŒ_±r
)0, 0 },

466 
	#osMm≠
 ((*(*)(*,
size_t
,,,,
off_t
))
aSysˇŒ
[22].
pCuºít
)

	)

468 #i‡!
deföed
(
SQLITE_OMIT_WAL
Ë|| 
SQLITE_MAX_MMAP_SIZE
>0

469 { "munm≠", (
sqlôe3_sysˇŒ_±r
)
munm≠
, 0 },

471 { "munm≠", (
sqlôe3_sysˇŒ_±r
)0, 0 },

473 
	#osMunm≠
 ((*(*)(*,
size_t
))
aSysˇŒ
[23].
pCuºít
)

	)

475 #i‡
HAVE_MREMAP
 && (!
deföed
(
SQLITE_OMIT_WAL
Ë|| 
SQLITE_MAX_MMAP_SIZE
>0)

476 { "mªm≠", (
sqlôe3_sysˇŒ_±r
)
mªm≠
, 0 },

478 { "mªm≠", (
sqlôe3_sysˇŒ_±r
)0, 0 },

480 
	#osMªm≠
 ((*(*)(*,
size_t
,size_t,,...))
aSysˇŒ
[24].
pCuºít
)

	)

482 #i‡!
deföed
(
SQLITE_OMIT_WAL
Ë|| 
SQLITE_MAX_MMAP_SIZE
>0

483 { "gë∑gesize", (
sqlôe3_sysˇŒ_±r
)
unixGë∑gesize
, 0 },

485 { "gë∑gesize", (
sqlôe3_sysˇŒ_±r
)0, 0 },

487 
	#osGë∑gesize
 (((*)())
aSysˇŒ
[25].
pCuºít
)

	)

489 #i‡
deföed
(
HAVE_READLINK
)

490 { "ªadlök", (
sqlôe3_sysˇŒ_±r
)
ªadlök
, 0 },

492 { "ªadlök", (
sqlôe3_sysˇŒ_±r
)0, 0 },

494 
	#osRódlök
 ((
	`ssize_t
(*)(c⁄° *,*,
size_t
))
aSysˇŒ
[26].
pCuºít
)

	)

496 #i‡
deföed
(
HAVE_LSTAT
)

497 { "l°©", (
sqlôe3_sysˇŒ_±r
)
l°©
, 0 },

499 { "l°©", (
sqlôe3_sysˇŒ_±r
)0, 0 },

501 
	#osL°©
 (((*)(c⁄° *,
°©
*))
aSysˇŒ
[27].
pCuºít
)

	)

511 
	$robu°Fchown
(
fd
, 
uid_t
 
uid
, 
gid_t
 
gid
){

512 #i‡
	`deföed
(
HAVE_FCHOWN
)

513  
	`osGëeuid
(Ë? 0 : 
	`osFchown
(
fd
,
uid
,
gid
);

517 
	}
}

525 
	$unixSëSy°emCÆl
(

526 
sqlôe3_vfs
 *
pNŸU£d
,

527 c⁄° *
zName
,

528 
sqlôe3_sysˇŒ_±r
 
pNewFunc


530 
i
;

531 
rc
 = 
SQLITE_NOTFOUND
;

533 
	`UNUSED_PARAMETER
(
pNŸU£d
);

534 if–
zName
==0 ){

538 
rc
 = 
SQLITE_OK
;

539 
i
=0; i<(
aSysˇŒ
)/(aSyscall[0]); i++){

540 if–
aSysˇŒ
[
i
].
pDeÁu…
 ){

541 
aSysˇŒ
[
i
].
pCuºít
 =áSysˇŒ[i].
pDeÁu…
;

548 
i
=0; i<(
aSysˇŒ
)/(aSyscall[0]); i++){

549 if–
	`°rcmp
(
zName
, 
aSysˇŒ
[
i
].zName)==0 ){

550 if–
aSysˇŒ
[
i
].
pDeÁu…
==0 ){

551 
aSysˇŒ
[
i
].
pDeÁu…
 =áSysˇŒ[i].
pCuºít
;

553 
rc
 = 
SQLITE_OK
;

554 if–
pNewFunc
==0 )ÖNewFun¯
aSysˇŒ
[
i
].
pDeÁu…
;

555 
aSysˇŒ
[
i
].
pCuºít
 = 
pNewFunc
;

560  
rc
;

561 
	}
}

568 
sqlôe3_sysˇŒ_±r
 
	$unixGëSy°emCÆl
(

569 
sqlôe3_vfs
 *
pNŸU£d
,

570 c⁄° *
zName


572 
i
;

574 
	`UNUSED_PARAMETER
(
pNŸU£d
);

575 
i
=0; i<(
aSysˇŒ
)/(aSyscall[0]); i++){

576 if–
	`°rcmp
(
zName
, 
aSysˇŒ
[
i
].zName)==0 ) áSysˇŒ[i].
pCuºít
;

579 
	}
}

587 c⁄° *
	$unixNextSy°emCÆl
(
sqlôe3_vfs
 *
p
, c⁄° *
zName
){

588 
i
 = -1;

590 
	`UNUSED_PARAMETER
(
p
);

591 if–
zName
 ){

592 
i
=0; i<
	`AºaySize
(
aSysˇŒ
)-1; i++){

593 if–
	`°rcmp
(
zName
, 
aSysˇŒ
[
i
].zName)==0 ) ;

596 
i
++; i<
	`AºaySize
(
aSysˇŒ
); i++){

597 if–
aSysˇŒ
[
i
].
pCuºít
!=0 ) áSysˇŒ[i].
zName
;

600 
	}
}

607 #i‚de‡
SQLITE_MINIMUM_FILE_DESCRIPTOR


608 
	#SQLITE_MINIMUM_FILE_DESCRIPTOR
 3

	)

628 
	$robu°_›í
(c⁄° *
z
, 
f
, 
mode_t
 
m
){

629 
fd
;

630 
mode_t
 
m2
 = 
m
 ? m : 
SQLITE_DEFAULT_FILE_PERMISSIONS
;

632 #i‡
	`deföed
(
O_CLOEXEC
)

633 
fd
 = 
	`osO≥n
(
z
,
f
|
O_CLOEXEC
,
m2
);

635 
fd
 = 
	`osO≥n
(
z
,
f
,
m2
);

637 if–
fd
<0 ){

638 if–
î∫o
==
EINTR
 ) ;

641 if–
fd
>=
SQLITE_MINIMUM_FILE_DESCRIPTOR
 ) ;

642 
	`osClo£
(
fd
);

643 
	`sqlôe3_log
(
SQLITE_WARNING
,

644 "©ãm±Åÿ›í \"%s\"á†fûêdes¸ùt‹ %d", 
z
, 
fd
);

645 
fd
 = -1;

646 if–
	`osO≥n
("/dev/nuŒ", 
f
, 
m
)<0 ) ;

648 if–
fd
>=0 ){

649 if–
m
!=0 ){

650 
°©
 
°©buf
;

651 if–
	`osF°©
(
fd
, &
°©buf
)==0

652 && 
°©buf
.
°_size
==0

653 && (
°©buf
.
°_mode
&0777)!=
m


655 
	`osFchmod
(
fd
, 
m
);

658 #i‡
	`deföed
(
FD_CLOEXEC
Ë&& (!deföed(
O_CLOEXEC
) || O_CLOEXEC==0)

659 
	`osF˙é
(
fd
, 
F_SETFD
, osF˙é(fd, 
F_GETFD
, 0Ë| 
FD_CLOEXEC
);

662  
fd
;

663 
	}
}

679 
	$unixE¡îMuãx
(){

680 
	`sqlôe3_muãx_íãr
(
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_VFS1
));

681 
	}
}

682 
	$unixLóveMuãx
(){

683 
	`sqlôe3_muãx_Àave
(
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_VFS1
));

684 
	}
}

685 #ifde‡
SQLITE_DEBUG


686 
	$unixMuãxHñd
() {

687  
	`sqlôe3_muãx_hñd
(
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_VFS1
));

688 
	}
}

692 #ifde‡
SQLITE_HAVE_OS_TRACE


698 c⁄° *
	$azFûeLock
(
eFûeLock
){

699  
eFûeLock
 ){

700 
NO_LOCK
:  "NONE";

701 
SHARED_LOCK
:  "SHARED";

702 
RESERVED_LOCK
:  "RESERVED";

703 
PENDING_LOCK
:  "PENDING";

704 
EXCLUSIVE_LOCK
:  "EXCLUSIVE";

707 
	}
}

710 #ifde‡
SQLITE_LOCK_TRACE


719 
	$lockTø˚
(
fd
, 
›
, 
Êock
 *
p
){

720 *
zOpName
, *
zTy≥
;

721 
s
;

722 
ßvedEºno
;

723 if–
›
==
F_GETLK
 ){

724 
zOpName
 = "GETLK";

725 }if–
›
==
F_SETLK
 ){

726 
zOpName
 = "SETLK";

728 
s
 = 
	`osF˙é
(
fd
, 
›
, 
p
);

729 
	`sqlôe3DebugPrötf
("f˙é unknow¿%d %d %d\n", 
fd
, 
›
, 
s
);

730  
s
;

732 if–
p
->
l_ty≥
==
F_RDLCK
 ){

733 
zTy≥
 = "RDLCK";

734 }if–
p
->
l_ty≥
==
F_WRLCK
 ){

735 
zTy≥
 = "WRLCK";

736 }if–
p
->
l_ty≥
==
F_UNLCK
 ){

737 
zTy≥
 = "UNLCK";

739 
	`as£π
( 0 );

741 
	`as£π
–
p
->
l_whí˚
==
SEEK_SET
 );

742 
s
 = 
	`osF˙é
(
fd
, 
›
, 
p
);

743 
ßvedEºno
 = 
î∫o
;

744 
	`sqlôe3DebugPrötf
("fcntl %d %d %s %s %d %d %d %d\n",

745 
thªadid
, 
fd
, 
zOpName
, 
zTy≥
, ()
p
->
l_°¨t
, (Ì->
l_Àn
,

746 ()
p
->
l_pid
, 
s
);

747 if–
s
==(-1Ë&& 
›
==
F_SETLK
 && (
p
->
l_ty≥
==
F_RDLCK
 ||Ö->l_ty≥==
F_WRLCK
) ){

748 
Êock
 
l2
;

749 
l2
 = *
p
;

750 
	`osF˙é
(
fd
, 
F_GETLK
, &
l2
);

751 if–
l2
.
l_ty≥
==
F_RDLCK
 ){

752 
zTy≥
 = "RDLCK";

753 }if–
l2
.
l_ty≥
==
F_WRLCK
 ){

754 
zTy≥
 = "WRLCK";

755 }if–
l2
.
l_ty≥
==
F_UNLCK
 ){

756 
zTy≥
 = "UNLCK";

758 
	`as£π
( 0 );

760 
	`sqlôe3DebugPrötf
("fcntl-failure-reason: %s %d %d %d\n",

761 
zTy≥
, ()
l2
.
l_°¨t
, (Ó2.
l_Àn
, (Ó2.
l_pid
);

763 
î∫o
 = 
ßvedEºno
;

764  
s
;

765 
	}
}

766 #unde‡
osF˙é


767 
	#osF˙é
 
lockTø˚


	)

777 
	$robu°_·runˇã
(
h
, 
sqlôe3_öt64
 
sz
){

778 
rc
;

779 #ifde‡
__ANDROID__


784 if–
sz
>(
sqlôe3_öt64
)0x7FFFFFFF ){

785 
rc
 = 
SQLITE_OK
;

788 do{ 
rc
 = 
	`osFåunˇã
(
h
,
sz
); }Ñc<0 && 
î∫o
==
EINTR
 );

789  
rc
;

790 
	}
}

802 
	$sqlôeEº‹FromPosixEº‹
(
posixEº‹
, 
sqlôeIOEº
) {

803 
	`as£π
–(
sqlôeIOEº
 =
SQLITE_IOERR_LOCK
) ||

804 (
sqlôeIOEº
 =
SQLITE_IOERR_UNLOCK
) ||

805 (
sqlôeIOEº
 =
SQLITE_IOERR_RDLOCK
) ||

806 (
sqlôeIOEº
 =
SQLITE_IOERR_CHECKRESERVEDLOCK
) );

807 
posixEº‹
) {

808 
EACCES
:

809 
EAGAIN
:

810 
ETIMEDOUT
:

811 
EBUSY
:

812 
EINTR
:

813 
ENOLCK
:

816  
SQLITE_BUSY
;

818 
EPERM
:

819  
SQLITE_PERM
;

822  
sqlôeIOEº
;

824 
	}
}

844 
	svxw‹ksFûeId
 {

845 
vxw‹ksFûeId
 *
	mpNext
;

846 
	mnRef
;

847 
	mnName
;

848 *
	mzC™⁄iˇlName
;

851 #i‡
OS_VXWORKS


856 
vxw‹ksFûeId
 *
	gvxw‹ksFûeLi°
 = 0;

871 
	$vxw‹ksSim∂ifyName
(*
z
, 
n
){

872 
i
, 
j
;

873  
n
>1 && 
z
[n-1]=='/' ){Ç--; }

874 
i
=
j
=0; i<
n
; i++){

875 if–
z
[
i
]=='/' ){

876 if–
z
[
i
+1]=='/' ) ;

877 if–
z
[
i
+1]=='.' && i+2<
n
 && z[i+2]=='/' ){

878 
i
 += 1;

881 if–
z
[
i
+1]=='.' && i+3<
n
 && z[i+2]=='.' && z[i+3]=='/' ){

882  
j
>0 && 
z
[j-1]!='/' ){ j--; }

883 if–
j
>0 ){ j--; }

884 
i
 += 2;

888 
z
[
j
++] = z[
i
];

890 
z
[
j
] = 0;

891  
j
;

892 
	}
}

905 
vxw‹ksFûeId
 *
	$vxw‹ksFödFûeId
(c⁄° *
zAbsﬁuãName
){

906 
vxw‹ksFûeId
 *
pNew
;

907 
vxw‹ksFûeId
 *
pC™did©e
;

908 
n
;

910 
	`as£π
–
zAbsﬁuãName
[0]=='/' );

911 
n
 = ()
	`°æí
(
zAbsﬁuãName
);

912 
pNew
 = 
	`sqlôe3_mÆloc64
–(*pNewË+ (
n
+1) );

913 if–
pNew
==0 )  0;

914 
pNew
->
zC™⁄iˇlName
 = (*)&pNew[1];

915 
	`mem˝y
(
pNew
->
zC™⁄iˇlName
, 
zAbsﬁuãName
, 
n
+1);

916 
n
 = 
	`vxw‹ksSim∂ifyName
(
pNew
->
zC™⁄iˇlName
,Ç);

922 
	`unixE¡îMuãx
();

923 
pC™did©e
=
vxw‹ksFûeLi°
;ÖC™did©e;ÖC™did©eıC™did©e->
pNext
){

924 if–
pC™did©e
->
nName
==
n


925 && 
	`memcmp
(
pC™did©e
->
zC™⁄iˇlName
, 
pNew
->zC™⁄iˇlName, 
n
)==0

927 
	`sqlôe3_‰ì
(
pNew
);

928 
pC™did©e
->
nRef
++;

929 
	`unixLóveMuãx
();

930  
pC™did©e
;

935 
pNew
->
nRef
 = 1;

936 
pNew
->
nName
 = 
n
;

937 
pNew
->
pNext
 = 
vxw‹ksFûeLi°
;

938 
vxw‹ksFûeLi°
 = 
pNew
;

939 
	`unixLóveMuãx
();

940  
pNew
;

941 
	}
}

947 
	$vxw‹ksRñó£FûeId
(
vxw‹ksFûeId
 *
pId
){

948 
	`unixE¡îMuãx
();

949 
	`as£π
–
pId
->
nRef
>0 );

950 
pId
->
nRef
--;

951 if–
pId
->
nRef
==0 ){

952 
vxw‹ksFûeId
 **
µ
;

953 
µ
=&
vxw‹ksFûeLi°
; *µ && *µ!=
pId
;Ö∞&((*µ)->
pNext
)){}

954 
	`as£π
–*
µ
==
pId
 );

955 *
µ
 = 
pId
->
pNext
;

956 
	`sqlôe3_‰ì
(
pId
);

958 
	`unixLóveMuãx
();

959 
	}
}

1059 
	sunixFûeId
 {

1060 
dev_t
 
	mdev
;

1061 #i‡
OS_VXWORKS


1062 
vxw‹ksFûeId
 *
	mpId
;

1064 
öo_t
 
	möo
;

1077 
	sunixInodeInfo
 {

1078 
unixFûeId
 
	mfûeId
;

1079 
	mnSh¨ed
;

1080 
	meFûeLock
;

1081 
	mbPro˚ssLock
;

1082 
	mnRef
;

1083 
unixShmNode
 *
	mpShmNode
;

1084 
	mnLock
;

1085 
UnixUnu£dFd
 *
	mpUnu£d
;

1086 
unixInodeInfo
 *
	mpNext
;

1087 
unixInodeInfo
 *
	mpPªv
;

1088 #i‡
SQLITE_ENABLE_LOCKING_STYLE


1089 
	msh¨edByã
;

1091 #i‡
OS_VXWORKS


1092 
£m_t
 *
	mpSem
;

1093 
	maSemName
[
MAX_PATHNAME
+2];

1100 
unixInodeInfo
 *
	göodeLi°
 = 0;

1118 
	#unixLogEº‹
(
a
,
b
,
c
Ë
	`unixLogEº‹AtLöe
◊,b,c,
__LINE__
)

	)

1119 
	$unixLogEº‹AtLöe
(

1120 
îrcode
,

1121 c⁄° *
zFunc
,

1122 c⁄° *
zP©h
,

1123 
iLöe


1125 *
zEº
;

1126 
iEºno
 = 
î∫o
;

1132 #i‡
SQLITE_THREADSAFE
 && 
	`deföed
(
HAVE_STRERROR_R
)

1133 
aEº
[80];

1134 
	`mem£t
(
aEº
, 0, (aErr));

1135 
zEº
 = 
aEº
;

1149 #i‡
	`deföed
(
STRERROR_R_CHAR_P
Ë|| deföed(
__USE_GNU
)

1150 
zEº
 =

1152 
	`°ªº‹_r
(
iEºno
, 
aEº
, (aErr)-1);

1154 #ñi‡
SQLITE_THREADSAFE


1156 
zEº
 = "";

1159 
zEº
 = 
	`°ªº‹
(
iEºno
);

1162 if–
zP©h
==0 ) zPath = "";

1163 
	`sqlôe3_log
(
îrcode
,

1165 
iLöe
, 
iEºno
, 
zFunc
, 
zP©h
, 
zEº


1168  
îrcode
;

1169 
	}
}

1184 
	$robu°_˛o£
(
unixFûe
 *
pFûe
, 
h
, 
löío
){

1185 if–
	`osClo£
(
h
) ){

1186 
	`unixLogEº‹AtLöe
(
SQLITE_IOERR_CLOSE
, "close",

1187 
pFûe
 ?ÖFûe->
zP©h
 : 0, 
löío
);

1189 
	}
}

1195 
	$°‹eLa°Eºno
(
unixFûe
 *
pFûe
, 
îr‹
){

1196 
pFûe
->
œ°Eºno
 = 
îr‹
;

1197 
	}
}

1202 
	$˛o£PídögFds
(
unixFûe
 *
pFûe
){

1203 
unixInodeInfo
 *
pInode
 = 
pFûe
->pInode;

1204 
UnixUnu£dFd
 *
p
;

1205 
UnixUnu£dFd
 *
pNext
;

1206 
p
=
pInode
->
pUnu£d
;Ö;Ö=
pNext
){

1207 
pNext
 = 
p
->pNext;

1208 
	`robu°_˛o£
(
pFûe
, 
p
->
fd
, 
__LINE__
);

1209 
	`sqlôe3_‰ì
(
p
);

1211 
pInode
->
pUnu£d
 = 0;

1212 
	}
}

1220 
	$ªÀa£InodeInfo
(
unixFûe
 *
pFûe
){

1221 
unixInodeInfo
 *
pInode
 = 
pFûe
->pInode;

1222 
	`as£π
–
	`unixMuãxHñd
() );

1223 if–
	`ALWAYS
(
pInode
) ){

1224 
pInode
->
nRef
--;

1225 if–
pInode
->
nRef
==0 ){

1226 
	`as£π
–
pInode
->
pShmNode
==0 );

1227 
	`˛o£PídögFds
(
pFûe
);

1228 if–
pInode
->
pPªv
 ){

1229 
	`as£π
–
pInode
->
pPªv
->
pNext
==pInode );

1230 
pInode
->
pPªv
->
pNext
 =ÖInode->pNext;

1232 
	`as£π
–
öodeLi°
==
pInode
 );

1233 
öodeLi°
 = 
pInode
->
pNext
;

1235 if–
pInode
->
pNext
 ){

1236 
	`as£π
–
pInode
->
pNext
->
pPªv
==pInode );

1237 
pInode
->
pNext
->
pPªv
 =ÖInode->pPrev;

1239 
	`sqlôe3_‰ì
(
pInode
);

1242 
	}
}

1254 
	$födInodeInfo
(

1255 
unixFûe
 *
pFûe
,

1256 
unixInodeInfo
 **
µInode


1258 
rc
;

1259 
fd
;

1260 
unixFûeId
 
fûeId
;

1261 
°©
 
°©buf
;

1262 
unixInodeInfo
 *
pInode
 = 0;

1264 
	`as£π
–
	`unixMuãxHñd
() );

1269 
fd
 = 
pFûe
->
h
;

1270 
rc
 = 
	`osF°©
(
fd
, &
°©buf
);

1271 if–
rc
!=0 ){

1272 
	`°‹eLa°Eºno
(
pFûe
, 
î∫o
);

1273 #i‡
	`deföed
(
EOVERFLOW
Ë&& deföed(
SQLITE_DISABLE_LFS
)

1274 if–
pFûe
->
œ°Eºno
==
EOVERFLOW
 )  
SQLITE_NOLFS
;

1276  
SQLITE_IOERR
;

1279 #ifde‡
__APPLE__


1290 if–
°©buf
.
°_size
==0 && (
pFûe
->
fsFœgs
 & 
SQLITE_FSFLAGS_IS_MSDOS
)!=0 ){

1291 do{ 
rc
 = 
	`osWrôe
(
fd
, "S", 1); }Ñc<0 && 
î∫o
==
EINTR
 );

1292 if–
rc
!=1 ){

1293 
	`°‹eLa°Eºno
(
pFûe
, 
î∫o
);

1294  
SQLITE_IOERR
;

1296 
rc
 = 
	`osF°©
(
fd
, &
°©buf
);

1297 if–
rc
!=0 ){

1298 
	`°‹eLa°Eºno
(
pFûe
, 
î∫o
);

1299  
SQLITE_IOERR
;

1304 
	`mem£t
(&
fûeId
, 0, (fileId));

1305 
fûeId
.
dev
 = 
°©buf
.
°_dev
;

1306 #i‡
OS_VXWORKS


1307 
fûeId
.
pId
 = 
pFûe
->pId;

1309 
fûeId
.
öo
 = 
°©buf
.
°_öo
;

1311 
pInode
 = 
öodeLi°
;

1312  
pInode
 && 
	`memcmp
(&
fûeId
, &pInode->fileId, (fileId)) ){

1313 
pInode
 =ÖInode->
pNext
;

1315 if–
pInode
==0 ){

1316 
pInode
 = 
	`sqlôe3_mÆloc64
( (*pInode) );

1317 if–
pInode
==0 ){

1318  
SQLITE_NOMEM_BKPT
;

1320 
	`mem£t
(
pInode
, 0, (*pInode));

1321 
	`mem˝y
(&
pInode
->
fûeId
, &fileId, (fileId));

1322 
pInode
->
nRef
 = 1;

1323 
pInode
->
pNext
 = 
öodeLi°
;

1324 
pInode
->
pPªv
 = 0;

1325 if–
öodeLi°
 ) inodeLi°->
pPªv
 = 
pInode
;

1326 
öodeLi°
 = 
pInode
;

1328 
pInode
->
nRef
++;

1330 *
µInode
 = 
pInode
;

1331  
SQLITE_OK
;

1332 
	}
}

1337 
	$fûeHasMoved
(
unixFûe
 *
pFûe
){

1338 #i‡
OS_VXWORKS


1339  
pFûe
->
pInode
!=0 &&ÖFûe->
pId
!ıFûe->pInode->
fûeId
.pId;

1341 
°©
 
buf
;

1342  
pFûe
->
pInode
!=0 &&

1343 (
	`osSèt
(
pFûe
->
zP©h
, &
buf
)!=0 || buf.
°_öo
!ıFûe->
pInode
->
fûeId
.
öo
);

1345 
	}
}

1357 
	$vîifyDbFûe
(
unixFûe
 *
pFûe
){

1358 
°©
 
buf
;

1359 
rc
;

1362 if–
pFûe
->
˘æFœgs
 & 
UNIXFILE_NOLOCK
 ) ;

1364 
rc
 = 
	`osF°©
(
pFûe
->
h
, &
buf
);

1365 if–
rc
!=0 ){

1366 
	`sqlôe3_log
(
SQLITE_WARNING
, "ˇ¬Ÿ f°© db fûê%s", 
pFûe
->
zP©h
);

1369 if–
buf
.
°_∆ök
==0 ){

1370 
	`sqlôe3_log
(
SQLITE_WARNING
, "fûêu∆öked whûê›í: %s", 
pFûe
->
zP©h
);

1373 if–
buf
.
°_∆ök
>1 ){

1374 
	`sqlôe3_log
(
SQLITE_WARNING
, "mu…ùÀÜök†tÿfûe: %s", 
pFûe
->
zP©h
);

1377 if–
	`fûeHasMoved
(
pFûe
) ){

1378 
	`sqlôe3_log
(
SQLITE_WARNING
, "fûêª«med whûê›í: %s", 
pFûe
->
zP©h
);

1381 
	}
}

1390 
	$unixCheckRe£rvedLock
(
sqlôe3_fûe
 *
id
, *
pResOut
){

1391 
rc
 = 
SQLITE_OK
;

1392 
ª£rved
 = 0;

1393 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

1395 
	`SimuœãIOEº‹
– 
SQLITE_IOERR_CHECKRESERVEDLOCK
; );

1397 
	`as£π
–
pFûe
 );

1398 
	`as£π
–
pFûe
->
eFûeLock
<=
SHARED_LOCK
 );

1399 
	`unixE¡îMuãx
();

1402 if–
pFûe
->
pInode
->
eFûeLock
>
SHARED_LOCK
 ){

1403 
ª£rved
 = 1;

1408 #i‚de‡
__DJGPP__


1409 if–!
ª£rved
 && !
pFûe
->
pInode
->
bPro˚ssLock
 ){

1410 
Êock
 
lock
;

1411 
lock
.
l_whí˚
 = 
SEEK_SET
;

1412 
lock
.
l_°¨t
 = 
RESERVED_BYTE
;

1413 
lock
.
l_Àn
 = 1;

1414 
lock
.
l_ty≥
 = 
F_WRLCK
;

1415 if–
	`osF˙é
(
pFûe
->
h
, 
F_GETLK
, &
lock
) ){

1416 
rc
 = 
SQLITE_IOERR_CHECKRESERVEDLOCK
;

1417 
	`°‹eLa°Eºno
(
pFûe
, 
î∫o
);

1418 } if–
lock
.
l_ty≥
!=
F_UNLCK
 ){

1419 
ª£rved
 = 1;

1424 
	`unixLóveMuãx
();

1425 
	`OSTRACE
(("TEST WR-LOCK %d %d %d (unix)\n", 
pFûe
->
h
, 
rc
, 
ª£rved
));

1427 *
pResOut
 = 
ª£rved
;

1428  
rc
;

1429 
	}
}

1450 
	$unixFûeLock
(
unixFûe
 *
pFûe
, 
Êock
 *
pLock
){

1451 
rc
;

1452 
unixInodeInfo
 *
pInode
 = 
pFûe
->pInode;

1453 
	`as£π
–
	`unixMuãxHñd
() );

1454 
	`as£π
–
pInode
!=0 );

1455 if–(
pFûe
->
˘æFœgs
 & (
UNIXFILE_EXCL
|
UNIXFILE_RDONLY
))==UNIXFILE_EXCL ){

1456 if–
pInode
->
bPro˚ssLock
==0 ){

1457 
Êock
 
lock
;

1458 
	`as£π
–
pInode
->
nLock
==0 );

1459 
lock
.
l_whí˚
 = 
SEEK_SET
;

1460 
lock
.
l_°¨t
 = 
SHARED_FIRST
;

1461 
lock
.
l_Àn
 = 
SHARED_SIZE
;

1462 
lock
.
l_ty≥
 = 
F_WRLCK
;

1463 
rc
 = 
	`osF˙é
(
pFûe
->
h
, 
F_SETLK
, &
lock
);

1464 if–
rc
<0 ) Ñc;

1465 
pInode
->
bPro˚ssLock
 = 1;

1466 
pInode
->
nLock
++;

1468 
rc
 = 0;

1471 
rc
 = 
	`osF˙é
(
pFûe
->
h
, 
F_SETLK
, 
pLock
);

1473  
rc
;

1474 
	}
}

1500 
	$unixLock
(
sqlôe3_fûe
 *
id
, 
eFûeLock
){

1540 
rc
 = 
SQLITE_OK
;

1541 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

1542 
unixInodeInfo
 *
pInode
;

1543 
Êock
 
lock
;

1544 
tEºno
 = 0;

1546 
	`as£π
–
pFûe
 );

1547 
	`OSTRACE
(("LOCK %d %†wa†%s(%s,%dËpid=%d (unix)\n", 
pFûe
->
h
,

1548 
	`azFûeLock
(
eFûeLock
),ázFûeLock(
pFûe
->eFileLock),

1549 
	`azFûeLock
(
pFûe
->
pInode
->
eFûeLock
),ÖFûe->pInode->
nSh¨ed
,

1550 
	`osGëpid
(0)));

1556 if–
pFûe
->
eFûeLock
>=eFileLock ){

1557 
	`OSTRACE
(("LOCK %d %†ok (Æªady hñdË(unix)\n", 
pFûe
->
h
,

1558 
	`azFûeLock
(
eFûeLock
)));

1559  
SQLITE_OK
;

1567 
	`as£π
–
pFûe
->
eFûeLock
!=
NO_LOCK
 ||ÉFûeLock==
SHARED_LOCK
 );

1568 
	`as£π
–
eFûeLock
!=
PENDING_LOCK
 );

1569 
	`as£π
–
eFûeLock
!=
RESERVED_LOCK
 || 
pFûe
->eFûeLock==
SHARED_LOCK
 );

1573 
	`unixE¡îMuãx
();

1574 
pInode
 = 
pFûe
->pInode;

1579 if–(
pFûe
->
eFûeLock
!=
pInode
->eFileLock &&

1580 (
pInode
->
eFûeLock
>=
PENDING_LOCK
 ||ÉFûeLock>
SHARED_LOCK
))

1582 
rc
 = 
SQLITE_BUSY
;

1583 
íd_lock
;

1590 if–
eFûeLock
==
SHARED_LOCK
 &&

1591 (
pInode
->
eFûeLock
==
SHARED_LOCK
 ||ÖInode->eFûeLock==
RESERVED_LOCK
) ){

1592 
	`as£π
–
eFûeLock
==
SHARED_LOCK
 );

1593 
	`as£π
–
pFûe
->
eFûeLock
==0 );

1594 
	`as£π
–
pInode
->
nSh¨ed
>0 );

1595 
pFûe
->
eFûeLock
 = 
SHARED_LOCK
;

1596 
pInode
->
nSh¨ed
++;

1597 
pInode
->
nLock
++;

1598 
íd_lock
;

1606 
lock
.
l_Àn
 = 1L;

1607 
lock
.
l_whí˚
 = 
SEEK_SET
;

1608 if–
eFûeLock
==
SHARED_LOCK


1609 || (
eFûeLock
==
EXCLUSIVE_LOCK
 && 
pFûe
->eFûeLock<
PENDING_LOCK
)

1611 
lock
.
l_ty≥
 = (
eFûeLock
==
SHARED_LOCK
?
F_RDLCK
:
F_WRLCK
);

1612 
lock
.
l_°¨t
 = 
PENDING_BYTE
;

1613 if–
	`unixFûeLock
(
pFûe
, &
lock
) ){

1614 
tEºno
 = 
î∫o
;

1615 
rc
 = 
	`sqlôeEº‹FromPosixEº‹
(
tEºno
, 
SQLITE_IOERR_LOCK
);

1616 if–
rc
!=
SQLITE_BUSY
 ){

1617 
	`°‹eLa°Eºno
(
pFûe
, 
tEºno
);

1619 
íd_lock
;

1627 if–
eFûeLock
==
SHARED_LOCK
 ){

1628 
	`as£π
–
pInode
->
nSh¨ed
==0 );

1629 
	`as£π
–
pInode
->
eFûeLock
==0 );

1630 
	`as£π
–
rc
==
SQLITE_OK
 );

1633 
lock
.
l_°¨t
 = 
SHARED_FIRST
;

1634 
lock
.
l_Àn
 = 
SHARED_SIZE
;

1635 if–
	`unixFûeLock
(
pFûe
, &
lock
) ){

1636 
tEºno
 = 
î∫o
;

1637 
rc
 = 
	`sqlôeEº‹FromPosixEº‹
(
tEºno
, 
SQLITE_IOERR_LOCK
);

1641 
lock
.
l_°¨t
 = 
PENDING_BYTE
;

1642 
lock
.
l_Àn
 = 1L;

1643 
lock
.
l_ty≥
 = 
F_UNLCK
;

1644 if–
	`unixFûeLock
(
pFûe
, &
lock
Ë&& 
rc
==
SQLITE_OK
 ){

1646 
tEºno
 = 
î∫o
;

1647 
rc
 = 
SQLITE_IOERR_UNLOCK
;

1650 if–
rc
 ){

1651 if–
rc
!=
SQLITE_BUSY
 ){

1652 
	`°‹eLa°Eºno
(
pFûe
, 
tEºno
);

1654 
íd_lock
;

1656 
pFûe
->
eFûeLock
 = 
SHARED_LOCK
;

1657 
pInode
->
nLock
++;

1658 
pInode
->
nSh¨ed
 = 1;

1660 }if–
eFûeLock
==
EXCLUSIVE_LOCK
 && 
pInode
->
nSh¨ed
>1 ){

1663 
rc
 = 
SQLITE_BUSY
;

1669 
	`as£π
–0!=
pFûe
->
eFûeLock
 );

1670 
lock
.
l_ty≥
 = 
F_WRLCK
;

1672 
	`as£π
–
eFûeLock
==
RESERVED_LOCK
 ||ÉFûeLock==
EXCLUSIVE_LOCK
 );

1673 if–
eFûeLock
==
RESERVED_LOCK
 ){

1674 
lock
.
l_°¨t
 = 
RESERVED_BYTE
;

1675 
lock
.
l_Àn
 = 1L;

1677 
lock
.
l_°¨t
 = 
SHARED_FIRST
;

1678 
lock
.
l_Àn
 = 
SHARED_SIZE
;

1681 if–
	`unixFûeLock
(
pFûe
, &
lock
) ){

1682 
tEºno
 = 
î∫o
;

1683 
rc
 = 
	`sqlôeEº‹FromPosixEº‹
(
tEºno
, 
SQLITE_IOERR_LOCK
);

1684 if–
rc
!=
SQLITE_BUSY
 ){

1685 
	`°‹eLa°Eºno
(
pFûe
, 
tEºno
);

1691 #ifde‡
SQLITE_DEBUG


1697 if–
rc
==
SQLITE_OK


1698 && 
pFûe
->
eFûeLock
<=
SHARED_LOCK


1699 && 
eFûeLock
==
RESERVED_LOCK


1701 
pFûe
->
å™sC¡rChng
 = 0;

1702 
pFûe
->
dbUpd©e
 = 0;

1703 
pFûe
->
öN‹mÆWrôe
 = 1;

1708 if–
rc
==
SQLITE_OK
 ){

1709 
pFûe
->
eFûeLock
 =ÉFileLock;

1710 
pInode
->
eFûeLock
 =ÉFileLock;

1711 }if–
eFûeLock
==
EXCLUSIVE_LOCK
 ){

1712 
pFûe
->
eFûeLock
 = 
PENDING_LOCK
;

1713 
pInode
->
eFûeLock
 = 
PENDING_LOCK
;

1716 
íd_lock
:

1717 
	`unixLóveMuãx
();

1718 
	`OSTRACE
(("LOCK %d %†%†(unix)\n", 
pFûe
->
h
, 
	`azFûeLock
(
eFûeLock
),

1719 
rc
==
SQLITE_OK
 ? "ok" : "failed"));

1720  
rc
;

1721 
	}
}

1727 
	$£tPídögFd
(
unixFûe
 *
pFûe
){

1728 
unixInodeInfo
 *
pInode
 = 
pFûe
->pInode;

1729 
UnixUnu£dFd
 *
p
 = 
pFûe
->
pUnu£d
;

1730 
p
->
pNext
 = 
pInode
->
pUnu£d
;

1731 
pInode
->
pUnu£d
 = 
p
;

1732 
pFûe
->
h
 = -1;

1733 
pFûe
->
pUnu£d
 = 0;

1734 
	}
}

1749 
	$posixU∆ock
(
sqlôe3_fûe
 *
id
, 
eFûeLock
, 
h™dÀNFSU∆ock
){

1750 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

1751 
unixInodeInfo
 *
pInode
;

1752 
Êock
 
lock
;

1753 
rc
 = 
SQLITE_OK
;

1755 
	`as£π
–
pFûe
 );

1756 
	`OSTRACE
(("UNLOCK %d %d wa†%d(%d,%dËpid=%d (unix)\n", 
pFûe
->
h
, 
eFûeLock
,

1757 
pFûe
->
eFûeLock
,ÖFûe->
pInode
->eFûeLock,ÖFûe->pInode->
nSh¨ed
,

1758 
	`osGëpid
(0)));

1760 
	`as£π
–
eFûeLock
<=
SHARED_LOCK
 );

1761 if–
pFûe
->
eFûeLock
<=eFileLock ){

1762  
SQLITE_OK
;

1764 
	`unixE¡îMuãx
();

1765 
pInode
 = 
pFûe
->pInode;

1766 
	`as£π
–
pInode
->
nSh¨ed
!=0 );

1767 if–
pFûe
->
eFûeLock
>
SHARED_LOCK
 ){

1768 
	`as£π
–
pInode
->
eFûeLock
==
pFûe
->eFileLock );

1770 #ifde‡
SQLITE_DEBUG


1779 
pFûe
->
öN‹mÆWrôe
 = 0;

1791 if–
eFûeLock
==
SHARED_LOCK
 ){

1792 #i‡!
	`deföed
(
__APPLE__
Ë|| !
SQLITE_ENABLE_LOCKING_STYLE


1793 ()
h™dÀNFSU∆ock
;

1794 
	`as£π
–
h™dÀNFSU∆ock
==0 );

1796 #i‡
	`deföed
(
__APPLE__
Ë&& 
SQLITE_ENABLE_LOCKING_STYLE


1797 if–
h™dÀNFSU∆ock
 ){

1798 
tEºno
;

1799 
off_t
 
divSize
 = 
SHARED_SIZE
 - 1;

1801 
lock
.
l_ty≥
 = 
F_UNLCK
;

1802 
lock
.
l_whí˚
 = 
SEEK_SET
;

1803 
lock
.
l_°¨t
 = 
SHARED_FIRST
;

1804 
lock
.
l_Àn
 = 
divSize
;

1805 if–
	`unixFûeLock
(
pFûe
, &
lock
)==(-1) ){

1806 
tEºno
 = 
î∫o
;

1807 
rc
 = 
SQLITE_IOERR_UNLOCK
;

1808 
	`°‹eLa°Eºno
(
pFûe
, 
tEºno
);

1809 
íd_u∆ock
;

1811 
lock
.
l_ty≥
 = 
F_RDLCK
;

1812 
lock
.
l_whí˚
 = 
SEEK_SET
;

1813 
lock
.
l_°¨t
 = 
SHARED_FIRST
;

1814 
lock
.
l_Àn
 = 
divSize
;

1815 if–
	`unixFûeLock
(
pFûe
, &
lock
)==(-1) ){

1816 
tEºno
 = 
î∫o
;

1817 
rc
 = 
	`sqlôeEº‹FromPosixEº‹
(
tEºno
, 
SQLITE_IOERR_RDLOCK
);

1818 if–
	`IS_LOCK_ERROR
(
rc
) ){

1819 
	`°‹eLa°Eºno
(
pFûe
, 
tEºno
);

1821 
íd_u∆ock
;

1823 
lock
.
l_ty≥
 = 
F_UNLCK
;

1824 
lock
.
l_whí˚
 = 
SEEK_SET
;

1825 
lock
.
l_°¨t
 = 
SHARED_FIRST
+
divSize
;

1826 
lock
.
l_Àn
 = 
SHARED_SIZE
-
divSize
;

1827 if–
	`unixFûeLock
(
pFûe
, &
lock
)==(-1) ){

1828 
tEºno
 = 
î∫o
;

1829 
rc
 = 
SQLITE_IOERR_UNLOCK
;

1830 
	`°‹eLa°Eºno
(
pFûe
, 
tEºno
);

1831 
íd_u∆ock
;

1836 
lock
.
l_ty≥
 = 
F_RDLCK
;

1837 
lock
.
l_whí˚
 = 
SEEK_SET
;

1838 
lock
.
l_°¨t
 = 
SHARED_FIRST
;

1839 
lock
.
l_Àn
 = 
SHARED_SIZE
;

1840 if–
	`unixFûeLock
(
pFûe
, &
lock
) ){

1847 
rc
 = 
SQLITE_IOERR_RDLOCK
;

1848 
	`°‹eLa°Eºno
(
pFûe
, 
î∫o
);

1849 
íd_u∆ock
;

1853 
lock
.
l_ty≥
 = 
F_UNLCK
;

1854 
lock
.
l_whí˚
 = 
SEEK_SET
;

1855 
lock
.
l_°¨t
 = 
PENDING_BYTE
;

1856 
lock
.
l_Àn
 = 2L; 
	`as£π
–
PENDING_BYTE
+1==
RESERVED_BYTE
 );

1857 if–
	`unixFûeLock
(
pFûe
, &
lock
)==0 ){

1858 
pInode
->
eFûeLock
 = 
SHARED_LOCK
;

1860 
rc
 = 
SQLITE_IOERR_UNLOCK
;

1861 
	`°‹eLa°Eºno
(
pFûe
, 
î∫o
);

1862 
íd_u∆ock
;

1865 if–
eFûeLock
==
NO_LOCK
 ){

1870 
pInode
->
nSh¨ed
--;

1871 if–
pInode
->
nSh¨ed
==0 ){

1872 
lock
.
l_ty≥
 = 
F_UNLCK
;

1873 
lock
.
l_whí˚
 = 
SEEK_SET
;

1874 
lock
.
l_°¨t
 =Üock.
l_Àn
 = 0L;

1875 if–
	`unixFûeLock
(
pFûe
, &
lock
)==0 ){

1876 
pInode
->
eFûeLock
 = 
NO_LOCK
;

1878 
rc
 = 
SQLITE_IOERR_UNLOCK
;

1879 
	`°‹eLa°Eºno
(
pFûe
, 
î∫o
);

1880 
pInode
->
eFûeLock
 = 
NO_LOCK
;

1881 
pFûe
->
eFûeLock
 = 
NO_LOCK
;

1889 
pInode
->
nLock
--;

1890 
	`as£π
–
pInode
->
nLock
>=0 );

1891 if–
pInode
->
nLock
==0 ){

1892 
	`˛o£PídögFds
(
pFûe
);

1896 
íd_u∆ock
:

1897 
	`unixLóveMuãx
();

1898 if–
rc
==
SQLITE_OK
 ) 
pFûe
->
eFûeLock
 =ÉFileLock;

1899  
rc
;

1900 
	}
}

1909 
	$unixU∆ock
(
sqlôe3_fûe
 *
id
, 
eFûeLock
){

1910 #i‡
SQLITE_MAX_MMAP_SIZE
>0

1911 
	`as£π
–
eFûeLock
==
SHARED_LOCK
 || ((
unixFûe
 *)
id
)->
nFëchOut
==0 );

1913  
	`posixU∆ock
(
id
, 
eFûeLock
, 0);

1914 
	}
}

1916 #i‡
SQLITE_MAX_MMAP_SIZE
>0

1917 
unixM≠fûe
(
unixFûe
 *
pFd
, 
i64
 
nByã
);

1918 
unixUnm≠fûe
(
unixFûe
 *
pFd
);

1931 
	$˛o£UnixFûe
(
sqlôe3_fûe
 *
id
){

1932 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

1933 #i‡
SQLITE_MAX_MMAP_SIZE
>0

1934 
	`unixUnm≠fûe
(
pFûe
);

1936 if–
pFûe
->
h
>=0 ){

1937 
	`robu°_˛o£
(
pFûe
,ÖFûe->
h
, 
__LINE__
);

1938 
pFûe
->
h
 = -1;

1940 #i‡
OS_VXWORKS


1941 if–
pFûe
->
pId
 ){

1942 if–
pFûe
->
˘æFœgs
 & 
UNIXFILE_DELETE
 ){

1943 
	`osU∆ök
(
pFûe
->
pId
->
zC™⁄iˇlName
);

1945 
	`vxw‹ksRñó£FûeId
(
pFûe
->
pId
);

1946 
pFûe
->
pId
 = 0;

1949 #ifde‡
SQLITE_UNLINK_AFTER_CLOSE


1950 if–
pFûe
->
˘æFœgs
 & 
UNIXFILE_DELETE
 ){

1951 
	`osU∆ök
(
pFûe
->
zP©h
);

1952 
	`sqlôe3_‰ì
(*(**)&
pFûe
->
zP©h
);

1953 
pFûe
->
zP©h
 = 0;

1956 
	`OSTRACE
(("CLOSE %-3d\n", 
pFûe
->
h
));

1957 
	`O≥nCou¡î
(-1);

1958 
	`sqlôe3_‰ì
(
pFûe
->
pUnu£d
);

1959 
	`mem£t
(
pFûe
, 0, (
unixFûe
));

1960  
SQLITE_OK
;

1961 
	}
}

1966 
	$unixClo£
(
sqlôe3_fûe
 *
id
){

1967 
rc
 = 
SQLITE_OK
;

1968 
unixFûe
 *
pFûe
 = (unixFûê*)
id
;

1969 
	`vîifyDbFûe
(
pFûe
);

1970 
	`unixU∆ock
(
id
, 
NO_LOCK
);

1971 
	`unixE¡îMuãx
();

1976 
	`as£π
–
pFûe
->
pInode
->
nLock
>0 ||ÖFûe->pInode->
bPro˚ssLock
==0 );

1977 if–
	`ALWAYS
(
pFûe
->
pInode
Ë&&ÖFûe->pInode->
nLock
 ){

1983 
	`£tPídögFd
(
pFûe
);

1985 
	`ªÀa£InodeInfo
(
pFûe
);

1986 
rc
 = 
	`˛o£UnixFûe
(
id
);

1987 
	`unixLóveMuãx
();

1988  
rc
;

1989 
	}
}

2011 
	$nﬁockCheckRe£rvedLock
(
sqlôe3_fûe
 *
NŸU£d
, *
pResOut
){

2012 
	`UNUSED_PARAMETER
(
NŸU£d
);

2013 *
pResOut
 = 0;

2014  
SQLITE_OK
;

2015 
	}
}

2016 
	$nﬁockLock
(
sqlôe3_fûe
 *
NŸU£d
, 
NŸU£d2
){

2017 
	`UNUSED_PARAMETER2
(
NŸU£d
, 
NŸU£d2
);

2018  
SQLITE_OK
;

2019 
	}
}

2020 
	$nﬁockU∆ock
(
sqlôe3_fûe
 *
NŸU£d
, 
NŸU£d2
){

2021 
	`UNUSED_PARAMETER2
(
NŸU£d
, 
NŸU£d2
);

2022  
SQLITE_OK
;

2023 
	}
}

2028 
	$nﬁockClo£
(
sqlôe3_fûe
 *
id
) {

2029  
	`˛o£UnixFûe
(
id
);

2030 
	}
}

2061 
	#DOTLOCK_SUFFIX
 ".lock"

	)

2073 
	$dŸlockCheckRe£rvedLock
(
sqlôe3_fûe
 *
id
, *
pResOut
) {

2074 
rc
 = 
SQLITE_OK
;

2075 
ª£rved
 = 0;

2076 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

2078 
	`SimuœãIOEº‹
– 
SQLITE_IOERR_CHECKRESERVEDLOCK
; );

2080 
	`as£π
–
pFûe
 );

2081 
ª£rved
 = 
	`osAc˚ss
((c⁄° *)
pFûe
->
lockögC⁄ãxt
, 0)==0;

2082 
	`OSTRACE
(("TEST WR-LOCK %d %d %d (dŸlock)\n", 
pFûe
->
h
, 
rc
, 
ª£rved
));

2083 *
pResOut
 = 
ª£rved
;

2084  
rc
;

2085 
	}
}

2114 
	$dŸlockLock
(
sqlôe3_fûe
 *
id
, 
eFûeLock
) {

2115 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

2116 *
zLockFûe
 = (*)
pFûe
->
lockögC⁄ãxt
;

2117 
rc
 = 
SQLITE_OK
;

2123 if–
pFûe
->
eFûeLock
 > 
NO_LOCK
 ){

2124 
pFûe
->
eFûeLock
 =ÉFileLock;

2126 #ifde‡
HAVE_UTIME


2127 
	`utime
(
zLockFûe
, 
NULL
);

2129 
	`utimes
(
zLockFûe
, 
NULL
);

2131  
SQLITE_OK
;

2135 
rc
 = 
	`osMkdú
(
zLockFûe
, 0777);

2136 if–
rc
<0 ){

2138 
tEºno
 = 
î∫o
;

2139 if–
EEXIST
 =
tEºno
 ){

2140 
rc
 = 
SQLITE_BUSY
;

2142 
rc
 = 
	`sqlôeEº‹FromPosixEº‹
(
tEºno
, 
SQLITE_IOERR_LOCK
);

2143 if–
rc
!=
SQLITE_BUSY
 ){

2144 
	`°‹eLa°Eºno
(
pFûe
, 
tEºno
);

2147  
rc
;

2151 
pFûe
->
eFûeLock
 =ÉFileLock;

2152  
rc
;

2153 
	}
}

2164 
	$dŸlockU∆ock
(
sqlôe3_fûe
 *
id
, 
eFûeLock
) {

2165 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

2166 *
zLockFûe
 = (*)
pFûe
->
lockögC⁄ãxt
;

2167 
rc
;

2169 
	`as£π
–
pFûe
 );

2170 
	`OSTRACE
(("UNLOCK %d %d wa†%dÖid=%d (dŸlock)\n", 
pFûe
->
h
, 
eFûeLock
,

2171 
pFûe
->
eFûeLock
, 
	`osGëpid
(0)));

2172 
	`as£π
–
eFûeLock
<=
SHARED_LOCK
 );

2175 if–
pFûe
->
eFûeLock
==eFileLock ){

2176  
SQLITE_OK
;

2182 if–
eFûeLock
==
SHARED_LOCK
 ){

2183 
pFûe
->
eFûeLock
 = 
SHARED_LOCK
;

2184  
SQLITE_OK
;

2188 
	`as£π
–
eFûeLock
==
NO_LOCK
 );

2189 
rc
 = 
	`osRmdú
(
zLockFûe
);

2190 if–
rc
<0 ){

2191 
tEºno
 = 
î∫o
;

2192 if–
tEºno
==
ENOENT
 ){

2193 
rc
 = 
SQLITE_OK
;

2195 
rc
 = 
SQLITE_IOERR_UNLOCK
;

2196 
	`°‹eLa°Eºno
(
pFûe
, 
tEºno
);

2198  
rc
;

2200 
pFûe
->
eFûeLock
 = 
NO_LOCK
;

2201  
SQLITE_OK
;

2202 
	}
}

2207 
	$dŸlockClo£
(
sqlôe3_fûe
 *
id
) {

2208 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

2209 
	`as£π
–
id
!=0 );

2210 
	`dŸlockU∆ock
(
id
, 
NO_LOCK
);

2211 
	`sqlôe3_‰ì
(
pFûe
->
lockögC⁄ãxt
);

2212  
	`˛o£UnixFûe
(
id
);

2213 
	}
}

2231 #i‡
SQLITE_ENABLE_LOCKING_STYLE


2236 #ifde‡
EINTR


2237 
	$robu°_Êock
(
fd
, 
›
){

2238 
rc
;

2239 do{ 
rc
 = 
	`Êock
(
fd
,
›
); }Ñc<0 && 
î∫o
==
EINTR
 );

2240  
rc
;

2241 
	}
}

2243 
	#robu°_Êock
(
a
,
b
Ë
	`Êock
◊,b)

	)

2253 
	$ÊockCheckRe£rvedLock
(
sqlôe3_fûe
 *
id
, *
pResOut
){

2254 
rc
 = 
SQLITE_OK
;

2255 
ª£rved
 = 0;

2256 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

2258 
	`SimuœãIOEº‹
– 
SQLITE_IOERR_CHECKRESERVEDLOCK
; );

2260 
	`as£π
–
pFûe
 );

2263 if–
pFûe
->
eFûeLock
>
SHARED_LOCK
 ){

2264 
ª£rved
 = 1;

2268 if–!
ª£rved
 ){

2270 
Ãc
 = 
	`robu°_Êock
(
pFûe
->
h
, 
LOCK_EX
 | 
LOCK_NB
);

2271 if–!
Ãc
 ){

2273 
Ãc
 = 
	`robu°_Êock
(
pFûe
->
h
, 
LOCK_UN
);

2274 i‡–
Ãc
 ) {

2275 
tEºno
 = 
î∫o
;

2277 
Ãc
 = 
SQLITE_IOERR_UNLOCK
;

2278 
	`°‹eLa°Eºno
(
pFûe
, 
tEºno
);

2279 
rc
 = 
Ãc
;

2282 
tEºno
 = 
î∫o
;

2283 
ª£rved
 = 1;

2285 
Ãc
 = 
	`sqlôeEº‹FromPosixEº‹
(
tEºno
, 
SQLITE_IOERR_LOCK
);

2286 if–
	`IS_LOCK_ERROR
(
Ãc
) ){

2287 
	`°‹eLa°Eºno
(
pFûe
, 
tEºno
);

2288 
rc
 = 
Ãc
;

2292 
	`OSTRACE
(("TEST WR-LOCK %d %d %d (Êock)\n", 
pFûe
->
h
, 
rc
, 
ª£rved
));

2294 #ifde‡
SQLITE_IGNORE_FLOCK_LOCK_ERRORS


2295 if–(
rc
 & 
SQLITE_IOERR
) == SQLITE_IOERR ){

2296 
rc
 = 
SQLITE_OK
;

2297 
ª£rved
=1;

2300 *
pResOut
 = 
ª£rved
;

2301  
rc
;

2302 
	}
}

2333 
	$ÊockLock
(
sqlôe3_fûe
 *
id
, 
eFûeLock
) {

2334 
rc
 = 
SQLITE_OK
;

2335 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

2337 
	`as£π
–
pFûe
 );

2341 i‡(
pFûe
->
eFûeLock
 > 
NO_LOCK
) {

2342 
pFûe
->
eFûeLock
 =ÉFileLock;

2343  
SQLITE_OK
;

2348 i‡(
	`robu°_Êock
(
pFûe
->
h
, 
LOCK_EX
 | 
LOCK_NB
)) {

2349 
tEºno
 = 
î∫o
;

2351 
rc
 = 
	`sqlôeEº‹FromPosixEº‹
(
tEºno
, 
SQLITE_IOERR_LOCK
);

2352 if–
	`IS_LOCK_ERROR
(
rc
) ){

2353 
	`°‹eLa°Eºno
(
pFûe
, 
tEºno
);

2357 
pFûe
->
eFûeLock
 =ÉFileLock;

2359 
	`OSTRACE
(("LOCK %d %†%†(Êock)\n", 
pFûe
->
h
, 
	`azFûeLock
(
eFûeLock
),

2360 
rc
==
SQLITE_OK
 ? "ok" : "failed"));

2361 #ifde‡
SQLITE_IGNORE_FLOCK_LOCK_ERRORS


2362 if–(
rc
 & 
SQLITE_IOERR
) == SQLITE_IOERR ){

2363 
rc
 = 
SQLITE_BUSY
;

2366  
rc
;

2367 
	}
}

2377 
	$ÊockU∆ock
(
sqlôe3_fûe
 *
id
, 
eFûeLock
) {

2378 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

2380 
	`as£π
–
pFûe
 );

2381 
	`OSTRACE
(("UNLOCK %d %d wa†%dÖid=%d (Êock)\n", 
pFûe
->
h
, 
eFûeLock
,

2382 
pFûe
->
eFûeLock
, 
	`osGëpid
(0)));

2383 
	`as£π
–
eFûeLock
<=
SHARED_LOCK
 );

2386 if–
pFûe
->
eFûeLock
==eFileLock ){

2387  
SQLITE_OK
;

2391 i‡(
eFûeLock
==
SHARED_LOCK
) {

2392 
pFûe
->
eFûeLock
 =ÉFileLock;

2393  
SQLITE_OK
;

2397 if–
	`robu°_Êock
(
pFûe
->
h
, 
LOCK_UN
) ){

2398 #ifde‡
SQLITE_IGNORE_FLOCK_LOCK_ERRORS


2399  
SQLITE_OK
;

2401  
SQLITE_IOERR_UNLOCK
;

2403 
pFûe
->
eFûeLock
 = 
NO_LOCK
;

2404  
SQLITE_OK
;

2406 
	}
}

2411 
	$ÊockClo£
(
sqlôe3_fûe
 *
id
) {

2412 
	`as£π
–
id
!=0 );

2413 
	`ÊockU∆ock
(
id
, 
NO_LOCK
);

2414  
	`˛o£UnixFûe
(
id
);

2415 
	}
}

2432 #i‡
OS_VXWORKS


2440 
	$£mXCheckRe£rvedLock
(
sqlôe3_fûe
 *
id
, *
pResOut
) {

2441 
rc
 = 
SQLITE_OK
;

2442 
ª£rved
 = 0;

2443 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

2445 
	`SimuœãIOEº‹
– 
SQLITE_IOERR_CHECKRESERVEDLOCK
; );

2447 
	`as£π
–
pFûe
 );

2450 if–
pFûe
->
eFûeLock
>
SHARED_LOCK
 ){

2451 
ª£rved
 = 1;

2455 if–!
ª£rved
 ){

2456 
£m_t
 *
pSem
 = 
pFûe
->
pInode
->pSem;

2458 if–
	`£m_åywaô
(
pSem
)==-1 ){

2459 
tEºno
 = 
î∫o
;

2460 if–
EAGAIN
 !
tEºno
 ){

2461 
rc
 = 
	`sqlôeEº‹FromPosixEº‹
(
tEºno
, 
SQLITE_IOERR_CHECKRESERVEDLOCK
);

2462 
	`°‹eLa°Eºno
(
pFûe
, 
tEºno
);

2465 
ª£rved
 = (
pFûe
->
eFûeLock
 < 
SHARED_LOCK
);

2469 
	`£m_po°
(
pSem
);

2472 
	`OSTRACE
(("TEST WR-LOCK %d %d %d (£m)\n", 
pFûe
->
h
, 
rc
, 
ª£rved
));

2474 *
pResOut
 = 
ª£rved
;

2475  
rc
;

2476 
	}
}

2507 
	$£mXLock
(
sqlôe3_fûe
 *
id
, 
eFûeLock
) {

2508 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

2509 
£m_t
 *
pSem
 = 
pFûe
->
pInode
->pSem;

2510 
rc
 = 
SQLITE_OK
;

2514 i‡(
pFûe
->
eFûeLock
 > 
NO_LOCK
) {

2515 
pFûe
->
eFûeLock
 =ÉFileLock;

2516 
rc
 = 
SQLITE_OK
;

2517 
£m_íd_lock
;

2521 if–
	`£m_åywaô
(
pSem
)==-1 ){

2522 
rc
 = 
SQLITE_BUSY
;

2523 
£m_íd_lock
;

2527 
pFûe
->
eFûeLock
 =ÉFileLock;

2529 
£m_íd_lock
:

2530  
rc
;

2531 
	}
}

2540 
	$£mXU∆ock
(
sqlôe3_fûe
 *
id
, 
eFûeLock
) {

2541 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

2542 
£m_t
 *
pSem
 = 
pFûe
->
pInode
->pSem;

2544 
	`as£π
–
pFûe
 );

2545 
	`as£π
–
pSem
 );

2546 
	`OSTRACE
(("UNLOCK %d %d wa†%dÖid=%d (£m)\n", 
pFûe
->
h
, 
eFûeLock
,

2547 
pFûe
->
eFûeLock
, 
	`osGëpid
(0)));

2548 
	`as£π
–
eFûeLock
<=
SHARED_LOCK
 );

2551 if–
pFûe
->
eFûeLock
==eFileLock ){

2552  
SQLITE_OK
;

2556 i‡(
eFûeLock
==
SHARED_LOCK
) {

2557 
pFûe
->
eFûeLock
 =ÉFileLock;

2558  
SQLITE_OK
;

2562 i‡–
	`£m_po°
(
pSem
)==-1 ) {

2563 
rc
, 
tEºno
 = 
î∫o
;

2564 
rc
 = 
	`sqlôeEº‹FromPosixEº‹
(
tEºno
, 
SQLITE_IOERR_UNLOCK
);

2565 if–
	`IS_LOCK_ERROR
(
rc
) ){

2566 
	`°‹eLa°Eºno
(
pFûe
, 
tEºno
);

2568  
rc
;

2570 
pFûe
->
eFûeLock
 = 
NO_LOCK
;

2571  
SQLITE_OK
;

2572 
	}
}

2577 
	$£mXClo£
(
sqlôe3_fûe
 *
id
) {

2578 if–
id
 ){

2579 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

2580 
	`£mXU∆ock
(
id
, 
NO_LOCK
);

2581 
	`as£π
–
pFûe
 );

2582 
	`unixE¡îMuãx
();

2583 
	`ªÀa£InodeInfo
(
pFûe
);

2584 
	`unixLóveMuãx
();

2585 
	`˛o£UnixFûe
(
id
);

2587  
SQLITE_OK
;

2588 
	}
}

2608 #i‡
deföed
(
__APPLE__
Ë&& 
SQLITE_ENABLE_LOCKING_STYLE


2612 
aÂLockögC⁄ãxt
 
	taÂLockögC⁄ãxt
;

2613 
	saÂLockögC⁄ãxt
 {

2614 
	mª£rved
;

2615 c⁄° *
	mdbP©h
;

2618 
	sByãR™geLockPB2


2620 
	moff£t
;

2621 
	mÀngth
;

2622 
	mªtR™geSèπ
;

2623 
	munLockFœg
;

2624 
	m°¨tEndFœg
;

2625 
	mfd
;

2628 
	#aÂfsByãR™geLock2FSCTL
 
	`_IOWR
('z', 23, 
ByãR™geLockPB2
)

	)

2636 
	$aÂSëLock
(

2637 c⁄° *
∑th
,

2638 
unixFûe
 *
pFûe
,

2639 
off£t
,

2640 
Àngth
,

2641 
£tLockFœg


2643 
ByãR™geLockPB2
 
pb
;

2644 
îr
;

2646 
pb
.
unLockFœg
 = 
£tLockFœg
 ? 0 : 1;

2647 
pb
.
°¨tEndFœg
 = 0;

2648 
pb
.
off£t
 = offset;

2649 
pb
.
Àngth
 =Üength;

2650 
pb
.
fd
 = 
pFûe
->
h
;

2652 
	`OSTRACE
(("AFPSETLOCK [%s] for %d%s inÑange %llx:%llx\n",

2653 (
£tLockFœg
?"ON":"OFF"), 
pFûe
->
h
, (
pb
.
fd
==-1?"[testval-1]":""),

2654 
off£t
, 
Àngth
));

2655 
îr
 = 
	`fs˘l
(
∑th
, 
aÂfsByãR™geLock2FSCTL
, &
pb
, 0);

2656 i‡–
îr
==-1 ) {

2657 
rc
;

2658 
tEºno
 = 
î∫o
;

2659 
	`OSTRACE
(("AFPSETLOCK failedÅo fsctl() '%s' %d %s\n",

2660 
∑th
, 
tEºno
, 
	`°ªº‹
(tErrno)));

2661 #ifde‡
SQLITE_IGNORE_AFP_LOCK_ERRORS


2662 
rc
 = 
SQLITE_BUSY
;

2664 
rc
 = 
	`sqlôeEº‹FromPosixEº‹
(
tEºno
,

2665 
£tLockFœg
 ? 
SQLITE_IOERR_LOCK
 : 
SQLITE_IOERR_UNLOCK
);

2667 if–
	`IS_LOCK_ERROR
(
rc
) ){

2668 
	`°‹eLa°Eºno
(
pFûe
, 
tEºno
);

2670  
rc
;

2672  
SQLITE_OK
;

2674 
	}
}

2682 
	$aÂCheckRe£rvedLock
(
sqlôe3_fûe
 *
id
, *
pResOut
){

2683 
rc
 = 
SQLITE_OK
;

2684 
ª£rved
 = 0;

2685 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

2686 
aÂLockögC⁄ãxt
 *
c⁄ãxt
;

2688 
	`SimuœãIOEº‹
– 
SQLITE_IOERR_CHECKRESERVEDLOCK
; );

2690 
	`as£π
–
pFûe
 );

2691 
c⁄ãxt
 = (
aÂLockögC⁄ãxt
 *Ë
pFûe
->
lockögC⁄ãxt
;

2692 if–
c⁄ãxt
->
ª£rved
 ){

2693 *
pResOut
 = 1;

2694  
SQLITE_OK
;

2696 
	`unixE¡îMuãx
();

2699 if–
pFûe
->
pInode
->
eFûeLock
>
SHARED_LOCK
 ){

2700 
ª£rved
 = 1;

2705 if–!
ª£rved
 ){

2707 
Ãc
 = 
	`aÂSëLock
(
c⁄ãxt
->
dbP©h
, 
pFûe
, 
RESERVED_BYTE
, 1,1);

2708 if–
SQLITE_OK
==
Ãc
 ){

2711 
Ãc
 = 
	`aÂSëLock
(
c⁄ãxt
->
dbP©h
, 
pFûe
, 
RESERVED_BYTE
, 1, 0);

2714 
ª£rved
 = 1;

2716 if–
	`IS_LOCK_ERROR
(
Ãc
) ){

2717 
rc
=
Ãc
;

2721 
	`unixLóveMuãx
();

2722 
	`OSTRACE
(("TEST WR-LOCK %d %d %d (aÂ)\n", 
pFûe
->
h
, 
rc
, 
ª£rved
));

2724 *
pResOut
 = 
ª£rved
;

2725  
rc
;

2726 
	}
}

2752 
	$aÂLock
(
sqlôe3_fûe
 *
id
, 
eFûeLock
){

2753 
rc
 = 
SQLITE_OK
;

2754 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

2755 
unixInodeInfo
 *
pInode
 = 
pFûe
->pInode;

2756 
aÂLockögC⁄ãxt
 *
c⁄ãxt
 = (aÂLockögC⁄ãxà*Ë
pFûe
->
lockögC⁄ãxt
;

2758 
	`as£π
–
pFûe
 );

2759 
	`OSTRACE
(("LOCK %d %†wa†%s(%s,%dËpid=%d (aÂ)\n", 
pFûe
->
h
,

2760 
	`azFûeLock
(
eFûeLock
),ázFûeLock(
pFûe
->eFileLock),

2761 
	`azFûeLock
(
pInode
->
eFûeLock
),ÖInode->
nSh¨ed
 , 
	`osGëpid
(0)));

2767 if–
pFûe
->
eFûeLock
>=eFileLock ){

2768 
	`OSTRACE
(("LOCK %d %†ok (Æªady hñdË◊Â)\n", 
pFûe
->
h
,

2769 
	`azFûeLock
(
eFûeLock
)));

2770  
SQLITE_OK
;

2778 
	`as£π
–
pFûe
->
eFûeLock
!=
NO_LOCK
 ||ÉFûeLock==
SHARED_LOCK
 );

2779 
	`as£π
–
eFûeLock
!=
PENDING_LOCK
 );

2780 
	`as£π
–
eFûeLock
!=
RESERVED_LOCK
 || 
pFûe
->eFûeLock==
SHARED_LOCK
 );

2784 
	`unixE¡îMuãx
();

2785 
pInode
 = 
pFûe
->pInode;

2790 if–(
pFûe
->
eFûeLock
!=
pInode
->eFileLock &&

2791 (
pInode
->
eFûeLock
>=
PENDING_LOCK
 ||ÉFûeLock>
SHARED_LOCK
))

2793 
rc
 = 
SQLITE_BUSY
;

2794 
aÂ_íd_lock
;

2801 if–
eFûeLock
==
SHARED_LOCK
 &&

2802 (
pInode
->
eFûeLock
==
SHARED_LOCK
 ||ÖInode->eFûeLock==
RESERVED_LOCK
) ){

2803 
	`as£π
–
eFûeLock
==
SHARED_LOCK
 );

2804 
	`as£π
–
pFûe
->
eFûeLock
==0 );

2805 
	`as£π
–
pInode
->
nSh¨ed
>0 );

2806 
pFûe
->
eFûeLock
 = 
SHARED_LOCK
;

2807 
pInode
->
nSh¨ed
++;

2808 
pInode
->
nLock
++;

2809 
aÂ_íd_lock
;

2816 if–
eFûeLock
==
SHARED_LOCK


2817 || (
eFûeLock
==
EXCLUSIVE_LOCK
 && 
pFûe
->eFûeLock<
PENDING_LOCK
)

2819 
Áûed
;

2820 
Áûed
 = 
	`aÂSëLock
(
c⁄ãxt
->
dbP©h
, 
pFûe
, 
PENDING_BYTE
, 1, 1);

2821 i‡(
Áûed
) {

2822 
rc
 = 
Áûed
;

2823 
aÂ_íd_lock
;

2830 if–
eFûeLock
==
SHARED_LOCK
 ){

2831 
Ãc1
, 
Ãc2
, 
Ãc1Eºno
 = 0;

2832 
lk
, 
mask
;

2834 
	`as£π
–
pInode
->
nSh¨ed
==0 );

2835 
	`as£π
–
pInode
->
eFûeLock
==0 );

2837 
mask
 = (()==8Ë? 
LARGEST_INT64
 : 0x7fffffff;

2840 
lk
 = 
	`øndom
();

2841 
pInode
->
sh¨edByã
 = (
lk
 & 
mask
)%(
SHARED_SIZE
 - 1);

2842 
Ãc1
 = 
	`aÂSëLock
(
c⁄ãxt
->
dbP©h
, 
pFûe
,

2843 
SHARED_FIRST
+
pInode
->
sh¨edByã
, 1, 1);

2844 if–
	`IS_LOCK_ERROR
(
Ãc1
) ){

2845 
Ãc1Eºno
 = 
pFûe
->
œ°Eºno
;

2848 
Ãc2
 = 
	`aÂSëLock
(
c⁄ãxt
->
dbP©h
, 
pFûe
, 
PENDING_BYTE
, 1, 0);

2850 if–
	`IS_LOCK_ERROR
(
Ãc1
) ) {

2851 
	`°‹eLa°Eºno
(
pFûe
, 
Ãc1Eºno
);

2852 
rc
 = 
Ãc1
;

2853 
aÂ_íd_lock
;

2854 } if–
	`IS_LOCK_ERROR
(
Ãc2
) ){

2855 
rc
 = 
Ãc2
;

2856 
aÂ_íd_lock
;

2857 } if–
Ãc1
 !
SQLITE_OK
 ) {

2858 
rc
 = 
Ãc1
;

2860 
pFûe
->
eFûeLock
 = 
SHARED_LOCK
;

2861 
pInode
->
nLock
++;

2862 
pInode
->
nSh¨ed
 = 1;

2864 }if–
eFûeLock
==
EXCLUSIVE_LOCK
 && 
pInode
->
nSh¨ed
>1 ){

2867 
rc
 = 
SQLITE_BUSY
;

2873 
Áûed
 = 0;

2874 
	`as£π
–0!=
pFûe
->
eFûeLock
 );

2875 i‡(
eFûeLock
 >
RESERVED_LOCK
 && 
pFûe
->eFileLock < RESERVED_LOCK) {

2877 
Áûed
 = 
	`aÂSëLock
(
c⁄ãxt
->
dbP©h
, 
pFûe
, 
RESERVED_BYTE
, 1,1);

2878 if–!
Áûed
 ){

2879 
c⁄ãxt
->
ª£rved
 = 1;

2882 i‡(!
Áûed
 && 
eFûeLock
 =
EXCLUSIVE_LOCK
) {

2888 if–!(
Áûed
 = 
	`aÂSëLock
(
c⁄ãxt
->
dbP©h
, 
pFûe
, 
SHARED_FIRST
 +

2889 
pInode
->
sh¨edByã
, 1, 0)) ){

2890 
Áûed2
 = 
SQLITE_OK
;

2892 
Áûed
 = 
	`aÂSëLock
(
c⁄ãxt
->
dbP©h
, 
pFûe
, 
SHARED_FIRST
,

2893 
SHARED_SIZE
, 1);

2894 if–
Áûed
 && (
Áûed2
 = 
	`aÂSëLock
(
c⁄ãxt
->
dbP©h
, 
pFûe
,

2895 
SHARED_FIRST
 + 
pInode
->
sh¨edByã
, 1, 1)) ){

2899 
rc
 = ((
Áûed
 & 
SQLITE_IOERR
Ë=SQLITE_IOERRË? 
Áûed2
 :

2900 
SQLITE_IOERR_LOCK
;

2901 
aÂ_íd_lock
;

2904 
rc
 = 
Áûed
;

2907 if–
Áûed
 ){

2908 
rc
 = 
Áûed
;

2912 if–
rc
==
SQLITE_OK
 ){

2913 
pFûe
->
eFûeLock
 =ÉFileLock;

2914 
pInode
->
eFûeLock
 =ÉFileLock;

2915 }if–
eFûeLock
==
EXCLUSIVE_LOCK
 ){

2916 
pFûe
->
eFûeLock
 = 
PENDING_LOCK
;

2917 
pInode
->
eFûeLock
 = 
PENDING_LOCK
;

2920 
aÂ_íd_lock
:

2921 
	`unixLóveMuãx
();

2922 
	`OSTRACE
(("LOCK %d %†%†◊Â)\n", 
pFûe
->
h
, 
	`azFûeLock
(
eFûeLock
),

2923 
rc
==
SQLITE_OK
 ? "ok" : "failed"));

2924  
rc
;

2925 
	}
}

2934 
	$aÂU∆ock
(
sqlôe3_fûe
 *
id
, 
eFûeLock
) {

2935 
rc
 = 
SQLITE_OK
;

2936 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

2937 
unixInodeInfo
 *
pInode
;

2938 
aÂLockögC⁄ãxt
 *
c⁄ãxt
 = (aÂLockögC⁄ãxà*Ë
pFûe
->
lockögC⁄ãxt
;

2939 
skùSh¨ed
 = 0;

2940 #ifde‡
SQLITE_TEST


2941 
h
 = 
pFûe
->h;

2944 
	`as£π
–
pFûe
 );

2945 
	`OSTRACE
(("UNLOCK %d %d wa†%d(%d,%dËpid=%d (aÂ)\n", 
pFûe
->
h
, 
eFûeLock
,

2946 
pFûe
->
eFûeLock
,ÖFûe->
pInode
->eFûeLock,ÖFûe->pInode->
nSh¨ed
,

2947 
	`osGëpid
(0)));

2949 
	`as£π
–
eFûeLock
<=
SHARED_LOCK
 );

2950 if–
pFûe
->
eFûeLock
<=eFileLock ){

2951  
SQLITE_OK
;

2953 
	`unixE¡îMuãx
();

2954 
pInode
 = 
pFûe
->pInode;

2955 
	`as£π
–
pInode
->
nSh¨ed
!=0 );

2956 if–
pFûe
->
eFûeLock
>
SHARED_LOCK
 ){

2957 
	`as£π
–
pInode
->
eFûeLock
==
pFûe
->eFileLock );

2958 
	`SimuœãIOEº‹Bíign
(1);

2959 
	`SimuœãIOEº‹
–
h
=(-1) )

2960 
	`SimuœãIOEº‹Bíign
(0);

2962 #ifde‡
SQLITE_DEBUG


2971 
	`as£π
–
pFûe
->
öN‹mÆWrôe
==0

2972 || 
pFûe
->
dbUpd©e
==0

2973 || 
pFûe
->
å™sC¡rChng
==1 );

2974 
pFûe
->
öN‹mÆWrôe
 = 0;

2977 if–
pFûe
->
eFûeLock
==
EXCLUSIVE_LOCK
 ){

2978 
rc
 = 
	`aÂSëLock
(
c⁄ãxt
->
dbP©h
, 
pFûe
, 
SHARED_FIRST
, 
SHARED_SIZE
, 0);

2979 if–
rc
==
SQLITE_OK
 && (
eFûeLock
==
SHARED_LOCK
 || 
pInode
->
nSh¨ed
>1) ){

2981 
sh¨edLockByã
 = 
SHARED_FIRST
+
pInode
->
sh¨edByã
;

2982 
rc
 = 
	`aÂSëLock
(
c⁄ãxt
->
dbP©h
, 
pFûe
, 
sh¨edLockByã
, 1, 1);

2984 
skùSh¨ed
 = 1;

2987 if–
rc
==
SQLITE_OK
 && 
pFûe
->
eFûeLock
>=
PENDING_LOCK
 ){

2988 
rc
 = 
	`aÂSëLock
(
c⁄ãxt
->
dbP©h
, 
pFûe
, 
PENDING_BYTE
, 1, 0);

2990 if–
rc
==
SQLITE_OK
 && 
pFûe
->
eFûeLock
>=
RESERVED_LOCK
 && 
c⁄ãxt
->
ª£rved
 ){

2991 
rc
 = 
	`aÂSëLock
(
c⁄ãxt
->
dbP©h
, 
pFûe
, 
RESERVED_BYTE
, 1, 0);

2992 if–!
rc
 ){

2993 
c⁄ãxt
->
ª£rved
 = 0;

2996 if–
rc
==
SQLITE_OK
 && (
eFûeLock
==
SHARED_LOCK
 || 
pInode
->
nSh¨ed
>1)){

2997 
pInode
->
eFûeLock
 = 
SHARED_LOCK
;

3000 if–
rc
==
SQLITE_OK
 && 
eFûeLock
==
NO_LOCK
 ){

3006 
sh¨edLockByã
 = 
SHARED_FIRST
+
pInode
->
sh¨edByã
;

3007 
pInode
->
nSh¨ed
--;

3008 if–
pInode
->
nSh¨ed
==0 ){

3009 
	`SimuœãIOEº‹Bíign
(1);

3010 
	`SimuœãIOEº‹
–
h
=(-1) )

3011 
	`SimuœãIOEº‹Bíign
(0);

3012 if–!
skùSh¨ed
 ){

3013 
rc
 = 
	`aÂSëLock
(
c⁄ãxt
->
dbP©h
, 
pFûe
, 
sh¨edLockByã
, 1, 0);

3015 if–!
rc
 ){

3016 
pInode
->
eFûeLock
 = 
NO_LOCK
;

3017 
pFûe
->
eFûeLock
 = 
NO_LOCK
;

3020 if–
rc
==
SQLITE_OK
 ){

3021 
pInode
->
nLock
--;

3022 
	`as£π
–
pInode
->
nLock
>=0 );

3023 if–
pInode
->
nLock
==0 ){

3024 
	`˛o£PídögFds
(
pFûe
);

3029 
	`unixLóveMuãx
();

3030 if–
rc
==
SQLITE_OK
 ) 
pFûe
->
eFûeLock
 =ÉFileLock;

3031  
rc
;

3032 
	}
}

3037 
	$aÂClo£
(
sqlôe3_fûe
 *
id
) {

3038 
rc
 = 
SQLITE_OK
;

3039 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

3040 
	`as£π
–
id
!=0 );

3041 
	`aÂU∆ock
(
id
, 
NO_LOCK
);

3042 
	`unixE¡îMuãx
();

3043 if–
pFûe
->
pInode
 &&ÖFûe->pInode->
nLock
 ){

3049 
	`£tPídögFd
(
pFûe
);

3051 
	`ªÀa£InodeInfo
(
pFûe
);

3052 
	`sqlôe3_‰ì
(
pFûe
->
lockögC⁄ãxt
);

3053 
rc
 = 
	`˛o£UnixFûe
(
id
);

3054 
	`unixLóveMuãx
();

3055  
rc
;

3056 
	}
}

3071 #i‡
deföed
(
__APPLE__
Ë&& 
SQLITE_ENABLE_LOCKING_STYLE


3079 
	$nfsU∆ock
(
sqlôe3_fûe
 *
id
, 
eFûeLock
){

3080  
	`posixU∆ock
(
id
, 
eFûeLock
, 1);

3081 
	}
}

3115 
	$£ekAndRód
(
unixFûe
 *
id
, 
sqlôe3_öt64
 
off£t
, *
pBuf
, 
˙t
){

3116 
gŸ
;

3117 
¥i‹
 = 0;

3118 #i‡(!
	`deföed
(
USE_PREAD
Ë&& !deföed(
USE_PREAD64
))

3119 
i64
 
√wOff£t
;

3121 
TIMER_START
;

3122 
	`as£π
–
˙t
==(cnt&0x1ffff) );

3123 
	`as£π
–
id
->
h
>2 );

3125 #i‡
	`deföed
(
USE_PREAD
)

3126 
gŸ
 = 
	`osPªad
(
id
->
h
, 
pBuf
, 
˙t
, 
off£t
);

3127 
	`SimuœãIOEº‹
–
gŸ
 = -1 );

3128 #ñi‡
	`deföed
(
USE_PREAD64
)

3129 
gŸ
 = 
	`osPªad64
(
id
->
h
, 
pBuf
, 
˙t
, 
off£t
);

3130 
	`SimuœãIOEº‹
–
gŸ
 = -1 );

3132 
√wOff£t
 = 
	`l£ek
(
id
->
h
, 
off£t
, 
SEEK_SET
);

3133 
	`SimuœãIOEº‹
–
√wOff£t
 = -1 );

3134 if–
√wOff£t
<0 ){

3135 
	`°‹eLa°Eºno
((
unixFûe
*)
id
, 
î∫o
);

3138 
gŸ
 = 
	`osRód
(
id
->
h
, 
pBuf
, 
˙t
);

3140 if–
gŸ
==
˙t
 ) ;

3141 if–
gŸ
<0 ){

3142 if–
î∫o
==
EINTR
 ){ 
gŸ
 = 1; ; }

3143 
¥i‹
 = 0;

3144 
	`°‹eLa°Eºno
((
unixFûe
*)
id
, 
î∫o
);

3146 }if–
gŸ
>0 ){

3147 
˙t
 -
gŸ
;

3148 
off£t
 +
gŸ
;

3149 
¥i‹
 +
gŸ
;

3150 
pBuf
 = (*)(
gŸ
 + (*)pBuf);

3152 } 
gŸ
>0 );

3153 
TIMER_END
;

3154 
	`OSTRACE
(("READ %-3d %5d %7lld %llu\n",

3155 
id
->
h
, 
gŸ
+
¥i‹
, 
off£t
-¥i‹, 
TIMER_ELAPSED
));

3156  
gŸ
+
¥i‹
;

3157 
	}
}

3164 
	$unixRód
(

3165 
sqlôe3_fûe
 *
id
,

3166 *
pBuf
,

3167 
amt
,

3168 
sqlôe3_öt64
 
off£t


3170 
unixFûe
 *
pFûe
 = (unixFûê*)
id
;

3171 
gŸ
;

3172 
	`as£π
–
id
 );

3173 
	`as£π
–
off£t
>=0 );

3174 
	`as£π
–
amt
>0 );

3179 
	`as£π
–
pFûe
->
pUnu£d
==0

3180 || 
off£t
>=
PENDING_BYTE
+512

3181 || 
off£t
+
amt
<=
PENDING_BYTE


3185 #i‡
SQLITE_MAX_MMAP_SIZE
>0

3188 if–
off£t
<
pFûe
->
mm≠Size
 ){

3189 if–
off£t
+
amt
 <
pFûe
->
mm≠Size
 ){

3190 
	`mem˝y
(
pBuf
, &((
u8
 *)(
pFûe
->
pM≠Regi⁄
))[
off£t
], 
amt
);

3191  
SQLITE_OK
;

3193 
nC›y
 = 
pFûe
->
mm≠Size
 - 
off£t
;

3194 
	`mem˝y
(
pBuf
, &((
u8
 *)(
pFûe
->
pM≠Regi⁄
))[
off£t
], 
nC›y
);

3195 
pBuf
 = &((
u8
 *ÌBuf)[
nC›y
];

3196 
amt
 -
nC›y
;

3197 
off£t
 +
nC›y
;

3202 
gŸ
 = 
	`£ekAndRód
(
pFûe
, 
off£t
, 
pBuf
, 
amt
);

3203 if–
gŸ
==
amt
 ){

3204  
SQLITE_OK
;

3205 }if–
gŸ
<0 ){

3207  
SQLITE_IOERR_READ
;

3209 
	`°‹eLa°Eºno
(
pFûe
, 0);

3211 
	`mem£t
(&((*)
pBuf
)[
gŸ
], 0, 
amt
-got);

3212  
SQLITE_IOERR_SHORT_READ
;

3214 
	}
}

3223 
	$£ekAndWrôeFd
(

3224 
fd
,

3225 
i64
 
iOff
,

3226 c⁄° *
pBuf
,

3227 
nBuf
,

3228 *
piEºno


3230 
rc
 = 0;

3232 
	`as£π
–
nBuf
==(nBuf&0x1ffff) );

3233 
	`as£π
–
fd
>2 );

3234 
	`as£π
–
piEºno
!=0 );

3235 
nBuf
 &= 0x1ffff;

3236 
TIMER_START
;

3238 #i‡
	`deföed
(
USE_PREAD
)

3239 do{ 
rc
 = ()
	`osPwrôe
(
fd
, 
pBuf
, 
nBuf
, 
iOff
); }Ñc<0 && 
î∫o
==
EINTR
 );

3240 #ñi‡
	`deföed
(
USE_PREAD64
)

3241 do{ 
rc
 = ()
	`osPwrôe64
(
fd
, 
pBuf
, 
nBuf
, 
iOff
);}Ñc<0 && 
î∫o
==
EINTR
);

3244 
i64
 
iSìk
 = 
	`l£ek
(
fd
, 
iOff
, 
SEEK_SET
);

3245 
	`SimuœãIOEº‹
–
iSìk
 = -1 );

3246 if–
iSìk
<0 ){

3247 
rc
 = -1;

3250 
rc
 = 
	`osWrôe
(
fd
, 
pBuf
, 
nBuf
);

3251 } 
rc
<0 && 
î∫o
==
EINTR
 );

3254 
TIMER_END
;

3255 
	`OSTRACE
(("WRITE %-3d %5d %7Œd %Œu\n", 
fd
, 
rc
, 
iOff
, 
TIMER_ELAPSED
));

3257 if–
rc
<0 ) *
piEºno
 = 
î∫o
;

3258  
rc
;

3259 
	}
}

3269 
	$£ekAndWrôe
(
unixFûe
 *
id
, 
i64
 
off£t
, c⁄° *
pBuf
, 
˙t
){

3270  
	`£ekAndWrôeFd
(
id
->
h
, 
off£t
, 
pBuf
, 
˙t
, &id->
œ°Eºno
);

3271 
	}
}

3278 
	$unixWrôe
(

3279 
sqlôe3_fûe
 *
id
,

3280 c⁄° *
pBuf
,

3281 
amt
,

3282 
sqlôe3_öt64
 
off£t


3284 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

3285 
wrŸe
 = 0;

3286 
	`as£π
–
id
 );

3287 
	`as£π
–
amt
>0 );

3292 
	`as£π
–
pFûe
->
pUnu£d
==0

3293 || 
off£t
>=
PENDING_BYTE
+512

3294 || 
off£t
+
amt
<=
PENDING_BYTE


3298 #ifde‡
SQLITE_DEBUG


3305 if–
pFûe
->
öN‹mÆWrôe
 ){

3306 
pFûe
->
dbUpd©e
 = 1;

3307 if–
off£t
<=24 && off£t+
amt
>=27 ){

3308 
rc
;

3309 
ﬁdC¡r
[4];

3310 
	`SimuœãIOEº‹Bíign
(1);

3311 
rc
 = 
	`£ekAndRód
(
pFûe
, 24, 
ﬁdC¡r
, 4);

3312 
	`SimuœãIOEº‹Bíign
(0);

3313 if–
rc
!=4 || 
	`memcmp
(
ﬁdC¡r
, &((*)
pBuf
)[24-
off£t
], 4)!=0 ){

3314 
pFûe
->
å™sC¡rChng
 = 1;

3320 #i‡
	`deföed
(
SQLITE_MMAP_READWRITE
Ë&& 
SQLITE_MAX_MMAP_SIZE
>0

3323 if–
off£t
<
pFûe
->
mm≠Size
 ){

3324 if–
off£t
+
amt
 <
pFûe
->
mm≠Size
 ){

3325 
	`mem˝y
(&((
u8
 *)(
pFûe
->
pM≠Regi⁄
))[
off£t
], 
pBuf
, 
amt
);

3326  
SQLITE_OK
;

3328 
nC›y
 = 
pFûe
->
mm≠Size
 - 
off£t
;

3329 
	`mem˝y
(&((
u8
 *)(
pFûe
->
pM≠Regi⁄
))[
off£t
], 
pBuf
, 
nC›y
);

3330 
pBuf
 = &((
u8
 *ÌBuf)[
nC›y
];

3331 
amt
 -
nC›y
;

3332 
off£t
 +
nC›y
;

3337  (
wrŸe
 = 
	`£ekAndWrôe
(
pFûe
, 
off£t
, 
pBuf
, 
amt
))<amt && wrote>0 ){

3338 
amt
 -
wrŸe
;

3339 
off£t
 +
wrŸe
;

3340 
pBuf
 = &((*ÌBuf)[
wrŸe
];

3342 
	`SimuœãIOEº‹
(–
wrŸe
=(-1), 
amt
=1 ));

3343 
	`SimuœãDiskfuŒEº‹
(–
wrŸe
=0, 
amt
=1 ));

3345 if–
amt
>
wrŸe
 ){

3346 if–
wrŸe
<0 && 
pFûe
->
œ°Eºno
!=
ENOSPC
 ){

3348  
SQLITE_IOERR_WRITE
;

3350 
	`°‹eLa°Eºno
(
pFûe
, 0);

3351  
SQLITE_FULL
;

3355  
SQLITE_OK
;

3356 
	}
}

3358 #ifde‡
SQLITE_TEST


3363 
	gsqlôe3_sync_cou¡
 = 0;

3364 
	gsqlôe3_fuŒsync_cou¡
 = 0;

3373 #i‡!
deföed
(
fd©async
Ë&& !
HAVE_FDATASYNC


3374 
	#fd©async
 
fsync


	)

3382 #ifde‡
F_FULLFSYNC


3383 
	#HAVE_FULLFSYNC
 1

	)

3385 
	#HAVE_FULLFSYNC
 0

	)

3413 
	$fuŒ_fsync
(
fd
, 
fuŒSync
, 
d©aO∆y
){

3414 
rc
;

3420 #ifde‡
SQLITE_NO_SYNC


3421 
	`UNUSED_PARAMETER
(
fd
);

3422 
	`UNUSED_PARAMETER
(
fuŒSync
);

3423 
	`UNUSED_PARAMETER
(
d©aO∆y
);

3424 #ñi‡
HAVE_FULLFSYNC


3425 
	`UNUSED_PARAMETER
(
d©aO∆y
);

3427 
	`UNUSED_PARAMETER
(
fuŒSync
);

3428 
	`UNUSED_PARAMETER
(
d©aO∆y
);

3435 #ifde‡
SQLITE_TEST


3436 if–
fuŒSync
 ) 
sqlôe3_fuŒsync_cou¡
++;

3437 
sqlôe3_sync_cou¡
++;

3445 #ifde‡
SQLITE_NO_SYNC


3447 
°©
 
buf
;

3448 
rc
 = 
	`osF°©
(
fd
, &
buf
);

3450 #ñi‡
HAVE_FULLFSYNC


3451 if–
fuŒSync
 ){

3452 
rc
 = 
	`osF˙é
(
fd
, 
F_FULLFSYNC
, 0);

3454 
rc
 = 1;

3464 if–
rc
 )Ñ¯
	`fsync
(
fd
);

3466 #ñi‡
	`deföed
(
__APPLE__
)

3470 
rc
 = 
	`fsync
(
fd
);

3472 
rc
 = 
	`fd©async
(
fd
);

3473 #i‡
OS_VXWORKS


3474 if–
rc
==-1 && 
î∫o
==
ENOTSUP
 ){

3475 
rc
 = 
	`fsync
(
fd
);

3480 if–
OS_VXWORKS
 && 
rc
!= -1 ){

3481 
rc
 = 0;

3483  
rc
;

3484 
	}
}

3509 
	$›íDúe˘‹y
(c⁄° *
zFûíame
, *
pFd
){

3510 
ii
;

3511 
fd
 = -1;

3512 
zDú«me
[
MAX_PATHNAME
+1];

3514 
	`sqlôe3_¢¥ötf
(
MAX_PATHNAME
, 
zDú«me
, "%s", 
zFûíame
);

3515 
ii
=()
	`°æí
(
zDú«me
); ii>0 && zDirname[ii]!='/'; ii--);

3516 if–
ii
>0 ){

3517 
zDú«me
[
ii
] = '\0';

3519 if–
zDú«me
[0]!='/' ) zDirname[0] = '.';

3520 
zDú«me
[1] = 0;

3522 
fd
 = 
	`robu°_›í
(
zDú«me
, 
O_RDONLY
|
O_BINARY
, 0);

3523 if–
fd
>=0 ){

3524 
	`OSTRACE
(("OPENDIR %-3d %s\n", 
fd
, 
zDú«me
));

3526 *
pFd
 = 
fd
;

3527 if–
fd
>=0 )  
SQLITE_OK
;

3528  
	`unixLogEº‹
(
SQLITE_CANTOPEN_BKPT
, "›íDúe˘‹y", 
zDú«me
);

3529 
	}
}

3546 
	$unixSync
(
sqlôe3_fûe
 *
id
, 
Êags
){

3547 
rc
;

3548 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

3550 
isD©aO∆y
 = (
Êags
&
SQLITE_SYNC_DATAONLY
);

3551 
isFuŒsync
 = (
Êags
&0x0F)==
SQLITE_SYNC_FULL
;

3554 
	`as£π
((
Êags
&0x0F)==
SQLITE_SYNC_NORMAL


3555 || (
Êags
&0x0F)==
SQLITE_SYNC_FULL


3561 
	`SimuœãDiskfuŒEº‹
– 
SQLITE_FULL
 );

3563 
	`as£π
–
pFûe
 );

3564 
	`OSTRACE
(("SYNC %-3d\n", 
pFûe
->
h
));

3565 
rc
 = 
	`fuŒ_fsync
(
pFûe
->
h
, 
isFuŒsync
, 
isD©aO∆y
);

3566 
	`SimuœãIOEº‹
–
rc
=1 );

3567 if–
rc
 ){

3568 
	`°‹eLa°Eºno
(
pFûe
, 
î∫o
);

3569  
	`unixLogEº‹
(
SQLITE_IOERR_FSYNC
, "fuŒ_fsync", 
pFûe
->
zP©h
);

3576 if–
pFûe
->
˘æFœgs
 & 
UNIXFILE_DIRSYNC
 ){

3577 
dúfd
;

3578 
	`OSTRACE
(("DIRSYNC %†(have_fuŒfsync=%d fuŒsync=%d)\n", 
pFûe
->
zP©h
,

3579 
HAVE_FULLFSYNC
, 
isFuŒsync
));

3580 
rc
 = 
	`osO≥nDúe˘‹y
(
pFûe
->
zP©h
, &
dúfd
);

3581 if–
rc
==
SQLITE_OK
 ){

3582 
	`fuŒ_fsync
(
dúfd
, 0, 0);

3583 
	`robu°_˛o£
(
pFûe
, 
dúfd
, 
__LINE__
);

3585 
	`as£π
–
rc
==
SQLITE_CANTOPEN
 );

3586 
rc
 = 
SQLITE_OK
;

3588 
pFûe
->
˘æFœgs
 &~
UNIXFILE_DIRSYNC
;

3590  
rc
;

3591 
	}
}

3596 
	$unixTrunˇã
(
sqlôe3_fûe
 *
id
, 
i64
 
nByã
){

3597 
unixFûe
 *
pFûe
 = (unixFûê*)
id
;

3598 
rc
;

3599 
	`as£π
–
pFûe
 );

3600 
	`SimuœãIOEº‹
– 
SQLITE_IOERR_TRUNCATE
 );

3607 if–
pFûe
->
szChunk
>0 ){

3608 
nByã
 = (“Byã + 
pFûe
->
szChunk
 - 1)/pFile->szChunk) *ÖFile->szChunk;

3611 
rc
 = 
	`robu°_·runˇã
(
pFûe
->
h
, 
nByã
);

3612 if–
rc
 ){

3613 
	`°‹eLa°Eºno
(
pFûe
, 
î∫o
);

3614  
	`unixLogEº‹
(
SQLITE_IOERR_TRUNCATE
, "·runˇã", 
pFûe
->
zP©h
);

3616 #ifde‡
SQLITE_DEBUG


3624 if–
pFûe
->
öN‹mÆWrôe
 && 
nByã
==0 ){

3625 
pFûe
->
å™sC¡rChng
 = 1;

3629 #i‡
SQLITE_MAX_MMAP_SIZE
>0

3634 if–
nByã
<
pFûe
->
mm≠Size
 ){

3635 
pFûe
->
mm≠Size
 = 
nByã
;

3639  
SQLITE_OK
;

3641 
	}
}

3646 
	$unixFûeSize
(
sqlôe3_fûe
 *
id
, 
i64
 *
pSize
){

3647 
rc
;

3648 
°©
 
buf
;

3649 
	`as£π
–
id
 );

3650 
rc
 = 
	`osF°©
(((
unixFûe
*)
id
)->
h
, &
buf
);

3651 
	`SimuœãIOEº‹
–
rc
=1 );

3652 if–
rc
!=0 ){

3653 
	`°‹eLa°Eºno
((
unixFûe
*)
id
, 
î∫o
);

3654  
SQLITE_IOERR_FSTAT
;

3656 *
pSize
 = 
buf
.
°_size
;

3664 if–*
pSize
==1 ) *pSize = 0;

3667  
SQLITE_OK
;

3668 
	}
}

3670 #i‡
SQLITE_ENABLE_LOCKING_STYLE
 && 
deföed
(
__APPLE__
)

3675 
¥oxyFûeC⁄åﬁ
(
sqlôe3_fûe
*,,*);

3684 
	$f˙éSizeHöt
(
unixFûe
 *
pFûe
, 
i64
 
nByã
){

3685 if–
pFûe
->
szChunk
>0 ){

3686 
i64
 
nSize
;

3687 
°©
 
buf
;

3689 if–
	`osF°©
(
pFûe
->
h
, &
buf
) ){

3690  
SQLITE_IOERR_FSTAT
;

3693 
nSize
 = ((
nByã
+
pFûe
->
szChunk
-1) /ÖFile->szChunk) *ÖFile->szChunk;

3694 if–
nSize
>(
i64
)
buf
.
°_size
 ){

3696 #i‡
	`deföed
(
HAVE_POSIX_FALLOCATE
) && HAVE_POSIX_FALLOCATE

3700 
îr
;

3702 
îr
 = 
	`osFÆloˇã
(
pFûe
->
h
, 
buf
.
°_size
, 
nSize
-buf.st_size);

3703 } 
îr
==
EINTR
 );

3704 if–
îr
 )  
SQLITE_IOERR_WRITE
;

3713 
nBlk
 = 
buf
.
°_blksize
;

3714 
nWrôe
 = 0;

3715 
i64
 
iWrôe
;

3717 
iWrôe
 = (
buf
.
°_size
/
nBlk
)*nBlk +ÇBlk - 1;

3718 
	`as£π
–
iWrôe
>=
buf
.
°_size
 );

3719 
	`as£π
–((
iWrôe
+1)%
nBlk
)==0 );

3720  ; 
iWrôe
<
nSize
+
nBlk
-1; iWrite+=nBlk ){

3721 if–
iWrôe
>=
nSize
 ) iWrite =ÇSize - 1;

3722 
nWrôe
 = 
	`£ekAndWrôe
(
pFûe
, 
iWrôe
, "", 1);

3723 if–
nWrôe
!=1 )  
SQLITE_IOERR_WRITE
;

3729 #i‡
SQLITE_MAX_MMAP_SIZE
>0

3730 if–
pFûe
->
mm≠SizeMax
>0 && 
nByã
>pFûe->
mm≠Size
 ){

3731 
rc
;

3732 if–
pFûe
->
szChunk
<=0 ){

3733 if–
	`robu°_·runˇã
(
pFûe
->
h
, 
nByã
) ){

3734 
	`°‹eLa°Eºno
(
pFûe
, 
î∫o
);

3735  
	`unixLogEº‹
(
SQLITE_IOERR_TRUNCATE
, "·runˇã", 
pFûe
->
zP©h
);

3739 
rc
 = 
	`unixM≠fûe
(
pFûe
, 
nByã
);

3740  
rc
;

3744  
SQLITE_OK
;

3745 
	}
}

3753 
	$unixModeBô
(
unixFûe
 *
pFûe
, 
mask
, *
pArg
){

3754 if–*
pArg
<0 ){

3755 *
pArg
 = (
pFûe
->
˘æFœgs
 & 
mask
)!=0;

3756 }if–(*
pArg
)==0 ){

3757 
pFûe
->
˘æFœgs
 &~
mask
;

3759 
pFûe
->
˘æFœgs
 |
mask
;

3761 
	}
}

3764 
unixGëTem≤ame
(
nBuf
, *
zBuf
);

3769 
	$unixFûeC⁄åﬁ
(
sqlôe3_fûe
 *
id
, 
›
, *
pArg
){

3770 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

3771  
›
 ){

3772 
SQLITE_FCNTL_LOCKSTATE
: {

3773 *(*)
pArg
 = 
pFûe
->
eFûeLock
;

3774  
SQLITE_OK
;

3776 
SQLITE_FCNTL_LAST_ERRNO
: {

3777 *(*)
pArg
 = 
pFûe
->
œ°Eºno
;

3778  
SQLITE_OK
;

3780 
SQLITE_FCNTL_CHUNK_SIZE
: {

3781 
pFûe
->
szChunk
 = *(*)
pArg
;

3782  
SQLITE_OK
;

3784 
SQLITE_FCNTL_SIZE_HINT
: {

3785 
rc
;

3786 
	`SimuœãIOEº‹Bíign
(1);

3787 
rc
 = 
	`f˙éSizeHöt
(
pFûe
, *(
i64
 *)
pArg
);

3788 
	`SimuœãIOEº‹Bíign
(0);

3789  
rc
;

3791 
SQLITE_FCNTL_PERSIST_WAL
: {

3792 
	`unixModeBô
(
pFûe
, 
UNIXFILE_PERSIST_WAL
, (*)
pArg
);

3793  
SQLITE_OK
;

3795 
SQLITE_FCNTL_POWERSAFE_OVERWRITE
: {

3796 
	`unixModeBô
(
pFûe
, 
UNIXFILE_PSOW
, (*)
pArg
);

3797  
SQLITE_OK
;

3799 
SQLITE_FCNTL_VFSNAME
: {

3800 *(**)
pArg
 = 
	`sqlôe3_m¥ötf
("%s", 
pFûe
->
pVfs
->
zName
);

3801  
SQLITE_OK
;

3803 
SQLITE_FCNTL_TEMPFILENAME
: {

3804 *
zTFûe
 = 
	`sqlôe3_mÆloc64
–
pFûe
->
pVfs
->
mxP©h«me
 );

3805 if–
zTFûe
 ){

3806 
	`unixGëTem≤ame
(
pFûe
->
pVfs
->
mxP©h«me
, 
zTFûe
);

3807 *(**)
pArg
 = 
zTFûe
;

3809  
SQLITE_OK
;

3811 
SQLITE_FCNTL_HAS_MOVED
: {

3812 *(*)
pArg
 = 
	`fûeHasMoved
(
pFûe
);

3813  
SQLITE_OK
;

3815 #i‡
SQLITE_MAX_MMAP_SIZE
>0

3816 
SQLITE_FCNTL_MMAP_SIZE
: {

3817 
i64
 
√wLimô
 = *(i64*)
pArg
;

3818 
rc
 = 
SQLITE_OK
;

3819 if–
√wLimô
>
sqlôe3GlobÆC⁄fig
.
mxMm≠
 ){

3820 
√wLimô
 = 
sqlôe3GlobÆC⁄fig
.
mxMm≠
;

3822 *(
i64
*)
pArg
 = 
pFûe
->
mm≠SizeMax
;

3823 if–
√wLimô
>=0 &&ÇewLimô!=
pFûe
->
mm≠SizeMax
 &&ÖFûe->
nFëchOut
==0 ){

3824 
pFûe
->
mm≠SizeMax
 = 
√wLimô
;

3825 if–
pFûe
->
mm≠Size
>0 ){

3826 
	`unixUnm≠fûe
(
pFûe
);

3827 
rc
 = 
	`unixM≠fûe
(
pFûe
, -1);

3830  
rc
;

3833 #ifde‡
SQLITE_DEBUG


3839 
SQLITE_FCNTL_DB_UNCHANGED
: {

3840 ((
unixFûe
*)
id
)->
dbUpd©e
 = 0;

3841  
SQLITE_OK
;

3844 #i‡
SQLITE_ENABLE_LOCKING_STYLE
 && 
	`deföed
(
__APPLE__
)

3845 
SQLITE_FCNTL_SET_LOCKPROXYFILE
:

3846 
SQLITE_FCNTL_GET_LOCKPROXYFILE
: {

3847  
	`¥oxyFûeC⁄åﬁ
(
id
,
›
,
pArg
);

3851  
SQLITE_NOTFOUND
;

3852 
	}
}

3864 #i‚de‡
__QNXNTO__


3865 
	$unixSe˘‹Size
(
sqlôe3_fûe
 *
NŸU£d
){

3866 
	`UNUSED_PARAMETER
(
NŸU£d
);

3867  
SQLITE_DEFAULT_SECTOR_SIZE
;

3868 
	}
}

3874 #ifde‡
__QNXNTO__


3875 
	~<sys/dcmd_blk.h
>

3876 
	~<sys/°©vfs.h
>

3877 
	$unixSe˘‹Size
(
sqlôe3_fûe
 *
id
){

3878 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

3879 if–
pFûe
->
£˘‹Size
 == 0 ){

3880 
°©vfs
 
fsInfo
;

3883 
pFûe
->
£˘‹Size
 = 
SQLITE_DEFAULT_SECTOR_SIZE
;

3884 
pFûe
->
devi˚Ch¨a˘îi°ics
 = 0;

3885 if–
	`f°©vfs
(
pFûe
->
h
, &
fsInfo
) == -1 ) {

3886  
pFûe
->
£˘‹Size
;

3889 if–!
	`°rcmp
(
fsInfo
.
f_ba£ty≥
, "tmp") ) {

3890 
pFûe
->
£˘‹Size
 = 
fsInfo
.
f_bsize
;

3891 
pFûe
->
devi˚Ch¨a˘îi°ics
 =

3892 
SQLITE_IOCAP_ATOMIC4K
 |

3893 
SQLITE_IOCAP_SAFE_APPEND
 |

3895 
SQLITE_IOCAP_SEQUENTIAL
 |

3898 }if–
	`°r°r
(
fsInfo
.
f_ba£ty≥
, "etfs") ){

3899 
pFûe
->
£˘‹Size
 = 
fsInfo
.
f_bsize
;

3900 
pFûe
->
devi˚Ch¨a˘îi°ics
 =

3902 (
pFûe
->
£˘‹Size
 / 512 * 
SQLITE_IOCAP_ATOMIC512
) |

3903 
SQLITE_IOCAP_SAFE_APPEND
 |

3905 
SQLITE_IOCAP_SEQUENTIAL
 |

3908 }if–!
	`°rcmp
(
fsInfo
.
f_ba£ty≥
, "qnx6") ){

3909 
pFûe
->
£˘‹Size
 = 
fsInfo
.
f_bsize
;

3910 
pFûe
->
devi˚Ch¨a˘îi°ics
 =

3911 
SQLITE_IOCAP_ATOMIC
 |

3912 
SQLITE_IOCAP_SAFE_APPEND
 |

3914 
SQLITE_IOCAP_SEQUENTIAL
 |

3917 }if–!
	`°rcmp
(
fsInfo
.
f_ba£ty≥
, "qnx4") ){

3918 
pFûe
->
£˘‹Size
 = 
fsInfo
.
f_bsize
;

3919 
pFûe
->
devi˚Ch¨a˘îi°ics
 =

3921 ((
pFûe
->
£˘‹Size
 / 512 * 
SQLITE_IOCAP_ATOMIC512
) << 1) - 2 |

3922 
SQLITE_IOCAP_SEQUENTIAL
 |

3925 }if–
	`°r°r
(
fsInfo
.
f_ba£ty≥
, "dos") ){

3926 
pFûe
->
£˘‹Size
 = 
fsInfo
.
f_bsize
;

3927 
pFûe
->
devi˚Ch¨a˘îi°ics
 =

3929 ((
pFûe
->
£˘‹Size
 / 512 * 
SQLITE_IOCAP_ATOMIC512
) << 1) - 2 |

3930 
SQLITE_IOCAP_SEQUENTIAL
 |

3934 
pFûe
->
devi˚Ch¨a˘îi°ics
 =

3935 
SQLITE_IOCAP_ATOMIC512
 |

3936 
SQLITE_IOCAP_SAFE_APPEND
 |

3943 if–
pFûe
->
£˘‹Size
 % 512 != 0 ){

3944 
pFûe
->
devi˚Ch¨a˘îi°ics
 = 0;

3945 
pFûe
->
£˘‹Size
 = 
SQLITE_DEFAULT_SECTOR_SIZE
;

3947  
pFûe
->
£˘‹Size
;

3948 
	}
}

3964 
	$unixDevi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
 *
id
){

3965 
unixFûe
 *
p
 = (unixFûe*)
id
;

3966 
rc
 = 0;

3967 #ifde‡
__QNXNTO__


3968 if–
p
->
£˘‹Size
==0 ) 
	`unixSe˘‹Size
(
id
);

3969 
rc
 = 
p
->
devi˚Ch¨a˘îi°ics
;

3971 if–
p
->
˘æFœgs
 & 
UNIXFILE_PSOW
 ){

3972 
rc
 |
SQLITE_IOCAP_POWERSAFE_OVERWRITE
;

3974  
rc
;

3975 
	}
}

3977 #i‡!
deföed
(
SQLITE_OMIT_WAL
Ë|| 
SQLITE_MAX_MMAP_SIZE
>0

3985 
	$unixGë∑gesize
(){

3986 #i‡
OS_VXWORKS


3988 #ñi‡
	`deföed
(
_BSD_SOURCE
)

3989  
	`gë∑gesize
();

3991  ()
	`sysc⁄f
(
_SC_PAGESIZE
);

3993 
	}
}

3997 #i‚de‡
SQLITE_OMIT_WAL


4028 
	sunixShmNode
 {

4029 
unixInodeInfo
 *
	mpInode
;

4030 
sqlôe3_muãx
 *
	mmuãx
;

4031 *
	mzFûíame
;

4032 
	mh
;

4033 
	mszRegi⁄
;

4034 
u16
 
	mnRegi⁄
;

4035 
u8
 
	misRód⁄ly
;

4036 **
	m≠Regi⁄
;

4037 
	mnRef
;

4038 
unixShm
 *
	mpFú°
;

4039 #ifde‡
SQLITE_DEBUG


4040 
u8
 
	mex˛Mask
;

4041 
u8
 
	msh¨edMask
;

4042 
u8
 
	m√xtShmId
;

4059 
	sunixShm
 {

4060 
unixShmNode
 *
	mpShmNode
;

4061 
unixShm
 *
	mpNext
;

4062 
u8
 
	mhasMuãx
;

4063 
u8
 
	mid
;

4064 
u16
 
	msh¨edMask
;

4065 
u16
 
	mex˛Mask
;

4071 
	#UNIX_SHM_BASE
 ((22+
SQLITE_SHM_NLOCK
)*4Ë

	)

4072 
	#UNIX_SHM_DMS
 (
UNIX_SHM_BASE
+
SQLITE_SHM_NLOCK
Ë

	)

4080 
	$unixShmSy°emLock
(

4081 
unixFûe
 *
pFûe
,

4082 
lockTy≥
,

4083 
of°
,

4084 
n


4086 
unixShmNode
 *
pShmNode
;

4087 
Êock
 
f
;

4088 
rc
 = 
SQLITE_OK
;

4091 
pShmNode
 = 
pFûe
->
pInode
->pShmNode;

4092 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pShmNode
->
muãx
Ë||ÖShmNode->
nRef
==0 );

4095 
	`as£π
–
n
==1 || 
lockTy≥
!=
F_RDLCK
 );

4098 
	`as£π
–
n
>=1 &&Ç<=
SQLITE_SHM_NLOCK
 );

4100 if–
pShmNode
->
h
>=0 ){

4102 
	`mem£t
(&
f
, 0, (f));

4103 
f
.
l_ty≥
 = 
lockTy≥
;

4104 
f
.
l_whí˚
 = 
SEEK_SET
;

4105 
f
.
l_°¨t
 = 
of°
;

4106 
f
.
l_Àn
 = 
n
;

4108 
rc
 = 
	`osF˙é
(
pShmNode
->
h
, 
F_SETLK
, &
f
);

4109 
rc
 = (rc!=(-1)Ë? 
SQLITE_OK
 : 
SQLITE_BUSY
;

4113 #ifde‡
SQLITE_DEBUG


4114 { 
u16
 
mask
;

4115 
	`OSTRACE
(("SHM-LOCK "));

4116 
mask
 = 
of°
>31 ? 0xfff‡: (1<<(of°+
n
)) - (1<<ofst);

4117 if–
rc
==
SQLITE_OK
 ){

4118 if–
lockTy≥
==
F_UNLCK
 ){

4119 
	`OSTRACE
(("u∆ock %d ok", 
of°
));

4120 
pShmNode
->
ex˛Mask
 &~
mask
;

4121 
pShmNode
->
sh¨edMask
 &~
mask
;

4122 }if–
lockTy≥
==
F_RDLCK
 ){

4123 
	`OSTRACE
(("ªad-lock %d ok", 
of°
));

4124 
pShmNode
->
ex˛Mask
 &~
mask
;

4125 
pShmNode
->
sh¨edMask
 |
mask
;

4127 
	`as£π
–
lockTy≥
==
F_WRLCK
 );

4128 
	`OSTRACE
(("wrôe-lock %d ok", 
of°
));

4129 
pShmNode
->
ex˛Mask
 |
mask
;

4130 
pShmNode
->
sh¨edMask
 &~
mask
;

4133 if–
lockTy≥
==
F_UNLCK
 ){

4134 
	`OSTRACE
(("u∆ock %d faûed", 
of°
));

4135 }if–
lockTy≥
==
F_RDLCK
 ){

4136 
	`OSTRACE
(("read-lock failed"));

4138 
	`as£π
–
lockTy≥
==
F_WRLCK
 );

4139 
	`OSTRACE
(("wrôe-lock %d faûed", 
of°
));

4142 
	`OSTRACE
((" -áfterwards %03x,%03x\n",

4143 
pShmNode
->
sh¨edMask
,ÖShmNode->
ex˛Mask
));

4147  
rc
;

4148 
	}
}

4159 
	$unixShmRegi⁄PîM≠
(){

4160 
shmsz
 = 32*1024;

4161 
pgsz
 = 
	`osGë∑gesize
();

4162 
	`as£π
–((
pgsz
-1)&pgsz)==0 );

4163 if–
pgsz
<
shmsz
 )  1;

4164  
pgsz
/
shmsz
;

4165 
	}
}

4173 
	$unixShmPurge
(
unixFûe
 *
pFd
){

4174 
unixShmNode
 *
p
 = 
pFd
->
pInode
->
pShmNode
;

4175 
	`as£π
–
	`unixMuãxHñd
() );

4176 if–
p
 && 
	`ALWAYS
’->
nRef
==0) ){

4177 
nShmPîM≠
 = 
	`unixShmRegi⁄PîM≠
();

4178 
i
;

4179 
	`as£π
–
p
->
pInode
==
pFd
->pInode );

4180 
	`sqlôe3_muãx_‰ì
(
p
->
muãx
);

4181 
i
=0; i<
p
->
nRegi⁄
; i+=
nShmPîM≠
){

4182 if–
p
->
h
>=0 ){

4183 
	`osMunm≠
(
p
->
≠Regi⁄
[
i
],Ö->
szRegi⁄
);

4185 
	`sqlôe3_‰ì
(
p
->
≠Regi⁄
[
i
]);

4188 
	`sqlôe3_‰ì
(
p
->
≠Regi⁄
);

4189 if–
p
->
h
>=0 ){

4190 
	`robu°_˛o£
(
pFd
, 
p
->
h
, 
__LINE__
);

4191 
p
->
h
 = -1;

4193 
p
->
pInode
->
pShmNode
 = 0;

4194 
	`sqlôe3_‰ì
(
p
);

4196 
	}
}

4233 
	$unixO≥nSh¨edMem‹y
(
unixFûe
 *
pDbFd
){

4234 
unixShm
 *
p
 = 0;

4235 
unixShmNode
 *
pShmNode
;

4236 
rc
;

4237 
unixInodeInfo
 *
pInode
;

4238 *
zShmFûíame
;

4239 
nShmFûíame
;

4242 
p
 = 
	`sqlôe3_mÆloc64
( (*p) );

4243 if–
p
==0 )  
SQLITE_NOMEM_BKPT
;

4244 
	`mem£t
(
p
, 0, (*p));

4245 
	`as£π
–
pDbFd
->
pShm
==0 );

4250 
	`unixE¡îMuãx
();

4251 
pInode
 = 
pDbFd
->pInode;

4252 
pShmNode
 = 
pInode
->pShmNode;

4253 if–
pShmNode
==0 ){

4254 
°©
 
sSèt
;

4255 #i‚de‡
SQLITE_SHM_DIRECTORY


4256 c⁄° *
zBa£P©h
 = 
pDbFd
->
zP©h
;

4263 if–
	`osF°©
(
pDbFd
->
h
, &
sSèt
) ){

4264 
rc
 = 
SQLITE_IOERR_FSTAT
;

4265 
shm_›í_îr
;

4268 #ifde‡
SQLITE_SHM_DIRECTORY


4269 
nShmFûíame
 = (
SQLITE_SHM_DIRECTORY
) + 31;

4271 
nShmFûíame
 = 6 + ()
	`°æí
(
zBa£P©h
);

4273 
pShmNode
 = 
	`sqlôe3_mÆloc64
–(*pShmNodeË+ 
nShmFûíame
 );

4274 if–
pShmNode
==0 ){

4275 
rc
 = 
SQLITE_NOMEM_BKPT
;

4276 
shm_›í_îr
;

4278 
	`mem£t
(
pShmNode
, 0, (*pShmNode)+
nShmFûíame
);

4279 
zShmFûíame
 = 
pShmNode
->
zFûíame
 = (*)&pShmNode[1];

4280 #ifde‡
SQLITE_SHM_DIRECTORY


4281 
	`sqlôe3_¢¥ötf
(
nShmFûíame
, 
zShmFûíame
,

4282 
SQLITE_SHM_DIRECTORY
 "/sqlite-shm-%x-%x",

4283 (
u32
)
sSèt
.
°_öo
, (u32)sSèt.
°_dev
);

4285 
	`sqlôe3_¢¥ötf
(
nShmFûíame
, 
zShmFûíame
, "%s-shm", 
zBa£P©h
);

4286 
	`sqlôe3FûeSuffix3
(
pDbFd
->
zP©h
, 
zShmFûíame
);

4288 
pShmNode
->
h
 = -1;

4289 
pDbFd
->
pInode
->
pShmNode
 =ÖShmNode;

4290 
pShmNode
->
pInode
 = 
pDbFd
->pInode;

4291 if–
sqlôe3GlobÆC⁄fig
.
bC‹eMuãx
 ){

4292 
pShmNode
->
muãx
 = 
	`sqlôe3_muãx_Æloc
(
SQLITE_MUTEX_FAST
);

4293 if–
pShmNode
->
muãx
==0 ){

4294 
rc
 = 
SQLITE_NOMEM_BKPT
;

4295 
shm_›í_îr
;

4299 if–
pInode
->
bPro˚ssLock
==0 ){

4300 
›íFœgs
 = 
O_RDWR
 | 
O_CREAT
;

4301 if–
	`sqlôe3_uri_boﬁón
(
pDbFd
->
zP©h
, "readonly_shm", 0) ){

4302 
›íFœgs
 = 
O_RDONLY
;

4303 
pShmNode
->
isRód⁄ly
 = 1;

4305 
pShmNode
->
h
 = 
	`robu°_›í
(
zShmFûíame
, 
›íFœgs
, (
sSèt
.
°_mode
&0777));

4306 if–
pShmNode
->
h
<0 ){

4307 
rc
 = 
	`unixLogEº‹
(
SQLITE_CANTOPEN_BKPT
, "›í", 
zShmFûíame
);

4308 
shm_›í_îr
;

4315 
	`robu°Fchown
(
pShmNode
->
h
, 
sSèt
.
°_uid
, sSèt.
°_gid
);

4320 
rc
 = 
SQLITE_OK
;

4321 if–
	`unixShmSy°emLock
(
pDbFd
, 
F_WRLCK
, 
UNIX_SHM_DMS
, 1)==
SQLITE_OK
 ){

4322 if–
	`robu°_·runˇã
(
pShmNode
->
h
, 0) ){

4323 
rc
 = 
	`unixLogEº‹
(
SQLITE_IOERR_SHMOPEN
, "·runˇã", 
zShmFûíame
);

4326 if–
rc
==
SQLITE_OK
 ){

4327 
rc
 = 
	`unixShmSy°emLock
(
pDbFd
, 
F_RDLCK
, 
UNIX_SHM_DMS
, 1);

4329 if–
rc
 ) 
shm_›í_îr
;

4334 
p
->
pShmNode
 =ÖShmNode;

4335 #ifde‡
SQLITE_DEBUG


4336 
p
->
id
 = 
pShmNode
->
√xtShmId
++;

4338 
pShmNode
->
nRef
++;

4339 
pDbFd
->
pShm
 = 
p
;

4340 
	`unixLóveMuãx
();

4349 
	`sqlôe3_muãx_íãr
(
pShmNode
->
muãx
);

4350 
p
->
pNext
 = 
pShmNode
->
pFú°
;

4351 
pShmNode
->
pFú°
 = 
p
;

4352 
	`sqlôe3_muãx_Àave
(
pShmNode
->
muãx
);

4353  
SQLITE_OK
;

4356 
shm_›í_îr
:

4357 
	`unixShmPurge
(
pDbFd
);

4358 
	`sqlôe3_‰ì
(
p
);

4359 
	`unixLóveMuãx
();

4360  
rc
;

4361 
	}
}

4382 
	$unixShmM≠
(

4383 
sqlôe3_fûe
 *
fd
,

4384 
iRegi⁄
,

4385 
szRegi⁄
,

4386 
bExãnd
,

4387 vﬁ©ûê**
µ


4389 
unixFûe
 *
pDbFd
 = (unixFûe*)
fd
;

4390 
unixShm
 *
p
;

4391 
unixShmNode
 *
pShmNode
;

4392 
rc
 = 
SQLITE_OK
;

4393 
nShmPîM≠
 = 
	`unixShmRegi⁄PîM≠
();

4394 
nReqRegi⁄
;

4397 if–
pDbFd
->
pShm
==0 ){

4398 
rc
 = 
	`unixO≥nSh¨edMem‹y
(
pDbFd
);

4399 if–
rc
!=
SQLITE_OK
 ) Ñc;

4402 
p
 = 
pDbFd
->
pShm
;

4403 
pShmNode
 = 
p
->pShmNode;

4404 
	`sqlôe3_muãx_íãr
(
pShmNode
->
muãx
);

4405 
	`as£π
–
szRegi⁄
==
pShmNode
->szRegi⁄ ||ÖShmNode->
nRegi⁄
==0 );

4406 
	`as£π
–
pShmNode
->
pInode
==
pDbFd
->pInode );

4407 
	`as£π
–
pShmNode
->
h
>=0 || 
pDbFd
->
pInode
->
bPro˚ssLock
==1 );

4408 
	`as£π
–
pShmNode
->
h
<0 || 
pDbFd
->
pInode
->
bPro˚ssLock
==0 );

4411 
nReqRegi⁄
 = ((
iRegi⁄
+
nShmPîM≠
) /ÇShmPerMap) *ÇShmPerMap;

4413 if–
pShmNode
->
nRegi⁄
<
nReqRegi⁄
 ){

4414 **
≠New
;

4415 
nByã
 = 
nReqRegi⁄
*
szRegi⁄
;

4416 
°©
 
sSèt
;

4418 
pShmNode
->
szRegi⁄
 = szRegion;

4420 if–
pShmNode
->
h
>=0 ){

4425 if–
	`osF°©
(
pShmNode
->
h
, &
sSèt
) ){

4426 
rc
 = 
SQLITE_IOERR_SHMSIZE
;

4427 
shm∑ge_out
;

4430 if–
sSèt
.
°_size
<
nByã
 ){

4434 if–!
bExãnd
 ){

4435 
shm∑ge_out
;

4446 c⁄° 
pgsz
 = 4096;

4447 
iPg
;

4450 
	`as£π
–(
nByã
 % 
pgsz
)==0 );

4451 
iPg
=(
sSèt
.
°_size
/
pgsz
); iPg<(
nByã
/pgsz); iPg++){

4452 
x
 = 0;

4453 if–
	`£ekAndWrôeFd
(
pShmNode
->
h
, 
iPg
*
pgsz
 +Ögsz-1, "", 1, &
x
)!=1 ){

4454 c⁄° *
zFûe
 = 
pShmNode
->
zFûíame
;

4455 
rc
 = 
	`unixLogEº‹
(
SQLITE_IOERR_SHMSIZE
, "wrôe", 
zFûe
);

4456 
shm∑ge_out
;

4464 
≠New
 = (**)
	`sqlôe3_ªÆloc
(

4465 
pShmNode
->
≠Regi⁄
, 
nReqRegi⁄
*(*)

4467 if–!
≠New
 ){

4468 
rc
 = 
SQLITE_IOERR_NOMEM_BKPT
;

4469 
shm∑ge_out
;

4471 
pShmNode
->
≠Regi⁄
 = 
≠New
;

4472  
pShmNode
->
nRegi⁄
<
nReqRegi⁄
 ){

4473 
nM≠
 = 
szRegi⁄
*
nShmPîM≠
;

4474 
i
;

4475 *
pMem
;

4476 if–
pShmNode
->
h
>=0 ){

4477 
pMem
 = 
	`osMm≠
(0, 
nM≠
,

4478 
pShmNode
->
isRód⁄ly
 ? 
PROT_READ
 : PROT_READ|
PROT_WRITE
,

4479 
MAP_SHARED
, 
pShmNode
->
h
, 
szRegi⁄
*(
i64
ÌShmNode->
nRegi⁄


4481 if–
pMem
==
MAP_FAILED
 ){

4482 
rc
 = 
	`unixLogEº‹
(
SQLITE_IOERR_SHMMAP
, "mm≠", 
pShmNode
->
zFûíame
);

4483 
shm∑ge_out
;

4486 
pMem
 = 
	`sqlôe3_mÆloc64
(
szRegi⁄
);

4487 if–
pMem
==0 ){

4488 
rc
 = 
SQLITE_NOMEM_BKPT
;

4489 
shm∑ge_out
;

4491 
	`mem£t
(
pMem
, 0, 
szRegi⁄
);

4494 
i
=0; i<
nShmPîM≠
; i++){

4495 
pShmNode
->
≠Regi⁄
[pShmNode->
nRegi⁄
+
i
] = &((*)
pMem
)[
szRegi⁄
*i];

4497 
pShmNode
->
nRegi⁄
 +
nShmPîM≠
;

4501 
shm∑ge_out
:

4502 if–
pShmNode
->
nRegi⁄
>
iRegi⁄
 ){

4503 *
µ
 = 
pShmNode
->
≠Regi⁄
[
iRegi⁄
];

4505 *
µ
 = 0;

4507 if–
pShmNode
->
isRód⁄ly
 && 
rc
==
SQLITE_OK
 )Ñ¯
SQLITE_READONLY
;

4508 
	`sqlôe3_muãx_Àave
(
pShmNode
->
muãx
);

4509  
rc
;

4510 
	}
}

4520 
	$unixShmLock
(

4521 
sqlôe3_fûe
 *
fd
,

4522 
of°
,

4523 
n
,

4524 
Êags


4526 
unixFûe
 *
pDbFd
 = (unixFûe*)
fd
;

4527 
unixShm
 *
p
 = 
pDbFd
->
pShm
;

4528 
unixShm
 *
pX
;

4529 
unixShmNode
 *
pShmNode
 = 
p
->pShmNode;

4530 
rc
 = 
SQLITE_OK
;

4531 
u16
 
mask
;

4533 
	`as£π
–
pShmNode
==
pDbFd
->
pInode
->pShmNode );

4534 
	`as£π
–
pShmNode
->
pInode
==
pDbFd
->pInode );

4535 
	`as£π
–
of°
>=0 && of°+
n
<=
SQLITE_SHM_NLOCK
 );

4536 
	`as£π
–
n
>=1 );

4537 
	`as£π
–
Êags
==(
SQLITE_SHM_LOCK
 | 
SQLITE_SHM_SHARED
)

4538 || 
Êags
==(
SQLITE_SHM_LOCK
 | 
SQLITE_SHM_EXCLUSIVE
)

4539 || 
Êags
==(
SQLITE_SHM_UNLOCK
 | 
SQLITE_SHM_SHARED
)

4540 || 
Êags
==(
SQLITE_SHM_UNLOCK
 | 
SQLITE_SHM_EXCLUSIVE
) );

4541 
	`as£π
–
n
==1 || (
Êags
 & 
SQLITE_SHM_EXCLUSIVE
)!=0 );

4542 
	`as£π
–
pShmNode
->
h
>=0 || 
pDbFd
->
pInode
->
bPro˚ssLock
==1 );

4543 
	`as£π
–
pShmNode
->
h
<0 || 
pDbFd
->
pInode
->
bPro˚ssLock
==0 );

4545 
mask
 = (1<<(
of°
+
n
)) - (1<<ofst);

4546 
	`as£π
–
n
>1 || 
mask
==(1<<
of°
) );

4547 
	`sqlôe3_muãx_íãr
(
pShmNode
->
muãx
);

4548 if–
Êags
 & 
SQLITE_SHM_UNLOCK
 ){

4549 
u16
 
ÆlMask
 = 0;

4552 
pX
=
pShmNode
->
pFú°
;ÖX;ÖXıX->
pNext
){

4553 if–
pX
==
p
 ) ;

4554 
	`as£π
–(
pX
->
ex˛Mask
 & (
p
->ex˛Mask|p->
sh¨edMask
))==0 );

4555 
ÆlMask
 |
pX
->
sh¨edMask
;

4559 if–(
mask
 & 
ÆlMask
)==0 ){

4560 
rc
 = 
	`unixShmSy°emLock
(
pDbFd
, 
F_UNLCK
, 
of°
+
UNIX_SHM_BASE
, 
n
);

4562 
rc
 = 
SQLITE_OK
;

4566 if–
rc
==
SQLITE_OK
 ){

4567 
p
->
ex˛Mask
 &~
mask
;

4568 
p
->
sh¨edMask
 &~
mask
;

4570 }if–
Êags
 & 
SQLITE_SHM_SHARED
 ){

4571 
u16
 
ÆlSh¨ed
 = 0;

4577 
pX
=
pShmNode
->
pFú°
;ÖX;ÖXıX->
pNext
){

4578 if–(
pX
->
ex˛Mask
 & 
mask
)!=0 ){

4579 
rc
 = 
SQLITE_BUSY
;

4582 
ÆlSh¨ed
 |
pX
->
sh¨edMask
;

4586 if–
rc
==
SQLITE_OK
 ){

4587 if–(
ÆlSh¨ed
 & 
mask
)==0 ){

4588 
rc
 = 
	`unixShmSy°emLock
(
pDbFd
, 
F_RDLCK
, 
of°
+
UNIX_SHM_BASE
, 
n
);

4590 
rc
 = 
SQLITE_OK
;

4595 if–
rc
==
SQLITE_OK
 ){

4596 
p
->
sh¨edMask
 |
mask
;

4602 
pX
=
pShmNode
->
pFú°
;ÖX;ÖXıX->
pNext
){

4603 if–(
pX
->
ex˛Mask
 & 
mask
)!=0 || (pX->
sh¨edMask
 & mask)!=0 ){

4604 
rc
 = 
SQLITE_BUSY
;

4612 if–
rc
==
SQLITE_OK
 ){

4613 
rc
 = 
	`unixShmSy°emLock
(
pDbFd
, 
F_WRLCK
, 
of°
+
UNIX_SHM_BASE
, 
n
);

4614 if–
rc
==
SQLITE_OK
 ){

4615 
	`as£π
–(
p
->
sh¨edMask
 & 
mask
)==0 );

4616 
p
->
ex˛Mask
 |
mask
;

4620 
	`sqlôe3_muãx_Àave
(
pShmNode
->
muãx
);

4621 
	`OSTRACE
(("SHM-LOCK shmid-%d,Öid-%d got %03x,%03x\n",

4622 
p
->
id
, 
	`osGëpid
(0),Ö->
sh¨edMask
,Ö->
ex˛Mask
));

4623  
rc
;

4624 
	}
}

4632 
	$unixShmB¨rõr
(

4633 
sqlôe3_fûe
 *
fd


4635 
	`UNUSED_PARAMETER
(
fd
);

4636 
	`sqlôe3Mem‹yB¨rõr
();

4637 
	`unixE¡îMuãx
();

4638 
	`unixLóveMuãx
();

4639 
	}
}

4648 
	$unixShmUnm≠
(

4649 
sqlôe3_fûe
 *
fd
,

4650 
dñëeFœg


4652 
unixShm
 *
p
;

4653 
unixShmNode
 *
pShmNode
;

4654 
unixShm
 **
µ
;

4655 
unixFûe
 *
pDbFd
;

4657 
pDbFd
 = (
unixFûe
*)
fd
;

4658 
p
 = 
pDbFd
->
pShm
;

4659 if–
p
==0 )  
SQLITE_OK
;

4660 
pShmNode
 = 
p
->pShmNode;

4662 
	`as£π
–
pShmNode
==
pDbFd
->
pInode
->pShmNode );

4663 
	`as£π
–
pShmNode
->
pInode
==
pDbFd
->pInode );

4667 
	`sqlôe3_muãx_íãr
(
pShmNode
->
muãx
);

4668 
µ
=&
pShmNode
->
pFú°
; (*µ)!=
p
;Ö∞&(*µ)->
pNext
){}

4669 *
µ
 = 
p
->
pNext
;

4672 
	`sqlôe3_‰ì
(
p
);

4673 
pDbFd
->
pShm
 = 0;

4674 
	`sqlôe3_muãx_Àave
(
pShmNode
->
muãx
);

4678 
	`unixE¡îMuãx
();

4679 
	`as£π
–
pShmNode
->
nRef
>0 );

4680 
pShmNode
->
nRef
--;

4681 if–
pShmNode
->
nRef
==0 ){

4682 if–
dñëeFœg
 && 
pShmNode
->
h
>=0 ){

4683 
	`osU∆ök
(
pShmNode
->
zFûíame
);

4685 
	`unixShmPurge
(
pDbFd
);

4687 
	`unixLóveMuãx
();

4689  
SQLITE_OK
;

4690 
	}
}

4694 
	#unixShmM≠
 0

	)

4695 
	#unixShmLock
 0

	)

4696 
	#unixShmB¨rõr
 0

	)

4697 
	#unixShmUnm≠
 0

	)

4700 #i‡
SQLITE_MAX_MMAP_SIZE
>0

4704 
	$unixUnm≠fûe
(
unixFûe
 *
pFd
){

4705 
	`as£π
–
pFd
->
nFëchOut
==0 );

4706 if–
pFd
->
pM≠Regi⁄
 ){

4707 
	`osMunm≠
(
pFd
->
pM≠Regi⁄
,ÖFd->
mm≠SizeA˘uÆ
);

4708 
pFd
->
pM≠Regi⁄
 = 0;

4709 
pFd
->
mm≠Size
 = 0;

4710 
pFd
->
mm≠SizeA˘uÆ
 = 0;

4712 
	}
}

4729 
	$unixRem≠fûe
(

4730 
unixFûe
 *
pFd
,

4731 
i64
 
nNew


4733 c⁄° *
zEº
 = "mmap";

4734 
h
 = 
pFd
->h;

4735 
u8
 *
pOrig
 = (u8 *)
pFd
->
pM≠Regi⁄
;

4736 
i64
 
nOrig
 = 
pFd
->
mm≠SizeA˘uÆ
;

4737 
u8
 *
pNew
 = 0;

4738 
Êags
 = 
PROT_READ
;

4740 
	`as£π
–
pFd
->
nFëchOut
==0 );

4741 
	`as£π
–
nNew
>
pFd
->
mm≠Size
 );

4742 
	`as£π
–
nNew
<=
pFd
->
mm≠SizeMax
 );

4743 
	`as£π
–
nNew
>0 );

4744 
	`as£π
–
pFd
->
mm≠SizeA˘uÆ
>ıFd->
mm≠Size
 );

4745 
	`as£π
–
MAP_FAILED
!=0 );

4747 #ifde‡
SQLITE_MMAP_READWRITE


4748 if–(
pFd
->
˘æFœgs
 & 
UNIXFILE_RDONLY
)==0 ) 
Êags
 |
PROT_WRITE
;

4751 if–
pOrig
 ){

4752 #i‡
HAVE_MREMAP


4753 
i64
 
nReu£
 = 
pFd
->
mm≠Size
;

4755 c⁄° 
szSy•age
 = 
	`osGë∑gesize
();

4756 
i64
 
nReu£
 = (
pFd
->
mm≠Size
 & ~(
szSy•age
-1));

4758 
u8
 *
pReq
 = &
pOrig
[
nReu£
];

4761 if–
nReu£
!=
nOrig
 ){

4762 
	`osMunm≠
(
pReq
, 
nOrig
-
nReu£
);

4765 #i‡
HAVE_MREMAP


4766 
pNew
 = 
	`osMªm≠
(
pOrig
, 
nReu£
, 
nNew
, 
MREMAP_MAYMOVE
);

4767 
zEº
 = "mremap";

4769 
pNew
 = 
	`osMm≠
(
pReq
, 
nNew
-
nReu£
, 
Êags
, 
MAP_SHARED
, 
h
,ÇReuse);

4770 if–
pNew
!=
MAP_FAILED
 ){

4771 if–
pNew
!=
pReq
 ){

4772 
	`osMunm≠
(
pNew
, 
nNew
 - 
nReu£
);

4773 
pNew
 = 0;

4775 
pNew
 = 
pOrig
;

4781 if–
pNew
==
MAP_FAILED
 ||ÖNew==0 ){

4782 
	`osMunm≠
(
pOrig
, 
nReu£
);

4787 if–
pNew
==0 ){

4788 
pNew
 = 
	`osMm≠
(0, 
nNew
, 
Êags
, 
MAP_SHARED
, 
h
, 0);

4791 if–
pNew
==
MAP_FAILED
 ){

4792 
pNew
 = 0;

4793 
nNew
 = 0;

4794 
	`unixLogEº‹
(
SQLITE_OK
, 
zEº
, 
pFd
->
zP©h
);

4799 
pFd
->
mm≠SizeMax
 = 0;

4801 
pFd
->
pM≠Regi⁄
 = (*)
pNew
;

4802 
pFd
->
mm≠Size
 =ÖFd->
mm≠SizeA˘uÆ
 = 
nNew
;

4803 
	}
}

4821 
	$unixM≠fûe
(
unixFûe
 *
pFd
, 
i64
 
nM≠
){

4822 
	`as£π
–
nM≠
>=0 || 
pFd
->
nFëchOut
==0 );

4823 
	`as£π
–
nM≠
>0 || (
pFd
->
mm≠Size
==0 &&ÖFd->
pM≠Regi⁄
==0) );

4824 if–
pFd
->
nFëchOut
>0 )  
SQLITE_OK
;

4826 if–
nM≠
<0 ){

4827 
°©
 
°©buf
;

4828 if–
	`osF°©
(
pFd
->
h
, &
°©buf
) ){

4829  
SQLITE_IOERR_FSTAT
;

4831 
nM≠
 = 
°©buf
.
°_size
;

4833 if–
nM≠
>
pFd
->
mm≠SizeMax
 ){

4834 
nM≠
 = 
pFd
->
mm≠SizeMax
;

4837 
	`as£π
–
nM≠
>0 || (
pFd
->
mm≠Size
==0 &&ÖFd->
pM≠Regi⁄
==0) );

4838 if–
nM≠
!=
pFd
->
mm≠Size
 ){

4839 
	`unixRem≠fûe
(
pFd
, 
nM≠
);

4842  
SQLITE_OK
;

4843 
	}
}

4858 
	$unixFëch
(
sqlôe3_fûe
 *
fd
, 
i64
 
iOff
, 
nAmt
, **
µ
){

4859 #i‡
SQLITE_MAX_MMAP_SIZE
>0

4860 
unixFûe
 *
pFd
 = (unixFûê*)
fd
;

4862 *
µ
 = 0;

4864 #i‡
SQLITE_MAX_MMAP_SIZE
>0

4865 if–
pFd
->
mm≠SizeMax
>0 ){

4866 if–
pFd
->
pM≠Regi⁄
==0 ){

4867 
rc
 = 
	`unixM≠fûe
(
pFd
, -1);

4868 if–
rc
!=
SQLITE_OK
 ) Ñc;

4870 if–
pFd
->
mm≠Size
 >
iOff
+
nAmt
 ){

4871 *
µ
 = &((
u8
 *)
pFd
->
pM≠Regi⁄
)[
iOff
];

4872 
pFd
->
nFëchOut
++;

4876  
SQLITE_OK
;

4877 
	}
}

4889 
	$unixUn„tch
(
sqlôe3_fûe
 *
fd
, 
i64
 
iOff
, *
p
){

4890 #i‡
SQLITE_MAX_MMAP_SIZE
>0

4891 
unixFûe
 *
pFd
 = (unixFûê*)
fd
;

4892 
	`UNUSED_PARAMETER
(
iOff
);

4897 
	`as£π
–(
p
==0)==(
pFd
->
nFëchOut
==0) );

4900 
	`as£π
–
p
==0 ||Ö==&((
u8
 *)
pFd
->
pM≠Regi⁄
)[
iOff
] );

4902 if–
p
 ){

4903 
pFd
->
nFëchOut
--;

4905 
	`unixUnm≠fûe
(
pFd
);

4908 
	`as£π
–
pFd
->
nFëchOut
>=0 );

4910 
	`UNUSED_PARAMETER
(
fd
);

4911 
	`UNUSED_PARAMETER
(
p
);

4912 
	`UNUSED_PARAMETER
(
iOff
);

4914  
SQLITE_OK
;

4915 
	}
}

4957 
	#IOMETHODS
(
FINDER
,
METHOD
,
VERSION
,
CLOSE
,
LOCK
,
UNLOCK
,
CKLOCK
,
SHMMAP
) \

4958 c⁄° 
sqlôe3_io_mëhods
 
METHOD
 = { \

4959 
VERSION
, \

4960 
CLOSE
, \

4961 
unixRód
, \

4962 
unixWrôe
, \

4963 
unixTrunˇã
, \

4964 
unixSync
, \

4965 
unixFûeSize
, \

4966 
LOCK
, \

4967 
UNLOCK
, \

4968 
CKLOCK
, \

4969 
unixFûeC⁄åﬁ
, \

4970 
unixSe˘‹Size
, \

4971 
unixDevi˚Ch¨a˘îi°ics
, \

4972 
SHMMAP
, \

4973 
unixShmLock
, \

4974 
unixShmB¨rõr
, \

4975 
unixShmUnm≠
, \

4976 
unixFëch
, \

4977 
unixUn„tch
, \

4979 c⁄° 
sqlôe3_io_mëhods
 *
FINDER
##
	`Im∂
(c⁄° *
z
, 
unixFûe
 *
p
){ \

4980 
	`UNUSED_PARAMETER
(
z
); UNUSED_PARAMETER(
p
); \

4981  &
METHOD
; \

4983 c⁄° 
sqlôe3_io_mëhods
 *(*c⁄° 
FINDER
)(c⁄° *,
unixFûe
 *
p
) \

4984 
FINDER
##
Im∂
;

	)

4991 
	$IOMETHODS
(

4992 
posixIoFödî
,

4993 
posixIoMëhods
,

4995 
unixClo£
,

4996 
unixLock
,

4997 
unixU∆ock
,

4998 
unixCheckRe£rvedLock
,

4999 
unixShmM≠


5001 
	$IOMETHODS
(

5002 
nﬁockIoFödî
,

5003 
nﬁockIoMëhods
,

5005 
nﬁockClo£
,

5006 
nﬁockLock
,

5007 
nﬁockU∆ock
,

5008 
nﬁockCheckRe£rvedLock
,

5011 
	$IOMETHODS
(

5012 
dŸlockIoFödî
,

5013 
dŸlockIoMëhods
,

5015 
dŸlockClo£
,

5016 
dŸlockLock
,

5017 
dŸlockU∆ock
,

5018 
dŸlockCheckRe£rvedLock
,

5022 #i‡
SQLITE_ENABLE_LOCKING_STYLE


5023 
	$IOMETHODS
(

5024 
ÊockIoFödî
,

5025 
ÊockIoMëhods
,

5027 
ÊockClo£
,

5028 
ÊockLock
,

5029 
ÊockU∆ock
,

5030 
ÊockCheckRe£rvedLock
,

5035 #i‡
OS_VXWORKS


5036 
	$IOMETHODS
(

5037 
£mIoFödî
,

5038 
£mIoMëhods
,

5040 
£mXClo£
,

5041 
£mXLock
,

5042 
£mXU∆ock
,

5043 
£mXCheckRe£rvedLock
,

5048 #i‡
	`deföed
(
__APPLE__
Ë&& 
SQLITE_ENABLE_LOCKING_STYLE


5049 
	$IOMETHODS
(

5050 
aÂIoFödî
,

5051 
aÂIoMëhods
,

5053 
aÂClo£
,

5054 
aÂLock
,

5055 
aÂU∆ock
,

5056 
aÂCheckRe£rvedLock
,

5070 #i‡
	`deföed
(
__APPLE__
Ë&& 
SQLITE_ENABLE_LOCKING_STYLE


5071 
	`¥oxyClo£
(
sqlôe3_fûe
*);

5072 
	`¥oxyLock
(
sqlôe3_fûe
*, );

5073 
	`¥oxyU∆ock
(
sqlôe3_fûe
*, );

5074 
	`¥oxyCheckRe£rvedLock
(
sqlôe3_fûe
*, *);

5075 
	$IOMETHODS
(

5076 
¥oxyIoFödî
,

5077 
¥oxyIoMëhods
,

5079 
¥oxyClo£
,

5080 
¥oxyLock
,

5081 
¥oxyU∆ock
,

5082 
¥oxyCheckRe£rvedLock
,

5088 #i‡
	`deföed
(
__APPLE__
Ë&& 
SQLITE_ENABLE_LOCKING_STYLE


5089 
	$IOMETHODS
(

5090 
nfsIoFödî
,

5091 
nfsIoMëhods
,

5093 
unixClo£
,

5094 
unixLock
,

5095 
nfsU∆ock
,

5096 
unixCheckRe£rvedLock
,

5101 #i‡
	`deföed
(
__APPLE__
Ë&& 
SQLITE_ENABLE_LOCKING_STYLE


5109 c⁄° 
sqlôe3_io_mëhods
 *
	$autﬁockIoFödîIm∂
(

5110 c⁄° *
fûeP©h
,

5111 
unixFûe
 *
pNew


5113 c⁄° 
	sM≠pög
 {

5114 c⁄° *
zFûesy°em
;

5115 c⁄° 
sqlôe3_io_mëhods
 *
pMëhods
;

5116 } 
aM≠
[] = {

5117 { "hfs", &
posixIoMëhods
 },

5118 { "ufs", &
posixIoMëhods
 },

5119 { "aÂfs", &
aÂIoMëhods
 },

5120 { "smbfs", &
aÂIoMëhods
 },

5121 { "webdav", &
nﬁockIoMëhods
 },

5124 
i
;

5125 
°©fs
 
fsInfo
;

5126 
Êock
 
lockInfo
;

5128 if–!
fûeP©h
 ){

5131  &
nﬁockIoMëhods
;

5133 if–
	`°©fs
(
fûeP©h
, &
fsInfo
) != -1 ){

5134 if–
fsInfo
.
f_Êags
 & 
MNT_RDONLY
 ){

5135  &
nﬁockIoMëhods
;

5137 
i
=0; 
aM≠
[i].
zFûesy°em
; i++){

5138 if–
	`°rcmp
(
fsInfo
.
f_f°y≥«me
, 
aM≠
[
i
].
zFûesy°em
)==0 ){

5139  
aM≠
[
i
].
pMëhods
;

5148 
lockInfo
.
l_Àn
 = 1;

5149 
lockInfo
.
l_°¨t
 = 0;

5150 
lockInfo
.
l_whí˚
 = 
SEEK_SET
;

5151 
lockInfo
.
l_ty≥
 = 
F_RDLCK
;

5152 if–
	`osF˙é
(
pNew
->
h
, 
F_GETLK
, &
lockInfo
)!=-1 ) {

5153 if–
	`°rcmp
(
fsInfo
.
f_f°y≥«me
, "nfs")==0 ){

5154  &
nfsIoMëhods
;

5156  &
posixIoMëhods
;

5159  &
dŸlockIoMëhods
;

5161 
	}
}

5162 c⁄° 
	gsqlôe3_io_mëhods


5163 *(*c⁄° 
	gautﬁockIoFödî
)(c⁄° *,
	gunixFûe
*Ë
autﬁockIoFödîIm∂
;

5167 #i‡
OS_VXWORKS


5173 c⁄° 
sqlôe3_io_mëhods
 *
	$vxw‹ksIoFödîIm∂
(

5174 c⁄° *
fûeP©h
,

5175 
unixFûe
 *
pNew


5177 
Êock
 
lockInfo
;

5179 if–!
fûeP©h
 ){

5182  &
nﬁockIoMëhods
;

5188 
lockInfo
.
l_Àn
 = 1;

5189 
lockInfo
.
l_°¨t
 = 0;

5190 
lockInfo
.
l_whí˚
 = 
SEEK_SET
;

5191 
lockInfo
.
l_ty≥
 = 
F_RDLCK
;

5192 if–
	`osF˙é
(
pNew
->
h
, 
F_GETLK
, &
lockInfo
)!=-1 ) {

5193  &
posixIoMëhods
;

5195  &
£mIoMëhods
;

5197 
	}
}

5198 c⁄° 
	gsqlôe3_io_mëhods


5199 *(*c⁄° 
	gvxw‹ksIoFödî
)(c⁄° *,
	gunixFûe
*Ë
vxw‹ksIoFödîIm∂
;

5206 c⁄° 
	tsqlôe3_io_mëhods
 *(*
	tfödî_ty≥
)(c⁄° *,
	tunixFûe
*);

5219 
	$fûlInUnixFûe
(

5220 
sqlôe3_vfs
 *
pVfs
,

5221 
h
,

5222 
sqlôe3_fûe
 *
pId
,

5223 c⁄° *
zFûíame
,

5224 
˘æFœgs


5226 c⁄° 
sqlôe3_io_mëhods
 *
pLockögStyÀ
;

5227 
unixFûe
 *
pNew
 = (unixFûê*)
pId
;

5228 
rc
 = 
SQLITE_OK
;

5230 
	`as£π
–
pNew
->
pInode
==
NULL
 );

5236 #i‡
	`deföed
(
__APPLE__
Ë&& 
SQLITE_ENABLE_LOCKING_STYLE


5237 
	`as£π
–
zFûíame
==0 || zFilename[0]=='/'

5238 || 
pVfs
->
pAµD©a
==(*)&
autﬁockIoFödî
 );

5240 
	`as£π
–
zFûíame
==0 || zFilename[0]=='/' );

5244 
	`as£π
–
zFûíame
!=0 || (
˘æFœgs
 & 
UNIXFILE_NOLOCK
)!=0 );

5246 
	`OSTRACE
(("OPEN %-3d %s\n", 
h
, 
zFûíame
));

5247 
pNew
->
h
 = h;

5248 
pNew
->
pVfs
 =ÖVfs;

5249 
pNew
->
zP©h
 = 
zFûíame
;

5250 
pNew
->
˘æFœgs
 = (
u8
)ctrlFlags;

5251 #i‡
SQLITE_MAX_MMAP_SIZE
>0

5252 
pNew
->
mm≠SizeMax
 = 
sqlôe3GlobÆC⁄fig
.
szMm≠
;

5254 if–
	`sqlôe3_uri_boﬁón
(((
˘æFœgs
 & 
UNIXFILE_URI
Ë? 
zFûíame
 : 0),

5255 "psow", 
SQLITE_POWERSAFE_OVERWRITE
) ){

5256 
pNew
->
˘æFœgs
 |
UNIXFILE_PSOW
;

5258 if–
	`°rcmp
(
pVfs
->
zName
,"unix-excl")==0 ){

5259 
pNew
->
˘æFœgs
 |
UNIXFILE_EXCL
;

5262 #i‡
OS_VXWORKS


5263 
pNew
->
pId
 = 
	`vxw‹ksFödFûeId
(
zFûíame
);

5264 if–
pNew
->
pId
==0 ){

5265 
˘æFœgs
 |
UNIXFILE_NOLOCK
;

5266 
rc
 = 
SQLITE_NOMEM_BKPT
;

5270 if–
˘æFœgs
 & 
UNIXFILE_NOLOCK
 ){

5271 
pLockögStyÀ
 = &
nﬁockIoMëhods
;

5273 
pLockögStyÀ
 = (**(
födî_ty≥
*)
pVfs
->
pAµD©a
)(
zFûíame
, 
pNew
);

5274 #i‡
SQLITE_ENABLE_LOCKING_STYLE


5278 
pNew
->
lockögC⁄ãxt
 = (*)
zFûíame
;

5282 if–
pLockögStyÀ
 =&
posixIoMëhods


5283 #i‡
	`deföed
(
__APPLE__
Ë&& 
SQLITE_ENABLE_LOCKING_STYLE


5284 || 
pLockögStyÀ
 =&
nfsIoMëhods


5287 
	`unixE¡îMuãx
();

5288 
rc
 = 
	`födInodeInfo
(
pNew
, &pNew->
pInode
);

5289 if–
rc
!=
SQLITE_OK
 ){

5308 
	`robu°_˛o£
(
pNew
, 
h
, 
__LINE__
);

5309 
h
 = -1;

5311 
	`unixLóveMuãx
();

5314 #i‡
SQLITE_ENABLE_LOCKING_STYLE
 && 
	`deföed
(
__APPLE__
)

5315 if–
pLockögStyÀ
 =&
aÂIoMëhods
 ){

5319 
aÂLockögC⁄ãxt
 *
pCtx
;

5320 
pNew
->
lockögC⁄ãxt
 = 
pCtx
 = 
	`sqlôe3_mÆloc64
( (*pCtx) );

5321 if–
pCtx
==0 ){

5322 
rc
 = 
SQLITE_NOMEM_BKPT
;

5327 
pCtx
->
dbP©h
 = 
zFûíame
;

5328 
pCtx
->
ª£rved
 = 0;

5329 
	`§™domdev
();

5330 
	`unixE¡îMuãx
();

5331 
rc
 = 
	`födInodeInfo
(
pNew
, &pNew->
pInode
);

5332 if–
rc
!=
SQLITE_OK
 ){

5333 
	`sqlôe3_‰ì
(
pNew
->
lockögC⁄ãxt
);

5334 
	`robu°_˛o£
(
pNew
, 
h
, 
__LINE__
);

5335 
h
 = -1;

5337 
	`unixLóveMuãx
();

5342 if–
pLockögStyÀ
 =&
dŸlockIoMëhods
 ){

5346 *
zLockFûe
;

5347 
nFûíame
;

5348 
	`as£π
–
zFûíame
!=0 );

5349 
nFûíame
 = ()
	`°æí
(
zFûíame
) + 6;

5350 
zLockFûe
 = (*)
	`sqlôe3_mÆloc64
(
nFûíame
);

5351 if–
zLockFûe
==0 ){

5352 
rc
 = 
SQLITE_NOMEM_BKPT
;

5354 
	`sqlôe3_¢¥ötf
(
nFûíame
, 
zLockFûe
, "%s" 
DOTLOCK_SUFFIX
, 
zFûíame
);

5356 
pNew
->
lockögC⁄ãxt
 = 
zLockFûe
;

5359 #i‡
OS_VXWORKS


5360 if–
pLockögStyÀ
 =&
£mIoMëhods
 ){

5364 
	`unixE¡îMuãx
();

5365 
rc
 = 
	`födInodeInfo
(
pNew
, &pNew->
pInode
);

5366 if–(
rc
==
SQLITE_OK
Ë&& (
pNew
->
pInode
->
pSem
==
NULL
) ){

5367 *
zSemName
 = 
pNew
->
pInode
->
aSemName
;

5368 
n
;

5369 
	`sqlôe3_¢¥ötf
(
MAX_PATHNAME
, 
zSemName
, "/%s.sem",

5370 
pNew
->
pId
->
zC™⁄iˇlName
);

5371  
n
=1; 
zSemName
[n];Ç++ )

5372 if–
zSemName
[
n
]=='/' ) zSemName[n] = '_';

5373 
pNew
->
pInode
->
pSem
 = 
	`£m_›í
(
zSemName
, 
O_CREAT
, 0666, 1);

5374 if–
pNew
->
pInode
->
pSem
 =
SEM_FAILED
 ){

5375 
rc
 = 
SQLITE_NOMEM_BKPT
;

5376 
pNew
->
pInode
->
aSemName
[0] = '\0';

5379 
	`unixLóveMuãx
();

5383 
	`°‹eLa°Eºno
(
pNew
, 0);

5384 #i‡
OS_VXWORKS


5385 if–
rc
!=
SQLITE_OK
 ){

5386 if–
h
>=0 ) 
	`robu°_˛o£
(
pNew
, h, 
__LINE__
);

5387 
h
 = -1;

5388 
	`osU∆ök
(
zFûíame
);

5389 
pNew
->
˘æFœgs
 |
UNIXFILE_DELETE
;

5392 if–
rc
!=
SQLITE_OK
 ){

5393 if–
h
>=0 ) 
	`robu°_˛o£
(
pNew
, h, 
__LINE__
);

5395 
pNew
->
pMëhod
 = 
pLockögStyÀ
;

5396 
	`O≥nCou¡î
(+1);

5397 
	`vîifyDbFûe
(
pNew
);

5399  
rc
;

5400 
	}
}

5406 c⁄° *
	$unixTempFûeDú
(){

5407 c⁄° *
azDús
[] = {

5415 
i
 = 0;

5416 
°©
 
buf
;

5417 c⁄° *
zDú
 = 
sqlôe3_ãmp_dúe˘‹y
;

5419 if–!
azDús
[0] )ázDús[0] = 
	`gëív
("SQLITE_TMPDIR");

5420 if–!
azDús
[1] )ázDús[1] = 
	`gëív
("TMPDIR");

5422 if–
zDú
!=0

5423 && 
	`osSèt
(
zDú
, &
buf
)==0

5424 && 
	`S_ISDIR
(
buf
.
°_mode
)

5425 && 
	`osAc˚ss
(
zDú
, 03)==0

5427  
zDú
;

5429 if–
i
>=(
azDús
)/(azDirs[0]) ) ;

5430 
zDú
 = 
azDús
[
i
++];

5433 
	}
}

5440 
	$unixGëTem≤ame
(
nBuf
, *
zBuf
){

5441 c⁄° *
zDú
;

5442 
iLimô
 = 0;

5448 
zBuf
[0] = 0;

5449 
	`SimuœãIOEº‹
– 
SQLITE_IOERR
 );

5451 
zDú
 = 
	`unixTempFûeDú
();

5452 if–
zDú
==0 )  
SQLITE_IOERR_GETTEMPPATH
;

5454 
u64
 
r
;

5455 
	`sqlôe3_øndom√ss
((
r
), &r);

5456 
	`as£π
–
nBuf
>2 );

5457 
zBuf
[
nBuf
-2] = 0;

5458 
	`sqlôe3_¢¥ötf
(
nBuf
, 
zBuf
, "%s/"
SQLITE_TEMP_FILE_PREFIX
"%llx%c",

5459 
zDú
, 
r
, 0);

5460 if–
zBuf
[
nBuf
-2]!=0 || (
iLimô
++)>10 )  
SQLITE_ERROR
;

5461 } 
	`osAc˚ss
(
zBuf
,0)==0 );

5462  
SQLITE_OK
;

5463 
	}
}

5465 #i‡
SQLITE_ENABLE_LOCKING_STYLE
 && 
deföed
(
__APPLE__
)

5471 
¥oxyTønsf‹mUnixFûe
(
unixFûe
*, const *);

5490 
UnixUnu£dFd
 *
	$födReußbÀFd
(c⁄° *
zP©h
, 
Êags
){

5491 
UnixUnu£dFd
 *
pUnu£d
 = 0;

5498 #i‡!
OS_VXWORKS


5499 
°©
 
sSèt
;

5509 if–0==
	`osSèt
(
zP©h
, &
sSèt
) ){

5510 
unixInodeInfo
 *
pInode
;

5512 
	`unixE¡îMuãx
();

5513 
pInode
 = 
öodeLi°
;

5514  
pInode
 && (pInode->
fûeId
.
dev
!=
sSèt
.
°_dev


5515 || 
pInode
->
fûeId
.
öo
!=
sSèt
.
°_öo
) ){

5516 
pInode
 =ÖInode->
pNext
;

5518 if–
pInode
 ){

5519 
UnixUnu£dFd
 **
µ
;

5520 
µ
=&
pInode
->
pUnu£d
; *µ && (*µ)->
Êags
!=Êags;Öp=&((*µ)->
pNext
));

5521 
pUnu£d
 = *
µ
;

5522 if–
pUnu£d
 ){

5523 *
µ
 = 
pUnu£d
->
pNext
;

5526 
	`unixLóveMuãx
();

5529  
pUnu£d
;

5530 
	}
}

5553 
	$födCª©eFûeMode
(

5554 c⁄° *
zP©h
,

5555 
Êags
,

5556 
mode_t
 *
pMode
,

5557 
uid_t
 *
pUid
,

5558 
gid_t
 *
pGid


5560 
rc
 = 
SQLITE_OK
;

5561 *
pMode
 = 0;

5562 *
pUid
 = 0;

5563 *
pGid
 = 0;

5564 if–
Êags
 & (
SQLITE_OPEN_WAL
|
SQLITE_OPEN_MAIN_JOURNAL
) ){

5565 
zDb
[
MAX_PATHNAME
+1];

5566 
nDb
;

5567 
°©
 
sSèt
;

5581 
nDb
 = 
	`sqlôe3SåÀn30
(
zP©h
) - 1;

5582  
zP©h
[
nDb
]!='-' ){

5583 #i‚de‡
SQLITE_ENABLE_8_3_NAMES


5586 
	`as£π
–
nDb
>0 );

5587 
	`as£π
–
	`sqlôe3Iß um
(
zP©h
[
nDb
]) );

5591 if–
nDb
==0 || 
zP©h
[nDb]=='.' )  
SQLITE_OK
;

5593 
nDb
--;

5595 
	`mem˝y
(
zDb
, 
zP©h
, 
nDb
);

5596 
zDb
[
nDb
] = '\0';

5598 if–0==
	`osSèt
(
zDb
, &
sSèt
) ){

5599 *
pMode
 = 
sSèt
.
°_mode
 & 0777;

5600 *
pUid
 = 
sSèt
.
°_uid
;

5601 *
pGid
 = 
sSèt
.
°_gid
;

5603 
rc
 = 
SQLITE_IOERR_FSTAT
;

5605 }if–
Êags
 & 
SQLITE_OPEN_DELETEONCLOSE
 ){

5606 *
pMode
 = 0600;

5608  
rc
;

5609 
	}
}

5633 
	$unixO≥n
(

5634 
sqlôe3_vfs
 *
pVfs
,

5635 c⁄° *
zP©h
,

5636 
sqlôe3_fûe
 *
pFûe
,

5637 
Êags
,

5638 *
pOutFœgs


5640 
unixFûe
 *
p
 = (unixFûê*)
pFûe
;

5641 
fd
 = -1;

5642 
›íFœgs
 = 0;

5643 
eTy≥
 = 
Êags
&0xFFFFFF00;

5644 
noLock
;

5645 
rc
 = 
SQLITE_OK
;

5646 
˘æFœgs
 = 0;

5648 
isEx˛usive
 = (
Êags
 & 
SQLITE_OPEN_EXCLUSIVE
);

5649 
isDñëe
 = (
Êags
 & 
SQLITE_OPEN_DELETEONCLOSE
);

5650 
isCª©e
 = (
Êags
 & 
SQLITE_OPEN_CREATE
);

5651 
isRód⁄ly
 = (
Êags
 & 
SQLITE_OPEN_READONLY
);

5652 
isRódWrôe
 = (
Êags
 & 
SQLITE_OPEN_READWRITE
);

5653 #i‡
SQLITE_ENABLE_LOCKING_STYLE


5654 
isAutoProxy
 = (
Êags
 & 
SQLITE_OPEN_AUTOPROXY
);

5656 #i‡
	`deföed
(
__APPLE__
Ë|| 
SQLITE_ENABLE_LOCKING_STYLE


5657 
°©fs
 
fsInfo
;

5664 
syncDú
 = (
isCª©e
 && (

5665 
eTy≥
==
SQLITE_OPEN_MASTER_JOURNAL


5666 || 
eTy≥
==
SQLITE_OPEN_MAIN_JOURNAL


5667 || 
eTy≥
==
SQLITE_OPEN_WAL


5673 
zTm≤ame
[
MAX_PATHNAME
+2];

5674 c⁄° *
zName
 = 
zP©h
;

5683 
	`as£π
((
isRód⁄ly
==0 || 
isRódWrôe
==0) && (isReadWrite || isReadonly));

5684 
	`as£π
(
isCª©e
==0 || 
isRódWrôe
);

5685 
	`as£π
(
isEx˛usive
==0 || 
isCª©e
);

5686 
	`as£π
(
isDñëe
==0 || 
isCª©e
);

5690 
	`as£π
–(!
isDñëe
 && 
zName
Ë|| 
eTy≥
!=
SQLITE_OPEN_MAIN_DB
 );

5691 
	`as£π
–(!
isDñëe
 && 
zName
Ë|| 
eTy≥
!=
SQLITE_OPEN_MAIN_JOURNAL
 );

5692 
	`as£π
–(!
isDñëe
 && 
zName
Ë|| 
eTy≥
!=
SQLITE_OPEN_MASTER_JOURNAL
 );

5693 
	`as£π
–(!
isDñëe
 && 
zName
Ë|| 
eTy≥
!=
SQLITE_OPEN_WAL
 );

5696 
	`as£π
–
eTy≥
==
SQLITE_OPEN_MAIN_DB
 ||ÉTy≥==
SQLITE_OPEN_TEMP_DB


5697 || 
eTy≥
==
SQLITE_OPEN_MAIN_JOURNAL
 ||ÉTy≥==
SQLITE_OPEN_TEMP_JOURNAL


5698 || 
eTy≥
==
SQLITE_OPEN_SUBJOURNAL
 ||ÉTy≥==
SQLITE_OPEN_MASTER_JOURNAL


5699 || 
eTy≥
==
SQLITE_OPEN_TRANSIENT_DB
 ||ÉTy≥==
SQLITE_OPEN_WAL


5707 if–
øndom√ssPid
!=
	`osGëpid
(0) ){

5708 
øndom√ssPid
 = 
	`osGëpid
(0);

5709 
	`sqlôe3_øndom√ss
(0,0);

5712 
	`mem£t
(
p
, 0, (
unixFûe
));

5714 if–
eTy≥
==
SQLITE_OPEN_MAIN_DB
 ){

5715 
UnixUnu£dFd
 *
pUnu£d
;

5716 
pUnu£d
 = 
	`födReußbÀFd
(
zName
, 
Êags
);

5717 if–
pUnu£d
 ){

5718 
fd
 = 
pUnu£d
->fd;

5720 
pUnu£d
 = 
	`sqlôe3_mÆloc64
((*pUnused));

5721 if–!
pUnu£d
 ){

5722  
SQLITE_NOMEM_BKPT
;

5725 
p
->
pUnu£d
 =ÖUnused;

5730 
	`as£π
–(
Êags
 & 
SQLITE_OPEN_URI
Ë|| 
zName
[
	`°æí
(zName)+1]==0 );

5732 }if–!
zName
 ){

5734 
	`as£π
(
isDñëe
 && !
syncDú
);

5735 
rc
 = 
	`unixGëTem≤ame
(
pVfs
->
mxP©h«me
, 
zTm≤ame
);

5736 if–
rc
!=
SQLITE_OK
 ){

5737  
rc
;

5739 
zName
 = 
zTm≤ame
;

5743 
	`as£π
–
zName
[
	`°æí
(zName)+1]==0 );

5750 if–
isRód⁄ly
 ) 
›íFœgs
 |
O_RDONLY
;

5751 if–
isRódWrôe
 ) 
›íFœgs
 |
O_RDWR
;

5752 if–
isCª©e
 ) 
›íFœgs
 |
O_CREAT
;

5753 if–
isEx˛usive
 ) 
›íFœgs
 |(
O_EXCL
|
O_NOFOLLOW
);

5754 
›íFœgs
 |(
O_LARGEFILE
|
O_BINARY
);

5756 if–
fd
<0 ){

5757 
mode_t
 
›íMode
;

5758 
uid_t
 
uid
;

5759 
gid_t
 
gid
;

5760 
rc
 = 
	`födCª©eFûeMode
(
zName
, 
Êags
, &
›íMode
, &
uid
, &
gid
);

5761 if–
rc
!=
SQLITE_OK
 ){

5762 
	`as£π
–!
p
->
pUnu£d
 );

5763 
	`as£π
–
eTy≥
==
SQLITE_OPEN_WAL
 ||ÉTy≥==
SQLITE_OPEN_MAIN_JOURNAL
 );

5764  
rc
;

5766 
fd
 = 
	`robu°_›í
(
zName
, 
›íFœgs
, 
›íMode
);

5767 
	`OSTRACE
(("OPENX %-3d %†0%o\n", 
fd
, 
zName
, 
›íFœgs
));

5768 
	`as£π
–!
isEx˛usive
 || (
›íFœgs
 & 
O_CREAT
)!=0 );

5769 if–
fd
<0 && 
î∫o
!=
EISDIR
 && 
isRódWrôe
 ){

5771 
Êags
 &~(
SQLITE_OPEN_READWRITE
|
SQLITE_OPEN_CREATE
);

5772 
›íFœgs
 &~(
O_RDWR
|
O_CREAT
);

5773 
Êags
 |
SQLITE_OPEN_READONLY
;

5774 
›íFœgs
 |
O_RDONLY
;

5775 
isRód⁄ly
 = 1;

5776 
fd
 = 
	`robu°_›í
(
zName
, 
›íFœgs
, 
›íMode
);

5778 if–
fd
<0 ){

5779 
rc
 = 
	`unixLogEº‹
(
SQLITE_CANTOPEN_BKPT
, "›í", 
zName
);

5780 
›í_föished
;

5787 if–
Êags
 & (
SQLITE_OPEN_WAL
|
SQLITE_OPEN_MAIN_JOURNAL
) ){

5788 
	`robu°Fchown
(
fd
, 
uid
, 
gid
);

5791 
	`as£π
–
fd
>=0 );

5792 if–
pOutFœgs
 ){

5793 *
pOutFœgs
 = 
Êags
;

5796 if–
p
->
pUnu£d
 ){

5797 
p
->
pUnu£d
->
fd
 = fd;

5798 
p
->
pUnu£d
->
Êags
 = flags;

5801 if–
isDñëe
 ){

5802 #i‡
OS_VXWORKS


5803 
zP©h
 = 
zName
;

5804 #ñi‡
	`deföed
(
SQLITE_UNLINK_AFTER_CLOSE
)

5805 
zP©h
 = 
	`sqlôe3_m¥ötf
("%s", 
zName
);

5806 if–
zP©h
==0 ){

5807 
	`robu°_˛o£
(
p
, 
fd
, 
__LINE__
);

5808  
SQLITE_NOMEM_BKPT
;

5811 
	`osU∆ök
(
zName
);

5814 #i‡
SQLITE_ENABLE_LOCKING_STYLE


5816 
p
->
›íFœgs
 = openFlags;

5820 #i‡
	`deföed
(
__APPLE__
Ë|| 
SQLITE_ENABLE_LOCKING_STYLE


5821 if–
	`f°©fs
(
fd
, &
fsInfo
) == -1 ){

5822 
	`°‹eLa°Eºno
(
p
, 
î∫o
);

5823 
	`robu°_˛o£
(
p
, 
fd
, 
__LINE__
);

5824  
SQLITE_IOERR_ACCESS
;

5826 i‡(0 =
	`°∫cmp
("msdos", 
fsInfo
.
f_f°y≥«me
, 5)) {

5827 ((
unixFûe
*)
pFûe
)->
fsFœgs
 |
SQLITE_FSFLAGS_IS_MSDOS
;

5829 i‡(0 =
	`°∫cmp
("exÁt", 
fsInfo
.
f_f°y≥«me
, 5)) {

5830 ((
unixFûe
*)
pFûe
)->
fsFœgs
 |
SQLITE_FSFLAGS_IS_MSDOS
;

5835 if–
isDñëe
 ) 
˘æFœgs
 |
UNIXFILE_DELETE
;

5836 if–
isRód⁄ly
 ) 
˘æFœgs
 |
UNIXFILE_RDONLY
;

5837 
noLock
 = 
eTy≥
!=
SQLITE_OPEN_MAIN_DB
;

5838 if–
noLock
 ) 
˘æFœgs
 |
UNIXFILE_NOLOCK
;

5839 if–
syncDú
 ) 
˘æFœgs
 |
UNIXFILE_DIRSYNC
;

5840 if–
Êags
 & 
SQLITE_OPEN_URI
 ) 
˘æFœgs
 |
UNIXFILE_URI
;

5842 #i‡
SQLITE_ENABLE_LOCKING_STYLE


5843 #i‡
SQLITE_PREFER_PROXY_LOCKING


5844 
isAutoProxy
 = 1;

5846 if–
isAutoProxy
 && (
zP©h
!=
NULL
Ë&& (!
noLock
Ë&& 
pVfs
->
xO≥n
 ){

5847 *
ívf‹˚
 = 
	`gëív
("SQLITE_FORCE_PROXY_LOCKING");

5848 
u£Proxy
 = 0;

5852 if–
ívf‹˚
!=
NULL
 ){

5853 
u£Proxy
 = 
	`©oi
(
ívf‹˚
)>0;

5855 
u£Proxy
 = !(
fsInfo
.
f_Êags
&
MNT_LOCAL
);

5857 if–
u£Proxy
 ){

5858 
rc
 = 
	`fûlInUnixFûe
(
pVfs
, 
fd
, 
pFûe
, 
zP©h
, 
˘æFœgs
);

5859 if–
rc
==
SQLITE_OK
 ){

5860 
rc
 = 
	`¥oxyTønsf‹mUnixFûe
((
unixFûe
*)
pFûe
, ":auto:");

5861 if–
rc
!=
SQLITE_OK
 ){

5866 
	`unixClo£
(
pFûe
);

5867  
rc
;

5870 
›í_föished
;

5875 
rc
 = 
	`fûlInUnixFûe
(
pVfs
, 
fd
, 
pFûe
, 
zP©h
, 
˘æFœgs
);

5877 
›í_föished
:

5878 if–
rc
!=
SQLITE_OK
 ){

5879 
	`sqlôe3_‰ì
(
p
->
pUnu£d
);

5881  
rc
;

5882 
	}
}

5889 
	$unixDñëe
(

5890 
sqlôe3_vfs
 *
NŸU£d
,

5891 c⁄° *
zP©h
,

5892 
dúSync


5894 
rc
 = 
SQLITE_OK
;

5895 
	`UNUSED_PARAMETER
(
NŸU£d
);

5896 
	`SimuœãIOEº‹
( 
SQLITE_IOERR_DELETE
);

5897 if–
	`osU∆ök
(
zP©h
)==(-1) ){

5898 if–
î∫o
==
ENOENT


5899 #i‡
OS_VXWORKS


5900 || 
	`osAc˚ss
(
zP©h
,0)!=0

5903 
rc
 = 
SQLITE_IOERR_DELETE_NOENT
;

5905 
rc
 = 
	`unixLogEº‹
(
SQLITE_IOERR_DELETE
, "u∆ök", 
zP©h
);

5907  
rc
;

5909 #i‚de‡
SQLITE_DISABLE_DIRSYNC


5910 if–(
dúSync
 & 1)!=0 ){

5911 
fd
;

5912 
rc
 = 
	`osO≥nDúe˘‹y
(
zP©h
, &
fd
);

5913 if–
rc
==
SQLITE_OK
 ){

5914 if–
	`fuŒ_fsync
(
fd
,0,0) ){

5915 
rc
 = 
	`unixLogEº‹
(
SQLITE_IOERR_DIR_FSYNC
, "fsync", 
zP©h
);

5917 
	`robu°_˛o£
(0, 
fd
, 
__LINE__
);

5919 
	`as£π
–
rc
==
SQLITE_CANTOPEN
 );

5920 
rc
 = 
SQLITE_OK
;

5924  
rc
;

5925 
	}
}

5937 
	$unixAc˚ss
(

5938 
sqlôe3_vfs
 *
NŸU£d
,

5939 c⁄° *
zP©h
,

5940 
Êags
,

5941 *
pResOut


5943 
	`UNUSED_PARAMETER
(
NŸU£d
);

5944 
	`SimuœãIOEº‹
– 
SQLITE_IOERR_ACCESS
; );

5945 
	`as£π
–
pResOut
!=0 );

5949 
	`as£π
–
Êags
==
SQLITE_ACCESS_EXISTS
 || fœgs==
SQLITE_ACCESS_READWRITE
 );

5951 if–
Êags
==
SQLITE_ACCESS_EXISTS
 ){

5952 
°©
 
buf
;

5953 *
pResOut
 = (0==
	`osSèt
(
zP©h
, &
buf
Ë&& buf.
°_size
>0);

5955 *
pResOut
 = 
	`osAc˚ss
(
zP©h
, 
W_OK
|
R_OK
)==0;

5957  
SQLITE_OK
;

5958 
	}
}

5963 
	$mkFuŒP©h«me
(

5964 c⁄° *
zP©h
,

5965 *
zOut
,

5966 
nOut


5968 
nP©h
 = 
	`sqlôe3SåÀn30
(
zP©h
);

5969 
iOff
 = 0;

5970 if–
zP©h
[0]!='/' ){

5971 if–
	`osGëcwd
(
zOut
, 
nOut
-2)==0 ){

5972  
	`unixLogEº‹
(
SQLITE_CANTOPEN_BKPT
, "gëcwd", 
zP©h
);

5974 
iOff
 = 
	`sqlôe3SåÀn30
(
zOut
);

5975 
zOut
[
iOff
++] = '/';

5977 if–(
iOff
+
nP©h
+1)>
nOut
 ){

5980 
zOut
[
iOff
] = '\0';

5981  
SQLITE_CANTOPEN_BKPT
;

5983 
	`sqlôe3_¢¥ötf
(
nOut
-
iOff
, &
zOut
[iOff], "%s", 
zP©h
);

5984  
SQLITE_OK
;

5985 
	}
}

5996 
	$unixFuŒP©h«me
(

5997 
sqlôe3_vfs
 *
pVfs
,

5998 c⁄° *
zP©h
,

5999 
nOut
,

6000 *
zOut


6002 #i‡!
	`deföed
(
HAVE_READLINK
Ë|| !deföed(
HAVE_LSTAT
)

6003  
	`mkFuŒP©h«me
(
zP©h
, 
zOut
, 
nOut
);

6005 
rc
 = 
SQLITE_OK
;

6006 
nByã
;

6007 
nLök
 = 1;

6008 c⁄° *
zIn
 = 
zP©h
;

6009 *
zDñ
 = 0;

6011 
	`as£π
–
pVfs
->
mxP©h«me
==
MAX_PATHNAME
 );

6012 
	`UNUSED_PARAMETER
(
pVfs
);

6019 
	`SimuœãIOEº‹
– 
SQLITE_ERROR
 );

6025 
bLök
 = 0;

6026 
°©
 
buf
;

6027 if–
	`osL°©
(
zIn
, &
buf
)!=0 ){

6028 if–
î∫o
!=
ENOENT
 ){

6029 
rc
 = 
	`unixLogEº‹
(
SQLITE_CANTOPEN_BKPT
, "l°©", 
zIn
);

6032 
bLök
 = 
	`S_ISLNK
(
buf
.
°_mode
);

6035 if–
bLök
 ){

6036 if–
zDñ
==0 ){

6037 
zDñ
 = 
	`sqlôe3_mÆloc
(
nOut
);

6038 if–
zDñ
==0 ) 
rc
 = 
SQLITE_NOMEM_BKPT
;

6039 }if–++
nLök
>
SQLITE_MAX_SYMLINKS
 ){

6040 
rc
 = 
SQLITE_CANTOPEN_BKPT
;

6043 if–
rc
==
SQLITE_OK
 ){

6044 
nByã
 = 
	`osRódlök
(
zIn
, 
zDñ
, 
nOut
-1);

6045 if–
nByã
<0 ){

6046 
rc
 = 
	`unixLogEº‹
(
SQLITE_CANTOPEN_BKPT
, "ªadlök", 
zIn
);

6048 if–
zDñ
[0]!='/' ){

6049 
n
;

6050 
n
 = 
	`sqlôe3SåÀn30
(
zIn
);Ç>0 && zIn[n-1]!='/';Ç--);

6051 if–
nByã
+
n
+1>
nOut
 ){

6052 
rc
 = 
SQLITE_CANTOPEN_BKPT
;

6054 
	`memmove
(&
zDñ
[
n
], zDñ, 
nByã
+1);

6055 
	`mem˝y
(
zDñ
, 
zIn
, 
n
);

6056 
nByã
 +
n
;

6059 
zDñ
[
nByã
] = '\0';

6063 
zIn
 = 
zDñ
;

6066 
	`as£π
–
rc
!=
SQLITE_OK
 || 
zIn
!=
zOut
 || zIn[0]=='/' );

6067 if–
rc
==
SQLITE_OK
 && 
zIn
!=
zOut
 ){

6068 
rc
 = 
	`mkFuŒP©h«me
(
zIn
, 
zOut
, 
nOut
);

6070 if–
bLök
==0 ) ;

6071 
zIn
 = 
zOut
;

6072 } 
rc
==
SQLITE_OK
 );

6074 
	`sqlôe3_‰ì
(
zDñ
);

6075  
rc
;

6077 
	}
}

6080 #i‚de‡
SQLITE_OMIT_LOAD_EXTENSION


6085 
	~<dlf˙.h
>

6086 *
	$unixDlO≥n
(
sqlôe3_vfs
 *
NŸU£d
, c⁄° *
zFûíame
){

6087 
	`UNUSED_PARAMETER
(
NŸU£d
);

6088  
	`dl›í
(
zFûíame
, 
RTLD_NOW
 | 
RTLD_GLOBAL
);

6089 
	}
}

6098 
	$unixDlEº‹
(
sqlôe3_vfs
 *
NŸU£d
, 
nBuf
, *
zBufOut
){

6099 c⁄° *
zEº
;

6100 
	`UNUSED_PARAMETER
(
NŸU£d
);

6101 
	`unixE¡îMuãx
();

6102 
zEº
 = 
	`dÀº‹
();

6103 if–
zEº
 ){

6104 
	`sqlôe3_¢¥ötf
(
nBuf
, 
zBufOut
, "%s", 
zEº
);

6106 
	`unixLóveMuãx
();

6107 
	}
}

6108 (*
	$unixDlSym
(
sqlôe3_vfs
 *
NŸU£d
, *
p
, c⁄° *
zSym
))(){

6126 (*(*
x
)(*,const *))();

6127 
	`UNUSED_PARAMETER
(
NŸU£d
);

6128 
x
 = ((*(*)(*,c⁄° *))())
dlsym
;

6129  (*
x
)(
p
, 
zSym
);

6130 
	}
}

6131 
	$unixDlClo£
(
sqlôe3_vfs
 *
NŸU£d
, *
pH™dÀ
){

6132 
	`UNUSED_PARAMETER
(
NŸU£d
);

6133 
	`dl˛o£
(
pH™dÀ
);

6134 
	}
}

6136 
	#unixDlO≥n
 0

	)

6137 
	#unixDlEº‹
 0

	)

6138 
	#unixDlSym
 0

	)

6139 
	#unixDlClo£
 0

	)

6145 
	$unixR™dom√ss
(
sqlôe3_vfs
 *
NŸU£d
, 
nBuf
, *
zBuf
){

6146 
	`UNUSED_PARAMETER
(
NŸU£d
);

6147 
	`as£π
((
size_t
)
nBuf
>=((
time_t
)+()));

6161 
	`mem£t
(
zBuf
, 0, 
nBuf
);

6162 
øndom√ssPid
 = 
	`osGëpid
(0);

6163 #i‡!
	`deföed
(
SQLITE_TEST
Ë&& !deföed(
SQLITE_OMIT_RANDOMNESS
)

6165 
fd
, 
gŸ
;

6166 
fd
 = 
	`robu°_›í
("/dev/uøndom", 
O_RDONLY
, 0);

6167 if–
fd
<0 ){

6168 
time_t
 
t
;

6169 
	`time
(&
t
);

6170 
	`mem˝y
(
zBuf
, &
t
, (t));

6171 
	`mem˝y
(&
zBuf
[(
t
)], &
øndom√ssPid
, (randomnessPid));

6172 
	`as£π
–(
t
)+(
øndom√ssPid
)<=(
size_t
)
nBuf
 );

6173 
nBuf
 = (
t
Ë+ (
øndom√ssPid
);

6175 do{ 
gŸ
 = 
	`osRód
(
fd
, 
zBuf
, 
nBuf
); } gŸ<0 && 
î∫o
==
EINTR
 );

6176 
	`robu°_˛o£
(0, 
fd
, 
__LINE__
);

6180  
nBuf
;

6181 
	}
}

6192 
	$unixSÀï
(
sqlôe3_vfs
 *
NŸU£d
, 
mi¸o£c⁄ds
){

6193 #i‡
OS_VXWORKS


6194 
time•ec
 
•
;

6196 
•
.
tv_£c
 = 
mi¸o£c⁄ds
 / 1000000;

6197 
•
.
tv_n£c
 = (
mi¸o£c⁄ds
 % 1000000) * 1000;

6198 
	`«no¶ìp
(&
•
, 
NULL
);

6199 
	`UNUSED_PARAMETER
(
NŸU£d
);

6200  
mi¸o£c⁄ds
;

6201 #ñi‡
	`deföed
(
HAVE_USLEEP
) && HAVE_USLEEP

6202 
	`u¶ìp
(
mi¸o£c⁄ds
);

6203 
	`UNUSED_PARAMETER
(
NŸU£d
);

6204  
mi¸o£c⁄ds
;

6206 
£c⁄ds
 = (
mi¸o£c⁄ds
+999999)/1000000;

6207 
	`¶ìp
(
£c⁄ds
);

6208 
	`UNUSED_PARAMETER
(
NŸU£d
);

6209  
£c⁄ds
*1000000;

6211 
	}
}

6218 #ifde‡
SQLITE_TEST


6219 
	gsqlôe3_cuºít_time
 = 0;

6232 
	$unixCuºítTimeI¡64
(
sqlôe3_vfs
 *
NŸU£d
, 
sqlôe3_öt64
 *
piNow
){

6233 c⁄° 
sqlôe3_öt64
 
unixEpoch
 = 24405875*(sqlite3_int64)8640000;

6234 
rc
 = 
SQLITE_OK
;

6235 #i‡
	`deföed
(
NO_GETTOD
)

6236 
time_t
 
t
;

6237 
	`time
(&
t
);

6238 *
piNow
 = ((
sqlôe3_öt64
)
t
)*1000 + 
unixEpoch
;

6239 #ñi‡
OS_VXWORKS


6240 
time•ec
 
sNow
;

6241 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
sNow
);

6242 *
piNow
 = 
unixEpoch
 + 1000*(
sqlôe3_öt64
)
sNow
.
tv_£c
 + sNow.
tv_n£c
/1000000;

6244 
timevÆ
 
sNow
;

6245 ()
	`gëtimeofday
(&
sNow
, 0);

6246 *
piNow
 = 
unixEpoch
 + 1000*(
sqlôe3_öt64
)
sNow
.
tv_£c
 + sNow.
tv_u£c
/1000;

6249 #ifde‡
SQLITE_TEST


6250 if–
sqlôe3_cuºít_time
 ){

6251 *
piNow
 = 1000*(
sqlôe3_öt64
)
sqlôe3_cuºít_time
 + 
unixEpoch
;

6254 
	`UNUSED_PARAMETER
(
NŸU£d
);

6255  
rc
;

6256 
	}
}

6258 #i‚de‡
SQLITE_OMIT_DEPRECATED


6264 
	$unixCuºítTime
(
sqlôe3_vfs
 *
NŸU£d
, *
¥Now
){

6265 
sqlôe3_öt64
 
i
 = 0;

6266 
rc
;

6267 
	`UNUSED_PARAMETER
(
NŸU£d
);

6268 
rc
 = 
	`unixCuºítTimeI¡64
(0, &
i
);

6269 *
¥Now
 = 
i
/86400000.0;

6270  
rc
;

6271 
	}
}

6273 
	#unixCuºítTime
 0

	)

6282 
	$unixGëLa°Eº‹
(
sqlôe3_vfs
 *
NŸU£d
, 
NŸU£d2
, *
NŸU£d3
){

6283 
	`UNUSED_PARAMETER
(
NŸU£d
);

6284 
	`UNUSED_PARAMETER
(
NŸU£d2
);

6285 
	`UNUSED_PARAMETER
(
NŸU£d3
);

6286  
î∫o
;

6287 
	}
}

6447 #i‡
deföed
(
__APPLE__
Ë&& 
SQLITE_ENABLE_LOCKING_STYLE


6453 
¥oxyLockögC⁄ãxt
 
	t¥oxyLockögC⁄ãxt
;

6454 
	s¥oxyLockögC⁄ãxt
 {

6455 
unixFûe
 *
	mc⁄chFûe
;

6456 *
	mc⁄chFûeP©h
;

6457 
unixFûe
 *
	mlockProxy
;

6458 *
	mlockProxyP©h
;

6459 *
	mdbP©h
;

6460 
	mc⁄chHñd
;

6461 
	mnFaûs
;

6462 *
	mﬁdLockögC⁄ãxt
;

6463 
sqlôe3_io_mëhods
 c⁄° *
	mpOldMëhod
;

6471 
	$¥oxyGëLockP©h
(c⁄° *
dbP©h
, *
lP©h
, 
size_t
 
maxLí
){

6472 
Àn
;

6473 
dbLí
;

6474 
i
;

6476 #ifde‡
LOCKPROXYDIR


6477 
Àn
 = 
	`°æ˝y
(
lP©h
, 
LOCKPROXYDIR
, 
maxLí
);

6479 #ifde‡
_CS_DARWIN_USER_TEMP_DIR


6481 if–!
	`c⁄f°r
(
_CS_DARWIN_USER_TEMP_DIR
, 
lP©h
, 
maxLí
) ){

6482 
	`OSTRACE
(("GETLOCKPATH failed %sÉrrno=%dÖid=%d\n",

6483 
lP©h
, 
î∫o
, 
	`osGëpid
(0)));

6484  
SQLITE_IOERR_LOCK
;

6486 
Àn
 = 
	`°æˇt
(
lP©h
, "sqlôïlocks", 
maxLí
);

6489 
Àn
 = 
	`°æ˝y
(
lP©h
, "/tmp/", 
maxLí
);

6493 if–
lP©h
[
Àn
-1]!='/' ){

6494 
Àn
 = 
	`°æˇt
(
lP©h
, "/", 
maxLí
);

6498 
dbLí
 = ()
	`°æí
(
dbP©h
);

6499  
i
=0; i<
dbLí
 && (i+
Àn
+7)<()
maxLí
; i++){

6500 
c
 = 
dbP©h
[
i
];

6501 
lP©h
[
i
+
Àn
] = (
c
=='/')?'_':c;

6503 
lP©h
[
i
+
Àn
]='\0';

6504 
	`°æˇt
(
lP©h
, ":auto:", 
maxLí
);

6505 
	`OSTRACE
(("GETLOCKPATHÖroxyÜockÖ©h=%†pid=%d\n", 
lP©h
, 
	`osGëpid
(0)));

6506  
SQLITE_OK
;

6507 
	}
}

6512 
	$¥oxyCª©eLockP©h
(c⁄° *
lockP©h
){

6513 
i
, 
Àn
;

6514 
buf
[
MAXPATHLEN
];

6515 
°¨t
 = 0;

6517 
	`as£π
(
lockP©h
!=
NULL
);

6519 
Àn
 = ()
	`°æí
(
lockP©h
);

6520 
buf
[0] = 
lockP©h
[0];

6521  
i
=1; i<
Àn
; i++ ){

6522 if–
lockP©h
[
i
] ='/' && (ò- 
°¨t
 > 0) ){

6524 if–
i
-
°¨t
>2 || (i-°¨t==1 && 
buf
[start] != '.' && buf[start] != '/')

6525 || (
i
-
°¨t
==2 && 
buf
[start] != '.' && buf[start+1] != '.') ){

6526 
buf
[
i
]='\0';

6527 if–
	`osMkdú
(
buf
, 
SQLITE_DEFAULT_PROXYDIR_PERMISSIONS
) ){

6528 
îr
=
î∫o
;

6529 if–
îr
!=
EEXIST
 ) {

6530 
	`OSTRACE
(("CREATELOCKPATH FAILED creating %s, "

6532 
buf
, 
	`°ªº‹
(
îr
), 
lockP©h
, 
	`osGëpid
(0)));

6533  
îr
;

6537 
°¨t
=
i
+1;

6539 
buf
[
i
] = 
lockP©h
[i];

6541 
	`OSTRACE
(("CREATELOCKPATHÖroxyÜockÖ©h=%†pid=%d\n",
lockP©h
,
	`osGëpid
(0)));

6543 
	}
}

6552 
	$¥oxyCª©eUnixFûe
(

6553 c⁄° *
∑th
,

6554 
unixFûe
 **
µFûe
,

6555 
i¶ockfûe


6557 
fd
 = -1;

6558 
unixFûe
 *
pNew
;

6559 
rc
 = 
SQLITE_OK
;

6560 
›íFœgs
 = 
O_RDWR
 | 
O_CREAT
;

6561 
sqlôe3_vfs
 
dummyVfs
;

6562 
ãºno
 = 0;

6563 
UnixUnu£dFd
 *
pUnu£d
 = 
NULL
;

6571 
pUnu£d
 = 
	`födReußbÀFd
(
∑th
, 
›íFœgs
);

6572 if–
pUnu£d
 ){

6573 
fd
 = 
pUnu£d
->fd;

6575 
pUnu£d
 = 
	`sqlôe3_mÆloc64
((*pUnused));

6576 if–!
pUnu£d
 ){

6577  
SQLITE_NOMEM_BKPT
;

6580 if–
fd
<0 ){

6581 
fd
 = 
	`robu°_›í
(
∑th
, 
›íFœgs
, 0);

6582 
ãºno
 = 
î∫o
;

6583 if–
fd
<0 && 
î∫o
==
ENOENT
 && 
i¶ockfûe
 ){

6584 if–
	`¥oxyCª©eLockP©h
(
∑th
Ë=
SQLITE_OK
 ){

6585 
fd
 = 
	`robu°_›í
(
∑th
, 
›íFœgs
, 0);

6589 if–
fd
<0 ){

6590 
›íFœgs
 = 
O_RDONLY
;

6591 
fd
 = 
	`robu°_›í
(
∑th
, 
›íFœgs
, 0);

6592 
ãºno
 = 
î∫o
;

6594 if–
fd
<0 ){

6595 if–
i¶ockfûe
 ){

6596  
SQLITE_BUSY
;

6598 
ãºno
) {

6599 
EACCES
:

6600  
SQLITE_PERM
;

6601 
EIO
:

6602  
SQLITE_IOERR_LOCK
;

6604  
SQLITE_CANTOPEN_BKPT
;

6608 
pNew
 = (
unixFûe
 *)
	`sqlôe3_mÆloc64
((*pNew));

6609 if–
pNew
==
NULL
 ){

6610 
rc
 = 
SQLITE_NOMEM_BKPT
;

6611 
íd_¸óã_¥oxy
;

6613 
	`mem£t
(
pNew
, 0, (
unixFûe
));

6614 
pNew
->
›íFœgs
 = openFlags;

6615 
	`mem£t
(&
dummyVfs
, 0, (dummyVfs));

6616 
dummyVfs
.
pAµD©a
 = (*)&
autﬁockIoFödî
;

6617 
dummyVfs
.
zName
 = "dummy";

6618 
pUnu£d
->
fd
 = fd;

6619 
pUnu£d
->
Êags
 = 
›íFœgs
;

6620 
pNew
->
pUnu£d
 =ÖUnused;

6622 
rc
 = 
	`fûlInUnixFûe
(&
dummyVfs
, 
fd
, (
sqlôe3_fûe
*)
pNew
, 
∑th
, 0);

6623 if–
rc
==
SQLITE_OK
 ){

6624 *
µFûe
 = 
pNew
;

6625  
SQLITE_OK
;

6627 
íd_¸óã_¥oxy
:

6628 
	`robu°_˛o£
(
pNew
, 
fd
, 
__LINE__
);

6629 
	`sqlôe3_‰ì
(
pNew
);

6630 
	`sqlôe3_‰ì
(
pUnu£d
);

6631  
rc
;

6632 
	}
}

6634 #ifde‡
SQLITE_TEST


6636 
	gsqlôe3_ho°id_num
 = 0;

6639 
	#PROXY_HOSTIDLEN
 16

	)

6641 #ifde‡
HAVE_GETHOSTUUID


6643 
gëho°uuid
(
uuid_t
 
id
, c⁄° 
time•ec
 *
waô
);

6649 
	$¥oxyGëHo°ID
(*
pHo°ID
, *
pEº‹
){

6650 
	`as£π
(
PROXY_HOSTIDLEN
 =(
uuid_t
));

6651 
	`mem£t
(
pHo°ID
, 0, 
PROXY_HOSTIDLEN
);

6652 #ifde‡
HAVE_GETHOSTUUID


6654 
time•ec
 
timeout
 = {1, 0};

6655 if–
	`gëho°uuid
(
pHo°ID
, &
timeout
) ){

6656 
îr
 = 
î∫o
;

6657 if–
pEº‹
 ){

6658 *
pEº‹
 = 
îr
;

6660  
SQLITE_IOERR
;

6664 
	`UNUSED_PARAMETER
(
pEº‹
);

6666 #ifde‡
SQLITE_TEST


6668 if–
sqlôe3_ho°id_num
 != 0){

6669 
pHo°ID
[0] = ()’Ho°ID[0] + ()(
sqlôe3_ho°id_num
 & 0xFF));

6673  
SQLITE_OK
;

6674 
	}
}

6678 
	#PROXY_CONCHVERSION
 2

	)

6679 
	#PROXY_HEADERLEN
 1

	)

6680 
	#PROXY_PATHINDEX
 (
PROXY_HEADERLEN
+
PROXY_HOSTIDLEN
)

	)

6681 
	#PROXY_MAXCONCHLEN
 (
PROXY_HEADERLEN
+
PROXY_HOSTIDLEN
+
MAXPATHLEN
)

	)

6689 
	$¥oxyBªakC⁄chLock
(
unixFûe
 *
pFûe
, 
uuid_t
 
myHo°ID
){

6690 
¥oxyLockögC⁄ãxt
 *
pCtx
 = (¥oxyLockögC⁄ãxà*)
pFûe
->
lockögC⁄ãxt
;

6691 
unixFûe
 *
c⁄chFûe
 = 
pCtx
->conchFile;

6692 
tP©h
[
MAXPATHLEN
];

6693 
buf
[
PROXY_MAXCONCHLEN
];

6694 *
cP©h
 = 
pCtx
->
c⁄chFûeP©h
;

6695 
size_t
 
ªadLí
 = 0;

6696 
size_t
 
∑thLí
 = 0;

6697 
îrmsg
[64] = "";

6698 
fd
 = -1;

6699 
rc
 = -1;

6700 
	`UNUSED_PARAMETER
(
myHo°ID
);

6703 
∑thLí
 = 
	`°æ˝y
(
tP©h
, 
cP©h
, 
MAXPATHLEN
);

6704 if–
∑thLí
>
MAXPATHLEN
 ||ÖathLen<6 ||

6705 (
	`°æ˝y
(&
tP©h
[
∑thLí
-5], "break", 6) != 5) ){

6706 
	`sqlôe3_¢¥ötf
((
îrmsg
),îrmsg,"∑thÉº‹ (À¿%d)",()
∑thLí
);

6707 
íd_bªaklock
;

6710 
ªadLí
 = 
	`osPªad
(
c⁄chFûe
->
h
, 
buf
, 
PROXY_MAXCONCHLEN
, 0);

6711 if–
ªadLí
<
PROXY_PATHINDEX
 ){

6712 
	`sqlôe3_¢¥ötf
((
îrmsg
),îrmsg,"ªadÉº‹ (À¿%d)",()
ªadLí
);

6713 
íd_bªaklock
;

6716 
fd
 = 
	`robu°_›í
(
tP©h
, (
O_RDWR
|
O_CREAT
|
O_EXCL
), 0);

6717 if–
fd
<0 ){

6718 
	`sqlôe3_¢¥ötf
((
îrmsg
),Éºmsg, "¸óã faûed (%d)", 
î∫o
);

6719 
íd_bªaklock
;

6721 if–
	`osPwrôe
(
fd
, 
buf
, 
ªadLí
, 0Ë!(
ssize_t
)readLen ){

6722 
	`sqlôe3_¢¥ötf
((
îrmsg
),Éºmsg, "wrôêÁûed (%d)", 
î∫o
);

6723 
íd_bªaklock
;

6725 if–
	`ª«me
(
tP©h
, 
cP©h
) ){

6726 
	`sqlôe3_¢¥ötf
((
îrmsg
),Éºmsg, "ª«mêÁûed (%d)", 
î∫o
);

6727 
íd_bªaklock
;

6729 
rc
 = 0;

6730 
	`Ârötf
(
°dîr
, "brokê°Æêlock o¿%s\n", 
cP©h
);

6731 
	`robu°_˛o£
(
pFûe
, 
c⁄chFûe
->
h
, 
__LINE__
);

6732 
c⁄chFûe
->
h
 = 
fd
;

6733 
c⁄chFûe
->
›íFœgs
 = 
O_RDWR
 | 
O_CREAT
;

6735 
íd_bªaklock
:

6736 if–
rc
 ){

6737 if–
fd
>=0 ){

6738 
	`osU∆ök
(
tP©h
);

6739 
	`robu°_˛o£
(
pFûe
, 
fd
, 
__LINE__
);

6741 
	`Ârötf
(
°dîr
, "ÁûedÅÿbªak sèÀÜock o¿%s, %s\n", 
cP©h
, 
îrmsg
);

6743  
rc
;

6744 
	}
}

6749 
	$¥oxyC⁄chLock
(
unixFûe
 *
pFûe
, 
uuid_t
 
myHo°ID
, 
lockTy≥
){

6750 
¥oxyLockögC⁄ãxt
 *
pCtx
 = (¥oxyLockögC⁄ãxà*)
pFûe
->
lockögC⁄ãxt
;

6751 
unixFûe
 *
c⁄chFûe
 = 
pCtx
->conchFile;

6752 
rc
 = 
SQLITE_OK
;

6753 
nTrõs
 = 0;

6754 
time•ec
 
c⁄chModTime
;

6756 
	`mem£t
(&
c⁄chModTime
, 0, (conchModTime));

6758 
rc
 = 
c⁄chFûe
->
pMëhod
->
	`xLock
((
sqlôe3_fûe
*)c⁄chFûe, 
lockTy≥
);

6759 
nTrõs
 ++;

6760 if–
rc
==
SQLITE_BUSY
 ){

6767 
°©
 
buf
;

6768 if–
	`osF°©
(
c⁄chFûe
->
h
, &
buf
) ){

6769 
	`°‹eLa°Eºno
(
pFûe
, 
î∫o
);

6770  
SQLITE_IOERR_LOCK
;

6773 if–
nTrõs
==1 ){

6774 
c⁄chModTime
 = 
buf
.
°_mtime•ec
;

6775 
	`u¶ìp
(500000);

6779 
	`as£π
–
nTrõs
>1 );

6780 if–
c⁄chModTime
.
tv_£c
 !
buf
.
°_mtime•ec
.tv_sec ||

6781 
c⁄chModTime
.
tv_n£c
 !
buf
.
°_mtime•ec
.tv_nsec ){

6782  
SQLITE_BUSY
;

6785 if–
nTrõs
==2 ){

6786 
tBuf
[
PROXY_MAXCONCHLEN
];

6787 
Àn
 = 
	`osPªad
(
c⁄chFûe
->
h
, 
tBuf
, 
PROXY_MAXCONCHLEN
, 0);

6788 if–
Àn
<0 ){

6789 
	`°‹eLa°Eºno
(
pFûe
, 
î∫o
);

6790  
SQLITE_IOERR_LOCK
;

6792 if–
Àn
>
PROXY_PATHINDEX
 && 
tBuf
[0]==()
PROXY_CONCHVERSION
){

6794 if–0!=
	`memcmp
(&
tBuf
[
PROXY_HEADERLEN
], 
myHo°ID
, 
PROXY_HOSTIDLEN
) ){

6795  
SQLITE_BUSY
;

6799  
SQLITE_BUSY
;

6801 
	`u¶ìp
(10000000);

6805 
	`as£π
–
nTrõs
==3 );

6806 if–0==
	`¥oxyBªakC⁄chLock
(
pFûe
, 
myHo°ID
) ){

6807 
rc
 = 
SQLITE_OK
;

6808 if–
lockTy≥
==
EXCLUSIVE_LOCK
 ){

6809 
rc
 = 
c⁄chFûe
->
pMëhod
->
	`xLock
((
sqlôe3_fûe
*)c⁄chFûe, 
SHARED_LOCK
);

6811 if–!
rc
 ){

6812 
rc
 = 
c⁄chFûe
->
pMëhod
->
	`xLock
((
sqlôe3_fûe
*)c⁄chFûe, 
lockTy≥
);

6816 }  
rc
==
SQLITE_BUSY
 && 
nTrõs
<3 );

6818  
rc
;

6819 
	}
}

6827 
	$¥oxyTakeC⁄ch
(
unixFûe
 *
pFûe
){

6828 
¥oxyLockögC⁄ãxt
 *
pCtx
 = (¥oxyLockögC⁄ãxà*)
pFûe
->
lockögC⁄ãxt
;

6830 if–
pCtx
->
c⁄chHñd
!=0 ){

6831  
SQLITE_OK
;

6833 
unixFûe
 *
c⁄chFûe
 = 
pCtx
->conchFile;

6834 
uuid_t
 
myHo°ID
;

6835 
pEº‹
 = 0;

6836 
ªadBuf
[
PROXY_MAXCONCHLEN
];

6837 
lockP©h
[
MAXPATHLEN
];

6838 *
ãmpLockP©h
 = 
NULL
;

6839 
rc
 = 
SQLITE_OK
;

6840 
¸óãC⁄ch
 = 0;

6841 
ho°IdM©ch
 = 0;

6842 
ªadLí
 = 0;

6843 
åyOldLockP©h
 = 0;

6844 
f‹˚NewLockP©h
 = 0;

6846 
	`OSTRACE
(("TAKECONCH %d f‹ %†pid=%d\n", 
c⁄chFûe
->
h
,

6847 (
pCtx
->
lockProxyP©h
 ?ÖCtx->lockProxyPath : ":auto:"),

6848 
	`osGëpid
(0)));

6850 
rc
 = 
	`¥oxyGëHo°ID
(
myHo°ID
, &
pEº‹
);

6851 if–(
rc
&0xff)==
SQLITE_IOERR
 ){

6852 
	`°‹eLa°Eºno
(
pFûe
, 
pEº‹
);

6853 
íd_èkec⁄ch
;

6855 
rc
 = 
	`¥oxyC⁄chLock
(
pFûe
, 
myHo°ID
, 
SHARED_LOCK
);

6856 if–
rc
!=
SQLITE_OK
 ){

6857 
íd_èkec⁄ch
;

6860 
ªadLí
 = 
	`£ekAndRód
((
unixFûe
*)
c⁄chFûe
, 0, 
ªadBuf
, 
PROXY_MAXCONCHLEN
);

6861 if–
ªadLí
<0 ){

6863 
	`°‹eLa°Eºno
(
pFûe
, 
c⁄chFûe
->
œ°Eºno
);

6864 
rc
 = 
SQLITE_IOERR_READ
;

6865 
íd_èkec⁄ch
;

6866 }if–
ªadLí
<=(
PROXY_HEADERLEN
+
PROXY_HOSTIDLEN
) ||

6867 
ªadBuf
[0]!=()
PROXY_CONCHVERSION
 ){

6871 
¸óãC⁄ch
 = 1;

6879 if–!
¸óãC⁄ch
 && !
f‹˚NewLockP©h
 ){

6880 
ho°IdM©ch
 = !
	`memcmp
(&
ªadBuf
[
PROXY_HEADERLEN
], 
myHo°ID
,

6881 
PROXY_HOSTIDLEN
);

6883 if–!
pCtx
->
lockProxyP©h
 ){

6887 if–
ho°IdM©ch
 ){

6888 
size_t
 
∑thLí
 = (
ªadLí
 - 
PROXY_PATHINDEX
);

6890 if–
∑thLí
>=
MAXPATHLEN
 ){

6891 
∑thLí
=
MAXPATHLEN
-1;

6893 
	`mem˝y
(
lockP©h
, &
ªadBuf
[
PROXY_PATHINDEX
], 
∑thLí
);

6894 
lockP©h
[
∑thLí
] = 0;

6895 
ãmpLockP©h
 = 
lockP©h
;

6896 
åyOldLockP©h
 = 1;

6898 
íd_èkec⁄ch
;

6900 }if–
ho°IdM©ch


6901 && !
	`°∫cmp
(
pCtx
->
lockProxyP©h
, &
ªadBuf
[
PROXY_PATHINDEX
],

6902 
ªadLí
-
PROXY_PATHINDEX
)

6905 
íd_èkec⁄ch
;

6910 if–(
c⁄chFûe
->
›íFœgs
&
O_RDWR
) == 0 ){

6911 
rc
 = 
SQLITE_BUSY
;

6912 
íd_èkec⁄ch
;

6916 if–!
pCtx
->
lockProxyP©h
 ){

6917 
	`¥oxyGëLockP©h
(
pCtx
->
dbP©h
, 
lockP©h
, 
MAXPATHLEN
);

6918 
ãmpLockP©h
 = 
lockP©h
;

6926 
	`futimes
(
c⁄chFûe
->
h
, 
NULL
);

6927 if–
ho°IdM©ch
 && !
¸óãC⁄ch
 ){

6928 if–
c⁄chFûe
->
pInode
 && c⁄chFûe->pInode->
nSh¨ed
>1 ){

6931 
rc
 = 
SQLITE_BUSY
;

6933 
rc
 = 
	`¥oxyC⁄chLock
(
pFûe
, 
myHo°ID
, 
EXCLUSIVE_LOCK
);

6936 
rc
 = 
	`¥oxyC⁄chLock
(
pFûe
, 
myHo°ID
, 
EXCLUSIVE_LOCK
);

6938 if–
rc
==
SQLITE_OK
 ){

6939 
wrôeBuf„r
[
PROXY_MAXCONCHLEN
];

6940 
wrôeSize
 = 0;

6942 
wrôeBuf„r
[0] = ()
PROXY_CONCHVERSION
;

6943 
	`mem˝y
(&
wrôeBuf„r
[
PROXY_HEADERLEN
], 
myHo°ID
, 
PROXY_HOSTIDLEN
);

6944 if–
pCtx
->
lockProxyP©h
!=
NULL
 ){

6945 
	`°æ˝y
(&
wrôeBuf„r
[
PROXY_PATHINDEX
], 
pCtx
->
lockProxyP©h
,

6946 
MAXPATHLEN
);

6948 
	`°æ˝y
(&
wrôeBuf„r
[
PROXY_PATHINDEX
], 
ãmpLockP©h
, 
MAXPATHLEN
);

6950 
wrôeSize
 = 
PROXY_PATHINDEX
 + 
	`°æí
(&
wrôeBuf„r
[PROXY_PATHINDEX]);

6951 
	`robu°_·runˇã
(
c⁄chFûe
->
h
, 
wrôeSize
);

6952 
rc
 = 
	`unixWrôe
((
sqlôe3_fûe
 *)
c⁄chFûe
, 
wrôeBuf„r
, 
wrôeSize
, 0);

6953 
	`fuŒ_fsync
(
c⁄chFûe
->
h
,0,0);

6957 if–
rc
==
SQLITE_OK
 && 
¸óãC⁄ch
 ){

6958 
°©
 
buf
;

6959 
îr
 = 
	`osF°©
(
pFûe
->
h
, &
buf
);

6960 if–
îr
==0 ){

6961 
mode_t
 
cmode
 = 
buf
.
°_mode
&(
S_IRUSR
|
S_IWUSR
 | 
S_IRGRP
|
S_IWGRP
 |

6962 
S_IROTH
|
S_IWOTH
);

6964 #i‚de‡
SQLITE_PROXY_DEBUG


6965 
	`osFchmod
(
c⁄chFûe
->
h
, 
cmode
);

6968 
rc
 = 
	`osFchmod
(
c⁄chFûe
->
h
, 
cmode
);

6969 } 
rc
==(-1Ë&& 
î∫o
==
EINTR
 );

6970 if–
rc
!=0 ){

6971 
code
 = 
î∫o
;

6972 
	`Ârötf
(
°dîr
, "fchmod %o FAILED with %d %s\n",

6973 
cmode
, 
code
, 
	`°ªº‹
(code));

6975 
	`Ârötf
(
°dîr
, "fchmod %ÿSUCCEDED\n",
cmode
);

6978 
code
 = 
î∫o
;

6979 
	`Ârötf
(
°dîr
, "STAT FAILED[%d] with %d %s\n",

6980 
îr
, 
code
, 
	`°ªº‹
(code));

6985 
c⁄chFûe
->
pMëhod
->
	`xU∆ock
((
sqlôe3_fûe
*)c⁄chFûe, 
SHARED_LOCK
);

6987 
íd_èkec⁄ch
:

6988 
	`OSTRACE
(("TRANSPROXY: CLOSE %d\n", 
pFûe
->
h
));

6989 if–
rc
==
SQLITE_OK
 && 
pFûe
->
›íFœgs
 ){

6990 
fd
;

6991 if–
pFûe
->
h
>=0 ){

6992 
	`robu°_˛o£
(
pFûe
,ÖFûe->
h
, 
__LINE__
);

6994 
pFûe
->
h
 = -1;

6995 
fd
 = 
	`robu°_›í
(
pCtx
->
dbP©h
, 
pFûe
->
›íFœgs
, 0);

6996 
	`OSTRACE
(("TRANSPROXY: OPEN %d\n", 
fd
));

6997 if–
fd
>=0 ){

6998 
pFûe
->
h
 = 
fd
;

7000 
rc
=
SQLITE_CANTOPEN_BKPT
;

7004 if–
rc
==
SQLITE_OK
 && !
pCtx
->
lockProxy
 ){

7005 *
∑th
 = 
ãmpLockP©h
 ?ÅempLockP©h : 
pCtx
->
lockProxyP©h
;

7006 
rc
 = 
	`¥oxyCª©eUnixFûe
(
∑th
, &
pCtx
->
lockProxy
, 1);

7007 if–
rc
!=
SQLITE_OK
 &&Ñc!=
SQLITE_NOMEM
 && 
åyOldLockP©h
 ){

7011 
f‹˚NewLockP©h
 = 1;

7012 
åyOldLockP©h
 = 0;

7016 if–
rc
==
SQLITE_OK
 ){

7020 if–
ãmpLockP©h
 ){

7021 
pCtx
->
lockProxyP©h
 = 
	`sqlôe3DbSåDup
(0, 
ãmpLockP©h
);

7022 if–!
pCtx
->
lockProxyP©h
 ){

7023 
rc
 = 
SQLITE_NOMEM_BKPT
;

7027 if–
rc
==
SQLITE_OK
 ){

7028 
pCtx
->
c⁄chHñd
 = 1;

7030 if–
pCtx
->
lockProxy
->
pMëhod
 =&
aÂIoMëhods
 ){

7031 
aÂLockögC⁄ãxt
 *
aÂCtx
;

7032 
aÂCtx
 = (
aÂLockögC⁄ãxt
 *)
pCtx
->
lockProxy
->
lockögC⁄ãxt
;

7033 
aÂCtx
->
dbP©h
 = 
pCtx
->
lockProxyP©h
;

7036 
c⁄chFûe
->
pMëhod
->
	`xU∆ock
((
sqlôe3_fûe
*)c⁄chFûe, 
NO_LOCK
);

7038 
	`OSTRACE
(("TAKECONCH %d %s\n", 
c⁄chFûe
->
h
,

7039 
rc
==
SQLITE_OK
?"ok":"failed"));

7040  
rc
;

7044 
	}
}

7049 
	$¥oxyRñó£C⁄ch
(
unixFûe
 *
pFûe
){

7050 
rc
 = 
SQLITE_OK
;

7051 
¥oxyLockögC⁄ãxt
 *
pCtx
;

7052 
unixFûe
 *
c⁄chFûe
;

7054 
pCtx
 = (
¥oxyLockögC⁄ãxt
 *)
pFûe
->
lockögC⁄ãxt
;

7055 
c⁄chFûe
 = 
pCtx
->conchFile;

7056 
	`OSTRACE
(("RELEASECONCH %d f‹ %†pid=%d\n", 
c⁄chFûe
->
h
,

7057 (
pCtx
->
lockProxyP©h
 ?ÖCtx->lockProxyPath : ":auto:"),

7058 
	`osGëpid
(0)));

7059 if–
pCtx
->
c⁄chHñd
>0 ){

7060 
rc
 = 
c⁄chFûe
->
pMëhod
->
	`xU∆ock
((
sqlôe3_fûe
*)c⁄chFûe, 
NO_LOCK
);

7062 
pCtx
->
c⁄chHñd
 = 0;

7063 
	`OSTRACE
(("RELEASECONCH %d %s\n", 
c⁄chFûe
->
h
,

7064 (
rc
==
SQLITE_OK
 ? "ok" : "failed")));

7065  
rc
;

7066 
	}
}

7079 
	$¥oxyCª©eC⁄chP©h«me
(*
dbP©h
, **
pC⁄chP©h
){

7080 
i
;

7081 
Àn
 = ()
	`°æí
(
dbP©h
);

7082 *
c⁄chP©h
;

7086 *
pC⁄chP©h
 = 
c⁄chP©h
 = (*)
	`sqlôe3_mÆloc64
(
Àn
 + 8);

7087 if–
c⁄chP©h
==0 ){

7088  
SQLITE_NOMEM_BKPT
;

7090 
	`mem˝y
(
c⁄chP©h
, 
dbP©h
, 
Àn
+1);

7093  
i
=(
Àn
-1); i>=0; i-- ){

7094 if–
c⁄chP©h
[
i
]=='/' ){

7095 
i
++;

7099 
c⁄chP©h
[
i
]='.';

7100  
i
<
Àn
 ){

7101 
c⁄chP©h
[
i
+1]=
dbP©h
[i];

7102 
i
++;

7106 
	`mem˝y
(&
c⁄chP©h
[
i
+1], "-conch", 7);

7107 
	`as£π
–()
	`°æí
(
c⁄chP©h
Ë=
Àn
+7 );

7109  
SQLITE_OK
;

7110 
	}
}

7116 
	$swôchLockProxyP©h
(
unixFûe
 *
pFûe
, c⁄° *
∑th
) {

7117 
¥oxyLockögC⁄ãxt
 *
pCtx
 = (¥oxyLockögC⁄ãxt*)
pFûe
->
lockögC⁄ãxt
;

7118 *
ﬁdP©h
 = 
pCtx
->
lockProxyP©h
;

7119 
rc
 = 
SQLITE_OK
;

7121 if–
pFûe
->
eFûeLock
!=
NO_LOCK
 ){

7122  
SQLITE_BUSY
;

7126 if–!
∑th
 ||Ö©h[0]=='\0' || !
	`°rcmp
(path, ":auto:") ||

7127 (
ﬁdP©h
 && !
	`°∫cmp
(ﬁdP©h, 
∑th
, 
MAXPATHLEN
)) ){

7128  
SQLITE_OK
;

7130 
unixFûe
 *
lockProxy
 = 
pCtx
->lockProxy;

7131 
pCtx
->
lockProxy
=
NULL
;

7132 
pCtx
->
c⁄chHñd
 = 0;

7133 if–
lockProxy
!=
NULL
 ){

7134 
rc
=
lockProxy
->
pMëhod
->
	`xClo£
((
sqlôe3_fûe
 *)lockProxy);

7135 if–
rc
 ) Ñc;

7136 
	`sqlôe3_‰ì
(
lockProxy
);

7138 
	`sqlôe3_‰ì
(
ﬁdP©h
);

7139 
pCtx
->
lockProxyP©h
 = 
	`sqlôe3DbSåDup
(0, 
∑th
);

7142  
rc
;

7143 
	}
}

7152 
	$¥oxyGëDbP©hF‹UnixFûe
(
unixFûe
 *
pFûe
, *
dbP©h
){

7153 #i‡
	`deföed
(
__APPLE__
)

7154 if–
pFûe
->
pMëhod
 =&
aÂIoMëhods
 ){

7157 
	`as£π
–()
	`°æí
((*)
pFûe
->
lockögC⁄ãxt
)<=
MAXPATHLEN
 );

7158 
	`°æ˝y
(
dbP©h
, ((
aÂLockögC⁄ãxt
 *)
pFûe
->
lockögC⁄ãxt
)->dbPath,

7159 
MAXPATHLEN
);

7162 if–
pFûe
->
pMëhod
 =&
dŸlockIoMëhods
 ){

7165 
Àn
 = 
	`°æí
((*)
pFûe
->
lockögC⁄ãxt
Ë- såÀn(
DOTLOCK_SUFFIX
);

7166 
	`mem˝y
(
dbP©h
, (*)
pFûe
->
lockögC⁄ãxt
, 
Àn
 + 1);

7169 
	`as£π
–
	`°æí
((*)
pFûe
->
lockögC⁄ãxt
)<=
MAXPATHLEN
 );

7170 
	`°æ˝y
(
dbP©h
, (*)
pFûe
->
lockögC⁄ãxt
, 
MAXPATHLEN
);

7172  
SQLITE_OK
;

7173 
	}
}

7183 
	$¥oxyTønsf‹mUnixFûe
(
unixFûe
 *
pFûe
, c⁄° *
∑th
) {

7184 
¥oxyLockögC⁄ãxt
 *
pCtx
;

7185 
dbP©h
[
MAXPATHLEN
+1];

7186 *
lockP©h
=
NULL
;

7187 
rc
 = 
SQLITE_OK
;

7189 if–
pFûe
->
eFûeLock
!=
NO_LOCK
 ){

7190  
SQLITE_BUSY
;

7192 
	`¥oxyGëDbP©hF‹UnixFûe
(
pFûe
, 
dbP©h
);

7193 if–!
∑th
 ||Ö©h[0]=='\0' || !
	`°rcmp
(path, ":auto:") ){

7194 
lockP©h
=
NULL
;

7196 
lockP©h
=(*)
∑th
;

7199 
	`OSTRACE
(("TRANSPROXY %d f‹ %†pid=%d\n", 
pFûe
->
h
,

7200 (
lockP©h
 ?ÜockP©h : ":auto:"), 
	`osGëpid
(0)));

7202 
pCtx
 = 
	`sqlôe3_mÆloc64
( (*pCtx) );

7203 if–
pCtx
==0 ){

7204  
SQLITE_NOMEM_BKPT
;

7206 
	`mem£t
(
pCtx
, 0, (*pCtx));

7208 
rc
 = 
	`¥oxyCª©eC⁄chP©h«me
(
dbP©h
, &
pCtx
->
c⁄chFûeP©h
);

7209 if–
rc
==
SQLITE_OK
 ){

7210 
rc
 = 
	`¥oxyCª©eUnixFûe
(
pCtx
->
c⁄chFûeP©h
, &pCtx->
c⁄chFûe
, 0);

7211 if–
rc
==
SQLITE_CANTOPEN
 && ((
pFûe
->
›íFœgs
&
O_RDWR
) == 0) ){

7217 
°©fs
 
fsInfo
;

7218 
°©
 
c⁄chInfo
;

7219 
goLockÀss
 = 0;

7221 if–
	`osSèt
(
pCtx
->
c⁄chFûeP©h
, &
c⁄chInfo
) == -1 ) {

7222 
îr
 = 
î∫o
;

7223 if–(
îr
==
ENOENT
Ë&& (
	`°©fs
(
dbP©h
, &
fsInfo
) != -1) ){

7224 
goLockÀss
 = (
fsInfo
.
f_Êags
&
MNT_RDONLY
) == MNT_RDONLY;

7227 if–
goLockÀss
 ){

7228 
pCtx
->
c⁄chHñd
 = -1;

7229 
rc
 = 
SQLITE_OK
;

7233 if–
rc
==
SQLITE_OK
 && 
lockP©h
 ){

7234 
pCtx
->
lockProxyP©h
 = 
	`sqlôe3DbSåDup
(0, 
lockP©h
);

7237 if–
rc
==
SQLITE_OK
 ){

7238 
pCtx
->
dbP©h
 = 
	`sqlôe3DbSåDup
(0, dbPath);

7239 if–
pCtx
->
dbP©h
==
NULL
 ){

7240 
rc
 = 
SQLITE_NOMEM_BKPT
;

7243 if–
rc
==
SQLITE_OK
 ){

7247 
pCtx
->
ﬁdLockögC⁄ãxt
 = 
pFûe
->
lockögC⁄ãxt
;

7248 
pFûe
->
lockögC⁄ãxt
 = 
pCtx
;

7249 
pCtx
->
pOldMëhod
 = 
pFûe
->
pMëhod
;

7250 
pFûe
->
pMëhod
 = &
¥oxyIoMëhods
;

7252 if–
pCtx
->
c⁄chFûe
 ){

7253 
pCtx
->
c⁄chFûe
->
pMëhod
->
	`xClo£
((
sqlôe3_fûe
 *)pCtx->conchFile);

7254 
	`sqlôe3_‰ì
(
pCtx
->
c⁄chFûe
);

7256 
	`sqlôe3DbFªe
(0, 
pCtx
->
lockProxyP©h
);

7257 
	`sqlôe3_‰ì
(
pCtx
->
c⁄chFûeP©h
);

7258 
	`sqlôe3_‰ì
(
pCtx
);

7260 
	`OSTRACE
(("TRANSPROXY %d %s\n", 
pFûe
->
h
,

7261 (
rc
==
SQLITE_OK
 ? "ok" : "failed")));

7262  
rc
;

7263 
	}
}

7270 
	$¥oxyFûeC⁄åﬁ
(
sqlôe3_fûe
 *
id
, 
›
, *
pArg
){

7271  
›
 ){

7272 
SQLITE_FCNTL_GET_LOCKPROXYFILE
: {

7273 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

7274 if–
pFûe
->
pMëhod
 =&
¥oxyIoMëhods
 ){

7275 
¥oxyLockögC⁄ãxt
 *
pCtx
 = (¥oxyLockögC⁄ãxt*)
pFûe
->
lockögC⁄ãxt
;

7276 
	`¥oxyTakeC⁄ch
(
pFûe
);

7277 if–
pCtx
->
lockProxyP©h
 ){

7278 *(c⁄° **)
pArg
 = 
pCtx
->
lockProxyP©h
;

7280 *(c⁄° **)
pArg
 = ":auto: (not held)";

7283 *(c⁄° **)
pArg
 = 
NULL
;

7285  
SQLITE_OK
;

7287 
SQLITE_FCNTL_SET_LOCKPROXYFILE
: {

7288 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

7289 
rc
 = 
SQLITE_OK
;

7290 
isProxyStyÀ
 = (
pFûe
->
pMëhod
 =&
¥oxyIoMëhods
);

7291 if–
pArg
==
NULL
 || (const *)pArg==0 ){

7292 if–
isProxyStyÀ
 ){

7297 
rc
 = 
SQLITE_ERROR
 ;

7300 
rc
 = 
SQLITE_OK
;

7303 c⁄° *
¥oxyP©h
 = (c⁄° *)
pArg
;

7304 if–
isProxyStyÀ
 ){

7305 
¥oxyLockögC⁄ãxt
 *
pCtx
 =

7306 (
¥oxyLockögC⁄ãxt
*)
pFûe
->
lockögC⁄ãxt
;

7307 if–!
	`°rcmp
(
pArg
, ":auto:")

7308 || (
pCtx
->
lockProxyP©h
 &&

7309 !
	`°∫cmp
(
pCtx
->
lockProxyP©h
, 
¥oxyP©h
, 
MAXPATHLEN
))

7311 
rc
 = 
SQLITE_OK
;

7313 
rc
 = 
	`swôchLockProxyP©h
(
pFûe
, 
¥oxyP©h
);

7317 
rc
 = 
	`¥oxyTønsf‹mUnixFûe
(
pFûe
, 
¥oxyP©h
);

7320  
rc
;

7323 
	`as£π
( 0 );

7327  
SQLITE_ERROR
;

7328 
	}
}

7343 
	$¥oxyCheckRe£rvedLock
(
sqlôe3_fûe
 *
id
, *
pResOut
) {

7344 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

7345 
rc
 = 
	`¥oxyTakeC⁄ch
(
pFûe
);

7346 if–
rc
==
SQLITE_OK
 ){

7347 
¥oxyLockögC⁄ãxt
 *
pCtx
 = (¥oxyLockögC⁄ãxà*)
pFûe
->
lockögC⁄ãxt
;

7348 if–
pCtx
->
c⁄chHñd
>0 ){

7349 
unixFûe
 *
¥oxy
 = 
pCtx
->
lockProxy
;

7350  
¥oxy
->
pMëhod
->
	`xCheckRe£rvedLock
((
sqlôe3_fûe
*Ìroxy, 
pResOut
);

7352 
pResOut
=0;

7355  
rc
;

7356 
	}
}

7382 
	$¥oxyLock
(
sqlôe3_fûe
 *
id
, 
eFûeLock
) {

7383 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

7384 
rc
 = 
	`¥oxyTakeC⁄ch
(
pFûe
);

7385 if–
rc
==
SQLITE_OK
 ){

7386 
¥oxyLockögC⁄ãxt
 *
pCtx
 = (¥oxyLockögC⁄ãxà*)
pFûe
->
lockögC⁄ãxt
;

7387 if–
pCtx
->
c⁄chHñd
>0 ){

7388 
unixFûe
 *
¥oxy
 = 
pCtx
->
lockProxy
;

7389 
rc
 = 
¥oxy
->
pMëhod
->
	`xLock
((
sqlôe3_fûe
*Ìroxy, 
eFûeLock
);

7390 
pFûe
->
eFûeLock
 = 
¥oxy
->eFileLock;

7395  
rc
;

7396 
	}
}

7406 
	$¥oxyU∆ock
(
sqlôe3_fûe
 *
id
, 
eFûeLock
) {

7407 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

7408 
rc
 = 
	`¥oxyTakeC⁄ch
(
pFûe
);

7409 if–
rc
==
SQLITE_OK
 ){

7410 
¥oxyLockögC⁄ãxt
 *
pCtx
 = (¥oxyLockögC⁄ãxà*)
pFûe
->
lockögC⁄ãxt
;

7411 if–
pCtx
->
c⁄chHñd
>0 ){

7412 
unixFûe
 *
¥oxy
 = 
pCtx
->
lockProxy
;

7413 
rc
 = 
¥oxy
->
pMëhod
->
	`xU∆ock
((
sqlôe3_fûe
*Ìroxy, 
eFûeLock
);

7414 
pFûe
->
eFûeLock
 = 
¥oxy
->eFileLock;

7419  
rc
;

7420 
	}
}

7425 
	$¥oxyClo£
(
sqlôe3_fûe
 *
id
) {

7426 if–
	`ALWAYS
(
id
) ){

7427 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

7428 
¥oxyLockögC⁄ãxt
 *
pCtx
 = (¥oxyLockögC⁄ãxà*)
pFûe
->
lockögC⁄ãxt
;

7429 
unixFûe
 *
lockProxy
 = 
pCtx
->lockProxy;

7430 
unixFûe
 *
c⁄chFûe
 = 
pCtx
->conchFile;

7431 
rc
 = 
SQLITE_OK
;

7433 if–
lockProxy
 ){

7434 
rc
 = 
lockProxy
->
pMëhod
->
	`xU∆ock
((
sqlôe3_fûe
*ÓockProxy, 
NO_LOCK
);

7435 if–
rc
 ) Ñc;

7436 
rc
 = 
lockProxy
->
pMëhod
->
	`xClo£
((
sqlôe3_fûe
*)lockProxy);

7437 if–
rc
 ) Ñc;

7438 
	`sqlôe3_‰ì
(
lockProxy
);

7439 
pCtx
->
lockProxy
 = 0;

7441 if–
c⁄chFûe
 ){

7442 if–
pCtx
->
c⁄chHñd
 ){

7443 
rc
 = 
	`¥oxyRñó£C⁄ch
(
pFûe
);

7444 if–
rc
 ) Ñc;

7446 
rc
 = 
c⁄chFûe
->
pMëhod
->
	`xClo£
((
sqlôe3_fûe
*)conchFile);

7447 if–
rc
 ) Ñc;

7448 
	`sqlôe3_‰ì
(
c⁄chFûe
);

7450 
	`sqlôe3DbFªe
(0, 
pCtx
->
lockProxyP©h
);

7451 
	`sqlôe3_‰ì
(
pCtx
->
c⁄chFûeP©h
);

7452 
	`sqlôe3DbFªe
(0, 
pCtx
->
dbP©h
);

7454 
pFûe
->
lockögC⁄ãxt
 = 
pCtx
->
ﬁdLockögC⁄ãxt
;

7455 
pFûe
->
pMëhod
 = 
pCtx
->
pOldMëhod
;

7456 
	`sqlôe3_‰ì
(
pCtx
);

7457  
pFûe
->
pMëhod
->
	`xClo£
(
id
);

7459  
SQLITE_OK
;

7460 
	}
}

7487 
	$sqlôe3_os_öô
(){

7508 
	#UNIXVFS
(
VFSNAME
, 
FINDER
) { \

7510 (
unixFûe
), \

7511 
MAX_PATHNAME
, \

7513 
VFSNAME
, \

7514 (*)&
FINDER
, \

7515 
unixO≥n
, \

7516 
unixDñëe
, \

7517 
unixAc˚ss
, \

7518 
unixFuŒP©h«me
, \

7519 
unixDlO≥n
, \

7520 
unixDlEº‹
, \

7521 
unixDlSym
, \

7522 
unixDlClo£
, \

7523 
unixR™dom√ss
, \

7524 
unixSÀï
, \

7525 
unixCuºítTime
, \

7526 
unixGëLa°Eº‹
, \

7527 
unixCuºítTimeI¡64
, \

7528 
unixSëSy°emCÆl
, \

7529 
unixGëSy°emCÆl
, \

7530 
unixNextSy°emCÆl
, \

7531 }

	)

7540 
sqlôe3_vfs
 
aVfs
[] = {

7541 #i‡
SQLITE_ENABLE_LOCKING_STYLE
 && 
	`deföed
(
__APPLE__
)

7542 
	`UNIXVFS
("unix", 
autﬁockIoFödî
 ),

7543 #ñi‡
OS_VXWORKS


7544 
	`UNIXVFS
("unix", 
vxw‹ksIoFödî
 ),

7546 
	`UNIXVFS
("unix", 
posixIoFödî
 ),

7548 
	`UNIXVFS
("unix-n⁄e", 
nﬁockIoFödî
 ),

7549 
	`UNIXVFS
("unix-dŸfûe", 
dŸlockIoFödî
 ),

7550 
	`UNIXVFS
("unix-ex˛", 
posixIoFödî
 ),

7551 #i‡
OS_VXWORKS


7552 
	`UNIXVFS
("unix-«med£m", 
£mIoFödî
 ),

7554 #i‡
SQLITE_ENABLE_LOCKING_STYLE
 || 
OS_VXWORKS


7555 
	`UNIXVFS
("unix-posix", 
posixIoFödî
 ),

7557 #i‡
SQLITE_ENABLE_LOCKING_STYLE


7558 
	`UNIXVFS
("unix-Êock", 
ÊockIoFödî
 ),

7560 #i‡
SQLITE_ENABLE_LOCKING_STYLE
 && 
	`deföed
(
__APPLE__
)

7561 
	`UNIXVFS
("unix-aÂ", 
aÂIoFödî
 ),

7562 
	`UNIXVFS
("unix-nfs", 
nfsIoFödî
 ),

7563 
	`UNIXVFS
("unix-¥oxy", 
¥oxyIoFödî
 ),

7566 
i
;

7570 
	`as£π
–
	`AºaySize
(
aSysˇŒ
)==28 );

7573 
i
=0; i<((
aVfs
)/(
sqlôe3_vfs
)); i++){

7574 
	`sqlôe3_vfs_ªgi°î
(&
aVfs
[
i
], i==0);

7576  
SQLITE_OK
;

7577 
	}
}

7586 
	$sqlôe3_os_íd
(){

7587  
SQLITE_OK
;

7588 
	}
}

	@os_win.c

15 
	~"sqlôeI¡.h
"

16 #i‡
SQLITE_OS_WIN


21 
	~"os_comm⁄.h
"

26 
	~"os_wö.h
"

32 #i‡!
SQLITE_OS_WINNT
 && !
deföed
(
SQLITE_OMIT_WAL
)

37 #i‡!
SQLITE_OS_WINNT
 && 
SQLITE_MAX_MMAP_SIZE
>0

46 #i‡!
SQLITE_OS_WINCE
 && !
SQLITE_OS_WINRT
 && !
deföed
(
SQLITE_WIN32_NO_ANSI
)

47 
	#SQLITE_WIN32_HAS_ANSI


	)

54 #i‡(
SQLITE_OS_WINCE
 || 
SQLITE_OS_WINNT
 || 
SQLITE_OS_WINRT
) && \

55 !
	$deföed
(
SQLITE_WIN32_NO_WIDE
)

56 
	#SQLITE_WIN32_HAS_WIDE


	)

62 #i‡!
	`deföed
(
SQLITE_WIN32_HAS_ANSI
Ë&& !deföed(
SQLITE_WIN32_HAS_WIDE
)

71 #i‚de‡
NTDDI_WIN8


72 
	#NTDDI_WIN8
 0x06020000

	)

75 #i‚de‡
NTDDI_WINBLUE


76 
	#NTDDI_WINBLUE
 0x06030000

	)

79 #i‚de‡
NTDDI_WINTHRESHOLD


80 
	#NTDDI_WINTHRESHOLD
 0x06040000

	)

87 #i‚de‡
SQLITE_WIN32_GETVERSIONEX


88 #i‡
	`deföed
(
NTDDI_VERSION
Ë&& NTDDI_VERSION >
NTDDI_WINBLUE


89 
	#SQLITE_WIN32_GETVERSIONEX
 0

	)

91 
	#SQLITE_WIN32_GETVERSIONEX
 1

	)

100 #i‚de‡
SQLITE_WIN32_CREATEFILEMAPPINGA


101 #i‡
	`deföed
(
NTDDI_VERSION
Ë&& NTDDI_VERSION >
NTDDI_WINTHRESHOLD


102 
	#SQLITE_WIN32_CREATEFILEMAPPINGA
 0

	)

104 
	#SQLITE_WIN32_CREATEFILEMAPPINGA
 1

	)

111 #i‚de‡
MAX_PATH


112 
	#MAX_PATH
 (260)

	)

119 #i‚de‡
SQLITE_WIN32_MAX_PATH_CHARS


120 
	#SQLITE_WIN32_MAX_PATH_CHARS
 (
MAX_PATH
)

	)

126 #i‚de‡
UNICODE_STRING_MAX_CHARS


127 
	#UNICODE_STRING_MAX_CHARS
 (32767)

	)

134 #i‚de‡
SQLITE_WINNT_MAX_PATH_CHARS


135 
	#SQLITE_WINNT_MAX_PATH_CHARS
 (
UNICODE_STRING_MAX_CHARS
)

	)

143 #i‚de‡
SQLITE_WIN32_MAX_PATH_BYTES


144 
	#SQLITE_WIN32_MAX_PATH_BYTES
 (
SQLITE_WIN32_MAX_PATH_CHARS
*4)

	)

151 #i‚de‡
SQLITE_WINNT_MAX_PATH_BYTES


152 
	#SQLITE_WINNT_MAX_PATH_BYTES
 \

153 ((
WCHAR
Ë* 
SQLITE_WINNT_MAX_PATH_CHARS
)

	)

159 #i‚de‡
SQLITE_WIN32_MAX_ERRMSG_CHARS


160 
	#SQLITE_WIN32_MAX_ERRMSG_CHARS
 (1024)

	)

167 #i‚de‡
wöIsDúSï


168 
	#wöIsDúSï
(
a
Ë((◊Ë='/'Ë|| (◊Ë='\\'))

	)

175 #i‚de‡
UNUSED_VARIABLE_VALUE


176 
	#UNUSED_VARIABLE_VALUE
(
x
Ë()(x)

	)

182 #i‚de‡
wöGëDúSï


183 
	#wöGëDúSï
(Ë'\\'

	)

191 #i‡
SQLITE_WIN32_FILEMAPPING_API
 && \

192 (!
	`deföed
(
SQLITE_OMIT_WAL
Ë|| 
SQLITE_MAX_MMAP_SIZE
>0)

197 #i‡
SQLITE_OS_WINRT


198 
WINBASEAPI
 
HANDLE
 
WINAPI
 
	`Cª©eFûeM≠pögFromAµ
(HANDLE, \

199 
LPSECURITY_ATTRIBUTES
, 
ULONG
, 
ULONG64
, 
LPCWSTR
);

201 
WINBASEAPI
 
LPVOID
 
WINAPI
 
	`M≠VõwOfFûeFromAµ
(
HANDLE
, 
ULONG
, 
ULONG64
, 
SIZE_T
);

203 #i‡
	`deföed
(
SQLITE_WIN32_HAS_ANSI
)

204 
WINBASEAPI
 
HANDLE
 
WINAPI
 
	`Cª©eFûeM≠pögA
(HANDLE, 
LPSECURITY_ATTRIBUTES
, \

205 
DWORD
, DWORD, DWORD, 
LPCSTR
);

208 #i‡
	`deföed
(
SQLITE_WIN32_HAS_WIDE
)

209 
WINBASEAPI
 
HANDLE
 
WINAPI
 
	`Cª©eFûeM≠pögW
(HANDLE, 
LPSECURITY_ATTRIBUTES
, \

210 
DWORD
, DWORD, DWORD, 
LPCWSTR
);

213 
WINBASEAPI
 
LPVOID
 
WINAPI
 
	`M≠VõwOfFûe
(
HANDLE
, 
DWORD
, DWORD, DWORD, 
SIZE_T
);

220 
WINBASEAPI
 
BOOL
 
WINAPI
 
	`FlushVõwOfFûe
(
LPCVOID
, 
SIZE_T
);

221 
WINBASEAPI
 
BOOL
 
WINAPI
 
	`Unm≠VõwOfFûe
(
LPCVOID
);

227 #i‚de‡
INVALID_FILE_ATTRIBUTES


228 
	#INVALID_FILE_ATTRIBUTES
 ((
DWORD
)-1)

	)

231 #i‚de‡
FILE_FLAG_MASK


232 
	#FILE_FLAG_MASK
 (0xFF3C0000)

	)

235 #i‚de‡
FILE_ATTRIBUTE_MASK


236 
	#FILE_ATTRIBUTE_MASK
 (0x0003FFF7)

	)

239 #i‚de‡
SQLITE_OMIT_WAL


241 
wöShm
 
	twöShm
;

242 
wöShmNode
 
	twöShmNode
;

249 #i‡
SQLITE_OS_WINCE


250 
	swö˚Lock
 {

251 
nRódîs
;

252 
BOOL
 
bPídög
;

253 
BOOL
 
bRe£rved
;

254 
BOOL
 
bEx˛usive
;

255 } 
	twö˚Lock
;

262 
wöFûe
 
	twöFûe
;

263 
	swöFûe
 {

264 c⁄° 
sqlôe3_io_mëhods
 *
pMëhod
;

265 
sqlôe3_vfs
 *
pVfs
;

266 
HANDLE
 
h
;

267 
u8
 
lockty≥
;

268 
sh¨edLockByã
;

269 
u8
 
˘æFœgs
;

270 
DWORD
 
œ°Eºno
;

271 #i‚de‡
SQLITE_OMIT_WAL


272 
wöShm
 *
pShm
;

274 c⁄° *
zP©h
;

275 
szChunk
;

276 #i‡
SQLITE_OS_WINCE


277 
LPWSTR
 
zDñëeOnClo£
;

278 
HANDLE
 
hMuãx
;

279 
HANDLE
 
hSh¨ed
;

280 
wö˚Lock
 
loˇl
;

281 
wö˚Lock
 *
sh¨ed
;

283 #i‡
SQLITE_MAX_MMAP_SIZE
>0

284 
nFëchOut
;

285 
HANDLE
 
hM≠
;

286 *
pM≠Regi⁄
;

287 
sqlôe3_öt64
 
mm≠Size
;

288 
sqlôe3_öt64
 
mm≠SizeA˘uÆ
;

289 
sqlôe3_öt64
 
mm≠SizeMax
;

296 
	#WINFILE_RDONLY
 0x02

	)

297 
	#WINFILE_PERSIST_WAL
 0x04

	)

298 
	#WINFILE_PSOW
 0x10

	)

303 #i‚de‡
SQLITE_WIN32_DBG_BUF_SIZE


304 
	#SQLITE_WIN32_DBG_BUF_SIZE
 (()(4096-(
DWORD
)))

	)

311 #i‚de‡
SQLITE_WIN32_DATA_DIRECTORY_TYPE


312 
	#SQLITE_WIN32_DATA_DIRECTORY_TYPE
 (1)

	)

319 #i‚de‡
SQLITE_WIN32_TEMP_DIRECTORY_TYPE


320 
	#SQLITE_WIN32_TEMP_DIRECTORY_TYPE
 (2)

	)

327 #ifde‡
SQLITE_WIN32_MALLOC


343 #i‚de‡
SQLITE_WIN32_HEAP_CREATE


344 
	#SQLITE_WIN32_HEAP_CREATE
 (
TRUE
)

	)

351 #i‚de‡
SQLITE_WIN32_CACHE_SIZE


352 #i‡
SQLITE_DEFAULT_CACHE_SIZE
>=0

353 
	#SQLITE_WIN32_CACHE_SIZE
 (
SQLITE_DEFAULT_CACHE_SIZE
)

	)

355 
	#SQLITE_WIN32_CACHE_SIZE
 (-(
SQLITE_DEFAULT_CACHE_SIZE
))

	)

362 #i‚de‡
SQLITE_WIN32_HEAP_INIT_SIZE


363 
	#SQLITE_WIN32_HEAP_INIT_SIZE
 ((
SQLITE_WIN32_CACHE_SIZE
) * \

364 (
SQLITE_DEFAULT_PAGE_SIZE
Ë+ 4194304)

	)

370 #i‚de‡
SQLITE_WIN32_HEAP_MAX_SIZE


371 
	#SQLITE_WIN32_HEAP_MAX_SIZE
 (0)

	)

378 #i‚de‡
SQLITE_WIN32_HEAP_FLAGS


379 
	#SQLITE_WIN32_HEAP_FLAGS
 (0)

	)

387 
wöMemD©a
 
	twöMemD©a
;

388 
	swöMemD©a
 {

389 #i‚de‡
NDEBUG


390 
u32
 
magic1
;

392 
HANDLE
 
hHóp
;

393 
BOOL
 
bOw√d
;

394 #i‚de‡
NDEBUG


395 
u32
 
magic2
;

399 #i‚de‡
NDEBUG


400 
	#WINMEM_MAGIC1
 0x42b2830b

	)

401 
	#WINMEM_MAGIC2
 0xbd4d7cf4

	)

404 
wöMemD©a
 
wö_mem_d©a
 = {

405 #i‚de‡
NDEBUG


406 
WINMEM_MAGIC1
,

408 
NULL
, 
FALSE


409 #i‚de‡
NDEBUG


410 ,
WINMEM_MAGIC2


412 
	}
};

414 #i‚de‡
NDEBUG


415 
	#wöMemAs£πMagic1
(Ë
	`as£π
–
wö_mem_d©a
.
magic1
==
WINMEM_MAGIC1
 )

	)

416 
	#wöMemAs£πMagic2
(Ë
	`as£π
–
wö_mem_d©a
.
magic2
==
WINMEM_MAGIC2
 )

	)

417 
	#wöMemAs£πMagic
(Ë
	`wöMemAs£πMagic1
(); 
	`wöMemAs£πMagic2
();

	)

419 
	#wöMemAs£πMagic
()

	)

422 
	#wöMemGëD©aPå
(Ë&
wö_mem_d©a


	)

423 
	#wöMemGëHóp
(Ë
wö_mem_d©a
.
hHóp


	)

424 
	#wöMemGëOw√d
(Ë
wö_mem_d©a
.
bOw√d


	)

426 *
wöMemMÆloc
(
nByãs
);

427 
wöMemFªe
(*
pPri‹
);

428 *
wöMemRóŒoc
(*
pPri‹
, 
nByãs
);

429 
wöMemSize
(*
p
);

430 
wöMemRoundup
(
n
);

431 
wöMemInô
(*
pAµD©a
);

432 
wöMemShutdown
(*
pAµD©a
);

434 c⁄° 
sqlôe3_mem_mëhods
 *
sqlôe3MemGëWö32
();

449 #ifde‡
SQLITE_TEST


450 
LONG
 
SQLITE_WIN32_VOLATILE
 
	gsqlôe3_os_ty≥
 = 0;

452 
LONG
 
SQLITE_WIN32_VOLATILE
 
	gsqlôe3_os_ty≥
 = 0;

455 #i‚de‡
SYSCALL


456 
	#SYSCALL
 
sqlôe3_sysˇŒ_±r


	)

463 #i‡
SQLITE_OS_WINCE
 || 
SQLITE_OS_WINRT


464 
	#osAªFûeApisANSI
(Ë1

	)

473 
	swö_sysˇŒ
 {

474 c⁄° *
	mzName
;

475 
sqlôe3_sysˇŒ_±r
 
	mpCuºít
;

476 
sqlôe3_sysˇŒ_±r
 
	mpDeÁu…
;

477 } 
	gaSysˇŒ
[] = {

478 #i‡!
SQLITE_OS_WINCE
 && !
SQLITE_OS_WINRT


479 { "AªFûeApisANSI", (
SYSCALL
)
AªFûeApisANSI
, 0 },

481 { "AªFûeApisANSI", (
SYSCALL
)0, 0 },

484 #i‚de‡
osAªFûeApisANSI


485 
	#osAªFûeApisANSI
 ((
	`BOOL
(
WINAPI
*)(
VOID
))
aSysˇŒ
[0].
pCuºít
)

	)

488 #i‡
SQLITE_OS_WINCE
 && 
deföed
(
SQLITE_WIN32_HAS_WIDE
)

489 { "Ch¨LowîW", (
SYSCALL
)
Ch¨LowîW
, 0 },

491 { "Ch¨LowîW", (
SYSCALL
)0, 0 },

494 
	#osCh¨LowîW
 ((
	`LPWSTR
(
WINAPI
*)(
LPWSTR
))
aSysˇŒ
[1].
pCuºít
)

	)

496 #i‡
SQLITE_OS_WINCE
 && 
deföed
(
SQLITE_WIN32_HAS_WIDE
)

497 { "Ch¨UµîW", (
SYSCALL
)
Ch¨UµîW
, 0 },

499 { "Ch¨UµîW", (
SYSCALL
)0, 0 },

502 
	#osCh¨UµîW
 ((
	`LPWSTR
(
WINAPI
*)(
LPWSTR
))
aSysˇŒ
[2].
pCuºít
)

	)

504 { "Clo£H™dÀ", (
SYSCALL
)
Clo£H™dÀ
, 0 },

506 
	#osClo£H™dÀ
 ((
	`BOOL
(
WINAPI
*)(
HANDLE
))
aSysˇŒ
[3].
pCuºít
)

	)

508 #i‡
deföed
(
SQLITE_WIN32_HAS_ANSI
)

509 { "Cª©eFûeA", (
SYSCALL
)
Cª©eFûeA
, 0 },

511 { "Cª©eFûeA", (
SYSCALL
)0, 0 },

514 
	#osCª©eFûeA
 ((
	`HANDLE
(
WINAPI
*)(
LPCSTR
,
DWORD
,DWORD, \

515 
LPSECURITY_ATTRIBUTES
,
DWORD
,DWORD,
HANDLE
))
aSysˇŒ
[4].
pCuºít
)

	)

517 #i‡!
SQLITE_OS_WINRT
 && 
deföed
(
SQLITE_WIN32_HAS_WIDE
)

518 { "Cª©eFûeW", (
SYSCALL
)
Cª©eFûeW
, 0 },

520 { "Cª©eFûeW", (
SYSCALL
)0, 0 },

523 
	#osCª©eFûeW
 ((
	`HANDLE
(
WINAPI
*)(
LPCWSTR
,
DWORD
,DWORD, \

524 
LPSECURITY_ATTRIBUTES
,
DWORD
,DWORD,
HANDLE
))
aSysˇŒ
[5].
pCuºít
)

	)

526 #i‡!
SQLITE_OS_WINRT
 && 
deföed
(
SQLITE_WIN32_HAS_ANSI
) && \

527 (!
deföed
(
SQLITE_OMIT_WAL
Ë|| 
SQLITE_MAX_MMAP_SIZE
>0) && \

528 
SQLITE_WIN32_CREATEFILEMAPPINGA


529 { "Cª©eFûeM≠pögA", (
SYSCALL
)
Cª©eFûeM≠pögA
, 0 },

531 { "Cª©eFûeM≠pögA", (
SYSCALL
)0, 0 },

534 
	#osCª©eFûeM≠pögA
 ((
	`HANDLE
(
WINAPI
*)(
HANDLE
,
LPSECURITY_ATTRIBUTES
, \

535 
DWORD
,DWORD,DWORD,
LPCSTR
))
aSysˇŒ
[6].
pCuºít
)

	)

537 #i‡
SQLITE_OS_WINCE
 || (!
SQLITE_OS_WINRT
 && 
deföed
(
SQLITE_WIN32_HAS_WIDE
) && \

538 (!
deföed
(
SQLITE_OMIT_WAL
Ë|| 
SQLITE_MAX_MMAP_SIZE
>0))

539 { "Cª©eFûeM≠pögW", (
SYSCALL
)
Cª©eFûeM≠pögW
, 0 },

541 { "Cª©eFûeM≠pögW", (
SYSCALL
)0, 0 },

544 
	#osCª©eFûeM≠pögW
 ((
	`HANDLE
(
WINAPI
*)(
HANDLE
,
LPSECURITY_ATTRIBUTES
, \

545 
DWORD
,DWORD,DWORD,
LPCWSTR
))
aSysˇŒ
[7].
pCuºít
)

	)

547 #i‡!
SQLITE_OS_WINRT
 && 
deföed
(
SQLITE_WIN32_HAS_WIDE
)

548 { "Cª©eMuãxW", (
SYSCALL
)
Cª©eMuãxW
, 0 },

550 { "Cª©eMuãxW", (
SYSCALL
)0, 0 },

553 
	#osCª©eMuãxW
 ((
	`HANDLE
(
WINAPI
*)(
LPSECURITY_ATTRIBUTES
,
BOOL
, \

554 
LPCWSTR
))
aSysˇŒ
[8].
pCuºít
)

	)

556 #i‡
deföed
(
SQLITE_WIN32_HAS_ANSI
)

557 { "DñëeFûeA", (
SYSCALL
)
DñëeFûeA
, 0 },

559 { "DñëeFûeA", (
SYSCALL
)0, 0 },

562 
	#osDñëeFûeA
 ((
	`BOOL
(
WINAPI
*)(
LPCSTR
))
aSysˇŒ
[9].
pCuºít
)

	)

564 #i‡
deföed
(
SQLITE_WIN32_HAS_WIDE
)

565 { "DñëeFûeW", (
SYSCALL
)
DñëeFûeW
, 0 },

567 { "DñëeFûeW", (
SYSCALL
)0, 0 },

570 
	#osDñëeFûeW
 ((
	`BOOL
(
WINAPI
*)(
LPCWSTR
))
aSysˇŒ
[10].
pCuºít
)

	)

572 #i‡
SQLITE_OS_WINCE


573 { "FûeTimeToLoˇlFûeTime", (
SYSCALL
)
FûeTimeToLoˇlFûeTime
, 0 },

575 { "FûeTimeToLoˇlFûeTime", (
SYSCALL
)0, 0 },

578 
	#osFûeTimeToLoˇlFûeTime
 ((
	`BOOL
(
WINAPI
*)(
CONST
 
FILETIME
*, \

579 
LPFILETIME
))
aSysˇŒ
[11].
pCuºít
)

	)

581 #i‡
SQLITE_OS_WINCE


582 { "FûeTimeToSy°emTime", (
SYSCALL
)
FûeTimeToSy°emTime
, 0 },

584 { "FûeTimeToSy°emTime", (
SYSCALL
)0, 0 },

587 
	#osFûeTimeToSy°emTime
 ((
	`BOOL
(
WINAPI
*)(
CONST
 
FILETIME
*, \

588 
LPSYSTEMTIME
))
aSysˇŒ
[12].
pCuºít
)

	)

590 { "FlushFûeBuf„rs", (
SYSCALL
)
FlushFûeBuf„rs
, 0 },

592 
	#osFlushFûeBuf„rs
 ((
	`BOOL
(
WINAPI
*)(
HANDLE
))
aSysˇŒ
[13].
pCuºít
)

	)

594 #i‡
deföed
(
SQLITE_WIN32_HAS_ANSI
)

595 { "F‹m©MesßgeA", (
SYSCALL
)
F‹m©MesßgeA
, 0 },

597 { "F‹m©MesßgeA", (
SYSCALL
)0, 0 },

600 
	#osF‹m©MesßgeA
 ((
	`DWORD
(
WINAPI
*)(
DWORD
,
LPCVOID
,DWORD,DWORD,
LPSTR
, \

601 
DWORD
,
va_li°
*))
aSysˇŒ
[14].
pCuºít
)

	)

603 #i‡
deföed
(
SQLITE_WIN32_HAS_WIDE
)

604 { "F‹m©MesßgeW", (
SYSCALL
)
F‹m©MesßgeW
, 0 },

606 { "F‹m©MesßgeW", (
SYSCALL
)0, 0 },

609 
	#osF‹m©MesßgeW
 ((
	`DWORD
(
WINAPI
*)(
DWORD
,
LPCVOID
,DWORD,DWORD,
LPWSTR
, \

610 
DWORD
,
va_li°
*))
aSysˇŒ
[15].
pCuºít
)

	)

612 #i‡!
deföed
(
SQLITE_OMIT_LOAD_EXTENSION
)

613 { "FªeLibøry", (
SYSCALL
)
FªeLibøry
, 0 },

615 { "FªeLibøry", (
SYSCALL
)0, 0 },

618 
	#osFªeLibøry
 ((
	`BOOL
(
WINAPI
*)(
HMODULE
))
aSysˇŒ
[16].
pCuºít
)

	)

620 { "GëCuºítPro˚ssId", (
SYSCALL
)
GëCuºítPro˚ssId
, 0 },

622 
	#osGëCuºítPro˚ssId
 ((
	`DWORD
(
WINAPI
*)(
VOID
))
aSysˇŒ
[17].
pCuºít
)

	)

624 #i‡!
SQLITE_OS_WINCE
 && 
deföed
(
SQLITE_WIN32_HAS_ANSI
)

625 { "GëDiskFªeS∑˚A", (
SYSCALL
)
GëDiskFªeS∑˚A
, 0 },

627 { "GëDiskFªeS∑˚A", (
SYSCALL
)0, 0 },

630 
	#osGëDiskFªeS∑˚A
 ((
	`BOOL
(
WINAPI
*)(
LPCSTR
,
LPDWORD
,LPDWORD,LPDWORD, \

631 
LPDWORD
))
aSysˇŒ
[18].
pCuºít
)

	)

633 #i‡!
SQLITE_OS_WINCE
 && !
SQLITE_OS_WINRT
 && 
deföed
(
SQLITE_WIN32_HAS_WIDE
)

634 { "GëDiskFªeS∑˚W", (
SYSCALL
)
GëDiskFªeS∑˚W
, 0 },

636 { "GëDiskFªeS∑˚W", (
SYSCALL
)0, 0 },

639 
	#osGëDiskFªeS∑˚W
 ((
	`BOOL
(
WINAPI
*)(
LPCWSTR
,
LPDWORD
,LPDWORD,LPDWORD, \

640 
LPDWORD
))
aSysˇŒ
[19].
pCuºít
)

	)

642 #i‡
deföed
(
SQLITE_WIN32_HAS_ANSI
)

643 { "GëFûeAâribuãsA", (
SYSCALL
)
GëFûeAâribuãsA
, 0 },

645 { "GëFûeAâribuãsA", (
SYSCALL
)0, 0 },

648 
	#osGëFûeAâribuãsA
 ((
	`DWORD
(
WINAPI
*)(
LPCSTR
))
aSysˇŒ
[20].
pCuºít
)

	)

650 #i‡!
SQLITE_OS_WINRT
 && 
deföed
(
SQLITE_WIN32_HAS_WIDE
)

651 { "GëFûeAâribuãsW", (
SYSCALL
)
GëFûeAâribuãsW
, 0 },

653 { "GëFûeAâribuãsW", (
SYSCALL
)0, 0 },

656 
	#osGëFûeAâribuãsW
 ((
	`DWORD
(
WINAPI
*)(
LPCWSTR
))
aSysˇŒ
[21].
pCuºít
)

	)

658 #i‡
deföed
(
SQLITE_WIN32_HAS_WIDE
)

659 { "GëFûeAâribuãsExW", (
SYSCALL
)
GëFûeAâribuãsExW
, 0 },

661 { "GëFûeAâribuãsExW", (
SYSCALL
)0, 0 },

664 
	#osGëFûeAâribuãsExW
 ((
	`BOOL
(
WINAPI
*)(
LPCWSTR
,
GET_FILEEX_INFO_LEVELS
, \

665 
LPVOID
))
aSysˇŒ
[22].
pCuºít
)

	)

667 #i‡!
SQLITE_OS_WINRT


668 { "GëFûeSize", (
SYSCALL
)
GëFûeSize
, 0 },

670 { "GëFûeSize", (
SYSCALL
)0, 0 },

673 
	#osGëFûeSize
 ((
	`DWORD
(
WINAPI
*)(
HANDLE
,
LPDWORD
))
aSysˇŒ
[23].
pCuºít
)

	)

675 #i‡!
SQLITE_OS_WINCE
 && 
deföed
(
SQLITE_WIN32_HAS_ANSI
)

676 { "GëFuŒP©hNameA", (
SYSCALL
)
GëFuŒP©hNameA
, 0 },

678 { "GëFuŒP©hNameA", (
SYSCALL
)0, 0 },

681 
	#osGëFuŒP©hNameA
 ((
	`DWORD
(
WINAPI
*)(
LPCSTR
,
DWORD
,
LPSTR
, \

682 
LPSTR
*))
aSysˇŒ
[24].
pCuºít
)

	)

684 #i‡!
SQLITE_OS_WINCE
 && !
SQLITE_OS_WINRT
 && 
deföed
(
SQLITE_WIN32_HAS_WIDE
)

685 { "GëFuŒP©hNameW", (
SYSCALL
)
GëFuŒP©hNameW
, 0 },

687 { "GëFuŒP©hNameW", (
SYSCALL
)0, 0 },

690 
	#osGëFuŒP©hNameW
 ((
	`DWORD
(
WINAPI
*)(
LPCWSTR
,
DWORD
,
LPWSTR
, \

691 
LPWSTR
*))
aSysˇŒ
[25].
pCuºít
)

	)

693 { "GëLa°Eº‹", (
SYSCALL
)
GëLa°Eº‹
, 0 },

695 
	#osGëLa°Eº‹
 ((
	`DWORD
(
WINAPI
*)(
VOID
))
aSysˇŒ
[26].
pCuºít
)

	)

697 #i‡!
deföed
(
SQLITE_OMIT_LOAD_EXTENSION
)

698 #i‡
SQLITE_OS_WINCE


700 { "GëProcAddªssA", (
SYSCALL
)
GëProcAddªssA
, 0 },

704 { "GëProcAddªssA", (
SYSCALL
)
GëProcAddªss
, 0 },

707 { "GëProcAddªssA", (
SYSCALL
)0, 0 },

710 
	#osGëProcAddªssA
 ((
	`FARPROC
(
WINAPI
*)(
HMODULE
, \

711 
LPCSTR
))
aSysˇŒ
[27].
pCuºít
)

	)

713 #i‡!
SQLITE_OS_WINRT


714 { "GëSy°emInfo", (
SYSCALL
)
GëSy°emInfo
, 0 },

716 { "GëSy°emInfo", (
SYSCALL
)0, 0 },

719 
	#osGëSy°emInfo
 ((
	`VOID
(
WINAPI
*)(
LPSYSTEM_INFO
))
aSysˇŒ
[28].
pCuºít
)

	)

721 { "GëSy°emTime", (
SYSCALL
)
GëSy°emTime
, 0 },

723 
	#osGëSy°emTime
 ((
	`VOID
(
WINAPI
*)(
LPSYSTEMTIME
))
aSysˇŒ
[29].
pCuºít
)

	)

725 #i‡!
SQLITE_OS_WINCE


726 { "GëSy°emTimeAsFûeTime", (
SYSCALL
)
GëSy°emTimeAsFûeTime
, 0 },

728 { "GëSy°emTimeAsFûeTime", (
SYSCALL
)0, 0 },

731 
	#osGëSy°emTimeAsFûeTime
 ((
	`VOID
(
WINAPI
*)( \

732 
LPFILETIME
))
aSysˇŒ
[30].
pCuºít
)

	)

734 #i‡
deföed
(
SQLITE_WIN32_HAS_ANSI
)

735 { "GëTempP©hA", (
SYSCALL
)
GëTempP©hA
, 0 },

737 { "GëTempP©hA", (
SYSCALL
)0, 0 },

740 
	#osGëTempP©hA
 ((
	`DWORD
(
WINAPI
*)(
DWORD
,
LPSTR
))
aSysˇŒ
[31].
pCuºít
)

	)

742 #i‡!
SQLITE_OS_WINRT
 && 
deföed
(
SQLITE_WIN32_HAS_WIDE
)

743 { "GëTempP©hW", (
SYSCALL
)
GëTempP©hW
, 0 },

745 { "GëTempP©hW", (
SYSCALL
)0, 0 },

748 
	#osGëTempP©hW
 ((
	`DWORD
(
WINAPI
*)(
DWORD
,
LPWSTR
))
aSysˇŒ
[32].
pCuºít
)

	)

750 #i‡!
SQLITE_OS_WINRT


751 { "GëTickCou¡", (
SYSCALL
)
GëTickCou¡
, 0 },

753 { "GëTickCou¡", (
SYSCALL
)0, 0 },

756 
	#osGëTickCou¡
 ((
	`DWORD
(
WINAPI
*)(
VOID
))
aSysˇŒ
[33].
pCuºít
)

	)

758 #i‡
deföed
(
SQLITE_WIN32_HAS_ANSI
Ë&& 
SQLITE_WIN32_GETVERSIONEX


759 { "GëVîsi⁄ExA", (
SYSCALL
)
GëVîsi⁄ExA
, 0 },

761 { "GëVîsi⁄ExA", (
SYSCALL
)0, 0 },

764 
	#osGëVîsi⁄ExA
 ((
	`BOOL
(
WINAPI
*)( \

765 
LPOSVERSIONINFOA
))
aSysˇŒ
[34].
pCuºít
)

	)

767 #i‡!
SQLITE_OS_WINRT
 && 
deföed
(
SQLITE_WIN32_HAS_WIDE
) && \

768 
SQLITE_WIN32_GETVERSIONEX


769 { "GëVîsi⁄ExW", (
SYSCALL
)
GëVîsi⁄ExW
, 0 },

771 { "GëVîsi⁄ExW", (
SYSCALL
)0, 0 },

774 
	#osGëVîsi⁄ExW
 ((
	`BOOL
(
WINAPI
*)( \

775 
LPOSVERSIONINFOW
))
aSysˇŒ
[35].
pCuºít
)

	)

777 { "HópAŒoc", (
SYSCALL
)
HópAŒoc
, 0 },

779 
	#osHópAŒoc
 ((
	`LPVOID
(
WINAPI
*)(
HANDLE
,
DWORD
, \

780 
SIZE_T
))
aSysˇŒ
[36].
pCuºít
)

	)

782 #i‡!
SQLITE_OS_WINRT


783 { "HópCª©e", (
SYSCALL
)
HópCª©e
, 0 },

785 { "HópCª©e", (
SYSCALL
)0, 0 },

788 
	#osHópCª©e
 ((
	`HANDLE
(
WINAPI
*)(
DWORD
,
SIZE_T
, \

789 
SIZE_T
))
aSysˇŒ
[37].
pCuºít
)

	)

791 #i‡!
SQLITE_OS_WINRT


792 { "HópDe°roy", (
SYSCALL
)
HópDe°roy
, 0 },

794 { "HópDe°roy", (
SYSCALL
)0, 0 },

797 
	#osHópDe°roy
 ((
	`BOOL
(
WINAPI
*)(
HANDLE
))
aSysˇŒ
[38].
pCuºít
)

	)

799 { "HópFªe", (
SYSCALL
)
HópFªe
, 0 },

801 
	#osHópFªe
 ((
	`BOOL
(
WINAPI
*)(
HANDLE
,
DWORD
,
LPVOID
))
aSysˇŒ
[39].
pCuºít
)

	)

803 { "HópReAŒoc", (
SYSCALL
)
HópReAŒoc
, 0 },

805 
	#osHópReAŒoc
 ((
	`LPVOID
(
WINAPI
*)(
HANDLE
,
DWORD
,
LPVOID
, \

806 
SIZE_T
))
aSysˇŒ
[40].
pCuºít
)

	)

808 { "HópSize", (
SYSCALL
)
HópSize
, 0 },

810 
	#osHópSize
 ((
	`SIZE_T
(
WINAPI
*)(
HANDLE
,
DWORD
, \

811 
LPCVOID
))
aSysˇŒ
[41].
pCuºít
)

	)

813 #i‡!
SQLITE_OS_WINRT


814 { "HópVÆid©e", (
SYSCALL
)
HópVÆid©e
, 0 },

816 { "HópVÆid©e", (
SYSCALL
)0, 0 },

819 
	#osHópVÆid©e
 ((
	`BOOL
(
WINAPI
*)(
HANDLE
,
DWORD
, \

820 
LPCVOID
))
aSysˇŒ
[42].
pCuºít
)

	)

822 #i‡!
SQLITE_OS_WINCE
 && !
SQLITE_OS_WINRT


823 { "HópCom∑˘", (
SYSCALL
)
HópCom∑˘
, 0 },

825 { "HópCom∑˘", (
SYSCALL
)0, 0 },

828 
	#osHópCom∑˘
 ((
	`UINT
(
WINAPI
*)(
HANDLE
,
DWORD
))
aSysˇŒ
[43].
pCuºít
)

	)

830 #i‡
deföed
(
SQLITE_WIN32_HAS_ANSI
Ë&& !deföed(
SQLITE_OMIT_LOAD_EXTENSION
)

831 { "LﬂdLibøryA", (
SYSCALL
)
LﬂdLibøryA
, 0 },

833 { "LﬂdLibøryA", (
SYSCALL
)0, 0 },

836 
	#osLﬂdLibøryA
 ((
	`HMODULE
(
WINAPI
*)(
LPCSTR
))
aSysˇŒ
[44].
pCuºít
)

	)

838 #i‡!
SQLITE_OS_WINRT
 && 
deföed
(
SQLITE_WIN32_HAS_WIDE
) && \

839 !
deföed
(
SQLITE_OMIT_LOAD_EXTENSION
)

840 { "LﬂdLibøryW", (
SYSCALL
)
LﬂdLibøryW
, 0 },

842 { "LﬂdLibøryW", (
SYSCALL
)0, 0 },

845 
	#osLﬂdLibøryW
 ((
	`HMODULE
(
WINAPI
*)(
LPCWSTR
))
aSysˇŒ
[45].
pCuºít
)

	)

847 #i‡!
SQLITE_OS_WINRT


848 { "LoˇlFªe", (
SYSCALL
)
LoˇlFªe
, 0 },

850 { "LoˇlFªe", (
SYSCALL
)0, 0 },

853 
	#osLoˇlFªe
 ((
	`HLOCAL
(
WINAPI
*)(
HLOCAL
))
aSysˇŒ
[46].
pCuºít
)

	)

855 #i‡!
SQLITE_OS_WINCE
 && !
SQLITE_OS_WINRT


856 { "LockFûe", (
SYSCALL
)
LockFûe
, 0 },

858 { "LockFûe", (
SYSCALL
)0, 0 },

861 #i‚de‡
osLockFûe


862 
	#osLockFûe
 ((
	`BOOL
(
WINAPI
*)(
HANDLE
,
DWORD
,DWORD,DWORD, \

863 
DWORD
))
aSysˇŒ
[47].
pCuºít
)

	)

866 #i‡!
SQLITE_OS_WINCE


867 { "LockFûeEx", (
SYSCALL
)
LockFûeEx
, 0 },

869 { "LockFûeEx", (
SYSCALL
)0, 0 },

872 #i‚de‡
osLockFûeEx


873 
	#osLockFûeEx
 ((
	`BOOL
(
WINAPI
*)(
HANDLE
,
DWORD
,DWORD,DWORD,DWORD, \

874 
LPOVERLAPPED
))
aSysˇŒ
[48].
pCuºít
)

	)

877 #i‡
SQLITE_OS_WINCE
 || (!
SQLITE_OS_WINRT
 && \

878 (!
deföed
(
SQLITE_OMIT_WAL
Ë|| 
SQLITE_MAX_MMAP_SIZE
>0))

879 { "M≠VõwOfFûe", (
SYSCALL
)
M≠VõwOfFûe
, 0 },

881 { "M≠VõwOfFûe", (
SYSCALL
)0, 0 },

884 
	#osM≠VõwOfFûe
 ((
	`LPVOID
(
WINAPI
*)(
HANDLE
,
DWORD
,DWORD,DWORD, \

885 
SIZE_T
))
aSysˇŒ
[49].
pCuºít
)

	)

887 { "Mu…iByãToWideCh¨", (
SYSCALL
)
Mu…iByãToWideCh¨
, 0 },

889 
	#osMu…iByãToWideCh¨
 (((
WINAPI
*)(
UINT
,
DWORD
,
LPCSTR
,,
LPWSTR
, \

890 ))
aSysˇŒ
[50].
pCuºít
)

	)

892 { "QuîyPîf‹m™˚Cou¡î", (
SYSCALL
)
QuîyPîf‹m™˚Cou¡î
, 0 },

894 
	#osQuîyPîf‹m™˚Cou¡î
 ((
	`BOOL
(
WINAPI
*)( \

895 
LARGE_INTEGER
*))
aSysˇŒ
[51].
pCuºít
)

	)

897 { "RódFûe", (
SYSCALL
)
RódFûe
, 0 },

899 
	#osRódFûe
 ((
	`BOOL
(
WINAPI
*)(
HANDLE
,
LPVOID
,
DWORD
,
LPDWORD
, \

900 
LPOVERLAPPED
))
aSysˇŒ
[52].
pCuºít
)

	)

902 { "SëEndOfFûe", (
SYSCALL
)
SëEndOfFûe
, 0 },

904 
	#osSëEndOfFûe
 ((
	`BOOL
(
WINAPI
*)(
HANDLE
))
aSysˇŒ
[53].
pCuºít
)

	)

906 #i‡!
SQLITE_OS_WINRT


907 { "SëFûePoöãr", (
SYSCALL
)
SëFûePoöãr
, 0 },

909 { "SëFûePoöãr", (
SYSCALL
)0, 0 },

912 
	#osSëFûePoöãr
 ((
	`DWORD
(
WINAPI
*)(
HANDLE
,
LONG
,
PLONG
, \

913 
DWORD
))
aSysˇŒ
[54].
pCuºít
)

	)

915 #i‡!
SQLITE_OS_WINRT


916 { "SÀï", (
SYSCALL
)
SÀï
, 0 },

918 { "SÀï", (
SYSCALL
)0, 0 },

921 
	#osSÀï
 ((
	`VOID
(
WINAPI
*)(
DWORD
))
aSysˇŒ
[55].
pCuºít
)

	)

923 { "Sy°emTimeToFûeTime", (
SYSCALL
)
Sy°emTimeToFûeTime
, 0 },

925 
	#osSy°emTimeToFûeTime
 ((
	`BOOL
(
WINAPI
*)(
CONST
 
SYSTEMTIME
*, \

926 
LPFILETIME
))
aSysˇŒ
[56].
pCuºít
)

	)

928 #i‡!
SQLITE_OS_WINCE
 && !
SQLITE_OS_WINRT


929 { "U∆ockFûe", (
SYSCALL
)
U∆ockFûe
, 0 },

931 { "U∆ockFûe", (
SYSCALL
)0, 0 },

934 #i‚de‡
osU∆ockFûe


935 
	#osU∆ockFûe
 ((
	`BOOL
(
WINAPI
*)(
HANDLE
,
DWORD
,DWORD,DWORD, \

936 
DWORD
))
aSysˇŒ
[57].
pCuºít
)

	)

939 #i‡!
SQLITE_OS_WINCE


940 { "U∆ockFûeEx", (
SYSCALL
)
U∆ockFûeEx
, 0 },

942 { "U∆ockFûeEx", (
SYSCALL
)0, 0 },

945 
	#osU∆ockFûeEx
 ((
	`BOOL
(
WINAPI
*)(
HANDLE
,
DWORD
,DWORD,DWORD, \

946 
LPOVERLAPPED
))
aSysˇŒ
[58].
pCuºít
)

	)

948 #i‡
SQLITE_OS_WINCE
 || !
deföed
(
SQLITE_OMIT_WAL
Ë|| 
SQLITE_MAX_MMAP_SIZE
>0

949 { "Unm≠VõwOfFûe", (
SYSCALL
)
Unm≠VõwOfFûe
, 0 },

951 { "Unm≠VõwOfFûe", (
SYSCALL
)0, 0 },

954 
	#osUnm≠VõwOfFûe
 ((
	`BOOL
(
WINAPI
*)(
LPCVOID
))
aSysˇŒ
[59].
pCuºít
)

	)

956 { "WideCh¨ToMu…iByã", (
SYSCALL
)
WideCh¨ToMu…iByã
, 0 },

958 
	#osWideCh¨ToMu…iByã
 (((
WINAPI
*)(
UINT
,
DWORD
,
LPCWSTR
,,
LPSTR
,, \

959 
LPCSTR
,
LPBOOL
))
aSysˇŒ
[60].
pCuºít
)

	)

961 { "WrôeFûe", (
SYSCALL
)
WrôeFûe
, 0 },

963 
	#osWrôeFûe
 ((
	`BOOL
(
WINAPI
*)(
HANDLE
,
LPCVOID
,
DWORD
,
LPDWORD
, \

964 
LPOVERLAPPED
))
aSysˇŒ
[61].
pCuºít
)

	)

966 #i‡
SQLITE_OS_WINRT


967 { "Cª©eEvítExW", (
SYSCALL
)
Cª©eEvítExW
, 0 },

969 { "Cª©eEvítExW", (
SYSCALL
)0, 0 },

972 
	#osCª©eEvítExW
 ((
	`HANDLE
(
WINAPI
*)(
LPSECURITY_ATTRIBUTES
,
LPCWSTR
, \

973 
DWORD
,DWORD))
aSysˇŒ
[62].
pCuºít
)

	)

975 #i‡!
SQLITE_OS_WINRT


976 { "WaôF‹SögÀObje˘", (
SYSCALL
)
WaôF‹SögÀObje˘
, 0 },

978 { "WaôF‹SögÀObje˘", (
SYSCALL
)0, 0 },

981 
	#osWaôF‹SögÀObje˘
 ((
	`DWORD
(
WINAPI
*)(
HANDLE
, \

982 
DWORD
))
aSysˇŒ
[63].
pCuºít
)

	)

984 #i‡!
SQLITE_OS_WINCE


985 { "WaôF‹SögÀObje˘Ex", (
SYSCALL
)
WaôF‹SögÀObje˘Ex
, 0 },

987 { "WaôF‹SögÀObje˘Ex", (
SYSCALL
)0, 0 },

990 
	#osWaôF‹SögÀObje˘Ex
 ((
	`DWORD
(
WINAPI
*)(
HANDLE
,
DWORD
, \

991 
BOOL
))
aSysˇŒ
[64].
pCuºít
)

	)

993 #i‡
SQLITE_OS_WINRT


994 { "SëFûePoöãrEx", (
SYSCALL
)
SëFûePoöãrEx
, 0 },

996 { "SëFûePoöãrEx", (
SYSCALL
)0, 0 },

999 
	#osSëFûePoöãrEx
 ((
	`BOOL
(
WINAPI
*)(
HANDLE
,
LARGE_INTEGER
, \

1000 
PLARGE_INTEGER
,
DWORD
))
aSysˇŒ
[65].
pCuºít
)

	)

1002 #i‡
SQLITE_OS_WINRT


1003 { "GëFûeInf‹m©i⁄ByH™dÀEx", (
SYSCALL
)
GëFûeInf‹m©i⁄ByH™dÀEx
, 0 },

1005 { "GëFûeInf‹m©i⁄ByH™dÀEx", (
SYSCALL
)0, 0 },

1008 
	#osGëFûeInf‹m©i⁄ByH™dÀEx
 ((
	`BOOL
(
WINAPI
*)(
HANDLE
, \

1009 
FILE_INFO_BY_HANDLE_CLASS
,
LPVOID
,
DWORD
))
aSysˇŒ
[66].
pCuºít
)

	)

1011 #i‡
SQLITE_OS_WINRT
 && (!
deföed
(
SQLITE_OMIT_WAL
Ë|| 
SQLITE_MAX_MMAP_SIZE
>0)

1012 { "M≠VõwOfFûeFromAµ", (
SYSCALL
)
M≠VõwOfFûeFromAµ
, 0 },

1014 { "M≠VõwOfFûeFromAµ", (
SYSCALL
)0, 0 },

1017 
	#osM≠VõwOfFûeFromAµ
 ((
	`LPVOID
(
WINAPI
*)(
HANDLE
,
ULONG
,
ULONG64
, \

1018 
SIZE_T
))
aSysˇŒ
[67].
pCuºít
)

	)

1020 #i‡
SQLITE_OS_WINRT


1021 { "Cª©eFûe2", (
SYSCALL
)
Cª©eFûe2
, 0 },

1023 { "Cª©eFûe2", (
SYSCALL
)0, 0 },

1026 
	#osCª©eFûe2
 ((
	`HANDLE
(
WINAPI
*)(
LPCWSTR
,
DWORD
,DWORD,DWORD, \

1027 
LPCREATEFILE2_EXTENDED_PARAMETERS
))
aSysˇŒ
[68].
pCuºít
)

	)

1029 #i‡
SQLITE_OS_WINRT
 && !
deföed
(
SQLITE_OMIT_LOAD_EXTENSION
)

1030 { "LﬂdPackagedLibøry", (
SYSCALL
)
LﬂdPackagedLibøry
, 0 },

1032 { "LﬂdPackagedLibøry", (
SYSCALL
)0, 0 },

1035 
	#osLﬂdPackagedLibøry
 ((
	`HMODULE
(
WINAPI
*)(
LPCWSTR
, \

1036 
DWORD
))
aSysˇŒ
[69].
pCuºít
)

	)

1038 #i‡
SQLITE_OS_WINRT


1039 { "GëTickCou¡64", (
SYSCALL
)
GëTickCou¡64
, 0 },

1041 { "GëTickCou¡64", (
SYSCALL
)0, 0 },

1044 
	#osGëTickCou¡64
 ((
	`ULONGLONG
(
WINAPI
*)(
VOID
))
aSysˇŒ
[70].
pCuºít
)

	)

1046 #i‡
SQLITE_OS_WINRT


1047 { "GëN©iveSy°emInfo", (
SYSCALL
)
GëN©iveSy°emInfo
, 0 },

1049 { "GëN©iveSy°emInfo", (
SYSCALL
)0, 0 },

1052 
	#osGëN©iveSy°emInfo
 ((
	`VOID
(
WINAPI
*)( \

1053 
LPSYSTEM_INFO
))
aSysˇŒ
[71].
pCuºít
)

	)

1055 #i‡
deföed
(
SQLITE_WIN32_HAS_ANSI
)

1056 { "OuçutDebugSåögA", (
SYSCALL
)
OuçutDebugSåögA
, 0 },

1058 { "OuçutDebugSåögA", (
SYSCALL
)0, 0 },

1061 
	#osOuçutDebugSåögA
 ((
	`VOID
(
WINAPI
*)(
LPCSTR
))
aSysˇŒ
[72].
pCuºít
)

	)

1063 #i‡
deföed
(
SQLITE_WIN32_HAS_WIDE
)

1064 { "OuçutDebugSåögW", (
SYSCALL
)
OuçutDebugSåögW
, 0 },

1066 { "OuçutDebugSåögW", (
SYSCALL
)0, 0 },

1069 
	#osOuçutDebugSåögW
 ((
	`VOID
(
WINAPI
*)(
LPCWSTR
))
aSysˇŒ
[73].
pCuºít
)

	)

1071 { "GëPro˚ssHóp", (
SYSCALL
)
GëPro˚ssHóp
, 0 },

1073 
	#osGëPro˚ssHóp
 ((
	`HANDLE
(
WINAPI
*)(
VOID
))
aSysˇŒ
[74].
pCuºít
)

	)

1075 #i‡
SQLITE_OS_WINRT
 && (!
deföed
(
SQLITE_OMIT_WAL
Ë|| 
SQLITE_MAX_MMAP_SIZE
>0)

1076 { "Cª©eFûeM≠pögFromAµ", (
SYSCALL
)
Cª©eFûeM≠pögFromAµ
, 0 },

1078 { "Cª©eFûeM≠pögFromAµ", (
SYSCALL
)0, 0 },

1081 
	#osCª©eFûeM≠pögFromAµ
 ((
	`HANDLE
(
WINAPI
*)(
HANDLE
, \

1082 
LPSECURITY_ATTRIBUTES
,
ULONG
,
ULONG64
,
LPCWSTR
))
aSysˇŒ
[75].
pCuºít
)

	)

1089 #i‡
deföed
(
I¡îlockedCom∑ªExch™ge
)

1090 { "I¡îlockedCom∑ªExch™ge", (
SYSCALL
)0, 0 },

1092 
	#osI¡îlockedCom∑ªExch™ge
 
I¡îlockedCom∑ªExch™ge


	)

1094 { "I¡îlockedCom∑ªExch™ge", (
SYSCALL
)
I¡îlockedCom∑ªExch™ge
, 0 },

1096 
	#osI¡îlockedCom∑ªExch™ge
 ((
	`LONG
(
WINAPI
*)(
LONG
 \

1097 
SQLITE_WIN32_VOLATILE
*, 
LONG
,LONG))
aSysˇŒ
[76].
pCuºít
)

	)

1100 #i‡!
SQLITE_OS_WINCE
 && !
SQLITE_OS_WINRT
 && 
SQLITE_WIN32_USE_UUID


1101 { "UuidCª©e", (
SYSCALL
)
UuidCª©e
, 0 },

1103 { "UuidCª©e", (
SYSCALL
)0, 0 },

1106 
	#osUuidCª©e
 ((
	`RPC_STATUS
(
RPC_ENTRY
*)(
UUID
*))
aSysˇŒ
[77].
pCuºít
)

	)

1108 #i‡!
SQLITE_OS_WINCE
 && !
SQLITE_OS_WINRT
 && 
SQLITE_WIN32_USE_UUID


1109 { "UuidCª©eSequítül", (
SYSCALL
)
UuidCª©eSequítül
, 0 },

1111 { "UuidCª©eSequítül", (
SYSCALL
)0, 0 },

1114 
	#osUuidCª©eSequítül
 \

1115 ((
	`RPC_STATUS
(
RPC_ENTRY
*)(
UUID
*))
aSysˇŒ
[78].
pCuºít
)

	)

1117 #i‡!
deföed
(
SQLITE_NO_SYNC
Ë&& 
SQLITE_MAX_MMAP_SIZE
>0

1118 { "FlushVõwOfFûe", (
SYSCALL
)
FlushVõwOfFûe
, 0 },

1120 { "FlushVõwOfFûe", (
SYSCALL
)0, 0 },

1123 
	#osFlushVõwOfFûe
 \

1124 ((
	`BOOL
(
WINAPI
*)(
LPCVOID
,
SIZE_T
))
aSysˇŒ
[79].
pCuºít
)

	)

1134 
	$wöSëSy°emCÆl
(

1135 
sqlôe3_vfs
 *
pNŸU£d
,

1136 c⁄° *
zName
,

1137 
sqlôe3_sysˇŒ_±r
 
pNewFunc


1139 
i
;

1140 
rc
 = 
SQLITE_NOTFOUND
;

1142 
	`UNUSED_PARAMETER
(
pNŸU£d
);

1143 if–
zName
==0 ){

1147 
rc
 = 
SQLITE_OK
;

1148 
i
=0; i<(
aSysˇŒ
)/(aSyscall[0]); i++){

1149 if–
aSysˇŒ
[
i
].
pDeÁu…
 ){

1150 
aSysˇŒ
[
i
].
pCuºít
 =áSysˇŒ[i].
pDeÁu…
;

1157 
i
=0; i<(
aSysˇŒ
)/(aSyscall[0]); i++){

1158 if–
	`°rcmp
(
zName
, 
aSysˇŒ
[
i
].zName)==0 ){

1159 if–
aSysˇŒ
[
i
].
pDeÁu…
==0 ){

1160 
aSysˇŒ
[
i
].
pDeÁu…
 =áSysˇŒ[i].
pCuºít
;

1162 
rc
 = 
SQLITE_OK
;

1163 if–
pNewFunc
==0 )ÖNewFun¯
aSysˇŒ
[
i
].
pDeÁu…
;

1164 
aSysˇŒ
[
i
].
pCuºít
 = 
pNewFunc
;

1169  
rc
;

1170 
	}
}

1177 
sqlôe3_sysˇŒ_±r
 
	$wöGëSy°emCÆl
(

1178 
sqlôe3_vfs
 *
pNŸU£d
,

1179 c⁄° *
zName


1181 
i
;

1183 
	`UNUSED_PARAMETER
(
pNŸU£d
);

1184 
i
=0; i<(
aSysˇŒ
)/(aSyscall[0]); i++){

1185 if–
	`°rcmp
(
zName
, 
aSysˇŒ
[
i
].zName)==0 ) áSysˇŒ[i].
pCuºít
;

1188 
	}
}

1196 c⁄° *
	$wöNextSy°emCÆl
(
sqlôe3_vfs
 *
p
, c⁄° *
zName
){

1197 
i
 = -1;

1199 
	`UNUSED_PARAMETER
(
p
);

1200 if–
zName
 ){

1201 
i
=0; i<
	`AºaySize
(
aSysˇŒ
)-1; i++){

1202 if–
	`°rcmp
(
zName
, 
aSysˇŒ
[
i
].zName)==0 ) ;

1205 
i
++; i<
	`AºaySize
(
aSysˇŒ
); i++){

1206 if–
aSysˇŒ
[
i
].
pCuºít
!=0 ) áSysˇŒ[i].
zName
;

1209 
	}
}

1211 #ifde‡
SQLITE_WIN32_MALLOC


1219 
	$sqlôe3_wö32_com∑˘_hóp
(
LPUINT
 
≤L¨ge°
){

1220 
rc
 = 
SQLITE_OK
;

1221 
UINT
 
nL¨ge°
 = 0;

1222 
HANDLE
 
hHóp
;

1224 
	`wöMemAs£πMagic
();

1225 
hHóp
 = 
	`wöMemGëHóp
();

1226 
	`as£π
–
hHóp
!=0 );

1227 
	`as£π
–
hHóp
!=
INVALID_HANDLE_VALUE
 );

1228 #i‡!
SQLITE_OS_WINRT
 && 
	`deföed
(
SQLITE_WIN32_MALLOC_VALIDATE
)

1229 
	`as£π
–
	`osHópVÆid©e
(
hHóp
, 
SQLITE_WIN32_HEAP_FLAGS
, 
NULL
) );

1231 #i‡!
SQLITE_OS_WINCE
 && !
SQLITE_OS_WINRT


1232 if–(
nL¨ge°
=
	`osHópCom∑˘
(
hHóp
, 
SQLITE_WIN32_HEAP_FLAGS
))==0 ){

1233 
DWORD
 
œ°Eºno
 = 
	`osGëLa°Eº‹
();

1234 if–
œ°Eºno
==
NO_ERROR
 ){

1235 
	`sqlôe3_log
(
SQLITE_NOMEM
, "failedÅo HeapCompact (no space), heap=%p",

1236 (*)
hHóp
);

1237 
rc
 = 
SQLITE_NOMEM_BKPT
;

1239 
	`sqlôe3_log
(
SQLITE_ERROR
, "failedÅo HeapCompact (%lu), heap=%p",

1240 
	`osGëLa°Eº‹
(), (*)
hHóp
);

1241 
rc
 = 
SQLITE_ERROR
;

1245 
	`sqlôe3_log
(
SQLITE_NOTFOUND
, "failedÅo HeapCompact, heap=%p",

1246 (*)
hHóp
);

1247 
rc
 = 
SQLITE_NOTFOUND
;

1249 if–
≤L¨ge°
 ) *≤L¨ge° = 
nL¨ge°
;

1250  
rc
;

1251 
	}
}

1259 
	$sqlôe3_wö32_ª£t_hóp
(){

1260 
rc
;

1261 
	`MUTEX_LOGIC
–
sqlôe3_muãx
 *
pMa°î
; )

1262 
	`MUTEX_LOGIC
–
sqlôe3_muãx
 *
pMem
; )

1263 
	`MUTEX_LOGIC
–
pMa°î
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MASTER
); )

1264 
	`MUTEX_LOGIC
–
pMem
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_MEM
); )

1265 
	`sqlôe3_muãx_íãr
(
pMa°î
);

1266 
	`sqlôe3_muãx_íãr
(
pMem
);

1267 
	`wöMemAs£πMagic
();

1268 if–
	`wöMemGëHóp
()!=
NULL
 && 
	`wöMemGëOw√d
(Ë&& 
	`sqlôe3_mem‹y_u£d
()==0 ){

1276 
	`as£π
–
	`wöMemGëHóp
()!=
NULL
 );

1277 
	`as£π
–
	`wöMemGëOw√d
() );

1278 
	`as£π
–
	`sqlôe3_mem‹y_u£d
()==0 );

1279 
	`wöMemShutdown
(
	`wöMemGëD©aPå
());

1280 
	`as£π
–
	`wöMemGëHóp
()==
NULL
 );

1281 
	`as£π
–!
	`wöMemGëOw√d
() );

1282 
	`as£π
–
	`sqlôe3_mem‹y_u£d
()==0 );

1283 
rc
 = 
	`wöMemInô
(
	`wöMemGëD©aPå
());

1284 
	`as£π
–
rc
!=
SQLITE_OK
 || 
	`wöMemGëHóp
()!=
NULL
 );

1285 
	`as£π
–
rc
!=
SQLITE_OK
 || 
	`wöMemGëOw√d
() );

1286 
	`as£π
–
rc
!=
SQLITE_OK
 || 
	`sqlôe3_mem‹y_u£d
()==0 );

1291 
rc
 = 
SQLITE_BUSY
;

1293 
	`sqlôe3_muãx_Àave
(
pMem
);

1294 
	`sqlôe3_muãx_Àave
(
pMa°î
);

1295  
rc
;

1296 
	}
}

1304 
	$sqlôe3_wö32_wrôe_debug
(c⁄° *
zBuf
, 
nBuf
){

1305 
zDbgBuf
[
SQLITE_WIN32_DBG_BUF_SIZE
];

1306 
nMö
 = 
	`MIN
(
nBuf
, (
SQLITE_WIN32_DBG_BUF_SIZE
 - 1));

1307 if–
nMö
<-1 )ÇMin = -1;

1308 
	`as£π
–
nMö
==-1 ||ÇMö==0 ||ÇMö<
SQLITE_WIN32_DBG_BUF_SIZE
 );

1309 #ifde‡
SQLITE_ENABLE_API_ARMOR


1310 if–!
zBuf
 ){

1311 ()
SQLITE_MISUSE_BKPT
;

1315 #i‡
	`deföed
(
SQLITE_WIN32_HAS_ANSI
)

1316 if–
nMö
>0 ){

1317 
	`mem£t
(
zDbgBuf
, 0, 
SQLITE_WIN32_DBG_BUF_SIZE
);

1318 
	`mem˝y
(
zDbgBuf
, 
zBuf
, 
nMö
);

1319 
	`osOuçutDebugSåögA
(
zDbgBuf
);

1321 
	`osOuçutDebugSåögA
(
zBuf
);

1323 #ñi‡
	`deföed
(
SQLITE_WIN32_HAS_WIDE
)

1324 
	`mem£t
(
zDbgBuf
, 0, 
SQLITE_WIN32_DBG_BUF_SIZE
);

1325 i‡–
	`osMu…iByãToWideCh¨
(

1326 
	`osAªFûeApisANSI
(Ë? 
CP_ACP
 : 
CP_OEMCP
, 0, 
zBuf
,

1327 
nMö
, (
LPWSTR
)
zDbgBuf
, 
SQLITE_WIN32_DBG_BUF_SIZE
/(
WCHAR
))<=0 ){

1330 
	`osOuçutDebugSåögW
((
LPCWSTR
)
zDbgBuf
);

1332 if–
nMö
>0 ){

1333 
	`mem£t
(
zDbgBuf
, 0, 
SQLITE_WIN32_DBG_BUF_SIZE
);

1334 
	`mem˝y
(
zDbgBuf
, 
zBuf
, 
nMö
);

1335 
	`Ârötf
(
°dîr
, "%s", 
zDbgBuf
);

1337 
	`Ârötf
(
°dîr
, "%s", 
zBuf
);

1340 
	}
}

1346 #i‡
SQLITE_OS_WINRT


1347 
HANDLE
 
	g¶ìpObj
 = 
NULL
;

1350 
	$sqlôe3_wö32_¶ìp
(
DWORD
 
mûli£c⁄ds
){

1351 #i‡
SQLITE_OS_WINRT


1352 i‡–
¶ìpObj
==
NULL
 ){

1353 
¶ìpObj
 = 
	`osCª©eEvítExW
(
NULL
, NULL, 
CREATE_EVENT_MANUAL_RESET
,

1354 
SYNCHRONIZE
);

1356 
	`as£π
–
¶ìpObj
!=
NULL
 );

1357 
	`osWaôF‹SögÀObje˘Ex
(
¶ìpObj
, 
mûli£c⁄ds
, 
FALSE
);

1359 
	`osSÀï
(
mûli£c⁄ds
);

1361 
	}
}

1363 #i‡
SQLITE_MAX_WORKER_THREADS
>0 && !
SQLITE_OS_WINCE
 && !
SQLITE_OS_WINRT
 && \

1364 
	gSQLITE_THREADSAFE
>0

1365 
DWORD
 
	$sqlôe3Wö32Waô
(
HANDLE
 
hObje˘
){

1366 
DWORD
 
rc
;

1367  (
rc
 = 
	`osWaôF‹SögÀObje˘Ex
(
hObje˘
, 
INFINITE
,

1368 
TRUE
))==
WAIT_IO_COMPLETION
 ){}

1369  
rc
;

1370 
	}
}

1385 #i‡!
SQLITE_WIN32_GETVERSIONEX


1386 
	#osIsNT
(Ë(1)

	)

1387 #ñi‡
SQLITE_OS_WINCE
 || 
SQLITE_OS_WINRT
 || !
deföed
(
SQLITE_WIN32_HAS_ANSI
)

1388 
	#osIsNT
(Ë(1)

	)

1389 #ñi‡!
deföed
(
SQLITE_WIN32_HAS_WIDE
)

1390 
	#osIsNT
(Ë(0)

	)

1392 
	#osIsNT
(Ë((
sqlôe3_os_ty≥
==2Ë|| 
	`sqlôe3_wö32_is_¡
())

	)

1399 
	$sqlôe3_wö32_is_¡
(){

1400 #i‡
SQLITE_OS_WINRT


1406 #ñi‡
SQLITE_WIN32_GETVERSIONEX


1407 if–
	`osI¡îlockedCom∑ªExch™ge
(&
sqlôe3_os_ty≥
, 0, 0)==0 ){

1408 #i‡
	`deföed
(
SQLITE_WIN32_HAS_ANSI
)

1409 
OSVERSIONINFOA
 
sInfo
;

1410 
sInfo
.
dwOSVîsi⁄InfoSize
 = (sInfo);

1411 
	`osGëVîsi⁄ExA
(&
sInfo
);

1412 
	`osI¡îlockedCom∑ªExch™ge
(&
sqlôe3_os_ty≥
,

1413 (
sInfo
.
dwPœtf‹mId
 =
VER_PLATFORM_WIN32_NT
) ? 2 : 1, 0);

1414 #ñi‡
	`deföed
(
SQLITE_WIN32_HAS_WIDE
)

1415 
OSVERSIONINFOW
 
sInfo
;

1416 
sInfo
.
dwOSVîsi⁄InfoSize
 = (sInfo);

1417 
	`osGëVîsi⁄ExW
(&
sInfo
);

1418 
	`osI¡îlockedCom∑ªExch™ge
(&
sqlôe3_os_ty≥
,

1419 (
sInfo
.
dwPœtf‹mId
 =
VER_PLATFORM_WIN32_NT
) ? 2 : 1, 0);

1422  
	`osI¡îlockedCom∑ªExch™ge
(&
sqlôe3_os_ty≥
, 2, 2)==2;

1423 #ñi‡
SQLITE_TEST


1424  
	`osI¡îlockedCom∑ªExch™ge
(&
sqlôe3_os_ty≥
, 2, 2)==2;

1432 
	}
}

1434 #ifde‡
SQLITE_WIN32_MALLOC


1438 *
	$wöMemMÆloc
(
nByãs
){

1439 
HANDLE
 
hHóp
;

1440 *
p
;

1442 
	`wöMemAs£πMagic
();

1443 
hHóp
 = 
	`wöMemGëHóp
();

1444 
	`as£π
–
hHóp
!=0 );

1445 
	`as£π
–
hHóp
!=
INVALID_HANDLE_VALUE
 );

1446 #i‡!
SQLITE_OS_WINRT
 && 
	`deföed
(
SQLITE_WIN32_MALLOC_VALIDATE
)

1447 
	`as£π
–
	`osHópVÆid©e
(
hHóp
, 
SQLITE_WIN32_HEAP_FLAGS
, 
NULL
) );

1449 
	`as£π
–
nByãs
>=0 );

1450 
p
 = 
	`osHópAŒoc
(
hHóp
, 
SQLITE_WIN32_HEAP_FLAGS
, (
SIZE_T
)
nByãs
);

1451 if–!
p
 ){

1452 
	`sqlôe3_log
(
SQLITE_NOMEM
, "failedÅo HeapAlloc %u bytes (%lu), heap=%p",

1453 
nByãs
, 
	`osGëLa°Eº‹
(), (*)
hHóp
);

1455  
p
;

1456 
	}
}

1461 
	$wöMemFªe
(*
pPri‹
){

1462 
HANDLE
 
hHóp
;

1464 
	`wöMemAs£πMagic
();

1465 
hHóp
 = 
	`wöMemGëHóp
();

1466 
	`as£π
–
hHóp
!=0 );

1467 
	`as£π
–
hHóp
!=
INVALID_HANDLE_VALUE
 );

1468 #i‡!
SQLITE_OS_WINRT
 && 
	`deföed
(
SQLITE_WIN32_MALLOC_VALIDATE
)

1469 
	`as£π
–
	`osHópVÆid©e
(
hHóp
, 
SQLITE_WIN32_HEAP_FLAGS
, 
pPri‹
) );

1471 if–!
pPri‹
 ) ;

1472 if–!
	`osHópFªe
(
hHóp
, 
SQLITE_WIN32_HEAP_FLAGS
, 
pPri‹
) ){

1473 
	`sqlôe3_log
(
SQLITE_NOMEM
, "failedÅo HeapFree block %p (%lu), heap=%p",

1474 
pPri‹
, 
	`osGëLa°Eº‹
(), (*)
hHóp
);

1476 
	}
}

1481 *
	$wöMemRóŒoc
(*
pPri‹
, 
nByãs
){

1482 
HANDLE
 
hHóp
;

1483 *
p
;

1485 
	`wöMemAs£πMagic
();

1486 
hHóp
 = 
	`wöMemGëHóp
();

1487 
	`as£π
–
hHóp
!=0 );

1488 
	`as£π
–
hHóp
!=
INVALID_HANDLE_VALUE
 );

1489 #i‡!
SQLITE_OS_WINRT
 && 
	`deföed
(
SQLITE_WIN32_MALLOC_VALIDATE
)

1490 
	`as£π
–
	`osHópVÆid©e
(
hHóp
, 
SQLITE_WIN32_HEAP_FLAGS
, 
pPri‹
) );

1492 
	`as£π
–
nByãs
>=0 );

1493 if–!
pPri‹
 ){

1494 
p
 = 
	`osHópAŒoc
(
hHóp
, 
SQLITE_WIN32_HEAP_FLAGS
, (
SIZE_T
)
nByãs
);

1496 
p
 = 
	`osHópReAŒoc
(
hHóp
, 
SQLITE_WIN32_HEAP_FLAGS
, 
pPri‹
, (
SIZE_T
)
nByãs
);

1498 if–!
p
 ){

1499 
	`sqlôe3_log
(
SQLITE_NOMEM
, "failedÅo %s %u bytes (%lu), heap=%p",

1500 
pPri‹
 ? "HópReAŒoc" : "HópAŒoc", 
nByãs
, 
	`osGëLa°Eº‹
(),

1501 (*)
hHóp
);

1503  
p
;

1504 
	}
}

1509 
	$wöMemSize
(*
p
){

1510 
HANDLE
 
hHóp
;

1511 
SIZE_T
 
n
;

1513 
	`wöMemAs£πMagic
();

1514 
hHóp
 = 
	`wöMemGëHóp
();

1515 
	`as£π
–
hHóp
!=0 );

1516 
	`as£π
–
hHóp
!=
INVALID_HANDLE_VALUE
 );

1517 #i‡!
SQLITE_OS_WINRT
 && 
	`deföed
(
SQLITE_WIN32_MALLOC_VALIDATE
)

1518 
	`as£π
–
	`osHópVÆid©e
(
hHóp
, 
SQLITE_WIN32_HEAP_FLAGS
, 
p
) );

1520 if–!
p
 )  0;

1521 
n
 = 
	`osHópSize
(
hHóp
, 
SQLITE_WIN32_HEAP_FLAGS
, 
p
);

1522 if–
n
==(
SIZE_T
)-1 ){

1523 
	`sqlôe3_log
(
SQLITE_NOMEM
, "failedÅo HeapSize block %p (%lu), heap=%p",

1524 
p
, 
	`osGëLa°Eº‹
(), (*)
hHóp
);

1527  ()
n
;

1528 
	}
}

1533 
	$wöMemRoundup
(
n
){

1534  
n
;

1535 
	}
}

1540 
	$wöMemInô
(*
pAµD©a
){

1541 
wöMemD©a
 *
pWöMemD©a
 = (wöMemD©®*)
pAµD©a
;

1543 if–!
pWöMemD©a
 )  
SQLITE_ERROR
;

1544 
	`as£π
–
pWöMemD©a
->
magic1
==
WINMEM_MAGIC1
 );

1545 
	`as£π
–
pWöMemD©a
->
magic2
==
WINMEM_MAGIC2
 );

1547 #i‡!
SQLITE_OS_WINRT
 && 
SQLITE_WIN32_HEAP_CREATE


1548 if–!
pWöMemD©a
->
hHóp
 ){

1549 
DWORD
 
dwInôülSize
 = 
SQLITE_WIN32_HEAP_INIT_SIZE
;

1550 
DWORD
 
dwMaximumSize
 = (DWORD)
sqlôe3GlobÆC⁄fig
.
nHóp
;

1551 if–
dwMaximumSize
==0 ){

1552 
dwMaximumSize
 = 
SQLITE_WIN32_HEAP_MAX_SIZE
;

1553 }if–
dwInôülSize
>
dwMaximumSize
 ){

1554 
dwInôülSize
 = 
dwMaximumSize
;

1556 
pWöMemD©a
->
hHóp
 = 
	`osHópCª©e
(
SQLITE_WIN32_HEAP_FLAGS
,

1557 
dwInôülSize
, 
dwMaximumSize
);

1558 if–!
pWöMemD©a
->
hHóp
 ){

1559 
	`sqlôe3_log
(
SQLITE_NOMEM
,

1561 
	`osGëLa°Eº‹
(), 
SQLITE_WIN32_HEAP_FLAGS
, 
dwInôülSize
,

1562 
dwMaximumSize
);

1563  
SQLITE_NOMEM_BKPT
;

1565 
pWöMemD©a
->
bOw√d
 = 
TRUE
;

1566 
	`as£π
–
pWöMemD©a
->
bOw√d
 );

1569 
pWöMemD©a
->
hHóp
 = 
	`osGëPro˚ssHóp
();

1570 if–!
pWöMemD©a
->
hHóp
 ){

1571 
	`sqlôe3_log
(
SQLITE_NOMEM
,

1572 "ÁûedÅÿGëPro˚ssHó∞(%lu)", 
	`osGëLa°Eº‹
());

1573  
SQLITE_NOMEM_BKPT
;

1575 
pWöMemD©a
->
bOw√d
 = 
FALSE
;

1576 
	`as£π
–!
pWöMemD©a
->
bOw√d
 );

1578 
	`as£π
–
pWöMemD©a
->
hHóp
!=0 );

1579 
	`as£π
–
pWöMemD©a
->
hHóp
!=
INVALID_HANDLE_VALUE
 );

1580 #i‡!
SQLITE_OS_WINRT
 && 
	`deföed
(
SQLITE_WIN32_MALLOC_VALIDATE
)

1581 
	`as£π
–
	`osHópVÆid©e
(
pWöMemD©a
->
hHóp
, 
SQLITE_WIN32_HEAP_FLAGS
, 
NULL
) );

1583  
SQLITE_OK
;

1584 
	}
}

1589 
	$wöMemShutdown
(*
pAµD©a
){

1590 
wöMemD©a
 *
pWöMemD©a
 = (wöMemD©®*)
pAµD©a
;

1592 if–!
pWöMemD©a
 ) ;

1593 
	`as£π
–
pWöMemD©a
->
magic1
==
WINMEM_MAGIC1
 );

1594 
	`as£π
–
pWöMemD©a
->
magic2
==
WINMEM_MAGIC2
 );

1596 if–
pWöMemD©a
->
hHóp
 ){

1597 
	`as£π
–
pWöMemD©a
->
hHóp
!=
INVALID_HANDLE_VALUE
 );

1598 #i‡!
SQLITE_OS_WINRT
 && 
	`deföed
(
SQLITE_WIN32_MALLOC_VALIDATE
)

1599 
	`as£π
–
	`osHópVÆid©e
(
pWöMemD©a
->
hHóp
, 
SQLITE_WIN32_HEAP_FLAGS
, 
NULL
) );

1601 if–
pWöMemD©a
->
bOw√d
 ){

1602 if–!
	`osHópDe°roy
(
pWöMemD©a
->
hHóp
) ){

1603 
	`sqlôe3_log
(
SQLITE_NOMEM
, "failedÅo HeapDestroy (%lu), heap=%p",

1604 
	`osGëLa°Eº‹
(), (*)
pWöMemD©a
->
hHóp
);

1606 
pWöMemD©a
->
bOw√d
 = 
FALSE
;

1608 
pWöMemD©a
->
hHóp
 = 
NULL
;

1610 
	}
}

1620 c⁄° 
sqlôe3_mem_mëhods
 *
	$sqlôe3MemGëWö32
(){

1621 c⁄° 
sqlôe3_mem_mëhods
 
wöMemMëhods
 = {

1622 
wöMemMÆloc
,

1623 
wöMemFªe
,

1624 
wöMemRóŒoc
,

1625 
wöMemSize
,

1626 
wöMemRoundup
,

1627 
wöMemInô
,

1628 
wöMemShutdown
,

1629 &
wö_mem_d©a


1631  &
wöMemMëhods
;

1632 
	}
}

1634 
	$sqlôe3MemSëDeÁu…
(){

1635 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_MALLOC
, 
	`sqlôe3MemGëWö32
());

1636 
	}
}

1644 
LPWSTR
 
	$wöUtf8ToUnicode
(c⁄° *
zText
){

1645 
nCh¨
;

1646 
LPWSTR
 
zWideText
;

1648 
nCh¨
 = 
	`osMu…iByãToWideCh¨
(
CP_UTF8
, 0, 
zText
, -1, 
NULL
, 0);

1649 if–
nCh¨
==0 ){

1652 
zWideText
 = 
	`sqlôe3MÆlocZîo
–
nCh¨
*(
WCHAR
) );

1653 if–
zWideText
==0 ){

1656 
nCh¨
 = 
	`osMu…iByãToWideCh¨
(
CP_UTF8
, 0, 
zText
, -1, 
zWideText
,

1657 
nCh¨
);

1658 if–
nCh¨
==0 ){

1659 
	`sqlôe3_‰ì
(
zWideText
);

1660 
zWideText
 = 0;

1662  
zWideText
;

1663 
	}
}

1670 *
	$wöUnicodeToUtf8
(
LPCWSTR
 
zWideText
){

1671 
nByã
;

1672 *
zText
;

1674 
nByã
 = 
	`osWideCh¨ToMu…iByã
(
CP_UTF8
, 0, 
zWideText
, -1, 0, 0, 0, 0);

1675 if–
nByã
 == 0 ){

1678 
zText
 = 
	`sqlôe3MÆlocZîo
–
nByã
 );

1679 if–
zText
==0 ){

1682 
nByã
 = 
	`osWideCh¨ToMu…iByã
(
CP_UTF8
, 0, 
zWideText
, -1, 
zText
,ÇByte,

1684 if–
nByã
 == 0 ){

1685 
	`sqlôe3_‰ì
(
zText
);

1686 
zText
 = 0;

1688  
zText
;

1689 
	}
}

1697 
LPWSTR
 
	$wöMbcsToUnicode
(c⁄° *
zText
, 
u£Ansi
){

1698 
nByã
;

1699 
LPWSTR
 
zMbcsText
;

1700 
codïage
 = 
u£Ansi
 ? 
CP_ACP
 : 
CP_OEMCP
;

1702 
nByã
 = 
	`osMu…iByãToWideCh¨
(
codïage
, 0, 
zText
, -1, 
NULL
,

1703 0)*(
WCHAR
);

1704 if–
nByã
==0 ){

1707 
zMbcsText
 = 
	`sqlôe3MÆlocZîo
–
nByã
*(
WCHAR
) );

1708 if–
zMbcsText
==0 ){

1711 
nByã
 = 
	`osMu…iByãToWideCh¨
(
codïage
, 0, 
zText
, -1, 
zMbcsText
,

1712 
nByã
);

1713 if–
nByã
==0 ){

1714 
	`sqlôe3_‰ì
(
zMbcsText
);

1715 
zMbcsText
 = 0;

1717  
zMbcsText
;

1718 
	}
}

1726 *
	$wöUnicodeToMbcs
(
LPCWSTR
 
zWideText
, 
u£Ansi
){

1727 
nByã
;

1728 *
zText
;

1729 
codïage
 = 
u£Ansi
 ? 
CP_ACP
 : 
CP_OEMCP
;

1731 
nByã
 = 
	`osWideCh¨ToMu…iByã
(
codïage
, 0, 
zWideText
, -1, 0, 0, 0, 0);

1732 if–
nByã
 == 0 ){

1735 
zText
 = 
	`sqlôe3MÆlocZîo
–
nByã
 );

1736 if–
zText
==0 ){

1739 
nByã
 = 
	`osWideCh¨ToMu…iByã
(
codïage
, 0, 
zWideText
, -1, 
zText
,

1740 
nByã
, 0, 0);

1741 if–
nByã
 == 0 ){

1742 
	`sqlôe3_‰ì
(
zText
);

1743 
zText
 = 0;

1745  
zText
;

1746 
	}
}

1753 *
	$wöMbcsToUtf8
(c⁄° *
zText
, 
u£Ansi
){

1754 *
zTextUtf8
;

1755 
LPWSTR
 
zTmpWide
;

1757 
zTmpWide
 = 
	`wöMbcsToUnicode
(
zText
, 
u£Ansi
);

1758 if–
zTmpWide
==0 ){

1761 
zTextUtf8
 = 
	`wöUnicodeToUtf8
(
zTmpWide
);

1762 
	`sqlôe3_‰ì
(
zTmpWide
);

1763  
zTextUtf8
;

1764 
	}
}

1771 *
	$wöUtf8ToMbcs
(c⁄° *
zText
, 
u£Ansi
){

1772 *
zTextMbcs
;

1773 
LPWSTR
 
zTmpWide
;

1775 
zTmpWide
 = 
	`wöUtf8ToUnicode
(
zText
);

1776 if–
zTmpWide
==0 ){

1779 
zTextMbcs
 = 
	`wöUnicodeToMbcs
(
zTmpWide
, 
u£Ansi
);

1780 
	`sqlôe3_‰ì
(
zTmpWide
);

1781  
zTextMbcs
;

1782 
	}
}

1787 
LPWSTR
 
	$sqlôe3_wö32_utf8_to_unicode
(c⁄° *
zText
){

1788 #ifde‡
SQLITE_ENABLE_API_ARMOR


1789 if–!
zText
 ){

1790 ()
SQLITE_MISUSE_BKPT
;

1794 #i‚de‡
SQLITE_OMIT_AUTOINIT


1795 if–
	`sqlôe3_öôülize
() )  0;

1797  
	`wöUtf8ToUnicode
(
zText
);

1798 
	}
}

1803 *
	$sqlôe3_wö32_unicode_to_utf8
(
LPCWSTR
 
zWideText
){

1804 #ifde‡
SQLITE_ENABLE_API_ARMOR


1805 if–!
zWideText
 ){

1806 ()
SQLITE_MISUSE_BKPT
;

1810 #i‚de‡
SQLITE_OMIT_AUTOINIT


1811 if–
	`sqlôe3_öôülize
() )  0;

1813  
	`wöUnicodeToUtf8
(
zWideText
);

1814 
	}
}

1819 *
	$sqlôe3_wö32_mbcs_to_utf8
(c⁄° *
zText
){

1820 #ifde‡
SQLITE_ENABLE_API_ARMOR


1821 if–!
zText
 ){

1822 ()
SQLITE_MISUSE_BKPT
;

1826 #i‚de‡
SQLITE_OMIT_AUTOINIT


1827 if–
	`sqlôe3_öôülize
() )  0;

1829  
	`wöMbcsToUtf8
(
zText
, 
	`osAªFûeApisANSI
());

1830 
	}
}

1835 *
	$sqlôe3_wö32_mbcs_to_utf8_v2
(c⁄° *
zText
, 
u£Ansi
){

1836 #ifde‡
SQLITE_ENABLE_API_ARMOR


1837 if–!
zText
 ){

1838 ()
SQLITE_MISUSE_BKPT
;

1842 #i‚de‡
SQLITE_OMIT_AUTOINIT


1843 if–
	`sqlôe3_öôülize
() )  0;

1845  
	`wöMbcsToUtf8
(
zText
, 
u£Ansi
);

1846 
	}
}

1851 *
	$sqlôe3_wö32_utf8_to_mbcs
(c⁄° *
zText
){

1852 #ifde‡
SQLITE_ENABLE_API_ARMOR


1853 if–!
zText
 ){

1854 ()
SQLITE_MISUSE_BKPT
;

1858 #i‚de‡
SQLITE_OMIT_AUTOINIT


1859 if–
	`sqlôe3_öôülize
() )  0;

1861  
	`wöUtf8ToMbcs
(
zText
, 
	`osAªFûeApisANSI
());

1862 
	}
}

1867 *
	$sqlôe3_wö32_utf8_to_mbcs_v2
(c⁄° *
zText
, 
u£Ansi
){

1868 #ifde‡
SQLITE_ENABLE_API_ARMOR


1869 if–!
zText
 ){

1870 ()
SQLITE_MISUSE_BKPT
;

1874 #i‚de‡
SQLITE_OMIT_AUTOINIT


1875 if–
	`sqlôe3_öôülize
() )  0;

1877  
	`wöUtf8ToMbcs
(
zText
, 
u£Ansi
);

1878 
	}
}

1887 
	$sqlôe3_wö32_£t_dúe˘‹y
(
DWORD
 
ty≥
, 
LPCWSTR
 
zVÆue
){

1888 **
µDúe˘‹y
 = 0;

1889 #i‚de‡
SQLITE_OMIT_AUTOINIT


1890 
rc
 = 
	`sqlôe3_öôülize
();

1891 if–
rc
 ) Ñc;

1893 if–
ty≥
==
SQLITE_WIN32_DATA_DIRECTORY_TYPE
 ){

1894 
µDúe˘‹y
 = &
sqlôe3_d©a_dúe˘‹y
;

1895 }if–
ty≥
==
SQLITE_WIN32_TEMP_DIRECTORY_TYPE
 ){

1896 
µDúe˘‹y
 = &
sqlôe3_ãmp_dúe˘‹y
;

1898 
	`as£π
–!
µDúe˘‹y
 || 
ty≥
==
SQLITE_WIN32_DATA_DIRECTORY_TYPE


1899 || 
ty≥
==
SQLITE_WIN32_TEMP_DIRECTORY_TYPE


1901 
	`as£π
–!
µDúe˘‹y
 || 
	`sqlôe3MemdebugHasTy≥
(*µDúe˘‹y, 
MEMTYPE_HEAP
) );

1902 if–
µDúe˘‹y
 ){

1903 *
zVÆueUtf8
 = 0;

1904 if–
zVÆue
 && zValue[0] ){

1905 
zVÆueUtf8
 = 
	`wöUnicodeToUtf8
(
zVÆue
);

1906 i‡–
zVÆueUtf8
==0 ){

1907  
SQLITE_NOMEM_BKPT
;

1910 
	`sqlôe3_‰ì
(*
µDúe˘‹y
);

1911 *
µDúe˘‹y
 = 
zVÆueUtf8
;

1912  
SQLITE_OK
;

1914  
SQLITE_ERROR
;

1915 
	}
}

1922 
	$wöGëLa°Eº‹Msg
(
DWORD
 
œ°Eºno
, 
nBuf
, *
zBuf
){

1927 
DWORD
 
dwLí
 = 0;

1928 *
zOut
 = 0;

1930 if–
	`osIsNT
() ){

1931 #i‡
SQLITE_OS_WINRT


1932 
WCHAR
 
zTempWide
[
SQLITE_WIN32_MAX_ERRMSG_CHARS
+1];

1933 
dwLí
 = 
	`osF‹m©MesßgeW
(
FORMAT_MESSAGE_FROM_SYSTEM
 |

1934 
FORMAT_MESSAGE_IGNORE_INSERTS
,

1935 
NULL
,

1936 
œ°Eºno
,

1938 
zTempWide
,

1939 
SQLITE_WIN32_MAX_ERRMSG_CHARS
,

1942 
LPWSTR
 
zTempWide
 = 
NULL
;

1943 
dwLí
 = 
	`osF‹m©MesßgeW
(
FORMAT_MESSAGE_ALLOCATE_BUFFER
 |

1944 
FORMAT_MESSAGE_FROM_SYSTEM
 |

1945 
FORMAT_MESSAGE_IGNORE_INSERTS
,

1946 
NULL
,

1947 
œ°Eºno
,

1949 (
LPWSTR
Ë&
zTempWide
,

1953 if–
dwLí
 > 0 ){

1955 
	`sqlôe3BegöBíignMÆloc
();

1956 
zOut
 = 
	`wöUnicodeToUtf8
(
zTempWide
);

1957 
	`sqlôe3EndBíignMÆloc
();

1958 #i‡!
SQLITE_OS_WINRT


1960 
	`osLoˇlFªe
(
zTempWide
);

1964 #ifde‡
SQLITE_WIN32_HAS_ANSI


1966 *
zTemp
 = 
NULL
;

1967 
dwLí
 = 
	`osF‹m©MesßgeA
(
FORMAT_MESSAGE_ALLOCATE_BUFFER
 |

1968 
FORMAT_MESSAGE_FROM_SYSTEM
 |

1969 
FORMAT_MESSAGE_IGNORE_INSERTS
,

1970 
NULL
,

1971 
œ°Eºno
,

1973 (
LPSTR
Ë&
zTemp
,

1976 if–
dwLí
 > 0 ){

1978 
	`sqlôe3BegöBíignMÆloc
();

1979 
zOut
 = 
	`wöMbcsToUtf8
(
zTemp
, 
	`osAªFûeApisANSI
());

1980 
	`sqlôe3EndBíignMÆloc
();

1982 
	`osLoˇlFªe
(
zTemp
);

1986 if–0 =
dwLí
 ){

1987 
	`sqlôe3_¢¥ötf
(
nBuf
, 
zBuf
, "OsEº‹ 0x%lx (%lu)", 
œ°Eºno
,ÜastErrno);

1990 
	`sqlôe3_¢¥ötf
(
nBuf
, 
zBuf
, "%s", 
zOut
);

1992 
	`sqlôe3_‰ì
(
zOut
);

1995 
	}
}

2012 
	#wöLogEº‹
(
a
,
b
,
c
,
d
Ë
	`wöLogEº‹AtLöe
◊,b,c,d,
__LINE__
)

	)

2013 
	$wöLogEº‹AtLöe
(

2014 
îrcode
,

2015 
DWORD
 
œ°Eºno
,

2016 c⁄° *
zFunc
,

2017 c⁄° *
zP©h
,

2018 
iLöe


2020 
zMsg
[500];

2021 
i
;

2023 
zMsg
[0] = 0;

2024 
	`wöGëLa°Eº‹Msg
(
œ°Eºno
, (
zMsg
), zMsg);

2025 
	`as£π
–
îrcode
!=
SQLITE_OK
 );

2026 if–
zP©h
==0 ) zPath = "";

2027 
i
=0; 
zMsg
[i] && zMsg[i]!='\r' && zMsg[i]!='\n'; i++){}

2028 
zMsg
[
i
] = 0;

2029 
	`sqlôe3_log
(
îrcode
,

2031 
iLöe
, 
œ°Eºno
, 
zFunc
, 
zP©h
, 
zMsg


2034  
îrcode
;

2035 
	}
}

2043 #i‚de‡
SQLITE_WIN32_IOERR_RETRY


2044 
	#SQLITE_WIN32_IOERR_RETRY
 10

	)

2046 #i‚de‡
SQLITE_WIN32_IOERR_RETRY_DELAY


2047 
	#SQLITE_WIN32_IOERR_RETRY_DELAY
 25

	)

2049 
	gwöI€ºRëry
 = 
SQLITE_WIN32_IOERR_RETRY
;

2050 
	gwöI€ºRëryDñay
 = 
SQLITE_WIN32_IOERR_RETRY_DELAY
;

2068 #i‡!
deföed
(
wöI€ºC™Rëry1
)

2069 
	#wöI€ºC™Rëry1
(
a
Ë((◊)==
ERROR_ACCESS_DENIED
) || \

2070 ((
a
)==
ERROR_SHARING_VIOLATION
) || \

2071 ((
a
)==
ERROR_LOCK_VIOLATION
) || \

2072 ((
a
)==
ERROR_DEV_NOT_EXIST
) || \

2073 ((
a
)==
ERROR_NETNAME_DELETED
) || \

2074 ((
a
)==
ERROR_SEM_TIMEOUT
) || \

2075 ((
a
)==
ERROR_NETWORK_UNREACHABLE
))

	)

2083 
	$wöRëryI€º
(*
≤Rëry
, 
DWORD
 *
pEº‹
){

2084 
DWORD
 
e
 = 
	`osGëLa°Eº‹
();

2085 if–*
≤Rëry
>=
wöI€ºRëry
 ){

2086 if–
pEº‹
 ){

2087 *
pEº‹
 = 
e
;

2091 if–
	`wöI€ºC™Rëry1
(
e
) ){

2092 
	`sqlôe3_wö32_¶ìp
(
wöI€ºRëryDñay
*(1+*
≤Rëry
));

2093 ++*
≤Rëry
;

2096 #i‡
	`deföed
(
wöI€ºC™Rëry2
)

2097 if–
	`wöI€ºC™Rëry2
(
e
) ){

2098 
	`sqlôe3_wö32_¶ìp
(
wöI€ºRëryDñay
*(1+*
≤Rëry
));

2099 ++*
≤Rëry
;

2103 if–
pEº‹
 ){

2104 *
pEº‹
 = 
e
;

2107 
	}
}

2112 
	$wöLogI€º
(
nRëry
, 
löío
){

2113 if–
nRëry
 ){

2114 
	`sqlôe3_log
(
SQLITE_NOTICE
,

2116 
wöI€ºRëryDñay
*
nRëry
*“Rëry+1)/2, 
löío


2119 
	}
}

2125 #i‡!
deföed
(
SQLITE_OMIT_LOCALTIME
Ë&& deföed(
_WIN32_WCE
) && \

2126 (!
deföed
(
SQLITE_MSVC_LOCALTIME_API
Ë|| !
	gSQLITE_MSVC_LOCALTIME_API
)

2131 
	~<time.h
>

2132 
tm
 *
__cde˛
 
	$loˇ…ime
(c⁄° 
time_t
 *
t
)

2134 
tm
 
y
;

2135 
FILETIME
 
uTm
, 
lTm
;

2136 
SYSTEMTIME
 
pTm
;

2137 
sqlôe3_öt64
 
t64
;

2138 
t64
 = *
t
;

2139 
t64
 = (t64 + 11644473600)*10000000;

2140 
uTm
.
dwLowD©eTime
 = (
DWORD
)(
t64
 & 0xFFFFFFFF);

2141 
uTm
.
dwHighD©eTime
(
DWORD
)(
t64
 >> 32);

2142 
	`osFûeTimeToLoˇlFûeTime
(&
uTm
,&
lTm
);

2143 
	`osFûeTimeToSy°emTime
(&
lTm
,&
pTm
);

2144 
y
.
tm_yór
 = 
pTm
.
wYór
 - 1900;

2145 
y
.
tm_m⁄
 = 
pTm
.
wM⁄th
 - 1;

2146 
y
.
tm_wday
 = 
pTm
.
wDayOfWìk
;

2147 
y
.
tm_mday
 = 
pTm
.
wDay
;

2148 
y
.
tm_hour
 = 
pTm
.
wHour
;

2149 
y
.
tm_mö
 = 
pTm
.
wMöuã
;

2150 
y
.
tm_£c
 = 
pTm
.
wSec⁄d
;

2151  &
y
;

2152 
	}
}

2155 #i‡
SQLITE_OS_WINCE


2159 
	#HANDLE_TO_WINFILE
(
a
Ë(
wöFûe
*)&((*Ô)[-()
	`off£tof
(wöFûe,
h
)]

	)

2164 
	$wö˚MuãxAcquúe
(
HANDLE
 
h
){

2165 
DWORD
 
dwEº
;

2167 
dwEº
 = 
	`osWaôF‹SögÀObje˘
(
h
, 
INFINITE
);

2168 } 
dwEº
 !
WAIT_OBJECT_0
 && dwEº !
WAIT_ABANDONED
);

2169 
	}
}

2173 
	#wö˚MuãxRñó£
(
h
Ë
	`Rñó£Muãx
(h)

	)

2179 
	$wö˚Cª©eLock
(c⁄° *
zFûíame
, 
wöFûe
 *
pFûe
){

2180 
LPWSTR
 
zTok
;

2181 
LPWSTR
 
zName
;

2182 
DWORD
 
œ°Eºno
;

2183 
BOOL
 
bLogged
 = 
FALSE
;

2184 
BOOL
 
bInô
 = 
TRUE
;

2186 
zName
 = 
	`wöUtf8ToUnicode
(
zFûíame
);

2187 if–
zName
==0 ){

2189  
SQLITE_IOERR_NOMEM_BKPT
;

2193 
	`mem£t
(&
pFûe
->
loˇl
, 0, (pFile->local));

2197 
zTok
 = 
	`osCh¨LowîW
(
zName
);

2198 ;*
zTok
;zTok++){

2199 i‡(*
zTok
 == '\\') *zTok = '_';

2203 
pFûe
->
hMuãx
 = 
	`osCª©eMuãxW
(
NULL
, 
FALSE
, 
zName
);

2204 i‡(!
pFûe
->
hMuãx
){

2205 
pFûe
->
œ°Eºno
 = 
	`osGëLa°Eº‹
();

2206 
	`sqlôe3_‰ì
(
zName
);

2207  
	`wöLogEº‹
(
SQLITE_IOERR
, 
pFûe
->
œ°Eºno
,

2208 "wö˚Cª©eLock1", 
zFûíame
);

2212 
	`wö˚MuãxAcquúe
(
pFûe
->
hMuãx
);

2218 
	`osCh¨UµîW
(
zName
);

2219 
pFûe
->
hSh¨ed
 = 
	`osCª©eFûeM≠pögW
(
INVALID_HANDLE_VALUE
, 
NULL
,

2220 
PAGE_READWRITE
, 0, (
wö˚Lock
),

2221 
zName
);

2225 
œ°Eºno
 = 
	`osGëLa°Eº‹
();

2226 i‡(
œ°Eºno
 =
ERROR_ALREADY_EXISTS
){

2227 
bInô
 = 
FALSE
;

2230 
	`sqlôe3_‰ì
(
zName
);

2233 if–
pFûe
->
hSh¨ed
 ){

2234 
pFûe
->
sh¨ed
 = (
wö˚Lock
*)
	`osM≠VõwOfFûe
’Fûe->
hSh¨ed
,

2235 
FILE_MAP_READ
|
FILE_MAP_WRITE
, 0, 0, (
wö˚Lock
));

2237 if–!
pFûe
->
sh¨ed
 ){

2238 
pFûe
->
œ°Eºno
 = 
	`osGëLa°Eº‹
();

2239 
	`wöLogEº‹
(
SQLITE_IOERR
, 
pFûe
->
œ°Eºno
,

2240 "wö˚Cª©eLock2", 
zFûíame
);

2241 
bLogged
 = 
TRUE
;

2242 
	`osClo£H™dÀ
(
pFûe
->
hSh¨ed
);

2243 
pFûe
->
hSh¨ed
 = 
NULL
;

2248 if–
pFûe
->
hSh¨ed
==
NULL
 ){

2249 if–!
bLogged
 ){

2250 
pFûe
->
œ°Eºno
 =ÜastErrno;

2251 
	`wöLogEº‹
(
SQLITE_IOERR
, 
pFûe
->
œ°Eºno
,

2252 "wö˚Cª©eLock3", 
zFûíame
);

2253 
bLogged
 = 
TRUE
;

2255 
	`wö˚MuãxRñó£
(
pFûe
->
hMuãx
);

2256 
	`osClo£H™dÀ
(
pFûe
->
hMuãx
);

2257 
pFûe
->
hMuãx
 = 
NULL
;

2258  
SQLITE_IOERR
;

2262 if–
bInô
 ){

2263 
	`mem£t
(
pFûe
->
sh¨ed
, 0, (
wö˚Lock
));

2266 
	`wö˚MuãxRñó£
(
pFûe
->
hMuãx
);

2267  
SQLITE_OK
;

2268 
	}
}

2273 
	$wö˚De°royLock
(
wöFûe
 *
pFûe
){

2274 i‡(
pFûe
->
hMuãx
){

2276 
	`wö˚MuãxAcquúe
(
pFûe
->
hMuãx
);

2280 i‡(
pFûe
->
loˇl
.
nRódîs
){

2281 
pFûe
->
sh¨ed
->
nRódîs
 --;

2283 i‡(
pFûe
->
loˇl
.
bRe£rved
){

2284 
pFûe
->
sh¨ed
->
bRe£rved
 = 
FALSE
;

2286 i‡(
pFûe
->
loˇl
.
bPídög
){

2287 
pFûe
->
sh¨ed
->
bPídög
 = 
FALSE
;

2289 i‡(
pFûe
->
loˇl
.
bEx˛usive
){

2290 
pFûe
->
sh¨ed
->
bEx˛usive
 = 
FALSE
;

2294 
	`osUnm≠VõwOfFûe
(
pFûe
->
sh¨ed
);

2295 
	`osClo£H™dÀ
(
pFûe
->
hSh¨ed
);

2298 
	`wö˚MuãxRñó£
(
pFûe
->
hMuãx
);

2299 
	`osClo£H™dÀ
(
pFûe
->
hMuãx
);

2300 
pFûe
->
hMuãx
 = 
NULL
;

2302 
	}
}

2307 
BOOL
 
	$wö˚LockFûe
(

2308 
LPHANDLE
 
phFûe
,

2309 
DWORD
 
dwFûeOff£tLow
,

2310 
DWORD
 
dwFûeOff£tHigh
,

2311 
DWORD
 
nNumbîOfByãsToLockLow
,

2312 
DWORD
 
nNumbîOfByãsToLockHigh


2314 
wöFûe
 *
pFûe
 = 
	`HANDLE_TO_WINFILE
(
phFûe
);

2315 
BOOL
 
bRëu∫
 = 
FALSE
;

2317 
	`UNUSED_PARAMETER
(
dwFûeOff£tHigh
);

2318 
	`UNUSED_PARAMETER
(
nNumbîOfByãsToLockHigh
);

2320 i‡(!
pFûe
->
hMuãx
Ë 
TRUE
;

2321 
	`wö˚MuãxAcquúe
(
pFûe
->
hMuãx
);

2324 i‡(
dwFûeOff£tLow
 =(
DWORD
)
SHARED_FIRST


2325 && 
nNumbîOfByãsToLockLow
 =(
DWORD
)
SHARED_SIZE
){

2326 i‡(
pFûe
->
sh¨ed
->
nRódîs
 =0 &&ÖFûe->sh¨ed->
bEx˛usive
 == 0){

2327 
pFûe
->
sh¨ed
->
bEx˛usive
 = 
TRUE
;

2328 
pFûe
->
loˇl
.
bEx˛usive
 = 
TRUE
;

2329 
bRëu∫
 = 
TRUE
;

2334 i‡(
dwFûeOff£tLow
 =(
DWORD
)
SHARED_FIRST
 &&

2335 
nNumbîOfByãsToLockLow
 == 1){

2336 i‡(
pFûe
->
sh¨ed
->
bEx˛usive
 == 0){

2337 
pFûe
->
loˇl
.
nRódîs
 ++;

2338 i‡(
pFûe
->
loˇl
.
nRódîs
 == 1){

2339 
pFûe
->
sh¨ed
->
nRódîs
 ++;

2341 
bRëu∫
 = 
TRUE
;

2346 i‡(
dwFûeOff£tLow
 =(
DWORD
)
PENDING_BYTE


2347 && 
nNumbîOfByãsToLockLow
 == 1){

2349 i‡(
pFûe
->
sh¨ed
->
bPídög
 == 0) {

2350 
pFûe
->
sh¨ed
->
bPídög
 = 
TRUE
;

2351 
pFûe
->
loˇl
.
bPídög
 = 
TRUE
;

2352 
bRëu∫
 = 
TRUE
;

2357 i‡(
dwFûeOff£tLow
 =(
DWORD
)
RESERVED_BYTE


2358 && 
nNumbîOfByãsToLockLow
 == 1){

2359 i‡(
pFûe
->
sh¨ed
->
bRe£rved
 == 0) {

2360 
pFûe
->
sh¨ed
->
bRe£rved
 = 
TRUE
;

2361 
pFûe
->
loˇl
.
bRe£rved
 = 
TRUE
;

2362 
bRëu∫
 = 
TRUE
;

2366 
	`wö˚MuãxRñó£
(
pFûe
->
hMuãx
);

2367  
bRëu∫
;

2368 
	}
}

2373 
BOOL
 
	$wö˚U∆ockFûe
(

2374 
LPHANDLE
 
phFûe
,

2375 
DWORD
 
dwFûeOff£tLow
,

2376 
DWORD
 
dwFûeOff£tHigh
,

2377 
DWORD
 
nNumbîOfByãsToU∆ockLow
,

2378 
DWORD
 
nNumbîOfByãsToU∆ockHigh


2380 
wöFûe
 *
pFûe
 = 
	`HANDLE_TO_WINFILE
(
phFûe
);

2381 
BOOL
 
bRëu∫
 = 
FALSE
;

2383 
	`UNUSED_PARAMETER
(
dwFûeOff£tHigh
);

2384 
	`UNUSED_PARAMETER
(
nNumbîOfByãsToU∆ockHigh
);

2386 i‡(!
pFûe
->
hMuãx
Ë 
TRUE
;

2387 
	`wö˚MuãxAcquúe
(
pFûe
->
hMuãx
);

2390 i‡(
dwFûeOff£tLow
 =(
DWORD
)
SHARED_FIRST
){

2392 i‡(
pFûe
->
loˇl
.
bEx˛usive
){

2393 
	`as£π
(
nNumbîOfByãsToU∆ockLow
 =(
DWORD
)
SHARED_SIZE
);

2394 
pFûe
->
loˇl
.
bEx˛usive
 = 
FALSE
;

2395 
pFûe
->
sh¨ed
->
bEx˛usive
 = 
FALSE
;

2396 
bRëu∫
 = 
TRUE
;

2400 i‡(
pFûe
->
loˇl
.
nRódîs
){

2401 
	`as£π
(
nNumbîOfByãsToU∆ockLow
 =(
DWORD
)
SHARED_SIZE


2402 || 
nNumbîOfByãsToU∆ockLow
 == 1);

2403 
pFûe
->
loˇl
.
nRódîs
 --;

2404 i‡(
pFûe
->
loˇl
.
nRódîs
 == 0)

2406 
pFûe
->
sh¨ed
->
nRódîs
 --;

2408 
bRëu∫
 = 
TRUE
;

2413 i‡(
dwFûeOff£tLow
 =(
DWORD
)
PENDING_BYTE


2414 && 
nNumbîOfByãsToU∆ockLow
 == 1){

2415 i‡(
pFûe
->
loˇl
.
bPídög
){

2416 
pFûe
->
loˇl
.
bPídög
 = 
FALSE
;

2417 
pFûe
->
sh¨ed
->
bPídög
 = 
FALSE
;

2418 
bRëu∫
 = 
TRUE
;

2422 i‡(
dwFûeOff£tLow
 =(
DWORD
)
RESERVED_BYTE


2423 && 
nNumbîOfByãsToU∆ockLow
 == 1){

2424 i‡(
pFûe
->
loˇl
.
bRe£rved
) {

2425 
pFûe
->
loˇl
.
bRe£rved
 = 
FALSE
;

2426 
pFûe
->
sh¨ed
->
bRe£rved
 = 
FALSE
;

2427 
bRëu∫
 = 
TRUE
;

2431 
	`wö˚MuãxRñó£
(
pFûe
->
hMuãx
);

2432  
bRëu∫
;

2433 
	}
}

2442 
BOOL
 
	$wöLockFûe
(

2443 
LPHANDLE
 
phFûe
,

2444 
DWORD
 
Êags
,

2445 
DWORD
 
off£tLow
,

2446 
DWORD
 
off£tHigh
,

2447 
DWORD
 
numByãsLow
,

2448 
DWORD
 
numByãsHigh


2450 #i‡
SQLITE_OS_WINCE


2455  
	`wö˚LockFûe
(
phFûe
, 
off£tLow
, 
off£tHigh
,

2456 
numByãsLow
, 
numByãsHigh
);

2458 if–
	`osIsNT
() ){

2459 
OVERLAPPED
 
ovÕ
;

2460 
	`mem£t
(&
ovÕ
, 0, (
OVERLAPPED
));

2461 
ovÕ
.
Off£t
 = 
off£tLow
;

2462 
ovÕ
.
Off£tHigh
 = 
off£tHigh
;

2463  
	`osLockFûeEx
(*
phFûe
, 
Êags
, 0, 
numByãsLow
, 
numByãsHigh
, &
ovÕ
);

2465  
	`osLockFûe
(*
phFûe
, 
off£tLow
, 
off£tHigh
, 
numByãsLow
,

2466 
numByãsHigh
);

2469 
	}
}

2474 
BOOL
 
	$wöU∆ockFûe
(

2475 
LPHANDLE
 
phFûe
,

2476 
DWORD
 
off£tLow
,

2477 
DWORD
 
off£tHigh
,

2478 
DWORD
 
numByãsLow
,

2479 
DWORD
 
numByãsHigh


2481 #i‡
SQLITE_OS_WINCE


2486  
	`wö˚U∆ockFûe
(
phFûe
, 
off£tLow
, 
off£tHigh
,

2487 
numByãsLow
, 
numByãsHigh
);

2489 if–
	`osIsNT
() ){

2490 
OVERLAPPED
 
ovÕ
;

2491 
	`mem£t
(&
ovÕ
, 0, (
OVERLAPPED
));

2492 
ovÕ
.
Off£t
 = 
off£tLow
;

2493 
ovÕ
.
Off£tHigh
 = 
off£tHigh
;

2494  
	`osU∆ockFûeEx
(*
phFûe
, 0, 
numByãsLow
, 
numByãsHigh
, &
ovÕ
);

2496  
	`osU∆ockFûe
(*
phFûe
, 
off£tLow
, 
off£tHigh
, 
numByãsLow
,

2497 
numByãsHigh
);

2500 
	}
}

2510 #i‚de‡
INVALID_SET_FILE_POINTER


2511 
	#INVALID_SET_FILE_POINTER
 ((
DWORD
)-1)

	)

2519 
	$wöSìkFûe
(
wöFûe
 *
pFûe
, 
sqlôe3_öt64
 
iOff£t
){

2520 #i‡!
SQLITE_OS_WINRT


2521 
LONG
 
uµîBôs
;

2522 
LONG
 
lowîBôs
;

2523 
DWORD
 
dwRë
;

2524 
DWORD
 
œ°Eºno
;

2526 
	`OSTRACE
(("SEEK fûe=%p, off£t=%Œd\n", 
pFûe
->
h
, 
iOff£t
));

2528 
uµîBôs
 = (
LONG
)((
iOff£t
>>32) & 0x7fffffff);

2529 
lowîBôs
 = (
LONG
)(
iOff£t
 & 0xffffffff);

2538 
dwRë
 = 
	`osSëFûePoöãr
(
pFûe
->
h
, 
lowîBôs
, &
uµîBôs
, 
FILE_BEGIN
);

2540 if–(
dwRë
==
INVALID_SET_FILE_POINTER


2541 && ((
œ°Eºno
 = 
	`osGëLa°Eº‹
())!=
NO_ERROR
)) ){

2542 
pFûe
->
œ°Eºno
 =ÜastErrno;

2543 
	`wöLogEº‹
(
SQLITE_IOERR_SEEK
, 
pFûe
->
œ°Eºno
,

2544 "wöSìkFûe", 
pFûe
->
zP©h
);

2545 
	`OSTRACE
(("SEEK fûe=%p,Ñc=SQLITE_IOERR_SEEK\n", 
pFûe
->
h
));

2549 
	`OSTRACE
(("SEEK fûe=%p,Ñc=SQLITE_OK\n", 
pFûe
->
h
));

2556 
LARGE_INTEGER
 
x
;

2557 
BOOL
 
bRë
;

2559 
x
.
QuadP¨t
 = 
iOff£t
;

2560 
bRë
 = 
	`osSëFûePoöãrEx
(
pFûe
->
h
, 
x
, 0, 
FILE_BEGIN
);

2562 if(!
bRë
){

2563 
pFûe
->
œ°Eºno
 = 
	`osGëLa°Eº‹
();

2564 
	`wöLogEº‹
(
SQLITE_IOERR_SEEK
, 
pFûe
->
œ°Eºno
,

2565 "wöSìkFûe", 
pFûe
->
zP©h
);

2566 
	`OSTRACE
(("SEEK fûe=%p,Ñc=SQLITE_IOERR_SEEK\n", 
pFûe
->
h
));

2570 
	`OSTRACE
(("SEEK fûe=%p,Ñc=SQLITE_OK\n", 
pFûe
->
h
));

2573 
	}
}

2575 #i‡
SQLITE_MAX_MMAP_SIZE
>0

2577 
wöM≠fûe
(
wöFûe
*, 
sqlôe3_öt64
);

2578 
wöUnm≠fûe
(
wöFûe
*);

2591 
	#MX_CLOSE_ATTEMPT
 3

	)

2592 
	$wöClo£
(
sqlôe3_fûe
 *
id
){

2593 
rc
, 
˙t
 = 0;

2594 
wöFûe
 *
pFûe
 = (wöFûe*)
id
;

2596 
	`as£π
–
id
!=0 );

2597 #i‚de‡
SQLITE_OMIT_WAL


2598 
	`as£π
–
pFûe
->
pShm
==0 );

2600 
	`as£π
–
pFûe
->
h
!=
NULL
 &&ÖFûe->h!=
INVALID_HANDLE_VALUE
 );

2601 
	`OSTRACE
(("CLOSEÖid=%lu,ÖFile=%p, file=%p\n",

2602 
	`osGëCuºítPro˚ssId
(), 
pFûe
,ÖFûe->
h
));

2604 #i‡
SQLITE_MAX_MMAP_SIZE
>0

2605 
	`wöUnm≠fûe
(
pFûe
);

2609 
rc
 = 
	`osClo£H™dÀ
(
pFûe
->
h
);

2611 } 
rc
==0 && ++
˙t
 < 
MX_CLOSE_ATTEMPT
 && (
	`sqlôe3_wö32_¶ìp
(100), 1) );

2612 #i‡
SQLITE_OS_WINCE


2613 
	#WINCE_DELETION_ATTEMPTS
 3

	)

2614 
	`wö˚De°royLock
(
pFûe
);

2615 if–
pFûe
->
zDñëeOnClo£
 ){

2616 
˙t
 = 0;

2618 
	`osDñëeFûeW
(
pFûe
->
zDñëeOnClo£
)==0

2619 && 
	`osGëFûeAâribuãsW
(
pFûe
->
zDñëeOnClo£
)!=0xffffffff

2620 && 
˙t
++ < 
WINCE_DELETION_ATTEMPTS


2622 
	`sqlôe3_wö32_¶ìp
(100);

2624 
	`sqlôe3_‰ì
(
pFûe
->
zDñëeOnClo£
);

2627 if–
rc
 ){

2628 
pFûe
->
h
 = 
NULL
;

2630 
	`O≥nCou¡î
(-1);

2631 
	`OSTRACE
(("CLOSEÖid=%lu,ÖFile=%p, file=%p,Ñc=%s\n",

2632 
	`osGëCuºítPro˚ssId
(), 
pFûe
,ÖFûe->
h
, 
rc
 ? "ok" : "failed"));

2633  
rc
 ? 
SQLITE_OK


2634 : 
	`wöLogEº‹
(
SQLITE_IOERR_CLOSE
, 
	`osGëLa°Eº‹
(),

2635 "wöClo£", 
pFûe
->
zP©h
);

2636 
	}
}

2643 
	$wöRód
(

2644 
sqlôe3_fûe
 *
id
,

2645 *
pBuf
,

2646 
amt
,

2647 
sqlôe3_öt64
 
off£t


2649 #i‡!
SQLITE_OS_WINCE
 && !
	`deföed
(
SQLITE_WIN32_NO_OVERLAPPED
)

2650 
OVERLAPPED
 
ovîœµed
;

2652 
wöFûe
 *
pFûe
 = (wöFûe*)
id
;

2653 
DWORD
 
nRód
;

2654 
nRëry
 = 0;

2656 
	`as£π
–
id
!=0 );

2657 
	`as£π
–
amt
>0 );

2658 
	`as£π
–
off£t
>=0 );

2659 
	`SimuœãIOEº‹
( 
SQLITE_IOERR_READ
);

2660 
	`OSTRACE
(("READÖid=%lu,ÖFile=%p, file=%p, buffer=%p,ámount=%d, "

2661 "off£t=%Œd,Üock=%d\n", 
	`osGëCuºítPro˚ssId
(), 
pFûe
,

2662 
pFûe
->
h
, 
pBuf
, 
amt
, 
off£t
,ÖFûe->
lockty≥
));

2664 #i‡
SQLITE_MAX_MMAP_SIZE
>0

2667 if–
off£t
<
pFûe
->
mm≠Size
 ){

2668 if–
off£t
+
amt
 <
pFûe
->
mm≠Size
 ){

2669 
	`mem˝y
(
pBuf
, &((
u8
 *)(
pFûe
->
pM≠Regi⁄
))[
off£t
], 
amt
);

2670 
	`OSTRACE
(("READ-MMAPÖid=%lu,ÖFile=%p, file=%p,Ñc=SQLITE_OK\n",

2671 
	`osGëCuºítPro˚ssId
(), 
pFûe
,ÖFûe->
h
));

2672  
SQLITE_OK
;

2674 
nC›y
 = ()(
pFûe
->
mm≠Size
 - 
off£t
);

2675 
	`mem˝y
(
pBuf
, &((
u8
 *)(
pFûe
->
pM≠Regi⁄
))[
off£t
], 
nC›y
);

2676 
pBuf
 = &((
u8
 *ÌBuf)[
nC›y
];

2677 
amt
 -
nC›y
;

2678 
off£t
 +
nC›y
;

2683 #i‡
SQLITE_OS_WINCE
 || 
	`deföed
(
SQLITE_WIN32_NO_OVERLAPPED
)

2684 if–
	`wöSìkFûe
(
pFûe
, 
off£t
) ){

2685 
	`OSTRACE
(("READÖid=%lu,ÖFile=%p, file=%p,Ñc=SQLITE_FULL\n",

2686 
	`osGëCuºítPro˚ssId
(), 
pFûe
,ÖFûe->
h
));

2687  
SQLITE_FULL
;

2689  !
	`osRódFûe
(
pFûe
->
h
, 
pBuf
, 
amt
, &
nRód
, 0) ){

2691 
	`mem£t
(&
ovîœµed
, 0, (
OVERLAPPED
));

2692 
ovîœµed
.
Off£t
 = (
LONG
)(
off£t
 & 0xffffffff);

2693 
ovîœµed
.
Off£tHigh
 = (
LONG
)((
off£t
>>32) & 0x7fffffff);

2694  !
	`osRódFûe
(
pFûe
->
h
, 
pBuf
, 
amt
, &
nRód
, &
ovîœµed
) &&

2695 
	`osGëLa°Eº‹
()!=
ERROR_HANDLE_EOF
 ){

2697 
DWORD
 
œ°Eºno
;

2698 if–
	`wöRëryI€º
(&
nRëry
, &
œ°Eºno
) ) ;

2699 
pFûe
->
œ°Eºno
 =ÜastErrno;

2700 
	`OSTRACE
(("READÖid=%lu,ÖFile=%p, file=%p,Ñc=SQLITE_IOERR_READ\n",

2701 
	`osGëCuºítPro˚ssId
(), 
pFûe
,ÖFûe->
h
));

2702  
	`wöLogEº‹
(
SQLITE_IOERR_READ
, 
pFûe
->
œ°Eºno
,

2703 "wöRód", 
pFûe
->
zP©h
);

2705 
	`wöLogI€º
(
nRëry
, 
__LINE__
);

2706 if–
nRód
<(
DWORD
)
amt
 ){

2708 
	`mem£t
(&((*)
pBuf
)[
nRód
], 0, 
amt
-nRead);

2709 
	`OSTRACE
(("READÖid=%lu,ÖFile=%p, file=%p,Ñc=SQLITE_IOERR_SHORT_READ\n",

2710 
	`osGëCuºítPro˚ssId
(), 
pFûe
,ÖFûe->
h
));

2711  
SQLITE_IOERR_SHORT_READ
;

2714 
	`OSTRACE
(("READÖid=%lu,ÖFile=%p, file=%p,Ñc=SQLITE_OK\n",

2715 
	`osGëCuºítPro˚ssId
(), 
pFûe
,ÖFûe->
h
));

2716  
SQLITE_OK
;

2717 
	}
}

2723 
	$wöWrôe
(

2724 
sqlôe3_fûe
 *
id
,

2725 c⁄° *
pBuf
,

2726 
amt
,

2727 
sqlôe3_öt64
 
off£t


2729 
rc
 = 0;

2730 
wöFûe
 *
pFûe
 = (wöFûe*)
id
;

2731 
nRëry
 = 0;

2733 
	`as£π
–
amt
>0 );

2734 
	`as£π
–
pFûe
 );

2735 
	`SimuœãIOEº‹
( 
SQLITE_IOERR_WRITE
);

2736 
	`SimuœãDiskfuŒEº‹
( 
SQLITE_FULL
);

2738 
	`OSTRACE
(("WRITEÖid=%lu,ÖFile=%p, file=%p, buffer=%p,ámount=%d, "

2739 "off£t=%Œd,Üock=%d\n", 
	`osGëCuºítPro˚ssId
(), 
pFûe
,

2740 
pFûe
->
h
, 
pBuf
, 
amt
, 
off£t
,ÖFûe->
lockty≥
));

2742 #i‡
	`deföed
(
SQLITE_MMAP_READWRITE
Ë&& 
SQLITE_MAX_MMAP_SIZE
>0

2745 if–
off£t
<
pFûe
->
mm≠Size
 ){

2746 if–
off£t
+
amt
 <
pFûe
->
mm≠Size
 ){

2747 
	`mem˝y
(&((
u8
 *)(
pFûe
->
pM≠Regi⁄
))[
off£t
], 
pBuf
, 
amt
);

2748 
	`OSTRACE
(("WRITE-MMAPÖid=%lu,ÖFile=%p, file=%p,Ñc=SQLITE_OK\n",

2749 
	`osGëCuºítPro˚ssId
(), 
pFûe
,ÖFûe->
h
));

2750  
SQLITE_OK
;

2752 
nC›y
 = ()(
pFûe
->
mm≠Size
 - 
off£t
);

2753 
	`mem˝y
(&((
u8
 *)(
pFûe
->
pM≠Regi⁄
))[
off£t
], 
pBuf
, 
nC›y
);

2754 
pBuf
 = &((
u8
 *ÌBuf)[
nC›y
];

2755 
amt
 -
nC›y
;

2756 
off£t
 +
nC›y
;

2761 #i‡
SQLITE_OS_WINCE
 || 
	`deföed
(
SQLITE_WIN32_NO_OVERLAPPED
)

2762 
rc
 = 
	`wöSìkFûe
(
pFûe
, 
off£t
);

2763 if–
rc
==0 ){

2767 #i‡!
SQLITE_OS_WINCE
 && !
	`deföed
(
SQLITE_WIN32_NO_OVERLAPPED
)

2768 
OVERLAPPED
 
ovîœµed
;

2770 
u8
 *
aRem
 = (u8 *)
pBuf
;

2771 
nRem
 = 
amt
;

2772 
DWORD
 
nWrôe
;

2773 
DWORD
 
œ°Eºno
 = 
NO_ERROR
;

2775 #i‡!
SQLITE_OS_WINCE
 && !
	`deföed
(
SQLITE_WIN32_NO_OVERLAPPED
)

2776 
	`mem£t
(&
ovîœµed
, 0, (
OVERLAPPED
));

2777 
ovîœµed
.
Off£t
 = (
LONG
)(
off£t
 & 0xffffffff);

2778 
ovîœµed
.
Off£tHigh
 = (
LONG
)((
off£t
>>32) & 0x7fffffff);

2781  
nRem
>0 ){

2782 #i‡
SQLITE_OS_WINCE
 || 
	`deföed
(
SQLITE_WIN32_NO_OVERLAPPED
)

2783 if–!
	`osWrôeFûe
(
pFûe
->
h
, 
aRem
, 
nRem
, &
nWrôe
, 0) ){

2785 if–!
	`osWrôeFûe
(
pFûe
->
h
, 
aRem
, 
nRem
, &
nWrôe
, &
ovîœµed
) ){

2787 if–
	`wöRëryI€º
(&
nRëry
, &
œ°Eºno
) ) ;

2790 
	`as£π
–
nWrôe
==0 ||ÇWrôe<=(
DWORD
)
nRem
 );

2791 if–
nWrôe
==0 ||ÇWrôe>(
DWORD
)
nRem
 ){

2792 
œ°Eºno
 = 
	`osGëLa°Eº‹
();

2795 #i‡!
SQLITE_OS_WINCE
 && !
	`deföed
(
SQLITE_WIN32_NO_OVERLAPPED
)

2796 
off£t
 +
nWrôe
;

2797 
ovîœµed
.
Off£t
 = (
LONG
)(
off£t
 & 0xffffffff);

2798 
ovîœµed
.
Off£tHigh
 = (
LONG
)((
off£t
>>32) & 0x7fffffff);

2800 
aRem
 +
nWrôe
;

2801 
nRem
 -
nWrôe
;

2803 if–
nRem
>0 ){

2804 
pFûe
->
œ°Eºno
 =ÜastErrno;

2805 
rc
 = 1;

2809 if–
rc
 ){

2810 if––
pFûe
->
œ°Eºno
==
ERROR_HANDLE_DISK_FULL
 )

2811 || ( 
pFûe
->
œ°Eºno
==
ERROR_DISK_FULL
 )){

2812 
	`OSTRACE
(("WRITEÖid=%lu,ÖFile=%p, file=%p,Ñc=SQLITE_FULL\n",

2813 
	`osGëCuºítPro˚ssId
(), 
pFûe
,ÖFûe->
h
));

2814  
	`wöLogEº‹
(
SQLITE_FULL
, 
pFûe
->
œ°Eºno
,

2815 "wöWrôe1", 
pFûe
->
zP©h
);

2817 
	`OSTRACE
(("WRITEÖid=%lu,ÖFile=%p, file=%p,Ñc=SQLITE_IOERR_WRITE\n",

2818 
	`osGëCuºítPro˚ssId
(), 
pFûe
,ÖFûe->
h
));

2819  
	`wöLogEº‹
(
SQLITE_IOERR_WRITE
, 
pFûe
->
œ°Eºno
,

2820 "wöWrôe2", 
pFûe
->
zP©h
);

2822 
	`wöLogI€º
(
nRëry
, 
__LINE__
);

2824 
	`OSTRACE
(("WRITEÖid=%lu,ÖFile=%p, file=%p,Ñc=SQLITE_OK\n",

2825 
	`osGëCuºítPro˚ssId
(), 
pFûe
,ÖFûe->
h
));

2826  
SQLITE_OK
;

2827 
	}
}

2832 
	$wöTrunˇã
(
sqlôe3_fûe
 *
id
, 
sqlôe3_öt64
 
nByã
){

2833 
wöFûe
 *
pFûe
 = (wöFûe*)
id
;

2834 
rc
 = 
SQLITE_OK
;

2835 
DWORD
 
œ°Eºno
;

2837 
	`as£π
–
pFûe
 );

2838 
	`SimuœãIOEº‹
( 
SQLITE_IOERR_TRUNCATE
);

2839 
	`OSTRACE
(("TRUNCATEÖid=%lu,ÖFile=%p, file=%p, size=%lld,Üock=%d\n",

2840 
	`osGëCuºítPro˚ssId
(), 
pFûe
,ÖFûe->
h
, 
nByã
,ÖFûe->
lockty≥
));

2847 if–
pFûe
->
szChunk
>0 ){

2848 
nByã
 = (“Byã + 
pFûe
->
szChunk
 - 1)/pFile->szChunk) *ÖFile->szChunk;

2852 if–
	`wöSìkFûe
(
pFûe
, 
nByã
) ){

2853 
rc
 = 
	`wöLogEº‹
(
SQLITE_IOERR_TRUNCATE
, 
pFûe
->
œ°Eºno
,

2854 "wöTrunˇã1", 
pFûe
->
zP©h
);

2855 }if–0==
	`osSëEndOfFûe
(
pFûe
->
h
) &&

2856 ((
œ°Eºno
 = 
	`osGëLa°Eº‹
())!=
ERROR_USER_MAPPED_FILE
) ){

2857 
pFûe
->
œ°Eºno
 =ÜastErrno;

2858 
rc
 = 
	`wöLogEº‹
(
SQLITE_IOERR_TRUNCATE
, 
pFûe
->
œ°Eºno
,

2859 "wöTrunˇã2", 
pFûe
->
zP©h
);

2862 #i‡
SQLITE_MAX_MMAP_SIZE
>0

2867 if–
pFûe
->
pM≠Regi⁄
 && 
nByã
<pFûe->
mm≠Size
 ){

2868 
pFûe
->
mm≠Size
 = 
nByã
;

2872 
	`OSTRACE
(("TRUNCATEÖid=%lu,ÖFile=%p, file=%p,Ñc=%s\n",

2873 
	`osGëCuºítPro˚ssId
(), 
pFûe
,ÖFûe->
h
, 
	`sqlôe3EºName
(
rc
)));

2874  
rc
;

2875 
	}
}

2877 #ifde‡
SQLITE_TEST


2882 
	gsqlôe3_sync_cou¡
 = 0;

2883 
	gsqlôe3_fuŒsync_cou¡
 = 0;

2889 
	$wöSync
(
sqlôe3_fûe
 *
id
, 
Êags
){

2890 #i‚de‡
SQLITE_NO_SYNC


2894 
BOOL
 
rc
;

2896 #i‡!
	`deföed
(
NDEBUG
Ë|| !deföed(
SQLITE_NO_SYNC
) || \

2897 
	`deföed
(
SQLITE_HAVE_OS_TRACE
)

2902 
wöFûe
 *
pFûe
 = (wöFûe*)
id
;

2904 
	`UNUSED_PARAMETER
(
id
);

2907 
	`as£π
–
pFûe
 );

2909 
	`as£π
((
Êags
&0x0F)==
SQLITE_SYNC_NORMAL


2910 || (
Êags
&0x0F)==
SQLITE_SYNC_FULL


2916 
	`SimuœãDiskfuŒEº‹
– 
SQLITE_FULL
 );

2918 
	`OSTRACE
(("SYNCÖid=%lu,ÖFile=%p, file=%p, flags=%x,Üock=%d\n",

2919 
	`osGëCuºítPro˚ssId
(), 
pFûe
,ÖFûe->
h
, 
Êags
,

2920 
pFûe
->
lockty≥
));

2922 #i‚de‡
SQLITE_TEST


2923 
	`UNUSED_PARAMETER
(
Êags
);

2925 if–(
Êags
&0x0F)==
SQLITE_SYNC_FULL
 ){

2926 
sqlôe3_fuŒsync_cou¡
++;

2928 
sqlôe3_sync_cou¡
++;

2934 #ifde‡
SQLITE_NO_SYNC


2935 
	`OSTRACE
(("SYNC-NOPÖid=%lu,ÖFile=%p, file=%p,Ñc=SQLITE_OK\n",

2936 
	`osGëCuºítPro˚ssId
(), 
pFûe
,ÖFûe->
h
));

2937  
SQLITE_OK
;

2939 #i‡
SQLITE_MAX_MMAP_SIZE
>0

2940 if–
pFûe
->
pM≠Regi⁄
 ){

2941 if–
	`osFlushVõwOfFûe
(
pFûe
->
pM≠Regi⁄
, 0) ){

2942 
	`OSTRACE
(("SYNC-MMAPÖid=%lu,ÖFile=%p,ÖMapRegion=%p, "

2943 "rc=SQLITE_OK\n", 
	`osGëCuºítPro˚ssId
(),

2944 
pFûe
,ÖFûe->
pM≠Regi⁄
));

2946 
pFûe
->
œ°Eºno
 = 
	`osGëLa°Eº‹
();

2947 
	`OSTRACE
(("SYNC-MMAPÖid=%lu,ÖFile=%p,ÖMapRegion=%p, "

2948 "rc=SQLITE_IOERR_MMAP\n", 
	`osGëCuºítPro˚ssId
(),

2949 
pFûe
,ÖFûe->
pM≠Regi⁄
));

2950  
	`wöLogEº‹
(
SQLITE_IOERR_MMAP
, 
pFûe
->
œ°Eºno
,

2951 "wöSync1", 
pFûe
->
zP©h
);

2955 
rc
 = 
	`osFlushFûeBuf„rs
(
pFûe
->
h
);

2956 
	`SimuœãIOEº‹
–
rc
=
FALSE
 );

2957 if–
rc
 ){

2958 
	`OSTRACE
(("SYNCÖid=%lu,ÖFile=%p, file=%p,Ñc=SQLITE_OK\n",

2959 
	`osGëCuºítPro˚ssId
(), 
pFûe
,ÖFûe->
h
));

2960  
SQLITE_OK
;

2962 
pFûe
->
œ°Eºno
 = 
	`osGëLa°Eº‹
();

2963 
	`OSTRACE
(("SYNCÖid=%lu,ÖFile=%p, file=%p,Ñc=SQLITE_IOERR_FSYNC\n",

2964 
	`osGëCuºítPro˚ssId
(), 
pFûe
,ÖFûe->
h
));

2965  
	`wöLogEº‹
(
SQLITE_IOERR_FSYNC
, 
pFûe
->
œ°Eºno
,

2966 "wöSync2", 
pFûe
->
zP©h
);

2969 
	}
}

2974 
	$wöFûeSize
(
sqlôe3_fûe
 *
id
, 
sqlôe3_öt64
 *
pSize
){

2975 
wöFûe
 *
pFûe
 = (wöFûe*)
id
;

2976 
rc
 = 
SQLITE_OK
;

2978 
	`as£π
–
id
!=0 );

2979 
	`as£π
–
pSize
!=0 );

2980 
	`SimuœãIOEº‹
( 
SQLITE_IOERR_FSTAT
);

2981 
	`OSTRACE
(("SIZE fûe=%p,ÖSize=%p\n", 
pFûe
->
h
, 
pSize
));

2983 #i‡
SQLITE_OS_WINRT


2985 
FILE_STANDARD_INFO
 
öfo
;

2986 if–
	`osGëFûeInf‹m©i⁄ByH™dÀEx
(
pFûe
->
h
, 
FûeSènd¨dInfo
,

2987 &
öfo
, (info)) ){

2988 *
pSize
 = 
öfo
.
EndOfFûe
.
QuadP¨t
;

2990 
pFûe
->
œ°Eºno
 = 
	`osGëLa°Eº‹
();

2991 
rc
 = 
	`wöLogEº‹
(
SQLITE_IOERR_FSTAT
, 
pFûe
->
œ°Eºno
,

2992 "wöFûeSize", 
pFûe
->
zP©h
);

2997 
DWORD
 
uµîBôs
;

2998 
DWORD
 
lowîBôs
;

2999 
DWORD
 
œ°Eºno
;

3001 
lowîBôs
 = 
	`osGëFûeSize
(
pFûe
->
h
, &
uµîBôs
);

3002 *
pSize
 = (((
sqlôe3_öt64
)
uµîBôs
)<<32Ë+ 
lowîBôs
;

3003 if–(
lowîBôs
 =
INVALID_FILE_SIZE
)

3004 && ((
œ°Eºno
 = 
	`osGëLa°Eº‹
())!=
NO_ERROR
) ){

3005 
pFûe
->
œ°Eºno
 =ÜastErrno;

3006 
rc
 = 
	`wöLogEº‹
(
SQLITE_IOERR_FSTAT
, 
pFûe
->
œ°Eºno
,

3007 "wöFûeSize", 
pFûe
->
zP©h
);

3011 
	`OSTRACE
(("SIZE file=%p,ÖSize=%p, *pSize=%lld,Ñc=%s\n",

3012 
pFûe
->
h
, 
pSize
, *pSize, 
	`sqlôe3EºName
(
rc
)));

3013  
rc
;

3014 
	}
}

3019 #i‚de‡
LOCKFILE_FAIL_IMMEDIATELY


3020 
	#LOCKFILE_FAIL_IMMEDIATELY
 1

	)

3023 #i‚de‡
LOCKFILE_EXCLUSIVE_LOCK


3024 
	#LOCKFILE_EXCLUSIVE_LOCK
 2

	)

3034 #i‚de‡
SQLITE_LOCKFILE_FLAGS


3035 
	#SQLITE_LOCKFILE_FLAGS
 (
LOCKFILE_FAIL_IMMEDIATELY
 | \

3036 
LOCKFILE_EXCLUSIVE_LOCK
)

	)

3043 #i‚de‡
SQLITE_LOCKFILEEX_FLAGS


3044 
	#SQLITE_LOCKFILEEX_FLAGS
 (
LOCKFILE_FAIL_IMMEDIATELY
)

	)

3052 
	$wöGëRódLock
(
wöFûe
 *
pFûe
){

3053 
ªs
;

3054 
	`OSTRACE
(("READ-LOCK fûe=%p,Üock=%d\n", 
pFûe
->
h
,ÖFûe->
lockty≥
));

3055 if–
	`osIsNT
() ){

3056 #i‡
SQLITE_OS_WINCE


3061 
ªs
 = 
	`wö˚LockFûe
(&
pFûe
->
h
, 
SHARED_FIRST
, 0, 1, 0);

3063 
ªs
 = 
	`wöLockFûe
(&
pFûe
->
h
, 
SQLITE_LOCKFILEEX_FLAGS
, 
SHARED_FIRST
, 0,

3064 
SHARED_SIZE
, 0);

3067 #ifde‡
SQLITE_WIN32_HAS_ANSI


3069 
lk
;

3070 
	`sqlôe3_øndom√ss
((
lk
), &lk);

3071 
pFûe
->
sh¨edLockByã
 = ()((
lk
 & 0x7fffffff)%(
SHARED_SIZE
 - 1));

3072 
ªs
 = 
	`wöLockFûe
(&
pFûe
->
h
, 
SQLITE_LOCKFILE_FLAGS
,

3073 
SHARED_FIRST
+
pFûe
->
sh¨edLockByã
, 0, 1, 0);

3076 if–
ªs
 == 0 ){

3077 
pFûe
->
œ°Eºno
 = 
	`osGëLa°Eº‹
();

3080 
	`OSTRACE
(("READ-LOCK fûe=%p,Ñesu…=%d\n", 
pFûe
->
h
, 
ªs
));

3081  
ªs
;

3082 
	}
}

3087 
	$wöU∆ockRódLock
(
wöFûe
 *
pFûe
){

3088 
ªs
;

3089 
DWORD
 
œ°Eºno
;

3090 
	`OSTRACE
(("READ-UNLOCK fûe=%p,Üock=%d\n", 
pFûe
->
h
,ÖFûe->
lockty≥
));

3091 if–
	`osIsNT
() ){

3092 
ªs
 = 
	`wöU∆ockFûe
(&
pFûe
->
h
, 
SHARED_FIRST
, 0, 
SHARED_SIZE
, 0);

3094 #ifde‡
SQLITE_WIN32_HAS_ANSI


3096 
ªs
 = 
	`wöU∆ockFûe
(&
pFûe
->
h
, 
SHARED_FIRST
+pFûe->
sh¨edLockByã
, 0, 1, 0);

3099 if–
ªs
==0 && ((
œ°Eºno
 = 
	`osGëLa°Eº‹
())!=
ERROR_NOT_LOCKED
) ){

3100 
pFûe
->
œ°Eºno
 =ÜastErrno;

3101 
	`wöLogEº‹
(
SQLITE_IOERR_UNLOCK
, 
pFûe
->
œ°Eºno
,

3102 "wöU∆ockRódLock", 
pFûe
->
zP©h
);

3104 
	`OSTRACE
(("READ-UNLOCK fûe=%p,Ñesu…=%d\n", 
pFûe
->
h
, 
ªs
));

3105  
ªs
;

3106 
	}
}

3134 
	$wöLock
(
sqlôe3_fûe
 *
id
, 
lockty≥
){

3135 
rc
 = 
SQLITE_OK
;

3136 
ªs
 = 1;

3137 
√wLockty≥
;

3138 
gŸPídögLock
 = 0;

3139 
wöFûe
 *
pFûe
 = (wöFûe*)
id
;

3140 
DWORD
 
œ°Eºno
 = 
NO_ERROR
;

3142 
	`as£π
–
id
!=0 );

3143 
	`OSTRACE
(("LOCK file=%p, oldLock=%d(%d),ÇewLock=%d\n",

3144 
pFûe
->
h
,ÖFûe->
lockty≥
,ÖFûe->
sh¨edLockByã
,Üocktype));

3150 if–
pFûe
->
lockty≥
>=locktype ){

3151 
	`OSTRACE
(("LOCK-HELD fûe=%p,Ñc=SQLITE_OK\n", 
pFûe
->
h
));

3152  
SQLITE_OK
;

3157 if–(
pFûe
->
˘æFœgs
 & 
WINFILE_RDONLY
)!=0 && 
lockty≥
>=
RESERVED_LOCK
 ){

3158  
SQLITE_IOERR_LOCK
;

3163 
	`as£π
–
pFûe
->
lockty≥
!=
NO_LOCK
 ||Üockty≥==
SHARED_LOCK
 );

3164 
	`as£π
–
lockty≥
!=
PENDING_LOCK
 );

3165 
	`as£π
–
lockty≥
!=
RESERVED_LOCK
 || 
pFûe
->lockty≥==
SHARED_LOCK
 );

3171 
√wLockty≥
 = 
pFûe
->
lockty≥
;

3172 if–
pFûe
->
lockty≥
==
NO_LOCK


3173 || (
lockty≥
==
EXCLUSIVE_LOCK
 && 
pFûe
->lockty≥<=
RESERVED_LOCK
)

3175 
˙t
 = 3;

3176  
˙t
-->0 && (
ªs
 = 
	`wöLockFûe
(&
pFûe
->
h
, 
SQLITE_LOCKFILE_FLAGS
,

3177 
PENDING_BYTE
, 0, 1, 0))==0 ){

3184 
œ°Eºno
 = 
	`osGëLa°Eº‹
();

3185 
	`OSTRACE
(("LOCK-PENDING-FAIL file=%p, count=%d,Ñesult=%d\n",

3186 
pFûe
->
h
, 
˙t
, 
ªs
));

3187 if–
œ°Eºno
==
ERROR_INVALID_HANDLE
 ){

3188 
pFûe
->
œ°Eºno
 =ÜastErrno;

3189 
rc
 = 
SQLITE_IOERR_LOCK
;

3190 
	`OSTRACE
(("LOCK-FAIL file=%p, count=%d,Ñc=%s\n",

3191 
pFûe
->
h
, 
˙t
, 
	`sqlôe3EºName
(
rc
)));

3192  
rc
;

3194 if–
˙t
 ) 
	`sqlôe3_wö32_¶ìp
(1);

3196 
gŸPídögLock
 = 
ªs
;

3197 if–!
ªs
 ){

3198 
œ°Eºno
 = 
	`osGëLa°Eº‹
();

3204 if–
lockty≥
==
SHARED_LOCK
 && 
ªs
 ){

3205 
	`as£π
–
pFûe
->
lockty≥
==
NO_LOCK
 );

3206 
ªs
 = 
	`wöGëRódLock
(
pFûe
);

3207 if–
ªs
 ){

3208 
√wLockty≥
 = 
SHARED_LOCK
;

3210 
œ°Eºno
 = 
	`osGëLa°Eº‹
();

3216 if–
lockty≥
==
RESERVED_LOCK
 && 
ªs
 ){

3217 
	`as£π
–
pFûe
->
lockty≥
==
SHARED_LOCK
 );

3218 
ªs
 = 
	`wöLockFûe
(&
pFûe
->
h
, 
SQLITE_LOCKFILE_FLAGS
, 
RESERVED_BYTE
, 0, 1, 0);

3219 if–
ªs
 ){

3220 
√wLockty≥
 = 
RESERVED_LOCK
;

3222 
œ°Eºno
 = 
	`osGëLa°Eº‹
();

3228 if–
lockty≥
==
EXCLUSIVE_LOCK
 && 
ªs
 ){

3229 
√wLockty≥
 = 
PENDING_LOCK
;

3230 
gŸPídögLock
 = 0;

3235 if–
lockty≥
==
EXCLUSIVE_LOCK
 && 
ªs
 ){

3236 
	`as£π
–
pFûe
->
lockty≥
>=
SHARED_LOCK
 );

3237 
ªs
 = 
	`wöU∆ockRódLock
(
pFûe
);

3238 
ªs
 = 
	`wöLockFûe
(&
pFûe
->
h
, 
SQLITE_LOCKFILE_FLAGS
, 
SHARED_FIRST
, 0,

3239 
SHARED_SIZE
, 0);

3240 if–
ªs
 ){

3241 
√wLockty≥
 = 
EXCLUSIVE_LOCK
;

3243 
œ°Eºno
 = 
	`osGëLa°Eº‹
();

3244 
	`wöGëRódLock
(
pFûe
);

3251 if–
gŸPídögLock
 && 
lockty≥
==
SHARED_LOCK
 ){

3252 
	`wöU∆ockFûe
(&
pFûe
->
h
, 
PENDING_BYTE
, 0, 1, 0);

3258 if–
ªs
 ){

3259 
rc
 = 
SQLITE_OK
;

3261 
pFûe
->
œ°Eºno
 =ÜastErrno;

3262 
rc
 = 
SQLITE_BUSY
;

3263 
	`OSTRACE
(("LOCK-FAIL file=%p, wanted=%d, got=%d\n",

3264 
pFûe
->
h
, 
lockty≥
, 
√wLockty≥
));

3266 
pFûe
->
lockty≥
 = (
u8
)
√wLockty≥
;

3267 
	`OSTRACE
(("LOCK file=%p,Üock=%d,Ñc=%s\n",

3268 
pFûe
->
h
,ÖFûe->
lockty≥
, 
	`sqlôe3EºName
(
rc
)));

3269  
rc
;

3270 
	}
}

3277 
	$wöCheckRe£rvedLock
(
sqlôe3_fûe
 *
id
, *
pResOut
){

3278 
ªs
;

3279 
wöFûe
 *
pFûe
 = (wöFûe*)
id
;

3281 
	`SimuœãIOEº‹
– 
SQLITE_IOERR_CHECKRESERVEDLOCK
; );

3282 
	`OSTRACE
(("TEST-WR-LOCK fûe=%p,ÖResOut=%p\n", 
pFûe
->
h
, 
pResOut
));

3284 
	`as£π
–
id
!=0 );

3285 if–
pFûe
->
lockty≥
>=
RESERVED_LOCK
 ){

3286 
ªs
 = 1;

3287 
	`OSTRACE
(("TEST-WR-LOCK fûe=%p,Ñesu…=%d (loˇl)\n", 
pFûe
->
h
, 
ªs
));

3289 
ªs
 = 
	`wöLockFûe
(&
pFûe
->
h
, 
SQLITE_LOCKFILEEX_FLAGS
,
RESERVED_BYTE
,0,1,0);

3290 if–
ªs
 ){

3291 
	`wöU∆ockFûe
(&
pFûe
->
h
, 
RESERVED_BYTE
, 0, 1, 0);

3293 
ªs
 = !res;

3294 
	`OSTRACE
(("TEST-WR-LOCK fûe=%p,Ñesu…=%d (ªmŸe)\n", 
pFûe
->
h
, 
ªs
));

3296 *
pResOut
 = 
ªs
;

3297 
	`OSTRACE
(("TEST-WR-LOCK file=%p,ÖResOut=%p, *pResOut=%d,Ñc=SQLITE_OK\n",

3298 
pFûe
->
h
, 
pResOut
, *pResOut));

3299  
SQLITE_OK
;

3300 
	}
}

3313 
	$wöU∆ock
(
sqlôe3_fûe
 *
id
, 
lockty≥
){

3314 
ty≥
;

3315 
wöFûe
 *
pFûe
 = (wöFûe*)
id
;

3316 
rc
 = 
SQLITE_OK
;

3317 
	`as£π
–
pFûe
!=0 );

3318 
	`as£π
–
lockty≥
<=
SHARED_LOCK
 );

3319 
	`OSTRACE
(("UNLOCK file=%p, oldLock=%d(%d),ÇewLock=%d\n",

3320 
pFûe
->
h
,ÖFûe->
lockty≥
,ÖFûe->
sh¨edLockByã
,Üocktype));

3321 
ty≥
 = 
pFûe
->
lockty≥
;

3322 if–
ty≥
>=
EXCLUSIVE_LOCK
 ){

3323 
	`wöU∆ockFûe
(&
pFûe
->
h
, 
SHARED_FIRST
, 0, 
SHARED_SIZE
, 0);

3324 if–
lockty≥
==
SHARED_LOCK
 && !
	`wöGëRódLock
(
pFûe
) ){

3327 
rc
 = 
	`wöLogEº‹
(
SQLITE_IOERR_UNLOCK
, 
	`osGëLa°Eº‹
(),

3328 "wöU∆ock", 
pFûe
->
zP©h
);

3331 if–
ty≥
>=
RESERVED_LOCK
 ){

3332 
	`wöU∆ockFûe
(&
pFûe
->
h
, 
RESERVED_BYTE
, 0, 1, 0);

3334 if–
lockty≥
==
NO_LOCK
 && 
ty≥
>=
SHARED_LOCK
 ){

3335 
	`wöU∆ockRódLock
(
pFûe
);

3337 if–
ty≥
>=
PENDING_LOCK
 ){

3338 
	`wöU∆ockFûe
(&
pFûe
->
h
, 
PENDING_BYTE
, 0, 1, 0);

3340 
pFûe
->
lockty≥
 = (
u8
)locktype;

3341 
	`OSTRACE
(("UNLOCK file=%p,Üock=%d,Ñc=%s\n",

3342 
pFûe
->
h
,ÖFûe->
lockty≥
, 
	`sqlôe3EºName
(
rc
)));

3343  
rc
;

3344 
	}
}

3352 
	$wöModeBô
(
wöFûe
 *
pFûe
, 
mask
, *
pArg
){

3353 if–*
pArg
<0 ){

3354 *
pArg
 = (
pFûe
->
˘æFœgs
 & 
mask
)!=0;

3355 }if–(*
pArg
)==0 ){

3356 
pFûe
->
˘æFœgs
 &~
mask
;

3358 
pFûe
->
˘æFœgs
 |
mask
;

3360 
	}
}

3363 
wöGëTem≤ame
(
sqlôe3_vfs
 *, **);

3364 
wöIsDú
(const *);

3365 
BOOL
 
wöIsDriveLëãrAndCﬁ⁄
(const *);

3370 
	$wöFûeC⁄åﬁ
(
sqlôe3_fûe
 *
id
, 
›
, *
pArg
){

3371 
wöFûe
 *
pFûe
 = (wöFûe*)
id
;

3372 
	`OSTRACE
(("FCNTL fûe=%p, op=%d,ÖArg=%p\n", 
pFûe
->
h
, 
›
, 
pArg
));

3373  
›
 ){

3374 
SQLITE_FCNTL_LOCKSTATE
: {

3375 *(*)
pArg
 = 
pFûe
->
lockty≥
;

3376 
	`OSTRACE
(("FCNTL fûe=%p,Ñc=SQLITE_OK\n", 
pFûe
->
h
));

3377  
SQLITE_OK
;

3379 
SQLITE_FCNTL_LAST_ERRNO
: {

3380 *(*)
pArg
 = ()
pFûe
->
œ°Eºno
;

3381 
	`OSTRACE
(("FCNTL fûe=%p,Ñc=SQLITE_OK\n", 
pFûe
->
h
));

3382  
SQLITE_OK
;

3384 
SQLITE_FCNTL_CHUNK_SIZE
: {

3385 
pFûe
->
szChunk
 = *(*)
pArg
;

3386 
	`OSTRACE
(("FCNTL fûe=%p,Ñc=SQLITE_OK\n", 
pFûe
->
h
));

3387  
SQLITE_OK
;

3389 
SQLITE_FCNTL_SIZE_HINT
: {

3390 if–
pFûe
->
szChunk
>0 ){

3391 
sqlôe3_öt64
 
ﬁdSz
;

3392 
rc
 = 
	`wöFûeSize
(
id
, &
ﬁdSz
);

3393 if–
rc
==
SQLITE_OK
 ){

3394 
sqlôe3_öt64
 
√wSz
 = *(sqlôe3_öt64*)
pArg
;

3395 if–
√wSz
>
ﬁdSz
 ){

3396 
	`SimuœãIOEº‹Bíign
(1);

3397 
rc
 = 
	`wöTrunˇã
(
id
, 
√wSz
);

3398 
	`SimuœãIOEº‹Bíign
(0);

3401 
	`OSTRACE
(("FCNTL fûe=%p,Ñc=%s\n", 
pFûe
->
h
, 
	`sqlôe3EºName
(
rc
)));

3402  
rc
;

3404 
	`OSTRACE
(("FCNTL fûe=%p,Ñc=SQLITE_OK\n", 
pFûe
->
h
));

3405  
SQLITE_OK
;

3407 
SQLITE_FCNTL_PERSIST_WAL
: {

3408 
	`wöModeBô
(
pFûe
, 
WINFILE_PERSIST_WAL
, (*)
pArg
);

3409 
	`OSTRACE
(("FCNTL fûe=%p,Ñc=SQLITE_OK\n", 
pFûe
->
h
));

3410  
SQLITE_OK
;

3412 
SQLITE_FCNTL_POWERSAFE_OVERWRITE
: {

3413 
	`wöModeBô
(
pFûe
, 
WINFILE_PSOW
, (*)
pArg
);

3414 
	`OSTRACE
(("FCNTL fûe=%p,Ñc=SQLITE_OK\n", 
pFûe
->
h
));

3415  
SQLITE_OK
;

3417 
SQLITE_FCNTL_VFSNAME
: {

3418 *(**)
pArg
 = 
	`sqlôe3_m¥ötf
("%s", 
pFûe
->
pVfs
->
zName
);

3419 
	`OSTRACE
(("FCNTL fûe=%p,Ñc=SQLITE_OK\n", 
pFûe
->
h
));

3420  
SQLITE_OK
;

3422 
SQLITE_FCNTL_WIN32_AV_RETRY
: {

3423 *
a
 = (*)
pArg
;

3424 if–
a
[0]>0 ){

3425 
wöI€ºRëry
 = 
a
[0];

3427 
a
[0] = 
wöI€ºRëry
;

3429 if–
a
[1]>0 ){

3430 
wöI€ºRëryDñay
 = 
a
[1];

3432 
a
[1] = 
wöI€ºRëryDñay
;

3434 
	`OSTRACE
(("FCNTL fûe=%p,Ñc=SQLITE_OK\n", 
pFûe
->
h
));

3435  
SQLITE_OK
;

3437 #ifde‡
SQLITE_TEST


3438 
SQLITE_FCNTL_WIN32_SET_HANDLE
: {

3439 
LPHANDLE
 
phFûe
 = (LPHANDLE)
pArg
;

3440 
HANDLE
 
hOldFûe
 = 
pFûe
->
h
;

3441 
pFûe
->
h
 = *
phFûe
;

3442 *
phFûe
 = 
hOldFûe
;

3443 
	`OSTRACE
(("FCNTL oldFile=%p,ÇewFile=%p,Ñc=SQLITE_OK\n",

3444 
hOldFûe
, 
pFûe
->
h
));

3445  
SQLITE_OK
;

3448 
SQLITE_FCNTL_TEMPFILENAME
: {

3449 *
zTFûe
 = 0;

3450 
rc
 = 
	`wöGëTem≤ame
(
pFûe
->
pVfs
, &
zTFûe
);

3451 if–
rc
==
SQLITE_OK
 ){

3452 *(**)
pArg
 = 
zTFûe
;

3454 
	`OSTRACE
(("FCNTL fûe=%p,Ñc=%s\n", 
pFûe
->
h
, 
	`sqlôe3EºName
(
rc
)));

3455  
rc
;

3457 #i‡
SQLITE_MAX_MMAP_SIZE
>0

3458 
SQLITE_FCNTL_MMAP_SIZE
: {

3459 
i64
 
√wLimô
 = *(i64*)
pArg
;

3460 
rc
 = 
SQLITE_OK
;

3461 if–
√wLimô
>
sqlôe3GlobÆC⁄fig
.
mxMm≠
 ){

3462 
√wLimô
 = 
sqlôe3GlobÆC⁄fig
.
mxMm≠
;

3464 *(
i64
*)
pArg
 = 
pFûe
->
mm≠SizeMax
;

3465 if–
√wLimô
>=0 &&ÇewLimô!=
pFûe
->
mm≠SizeMax
 &&ÖFûe->
nFëchOut
==0 ){

3466 
pFûe
->
mm≠SizeMax
 = 
√wLimô
;

3467 if–
pFûe
->
mm≠Size
>0 ){

3468 
	`wöUnm≠fûe
(
pFûe
);

3469 
rc
 = 
	`wöM≠fûe
(
pFûe
, -1);

3472 
	`OSTRACE
(("FCNTL fûe=%p,Ñc=%s\n", 
pFûe
->
h
, 
	`sqlôe3EºName
(
rc
)));

3473  
rc
;

3477 
	`OSTRACE
(("FCNTL fûe=%p,Ñc=SQLITE_NOTFOUND\n", 
pFûe
->
h
));

3478  
SQLITE_NOTFOUND
;

3479 
	}
}

3491 
	$wöSe˘‹Size
(
sqlôe3_fûe
 *
id
){

3492 ()
id
;

3493  
SQLITE_DEFAULT_SECTOR_SIZE
;

3494 
	}
}

3499 
	$wöDevi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
 *
id
){

3500 
wöFûe
 *
p
 = (wöFûe*)
id
;

3501  
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN
 |

3502 ((
p
->
˘æFœgs
 & 
WINFILE_PSOW
)?
SQLITE_IOCAP_POWERSAFE_OVERWRITE
:0);

3503 
	}
}

3511 
SYSTEM_INFO
 
	gwöSysInfo
;

3513 #i‚de‡
SQLITE_OMIT_WAL


3528 
	$wöShmE¡îMuãx
(){

3529 
	`sqlôe3_muãx_íãr
(
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_VFS1
));

3530 
	}
}

3531 
	$wöShmLóveMuãx
(){

3532 
	`sqlôe3_muãx_Àave
(
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_VFS1
));

3533 
	}
}

3534 #i‚de‡
NDEBUG


3535 
	$wöShmMuãxHñd
() {

3536  
	`sqlôe3_muãx_hñd
(
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_VFS1
));

3537 
	}
}

3563 
	swöShmNode
 {

3564 
sqlôe3_muãx
 *
	mmuãx
;

3565 *
	mzFûíame
;

3566 
wöFûe
 
	mhFûe
;

3568 
	mszRegi⁄
;

3569 
	mnRegi⁄
;

3570 
	sShmRegi⁄
 {

3571 
HANDLE
 
	mhM≠
;

3572 *
	mpM≠
;

3573 } *
	maRegi⁄
;

3574 
DWORD
 
	mœ°Eºno
;

3576 
	mnRef
;

3577 
wöShm
 *
	mpFú°
;

3578 
wöShmNode
 *
	mpNext
;

3579 #i‡
deföed
(
SQLITE_DEBUG
Ë|| deföed(
SQLITE_HAVE_OS_TRACE
)

3580 
u8
 
	m√xtShmId
;

3589 
wöShmNode
 *
	gwöShmNodeLi°
 = 0;

3604 
	swöShm
 {

3605 
wöShmNode
 *
	mpShmNode
;

3606 
wöShm
 *
	mpNext
;

3607 
u8
 
	mhasMuãx
;

3608 
u16
 
	msh¨edMask
;

3609 
u16
 
	mex˛Mask
;

3610 #i‡
deföed
(
SQLITE_DEBUG
Ë|| deföed(
SQLITE_HAVE_OS_TRACE
)

3611 
u8
 
	mid
;

3618 
	#WIN_SHM_BASE
 ((22+
SQLITE_SHM_NLOCK
)*4Ë

	)

3619 
	#WIN_SHM_DMS
 (
WIN_SHM_BASE
+
SQLITE_SHM_NLOCK
Ë

	)

3624 
	#_SHM_UNLCK
 1

	)

3625 
	#_SHM_RDLCK
 2

	)

3626 
	#_SHM_WRLCK
 3

	)

3627 
	$wöShmSy°emLock
(

3628 
wöShmNode
 *
pFûe
,

3629 
lockTy≥
,

3630 
of°
,

3631 
nByã


3633 
rc
 = 0;

3636 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pFûe
->
muãx
Ë||ÖFûe->
nRef
==0 );

3638 
	`OSTRACE
(("SHM-LOCK file=%p,Üock=%d, offset=%d, size=%d\n",

3639 
pFûe
->
hFûe
.
h
, 
lockTy≥
, 
of°
, 
nByã
));

3642 if–
lockTy≥
==
_SHM_UNLCK
 ){

3643 
rc
 = 
	`wöU∆ockFûe
(&
pFûe
->
hFûe
.
h
, 
of°
, 0, 
nByã
, 0);

3646 
DWORD
 
dwFœgs
 = 
LOCKFILE_FAIL_IMMEDIATELY
;

3647 if–
lockTy≥
 =
_SHM_WRLCK
 ) 
dwFœgs
 |
LOCKFILE_EXCLUSIVE_LOCK
;

3648 
rc
 = 
	`wöLockFûe
(&
pFûe
->
hFûe
.
h
, 
dwFœgs
, 
of°
, 0, 
nByã
, 0);

3651 if–
rc
!= 0 ){

3652 
rc
 = 
SQLITE_OK
;

3654 
pFûe
->
œ°Eºno
 = 
	`osGëLa°Eº‹
();

3655 
rc
 = 
SQLITE_BUSY
;

3658 
	`OSTRACE
(("SHM-LOCK file=%p, func=%s,Érrno=%lu,Ñc=%s\n",

3659 
pFûe
->
hFûe
.
h
, (
lockTy≥
 =
_SHM_UNLCK
) ? "winUnlockFile" :

3660 "wöLockFûe", 
pFûe
->
œ°Eºno
, 
	`sqlôe3EºName
(
rc
)));

3662  
rc
;

3663 
	}
}

3666 
wöO≥n
(
sqlôe3_vfs
*,c⁄° *,
sqlôe3_fûe
*,,*);

3667 
wöDñëe
(
sqlôe3_vfs
 *,const *,);

3675 
	$wöShmPurge
(
sqlôe3_vfs
 *
pVfs
, 
dñëeFœg
){

3676 
wöShmNode
 **
µ
;

3677 
wöShmNode
 *
p
;

3678 
	`as£π
–
	`wöShmMuãxHñd
() );

3679 
	`OSTRACE
(("SHM-PURGEÖid=%lu, deleteFlag=%d\n",

3680 
	`osGëCuºítPro˚ssId
(), 
dñëeFœg
));

3681 
µ
 = &
wöShmNodeLi°
;

3682  (
p
 = *
µ
)!=0 ){

3683 if–
p
->
nRef
==0 ){

3684 
i
;

3685 if–
p
->
muãx
 ){ 
	`sqlôe3_muãx_‰ì
(p->mutex); }

3686 
i
=0; i<
p
->
nRegi⁄
; i++){

3687 
BOOL
 
bRc
 = 
	`osUnm≠VõwOfFûe
(
p
->
aRegi⁄
[
i
].
pM≠
);

3688 
	`OSTRACE
(("SHM-PURGE-UNMAPÖid=%lu,Ñegion=%d,Ñc=%s\n",

3689 
	`osGëCuºítPro˚ssId
(), 
i
, 
bRc
 ? "ok" : "failed"));

3690 
	`UNUSED_VARIABLE_VALUE
(
bRc
);

3691 
bRc
 = 
	`osClo£H™dÀ
(
p
->
aRegi⁄
[
i
].
hM≠
);

3692 
	`OSTRACE
(("SHM-PURGE-CLOSEÖid=%lu,Ñegion=%d,Ñc=%s\n",

3693 
	`osGëCuºítPro˚ssId
(), 
i
, 
bRc
 ? "ok" : "failed"));

3694 
	`UNUSED_VARIABLE_VALUE
(
bRc
);

3696 if–
p
->
hFûe
.
h
!=
NULL
 &&Ö->hFûe.h!=
INVALID_HANDLE_VALUE
 ){

3697 
	`SimuœãIOEº‹Bíign
(1);

3698 
	`wöClo£
((
sqlôe3_fûe
 *)&
p
->
hFûe
);

3699 
	`SimuœãIOEº‹Bíign
(0);

3701 if–
dñëeFœg
 ){

3702 
	`SimuœãIOEº‹Bíign
(1);

3703 
	`sqlôe3BegöBíignMÆloc
();

3704 
	`wöDñëe
(
pVfs
, 
p
->
zFûíame
, 0);

3705 
	`sqlôe3EndBíignMÆloc
();

3706 
	`SimuœãIOEº‹Bíign
(0);

3708 *
µ
 = 
p
->
pNext
;

3709 
	`sqlôe3_‰ì
(
p
->
aRegi⁄
);

3710 
	`sqlôe3_‰ì
(
p
);

3712 
µ
 = &
p
->
pNext
;

3715 
	}
}

3724 
	$wöO≥nSh¨edMem‹y
(
wöFûe
 *
pDbFd
){

3725 
wöShm
 *
p
;

3726 
wöShmNode
 *
pShmNode
 = 0;

3727 
rc
;

3728 
wöShmNode
 *
pNew
;

3729 
nName
;

3731 
	`as£π
–
pDbFd
->
pShm
==0 );

3736 
p
 = 
	`sqlôe3MÆlocZîo
( (*p) );

3737 if–
p
==0 )  
SQLITE_IOERR_NOMEM_BKPT
;

3738 
nName
 = 
	`sqlôe3SåÀn30
(
pDbFd
->
zP©h
);

3739 
pNew
 = 
	`sqlôe3MÆlocZîo
–(*
pShmNode
Ë+ 
nName
 + 17 );

3740 if–
pNew
==0 ){

3741 
	`sqlôe3_‰ì
(
p
);

3742  
SQLITE_IOERR_NOMEM_BKPT
;

3744 
pNew
->
zFûíame
 = (*)&pNew[1];

3745 
	`sqlôe3_¢¥ötf
(
nName
+15, 
pNew
->
zFûíame
, "%s-shm", 
pDbFd
->
zP©h
);

3746 
	`sqlôe3FûeSuffix3
(
pDbFd
->
zP©h
, 
pNew
->
zFûíame
);

3751 
	`wöShmE¡îMuãx
();

3752 
pShmNode
 = 
wöShmNodeLi°
;ÖShmNode;ÖShmNodeıShmNode->
pNext
){

3756 if–
	`sqlôe3SåICmp
(
pShmNode
->
zFûíame
, 
pNew
->zFilename)==0 ) ;

3758 if–
pShmNode
 ){

3759 
	`sqlôe3_‰ì
(
pNew
);

3761 
pShmNode
 = 
pNew
;

3762 
pNew
 = 0;

3763 ((
wöFûe
*)(&
pShmNode
->
hFûe
))->
h
 = 
INVALID_HANDLE_VALUE
;

3764 
pShmNode
->
pNext
 = 
wöShmNodeLi°
;

3765 
wöShmNodeLi°
 = 
pShmNode
;

3767 if–
sqlôe3GlobÆC⁄fig
.
bC‹eMuãx
 ){

3768 
pShmNode
->
muãx
 = 
	`sqlôe3_muãx_Æloc
(
SQLITE_MUTEX_FAST
);

3769 if–
pShmNode
->
muãx
==0 ){

3770 
rc
 = 
SQLITE_IOERR_NOMEM_BKPT
;

3771 
shm_›í_îr
;

3775 
rc
 = 
	`wöO≥n
(
pDbFd
->
pVfs
,

3776 
pShmNode
->
zFûíame
,

3777 (
sqlôe3_fûe
*)&
pShmNode
->
hFûe
,

3778 
SQLITE_OPEN_WAL
 | 
SQLITE_OPEN_READWRITE
 | 
SQLITE_OPEN_CREATE
,

3780 if–
SQLITE_OK
!=
rc
 ){

3781 
shm_›í_îr
;

3787 if–
	`wöShmSy°emLock
(
pShmNode
, 
_SHM_WRLCK
, 
WIN_SHM_DMS
, 1)==
SQLITE_OK
 ){

3788 
rc
 = 
	`wöTrunˇã
((
sqlôe3_fûe
 *)&
pShmNode
->
hFûe
, 0);

3789 if–
rc
!=
SQLITE_OK
 ){

3790 
rc
 = 
	`wöLogEº‹
(
SQLITE_IOERR_SHMOPEN
, 
	`osGëLa°Eº‹
(),

3791 "wöO≥nShm", 
pDbFd
->
zP©h
);

3794 if–
rc
==
SQLITE_OK
 ){

3795 
	`wöShmSy°emLock
(
pShmNode
, 
_SHM_UNLCK
, 
WIN_SHM_DMS
, 1);

3796 
rc
 = 
	`wöShmSy°emLock
(
pShmNode
, 
_SHM_RDLCK
, 
WIN_SHM_DMS
, 1);

3798 if–
rc
 ) 
shm_›í_îr
;

3802 
p
->
pShmNode
 =ÖShmNode;

3803 #i‡
	`deföed
(
SQLITE_DEBUG
Ë|| deföed(
SQLITE_HAVE_OS_TRACE
)

3804 
p
->
id
 = 
pShmNode
->
√xtShmId
++;

3806 
pShmNode
->
nRef
++;

3807 
pDbFd
->
pShm
 = 
p
;

3808 
	`wöShmLóveMuãx
();

3817 
	`sqlôe3_muãx_íãr
(
pShmNode
->
muãx
);

3818 
p
->
pNext
 = 
pShmNode
->
pFú°
;

3819 
pShmNode
->
pFú°
 = 
p
;

3820 
	`sqlôe3_muãx_Àave
(
pShmNode
->
muãx
);

3821  
SQLITE_OK
;

3824 
shm_›í_îr
:

3825 
	`wöShmSy°emLock
(
pShmNode
, 
_SHM_UNLCK
, 
WIN_SHM_DMS
, 1);

3826 
	`wöShmPurge
(
pDbFd
->
pVfs
, 0);

3827 
	`sqlôe3_‰ì
(
p
);

3828 
	`sqlôe3_‰ì
(
pNew
);

3829 
	`wöShmLóveMuãx
();

3830  
rc
;

3831 
	}
}

3837 
	$wöShmUnm≠
(

3838 
sqlôe3_fûe
 *
fd
,

3839 
dñëeFœg


3841 
wöFûe
 *
pDbFd
;

3842 
wöShm
 *
p
;

3843 
wöShmNode
 *
pShmNode
;

3844 
wöShm
 **
µ
;

3846 
pDbFd
 = (
wöFûe
*)
fd
;

3847 
p
 = 
pDbFd
->
pShm
;

3848 if–
p
==0 )  
SQLITE_OK
;

3849 
pShmNode
 = 
p
->pShmNode;

3853 
	`sqlôe3_muãx_íãr
(
pShmNode
->
muãx
);

3854 
µ
=&
pShmNode
->
pFú°
; (*µ)!=
p
;Ö∞&(*µ)->
pNext
){}

3855 *
µ
 = 
p
->
pNext
;

3858 
	`sqlôe3_‰ì
(
p
);

3859 
pDbFd
->
pShm
 = 0;

3860 
	`sqlôe3_muãx_Àave
(
pShmNode
->
muãx
);

3864 
	`wöShmE¡îMuãx
();

3865 
	`as£π
–
pShmNode
->
nRef
>0 );

3866 
pShmNode
->
nRef
--;

3867 if–
pShmNode
->
nRef
==0 ){

3868 
	`wöShmPurge
(
pDbFd
->
pVfs
, 
dñëeFœg
);

3870 
	`wöShmLóveMuãx
();

3872  
SQLITE_OK
;

3873 
	}
}

3878 
	$wöShmLock
(

3879 
sqlôe3_fûe
 *
fd
,

3880 
of°
,

3881 
n
,

3882 
Êags


3884 
wöFûe
 *
pDbFd
 = (wöFûe*)
fd
;

3885 
wöShm
 *
p
 = 
pDbFd
->
pShm
;

3886 
wöShm
 *
pX
;

3887 
wöShmNode
 *
pShmNode
 = 
p
->pShmNode;

3888 
rc
 = 
SQLITE_OK
;

3889 
u16
 
mask
;

3891 
	`as£π
–
of°
>=0 && of°+
n
<=
SQLITE_SHM_NLOCK
 );

3892 
	`as£π
–
n
>=1 );

3893 
	`as£π
–
Êags
==(
SQLITE_SHM_LOCK
 | 
SQLITE_SHM_SHARED
)

3894 || 
Êags
==(
SQLITE_SHM_LOCK
 | 
SQLITE_SHM_EXCLUSIVE
)

3895 || 
Êags
==(
SQLITE_SHM_UNLOCK
 | 
SQLITE_SHM_SHARED
)

3896 || 
Êags
==(
SQLITE_SHM_UNLOCK
 | 
SQLITE_SHM_EXCLUSIVE
) );

3897 
	`as£π
–
n
==1 || (
Êags
 & 
SQLITE_SHM_EXCLUSIVE
)!=0 );

3899 
mask
 = (
u16
)((1U<<(
of°
+
n
)) - (1U<<ofst));

3900 
	`as£π
–
n
>1 || 
mask
==(1<<
of°
) );

3901 
	`sqlôe3_muãx_íãr
(
pShmNode
->
muãx
);

3902 if–
Êags
 & 
SQLITE_SHM_UNLOCK
 ){

3903 
u16
 
ÆlMask
 = 0;

3906 
pX
=
pShmNode
->
pFú°
;ÖX;ÖXıX->
pNext
){

3907 if–
pX
==
p
 ) ;

3908 
	`as£π
–(
pX
->
ex˛Mask
 & (
p
->ex˛Mask|p->
sh¨edMask
))==0 );

3909 
ÆlMask
 |
pX
->
sh¨edMask
;

3913 if–(
mask
 & 
ÆlMask
)==0 ){

3914 
rc
 = 
	`wöShmSy°emLock
(
pShmNode
, 
_SHM_UNLCK
, 
of°
+
WIN_SHM_BASE
, 
n
);

3916 
rc
 = 
SQLITE_OK
;

3920 if–
rc
==
SQLITE_OK
 ){

3921 
p
->
ex˛Mask
 &~
mask
;

3922 
p
->
sh¨edMask
 &~
mask
;

3924 }if–
Êags
 & 
SQLITE_SHM_SHARED
 ){

3925 
u16
 
ÆlSh¨ed
 = 0;

3931 
pX
=
pShmNode
->
pFú°
;ÖX;ÖXıX->
pNext
){

3932 if–(
pX
->
ex˛Mask
 & 
mask
)!=0 ){

3933 
rc
 = 
SQLITE_BUSY
;

3936 
ÆlSh¨ed
 |
pX
->
sh¨edMask
;

3940 if–
rc
==
SQLITE_OK
 ){

3941 if–(
ÆlSh¨ed
 & 
mask
)==0 ){

3942 
rc
 = 
	`wöShmSy°emLock
(
pShmNode
, 
_SHM_RDLCK
, 
of°
+
WIN_SHM_BASE
, 
n
);

3944 
rc
 = 
SQLITE_OK
;

3949 if–
rc
==
SQLITE_OK
 ){

3950 
p
->
sh¨edMask
 |
mask
;

3956 
pX
=
pShmNode
->
pFú°
;ÖX;ÖXıX->
pNext
){

3957 if–(
pX
->
ex˛Mask
 & 
mask
)!=0 || (pX->
sh¨edMask
 & mask)!=0 ){

3958 
rc
 = 
SQLITE_BUSY
;

3966 if–
rc
==
SQLITE_OK
 ){

3967 
rc
 = 
	`wöShmSy°emLock
(
pShmNode
, 
_SHM_WRLCK
, 
of°
+
WIN_SHM_BASE
, 
n
);

3968 if–
rc
==
SQLITE_OK
 ){

3969 
	`as£π
–(
p
->
sh¨edMask
 & 
mask
)==0 );

3970 
p
->
ex˛Mask
 |
mask
;

3974 
	`sqlôe3_muãx_Àave
(
pShmNode
->
muãx
);

3975 
	`OSTRACE
(("SHM-LOCKÖid=%lu, id=%d, sharedMask=%03x,ÉxclMask=%03x,Ñc=%s\n",

3976 
	`osGëCuºítPro˚ssId
(), 
p
->
id
,Ö->
sh¨edMask
,Ö->
ex˛Mask
,

3977 
	`sqlôe3EºName
(
rc
)));

3978  
rc
;

3979 
	}
}

3987 
	$wöShmB¨rõr
(

3988 
sqlôe3_fûe
 *
fd


3990 
	`UNUSED_PARAMETER
(
fd
);

3991 
	`sqlôe3Mem‹yB¨rõr
();

3992 
	`wöShmE¡îMuãx
();

3993 
	`wöShmLóveMuãx
();

3994 
	}
}

4015 
	$wöShmM≠
(

4016 
sqlôe3_fûe
 *
fd
,

4017 
iRegi⁄
,

4018 
szRegi⁄
,

4019 
isWrôe
,

4020 vﬁ©ûê**
µ


4022 
wöFûe
 *
pDbFd
 = (wöFûe*)
fd
;

4023 
wöShm
 *
pShm
 = 
pDbFd
->pShm;

4024 
wöShmNode
 *
pShmNode
;

4025 
rc
 = 
SQLITE_OK
;

4027 if–!
pShm
 ){

4028 
rc
 = 
	`wöO≥nSh¨edMem‹y
(
pDbFd
);

4029 if–
rc
!=
SQLITE_OK
 ) Ñc;

4030 
pShm
 = 
pDbFd
->pShm;

4032 
pShmNode
 = 
pShm
->pShmNode;

4034 
	`sqlôe3_muãx_íãr
(
pShmNode
->
muãx
);

4035 
	`as£π
–
szRegi⁄
==
pShmNode
->szRegi⁄ ||ÖShmNode->
nRegi⁄
==0 );

4037 if–
pShmNode
->
nRegi⁄
<=
iRegi⁄
 ){

4038 
ShmRegi⁄
 *
≠New
;

4039 
nByã
 = (
iRegi⁄
+1)*
szRegi⁄
;

4040 
sqlôe3_öt64
 
sz
;

4042 
pShmNode
->
szRegi⁄
 = szRegion;

4048 
rc
 = 
	`wöFûeSize
((
sqlôe3_fûe
 *)&
pShmNode
->
hFûe
, &
sz
);

4049 if–
rc
!=
SQLITE_OK
 ){

4050 
rc
 = 
	`wöLogEº‹
(
SQLITE_IOERR_SHMSIZE
, 
	`osGëLa°Eº‹
(),

4051 "wöShmM≠1", 
pDbFd
->
zP©h
);

4052 
shm∑ge_out
;

4055 if–
sz
<
nByã
 ){

4062 if–!
isWrôe
 ) 
shm∑ge_out
;

4063 
rc
 = 
	`wöTrunˇã
((
sqlôe3_fûe
 *)&
pShmNode
->
hFûe
, 
nByã
);

4064 if–
rc
!=
SQLITE_OK
 ){

4065 
rc
 = 
	`wöLogEº‹
(
SQLITE_IOERR_SHMSIZE
, 
	`osGëLa°Eº‹
(),

4066 "wöShmM≠2", 
pDbFd
->
zP©h
);

4067 
shm∑ge_out
;

4072 
≠New
 = (
ShmRegi⁄
 *)
	`sqlôe3_ªÆloc64
(

4073 
pShmNode
->
aRegi⁄
, (
iRegi⁄
+1)*(
≠New
[0])

4075 if–!
≠New
 ){

4076 
rc
 = 
SQLITE_IOERR_NOMEM_BKPT
;

4077 
shm∑ge_out
;

4079 
pShmNode
->
aRegi⁄
 = 
≠New
;

4081  
pShmNode
->
nRegi⁄
<=
iRegi⁄
 ){

4082 
HANDLE
 
hM≠
 = 
NULL
;

4083 *
pM≠
 = 0;

4085 #i‡
SQLITE_OS_WINRT


4086 
hM≠
 = 
	`osCª©eFûeM≠pögFromAµ
(
pShmNode
->
hFûe
.
h
,

4087 
NULL
, 
PAGE_READWRITE
, 
nByã
, NULL

4089 #ñi‡
	`deföed
(
SQLITE_WIN32_HAS_WIDE
)

4090 
hM≠
 = 
	`osCª©eFûeM≠pögW
(
pShmNode
->
hFûe
.
h
,

4091 
NULL
, 
PAGE_READWRITE
, 0, 
nByã
, NULL

4093 #ñi‡
	`deföed
(
SQLITE_WIN32_HAS_ANSI
Ë&& 
SQLITE_WIN32_CREATEFILEMAPPINGA


4094 
hM≠
 = 
	`osCª©eFûeM≠pögA
(
pShmNode
->
hFûe
.
h
,

4095 
NULL
, 
PAGE_READWRITE
, 0, 
nByã
, NULL

4098 
	`OSTRACE
(("SHM-MAP-CREATEÖid=%lu,Ñegion=%d, size=%d,Ñc=%s\n",

4099 
	`osGëCuºítPro˚ssId
(), 
pShmNode
->
nRegi⁄
, 
nByã
,

4100 
hM≠
 ? "ok" : "failed"));

4101 if–
hM≠
 ){

4102 
iOff£t
 = 
pShmNode
->
nRegi⁄
*
szRegi⁄
;

4103 
iOff£tShi·
 = 
iOff£t
 % 
wöSysInfo
.
dwAŒoˇti⁄Gønuœrôy
;

4104 #i‡
SQLITE_OS_WINRT


4105 
pM≠
 = 
	`osM≠VõwOfFûeFromAµ
(
hM≠
, 
FILE_MAP_WRITE
 | 
FILE_MAP_READ
,

4106 
iOff£t
 - 
iOff£tShi·
, 
szRegi⁄
 + iOffsetShift

4109 
pM≠
 = 
	`osM≠VõwOfFûe
(
hM≠
, 
FILE_MAP_WRITE
 | 
FILE_MAP_READ
,

4110 0, 
iOff£t
 - 
iOff£tShi·
, 
szRegi⁄
 + iOffsetShift

4113 
	`OSTRACE
(("SHM-MAP-MAPÖid=%lu,Ñegion=%d, offset=%d, size=%d,Ñc=%s\n",

4114 
	`osGëCuºítPro˚ssId
(), 
pShmNode
->
nRegi⁄
, 
iOff£t
,

4115 
szRegi⁄
, 
pM≠
 ? "ok" : "failed"));

4117 if–!
pM≠
 ){

4118 
pShmNode
->
œ°Eºno
 = 
	`osGëLa°Eº‹
();

4119 
rc
 = 
	`wöLogEº‹
(
SQLITE_IOERR_SHMMAP
, 
pShmNode
->
œ°Eºno
,

4120 "wöShmM≠3", 
pDbFd
->
zP©h
);

4121 if–
hM≠
 ) 
	`osClo£H™dÀ
(hMap);

4122 
shm∑ge_out
;

4125 
pShmNode
->
aRegi⁄
[pShmNode->
nRegi⁄
].
pM≠
 =ÖMap;

4126 
pShmNode
->
aRegi⁄
[pShmNode->
nRegi⁄
].
hM≠
 = hMap;

4127 
pShmNode
->
nRegi⁄
++;

4131 
shm∑ge_out
:

4132 if–
pShmNode
->
nRegi⁄
>
iRegi⁄
 ){

4133 
iOff£t
 = 
iRegi⁄
*
szRegi⁄
;

4134 
iOff£tShi·
 = 
iOff£t
 % 
wöSysInfo
.
dwAŒoˇti⁄Gønuœrôy
;

4135 *
p
 = (*)
pShmNode
->
aRegi⁄
[
iRegi⁄
].
pM≠
;

4136 *
µ
 = (*)&
p
[
iOff£tShi·
];

4138 *
µ
 = 0;

4140 
	`sqlôe3_muãx_Àave
(
pShmNode
->
muãx
);

4141  
rc
;

4142 
	}
}

4145 
	#wöShmM≠
 0

	)

4146 
	#wöShmLock
 0

	)

4147 
	#wöShmB¨rõr
 0

	)

4148 
	#wöShmUnm≠
 0

	)

4154 #i‡
SQLITE_MAX_MMAP_SIZE
>0

4155 
	$wöUnm≠fûe
(
wöFûe
 *
pFûe
){

4156 
	`as£π
–
pFûe
!=0 );

4157 
	`OSTRACE
(("UNMAP-FILEÖid=%lu,ÖFile=%p, hMap=%p,ÖMapRegion=%p, "

4159 
	`osGëCuºítPro˚ssId
(), 
pFûe
,ÖFûe->
hM≠
,ÖFûe->
pM≠Regi⁄
,

4160 
pFûe
->
mm≠Size
,ÖFûe->
mm≠SizeA˘uÆ
,ÖFûe->
mm≠SizeMax
));

4161 if–
pFûe
->
pM≠Regi⁄
 ){

4162 if–!
	`osUnm≠VõwOfFûe
(
pFûe
->
pM≠Regi⁄
) ){

4163 
pFûe
->
œ°Eºno
 = 
	`osGëLa°Eº‹
();

4164 
	`OSTRACE
(("UNMAP-FILEÖid=%lu,ÖFile=%p,ÖMapRegion=%p, "

4165 "rc=SQLITE_IOERR_MMAP\n", 
	`osGëCuºítPro˚ssId
(), 
pFûe
,

4166 
pFûe
->
pM≠Regi⁄
));

4167  
	`wöLogEº‹
(
SQLITE_IOERR_MMAP
, 
pFûe
->
œ°Eºno
,

4168 "wöUnm≠fûe1", 
pFûe
->
zP©h
);

4170 
pFûe
->
pM≠Regi⁄
 = 0;

4171 
pFûe
->
mm≠Size
 = 0;

4172 
pFûe
->
mm≠SizeA˘uÆ
 = 0;

4174 if–
pFûe
->
hM≠
!=
NULL
 ){

4175 if–!
	`osClo£H™dÀ
(
pFûe
->
hM≠
) ){

4176 
pFûe
->
œ°Eºno
 = 
	`osGëLa°Eº‹
();

4177 
	`OSTRACE
(("UNMAP-FILEÖid=%lu,ÖFile=%p, hMap=%p,Ñc=SQLITE_IOERR_MMAP\n",

4178 
	`osGëCuºítPro˚ssId
(), 
pFûe
,ÖFûe->
hM≠
));

4179  
	`wöLogEº‹
(
SQLITE_IOERR_MMAP
, 
pFûe
->
œ°Eºno
,

4180 "wöUnm≠fûe2", 
pFûe
->
zP©h
);

4182 
pFûe
->
hM≠
 = 
NULL
;

4184 
	`OSTRACE
(("UNMAP-FILEÖid=%lu,ÖFile=%p,Ñc=SQLITE_OK\n",

4185 
	`osGëCuºítPro˚ssId
(), 
pFûe
));

4186  
SQLITE_OK
;

4187 
	}
}

4205 
	$wöM≠fûe
(
wöFûe
 *
pFd
, 
sqlôe3_öt64
 
nByã
){

4206 
sqlôe3_öt64
 
nM≠
 = 
nByã
;

4207 
rc
;

4209 
	`as£π
–
nM≠
>=0 || 
pFd
->
nFëchOut
==0 );

4210 
	`OSTRACE
(("MAP-FILEÖid=%lu,ÖFile=%p, size=%lld\n",

4211 
	`osGëCuºítPro˚ssId
(), 
pFd
, 
nByã
));

4213 if–
pFd
->
nFëchOut
>0 )  
SQLITE_OK
;

4215 if–
nM≠
<0 ){

4216 
rc
 = 
	`wöFûeSize
((
sqlôe3_fûe
*)
pFd
, &
nM≠
);

4217 if–
rc
 ){

4218 
	`OSTRACE
(("MAP-FILEÖid=%lu,ÖFile=%p,Ñc=SQLITE_IOERR_FSTAT\n",

4219 
	`osGëCuºítPro˚ssId
(), 
pFd
));

4220  
SQLITE_IOERR_FSTAT
;

4223 if–
nM≠
>
pFd
->
mm≠SizeMax
 ){

4224 
nM≠
 = 
pFd
->
mm≠SizeMax
;

4226 
nM≠
 &~(
sqlôe3_öt64
)(
wöSysInfo
.
dwPageSize
 - 1);

4228 if–
nM≠
==0 && 
pFd
->
mm≠Size
>0 ){

4229 
	`wöUnm≠fûe
(
pFd
);

4231 if–
nM≠
!=
pFd
->
mm≠Size
 ){

4232 *
pNew
 = 0;

4233 
DWORD
 
¥Ÿe˘
 = 
PAGE_READONLY
;

4234 
DWORD
 
Êags
 = 
FILE_MAP_READ
;

4236 
	`wöUnm≠fûe
(
pFd
);

4237 #ifde‡
SQLITE_MMAP_READWRITE


4238 if–(
pFd
->
˘æFœgs
 & 
WINFILE_RDONLY
)==0 ){

4239 
¥Ÿe˘
 = 
PAGE_READWRITE
;

4240 
Êags
 |
FILE_MAP_WRITE
;

4243 #i‡
SQLITE_OS_WINRT


4244 
pFd
->
hM≠
 = 
	`osCª©eFûeM≠pögFromAµ
’Fd->
h
, 
NULL
, 
¥Ÿe˘
, 
nM≠
, NULL);

4245 #ñi‡
	`deföed
(
SQLITE_WIN32_HAS_WIDE
)

4246 
pFd
->
hM≠
 = 
	`osCª©eFûeM≠pögW
’Fd->
h
, 
NULL
, 
¥Ÿe˘
,

4247 (
DWORD
)((
nM≠
>>32) & 0xffffffff),

4248 (
DWORD
)(
nM≠
 & 0xffffffff), 
NULL
);

4249 #ñi‡
	`deföed
(
SQLITE_WIN32_HAS_ANSI
Ë&& 
SQLITE_WIN32_CREATEFILEMAPPINGA


4250 
pFd
->
hM≠
 = 
	`osCª©eFûeM≠pögA
’Fd->
h
, 
NULL
, 
¥Ÿe˘
,

4251 (
DWORD
)((
nM≠
>>32) & 0xffffffff),

4252 (
DWORD
)(
nM≠
 & 0xffffffff), 
NULL
);

4254 if–
pFd
->
hM≠
==
NULL
 ){

4255 
pFd
->
œ°Eºno
 = 
	`osGëLa°Eº‹
();

4256 
rc
 = 
	`wöLogEº‹
(
SQLITE_IOERR_MMAP
, 
pFd
->
œ°Eºno
,

4257 "wöM≠fûe1", 
pFd
->
zP©h
);

4259 
	`OSTRACE
(("MAP-FILE-CREATEÖid=%lu,ÖFile=%p,Ñc=%s\n",

4260 
	`osGëCuºítPro˚ssId
(), 
pFd
, 
	`sqlôe3EºName
(
rc
)));

4261  
SQLITE_OK
;

4263 
	`as£π
–(
nM≠
 % 
wöSysInfo
.
dwPageSize
)==0 );

4264 
	`as£π
–(
SIZE_T
)==(
sqlôe3_öt64
Ë|| 
nM≠
<=0xffffffff );

4265 #i‡
SQLITE_OS_WINRT


4266 
pNew
 = 
	`osM≠VõwOfFûeFromAµ
(
pFd
->
hM≠
, 
Êags
, 0, (
SIZE_T
)
nM≠
);

4268 
pNew
 = 
	`osM≠VõwOfFûe
(
pFd
->
hM≠
, 
Êags
, 0, 0, (
SIZE_T
)
nM≠
);

4270 if–
pNew
==
NULL
 ){

4271 
	`osClo£H™dÀ
(
pFd
->
hM≠
);

4272 
pFd
->
hM≠
 = 
NULL
;

4273 
pFd
->
œ°Eºno
 = 
	`osGëLa°Eº‹
();

4274 
rc
 = 
	`wöLogEº‹
(
SQLITE_IOERR_MMAP
, 
pFd
->
œ°Eºno
,

4275 "wöM≠fûe2", 
pFd
->
zP©h
);

4277 
	`OSTRACE
(("MAP-FILE-MAPÖid=%lu,ÖFile=%p,Ñc=%s\n",

4278 
	`osGëCuºítPro˚ssId
(), 
pFd
, 
	`sqlôe3EºName
(
rc
)));

4279  
SQLITE_OK
;

4281 
pFd
->
pM≠Regi⁄
 = 
pNew
;

4282 
pFd
->
mm≠Size
 = 
nM≠
;

4283 
pFd
->
mm≠SizeA˘uÆ
 = 
nM≠
;

4286 
	`OSTRACE
(("MAP-FILEÖid=%lu,ÖFile=%p,Ñc=SQLITE_OK\n",

4287 
	`osGëCuºítPro˚ssId
(), 
pFd
));

4288  
SQLITE_OK
;

4289 
	}
}

4304 
	$wöFëch
(
sqlôe3_fûe
 *
fd
, 
i64
 
iOff
, 
nAmt
, **
µ
){

4305 #i‡
SQLITE_MAX_MMAP_SIZE
>0

4306 
wöFûe
 *
pFd
 = (wöFûe*)
fd
;

4308 *
µ
 = 0;

4310 
	`OSTRACE
(("FETCHÖid=%lu,ÖFile=%p, offset=%lld,ámount=%d,Öp=%p\n",

4311 
	`osGëCuºítPro˚ssId
(), 
fd
, 
iOff
, 
nAmt
, 
µ
));

4313 #i‡
SQLITE_MAX_MMAP_SIZE
>0

4314 if–
pFd
->
mm≠SizeMax
>0 ){

4315 if–
pFd
->
pM≠Regi⁄
==0 ){

4316 
rc
 = 
	`wöM≠fûe
(
pFd
, -1);

4317 if–
rc
!=
SQLITE_OK
 ){

4318 
	`OSTRACE
(("FETCHÖid=%lu,ÖFile=%p,Ñc=%s\n",

4319 
	`osGëCuºítPro˚ssId
(), 
pFd
, 
	`sqlôe3EºName
(
rc
)));

4320  
rc
;

4323 if–
pFd
->
mm≠Size
 >
iOff
+
nAmt
 ){

4324 *
µ
 = &((
u8
 *)
pFd
->
pM≠Regi⁄
)[
iOff
];

4325 
pFd
->
nFëchOut
++;

4330 
	`OSTRACE
(("FETCHÖid=%lu,ÖFile=%p,Öp=%p, *pp=%p,Ñc=SQLITE_OK\n",

4331 
	`osGëCuºítPro˚ssId
(), 
fd
, 
µ
, *pp));

4332  
SQLITE_OK
;

4333 
	}
}

4345 
	$wöUn„tch
(
sqlôe3_fûe
 *
fd
, 
i64
 
iOff
, *
p
){

4346 #i‡
SQLITE_MAX_MMAP_SIZE
>0

4347 
wöFûe
 *
pFd
 = (wöFûe*)
fd
;

4352 
	`as£π
–(
p
==0)==(
pFd
->
nFëchOut
==0) );

4355 
	`as£π
–
p
==0 ||Ö==&((
u8
 *)
pFd
->
pM≠Regi⁄
)[
iOff
] );

4357 
	`OSTRACE
(("UNFETCHÖid=%lu,ÖFile=%p, offset=%lld,Ö=%p\n",

4358 
	`osGëCuºítPro˚ssId
(), 
pFd
, 
iOff
, 
p
));

4360 if–
p
 ){

4361 
pFd
->
nFëchOut
--;

4367 
	`wöUnm≠fûe
(
pFd
);

4370 
	`as£π
–
pFd
->
nFëchOut
>=0 );

4373 
	`OSTRACE
(("UNFETCHÖid=%lu,ÖFile=%p,Ñc=SQLITE_OK\n",

4374 
	`osGëCuºítPro˚ssId
(), 
fd
));

4375  
SQLITE_OK
;

4376 
	}
}

4388 c⁄° 
sqlôe3_io_mëhods
 
	gwöIoMëhod
 = {

4390 
wöClo£
,

4391 
wöRód
,

4392 
wöWrôe
,

4393 
wöTrunˇã
,

4394 
wöSync
,

4395 
wöFûeSize
,

4396 
wöLock
,

4397 
wöU∆ock
,

4398 
wöCheckRe£rvedLock
,

4399 
wöFûeC⁄åﬁ
,

4400 
wöSe˘‹Size
,

4401 
wöDevi˚Ch¨a˘îi°ics
,

4402 
wöShmM≠
,

4403 
wöShmLock
,

4404 
wöShmB¨rõr
,

4405 
wöShmUnm≠
,

4406 
wöFëch
,

4407 
wöUn„tch


4417 #i‡
deföed
(
__CYGWIN__
)

4423 *
	$wöC⁄vîtToUtf8Fûíame
(c⁄° *
zFûíame
){

4424 *
zC⁄vîãd
 = 0;

4425 if–
	`osIsNT
() ){

4426 
zC⁄vîãd
 = 
	`wöUnicodeToUtf8
(
zFûíame
);

4428 #ifde‡
SQLITE_WIN32_HAS_ANSI


4430 
zC⁄vîãd
 = 
	`wöMbcsToUtf8
(
zFûíame
, 
	`osAªFûeApisANSI
());

4434  
zC⁄vîãd
;

4435 
	}
}

4444 *
	$wöC⁄vîtFromUtf8Fûíame
(c⁄° *
zFûíame
){

4445 *
zC⁄vîãd
 = 0;

4446 if–
	`osIsNT
() ){

4447 
zC⁄vîãd
 = 
	`wöUtf8ToUnicode
(
zFûíame
);

4449 #ifde‡
SQLITE_WIN32_HAS_ANSI


4451 
zC⁄vîãd
 = 
	`wöUtf8ToMbcs
(
zFûíame
, 
	`osAªFûeApisANSI
());

4455  
zC⁄vîãd
;

4456 
	}
}

4463 
	$wöMakeEndInDúSï
(
nBuf
, *
zBuf
){

4464 if–
zBuf
 ){

4465 
nLí
 = 
	`sqlôe3SåÀn30
(
zBuf
);

4466 if–
nLí
>0 ){

4467 if–
	`wöIsDúSï
(
zBuf
[
nLí
-1]) ){

4469 }if–
nLí
+1<
nBuf
 ){

4470 
zBuf
[
nLí
] = 
	`wöGëDúSï
();

4471 
zBuf
[
nLí
+1] = '\0';

4477 
	}
}

4483 
	$wöGëTem≤ame
(
sqlôe3_vfs
 *
pVfs
, **
pzBuf
){

4484 
zCh¨s
[] =

4488 
size_t
 
i
, 
j
;

4489 
nPª
 = 
	`sqlôe3SåÀn30
(
SQLITE_TEMP_FILE_PREFIX
);

4490 
nMax
, 
nBuf
, 
nDú
, 
nLí
;

4491 *
zBuf
;

4497 
	`SimuœãIOEº‹
– 
SQLITE_IOERR
 );

4502 
nMax
 = 
pVfs
->
mxP©h«me
; 
nBuf
 =ÇMax + 2;

4503 
zBuf
 = 
	`sqlôe3MÆlocZîo
–
nBuf
 );

4504 if–!
zBuf
 ){

4505 
	`OSTRACE
(("TEMP-FILENAMEÑc=SQLITE_IOERR_NOMEM\n"));

4506  
SQLITE_IOERR_NOMEM_BKPT
;

4513 
nDú
 = 
nMax
 - (
nPª
 + 15);

4514 
	`as£π
–
nDú
>0 );

4515 if–
sqlôe3_ãmp_dúe˘‹y
 ){

4516 
nDúLí
 = 
	`sqlôe3SåÀn30
(
sqlôe3_ãmp_dúe˘‹y
);

4517 if–
nDúLí
>0 ){

4518 if–!
	`wöIsDúSï
(
sqlôe3_ãmp_dúe˘‹y
[
nDúLí
-1]) ){

4519 
nDúLí
++;

4521 if–
nDúLí
>
nDú
 ){

4522 
	`sqlôe3_‰ì
(
zBuf
);

4523 
	`OSTRACE
(("TEMP-FILENAMEÑc=SQLITE_ERROR\n"));

4524  
	`wöLogEº‹
(
SQLITE_ERROR
, 0, "winGetTempname1", 0);

4526 
	`sqlôe3_¢¥ötf
(
nMax
, 
zBuf
, "%s", 
sqlôe3_ãmp_dúe˘‹y
);

4529 #i‡
	`deföed
(
__CYGWIN__
)

4531 c⁄° *
azDús
[] = {

4543 
i
;

4544 c⁄° *
zDú
 = 0;

4546 if–!
azDús
[0] )ázDús[0] = 
	`gëív
("SQLITE_TMPDIR");

4547 if–!
azDús
[1] )ázDús[1] = 
	`gëív
("TMPDIR");

4548 if–!
azDús
[2] )ázDús[2] = 
	`gëív
("TMP");

4549 if–!
azDús
[3] )ázDús[3] = 
	`gëív
("TEMP");

4550 if–!
azDús
[4] )ázDús[4] = 
	`gëív
("USERPROFILE");

4551 
i
=0; i<(
azDús
)/◊zDús[0]); 
zDú
=azDirs[i++]){

4552 *
zC⁄vîãd
;

4553 if–
zDú
==0 ) ;

4559 if–
	`wöIsDriveLëãrAndCﬁ⁄
(
zDú
) ){

4560 
zC⁄vîãd
 = 
	`wöC⁄vîtFromUtf8Fûíame
(
zDú
);

4561 if–!
zC⁄vîãd
 ){

4562 
	`sqlôe3_‰ì
(
zBuf
);

4563 
	`OSTRACE
(("TEMP-FILENAMEÑc=SQLITE_IOERR_NOMEM\n"));

4564  
SQLITE_IOERR_NOMEM_BKPT
;

4566 if–
	`wöIsDú
(
zC⁄vîãd
) ){

4567 
	`sqlôe3_¢¥ötf
(
nMax
, 
zBuf
, "%s", 
zDú
);

4568 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

4571 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

4573 
zC⁄vîãd
 = 
	`sqlôe3MÆlocZîo
–
nMax
+1 );

4574 if–!
zC⁄vîãd
 ){

4575 
	`sqlôe3_‰ì
(
zBuf
);

4576 
	`OSTRACE
(("TEMP-FILENAMEÑc=SQLITE_IOERR_NOMEM\n"));

4577  
SQLITE_IOERR_NOMEM_BKPT
;

4579 if–
	`cygwö_c⁄v_∑th
(

4580 
	`osIsNT
(Ë? 
CCP_POSIX_TO_WIN_W
 : 
CCP_POSIX_TO_WIN_A
, 
zDú
,

4581 
zC⁄vîãd
, 
nMax
+1)<0 ){

4582 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

4583 
	`sqlôe3_‰ì
(
zBuf
);

4584 
	`OSTRACE
(("TEMP-FILENAMEÑc=SQLITE_IOERR_CONVPATH\n"));

4585  
	`wöLogEº‹
(
SQLITE_IOERR_CONVPATH
, (
DWORD
)
î∫o
,

4586 "wöGëTem≤ame2", 
zDú
);

4588 if–
	`wöIsDú
(
zC⁄vîãd
) ){

4593 *
zUtf8
 = 
	`wöC⁄vîtToUtf8Fûíame
(
zC⁄vîãd
);

4594 if–!
zUtf8
 ){

4595 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

4596 
	`sqlôe3_‰ì
(
zBuf
);

4597 
	`OSTRACE
(("TEMP-FILENAMEÑc=SQLITE_IOERR_NOMEM\n"));

4598  
SQLITE_IOERR_NOMEM_BKPT
;

4600 
	`sqlôe3_¢¥ötf
(
nMax
, 
zBuf
, "%s", 
zUtf8
);

4601 
	`sqlôe3_‰ì
(
zUtf8
);

4602 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

4605 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

4609 #ñi‡!
SQLITE_OS_WINRT
 && !
	`deföed
(
__CYGWIN__
)

4610 if–
	`osIsNT
() ){

4611 *
zMu…i
;

4612 
LPWSTR
 
zWideP©h
 = 
	`sqlôe3MÆlocZîo
–
nMax
*(
WCHAR
) );

4613 if–!
zWideP©h
 ){

4614 
	`sqlôe3_‰ì
(
zBuf
);

4615 
	`OSTRACE
(("TEMP-FILENAMEÑc=SQLITE_IOERR_NOMEM\n"));

4616  
SQLITE_IOERR_NOMEM_BKPT
;

4618 if–
	`osGëTempP©hW
(
nMax
, 
zWideP©h
)==0 ){

4619 
	`sqlôe3_‰ì
(
zWideP©h
);

4620 
	`sqlôe3_‰ì
(
zBuf
);

4621 
	`OSTRACE
(("TEMP-FILENAMEÑc=SQLITE_IOERR_GETTEMPPATH\n"));

4622  
	`wöLogEº‹
(
SQLITE_IOERR_GETTEMPPATH
, 
	`osGëLa°Eº‹
(),

4625 
zMu…i
 = 
	`wöUnicodeToUtf8
(
zWideP©h
);

4626 if–
zMu…i
 ){

4627 
	`sqlôe3_¢¥ötf
(
nMax
, 
zBuf
, "%s", 
zMu…i
);

4628 
	`sqlôe3_‰ì
(
zMu…i
);

4629 
	`sqlôe3_‰ì
(
zWideP©h
);

4631 
	`sqlôe3_‰ì
(
zWideP©h
);

4632 
	`sqlôe3_‰ì
(
zBuf
);

4633 
	`OSTRACE
(("TEMP-FILENAMEÑc=SQLITE_IOERR_NOMEM\n"));

4634  
SQLITE_IOERR_NOMEM_BKPT
;

4637 #ifde‡
SQLITE_WIN32_HAS_ANSI


4639 *
zUtf8
;

4640 *
zMbcsP©h
 = 
	`sqlôe3MÆlocZîo
–
nMax
 );

4641 if–!
zMbcsP©h
 ){

4642 
	`sqlôe3_‰ì
(
zBuf
);

4643 
	`OSTRACE
(("TEMP-FILENAMEÑc=SQLITE_IOERR_NOMEM\n"));

4644  
SQLITE_IOERR_NOMEM_BKPT
;

4646 if–
	`osGëTempP©hA
(
nMax
, 
zMbcsP©h
)==0 ){

4647 
	`sqlôe3_‰ì
(
zBuf
);

4648 
	`OSTRACE
(("TEMP-FILENAMEÑc=SQLITE_IOERR_GETTEMPPATH\n"));

4649  
	`wöLogEº‹
(
SQLITE_IOERR_GETTEMPPATH
, 
	`osGëLa°Eº‹
(),

4652 
zUtf8
 = 
	`wöMbcsToUtf8
(
zMbcsP©h
, 
	`osAªFûeApisANSI
());

4653 if–
zUtf8
 ){

4654 
	`sqlôe3_¢¥ötf
(
nMax
, 
zBuf
, "%s", 
zUtf8
);

4655 
	`sqlôe3_‰ì
(
zUtf8
);

4657 
	`sqlôe3_‰ì
(
zBuf
);

4658 
	`OSTRACE
(("TEMP-FILENAMEÑc=SQLITE_IOERR_NOMEM\n"));

4659  
SQLITE_IOERR_NOMEM_BKPT
;

4670 if–!
	`wöMakeEndInDúSï
(
nDú
+1, 
zBuf
) ){

4671 
	`sqlôe3_‰ì
(
zBuf
);

4672 
	`OSTRACE
(("TEMP-FILENAMEÑc=SQLITE_ERROR\n"));

4673  
	`wöLogEº‹
(
SQLITE_ERROR
, 0, "winGetTempname4", 0);

4687 
nLí
 = 
	`sqlôe3SåÀn30
(
zBuf
);

4688 if–(
nLí
 + 
nPª
 + 17Ë> 
nBuf
 ){

4689 
	`sqlôe3_‰ì
(
zBuf
);

4690 
	`OSTRACE
(("TEMP-FILENAMEÑc=SQLITE_ERROR\n"));

4691  
	`wöLogEº‹
(
SQLITE_ERROR
, 0, "winGetTempname5", 0);

4694 
	`sqlôe3_¢¥ötf
(
nBuf
-16-
nLí
, 
zBuf
+nLí, 
SQLITE_TEMP_FILE_PREFIX
);

4696 
j
 = 
	`sqlôe3SåÀn30
(
zBuf
);

4697 
	`sqlôe3_øndom√ss
(15, &
zBuf
[
j
]);

4698 
i
=0; i<15; i++, 
j
++){

4699 
zBuf
[
j
] = ()
zCh¨s
[ (()zBuf[j])%((zChars)-1) ];

4701 
zBuf
[
j
] = 0;

4702 
zBuf
[
j
+1] = 0;

4703 *
pzBuf
 = 
zBuf
;

4705 
	`OSTRACE
(("TEMP-FILENAMEÇame=%s,Ñc=SQLITE_OK\n", 
zBuf
));

4706  
SQLITE_OK
;

4707 
	}
}

4714 
	$wöIsDú
(c⁄° *
zC⁄vîãd
){

4715 
DWORD
 
©å
;

4716 
rc
 = 0;

4717 
DWORD
 
œ°Eºno
;

4719 if–
	`osIsNT
() ){

4720 
˙t
 = 0;

4721 
WIN32_FILE_ATTRIBUTE_DATA
 
sAârD©a
;

4722 
	`mem£t
(&
sAârD©a
, 0, (sAttrData));

4723  !(
rc
 = 
	`osGëFûeAâribuãsExW
((
LPCWSTR
)
zC⁄vîãd
,

4724 
GëFûeExInfoSènd¨d
,

4725 &
sAârD©a
)Ë&& 
	`wöRëryI€º
(&
˙t
, &
œ°Eºno
) ){}

4726 if–!
rc
 ){

4729 
©å
 = 
sAârD©a
.
dwFûeAâribuãs
;

4730 #i‡
SQLITE_OS_WINCE
==0

4732 
©å
 = 
	`osGëFûeAâribuãsA
((*)
zC⁄vîãd
);

4735  (
©å
!=
INVALID_FILE_ATTRIBUTES
Ë&& (©å&
FILE_ATTRIBUTE_DIRECTORY
);

4736 
	}
}

4741 
	$wöO≥n
(

4742 
sqlôe3_vfs
 *
pVfs
,

4743 c⁄° *
zName
,

4744 
sqlôe3_fûe
 *
id
,

4745 
Êags
,

4746 *
pOutFœgs


4748 
HANDLE
 
h
;

4749 
DWORD
 
œ°Eºno
 = 0;

4750 
DWORD
 
dwDesúedAc˚ss
;

4751 
DWORD
 
dwSh¨eMode
;

4752 
DWORD
 
dwCª©i⁄Di•osôi⁄
;

4753 
DWORD
 
dwFœgsAndAâribuãs
 = 0;

4754 #i‡
SQLITE_OS_WINCE


4755 
isTemp
 = 0;

4757 
wöFûe
 *
pFûe
 = (wöFûe*)
id
;

4758 *
zC⁄vîãd
;

4759 c⁄° *
zUtf8Name
 = 
zName
;

4760 
˙t
 = 0;

4765 *
zTm≤ame
 = 0;

4767 
rc
 = 
SQLITE_OK
;

4768 #i‡!
	`deföed
(
NDEBUG
Ë|| 
SQLITE_OS_WINCE


4769 
eTy≥
 = 
Êags
&0xFFFFFF00;

4772 
isEx˛usive
 = (
Êags
 & 
SQLITE_OPEN_EXCLUSIVE
);

4773 
isDñëe
 = (
Êags
 & 
SQLITE_OPEN_DELETEONCLOSE
);

4774 
isCª©e
 = (
Êags
 & 
SQLITE_OPEN_CREATE
);

4775 
isRód⁄ly
 = (
Êags
 & 
SQLITE_OPEN_READONLY
);

4776 
isRódWrôe
 = (
Êags
 & 
SQLITE_OPEN_READWRITE
);

4778 #i‚de‡
NDEBUG


4779 
isO≥nJou∫Æ
 = (
isCª©e
 && (

4780 
eTy≥
==
SQLITE_OPEN_MASTER_JOURNAL


4781 || 
eTy≥
==
SQLITE_OPEN_MAIN_JOURNAL


4782 || 
eTy≥
==
SQLITE_OPEN_WAL


4786 
	`OSTRACE
(("OPENÇame=%s,ÖFile=%p, flags=%x,ÖOutFlags=%p\n",

4787 
zUtf8Name
, 
id
, 
Êags
, 
pOutFœgs
));

4796 
	`as£π
((
isRód⁄ly
==0 || 
isRódWrôe
==0) && (isReadWrite || isReadonly));

4797 
	`as£π
(
isCª©e
==0 || 
isRódWrôe
);

4798 
	`as£π
(
isEx˛usive
==0 || 
isCª©e
);

4799 
	`as£π
(
isDñëe
==0 || 
isCª©e
);

4803 
	`as£π
–(!
isDñëe
 && 
zName
Ë|| 
eTy≥
!=
SQLITE_OPEN_MAIN_DB
 );

4804 
	`as£π
–(!
isDñëe
 && 
zName
Ë|| 
eTy≥
!=
SQLITE_OPEN_MAIN_JOURNAL
 );

4805 
	`as£π
–(!
isDñëe
 && 
zName
Ë|| 
eTy≥
!=
SQLITE_OPEN_MASTER_JOURNAL
 );

4806 
	`as£π
–(!
isDñëe
 && 
zName
Ë|| 
eTy≥
!=
SQLITE_OPEN_WAL
 );

4809 
	`as£π
–
eTy≥
==
SQLITE_OPEN_MAIN_DB
 ||ÉTy≥==
SQLITE_OPEN_TEMP_DB


4810 || 
eTy≥
==
SQLITE_OPEN_MAIN_JOURNAL
 ||ÉTy≥==
SQLITE_OPEN_TEMP_JOURNAL


4811 || 
eTy≥
==
SQLITE_OPEN_SUBJOURNAL
 ||ÉTy≥==
SQLITE_OPEN_MASTER_JOURNAL


4812 || 
eTy≥
==
SQLITE_OPEN_TRANSIENT_DB
 ||ÉTy≥==
SQLITE_OPEN_WAL


4815 
	`as£π
–
pFûe
!=0 );

4816 
	`mem£t
(
pFûe
, 0, (
wöFûe
));

4817 
pFûe
->
h
 = 
INVALID_HANDLE_VALUE
;

4819 #i‡
SQLITE_OS_WINRT


4820 if–!
zUtf8Name
 && !
sqlôe3_ãmp_dúe˘‹y
 ){

4821 
	`sqlôe3_log
(
SQLITE_ERROR
,

4829 if–!
zUtf8Name
 ){

4830 
	`as£π
–
isDñëe
 && !
isO≥nJou∫Æ
 );

4831 
rc
 = 
	`wöGëTem≤ame
(
pVfs
, &
zTm≤ame
);

4832 if–
rc
!=
SQLITE_OK
 ){

4833 
	`OSTRACE
(("OPENÇame=%s,Ñc=%s", 
zUtf8Name
, 
	`sqlôe3EºName
(
rc
)));

4834  
rc
;

4836 
zUtf8Name
 = 
zTm≤ame
;

4843 
	`as£π
–(
eTy≥
!=
SQLITE_OPEN_MAIN_DB
Ë|| (
Êags
 & 
SQLITE_OPEN_URI
) ||

4844 
zUtf8Name
[
	`sqlôe3SåÀn30
(zUtf8Name)+1]==0 );

4847 
zC⁄vîãd
 = 
	`wöC⁄vîtFromUtf8Fûíame
(
zUtf8Name
);

4848 if–
zC⁄vîãd
==0 ){

4849 
	`sqlôe3_‰ì
(
zTm≤ame
);

4850 
	`OSTRACE
(("OPENÇame=%s,Ñc=SQLITE_IOERR_NOMEM", 
zUtf8Name
));

4851  
SQLITE_IOERR_NOMEM_BKPT
;

4854 if–
	`wöIsDú
(
zC⁄vîãd
) ){

4855 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

4856 
	`sqlôe3_‰ì
(
zTm≤ame
);

4857 
	`OSTRACE
(("OPENÇame=%s,Ñc=SQLITE_CANTOPEN_ISDIR", 
zUtf8Name
));

4858  
SQLITE_CANTOPEN_ISDIR
;

4861 if–
isRódWrôe
 ){

4862 
dwDesúedAc˚ss
 = 
GENERIC_READ
 | 
GENERIC_WRITE
;

4864 
dwDesúedAc˚ss
 = 
GENERIC_READ
;

4871 if–
isEx˛usive
 ){

4874 
dwCª©i⁄Di•osôi⁄
 = 
CREATE_NEW
;

4875 }if–
isCª©e
 ){

4877 
dwCª©i⁄Di•osôi⁄
 = 
OPEN_ALWAYS
;

4880 
dwCª©i⁄Di•osôi⁄
 = 
OPEN_EXISTING
;

4883 
dwSh¨eMode
 = 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
;

4885 if–
isDñëe
 ){

4886 #i‡
SQLITE_OS_WINCE


4887 
dwFœgsAndAâribuãs
 = 
FILE_ATTRIBUTE_HIDDEN
;

4888 
isTemp
 = 1;

4890 
dwFœgsAndAâribuãs
 = 
FILE_ATTRIBUTE_TEMPORARY


4891 | 
FILE_ATTRIBUTE_HIDDEN


4892 | 
FILE_FLAG_DELETE_ON_CLOSE
;

4895 
dwFœgsAndAâribuãs
 = 
FILE_ATTRIBUTE_NORMAL
;

4899 #i‡
SQLITE_OS_WINCE


4900 
dwFœgsAndAâribuãs
 |
FILE_FLAG_RANDOM_ACCESS
;

4903 if–
	`osIsNT
() ){

4904 #i‡
SQLITE_OS_WINRT


4905 
CREATEFILE2_EXTENDED_PARAMETERS
 
exãndedP¨amëîs
;

4906 
exãndedP¨amëîs
.
dwSize
 = (
CREATEFILE2_EXTENDED_PARAMETERS
);

4907 
exãndedP¨amëîs
.
dwFûeAâribuãs
 =

4908 
dwFœgsAndAâribuãs
 & 
FILE_ATTRIBUTE_MASK
;

4909 
exãndedP¨amëîs
.
dwFûeFœgs
 = 
dwFœgsAndAâribuãs
 & 
FILE_FLAG_MASK
;

4910 
exãndedP¨amëîs
.
dwSecurôyQosFœgs
 = 
SECURITY_ANONYMOUS
;

4911 
exãndedP¨amëîs
.
ÕSecurôyAâribuãs
 = 
NULL
;

4912 
exãndedP¨amëîs
.
hTem∂©eFûe
 = 
NULL
;

4913  (
h
 = 
	`osCª©eFûe2
((
LPCWSTR
)
zC⁄vîãd
,

4914 
dwDesúedAc˚ss
,

4915 
dwSh¨eMode
,

4916 
dwCª©i⁄Di•osôi⁄
,

4917 &
exãndedP¨amëîs
))==
INVALID_HANDLE_VALUE
 &&

4918 
	`wöRëryI€º
(&
˙t
, &
œ°Eºno
) ){

4922  (
h
 = 
	`osCª©eFûeW
((
LPCWSTR
)
zC⁄vîãd
,

4923 
dwDesúedAc˚ss
,

4924 
dwSh¨eMode
, 
NULL
,

4925 
dwCª©i⁄Di•osôi⁄
,

4926 
dwFœgsAndAâribuãs
,

4927 
NULL
))==
INVALID_HANDLE_VALUE
 &&

4928 
	`wöRëryI€º
(&
˙t
, &
œ°Eºno
) ){

4933 #ifde‡
SQLITE_WIN32_HAS_ANSI


4935  (
h
 = 
	`osCª©eFûeA
((
LPCSTR
)
zC⁄vîãd
,

4936 
dwDesúedAc˚ss
,

4937 
dwSh¨eMode
, 
NULL
,

4938 
dwCª©i⁄Di•osôi⁄
,

4939 
dwFœgsAndAâribuãs
,

4940 
NULL
))==
INVALID_HANDLE_VALUE
 &&

4941 
	`wöRëryI€º
(&
˙t
, &
œ°Eºno
) ){

4946 
	`wöLogI€º
(
˙t
, 
__LINE__
);

4948 
	`OSTRACE
(("OPEN fûe=%p,Çame=%s,ác˚ss=%lx,Ñc=%s\n", 
h
, 
zUtf8Name
,

4949 
dwDesúedAc˚ss
, (
h
==
INVALID_HANDLE_VALUE
) ? "failed" : "ok"));

4951 if–
h
==
INVALID_HANDLE_VALUE
 ){

4952 
pFûe
->
œ°Eºno
 =ÜastErrno;

4953 
	`wöLogEº‹
(
SQLITE_CANTOPEN
, 
pFûe
->
œ°Eºno
, "wöO≥n", 
zUtf8Name
);

4954 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

4955 
	`sqlôe3_‰ì
(
zTm≤ame
);

4956 if–
isRódWrôe
 && !
isEx˛usive
 ){

4957  
	`wöO≥n
(
pVfs
, 
zName
, 
id
,

4958 ((
Êags
|
SQLITE_OPEN_READONLY
) &

4959 ~(
SQLITE_OPEN_CREATE
|
SQLITE_OPEN_READWRITE
)),

4960 
pOutFœgs
);

4962  
SQLITE_CANTOPEN_BKPT
;

4966 if–
pOutFœgs
 ){

4967 if–
isRódWrôe
 ){

4968 *
pOutFœgs
 = 
SQLITE_OPEN_READWRITE
;

4970 *
pOutFœgs
 = 
SQLITE_OPEN_READONLY
;

4974 
	`OSTRACE
(("OPEN file=%p,Çame=%s,áccess=%lx,ÖOutFlags=%p, *pOutFlags=%d, "

4975 "rc=%s\n", 
h
, 
zUtf8Name
, 
dwDesúedAc˚ss
, 
pOutFœgs
,ÖOutFlags ?

4976 *
pOutFœgs
 : 0, (
h
==
INVALID_HANDLE_VALUE
) ? "failed" : "ok"));

4978 #i‡
SQLITE_OS_WINCE


4979 if–
isRódWrôe
 && 
eTy≥
==
SQLITE_OPEN_MAIN_DB


4980 && (
rc
 = 
	`wö˚Cª©eLock
(
zName
, 
pFûe
))!=
SQLITE_OK


4982 
	`osClo£H™dÀ
(
h
);

4983 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

4984 
	`sqlôe3_‰ì
(
zTm≤ame
);

4985 
	`OSTRACE
(("OPEN-CE-LOCKÇame=%s,Ñc=%s\n", 
zName
, 
	`sqlôe3EºName
(
rc
)));

4986  
rc
;

4988 if–
isTemp
 ){

4989 
pFûe
->
zDñëeOnClo£
 = 
zC⁄vîãd
;

4993 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

4996 
	`sqlôe3_‰ì
(
zTm≤ame
);

4997 
pFûe
->
pMëhod
 = &
wöIoMëhod
;

4998 
pFûe
->
pVfs
 =ÖVfs;

4999 
pFûe
->
h
 = h;

5000 if–
isRód⁄ly
 ){

5001 
pFûe
->
˘æFœgs
 |
WINFILE_RDONLY
;

5003 if–
	`sqlôe3_uri_boﬁón
(
zName
, "psow", 
SQLITE_POWERSAFE_OVERWRITE
) ){

5004 
pFûe
->
˘æFœgs
 |
WINFILE_PSOW
;

5006 
pFûe
->
œ°Eºno
 = 
NO_ERROR
;

5007 
pFûe
->
zP©h
 = 
zName
;

5008 #i‡
SQLITE_MAX_MMAP_SIZE
>0

5009 
pFûe
->
hM≠
 = 
NULL
;

5010 
pFûe
->
pM≠Regi⁄
 = 0;

5011 
pFûe
->
mm≠Size
 = 0;

5012 
pFûe
->
mm≠SizeA˘uÆ
 = 0;

5013 
pFûe
->
mm≠SizeMax
 = 
sqlôe3GlobÆC⁄fig
.
szMm≠
;

5016 
	`O≥nCou¡î
(+1);

5017  
rc
;

5018 
	}
}

5032 
	$wöDñëe
(

5033 
sqlôe3_vfs
 *
pVfs
,

5034 c⁄° *
zFûíame
,

5035 
syncDú


5037 
˙t
 = 0;

5038 
rc
;

5039 
DWORD
 
©å
;

5040 
DWORD
 
œ°Eºno
 = 0;

5041 *
zC⁄vîãd
;

5042 
	`UNUSED_PARAMETER
(
pVfs
);

5043 
	`UNUSED_PARAMETER
(
syncDú
);

5045 
	`SimuœãIOEº‹
( 
SQLITE_IOERR_DELETE
);

5046 
	`OSTRACE
(("DELETEÇame=%s, syncDú=%d\n", 
zFûíame
, 
syncDú
));

5048 
zC⁄vîãd
 = 
	`wöC⁄vîtFromUtf8Fûíame
(
zFûíame
);

5049 if–
zC⁄vîãd
==0 ){

5050 
	`OSTRACE
(("DELETEÇame=%s,Ñc=SQLITE_IOERR_NOMEM\n", 
zFûíame
));

5051  
SQLITE_IOERR_NOMEM_BKPT
;

5053 if–
	`osIsNT
() ){

5055 #i‡
SQLITE_OS_WINRT


5056 
WIN32_FILE_ATTRIBUTE_DATA
 
sAârD©a
;

5057 
	`mem£t
(&
sAârD©a
, 0, (sAttrData));

5058 i‡–
	`osGëFûeAâribuãsExW
(
zC⁄vîãd
, 
GëFûeExInfoSènd¨d
,

5059 &
sAârD©a
) ){

5060 
©å
 = 
sAârD©a
.
dwFûeAâribuãs
;

5062 
œ°Eºno
 = 
	`osGëLa°Eº‹
();

5063 if–
œ°Eºno
==
ERROR_FILE_NOT_FOUND


5064 || 
œ°Eºno
==
ERROR_PATH_NOT_FOUND
 ){

5065 
rc
 = 
SQLITE_IOERR_DELETE_NOENT
;

5067 
rc
 = 
SQLITE_ERROR
;

5072 
©å
 = 
	`osGëFûeAâribuãsW
(
zC⁄vîãd
);

5074 i‡–
©å
==
INVALID_FILE_ATTRIBUTES
 ){

5075 
œ°Eºno
 = 
	`osGëLa°Eº‹
();

5076 if–
œ°Eºno
==
ERROR_FILE_NOT_FOUND


5077 || 
œ°Eºno
==
ERROR_PATH_NOT_FOUND
 ){

5078 
rc
 = 
SQLITE_IOERR_DELETE_NOENT
;

5080 
rc
 = 
SQLITE_ERROR
;

5084 i‡–
©å
&
FILE_ATTRIBUTE_DIRECTORY
 ){

5085 
rc
 = 
SQLITE_ERROR
;

5088 i‡–
	`osDñëeFûeW
(
zC⁄vîãd
) ){

5089 
rc
 = 
SQLITE_OK
;

5092 i‡–!
	`wöRëryI€º
(&
˙t
, &
œ°Eºno
) ){

5093 
rc
 = 
SQLITE_ERROR
;

5098 #ifde‡
SQLITE_WIN32_HAS_ANSI


5101 
©å
 = 
	`osGëFûeAâribuãsA
(
zC⁄vîãd
);

5102 i‡–
©å
==
INVALID_FILE_ATTRIBUTES
 ){

5103 
œ°Eºno
 = 
	`osGëLa°Eº‹
();

5104 if–
œ°Eºno
==
ERROR_FILE_NOT_FOUND


5105 || 
œ°Eºno
==
ERROR_PATH_NOT_FOUND
 ){

5106 
rc
 = 
SQLITE_IOERR_DELETE_NOENT
;

5108 
rc
 = 
SQLITE_ERROR
;

5112 i‡–
©å
&
FILE_ATTRIBUTE_DIRECTORY
 ){

5113 
rc
 = 
SQLITE_ERROR
;

5116 i‡–
	`osDñëeFûeA
(
zC⁄vîãd
) ){

5117 
rc
 = 
SQLITE_OK
;

5120 i‡–!
	`wöRëryI€º
(&
˙t
, &
œ°Eºno
) ){

5121 
rc
 = 
SQLITE_ERROR
;

5127 if–
rc
 &&Ñc!=
SQLITE_IOERR_DELETE_NOENT
 ){

5128 
rc
 = 
	`wöLogEº‹
(
SQLITE_IOERR_DELETE
, 
œ°Eºno
, "wöDñëe", 
zFûíame
);

5130 
	`wöLogI€º
(
˙t
, 
__LINE__
);

5132 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

5133 
	`OSTRACE
(("DELETEÇame=%s,Ñc=%s\n", 
zFûíame
, 
	`sqlôe3EºName
(
rc
)));

5134  
rc
;

5135 
	}
}

5140 
	$wöAc˚ss
(

5141 
sqlôe3_vfs
 *
pVfs
,

5142 c⁄° *
zFûíame
,

5143 
Êags
,

5144 *
pResOut


5146 
DWORD
 
©å
;

5147 
rc
 = 0;

5148 
DWORD
 
œ°Eºno
 = 0;

5149 *
zC⁄vîãd
;

5150 
	`UNUSED_PARAMETER
(
pVfs
);

5152 
	`SimuœãIOEº‹
– 
SQLITE_IOERR_ACCESS
; );

5153 
	`OSTRACE
(("ACCESSÇame=%s, flags=%x,ÖResOut=%p\n",

5154 
zFûíame
, 
Êags
, 
pResOut
));

5156 
zC⁄vîãd
 = 
	`wöC⁄vîtFromUtf8Fûíame
(
zFûíame
);

5157 if–
zC⁄vîãd
==0 ){

5158 
	`OSTRACE
(("ACCESSÇame=%s,Ñc=SQLITE_IOERR_NOMEM\n", 
zFûíame
));

5159  
SQLITE_IOERR_NOMEM_BKPT
;

5161 if–
	`osIsNT
() ){

5162 
˙t
 = 0;

5163 
WIN32_FILE_ATTRIBUTE_DATA
 
sAârD©a
;

5164 
	`mem£t
(&
sAârD©a
, 0, (sAttrData));

5165  !(
rc
 = 
	`osGëFûeAâribuãsExW
((
LPCWSTR
)
zC⁄vîãd
,

5166 
GëFûeExInfoSènd¨d
,

5167 &
sAârD©a
)Ë&& 
	`wöRëryI€º
(&
˙t
, &
œ°Eºno
) ){}

5168 if–
rc
 ){

5172 if–
Êags
==
SQLITE_ACCESS_EXISTS


5173 && 
sAârD©a
.
nFûeSizeHigh
==0

5174 && 
sAârD©a
.
nFûeSizeLow
==0 ){

5175 
©å
 = 
INVALID_FILE_ATTRIBUTES
;

5177 
©å
 = 
sAârD©a
.
dwFûeAâribuãs
;

5180 
	`wöLogI€º
(
˙t
, 
__LINE__
);

5181 if–
œ°Eºno
!=
ERROR_FILE_NOT_FOUND
 &&Üa°Eºno!=
ERROR_PATH_NOT_FOUND
 ){

5182 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

5183  
	`wöLogEº‹
(
SQLITE_IOERR_ACCESS
, 
œ°Eºno
, "winAccess",

5184 
zFûíame
);

5186 
©å
 = 
INVALID_FILE_ATTRIBUTES
;

5190 #ifde‡
SQLITE_WIN32_HAS_ANSI


5192 
©å
 = 
	`osGëFûeAâribuãsA
((*)
zC⁄vîãd
);

5195 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

5196  
Êags
 ){

5197 
SQLITE_ACCESS_READ
:

5198 
SQLITE_ACCESS_EXISTS
:

5199 
rc
 = 
©å
!=
INVALID_FILE_ATTRIBUTES
;

5201 
SQLITE_ACCESS_READWRITE
:

5202 
rc
 = 
©å
!=
INVALID_FILE_ATTRIBUTES
 &&

5203 (
©å
 & 
FILE_ATTRIBUTE_READONLY
)==0;

5206 
	`as£π
(!"Invalid flagsárgument");

5208 *
pResOut
 = 
rc
;

5209 
	`OSTRACE
(("ACCESSÇame=%s,ÖResOut=%p, *pResOut=%d,Ñc=SQLITE_OK\n",

5210 
zFûíame
, 
pResOut
, *pResOut));

5211  
SQLITE_OK
;

5212 
	}
}

5218 
BOOL
 
	$wöIsDriveLëãrAndCﬁ⁄
(

5219 c⁄° *
zP©h«me


5221  ( 
	`sqlôe3IßÕha
(
zP©h«me
[0]) && zPathname[1]==':' );

5222 
	}
}

5230 
BOOL
 
	$wöIsVîb©imP©h«me
(

5231 c⁄° *
zP©h«me


5240 i‡–
	`wöIsDúSï
(
zP©h«me
[0]) ){

5241  
TRUE
;

5250 i‡–
	`wöIsDriveLëãrAndCﬁ⁄
(
zP©h«me
) ){

5251  
TRUE
;

5258  
FALSE
;

5259 
	}
}

5266 
	$wöFuŒP©h«me
(

5267 
sqlôe3_vfs
 *
pVfs
,

5268 c⁄° *
zRñ©ive
,

5269 
nFuŒ
,

5270 *
zFuŒ


5273 #i‡
	`deföed
(
__CYGWIN__
)

5274 
	`SimuœãIOEº‹
– 
SQLITE_ERROR
 );

5275 
	`UNUSED_PARAMETER
(
nFuŒ
);

5276 
	`as£π
–
nFuŒ
>=
pVfs
->
mxP©h«me
 );

5277 i‡–
sqlôe3_d©a_dúe˘‹y
 && !
	`wöIsVîb©imP©h«me
(
zRñ©ive
) ){

5284 *
zOut
 = 
	`sqlôe3MÆlocZîo
–
pVfs
->
mxP©h«me
+1 );

5285 if–!
zOut
 ){

5286  
SQLITE_IOERR_NOMEM_BKPT
;

5288 if–
	`cygwö_c⁄v_∑th
(

5289 (
	`osIsNT
(Ë? 
CCP_POSIX_TO_WIN_W
 : 
CCP_POSIX_TO_WIN_A
) |

5290 
CCP_RELATIVE
, 
zRñ©ive
, 
zOut
, 
pVfs
->
mxP©h«me
+1)<0 ){

5291 
	`sqlôe3_‰ì
(
zOut
);

5292  
	`wöLogEº‹
(
SQLITE_CANTOPEN_CONVPATH
, (
DWORD
)
î∫o
,

5293 "wöFuŒP©h«me1", 
zRñ©ive
);

5295 *
zUtf8
 = 
	`wöC⁄vîtToUtf8Fûíame
(
zOut
);

5296 if–!
zUtf8
 ){

5297 
	`sqlôe3_‰ì
(
zOut
);

5298  
SQLITE_IOERR_NOMEM_BKPT
;

5300 
	`sqlôe3_¢¥ötf
(
	`MIN
(
nFuŒ
, 
pVfs
->
mxP©h«me
), 
zFuŒ
, "%s%c%s",

5301 
sqlôe3_d©a_dúe˘‹y
, 
	`wöGëDúSï
(), 
zUtf8
);

5302 
	`sqlôe3_‰ì
(
zUtf8
);

5303 
	`sqlôe3_‰ì
(
zOut
);

5306 *
zOut
 = 
	`sqlôe3MÆlocZîo
–
pVfs
->
mxP©h«me
+1 );

5307 if–!
zOut
 ){

5308  
SQLITE_IOERR_NOMEM_BKPT
;

5310 if–
	`cygwö_c⁄v_∑th
(

5311 (
	`osIsNT
(Ë? 
CCP_POSIX_TO_WIN_W
 : 
CCP_POSIX_TO_WIN_A
),

5312 
zRñ©ive
, 
zOut
, 
pVfs
->
mxP©h«me
+1)<0 ){

5313 
	`sqlôe3_‰ì
(
zOut
);

5314  
	`wöLogEº‹
(
SQLITE_CANTOPEN_CONVPATH
, (
DWORD
)
î∫o
,

5315 "wöFuŒP©h«me2", 
zRñ©ive
);

5317 *
zUtf8
 = 
	`wöC⁄vîtToUtf8Fûíame
(
zOut
);

5318 if–!
zUtf8
 ){

5319 
	`sqlôe3_‰ì
(
zOut
);

5320  
SQLITE_IOERR_NOMEM_BKPT
;

5322 
	`sqlôe3_¢¥ötf
(
	`MIN
(
nFuŒ
, 
pVfs
->
mxP©h«me
), 
zFuŒ
, "%s", 
zUtf8
);

5323 
	`sqlôe3_‰ì
(
zUtf8
);

5324 
	`sqlôe3_‰ì
(
zOut
);

5327  
SQLITE_OK
;

5330 #i‡(
SQLITE_OS_WINCE
 || 
SQLITE_OS_WINRT
Ë&& !
	`deföed
(
__CYGWIN__
)

5331 
	`SimuœãIOEº‹
– 
SQLITE_ERROR
 );

5334 i‡–
sqlôe3_d©a_dúe˘‹y
 && !
	`wöIsVîb©imP©h«me
(
zRñ©ive
) ){

5341 
	`sqlôe3_¢¥ötf
(
	`MIN
(
nFuŒ
, 
pVfs
->
mxP©h«me
), 
zFuŒ
, "%s%c%s",

5342 
sqlôe3_d©a_dúe˘‹y
, 
	`wöGëDúSï
(), 
zRñ©ive
);

5344 
	`sqlôe3_¢¥ötf
(
	`MIN
(
nFuŒ
, 
pVfs
->
mxP©h«me
), 
zFuŒ
, "%s", 
zRñ©ive
);

5346  
SQLITE_OK
;

5349 #i‡!
SQLITE_OS_WINCE
 && !
SQLITE_OS_WINRT
 && !
	`deföed
(
__CYGWIN__
)

5350 
DWORD
 
nByã
;

5351 *
zC⁄vîãd
;

5352 *
zOut
;

5357 if–
zRñ©ive
[0]=='/' && 
	`wöIsDriveLëãrAndCﬁ⁄
(zRelative+1) ){

5358 
zRñ©ive
++;

5366 
	`SimuœãIOEº‹
– 
SQLITE_ERROR
 );

5367 i‡–
sqlôe3_d©a_dúe˘‹y
 && !
	`wöIsVîb©imP©h«me
(
zRñ©ive
) ){

5374 
	`sqlôe3_¢¥ötf
(
	`MIN
(
nFuŒ
, 
pVfs
->
mxP©h«me
), 
zFuŒ
, "%s%c%s",

5375 
sqlôe3_d©a_dúe˘‹y
, 
	`wöGëDúSï
(), 
zRñ©ive
);

5376  
SQLITE_OK
;

5378 
zC⁄vîãd
 = 
	`wöC⁄vîtFromUtf8Fûíame
(
zRñ©ive
);

5379 if–
zC⁄vîãd
==0 ){

5380  
SQLITE_IOERR_NOMEM_BKPT
;

5382 if–
	`osIsNT
() ){

5383 
LPWSTR
 
zTemp
;

5384 
nByã
 = 
	`osGëFuŒP©hNameW
((
LPCWSTR
)
zC⁄vîãd
, 0, 0, 0);

5385 if–
nByã
==0 ){

5386 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

5387  
	`wöLogEº‹
(
SQLITE_CANTOPEN_FULLPATH
, 
	`osGëLa°Eº‹
(),

5388 "wöFuŒP©h«me1", 
zRñ©ive
);

5390 
nByã
 += 3;

5391 
zTemp
 = 
	`sqlôe3MÆlocZîo
–
nByã
*(zTemp[0]) );

5392 if–
zTemp
==0 ){

5393 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

5394  
SQLITE_IOERR_NOMEM_BKPT
;

5396 
nByã
 = 
	`osGëFuŒP©hNameW
((
LPCWSTR
)
zC⁄vîãd
,ÇByã, 
zTemp
, 0);

5397 if–
nByã
==0 ){

5398 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

5399 
	`sqlôe3_‰ì
(
zTemp
);

5400  
	`wöLogEº‹
(
SQLITE_CANTOPEN_FULLPATH
, 
	`osGëLa°Eº‹
(),

5401 "wöFuŒP©h«me2", 
zRñ©ive
);

5403 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

5404 
zOut
 = 
	`wöUnicodeToUtf8
(
zTemp
);

5405 
	`sqlôe3_‰ì
(
zTemp
);

5407 #ifde‡
SQLITE_WIN32_HAS_ANSI


5409 *
zTemp
;

5410 
nByã
 = 
	`osGëFuŒP©hNameA
((*)
zC⁄vîãd
, 0, 0, 0);

5411 if–
nByã
==0 ){

5412 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

5413  
	`wöLogEº‹
(
SQLITE_CANTOPEN_FULLPATH
, 
	`osGëLa°Eº‹
(),

5414 "wöFuŒP©h«me3", 
zRñ©ive
);

5416 
nByã
 += 3;

5417 
zTemp
 = 
	`sqlôe3MÆlocZîo
–
nByã
*(zTemp[0]) );

5418 if–
zTemp
==0 ){

5419 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

5420  
SQLITE_IOERR_NOMEM_BKPT
;

5422 
nByã
 = 
	`osGëFuŒP©hNameA
((*)
zC⁄vîãd
,ÇByã, 
zTemp
, 0);

5423 if–
nByã
==0 ){

5424 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

5425 
	`sqlôe3_‰ì
(
zTemp
);

5426  
	`wöLogEº‹
(
SQLITE_CANTOPEN_FULLPATH
, 
	`osGëLa°Eº‹
(),

5427 "wöFuŒP©h«me4", 
zRñ©ive
);

5429 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

5430 
zOut
 = 
	`wöMbcsToUtf8
(
zTemp
, 
	`osAªFûeApisANSI
());

5431 
	`sqlôe3_‰ì
(
zTemp
);

5434 if–
zOut
 ){

5435 
	`sqlôe3_¢¥ötf
(
	`MIN
(
nFuŒ
, 
pVfs
->
mxP©h«me
), 
zFuŒ
, "%s", 
zOut
);

5436 
	`sqlôe3_‰ì
(
zOut
);

5437  
SQLITE_OK
;

5439  
SQLITE_IOERR_NOMEM_BKPT
;

5442 
	}
}

5444 #i‚de‡
SQLITE_OMIT_LOAD_EXTENSION


5449 *
	$wöDlO≥n
(
sqlôe3_vfs
 *
pVfs
, c⁄° *
zFûíame
){

5450 
HANDLE
 
h
;

5451 #i‡
	`deföed
(
__CYGWIN__
)

5452 
nFuŒ
 = 
pVfs
->
mxP©h«me
+1;

5453 *
zFuŒ
 = 
	`sqlôe3MÆlocZîo
–
nFuŒ
 );

5454 *
zC⁄vîãd
 = 0;

5455 if–
zFuŒ
==0 ){

5456 
	`OSTRACE
(("DLOPENÇame=%s, h™dÀ=%p\n", 
zFûíame
, (*)0));

5459 if–
	`wöFuŒP©h«me
(
pVfs
, 
zFûíame
, 
nFuŒ
, 
zFuŒ
)!=
SQLITE_OK
 ){

5460 
	`sqlôe3_‰ì
(
zFuŒ
);

5461 
	`OSTRACE
(("DLOPENÇame=%s, h™dÀ=%p\n", 
zFûíame
, (*)0));

5464 
zC⁄vîãd
 = 
	`wöC⁄vîtFromUtf8Fûíame
(
zFuŒ
);

5465 
	`sqlôe3_‰ì
(
zFuŒ
);

5467 *
zC⁄vîãd
 = 
	`wöC⁄vîtFromUtf8Fûíame
(
zFûíame
);

5468 
	`UNUSED_PARAMETER
(
pVfs
);

5470 if–
zC⁄vîãd
==0 ){

5471 
	`OSTRACE
(("DLOPENÇame=%s, h™dÀ=%p\n", 
zFûíame
, (*)0));

5474 if–
	`osIsNT
() ){

5475 #i‡
SQLITE_OS_WINRT


5476 
h
 = 
	`osLﬂdPackagedLibøry
((
LPCWSTR
)
zC⁄vîãd
, 0);

5478 
h
 = 
	`osLﬂdLibøryW
((
LPCWSTR
)
zC⁄vîãd
);

5481 #ifde‡
SQLITE_WIN32_HAS_ANSI


5483 
h
 = 
	`osLﬂdLibøryA
((*)
zC⁄vîãd
);

5486 
	`OSTRACE
(("DLOPENÇame=%s, h™dÀ=%p\n", 
zFûíame
, (*)
h
));

5487 
	`sqlôe3_‰ì
(
zC⁄vîãd
);

5488  (*)
h
;

5489 
	}
}

5490 
	$wöDlEº‹
(
sqlôe3_vfs
 *
pVfs
, 
nBuf
, *
zBufOut
){

5491 
	`UNUSED_PARAMETER
(
pVfs
);

5492 
	`wöGëLa°Eº‹Msg
(
	`osGëLa°Eº‹
(), 
nBuf
, 
zBufOut
);

5493 
	}
}

5494 (*
	$wöDlSym
(
sqlôe3_vfs
 *
pVfs
,*
pH
,c⁄° *
zSym
))(){

5495 
FARPROC
 
¥oc
;

5496 
	`UNUSED_PARAMETER
(
pVfs
);

5497 
¥oc
 = 
	`osGëProcAddªssA
((
HANDLE
)
pH
, 
zSym
);

5498 
	`OSTRACE
(("DLSYM handle=%p, symbol=%s,áddress=%p\n",

5499 (*)
pH
, 
zSym
, (*)
¥oc
));

5500  ((*)())
¥oc
;

5501 
	}
}

5502 
	$wöDlClo£
(
sqlôe3_vfs
 *
pVfs
, *
pH™dÀ
){

5503 
	`UNUSED_PARAMETER
(
pVfs
);

5504 
	`osFªeLibøry
((
HANDLE
)
pH™dÀ
);

5505 
	`OSTRACE
(("DLCLOSE h™dÀ=%p\n", (*)
pH™dÀ
));

5506 
	}
}

5508 
	#wöDlO≥n
 0

	)

5509 
	#wöDlEº‹
 0

	)

5510 
	#wöDlSym
 0

	)

5511 
	#wöDlClo£
 0

	)

5515 
E¡r›yG©hîî
 
	tE¡r›yG©hîî
;

5516 
	sE¡r›yG©hîî
 {

5517 *
	ma
;

5518 
	m«
;

5519 
	mi
;

5520 
	mnX‹
;

5523 #i‡!
deföed
(
SQLITE_TEST
Ë&& !deföed(
SQLITE_OMIT_RANDOMNESS
)

5525 
	$x‹Mem‹y
(
E¡r›yG©hîî
 *
p
, *
x
, 
sz
){

5526 
j
, 
k
;

5527 
j
=0, 
k
=
p
->
i
; j<
sz
; j++){

5528 
p
->
a
[
k
++] ^
x
[
j
];

5529 if–
k
>=
p
->
«
 ) k = 0;

5531 
p
->
i
 = 
k
;

5532 
p
->
nX‹
 +
sz
;

5533 
	}
}

5539 
	$wöR™dom√ss
(
sqlôe3_vfs
 *
pVfs
, 
nBuf
, *
zBuf
){

5540 #i‡
	`deföed
(
SQLITE_TEST
Ë|| deföed(
SQLITE_OMIT_RANDOMNESS
)

5541 
	`UNUSED_PARAMETER
(
pVfs
);

5542 
	`mem£t
(
zBuf
, 0, 
nBuf
);

5543  
nBuf
;

5545 
E¡r›yG©hîî
 
e
;

5546 
	`UNUSED_PARAMETER
(
pVfs
);

5547 
	`mem£t
(
zBuf
, 0, 
nBuf
);

5548 #i‡
	`deföed
(
_MSC_VER
Ë&& _MSC_VER>=1400 && !
SQLITE_OS_WINCE


5549 
	`ønd_s
((*)
zBuf
);

5551 
e
.
a
 = (*)
zBuf
;

5552 
e
.
«
 = 
nBuf
;

5553 
e
.
nX‹
 = 0;

5554 
e
.
i
 = 0;

5556 
SYSTEMTIME
 
x
;

5557 
	`osGëSy°emTime
(&
x
);

5558 
	`x‹Mem‹y
(&
e
, (*)&
x
, (
SYSTEMTIME
));

5561 
DWORD
 
pid
 = 
	`osGëCuºítPro˚ssId
();

5562 
	`x‹Mem‹y
(&
e
, (*)&
pid
, (
DWORD
));

5564 #i‡
SQLITE_OS_WINRT


5566 
ULONGLONG
 
˙t
 = 
	`osGëTickCou¡64
();

5567 
	`x‹Mem‹y
(&
e
, (*)&
˙t
, (
ULONGLONG
));

5571 
DWORD
 
˙t
 = 
	`osGëTickCou¡
();

5572 
	`x‹Mem‹y
(&
e
, (*)&
˙t
, (
DWORD
));

5576 
LARGE_INTEGER
 
i
;

5577 
	`osQuîyPîf‹m™˚Cou¡î
(&
i
);

5578 
	`x‹Mem‹y
(&
e
, (*)&
i
, (
LARGE_INTEGER
));

5580 #i‡!
SQLITE_OS_WINCE
 && !
SQLITE_OS_WINRT
 && 
SQLITE_WIN32_USE_UUID


5582 
UUID
 
id
;

5583 
	`mem£t
(&
id
, 0, (
UUID
));

5584 
	`osUuidCª©e
(&
id
);

5585 
	`x‹Mem‹y
(&
e
, (*)&
id
, (
UUID
));

5586 
	`mem£t
(&
id
, 0, (
UUID
));

5587 
	`osUuidCª©eSequítül
(&
id
);

5588 
	`x‹Mem‹y
(&
e
, (*)&
id
, (
UUID
));

5591  
e
.
nX‹
>
nBuf
 ?ÇBuf :É.nXor;

5593 
	}
}

5599 
	$wöSÀï
(
sqlôe3_vfs
 *
pVfs
, 
mi¸o£c
){

5600 
	`sqlôe3_wö32_¶ìp
((
mi¸o£c
+999)/1000);

5601 
	`UNUSED_PARAMETER
(
pVfs
);

5602  ((
mi¸o£c
+999)/1000)*1000;

5603 
	}
}

5610 #ifde‡
SQLITE_TEST


5611 
	gsqlôe3_cuºít_time
 = 0;

5624 
	$wöCuºítTimeI¡64
(
sqlôe3_vfs
 *
pVfs
, 
sqlôe3_öt64
 *
piNow
){

5628 
FILETIME
 
·
;

5629 c⁄° 
sqlôe3_öt64
 
wöFûëimeEpoch
 = 23058135*(sqlite3_int64)8640000;

5630 #ifde‡
SQLITE_TEST


5631 c⁄° 
sqlôe3_öt64
 
unixEpoch
 = 24405875*(sqlite3_int64)8640000;

5634 c⁄° 
sqlôe3_öt64
 
max32BôVÆue
 =

5635 (
sqlôe3_öt64
)2000000000 + (sqlite3_int64)2000000000 +

5636 (
sqlôe3_öt64
)294967296;

5638 #i‡
SQLITE_OS_WINCE


5639 
SYSTEMTIME
 
time
;

5640 
	`osGëSy°emTime
(&
time
);

5642 i‡(!
	`osSy°emTimeToFûeTime
(&
time
,&
·
)){

5643  
SQLITE_ERROR
;

5646 
	`osGëSy°emTimeAsFûeTime
–&
·
 );

5649 *
piNow
 = 
wöFûëimeEpoch
 +

5650 ((((
sqlôe3_öt64
)
·
.
dwHighD©eTime
)*
max32BôVÆue
) +

5651 (
sqlôe3_öt64
)
·
.
dwLowD©eTime
)/(sqlite3_int64)10000;

5653 #ifde‡
SQLITE_TEST


5654 if–
sqlôe3_cuºít_time
 ){

5655 *
piNow
 = 1000*(
sqlôe3_öt64
)
sqlôe3_cuºít_time
 + 
unixEpoch
;

5658 
	`UNUSED_PARAMETER
(
pVfs
);

5659  
SQLITE_OK
;

5660 
	}
}

5667 
	$wöCuºítTime
(
sqlôe3_vfs
 *
pVfs
, *
¥Now
){

5668 
rc
;

5669 
sqlôe3_öt64
 
i
;

5670 
rc
 = 
	`wöCuºítTimeI¡64
(
pVfs
, &
i
);

5671 if–!
rc
 ){

5672 *
¥Now
 = 
i
/86400000.0;

5674  
rc
;

5675 
	}
}

5707 
	$wöGëLa°Eº‹
(
sqlôe3_vfs
 *
pVfs
, 
nBuf
, *
zBuf
){

5708 
DWORD
 
e
 = 
	`osGëLa°Eº‹
();

5709 
	`UNUSED_PARAMETER
(
pVfs
);

5710 if–
nBuf
>0 ) 
	`wöGëLa°Eº‹Msg
(
e
,ÇBuf, 
zBuf
);

5711  
e
;

5712 
	}
}

5717 
	$sqlôe3_os_öô
(){

5718 
sqlôe3_vfs
 
wöVfs
 = {

5720 (
wöFûe
),

5721 
SQLITE_WIN32_MAX_PATH_BYTES
,

5725 
wöO≥n
,

5726 
wöDñëe
,

5727 
wöAc˚ss
,

5728 
wöFuŒP©h«me
,

5729 
wöDlO≥n
,

5730 
wöDlEº‹
,

5731 
wöDlSym
,

5732 
wöDlClo£
,

5733 
wöR™dom√ss
,

5734 
wöSÀï
,

5735 
wöCuºítTime
,

5736 
wöGëLa°Eº‹
,

5737 
wöCuºítTimeI¡64
,

5738 
wöSëSy°emCÆl
,

5739 
wöGëSy°emCÆl
,

5740 
wöNextSy°emCÆl
,

5742 #i‡
	`deföed
(
SQLITE_WIN32_HAS_WIDE
)

5743 
sqlôe3_vfs
 
wöL⁄gP©hVfs
 = {

5745 (
wöFûe
),

5746 
SQLITE_WINNT_MAX_PATH_BYTES
,

5750 
wöO≥n
,

5751 
wöDñëe
,

5752 
wöAc˚ss
,

5753 
wöFuŒP©h«me
,

5754 
wöDlO≥n
,

5755 
wöDlEº‹
,

5756 
wöDlSym
,

5757 
wöDlClo£
,

5758 
wöR™dom√ss
,

5759 
wöSÀï
,

5760 
wöCuºítTime
,

5761 
wöGëLa°Eº‹
,

5762 
wöCuºítTimeI¡64
,

5763 
wöSëSy°emCÆl
,

5764 
wöGëSy°emCÆl
,

5765 
wöNextSy°emCÆl
,

5771 
	`as£π
–
	`AºaySize
(
aSysˇŒ
)==80 );

5774 
	`mem£t
(&
wöSysInfo
, 0, (
SYSTEM_INFO
));

5775 #i‡
SQLITE_OS_WINRT


5776 
	`osGëN©iveSy°emInfo
(&
wöSysInfo
);

5778 
	`osGëSy°emInfo
(&
wöSysInfo
);

5780 
	`as£π
–
wöSysInfo
.
dwAŒoˇti⁄Gønuœrôy
>0 );

5781 
	`as£π
–
wöSysInfo
.
dwPageSize
>0 );

5783 
	`sqlôe3_vfs_ªgi°î
(&
wöVfs
, 1);

5785 #i‡
	`deföed
(
SQLITE_WIN32_HAS_WIDE
)

5786 
	`sqlôe3_vfs_ªgi°î
(&
wöL⁄gP©hVfs
, 0);

5789  
SQLITE_OK
;

5790 
	}
}

5792 
	$sqlôe3_os_íd
(){

5793 #i‡
SQLITE_OS_WINRT


5794 if–
¶ìpObj
!=
NULL
 ){

5795 
	`osClo£H™dÀ
(
¶ìpObj
);

5796 
¶ìpObj
 = 
NULL
;

5799  
SQLITE_OK
;

5800 
	}
}

	@os_win.h

15 #i‚de‡
_OS_WIN_H_


16 
	#_OS_WIN_H_


	)

21 
	~"wödows.h
"

23 #ifde‡
__CYGWIN__


24 
	~<sys/cygwö.h
>

25 
	~<î∫o.h
>

45 #i‡
SQLITE_OS_WIN
 && !
deföed
(
SQLITE_OS_WINNT
)

46 
	#SQLITE_OS_WINNT
 1

	)

53 #i‡
deföed
(
_WIN32_WCE
)

54 
	#SQLITE_OS_WINCE
 1

	)

56 
	#SQLITE_OS_WINCE
 0

	)

63 #i‡!
deföed
(
SQLITE_OS_WINRT
)

64 
	#SQLITE_OS_WINRT
 0

	)

71 #i‡
SQLITE_OS_WINCE


72 
	#SQLITE_WIN32_VOLATILE


	)

74 
	#SQLITE_WIN32_VOLATILE
 vﬁ©ûe

	)

81 #i‡
SQLITE_OS_WIN
 && !
SQLITE_OS_WINCE
 && !
SQLITE_OS_WINRT
 && \

82 
	gSQLITE_THREADSAFE
>0 && !
	$deföed
(
__CYGWIN__
)

83 
	#SQLITE_OS_WIN_THREADS
 1

	)

85 
	#SQLITE_OS_WIN_THREADS
 0

	)

	@pager.c

21 #i‚de‡
SQLITE_OMIT_DISKIO


22 
	~"sqlôeI¡.h
"

23 
	~"wÆ.h
"

116 
	gsqlôe3PagîTø˚
=1;

117 
	#sqlôe3DebugPrötf
 
¥ötf


	)

118 
	#PAGERTRACE
(
X
Ëif–
sqlôe3PagîTø˚
 ){ 
sqlôe3DebugPrötf
 X; }

	)

120 
	#PAGERTRACE
(
X
)

	)

131 
	#PAGERID
(
p
Ë(()’->
fd
))

	)

132 
	#FILEHANDLEID
(
fd
Ë(()fd)

	)

351 
	#PAGER_OPEN
 0

	)

352 
	#PAGER_READER
 1

	)

353 
	#PAGER_WRITER_LOCKED
 2

	)

354 
	#PAGER_WRITER_CACHEMOD
 3

	)

355 
	#PAGER_WRITER_DBMOD
 4

	)

356 
	#PAGER_WRITER_FINISHED
 5

	)

357 
	#PAGER_ERROR
 6

	)

407 
	#UNKNOWN_LOCK
 (
EXCLUSIVE_LOCK
+1)

	)

412 #ifde‡
SQLITE_HAS_CODEC


413 
	#CODEC1
(
P
,
D
,
N
,
X
,
E
) \

414 if–
P
->
xCodec
 && P->
	`xCodec
(P->
pCodec
,
D
,
N
,
X
)==0 ){ 
E
; }

	)

415 
	#CODEC2
(
P
,
D
,
N
,
X
,
E
,
O
) \

416 if–
P
->
xCodec
==0 ){ 
O
=(*)
D
; }\

417 if–(
O
=(*)(
P
->
	`xCodec
(P->
pCodec
,
D
,
N
,
X
)))==0 ){ 
E
; }

	)

419 
	#CODEC1
(
P
,
D
,
N
,
X
,
E
Ë

	)

420 
	#CODEC2
(
P
,
D
,
N
,
X
,
E
,
O
ËO=(*)
	)
D

429 
	#MAX_SECTOR_SIZE
 0x10000

	)

445 
PagîSavïoöt
 
	tPagîSavïoöt
;

446 
	sPagîSavïoöt
 {

447 
i64
 
	miOff£t
;

448 
i64
 
	miHdrOff£t
;

449 
Bôvec
 *
	mpInSavïoöt
;

450 
Pgno
 
	mnOrig
;

451 
Pgno
 
	miSubRec
;

452 #i‚de‡
SQLITE_OMIT_WAL


453 
u32
 
	maWÆD©a
[
WAL_SAVEPOINT_NDATA
];

460 
	#SPILLFLAG_OFF
 0x01

	)

461 
	#SPILLFLAG_ROLLBACK
 0x02

	)

462 
	#SPILLFLAG_NOSYNC
 0x04

	)

620 
	sPagî
 {

621 
sqlôe3_vfs
 *
	mpVfs
;

622 
u8
 
	mex˛usiveMode
;

623 
u8
 
	mjou∫ÆMode
;

624 
u8
 
	mu£Jou∫Æ
;

625 
u8
 
	mnoSync
;

626 
u8
 
	mfuŒSync
;

627 
u8
 
	mexåaSync
;

628 
u8
 
	mck±SyncFœgs
;

629 
u8
 
	mwÆSyncFœgs
;

630 
u8
 
	msyncFœgs
;

631 
u8
 
	mãmpFûe
;

632 
u8
 
	mnoLock
;

633 
u8
 
	mªadO∆y
;

634 
u8
 
	mmemDb
;

645 
u8
 
	meSèã
;

646 
u8
 
	meLock
;

647 
u8
 
	mch™geCou¡D⁄e
;

648 
u8
 
	m£tMa°î
;

649 
u8
 
	mdoNŸSpûl
;

650 
u8
 
	msubjInMem‹y
;

651 
u8
 
	mbU£Fëch
;

652 
u8
 
	mhasHñdSh¨edLock
;

653 
Pgno
 
	mdbSize
;

654 
Pgno
 
	mdbOrigSize
;

655 
Pgno
 
	mdbFûeSize
;

656 
Pgno
 
	mdbHötSize
;

657 
	mîrCode
;

658 
	mnRec
;

659 
u32
 
	mcksumInô
;

660 
u32
 
	mnSubRec
;

661 
Bôvec
 *
	mpInJou∫Æ
;

662 
sqlôe3_fûe
 *
	mfd
;

663 
sqlôe3_fûe
 *
	mjfd
;

664 
sqlôe3_fûe
 *
	msjfd
;

665 
i64
 
	mjou∫ÆOff
;

666 
i64
 
	mjou∫ÆHdr
;

667 
sqlôe3_backup
 *
	mpBackup
;

668 
PagîSavïoöt
 *
	maSavïoöt
;

669 
	mnSavïoöt
;

670 
u32
 
	miD©aVîsi⁄
;

671 
	mdbFûeVîs
[16];

673 
	mnMm≠Out
;

674 
sqlôe3_öt64
 
	mszMm≠
;

675 
PgHdr
 *
	mpMm≠Fªñi°
;

680 
u16
 
	mnExåa
;

681 
i16
 
	mnRe£rve
;

682 
u32
 
	mvfsFœgs
;

683 
u32
 
	m£˘‹Size
;

684 
	m∑geSize
;

685 
Pgno
 
	mmxPgno
;

686 
i64
 
	mjou∫ÆSizeLimô
;

687 *
	mzFûíame
;

688 *
	mzJou∫Æ
;

689 (*
	mxBusyH™dÀr
)(*);

690 *
	mpBusyH™dÀrArg
;

691 
	maSèt
[3];

692 #ifde‡
SQLITE_TEST


693 
	mnRód
;

695 (*
	mxReöôî
)(
	mDbPage
*);

696 #ifde‡
SQLITE_HAS_CODEC


697 *(*
	mxCodec
)(*,*,
	mPgno
,);

698 (*
	mxCodecSizeChng
)(*,,);

699 (*
	mxCodecFªe
)(*);

700 *
	mpCodec
;

702 *
	mpTmpS∑˚
;

703 
PCache
 *
	mpPCache
;

704 #i‚de‡
SQLITE_OMIT_WAL


705 
WÆ
 *
	mpWÆ
;

706 *
	mzWÆ
;

715 
	#PAGER_STAT_HIT
 0

	)

716 
	#PAGER_STAT_MISS
 1

	)

717 
	#PAGER_STAT_WRITE
 2

	)

724 #ifde‡
SQLITE_TEST


725 
	gsqlôe3_∑gî_ªaddb_cou¡
 = 0;

726 
	gsqlôe3_∑gî_wrôedb_cou¡
 = 0;

727 
	gsqlôe3_∑gî_wrôej_cou¡
 = 0;

728 
	#PAGER_INCR
(
v
Ëv++

	)

730 
	#PAGER_INCR
(
v
)

	)

758 c⁄° 
	gaJou∫ÆMagic
[] = {

766 
	#JOURNAL_PG_SZ
(
pPagî
Ë(’Pagî->
∑geSize
Ë+ 8)

	)

772 
	#JOURNAL_HDR_SZ
(
pPagî
Ë’Pagî->
£˘‹Size
)

	)

780 #ifde‡
SQLITE_OMIT_MEMORYDB


781 
	#MEMDB
 0

	)

783 
	#MEMDB
 
pPagî
->
memDb


	)

790 #i‡
SQLITE_MAX_MMAP_SIZE
>0

791 
	#USEFETCH
(
x
Ë((x)->
bU£Fëch
)

	)

793 
	#USEFETCH
(
x
Ë0

	)

799 
	#PAGER_MAX_PGNO
 2147483647

	)

813 
	#isO≥n
(
pFd
Ë(’Fd)->
pMëhods
!=0)

	)

819 #i‚de‡
SQLITE_OMIT_WAL


820 
	$∑gîU£WÆ
(
Pagî
 *
pPagî
){

821  (
pPagî
->
pWÆ
!=0);

822 
	}
}

824 
	#∑gîU£WÆ
(
x
Ë0

	)

825 
	#∑gîRﬁlbackWÆ
(
x
Ë0

	)

826 
	#∑gîWÆFømes
(
v
,
w
,
x
,
y
Ë0

	)

827 
	#∑gîO≥nWÆIfPª£¡
(
z
Ë
SQLITE_OK


	)

828 
	#∑gîBegöRódTønß˘i⁄
(
z
Ë
SQLITE_OK


	)

831 #i‚de‡
NDEBUG


840 
	$as£π_∑gî_°©e
(
Pagî
 *
p
){

841 
Pagî
 *
pPagî
 = 
p
;

844 
	`as£π
–
p
->
eSèã
==
PAGER_OPEN


845 || 
p
->
eSèã
==
PAGER_READER


846 || 
p
->
eSèã
==
PAGER_WRITER_LOCKED


847 || 
p
->
eSèã
==
PAGER_WRITER_CACHEMOD


848 || 
p
->
eSèã
==
PAGER_WRITER_DBMOD


849 || 
p
->
eSèã
==
PAGER_WRITER_FINISHED


850 || 
p
->
eSèã
==
PAGER_ERROR


857 
	`as£π
–
p
->
ãmpFûe
==0 ||Ö->
eLock
==
EXCLUSIVE_LOCK
 );

858 
	`as£π
–
p
->
ãmpFûe
==0 || 
pPagî
->
ch™geCou¡D⁄e
 );

863 
	`as£π
–
p
->
jou∫ÆMode
==
PAGER_JOURNALMODE_OFF
 ||Ö->
u£Jou∫Æ
 );

864 
	`as£π
–
p
->
jou∫ÆMode
!=
PAGER_JOURNALMODE_OFF
 || !
	`isO≥n
’->
jfd
) );

874 if–
MEMDB
 ){

875 
	`as£π
–!
	`isO≥n
(
p
->
fd
) );

876 
	`as£π
–
p
->
noSync
 );

877 
	`as£π
–
p
->
jou∫ÆMode
==
PAGER_JOURNALMODE_OFF


878 || 
p
->
jou∫ÆMode
==
PAGER_JOURNALMODE_MEMORY


880 
	`as£π
–
p
->
eSèã
!=
PAGER_ERROR
 &&Ö->eSèã!=
PAGER_OPEN
 );

881 
	`as£π
–
	`∑gîU£WÆ
(
p
)==0 );

887 
	`as£π
–
pPagî
->
ch™geCou¡D⁄e
==0 ||ÖPagî->
eLock
>=
RESERVED_LOCK
 );

888 
	`as£π
–
p
->
eLock
!=
PENDING_LOCK
 );

890  
p
->
eSèã
 ){

891 
PAGER_OPEN
:

892 
	`as£π
–!
MEMDB
 );

893 
	`as£π
–
pPagî
->
îrCode
==
SQLITE_OK
 );

894 
	`as£π
–
	`sqlôe3PˇcheRefCou¡
(
pPagî
->
pPCache
)==0 ||ÖPagî->
ãmpFûe
 );

897 
PAGER_READER
:

898 
	`as£π
–
pPagî
->
îrCode
==
SQLITE_OK
 );

899 
	`as£π
–
p
->
eLock
!=
UNKNOWN_LOCK
 );

900 
	`as£π
–
p
->
eLock
>=
SHARED_LOCK
 );

903 
PAGER_WRITER_LOCKED
:

904 
	`as£π
–
p
->
eLock
!=
UNKNOWN_LOCK
 );

905 
	`as£π
–
pPagî
->
îrCode
==
SQLITE_OK
 );

906 if–!
	`∑gîU£WÆ
(
pPagî
) ){

907 
	`as£π
–
p
->
eLock
>=
RESERVED_LOCK
 );

909 
	`as£π
–
pPagî
->
dbSize
=ıPagî->
dbOrigSize
 );

910 
	`as£π
–
pPagî
->
dbOrigSize
=ıPagî->
dbFûeSize
 );

911 
	`as£π
–
pPagî
->
dbOrigSize
=ıPagî->
dbHötSize
 );

912 
	`as£π
–
pPagî
->
£tMa°î
==0 );

915 
PAGER_WRITER_CACHEMOD
:

916 
	`as£π
–
p
->
eLock
!=
UNKNOWN_LOCK
 );

917 
	`as£π
–
pPagî
->
îrCode
==
SQLITE_OK
 );

918 if–!
	`∑gîU£WÆ
(
pPagî
) ){

924 
	`as£π
–
p
->
eLock
>=
RESERVED_LOCK
 );

925 
	`as£π
–
	`isO≥n
(
p
->
jfd
)

926 || 
p
->
jou∫ÆMode
==
PAGER_JOURNALMODE_OFF


927 || 
p
->
jou∫ÆMode
==
PAGER_JOURNALMODE_WAL


930 
	`as£π
–
pPagî
->
dbOrigSize
=ıPagî->
dbFûeSize
 );

931 
	`as£π
–
pPagî
->
dbOrigSize
=ıPagî->
dbHötSize
 );

934 
PAGER_WRITER_DBMOD
:

935 
	`as£π
–
p
->
eLock
==
EXCLUSIVE_LOCK
 );

936 
	`as£π
–
pPagî
->
îrCode
==
SQLITE_OK
 );

937 
	`as£π
–!
	`∑gîU£WÆ
(
pPagî
) );

938 
	`as£π
–
p
->
eLock
>=
EXCLUSIVE_LOCK
 );

939 
	`as£π
–
	`isO≥n
(
p
->
jfd
)

940 || 
p
->
jou∫ÆMode
==
PAGER_JOURNALMODE_OFF


941 || 
p
->
jou∫ÆMode
==
PAGER_JOURNALMODE_WAL


943 
	`as£π
–
pPagî
->
dbOrigSize
<ıPagî->
dbHötSize
 );

946 
PAGER_WRITER_FINISHED
:

947 
	`as£π
–
p
->
eLock
==
EXCLUSIVE_LOCK
 );

948 
	`as£π
–
pPagî
->
îrCode
==
SQLITE_OK
 );

949 
	`as£π
–!
	`∑gîU£WÆ
(
pPagî
) );

950 
	`as£π
–
	`isO≥n
(
p
->
jfd
)

951 || 
p
->
jou∫ÆMode
==
PAGER_JOURNALMODE_OFF


952 || 
p
->
jou∫ÆMode
==
PAGER_JOURNALMODE_WAL


956 
PAGER_ERROR
:

961 
	`as£π
–
pPagî
->
îrCode
!=
SQLITE_OK
 );

962 
	`as£π
–
	`sqlôe3PˇcheRefCou¡
(
pPagî
->
pPCache
)>0 ||ÖPagî->
ãmpFûe
 );

967 
	}
}

970 #ifde‡
SQLITE_DEBUG


979 *
	$¥öt_∑gî_°©e
(
Pagî
 *
p
){

980 
zRë
[1024];

982 
	`sqlôe3_¢¥ötf
(1024, 
zRë
,

991 , 
p
->
zFûíame


992 , 
p
->
eSèã
==
PAGER_OPEN
 ? "OPEN" :

993 
p
->
eSèã
==
PAGER_READER
 ? "READER" :

994 
p
->
eSèã
==
PAGER_WRITER_LOCKED
 ? "WRITER_LOCKED" :

995 
p
->
eSèã
==
PAGER_WRITER_CACHEMOD
 ? "WRITER_CACHEMOD" :

996 
p
->
eSèã
==
PAGER_WRITER_DBMOD
 ? "WRITER_DBMOD" :

997 
p
->
eSèã
==
PAGER_WRITER_FINISHED
 ? "WRITER_FINISHED" :

998 
p
->
eSèã
==
PAGER_ERROR
 ? "ERROR" : "?error?"

999 , ()
p
->
îrCode


1000 , 
p
->
eLock
==
NO_LOCK
 ? "NO_LOCK" :

1001 
p
->
eLock
==
RESERVED_LOCK
 ? "RESERVED" :

1002 
p
->
eLock
==
EXCLUSIVE_LOCK
 ? "EXCLUSIVE" :

1003 
p
->
eLock
==
SHARED_LOCK
 ? "SHARED" :

1004 
p
->
eLock
==
UNKNOWN_LOCK
 ? "UNKNOWN" : "?error?"

1005 , 
p
->
ex˛usiveMode
 ? "exclusive" : "normal"

1006 , 
p
->
jou∫ÆMode
==
PAGER_JOURNALMODE_MEMORY
 ? "memory" :

1007 
p
->
jou∫ÆMode
==
PAGER_JOURNALMODE_OFF
 ? "off" :

1008 
p
->
jou∫ÆMode
==
PAGER_JOURNALMODE_DELETE
 ? "delete" :

1009 
p
->
jou∫ÆMode
==
PAGER_JOURNALMODE_PERSIST
 ? "persist" :

1010 
p
->
jou∫ÆMode
==
PAGER_JOURNALMODE_TRUNCATE
 ? "truncate" :

1011 
p
->
jou∫ÆMode
==
PAGER_JOURNALMODE_WAL
 ? "wal" : "?error?"

1012 , ()
p
->
ãmpFûe
, (Ì->
memDb
, (Ì->
u£Jou∫Æ


1013 , 
p
->
jou∫ÆOff
,Ö->
jou∫ÆHdr


1014 , ()
p
->
dbSize
, (Ì->
dbOrigSize
, (Ì->
dbFûeSize


1017  
zRë
;

1018 
	}
}

1030 
	$subjRequúesPage
(
PgHdr
 *
pPg
){

1031 
Pagî
 *
pPagî
 = 
pPg
->pPager;

1032 
PagîSavïoöt
 *
p
;

1033 
Pgno
 
pgno
 = 
pPg
->pgno;

1034 
i
;

1035 
i
=0; i<
pPagî
->
nSavïoöt
; i++){

1036 
p
 = &
pPagî
->
aSavïoöt
[
i
];

1037 if–
p
->
nOrig
>=
pgno
 && 0==
	`sqlôe3BôvecTe°NŸNuŒ
’->
pInSavïoöt
,Ögno) ){

1042 
	}
}

1044 #ifde‡
SQLITE_DEBUG


1048 
	$∑geInJou∫Æ
(
Pagî
 *
pPagî
, 
PgHdr
 *
pPg
){

1049  
	`sqlôe3BôvecTe°
(
pPagî
->
pInJou∫Æ
, 
pPg
->
pgno
);

1050 
	}
}

1060 
	$ªad32bôs
(
sqlôe3_fûe
 *
fd
, 
i64
 
off£t
, 
u32
 *
pRes
){

1061 
ac
[4];

1062 
rc
 = 
	`sqlôe3OsRód
(
fd
, 
ac
, ◊c), 
off£t
);

1063 if–
rc
==
SQLITE_OK
 ){

1064 *
pRes
 = 
	`sqlôe3Gë4byã
(
ac
);

1066  
rc
;

1067 
	}
}

1072 
	#put32bôs
(
A
,
B
Ë
	`sqlôe3Put4byã
((
u8
*)A,B)

	)

1079 
	$wrôe32bôs
(
sqlôe3_fûe
 *
fd
, 
i64
 
off£t
, 
u32
 
vÆ
){

1080 
ac
[4];

1081 
	`put32bôs
(
ac
, 
vÆ
);

1082  
	`sqlôe3OsWrôe
(
fd
, 
ac
, 4, 
off£t
);

1083 
	}
}

1094 
	$∑gîU∆ockDb
(
Pagî
 *
pPagî
, 
eLock
){

1095 
rc
 = 
SQLITE_OK
;

1097 
	`as£π
–!
pPagî
->
ex˛usiveMode
 ||ÖPagî->
eLock
==eLock );

1098 
	`as£π
–
eLock
==
NO_LOCK
 ||ÉLock==
SHARED_LOCK
 );

1099 
	`as£π
–
eLock
!=
NO_LOCK
 || 
	`∑gîU£WÆ
(
pPagî
)==0 );

1100 if–
	`isO≥n
(
pPagî
->
fd
) ){

1101 
	`as£π
–
pPagî
->
eLock
>=eLock );

1102 
rc
 = 
pPagî
->
noLock
 ? 
SQLITE_OK
 : 
	`sqlôe3OsU∆ock
’Pagî->
fd
, 
eLock
);

1103 if–
pPagî
->
eLock
!=
UNKNOWN_LOCK
 ){

1104 
pPagî
->
eLock
 = (
u8
)eLock;

1106 
	`IOTRACE
(("UNLOCK %∞%d\n", 
pPagî
, 
eLock
))

1108  
rc
;

1109 
	}
}

1121 
	$∑gîLockDb
(
Pagî
 *
pPagî
, 
eLock
){

1122 
rc
 = 
SQLITE_OK
;

1124 
	`as£π
–
eLock
==
SHARED_LOCK
 ||ÉLock==
RESERVED_LOCK
 ||ÉLock==
EXCLUSIVE_LOCK
 );

1125 if–
pPagî
->
eLock
<eLock ||ÖPagî->eLock==
UNKNOWN_LOCK
 ){

1126 
rc
 = 
pPagî
->
noLock
 ? 
SQLITE_OK
 : 
	`sqlôe3OsLock
’Pagî->
fd
, 
eLock
);

1127 if–
rc
==
SQLITE_OK
 && (
pPagî
->
eLock
!=
UNKNOWN_LOCK
||eLock==
EXCLUSIVE_LOCK
) ){

1128 
pPagî
->
eLock
 = (
u8
)eLock;

1129 
	`IOTRACE
(("LOCK %∞%d\n", 
pPagî
, 
eLock
))

1132  
rc
;

1133 
	}
}

1152 #ifde‡
SQLITE_ENABLE_ATOMIC_WRITE


1153 
	$j∫lBuf„rSize
(
Pagî
 *
pPagî
){

1154 
	`as£π
–!
MEMDB
 );

1155 if–!
pPagî
->
ãmpFûe
 ){

1156 
dc
;

1157 
nSe˘‹
;

1158 
szPage
;

1160 
	`as£π
–
	`isO≥n
(
pPagî
->
fd
) );

1161 
dc
 = 
	`sqlôe3OsDevi˚Ch¨a˘îi°ics
(
pPagî
->
fd
);

1162 
nSe˘‹
 = 
pPagî
->
£˘‹Size
;

1163 
szPage
 = 
pPagî
->
∑geSize
;

1165 
	`as£π
(
SQLITE_IOCAP_ATOMIC512
==(512>>8));

1166 
	`as£π
(
SQLITE_IOCAP_ATOMIC64K
==(65536>>8));

1167 if–0==(
dc
&(
SQLITE_IOCAP_ATOMIC
|(
szPage
>>8)Ë|| 
nSe˘‹
>szPage) ){

1172  
	`JOURNAL_HDR_SZ
(
pPagî
Ë+ 
	`JOURNAL_PG_SZ
(pPager);

1173 
	}
}

1175 
	#j∫lBuf„rSize
(
x
Ë0

	)

1183 #ifde‡
SQLITE_CHECK_PAGES


1187 
u32
 
	$∑gî_d©ahash
(
nByã
, *
pD©a
){

1188 
u32
 
hash
 = 0;

1189 
i
;

1190 
i
=0; i<
nByã
; i++){

1191 
hash
 = (hash*1039Ë+ 
pD©a
[
i
];

1193  
hash
;

1194 
	}
}

1195 
u32
 
	$∑gî_∑gehash
(
PgHdr
 *
pPage
){

1196  
	`∑gî_d©ahash
(
pPage
->
pPagî
->
∑geSize
, (*ÌPage->
pD©a
);

1197 
	}
}

1198 
	$∑gî_£t_∑gehash
(
PgHdr
 *
pPage
){

1199 
pPage
->
∑geHash
 = 
	`∑gî_∑gehash
(pPage);

1200 
	}
}

1207 
	#CHECK_PAGE
(
x
Ë
	`checkPage
(x)

	)

1208 
	$checkPage
(
PgHdr
 *
pPg
){

1209 
Pagî
 *
pPagî
 = 
pPg
->pPager;

1210 
	`as£π
–
pPagî
->
eSèã
!=
PAGER_ERROR
 );

1211 
	`as£π
–(
pPg
->
Êags
&
PGHDR_DIRTY
Ë||ÖPg->
∑geHash
==
	`∑gî_∑gehash
(pPg) );

1212 
	}
}

1215 
	#∑gî_d©ahash
(
X
,
Y
Ë0

	)

1216 
	#∑gî_∑gehash
(
X
Ë0

	)

1217 
	#∑gî_£t_∑gehash
(
X
)

	)

1218 
	#CHECK_PAGE
(
x
)

	)

1246 
	$ªadMa°îJou∫Æ
(
sqlôe3_fûe
 *
pJ∫l
, *
zMa°î
, 
u32
 
nMa°î
){

1247 
rc
;

1248 
u32
 
Àn
;

1249 
i64
 
szJ
;

1250 
u32
 
cksum
;

1251 
u32
 
u
;

1252 
aMagic
[8];

1253 
zMa°î
[0] = '\0';

1255 if–
SQLITE_OK
!=(
rc
 = 
	`sqlôe3OsFûeSize
(
pJ∫l
, &
szJ
))

1256 || 
szJ
<16

1257 || 
SQLITE_OK
!=(
rc
 = 
	`ªad32bôs
(
pJ∫l
, 
szJ
-16, &
Àn
))

1258 || 
Àn
>=
nMa°î


1259 || 
Àn
==0

1260 || 
SQLITE_OK
!=(
rc
 = 
	`ªad32bôs
(
pJ∫l
, 
szJ
-12, &
cksum
))

1261 || 
SQLITE_OK
!=(
rc
 = 
	`sqlôe3OsRód
(
pJ∫l
, 
aMagic
, 8, 
szJ
-8))

1262 || 
	`memcmp
(
aMagic
, 
aJou∫ÆMagic
, 8)

1263 || 
SQLITE_OK
!=(
rc
 = 
	`sqlôe3OsRód
(
pJ∫l
, 
zMa°î
, 
Àn
, 
szJ
-16-len))

1265  
rc
;

1269 
u
=0; u<
Àn
; u++){

1270 
cksum
 -
zMa°î
[
u
];

1272 if–
cksum
 ){

1278 
Àn
 = 0;

1280 
zMa°î
[
Àn
] = '\0';

1282  
SQLITE_OK
;

1283 
	}
}

1300 
i64
 
	$jou∫ÆHdrOff£t
(
Pagî
 *
pPagî
){

1301 
i64
 
off£t
 = 0;

1302 
i64
 
c
 = 
pPagî
->
jou∫ÆOff
;

1303 if–
c
 ){

1304 
off£t
 = ((
c
-1)/
	`JOURNAL_HDR_SZ
(
pPagî
) + 1) * JOURNAL_HDR_SZ(pPager);

1306 
	`as£π
–
off£t
%
	`JOURNAL_HDR_SZ
(
pPagî
)==0 );

1307 
	`as£π
–
off£t
>=
c
 );

1308 
	`as£π
–(
off£t
-
c
)<
	`JOURNAL_HDR_SZ
(
pPagî
) );

1309  
off£t
;

1310 
	}
}

1333 
	$zîoJou∫ÆHdr
(
Pagî
 *
pPagî
, 
doTrunˇã
){

1334 
rc
 = 
SQLITE_OK
;

1335 
	`as£π
–
	`isO≥n
(
pPagî
->
jfd
) );

1336 
	`as£π
–!
	`sqlôe3Jou∫ÆIsInMem‹y
(
pPagî
->
jfd
) );

1337 if–
pPagî
->
jou∫ÆOff
 ){

1338 c⁄° 
i64
 
iLimô
 = 
pPagî
->
jou∫ÆSizeLimô
;

1340 
	`IOTRACE
(("JZEROHDR %p\n", 
pPagî
))

1341 if–
doTrunˇã
 || 
iLimô
==0 ){

1342 
rc
 = 
	`sqlôe3OsTrunˇã
(
pPagî
->
jfd
, 0);

1344 c⁄° 
zîoHdr
[28] = {0};

1345 
rc
 = 
	`sqlôe3OsWrôe
(
pPagî
->
jfd
, 
zîoHdr
, (zeroHdr), 0);

1347 if–
rc
==
SQLITE_OK
 && !
pPagî
->
noSync
 ){

1348 
rc
 = 
	`sqlôe3OsSync
(
pPagî
->
jfd
, 
SQLITE_SYNC_DATAONLY
|pPagî->
syncFœgs
);

1357 if–
rc
==
SQLITE_OK
 && 
iLimô
>0 ){

1358 
i64
 
sz
;

1359 
rc
 = 
	`sqlôe3OsFûeSize
(
pPagî
->
jfd
, &
sz
);

1360 if–
rc
==
SQLITE_OK
 && 
sz
>
iLimô
 ){

1361 
rc
 = 
	`sqlôe3OsTrunˇã
(
pPagî
->
jfd
, 
iLimô
);

1365  
rc
;

1366 
	}
}

1383 
	$wrôeJou∫ÆHdr
(
Pagî
 *
pPagî
){

1384 
rc
 = 
SQLITE_OK
;

1385 *
zHódî
 = 
pPagî
->
pTmpS∑˚
;

1386 
u32
 
nHódî
 = (u32)
pPagî
->
∑geSize
;

1387 
u32
 
nWrôe
;

1388 
ii
;

1390 
	`as£π
–
	`isO≥n
(
pPagî
->
jfd
) );

1392 if–
nHódî
>
	`JOURNAL_HDR_SZ
(
pPagî
) ){

1393 
nHódî
 = 
	`JOURNAL_HDR_SZ
(
pPagî
);

1400 
ii
=0; ii<
pPagî
->
nSavïoöt
; ii++){

1401 if–
pPagî
->
aSavïoöt
[
ii
].
iHdrOff£t
==0 ){

1402 
pPagî
->
aSavïoöt
[
ii
].
iHdrOff£t
 =ÖPagî->
jou∫ÆOff
;

1406 
pPagî
->
jou∫ÆHdr
 =ÖPagî->
jou∫ÆOff
 = 
	`jou∫ÆHdrOff£t
(pPager);

1428 
	`as£π
–
	`isO≥n
(
pPagî
->
fd
Ë||ÖPagî->
noSync
 );

1429 if–
pPagî
->
noSync
 || (pPagî->
jou∫ÆMode
==
PAGER_JOURNALMODE_MEMORY
)

1430 || (
	`sqlôe3OsDevi˚Ch¨a˘îi°ics
(
pPagî
->
fd
)&
SQLITE_IOCAP_SAFE_APPEND
)

1432 
	`mem˝y
(
zHódî
, 
aJou∫ÆMagic
, (aJournalMagic));

1433 
	`put32bôs
(&
zHódî
[(
aJou∫ÆMagic
)], 0xffffffff);

1435 
	`mem£t
(
zHódî
, 0, (
aJou∫ÆMagic
)+4);

1439 
	`sqlôe3_øndom√ss
((
pPagî
->
cksumInô
), &pPager->cksumInit);

1440 
	`put32bôs
(&
zHódî
[(
aJou∫ÆMagic
)+4], 
pPagî
->
cksumInô
);

1442 
	`put32bôs
(&
zHódî
[(
aJou∫ÆMagic
)+8], 
pPagî
->
dbOrigSize
);

1444 
	`put32bôs
(&
zHódî
[(
aJou∫ÆMagic
)+12], 
pPagî
->
£˘‹Size
);

1447 
	`put32bôs
(&
zHódî
[(
aJou∫ÆMagic
)+16], 
pPagî
->
∑geSize
);

1454 
	`mem£t
(&
zHódî
[(
aJou∫ÆMagic
)+20], 0,

1455 
nHódî
-((
aJou∫ÆMagic
)+20));

1474 
nWrôe
=0; 
rc
==
SQLITE_OK
&&nWrôe<
	`JOURNAL_HDR_SZ
(
pPagî
);ÇWrôe+=
nHódî
){

1475 
	`IOTRACE
(("JHDR %∞%Œd %d\n", 
pPagî
,ÖPagî->
jou∫ÆHdr
, 
nHódî
))

1476 
rc
 = 
	`sqlôe3OsWrôe
(
pPagî
->
jfd
, 
zHódî
, 
nHódî
,ÖPagî->
jou∫ÆOff
);

1477 
	`as£π
–
pPagî
->
jou∫ÆHdr
 <pPagî->
jou∫ÆOff
 );

1478 
pPagî
->
jou∫ÆOff
 +
nHódî
;

1481  
rc
;

1482 
	}
}

1501 
	$ªadJou∫ÆHdr
(

1502 
Pagî
 *
pPagî
,

1503 
isHŸ
,

1504 
i64
 
jou∫ÆSize
,

1505 
u32
 *
pNRec
,

1506 
u32
 *
pDbSize


1508 
rc
;

1509 
aMagic
[8];

1510 
i64
 
iHdrOff
;

1512 
	`as£π
–
	`isO≥n
(
pPagî
->
jfd
) );

1518 
pPagî
->
jou∫ÆOff
 = 
	`jou∫ÆHdrOff£t
(pPager);

1519 if–
pPagî
->
jou∫ÆOff
+
	`JOURNAL_HDR_SZ
’PagîË> 
jou∫ÆSize
 ){

1520  
SQLITE_DONE
;

1522 
iHdrOff
 = 
pPagî
->
jou∫ÆOff
;

1529 if–
isHŸ
 || 
iHdrOff
!=
pPagî
->
jou∫ÆHdr
 ){

1530 
rc
 = 
	`sqlôe3OsRód
(
pPagî
->
jfd
, 
aMagic
, ◊Magic), 
iHdrOff
);

1531 if–
rc
 ){

1532  
rc
;

1534 if–
	`memcmp
(
aMagic
, 
aJou∫ÆMagic
, (aMagic))!=0 ){

1535  
SQLITE_DONE
;

1543 if–
SQLITE_OK
!=(
rc
 = 
	`ªad32bôs
(
pPagî
->
jfd
, 
iHdrOff
+8, 
pNRec
))

1544 || 
SQLITE_OK
!=(
rc
 = 
	`ªad32bôs
(
pPagî
->
jfd
, 
iHdrOff
+12, &pPagî->
cksumInô
))

1545 || 
SQLITE_OK
!=(
rc
 = 
	`ªad32bôs
(
pPagî
->
jfd
, 
iHdrOff
+16, 
pDbSize
))

1547  
rc
;

1550 if–
pPagî
->
jou∫ÆOff
==0 ){

1551 
u32
 
iPageSize
;

1552 
u32
 
iSe˘‹Size
;

1555 if–
SQLITE_OK
!=(
rc
 = 
	`ªad32bôs
(
pPagî
->
jfd
, 
iHdrOff
+20, &
iSe˘‹Size
))

1556 || 
SQLITE_OK
!=(
rc
 = 
	`ªad32bôs
(
pPagî
->
jfd
, 
iHdrOff
+24, &
iPageSize
))

1558  
rc
;

1565 if–
iPageSize
==0 ){

1566 
iPageSize
 = 
pPagî
->
∑geSize
;

1574 if–
iPageSize
<512 || 
iSe˘‹Size
<32

1575 || 
iPageSize
>
SQLITE_MAX_PAGE_SIZE
 || 
iSe˘‹Size
>
MAX_SECTOR_SIZE


1576 || ((
iPageSize
-1)&iPageSize)!=0 || ((
iSe˘‹Size
-1)&iSectorSize)!=0

1583  
SQLITE_DONE
;

1590 
rc
 = 
	`sqlôe3PagîSëPagesize
(
pPagî
, &
iPageSize
, -1);

1591 
	`ã°ˇ£
–
rc
!=
SQLITE_OK
 );

1599 
pPagî
->
£˘‹Size
 = 
iSe˘‹Size
;

1602 
pPagî
->
jou∫ÆOff
 +
	`JOURNAL_HDR_SZ
(pPager);

1603  
rc
;

1604 
	}
}

1626 
	$wrôeMa°îJou∫Æ
(
Pagî
 *
pPagî
, c⁄° *
zMa°î
){

1627 
rc
;

1628 
nMa°î
;

1629 
i64
 
iHdrOff
;

1630 
i64
 
j∫lSize
;

1631 
u32
 
cksum
 = 0;

1633 
	`as£π
–
pPagî
->
£tMa°î
==0 );

1634 
	`as£π
–!
	`∑gîU£WÆ
(
pPagî
) );

1636 if–!
zMa°î


1637 || 
pPagî
->
jou∫ÆMode
==
PAGER_JOURNALMODE_MEMORY


1638 || !
	`isO≥n
(
pPagî
->
jfd
)

1640  
SQLITE_OK
;

1642 
pPagî
->
£tMa°î
 = 1;

1643 
	`as£π
–
pPagî
->
jou∫ÆHdr
 <pPagî->
jou∫ÆOff
 );

1646 
nMa°î
=0; 
zMa°î
[nMaster];ÇMaster++){

1647 
cksum
 +
zMa°î
[
nMa°î
];

1654 if–
pPagî
->
fuŒSync
 ){

1655 
pPagî
->
jou∫ÆOff
 = 
	`jou∫ÆHdrOff£t
(pPager);

1657 
iHdrOff
 = 
pPagî
->
jou∫ÆOff
;

1662 if–(0 !(
rc
 = 
	`wrôe32bôs
(
pPagî
->
jfd
, 
iHdrOff
, 
	`PAGER_MJ_PGNO
(pPager))))

1663 || (0 !(
rc
 = 
	`sqlôe3OsWrôe
(
pPagî
->
jfd
, 
zMa°î
, 
nMa°î
, 
iHdrOff
+4)))

1664 || (0 !(
rc
 = 
	`wrôe32bôs
(
pPagî
->
jfd
, 
iHdrOff
+4+
nMa°î
,ÇMaster)))

1665 || (0 !(
rc
 = 
	`wrôe32bôs
(
pPagî
->
jfd
, 
iHdrOff
+4+
nMa°î
+4, 
cksum
)))

1666 || (0 !(
rc
 = 
	`sqlôe3OsWrôe
(
pPagî
->
jfd
, 
aJou∫ÆMagic
, 8,

1667 
iHdrOff
+4+
nMa°î
+8)))

1669  
rc
;

1671 
pPagî
->
jou∫ÆOff
 +(
nMa°î
+20);

1683 if–
SQLITE_OK
==(
rc
 = 
	`sqlôe3OsFûeSize
(
pPagî
->
jfd
, &
j∫lSize
))

1684 && 
j∫lSize
>
pPagî
->
jou∫ÆOff


1686 
rc
 = 
	`sqlôe3OsTrunˇã
(
pPagî
->
jfd
,ÖPagî->
jou∫ÆOff
);

1688  
rc
;

1689 
	}
}

1694 
	$∑gî_ª£t
(
Pagî
 *
pPagî
){

1695 
pPagî
->
iD©aVîsi⁄
++;

1696 
	`sqlôe3BackupRe°¨t
(
pPagî
->
pBackup
);

1697 
	`sqlôe3PˇcheCÀ¨
(
pPagî
->
pPCache
);

1698 
	}
}

1703 
u32
 
	$sqlôe3PagîD©aVîsi⁄
(
Pagî
 *
pPagî
){

1704 
	`as£π
–
pPagî
->
eSèã
>
PAGER_OPEN
 );

1705  
pPagî
->
iD©aVîsi⁄
;

1706 
	}
}

1713 
	$ªÀa£AŒSavïoöts
(
Pagî
 *
pPagî
){

1714 
ii
;

1715 
ii
=0; ii<
pPagî
->
nSavïoöt
; ii++){

1716 
	`sqlôe3BôvecDe°roy
(
pPagî
->
aSavïoöt
[
ii
].
pInSavïoöt
);

1718 if–!
pPagî
->
ex˛usiveMode
 || 
	`sqlôe3Jou∫ÆIsInMem‹y
’Pagî->
sjfd
) ){

1719 
	`sqlôe3OsClo£
(
pPagî
->
sjfd
);

1721 
	`sqlôe3_‰ì
(
pPagî
->
aSavïoöt
);

1722 
pPagî
->
aSavïoöt
 = 0;

1723 
pPagî
->
nSavïoöt
 = 0;

1724 
pPagî
->
nSubRec
 = 0;

1725 
	}
}

1732 
	$addToSavïoötBôvecs
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
){

1733 
ii
;

1734 
rc
 = 
SQLITE_OK
;

1736 
ii
=0; ii<
pPagî
->
nSavïoöt
; ii++){

1737 
PagîSavïoöt
 *
p
 = &
pPagî
->
aSavïoöt
[
ii
];

1738 if–
pgno
<=
p
->
nOrig
 ){

1739 
rc
 |
	`sqlôe3BôvecSë
(
p
->
pInSavïoöt
, 
pgno
);

1740 
	`ã°ˇ£
–
rc
==
SQLITE_NOMEM
 );

1741 
	`as£π
–
rc
==
SQLITE_OK
 ||Ñc==
SQLITE_NOMEM
 );

1744  
rc
;

1745 
	}
}

1764 
	$∑gî_u∆ock
(
Pagî
 *
pPagî
){

1766 
	`as£π
–
pPagî
->
eSèã
==
PAGER_READER


1767 || 
pPagî
->
eSèã
==
PAGER_OPEN


1768 || 
pPagî
->
eSèã
==
PAGER_ERROR


1771 
	`sqlôe3BôvecDe°roy
(
pPagî
->
pInJou∫Æ
);

1772 
pPagî
->
pInJou∫Æ
 = 0;

1773 
	`ªÀa£AŒSavïoöts
(
pPagî
);

1775 if–
	`∑gîU£WÆ
(
pPagî
) ){

1776 
	`as£π
–!
	`isO≥n
(
pPagî
->
jfd
) );

1777 
	`sqlôe3WÆEndRódTønß˘i⁄
(
pPagî
->
pWÆ
);

1778 
pPagî
->
eSèã
 = 
PAGER_OPEN
;

1779 }if–!
pPagî
->
ex˛usiveMode
 ){

1780 
rc
;

1781 
iDc
 = 
	`isO≥n
(
pPagî
->
fd
)?
	`sqlôe3OsDevi˚Ch¨a˘îi°ics
(pPager->fd):0;

1788 
	`as£π
–(
PAGER_JOURNALMODE_MEMORY
 & 5)!=1 );

1789 
	`as£π
–(
PAGER_JOURNALMODE_OFF
 & 5)!=1 );

1790 
	`as£π
–(
PAGER_JOURNALMODE_WAL
 & 5)!=1 );

1791 
	`as£π
–(
PAGER_JOURNALMODE_DELETE
 & 5)!=1 );

1792 
	`as£π
–(
PAGER_JOURNALMODE_TRUNCATE
 & 5)==1 );

1793 
	`as£π
–(
PAGER_JOURNALMODE_PERSIST
 & 5)==1 );

1794 if–0==(
iDc
 & 
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN
)

1795 || 1!=(
pPagî
->
jou∫ÆMode
 & 5)

1797 
	`sqlôe3OsClo£
(
pPagî
->
jfd
);

1805 
rc
 = 
	`∑gîU∆ockDb
(
pPagî
, 
NO_LOCK
);

1806 if–
rc
!=
SQLITE_OK
 && 
pPagî
->
eSèã
==
PAGER_ERROR
 ){

1807 
pPagî
->
eLock
 = 
UNKNOWN_LOCK
;

1814 
	`as£π
–
pPagî
->
îrCode
 ||ÖPagî->
eSèã
!=
PAGER_ERROR
 );

1815 
pPagî
->
ch™geCou¡D⁄e
 = 0;

1816 
pPagî
->
eSèã
 = 
PAGER_OPEN
;

1824 
	`as£π
–
pPagî
->
îrCode
==
SQLITE_OK
 || !
MEMDB
 );

1825 if–
pPagî
->
îrCode
 ){

1826 if–
pPagî
->
ãmpFûe
==0 ){

1827 
	`∑gî_ª£t
(
pPagî
);

1828 
pPagî
->
ch™geCou¡D⁄e
 = 0;

1829 
pPagî
->
eSèã
 = 
PAGER_OPEN
;

1831 
pPagî
->
eSèã
 = (
	`isO≥n
’Pagî->
jfd
Ë? 
PAGER_OPEN
 : 
PAGER_READER
);

1833 if–
	`USEFETCH
(
pPagî
ËË
	`sqlôe3OsUn„tch
’Pagî->
fd
, 0, 0);

1834 
pPagî
->
îrCode
 = 
SQLITE_OK
;

1837 
pPagî
->
jou∫ÆOff
 = 0;

1838 
pPagî
->
jou∫ÆHdr
 = 0;

1839 
pPagî
->
£tMa°î
 = 0;

1840 
	}
}

1861 
	$∑gî_îr‹
(
Pagî
 *
pPagî
, 
rc
){

1862 
rc2
 = 
rc
 & 0xff;

1863 
	`as£π
–
rc
==
SQLITE_OK
 || !
MEMDB
 );

1864 
	`as£π
(

1865 
pPagî
->
îrCode
==
SQLITE_FULL
 ||

1866 
pPagî
->
îrCode
==
SQLITE_OK
 ||

1867 (
pPagî
->
îrCode
 & 0xff)==
SQLITE_IOERR


1869 if–
rc2
==
SQLITE_FULL
 ||Ñc2==
SQLITE_IOERR
 ){

1870 
pPagî
->
îrCode
 = 
rc
;

1871 
pPagî
->
eSèã
 = 
PAGER_ERROR
;

1873  
rc
;

1874 
	}
}

1876 
∑gî_åunˇã
(
Pagî
 *
pPagî
, 
Pgno
 
nPage
);

1894 
	$∑gîFlushOnCommô
(
Pagî
 *
pPagî
, 
bCommô
){

1895 if–
pPagî
->
ãmpFûe
==0 )  1;

1896 if–!
bCommô
 )  0;

1897 if–!
	`isO≥n
(
pPagî
->
fd
) )  0;

1898  (
	`sqlôe3PCachePî˚¡Dúty
(
pPagî
->
pPCache
)>=25);

1899 
	}
}

1954 
	$∑gî_íd_å™ß˘i⁄
(
Pagî
 *
pPagî
, 
hasMa°î
, 
bCommô
){

1955 
rc
 = 
SQLITE_OK
;

1956 
rc2
 = 
SQLITE_OK
;

1971 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

1972 
	`as£π
–
pPagî
->
eSèã
!=
PAGER_ERROR
 );

1973 if–
pPagî
->
eSèã
<
PAGER_WRITER_LOCKED
 &&ÖPagî->
eLock
<
RESERVED_LOCK
 ){

1974  
SQLITE_OK
;

1977 
	`ªÀa£AŒSavïoöts
(
pPagî
);

1978 
	`as£π
–
	`isO≥n
(
pPagî
->
jfd
Ë||ÖPagî->
pInJou∫Æ
==0 );

1979 if–
	`isO≥n
(
pPagî
->
jfd
) ){

1980 
	`as£π
–!
	`∑gîU£WÆ
(
pPagî
) );

1983 if–
	`sqlôe3Jou∫ÆIsInMem‹y
(
pPagî
->
jfd
) ){

1985 
	`sqlôe3OsClo£
(
pPagî
->
jfd
);

1986 }if–
pPagî
->
jou∫ÆMode
==
PAGER_JOURNALMODE_TRUNCATE
 ){

1987 if–
pPagî
->
jou∫ÆOff
==0 ){

1988 
rc
 = 
SQLITE_OK
;

1990 
rc
 = 
	`sqlôe3OsTrunˇã
(
pPagî
->
jfd
, 0);

1991 if–
rc
==
SQLITE_OK
 && 
pPagî
->
fuŒSync
 ){

1997 
rc
 = 
	`sqlôe3OsSync
(
pPagî
->
jfd
,ÖPagî->
syncFœgs
);

2000 
pPagî
->
jou∫ÆOff
 = 0;

2001 }if–
pPagî
->
jou∫ÆMode
==
PAGER_JOURNALMODE_PERSIST


2002 || (
pPagî
->
ex˛usiveMode
 &&ÖPagî->
jou∫ÆMode
!=
PAGER_JOURNALMODE_WAL
)

2004 
rc
 = 
	`zîoJou∫ÆHdr
(
pPagî
, 
hasMa°î
||pPagî->
ãmpFûe
);

2005 
pPagî
->
jou∫ÆOff
 = 0;

2012 
bDñëe
 = !
pPagî
->
ãmpFûe
;

2013 
	`as£π
–
	`sqlôe3Jou∫ÆIsInMem‹y
(
pPagî
->
jfd
)==0 );

2014 
	`as£π
–
pPagî
->
jou∫ÆMode
==
PAGER_JOURNALMODE_DELETE


2015 || 
pPagî
->
jou∫ÆMode
==
PAGER_JOURNALMODE_MEMORY


2016 || 
pPagî
->
jou∫ÆMode
==
PAGER_JOURNALMODE_WAL


2018 
	`sqlôe3OsClo£
(
pPagî
->
jfd
);

2019 if–
bDñëe
 ){

2020 
rc
 = 
	`sqlôe3OsDñëe
(
pPagî
->
pVfs
,ÖPagî->
zJou∫Æ
,ÖPagî->
exåaSync
);

2025 #ifde‡
SQLITE_CHECK_PAGES


2026 
	`sqlôe3PˇcheIãøãDúty
(
pPagî
->
pPCache
, 
∑gî_£t_∑gehash
);

2027 if–
pPagî
->
dbSize
==0 && 
	`sqlôe3PˇcheRefCou¡
’Pagî->
pPCache
)>0 ){

2028 
PgHdr
 *
p
 = 
	`sqlôe3PagîLookup
(
pPagî
, 1);

2029 if–
p
 ){

2030 
p
->
∑geHash
 = 0;

2031 
	`sqlôe3PagîUƒefNŸNuŒ
(
p
);

2036 
	`sqlôe3BôvecDe°roy
(
pPagî
->
pInJou∫Æ
);

2037 
pPagî
->
pInJou∫Æ
 = 0;

2038 
pPagî
->
nRec
 = 0;

2039 if–
rc
==
SQLITE_OK
 ){

2040 if–
	`∑gîFlushOnCommô
(
pPagî
, 
bCommô
) ){

2041 
	`sqlôe3PˇcheCÀ™AŒ
(
pPagî
->
pPCache
);

2043 
	`sqlôe3PˇcheCÀ¨WrôabÀ
(
pPagî
->
pPCache
);

2045 
	`sqlôe3PˇcheTrunˇã
(
pPagî
->
pPCache
,ÖPagî->
dbSize
);

2048 if–
	`∑gîU£WÆ
(
pPagî
) ){

2053 
rc2
 = 
	`sqlôe3WÆEndWrôeTønß˘i⁄
(
pPagî
->
pWÆ
);

2054 
	`as£π
–
rc2
==
SQLITE_OK
 );

2055 }if–
rc
==
SQLITE_OK
 && 
bCommô
 && 
pPagî
->
dbFûeSize
>pPagî->
dbSize
 ){

2062 
	`as£π
–
pPagî
->
eLock
==
EXCLUSIVE_LOCK
 );

2063 
rc
 = 
	`∑gî_åunˇã
(
pPagî
,ÖPagî->
dbSize
);

2066 if–
rc
==
SQLITE_OK
 && 
bCommô
 && 
	`isO≥n
(
pPagî
->
fd
) ){

2067 
rc
 = 
	`sqlôe3OsFûeC⁄åﬁ
(
pPagî
->
fd
, 
SQLITE_FCNTL_COMMIT_PHASETWO
, 0);

2068 if–
rc
==
SQLITE_NOTFOUND
 )Ñ¯
SQLITE_OK
;

2071 if–!
pPagî
->
ex˛usiveMode


2072 && (!
	`∑gîU£WÆ
(
pPagî
Ë|| 
	`sqlôe3WÆEx˛usiveMode
’Pagî->
pWÆ
, 0))

2074 
rc2
 = 
	`∑gîU∆ockDb
(
pPagî
, 
SHARED_LOCK
);

2075 
pPagî
->
ch™geCou¡D⁄e
 = 0;

2077 
pPagî
->
eSèã
 = 
PAGER_READER
;

2078 
pPagî
->
£tMa°î
 = 0;

2080  (
rc
==
SQLITE_OK
?
rc2
:rc);

2081 
	}
}

2100 
	$∑gîU∆ockAndRﬁlback
(
Pagî
 *
pPagî
){

2101 if–
pPagî
->
eSèã
!=
PAGER_ERROR
 &&ÖPagî->eSèã!=
PAGER_OPEN
 ){

2102 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

2103 if–
pPagî
->
eSèã
>=
PAGER_WRITER_LOCKED
 ){

2104 
	`sqlôe3BegöBíignMÆloc
();

2105 
	`sqlôe3PagîRﬁlback
(
pPagî
);

2106 
	`sqlôe3EndBíignMÆloc
();

2107 }if–!
pPagî
->
ex˛usiveMode
 ){

2108 
	`as£π
–
pPagî
->
eSèã
==
PAGER_READER
 );

2109 
	`∑gî_íd_å™ß˘i⁄
(
pPagî
, 0, 0);

2112 
	`∑gî_u∆ock
(
pPagî
);

2113 
	}
}

2134 
u32
 
	$∑gî_cksum
(
Pagî
 *
pPagî
, c⁄° 
u8
 *
aD©a
){

2135 
u32
 
cksum
 = 
pPagî
->
cksumInô
;

2136 
i
 = 
pPagî
->
∑geSize
-200;

2137  
i
>0 ){

2138 
cksum
 +
aD©a
[
i
];

2139 
i
 -= 200;

2141  
cksum
;

2142 
	}
}

2148 #ifde‡
SQLITE_HAS_CODEC


2149 
	$∑gîRï‹tSize
(
Pagî
 *
pPagî
){

2150 if–
pPagî
->
xCodecSizeChng
 ){

2151 
pPagî
->
	`xCodecSizeChng
’Pagî->
pCodec
,ÖPagî->
∑geSize
,

2152 ()
pPagî
->
nRe£rve
);

2154 
	}
}

2156 
	#∑gîRï‹tSize
(
X
Ë

	)

2159 #ifde‡
SQLITE_HAS_CODEC


2165 
	$sqlôe3PagîAlignRe£rve
(
Pagî
 *
pDe°
, Pagî *
pSrc
){

2166 if–
pDe°
->
nRe£rve
!=
pSrc
->nReserve ){

2167 
pDe°
->
nRe£rve
 = 
pSrc
->nReserve;

2168 
	`∑gîRï‹tSize
(
pDe°
);

2170 
	}
}

2210 
	$∑gî_∂ayback_⁄e_∑ge
(

2211 
Pagî
 *
pPagî
,

2212 
i64
 *
pOff£t
,

2213 
Bôvec
 *
pD⁄e
,

2214 
isMaöJ∫l
,

2215 
isSavï¡


2217 
rc
;

2218 
PgHdr
 *
pPg
;

2219 
Pgno
 
pgno
;

2220 
u32
 
cksum
;

2221 *
aD©a
;

2222 
sqlôe3_fûe
 *
jfd
;

2223 
isSyn˚d
;

2225 
	`as£π
–(
isMaöJ∫l
&~1)==0 );

2226 
	`as£π
–(
isSavï¡
&~1)==0 );

2227 
	`as£π
–
isMaöJ∫l
 || 
pD⁄e
 );

2228 
	`as£π
–
isSavï¡
 || 
pD⁄e
==0 );

2230 
aD©a
 = 
pPagî
->
pTmpS∑˚
;

2231 
	`as£π
–
aD©a
 );

2232 
	`as£π
–
	`∑gîU£WÆ
(
pPagî
)==0 || (!
isMaöJ∫l
 && 
isSavï¡
) );

2240 
	`as£π
–
pPagî
->
eSèã
>=
PAGER_WRITER_CACHEMOD


2241 || (
pPagî
->
eSèã
==
PAGER_OPEN
 &&ÖPagî->
eLock
==
EXCLUSIVE_LOCK
)

2243 
	`as£π
–
pPagî
->
eSèã
>=
PAGER_WRITER_CACHEMOD
 || 
isMaöJ∫l
 );

2248 
jfd
 = 
isMaöJ∫l
 ? 
pPagî
->jfd :ÖPagî->
sjfd
;

2249 
rc
 = 
	`ªad32bôs
(
jfd
, *
pOff£t
, &
pgno
);

2250 if–
rc
!=
SQLITE_OK
 ) Ñc;

2251 
rc
 = 
	`sqlôe3OsRód
(
jfd
, (
u8
*)
aD©a
, 
pPagî
->
∑geSize
, (*
pOff£t
)+4);

2252 if–
rc
!=
SQLITE_OK
 ) Ñc;

2253 *
pOff£t
 +
pPagî
->
∑geSize
 + 4 + 
isMaöJ∫l
*4;

2260 if–
pgno
==0 ||Ögno==
	`PAGER_MJ_PGNO
(
pPagî
) ){

2261 
	`as£π
–!
isSavï¡
 );

2262  
SQLITE_DONE
;

2264 if–
pgno
>(
Pgno
)
pPagî
->
dbSize
 || 
	`sqlôe3BôvecTe°
(
pD⁄e
,Ögno) ){

2265  
SQLITE_OK
;

2267 if–
isMaöJ∫l
 ){

2268 
rc
 = 
	`ªad32bôs
(
jfd
, (*
pOff£t
)-4, &
cksum
);

2269 if–
rc
 ) Ñc;

2270 if–!
isSavï¡
 && 
	`∑gî_cksum
(
pPagî
, (
u8
*)
aD©a
)!=
cksum
 ){

2271  
SQLITE_DONE
;

2278 if–
pD⁄e
 && (
rc
 = 
	`sqlôe3BôvecSë
’D⁄e, 
pgno
))!=
SQLITE_OK
 ){

2279  
rc
;

2284 if–
pgno
==1 && 
pPagî
->
nRe£rve
!=((
u8
*)
aD©a
)[20] ){

2285 
pPagî
->
nRe£rve
 = ((
u8
*)
aD©a
)[20];

2286 
	`∑gîRï‹tSize
(
pPagî
);

2324 if–
	`∑gîU£WÆ
(
pPagî
) ){

2325 
pPg
 = 0;

2327 
pPg
 = 
	`sqlôe3PagîLookup
(
pPagî
, 
pgno
);

2329 
	`as£π
–
pPg
 || !
MEMDB
 );

2330 
	`as£π
–
pPagî
->
eSèã
!=
PAGER_OPEN
 || 
pPg
==0 ||ÖPagî->
ãmpFûe
 );

2331 
	`PAGERTRACE
(("PLAYBACK %dÖage %d hash(%08x) %s\n",

2332 
	`PAGERID
(
pPagî
), 
pgno
, 
	`∑gî_d©ahash
’Pagî->
∑geSize
, (
u8
*)
aD©a
),

2333 (
isMaöJ∫l
?"main-journal":"sub-journal")

2335 if–
isMaöJ∫l
 ){

2336 
isSyn˚d
 = 
pPagî
->
noSync
 || (*
pOff£t
 <pPagî->
jou∫ÆHdr
);

2338 
isSyn˚d
 = (
pPg
==0 || 0==’Pg->
Êags
 & 
PGHDR_NEED_SYNC
));

2340 if–
	`isO≥n
(
pPagî
->
fd
)

2341 && (
pPagî
->
eSèã
>=
PAGER_WRITER_DBMOD
 ||ÖPagî->eSèã==
PAGER_OPEN
)

2342 && 
isSyn˚d


2344 
i64
 
of°
 = (
pgno
-1)*(i64)
pPagî
->
∑geSize
;

2345 
	`ã°ˇ£
–!
isSavï¡
 && 
pPg
!=0 && (pPg->
Êags
&
PGHDR_NEED_SYNC
)!=0 );

2346 
	`as£π
–!
	`∑gîU£WÆ
(
pPagî
) );

2347 
rc
 = 
	`sqlôe3OsWrôe
(
pPagî
->
fd
, (
u8
 *)
aD©a
,ÖPagî->
∑geSize
, 
of°
);

2348 if–
pgno
>
pPagî
->
dbFûeSize
 ){

2349 
pPagî
->
dbFûeSize
 = 
pgno
;

2351 if–
pPagî
->
pBackup
 ){

2352 
	`CODEC1
(
pPagî
, 
aD©a
, 
pgno
, 3, 
rc
=
SQLITE_NOMEM_BKPT
);

2353 
	`sqlôe3BackupUpd©e
(
pPagî
->
pBackup
, 
pgno
, (
u8
*)
aD©a
);

2354 
	`CODEC2
(
pPagî
, 
aD©a
, 
pgno
, 7, 
rc
=
SQLITE_NOMEM_BKPT
,áData);

2356 }if–!
isMaöJ∫l
 && 
pPg
==0 ){

2373 
	`as£π
–
isSavï¡
 );

2374 
	`as£π
–(
pPagî
->
doNŸSpûl
 & 
SPILLFLAG_ROLLBACK
)==0 );

2375 
pPagî
->
doNŸSpûl
 |
SPILLFLAG_ROLLBACK
;

2376 
rc
 = 
	`sqlôe3PagîGë
(
pPagî
, 
pgno
, &
pPg
, 1);

2377 
	`as£π
–(
pPagî
->
doNŸSpûl
 & 
SPILLFLAG_ROLLBACK
)!=0 );

2378 
pPagî
->
doNŸSpûl
 &~
SPILLFLAG_ROLLBACK
;

2379 if–
rc
!=
SQLITE_OK
 ) Ñc;

2380 
	`sqlôe3PˇcheMakeDúty
(
pPg
);

2382 if–
pPg
 ){

2389 *
pD©a
;

2390 
pD©a
 = 
pPg
->pData;

2391 
	`mem˝y
(
pD©a
, (
u8
*)
aD©a
, 
pPagî
->
∑geSize
);

2392 
pPagî
->
	`xReöôî
(
pPg
);

2397 
	`∑gî_£t_∑gehash
(
pPg
);

2401 if–
pgno
==1 ){

2402 
	`mem˝y
(&
pPagî
->
dbFûeVîs
, &((
u8
*)
pD©a
)[24],(pPager->dbFileVers));

2406 
	`CODEC1
(
pPagî
, 
pD©a
, 
pPg
->
pgno
, 3, 
rc
=
SQLITE_NOMEM_BKPT
);

2407 
	`sqlôe3PˇcheRñó£
(
pPg
);

2409  
rc
;

2410 
	}
}

2455 
	$∑gî_dñma°î
(
Pagî
 *
pPagî
, c⁄° *
zMa°î
){

2456 
sqlôe3_vfs
 *
pVfs
 = 
pPagî
->pVfs;

2457 
rc
;

2458 
sqlôe3_fûe
 *
pMa°î
;

2459 
sqlôe3_fûe
 *
pJou∫Æ
;

2460 *
zMa°îJou∫Æ
 = 0;

2461 
i64
 
nMa°îJou∫Æ
;

2462 *
zJou∫Æ
;

2463 *
zMa°îPå
;

2464 
nMa°îPå
;

2469 
pMa°î
 = (
sqlôe3_fûe
 *)
	`sqlôe3MÆlocZîo
(
pVfs
->
szOsFûe
 * 2);

2470 
pJou∫Æ
 = (
sqlôe3_fûe
 *)(((
u8
 *)
pMa°î
Ë+ 
pVfs
->
szOsFûe
);

2471 if–!
pMa°î
 ){

2472 
rc
 = 
SQLITE_NOMEM_BKPT
;

2474 c⁄° 
Êags
 = (
SQLITE_OPEN_READONLY
|
SQLITE_OPEN_MASTER_JOURNAL
);

2475 
rc
 = 
	`sqlôe3OsO≥n
(
pVfs
, 
zMa°î
, 
pMa°î
, 
Êags
, 0);

2477 if–
rc
!=
SQLITE_OK
 ) 
dñma°î_out
;

2484 
rc
 = 
	`sqlôe3OsFûeSize
(
pMa°î
, &
nMa°îJou∫Æ
);

2485 if–
rc
!=
SQLITE_OK
 ) 
dñma°î_out
;

2486 
nMa°îPå
 = 
pVfs
->
mxP©h«me
+1;

2487 
zMa°îJou∫Æ
 = 
	`sqlôe3MÆloc
(
nMa°îJou∫Æ
 + 
nMa°îPå
 + 1);

2488 if–!
zMa°îJou∫Æ
 ){

2489 
rc
 = 
SQLITE_NOMEM_BKPT
;

2490 
dñma°î_out
;

2492 
zMa°îPå
 = &
zMa°îJou∫Æ
[
nMa°îJou∫Æ
+1];

2493 
rc
 = 
	`sqlôe3OsRód
(
pMa°î
, 
zMa°îJou∫Æ
, ()
nMa°îJou∫Æ
, 0);

2494 if–
rc
!=
SQLITE_OK
 ) 
dñma°î_out
;

2495 
zMa°îJou∫Æ
[
nMa°îJou∫Æ
] = 0;

2497 
zJou∫Æ
 = 
zMa°îJou∫Æ
;

2498  (
zJou∫Æ
-
zMa°îJou∫Æ
)<
nMa°îJou∫Æ
 ){

2499 
exi°s
;

2500 
rc
 = 
	`sqlôe3OsAc˚ss
(
pVfs
, 
zJou∫Æ
, 
SQLITE_ACCESS_EXISTS
, &
exi°s
);

2501 if–
rc
!=
SQLITE_OK
 ){

2502 
dñma°î_out
;

2504 if–
exi°s
 ){

2509 
c
;

2510 
Êags
 = (
SQLITE_OPEN_READONLY
|
SQLITE_OPEN_MAIN_JOURNAL
);

2511 
rc
 = 
	`sqlôe3OsO≥n
(
pVfs
, 
zJou∫Æ
, 
pJou∫Æ
, 
Êags
, 0);

2512 if–
rc
!=
SQLITE_OK
 ){

2513 
dñma°î_out
;

2516 
rc
 = 
	`ªadMa°îJou∫Æ
(
pJou∫Æ
, 
zMa°îPå
, 
nMa°îPå
);

2517 
	`sqlôe3OsClo£
(
pJou∫Æ
);

2518 if–
rc
!=
SQLITE_OK
 ){

2519 
dñma°î_out
;

2522 
c
 = 
zMa°îPå
[0]!=0 && 
	`°rcmp
(zMa°îPå, 
zMa°î
)==0;

2523 if–
c
 ){

2525 
dñma°î_out
;

2528 
zJou∫Æ
 +(
	`sqlôe3SåÀn30
(zJournal)+1);

2531 
	`sqlôe3OsClo£
(
pMa°î
);

2532 
rc
 = 
	`sqlôe3OsDñëe
(
pVfs
, 
zMa°î
, 0);

2534 
dñma°î_out
:

2535 
	`sqlôe3_‰ì
(
zMa°îJou∫Æ
);

2536 if–
pMa°î
 ){

2537 
	`sqlôe3OsClo£
(
pMa°î
);

2538 
	`as£π
–!
	`isO≥n
(
pJou∫Æ
) );

2539 
	`sqlôe3_‰ì
(
pMa°î
);

2541  
rc
;

2542 
	}
}

2565 
	$∑gî_åunˇã
(
Pagî
 *
pPagî
, 
Pgno
 
nPage
){

2566 
rc
 = 
SQLITE_OK
;

2567 
	`as£π
–
pPagî
->
eSèã
!=
PAGER_ERROR
 );

2568 
	`as£π
–
pPagî
->
eSèã
!=
PAGER_READER
 );

2570 if–
	`isO≥n
(
pPagî
->
fd
)

2571 && (
pPagî
->
eSèã
>=
PAGER_WRITER_DBMOD
 ||ÖPagî->eSèã==
PAGER_OPEN
)

2573 
i64
 
cuºítSize
, 
√wSize
;

2574 
szPage
 = 
pPagî
->
∑geSize
;

2575 
	`as£π
–
pPagî
->
eLock
==
EXCLUSIVE_LOCK
 );

2577 
rc
 = 
	`sqlôe3OsFûeSize
(
pPagî
->
fd
, &
cuºítSize
);

2578 
√wSize
 = 
szPage
*(
i64
)
nPage
;

2579 if–
rc
==
SQLITE_OK
 && 
cuºítSize
!=
√wSize
 ){

2580 if–
cuºítSize
>
√wSize
 ){

2581 
rc
 = 
	`sqlôe3OsTrunˇã
(
pPagî
->
fd
, 
√wSize
);

2582 }if–(
cuºítSize
+
szPage
)<=
√wSize
 ){

2583 *
pTmp
 = 
pPagî
->
pTmpS∑˚
;

2584 
	`mem£t
(
pTmp
, 0, 
szPage
);

2585 
	`ã°ˇ£
–(
√wSize
-
szPage
Ë=
cuºítSize
 );

2586 
	`ã°ˇ£
–(
√wSize
-
szPage
Ë> 
cuºítSize
 );

2587 
rc
 = 
	`sqlôe3OsWrôe
(
pPagî
->
fd
, 
pTmp
, 
szPage
, 
√wSize
-szPage);

2589 if–
rc
==
SQLITE_OK
 ){

2590 
pPagî
->
dbFûeSize
 = 
nPage
;

2594  
rc
;

2595 
	}
}

2601 
	$sqlôe3Se˘‹Size
(
sqlôe3_fûe
 *
pFûe
){

2602 
iRë
 = 
	`sqlôe3OsSe˘‹Size
(
pFûe
);

2603 if–
iRë
<32 ){

2604 
iRë
 = 512;

2605 }if–
iRë
>
MAX_SECTOR_SIZE
 ){

2606 
	`as£π
–
MAX_SECTOR_SIZE
>=512 );

2607 
iRë
 = 
MAX_SECTOR_SIZE
;

2609  
iRë
;

2610 
	}
}

2635 
	$£tSe˘‹Size
(
Pagî
 *
pPagî
){

2636 
	`as£π
–
	`isO≥n
(
pPagî
->
fd
Ë||ÖPagî->
ãmpFûe
 );

2638 if–
pPagî
->
ãmpFûe


2639 || (
	`sqlôe3OsDevi˚Ch¨a˘îi°ics
(
pPagî
->
fd
) &

2640 
SQLITE_IOCAP_POWERSAFE_OVERWRITE
)!=0

2645 
pPagî
->
£˘‹Size
 = 512;

2647 
pPagî
->
£˘‹Size
 = 
	`sqlôe3Se˘‹Size
’Pagî->
fd
);

2649 
	}
}

2708 
	$∑gî_∂ayback
(
Pagî
 *
pPagî
, 
isHŸ
){

2709 
sqlôe3_vfs
 *
pVfs
 = 
pPagî
->pVfs;

2710 
i64
 
szJ
;

2711 
u32
 
nRec
;

2712 
u32
 
u
;

2713 
Pgno
 
mxPg
 = 0;

2714 
rc
;

2715 
ªs
 = 1;

2716 *
zMa°î
 = 0;

2717 
√edPagîRe£t
;

2718 
nPœyback
 = 0;

2723 
	`as£π
–
	`isO≥n
(
pPagî
->
jfd
) );

2724 
rc
 = 
	`sqlôe3OsFûeSize
(
pPagî
->
jfd
, &
szJ
);

2725 if–
rc
!=
SQLITE_OK
 ){

2726 
íd_∂ayback
;

2740 
zMa°î
 = 
pPagî
->
pTmpS∑˚
;

2741 
rc
 = 
	`ªadMa°îJou∫Æ
(
pPagî
->
jfd
, 
zMa°î
,ÖPagî->
pVfs
->
mxP©h«me
+1);

2742 if–
rc
==
SQLITE_OK
 && 
zMa°î
[0] ){

2743 
rc
 = 
	`sqlôe3OsAc˚ss
(
pVfs
, 
zMa°î
, 
SQLITE_ACCESS_EXISTS
, &
ªs
);

2745 
zMa°î
 = 0;

2746 if–
rc
!=
SQLITE_OK
 || !
ªs
 ){

2747 
íd_∂ayback
;

2749 
pPagî
->
jou∫ÆOff
 = 0;

2750 
√edPagîRe£t
 = 
isHŸ
;

2762 
rc
 = 
	`ªadJou∫ÆHdr
(
pPagî
, 
isHŸ
, 
szJ
, &
nRec
, &
mxPg
);

2763 if–
rc
!=
SQLITE_OK
 ){

2764 if–
rc
==
SQLITE_DONE
 ){

2765 
rc
 = 
SQLITE_OK
;

2767 
íd_∂ayback
;

2775 if–
nRec
==0xffffffff ){

2776 
	`as£π
–
pPagî
->
jou∫ÆOff
==
	`JOURNAL_HDR_SZ
(pPager) );

2777 
nRec
 = ()((
szJ
 - 
	`JOURNAL_HDR_SZ
(
pPagî
))/
	`JOURNAL_PG_SZ
(pPager));

2794 if–
nRec
==0 && !
isHŸ
 &&

2795 
pPagî
->
jou∫ÆHdr
+
	`JOURNAL_HDR_SZ
’Pagî)=ıPagî->
jou∫ÆOff
 ){

2796 
nRec
 = ()((
szJ
 - 
pPagî
->
jou∫ÆOff
Ë/ 
	`JOURNAL_PG_SZ
(pPager));

2802 if–
pPagî
->
jou∫ÆOff
==
	`JOURNAL_HDR_SZ
(pPager) ){

2803 
rc
 = 
	`∑gî_åunˇã
(
pPagî
, 
mxPg
);

2804 if–
rc
!=
SQLITE_OK
 ){

2805 
íd_∂ayback
;

2807 
pPagî
->
dbSize
 = 
mxPg
;

2813 
u
=0; u<
nRec
; u++){

2814 if–
√edPagîRe£t
 ){

2815 
	`∑gî_ª£t
(
pPagî
);

2816 
√edPagîRe£t
 = 0;

2818 
rc
 = 
	`∑gî_∂ayback_⁄e_∑ge
(
pPagî
,&pPagî->
jou∫ÆOff
,0,1,0);

2819 if–
rc
==
SQLITE_OK
 ){

2820 
nPœyback
++;

2822 if–
rc
==
SQLITE_DONE
 ){

2823 
pPagî
->
jou∫ÆOff
 = 
szJ
;

2825 }if–
rc
==
SQLITE_IOERR_SHORT_READ
 ){

2831 
rc
 = 
SQLITE_OK
;

2832 
íd_∂ayback
;

2839 
íd_∂ayback
;

2845 
	`as£π
( 0 );

2847 
íd_∂ayback
:

2853 #ifde‡
SQLITE_DEBUG


2854 if–
pPagî
->
fd
->
pMëhods
 ){

2855 
	`sqlôe3OsFûeC⁄åﬁHöt
(
pPagî
->
fd
,
SQLITE_FCNTL_DB_UNCHANGED
,0);

2868 
pPagî
->
ch™geCou¡D⁄e
 =ÖPagî->
ãmpFûe
;

2870 if–
rc
==
SQLITE_OK
 ){

2871 
zMa°î
 = 
pPagî
->
pTmpS∑˚
;

2872 
rc
 = 
	`ªadMa°îJou∫Æ
(
pPagî
->
jfd
, 
zMa°î
,ÖPagî->
pVfs
->
mxP©h«me
+1);

2873 
	`ã°ˇ£
–
rc
!=
SQLITE_OK
 );

2875 if–
rc
==
SQLITE_OK


2876 && (
pPagî
->
eSèã
>=
PAGER_WRITER_DBMOD
 ||ÖPagî->eSèã==
PAGER_OPEN
)

2878 
rc
 = 
	`sqlôe3PagîSync
(
pPagî
, 0);

2880 if–
rc
==
SQLITE_OK
 ){

2881 
rc
 = 
	`∑gî_íd_å™ß˘i⁄
(
pPagî
, 
zMa°î
[0]!='\0', 0);

2882 
	`ã°ˇ£
–
rc
!=
SQLITE_OK
 );

2884 if–
rc
==
SQLITE_OK
 && 
zMa°î
[0] && 
ªs
 ){

2888 
rc
 = 
	`∑gî_dñma°î
(
pPagî
, 
zMa°î
);

2889 
	`ã°ˇ£
–
rc
!=
SQLITE_OK
 );

2891 if–
isHŸ
 && 
nPœyback
 ){

2892 
	`sqlôe3_log
(
SQLITE_NOTICE_RECOVER_ROLLBACK
, "recovered %dÖages from %s",

2893 
nPœyback
, 
pPagî
->
zJou∫Æ
);

2900 
	`£tSe˘‹Size
(
pPagî
);

2901  
rc
;

2902 
	}
}

2916 
	$ªadDbPage
(
PgHdr
 *
pPg
, 
u32
 
iFøme
){

2917 
Pagî
 *
pPagî
 = 
pPg
->pPager;

2918 
Pgno
 
pgno
 = 
pPg
->pgno;

2919 
rc
 = 
SQLITE_OK
;

2920 
pgsz
 = 
pPagî
->
∑geSize
;

2922 
	`as£π
–
pPagî
->
eSèã
>=
PAGER_READER
 && !
MEMDB
 );

2923 
	`as£π
–
	`isO≥n
(
pPagî
->
fd
) );

2925 #i‚de‡
SQLITE_OMIT_WAL


2926 if–
iFøme
 ){

2928 
rc
 = 
	`sqlôe3WÆRódFøme
(
pPagî
->
pWÆ
, 
iFøme
, 
pgsz
, 
pPg
->
pD©a
);

2932 
i64
 
iOff£t
 = (
pgno
-1)*(i64)
pPagî
->
∑geSize
;

2933 
rc
 = 
	`sqlôe3OsRód
(
pPagî
->
fd
, 
pPg
->
pD©a
, 
pgsz
, 
iOff£t
);

2934 if–
rc
==
SQLITE_IOERR_SHORT_READ
 ){

2935 
rc
 = 
SQLITE_OK
;

2939 if–
pgno
==1 ){

2940 if–
rc
 ){

2953 
	`mem£t
(
pPagî
->
dbFûeVîs
, 0xff, (pPager->dbFileVers));

2955 
u8
 *
dbFûeVîs
 = &((u8*)
pPg
->
pD©a
)[24];

2956 
	`mem˝y
(&
pPagî
->
dbFûeVîs
, dbFileVers, (pPager->dbFileVers));

2959 
	`CODEC1
(
pPagî
, 
pPg
->
pD©a
, 
pgno
, 3, 
rc
 = 
SQLITE_NOMEM_BKPT
);

2961 
	`PAGER_INCR
(
sqlôe3_∑gî_ªaddb_cou¡
);

2962 
	`PAGER_INCR
(
pPagî
->
nRód
);

2963 
	`IOTRACE
(("PGIN %∞%d\n", 
pPagî
, 
pgno
));

2964 
	`PAGERTRACE
(("FETCH %dÖage %d hash(%08x)\n",

2965 
	`PAGERID
(
pPagî
), 
pgno
, 
	`∑gî_∑gehash
(
pPg
)));

2967  
rc
;

2968 
	}
}

2978 
	$∑gî_wrôe_ch™gecou¡î
(
PgHdr
 *
pPg
){

2979 
u32
 
ch™ge_cou¡î
;

2982 
ch™ge_cou¡î
 = 
	`sqlôe3Gë4byã
((
u8
*)
pPg
->
pPagî
->
dbFûeVîs
)+1;

2983 
	`put32bôs
(((*)
pPg
->
pD©a
)+24, 
ch™ge_cou¡î
);

2988 
	`put32bôs
(((*)
pPg
->
pD©a
)+92, 
ch™ge_cou¡î
);

2989 
	`put32bôs
(((*)
pPg
->
pD©a
)+96, 
SQLITE_VERSION_NUMBER
);

2990 
	}
}

2992 #i‚de‡
SQLITE_OMIT_WAL


3005 
	$∑gîUndoCÆlback
(*
pCtx
, 
Pgno
 
iPg
){

3006 
rc
 = 
SQLITE_OK
;

3007 
Pagî
 *
pPagî
 = (Pagî *)
pCtx
;

3008 
PgHdr
 *
pPg
;

3010 
	`as£π
–
	`∑gîU£WÆ
(
pPagî
) );

3011 
pPg
 = 
	`sqlôe3PagîLookup
(
pPagî
, 
iPg
);

3012 if–
pPg
 ){

3013 if–
	`sqlôe3PˇchePageRefcou¡
(
pPg
)==1 ){

3014 
	`sqlôe3PˇcheDr›
(
pPg
);

3016 
u32
 
iFøme
 = 0;

3017 
rc
 = 
	`sqlôe3WÆFödFøme
(
pPagî
->
pWÆ
, 
pPg
->
pgno
, &
iFøme
);

3018 if–
rc
==
SQLITE_OK
 ){

3019 
rc
 = 
	`ªadDbPage
(
pPg
, 
iFøme
);

3021 if–
rc
==
SQLITE_OK
 ){

3022 
pPagî
->
	`xReöôî
(
pPg
);

3024 
	`sqlôe3PagîUƒefNŸNuŒ
(
pPg
);

3036 
	`sqlôe3BackupRe°¨t
(
pPagî
->
pBackup
);

3038  
rc
;

3039 
	}
}

3044 
	$∑gîRﬁlbackWÆ
(
Pagî
 *
pPagî
){

3045 
rc
;

3046 
PgHdr
 *
pLi°
;

3055 
pPagî
->
dbSize
 =ÖPagî->
dbOrigSize
;

3056 
rc
 = 
	`sqlôe3WÆUndo
(
pPagî
->
pWÆ
, 
∑gîUndoCÆlback
, (*)pPager);

3057 
pLi°
 = 
	`sqlôe3PˇcheDútyLi°
(
pPagî
->
pPCache
);

3058  
pLi°
 && 
rc
==
SQLITE_OK
 ){

3059 
PgHdr
 *
pNext
 = 
pLi°
->
pDúty
;

3060 
rc
 = 
	`∑gîUndoCÆlback
((*)
pPagî
, 
pLi°
->
pgno
);

3061 
pLi°
 = 
pNext
;

3064  
rc
;

3065 
	}
}

3076 
	$∑gîWÆFømes
(

3077 
Pagî
 *
pPagî
,

3078 
PgHdr
 *
pLi°
,

3079 
Pgno
 
nTrunˇã
,

3080 
isCommô


3082 
rc
;

3083 
nLi°
;

3084 
PgHdr
 *
p
;

3086 
	`as£π
–
pPagî
->
pWÆ
 );

3087 
	`as£π
–
pLi°
 );

3088 #ifde‡
SQLITE_DEBUG


3090 
p
=
pLi°
;Ö &&Ö->
pDúty
;Ö=p->pDirty){

3091 
	`as£π
–
p
->
pgno
 <Ö->
pDúty
->pgno );

3095 
	`as£π
–
pLi°
->
pDúty
==0 || 
isCommô
 );

3096 if–
isCommô
 ){

3101 
PgHdr
 **
µNext
 = &
pLi°
;

3102 
nLi°
 = 0;

3103 
p
=
pLi°
; (*
µNext
 =Ö)!=0;Öı->
pDúty
){

3104 if–
p
->
pgno
<=
nTrunˇã
 ){

3105 
µNext
 = &
p
->
pDúty
;

3106 
nLi°
++;

3109 
	`as£π
–
pLi°
 );

3111 
nLi°
 = 1;

3113 
pPagî
->
aSèt
[
PAGER_STAT_WRITE
] +
nLi°
;

3115 if–
pLi°
->
pgno
==1 ) 
	`∑gî_wrôe_ch™gecou¡î
(pList);

3116 
rc
 = 
	`sqlôe3WÆFømes
(
pPagî
->
pWÆ
,

3117 
pPagî
->
∑geSize
, 
pLi°
, 
nTrunˇã
, 
isCommô
,ÖPagî->
wÆSyncFœgs


3119 if–
rc
==
SQLITE_OK
 && 
pPagî
->
pBackup
 ){

3120 
p
=
pLi°
;Ö;Öı->
pDúty
){

3121 
	`sqlôe3BackupUpd©e
(
pPagî
->
pBackup
, 
p
->
pgno
, (
u8
 *Ì->
pD©a
);

3125 #ifde‡
SQLITE_CHECK_PAGES


3126 
pLi°
 = 
	`sqlôe3PˇcheDútyLi°
(
pPagî
->
pPCache
);

3127 
p
=
pLi°
;Ö;Öı->
pDúty
){

3128 
	`∑gî_£t_∑gehash
(
p
);

3132  
rc
;

3133 
	}
}

3143 
	$∑gîBegöRódTønß˘i⁄
(
Pagî
 *
pPagî
){

3144 
rc
;

3145 
ch™ged
 = 0;

3147 
	`as£π
–
	`∑gîU£WÆ
(
pPagî
) );

3148 
	`as£π
–
pPagî
->
eSèã
==
PAGER_OPEN
 ||ÖPagî->eSèã==
PAGER_READER
 );

3155 
	`sqlôe3WÆEndRódTønß˘i⁄
(
pPagî
->
pWÆ
);

3157 
rc
 = 
	`sqlôe3WÆBegöRódTønß˘i⁄
(
pPagî
->
pWÆ
, &
ch™ged
);

3158 if–
rc
!=
SQLITE_OK
 || 
ch™ged
 ){

3159 
	`∑gî_ª£t
(
pPagî
);

3160 if–
	`USEFETCH
(
pPagî
ËË
	`sqlôe3OsUn„tch
’Pagî->
fd
, 0, 0);

3163  
rc
;

3164 
	}
}

3176 
	$∑gîPagecou¡
(
Pagî
 *
pPagî
, 
Pgno
 *
≤Page
){

3177 
Pgno
 
nPage
;

3185 
	`as£π
–
pPagî
->
eSèã
==
PAGER_OPEN
 );

3186 
	`as£π
–
pPagî
->
eLock
>=
SHARED_LOCK
 );

3187 
	`as£π
–
	`isO≥n
(
pPagî
->
fd
) );

3188 
	`as£π
–
pPagî
->
ãmpFûe
==0 );

3189 
nPage
 = 
	`sqlôe3WÆDbsize
(
pPagî
->
pWÆ
);

3196 if–
nPage
==0 && 
	`ALWAYS
(
	`isO≥n
(
pPagî
->
fd
)) ){

3197 
i64
 
n
 = 0;

3198 
rc
 = 
	`sqlôe3OsFûeSize
(
pPagî
->
fd
, &
n
);

3199 if–
rc
!=
SQLITE_OK
 ){

3200  
rc
;

3202 
nPage
 = (
Pgno
)((
n
+
pPagî
->
∑geSize
-1) /ÖPager->pageSize);

3209 if–
nPage
>
pPagî
->
mxPgno
 ){

3210 
pPagî
->
mxPgno
 = (
Pgno
)
nPage
;

3213 *
≤Page
 = 
nPage
;

3214  
SQLITE_OK
;

3215 
	}
}

3217 #i‚de‡
SQLITE_OMIT_WAL


3236 
	$∑gîO≥nWÆIfPª£¡
(
Pagî
 *
pPagî
){

3237 
rc
 = 
SQLITE_OK
;

3238 
	`as£π
–
pPagî
->
eSèã
==
PAGER_OPEN
 );

3239 
	`as£π
–
pPagî
->
eLock
>=
SHARED_LOCK
 );

3241 if–!
pPagî
->
ãmpFûe
 ){

3242 
isWÆ
;

3243 
Pgno
 
nPage
;

3245 
rc
 = 
	`∑gîPagecou¡
(
pPagî
, &
nPage
);

3246 if–
rc
 ) Ñc;

3247 if–
nPage
==0 ){

3248 
rc
 = 
	`sqlôe3OsDñëe
(
pPagî
->
pVfs
,ÖPagî->
zWÆ
, 0);

3249 if–
rc
==
SQLITE_IOERR_DELETE_NOENT
 )Ñ¯
SQLITE_OK
;

3250 
isWÆ
 = 0;

3252 
rc
 = 
	`sqlôe3OsAc˚ss
(

3253 
pPagî
->
pVfs
,ÖPagî->
zWÆ
, 
SQLITE_ACCESS_EXISTS
, &
isWÆ


3256 if–
rc
==
SQLITE_OK
 ){

3257 if–
isWÆ
 ){

3258 
	`ã°ˇ£
–
	`sqlôe3PˇchePagecou¡
(
pPagî
->
pPCache
)==0 );

3259 
rc
 = 
	`sqlôe3PagîO≥nWÆ
(
pPagî
, 0);

3260 }if–
pPagî
->
jou∫ÆMode
==
PAGER_JOURNALMODE_WAL
 ){

3261 
pPagî
->
jou∫ÆMode
 = 
PAGER_JOURNALMODE_DELETE
;

3265  
rc
;

3266 
	}
}

3305 
	$∑gîPœybackSavïoöt
(
Pagî
 *
pPagî
, 
PagîSavïoöt
 *
pSavïoöt
){

3306 
i64
 
szJ
;

3307 
i64
 
iHdrOff
;

3308 
rc
 = 
SQLITE_OK
;

3309 
Bôvec
 *
pD⁄e
 = 0;

3311 
	`as£π
–
pPagî
->
eSèã
!=
PAGER_ERROR
 );

3312 
	`as£π
–
pPagî
->
eSèã
>=
PAGER_WRITER_LOCKED
 );

3315 if–
pSavïoöt
 ){

3316 
pD⁄e
 = 
	`sqlôe3BôvecCª©e
(
pSavïoöt
->
nOrig
);

3317 if–!
pD⁄e
 ){

3318  
SQLITE_NOMEM_BKPT
;

3325 
pPagî
->
dbSize
 = 
pSavïoöt
 ?ÖSavïoöt->
nOrig
 :ÖPagî->
dbOrigSize
;

3326 
pPagî
->
ch™geCou¡D⁄e
 =ÖPagî->
ãmpFûe
;

3328 if–!
pSavïoöt
 && 
	`∑gîU£WÆ
(
pPagî
) ){

3329  
	`∑gîRﬁlbackWÆ
(
pPagî
);

3337 
szJ
 = 
pPagî
->
jou∫ÆOff
;

3338 
	`as£π
–
	`∑gîU£WÆ
(
pPagî
)==0 || 
szJ
==0 );

3347 if–
pSavïoöt
 && !
	`∑gîU£WÆ
(
pPagî
) ){

3348 
iHdrOff
 = 
pSavïoöt
->
iHdrOff£t
 ?ÖSavïoöt->iHdrOff£à: 
szJ
;

3349 
pPagî
->
jou∫ÆOff
 = 
pSavïoöt
->
iOff£t
;

3350  
rc
==
SQLITE_OK
 && 
pPagî
->
jou∫ÆOff
<
iHdrOff
 ){

3351 
rc
 = 
	`∑gî_∂ayback_⁄e_∑ge
(
pPagî
, &pPagî->
jou∫ÆOff
, 
pD⁄e
, 1, 1);

3353 
	`as£π
–
rc
!=
SQLITE_DONE
 );

3355 
pPagî
->
jou∫ÆOff
 = 0;

3363  
rc
==
SQLITE_OK
 && 
pPagî
->
jou∫ÆOff
<
szJ
 ){

3364 
u32
 
ii
;

3365 
u32
 
nJRec
 = 0;

3366 
u32
 
dummy
;

3367 
rc
 = 
	`ªadJou∫ÆHdr
(
pPagî
, 0, 
szJ
, &
nJRec
, &
dummy
);

3368 
	`as£π
–
rc
!=
SQLITE_DONE
 );

3375 if–
nJRec
==0

3376 && 
pPagî
->
jou∫ÆHdr
+
	`JOURNAL_HDR_SZ
’Pagî)=ıPagî->
jou∫ÆOff


3378 
nJRec
 = (
u32
)((
szJ
 - 
pPagî
->
jou∫ÆOff
)/
	`JOURNAL_PG_SZ
(pPager));

3380 
ii
=0; 
rc
==
SQLITE_OK
 && ii<
nJRec
 && 
pPagî
->
jou∫ÆOff
<
szJ
; ii++){

3381 
rc
 = 
	`∑gî_∂ayback_⁄e_∑ge
(
pPagî
, &pPagî->
jou∫ÆOff
, 
pD⁄e
, 1, 1);

3383 
	`as£π
–
rc
!=
SQLITE_DONE
 );

3385 
	`as£π
–
rc
!=
SQLITE_OK
 || 
pPagî
->
jou∫ÆOff
>=
szJ
 );

3391 if–
pSavïoöt
 ){

3392 
u32
 
ii
;

3393 
i64
 
off£t
 = (i64)
pSavïoöt
->
iSubRec
*(4+
pPagî
->
∑geSize
);

3395 if–
	`∑gîU£WÆ
(
pPagî
) ){

3396 
rc
 = 
	`sqlôe3WÆSavïoötUndo
(
pPagî
->
pWÆ
, 
pSavïoöt
->
aWÆD©a
);

3398 
ii
=
pSavïoöt
->
iSubRec
; 
rc
==
SQLITE_OK
 && ii<
pPagî
->
nSubRec
; ii++){

3399 
	`as£π
–
off£t
==(
i64
)
ii
*(4+
pPagî
->
∑geSize
) );

3400 
rc
 = 
	`∑gî_∂ayback_⁄e_∑ge
(
pPagî
, &
off£t
, 
pD⁄e
, 0, 1);

3402 
	`as£π
–
rc
!=
SQLITE_DONE
 );

3405 
	`sqlôe3BôvecDe°roy
(
pD⁄e
);

3406 if–
rc
==
SQLITE_OK
 ){

3407 
pPagî
->
jou∫ÆOff
 = 
szJ
;

3410  
rc
;

3411 
	}
}

3417 
	$sqlôe3PagîSëCachesize
(
Pagî
 *
pPagî
, 
mxPage
){

3418 
	`sqlôe3PˇcheSëCachesize
(
pPagî
->
pPCache
, 
mxPage
);

3419 
	}
}

3425 
	$sqlôe3PagîSëSpûlsize
(
Pagî
 *
pPagî
, 
mxPage
){

3426  
	`sqlôe3PˇcheSëSpûlsize
(
pPagî
->
pPCache
, 
mxPage
);

3427 
	}
}

3432 
	$∑gîFixM≠limô
(
Pagî
 *
pPagî
){

3433 #i‡
SQLITE_MAX_MMAP_SIZE
>0

3434 
sqlôe3_fûe
 *
fd
 = 
pPagî
->fd;

3435 if–
	`isO≥n
(
fd
Ë&& fd->
pMëhods
->
iVîsi⁄
>=3 ){

3436 
sqlôe3_öt64
 
sz
;

3437 
sz
 = 
pPagî
->
szMm≠
;

3438 
pPagî
->
bU£Fëch
 = (
sz
>0);

3439 
	`sqlôe3OsFûeC⁄åﬁHöt
(
pPagî
->
fd
, 
SQLITE_FCNTL_MMAP_SIZE
, &
sz
);

3442 
	}
}

3447 
	$sqlôe3PagîSëMm≠Limô
(
Pagî
 *
pPagî
, 
sqlôe3_öt64
 
szMm≠
){

3448 
pPagî
->
szMm≠
 = szMmap;

3449 
	`∑gîFixM≠limô
(
pPagî
);

3450 
	}
}

3455 
	$sqlôe3PagîShrök
(
Pagî
 *
pPagî
){

3456 
	`sqlôe3PˇcheShrök
(
pPagî
->
pPCache
);

3457 
	}
}

3510 #i‚de‡
SQLITE_OMIT_PAGER_PRAGMAS


3511 
	$sqlôe3PagîSëFœgs
(

3512 
Pagî
 *
pPagî
,

3513 
pgFœgs


3515 
Àvñ
 = 
pgFœgs
 & 
PAGER_SYNCHRONOUS_MASK
;

3516 if–
pPagî
->
ãmpFûe
 ){

3517 
pPagî
->
noSync
 = 1;

3518 
pPagî
->
fuŒSync
 = 0;

3519 
pPagî
->
exåaSync
 = 0;

3521 
pPagî
->
noSync
 = 
Àvñ
==
PAGER_SYNCHRONOUS_OFF
 ?1:0;

3522 
pPagî
->
fuŒSync
 = 
Àvñ
>=
PAGER_SYNCHRONOUS_FULL
 ?1:0;

3523 
pPagî
->
exåaSync
 = 
Àvñ
==
PAGER_SYNCHRONOUS_EXTRA
 ?1:0;

3525 if–
pPagî
->
noSync
 ){

3526 
pPagî
->
syncFœgs
 = 0;

3527 
pPagî
->
ck±SyncFœgs
 = 0;

3528 }if–
pgFœgs
 & 
PAGER_FULLFSYNC
 ){

3529 
pPagî
->
syncFœgs
 = 
SQLITE_SYNC_FULL
;

3530 
pPagî
->
ck±SyncFœgs
 = 
SQLITE_SYNC_FULL
;

3531 }if–
pgFœgs
 & 
PAGER_CKPT_FULLFSYNC
 ){

3532 
pPagî
->
syncFœgs
 = 
SQLITE_SYNC_NORMAL
;

3533 
pPagî
->
ck±SyncFœgs
 = 
SQLITE_SYNC_FULL
;

3535 
pPagî
->
syncFœgs
 = 
SQLITE_SYNC_NORMAL
;

3536 
pPagî
->
ck±SyncFœgs
 = 
SQLITE_SYNC_NORMAL
;

3538 
pPagî
->
wÆSyncFœgs
 =ÖPagî->
syncFœgs
;

3539 if–
pPagî
->
fuŒSync
 ){

3540 
pPagî
->
wÆSyncFœgs
 |
WAL_SYNC_TRANSACTIONS
;

3542 if–
pgFœgs
 & 
PAGER_CACHESPILL
 ){

3543 
pPagî
->
doNŸSpûl
 &~
SPILLFLAG_OFF
;

3545 
pPagî
->
doNŸSpûl
 |
SPILLFLAG_OFF
;

3547 
	}
}

3555 #ifde‡
SQLITE_TEST


3556 
	gsqlôe3_›íãmp_cou¡
 = 0;

3574 
	$∑gîO≥¡emp
(

3575 
Pagî
 *
pPagî
,

3576 
sqlôe3_fûe
 *
pFûe
,

3577 
vfsFœgs


3579 
rc
;

3581 #ifde‡
SQLITE_TEST


3582 
sqlôe3_›íãmp_cou¡
++;

3585 
vfsFœgs
 |
SQLITE_OPEN_READWRITE
 | 
SQLITE_OPEN_CREATE
 |

3586 
SQLITE_OPEN_EXCLUSIVE
 | 
SQLITE_OPEN_DELETEONCLOSE
;

3587 
rc
 = 
	`sqlôe3OsO≥n
(
pPagî
->
pVfs
, 0, 
pFûe
, 
vfsFœgs
, 0);

3588 
	`as£π
–
rc
!=
SQLITE_OK
 || 
	`isO≥n
(
pFûe
) );

3589  
rc
;

3590 
	}
}

3613 
sqlôe3PagîSëBusyh™dÀr
(

3614 
Pagî
 *
pPagî
,

3615 (*
xBusyH™dÀr
)(*),

3616 *
pBusyH™dÀrArg


3618 
pPagî
->
xBusyH™dÀr
 = xBusyHandler;

3619 
pPagî
->
pBusyH™dÀrArg
 =ÖBusyHandlerArg;

3621 if–
	`isO≥n
(
pPagî
->
fd
) ){

3622 **
≠
 = (**)&
pPagî
->
xBusyH™dÀr
;

3623 
	`as£π
–(((*)(*))(
≠
[0]))==
xBusyH™dÀr
 );

3624 
	`as£π
–
≠
[1]==
pBusyH™dÀrArg
 );

3625 
	`sqlôe3OsFûeC⁄åﬁHöt
(
pPagî
->
fd
, 
SQLITE_FCNTL_BUSYHANDLER
, (*)
≠
);

3627 
	}
}

3659 
	$sqlôe3PagîSëPagesize
(
Pagî
 *
pPagî
, 
u32
 *
pPageSize
, 
nRe£rve
){

3660 
rc
 = 
SQLITE_OK
;

3672 
u32
 
∑geSize
 = *
pPageSize
;

3673 
	`as£π
–
∑geSize
==0 || (∑geSize>=512 &&ÖageSize<=
SQLITE_MAX_PAGE_SIZE
) );

3674 if–(
pPagî
->
memDb
==0 ||ÖPagî->
dbSize
==0)

3675 && 
	`sqlôe3PˇcheRefCou¡
(
pPagî
->
pPCache
)==0

3676 && 
∑geSize
 &&ÖageSize!=(
u32
)
pPagî
->pageSize

3678 *
pNew
 = 
NULL
;

3679 
i64
 
nByã
 = 0;

3681 if–
pPagî
->
eSèã
>
PAGER_OPEN
 && 
	`isO≥n
’Pagî->
fd
) ){

3682 
rc
 = 
	`sqlôe3OsFûeSize
(
pPagî
->
fd
, &
nByã
);

3684 if–
rc
==
SQLITE_OK
 ){

3685 
pNew
 = (*)
	`sqlôe3PageMÆloc
(
∑geSize
);

3686 if–!
pNew
 ) 
rc
 = 
SQLITE_NOMEM_BKPT
;

3689 if–
rc
==
SQLITE_OK
 ){

3690 
	`∑gî_ª£t
(
pPagî
);

3691 
rc
 = 
	`sqlôe3PˇcheSëPageSize
(
pPagî
->
pPCache
, 
∑geSize
);

3693 if–
rc
==
SQLITE_OK
 ){

3694 
	`sqlôe3PageFªe
(
pPagî
->
pTmpS∑˚
);

3695 
pPagî
->
pTmpS∑˚
 = 
pNew
;

3696 
pPagî
->
dbSize
 = (
Pgno
)((
nByã
+
∑geSize
-1)/pageSize);

3697 
pPagî
->
∑geSize
 =ÖageSize;

3699 
	`sqlôe3PageFªe
(
pNew
);

3703 *
pPageSize
 = 
pPagî
->
∑geSize
;

3704 if–
rc
==
SQLITE_OK
 ){

3705 if–
nRe£rve
<0 )ÇRe£rvê
pPagî
->nReserve;

3706 
	`as£π
–
nRe£rve
>=0 &&ÇReserve<1000 );

3707 
pPagî
->
nRe£rve
 = (
i16
)nReserve;

3708 
	`∑gîRï‹tSize
(
pPagî
);

3709 
	`∑gîFixM≠limô
(
pPagî
);

3711  
rc
;

3712 
	}
}

3722 *
	$sqlôe3PagîTempS∑˚
(
Pagî
 *
pPagî
){

3723  
pPagî
->
pTmpS∑˚
;

3724 
	}
}

3733 
	$sqlôe3PagîMaxPageCou¡
(
Pagî
 *
pPagî
, 
mxPage
){

3734 if–
mxPage
>0 ){

3735 
pPagî
->
mxPgno
 = 
mxPage
;

3737 
	`as£π
–
pPagî
->
eSèã
!=
PAGER_OPEN
 );

3738 
	`as£π
–
pPagî
->
mxPgno
>ıPagî->
dbSize
 );

3739  
pPagî
->
mxPgno
;

3740 
	}
}

3750 #ifde‡
SQLITE_TEST


3751 
sqlôe3_io_îr‹_≥ndög
;

3752 
sqlôe3_io_îr‹_hô
;

3753 
	gßved_˙t
;

3754 
	$dißbÀ_simuœãd_io_îr‹s
(){

3755 
ßved_˙t
 = 
sqlôe3_io_îr‹_≥ndög
;

3756 
sqlôe3_io_îr‹_≥ndög
 = -1;

3757 
	}
}

3758 
	$íabÀ_simuœãd_io_îr‹s
(){

3759 
sqlôe3_io_îr‹_≥ndög
 = 
ßved_˙t
;

3760 
	}
}

3762 
	#dißbÀ_simuœãd_io_îr‹s
()

	)

3763 
	#íabÀ_simuœãd_io_îr‹s
()

	)

3780 
	$sqlôe3PagîRódFûehódî
(
Pagî
 *
pPagî
, 
N
, *
pDe°
){

3781 
rc
 = 
SQLITE_OK
;

3782 
	`mem£t
(
pDe°
, 0, 
N
);

3783 
	`as£π
–
	`isO≥n
(
pPagî
->
fd
Ë||ÖPagî->
ãmpFûe
 );

3789 
	`as£π
–!
	`∑gîU£WÆ
(
pPagî
) );

3791 if–
	`isO≥n
(
pPagî
->
fd
) ){

3792 
	`IOTRACE
(("DBHDR %∞0 %d\n", 
pPagî
, 
N
))

3793 
rc
 = 
	`sqlôe3OsRód
(
pPagî
->
fd
, 
pDe°
, 
N
, 0);

3794 if–
rc
==
SQLITE_IOERR_SHORT_READ
 ){

3795 
rc
 = 
SQLITE_OK
;

3798  
rc
;

3799 
	}
}

3808 
	$sqlôe3PagîPagecou¡
(
Pagî
 *
pPagî
, *
≤Page
){

3809 
	`as£π
–
pPagî
->
eSèã
>=
PAGER_READER
 );

3810 
	`as£π
–
pPagî
->
eSèã
!=
PAGER_WRITER_FINISHED
 );

3811 *
≤Page
 = ()
pPagî
->
dbSize
;

3812 
	}
}

3829 
	$∑gî_waô_⁄_lock
(
Pagî
 *
pPagî
, 
lockty≥
){

3830 
rc
;

3837 
	`as£π
–(
pPagî
->
eLock
>=
lockty≥
)

3838 || (
pPagî
->
eLock
==
NO_LOCK
 && 
lockty≥
==
SHARED_LOCK
)

3839 || (
pPagî
->
eLock
==
RESERVED_LOCK
 && 
lockty≥
==
EXCLUSIVE_LOCK
)

3843 
rc
 = 
	`∑gîLockDb
(
pPagî
, 
lockty≥
);

3844 } 
rc
==
SQLITE_BUSY
 && 
pPagî
->
	`xBusyH™dÀr
’Pagî->
pBusyH™dÀrArg
) );

3845  
rc
;

3846 
	}
}

3870 #i‡
deföed
(
SQLITE_DEBUG
)

3871 
	$as£πTrunˇãC⁄°øötCb
(
PgHdr
 *
pPg
){

3872 
	`as£π
–
pPg
->
Êags
&
PGHDR_DIRTY
 );

3873 
	`as£π
–!
	`subjRequúesPage
(
pPg
Ë||ÖPg->
pgno
<ıPg->
pPagî
->
dbSize
 );

3874 
	}
}

3875 
	$as£πTrunˇãC⁄°øöt
(
Pagî
 *
pPagî
){

3876 
	`sqlôe3PˇcheIãøãDúty
(
pPagî
->
pPCache
, 
as£πTrunˇãC⁄°øötCb
);

3877 
	}
}

3879 
	#as£πTrunˇãC⁄°øöt
(
pPagî
)

	)

3893 
	$sqlôe3PagîTrunˇãImage
(
Pagî
 *
pPagî
, 
Pgno
 
nPage
){

3894 
	`as£π
–
pPagî
->
dbSize
>=
nPage
 );

3895 
	`as£π
–
pPagî
->
eSèã
>=
PAGER_WRITER_CACHEMOD
 );

3896 
pPagî
->
dbSize
 = 
nPage
;

3907 
	}
}

3924 
	$∑gîSyncHŸJou∫Æ
(
Pagî
 *
pPagî
){

3925 
rc
 = 
SQLITE_OK
;

3926 if–!
pPagî
->
noSync
 ){

3927 
rc
 = 
	`sqlôe3OsSync
(
pPagî
->
jfd
, 
SQLITE_SYNC_NORMAL
);

3929 if–
rc
==
SQLITE_OK
 ){

3930 
rc
 = 
	`sqlôe3OsFûeSize
(
pPagî
->
jfd
, &pPagî->
jou∫ÆHdr
);

3932  
rc
;

3933 
	}
}

3945 
	$∑gîAcquúeM≠Page
(

3946 
Pagî
 *
pPagî
,

3947 
Pgno
 
pgno
,

3948 *
pD©a
,

3949 
PgHdr
 **
µPage


3951 
PgHdr
 *
p
;

3953 if–
pPagî
->
pMm≠Fªñi°
 ){

3954 *
µPage
 = 
p
 = 
pPagî
->
pMm≠Fªñi°
;

3955 
pPagî
->
pMm≠Fªñi°
 = 
p
->
pDúty
;

3956 
p
->
pDúty
 = 0;

3957 
	`mem£t
(
p
->
pExåa
, 0, 
pPagî
->
nExåa
);

3959 *
µPage
 = 
p
 = (
PgHdr
 *)
	`sqlôe3MÆlocZîo
((PgHdrË+ 
pPagî
->
nExåa
);

3960 if–
p
==0 ){

3961 
	`sqlôe3OsUn„tch
(
pPagî
->
fd
, (
i64
)(
pgno
-1Ë*ÖPagî->
∑geSize
, 
pD©a
);

3962  
SQLITE_NOMEM_BKPT
;

3964 
p
->
pExåa
 = (*)&p[1];

3965 
p
->
Êags
 = 
PGHDR_MMAP
;

3966 
p
->
nRef
 = 1;

3967 
p
->
pPagî
 =ÖPager;

3970 
	`as£π
–
p
->
pExåa
==(*)&p[1] );

3971 
	`as£π
–
p
->
pPage
==0 );

3972 
	`as£π
–
p
->
Êags
==
PGHDR_MMAP
 );

3973 
	`as£π
–
p
->
pPagî
==pPager );

3974 
	`as£π
–
p
->
nRef
==1 );

3976 
p
->
pgno
 =Ögno;

3977 
p
->
pD©a
 =ÖData;

3978 
pPagî
->
nMm≠Out
++;

3980  
SQLITE_OK
;

3981 
	}
}

3987 
	$∑gîRñó£M≠Page
(
PgHdr
 *
pPg
){

3988 
Pagî
 *
pPagî
 = 
pPg
->pPager;

3989 
pPagî
->
nMm≠Out
--;

3990 
pPg
->
pDúty
 = 
pPagî
->
pMm≠Fªñi°
;

3991 
pPagî
->
pMm≠Fªñi°
 = 
pPg
;

3993 
	`as£π
–
pPagî
->
fd
->
pMëhods
->
iVîsi⁄
>=3 );

3994 
	`sqlôe3OsUn„tch
(
pPagî
->
fd
, (
i64
)(
pPg
->
pgno
-1)*pPagî->
∑geSize
,ÖPg->
pD©a
);

3995 
	}
}

4000 
	$∑gîFªeM≠Hdrs
(
Pagî
 *
pPagî
){

4001 
PgHdr
 *
p
;

4002 
PgHdr
 *
pNext
;

4003 
p
=
pPagî
->
pMm≠Fªñi°
;Ö;Ö=
pNext
){

4004 
pNext
 = 
p
->
pDúty
;

4005 
	`sqlôe3_‰ì
(
p
);

4007 
	}
}

4024 
	$sqlôe3PagîClo£
(
Pagî
 *
pPagî
){

4025 
u8
 *
pTmp
 = (u8 *)
pPagî
->
pTmpS∑˚
;

4027 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

4028 
	`dißbÀ_simuœãd_io_îr‹s
();

4029 
	`sqlôe3BegöBíignMÆloc
();

4030 
	`∑gîFªeM≠Hdrs
(
pPagî
);

4032 
pPagî
->
ex˛usiveMode
 = 0;

4033 #i‚de‡
SQLITE_OMIT_WAL


4034 
	`sqlôe3WÆClo£
(
pPagî
->
pWÆ
,ÖPagî->
ck±SyncFœgs
,ÖPagî->
∑geSize
, 
pTmp
);

4035 
pPagî
->
pWÆ
 = 0;

4037 
	`∑gî_ª£t
(
pPagî
);

4038 if–
MEMDB
 ){

4039 
	`∑gî_u∆ock
(
pPagî
);

4052 if–
	`isO≥n
(
pPagî
->
jfd
) ){

4053 
	`∑gî_îr‹
(
pPagî
, 
	`∑gîSyncHŸJou∫Æ
(pPager));

4055 
	`∑gîU∆ockAndRﬁlback
(
pPagî
);

4057 
	`sqlôe3EndBíignMÆloc
();

4058 
	`íabÀ_simuœãd_io_îr‹s
();

4059 
	`PAGERTRACE
(("CLOSE %d\n", 
	`PAGERID
(
pPagî
)));

4060 
	`IOTRACE
(("CLOSE %p\n", 
pPagî
))

4061 
	`sqlôe3OsClo£
(
pPagî
->
jfd
);

4062 
	`sqlôe3OsClo£
(
pPagî
->
fd
);

4063 
	`sqlôe3PageFªe
(
pTmp
);

4064 
	`sqlôe3PˇcheClo£
(
pPagî
->
pPCache
);

4066 #ifde‡
SQLITE_HAS_CODEC


4067 if–
pPagî
->
xCodecFªe
 )ÖPagî->
	`xCodecFªe
’Pagî->
pCodec
);

4070 
	`as£π
–!
pPagî
->
aSavïoöt
 && !pPagî->
pInJou∫Æ
 );

4071 
	`as£π
–!
	`isO≥n
(
pPagî
->
jfd
Ë&& !isO≥n’Pagî->
sjfd
) );

4073 
	`sqlôe3_‰ì
(
pPagî
);

4074  
SQLITE_OK
;

4075 
	}
}

4077 #i‡!
deföed
(
NDEBUG
Ë|| deföed(
SQLITE_TEST
)

4081 
Pgno
 
	$sqlôe3PagîPagíumbî
(
DbPage
 *
pPg
){

4082  
pPg
->
pgno
;

4083 
	}
}

4089 
	$sqlôe3PagîRef
(
DbPage
 *
pPg
){

4090 
	`sqlôe3PˇcheRef
(
pPg
);

4091 
	}
}

4128 
	$syncJou∫Æ
(
Pagî
 *
pPagî
, 
√wHdr
){

4129 
rc
;

4131 
	`as£π
–
pPagî
->
eSèã
==
PAGER_WRITER_CACHEMOD


4132 || 
pPagî
->
eSèã
==
PAGER_WRITER_DBMOD


4134 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

4135 
	`as£π
–!
	`∑gîU£WÆ
(
pPagî
) );

4137 
rc
 = 
	`sqlôe3PagîEx˛usiveLock
(
pPagî
);

4138 if–
rc
!=
SQLITE_OK
 ) Ñc;

4140 if–!
pPagî
->
noSync
 ){

4141 
	`as£π
–!
pPagî
->
ãmpFûe
 );

4142 if–
	`isO≥n
(
pPagî
->
jfd
Ë&&ÖPagî->
jou∫ÆMode
!=
PAGER_JOURNALMODE_MEMORY
 ){

4143 c⁄° 
iDc
 = 
	`sqlôe3OsDevi˚Ch¨a˘îi°ics
(
pPagî
->
fd
);

4144 
	`as£π
–
	`isO≥n
(
pPagî
->
jfd
) );

4146 if–0==(
iDc
&
SQLITE_IOCAP_SAFE_APPEND
) ){

4169 
i64
 
iNextHdrOff£t
;

4170 
u8
 
aMagic
[8];

4171 
u8
 
zHódî
[(
aJou∫ÆMagic
)+4];

4173 
	`mem˝y
(
zHódî
, 
aJou∫ÆMagic
, (aJournalMagic));

4174 
	`put32bôs
(&
zHódî
[(
aJou∫ÆMagic
)], 
pPagî
->
nRec
);

4176 
iNextHdrOff£t
 = 
	`jou∫ÆHdrOff£t
(
pPagî
);

4177 
rc
 = 
	`sqlôe3OsRód
(
pPagî
->
jfd
, 
aMagic
, 8, 
iNextHdrOff£t
);

4178 if–
rc
==
SQLITE_OK
 && 0==
	`memcmp
(
aMagic
, 
aJou∫ÆMagic
, 8) ){

4179 c⁄° 
u8
 
zîobyã
 = 0;

4180 
rc
 = 
	`sqlôe3OsWrôe
(
pPagî
->
jfd
, &
zîobyã
, 1, 
iNextHdrOff£t
);

4182 if–
rc
!=
SQLITE_OK
 &&Ñc!=
SQLITE_IOERR_SHORT_READ
 ){

4183  
rc
;

4197 if–
pPagî
->
fuŒSync
 && 0==(
iDc
&
SQLITE_IOCAP_SEQUENTIAL
) ){

4198 
	`PAGERTRACE
(("SYNC jou∫Æ o‡%d\n", 
	`PAGERID
(
pPagî
)));

4199 
	`IOTRACE
(("JSYNC %p\n", 
pPagî
))

4200 
rc
 = 
	`sqlôe3OsSync
(
pPagî
->
jfd
,ÖPagî->
syncFœgs
);

4201 if–
rc
!=
SQLITE_OK
 ) Ñc;

4203 
	`IOTRACE
(("JHDR %∞%Œd\n", 
pPagî
,ÖPagî->
jou∫ÆHdr
));

4204 
rc
 = 
	`sqlôe3OsWrôe
(

4205 
pPagî
->
jfd
, 
zHódî
, (zHódî),ÖPagî->
jou∫ÆHdr


4207 if–
rc
!=
SQLITE_OK
 ) Ñc;

4209 if–0==(
iDc
&
SQLITE_IOCAP_SEQUENTIAL
) ){

4210 
	`PAGERTRACE
(("SYNC jou∫Æ o‡%d\n", 
	`PAGERID
(
pPagî
)));

4211 
	`IOTRACE
(("JSYNC %p\n", 
pPagî
))

4212 
rc
 = 
	`sqlôe3OsSync
(
pPagî
->
jfd
,ÖPagî->
syncFœgs
|

4213 (
pPagî
->
syncFœgs
==
SQLITE_SYNC_FULL
?
SQLITE_SYNC_DATAONLY
:0)

4215 if–
rc
!=
SQLITE_OK
 ) Ñc;

4218 
pPagî
->
jou∫ÆHdr
 =ÖPagî->
jou∫ÆOff
;

4219 if–
√wHdr
 && 0==(
iDc
&
SQLITE_IOCAP_SAFE_APPEND
) ){

4220 
pPagî
->
nRec
 = 0;

4221 
rc
 = 
	`wrôeJou∫ÆHdr
(
pPagî
);

4222 if–
rc
!=
SQLITE_OK
 ) Ñc;

4225 
pPagî
->
jou∫ÆHdr
 =ÖPagî->
jou∫ÆOff
;

4233 
	`sqlôe3PˇcheCÀ¨SyncFœgs
(
pPagî
->
pPCache
);

4234 
pPagî
->
eSèã
 = 
PAGER_WRITER_DBMOD
;

4235 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

4236  
SQLITE_OK
;

4237 
	}
}

4271 
	$∑gî_wrôe_∑gñi°
(
Pagî
 *
pPagî
, 
PgHdr
 *
pLi°
){

4272 
rc
 = 
SQLITE_OK
;

4275 
	`as£π
–!
	`∑gîU£WÆ
(
pPagî
) );

4276 
	`as£π
–
pPagî
->
ãmpFûe
 ||ÖPagî->
eSèã
==
PAGER_WRITER_DBMOD
 );

4277 
	`as£π
–
pPagî
->
eLock
==
EXCLUSIVE_LOCK
 );

4278 
	`as£π
–
	`isO≥n
(
pPagî
->
fd
Ë|| 
pLi°
->
pDúty
==0 );

4284 if–!
	`isO≥n
(
pPagî
->
fd
) ){

4285 
	`as£π
–
pPagî
->
ãmpFûe
 && 
rc
==
SQLITE_OK
 );

4286 
rc
 = 
	`∑gîO≥¡emp
(
pPagî
,ÖPagî->
fd
,ÖPagî->
vfsFœgs
);

4292 
	`as£π
–
rc
!=
SQLITE_OK
 || 
	`isO≥n
(
pPagî
->
fd
) );

4293 if–
rc
==
SQLITE_OK


4294 && 
pPagî
->
dbHötSize
<pPagî->
dbSize


4295 && (
pLi°
->
pDúty
 ||ÖLi°->
pgno
>
pPagî
->
dbHötSize
)

4297 
sqlôe3_öt64
 
szFûe
 = 
pPagî
->
∑geSize
 * (sqlôe3_öt64ÌPagî->
dbSize
;

4298 
	`sqlôe3OsFûeC⁄åﬁHöt
(
pPagî
->
fd
, 
SQLITE_FCNTL_SIZE_HINT
, &
szFûe
);

4299 
pPagî
->
dbHötSize
 =ÖPagî->
dbSize
;

4302  
rc
==
SQLITE_OK
 && 
pLi°
 ){

4303 
Pgno
 
pgno
 = 
pLi°
->pgno;

4313 if–
pgno
<=
pPagî
->
dbSize
 && 0==(
pLi°
->
Êags
&
PGHDR_DONT_WRITE
) ){

4314 
i64
 
off£t
 = (
pgno
-1)*(i64)
pPagî
->
∑geSize
;

4315 *
pD©a
;

4317 
	`as£π
–(
pLi°
->
Êags
&
PGHDR_NEED_SYNC
)==0 );

4318 if–
pLi°
->
pgno
==1 ) 
	`∑gî_wrôe_ch™gecou¡î
(pList);

4321 
	`CODEC2
(
pPagî
, 
pLi°
->
pD©a
, 
pgno
, 6,  
SQLITE_NOMEM_BKPT
,ÖData);

4324 
rc
 = 
	`sqlôe3OsWrôe
(
pPagî
->
fd
, 
pD©a
,ÖPagî->
∑geSize
, 
off£t
);

4330 if–
pgno
==1 ){

4331 
	`mem˝y
(&
pPagî
->
dbFûeVîs
, &
pD©a
[24], (pPager->dbFileVers));

4333 if–
pgno
>
pPagî
->
dbFûeSize
 ){

4334 
pPagî
->
dbFûeSize
 = 
pgno
;

4336 
pPagî
->
aSèt
[
PAGER_STAT_WRITE
]++;

4339 
	`sqlôe3BackupUpd©e
(
pPagî
->
pBackup
, 
pgno
, (
u8
*)
pLi°
->
pD©a
);

4341 
	`PAGERTRACE
(("STORE %dÖage %d hash(%08x)\n",

4342 
	`PAGERID
(
pPagî
), 
pgno
, 
	`∑gî_∑gehash
(
pLi°
)));

4343 
	`IOTRACE
(("PGOUT %∞%d\n", 
pPagî
, 
pgno
));

4344 
	`PAGER_INCR
(
sqlôe3_∑gî_wrôedb_cou¡
);

4346 
	`PAGERTRACE
(("NOSTORE %dÖagê%d\n", 
	`PAGERID
(
pPagî
), 
pgno
));

4348 
	`∑gî_£t_∑gehash
(
pLi°
);

4349 
pLi°
 =ÖLi°->
pDúty
;

4352  
rc
;

4353 
	}
}

4363 
	$›íSubJou∫Æ
(
Pagî
 *
pPagî
){

4364 
rc
 = 
SQLITE_OK
;

4365 if–!
	`isO≥n
(
pPagî
->
sjfd
) ){

4366 c⁄° 
Êags
 = 
SQLITE_OPEN_SUBJOURNAL
 | 
SQLITE_OPEN_READWRITE


4367 | 
SQLITE_OPEN_CREATE
 | 
SQLITE_OPEN_EXCLUSIVE


4368 | 
SQLITE_OPEN_DELETEONCLOSE
;

4369 
nStmtSpûl
 = 
sqlôe3C⁄fig
.nStmtSpill;

4370 if–
pPagî
->
jou∫ÆMode
==
PAGER_JOURNALMODE_MEMORY
 ||ÖPagî->
subjInMem‹y
 ){

4371 
nStmtSpûl
 = -1;

4373 
rc
 = 
	`sqlôe3Jou∫ÆO≥n
(
pPagî
->
pVfs
, 0,ÖPagî->
sjfd
, 
Êags
, 
nStmtSpûl
);

4375  
rc
;

4376 
	}
}

4389 
	$subjou∫ÆPage
(
PgHdr
 *
pPg
){

4390 
rc
 = 
SQLITE_OK
;

4391 
Pagî
 *
pPagî
 = 
pPg
->pPager;

4392 if–
pPagî
->
jou∫ÆMode
!=
PAGER_JOURNALMODE_OFF
 ){

4395 
	`as£π
–
pPagî
->
u£Jou∫Æ
 );

4396 
	`as£π
–
	`isO≥n
(
pPagî
->
jfd
Ë|| 
	`∑gîU£WÆ
(pPager) );

4397 
	`as£π
–
	`isO≥n
(
pPagî
->
sjfd
Ë||ÖPagî->
nSubRec
==0 );

4398 
	`as£π
–
	`∑gîU£WÆ
(
pPagî
)

4399 || 
	`∑geInJou∫Æ
(
pPagî
, 
pPg
)

4400 || 
pPg
->
pgno
>
pPagî
->
dbOrigSize


4402 
rc
 = 
	`›íSubJou∫Æ
(
pPagî
);

4406 if–
rc
==
SQLITE_OK
 ){

4407 *
pD©a
 = 
pPg
->pData;

4408 
i64
 
off£t
 = (i64)
pPagî
->
nSubRec
*(4+pPagî->
∑geSize
);

4409 *
pD©a2
;

4411 
	`CODEC2
(
pPagî
, 
pD©a
, 
pPg
->
pgno
, 7,  
SQLITE_NOMEM_BKPT
, 
pD©a2
);

4412 
	`PAGERTRACE
(("STMT-JOURNAL %dÖagê%d\n", 
	`PAGERID
(
pPagî
), 
pPg
->
pgno
));

4413 
rc
 = 
	`wrôe32bôs
(
pPagî
->
sjfd
, 
off£t
, 
pPg
->
pgno
);

4414 if–
rc
==
SQLITE_OK
 ){

4415 
rc
 = 
	`sqlôe3OsWrôe
(
pPagî
->
sjfd
, 
pD©a2
,ÖPagî->
∑geSize
, 
off£t
+4);

4419 if–
rc
==
SQLITE_OK
 ){

4420 
pPagî
->
nSubRec
++;

4421 
	`as£π
–
pPagî
->
nSavïoöt
>0 );

4422 
rc
 = 
	`addToSavïoötBôvecs
(
pPagî
, 
pPg
->
pgno
);

4424  
rc
;

4425 
	}
}

4426 
	$subjou∫ÆPageIfRequúed
(
PgHdr
 *
pPg
){

4427 if–
	`subjRequúesPage
(
pPg
) ){

4428  
	`subjou∫ÆPage
(
pPg
);

4430  
SQLITE_OK
;

4432 
	}
}

4453 
	$∑gîSåess
(*
p
, 
PgHdr
 *
pPg
){

4454 
Pagî
 *
pPagî
 = (Pagî *)
p
;

4455 
rc
 = 
SQLITE_OK
;

4457 
	`as£π
–
pPg
->
pPagî
==pPager );

4458 
	`as£π
–
pPg
->
Êags
&
PGHDR_DIRTY
 );

4476 if–
	`NEVER
(
pPagî
->
îrCode
ËË 
SQLITE_OK
;

4477 
	`ã°ˇ£
–
pPagî
->
doNŸSpûl
 & 
SPILLFLAG_ROLLBACK
 );

4478 
	`ã°ˇ£
–
pPagî
->
doNŸSpûl
 & 
SPILLFLAG_OFF
 );

4479 
	`ã°ˇ£
–
pPagî
->
doNŸSpûl
 & 
SPILLFLAG_NOSYNC
 );

4480 if–
pPagî
->
doNŸSpûl


4481 && ((
pPagî
->
doNŸSpûl
 & (
SPILLFLAG_ROLLBACK
|
SPILLFLAG_OFF
))!=0

4482 || (
pPg
->
Êags
 & 
PGHDR_NEED_SYNC
)!=0)

4484  
SQLITE_OK
;

4487 
pPg
->
pDúty
 = 0;

4488 if–
	`∑gîU£WÆ
(
pPagî
) ){

4490 
rc
 = 
	`subjou∫ÆPageIfRequúed
(
pPg
);

4491 if–
rc
==
SQLITE_OK
 ){

4492 
rc
 = 
	`∑gîWÆFømes
(
pPagî
, 
pPg
, 0, 0);

4497 if–
pPg
->
Êags
&
PGHDR_NEED_SYNC


4498 || 
pPagî
->
eSèã
==
PAGER_WRITER_CACHEMOD


4500 
rc
 = 
	`syncJou∫Æ
(
pPagî
, 1);

4504 if–
rc
==
SQLITE_OK
 ){

4505 
	`as£π
–(
pPg
->
Êags
&
PGHDR_NEED_SYNC
)==0 );

4506 
rc
 = 
	`∑gî_wrôe_∑gñi°
(
pPagî
, 
pPg
);

4511 if–
rc
==
SQLITE_OK
 ){

4512 
	`PAGERTRACE
(("STRESS %dÖagê%d\n", 
	`PAGERID
(
pPagî
), 
pPg
->
pgno
));

4513 
	`sqlôe3PˇcheMakeCÀ™
(
pPg
);

4516  
	`∑gî_îr‹
(
pPagî
, 
rc
);

4517 
	}
}

4522 
	$sqlôe3PagîFlush
(
Pagî
 *
pPagî
){

4523 
rc
 = 
pPagî
->
îrCode
;

4524 if–!
MEMDB
 ){

4525 
PgHdr
 *
pLi°
 = 
	`sqlôe3PˇcheDútyLi°
(
pPagî
->
pPCache
);

4526 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

4527  
rc
==
SQLITE_OK
 && 
pLi°
 ){

4528 
PgHdr
 *
pNext
 = 
pLi°
->
pDúty
;

4529 if–
pLi°
->
nRef
==0 ){

4530 
rc
 = 
	`∑gîSåess
((*)
pPagî
, 
pLi°
);

4532 
pLi°
 = 
pNext
;

4536  
rc
;

4537 
	}
}

4569 
sqlôe3PagîO≥n
(

4570 
sqlôe3_vfs
 *
pVfs
,

4571 
Pagî
 **
µPagî
,

4572 c⁄° *
zFûíame
,

4573 
nExåa
,

4574 
Êags
,

4575 
vfsFœgs
,

4576 (*
xReöô
)(
DbPage
*)

4578 
u8
 *
pPå
;

4579 
Pagî
 *
pPagî
 = 0;

4580 
rc
 = 
SQLITE_OK
;

4581 
ãmpFûe
 = 0;

4582 
memDb
 = 0;

4583 
ªadO∆y
 = 0;

4584 
jou∫ÆFûeSize
;

4585 *
zP©h«me
 = 0;

4586 
nP©h«me
 = 0;

4587 
u£Jou∫Æ
 = (
Êags
 & 
PAGER_OMIT_JOURNAL
)==0;

4588 
pˇcheSize
 = 
	`sqlôe3PˇcheSize
();

4589 
u32
 
szPageDÊt
 = 
SQLITE_DEFAULT_PAGE_SIZE
;

4590 c⁄° *
zUri
 = 0;

4591 
nUri
 = 0;

4595 
jou∫ÆFûeSize
 = 
	`ROUND8
(
	`sqlôe3Jou∫ÆSize
(
pVfs
));

4598 *
µPagî
 = 0;

4600 #i‚de‡
SQLITE_OMIT_MEMORYDB


4601 if–
Êags
 & 
PAGER_MEMORY
 ){

4602 
memDb
 = 1;

4603 if–
zFûíame
 && zFilename[0] ){

4604 
zP©h«me
 = 
	`sqlôe3DbSåDup
(0, 
zFûíame
);

4605 if–
zP©h«me
==0 )  
SQLITE_NOMEM_BKPT
;

4606 
nP©h«me
 = 
	`sqlôe3SåÀn30
(
zP©h«me
);

4607 
zFûíame
 = 0;

4616 if–
zFûíame
 && zFilename[0] ){

4617 c⁄° *
z
;

4618 
nP©h«me
 = 
pVfs
->
mxP©h«me
+1;

4619 
zP©h«me
 = 
	`sqlôe3DbMÆlocRaw
(0, 
nP©h«me
*2);

4620 if–
zP©h«me
==0 ){

4621  
SQLITE_NOMEM_BKPT
;

4623 
zP©h«me
[0] = 0;

4624 
rc
 = 
	`sqlôe3OsFuŒP©h«me
(
pVfs
, 
zFûíame
, 
nP©h«me
, 
zP©h«me
);

4625 
nP©h«me
 = 
	`sqlôe3SåÀn30
(
zP©h«me
);

4626 
z
 = 
zUri
 = &
zFûíame
[
	`sqlôe3SåÀn30
(zFilename)+1];

4627  *
z
 ){

4628 
z
 +
	`sqlôe3SåÀn30
(z)+1;

4629 
z
 +
	`sqlôe3SåÀn30
(z)+1;

4631 
nUri
 = ()(&
z
[1] - 
zUri
);

4632 
	`as£π
–
nUri
>=0 );

4633 if–
rc
==
SQLITE_OK
 && 
nP©h«me
+8>
pVfs
->
mxP©h«me
 ){

4640 
rc
 = 
SQLITE_CANTOPEN_BKPT
;

4642 if–
rc
!=
SQLITE_OK
 ){

4643 
	`sqlôe3DbFªe
(0, 
zP©h«me
);

4644  
rc
;

4660 
pPå
 = (
u8
 *)
	`sqlôe3MÆlocZîo
(

4661 
	`ROUND8
((*
pPagî
)) +

4662 
	`ROUND8
(
pˇcheSize
) +

4663 
	`ROUND8
(
pVfs
->
szOsFûe
) +

4664 
jou∫ÆFûeSize
 * 2 +

4665 
nP©h«me
 + 1 + 
nUri
 +

4666 
nP©h«me
 + 8 + 2

4667 #i‚de‡
SQLITE_OMIT_WAL


4668 + 
nP©h«me
 + 4 + 2

4671 
	`as£π
–
	`EIGHT_BYTE_ALIGNMENT
(
	`SQLITE_INT_TO_PTR
(
jou∫ÆFûeSize
)) );

4672 if–!
pPå
 ){

4673 
	`sqlôe3DbFªe
(0, 
zP©h«me
);

4674  
SQLITE_NOMEM_BKPT
;

4676 
pPagî
 = (
Pagî
*)(
pPå
);

4677 
pPagî
->
pPCache
 = (
PCache
*)(
pPå
 +
	`ROUND8
((*pPager)));

4678 
pPagî
->
fd
 = (
sqlôe3_fûe
*)(
pPå
 +
	`ROUND8
(
pˇcheSize
));

4679 
pPagî
->
sjfd
 = (
sqlôe3_fûe
*)(
pPå
 +
	`ROUND8
(
pVfs
->
szOsFûe
));

4680 
pPagî
->
jfd
 = (
sqlôe3_fûe
*)(
pPå
 +
jou∫ÆFûeSize
);

4681 
pPagî
->
zFûíame
 = (*)(
pPå
 +
jou∫ÆFûeSize
);

4682 
	`as£π
–
	`EIGHT_BYTE_ALIGNMENT
(
pPagî
->
jfd
) );

4685 if–
zP©h«me
 ){

4686 
	`as£π
–
nP©h«me
>0 );

4687 
pPagî
->
zJou∫Æ
 = (*)(
pPå
 +
nP©h«me
 + 1 + 
nUri
);

4688 
	`mem˝y
(
pPagî
->
zFûíame
, 
zP©h«me
, 
nP©h«me
);

4689 if–
nUri
 ) 
	`mem˝y
(&
pPagî
->
zFûíame
[
nP©h«me
+1], 
zUri
,ÇUri);

4690 
	`mem˝y
(
pPagî
->
zJou∫Æ
, 
zP©h«me
, 
nP©h«me
);

4691 
	`mem˝y
(&
pPagî
->
zJou∫Æ
[
nP©h«me
], "-journal\000", 8+2);

4692 
	`sqlôe3FûeSuffix3
(
pPagî
->
zFûíame
,ÖPagî->
zJou∫Æ
);

4693 #i‚de‡
SQLITE_OMIT_WAL


4694 
pPagî
->
zWÆ
 = &pPagî->
zJou∫Æ
[
nP©h«me
+8+1];

4695 
	`mem˝y
(
pPagî
->
zWÆ
, 
zP©h«me
, 
nP©h«me
);

4696 
	`mem˝y
(&
pPagî
->
zWÆ
[
nP©h«me
], "-wal\000", 4+1);

4697 
	`sqlôe3FûeSuffix3
(
pPagî
->
zFûíame
,ÖPagî->
zWÆ
);

4699 
	`sqlôe3DbFªe
(0, 
zP©h«me
);

4701 
pPagî
->
pVfs
 =ÖVfs;

4702 
pPagî
->
vfsFœgs
 = vfsFlags;

4706 if–
zFûíame
 && zFilename[0] ){

4707 
fout
 = 0;

4708 
rc
 = 
	`sqlôe3OsO≥n
(
pVfs
, 
pPagî
->
zFûíame
,ÖPagî->
fd
, 
vfsFœgs
, &
fout
);

4709 
	`as£π
–!
memDb
 );

4710 
ªadO∆y
 = (
fout
&
SQLITE_OPEN_READONLY
);

4720 if–
rc
==
SQLITE_OK
 ){

4721 
iDc
 = 
	`sqlôe3OsDevi˚Ch¨a˘îi°ics
(
pPagî
->
fd
);

4722 if–!
ªadO∆y
 ){

4723 
	`£tSe˘‹Size
(
pPagî
);

4724 
	`as£π
(
SQLITE_DEFAULT_PAGE_SIZE
<=
SQLITE_MAX_DEFAULT_PAGE_SIZE
);

4725 if–
szPageDÊt
<
pPagî
->
£˘‹Size
 ){

4726 if–
pPagî
->
£˘‹Size
>
SQLITE_MAX_DEFAULT_PAGE_SIZE
 ){

4727 
szPageDÊt
 = 
SQLITE_MAX_DEFAULT_PAGE_SIZE
;

4729 
szPageDÊt
 = (
u32
)
pPagî
->
£˘‹Size
;

4732 #ifde‡
SQLITE_ENABLE_ATOMIC_WRITE


4734 
ii
;

4735 
	`as£π
(
SQLITE_IOCAP_ATOMIC512
==(512>>8));

4736 
	`as£π
(
SQLITE_IOCAP_ATOMIC64K
==(65536>>8));

4737 
	`as£π
(
SQLITE_MAX_DEFAULT_PAGE_SIZE
<=65536);

4738 
ii
=
szPageDÊt
; ii<=
SQLITE_MAX_DEFAULT_PAGE_SIZE
; ii=ii*2){

4739 if–
iDc
&(
SQLITE_IOCAP_ATOMIC
|(
ii
>>8)) ){

4740 
szPageDÊt
 = 
ii
;

4746 
pPagî
->
noLock
 = 
	`sqlôe3_uri_boﬁón
(
zFûíame
, "nolock", 0);

4747 if–(
iDc
 & 
SQLITE_IOCAP_IMMUTABLE
)!=0

4748 || 
	`sqlôe3_uri_boﬁón
(
zFûíame
, "immutable", 0) ){

4749 
vfsFœgs
 |
SQLITE_OPEN_READONLY
;

4750 
a˘_like_ãmp_fûe
;

4764 
a˘_like_ãmp_fûe
:

4765 
ãmpFûe
 = 1;

4766 
pPagî
->
eSèã
 = 
PAGER_READER
;

4767 
pPagî
->
eLock
 = 
EXCLUSIVE_LOCK
;

4768 
pPagî
->
noLock
 = 1;

4769 
ªadO∆y
 = (
vfsFœgs
&
SQLITE_OPEN_READONLY
);

4775 if–
rc
==
SQLITE_OK
 ){

4776 
	`as£π
–
pPagî
->
memDb
==0 );

4777 
rc
 = 
	`sqlôe3PagîSëPagesize
(
pPagî
, &
szPageDÊt
, -1);

4778 
	`ã°ˇ£
–
rc
!=
SQLITE_OK
 );

4782 if–
rc
==
SQLITE_OK
 ){

4783 
	`as£π
–
nExåa
<1000 );

4784 
nExåa
 = 
	`ROUND8
(nExtra);

4785 
rc
 = 
	`sqlôe3PˇcheO≥n
(
szPageDÊt
, 
nExåa
, !
memDb
,

4786 !
memDb
?
∑gîSåess
:0, (*)
pPagî
,ÖPagî->
pPCache
);

4791 if–
rc
!=
SQLITE_OK
 ){

4792 
	`sqlôe3OsClo£
(
pPagî
->
fd
);

4793 
	`sqlôe3PageFªe
(
pPagî
->
pTmpS∑˚
);

4794 
	`sqlôe3_‰ì
(
pPagî
);

4795  
rc
;

4798 
	`PAGERTRACE
(("OPEN %d %s\n", 
	`FILEHANDLEID
(
pPagî
->
fd
),ÖPagî->
zFûíame
));

4799 
	`IOTRACE
(("OPEN %∞%s\n", 
pPagî
,ÖPagî->
zFûíame
))

4801 
pPagî
->
u£Jou∫Æ
 = (
u8
)useJournal;

4808 
pPagî
->
mxPgno
 = 
SQLITE_MAX_PAGE_COUNT
;

4811 
pPagî
->
ãmpFûe
 = (
u8
)tempFile;

4812 
	`as£π
–
ãmpFûe
==
PAGER_LOCKINGMODE_NORMAL


4813 || 
ãmpFûe
==
PAGER_LOCKINGMODE_EXCLUSIVE
 );

4814 
	`as£π
–
PAGER_LOCKINGMODE_EXCLUSIVE
==1 );

4815 
pPagî
->
ex˛usiveMode
 = (
u8
)
ãmpFûe
;

4816 
pPagî
->
ch™geCou¡D⁄e
 =ÖPagî->
ãmpFûe
;

4817 
pPagî
->
memDb
 = (
u8
)memDb;

4818 
pPagî
->
ªadO∆y
 = (
u8
)readOnly;

4819 
	`as£π
–
u£Jou∫Æ
 || 
pPagî
->
ãmpFûe
 );

4820 
pPagî
->
noSync
 =ÖPagî->
ãmpFûe
;

4821 if–
pPagî
->
noSync
 ){

4822 
	`as£π
–
pPagî
->
fuŒSync
==0 );

4823 
	`as£π
–
pPagî
->
exåaSync
==0 );

4824 
	`as£π
–
pPagî
->
syncFœgs
==0 );

4825 
	`as£π
–
pPagî
->
wÆSyncFœgs
==0 );

4826 
	`as£π
–
pPagî
->
ck±SyncFœgs
==0 );

4828 
pPagî
->
fuŒSync
 = 1;

4829 
pPagî
->
exåaSync
 = 0;

4830 
pPagî
->
syncFœgs
 = 
SQLITE_SYNC_NORMAL
;

4831 
pPagî
->
wÆSyncFœgs
 = 
SQLITE_SYNC_NORMAL
 | 
WAL_SYNC_TRANSACTIONS
;

4832 
pPagî
->
ck±SyncFœgs
 = 
SQLITE_SYNC_NORMAL
;

4837 
pPagî
->
nExåa
 = (
u16
)nExtra;

4838 
pPagî
->
jou∫ÆSizeLimô
 = 
SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT
;

4839 
	`as£π
–
	`isO≥n
(
pPagî
->
fd
Ë|| 
ãmpFûe
 );

4840 
	`£tSe˘‹Size
(
pPagî
);

4841 if–!
u£Jou∫Æ
 ){

4842 
pPagî
->
jou∫ÆMode
 = 
PAGER_JOURNALMODE_OFF
;

4843 }if–
memDb
 ){

4844 
pPagî
->
jou∫ÆMode
 = 
PAGER_JOURNALMODE_MEMORY
;

4848 
pPagî
->
xReöôî
 = 
xReöô
;

4852 *
µPagî
 = 
pPagî
;

4853  
SQLITE_OK
;

4854 
	}
}

4862 
	$d©aba£IsUnmoved
(
Pagî
 *
pPagî
){

4863 
bHasMoved
 = 0;

4864 
rc
;

4866 if–
pPagî
->
ãmpFûe
 )  
SQLITE_OK
;

4867 if–
pPagî
->
dbSize
==0 )  
SQLITE_OK
;

4868 
	`as£π
–
pPagî
->
zFûíame
 &&ÖPager->zFilename[0] );

4869 
rc
 = 
	`sqlôe3OsFûeC⁄åﬁ
(
pPagî
->
fd
, 
SQLITE_FCNTL_HAS_MOVED
, &
bHasMoved
);

4870 if–
rc
==
SQLITE_NOTFOUND
 ){

4874 
rc
 = 
SQLITE_OK
;

4875 }if–
rc
==
SQLITE_OK
 && 
bHasMoved
 ){

4876 
rc
 = 
SQLITE_READONLY_DBMOVED
;

4878  
rc
;

4879 
	}
}

4913 
	$hasHŸJou∫Æ
(
Pagî
 *
pPagî
, *
pExi°s
){

4914 
sqlôe3_vfs
 * c⁄° 
pVfs
 = 
pPagî
->pVfs;

4915 
rc
 = 
SQLITE_OK
;

4916 
exi°s
 = 1;

4917 
j∫lO≥n
 = !!
	`isO≥n
(
pPagî
->
jfd
);

4919 
	`as£π
–
pPagî
->
u£Jou∫Æ
 );

4920 
	`as£π
–
	`isO≥n
(
pPagî
->
fd
) );

4921 
	`as£π
–
pPagî
->
eSèã
==
PAGER_OPEN
 );

4923 
	`as£π
–
j∫lO≥n
==0 || ( 
	`sqlôe3OsDevi˚Ch¨a˘îi°ics
(
pPagî
->
jfd
) &

4924 
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN


4927 *
pExi°s
 = 0;

4928 if–!
j∫lO≥n
 ){

4929 
rc
 = 
	`sqlôe3OsAc˚ss
(
pVfs
, 
pPagî
->
zJou∫Æ
, 
SQLITE_ACCESS_EXISTS
, &
exi°s
);

4931 if–
rc
==
SQLITE_OK
 && 
exi°s
 ){

4932 
locked
 = 0;

4942 
rc
 = 
	`sqlôe3OsCheckRe£rvedLock
(
pPagî
->
fd
, &
locked
);

4943 if–
rc
==
SQLITE_OK
 && !
locked
 ){

4944 
Pgno
 
nPage
;

4946 
	`as£π
–
pPagî
->
ãmpFûe
==0 );

4947 
rc
 = 
	`∑gîPagecou¡
(
pPagî
, &
nPage
);

4948 if–
rc
==
SQLITE_OK
 ){

4957 if–
nPage
==0 && !
j∫lO≥n
 ){

4958 
	`sqlôe3BegöBíignMÆloc
();

4959 if–
	`∑gîLockDb
(
pPagî
, 
RESERVED_LOCK
)==
SQLITE_OK
 ){

4960 
	`sqlôe3OsDñëe
(
pVfs
, 
pPagî
->
zJou∫Æ
, 0);

4961 if–!
pPagî
->
ex˛usiveMode
 ) 
	`∑gîU∆ockDb
’Pagî, 
SHARED_LOCK
);

4963 
	`sqlôe3EndBíignMÆloc
();

4971 if–!
j∫lO≥n
 ){

4972 
f
 = 
SQLITE_OPEN_READONLY
|
SQLITE_OPEN_MAIN_JOURNAL
;

4973 
rc
 = 
	`sqlôe3OsO≥n
(
pVfs
, 
pPagî
->
zJou∫Æ
,ÖPagî->
jfd
, 
f
, &f);

4975 if–
rc
==
SQLITE_OK
 ){

4976 
u8
 
fú°
 = 0;

4977 
rc
 = 
	`sqlôe3OsRód
(
pPagî
->
jfd
, (*)&
fú°
, 1, 0);

4978 if–
rc
==
SQLITE_IOERR_SHORT_READ
 ){

4979 
rc
 = 
SQLITE_OK
;

4981 if–!
j∫lO≥n
 ){

4982 
	`sqlôe3OsClo£
(
pPagî
->
jfd
);

4984 *
pExi°s
 = (
fú°
!=0);

4985 }if–
rc
==
SQLITE_CANTOPEN
 ){

4995 *
pExi°s
 = 1;

4996 
rc
 = 
SQLITE_OK
;

5003  
rc
;

5004 
	}
}

5033 
	$sqlôe3PagîSh¨edLock
(
Pagî
 *
pPagî
){

5034 
rc
 = 
SQLITE_OK
;

5040 
	`as£π
–
	`sqlôe3PˇcheRefCou¡
(
pPagî
->
pPCache
)==0 );

5041 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

5042 
	`as£π
–
pPagî
->
eSèã
==
PAGER_OPEN
 ||ÖPagî->eSèã==
PAGER_READER
 );

5043 
	`as£π
–
pPagî
->
îrCode
==
SQLITE_OK
 );

5045 if–!
	`∑gîU£WÆ
(
pPagî
Ë&&ÖPagî->
eSèã
==
PAGER_OPEN
 ){

5046 
bHŸJou∫Æ
 = 1;

5048 
	`as£π
–!
MEMDB
 );

5049 
	`as£π
–
pPagî
->
ãmpFûe
==0 ||ÖPagî->
eLock
==
EXCLUSIVE_LOCK
 );

5051 
rc
 = 
	`∑gî_waô_⁄_lock
(
pPagî
, 
SHARED_LOCK
);

5052 if–
rc
!=
SQLITE_OK
 ){

5053 
	`as£π
–
pPagî
->
eLock
==
NO_LOCK
 ||ÖPagî->eLock==
UNKNOWN_LOCK
 );

5054 
Áûed
;

5060 if–
pPagî
->
eLock
<=
SHARED_LOCK
 ){

5061 
rc
 = 
	`hasHŸJou∫Æ
(
pPagî
, &
bHŸJou∫Æ
);

5063 if–
rc
!=
SQLITE_OK
 ){

5064 
Áûed
;

5066 if–
bHŸJou∫Æ
 ){

5067 if–
pPagî
->
ªadO∆y
 ){

5068 
rc
 = 
SQLITE_READONLY_ROLLBACK
;

5069 
Áûed
;

5087 
rc
 = 
	`∑gîLockDb
(
pPagî
, 
EXCLUSIVE_LOCK
);

5088 if–
rc
!=
SQLITE_OK
 ){

5089 
Áûed
;

5105 if–!
	`isO≥n
(
pPagî
->
jfd
) ){

5106 
sqlôe3_vfs
 * c⁄° 
pVfs
 = 
pPagî
->pVfs;

5107 
bExi°s
;

5108 
rc
 = 
	`sqlôe3OsAc˚ss
(

5109 
pVfs
, 
pPagî
->
zJou∫Æ
, 
SQLITE_ACCESS_EXISTS
, &
bExi°s
);

5110 if–
rc
==
SQLITE_OK
 && 
bExi°s
 ){

5111 
fout
 = 0;

5112 
f
 = 
SQLITE_OPEN_READWRITE
|
SQLITE_OPEN_MAIN_JOURNAL
;

5113 
	`as£π
–!
pPagî
->
ãmpFûe
 );

5114 
rc
 = 
	`sqlôe3OsO≥n
(
pVfs
, 
pPagî
->
zJou∫Æ
,ÖPagî->
jfd
, 
f
, &
fout
);

5115 
	`as£π
–
rc
!=
SQLITE_OK
 || 
	`isO≥n
(
pPagî
->
jfd
) );

5116 if–
rc
==
SQLITE_OK
 && 
fout
&
SQLITE_OPEN_READONLY
 ){

5117 
rc
 = 
SQLITE_CANTOPEN_BKPT
;

5118 
	`sqlôe3OsClo£
(
pPagî
->
jfd
);

5131 if–
	`isO≥n
(
pPagî
->
jfd
) ){

5132 
	`as£π
–
rc
==
SQLITE_OK
 );

5133 
rc
 = 
	`∑gîSyncHŸJou∫Æ
(
pPagî
);

5134 if–
rc
==
SQLITE_OK
 ){

5135 
rc
 = 
	`∑gî_∂ayback
(
pPagî
, !pPagî->
ãmpFûe
);

5136 
pPagî
->
eSèã
 = 
PAGER_OPEN
;

5138 }if–!
pPagî
->
ex˛usiveMode
 ){

5139 
	`∑gîU∆ockDb
(
pPagî
, 
SHARED_LOCK
);

5142 if–
rc
!=
SQLITE_OK
 ){

5159 
	`∑gî_îr‹
(
pPagî
, 
rc
);

5160 
Áûed
;

5163 
	`as£π
–
pPagî
->
eSèã
==
PAGER_OPEN
 );

5164 
	`as£π
–(
pPagî
->
eLock
==
SHARED_LOCK
)

5165 || (
pPagî
->
ex˛usiveMode
 &&ÖPagî->
eLock
>
SHARED_LOCK
)

5169 if–!
pPagî
->
ãmpFûe
 &&ÖPagî->
hasHñdSh¨edLock
 ){

5186 
Pgno
 
nPage
 = 0;

5187 
dbFûeVîs
[(
pPagî
->dbFileVers)];

5189 
rc
 = 
	`∑gîPagecou¡
(
pPagî
, &
nPage
);

5190 if–
rc
 ) 
Áûed
;

5192 if–
nPage
>0 ){

5193 
	`IOTRACE
(("CKVERS %∞%d\n", 
pPagî
, (
dbFûeVîs
)));

5194 
rc
 = 
	`sqlôe3OsRód
(
pPagî
->
fd
, &
dbFûeVîs
, (dbFileVers), 24);

5195 if–
rc
!=
SQLITE_OK
 &&Ñc!=
SQLITE_IOERR_SHORT_READ
 ){

5196 
Áûed
;

5199 
	`mem£t
(
dbFûeVîs
, 0, (dbFileVers));

5202 if–
	`memcmp
(
pPagî
->
dbFûeVîs
, dbFileVers, (dbFileVers))!=0 ){

5203 
	`∑gî_ª£t
(
pPagî
);

5211 if–
	`USEFETCH
(
pPagî
) ){

5212 
	`sqlôe3OsUn„tch
(
pPagî
->
fd
, 0, 0);

5220 
rc
 = 
	`∑gîO≥nWÆIfPª£¡
(
pPagî
);

5221 #i‚de‡
SQLITE_OMIT_WAL


5222 
	`as£π
–
pPagî
->
pWÆ
==0 || 
rc
==
SQLITE_OK
 );

5226 if–
	`∑gîU£WÆ
(
pPagî
) ){

5227 
	`as£π
–
rc
==
SQLITE_OK
 );

5228 
rc
 = 
	`∑gîBegöRódTønß˘i⁄
(
pPagî
);

5231 if–
pPagî
->
ãmpFûe
==0 &&ÖPagî->
eSèã
==
PAGER_OPEN
 && 
rc
==
SQLITE_OK
 ){

5232 
rc
 = 
	`∑gîPagecou¡
(
pPagî
, &pPagî->
dbSize
);

5235 
Áûed
:

5236 if–
rc
!=
SQLITE_OK
 ){

5237 
	`as£π
–!
MEMDB
 );

5238 
	`∑gî_u∆ock
(
pPagî
);

5239 
	`as£π
–
pPagî
->
eSèã
==
PAGER_OPEN
 );

5241 
pPagî
->
eSèã
 = 
PAGER_READER
;

5242 
pPagî
->
hasHñdSh¨edLock
 = 1;

5244  
rc
;

5245 
	}
}

5255 
	$∑gîU∆ockIfUnu£d
(
Pagî
 *
pPagî
){

5256 if–
pPagî
->
nMm≠Out
==0 && (
	`sqlôe3PˇcheRefCou¡
’Pagî->
pPCache
)==0) ){

5257 
	`∑gîU∆ockAndRﬁlback
(
pPagî
);

5259 
	}
}

5311 
	$sqlôe3PagîGë
(

5312 
Pagî
 *
pPagî
,

5313 
Pgno
 
pgno
,

5314 
DbPage
 **
µPage
,

5315 
Êags


5317 
rc
 = 
SQLITE_OK
;

5318 
PgHdr
 *
pPg
 = 0;

5319 
u32
 
iFøme
 = 0;

5320 c⁄° 
noC⁄ã¡
 = (
Êags
 & 
PAGER_GET_NOCONTENT
);

5326 c⁄° 
bMm≠Ok
 = (
pgno
>1 && 
	`USEFETCH
(
pPagî
)

5327 && (
pPagî
->
eSèã
==
PAGER_READER
 || (
Êags
 & 
PAGER_GET_READONLY
))

5328 #ifde‡
SQLITE_HAS_CODEC


5329 && 
pPagî
->
xCodec
==0

5337 if–
pgno
<=1 &&Ögno==0 ){

5338  
SQLITE_CORRUPT_BKPT
;

5340 
	`as£π
–
pPagî
->
eSèã
>=
PAGER_READER
 );

5341 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

5342 
	`as£π
–
noC⁄ã¡
==0 || 
bMm≠Ok
==0 );

5344 
	`as£π
–
pPagî
->
hasHñdSh¨edLock
==1 );

5348 if–
pPagî
->
îrCode
!=
SQLITE_OK
 ){

5349 
rc
 = 
pPagî
->
îrCode
;

5351 if–
bMm≠Ok
 && 
	`∑gîU£WÆ
(
pPagî
) ){

5352 
rc
 = 
	`sqlôe3WÆFödFøme
(
pPagî
->
pWÆ
, 
pgno
, &
iFøme
);

5353 if–
rc
!=
SQLITE_OK
 ) 
∑gî_acquúe_îr
;

5356 if–
bMm≠Ok
 && 
iFøme
==0 ){

5357 *
pD©a
 = 0;

5359 
rc
 = 
	`sqlôe3OsFëch
(
pPagî
->
fd
,

5360 (
i64
)(
pgno
-1Ë* 
pPagî
->
∑geSize
,ÖPagî->∑geSize, &
pD©a


5363 if–
rc
==
SQLITE_OK
 && 
pD©a
 ){

5364 if–
pPagî
->
eSèã
>
PAGER_READER
 ||ÖPagî->
ãmpFûe
 ){

5365 
pPg
 = 
	`sqlôe3PagîLookup
(
pPagî
, 
pgno
);

5367 if–
pPg
==0 ){

5368 
rc
 = 
	`∑gîAcquúeM≠Page
(
pPagî
, 
pgno
, 
pD©a
, &
pPg
);

5370 
	`sqlôe3OsUn„tch
(
pPagî
->
fd
, (
i64
)(
pgno
-1)*pPagî->
∑geSize
, 
pD©a
);

5372 if–
pPg
 ){

5373 
	`as£π
–
rc
==
SQLITE_OK
 );

5374 *
µPage
 = 
pPg
;

5375  
SQLITE_OK
;

5378 if–
rc
!=
SQLITE_OK
 ){

5379 
∑gî_acquúe_îr
;

5384 
sqlôe3_pˇche_∑ge
 *
pBa£
;

5385 
pBa£
 = 
	`sqlôe3PˇcheFëch
(
pPagî
->
pPCache
, 
pgno
, 3);

5386 if–
pBa£
==0 ){

5387 
rc
 = 
	`sqlôe3PˇcheFëchSåess
(
pPagî
->
pPCache
, 
pgno
, &
pBa£
);

5388 if–
rc
!=
SQLITE_OK
 ) 
∑gî_acquúe_îr
;

5389 if–
pBa£
==0 ){

5390 
pPg
 = *
µPage
 = 0;

5391 
rc
 = 
SQLITE_NOMEM_BKPT
;

5392 
∑gî_acquúe_îr
;

5395 
pPg
 = *
µPage
 = 
	`sqlôe3PˇcheFëchFöish
(
pPagî
->
pPCache
, 
pgno
, 
pBa£
);

5396 
	`as£π
–
pPg
!=0 );

5400 if–
rc
!=
SQLITE_OK
 ){

5404 
pPg
 = 0;

5405 
∑gî_acquúe_îr
;

5407 
	`as£π
–
pPg
==(*
µPage
) );

5408 
	`as£π
–
pPg
->
pgno
==pgno );

5409 
	`as£π
–
pPg
->
pPagî
==pPager ||ÖPg->pPager==0 );

5411 if–
pPg
->
pPagî
 && !
noC⁄ã¡
 ){

5414 
	`as£π
–
pgno
<=
PAGER_MAX_PGNO
 &&Ögno!=
	`PAGER_MJ_PGNO
(
pPagî
) );

5415 
pPagî
->
aSèt
[
PAGER_STAT_HIT
]++;

5416  
SQLITE_OK
;

5422 
pPg
->
pPagî
 =ÖPager;

5426 if–
pgno
>
PAGER_MAX_PGNO
 ||Ögno==
	`PAGER_MJ_PGNO
(
pPagî
) ){

5427 
rc
 = 
SQLITE_CORRUPT_BKPT
;

5428 
∑gî_acquúe_îr
;

5431 
	`as£π
–!
	`isO≥n
(
pPagî
->
fd
Ë|| !
MEMDB
 );

5432 if–!
	`isO≥n
(
pPagî
->
fd
Ë||ÖPagî->
dbSize
<
pgno
 || 
noC⁄ã¡
 ){

5433 if–
pgno
>
pPagî
->
mxPgno
 ){

5434 
rc
 = 
SQLITE_FULL
;

5435 
∑gî_acquúe_îr
;

5437 if–
noC⁄ã¡
 ){

5444 
	`sqlôe3BegöBíignMÆloc
();

5445 if–
pgno
<=
pPagî
->
dbOrigSize
 ){

5446 
	`TESTONLY
–
rc
 = ) 
	`sqlôe3BôvecSë
(
pPagî
->
pInJou∫Æ
, 
pgno
);

5447 
	`ã°ˇ£
–
rc
==
SQLITE_NOMEM
 );

5449 
	`TESTONLY
–
rc
 = ) 
	`addToSavïoötBôvecs
(
pPagî
, 
pgno
);

5450 
	`ã°ˇ£
–
rc
==
SQLITE_NOMEM
 );

5451 
	`sqlôe3EndBíignMÆloc
();

5453 
	`mem£t
(
pPg
->
pD©a
, 0, 
pPagî
->
∑geSize
);

5454 
	`IOTRACE
(("ZERO %∞%d\n", 
pPagî
, 
pgno
));

5456 if–
	`∑gîU£WÆ
(
pPagî
Ë&& 
bMm≠Ok
==0 ){

5457 
rc
 = 
	`sqlôe3WÆFödFøme
(
pPagî
->
pWÆ
, 
pgno
, &
iFøme
);

5458 if–
rc
!=
SQLITE_OK
 ) 
∑gî_acquúe_îr
;

5460 
	`as£π
–
pPg
->
pPagî
==pPager );

5461 
pPagî
->
aSèt
[
PAGER_STAT_MISS
]++;

5462 
rc
 = 
	`ªadDbPage
(
pPg
, 
iFøme
);

5463 if–
rc
!=
SQLITE_OK
 ){

5464 
∑gî_acquúe_îr
;

5467 
	`∑gî_£t_∑gehash
(
pPg
);

5470  
SQLITE_OK
;

5472 
∑gî_acquúe_îr
:

5473 
	`as£π
–
rc
!=
SQLITE_OK
 );

5474 if–
pPg
 ){

5475 
	`sqlôe3PˇcheDr›
(
pPg
);

5477 
	`∑gîU∆ockIfUnu£d
(
pPagî
);

5479 *
µPage
 = 0;

5480  
rc
;

5481 
	}
}

5494 
DbPage
 *
	$sqlôe3PagîLookup
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
){

5495 
sqlôe3_pˇche_∑ge
 *
pPage
;

5496 
	`as£π
–
pPagî
!=0 );

5497 
	`as£π
–
pgno
!=0 );

5498 
	`as£π
–
pPagî
->
pPCache
!=0 );

5499 
pPage
 = 
	`sqlôe3PˇcheFëch
(
pPagî
->
pPCache
, 
pgno
, 0);

5500 
	`as£π
–
pPage
==0 || 
pPagî
->
hasHñdSh¨edLock
 );

5501 if–
pPage
==0 )  0;

5502  
	`sqlôe3PˇcheFëchFöish
(
pPagî
->
pPCache
, 
pgno
, 
pPage
);

5503 
	}
}

5513 
	$sqlôe3PagîUƒefNŸNuŒ
(
DbPage
 *
pPg
){

5514 
Pagî
 *
pPagî
;

5515 
	`as£π
–
pPg
!=0 );

5516 
pPagî
 = 
pPg
->pPager;

5517 if–
pPg
->
Êags
 & 
PGHDR_MMAP
 ){

5518 
	`∑gîRñó£M≠Page
(
pPg
);

5520 
	`sqlôe3PˇcheRñó£
(
pPg
);

5522 
	`∑gîU∆ockIfUnu£d
(
pPagî
);

5523 
	}
}

5524 
	$sqlôe3PagîUƒef
(
DbPage
 *
pPg
){

5525 if–
pPg
 ) 
	`sqlôe3PagîUƒefNŸNuŒ
(pPg);

5526 
	}
}

5550 
	$∑gî_›í_jou∫Æ
(
Pagî
 *
pPagî
){

5551 
rc
 = 
SQLITE_OK
;

5552 
sqlôe3_vfs
 * c⁄° 
pVfs
 = 
pPagî
->pVfs;

5554 
	`as£π
–
pPagî
->
eSèã
==
PAGER_WRITER_LOCKED
 );

5555 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

5556 
	`as£π
–
pPagî
->
pInJou∫Æ
==0 );

5561 if–
	`NEVER
(
pPagî
->
îrCode
) ) ÖPager->errCode;

5563 if–!
	`∑gîU£WÆ
(
pPagî
Ë&&ÖPagî->
jou∫ÆMode
!=
PAGER_JOURNALMODE_OFF
 ){

5564 
pPagî
->
pInJou∫Æ
 = 
	`sqlôe3BôvecCª©e
’Pagî->
dbSize
);

5565 if–
pPagî
->
pInJou∫Æ
==0 ){

5566  
SQLITE_NOMEM_BKPT
;

5570 if–!
	`isO≥n
(
pPagî
->
jfd
) ){

5571 if–
pPagî
->
jou∫ÆMode
==
PAGER_JOURNALMODE_MEMORY
 ){

5572 
	`sqlôe3MemJou∫ÆO≥n
(
pPagî
->
jfd
);

5574 
Êags
 = 
SQLITE_OPEN_READWRITE
|
SQLITE_OPEN_CREATE
;

5575 
nSpûl
;

5577 if–
pPagî
->
ãmpFûe
 ){

5578 
Êags
 |(
SQLITE_OPEN_DELETEONCLOSE
|
SQLITE_OPEN_TEMP_JOURNAL
);

5579 
nSpûl
 = 
sqlôe3C⁄fig
.
nStmtSpûl
;

5581 
Êags
 |
SQLITE_OPEN_MAIN_JOURNAL
;

5582 
nSpûl
 = 
	`j∫lBuf„rSize
(
pPagî
);

5587 
rc
 = 
	`d©aba£IsUnmoved
(
pPagî
);

5588 if–
rc
==
SQLITE_OK
 ){

5589 
rc
 = 
	`sqlôe3Jou∫ÆO≥n
 (

5590 
pVfs
, 
pPagî
->
zJou∫Æ
,ÖPagî->
jfd
, 
Êags
, 
nSpûl


5594 
	`as£π
–
rc
!=
SQLITE_OK
 || 
	`isO≥n
(
pPagî
->
jfd
) );

5601 if–
rc
==
SQLITE_OK
 ){

5603 
pPagî
->
nRec
 = 0;

5604 
pPagî
->
jou∫ÆOff
 = 0;

5605 
pPagî
->
£tMa°î
 = 0;

5606 
pPagî
->
jou∫ÆHdr
 = 0;

5607 
rc
 = 
	`wrôeJou∫ÆHdr
(
pPagî
);

5611 if–
rc
!=
SQLITE_OK
 ){

5612 
	`sqlôe3BôvecDe°roy
(
pPagî
->
pInJou∫Æ
);

5613 
pPagî
->
pInJou∫Æ
 = 0;

5615 
	`as£π
–
pPagî
->
eSèã
==
PAGER_WRITER_LOCKED
 );

5616 
pPagî
->
eSèã
 = 
PAGER_WRITER_CACHEMOD
;

5619  
rc
;

5620 
	}
}

5639 
	$sqlôe3PagîBegö
(
Pagî
 *
pPagî
, 
exFœg
, 
subjInMem‹y
){

5640 
rc
 = 
SQLITE_OK
;

5642 if–
pPagî
->
îrCode
 ) ÖPager->errCode;

5643 
	`as£π
–
pPagî
->
eSèã
>=
PAGER_READER
 &&ÖPagî->eSèã<
PAGER_ERROR
 );

5644 
pPagî
->
subjInMem‹y
 = (
u8
)subjInMemory;

5646 if–
	`ALWAYS
(
pPagî
->
eSèã
==
PAGER_READER
) ){

5647 
	`as£π
–
pPagî
->
pInJou∫Æ
==0 );

5649 if–
	`∑gîU£WÆ
(
pPagî
) ){

5653 if–
pPagî
->
ex˛usiveMode
 && 
	`sqlôe3WÆEx˛usiveMode
’Pagî->
pWÆ
, -1) ){

5654 
rc
 = 
	`∑gîLockDb
(
pPagî
, 
EXCLUSIVE_LOCK
);

5655 if–
rc
!=
SQLITE_OK
 ){

5656  
rc
;

5658 ()
	`sqlôe3WÆEx˛usiveMode
(
pPagî
->
pWÆ
, 1);

5666 
rc
 = 
	`sqlôe3WÆBegöWrôeTønß˘i⁄
(
pPagî
->
pWÆ
);

5673 
rc
 = 
	`∑gîLockDb
(
pPagî
, 
RESERVED_LOCK
);

5674 if–
rc
==
SQLITE_OK
 && 
exFœg
 ){

5675 
rc
 = 
	`∑gî_waô_⁄_lock
(
pPagî
, 
EXCLUSIVE_LOCK
);

5679 if–
rc
==
SQLITE_OK
 ){

5689 
pPagî
->
eSèã
 = 
PAGER_WRITER_LOCKED
;

5690 
pPagî
->
dbHötSize
 =ÖPagî->
dbSize
;

5691 
pPagî
->
dbFûeSize
 =ÖPagî->
dbSize
;

5692 
pPagî
->
dbOrigSize
 =ÖPagî->
dbSize
;

5693 
pPagî
->
jou∫ÆOff
 = 0;

5696 
	`as£π
–
rc
==
SQLITE_OK
 || 
pPagî
->
eSèã
==
PAGER_READER
 );

5697 
	`as£π
–
rc
!=
SQLITE_OK
 || 
pPagî
->
eSèã
==
PAGER_WRITER_LOCKED
 );

5698 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

5701 
	`PAGERTRACE
(("TRANSACTION %d\n", 
	`PAGERID
(
pPagî
)));

5702  
rc
;

5703 
	}
}

5708 
SQLITE_NOINLINE
 
	$∑gîAddPageToRﬁlbackJou∫Æ
(
PgHdr
 *
pPg
){

5709 
Pagî
 *
pPagî
 = 
pPg
->pPager;

5710 
rc
;

5711 
u32
 
cksum
;

5712 *
pD©a2
;

5713 
i64
 
iOff
 = 
pPagî
->
jou∫ÆOff
;

5718 
	`as£π
–
pPg
->
pgno
!=
	`PAGER_MJ_PGNO
(
pPagî
) );

5720 
	`as£π
–
pPagî
->
jou∫ÆHdr
<ıPagî->
jou∫ÆOff
 );

5721 
	`CODEC2
(
pPagî
, 
pPg
->
pD©a
,ÖPg->
pgno
, 7,  
SQLITE_NOMEM_BKPT
, 
pD©a2
);

5722 
cksum
 = 
	`∑gî_cksum
(
pPagî
, (
u8
*)
pD©a2
);

5731 
pPg
->
Êags
 |
PGHDR_NEED_SYNC
;

5733 
rc
 = 
	`wrôe32bôs
(
pPagî
->
jfd
, 
iOff
, 
pPg
->
pgno
);

5734 if–
rc
!=
SQLITE_OK
 ) Ñc;

5735 
rc
 = 
	`sqlôe3OsWrôe
(
pPagî
->
jfd
, 
pD©a2
,ÖPagî->
∑geSize
, 
iOff
+4);

5736 if–
rc
!=
SQLITE_OK
 ) Ñc;

5737 
rc
 = 
	`wrôe32bôs
(
pPagî
->
jfd
, 
iOff
+pPagî->
∑geSize
+4, 
cksum
);

5738 if–
rc
!=
SQLITE_OK
 ) Ñc;

5740 
	`IOTRACE
(("JOUT %∞%d %Œd %d\n", 
pPagî
, 
pPg
->
pgno
,

5741 
pPagî
->
jou∫ÆOff
,ÖPagî->
∑geSize
));

5742 
	`PAGER_INCR
(
sqlôe3_∑gî_wrôej_cou¡
);

5743 
	`PAGERTRACE
(("JOURNAL %dÖage %dÇeedSync=%d hash(%08x)\n",

5744 
	`PAGERID
(
pPagî
), 
pPg
->
pgno
,

5745 ((
pPg
->
Êags
&
PGHDR_NEED_SYNC
)?1:0), 
	`∑gî_∑gehash
(pPg)));

5747 
pPagî
->
jou∫ÆOff
 +8 +ÖPagî->
∑geSize
;

5748 
pPagî
->
nRec
++;

5749 
	`as£π
–
pPagî
->
pInJou∫Æ
!=0 );

5750 
rc
 = 
	`sqlôe3BôvecSë
(
pPagî
->
pInJou∫Æ
, 
pPg
->
pgno
);

5751 
	`ã°ˇ£
–
rc
==
SQLITE_NOMEM
 );

5752 
	`as£π
–
rc
==
SQLITE_OK
 ||Ñc==
SQLITE_NOMEM
 );

5753 
rc
 |
	`addToSavïoötBôvecs
(
pPagî
, 
pPg
->
pgno
);

5754 
	`as£π
–
rc
==
SQLITE_OK
 ||Ñc==
SQLITE_NOMEM
 );

5755  
rc
;

5756 
	}
}

5765 
	$∑gî_wrôe
(
PgHdr
 *
pPg
){

5766 
Pagî
 *
pPagî
 = 
pPg
->pPager;

5767 
rc
 = 
SQLITE_OK
;

5773 
	`as£π
–
pPagî
->
eSèã
==
PAGER_WRITER_LOCKED


5774 || 
pPagî
->
eSèã
==
PAGER_WRITER_CACHEMOD


5775 || 
pPagî
->
eSèã
==
PAGER_WRITER_DBMOD


5777 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

5778 
	`as£π
–
pPagî
->
îrCode
==0 );

5779 
	`as£π
–
pPagî
->
ªadO∆y
==0 );

5780 
	`CHECK_PAGE
(
pPg
);

5791 if–
pPagî
->
eSèã
==
PAGER_WRITER_LOCKED
 ){

5792 
rc
 = 
	`∑gî_›í_jou∫Æ
(
pPagî
);

5793 if–
rc
!=
SQLITE_OK
 ) Ñc;

5795 
	`as£π
–
pPagî
->
eSèã
>=
PAGER_WRITER_CACHEMOD
 );

5796 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

5799 
	`sqlôe3PˇcheMakeDúty
(
pPg
);

5805 
	`as£π
–(
pPagî
->
pInJou∫Æ
!=0Ë=
	`isO≥n
’Pagî->
jfd
) );

5806 if–
pPagî
->
pInJou∫Æ
!=0

5807 && 
	`sqlôe3BôvecTe°NŸNuŒ
(
pPagî
->
pInJou∫Æ
, 
pPg
->
pgno
)==0

5809 
	`as£π
–
	`∑gîU£WÆ
(
pPagî
)==0 );

5810 if–
pPg
->
pgno
<=
pPagî
->
dbOrigSize
 ){

5811 
rc
 = 
	`∑gîAddPageToRﬁlbackJou∫Æ
(
pPg
);

5812 if–
rc
!=
SQLITE_OK
 ){

5813  
rc
;

5816 if–
pPagî
->
eSèã
!=
PAGER_WRITER_DBMOD
 ){

5817 
pPg
->
Êags
 |
PGHDR_NEED_SYNC
;

5819 
	`PAGERTRACE
(("APPEND %dÖage %dÇeedSync=%d\n",

5820 
	`PAGERID
(
pPagî
), 
pPg
->
pgno
,

5821 ((
pPg
->
Êags
&
PGHDR_NEED_SYNC
)?1:0)));

5830 
pPg
->
Êags
 |
PGHDR_WRITEABLE
;

5835 if–
pPagî
->
nSavïoöt
>0 ){

5836 
rc
 = 
	`subjou∫ÆPageIfRequúed
(
pPg
);

5840 if–
pPagî
->
dbSize
<
pPg
->
pgno
 ){

5841 
pPagî
->
dbSize
 = 
pPg
->
pgno
;

5843  
rc
;

5844 
	}
}

5857 
SQLITE_NOINLINE
 
	$∑gîWrôeL¨geSe˘‹
(
PgHdr
 *
pPg
){

5858 
rc
 = 
SQLITE_OK
;

5859 
Pgno
 
nPageCou¡
;

5860 
Pgno
 
pg1
;

5861 
nPage
 = 0;

5862 
ii
;

5863 
√edSync
 = 0;

5864 
Pagî
 *
pPagî
 = 
pPg
->pPager;

5865 
Pgno
 
nPagePîSe˘‹
 = (
pPagî
->
£˘‹Size
/pPagî->
∑geSize
);

5871 
	`as£π
–!
MEMDB
 );

5872 
	`as£π
–(
pPagî
->
doNŸSpûl
 & 
SPILLFLAG_NOSYNC
)==0 );

5873 
pPagî
->
doNŸSpûl
 |
SPILLFLAG_NOSYNC
;

5879 
pg1
 = ((
pPg
->
pgno
-1Ë& ~(
nPagePîSe˘‹
-1)) + 1;

5881 
nPageCou¡
 = 
pPagî
->
dbSize
;

5882 if–
pPg
->
pgno
>
nPageCou¡
 ){

5883 
nPage
 = (
pPg
->
pgno
 - 
pg1
)+1;

5884 }if–(
pg1
+
nPagePîSe˘‹
-1)>
nPageCou¡
 ){

5885 
nPage
 = 
nPageCou¡
+1-
pg1
;

5887 
nPage
 = 
nPagePîSe˘‹
;

5889 
	`as£π
(
nPage
>0);

5890 
	`as£π
(
pg1
<=
pPg
->
pgno
);

5891 
	`as£π
((
pg1
+
nPage
)>
pPg
->
pgno
);

5893 
ii
=0; ii<
nPage
 && 
rc
==
SQLITE_OK
; ii++){

5894 
Pgno
 
pg
 = 
pg1
+
ii
;

5895 
PgHdr
 *
pPage
;

5896 if–
pg
==
pPg
->
pgno
 || !
	`sqlôe3BôvecTe°
(
pPagî
->
pInJou∫Æ
,Ög) ){

5897 if–
pg
!=
	`PAGER_MJ_PGNO
(
pPagî
) ){

5898 
rc
 = 
	`sqlôe3PagîGë
(
pPagî
, 
pg
, &
pPage
, 0);

5899 if–
rc
==
SQLITE_OK
 ){

5900 
rc
 = 
	`∑gî_wrôe
(
pPage
);

5901 if–
pPage
->
Êags
&
PGHDR_NEED_SYNC
 ){

5902 
√edSync
 = 1;

5904 
	`sqlôe3PagîUƒefNŸNuŒ
(
pPage
);

5907 }if–(
pPage
 = 
	`sqlôe3PagîLookup
(
pPagî
, 
pg
))!=0 ){

5908 if–
pPage
->
Êags
&
PGHDR_NEED_SYNC
 ){

5909 
√edSync
 = 1;

5911 
	`sqlôe3PagîUƒefNŸNuŒ
(
pPage
);

5921 if–
rc
==
SQLITE_OK
 && 
√edSync
 ){

5922 
	`as£π
–!
MEMDB
 );

5923 
ii
=0; ii<
nPage
; ii++){

5924 
PgHdr
 *
pPage
 = 
	`sqlôe3PagîLookup
(
pPagî
, 
pg1
+
ii
);

5925 if–
pPage
 ){

5926 
pPage
->
Êags
 |
PGHDR_NEED_SYNC
;

5927 
	`sqlôe3PagîUƒefNŸNuŒ
(
pPage
);

5932 
	`as£π
–(
pPagî
->
doNŸSpûl
 & 
SPILLFLAG_NOSYNC
)!=0 );

5933 
pPagî
->
doNŸSpûl
 &~
SPILLFLAG_NOSYNC
;

5934  
rc
;

5935 
	}
}

5951 
	$sqlôe3PagîWrôe
(
PgHdr
 *
pPg
){

5952 
Pagî
 *
pPagî
 = 
pPg
->pPager;

5953 
	`as£π
–(
pPg
->
Êags
 & 
PGHDR_MMAP
)==0 );

5954 
	`as£π
–
pPagî
->
eSèã
>=
PAGER_WRITER_LOCKED
 );

5955 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

5956 if–
pPagî
->
îrCode
 ){

5957  
pPagî
->
îrCode
;

5958 }if–(
pPg
->
Êags
 & 
PGHDR_WRITEABLE
)!=0 && 
pPagî
->
dbSize
>ıPg->
pgno
 ){

5959 if–
pPagî
->
nSavïoöt
 )  
	`subjou∫ÆPageIfRequúed
(
pPg
);

5960  
SQLITE_OK
;

5961 }if–
pPagî
->
£˘‹Size
 > (
u32
ÌPagî->
∑geSize
 ){

5962 
	`as£π
–
pPagî
->
ãmpFûe
==0 );

5963  
	`∑gîWrôeL¨geSe˘‹
(
pPg
);

5965  
	`∑gî_wrôe
(
pPg
);

5967 
	}
}

5974 #i‚de‡
NDEBUG


5975 
	$sqlôe3PagîIswrôóbÀ
(
DbPage
 *
pPg
){

5976  
pPg
->
Êags
 & 
PGHDR_WRITEABLE
;

5977 
	}
}

6000 
	$sqlôe3PagîD⁄tWrôe
(
PgHdr
 *
pPg
){

6001 
Pagî
 *
pPagî
 = 
pPg
->pPager;

6002 if–!
pPagî
->
ãmpFûe
 && (
pPg
->
Êags
&
PGHDR_DIRTY
Ë&&ÖPagî->
nSavïoöt
==0 ){

6003 
	`PAGERTRACE
(("DONT_WRITEÖagê%d o‡%d\n", 
pPg
->
pgno
, 
	`PAGERID
(
pPagî
)));

6004 
	`IOTRACE
(("CLEAN %∞%d\n", 
pPagî
, 
pPg
->
pgno
))

6005 
pPg
->
Êags
 |
PGHDR_DONT_WRITE
;

6006 
pPg
->
Êags
 &~
PGHDR_WRITEABLE
;

6007 
	`ã°ˇ£
–
pPg
->
Êags
 & 
PGHDR_NEED_SYNC
 );

6008 
	`∑gî_£t_∑gehash
(
pPg
);

6010 
	}
}

6034 
	$∑gî_ö¸_ch™gecou¡î
(
Pagî
 *
pPagî
, 
isDúe˘Mode
){

6035 
rc
 = 
SQLITE_OK
;

6037 
	`as£π
–
pPagî
->
eSèã
==
PAGER_WRITER_CACHEMOD


6038 || 
pPagî
->
eSèã
==
PAGER_WRITER_DBMOD


6040 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

6052 #i‚de‡
SQLITE_ENABLE_ATOMIC_WRITE


6053 
	#DIRECT_MODE
 0

	)

6054 
	`as£π
–
isDúe˘Mode
==0 );

6055 
	`UNUSED_PARAMETER
(
isDúe˘Mode
);

6057 
	#DIRECT_MODE
 
isDúe˘Mode


	)

6060 if–!
pPagî
->
ch™geCou¡D⁄e
 && 
	`ALWAYS
’Pagî->
dbSize
>0) ){

6061 
PgHdr
 *
pPgHdr
;

6063 
	`as£π
–!
pPagî
->
ãmpFûe
 && 
	`isO≥n
’Pagî->
fd
) );

6066 
rc
 = 
	`sqlôe3PagîGë
(
pPagî
, 1, &
pPgHdr
, 0);

6067 
	`as£π
–
pPgHdr
==0 || 
rc
==
SQLITE_OK
 );

6074 if–!
DIRECT_MODE
 && 
	`ALWAYS
(
rc
==
SQLITE_OK
) ){

6075 
rc
 = 
	`sqlôe3PagîWrôe
(
pPgHdr
);

6078 if–
rc
==
SQLITE_OK
 ){

6080 
	`∑gî_wrôe_ch™gecou¡î
(
pPgHdr
);

6083 if–
DIRECT_MODE
 ){

6084 c⁄° *
zBuf
;

6085 
	`as£π
–
pPagî
->
dbFûeSize
>0 );

6086 
	`CODEC2
(
pPagî
, 
pPgHdr
->
pD©a
, 1, 6, 
rc
=
SQLITE_NOMEM_BKPT
, 
zBuf
);

6087 if–
rc
==
SQLITE_OK
 ){

6088 
rc
 = 
	`sqlôe3OsWrôe
(
pPagî
->
fd
, 
zBuf
,ÖPagî->
∑geSize
, 0);

6089 
pPagî
->
aSèt
[
PAGER_STAT_WRITE
]++;

6091 if–
rc
==
SQLITE_OK
 ){

6095 c⁄° *
pC›y
 = (c⁄° *)&((c⁄° *)
zBuf
)[24];

6096 
	`mem˝y
(&
pPagî
->
dbFûeVîs
, 
pC›y
, (pPager->dbFileVers));

6097 
pPagî
->
ch™geCou¡D⁄e
 = 1;

6100 
pPagî
->
ch™geCou¡D⁄e
 = 1;

6105 
	`sqlôe3PagîUƒef
(
pPgHdr
);

6107  
rc
;

6108 
	}
}

6117 
	$sqlôe3PagîSync
(
Pagî
 *
pPagî
, c⁄° *
zMa°î
){

6118 
rc
 = 
SQLITE_OK
;

6120 if–
	`isO≥n
(
pPagî
->
fd
) ){

6121 *
pArg
 = (*)
zMa°î
;

6122 
rc
 = 
	`sqlôe3OsFûeC⁄åﬁ
(
pPagî
->
fd
, 
SQLITE_FCNTL_SYNC
, 
pArg
);

6123 if–
rc
==
SQLITE_NOTFOUND
 )Ñ¯
SQLITE_OK
;

6125 if–
rc
==
SQLITE_OK
 && !
pPagî
->
noSync
 ){

6126 
	`as£π
–!
MEMDB
 );

6127 
rc
 = 
	`sqlôe3OsSync
(
pPagî
->
fd
,ÖPagî->
syncFœgs
);

6129  
rc
;

6130 
	}
}

6143 
	$sqlôe3PagîEx˛usiveLock
(
Pagî
 *
pPagî
){

6144 
rc
 = 
pPagî
->
îrCode
;

6145 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

6146 if–
rc
==
SQLITE_OK
 ){

6147 
	`as£π
–
pPagî
->
eSèã
==
PAGER_WRITER_CACHEMOD


6148 || 
pPagî
->
eSèã
==
PAGER_WRITER_DBMOD


6149 || 
pPagî
->
eSèã
==
PAGER_WRITER_LOCKED


6151 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

6152 if–0==
	`∑gîU£WÆ
(
pPagî
) ){

6153 
rc
 = 
	`∑gî_waô_⁄_lock
(
pPagî
, 
EXCLUSIVE_LOCK
);

6156  
rc
;

6157 
	}
}

6185 
	$sqlôe3PagîCommôPha£O√
(

6186 
Pagî
 *
pPagî
,

6187 c⁄° *
zMa°î
,

6188 
noSync


6190 
rc
 = 
SQLITE_OK
;

6192 
	`as£π
–
pPagî
->
eSèã
==
PAGER_WRITER_LOCKED


6193 || 
pPagî
->
eSèã
==
PAGER_WRITER_CACHEMOD


6194 || 
pPagî
->
eSèã
==
PAGER_WRITER_DBMOD


6195 || 
pPagî
->
eSèã
==
PAGER_ERROR


6197 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

6200 if–
	`NEVER
(
pPagî
->
îrCode
) ) ÖPager->errCode;

6203 if–
	`sqlôe3Fau…Sim
(400ËË 
SQLITE_IOERR
;

6205 
	`PAGERTRACE
(("DATABASE SYNC: File=%s zMaster=%sÇSize=%d\n",

6206 
pPagî
->
zFûíame
, 
zMa°î
,ÖPagî->
dbSize
));

6209 if–
pPagî
->
eSèã
<
PAGER_WRITER_CACHEMOD
 )  
SQLITE_OK
;

6211 
	`as£π
–
MEMDB
==0 || 
pPagî
->
ãmpFûe
 );

6212 
	`as£π
–
	`isO≥n
(
pPagî
->
fd
Ë||ÖPagî->
ãmpFûe
 );

6213 if–0==
	`∑gîFlushOnCommô
(
pPagî
, 1) ){

6217 
	`sqlôe3BackupRe°¨t
(
pPagî
->
pBackup
);

6219 if–
	`∑gîU£WÆ
(
pPagî
) ){

6220 
PgHdr
 *
pLi°
 = 
	`sqlôe3PˇcheDútyLi°
(
pPagî
->
pPCache
);

6221 
PgHdr
 *
pPageO√
 = 0;

6222 if–
pLi°
==0 ){

6225 
rc
 = 
	`sqlôe3PagîGë
(
pPagî
, 1, &
pPageO√
, 0);

6226 
pLi°
 = 
pPageO√
;

6227 
pLi°
->
pDúty
 = 0;

6229 
	`as£π
–
rc
==
SQLITE_OK
 );

6230 if–
	`ALWAYS
(
pLi°
) ){

6231 
rc
 = 
	`∑gîWÆFømes
(
pPagî
, 
pLi°
,ÖPagî->
dbSize
, 1);

6233 
	`sqlôe3PagîUƒef
(
pPageO√
);

6234 if–
rc
==
SQLITE_OK
 ){

6235 
	`sqlôe3PˇcheCÀ™AŒ
(
pPagî
->
pPCache
);

6261 #ifde‡
SQLITE_ENABLE_ATOMIC_WRITE


6262 
PgHdr
 *
pPg
;

6263 
	`as£π
–
	`isO≥n
(
pPagî
->
jfd
)

6264 || 
pPagî
->
jou∫ÆMode
==
PAGER_JOURNALMODE_OFF


6265 || 
pPagî
->
jou∫ÆMode
==
PAGER_JOURNALMODE_WAL


6267 if–!
zMa°î
 && 
	`isO≥n
(
pPagî
->
jfd
)

6268 && 
pPagî
->
jou∫ÆOff
==
	`j∫lBuf„rSize
(pPager)

6269 && 
pPagî
->
dbSize
>ıPagî->
dbOrigSize


6270 && (0==(
pPg
 = 
	`sqlôe3PˇcheDútyLi°
(
pPagî
->
pPCache
)Ë|| 0=ıPg->
pDúty
)

6278 
rc
 = 
	`∑gî_ö¸_ch™gecou¡î
(
pPagî
, 1);

6280 
rc
 = 
	`sqlôe3Jou∫ÆCª©e
(
pPagî
->
jfd
);

6281 if–
rc
==
SQLITE_OK
 ){

6282 
rc
 = 
	`∑gî_ö¸_ch™gecou¡î
(
pPagî
, 0);

6286 
rc
 = 
	`∑gî_ö¸_ch™gecou¡î
(
pPagî
, 0);

6288 if–
rc
!=
SQLITE_OK
 ) 
commô_pha£_⁄e_exô
;

6294 
rc
 = 
	`wrôeMa°îJou∫Æ
(
pPagî
, 
zMa°î
);

6295 if–
rc
!=
SQLITE_OK
 ) 
commô_pha£_⁄e_exô
;

6308 
rc
 = 
	`syncJou∫Æ
(
pPagî
, 0);

6309 if–
rc
!=
SQLITE_OK
 ) 
commô_pha£_⁄e_exô
;

6311 
rc
 = 
	`∑gî_wrôe_∑gñi°
(
pPagî
,
	`sqlôe3PˇcheDútyLi°
’Pagî->
pPCache
));

6312 if–
rc
!=
SQLITE_OK
 ){

6313 
	`as£π
–
rc
!=
SQLITE_IOERR_BLOCKED
 );

6314 
commô_pha£_⁄e_exô
;

6316 
	`sqlôe3PˇcheCÀ™AŒ
(
pPagî
->
pPCache
);

6324 if–
pPagî
->
dbSize
>pPagî->
dbFûeSize
 ){

6325 
Pgno
 
nNew
 = 
pPagî
->
dbSize
 - (pPagî->dbSize==
	`PAGER_MJ_PGNO
(pPager));

6326 
	`as£π
–
pPagî
->
eSèã
==
PAGER_WRITER_DBMOD
 );

6327 
rc
 = 
	`∑gî_åunˇã
(
pPagî
, 
nNew
);

6328 if–
rc
!=
SQLITE_OK
 ) 
commô_pha£_⁄e_exô
;

6332 if–!
noSync
 ){

6333 
rc
 = 
	`sqlôe3PagîSync
(
pPagî
, 
zMa°î
);

6335 
	`IOTRACE
(("DBSYNC %p\n", 
pPagî
))

6339 
commô_pha£_⁄e_exô
:

6340 if–
rc
==
SQLITE_OK
 && !
	`∑gîU£WÆ
(
pPagî
) ){

6341 
pPagî
->
eSèã
 = 
PAGER_WRITER_FINISHED
;

6343  
rc
;

6344 
	}
}

6362 
	$sqlôe3PagîCommôPha£Two
(
Pagî
 *
pPagî
){

6363 
rc
 = 
SQLITE_OK
;

6368 if–
	`NEVER
(
pPagî
->
îrCode
) ) ÖPager->errCode;

6370 
	`as£π
–
pPagî
->
eSèã
==
PAGER_WRITER_LOCKED


6371 || 
pPagî
->
eSèã
==
PAGER_WRITER_FINISHED


6372 || (
	`∑gîU£WÆ
(
pPagî
Ë&&ÖPagî->
eSèã
==
PAGER_WRITER_CACHEMOD
)

6374 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

6387 if–
pPagî
->
eSèã
==
PAGER_WRITER_LOCKED


6388 && 
pPagî
->
ex˛usiveMode


6389 && 
pPagî
->
jou∫ÆMode
==
PAGER_JOURNALMODE_PERSIST


6391 
	`as£π
–
pPagî
->
jou∫ÆOff
==
	`JOURNAL_HDR_SZ
(pPager) || !pPager->journalOff );

6392 
pPagî
->
eSèã
 = 
PAGER_READER
;

6393  
SQLITE_OK
;

6396 
	`PAGERTRACE
(("COMMIT %d\n", 
	`PAGERID
(
pPagî
)));

6397 
pPagî
->
iD©aVîsi⁄
++;

6398 
rc
 = 
	`∑gî_íd_å™ß˘i⁄
(
pPagî
,ÖPagî->
£tMa°î
, 1);

6399  
	`∑gî_îr‹
(
pPagî
, 
rc
);

6400 
	}
}

6428 
	$sqlôe3PagîRﬁlback
(
Pagî
 *
pPagî
){

6429 
rc
 = 
SQLITE_OK
;

6430 
	`PAGERTRACE
(("ROLLBACK %d\n", 
	`PAGERID
(
pPagî
)));

6436 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

6437 if–
pPagî
->
eSèã
==
PAGER_ERROR
 ) ÖPagî->
îrCode
;

6438 if–
pPagî
->
eSèã
<=
PAGER_READER
 )  
SQLITE_OK
;

6440 if–
	`∑gîU£WÆ
(
pPagî
) ){

6441 
rc2
;

6442 
rc
 = 
	`sqlôe3PagîSavïoöt
(
pPagî
, 
SAVEPOINT_ROLLBACK
, -1);

6443 
rc2
 = 
	`∑gî_íd_å™ß˘i⁄
(
pPagî
,ÖPagî->
£tMa°î
, 0);

6444 if–
rc
==
SQLITE_OK
 )Ñ¯
rc2
;

6445 }if–!
	`isO≥n
(
pPagî
->
jfd
Ë||ÖPagî->
eSèã
==
PAGER_WRITER_LOCKED
 ){

6446 
eSèã
 = 
pPagî
->eState;

6447 
rc
 = 
	`∑gî_íd_å™ß˘i⁄
(
pPagî
, 0, 0);

6448 if–!
MEMDB
 && 
eSèã
>
PAGER_WRITER_LOCKED
 ){

6453 
pPagî
->
îrCode
 = 
SQLITE_ABORT
;

6454 
pPagî
->
eSèã
 = 
PAGER_ERROR
;

6455  
rc
;

6458 
rc
 = 
	`∑gî_∂ayback
(
pPagî
, 0);

6461 
	`as£π
–
pPagî
->
eSèã
==
PAGER_READER
 || 
rc
!=
SQLITE_OK
 );

6462 
	`as£π
–
rc
==
SQLITE_OK
 ||Ñc==
SQLITE_FULL
 ||Ñc==
SQLITE_CORRUPT


6463 || 
rc
==
SQLITE_NOMEM
 || (rc&0xFF)==
SQLITE_IOERR


6464 || 
rc
==
SQLITE_CANTOPEN


6470  
	`∑gî_îr‹
(
pPagî
, 
rc
);

6471 
	}
}

6477 
u8
 
	$sqlôe3PagîI§ód⁄ly
(
Pagî
 *
pPagî
){

6478  
pPagî
->
ªadO∆y
;

6479 
	}
}

6481 #ifde‡
SQLITE_DEBUG


6485 
	$sqlôe3PagîRefcou¡
(
Pagî
 *
pPagî
){

6486  
	`sqlôe3PˇcheRefCou¡
(
pPagî
->
pPCache
);

6487 
	}
}

6494 
	$sqlôe3PagîMemU£d
(
Pagî
 *
pPagî
){

6495 
≥rPageSize
 = 
pPagî
->
∑geSize
 +ÖPagî->
nExåa
 + (
PgHdr
)

6497  
≥rPageSize
*
	`sqlôe3PˇchePagecou¡
(
pPagî
->
pPCache
)

6498 + 
	`sqlôe3MÆlocSize
(
pPagî
)

6499 + 
pPagî
->
∑geSize
;

6500 
	}
}

6505 
	$sqlôe3PagîPageRefcou¡
(
DbPage
 *
pPage
){

6506  
	`sqlôe3PˇchePageRefcou¡
(
pPage
);

6507 
	}
}

6509 #ifde‡
SQLITE_TEST


6513 *
	$sqlôe3PagîSèts
(
Pagî
 *
pPagî
){

6514 
a
[11];

6515 
a
[0] = 
	`sqlôe3PˇcheRefCou¡
(
pPagî
->
pPCache
);

6516 
a
[1] = 
	`sqlôe3PˇchePagecou¡
(
pPagî
->
pPCache
);

6517 
a
[2] = 
	`sqlôe3PˇcheGëCachesize
(
pPagî
->
pPCache
);

6518 
a
[3] = 
pPagî
->
eSèã
==
PAGER_OPEN
 ? -1 : (ËpPagî->
dbSize
;

6519 
a
[4] = 
pPagî
->
eSèã
;

6520 
a
[5] = 
pPagî
->
îrCode
;

6521 
a
[6] = 
pPagî
->
aSèt
[
PAGER_STAT_HIT
];

6522 
a
[7] = 
pPagî
->
aSèt
[
PAGER_STAT_MISS
];

6523 
a
[8] = 0;

6524 
a
[9] = 
pPagî
->
nRód
;

6525 
a
[10] = 
pPagî
->
aSèt
[
PAGER_STAT_WRITE
];

6526  
a
;

6527 
	}
}

6537 
	$sqlôe3PagîCacheSèt
(
Pagî
 *
pPagî
, 
eSèt
, 
ª£t
, *
≤VÆ
){

6539 
	`as£π
–
eSèt
==
SQLITE_DBSTATUS_CACHE_HIT


6540 || 
eSèt
==
SQLITE_DBSTATUS_CACHE_MISS


6541 || 
eSèt
==
SQLITE_DBSTATUS_CACHE_WRITE


6544 
	`as£π
–
SQLITE_DBSTATUS_CACHE_HIT
+1==
SQLITE_DBSTATUS_CACHE_MISS
 );

6545 
	`as£π
–
SQLITE_DBSTATUS_CACHE_HIT
+2==
SQLITE_DBSTATUS_CACHE_WRITE
 );

6546 
	`as£π
–
PAGER_STAT_HIT
==0 && 
PAGER_STAT_MISS
==1 && 
PAGER_STAT_WRITE
==2 );

6548 *
≤VÆ
 +
pPagî
->
aSèt
[
eSèt
 - 
SQLITE_DBSTATUS_CACHE_HIT
];

6549 if–
ª£t
 ){

6550 
pPagî
->
aSèt
[
eSèt
 - 
SQLITE_DBSTATUS_CACHE_HIT
] = 0;

6552 
	}
}

6557 
	$sqlôe3PagîIsMemdb
(
Pagî
 *
pPagî
){

6558  
pPagî
->
ãmpFûe
;

6559 
	}
}

6571 
SQLITE_NOINLINE
 
	$∑gîO≥nSavïoöt
(
Pagî
 *
pPagî
, 
nSavïoöt
){

6572 
rc
 = 
SQLITE_OK
;

6573 
nCuºít
 = 
pPagî
->
nSavïoöt
;

6574 
ii
;

6575 
PagîSavïoöt
 *
aNew
;

6577 
	`as£π
–
pPagî
->
eSèã
>=
PAGER_WRITER_LOCKED
 );

6578 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

6579 
	`as£π
–
nSavïoöt
>
nCuºít
 && 
pPagî
->
u£Jou∫Æ
 );

6585 
aNew
 = (
PagîSavïoöt
 *)
	`sqlôe3RóŒoc
(

6586 
pPagî
->
aSavïoöt
, (
PagîSavïoöt
)*
nSavïoöt


6588 if–!
aNew
 ){

6589  
SQLITE_NOMEM_BKPT
;

6591 
	`mem£t
(&
aNew
[
nCuºít
], 0, (
nSavïoöt
-nCuºítË* (
PagîSavïoöt
));

6592 
pPagî
->
aSavïoöt
 = 
aNew
;

6595 
ii
=
nCuºít
; ii<
nSavïoöt
; ii++){

6596 
aNew
[
ii
].
nOrig
 = 
pPagî
->
dbSize
;

6597 if–
	`isO≥n
(
pPagî
->
jfd
Ë&&ÖPagî->
jou∫ÆOff
>0 ){

6598 
aNew
[
ii
].
iOff£t
 = 
pPagî
->
jou∫ÆOff
;

6600 
aNew
[
ii
].
iOff£t
 = 
	`JOURNAL_HDR_SZ
(
pPagî
);

6602 
aNew
[
ii
].
iSubRec
 = 
pPagî
->
nSubRec
;

6603 
aNew
[
ii
].
pInSavïoöt
 = 
	`sqlôe3BôvecCª©e
(
pPagî
->
dbSize
);

6604 if–!
aNew
[
ii
].
pInSavïoöt
 ){

6605  
SQLITE_NOMEM_BKPT
;

6607 if–
	`∑gîU£WÆ
(
pPagî
) ){

6608 
	`sqlôe3WÆSavïoöt
(
pPagî
->
pWÆ
, 
aNew
[
ii
].
aWÆD©a
);

6610 
pPagî
->
nSavïoöt
 = 
ii
+1;

6612 
	`as£π
–
pPagî
->
nSavïoöt
==nSavepoint );

6613 
	`as£πTrunˇãC⁄°øöt
(
pPagî
);

6614  
rc
;

6615 
	}
}

6616 
	$sqlôe3PagîO≥nSavïoöt
(
Pagî
 *
pPagî
, 
nSavïoöt
){

6617 
	`as£π
–
pPagî
->
eSèã
>=
PAGER_WRITER_LOCKED
 );

6618 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

6620 if–
nSavïoöt
>
pPagî
->nSavïoöà&&ÖPagî->
u£Jou∫Æ
 ){

6621  
	`∑gîO≥nSavïoöt
(
pPagî
, 
nSavïoöt
);

6623  
SQLITE_OK
;

6625 
	}
}

6658 
	$sqlôe3PagîSavïoöt
(
Pagî
 *
pPagî
, 
›
, 
iSavïoöt
){

6659 
rc
 = 
pPagî
->
îrCode
;

6661 
	`as£π
–
›
==
SAVEPOINT_RELEASE
 || op==
SAVEPOINT_ROLLBACK
 );

6662 
	`as£π
–
iSavïoöt
>=0 || 
›
==
SAVEPOINT_ROLLBACK
 );

6664 if–
rc
==
SQLITE_OK
 && 
iSavïoöt
<
pPagî
->
nSavïoöt
 ){

6665 
ii
;

6666 
nNew
;

6672 
nNew
 = 
iSavïoöt
 + (–
›
==
SAVEPOINT_RELEASE
 ) ? 0 : 1);

6673 
ii
=
nNew
; ii<
pPagî
->
nSavïoöt
; ii++){

6674 
	`sqlôe3BôvecDe°roy
(
pPagî
->
aSavïoöt
[
ii
].
pInSavïoöt
);

6676 
pPagî
->
nSavïoöt
 = 
nNew
;

6680 if–
›
==
SAVEPOINT_RELEASE
 ){

6681 if–
nNew
==0 && 
	`isO≥n
(
pPagî
->
sjfd
) ){

6683 if–
	`sqlôe3Jou∫ÆIsInMem‹y
(
pPagî
->
sjfd
) ){

6684 
rc
 = 
	`sqlôe3OsTrunˇã
(
pPagî
->
sjfd
, 0);

6685 
	`as£π
–
rc
==
SQLITE_OK
 );

6687 
pPagî
->
nSubRec
 = 0;

6695 if–
	`∑gîU£WÆ
(
pPagî
Ë|| 
	`isO≥n
’Pagî->
jfd
) ){

6696 
PagîSavïoöt
 *
pSavïoöt
 = (
nNew
==0)?0:&
pPagî
->
aSavïoöt
[nNew-1];

6697 
rc
 = 
	`∑gîPœybackSavïoöt
(
pPagî
, 
pSavïoöt
);

6698 
	`as£π
(
rc
!=
SQLITE_DONE
);

6702  
rc
;

6703 
	}
}

6715 c⁄° *
	$sqlôe3PagîFûíame
(
Pagî
 *
pPagî
, 
nuŒIfMemDb
){

6716  (
nuŒIfMemDb
 && 
pPagî
->
memDb
Ë? "" :ÖPagî->
zFûíame
;

6717 
	}
}

6722 
sqlôe3_vfs
 *
	$sqlôe3PagîVfs
(
Pagî
 *
pPagî
){

6723  
pPagî
->
pVfs
;

6724 
	}
}

6731 
sqlôe3_fûe
 *
	$sqlôe3PagîFûe
(
Pagî
 *
pPagî
){

6732  
pPagî
->
fd
;

6733 
	}
}

6739 
sqlôe3_fûe
 *
	$sqlôe3PagîJ∫lFûe
(
Pagî
 *
pPagî
){

6740 #i‡
SQLITE_OMIT_WAL


6741  
pPagî
->
jfd
;

6743  
pPagî
->
pWÆ
 ? 
	`sqlôe3WÆFûe
’Pagî->pWÆË:ÖPagî->
jfd
;

6745 
	}
}

6750 c⁄° *
	$sqlôe3PagîJou∫Æ«me
(
Pagî
 *
pPagî
){

6751  
pPagî
->
zJou∫Æ
;

6752 
	}
}

6754 #ifde‡
SQLITE_HAS_CODEC


6758 
sqlôe3PagîSëCodec
(

6759 
Pagî
 *
pPagî
,

6760 *(*
xCodec
)(*,*,
Pgno
,),

6761 (*
xCodecSizeChng
)(*,,),

6762 (*
xCodecFªe
)(*),

6763 *
pCodec


6765 if–
pPagî
->
xCodecFªe
 )ÖPagî->
	`xCodecFªe
’Pagî->
pCodec
);

6766 
pPagî
->
xCodec
 =ÖPagî->
memDb
 ? 0 : xCodec;

6767 
pPagî
->
xCodecSizeChng
 = xCodecSizeChng;

6768 
pPagî
->
xCodecFªe
 = xCodecFree;

6769 
pPagî
->
pCodec
 =ÖCodec;

6770 
	`∑gîRï‹tSize
(
pPagî
);

6771 
	}
}

6772 *
	$sqlôe3PagîGëCodec
(
Pagî
 *
pPagî
){

6773  
pPagî
->
pCodec
;

6774 
	}
}

6783 *
	$sqlôe3PagîCodec
(
PgHdr
 *
pPg
){

6784 *
aD©a
 = 0;

6785 
	`CODEC2
(
pPg
->
pPagî
,ÖPg->
pD©a
,ÖPg->
pgno
, 6,  0, 
aD©a
);

6786  
aD©a
;

6787 
	}
}

6792 
	$sqlôe3PagîSèã
(
Pagî
 *
pPagî
){

6793  
pPagî
->
eSèã
;

6794 
	}
}

6797 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


6823 
	$sqlôe3PagîMovïage
(
Pagî
 *
pPagî
, 
DbPage
 *
pPg
, 
Pgno
 
pgno
, 
isCommô
){

6824 
PgHdr
 *
pPgOld
;

6825 
Pgno
 
√edSyncPgno
 = 0;

6826 
rc
;

6827 
Pgno
 
‹igPgno
;

6829 
	`as£π
–
pPg
->
nRef
>0 );

6830 
	`as£π
–
pPagî
->
eSèã
==
PAGER_WRITER_CACHEMOD


6831 || 
pPagî
->
eSèã
==
PAGER_WRITER_DBMOD


6833 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

6838 
	`as£π
–
pPagî
->
ãmpFûe
 || !
MEMDB
 );

6839 if–
pPagî
->
ãmpFûe
 ){

6840 
rc
 = 
	`sqlôe3PagîWrôe
(
pPg
);

6841 if–
rc
 ) Ñc;

6862 if–(
pPg
->
Êags
 & 
PGHDR_DIRTY
)!=0

6863 && 
SQLITE_OK
!=(
rc
 = 
	`subjou∫ÆPageIfRequúed
(
pPg
))

6865  
rc
;

6868 
	`PAGERTRACE
(("MOVE %dÖage %d (needSync=%d) movesÅo %d\n",

6869 
	`PAGERID
(
pPagî
), 
pPg
->
pgno
, (pPg->
Êags
&
PGHDR_NEED_SYNC
)?1:0,Ögno));

6870 
	`IOTRACE
(("MOVE %∞%d %d\n", 
pPagî
, 
pPg
->
pgno
,Ögno))

6879 if–(
pPg
->
Êags
&
PGHDR_NEED_SYNC
Ë&& !
isCommô
 ){

6880 
√edSyncPgno
 = 
pPg
->
pgno
;

6881 
	`as£π
–
pPagî
->
jou∫ÆMode
==
PAGER_JOURNALMODE_OFF
 ||

6882 
	`∑geInJou∫Æ
(
pPagî
, 
pPg
Ë||ÖPg->
pgno
>pPagî->
dbOrigSize
 );

6883 
	`as£π
–
pPg
->
Êags
&
PGHDR_DIRTY
 );

6891 
pPg
->
Êags
 &~
PGHDR_NEED_SYNC
;

6892 
pPgOld
 = 
	`sqlôe3PagîLookup
(
pPagî
, 
pgno
);

6893 
	`as£π
–!
pPgOld
 ||ÖPgOld->
nRef
==1 );

6894 if–
pPgOld
 ){

6895 
pPg
->
Êags
 |(
pPgOld
->Êags&
PGHDR_NEED_SYNC
);

6896 if–
pPagî
->
ãmpFûe
 ){

6899 
	`sqlôe3PˇcheMove
(
pPgOld
, 
pPagî
->
dbSize
+1);

6901 
	`sqlôe3PˇcheDr›
(
pPgOld
);

6905 
‹igPgno
 = 
pPg
->
pgno
;

6906 
	`sqlôe3PˇcheMove
(
pPg
, 
pgno
);

6907 
	`sqlôe3PˇcheMakeDúty
(
pPg
);

6913 if–
pPagî
->
ãmpFûe
 && 
pPgOld
 ){

6914 
	`sqlôe3PˇcheMove
(
pPgOld
, 
‹igPgno
);

6915 
	`sqlôe3PagîUƒefNŸNuŒ
(
pPgOld
);

6918 if–
√edSyncPgno
 ){

6933 
PgHdr
 *
pPgHdr
;

6934 
rc
 = 
	`sqlôe3PagîGë
(
pPagî
, 
√edSyncPgno
, &
pPgHdr
, 0);

6935 if–
rc
!=
SQLITE_OK
 ){

6936 if–
√edSyncPgno
<=
pPagî
->
dbOrigSize
 ){

6937 
	`as£π
–
pPagî
->
pTmpS∑˚
!=0 );

6938 
	`sqlôe3BôvecCÀ¨
(
pPagî
->
pInJou∫Æ
, 
√edSyncPgno
,ÖPagî->
pTmpS∑˚
);

6940  
rc
;

6942 
pPgHdr
->
Êags
 |
PGHDR_NEED_SYNC
;

6943 
	`sqlôe3PˇcheMakeDúty
(
pPgHdr
);

6944 
	`sqlôe3PagîUƒefNŸNuŒ
(
pPgHdr
);

6947  
SQLITE_OK
;

6948 
	}
}

6957 
	$sqlôe3PagîRekey
(
DbPage
 *
pPg
, 
Pgno
 
iNew
, 
u16
 
Êags
){

6958 
	`as£π
–
pPg
->
pgno
!=
iNew
 );

6959 
pPg
->
Êags
 = flags;

6960 
	`sqlôe3PˇcheMove
(
pPg
, 
iNew
);

6961 
	}
}

6966 *
	$sqlôe3PagîGëD©a
(
DbPage
 *
pPg
){

6967 
	`as£π
–
pPg
->
nRef
>0 ||ÖPg->
pPagî
->
memDb
 );

6968  
pPg
->
pD©a
;

6969 
	}
}

6975 *
	$sqlôe3PagîGëExåa
(
DbPage
 *
pPg
){

6976  
pPg
->
pExåa
;

6977 
	}
}

6989 
	$sqlôe3PagîLockögMode
(
Pagî
 *
pPagî
, 
eMode
){

6990 
	`as£π
–
eMode
==
PAGER_LOCKINGMODE_QUERY


6991 || 
eMode
==
PAGER_LOCKINGMODE_NORMAL


6992 || 
eMode
==
PAGER_LOCKINGMODE_EXCLUSIVE
 );

6993 
	`as£π
–
PAGER_LOCKINGMODE_QUERY
<0 );

6994 
	`as£π
–
PAGER_LOCKINGMODE_NORMAL
>=0 && 
PAGER_LOCKINGMODE_EXCLUSIVE
>=0 );

6995 
	`as£π
–
pPagî
->
ex˛usiveMode
 || 0==
	`sqlôe3WÆHópMem‹y
’Pagî->
pWÆ
) );

6996 if–
eMode
>=0 && !
pPagî
->
ãmpFûe
 && !
	`sqlôe3WÆHópMem‹y
’Pagî->
pWÆ
) ){

6997 
pPagî
->
ex˛usiveMode
 = (
u8
)
eMode
;

6999  ()
pPagî
->
ex˛usiveMode
;

7000 
	}
}

7022 
	$sqlôe3PagîSëJou∫ÆMode
(
Pagî
 *
pPagî
, 
eMode
){

7023 
u8
 
eOld
 = 
pPagî
->
jou∫ÆMode
;

7025 #ifde‡
SQLITE_DEBUG


7028 
	`¥öt_∑gî_°©e
(
pPagî
);

7033 
	`as£π
–
eMode
==
PAGER_JOURNALMODE_DELETE


7034 || 
eMode
==
PAGER_JOURNALMODE_TRUNCATE


7035 || 
eMode
==
PAGER_JOURNALMODE_PERSIST


7036 || 
eMode
==
PAGER_JOURNALMODE_OFF


7037 || 
eMode
==
PAGER_JOURNALMODE_WAL


7038 || 
eMode
==
PAGER_JOURNALMODE_MEMORY
 );

7044 
	`as£π
–
pPagî
->
ãmpFûe
==0 || 
eMode
!=
PAGER_JOURNALMODE_WAL
 );

7049 if–
MEMDB
 ){

7050 
	`as£π
–
eOld
==
PAGER_JOURNALMODE_MEMORY
 ||ÉOld==
PAGER_JOURNALMODE_OFF
 );

7051 if–
eMode
!=
PAGER_JOURNALMODE_MEMORY
 &&ÉMode!=
PAGER_JOURNALMODE_OFF
 ){

7052 
eMode
 = 
eOld
;

7056 if–
eMode
!=
eOld
 ){

7059 
	`as£π
–
pPagî
->
eSèã
!=
PAGER_ERROR
 );

7060 
pPagî
->
jou∫ÆMode
 = (
u8
)
eMode
;

7066 
	`as£π
–(
PAGER_JOURNALMODE_TRUNCATE
 & 5)==1 );

7067 
	`as£π
–(
PAGER_JOURNALMODE_PERSIST
 & 5)==1 );

7068 
	`as£π
–(
PAGER_JOURNALMODE_DELETE
 & 5)==0 );

7069 
	`as£π
–(
PAGER_JOURNALMODE_MEMORY
 & 5)==4 );

7070 
	`as£π
–(
PAGER_JOURNALMODE_OFF
 & 5)==0 );

7071 
	`as£π
–(
PAGER_JOURNALMODE_WAL
 & 5)==5 );

7073 
	`as£π
–
	`isO≥n
(
pPagî
->
fd
Ë||ÖPagî->
ex˛usiveMode
 );

7074 if–!
pPagî
->
ex˛usiveMode
 && (
eOld
 & 5)==1 && (
eMode
 & 1)==0 ){

7084 
	`sqlôe3OsClo£
(
pPagî
->
jfd
);

7085 if–
pPagî
->
eLock
>=
RESERVED_LOCK
 ){

7086 
	`sqlôe3OsDñëe
(
pPagî
->
pVfs
,ÖPagî->
zJou∫Æ
, 0);

7088 
rc
 = 
SQLITE_OK
;

7089 
°©e
 = 
pPagî
->
eSèã
;

7090 
	`as£π
–
°©e
==
PAGER_OPEN
 || sèã==
PAGER_READER
 );

7091 if–
°©e
==
PAGER_OPEN
 ){

7092 
rc
 = 
	`sqlôe3PagîSh¨edLock
(
pPagî
);

7094 if–
pPagî
->
eSèã
==
PAGER_READER
 ){

7095 
	`as£π
–
rc
==
SQLITE_OK
 );

7096 
rc
 = 
	`∑gîLockDb
(
pPagî
, 
RESERVED_LOCK
);

7098 if–
rc
==
SQLITE_OK
 ){

7099 
	`sqlôe3OsDñëe
(
pPagî
->
pVfs
,ÖPagî->
zJou∫Æ
, 0);

7101 if–
rc
==
SQLITE_OK
 && 
°©e
==
PAGER_READER
 ){

7102 
	`∑gîU∆ockDb
(
pPagî
, 
SHARED_LOCK
);

7103 }if–
°©e
==
PAGER_OPEN
 ){

7104 
	`∑gî_u∆ock
(
pPagî
);

7106 
	`as£π
–
°©e
==
pPagî
->
eSèã
 );

7108 }if–
eMode
==
PAGER_JOURNALMODE_OFF
 ){

7109 
	`sqlôe3OsClo£
(
pPagî
->
jfd
);

7114  ()
pPagî
->
jou∫ÆMode
;

7115 
	}
}

7120 
	$sqlôe3PagîGëJou∫ÆMode
(
Pagî
 *
pPagî
){

7121  ()
pPagî
->
jou∫ÆMode
;

7122 
	}
}

7129 
	$sqlôe3PagîOkToCh™geJou∫ÆMode
(
Pagî
 *
pPagî
){

7130 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

7131 if–
pPagî
->
eSèã
>=
PAGER_WRITER_CACHEMOD
 )  0;

7132 if–
	`NEVER
(
	`isO≥n
(
pPagî
->
jfd
Ë&&ÖPagî->
jou∫ÆOff
>0) )  0;

7134 
	}
}

7142 
i64
 
	$sqlôe3PagîJou∫ÆSizeLimô
(
Pagî
 *
pPagî
, 
i64
 
iLimô
){

7143 if–
iLimô
>=-1 ){

7144 
pPagî
->
jou∫ÆSizeLimô
 = 
iLimô
;

7145 
	`sqlôe3WÆLimô
(
pPagî
->
pWÆ
, 
iLimô
);

7147  
pPagî
->
jou∫ÆSizeLimô
;

7148 
	}
}

7156 
sqlôe3_backup
 **
	$sqlôe3PagîBackupPå
(
Pagî
 *
pPagî
){

7157  &
pPagî
->
pBackup
;

7158 
	}
}

7160 #i‚de‡
SQLITE_OMIT_VACUUM


7164 
	$sqlôe3PagîCÀ¨Cache
(
Pagî
 *
pPagî
){

7165 
	`as£π
–
MEMDB
==0 || 
pPagî
->
ãmpFûe
 );

7166 if–
pPagî
->
ãmpFûe
==0 ) 
	`∑gî_ª£t
(pPager);

7167 
	}
}

7170 #i‚de‡
SQLITE_OMIT_WAL


7178 
	$sqlôe3PagîCheckpoöt
(
Pagî
 *
pPagî
, 
eMode
, *
≤Log
, *
≤Ck±
){

7179 
rc
 = 
SQLITE_OK
;

7180 if–
pPagî
->
pWÆ
 ){

7181 
rc
 = 
	`sqlôe3WÆCheckpoöt
(
pPagî
->
pWÆ
, 
eMode
,

7182 (
eMode
==
SQLITE_CHECKPOINT_PASSIVE
 ? 0 : 
pPagî
->
xBusyH™dÀr
),

7183 
pPagî
->
pBusyH™dÀrArg
,

7184 
pPagî
->
ck±SyncFœgs
,ÖPagî->
∑geSize
, (
u8
 *ÌPagî->
pTmpS∑˚
,

7185 
≤Log
, 
≤Ck±


7188  
rc
;

7189 
	}
}

7191 
	$sqlôe3PagîWÆCÆlback
(
Pagî
 *
pPagî
){

7192  
	`sqlôe3WÆCÆlback
(
pPagî
->
pWÆ
);

7193 
	}
}

7199 
	$sqlôe3PagîWÆSuµ‹ãd
(
Pagî
 *
pPagî
){

7200 c⁄° 
sqlôe3_io_mëhods
 *
pMëhods
 = 
pPagî
->
fd
->pMethods;

7201 if–
pPagî
->
noLock
 )  0;

7202  
pPagî
->
ex˛usiveMode
 || (
pMëhods
->
iVîsi⁄
>=2 &&ÖMëhods->
xShmM≠
);

7203 
	}
}

7209 
	$∑gîEx˛usiveLock
(
Pagî
 *
pPagî
){

7210 
rc
;

7212 
	`as£π
–
pPagî
->
eLock
==
SHARED_LOCK
 ||ÖPagî->eLock==
EXCLUSIVE_LOCK
 );

7213 
rc
 = 
	`∑gîLockDb
(
pPagî
, 
EXCLUSIVE_LOCK
);

7214 if–
rc
!=
SQLITE_OK
 ){

7217 
	`∑gîU∆ockDb
(
pPagî
, 
SHARED_LOCK
);

7220  
rc
;

7221 
	}
}

7229 
	$∑gîO≥nWÆ
(
Pagî
 *
pPagî
){

7230 
rc
 = 
SQLITE_OK
;

7232 
	`as£π
–
pPagî
->
pWÆ
==0 &&ÖPagî->
ãmpFûe
==0 );

7233 
	`as£π
–
pPagî
->
eLock
==
SHARED_LOCK
 ||ÖPagî->eLock==
EXCLUSIVE_LOCK
 );

7240 if–
pPagî
->
ex˛usiveMode
 ){

7241 
rc
 = 
	`∑gîEx˛usiveLock
(
pPagî
);

7247 if–
rc
==
SQLITE_OK
 ){

7248 
rc
 = 
	`sqlôe3WÆO≥n
(
pPagî
->
pVfs
,

7249 
pPagî
->
fd
,ÖPagî->
zWÆ
,ÖPagî->
ex˛usiveMode
,

7250 
pPagî
->
jou∫ÆSizeLimô
, &pPagî->
pWÆ


7253 
	`∑gîFixM≠limô
(
pPagî
);

7255  
rc
;

7256 
	}
}

7274 
	$sqlôe3PagîO≥nWÆ
(

7275 
Pagî
 *
pPagî
,

7276 *
pbO≥n


7278 
rc
 = 
SQLITE_OK
;

7280 
	`as£π
–
	`as£π_∑gî_°©e
(
pPagî
) );

7281 
	`as£π
–
pPagî
->
eSèã
==
PAGER_OPEN
 || 
pbO≥n
 );

7282 
	`as£π
–
pPagî
->
eSèã
==
PAGER_READER
 || !
pbO≥n
 );

7283 
	`as£π
–
pbO≥n
==0 || *pbOpen==0 );

7284 
	`as£π
–
pbO≥n
!=0 || (!
pPagî
->
ãmpFûe
 && !pPagî->
pWÆ
) );

7286 if–!
pPagî
->
ãmpFûe
 && !pPagî->
pWÆ
 ){

7287 if–!
	`sqlôe3PagîWÆSuµ‹ãd
(
pPagî
ËË 
SQLITE_CANTOPEN
;

7290 
	`sqlôe3OsClo£
(
pPagî
->
jfd
);

7292 
rc
 = 
	`∑gîO≥nWÆ
(
pPagî
);

7293 if–
rc
==
SQLITE_OK
 ){

7294 
pPagî
->
jou∫ÆMode
 = 
PAGER_JOURNALMODE_WAL
;

7295 
pPagî
->
eSèã
 = 
PAGER_OPEN
;

7298 *
pbO≥n
 = 1;

7301  
rc
;

7302 
	}
}

7313 
	$sqlôe3PagîClo£WÆ
(
Pagî
 *
pPagî
){

7314 
rc
 = 
SQLITE_OK
;

7316 
	`as£π
–
pPagî
->
jou∫ÆMode
==
PAGER_JOURNALMODE_WAL
 );

7322 if–!
pPagî
->
pWÆ
 ){

7323 
logexi°s
 = 0;

7324 
rc
 = 
	`∑gîLockDb
(
pPagî
, 
SHARED_LOCK
);

7325 if–
rc
==
SQLITE_OK
 ){

7326 
rc
 = 
	`sqlôe3OsAc˚ss
(

7327 
pPagî
->
pVfs
,ÖPagî->
zWÆ
, 
SQLITE_ACCESS_EXISTS
, &
logexi°s


7330 if–
rc
==
SQLITE_OK
 && 
logexi°s
 ){

7331 
rc
 = 
	`∑gîO≥nWÆ
(
pPagî
);

7338 if–
rc
==
SQLITE_OK
 && 
pPagî
->
pWÆ
 ){

7339 
rc
 = 
	`∑gîEx˛usiveLock
(
pPagî
);

7340 if–
rc
==
SQLITE_OK
 ){

7341 
rc
 = 
	`sqlôe3WÆClo£
(
pPagî
->
pWÆ
,ÖPagî->
ck±SyncFœgs
,

7342 
pPagî
->
∑geSize
, (
u8
*ÌPagî->
pTmpS∑˚
);

7343 
pPagî
->
pWÆ
 = 0;

7344 
	`∑gîFixM≠limô
(
pPagî
);

7345 if–
rc
 && !
pPagî
->
ex˛usiveMode
 ) 
	`∑gîU∆ockDb
’Pagî, 
SHARED_LOCK
);

7348  
rc
;

7349 
	}
}

7351 #ifde‡
SQLITE_ENABLE_SNAPSHOT


7356 
	$sqlôe3PagîS«pshŸGë
(
Pagî
 *
pPagî
, 
sqlôe3_¢≠shŸ
 **
µS«pshŸ
){

7357 
rc
 = 
SQLITE_ERROR
;

7358 if–
pPagî
->
pWÆ
 ){

7359 
rc
 = 
	`sqlôe3WÆS«pshŸGë
(
pPagî
->
pWÆ
, 
µS«pshŸ
);

7361  
rc
;

7362 
	}
}

7369 
	$sqlôe3PagîS«pshŸO≥n
(
Pagî
 *
pPagî
, 
sqlôe3_¢≠shŸ
 *
pS«pshŸ
){

7370 
rc
 = 
SQLITE_OK
;

7371 if–
pPagî
->
pWÆ
 ){

7372 
	`sqlôe3WÆS«pshŸO≥n
(
pPagî
->
pWÆ
, 
pS«pshŸ
);

7374 
rc
 = 
SQLITE_ERROR
;

7376  
rc
;

7377 
	}
}

7381 #ifde‡
SQLITE_ENABLE_ZIPVFS


7389 
	$sqlôe3PagîWÆFømesize
(
Pagî
 *
pPagî
){

7390 
	`as£π
–
pPagî
->
eSèã
>=
PAGER_READER
 );

7391  
	`sqlôe3WÆFømesize
(
pPagî
->
pWÆ
);

7392 
	}
}

	@pager.h

17 #i‚de‡
_PAGER_H_


18 
	#_PAGER_H_


	)

25 #i‚de‡
SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT


26 
	#SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT
 -1

	)

33 
u32
 
	tPgno
;

38 
Pagî
 
	tPagî
;

43 
PgHdr
 
	tDbPage
;

53 
	#PAGER_MJ_PGNO
(
x
Ë((
Pgno
)((
PENDING_BYTE
/((x)->
∑geSize
))+1))

	)

60 
	#PAGER_OMIT_JOURNAL
 0x0001

	)

61 
	#PAGER_MEMORY
 0x0002

	)

66 
	#PAGER_LOCKINGMODE_QUERY
 -1

	)

67 
	#PAGER_LOCKINGMODE_NORMAL
 0

	)

68 
	#PAGER_LOCKINGMODE_EXCLUSIVE
 1

	)

77 
	#PAGER_JOURNALMODE_QUERY
 (-1Ë

	)

78 
	#PAGER_JOURNALMODE_DELETE
 0

	)

79 
	#PAGER_JOURNALMODE_PERSIST
 1

	)

80 
	#PAGER_JOURNALMODE_OFF
 2

	)

81 
	#PAGER_JOURNALMODE_TRUNCATE
 3

	)

82 
	#PAGER_JOURNALMODE_MEMORY
 4

	)

83 
	#PAGER_JOURNALMODE_WAL
 5

	)

88 
	#PAGER_GET_NOCONTENT
 0x01

	)

89 
	#PAGER_GET_READONLY
 0x02

	)

99 
	#PAGER_SYNCHRONOUS_OFF
 0x01

	)

100 
	#PAGER_SYNCHRONOUS_NORMAL
 0x02

	)

101 
	#PAGER_SYNCHRONOUS_FULL
 0x03

	)

102 
	#PAGER_SYNCHRONOUS_EXTRA
 0x04

	)

103 
	#PAGER_SYNCHRONOUS_MASK
 0x07

	)

104 
	#PAGER_FULLFSYNC
 0x08

	)

105 
	#PAGER_CKPT_FULLFSYNC
 0x10

	)

106 
	#PAGER_CACHESPILL
 0x20

	)

107 
	#PAGER_FLAGS_MASK
 0x38

	)

116 
sqlôe3PagîO≥n
(

117 
sqlôe3_vfs
*,

118 
Pagî
 **
µPagî
,

123 (*)(
DbPage
*)

125 
	`sqlôe3PagîClo£
(
Pagî
 *
pPagî
);

126 
	`sqlôe3PagîRódFûehódî
(
Pagî
*, , *);

129 
	`sqlôe3PagîSëBusyh™dÀr
(
Pagî
*, (*)(*), *);

130 
	`sqlôe3PagîSëPagesize
(
Pagî
*, 
u32
*, );

131 #ifde‡
SQLITE_HAS_CODEC


132 
	`sqlôe3PagîAlignRe£rve
(
Pagî
*,Pager*);

134 
	`sqlôe3PagîMaxPageCou¡
(
Pagî
*, );

135 
	`sqlôe3PagîSëCachesize
(
Pagî
*, );

136 
	`sqlôe3PagîSëSpûlsize
(
Pagî
*, );

137 
	`sqlôe3PagîSëMm≠Limô
(
Pagî
 *, 
sqlôe3_öt64
);

138 
	`sqlôe3PagîShrök
(
Pagî
*);

139 
	`sqlôe3PagîSëFœgs
(
Pagî
*,);

140 
	`sqlôe3PagîLockögMode
(
Pagî
 *, );

141 
	`sqlôe3PagîSëJou∫ÆMode
(
Pagî
 *, );

142 
	`sqlôe3PagîGëJou∫ÆMode
(
Pagî
*);

143 
	`sqlôe3PagîOkToCh™geJou∫ÆMode
(
Pagî
*);

144 
i64
 
	`sqlôe3PagîJou∫ÆSizeLimô
(
Pagî
 *, i64);

145 
sqlôe3_backup
 **
	`sqlôe3PagîBackupPå
(
Pagî
*);

146 
	`sqlôe3PagîFlush
(
Pagî
*);

149 
	`sqlôe3PagîGë
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
, 
DbPage
 **
µPage
, 
˛rFœg
);

150 
DbPage
 *
	`sqlôe3PagîLookup
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
);

151 
	`sqlôe3PagîRef
(
DbPage
*);

152 
	`sqlôe3PagîUƒef
(
DbPage
*);

153 
	`sqlôe3PagîUƒefNŸNuŒ
(
DbPage
*);

156 
	`sqlôe3PagîWrôe
(
DbPage
*);

157 
	`sqlôe3PagîD⁄tWrôe
(
DbPage
*);

158 
	`sqlôe3PagîMovïage
(
Pagî
*,
DbPage
*,
Pgno
,);

159 
	`sqlôe3PagîPageRefcou¡
(
DbPage
*);

160 *
	`sqlôe3PagîGëD©a
(
DbPage
 *);

161 *
	`sqlôe3PagîGëExåa
(
DbPage
 *);

164 
	`sqlôe3PagîPagecou¡
(
Pagî
*, *);

165 
	`sqlôe3PagîBegö
(
Pagî
*, 
exFœg
, );

166 
	`sqlôe3PagîCommôPha£O√
(
Pagî
*,c⁄° *
zMa°î
, );

167 
	`sqlôe3PagîEx˛usiveLock
(
Pagî
*);

168 
	`sqlôe3PagîSync
(
Pagî
 *
pPagî
, c⁄° *
zMa°î
);

169 
	`sqlôe3PagîCommôPha£Two
(
Pagî
*);

170 
	`sqlôe3PagîRﬁlback
(
Pagî
*);

171 
	`sqlôe3PagîO≥nSavïoöt
(
Pagî
 *
pPagî
, 
n
);

172 
	`sqlôe3PagîSavïoöt
(
Pagî
 *
pPagî
, 
›
, 
iSavïoöt
);

173 
	`sqlôe3PagîSh¨edLock
(
Pagî
 *
pPagî
);

175 #i‚de‡
SQLITE_OMIT_WAL


176 
	`sqlôe3PagîCheckpoöt
(
Pagî
 *
pPagî
, , *, *);

177 
	`sqlôe3PagîWÆSuµ‹ãd
(
Pagî
 *
pPagî
);

178 
	`sqlôe3PagîWÆCÆlback
(
Pagî
 *
pPagî
);

179 
	`sqlôe3PagîO≥nWÆ
(
Pagî
 *
pPagî
, *
pisO≥n
);

180 
	`sqlôe3PagîClo£WÆ
(
Pagî
 *
pPagî
);

181 #ifde‡
SQLITE_ENABLE_SNAPSHOT


182 
	`sqlôe3PagîS«pshŸGë
(
Pagî
 *
pPagî
, 
sqlôe3_¢≠shŸ
 **
µS«pshŸ
);

183 
	`sqlôe3PagîS«pshŸO≥n
(
Pagî
 *
pPagî
, 
sqlôe3_¢≠shŸ
 *
pS«pshŸ
);

187 #ifde‡
SQLITE_ENABLE_ZIPVFS


188 
	`sqlôe3PagîWÆFømesize
(
Pagî
 *
pPagî
);

192 
u8
 
	`sqlôe3PagîI§ód⁄ly
(
Pagî
*);

193 
u32
 
	`sqlôe3PagîD©aVîsi⁄
(
Pagî
*);

194 #ifde‡
SQLITE_DEBUG


195 
	`sqlôe3PagîRefcou¡
(
Pagî
*);

197 
	`sqlôe3PagîMemU£d
(
Pagî
*);

198 c⁄° *
	`sqlôe3PagîFûíame
(
Pagî
*, );

199 
sqlôe3_vfs
 *
	`sqlôe3PagîVfs
(
Pagî
*);

200 
sqlôe3_fûe
 *
	`sqlôe3PagîFûe
(
Pagî
*);

201 
sqlôe3_fûe
 *
	`sqlôe3PagîJ∫lFûe
(
Pagî
*);

202 c⁄° *
	`sqlôe3PagîJou∫Æ«me
(
Pagî
*);

203 *
	`sqlôe3PagîTempS∑˚
(
Pagî
*);

204 
	`sqlôe3PagîIsMemdb
(
Pagî
*);

205 
	`sqlôe3PagîCacheSèt
(
Pagî
 *, , , *);

206 
	`sqlôe3PagîCÀ¨Cache
(
Pagî
 *);

207 
	`sqlôe3Se˘‹Size
(
sqlôe3_fûe
 *);

210 
	`sqlôe3PagîTrunˇãImage
(
Pagî
*,
Pgno
);

212 
	`sqlôe3PagîRekey
(
DbPage
*, 
Pgno
, 
u16
);

214 #i‡
	`deföed
(
SQLITE_HAS_CODEC
Ë&& !deföed(
SQLITE_OMIT_WAL
)

215 *
	`sqlôe3PagîCodec
(
DbPage
 *);

219 #i‡!
	`deföed
(
NDEBUG
Ë|| deföed(
SQLITE_TEST
)

220 
Pgno
 
	`sqlôe3PagîPagíumbî
(
DbPage
*);

221 
	`sqlôe3PagîIswrôóbÀ
(
DbPage
*);

223 #ifde‡
SQLITE_TEST


224 *
	`sqlôe3PagîSèts
(
Pagî
*);

225 
	`sqlôe3PagîRefdump
(
Pagî
*);

226 
	`dißbÀ_simuœãd_io_îr‹s
();

227 
	`íabÀ_simuœãd_io_îr‹s
();

229 
	#dißbÀ_simuœãd_io_îr‹s
()

	)

230 
	#íabÀ_simuœãd_io_îr‹s
()

	)

	@parse.y

19 %
tokí_¥efix
 
TK_


24 %
tokí_ty≥
 {
Tokí
}

25 %
deÁu…_ty≥
 {
Tokí
}

28 %
exåa_¨gumít
 {
P¨£
 *
pP¨£
}

32 %
sy¡ax_îr‹
 {

33 
UNUSED_PARAMETER
(
yymaj‹
);

34 
as£π
–
TOKEN
.
z
[0] );

35 
sqlôe3Eº‹Msg
(
pP¨£
, "√¨ \"%T\": sy¡axÉº‹", &
TOKEN
);

37 %
°ack_ovîÊow
 {

38 
sqlôe3Eº‹Msg
(
pP¨£
, "parser stack overflow");

43 %
«me
 
sqlôe3P¨£r


48 %
ö˛ude
 {

49 
	~"sqlôeI¡.h
"

55 
	#YYNOERRORRECOVERY
 1

	)

60 
	#yyã°ˇ£
(
X
Ë
	`ã°ˇ£
(X)

	)

66 
	#YYPARSEFREENEVERNULL
 1

	)

72 
	#YYMALLOCARGTYPE
 
u64


	)

78 
	sLimôVÆ
 {

79 
Ex¥
 *
pLimô
;

80 
Ex¥
 *
pOff£t
;

87 
	sLikeOp
 {

88 
Tokí
 
eO≥øt‹
;

89 
bNŸ
;

101 
	sTrigEvít
 { 
a
; 
IdLi°
 * 
b
; };

106 
	sAâachKey
 { 
ty≥
; 
Tokí
 
key
; };

112 
dißbÀLookaside
(
P¨£
 *
pP¨£
){

113 
pP¨£
->
dißbÀLookaside
++;

114 
pP¨£
->
db
->
lookaside
.
bDißbÀ
++;

120 
öput
 ::
cmdli°
.

121 
cmdli°
 ::cmdli° 
ecmd
.

122 
cmdli°
 ::
ecmd
.

123 
ecmd
 ::
SEMI
.

124 
ecmd
 ::
ex∂aö
 
cmdx
 
SEMI
.

125 
ex∂aö
 ::= .

126 %
i‚def
 
SQLITE_OMIT_EXPLAIN


127 
ex∂aö
 ::
EXPLAIN
. { 
pP¨£
->explain = 1; }

128 
ex∂aö
 ::
EXPLAIN
 
QUERY
 
PLAN
. { 
pP¨£
->explain = 2; }

129 %
ídif
 
SQLITE_OMIT_EXPLAIN


130 
cmdx
 ::
cmd
. { 
sqlôe3FöishCodög
(
pP¨£
); }

135 
cmd
 ::
BEGIN
 
	$å™°y≥
(
Y
Ë
å™s_›t
. {
	`sqlôe3BegöTønß˘i⁄
(
pP¨£
, Y);
	}
}

136 
å™s_›t
 ::= .

137 
å™s_›t
 ::
TRANSACTION
.

138 
å™s_›t
 ::
TRANSACTION
 
nm
.

139 %
ty≥
 
å™°y≥
 {}

140 
	$å™°y≥
(
A
Ë::. {A = 
TK_DEFERRED
;
	}
}

141 
	$å™°y≥
(
A
Ë::
	`DEFERRED
(
X
). {A = @X; 
	}
}

142 
	$å™°y≥
(
A
Ë::
	`IMMEDIATE
(
X
). {A = @X; 
	}
}

143 
	$å™°y≥
(
A
Ë::
	`EXCLUSIVE
(
X
). {A = @X; 
	}
}

144 
cmd
 ::
COMMIT
 
å™s_›t
. {
sqlôe3CommôTønß˘i⁄
(
pP¨£
);}

145 
cmd
 ::
END
 
å™s_›t
. {
sqlôe3CommôTønß˘i⁄
(
pP¨£
);}

146 
cmd
 ::
ROLLBACK
 
å™s_›t
. {
sqlôe3RﬁlbackTønß˘i⁄
(
pP¨£
);}

148 
ßvïoöt_›t
 ::
SAVEPOINT
.

149 
ßvïoöt_›t
 ::= .

150 
cmd
 ::
SAVEPOINT
 
nm
(
X
). {

151 
sqlôe3Savïoöt
(
pP¨£
, 
SAVEPOINT_BEGIN
, &
X
);

153 
cmd
 ::
RELEASE
 
ßvïoöt_›t
 
nm
(
X
). {

154 
sqlôe3Savïoöt
(
pP¨£
, 
SAVEPOINT_RELEASE
, &
X
);

156 
cmd
 ::
ROLLBACK
 
å™s_›t
 
TO
 
ßvïoöt_›t
 
nm
(
X
). {

157 
sqlôe3Savïoöt
(
pP¨£
, 
SAVEPOINT_ROLLBACK
, &
X
);

162 
cmd
 ::
¸óã_èbÀ
 
¸óã_èbÀ_¨gs
.

163 
¸óã_èbÀ
 ::
¸óãkw
 
	$ãmp
(
T
Ë
TABLE
 
	$i‚Ÿexi°s
(
E
Ë
	$nm
(
Y
Ë
	`dbnm
(
Z
). {

164 
	`sqlôe3SèπTabÀ
(
pP¨£
,&
Y
,&
Z
,
T
,0,0,
E
);

165 
	}
}

166 
	$¸óãkw
(
A
Ë::
	`CREATE
(A). {
	`dißbÀLookaside
(
pP¨£
);
	}
}

168 %
ty≥
 
i‚Ÿexi°s
 {}

169 
	$i‚Ÿexi°s
(
A
Ë::. {A = 0;
	}
}

170 
	$i‚Ÿexi°s
(
A
Ë::
IF
 
NOT
 
EXISTS
. {A = 1;
	}
}

171 %
ty≥
 
ãmp
 {}

172 %
i‚def
 
SQLITE_OMIT_TEMPDB


173 
	$ãmp
(
A
Ë::
TEMP
. {A = 1;
	}
}

174 %
ídif
 
SQLITE_OMIT_TEMPDB


175 
	$ãmp
(
A
Ë::. {A = 0;
	}
}

176 
¸óã_èbÀ_¨gs
 ::
LP
 
cﬁum∆i°
 
	$c⁄¶i°_›t
(
X
Ë
	$RP
(
E
Ë
	`èbÀ_›ti⁄s
(
F
). {

177 
	`sqlôe3EndTabÀ
(
pP¨£
,&
X
,&
E
,
F
,0);

178 
	}
}

179 
¸óã_èbÀ_¨gs
 ::
AS
 
£À˘
(
S
). {

180 
sqlôe3EndTabÀ
(
pP¨£
,0,0,0,
S
);

181 
sqlôe3Sñe˘Dñëe
(
pP¨£
->
db
, 
S
);

183 %
ty≥
 
èbÀ_›ti⁄s
 {}

184 
	$èbÀ_›ti⁄s
(
A
Ë::. {A = 0;
	}
}

185 
	$èbÀ_›ti⁄s
(
A
Ë::
WITHOUT
 
	`nm
(
X
). {

186 if–
X
.
n
==5 && 
	`sqlôe3_°∫icmp
(X.
z
,"rowid",5)==0 ){

187 
A
 = 
TF_WôhoutRowid
 | 
TF_NoVisibÀRowid
;

189 
A
 = 0;

190 
	`sqlôe3Eº‹Msg
(
pP¨£
, "unknow¿èbÀ o±i⁄: %.*s", 
X
.
n
, X.
z
);

192 
	}
}

193 
cﬁum∆i°
 ::cﬁum∆i° 
COMMA
 
cﬁum¬ame
 
ˇrgli°
.

194 
cﬁum∆i°
 ::
cﬁum¬ame
 
ˇrgli°
.

195 
	$cﬁum¬ame
(
A
Ë::
	$nm
(
A
Ë
	`ty≥tokí
(
Y
). {
	`sqlôe3AddCﬁumn
(
pP¨£
,&A,&Y);
	}
}

208 %
À·
 
OR
.

209 %
À·
 
AND
.

210 %
right
 
NOT
.

211 %
À·
 
IS
 
MATCH
 
LIKE_KW
 
BETWEEN
 
IN
 
ISNULL
 
NOTNULL
 
NE
 
EQ
.

212 %
À·
 
GT
 
LE
 
LT
 
GE
.

213 %
right
 
ESCAPE
.

214 %
À·
 
BITAND
 
BITOR
 
LSHIFT
 
RSHIFT
.

215 %
À·
 
PLUS
 
MINUS
.

216 %
À·
 
STAR
 
SLASH
 
REM
.

217 %
À·
 
CONCAT
.

218 %
À·
 
COLLATE
.

219 %
right
 
BITNOT
.

224 %
tokí_˛ass
 
id
 
ID
|
INDEXED
.

230 %
ÁŒback
 
ID


231 
ABORT
 
ACTION
 
AFTER
 
ANALYZE
 
ASC
 
ATTACH
 
BEFORE
 
BEGIN
 
BY
 
CASCADE
 
CAST
 
COLUMNKW


232 
CONFLICT
 
DATABASE
 
DEFERRED
 
DESC
 
DETACH
 
EACH
 
END
 
EXCLUSIVE
 
EXPLAIN
 
FAIL
 
FOR


233 
IGNORE
 
IMMEDIATE
 
INITIALLY
 
INSTEAD
 
LIKE_KW
 
MATCH
 
NO
 
PLAN


234 
QUERY
 
KEY
 
OF
 
OFFSET
 
PRAGMA
 
RAISE
 
RECURSIVE
 
RELEASE
 
REPLACE
 
RESTRICT
 
ROW


235 
ROLLBACK
 
SAVEPOINT
 
TEMP
 
TRIGGER
 
VACUUM
 
VIEW
 
VIRTUAL
 
WITH
 
WITHOUT


236 %
ifdef
 
SQLITE_OMIT_COMPOUND_SELECT


237 
EXCEPT
 
INTERSECT
 
UNION


238 %
ídif
 
SQLITE_OMIT_COMPOUND_SELECT


239 
REINDEX
 
RENAME
 
CTIME_KW
 
IF


241 %
wûdˇrd
 
ANY
.

246 %
tokí_˛ass
 
ids
 
ID
|
STRING
.

250 %
ty≥
 
nm
 {
Tokí
}

251 
	$nm
(
A
Ë::
	`id
(A).

252 
	$nm
(
A
Ë::
	`STRING
(A).

253 
	$nm
(
A
Ë::
	`JOIN_KW
(A).

259 %
ty≥
 
ty≥tokí
 {
Tokí
}

260 
	$ty≥tokí
(
A
Ë::. {A.
n
 = 0; A.
z
 = 0;
	}
}

261 
	$ty≥tokí
(
A
Ë::
	`ty≥«me
(A).

262 
	$ty≥tokí
(
A
Ë::
	$ty≥«me
(
A
Ë
LP
 sig√d 
	`RP
(
Y
). {

263 
A
.
n
 = ()(&
Y
.
z
[Y.n] - A.z);

264 
	}
}

265 
	$ty≥tokí
(
A
Ë::
	$ty≥«me
(
A
Ë
LP
 sig√d 
COMMA
 sig√d 
	`RP
(
Y
). {

266 
A
.
n
 = ()(&
Y
.
z
[Y.n] - A.z);

267 
	}
}

268 %
ty≥
 
ty≥«me
 {
Tokí
}

269 
	$ty≥«me
(
A
Ë::
	`ids
(A).

270 
	$ty≥«me
(
A
Ë::
	$ty≥«me
(
A
Ë
	`ids
(
Y
). {A.
n
=Y.n+()(Y.
z
-A.z);
	}
}

271 sig√d ::
∂us_num
.

272 sig√d ::
möus_num
.

277 
ˇrgli°
 ::ˇrgli° 
cc⁄s
.

278 
ˇrgli°
 ::= .

279 
cc⁄s
 ::
CONSTRAINT
 
nm
(
X
). {
pP¨£
->
c⁄°øötName
 = X;}

280 
cc⁄s
 ::
DEFAULT
 
ãrm
(
X
). {
sqlôe3AddDeÁu…VÆue
(
pP¨£
,&X);}

281 
cc⁄s
 ::
DEFAULT
 
LP
 
	$ex¥
(
X
Ë
RP
. {
	`sqlôe3AddDeÁu…VÆue
(
pP¨£
,&X);
	}
}

282 
cc⁄s
 ::
DEFAULT
 
PLUS
 
ãrm
(
X
). {
sqlôe3AddDeÁu…VÆue
(
pP¨£
,&X);}

283 
cc⁄s
 ::
DEFAULT
 
	$MINUS
(
A
Ë
	`ãrm
(
X
). {

284 
Ex¥S∑n
 
v
;

285 
v
.
pEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_UMINUS
, 
X
.pExpr, 0, 0);

286 
v
.
zSèπ
 = 
A
.
z
;

287 
v
.
zEnd
 = 
X
.zEnd;

288 
	`sqlôe3AddDeÁu…VÆue
(
pP¨£
,&
v
);

289 
	}
}

290 
cc⁄s
 ::
DEFAULT
 
id
(
X
). {

291 
Ex¥S∑n
 
v
;

292 
•™Ex¥
(&
v
, 
pP¨£
, 
TK_STRING
, 
X
);

293 
sqlôe3AddDeÁu…VÆue
(
pP¨£
,&
v
);

299 
cc⁄s
 ::
NULL
 
⁄c⁄f
.

300 
cc⁄s
 ::
NOT
 
NULL
 
⁄c⁄f
(
R
). {
sqlôe3AddNŸNuŒ
(
pP¨£
, R);}

301 
cc⁄s
 ::
PRIMARY
 
KEY
 
	$s‹t‹dî
(
Z
Ë
	$⁄c⁄f
(
R
Ë
	`autoöc
(
I
).

302 {
	`sqlôe3AddPrim¨yKey
(
pP¨£
,0,
R
,
I
,
Z
);
	}
}

303 
cc⁄s
 ::
UNIQUE
 
⁄c⁄f
(
R
). {
sqlôe3Cª©eIndex
(
pP¨£
,0,0,0,0,R,0,0,0,0);}

304 
cc⁄s
 ::
CHECK
 
LP
 
	$ex¥
(
X
Ë
RP
. {
	`sqlôe3AddCheckC⁄°øöt
(
pP¨£
,X.
pEx¥
);
	}
}

305 
cc⁄s
 ::
REFERENCES
 
	$nm
(
T
Ë
	$eidli°_›t
(
TA
Ë
	`ªÁrgs
(
R
).

306 {
	`sqlôe3Cª©eF‹eignKey
(
pP¨£
,0,&
T
,
TA
,
R
);
	}
}

307 
cc⁄s
 ::
de„r_sub˛au£
(
D
). {
sqlôe3De„rF‹eignKey
(
pP¨£
,D);}

308 
cc⁄s
 ::
COLLATE
 
ids
(
C
). {
sqlôe3AddCﬁœãTy≥
(
pP¨£
, &C);}

311 %
ty≥
 
autoöc
 {}

312 
	$autoöc
(
X
Ë::. {X = 0;
	}
}

313 
	$autoöc
(
X
Ë::
AUTOINCR
. {X = 1;
	}
}

320 %
ty≥
 
ªÁrgs
 {}

321 
	$ªÁrgs
(
A
Ë::. { A = 
OE_N⁄e
*0x0101; 
	}
}

322 
	$ªÁrgs
(
A
Ë::
	$ªÁrgs
(
A
Ë
	`ªÁrg
(
Y
). { A = (A & ~Y.
mask
Ë| Y.
vÆue
; 
	}
}

323 %
ty≥
 
ªÁrg
 {°ru˘ {
vÆue
; 
mask
;}}

324 
	$ªÁrg
(
A
Ë::
MATCH
 
nm
. { A.
vÆue
 = 0; A.
mask
 = 0x000000; 
	}
}

325 
	$ªÁrg
(
A
Ë::
ON
 
INSERT
 
ªÁ˘
. { A.
vÆue
 = 0; A.
mask
 = 0x000000; 
	}
}

326 
	$ªÁrg
(
A
Ë::
ON
 
DELETE
 
	`ªÁ˘
(
X
). { A.
vÆue
 = X; A.
mask
 = 0x0000ff; 
	}
}

327 
	$ªÁrg
(
A
Ë::
ON
 
UPDATE
 
	`ªÁ˘
(
X
). { A.
vÆue
 = X<<8; A.
mask
 = 0x00ff00; 
	}
}

328 %
ty≥
 
ªÁ˘
 {}

329 
	$ªÁ˘
(
A
Ë::
SET
 
NULL
. { A = 
OE_SëNuŒ
; 
	}
}

330 
	$ªÁ˘
(
A
Ë::
SET
 
DEFAULT
. { A = 
OE_SëDÊt
; 
	}
}

331 
	$ªÁ˘
(
A
Ë::
CASCADE
. { A = 
OE_Casˇde
; 
	}
}

332 
	$ªÁ˘
(
A
Ë::
RESTRICT
. { A = 
OE_Re°ri˘
; 
	}
}

333 
	$ªÁ˘
(
A
Ë::
NO
 
ACTION
. { A = 
OE_N⁄e
; 
	}
}

334 %
ty≥
 
de„r_sub˛au£
 {}

335 
	$de„r_sub˛au£
(
A
Ë::
NOT
 
DEFERRABLE
 
öô_de„ºed_¥ed_›t
. {A = 0;
	}
}

336 
	$de„r_sub˛au£
(
A
Ë::
DEFERRABLE
 
	`öô_de„ºed_¥ed_›t
(
X
). {A = X;
	}
}

337 %
ty≥
 
öô_de„ºed_¥ed_›t
 {}

338 
	$öô_de„ºed_¥ed_›t
(
A
Ë::. {A = 0;
	}
}

339 
	$öô_de„ºed_¥ed_›t
(
A
Ë::
INITIALLY
 
DEFERRED
. {A = 1;
	}
}

340 
	$öô_de„ºed_¥ed_›t
(
A
Ë::
INITIALLY
 
IMMEDIATE
. {A = 0;
	}
}

342 
	$c⁄¶i°_›t
(
A
Ë::. {A.
n
 = 0; A.
z
 = 0;
	}
}

343 
	$c⁄¶i°_›t
(
A
Ë::
	$COMMA
(
A
Ë
c⁄¶i°
.

344 
c⁄¶i°
 ::c⁄¶i° 
tc⁄scomma
 
tc⁄s
.

345 
c⁄¶i°
 ::
tc⁄s
.

346 
tc⁄scomma
 ::
COMMA
. {
pP¨£
->
c⁄°øötName
.
n
 = 0;
	}
}

347 
tc⁄scomma
 ::= .

348 
tc⁄s
 ::
CONSTRAINT
 
nm
(
X
). {
pP¨£
->
c⁄°øötName
 = X;}

349 
tc⁄s
 ::
PRIMARY
 
KEY
 
LP
 
	$s‹éi°
(
X
Ë
	$autoöc
(
I
Ë
RP
 
	`⁄c⁄f
(
R
).

350 {
	`sqlôe3AddPrim¨yKey
(
pP¨£
,
X
,
R
,
I
,0);
	}
}

351 
tc⁄s
 ::
UNIQUE
 
LP
 
	$s‹éi°
(
X
Ë
RP
 
	`⁄c⁄f
(
R
).

352 {
	`sqlôe3Cª©eIndex
(
pP¨£
,0,0,0,
X
,
R
,0,0,0,0);
	}
}

353 
tc⁄s
 ::
CHECK
 
LP
 
	$ex¥
(
E
Ë
RP
 
⁄c⁄f
.

354 {
	`sqlôe3AddCheckC⁄°øöt
(
pP¨£
,
E
.
pEx¥
);
	}
}

355 
tc⁄s
 ::
FOREIGN
 
KEY
 
LP
 
	$eidli°
(
FA
Ë
RP


356 
REFERENCES
 
	$nm
(
T
Ë
	$eidli°_›t
(
TA
Ë
	$ªÁrgs
(
R
Ë
	`de„r_sub˛au£_›t
(
D
). {

357 
	`sqlôe3Cª©eF‹eignKey
(
pP¨£
, 
FA
, &
T
, 
TA
, 
R
);

358 
	`sqlôe3De„rF‹eignKey
(
pP¨£
, 
D
);

359 
	}
}

360 %
ty≥
 
de„r_sub˛au£_›t
 {}

361 
	$de„r_sub˛au£_›t
(
A
Ë::. {A = 0;
	}
}

362 
	$de„r_sub˛au£_›t
(
A
Ë::
	`de„r_sub˛au£
(A).

367 %
ty≥
 
⁄c⁄f
 {
	}
}

368 %
ty≥
 
‹c⁄f
 {}

369 %
ty≥
 
ªsﬁvëy≥
 {}

370 
	$⁄c⁄f
(
A
Ë::. {A = 
OE_DeÁu…
;
	}
}

371 
	$⁄c⁄f
(
A
Ë::
ON
 
CONFLICT
 
	`ªsﬁvëy≥
(
X
). {A = X;
	}
}

372 
	$‹c⁄f
(
A
Ë::. {A = 
OE_DeÁu…
;
	}
}

373 
	$‹c⁄f
(
A
Ë::
OR
 
	`ªsﬁvëy≥
(
X
). {A = X;
	}
}

374 
	$ªsﬁvëy≥
(
A
Ë::
	`øi£ty≥
(A).

375 
	$ªsﬁvëy≥
(
A
Ë::
IGNORE
. {A = 
OE_Ign‹e
;
	}
}

376 
	$ªsﬁvëy≥
(
A
Ë::
REPLACE
. {A = 
OE_Rïœ˚
;
	}
}

380 
cmd
 ::
DROP
 
TABLE
 
	$i„xi°s
(
E
Ë
	`fuŒ«me
(
X
). {

381 
	`sqlôe3Dr›TabÀ
(
pP¨£
, 
X
, 0, 
E
);

382 
	}
}

383 %
ty≥
 
i„xi°s
 {}

384 
	$i„xi°s
(
A
Ë::
IF
 
EXISTS
. {A = 1;
	}
}

385 
	$i„xi°s
(
A
Ë::. {A = 0;
	}
}

389 %
i‚def
 
SQLITE_OMIT_VIEW


390 
cmd
 ::
	$¸óãkw
(
X
Ë
	$ãmp
(
T
Ë
VIEW
 
	$i‚Ÿexi°s
(
E
Ë
	$nm
(
Y
Ë
	$dbnm
(
Z
Ë
	$eidli°_›t
(
C
)

391 
AS
 
	`£À˘
(
S
). {

392 
	`sqlôe3Cª©eVõw
(
pP¨£
, &
X
, &
Y
, &
Z
, 
C
, 
S
, 
T
, 
E
);

393 
	}
}

394 
cmd
 ::
DROP
 
VIEW
 
	$i„xi°s
(
E
Ë
	`fuŒ«me
(
X
). {

395 
	`sqlôe3Dr›TabÀ
(
pP¨£
, 
X
, 1, 
E
);

396 
	}
}

397 %
ídif
 
SQLITE_OMIT_VIEW


401 
cmd
 ::
£À˘
(
X
). {

402 
Sñe˘De°
 
de°
 = {
SRT_Ouçut
, 0, 0, 0, 0, 0};

403 
sqlôe3Sñe˘
(
pP¨£
, 
X
, &
de°
);

404 
sqlôe3Sñe˘Dñëe
(
pP¨£
->
db
, 
X
);

407 %
ty≥
 
£À˘
 {
Sñe˘
*}

408 %
de°ru˘‹
 
£À˘
 {
sqlôe3Sñe˘Dñëe
(
pP¨£
->
db
, 
$$
);}

409 %
ty≥
 
£À˘nowôh
 {
Sñe˘
*}

410 %
de°ru˘‹
 
£À˘nowôh
 {
sqlôe3Sñe˘Dñëe
(
pP¨£
->
db
, 
$$
);}

411 %
ty≥
 
⁄e£À˘
 {
Sñe˘
*}

412 %
de°ru˘‹
 
⁄e£À˘
 {
sqlôe3Sñe˘Dñëe
(
pP¨£
->
db
, 
$$
);}

414 %
ö˛ude
 {

420 
∑r£rDoubÀLökSñe˘
(
P¨£
 *
pP¨£
, 
Sñe˘
 *
p
){

421 if–
p
->
pPri‹
 ){

422 
Sñe˘
 *
pNext
 = 0, *
pLo›
;

423 
mxSñe˘
, 
˙t
 = 0;

424 
pLo›
=
p
;ÖLo›; 
pNext
ıLo›,ÖLo›ıLo›->
pPri‹
, 
˙t
++){

425 
pLo›
->
pNext
 =ÖNext;

426 
pLo›
->
£lFœgs
 |
SF_Compound
;

428 if–(
p
->
£lFœgs
 & 
SF_Mu…iVÆue
)==0 &&

429 (
mxSñe˘
 = 
pP¨£
->
db
->
aLimô
[
SQLITE_LIMIT_COMPOUND_SELECT
])>0 &&

430 
˙t
>
mxSñe˘


432 
sqlôe3Eº‹Msg
(
pP¨£
, "too manyÅerms in compound SELECT");

438 
	$£À˘
(
A
Ë::
	$wôh
(
W
Ë
	`£À˘nowôh
(
X
). {

439 
Sñe˘
 *
p
 = 
X
;

440 if–
p
 ){

441 
p
->
pWôh
 = 
W
;

442 
	`∑r£rDoubÀLökSñe˘
(
pP¨£
, 
p
);

444 
	`sqlôe3WôhDñëe
(
pP¨£
->
db
, 
W
);

446 
A
 = 
p
;

447 
	}
}

449 
	$£À˘nowôh
(
A
Ë::
	`⁄e£À˘
(A).

450 %
i‚def
 
SQLITE_OMIT_COMPOUND_SELECT


451 
	$£À˘nowôh
(
A
Ë::
	$£À˘nowôh
(
A
Ë
	$mu…i£À˘_›
(
Y
Ë
	`⁄e£À˘
(
Z
). {

452 
Sñe˘
 *
pRhs
 = 
Z
;

453 
Sñe˘
 *
pLhs
 = 
A
;

454 if–
pRhs
 &&ÖRhs->
pPri‹
 ){

455 
SrcLi°
 *
pFrom
;

456 
Tokí
 
x
;

457 
x
.
n
 = 0;

458 
	`∑r£rDoubÀLökSñe˘
(
pP¨£
, 
pRhs
);

459 
pFrom
 = 
	`sqlôe3SrcLi°AµídFromTîm
(
pP¨£
,0,0,0,&
x
,
pRhs
,0,0);

460 
pRhs
 = 
	`sqlôe3Sñe˘New
(
pP¨£
,0,
pFrom
,0,0,0,0,0,0,0);

462 if–
pRhs
 ){

463 
pRhs
->
›
 = (
u8
)
Y
;

464 
pRhs
->
pPri‹
 = 
pLhs
;

465 if–
	`ALWAYS
(
pLhs
ËËpLhs->
£lFœgs
 &~
SF_Mu…iVÆue
;

466 
pRhs
->
£lFœgs
 &~
SF_Mu…iVÆue
;

467 if–
Y
!=
TK_ALL
 ) 
pP¨£
->
hasCompound
 = 1;

469 
	`sqlôe3Sñe˘Dñëe
(
pP¨£
->
db
, 
pLhs
);

471 
A
 = 
pRhs
;

472 
	}
}

473 %
ty≥
 
mu…i£À˘_›
 {}

474 
	$mu…i£À˘_›
(
A
Ë::
	`UNION
(
OP
). {A = @OP; 
	}
}

475 
	$mu…i£À˘_›
(
A
Ë::
UNION
 
ALL
. {A = 
TK_ALL
;
	}
}

476 
	$mu…i£À˘_›
(
A
Ë::
EXCEPT
|
	`INTERSECT
(
OP
). {A = @OP; 
	}
}

477 %
ídif
 
SQLITE_OMIT_COMPOUND_SELECT


478 
	$⁄e£À˘
(
A
Ë::
	$SELECT
(
S
Ë
	$di°ö˘
(
D
Ë
	$£lcﬁli°
(
W
Ë
	$‰om
(
X
Ë
	$whîe_›t
(
Y
)

479 
	$groupby_›t
(
P
Ë
	$havög_›t
(
Q
Ë
	$‹dîby_›t
(
Z
Ë
	`limô_›t
(
L
). {

480 #i‡
SELECTTRACE_ENABLED


481 
Tokí
 
s
 = 
S
;

483 
A
 = 
	`sqlôe3Sñe˘New
(
pP¨£
,
W
,
X
,
Y
,
P
,
Q
,
Z
,
D
,
L
.
pLimô
,L.
pOff£t
);

484 #i‡
SELECTTRACE_ENABLED


494 if–
A
!=0 ){

495 c⁄° *
z
 = 
s
.z+6;

496 
i
;

497 
	`sqlôe3_¢¥ötf
((
A
->
zSñName
), A->zSelName, "#%d",

498 ++
pP¨£
->
nSñe˘
);

499  
z
[0]==' ' ) z++;

500 if–
z
[0]=='/' && z[1]=='*' ){

501 
z
 += 2;

502  
z
[0]==' ' ) z++;

503 
i
=0; 
	`sqlôe3Iß um
(
z
[i]); i++){}

504 
	`sqlôe3_¢¥ötf
((
A
->
zSñName
), A->zSñName, "%.*s", 
i
, 
z
);

508 
	}
}

509 
	$⁄e£À˘
(
A
Ë::
	`vÆues
(A).

511 %
ty≥
 
vÆues
 {
Sñe˘
*
	}
}

512 %
de°ru˘‹
 
vÆues
 {
sqlôe3Sñe˘Dñëe
(
pP¨£
->
db
, 
$$
);}

513 
	$vÆues
(
A
Ë::
VALUES
 
LP
 
	$√x¥li°
(
X
Ë
RP
. {

514 
A
 = 
	`sqlôe3Sñe˘New
(
pP¨£
,
X
,0,0,0,0,0,
SF_VÆues
,0,0);

515 
	}
}

516 
	$vÆues
(
A
Ë::
	$vÆues
(
A
Ë
COMMA
 
LP
 
	$ex¥li°
(
Y
Ë
RP
. {

517 
Sñe˘
 *
pRight
, *
pLe·
 = 
A
;

518 
pRight
 = 
	`sqlôe3Sñe˘New
(
pP¨£
,
Y
,0,0,0,0,0,
SF_VÆues
|
SF_Mu…iVÆue
,0,0);

519 if–
	`ALWAYS
(
pLe·
ËËpLe·->
£lFœgs
 &~
SF_Mu…iVÆue
;

520 if–
pRight
 ){

521 
pRight
->
›
 = 
TK_ALL
;

522 
pRight
->
pPri‹
 = 
pLe·
;

523 
A
 = 
pRight
;

525 
A
 = 
pLe·
;

527 
	}
}

532 %
ty≥
 
di°ö˘
 {}

533 
	$di°ö˘
(
A
Ë::
DISTINCT
. {A = 
SF_Di°ö˘
;
	}
}

534 
	$di°ö˘
(
A
Ë::
ALL
. {A = 
SF_AŒ
;
	}
}

535 
	$di°ö˘
(
A
Ë::. {A = 0;
	}
}

542 %
ty≥
 
£lcﬁli°
 {
Ex¥Li°
*}

543 %
de°ru˘‹
 
£lcﬁli°
 {
sqlôe3Ex¥Li°Dñëe
(
pP¨£
->
db
, 
$$
);}

544 %
ty≥
 
s˛p
 {
Ex¥Li°
*}

545 %
de°ru˘‹
 
s˛p
 {
sqlôe3Ex¥Li°Dñëe
(
pP¨£
->
db
, 
$$
);}

546 
	$s˛p
(
A
Ë::
	$£lcﬁli°
(
A
Ë
COMMA
.

547 
	$s˛p
(
A
Ë::. {A = 0;
	}
}

548 
	$£lcﬁli°
(
A
Ë::
	$s˛p
(
A
Ë
	$ex¥
(
X
Ë
	`as
(
Y
). {

549 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
, A, 
X
.
pEx¥
);

550 if–
Y
.
n
>0 ) 
	`sqlôe3Ex¥Li°SëName
(
pP¨£
, 
A
, &Y, 1);

551 
	`sqlôe3Ex¥Li°SëS∑n
(
pP¨£
,
A
,&
X
);

552 
	}
}

553 
	$£lcﬁli°
(
A
Ë::
	$s˛p
(
A
Ë
STAR
. {

554 
Ex¥
 *
p
 = 
	`sqlôe3Ex¥
(
pP¨£
->
db
, 
TK_ASTERISK
, 0);

555 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
, A, 
p
);

556 
	}
}

557 
	$£lcﬁli°
(
A
Ë::
	$s˛p
(
A
Ë
	$nm
(
X
Ë
DOT
 
	`STAR
(
Y
). {

558 
Ex¥
 *
pRight
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_ASTERISK
, 0, 0, &
Y
);

559 
Ex¥
 *
pLe·
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_ID
, 0, 0, &
X
);

560 
Ex¥
 *
pDŸ
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_DOT
, 
pLe·
, 
pRight
, 0);

561 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,A, 
pDŸ
);

562 
	}
}

567 %
ty≥
 
as
 {
Tokí
}

568 
	$as
(
X
Ë::
AS
 
	`nm
(
Y
). {X = Y;
	}
}

569 
	$as
(
X
Ë::
	`ids
(X).

570 
	$as
(
X
Ë::. {X.
n
 = 0; X.
z
 = 0;
	}
}

573 %
ty≥
 
£…abli°
 {
SrcLi°
*}

574 %
de°ru˘‹
 
£…abli°
 {
sqlôe3SrcLi°Dñëe
(
pP¨£
->
db
, 
$$
);}

575 %
ty≥
 
°l_¥efix
 {
SrcLi°
*}

576 %
de°ru˘‹
 
°l_¥efix
 {
sqlôe3SrcLi°Dñëe
(
pP¨£
->
db
, 
$$
);}

577 %
ty≥
 
‰om
 {
SrcLi°
*}

578 %
de°ru˘‹
 
‰om
 {
sqlôe3SrcLi°Dñëe
(
pP¨£
->
db
, 
$$
);}

582 
	$‰om
(
A
Ë::. {A = 
	`sqlôe3DbMÆlocZîo
(
pP¨£
->
db
, (*A));
	}
}

583 
	$‰om
(
A
Ë::
FROM
 
	`£…abli°
(
X
). {

584 
A
 = 
X
;

585 
	`sqlôe3SrcLi°Shi·JoöTy≥
(
A
);

586 
	}
}

591 
	$°l_¥efix
(
A
Ë::
	$£…abli°
(
A
Ë
	`joö›
(
Y
). {

592 if–
	`ALWAYS
(
A
 && A->
nSrc
>0ËËA->
a
[A->nSrc-1].
fg
.
joöty≥
 = (
u8
)
Y
;

593 
	}
}

594 
	$°l_¥efix
(
A
Ë::. {A = 0;
	}
}

595 
	$£…abli°
(
A
Ë::
	$°l_¥efix
(
A
Ë
	$nm
(
Y
Ë
	$dbnm
(
D
Ë
	$as
(
Z
Ë
	$ödexed_›t
(
I
)

596 
	$⁄_›t
(
N
Ë
	`usög_›t
(
U
). {

597 
A
 = 
	`sqlôe3SrcLi°AµídFromTîm
(
pP¨£
,A,&
Y
,&
D
,&
Z
,0,
N
,
U
);

598 
	`sqlôe3SrcLi°IndexedBy
(
pP¨£
, 
A
, &
I
);

599 
	}
}

600 
	$£…abli°
(
A
Ë::
	$°l_¥efix
(
A
Ë
	$nm
(
Y
Ë
	$dbnm
(
D
Ë
LP
 
	$ex¥li°
(
E
Ë
RP
 
	$as
(
Z
)

601 
	$⁄_›t
(
N
Ë
	`usög_›t
(
U
). {

602 
A
 = 
	`sqlôe3SrcLi°AµídFromTîm
(
pP¨£
,A,&
Y
,&
D
,&
Z
,0,
N
,
U
);

603 
	`sqlôe3SrcLi°FuncArgs
(
pP¨£
, 
A
, 
E
);

604 
	}
}

605 %
i‚def
 
SQLITE_OMIT_SUBQUERY


606 
	$£…abli°
(
A
Ë::
	$°l_¥efix
(
A
Ë
LP
 
	$£À˘
(
S
Ë
RP


607 
	$as
(
Z
Ë
	$⁄_›t
(
N
Ë
	`usög_›t
(
U
). {

608 
A
 = 
	`sqlôe3SrcLi°AµídFromTîm
(
pP¨£
,A,0,0,&
Z
,
S
,
N
,
U
);

609 
	}
}

610 
	$£…abli°
(
A
Ë::
	$°l_¥efix
(
A
Ë
LP
 
	$£…abli°
(
F
Ë
RP


611 
	$as
(
Z
Ë
	$⁄_›t
(
N
Ë
	`usög_›t
(
U
). {

612 if–
A
==0 && 
Z
.
n
==0 && 
N
==0 && 
U
==0 ){

613 
A
 = 
F
;

614 }if–
F
->
nSrc
==1 ){

615 
A
 = 
	`sqlôe3SrcLi°AµídFromTîm
(
pP¨£
,A,0,0,&
Z
,0,
N
,
U
);

616 if–
A
 ){

617 
SrcLi°_ôem
 *
pNew
 = &
A
->
a
[A->
nSrc
-1];

618 
SrcLi°_ôem
 *
pOld
 = 
F
->
a
;

619 
pNew
->
zName
 = 
pOld
->zName;

620 
pNew
->
zD©aba£
 = 
pOld
->zDatabase;

621 
pNew
->
pSñe˘
 = 
pOld
->pSelect;

622 
pOld
->
zName
 =ÖOld->
zD©aba£
 = 0;

623 
pOld
->
pSñe˘
 = 0;

625 
	`sqlôe3SrcLi°Dñëe
(
pP¨£
->
db
, 
F
);

627 
Sñe˘
 *
pSubquîy
;

628 
	`sqlôe3SrcLi°Shi·JoöTy≥
(
F
);

629 
pSubquîy
 = 
	`sqlôe3Sñe˘New
(
pP¨£
,0,
F
,0,0,0,0,
SF_Ne°edFrom
,0,0);

630 
A
 = 
	`sqlôe3SrcLi°AµídFromTîm
(
pP¨£
,A,0,0,&
Z
,
pSubquîy
,
N
,
U
);

632 
	}
}

633 %
ídif
 
SQLITE_OMIT_SUBQUERY


635 %
ty≥
 
dbnm
 {
Tokí
}

636 
	$dbnm
(
A
Ë::. {A.
z
=0; A.
n
=0;
	}
}

637 
	$dbnm
(
A
Ë::
DOT
 
	`nm
(
X
). {A = X;
	}
}

639 %
ty≥
 
fuŒ«me
 {
SrcLi°
*}

640 %
de°ru˘‹
 
fuŒ«me
 {
sqlôe3SrcLi°Dñëe
(
pP¨£
->
db
, 
$$
);}

641 
	$fuŒ«me
(
A
Ë::
	$nm
(
X
Ë
	`dbnm
(
Y
).

642 {
A
 = 
	`sqlôe3SrcLi°Aµíd
(
pP¨£
->
db
,0,&
X
,&
Y
); 
	}
}

644 %
ty≥
 
joö›
 {}

645 
	$joö›
(
X
Ë::
COMMA
|
JOIN
. { X = 
JT_INNER
; 
	}
}

646 
	$joö›
(
X
Ë::
	$JOIN_KW
(
A
Ë
JOIN
.

647 {
X
 = 
	`sqlôe3JoöTy≥
(
pP¨£
,&
A
,0,0); 
	}
}

648 
	$joö›
(
X
Ë::
	$JOIN_KW
(
A
Ë
	$nm
(
B
Ë
JOIN
.

649 {
X
 = 
	`sqlôe3JoöTy≥
(
pP¨£
,&
A
,&
B
,0); 
	}
}

650 
	$joö›
(
X
Ë::
	$JOIN_KW
(
A
Ë
	$nm
(
B
Ë
	$nm
(
C
Ë
JOIN
.

651 {
X
 = 
	`sqlôe3JoöTy≥
(
pP¨£
,&
A
,&
B
,&
C
); 
	}
}

653 %
ty≥
 
⁄_›t
 {
Ex¥
*}

654 %
de°ru˘‹
 
⁄_›t
 {
sqlôe3Ex¥Dñëe
(
pP¨£
->
db
, 
$$
);}

655 
	$⁄_›t
(
N
Ë::
ON
 
	`ex¥
(
E
). {N = E.
pEx¥
;
	}
}

656 
	$⁄_›t
(
N
Ë::. {N = 0;
	}
}

668 %
ty≥
 
ödexed_›t
 {
Tokí
}

669 
	$ödexed_›t
(
A
Ë::. {A.
z
=0; A.
n
=0;
	}
}

670 
	$ödexed_›t
(
A
Ë::
INDEXED
 
BY
 
	`nm
(
X
). {A = X;
	}
}

671 
	$ödexed_›t
(
A
Ë::
NOT
 
INDEXED
. {A.
z
=0; A.
n
=1;
	}
}

673 %
ty≥
 
usög_›t
 {
IdLi°
*}

674 %
de°ru˘‹
 
usög_›t
 {
sqlôe3IdLi°Dñëe
(
pP¨£
->
db
, 
$$
);}

675 
	$usög_›t
(
U
Ë::
USING
 
LP
 
	$idli°
(
L
Ë
RP
. {
U
 = L;
	}
}

676 
	$usög_›t
(
U
Ë::. {U = 0;
	}
}

679 %
ty≥
 
‹dîby_›t
 {
Ex¥Li°
*}

680 %
de°ru˘‹
 
‹dîby_›t
 {
sqlôe3Ex¥Li°Dñëe
(
pP¨£
->
db
, 
$$
);}

686 %
ty≥
 
s‹éi°
 {
Ex¥Li°
*}

687 %
de°ru˘‹
 
s‹éi°
 {
sqlôe3Ex¥Li°Dñëe
(
pP¨£
->
db
, 
$$
);}

689 
	$‹dîby_›t
(
A
Ë::. {A = 0;
	}
}

690 
	$‹dîby_›t
(
A
Ë::
ORDER
 
BY
 
	`s‹éi°
(
X
). {A = X;
	}
}

691 
	$s‹éi°
(
A
Ë::
	$s‹éi°
(
A
Ë
COMMA
 
	$ex¥
(
Y
Ë
	`s‹t‹dî
(
Z
). {

692 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,A,
Y
.
pEx¥
);

693 
	`sqlôe3Ex¥Li°SëS‹tOrdî
(
A
,
Z
);

694 
	}
}

695 
	$s‹éi°
(
A
Ë::
	$ex¥
(
Y
Ë
	`s‹t‹dî
(
Z
). {

696 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,0,
Y
.
pEx¥
);

697 
	`sqlôe3Ex¥Li°SëS‹tOrdî
(
A
,
Z
);

698 
	}
}

700 %
ty≥
 
s‹t‹dî
 {}

702 
	$s‹t‹dî
(
A
Ë::
ASC
. {A = 
SQLITE_SO_ASC
;
	}
}

703 
	$s‹t‹dî
(
A
Ë::
DESC
. {A = 
SQLITE_SO_DESC
;
	}
}

704 
	$s‹t‹dî
(
A
Ë::. {A = 
SQLITE_SO_UNDEFINED
;
	}
}

706 %
ty≥
 
groupby_›t
 {
Ex¥Li°
*}

707 %
de°ru˘‹
 
groupby_›t
 {
sqlôe3Ex¥Li°Dñëe
(
pP¨£
->
db
, 
$$
);}

708 
	$groupby_›t
(
A
Ë::. {A = 0;
	}
}

709 
	$groupby_›t
(
A
Ë::
GROUP
 
BY
 
	`√x¥li°
(
X
). {A = X;
	}
}

711 %
ty≥
 
havög_›t
 {
Ex¥
*}

712 %
de°ru˘‹
 
havög_›t
 {
sqlôe3Ex¥Dñëe
(
pP¨£
->
db
, 
$$
);}

713 
	$havög_›t
(
A
Ë::. {A = 0;
	}
}

714 
	$havög_›t
(
A
Ë::
HAVING
 
	`ex¥
(
X
). {A = X.
pEx¥
;
	}
}

716 %
ty≥
 
limô_›t
 {
LimôVÆ
}

729 
	$limô_›t
(
A
Ë::. {A.
pLimô
 = 0; A.
pOff£t
 = 0;
	}
}

730 
	$limô_›t
(
A
Ë::
LIMIT
 
	`ex¥
(
X
). {A.
pLimô
 = X.
pEx¥
; A.
pOff£t
 = 0;
	}
}

731 
	$limô_›t
(
A
Ë::
LIMIT
 
	$ex¥
(
X
Ë
OFFSET
 
	`ex¥
(
Y
).

732 {
A
.
pLimô
 = 
X
.
pEx¥
; A.
pOff£t
 = 
Y
.pEx¥;
	}
}

733 
	$limô_›t
(
A
Ë::
LIMIT
 
	$ex¥
(
X
Ë
COMMA
 
	`ex¥
(
Y
).

734 {
A
.
pOff£t
 = 
X
.
pEx¥
; A.
pLimô
 = 
Y
.pEx¥;
	}
}

738 %
ifdef
 
SQLITE_ENABLE_UPDATE_DELETE_LIMIT


739 
cmd
 ::
	$wôh
(
C
Ë
DELETE
 
FROM
 
	$fuŒ«me
(
X
Ë
	$ödexed_›t
(
I
Ë
	$whîe_›t
(
W
)

740 
	$‹dîby_›t
(
O
Ë
	`limô_›t
(
L
). {

741 
	`sqlôe3WôhPush
(
pP¨£
, 
C
, 1);

742 
	`sqlôe3SrcLi°IndexedBy
(
pP¨£
, 
X
, &
I
);

743 
W
 = 
	`sqlôe3LimôWhîe
(
pP¨£
, 
X
, W, 
O
, 
L
.
pLimô
, L.
pOff£t
, "DELETE");

744 
	`sqlôe3DñëeFrom
(
pP¨£
,
X
,
W
);

745 
	}
}

746 %
ídif


747 %
i‚def
 
SQLITE_ENABLE_UPDATE_DELETE_LIMIT


748 
cmd
 ::
	$wôh
(
C
Ë
DELETE
 
FROM
 
	$fuŒ«me
(
X
Ë
	$ödexed_›t
(
I
Ë
	`whîe_›t
(
W
). {

749 
	`sqlôe3WôhPush
(
pP¨£
, 
C
, 1);

750 
	`sqlôe3SrcLi°IndexedBy
(
pP¨£
, 
X
, &
I
);

751 
	`sqlôe3DñëeFrom
(
pP¨£
,
X
,
W
);

752 
	}
}

753 %
ídif


755 %
ty≥
 
whîe_›t
 {
Ex¥
*}

756 %
de°ru˘‹
 
whîe_›t
 {
sqlôe3Ex¥Dñëe
(
pP¨£
->
db
, 
$$
);}

758 
	$whîe_›t
(
A
Ë::. {A = 0;
	}
}

759 
	$whîe_›t
(
A
Ë::
WHERE
 
	`ex¥
(
X
). {A = X.
pEx¥
;
	}
}

763 %
ifdef
 
SQLITE_ENABLE_UPDATE_DELETE_LIMIT


764 
cmd
 ::
	$wôh
(
C
Ë
UPDATE
 
	$‹c⁄f
(
R
Ë
	$fuŒ«me
(
X
Ë
	$ödexed_›t
(
I
Ë
SET
 
	$£éi°
(
Y
)

765 
	$whîe_›t
(
W
Ë
	$‹dîby_›t
(
O
Ë
	`limô_›t
(
L
). {

766 
	`sqlôe3WôhPush
(
pP¨£
, 
C
, 1);

767 
	`sqlôe3SrcLi°IndexedBy
(
pP¨£
, 
X
, &
I
);

768 
	`sqlôe3Ex¥Li°CheckLígth
(
pP¨£
,
Y
,"setÜist");

769 
W
 = 
	`sqlôe3LimôWhîe
(
pP¨£
, 
X
, W, 
O
, 
L
.
pLimô
, L.
pOff£t
, "UPDATE");

770 
	`sqlôe3Upd©e
(
pP¨£
,
X
,
Y
,
W
,
R
);

771 
	}
}

772 %
ídif


773 %
i‚def
 
SQLITE_ENABLE_UPDATE_DELETE_LIMIT


774 
cmd
 ::
	$wôh
(
C
Ë
UPDATE
 
	$‹c⁄f
(
R
Ë
	$fuŒ«me
(
X
Ë
	$ödexed_›t
(
I
Ë
SET
 
	$£éi°
(
Y
)

775 
	`whîe_›t
(
W
). {

776 
	`sqlôe3WôhPush
(
pP¨£
, 
C
, 1);

777 
	`sqlôe3SrcLi°IndexedBy
(
pP¨£
, 
X
, &
I
);

778 
	`sqlôe3Ex¥Li°CheckLígth
(
pP¨£
,
Y
,"setÜist");

779 
	`sqlôe3Upd©e
(
pP¨£
,
X
,
Y
,
W
,
R
);

780 
	}
}

781 %
ídif


783 %
ty≥
 
£éi°
 {
Ex¥Li°
*}

784 %
de°ru˘‹
 
£éi°
 {
sqlôe3Ex¥Li°Dñëe
(
pP¨£
->
db
, 
$$
);}

786 
	$£éi°
(
A
Ë::
	$£éi°
(
A
Ë
COMMA
 
	$nm
(
X
Ë
EQ
 
	`ex¥
(
Y
). {

787 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
, A, 
Y
.
pEx¥
);

788 
	`sqlôe3Ex¥Li°SëName
(
pP¨£
, 
A
, &
X
, 1);

789 
	}
}

790 
	$£éi°
(
A
Ë::
	$nm
(
X
Ë
EQ
 
	`ex¥
(
Y
). {

791 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
, 0, 
Y
.
pEx¥
);

792 
	`sqlôe3Ex¥Li°SëName
(
pP¨£
, 
A
, &
X
, 1);

793 
	}
}

797 
cmd
 ::
	$wôh
(
W
Ë
	$ö£π_cmd
(
R
Ë
INTO
 
	$fuŒ«me
(
X
Ë
	$idli°_›t
(
F
Ë
	`£À˘
(
S
). {

798 
	`sqlôe3WôhPush
(
pP¨£
, 
W
, 1);

799 
	`sqlôe3In£π
(
pP¨£
, 
X
, 
S
, 
F
, 
R
);

800 
	}
}

801 
cmd
 ::
	$wôh
(
W
Ë
	$ö£π_cmd
(
R
Ë
INTO
 
	$fuŒ«me
(
X
Ë
	$idli°_›t
(
F
Ë
DEFAULT
 
VALUES
.

803 
	`sqlôe3WôhPush
(
pP¨£
, 
W
, 1);

804 
	`sqlôe3In£π
(
pP¨£
, 
X
, 0, 
F
, 
R
);

805 
	}
}

807 %
ty≥
 
ö£π_cmd
 {}

808 
	$ö£π_cmd
(
A
Ë::
INSERT
 
	`‹c⁄f
(
R
). {A = R;
	}
}

809 
	$ö£π_cmd
(
A
Ë::
REPLACE
. {A = 
OE_Rïœ˚
;
	}
}

811 %
ty≥
 
idli°_›t
 {
IdLi°
*}

812 %
de°ru˘‹
 
idli°_›t
 {
sqlôe3IdLi°Dñëe
(
pP¨£
->
db
, 
$$
);}

813 %
ty≥
 
idli°
 {
IdLi°
*}

814 %
de°ru˘‹
 
idli°
 {
sqlôe3IdLi°Dñëe
(
pP¨£
->
db
, 
$$
);}

816 
	$idli°_›t
(
A
Ë::. {A = 0;
	}
}

817 
	$idli°_›t
(
A
Ë::
LP
 
	$idli°
(
X
Ë
RP
. {
A
 = X;
	}
}

818 
	$idli°
(
A
Ë::
	$idli°
(
A
Ë
COMMA
 
	`nm
(
Y
).

819 {
A
 = 
	`sqlôe3IdLi°Aµíd
(
pP¨£
->
db
,A,&
Y
);
	}
}

820 
	$idli°
(
A
Ë::
	`nm
(
Y
).

821 {
A
 = 
	`sqlôe3IdLi°Aµíd
(
pP¨£
->
db
,0,&
Y
); 
	}
}

826 %
ty≥
 
ex¥
 {
Ex¥S∑n
}

827 %
de°ru˘‹
 
ex¥
 {
sqlôe3Ex¥Dñëe
(
pP¨£
->
db
, 
$$
.
pEx¥
);}

828 %
ty≥
 
ãrm
 {
Ex¥S∑n
}

829 %
de°ru˘‹
 
ãrm
 {
sqlôe3Ex¥Dñëe
(
pP¨£
->
db
, 
$$
.
pEx¥
);}

831 %
ö˛ude
 {

836 
•™Së
(
Ex¥S∑n
 *
pOut
, 
Tokí
 *
pSèπ
, Tokí *
pEnd
){

837 
pOut
->
zSèπ
 = 
pSèπ
->
z
;

838 
pOut
->
zEnd
 = &
pEnd
->
z
[pEnd->
n
];

845 
•™Ex¥
(
Ex¥S∑n
 *
pOut
, 
P¨£
 *
pP¨£
, 
›
, 
Tokí
 
t
){

846 
pOut
->
pEx¥
 = 
sqlôe3PEx¥
(
pP¨£
, 
›
, 0, 0, &
t
);

847 
pOut
->
zSèπ
 = 
t
.
z
;

848 
pOut
->
zEnd
 = &
t
.
z
[t.
n
];

852 
	$ex¥
(
A
Ë::
	`ãrm
(A).

853 
	$ex¥
(
A
Ë::
	$LP
(
B
Ë
	$ex¥
(
X
Ë
	`RP
(
E
).

854 {
	`•™Së
(&
A
,&
B
,&
E
); A.
pEx¥
 = 
X
.pEx¥;
	}
}

855 
	$ãrm
(
A
Ë::
	`NULL
(
X
). {
	`•™Ex¥
(&A,
pP¨£
,@X,X); 
	}
}

856 
	$ex¥
(
A
Ë::
	`id
(
X
). {
	`•™Ex¥
(&A,
pP¨£
,
TK_ID
,X); 
	}
}

857 
	$ex¥
(
A
Ë::
	`JOIN_KW
(
X
). {
	`•™Ex¥
(&A,
pP¨£
,
TK_ID
,X); 
	}
}

858 
	$ex¥
(
A
Ë::
	$nm
(
X
Ë
DOT
 
	`nm
(
Y
). {

859 
Ex¥
 *
ãmp1
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_ID
, 0, 0, &
X
);

860 
Ex¥
 *
ãmp2
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_ID
, 0, 0, &
Y
);

861 
	`•™Së
(&
A
,&
X
,&
Y
);

862 
A
.
pEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_DOT
, 
ãmp1
, 
ãmp2
, 0);

863 
	}
}

864 
	$ex¥
(
A
Ë::
	$nm
(
X
Ë
DOT
 
	$nm
(
Y
Ë
DOT
 
	`nm
(
Z
). {

865 
Ex¥
 *
ãmp1
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_ID
, 0, 0, &
X
);

866 
Ex¥
 *
ãmp2
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_ID
, 0, 0, &
Y
);

867 
Ex¥
 *
ãmp3
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_ID
, 0, 0, &
Z
);

868 
Ex¥
 *
ãmp4
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_DOT
, 
ãmp2
, 
ãmp3
, 0);

869 
	`•™Së
(&
A
,&
X
,&
Z
);

870 
A
.
pEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_DOT
, 
ãmp1
, 
ãmp4
, 0);

871 
	}
}

872 
	$ãrm
(
A
Ë::
INTEGER
|
FLOAT
|
	`BLOB
(
X
). {
	`•™Ex¥
(&A,
pP¨£
,@X,X); 
	}
}

873 
	$ãrm
(
A
Ë::
	`STRING
(
X
). {
	`•™Ex¥
(&A,
pP¨£
,@X,X); 
	}
}

874 
	$ex¥
(
A
Ë::
	`VARIABLE
(
X
). {

875 if–!(
X
.
z
[0]=='#' && 
	`sqlôe3Isdigô
(X.z[1])) ){

876 
	`•™Ex¥
(&
A
, 
pP¨£
, 
TK_VARIABLE
, 
X
);

877 
	`sqlôe3Ex¥AssignV¨Numbî
(
pP¨£
, 
A
.
pEx¥
);

882 
Tokí
 
t
 = 
X
;

883 
	`as£π
–
t
.
n
>=2 );

884 
	`•™Së
(&
A
, &
t
, &t);

885 if–
pP¨£
->
√°ed
==0 ){

886 
	`sqlôe3Eº‹Msg
(
pP¨£
, "√¨ \"%T\": sy¡axÉº‹", &
t
);

887 
A
.
pEx¥
 = 0;

889 
A
.
pEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_REGISTER
, 0, 0, &
t
);

890 if–
A
.
pEx¥
 ) 
	`sqlôe3GëI¡32
(&
t
.
z
[1], &A.pEx¥->
iTabÀ
);

893 
	}
}

894 
	$ex¥
(
A
Ë::
	$ex¥
(
A
Ë
COLLATE
 
	`ids
(
C
). {

895 
A
.
pEx¥
 = 
	`sqlôe3Ex¥AddCﬁœãTokí
(
pP¨£
, A.pEx¥, &
C
, 1);

896 
A
.
zEnd
 = &
C
.
z
[C.
n
];

897 
	}
}

898 %
i‚def
 
SQLITE_OMIT_CAST


899 
	$ex¥
(
A
Ë::
	$CAST
(
X
Ë
LP
 
	$ex¥
(
E
Ë
AS
 
	$ty≥tokí
(
T
Ë
	`RP
(
Y
). {

900 
	`•™Së
(&
A
,&
X
,&
Y
);

901 
A
.
pEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_CAST
, 
E
.pEx¥, 0, &
T
);

902 
	}
}

903 %
ídif
 
SQLITE_OMIT_CAST


904 
	$ex¥
(
A
Ë::
	$id
(
X
Ë
LP
 
	$di°ö˘
(
D
Ë
	$ex¥li°
(
Y
Ë
	`RP
(
E
). {

905 if–
Y
 && Y->
nEx¥
>
pP¨£
->
db
->
aLimô
[
SQLITE_LIMIT_FUNCTION_ARG
] ){

906 
	`sqlôe3Eº‹Msg
(
pP¨£
, "toÿm™yárgumít†⁄ fun˘i⁄ %T", &
X
);

908 
A
.
pEx¥
 = 
	`sqlôe3Ex¥Fun˘i⁄
(
pP¨£
, 
Y
, &
X
);

909 
	`•™Së
(&
A
,&
X
,&
E
);

910 if–
D
==
SF_Di°ö˘
 && 
A
.
pEx¥
 ){

911 
A
.
pEx¥
->
Êags
 |
EP_Di°ö˘
;

913 
	}
}

914 
	$ex¥
(
A
Ë::
	$id
(
X
Ë
LP
 
STAR
 
	`RP
(
E
). {

915 
A
.
pEx¥
 = 
	`sqlôe3Ex¥Fun˘i⁄
(
pP¨£
, 0, &
X
);

916 
	`•™Së
(&
A
,&
X
,&
E
);

917 
	}
}

918 
	$ãrm
(
A
Ë::
	`CTIME_KW
(
OP
). {

919 
A
.
pEx¥
 = 
	`sqlôe3Ex¥Fun˘i⁄
(
pP¨£
, 0, &
OP
);

920 
	`•™Së
(&
A
, &
OP
, &OP);

921 
	}
}

923 %
ö˛ude
 {

927 
•™Bö¨yEx¥
(

928 
P¨£
 *
pP¨£
,

929 
›
,

930 
Ex¥S∑n
 *
pLe·
,

931 
Ex¥S∑n
 *
pRight


933 
pLe·
->
pEx¥
 = 
sqlôe3PEx¥
(
pP¨£
, 
›
,ÖLe·->pEx¥, 
pRight
->pExpr, 0);

934 
pLe·
->
zEnd
 = 
pRight
->zEnd;

940 
ex¥NŸ
(
P¨£
 *
pP¨£
, 
doNŸ
, 
Ex¥S∑n
 *
pS∑n
){

941 if–
doNŸ
 ){

942 
pS∑n
->
pEx¥
 = 
sqlôe3PEx¥
(
pP¨£
, 
TK_NOT
,ÖSpan->pExpr, 0, 0);

947 
	$ex¥
(
A
Ë::
	$ex¥
(
A
Ë
	$AND
(
OP
Ë
	`ex¥
(
Y
). {
	`•™Bö¨yEx¥
(
pP¨£
,@OP,&
A
,&Y);
	}
}

948 
	$ex¥
(
A
Ë::
	$ex¥
(
A
Ë
	$OR
(
OP
Ë
	`ex¥
(
Y
). {
	`•™Bö¨yEx¥
(
pP¨£
,@OP,&
A
,&Y);
	}
}

949 
	$ex¥
(
A
Ë::
	$ex¥
(
A
Ë
LT
|
GT
|
GE
|
	$LE
(
OP
Ë
	`ex¥
(
Y
).

950 {
	`•™Bö¨yEx¥
(
pP¨£
,@
OP
,&
A
,&
Y
);
	}
}

951 
	$ex¥
(
A
Ë::
	$ex¥
(
A
Ë
EQ
|
	$NE
(
OP
Ë
	`ex¥
(
Y
). {
	`•™Bö¨yEx¥
(
pP¨£
,@OP,&
A
,&Y);
	}
}

952 
	$ex¥
(
A
Ë::
	$ex¥
(
A
Ë
BITAND
|
BITOR
|
LSHIFT
|
	$RSHIFT
(
OP
Ë
	`ex¥
(
Y
).

953 {
	`•™Bö¨yEx¥
(
pP¨£
,@
OP
,&
A
,&
Y
);
	}
}

954 
	$ex¥
(
A
Ë::
	$ex¥
(
A
Ë
PLUS
|
	$MINUS
(
OP
Ë
	`ex¥
(
Y
).

955 {
	`•™Bö¨yEx¥
(
pP¨£
,@
OP
,&
A
,&
Y
);
	}
}

956 
	$ex¥
(
A
Ë::
	$ex¥
(
A
Ë
STAR
|
SLASH
|
	$REM
(
OP
Ë
	`ex¥
(
Y
).

957 {
	`•™Bö¨yEx¥
(
pP¨£
,@
OP
,&
A
,&
Y
);
	}
}

958 
	$ex¥
(
A
Ë::
	$ex¥
(
A
Ë
	$CONCAT
(
OP
Ë
	`ex¥
(
Y
). {
	`•™Bö¨yEx¥
(
pP¨£
,@OP,&
A
,&Y);
	}
}

959 %
ty≥
 
like›
 {
LikeOp
}

960 
	$like›
(
A
Ë::
LIKE_KW
|
	`MATCH
(
X
). {A.
eO≥øt‹
 = X; A.
bNŸ
 = 0; 
	}
}

961 
	$like›
(
A
Ë::
NOT
 
LIKE_KW
|
	`MATCH
(
X
). {A.
eO≥øt‹
 = X; A.
bNŸ
 = 1;
	}
}

962 
	$ex¥
(
A
Ë::
	$ex¥
(
A
Ë
	$like›
(
OP
Ë
	`ex¥
(
Y
). [
LIKE_KW
] {

963 
Ex¥Li°
 *
pLi°
;

964 
pLi°
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,0, 
Y
.
pEx¥
);

965 
pLi°
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,pLi°, 
A
.
pEx¥
);

966 
A
.
pEx¥
 = 
	`sqlôe3Ex¥Fun˘i⁄
(
pP¨£
, 
pLi°
, &
OP
.
eO≥øt‹
);

967 
	`ex¥NŸ
(
pP¨£
, 
OP
.
bNŸ
, &
A
);

968 
A
.
zEnd
 = 
Y
.zEnd;

969 if–
A
.
pEx¥
 ) A.pEx¥->
Êags
 |
EP_InfixFunc
;

970 
	}
}

971 
	$ex¥
(
A
Ë::
	$ex¥
(
A
Ë
	$like›
(
OP
Ë
	$ex¥
(
Y
Ë
ESCAPE
 
	`ex¥
(
E
). [
LIKE_KW
] {

972 
Ex¥Li°
 *
pLi°
;

973 
pLi°
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,0, 
Y
.
pEx¥
);

974 
pLi°
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,pLi°, 
A
.
pEx¥
);

975 
pLi°
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,pLi°, 
E
.
pEx¥
);

976 
A
.
pEx¥
 = 
	`sqlôe3Ex¥Fun˘i⁄
(
pP¨£
, 
pLi°
, &
OP
.
eO≥øt‹
);

977 
	`ex¥NŸ
(
pP¨£
, 
OP
.
bNŸ
, &
A
);

978 
A
.
zEnd
 = 
E
.zEnd;

979 if–
A
.
pEx¥
 ) A.pEx¥->
Êags
 |
EP_InfixFunc
;

980 
	}
}

982 %
ö˛ude
 {

985 
•™U«ryPo°fix
(

986 
P¨£
 *
pP¨£
,

987 
›
,

988 
Ex¥S∑n
 *
pO≥ønd
,

989 
Tokí
 *
pPo°Op


991 
pO≥ønd
->
pEx¥
 = 
sqlôe3PEx¥
(
pP¨£
, 
›
,ÖOperand->pExpr, 0, 0);

992 
pO≥ønd
->
zEnd
 = &
pPo°Op
->
z
[pPo°Op->
n
];

996 
	$ex¥
(
A
Ë::
	$ex¥
(
A
Ë
ISNULL
|
	`NOTNULL
(
E
). {
	`•™U«ryPo°fix
(
pP¨£
,@E,&A,&E);
	}
}

997 
	$ex¥
(
A
Ë::
	$ex¥
(
A
Ë
NOT
 
	`NULL
(
E
). {
	`•™U«ryPo°fix
(
pP¨£
,
TK_NOTNULL
,&A,&E);
	}
}

999 %
ö˛ude
 {

1002 
bö¨yToU«ryIfNuŒ
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pY
, Ex¥ *
pA
, 
›
){

1003 
sqlôe3
 *
db
 = 
pP¨£
->db;

1004 if–
pA
 && 
pY
 &&ÖY->
›
==
TK_NULL
 ){

1005 
pA
->
›
 = (
u8
)op;

1006 
sqlôe3Ex¥Dñëe
(
db
, 
pA
->
pRight
);

1007 
pA
->
pRight
 = 0;

1018 
	$ex¥
(
A
Ë::
	$ex¥
(
A
Ë
IS
 
	`ex¥
(
Y
). {

1019 
	`•™Bö¨yEx¥
(
pP¨£
,
TK_IS
,&
A
,&
Y
);

1020 
	`bö¨yToU«ryIfNuŒ
(
pP¨£
, 
Y
.
pEx¥
, 
A
.pEx¥, 
TK_ISNULL
);

1021 
	}
}

1022 
	$ex¥
(
A
Ë::
	$ex¥
(
A
Ë
IS
 
NOT
 
	`ex¥
(
Y
). {

1023 
	`•™Bö¨yEx¥
(
pP¨£
,
TK_ISNOT
,&
A
,&
Y
);

1024 
	`bö¨yToU«ryIfNuŒ
(
pP¨£
, 
Y
.
pEx¥
, 
A
.pEx¥, 
TK_NOTNULL
);

1025 
	}
}

1027 %
ö˛ude
 {

1030 
•™U«ryPªfix
(

1031 
Ex¥S∑n
 *
pOut
,

1032 
P¨£
 *
pP¨£
,

1033 
›
,

1034 
Ex¥S∑n
 *
pO≥ønd
,

1035 
Tokí
 *
pPªOp


1037 
pOut
->
zSèπ
 = 
pPªOp
->
z
;

1038 
pOut
->
pEx¥
 = 
sqlôe3PEx¥
(
pP¨£
, 
›
, 
pO≥ønd
->pExpr, 0, 0);

1039 
pOut
->
zEnd
 = 
pO≥ønd
->zEnd;

1045 
	$ex¥
(
A
Ë::
	$NOT
(
B
Ë
	`ex¥
(
X
).

1046 {
	`•™U«ryPªfix
(&
A
,
pP¨£
,@
B
,&
X
,&B); 
	}
}

1047 
	$ex¥
(
A
Ë::
	$BITNOT
(
B
Ë
	`ex¥
(
X
).

1048 {
	`•™U«ryPªfix
(&
A
,
pP¨£
,@
B
,&
X
,&B); 
	}
}

1049 
	$ex¥
(
A
Ë::
	$MINUS
(
B
Ë
	`ex¥
(
X
). [
BITNOT
]

1050 {
	`•™U«ryPªfix
(&
A
,
pP¨£
,
TK_UMINUS
,&
X
,&
B
); 
	}
}

1051 
	$ex¥
(
A
Ë::
	$PLUS
(
B
Ë
	`ex¥
(
X
). [
BITNOT
]

1052 {
	`•™U«ryPªfix
(&
A
,
pP¨£
,
TK_UPLUS
,&
X
,&
B
); 
	}
}

1054 %
ty≥
 
bëwìn_›
 {}

1055 
	$bëwìn_›
(
A
Ë::
BETWEEN
. {A = 0;
	}
}

1056 
	$bëwìn_›
(
A
Ë::
NOT
 
BETWEEN
. {A = 1;
	}
}

1057 
	$ex¥
(
A
Ë::
	$ex¥
(
A
Ë
	$bëwìn_›
(
N
Ë
	$ex¥
(
X
Ë
AND
 
	`ex¥
(
Y
). [
BETWEEN
] {

1058 
Ex¥Li°
 *
pLi°
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,0, 
X
.
pEx¥
);

1059 
pLi°
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,pLi°, 
Y
.
pEx¥
);

1060 
A
.
pEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_BETWEEN
, A.pExpr, 0, 0);

1061 if–
A
.
pEx¥
 ){

1062 
A
.
pEx¥
->
x
.
pLi°
 =ÖList;

1064 
	`sqlôe3Ex¥Li°Dñëe
(
pP¨£
->
db
, 
pLi°
);

1066 
	`ex¥NŸ
(
pP¨£
, 
N
, &
A
);

1067 
A
.
zEnd
 = 
Y
.zEnd;

1068 
	}
}

1069 %
i‚def
 
SQLITE_OMIT_SUBQUERY


1070 %
ty≥
 
ö_›
 {}

1071 
	$ö_›
(
A
Ë::
IN
. {A = 0;
	}
}

1072 
	$ö_›
(
A
Ë::
NOT
 
IN
. {A = 1;
	}
}

1073 
	$ex¥
(
A
Ë::
	$ex¥
(
A
Ë
	$ö_›
(
N
Ë
LP
 
	$ex¥li°
(
Y
Ë
	`RP
(
E
). [
IN
] {

1074 if–
Y
==0 ){

1083 
	`sqlôe3Ex¥Dñëe
(
pP¨£
->
db
, 
A
.
pEx¥
);

1084 
A
.
pEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_INTEGER
, 0, 0, &
sqlôe3I¡Tokís
[
N
]);

1085 }if–
Y
->
nEx¥
==1 ){

1102 
Ex¥
 *
pRHS
 = 
Y
->
a
[0].
pEx¥
;

1103 
Y
->
a
[0].
pEx¥
 = 0;

1104 
	`sqlôe3Ex¥Li°Dñëe
(
pP¨£
->
db
, 
Y
);

1107 if–
	`ALWAYS
(
pRHS
) ){

1108 
pRHS
->
Êags
 &~
EP_Cﬁœã
;

1109 
pRHS
->
Êags
 |
EP_Gíîic
;

1111 
A
.
pEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
N
 ? 
TK_NE
 : 
TK_EQ
, A.pEx¥, 
pRHS
, 0);

1113 
A
.
pEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_IN
, A.pExpr, 0, 0);

1114 if–
A
.
pEx¥
 ){

1115 
A
.
pEx¥
->
x
.
pLi°
 = 
Y
;

1116 
	`sqlôe3Ex¥SëHeightAndFœgs
(
pP¨£
, 
A
.
pEx¥
);

1118 
	`sqlôe3Ex¥Li°Dñëe
(
pP¨£
->
db
, 
Y
);

1120 
	`ex¥NŸ
(
pP¨£
, 
N
, &
A
);

1122 
A
.
zEnd
 = &
E
.
z
[E.
n
];

1123 
	}
}

1124 
	$ex¥
(
A
Ë::
	$LP
(
B
Ë
	$£À˘
(
X
Ë
	`RP
(
E
). {

1125 
	`•™Së
(&
A
,&
B
,&
E
);

1126 
A
.
pEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_SELECT
, 0, 0, 0);

1127 
	`sqlôe3PEx¥AddSñe˘
(
pP¨£
, 
A
.
pEx¥
, 
X
);

1128 
	}
}

1129 
	$ex¥
(
A
Ë::
	$ex¥
(
A
Ë
	$ö_›
(
N
Ë
LP
 
	$£À˘
(
Y
Ë
	`RP
(
E
). [
IN
] {

1130 
A
.
pEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_IN
, A.pExpr, 0, 0);

1131 
	`sqlôe3PEx¥AddSñe˘
(
pP¨£
, 
A
.
pEx¥
, 
Y
);

1132 
	`ex¥NŸ
(
pP¨£
, 
N
, &
A
);

1133 
A
.
zEnd
 = &
E
.
z
[E.
n
];

1134 
	}
}

1135 
	$ex¥
(
A
Ë::
	$ex¥
(
A
Ë
	$ö_›
(
N
Ë
	$nm
(
Y
Ë
	`dbnm
(
Z
). [
IN
] {

1136 
SrcLi°
 *
pSrc
 = 
	`sqlôe3SrcLi°Aµíd
(
pP¨£
->
db
, 0,&
Y
,&
Z
);

1137 
Sñe˘
 *
pSñe˘
 = 
	`sqlôe3Sñe˘New
(
pP¨£
, 0,
pSrc
,0,0,0,0,0,0,0);

1138 
A
.
pEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_IN
, A.pExpr, 0, 0);

1139 
	`sqlôe3PEx¥AddSñe˘
(
pP¨£
, 
A
.
pEx¥
, 
pSñe˘
);

1140 
	`ex¥NŸ
(
pP¨£
, 
N
, &
A
);

1141 
A
.
zEnd
 = 
Z
.
z
 ? &Z.z[Z.
n
] : &
Y
.z[Y.n];

1142 
	}
}

1143 
	$ex¥
(
A
Ë::
	$EXISTS
(
B
Ë
LP
 
	$£À˘
(
Y
Ë
	`RP
(
E
). {

1144 
Ex¥
 *
p
;

1145 
	`•™Së
(&
A
,&
B
,&
E
);

1146 
p
 = 
A
.
pEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_EXISTS
, 0, 0, 0);

1147 
	`sqlôe3PEx¥AddSñe˘
(
pP¨£
, 
p
, 
Y
);

1148 
	}
}

1149 %
ídif
 
SQLITE_OMIT_SUBQUERY


1152 
	$ex¥
(
A
Ë::
	$CASE
(
C
Ë
	$ˇ£_›î™d
(
X
Ë
	$ˇ£_ex¥li°
(
Y
Ë
	$ˇ£_ñ£
(
Z
Ë
	`END
(
E
). {

1153 
	`•™Së
(&
A
,&
C
,&
E
);

1154 
A
.
pEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_CASE
, 
X
, 0, 0);

1155 if–
A
.
pEx¥
 ){

1156 
A
.
pEx¥
->
x
.
pLi°
 = 
Z
 ? 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,
Y
,Z) : Y;

1157 
	`sqlôe3Ex¥SëHeightAndFœgs
(
pP¨£
, 
A
.
pEx¥
);

1159 
	`sqlôe3Ex¥Li°Dñëe
(
pP¨£
->
db
, 
Y
);

1160 
	`sqlôe3Ex¥Dñëe
(
pP¨£
->
db
, 
Z
);

1162 
	}
}

1163 %
ty≥
 
ˇ£_ex¥li°
 {
Ex¥Li°
*}

1164 %
de°ru˘‹
 
ˇ£_ex¥li°
 {
sqlôe3Ex¥Li°Dñëe
(
pP¨£
->
db
, 
$$
);}

1165 
	$ˇ£_ex¥li°
(
A
Ë::
	$ˇ£_ex¥li°
(
A
Ë
WHEN
 
	$ex¥
(
Y
Ë
THEN
 
	`ex¥
(
Z
). {

1166 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,A, 
Y
.
pEx¥
);

1167 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,A, 
Z
.
pEx¥
);

1168 
	}
}

1169 
	$ˇ£_ex¥li°
(
A
Ë::
WHEN
 
	$ex¥
(
Y
Ë
THEN
 
	`ex¥
(
Z
). {

1170 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,0, 
Y
.
pEx¥
);

1171 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,A, 
Z
.
pEx¥
);

1172 
	}
}

1173 %
ty≥
 
ˇ£_ñ£
 {
Ex¥
*}

1174 %
de°ru˘‹
 
ˇ£_ñ£
 {
sqlôe3Ex¥Dñëe
(
pP¨£
->
db
, 
$$
);}

1175 
	$ˇ£_ñ£
(
A
Ë::
ELSE
 
	`ex¥
(
X
). {A = X.
pEx¥
;
	}
}

1176 
	$ˇ£_ñ£
(
A
Ë::. {A = 0;
	}
}

1177 %
ty≥
 
ˇ£_›î™d
 {
Ex¥
*}

1178 %
de°ru˘‹
 
ˇ£_›î™d
 {
sqlôe3Ex¥Dñëe
(
pP¨£
->
db
, 
$$
);}

1179 
	$ˇ£_›î™d
(
A
Ë::
	`ex¥
(
X
). {A = X.
pEx¥
; 
	}
}

1180 
	$ˇ£_›î™d
(
A
Ë::. {A = 0;
	}
}

1182 %
ty≥
 
ex¥li°
 {
Ex¥Li°
*}

1183 %
de°ru˘‹
 
ex¥li°
 {
sqlôe3Ex¥Li°Dñëe
(
pP¨£
->
db
, 
$$
);}

1184 %
ty≥
 
√x¥li°
 {
Ex¥Li°
*}

1185 %
de°ru˘‹
 
√x¥li°
 {
sqlôe3Ex¥Li°Dñëe
(
pP¨£
->
db
, 
$$
);}

1187 
	$ex¥li°
(
A
Ë::
	`√x¥li°
(A).

1188 
	$ex¥li°
(
A
Ë::. {A = 0;
	}
}

1189 
	$√x¥li°
(
A
Ë::
	$√x¥li°
(
A
Ë
COMMA
 
	`ex¥
(
Y
).

1190 {
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,A,
Y
.
pEx¥
);
	}
}

1191 
	$√x¥li°
(
A
Ë::
	`ex¥
(
Y
).

1192 {
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,0,
Y
.
pEx¥
); 
	}
}

1197 
cmd
 ::
	$¸óãkw
(
S
Ë
	$uniqueÊag
(
U
Ë
INDEX
 
	$i‚Ÿexi°s
(
NE
Ë
	$nm
(
X
Ë
	$dbnm
(
D
)

1198 
ON
 
	$nm
(
Y
Ë
LP
 
	$s‹éi°
(
Z
Ë
RP
 
	`whîe_›t
(
W
). {

1199 
	`sqlôe3Cª©eIndex
(
pP¨£
, &
X
, &
D
,

1200 
	`sqlôe3SrcLi°Aµíd
(
pP¨£
->
db
,0,&
Y
,0), 
Z
, 
U
,

1201 &
S
, 
W
, 
SQLITE_SO_ASC
, 
NE
);

1202 
	}
}

1204 %
ty≥
 
uniqueÊag
 {}

1205 
	$uniqueÊag
(
A
Ë::
UNIQUE
. {A = 
OE_Ab‹t
;
	}
}

1206 
	$uniqueÊag
(
A
Ë::. {A = 
OE_N⁄e
;
	}
}

1224 %
ty≥
 
eidli°
 {
Ex¥Li°
*}

1225 %
de°ru˘‹
 
eidli°
 {
sqlôe3Ex¥Li°Dñëe
(
pP¨£
->
db
, 
$$
);}

1226 %
ty≥
 
eidli°_›t
 {
Ex¥Li°
*}

1227 %
de°ru˘‹
 
eidli°_›t
 {
sqlôe3Ex¥Li°Dñëe
(
pP¨£
->
db
, 
$$
);}

1229 %
ö˛ude
 {

1235 
Ex¥Li°
 *
∑r£rAddEx¥IdLi°Tîm
(

1236 
P¨£
 *
pP¨£
,

1237 
Ex¥Li°
 *
pPri‹
,

1238 
Tokí
 *
pIdTokí
,

1239 
hasCﬁœã
,

1240 
s‹tOrdî


1242 
Ex¥Li°
 *
p
 = 
sqlôe3Ex¥Li°Aµíd
(
pP¨£
, 
pPri‹
, 0);

1243 if–(
hasCﬁœã
 || 
s‹tOrdî
!=
SQLITE_SO_UNDEFINED
)

1244 && 
pP¨£
->
db
->
öô
.
busy
==0

1246 
sqlôe3Eº‹Msg
(
pP¨£
, "syntaxÉrroráfter columnÇame \"%.*s\"",

1247 
pIdTokí
->
n
,ÖIdTokí->
z
);

1249 
sqlôe3Ex¥Li°SëName
(
pP¨£
, 
p
, 
pIdTokí
, 1);

1250  
p
;

1254 
	$eidli°_›t
(
A
Ë::. {A = 0;
	}
}

1255 
	$eidli°_›t
(
A
Ë::
LP
 
	$eidli°
(
X
Ë
RP
. {
A
 = X;
	}
}

1256 
	$eidli°
(
A
Ë::
	$eidli°
(
A
Ë
COMMA
 
	$nm
(
Y
Ë
	$cﬁœã
(
C
Ë
	`s‹t‹dî
(
Z
). {

1257 
A
 = 
	`∑r£rAddEx¥IdLi°Tîm
(
pP¨£
, A, &
Y
, 
C
, 
Z
);

1258 
	}
}

1259 
	$eidli°
(
A
Ë::
	$nm
(
Y
Ë
	$cﬁœã
(
C
Ë
	`s‹t‹dî
(
Z
). {

1260 
A
 = 
	`∑r£rAddEx¥IdLi°Tîm
(
pP¨£
, 0, &
Y
, 
C
, 
Z
);

1261 
	}
}

1263 %
ty≥
 
cﬁœã
 {}

1264 
	$cﬁœã
(
C
Ë::. {C = 0;
	}
}

1265 
	$cﬁœã
(
C
Ë::
COLLATE
 
ids
. {C = 1;
	}
}

1270 
cmd
 ::
DROP
 
INDEX
 
	$i„xi°s
(
E
Ë
	`fuŒ«me
(
X
). {
	`sqlôe3Dr›Index
(
pP¨£
, X, E);
	}
}

1274 %
i‚def
 
SQLITE_OMIT_VACUUM


1275 %
i‚def
 
SQLITE_OMIT_ATTACH


1276 
cmd
 ::
VACUUM
. {
sqlôe3Vacuum
(
pP¨£
);}

1277 
cmd
 ::
VACUUM
 
nm
. {
sqlôe3Vacuum
(
pP¨£
);}

1278 %
ídif
 
SQLITE_OMIT_ATTACH


1279 %
ídif
 
SQLITE_OMIT_VACUUM


1283 %
i‚def
 
SQLITE_OMIT_PRAGMA


1284 
cmd
 ::
PRAGMA
 
	$nm
(
X
Ë
	`dbnm
(
Z
). {
	`sqlôe3Pøgma
(
pP¨£
,&X,&Z,0,0);
	}
}

1285 
cmd
 ::
PRAGMA
 
	$nm
(
X
Ë
	$dbnm
(
Z
Ë
EQ
 
	`nmnum
(
Y
). {
	`sqlôe3Pøgma
(
pP¨£
,&
X
,&Z,&Y,0);
	}
}

1286 
cmd
 ::
PRAGMA
 
	$nm
(
X
Ë
	$dbnm
(
Z
Ë
LP
 
	$nmnum
(
Y
Ë
RP
. {
	`sqlôe3Pøgma
(
pP¨£
,&
X
,&
Z
,&Y,0);
	}
}

1287 
cmd
 ::
PRAGMA
 
	$nm
(
X
Ë
	$dbnm
(
Z
Ë
EQ
 
	`möus_num
(
Y
).

1288 {
	`sqlôe3Pøgma
(
pP¨£
,&
X
,&
Z
,&
Y
,1);
	}
}

1289 
cmd
 ::
PRAGMA
 
	$nm
(
X
Ë
	$dbnm
(
Z
Ë
LP
 
	$möus_num
(
Y
Ë
RP
.

1290 {
	`sqlôe3Pøgma
(
pP¨£
,&
X
,&
Z
,&
Y
,1);
	}
}

1292 
	$nmnum
(
A
Ë::
	`∂us_num
(A).

1293 
	$nmnum
(
A
Ë::
	`nm
(A).

1294 
	$nmnum
(
A
Ë::
	`ON
(A).

1295 
	$nmnum
(
A
Ë::
	`DELETE
(A).

1296 
	$nmnum
(
A
Ë::
	`DEFAULT
(A).

1297 %
ídif
 
SQLITE_OMIT_PRAGMA


1298 %
tokí_˛ass
 
numbî
 
INTEGER
|
FLOAT
.

1299 
	$∂us_num
(
A
Ë::
PLUS
 
	`numbî
(
X
). {A = X;
	}
}

1300 
	$∂us_num
(
A
Ë::
	`numbî
(A).

1301 
	$möus_num
(
A
Ë::
MINUS
 
	`numbî
(
X
). {A = X;
	}
}

1304 %
i‚def
 
SQLITE_OMIT_TRIGGER


1306 
cmd
 ::
¸óãkw
 
	$åiggî_de˛
(
A
Ë
BEGIN
 
	$åiggî_cmd_li°
(
S
Ë
	`END
(
Z
). {

1307 
Tokí
 
Æl
;

1308 
Æl
.
z
 = 
A
.z;

1309 
Æl
.
n
 = ()(
Z
.
z
 - 
A
.z) + Z.n;

1310 
	`sqlôe3FöishTriggî
(
pP¨£
, 
S
, &
Æl
);

1311 
	}
}

1313 
	$åiggî_de˛
(
A
Ë::
	$ãmp
(
T
Ë
TRIGGER
 
	$i‚Ÿexi°s
(
NOERR
Ë
	$nm
(
B
Ë
	$dbnm
(
Z
)

1314 
	$åiggî_time
(
C
Ë
	$åiggî_evít
(
D
)

1315 
ON
 
	$fuŒ«me
(
E
Ë
f‹óch_˛au£
 
	`whí_˛au£
(
G
). {

1316 
	`sqlôe3BegöTriggî
(
pP¨£
, &
B
, &
Z
, 
C
, 
D
.
a
, D.
b
, 
E
, 
G
, 
T
, 
NOERR
);

1317 
A
 = (
Z
.
n
==0?
B
:Z);

1318 
	}
}

1320 %
ty≥
 
åiggî_time
 {}

1321 
	$åiggî_time
(
A
Ë::
BEFORE
. { A = 
TK_BEFORE
; 
	}
}

1322 
	$åiggî_time
(
A
Ë::
AFTER
. { A = 
TK_AFTER
; 
	}
}

1323 
	$åiggî_time
(
A
Ë::
INSTEAD
 
OF
. { A = 
TK_INSTEAD
;
	}
}

1324 
	$åiggî_time
(
A
Ë::. { A = 
TK_BEFORE
; 
	}
}

1326 %
ty≥
 
åiggî_evít
 {
TrigEvít
}

1327 %
de°ru˘‹
 
åiggî_evít
 {
sqlôe3IdLi°Dñëe
(
pP¨£
->
db
, 
$$
.
b
);}

1328 
	$åiggî_evít
(
A
Ë::
DELETE
|
	`INSERT
(
X
). {A.
a
 = @X; A.
b
 = 0;
	}
}

1329 
	$åiggî_evít
(
A
Ë::
	`UPDATE
(
X
). {A.
a
 = @X; A.
b
 = 0;
	}
}

1330 
	$åiggî_evít
(
A
Ë::
UPDATE
 
OF
 
	`idli°
(
X
).{A.
a
 = 
TK_UPDATE
; A.
b
 = X;
	}
}

1332 
f‹óch_˛au£
 ::= .

1333 
f‹óch_˛au£
 ::
FOR
 
EACH
 
ROW
.

1335 %
ty≥
 
whí_˛au£
 {
Ex¥
*}

1336 %
de°ru˘‹
 
whí_˛au£
 {
sqlôe3Ex¥Dñëe
(
pP¨£
->
db
, 
$$
);}

1337 
	$whí_˛au£
(
A
Ë::. { A = 0; 
	}
}

1338 
	$whí_˛au£
(
A
Ë::
WHEN
 
	`ex¥
(
X
). { A = X.
pEx¥
; 
	}
}

1340 %
ty≥
 
åiggî_cmd_li°
 {
TriggîSãp
*}

1341 %
de°ru˘‹
 
åiggî_cmd_li°
 {
sqlôe3DñëeTriggîSãp
(
pP¨£
->
db
, 
$$
);}

1342 
	$åiggî_cmd_li°
(
A
Ë::
	$åiggî_cmd_li°
(
A
Ë
	$åiggî_cmd
(
X
Ë
SEMI
. {

1343 
	`as£π
–
A
!=0 );

1344 
A
->
pLa°
->
pNext
 = 
X
;

1345 
A
->
pLa°
 = 
X
;

1346 
	}
}

1347 
	$åiggî_cmd_li°
(
A
Ë::
	$åiggî_cmd
(
A
Ë
SEMI
. {

1348 
	`as£π
–
A
!=0 );

1349 
A
->
pLa°
 = A;

1350 
	}
}

1356 %
ty≥
 
ånm
 {
Tokí
}

1357 
	$ånm
(
A
Ë::
	`nm
(A).

1358 
	$ånm
(
A
Ë::
nm
 
DOT
 
	`nm
(
X
). {

1359 
A
 = 
X
;

1360 
	`sqlôe3Eº‹Msg
(
pP¨£
,

1363 
	}
}

1369 
åidxby
 ::= .

1370 
åidxby
 ::
INDEXED
 
BY
 
nm
. {

1371 
sqlôe3Eº‹Msg
(
pP¨£
,

1375 
åidxby
 ::
NOT
 
INDEXED
. {

1376 
sqlôe3Eº‹Msg
(
pP¨£
,

1383 %
ty≥
 
åiggî_cmd
 {
TriggîSãp
*}

1384 %
de°ru˘‹
 
åiggî_cmd
 {
sqlôe3DñëeTriggîSãp
(
pP¨£
->
db
, 
$$
);}

1386 
	$åiggî_cmd
(
A
) ::=

1387 
UPDATE
 
	$‹c⁄f
(
R
Ë
	$ånm
(
X
Ë
åidxby
 
SET
 
	$£éi°
(
Y
Ë
	`whîe_›t
(
Z
).

1388 {
A
 = 
	`sqlôe3TriggîUpd©eSãp
(
pP¨£
->
db
, &
X
, 
Y
, 
Z
, 
R
);
	}
}

1391 
	$åiggî_cmd
(
A
Ë::
	$ö£π_cmd
(
R
Ë
INTO
 
	$ånm
(
X
Ë
	$idli°_›t
(
F
Ë
	`£À˘
(
S
).

1392 {
A
 = 
	`sqlôe3TriggîIn£πSãp
(
pP¨£
->
db
, &
X
, 
F
, 
S
, 
R
); 
	}
}

1395 
	$åiggî_cmd
(
A
Ë::
DELETE
 
FROM
 
	$ånm
(
X
Ë
åidxby
 
	`whîe_›t
(
Y
).

1396 {
A
 = 
	`sqlôe3TriggîDñëeSãp
(
pP¨£
->
db
, &
X
, 
Y
);
	}
}

1399 
	$åiggî_cmd
(
A
Ë::
	`£À˘
(
X
).

1400 {
A
 = 
	`sqlôe3TriggîSñe˘Sãp
(
pP¨£
->
db
, 
X
); 
	}
}

1403 
	$ex¥
(
A
Ë::
	$RAISE
(
X
Ë
LP
 
IGNORE
 
	`RP
(
Y
). {

1404 
	`•™Së
(&
A
,&
X
,&
Y
);

1405 
A
.
pEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_RAISE
, 0, 0, 0);

1406 if–
A
.
pEx¥
 ){

1407 
A
.
pEx¥
->
afföôy
 = 
OE_Ign‹e
;

1409 
	}
}

1410 
	$ex¥
(
A
Ë::
	$RAISE
(
X
Ë
LP
 
	$øi£ty≥
(
T
Ë
COMMA
 
	$nm
(
Z
Ë
	`RP
(
Y
). {

1411 
	`•™Së
(&
A
,&
X
,&
Y
);

1412 
A
.
pEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_RAISE
, 0, 0, &
Z
);

1413 if–
A
.
pEx¥
 ) {

1414 
A
.
pEx¥
->
afföôy
 = ()
T
;

1416 
	}
}

1417 %
ídif
 !
SQLITE_OMIT_TRIGGER


1419 %
ty≥
 
øi£ty≥
 {}

1420 
	$øi£ty≥
(
A
Ë::
ROLLBACK
. {A = 
OE_Rﬁlback
;
	}
}

1421 
	$øi£ty≥
(
A
Ë::
ABORT
. {A = 
OE_Ab‹t
;
	}
}

1422 
	$øi£ty≥
(
A
Ë::
FAIL
. {A = 
OE_Faû
;
	}
}

1426 %
i‚def
 
SQLITE_OMIT_TRIGGER


1427 
cmd
 ::
DROP
 
TRIGGER
 
	$i„xi°s
(
NOERR
Ë
	`fuŒ«me
(
X
). {

1428 
	`sqlôe3Dr›Triggî
(
pP¨£
,
X
,
NOERR
);

1429 
	}
}

1430 %
ídif
 !
SQLITE_OMIT_TRIGGER


1433 %
i‚def
 
SQLITE_OMIT_ATTACH


1434 
cmd
 ::
ATTACH
 
d©aba£_kw_›t
 
	$ex¥
(
F
Ë
AS
 
	$ex¥
(
D
Ë
	`key_›t
(
K
). {

1435 
	`sqlôe3Aâach
(
pP¨£
, 
F
.
pEx¥
, 
D
.pEx¥, 
K
);

1436 
	}
}

1437 
cmd
 ::
DETACH
 
d©aba£_kw_›t
 
ex¥
(
D
). {

1438 
sqlôe3Dëach
(
pP¨£
, 
D
.
pEx¥
);

1441 %
ty≥
 
key_›t
 {
Ex¥
*}

1442 %
de°ru˘‹
 
key_›t
 {
sqlôe3Ex¥Dñëe
(
pP¨£
->
db
, 
$$
);}

1443 
	$key_›t
(
A
Ë::. { A = 0; 
	}
}

1444 
	$key_›t
(
A
Ë::
KEY
 
	`ex¥
(
X
). { A = X.
pEx¥
; 
	}
}

1446 
d©aba£_kw_›t
 ::
DATABASE
.

1447 
d©aba£_kw_›t
 ::= .

1448 %
ídif
 
SQLITE_OMIT_ATTACH


1451 %
i‚def
 
SQLITE_OMIT_REINDEX


1452 
cmd
 ::
REINDEX
. {
sqlôe3Reödex
(
pP¨£
, 0, 0);}

1453 
cmd
 ::
REINDEX
 
	$nm
(
X
Ë
	`dbnm
(
Y
). {
	`sqlôe3Reödex
(
pP¨£
, &X, &Y);
	}
}

1454 %
ídif
 
SQLITE_OMIT_REINDEX


1457 %
i‚def
 
SQLITE_OMIT_ANALYZE


1458 
cmd
 ::
ANALYZE
. {
sqlôe3A«lyze
(
pP¨£
, 0, 0);}

1459 
cmd
 ::
ANALYZE
 
	$nm
(
X
Ë
	`dbnm
(
Y
). {
	`sqlôe3A«lyze
(
pP¨£
, &X, &Y);
	}
}

1460 %
ídif


1463 %
i‚def
 
SQLITE_OMIT_ALTERTABLE


1464 
cmd
 ::
ALTER
 
TABLE
 
	$fuŒ«me
(
X
Ë
RENAME
 
TO
 
	`nm
(
Z
). {

1465 
	`sqlôe3A…îRíameTabÀ
(
pP¨£
,
X
,&
Z
);

1466 
	}
}

1467 
cmd
 ::
ALTER
 
TABLE
 
add_cﬁumn_fuŒ«me


1468 
ADD
 
kwcﬁumn_›t
 
	$cﬁum¬ame
(
Y
Ë
ˇrgli°
. {

1469 
Y
.
n
 = ()(
pP¨£
->
sLa°Tokí
.
z
-Y.z) +ÖParse->sLastToken.n;

1470 
	`sqlôe3A…îFöishAddCﬁumn
(
pP¨£
, &
Y
);

1471 
	}
}

1472 
add_cﬁumn_fuŒ«me
 ::
fuŒ«me
(
X
). {

1473 
dißbÀLookaside
(
pP¨£
);

1474 
sqlôe3A…îBegöAddCﬁumn
(
pP¨£
, 
X
);

1476 
kwcﬁumn_›t
 ::= .

1477 
kwcﬁumn_›t
 ::
COLUMNKW
.

1478 %
ídif
 
SQLITE_OMIT_ALTERTABLE


1481 %
i‚def
 
SQLITE_OMIT_VIRTUALTABLE


1482 
cmd
 ::
¸óã_vèb
. {
sqlôe3VèbFöishP¨£
(
pP¨£
,0);}

1483 
cmd
 ::
¸óã_vèb
 
LP
 
vèb¨gli°
 
RP
(
X
). {
sqlôe3VèbFöishP¨£
(
pP¨£
,&X);}

1484 
¸óã_vèb
 ::
¸óãkw
 
VIRTUAL
 
TABLE
 
	$i‚Ÿexi°s
(
E
)

1485 
	$nm
(
X
Ë
	$dbnm
(
Y
Ë
USING
 
	`nm
(
Z
). {

1486 
	`sqlôe3VèbBegöP¨£
(
pP¨£
, &
X
, &
Y
, &
Z
, 
E
);

1487 
	}
}

1488 
vèb¨gli°
 ::
vèb¨g
.

1489 
vèb¨gli°
 ::vèb¨gli° 
COMMA
 
vèb¨g
.

1490 
vèb¨g
 ::. {
sqlôe3VèbArgInô
(
pP¨£
);}

1491 
vèb¨g
 ::vèb¨g 
vèb¨gtokí
.

1492 
vèb¨gtokí
 ::
ANY
(
X
). {
sqlôe3VèbArgExãnd
(
pP¨£
,&X);}

1493 
vèb¨gtokí
 ::
Õ
 
™yli°
 
RP
(
X
). {
sqlôe3VèbArgExãnd
(
pP¨£
,&X);}

1494 
Õ
 ::
LP
(
X
). {
sqlôe3VèbArgExãnd
(
pP¨£
,&X);}

1495 
™yli°
 ::= .

1496 
™yli°
 ::™yli° 
LP
ányli° 
RP
.

1497 
™yli°
 ::™yli° 
ANY
.

1498 %
ídif
 
SQLITE_OMIT_VIRTUALTABLE


1502 %
ty≥
 
wôh
 {
Wôh
*}

1503 %
ty≥
 
wqli°
 {
Wôh
*}

1504 %
de°ru˘‹
 
wôh
 {
sqlôe3WôhDñëe
(
pP¨£
->
db
, 
$$
);}

1505 %
de°ru˘‹
 
wqli°
 {
sqlôe3WôhDñëe
(
pP¨£
->
db
, 
$$
);}

1507 
	$wôh
(
A
Ë::. {A = 0;
	}
}

1508 %
i‚def
 
SQLITE_OMIT_CTE


1509 
	$wôh
(
A
Ë::
WITH
 
	`wqli°
(
W
). { A = W; 
	}
}

1510 
	$wôh
(
A
Ë::
WITH
 
RECURSIVE
 
	`wqli°
(
W
). { A = W; 
	}
}

1512 
	$wqli°
(
A
Ë::
	$nm
(
X
Ë
	$eidli°_›t
(
Y
Ë
AS
 
LP
 
	$£À˘
(
Z
Ë
RP
. {

1513 
A
 = 
	`sqlôe3WôhAdd
(
pP¨£
, 0, &
X
, 
Y
, 
Z
);

1514 
	}
}

1515 
	$wqli°
(
A
Ë::
	$wqli°
(
A
Ë
COMMA
 
	$nm
(
X
Ë
	$eidli°_›t
(
Y
Ë
AS
 
LP
 
	$£À˘
(
Z
Ë
RP
. {

1516 
A
 = 
	`sqlôe3WôhAdd
(
pP¨£
, A, &
X
, 
Y
, 
Z
);

1517 
	}
}

1518 %
ídif
 
SQLITE_OMIT_CTE


	@pcache.c

14 
	~"sqlôeI¡.h
"

41 
	sPCache
 {

42 
PgHdr
 *
	mpDúty
, *
	mpDútyTaû
;

43 
PgHdr
 *
	mpSyn˚d
;

44 
	mnRefSum
;

45 
	mszCache
;

46 
	mszSpûl
;

47 
	mszPage
;

48 
	mszExåa
;

49 
u8
 
	mbPurgóbÀ
;

50 
u8
 
	meCª©e
;

51 (*
	mxSåess
)(*,
	mPgHdr
*);

52 *
	mpSåess
;

53 
sqlôe3_pˇche
 *
	mpCache
;

65 #i‡
deföed
(
SQLITE_DEBUG
) && 0

66 
	gsqlôe3PˇcheTø˚
 = 2;

67 
	gsqlôe3PˇcheMxDump
 = 9999;

68 
	#pˇcheTø˚
(
X
Ëif(
sqlôe3PˇcheTø˚
){
sqlôe3DebugPrötf
 X;}

	)

69 
	$pˇcheDump
(
PCache
 *
pCache
){

70 
N
;

71 
i
, 
j
;

72 
sqlôe3_pˇche_∑ge
 *
pLowî
;

73 
PgHdr
 *
pPg
;

74 *
a
;

76 if–
sqlôe3PˇcheTø˚
<2 ) ;

77 if–
pCache
->pCache==0 ) ;

78 
N
 = 
	`sqlôe3PˇchePagecou¡
(
pCache
);

79 if–
N
>
sqlôe3PˇcheMxDump
 ) N = sqlite3PcacheMxDump;

80 
i
=1; i<=
N
; i++){

81 
pLowî
 = 
sqlôe3GlobÆC⁄fig
.
pˇche2
.
	`xFëch
(
pCache
->pCache, 
i
, 0);

82 if–
pLowî
==0 ) ;

83 
pPg
 = (
PgHdr
*)
pLowî
->
pExåa
;

84 
	`¥ötf
("%3d:ÇRe‡%2d flg†%02x d©®", 
i
, 
pPg
->
nRef
,ÖPg->
Êags
);

85 
a
 = (*)
pLowî
->
pBuf
;

86 
j
=0; j<12; j++Ë
	`¥ötf
("%02x", 
a
[j]);

87 
	`¥ötf
("\n");

88 if–
pPg
->
pPage
==0 ){

89 
sqlôe3GlobÆC⁄fig
.
pˇche2
.
	`xU≈ö
(
pCache
->pCache, 
pLowî
, 0);

92 
	}
}

94 
	#pˇcheTø˚
(
X
)

	)

95 
	#pˇcheDump
(
X
)

	)

107 #i‡
SQLITE_DEBUG


108 
	$sqlôe3PˇchePageS™ôy
(
PgHdr
 *
pPg
){

109 
PCache
 *
pCache
;

110 
	`as£π
–
pPg
!=0 );

111 
	`as£π
–
pPg
->
pgno
>0 );

112 
pCache
 = 
pPg
->pCache;

113 
	`as£π
–
pCache
!=0 );

114 if–
pPg
->
Êags
 & 
PGHDR_CLEAN
 ){

115 
	`as£π
–(
pPg
->
Êags
 & 
PGHDR_DIRTY
)==0 );

116 
	`as£π
–
pCache
->
pDúty
!=
pPg
 );

117 
	`as£π
–
pCache
->
pDútyTaû
!=
pPg
 );

120 if–
pPg
->
Êags
 & 
PGHDR_WRITEABLE
 ){

121 
	`as£π
–
pPg
->
Êags
 & 
PGHDR_DIRTY
 );

141 
	}
}

148 
	#PCACHE_DIRTYLIST_REMOVE
 1

	)

149 
	#PCACHE_DIRTYLIST_ADD
 2

	)

150 
	#PCACHE_DIRTYLIST_FRONT
 3

	)

158 
	$pˇcheM™ageDútyLi°
(
PgHdr
 *
pPage
, 
u8
 
addRemove
){

159 
PCache
 *
p
 = 
pPage
->
pCache
;

161 
	`pˇcheTø˚
(("%p.DIRTYLIST.%†%d\n", 
p
,

162 
addRemove
==1 ? "REMOVE" :áddRemove==2 ? "ADD" : "FRONT",

163 
pPage
->
pgno
));

164 if–
addRemove
 & 
PCACHE_DIRTYLIST_REMOVE
 ){

165 
	`as£π
–
pPage
->
pDútyNext
 ||ÖPage==
p
->
pDútyTaû
 );

166 
	`as£π
–
pPage
->
pDútyPªv
 ||ÖPage==
p
->
pDúty
 );

169 if–
p
->
pSyn˚d
==
pPage
 ){

170 
p
->
pSyn˚d
 = 
pPage
->
pDútyPªv
;

173 if–
pPage
->
pDútyNext
 ){

174 
pPage
->
pDútyNext
->
pDútyPªv
 =ÖPage->pDirtyPrev;

176 
	`as£π
–
pPage
==
p
->
pDútyTaû
 );

177 
p
->
pDútyTaû
 = 
pPage
->
pDútyPªv
;

179 if–
pPage
->
pDútyPªv
 ){

180 
pPage
->
pDútyPªv
->
pDútyNext
 =ÖPage->pDirtyNext;

186 
	`as£π
–
pPage
==
p
->
pDúty
 );

187 
p
->
pDúty
 = 
pPage
->
pDútyNext
;

188 
	`as£π
–
p
->
bPurgóbÀ
 ||Ö->
eCª©e
==2 );

189 if–
p
->
pDúty
==0 ){

190 
	`as£π
–
p
->
bPurgóbÀ
==0 ||Ö->
eCª©e
==1 );

191 
p
->
eCª©e
 = 2;

194 
pPage
->
pDútyNext
 = 0;

195 
pPage
->
pDútyPªv
 = 0;

197 if–
addRemove
 & 
PCACHE_DIRTYLIST_ADD
 ){

198 
	`as£π
–
pPage
->
pDútyNext
==0 &&ÖPage->
pDútyPªv
==0 && 
p
->
pDúty
!=pPage );

200 
pPage
->
pDútyNext
 = 
p
->
pDúty
;

201 if–
pPage
->
pDútyNext
 ){

202 
	`as£π
–
pPage
->
pDútyNext
->
pDútyPªv
==0 );

203 
pPage
->
pDútyNext
->
pDútyPªv
 =ÖPage;

205 
p
->
pDútyTaû
 = 
pPage
;

206 if–
p
->
bPurgóbÀ
 ){

207 
	`as£π
–
p
->
eCª©e
==2 );

208 
p
->
eCª©e
 = 1;

211 
p
->
pDúty
 = 
pPage
;

218 if–!
p
->
pSyn˚d


219 && 0==(
pPage
->
Êags
&
PGHDR_NEED_SYNC
)

221 
p
->
pSyn˚d
 = 
pPage
;

224 
	`pˇcheDump
(
p
);

225 
	}
}

231 
	$pˇcheU≈ö
(
PgHdr
 *
p
){

232 if–
p
->
pCache
->
bPurgóbÀ
 ){

233 
	`pˇcheTø˚
(("%p.UNPIN %d\n", 
p
->
pCache
,Ö->
pgno
));

234 
sqlôe3GlobÆC⁄fig
.
pˇche2
.
	`xU≈ö
(
p
->
pCache
->pCache,Ö->
pPage
, 0);

235 
	`pˇcheDump
(
p
->
pCache
);

237 
	}
}

243 
	$numbîOfCachePages
(
PCache
 *
p
){

244 if–
p
->
szCache
>=0 ){

247  
p
->
szCache
;

252  ()((-1024*(
i64
)
p
->
szCache
)/’->
szPage
+p->
szExåa
));

254 
	}
}

261 
	$sqlôe3PˇcheInôülize
(){

262 if–
sqlôe3GlobÆC⁄fig
.
pˇche2
.
xInô
==0 ){

266 
	`sqlôe3PCacheSëDeÁu…
();

268  
sqlôe3GlobÆC⁄fig
.
pˇche2
.
	`xInô
(sqlôe3GlobÆC⁄fig.pˇche2.
pArg
);

269 
	}
}

270 
	$sqlôe3PˇcheShutdown
(){

271 if–
sqlôe3GlobÆC⁄fig
.
pˇche2
.
xShutdown
 ){

273 
sqlôe3GlobÆC⁄fig
.
pˇche2
.
	`xShutdown
(sqlôe3GlobÆC⁄fig.pˇche2.
pArg
);

275 
	}
}

280 
	$sqlôe3PˇcheSize
(){  (
PCache
); 
	}
}

288 
sqlôe3PˇcheO≥n
(

289 
szPage
,

290 
szExåa
,

291 
bPurgóbÀ
,

292 (*
xSåess
)(*,
PgHdr
*),

293 *
pSåess
,

294 
PCache
 *
p


296 
	`mem£t
(
p
, 0, (
PCache
));

297 
p
->
szPage
 = 1;

298 
p
->
szExåa
 = szExtra;

299 
p
->
bPurgóbÀ
 = bPurgeable;

300 
p
->
eCª©e
 = 2;

301 
p
->
xSåess
 = xStress;

302 
p
->
pSåess
 =ÖStress;

303 
p
->
szCache
 = 100;

304 
p
->
szSpûl
 = 1;

305 
	`pˇcheTø˚
(("%p.OPEN szPagê%d bPurgóbÀ %d\n",
p
,
szPage
,
bPurgóbÀ
));

306  
	`sqlôe3PˇcheSëPageSize
(
p
, 
szPage
);

307 
	}
}

313 
	$sqlôe3PˇcheSëPageSize
(
PCache
 *
pCache
, 
szPage
){

314 
	`as£π
–
pCache
->
nRefSum
==0 &&ÖCache->
pDúty
==0 );

315 if–
pCache
->
szPage
 ){

316 
sqlôe3_pˇche
 *
pNew
;

317 
pNew
 = 
sqlôe3GlobÆC⁄fig
.
pˇche2
.
	`xCª©e
(

318 
szPage
, 
pCache
->
szExåa
 + 
	`ROUND8
((
PgHdr
)),

319 
pCache
->
bPurgóbÀ


321 if–
pNew
==0 )  
SQLITE_NOMEM_BKPT
;

322 
sqlôe3GlobÆC⁄fig
.
pˇche2
.
	`xCachesize
(
pNew
, 
	`numbîOfCachePages
(
pCache
));

323 if–
pCache
->pCache ){

324 
sqlôe3GlobÆC⁄fig
.
pˇche2
.
	`xDe°roy
(
pCache
->pCache);

326 
pCache
->pCachê
pNew
;

327 
pCache
->
szPage
 = szPage;

328 
	`pˇcheTø˚
(("%p.PAGESIZE %d\n",
pCache
,
szPage
));

330  
SQLITE_OK
;

331 
	}
}

357 
sqlôe3_pˇche_∑ge
 *
	$sqlôe3PˇcheFëch
(

358 
PCache
 *
pCache
,

359 
Pgno
 
pgno
,

360 
¸óãFœg


362 
eCª©e
;

363 
sqlôe3_pˇche_∑ge
 *
pRes
;

365 
	`as£π
–
pCache
!=0 );

366 
	`as£π
–
pCache
->pCache!=0 );

367 
	`as£π
–
¸óãFœg
==3 || createFlag==0 );

368 
	`as£π
–
pgno
>0 );

369 
	`as£π
–
pCache
->
eCª©e
==(’Cache->
bPurgóbÀ
 &&ÖCache->
pDúty
) ? 1 : 2) );

378 
eCª©e
 = 
¸óãFœg
 & 
pCache
->eCreate;

379 
	`as£π
–
eCª©e
==0 ||ÉCreate==1 ||ÉCreate==2 );

380 
	`as£π
–
¸óãFœg
==0 || 
pCache
->
eCª©e
==eCreate );

381 
	`as£π
–
¸óãFœg
==0 || 
eCª©e
==1+(!
pCache
->
bPurgóbÀ
||!pCache->
pDúty
) );

382 
pRes
 = 
sqlôe3GlobÆC⁄fig
.
pˇche2
.
	`xFëch
(
pCache
->pCache, 
pgno
, 
eCª©e
);

383 
	`pˇcheTø˚
(("%p.FETCH %d%†‘esu…: %p)\n",
pCache
,
pgno
,

384 
¸óãFœg
?" cª©e":"",
pRes
));

385  
pRes
;

386 
	}
}

399 
	$sqlôe3PˇcheFëchSåess
(

400 
PCache
 *
pCache
,

401 
Pgno
 
pgno
,

402 
sqlôe3_pˇche_∑ge
 **
µPage


404 
PgHdr
 *
pPg
;

405 if–
pCache
->
eCª©e
==2 )  0;

407 if–
	`sqlôe3PˇchePagecou¡
(
pCache
)>pCache->
szSpûl
 ){

417 
pPg
=
pCache
->
pSyn˚d
;

418 
pPg
 && (pPg->
nRef
 || (pPg->
Êags
&
PGHDR_NEED_SYNC
));

419 
pPg
ıPg->
pDútyPªv


421 
pCache
->
pSyn˚d
 = 
pPg
;

422 if–!
pPg
 ){

423 
pPg
=
pCache
->
pDútyTaû
;ÖPg &&ÖPg->
nRef
;ÖPgıPg->
pDútyPªv
);

425 if–
pPg
 ){

426 
rc
;

427 #ifde‡
SQLITE_LOG_CACHE_SPILL


428 
	`sqlôe3_log
(
SQLITE_FULL
,

430 
pPg
->
pgno
,Ögno,

431 
sqlôe3GlobÆC⁄fig
.
pˇche
.
	`xPagecou¡
(
pCache
->pCache),

432 
	`numbîOfCachePages
(
pCache
));

434 
	`pˇcheTø˚
(("%p.SPILL %d\n",
pCache
,
pPg
->
pgno
));

435 
rc
 = 
pCache
->
	`xSåess
’Cache->
pSåess
, 
pPg
);

436 
	`pˇcheDump
(
pCache
);

437 if–
rc
!=
SQLITE_OK
 &&Ñc!=
SQLITE_BUSY
 ){

438  
rc
;

442 *
µPage
 = 
sqlôe3GlobÆC⁄fig
.
pˇche2
.
	`xFëch
(
pCache
->pCache, 
pgno
, 2);

443  *
µPage
==0 ? 
SQLITE_NOMEM_BKPT
 : 
SQLITE_OK
;

444 
	}
}

455 
SQLITE_NOINLINE
 
PgHdr
 *
	$pˇcheFëchFöishWôhInô
(

456 
PCache
 *
pCache
,

457 
Pgno
 
pgno
,

458 
sqlôe3_pˇche_∑ge
 *
pPage


460 
PgHdr
 *
pPgHdr
;

461 
	`as£π
–
pPage
!=0 );

462 
pPgHdr
 = (
PgHdr
*)
pPage
->
pExåa
;

463 
	`as£π
–
pPgHdr
->
pPage
==0 );

464 
	`mem£t
(
pPgHdr
, 0, (
PgHdr
));

465 
pPgHdr
->
pPage
 =ÖPage;

466 
pPgHdr
->
pD©a
 = 
pPage
->
pBuf
;

467 
pPgHdr
->
pExåa
 = (*)&pPgHdr[1];

468 
	`mem£t
(
pPgHdr
->
pExåa
, 0, 
pCache
->
szExåa
);

469 
pPgHdr
->
pCache
 =ÖCache;

470 
pPgHdr
->
pgno
 =Ögno;

471 
pPgHdr
->
Êags
 = 
PGHDR_CLEAN
;

472  
	`sqlôe3PˇcheFëchFöish
(
pCache
,
pgno
,
pPage
);

473 
	}
}

481 
PgHdr
 *
	$sqlôe3PˇcheFëchFöish
(

482 
PCache
 *
pCache
,

483 
Pgno
 
pgno
,

484 
sqlôe3_pˇche_∑ge
 *
pPage


486 
PgHdr
 *
pPgHdr
;

488 
	`as£π
–
pPage
!=0 );

489 
pPgHdr
 = (
PgHdr
 *)
pPage
->
pExåa
;

491 if–!
pPgHdr
->
pPage
 ){

492  
	`pˇcheFëchFöishWôhInô
(
pCache
, 
pgno
, 
pPage
);

494 
pCache
->
nRefSum
++;

495 
pPgHdr
->
nRef
++;

496 
	`as£π
–
	`sqlôe3PˇchePageS™ôy
(
pPgHdr
) );

497  
pPgHdr
;

498 
	}
}

504 
SQLITE_NOINLINE
 
	$sqlôe3PˇcheRñó£
(
PgHdr
 *
p
){

505 
	`as£π
–
p
->
nRef
>0 );

506 
p
->
pCache
->
nRefSum
--;

507 if–(--
p
->
nRef
)==0 ){

508 if–
p
->
Êags
&
PGHDR_CLEAN
 ){

509 
	`pˇcheU≈ö
(
p
);

510 }if–
p
->
pDútyPªv
!=0 ){

515 
	`pˇcheM™ageDútyLi°
(
p
, 
PCACHE_DIRTYLIST_FRONT
);

518 
	}
}

523 
	$sqlôe3PˇcheRef
(
PgHdr
 *
p
){

524 
	`as£π
(
p
->
nRef
>0);

525 
	`as£π
–
	`sqlôe3PˇchePageS™ôy
(
p
) );

526 
p
->
nRef
++;

527 
p
->
pCache
->
nRefSum
++;

528 
	}
}

535 
	$sqlôe3PˇcheDr›
(
PgHdr
 *
p
){

536 
	`as£π
–
p
->
nRef
==1 );

537 
	`as£π
–
	`sqlôe3PˇchePageS™ôy
(
p
) );

538 if–
p
->
Êags
&
PGHDR_DIRTY
 ){

539 
	`pˇcheM™ageDútyLi°
(
p
, 
PCACHE_DIRTYLIST_REMOVE
);

541 
p
->
pCache
->
nRefSum
--;

542 
sqlôe3GlobÆC⁄fig
.
pˇche2
.
	`xU≈ö
(
p
->
pCache
->pCache,Ö->
pPage
, 1);

543 
	}
}

549 
	$sqlôe3PˇcheMakeDúty
(
PgHdr
 *
p
){

550 
	`as£π
–
p
->
nRef
>0 );

551 
	`as£π
–
	`sqlôe3PˇchePageS™ôy
(
p
) );

552 if–
p
->
Êags
 & (
PGHDR_CLEAN
|
PGHDR_DONT_WRITE
) ){

553 
p
->
Êags
 &~
PGHDR_DONT_WRITE
;

554 if–
p
->
Êags
 & 
PGHDR_CLEAN
 ){

555 
p
->
Êags
 ^(
PGHDR_DIRTY
|
PGHDR_CLEAN
);

556 
	`pˇcheTø˚
(("%p.DIRTY %d\n",
p
->
pCache
,p->
pgno
));

557 
	`as£π
–(
p
->
Êags
 & (
PGHDR_DIRTY
|
PGHDR_CLEAN
))==PGHDR_DIRTY );

558 
	`pˇcheM™ageDútyLi°
(
p
, 
PCACHE_DIRTYLIST_ADD
);

560 
	`as£π
–
	`sqlôe3PˇchePageS™ôy
(
p
) );

562 
	}
}

568 
	$sqlôe3PˇcheMakeCÀ™
(
PgHdr
 *
p
){

569 
	`as£π
–
	`sqlôe3PˇchePageS™ôy
(
p
) );

570 if–
	`ALWAYS
((
p
->
Êags
 & 
PGHDR_DIRTY
)!=0) ){

571 
	`as£π
–(
p
->
Êags
 & 
PGHDR_CLEAN
)==0 );

572 
	`pˇcheM™ageDútyLi°
(
p
, 
PCACHE_DIRTYLIST_REMOVE
);

573 
p
->
Êags
 &~(
PGHDR_DIRTY
|
PGHDR_NEED_SYNC
|
PGHDR_WRITEABLE
);

574 
p
->
Êags
 |
PGHDR_CLEAN
;

575 
	`pˇcheTø˚
(("%p.CLEAN %d\n",
p
->
pCache
,p->
pgno
));

576 
	`as£π
–
	`sqlôe3PˇchePageS™ôy
(
p
) );

577 if–
p
->
nRef
==0 ){

578 
	`pˇcheU≈ö
(
p
);

581 
	}
}

586 
	$sqlôe3PˇcheCÀ™AŒ
(
PCache
 *
pCache
){

587 
PgHdr
 *
p
;

588 
	`pˇcheTø˚
(("%p.CLEAN-ALL\n",
pCache
));

589  (
p
 = 
pCache
->
pDúty
)!=0 ){

590 
	`sqlôe3PˇcheMakeCÀ™
(
p
);

592 
	}
}

597 
	$sqlôe3PˇcheCÀ¨WrôabÀ
(
PCache
 *
pCache
){

598 
PgHdr
 *
p
;

599 
	`pˇcheTø˚
(("%p.CLEAR-WRITEABLE\n",
pCache
));

600 
p
=
pCache
->
pDúty
;Ö;Öı->
pDútyNext
){

601 
p
->
Êags
 &~(
PGHDR_NEED_SYNC
|
PGHDR_WRITEABLE
);

603 
pCache
->
pSyn˚d
 =ÖCache->
pDútyTaû
;

604 
	}
}

609 
	$sqlôe3PˇcheCÀ¨SyncFœgs
(
PCache
 *
pCache
){

610 
PgHdr
 *
p
;

611 
p
=
pCache
->
pDúty
;Ö;Öı->
pDútyNext
){

612 
p
->
Êags
 &~
PGHDR_NEED_SYNC
;

614 
pCache
->
pSyn˚d
 =ÖCache->
pDútyTaû
;

615 
	}
}

620 
	$sqlôe3PˇcheMove
(
PgHdr
 *
p
, 
Pgno
 
√wPgno
){

621 
PCache
 *
pCache
 = 
p
->pCache;

622 
	`as£π
–
p
->
nRef
>0 );

623 
	`as£π
–
√wPgno
>0 );

624 
	`as£π
–
	`sqlôe3PˇchePageS™ôy
(
p
) );

625 
	`pˇcheTø˚
(("%p.MOVE %d -> %d\n",
pCache
,
p
->
pgno
,
√wPgno
));

626 
sqlôe3GlobÆC⁄fig
.
pˇche2
.
	`xRekey
(
pCache
->pCache, 
p
->
pPage
,Ö->
pgno
,
√wPgno
);

627 
p
->
pgno
 = 
√wPgno
;

628 if–(
p
->
Êags
&
PGHDR_DIRTY
Ë&& (p->Êags&
PGHDR_NEED_SYNC
) ){

629 
	`pˇcheM™ageDútyLi°
(
p
, 
PCACHE_DIRTYLIST_FRONT
);

631 
	}
}

642 
	$sqlôe3PˇcheTrunˇã
(
PCache
 *
pCache
, 
Pgno
 
pgno
){

643 if–
pCache
->pCache ){

644 
PgHdr
 *
p
;

645 
PgHdr
 *
pNext
;

646 
	`pˇcheTø˚
(("%p.TRUNCATE %d\n",
pCache
,
pgno
));

647 
p
=
pCache
->
pDúty
;Ö;Ö=
pNext
){

648 
pNext
 = 
p
->
pDútyNext
;

653 
	`as£π
–
p
->
pgno
>0 );

654 if–
p
->
pgno
>pgno ){

655 
	`as£π
–
p
->
Êags
&
PGHDR_DIRTY
 );

656 
	`sqlôe3PˇcheMakeCÀ™
(
p
);

659 if–
pgno
==0 && 
pCache
->
nRefSum
 ){

660 
sqlôe3_pˇche_∑ge
 *
pPage1
;

661 
pPage1
 = 
sqlôe3GlobÆC⁄fig
.
pˇche2
.
	`xFëch
(
pCache
->pCache,1,0);

662 if–
	`ALWAYS
(
pPage1
) ){

664 
	`mem£t
(
pPage1
->
pBuf
, 0, 
pCache
->
szPage
);

665 
pgno
 = 1;

668 
sqlôe3GlobÆC⁄fig
.
pˇche2
.
	`xTrunˇã
(
pCache
->pCache, 
pgno
+1);

670 
	}
}

675 
	$sqlôe3PˇcheClo£
(
PCache
 *
pCache
){

676 
	`as£π
–
pCache
->pCache!=0 );

677 
	`pˇcheTø˚
(("%p.CLOSE\n",
pCache
));

678 
sqlôe3GlobÆC⁄fig
.
pˇche2
.
	`xDe°roy
(
pCache
->pCache);

679 
	}
}

684 
	$sqlôe3PˇcheCÀ¨
(
PCache
 *
pCache
){

685 
	`sqlôe3PˇcheTrunˇã
(
pCache
, 0);

686 
	}
}

692 
PgHdr
 *
	$pˇcheMîgeDútyLi°
(
PgHdr
 *
pA
, PgHd∏*
pB
){

693 
PgHdr
 
ªsu…
, *
pTaû
;

694 
pTaû
 = &
ªsu…
;

695  
pA
 && 
pB
 ){

696 if–
pA
->
pgno
<
pB
->pgno ){

697 
pTaû
->
pDúty
 = 
pA
;

698 
pTaû
 = 
pA
;

699 
pA
 =ÖA->
pDúty
;

701 
pTaû
->
pDúty
 = 
pB
;

702 
pTaû
 = 
pB
;

703 
pB
 =ÖB->
pDúty
;

706 if–
pA
 ){

707 
pTaû
->
pDúty
 = 
pA
;

708 }if–
pB
 ){

709 
pTaû
->
pDúty
 = 
pB
;

711 
pTaû
->
pDúty
 = 0;

713  
ªsu…
.
pDúty
;

714 
	}
}

726 
	#N_SORT_BUCKET
 32

	)

727 
PgHdr
 *
	$pˇcheS‹tDútyLi°
(
PgHdr
 *
pIn
){

728 
PgHdr
 *
a
[
N_SORT_BUCKET
], *
p
;

729 
i
;

730 
	`mem£t
(
a
, 0, (a));

731  
pIn
 ){

732 
p
 = 
pIn
;

733 
pIn
 = 
p
->
pDúty
;

734 
p
->
pDúty
 = 0;

735 
i
=0; 
	`ALWAYS
(i<
N_SORT_BUCKET
-1); i++){

736 if–
a
[
i
]==0 ){

737 
a
[
i
] = 
p
;

740 
p
 = 
	`pˇcheMîgeDútyLi°
(
a
[
i
],Ö);

741 
a
[
i
] = 0;

744 if–
	`NEVER
(
i
==
N_SORT_BUCKET
-1) ){

748 
a
[
i
] = 
	`pˇcheMîgeDútyLi°
◊[i], 
p
);

751 
p
 = 
a
[0];

752 
i
=1; i<
N_SORT_BUCKET
; i++){

753 
p
 = 
	`pˇcheMîgeDútyLi°
’, 
a
[
i
]);

755  
p
;

756 
	}
}

761 
PgHdr
 *
	$sqlôe3PˇcheDútyLi°
(
PCache
 *
pCache
){

762 
PgHdr
 *
p
;

763 
p
=
pCache
->
pDúty
;Ö;Öı->
pDútyNext
){

764 
p
->
pDúty
 =Ö->
pDútyNext
;

766  
	`pˇcheS‹tDútyLi°
(
pCache
->
pDúty
);

767 
	}
}

775 
	$sqlôe3PˇcheRefCou¡
(
PCache
 *
pCache
){

776  
pCache
->
nRefSum
;

777 
	}
}

782 
	$sqlôe3PˇchePageRefcou¡
(
PgHdr
 *
p
){

783  
p
->
nRef
;

784 
	}
}

789 
	$sqlôe3PˇchePagecou¡
(
PCache
 *
pCache
){

790 
	`as£π
–
pCache
->pCache!=0 );

791  
sqlôe3GlobÆC⁄fig
.
pˇche2
.
	`xPagecou¡
(
pCache
->pCache);

792 
	}
}

794 #ifde‡
SQLITE_TEST


798 
	$sqlôe3PˇcheGëCachesize
(
PCache
 *
pCache
){

799  
	`numbîOfCachePages
(
pCache
);

800 
	}
}

806 
	$sqlôe3PˇcheSëCachesize
(
PCache
 *
pCache
, 
mxPage
){

807 
	`as£π
–
pCache
->pCache!=0 );

808 
pCache
->
szCache
 = 
mxPage
;

809 
sqlôe3GlobÆC⁄fig
.
pˇche2
.
	`xCachesize
(
pCache
->pCache,

810 
	`numbîOfCachePages
(
pCache
));

811 
	}
}

818 
	$sqlôe3PˇcheSëSpûlsize
(
PCache
 *
p
, 
mxPage
){

819 
ªs
;

820 
	`as£π
–
p
->
pCache
!=0 );

821 if–
mxPage
 ){

822 if–
mxPage
<0 ){

823 
mxPage
 = ()((-1024*(
i64
)mxPage)/(
p
->
szPage
+p->
szExåa
));

825 
p
->
szSpûl
 = 
mxPage
;

827 
ªs
 = 
	`numbîOfCachePages
(
p
);

828 if–
ªs
<
p
->
szSpûl
 )Ñes =Ö->szSpill;

829  
ªs
;

830 
	}
}

835 
	$sqlôe3PˇcheShrök
(
PCache
 *
pCache
){

836 
	`as£π
–
pCache
->pCache!=0 );

837 
sqlôe3GlobÆC⁄fig
.
pˇche2
.
	`xShrök
(
pCache
->pCache);

838 
	}
}

844 
	$sqlôe3HódîSizePˇche
(){  
	`ROUND8
((
PgHdr
)); 
	}
}

850 
	$sqlôe3PCachePî˚¡Dúty
(
PCache
 *
pCache
){

851 
PgHdr
 *
pDúty
;

852 
nDúty
 = 0;

853 
nCache
 = 
	`numbîOfCachePages
(
pCache
);

854 
pDúty
=
pCache
->pDúty;ÖDúty;ÖDútyıDúty->
pDútyNext
Ë
nDúty
++;

855  
nCache
 ? ()(((
i64
)
nDúty
 * 100) /ÇCache) : 0;

856 
	}
}

858 #i‡
deföed
(
SQLITE_CHECK_PAGES
Ë|| deföed(
SQLITE_DEBUG
)

864 
sqlôe3PˇcheIãøãDúty
(
PCache
 *
pCache
, (*
xIãr
)(
PgHdr
 *)){

865 
PgHdr
 *
pDúty
;

866 
pDúty
=
pCache
->pDúty;ÖDúty;ÖDútyıDúty->
pDútyNext
){

867 
	`xIãr
(
pDúty
);

869 
	}
}

	@pcache.h

16 #i‚de‡
_PCACHE_H_


18 
PgHdr
 
	tPgHdr
;

19 
PCache
 
	tPCache
;

25 
	sPgHdr
 {

26 
sqlôe3_pˇche_∑ge
 *
	mpPage
;

27 *
	mpD©a
;

28 *
	mpExåa
;

29 
PgHdr
 *
	mpDúty
;

30 
Pagî
 *
	mpPagî
;

31 
Pgno
 
	mpgno
;

32 #ifde‡
SQLITE_CHECK_PAGES


33 
u32
 
	m∑geHash
;

35 
u16
 
	mÊags
;

41 
i16
 
	mnRef
;

42 
PCache
 *
	mpCache
;

44 
PgHdr
 *
	mpDútyNext
;

45 
PgHdr
 *
	mpDútyPªv
;

49 
	#PGHDR_CLEAN
 0x001

	)

50 
	#PGHDR_DIRTY
 0x002

	)

51 
	#PGHDR_WRITEABLE
 0x004

	)

52 
	#PGHDR_NEED_SYNC
 0x008

	)

54 
	#PGHDR_DONT_WRITE
 0x010

	)

55 
	#PGHDR_MMAP
 0x020

	)

57 
	#PGHDR_WAL_APPEND
 0x040

	)

60 
sqlôe3PˇcheInôülize
();

61 
sqlôe3PˇcheShutdown
();

66 
sqlôe3PCacheBuf„rSëup
(*, 
sz
, 
n
);

72 
sqlôe3PˇcheO≥n
(

73 
szPage
,

74 
szExåa
,

75 
bPurgóbÀ
,

76 (*
xSåess
)(*, 
PgHdr
*),

77 *
pSåess
,

78 
PCache
 *
pToInô


82 
	`sqlôe3PˇcheSëPageSize
(
PCache
 *, );

87 
	`sqlôe3PˇcheSize
();

92 
sqlôe3_pˇche_∑ge
 *
	`sqlôe3PˇcheFëch
(
PCache
*, 
Pgno
, 
¸óãFœg
);

93 
	`sqlôe3PˇcheFëchSåess
(
PCache
*, 
Pgno
, 
sqlôe3_pˇche_∑ge
**);

94 
PgHdr
 *
	`sqlôe3PˇcheFëchFöish
(
PCache
*, 
Pgno
, 
sqlôe3_pˇche_∑ge
 *
pPage
);

95 
	`sqlôe3PˇcheRñó£
(
PgHdr
*);

97 
	`sqlôe3PˇcheDr›
(
PgHdr
*);

98 
	`sqlôe3PˇcheMakeDúty
(
PgHdr
*);

99 
	`sqlôe3PˇcheMakeCÀ™
(
PgHdr
*);

100 
	`sqlôe3PˇcheCÀ™AŒ
(
PCache
*);

101 
	`sqlôe3PˇcheCÀ¨WrôabÀ
(
PCache
*);

104 
	`sqlôe3PˇcheMove
(
PgHdr
*, 
Pgno
);

107 
	`sqlôe3PˇcheTrunˇã
(
PCache
*, 
Pgno
 
x
);

110 
PgHdr
 *
	`sqlôe3PˇcheDútyLi°
(
PCache
*);

113 
	`sqlôe3PˇcheClo£
(
PCache
*);

116 
	`sqlôe3PˇcheCÀ¨SyncFœgs
(
PCache
 *);

119 
	`sqlôe3PˇcheCÀ¨
(
PCache
*);

122 
	`sqlôe3PˇcheRefCou¡
(
PCache
*);

125 
	`sqlôe3PˇcheRef
(
PgHdr
*);

127 
	`sqlôe3PˇchePageRefcou¡
(
PgHdr
*);

130 
	`sqlôe3PˇchePagecou¡
(
PCache
*);

132 #i‡
	`deföed
(
SQLITE_CHECK_PAGES
Ë|| deföed(
SQLITE_DEBUG
)

137 
	`sqlôe3PˇcheIãøãDúty
(
PCache
 *
pCache
, (*
xIãr
)(
PgHdr
 *));

140 #i‡
	`deföed
(
SQLITE_DEBUG
)

142 
	`sqlôe3PˇchePageS™ôy
(
PgHdr
*);

151 
	`sqlôe3PˇcheSëCachesize
(
PCache
 *, );

152 #ifde‡
SQLITE_TEST


153 
	`sqlôe3PˇcheGëCachesize
(
PCache
 *);

161 
	`sqlôe3PˇcheSëSpûlsize
(
PCache
 *, );

164 
	`sqlôe3PˇcheShrök
(
PCache
*);

166 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


168 
	`sqlôe3PˇcheRñó£Mem‹y
();

171 #ifde‡
SQLITE_TEST


172 
	`sqlôe3PˇcheSèts
(*,*,*,*);

175 
	`sqlôe3PCacheSëDeÁu…
();

178 
	`sqlôe3HódîSizePˇche
();

179 
	`sqlôe3HódîSizePˇche1
();

182 
	`sqlôe3PCachePî˚¡Dúty
(
PCache
*);

	@pcache1.c

83 
	~"sqlôeI¡.h
"

85 
PCache1
 
	tPCache1
;

86 
PgHdr1
 
	tPgHdr1
;

87 
PgFªe¶Ÿ
 
	tPgFªe¶Ÿ
;

88 
PGroup
 
	tPGroup
;

96 
	sPgHdr1
 {

97 
sqlôe3_pˇche_∑ge
 
	m∑ge
;

98 
	miKey
;

99 
u8
 
	misPö√d
;

100 
u8
 
	misBulkLoˇl
;

101 
u8
 
	misAnch‹
;

102 
PgHdr1
 *
	mpNext
;

103 
PCache1
 *
	mpCache
;

104 
PgHdr1
 *
	mpLruNext
;

105 
PgHdr1
 *
	mpLruPªv
;

130 
	sPGroup
 {

131 
sqlôe3_muãx
 *
	mmuãx
;

132 
	mnMaxPage
;

133 
	mnMöPage
;

134 
	mmxPö√d
;

135 
	mnCuºítPage
;

136 
PgHdr1
 
	mÃu
;

147 
	sPCache1
 {

153 
PGroup
 *
	mpGroup
;

154 
	mszPage
;

155 
	mszExåa
;

156 
	mszAŒoc
;

157 
	mbPurgóbÀ
;

158 
	mnMö
;

159 
	mnMax
;

160 
	mn90p˘
;

161 
	miMaxKey
;

166 
	mnRecy˛abÀ
;

167 
	mnPage
;

168 
	mnHash
;

169 
PgHdr1
 **
	m≠Hash
;

170 
PgHdr1
 *
	mpFªe
;

171 *
	mpBulk
;

178 
	sPgFªe¶Ÿ
 {

179 
PgFªe¶Ÿ
 *
	mpNext
;

185 
SQLITE_WSD
 
	sPCacheGlobÆ
 {

186 
PGroup
 
	mgΩ
;

193 
	misInô
;

194 
	m£∑øãCache
;

195 
	mnInôPage
;

196 
	mszSlŸ
;

197 
	mnSlŸ
;

198 
	mnRe£rve
;

199 *
	mpSèπ
, *
	mpEnd
;

201 
sqlôe3_muãx
 *
	mmuãx
;

202 
PgFªe¶Ÿ
 *
	mpFªe
;

203 
	mnFªeSlŸ
;

208 
	mbUndîPªssuª
;

209 } 
	gpˇche1_g
;

216 
	#pˇche1
 (
	`GLOBAL
(
PCacheGlobÆ
, 
pˇche1_g
))

	)

221 #i‡!
deföed
(
SQLITE_ENABLE_MEMORY_MANAGEMENT
Ë|| 
SQLITE_THREADSAFE
==0

222 
	#pˇche1E¡îMuãx
(
X
Ë
	`as£π
((X)->
muãx
==0)

	)

223 
	#pˇche1LóveMuãx
(
X
Ë
	`as£π
((X)->
muãx
==0)

	)

224 
	#PCACHE1_MIGHT_USE_GROUP_MUTEX
 0

	)

226 
	#pˇche1E¡îMuãx
(
X
Ë
	`sqlôe3_muãx_íãr
((X)->
muãx
)

	)

227 
	#pˇche1LóveMuãx
(
X
Ë
	`sqlôe3_muãx_Àave
((X)->
muãx
)

	)

228 
	#PCACHE1_MIGHT_USE_GROUP_MUTEX
 1

	)

244 
	$sqlôe3PCacheBuf„rSëup
(*
pBuf
, 
sz
, 
n
){

245 if–
pˇche1
.
isInô
 ){

246 
PgFªe¶Ÿ
 *
p
;

247 if–
pBuf
==0 ) 
sz
 = 
n
 = 0;

248 
sz
 = 
	`ROUNDDOWN8
(sz);

249 
pˇche1
.
szSlŸ
 = 
sz
;

250 
pˇche1
.
nSlŸ
 =Öˇche1.
nFªeSlŸ
 = 
n
;

251 
pˇche1
.
nRe£rve
 = 
n
>90 ? 10 : (n/10 + 1);

252 
pˇche1
.
pSèπ
 = 
pBuf
;

253 
pˇche1
.
pFªe
 = 0;

254 
pˇche1
.
bUndîPªssuª
 = 0;

255  
n
-- ){

256 
p
 = (
PgFªe¶Ÿ
*)
pBuf
;

257 
p
->
pNext
 = 
pˇche1
.
pFªe
;

258 
pˇche1
.
pFªe
 = 
p
;

259 
pBuf
 = (*)&((*ÌBuf)[
sz
];

261 
pˇche1
.
pEnd
 = 
pBuf
;

263 
	}
}

269 
	$pˇche1InôBulk
(
PCache1
 *
pCache
){

270 
i64
 
szBulk
;

271 *
zBulk
;

272 if–
pˇche1
.
nInôPage
==0 )  0;

274 if–
pCache
->
nMax
<3 )  0;

275 
	`sqlôe3BegöBíignMÆloc
();

276 if–
pˇche1
.
nInôPage
>0 ){

277 
szBulk
 = 
pCache
->
szAŒoc
 * (
i64
)
pˇche1
.
nInôPage
;

279 
szBulk
 = -1024 * (
i64
)
pˇche1
.
nInôPage
;

281 if–
szBulk
 > 
pCache
->
szAŒoc
*(
i64
ÌCache->
nMax
 ){

282 
szBulk
 = 
pCache
->
szAŒoc
*pCache->
nMax
;

284 
zBulk
 = 
pCache
->
pBulk
 = 
	`sqlôe3MÆloc
–
szBulk
 );

285 
	`sqlôe3EndBíignMÆloc
();

286 if–
zBulk
 ){

287 
nBulk
 = 
	`sqlôe3MÆlocSize
(
zBulk
)/
pCache
->
szAŒoc
;

288 
i
;

289 
i
=0; i<
nBulk
; i++){

290 
PgHdr1
 *
pX
 = (PgHdr1*)&
zBulk
[
pCache
->
szPage
];

291 
pX
->
∑ge
.
pBuf
 = 
zBulk
;

292 
pX
->
∑ge
.
pExåa
 = &pX[1];

293 
pX
->
isBulkLoˇl
 = 1;

294 
pX
->
isAnch‹
 = 0;

295 
pX
->
pNext
 = 
pCache
->
pFªe
;

296 
pCache
->
pFªe
 = 
pX
;

297 
zBulk
 +
pCache
->
szAŒoc
;

300  
pCache
->
pFªe
!=0;

301 
	}
}

312 *
	$pˇche1AŒoc
(
nByã
){

313 *
p
 = 0;

314 
	`as£π
–
	`sqlôe3_muãx_nŸhñd
(
pˇche1
.
gΩ
.
muãx
) );

315 if–
nByã
<=
pˇche1
.
szSlŸ
 ){

316 
	`sqlôe3_muãx_íãr
(
pˇche1
.
muãx
);

317 
p
 = (
PgHdr1
 *)
pˇche1
.
pFªe
;

318 if–
p
 ){

319 
pˇche1
.
pFªe
 =Öˇche1.pFªe->
pNext
;

320 
pˇche1
.
nFªeSlŸ
--;

321 
pˇche1
.
bUndîPªssuª
 =Öˇche1.
nFªeSlŸ
<pˇche1.
nRe£rve
;

322 
	`as£π
–
pˇche1
.
nFªeSlŸ
>=0 );

323 
	`sqlôe3SètusHighw©î
(
SQLITE_STATUS_PAGECACHE_SIZE
, 
nByã
);

324 
	`sqlôe3SètusUp
(
SQLITE_STATUS_PAGECACHE_USED
, 1);

326 
	`sqlôe3_muãx_Àave
(
pˇche1
.
muãx
);

328 if–
p
==0 ){

332 
p
 = 
	`sqlôe3MÆloc
(
nByã
);

333 #i‚de‡
SQLITE_DISABLE_PAGECACHE_OVERFLOW_STATS


334 if–
p
 ){

335 
sz
 = 
	`sqlôe3MÆlocSize
(
p
);

336 
	`sqlôe3_muãx_íãr
(
pˇche1
.
muãx
);

337 
	`sqlôe3SètusHighw©î
(
SQLITE_STATUS_PAGECACHE_SIZE
, 
nByã
);

338 
	`sqlôe3SètusUp
(
SQLITE_STATUS_PAGECACHE_OVERFLOW
, 
sz
);

339 
	`sqlôe3_muãx_Àave
(
pˇche1
.
muãx
);

342 
	`sqlôe3MemdebugSëTy≥
(
p
, 
MEMTYPE_PCACHE
);

344  
p
;

345 
	}
}

350 
	$pˇche1Fªe
(*
p
){

351 if–
p
==0 ) ;

352 if–
	`SQLITE_WITHIN
(
p
, 
pˇche1
.
pSèπ
,Öˇche1.
pEnd
) ){

353 
PgFªe¶Ÿ
 *
pSlŸ
;

354 
	`sqlôe3_muãx_íãr
(
pˇche1
.
muãx
);

355 
	`sqlôe3SètusDown
(
SQLITE_STATUS_PAGECACHE_USED
, 1);

356 
pSlŸ
 = (
PgFªe¶Ÿ
*)
p
;

357 
pSlŸ
->
pNext
 = 
pˇche1
.
pFªe
;

358 
pˇche1
.
pFªe
 = 
pSlŸ
;

359 
pˇche1
.
nFªeSlŸ
++;

360 
pˇche1
.
bUndîPªssuª
 =Öˇche1.
nFªeSlŸ
<pˇche1.
nRe£rve
;

361 
	`as£π
–
pˇche1
.
nFªeSlŸ
<ıˇche1.
nSlŸ
 );

362 
	`sqlôe3_muãx_Àave
(
pˇche1
.
muãx
);

364 
	`as£π
–
	`sqlôe3MemdebugHasTy≥
(
p
, 
MEMTYPE_PCACHE
) );

365 
	`sqlôe3MemdebugSëTy≥
(
p
, 
MEMTYPE_HEAP
);

366 #i‚de‡
SQLITE_DISABLE_PAGECACHE_OVERFLOW_STATS


368 
nFªed
 = 0;

369 
nFªed
 = 
	`sqlôe3MÆlocSize
(
p
);

370 
	`sqlôe3_muãx_íãr
(
pˇche1
.
muãx
);

371 
	`sqlôe3SètusDown
(
SQLITE_STATUS_PAGECACHE_OVERFLOW
, 
nFªed
);

372 
	`sqlôe3_muãx_Àave
(
pˇche1
.
muãx
);

375 
	`sqlôe3_‰ì
(
p
);

377 
	}
}

379 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


383 
	$pˇche1MemSize
(*
p
){

384 if–
p
>=
pˇche1
.
pSèπ
 &&Ö<pˇche1.
pEnd
 ){

385  
pˇche1
.
szSlŸ
;

387 
iSize
;

388 
	`as£π
–
	`sqlôe3MemdebugHasTy≥
(
p
, 
MEMTYPE_PCACHE
) );

389 
	`sqlôe3MemdebugSëTy≥
(
p
, 
MEMTYPE_HEAP
);

390 
iSize
 = 
	`sqlôe3MÆlocSize
(
p
);

391 
	`sqlôe3MemdebugSëTy≥
(
p
, 
MEMTYPE_PCACHE
);

392  
iSize
;

394 
	}
}

400 
PgHdr1
 *
	$pˇche1AŒocPage
(
PCache1
 *
pCache
, 
bíignMÆloc
){

401 
PgHdr1
 *
p
 = 0;

402 *
pPg
;

404 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCache
->
pGroup
->
muãx
) );

405 if–
pCache
->
pFªe
 || (pCache->
nPage
==0 && 
	`pˇche1InôBulk
(pCache)) ){

406 
p
 = 
pCache
->
pFªe
;

407 
pCache
->
pFªe
 = 
p
->
pNext
;

408 
p
->
pNext
 = 0;

410 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


414 
	`as£π
–
pˇche1
.
£∑øãCache
==0 );

415 
	`as£π
–
pCache
->
pGroup
==&
pˇche1
.
gΩ
 );

416 
	`pˇche1LóveMuãx
(
pCache
->
pGroup
);

418 if–
bíignMÆloc
 ){ 
	`sqlôe3BegöBíignMÆloc
(); }

419 #ifde‡
SQLITE_PCACHE_SEPARATE_HEADER


420 
pPg
 = 
	`pˇche1AŒoc
(
pCache
->
szPage
);

421 
p
 = 
	`sqlôe3MÆloc
((
PgHdr1
Ë+ 
pCache
->
szExåa
);

422 if–!
pPg
 || !
p
 ){

423 
	`pˇche1Fªe
(
pPg
);

424 
	`sqlôe3_‰ì
(
p
);

425 
pPg
 = 0;

428 
pPg
 = 
	`pˇche1AŒoc
(
pCache
->
szAŒoc
);

429 
p
 = (
PgHdr1
 *)&((
u8
 *)
pPg
)[
pCache
->
szPage
];

431 if–
bíignMÆloc
 ){ 
	`sqlôe3EndBíignMÆloc
(); }

432 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


433 
	`pˇche1E¡îMuãx
(
pCache
->
pGroup
);

435 if–
pPg
==0 )  0;

436 
p
->
∑ge
.
pBuf
 = 
pPg
;

437 
p
->
∑ge
.
pExåa
 = &p[1];

438 
p
->
isBulkLoˇl
 = 0;

439 
p
->
isAnch‹
 = 0;

441 if–
pCache
->
bPurgóbÀ
 ){

442 
pCache
->
pGroup
->
nCuºítPage
++;

444  
p
;

445 
	}
}

450 
	$pˇche1FªePage
(
PgHdr1
 *
p
){

451 
PCache1
 *
pCache
;

452 
	`as£π
–
p
!=0 );

453 
pCache
 = 
p
->pCache;

454 
	`as£π
–
	`sqlôe3_muãx_hñd
(
p
->
pCache
->
pGroup
->
muãx
) );

455 if–
p
->
isBulkLoˇl
 ){

456 
p
->
pNext
 = 
pCache
->
pFªe
;

457 
pCache
->
pFªe
 = 
p
;

459 
	`pˇche1Fªe
(
p
->
∑ge
.
pBuf
);

460 #ifde‡
SQLITE_PCACHE_SEPARATE_HEADER


461 
	`sqlôe3_‰ì
(
p
);

464 if–
pCache
->
bPurgóbÀ
 ){

465 
pCache
->
pGroup
->
nCuºítPage
--;

467 
	}
}

474 *
	$sqlôe3PageMÆloc
(
sz
){

475  
	`pˇche1AŒoc
(
sz
);

476 
	}
}

481 
	$sqlôe3PageFªe
(*
p
){

482 
	`pˇche1Fªe
(
p
);

483 
	}
}

502 
	$pˇche1UndîMem‹yPªssuª
(
PCache1
 *
pCache
){

503 if–
pˇche1
.
nSlŸ
 && (
pCache
->
szPage
+pCache->
szExåa
)<ıˇche1.
szSlŸ
 ){

504  
pˇche1
.
bUndîPªssuª
;

506  
	`sqlôe3HópNóæyFuŒ
();

508 
	}
}

519 
	$pˇche1ResizeHash
(
PCache1
 *
p
){

520 
PgHdr1
 **
≠New
;

521 
nNew
;

522 
i
;

524 
	`as£π
–
	`sqlôe3_muãx_hñd
(
p
->
pGroup
->
muãx
) );

526 
nNew
 = 
p
->
nHash
*2;

527 if–
nNew
<256 ){

528 
nNew
 = 256;

531 
	`pˇche1LóveMuãx
(
p
->
pGroup
);

532 if–
p
->
nHash
 ){ 
	`sqlôe3BegöBíignMÆloc
(); }

533 
≠New
 = (
PgHdr1
 **)
	`sqlôe3MÆlocZîo
((PgHdr1 *)*
nNew
);

534 if–
p
->
nHash
 ){ 
	`sqlôe3EndBíignMÆloc
(); }

535 
	`pˇche1E¡îMuãx
(
p
->
pGroup
);

536 if–
≠New
 ){

537 
i
=0; i<
p
->
nHash
; i++){

538 
PgHdr1
 *
pPage
;

539 
PgHdr1
 *
pNext
 = 
p
->
≠Hash
[
i
];

540  (
pPage
 = 
pNext
)!=0 ){

541 
h
 = 
pPage
->
iKey
 % 
nNew
;

542 
pNext
 = 
pPage
->pNext;

543 
pPage
->
pNext
 = 
≠New
[
h
];

544 
≠New
[
h
] = 
pPage
;

547 
	`sqlôe3_‰ì
(
p
->
≠Hash
);

548 
p
->
≠Hash
 = 
≠New
;

549 
p
->
nHash
 = 
nNew
;

551 
	}
}

560 
PgHdr1
 *
	$pˇche1PöPage
(
PgHdr1
 *
pPage
){

561 
PCache1
 *
pCache
;

563 
	`as£π
–
pPage
!=0 );

564 
	`as£π
–
pPage
->
isPö√d
==0 );

565 
pCache
 = 
pPage
->pCache;

566 
	`as£π
–
pPage
->
pLruNext
 );

567 
	`as£π
–
pPage
->
pLruPªv
 );

568 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCache
->
pGroup
->
muãx
) );

569 
pPage
->
pLruPªv
->
pLruNext
 =ÖPage->pLruNext;

570 
pPage
->
pLruNext
->
pLruPªv
 =ÖPage->pLruPrev;

571 
pPage
->
pLruNext
 = 0;

572 
pPage
->
pLruPªv
 = 0;

573 
pPage
->
isPö√d
 = 1;

574 
	`as£π
–
pPage
->
isAnch‹
==0 );

575 
	`as£π
–
pCache
->
pGroup
->
Ãu
.
isAnch‹
==1 );

576 
pCache
->
nRecy˛abÀ
--;

577  
pPage
;

578 
	}
}

588 
	$pˇche1RemoveFromHash
(
PgHdr1
 *
pPage
, 
‰ìFœg
){

589 
h
;

590 
PCache1
 *
pCache
 = 
pPage
->pCache;

591 
PgHdr1
 **
µ
;

593 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCache
->
pGroup
->
muãx
) );

594 
h
 = 
pPage
->
iKey
 % 
pCache
->
nHash
;

595 
µ
=&
pCache
->
≠Hash
[
h
]; (*µ)!=
pPage
;Öp=&(*µ)->
pNext
);

596 *
µ
 = (*µ)->
pNext
;

598 
pCache
->
nPage
--;

599 if–
‰ìFœg
 ) 
	`pˇche1FªePage
(
pPage
);

600 
	}
}

606 
	$pˇche1Enf‹˚MaxPage
(
PCache1
 *
pCache
){

607 
PGroup
 *
pGroup
 = 
pCache
->pGroup;

608 
PgHdr1
 *
p
;

609 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pGroup
->
muãx
) );

610  
pGroup
->
nCuºítPage
>pGroup->
nMaxPage


611 && (
p
=
pGroup
->
Ãu
.
pLruPªv
)->
isAnch‹
==0

613 
	`as£π
–
p
->
pCache
->
pGroup
==pGroup );

614 
	`as£π
–
p
->
isPö√d
==0 );

615 
	`pˇche1PöPage
(
p
);

616 
	`pˇche1RemoveFromHash
(
p
, 1);

618 if–
pCache
->
nPage
==0 &&ÖCache->
pBulk
 ){

619 
	`sqlôe3_‰ì
(
pCache
->
pBulk
);

620 
pCache
->
pBulk
 =ÖCache->
pFªe
 = 0;

622 
	}
}

631 
	$pˇche1TrunˇãUnß„
(

632 
PCache1
 *
pCache
,

633 
iLimô


635 
	`TESTONLY
–
nPage
 = 0; )

636 
h
;

637 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCache
->
pGroup
->
muãx
) );

638 
h
=0; h<
pCache
->
nHash
; h++){

639 
PgHdr1
 **
µ
 = &
pCache
->
≠Hash
[
h
];

640 
PgHdr1
 *
pPage
;

641  (
pPage
 = *
µ
)!=0 ){

642 if–
pPage
->
iKey
>=
iLimô
 ){

643 
pCache
->
nPage
--;

644 *
µ
 = 
pPage
->
pNext
;

645 if–!
pPage
->
isPö√d
 ) 
	`pˇche1PöPage
(pPage);

646 
	`pˇche1FªePage
(
pPage
);

648 
µ
 = &
pPage
->
pNext
;

649 
	`TESTONLY
–
nPage
++; )

653 
	`as£π
–
pCache
->
nPage
==nPage );

654 
	}
}

662 
	$pˇche1Inô
(*
NŸU£d
){

663 
	`UNUSED_PARAMETER
(
NŸU£d
);

664 
	`as£π
–
pˇche1
.
isInô
==0 );

665 
	`mem£t
(&
pˇche1
, 0, (pcache1));

682 #i‡
	`deföed
(
SQLITE_ENABLE_MEMORY_MANAGEMENT
)

683 
pˇche1
.
£∑øãCache
 = 0;

684 #ñi‡
SQLITE_THREADSAFE


685 
pˇche1
.
£∑øãCache
 = 
sqlôe3GlobÆC⁄fig
.
pPage
==0

686 || 
sqlôe3GlobÆC⁄fig
.
bC‹eMuãx
>0;

688 
pˇche1
.
£∑øãCache
 = 
sqlôe3GlobÆC⁄fig
.
pPage
==0;

691 #i‡
SQLITE_THREADSAFE


692 if–
sqlôe3GlobÆC⁄fig
.
bC‹eMuãx
 ){

693 
pˇche1
.
gΩ
.
muãx
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_LRU
);

694 
pˇche1
.
muãx
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_PMEM
);

697 if–
pˇche1
.
£∑øãCache


698 && 
sqlôe3GlobÆC⁄fig
.
nPage
!=0

699 && 
sqlôe3GlobÆC⁄fig
.
pPage
==0

701 
pˇche1
.
nInôPage
 = 
sqlôe3GlobÆC⁄fig
.
nPage
;

703 
pˇche1
.
nInôPage
 = 0;

705 
pˇche1
.
gΩ
.
mxPö√d
 = 10;

706 
pˇche1
.
isInô
 = 1;

707  
SQLITE_OK
;

708 
	}
}

715 
	$pˇche1Shutdown
(*
NŸU£d
){

716 
	`UNUSED_PARAMETER
(
NŸU£d
);

717 
	`as£π
–
pˇche1
.
isInô
!=0 );

718 
	`mem£t
(&
pˇche1
, 0, (pcache1));

719 
	}
}

722 
pˇche1De°roy
(
sqlôe3_pˇche
 *
p
);

729 
sqlôe3_pˇche
 *
	$pˇche1Cª©e
(
szPage
, 
szExåa
, 
bPurgóbÀ
){

730 
PCache1
 *
pCache
;

731 
PGroup
 *
pGroup
;

732 
sz
;

734 
	`as£π
–(
szPage
 & (szPage-1))==0 && szPage>=512 && szPage<=65536 );

735 
	`as£π
–
szExåa
 < 300 );

737 
sz
 = (
PCache1
Ë+ (
PGroup
)*
pˇche1
.
£∑øãCache
;

738 
pCache
 = (
PCache1
 *)
	`sqlôe3MÆlocZîo
(
sz
);

739 if–
pCache
 ){

740 if–
pˇche1
.
£∑øãCache
 ){

741 
pGroup
 = (
PGroup
*)&
pCache
[1];

742 
pGroup
->
mxPö√d
 = 10;

744 
pGroup
 = &
pˇche1
.
gΩ
;

746 if–
pGroup
->
Ãu
.
isAnch‹
==0 ){

747 
pGroup
->
Ãu
.
isAnch‹
 = 1;

748 
pGroup
->
Ãu
.
pLruPªv
 =ÖGroup->Ãu.
pLruNext
 = &pGroup->lru;

750 
pCache
->
pGroup
 =ÖGroup;

751 
pCache
->
szPage
 = szPage;

752 
pCache
->
szExåa
 = szExtra;

753 
pCache
->
szAŒoc
 = 
szPage
 + 
szExåa
 + 
	`ROUND8
((
PgHdr1
));

754 
pCache
->
bPurgóbÀ
 = (bPurgeable ? 1 : 0);

755 
	`pˇche1E¡îMuãx
(
pGroup
);

756 
	`pˇche1ResizeHash
(
pCache
);

757 if–
bPurgóbÀ
 ){

758 
pCache
->
nMö
 = 10;

759 
pGroup
->
nMöPage
 +
pCache
->
nMö
;

760 
pGroup
->
mxPö√d
 =ÖGroup->
nMaxPage
 + 10 -ÖGroup->
nMöPage
;

762 
	`pˇche1LóveMuãx
(
pGroup
);

763 if–
pCache
->
nHash
==0 ){

764 
	`pˇche1De°roy
((
sqlôe3_pˇche
*)
pCache
);

765 
pCache
 = 0;

768  (
sqlôe3_pˇche
 *)
pCache
;

769 
	}
}

776 
	$pˇche1Cachesize
(
sqlôe3_pˇche
 *
p
, 
nMax
){

777 
PCache1
 *
pCache
 = (PCache1 *)
p
;

778 if–
pCache
->
bPurgóbÀ
 ){

779 
PGroup
 *
pGroup
 = 
pCache
->pGroup;

780 
	`pˇche1E¡îMuãx
(
pGroup
);

781 
pGroup
->
nMaxPage
 +(
nMax
 - 
pCache
->nMax);

782 
pGroup
->
mxPö√d
 =ÖGroup->
nMaxPage
 + 10 -ÖGroup->
nMöPage
;

783 
pCache
->
nMax
 =ÇMax;

784 
pCache
->
n90p˘
 =ÖCache->
nMax
*9/10;

785 
	`pˇche1Enf‹˚MaxPage
(
pCache
);

786 
	`pˇche1LóveMuãx
(
pGroup
);

788 
	}
}

795 
	$pˇche1Shrök
(
sqlôe3_pˇche
 *
p
){

796 
PCache1
 *
pCache
 = (PCache1*)
p
;

797 if–
pCache
->
bPurgóbÀ
 ){

798 
PGroup
 *
pGroup
 = 
pCache
->pGroup;

799 
ßvedMaxPage
;

800 
	`pˇche1E¡îMuãx
(
pGroup
);

801 
ßvedMaxPage
 = 
pGroup
->
nMaxPage
;

802 
pGroup
->
nMaxPage
 = 0;

803 
	`pˇche1Enf‹˚MaxPage
(
pCache
);

804 
pGroup
->
nMaxPage
 = 
ßvedMaxPage
;

805 
	`pˇche1LóveMuãx
(
pGroup
);

807 
	}
}

812 
	$pˇche1Pagecou¡
(
sqlôe3_pˇche
 *
p
){

813 
n
;

814 
PCache1
 *
pCache
 = (PCache1*)
p
;

815 
	`pˇche1E¡îMuãx
(
pCache
->
pGroup
);

816 
n
 = 
pCache
->
nPage
;

817 
	`pˇche1LóveMuãx
(
pCache
->
pGroup
);

818  
n
;

819 
	}
}

830 
SQLITE_NOINLINE
 
PgHdr1
 *
	$pˇche1FëchSège2
(

831 
PCache1
 *
pCache
,

832 
iKey
,

833 
¸óãFœg


835 
nPö√d
;

836 
PGroup
 *
pGroup
 = 
pCache
->pGroup;

837 
PgHdr1
 *
pPage
 = 0;

840 
	`as£π
–
pCache
->
nPage
 >pCache->
nRecy˛abÀ
 );

841 
nPö√d
 = 
pCache
->
nPage
 -ÖCache->
nRecy˛abÀ
;

842 
	`as£π
–
pGroup
->
mxPö√d
 =pGroup->
nMaxPage
 + 10 -ÖGroup->
nMöPage
 );

843 
	`as£π
–
pCache
->
n90p˘
 =pCache->
nMax
*9/10 );

844 if–
¸óãFœg
==1 && (

845 
nPö√d
>=
pGroup
->
mxPö√d


846 || 
nPö√d
>=
pCache
->
n90p˘


847 || (
	`pˇche1UndîMem‹yPªssuª
(
pCache
Ë&&ÖCache->
nRecy˛abÀ
<
nPö√d
)

852 if–
pCache
->
nPage
>ıCache->
nHash
 ) 
	`pˇche1ResizeHash
(pCache);

853 
	`as£π
–
pCache
->
nHash
>0 &&ÖCache->
≠Hash
 );

856 if–
pCache
->
bPurgóbÀ


857 && !
pGroup
->
Ãu
.
pLruPªv
->
isAnch‹


858 && ((
pCache
->
nPage
+1>ıCache->
nMax
Ë|| 
	`pˇche1UndîMem‹yPªssuª
(pCache))

860 
PCache1
 *
pOthî
;

861 
pPage
 = 
pGroup
->
Ãu
.
pLruPªv
;

862 
	`as£π
–
pPage
->
isPö√d
==0 );

863 
	`pˇche1RemoveFromHash
(
pPage
, 0);

864 
	`pˇche1PöPage
(
pPage
);

865 
pOthî
 = 
pPage
->
pCache
;

866 if–
pOthî
->
szAŒoc
 !
pCache
->szAlloc ){

867 
	`pˇche1FªePage
(
pPage
);

868 
pPage
 = 0;

870 
pGroup
->
nCuºítPage
 -(
pOthî
->
bPurgóbÀ
 - 
pCache
->bPurgeable);

877 if–!
pPage
 ){

878 
pPage
 = 
	`pˇche1AŒocPage
(
pCache
, 
¸óãFœg
==1);

881 if–
pPage
 ){

882 
h
 = 
iKey
 % 
pCache
->
nHash
;

883 
pCache
->
nPage
++;

884 
pPage
->
iKey
 = iKey;

885 
pPage
->
pNext
 = 
pCache
->
≠Hash
[
h
];

886 
pPage
->
pCache
 =ÖCache;

887 
pPage
->
pLruPªv
 = 0;

888 
pPage
->
pLruNext
 = 0;

889 
pPage
->
isPö√d
 = 1;

890 *(**)
pPage
->
∑ge
.
pExåa
 = 0;

891 
pCache
->
≠Hash
[
h
] = 
pPage
;

892 if–
iKey
>
pCache
->
iMaxKey
 ){

893 
pCache
->
iMaxKey
 = 
iKey
;

896  
pPage
;

897 
	}
}

958 
PgHdr1
 *
	$pˇche1FëchNoMuãx
(

959 
sqlôe3_pˇche
 *
p
,

960 
iKey
,

961 
¸óãFœg


963 
PCache1
 *
pCache
 = (PCache1 *)
p
;

964 
PgHdr1
 *
pPage
 = 0;

967 
pPage
 = 
pCache
->
≠Hash
[
iKey
 %ÖCache->
nHash
];

968  
pPage
 &&ÖPage->
iKey
!=iKey ){ÖPagêpPage->
pNext
; }

974 if–
pPage
 ){

975 if–!
pPage
->
isPö√d
 ){

976  
	`pˇche1PöPage
(
pPage
);

978  
pPage
;

980 }if–
¸óãFœg
 ){

982  
	`pˇche1FëchSège2
(
pCache
, 
iKey
, 
¸óãFœg
);

986 
	}
}

987 #i‡
PCACHE1_MIGHT_USE_GROUP_MUTEX


988 
PgHdr1
 *
	$pˇche1FëchWôhMuãx
(

989 
sqlôe3_pˇche
 *
p
,

990 
iKey
,

991 
¸óãFœg


993 
PCache1
 *
pCache
 = (PCache1 *)
p
;

994 
PgHdr1
 *
pPage
;

996 
	`pˇche1E¡îMuãx
(
pCache
->
pGroup
);

997 
pPage
 = 
	`pˇche1FëchNoMuãx
(
p
, 
iKey
, 
¸óãFœg
);

998 
	`as£π
–
pPage
==0 || 
pCache
->
iMaxKey
>=
iKey
 );

999 
	`pˇche1LóveMuãx
(
pCache
->
pGroup
);

1000  
pPage
;

1001 
	}
}

1003 
sqlôe3_pˇche_∑ge
 *
	$pˇche1Fëch
(

1004 
sqlôe3_pˇche
 *
p
,

1005 
iKey
,

1006 
¸óãFœg


1008 #i‡
PCACHE1_MIGHT_USE_GROUP_MUTEX
 || 
	`deföed
(
SQLITE_DEBUG
)

1009 
PCache1
 *
pCache
 = (PCache1 *)
p
;

1012 
	`as£π
–
	`off£tof
(
PgHdr1
,
∑ge
)==0 );

1013 
	`as£π
–
pCache
->
bPurgóbÀ
 || 
¸óãFœg
!=1 );

1014 
	`as£π
–
pCache
->
bPurgóbÀ
 ||ÖCache->
nMö
==0 );

1015 
	`as£π
–
pCache
->
bPurgóbÀ
==0 ||ÖCache->
nMö
==10 );

1016 
	`as£π
–
pCache
->
nMö
==0 ||ÖCache->
bPurgóbÀ
 );

1017 
	`as£π
–
pCache
->
nHash
>0 );

1018 #i‡
PCACHE1_MIGHT_USE_GROUP_MUTEX


1019 if–
pCache
->
pGroup
->
muãx
 ){

1020  (
sqlôe3_pˇche_∑ge
*)
	`pˇche1FëchWôhMuãx
(
p
, 
iKey
, 
¸óãFœg
);

1024  (
sqlôe3_pˇche_∑ge
*)
	`pˇche1FëchNoMuãx
(
p
, 
iKey
, 
¸óãFœg
);

1026 
	}
}

1034 
	$pˇche1U≈ö
(

1035 
sqlôe3_pˇche
 *
p
,

1036 
sqlôe3_pˇche_∑ge
 *
pPg
,

1037 
ªu£U∆ikñy


1039 
PCache1
 *
pCache
 = (PCache1 *)
p
;

1040 
PgHdr1
 *
pPage
 = (PgHdr1 *)
pPg
;

1041 
PGroup
 *
pGroup
 = 
pCache
->pGroup;

1043 
	`as£π
–
pPage
->
pCache
==pCache );

1044 
	`pˇche1E¡îMuãx
(
pGroup
);

1049 
	`as£π
–
pPage
->
pLruPªv
==0 &&ÖPage->
pLruNext
==0 );

1050 
	`as£π
–
pPage
->
isPö√d
==1 );

1052 if–
ªu£U∆ikñy
 || 
pGroup
->
nCuºítPage
>pGroup->
nMaxPage
 ){

1053 
	`pˇche1RemoveFromHash
(
pPage
, 1);

1056 
PgHdr1
 **
µFú°
 = &
pGroup
->
Ãu
.
pLruNext
;

1057 
pPage
->
pLruPªv
 = &
pGroup
->
Ãu
;

1058 (
pPage
->
pLruNext
 = *
µFú°
)->
pLruPªv
 =ÖPage;

1059 *
µFú°
 = 
pPage
;

1060 
pCache
->
nRecy˛abÀ
++;

1061 
pPage
->
isPö√d
 = 0;

1064 
	`pˇche1LóveMuãx
(
pCache
->
pGroup
);

1065 
	}
}

1070 
	$pˇche1Rekey
(

1071 
sqlôe3_pˇche
 *
p
,

1072 
sqlôe3_pˇche_∑ge
 *
pPg
,

1073 
iOld
,

1074 
iNew


1076 
PCache1
 *
pCache
 = (PCache1 *)
p
;

1077 
PgHdr1
 *
pPage
 = (PgHdr1 *)
pPg
;

1078 
PgHdr1
 **
µ
;

1079 
h
;

1080 
	`as£π
–
pPage
->
iKey
==
iOld
 );

1081 
	`as£π
–
pPage
->
pCache
==pCache );

1083 
	`pˇche1E¡îMuãx
(
pCache
->
pGroup
);

1085 
h
 = 
iOld
%
pCache
->
nHash
;

1086 
µ
 = &
pCache
->
≠Hash
[
h
];

1087  (*
µ
)!=
pPage
 ){

1088 
µ
 = &(*µ)->
pNext
;

1090 *
µ
 = 
pPage
->
pNext
;

1092 
h
 = 
iNew
%
pCache
->
nHash
;

1093 
pPage
->
iKey
 = 
iNew
;

1094 
pPage
->
pNext
 = 
pCache
->
≠Hash
[
h
];

1095 
pCache
->
≠Hash
[
h
] = 
pPage
;

1096 if–
iNew
>
pCache
->
iMaxKey
 ){

1097 
pCache
->
iMaxKey
 = 
iNew
;

1100 
	`pˇche1LóveMuãx
(
pCache
->
pGroup
);

1101 
	}
}

1110 
	$pˇche1Trunˇã
(
sqlôe3_pˇche
 *
p
, 
iLimô
){

1111 
PCache1
 *
pCache
 = (PCache1 *)
p
;

1112 
	`pˇche1E¡îMuãx
(
pCache
->
pGroup
);

1113 if–
iLimô
<=
pCache
->
iMaxKey
 ){

1114 
	`pˇche1TrunˇãUnß„
(
pCache
, 
iLimô
);

1115 
pCache
->
iMaxKey
 = 
iLimô
-1;

1117 
	`pˇche1LóveMuãx
(
pCache
->
pGroup
);

1118 
	}
}

1125 
	$pˇche1De°roy
(
sqlôe3_pˇche
 *
p
){

1126 
PCache1
 *
pCache
 = (PCache1 *)
p
;

1127 
PGroup
 *
pGroup
 = 
pCache
->pGroup;

1128 
	`as£π
–
pCache
->
bPurgóbÀ
 || (pCache->
nMax
==0 &&ÖCache->
nMö
==0) );

1129 
	`pˇche1E¡îMuãx
(
pGroup
);

1130 
	`pˇche1TrunˇãUnß„
(
pCache
, 0);

1131 
	`as£π
–
pGroup
->
nMaxPage
 >
pCache
->
nMax
 );

1132 
pGroup
->
nMaxPage
 -
pCache
->
nMax
;

1133 
	`as£π
–
pGroup
->
nMöPage
 >
pCache
->
nMö
 );

1134 
pGroup
->
nMöPage
 -
pCache
->
nMö
;

1135 
pGroup
->
mxPö√d
 =ÖGroup->
nMaxPage
 + 10 -ÖGroup->
nMöPage
;

1136 
	`pˇche1Enf‹˚MaxPage
(
pCache
);

1137 
	`pˇche1LóveMuãx
(
pGroup
);

1138 
	`sqlôe3_‰ì
(
pCache
->
pBulk
);

1139 
	`sqlôe3_‰ì
(
pCache
->
≠Hash
);

1140 
	`sqlôe3_‰ì
(
pCache
);

1141 
	}
}

1148 
	$sqlôe3PCacheSëDeÁu…
(){

1149 c⁄° 
sqlôe3_pˇche_mëhods2
 
deÁu…Mëhods
 = {

1152 
pˇche1Inô
,

1153 
pˇche1Shutdown
,

1154 
pˇche1Cª©e
,

1155 
pˇche1Cachesize
,

1156 
pˇche1Pagecou¡
,

1157 
pˇche1Fëch
,

1158 
pˇche1U≈ö
,

1159 
pˇche1Rekey
,

1160 
pˇche1Trunˇã
,

1161 
pˇche1De°roy
,

1162 
pˇche1Shrök


1164 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_PCACHE2
, &
deÁu…Mëhods
);

1165 
	}
}

1170 
	$sqlôe3HódîSizePˇche1
(){  
	`ROUND8
((
PgHdr1
)); 
	}
}

1176 
sqlôe3_muãx
 *
	$sqlôe3Pˇche1Muãx
(){

1177  
pˇche1
.
muãx
;

1178 
	}
}

1180 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


1190 
	$sqlôe3PˇcheRñó£Mem‹y
(
nReq
){

1191 
nFªe
 = 0;

1192 
	`as£π
–
	`sqlôe3_muãx_nŸhñd
(
pˇche1
.
gΩ
.
muãx
) );

1193 
	`as£π
–
	`sqlôe3_muãx_nŸhñd
(
pˇche1
.
muãx
) );

1194 if–
sqlôe3GlobÆC⁄fig
.
nPage
==0 ){

1195 
PgHdr1
 *
p
;

1196 
	`pˇche1E¡îMuãx
(&
pˇche1
.
gΩ
);

1197  (
nReq
<0 || 
nFªe
<nReq)

1198 && (
p
=
pˇche1
.
gΩ
.
Ãu
.
pLruPªv
)!=0

1199 && 
p
->
isAnch‹
==0

1201 
nFªe
 +
	`pˇche1MemSize
(
p
->
∑ge
.
pBuf
);

1202 #ifde‡
SQLITE_PCACHE_SEPARATE_HEADER


1203 
nFªe
 +
	`sqlôe3MemSize
(
p
);

1205 
	`as£π
–
p
->
isPö√d
==0 );

1206 
	`pˇche1PöPage
(
p
);

1207 
	`pˇche1RemoveFromHash
(
p
, 1);

1209 
	`pˇche1LóveMuãx
(&
pˇche1
.
gΩ
);

1211  
nFªe
;

1212 
	}
}

1215 #ifde‡
SQLITE_TEST


1220 
	$sqlôe3PˇcheSèts
(

1221 *
≤Cuºít
,

1222 *
≤Max
,

1223 *
≤Mö
,

1224 *
≤Recy˛abÀ


1226 
PgHdr1
 *
p
;

1227 
nRecy˛abÀ
 = 0;

1228 
p
=
pˇche1
.
gΩ
.
Ãu
.
pLruNext
;Ö && !p->
isAnch‹
;Ö=p->pLruNext){

1229 
	`as£π
–
p
->
isPö√d
==0 );

1230 
nRecy˛abÀ
++;

1232 *
≤Cuºít
 = 
pˇche1
.
gΩ
.
nCuºítPage
;

1233 *
≤Max
 = ()
pˇche1
.
gΩ
.
nMaxPage
;

1234 *
≤Mö
 = ()
pˇche1
.
gΩ
.
nMöPage
;

1235 *
≤Recy˛abÀ
 = 
nRecy˛abÀ
;

1236 
	}
}

	@pragma.c

14 
	~"sqlôeI¡.h
"

16 #i‡!
deföed
(
SQLITE_ENABLE_LOCKING_STYLE
)

17 #i‡
deföed
(
__APPLE__
)

18 
	#SQLITE_ENABLE_LOCKING_STYLE
 1

	)

20 
	#SQLITE_ENABLE_LOCKING_STYLE
 0

	)

31 
	~"¥agma.h
"

44 
u8
 
	$gëSa„tyLevñ
(c⁄° *
z
, 
omôFuŒ
, 
u8
 
dÊt
){

46 c⁄° 
zText
[] = "onoffalseyestruextrafull";

47 c⁄° 
u8
 
iOff£t
[] = {0, 1, 2, 4, 9, 12, 15, 20};

48 c⁄° 
u8
 
iLígth
[] = {2, 2, 3, 5, 3, 4, 5, 4};

49 c⁄° 
u8
 
iVÆue
[] = {1, 0, 0, 0, 1, 1, 3, 2};

51 
i
, 
n
;

52 if–
	`sqlôe3Isdigô
(*
z
) ){

53  (
u8
)
	`sqlôe3Atoi
(
z
);

55 
n
 = 
	`sqlôe3SåÀn30
(
z
);

56 
i
=0; i<
	`AºaySize
(
iLígth
); i++){

57 if–
iLígth
[
i
]==
n
 && 
	`sqlôe3SåNICmp
(&
zText
[
iOff£t
[i]],
z
,n)==0

58 && (!
omôFuŒ
 || 
iVÆue
[
i
]<=1)

60  
iVÆue
[
i
];

63  
dÊt
;

64 
	}
}

69 
u8
 
	$sqlôe3GëBoﬁón
(c⁄° *
z
, 
u8
 
dÊt
){

70  
	`gëSa„tyLevñ
(
z
,1,
dÊt
)!=0;

71 
	}
}

77 #i‡!
deföed
(
SQLITE_OMIT_PRAGMA
)

82 
	$gëLockögMode
(c⁄° *
z
){

83 if–
z
 ){

84 if–0==
	`sqlôe3SåICmp
(
z
, "ex˛usive"ËË 
PAGER_LOCKINGMODE_EXCLUSIVE
;

85 if–0==
	`sqlôe3SåICmp
(
z
, "n‹mÆ"ËË 
PAGER_LOCKINGMODE_NORMAL
;

87  
PAGER_LOCKINGMODE_QUERY
;

88 
	}
}

90 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


97 
	$gëAutoVacuum
(c⁄° *
z
){

98 
i
;

99 if–0==
	`sqlôe3SåICmp
(
z
, "n⁄e"ËË 
BTREE_AUTOVACUUM_NONE
;

100 if–0==
	`sqlôe3SåICmp
(
z
, "fuŒ"ËË 
BTREE_AUTOVACUUM_FULL
;

101 if–0==
	`sqlôe3SåICmp
(
z
, "ö¸emíèl"ËË 
BTREE_AUTOVACUUM_INCR
;

102 
i
 = 
	`sqlôe3Atoi
(
z
);

103  (
u8
)((
i
>=0&&i<=2)?i:0);

104 
	}
}

107 #i‚de‡
SQLITE_OMIT_PAGER_PRAGMAS


113 
	$gëTempSt‹e
(c⁄° *
z
){

114 if–
z
[0]>='0' && z[0]<='2' ){

115  
z
[0] - '0';

116 }if–
	`sqlôe3SåICmp
(
z
, "file")==0 ){

118 }if–
	`sqlôe3SåICmp
(
z
, "memory")==0 ){

123 
	}
}

126 #i‚de‡
SQLITE_OMIT_PAGER_PRAGMAS


131 
	$övÆid©eTempSt‹age
(
P¨£
 *
pP¨£
){

132 
sqlôe3
 *
db
 = 
pP¨£
->db;

133 if–
db
->
aDb
[1].
pBt
!=0 ){

134 if–!
db
->
autoCommô
 || 
	`sqlôe3BåìIsInRódTøns
(db->
aDb
[1].
pBt
) ){

135 
	`sqlôe3Eº‹Msg
(
pP¨£
, "temporary storage cannot be changed "

137  
SQLITE_ERROR
;

139 
	`sqlôe3BåìClo£
(
db
->
aDb
[1].
pBt
);

140 
db
->
aDb
[1].
pBt
 = 0;

141 
	`sqlôe3Re£tAŒSchemasOfC⁄√˘i⁄
(
db
);

143  
SQLITE_OK
;

144 
	}
}

147 #i‚de‡
SQLITE_OMIT_PAGER_PRAGMAS


153 
	$ch™geTempSt‹age
(
P¨£
 *
pP¨£
, c⁄° *
zSt‹ageTy≥
){

154 
ts
 = 
	`gëTempSt‹e
(
zSt‹ageTy≥
);

155 
sqlôe3
 *
db
 = 
pP¨£
->db;

156 if–
db
->
ãmp_°‹e
==
ts
 )  
SQLITE_OK
;

157 if–
	`övÆid©eTempSt‹age
–
pP¨£
 ) !
SQLITE_OK
 ){

158  
SQLITE_ERROR
;

160 
db
->
ãmp_°‹e
 = (
u8
)
ts
;

161  
SQLITE_OK
;

162 
	}
}

168 
	$£tAŒCﬁumnNames
(

169 
Vdbe
 *
v
,

170 
N
,

171 c⁄° **
azCﬁ


173 
i
;

174 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 
N
);

175 
i
=0; i<
N
; i++){

176 
	`sqlôe3VdbeSëCﬁName
(
v
, 
i
, 
COLNAME_NAME
, 
azCﬁ
[i], 
SQLITE_STATIC
);

178 
	}
}

179 
	$£tO√CﬁumnName
(
Vdbe
 *
v
, c⁄° *
z
){

180 
	`£tAŒCﬁumnNames
(
v
, 1, &
z
);

181 
	}
}

186 
	$ªtu∫SögÀI¡
(
Vdbe
 *
v
, c⁄° *
zLabñ
, 
i64
 
vÆue
){

187 
	`sqlôe3VdbeAddOp4Dup8
(
v
, 
OP_I¡64
, 0, 1, 0, (c⁄° 
u8
*)&
vÆue
, 
P4_INT64
);

188 
	`£tO√CﬁumnName
(
v
, 
zLabñ
);

189 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 1, 1);

190 
	}
}

195 
	$ªtu∫SögÀText
(

196 
Vdbe
 *
v
,

197 c⁄° *
zLabñ
,

198 c⁄° *
zVÆue


200 if–
zVÆue
 ){

201 
	`sqlôe3VdbeLﬂdSåög
(
v
, 1, (c⁄° *)
zVÆue
);

202 
	`£tO√CﬁumnName
(
v
, 
zLabñ
);

203 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 1, 1);

205 
	}
}

212 #i‚de‡
SQLITE_OMIT_PAGER_PRAGMAS


213 
	$£tAŒPagîFœgs
(
sqlôe3
 *
db
){

214 if–
db
->
autoCommô
 ){

215 
Db
 *
pDb
 = 
db
->
aDb
;

216 
n
 = 
db
->
nDb
;

217 
	`as£π
–
SQLITE_FuŒFSync
==
PAGER_FULLFSYNC
 );

218 
	`as£π
–
SQLITE_Ck±FuŒFSync
==
PAGER_CKPT_FULLFSYNC
 );

219 
	`as£π
–
SQLITE_CacheSpûl
==
PAGER_CACHESPILL
 );

220 
	`as£π
–(
PAGER_FULLFSYNC
 | 
PAGER_CKPT_FULLFSYNC
 | 
PAGER_CACHESPILL
)

221 =
PAGER_FLAGS_MASK
 );

222 
	`as£π
–(
pDb
->
ß„ty_Àvñ
 & 
PAGER_SYNCHRONOUS_MASK
)==pDb->safety_level );

223  (
n
--) > 0 ){

224 if–
pDb
->
pBt
 ){

225 
	`sqlôe3BåìSëPagîFœgs
(
pDb
->
pBt
,

226 
pDb
->
ß„ty_Àvñ
 | (
db
->
Êags
 & 
PAGER_FLAGS_MASK
) );

228 
pDb
++;

231 
	}
}

233 
	#£tAŒPagîFœgs
(
X
Ë

	)

240 #i‚de‡
SQLITE_OMIT_FOREIGN_KEY


241 c⁄° *
	$a˘i⁄Name
(
u8
 
a˘i⁄
){

242 c⁄° *
zName
;

243  
a˘i⁄
 ){

244 
OE_SëNuŒ
: 
zName
 = "SET NULL"; ;

245 
OE_SëDÊt
: 
zName
 = "SET DEFAULT"; ;

246 
OE_Casˇde
: 
zName
 = "CASCADE"; ;

247 
OE_Re°ri˘
: 
zName
 = "RESTRICT"; ;

248 : 
zName
 = "NO ACTION";

249 
	`as£π
–
a˘i⁄
==
OE_N⁄e
 ); ;

251  
zName
;

252 
	}
}

261 c⁄° *
	$sqlôe3Jou∫ÆModíame
(
eMode
){

262 * c⁄° 
azModeName
[] = {

264 #i‚de‡
SQLITE_OMIT_WAL


268 
	`as£π
–
PAGER_JOURNALMODE_DELETE
==0 );

269 
	`as£π
–
PAGER_JOURNALMODE_PERSIST
==1 );

270 
	`as£π
–
PAGER_JOURNALMODE_OFF
==2 );

271 
	`as£π
–
PAGER_JOURNALMODE_TRUNCATE
==3 );

272 
	`as£π
–
PAGER_JOURNALMODE_MEMORY
==4 );

273 
	`as£π
–
PAGER_JOURNALMODE_WAL
==5 );

274 
	`as£π
–
eMode
>=0 &&ÉMode<=
	`AºaySize
(
azModeName
) );

276 if–
eMode
==
	`AºaySize
(
azModeName
) )  0;

277  
azModeName
[
eMode
];

278 
	}
}

295 
	$sqlôe3Pøgma
(

296 
P¨£
 *
pP¨£
,

297 
Tokí
 *
pId1
,

298 
Tokí
 *
pId2
,

299 
Tokí
 *
pVÆue
,

300 
möusFœg


302 *
zLe·
 = 0;

303 *
zRight
 = 0;

304 c⁄° *
zDb
 = 0;

305 
Tokí
 *
pId
;

306 *
aF˙é
[4];

307 
iDb
;

308 
lwr
, 
u¥
, 
mid
 = 0;

309 
rc
;

310 
sqlôe3
 *
db
 = 
pP¨£
->db;

311 
Db
 *
pDb
;

312 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

313 c⁄° 
sPøgmaNames
 *
pPøgma
;

315 if–
v
==0 ) ;

316 
	`sqlôe3VdbeRunO∆yOn˚
(
v
);

317 
pP¨£
->
nMem
 = 2;

321 
iDb
 = 
	`sqlôe3TwoP¨tName
(
pP¨£
, 
pId1
, 
pId2
, &
pId
);

322 if–
iDb
<0 ) ;

323 
pDb
 = &
db
->
aDb
[
iDb
];

328 if–
iDb
==1 && 
	`sqlôe3O≥nTempD©aba£
(
pP¨£
) ){

332 
zLe·
 = 
	`sqlôe3NameFromTokí
(
db
, 
pId
);

333 if–!
zLe·
 ) ;

334 if–
möusFœg
 ){

335 
zRight
 = 
	`sqlôe3MPrötf
(
db
, "-%T", 
pVÆue
);

337 
zRight
 = 
	`sqlôe3NameFromTokí
(
db
, 
pVÆue
);

340 
	`as£π
–
pId2
 );

341 
zDb
 = 
pId2
->
n
>0 ? 
pDb
->
zName
 : 0;

342 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_PRAGMA
, 
zLe·
, 
zRight
, 
zDb
) ){

343 
¥agma_out
;

361 
aF˙é
[0] = 0;

362 
aF˙é
[1] = 
zLe·
;

363 
aF˙é
[2] = 
zRight
;

364 
aF˙é
[3] = 0;

365 
db
->
busyH™dÀr
.
nBusy
 = 0;

366 
rc
 = 
	`sqlôe3_fûe_c⁄åﬁ
(
db
, 
zDb
, 
SQLITE_FCNTL_PRAGMA
, (*)
aF˙é
);

367 if–
rc
==
SQLITE_OK
 ){

368 
	`ªtu∫SögÀText
(
v
, "ªsu…", 
aF˙é
[0]);

369 
	`sqlôe3_‰ì
(
aF˙é
[0]);

370 
¥agma_out
;

372 if–
rc
!=
SQLITE_NOTFOUND
 ){

373 if–
aF˙é
[0] ){

374 
	`sqlôe3Eº‹Msg
(
pP¨£
, "%s", 
aF˙é
[0]);

375 
	`sqlôe3_‰ì
(
aF˙é
[0]);

377 
pP¨£
->
nEº
++;

378 
pP¨£
->
rc
 =Ñc;

379 
¥agma_out
;

383 
lwr
 = 0;

384 
u¥
 = 
	`AºaySize
(
aPøgmaNames
)-1;

385  
lwr
<=
u¥
 ){

386 
mid
 = (
lwr
+
u¥
)/2;

387 
rc
 = 
	`sqlôe3_°ricmp
(
zLe·
, 
aPøgmaNames
[
mid
].
zName
);

388 if–
rc
==0 ) ;

389 if–
rc
<0 ){

390 
u¥
 = 
mid
 - 1;

392 
lwr
 = 
mid
 + 1;

395 if–
lwr
>
u¥
 ) 
¥agma_out
;

396 
pPøgma
 = &
aPøgmaNames
[
mid
];

399 if–(
pPøgma
->
mPøgFœg
 & 
PøgFœg_NìdSchema
)!=0 ){

400 if–
	`sqlôe3RódSchema
(
pP¨£
ËË
¥agma_out
;

404  
pPøgma
->
ePøgTyp
 ){

406 #i‡!
	`deföed
(
SQLITE_OMIT_PAGER_PRAGMAS
Ë&& !deföed(
SQLITE_OMIT_DEPRECATED
)

423 
PøgTyp_DEFAULT_CACHE_SIZE
: {

424 c⁄° 
iLn
 = 
	`VDBE_OFFSET_LINENO
(2);

425 c⁄° 
VdbeOpLi°
 
gëCacheSize
[] = {

426 { 
OP_Tønß˘i⁄
, 0, 0, 0},

427 { 
OP_RódCookõ
, 0, 1, 
BTREE_DEFAULT_CACHE_SIZE
},

428 { 
OP_IfPos
, 1, 8, 0},

429 { 
OP_I¡egî
, 0, 2, 0},

430 { 
OP_Subåa˘
, 1, 2, 1},

431 { 
OP_IfPos
, 1, 8, 0},

432 { 
OP_I¡egî
, 0, 1, 0},

433 { 
OP_No›
, 0, 0, 0},

434 { 
OP_Resu…Row
, 1, 1, 0},

436 
VdbeOp
 *
aOp
;

437 
	`sqlôe3VdbeU£sBåì
(
v
, 
iDb
);

438 if–!
zRight
 ){

439 
	`£tO√CﬁumnName
(
v
, "cache_size");

440 
pP¨£
->
nMem
 += 2;

441 
	`sqlôe3VdbeVîifyNoMÆlocRequúed
(
v
, 
	`AºaySize
(
gëCacheSize
));

442 
aOp
 = 
	`sqlôe3VdbeAddOpLi°
(
v
, 
	`AºaySize
(
gëCacheSize
), gëCacheSize, 
iLn
);

443 if–
	`ONLY_IF_REALLOC_STRESS
(
aOp
==0) ) ;

444 
aOp
[0].
p1
 = 
iDb
;

445 
aOp
[1].
p1
 = 
iDb
;

446 
aOp
[6].
p1
 = 
SQLITE_DEFAULT_CACHE_SIZE
;

448 
size
 = 
	`sqlôe3AbsI¡32
(
	`sqlôe3Atoi
(
zRight
));

449 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 0, 
iDb
);

450 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_SëCookõ
, 
iDb
, 
BTREE_DEFAULT_CACHE_SIZE
, 
size
);

451 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

452 
pDb
->
pSchema
->
ˇche_size
 = 
size
;

453 
	`sqlôe3BåìSëCacheSize
(
pDb
->
pBt
,ÖDb->
pSchema
->
ˇche_size
);

459 #i‡!
	`deföed
(
SQLITE_OMIT_PAGER_PRAGMAS
)

469 
PøgTyp_PAGE_SIZE
: {

470 
Båì
 *
pBt
 = 
pDb
->pBt;

471 
	`as£π
–
pBt
!=0 );

472 if–!
zRight
 ){

473 
size
 = 
	`ALWAYS
(
pBt
Ë? 
	`sqlôe3BåìGëPageSize
(pBt) : 0;

474 
	`ªtu∫SögÀI¡
(
v
, "∑ge_size", 
size
);

479 
db
->
√xtPagesize
 = 
	`sqlôe3Atoi
(
zRight
);

480 if–
SQLITE_NOMEM
==
	`sqlôe3BåìSëPageSize
(
pBt
, 
db
->
√xtPagesize
,-1,0) ){

481 
	`sqlôe3OomFau…
(
db
);

495 
PøgTyp_SECURE_DELETE
: {

496 
Båì
 *
pBt
 = 
pDb
->pBt;

497 
b
 = -1;

498 
	`as£π
–
pBt
!=0 );

499 if–
zRight
 ){

500 
b
 = 
	`sqlôe3GëBoﬁón
(
zRight
, 0);

502 if–
pId2
->
n
==0 && 
b
>=0 ){

503 
ii
;

504 
ii
=0; ii<
db
->
nDb
; ii++){

505 
	`sqlôe3BåìSecuªDñëe
(
db
->
aDb
[
ii
].
pBt
, 
b
);

508 
b
 = 
	`sqlôe3BåìSecuªDñëe
(
pBt
, b);

509 
	`ªtu∫SögÀI¡
(
v
, "£cuª_dñëe", 
b
);

530 
PøgTyp_PAGE_COUNT
: {

531 
iReg
;

532 
	`sqlôe3CodeVîifySchema
(
pP¨£
, 
iDb
);

533 
iReg
 = ++
pP¨£
->
nMem
;

534 if–
	`sqlôe3Tﬁowî
(
zLe·
[0])=='p' ){

535 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Pagecou¡
, 
iDb
, 
iReg
);

537 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_MaxPg˙t
, 
iDb
, 
iReg
,

538 
	`sqlôe3AbsI¡32
(
	`sqlôe3Atoi
(
zRight
)));

540 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 
iReg
, 1);

541 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 1);

542 
	`sqlôe3VdbeSëCﬁName
(
v
, 0, 
COLNAME_NAME
, 
zLe·
, 
SQLITE_TRANSIENT
);

550 
PøgTyp_LOCKING_MODE
: {

551 c⁄° *
zRë
 = "normal";

552 
eMode
 = 
	`gëLockögMode
(
zRight
);

554 if–
pId2
->
n
==0 && 
eMode
==
PAGER_LOCKINGMODE_QUERY
 ){

559 
eMode
 = 
db
->
dÊtLockMode
;

561 
Pagî
 *
pPagî
;

562 if–
pId2
->
n
==0 ){

571 
ii
;

572 
	`as£π
(
pDb
==&
db
->
aDb
[0]);

573 
ii
=2; ii<
db
->
nDb
; ii++){

574 
pPagî
 = 
	`sqlôe3BåìPagî
(
db
->
aDb
[
ii
].
pBt
);

575 
	`sqlôe3PagîLockögMode
(
pPagî
, 
eMode
);

577 
db
->
dÊtLockMode
 = (
u8
)
eMode
;

579 
pPagî
 = 
	`sqlôe3BåìPagî
(
pDb
->
pBt
);

580 
eMode
 = 
	`sqlôe3PagîLockögMode
(
pPagî
,ÉMode);

583 
	`as£π
–
eMode
==
PAGER_LOCKINGMODE_NORMAL


584 || 
eMode
==
PAGER_LOCKINGMODE_EXCLUSIVE
 );

585 if–
eMode
==
PAGER_LOCKINGMODE_EXCLUSIVE
 ){

586 
zRë
 = "exclusive";

588 
	`ªtu∫SögÀText
(
v
, "lockög_mode", 
zRë
);

597 
PøgTyp_JOURNAL_MODE
: {

598 
eMode
;

599 
ii
;

601 
	`£tO√CﬁumnName
(
v
, "journal_mode");

602 if–
zRight
==0 ){

605 
eMode
 = 
PAGER_JOURNALMODE_QUERY
;

607 c⁄° *
zMode
;

608 
n
 = 
	`sqlôe3SåÀn30
(
zRight
);

609 
eMode
=0; (
zMode
 = 
	`sqlôe3Jou∫ÆModíame
(eMode))!=0;ÉMode++){

610 if–
	`sqlôe3SåNICmp
(
zRight
, 
zMode
, 
n
)==0 ) ;

612 if–!
zMode
 ){

615 
eMode
 = 
PAGER_JOURNALMODE_QUERY
;

618 if–
eMode
==
PAGER_JOURNALMODE_QUERY
 && 
pId2
->
n
==0 ){

620 
iDb
 = 0;

621 
pId2
->
n
 = 1;

623 
ii
=
db
->
nDb
-1; ii>=0; ii--){

624 if–
db
->
aDb
[
ii
].
pBt
 && (ii==
iDb
 || 
pId2
->
n
==0) ){

625 
	`sqlôe3VdbeU£sBåì
(
v
, 
ii
);

626 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Jou∫ÆMode
, 
ii
, 1, 
eMode
);

629 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 1, 1);

639 
PøgTyp_JOURNAL_SIZE_LIMIT
: {

640 
Pagî
 *
pPagî
 = 
	`sqlôe3BåìPagî
(
pDb
->
pBt
);

641 
i64
 
iLimô
 = -2;

642 if–
zRight
 ){

643 
	`sqlôe3DecOrHexToI64
(
zRight
, &
iLimô
);

644 if–
iLimô
<-1 ) iLimit = -1;

646 
iLimô
 = 
	`sqlôe3PagîJou∫ÆSizeLimô
(
pPagî
, iLimit);

647 
	`ªtu∫SögÀI¡
(
v
, "jou∫Æ_size_limô", 
iLimô
);

660 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


661 
PøgTyp_AUTO_VACUUM
: {

662 
Båì
 *
pBt
 = 
pDb
->pBt;

663 
	`as£π
–
pBt
!=0 );

664 if–!
zRight
 ){

665 
	`ªtu∫SögÀI¡
(
v
, "auto_vacuum", 
	`sqlôe3BåìGëAutoVacuum
(
pBt
));

667 
eAuto
 = 
	`gëAutoVacuum
(
zRight
);

668 
	`as£π
–
eAuto
>=0 &&ÉAuto<=2 );

669 
db
->
√xtAutovac
 = (
u8
)
eAuto
;

675 
rc
 = 
	`sqlôe3BåìSëAutoVacuum
(
pBt
, 
eAuto
);

676 if–
rc
==
SQLITE_OK
 && (
eAuto
==1 ||ÉAuto==2) ){

682 c⁄° 
iLn
 = 
	`VDBE_OFFSET_LINENO
(2);

683 c⁄° 
VdbeOpLi°
 
£tMëa6
[] = {

684 { 
OP_Tønß˘i⁄
, 0, 1, 0},

685 { 
OP_RódCookõ
, 0, 1, 
BTREE_LARGEST_ROOT_PAGE
},

686 { 
OP_If
, 1, 0, 0},

687 { 
OP_HÆt
, 
SQLITE_OK
, 
OE_Ab‹t
, 0},

688 { 
OP_SëCookõ
, 0, 
BTREE_INCR_VACUUM
, 0},

690 
VdbeOp
 *
aOp
;

691 
iAddr
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

692 
	`sqlôe3VdbeVîifyNoMÆlocRequúed
(
v
, 
	`AºaySize
(
£tMëa6
));

693 
aOp
 = 
	`sqlôe3VdbeAddOpLi°
(
v
, 
	`AºaySize
(
£tMëa6
), sëMëa6, 
iLn
);

694 if–
	`ONLY_IF_REALLOC_STRESS
(
aOp
==0) ) ;

695 
aOp
[0].
p1
 = 
iDb
;

696 
aOp
[1].
p1
 = 
iDb
;

697 
aOp
[2].
p2
 = 
iAddr
+4;

698 
aOp
[4].
p1
 = 
iDb
;

699 
aOp
[4].
p3
 = 
eAuto
 - 1;

700 
	`sqlôe3VdbeU£sBåì
(
v
, 
iDb
);

712 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


713 
PøgTyp_INCREMENTAL_VACUUM
: {

714 
iLimô
, 
addr
;

715 if–
zRight
==0 || !
	`sqlôe3GëI¡32
(zRight, &
iLimô
) || iLimit<=0 ){

716 
iLimô
 = 0x7fffffff;

718 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 0, 
iDb
);

719 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 
iLimô
, 1);

720 
addr
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_In¸Vacuum
, 
iDb
); 
	`VdbeCovîage
(v);

721 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Resu…Row
, 1);

722 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_AddImm
, 1, -1);

723 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IfPos
, 1, 
addr
); 
	`VdbeCovîage
(v);

724 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr
);

729 #i‚de‡
SQLITE_OMIT_PAGER_PRAGMAS


741 
PøgTyp_CACHE_SIZE
: {

742 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

743 if–!
zRight
 ){

744 
	`ªtu∫SögÀI¡
(
v
, "ˇche_size", 
pDb
->
pSchema
->
ˇche_size
);

746 
size
 = 
	`sqlôe3Atoi
(
zRight
);

747 
pDb
->
pSchema
->
ˇche_size
 = 
size
;

748 
	`sqlôe3BåìSëCacheSize
(
pDb
->
pBt
,ÖDb->
pSchema
->
ˇche_size
);

775 
PøgTyp_CACHE_SPILL
: {

776 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

777 if–!
zRight
 ){

778 
	`ªtu∫SögÀI¡
(
v
, "cache_spill",

779 (
db
->
Êags
 & 
SQLITE_CacheSpûl
)==0 ? 0 :

780 
	`sqlôe3BåìSëSpûlSize
(
pDb
->
pBt
,0));

782 
size
 = 1;

783 if–
	`sqlôe3GëI¡32
(
zRight
, &
size
) ){

784 
	`sqlôe3BåìSëSpûlSize
(
pDb
->
pBt
, 
size
);

786 if–
	`sqlôe3GëBoﬁón
(
zRight
, 
size
!=0) ){

787 
db
->
Êags
 |
SQLITE_CacheSpûl
;

789 
db
->
Êags
 &~
SQLITE_CacheSpûl
;

791 
	`£tAŒPagîFœgs
(
db
);

810 
PøgTyp_MMAP_SIZE
: {

811 
sqlôe3_öt64
 
sz
;

812 #i‡
SQLITE_MAX_MMAP_SIZE
>0

813 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

814 if–
zRight
 ){

815 
ii
;

816 
	`sqlôe3DecOrHexToI64
(
zRight
, &
sz
);

817 if–
sz
<0 ) sz = 
sqlôe3GlobÆC⁄fig
.
szMm≠
;

818 if–
pId2
->
n
==0 ) 
db
->
szMm≠
 = 
sz
;

819 
ii
=
db
->
nDb
-1; ii>=0; ii--){

820 if–
db
->
aDb
[
ii
].
pBt
 && (ii==
iDb
 || 
pId2
->
n
==0) ){

821 
	`sqlôe3BåìSëMm≠Limô
(
db
->
aDb
[
ii
].
pBt
, 
sz
);

825 
sz
 = -1;

826 
rc
 = 
	`sqlôe3_fûe_c⁄åﬁ
(
db
, 
zDb
, 
SQLITE_FCNTL_MMAP_SIZE
, &
sz
);

828 
sz
 = 0;

829 
rc
 = 
SQLITE_OK
;

831 if–
rc
==
SQLITE_OK
 ){

832 
	`ªtu∫SögÀI¡
(
v
, "mm≠_size", 
sz
);

833 }if–
rc
!=
SQLITE_NOTFOUND
 ){

834 
pP¨£
->
nEº
++;

835 
pP¨£
->
rc
 =Ñc;

851 
PøgTyp_TEMP_STORE
: {

852 if–!
zRight
 ){

853 
	`ªtu∫SögÀI¡
(
v
, "ãmp_°‹e", 
db
->
ãmp_°‹e
);

855 
	`ch™geTempSt‹age
(
pP¨£
, 
zRight
);

870 
PøgTyp_TEMP_STORE_DIRECTORY
: {

871 if–!
zRight
 ){

872 
	`ªtu∫SögÀText
(
v
, "ãmp_°‹e_dúe˘‹y", 
sqlôe3_ãmp_dúe˘‹y
);

874 #i‚de‡
SQLITE_OMIT_WSD


875 if–
zRight
[0] ){

876 
ªs
;

877 
rc
 = 
	`sqlôe3OsAc˚ss
(
db
->
pVfs
, 
zRight
, 
SQLITE_ACCESS_READWRITE
, &
ªs
);

878 if–
rc
!=
SQLITE_OK
 || 
ªs
==0 ){

879 
	`sqlôe3Eº‹Msg
(
pP¨£
, "notá writable directory");

880 
¥agma_out
;

883 if–
SQLITE_TEMP_STORE
==0

884 || (
SQLITE_TEMP_STORE
==1 && 
db
->
ãmp_°‹e
<=1)

885 || (
SQLITE_TEMP_STORE
==2 && 
db
->
ãmp_°‹e
==1)

887 
	`övÆid©eTempSt‹age
(
pP¨£
);

889 
	`sqlôe3_‰ì
(
sqlôe3_ãmp_dúe˘‹y
);

890 if–
zRight
[0] ){

891 
sqlôe3_ãmp_dúe˘‹y
 = 
	`sqlôe3_m¥ötf
("%s", 
zRight
);

893 
sqlôe3_ãmp_dúe˘‹y
 = 0;

900 #i‡
SQLITE_OS_WIN


914 
PøgTyp_DATA_STORE_DIRECTORY
: {

915 if–!
zRight
 ){

916 
	`ªtu∫SögÀText
(
v
, "d©a_°‹e_dúe˘‹y", 
sqlôe3_d©a_dúe˘‹y
);

918 #i‚de‡
SQLITE_OMIT_WSD


919 if–
zRight
[0] ){

920 
ªs
;

921 
rc
 = 
	`sqlôe3OsAc˚ss
(
db
->
pVfs
, 
zRight
, 
SQLITE_ACCESS_READWRITE
, &
ªs
);

922 if–
rc
!=
SQLITE_OK
 || 
ªs
==0 ){

923 
	`sqlôe3Eº‹Msg
(
pP¨£
, "notá writable directory");

924 
¥agma_out
;

927 
	`sqlôe3_‰ì
(
sqlôe3_d©a_dúe˘‹y
);

928 if–
zRight
[0] ){

929 
sqlôe3_d©a_dúe˘‹y
 = 
	`sqlôe3_m¥ötf
("%s", 
zRight
);

931 
sqlôe3_d©a_dúe˘‹y
 = 0;

939 #i‡
SQLITE_ENABLE_LOCKING_STYLE


948 
PøgTyp_LOCK_PROXY_FILE
: {

949 if–!
zRight
 ){

950 
Pagî
 *
pPagî
 = 
	`sqlôe3BåìPagî
(
pDb
->
pBt
);

951 *
¥oxy_fûe_∑th
 = 
NULL
;

952 
sqlôe3_fûe
 *
pFûe
 = 
	`sqlôe3PagîFûe
(
pPagî
);

953 
	`sqlôe3OsFûeC⁄åﬁHöt
(
pFûe
, 
SQLITE_GET_LOCKPROXYFILE
,

954 &
¥oxy_fûe_∑th
);

955 
	`ªtu∫SögÀText
(
v
, "lock_¥oxy_fûe", 
¥oxy_fûe_∑th
);

957 
Pagî
 *
pPagî
 = 
	`sqlôe3BåìPagî
(
pDb
->
pBt
);

958 
sqlôe3_fûe
 *
pFûe
 = 
	`sqlôe3PagîFûe
(
pPagî
);

959 
ªs
;

960 if–
zRight
[0] ){

961 
ªs
=
	`sqlôe3OsFûeC⁄åﬁ
(
pFûe
, 
SQLITE_SET_LOCKPROXYFILE
,

962 
zRight
);

964 
ªs
=
	`sqlôe3OsFûeC⁄åﬁ
(
pFûe
, 
SQLITE_SET_LOCKPROXYFILE
,

965 
NULL
);

967 if–
ªs
!=
SQLITE_OK
 ){

968 
	`sqlôe3Eº‹Msg
(
pP¨£
, "failedÅo setÜockÖroxy file");

969 
¥agma_out
;

985 
PøgTyp_SYNCHRONOUS
: {

986 if–!
zRight
 ){

987 
	`ªtu∫SögÀI¡
(
v
, "synchr⁄ous", 
pDb
->
ß„ty_Àvñ
-1);

989 if–!
db
->
autoCommô
 ){

990 
	`sqlôe3Eº‹Msg
(
pP¨£
,

993 
iLevñ
 = (
	`gëSa„tyLevñ
(
zRight
,0,1)+1Ë& 
PAGER_SYNCHRONOUS_MASK
;

994 if–
iLevñ
==0 ) iLevel = 1;

995 
pDb
->
ß„ty_Àvñ
 = 
iLevñ
;

996 
pDb
->
bSyncSë
 = 1;

997 
	`£tAŒPagîFœgs
(
db
);

1004 #i‚de‡
SQLITE_OMIT_FLAG_PRAGMAS


1005 
PøgTyp_FLAG
: {

1006 if–
zRight
==0 ){

1007 
	`ªtu∫SögÀI¡
(
v
, 
pPøgma
->
zName
, (
db
->
Êags
 &ÖPøgma->
iArg
)!=0 );

1009 
mask
 = 
pPøgma
->
iArg
;

1010 if–
db
->
autoCommô
==0 ){

1013 
mask
 &~(
SQLITE_F‹eignKeys
);

1015 #i‡
SQLITE_USER_AUTHENTICATION


1016 if–
db
->
auth
.
authLevñ
==
UAUTH_U£r
 ){

1018 
mask
 &~(
SQLITE_WrôeSchema
);

1022 if–
	`sqlôe3GëBoﬁón
(
zRight
, 0) ){

1023 
db
->
Êags
 |
mask
;

1025 
db
->
Êags
 &~
mask
;

1026 if–
mask
==
SQLITE_De„rFKs
 ) 
db
->
nDe„ºedImmC⁄s
 = 0;

1033 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Expúe
, 0, 0);

1034 
	`£tAŒPagîFœgs
(
db
);

1040 #i‚de‡
SQLITE_OMIT_SCHEMA_PRAGMAS


1053 
PøgTyp_TABLE_INFO
: if–
zRight
 ){

1054 
TabÀ
 *
pTab
;

1055 
pTab
 = 
	`sqlôe3FödTabÀ
(
db
, 
zRight
, 
zDb
);

1056 if–
pTab
 ){

1057 c⁄° *
azCﬁ
[] = {

1060 
i
, 
k
;

1061 
nHiddí
 = 0;

1062 
Cﬁumn
 *
pCﬁ
;

1063 
Index
 *
pPk
 = 
	`sqlôe3Prim¨yKeyIndex
(
pTab
);

1064 
pP¨£
->
nMem
 = 6;

1065 
	`sqlôe3CodeVîifySchema
(
pP¨£
, 
iDb
);

1066 
	`£tAŒCﬁumnNames
(
v
, 6, 
azCﬁ
); 
	`as£π
–6==
	`AºaySize
(azCol) );

1067 
	`sqlôe3VõwGëCﬁumnNames
(
pP¨£
, 
pTab
);

1068 
i
=0, 
pCﬁ
=
pTab
->
aCﬁ
; i<pTab->
nCﬁ
; i++,ÖCol++){

1069 if–
	`IsHiddíCﬁumn
(
pCﬁ
) ){

1070 
nHiddí
++;

1073 if–(
pCﬁ
->
cﬁFœgs
 & 
COLFLAG_PRIMKEY
)==0 ){

1074 
k
 = 0;

1075 }if–
pPk
==0 ){

1076 
k
 = 1;

1078 
k
=1; k<=
pTab
->
nCﬁ
 && 
pPk
->
aiCﬁumn
[k-1]!=
i
; k++){}

1080 
	`as£π
–
pCﬁ
->
pDÊt
==0 ||ÖCﬁ->pDÊt->
›
==
TK_SPAN
 );

1081 
	`sqlôe3VdbeMu…iLﬂd
(
v
, 1, "issisi",

1082 
i
-
nHiddí
,

1083 
pCﬁ
->
zName
,

1084 
	`sqlôe3CﬁumnTy≥
(
pCﬁ
,""),

1085 
pCﬁ
->
nŸNuŒ
 ? 1 : 0,

1086 
pCﬁ
->
pDÊt
 ?ÖCﬁ->pDÊt->
u
.
zTokí
 : 0,

1087 
k
);

1088 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 1, 6);

1094 
PøgTyp_STATS
: {

1095 c⁄° *
azCﬁ
[] = { "table", "index", "width", "height" };

1096 
Index
 *
pIdx
;

1097 
HashEÀm
 *
i
;

1098 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1099 
pP¨£
->
nMem
 = 4;

1100 
	`sqlôe3CodeVîifySchema
(
pP¨£
, 
iDb
);

1101 
	`£tAŒCﬁumnNames
(
v
, 4, 
azCﬁ
); 
	`as£π
–4==
	`AºaySize
(azCol) );

1102 
i
=
	`sqlôeHashFú°
(&
pDb
->
pSchema
->
tblHash
); i; i=
	`sqlôeHashNext
(i)){

1103 
TabÀ
 *
pTab
 = 
	`sqlôeHashD©a
(
i
);

1104 
	`sqlôe3VdbeMu…iLﬂd
(
v
, 1, "ssii",

1105 
pTab
->
zName
,

1107 
pTab
->
szTabRow
,

1108 
pTab
->
nRowLogE°
);

1109 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 1, 4);

1110 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

1111 
	`sqlôe3VdbeMu…iLﬂd
(
v
, 2, "sii",

1112 
pIdx
->
zName
,

1113 
pIdx
->
szIdxRow
,

1114 
pIdx
->
aiRowLogE°
[0]);

1115 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 1, 4);

1121 
PøgTyp_INDEX_INFO
: if–
zRight
 ){

1122 
Index
 *
pIdx
;

1123 
TabÀ
 *
pTab
;

1124 
pIdx
 = 
	`sqlôe3FödIndex
(
db
, 
zRight
, 
zDb
);

1125 if–
pIdx
 ){

1126 c⁄° *
azCﬁ
[] = {

1129 
i
;

1130 
mx
;

1131 if–
pPøgma
->
iArg
 ){

1133 
mx
 = 
pIdx
->
nCﬁumn
;

1134 
pP¨£
->
nMem
 = 6;

1137 
mx
 = 
pIdx
->
nKeyCﬁ
;

1138 
pP¨£
->
nMem
 = 3;

1140 
pTab
 = 
pIdx
->
pTabÀ
;

1141 
	`sqlôe3CodeVîifySchema
(
pP¨£
, 
iDb
);

1142 
	`as£π
–
pP¨£
->
nMem
<=
	`AºaySize
(
azCﬁ
) );

1143 
	`£tAŒCﬁumnNames
(
v
, 
pP¨£
->
nMem
, 
azCﬁ
);

1144 
i
=0; i<
mx
; i++){

1145 
i16
 
˙um
 = 
pIdx
->
aiCﬁumn
[
i
];

1146 
	`sqlôe3VdbeMu…iLﬂd
(
v
, 1, "iis", 
i
, 
˙um
,

1147 
˙um
<0 ? 0 : 
pTab
->
aCﬁ
[˙um].
zName
);

1148 if–
pPøgma
->
iArg
 ){

1149 
	`sqlôe3VdbeMu…iLﬂd
(
v
, 4, "isi",

1150 
pIdx
->
aS‹tOrdî
[
i
],

1151 
pIdx
->
azCﬁl
[
i
],

1152 
i
<
pIdx
->
nKeyCﬁ
);

1154 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 1, 
pP¨£
->
nMem
);

1160 
PøgTyp_INDEX_LIST
: if–
zRight
 ){

1161 
Index
 *
pIdx
;

1162 
TabÀ
 *
pTab
;

1163 
i
;

1164 
pTab
 = 
	`sqlôe3FödTabÀ
(
db
, 
zRight
, 
zDb
);

1165 if–
pTab
 ){

1166 c⁄° *
azCﬁ
[] = {

1169 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1170 
pP¨£
->
nMem
 = 5;

1171 
	`sqlôe3CodeVîifySchema
(
pP¨£
, 
iDb
);

1172 
	`£tAŒCﬁumnNames
(
v
, 5, 
azCﬁ
); 
	`as£π
–5==
	`AºaySize
(azCol) );

1173 
pIdx
=
pTab
->
pIndex
, 
i
=0;ÖIdx;ÖIdxıIdx->
pNext
, i++){

1174 c⁄° *
azOrigö
[] = { "c", "u", "pk" };

1175 
	`sqlôe3VdbeMu…iLﬂd
(
v
, 1, "isisi",

1176 
i
,

1177 
pIdx
->
zName
,

1178 
	`IsUniqueIndex
(
pIdx
),

1179 
azOrigö
[
pIdx
->
idxTy≥
],

1180 
pIdx
->
pP¨tIdxWhîe
!=0);

1181 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 1, 5);

1187 
PøgTyp_DATABASE_LIST
: {

1188 c⁄° *
azCﬁ
[] = { "seq", "name", "file" };

1189 
i
;

1190 
pP¨£
->
nMem
 = 3;

1191 
	`£tAŒCﬁumnNames
(
v
, 3, 
azCﬁ
); 
	`as£π
–3==
	`AºaySize
(azCol) );

1192 
i
=0; i<
db
->
nDb
; i++){

1193 if–
db
->
aDb
[
i
].
pBt
==0 ) ;

1194 
	`as£π
–
db
->
aDb
[
i
].
zName
!=0 );

1195 
	`sqlôe3VdbeMu…iLﬂd
(
v
, 1, "iss",

1196 
i
,

1197 
db
->
aDb
[
i
].
zName
,

1198 
	`sqlôe3BåìGëFûíame
(
db
->
aDb
[
i
].
pBt
));

1199 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 1, 3);

1204 
PøgTyp_COLLATION_LIST
: {

1205 c⁄° *
azCﬁ
[] = { "seq", "name" };

1206 
i
 = 0;

1207 
HashEÀm
 *
p
;

1208 
pP¨£
->
nMem
 = 2;

1209 
	`£tAŒCﬁumnNames
(
v
, 2, 
azCﬁ
); 
	`as£π
–2==
	`AºaySize
(azCol) );

1210 
p
=
	`sqlôeHashFú°
(&
db
->
aCﬁlSeq
);Ö;Ö=
	`sqlôeHashNext
(p)){

1211 
CﬁlSeq
 *
pCﬁl
 = (CﬁlSeq *)
	`sqlôeHashD©a
(
p
);

1212 
	`sqlôe3VdbeMu…iLﬂd
(
v
, 1, "is", 
i
++, 
pCﬁl
->
zName
);

1213 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 1, 2);

1219 #i‚de‡
SQLITE_OMIT_FOREIGN_KEY


1220 
PøgTyp_FOREIGN_KEY_LIST
: if–
zRight
 ){

1221 
FKey
 *
pFK
;

1222 
TabÀ
 *
pTab
;

1223 
pTab
 = 
	`sqlôe3FödTabÀ
(
db
, 
zRight
, 
zDb
);

1224 if–
pTab
 ){

1225 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1226 
pFK
 = 
pTab
->
pFKey
;

1227 if–
pFK
 ){

1228 c⁄° *
azCﬁ
[] = {

1232 
i
 = 0;

1233 
pP¨£
->
nMem
 = 8;

1234 
	`sqlôe3CodeVîifySchema
(
pP¨£
, 
iDb
);

1235 
	`£tAŒCﬁumnNames
(
v
, 8, 
azCﬁ
); 
	`as£π
–8==
	`AºaySize
(azCol) );

1236 
pFK
){

1237 
j
;

1238 
j
=0; j<
pFK
->
nCﬁ
; j++){

1239 
	`sqlôe3VdbeMu…iLﬂd
(
v
, 1, "iissssss",

1240 
i
,

1241 
j
,

1242 
pFK
->
zTo
,

1243 
pTab
->
aCﬁ
[
pFK
->aCﬁ[
j
].
iFrom
].
zName
,

1244 
pFK
->
aCﬁ
[
j
].
zCﬁ
,

1245 
	`a˘i⁄Name
(
pFK
->
aA˘i⁄
[1]),

1246 
	`a˘i⁄Name
(
pFK
->
aA˘i⁄
[0]),

1248 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 1, 8);

1250 ++
i
;

1251 
pFK
 =ÖFK->
pNextFrom
;

1259 #i‚de‡
SQLITE_OMIT_FOREIGN_KEY


1260 #i‚de‡
SQLITE_OMIT_TRIGGER


1261 
PøgTyp_FOREIGN_KEY_CHECK
: {

1262 
FKey
 *
pFK
;

1263 
TabÀ
 *
pTab
;

1264 
TabÀ
 *
pP¨ít
;

1265 
Index
 *
pIdx
;

1266 
i
;

1267 
j
;

1268 
HashEÀm
 *
k
;

1269 
x
;

1270 
ªgResu…
;

1271 
ªgKey
;

1272 
ªgRow
;

1273 
addrT›
;

1274 
addrOk
;

1275 *
aiCﬁs
;

1276 c⁄° *
azCﬁ
[] = { "table", "rowid", "parent", "fkid" };

1278 
ªgResu…
 = 
pP¨£
->
nMem
+1;

1279 
pP¨£
->
nMem
 += 4;

1280 
ªgKey
 = ++
pP¨£
->
nMem
;

1281 
ªgRow
 = ++
pP¨£
->
nMem
;

1282 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1283 
	`£tAŒCﬁumnNames
(
v
, 4, 
azCﬁ
); 
	`as£π
–4==
	`AºaySize
(azCol) );

1284 
	`sqlôe3CodeVîifySchema
(
pP¨£
, 
iDb
);

1285 
k
 = 
	`sqlôeHashFú°
(&
db
->
aDb
[
iDb
].
pSchema
->
tblHash
);

1286  
k
 ){

1287 if–
zRight
 ){

1288 
pTab
 = 
	`sqlôe3LoˇãTabÀ
(
pP¨£
, 0, 
zRight
, 
zDb
);

1289 
k
 = 0;

1291 
pTab
 = (
TabÀ
*)
	`sqlôeHashD©a
(
k
);

1292 
k
 = 
	`sqlôeHashNext
(k);

1294 if–
pTab
==0 ||ÖTab->
pFKey
==0 ) ;

1295 
	`sqlôe3TabÀLock
(
pP¨£
, 
iDb
, 
pTab
->
äum
, 0,ÖTab->
zName
);

1296 if–
pTab
->
nCﬁ
+
ªgRow
>
pP¨£
->
nMem
 )ÖParse->nMem =ÖTab->nCol +ÑegRow;

1297 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 0, 
iDb
, 
pTab
, 
OP_O≥nRód
);

1298 
	`sqlôe3VdbeLﬂdSåög
(
v
, 
ªgResu…
, 
pTab
->
zName
);

1299 
i
=1, 
pFK
=
pTab
->
pFKey
;ÖFK; i++,ÖFKıFK->
pNextFrom
){

1300 
pP¨ít
 = 
	`sqlôe3FödTabÀ
(
db
, 
pFK
->
zTo
, 
zDb
);

1301 if–
pP¨ít
==0 ) ;

1302 
pIdx
 = 0;

1303 
	`sqlôe3TabÀLock
(
pP¨£
, 
iDb
, 
pP¨ít
->
äum
, 0,ÖP¨ít->
zName
);

1304 
x
 = 
	`sqlôe3FkLoˇãIndex
(
pP¨£
, 
pP¨ít
, 
pFK
, &
pIdx
, 0);

1305 if–
x
==0 ){

1306 if–
pIdx
==0 ){

1307 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 
i
, 
iDb
, 
pP¨ít
, 
OP_O≥nRód
);

1309 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_O≥nRód
, 
i
, 
pIdx
->
äum
, 
iDb
);

1310 
	`sqlôe3VdbeSëP4KeyInfo
(
pP¨£
, 
pIdx
);

1313 
k
 = 0;

1317 
	`as£π
–
pP¨£
->
nEº
>0 || 
pFK
==0 );

1318 if–
pFK
 ) ;

1319 if–
pP¨£
->
nTab
<
i
 )ÖParse->nTab = i;

1320 
addrT›
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Rewöd
, 0); 
	`VdbeCovîage
(v);

1321 
i
=1, 
pFK
=
pTab
->
pFKey
;ÖFK; i++,ÖFKıFK->
pNextFrom
){

1322 
pP¨ít
 = 
	`sqlôe3FödTabÀ
(
db
, 
pFK
->
zTo
, 
zDb
);

1323 
pIdx
 = 0;

1324 
aiCﬁs
 = 0;

1325 if–
pP¨ít
 ){

1326 
x
 = 
	`sqlôe3FkLoˇãIndex
(
pP¨£
, 
pP¨ít
, 
pFK
, &
pIdx
, &
aiCﬁs
);

1327 
	`as£π
–
x
==0 );

1329 
addrOk
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

1330 if–
pP¨ít
 && 
pIdx
==0 ){

1331 
iKey
 = 
pFK
->
aCﬁ
[0].
iFrom
;

1332 
	`as£π
–
iKey
>=0 && iKey<
pTab
->
nCﬁ
 );

1333 if–
iKey
!=
pTab
->
iPKey
 ){

1334 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Cﬁumn
, 0, 
iKey
, 
ªgRow
);

1335 
	`sqlôe3CﬁumnDeÁu…
(
v
, 
pTab
, 
iKey
, 
ªgRow
);

1336 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IsNuŒ
, 
ªgRow
, 
addrOk
); 
	`VdbeCovîage
(v);

1337 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Mu°BeI¡
, 
ªgRow
,

1338 
	`sqlôe3VdbeCuºítAddr
(
v
)+3); 
	`VdbeCovîage
(v);

1340 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Rowid
, 0, 
ªgRow
);

1342 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_NŸExi°s
, 
i
, 0, 
ªgRow
); 
	`VdbeCovîage
(v);

1343 
	`sqlôe3VdbeGŸo
(
v
, 
addrOk
);

1344 
	`sqlôe3VdbeJumpHîe
(
v
, 
	`sqlôe3VdbeCuºítAddr
(v)-2);

1346 
j
=0; j<
pFK
->
nCﬁ
; j++){

1347 
	`sqlôe3Ex¥CodeGëCﬁumnOfTabÀ
(
v
, 
pTab
, 0,

1348 
aiCﬁs
 ?áiCﬁs[
j
] : 
pFK
->
aCﬁ
[j].
iFrom
, 
ªgRow
+j);

1349 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IsNuŒ
, 
ªgRow
+
j
, 
addrOk
); 
	`VdbeCovîage
(v);

1351 if–
pP¨ít
 ){

1352 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_MakeRec‹d
, 
ªgRow
, 
pFK
->
nCﬁ
, 
ªgKey
,

1353 
	`sqlôe3IndexAfföôySå
(
db
,
pIdx
), 
pFK
->
nCﬁ
);

1354 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_Found
, 
i
, 
addrOk
, 
ªgKey
, 0);

1355 
	`VdbeCovîage
(
v
);

1358 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Rowid
, 0, 
ªgResu…
+1);

1359 
	`sqlôe3VdbeMu…iLﬂd
(
v
, 
ªgResu…
+2, "si", 
pFK
->
zTo
, 
i
-1);

1360 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 
ªgResu…
, 4);

1361 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
addrOk
);

1362 
	`sqlôe3DbFªe
(
db
, 
aiCﬁs
);

1364 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Next
, 0, 
addrT›
+1); 
	`VdbeCovîage
(v);

1365 
	`sqlôe3VdbeJumpHîe
(
v
, 
addrT›
);

1372 #i‚de‡
NDEBUG


1373 
PøgTyp_PARSER_TRACE
: {

1374 if–
zRight
 ){

1375 if–
	`sqlôe3GëBoﬁón
(
zRight
, 0) ){

1376 
	`sqlôe3P¨£rTø˚
(
°dout
, "parser: ");

1378 
	`sqlôe3P¨£rTø˚
(0, 0);

1388 
PøgTyp_CASE_SENSITIVE_LIKE
: {

1389 if–
zRight
 ){

1390 
	`sqlôe3Regi°îLikeFun˘i⁄s
(
db
, 
	`sqlôe3GëBoﬁón
(
zRight
, 0));

1395 #i‚de‡
SQLITE_INTEGRITY_CHECK_ERROR_MAX


1396 
	#SQLITE_INTEGRITY_CHECK_ERROR_MAX
 100

	)

1399 #i‚de‡
SQLITE_OMIT_INTEGRITY_CHECK


1404 
PøgTyp_INTEGRITY_CHECK
: {

1405 
i
, 
j
, 
addr
, 
mxEº
;

1407 
isQuick
 = (
	`sqlôe3Tﬁowî
(
zLe·
[0])=='q');

1418 
	`as£π
–
iDb
>=0 );

1419 
	`as£π
–
iDb
==0 || 
pId2
->
z
 );

1420 if–
pId2
->
z
==0 ) 
iDb
 = -1;

1423 
pP¨£
->
nMem
 = 6;

1424 
	`£tO√CﬁumnName
(
v
, "integrity_check");

1427 
mxEº
 = 
SQLITE_INTEGRITY_CHECK_ERROR_MAX
;

1428 if–
zRight
 ){

1429 
	`sqlôe3GëI¡32
(
zRight
, &
mxEº
);

1430 if–
mxEº
<=0 ){

1431 
mxEº
 = 
SQLITE_INTEGRITY_CHECK_ERROR_MAX
;

1434 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 
mxEº
, 1);

1437 
i
=0; i<
db
->
nDb
; i++){

1438 
HashEÀm
 *
x
;

1439 
Hash
 *
pTbls
;

1440 *
aRoŸ
;

1441 
˙t
 = 0;

1442 
mxIdx
 = 0;

1443 
nIdx
;

1445 if–
OMIT_TEMPDB
 && 
i
==1 ) ;

1446 if–
iDb
>=0 && 
i
!=iDb ) ;

1448 
	`sqlôe3CodeVîifySchema
(
pP¨£
, 
i
);

1449 
addr
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_IfPos
, 1);

1450 
	`VdbeCovîage
(
v
);

1451 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_HÆt
, 0, 0);

1452 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr
);

1459 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
i
, 0) );

1460 
pTbls
 = &
db
->
aDb
[
i
].
pSchema
->
tblHash
;

1461 
˙t
=0, 
x
=
	`sqlôeHashFú°
(
pTbls
); x; x=
	`sqlôeHashNext
(x)){

1462 
TabÀ
 *
pTab
 = 
	`sqlôeHashD©a
(
x
);

1463 
Index
 *
pIdx
;

1464 if–
	`HasRowid
(
pTab
ËË
˙t
++;

1465 
nIdx
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
,ÇIdx++){ 
˙t
++; }

1466 if–
nIdx
>
mxIdx
 ) mxIdx =ÇIdx;

1468 
aRoŸ
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, ()*(
˙t
+1));

1469 if–
aRoŸ
==0 ) ;

1470 
˙t
=0, 
x
=
	`sqlôeHashFú°
(
pTbls
); x; x=
	`sqlôeHashNext
(x)){

1471 
TabÀ
 *
pTab
 = 
	`sqlôeHashD©a
(
x
);

1472 
Index
 *
pIdx
;

1473 if–
	`HasRowid
(
pTab
ËË
aRoŸ
[
˙t
++] =ÖTab->
äum
;

1474 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

1475 
aRoŸ
[
˙t
++] = 
pIdx
->
äum
;

1478 
aRoŸ
[
˙t
] = 0;

1481 
pP¨£
->
nMem
 = 
	`MAX
–pP¨£->nMem, 8+
mxIdx
 );

1484 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_I¡egrôyCk
, 2, 
˙t
, 1, (*)
aRoŸ
,
P4_INTARRAY
);

1485 
	`sqlôe3VdbeCh™geP5
(
v
, (
u8
)
i
);

1486 
addr
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_IsNuŒ
, 2); 
	`VdbeCovîage
(v);

1487 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Såög8
, 0, 3, 0,

1488 
	`sqlôe3MPrötf
(
db
, "*** i¿d©aba£ %†***\n", db->
aDb
[
i
].
zName
),

1489 
P4_DYNAMIC
);

1490 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Move
, 2, 4, 1);

1491 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_C⁄ˇt
, 4, 3, 2);

1492 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 2, 1);

1493 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr
);

1497 
x
=
	`sqlôeHashFú°
(
pTbls
); x && !
isQuick
; x=
	`sqlôeHashNext
(x)){

1498 
TabÀ
 *
pTab
 = 
	`sqlôeHashD©a
(
x
);

1499 
Index
 *
pIdx
, *
pPk
;

1500 
Index
 *
pPri‹
 = 0;

1501 
lo›T›
;

1502 
iD©aCur
, 
iIdxCur
;

1503 
r1
 = -1;

1505 if–
pTab
->
pIndex
==0 ) ;

1506 
pPk
 = 
	`HasRowid
(
pTab
Ë? 0 : 
	`sqlôe3Prim¨yKeyIndex
(pTab);

1507 
addr
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_IfPos
, 1);

1508 
	`VdbeCovîage
(
v
);

1509 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_HÆt
, 0, 0);

1510 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr
);

1511 
	`sqlôe3Ex¥CacheCÀ¨
(
pP¨£
);

1512 
	`sqlôe3O≥nTabÀAndIndi˚s
(
pP¨£
, 
pTab
, 
OP_O≥nRód
, 0,

1513 1, 0, &
iD©aCur
, &
iIdxCur
);

1514 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 0, 7);

1515 
j
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, j++){

1516 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 0, 8+
j
);

1518 
	`as£π
–
pP¨£
->
nMem
>=8+
j
 );

1519 
	`as£π
–
	`sqlôe3NoTempsInR™ge
(
pP¨£
,1,7+
j
) );

1520 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Rewöd
, 
iD©aCur
, 0); 
	`VdbeCovîage
(v);

1521 
lo›T›
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_AddImm
, 7, 1);

1523 
j
=0; j<
pTab
->
nCﬁ
; j++){

1524 *
zEº
;

1525 
jmp2
, 
jmp3
;

1526 if–
j
==
pTab
->
iPKey
 ) ;

1527 if–
pTab
->
aCﬁ
[
j
].
nŸNuŒ
==0 ) ;

1528 
	`sqlôe3Ex¥CodeGëCﬁumnOfTabÀ
(
v
, 
pTab
, 
iD©aCur
, 
j
, 3);

1529 
	`sqlôe3VdbeCh™geP5
(
v
, 
OPFLAG_TYPEOFARG
);

1530 
jmp2
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_NŸNuŒ
, 3); 
	`VdbeCovîage
(v);

1531 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_AddImm
, 1, -1);

1532 
zEº
 = 
	`sqlôe3MPrötf
(
db
, "NULL vÆuêö %s.%s", 
pTab
->
zName
,

1533 
pTab
->
aCﬁ
[
j
].
zName
);

1534 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Såög8
, 0, 3, 0, 
zEº
, 
P4_DYNAMIC
);

1535 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 3, 1);

1536 
jmp3
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_IfPos
, 1); 
	`VdbeCovîage
(v);

1537 
	`sqlôe3VdbeAddOp0
(
v
, 
OP_HÆt
);

1538 
	`sqlôe3VdbeJumpHîe
(
v
, 
jmp2
);

1539 
	`sqlôe3VdbeJumpHîe
(
v
, 
jmp3
);

1542 
j
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, j++){

1543 
jmp2
, 
jmp3
, 
jmp4
, 
jmp5
;

1544 
ckUniq
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

1545 if–
pPk
==
pIdx
 ) ;

1546 
r1
 = 
	`sqlôe3Gíî©eIndexKey
(
pP¨£
, 
pIdx
, 
iD©aCur
, 0, 0, &
jmp3
,

1547 
pPri‹
, 
r1
);

1548 
pPri‹
 = 
pIdx
;

1549 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_AddImm
, 8+
j
, 1);

1551 
jmp2
 = 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_Found
, 
iIdxCur
+
j
, 
ckUniq
, 
r1
,

1552 
pIdx
->
nCﬁumn
); 
	`VdbeCovîage
(
v
);

1553 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_AddImm
, 1, -1);

1554 
	`sqlôe3VdbeLﬂdSåög
(
v
, 3, "row ");

1555 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_C⁄ˇt
, 7, 3, 3);

1556 
	`sqlôe3VdbeLﬂdSåög
(
v
, 4, " missing from index ");

1557 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_C⁄ˇt
, 4, 3, 3);

1558 
jmp5
 = 
	`sqlôe3VdbeLﬂdSåög
(
v
, 4, 
pIdx
->
zName
);

1559 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_C⁄ˇt
, 4, 3, 3);

1560 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 3, 1);

1561 
jmp4
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_IfPos
, 1); 
	`VdbeCovîage
(v);

1562 
	`sqlôe3VdbeAddOp0
(
v
, 
OP_HÆt
);

1563 
	`sqlôe3VdbeJumpHîe
(
v
, 
jmp2
);

1567 if–
	`IsUniqueIndex
(
pIdx
) ){

1568 
uniqOk
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

1569 
jmp6
;

1570 
kk
;

1571 
kk
=0; kk<
pIdx
->
nKeyCﬁ
; kk++){

1572 
iCﬁ
 = 
pIdx
->
aiCﬁumn
[
kk
];

1573 
	`as£π
–
iCﬁ
!=
XN_ROWID
 && iCﬁ<
pTab
->
nCﬁ
 );

1574 if–
iCﬁ
>=0 && 
pTab
->
aCﬁ
[iCﬁ].
nŸNuŒ
 ) ;

1575 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IsNuŒ
, 
r1
+
kk
, 
uniqOk
);

1576 
	`VdbeCovîage
(
v
);

1578 
jmp6
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Next
, 
iIdxCur
+
j
); 
	`VdbeCovîage
(v);

1579 
	`sqlôe3VdbeGŸo
(
v
, 
uniqOk
);

1580 
	`sqlôe3VdbeJumpHîe
(
v
, 
jmp6
);

1581 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_IdxGT
, 
iIdxCur
+
j
, 
uniqOk
, 
r1
,

1582 
pIdx
->
nKeyCﬁ
); 
	`VdbeCovîage
(
v
);

1583 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_AddImm
, 1, -1);

1584 
	`sqlôe3VdbeLﬂdSåög
(
v
, 3, "non-uniqueÉntry in index ");

1585 
	`sqlôe3VdbeGŸo
(
v
, 
jmp5
);

1586 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
uniqOk
);

1588 
	`sqlôe3VdbeJumpHîe
(
v
, 
jmp4
);

1589 
	`sqlôe3ResﬁveP¨tIdxLabñ
(
pP¨£
, 
jmp3
);

1591 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Next
, 
iD©aCur
, 
lo›T›
); 
	`VdbeCovîage
(v);

1592 
	`sqlôe3VdbeJumpHîe
(
v
, 
lo›T›
-1);

1593 #i‚de‡
SQLITE_OMIT_BTREECOUNT


1594 
	`sqlôe3VdbeLﬂdSåög
(
v
, 2, "wrong # ofÉntries in index ");

1595 
j
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, j++){

1596 if–
pPk
==
pIdx
 ) ;

1597 
addr
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

1598 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IfPos
, 1, 
addr
+2); 
	`VdbeCovîage
(v);

1599 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_HÆt
, 0, 0);

1600 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Cou¡
, 
iIdxCur
+
j
, 3);

1601 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Eq
, 8+
j
, 
addr
+8, 3); 
	`VdbeCovîage
(v);

1602 
	`sqlôe3VdbeCh™geP5
(
v
, 
SQLITE_NOTNULL
);

1603 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_AddImm
, 1, -1);

1604 
	`sqlôe3VdbeLﬂdSåög
(
v
, 3, 
pIdx
->
zName
);

1605 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_C⁄ˇt
, 3, 2, 7);

1606 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 7, 1);

1612 c⁄° 
iLn
 = 
	`VDBE_OFFSET_LINENO
(2);

1613 c⁄° 
VdbeOpLi°
 
ídCode
[] = {

1614 { 
OP_AddImm
, 1, 0, 0},

1615 { 
OP_If
, 1, 4, 0},

1616 { 
OP_Såög8
, 0, 3, 0},

1617 { 
OP_Resu…Row
, 3, 1, 0},

1619 
VdbeOp
 *
aOp
;

1621 
aOp
 = 
	`sqlôe3VdbeAddOpLi°
(
v
, 
	`AºaySize
(
ídCode
),ÉndCode, 
iLn
);

1622 if–
aOp
 ){

1623 
aOp
[0].
p2
 = -
mxEº
;

1624 
aOp
[2].
p4ty≥
 = 
P4_STATIC
;

1625 
aOp
[2].
p4
.
z
 = "ok";

1632 #i‚de‡
SQLITE_OMIT_UTF16


1655 
PøgTyp_ENCODING
: {

1656 c⁄° 
	sEncName
 {

1657 *
zName
;

1658 
u8
 
íc
;

1659 } 
í˙ames
[] = {

1660 { "UTF8", 
SQLITE_UTF8
 },

1661 { "UTF-8", 
SQLITE_UTF8
 },

1662 { "UTF-16À", 
SQLITE_UTF16LE
 },

1663 { "UTF-16be", 
SQLITE_UTF16BE
 },

1664 { "UTF16À", 
SQLITE_UTF16LE
 },

1665 { "UTF16be", 
SQLITE_UTF16BE
 },

1670 c⁄° 
EncName
 *
pEnc
;

1671 if–!
zRight
 ){

1672 if–
	`sqlôe3RódSchema
(
pP¨£
ËË
¥agma_out
;

1673 
	`as£π
–
í˙ames
[
SQLITE_UTF8
].
íc
==SQLITE_UTF8 );

1674 
	`as£π
–
í˙ames
[
SQLITE_UTF16LE
].
íc
==SQLITE_UTF16LE );

1675 
	`as£π
–
í˙ames
[
SQLITE_UTF16BE
].
íc
==SQLITE_UTF16BE );

1676 
	`ªtu∫SögÀText
(
v
, "ícodög", 
í˙ames
[
	`ENC
(
pP¨£
->
db
)].
zName
);

1684 !(
	`DbHasPr›îty
(
db
, 0, 
DB_SchemaLﬂded
)) ||

1685 
	`DbHasPr›îty
(
db
, 0, 
DB_Em±y
)

1687 
pEnc
=&
í˙ames
[0];ÖEnc->
zName
;ÖEnc++){

1688 if–0==
	`sqlôe3SåICmp
(
zRight
, 
pEnc
->
zName
) ){

1689 
	`SCHEMA_ENC
(
db
Ë
	`ENC
(db) =

1690 
pEnc
->
íc
 ?ÖEnc->í¯: 
SQLITE_UTF16NATIVE
;

1694 if–!
pEnc
->
zName
 ){

1695 
	`sqlôe3Eº‹Msg
(
pP¨£
, "unsuµ‹ãdÉncodög: %s", 
zRight
);

1703 #i‚de‡
SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS


1736 
PøgTyp_HEADER_VALUE
: {

1737 
iCookõ
 = 
pPøgma
->
iArg
;

1738 
	`sqlôe3VdbeU£sBåì
(
v
, 
iDb
);

1739 if–
zRight
 && (
pPøgma
->
mPøgFœg
 & 
PøgFœg_RódO∆y
)==0 ){

1741 c⁄° 
VdbeOpLi°
 
£tCookõ
[] = {

1742 { 
OP_Tønß˘i⁄
, 0, 1, 0},

1743 { 
OP_SëCookõ
, 0, 0, 0},

1745 
VdbeOp
 *
aOp
;

1746 
	`sqlôe3VdbeVîifyNoMÆlocRequúed
(
v
, 
	`AºaySize
(
£tCookõ
));

1747 
aOp
 = 
	`sqlôe3VdbeAddOpLi°
(
v
, 
	`AºaySize
(
£tCookõ
), setCookie, 0);

1748 if–
	`ONLY_IF_REALLOC_STRESS
(
aOp
==0) ) ;

1749 
aOp
[0].
p1
 = 
iDb
;

1750 
aOp
[1].
p1
 = 
iDb
;

1751 
aOp
[1].
p2
 = 
iCookõ
;

1752 
aOp
[1].
p3
 = 
	`sqlôe3Atoi
(
zRight
);

1755 c⁄° 
VdbeOpLi°
 
ªadCookõ
[] = {

1756 { 
OP_Tønß˘i⁄
, 0, 0, 0},

1757 { 
OP_RódCookõ
, 0, 1, 0},

1758 { 
OP_Resu…Row
, 1, 1, 0}

1760 
VdbeOp
 *
aOp
;

1761 
	`sqlôe3VdbeVîifyNoMÆlocRequúed
(
v
, 
	`AºaySize
(
ªadCookõ
));

1762 
aOp
 = 
	`sqlôe3VdbeAddOpLi°
(
v
, 
	`AºaySize
(
ªadCookõ
),readCookie,0);

1763 if–
	`ONLY_IF_REALLOC_STRESS
(
aOp
==0) ) ;

1764 
aOp
[0].
p1
 = 
iDb
;

1765 
aOp
[1].
p1
 = 
iDb
;

1766 
aOp
[1].
p3
 = 
iCookõ
;

1767 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 1);

1768 
	`sqlôe3VdbeSëCﬁName
(
v
, 0, 
COLNAME_NAME
, 
zLe·
, 
SQLITE_TRANSIENT
);

1769 
	`sqlôe3VdbeReußbÀ
(
v
);

1775 #i‚de‡
SQLITE_OMIT_COMPILEOPTION_DIAGS


1782 
PøgTyp_COMPILE_OPTIONS
: {

1783 
i
 = 0;

1784 c⁄° *
zO±
;

1785 
pP¨£
->
nMem
 = 1;

1786 
	`£tO√CﬁumnName
(
v
, "compile_option");

1787  (
zO±
 = 
	`sqlôe3_compûe›ti⁄_gë
(
i
++))!=0 ){

1788 
	`sqlôe3VdbeLﬂdSåög
(
v
, 1, 
zO±
);

1789 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 1, 1);

1791 
	`sqlôe3VdbeReußbÀ
(
v
);

1796 #i‚de‡
SQLITE_OMIT_WAL


1802 
PøgTyp_WAL_CHECKPOINT
: {

1803 c⁄° *
azCﬁ
[] = { "busy", "log", "checkpointed" };

1804 
iBt
 = (
pId2
->
z
?
iDb
:
SQLITE_MAX_ATTACHED
);

1805 
eMode
 = 
SQLITE_CHECKPOINT_PASSIVE
;

1806 if–
zRight
 ){

1807 if–
	`sqlôe3SåICmp
(
zRight
, "full")==0 ){

1808 
eMode
 = 
SQLITE_CHECKPOINT_FULL
;

1809 }if–
	`sqlôe3SåICmp
(
zRight
, "restart")==0 ){

1810 
eMode
 = 
SQLITE_CHECKPOINT_RESTART
;

1811 }if–
	`sqlôe3SåICmp
(
zRight
, "truncate")==0 ){

1812 
eMode
 = 
SQLITE_CHECKPOINT_TRUNCATE
;

1815 
	`£tAŒCﬁumnNames
(
v
, 3, 
azCﬁ
); 
	`as£π
–3==
	`AºaySize
(azCol) );

1816 
pP¨£
->
nMem
 = 3;

1817 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Checkpoöt
, 
iBt
, 
eMode
, 1);

1818 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 1, 3);

1830 
PøgTyp_WAL_AUTOCHECKPOINT
: {

1831 if–
zRight
 ){

1832 
	`sqlôe3_wÆ_autocheckpoöt
(
db
, 
	`sqlôe3Atoi
(
zRight
));

1834 
	`ªtu∫SögÀI¡
(
v
, "wal_autocheckpoint",

1835 
db
->
xWÆCÆlback
==
sqlôe3WÆDeÁu…Hook
 ?

1836 
	`SQLITE_PTR_TO_INT
(
db
->
pWÆArg
) : 0);

1848 
PøgTyp_SHRINK_MEMORY
: {

1849 
	`sqlôe3_db_ªÀa£_mem‹y
(
db
);

1863 
	`as£π
–
pPøgma
->
ePøgTyp
==
PøgTyp_BUSY_TIMEOUT
 );

1864 if–
zRight
 ){

1865 
	`sqlôe3_busy_timeout
(
db
, 
	`sqlôe3Atoi
(
zRight
));

1867 
	`ªtu∫SögÀI¡
(
v
, "timeout", 
db
->
busyTimeout
);

1882 
PøgTyp_SOFT_HEAP_LIMIT
: {

1883 
sqlôe3_öt64
 
N
;

1884 if–
zRight
 && 
	`sqlôe3DecOrHexToI64
(zRight, &
N
)==
SQLITE_OK
 ){

1885 
	`sqlôe3_so·_hóp_limô64
(
N
);

1887 
	`ªtu∫SögÀI¡
(
v
, "so·_hóp_limô", 
	`sqlôe3_so·_hóp_limô64
(-1));

1898 
PøgTyp_THREADS
: {

1899 
sqlôe3_öt64
 
N
;

1900 if–
zRight


1901 && 
	`sqlôe3DecOrHexToI64
(
zRight
, &
N
)==
SQLITE_OK


1902 && 
N
>=0

1904 
	`sqlôe3_limô
(
db
, 
SQLITE_LIMIT_WORKER_THREADS
, ()(
N
&0x7fffffff));

1906 
	`ªtu∫SögÀI¡
(
v
, "threads",

1907 
	`sqlôe3_limô
(
db
, 
SQLITE_LIMIT_WORKER_THREADS
, -1));

1911 #i‡
	`deföed
(
SQLITE_DEBUG
Ë|| deföed(
SQLITE_TEST
)

1915 
PøgTyp_LOCK_STATUS
: {

1916 c⁄° *c⁄° 
azLockName
[] = {

1919 c⁄° *
azCﬁ
[] = { "database", "status" };

1920 
i
;

1921 
	`£tAŒCﬁumnNames
(
v
, 2, 
azCﬁ
); 
	`as£π
–2==
	`AºaySize
(azCol) );

1922 
pP¨£
->
nMem
 = 2;

1923 
i
=0; i<
db
->
nDb
; i++){

1924 
Båì
 *
pBt
;

1925 c⁄° *
zSèã
 = "unknown";

1926 
j
;

1927 if–
db
->
aDb
[
i
].
zName
==0 ) ;

1928 
pBt
 = 
db
->
aDb
[
i
].pBt;

1929 if–
pBt
==0 || 
	`sqlôe3BåìPagî
(pBt)==0 ){

1930 
zSèã
 = "closed";

1931 }if–
	`sqlôe3_fûe_c⁄åﬁ
(
db
, 
i
 ? db->
aDb
[i].
zName
 : 0,

1932 
SQLITE_FCNTL_LOCKSTATE
, &
j
)==
SQLITE_OK
 ){

1933 
zSèã
 = 
azLockName
[
j
];

1935 
	`sqlôe3VdbeMu…iLﬂd
(
v
, 1, "ss", 
db
->
aDb
[
i
].
zName
, 
zSèã
);

1936 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 1, 2);

1942 #ifde‡
SQLITE_HAS_CODEC


1943 
PøgTyp_KEY
: {

1944 if–
zRight
 ) 
	`sqlôe3_key_v2
(
db
, 
zDb
, zRight, 
	`sqlôe3SåÀn30
(zRight));

1947 
PøgTyp_REKEY
: {

1948 if–
zRight
 ) 
	`sqlôe3_ªkey_v2
(
db
, 
zDb
, zRight, 
	`sqlôe3SåÀn30
(zRight));

1951 
PøgTyp_HEXKEY
: {

1952 if–
zRight
 ){

1953 
u8
 
iByã
;

1954 
i
;

1955 
zKey
[40];

1956 
i
=0, 
iByã
=0; i<(
zKey
)*2 && 
	`sqlôe3Isxdigô
(
zRight
[i]); i++){

1957 
iByã
 = (iByã<<4Ë+ 
	`sqlôe3HexToI¡
(
zRight
[
i
]);

1958 if–(
i
&1)!=0 ) 
zKey
[i/2] = 
iByã
;

1960 if–(
zLe·
[3] & 0xf)==0xb ){

1961 
	`sqlôe3_key_v2
(
db
, 
zDb
, 
zKey
, 
i
/2);

1963 
	`sqlôe3_ªkey_v2
(
db
, 
zDb
, 
zKey
, 
i
/2);

1969 #i‡
	`deföed
(
SQLITE_HAS_CODEC
Ë|| deföed(
SQLITE_ENABLE_CEROD
)

1970 
PøgTyp_ACTIVATE_EXTENSIONS
: if–
zRight
 ){

1971 #ifde‡
SQLITE_HAS_CODEC


1972 if–
	`sqlôe3SåNICmp
(
zRight
, "see-", 4)==0 ){

1973 
	`sqlôe3_a˘iv©e_£e
(&
zRight
[4]);

1976 #ifde‡
SQLITE_ENABLE_CEROD


1977 if–
	`sqlôe3SåNICmp
(
zRight
, "cerod-", 6)==0 ){

1978 
	`sqlôe3_a˘iv©e_˚rod
(&
zRight
[6]);

1987 
¥agma_out
:

1988 
	`sqlôe3DbFªe
(
db
, 
zLe·
);

1989 
	`sqlôe3DbFªe
(
db
, 
zRight
);

1990 
	}
}

	@pragma.h

6 
	#PøgTyp_HEADER_VALUE
 0

	)

7 
	#PøgTyp_AUTO_VACUUM
 1

	)

8 
	#PøgTyp_FLAG
 2

	)

9 
	#PøgTyp_BUSY_TIMEOUT
 3

	)

10 
	#PøgTyp_CACHE_SIZE
 4

	)

11 
	#PøgTyp_CACHE_SPILL
 5

	)

12 
	#PøgTyp_CASE_SENSITIVE_LIKE
 6

	)

13 
	#PøgTyp_COLLATION_LIST
 7

	)

14 
	#PøgTyp_COMPILE_OPTIONS
 8

	)

15 
	#PøgTyp_DATA_STORE_DIRECTORY
 9

	)

16 
	#PøgTyp_DATABASE_LIST
 10

	)

17 
	#PøgTyp_DEFAULT_CACHE_SIZE
 11

	)

18 
	#PøgTyp_ENCODING
 12

	)

19 
	#PøgTyp_FOREIGN_KEY_CHECK
 13

	)

20 
	#PøgTyp_FOREIGN_KEY_LIST
 14

	)

21 
	#PøgTyp_INCREMENTAL_VACUUM
 15

	)

22 
	#PøgTyp_INDEX_INFO
 16

	)

23 
	#PøgTyp_INDEX_LIST
 17

	)

24 
	#PøgTyp_INTEGRITY_CHECK
 18

	)

25 
	#PøgTyp_JOURNAL_MODE
 19

	)

26 
	#PøgTyp_JOURNAL_SIZE_LIMIT
 20

	)

27 
	#PøgTyp_LOCK_PROXY_FILE
 21

	)

28 
	#PøgTyp_LOCKING_MODE
 22

	)

29 
	#PøgTyp_PAGE_COUNT
 23

	)

30 
	#PøgTyp_MMAP_SIZE
 24

	)

31 
	#PøgTyp_PAGE_SIZE
 25

	)

32 
	#PøgTyp_SECURE_DELETE
 26

	)

33 
	#PøgTyp_SHRINK_MEMORY
 27

	)

34 
	#PøgTyp_SOFT_HEAP_LIMIT
 28

	)

35 
	#PøgTyp_STATS
 29

	)

36 
	#PøgTyp_SYNCHRONOUS
 30

	)

37 
	#PøgTyp_TABLE_INFO
 31

	)

38 
	#PøgTyp_TEMP_STORE
 32

	)

39 
	#PøgTyp_TEMP_STORE_DIRECTORY
 33

	)

40 
	#PøgTyp_THREADS
 34

	)

41 
	#PøgTyp_WAL_AUTOCHECKPOINT
 35

	)

42 
	#PøgTyp_WAL_CHECKPOINT
 36

	)

43 
	#PøgTyp_ACTIVATE_EXTENSIONS
 37

	)

44 
	#PøgTyp_HEXKEY
 38

	)

45 
	#PøgTyp_KEY
 39

	)

46 
	#PøgTyp_REKEY
 40

	)

47 
	#PøgTyp_LOCK_STATUS
 41

	)

48 
	#PøgTyp_PARSER_TRACE
 42

	)

49 
	#PøgFœg_NìdSchema
 0x01

	)

50 
	#PøgFœg_RódO∆y
 0x02

	)

51 c⁄° 
	ssPøgmaNames
 {

52 c⁄° *c⁄° 
	mzName
;

53 
u8
 
	mePøgTyp
;

54 
u8
 
	mmPøgFœg
;

55 
u32
 
	miArg
;

56 } 
	gaPøgmaNames
[] = {

57 #i‡
deföed
(
SQLITE_HAS_CODEC
Ë|| deföed(
SQLITE_ENABLE_CEROD
)

59  
PøgTyp_ACTIVATE_EXTENSIONS
,

63 #i‡!
deföed
(
SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS
)

65  
PøgTyp_HEADER_VALUE
,

67  
BTREE_APPLICATION_ID
 },

69 #i‡!
deföed
(
SQLITE_OMIT_AUTOVACUUM
)

71  
PøgTyp_AUTO_VACUUM
,

72  
PøgFœg_NìdSchema
,

75 #i‡!
deföed
(
SQLITE_OMIT_FLAG_PRAGMAS
)

76 #i‡!
deföed
(
SQLITE_OMIT_AUTOMATIC_INDEX
)

78  
PøgTyp_FLAG
,

80  
SQLITE_AutoIndex
 },

84  
PøgTyp_BUSY_TIMEOUT
,

87 #i‡!
deföed
(
SQLITE_OMIT_PAGER_PRAGMAS
)

89  
PøgTyp_CACHE_SIZE
,

90  
PøgFœg_NìdSchema
,

93 #i‡!
deföed
(
SQLITE_OMIT_FLAG_PRAGMAS
)

95  
PøgTyp_CACHE_SPILL
,

100  
PøgTyp_CASE_SENSITIVE_LIKE
,

104  
PøgTyp_FLAG
,

106  
SQLITE_CñlSizeCk
 },

107 #i‡!
deföed
(
SQLITE_OMIT_FLAG_PRAGMAS
)

109  
PøgTyp_FLAG
,

111  
SQLITE_Ck±FuŒFSync
 },

113 #i‡!
deföed
(
SQLITE_OMIT_SCHEMA_PRAGMAS
)

115  
PøgTyp_COLLATION_LIST
,

119 #i‡!
deföed
(
SQLITE_OMIT_COMPILEOPTION_DIAGS
)

121  
PøgTyp_COMPILE_OPTIONS
,

125 #i‡!
deföed
(
SQLITE_OMIT_FLAG_PRAGMAS
)

127  
PøgTyp_FLAG
,

129  
SQLITE_Cou¡Rows
 },

131 #i‡!
deföed
(
SQLITE_OMIT_PAGER_PRAGMAS
Ë&& 
SQLITE_OS_WIN


133  
PøgTyp_DATA_STORE_DIRECTORY
,

137 #i‡!
deföed
(
SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS
)

139  
PøgTyp_HEADER_VALUE
,

140  
PøgFœg_RódO∆y
,

141  
BTREE_DATA_VERSION
 },

143 #i‡!
deföed
(
SQLITE_OMIT_SCHEMA_PRAGMAS
)

145  
PøgTyp_DATABASE_LIST
,

146  
PøgFœg_NìdSchema
,

149 #i‡!
deföed
(
SQLITE_OMIT_PAGER_PRAGMAS
Ë&& !deföed(
SQLITE_OMIT_DEPRECATED
)

151  
PøgTyp_DEFAULT_CACHE_SIZE
,

152  
PøgFœg_NìdSchema
,

155 #i‡!
deföed
(
SQLITE_OMIT_FLAG_PRAGMAS
)

156 #i‡!
deföed
(
SQLITE_OMIT_FOREIGN_KEY
Ë&& !deföed(
SQLITE_OMIT_TRIGGER
)

158  
PøgTyp_FLAG
,

160  
SQLITE_De„rFKs
 },

163 #i‡!
deföed
(
SQLITE_OMIT_FLAG_PRAGMAS
)

165  
PøgTyp_FLAG
,

167  
SQLITE_NuŒCÆlback
 },

169 #i‡!
deföed
(
SQLITE_OMIT_UTF16
)

171  
PøgTyp_ENCODING
,

175 #i‡!
deföed
(
SQLITE_OMIT_FOREIGN_KEY
Ë&& !deföed(
SQLITE_OMIT_TRIGGER
)

177  
PøgTyp_FOREIGN_KEY_CHECK
,

178  
PøgFœg_NìdSchema
,

181 #i‡!
deföed
(
SQLITE_OMIT_FOREIGN_KEY
)

183  
PøgTyp_FOREIGN_KEY_LIST
,

184  
PøgFœg_NìdSchema
,

187 #i‡!
deföed
(
SQLITE_OMIT_FLAG_PRAGMAS
)

188 #i‡!
deföed
(
SQLITE_OMIT_FOREIGN_KEY
Ë&& !deföed(
SQLITE_OMIT_TRIGGER
)

190  
PøgTyp_FLAG
,

192  
SQLITE_F‹eignKeys
 },

195 #i‡!
deföed
(
SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS
)

197  
PøgTyp_HEADER_VALUE
,

198  
PøgFœg_RódO∆y
,

199  
BTREE_FREE_PAGE_COUNT
 },

201 #i‡!
deföed
(
SQLITE_OMIT_FLAG_PRAGMAS
)

203  
PøgTyp_FLAG
,

205  
SQLITE_FuŒCﬁNames
 },

207  
PøgTyp_FLAG
,

209  
SQLITE_FuŒFSync
 },

211 #i‡
deföed
(
SQLITE_HAS_CODEC
)

213  
PøgTyp_HEXKEY
,

217  
PøgTyp_HEXKEY
,

221 #i‡!
deföed
(
SQLITE_OMIT_FLAG_PRAGMAS
)

222 #i‡!
deföed
(
SQLITE_OMIT_CHECK
)

224  
PøgTyp_FLAG
,

226  
SQLITE_Ign‹eChecks
 },

229 #i‡!
deföed
(
SQLITE_OMIT_AUTOVACUUM
)

231  
PøgTyp_INCREMENTAL_VACUUM
,

232  
PøgFœg_NìdSchema
,

235 #i‡!
deföed
(
SQLITE_OMIT_SCHEMA_PRAGMAS
)

237  
PøgTyp_INDEX_INFO
,

238  
PøgFœg_NìdSchema
,

241  
PøgTyp_INDEX_LIST
,

242  
PøgFœg_NìdSchema
,

245  
PøgTyp_INDEX_INFO
,

246  
PøgFœg_NìdSchema
,

249 #i‡!
deföed
(
SQLITE_OMIT_INTEGRITY_CHECK
)

251  
PøgTyp_INTEGRITY_CHECK
,

252  
PøgFœg_NìdSchema
,

255 #i‡!
deföed
(
SQLITE_OMIT_PAGER_PRAGMAS
)

257  
PøgTyp_JOURNAL_MODE
,

258  
PøgFœg_NìdSchema
,

261  
PøgTyp_JOURNAL_SIZE_LIMIT
,

265 #i‡
deföed
(
SQLITE_HAS_CODEC
)

267  
PøgTyp_KEY
,

271 #i‡!
deföed
(
SQLITE_OMIT_FLAG_PRAGMAS
)

273  
PøgTyp_FLAG
,

275  
SQLITE_LegacyFûeFmt
 },

277 #i‡!
deföed
(
SQLITE_OMIT_PAGER_PRAGMAS
Ë&& 
SQLITE_ENABLE_LOCKING_STYLE


279  
PøgTyp_LOCK_PROXY_FILE
,

283 #i‡
deföed
(
SQLITE_DEBUG
Ë|| deföed(
SQLITE_TEST
)

285  
PøgTyp_LOCK_STATUS
,

289 #i‡!
deföed
(
SQLITE_OMIT_PAGER_PRAGMAS
)

291  
PøgTyp_LOCKING_MODE
,

295  
PøgTyp_PAGE_COUNT
,

296  
PøgFœg_NìdSchema
,

299  
PøgTyp_MMAP_SIZE
,

303  
PøgTyp_PAGE_COUNT
,

304  
PøgFœg_NìdSchema
,

307  
PøgTyp_PAGE_SIZE
,

311 #i‡
deföed
(
SQLITE_DEBUG
Ë&& !deföed(
SQLITE_OMIT_PARSER_TRACE
)

313  
PøgTyp_PARSER_TRACE
,

317 #i‡!
deföed
(
SQLITE_OMIT_FLAG_PRAGMAS
)

319  
PøgTyp_FLAG
,

321  
SQLITE_QuîyO∆y
 },

323 #i‡!
deföed
(
SQLITE_OMIT_INTEGRITY_CHECK
)

325  
PøgTyp_INTEGRITY_CHECK
,

326  
PøgFœg_NìdSchema
,

329 #i‡!
deföed
(
SQLITE_OMIT_FLAG_PRAGMAS
)

331  
PøgTyp_FLAG
,

333  
SQLITE_RódUncommôãd
 },

335  
PøgTyp_FLAG
,

337  
SQLITE_RecTriggîs
 },

339 #i‡
deföed
(
SQLITE_HAS_CODEC
)

341  
PøgTyp_REKEY
,

345 #i‡!
deföed
(
SQLITE_OMIT_FLAG_PRAGMAS
)

347  
PøgTyp_FLAG
,

349  
SQLITE_Revî£Ordî
 },

351 #i‡!
deföed
(
SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS
)

353  
PøgTyp_HEADER_VALUE
,

355  
BTREE_SCHEMA_VERSION
 },

357 #i‡!
deföed
(
SQLITE_OMIT_PAGER_PRAGMAS
)

359  
PøgTyp_SECURE_DELETE
,

363 #i‡!
deföed
(
SQLITE_OMIT_FLAG_PRAGMAS
)

365  
PøgTyp_FLAG
,

367  
SQLITE_Sh‹tCﬁNames
 },

370  
PøgTyp_SHRINK_MEMORY
,

374  
PøgTyp_SOFT_HEAP_LIMIT
,

377 #i‡!
deföed
(
SQLITE_OMIT_FLAG_PRAGMAS
)

378 #i‡
deföed
(
SQLITE_DEBUG
)

380  
PøgTyp_FLAG
,

382  
SQLITE_SqlTø˚
 },

385 #i‡!
deföed
(
SQLITE_OMIT_SCHEMA_PRAGMAS
)

387  
PøgTyp_STATS
,

388  
PøgFœg_NìdSchema
,

391 #i‡!
deföed
(
SQLITE_OMIT_PAGER_PRAGMAS
)

393  
PøgTyp_SYNCHRONOUS
,

394  
PøgFœg_NìdSchema
,

397 #i‡!
deföed
(
SQLITE_OMIT_SCHEMA_PRAGMAS
)

399  
PøgTyp_TABLE_INFO
,

400  
PøgFœg_NìdSchema
,

403 #i‡!
deföed
(
SQLITE_OMIT_PAGER_PRAGMAS
)

405  
PøgTyp_TEMP_STORE
,

409  
PøgTyp_TEMP_STORE_DIRECTORY
,

414  
PøgTyp_THREADS
,

417 #i‡!
deföed
(
SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS
)

419  
PøgTyp_HEADER_VALUE
,

421  
BTREE_USER_VERSION
 },

423 #i‡!
deföed
(
SQLITE_OMIT_FLAG_PRAGMAS
)

424 #i‡
deföed
(
SQLITE_DEBUG
)

426  
PøgTyp_FLAG
,

428  
SQLITE_VdbeAdd›Tø˚
 },

430  
PøgTyp_FLAG
,

432  
SQLITE_SqlTø˚
|
SQLITE_VdbeLi°ög
|
SQLITE_VdbeTø˚
 },

434  
PøgTyp_FLAG
,

436  
SQLITE_VdbeEQP
 },

438  
PøgTyp_FLAG
,

440  
SQLITE_VdbeLi°ög
 },

442  
PøgTyp_FLAG
,

444  
SQLITE_VdbeTø˚
 },

447 #i‡!
deföed
(
SQLITE_OMIT_WAL
)

449  
PøgTyp_WAL_AUTOCHECKPOINT
,

453  
PøgTyp_WAL_CHECKPOINT
,

454  
PøgFœg_NìdSchema
,

457 #i‡!
deföed
(
SQLITE_OMIT_FLAG_PRAGMAS
)

459  
PøgTyp_FLAG
,

461  
SQLITE_WrôeSchema
|
SQLITE_RecovîyMode
 },

	@prepare.c

16 
	~"sqlôeI¡.h
"

22 
	$c‹ru±Schema
(

23 
InôD©a
 *
pD©a
,

24 c⁄° *
zObj
,

25 c⁄° *
zExåa


27 
sqlôe3
 *
db
 = 
pD©a
->db;

28 if–!
db
->
mÆlocFaûed
 && (db->
Êags
 & 
SQLITE_RecovîyMode
)==0 ){

29 *
z
;

30 if–
zObj
==0 ) zObj = "?";

31 
z
 = 
	`sqlôe3MPrötf
(
db
, "mÆf‹med d©aba£ schem®(%s)", 
zObj
);

32 if–
zExåa
 ) 
z
 = 
	`sqlôe3MPrötf
(
db
, "%z - %s", z, zExtra);

33 
	`sqlôe3DbFªe
(
db
, *
pD©a
->
pzEºMsg
);

34 *
pD©a
->
pzEºMsg
 = 
z
;

36 
pD©a
->
rc
 = 
db
->
mÆlocFaûed
 ? 
SQLITE_NOMEM_BKPT
 : 
SQLITE_CORRUPT_BKPT
;

37 
	}
}

51 
	$sqlôe3InôCÆlback
(*
pInô
, 
¨gc
, **
¨gv
, **
NŸU£d
){

52 
InôD©a
 *
pD©a
 = (InôD©a*)
pInô
;

53 
sqlôe3
 *
db
 = 
pD©a
->db;

54 
iDb
 = 
pD©a
->iDb;

56 
	`as£π
–
¨gc
==3 );

57 
	`UNUSED_PARAMETER2
(
NŸU£d
, 
¨gc
);

58 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

59 
	`DbCÀ¨Pr›îty
(
db
, 
iDb
, 
DB_Em±y
);

60 if–
db
->
mÆlocFaûed
 ){

61 
	`c‹ru±Schema
(
pD©a
, 
¨gv
[0], 0);

65 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

66 if–
¨gv
==0 )  0;

67 if–
¨gv
[1]==0 ){

68 
	`c‹ru±Schema
(
pD©a
, 
¨gv
[0], 0);

69 }if–
	`sqlôe3_°∫icmp
(
¨gv
[2],"create ",7)==0 ){

75 
rc
;

76 
sqlôe3_°mt
 *
pStmt
;

77 
	`TESTONLY
(
r˝
);

79 
	`as£π
–
db
->
öô
.
busy
 );

80 
db
->
öô
.
iDb
 = iDb;

81 
db
->
öô
.
√wTnum
 = 
	`sqlôe3Atoi
(
¨gv
[1]);

82 
db
->
öô
.
‹ph™Triggî
 = 0;

83 
	`TESTONLY
(
r˝
 = ) 
	`sqlôe3_¥ï¨e
(
db
, 
¨gv
[2], -1, &
pStmt
, 0);

84 
rc
 = 
db
->
îrCode
;

85 
	`as£π
–(
rc
&0xFF)==(
r˝
&0xFF) );

86 
db
->
öô
.
iDb
 = 0;

87 if–
SQLITE_OK
!=
rc
 ){

88 if–
db
->
öô
.
‹ph™Triggî
 ){

89 
	`as£π
–
iDb
==1 );

91 
pD©a
->
rc
 =Ñc;

92 if–
rc
==
SQLITE_NOMEM
 ){

93 
	`sqlôe3OomFau…
(
db
);

94 }if–
rc
!=
SQLITE_INTERRUPT
 && (rc&0xFF)!=
SQLITE_LOCKED
 ){

95 
	`c‹ru±Schema
(
pD©a
, 
¨gv
[0], 
	`sqlôe3_îrmsg
(
db
));

99 
	`sqlôe3_föÆize
(
pStmt
);

100 }if–
¨gv
[0]==0 || (argv[2]!=0 &&árgv[2][0]!=0) ){

101 
	`c‹ru±Schema
(
pD©a
, 
¨gv
[0], 0);

109 
Index
 *
pIndex
;

110 
pIndex
 = 
	`sqlôe3FödIndex
(
db
, 
¨gv
[0], db->
aDb
[
iDb
].
zName
);

111 if–
pIndex
==0 ){

118 }if–
	`sqlôe3GëI¡32
(
¨gv
[1], &
pIndex
->
äum
)==0 ){

119 
	`c‹ru±Schema
(
pD©a
, 
¨gv
[0], "invalidÑootpage");

123 
	}
}

133 
	$sqlôe3InôO√
(
sqlôe3
 *
db
, 
iDb
, **
pzEºMsg
){

134 
rc
;

135 
i
;

136 #i‚de‡
SQLITE_OMIT_DEPRECATED


137 
size
;

139 
Db
 *
pDb
;

140 c⁄° *
azArg
[4];

141 
mëa
[5];

142 
InôD©a
 
öôD©a
;

143 c⁄° *
zMa°îName
;

144 
›íedTønß˘i⁄
 = 0;

146 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

147 
	`as£π
–
db
->
aDb
[
iDb
].
pSchema
 );

148 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

149 
	`as£π
–
iDb
==1 || 
	`sqlôe3BåìHﬁdsMuãx
(
db
->
aDb
[iDb].
pBt
) );

156 
azArg
[0] = 
zMa°îName
 = 
	`SCHEMA_TABLE
(
iDb
);

157 
azArg
[1] = "1";

158 
azArg
[2] = "CREATE TABLE x(typeÅext,nameÅext,tbl_nameÅext,"

160 
azArg
[3] = 0;

161 
öôD©a
.
db
 = db;

162 
öôD©a
.
iDb
 = iDb;

163 
öôD©a
.
rc
 = 
SQLITE_OK
;

164 
öôD©a
.
pzEºMsg
 =ÖzErrMsg;

165 
	`sqlôe3InôCÆlback
(&
öôD©a
, 3, (**)
azArg
, 0);

166 if–
öôD©a
.
rc
 ){

167 
rc
 = 
öôD©a
.rc;

168 
îr‹_out
;

173 
pDb
 = &
db
->
aDb
[
iDb
];

174 if–
pDb
->
pBt
==0 ){

175 if–!
OMIT_TEMPDB
 && 
	`ALWAYS
(
iDb
==1) ){

176 
	`DbSëPr›îty
(
db
, 1, 
DB_SchemaLﬂded
);

178  
SQLITE_OK
;

184 
	`sqlôe3BåìE¡î
(
pDb
->
pBt
);

185 if–!
	`sqlôe3BåìIsInRódTøns
(
pDb
->
pBt
) ){

186 
rc
 = 
	`sqlôe3BåìBegöTøns
(
pDb
->
pBt
, 0);

187 if–
rc
!=
SQLITE_OK
 ){

188 
	`sqlôe3SëSåög
(
pzEºMsg
, 
db
, 
	`sqlôe3EºSå
(
rc
));

189 
öô⁄e_îr‹_out
;

191 
›íedTønß˘i⁄
 = 1;

211 
i
=0; i<
	`AºaySize
(
mëa
); i++){

212 
	`sqlôe3BåìGëMëa
(
pDb
->
pBt
, 
i
+1, (
u32
 *)&
mëa
[i]);

214 
pDb
->
pSchema
->
schema_cookõ
 = 
mëa
[
BTREE_SCHEMA_VERSION
-1];

221 if–
mëa
[
BTREE_TEXT_ENCODING
-1] ){

222 if–
iDb
==0 ){

223 #i‚de‡
SQLITE_OMIT_UTF16


224 
u8
 
ícodög
;

226 
ícodög
 = (
u8
)
mëa
[
BTREE_TEXT_ENCODING
-1] & 3;

227 if–
ícodög
==0 )Éncodög = 
SQLITE_UTF8
;

228 
	`ENC
(
db
Ë
ícodög
;

230 
	`ENC
(
db
Ë
SQLITE_UTF8
;

234 if–
mëa
[
BTREE_TEXT_ENCODING
-1]!=
	`ENC
(
db
) ){

235 
	`sqlôe3SëSåög
(
pzEºMsg
, 
db
, "attached databases must useÅhe same"

237 
rc
 = 
SQLITE_ERROR
;

238 
öô⁄e_îr‹_out
;

242 
	`DbSëPr›îty
(
db
, 
iDb
, 
DB_Em±y
);

244 
pDb
->
pSchema
->
íc
 = 
	`ENC
(
db
);

246 if–
pDb
->
pSchema
->
ˇche_size
==0 ){

247 #i‚de‡
SQLITE_OMIT_DEPRECATED


248 
size
 = 
	`sqlôe3AbsI¡32
(
mëa
[
BTREE_DEFAULT_CACHE_SIZE
-1]);

249 if–
size
==0 ){ sizê
SQLITE_DEFAULT_CACHE_SIZE
; }

250 
pDb
->
pSchema
->
ˇche_size
 = 
size
;

252 
pDb
->
pSchema
->
ˇche_size
 = 
SQLITE_DEFAULT_CACHE_SIZE
;

254 
	`sqlôe3BåìSëCacheSize
(
pDb
->
pBt
,ÖDb->
pSchema
->
ˇche_size
);

263 
pDb
->
pSchema
->
fûe_f‹m©
 = (
u8
)
mëa
[
BTREE_FILE_FORMAT
-1];

264 if–
pDb
->
pSchema
->
fûe_f‹m©
==0 ){

265 
pDb
->
pSchema
->
fûe_f‹m©
 = 1;

267 if–
pDb
->
pSchema
->
fûe_f‹m©
>
SQLITE_MAX_FILE_FORMAT
 ){

268 
	`sqlôe3SëSåög
(
pzEºMsg
, 
db
, "unsupported file format");

269 
rc
 = 
SQLITE_ERROR
;

270 
öô⁄e_îr‹_out
;

278 if–
iDb
==0 && 
mëa
[
BTREE_FILE_FORMAT
-1]>=4 ){

279 
db
->
Êags
 &~
SQLITE_LegacyFûeFmt
;

284 
	`as£π
–
db
->
öô
.
busy
 );

286 *
zSql
;

287 
zSql
 = 
	`sqlôe3MPrötf
(
db
,

289 
db
->
aDb
[
iDb
].
zName
, 
zMa°îName
);

290 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


292 
sqlôe3_xauth
 
xAuth
;

293 
xAuth
 = 
db
->xAuth;

294 
db
->
xAuth
 = 0;

296 
rc
 = 
	`sqlôe3_exec
(
db
, 
zSql
, 
sqlôe3InôCÆlback
, &
öôD©a
, 0);

297 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


298 
db
->
xAuth
 = xAuth;

301 if–
rc
==
SQLITE_OK
 )Ñ¯
öôD©a
.rc;

302 
	`sqlôe3DbFªe
(
db
, 
zSql
);

303 #i‚de‡
SQLITE_OMIT_ANALYZE


304 if–
rc
==
SQLITE_OK
 ){

305 
	`sqlôe3A«lysisLﬂd
(
db
, 
iDb
);

309 if–
db
->
mÆlocFaûed
 ){

310 
rc
 = 
SQLITE_NOMEM_BKPT
;

311 
	`sqlôe3Re£tAŒSchemasOfC⁄√˘i⁄
(
db
);

313 if–
rc
==
SQLITE_OK
 || (
db
->
Êags
&
SQLITE_RecovîyMode
)){

322 
	`DbSëPr›îty
(
db
, 
iDb
, 
DB_SchemaLﬂded
);

323 
rc
 = 
SQLITE_OK
;

330 
öô⁄e_îr‹_out
:

331 if–
›íedTønß˘i⁄
 ){

332 
	`sqlôe3BåìCommô
(
pDb
->
pBt
);

334 
	`sqlôe3BåìLóve
(
pDb
->
pBt
);

336 
îr‹_out
:

337 if–
rc
==
SQLITE_NOMEM
 ||Ñc==
SQLITE_IOERR_NOMEM
 ){

338 
	`sqlôe3OomFau…
(
db
);

340  
rc
;

341 
	}
}

353 
	$sqlôe3Inô
(
sqlôe3
 *
db
, **
pzEºMsg
){

354 
i
, 
rc
;

355 
commô_öã∫Æ
 = !(
db
->
Êags
&
SQLITE_I¡înCh™ges
);

357 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

358 
	`as£π
–
	`sqlôe3BåìHﬁdsMuãx
(
db
->
aDb
[0].
pBt
) );

359 
	`as£π
–
db
->
öô
.
busy
==0 );

360 
rc
 = 
SQLITE_OK
;

361 
db
->
öô
.
busy
 = 1;

362 
	`ENC
(
db
Ë
	`SCHEMA_ENC
(db);

363 
i
=0; 
rc
==
SQLITE_OK
 && i<
db
->
nDb
; i++){

364 if–
	`DbHasPr›îty
(
db
, 
i
, 
DB_SchemaLﬂded
) || i==1 ) ;

365 
rc
 = 
	`sqlôe3InôO√
(
db
, 
i
, 
pzEºMsg
);

366 if–
rc
 ){

367 
	`sqlôe3Re£tO√Schema
(
db
, 
i
);

375 #i‚de‡
SQLITE_OMIT_TEMPDB


376 
	`as£π
–
db
->
nDb
>1 );

377 if–
rc
==
SQLITE_OK
 && !
	`DbHasPr›îty
(
db
, 1, 
DB_SchemaLﬂded
) ){

378 
rc
 = 
	`sqlôe3InôO√
(
db
, 1, 
pzEºMsg
);

379 if–
rc
 ){

380 
	`sqlôe3Re£tO√Schema
(
db
, 1);

385 
db
->
öô
.
busy
 = 0;

386 if–
rc
==
SQLITE_OK
 && 
commô_öã∫Æ
 ){

387 
	`sqlôe3CommôI¡î«lCh™ges
(
db
);

390  
rc
;

391 
	}
}

397 
	$sqlôe3RódSchema
(
P¨£
 *
pP¨£
){

398 
rc
 = 
SQLITE_OK
;

399 
sqlôe3
 *
db
 = 
pP¨£
->db;

400 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

401 if–!
db
->
öô
.
busy
 ){

402 
rc
 = 
	`sqlôe3Inô
(
db
, &
pP¨£
->
zEºMsg
);

404 if–
rc
!=
SQLITE_OK
 ){

405 
pP¨£
->
rc
 =Ñc;

406 
pP¨£
->
nEº
++;

408  
rc
;

409 
	}
}

417 
	$schemaIsVÆid
(
P¨£
 *
pP¨£
){

418 
sqlôe3
 *
db
 = 
pP¨£
->db;

419 
iDb
;

420 
rc
;

421 
cookõ
;

423 
	`as£π
–
pP¨£
->
checkSchema
 );

424 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

425 
iDb
=0; iDb<
db
->
nDb
; iDb++){

426 
›íedTønß˘i⁄
 = 0;

427 
Båì
 *
pBt
 = 
db
->
aDb
[
iDb
].pBt;

428 if–
pBt
==0 ) ;

433 if–!
	`sqlôe3BåìIsInRódTøns
(
pBt
) ){

434 
rc
 = 
	`sqlôe3BåìBegöTøns
(
pBt
, 0);

435 if–
rc
==
SQLITE_NOMEM
 ||Ñc==
SQLITE_IOERR_NOMEM
 ){

436 
	`sqlôe3OomFau…
(
db
);

438 if–
rc
!=
SQLITE_OK
 ) ;

439 
›íedTønß˘i⁄
 = 1;

445 
	`sqlôe3BåìGëMëa
(
pBt
, 
BTREE_SCHEMA_VERSION
, (
u32
 *)&
cookõ
);

446 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

447 if–
cookõ
!=
db
->
aDb
[
iDb
].
pSchema
->
schema_cookõ
 ){

448 
	`sqlôe3Re£tO√Schema
(
db
, 
iDb
);

449 
pP¨£
->
rc
 = 
SQLITE_SCHEMA
;

453 if–
›íedTønß˘i⁄
 ){

454 
	`sqlôe3BåìCommô
(
pBt
);

457 
	}
}

466 
	$sqlôe3SchemaToIndex
(
sqlôe3
 *
db
, 
Schema
 *
pSchema
){

467 
i
 = -1000000;

479 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

480 if–
pSchema
 ){

481 
i
=0; 
	`ALWAYS
(i<
db
->
nDb
); i++){

482 if–
db
->
aDb
[
i
].
pSchema
==pSchema ){

486 
	`as£π
–
i
>=0 && i<
db
->
nDb
 );

488  
i
;

489 
	}
}

494 
	$sqlôe3P¨£rRe£t
(
P¨£
 *
pP¨£
){

495 if–
pP¨£
 ){

496 
sqlôe3
 *
db
 = 
pP¨£
->db;

497 
	`sqlôe3DbFªe
(
db
, 
pP¨£
->
aLabñ
);

498 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
pP¨£
->
pC⁄°Ex¥
);

499 if–
db
 ){

500 
	`as£π
–
db
->
lookaside
.
bDißbÀ
 >
pP¨£
->
dißbÀLookaside
 );

501 
db
->
lookaside
.
bDißbÀ
 -
pP¨£
->
dißbÀLookaside
;

503 
pP¨£
->
dißbÀLookaside
 = 0;

505 
	}
}

510 
	$sqlôe3Pª∑ª
(

511 
sqlôe3
 *
db
,

512 c⁄° *
zSql
,

513 
nByãs
,

514 
ßveSqlFœg
,

515 
Vdbe
 *
pRïª∑ª
,

516 
sqlôe3_°mt
 **
µStmt
,

517 c⁄° **
pzTaû


519 
P¨£
 *
pP¨£
;

520 *
zEºMsg
 = 0;

521 
rc
 = 
SQLITE_OK
;

522 
i
;

525 
pP¨£
 = 
	`sqlôe3SèckAŒocZîo
(
db
, (*pParse));

526 if–
pP¨£
==0 ){

527 
rc
 = 
SQLITE_NOMEM_BKPT
;

528 
íd_¥ï¨e
;

530 
pP¨£
->
pRïª∑ª
 =ÖReprepare;

531 
	`as£π
–
µStmt
 && *ppStmt==0 );

533 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

558 
i
=0; i<
db
->
nDb
; i++) {

559 
Båì
 *
pBt
 = 
db
->
aDb
[
i
].pBt;

560 if–
pBt
 ){

561 
	`as£π
–
	`sqlôe3BåìHﬁdsMuãx
(
pBt
) );

562 
rc
 = 
	`sqlôe3BåìSchemaLocked
(
pBt
);

563 if–
rc
 ){

564 c⁄° *
zDb
 = 
db
->
aDb
[
i
].
zName
;

565 
	`sqlôe3Eº‹WôhMsg
(
db
, 
rc
, "d©aba£ schem®i†locked: %s", 
zDb
);

566 
	`ã°ˇ£
–
db
->
Êags
 & 
SQLITE_RódUncommôãd
 );

567 
íd_¥ï¨e
;

572 
	`sqlôe3VèbU∆ockLi°
(
db
);

574 
pP¨£
->
db
 = db;

575 
pP¨£
->
nQuîyLo›
 = 0;

576 if–
nByãs
>=0 && (nByãs==0 || 
zSql
[nBytes-1]!=0) ){

577 *
zSqlC›y
;

578 
mxLí
 = 
db
->
aLimô
[
SQLITE_LIMIT_SQL_LENGTH
];

579 
	`ã°ˇ£
–
nByãs
==
mxLí
 );

580 
	`ã°ˇ£
–
nByãs
==
mxLí
+1 );

581 if–
nByãs
>
mxLí
 ){

582 
	`sqlôe3Eº‹WôhMsg
(
db
, 
SQLITE_TOOBIG
, "statementÅooÜong");

583 
rc
 = 
	`sqlôe3ApiExô
(
db
, 
SQLITE_TOOBIG
);

584 
íd_¥ï¨e
;

586 
zSqlC›y
 = 
	`sqlôe3DbSåNDup
(
db
, 
zSql
, 
nByãs
);

587 if–
zSqlC›y
 ){

588 
	`sqlôe3RunP¨£r
(
pP¨£
, 
zSqlC›y
, &
zEºMsg
);

589 
pP¨£
->
zTaû
 = &
zSql
[pP¨£->zTaû-
zSqlC›y
];

590 
	`sqlôe3DbFªe
(
db
, 
zSqlC›y
);

592 
pP¨£
->
zTaû
 = &
zSql
[
nByãs
];

595 
	`sqlôe3RunP¨£r
(
pP¨£
, 
zSql
, &
zEºMsg
);

597 
	`as£π
–0==
pP¨£
->
nQuîyLo›
 );

599 if–
pP¨£
->
rc
==
SQLITE_DONE
 )ÖP¨£->r¯
SQLITE_OK
;

600 if–
pP¨£
->
checkSchema
 ){

601 
	`schemaIsVÆid
(
pP¨£
);

603 if–
db
->
mÆlocFaûed
 ){

604 
pP¨£
->
rc
 = 
SQLITE_NOMEM_BKPT
;

606 if–
pzTaû
 ){

607 *
pzTaû
 = 
pP¨£
->
zTaû
;

609 
rc
 = 
pP¨£
->rc;

611 #i‚de‡
SQLITE_OMIT_EXPLAIN


612 if–
rc
==
SQLITE_OK
 && 
pP¨£
->
pVdbe
 &&ÖP¨£->
ex∂aö
 ){

613 c⁄° * c⁄° 
azCﬁName
[] = {

617 
iFú°
, 
mx
;

618 if–
pP¨£
->
ex∂aö
==2 ){

619 
	`sqlôe3VdbeSëNumCﬁs
(
pP¨£
->
pVdbe
, 4);

620 
iFú°
 = 8;

621 
mx
 = 12;

623 
	`sqlôe3VdbeSëNumCﬁs
(
pP¨£
->
pVdbe
, 8);

624 
iFú°
 = 0;

625 
mx
 = 8;

627 
i
=
iFú°
; i<
mx
; i++){

628 
	`sqlôe3VdbeSëCﬁName
(
pP¨£
->
pVdbe
, 
i
-
iFú°
, 
COLNAME_NAME
,

629 
azCﬁName
[
i
], 
SQLITE_STATIC
);

634 if–
db
->
öô
.
busy
==0 ){

635 
Vdbe
 *
pVdbe
 = 
pP¨£
->pVdbe;

636 
	`sqlôe3VdbeSëSql
(
pVdbe
, 
zSql
, ()(
pP¨£
->
zTaû
-zSql), 
ßveSqlFœg
);

638 if–
pP¨£
->
pVdbe
 && (
rc
!=
SQLITE_OK
 || 
db
->
mÆlocFaûed
) ){

639 
	`sqlôe3VdbeFöÆize
(
pP¨£
->
pVdbe
);

640 
	`as£π
(!(*
µStmt
));

642 *
µStmt
 = (
sqlôe3_°mt
*)
pP¨£
->
pVdbe
;

645 if–
zEºMsg
 ){

646 
	`sqlôe3Eº‹WôhMsg
(
db
, 
rc
, "%s", 
zEºMsg
);

647 
	`sqlôe3DbFªe
(
db
, 
zEºMsg
);

649 
	`sqlôe3Eº‹
(
db
, 
rc
);

653  
pP¨£
->
pTriggîPrg
 ){

654 
TriggîPrg
 *
pT
 = 
pP¨£
->
pTriggîPrg
;

655 
pP¨£
->
pTriggîPrg
 = 
pT
->
pNext
;

656 
	`sqlôe3DbFªe
(
db
, 
pT
);

659 
íd_¥ï¨e
:

661 
	`sqlôe3P¨£rRe£t
(
pP¨£
);

662 
	`sqlôe3SèckFªe
(
db
, 
pP¨£
);

663 
rc
 = 
	`sqlôe3ApiExô
(
db
,Ñc);

664 
	`as£π
–(
rc
&
db
->
îrMask
)==rc );

665  
rc
;

666 
	}
}

667 
	$sqlôe3LockAndPª∑ª
(

668 
sqlôe3
 *
db
,

669 c⁄° *
zSql
,

670 
nByãs
,

671 
ßveSqlFœg
,

672 
Vdbe
 *
pOld
,

673 
sqlôe3_°mt
 **
µStmt
,

674 c⁄° **
pzTaû


676 
rc
;

678 #ifde‡
SQLITE_ENABLE_API_ARMOR


679 if–
µStmt
==0 )  
SQLITE_MISUSE_BKPT
;

681 *
µStmt
 = 0;

682 if–!
	`sqlôe3Sa„tyCheckOk
(
db
)||
zSql
==0 ){

683  
SQLITE_MISUSE_BKPT
;

685 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

686 
	`sqlôe3BåìE¡îAŒ
(
db
);

687 
rc
 = 
	`sqlôe3Pª∑ª
(
db
, 
zSql
, 
nByãs
, 
ßveSqlFœg
, 
pOld
, 
µStmt
, 
pzTaû
);

688 if–
rc
==
SQLITE_SCHEMA
 ){

689 
	`sqlôe3_föÆize
(*
µStmt
);

690 
rc
 = 
	`sqlôe3Pª∑ª
(
db
, 
zSql
, 
nByãs
, 
ßveSqlFœg
, 
pOld
, 
µStmt
, 
pzTaû
);

692 
	`sqlôe3BåìLóveAŒ
(
db
);

693 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

694 
	`as£π
–
rc
==
SQLITE_OK
 || *
µStmt
==0 );

695  
rc
;

696 
	}
}

706 
	$sqlôe3Rïª∑ª
(
Vdbe
 *
p
){

707 
rc
;

708 
sqlôe3_°mt
 *
pNew
;

709 c⁄° *
zSql
;

710 
sqlôe3
 *
db
;

712 
	`as£π
–
	`sqlôe3_muãx_hñd
(
	`sqlôe3VdbeDb
(
p
)->
muãx
) );

713 
zSql
 = 
	`sqlôe3_sql
((
sqlôe3_°mt
 *)
p
);

714 
	`as£π
–
zSql
!=0 );

715 
db
 = 
	`sqlôe3VdbeDb
(
p
);

716 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

717 
rc
 = 
	`sqlôe3LockAndPª∑ª
(
db
, 
zSql
, -1, 0, 
p
, &
pNew
, 0);

718 if–
rc
 ){

719 if–
rc
==
SQLITE_NOMEM
 ){

720 
	`sqlôe3OomFau…
(
db
);

722 
	`as£π
–
pNew
==0 );

723  
rc
;

725 
	`as£π
–
pNew
!=0 );

727 
	`sqlôe3VdbeSw≠
((
Vdbe
*)
pNew
, 
p
);

728 
	`sqlôe3Tøns„rBödögs
(
pNew
, (
sqlôe3_°mt
*)
p
);

729 
	`sqlôe3VdbeRe£tSãpResu…
((
Vdbe
*)
pNew
);

730 
	`sqlôe3VdbeFöÆize
((
Vdbe
*)
pNew
);

731  
SQLITE_OK
;

732 
	}
}

743 
	$sqlôe3_¥ï¨e
(

744 
sqlôe3
 *
db
,

745 c⁄° *
zSql
,

746 
nByãs
,

747 
sqlôe3_°mt
 **
µStmt
,

748 c⁄° **
pzTaû


750 
rc
;

751 
rc
 = 
	`sqlôe3LockAndPª∑ª
(
db
,
zSql
,
nByãs
,0,0,
µStmt
,
pzTaû
);

752 
	`as£π
–
rc
==
SQLITE_OK
 || 
µStmt
==0 || *ppStmt==0 );

753  
rc
;

754 
	}
}

755 
	$sqlôe3_¥ï¨e_v2
(

756 
sqlôe3
 *
db
,

757 c⁄° *
zSql
,

758 
nByãs
,

759 
sqlôe3_°mt
 **
µStmt
,

760 c⁄° **
pzTaû


762 
rc
;

763 
rc
 = 
	`sqlôe3LockAndPª∑ª
(
db
,
zSql
,
nByãs
,1,0,
µStmt
,
pzTaû
);

764 
	`as£π
–
rc
==
SQLITE_OK
 || 
µStmt
==0 || *ppStmt==0 );

765  
rc
;

766 
	}
}

769 #i‚de‡
SQLITE_OMIT_UTF16


773 
	$sqlôe3Pª∑ª16
(

774 
sqlôe3
 *
db
,

775 c⁄° *
zSql
,

776 
nByãs
,

777 
ßveSqlFœg
,

778 
sqlôe3_°mt
 **
µStmt
,

779 c⁄° **
pzTaû


785 *
zSql8
;

786 c⁄° *
zTaû8
 = 0;

787 
rc
 = 
SQLITE_OK
;

789 #ifde‡
SQLITE_ENABLE_API_ARMOR


790 if–
µStmt
==0 )  
SQLITE_MISUSE_BKPT
;

792 *
µStmt
 = 0;

793 if–!
	`sqlôe3Sa„tyCheckOk
(
db
)||
zSql
==0 ){

794  
SQLITE_MISUSE_BKPT
;

796 if–
nByãs
>=0 ){

797 
sz
;

798 c⁄° *
z
 = (c⁄° *)
zSql
;

799 
sz
=0; sz<
nByãs
 && (
z
[sz]!=0 || z[sz+1]!=0); sz += 2){}

800 
nByãs
 = 
sz
;

802 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

803 
zSql8
 = 
	`sqlôe3Utf16to8
(
db
, 
zSql
, 
nByãs
, 
SQLITE_UTF16NATIVE
);

804 if–
zSql8
 ){

805 
rc
 = 
	`sqlôe3LockAndPª∑ª
(
db
, 
zSql8
, -1, 
ßveSqlFœg
, 0, 
µStmt
, &
zTaû8
);

808 if–
zTaû8
 && 
pzTaû
 ){

814 
ch¨s_∑r£d
 = 
	`sqlôe3Utf8Ch¨Lí
(
zSql8
, ()(
zTaû8
-zSql8));

815 *
pzTaû
 = (
u8
 *)
zSql
 + 
	`sqlôe3Utf16ByãLí
(zSql, 
ch¨s_∑r£d
);

817 
	`sqlôe3DbFªe
(
db
, 
zSql8
);

818 
rc
 = 
	`sqlôe3ApiExô
(
db
,Ñc);

819 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

820  
rc
;

821 
	}
}

831 
	$sqlôe3_¥ï¨e16
(

832 
sqlôe3
 *
db
,

833 c⁄° *
zSql
,

834 
nByãs
,

835 
sqlôe3_°mt
 **
µStmt
,

836 c⁄° **
pzTaû


838 
rc
;

839 
rc
 = 
	`sqlôe3Pª∑ª16
(
db
,
zSql
,
nByãs
,0,
µStmt
,
pzTaû
);

840 
	`as£π
–
rc
==
SQLITE_OK
 || 
µStmt
==0 || *ppStmt==0 );

841  
rc
;

842 
	}
}

843 
	$sqlôe3_¥ï¨e16_v2
(

844 
sqlôe3
 *
db
,

845 c⁄° *
zSql
,

846 
nByãs
,

847 
sqlôe3_°mt
 **
µStmt
,

848 c⁄° **
pzTaû


850 
rc
;

851 
rc
 = 
	`sqlôe3Pª∑ª16
(
db
,
zSql
,
nByãs
,1,
µStmt
,
pzTaû
);

852 
	`as£π
–
rc
==
SQLITE_OK
 || 
µStmt
==0 || *ppStmt==0 );

853  
rc
;

854 
	}
}

	@printf.c

12 
	~"sqlôeI¡.h
"

18 
	#ëRADIX
 0

	)

19 
	#ëFLOAT
 1

	)

20 
	#ëEXP
 2

	)

21 
	#ëGENERIC
 3

	)

22 
	#ëSIZE
 4

	)

23 
	#ëSTRING
 5

	)

24 
	#ëDYNSTRING
 6

	)

25 
	#ëPERCENT
 7

	)

26 
	#ëCHARX
 8

	)

28 
	#ëSQLESCAPE
 9

	)

29 
	#ëSQLESCAPE2
 10

	)

31 
	#ëTOKEN
 11

	)

32 
	#ëSRCLIST
 12

	)

33 
	#ëPOINTER
 13

	)

34 
	#ëSQLESCAPE3
 14

	)

35 
	#ëORDINAL
 15

	)

37 
	#ëINVALID
 16

	)

43 
	tëByã
;

49 
	së_öfo
 {

50 
	mfmây≥
;

51 
ëByã
 
	mba£
;

52 
ëByã
 
	mÊags
;

53 
ëByã
 
	mty≥
;

54 
ëByã
 
	mch¨£t
;

55 
ëByã
 
	m¥efix
;

56 } 
	të_öfo
;

61 
	#FLAG_SIGNED
 1

	)

62 
	#FLAG_INTERN
 2

	)

63 
	#FLAG_STRING
 4

	)

70 c⁄° 
	gaDigôs
[] = "0123456789ABCDEF0123456789abcdef";

71 c⁄° 
	gaPªfix
[] = "-x0\000X0";

72 c⁄° 
ë_öfo
 
	gfmtöfo
[] = {

73 { 'd', 10, 1, 
ëRADIX
, 0, 0 },

74 { 's', 0, 4, 
ëSTRING
, 0, 0 },

75 { 'g', 0, 1, 
ëGENERIC
, 30, 0 },

76 { 'z', 0, 4, 
ëDYNSTRING
, 0, 0 },

77 { 'q', 0, 4, 
ëSQLESCAPE
, 0, 0 },

78 { 'Q', 0, 4, 
ëSQLESCAPE2
, 0, 0 },

79 { 'w', 0, 4, 
ëSQLESCAPE3
, 0, 0 },

80 { 'c', 0, 0, 
ëCHARX
, 0, 0 },

81 { 'o', 8, 0, 
ëRADIX
, 0, 2 },

82 { 'u', 10, 0, 
ëRADIX
, 0, 0 },

83 { 'x', 16, 0, 
ëRADIX
, 16, 1 },

84 { 'X', 16, 0, 
ëRADIX
, 0, 4 },

85 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


86 { 'f', 0, 1, 
ëFLOAT
, 0, 0 },

87 { 'e', 0, 1, 
ëEXP
, 30, 0 },

88 { 'E', 0, 1, 
ëEXP
, 14, 0 },

89 { 'G', 0, 1, 
ëGENERIC
, 14, 0 },

91 { 'i', 10, 1, 
ëRADIX
, 0, 0 },

92 { 'n', 0, 0, 
ëSIZE
, 0, 0 },

93 { '%', 0, 0, 
ëPERCENT
, 0, 0 },

94 { 'p', 16, 0, 
ëPOINTER
, 0, 1 },

98 { 'T', 0, 2, 
ëTOKEN
, 0, 0 },

99 { 'S', 0, 2, 
ëSRCLIST
, 0, 0 },

100 { 'r', 10, 3, 
ëORDINAL
, 0, 0 },

107 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


121 
	$ë_gëdigô
(
LONGDOUBLE_TYPE
 *
vÆ
, *
˙t
){

122 
digô
;

123 
LONGDOUBLE_TYPE
 
d
;

124 if–(*
˙t
)<=0 )  '0';

125 (*
˙t
)--;

126 
digô
 = ()*
vÆ
;

127 
d
 = 
digô
;

128 
digô
 += '0';

129 *
vÆ
 = (*vÆ - 
d
)*10.0;

130  ()
digô
;

131 
	}
}

137 
	$£tSåAccumEº‹
(
SåAccum
 *
p
, 
u8
 
eEº‹
){

138 
	`as£π
–
eEº‹
==
STRACCUM_NOMEM
 ||ÉEº‹==
STRACCUM_TOOBIG
 );

139 
p
->
accEº‹
 = 
eEº‹
;

140 
p
->
nAŒoc
 = 0;

141 
	}
}

146 
sqlôe3_öt64
 
	$gëI¡Arg
(
PrötfArgumíts
 *
p
){

147 if–
p
->
nArg
<ı->
nU£d
 )  0;

148  
	`sqlôe3_vÆue_öt64
(
p
->
≠Arg
[p->
nU£d
++]);

149 
	}
}

150 
	$gëDoubÀArg
(
PrötfArgumíts
 *
p
){

151 if–
p
->
nArg
<ı->
nU£d
 )  0.0;

152  
	`sqlôe3_vÆue_doubÀ
(
p
->
≠Arg
[p->
nU£d
++]);

153 
	}
}

154 *
	$gëTextArg
(
PrötfArgumíts
 *
p
){

155 if–
p
->
nArg
<ı->
nU£d
 )  0;

156  (*)
	`sqlôe3_vÆue_ãxt
(
p
->
≠Arg
[p->
nU£d
++]);

157 
	}
}

164 #i‚de‡
SQLITE_PRINT_BUF_SIZE


165 
	#SQLITE_PRINT_BUF_SIZE
 70

	)

167 
	#ëBUFSIZE
 
SQLITE_PRINT_BUF_SIZE


	)

172 
	$sqlôe3VXPrötf
(

173 
SåAccum
 *
pAccum
,

174 c⁄° *
fmt
,

175 
va_li°
 
≠


177 
c
;

178 *
buÂt
;

179 
¥ecisi⁄
;

180 
Àngth
;

181 
idx
;

182 
width
;

183 
ëByã
 
Êag_À·ju°ify
;

184 
ëByã
 
Êag_∂ussign
;

185 
ëByã
 
Êag_bœnksign
;

186 
ëByã
 
Êag_Æã∫©ef‹m
;

187 
ëByã
 
Êag_Ætf‹m2
;

188 
ëByã
 
Êag_zî›ad
;

189 
ëByã
 
Êag_l⁄g
;

190 
ëByã
 
Êag_l⁄gl⁄g
;

191 
ëByã
 
d⁄e
;

192 
ëByã
 
xty≥
 = 
ëINVALID
;

193 
u8
 
bArgLi°
;

194 
u8
 
u£I¡în
;

195 
¥efix
;

196 
sqlôe_uöt64
 
l⁄gvÆue
;

197 
LONGDOUBLE_TYPE
 
ªÆvÆue
;

198 c⁄° 
ë_öfo
 *
öf›
;

199 *
zOut
;

200 
nOut
;

201 *
zExåa
 = 0;

202 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


203 
exp
, 
e2
;

204 
nsd
;

205 
roundî
;

206 
ëByã
 
Êag_dp
;

207 
ëByã
 
Êag_πz
;

209 
PrötfArgumíts
 *
pArgLi°
 = 0;

210 
buf
[
ëBUFSIZE
];

212 
buÂt
 = 0;

213 if–
pAccum
->
¥ötfFœgs
 ){

214 if–(
bArgLi°
 = (
pAccum
->
¥ötfFœgs
 & 
SQLITE_PRINTF_SQLFUNC
))!=0 ){

215 
pArgLi°
 = 
	`va_¨g
(
≠
, 
PrötfArgumíts
*);

217 
u£I¡în
 = 
pAccum
->
¥ötfFœgs
 & 
SQLITE_PRINTF_INTERNAL
;

219 
bArgLi°
 = 
u£I¡în
 = 0;

221 ; (
c
=(*
fmt
))!=0; ++fmt){

222 if–
c
!='%' ){

223 
buÂt
 = (*)
fmt
;

224 #i‡
HAVE_STRCHRNUL


225 
fmt
 = 
	`°rch∫ul
(fmt, '%');

227 do{ 
fmt
++; } *fmt && *fmt != '%' );

229 
	`sqlôe3SåAccumAµíd
(
pAccum
, 
buÂt
, ()(
fmt
 - bufpt));

230 if–*
fmt
==0 ) ;

232 if–(
c
=(*++
fmt
))==0 ){

233 
	`sqlôe3SåAccumAµíd
(
pAccum
, "%", 1);

237 
Êag_À·ju°ify
 = 
Êag_∂ussign
 = 
Êag_bœnksign
 =

238 
Êag_Æã∫©ef‹m
 = 
Êag_Ætf‹m2
 = 
Êag_zî›ad
 = 0;

239 
d⁄e
 = 0;

241  
c
 ){

242 '-': 
Êag_À·ju°ify
 = 1; ;

243 '+': 
Êag_∂ussign
 = 1; ;

244 ' ': 
Êag_bœnksign
 = 1; ;

245 '#': 
Êag_Æã∫©ef‹m
 = 1; ;

246 '!': 
Êag_Ætf‹m2
 = 1; ;

247 '0': 
Êag_zî›ad
 = 1; ;

248 : 
d⁄e
 = 1; ;

250 } !
d⁄e
 && (
c
=(*++
fmt
))!=0 );

252 if–
c
=='*' ){

253 if–
bArgLi°
 ){

254 
width
 = ()
	`gëI¡Arg
(
pArgLi°
);

256 
width
 = 
	`va_¨g
(
≠
,);

258 if–
width
<0 ){

259 
Êag_À·ju°ify
 = 1;

260 
width
 = width >= -2147483647 ? -width : 0;

262 
c
 = *++
fmt
;

264 
wx
 = 0;

265  
c
>='0' && c<='9' ){

266 
wx
 = wx*10 + 
c
 - '0';

267 
c
 = *++
fmt
;

269 
	`ã°ˇ£
–
wx
>0x7fffffff );

270 
width
 = 
wx
 & 0x7fffffff;

272 
	`as£π
–
width
>=0 );

273 #ifde‡
SQLITE_PRINTF_PRECISION_LIMIT


274 if–
width
>
SQLITE_PRINTF_PRECISION_LIMIT
 ){

275 
width
 = 
SQLITE_PRINTF_PRECISION_LIMIT
;

280 if–
c
=='.' ){

281 
c
 = *++
fmt
;

282 if–
c
=='*' ){

283 if–
bArgLi°
 ){

284 
¥ecisi⁄
 = ()
	`gëI¡Arg
(
pArgLi°
);

286 
¥ecisi⁄
 = 
	`va_¨g
(
≠
,);

288 
c
 = *++
fmt
;

289 if–
¥ecisi⁄
<0 ){

290 
¥ecisi⁄
 =Örecision >= -2147483647 ? -precision : -1;

293 
px
 = 0;

294  
c
>='0' && c<='9' ){

295 
px
 =Öx*10 + 
c
 - '0';

296 
c
 = *++
fmt
;

298 
	`ã°ˇ£
–
px
>0x7fffffff );

299 
¥ecisi⁄
 = 
px
 & 0x7fffffff;

302 
¥ecisi⁄
 = -1;

304 
	`as£π
–
¥ecisi⁄
>=(-1) );

305 #ifde‡
SQLITE_PRINTF_PRECISION_LIMIT


306 if–
¥ecisi⁄
>
SQLITE_PRINTF_PRECISION_LIMIT
 ){

307 
¥ecisi⁄
 = 
SQLITE_PRINTF_PRECISION_LIMIT
;

313 if–
c
=='l' ){

314 
Êag_l⁄g
 = 1;

315 
c
 = *++
fmt
;

316 if–
c
=='l' ){

317 
Êag_l⁄gl⁄g
 = 1;

318 
c
 = *++
fmt
;

320 
Êag_l⁄gl⁄g
 = 0;

323 
Êag_l⁄g
 = 
Êag_l⁄gl⁄g
 = 0;

326 
öf›
 = &
fmtöfo
[0];

327 
xty≥
 = 
ëINVALID
;

328 
idx
=0; idx<
	`AºaySize
(
fmtöfo
); idx++){

329 if–
c
==
fmtöfo
[
idx
].
fmây≥
 ){

330 
öf›
 = &
fmtöfo
[
idx
];

331 if–
u£I¡în
 || (
öf›
->
Êags
 & 
FLAG_INTERN
)==0 ){

332 
xty≥
 = 
öf›
->
ty≥
;

361  
xty≥
 ){

362 
ëPOINTER
:

363 
Êag_l⁄gl⁄g
 = (*)==(
i64
);

364 
Êag_l⁄g
 = (*)==();

366 
ëORDINAL
:

367 
ëRADIX
:

368 if–
öf›
->
Êags
 & 
FLAG_SIGNED
 ){

369 
i64
 
v
;

370 if–
bArgLi°
 ){

371 
v
 = 
	`gëI¡Arg
(
pArgLi°
);

372 }if–
Êag_l⁄gl⁄g
 ){

373 
v
 = 
	`va_¨g
(
≠
,
i64
);

374 }if–
Êag_l⁄g
 ){

375 
v
 = 
	`va_¨g
(
≠
,);

377 
v
 = 
	`va_¨g
(
≠
,);

379 if–
v
<0 ){

380 if–
v
==
SMALLEST_INT64
 ){

381 
l⁄gvÆue
 = ((
u64
)1)<<63;

383 
l⁄gvÆue
 = -
v
;

385 
¥efix
 = '-';

387 
l⁄gvÆue
 = 
v
;

388 if–
Êag_∂ussign
 ) 
¥efix
 = '+';

389 if–
Êag_bœnksign
 ) 
¥efix
 = ' ';

390 
¥efix
 = 0;

393 if–
bArgLi°
 ){

394 
l⁄gvÆue
 = (
u64
)
	`gëI¡Arg
(
pArgLi°
);

395 }if–
Êag_l⁄gl⁄g
 ){

396 
l⁄gvÆue
 = 
	`va_¨g
(
≠
,
u64
);

397 }if–
Êag_l⁄g
 ){

398 
l⁄gvÆue
 = 
	`va_¨g
(
≠
,);

400 
l⁄gvÆue
 = 
	`va_¨g
(
≠
,);

402 
¥efix
 = 0;

404 if–
l⁄gvÆue
==0 ) 
Êag_Æã∫©ef‹m
 = 0;

405 if–
Êag_zî›ad
 && 
¥ecisi⁄
<
width
-(
¥efix
!=0) ){

406 
¥ecisi⁄
 = 
width
-(
¥efix
!=0);

408 if–
¥ecisi⁄
<
ëBUFSIZE
-10 ){

409 
nOut
 = 
ëBUFSIZE
;

410 
zOut
 = 
buf
;

412 
nOut
 = 
¥ecisi⁄
 + 10;

413 
zOut
 = 
zExåa
 = 
	`sqlôe3MÆloc
–
nOut
 );

414 if–
zOut
==0 ){

415 
	`£tSåAccumEº‹
(
pAccum
, 
STRACCUM_NOMEM
);

419 
buÂt
 = &
zOut
[
nOut
-1];

420 if–
xty≥
==
ëORDINAL
 ){

421 c⁄° 
zOrd
[] = "thstndrd";

422 
x
 = ()(
l⁄gvÆue
 % 10);

423 if–
x
>=4 || (
l⁄gvÆue
/10)%10==1 ){

424 
x
 = 0;

426 *(--
buÂt
Ë
zOrd
[
x
*2+1];

427 *(--
buÂt
Ë
zOrd
[
x
*2];

430 c⁄° *
c£t
 = &
aDigôs
[
öf›
->
ch¨£t
];

431 
u8
 
ba£
 = 
öf›
->base;

433 *(--
buÂt
Ë
c£t
[
l⁄gvÆue
%
ba£
];

434 
l⁄gvÆue
 =Ü⁄gvÆue/
ba£
;

435 } 
l⁄gvÆue
>0 );

437 
Àngth
 = ()(&
zOut
[
nOut
-1]-
buÂt
);

438 
idx
=
¥ecisi⁄
-
Àngth
; idx>0; idx--){

439 *(--
buÂt
) = '0';

441 if–
¥efix
 ) *(--
buÂt
) =Örefix;

442 if–
Êag_Æã∫©ef‹m
 && 
öf›
->
¥efix
 ){

443 c⁄° *
¥e
;

444 
x
;

445 
¥e
 = &
aPªfix
[
öf›
->
¥efix
];

446 ; (
x
=(*
¥e
))!=0;Öª++Ë*(--
buÂt
) = x;

448 
Àngth
 = ()(&
zOut
[
nOut
-1]-
buÂt
);

450 
ëFLOAT
:

451 
ëEXP
:

452 
ëGENERIC
:

453 if–
bArgLi°
 ){

454 
ªÆvÆue
 = 
	`gëDoubÀArg
(
pArgLi°
);

456 
ªÆvÆue
 = 
	`va_¨g
(
≠
,);

458 #ifde‡
SQLITE_OMIT_FLOATING_POINT


459 
Àngth
 = 0;

461 if–
¥ecisi⁄
<0 )Örecision = 6;

462 if–
ªÆvÆue
<0.0 ){

463 
ªÆvÆue
 = -realvalue;

464 
¥efix
 = '-';

466 if–
Êag_∂ussign
 ) 
¥efix
 = '+';

467 if–
Êag_bœnksign
 ) 
¥efix
 = ' ';

468 
¥efix
 = 0;

470 if–
xty≥
==
ëGENERIC
 && 
¥ecisi⁄
>0 )Örecision--;

471 
	`ã°ˇ£
–
¥ecisi⁄
>0xfff );

472 
idx
=
¥ecisi⁄
&0xfff, 
roundî
=0.5; idx>0; idx--,Ñounder*=0.1){}

473 if–
xty≥
==
ëFLOAT
 ) 
ªÆvÆue
 +
roundî
;

475 
exp
 = 0;

476 if–
	`sqlôe3IsNaN
(()
ªÆvÆue
) ){

477 
buÂt
 = "NaN";

478 
Àngth
 = 3;

481 if–
ªÆvÆue
>0.0 ){

482 
LONGDOUBLE_TYPE
 
sˇÀ
 = 1.0;

483  
ªÆvÆue
>=1e100*
sˇÀ
 && 
exp
<=350 ){ scale *= 1e100;exp+=100;}

484  
ªÆvÆue
>=1e10*
sˇÀ
 && 
exp
<=350 ){ scale *= 1e10;Éxp+=10; }

485  
ªÆvÆue
>=10.0*
sˇÀ
 && 
exp
<=350 ){ scale *= 10.0;Éxp++; }

486 
ªÆvÆue
 /
sˇÀ
;

487  
ªÆvÆue
<1e-8 ){ÑólvÆuê*1e8; 
exp
-=8; }

488  
ªÆvÆue
<1.0 ){ÑólvÆuê*10.0; 
exp
--; }

489 if–
exp
>350 ){

490 
buÂt
 = 
buf
;

491 
buf
[0] = 
¥efix
;

492 
	`mem˝y
(
buf
+(
¥efix
!=0),"Inf",4);

493 
Àngth
 = 3+(
¥efix
!=0);

497 
buÂt
 = 
buf
;

502 if–
xty≥
!=
ëFLOAT
 ){

503 
ªÆvÆue
 +
roundî
;

504 if–
ªÆvÆue
>=10.0 ){ÑólvÆuê*0.1; 
exp
++; }

506 if–
xty≥
==
ëGENERIC
 ){

507 
Êag_πz
 = !
Êag_Æã∫©ef‹m
;

508 if–
exp
<-4 ||Éxp>
¥ecisi⁄
 ){

509 
xty≥
 = 
ëEXP
;

511 
¥ecisi⁄
 =Öªcisi⁄ - 
exp
;

512 
xty≥
 = 
ëFLOAT
;

515 
Êag_πz
 = 
Êag_Ætf‹m2
;

517 if–
xty≥
==
ëEXP
 ){

518 
e2
 = 0;

520 
e2
 = 
exp
;

522 if–
	`MAX
(
e2
,0)+(
i64
)
¥ecisi⁄
+(i64)
width
 > 
ëBUFSIZE
 - 15 ){

523 
buÂt
 = 
zExåa


524 
	`sqlôe3MÆloc
–
	`MAX
(
e2
,0)+(
i64
)
¥ecisi⁄
+(i64)
width
+15 );

525 if–
buÂt
==0 ){

526 
	`£tSåAccumEº‹
(
pAccum
, 
STRACCUM_NOMEM
);

530 
zOut
 = 
buÂt
;

531 
nsd
 = 16 + 
Êag_Ætf‹m2
*10;

532 
Êag_dp
 = (
¥ecisi⁄
>0 ?1:0Ë| 
Êag_Æã∫©ef‹m
 | 
Êag_Ætf‹m2
;

534 if–
¥efix
 ){

535 *(
buÂt
++Ë
¥efix
;

538 if–
e2
<0 ){

539 *(
buÂt
++) = '0';

541 ; 
e2
>=0;É2--){

542 *(
buÂt
++Ë
	`ë_gëdigô
(&
ªÆvÆue
,&
nsd
);

546 if–
Êag_dp
 ){

547 *(
buÂt
++) = '.';

551 
e2
++;É2<0; 
¥ecisi⁄
--,É2++){

552 
	`as£π
–
¥ecisi⁄
>0 );

553 *(
buÂt
++) = '0';

556  (
¥ecisi⁄
--)>0 ){

557 *(
buÂt
++Ë
	`ë_gëdigô
(&
ªÆvÆue
,&
nsd
);

560 if–
Êag_πz
 && 
Êag_dp
 ){

561  
buÂt
[-1]=='0' ) *(--bufpt) = 0;

562 
	`as£π
–
buÂt
>
zOut
 );

563 if–
buÂt
[-1]=='.' ){

564 if–
Êag_Ætf‹m2
 ){

565 *(
buÂt
++) = '0';

567 *(--
buÂt
) = 0;

572 if–
xty≥
==
ëEXP
 ){

573 *(
buÂt
++Ë
aDigôs
[
öf›
->
ch¨£t
];

574 if–
exp
<0 ){

575 *(
buÂt
++Ë'-'; 
exp
 = -exp;

577 *(
buÂt
++) = '+';

579 if–
exp
>=100 ){

580 *(
buÂt
++Ë()((
exp
/100)+'0');

581 
exp
 %= 100;

583 *(
buÂt
++Ë()(
exp
/10+'0');

584 *(
buÂt
++Ë()(
exp
%10+'0');

586 *
buÂt
 = 0;

591 
Àngth
 = ()(
buÂt
-
zOut
);

592 
buÂt
 = 
zOut
;

596 if–
Êag_zî›ad
 && !
Êag_À·ju°ify
 && 
Àngth
 < 
width
){

597 
i
;

598 
nPad
 = 
width
 - 
Àngth
;

599 
i
=
width
; i>=
nPad
; i--){

600 
buÂt
[
i
] = buÂt[i-
nPad
];

602 
i
 = 
¥efix
!=0;

603  
nPad
-- ) 
buÂt
[
i
++] = '0';

604 
Àngth
 = 
width
;

608 
ëSIZE
:

609 if–!
bArgLi°
 ){

610 *(
	`va_¨g
(
≠
,*)Ë
pAccum
->
nCh¨
;

612 
Àngth
 = 
width
 = 0;

614 
ëPERCENT
:

615 
buf
[0] = '%';

616 
buÂt
 = 
buf
;

617 
Àngth
 = 1;

619 
ëCHARX
:

620 if–
bArgLi°
 ){

621 
buÂt
 = 
	`gëTextArg
(
pArgLi°
);

622 
c
 = 
buÂt
 ? bufpt[0] : 0;

624 
c
 = 
	`va_¨g
(
≠
,);

626 if–
¥ecisi⁄
>1 ){

627 
width
 -
¥ecisi⁄
-1;

628 if–
width
>1 && !
Êag_À·ju°ify
 ){

629 
	`sqlôe3AµídCh¨
(
pAccum
, 
width
-1, ' ');

630 
width
 = 0;

632 
	`sqlôe3AµídCh¨
(
pAccum
, 
¥ecisi⁄
-1, 
c
);

634 
Àngth
 = 1;

635 
buf
[0] = 
c
;

636 
buÂt
 = 
buf
;

638 
ëSTRING
:

639 
ëDYNSTRING
:

640 if–
bArgLi°
 ){

641 
buÂt
 = 
	`gëTextArg
(
pArgLi°
);

642 
xty≥
 = 
ëSTRING
;

644 
buÂt
 = 
	`va_¨g
(
≠
,*);

646 if–
buÂt
==0 ){

647 
buÂt
 = "";

648 }if–
xty≥
==
ëDYNSTRING
 ){

649 
zExåa
 = 
buÂt
;

651 if–
¥ecisi⁄
>=0 ){

652 
Àngth
=0;Üígth<
¥ecisi⁄
 && 
buÂt
[length];Üength++){}

654 
Àngth
 = 
	`sqlôe3SåÀn30
(
buÂt
);

657 
ëSQLESCAPE
:

658 
ëSQLESCAPE2
:

659 
ëSQLESCAPE3
: {

660 
i
, 
j
, 
k
, 
n
, 
i¢uŒ
;

661 
√edQuŸe
;

662 
ch
;

663 
q
 = ((
xty≥
==
ëSQLESCAPE3
)?'"':'\'');

664 *
esˇrg
;

666 if–
bArgLi°
 ){

667 
esˇrg
 = 
	`gëTextArg
(
pArgLi°
);

669 
esˇrg
 = 
	`va_¨g
(
≠
,*);

671 
i¢uŒ
 = 
esˇrg
==0;

672 if–
i¢uŒ
 ) 
esˇrg
 = (
xty≥
==
ëSQLESCAPE2
 ? "NULL" : "(NULL)");

673 
k
 = 
¥ecisi⁄
;

674 
i
=
n
=0; 
k
!=0 && (
ch
=
esˇrg
[i])!=0; i++, k--){

675 if–
ch
==
q
 ) 
n
++;

677 
√edQuŸe
 = !
i¢uŒ
 && 
xty≥
==
ëSQLESCAPE2
;

678 
n
 +
i
 + 3;

679 if–
n
>
ëBUFSIZE
 ){

680 
buÂt
 = 
zExåa
 = 
	`sqlôe3MÆloc
–
n
 );

681 if–
buÂt
==0 ){

682 
	`£tSåAccumEº‹
(
pAccum
, 
STRACCUM_NOMEM
);

686 
buÂt
 = 
buf
;

688 
j
 = 0;

689 if–
√edQuŸe
 ) 
buÂt
[
j
++] = 
q
;

690 
k
 = 
i
;

691 
i
=0; i<
k
; i++){

692 
buÂt
[
j
++] = 
ch
 = 
esˇrg
[
i
];

693 if–
ch
==
q
 ) 
buÂt
[
j
++] = ch;

695 if–
√edQuŸe
 ) 
buÂt
[
j
++] = 
q
;

696 
buÂt
[
j
] = 0;

697 
Àngth
 = 
j
;

703 
ëTOKEN
: {

704 
Tokí
 *
pTokí
 = 
	`va_¨g
(
≠
, Token*);

705 
	`as£π
–
bArgLi°
==0 );

706 if–
pTokí
 &&ÖTokí->
n
 ){

707 
	`sqlôe3SåAccumAµíd
(
pAccum
, (c⁄° *)
pTokí
->
z
,ÖTokí->
n
);

709 
Àngth
 = 
width
 = 0;

712 
ëSRCLIST
: {

713 
SrcLi°
 *
pSrc
 = 
	`va_¨g
(
≠
, SrcList*);

714 
k
 = 
	`va_¨g
(
≠
, );

715 
SrcLi°_ôem
 *
pIãm
 = &
pSrc
->
a
[
k
];

716 
	`as£π
–
bArgLi°
==0 );

717 
	`as£π
–
k
>=0 && k<
pSrc
->
nSrc
 );

718 if–
pIãm
->
zD©aba£
 ){

719 
	`sqlôe3SåAccumAµídAŒ
(
pAccum
, 
pIãm
->
zD©aba£
);

720 
	`sqlôe3SåAccumAµíd
(
pAccum
, ".", 1);

722 
	`sqlôe3SåAccumAµídAŒ
(
pAccum
, 
pIãm
->
zName
);

723 
Àngth
 = 
width
 = 0;

727 
	`as£π
–
xty≥
==
ëINVALID
 );

736 
width
 -
Àngth
;

737 if–
width
>0 && !
Êag_À·ju°ify
 ) 
	`sqlôe3AµídCh¨
(
pAccum
, width, ' ');

738 
	`sqlôe3SåAccumAµíd
(
pAccum
, 
buÂt
, 
Àngth
);

739 if–
width
>0 && 
Êag_À·ju°ify
 ) 
	`sqlôe3AµídCh¨
(
pAccum
, width, ' ');

741 if–
zExåa
 ){

742 
	`sqlôe3DbFªe
(
pAccum
->
db
, 
zExåa
);

743 
zExåa
 = 0;

746 
	}
}

755 
	$sqlôe3SåAccumE∆¨ge
(
SåAccum
 *
p
, 
N
){

756 *
zNew
;

757 
	`as£π
–
p
->
nCh¨
+(
i64
)
N
 >p->
nAŒoc
 );

758 if–
p
->
accEº‹
 ){

759 
	`ã°ˇ£
(
p
->
accEº‹
==
STRACCUM_TOOBIG
);

760 
	`ã°ˇ£
(
p
->
accEº‹
==
STRACCUM_NOMEM
);

763 if–
p
->
mxAŒoc
==0 ){

764 
N
 = 
p
->
nAŒoc
 -Ö->
nCh¨
 - 1;

765 
	`£tSåAccumEº‹
(
p
, 
STRACCUM_TOOBIG
);

766  
N
;

768 *
zOld
 = 
	`isMÆlo˚d
(
p
Ë?Ö->
zText
 : 0;

769 
i64
 
szNew
 = 
p
->
nCh¨
;

770 
	`as£π
–(
p
->
zText
==0 ||Ö->zText=ı->
zBa£
)==!
	`isMÆlo˚d
(p) );

771 
szNew
 +
N
 + 1;

772 if–
szNew
+
p
->
nCh¨
<ı->
mxAŒoc
 ){

775 
szNew
 +
p
->
nCh¨
;

777 if–
szNew
 > 
p
->
mxAŒoc
 ){

778 
	`sqlôe3SåAccumRe£t
(
p
);

779 
	`£tSåAccumEº‹
(
p
, 
STRACCUM_TOOBIG
);

782 
p
->
nAŒoc
 = ()
szNew
;

784 if–
p
->
db
 ){

785 
zNew
 = 
	`sqlôe3DbRóŒoc
(
p
->
db
, 
zOld
,Ö->
nAŒoc
);

787 
zNew
 = 
	`sqlôe3_ªÆloc64
(
zOld
, 
p
->
nAŒoc
);

789 if–
zNew
 ){

790 
	`as£π
–
p
->
zText
!=0 ||Ö->
nCh¨
==0 );

791 if–!
	`isMÆlo˚d
(
p
Ë&&Ö->
nCh¨
>0 ) 
	`mem˝y
(
zNew
,Ö->
zText
,Ö->nChar);

792 
p
->
zText
 = 
zNew
;

793 
p
->
nAŒoc
 = 
	`sqlôe3DbMÆlocSize
’->
db
, 
zNew
);

794 
p
->
¥ötfFœgs
 |
SQLITE_PRINTF_MALLOCED
;

796 
	`sqlôe3SåAccumRe£t
(
p
);

797 
	`£tSåAccumEº‹
(
p
, 
STRACCUM_NOMEM
);

801  
N
;

802 
	}
}

807 
	$sqlôe3AµídCh¨
(
SåAccum
 *
p
, 
N
, 
c
){

808 
	`ã°ˇ£
–
p
->
nCh¨
 + (
i64
)
N
 > 0x7fffffff );

809 if–
p
->
nCh¨
+(
i64
)
N
 >p->
nAŒoc
 && (N = 
	`sqlôe3SåAccumE∆¨ge
(p, N))<=0 ){

812 
	`as£π
–(
p
->
zText
=ı->
zBa£
)==!
	`isMÆlo˚d
(p) );

813  (
N
--)>0 ) 
p
->
zText
[p->
nCh¨
++] = 
c
;

814 
	}
}

824 
SQLITE_NOINLINE
 
	$íœrgeAndAµíd
(
SåAccum
 *
p
, c⁄° *
z
, 
N
){

825 
N
 = 
	`sqlôe3SåAccumE∆¨ge
(
p
, N);

826 if–
N
>0 ){

827 
	`mem˝y
(&
p
->
zText
[p->
nCh¨
], 
z
, 
N
);

828 
p
->
nCh¨
 +
N
;

830 
	`as£π
–(
p
->
zText
==0 ||Ö->zText=ı->
zBa£
)==!
	`isMÆlo˚d
(p) );

831 
	}
}

837 
	$sqlôe3SåAccumAµíd
(
SåAccum
 *
p
, c⁄° *
z
, 
N
){

838 
	`as£π
–
z
!=0 || 
N
==0 );

839 
	`as£π
–
p
->
zText
!=0 ||Ö->
nCh¨
==0 ||Ö->
accEº‹
 );

840 
	`as£π
–
N
>=0 );

841 
	`as£π
–
p
->
accEº‹
==0 ||Ö->
nAŒoc
==0 );

842 if–
p
->
nCh¨
+
N
 >p->
nAŒoc
 ){

843 
	`íœrgeAndAµíd
(
p
,
z
,
N
);

845 
	`as£π
–
p
->
zText
 );

846 
p
->
nCh¨
 +
N
;

847 
	`mem˝y
(&
p
->
zText
[p->
nCh¨
-
N
], 
z
, N);

849 
	}
}

854 
	$sqlôe3SåAccumAµídAŒ
(
SåAccum
 *
p
, c⁄° *
z
){

855 
	`sqlôe3SåAccumAµíd
(
p
, 
z
, 
	`sqlôe3SåÀn30
(z));

856 
	}
}

864 *
	$sqlôe3SåAccumFöish
(
SåAccum
 *
p
){

865 if–
p
->
zText
 ){

866 
	`as£π
–(
p
->
zText
=ı->
zBa£
)==!
	`isMÆlo˚d
(p) );

867 
p
->
zText
[p->
nCh¨
] = 0;

868 if–
p
->
mxAŒoc
>0 && !
	`isMÆlo˚d
(p) ){

869 
p
->
zText
 = 
	`sqlôe3DbMÆlocRaw
’->
db
,Ö->
nCh¨
+1 );

870 if–
p
->
zText
 ){

871 
	`mem˝y
(
p
->
zText
,Ö->
zBa£
,Ö->
nCh¨
+1);

872 
p
->
¥ötfFœgs
 |
SQLITE_PRINTF_MALLOCED
;

874 
	`£tSåAccumEº‹
(
p
, 
STRACCUM_NOMEM
);

878  
p
->
zText
;

879 
	}
}

884 
	$sqlôe3SåAccumRe£t
(
SåAccum
 *
p
){

885 
	`as£π
–(
p
->
zText
==0 ||Ö->zText=ı->
zBa£
)==!
	`isMÆlo˚d
(p) );

886 if–
	`isMÆlo˚d
(
p
) ){

887 
	`sqlôe3DbFªe
(
p
->
db
,Ö->
zText
);

888 
p
->
¥ötfFœgs
 &~
SQLITE_PRINTF_MALLOCED
;

890 
p
->
zText
 = 0;

891 
	}
}

907 
	$sqlôe3SåAccumInô
(
SåAccum
 *
p
, 
sqlôe3
 *
db
, *
zBa£
, 
n
, 
mx
){

908 
p
->
zText
 =Ö->
zBa£
 = zBase;

909 
p
->
db
 = db;

910 
p
->
nCh¨
 = 0;

911 
p
->
nAŒoc
 = 
n
;

912 
p
->
mxAŒoc
 = 
mx
;

913 
p
->
accEº‹
 = 0;

914 
p
->
¥ötfFœgs
 = 0;

915 
	}
}

921 *
	$sqlôe3VMPrötf
(
sqlôe3
 *
db
, c⁄° *
zF‹m©
, 
va_li°
 
≠
){

922 *
z
;

923 
zBa£
[
SQLITE_PRINT_BUF_SIZE
];

924 
SåAccum
 
acc
;

925 
	`as£π
–
db
!=0 );

926 
	`sqlôe3SåAccumInô
(&
acc
, 
db
, 
zBa£
, (zBase),

927 
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
]);

928 
acc
.
¥ötfFœgs
 = 
SQLITE_PRINTF_INTERNAL
;

929 
	`sqlôe3VXPrötf
(&
acc
, 
zF‹m©
, 
≠
);

930 
z
 = 
	`sqlôe3SåAccumFöish
(&
acc
);

931 if–
acc
.
accEº‹
==
STRACCUM_NOMEM
 ){

932 
	`sqlôe3OomFau…
(
db
);

934  
z
;

935 
	}
}

941 *
	$sqlôe3MPrötf
(
sqlôe3
 *
db
, c⁄° *
zF‹m©
, ...){

942 
va_li°
 
≠
;

943 *
z
;

944 
	`va_°¨t
(
≠
, 
zF‹m©
);

945 
z
 = 
	`sqlôe3VMPrötf
(
db
, 
zF‹m©
, 
≠
);

946 
	`va_íd
(
≠
);

947  
z
;

948 
	}
}

954 *
	$sqlôe3_vm¥ötf
(c⁄° *
zF‹m©
, 
va_li°
 
≠
){

955 *
z
;

956 
zBa£
[
SQLITE_PRINT_BUF_SIZE
];

957 
SåAccum
 
acc
;

959 #ifde‡
SQLITE_ENABLE_API_ARMOR


960 if–
zF‹m©
==0 ){

961 ()
SQLITE_MISUSE_BKPT
;

965 #i‚de‡
SQLITE_OMIT_AUTOINIT


966 if–
	`sqlôe3_öôülize
() )  0;

968 
	`sqlôe3SåAccumInô
(&
acc
, 0, 
zBa£
, (zBa£), 
SQLITE_MAX_LENGTH
);

969 
	`sqlôe3VXPrötf
(&
acc
, 
zF‹m©
, 
≠
);

970 
z
 = 
	`sqlôe3SåAccumFöish
(&
acc
);

971  
z
;

972 
	}
}

978 *
	$sqlôe3_m¥ötf
(c⁄° *
zF‹m©
, ...){

979 
va_li°
 
≠
;

980 *
z
;

981 #i‚de‡
SQLITE_OMIT_AUTOINIT


982 if–
	`sqlôe3_öôülize
() )  0;

984 
	`va_°¨t
(
≠
, 
zF‹m©
);

985 
z
 = 
	`sqlôe3_vm¥ötf
(
zF‹m©
, 
≠
);

986 
	`va_íd
(
≠
);

987  
z
;

988 
	}
}

1003 *
	$sqlôe3_v¢¥ötf
(
n
, *
zBuf
, c⁄° *
zF‹m©
, 
va_li°
 
≠
){

1004 
SåAccum
 
acc
;

1005 if–
n
<=0 )  
zBuf
;

1006 #ifde‡
SQLITE_ENABLE_API_ARMOR


1007 if–
zBuf
==0 || 
zF‹m©
==0 ) {

1008 ()
SQLITE_MISUSE_BKPT
;

1009 if–
zBuf
 ) zBuf[0] = 0;

1010  
zBuf
;

1013 
	`sqlôe3SåAccumInô
(&
acc
, 0, 
zBuf
, 
n
, 0);

1014 
	`sqlôe3VXPrötf
(&
acc
, 
zF‹m©
, 
≠
);

1015  
	`sqlôe3SåAccumFöish
(&
acc
);

1016 
	}
}

1017 *
	$sqlôe3_¢¥ötf
(
n
, *
zBuf
, c⁄° *
zF‹m©
, ...){

1018 *
z
;

1019 
va_li°
 
≠
;

1020 
	`va_°¨t
(
≠
,
zF‹m©
);

1021 
z
 = 
	`sqlôe3_v¢¥ötf
(
n
, 
zBuf
, 
zF‹m©
, 
≠
);

1022 
	`va_íd
(
≠
);

1023  
z
;

1024 
	}
}

1040 
	$ªndîLogMsg
(
iEºCode
, c⁄° *
zF‹m©
, 
va_li°
 
≠
){

1041 
SåAccum
 
acc
;

1042 
zMsg
[
SQLITE_PRINT_BUF_SIZE
*3];

1044 
	`sqlôe3SåAccumInô
(&
acc
, 0, 
zMsg
, (zMsg), 0);

1045 
	`sqlôe3VXPrötf
(&
acc
, 
zF‹m©
, 
≠
);

1046 
sqlôe3GlobÆC⁄fig
.
	`xLog
(sqlôe3GlobÆC⁄fig.
pLogArg
, 
iEºCode
,

1047 
	`sqlôe3SåAccumFöish
(&
acc
));

1048 
	}
}

1053 
	$sqlôe3_log
(
iEºCode
, c⁄° *
zF‹m©
, ...){

1054 
va_li°
 
≠
;

1055 if–
sqlôe3GlobÆC⁄fig
.
xLog
 ){

1056 
	`va_°¨t
(
≠
, 
zF‹m©
);

1057 
	`ªndîLogMsg
(
iEºCode
, 
zF‹m©
, 
≠
);

1058 
	`va_íd
(
≠
);

1060 
	}
}

1062 #i‡
deföed
(
SQLITE_DEBUG
Ë|| deföed(
SQLITE_HAVE_OS_TRACE
)

1068 
	$sqlôe3DebugPrötf
(c⁄° *
zF‹m©
, ...){

1069 
va_li°
 
≠
;

1070 
SåAccum
 
acc
;

1071 
zBuf
[500];

1072 
	`sqlôe3SåAccumInô
(&
acc
, 0, 
zBuf
, (zBuf), 0);

1073 
	`va_°¨t
(
≠
,
zF‹m©
);

1074 
	`sqlôe3VXPrötf
(&
acc
, 
zF‹m©
, 
≠
);

1075 
	`va_íd
(
≠
);

1076 
	`sqlôe3SåAccumFöish
(&
acc
);

1077 
	`Ârötf
(
°dout
,"%s", 
zBuf
);

1078 
	`fÊush
(
°dout
);

1079 
	}
}

1087 
	$sqlôe3XPrötf
(
SåAccum
 *
p
, c⁄° *
zF‹m©
, ...){

1088 
va_li°
 
≠
;

1089 
	`va_°¨t
(
≠
,
zF‹m©
);

1090 
	`sqlôe3VXPrötf
(
p
, 
zF‹m©
, 
≠
);

1091 
	`va_íd
(
≠
);

1092 
	}
}

	@random.c

18 
	~"sqlôeI¡.h
"

24 
SQLITE_WSD
 
	ssqlôe3P∫gTy≥
 {

25 
	misInô
;

26 
	mi
, 
	mj
;

27 
	ms
[256];

28 } 
	gsqlôe3P∫g
;

33 
	$sqlôe3_øndom√ss
(
N
, *
pBuf
){

34 
t
;

35 *
zBuf
 = 
pBuf
;

43 #ifde‡
SQLITE_OMIT_WSD


44 
sqlôe3P∫gTy≥
 *
p
 = &
	`GLOBAL
(sqlôe3P∫gTy≥, 
sqlôe3P∫g
);

45 
	#wsdP∫g
 
p
[0]

	)

47 
	#wsdP∫g
 
sqlôe3P∫g


	)

50 #i‡
SQLITE_THREADSAFE


51 
sqlôe3_muãx
 *
muãx
;

54 #i‚de‡
SQLITE_OMIT_AUTOINIT


55 if–
	`sqlôe3_öôülize
() ) ;

58 #i‡
SQLITE_THREADSAFE


59 
muãx
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_STATIC_PRNG
);

62 
	`sqlôe3_muãx_íãr
(
muãx
);

63 if–
N
<=0 || 
pBuf
==0 ){

64 
wsdP∫g
.
isInô
 = 0;

65 
	`sqlôe3_muãx_Àave
(
muãx
);

78 if–!
wsdP∫g
.
isInô
 ){

79 
i
;

80 
k
[256];

81 
wsdP∫g
.
j
 = 0;

82 
wsdP∫g
.
i
 = 0;

83 
	`sqlôe3OsR™dom√ss
(
	`sqlôe3_vfs_föd
(0), 256, 
k
);

84 
i
=0; i<256; i++){

85 
wsdP∫g
.
s
[
i
] = (
u8
)i;

87 
i
=0; i<256; i++){

88 
wsdP∫g
.
j
 +wsdP∫g.
s
[
i
] + 
k
[i];

89 
t
 = 
wsdP∫g
.
s
[wsdP∫g.
j
];

90 
wsdP∫g
.
s
[wsdP∫g.
j
] = wsdP∫g.s[
i
];

91 
wsdP∫g
.
s
[
i
] = 
t
;

93 
wsdP∫g
.
isInô
 = 1;

96 
	`as£π
–
N
>0 );

98 
wsdP∫g
.
i
++;

99 
t
 = 
wsdP∫g
.
s
[wsdP∫g.
i
];

100 
wsdP∫g
.
j
 +
t
;

101 
wsdP∫g
.
s
[wsdP∫g.
i
] = wsdP∫g.s[wsdP∫g.
j
];

102 
wsdP∫g
.
s
[wsdP∫g.
j
] = 
t
;

103 
t
 +
wsdP∫g
.
s
[wsdP∫g.
i
];

104 *(
zBuf
++Ë
wsdP∫g
.
s
[
t
];

105 } --
N
 );

106 
	`sqlôe3_muãx_Àave
(
muãx
);

107 
	}
}

109 #i‚de‡
SQLITE_OMIT_BUILTIN_TEST


119 
SQLITE_WSD
 
sqlôe3P∫gTy≥
 
	gsqlôe3SavedP∫g
;

120 
	$sqlôe3P∫gSaveSèã
(){

121 
	`mem˝y
(

122 &
	`GLOBAL
(
sqlôe3P∫gTy≥
, 
sqlôe3SavedP∫g
),

123 &
	`GLOBAL
(
sqlôe3P∫gTy≥
, 
sqlôe3P∫g
),

124 (
sqlôe3P∫g
)

126 
	}
}

127 
	$sqlôe3P∫gRe°‹eSèã
(){

128 
	`mem˝y
(

129 &
	`GLOBAL
(
sqlôe3P∫gTy≥
, 
sqlôe3P∫g
),

130 &
	`GLOBAL
(
sqlôe3P∫gTy≥
, 
sqlôe3SavedP∫g
),

131 (
sqlôe3P∫g
)

133 
	}
}

	@resolve.c

17 
	~"sqlôeI¡.h
"

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

30 
	$ö¸AggDïth
(
WÆkî
 *
pWÆkî
, 
Ex¥
 *
pEx¥
){

31 if–
pEx¥
->
›
==
TK_AGG_FUNCTION
 )ÖEx¥->
›2
 +
pWÆkî
->
u
.
n
;

32  
WRC_C⁄töue
;

33 
	}
}

34 
	$ö¸AggFun˘i⁄Dïth
(
Ex¥
 *
pEx¥
, 
N
){

35 if–
N
>0 ){

36 
WÆkî
 
w
;

37 
	`mem£t
(&
w
, 0, (w));

38 
w
.
xEx¥CÆlback
 = 
ö¸AggDïth
;

39 
w
.
u
.
n
 = 
N
;

40 
	`sqlôe3WÆkEx¥
(&
w
, 
pEx¥
);

42 
	}
}

63 
	$ªsﬁveAlüs
(

64 
P¨£
 *
pP¨£
,

65 
Ex¥Li°
 *
pELi°
,

66 
iCﬁ
,

67 
Ex¥
 *
pEx¥
,

68 c⁄° *
zTy≥
,

69 
nSubquîy


71 
Ex¥
 *
pOrig
;

72 
Ex¥
 *
pDup
;

73 
sqlôe3
 *
db
;

75 
	`as£π
–
iCﬁ
>=0 && iCﬁ<
pELi°
->
nEx¥
 );

76 
pOrig
 = 
pELi°
->
a
[
iCﬁ
].
pEx¥
;

77 
	`as£π
–
pOrig
!=0 );

78 
db
 = 
pP¨£
->db;

79 
pDup
 = 
	`sqlôe3Ex¥Dup
(
db
, 
pOrig
, 0);

80 if–
pDup
==0 ) ;

81 if–
zTy≥
[0]!='G' ) 
	`ö¸AggFun˘i⁄Dïth
(
pDup
, 
nSubquîy
);

82 if–
pEx¥
->
›
==
TK_COLLATE
 ){

83 
pDup
 = 
	`sqlôe3Ex¥AddCﬁœãSåög
(
pP¨£
,ÖDup, 
pEx¥
->
u
.
zTokí
);

85 
	`Ex¥SëPr›îty
(
pDup
, 
EP_Alüs
);

94 
	`Ex¥SëPr›îty
(
pEx¥
, 
EP_Sètic
);

95 
	`sqlôe3Ex¥Dñëe
(
db
, 
pEx¥
);

96 
	`mem˝y
(
pEx¥
, 
pDup
, (*pExpr));

97 if–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_I¡VÆue
Ë&&ÖEx¥->
u
.
zTokí
!=0 ){

98 
	`as£π
–(
pEx¥
->
Êags
 & (
EP_Redu˚d
|
EP_TokíO∆y
))==0 );

99 
pEx¥
->
u
.
zTokí
 = 
	`sqlôe3DbSåDup
(
db
,ÖExpr->u.zToken);

100 
pEx¥
->
Êags
 |
EP_MemTokí
;

102 
	`sqlôe3DbFªe
(
db
, 
pDup
);

103 
	}
}

112 
	$«meInUsögCœu£
(
IdLi°
 *
pUsög
, c⁄° *
zCﬁ
){

113 if–
pUsög
 ){

114 
k
;

115 
k
=0; k<
pUsög
->
nId
; k++){

116 if–
	`sqlôe3SåICmp
(
pUsög
->
a
[
k
].
zName
, 
zCﬁ
)==0 )  1;

120 
	}
}

129 
	$sqlôe3M©chS∑nName
(

130 c⁄° *
zS∑n
,

131 c⁄° *
zCﬁ
,

132 c⁄° *
zTab
,

133 c⁄° *
zDb


135 
n
;

136 
n
=0; 
	`ALWAYS
(
zS∑n
[n]) && zSpan[n]!='.';Ç++){}

137 if–
zDb
 && (
	`sqlôe3SåNICmp
(
zS∑n
, zDb, 
n
)!=0 || zDb[n]!=0) ){

140 
zS∑n
 +
n
+1;

141 
n
=0; 
	`ALWAYS
(
zS∑n
[n]) && zSpan[n]!='.';Ç++){}

142 if–
zTab
 && (
	`sqlôe3SåNICmp
(
zS∑n
, zTab, 
n
)!=0 || zTab[n]!=0) ){

145 
zS∑n
 +
n
+1;

146 if–
zCﬁ
 && 
	`sqlôe3SåICmp
(
zS∑n
, zCol)!=0 ){

150 
	}
}

179 
	$lookupName
(

180 
P¨£
 *
pP¨£
,

181 c⁄° *
zDb
,

182 c⁄° *
zTab
,

183 c⁄° *
zCﬁ
,

184 
NameC⁄ãxt
 *
pNC
,

185 
Ex¥
 *
pEx¥


187 
i
, 
j
;

188 
˙t
 = 0;

189 
˙tTab
 = 0;

190 
nSubquîy
 = 0;

191 
sqlôe3
 *
db
 = 
pP¨£
->db;

192 
SrcLi°_ôem
 *
pIãm
;

193 
SrcLi°_ôem
 *
pM©ch
 = 0;

194 
NameC⁄ãxt
 *
pT›NC
 = 
pNC
;

195 
Schema
 *
pSchema
 = 0;

196 
isTriggî
 = 0;

197 
TabÀ
 *
pTab
 = 0;

198 
Cﬁumn
 *
pCﬁ
;

200 
	`as£π
–
pNC
 );

201 
	`as£π
–
zCﬁ
 );

202 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_TokíO∆y
|
EP_Redu˚d
) );

205 
pEx¥
->
iTabÀ
 = -1;

206 
pEx¥
->
pTab
 = 0;

207 
	`Ex¥SëVVAPr›îty
(
pEx¥
, 
EP_NoRedu˚
);

213 if–
zDb
 ){

214 
	`ã°ˇ£
–
pNC
->
ncFœgs
 & 
NC_P¨tIdx
 );

215 
	`ã°ˇ£
–
pNC
->
ncFœgs
 & 
NC_IsCheck
 );

216 if–(
pNC
->
ncFœgs
 & (
NC_P¨tIdx
|
NC_IsCheck
))!=0 ){

221 
zDb
 = 0;

223 
i
=0; i<
db
->
nDb
; i++){

224 
	`as£π
–
db
->
aDb
[
i
].
zName
 );

225 if–
	`sqlôe3SåICmp
(
db
->
aDb
[
i
].
zName
,
zDb
)==0 ){

226 
pSchema
 = 
db
->
aDb
[
i
].pSchema;

234  
pNC
 && 
˙t
==0 ){

235 
Ex¥Li°
 *
pELi°
;

236 
SrcLi°
 *
pSrcLi°
 = 
pNC
->pSrcList;

238 if–
pSrcLi°
 ){

239 
i
=0, 
pIãm
=
pSrcLi°
->
a
; i<pSrcLi°->
nSrc
; i++,ÖItem++){

240 
pTab
 = 
pIãm
->pTab;

241 
	`as£π
–
pTab
!=0 &&ÖTab->
zName
!=0 );

242 
	`as£π
–
pTab
->
nCﬁ
>0 );

243 if–
pIãm
->
pSñe˘
 && (pIãm->pSñe˘->
£lFœgs
 & 
SF_Ne°edFrom
)!=0 ){

244 
hô
 = 0;

245 
pELi°
 = 
pIãm
->
pSñe˘
->pEList;

246 
j
=0; j<
pELi°
->
nEx¥
; j++){

247 if–
	`sqlôe3M©chS∑nName
(
pELi°
->
a
[
j
].
zS∑n
, 
zCﬁ
, 
zTab
, 
zDb
) ){

248 
˙t
++;

249 
˙tTab
 = 2;

250 
pM©ch
 = 
pIãm
;

251 
pEx¥
->
iCﬁumn
 = 
j
;

252 
hô
 = 1;

255 if–
hô
 || 
zTab
==0 ) ;

257 if–
zDb
 && 
pTab
->
pSchema
!=pSchema ){

260 if–
zTab
 ){

261 c⁄° *
zTabName
 = 
pIãm
->
zAlüs
 ?ÖIãm->zAlü†: 
pTab
->
zName
;

262 
	`as£π
–
zTabName
!=0 );

263 if–
	`sqlôe3SåICmp
(
zTabName
, 
zTab
)!=0 ){

267 if–0==(
˙tTab
++) ){

268 
pM©ch
 = 
pIãm
;

270 
j
=0, 
pCﬁ
=
pTab
->
aCﬁ
; j<pTab->
nCﬁ
; j++,ÖCol++){

271 if–
	`sqlôe3SåICmp
(
pCﬁ
->
zName
, 
zCﬁ
)==0 ){

276 if–
˙t
==1 ){

277 if–
pIãm
->
fg
.
joöty≥
 & 
JT_NATURAL
 ) ;

278 if–
	`«meInUsögCœu£
(
pIãm
->
pUsög
, 
zCﬁ
) ) ;

280 
˙t
++;

281 
pM©ch
 = 
pIãm
;

283 
pEx¥
->
iCﬁumn
 = 
j
==
pTab
->
iPKey
 ? -1 : (
i16
)j;

288 if–
pM©ch
 ){

289 
pEx¥
->
iTabÀ
 = 
pM©ch
->
iCurs‹
;

290 
pEx¥
->
pTab
 = 
pM©ch
->pTab;

292 
	`as£π
–(
pM©ch
->
fg
.
joöty≥
 & 
JT_RIGHT
)==0 );

293 if–(
pM©ch
->
fg
.
joöty≥
 & 
JT_LEFT
)!=0 ){

294 
	`Ex¥SëPr›îty
(
pEx¥
, 
EP_C™BeNuŒ
);

296 
pSchema
 = 
pEx¥
->
pTab
->pSchema;

300 #i‚de‡
SQLITE_OMIT_TRIGGER


304 if–
zDb
==0 && 
zTab
!=0 && 
˙tTab
==0 && 
pP¨£
->
pTriggîTab
!=0 ){

305 
›
 = 
pP¨£
->
eTriggîOp
;

306 
	`as£π
–
›
==
TK_DELETE
 || op==
TK_UPDATE
 || op==
TK_INSERT
 );

307 if–
›
!=
TK_DELETE
 && 
	`sqlôe3SåICmp
("√w",
zTab
) == 0 ){

308 
pEx¥
->
iTabÀ
 = 1;

309 
pTab
 = 
pP¨£
->
pTriggîTab
;

310 }if–
›
!=
TK_INSERT
 && 
	`sqlôe3SåICmp
("ﬁd",
zTab
)==0 ){

311 
pEx¥
->
iTabÀ
 = 0;

312 
pTab
 = 
pP¨£
->
pTriggîTab
;

314 
pTab
 = 0;

317 if–
pTab
 ){

318 
iCﬁ
;

319 
pSchema
 = 
pTab
->pSchema;

320 
˙tTab
++;

321 
iCﬁ
=0, 
pCﬁ
=
pTab
->
aCﬁ
; iCﬁ<pTab->
nCﬁ
; iCol++,ÖCol++){

322 if–
	`sqlôe3SåICmp
(
pCﬁ
->
zName
, 
zCﬁ
)==0 ){

323 if–
iCﬁ
==
pTab
->
iPKey
 ){

324 
iCﬁ
 = -1;

329 if–
iCﬁ
>=
pTab
->
nCﬁ
 && 
	`sqlôe3IsRowid
(
zCﬁ
Ë&& 
	`VisibÀRowid
(pTab) ){

331 
iCﬁ
 = -1;

333 if–
iCﬁ
<
pTab
->
nCﬁ
 ){

334 
˙t
++;

335 if–
iCﬁ
<0 ){

336 
pEx¥
->
afföôy
 = 
SQLITE_AFF_INTEGER
;

337 }if–
pEx¥
->
iTabÀ
==0 ){

338 
	`ã°ˇ£
–
iCﬁ
==31 );

339 
	`ã°ˇ£
–
iCﬁ
==32 );

340 
pP¨£
->
ﬁdmask
 |(
iCﬁ
>=32 ? 0xfffffff‡: (((
u32
)1)<<iCol));

342 
	`ã°ˇ£
–
iCﬁ
==31 );

343 
	`ã°ˇ£
–
iCﬁ
==32 );

344 
pP¨£
->
√wmask
 |(
iCﬁ
>=32 ? 0xfffffff‡: (((
u32
)1)<<iCol));

346 
pEx¥
->
iCﬁumn
 = (
i16
)
iCﬁ
;

347 
pEx¥
->
pTab
 =ÖTab;

348 
isTriggî
 = 1;

357 if–
˙t
==0

358 && 
˙tTab
==1

359 && 
pM©ch


360 && (
pNC
->
ncFœgs
 & 
NC_IdxEx¥
)==0

361 && 
	`sqlôe3IsRowid
(
zCﬁ
)

362 && 
	`VisibÀRowid
(
pM©ch
->
pTab
)

364 
˙t
 = 1;

365 
pEx¥
->
iCﬁumn
 = -1;

366 
pEx¥
->
afföôy
 = 
SQLITE_AFF_INTEGER
;

387 if–(
pELi°
 = 
pNC
->pEList)!=0

388 && 
zTab
==0

389 && 
˙t
==0

391 
j
=0; j<
pELi°
->
nEx¥
; j++){

392 *
zAs
 = 
pELi°
->
a
[
j
].
zName
;

393 if–
zAs
!=0 && 
	`sqlôe3SåICmp
(zAs, 
zCﬁ
)==0 ){

394 
Ex¥
 *
pOrig
;

395 
	`as£π
–
pEx¥
->
pLe·
==0 &&ÖEx¥->
pRight
==0 );

396 
	`as£π
–
pEx¥
->
x
.
pLi°
==0 );

397 
	`as£π
–
pEx¥
->
x
.
pSñe˘
==0 );

398 
pOrig
 = 
pELi°
->
a
[
j
].
pEx¥
;

399 if–(
pNC
->
ncFœgs
&
NC_AŒowAgg
)==0 && 
	`Ex¥HasPr›îty
(
pOrig
, 
EP_Agg
) ){

400 
	`sqlôe3Eº‹Msg
(
pP¨£
, "misu£ o‡Æü£dággªg©ê%s", 
zAs
);

401  
WRC_Ab‹t
;

403 
	`ªsﬁveAlüs
(
pP¨£
, 
pELi°
, 
j
, 
pEx¥
, "", 
nSubquîy
);

404 
˙t
 = 1;

405 
pM©ch
 = 0;

406 
	`as£π
–
zTab
==0 && 
zDb
==0 );

407 
looku≤ame_íd
;

415 if–
˙t
==0 ){

416 
pNC
 =ÖNC->
pNext
;

417 
nSubquîy
++;

431 if–
˙t
==0 && 
zTab
==0 && 
	`Ex¥HasPr›îty
(
pEx¥
,
EP_DblQuŸed
) ){

432 
pEx¥
->
›
 = 
TK_STRING
;

433 
pEx¥
->
pTab
 = 0;

434  
WRC_Pru√
;

441 if–
˙t
!=1 ){

442 c⁄° *
zEº
;

443 
zEº
 = 
˙t
==0 ? "no such column" : "ambiguous columnÇame";

444 if–
zDb
 ){

445 
	`sqlôe3Eº‹Msg
(
pP¨£
, "%s: %s.%s.%s", 
zEº
, 
zDb
, 
zTab
, 
zCﬁ
);

446 }if–
zTab
 ){

447 
	`sqlôe3Eº‹Msg
(
pP¨£
, "%s: %s.%s", 
zEº
, 
zTab
, 
zCﬁ
);

449 
	`sqlôe3Eº‹Msg
(
pP¨£
, "%s: %s", 
zEº
, 
zCﬁ
);

451 
pP¨£
->
checkSchema
 = 1;

452 
pT›NC
->
nEº
++;

461 if–
pEx¥
->
iCﬁumn
>=0 && 
pM©ch
!=0 ){

462 
n
 = 
pEx¥
->
iCﬁumn
;

463 
	`ã°ˇ£
–
n
==
BMS
-1 );

464 if–
n
>=
BMS
 ){

465 
n
 = 
BMS
-1;

467 
	`as£π
–
pM©ch
->
iCurs‹
==
pEx¥
->
iTabÀ
 );

468 
pM©ch
->
cﬁU£d
 |((
Bômask
)1)<<
n
;

473 
	`sqlôe3Ex¥Dñëe
(
db
, 
pEx¥
->
pLe·
);

474 
pEx¥
->
pLe·
 = 0;

475 
	`sqlôe3Ex¥Dñëe
(
db
, 
pEx¥
->
pRight
);

476 
pEx¥
->
pRight
 = 0;

477 
pEx¥
->
›
 = (
isTriggî
 ? 
TK_TRIGGER
 : 
TK_COLUMN
);

478 
looku≤ame_íd
:

479 if–
˙t
==1 ){

480 
	`as£π
–
pNC
!=0 );

481 if–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_Alüs
) ){

482 
	`sqlôe3AuthRód
(
pP¨£
, 
pEx¥
, 
pSchema
, 
pNC
->
pSrcLi°
);

487 
	`as£π
–
pT›NC
!=0 );

488 
pT›NC
->
nRef
++;

489 if–
pT›NC
==
pNC
 ) ;

490 
pT›NC
 =ÖT›NC->
pNext
;

492  
WRC_Pru√
;

494  
WRC_Ab‹t
;

496 
	}
}

502 
Ex¥
 *
	$sqlôe3Cª©eCﬁumnEx¥
(
sqlôe3
 *
db
, 
SrcLi°
 *
pSrc
, 
iSrc
, 
iCﬁ
){

503 
Ex¥
 *
p
 = 
	`sqlôe3Ex¥AŒoc
(
db
, 
TK_COLUMN
, 0, 0);

504 if–
p
 ){

505 
SrcLi°_ôem
 *
pIãm
 = &
pSrc
->
a
[
iSrc
];

506 
p
->
pTab
 = 
pIãm
->pTab;

507 
p
->
iTabÀ
 = 
pIãm
->
iCurs‹
;

508 if–
p
->
pTab
->
iPKey
==
iCﬁ
 ){

509 
p
->
iCﬁumn
 = -1;

511 
p
->
iCﬁumn
 = (
ynV¨
)
iCﬁ
;

512 
	`ã°ˇ£
–
iCﬁ
==
BMS
 );

513 
	`ã°ˇ£
–
iCﬁ
==
BMS
-1 );

514 
pIãm
->
cﬁU£d
 |((
Bômask
)1)<<(
iCﬁ
>=
BMS
 ? BMS-1 : iCol);

516 
	`Ex¥SëPr›îty
(
p
, 
EP_Resﬁved
);

518  
p
;

519 
	}
}

525 
	$nŸVÆid
(

526 
P¨£
 *
pP¨£
,

527 
NameC⁄ãxt
 *
pNC
,

528 c⁄° *
zMsg
,

529 
vÆidMask


531 
	`as£π
–(
vÆidMask
&~(
NC_IsCheck
|
NC_P¨tIdx
|
NC_IdxEx¥
))==0 );

532 if–(
pNC
->
ncFœgs
 & 
vÆidMask
)!=0 ){

533 c⁄° *
zIn
 = "partial index WHERE clauses";

534 if–
pNC
->
ncFœgs
 & 
NC_IdxEx¥
 ) 
zIn
 = "indexÉxpressions";

535 #i‚de‡
SQLITE_OMIT_CHECK


536 if–
pNC
->
ncFœgs
 & 
NC_IsCheck
 ) 
zIn
 = "CHECK constraints";

538 
	`sqlôe3Eº‹Msg
(
pP¨£
, "%†¥ohibôed i¿%s", 
zMsg
, 
zIn
);

540 
	}
}

547 
	$ex¥Probabûôy
(
Ex¥
 *
p
){

548 
r
 = -1.0;

549 if–
p
->
›
!=
TK_FLOAT
 )  -1;

550 
	`sqlôe3AtoF
(
p
->
u
.
zTokí
, &
r
, 
	`sqlôe3SåÀn30
’->u.zTokí), 
SQLITE_UTF8
);

551 
	`as£π
–
r
>=0.0 );

552 if–
r
>1.0 )  -1;

553  ()(
r
*134217728.0);

554 
	}
}

567 
	$ªsﬁveEx¥Sãp
(
WÆkî
 *
pWÆkî
, 
Ex¥
 *
pEx¥
){

568 
NameC⁄ãxt
 *
pNC
;

569 
P¨£
 *
pP¨£
;

571 
pNC
 = 
pWÆkî
->
u
.pNC;

572 
	`as£π
–
pNC
!=0 );

573 
pP¨£
 = 
pNC
->pParse;

574 
	`as£π
–
pP¨£
==
pWÆkî
->pParse );

576 if–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_Resﬁved
ËË 
WRC_Pru√
;

577 
	`Ex¥SëPr›îty
(
pEx¥
, 
EP_Resﬁved
);

578 #i‚de‡
NDEBUG


579 if–
pNC
->
pSrcLi°
 &&ÖNC->pSrcLi°->
nAŒoc
>0 ){

580 
SrcLi°
 *
pSrcLi°
 = 
pNC
->pSrcList;

581 
i
;

582 
i
=0; i<
pNC
->
pSrcLi°
->
nSrc
; i++){

583 
	`as£π
–
pSrcLi°
->
a
[
i
].
iCurs‹
>=0 &&ÖSrcLi°->a[i].iCurs‹<
pP¨£
->
nTab
);

587  
pEx¥
->
›
 ){

589 #i‡
	`deföed
(
SQLITE_ENABLE_UPDATE_DELETE_LIMIT
Ë&& !deföed(
SQLITE_OMIT_SUBQUERY
)

594 
TK_ROW
: {

595 
SrcLi°
 *
pSrcLi°
 = 
pNC
->pSrcList;

596 
SrcLi°_ôem
 *
pIãm
;

597 
	`as£π
–
pSrcLi°
 &&ÖSrcLi°->
nSrc
==1 );

598 
pIãm
 = 
pSrcLi°
->
a
;

599 
pEx¥
->
›
 = 
TK_COLUMN
;

600 
pEx¥
->
pTab
 = 
pIãm
->pTab;

601 
pEx¥
->
iTabÀ
 = 
pIãm
->
iCurs‹
;

602 
pEx¥
->
iCﬁumn
 = -1;

603 
pEx¥
->
afföôy
 = 
SQLITE_AFF_INTEGER
;

607 && !
	`deföed
(
SQLITE_OMIT_SUBQUERY
) */

611 
TK_ID
: {

612  
	`lookupName
(
pP¨£
, 0, 0, 
pEx¥
->
u
.
zTokí
, 
pNC
,ÖExpr);

618 
TK_DOT
: {

619 c⁄° *
zCﬁumn
;

620 c⁄° *
zTabÀ
;

621 c⁄° *
zDb
;

622 
Ex¥
 *
pRight
;

625 
	`nŸVÆid
(
pP¨£
, 
pNC
, "thê\".\" o≥øt‹", 
NC_IdxEx¥
);

627 
pRight
 = 
pEx¥
->pRight;

628 if–
pRight
->
›
==
TK_ID
 ){

629 
zDb
 = 0;

630 
zTabÀ
 = 
pEx¥
->
pLe·
->
u
.
zTokí
;

631 
zCﬁumn
 = 
pRight
->
u
.
zTokí
;

633 
	`as£π
–
pRight
->
›
==
TK_DOT
 );

634 
zDb
 = 
pEx¥
->
pLe·
->
u
.
zTokí
;

635 
zTabÀ
 = 
pRight
->
pLe·
->
u
.
zTokí
;

636 
zCﬁumn
 = 
pRight
->pRight->
u
.
zTokí
;

638  
	`lookupName
(
pP¨£
, 
zDb
, 
zTabÀ
, 
zCﬁumn
, 
pNC
, 
pEx¥
);

643 
TK_FUNCTION
: {

644 
Ex¥Li°
 *
pLi°
 = 
pEx¥
->
x
.pList;

645 
n
 = 
pLi°
 ?ÖLi°->
nEx¥
 : 0;

646 
no_such_func
 = 0;

647 
wr⁄g_num_¨gs
 = 0;

648 
is_agg
 = 0;

649 
auth
;

650 
nId
;

651 c⁄° *
zId
;

652 
FuncDef
 *
pDef
;

653 
u8
 
íc
 = 
	`ENC
(
pP¨£
->
db
);

655 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_xIsSñe˘
) );

656 
	`nŸVÆid
(
pP¨£
, 
pNC
, "fun˘i⁄s", 
NC_P¨tIdx
);

657 
zId
 = 
pEx¥
->
u
.
zTokí
;

658 
nId
 = 
	`sqlôe3SåÀn30
(
zId
);

659 
pDef
 = 
	`sqlôe3FödFun˘i⁄
(
pP¨£
->
db
, 
zId
, 
n
, 
íc
, 0);

660 if–
pDef
==0 ){

661 
pDef
 = 
	`sqlôe3FödFun˘i⁄
(
pP¨£
->
db
, 
zId
, -2, 
íc
, 0);

662 if–
pDef
==0 ){

663 
no_such_func
 = 1;

665 
wr⁄g_num_¨gs
 = 1;

668 
is_agg
 = 
pDef
->
xFöÆize
!=0;

669 if–
pDef
->
funcFœgs
 & 
SQLITE_FUNC_UNLIKELY
 ){

670 
	`Ex¥SëPr›îty
(
pEx¥
, 
EP_U∆ikñy
|
EP_Skù
);

671 if–
n
==2 ){

672 
pEx¥
->
iTabÀ
 = 
	`ex¥Probabûôy
(
pLi°
->
a
[1].pExpr);

673 if–
pEx¥
->
iTabÀ
<0 ){

674 
	`sqlôe3Eº‹Msg
(
pP¨£
,

677 
pNC
->
nEº
++;

689 
pEx¥
->
iTabÀ
 = 
pDef
->
zName
[0]=='u' ? 8388608 : 125829120;

692 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


693 
auth
 = 
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_FUNCTION
, 0, 
pDef
->
zName
, 0);

694 if–
auth
!=
SQLITE_OK
 ){

695 if–
auth
==
SQLITE_DENY
 ){

696 
	`sqlôe3Eº‹Msg
(
pP¨£
, "notáuthorizedÅo use function: %s",

697 
pDef
->
zName
);

698 
pNC
->
nEº
++;

700 
pEx¥
->
›
 = 
TK_NULL
;

701  
WRC_Pru√
;

704 if–
pDef
->
funcFœgs
 & (
SQLITE_FUNC_CONSTANT
|
SQLITE_FUNC_SLOCHNG
) ){

708 
	`Ex¥SëPr›îty
(
pEx¥
,
EP_C⁄°Func
);

710 if–(
pDef
->
funcFœgs
 & 
SQLITE_FUNC_CONSTANT
)==0 ){

714 
	`nŸVÆid
(
pP¨£
, 
pNC
, "n⁄-dëîmöi°i¯fun˘i⁄s", 
NC_IdxEx¥
);

717 if–
is_agg
 && (
pNC
->
ncFœgs
 & 
NC_AŒowAgg
)==0 ){

718 
	`sqlôe3Eº‹Msg
(
pP¨£
, "misu£ o‡aggªg©êfun˘i⁄ %.*s()", 
nId
,
zId
);

719 
pNC
->
nEº
++;

720 
is_agg
 = 0;

721 }if–
no_such_func
 && 
pP¨£
->
db
->
öô
.
busy
==0 ){

722 
	`sqlôe3Eº‹Msg
(
pP¨£
, "nÿsuch fun˘i⁄: %.*s", 
nId
, 
zId
);

723 
pNC
->
nEº
++;

724 }if–
wr⁄g_num_¨gs
 ){

725 
	`sqlôe3Eº‹Msg
(
pP¨£
,"wrongÇumber ofárgumentsÅo function %.*s()",

726 
nId
, 
zId
);

727 
pNC
->
nEº
++;

729 if–
is_agg
 ) 
pNC
->
ncFœgs
 &~
NC_AŒowAgg
;

730 
	`sqlôe3WÆkEx¥Li°
(
pWÆkî
, 
pLi°
);

731 if–
is_agg
 ){

732 
NameC⁄ãxt
 *
pNC2
 = 
pNC
;

733 
pEx¥
->
›
 = 
TK_AGG_FUNCTION
;

734 
pEx¥
->
›2
 = 0;

735  
pNC2
 && !
	`sqlôe3Fun˘i⁄U£sThisSrc
(
pEx¥
,ÖNC2->
pSrcLi°
) ){

736 
pEx¥
->
›2
++;

737 
pNC2
 =ÖNC2->
pNext
;

739 
	`as£π
–
pDef
!=0 );

740 if–
pNC2
 ){

741 
	`as£π
–
SQLITE_FUNC_MINMAX
==
NC_MöMaxAgg
 );

742 
	`ã°ˇ£
–(
pDef
->
funcFœgs
 & 
SQLITE_FUNC_MINMAX
)!=0 );

743 
pNC2
->
ncFœgs
 |
NC_HasAgg
 | (
pDef
->
funcFœgs
 & 
SQLITE_FUNC_MINMAX
);

746 
pNC
->
ncFœgs
 |
NC_AŒowAgg
;

751  
WRC_Pru√
;

753 #i‚de‡
SQLITE_OMIT_SUBQUERY


754 
TK_SELECT
:

755 
TK_EXISTS
: 
	`ã°ˇ£
–
pEx¥
->
›
==TK_EXISTS );

757 
TK_IN
: {

758 
	`ã°ˇ£
–
pEx¥
->
›
==
TK_IN
 );

759 if–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_xIsSñe˘
) ){

760 
nRef
 = 
pNC
->nRef;

761 
	`nŸVÆid
(
pP¨£
, 
pNC
, "subquîõs", 
NC_IsCheck
|
NC_P¨tIdx
|
NC_IdxEx¥
);

762 
	`sqlôe3WÆkSñe˘
(
pWÆkî
, 
pEx¥
->
x
.
pSñe˘
);

763 
	`as£π
–
pNC
->
nRef
>=nRef );

764 if–
nRef
!=
pNC
->nRef ){

765 
	`Ex¥SëPr›îty
(
pEx¥
, 
EP_V¨Sñe˘
);

766 
pNC
->
ncFœgs
 |
NC_V¨Sñe˘
;

771 
TK_VARIABLE
: {

772 
	`nŸVÆid
(
pP¨£
, 
pNC
, "∑ømëîs", 
NC_IsCheck
|
NC_P¨tIdx
|
NC_IdxEx¥
);

776  (
pP¨£
->
nEº
 ||ÖP¨£->
db
->
mÆlocFaûed
Ë? 
WRC_Ab‹t
 : 
WRC_C⁄töue
;

777 
	}
}

791 
	$ªsﬁveAsName
(

792 
P¨£
 *
pP¨£
,

793 
Ex¥Li°
 *
pELi°
,

794 
Ex¥
 *
pE


796 
i
;

798 
	`UNUSED_PARAMETER
(
pP¨£
);

800 if–
pE
->
›
==
TK_ID
 ){

801 *
zCﬁ
 = 
pE
->
u
.
zTokí
;

802 
i
=0; i<
pELi°
->
nEx¥
; i++){

803 *
zAs
 = 
pELi°
->
a
[
i
].
zName
;

804 if–
zAs
!=0 && 
	`sqlôe3SåICmp
(zAs, 
zCﬁ
)==0 ){

805  
i
+1;

810 
	}
}

830 
	$ªsﬁveOrdîByTîmToEx¥Li°
(

831 
P¨£
 *
pP¨£
,

832 
Sñe˘
 *
pSñe˘
,

833 
Ex¥
 *
pE


835 
i
;

836 
Ex¥Li°
 *
pELi°
;

837 
NameC⁄ãxt
 
nc
;

838 
sqlôe3
 *
db
;

839 
rc
;

840 
u8
 
ßvedSuµEº
;

842 
	`as£π
–
	`sqlôe3Ex¥IsI¡egî
(
pE
, &
i
)==0 );

843 
pELi°
 = 
pSñe˘
->pEList;

847 
	`mem£t
(&
nc
, 0, (nc));

848 
nc
.
pP¨£
 =ÖParse;

849 
nc
.
pSrcLi°
 = 
pSñe˘
->
pSrc
;

850 
nc
.
pELi°
 =ÖEList;

851 
nc
.
ncFœgs
 = 
NC_AŒowAgg
;

852 
nc
.
nEº
 = 0;

853 
db
 = 
pP¨£
->db;

854 
ßvedSuµEº
 = 
db
->
suµªssEº
;

855 
db
->
suµªssEº
 = 1;

856 
rc
 = 
	`sqlôe3ResﬁveEx¥Names
(&
nc
, 
pE
);

857 
db
->
suµªssEº
 = 
ßvedSuµEº
;

858 if–
rc
 )  0;

864 
i
=0; i<
pELi°
->
nEx¥
; i++){

865 if–
	`sqlôe3Ex¥Com∑ª
(
pELi°
->
a
[
i
].
pEx¥
, 
pE
, -1)<2 ){

866  
i
+1;

872 
	}
}

877 
	$ªsﬁveOutOfR™geEº‹
(

878 
P¨£
 *
pP¨£
,

879 c⁄° *
zTy≥
,

880 
i
,

881 
mx


883 
	`sqlôe3Eº‹Msg
(
pP¨£
,

885 "bëwì¿1ánd %d", 
i
, 
zTy≥
, 
mx
);

886 
	}
}

903 
	$ªsﬁveCompoundOrdîBy
(

904 
P¨£
 *
pP¨£
,

905 
Sñe˘
 *
pSñe˘


907 
i
;

908 
Ex¥Li°
 *
pOrdîBy
;

909 
Ex¥Li°
 *
pELi°
;

910 
sqlôe3
 *
db
;

911 
m‹eToDo
 = 1;

913 
pOrdîBy
 = 
pSñe˘
->pOrderBy;

914 if–
pOrdîBy
==0 )  0;

915 
db
 = 
pP¨£
->db;

916 #i‡
SQLITE_MAX_COLUMN


917 if–
pOrdîBy
->
nEx¥
>
db
->
aLimô
[
SQLITE_LIMIT_COLUMN
] ){

918 
	`sqlôe3Eº‹Msg
(
pP¨£
, "too manyÅerms in ORDER BY clause");

922 
i
=0; i<
pOrdîBy
->
nEx¥
; i++){

923 
pOrdîBy
->
a
[
i
].
d⁄e
 = 0;

925 
pSñe˘
->
pNext
 = 0;

926  
pSñe˘
->
pPri‹
 ){

927 
pSñe˘
->
pPri‹
->
pNext
 =ÖSelect;

928 
pSñe˘
 =ÖSñe˘->
pPri‹
;

930  
pSñe˘
 && 
m‹eToDo
 ){

931 
Ex¥Li°_ôem
 *
pIãm
;

932 
m‹eToDo
 = 0;

933 
pELi°
 = 
pSñe˘
->pEList;

934 
	`as£π
–
pELi°
!=0 );

935 
i
=0, 
pIãm
=
pOrdîBy
->
a
; i<pOrdîBy->
nEx¥
; i++,ÖItem++){

936 
iCﬁ
 = -1;

937 
Ex¥
 *
pE
, *
pDup
;

938 if–
pIãm
->
d⁄e
 ) ;

939 
pE
 = 
	`sqlôe3Ex¥SkùCﬁœã
(
pIãm
->
pEx¥
);

940 if–
	`sqlôe3Ex¥IsI¡egî
(
pE
, &
iCﬁ
) ){

941 if–
iCﬁ
<=0 || iCﬁ>
pELi°
->
nEx¥
 ){

942 
	`ªsﬁveOutOfR™geEº‹
(
pP¨£
, "ORDER", 
i
+1, 
pELi°
->
nEx¥
);

946 
iCﬁ
 = 
	`ªsﬁveAsName
(
pP¨£
, 
pELi°
, 
pE
);

947 if–
iCﬁ
==0 ){

948 
pDup
 = 
	`sqlôe3Ex¥Dup
(
db
, 
pE
, 0);

949 if–!
db
->
mÆlocFaûed
 ){

950 
	`as£π
(
pDup
);

951 
iCﬁ
 = 
	`ªsﬁveOrdîByTîmToEx¥Li°
(
pP¨£
, 
pSñe˘
, 
pDup
);

953 
	`sqlôe3Ex¥Dñëe
(
db
, 
pDup
);

956 if–
iCﬁ
>0 ){

959 
Ex¥
 *
pNew
 = 
	`sqlôe3Ex¥
(
db
, 
TK_INTEGER
, 0);

960 if–
pNew
==0 )  1;

961 
pNew
->
Êags
 |
EP_I¡VÆue
;

962 
pNew
->
u
.
iVÆue
 = 
iCﬁ
;

963 if–
pIãm
->
pEx¥
==
pE
 ){

964 
pIãm
->
pEx¥
 = 
pNew
;

966 
Ex¥
 *
pP¨ít
 = 
pIãm
->
pEx¥
;

967 
	`as£π
–
pP¨ít
->
›
==
TK_COLLATE
 );

968  
pP¨ít
->
pLe·
->
›
==
TK_COLLATE
 )ÖParent =ÖParent->pLeft;

969 
	`as£π
–
pP¨ít
->
pLe·
==
pE
 );

970 
pP¨ít
->
pLe·
 = 
pNew
;

972 
	`sqlôe3Ex¥Dñëe
(
db
, 
pE
);

973 
pIãm
->
u
.
x
.
iOrdîByCﬁ
 = (
u16
)
iCﬁ
;

974 
pIãm
->
d⁄e
 = 1;

976 
m‹eToDo
 = 1;

979 
pSñe˘
 =ÖSñe˘->
pNext
;

981 
i
=0; i<
pOrdîBy
->
nEx¥
; i++){

982 if–
pOrdîBy
->
a
[
i
].
d⁄e
==0 ){

983 
	`sqlôe3Eº‹Msg
(
pP¨£
, "%r ORDER BYÅerm doesÇot matchány "

984 "cﬁum¿öÅhêªsu… së", 
i
+1);

989 
	}
}

1001 
	$sqlôe3ResﬁveOrdîGroupBy
(

1002 
P¨£
 *
pP¨£
,

1003 
Sñe˘
 *
pSñe˘
,

1004 
Ex¥Li°
 *
pOrdîBy
,

1005 c⁄° *
zTy≥


1007 
i
;

1008 
sqlôe3
 *
db
 = 
pP¨£
->db;

1009 
Ex¥Li°
 *
pELi°
;

1010 
Ex¥Li°_ôem
 *
pIãm
;

1012 if–
pOrdîBy
==0 || 
pP¨£
->
db
->
mÆlocFaûed
 )  0;

1013 #i‡
SQLITE_MAX_COLUMN


1014 if–
pOrdîBy
->
nEx¥
>
db
->
aLimô
[
SQLITE_LIMIT_COLUMN
] ){

1015 
	`sqlôe3Eº‹Msg
(
pP¨£
, "toÿm™yÅîm†ö %†BY cœu£", 
zTy≥
);

1019 
pELi°
 = 
pSñe˘
->pEList;

1020 
	`as£π
–
pELi°
!=0 );

1021 
i
=0, 
pIãm
=
pOrdîBy
->
a
; i<pOrdîBy->
nEx¥
; i++,ÖItem++){

1022 if–
pIãm
->
u
.
x
.
iOrdîByCﬁ
 ){

1023 if–
pIãm
->
u
.
x
.
iOrdîByCﬁ
>
pELi°
->
nEx¥
 ){

1024 
	`ªsﬁveOutOfR™geEº‹
(
pP¨£
, 
zTy≥
, 
i
+1, 
pELi°
->
nEx¥
);

1027 
	`ªsﬁveAlüs
(
pP¨£
, 
pELi°
, 
pIãm
->
u
.
x
.
iOrdîByCﬁ
-1,ÖIãm->
pEx¥
,

1028 
zTy≥
,0);

1032 
	}
}

1052 
	$ªsﬁveOrdîGroupBy
(

1053 
NameC⁄ãxt
 *
pNC
,

1054 
Sñe˘
 *
pSñe˘
,

1055 
Ex¥Li°
 *
pOrdîBy
,

1056 c⁄° *
zTy≥


1058 
i
, 
j
;

1059 
iCﬁ
;

1060 
Ex¥Li°_ôem
 *
pIãm
;

1061 
P¨£
 *
pP¨£
;

1062 
nResu…
;

1064 if–
pOrdîBy
==0 )  0;

1065 
nResu…
 = 
pSñe˘
->
pELi°
->
nEx¥
;

1066 
pP¨£
 = 
pNC
->pParse;

1067 
i
=0, 
pIãm
=
pOrdîBy
->
a
; i<pOrdîBy->
nEx¥
; i++,ÖItem++){

1068 
Ex¥
 *
pE
 = 
pIãm
->
pEx¥
;

1069 
Ex¥
 *
pE2
 = 
	`sqlôe3Ex¥SkùCﬁœã
(
pE
);

1070 if–
zTy≥
[0]!='G' ){

1071 
iCﬁ
 = 
	`ªsﬁveAsName
(
pP¨£
, 
pSñe˘
->
pELi°
, 
pE2
);

1072 if–
iCﬁ
>0 ){

1077 
pIãm
->
u
.
x
.
iOrdîByCﬁ
 = (
u16
)
iCﬁ
;

1081 if–
	`sqlôe3Ex¥IsI¡egî
(
pE2
, &
iCﬁ
) ){

1085 if–
iCﬁ
<1 || iCol>0xffff ){

1086 
	`ªsﬁveOutOfR™geEº‹
(
pP¨£
, 
zTy≥
, 
i
+1, 
nResu…
);

1089 
pIãm
->
u
.
x
.
iOrdîByCﬁ
 = (
u16
)
iCﬁ
;

1094 
pIãm
->
u
.
x
.
iOrdîByCﬁ
 = 0;

1095 if–
	`sqlôe3ResﬁveEx¥Names
(
pNC
, 
pE
) ){

1098 
j
=0; j<
pSñe˘
->
pELi°
->
nEx¥
; j++){

1099 if–
	`sqlôe3Ex¥Com∑ª
(
pE
, 
pSñe˘
->
pELi°
->
a
[
j
].
pEx¥
, -1)==0 ){

1100 
pIãm
->
u
.
x
.
iOrdîByCﬁ
 = 
j
+1;

1104  
	`sqlôe3ResﬁveOrdîGroupBy
(
pP¨£
, 
pSñe˘
, 
pOrdîBy
, 
zTy≥
);

1105 
	}
}

1110 
	$ªsﬁveSñe˘Sãp
(
WÆkî
 *
pWÆkî
, 
Sñe˘
 *
p
){

1111 
NameC⁄ãxt
 *
pOuãrNC
;

1112 
NameC⁄ãxt
 
sNC
;

1113 
isCompound
;

1114 
nCompound
;

1115 
P¨£
 *
pP¨£
;

1116 
i
;

1117 
Ex¥Li°
 *
pGroupBy
;

1118 
Sñe˘
 *
pLe·mo°
;

1119 
sqlôe3
 *
db
;

1122 
	`as£π
–
p
!=0 );

1123 if–
p
->
£lFœgs
 & 
SF_Resﬁved
 ){

1124  
WRC_Pru√
;

1126 
pOuãrNC
 = 
pWÆkî
->
u
.
pNC
;

1127 
pP¨£
 = 
pWÆkî
->pParse;

1128 
db
 = 
pP¨£
->db;

1138 if–(
p
->
£lFœgs
 & 
SF_Ex∑nded
)==0 ){

1139 
	`sqlôe3Sñe˘Pªp
(
pP¨£
, 
p
, 
pOuãrNC
);

1140  (
pP¨£
->
nEº
 || 
db
->
mÆlocFaûed
Ë? 
WRC_Ab‹t
 : 
WRC_Pru√
;

1143 
isCompound
 = 
p
->
pPri‹
!=0;

1144 
nCompound
 = 0;

1145 
pLe·mo°
 = 
p
;

1146  
p
 ){

1147 
	`as£π
–(
p
->
£lFœgs
 & 
SF_Ex∑nded
)!=0 );

1148 
	`as£π
–(
p
->
£lFœgs
 & 
SF_Resﬁved
)==0 );

1149 
p
->
£lFœgs
 |
SF_Resﬁved
;

1154 
	`mem£t
(&
sNC
, 0, (sNC));

1155 
sNC
.
pP¨£
 =ÖParse;

1156 if–
	`sqlôe3ResﬁveEx¥Names
(&
sNC
, 
p
->
pLimô
) ||

1157 
	`sqlôe3ResﬁveEx¥Names
(&
sNC
, 
p
->
pOff£t
) ){

1158  
WRC_Ab‹t
;

1167 if–
p
->
£lFœgs
 & 
SF_C⁄vîãd
 ){

1168 
Sñe˘
 *
pSub
 = 
p
->
pSrc
->
a
[0].
pSñe˘
;

1169 
	`as£π
–
p
->
pSrc
->
nSrc
==1 &&Ö->
pOrdîBy
 );

1170 
	`as£π
–
pSub
->
pPri‹
 &&ÖSub->
pOrdîBy
==0 );

1171 
pSub
->
pOrdîBy
 = 
p
->pOrderBy;

1172 
p
->
pOrdîBy
 = 0;

1177 
i
=0; i<
p
->
pSrc
->
nSrc
; i++){

1178 
SrcLi°_ôem
 *
pIãm
 = &
p
->
pSrc
->
a
[
i
];

1179 if–
pIãm
->
pSñe˘
 ){

1180 
NameC⁄ãxt
 *
pNC
;

1181 
nRef
 = 0;

1182 c⁄° *
zSavedC⁄ãxt
 = 
pP¨£
->
zAuthC⁄ãxt
;

1189 
pNC
=
pOuãrNC
;ÖNC;ÖNCıNC->
pNext
Ë
nRef
 +=ÖNC->nRef;

1191 if–
pIãm
->
zName
 ) 
pP¨£
->
zAuthC⁄ãxt
 =ÖItem->zName;

1192 
	`sqlôe3ResﬁveSñe˘Names
(
pP¨£
, 
pIãm
->
pSñe˘
, 
pOuãrNC
);

1193 
pP¨£
->
zAuthC⁄ãxt
 = 
zSavedC⁄ãxt
;

1194 if–
pP¨£
->
nEº
 || 
db
->
mÆlocFaûed
 )  
WRC_Ab‹t
;

1196 
pNC
=
pOuãrNC
;ÖNC;ÖNCıNC->
pNext
Ë
nRef
 -=ÖNC->nRef;

1197 
	`as£π
–
pIãm
->
fg
.
isC‹ªœãd
==0 && 
nRef
<=0 );

1198 
pIãm
->
fg
.
isC‹ªœãd
 = (
nRef
!=0);

1205 
sNC
.
ncFœgs
 = 
NC_AŒowAgg
;

1206 
sNC
.
pSrcLi°
 = 
p
->
pSrc
;

1207 
sNC
.
pNext
 = 
pOuãrNC
;

1210 if–
	`sqlôe3ResﬁveEx¥Li°Names
(&
sNC
, 
p
->
pELi°
ËË 
WRC_Ab‹t
;

1215 
	`as£π
–(
p
->
£lFœgs
 & 
SF_Aggªg©e
)==0 );

1216 
pGroupBy
 = 
p
->pGroupBy;

1217 if–
pGroupBy
 || (
sNC
.
ncFœgs
 & 
NC_HasAgg
)!=0 ){

1218 
	`as£π
–
NC_MöMaxAgg
==
SF_MöMaxAgg
 );

1219 
p
->
£lFœgs
 |
SF_Aggªg©e
 | (
sNC
.
ncFœgs
&
NC_MöMaxAgg
);

1221 
sNC
.
ncFœgs
 &~
NC_AŒowAgg
;

1226 if–
p
->
pHavög
 && !
pGroupBy
 ){

1227 
	`sqlôe3Eº‹Msg
(
pP¨£
, "a GROUP BY clause isÑequired before HAVING");

1228  
WRC_Ab‹t
;

1239 
sNC
.
pELi°
 = 
p
->pEList;

1240 if–
	`sqlôe3ResﬁveEx¥Names
(&
sNC
, 
p
->
pHavög
ËË 
WRC_Ab‹t
;

1241 if–
	`sqlôe3ResﬁveEx¥Names
(&
sNC
, 
p
->
pWhîe
ËË 
WRC_Ab‹t
;

1244 
i
=0; i<
p
->
pSrc
->
nSrc
; i++){

1245 
SrcLi°_ôem
 *
pIãm
 = &
p
->
pSrc
->
a
[
i
];

1246 if–
pIãm
->
fg
.
isTabFunc


1247 && 
	`sqlôe3ResﬁveEx¥Li°Names
(&
sNC
, 
pIãm
->
u1
.
pFuncArg
)

1249  
WRC_Ab‹t
;

1256 
sNC
.
pNext
 = 0;

1257 
sNC
.
ncFœgs
 |
NC_AŒowAgg
;

1264 if–
p
->
£lFœgs
 & 
SF_C⁄vîãd
 ){

1265 
Sñe˘
 *
pSub
 = 
p
->
pSrc
->
a
[0].
pSñe˘
;

1266 
p
->
pOrdîBy
 = 
pSub
->pOrderBy;

1267 
pSub
->
pOrdîBy
 = 0;

1280 if–
isCompound
<=
nCompound


1281 && 
	`ªsﬁveOrdîGroupBy
(&
sNC
, 
p
,Ö->
pOrdîBy
, "ORDER")

1283  
WRC_Ab‹t
;

1285 if–
db
->
mÆlocFaûed
 ){

1286  
WRC_Ab‹t
;

1292 if–
pGroupBy
 ){

1293 
Ex¥Li°_ôem
 *
pIãm
;

1295 if–
	`ªsﬁveOrdîGroupBy
(&
sNC
, 
p
, 
pGroupBy
, "GROUP"Ë|| 
db
->
mÆlocFaûed
 ){

1296  
WRC_Ab‹t
;

1298 
i
=0, 
pIãm
=
pGroupBy
->
a
; i<pGroupBy->
nEx¥
; i++,ÖItem++){

1299 if–
	`Ex¥HasPr›îty
(
pIãm
->
pEx¥
, 
EP_Agg
) ){

1300 
	`sqlôe3Eº‹Msg
(
pP¨£
, "aggregate functionsáreÇotállowed in "

1302  
WRC_Ab‹t
;

1309 if–
p
->
pNext
 &&Ö->
pELi°
->
nEx¥
!=p->pNext->pEList->nExpr ){

1310 
	`sqlôe3Sñe˘Wr⁄gNumTîmsEº‹
(
pP¨£
, 
p
->
pNext
);

1311  
WRC_Ab‹t
;

1316 
p
 =Ö->
pPri‹
;

1317 
nCompound
++;

1323 if–
isCompound
 && 
	`ªsﬁveCompoundOrdîBy
(
pP¨£
, 
pLe·mo°
) ){

1324  
WRC_Ab‹t
;

1327  
WRC_Pru√
;

1328 
	}
}

1378 
	$sqlôe3ResﬁveEx¥Names
(

1379 
NameC⁄ãxt
 *
pNC
,

1380 
Ex¥
 *
pEx¥


1382 
u16
 
ßvedHasAgg
;

1383 
WÆkî
 
w
;

1385 if–
pEx¥
==0 )  0;

1386 #i‡
SQLITE_MAX_EXPR_DEPTH
>0

1388 
P¨£
 *
pP¨£
 = 
pNC
->pParse;

1389 if–
	`sqlôe3Ex¥CheckHeight
(
pP¨£
, 
pEx¥
->
nHeight
+
pNC
->pParse->nHeight) ){

1392 
pP¨£
->
nHeight
 +
pEx¥
->nHeight;

1395 
ßvedHasAgg
 = 
pNC
->
ncFœgs
 & (
NC_HasAgg
|
NC_MöMaxAgg
);

1396 
pNC
->
ncFœgs
 &~(
NC_HasAgg
|
NC_MöMaxAgg
);

1397 
w
.
pP¨£
 = 
pNC
->pParse;

1398 
w
.
xEx¥CÆlback
 = 
ªsﬁveEx¥Sãp
;

1399 
w
.
xSñe˘CÆlback
 = 
ªsﬁveSñe˘Sãp
;

1400 
w
.
xSñe˘CÆlback2
 = 0;

1401 
w
.
wÆkîDïth
 = 0;

1402 
w
.
eCode
 = 0;

1403 
w
.
u
.
pNC
 =ÖNC;

1404 
	`sqlôe3WÆkEx¥
(&
w
, 
pEx¥
);

1405 #i‡
SQLITE_MAX_EXPR_DEPTH
>0

1406 
pNC
->
pP¨£
->
nHeight
 -
pEx¥
->nHeight;

1408 if–
pNC
->
nEº
>0 || 
w
.
pP¨£
->nErr>0 ){

1409 
	`Ex¥SëPr›îty
(
pEx¥
, 
EP_Eº‹
);

1411 if–
pNC
->
ncFœgs
 & 
NC_HasAgg
 ){

1412 
	`Ex¥SëPr›îty
(
pEx¥
, 
EP_Agg
);

1414 
pNC
->
ncFœgs
 |
ßvedHasAgg
;

1415  
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_Eº‹
);

1416 
	}
}

1423 
	$sqlôe3ResﬁveEx¥Li°Names
(

1424 
NameC⁄ãxt
 *
pNC
,

1425 
Ex¥Li°
 *
pLi°


1427 
i
;

1428 if–
pLi°
 ){

1429 
i
=0; i<
pLi°
->
nEx¥
; i++){

1430 if–
	`sqlôe3ResﬁveEx¥Names
(
pNC
, 
pLi°
->
a
[
i
].
pEx¥
ËË 
WRC_Ab‹t
;

1433  
WRC_C⁄töue
;

1434 
	}
}

1448 
	$sqlôe3ResﬁveSñe˘Names
(

1449 
P¨£
 *
pP¨£
,

1450 
Sñe˘
 *
p
,

1451 
NameC⁄ãxt
 *
pOuãrNC


1453 
WÆkî
 
w
;

1455 
	`as£π
–
p
!=0 );

1456 
	`mem£t
(&
w
, 0, (w));

1457 
w
.
xEx¥CÆlback
 = 
ªsﬁveEx¥Sãp
;

1458 
w
.
xSñe˘CÆlback
 = 
ªsﬁveSñe˘Sãp
;

1459 
w
.
pP¨£
 =ÖParse;

1460 
w
.
u
.
pNC
 = 
pOuãrNC
;

1461 
	`sqlôe3WÆkSñe˘
(&
w
, 
p
);

1462 
	}
}

1475 
	$sqlôe3ResﬁveSñfRe„ªn˚
(

1476 
P¨£
 *
pP¨£
,

1477 
TabÀ
 *
pTab
,

1478 
ty≥
,

1479 
Ex¥
 *
pEx¥
,

1480 
Ex¥Li°
 *
pLi°


1482 
SrcLi°
 
sSrc
;

1483 
NameC⁄ãxt
 
sNC
;

1485 
	`as£π
–
ty≥
==
NC_IsCheck
 ||Åy≥==
NC_P¨tIdx
 ||Åy≥==
NC_IdxEx¥
 );

1486 
	`mem£t
(&
sNC
, 0, (sNC));

1487 
	`mem£t
(&
sSrc
, 0, (sSrc));

1488 
sSrc
.
nSrc
 = 1;

1489 
sSrc
.
a
[0].
zName
 = 
pTab
->zName;

1490 
sSrc
.
a
[0].
pTab
 =ÖTab;

1491 
sSrc
.
a
[0].
iCurs‹
 = -1;

1492 
sNC
.
pP¨£
 =ÖParse;

1493 
sNC
.
pSrcLi°
 = &
sSrc
;

1494 
sNC
.
ncFœgs
 = 
ty≥
;

1495 if–
	`sqlôe3ResﬁveEx¥Names
(&
sNC
, 
pEx¥
) ) ;

1496 if–
pLi°
 ) 
	`sqlôe3ResﬁveEx¥Li°Names
(&
sNC
,ÖList);

1497 
	}
}

	@rowset.c

64 
	~"sqlôeI¡.h
"

70 
	#ROWSET_ALLOCATION_SIZE
 1024

	)

75 
	#ROWSET_ENTRY_PER_CHUNK
 \

76 ((
ROWSET_ALLOCATION_SIZE
-8)/(
RowSëE¡ry
))

	)

86 
	sRowSëE¡ry
 {

87 
i64
 
	mv
;

88 
RowSëE¡ry
 *
	mpRight
;

89 
RowSëE¡ry
 *
	mpLe·
;

98 
	sRowSëChunk
 {

99 
RowSëChunk
 *
	mpNextChunk
;

100 
RowSëE¡ry
 
	maE¡ry
[
ROWSET_ENTRY_PER_CHUNK
];

108 
	sRowSë
 {

109 
RowSëChunk
 *
	mpChunk
;

110 
sqlôe3
 *
	mdb
;

111 
RowSëE¡ry
 *
	mpE¡ry
;

112 
RowSëE¡ry
 *
	mpLa°
;

113 
RowSëE¡ry
 *
	mpFªsh
;

114 
RowSëE¡ry
 *
	mpF‹e°
;

115 
u16
 
	mnFªsh
;

116 
u16
 
	mrsFœgs
;

117 
	miB©ch
;

123 
	#ROWSET_SORTED
 0x01

	)

124 
	#ROWSET_NEXT
 0x02

	)

138 
RowSë
 *
	$sqlôe3RowSëInô
(
sqlôe3
 *
db
, *
pS∑˚
, 
N
){

139 
RowSë
 *
p
;

140 
	`as£π
–
N
 >
	`ROUND8
((*
p
)) );

141 
p
 = 
pS∑˚
;

142 
p
->
pChunk
 = 0;

143 
p
->
db
 = db;

144 
p
->
pE¡ry
 = 0;

145 
p
->
pLa°
 = 0;

146 
p
->
pF‹e°
 = 0;

147 
p
->
pFªsh
 = (
RowSëE¡ry
*)(
	`ROUND8
((*p)) + (*)p);

148 
p
->
nFªsh
 = (
u16
)((
N
 - 
	`ROUND8
((*p)))/(
RowSëE¡ry
));

149 
p
->
rsFœgs
 = 
ROWSET_SORTED
;

150 
p
->
iB©ch
 = 0;

151  
p
;

152 
	}
}

159 
	$sqlôe3RowSëCÀ¨
(
RowSë
 *
p
){

160 
RowSëChunk
 *
pChunk
, *
pNextChunk
;

161 
pChunk
=
p
->pChunk;ÖChunk;ÖChunk = 
pNextChunk
){

162 
pNextChunk
 = 
pChunk
->pNextChunk;

163 
	`sqlôe3DbFªe
(
p
->
db
, 
pChunk
);

165 
p
->
pChunk
 = 0;

166 
p
->
nFªsh
 = 0;

167 
p
->
pE¡ry
 = 0;

168 
p
->
pLa°
 = 0;

169 
p
->
pF‹e°
 = 0;

170 
p
->
rsFœgs
 = 
ROWSET_SORTED
;

171 
	}
}

181 
RowSëE¡ry
 *
	$rowSëE¡ryAŒoc
(
RowSë
 *
p
){

182 
	`as£π
–
p
!=0 );

183 if–
p
->
nFªsh
==0 ){

186 
RowSëChunk
 *
pNew
;

187 
pNew
 = 
	`sqlôe3DbMÆlocRawNN
(
p
->
db
, (*pNew));

188 if–
pNew
==0 ){

191 
pNew
->
pNextChunk
 = 
p
->
pChunk
;

192 
p
->
pChunk
 = 
pNew
;

193 
p
->
pFªsh
 = 
pNew
->
aE¡ry
;

194 
p
->
nFªsh
 = 
ROWSET_ENTRY_PER_CHUNK
;

196 
p
->
nFªsh
--;

197  
p
->
pFªsh
++;

198 
	}
}

206 
	$sqlôe3RowSëIn£π
(
RowSë
 *
p
, 
i64
 
rowid
){

207 
RowSëE¡ry
 *
pE¡ry
;

208 
RowSëE¡ry
 *
pLa°
;

211 
	`as£π
–
p
!=0 && (p->
rsFœgs
 & 
ROWSET_NEXT
)==0 );

213 
pE¡ry
 = 
	`rowSëE¡ryAŒoc
(
p
);

214 if–
pE¡ry
==0 ) ;

215 
pE¡ry
->
v
 = 
rowid
;

216 
pE¡ry
->
pRight
 = 0;

217 
pLa°
 = 
p
->pLast;

218 if–
pLa°
 ){

219 if–
rowid
<=
pLa°
->
v
 ){

222 
p
->
rsFœgs
 &~
ROWSET_SORTED
;

224 
pLa°
->
pRight
 = 
pE¡ry
;

226 
p
->
pE¡ry
 =ÖEntry;

228 
p
->
pLa°
 = 
pE¡ry
;

229 
	}
}

237 
RowSëE¡ry
 *
	$rowSëE¡ryMîge
(

238 
RowSëE¡ry
 *
pA
,

239 
RowSëE¡ry
 *
pB


241 
RowSëE¡ry
 
hód
;

242 
RowSëE¡ry
 *
pTaû
;

244 
pTaû
 = &
hód
;

245  
pA
 && 
pB
 ){

246 
	`as£π
–
pA
->
pRight
==0 ||ÖA->
v
<=pA->pRight->v );

247 
	`as£π
–
pB
->
pRight
==0 ||ÖB->
v
<=pB->pRight->v );

248 if–
pA
->
v
<
pB
->v ){

249 
pTaû
->
pRight
 = 
pA
;

250 
pA
 =ÖA->
pRight
;

251 
pTaû
 =ÖTaû->
pRight
;

252 }if–
pB
->
v
<
pA
->v ){

253 
pTaû
->
pRight
 = 
pB
;

254 
pB
 =ÖB->
pRight
;

255 
pTaû
 =ÖTaû->
pRight
;

257 
pA
 =ÖA->
pRight
;

260 if–
pA
 ){

261 
	`as£π
–
pA
->
pRight
==0 ||ÖA->
v
<=pA->pRight->v );

262 
pTaû
->
pRight
 = 
pA
;

264 
	`as£π
–
pB
==0 ||ÖB->
pRight
==0 ||ÖB->
v
<=pB->pRight->v );

265 
pTaû
->
pRight
 = 
pB
;

267  
hód
.
pRight
;

268 
	}
}

274 
RowSëE¡ry
 *
	$rowSëE¡ryS‹t
(
RowSëE¡ry
 *
pIn
){

275 
i
;

276 
RowSëE¡ry
 *
pNext
, *
aBuckë
[40];

278 
	`mem£t
(
aBuckë
, 0, (aBucket));

279  
pIn
 ){

280 
pNext
 = 
pIn
->
pRight
;

281 
pIn
->
pRight
 = 0;

282 
i
=0; 
aBuckë
[i]; i++){

283 
pIn
 = 
	`rowSëE¡ryMîge
(
aBuckë
[
i
],ÖIn);

284 
aBuckë
[
i
] = 0;

286 
aBuckë
[
i
] = 
pIn
;

287 
pIn
 = 
pNext
;

289 
pIn
 = 0;

290 
i
=0; i<(
aBuckë
)/(aBucket[0]); i++){

291 
pIn
 = 
	`rowSëE¡ryMîge
’In, 
aBuckë
[
i
]);

293  
pIn
;

294 
	}
}

302 
	$rowSëTªeToLi°
(

303 
RowSëE¡ry
 *
pIn
,

304 
RowSëE¡ry
 **
µFú°
,

305 
RowSëE¡ry
 **
µLa°


307 
	`as£π
–
pIn
!=0 );

308 if–
pIn
->
pLe·
 ){

309 
RowSëE¡ry
 *
p
;

310 
	`rowSëTªeToLi°
(
pIn
->
pLe·
, 
µFú°
, &
p
);

311 
p
->
pRight
 = 
pIn
;

313 *
µFú°
 = 
pIn
;

315 if–
pIn
->
pRight
 ){

316 
	`rowSëTªeToLi°
(
pIn
->
pRight
, &pIn->pRight, 
µLa°
);

318 *
µLa°
 = 
pIn
;

320 
	`as£π
–(*
µLa°
)->
pRight
==0 );

321 
	}
}

337 
RowSëE¡ry
 *
	$rowSëNDìpTªe
(

338 
RowSëE¡ry
 **
µLi°
,

339 
iDïth


341 
RowSëE¡ry
 *
p
;

342 
RowSëE¡ry
 *
pLe·
;

343 if–*
µLi°
==0 ){

347 if–
iDïth
>1 ){

351 
pLe·
 = 
	`rowSëNDìpTªe
(
µLi°
, 
iDïth
-1);

352 
p
 = *
µLi°
;

353 if–
p
==0 ){

356  
pLe·
;

358 
p
->
pLe·
 =ÖLeft;

359 *
µLi°
 = 
p
->
pRight
;

360 
p
->
pRight
 = 
	`rowSëNDìpTªe
(
µLi°
, 
iDïth
-1);

362 
p
 = *
µLi°
;

363 *
µLi°
 = 
p
->
pRight
;

364 
p
->
pLe·
 =Ö->
pRight
 = 0;

366  
p
;

367 
	}
}

373 
RowSëE¡ry
 *
	$rowSëLi°ToTªe
(
RowSëE¡ry
 *
pLi°
){

374 
iDïth
;

375 
RowSëE¡ry
 *
p
;

376 
RowSëE¡ry
 *
pLe·
;

378 
	`as£π
–
pLi°
!=0 );

379 
p
 = 
pLi°
;

380 
pLi°
 = 
p
->
pRight
;

381 
p
->
pLe·
 =Ö->
pRight
 = 0;

382 
iDïth
=1; 
pLi°
; iDepth++){

383 
pLe·
 = 
p
;

384 
p
 = 
pLi°
;

385 
pLi°
 = 
p
->
pRight
;

386 
p
->
pLe·
 =ÖLeft;

387 
p
->
pRight
 = 
	`rowSëNDìpTªe
(&
pLi°
, 
iDïth
);

389  
p
;

390 
	}
}

405 
	$sqlôe3RowSëNext
(
RowSë
 *
p
, 
i64
 *
pRowid
){

406 
	`as£π
–
p
!=0 );

407 
	`as£π
–
p
->
pF‹e°
==0 );

410 if–(
p
->
rsFœgs
 & 
ROWSET_NEXT
)==0 ){

411 if–(
p
->
rsFœgs
 & 
ROWSET_SORTED
)==0 ){

412 
p
->
pE¡ry
 = 
	`rowSëE¡ryS‹t
(p->pEntry);

414 
p
->
rsFœgs
 |
ROWSET_SORTED
|
ROWSET_NEXT
;

418 if–
p
->
pE¡ry
 ){

419 *
pRowid
 = 
p
->
pE¡ry
->
v
;

420 
p
->
pE¡ry
 =Ö->pE¡ry->
pRight
;

421 if–
p
->
pE¡ry
==0 ){

423 
	`sqlôe3RowSëCÀ¨
(
p
);

429 
	}
}

439 
	$sqlôe3RowSëTe°
(
RowSë
 *
pRowSë
, 
iB©ch
, 
sqlôe3_öt64
 
iRowid
){

440 
RowSëE¡ry
 *
p
, *
pTªe
;

443 
	`as£π
–
pRowSë
!=0 && (pRowSë->
rsFœgs
 & 
ROWSET_NEXT
)==0 );

448 if–
iB©ch
!=
pRowSë
->iBatch ){

449 
p
 = 
pRowSë
->
pE¡ry
;

450 if–
p
 ){

451 
RowSëE¡ry
 **
µPªvTªe
 = &
pRowSë
->
pF‹e°
;

452 if–(
pRowSë
->
rsFœgs
 & 
ROWSET_SORTED
)==0 ){

454 
p
 = 
	`rowSëE¡ryS‹t
(p);

456 
pTªe
 = 
pRowSë
->
pF‹e°
;ÖTªe;ÖTªeıTªe->
pRight
){

457 
µPªvTªe
 = &
pTªe
->
pRight
;

458 if–
pTªe
->
pLe·
==0 ){

459 
pTªe
->
pLe·
 = 
	`rowSëLi°ToTªe
(
p
);

462 
RowSëE¡ry
 *
pAux
, *
pTaû
;

463 
	`rowSëTªeToLi°
(
pTªe
->
pLe·
, &
pAux
, &
pTaû
);

464 
pTªe
->
pLe·
 = 0;

465 
p
 = 
	`rowSëE¡ryMîge
(
pAux
,Ö);

468 if–
pTªe
==0 ){

469 *
µPªvTªe
 = 
pTªe
 = 
	`rowSëE¡ryAŒoc
(
pRowSë
);

470 if–
pTªe
 ){

471 
pTªe
->
v
 = 0;

472 
pTªe
->
pRight
 = 0;

473 
pTªe
->
pLe·
 = 
	`rowSëLi°ToTªe
(
p
);

476 
pRowSë
->
pE¡ry
 = 0;

477 
pRowSë
->
pLa°
 = 0;

478 
pRowSë
->
rsFœgs
 |
ROWSET_SORTED
;

480 
pRowSë
->
iB©ch
 = iBatch;

486 
pTªe
 = 
pRowSë
->
pF‹e°
;ÖTªe;ÖTªeıTªe->
pRight
){

487 
p
 = 
pTªe
->
pLe·
;

488  
p
 ){

489 if–
p
->
v
<
iRowid
 ){

490 
p
 =Ö->
pRight
;

491 }if–
p
->
v
>
iRowid
 ){

492 
p
 =Ö->
pLe·
;

499 
	}
}

	@select.c

15 
	~"sqlôeI¡.h
"

20 #i‡
SELECTTRACE_ENABLED


21  
	gsqlôe3Sñe˘Tø˚
 = 0;

22 
	#SELECTTRACE
(
K
,
P
,
S
,
X
) \

23 if(
sqlôe3Sñe˘Tø˚
&(
K
)) \

24 
	`sqlôe3DebugPrötf
("%*s%s.%p: ",(
P
)->
nSñe˘Indít
*2-2,"",\

25 (
S
)->
zSñName
,(S)),\

26 
sqlôe3DebugPrötf
 
X


	)

28 
	#SELECTTRACE
(
K
,
P
,
S
,
X
)

	)

37 
Di°ö˘Ctx
 
	tDi°ö˘Ctx
;

38 
	sDi°ö˘Ctx
 {

39 
u8
 
	misTn˘
;

40 
u8
 
	meTn˘Ty≥
;

41 
	mèbTn˘
;

42 
	maddrTn˘
;

49 
S‹tCtx
 
	tS‹tCtx
;

50 
	sS‹tCtx
 {

51 
Ex¥Li°
 *
	mpOrdîBy
;

52 
	mnOBS©
;

53 
	miECurs‹
;

54 
	mªgRëu∫
;

55 
	mœbñBkOut
;

56 
	maddrS‹tIndex
;

57 
	mœbñD⁄e
;

58 
u8
 
	ms‹tFœgs
;

60 
	#SORTFLAG_U£S‹ãr
 0x01

	)

66 
	$˛órSñe˘
(
sqlôe3
 *
db
, 
Sñe˘
 *
p
, 
bFªe
){

67  
p
 ){

68 
Sñe˘
 *
pPri‹
 = 
p
->pPrior;

69 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
p
->
pELi°
);

70 
	`sqlôe3SrcLi°Dñëe
(
db
, 
p
->
pSrc
);

71 
	`sqlôe3Ex¥Dñëe
(
db
, 
p
->
pWhîe
);

72 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
p
->
pGroupBy
);

73 
	`sqlôe3Ex¥Dñëe
(
db
, 
p
->
pHavög
);

74 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
p
->
pOrdîBy
);

75 
	`sqlôe3Ex¥Dñëe
(
db
, 
p
->
pLimô
);

76 
	`sqlôe3Ex¥Dñëe
(
db
, 
p
->
pOff£t
);

77 if–
p
->
pWôh
 ) 
	`sqlôe3WôhDñëe
(
db
,Ö->pWith);

78 if–
bFªe
 ) 
	`sqlôe3DbFªe
(
db
, 
p
);

79 
p
 = 
pPri‹
;

80 
bFªe
 = 1;

82 
	}
}

87 
	$sqlôe3Sñe˘De°Inô
(
Sñe˘De°
 *
pDe°
, 
eDe°
, 
iP¨m
){

88 
pDe°
->
eDe°
 = (
u8
)eDest;

89 
pDe°
->
iSDP¨m
 = 
iP¨m
;

90 
pDe°
->
affSd°
 = 0;

91 
pDe°
->
iSd°
 = 0;

92 
pDe°
->
nSd°
 = 0;

93 
	}
}

100 
Sñe˘
 *
	$sqlôe3Sñe˘New
(

101 
P¨£
 *
pP¨£
,

102 
Ex¥Li°
 *
pELi°
,

103 
SrcLi°
 *
pSrc
,

104 
Ex¥
 *
pWhîe
,

105 
Ex¥Li°
 *
pGroupBy
,

106 
Ex¥
 *
pHavög
,

107 
Ex¥Li°
 *
pOrdîBy
,

108 
u32
 
£lFœgs
,

109 
Ex¥
 *
pLimô
,

110 
Ex¥
 *
pOff£t


112 
Sñe˘
 *
pNew
;

113 
Sñe˘
 
°™dö
;

114 
sqlôe3
 *
db
 = 
pP¨£
->db;

115 
pNew
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, (*pNew) );

116 if–
pNew
==0 ){

117 
	`as£π
–
db
->
mÆlocFaûed
 );

118 
pNew
 = &
°™dö
;

120 if–
pELi°
==0 ){

121 
pELi°
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
, 0, 
	`sqlôe3Ex¥
(
db
,
TK_ASTERISK
,0));

123 
pNew
->
pELi°
 =ÖEList;

124 
pNew
->
›
 = 
TK_SELECT
;

125 
pNew
->
£lFœgs
 = selFlags;

126 
pNew
->
iLimô
 = 0;

127 
pNew
->
iOff£t
 = 0;

128 #i‡
SELECTTRACE_ENABLED


129 
pNew
->
zSñName
[0] = 0;

131 
pNew
->
addrO≥nEphm
[0] = -1;

132 
pNew
->
addrO≥nEphm
[1] = -1;

133 
pNew
->
nSñe˘Row
 = 0;

134 if–
pSrc
==0 )ÖSr¯
	`sqlôe3DbMÆlocZîo
(
db
, (*pSrc));

135 
pNew
->
pSrc
 =ÖSrc;

136 
pNew
->
pWhîe
 =ÖWhere;

137 
pNew
->
pGroupBy
 =ÖGroupBy;

138 
pNew
->
pHavög
 =ÖHaving;

139 
pNew
->
pOrdîBy
 =ÖOrderBy;

140 
pNew
->
pPri‹
 = 0;

141 
pNew
->
pNext
 = 0;

142 
pNew
->
pLimô
 =ÖLimit;

143 
pNew
->
pOff£t
 =ÖOffset;

144 
pNew
->
pWôh
 = 0;

145 
	`as£π
–
pOff£t
==0 || 
pLimô
!=0 || 
pP¨£
->
nEº
>0 || 
db
->
mÆlocFaûed
!=0 );

146 if–
db
->
mÆlocFaûed
 ) {

147 
	`˛órSñe˘
(
db
, 
pNew
,ÖNew!=&
°™dö
);

148 
pNew
 = 0;

150 
	`as£π
–
pNew
->
pSrc
!=0 || 
pP¨£
->
nEº
>0 );

152 
	`as£π
–
pNew
!=&
°™dö
 );

153  
pNew
;

154 
	}
}

156 #i‡
SELECTTRACE_ENABLED


160 
	$sqlôe3Sñe˘SëName
(
Sñe˘
 *
p
, c⁄° *
zName
){

161 if–
p
 && 
zName
 ){

162 
	`sqlôe3_¢¥ötf
((
p
->
zSñName
),Ö->zSñName, "%s", 
zName
);

164 
	}
}

171 
	$sqlôe3Sñe˘Dñëe
(
sqlôe3
 *
db
, 
Sñe˘
 *
p
){

172 if–
p
 ) 
	`˛órSñe˘
(
db
,Ö, 1);

173 
	}
}

178 
Sñe˘
 *
	$födRightmo°
(
Sñe˘
 *
p
){

179  
p
->
pNext
 )Ö =Ö->pNext;

180  
p
;

181 
	}
}

200 
	$sqlôe3JoöTy≥
(
P¨£
 *
pP¨£
, 
Tokí
 *
pA
, Tokí *
pB
, Tokí *
pC
){

201 
joöty≥
 = 0;

202 
Tokí
 *
≠AŒ
[3];

203 
Tokí
 *
p
;

205 c⁄° 
zKeyText
[] = "naturaleftouterightfullinnercross";

207 
u8
 
i
;

208 
u8
 
nCh¨
;

209 
u8
 
code
;

210 } 
aKeyw‹d
[] = {

211  { 0, 7, 
JT_NATURAL
 },

212  { 6, 4, 
JT_LEFT
|
JT_OUTER
 },

213  { 10, 5, 
JT_OUTER
 },

214  { 14, 5, 
JT_RIGHT
|
JT_OUTER
 },

215  { 19, 4, 
JT_LEFT
|
JT_RIGHT
|
JT_OUTER
 },

216  { 23, 5, 
JT_INNER
 },

217  { 28, 5, 
JT_INNER
|
JT_CROSS
 },

219 
i
, 
j
;

220 
≠AŒ
[0] = 
pA
;

221 
≠AŒ
[1] = 
pB
;

222 
≠AŒ
[2] = 
pC
;

223 
i
=0; i<3 && 
≠AŒ
[i]; i++){

224 
p
 = 
≠AŒ
[
i
];

225 
j
=0; j<
	`AºaySize
(
aKeyw‹d
); j++){

226 if–
p
->
n
==
aKeyw‹d
[
j
].
nCh¨


227 && 
	`sqlôe3SåNICmp
((*)
p
->
z
, &
zKeyText
[
aKeyw‹d
[
j
].
i
],Ö->
n
)==0 ){

228 
joöty≥
 |
aKeyw‹d
[
j
].
code
;

232 
	`ã°ˇ£
–
j
==0 || j==1 || j==2 || j==3 || j==4 || j==5 || j==6 );

233 if–
j
>=
	`AºaySize
(
aKeyw‹d
) ){

234 
joöty≥
 |
JT_ERROR
;

239 (
joöty≥
 & (
JT_INNER
|
JT_OUTER
))==(JT_INNER|JT_OUTER) ||

240 (
joöty≥
 & 
JT_ERROR
)!=0

242 c⁄° *
zSp
 = " ";

243 
	`as£π
–
pB
!=0 );

244 if–
pC
==0 ){ 
zSp
++; }

245 
	`sqlôe3Eº‹Msg
(
pP¨£
, "unknown or unsupported joinÅype: "

246 "%T %T%s%T", 
pA
, 
pB
, 
zSp
, 
pC
);

247 
joöty≥
 = 
JT_INNER
;

248 }if–(
joöty≥
 & 
JT_OUTER
)!=0

249 && (
joöty≥
 & (
JT_LEFT
|
JT_RIGHT
))!=JT_LEFT ){

250 
	`sqlôe3Eº‹Msg
(
pP¨£
,

252 
joöty≥
 = 
JT_INNER
;

254  
joöty≥
;

255 
	}
}

261 
	$cﬁumnIndex
(
TabÀ
 *
pTab
, c⁄° *
zCﬁ
){

262 
i
;

263 
i
=0; i<
pTab
->
nCﬁ
; i++){

264 if–
	`sqlôe3SåICmp
(
pTab
->
aCﬁ
[
i
].
zName
, 
zCﬁ
)==0 )  i;

267 
	}
}

278 
	$èbÀAndCﬁumnIndex
(

279 
SrcLi°
 *
pSrc
,

280 
N
,

281 c⁄° *
zCﬁ
,

282 *
piTab
,

283 *
piCﬁ


285 
i
;

286 
iCﬁ
;

288 
	`as£π
–(
piTab
==0)==(
piCﬁ
==0) );

289 
i
=0; i<
N
; i++){

290 
iCﬁ
 = 
	`cﬁumnIndex
(
pSrc
->
a
[
i
].
pTab
, 
zCﬁ
);

291 if–
iCﬁ
>=0 ){

292 if–
piTab
 ){

293 *
piTab
 = 
i
;

294 *
piCﬁ
 = 
iCﬁ
;

300 
	}
}

313 
	$addWhîeTîm
(

314 
P¨£
 *
pP¨£
,

315 
SrcLi°
 *
pSrc
,

316 
iLe·
,

317 
iCﬁLe·
,

318 
iRight
,

319 
iCﬁRight
,

320 
isOuãrJoö
,

321 
Ex¥
 **
µWhîe


323 
sqlôe3
 *
db
 = 
pP¨£
->db;

324 
Ex¥
 *
pE1
;

325 
Ex¥
 *
pE2
;

326 
Ex¥
 *
pEq
;

328 
	`as£π
–
iLe·
<
iRight
 );

329 
	`as£π
–
pSrc
->
nSrc
>
iRight
 );

330 
	`as£π
–
pSrc
->
a
[
iLe·
].
pTab
 );

331 
	`as£π
–
pSrc
->
a
[
iRight
].
pTab
 );

333 
pE1
 = 
	`sqlôe3Cª©eCﬁumnEx¥
(
db
, 
pSrc
, 
iLe·
, 
iCﬁLe·
);

334 
pE2
 = 
	`sqlôe3Cª©eCﬁumnEx¥
(
db
, 
pSrc
, 
iRight
, 
iCﬁRight
);

336 
pEq
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_EQ
, 
pE1
, 
pE2
, 0);

337 if–
pEq
 && 
isOuãrJoö
 ){

338 
	`Ex¥SëPr›îty
(
pEq
, 
EP_FromJoö
);

339 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEq
, 
EP_TokíO∆y
|
EP_Redu˚d
) );

340 
	`Ex¥SëVVAPr›îty
(
pEq
, 
EP_NoRedu˚
);

341 
pEq
->
iRightJoöTabÀ
 = (
i16
)
pE2
->
iTabÀ
;

343 *
µWhîe
 = 
	`sqlôe3Ex¥And
(
db
, *µWhîe, 
pEq
);

344 
	}
}

372 
	$£tJoöEx¥
(
Ex¥
 *
p
, 
iTabÀ
){

373  
p
 ){

374 
	`Ex¥SëPr›îty
(
p
, 
EP_FromJoö
);

375 
	`as£π
–!
	`Ex¥HasPr›îty
(
p
, 
EP_TokíO∆y
|
EP_Redu˚d
) );

376 
	`Ex¥SëVVAPr›îty
(
p
, 
EP_NoRedu˚
);

377 
p
->
iRightJoöTabÀ
 = (
i16
)
iTabÀ
;

378 if–
p
->
›
==
TK_FUNCTION
 &&Ö->
x
.
pLi°
 ){

379 
i
;

380 
i
=0; i<
p
->
x
.
pLi°
->
nEx¥
; i++){

381 
	`£tJoöEx¥
(
p
->
x
.
pLi°
->
a
[
i
].
pEx¥
, 
iTabÀ
);

384 
	`£tJoöEx¥
(
p
->
pLe·
, 
iTabÀ
);

385 
p
 =Ö->
pRight
;

387 
	}
}

403 
	$sqlôePro˚ssJoö
(
P¨£
 *
pP¨£
, 
Sñe˘
 *
p
){

404 
SrcLi°
 *
pSrc
;

405 
i
, 
j
;

406 
SrcLi°_ôem
 *
pLe·
;

407 
SrcLi°_ôem
 *
pRight
;

409 
pSrc
 = 
p
->pSrc;

410 
pLe·
 = &
pSrc
->
a
[0];

411 
pRight
 = &
pLe·
[1];

412 
i
=0; i<
pSrc
->
nSrc
-1; i++, 
pRight
++, 
pLe·
++){

413 
TabÀ
 *
pLe·Tab
 = 
pLe·
->
pTab
;

414 
TabÀ
 *
pRightTab
 = 
pRight
->
pTab
;

415 
isOuãr
;

417 if–
	`NEVER
(
pLe·Tab
==0 || 
pRightTab
==0) ) ;

418 
isOuãr
 = (
pRight
->
fg
.
joöty≥
 & 
JT_OUTER
)!=0;

423 if–
pRight
->
fg
.
joöty≥
 & 
JT_NATURAL
 ){

424 if–
pRight
->
pOn
 ||ÖRight->
pUsög
 ){

425 
	`sqlôe3Eº‹Msg
(
pP¨£
, "a NATURAL join mayÇot have "

429 
j
=0; j<
pRightTab
->
nCﬁ
; j++){

430 *
zName
;

431 
iLe·
;

432 
iLe·Cﬁ
;

434 
zName
 = 
pRightTab
->
aCﬁ
[
j
].zName;

435 if–
	`èbÀAndCﬁumnIndex
(
pSrc
, 
i
+1, 
zName
, &
iLe·
, &
iLe·Cﬁ
) ){

436 
	`addWhîeTîm
(
pP¨£
, 
pSrc
, 
iLe·
, 
iLe·Cﬁ
, 
i
+1, 
j
,

437 
isOuãr
, &
p
->
pWhîe
);

444 if–
pRight
->
pOn
 &&ÖRight->
pUsög
 ){

445 
	`sqlôe3Eº‹Msg
(
pP¨£
, "cannot have both ONánd USING "

453 if–
pRight
->
pOn
 ){

454 if–
isOuãr
 ) 
	`£tJoöEx¥
(
pRight
->
pOn
,ÖRight->
iCurs‹
);

455 
p
->
pWhîe
 = 
	`sqlôe3Ex¥And
(
pP¨£
->
db
,Ö->pWhîe, 
pRight
->
pOn
);

456 
pRight
->
pOn
 = 0;

466 if–
pRight
->
pUsög
 ){

467 
IdLi°
 *
pLi°
 = 
pRight
->
pUsög
;

468 
j
=0; j<
pLi°
->
nId
; j++){

469 *
zName
;

470 
iLe·
;

471 
iLe·Cﬁ
;

472 
iRightCﬁ
;

474 
zName
 = 
pLi°
->
a
[
j
].zName;

475 
iRightCﬁ
 = 
	`cﬁumnIndex
(
pRightTab
, 
zName
);

476 if–
iRightCﬁ
<0

477 || !
	`èbÀAndCﬁumnIndex
(
pSrc
, 
i
+1, 
zName
, &
iLe·
, &
iLe·Cﬁ
)

479 
	`sqlôe3Eº‹Msg
(
pP¨£
, "cannot join using column %s - column "

480 "nŸÖª£¡ i¿bŸhÅabÀs", 
zName
);

483 
	`addWhîeTîm
(
pP¨£
, 
pSrc
, 
iLe·
, 
iLe·Cﬁ
, 
i
+1, 
iRightCﬁ
,

484 
isOuãr
, &
p
->
pWhîe
);

489 
	}
}

492 
KeyInfo
 *
keyInfoFromEx¥Li°
(

493 
P¨£
 *
pP¨£
,

494 
Ex¥Li°
 *
pLi°
,

495 
iSèπ
,

496 
nExåa


503 
	$pushO¡oS‹ãr
(

504 
P¨£
 *
pP¨£
,

505 
S‹tCtx
 *
pS‹t
,

506 
Sñe˘
 *
pSñe˘
,

507 
ªgD©a
,

508 
ªgOrigD©a
,

509 
nD©a
,

510 
nPªfixReg


512 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

513 
bSeq
 = ((
pS‹t
->
s‹tFœgs
 & 
SORTFLAG_U£S‹ãr
)==0);

514 
nEx¥
 = 
pS‹t
->
pOrdîBy
->nExpr;

515 
nBa£
 = 
nEx¥
 + 
bSeq
 + 
nD©a
;

516 
ªgBa£
;

517 
ªgRec‹d
 = ++
pP¨£
->
nMem
;

518 
nOBS©
 = 
pS‹t
->nOBSat;

519 
›
;

520 
iLimô
;

522 
	`as£π
–
bSeq
==0 || bSeq==1 );

523 
	`as£π
–
nD©a
==1 || 
ªgD©a
==
ªgOrigD©a
 );

524 if–
nPªfixReg
 ){

525 
	`as£π
–
nPªfixReg
==
nEx¥
+
bSeq
 );

526 
ªgBa£
 = 
ªgD©a
 - 
nEx¥
 - 
bSeq
;

528 
ªgBa£
 = 
pP¨£
->
nMem
 + 1;

529 
pP¨£
->
nMem
 +
nBa£
;

531 
	`as£π
–
pSñe˘
->
iOff£t
==0 ||ÖSñe˘->
iLimô
!=0 );

532 
iLimô
 = 
pSñe˘
->
iOff£t
 ?ÖSelect->iOffset+1 :ÖSelect->iLimit;

533 
pS‹t
->
œbñD⁄e
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

534 
	`sqlôe3Ex¥CodeEx¥Li°
(
pP¨£
, 
pS‹t
->
pOrdîBy
, 
ªgBa£
, 
ªgOrigD©a
,

535 
SQLITE_ECEL_DUP
|
SQLITE_ECEL_REF
);

536 if–
bSeq
 ){

537 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Sequí˚
, 
pS‹t
->
iECurs‹
, 
ªgBa£
+
nEx¥
);

539 if–
nPªfixReg
==0 ){

540 
	`sqlôe3Ex¥CodeMove
(
pP¨£
, 
ªgD©a
, 
ªgBa£
+
nEx¥
+
bSeq
, 
nD©a
);

542 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_MakeRec‹d
, 
ªgBa£
+
nOBS©
, 
nBa£
-nOBS©, 
ªgRec‹d
);

543 if–
nOBS©
>0 ){

544 
ªgPªvKey
;

545 
addrFú°
;

546 
addrJmp
;

547 
VdbeOp
 *
pOp
;

548 
nKey
;

549 
KeyInfo
 *
pKI
;

551 
ªgPªvKey
 = 
pP¨£
->
nMem
+1;

552 
pP¨£
->
nMem
 +
pS‹t
->
nOBS©
;

553 
nKey
 = 
nEx¥
 - 
pS‹t
->
nOBS©
 + 
bSeq
;

554 if–
bSeq
 ){

555 
addrFú°
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_IfNŸ
, 
ªgBa£
+
nEx¥
);

557 
addrFú°
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Sequí˚Te°
, 
pS‹t
->
iECurs‹
);

559 
	`VdbeCovîage
(
v
);

560 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Com∑ª
, 
ªgPªvKey
, 
ªgBa£
, 
pS‹t
->
nOBS©
);

561 
pOp
 = 
	`sqlôe3VdbeGëOp
(
v
, 
pS‹t
->
addrS‹tIndex
);

562 if–
pP¨£
->
db
->
mÆlocFaûed
 ) ;

563 
pOp
->
p2
 = 
nKey
 + 
nD©a
;

564 
pKI
 = 
pOp
->
p4
.
pKeyInfo
;

565 
	`mem£t
(
pKI
->
aS‹tOrdî
, 0,ÖKI->
nFõld
);

566 
	`sqlôe3VdbeCh™geP4
(
v
, -1, (*)
pKI
, 
P4_KEYINFO
);

567 
	`ã°ˇ£
–
pKI
->
nXFõld
>2 );

568 
pOp
->
p4
.
pKeyInfo
 = 
	`keyInfoFromEx¥Li°
(
pP¨£
, 
pS‹t
->
pOrdîBy
, 
nOBS©
,

569 
pKI
->
nXFõld
-1);

570 
addrJmp
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

571 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Jump
, 
addrJmp
+1, 0,áddrJmp+1); 
	`VdbeCovîage
(v);

572 
pS‹t
->
œbñBkOut
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

573 
pS‹t
->
ªgRëu∫
 = ++
pP¨£
->
nMem
;

574 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Gosub
, 
pS‹t
->
ªgRëu∫
,ÖS‹t->
œbñBkOut
);

575 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Re£tS‹ãr
, 
pS‹t
->
iECurs‹
);

576 if–
iLimô
 ){

577 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IfNŸ
, 
iLimô
, 
pS‹t
->
œbñD⁄e
);

578 
	`VdbeCovîage
(
v
);

580 
	`sqlôe3VdbeJumpHîe
(
v
, 
addrFú°
);

581 
	`sqlôe3Ex¥CodeMove
(
pP¨£
, 
ªgBa£
, 
ªgPªvKey
, 
pS‹t
->
nOBS©
);

582 
	`sqlôe3VdbeJumpHîe
(
v
, 
addrJmp
);

584 if–
pS‹t
->
s‹tFœgs
 & 
SORTFLAG_U£S‹ãr
 ){

585 
›
 = 
OP_S‹ãrIn£π
;

587 
›
 = 
OP_IdxIn£π
;

589 
	`sqlôe3VdbeAddOp2
(
v
, 
›
, 
pS‹t
->
iECurs‹
, 
ªgRec‹d
);

590 if–
iLimô
 ){

591 
addr
;

592 
addr
 = 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_IfNŸZîo
, 
iLimô
, 0, 1); 
	`VdbeCovîage
(v);

593 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_La°
, 
pS‹t
->
iECurs‹
);

594 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Dñëe
, 
pS‹t
->
iECurs‹
);

595 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr
);

597 
	}
}

602 
	$codeOff£t
(

603 
Vdbe
 *
v
,

604 
iOff£t
,

605 
iC⁄töue


607 if–
iOff£t
>0 ){

608 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_IfPos
, 
iOff£t
, 
iC⁄töue
, 1); 
	`VdbeCovîage
(v);

609 
	`VdbeCommít
((
v
, "OFFSET"));

611 
	}
}

622 
	$codeDi°ö˘
(

623 
P¨£
 *
pP¨£
,

624 
iTab
,

625 
addrRïót
,

626 
N
,

627 
iMem


629 
Vdbe
 *
v
;

630 
r1
;

632 
v
 = 
pP¨£
->
pVdbe
;

633 
r1
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

634 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_Found
, 
iTab
, 
addrRïót
, 
iMem
, 
N
); 
	`VdbeCovîage
(v);

635 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_MakeRec‹d
, 
iMem
, 
N
, 
r1
);

636 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IdxIn£π
, 
iTab
, 
r1
);

637 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
r1
);

638 
	}
}

640 #i‚de‡
SQLITE_OMIT_SUBQUERY


648 
	$checkF‹Mu…iCﬁumnSñe˘Eº‹
(

649 
P¨£
 *
pP¨£
,

650 
Sñe˘De°
 *
pDe°
,

651 
nEx¥


653 
eDe°
 = 
pDe°
->eDest;

654 if–
nEx¥
>1 && (
eDe°
==
SRT_Mem
 ||ÉDe°==
SRT_Së
) ){

655 
	`sqlôe3Eº‹Msg
(
pP¨£
, "onlyá singleÑesultállowed for "

661 
	}
}

673 
	$£À˘I¬îLo›
(

674 
P¨£
 *
pP¨£
,

675 
Sñe˘
 *
p
,

676 
Ex¥Li°
 *
pELi°
,

677 
§cTab
,

678 
S‹tCtx
 *
pS‹t
,

679 
Di°ö˘Ctx
 *
pDi°ö˘
,

680 
Sñe˘De°
 *
pDe°
,

681 
iC⁄töue
,

682 
iBªak


684 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

685 
i
;

686 
hasDi°ö˘
;

687 
ªgResu…
;

688 
eDe°
 = 
pDe°
->eDest;

689 
iP¨m
 = 
pDe°
->
iSDP¨m
;

690 
nResu…Cﬁ
;

691 
nPªfixReg
 = 0;

693 
	`as£π
–
v
 );

694 
	`as£π
–
pELi°
!=0 );

695 
hasDi°ö˘
 = 
pDi°ö˘
 ?ÖDi°ö˘->
eTn˘Ty≥
 : 
WHERE_DISTINCT_NOOP
;

696 if–
pS‹t
 &&ÖS‹t->
pOrdîBy
==0 )ÖSort = 0;

697 if–
pS‹t
==0 && !
hasDi°ö˘
 ){

698 
	`as£π
–
iC⁄töue
!=0 );

699 
	`codeOff£t
(
v
, 
p
->
iOff£t
, 
iC⁄töue
);

704 
nResu…Cﬁ
 = 
pELi°
->
nEx¥
;

706 if–
pDe°
->
iSd°
==0 ){

707 if–
pS‹t
 ){

708 
nPªfixReg
 = 
pS‹t
->
pOrdîBy
->
nEx¥
;

709 if–!(
pS‹t
->
s‹tFœgs
 & 
SORTFLAG_U£S‹ãr
ËË
nPªfixReg
++;

710 
pP¨£
->
nMem
 +
nPªfixReg
;

712 
pDe°
->
iSd°
 = 
pP¨£
->
nMem
+1;

713 
pP¨£
->
nMem
 +
nResu…Cﬁ
;

714 }if–
pDe°
->
iSd°
+
nResu…Cﬁ
 > 
pP¨£
->
nMem
 ){

720 
pP¨£
->
nMem
 +
nResu…Cﬁ
;

722 
pDe°
->
nSd°
 = 
nResu…Cﬁ
;

723 
ªgResu…
 = 
pDe°
->
iSd°
;

724 if–
§cTab
>=0 ){

725 
i
=0; i<
nResu…Cﬁ
; i++){

726 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Cﬁumn
, 
§cTab
, 
i
, 
ªgResu…
+i);

727 
	`VdbeCommít
((
v
, "%s", 
pELi°
->
a
[
i
].
zName
));

729 }if–
eDe°
!=
SRT_Exi°s
 ){

733 
u8
 
e˚lFœgs
;

734 if–
eDe°
==
SRT_Mem
 ||ÉDe°==
SRT_Ouçut
 ||ÉDe°==
SRT_C‹outöe
 ){

735 
e˚lFœgs
 = 
SQLITE_ECEL_DUP
;

737 
e˚lFœgs
 = 0;

739 
	`sqlôe3Ex¥CodeEx¥Li°
(
pP¨£
, 
pELi°
, 
ªgResu…
, 0, 
e˚lFœgs
);

746 if–
hasDi°ö˘
 ){

747  
pDi°ö˘
->
eTn˘Ty≥
 ){

748 
WHERE_DISTINCT_ORDERED
: {

749 
VdbeOp
 *
pOp
;

750 
iJump
;

751 
ªgPªv
;

754 
ªgPªv
 = 
pP¨£
->
nMem
+1;

755 
pP¨£
->
nMem
 +
nResu…Cﬁ
;

763 
	`sqlôe3VdbeCh™geToNo›
(
v
, 
pDi°ö˘
->
addrTn˘
);

764 
pOp
 = 
	`sqlôe3VdbeGëOp
(
v
, 
pDi°ö˘
->
addrTn˘
);

765 
pOp
->
›code
 = 
OP_NuŒ
;

766 
pOp
->
p1
 = 1;

767 
pOp
->
p2
 = 
ªgPªv
;

769 
iJump
 = 
	`sqlôe3VdbeCuºítAddr
(
v
Ë+ 
nResu…Cﬁ
;

770 
i
=0; i<
nResu…Cﬁ
; i++){

771 
CﬁlSeq
 *
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pELi°
->
a
[
i
].
pEx¥
);

772 if–
i
<
nResu…Cﬁ
-1 ){

773 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Ne
, 
ªgResu…
+
i
, 
iJump
, 
ªgPªv
+i);

774 
	`VdbeCovîage
(
v
);

776 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Eq
, 
ªgResu…
+
i
, 
iC⁄töue
, 
ªgPªv
+i);

777 
	`VdbeCovîage
(
v
);

779 
	`sqlôe3VdbeCh™geP4
(
v
, -1, (c⁄° *)
pCﬁl
, 
P4_COLLSEQ
);

780 
	`sqlôe3VdbeCh™geP5
(
v
, 
SQLITE_NULLEQ
);

782 
	`as£π
–
	`sqlôe3VdbeCuºítAddr
(
v
)==
iJump
 || 
pP¨£
->
db
->
mÆlocFaûed
 );

783 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_C›y
, 
ªgResu…
, 
ªgPªv
, 
nResu…Cﬁ
-1);

787 
WHERE_DISTINCT_UNIQUE
: {

788 
	`sqlôe3VdbeCh™geToNo›
(
v
, 
pDi°ö˘
->
addrTn˘
);

793 
	`as£π
–
pDi°ö˘
->
eTn˘Ty≥
==
WHERE_DISTINCT_UNORDERED
 );

794 
	`codeDi°ö˘
(
pP¨£
, 
pDi°ö˘
->
èbTn˘
, 
iC⁄töue
, 
nResu…Cﬁ
,

795 
ªgResu…
);

799 if–
pS‹t
==0 ){

800 
	`codeOff£t
(
v
, 
p
->
iOff£t
, 
iC⁄töue
);

804  
eDe°
 ){

808 #i‚de‡
SQLITE_OMIT_COMPOUND_SELECT


809 
SRT_Uni⁄
: {

810 
r1
;

811 
r1
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

812 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_MakeRec‹d
, 
ªgResu…
, 
nResu…Cﬁ
, 
r1
);

813 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IdxIn£π
, 
iP¨m
, 
r1
);

814 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
r1
);

822 
SRT_Ex˚±
: {

823 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_IdxDñëe
, 
iP¨m
, 
ªgResu…
, 
nResu…Cﬁ
);

830 
SRT_Fifo
:

831 
SRT_Di°Fifo
:

832 
SRT_TabÀ
:

833 
SRT_EphemTab
: {

834 
r1
 = 
	`sqlôe3GëTempR™ge
(
pP¨£
, 
nPªfixReg
+1);

835 
	`ã°ˇ£
–
eDe°
==
SRT_TabÀ
 );

836 
	`ã°ˇ£
–
eDe°
==
SRT_EphemTab
 );

837 
	`ã°ˇ£
–
eDe°
==
SRT_Fifo
 );

838 
	`ã°ˇ£
–
eDe°
==
SRT_Di°Fifo
 );

839 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_MakeRec‹d
, 
ªgResu…
, 
nResu…Cﬁ
, 
r1
+
nPªfixReg
);

840 #i‚de‡
SQLITE_OMIT_CTE


841 if–
eDe°
==
SRT_Di°Fifo
 ){

847 
addr
 = 
	`sqlôe3VdbeCuºítAddr
(
v
) + 4;

848 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_Found
, 
iP¨m
+1, 
addr
, 
r1
, 0);

849 
	`VdbeCovîage
(
v
);

850 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IdxIn£π
, 
iP¨m
+1, 
r1
);

851 
	`as£π
–
pS‹t
==0 );

854 if–
pS‹t
 ){

855 
	`pushO¡oS‹ãr
(
pP¨£
, 
pS‹t
, 
p
, 
r1
+
nPªfixReg
,
ªgResu…
,1,nPrefixReg);

857 
r2
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

858 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NewRowid
, 
iP¨m
, 
r2
);

859 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_In£π
, 
iP¨m
, 
r1
, 
r2
);

860 
	`sqlôe3VdbeCh™geP5
(
v
, 
OPFLAG_APPEND
);

861 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
r2
);

863 
	`sqlôe3Rñó£TempR™ge
(
pP¨£
, 
r1
, 
nPªfixReg
+1);

867 #i‚de‡
SQLITE_OMIT_SUBQUERY


872 
SRT_Së
: {

873 
	`as£π
–
nResu…Cﬁ
==1 );

874 
pDe°
->
affSd°
 =

875 
	`sqlôe3Com∑ªAfföôy
(
pELi°
->
a
[0].
pEx¥
, 
pDe°
->
affSd°
);

876 if–
pS‹t
 ){

881 
	`pushO¡oS‹ãr
(
pP¨£
, 
pS‹t
, 
p
, 
ªgResu…
,ÑegResu…, 1, 
nPªfixReg
);

883 
r1
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

884 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_MakeRec‹d
, 
ªgResu…
,1,
r1
, &
pDe°
->
affSd°
, 1);

885 
	`sqlôe3Ex¥CacheAfföôyCh™ge
(
pP¨£
, 
ªgResu…
, 1);

886 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IdxIn£π
, 
iP¨m
, 
r1
);

887 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
r1
);

894 
SRT_Exi°s
: {

895 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 1, 
iP¨m
);

904 
SRT_Mem
: {

905 
	`as£π
–
nResu…Cﬁ
==1 );

906 if–
pS‹t
 ){

907 
	`pushO¡oS‹ãr
(
pP¨£
, 
pS‹t
, 
p
, 
ªgResu…
,ÑegResu…, 1, 
nPªfixReg
);

909 
	`as£π
–
ªgResu…
==
iP¨m
 );

916 
SRT_C‹outöe
:

917 
SRT_Ouçut
: {

918 
	`ã°ˇ£
–
eDe°
==
SRT_C‹outöe
 );

919 
	`ã°ˇ£
–
eDe°
==
SRT_Ouçut
 );

920 if–
pS‹t
 ){

921 
	`pushO¡oS‹ãr
(
pP¨£
, 
pS‹t
, 
p
, 
ªgResu…
,ÑegResu…, 
nResu…Cﬁ
,

922 
nPªfixReg
);

923 }if–
eDe°
==
SRT_C‹outöe
 ){

924 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Yõld
, 
pDe°
->
iSDP¨m
);

926 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 
ªgResu…
, 
nResu…Cﬁ
);

927 
	`sqlôe3Ex¥CacheAfföôyCh™ge
(
pP¨£
, 
ªgResu…
, 
nResu…Cﬁ
);

932 #i‚de‡
SQLITE_OMIT_CTE


939 
SRT_Di°Queue
:

940 
SRT_Queue
: {

941 
nKey
;

942 
r1
, 
r2
, 
r3
;

943 
addrTe°
 = 0;

944 
Ex¥Li°
 *
pSO
;

945 
pSO
 = 
pDe°
->
pOrdîBy
;

946 
	`as£π
–
pSO
 );

947 
nKey
 = 
pSO
->
nEx¥
;

948 
r1
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

949 
r2
 = 
	`sqlôe3GëTempR™ge
(
pP¨£
, 
nKey
+2);

950 
r3
 = 
r2
+
nKey
+1;

951 if–
eDe°
==
SRT_Di°Queue
 ){

955 
addrTe°
 = 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_Found
, 
iP¨m
+1, 0,

956 
ªgResu…
, 
nResu…Cﬁ
);

957 
	`VdbeCovîage
(
v
);

959 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_MakeRec‹d
, 
ªgResu…
, 
nResu…Cﬁ
, 
r3
);

960 if–
eDe°
==
SRT_Di°Queue
 ){

961 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IdxIn£π
, 
iP¨m
+1, 
r3
);

962 
	`sqlôe3VdbeCh™geP5
(
v
, 
OPFLAG_USESEEKRESULT
);

964 
i
=0; i<
nKey
; i++){

965 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_SC›y
,

966 
ªgResu…
 + 
pSO
->
a
[
i
].
u
.
x
.
iOrdîByCﬁ
 - 1,

967 
r2
+
i
);

969 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Sequí˚
, 
iP¨m
, 
r2
+
nKey
);

970 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_MakeRec‹d
, 
r2
, 
nKey
+2, 
r1
);

971 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IdxIn£π
, 
iP¨m
, 
r1
);

972 if–
addrTe°
 ) 
	`sqlôe3VdbeJumpHîe
(
v
,áddrTest);

973 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
r1
);

974 
	`sqlôe3Rñó£TempR™ge
(
pP¨£
, 
r2
, 
nKey
+2);

981 #i‡!
	`deföed
(
SQLITE_OMIT_TRIGGER
)

988 
	`as£π
–
eDe°
==
SRT_Disˇrd
 );

998 if–
pS‹t
==0 && 
p
->
iLimô
 ){

999 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_De¸JumpZîo
, 
p
->
iLimô
, 
iBªak
); 
	`VdbeCovîage
(v);

1001 
	}
}

1007 
KeyInfo
 *
	$sqlôe3KeyInfoAŒoc
(
sqlôe3
 *
db
, 
N
, 
X
){

1008 
nExåa
 = (
N
+
X
)*((
CﬁlSeq
*)+1);

1009 
KeyInfo
 *
p
 = 
	`sqlôe3MÆloc
((KeyInfoË+ 
nExåa
);

1010 if–
p
 ){

1011 
p
->
aS‹tOrdî
 = (
u8
*)&p->
aCﬁl
[
N
+
X
];

1012 
p
->
nFõld
 = (
u16
)
N
;

1013 
p
->
nXFõld
 = (
u16
)
X
;

1014 
p
->
íc
 = 
	`ENC
(
db
);

1015 
p
->
db
 = db;

1016 
p
->
nRef
 = 1;

1017 
	`mem£t
(&
p
[1], 0, 
nExåa
);

1019 
	`sqlôe3OomFau…
(
db
);

1021  
p
;

1022 
	}
}

1027 
	$sqlôe3KeyInfoUƒef
(
KeyInfo
 *
p
){

1028 if–
p
 ){

1029 
	`as£π
–
p
->
nRef
>0 );

1030 
p
->
nRef
--;

1031 if–
p
->
nRef
==0 ) 
	`sqlôe3DbFªe
(0,Ö);

1033 
	}
}

1038 
KeyInfo
 *
	$sqlôe3KeyInfoRef
(
KeyInfo
 *
p
){

1039 if–
p
 ){

1040 
	`as£π
–
p
->
nRef
>0 );

1041 
p
->
nRef
++;

1043  
p
;

1044 
	}
}

1046 #ifde‡
SQLITE_DEBUG


1053 
	$sqlôe3KeyInfoIsWrôóbÀ
(
KeyInfo
 *
p
){ Ö->
nRef
==1; 
	}
}

1070 
KeyInfo
 *
	$keyInfoFromEx¥Li°
(

1071 
P¨£
 *
pP¨£
,

1072 
Ex¥Li°
 *
pLi°
,

1073 
iSèπ
,

1074 
nExåa


1076 
nEx¥
;

1077 
KeyInfo
 *
pInfo
;

1078 
Ex¥Li°_ôem
 *
pIãm
;

1079 
sqlôe3
 *
db
 = 
pP¨£
->db;

1080 
i
;

1082 
nEx¥
 = 
pLi°
->nExpr;

1083 
pInfo
 = 
	`sqlôe3KeyInfoAŒoc
(
db
, 
nEx¥
-
iSèπ
, 
nExåa
+1);

1084 if–
pInfo
 ){

1085 
	`as£π
–
	`sqlôe3KeyInfoIsWrôóbÀ
(
pInfo
) );

1086 
i
=
iSèπ
, 
pIãm
=
pLi°
->
a
+iSèπ; i<
nEx¥
; i++,ÖItem++){

1087 
CﬁlSeq
 *
pCﬁl
;

1088 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pIãm
->
pEx¥
);

1089 if–!
pCﬁl
 )ÖCﬁ»
db
->
pDÊtCﬁl
;

1090 
pInfo
->
aCﬁl
[
i
-
iSèπ
] = 
pCﬁl
;

1091 
pInfo
->
aS‹tOrdî
[
i
-
iSèπ
] = 
pIãm
->
s‹tOrdî
;

1094  
pInfo
;

1095 
	}
}

1100 c⁄° *
	$£À˘OpName
(
id
){

1101 *
z
;

1102  
id
 ){

1103 
TK_ALL
: 
z
 = "UNION ALL"; ;

1104 
TK_INTERSECT
: 
z
 = "INTERSECT"; ;

1105 
TK_EXCEPT
: 
z
 = "EXCEPT"; ;

1106 : 
z
 = "UNION"; ;

1108  
z
;

1109 
	}
}

1111 #i‚de‡
SQLITE_OMIT_EXPLAIN


1122 
	$ex∂aöTempTabÀ
(
P¨£
 *
pP¨£
, c⁄° *
zUßge
){

1123 if–
pP¨£
->
ex∂aö
==2 ){

1124 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1125 *
zMsg
 = 
	`sqlôe3MPrötf
(
pP¨£
->
db
, "USE TEMP B-TREE FOR %s", 
zUßge
);

1126 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Ex∂aö
, 
pP¨£
->
iSñe˘Id
, 0, 0, 
zMsg
, 
P4_DYNAMIC
);

1128 
	}
}

1137 
	#ex∂aöSëI¡egî
(
a
, 
b
Ë®
	)
b

1141 
	#ex∂aöTempTabÀ
(
y
,
z
)

	)

1142 
	#ex∂aöSëI¡egî
(
y
,
z
)

	)

1145 #i‡!
deföed
(
SQLITE_OMIT_EXPLAIN
Ë&& !deföed(
SQLITE_OMIT_COMPOUND_SELECT
)

1160 
	$ex∂aöComposôe
(

1161 
P¨£
 *
pP¨£
,

1162 
›
,

1163 
iSub1
,

1164 
iSub2
,

1165 
bU£Tmp


1167 
	`as£π
–
›
==
TK_UNION
 || op==
TK_EXCEPT
 || op==
TK_INTERSECT
 || op==
TK_ALL
 );

1168 if–
pP¨£
->
ex∂aö
==2 ){

1169 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1170 *
zMsg
 = 
	`sqlôe3MPrötf
(

1171 
pP¨£
->
db
, "COMPOUND SUBQUERIES %d AND %d %s(%s)", 
iSub1
, 
iSub2
,

1172 
bU£Tmp
?"USING TEMP B-TREE ":"", 
	`£À˘OpName
(
›
)

1174 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Ex∂aö
, 
pP¨£
->
iSñe˘Id
, 0, 0, 
zMsg
, 
P4_DYNAMIC
);

1176 
	}
}

1179 
	#ex∂aöComposôe
(
v
,
w
,
x
,
y
,
z
)

	)

1188 
	$gíî©eS‹tTaû
(

1189 
P¨£
 *
pP¨£
,

1190 
Sñe˘
 *
p
,

1191 
S‹tCtx
 *
pS‹t
,

1192 
nCﬁumn
,

1193 
Sñe˘De°
 *
pDe°


1195 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1196 
addrBªak
 = 
pS‹t
->
œbñD⁄e
;

1197 
addrC⁄töue
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

1198 
addr
;

1199 
addrOn˚
 = 0;

1200 
iTab
;

1201 
Ex¥Li°
 *
pOrdîBy
 = 
pS‹t
->pOrderBy;

1202 
eDe°
 = 
pDe°
->eDest;

1203 
iP¨m
 = 
pDe°
->
iSDP¨m
;

1204 
ªgRow
;

1205 
ªgRowid
;

1206 
nKey
;

1207 
iS‹tTab
;

1208 
nS‹tD©a
;

1209 
i
;

1210 
bSeq
;

1211 #ifde‡
SQLITE_ENABLE_EXPLAIN_COMMENTS


1212 
Ex¥Li°_ôem
 *
aOutEx
 = 
p
->
pELi°
->
a
;

1215 
	`as£π
–
addrBªak
<0 );

1216 if–
pS‹t
->
œbñBkOut
 ){

1217 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Gosub
, 
pS‹t
->
ªgRëu∫
,ÖS‹t->
œbñBkOut
);

1218 
	`sqlôe3VdbeGŸo
(
v
, 
addrBªak
);

1219 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
pS‹t
->
œbñBkOut
);

1221 
iTab
 = 
pS‹t
->
iECurs‹
;

1222 if–
eDe°
==
SRT_Ouçut
 ||ÉDe°==
SRT_C‹outöe
 ){

1223 
ªgRowid
 = 0;

1224 
ªgRow
 = 
pDe°
->
iSd°
;

1225 
nS‹tD©a
 = 
nCﬁumn
;

1227 
ªgRowid
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

1228 
ªgRow
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

1229 
nS‹tD©a
 = 1;

1231 
nKey
 = 
pOrdîBy
->
nEx¥
 - 
pS‹t
->
nOBS©
;

1232 if–
pS‹t
->
s‹tFœgs
 & 
SORTFLAG_U£S‹ãr
 ){

1233 
ªgS‹tOut
 = ++
pP¨£
->
nMem
;

1234 
iS‹tTab
 = 
pP¨£
->
nTab
++;

1235 if–
pS‹t
->
œbñBkOut
 ){

1236 
addrOn˚
 = 
	`sqlôe3CodeOn˚
(
pP¨£
); 
	`VdbeCovîage
(
v
);

1238 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_O≥nP£udo
, 
iS‹tTab
, 
ªgS‹tOut
, 
nKey
+1+
nS‹tD©a
);

1239 if–
addrOn˚
 ) 
	`sqlôe3VdbeJumpHîe
(
v
,áddrOnce);

1240 
addr
 = 1 + 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_S‹ãrS‹t
, 
iTab
, 
addrBªak
);

1241 
	`VdbeCovîage
(
v
);

1242 
	`codeOff£t
(
v
, 
p
->
iOff£t
, 
addrC⁄töue
);

1243 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_S‹ãrD©a
, 
iTab
, 
ªgS‹tOut
, 
iS‹tTab
);

1244 
bSeq
 = 0;

1246 
addr
 = 1 + 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_S‹t
, 
iTab
, 
addrBªak
); 
	`VdbeCovîage
(v);

1247 
	`codeOff£t
(
v
, 
p
->
iOff£t
, 
addrC⁄töue
);

1248 
iS‹tTab
 = 
iTab
;

1249 
bSeq
 = 1;

1251 
i
=0; i<
nS‹tD©a
; i++){

1252 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Cﬁumn
, 
iS‹tTab
, 
nKey
+
bSeq
+
i
, 
ªgRow
+i);

1253 
	`VdbeCommít
((
v
, "%s", 
aOutEx
[
i
].
zName
 ?áOutEx[i].zNamê:áOutEx[i].
zS∑n
));

1255  
eDe°
 ){

1256 
SRT_EphemTab
: {

1257 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NewRowid
, 
iP¨m
, 
ªgRowid
);

1258 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_In£π
, 
iP¨m
, 
ªgRow
, 
ªgRowid
);

1259 
	`sqlôe3VdbeCh™geP5
(
v
, 
OPFLAG_APPEND
);

1262 #i‚de‡
SQLITE_OMIT_SUBQUERY


1263 
SRT_Së
: {

1264 
	`as£π
–
nCﬁumn
==1 );

1265 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_MakeRec‹d
, 
ªgRow
, 1, 
ªgRowid
,

1266 &
pDe°
->
affSd°
, 1);

1267 
	`sqlôe3Ex¥CacheAfföôyCh™ge
(
pP¨£
, 
ªgRow
, 1);

1268 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IdxIn£π
, 
iP¨m
, 
ªgRowid
);

1271 
SRT_Mem
: {

1272 
	`as£π
–
nCﬁumn
==1 );

1273 
	`sqlôe3Ex¥CodeMove
(
pP¨£
, 
ªgRow
, 
iP¨m
, 1);

1279 
	`as£π
–
eDe°
==
SRT_Ouçut
 ||ÉDe°==
SRT_C‹outöe
 );

1280 
	`ã°ˇ£
–
eDe°
==
SRT_Ouçut
 );

1281 
	`ã°ˇ£
–
eDe°
==
SRT_C‹outöe
 );

1282 if–
eDe°
==
SRT_Ouçut
 ){

1283 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 
pDe°
->
iSd°
, 
nCﬁumn
);

1284 
	`sqlôe3Ex¥CacheAfföôyCh™ge
(
pP¨£
, 
pDe°
->
iSd°
, 
nCﬁumn
);

1286 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Yõld
, 
pDe°
->
iSDP¨m
);

1291 if–
ªgRowid
 ){

1292 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgRow
);

1293 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgRowid
);

1297 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
addrC⁄töue
);

1298 if–
pS‹t
->
s‹tFœgs
 & 
SORTFLAG_U£S‹ãr
 ){

1299 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_S‹ãrNext
, 
iTab
, 
addr
); 
	`VdbeCovîage
(v);

1301 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Next
, 
iTab
, 
addr
); 
	`VdbeCovîage
(v);

1303 if–
pS‹t
->
ªgRëu∫
 ) 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Rëu∫
,ÖSort->regReturn);

1304 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
addrBªak
);

1305 
	}
}

1331 #ifde‡
SQLITE_ENABLE_COLUMN_METADATA


1332 
	#cﬁumnTy≥
(
A
,
B
,
C
,
D
,
E
,
F
Ë
	`cﬁumnTy≥Im∂
(A,B,C,D,E,F)

	)

1334 
	#cﬁumnTy≥
(
A
,
B
,
C
,
D
,
E
,
F
Ë
	`cﬁumnTy≥Im∂
(A,B,F)

	)

1336 c⁄° *
cﬁumnTy≥Im∂
(

1337 
NameC⁄ãxt
 *
pNC
,

1338 
Ex¥
 *
pEx¥
,

1339 #ifde‡
SQLITE_ENABLE_COLUMN_METADATA


1340 c⁄° **
pzOrigDb
,

1341 c⁄° **
pzOrigTab
,

1342 c⁄° **
pzOrigCﬁ
,

1344 
u8
 *
pE°Width


1346 c⁄° *
	gzTy≥
 = 0;

1347 
	gj
;

1348 
u8
 
	ge°Width
 = 1;

1349 #ifde‡
SQLITE_ENABLE_COLUMN_METADATA


1350 c⁄° *
	gzOrigDb
 = 0;

1351 c⁄° *
	gzOrigTab
 = 0;

1352 c⁄° *
	gzOrigCﬁ
 = 0;

1355 
as£π
–
pEx¥
!=0 );

1356 
as£π
–
pNC
->
pSrcLi°
!=0 );

1357  
	gpEx¥
->
	g›
 ){

1358 
	gTK_AGG_COLUMN
:

1359 
TK_COLUMN
: {

1364 
TabÀ
 *
pTab
 = 0;

1365 
Sñe˘
 *
	gpS
 = 0;

1366 
	giCﬁ
 = 
pEx¥
->
iCﬁumn
;

1367 
ã°ˇ£
–
pEx¥
->
›
==
TK_AGG_COLUMN
 );

1368 
ã°ˇ£
–
pEx¥
->
›
==
TK_COLUMN
 );

1369  
	gpNC
 && !
	gpTab
 ){

1370 
SrcLi°
 *
	gpTabLi°
 = 
pNC
->
pSrcLi°
;

1371 
	gj
=0;j<
	gpTabLi°
->
	gnSrc
 &&ÖTabLi°->
	ga
[
j
].
	giCurs‹
!=
pEx¥
->
iTabÀ
;j++);

1372 if–
	gj
<
	gpTabLi°
->
	gnSrc
 ){

1373 
	gpTab
 = 
pTabLi°
->
a
[
j
].
pTab
;

1374 
	gpS
 = 
pTabLi°
->
a
[
j
].
pSñe˘
;

1376 
	gpNC
 = 
pNC
->
pNext
;

1380 if–
	gpTab
==0 ){

1401 
as£π
–
pTab
 && 
pEx¥
->pTab==pTab );

1402 if–
	gpS
 ){

1407 if–
	giCﬁ
>=0 && 
ALWAYS
(
iCﬁ
<
pS
->
pELi°
->
nEx¥
) ){

1415 
NameC⁄ãxt
 
sNC
;

1416 
Ex¥
 *
	gp
 = 
pS
->
pELi°
->
a
[
iCﬁ
].
pEx¥
;

1417 
	gsNC
.
	gpSrcLi°
 = 
pS
->
pSrc
;

1418 
	gsNC
.
	gpNext
 = 
pNC
;

1419 
	gsNC
.
	gpP¨£
 = 
pNC
->
pP¨£
;

1420 
	gzTy≥
 = 
cﬁumnTy≥
(&
sNC
, 
p
,&
zOrigDb
,&
zOrigTab
,&
zOrigCﬁ
, &
e°Width
);

1422 }if–
	gpTab
->
	gpSchema
 ){

1424 
as£π
–!
pS
 );

1425 if–
	giCﬁ
<0 ) iCﬁ = 
pTab
->
iPKey
;

1426 
as£π
–
iCﬁ
==-1 || (iCﬁ>=0 && iCﬁ<
pTab
->
nCﬁ
) );

1427 #ifde‡
SQLITE_ENABLE_COLUMN_METADATA


1428 if–
	giCﬁ
<0 ){

1429 
	gzTy≥
 = "INTEGER";

1430 
	gzOrigCﬁ
 = "rowid";

1432 
	gzOrigCﬁ
 = 
pTab
->
aCﬁ
[
iCﬁ
].
zName
;

1433 
	gzTy≥
 = 
sqlôe3CﬁumnTy≥
(&
pTab
->
aCﬁ
[
iCﬁ
],0);

1434 
	ge°Width
 = 
pTab
->
aCﬁ
[
iCﬁ
].
szE°
;

1436 
	gzOrigTab
 = 
pTab
->
zName
;

1437 if–
	gpNC
->
	gpP¨£
 ){

1438 
	giDb
 = 
sqlôe3SchemaToIndex
(
pNC
->
pP¨£
->
db
, 
pTab
->
pSchema
);

1439 
	gzOrigDb
 = 
pNC
->
pP¨£
->
db
->
aDb
[
iDb
].
zName
;

1442 if–
	giCﬁ
<0 ){

1443 
	gzTy≥
 = "INTEGER";

1445 
	gzTy≥
 = 
sqlôe3CﬁumnTy≥
(&
pTab
->
aCﬁ
[
iCﬁ
],0);

1446 
	ge°Width
 = 
pTab
->
aCﬁ
[
iCﬁ
].
szE°
;

1452 #i‚de‡
SQLITE_OMIT_SUBQUERY


1453 
	gTK_SELECT
: {

1458 
NameC⁄ãxt
 
sNC
;

1459 
Sñe˘
 *
	gpS
 = 
pEx¥
->
x
.
pSñe˘
;

1460 
Ex¥
 *
	gp
 = 
pS
->
pELi°
->
a
[0].
pEx¥
;

1461 
as£π
–
Ex¥HasPr›îty
(
pEx¥
, 
EP_xIsSñe˘
) );

1462 
	gsNC
.
	gpSrcLi°
 = 
pS
->
pSrc
;

1463 
	gsNC
.
	gpNext
 = 
pNC
;

1464 
	gsNC
.
	gpP¨£
 = 
pNC
->
pP¨£
;

1465 
	gzTy≥
 = 
cﬁumnTy≥
(&
sNC
, 
p
, &
zOrigDb
, &
zOrigTab
, &
zOrigCﬁ
, &
e°Width
);

1471 #ifde‡
SQLITE_ENABLE_COLUMN_METADATA


1472 if–
	gpzOrigDb
 ){

1473 
as£π
–
pzOrigTab
 && 
pzOrigCﬁ
 );

1474 *
	gpzOrigDb
 = 
zOrigDb
;

1475 *
	gpzOrigTab
 = 
zOrigTab
;

1476 *
	gpzOrigCﬁ
 = 
zOrigCﬁ
;

1479 if–
	gpE°Width
 ) *pE°Width = 
e°Width
;

1480  
	gzTy≥
;

1487 
	$gíî©eCﬁumnTy≥s
(

1488 
P¨£
 *
pP¨£
,

1489 
SrcLi°
 *
pTabLi°
,

1490 
Ex¥Li°
 *
pELi°


1492 #i‚de‡
SQLITE_OMIT_DECLTYPE


1493 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1494 
i
;

1495 
NameC⁄ãxt
 
sNC
;

1496 
sNC
.
pSrcLi°
 = 
pTabLi°
;

1497 
sNC
.
pP¨£
 =ÖParse;

1498 
i
=0; i<
pELi°
->
nEx¥
; i++){

1499 
Ex¥
 *
p
 = 
pELi°
->
a
[
i
].
pEx¥
;

1500 c⁄° *
zTy≥
;

1501 #ifde‡
SQLITE_ENABLE_COLUMN_METADATA


1502 c⁄° *
zOrigDb
 = 0;

1503 c⁄° *
zOrigTab
 = 0;

1504 c⁄° *
zOrigCﬁ
 = 0;

1505 
zTy≥
 = 
	`cﬁumnTy≥
(&
sNC
, 
p
, &
zOrigDb
, &
zOrigTab
, &
zOrigCﬁ
, 0);

1511 
	`sqlôe3VdbeSëCﬁName
(
v
, 
i
, 
COLNAME_DATABASE
, 
zOrigDb
, 
SQLITE_TRANSIENT
);

1512 
	`sqlôe3VdbeSëCﬁName
(
v
, 
i
, 
COLNAME_TABLE
, 
zOrigTab
, 
SQLITE_TRANSIENT
);

1513 
	`sqlôe3VdbeSëCﬁName
(
v
, 
i
, 
COLNAME_COLUMN
, 
zOrigCﬁ
, 
SQLITE_TRANSIENT
);

1515 
zTy≥
 = 
	`cﬁumnTy≥
(&
sNC
, 
p
, 0, 0, 0, 0);

1517 
	`sqlôe3VdbeSëCﬁName
(
v
, 
i
, 
COLNAME_DECLTYPE
, 
zTy≥
, 
SQLITE_TRANSIENT
);

1520 
	}
}

1527 
	$gíî©eCﬁumnNames
(

1528 
P¨£
 *
pP¨£
,

1529 
SrcLi°
 *
pTabLi°
,

1530 
Ex¥Li°
 *
pELi°


1532 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1533 
i
, 
j
;

1534 
sqlôe3
 *
db
 = 
pP¨£
->db;

1535 
fuŒNames
, 
sh‹tNames
;

1537 #i‚de‡
SQLITE_OMIT_EXPLAIN


1539 if–
pP¨£
->
ex∂aö
 ){

1544 if–
pP¨£
->
cﬁNamesSë
 || 
db
->
mÆlocFaûed
 ) ;

1545 
	`as£π
–
v
!=0 );

1546 
	`as£π
–
pTabLi°
!=0 );

1547 
pP¨£
->
cﬁNamesSë
 = 1;

1548 
fuŒNames
 = (
db
->
Êags
 & 
SQLITE_FuŒCﬁNames
)!=0;

1549 
sh‹tNames
 = (
db
->
Êags
 & 
SQLITE_Sh‹tCﬁNames
)!=0;

1550 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 
pELi°
->
nEx¥
);

1551 
i
=0; i<
pELi°
->
nEx¥
; i++){

1552 
Ex¥
 *
p
;

1553 
p
 = 
pELi°
->
a
[
i
].
pEx¥
;

1554 if–
	`NEVER
(
p
==0) ) ;

1555 if–
pELi°
->
a
[
i
].
zName
 ){

1556 *
zName
 = 
pELi°
->
a
[
i
].zName;

1557 
	`sqlôe3VdbeSëCﬁName
(
v
, 
i
, 
COLNAME_NAME
, 
zName
, 
SQLITE_TRANSIENT
);

1558 }if–
p
->
›
==
TK_COLUMN
 ||Ö->›==
TK_AGG_COLUMN
 ){

1559 
TabÀ
 *
pTab
;

1560 *
zCﬁ
;

1561 
iCﬁ
 = 
p
->
iCﬁumn
;

1562 
j
=0; 
	`ALWAYS
(j<
pTabLi°
->
nSrc
); j++){

1563 if–
pTabLi°
->
a
[
j
].
iCurs‹
==
p
->
iTabÀ
 ) ;

1565 
	`as£π
–
j
<
pTabLi°
->
nSrc
 );

1566 
pTab
 = 
pTabLi°
->
a
[
j
].pTab;

1567 if–
iCﬁ
<0 ) iCﬁ = 
pTab
->
iPKey
;

1568 
	`as£π
–
iCﬁ
==-1 || (iCﬁ>=0 && iCﬁ<
pTab
->
nCﬁ
) );

1569 if–
iCﬁ
<0 ){

1570 
zCﬁ
 = "rowid";

1572 
zCﬁ
 = 
pTab
->
aCﬁ
[
iCﬁ
].
zName
;

1574 if–!
sh‹tNames
 && !
fuŒNames
 ){

1575 
	`sqlôe3VdbeSëCﬁName
(
v
, 
i
, 
COLNAME_NAME
,

1576 
	`sqlôe3DbSåDup
(
db
, 
pELi°
->
a
[
i
].
zS∑n
), 
SQLITE_DYNAMIC
);

1577 }if–
fuŒNames
 ){

1578 *
zName
 = 0;

1579 
zName
 = 
	`sqlôe3MPrötf
(
db
, "%s.%s", 
pTab
->zName, 
zCﬁ
);

1580 
	`sqlôe3VdbeSëCﬁName
(
v
, 
i
, 
COLNAME_NAME
, 
zName
, 
SQLITE_DYNAMIC
);

1582 
	`sqlôe3VdbeSëCﬁName
(
v
, 
i
, 
COLNAME_NAME
, 
zCﬁ
, 
SQLITE_TRANSIENT
);

1585 c⁄° *
z
 = 
pELi°
->
a
[
i
].
zS∑n
;

1586 
z
 = z==0 ? 
	`sqlôe3MPrötf
(
db
, "cﬁumn%d", 
i
+1Ë: 
	`sqlôe3DbSåDup
(db, z);

1587 
	`sqlôe3VdbeSëCﬁName
(
v
, 
i
, 
COLNAME_NAME
, 
z
, 
SQLITE_DYNAMIC
);

1590 
	`gíî©eCﬁumnTy≥s
(
pP¨£
, 
pTabLi°
, 
pELi°
);

1591 
	}
}

1606 
	$sqlôe3CﬁumnsFromEx¥Li°
(

1607 
P¨£
 *
pP¨£
,

1608 
Ex¥Li°
 *
pELi°
,

1609 
i16
 *
≤Cﬁ
,

1610 
Cﬁumn
 **
∑Cﬁ


1612 
sqlôe3
 *
db
 = 
pP¨£
->db;

1613 
i
, 
j
;

1614 
u32
 
˙t
;

1615 
Cﬁumn
 *
aCﬁ
, *
pCﬁ
;

1616 
nCﬁ
;

1617 
Ex¥
 *
p
;

1618 *
zName
;

1619 
nName
;

1620 
Hash
 
ht
;

1622 
	`sqlôe3HashInô
(&
ht
);

1623 if–
pELi°
 ){

1624 
nCﬁ
 = 
pELi°
->
nEx¥
;

1625 
aCﬁ
 = 
	`sqlôe3DbMÆlocZîo
(
db
, ◊Cﬁ[0])*
nCﬁ
);

1626 
	`ã°ˇ£
–
aCﬁ
==0 );

1628 
nCﬁ
 = 0;

1629 
aCﬁ
 = 0;

1631 
	`as£π
–
nCﬁ
==(
i16
)nCol );

1632 *
≤Cﬁ
 = 
nCﬁ
;

1633 *
∑Cﬁ
 = 
aCﬁ
;

1635 
i
=0, 
pCﬁ
=
aCﬁ
; i<
nCﬁ
 && !
db
->
mÆlocFaûed
; i++,ÖCol++){

1638 
p
 = 
	`sqlôe3Ex¥SkùCﬁœã
(
pELi°
->
a
[
i
].
pEx¥
);

1639 if–(
zName
 = 
pELi°
->
a
[
i
].zName)!=0 ){

1642 
Ex¥
 *
pCﬁEx¥
 = 
p
;

1643 
TabÀ
 *
pTab
;

1644  
pCﬁEx¥
->
›
==
TK_DOT
 ){

1645 
pCﬁEx¥
 =ÖCﬁEx¥->
pRight
;

1646 
	`as£π
–
pCﬁEx¥
!=0 );

1648 if–
pCﬁEx¥
->
›
==
TK_COLUMN
 && 
	`ALWAYS
’CﬁEx¥->
pTab
!=0) ){

1650 
iCﬁ
 = 
pCﬁEx¥
->
iCﬁumn
;

1651 
pTab
 = 
pCﬁEx¥
->pTab;

1652 if–
iCﬁ
<0 ) iCﬁ = 
pTab
->
iPKey
;

1653 
zName
 = 
iCﬁ
>=0 ? 
pTab
->
aCﬁ
[iCol].zName : "rowid";

1654 }if–
pCﬁEx¥
->
›
==
TK_ID
 ){

1655 
	`as£π
–!
	`Ex¥HasPr›îty
(
pCﬁEx¥
, 
EP_I¡VÆue
) );

1656 
zName
 = 
pCﬁEx¥
->
u
.
zTokí
;

1659 
zName
 = 
pELi°
->
a
[
i
].
zS∑n
;

1662 
zName
 = 
	`sqlôe3MPrötf
(
db
, "%s", zName);

1667 
˙t
 = 0;

1668  
zName
 && 
	`sqlôe3HashFöd
(&
ht
, zName)!=0 ){

1669 
nName
 = 
	`sqlôe3SåÀn30
(
zName
);

1670 if–
nName
>0 ){

1671 
j
=
nName
-1; j>0 && 
	`sqlôe3Isdigô
(
zName
[j]); j--){}

1672 if–
zName
[
j
]==':' ) 
nName
 = j;

1674 
zName
 = 
	`sqlôe3MPrötf
(
db
, "%.*z:%u", 
nName
, zName, ++
˙t
);

1675 if–
˙t
>3 ) 
	`sqlôe3_øndom√ss
((cnt), &cnt);

1677 
pCﬁ
->
zName
 = zName;

1678 
	`sqlôe3CﬁumnPr›îtõsFromName
(0, 
pCﬁ
);

1679 if–
zName
 && 
	`sqlôe3HashIn£π
(&
ht
, zName, 
pCﬁ
)==pCol ){

1680 
	`sqlôe3OomFau…
(
db
);

1683 
	`sqlôe3HashCÀ¨
(&
ht
);

1684 if–
db
->
mÆlocFaûed
 ){

1685 
j
=0; j<
i
; j++){

1686 
	`sqlôe3DbFªe
(
db
, 
aCﬁ
[
j
].
zName
);

1688 
	`sqlôe3DbFªe
(
db
, 
aCﬁ
);

1689 *
∑Cﬁ
 = 0;

1690 *
≤Cﬁ
 = 0;

1691  
SQLITE_NOMEM_BKPT
;

1693  
SQLITE_OK
;

1694 
	}
}

1707 
	$sqlôe3Sñe˘AddCﬁumnTy≥AndCﬁœti⁄
(

1708 
P¨£
 *
pP¨£
,

1709 
TabÀ
 *
pTab
,

1710 
Sñe˘
 *
pSñe˘


1712 
sqlôe3
 *
db
 = 
pP¨£
->db;

1713 
NameC⁄ãxt
 
sNC
;

1714 
Cﬁumn
 *
pCﬁ
;

1715 
CﬁlSeq
 *
pCﬁl
;

1716 
i
;

1717 
Ex¥
 *
p
;

1718 
Ex¥Li°_ôem
 *
a
;

1719 
u64
 
szAŒ
 = 0;

1721 
	`as£π
–
pSñe˘
!=0 );

1722 
	`as£π
–(
pSñe˘
->
£lFœgs
 & 
SF_Resﬁved
)!=0 );

1723 
	`as£π
–
pTab
->
nCﬁ
==
pSñe˘
->
pELi°
->
nEx¥
 || 
db
->
mÆlocFaûed
 );

1724 if–
db
->
mÆlocFaûed
 ) ;

1725 
	`mem£t
(&
sNC
, 0, (sNC));

1726 
sNC
.
pSrcLi°
 = 
pSñe˘
->
pSrc
;

1727 
a
 = 
pSñe˘
->
pELi°
->a;

1728 
i
=0, 
pCﬁ
=
pTab
->
aCﬁ
; i<pTab->
nCﬁ
; i++,ÖCol++){

1729 c⁄° *
zTy≥
;

1730 
n
, 
m
;

1731 
p
 = 
a
[
i
].
pEx¥
;

1732 
zTy≥
 = 
	`cﬁumnTy≥
(&
sNC
, 
p
, 0, 0, 0, &
pCﬁ
->
szE°
);

1733 
szAŒ
 +
pCﬁ
->
szE°
;

1734 
pCﬁ
->
afföôy
 = 
	`sqlôe3Ex¥Afföôy
(
p
);

1735 if–
zTy≥
 && (
m
 = 
	`sqlôe3SåÀn30
(zType))>0 ){

1736 
n
 = 
	`sqlôe3SåÀn30
(
pCﬁ
->
zName
);

1737 
pCﬁ
->
zName
 = 
	`sqlôe3DbRóŒocOrFªe
(
db
,ÖCﬁ->zName, 
n
+
m
+2);

1738 if–
pCﬁ
->
zName
 ){

1739 
	`mem˝y
(&
pCﬁ
->
zName
[
n
+1], 
zTy≥
, 
m
+1);

1740 
pCﬁ
->
cﬁFœgs
 |
COLFLAG_HASTYPE
;

1743 if–
pCﬁ
->
afföôy
==0 )ÖCﬁ->afföôy = 
SQLITE_AFF_BLOB
;

1744 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
p
);

1745 if–
pCﬁl
 && 
pCﬁ
->
zCﬁl
==0 ){

1746 
pCﬁ
->
zCﬁl
 = 
	`sqlôe3DbSåDup
(
db
, 
pCﬁl
->
zName
);

1749 
pTab
->
szTabRow
 = 
	`sqlôe3LogE°
(
szAŒ
*4);

1750 
	}
}

1756 
TabÀ
 *
	$sqlôe3Resu…SëOfSñe˘
(
P¨£
 *
pP¨£
, 
Sñe˘
 *
pSñe˘
){

1757 
TabÀ
 *
pTab
;

1758 
sqlôe3
 *
db
 = 
pP¨£
->db;

1759 
ßvedFœgs
;

1761 
ßvedFœgs
 = 
db
->
Êags
;

1762 
db
->
Êags
 &~
SQLITE_FuŒCﬁNames
;

1763 
db
->
Êags
 |
SQLITE_Sh‹tCﬁNames
;

1764 
	`sqlôe3Sñe˘Pªp
(
pP¨£
, 
pSñe˘
, 0);

1765 if–
pP¨£
->
nEº
 )  0;

1766  
pSñe˘
->
pPri‹
 )ÖSelect =ÖSelect->pPrior;

1767 
db
->
Êags
 = 
ßvedFœgs
;

1768 
pTab
 = 
	`sqlôe3DbMÆlocZîo
(
db
, (
TabÀ
) );

1769 if–
pTab
==0 ){

1774 
	`as£π
–
db
->
lookaside
.
bDißbÀ
 );

1775 
pTab
->
nRef
 = 1;

1776 
pTab
->
zName
 = 0;

1777 
pTab
->
nRowLogE°
 = 200; 
	`as£π
–200==
	`sqlôe3LogE°
(1048576) );

1778 
	`sqlôe3CﬁumnsFromEx¥Li°
(
pP¨£
, 
pSñe˘
->
pELi°
, &
pTab
->
nCﬁ
, &pTab->
aCﬁ
);

1779 
	`sqlôe3Sñe˘AddCﬁumnTy≥AndCﬁœti⁄
(
pP¨£
, 
pTab
, 
pSñe˘
);

1780 
pTab
->
iPKey
 = -1;

1781 if–
db
->
mÆlocFaûed
 ){

1782 
	`sqlôe3DñëeTabÀ
(
db
, 
pTab
);

1785  
pTab
;

1786 
	}
}

1792 
SQLITE_NOINLINE
 
Vdbe
 *
	$ÆlocVdbe
(
P¨£
 *
pP¨£
){

1793 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
 = 
	`sqlôe3VdbeCª©e
(pParse);

1794 if–
v
 ) 
	`sqlôe3VdbeAddOp0
(v, 
OP_Inô
);

1795 if–
pP¨£
->
pT›Àvñ
==0

1796 && 
	`O±imiz©i⁄E«bÀd
(
pP¨£
->
db
,
SQLITE_Fa˘‹OutC⁄°
)

1798 
pP¨£
->
okC⁄°Fa˘‹
 = 1;

1800  
v
;

1801 
	}
}

1802 
Vdbe
 *
	$sqlôe3GëVdbe
(
P¨£
 *
pP¨£
){

1803 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1804  
v
 ? v : 
	`ÆlocVdbe
(
pP¨£
);

1805 
	}
}

1831 
	$compuãLimôRegi°îs
(
P¨£
 *
pP¨£
, 
Sñe˘
 *
p
, 
iBªak
){

1832 
Vdbe
 *
v
 = 0;

1833 
iLimô
 = 0;

1834 
iOff£t
;

1835 
n
;

1836 if–
p
->
iLimô
 ) ;

1844 
	`sqlôe3Ex¥CacheCÀ¨
(
pP¨£
);

1845 
	`as£π
–
p
->
pOff£t
==0 ||Ö->
pLimô
!=0 );

1846 if–
p
->
pLimô
 ){

1847 
p
->
iLimô
 = iLimô = ++
pP¨£
->
nMem
;

1848 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1849 
	`as£π
–
v
!=0 );

1850 if–
	`sqlôe3Ex¥IsI¡egî
(
p
->
pLimô
, &
n
) ){

1851 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 
n
, 
iLimô
);

1852 
	`VdbeCommít
((
v
, "LIMIT counter"));

1853 if–
n
==0 ){

1854 
	`sqlôe3VdbeGŸo
(
v
, 
iBªak
);

1855 }if–
n
>=0 && 
p
->
nSñe˘Row
>
	`sqlôe3LogE°
((
u64
)n) ){

1856 
p
->
nSñe˘Row
 = 
	`sqlôe3LogE°
((
u64
)
n
);

1857 
p
->
£lFœgs
 |
SF_FixedLimô
;

1860 
	`sqlôe3Ex¥Code
(
pP¨£
, 
p
->
pLimô
, 
iLimô
);

1861 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Mu°BeI¡
, 
iLimô
); 
	`VdbeCovîage
(v);

1862 
	`VdbeCommít
((
v
, "LIMIT counter"));

1863 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IfNŸ
, 
iLimô
, 
iBªak
); 
	`VdbeCovîage
(v);

1865 if–
p
->
pOff£t
 ){

1866 
p
->
iOff£t
 = iOff£à++
pP¨£
->
nMem
;

1867 
pP¨£
->
nMem
++;

1868 
	`sqlôe3Ex¥Code
(
pP¨£
, 
p
->
pOff£t
, 
iOff£t
);

1869 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Mu°BeI¡
, 
iOff£t
); 
	`VdbeCovîage
(v);

1870 
	`VdbeCommít
((
v
, "OFFSET counter"));

1871 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Off£tLimô
, 
iLimô
, 
iOff£t
+1, iOffset);

1872 
	`VdbeCommít
((
v
, "LIMIT+OFFSET"));

1875 
	}
}

1877 #i‚de‡
SQLITE_OMIT_COMPOUND_SELECT


1886 
CﬁlSeq
 *
	$mu…iSñe˘CﬁlSeq
(
P¨£
 *
pP¨£
, 
Sñe˘
 *
p
, 
iCﬁ
){

1887 
CﬁlSeq
 *
pRë
;

1888 if–
p
->
pPri‹
 ){

1889 
pRë
 = 
	`mu…iSñe˘CﬁlSeq
(
pP¨£
, 
p
->
pPri‹
, 
iCﬁ
);

1891 
pRë
 = 0;

1893 
	`as£π
–
iCﬁ
>=0 );

1897 if–
pRë
==0 && 
	`ALWAYS
(
iCﬁ
<
p
->
pELi°
->
nEx¥
) ){

1898 
pRë
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
p
->
pELi°
->
a
[
iCﬁ
].
pEx¥
);

1900  
pRë
;

1901 
	}
}

1912 
KeyInfo
 *
	$mu…iSñe˘OrdîByKeyInfo
(
P¨£
 *
pP¨£
, 
Sñe˘
 *
p
, 
nExåa
){

1913 
Ex¥Li°
 *
pOrdîBy
 = 
p
->pOrderBy;

1914 
nOrdîBy
 = 
p
->
pOrdîBy
->
nEx¥
;

1915 
sqlôe3
 *
db
 = 
pP¨£
->db;

1916 
KeyInfo
 *
pRë
 = 
	`sqlôe3KeyInfoAŒoc
(
db
, 
nOrdîBy
+
nExåa
, 1);

1917 if–
pRë
 ){

1918 
i
;

1919 
i
=0; i<
nOrdîBy
; i++){

1920 
Ex¥Li°_ôem
 *
pIãm
 = &
pOrdîBy
->
a
[
i
];

1921 
Ex¥
 *
pTîm
 = 
pIãm
->
pEx¥
;

1922 
CﬁlSeq
 *
pCﬁl
;

1924 if–
pTîm
->
Êags
 & 
EP_Cﬁœã
 ){

1925 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pTîm
);

1927 
pCﬁl
 = 
	`mu…iSñe˘CﬁlSeq
(
pP¨£
, 
p
, 
pIãm
->
u
.
x
.
iOrdîByCﬁ
-1);

1928 if–
pCﬁl
==0 )ÖCﬁ»
db
->
pDÊtCﬁl
;

1929 
pOrdîBy
->
a
[
i
].
pEx¥
 =

1930 
	`sqlôe3Ex¥AddCﬁœãSåög
(
pP¨£
, 
pTîm
, 
pCﬁl
->
zName
);

1932 
	`as£π
–
	`sqlôe3KeyInfoIsWrôóbÀ
(
pRë
) );

1933 
pRë
->
aCﬁl
[
i
] = 
pCﬁl
;

1934 
pRë
->
aS‹tOrdî
[
i
] = 
pOrdîBy
->
a
[i].
s‹tOrdî
;

1938  
pRë
;

1939 
	}
}

1941 #i‚de‡
SQLITE_OMIT_CTE


1978 
	$gíî©eWôhRecursiveQuîy
(

1979 
P¨£
 *
pP¨£
,

1980 
Sñe˘
 *
p
,

1981 
Sñe˘De°
 *
pDe°


1983 
SrcLi°
 *
pSrc
 = 
p
->pSrc;

1984 
nCﬁ
 = 
p
->
pELi°
->
nEx¥
;

1985 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1986 
Sñe˘
 *
pSëup
 = 
p
->
pPri‹
;

1987 
addrT›
;

1988 
addrC⁄t
, 
addrBªak
;

1989 
iCuºít
 = 0;

1990 
ªgCuºít
;

1991 
iQueue
;

1992 
iDi°ö˘
 = 0;

1993 
eDe°
 = 
SRT_Fifo
;

1994 
Sñe˘De°
 
de°Queue
;

1995 
i
;

1996 
rc
;

1997 
Ex¥Li°
 *
pOrdîBy
;

1998 
Ex¥
 *
pLimô
, *
pOff£t
;

1999 
ªgLimô
, 
ªgOff£t
;

2002 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_RECURSIVE
, 0, 0, 0) ) ;

2005 
addrBªak
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

2006 
	`compuãLimôRegi°îs
(
pP¨£
, 
p
, 
addrBªak
);

2007 
pLimô
 = 
p
->pLimit;

2008 
pOff£t
 = 
p
->pOffset;

2009 
ªgLimô
 = 
p
->
iLimô
;

2010 
ªgOff£t
 = 
p
->
iOff£t
;

2011 
p
->
pLimô
 =Ö->
pOff£t
 = 0;

2012 
p
->
iLimô
 =Ö->
iOff£t
 = 0;

2013 
pOrdîBy
 = 
p
->pOrderBy;

2016 
i
=0; 
	`ALWAYS
(i<
pSrc
->
nSrc
); i++){

2017 if–
pSrc
->
a
[
i
].
fg
.
isRecursive
 ){

2018 
iCuºít
 = 
pSrc
->
a
[
i
].
iCurs‹
;

2026 
iQueue
 = 
pP¨£
->
nTab
++;

2027 if–
p
->
›
==
TK_UNION
 ){

2028 
eDe°
 = 
pOrdîBy
 ? 
SRT_Di°Queue
 : 
SRT_Di°Fifo
;

2029 
iDi°ö˘
 = 
pP¨£
->
nTab
++;

2031 
eDe°
 = 
pOrdîBy
 ? 
SRT_Queue
 : 
SRT_Fifo
;

2033 
	`sqlôe3Sñe˘De°Inô
(&
de°Queue
, 
eDe°
, 
iQueue
);

2036 
ªgCuºít
 = ++
pP¨£
->
nMem
;

2037 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_O≥nP£udo
, 
iCuºít
, 
ªgCuºít
, 
nCﬁ
);

2038 if–
pOrdîBy
 ){

2039 
KeyInfo
 *
pKeyInfo
 = 
	`mu…iSñe˘OrdîByKeyInfo
(
pP¨£
, 
p
, 1);

2040 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_O≥nEphemîÆ
, 
iQueue
, 
pOrdîBy
->
nEx¥
+2, 0,

2041 (*)
pKeyInfo
, 
P4_KEYINFO
);

2042 
de°Queue
.
pOrdîBy
 =ÖOrderBy;

2044 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_O≥nEphemîÆ
, 
iQueue
, 
nCﬁ
);

2046 
	`VdbeCommít
((
v
, "QueueÅable"));

2047 if–
iDi°ö˘
 ){

2048 
p
->
addrO≥nEphm
[0] = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_O≥nEphemîÆ
, 
iDi°ö˘
, 0);

2049 
p
->
£lFœgs
 |
SF_U£sEphemîÆ
;

2053 
p
->
pOrdîBy
 = 0;

2056 
pSëup
->
pNext
 = 0;

2057 
rc
 = 
	`sqlôe3Sñe˘
(
pP¨£
, 
pSëup
, &
de°Queue
);

2058 
pSëup
->
pNext
 = 
p
;

2059 if–
rc
 ) 
íd_of_ªcursive_quîy
;

2062 
addrT›
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Rewöd
, 
iQueue
, 
addrBªak
); 
	`VdbeCovîage
(v);

2065 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_NuŒRow
, 
iCuºít
);

2066 if–
pOrdîBy
 ){

2067 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Cﬁumn
, 
iQueue
, 
pOrdîBy
->
nEx¥
+1, 
ªgCuºít
);

2069 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_RowD©a
, 
iQueue
, 
ªgCuºít
);

2071 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Dñëe
, 
iQueue
);

2074 
addrC⁄t
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

2075 
	`codeOff£t
(
v
, 
ªgOff£t
, 
addrC⁄t
);

2076 
	`£À˘I¬îLo›
(
pP¨£
, 
p
,Ö->
pELi°
, 
iCuºít
,

2077 0, 0, 
pDe°
, 
addrC⁄t
, 
addrBªak
);

2078 if–
ªgLimô
 ){

2079 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_De¸JumpZîo
, 
ªgLimô
, 
addrBªak
);

2080 
	`VdbeCovîage
(
v
);

2082 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
addrC⁄t
);

2087 if–
p
->
£lFœgs
 & 
SF_Aggªg©e
 ){

2088 
	`sqlôe3Eº‹Msg
(
pP¨£
, "recursiveággregate queriesÇot supported");

2090 
p
->
pPri‹
 = 0;

2091 
	`sqlôe3Sñe˘
(
pP¨£
, 
p
, &
de°Queue
);

2092 
	`as£π
–
p
->
pPri‹
==0 );

2093 
p
->
pPri‹
 = 
pSëup
;

2097 
	`sqlôe3VdbeGŸo
(
v
, 
addrT›
);

2098 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
addrBªak
);

2100 
íd_of_ªcursive_quîy
:

2101 
	`sqlôe3Ex¥Li°Dñëe
(
pP¨£
->
db
, 
p
->
pOrdîBy
);

2102 
p
->
pOrdîBy
 =ÖOrderBy;

2103 
p
->
pLimô
 =ÖLimit;

2104 
p
->
pOff£t
 =ÖOffset;

2106 
	}
}

2110 
mu…iSñe˘OrdîBy
(

2111 
P¨£
 *
pP¨£
,

2112 
Sñe˘
 *
p
,

2113 
Sñe˘De°
 *
pDe°


2127 
	$mu…iSñe˘VÆues
(

2128 
P¨£
 *
pP¨£
,

2129 
Sñe˘
 *
p
,

2130 
Sñe˘De°
 *
pDe°


2132 
Sñe˘
 *
pPri‹
;

2133 
nRow
 = 1;

2134 
rc
 = 0;

2135 
	`as£π
–
p
->
£lFœgs
 & 
SF_Mu…iVÆue
 );

2137 
	`as£π
–
p
->
£lFœgs
 & 
SF_VÆues
 );

2138 
	`as£π
–
p
->
›
==
TK_ALL
 || (p->›==
TK_SELECT
 &&Ö->
pPri‹
==0) );

2139 
	`as£π
–
p
->
pLimô
==0 );

2140 
	`as£π
–
p
->
pOff£t
==0 );

2141 
	`as£π
–
p
->
pNext
==0 ||Ö->
pELi°
->
nEx¥
==p->pNext->pEList->nExpr );

2142 if–
p
->
pPri‹
==0 ) ;

2143 
	`as£π
–
p
->
pPri‹
->
pNext
==p );

2144 
p
 =Ö->
pPri‹
;

2145 
nRow
++;

2147  
p
 ){

2148 
pPri‹
 = 
p
->pPrior;

2149 
p
->
pPri‹
 = 0;

2150 
rc
 = 
	`sqlôe3Sñe˘
(
pP¨£
, 
p
, 
pDe°
);

2151 
p
->
pPri‹
 =ÖPrior;

2152 if–
rc
 ) ;

2153 
p
->
nSñe˘Row
 = 
nRow
;

2154 
p
 =Ö->
pNext
;

2156  
rc
;

2157 
	}
}

2190 
	$mu…iSñe˘
(

2191 
P¨£
 *
pP¨£
,

2192 
Sñe˘
 *
p
,

2193 
Sñe˘De°
 *
pDe°


2195 
rc
 = 
SQLITE_OK
;

2196 
Sñe˘
 *
pPri‹
;

2197 
Vdbe
 *
v
;

2198 
Sñe˘De°
 
de°
;

2199 
Sñe˘
 *
pDñëe
 = 0;

2200 
sqlôe3
 *
db
;

2201 #i‚de‡
SQLITE_OMIT_EXPLAIN


2202 
iSub1
 = 0;

2203 
iSub2
 = 0;

2209 
	`as£π
–
p
 &&Ö->
pPri‹
 );

2210 
	`as£π
–(
p
->
£lFœgs
 & 
SF_Recursive
)==0 ||Ö->
›
==
TK_ALL
 ||Ö->›==
TK_UNION
 );

2211 
db
 = 
pP¨£
->db;

2212 
pPri‹
 = 
p
->pPrior;

2213 
de°
 = *
pDe°
;

2214 if–
pPri‹
->
pOrdîBy
 ){

2215 
	`sqlôe3Eº‹Msg
(
pP¨£
,"ORDER BY clause should comeáfter %sÇot before",

2216 
	`£À˘OpName
(
p
->
›
));

2217 
rc
 = 1;

2218 
mu…i_£À˘_íd
;

2220 if–
pPri‹
->
pLimô
 ){

2221 
	`sqlôe3Eº‹Msg
(
pP¨£
,"LIMIT clause should comeáfter %sÇot before",

2222 
	`£À˘OpName
(
p
->
›
));

2223 
rc
 = 1;

2224 
mu…i_£À˘_íd
;

2227 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

2228 
	`as£π
–
v
!=0 );

2232 if–
de°
.
eDe°
==
SRT_EphemTab
 ){

2233 
	`as£π
–
p
->
pELi°
 );

2234 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_O≥nEphemîÆ
, 
de°
.
iSDP¨m
, 
p
->
pELi°
->
nEx¥
);

2235 
de°
.
eDe°
 = 
SRT_TabÀ
;

2240 if–
p
->
£lFœgs
 & 
SF_Mu…iVÆue
 ){

2241 
rc
 = 
	`mu…iSñe˘VÆues
(
pP¨£
, 
p
, &
de°
);

2242 
mu…i_£À˘_íd
;

2248 
	`as£π
–
p
->
pELi°
 && 
pPri‹
->pEList );

2249 
	`as£π
–
p
->
pELi°
->
nEx¥
==
pPri‹
->pEList->nExpr );

2251 #i‚de‡
SQLITE_OMIT_CTE


2252 if–
p
->
£lFœgs
 & 
SF_Recursive
 ){

2253 
	`gíî©eWôhRecursiveQuîy
(
pP¨£
, 
p
, &
de°
);

2259 if–
p
->
pOrdîBy
 ){

2260  
	`mu…iSñe˘OrdîBy
(
pP¨£
, 
p
, 
pDe°
);

2265  
p
->
›
 ){

2266 
TK_ALL
: {

2267 
addr
 = 0;

2268 
nLimô
;

2269 
	`as£π
–!
pPri‹
->
pLimô
 );

2270 
pPri‹
->
iLimô
 = 
p
->iLimit;

2271 
pPri‹
->
iOff£t
 = 
p
->iOffset;

2272 
pPri‹
->
pLimô
 = 
p
->pLimit;

2273 
pPri‹
->
pOff£t
 = 
p
->pOffset;

2274 
	`ex∂aöSëI¡egî
(
iSub1
, 
pP¨£
->
iNextSñe˘Id
);

2275 
rc
 = 
	`sqlôe3Sñe˘
(
pP¨£
, 
pPri‹
, &
de°
);

2276 
p
->
pLimô
 = 0;

2277 
p
->
pOff£t
 = 0;

2278 if–
rc
 ){

2279 
mu…i_£À˘_íd
;

2281 
p
->
pPri‹
 = 0;

2282 
p
->
iLimô
 = 
pPri‹
->iLimit;

2283 
p
->
iOff£t
 = 
pPri‹
->iOffset;

2284 if–
p
->
iLimô
 ){

2285 
addr
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_IfNŸ
, 
p
->
iLimô
); 
	`VdbeCovîage
(v);

2286 
	`VdbeCommít
((
v
, "Jumpáhead if LIMITÑeached"));

2287 if–
p
->
iOff£t
 ){

2288 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Off£tLimô
,

2289 
p
->
iLimô
,Ö->
iOff£t
+1,Ö->iOffset);

2292 
	`ex∂aöSëI¡egî
(
iSub2
, 
pP¨£
->
iNextSñe˘Id
);

2293 
rc
 = 
	`sqlôe3Sñe˘
(
pP¨£
, 
p
, &
de°
);

2294 
	`ã°ˇ£
–
rc
!=
SQLITE_OK
 );

2295 
pDñëe
 = 
p
->
pPri‹
;

2296 
p
->
pPri‹
 =ÖPrior;

2297 
p
->
nSñe˘Row
 = 
	`sqlôe3LogE°Add
’->nSñe˘Row, 
pPri‹
->nSelectRow);

2298 if–
pPri‹
->
pLimô


2299 && 
	`sqlôe3Ex¥IsI¡egî
(
pPri‹
->
pLimô
, &
nLimô
)

2300 && 
nLimô
>0 && 
p
->
nSñe˘Row
 > 
	`sqlôe3LogE°
((
u64
)nLimit)

2302 
p
->
nSñe˘Row
 = 
	`sqlôe3LogE°
((
u64
)
nLimô
);

2304 if–
addr
 ){

2305 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr
);

2309 
TK_EXCEPT
:

2310 
TK_UNION
: {

2311 
uni⁄Tab
;

2312 
u8
 
›
 = 0;

2313 
¥i‹Op
;

2314 
Ex¥
 *
pLimô
, *
pOff£t
;

2315 
addr
;

2316 
Sñe˘De°
 
uni⁄de°
;

2318 
	`ã°ˇ£
–
p
->
›
==
TK_EXCEPT
 );

2319 
	`ã°ˇ£
–
p
->
›
==
TK_UNION
 );

2320 
¥i‹Op
 = 
SRT_Uni⁄
;

2321 if–
de°
.
eDe°
==
¥i‹Op
 ){

2325 
	`as£π
–
p
->
pLimô
==0 );

2326 
	`as£π
–
p
->
pOff£t
==0 );

2327 
uni⁄Tab
 = 
de°
.
iSDP¨m
;

2332 
uni⁄Tab
 = 
pP¨£
->
nTab
++;

2333 
	`as£π
–
p
->
pOrdîBy
==0 );

2334 
addr
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_O≥nEphemîÆ
, 
uni⁄Tab
, 0);

2335 
	`as£π
–
p
->
addrO≥nEphm
[0] == -1 );

2336 
p
->
addrO≥nEphm
[0] = 
addr
;

2337 
	`födRightmo°
(
p
)->
£lFœgs
 |
SF_U£sEphemîÆ
;

2338 
	`as£π
–
p
->
pELi°
 );

2343 
	`as£π
–!
pPri‹
->
pOrdîBy
 );

2344 
	`sqlôe3Sñe˘De°Inô
(&
uni⁄de°
, 
¥i‹Op
, 
uni⁄Tab
);

2345 
	`ex∂aöSëI¡egî
(
iSub1
, 
pP¨£
->
iNextSñe˘Id
);

2346 
rc
 = 
	`sqlôe3Sñe˘
(
pP¨£
, 
pPri‹
, &
uni⁄de°
);

2347 if–
rc
 ){

2348 
mu…i_£À˘_íd
;

2353 if–
p
->
›
==
TK_EXCEPT
 ){

2354 
›
 = 
SRT_Ex˚±
;

2356 
	`as£π
–
p
->
›
==
TK_UNION
 );

2357 
›
 = 
SRT_Uni⁄
;

2359 
p
->
pPri‹
 = 0;

2360 
pLimô
 = 
p
->pLimit;

2361 
p
->
pLimô
 = 0;

2362 
pOff£t
 = 
p
->pOffset;

2363 
p
->
pOff£t
 = 0;

2364 
uni⁄de°
.
eDe°
 = 
›
;

2365 
	`ex∂aöSëI¡egî
(
iSub2
, 
pP¨£
->
iNextSñe˘Id
);

2366 
rc
 = 
	`sqlôe3Sñe˘
(
pP¨£
, 
p
, &
uni⁄de°
);

2367 
	`ã°ˇ£
–
rc
!=
SQLITE_OK
 );

2370 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
p
->
pOrdîBy
);

2371 
pDñëe
 = 
p
->
pPri‹
;

2372 
p
->
pPri‹
 =ÖPrior;

2373 
p
->
pOrdîBy
 = 0;

2374 if–
p
->
›
==
TK_UNION
 ){

2375 
p
->
nSñe˘Row
 = 
	`sqlôe3LogE°Add
’->nSñe˘Row, 
pPri‹
->nSelectRow);

2377 
	`sqlôe3Ex¥Dñëe
(
db
, 
p
->
pLimô
);

2378 
p
->
pLimô
 =ÖLimit;

2379 
p
->
pOff£t
 =ÖOffset;

2380 
p
->
iLimô
 = 0;

2381 
p
->
iOff£t
 = 0;

2386 
	`as£π
–
uni⁄Tab
==
de°
.
iSDP¨m
 || de°.
eDe°
!=
¥i‹Op
 );

2387 if–
de°
.
eDe°
!=
¥i‹Op
 ){

2388 
iC⁄t
, 
iBªak
, 
iSèπ
;

2389 
	`as£π
–
p
->
pELi°
 );

2390 if–
de°
.
eDe°
==
SRT_Ouçut
 ){

2391 
Sñe˘
 *
pFú°
 = 
p
;

2392  
pFú°
->
pPri‹
 )ÖFirst =ÖFirst->pPrior;

2393 
	`gíî©eCﬁumnNames
(
pP¨£
, 
pFú°
->
pSrc
,ÖFú°->
pELi°
);

2395 
iBªak
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

2396 
iC⁄t
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

2397 
	`compuãLimôRegi°îs
(
pP¨£
, 
p
, 
iBªak
);

2398 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Rewöd
, 
uni⁄Tab
, 
iBªak
); 
	`VdbeCovîage
(v);

2399 
iSèπ
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

2400 
	`£À˘I¬îLo›
(
pP¨£
, 
p
,Ö->
pELi°
, 
uni⁄Tab
,

2401 0, 0, &
de°
, 
iC⁄t
, 
iBªak
);

2402 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iC⁄t
);

2403 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Next
, 
uni⁄Tab
, 
iSèπ
); 
	`VdbeCovîage
(v);

2404 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iBªak
);

2405 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Clo£
, 
uni⁄Tab
, 0);

2409 : 
	`as£π
–
p
->
›
==
TK_INTERSECT
 ); {

2410 
èb1
, 
èb2
;

2411 
iC⁄t
, 
iBªak
, 
iSèπ
;

2412 
Ex¥
 *
pLimô
, *
pOff£t
;

2413 
addr
;

2414 
Sñe˘De°
 
öãr£˘de°
;

2415 
r1
;

2421 
èb1
 = 
pP¨£
->
nTab
++;

2422 
èb2
 = 
pP¨£
->
nTab
++;

2423 
	`as£π
–
p
->
pOrdîBy
==0 );

2425 
addr
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_O≥nEphemîÆ
, 
èb1
, 0);

2426 
	`as£π
–
p
->
addrO≥nEphm
[0] == -1 );

2427 
p
->
addrO≥nEphm
[0] = 
addr
;

2428 
	`födRightmo°
(
p
)->
£lFœgs
 |
SF_U£sEphemîÆ
;

2429 
	`as£π
–
p
->
pELi°
 );

2433 
	`sqlôe3Sñe˘De°Inô
(&
öãr£˘de°
, 
SRT_Uni⁄
, 
èb1
);

2434 
	`ex∂aöSëI¡egî
(
iSub1
, 
pP¨£
->
iNextSñe˘Id
);

2435 
rc
 = 
	`sqlôe3Sñe˘
(
pP¨£
, 
pPri‹
, &
öãr£˘de°
);

2436 if–
rc
 ){

2437 
mu…i_£À˘_íd
;

2442 
addr
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_O≥nEphemîÆ
, 
èb2
, 0);

2443 
	`as£π
–
p
->
addrO≥nEphm
[1] == -1 );

2444 
p
->
addrO≥nEphm
[1] = 
addr
;

2445 
p
->
pPri‹
 = 0;

2446 
pLimô
 = 
p
->pLimit;

2447 
p
->
pLimô
 = 0;

2448 
pOff£t
 = 
p
->pOffset;

2449 
p
->
pOff£t
 = 0;

2450 
öãr£˘de°
.
iSDP¨m
 = 
èb2
;

2451 
	`ex∂aöSëI¡egî
(
iSub2
, 
pP¨£
->
iNextSñe˘Id
);

2452 
rc
 = 
	`sqlôe3Sñe˘
(
pP¨£
, 
p
, &
öãr£˘de°
);

2453 
	`ã°ˇ£
–
rc
!=
SQLITE_OK
 );

2454 
pDñëe
 = 
p
->
pPri‹
;

2455 
p
->
pPri‹
 =ÖPrior;

2456 if–
p
->
nSñe˘Row
>
pPri‹
->nSelectRow )Ö->nSelectRow =ÖPrior->nSelectRow;

2457 
	`sqlôe3Ex¥Dñëe
(
db
, 
p
->
pLimô
);

2458 
p
->
pLimô
 =ÖLimit;

2459 
p
->
pOff£t
 =ÖOffset;

2464 
	`as£π
–
p
->
pELi°
 );

2465 if–
de°
.
eDe°
==
SRT_Ouçut
 ){

2466 
Sñe˘
 *
pFú°
 = 
p
;

2467  
pFú°
->
pPri‹
 )ÖFirst =ÖFirst->pPrior;

2468 
	`gíî©eCﬁumnNames
(
pP¨£
, 
pFú°
->
pSrc
,ÖFú°->
pELi°
);

2470 
iBªak
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

2471 
iC⁄t
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

2472 
	`compuãLimôRegi°îs
(
pP¨£
, 
p
, 
iBªak
);

2473 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Rewöd
, 
èb1
, 
iBªak
); 
	`VdbeCovîage
(v);

2474 
r1
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

2475 
iSèπ
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_RowKey
, 
èb1
, 
r1
);

2476 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_NŸFound
, 
èb2
, 
iC⁄t
, 
r1
, 0); 
	`VdbeCovîage
(v);

2477 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
r1
);

2478 
	`£À˘I¬îLo›
(
pP¨£
, 
p
,Ö->
pELi°
, 
èb1
,

2479 0, 0, &
de°
, 
iC⁄t
, 
iBªak
);

2480 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iC⁄t
);

2481 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Next
, 
èb1
, 
iSèπ
); 
	`VdbeCovîage
(v);

2482 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iBªak
);

2483 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Clo£
, 
èb2
, 0);

2484 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Clo£
, 
èb1
, 0);

2489 
	`ex∂aöComposôe
(
pP¨£
, 
p
->
›
, 
iSub1
, 
iSub2
,Ö->›!=
TK_ALL
);

2500 if–
p
->
£lFœgs
 & 
SF_U£sEphemîÆ
 ){

2501 
i
;

2502 
KeyInfo
 *
pKeyInfo
;

2503 
Sñe˘
 *
pLo›
;

2504 
CﬁlSeq
 **
≠Cﬁl
;

2505 
nCﬁ
;

2507 
	`as£π
–
p
->
pNext
==0 );

2508 
nCﬁ
 = 
p
->
pELi°
->
nEx¥
;

2509 
pKeyInfo
 = 
	`sqlôe3KeyInfoAŒoc
(
db
, 
nCﬁ
, 1);

2510 if–!
pKeyInfo
 ){

2511 
rc
 = 
SQLITE_NOMEM_BKPT
;

2512 
mu…i_£À˘_íd
;

2514 
i
=0, 
≠Cﬁl
=
pKeyInfo
->
aCﬁl
; i<
nCﬁ
; i++,ápColl++){

2515 *
≠Cﬁl
 = 
	`mu…iSñe˘CﬁlSeq
(
pP¨£
, 
p
, 
i
);

2516 if–0==*
≠Cﬁl
 ){

2517 *
≠Cﬁl
 = 
db
->
pDÊtCﬁl
;

2521 
pLo›
=
p
;ÖLo›;ÖLo›ıLo›->
pPri‹
){

2522 
i
=0; i<2; i++){

2523 
addr
 = 
pLo›
->
addrO≥nEphm
[
i
];

2524 if–
addr
<0 ){

2527 
	`as£π
–
pLo›
->
addrO≥nEphm
[1]<0 );

2530 
	`sqlôe3VdbeCh™geP2
(
v
, 
addr
, 
nCﬁ
);

2531 
	`sqlôe3VdbeCh™geP4
(
v
, 
addr
, (*)
	`sqlôe3KeyInfoRef
(
pKeyInfo
),

2532 
P4_KEYINFO
);

2533 
pLo›
->
addrO≥nEphm
[
i
] = -1;

2536 
	`sqlôe3KeyInfoUƒef
(
pKeyInfo
);

2539 
mu…i_£À˘_íd
:

2540 
pDe°
->
iSd°
 = 
de°
.iSdst;

2541 
pDe°
->
nSd°
 = 
de°
.nSdst;

2542 
	`sqlôe3Sñe˘Dñëe
(
db
, 
pDñëe
);

2543  
rc
;

2544 
	}
}

2551 
	$sqlôe3Sñe˘Wr⁄gNumTîmsEº‹
(
P¨£
 *
pP¨£
, 
Sñe˘
 *
p
){

2552 if–
p
->
£lFœgs
 & 
SF_VÆues
 ){

2553 
	`sqlôe3Eº‹Msg
(
pP¨£
, "all VALUES must haveÅhe sameÇumber ofÅerms");

2555 
	`sqlôe3Eº‹Msg
(
pP¨£
, "SELECTsÅoÅheÜeftándÑight of %s"

2556 " dÿnŸ havêthêßmênumbî o‡ªsu… cﬁumns", 
	`£À˘OpName
(
p
->
›
));

2558 
	}
}

2580 
	$gíî©eOuçutSubroutöe
(

2581 
P¨£
 *
pP¨£
,

2582 
Sñe˘
 *
p
,

2583 
Sñe˘De°
 *
pIn
,

2584 
Sñe˘De°
 *
pDe°
,

2585 
ªgRëu∫
,

2586 
ªgPªv
,

2587 
KeyInfo
 *
pKeyInfo
,

2588 
iBªak


2590 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

2591 
iC⁄töue
;

2592 
addr
;

2594 
addr
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

2595 
iC⁄töue
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

2599 if–
ªgPªv
 ){

2600 
addr1
, 
addr2
;

2601 
addr1
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_IfNŸ
, 
ªgPªv
); 
	`VdbeCovîage
(v);

2602 
addr2
 = 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Com∑ª
, 
pIn
->
iSd°
, 
ªgPªv
+1,ÖIn->
nSd°
,

2603 (*)
	`sqlôe3KeyInfoRef
(
pKeyInfo
), 
P4_KEYINFO
);

2604 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Jump
, 
addr2
+2, 
iC⁄töue
,áddr2+2); 
	`VdbeCovîage
(v);

2605 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr1
);

2606 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_C›y
, 
pIn
->
iSd°
, 
ªgPªv
+1,ÖIn->
nSd°
-1);

2607 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 1, 
ªgPªv
);

2609 if–
pP¨£
->
db
->
mÆlocFaûed
 )  0;

2613 
	`codeOff£t
(
v
, 
p
->
iOff£t
, 
iC⁄töue
);

2615 
	`as£π
–
pDe°
->
eDe°
!=
SRT_Exi°s
 );

2616 
	`as£π
–
pDe°
->
eDe°
!=
SRT_TabÀ
 );

2617  
pDe°
->
eDe°
 ){

2620 
SRT_EphemTab
: {

2621 
r1
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

2622 
r2
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

2623 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_MakeRec‹d
, 
pIn
->
iSd°
,ÖIn->
nSd°
, 
r1
);

2624 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NewRowid
, 
pDe°
->
iSDP¨m
, 
r2
);

2625 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_In£π
, 
pDe°
->
iSDP¨m
, 
r1
, 
r2
);

2626 
	`sqlôe3VdbeCh™geP5
(
v
, 
OPFLAG_APPEND
);

2627 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
r2
);

2628 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
r1
);

2632 #i‚de‡
SQLITE_OMIT_SUBQUERY


2637 
SRT_Së
: {

2638 
r1
;

2639 
	`as£π
–
pIn
->
nSd°
==1 || 
pP¨£
->
nEº
>0 );

2640 
pDe°
->
affSd°
 =

2641 
	`sqlôe3Com∑ªAfföôy
(
p
->
pELi°
->
a
[0].
pEx¥
, 
pDe°
->
affSd°
);

2642 
r1
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

2643 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_MakeRec‹d
, 
pIn
->
iSd°
, 1, 
r1
, &
pDe°
->
affSd°
,1);

2644 
	`sqlôe3Ex¥CacheAfföôyCh™ge
(
pP¨£
, 
pIn
->
iSd°
, 1);

2645 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IdxIn£π
, 
pDe°
->
iSDP¨m
, 
r1
);

2646 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
r1
);

2654 
SRT_Mem
: {

2655 
	`as£π
–
pIn
->
nSd°
==1 || 
pP¨£
->
nEº
>0 ); 
	`ã°ˇ£
(ÖIn->nSdst!=1 );

2656 
	`sqlôe3Ex¥CodeMove
(
pP¨£
, 
pIn
->
iSd°
, 
pDe°
->
iSDP¨m
, 1);

2665 
SRT_C‹outöe
: {

2666 if–
pDe°
->
iSd°
==0 ){

2667 
pDe°
->
iSd°
 = 
	`sqlôe3GëTempR™ge
(
pP¨£
, 
pIn
->
nSd°
);

2668 
pDe°
->
nSd°
 = 
pIn
->nSdst;

2670 
	`sqlôe3Ex¥CodeMove
(
pP¨£
, 
pIn
->
iSd°
, 
pDe°
->iSd°,ÖIn->
nSd°
);

2671 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Yõld
, 
pDe°
->
iSDP¨m
);

2684 
	`as£π
–
pDe°
->
eDe°
==
SRT_Ouçut
 );

2685 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 
pIn
->
iSd°
,ÖIn->
nSd°
);

2686 
	`sqlôe3Ex¥CacheAfföôyCh™ge
(
pP¨£
, 
pIn
->
iSd°
,ÖIn->
nSd°
);

2693 if–
p
->
iLimô
 ){

2694 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_De¸JumpZîo
, 
p
->
iLimô
, 
iBªak
); 
	`VdbeCovîage
(v);

2699 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iC⁄töue
);

2700 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Rëu∫
, 
ªgRëu∫
);

2702  
addr
;

2703 
	}
}

2790 #i‚de‡
SQLITE_OMIT_COMPOUND_SELECT


2791 
	$mu…iSñe˘OrdîBy
(

2792 
P¨£
 *
pP¨£
,

2793 
Sñe˘
 *
p
,

2794 
Sñe˘De°
 *
pDe°


2796 
i
, 
j
;

2797 
Sñe˘
 *
pPri‹
;

2798 
Vdbe
 *
v
;

2799 
Sñe˘De°
 
de°A
;

2800 
Sñe˘De°
 
de°B
;

2801 
ªgAddrA
;

2802 
ªgAddrB
;

2803 
addrSñe˘A
;

2804 
addrSñe˘B
;

2805 
ªgOutA
;

2806 
ªgOutB
;

2807 
addrOutA
;

2808 
addrOutB
 = 0;

2809 
addrEofA
;

2810 
addrEofA_noB
;

2811 
addrEofB
;

2812 
addrA…B
;

2813 
addrAeqB
;

2814 
addrAgtB
;

2815 
ªgLimôA
;

2816 
ªgLimôB
;

2817 
ªgPªv
;

2818 
ßvedLimô
;

2819 
ßvedOff£t
;

2820 
œbñCm¥
;

2821 
œbñEnd
;

2822 
addr1
;

2823 
›
;

2824 
KeyInfo
 *
pKeyDup
 = 0;

2825 
KeyInfo
 *
pKeyMîge
;

2826 
sqlôe3
 *
db
;

2827 
Ex¥Li°
 *
pOrdîBy
;

2828 
nOrdîBy
;

2829 *
aPîmuã
;

2830 #i‚de‡
SQLITE_OMIT_EXPLAIN


2831 
iSub1
;

2832 
iSub2
;

2835 
	`as£π
–
p
->
pOrdîBy
!=0 );

2836 
	`as£π
–
pKeyDup
==0 );

2837 
db
 = 
pP¨£
->db;

2838 
v
 = 
pP¨£
->
pVdbe
;

2839 
	`as£π
–
v
!=0 );

2840 
œbñEnd
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

2841 
œbñCm¥
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

2846 
›
 = 
p
->op;

2847 
pPri‹
 = 
p
->pPrior;

2848 
	`as£π
–
pPri‹
->
pOrdîBy
==0 );

2849 
pOrdîBy
 = 
p
->pOrderBy;

2850 
	`as£π
–
pOrdîBy
 );

2851 
nOrdîBy
 = 
pOrdîBy
->
nEx¥
;

2857 if–
›
!=
TK_ALL
 ){

2858 
i
=1; 
db
->
mÆlocFaûed
==0 && i<=
p
->
pELi°
->
nEx¥
; i++){

2859 
Ex¥Li°_ôem
 *
pIãm
;

2860 
j
=0, 
pIãm
=
pOrdîBy
->
a
; j<
nOrdîBy
; j++,ÖItem++){

2861 
	`as£π
–
pIãm
->
u
.
x
.
iOrdîByCﬁ
>0 );

2862 if–
pIãm
->
u
.
x
.
iOrdîByCﬁ
==
i
 ) ;

2864 if–
j
==
nOrdîBy
 ){

2865 
Ex¥
 *
pNew
 = 
	`sqlôe3Ex¥
(
db
, 
TK_INTEGER
, 0);

2866 if–
pNew
==0 )  
SQLITE_NOMEM_BKPT
;

2867 
pNew
->
Êags
 |
EP_I¡VÆue
;

2868 
pNew
->
u
.
iVÆue
 = 
i
;

2869 
pOrdîBy
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,ÖOrdîBy, 
pNew
);

2870 if–
pOrdîBy
 )ÖOrdîBy->
a
[
nOrdîBy
++].
u
.
x
.
iOrdîByCﬁ
 = (
u16
)
i
;

2882 
aPîmuã
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, ()*(
nOrdîBy
 + 1));

2883 if–
aPîmuã
 ){

2884 
Ex¥Li°_ôem
 *
pIãm
;

2885 
aPîmuã
[0] = 
nOrdîBy
;

2886 
i
=1, 
pIãm
=
pOrdîBy
->
a
; i<=
nOrdîBy
; i++,ÖItem++){

2887 
	`as£π
–
pIãm
->
u
.
x
.
iOrdîByCﬁ
>0 );

2888 
	`as£π
–
pIãm
->
u
.
x
.
iOrdîByCﬁ
<=
p
->
pELi°
->
nEx¥
 );

2889 
aPîmuã
[
i
] = 
pIãm
->
u
.
x
.
iOrdîByCﬁ
 - 1;

2891 
pKeyMîge
 = 
	`mu…iSñe˘OrdîByKeyInfo
(
pP¨£
, 
p
, 1);

2893 
pKeyMîge
 = 0;

2898 
p
->
pOrdîBy
 =ÖOrderBy;

2899 
pPri‹
->
pOrdîBy
 = 
	`sqlôe3Ex¥Li°Dup
(
pP¨£
->
db
,ÖOrderBy, 0);

2905 if–
›
==
TK_ALL
 ){

2906 
ªgPªv
 = 0;

2908 
nEx¥
 = 
p
->
pELi°
->nExpr;

2909 
	`as£π
–
nOrdîBy
>=
nEx¥
 || 
db
->
mÆlocFaûed
 );

2910 
ªgPªv
 = 
pP¨£
->
nMem
+1;

2911 
pP¨£
->
nMem
 +
nEx¥
+1;

2912 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 0, 
ªgPªv
);

2913 
pKeyDup
 = 
	`sqlôe3KeyInfoAŒoc
(
db
, 
nEx¥
, 1);

2914 if–
pKeyDup
 ){

2915 
	`as£π
–
	`sqlôe3KeyInfoIsWrôóbÀ
(
pKeyDup
) );

2916 
i
=0; i<
nEx¥
; i++){

2917 
pKeyDup
->
aCﬁl
[
i
] = 
	`mu…iSñe˘CﬁlSeq
(
pP¨£
, 
p
, i);

2918 
pKeyDup
->
aS‹tOrdî
[
i
] = 0;

2925 
p
->
pPri‹
 = 0;

2926 
pPri‹
->
pNext
 = 0;

2927 
	`sqlôe3ResﬁveOrdîGroupBy
(
pP¨£
, 
p
,Ö->
pOrdîBy
, "ORDER");

2928 if–
pPri‹
->pPrior==0 ){

2929 
	`sqlôe3ResﬁveOrdîGroupBy
(
pP¨£
, 
pPri‹
,ÖPri‹->
pOrdîBy
, "ORDER");

2933 
	`compuãLimôRegi°îs
(
pP¨£
, 
p
, 
œbñEnd
);

2934 if–
p
->
iLimô
 && 
›
==
TK_ALL
 ){

2935 
ªgLimôA
 = ++
pP¨£
->
nMem
;

2936 
ªgLimôB
 = ++
pP¨£
->
nMem
;

2937 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_C›y
, 
p
->
iOff£t
 ?Ö->iOff£t+1 :Ö->
iLimô
,

2938 
ªgLimôA
);

2939 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_C›y
, 
ªgLimôA
, 
ªgLimôB
);

2941 
ªgLimôA
 = 
ªgLimôB
 = 0;

2943 
	`sqlôe3Ex¥Dñëe
(
db
, 
p
->
pLimô
);

2944 
p
->
pLimô
 = 0;

2945 
	`sqlôe3Ex¥Dñëe
(
db
, 
p
->
pOff£t
);

2946 
p
->
pOff£t
 = 0;

2948 
ªgAddrA
 = ++
pP¨£
->
nMem
;

2949 
ªgAddrB
 = ++
pP¨£
->
nMem
;

2950 
ªgOutA
 = ++
pP¨£
->
nMem
;

2951 
ªgOutB
 = ++
pP¨£
->
nMem
;

2952 
	`sqlôe3Sñe˘De°Inô
(&
de°A
, 
SRT_C‹outöe
, 
ªgAddrA
);

2953 
	`sqlôe3Sñe˘De°Inô
(&
de°B
, 
SRT_C‹outöe
, 
ªgAddrB
);

2958 
addrSñe˘A
 = 
	`sqlôe3VdbeCuºítAddr
(
v
) + 1;

2959 
addr1
 = 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_InôC‹outöe
, 
ªgAddrA
, 0, 
addrSñe˘A
);

2960 
	`VdbeCommít
((
v
, "left SELECT"));

2961 
pPri‹
->
iLimô
 = 
ªgLimôA
;

2962 
	`ex∂aöSëI¡egî
(
iSub1
, 
pP¨£
->
iNextSñe˘Id
);

2963 
	`sqlôe3Sñe˘
(
pP¨£
, 
pPri‹
, &
de°A
);

2964 
	`sqlôe3VdbeEndC‹outöe
(
v
, 
ªgAddrA
);

2965 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr1
);

2970 
addrSñe˘B
 = 
	`sqlôe3VdbeCuºítAddr
(
v
) + 1;

2971 
addr1
 = 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_InôC‹outöe
, 
ªgAddrB
, 0, 
addrSñe˘B
);

2972 
	`VdbeCommít
((
v
, "right SELECT"));

2973 
ßvedLimô
 = 
p
->
iLimô
;

2974 
ßvedOff£t
 = 
p
->
iOff£t
;

2975 
p
->
iLimô
 = 
ªgLimôB
;

2976 
p
->
iOff£t
 = 0;

2977 
	`ex∂aöSëI¡egî
(
iSub2
, 
pP¨£
->
iNextSñe˘Id
);

2978 
	`sqlôe3Sñe˘
(
pP¨£
, 
p
, &
de°B
);

2979 
p
->
iLimô
 = 
ßvedLimô
;

2980 
p
->
iOff£t
 = 
ßvedOff£t
;

2981 
	`sqlôe3VdbeEndC‹outöe
(
v
, 
ªgAddrB
);

2986 
	`VdbeNo›Commít
((
v
, "OutputÑoutine for A"));

2987 
addrOutA
 = 
	`gíî©eOuçutSubroutöe
(
pP¨£
,

2988 
p
, &
de°A
, 
pDe°
, 
ªgOutA
,

2989 
ªgPªv
, 
pKeyDup
, 
œbñEnd
);

2994 if–
›
==
TK_ALL
 || op==
TK_UNION
 ){

2995 
	`VdbeNo›Commít
((
v
, "OutputÑoutine for B"));

2996 
addrOutB
 = 
	`gíî©eOuçutSubroutöe
(
pP¨£
,

2997 
p
, &
de°B
, 
pDe°
, 
ªgOutB
,

2998 
ªgPªv
, 
pKeyDup
, 
œbñEnd
);

3000 
	`sqlôe3KeyInfoUƒef
(
pKeyDup
);

3005 if–
›
==
TK_EXCEPT
 || op==
TK_INTERSECT
 ){

3006 
addrEofA_noB
 = 
addrEofA
 = 
œbñEnd
;

3008 
	`VdbeNo›Commít
((
v
, "eof-A subroutine"));

3009 
addrEofA
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Gosub
, 
ªgOutB
, 
addrOutB
);

3010 
addrEofA_noB
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Yõld
, 
ªgAddrB
, 
œbñEnd
);

3011 
	`VdbeCovîage
(
v
);

3012 
	`sqlôe3VdbeGŸo
(
v
, 
addrEofA
);

3013 
p
->
nSñe˘Row
 = 
	`sqlôe3LogE°Add
’->nSñe˘Row, 
pPri‹
->nSelectRow);

3019 if–
›
==
TK_INTERSECT
 ){

3020 
addrEofB
 = 
addrEofA
;

3021 if–
p
->
nSñe˘Row
 > 
pPri‹
->nSelectRow )Ö->nSelectRow =ÖPrior->nSelectRow;

3023 
	`VdbeNo›Commít
((
v
, "eof-B subroutine"));

3024 
addrEofB
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Gosub
, 
ªgOutA
, 
addrOutA
);

3025 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Yõld
, 
ªgAddrA
, 
œbñEnd
); 
	`VdbeCovîage
(v);

3026 
	`sqlôe3VdbeGŸo
(
v
, 
addrEofB
);

3031 
	`VdbeNo›Commít
((
v
, "A-lt-B subroutine"));

3032 
addrA…B
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Gosub
, 
ªgOutA
, 
addrOutA
);

3033 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Yõld
, 
ªgAddrA
, 
addrEofA
); 
	`VdbeCovîage
(v);

3034 
	`sqlôe3VdbeGŸo
(
v
, 
œbñCm¥
);

3038 if–
›
==
TK_ALL
 ){

3039 
addrAeqB
 = 
addrA…B
;

3040 }if–
›
==
TK_INTERSECT
 ){

3041 
addrAeqB
 = 
addrA…B
;

3042 
addrA…B
++;

3044 
	`VdbeNo›Commít
((
v
, "A-eq-B subroutine"));

3045 
addrAeqB
 =

3046 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Yõld
, 
ªgAddrA
, 
addrEofA
); 
	`VdbeCovîage
(v);

3047 
	`sqlôe3VdbeGŸo
(
v
, 
œbñCm¥
);

3052 
	`VdbeNo›Commít
((
v
, "A-gt-B subroutine"));

3053 
addrAgtB
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

3054 if–
›
==
TK_ALL
 || op==
TK_UNION
 ){

3055 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Gosub
, 
ªgOutB
, 
addrOutB
);

3057 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Yõld
, 
ªgAddrB
, 
addrEofB
); 
	`VdbeCovîage
(v);

3058 
	`sqlôe3VdbeGŸo
(
v
, 
œbñCm¥
);

3062 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr1
);

3063 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Yõld
, 
ªgAddrA
, 
addrEofA_noB
); 
	`VdbeCovîage
(v);

3064 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Yõld
, 
ªgAddrB
, 
addrEofB
); 
	`VdbeCovîage
(v);

3068 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
œbñCm¥
);

3069 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Pîmuèti⁄
, 0, 0, 0, (*)
aPîmuã
, 
P4_INTARRAY
);

3070 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Com∑ª
, 
de°A
.
iSd°
, 
de°B
.iSd°, 
nOrdîBy
,

3071 (*)
pKeyMîge
, 
P4_KEYINFO
);

3072 
	`sqlôe3VdbeCh™geP5
(
v
, 
OPFLAG_PERMUTE
);

3073 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Jump
, 
addrA…B
, 
addrAeqB
, 
addrAgtB
); 
	`VdbeCovîage
(v);

3077 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
œbñEnd
);

3081 if–
pDe°
->
eDe°
==
SRT_Ouçut
 ){

3082 
Sñe˘
 *
pFú°
 = 
pPri‹
;

3083  
pFú°
->
pPri‹
 )ÖFirst =ÖFirst->pPrior;

3084 
	`gíî©eCﬁumnNames
(
pP¨£
, 
pFú°
->
pSrc
,ÖFú°->
pELi°
);

3089 if–
p
->
pPri‹
 ){

3090 
	`sqlôe3Sñe˘Dñëe
(
db
, 
p
->
pPri‹
);

3092 
p
->
pPri‹
 =ÖPrior;

3093 
pPri‹
->
pNext
 = 
p
;

3097 
	`ex∂aöComposôe
(
pP¨£
, 
p
->
›
, 
iSub1
, 
iSub2
, 0);

3098  
pP¨£
->
nEº
!=0;

3099 
	}
}

3102 #i‡!
deföed
(
SQLITE_OMIT_SUBQUERY
Ë|| !deföed(
SQLITE_OMIT_VIEW
)

3104 
sub°Ex¥Li°
(
sqlôe3
*, 
Ex¥Li°
*, , ExprList*);

3105 
sub°Sñe˘
(
sqlôe3
*, 
Sñe˘
 *, , 
Ex¥Li°
*, );

3120 
Ex¥
 *
	$sub°Ex¥
(

3121 
sqlôe3
 *
db
,

3122 
Ex¥
 *
pEx¥
,

3123 
iTabÀ
,

3124 
Ex¥Li°
 *
pELi°


3126 if–
pEx¥
==0 )  0;

3127 if–
pEx¥
->
›
==
TK_COLUMN
 &&ÖEx¥->
iTabÀ
==iTable ){

3128 if–
pEx¥
->
iCﬁumn
<0 ){

3129 
pEx¥
->
›
 = 
TK_NULL
;

3131 
Ex¥
 *
pNew
;

3132 
	`as£π
–
pELi°
!=0 && 
pEx¥
->
iCﬁumn
<pELi°->
nEx¥
 );

3133 
	`as£π
–
pEx¥
->
pLe·
==0 &&ÖEx¥->
pRight
==0 );

3134 
pNew
 = 
	`sqlôe3Ex¥Dup
(
db
, 
pELi°
->
a
[
pEx¥
->
iCﬁumn
].pExpr, 0);

3135 
	`sqlôe3Ex¥Dñëe
(
db
, 
pEx¥
);

3136 
pEx¥
 = 
pNew
;

3139 
pEx¥
->
pLe·
 = 
	`sub°Ex¥
(
db
,ÖEx¥->pLe·, 
iTabÀ
, 
pELi°
);

3140 
pEx¥
->
pRight
 = 
	`sub°Ex¥
(
db
,ÖEx¥->pRight, 
iTabÀ
, 
pELi°
);

3141 if–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_xIsSñe˘
) ){

3142 
	`sub°Sñe˘
(
db
, 
pEx¥
->
x
.
pSñe˘
, 
iTabÀ
, 
pELi°
, 1);

3144 
	`sub°Ex¥Li°
(
db
, 
pEx¥
->
x
.
pLi°
, 
iTabÀ
, 
pELi°
);

3147  
pEx¥
;

3148 
	}
}

3149 
	$sub°Ex¥Li°
(

3150 
sqlôe3
 *
db
,

3151 
Ex¥Li°
 *
pLi°
,

3152 
iTabÀ
,

3153 
Ex¥Li°
 *
pELi°


3155 
i
;

3156 if–
pLi°
==0 ) ;

3157 
i
=0; i<
pLi°
->
nEx¥
; i++){

3158 
pLi°
->
a
[
i
].
pEx¥
 = 
	`sub°Ex¥
(
db
,ÖLi°->a[i].pEx¥, 
iTabÀ
, 
pELi°
);

3160 
	}
}

3161 
	$sub°Sñe˘
(

3162 
sqlôe3
 *
db
,

3163 
Sñe˘
 *
p
,

3164 
iTabÀ
,

3165 
Ex¥Li°
 *
pELi°
,

3166 
doPri‹


3168 
SrcLi°
 *
pSrc
;

3169 
SrcLi°_ôem
 *
pIãm
;

3170 
i
;

3171 if–!
p
 ) ;

3173 
	`sub°Ex¥Li°
(
db
, 
p
->
pELi°
, 
iTabÀ
,ÖEList);

3174 
	`sub°Ex¥Li°
(
db
, 
p
->
pGroupBy
, 
iTabÀ
, 
pELi°
);

3175 
	`sub°Ex¥Li°
(
db
, 
p
->
pOrdîBy
, 
iTabÀ
, 
pELi°
);

3176 
p
->
pHavög
 = 
	`sub°Ex¥
(
db
,Ö->pHavög, 
iTabÀ
, 
pELi°
);

3177 
p
->
pWhîe
 = 
	`sub°Ex¥
(
db
,Ö->pWhîe, 
iTabÀ
, 
pELi°
);

3178 
pSrc
 = 
p
->pSrc;

3179 
	`as£π
–
pSrc
!=0 );

3180 
i
=
pSrc
->
nSrc
, 
pIãm
ıSrc->
a
; i>0; i--,ÖItem++){

3181 
	`sub°Sñe˘
(
db
, 
pIãm
->
pSñe˘
, 
iTabÀ
, 
pELi°
, 1);

3182 if–
pIãm
->
fg
.
isTabFunc
 ){

3183 
	`sub°Ex¥Li°
(
db
, 
pIãm
->
u1
.
pFuncArg
, 
iTabÀ
, 
pELi°
);

3186 } 
doPri‹
 && (
p
 =Ö->
pPri‹
)!=0 );

3187 
	}
}

3190 #i‡!
deföed
(
SQLITE_OMIT_SUBQUERY
Ë|| !deföed(
SQLITE_OMIT_VIEW
)

3330 
	$Ê©ãnSubquîy
(

3331 
P¨£
 *
pP¨£
,

3332 
Sñe˘
 *
p
,

3333 
iFrom
,

3334 
isAgg
,

3335 
subquîyIsAgg


3337 c⁄° *
zSavedAuthC⁄ãxt
 = 
pP¨£
->
zAuthC⁄ãxt
;

3338 
Sñe˘
 *
pP¨ít
;

3339 
Sñe˘
 *
pSub
;

3340 
Sñe˘
 *
pSub1
;

3341 
SrcLi°
 *
pSrc
;

3342 
SrcLi°
 *
pSubSrc
;

3343 
Ex¥Li°
 *
pLi°
;

3344 
iP¨ít
;

3345 
i
;

3346 
Ex¥
 *
pWhîe
;

3347 
SrcLi°_ôem
 *
pSubôem
;

3348 
sqlôe3
 *
db
 = 
pP¨£
->db;

3352 
	`as£π
–
p
!=0 );

3353 
	`as£π
–
p
->
pPri‹
==0 );

3354 if–
	`O±imiz©i⁄DißbÀd
(
db
, 
SQLITE_QuîyFœâíî
) )  0;

3355 
pSrc
 = 
p
->pSrc;

3356 
	`as£π
–
pSrc
 && 
iFrom
>=0 && iFrom<pSrc->
nSrc
 );

3357 
pSubôem
 = &
pSrc
->
a
[
iFrom
];

3358 
iP¨ít
 = 
pSubôem
->
iCurs‹
;

3359 
pSub
 = 
pSubôem
->
pSñe˘
;

3360 
	`as£π
–
pSub
!=0 );

3361 if–
subquîyIsAgg
 ){

3362 if–
isAgg
 )  0;

3363 if–
pSrc
->
nSrc
>1 )  0;

3364 if–(
p
->
pWhîe
 && 
	`Ex¥HasPr›îty
’->pWhîe,
EP_Subquîy
))

3365 || (
	`sqlôe3Ex¥Li°Fœgs
(
p
->
pELi°
Ë& 
EP_Subquîy
)!=0

3366 || (
	`sqlôe3Ex¥Li°Fœgs
(
p
->
pOrdîBy
Ë& 
EP_Subquîy
)!=0

3372 
pSubSrc
 = 
pSub
->
pSrc
;

3373 
	`as£π
–
pSubSrc
 );

3379 if–
pSub
->
pLimô
 && 
p
->pLimit )  0;

3380 if–
pSub
->
pOff£t
 )  0;

3381 if–(
p
->
£lFœgs
 & 
SF_Compound
)!=0 && 
pSub
->
pLimô
 ){

3384 if–
pSubSrc
->
nSrc
==0 )  0;

3385 if–
pSub
->
£lFœgs
 & 
SF_Di°ö˘
 )  0;

3386 if–
pSub
->
pLimô
 && (
pSrc
->
nSrc
>1 || 
isAgg
) ){

3389 if–(
p
->
£lFœgs
 & 
SF_Di°ö˘
)!=0 && 
subquîyIsAgg
 ){

3392 if–
p
->
pOrdîBy
 && 
pSub
->pOrderBy ){

3395 if–
isAgg
 && 
pSub
->
pOrdîBy
 )  0;

3396 if–
pSub
->
pLimô
 && 
p
->
pWhîe
 )  0;

3397 if–
pSub
->
pLimô
 && (
p
->
£lFœgs
 & 
SF_Di°ö˘
)!=0 ){

3400 
	`ã°ˇ£
–
pSub
->
£lFœgs
 & 
SF_Recursive
 );

3401 
	`ã°ˇ£
–
pSub
->
£lFœgs
 & 
SF_MöMaxAgg
 );

3402 if–
pSub
->
£lFœgs
 & (
SF_Recursive
|
SF_MöMaxAgg
) ){

3405 if–(
p
->
£lFœgs
 & 
SF_Recursive
Ë&& 
pSub
->
pPri‹
 ){

3441 if–(
pSubôem
->
fg
.
joöty≥
 & 
JT_OUTER
)!=0 ){

3450 if–
pSub
->
pPri‹
 ){

3451 if–
pSub
->
pOrdîBy
 ){

3454 if–
isAgg
 || (
p
->
£lFœgs
 & 
SF_Di°ö˘
)!=0 || 
pSrc
->
nSrc
!=1 ){

3457 
pSub1
=
pSub
;ÖSub1;ÖSub1ıSub1->
pPri‹
){

3458 
	`ã°ˇ£
–(
pSub1
->
£lFœgs
 & (
SF_Di°ö˘
|
SF_Aggªg©e
))==SF_Distinct );

3459 
	`ã°ˇ£
–(
pSub1
->
£lFœgs
 & (
SF_Di°ö˘
|
SF_Aggªg©e
))==SF_Aggregate );

3460 
	`as£π
–
pSub
->
pSrc
!=0 );

3461 
	`as£π
–
pSub
->
pELi°
->
nEx¥
==
pSub1
->pEList->nExpr );

3462 if–(
pSub1
->
£lFœgs
 & (
SF_Di°ö˘
|
SF_Aggªg©e
))!=0

3463 || (
pSub1
->
pPri‹
 &&ÖSub1->
›
!=
TK_ALL
)

3464 || 
pSub1
->
pSrc
->
nSrc
<1

3468 
	`ã°ˇ£
–
pSub1
->
pSrc
->
nSrc
>1 );

3472 if–
p
->
pOrdîBy
 ){

3473 
ii
;

3474 
ii
=0; ii<
p
->
pOrdîBy
->
nEx¥
; ii++){

3475 if–
p
->
pOrdîBy
->
a
[
ii
].
u
.
x
.
iOrdîByCﬁ
==0 )  0;

3481 
	`SELECTTRACE
(1,
pP¨£
,
p
,("flatten %s.%p fromÅerm %d\n",

3482 
pSub
->
zSñName
,ÖSub, 
iFrom
));

3485 
pP¨£
->
zAuthC⁄ãxt
 = 
pSubôem
->
zName
;

3486 
	`TESTONLY
(
i
 =Ë
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_SELECT
, 0, 0, 0);

3487 
	`ã°ˇ£
–
i
==
SQLITE_DENY
 );

3488 
pP¨£
->
zAuthC⁄ãxt
 = 
zSavedAuthC⁄ãxt
;

3523 
pSub
ıSub->
pPri‹
;ÖSub;ÖSub=pSub->pPrior){

3524 
Sñe˘
 *
pNew
;

3525 
Ex¥Li°
 *
pOrdîBy
 = 
p
->pOrderBy;

3526 
Ex¥
 *
pLimô
 = 
p
->pLimit;

3527 
Ex¥
 *
pOff£t
 = 
p
->pOffset;

3528 
Sñe˘
 *
pPri‹
 = 
p
->pPrior;

3529 
p
->
pOrdîBy
 = 0;

3530 
p
->
pSrc
 = 0;

3531 
p
->
pPri‹
 = 0;

3532 
p
->
pLimô
 = 0;

3533 
p
->
pOff£t
 = 0;

3534 
pNew
 = 
	`sqlôe3Sñe˘Dup
(
db
, 
p
, 0);

3535 
	`sqlôe3Sñe˘SëName
(
pNew
, 
pSub
->
zSñName
);

3536 
p
->
pOff£t
 =ÖOffset;

3537 
p
->
pLimô
 =ÖLimit;

3538 
p
->
pOrdîBy
 =ÖOrderBy;

3539 
p
->
pSrc
 =ÖSrc;

3540 
p
->
›
 = 
TK_ALL
;

3541 if–
pNew
==0 ){

3542 
p
->
pPri‹
 =ÖPrior;

3544 
pNew
->
pPri‹
 =ÖPrior;

3545 if–
pPri‹
 )ÖPri‹->
pNext
 = 
pNew
;

3546 
pNew
->
pNext
 = 
p
;

3547 
p
->
pPri‹
 = 
pNew
;

3548 
	`SELECTTRACE
(2,
pP¨£
,
p
,

3550 
pNew
->
zSñName
,ÖNew));

3552 if–
db
->
mÆlocFaûed
 )  1;

3558 
pSub
 = 
pSub1
 = 
pSubôem
->
pSñe˘
;

3563 
	`sqlôe3DbFªe
(
db
, 
pSubôem
->
zD©aba£
);

3564 
	`sqlôe3DbFªe
(
db
, 
pSubôem
->
zName
);

3565 
	`sqlôe3DbFªe
(
db
, 
pSubôem
->
zAlüs
);

3566 
pSubôem
->
zD©aba£
 = 0;

3567 
pSubôem
->
zName
 = 0;

3568 
pSubôem
->
zAlüs
 = 0;

3569 
pSubôem
->
pSñe˘
 = 0;

3578 if–
	`ALWAYS
(
pSubôem
->
pTab
!=0) ){

3579 
TabÀ
 *
pTabToDñ
 = 
pSubôem
->
pTab
;

3580 if–
pTabToDñ
->
nRef
==1 ){

3581 
P¨£
 *
pT›Àvñ
 = 
	`sqlôe3P¨£T›Àvñ
(
pP¨£
);

3582 
pTabToDñ
->
pNextZombõ
 = 
pT›Àvñ
->
pZombõTab
;

3583 
pT›Àvñ
->
pZombõTab
 = 
pTabToDñ
;

3585 
pTabToDñ
->
nRef
--;

3587 
pSubôem
->
pTab
 = 0;

3603 
pP¨ít
=
p
;ÖP¨ít;ÖP¨ítıP¨ít->
pPri‹
, 
pSub
=pSub->pPrior){

3604 
nSubSrc
;

3605 
u8
 
joöty≥
 = 0;

3606 
pSubSrc
 = 
pSub
->
pSrc
;

3607 
nSubSrc
 = 
pSubSrc
->
nSrc
;

3608 
pSrc
 = 
pP¨ít
->pSrc;

3610 if–
pSrc
 ){

3611 
	`as£π
–
pP¨ít
==
p
 );

3612 
joöty≥
 = 
pSubôem
->
fg
.jointype;

3614 
	`as£π
–
pP¨ít
!=
p
 );

3615 
pSrc
 = 
pP¨ít
->pSr¯
	`sqlôe3SrcLi°Aµíd
(
db
, 0, 0, 0);

3616 if–
pSrc
==0 ){

3617 
	`as£π
–
db
->
mÆlocFaûed
 );

3637 if–
nSubSrc
>1 ){

3638 
pP¨ít
->
pSrc
 =ÖSr¯
	`sqlôe3SrcLi°E∆¨ge
(
db
,ÖSrc, 
nSubSrc
-1,
iFrom
+1);

3639 if–
db
->
mÆlocFaûed
 ){

3647 
i
=0; i<
nSubSrc
; i++){

3648 
	`sqlôe3IdLi°Dñëe
(
db
, 
pSrc
->
a
[
i
+
iFrom
].
pUsög
);

3649 
	`as£π
–
pSrc
->
a
[
i
+
iFrom
].
fg
.
isTabFunc
==0 );

3650 
pSrc
->
a
[
i
+
iFrom
] = 
pSubSrc
->a[i];

3651 
	`mem£t
(&
pSubSrc
->
a
[
i
], 0, (pSubSrc->a[i]));

3653 
pSrc
->
a
[
iFrom
].
fg
.
joöty≥
 = jointype;

3667 
pLi°
 = 
pP¨ít
->
pELi°
;

3668 
i
=0; i<
pLi°
->
nEx¥
; i++){

3669 if–
pLi°
->
a
[
i
].
zName
==0 ){

3670 *
zName
 = 
	`sqlôe3DbSåDup
(
db
, 
pLi°
->
a
[
i
].
zS∑n
);

3671 
	`sqlôe3DequŸe
(
zName
);

3672 
pLi°
->
a
[
i
].
zName
 = zName;

3675 if–
pSub
->
pOrdîBy
 ){

3686 
Ex¥Li°
 *
pOrdîBy
 = 
pSub
->pOrderBy;

3687 
i
=0; i<
pOrdîBy
->
nEx¥
; i++){

3688 
pOrdîBy
->
a
[
i
].
u
.
x
.
iOrdîByCﬁ
 = 0;

3690 
	`as£π
–
pP¨ít
->
pOrdîBy
==0 );

3691 
	`as£π
–
pSub
->
pPri‹
==0 );

3692 
pP¨ít
->
pOrdîBy
 =ÖOrderBy;

3693 
pSub
->
pOrdîBy
 = 0;

3695 
pWhîe
 = 
	`sqlôe3Ex¥Dup
(
db
, 
pSub
->pWhere, 0);

3696 if–
subquîyIsAgg
 ){

3697 
	`as£π
–
pP¨ít
->
pHavög
==0 );

3698 
pP¨ít
->
pHavög
 =ÖP¨ít->
pWhîe
;

3699 
pP¨ít
->
pWhîe
 =ÖWhere;

3700 
pP¨ít
->
pHavög
 = 
	`sqlôe3Ex¥And
(
db
,ÖParent->pHaving,

3701 
	`sqlôe3Ex¥Dup
(
db
, 
pSub
->
pHavög
, 0));

3702 
	`as£π
–
pP¨ít
->
pGroupBy
==0 );

3703 
pP¨ít
->
pGroupBy
 = 
	`sqlôe3Ex¥Li°Dup
(
db
, 
pSub
->pGroupBy, 0);

3705 
pP¨ít
->
pWhîe
 = 
	`sqlôe3Ex¥And
(
db
,ÖParent->pWhere,ÖWhere);

3707 
	`sub°Sñe˘
(
db
, 
pP¨ít
, 
iP¨ít
, 
pSub
->
pELi°
, 0);

3712 
pP¨ít
->
£lFœgs
 |
pSub
->£lFœg†& 
SF_Di°ö˘
;

3720 if–
pSub
->
pLimô
 ){

3721 
pP¨ít
->
pLimô
 = 
pSub
->pLimit;

3722 
pSub
->
pLimô
 = 0;

3729 
	`sqlôe3Sñe˘Dñëe
(
db
, 
pSub1
);

3731 #i‡
SELECTTRACE_ENABLED


3732 if–
sqlôe3Sñe˘Tø˚
 & 0x100 ){

3733 
	`SELECTTRACE
(0x100,
pP¨£
,
p
,("After flattening:\n"));

3734 
	`sqlôe3TªeVõwSñe˘
(0, 
p
, 0);

3739 
	}
}

3744 #i‡!
deföed
(
SQLITE_OMIT_SUBQUERY
Ë|| !deföed(
SQLITE_OMIT_VIEW
)

3780 
	$pushDownWhîeTîms
(

3781 
sqlôe3
 *
db
,

3782 
Sñe˘
 *
pSubq
,

3783 
Ex¥
 *
pWhîe
,

3784 
iCurs‹


3786 
Ex¥
 *
pNew
;

3787 
nChng
 = 0;

3788 
Sñe˘
 *
pX
;

3789 if–
pWhîe
==0 )  0;

3790 
pX
=
pSubq
;ÖX;ÖXıX->
pPri‹
){

3791 if–(
pX
->
£lFœgs
 & (
SF_Aggªg©e
|
SF_Recursive
))!=0 ){

3792 
	`ã°ˇ£
–
pX
->
£lFœgs
 & 
SF_Aggªg©e
 );

3793 
	`ã°ˇ£
–
pX
->
£lFœgs
 & 
SF_Recursive
 );

3794 
	`ã°ˇ£
–
pX
!=
pSubq
 );

3798 if–
pSubq
->
pLimô
!=0 ){

3801  
pWhîe
->
›
==
TK_AND
 ){

3802 
nChng
 +
	`pushDownWhîeTîms
(
db
, 
pSubq
, 
pWhîe
->
pRight
, 
iCurs‹
);

3803 
pWhîe
 =ÖWhîe->
pLe·
;

3805 if–
	`Ex¥HasPr›îty
(
pWhîe
,
EP_FromJoö
) )  0;

3806 if–
	`sqlôe3Ex¥IsTabÀC⁄°™t
(
pWhîe
, 
iCurs‹
) ){

3807 
nChng
++;

3808  
pSubq
 ){

3809 
pNew
 = 
	`sqlôe3Ex¥Dup
(
db
, 
pWhîe
, 0);

3810 
pNew
 = 
	`sub°Ex¥
(
db
,ÖNew, 
iCurs‹
, 
pSubq
->
pELi°
);

3811 
pSubq
->
pWhîe
 = 
	`sqlôe3Ex¥And
(
db
,ÖSubq->pWhîe, 
pNew
);

3812 
pSubq
 =ÖSubq->
pPri‹
;

3815  
nChng
;

3816 
	}
}

3834 
u8
 
	$möMaxQuîy
(
AggInfo
 *
pAggInfo
, 
Ex¥Li°
 **
µMöMax
){

3835 
eRë
 = 
WHERE_ORDERBY_NORMAL
;

3837 *
µMöMax
 = 0;

3838 if–
pAggInfo
->
nFunc
==1 ){

3839 
Ex¥
 *
pEx¥
 = 
pAggInfo
->
aFunc
[0].pExpr;

3840 
Ex¥Li°
 *
pELi°
 = 
pEx¥
->
x
.
pLi°
;

3842 
	`as£π
–
pEx¥
->
›
==
TK_AGG_FUNCTION
 );

3843 if–
pELi°
 &&ÖELi°->
nEx¥
==1 &&ÖELi°->
a
[0].
pEx¥
->
›
==
TK_AGG_COLUMN
 ){

3844 c⁄° *
zFunc
 = 
pEx¥
->
u
.
zTokí
;

3845 if–
	`sqlôe3SåICmp
(
zFunc
, "min")==0 ){

3846 
eRë
 = 
WHERE_ORDERBY_MIN
;

3847 *
µMöMax
 = 
pELi°
;

3848 }if–
	`sqlôe3SåICmp
(
zFunc
, "max")==0 ){

3849 
eRë
 = 
WHERE_ORDERBY_MAX
;

3850 *
µMöMax
 = 
pELi°
;

3855 
	`as£π
–*
µMöMax
==0 || (*µMöMax)->
nEx¥
==1 );

3856  
eRë
;

3857 
	}
}

3870 
TabÀ
 *
	$isSim∂eCou¡
(
Sñe˘
 *
p
, 
AggInfo
 *
pAggInfo
){

3871 
TabÀ
 *
pTab
;

3872 
Ex¥
 *
pEx¥
;

3874 
	`as£π
–!
p
->
pGroupBy
 );

3876 if–
p
->
pWhîe
 ||Ö->
pELi°
->
nEx¥
!=1

3877 || 
p
->
pSrc
->
nSrc
!=1 ||Ö->pSrc->
a
[0].
pSñe˘


3881 
pTab
 = 
p
->
pSrc
->
a
[0].pTab;

3882 
pEx¥
 = 
p
->
pELi°
->
a
[0].pExpr;

3883 
	`as£π
–
pTab
 && !pTab->
pSñe˘
 && 
pEx¥
 );

3885 if–
	`IsVútuÆ
(
pTab
) )  0;

3886 if–
pEx¥
->
›
!=
TK_AGG_FUNCTION
 )  0;

3887 if–
	`NEVER
(
pAggInfo
->
nFunc
==0) )  0;

3888 if–(
pAggInfo
->
aFunc
[0].
pFunc
->
funcFœgs
&
SQLITE_FUNC_COUNT
)==0 )  0;

3889 if–
pEx¥
->
Êags
&
EP_Di°ö˘
 )  0;

3891  
pTab
;

3892 
	}
}

3901 
	$sqlôe3IndexedByLookup
(
P¨£
 *
pP¨£
, 
SrcLi°_ôem
 *
pFrom
){

3902 if–
pFrom
->
pTab
 &&ÖFrom->
fg
.
isIndexedBy
 ){

3903 
TabÀ
 *
pTab
 = 
pFrom
->pTab;

3904 *
zIndexedBy
 = 
pFrom
->
u1
.zIndexedBy;

3905 
Index
 *
pIdx
;

3906 
pIdx
=
pTab
->
pIndex
;

3907 
pIdx
 && 
	`sqlôe3SåICmp
’Idx->
zName
, 
zIndexedBy
);

3908 
pIdx
ıIdx->
pNext


3910 if–!
pIdx
 ){

3911 
	`sqlôe3Eº‹Msg
(
pP¨£
, "nÿsuch index: %s", 
zIndexedBy
, 0);

3912 
pP¨£
->
checkSchema
 = 1;

3913  
SQLITE_ERROR
;

3915 
pFrom
->
pIBIndex
 = 
pIdx
;

3917  
SQLITE_OK
;

3918 
	}
}

3940 
	$c⁄vîtCompoundSñe˘ToSubquîy
(
WÆkî
 *
pWÆkî
, 
Sñe˘
 *
p
){

3941 
i
;

3942 
Sñe˘
 *
pNew
;

3943 
Sñe˘
 *
pX
;

3944 
sqlôe3
 *
db
;

3945 
Ex¥Li°_ôem
 *
a
;

3946 
SrcLi°
 *
pNewSrc
;

3947 
P¨£
 *
pP¨£
;

3948 
Tokí
 
dummy
;

3950 if–
p
->
pPri‹
==0 )  
WRC_C⁄töue
;

3951 if–
p
->
pOrdîBy
==0 )  
WRC_C⁄töue
;

3952 
pX
=
p
;ÖX && (pX->
›
==
TK_ALL
 ||ÖX->›==
TK_SELECT
);ÖXıX->
pPri‹
){}

3953 if–
pX
==0 )  
WRC_C⁄töue
;

3954 
a
 = 
p
->
pOrdîBy
->a;

3955 
i
=
p
->
pOrdîBy
->
nEx¥
-1; i>=0; i--){

3956 if–
a
[
i
].
pEx¥
->
Êags
 & 
EP_Cﬁœã
 ) ;

3958 if–
i
<0 )  
WRC_C⁄töue
;

3962 
pP¨£
 = 
pWÆkî
->pParse;

3963 
db
 = 
pP¨£
->db;

3964 
pNew
 = 
	`sqlôe3DbMÆlocZîo
(
db
, (*pNew) );

3965 if–
pNew
==0 )  
WRC_Ab‹t
;

3966 
	`mem£t
(&
dummy
, 0, (dummy));

3967 
pNewSrc
 = 
	`sqlôe3SrcLi°AµídFromTîm
(
pP¨£
,0,0,0,&
dummy
,
pNew
,0,0);

3968 if–
pNewSrc
==0 )  
WRC_Ab‹t
;

3969 *
pNew
 = *
p
;

3970 
p
->
pSrc
 = 
pNewSrc
;

3971 
p
->
pELi°
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
, 0, 
	`sqlôe3Ex¥
(
db
, 
TK_ASTERISK
, 0));

3972 
p
->
›
 = 
TK_SELECT
;

3973 
p
->
pWhîe
 = 0;

3974 
pNew
->
pGroupBy
 = 0;

3975 
pNew
->
pHavög
 = 0;

3976 
pNew
->
pOrdîBy
 = 0;

3977 
p
->
pPri‹
 = 0;

3978 
p
->
pNext
 = 0;

3979 
p
->
pWôh
 = 0;

3980 
p
->
£lFœgs
 &~
SF_Compound
;

3981 
	`as£π
–(
p
->
£lFœgs
 & 
SF_C⁄vîãd
)==0 );

3982 
p
->
£lFœgs
 |
SF_C⁄vîãd
;

3983 
	`as£π
–
pNew
->
pPri‹
!=0 );

3984 
pNew
->
pPri‹
->
pNext
 =ÖNew;

3985 
pNew
->
pLimô
 = 0;

3986 
pNew
->
pOff£t
 = 0;

3987  
WRC_C⁄töue
;

3988 
	}
}

3995 
	$ˇ¬ŸBeFun˘i⁄
(
P¨£
 *
pP¨£
, 
SrcLi°_ôem
 *
pFrom
){

3996 if–
pFrom
->
fg
.
isTabFunc
 ){

3997 
	`sqlôe3Eº‹Msg
(
pP¨£
, "'%s' i†nŸá fun˘i⁄", 
pFrom
->
zName
);

4001 
	}
}

4003 #i‚de‡
SQLITE_OMIT_CTE


4014 
Cã
 *
	$£¨chWôh
(

4015 
Wôh
 *
pWôh
,

4016 
SrcLi°_ôem
 *
pIãm
,

4017 
Wôh
 **
µC⁄ãxt


4019 c⁄° *
zName
;

4020 if–
pIãm
->
zD©aba£
==0 && (
zName
 =ÖItem->zName)!=0 ){

4021 
Wôh
 *
p
;

4022 
p
=
pWôh
;Ö;Öı->
pOuãr
){

4023 
i
;

4024 
i
=0; i<
p
->
nCã
; i++){

4025 if–
	`sqlôe3SåICmp
(
zName
, 
p
->
a
[
i
].zName)==0 ){

4026 *
µC⁄ãxt
 = 
p
;

4027  &
p
->
a
[
i
];

4033 
	}
}

4045 
	$sqlôe3WôhPush
(
P¨£
 *
pP¨£
, 
Wôh
 *
pWôh
, 
u8
 
bFªe
){

4046 
	`as£π
–
bFªe
==0 || (
pP¨£
->
pWôh
==0 &&ÖP¨£->
pWôhToFªe
==0) );

4047 if–
pWôh
 ){

4048 
	`as£π
–
pP¨£
->
pWôh
!=pWith );

4049 
pWôh
->
pOuãr
 = 
pP¨£
->pWith;

4050 
pP¨£
->
pWôh
 =ÖWith;

4051 if–
bFªe
 ) 
pP¨£
->
pWôhToFªe
 = 
pWôh
;

4053 
	}
}

4070 
	$wôhEx∑nd
(

4071 
WÆkî
 *
pWÆkî
,

4072 
SrcLi°_ôem
 *
pFrom


4074 
P¨£
 *
pP¨£
 = 
pWÆkî
->pParse;

4075 
sqlôe3
 *
db
 = 
pP¨£
->db;

4076 
Cã
 *
pCã
;

4077 
Wôh
 *
pWôh
;

4079 
	`as£π
–
pFrom
->
pTab
==0 );

4081 
pCã
 = 
	`£¨chWôh
(
pP¨£
->
pWôh
, 
pFrom
, &pWith);

4082 if–
pCã
 ){

4083 
TabÀ
 *
pTab
;

4084 
Ex¥Li°
 *
pELi°
;

4085 
Sñe˘
 *
pSñ
;

4086 
Sñe˘
 *
pLe·
;

4087 
bMayRecursive
;

4088 
Wôh
 *
pSavedWôh
;

4094 if–
pCã
->
zCãEº
 ){

4095 
	`sqlôe3Eº‹Msg
(
pP¨£
, 
pCã
->
zCãEº
,ÖCã->
zName
);

4096  
SQLITE_ERROR
;

4098 if–
	`ˇ¬ŸBeFun˘i⁄
(
pP¨£
, 
pFrom
ËË 
SQLITE_ERROR
;

4100 
	`as£π
–
pFrom
->
pTab
==0 );

4101 
pFrom
->
pTab
 =ÖTab = 
	`sqlôe3DbMÆlocZîo
(
db
, (
TabÀ
));

4102 if–
pTab
==0 )  
WRC_Ab‹t
;

4103 
pTab
->
nRef
 = 1;

4104 
pTab
->
zName
 = 
	`sqlôe3DbSåDup
(
db
, 
pCã
->zName);

4105 
pTab
->
iPKey
 = -1;

4106 
pTab
->
nRowLogE°
 = 200; 
	`as£π
–200==
	`sqlôe3LogE°
(1048576) );

4107 
pTab
->
èbFœgs
 |
TF_EphemîÆ
 | 
TF_NoVisibÀRowid
;

4108 
pFrom
->
pSñe˘
 = 
	`sqlôe3Sñe˘Dup
(
db
, 
pCã
->pSelect, 0);

4109 if–
db
->
mÆlocFaûed
 )  
SQLITE_NOMEM_BKPT
;

4110 
	`as£π
–
pFrom
->
pSñe˘
 );

4113 
pSñ
 = 
pFrom
->
pSñe˘
;

4114 
bMayRecursive
 = ( 
pSñ
->
›
==
TK_ALL
 ||ÖSñ->›==
TK_UNION
 );

4115 if–
bMayRecursive
 ){

4116 
i
;

4117 
SrcLi°
 *
pSrc
 = 
pFrom
->
pSñe˘
->pSrc;

4118 
i
=0; i<
pSrc
->
nSrc
; i++){

4119 
SrcLi°_ôem
 *
pIãm
 = &
pSrc
->
a
[
i
];

4120 if–
pIãm
->
zD©aba£
==0

4121 && 
pIãm
->
zName
!=0

4122 && 0==
	`sqlôe3SåICmp
(
pIãm
->
zName
, 
pCã
->zName)

4124 
pIãm
->
pTab
 =ÖTab;

4125 
pIãm
->
fg
.
isRecursive
 = 1;

4126 
pTab
->
nRef
++;

4127 
pSñ
->
£lFœgs
 |
SF_Recursive
;

4133 if–
pTab
->
nRef
>2 ){

4134 
	`sqlôe3Eº‹Msg
(

4135 
pP¨£
, "mu…ùÀÑe„ªn˚†tÿªcursivêèbÀ: %s", 
pCã
->
zName


4137  
SQLITE_ERROR
;

4139 
	`as£π
–
pTab
->
nRef
==1 || ((
pSñ
->
£lFœgs
&
SF_Recursive
) &&ÖTab->nRef==2 ));

4141 
pCã
->
zCãEº
 = "circularÑeference: %s";

4142 
pSavedWôh
 = 
pP¨£
->
pWôh
;

4143 
pP¨£
->
pWôh
 =ÖWith;

4144 
	`sqlôe3WÆkSñe˘
(
pWÆkî
, 
bMayRecursive
 ? 
pSñ
->
pPri‹
 :ÖSel);

4145 
pP¨£
->
pWôh
 =ÖWith;

4147 
pLe·
=
pSñ
;ÖLe·->
pPri‹
;ÖLeft=pLeft->pPrior);

4148 
pELi°
 = 
pLe·
->pEList;

4149 if–
pCã
->
pCﬁs
 ){

4150 if–
pELi°
 &&ÖELi°->
nEx¥
!=
pCã
->
pCﬁs
->nExpr ){

4151 
	`sqlôe3Eº‹Msg
(
pP¨£
, "table %s has %d values for %d columns",

4152 
pCã
->
zName
, 
pELi°
->
nEx¥
,ÖCã->
pCﬁs
->nExpr

4154 
pP¨£
->
pWôh
 = 
pSavedWôh
;

4155  
SQLITE_ERROR
;

4157 
pELi°
 = 
pCã
->
pCﬁs
;

4160 
	`sqlôe3CﬁumnsFromEx¥Li°
(
pP¨£
, 
pELi°
, &
pTab
->
nCﬁ
, &pTab->
aCﬁ
);

4161 if–
bMayRecursive
 ){

4162 if–
pSñ
->
£lFœgs
 & 
SF_Recursive
 ){

4163 
pCã
->
zCãEº
 = "multipleÑecursiveÑeferences: %s";

4165 
pCã
->
zCãEº
 = "recursiveÑeference iná subquery: %s";

4167 
	`sqlôe3WÆkSñe˘
(
pWÆkî
, 
pSñ
);

4169 
pCã
->
zCãEº
 = 0;

4170 
pP¨£
->
pWôh
 = 
pSavedWôh
;

4173  
SQLITE_OK
;

4174 
	}
}

4177 #i‚de‡
SQLITE_OMIT_CTE


4186 
	$£À˘P›Wôh
(
WÆkî
 *
pWÆkî
, 
Sñe˘
 *
p
){

4187 
P¨£
 *
pP¨£
 = 
pWÆkî
->pParse;

4188 
Wôh
 *
pWôh
 = 
	`födRightmo°
(
p
)->pWith;

4189 if–
pWôh
!=0 ){

4190 
	`as£π
–
pP¨£
->
pWôh
==pWith );

4191 
pP¨£
->
pWôh
 =ÖWôh->
pOuãr
;

4193 
	}
}

4195 
	#£À˘P›Wôh
 0

	)

4222 
	$£À˘Ex∑ndî
(
WÆkî
 *
pWÆkî
, 
Sñe˘
 *
p
){

4223 
P¨£
 *
pP¨£
 = 
pWÆkî
->pParse;

4224 
i
, 
j
, 
k
;

4225 
SrcLi°
 *
pTabLi°
;

4226 
Ex¥Li°
 *
pELi°
;

4227 
SrcLi°_ôem
 *
pFrom
;

4228 
sqlôe3
 *
db
 = 
pP¨£
->db;

4229 
Ex¥
 *
pE
, *
pRight
, *
pEx¥
;

4230 
u16
 
£lFœgs
 = 
p
->selFlags;

4232 
p
->
£lFœgs
 |
SF_Ex∑nded
;

4233 if–
db
->
mÆlocFaûed
 ){

4234  
WRC_Ab‹t
;

4236 if–
	`NEVER
(
p
->
pSrc
==0Ë|| (
£lFœgs
 & 
SF_Ex∑nded
)!=0 ){

4237  
WRC_Pru√
;

4239 
pTabLi°
 = 
p
->
pSrc
;

4240 
pELi°
 = 
p
->pEList;

4241 if–
pWÆkî
->
xSñe˘CÆlback2
==
£À˘P›Wôh
 ){

4242 
	`sqlôe3WôhPush
(
pP¨£
, 
	`födRightmo°
(
p
)->
pWôh
, 0);

4248 
	`sqlôe3SrcLi°AssignCurs‹s
(
pP¨£
, 
pTabLi°
);

4254 
i
=0, 
pFrom
=
pTabLi°
->
a
; i<pTabLi°->
nSrc
; i++,ÖFrom++){

4255 
TabÀ
 *
pTab
;

4256 
	`as£π
–
pFrom
->
fg
.
isRecursive
==0 ||ÖFrom->
pTab
!=0 );

4257 if–
pFrom
->
fg
.
isRecursive
 ) ;

4258 
	`as£π
–
pFrom
->
pTab
==0 );

4259 #i‚de‡
SQLITE_OMIT_CTE


4260 if–
	`wôhEx∑nd
(
pWÆkî
, 
pFrom
ËË 
WRC_Ab‹t
;

4261 if–
pFrom
->
pTab
 ) {} 

4263 if–
pFrom
->
zName
==0 ){

4264 #i‚de‡
SQLITE_OMIT_SUBQUERY


4265 
Sñe˘
 *
pSñ
 = 
pFrom
->
pSñe˘
;

4267 
	`as£π
–
pSñ
!=0 );

4268 
	`as£π
–
pFrom
->
pTab
==0 );

4269 if–
	`sqlôe3WÆkSñe˘
(
pWÆkî
, 
pSñ
ËË 
WRC_Ab‹t
;

4270 
pFrom
->
pTab
 =ÖTab = 
	`sqlôe3DbMÆlocZîo
(
db
, (
TabÀ
));

4271 if–
pTab
==0 )  
WRC_Ab‹t
;

4272 
pTab
->
nRef
 = 1;

4273 
pTab
->
zName
 = 
	`sqlôe3MPrötf
(
db
, "sqlite_sq_%p", (*)pTab);

4274  
pSñ
->
pPri‹
 ){ÖSel =ÖSel->pPrior; }

4275 
	`sqlôe3CﬁumnsFromEx¥Li°
(
pP¨£
, 
pSñ
->
pELi°
,&
pTab
->
nCﬁ
,&pTab->
aCﬁ
);

4276 
pTab
->
iPKey
 = -1;

4277 
pTab
->
nRowLogE°
 = 200; 
	`as£π
–200==
	`sqlôe3LogE°
(1048576) );

4278 
pTab
->
èbFœgs
 |
TF_EphemîÆ
;

4282 
	`as£π
–
pFrom
->
pTab
==0 );

4283 
pFrom
->
pTab
 =ÖTab = 
	`sqlôe3LoˇãTabÀIãm
(
pP¨£
, 0,ÖFrom);

4284 if–
pTab
==0 )  
WRC_Ab‹t
;

4285 if–
pTab
->
nRef
==0xffff ){

4286 
	`sqlôe3Eº‹Msg
(
pP¨£
, "too manyÑeferencesÅo \"%s\": max 65535",

4287 
pTab
->
zName
);

4288 
pFrom
->
pTab
 = 0;

4289  
WRC_Ab‹t
;

4291 
pTab
->
nRef
++;

4292 if–!
	`IsVútuÆ
(
pTab
Ë&& 
	`ˇ¬ŸBeFun˘i⁄
(
pP¨£
, 
pFrom
) ){

4293  
WRC_Ab‹t
;

4295 #i‡!
	`deföed
(
SQLITE_OMIT_VIEW
Ë|| !deföed (
SQLITE_OMIT_VIRTUALTABLE
)

4296 if–
	`IsVútuÆ
(
pTab
Ë||ÖTab->
pSñe˘
 ){

4297 
i16
 
nCﬁ
;

4298 if–
	`sqlôe3VõwGëCﬁumnNames
(
pP¨£
, 
pTab
ËË 
WRC_Ab‹t
;

4299 
	`as£π
–
pFrom
->
pSñe˘
==0 );

4300 
pFrom
->
pSñe˘
 = 
	`sqlôe3Sñe˘Dup
(
db
, 
pTab
->pSelect, 0);

4301 
	`sqlôe3Sñe˘SëName
(
pFrom
->
pSñe˘
, 
pTab
->
zName
);

4302 
nCﬁ
 = 
pTab
->nCol;

4303 
pTab
->
nCﬁ
 = -1;

4304 
	`sqlôe3WÆkSñe˘
(
pWÆkî
, 
pFrom
->
pSñe˘
);

4305 
pTab
->
nCﬁ
 =ÇCol;

4311 if–
	`sqlôe3IndexedByLookup
(
pP¨£
, 
pFrom
) ){

4312  
WRC_Ab‹t
;

4318 if–
db
->
mÆlocFaûed
 || 
	`sqlôePro˚ssJoö
(
pP¨£
, 
p
) ){

4319  
WRC_Ab‹t
;

4333 
k
=0; k<
pELi°
->
nEx¥
; k++){

4334 
pE
 = 
pELi°
->
a
[
k
].
pEx¥
;

4335 if–
pE
->
›
==
TK_ASTERISK
 ) ;

4336 
	`as£π
–
pE
->
›
!=
TK_DOT
 ||ÖE->
pRight
!=0 );

4337 
	`as£π
–
pE
->
›
!=
TK_DOT
 || (pE->
pLe·
!=0 &&ÖE->pLe·->›==
TK_ID
) );

4338 if–
pE
->
›
==
TK_DOT
 &&ÖE->
pRight
->›==
TK_ASTERISK
 ) ;

4340 if–
k
<
pELi°
->
nEx¥
 ){

4346 
Ex¥Li°_ôem
 *
a
 = 
pELi°
->a;

4347 
Ex¥Li°
 *
pNew
 = 0;

4348 
Êags
 = 
pP¨£
->
db
->flags;

4349 
l⁄gNames
 = (
Êags
 & 
SQLITE_FuŒCﬁNames
)!=0

4350 && (
Êags
 & 
SQLITE_Sh‹tCﬁNames
)==0;

4352 
k
=0; k<
pELi°
->
nEx¥
; k++){

4353 
pE
 = 
a
[
k
].
pEx¥
;

4354 
pRight
 = 
pE
->pRight;

4355 
	`as£π
–
pE
->
›
!=
TK_DOT
 || 
pRight
!=0 );

4356 if–
pE
->
›
!=
TK_ASTERISK


4357 && (
pE
->
›
!=
TK_DOT
 || 
pRight
->›!=
TK_ASTERISK
)

4361 
pNew
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,ÖNew, 
a
[
k
].
pEx¥
);

4362 if–
pNew
 ){

4363 
pNew
->
a
[pNew->
nEx¥
-1].
zName
 =á[
k
].zName;

4364 
pNew
->
a
[pNew->
nEx¥
-1].
zS∑n
 =á[
k
].zSpan;

4365 
a
[
k
].
zName
 = 0;

4366 
a
[
k
].
zS∑n
 = 0;

4368 
a
[
k
].
pEx¥
 = 0;

4372 
èbÀSìn
 = 0;

4373 *
zTName
 = 0;

4374 if–
pE
->
›
==
TK_DOT
 ){

4375 
	`as£π
–
pE
->
pLe·
!=0 );

4376 
	`as£π
–!
	`Ex¥HasPr›îty
(
pE
->
pLe·
, 
EP_I¡VÆue
) );

4377 
zTName
 = 
pE
->
pLe·
->
u
.
zTokí
;

4379 
i
=0, 
pFrom
=
pTabLi°
->
a
; i<pTabLi°->
nSrc
; i++,ÖFrom++){

4380 
TabÀ
 *
pTab
 = 
pFrom
->pTab;

4381 
Sñe˘
 *
pSub
 = 
pFrom
->
pSñe˘
;

4382 *
zTabName
 = 
pFrom
->
zAlüs
;

4383 c⁄° *
zSchemaName
 = 0;

4384 
iDb
;

4385 if–
zTabName
==0 ){

4386 
zTabName
 = 
pTab
->
zName
;

4388 if–
db
->
mÆlocFaûed
 ) ;

4389 if–
pSub
==0 || (pSub->
£lFœgs
 & 
SF_Ne°edFrom
)==0 ){

4390 
pSub
 = 0;

4391 if–
zTName
 && 
	`sqlôe3SåICmp
(zTName, 
zTabName
)!=0 ){

4394 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pTab
->
pSchema
);

4395 
zSchemaName
 = 
iDb
>=0 ? 
db
->
aDb
[iDb].
zName
 : "*";

4397 
j
=0; j<
pTab
->
nCﬁ
; j++){

4398 *
zName
 = 
pTab
->
aCﬁ
[
j
].zName;

4399 *
zCﬁ«me
;

4400 *
zToFªe
;

4401 
Tokí
 
sCﬁ«me
;

4403 
	`as£π
–
zName
 );

4404 if–
zTName
 && 
pSub


4405 && 
	`sqlôe3M©chS∑nName
(
pSub
->
pELi°
->
a
[
j
].
zS∑n
, 0, 
zTName
, 0)==0

4414 if–(
p
->
£lFœgs
 & 
SF_In˛udeHiddí
)==0

4415 && 
	`IsHiddíCﬁumn
(&
pTab
->
aCﬁ
[
j
])

4419 
èbÀSìn
 = 1;

4421 if–
i
>0 && 
zTName
==0 ){

4422 if–(
pFrom
->
fg
.
joöty≥
 & 
JT_NATURAL
)!=0

4423 && 
	`èbÀAndCﬁumnIndex
(
pTabLi°
, 
i
, 
zName
, 0, 0)

4429 if–
	`sqlôe3IdLi°Index
(
pFrom
->
pUsög
, 
zName
)>=0 ){

4435 
pRight
 = 
	`sqlôe3Ex¥
(
db
, 
TK_ID
, 
zName
);

4436 
zCﬁ«me
 = 
zName
;

4437 
zToFªe
 = 0;

4438 if–
l⁄gNames
 || 
pTabLi°
->
nSrc
>1 ){

4439 
Ex¥
 *
pLe·
;

4440 
pLe·
 = 
	`sqlôe3Ex¥
(
db
, 
TK_ID
, 
zTabName
);

4441 
pEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_DOT
, 
pLe·
, 
pRight
, 0);

4442 if–
zSchemaName
 ){

4443 
pLe·
 = 
	`sqlôe3Ex¥
(
db
, 
TK_ID
, 
zSchemaName
);

4444 
pEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_DOT
, 
pLe·
,ÖExpr, 0);

4446 if–
l⁄gNames
 ){

4447 
zCﬁ«me
 = 
	`sqlôe3MPrötf
(
db
, "%s.%s", 
zTabName
, 
zName
);

4448 
zToFªe
 = 
zCﬁ«me
;

4451 
pEx¥
 = 
pRight
;

4453 
pNew
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pP¨£
,ÖNew, 
pEx¥
);

4454 
	`sqlôe3TokíInô
(&
sCﬁ«me
, 
zCﬁ«me
);

4455 
	`sqlôe3Ex¥Li°SëName
(
pP¨£
, 
pNew
, &
sCﬁ«me
, 0);

4456 if–
pNew
 && (
p
->
£lFœgs
 & 
SF_Ne°edFrom
)!=0 ){

4457 
Ex¥Li°_ôem
 *
pX
 = &
pNew
->
a
[pNew->
nEx¥
-1];

4458 if–
pSub
 ){

4459 
pX
->
zS∑n
 = 
	`sqlôe3DbSåDup
(
db
, 
pSub
->
pELi°
->
a
[
j
].zSpan);

4460 
	`ã°ˇ£
–
pX
->
zS∑n
==0 );

4462 
pX
->
zS∑n
 = 
	`sqlôe3MPrötf
(
db
, "%s.%s.%s",

4463 
zSchemaName
, 
zTabName
, 
zCﬁ«me
);

4464 
	`ã°ˇ£
–
pX
->
zS∑n
==0 );

4466 
pX
->
bS∑nIsTab
 = 1;

4468 
	`sqlôe3DbFªe
(
db
, 
zToFªe
);

4471 if–!
èbÀSìn
 ){

4472 if–
zTName
 ){

4473 
	`sqlôe3Eº‹Msg
(
pP¨£
, "nÿsuchÅabÀ: %s", 
zTName
);

4475 
	`sqlôe3Eº‹Msg
(
pP¨£
, "noÅables specified");

4480 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
pELi°
);

4481 
p
->
pELi°
 = 
pNew
;

4483 #i‡
SQLITE_MAX_COLUMN


4484 if–
p
->
pELi°
 &&Ö->pELi°->
nEx¥
>
db
->
aLimô
[
SQLITE_LIMIT_COLUMN
] ){

4485 
	`sqlôe3Eº‹Msg
(
pP¨£
, "too many columns inÑesult set");

4486  
WRC_Ab‹t
;

4489  
WRC_C⁄töue
;

4490 
	}
}

4501 
	$sqlôe3Ex¥WÆkNo›
(
WÆkî
 *
NŸU£d
, 
Ex¥
 *
NŸU£d2
){

4502 
	`UNUSED_PARAMETER2
(
NŸU£d
, 
NŸU£d2
);

4503  
WRC_C⁄töue
;

4504 
	}
}

4519 
	$sqlôe3Sñe˘Ex∑nd
(
P¨£
 *
pP¨£
, 
Sñe˘
 *
pSñe˘
){

4520 
WÆkî
 
w
;

4521 
	`mem£t
(&
w
, 0, (w));

4522 
w
.
xEx¥CÆlback
 = 
sqlôe3Ex¥WÆkNo›
;

4523 
w
.
pP¨£
 =ÖParse;

4524 if–
pP¨£
->
hasCompound
 ){

4525 
w
.
xSñe˘CÆlback
 = 
c⁄vîtCompoundSñe˘ToSubquîy
;

4526 
	`sqlôe3WÆkSñe˘
(&
w
, 
pSñe˘
);

4528 
w
.
xSñe˘CÆlback
 = 
£À˘Ex∑ndî
;

4529 if–(
pSñe˘
->
£lFœgs
 & 
SF_Mu…iVÆue
)==0 ){

4530 
w
.
xSñe˘CÆlback2
 = 
£À˘P›Wôh
;

4532 
	`sqlôe3WÆkSñe˘
(&
w
, 
pSñe˘
);

4533 
	}
}

4536 #i‚de‡
SQLITE_OMIT_SUBQUERY


4550 
	$£À˘AddSubquîyTy≥Info
(
WÆkî
 *
pWÆkî
, 
Sñe˘
 *
p
){

4551 
P¨£
 *
pP¨£
;

4552 
i
;

4553 
SrcLi°
 *
pTabLi°
;

4554 
SrcLi°_ôem
 *
pFrom
;

4556 
	`as£π
–
p
->
£lFœgs
 & 
SF_Resﬁved
 );

4557 
	`as£π
–(
p
->
£lFœgs
 & 
SF_HasTy≥Info
)==0 );

4558 
p
->
£lFœgs
 |
SF_HasTy≥Info
;

4559 
pP¨£
 = 
pWÆkî
->pParse;

4560 
pTabLi°
 = 
p
->
pSrc
;

4561 
i
=0, 
pFrom
=
pTabLi°
->
a
; i<pTabLi°->
nSrc
; i++,ÖFrom++){

4562 
TabÀ
 *
pTab
 = 
pFrom
->pTab;

4563 
	`as£π
–
pTab
!=0 );

4564 if–(
pTab
->
èbFœgs
 & 
TF_EphemîÆ
)!=0 ){

4566 
Sñe˘
 *
pSñ
 = 
pFrom
->
pSñe˘
;

4567 if–
pSñ
 ){

4568  
pSñ
->
pPri‹
 )ÖSel =ÖSel->pPrior;

4569 
	`sqlôe3Sñe˘AddCﬁumnTy≥AndCﬁœti⁄
(
pP¨£
, 
pTab
, 
pSñ
);

4573 
	}
}

4584 
	$sqlôe3Sñe˘AddTy≥Info
(
P¨£
 *
pP¨£
, 
Sñe˘
 *
pSñe˘
){

4585 #i‚de‡
SQLITE_OMIT_SUBQUERY


4586 
WÆkî
 
w
;

4587 
	`mem£t
(&
w
, 0, (w));

4588 
w
.
xSñe˘CÆlback2
 = 
£À˘AddSubquîyTy≥Info
;

4589 
w
.
xEx¥CÆlback
 = 
sqlôe3Ex¥WÆkNo›
;

4590 
w
.
pP¨£
 =ÖParse;

4591 
	`sqlôe3WÆkSñe˘
(&
w
, 
pSñe˘
);

4593 
	}
}

4608 
	$sqlôe3Sñe˘Pªp
(

4609 
P¨£
 *
pP¨£
,

4610 
Sñe˘
 *
p
,

4611 
NameC⁄ãxt
 *
pOuãrNC


4613 
sqlôe3
 *
db
;

4614 if–
	`NEVER
(
p
==0) ) ;

4615 
db
 = 
pP¨£
->db;

4616 if–
db
->
mÆlocFaûed
 ) ;

4617 if–
p
->
£lFœgs
 & 
SF_HasTy≥Info
 ) ;

4618 
	`sqlôe3Sñe˘Ex∑nd
(
pP¨£
, 
p
);

4619 if–
pP¨£
->
nEº
 || 
db
->
mÆlocFaûed
 ) ;

4620 
	`sqlôe3ResﬁveSñe˘Names
(
pP¨£
, 
p
, 
pOuãrNC
);

4621 if–
pP¨£
->
nEº
 || 
db
->
mÆlocFaûed
 ) ;

4622 
	`sqlôe3Sñe˘AddTy≥Info
(
pP¨£
, 
p
);

4623 
	}
}

4633 
	$ª£tAccumuœt‹
(
P¨£
 *
pP¨£
, 
AggInfo
 *
pAggInfo
){

4634 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

4635 
i
;

4636 
AggInfo_func
 *
pFunc
;

4637 
nReg
 = 
pAggInfo
->
nFunc
 +ÖAggInfo->
nCﬁumn
;

4638 if–
nReg
==0 ) ;

4639 #ifde‡
SQLITE_DEBUG


4642 
	`as£π
–
nReg
==
pAggInfo
->
mxReg
-pAggInfo->
mnReg
+1 );

4643 
i
=0; i<
pAggInfo
->
nCﬁumn
; i++){

4644 
	`as£π
–
pAggInfo
->
aCﬁ
[
i
].
iMem
>ıAggInfo->
mnReg


4645 && 
pAggInfo
->
aCﬁ
[
i
].
iMem
<ıAggInfo->
mxReg
 );

4647 
i
=0; i<
pAggInfo
->
nFunc
; i++){

4648 
	`as£π
–
pAggInfo
->
aFunc
[
i
].
iMem
>ıAggInfo->
mnReg


4649 && 
pAggInfo
->
aFunc
[
i
].
iMem
<ıAggInfo->
mxReg
 );

4652 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_NuŒ
, 0, 
pAggInfo
->
mnReg
,ÖAggInfo->
mxReg
);

4653 
pFunc
=
pAggInfo
->
aFunc
, 
i
=0; i<pAggInfo->
nFunc
; i++,ÖFunc++){

4654 if–
pFunc
->
iDi°ö˘
>=0 ){

4655 
Ex¥
 *
pE
 = 
pFunc
->
pEx¥
;

4656 
	`as£π
–!
	`Ex¥HasPr›îty
(
pE
, 
EP_xIsSñe˘
) );

4657 if–
pE
->
x
.
pLi°
==0 ||ÖE->x.pLi°->
nEx¥
!=1 ){

4658 
	`sqlôe3Eº‹Msg
(
pP¨£
, "DISTINCTággregates must haveÉxactly one "

4660 
pFunc
->
iDi°ö˘
 = -1;

4662 
KeyInfo
 *
pKeyInfo
 = 
	`keyInfoFromEx¥Li°
(
pP¨£
, 
pE
->
x
.
pLi°
, 0, 0);

4663 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_O≥nEphemîÆ
, 
pFunc
->
iDi°ö˘
, 0, 0,

4664 (*)
pKeyInfo
, 
P4_KEYINFO
);

4668 
	}
}

4674 
	$föÆizeAggFun˘i⁄s
(
P¨£
 *
pP¨£
, 
AggInfo
 *
pAggInfo
){

4675 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

4676 
i
;

4677 
AggInfo_func
 *
pF
;

4678 
i
=0, 
pF
=
pAggInfo
->
aFunc
; i<pAggInfo->
nFunc
; i++,ÖF++){

4679 
Ex¥Li°
 *
pLi°
 = 
pF
->
pEx¥
->
x
.pList;

4680 
	`as£π
–!
	`Ex¥HasPr›îty
(
pF
->
pEx¥
, 
EP_xIsSñe˘
) );

4681 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_AggFöÆ
, 
pF
->
iMem
, 
pLi°
 ?ÖLi°->
nEx¥
 : 0, 0,

4682 (*)
pF
->
pFunc
, 
P4_FUNCDEF
);

4684 
	}
}

4690 
	$upd©eAccumuœt‹
(
P¨£
 *
pP¨£
, 
AggInfo
 *
pAggInfo
){

4691 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

4692 
i
;

4693 
ªgHô
 = 0;

4694 
addrHôTe°
 = 0;

4695 
AggInfo_func
 *
pF
;

4696 
AggInfo_cﬁ
 *
pC
;

4698 
pAggInfo
->
dúe˘Mode
 = 1;

4699 
i
=0, 
pF
=
pAggInfo
->
aFunc
; i<pAggInfo->
nFunc
; i++,ÖF++){

4700 
nArg
;

4701 
addrNext
 = 0;

4702 
ªgAgg
;

4703 
Ex¥Li°
 *
pLi°
 = 
pF
->
pEx¥
->
x
.pList;

4704 
	`as£π
–!
	`Ex¥HasPr›îty
(
pF
->
pEx¥
, 
EP_xIsSñe˘
) );

4705 if–
pLi°
 ){

4706 
nArg
 = 
pLi°
->
nEx¥
;

4707 
ªgAgg
 = 
	`sqlôe3GëTempR™ge
(
pP¨£
, 
nArg
);

4708 
	`sqlôe3Ex¥CodeEx¥Li°
(
pP¨£
, 
pLi°
, 
ªgAgg
, 0, 
SQLITE_ECEL_DUP
);

4710 
nArg
 = 0;

4711 
ªgAgg
 = 0;

4713 if–
pF
->
iDi°ö˘
>=0 ){

4714 
addrNext
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

4715 
	`ã°ˇ£
–
nArg
==0 );

4716 
	`ã°ˇ£
–
nArg
>1 );

4717 
	`codeDi°ö˘
(
pP¨£
, 
pF
->
iDi°ö˘
, 
addrNext
, 1, 
ªgAgg
);

4719 if–
pF
->
pFunc
->
funcFœgs
 & 
SQLITE_FUNC_NEEDCOLL
 ){

4720 
CﬁlSeq
 *
pCﬁl
 = 0;

4721 
Ex¥Li°_ôem
 *
pIãm
;

4722 
j
;

4723 
	`as£π
–
pLi°
!=0 );

4724 
j
=0, 
pIãm
=
pLi°
->
a
; !
pCﬁl
 && j<
nArg
; j++,ÖItem++){

4725 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pIãm
->
pEx¥
);

4727 if–!
pCﬁl
 ){

4728 
pCﬁl
 = 
pP¨£
->
db
->
pDÊtCﬁl
;

4730 if–
ªgHô
==0 && 
pAggInfo
->
nAccumuœt‹
 )ÑegHô = ++
pP¨£
->
nMem
;

4731 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_CﬁlSeq
, 
ªgHô
, 0, 0, (*)
pCﬁl
, 
P4_COLLSEQ
);

4733 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_AggSãp0
, 0, 
ªgAgg
, 
pF
->
iMem
,

4734 (*)
pF
->
pFunc
, 
P4_FUNCDEF
);

4735 
	`sqlôe3VdbeCh™geP5
(
v
, (
u8
)
nArg
);

4736 
	`sqlôe3Ex¥CacheAfföôyCh™ge
(
pP¨£
, 
ªgAgg
, 
nArg
);

4737 
	`sqlôe3Rñó£TempR™ge
(
pP¨£
, 
ªgAgg
, 
nArg
);

4738 if–
addrNext
 ){

4739 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
addrNext
);

4740 
	`sqlôe3Ex¥CacheCÀ¨
(
pP¨£
);

4754 if–
ªgHô
 ){

4755 
addrHôTe°
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_If
, 
ªgHô
); 
	`VdbeCovîage
(v);

4757 
	`sqlôe3Ex¥CacheCÀ¨
(
pP¨£
);

4758 
i
=0, 
pC
=
pAggInfo
->
aCﬁ
; i<pAggInfo->
nAccumuœt‹
; i++,ÖC++){

4759 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pC
->
pEx¥
,ÖC->
iMem
);

4761 
pAggInfo
->
dúe˘Mode
 = 0;

4762 
	`sqlôe3Ex¥CacheCÀ¨
(
pP¨£
);

4763 if–
addrHôTe°
 ){

4764 
	`sqlôe3VdbeJumpHîe
(
v
, 
addrHôTe°
);

4766 
	}
}

4772 #i‚de‡
SQLITE_OMIT_EXPLAIN


4773 
	$ex∂aöSim∂eCou¡
(

4774 
P¨£
 *
pP¨£
,

4775 
TabÀ
 *
pTab
,

4776 
Index
 *
pIdx


4778 if–
pP¨£
->
ex∂aö
==2 ){

4779 
bCovî
 = (
pIdx
!=0 && (
	`HasRowid
(
pTab
Ë|| !
	`IsPrim¨yKeyIndex
(pIdx)));

4780 *
zEqp
 = 
	`sqlôe3MPrötf
(
pP¨£
->
db
, "SCAN TABLE %s%s%s",

4781 
pTab
->
zName
,

4782 
bCovî
 ? " USING COVERING INDEX " : "",

4783 
bCovî
 ? 
pIdx
->
zName
 : ""

4785 
	`sqlôe3VdbeAddOp4
(

4786 
pP¨£
->
pVdbe
, 
OP_Ex∂aö
,ÖP¨£->
iSñe˘Id
, 0, 0, 
zEqp
, 
P4_DYNAMIC


4789 
	}
}

4791 
	#ex∂aöSim∂eCou¡
(
a
,
b
,
c
)

	)

4807 
	$sqlôe3Sñe˘
(

4808 
P¨£
 *
pP¨£
,

4809 
Sñe˘
 *
p
,

4810 
Sñe˘De°
 *
pDe°


4812 
i
, 
j
;

4813 
WhîeInfo
 *
pWInfo
;

4814 
Vdbe
 *
v
;

4815 
isAgg
;

4816 
Ex¥Li°
 *
pELi°
 = 0;

4817 
SrcLi°
 *
pTabLi°
;

4818 
Ex¥
 *
pWhîe
;

4819 
Ex¥Li°
 *
pGroupBy
;

4820 
Ex¥
 *
pHavög
;

4821 
rc
 = 1;

4822 
Di°ö˘Ctx
 
sDi°ö˘
;

4823 
S‹tCtx
 
sS‹t
;

4824 
AggInfo
 
sAggInfo
;

4825 
iEnd
;

4826 
sqlôe3
 *
db
;

4828 #i‚de‡
SQLITE_OMIT_EXPLAIN


4829 
iRe°‹eSñe˘Id
 = 
pP¨£
->
iSñe˘Id
;

4830 
pP¨£
->
iSñe˘Id
 =ÖP¨£->
iNextSñe˘Id
++;

4833 
db
 = 
pP¨£
->db;

4834 if–
p
==0 || 
db
->
mÆlocFaûed
 || 
pP¨£
->
nEº
 ){

4837 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_SELECT
, 0, 0, 0) )  1;

4838 
	`mem£t
(&
sAggInfo
, 0, (sAggInfo));

4839 #i‡
SELECTTRACE_ENABLED


4840 
pP¨£
->
nSñe˘Indít
++;

4841 
	`SELECTTRACE
(1,
pP¨£
,
p
, ("beginÖrocessing:\n"));

4842 if–
sqlôe3Sñe˘Tø˚
 & 0x100 ){

4843 
	`sqlôe3TªeVõwSñe˘
(0, 
p
, 0);

4847 
	`as£π
–
p
->
pOrdîBy
==0 || 
pDe°
->
eDe°
!=
SRT_Di°Fifo
 );

4848 
	`as£π
–
p
->
pOrdîBy
==0 || 
pDe°
->
eDe°
!=
SRT_Fifo
 );

4849 
	`as£π
–
p
->
pOrdîBy
==0 || 
pDe°
->
eDe°
!=
SRT_Di°Queue
 );

4850 
	`as£π
–
p
->
pOrdîBy
==0 || 
pDe°
->
eDe°
!=
SRT_Queue
 );

4851 if–
	`Ign‹abÀOrdîby
(
pDe°
) ){

4852 
	`as£π
(
pDe°
->
eDe°
==
SRT_Exi°s
 ||ÖDe°->eDe°==
SRT_Uni⁄
 ||

4853 
pDe°
->
eDe°
==
SRT_Ex˚±
 ||ÖDe°->eDe°==
SRT_Disˇrd
 ||

4854 
pDe°
->
eDe°
==
SRT_Queue
 ||ÖDe°->eDe°==
SRT_Di°Fifo
 ||

4855 
pDe°
->
eDe°
==
SRT_Di°Queue
 ||ÖDe°->eDe°==
SRT_Fifo
);

4858 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
p
->
pOrdîBy
);

4859 
p
->
pOrdîBy
 = 0;

4860 
p
->
£lFœgs
 &~
SF_Di°ö˘
;

4862 
	`sqlôe3Sñe˘Pªp
(
pP¨£
, 
p
, 0);

4863 
	`mem£t
(&
sS‹t
, 0, (sSort));

4864 
sS‹t
.
pOrdîBy
 = 
p
->pOrderBy;

4865 
pTabLi°
 = 
p
->
pSrc
;

4866 if–
pP¨£
->
nEº
 || 
db
->
mÆlocFaûed
 ){

4867 
£À˘_íd
;

4869 
	`as£π
–
p
->
pELi°
!=0 );

4870 
isAgg
 = (
p
->
£lFœgs
 & 
SF_Aggªg©e
)!=0;

4871 #i‡
SELECTTRACE_ENABLED


4872 if–
sqlôe3Sñe˘Tø˚
 & 0x100 ){

4873 
	`SELECTTRACE
(0x100,
pP¨£
,
p
, ("afterÇameÑesolution:\n"));

4874 
	`sqlôe3TªeVõwSñe˘
(0, 
p
, 0);

4882 #i‚de‡
SQLITE_OMIT_SUBQUERY


4883 if–
	`checkF‹Mu…iCﬁumnSñe˘Eº‹
(
pP¨£
, 
pDe°
, 
p
->
pELi°
->
nEx¥
) ){

4884 
£À˘_íd
;

4890 #i‡!
	`deföed
(
SQLITE_OMIT_SUBQUERY
Ë|| !deföed(
SQLITE_OMIT_VIEW
)

4891 
i
=0; !
p
->
pPri‹
 && i<
pTabLi°
->
nSrc
; i++){

4892 
SrcLi°_ôem
 *
pIãm
 = &
pTabLi°
->
a
[
i
];

4893 
Sñe˘
 *
pSub
 = 
pIãm
->
pSñe˘
;

4894 
isAggSub
;

4895 
TabÀ
 *
pTab
 = 
pIãm
->pTab;

4896 if–
pSub
==0 ) ;

4900 if–
pTab
->
nCﬁ
!=
pSub
->
pELi°
->
nEx¥
 ){

4901 
	`sqlôe3Eº‹Msg
(
pP¨£
, "expected %d columns for '%s' but got %d",

4902 
pTab
->
nCﬁ
,ÖTab->
zName
, 
pSub
->
pELi°
->
nEx¥
);

4903 
£À˘_íd
;

4906 
isAggSub
 = (
pSub
->
£lFœgs
 & 
SF_Aggªg©e
)!=0;

4907 if–
	`Ê©ãnSubquîy
(
pP¨£
, 
p
, 
i
, 
isAgg
, 
isAggSub
) ){

4909 if–
isAggSub
 ){

4910 
isAgg
 = 1;

4911 
p
->
£lFœgs
 |
SF_Aggªg©e
;

4913 
i
 = -1;

4915 
pTabLi°
 = 
p
->
pSrc
;

4916 if–
db
->
mÆlocFaûed
 ) 
£À˘_íd
;

4917 if–!
	`Ign‹abÀOrdîby
(
pDe°
) ){

4918 
sS‹t
.
pOrdîBy
 = 
p
->pOrderBy;

4925 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

4926 if–
v
==0 ) 
£À˘_íd
;

4928 #i‚de‡
SQLITE_OMIT_COMPOUND_SELECT


4932 if–
p
->
pPri‹
 ){

4933 
rc
 = 
	`mu…iSñe˘
(
pP¨£
, 
p
, 
pDe°
);

4934 
	`ex∂aöSëI¡egî
(
pP¨£
->
iSñe˘Id
, 
iRe°‹eSñe˘Id
);

4935 #i‡
SELECTTRACE_ENABLED


4936 
	`SELECTTRACE
(1,
pP¨£
,
p
,("end compound-selectÖrocessing\n"));

4937 
pP¨£
->
nSñe˘Indít
--;

4939  
rc
;

4945 #i‡!
	`deföed
(
SQLITE_OMIT_SUBQUERY
Ë|| !deföed(
SQLITE_OMIT_VIEW
)

4946 
i
=0; i<
pTabLi°
->
nSrc
; i++){

4947 
SrcLi°_ôem
 *
pIãm
 = &
pTabLi°
->
a
[
i
];

4948 
Sñe˘De°
 
de°
;

4949 
Sñe˘
 *
pSub
 = 
pIãm
->
pSñe˘
;

4950 if–
pSub
==0 ) ;

4958 if–
pIãm
->
addrFûlSub
 ){

4959 if–
pIãm
->
fg
.
vüC‹outöe
==0 ){

4960 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Gosub
, 
pIãm
->
ªgRëu∫
,ÖIãm->
addrFûlSub
);

4972 
pP¨£
->
nHeight
 +
	`sqlôe3Sñe˘Ex¥Height
(
p
);

4977 if–(
pIãm
->
fg
.
joöty≥
 & 
JT_OUTER
)==0

4978 && 
	`pushDownWhîeTîms
(
db
, 
pSub
, 
p
->
pWhîe
, 
pIãm
->
iCurs‹
)

4980 #i‡
SELECTTRACE_ENABLED


4981 if–
sqlôe3Sñe˘Tø˚
 & 0x100 ){

4982 
	`SELECTTRACE
(0x100,
pP¨£
,
p
,("After WHERE-clauseÖush-down:\n"));

4983 
	`sqlôe3TªeVõwSñe˘
(0, 
p
, 0);

5002 if–
i
==0

5003 && (
pTabLi°
->
nSrc
==1

5004 || (
pTabLi°
->
a
[1].
fg
.
joöty≥
&(
JT_LEFT
|
JT_CROSS
))!=0)

5005 && (
p
->
£lFœgs
 & 
SF_AŒ
)==0

5006 && 
	`O±imiz©i⁄E«bÀd
(
db
, 
SQLITE_SubqC‹outöe
)

5011 
addrT›
 = 
	`sqlôe3VdbeCuºítAddr
(
v
)+1;

5012 
pIãm
->
ªgRëu∫
 = ++
pP¨£
->
nMem
;

5013 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_InôC‹outöe
, 
pIãm
->
ªgRëu∫
, 0, 
addrT›
);

5014 
	`VdbeCommít
((
v
, "%s", 
pIãm
->
pTab
->
zName
));

5015 
pIãm
->
addrFûlSub
 = 
addrT›
;

5016 
	`sqlôe3Sñe˘De°Inô
(&
de°
, 
SRT_C‹outöe
, 
pIãm
->
ªgRëu∫
);

5017 
	`ex∂aöSëI¡egî
(
pIãm
->
iSñe˘Id
, (
u8
)
pP¨£
->
iNextSñe˘Id
);

5018 
	`sqlôe3Sñe˘
(
pP¨£
, 
pSub
, &
de°
);

5019 
pIãm
->
pTab
->
nRowLogE°
 = 
pSub
->
nSñe˘Row
;

5020 
pIãm
->
fg
.
vüC‹outöe
 = 1;

5021 
pIãm
->
ªgResu…
 = 
de°
.
iSd°
;

5022 
	`sqlôe3VdbeEndC‹outöe
(
v
, 
pIãm
->
ªgRëu∫
);

5023 
	`sqlôe3VdbeJumpHîe
(
v
, 
addrT›
-1);

5024 
	`sqlôe3CÀ¨TempRegCache
(
pP¨£
);

5031 
t›Addr
;

5032 
⁄˚Addr
 = 0;

5033 
ªtAddr
;

5034 
	`as£π
–
pIãm
->
addrFûlSub
==0 );

5035 
pIãm
->
ªgRëu∫
 = ++
pP¨£
->
nMem
;

5036 
t›Addr
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 0, 
pIãm
->
ªgRëu∫
);

5037 
pIãm
->
addrFûlSub
 = 
t›Addr
+1;

5038 if–
pIãm
->
fg
.
isC‹ªœãd
==0 ){

5042 
⁄˚Addr
 = 
	`sqlôe3CodeOn˚
(
pP¨£
); 
	`VdbeCovîage
(
v
);

5043 
	`VdbeCommít
((
v
, "m©îülizê\"%s\"", 
pIãm
->
pTab
->
zName
));

5045 
	`VdbeNo›Commít
((
v
, "m©îülizê\"%s\"", 
pIãm
->
pTab
->
zName
));

5047 
	`sqlôe3Sñe˘De°Inô
(&
de°
, 
SRT_EphemTab
, 
pIãm
->
iCurs‹
);

5048 
	`ex∂aöSëI¡egî
(
pIãm
->
iSñe˘Id
, (
u8
)
pP¨£
->
iNextSñe˘Id
);

5049 
	`sqlôe3Sñe˘
(
pP¨£
, 
pSub
, &
de°
);

5050 
pIãm
->
pTab
->
nRowLogE°
 = 
pSub
->
nSñe˘Row
;

5051 if–
⁄˚Addr
 ) 
	`sqlôe3VdbeJumpHîe
(
v
, onceAddr);

5052 
ªtAddr
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Rëu∫
, 
pIãm
->
ªgRëu∫
);

5053 
	`VdbeCommít
((
v
, "íd %s", 
pIãm
->
pTab
->
zName
));

5054 
	`sqlôe3VdbeCh™geP1
(
v
, 
t›Addr
, 
ªtAddr
);

5055 
	`sqlôe3CÀ¨TempRegCache
(
pP¨£
);

5057 if–
db
->
mÆlocFaûed
 ) 
£À˘_íd
;

5058 
pP¨£
->
nHeight
 -
	`sqlôe3Sñe˘Ex¥Height
(
p
);

5064 
pELi°
 = 
p
->pEList;

5065 
pWhîe
 = 
p
->pWhere;

5066 
pGroupBy
 = 
p
->pGroupBy;

5067 
pHavög
 = 
p
->pHaving;

5068 
sDi°ö˘
.
isTn˘
 = (
p
->
£lFœgs
 & 
SF_Di°ö˘
)!=0;

5070 #i‡
SELECTTRACE_ENABLED


5071 if–
sqlôe3Sñe˘Tø˚
 & 0x400 ){

5072 
	`SELECTTRACE
(0x400,
pP¨£
,
p
,("Afteráll FROM-clauseánalysis:\n"));

5073 
	`sqlôe3TªeVõwSñe˘
(0, 
p
, 0);

5092 if–(
p
->
£lFœgs
 & (
SF_Di°ö˘
|
SF_Aggªg©e
))==SF_Distinct

5093 && 
	`sqlôe3Ex¥Li°Com∑ª
(
sS‹t
.
pOrdîBy
, 
pELi°
, -1)==0

5095 
p
->
£lFœgs
 &~
SF_Di°ö˘
;

5096 
pGroupBy
 = 
p
->pGroupBy = 
	`sqlôe3Ex¥Li°Dup
(
db
, 
pELi°
, 0);

5100 
	`as£π
–
sDi°ö˘
.
isTn˘
 );

5102 #i‡
SELECTTRACE_ENABLED


5103 if–
sqlôe3Sñe˘Tø˚
 & 0x400 ){

5104 
	`SELECTTRACE
(0x400,
pP¨£
,
p
,("Transform DISTINCT into GROUP BY:\n"));

5105 
	`sqlôe3TªeVõwSñe˘
(0, 
p
, 0);

5118 if–
sS‹t
.
pOrdîBy
 ){

5119 
KeyInfo
 *
pKeyInfo
;

5120 
pKeyInfo
 = 
	`keyInfoFromEx¥Li°
(
pP¨£
, 
sS‹t
.
pOrdîBy
, 0, 
pELi°
->
nEx¥
);

5121 
sS‹t
.
iECurs‹
 = 
pP¨£
->
nTab
++;

5122 
sS‹t
.
addrS‹tIndex
 =

5123 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_O≥nEphemîÆ
,

5124 
sS‹t
.
iECurs‹
, sS‹t.
pOrdîBy
->
nEx¥
+1+
pELi°
->nExpr, 0,

5125 (*)
pKeyInfo
, 
P4_KEYINFO


5128 
sS‹t
.
addrS‹tIndex
 = -1;

5133 if–
pDe°
->
eDe°
==
SRT_EphemTab
 ){

5134 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_O≥nEphemîÆ
, 
pDe°
->
iSDP¨m
, 
pELi°
->
nEx¥
);

5139 
iEnd
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

5140 
p
->
nSñe˘Row
 = 320;

5141 
	`compuãLimôRegi°îs
(
pP¨£
, 
p
, 
iEnd
);

5142 if–
p
->
iLimô
==0 && 
sS‹t
.
addrS‹tIndex
>=0 ){

5143 
	`sqlôe3VdbeCh™geOpcode
(
v
, 
sS‹t
.
addrS‹tIndex
, 
OP_S‹ãrO≥n
);

5144 
sS‹t
.
s‹tFœgs
 |
SORTFLAG_U£S‹ãr
;

5149 if–
p
->
£lFœgs
 & 
SF_Di°ö˘
 ){

5150 
sDi°ö˘
.
èbTn˘
 = 
pP¨£
->
nTab
++;

5151 
sDi°ö˘
.
addrTn˘
 = 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_O≥nEphemîÆ
,

5152 
sDi°ö˘
.
èbTn˘
, 0, 0,

5153 (*)
	`keyInfoFromEx¥Li°
(
pP¨£
, 
p
->
pELi°
,0,0),

5154 
P4_KEYINFO
);

5155 
	`sqlôe3VdbeCh™geP5
(
v
, 
BTREE_UNORDERED
);

5156 
sDi°ö˘
.
eTn˘Ty≥
 = 
WHERE_DISTINCT_UNORDERED
;

5158 
sDi°ö˘
.
eTn˘Ty≥
 = 
WHERE_DISTINCT_NOOP
;

5161 if–!
isAgg
 && 
pGroupBy
==0 ){

5163 
u16
 
w˘æFœgs
 = (
sDi°ö˘
.
isTn˘
 ? 
WHERE_WANT_DISTINCT
 : 0);

5164 
	`as£π
–
WHERE_USE_LIMIT
==
SF_FixedLimô
 );

5165 
w˘æFœgs
 |
p
->
£lFœgs
 & 
SF_FixedLimô
;

5168 
pWInfo
 = 
	`sqlôe3WhîeBegö
(
pP¨£
, 
pTabLi°
, 
pWhîe
, 
sS‹t
.
pOrdîBy
,

5169 
p
->
pELi°
, 
w˘æFœgs
,Ö->
nSñe˘Row
);

5170 if–
pWInfo
==0 ) 
£À˘_íd
;

5171 if–
	`sqlôe3WhîeOuçutRowCou¡
(
pWInfo
Ë< 
p
->
nSñe˘Row
 ){

5172 
p
->
nSñe˘Row
 = 
	`sqlôe3WhîeOuçutRowCou¡
(
pWInfo
);

5174 if–
sDi°ö˘
.
isTn˘
 && 
	`sqlôe3WhîeIsDi°ö˘
(
pWInfo
) ){

5175 
sDi°ö˘
.
eTn˘Ty≥
 = 
	`sqlôe3WhîeIsDi°ö˘
(
pWInfo
);

5177 if–
sS‹t
.
pOrdîBy
 ){

5178 
sS‹t
.
nOBS©
 = 
	`sqlôe3WhîeIsOrdîed
(
pWInfo
);

5179 if–
sS‹t
.
nOBS©
==sS‹t.
pOrdîBy
->
nEx¥
 ){

5180 
sS‹t
.
pOrdîBy
 = 0;

5188 if–
sS‹t
.
addrS‹tIndex
>=0 && sS‹t.
pOrdîBy
==0 ){

5189 
	`sqlôe3VdbeCh™geToNo›
(
v
, 
sS‹t
.
addrS‹tIndex
);

5193 
	`£À˘I¬îLo›
(
pP¨£
, 
p
, 
pELi°
, -1, &
sS‹t
, &
sDi°ö˘
, 
pDe°
,

5194 
	`sqlôe3WhîeC⁄töueLabñ
(
pWInfo
),

5195 
	`sqlôe3WhîeBªakLabñ
(
pWInfo
));

5199 
	`sqlôe3WhîeEnd
(
pWInfo
);

5203 
NameC⁄ãxt
 
sNC
;

5204 
iAMem
;

5205 
iBMem
;

5206 
iU£Fœg
;

5209 
iAb‹tFœg
;

5210 
groupByS‹t
;

5211 
addrEnd
;

5212 
s‹tPTab
 = 0;

5213 
s‹tOut
 = 0;

5214 
‹dîByGΩ
 = 0;

5219 if–
pGroupBy
 ){

5220 
k
;

5221 
Ex¥Li°_ôem
 *
pIãm
;

5223 
k
=
p
->
pELi°
->
nEx¥
, 
pIãm
ı->pELi°->
a
; k>0; k--,ÖItem++){

5224 
pIãm
->
u
.
x
.
iAlüs
 = 0;

5226 
k
=
pGroupBy
->
nEx¥
, 
pIãm
ıGroupBy->
a
; k>0; k--,ÖItem++){

5227 
pIãm
->
u
.
x
.
iAlüs
 = 0;

5229 
	`as£π
–66==
	`sqlôe3LogE°
(100) );

5230 if–
p
->
nSñe˘Row
>66 )Ö->nSelectRow = 66;

5232 
	`as£π
–0==
	`sqlôe3LogE°
(1) );

5233 
p
->
nSñe˘Row
 = 0;

5244 if–
	`sqlôe3Ex¥Li°Com∑ª
(
pGroupBy
, 
sS‹t
.
pOrdîBy
, -1)==0 ){

5245 
‹dîByGΩ
 = 1;

5249 
addrEnd
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

5255 
	`mem£t
(&
sNC
, 0, (sNC));

5256 
sNC
.
pP¨£
 =ÖParse;

5257 
sNC
.
pSrcLi°
 = 
pTabLi°
;

5258 
sNC
.
pAggInfo
 = &
sAggInfo
;

5259 
sAggInfo
.
mnReg
 = 
pP¨£
->
nMem
+1;

5260 
sAggInfo
.
nS‹tögCﬁumn
 = 
pGroupBy
 ?ÖGroupBy->
nEx¥
 : 0;

5261 
sAggInfo
.
pGroupBy
 =ÖGroupBy;

5262 
	`sqlôe3Ex¥A«lyzeAggLi°
(&
sNC
, 
pELi°
);

5263 
	`sqlôe3Ex¥A«lyzeAggLi°
(&
sNC
, 
sS‹t
.
pOrdîBy
);

5264 if–
pHavög
 ){

5265 
	`sqlôe3Ex¥A«lyzeAggªg©es
(&
sNC
, 
pHavög
);

5267 
sAggInfo
.
nAccumuœt‹
 = sAggInfo.
nCﬁumn
;

5268 
i
=0; i<
sAggInfo
.
nFunc
; i++){

5269 
	`as£π
–!
	`Ex¥HasPr›îty
(
sAggInfo
.
aFunc
[
i
].
pEx¥
, 
EP_xIsSñe˘
) );

5270 
sNC
.
ncFœgs
 |
NC_InAggFunc
;

5271 
	`sqlôe3Ex¥A«lyzeAggLi°
(&
sNC
, 
sAggInfo
.
aFunc
[
i
].
pEx¥
->
x
.
pLi°
);

5272 
sNC
.
ncFœgs
 &~
NC_InAggFunc
;

5274 
sAggInfo
.
mxReg
 = 
pP¨£
->
nMem
;

5275 if–
db
->
mÆlocFaûed
 ) 
£À˘_íd
;

5280 if–
pGroupBy
 ){

5281 
KeyInfo
 *
pKeyInfo
;

5282 
addr1
;

5283 
addrOuçutRow
;

5284 
ªgOuçutRow
;

5285 
addrSëAb‹t
;

5286 
addrT›OfLo›
;

5287 
addrS‹tögIdx
;

5288 
addrRe£t
;

5289 
ªgRe£t
;

5296 
sAggInfo
.
s‹tögIdx
 = 
pP¨£
->
nTab
++;

5297 
pKeyInfo
 = 
	`keyInfoFromEx¥Li°
(
pP¨£
, 
pGroupBy
, 0, 
sAggInfo
.
nCﬁumn
);

5298 
addrS‹tögIdx
 = 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_S‹ãrO≥n
,

5299 
sAggInfo
.
s‹tögIdx
, sAggInfo.
nS‹tögCﬁumn
,

5300 0, (*)
pKeyInfo
, 
P4_KEYINFO
);

5304 
iU£Fœg
 = ++
pP¨£
->
nMem
;

5305 
iAb‹tFœg
 = ++
pP¨£
->
nMem
;

5306 
ªgOuçutRow
 = ++
pP¨£
->
nMem
;

5307 
addrOuçutRow
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

5308 
ªgRe£t
 = ++
pP¨£
->
nMem
;

5309 
addrRe£t
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

5310 
iAMem
 = 
pP¨£
->
nMem
 + 1;

5311 
pP¨£
->
nMem
 +
pGroupBy
->
nEx¥
;

5312 
iBMem
 = 
pP¨£
->
nMem
 + 1;

5313 
pP¨£
->
nMem
 +
pGroupBy
->
nEx¥
;

5314 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 0, 
iAb‹tFœg
);

5315 
	`VdbeCommít
((
v
, "clearábort flag"));

5316 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 0, 
iU£Fœg
);

5317 
	`VdbeCommít
((
v
, "indicateáccumulatorÉmpty"));

5318 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_NuŒ
, 0, 
iAMem
, iAMem+
pGroupBy
->
nEx¥
-1);

5325 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Gosub
, 
ªgRe£t
, 
addrRe£t
);

5326 
pWInfo
 = 
	`sqlôe3WhîeBegö
(
pP¨£
, 
pTabLi°
, 
pWhîe
, 
pGroupBy
, 0,

5327 
WHERE_GROUPBY
 | (
‹dîByGΩ
 ? 
WHERE_SORTBYGROUP
 : 0), 0

5329 if–
pWInfo
==0 ) 
£À˘_íd
;

5330 if–
	`sqlôe3WhîeIsOrdîed
(
pWInfo
)==
pGroupBy
->
nEx¥
 ){

5335 
groupByS‹t
 = 0;

5342 
ªgBa£
;

5343 
ªgRec‹d
;

5344 
nCﬁ
;

5345 
nGroupBy
;

5347 
	`ex∂aöTempTabÀ
(
pP¨£
,

5348 (
sDi°ö˘
.
isTn˘
 && (
p
->
£lFœgs
&
SF_Di°ö˘
)==0) ?

5351 
groupByS‹t
 = 1;

5352 
nGroupBy
 = 
pGroupBy
->
nEx¥
;

5353 
nCﬁ
 = 
nGroupBy
;

5354 
j
 = 
nGroupBy
;

5355 
i
=0; i<
sAggInfo
.
nCﬁumn
; i++){

5356 if–
sAggInfo
.
aCﬁ
[
i
].
iS‹ãrCﬁumn
>=
j
 ){

5357 
nCﬁ
++;

5358 
j
++;

5361 
ªgBa£
 = 
	`sqlôe3GëTempR™ge
(
pP¨£
, 
nCﬁ
);

5362 
	`sqlôe3Ex¥CacheCÀ¨
(
pP¨£
);

5363 
	`sqlôe3Ex¥CodeEx¥Li°
(
pP¨£
, 
pGroupBy
, 
ªgBa£
, 0, 0);

5364 
j
 = 
nGroupBy
;

5365 
i
=0; i<
sAggInfo
.
nCﬁumn
; i++){

5366 
AggInfo_cﬁ
 *
pCﬁ
 = &
sAggInfo
.
aCﬁ
[
i
];

5367 if–
pCﬁ
->
iS‹ãrCﬁumn
>=
j
 ){

5368 
r1
 = 
j
 + 
ªgBa£
;

5369 
	`sqlôe3Ex¥CodeGëCﬁumnToReg
(
pP¨£
,

5370 
pCﬁ
->
pTab
,ÖCﬁ->
iCﬁumn
,ÖCﬁ->
iTabÀ
, 
r1
);

5371 
j
++;

5374 
ªgRec‹d
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

5375 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_MakeRec‹d
, 
ªgBa£
, 
nCﬁ
, 
ªgRec‹d
);

5376 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_S‹ãrIn£π
, 
sAggInfo
.
s‹tögIdx
, 
ªgRec‹d
);

5377 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgRec‹d
);

5378 
	`sqlôe3Rñó£TempR™ge
(
pP¨£
, 
ªgBa£
, 
nCﬁ
);

5379 
	`sqlôe3WhîeEnd
(
pWInfo
);

5380 
sAggInfo
.
s‹tögIdxPTab
 = 
s‹tPTab
 = 
pP¨£
->
nTab
++;

5381 
s‹tOut
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

5382 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_O≥nP£udo
, 
s‹tPTab
, 
s‹tOut
, 
nCﬁ
);

5383 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_S‹ãrS‹t
, 
sAggInfo
.
s‹tögIdx
, 
addrEnd
);

5384 
	`VdbeCommít
((
v
, "GROUP BY s‹t")); 
	`VdbeCovîage
(v);

5385 
sAggInfo
.
u£S‹tögIdx
 = 1;

5386 
	`sqlôe3Ex¥CacheCÀ¨
(
pP¨£
);

5397 if–
‹dîByGΩ
 && 
	`O±imiz©i⁄E«bÀd
(
db
, 
SQLITE_GroupByOrdî
)

5398 && (
groupByS‹t
 || 
	`sqlôe3WhîeIsS‹ãd
(
pWInfo
))

5400 
sS‹t
.
pOrdîBy
 = 0;

5401 
	`sqlôe3VdbeCh™geToNo›
(
v
, 
sS‹t
.
addrS‹tIndex
);

5409 
addrT›OfLo›
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

5410 
	`sqlôe3Ex¥CacheCÀ¨
(
pP¨£
);

5411 if–
groupByS‹t
 ){

5412 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_S‹ãrD©a
, 
sAggInfo
.
s‹tögIdx
,

5413 
s‹tOut
, 
s‹tPTab
);

5415 
j
=0; j<
pGroupBy
->
nEx¥
; j++){

5416 if–
groupByS‹t
 ){

5417 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Cﬁumn
, 
s‹tPTab
, 
j
, 
iBMem
+j);

5419 
sAggInfo
.
dúe˘Mode
 = 1;

5420 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pGroupBy
->
a
[
j
].
pEx¥
, 
iBMem
+j);

5423 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Com∑ª
, 
iAMem
, 
iBMem
, 
pGroupBy
->
nEx¥
,

5424 (*)
	`sqlôe3KeyInfoRef
(
pKeyInfo
), 
P4_KEYINFO
);

5425 
addr1
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

5426 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Jump
, 
addr1
+1, 0,áddr1+1); 
	`VdbeCovîage
(v);

5437 
	`sqlôe3Ex¥CodeMove
(
pP¨£
, 
iBMem
, 
iAMem
, 
pGroupBy
->
nEx¥
);

5438 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Gosub
, 
ªgOuçutRow
, 
addrOuçutRow
);

5439 
	`VdbeCommít
((
v
, "output oneÑow"));

5440 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IfPos
, 
iAb‹tFœg
, 
addrEnd
); 
	`VdbeCovîage
(v);

5441 
	`VdbeCommít
((
v
, "checkábort flag"));

5442 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Gosub
, 
ªgRe£t
, 
addrRe£t
);

5443 
	`VdbeCommít
((
v
, "resetáccumulator"));

5448 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr1
);

5449 
	`upd©eAccumuœt‹
(
pP¨£
, &
sAggInfo
);

5450 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 1, 
iU£Fœg
);

5451 
	`VdbeCommít
((
v
, "indicate data ináccumulator"));

5455 if–
groupByS‹t
 ){

5456 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_S‹ãrNext
, 
sAggInfo
.
s‹tögIdx
, 
addrT›OfLo›
);

5457 
	`VdbeCovîage
(
v
);

5459 
	`sqlôe3WhîeEnd
(
pWInfo
);

5460 
	`sqlôe3VdbeCh™geToNo›
(
v
, 
addrS‹tögIdx
);

5465 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Gosub
, 
ªgOuçutRow
, 
addrOuçutRow
);

5466 
	`VdbeCommít
((
v
, "output finalÑow"));

5470 
	`sqlôe3VdbeGŸo
(
v
, 
addrEnd
);

5479 
addrSëAb‹t
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

5480 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 1, 
iAb‹tFœg
);

5481 
	`VdbeCommít
((
v
, "setábort flag"));

5482 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Rëu∫
, 
ªgOuçutRow
);

5483 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
addrOuçutRow
);

5484 
addrOuçutRow
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

5485 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IfPos
, 
iU£Fœg
, 
addrOuçutRow
+2);

5486 
	`VdbeCovîage
(
v
);

5487 
	`VdbeCommít
((
v
, "GroupbyÑesult generatorÉntryÖoint"));

5488 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Rëu∫
, 
ªgOuçutRow
);

5489 
	`föÆizeAggFun˘i⁄s
(
pP¨£
, &
sAggInfo
);

5490 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pHavög
, 
addrOuçutRow
+1, 
SQLITE_JUMPIFNULL
);

5491 
	`£À˘I¬îLo›
(
pP¨£
, 
p
,Ö->
pELi°
, -1, &
sS‹t
,

5492 &
sDi°ö˘
, 
pDe°
,

5493 
addrOuçutRow
+1, 
addrSëAb‹t
);

5494 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Rëu∫
, 
ªgOuçutRow
);

5495 
	`VdbeCommít
((
v
, "end groupbyÑesult generator"));

5499 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
addrRe£t
);

5500 
	`ª£tAccumuœt‹
(
pP¨£
, &
sAggInfo
);

5501 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Rëu∫
, 
ªgRe£t
);

5505 
Ex¥Li°
 *
pDñ
 = 0;

5506 #i‚de‡
SQLITE_OMIT_BTREECOUNT


5507 
TabÀ
 *
pTab
;

5508 if–(
pTab
 = 
	`isSim∂eCou¡
(
p
, &
sAggInfo
))!=0 ){

5522 c⁄° 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTab
->
pSchema
);

5523 c⁄° 
iC§
 = 
pP¨£
->
nTab
++;

5524 
Index
 *
pIdx
;

5525 
KeyInfo
 *
pKeyInfo
 = 0;

5526 
Index
 *
pBe°
 = 0;

5527 
iRoŸ
 = 
pTab
->
äum
;

5529 
	`sqlôe3CodeVîifySchema
(
pP¨£
, 
iDb
);

5530 
	`sqlôe3TabÀLock
(
pP¨£
, 
iDb
, 
pTab
->
äum
, 0,ÖTab->
zName
);

5541 if–!
	`HasRowid
(
pTab
ËË
pBe°
 = 
	`sqlôe3Prim¨yKeyIndex
(pTab);

5542 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

5543 if–
pIdx
->
bUn‹dîed
==0

5544 && 
pIdx
->
szIdxRow
<
pTab
->
szTabRow


5545 && 
pIdx
->
pP¨tIdxWhîe
==0

5546 && (!
pBe°
 || 
pIdx
->
szIdxRow
<pBest->szIdxRow)

5548 
pBe°
 = 
pIdx
;

5551 if–
pBe°
 ){

5552 
iRoŸ
 = 
pBe°
->
äum
;

5553 
pKeyInfo
 = 
	`sqlôe3KeyInfoOfIndex
(
pP¨£
, 
pBe°
);

5557 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_O≥nRód
, 
iC§
, 
iRoŸ
, 
iDb
, 1);

5558 if–
pKeyInfo
 ){

5559 
	`sqlôe3VdbeCh™geP4
(
v
, -1, (*)
pKeyInfo
, 
P4_KEYINFO
);

5561 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Cou¡
, 
iC§
, 
sAggInfo
.
aFunc
[0].
iMem
);

5562 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Clo£
, 
iC§
);

5563 
	`ex∂aöSim∂eCou¡
(
pP¨£
, 
pTab
, 
pBe°
);

5592 
Ex¥Li°
 *
pMöMax
 = 0;

5593 
u8
 
Êag
 = 
WHERE_ORDERBY_NORMAL
;

5595 
	`as£π
–
p
->
pGroupBy
==0 );

5596 
	`as£π
–
Êag
==0 );

5597 if–
p
->
pHavög
==0 ){

5598 
Êag
 = 
	`möMaxQuîy
(&
sAggInfo
, &
pMöMax
);

5600 
	`as£π
–
Êag
==0 || (
pMöMax
!=0 &&ÖMöMax->
nEx¥
==1) );

5602 if–
Êag
 ){

5603 
pMöMax
 = 
	`sqlôe3Ex¥Li°Dup
(
db
,ÖMinMax, 0);

5604 
pDñ
 = 
pMöMax
;

5605 
	`as£π
–
db
->
mÆlocFaûed
 || 
pMöMax
!=0 );

5606 if–!
db
->
mÆlocFaûed
 ){

5607 
pMöMax
->
a
[0].
s‹tOrdî
 = 
Êag
!=
WHERE_ORDERBY_MIN
 ?1:0;

5608 
pMöMax
->
a
[0].
pEx¥
->
›
 = 
TK_COLUMN
;

5616 
	`ª£tAccumuœt‹
(
pP¨£
, &
sAggInfo
);

5617 
pWInfo
 = 
	`sqlôe3WhîeBegö
(
pP¨£
, 
pTabLi°
, 
pWhîe
, 
pMöMax
,0,
Êag
,0);

5618 if–
pWInfo
==0 ){

5619 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
pDñ
);

5620 
£À˘_íd
;

5622 
	`upd©eAccumuœt‹
(
pP¨£
, &
sAggInfo
);

5623 
	`as£π
–
pMöMax
==0 ||ÖMöMax->
nEx¥
==1 );

5624 if–
	`sqlôe3WhîeIsOrdîed
(
pWInfo
)>0 ){

5625 
	`sqlôe3VdbeGŸo
(
v
, 
	`sqlôe3WhîeBªakLabñ
(
pWInfo
));

5626 
	`VdbeCommít
((
v
, "%s() by index",

5627 (
Êag
==
WHERE_ORDERBY_MIN
?"min":"max")));

5629 
	`sqlôe3WhîeEnd
(
pWInfo
);

5630 
	`föÆizeAggFun˘i⁄s
(
pP¨£
, &
sAggInfo
);

5633 
sS‹t
.
pOrdîBy
 = 0;

5634 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pHavög
, 
addrEnd
, 
SQLITE_JUMPIFNULL
);

5635 
	`£À˘I¬îLo›
(
pP¨£
, 
p
,Ö->
pELi°
, -1, 0, 0,

5636 
pDe°
, 
addrEnd
,áddrEnd);

5637 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
pDñ
);

5639 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
addrEnd
);

5643 if–
sDi°ö˘
.
eTn˘Ty≥
==
WHERE_DISTINCT_UNORDERED
 ){

5644 
	`ex∂aöTempTabÀ
(
pP¨£
, "DISTINCT");

5650 if–
sS‹t
.
pOrdîBy
 ){

5651 
	`ex∂aöTempTabÀ
(
pP¨£
,

5652 
sS‹t
.
nOBS©
>0 ? "RIGHT PART OF ORDER BY":"ORDER BY");

5653 
	`gíî©eS‹tTaû
(
pP¨£
, 
p
, &
sS‹t
, 
pELi°
->
nEx¥
, 
pDe°
);

5658 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iEnd
);

5662 
rc
 = (
pP¨£
->
nEº
>0);

5667 
£À˘_íd
:

5668 
	`ex∂aöSëI¡egî
(
pP¨£
->
iSñe˘Id
, 
iRe°‹eSñe˘Id
);

5672 if–
rc
==
SQLITE_OK
 && 
pDe°
->
eDe°
==
SRT_Ouçut
 ){

5673 
	`gíî©eCﬁumnNames
(
pP¨£
, 
pTabLi°
, 
pELi°
);

5676 
	`sqlôe3DbFªe
(
db
, 
sAggInfo
.
aCﬁ
);

5677 
	`sqlôe3DbFªe
(
db
, 
sAggInfo
.
aFunc
);

5678 #i‡
SELECTTRACE_ENABLED


5679 
	`SELECTTRACE
(1,
pP¨£
,
p
,("endÖrocessing\n"));

5680 
pP¨£
->
nSñe˘Indít
--;

5682  
rc
;

5683 
	}
}

	@shell.c

15 #i‡(
deföed
(
_WIN32
Ë|| deföed(
WIN32
)Ë&& !deföed(
_CRT_SECURE_NO_WARNINGS
)

17 
	#_CRT_SECURE_NO_WARNINGS


	)

23 #i‡
deföed
(
INCLUDE_MSVC_H
)

24 
	~"msvc.h
"

30 #i‡(
deföed
(
__RTP__
Ë|| deföed(
_WRS_KERNEL
)Ë&& !
SQLITE_OMIT_LOAD_EXTENSION


31 
	#SQLITE_OMIT_LOAD_EXTENSION
 1

	)

37 #i‚de‡
SQLITE_DISABLE_LFS


38 
	#_LARGE_FILE
 1

	)

39 #i‚de‡
_FILE_OFFSET_BITS


40 
	#_FILE_OFFSET_BITS
 64

	)

42 
	#_LARGEFILE_SOURCE
 1

	)

45 
	~<°dlib.h
>

46 
	~<°rög.h
>

47 
	~<°dio.h
>

48 
	~<as£π.h
>

49 
	~"sqlôe3.h
"

50 #i‡
SQLITE_USER_AUTHENTICATION


51 
	~"sqlôe3u£øuth.h
"

53 
	~<˘y≥.h
>

54 
	~<°d¨g.h
>

56 #i‡!
deföed
(
_WIN32
Ë&& !deföed(
WIN32
)

57 
	~<sig«l.h
>

58 #i‡!
deföed
(
__RTP__
Ë&& !deföed(
_WRS_KERNEL
)

59 
	~<pwd.h
>

61 
	~<uni°d.h
>

62 
	~<sys/ty≥s.h
>

65 #i‡
HAVE_READLINE


66 
	~<ªadlöe/ªadlöe.h
>

67 
	~<ªadlöe/hi°‹y.h
>

70 #i‡
HAVE_EDITLINE


71 
	~<edôlöe/ªadlöe.h
>

74 #i‡
HAVE_EDITLINE
 || 
HAVE_READLINE


76 
	#shñl_add_hi°‹y
(
X
Ë
	`add_hi°‹y
(X)

	)

77 
	#shñl_ªad_hi°‹y
(
X
Ë
	`ªad_hi°‹y
(X)

	)

78 
	#shñl_wrôe_hi°‹y
(
X
Ë
	`wrôe_hi°‹y
(X)

	)

79 
	#shñl_°iÊe_hi°‹y
(
X
Ë
	`°iÊe_hi°‹y
(X)

	)

80 
	#shñl_ªadlöe
(
X
Ë
	`ªadlöe
(X)

	)

82 #ñi‡
HAVE_LINENOISE


84 
	~"löíoi£.h
"

85 
	#shñl_add_hi°‹y
(
X
Ë
	`löíoi£Hi°‹yAdd
(X)

	)

86 
	#shñl_ªad_hi°‹y
(
X
Ë
	`löíoi£Hi°‹yLﬂd
(X)

	)

87 
	#shñl_wrôe_hi°‹y
(
X
Ë
	`löíoi£Hi°‹ySave
(X)

	)

88 
	#shñl_°iÊe_hi°‹y
(
X
Ë
	`löíoi£Hi°‹ySëMaxLí
(X)

	)

89 
	#shñl_ªadlöe
(
X
Ë
	`löíoi£
(X)

	)

93 
	#shñl_ªad_hi°‹y
(
X
)

	)

94 
	#shñl_wrôe_hi°‹y
(
X
)

	)

95 
	#shñl_°iÊe_hi°‹y
(
X
)

	)

97 
	#SHELL_USE_LOCAL_GETLINE
 1

	)

101 #i‡
deföed
(
_WIN32
Ë|| deföed(
WIN32
)

102 
	~<io.h
>

103 
	~<f˙é.h
>

104 
	#ißây
(
h
Ë
	`_ißây
(h)

	)

105 #i‚de‡
ac˚ss


106 
	#ac˚ss
(
f
,
m
Ë
	`_ac˚ss
((f),(m))

	)

108 #unde‡
p›í


109 
	#p›í
 
_p›í


	)

110 #unde‡
p˛o£


111 
	#p˛o£
 
_p˛o£


	)

114 
ißây
();

116 #i‡!
deföed
(
__RTP__
Ë&& !deföed(
_WRS_KERNEL
)

119 
FILE
 *
p›í
(const *,const *);

120 
p˛o£
(
FILE
*);

122 
	#SQLITE_OMIT_POPEN
 1

	)

126 #i‡
deföed
(
_WIN32_WCE
)

131 
	#ißây
(
x
Ë1

	)

135 
	#IsS∑˚
(
X
Ë
	`is•a˚
(()X)

	)

136 
	#IsDigô
(
X
Ë
	`isdigô
(()X)

	)

137 
	#ToLowî
(
X
Ë()
	`tﬁowî
(()X)

	)

139 #i‡
deföed
(
_WIN32
Ë|| deföed(
WIN32
)

140 
	~<wödows.h
>

143 *
sqlôe3_wö32_unicode_to_utf8
(
LPCWSTR
);

144 *
sqlôe3_wö32_mbcs_to_utf8_v2
(const *, );

145 *
sqlôe3_wö32_utf8_to_mbcs_v2
(const *, );

154 #i‡
deföed
(
_WIN32
Ë|| deföed(
WIN32
)

155 
	$£tBö¨yMode
(
FILE
 *
fûe
, 
isOuçut
){

156 if–
isOuçut
 ) 
	`fÊush
(
fûe
);

157 
	`_£tmode
(
	`_fûío
(
fûe
), 
_O_BINARY
);

158 
	}
}

159 
	$£tTextMode
(
FILE
 *
fûe
, 
isOuçut
){

160 if–
isOuçut
 ) 
	`fÊush
(
fûe
);

161 
	`_£tmode
(
	`_fûío
(
fûe
), 
_O_TEXT
);

162 
	}
}

164 
	#£tBö¨yMode
(
X
,
Y
)

	)

165 
	#£tTextMode
(
X
,
Y
)

	)

170 
	gíabÀTimî
 = 0;

173 
sqlôe3_öt64
 
	$timeOfDay
(){

174 
sqlôe3_vfs
 *
˛ockVfs
 = 0;

175 
sqlôe3_öt64
 
t
;

176 if–
˛ockVfs
==0 ) clockVf†
	`sqlôe3_vfs_föd
(0);

177 if–
˛ockVfs
->
iVîsi⁄
>=2 && clockVfs->
xCuºítTimeI¡64
!=0 ){

178 
˛ockVfs
->
	`xCuºítTimeI¡64
(˛ockVfs, &
t
);

180 
r
;

181 
˛ockVfs
->
	`xCuºítTime
(˛ockVfs, &
r
);

182 
t
 = (
sqlôe3_öt64
)(
r
*86400000.0);

184  
t
;

185 
	}
}

187 #i‡!
deföed
(
_WIN32
Ë&& !deföed(
WIN32
Ë&& !deföed(
__möux
)

188 
	~<sys/time.h
>

189 
	~<sys/ªsour˚.h
>

192 #i‡
deföed
(
_WRS_KERNEL
Ë|| deföed(
__RTP__
)

193 
	srußge
 {

194 
timevÆ
 
	mru_utime
;

195 
timevÆ
 
	mru_°ime
;

197 
	#gërußge
(
A
,
B
Ë
	`mem£t
(B,0,(*B))

	)

201 
rußge
 
	gsBegö
;

202 
sqlôe3_öt64
 
	giBegö
;

207 
	$begöTimî
(){

208 if–
íabÀTimî
 ){

209 
	`gërußge
(
RUSAGE_SELF
, &
sBegö
);

210 
iBegö
 = 
	`timeOfDay
();

212 
	}
}

215 
	$timeDiff
(
timevÆ
 *
pSèπ
, timevÆ *
pEnd
){

216  (
pEnd
->
tv_u£c
 - 
pSèπ
->tv_usec)*0.000001 +

217 ()(
pEnd
->
tv_£c
 - 
pSèπ
->tv_sec);

218 
	}
}

223 
	$ídTimî
(){

224 if–
íabÀTimî
 ){

225 
sqlôe3_öt64
 
iEnd
 = 
	`timeOfDay
();

226 
rußge
 
sEnd
;

227 
	`gërußge
(
RUSAGE_SELF
, &
sEnd
);

228 
	`¥ötf
("Run Time:Ñeal %.3f user %f sys %f\n",

229 (
iEnd
 - 
iBegö
)*0.001,

230 
	`timeDiff
(&
sBegö
.
ru_utime
, &
sEnd
.ru_utime),

231 
	`timeDiff
(&
sBegö
.
ru_°ime
, &
sEnd
.ru_stime));

233 
	}
}

235 
	#BEGIN_TIMER
 
	`begöTimî
()

	)

236 
	#END_TIMER
 
	`ídTimî
()

	)

237 
	#HAS_TIMER
 1

	)

239 #ñi‡(
deföed
(
_WIN32
Ë|| deföed(
WIN32
))

242 
HANDLE
 
	ghPro˚ss
;

243 
FILETIME
 
	g·Kî√lBegö
;

244 
FILETIME
 
	g·U£rBegö
;

245 
sqlôe3_öt64
 
	g·WÆlBegö
;

246 
	$BOOL
 (
	tWINAPI
 *
	tGETPROCTIMES
)(
	tHANDLE
, 
	tLPFILETIME
, LPFILETIME,

247 
	tLPFILETIME
, LPFILETIME);

248 
GETPROCTIMES
 
gëPro˚ssTimesAddr
 = 
NULL
;

254 
	$hasTimî
(){

255 if–
gëPro˚ssTimesAddr
 ){

262 
hPro˚ss
 = 
	`GëCuºítPro˚ss
();

263 if–
hPro˚ss
 ){

264 
HINSTANCE
 
hö°Lib
 = 
	`LﬂdLibøry
(
	`TEXT
("Kernel32.dll"));

265 if–
NULL
 !
hö°Lib
 ){

266 
gëPro˚ssTimesAddr
 =

267 (
GETPROCTIMES
Ë
	`GëProcAddªss
(
hö°Lib
, "GetProcessTimes");

268 if–
NULL
 !
gëPro˚ssTimesAddr
 ){

271 
	`FªeLibøry
(
hö°Lib
);

276 
	}
}

281 
	$begöTimî
(){

282 if–
íabÀTimî
 && 
gëPro˚ssTimesAddr
 ){

283 
FILETIME
 
·Cª©i⁄
, 
·Exô
;

284 
	`gëPro˚ssTimesAddr
(
hPro˚ss
,&
·Cª©i⁄
,&
·Exô
,

285 &
·Kî√lBegö
,&
·U£rBegö
);

286 
·WÆlBegö
 = 
	`timeOfDay
();

288 
	}
}

291 
	$timeDiff
(
FILETIME
 *
pSèπ
, FILETIME *
pEnd
){

292 
sqlôe_öt64
 
i64Sèπ
 = *((sqlôe_öt64 *Ë
pSèπ
);

293 
sqlôe_öt64
 
i64End
 = *((sqlôe_öt64 *Ë
pEnd
);

294  (Ë((
i64End
 - 
i64Sèπ
) / 10000000.0);

295 
	}
}

300 
	$ídTimî
(){

301 if–
íabÀTimî
 && 
gëPro˚ssTimesAddr
){

302 
FILETIME
 
·Cª©i⁄
, 
·Exô
, 
·Kî√lEnd
, 
·U£rEnd
;

303 
sqlôe3_öt64
 
·WÆlEnd
 = 
	`timeOfDay
();

304 
	`gëPro˚ssTimesAddr
(
hPro˚ss
,&
·Cª©i⁄
,&
·Exô
,&
·Kî√lEnd
,&
·U£rEnd
);

305 
	`¥ötf
("Run Time:Ñeal %.3f user %f sys %f\n",

306 (
·WÆlEnd
 - 
·WÆlBegö
)*0.001,

307 
	`timeDiff
(&
·U£rBegö
, &
·U£rEnd
),

308 
	`timeDiff
(&
·Kî√lBegö
, &
·Kî√lEnd
));

310 
	}
}

312 
	#BEGIN_TIMER
 
	`begöTimî
()

	)

313 
	#END_TIMER
 
	`ídTimî
()

	)

314 
	#HAS_TIMER
 
	`hasTimî
()

	)

317 
	#BEGIN_TIMER


	)

318 
	#END_TIMER


	)

319 
	#HAS_TIMER
 0

	)

325 
	#UNUSED_PARAMETER
(
x
Ë()(x)

	)

331 
	gbaû_⁄_îr‹
 = 0;

337 
	g°dö_is_öãø˘ive
 = 1;

344 
	g°dout_is_c⁄sﬁe
 = 1;

351 
sqlôe3
 *
	gglobÆDb
 = 0;

356 vﬁ©ûê
	g£íI¡îru±
 = 0;

362 *
	gArgv0
;

368 
	gmaöProm±
[20];

369 
	gc⁄töueProm±
[20];

376 #i‡
deföed
(
_WIN32
Ë|| deföed(
WIN32
)

377 
	$utf8_¥ötf
(
FILE
 *
out
, c⁄° *
zF‹m©
, ...){

378 
va_li°
 
≠
;

379 
	`va_°¨t
(
≠
, 
zF‹m©
);

380 if–
°dout_is_c⁄sﬁe
 && (
out
==
°dout
 || out==
°dîr
) ){

381 *
z1
 = 
	`sqlôe3_vm¥ötf
(
zF‹m©
, 
≠
);

382 *
z2
 = 
	`sqlôe3_wö32_utf8_to_mbcs_v2
(
z1
, 0);

383 
	`sqlôe3_‰ì
(
z1
);

384 
	`Âuts
(
z2
, 
out
);

385 
	`sqlôe3_‰ì
(
z2
);

387 
	`vÂrötf
(
out
, 
zF‹m©
, 
≠
);

389 
	`va_íd
(
≠
);

390 
	}
}

391 #ñi‡!
deföed
(
utf8_¥ötf
)

392 
	#utf8_¥ötf
 
Ârötf


	)

399 #i‡!
deföed
(
øw_¥ötf
)

400 
	#øw_¥ötf
 
Ârötf


	)

406 #ifde‡
SQLITE_ENABLE_IOTRACE


407 
FILE
 *
	giŸø˚
 = 0;

416 #ifde‡
SQLITE_ENABLE_IOTRACE


417 
SQLITE_CDECL
 
	$iŸø˚Prötf
(c⁄° *
zF‹m©
, ...){

418 
va_li°
 
≠
;

419 *
z
;

420 if–
iŸø˚
==0 ) ;

421 
	`va_°¨t
(
≠
, 
zF‹m©
);

422 
z
 = 
	`sqlôe3_vm¥ötf
(
zF‹m©
, 
≠
);

423 
	`va_íd
(
≠
);

424 
	`utf8_¥ötf
(
iŸø˚
, "%s", 
z
);

425 
	`sqlôe3_‰ì
(
z
);

426 
	}
}

433 
	$isNumbî
(c⁄° *
z
, *
ªÆnum
){

434 if–*
z
=='-' || *z=='+' ) z++;

435 if–!
	`IsDigô
(*
z
) ){

438 
z
++;

439 if–
ªÆnum
 ) *realnum = 0;

440  
	`IsDigô
(*
z
) ){ z++; }

441 if–*
z
=='.' ){

442 
z
++;

443 if–!
	`IsDigô
(*
z
) )  0;

444  
	`IsDigô
(*
z
) ){ z++; }

445 if–
ªÆnum
 ) *realnum = 1;

447 if–*
z
=='e' || *z=='E' ){

448 
z
++;

449 if–*
z
=='+' || *z=='-' ) z++;

450 if–!
	`IsDigô
(*
z
) )  0;

451  
	`IsDigô
(*
z
) ){ z++; }

452 if–
ªÆnum
 ) *realnum = 1;

454  *
z
==0;

455 
	}
}

465 c⁄° *
	gzShñlSètic
 = 0;

466 
	$shñl°©icFunc
(

467 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

468 
¨gc
,

469 
sqlôe3_vÆue
 **
¨gv


471 
	`as£π
–0==
¨gc
 );

472 
	`as£π
–
zShñlSètic
 );

473 
	`UNUSED_PARAMETER
(
¨gc
);

474 
	`UNUSED_PARAMETER
(
¨gv
);

475 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zShñlSètic
, -1, 
SQLITE_STATIC
);

476 
	}
}

483 
	$°æí30
(c⁄° *
z
){

484 c⁄° *
z2
 = 
z
;

485  *
z2
 ){ z2++; }

486  0x3ffffff‡& ()(
z2
 - 
z
);

487 
	}
}

498 *
	$loˇl_gëlöe
(*
zLöe
, 
FILE
 *
ö
){

499 
nLöe
 = 
zLöe
==0 ? 0 : 100;

500 
n
 = 0;

503 if–
n
+100>
nLöe
 ){

504 
nLöe
 =ÇLine*2 + 100;

505 
zLöe
 = 
	`ªÆloc
(zLöe, 
nLöe
);

506 if–
zLöe
==0 )  0;

508 if–
	`fgës
(&
zLöe
[
n
], 
nLöe
 -Ç, 
ö
)==0 ){

509 if–
n
==0 ){

510 
	`‰ì
(
zLöe
);

513 
zLöe
[
n
] = 0;

516  
zLöe
[
n
] )Ç++;

517 if–
n
>0 && 
zLöe
[n-1]=='\n' ){

518 
n
--;

519 if–
n
>0 && 
zLöe
[n-1]=='\r' )Ç--;

520 
zLöe
[
n
] = 0;

524 #i‡
	`deföed
(
_WIN32
Ë|| deföed(
WIN32
)

527 if–
°dö_is_öãø˘ive
 ){

528 *
zTøns
 = 
	`sqlôe3_wö32_mbcs_to_utf8_v2
(
zLöe
, 0);

529 if–
zTøns
 ){

530 
nTøns
 = 
	`°æí30
(
zTøns
)+1;

531 if–
nTøns
>
nLöe
 ){

532 
zLöe
 = 
	`ªÆloc
(zLöe, 
nTøns
);

533 if–
zLöe
==0 ){

534 
	`sqlôe3_‰ì
(
zTøns
);

538 
	`mem˝y
(
zLöe
, 
zTøns
, 
nTøns
);

539 
	`sqlôe3_‰ì
(
zTøns
);

543  
zLöe
;

544 
	}
}

560 *
	$⁄e_öput_löe
(
FILE
 *
ö
, *
zPri‹
, 
isC⁄töu©i⁄
){

561 *
zProm±
;

562 *
zResu…
;

563 if–
ö
!=0 ){

564 
zResu…
 = 
	`loˇl_gëlöe
(
zPri‹
, 
ö
);

566 
zProm±
 = 
isC⁄töu©i⁄
 ? 
c⁄töueProm±
 : 
maöProm±
;

567 #i‡
SHELL_USE_LOCAL_GETLINE


568 
	`¥ötf
("%s", 
zProm±
);

569 
	`fÊush
(
°dout
);

570 
zResu…
 = 
	`loˇl_gëlöe
(
zPri‹
, 
°dö
);

572 
	`‰ì
(
zPri‹
);

573 
zResu…
 = 
	`shñl_ªadlöe
(
zProm±
);

574 if–
zResu…
 && *zResu… ) 
	`shñl_add_hi°‹y
(zResult);

577  
zResu…
;

578 
	}
}

580 #i‡
deföed
(
SQLITE_ENABLE_SESSION
)

584 
O≥nSessi⁄
 
	tO≥nSessi⁄
;

585 
	sO≥nSessi⁄
 {

586 *
	mzName
;

587 
	mnFûãr
;

588 **
	mazFûãr
;

589 
sqlôe3_£ssi⁄
 *
	mp
;

597 
SavedModeInfo
 
	tSavedModeInfo
;

598 
	sSavedModeInfo
 {

599 
	mvÆid
;

600 
	mmode
;

601 
	mshowHódî
;

602 
	mcﬁWidth
[100];

609 
ShñlSèã
 
	tShñlSèã
;

610 
	sShñlSèã
 {

611 
sqlôe3
 *
	mdb
;

612 
	mechoOn
;

613 
	mautoEx∂aö
;

614 
	mautoEQP
;

615 
	m°©sOn
;

616 
	msˇn°©sOn
;

617 
	mcou¡Ch™ges
;

618 
	mback¶ashOn
;

619 
	moutCou¡
;

620 
	m˙t
;

621 
FILE
 *
	mout
;

622 
FILE
 *
	måa˚Out
;

623 
	mnEº
;

624 
	mmode
;

625 
	mcMode
;

626 
	mn‹mÆMode
;

627 
	mwrôabÀSchema
;

628 
	mshowHódî
;

629 
	mshñlFlgs
;

630 *
	mzDe°TabÀ
;

631 
	mcﬁSï¨©‹
[20];

632 
	mrowSï¨©‹
[20];

633 
	mcﬁWidth
[100];

634 
	ma˘uÆWidth
[100];

635 
	mnuŒVÆue
[20];

637 
	moutfûe
[
FILENAME_MAX
];

638 c⁄° *
	mzDbFûíame
;

639 *
	mzFªeOnClo£
;

640 c⁄° *
	mzVfs
;

641 
sqlôe3_°mt
 *
	mpStmt
;

642 
FILE
 *
	mpLog
;

643 *
	maiIndít
;

644 
	mnIndít
;

645 
	miIndít
;

646 #i‡
deföed
(
SQLITE_ENABLE_SESSION
)

647 
	mnSessi⁄
;

648 
O≥nSessi⁄
 
	maSessi⁄
[4];

655 
	#SHFLG_S¸©ch
 0x00001

	)

656 
	#SHFLG_Pageˇche
 0x00002

	)

657 
	#SHFLG_Lookaside
 0x00004

	)

662 
	#MODE_Löe
 0

	)

663 
	#MODE_Cﬁumn
 1

	)

664 
	#MODE_Li°
 2

	)

665 
	#MODE_Semi
 3

	)

666 
	#MODE_Html
 4

	)

667 
	#MODE_In£π
 5

	)

668 
	#MODE_T˛
 6

	)

669 
	#MODE_Csv
 7

	)

670 
	#MODE_Ex∂aö
 8

	)

671 
	#MODE_Ascii
 9

	)

672 
	#MODE_Pªây
 10

	)

674 c⁄° *
	gmodeDes¸
[] = {

692 
	#SEP_Cﬁumn
 "|"

	)

693 
	#SEP_Row
 "\n"

	)

694 
	#SEP_Tab
 "\t"

	)

695 
	#SEP_S∑˚
 " "

	)

696 
	#SEP_Comma
 ","

	)

697 
	#SEP_CrLf
 "\r\n"

	)

698 
	#SEP_Unô
 "\x1F"

	)

699 
	#SEP_Rec‹d
 "\x1E"

	)

704 
	#AºaySize
(
X
Ë()((X)/(X[0]))

	)

709 
	$shñlLog
(*
pArg
, 
iEºCode
, c⁄° *
zMsg
){

710 
ShñlSèã
 *
p
 = (ShñlSèã*)
pArg
;

711 if–
p
->
pLog
==0 ) ;

712 
	`utf8_¥ötf
(
p
->
pLog
, "(%dË%s\n", 
iEºCode
, 
zMsg
);

713 
	`fÊush
(
p
->
pLog
);

714 
	}
}

719 
	$ouçut_hex_blob
(
FILE
 *
out
, c⁄° *
pBlob
, 
nBlob
){

720 
i
;

721 *
zBlob
 = (*)
pBlob
;

722 
	`øw_¥ötf
(
out
,"X'");

723 
i
=0; i<
nBlob
; i++){ 
	`øw_¥ötf
(
out
,"%02x",
zBlob
[i]&0xff); }

724 
	`øw_¥ötf
(
out
,"'");

725 
	}
}

730 
	$ouçut_quŸed_°rög
(
FILE
 *
out
, c⁄° *
z
){

731 
i
;

732 
nSögÀ
 = 0;

733 
	`£tBö¨yMode
(
out
, 1);

734 
i
=0; 
z
[i]; i++){

735 if–
z
[
i
]=='\'' ) 
nSögÀ
++;

737 if–
nSögÀ
==0 ){

738 
	`utf8_¥ötf
(
out
,"'%s'",
z
);

740 
	`øw_¥ötf
(
out
,"'");

741  *
z
 ){

742 
i
=0; 
z
[i] && z[i]!='\''; i++){}

743 if–
i
==0 ){

744 
	`øw_¥ötf
(
out
,"''");

745 
z
++;

746 }if–
z
[
i
]=='\'' ){

747 
	`utf8_¥ötf
(
out
,"%.*s''",
i
,
z
);

748 
z
 +
i
+1;

750 
	`utf8_¥ötf
(
out
,"%s",
z
);

754 
	`øw_¥ötf
(
out
,"'");

756 
	`£tTextMode
(
out
, 1);

757 
	}
}

762 
	$ouçut_c_°rög
(
FILE
 *
out
, c⁄° *
z
){

763 
c
;

764 
	`Âutc
('"', 
out
);

765  (
c
 = *(
z
++))!=0 ){

766 if–
c
=='\\' ){

767 
	`Âutc
(
c
, 
out
);

768 
	`Âutc
(
c
, 
out
);

769 }if–
c
=='"' ){

770 
	`Âutc
('\\', 
out
);

771 
	`Âutc
('"', 
out
);

772 }if–
c
=='\t' ){

773 
	`Âutc
('\\', 
out
);

774 
	`Âutc
('t', 
out
);

775 }if–
c
=='\n' ){

776 
	`Âutc
('\\', 
out
);

777 
	`Âutc
('n', 
out
);

778 }if–
c
=='\r' ){

779 
	`Âutc
('\\', 
out
);

780 
	`Âutc
('r', 
out
);

781 }if–!
	`i•röt
(
c
&0xff) ){

782 
	`øw_¥ötf
(
out
, "\\%03o", 
c
&0xff);

784 
	`Âutc
(
c
, 
out
);

787 
	`Âutc
('"', 
out
);

788 
	}
}

794 
	$ouçut_html_°rög
(
FILE
 *
out
, c⁄° *
z
){

795 
i
;

796 if–
z
==0 ) z = "";

797  *
z
 ){

798 
i
=0; 
z
[i]

799 && 
z
[
i
]!='<'

800 && 
z
[
i
]!='&'

801 && 
z
[
i
]!='>'

802 && 
z
[
i
]!='\"'

803 && 
z
[
i
]!='\'';

804 
i
++){}

805 if–
i
>0 ){

806 
	`utf8_¥ötf
(
out
,"%.*s",
i
,
z
);

808 if–
z
[
i
]=='<' ){

809 
	`øw_¥ötf
(
out
,"&lt;");

810 }if–
z
[
i
]=='&' ){

811 
	`øw_¥ötf
(
out
,"&amp;");

812 }if–
z
[
i
]=='>' ){

813 
	`øw_¥ötf
(
out
,"&gt;");

814 }if–
z
[
i
]=='\"' ){

815 
	`øw_¥ötf
(
out
,"&quot;");

816 }if–
z
[
i
]=='\'' ){

817 
	`øw_¥ötf
(
out
,"&#39;");

821 
z
 +
i
 + 1;

823 
	}
}

829 c⁄° 
	g√edCsvQuŸe
[] = {

854 
	$ouçut_csv
(
ShñlSèã
 *
p
, c⁄° *
z
, 
bSï
){

855 
FILE
 *
out
 = 
p
->out;

856 if–
z
==0 ){

857 
	`utf8_¥ötf
(
out
,"%s",
p
->
nuŒVÆue
);

859 
i
;

860 
nSï
 = 
	`°æí30
(
p
->
cﬁSï¨©‹
);

861 
i
=0; 
z
[i]; i++){

862 if–
√edCsvQuŸe
[((*)
z
)[
i
]]

863 || (
z
[
i
]==
p
->
cﬁSï¨©‹
[0] &&

864 (
nSï
==1 || 
	`memcmp
(
z
, 
p
->
cﬁSï¨©‹
,ÇSep)==0)) ){

865 
i
 = 0;

869 if–
i
==0 ){

870 
	`putc
('"', 
out
);

871 
i
=0; 
z
[i]; i++){

872 if–
z
[
i
]=='"' ) 
	`putc
('"', 
out
);

873 
	`putc
(
z
[
i
], 
out
);

875 
	`putc
('"', 
out
);

877 
	`utf8_¥ötf
(
out
, "%s", 
z
);

880 if–
bSï
 ){

881 
	`utf8_¥ötf
(
p
->
out
, "%s",Ö->
cﬁSï¨©‹
);

883 
	}
}

885 #ifde‡
SIGINT


889 
	$öãºu±_h™dÀr
(
NŸU£d
){

890 
	`UNUSED_PARAMETER
(
NŸU£d
);

891 
£íI¡îru±
++;

892 if–
£íI¡îru±
>2 ) 
	`exô
(1);

893 if–
globÆDb
 ) 
	`sqlôe3_öãºu±
(globalDb);

894 
	}
}

901 
	$shñlAuth
(

902 *
pClõ¡D©a
,

903 
›
,

904 c⁄° *
zA1
,

905 c⁄° *
zA2
,

906 c⁄° *
zA3
,

907 c⁄° *
zA4


909 
ShñlSèã
 *
p
 = (ShñlSèã*)
pClõ¡D©a
;

910 c⁄° *
azA˘i⁄
[] = { 0,

923 
i
;

924 c⁄° *
az
[4];

925 
az
[0] = 
zA1
;

926 
az
[1] = 
zA2
;

927 
az
[2] = 
zA3
;

928 
az
[3] = 
zA4
;

929 
	`øw_¥ötf
(
p
->
out
, "auth‹izî: %s", 
azA˘i⁄
[
›
]);

930 
i
=0; i<4; i++){

931 
	`øw_¥ötf
(
p
->
out
, " ");

932 if–
az
[
i
] ){

933 
	`ouçut_c_°rög
(
p
->
out
, 
az
[
i
]);

935 
	`øw_¥ötf
(
p
->
out
, "NULL");

938 
	`øw_¥ötf
(
p
->
out
, "\n");

939  
SQLITE_OK
;

940 
	}
}

947 
	$shñl_ˇŒback
(

948 *
pArg
,

949 
nArg
,

950 **
azArg
,

951 **
azCﬁ
,

952 *
aiTy≥


954 
i
;

955 
ShñlSèã
 *
p
 = (ShñlSèã*)
pArg
;

957  
p
->
cMode
 ){

958 
MODE_Löe
: {

959 
w
 = 5;

960 if–
azArg
==0 ) ;

961 
i
=0; i<
nArg
; i++){

962 
Àn
 = 
	`°æí30
(
azCﬁ
[
i
] ?ázCol[i] : "");

963 if–
Àn
>
w
 ) w =Üen;

965 if–
p
->
˙t
++>0 ) 
	`utf8_¥ötf
’->
out
, "%s",Ö->
rowSï¨©‹
);

966 
i
=0; i<
nArg
; i++){

967 
	`utf8_¥ötf
(
p
->
out
,"%*†%s%s", 
w
, 
azCﬁ
[
i
],

968 
azArg
[
i
] ?ázArg[i] : 
p
->
nuŒVÆue
,Ö->
rowSï¨©‹
);

972 
MODE_Ex∂aö
:

973 
MODE_Cﬁumn
: {

974 c⁄° 
aEx∂aöWidths
[] = {4, 13, 4, 4, 4, 13, 2, 13};

975 c⁄° *
cﬁWidth
;

976 
showHdr
;

977 *
rowSï
;

978 if–
p
->
cMode
==
MODE_Cﬁumn
 ){

979 
cﬁWidth
 = 
p
->colWidth;

980 
showHdr
 = 
p
->
showHódî
;

981 
rowSï
 = 
p
->
rowSï¨©‹
;

983 
cﬁWidth
 = 
aEx∂aöWidths
;

984 
showHdr
 = 1;

985 
rowSï
 = 
SEP_Row
;

987 if–
p
->
˙t
++==0 ){

988 
i
=0; i<
nArg
; i++){

989 
w
, 
n
;

990 if–
i
<
	`AºaySize
(
p
->
cﬁWidth
) ){

991 
w
 = 
cﬁWidth
[
i
];

993 
w
 = 0;

995 if–
w
==0 ){

996 
w
 = 
	`°æí30
(
azCﬁ
[
i
] ?ázCol[i] : "");

997 if–
w
<10 ) w = 10;

998 
n
 = 
	`°æí30
(
azArg
 &&ázArg[
i
] ?ázArg[i] : 
p
->
nuŒVÆue
);

999 if–
w
<
n
 ) w =Ç;

1001 if–
i
<
	`AºaySize
(
p
->
a˘uÆWidth
) ){

1002 
p
->
a˘uÆWidth
[
i
] = 
w
;

1004 if–
showHdr
 ){

1005 if–
w
<0 ){

1006 
	`utf8_¥ötf
(
p
->
out
,"%*.*s%s",-
w
,-w,
azCﬁ
[
i
],

1007 
i
==
nArg
-1 ? 
rowSï
 : " ");

1009 
	`utf8_¥ötf
(
p
->
out
,"%-*.*s%s",
w
,w,
azCﬁ
[
i
],

1010 
i
==
nArg
-1 ? 
rowSï
 : " ");

1014 if–
showHdr
 ){

1015 
i
=0; i<
nArg
; i++){

1016 
w
;

1017 if–
i
<
	`AºaySize
(
p
->
a˘uÆWidth
) ){

1018 
w
 = 
p
->
a˘uÆWidth
[
i
];

1019 if–
w
<0 ) w = -w;

1021 
w
 = 10;

1023 
	`utf8_¥ötf
(
p
->
out
,"%-*.*s%s",
w
,w,

1026 
i
==
nArg
-1 ? 
rowSï
 : " ");

1030 if–
azArg
==0 ) ;

1031 
i
=0; i<
nArg
; i++){

1032 
w
;

1033 if–
i
<
	`AºaySize
(
p
->
a˘uÆWidth
) ){

1034 
w
 = 
p
->
a˘uÆWidth
[
i
];

1036 
w
 = 10;

1038 if–
p
->
cMode
==
MODE_Ex∂aö
 && 
azArg
[
i
] && 
	`°æí30
◊zArg[i])>
w
 ){

1039 
w
 = 
	`°æí30
(
azArg
[
i
]);

1041 if–
i
==1 && 
p
->
aiIndít
 &&Ö->
pStmt
 ){

1042 if–
p
->
iIndít
<p->
nIndít
 ){

1043 
	`utf8_¥ötf
(
p
->
out
, "%*.s",Ö->
aiIndít
[p->
iIndít
], "");

1045 
p
->
iIndít
++;

1047 if–
w
<0 ){

1048 
	`utf8_¥ötf
(
p
->
out
,"%*.*s%s",-
w
,-w,

1049 
azArg
[
i
] ?ázArg[i] : 
p
->
nuŒVÆue
,

1050 
i
==
nArg
-1 ? 
rowSï
 : " ");

1052 
	`utf8_¥ötf
(
p
->
out
,"%-*.*s%s",
w
,w,

1053 
azArg
[
i
] ?ázArg[i] : 
p
->
nuŒVÆue
,

1054 
i
==
nArg
-1 ? 
rowSï
 : " ");

1059 
MODE_Semi
: {

1060 
	`utf8_¥ötf
(
p
->
out
, "%s;\n", 
azArg
[0]);

1063 
MODE_Pªây
: {

1064 *
z
;

1065 
j
;

1066 
nP¨í
 = 0;

1067 
cEnd
 = 0;

1068 
c
;

1069 
nLöe
 = 0;

1070 
	`as£π
–
nArg
==1 );

1071 if–
azArg
[0]==0 ) ;

1072 if–
	`sqlôe3_°æike
("CREATE VIEW%", 
azArg
[0], 0)==0

1073 || 
	`sqlôe3_°æike
("CREATE TRIG%", 
azArg
[0], 0)==0

1075 
	`utf8_¥ötf
(
p
->
out
, "%s;\n", 
azArg
[0]);

1078 
z
 = 
	`sqlôe3_m¥ötf
("%s", 
azArg
[0]);

1079 
j
 = 0;

1080 
i
=0; 
	`IsS∑˚
(
z
[i]); i++){}

1081 ; (
c
 = 
z
[
i
])!=0; i++){

1082 if–
	`IsS∑˚
(
c
) ){

1083 if–
	`IsS∑˚
(
z
[
j
-1]) || z[j-1]=='(' ) ;

1084 }if–(
c
=='(' || c==')'Ë&& 
j
>0 && 
	`IsS∑˚
(
z
[j-1]) ){

1085 
j
--;

1087 
z
[
j
++] = 
c
;

1089  
j
>0 && 
	`IsS∑˚
(
z
[j-1]) ){ j--; }

1090 
z
[
j
] = 0;

1091 if–
	`°æí30
(
z
)>=79 ){

1092 
i
=
j
=0; (
c
 = 
z
[i])!=0; i++){

1093 if–
c
==
cEnd
 ){

1094 
cEnd
 = 0;

1095 }if–
c
=='"' || c=='\'' || c=='`' ){

1096 
cEnd
 = 
c
;

1097 }if–
c
=='[' ){

1098 
cEnd
 = ']';

1099 }if–
c
=='(' ){

1100 
nP¨í
++;

1101 }if–
c
==')' ){

1102 
nP¨í
--;

1103 if–
nLöe
>0 && 
nP¨í
==0 && 
j
>0 ){

1104 
	`utf8_¥ötf
(
p
->
out
, "%.*s\n", 
j
, 
z
);

1105 
j
 = 0;

1108 
z
[
j
++] = 
c
;

1109 if–
nP¨í
==1 && (
c
=='(' || c==',' || c=='\n') ){

1110 if–
c
=='\n' ) 
j
--;

1111 
	`utf8_¥ötf
(
p
->
out
, "%.*s\¿ ", 
j
, 
z
);

1112 
j
 = 0;

1113 
nLöe
++;

1114  
	`IsS∑˚
(
z
[
i
+1]) ){ i++; }

1117 
z
[
j
] = 0;

1119 
	`utf8_¥ötf
(
p
->
out
, "%s;\n", 
z
);

1120 
	`sqlôe3_‰ì
(
z
);

1123 
MODE_Li°
: {

1124 if–
p
->
˙t
++==0 &&Ö->
showHódî
 ){

1125 
i
=0; i<
nArg
; i++){

1126 
	`utf8_¥ötf
(
p
->
out
,"%s%s",
azCﬁ
[
i
],

1127 
i
==
nArg
-1 ? 
p
->
rowSï¨©‹
 :Ö->
cﬁSï¨©‹
);

1130 if–
azArg
==0 ) ;

1131 
i
=0; i<
nArg
; i++){

1132 *
z
 = 
azArg
[
i
];

1133 if–
z
==0 ) z = 
p
->
nuŒVÆue
;

1134 
	`utf8_¥ötf
(
p
->
out
, "%s", 
z
);

1135 if–
i
<
nArg
-1 ){

1136 
	`utf8_¥ötf
(
p
->
out
, "%s",Ö->
cﬁSï¨©‹
);

1138 
	`utf8_¥ötf
(
p
->
out
, "%s",Ö->
rowSï¨©‹
);

1143 
MODE_Html
: {

1144 if–
p
->
˙t
++==0 &&Ö->
showHódî
 ){

1145 
	`øw_¥ötf
(
p
->
out
,"<TR>");

1146 
i
=0; i<
nArg
; i++){

1147 
	`øw_¥ötf
(
p
->
out
,"<TH>");

1148 
	`ouçut_html_°rög
(
p
->
out
, 
azCﬁ
[
i
]);

1149 
	`øw_¥ötf
(
p
->
out
,"</TH>\n");

1151 
	`øw_¥ötf
(
p
->
out
,"</TR>\n");

1153 if–
azArg
==0 ) ;

1154 
	`øw_¥ötf
(
p
->
out
,"<TR>");

1155 
i
=0; i<
nArg
; i++){

1156 
	`øw_¥ötf
(
p
->
out
,"<TD>");

1157 
	`ouçut_html_°rög
(
p
->
out
, 
azArg
[
i
] ?ázArg[i] :Ö->
nuŒVÆue
);

1158 
	`øw_¥ötf
(
p
->
out
,"</TD>\n");

1160 
	`øw_¥ötf
(
p
->
out
,"</TR>\n");

1163 
MODE_T˛
: {

1164 if–
p
->
˙t
++==0 &&Ö->
showHódî
 ){

1165 
i
=0; i<
nArg
; i++){

1166 
	`ouçut_c_°rög
(
p
->
out
,
azCﬁ
[
i
] ?ázCol[i] : "");

1167 if(
i
<
nArg
-1Ë
	`utf8_¥ötf
(
p
->
out
, "%s",Ö->
cﬁSï¨©‹
);

1169 
	`utf8_¥ötf
(
p
->
out
, "%s",Ö->
rowSï¨©‹
);

1171 if–
azArg
==0 ) ;

1172 
i
=0; i<
nArg
; i++){

1173 
	`ouçut_c_°rög
(
p
->
out
, 
azArg
[
i
] ?ázArg[i] :Ö->
nuŒVÆue
);

1174 if(
i
<
nArg
-1Ë
	`utf8_¥ötf
(
p
->
out
, "%s",Ö->
cﬁSï¨©‹
);

1176 
	`utf8_¥ötf
(
p
->
out
, "%s",Ö->
rowSï¨©‹
);

1179 
MODE_Csv
: {

1180 
	`£tBö¨yMode
(
p
->
out
, 1);

1181 if–
p
->
˙t
++==0 &&Ö->
showHódî
 ){

1182 
i
=0; i<
nArg
; i++){

1183 
	`ouçut_csv
(
p
, 
azCﬁ
[
i
] ?ázCﬁ[i] : "", i<
nArg
-1);

1185 
	`utf8_¥ötf
(
p
->
out
, "%s",Ö->
rowSï¨©‹
);

1187 if–
nArg
>0 ){

1188 
i
=0; i<
nArg
; i++){

1189 
	`ouçut_csv
(
p
, 
azArg
[
i
], i<
nArg
-1);

1191 
	`utf8_¥ötf
(
p
->
out
, "%s",Ö->
rowSï¨©‹
);

1193 
	`£tTextMode
(
p
->
out
, 1);

1196 
MODE_In£π
: {

1197 
p
->
˙t
++;

1198 if–
azArg
==0 ) ;

1199 
	`utf8_¥ötf
(
p
->
out
,"INSERT INTO %s",p->
zDe°TabÀ
);

1200 if–
p
->
showHódî
 ){

1201 
	`øw_¥ötf
(
p
->
out
,"(");

1202 
i
=0; i<
nArg
; i++){

1203 *
zSï
 = 
i
>0 ? ",": "";

1204 
	`utf8_¥ötf
(
p
->
out
, "%s%s", 
zSï
, 
azCﬁ
[
i
]);

1206 
	`øw_¥ötf
(
p
->
out
,")");

1208 
	`øw_¥ötf
(
p
->
out
," VALUES(");

1209 
i
=0; i<
nArg
; i++){

1210 *
zSï
 = 
i
>0 ? ",": "";

1211 if–(
azArg
[
i
]==0Ë|| (
aiTy≥
 &&áiTy≥[i]==
SQLITE_NULL
) ){

1212 
	`utf8_¥ötf
(
p
->
out
,"%sNULL",
zSï
);

1213 }if–
aiTy≥
 &&áiTy≥[
i
]==
SQLITE_TEXT
 ){

1214 if–
zSï
[0] ) 
	`utf8_¥ötf
(
p
->
out
,"%s",zSep);

1215 
	`ouçut_quŸed_°rög
(
p
->
out
, 
azArg
[
i
]);

1216 }if–
aiTy≥
 && (aiTy≥[
i
]==
SQLITE_INTEGER


1217 || 
aiTy≥
[
i
]==
SQLITE_FLOAT
) ){

1218 
	`utf8_¥ötf
(
p
->
out
,"%s%s",
zSï
, 
azArg
[
i
]);

1219 }if–
aiTy≥
 &&áiTy≥[
i
]==
SQLITE_BLOB
 && 
p
->
pStmt
 ){

1220 c⁄° *
pBlob
 = 
	`sqlôe3_cﬁumn_blob
(
p
->
pStmt
, 
i
);

1221 
nBlob
 = 
	`sqlôe3_cﬁumn_byãs
(
p
->
pStmt
, 
i
);

1222 if–
zSï
[0] ) 
	`utf8_¥ötf
(
p
->
out
,"%s",zSep);

1223 
	`ouçut_hex_blob
(
p
->
out
, 
pBlob
, 
nBlob
);

1224 }if–
	`isNumbî
(
azArg
[
i
], 0) ){

1225 
	`utf8_¥ötf
(
p
->
out
,"%s%s",
zSï
, 
azArg
[
i
]);

1227 if–
zSï
[0] ) 
	`utf8_¥ötf
(
p
->
out
,"%s",zSep);

1228 
	`ouçut_quŸed_°rög
(
p
->
out
, 
azArg
[
i
]);

1231 
	`øw_¥ötf
(
p
->
out
,");\n");

1234 
MODE_Ascii
: {

1235 if–
p
->
˙t
++==0 &&Ö->
showHódî
 ){

1236 
i
=0; i<
nArg
; i++){

1237 if–
i
>0 ) 
	`utf8_¥ötf
(
p
->
out
, "%s",Ö->
cﬁSï¨©‹
);

1238 
	`utf8_¥ötf
(
p
->
out
,"%s",
azCﬁ
[
i
] ?ázCol[i] : "");

1240 
	`utf8_¥ötf
(
p
->
out
, "%s",Ö->
rowSï¨©‹
);

1242 if–
azArg
==0 ) ;

1243 
i
=0; i<
nArg
; i++){

1244 if–
i
>0 ) 
	`utf8_¥ötf
(
p
->
out
, "%s",Ö->
cﬁSï¨©‹
);

1245 
	`utf8_¥ötf
(
p
->
out
,"%s",
azArg
[
i
] ?ázArg[i] :Ö->
nuŒVÆue
);

1247 
	`utf8_¥ötf
(
p
->
out
, "%s",Ö->
rowSï¨©‹
);

1252 
	}
}

1258 
	$ˇŒback
(*
pArg
, 
nArg
, **
azArg
, **
azCﬁ
){

1260  
	`shñl_ˇŒback
(
pArg
, 
nArg
, 
azArg
, 
azCﬁ
, 
NULL
);

1261 
	}
}

1268 
	$£t_èbÀ_«me
(
ShñlSèã
 *
p
, c⁄° *
zName
){

1269 
i
, 
n
;

1270 
√edQuŸe
;

1271 *
z
;

1273 if–
p
->
zDe°TabÀ
 ){

1274 
	`‰ì
(
p
->
zDe°TabÀ
);

1275 
p
->
zDe°TabÀ
 = 0;

1277 if–
zName
==0 ) ;

1278 
√edQuŸe
 = !
	`ißÕha
(()*
zName
) && *zName!='_';

1279 
i
=
n
=0; 
zName
[i]; i++,Ç++){

1280 if–!
	`iß um
(()
zName
[
i
]) && zName[i]!='_' ){

1281 
√edQuŸe
 = 1;

1282 if–
zName
[
i
]=='\'' ) 
n
++;

1285 if–
√edQuŸe
 ) 
n
 += 2;

1286 
z
 = 
p
->
zDe°TabÀ
 = 
	`mÆloc
–
n
+1 );

1287 if–
z
==0 ){

1288 
	`øw_¥ötf
(
°dîr
,"Error: out of memory\n");

1289 
	`exô
(1);

1291 
n
 = 0;

1292 if–
√edQuŸe
 ) 
z
[
n
++] = '\'';

1293 
i
=0; 
zName
[i]; i++){

1294 
z
[
n
++] = 
zName
[
i
];

1295 if–
zName
[
i
]=='\'' ) 
z
[
n
++] = '\'';

1297 if–
√edQuŸe
 ) 
z
[
n
++] = '\'';

1298 
z
[
n
] = 0;

1299 
	}
}

1309 *
	$≠≥ndText
(*
zIn
, c⁄° *
zAµíd
, 
quŸe
){

1310 
Àn
;

1311 
i
;

1312 
nAµíd
 = 
	`°æí30
(
zAµíd
);

1313 
nIn
 = (
zIn
?
	`°æí30
(zIn):0);

1315 
Àn
 = 
nAµíd
+
nIn
+1;

1316 if–
quŸe
 ){

1317 
Àn
 += 2;

1318 
i
=0; i<
nAµíd
; i++){

1319 if–
zAµíd
[
i
]==
quŸe
 ) 
Àn
++;

1323 
zIn
 = (*)
	`ªÆloc
(zIn, 
Àn
);

1324 if–!
zIn
 ){

1328 if–
quŸe
 ){

1329 *
zC§
 = &
zIn
[
nIn
];

1330 *
zC§
++ = 
quŸe
;

1331 
i
=0; i<
nAµíd
; i++){

1332 *
zC§
++ = 
zAµíd
[
i
];

1333 if–
zAµíd
[
i
]==
quŸe
 ) *
zC§
++ = quote;

1335 *
zC§
++ = 
quŸe
;

1336 *
zC§
++ = '\0';

1337 
	`as£π
–(
zC§
-
zIn
)==
Àn
 );

1339 
	`mem˝y
(&
zIn
[
nIn
], 
zAµíd
, 
nAµíd
);

1340 
zIn
[
Àn
-1] = '\0';

1343  
zIn
;

1344 
	}
}

1357 
	$run_èbÀ_dump_quîy
(

1358 
ShñlSèã
 *
p
,

1359 c⁄° *
zSñe˘
,

1360 c⁄° *
zFú°Row


1362 
sqlôe3_°mt
 *
pSñe˘
;

1363 
rc
;

1364 
nResu…
;

1365 
i
;

1366 c⁄° *
z
;

1367 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
p
->
db
, 
zSñe˘
, -1, &
pSñe˘
, 0);

1368 if–
rc
!=
SQLITE_OK
 || !
pSñe˘
 ){

1369 
	`utf8_¥ötf
(
p
->
out
, "/**** ERROR: (%dË%†*****/\n", 
rc
,

1370 
	`sqlôe3_îrmsg
(
p
->
db
));

1371 if–(
rc
&0xff)!=
SQLITE_CORRUPT
 ) 
p
->
nEº
++;

1372  
rc
;

1374 
rc
 = 
	`sqlôe3_°ï
(
pSñe˘
);

1375 
nResu…
 = 
	`sqlôe3_cﬁumn_cou¡
(
pSñe˘
);

1376  
rc
==
SQLITE_ROW
 ){

1377 if–
zFú°Row
 ){

1378 
	`utf8_¥ötf
(
p
->
out
, "%s", 
zFú°Row
);

1379 
zFú°Row
 = 0;

1381 
z
 = (c⁄° *)
	`sqlôe3_cﬁumn_ãxt
(
pSñe˘
, 0);

1382 
	`utf8_¥ötf
(
p
->
out
, "%s", 
z
);

1383 
i
=1; i<
nResu…
; i++){

1384 
	`utf8_¥ötf
(
p
->
out
, ",%s", 
	`sqlôe3_cﬁumn_ãxt
(
pSñe˘
, 
i
));

1386 if–
z
==0 ) z = "";

1387  
z
[0] && (z[0]!='-' || z[1]!='-') ) z++;

1388 if–
z
[0] ){

1389 
	`øw_¥ötf
(
p
->
out
, "\n;\n");

1391 
	`øw_¥ötf
(
p
->
out
, ";\n");

1393 
rc
 = 
	`sqlôe3_°ï
(
pSñe˘
);

1395 
rc
 = 
	`sqlôe3_föÆize
(
pSñe˘
);

1396 if–
rc
!=
SQLITE_OK
 ){

1397 
	`utf8_¥ötf
(
p
->
out
, "/**** ERROR: (%dË%†*****/\n", 
rc
,

1398 
	`sqlôe3_îrmsg
(
p
->
db
));

1399 if–(
rc
&0xff)!=
SQLITE_CORRUPT
 ) 
p
->
nEº
++;

1401  
rc
;

1402 
	}
}

1407 *
	$ßve_îr_msg
(

1408 
sqlôe3
 *
db


1410 
nEºMsg
 = 1+
	`°æí30
(
	`sqlôe3_îrmsg
(
db
));

1411 *
zEºMsg
 = 
	`sqlôe3_mÆloc64
(
nEºMsg
);

1412 if–
zEºMsg
 ){

1413 
	`mem˝y
(
zEºMsg
, 
	`sqlôe3_îrmsg
(
db
), 
nEºMsg
);

1415  
zEºMsg
;

1416 
	}
}

1418 #ifde‡
__löux__


1422 
	$di•œyLöuxIoSèts
(
FILE
 *
out
){

1423 
FILE
 *
ö
;

1424 
z
[200];

1425 
	`sqlôe3_¢¥ötf
((
z
), z, "/¥oc/%d/io", 
	`gëpid
());

1426 
ö
 = 
	`f›í
(
z
, "rb");

1427 if–
ö
==0 ) ;

1428  
	`fgës
(
z
, (z), 
ö
)!=0 ){

1430 c⁄° *
zP©ã∫
;

1431 c⁄° *
zDesc
;

1432 } 
aTøns
[] = {

1441 
i
;

1442 
i
=0; i<
	`AºaySize
(
aTøns
); i++){

1443 
n
 = ()
	`°æí
(
aTøns
[
i
].
zP©ã∫
);

1444 if–
	`°∫cmp
(
aTøns
[
i
].
zP©ã∫
, 
z
, 
n
)==0 ){

1445 
	`øw_¥ötf
(
out
, "%-36†%s", 
aTøns
[
i
].
zDesc
, &
z
[
n
]);

1450 
	`f˛o£
(
ö
);

1451 
	}
}

1458 
	$di•œy_°©s
(

1459 
sqlôe3
 *
db
,

1460 
ShñlSèã
 *
pArg
,

1461 
bRe£t


1463 
iCur
;

1464 
iHiwå
;

1466 if–
pArg
 &&ÖArg->
out
 ){

1468 
iHiwå
 = 
iCur
 = -1;

1469 
	`sqlôe3_°©us
(
SQLITE_STATUS_MEMORY_USED
, &
iCur
, &
iHiwå
, 
bRe£t
);

1470 
	`øw_¥ötf
(
pArg
->
out
,

1472 
iCur
, 
iHiwå
);

1473 
iHiwå
 = 
iCur
 = -1;

1474 
	`sqlôe3_°©us
(
SQLITE_STATUS_MALLOC_COUNT
, &
iCur
, &
iHiwå
, 
bRe£t
);

1475 
	`øw_¥ötf
(
pArg
->
out
, "Number of Outstanding Allocations: %d (max %d)\n",

1476 
iCur
, 
iHiwå
);

1477 if–
pArg
->
shñlFlgs
 & 
SHFLG_Pageˇche
 ){

1478 
iHiwå
 = 
iCur
 = -1;

1479 
	`sqlôe3_°©us
(
SQLITE_STATUS_PAGECACHE_USED
, &
iCur
, &
iHiwå
, 
bRe£t
);

1480 
	`øw_¥ötf
(
pArg
->
out
,

1482 
iCur
, 
iHiwå
);

1484 
iHiwå
 = 
iCur
 = -1;

1485 
	`sqlôe3_°©us
(
SQLITE_STATUS_PAGECACHE_OVERFLOW
, &
iCur
, &
iHiwå
, 
bRe£t
);

1486 
	`øw_¥ötf
(
pArg
->
out
,

1488 
iCur
, 
iHiwå
);

1489 if–
pArg
->
shñlFlgs
 & 
SHFLG_S¸©ch
 ){

1490 
iHiwå
 = 
iCur
 = -1;

1491 
	`sqlôe3_°©us
(
SQLITE_STATUS_SCRATCH_USED
, &
iCur
, &
iHiwå
, 
bRe£t
);

1492 
	`øw_¥ötf
(
pArg
->
out
,

1494 
iCur
, 
iHiwå
);

1496 
iHiwå
 = 
iCur
 = -1;

1497 
	`sqlôe3_°©us
(
SQLITE_STATUS_SCRATCH_OVERFLOW
, &
iCur
, &
iHiwå
, 
bRe£t
);

1498 
	`øw_¥ötf
(
pArg
->
out
,

1500 
iCur
, 
iHiwå
);

1501 
iHiwå
 = 
iCur
 = -1;

1502 
	`sqlôe3_°©us
(
SQLITE_STATUS_MALLOC_SIZE
, &
iCur
, &
iHiwå
, 
bRe£t
);

1503 
	`øw_¥ötf
(
pArg
->
out
, "Largest Allocation: %d bytes\n",

1504 
iHiwå
);

1505 
iHiwå
 = 
iCur
 = -1;

1506 
	`sqlôe3_°©us
(
SQLITE_STATUS_PAGECACHE_SIZE
, &
iCur
, &
iHiwå
, 
bRe£t
);

1507 
	`øw_¥ötf
(
pArg
->
out
, "Largest Pcache Allocation: %d bytes\n",

1508 
iHiwå
);

1509 
iHiwå
 = 
iCur
 = -1;

1510 
	`sqlôe3_°©us
(
SQLITE_STATUS_SCRATCH_SIZE
, &
iCur
, &
iHiwå
, 
bRe£t
);

1511 
	`øw_¥ötf
(
pArg
->
out
, "Largest Scratch Allocation: %d bytes\n",

1512 
iHiwå
);

1513 #ifde‡
YYTRACKMAXSTACKDEPTH


1514 
iHiwå
 = 
iCur
 = -1;

1515 
	`sqlôe3_°©us
(
SQLITE_STATUS_PARSER_STACK
, &
iCur
, &
iHiwå
, 
bRe£t
);

1516 
	`øw_¥ötf
(
pArg
->
out
, "Deepest Parser Stack: %d (max %d)\n",

1517 
iCur
, 
iHiwå
);

1521 if–
pArg
 &&ÖArg->
out
 && 
db
 ){

1522 if–
pArg
->
shñlFlgs
 & 
SHFLG_Lookaside
 ){

1523 
iHiwå
 = 
iCur
 = -1;

1524 
	`sqlôe3_db_°©us
(
db
, 
SQLITE_DBSTATUS_LOOKASIDE_USED
,

1525 &
iCur
, &
iHiwå
, 
bRe£t
);

1526 
	`øw_¥ötf
(
pArg
->
out
,

1528 
iCur
, 
iHiwå
);

1529 
	`sqlôe3_db_°©us
(
db
, 
SQLITE_DBSTATUS_LOOKASIDE_HIT
,

1530 &
iCur
, &
iHiwå
, 
bRe£t
);

1531 
	`øw_¥ötf
(
pArg
->
out
, "SuccessfulÜookasideáttempts: %d\n",

1532 
iHiwå
);

1533 
	`sqlôe3_db_°©us
(
db
, 
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE
,

1534 &
iCur
, &
iHiwå
, 
bRe£t
);

1535 
	`øw_¥ötf
(
pArg
->
out
, "Lookaside failures dueÅo size: %d\n",

1536 
iHiwå
);

1537 
	`sqlôe3_db_°©us
(
db
, 
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL
,

1538 &
iCur
, &
iHiwå
, 
bRe£t
);

1539 
	`øw_¥ötf
(
pArg
->
out
, "Lookaside failures dueÅo OOM: %d\n",

1540 
iHiwå
);

1542 
iHiwå
 = 
iCur
 = -1;

1543 
	`sqlôe3_db_°©us
(
db
, 
SQLITE_DBSTATUS_CACHE_USED
, &
iCur
, &
iHiwå
, 
bRe£t
);

1544 
	`øw_¥ötf
(
pArg
->
out
, "Pager Heap Usage: %d bytes\n",

1545 
iCur
);

1546 
iHiwå
 = 
iCur
 = -1;

1547 
	`sqlôe3_db_°©us
(
db
, 
SQLITE_DBSTATUS_CACHE_HIT
, &
iCur
, &
iHiwå
, 1);

1548 
	`øw_¥ötf
(
pArg
->
out
, "Pagêˇchêhôs: %d\n", 
iCur
);

1549 
iHiwå
 = 
iCur
 = -1;

1550 
	`sqlôe3_db_°©us
(
db
, 
SQLITE_DBSTATUS_CACHE_MISS
, &
iCur
, &
iHiwå
, 1);

1551 
	`øw_¥ötf
(
pArg
->
out
, "Pagêˇchêmis£s: %d\n", 
iCur
);

1552 
iHiwå
 = 
iCur
 = -1;

1553 
	`sqlôe3_db_°©us
(
db
, 
SQLITE_DBSTATUS_CACHE_WRITE
, &
iCur
, &
iHiwå
, 1);

1554 
	`øw_¥ötf
(
pArg
->
out
, "Pagêˇchêwrôes: %d\n", 
iCur
);

1555 
iHiwå
 = 
iCur
 = -1;

1556 
	`sqlôe3_db_°©us
(
db
, 
SQLITE_DBSTATUS_SCHEMA_USED
, &
iCur
, &
iHiwå
, 
bRe£t
);

1557 
	`øw_¥ötf
(
pArg
->
out
, "Schema Heap Usage: %d bytes\n",

1558 
iCur
);

1559 
iHiwå
 = 
iCur
 = -1;

1560 
	`sqlôe3_db_°©us
(
db
, 
SQLITE_DBSTATUS_STMT_USED
, &
iCur
, &
iHiwå
, 
bRe£t
);

1561 
	`øw_¥ötf
(
pArg
->
out
, "Statement Heap/Lookaside Usage: %d bytes\n",

1562 
iCur
);

1565 if–
pArg
 &&ÖArg->
out
 && 
db
 &&ÖArg->
pStmt
 ){

1566 
iCur
 = 
	`sqlôe3_°mt_°©us
(
pArg
->
pStmt
, 
SQLITE_STMTSTATUS_FULLSCAN_STEP
,

1567 
bRe£t
);

1568 
	`øw_¥ötf
(
pArg
->
out
, "FuŒsˇ¿Sãps: %d\n", 
iCur
);

1569 
iCur
 = 
	`sqlôe3_°mt_°©us
(
pArg
->
pStmt
, 
SQLITE_STMTSTATUS_SORT
, 
bRe£t
);

1570 
	`øw_¥ötf
(
pArg
->
out
, "S‹àO≥øti⁄s: %d\n", 
iCur
);

1571 
iCur
 = 
	`sqlôe3_°mt_°©us
(
pArg
->
pStmt
, 
SQLITE_STMTSTATUS_AUTOINDEX
,
bRe£t
);

1572 
	`øw_¥ötf
(
pArg
->
out
, "Autoödex In£πs: %d\n", 
iCur
);

1573 
iCur
 = 
	`sqlôe3_°mt_°©us
(
pArg
->
pStmt
, 
SQLITE_STMTSTATUS_VM_STEP
, 
bRe£t
);

1574 
	`øw_¥ötf
(
pArg
->
out
, "VútuÆ MachöêSãps: %d\n", 
iCur
);

1577 #ifde‡
__löux__


1578 
	`di•œyLöuxIoSèts
(
pArg
->
out
);

1584 
	}
}

1589 
	$di•œy_sˇn°©s
(

1590 
sqlôe3
 *
db
,

1591 
ShñlSèã
 *
pArg


1593 #i‚de‡
SQLITE_ENABLE_STMT_SCANSTATUS


1594 
	`UNUSED_PARAMETER
(
db
);

1595 
	`UNUSED_PARAMETER
(
pArg
);

1597 
i
, 
k
, 
n
, 
mx
;

1598 
	`øw_¥ötf
(
pArg
->
out
, "-------- scanstats --------\n");

1599 
mx
 = 0;

1600 
k
=0; k<=
mx
; k++){

1601 
rE°Lo›
 = 1.0;

1602 
i
=
n
=0; 1; i++){

1603 
sqlôe3_°mt
 *
p
 = 
pArg
->
pStmt
;

1604 
sqlôe3_öt64
 
nLo›
, 
nVisô
;

1605 
rE°
;

1606 
iSid
;

1607 c⁄° *
zEx∂aö
;

1608 if–
	`sqlôe3_°mt_sˇn°©us
(
p
, 
i
, 
SQLITE_SCANSTAT_NLOOP
, (*)&
nLo›
) ){

1611 
	`sqlôe3_°mt_sˇn°©us
(
p
, 
i
, 
SQLITE_SCANSTAT_SELECTID
, (*)&
iSid
);

1612 if–
iSid
>
mx
 ) mx = iSid;

1613 if–
iSid
!=
k
 ) ;

1614 if–
n
==0 ){

1615 
rE°Lo›
 = ()
nLo›
;

1616 if–
k
>0 ) 
	`øw_¥ötf
(
pArg
->
out
, "-------- subquery %d -------\n", k);

1618 
n
++;

1619 
	`sqlôe3_°mt_sˇn°©us
(
p
, 
i
, 
SQLITE_SCANSTAT_NVISIT
, (*)&
nVisô
);

1620 
	`sqlôe3_°mt_sˇn°©us
(
p
, 
i
, 
SQLITE_SCANSTAT_EST
, (*)&
rE°
);

1621 
	`sqlôe3_°mt_sˇn°©us
(
p
, 
i
, 
SQLITE_SCANSTAT_EXPLAIN
, (*)&
zEx∂aö
);

1622 
	`utf8_¥ötf
(
pArg
->
out
, "Lo› %2d: %s\n", 
n
, 
zEx∂aö
);

1623 
rE°Lo›
 *
rE°
;

1624 
	`øw_¥ötf
(
pArg
->
out
,

1626 
nLo›
, 
nVisô
, (
sqlôe3_öt64
)(
rE°Lo›
+0.5), 
rE°


1630 
	`øw_¥ötf
(
pArg
->
out
, "---------------------------\n");

1632 
	}
}

1640 
	$°r_ö_¨øy
(c⁄° *
zSå
, c⁄° **
azAºay
){

1641 
i
;

1642 
i
=0; 
azAºay
[i]; i++){

1643 if–0==
	`°rcmp
(
zSå
, 
azAºay
[
i
]) )  1;

1646 
	}
}

1666 
	$ex∂aö_d©a_¥ï¨e
(
ShñlSèã
 *
p
, 
sqlôe3_°mt
 *
pSql
){

1667 c⁄° *
zSql
;

1668 c⁄° *
z
;

1669 *
abYõld
 = 0;

1670 
nAŒoc
 = 0;

1671 
iOp
;

1673 c⁄° *
azNext
[] = { "Next", "Prev", "VPrev", "VNext", "SorterNext",

1675 c⁄° *
azYõld
[] = { "Yield", "SeekLT", "SeekGT", "RowSetRead",

1677 c⁄° *
azGŸo
[] = { "Goto", 0 };

1681 if–
	`sqlôe3_cﬁumn_cou¡
(
pSql
)!=8 ){

1682 
p
->
cMode
 =Ö->
mode
;

1685 
zSql
 = 
	`sqlôe3_sql
(
pSql
);

1686 if–
zSql
==0 ) ;

1687 
z
=
zSql
; *z==' ' || *z=='\t' || *z=='\n' || *z=='\f' || *z=='\r'; z++);

1688 if–
	`sqlôe3_°∫icmp
(
z
, "explain", 7) ){

1689 
p
->
cMode
 =Ö->
mode
;

1693 
iOp
=0; 
SQLITE_ROW
==
	`sqlôe3_°ï
(
pSql
); iOp++){

1694 
i
;

1695 
iAddr
 = 
	`sqlôe3_cﬁumn_öt
(
pSql
, 0);

1696 c⁄° *
zOp
 = (c⁄° *)
	`sqlôe3_cﬁumn_ãxt
(
pSql
, 1);

1703 
p2
 = 
	`sqlôe3_cﬁumn_öt
(
pSql
, 3);

1704 
p2›
 = (
p2
 + (
iOp
-
iAddr
));

1707 if–
iOp
>=
nAŒoc
 ){

1708 if–
iOp
==0 ){

1711 c⁄° *
ex∂aöCﬁs
[] = {

1713 
jj
;

1714 
jj
=0; jj<
	`AºaySize
(
ex∂aöCﬁs
); jj++){

1715 if–
	`°rcmp
(
	`sqlôe3_cﬁumn_«me
(
pSql
,
jj
),
ex∂aöCﬁs
[jj])!=0 ){

1716 
p
->
cMode
 =Ö->
mode
;

1717 
	`sqlôe3_ª£t
(
pSql
);

1722 
nAŒoc
 += 100;

1723 
p
->
aiIndít
 = (*)
	`sqlôe3_ªÆloc64
’->aiIndít, 
nAŒoc
*());

1724 
abYõld
 = (*)
	`sqlôe3_ªÆloc64
◊bYõld, 
nAŒoc
*());

1726 
abYõld
[
iOp
] = 
	`°r_ö_¨øy
(
zOp
, 
azYõld
);

1727 
p
->
aiIndít
[
iOp
] = 0;

1728 
p
->
nIndít
 = 
iOp
+1;

1730 if–
	`°r_ö_¨øy
(
zOp
, 
azNext
) ){

1731 
i
=
p2›
; i<
iOp
; i++Ë
p
->
aiIndít
[i] += 2;

1733 if–
	`°r_ö_¨øy
(
zOp
, 
azGŸo
Ë&& 
p2›
<
p
->
nIndít


1734 && (
abYõld
[
p2›
] || 
	`sqlôe3_cﬁumn_öt
(
pSql
, 2))

1736 
i
=
p2›
; i<
iOp
; i++Ë
p
->
aiIndít
[i] += 2;

1740 
p
->
iIndít
 = 0;

1741 
	`sqlôe3_‰ì
(
abYõld
);

1742 
	`sqlôe3_ª£t
(
pSql
);

1743 
	}
}

1748 
	$ex∂aö_d©a_dñëe
(
ShñlSèã
 *
p
){

1749 
	`sqlôe3_‰ì
(
p
->
aiIndít
);

1750 
p
->
aiIndít
 = 0;

1751 
p
->
nIndít
 = 0;

1752 
p
->
iIndít
 = 0;

1753 
	}
}

1758 #i‡
deföed
(
SQLITE_DEBUG
Ë&& deföed(
SQLITE_ENABLE_SELECTTRACE
)

1759 
sqlôe3Sñe˘Tø˚
;

1760 
	gßvedSñe˘Tø˚
;

1762 #i‡
deföed
(
SQLITE_DEBUG
Ë&& deföed(
SQLITE_ENABLE_WHERETRACE
)

1763 
sqlôe3WhîeTø˚
;

1764 
	gßvedWhîeTø˚
;

1766 
	$dißbÀ_debug_åa˚_modes
(){

1767 #i‡
	`deföed
(
SQLITE_DEBUG
Ë&& deföed(
SQLITE_ENABLE_SELECTTRACE
)

1768 
ßvedSñe˘Tø˚
 = 
sqlôe3Sñe˘Tø˚
;

1769 
sqlôe3Sñe˘Tø˚
 = 0;

1771 #i‡
	`deföed
(
SQLITE_DEBUG
Ë&& deföed(
SQLITE_ENABLE_WHERETRACE
)

1772 
ßvedWhîeTø˚
 = 
sqlôe3WhîeTø˚
;

1773 
sqlôe3WhîeTø˚
 = 0;

1775 
	}
}

1776 
	$ª°‹e_debug_åa˚_modes
(){

1777 #i‡
	`deföed
(
SQLITE_DEBUG
Ë&& deföed(
SQLITE_ENABLE_SELECTTRACE
)

1778 
sqlôe3Sñe˘Tø˚
 = 
ßvedSñe˘Tø˚
;

1780 #i‡
	`deföed
(
SQLITE_DEBUG
Ë&& deföed(
SQLITE_ENABLE_WHERETRACE
)

1781 
sqlôe3WhîeTø˚
 = 
ßvedWhîeTø˚
;

1783 
	}
}

1788 
exec_¥ï¨ed_°mt
(

1789 
ShñlSèã
 *
pArg
,

1790 
sqlôe3_°mt
 *
pStmt
,

1791 (*
xCÆlback
)(*,,**,**,*)

1793 
rc
;

1798 
rc
 = 
	`sqlôe3_°ï
(
pStmt
);

1800 if–
SQLITE_ROW
 =
rc
 ){

1802 if–
xCÆlback
 ){

1804 
nCﬁ
 = 
	`sqlôe3_cﬁumn_cou¡
(
pStmt
);

1805 *
pD©a
 = 
	`sqlôe3_mÆloc64
(3*
nCﬁ
*(const *) + 1);

1806 if–!
pD©a
 ){

1807 
rc
 = 
SQLITE_NOMEM
;

1809 **
azCﬁs
 = (**)
pD©a
;

1810 **
azVÆs
 = &
azCﬁs
[
nCﬁ
];

1811 *
aiTy≥s
 = (*)&
azVÆs
[
nCﬁ
];

1812 
i
, 
x
;

1813 
	`as£π
(() <= (*));

1815 
i
=0; i<
nCﬁ
; i++){

1816 
azCﬁs
[
i
] = (*)
	`sqlôe3_cﬁumn_«me
(
pStmt
, i);

1820 
i
=0; i<
nCﬁ
; i++){

1821 
aiTy≥s
[
i
] = 
x
 = 
	`sqlôe3_cﬁumn_ty≥
(
pStmt
, i);

1822 if–
x
==
SQLITE_BLOB
 && 
pArg
 &&ÖArg->
cMode
==
MODE_In£π
 ){

1823 
azVÆs
[
i
] = "";

1825 
azVÆs
[
i
] = (*)
	`sqlôe3_cﬁumn_ãxt
(
pStmt
, i);

1827 if–!
azVÆs
[
i
] && (
aiTy≥s
[i]!=
SQLITE_NULL
) ){

1828 
rc
 = 
SQLITE_NOMEM
;

1834 if–
SQLITE_ROW
 =
rc
 ){

1836 if–
	`xCÆlback
(
pArg
, 
nCﬁ
, 
azVÆs
, 
azCﬁs
, 
aiTy≥s
) ){

1837 
rc
 = 
SQLITE_ABORT
;

1839 
rc
 = 
	`sqlôe3_°ï
(
pStmt
);

1842 }  
SQLITE_ROW
 =
rc
 );

1843 
	`sqlôe3_‰ì
(
pD©a
);

1847 
rc
 = 
	`sqlôe3_°ï
(
pStmt
);

1848 }  
rc
 =
SQLITE_ROW
 );

1851 
	}
}

1862 
shñl_exec
(

1863 
sqlôe3
 *
db
,

1864 c⁄° *
zSql
,

1865 (*
xCÆlback
)(*,,**,**,*),

1867 
ShñlSèã
 *
pArg
,

1868 **
pzEºMsg


1870 
sqlôe3_°mt
 *
pStmt
 = 
NULL
;

1871 
rc
 = 
SQLITE_OK
;

1872 
rc2
;

1873 c⁄° *
zLe·ovî
;

1875 if–
pzEºMsg
 ){

1876 *
pzEºMsg
 = 
NULL
;

1879  
zSql
[0] && (
SQLITE_OK
 =
rc
) ){

1880 c⁄° *
zStmtSql
;

1881 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
db
, 
zSql
, -1, &
pStmt
, &
zLe·ovî
);

1882 if–
SQLITE_OK
 !
rc
 ){

1883 if–
pzEºMsg
 ){

1884 *
pzEºMsg
 = 
	`ßve_îr_msg
(
db
);

1887 if–!
pStmt
 ){

1889 
zSql
 = 
zLe·ovî
;

1890  
	`IsS∑˚
(
zSql
[0]) ) zSql++;

1893 
zStmtSql
 = 
	`sqlôe3_sql
(
pStmt
);

1894  
	`IsS∑˚
(
zStmtSql
[0]) ) zStmtSql++;

1897 if–
pArg
 ){

1898 
pArg
->
pStmt
 =ÖStmt;

1899 
pArg
->
˙t
 = 0;

1903 if–
pArg
 &&ÖArg->
echoOn
 ){

1904 
	`utf8_¥ötf
(
pArg
->
out
, "%s\n", 
zStmtSql
 ? zStmtSq»: 
zSql
);

1908 if–
pArg
 &&ÖArg->
autoEQP
 && 
	`sqlôe3_°æike
("EXPLAIN%",
zStmtSql
,0)!=0 ){

1909 
sqlôe3_°mt
 *
pEx∂aö
;

1910 *
zEQP
;

1911 
	`dißbÀ_debug_åa˚_modes
();

1912 
zEQP
 = 
	`sqlôe3_m¥ötf
("EXPLAIN QUERY PLAN %s", 
zStmtSql
);

1913 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
db
, 
zEQP
, -1, &
pEx∂aö
, 0);

1914 if–
rc
==
SQLITE_OK
 ){

1915  
	`sqlôe3_°ï
(
pEx∂aö
)==
SQLITE_ROW
 ){

1916 
	`øw_¥ötf
(
pArg
->
out
,"--EQP-- %d,",
	`sqlôe3_cﬁumn_öt
(
pEx∂aö
, 0));

1917 
	`øw_¥ötf
(
pArg
->
out
,"%d,", 
	`sqlôe3_cﬁumn_öt
(
pEx∂aö
, 1));

1918 
	`øw_¥ötf
(
pArg
->
out
,"%d,", 
	`sqlôe3_cﬁumn_öt
(
pEx∂aö
, 2));

1919 
	`utf8_¥ötf
(
pArg
->
out
,"%s\n", 
	`sqlôe3_cﬁumn_ãxt
(
pEx∂aö
, 3));

1922 
	`sqlôe3_föÆize
(
pEx∂aö
);

1923 
	`sqlôe3_‰ì
(
zEQP
);

1924 if–
pArg
->
autoEQP
>=2 ){

1926 
zEQP
 = 
	`sqlôe3_m¥ötf
("EXPLAIN %s", 
zStmtSql
);

1927 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
db
, 
zEQP
, -1, &
pEx∂aö
, 0);

1928 if–
rc
==
SQLITE_OK
 ){

1929 
pArg
->
cMode
 = 
MODE_Ex∂aö
;

1930 
	`ex∂aö_d©a_¥ï¨e
(
pArg
, 
pEx∂aö
);

1931 
	`exec_¥ï¨ed_°mt
(
pArg
, 
pEx∂aö
, 
xCÆlback
);

1932 
	`ex∂aö_d©a_dñëe
(
pArg
);

1934 
	`sqlôe3_föÆize
(
pEx∂aö
);

1935 
	`sqlôe3_‰ì
(
zEQP
);

1937 
	`ª°‹e_debug_åa˚_modes
();

1940 if–
pArg
 ){

1941 
pArg
->
cMode
 =ÖArg->
mode
;

1942 if–
pArg
->
autoEx∂aö


1943 && 
	`sqlôe3_cﬁumn_cou¡
(
pStmt
)==8

1944 && 
	`sqlôe3_°æike
("EXPLAIN%", 
zStmtSql
,0)==0

1946 
pArg
->
cMode
 = 
MODE_Ex∂aö
;

1951 if–
pArg
->
cMode
==
MODE_Ex∂aö
 ){

1952 
	`ex∂aö_d©a_¥ï¨e
(
pArg
, 
pStmt
);

1956 
	`exec_¥ï¨ed_°mt
(
pArg
, 
pStmt
, 
xCÆlback
);

1957 
	`ex∂aö_d©a_dñëe
(
pArg
);

1960 if–
pArg
 &&ÖArg->
°©sOn
 ){

1961 
	`di•œy_°©s
(
db
, 
pArg
, 0);

1965 if–
pArg
 &&ÖArg->
sˇn°©sOn
 ){

1966 
	`di•œy_sˇn°©s
(
db
, 
pArg
);

1972 
rc2
 = 
	`sqlôe3_föÆize
(
pStmt
);

1973 if–
rc
!=
SQLITE_NOMEM
 )Ñ¯
rc2
;

1974 if–
rc
==
SQLITE_OK
 ){

1975 
zSql
 = 
zLe·ovî
;

1976  
	`IsS∑˚
(
zSql
[0]) ) zSql++;

1977 }if–
pzEºMsg
 ){

1978 *
pzEºMsg
 = 
	`ßve_îr_msg
(
db
);

1982 if–
pArg
 ){

1983 
pArg
->
pStmt
 = 
NULL
;

1988  
rc
;

1989 
	}
}

1998 
	$dump_ˇŒback
(*
pArg
, 
nArg
, **
azArg
, **
azCﬁ
){

1999 
rc
;

2000 c⁄° *
zTabÀ
;

2001 c⁄° *
zTy≥
;

2002 c⁄° *
zSql
;

2003 c⁄° *
zPªpStmt
 = 0;

2004 
ShñlSèã
 *
p
 = (ShñlSèã *)
pArg
;

2006 
	`UNUSED_PARAMETER
(
azCﬁ
);

2007 if–
nArg
!=3 )  1;

2008 
zTabÀ
 = 
azArg
[0];

2009 
zTy≥
 = 
azArg
[1];

2010 
zSql
 = 
azArg
[2];

2012 if–
	`°rcmp
(
zTabÀ
, "sqlite_sequence")==0 ){

2013 
zPªpStmt
 = "DELETE FROM sqlite_sequence;\n";

2014 }if–
	`sqlôe3_°rglob
("sqlôe_°©?", 
zTabÀ
)==0 ){

2015 
	`øw_¥ötf
(
p
->
out
, "ANALYZE sqlite_master;\n");

2016 }if–
	`°∫cmp
(
zTabÀ
, "sqlite_", 7)==0 ){

2018 }if–
	`°∫cmp
(
zSql
, "CREATE VIRTUAL TABLE", 20)==0 ){

2019 *
zIns
;

2020 if–!
p
->
wrôabÀSchema
 ){

2021 
	`øw_¥ötf
(
p
->
out
, "PRAGMA writable_schema=ON;\n");

2022 
p
->
wrôabÀSchema
 = 1;

2024 
zIns
 = 
	`sqlôe3_m¥ötf
(

2027 
zTabÀ
, zTabÀ, 
zSql
);

2028 
	`utf8_¥ötf
(
p
->
out
, "%s\n", 
zIns
);

2029 
	`sqlôe3_‰ì
(
zIns
);

2032 
	`utf8_¥ötf
(
p
->
out
, "%s;\n", 
zSql
);

2035 if–
	`°rcmp
(
zTy≥
, "table")==0 ){

2036 
sqlôe3_°mt
 *
pTabÀInfo
 = 0;

2037 *
zSñe˘
 = 0;

2038 *
zTabÀInfo
 = 0;

2039 *
zTmp
 = 0;

2040 
nRow
 = 0;

2042 
zTabÀInfo
 = 
	`≠≥ndText
(zTableInfo, "PRAGMAÅable_info(", 0);

2043 
zTabÀInfo
 = 
	`≠≥ndText
(zTabÀInfo, 
zTabÀ
, '"');

2044 
zTabÀInfo
 = 
	`≠≥ndText
(zTableInfo, ");", 0);

2046 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
p
->
db
, 
zTabÀInfo
, -1, &
pTabÀInfo
, 0);

2047 
	`‰ì
(
zTabÀInfo
);

2048 if–
rc
!=
SQLITE_OK
 || !
pTabÀInfo
 ){

2052 
zSñe˘
 = 
	`≠≥ndText
(zSelect, "SELECT 'INSERT INTO ' || ", 0);

2055 
zTmp
 = 
	`≠≥ndText
(zTmp, 
zTabÀ
, '"');

2056 if–
zTmp
 ){

2057 
zSñe˘
 = 
	`≠≥ndText
(zSñe˘, 
zTmp
, '\'');

2058 
	`‰ì
(
zTmp
);

2060 
zSñe˘
 = 
	`≠≥ndText
(zSelect, " || ' VALUES(' || ", 0);

2061 
rc
 = 
	`sqlôe3_°ï
(
pTabÀInfo
);

2062  
rc
==
SQLITE_ROW
 ){

2063 c⁄° *
zText
 = (c⁄° *)
	`sqlôe3_cﬁumn_ãxt
(
pTabÀInfo
, 1);

2064 
zSñe˘
 = 
	`≠≥ndText
(zSelect, "quote(", 0);

2065 
zSñe˘
 = 
	`≠≥ndText
(zSñe˘, 
zText
, '"');

2066 
rc
 = 
	`sqlôe3_°ï
(
pTabÀInfo
);

2067 if–
rc
==
SQLITE_ROW
 ){

2068 
zSñe˘
 = 
	`≠≥ndText
(zSelect, "), ", 0);

2070 
zSñe˘
 = 
	`≠≥ndText
(zSelect, ") ", 0);

2072 
nRow
++;

2074 
rc
 = 
	`sqlôe3_föÆize
(
pTabÀInfo
);

2075 if–
rc
!=
SQLITE_OK
 || 
nRow
==0 ){

2076 
	`‰ì
(
zSñe˘
);

2079 
zSñe˘
 = 
	`≠≥ndText
(zSelect, "|| ')' FROM ", 0);

2080 
zSñe˘
 = 
	`≠≥ndText
(zSñe˘, 
zTabÀ
, '"');

2082 
rc
 = 
	`run_èbÀ_dump_quîy
(
p
, 
zSñe˘
, 
zPªpStmt
);

2083 if–
rc
==
SQLITE_CORRUPT
 ){

2084 
zSñe˘
 = 
	`≠≥ndText
(zSelect, " ORDER BYÑowid DESC", 0);

2085 
	`run_èbÀ_dump_quîy
(
p
, 
zSñe˘
, 0);

2087 
	`‰ì
(
zSñe˘
);

2090 
	}
}

2099 
	$run_schema_dump_quîy
(

2100 
ShñlSèã
 *
p
,

2101 c⁄° *
zQuîy


2103 
rc
;

2104 *
zEº
 = 0;

2105 
rc
 = 
	`sqlôe3_exec
(
p
->
db
, 
zQuîy
, 
dump_ˇŒback
,Ö, &
zEº
);

2106 if–
rc
==
SQLITE_CORRUPT
 ){

2107 *
zQ2
;

2108 
Àn
 = 
	`°æí30
(
zQuîy
);

2109 
	`øw_¥ötf
(
p
->
out
, "/****** CORRUPTION ERROR *******/\n");

2110 if–
zEº
 ){

2111 
	`utf8_¥ötf
(
p
->
out
, "/****** %†******/\n", 
zEº
);

2112 
	`sqlôe3_‰ì
(
zEº
);

2113 
zEº
 = 0;

2115 
zQ2
 = 
	`mÆloc
–
Àn
+100 );

2116 if–
zQ2
==0 )  
rc
;

2117 
	`sqlôe3_¢¥ötf
(
Àn
+100, 
zQ2
, "%†ORDER BYÑowid DESC", 
zQuîy
);

2118 
rc
 = 
	`sqlôe3_exec
(
p
->
db
, 
zQ2
, 
dump_ˇŒback
,Ö, &
zEº
);

2119 if–
rc
 ){

2120 
	`utf8_¥ötf
(
p
->
out
, "/****** ERROR: %†******/\n", 
zEº
);

2122 
rc
 = 
SQLITE_CORRUPT
;

2124 
	`sqlôe3_‰ì
(
zEº
);

2125 
	`‰ì
(
zQ2
);

2127  
rc
;

2128 
	}
}

2133 
	gzHñp
[] =

2156 #ifde‡
SQLITE_ENABLE_IOTRACE


2160 #i‚de‡
SQLITE_OMIT_LOAD_EXTENSION


2189 #i‡
deföed
(
SQLITE_ENABLE_SESSION
)

2209 #i‡
deföed
(
SQLITE_ENABLE_SESSION
)

2213 
	$£ssi⁄_hñp
(
ShñlSèã
 *
p
){

2214 
	`øw_¥ötf
(
p
->
out
,

2229 
	}
}

2234 
¥o˚ss_öput
(
ShñlSèã
 *
p
, 
FILE
 *
ö
);

2240 
	$ªadfûeFunc
(

2241 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

2242 
¨gc
,

2243 
sqlôe3_vÆue
 **
¨gv


2245 c⁄° *
zName
;

2246 
FILE
 *
ö
;

2247 
nIn
;

2248 *
pBuf
;

2250 
	`UNUSED_PARAMETER
(
¨gc
);

2251 
zName
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

2252 if–
zName
==0 ) ;

2253 
ö
 = 
	`f›í
(
zName
, "rb");

2254 if–
ö
==0 ) ;

2255 
	`f£ek
(
ö
, 0, 
SEEK_END
);

2256 
nIn
 = 
	`·ñl
(
ö
);

2257 
	`ªwöd
(
ö
);

2258 
pBuf
 = 
	`sqlôe3_mÆloc64
–
nIn
 );

2259 if–
pBuf
 && 1==
	`‰ód
’Buf, 
nIn
, 1, 
ö
) ){

2260 
	`sqlôe3_ªsu…_blob
(
c⁄ãxt
, 
pBuf
, 
nIn
, 
sqlôe3_‰ì
);

2262 
	`sqlôe3_‰ì
(
pBuf
);

2264 
	`f˛o£
(
ö
);

2265 
	}
}

2273 
	$wrôefûeFunc
(

2274 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

2275 
¨gc
,

2276 
sqlôe3_vÆue
 **
¨gv


2278 
FILE
 *
out
;

2279 c⁄° *
z
;

2280 
sqlôe3_öt64
 
rc
;

2281 c⁄° *
zFûe
;

2283 
	`UNUSED_PARAMETER
(
¨gc
);

2284 
zFûe
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

2285 if–
zFûe
==0 ) ;

2286 
out
 = 
	`f›í
(
zFûe
, "wb");

2287 if–
out
==0 ) ;

2288 
z
 = (c⁄° *)
	`sqlôe3_vÆue_blob
(
¨gv
[1]);

2289 if–
z
==0 ){

2290 
rc
 = 0;

2292 
rc
 = 
	`fwrôe
(
z
, 1, 
	`sqlôe3_vÆue_byãs
(
¨gv
[1]), 
out
);

2294 
	`f˛o£
(
out
);

2295 
	`sqlôe3_ªsu…_öt64
(
c⁄ãxt
, 
rc
);

2296 
	}
}

2298 #i‡
deföed
(
SQLITE_ENABLE_SESSION
)

2303 
	$£ssi⁄_˛o£
(
O≥nSessi⁄
 *
pSessi⁄
){

2304 
i
;

2305 
	`sqlôe3£ssi⁄_dñëe
(
pSessi⁄
->
p
);

2306 
	`sqlôe3_‰ì
(
pSessi⁄
->
zName
);

2307 
i
=0; i<
pSessi⁄
->
nFûãr
; i++){

2308 
	`sqlôe3_‰ì
(
pSessi⁄
->
azFûãr
[
i
]);

2310 
	`sqlôe3_‰ì
(
pSessi⁄
->
azFûãr
);

2311 
	`mem£t
(
pSessi⁄
, 0, (
O≥nSessi⁄
));

2312 
	}
}

2318 #i‡
deföed
(
SQLITE_ENABLE_SESSION
)

2319 
	$£ssi⁄_˛o£_Æl
(
ShñlSèã
 *
p
){

2320 
i
;

2321 
i
=0; i<
p
->
nSessi⁄
; i++){

2322 
	`£ssi⁄_˛o£
(&
p
->
aSessi⁄
[
i
]);

2324 
p
->
nSessi⁄
 = 0;

2325 
	}
}

2327 
	#£ssi⁄_˛o£_Æl
(
X
)

	)

2334 #i‡
deföed
(
SQLITE_ENABLE_SESSION
)

2335 
	$£ssi⁄_fûãr
(*
pCtx
, c⁄° *
zTab
){

2336 
O≥nSessi⁄
 *
pSessi⁄
 = (O≥nSessi⁄*)
pCtx
;

2337 
i
;

2338 
i
=0; i<
pSessi⁄
->
nFûãr
; i++){

2339 if–
	`sqlôe3_°rglob
(
pSessi⁄
->
azFûãr
[
i
], 
zTab
)==0 )  0;

2342 
	}
}

2349 
	$›í_db
(
ShñlSèã
 *
p
, 
kìpAlive
){

2350 if–
p
->
db
==0 ){

2351 
	`sqlôe3_öôülize
();

2352 
	`sqlôe3_›í
(
p
->
zDbFûíame
, &p->
db
);

2353 
globÆDb
 = 
p
->
db
;

2354 if–
p
->
db
 && 
	`sqlôe3_îrcode
’->db)==
SQLITE_OK
 ){

2355 
	`sqlôe3_¸óã_fun˘i⁄
(
p
->
db
, "shñl°©ic", 0, 
SQLITE_UTF8
, 0,

2356 
shñl°©icFunc
, 0, 0);

2358 if–
p
->
db
==0 || 
SQLITE_OK
!=
	`sqlôe3_îrcode
(p->db) ){

2359 
	`utf8_¥ötf
(
°dîr
,"Error: unableÅo open database \"%s\": %s\n",

2360 
p
->
zDbFûíame
, 
	`sqlôe3_îrmsg
’->
db
));

2361 if–
kìpAlive
 ) ;

2362 
	`exô
(1);

2364 #i‚de‡
SQLITE_OMIT_LOAD_EXTENSION


2365 
	`sqlôe3_íabÀ_lﬂd_exãnsi⁄
(
p
->
db
, 1);

2367 
	`sqlôe3_¸óã_fun˘i⁄
(
p
->
db
, "ªadfûe", 1, 
SQLITE_UTF8
, 0,

2368 
ªadfûeFunc
, 0, 0);

2369 
	`sqlôe3_¸óã_fun˘i⁄
(
p
->
db
, "wrôefûe", 2, 
SQLITE_UTF8
, 0,

2370 
wrôefûeFunc
, 0, 0);

2372 
	}
}

2390 
	$ªsﬁve_back¶ashes
(*
z
){

2391 
i
, 
j
;

2392 
c
;

2393  *
z
 && *z!='\\' ) z++;

2394 
i
=
j
=0; (
c
 = 
z
[i])!=0; i++, j++){

2395 if–
c
=='\\' && 
z
[
i
+1]!=0 ){

2396 
c
 = 
z
[++
i
];

2397 if–
c
=='a' ){

2398 
c
 = '\a';

2399 }if–
c
=='b' ){

2400 
c
 = '\b';

2401 }if–
c
=='t' ){

2402 
c
 = '\t';

2403 }if–
c
=='n' ){

2404 
c
 = '\n';

2405 }if–
c
=='v' ){

2406 
c
 = '\v';

2407 }if–
c
=='f' ){

2408 
c
 = '\f';

2409 }if–
c
=='r' ){

2410 
c
 = '\r';

2411 }if–
c
=='"' ){

2412 
c
 = '"';

2413 }if–
c
=='\'' ){

2414 
c
 = '\'';

2415 }if–
c
=='\\' ){

2416 
c
 = '\\';

2417 }if–
c
>='0' && c<='7' ){

2418 
c
 -= '0';

2419 if–
z
[
i
+1]>='0' && z[i+1]<='7' ){

2420 
i
++;

2421 
c
 = (c<<3Ë+ 
z
[
i
] - '0';

2422 if–
z
[
i
+1]>='0' && z[i+1]<='7' ){

2423 
i
++;

2424 
c
 = (c<<3Ë+ 
z
[
i
] - '0';

2429 
z
[
j
] = 
c
;

2431 if–
j
<
i
 ) 
z
[j] = 0;

2432 
	}
}

2438 
	$hexDigôVÆue
(
c
){

2439 if–
c
>='0' && c<='9' )  c - '0';

2440 if–
c
>='a' && c<='f' )  c - 'a' + 10;

2441 if–
c
>='A' && c<='F' )  c - 'A' + 10;

2443 
	}
}

2448 
sqlôe3_öt64
 
	$öãgîVÆue
(c⁄° *
zArg
){

2449 
sqlôe3_öt64
 
v
 = 0;

2450 c⁄° såu˘ { *
zSuffix
; 
iMu…
; } 
aMu…
[] = {

2461 
i
;

2462 
isNeg
 = 0;

2463 if–
zArg
[0]=='-' ){

2464 
isNeg
 = 1;

2465 
zArg
++;

2466 }if–
zArg
[0]=='+' ){

2467 
zArg
++;

2469 if–
zArg
[0]=='0' && zArg[1]=='x' ){

2470 
x
;

2471 
zArg
 += 2;

2472  (
x
 = 
	`hexDigôVÆue
(
zArg
[0]))>=0 ){

2473 
v
 = (v<<4Ë+ 
x
;

2474 
zArg
++;

2477  
	`IsDigô
(
zArg
[0]) ){

2478 
v
 = v*10 + 
zArg
[0] - '0';

2479 
zArg
++;

2482 
i
=0; i<
	`AºaySize
(
aMu…
); i++){

2483 if–
	`sqlôe3_°ricmp
(
aMu…
[
i
].
zSuffix
, 
zArg
)==0 ){

2484 
v
 *
aMu…
[
i
].
iMu…
;

2488  
isNeg
? -
v
 : v;

2489 
	}
}

2495 
	$boﬁónVÆue
(*
zArg
){

2496 
i
;

2497 if–
zArg
[0]=='0' && zArg[1]=='x' ){

2498 
i
=2; 
	`hexDigôVÆue
(
zArg
[i])>=0; i++){}

2500 
i
=0; 
zArg
[i]>='0' && zArg[i]<='9'; i++){}

2502 if–
i
>0 && 
zArg
[i]==0 )  ()(
	`öãgîVÆue
(zArg) & 0xffffffff);

2503 if–
	`sqlôe3_°ricmp
(
zArg
, "on")==0 || sqlite3_stricmp(zArg,"yes")==0 ){

2506 if–
	`sqlôe3_°ricmp
(
zArg
, "off")==0 || sqlite3_stricmp(zArg,"no")==0 ){

2509 
	`utf8_¥ötf
(
°dîr
, "ERROR: Notá boolean value: \"%s\". Assuming \"no\".\n",

2510 
zArg
);

2512 
	}
}

2517 
	$ouçut_fûe_˛o£
(
FILE
 *
f
){

2518 if–
f
 && f!=
°dout
 && f!=
°dîr
 ) 
	`f˛o£
(f);

2519 
	}
}

2526 
FILE
 *
	$ouçut_fûe_›í
(c⁄° *
zFûe
){

2527 
FILE
 *
f
;

2528 if–
	`°rcmp
(
zFûe
,"stdout")==0 ){

2529 
f
 = 
°dout
;

2530 }if–
	`°rcmp
(
zFûe
, "stderr")==0 ){

2531 
f
 = 
°dîr
;

2532 }if–
	`°rcmp
(
zFûe
, "off")==0 ){

2533 
f
 = 0;

2535 
f
 = 
	`f›í
(
zFûe
, "wb");

2536 if–
f
==0 ){

2537 
	`utf8_¥ötf
(
°dîr
, "Eº‹: c™nŸ o≥¿\"%s\"\n", 
zFûe
);

2540  
f
;

2541 
	}
}

2546 
	$sql_åa˚_ˇŒback
(*
pArg
, c⁄° *
z
){

2547 
FILE
 *
f
 = (FILE*)
pArg
;

2548 if–
f
 ){

2549 
i
 = ()
	`°æí
(
z
);

2550  
i
>0 && 
z
[i-1]==';' ){ i--; }

2551 
	`utf8_¥ötf
(
f
, "%.*s;\n", 
i
, 
z
);

2553 
	}
}

2559 
	$ã°_bªakpoöt
(){

2560 
nCÆl
 = 0;

2561 
nCÆl
++;

2562 
	}
}

2567 
Imp‹tCtx
 
	tImp‹tCtx
;

2568 
	sImp‹tCtx
 {

2569 c⁄° *
	mzFûe
;

2570 
FILE
 *
	mö
;

2571 *
	mz
;

2572 
	mn
;

2573 
	mnAŒoc
;

2574 
	mnLöe
;

2575 
	mcTîm
;

2576 
	mcCﬁSï
;

2577 
	mcRowSï
;

2581 
	$imp‹t_≠≥nd_ch¨
(
Imp‹tCtx
 *
p
, 
c
){

2582 if–
p
->
n
+1>ı->
nAŒoc
 ){

2583 
p
->
nAŒoc
 +=Ö->nAlloc + 100;

2584 
p
->
z
 = 
	`sqlôe3_ªÆloc64
’->z,Ö->
nAŒoc
);

2585 if–
p
->
z
==0 ){

2586 
	`øw_¥ötf
(
°dîr
, "out of memory\n");

2587 
	`exô
(1);

2590 
p
->
z
[p->
n
++] = ()
c
;

2591 
	}
}

2606 *
SQLITE_CDECL
 
	$csv_ªad_⁄e_fõld
(
Imp‹tCtx
 *
p
){

2607 
c
;

2608 
cSï
 = 
p
->
cCﬁSï
;

2609 
rSï
 = 
p
->
cRowSï
;

2610 
p
->
n
 = 0;

2611 
c
 = 
	`fgëc
(
p
->
ö
);

2612 if–
c
==
EOF
 || 
£íI¡îru±
 ){

2613 
p
->
cTîm
 = 
EOF
;

2616 if–
c
=='"' ){

2617 
pc
, 
µc
;

2618 
°¨tLöe
 = 
p
->
nLöe
;

2619 
cQuŸe
 = 
c
;

2620 
pc
 = 
µc
 = 0;

2622 
c
 = 
	`fgëc
(
p
->
ö
);

2623 if–
c
==
rSï
 ) 
p
->
nLöe
++;

2624 if–
c
==
cQuŸe
 ){

2625 if–
pc
==
cQuŸe
 ){

2626 
pc
 = 0;

2630 if–(
c
==
cSï
 && 
pc
==
cQuŸe
)

2631 || (
c
==
rSï
 && 
pc
==
cQuŸe
)

2632 || (
c
==
rSï
 && 
pc
=='\r' && 
µc
==
cQuŸe
)

2633 || (
c
==
EOF
 && 
pc
==
cQuŸe
)

2635 do{ 
p
->
n
--; }Ö->
z
[p->n]!=
cQuŸe
 );

2636 
p
->
cTîm
 = 
c
;

2639 if–
pc
==
cQuŸe
 && 
c
!='\r' ){

2640 
	`utf8_¥ötf
(
°dîr
, "%s:%d: unescaped %c character\n",

2641 
p
->
zFûe
,Ö->
nLöe
, 
cQuŸe
);

2643 if–
c
==
EOF
 ){

2644 
	`utf8_¥ötf
(
°dîr
, "%s:%d: unterminated %c-quoted field\n",

2645 
p
->
zFûe
, 
°¨tLöe
, 
cQuŸe
);

2646 
p
->
cTîm
 = 
c
;

2649 
	`imp‹t_≠≥nd_ch¨
(
p
, 
c
);

2650 
µc
 = 
pc
;

2651 
pc
 = 
c
;

2654  
c
!=
EOF
 && c!=
cSï
 && c!=
rSï
 ){

2655 
	`imp‹t_≠≥nd_ch¨
(
p
, 
c
);

2656 
c
 = 
	`fgëc
(
p
->
ö
);

2658 if–
c
==
rSï
 ){

2659 
p
->
nLöe
++;

2660 if–
p
->
n
>0 &&Ö->
z
[p->n-1]=='\r' )Ö->n--;

2662 
p
->
cTîm
 = 
c
;

2664 if–
p
->
z
 )Ö->z[p->
n
] = 0;

2665  
p
->
z
;

2666 
	}
}

2680 *
SQLITE_CDECL
 
	$ascii_ªad_⁄e_fõld
(
Imp‹tCtx
 *
p
){

2681 
c
;

2682 
cSï
 = 
p
->
cCﬁSï
;

2683 
rSï
 = 
p
->
cRowSï
;

2684 
p
->
n
 = 0;

2685 
c
 = 
	`fgëc
(
p
->
ö
);

2686 if–
c
==
EOF
 || 
£íI¡îru±
 ){

2687 
p
->
cTîm
 = 
EOF
;

2690  
c
!=
EOF
 && c!=
cSï
 && c!=
rSï
 ){

2691 
	`imp‹t_≠≥nd_ch¨
(
p
, 
c
);

2692 
c
 = 
	`fgëc
(
p
->
ö
);

2694 if–
c
==
rSï
 ){

2695 
p
->
nLöe
++;

2697 
p
->
cTîm
 = 
c
;

2698 if–
p
->
z
 )Ö->z[p->
n
] = 0;

2699  
p
->
z
;

2700 
	}
}

2707 
	$åyToCl⁄eD©a
(

2708 
ShñlSèã
 *
p
,

2709 
sqlôe3
 *
√wDb
,

2710 c⁄° *
zTabÀ


2712 
sqlôe3_°mt
 *
pQuîy
 = 0;

2713 
sqlôe3_°mt
 *
pIn£π
 = 0;

2714 *
zQuîy
 = 0;

2715 *
zIn£π
 = 0;

2716 
rc
;

2717 
i
, 
j
, 
n
;

2718 
nTabÀ
 = ()
	`°æí
(
zTabÀ
);

2719 
k
 = 0;

2720 
˙t
 = 0;

2721 c⁄° 
•öR©e
 = 10000;

2723 
zQuîy
 = 
	`sqlôe3_m¥ötf
("SELECT * FROM \"%w\"", 
zTabÀ
);

2724 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
p
->
db
, 
zQuîy
, -1, &
pQuîy
, 0);

2725 if–
rc
 ){

2726 
	`utf8_¥ötf
(
°dîr
, "Error %d: %s on [%s]\n",

2727 
	`sqlôe3_exãnded_îrcode
(
p
->
db
), 
	`sqlôe3_îrmsg
(p->db),

2728 
zQuîy
);

2729 
íd_d©a_x„r
;

2731 
n
 = 
	`sqlôe3_cﬁumn_cou¡
(
pQuîy
);

2732 
zIn£π
 = 
	`sqlôe3_mÆloc64
(200 + 
nTabÀ
 + 
n
*3);

2733 if–
zIn£π
==0 ){

2734 
	`øw_¥ötf
(
°dîr
, "out of memory\n");

2735 
íd_d©a_x„r
;

2737 
	`sqlôe3_¢¥ötf
(200+
nTabÀ
,
zIn£π
,

2738 "INSERT OR IGNORE INTO \"%s\" VALUES(?", 
zTabÀ
);

2739 
i
 = ()
	`°æí
(
zIn£π
);

2740 
j
=1; j<
n
; j++){

2741 
	`mem˝y
(
zIn£π
+
i
, ",?", 2);

2742 
i
 += 2;

2744 
	`mem˝y
(
zIn£π
+
i
, ");", 3);

2745 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
√wDb
, 
zIn£π
, -1, &
pIn£π
, 0);

2746 if–
rc
 ){

2747 
	`utf8_¥ötf
(
°dîr
, "Error %d: %s on [%s]\n",

2748 
	`sqlôe3_exãnded_îrcode
(
√wDb
), 
	`sqlôe3_îrmsg
(newDb),

2749 
zQuîy
);

2750 
íd_d©a_x„r
;

2752 
k
=0; k<2; k++){

2753  (
rc
 = 
	`sqlôe3_°ï
(
pQuîy
))==
SQLITE_ROW
 ){

2754 
i
=0; i<
n
; i++){

2755  
	`sqlôe3_cﬁumn_ty≥
(
pQuîy
, 
i
) ){

2756 
SQLITE_NULL
: {

2757 
	`sqlôe3_böd_nuŒ
(
pIn£π
, 
i
+1);

2760 
SQLITE_INTEGER
: {

2761 
	`sqlôe3_böd_öt64
(
pIn£π
, 
i
+1, 
	`sqlôe3_cﬁumn_öt64
(
pQuîy
,i));

2764 
SQLITE_FLOAT
: {

2765 
	`sqlôe3_böd_doubÀ
(
pIn£π
, 
i
+1, 
	`sqlôe3_cﬁumn_doubÀ
(
pQuîy
,i));

2768 
SQLITE_TEXT
: {

2769 
	`sqlôe3_böd_ãxt
(
pIn£π
, 
i
+1,

2770 (c⁄° *)
	`sqlôe3_cﬁumn_ãxt
(
pQuîy
,
i
),

2771 -1, 
SQLITE_STATIC
);

2774 
SQLITE_BLOB
: {

2775 
	`sqlôe3_böd_blob
(
pIn£π
, 
i
+1, 
	`sqlôe3_cﬁumn_blob
(
pQuîy
,i),

2776 
	`sqlôe3_cﬁumn_byãs
(
pQuîy
,
i
),

2777 
SQLITE_STATIC
);

2782 
rc
 = 
	`sqlôe3_°ï
(
pIn£π
);

2783 if–
rc
!=
SQLITE_OK
 &&Ñc!=
SQLITE_ROW
 &&Ñc!=
SQLITE_DONE
 ){

2784 
	`utf8_¥ötf
(
°dîr
, "Eº‹ %d: %s\n", 
	`sqlôe3_exãnded_îrcode
(
√wDb
),

2785 
	`sqlôe3_îrmsg
(
√wDb
));

2787 
	`sqlôe3_ª£t
(
pIn£π
);

2788 
˙t
++;

2789 if–(
˙t
%
•öR©e
)==0 ){

2790 
	`¥ötf
("%c\b", "|/-\\"[(
˙t
/
•öR©e
)%4]);

2791 
	`fÊush
(
°dout
);

2794 if–
rc
==
SQLITE_DONE
 ) ;

2795 
	`sqlôe3_föÆize
(
pQuîy
);

2796 
	`sqlôe3_‰ì
(
zQuîy
);

2797 
zQuîy
 = 
	`sqlôe3_m¥ötf
("SELECT * FROM \"%w\" ORDER BYÑowid DESC;",

2798 
zTabÀ
);

2799 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
p
->
db
, 
zQuîy
, -1, &
pQuîy
, 0);

2800 if–
rc
 ){

2801 
	`utf8_¥ötf
(
°dîr
, "W¨nög: c™nŸ sã∞\"%s\" backw¨ds", 
zTabÀ
);

2806 
íd_d©a_x„r
:

2807 
	`sqlôe3_föÆize
(
pQuîy
);

2808 
	`sqlôe3_föÆize
(
pIn£π
);

2809 
	`sqlôe3_‰ì
(
zQuîy
);

2810 
	`sqlôe3_‰ì
(
zIn£π
);

2811 
	}
}

2820 
åyToCl⁄eSchema
(

2821 
ShñlSèã
 *
p
,

2822 
sqlôe3
 *
√wDb
,

2823 c⁄° *
zWhîe
,

2824 (*
xF‹Each
)(
ShñlSèã
*,
sqlôe3
*,const *)

2826 
sqlôe3_°mt
 *
pQuîy
 = 0;

2827 *
zQuîy
 = 0;

2828 
rc
;

2829 c⁄° *
zName
;

2830 c⁄° *
zSql
;

2831 *
zEºMsg
 = 0;

2833 
zQuîy
 = 
	`sqlôe3_m¥ötf
("SELECTÇame, sql FROM sqlite_master"

2834 " WHERE %s", 
zWhîe
);

2835 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
p
->
db
, 
zQuîy
, -1, &
pQuîy
, 0);

2836 if–
rc
 ){

2837 
	`utf8_¥ötf
(
°dîr
, "Error: (%d) %s on [%s]\n",

2838 
	`sqlôe3_exãnded_îrcode
(
p
->
db
), 
	`sqlôe3_îrmsg
(p->db),

2839 
zQuîy
);

2840 
íd_schema_x„r
;

2842  (
rc
 = 
	`sqlôe3_°ï
(
pQuîy
))==
SQLITE_ROW
 ){

2843 
zName
 = 
	`sqlôe3_cﬁumn_ãxt
(
pQuîy
, 0);

2844 
zSql
 = 
	`sqlôe3_cﬁumn_ãxt
(
pQuîy
, 1);

2845 
	`¥ötf
("%s... ", 
zName
); 
	`fÊush
(
°dout
);

2846 
	`sqlôe3_exec
(
√wDb
, (c⁄° *)
zSql
, 0, 0, &
zEºMsg
);

2847 if–
zEºMsg
 ){

2848 
	`utf8_¥ötf
(
°dîr
, "Eº‹: %s\nSQL: [%s]\n", 
zEºMsg
, 
zSql
);

2849 
	`sqlôe3_‰ì
(
zEºMsg
);

2850 
zEºMsg
 = 0;

2852 if–
xF‹Each
 ){

2853 
	`xF‹Each
(
p
, 
√wDb
, (c⁄° *)
zName
);

2855 
	`¥ötf
("done\n");

2857 if–
rc
!=
SQLITE_DONE
 ){

2858 
	`sqlôe3_föÆize
(
pQuîy
);

2859 
	`sqlôe3_‰ì
(
zQuîy
);

2860 
zQuîy
 = 
	`sqlôe3_m¥ötf
("SELECTÇame, sql FROM sqlite_master"

2861 " WHERE %†ORDER BYÑowid DESC", 
zWhîe
);

2862 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
p
->
db
, 
zQuîy
, -1, &
pQuîy
, 0);

2863 if–
rc
 ){

2864 
	`utf8_¥ötf
(
°dîr
, "Error: (%d) %s on [%s]\n",

2865 
	`sqlôe3_exãnded_îrcode
(
p
->
db
), 
	`sqlôe3_îrmsg
(p->db),

2866 
zQuîy
);

2867 
íd_schema_x„r
;

2869  (
rc
 = 
	`sqlôe3_°ï
(
pQuîy
))==
SQLITE_ROW
 ){

2870 
zName
 = 
	`sqlôe3_cﬁumn_ãxt
(
pQuîy
, 0);

2871 
zSql
 = 
	`sqlôe3_cﬁumn_ãxt
(
pQuîy
, 1);

2872 
	`¥ötf
("%s... ", 
zName
); 
	`fÊush
(
°dout
);

2873 
	`sqlôe3_exec
(
√wDb
, (c⁄° *)
zSql
, 0, 0, &
zEºMsg
);

2874 if–
zEºMsg
 ){

2875 
	`utf8_¥ötf
(
°dîr
, "Eº‹: %s\nSQL: [%s]\n", 
zEºMsg
, 
zSql
);

2876 
	`sqlôe3_‰ì
(
zEºMsg
);

2877 
zEºMsg
 = 0;

2879 if–
xF‹Each
 ){

2880 
	`xF‹Each
(
p
, 
√wDb
, (c⁄° *)
zName
);

2882 
	`¥ötf
("done\n");

2885 
íd_schema_x„r
:

2886 
	`sqlôe3_föÆize
(
pQuîy
);

2887 
	`sqlôe3_‰ì
(
zQuîy
);

2888 
	}
}

2895 
	$åyToCl⁄e
(
ShñlSèã
 *
p
, c⁄° *
zNewDb
){

2896 
rc
;

2897 
sqlôe3
 *
√wDb
 = 0;

2898 if–
	`ac˚ss
(
zNewDb
,0)==0 ){

2899 
	`utf8_¥ötf
(
°dîr
, "Fûê\"%s\"áÃódyÉxi°s.\n", 
zNewDb
);

2902 
rc
 = 
	`sqlôe3_›í
(
zNewDb
, &
√wDb
);

2903 if–
rc
 ){

2904 
	`utf8_¥ötf
(
°dîr
, "Cannot create output database: %s\n",

2905 
	`sqlôe3_îrmsg
(
√wDb
));

2907 
	`sqlôe3_exec
(
p
->
db
, "PRAGMA writable_schema=ON;", 0, 0, 0);

2908 
	`sqlôe3_exec
(
√wDb
, "BEGIN EXCLUSIVE;", 0, 0, 0);

2909 
	`åyToCl⁄eSchema
(
p
, 
√wDb
, "ty≥='èbÀ'", 
åyToCl⁄eD©a
);

2910 
	`åyToCl⁄eSchema
(
p
, 
√wDb
, "type!='table'", 0);

2911 
	`sqlôe3_exec
(
√wDb
, "COMMIT;", 0, 0, 0);

2912 
	`sqlôe3_exec
(
p
->
db
, "PRAGMA writable_schema=OFF;", 0, 0, 0);

2914 
	`sqlôe3_˛o£
(
√wDb
);

2915 
	}
}

2920 
	$ouçut_ª£t
(
ShñlSèã
 *
p
){

2921 if–
p
->
outfûe
[0]=='|' ){

2922 #i‚de‡
SQLITE_OMIT_POPEN


2923 
	`p˛o£
(
p
->
out
);

2926 
	`ouçut_fûe_˛o£
(
p
->
out
);

2928 
p
->
outfûe
[0] = 0;

2929 
p
->
out
 = 
°dout
;

2930 
	}
}

2935 
	$db_öt
(
ShñlSèã
 *
p
, c⁄° *
zSql
){

2936 
sqlôe3_°mt
 *
pStmt
;

2937 
ªs
 = 0;

2938 
	`sqlôe3_¥ï¨e_v2
(
p
->
db
, 
zSql
, -1, &
pStmt
, 0);

2939 if–
pStmt
 && 
	`sqlôe3_°ï
’Stmt)==
SQLITE_ROW
 ){

2940 
ªs
 = 
	`sqlôe3_cﬁumn_öt
(
pStmt
,0);

2942 
	`sqlôe3_föÆize
(
pStmt
);

2943  
ªs
;

2944 
	}
}

2949 
	$gë2byãI¡
(*
a
){

2950  (
a
[0]<<8) +á[1];

2951 
	}
}

2952 
	$gë4byãI¡
(*
a
){

2953  (
a
[0]<<24) + (a[1]<<16) + (a[2]<<8) +á[3];

2954 
	}
}

2961 
	$shñl_dböfo_comm™d
(
ShñlSèã
 *
p
, 
nArg
, **
azArg
){

2962 c⁄° såu˘ { c⁄° *
zName
; 
of°
; } 
aFõld
[] = {

2976 c⁄° såu˘ { c⁄° *
zName
; c⁄° *
zSql
; } 
aQuîy
[] = {

2988 
sqlôe3_fûe
 *
pFûe
 = 0;

2989 
i
;

2990 *
zSchemaTab
;

2991 *
zDb
 = 
nArg
>=2 ? 
azArg
[1] : "main";

2992 
aHdr
[100];

2993 
	`›í_db
(
p
, 0);

2994 if–
p
->
db
==0 )  1;

2995 
	`sqlôe3_fûe_c⁄åﬁ
(
p
->
db
, 
zDb
, 
SQLITE_FCNTL_FILE_POINTER
, &
pFûe
);

2996 if–
pFûe
==0 ||ÖFûe->
pMëhods
==0 ||ÖFûe->pMëhods->
xRód
==0 ){

2999 
i
 = 
pFûe
->
pMëhods
->
	`xRód
’Fûe, 
aHdr
, 100, 0);

3000 if–
i
!=
SQLITE_OK
 ){

3001 
	`øw_¥ötf
(
°dîr
, "unableÅoÑead database header\n");

3004 
i
 = 
	`gë2byãI¡
(
aHdr
+16);

3005 if–
i
==1 ) i = 65536;

3006 
	`utf8_¥ötf
(
p
->
out
, "%-20†%d\n", "d©aba£Öagêsize:", 
i
);

3007 
	`utf8_¥ötf
(
p
->
out
, "%-20†%d\n", "wrôêf‹m©:", 
aHdr
[18]);

3008 
	`utf8_¥ötf
(
p
->
out
, "%-20†%d\n", "ªad f‹m©:", 
aHdr
[19]);

3009 
	`utf8_¥ötf
(
p
->
out
, "%-20†%d\n", "ª£rved byãs:", 
aHdr
[20]);

3010 
i
=0; i<
	`AºaySize
(
aFõld
); i++){

3011 
of°
 = 
aFõld
[
i
].ofst;

3012 
vÆ
 = 
	`gë4byãI¡
(
aHdr
 + 
of°
);

3013 
	`utf8_¥ötf
(
p
->
out
, "%-20†%u", 
aFõld
[
i
].
zName
, 
vÆ
);

3014  
of°
 ){

3016 if–
vÆ
==1 ) 
	`øw_¥ötf
(
p
->
out
, " (utf8)");

3017 if–
vÆ
==2 ) 
	`øw_¥ötf
(
p
->
out
, " (utf16le)");

3018 if–
vÆ
==3 ) 
	`øw_¥ötf
(
p
->
out
, " (utf16be)");

3021 
	`øw_¥ötf
(
p
->
out
, "\n");

3023 if–
zDb
==0 ){

3024 
zSchemaTab
 = 
	`sqlôe3_m¥ötf
("main.sqlite_master");

3025 }if–
	`°rcmp
(
zDb
,"temp")==0 ){

3026 
zSchemaTab
 = 
	`sqlôe3_m¥ötf
("%s", "sqlite_temp_master");

3028 
zSchemaTab
 = 
	`sqlôe3_m¥ötf
("\"%w\".sqlôe_ma°î", 
zDb
);

3030 
i
=0; i<
	`AºaySize
(
aQuîy
); i++){

3031 *
zSql
 = 
	`sqlôe3_m¥ötf
(
aQuîy
[
i
].zSql, 
zSchemaTab
);

3032 
vÆ
 = 
	`db_öt
(
p
, 
zSql
);

3033 
	`sqlôe3_‰ì
(
zSql
);

3034 
	`utf8_¥ötf
(
p
->
out
, "%-20†%d\n", 
aQuîy
[
i
].
zName
, 
vÆ
);

3036 
	`sqlôe3_‰ì
(
zSchemaTab
);

3038 
	}
}

3043 
	$shñlD©aba£Eº‹
(
sqlôe3
 *
db
){

3044 c⁄° *
zEº
 = 
	`sqlôe3_îrmsg
(
db
);

3045 
	`utf8_¥ötf
(
°dîr
, "Eº‹: %s\n", 
zEº
);

3047 
	}
}

3052 
	$shñlNomemEº‹
(){

3053 
	`øw_¥ötf
(
°dîr
, "Error: out of memory\n");

3055 
	}
}

3061 
	$›ti⁄M©ch
(c⁄° *
zSå
, c⁄° *
zO±
){

3062 if–
zSå
[0]!='-' )  0;

3063 
zSå
++;

3064 if–
zSå
[0]=='-' ) zStr++;

3065  
	`°rcmp
(
zSå
, 
zO±
)==0;

3066 
	}
}

3074 
	$do_mëa_comm™d
(*
zLöe
, 
ShñlSèã
 *
p
){

3075 
h
 = 1;

3076 
nArg
 = 0;

3077 
n
, 
c
;

3078 
rc
 = 0;

3079 *
azArg
[50];

3083  
zLöe
[
h
] && 
nArg
<
	`AºaySize
(
azArg
) ){

3084  
	`IsS∑˚
(
zLöe
[
h
]) ){ h++; }

3085 if–
zLöe
[
h
]==0 ) ;

3086 if–
zLöe
[
h
]=='\'' || zLine[h]=='"' ){

3087 
dñim
 = 
zLöe
[
h
++];

3088 
azArg
[
nArg
++] = &
zLöe
[
h
];

3089  
zLöe
[
h
] && zLöe[h]!=
dñim
 ){

3090 if–
zLöe
[
h
]=='\\' && 
dñim
=='"' && zLine[h+1]!=0 ) h++;

3091 
h
++;

3093 if–
zLöe
[
h
]==
dñim
 ){

3094 
zLöe
[
h
++] = 0;

3096 if–
dñim
=='"' ) 
	`ªsﬁve_back¶ashes
(
azArg
[
nArg
-1]);

3098 
azArg
[
nArg
++] = &
zLöe
[
h
];

3099  
zLöe
[
h
] && !
	`IsS∑˚
(zLine[h]) ){ h++; }

3100 if–
zLöe
[
h
] ) zLine[h++] = 0;

3101 
	`ªsﬁve_back¶ashes
(
azArg
[
nArg
-1]);

3107 if–
nArg
==0 )  0;

3108 
n
 = 
	`°æí30
(
azArg
[0]);

3109 
c
 = 
azArg
[0][0];

3111 if–
c
=='a' && 
	`°∫cmp
(
azArg
[0], "auth", 
n
)==0 ){

3112 if–
nArg
!=2 ){

3113 
	`øw_¥ötf
(
°dîr
, "Usage: .auth ON|OFF\n");

3114 
rc
 = 1;

3115 
mëa_comm™d_exô
;

3117 
	`›í_db
(
p
, 0);

3118 if–
	`boﬁónVÆue
(
azArg
[1]) ){

3119 
	`sqlôe3_£t_auth‹izî
(
p
->
db
, 
shñlAuth
,Ö);

3121 
	`sqlôe3_£t_auth‹izî
(
p
->
db
, 0, 0);

3125 if–(
c
=='b' && 
n
>=3 && 
	`°∫cmp
(
azArg
[0], "backup",Ç)==0)

3126 || (
c
=='s' && 
n
>=3 && 
	`°∫cmp
(
azArg
[0], "save",Ç)==0)

3128 c⁄° *
zDe°Fûe
 = 0;

3129 c⁄° *
zDb
 = 0;

3130 
sqlôe3
 *
pDe°
;

3131 
sqlôe3_backup
 *
pBackup
;

3132 
j
;

3133 
j
=1; j<
nArg
; j++){

3134 c⁄° *
z
 = 
azArg
[
j
];

3135 if–
z
[0]=='-' ){

3136  
z
[0]=='-' ) z++;

3139 
	`utf8_¥ötf
(
°dîr
, "unknow¿›ti⁄: %s\n", 
azArg
[
j
]);

3142 }if–
zDe°Fûe
==0 ){

3143 
zDe°Fûe
 = 
azArg
[
j
];

3144 }if–
zDb
==0 ){

3145 
zDb
 = 
zDe°Fûe
;

3146 
zDe°Fûe
 = 
azArg
[
j
];

3148 
	`øw_¥ötf
(
°dîr
, "too manyárgumentsÅo .backup\n");

3152 if–
zDe°Fûe
==0 ){

3153 
	`øw_¥ötf
(
°dîr
, "missing FILENAMEárgument on .backup\n");

3156 if–
zDb
==0 ) zDb = "main";

3157 
rc
 = 
	`sqlôe3_›í
(
zDe°Fûe
, &
pDe°
);

3158 if–
rc
!=
SQLITE_OK
 ){

3159 
	`utf8_¥ötf
(
°dîr
, "Eº‹: c™nŸ o≥¿\"%s\"\n", 
zDe°Fûe
);

3160 
	`sqlôe3_˛o£
(
pDe°
);

3163 
	`›í_db
(
p
, 0);

3164 
pBackup
 = 
	`sqlôe3_backup_öô
(
pDe°
, "maö", 
p
->
db
, 
zDb
);

3165 if–
pBackup
==0 ){

3166 
	`utf8_¥ötf
(
°dîr
, "Eº‹: %s\n", 
	`sqlôe3_îrmsg
(
pDe°
));

3167 
	`sqlôe3_˛o£
(
pDe°
);

3170  (
rc
 = 
	`sqlôe3_backup_°ï
(
pBackup
,100))==
SQLITE_OK
 ){}

3171 
	`sqlôe3_backup_föish
(
pBackup
);

3172 if–
rc
==
SQLITE_DONE
 ){

3173 
rc
 = 0;

3175 
	`utf8_¥ötf
(
°dîr
, "Eº‹: %s\n", 
	`sqlôe3_îrmsg
(
pDe°
));

3176 
rc
 = 1;

3178 
	`sqlôe3_˛o£
(
pDe°
);

3181 if–
c
=='b' && 
n
>=3 && 
	`°∫cmp
(
azArg
[0], "bail",Ç)==0 ){

3182 if–
nArg
==2 ){

3183 
baû_⁄_îr‹
 = 
	`boﬁónVÆue
(
azArg
[1]);

3185 
	`øw_¥ötf
(
°dîr
, "Usage: .bail on|off\n");

3186 
rc
 = 1;

3190 if–
c
=='b' && 
n
>=3 && 
	`°∫cmp
(
azArg
[0], "binary",Ç)==0 ){

3191 if–
nArg
==2 ){

3192 if–
	`boﬁónVÆue
(
azArg
[1]) ){

3193 
	`£tBö¨yMode
(
p
->
out
, 1);

3195 
	`£tTextMode
(
p
->
out
, 1);

3198 
	`øw_¥ötf
(
°dîr
, "Usage: .binary on|off\n");

3199 
rc
 = 1;

3206 if–
c
=='b' && 
n
>=3 && 
	`°∫cmp
(
azArg
[0], "breakpoint",Ç)==0 ){

3207 
	`ã°_bªakpoöt
();

3210 if–
c
=='c' && 
n
>=3 && 
	`°∫cmp
(
azArg
[0], "changes",Ç)==0 ){

3211 if–
nArg
==2 ){

3212 
p
->
cou¡Ch™ges
 = 
	`boﬁónVÆue
(
azArg
[1]);

3214 
	`øw_¥ötf
(
°dîr
, "Usage: .changes on|off\n");

3215 
rc
 = 1;

3219 if–
c
=='c' && 
	`°∫cmp
(
azArg
[0], "˛⁄e", 
n
)==0 ){

3220 if–
nArg
==2 ){

3221 
	`åyToCl⁄e
(
p
, 
azArg
[1]);

3223 
	`øw_¥ötf
(
°dîr
, "Usage: .clone FILENAME\n");

3224 
rc
 = 1;

3228 if–
c
=='d' && 
n
>1 && 
	`°∫cmp
(
azArg
[0], "databases",Ç)==0 ){

3229 
ShñlSèã
 
d©a
;

3230 *
zEºMsg
 = 0;

3231 
	`›í_db
(
p
, 0);

3232 
	`mem˝y
(&
d©a
, 
p
, (data));

3233 
d©a
.
showHódî
 = 1;

3234 
d©a
.
cMode
 = d©a.
mode
 = 
MODE_Cﬁumn
;

3235 
d©a
.
cﬁWidth
[0] = 3;

3236 
d©a
.
cﬁWidth
[1] = 15;

3237 
d©a
.
cﬁWidth
[2] = 58;

3238 
d©a
.
˙t
 = 0;

3239 
	`sqlôe3_exec
(
p
->
db
, "PRAGMA d©aba£_li°; ", 
ˇŒback
, &
d©a
, &
zEºMsg
);

3240 if–
zEºMsg
 ){

3241 
	`utf8_¥ötf
(
°dîr
,"Eº‹: %s\n", 
zEºMsg
);

3242 
	`sqlôe3_‰ì
(
zEºMsg
);

3243 
rc
 = 1;

3247 if–
c
=='d' && 
	`°∫cmp
(
azArg
[0], "dböfo", 
n
)==0 ){

3248 
rc
 = 
	`shñl_dböfo_comm™d
(
p
, 
nArg
, 
azArg
);

3251 if–
c
=='d' && 
	`°∫cmp
(
azArg
[0], "dump", 
n
)==0 ){

3252 
	`›í_db
(
p
, 0);

3256 if–
nArg
!=1 &&ÇArg!=2 ){

3257 
	`øw_¥ötf
(
°dîr
, "Usage: .dump ?LIKE-PATTERN?\n");

3258 
rc
 = 1;

3259 
mëa_comm™d_exô
;

3261 
	`øw_¥ötf
(
p
->
out
, "PRAGMA foreign_keys=OFF;\n");

3262 
	`øw_¥ötf
(
p
->
out
, "BEGIN TRANSACTION;\n");

3263 
p
->
wrôabÀSchema
 = 0;

3264 
	`sqlôe3_exec
(
p
->
db
, "SAVEPOINT dump; PRAGMA writable_schema=ON", 0, 0, 0);

3265 
p
->
nEº
 = 0;

3266 if–
nArg
==1 ){

3267 
	`run_schema_dump_quîy
(
p
,

3271 
	`run_schema_dump_quîy
(
p
,

3275 
	`run_èbÀ_dump_quîy
(
p
,

3280 
i
;

3281 
i
=1; i<
nArg
; i++){

3282 
zShñlSètic
 = 
azArg
[
i
];

3283 
	`run_schema_dump_quîy
(
p
,

3287 
	`run_èbÀ_dump_quîy
(
p
,

3293 
zShñlSètic
 = 0;

3296 if–
p
->
wrôabÀSchema
 ){

3297 
	`øw_¥ötf
(
p
->
out
, "PRAGMA writable_schema=OFF;\n");

3298 
p
->
wrôabÀSchema
 = 0;

3300 
	`sqlôe3_exec
(
p
->
db
, "PRAGMA writable_schema=OFF;", 0, 0, 0);

3301 
	`sqlôe3_exec
(
p
->
db
, "RELEASE dump;", 0, 0, 0);

3302 
	`øw_¥ötf
(
p
->
out
,Ö->
nEº
 ? "ROLLBACK; -- dueÅoÉrrors\n" : "COMMIT;\n");

3305 if–
c
=='e' && 
	`°∫cmp
(
azArg
[0], "echo", 
n
)==0 ){

3306 if–
nArg
==2 ){

3307 
p
->
echoOn
 = 
	`boﬁónVÆue
(
azArg
[1]);

3309 
	`øw_¥ötf
(
°dîr
, "Usage: .echo on|off\n");

3310 
rc
 = 1;

3314 if–
c
=='e' && 
	`°∫cmp
(
azArg
[0], "eqp", 
n
)==0 ){

3315 if–
nArg
==2 ){

3316 if–
	`°rcmp
(
azArg
[1],"full")==0 ){

3317 
p
->
autoEQP
 = 2;

3319 
p
->
autoEQP
 = 
	`boﬁónVÆue
(
azArg
[1]);

3322 
	`øw_¥ötf
(
°dîr
, "Usage: .eqp on|off|full\n");

3323 
rc
 = 1;

3327 if–
c
=='e' && 
	`°∫cmp
(
azArg
[0], "exô", 
n
)==0 ){

3328 if–
nArg
>1 && (
rc
 = ()
	`öãgîVÆue
(
azArg
[1]))!=0 ) 
	`exô
(rc);

3329 
rc
 = 2;

3332 if–
c
=='e' && 
	`°∫cmp
(
azArg
[0], "ex∂aö", 
n
)==0 ){

3333 
vÆ
 = 1;

3334 if–
nArg
>=2 ){

3335 if–
	`°rcmp
(
azArg
[1],"auto")==0 ){

3336 
vÆ
 = 99;

3338 
vÆ
 = 
	`boﬁónVÆue
(
azArg
[1]);

3341 if–
vÆ
==1 && 
p
->
mode
!=
MODE_Ex∂aö
 ){

3342 
p
->
n‹mÆMode
 =Ö->
mode
;

3343 
p
->
mode
 = 
MODE_Ex∂aö
;

3344 
p
->
autoEx∂aö
 = 0;

3345 }if–
vÆ
==0 ){

3346 if–
p
->
mode
==
MODE_Ex∂aö
 )Ö->modêp->
n‹mÆMode
;

3347 
p
->
autoEx∂aö
 = 0;

3348 }if–
vÆ
==99 ){

3349 if–
p
->
mode
==
MODE_Ex∂aö
 )Ö->modêp->
n‹mÆMode
;

3350 
p
->
autoEx∂aö
 = 1;

3354 if–
c
=='f' && 
	`°∫cmp
(
azArg
[0], "fuŒschema", 
n
)==0 ){

3355 
ShñlSèã
 
d©a
;

3356 *
zEºMsg
 = 0;

3357 
doSèts
 = 0;

3358 
	`mem˝y
(&
d©a
, 
p
, (data));

3359 
d©a
.
showHódî
 = 0;

3360 
d©a
.
cMode
 = d©a.
mode
 = 
MODE_Semi
;

3361 if–
nArg
==2 && 
	`›ti⁄M©ch
(
azArg
[1], "indent") ){

3362 
d©a
.
cMode
 = d©a.
mode
 = 
MODE_Pªây
;

3363 
nArg
 = 1;

3365 if–
nArg
!=1 ){

3366 
	`øw_¥ötf
(
°dîr
, "Usage: .fullschema ?--indent?\n");

3367 
rc
 = 1;

3368 
mëa_comm™d_exô
;

3370 
	`›í_db
(
p
, 0);

3371 
rc
 = 
	`sqlôe3_exec
(
p
->
db
,

3378 
ˇŒback
, &
d©a
, &
zEºMsg


3380 if–
rc
==
SQLITE_OK
 ){

3381 
sqlôe3_°mt
 *
pStmt
;

3382 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
p
->
db
,

3385 -1, &
pStmt
, 0);

3386 
doSèts
 = 
	`sqlôe3_°ï
(
pStmt
)==
SQLITE_ROW
;

3387 
	`sqlôe3_föÆize
(
pStmt
);

3389 if–
doSèts
==0 ){

3390 
	`øw_¥ötf
(
p
->
out
, "/* No STATÅablesávailable */\n");

3392 
	`øw_¥ötf
(
p
->
out
, "ANALYZE sqlite_master;\n");

3393 
	`sqlôe3_exec
(
p
->
db
, "SELECT 'ANALYZE sqlite_master'",

3394 
ˇŒback
, &
d©a
, &
zEºMsg
);

3395 
d©a
.
cMode
 = d©a.
mode
 = 
MODE_In£π
;

3396 
d©a
.
zDe°TabÀ
 = "sqlite_stat1";

3397 
	`shñl_exec
(
p
->
db
, "SELECT * FROM sqlite_stat1",

3398 
shñl_ˇŒback
, &
d©a
,&
zEºMsg
);

3399 
d©a
.
zDe°TabÀ
 = "sqlite_stat3";

3400 
	`shñl_exec
(
p
->
db
, "SELECT * FROM sqlite_stat3",

3401 
shñl_ˇŒback
, &
d©a
,&
zEºMsg
);

3402 
d©a
.
zDe°TabÀ
 = "sqlite_stat4";

3403 
	`shñl_exec
(
p
->
db
, "SELECT * FROM sqlite_stat4",

3404 
shñl_ˇŒback
, &
d©a
, &
zEºMsg
);

3405 
	`øw_¥ötf
(
p
->
out
, "ANALYZE sqlite_master;\n");

3409 if–
c
=='h' && 
	`°∫cmp
(
azArg
[0], "hódîs", 
n
)==0 ){

3410 if–
nArg
==2 ){

3411 
p
->
showHódî
 = 
	`boﬁónVÆue
(
azArg
[1]);

3413 
	`øw_¥ötf
(
°dîr
, "Usage: .headers on|off\n");

3414 
rc
 = 1;

3418 if–
c
=='h' && 
	`°∫cmp
(
azArg
[0], "hñp", 
n
)==0 ){

3419 
	`utf8_¥ötf
(
p
->
out
, "%s", 
zHñp
);

3422 if–
c
=='i' && 
	`°∫cmp
(
azArg
[0], "imp‹t", 
n
)==0 ){

3423 *
zTabÀ
;

3424 *
zFûe
;

3425 
sqlôe3_°mt
 *
pStmt
 = 
NULL
;

3426 
nCﬁ
;

3427 
nByã
;

3428 
i
, 
j
;

3429 
√edCommô
;

3430 
nSï
;

3431 *
zSql
;

3432 
Imp‹tCtx
 
sCtx
;

3433 *(
SQLITE_CDECL
 *
xRód
)(
Imp‹tCtx
*);

3434 (
SQLITE_CDECL
 *
xClo£r
)(
FILE
*);

3436 if–
nArg
!=3 ){

3437 
	`øw_¥ötf
(
°dîr
, "Usage: .import FILE TABLE\n");

3438 
mëa_comm™d_exô
;

3440 
zFûe
 = 
azArg
[1];

3441 
zTabÀ
 = 
azArg
[2];

3442 
£íI¡îru±
 = 0;

3443 
	`mem£t
(&
sCtx
, 0, (sCtx));

3444 
	`›í_db
(
p
, 0);

3445 
nSï
 = 
	`°æí30
(
p
->
cﬁSï¨©‹
);

3446 if–
nSï
==0 ){

3447 
	`øw_¥ötf
(
°dîr
,

3451 if–
nSï
>1 ){

3452 
	`øw_¥ötf
(
°dîr
, "Error: multi-character column separatorsÇotállowed"

3456 
nSï
 = 
	`°æí30
(
p
->
rowSï¨©‹
);

3457 if–
nSï
==0 ){

3458 
	`øw_¥ötf
(
°dîr
, "Error:Çon-nullÑow separatorÑequired for import\n");

3461 if–
nSï
==2 && 
p
->
mode
==
MODE_Csv
 && 
	`°rcmp
’->
rowSï¨©‹
, 
SEP_CrLf
)==0 ){

3466 
	`sqlôe3_¢¥ötf
((
p
->
rowSï¨©‹
),Ö->rowSï¨©‹, 
SEP_Row
);

3467 
nSï
 = 
	`°æí30
(
p
->
rowSï¨©‹
);

3469 if–
nSï
>1 ){

3470 
	`øw_¥ötf
(
°dîr
, "Error: multi-characterÑow separatorsÇotállowed"

3474 
sCtx
.
zFûe
 = zFile;

3475 
sCtx
.
nLöe
 = 1;

3476 if–
sCtx
.
zFûe
[0]=='|' ){

3477 #ifde‡
SQLITE_OMIT_POPEN


3478 
	`øw_¥ötf
(
°dîr
, "Error:ÖipesáreÇot supported inÅhis OS\n");

3481 
sCtx
.
ö
 = 
	`p›í
(sCtx.
zFûe
+1, "r");

3482 
sCtx
.
zFûe
 = "<pipe>";

3483 
xClo£r
 = 
p˛o£
;

3486 
sCtx
.
ö
 = 
	`f›í
(sCtx.
zFûe
, "rb");

3487 
xClo£r
 = 
f˛o£
;

3489 if–
p
->
mode
==
MODE_Ascii
 ){

3490 
xRód
 = 
ascii_ªad_⁄e_fõld
;

3492 
xRód
 = 
csv_ªad_⁄e_fõld
;

3494 if–
sCtx
.
ö
==0 ){

3495 
	`utf8_¥ötf
(
°dîr
, "Eº‹: c™nŸ o≥¿\"%s\"\n", 
zFûe
);

3498 
sCtx
.
cCﬁSï
 = 
p
->
cﬁSï¨©‹
[0];

3499 
sCtx
.
cRowSï
 = 
p
->
rowSï¨©‹
[0];

3500 
zSql
 = 
	`sqlôe3_m¥ötf
("SELECT * FROM %s", 
zTabÀ
);

3501 if–
zSql
==0 ){

3502 
	`øw_¥ötf
(
°dîr
, "Error: out of memory\n");

3503 
	`xClo£r
(
sCtx
.
ö
);

3506 
nByã
 = 
	`°æí30
(
zSql
);

3507 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
p
->
db
, 
zSql
, -1, &
pStmt
, 0);

3508 
	`imp‹t_≠≥nd_ch¨
(&
sCtx
, 0);

3509 if–
rc
 && 
	`sqlôe3_°rglob
("nÿsuchÅabÀ: *", 
	`sqlôe3_îrmsg
(
p
->
db
))==0 ){

3510 *
zCª©e
 = 
	`sqlôe3_m¥ötf
("CREATE TABLE %s", 
zTabÀ
);

3511 
cSï
 = '(';

3512  
	`xRód
(&
sCtx
) ){

3513 
zCª©e
 = 
	`sqlôe3_m¥ötf
("%z%c\¿ \"%w\" TEXT", zCª©e, 
cSï
, 
sCtx
.
z
);

3514 
cSï
 = ',';

3515 if–
sCtx
.
cTîm
!=sCtx.
cCﬁSï
 ) ;

3517 if–
cSï
=='(' ){

3518 
	`sqlôe3_‰ì
(
zCª©e
);

3519 
	`sqlôe3_‰ì
(
sCtx
.
z
);

3520 
	`xClo£r
(
sCtx
.
ö
);

3521 
	`utf8_¥ötf
(
°dîr
,"%s:Ém±y fûe\n", 
sCtx
.
zFûe
);

3524 
zCª©e
 = 
	`sqlôe3_m¥ötf
("%z\n)", zCreate);

3525 
rc
 = 
	`sqlôe3_exec
(
p
->
db
, 
zCª©e
, 0, 0, 0);

3526 
	`sqlôe3_‰ì
(
zCª©e
);

3527 if–
rc
 ){

3528 
	`utf8_¥ötf
(
°dîr
, "CREATE TABLE %s(...ËÁûed: %s\n", 
zTabÀ
,

3529 
	`sqlôe3_îrmsg
(
p
->
db
));

3530 
	`sqlôe3_‰ì
(
sCtx
.
z
);

3531 
	`xClo£r
(
sCtx
.
ö
);

3534 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
p
->
db
, 
zSql
, -1, &
pStmt
, 0);

3536 
	`sqlôe3_‰ì
(
zSql
);

3537 if–
rc
 ){

3538 i‡(
pStmt
Ë
	`sqlôe3_föÆize
(pStmt);

3539 
	`utf8_¥ötf
(
°dîr
,"Eº‹: %s\n", 
	`sqlôe3_îrmsg
(
p
->
db
));

3540 
	`xClo£r
(
sCtx
.
ö
);

3543 
nCﬁ
 = 
	`sqlôe3_cﬁumn_cou¡
(
pStmt
);

3544 
	`sqlôe3_föÆize
(
pStmt
);

3545 
pStmt
 = 0;

3546 if–
nCﬁ
==0 )  0;

3547 
zSql
 = 
	`sqlôe3_mÆloc64
–
nByã
*2 + 20 + 
nCﬁ
*2 );

3548 if–
zSql
==0 ){

3549 
	`øw_¥ötf
(
°dîr
, "Error: out of memory\n");

3550 
	`xClo£r
(
sCtx
.
ö
);

3553 
	`sqlôe3_¢¥ötf
(
nByã
+20, 
zSql
, "INSERT INTO \"%w\" VALUES(?", 
zTabÀ
);

3554 
j
 = 
	`°æí30
(
zSql
);

3555 
i
=1; i<
nCﬁ
; i++){

3556 
zSql
[
j
++] = ',';

3557 
zSql
[
j
++] = '?';

3559 
zSql
[
j
++] = ')';

3560 
zSql
[
j
] = 0;

3561 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
p
->
db
, 
zSql
, -1, &
pStmt
, 0);

3562 
	`sqlôe3_‰ì
(
zSql
);

3563 if–
rc
 ){

3564 
	`utf8_¥ötf
(
°dîr
, "Eº‹: %s\n", 
	`sqlôe3_îrmsg
(
p
->
db
));

3565 i‡(
pStmt
Ë
	`sqlôe3_föÆize
(pStmt);

3566 
	`xClo£r
(
sCtx
.
ö
);

3569 
√edCommô
 = 
	`sqlôe3_gë_autocommô
(
p
->
db
);

3570 if–
√edCommô
 ) 
	`sqlôe3_exec
(
p
->
db
, "BEGIN", 0, 0, 0);

3572 
°¨tLöe
 = 
sCtx
.
nLöe
;

3573 
i
=0; i<
nCﬁ
; i++){

3574 *
z
 = 
	`xRód
(&
sCtx
);

3579 if–
z
==0 && 
i
==0 ) ;

3585 if–
p
->
mode
==
MODE_Ascii
 && (
z
==0 || z[0]==0Ë&& 
i
==0 ) ;

3586 
	`sqlôe3_böd_ãxt
(
pStmt
, 
i
+1, 
z
, -1, 
SQLITE_TRANSIENT
);

3587 if–
i
<
nCﬁ
-1 && 
sCtx
.
cTîm
!=sCtx.
cCﬁSï
 ){

3588 
	`utf8_¥ötf
(
°dîr
, "%s:%d:Éxpected %d columns but found %d - "

3590 
sCtx
.
zFûe
, 
°¨tLöe
, 
nCﬁ
, 
i
+1);

3591 
i
 += 2;

3592  
i
<=
nCﬁ
 ){ 
	`sqlôe3_böd_nuŒ
(
pStmt
, i); i++; }

3595 if–
sCtx
.
cTîm
==sCtx.
cCﬁSï
 ){

3597 
	`xRód
(&
sCtx
);

3598 
i
++;

3599 } 
sCtx
.
cTîm
==sCtx.
cCﬁSï
 );

3600 
	`utf8_¥ötf
(
°dîr
, "%s:%d:Éxpected %d columns but found %d - "

3602 
sCtx
.
zFûe
, 
°¨tLöe
, 
nCﬁ
, 
i
);

3604 if–
i
>=
nCﬁ
 ){

3605 
	`sqlôe3_°ï
(
pStmt
);

3606 
rc
 = 
	`sqlôe3_ª£t
(
pStmt
);

3607 if–
rc
!=
SQLITE_OK
 ){

3608 
	`utf8_¥ötf
(
°dîr
, "%s:%d: INSERT faûed: %s\n", 
sCtx
.
zFûe
,

3609 
°¨tLöe
, 
	`sqlôe3_îrmsg
(
p
->
db
));

3612 } 
sCtx
.
cTîm
!=
EOF
 );

3614 
	`xClo£r
(
sCtx
.
ö
);

3615 
	`sqlôe3_‰ì
(
sCtx
.
z
);

3616 
	`sqlôe3_föÆize
(
pStmt
);

3617 if–
√edCommô
 ) 
	`sqlôe3_exec
(
p
->
db
, "COMMIT", 0, 0, 0);

3620 if–
c
=='i' && (
	`°∫cmp
(
azArg
[0], "ödi˚s", 
n
)==0

3621 || 
	`°∫cmp
(
azArg
[0], "ödexes", 
n
)==0) ){

3622 
ShñlSèã
 
d©a
;

3623 *
zEºMsg
 = 0;

3624 
	`›í_db
(
p
, 0);

3625 
	`mem˝y
(&
d©a
, 
p
, (data));

3626 
d©a
.
showHódî
 = 0;

3627 
d©a
.
cMode
 = d©a.
mode
 = 
MODE_Li°
;

3628 if–
nArg
==1 ){

3629 
rc
 = 
	`sqlôe3_exec
(
p
->
db
,

3636 
ˇŒback
, &
d©a
, &
zEºMsg


3638 }if–
nArg
==2 ){

3639 
zShñlSètic
 = 
azArg
[1];

3640 
rc
 = 
	`sqlôe3_exec
(
p
->
db
,

3647 
ˇŒback
, &
d©a
, &
zEºMsg


3649 
zShñlSètic
 = 0;

3651 
	`øw_¥ötf
(
°dîr
, "Usage: .indexes ?LIKE-PATTERN?\n");

3652 
rc
 = 1;

3653 
mëa_comm™d_exô
;

3655 if–
zEºMsg
 ){

3656 
	`utf8_¥ötf
(
°dîr
,"Eº‹: %s\n", 
zEºMsg
);

3657 
	`sqlôe3_‰ì
(
zEºMsg
);

3658 
rc
 = 1;

3659 }if–
rc
 !
SQLITE_OK
 ){

3660 
	`øw_¥ötf
(
°dîr
,

3662 
rc
 = 1;

3666 #ifde‡
SQLITE_ENABLE_IOTRACE


3667 if–
c
=='i' && 
	`°∫cmp
(
azArg
[0], "iŸø˚", 
n
)==0 ){

3668 
SQLITE_API
 (
SQLITE_CDECL
 *
sqlôe3IoTø˚
)(const *, ...);

3669 if–
iŸø˚
 && iŸø˚!=
°dout
 ) 
	`f˛o£
(iotrace);

3670 
iŸø˚
 = 0;

3671 if–
nArg
<2 ){

3672 
sqlôe3IoTø˚
 = 0;

3673 }if–
	`°rcmp
(
azArg
[1], "-")==0 ){

3674 
sqlôe3IoTø˚
 = 
iŸø˚Prötf
;

3675 
iŸø˚
 = 
°dout
;

3677 
iŸø˚
 = 
	`f›í
(
azArg
[1], "w");

3678 if–
iŸø˚
==0 ){

3679 
	`utf8_¥ötf
(
°dîr
, "Eº‹: c™nŸ o≥¿\"%s\"\n", 
azArg
[1]);

3680 
sqlôe3IoTø˚
 = 0;

3681 
rc
 = 1;

3683 
sqlôe3IoTø˚
 = 
iŸø˚Prötf
;

3688 if–
c
=='l' && 
n
>=5 && 
	`°∫cmp
(
azArg
[0], "limits",Ç)==0 ){

3690 c⁄° *
zLimôName
;

3691 
limôCode
;

3692 } 
aLimô
[] = {

3693 { "Àngth", 
SQLITE_LIMIT_LENGTH
 },

3694 { "sql_Àngth", 
SQLITE_LIMIT_SQL_LENGTH
 },

3695 { "cﬁumn", 
SQLITE_LIMIT_COLUMN
 },

3696 { "ex¥_dïth", 
SQLITE_LIMIT_EXPR_DEPTH
 },

3697 { "compound_£À˘", 
SQLITE_LIMIT_COMPOUND_SELECT
 },

3698 { "vdbe_›", 
SQLITE_LIMIT_VDBE_OP
 },

3699 { "fun˘i⁄_¨g", 
SQLITE_LIMIT_FUNCTION_ARG
 },

3700 { "©èched", 
SQLITE_LIMIT_ATTACHED
 },

3701 { "like_∑âîn_Àngth", 
SQLITE_LIMIT_LIKE_PATTERN_LENGTH
 },

3702 { "v¨übÀ_numbî", 
SQLITE_LIMIT_VARIABLE_NUMBER
 },

3703 { "åiggî_dïth", 
SQLITE_LIMIT_TRIGGER_DEPTH
 },

3704 { "w‹kî_thªads", 
SQLITE_LIMIT_WORKER_THREADS
 },

3706 
i
, 
n2
;

3707 
	`›í_db
(
p
, 0);

3708 if–
nArg
==1 ){

3709 
i
=0; i<
	`AºaySize
(
aLimô
); i++){

3710 
	`¥ötf
("%20†%d\n", 
aLimô
[
i
].
zLimôName
,

3711 
	`sqlôe3_limô
(
p
->
db
, 
aLimô
[
i
].
limôCode
, -1));

3713 }if–
nArg
>3 ){

3714 
	`øw_¥ötf
(
°dîr
, "Usage: .limit NAME ?NEW-VALUE?\n");

3715 
rc
 = 1;

3716 
mëa_comm™d_exô
;

3718 
iLimô
 = -1;

3719 
n2
 = 
	`°æí30
(
azArg
[1]);

3720 
i
=0; i<
	`AºaySize
(
aLimô
); i++){

3721 if–
	`sqlôe3_°∫icmp
(
aLimô
[
i
].
zLimôName
, 
azArg
[1], 
n2
)==0 ){

3722 if–
iLimô
<0 ){

3723 
iLimô
 = 
i
;

3725 
	`utf8_¥ötf
(
°dîr
, "ambiguou†limô: \"%s\"\n", 
azArg
[1]);

3726 
rc
 = 1;

3727 
mëa_comm™d_exô
;

3731 if–
iLimô
<0 ){

3732 
	`utf8_¥ötf
(
°dîr
, "unknownÜimit: \"%s\"\n"

3734 
azArg
[1]);

3735 
rc
 = 1;

3736 
mëa_comm™d_exô
;

3738 if–
nArg
==3 ){

3739 
	`sqlôe3_limô
(
p
->
db
, 
aLimô
[
iLimô
].
limôCode
,

3740 ()
	`öãgîVÆue
(
azArg
[2]));

3742 
	`¥ötf
("%20†%d\n", 
aLimô
[
iLimô
].
zLimôName
,

3743 
	`sqlôe3_limô
(
p
->
db
, 
aLimô
[
iLimô
].
limôCode
, -1));

3747 #i‚de‡
SQLITE_OMIT_LOAD_EXTENSION


3748 if–
c
=='l' && 
	`°∫cmp
(
azArg
[0], "lﬂd", 
n
)==0 ){

3749 c⁄° *
zFûe
, *
zProc
;

3750 *
zEºMsg
 = 0;

3751 if–
nArg
<2 ){

3752 
	`øw_¥ötf
(
°dîr
, "Usage: .load FILE ?ENTRYPOINT?\n");

3753 
rc
 = 1;

3754 
mëa_comm™d_exô
;

3756 
zFûe
 = 
azArg
[1];

3757 
zProc
 = 
nArg
>=3 ? 
azArg
[2] : 0;

3758 
	`›í_db
(
p
, 0);

3759 
rc
 = 
	`sqlôe3_lﬂd_exãnsi⁄
(
p
->
db
, 
zFûe
, 
zProc
, &
zEºMsg
);

3760 if–
rc
!=
SQLITE_OK
 ){

3761 
	`utf8_¥ötf
(
°dîr
, "Eº‹: %s\n", 
zEºMsg
);

3762 
	`sqlôe3_‰ì
(
zEºMsg
);

3763 
rc
 = 1;

3768 if–
c
=='l' && 
	`°∫cmp
(
azArg
[0], "log", 
n
)==0 ){

3769 if–
nArg
!=2 ){

3770 
	`øw_¥ötf
(
°dîr
, "Usage: .log FILENAME\n");

3771 
rc
 = 1;

3773 c⁄° *
zFûe
 = 
azArg
[1];

3774 
	`ouçut_fûe_˛o£
(
p
->
pLog
);

3775 
p
->
pLog
 = 
	`ouçut_fûe_›í
(
zFûe
);

3779 if–
c
=='m' && 
	`°∫cmp
(
azArg
[0], "mode", 
n
)==0 ){

3780 c⁄° *
zMode
 = 
nArg
>=2 ? 
azArg
[1] : "";

3781 
n2
 = ()
	`°æí
(
zMode
);

3782 
c2
 = 
zMode
[0];

3783 if–
c2
=='l' && 
n2
>2 && 
	`°∫cmp
(
azArg
[1],"lines",n2)==0 ){

3784 
p
->
mode
 = 
MODE_Löe
;

3785 }if–
c2
=='c' && 
	`°∫cmp
(
azArg
[1],"cﬁumns",
n2
)==0 ){

3786 
p
->
mode
 = 
MODE_Cﬁumn
;

3787 }if–
c2
=='l' && 
n2
>2 && 
	`°∫cmp
(
azArg
[1],"list",n2)==0 ){

3788 
p
->
mode
 = 
MODE_Li°
;

3789 }if–
c2
=='h' && 
	`°∫cmp
(
azArg
[1],"html",
n2
)==0 ){

3790 
p
->
mode
 = 
MODE_Html
;

3791 }if–
c2
=='t' && 
	`°∫cmp
(
azArg
[1],"t˛",
n2
)==0 ){

3792 
p
->
mode
 = 
MODE_T˛
;

3793 
	`sqlôe3_¢¥ötf
((
p
->
cﬁSï¨©‹
),Ö->cﬁSï¨©‹, 
SEP_S∑˚
);

3794 }if–
c2
=='c' && 
	`°∫cmp
(
azArg
[1],"csv",
n2
)==0 ){

3795 
p
->
mode
 = 
MODE_Csv
;

3796 
	`sqlôe3_¢¥ötf
((
p
->
cﬁSï¨©‹
),Ö->cﬁSï¨©‹, 
SEP_Comma
);

3797 
	`sqlôe3_¢¥ötf
((
p
->
rowSï¨©‹
),Ö->rowSï¨©‹, 
SEP_CrLf
);

3798 }if–
c2
=='t' && 
	`°∫cmp
(
azArg
[1],"èbs",
n2
)==0 ){

3799 
p
->
mode
 = 
MODE_Li°
;

3800 
	`sqlôe3_¢¥ötf
((
p
->
cﬁSï¨©‹
),Ö->cﬁSï¨©‹, 
SEP_Tab
);

3801 }if–
c2
=='i' && 
	`°∫cmp
(
azArg
[1],"ö£π",
n2
)==0 ){

3802 
p
->
mode
 = 
MODE_In£π
;

3803 
	`£t_èbÀ_«me
(
p
, 
nArg
>=3 ? 
azArg
[2] : "table");

3804 }if–
c2
=='a' && 
	`°∫cmp
(
azArg
[1],"ascii",
n2
)==0 ){

3805 
p
->
mode
 = 
MODE_Ascii
;

3806 
	`sqlôe3_¢¥ötf
((
p
->
cﬁSï¨©‹
),Ö->cﬁSï¨©‹, 
SEP_Unô
);

3807 
	`sqlôe3_¢¥ötf
((
p
->
rowSï¨©‹
),Ö->rowSï¨©‹, 
SEP_Rec‹d
);

3809 
	`øw_¥ötf
(
°dîr
, "Error: mode should be one of: "

3811 
rc
 = 1;

3813 
p
->
cMode
 =Ö->
mode
;

3816 if–
c
=='n' && 
	`°∫cmp
(
azArg
[0], "nuŒvÆue", 
n
)==0 ){

3817 if–
nArg
==2 ){

3818 
	`sqlôe3_¢¥ötf
((
p
->
nuŒVÆue
),Ö->nullValue,

3819 "%.*s", ()
	`AºaySize
(
p
->
nuŒVÆue
)-1, 
azArg
[1]);

3821 
	`øw_¥ötf
(
°dîr
, "Usage: .nullvalue STRING\n");

3822 
rc
 = 1;

3826 if–
c
=='o' && 
	`°∫cmp
(
azArg
[0], "›í", 
n
)==0 &&Ç>=2 ){

3827 
sqlôe3
 *
ßvedDb
 = 
p
->
db
;

3828 c⁄° *
zSavedFûíame
 = 
p
->
zDbFûíame
;

3829 *
zNewFûíame
 = 0;

3830 
p
->
db
 = 0;

3831 if–
nArg
>=2 ) 
zNewFûíame
 = 
	`sqlôe3_m¥ötf
("%s", 
azArg
[1]);

3832 
p
->
zDbFûíame
 = 
zNewFûíame
;

3833 
	`›í_db
(
p
, 1);

3834 if–
p
->
db
!=0 ){

3835 
	`£ssi⁄_˛o£_Æl
(
p
);

3836 
	`sqlôe3_˛o£
(
ßvedDb
);

3837 
	`sqlôe3_‰ì
(
p
->
zFªeOnClo£
);

3838 
p
->
zFªeOnClo£
 = 
zNewFûíame
;

3840 
	`sqlôe3_‰ì
(
zNewFûíame
);

3841 
p
->
db
 = 
ßvedDb
;

3842 
p
->
zDbFûíame
 = 
zSavedFûíame
;

3846 if–
c
=='o'

3847 && (
	`°∫cmp
(
azArg
[0], "ouçut", 
n
)==0 || strncmp(azArg[0], "once",Ç)==0)

3849 c⁄° *
zFûe
 = 
nArg
>=2 ? 
azArg
[1] : "stdout";

3850 if–
nArg
>2 ){

3851 
	`utf8_¥ötf
(
°dîr
, "Ußge: .%†FILE\n", 
azArg
[0]);

3852 
rc
 = 1;

3853 
mëa_comm™d_exô
;

3855 if–
n
>1 && 
	`°∫cmp
(
azArg
[0], "once",Ç)==0 ){

3856 if–
nArg
<2 ){

3857 
	`øw_¥ötf
(
°dîr
, "Usage: .once FILE\n");

3858 
rc
 = 1;

3859 
mëa_comm™d_exô
;

3861 
p
->
outCou¡
 = 2;

3863 
p
->
outCou¡
 = 0;

3865 
	`ouçut_ª£t
(
p
);

3866 if–
zFûe
[0]=='|' ){

3867 #ifde‡
SQLITE_OMIT_POPEN


3868 
	`øw_¥ötf
(
°dîr
, "Error:ÖipesáreÇot supported inÅhis OS\n");

3869 
rc
 = 1;

3870 
p
->
out
 = 
°dout
;

3872 
p
->
out
 = 
	`p›í
(
zFûe
 + 1, "w");

3873 if–
p
->
out
==0 ){

3874 
	`utf8_¥ötf
(
°dîr
,"Eº‹: c™nŸ o≥¿pùê\"%s\"\n", 
zFûe
 + 1);

3875 
p
->
out
 = 
°dout
;

3876 
rc
 = 1;

3878 
	`sqlôe3_¢¥ötf
((
p
->
outfûe
),Ö->outfûe, "%s", 
zFûe
);

3882 
p
->
out
 = 
	`ouçut_fûe_›í
(
zFûe
);

3883 if–
p
->
out
==0 ){

3884 if–
	`°rcmp
(
zFûe
,"off")!=0 ){

3885 
	`utf8_¥ötf
(
°dîr
,"Eº‹: c™nŸ wrôêtÿ\"%s\"\n", 
zFûe
);

3887 
p
->
out
 = 
°dout
;

3888 
rc
 = 1;

3890 
	`sqlôe3_¢¥ötf
((
p
->
outfûe
),Ö->outfûe, "%s", 
zFûe
);

3895 if–
c
=='p' && 
n
>=3 && 
	`°∫cmp
(
azArg
[0], "print",Ç)==0 ){

3896 
i
;

3897 
i
=1; i<
nArg
; i++){

3898 if–
i
>1 ) 
	`øw_¥ötf
(
p
->
out
, " ");

3899 
	`utf8_¥ötf
(
p
->
out
, "%s", 
azArg
[
i
]);

3901 
	`øw_¥ötf
(
p
->
out
, "\n");

3904 if–
c
=='p' && 
	`°∫cmp
(
azArg
[0], "¥om±", 
n
)==0 ){

3905 if–
nArg
 >= 2) {

3906 
	`°∫˝y
(
maöProm±
,
azArg
[1],()
	`AºaySize
(mainPrompt)-1);

3908 if–
nArg
 >= 3) {

3909 
	`°∫˝y
(
c⁄töueProm±
,
azArg
[2],()
	`AºaySize
(continuePrompt)-1);

3913 if–
c
=='q' && 
	`°∫cmp
(
azArg
[0], "quô", 
n
)==0 ){

3914 
rc
 = 2;

3917 if–
c
=='r' && 
n
>=3 && 
	`°∫cmp
(
azArg
[0], "read",Ç)==0 ){

3918 
FILE
 *
Æt
;

3919 if–
nArg
!=2 ){

3920 
	`øw_¥ötf
(
°dîr
, "Usage: .read FILE\n");

3921 
rc
 = 1;

3922 
mëa_comm™d_exô
;

3924 
Æt
 = 
	`f›í
(
azArg
[1], "rb");

3925 if–
Æt
==0 ){

3926 
	`utf8_¥ötf
(
°dîr
,"Eº‹: c™nŸ o≥¿\"%s\"\n", 
azArg
[1]);

3927 
rc
 = 1;

3929 
rc
 = 
	`¥o˚ss_öput
(
p
, 
Æt
);

3930 
	`f˛o£
(
Æt
);

3934 if–
c
=='r' && 
n
>=3 && 
	`°∫cmp
(
azArg
[0], "restore",Ç)==0 ){

3935 c⁄° *
zSrcFûe
;

3936 c⁄° *
zDb
;

3937 
sqlôe3
 *
pSrc
;

3938 
sqlôe3_backup
 *
pBackup
;

3939 
nTimeout
 = 0;

3941 if–
nArg
==2 ){

3942 
zSrcFûe
 = 
azArg
[1];

3943 
zDb
 = "main";

3944 }if–
nArg
==3 ){

3945 
zSrcFûe
 = 
azArg
[2];

3946 
zDb
 = 
azArg
[1];

3948 
	`øw_¥ötf
(
°dîr
, "Usage: .restore ?DB? FILE\n");

3949 
rc
 = 1;

3950 
mëa_comm™d_exô
;

3952 
rc
 = 
	`sqlôe3_›í
(
zSrcFûe
, &
pSrc
);

3953 if–
rc
!=
SQLITE_OK
 ){

3954 
	`utf8_¥ötf
(
°dîr
, "Eº‹: c™nŸ o≥¿\"%s\"\n", 
zSrcFûe
);

3955 
	`sqlôe3_˛o£
(
pSrc
);

3958 
	`›í_db
(
p
, 0);

3959 
pBackup
 = 
	`sqlôe3_backup_öô
(
p
->
db
, 
zDb
, 
pSrc
, "main");

3960 if–
pBackup
==0 ){

3961 
	`utf8_¥ötf
(
°dîr
, "Eº‹: %s\n", 
	`sqlôe3_îrmsg
(
p
->
db
));

3962 
	`sqlôe3_˛o£
(
pSrc
);

3965  (
rc
 = 
	`sqlôe3_backup_°ï
(
pBackup
,100))==
SQLITE_OK


3966 || 
rc
==
SQLITE_BUSY
 ){

3967 if–
rc
==
SQLITE_BUSY
 ){

3968 if–
nTimeout
++ >= 3 ) ;

3969 
	`sqlôe3_¶ìp
(100);

3972 
	`sqlôe3_backup_föish
(
pBackup
);

3973 if–
rc
==
SQLITE_DONE
 ){

3974 
rc
 = 0;

3975 }if–
rc
==
SQLITE_BUSY
 ||Ñc==
SQLITE_LOCKED
 ){

3976 
	`øw_¥ötf
(
°dîr
, "Error: source database is busy\n");

3977 
rc
 = 1;

3979 
	`utf8_¥ötf
(
°dîr
, "Eº‹: %s\n", 
	`sqlôe3_îrmsg
(
p
->
db
));

3980 
rc
 = 1;

3982 
	`sqlôe3_˛o£
(
pSrc
);

3986 if–
c
=='s' && 
	`°∫cmp
(
azArg
[0], "sˇn°©s", 
n
)==0 ){

3987 if–
nArg
==2 ){

3988 
p
->
sˇn°©sOn
 = 
	`boﬁónVÆue
(
azArg
[1]);

3989 #i‚de‡
SQLITE_ENABLE_STMT_SCANSTATUS


3990 
	`øw_¥ötf
(
°dîr
, "Warning: .scanstatsÇotávailable inÅhis build.\n");

3993 
	`øw_¥ötf
(
°dîr
, "Usage: .scanstats on|off\n");

3994 
rc
 = 1;

3998 if–
c
=='s' && 
	`°∫cmp
(
azArg
[0], "schema", 
n
)==0 ){

3999 
ShñlSèã
 
d©a
;

4000 *
zEºMsg
 = 0;

4001 
	`›í_db
(
p
, 0);

4002 
	`mem˝y
(&
d©a
, 
p
, (data));

4003 
d©a
.
showHódî
 = 0;

4004 
d©a
.
cMode
 = d©a.
mode
 = 
MODE_Semi
;

4005 if–
nArg
>=2 && 
	`›ti⁄M©ch
(
azArg
[1], "indent") ){

4006 
d©a
.
cMode
 = d©a.
mode
 = 
MODE_Pªây
;

4007 
nArg
--;

4008 if–
nArg
==2 ) 
azArg
[1] =ázArg[2];

4010 if–
nArg
==2 && 
azArg
[1][0]!='-' ){

4011 
i
;

4012 
i
=0; 
azArg
[1][i]; i++ËazArg[1][i] = 
	`ToLowî
(azArg[1][i]);

4013 if–
	`°rcmp
(
azArg
[1],"sqlite_master")==0 ){

4014 *
√w_¨gv
[2], *
√w_cﬁv
[2];

4015 
√w_¨gv
[0] = "CREATE TABLE sqlite_master (\n"

4022 
√w_¨gv
[1] = 0;

4023 
√w_cﬁv
[0] = "sql";

4024 
√w_cﬁv
[1] = 0;

4025 
	`ˇŒback
(&
d©a
, 1, 
√w_¨gv
, 
√w_cﬁv
);

4026 
rc
 = 
SQLITE_OK
;

4027 }if–
	`°rcmp
(
azArg
[1],"sqlite_temp_master")==0 ){

4028 *
√w_¨gv
[2], *
√w_cﬁv
[2];

4029 
√w_¨gv
[0] = "CREATE TEMP TABLE sqlite_temp_master (\n"

4036 
√w_¨gv
[1] = 0;

4037 
√w_cﬁv
[0] = "sql";

4038 
√w_cﬁv
[1] = 0;

4039 
	`ˇŒback
(&
d©a
, 1, 
√w_¨gv
, 
√w_cﬁv
);

4040 
rc
 = 
SQLITE_OK
;

4042 
zShñlSètic
 = 
azArg
[1];

4043 
rc
 = 
	`sqlôe3_exec
(
p
->
db
,

4051 
ˇŒback
, &
d©a
, &
zEºMsg
);

4052 
zShñlSètic
 = 0;

4054 }if–
nArg
==1 ){

4055 
rc
 = 
	`sqlôe3_exec
(
p
->
db
,

4062 
ˇŒback
, &
d©a
, &
zEºMsg


4065 
	`øw_¥ötf
(
°dîr
, "Usage: .schema ?--indent? ?LIKE-PATTERN?\n");

4066 
rc
 = 1;

4067 
mëa_comm™d_exô
;

4069 if–
zEºMsg
 ){

4070 
	`utf8_¥ötf
(
°dîr
,"Eº‹: %s\n", 
zEºMsg
);

4071 
	`sqlôe3_‰ì
(
zEºMsg
);

4072 
rc
 = 1;

4073 }if–
rc
 !
SQLITE_OK
 ){

4074 
	`øw_¥ötf
(
°dîr
,"Error: querying schema information\n");

4075 
rc
 = 1;

4077 
rc
 = 0;

4081 #i‡
	`deföed
(
SQLITE_DEBUG
Ë&& deföed(
SQLITE_ENABLE_SELECTTRACE
)

4082 if–
c
=='s' && 
n
==11 && 
	`°∫cmp
(
azArg
[0], "selecttrace",Ç)==0 ){

4083 
sqlôe3Sñe˘Tø˚
 = 
	`öãgîVÆue
(
azArg
[1]);

4087 #i‡
	`deföed
(
SQLITE_ENABLE_SESSION
)

4088 if–
c
=='s' && 
	`°∫cmp
(
azArg
[0],"£ssi⁄",
n
)==0 &&Ç>=3 ){

4089 
O≥nSessi⁄
 *
pSessi⁄
 = &
p
->
aSessi⁄
[0];

4090 **
azCmd
 = &
azArg
[1];

4091 
iSes
 = 0;

4092 
nCmd
 = 
nArg
 - 1;

4093 
i
;

4094 if–
nArg
<=1 ) 
£ssi⁄_sy¡ax_îr‹
;

4095 
	`›í_db
(
p
, 0);

4096 if–
nArg
>=3 ){

4097 
iSes
=0; iSes<
p
->
nSessi⁄
; iSes++){

4098 if–
	`°rcmp
(
p
->
aSessi⁄
[
iSes
].
zName
, 
azArg
[1])==0 ) ;

4100 if–
iSes
<
p
->
nSessi⁄
 ){

4101 
pSessi⁄
 = &
p
->
aSessi⁄
[
iSes
];

4102 
azCmd
++;

4103 
nCmd
--;

4105 
pSessi⁄
 = &
p
->
aSessi⁄
[0];

4106 
iSes
 = 0;

4114 if–
	`°rcmp
(
azCmd
[0],"attach")==0 ){

4115 if–
nCmd
!=2 ) 
£ssi⁄_sy¡ax_îr‹
;

4116 if–
pSessi⁄
->
p
==0 ){

4117 
£ssi⁄_nŸ_›í
:

4118 
	`øw_¥ötf
(
°dîr
, "ERROR: No sessionsáre open\n");

4120 
rc
 = 
	`sqlôe3£ssi⁄_©èch
(
pSessi⁄
->
p
, 
azCmd
[1]);

4121 if–
rc
 ){

4122 
	`øw_¥ötf
(
°dîr
, "ERROR: sqlôe3£ssi⁄_©èch(Ëªtu∫†%d\n", 
rc
);

4123 
rc
 = 0;

4132 if–
	`°rcmp
(
azCmd
[0],"changeset")==0 || strcmp(azCmd[0],"patchset")==0 ){

4133 
FILE
 *
out
 = 0;

4134 if–
nCmd
!=2 ) 
£ssi⁄_sy¡ax_îr‹
;

4135 if–
pSessi⁄
->
p
==0 ) 
£ssi⁄_nŸ_›í
;

4136 
out
 = 
	`f›í
(
azCmd
[1], "wb");

4137 if–
out
==0 ){

4138 
	`utf8_¥ötf
(
°dîr
, "ERROR: c™nŸ o≥¿\"%s\" f‹ wrôög\n", 
azCmd
[1]);

4140 
szChng
;

4141 *
pChng
;

4142 if–
azCmd
[0][0]=='c' ){

4143 
rc
 = 
	`sqlôe3£ssi⁄_ch™ge£t
(
pSessi⁄
->
p
, &
szChng
, &
pChng
);

4145 
rc
 = 
	`sqlôe3£ssi⁄_∑tch£t
(
pSessi⁄
->
p
, &
szChng
, &
pChng
);

4147 if–
rc
 ){

4148 
	`¥ötf
("Eº‹:Éº‹ codê%d\n", 
rc
);

4149 
rc
 = 0;

4151 if–
pChng


4152 && 
	`fwrôe
(
pChng
, 
szChng
, 1, 
out
)!=1 ){

4153 
	`øw_¥ötf
(
°dîr
, "ERROR: FailedÅo writeÉntire %d-byte output\n",

4154 
szChng
);

4156 
	`sqlôe3_‰ì
(
pChng
);

4157 
	`f˛o£
(
out
);

4164 if–
	`°rcmp
(
azCmd
[0], "close")==0 ){

4165 if–
nCmd
!=1 ) 
£ssi⁄_sy¡ax_îr‹
;

4166 if–
p
->
nSessi⁄
 ){

4167 
	`£ssi⁄_˛o£
(
pSessi⁄
);

4168 
p
->
aSessi⁄
[
iSes
] =Ö->aSessi⁄[--p->
nSessi⁄
];

4175 if–
	`°rcmp
(
azCmd
[0], "enable")==0 ){

4176 
ii
;

4177 if–
nCmd
>2 ) 
£ssi⁄_sy¡ax_îr‹
;

4178 
ii
 = 
nCmd
==1 ? -1 : 
	`boﬁónVÆue
(
azCmd
[1]);

4179 if–
p
->
nSessi⁄
 ){

4180 
ii
 = 
	`sqlôe3£ssi⁄_íabÀ
(
pSessi⁄
->
p
, ii);

4181 
	`utf8_¥ötf
(
p
->
out
, "session %sÉnable flag = %d\n",

4182 
pSessi⁄
->
zName
, 
ii
);

4189 if–
	`°rcmp
(
azCmd
[0], "filter")==0 ){

4190 
ii
, 
nByã
;

4191 if–
nCmd
<2 ) 
£ssi⁄_sy¡ax_îr‹
;

4192 if–
p
->
nSessi⁄
 ){

4193 
ii
=0; ii<
pSessi⁄
->
nFûãr
; ii++){

4194 
	`sqlôe3_‰ì
(
pSessi⁄
->
azFûãr
[
ii
]);

4196 
	`sqlôe3_‰ì
(
pSessi⁄
->
azFûãr
);

4197 
nByã
 = (
pSessi⁄
->
azFûãr
[0])*(
nCmd
-1);

4198 
pSessi⁄
->
azFûãr
 = 
	`sqlôe3_mÆloc
–
nByã
 );

4199 if–
pSessi⁄
->
azFûãr
==0 ){

4200 
	`øw_¥ötf
(
°dîr
, "Error: out or memory\n");

4201 
	`exô
(1);

4203 
ii
=1; ii<
nCmd
; ii++){

4204 
pSessi⁄
->
azFûãr
[
ii
-1] = 
	`sqlôe3_m¥ötf
("%s", 
azCmd
[ii]);

4206 
pSessi⁄
->
nFûãr
 = 
ii
-1;

4213 if–
	`°rcmp
(
azCmd
[0], "indirect")==0 ){

4214 
ii
;

4215 if–
nCmd
>2 ) 
£ssi⁄_sy¡ax_îr‹
;

4216 
ii
 = 
nCmd
==1 ? -1 : 
	`boﬁónVÆue
(
azCmd
[1]);

4217 if–
p
->
nSessi⁄
 ){

4218 
ii
 = 
	`sqlôe3£ssi⁄_ödúe˘
(
pSessi⁄
->
p
, ii);

4219 
	`utf8_¥ötf
(
p
->
out
, "session %s indirect flag = %d\n",

4220 
pSessi⁄
->
zName
, 
ii
);

4227 if–
	`°rcmp
(
azCmd
[0], "isempty")==0 ){

4228 
ii
;

4229 if–
nCmd
!=1 ) 
£ssi⁄_sy¡ax_îr‹
;

4230 if–
p
->
nSessi⁄
 ){

4231 
ii
 = 
	`sqlôe3£ssi⁄_i£m±y
(
pSessi⁄
->
p
);

4232 
	`utf8_¥ötf
(
p
->
out
, "session %s isempty flag = %d\n",

4233 
pSessi⁄
->
zName
, 
ii
);

4240 if–
	`°rcmp
(
azCmd
[0],"list")==0 ){

4241 
i
=0; i<
p
->
nSessi⁄
; i++){

4242 
	`utf8_¥ötf
(
p
->
out
, "%d %s\n", 
i
,Ö->
aSessi⁄
[i].
zName
);

4250 if–
	`°rcmp
(
azCmd
[0],"open")==0 ){

4251 *
zName
;

4252 if–
nCmd
!=3 ) 
£ssi⁄_sy¡ax_îr‹
;

4253 
zName
 = 
azCmd
[2];

4254 if–
zName
[0]==0 ) 
£ssi⁄_sy¡ax_îr‹
;

4255 
i
=0; i<
p
->
nSessi⁄
; i++){

4256 if–
	`°rcmp
(
p
->
aSessi⁄
[
i
].
zName
,zName)==0 ){

4257 
	`utf8_¥ötf
(
°dîr
, "Sessi⁄ \"%s\"áÃódyÉxi°s\n", 
zName
);

4258 
mëa_comm™d_exô
;

4261 if–
p
->
nSessi⁄
>=
	`AºaySize
’->
aSessi⁄
) ){

4262 
	`øw_¥ötf
(
°dîr
, "Maximum o‡%d sessi⁄s\n", 
	`AºaySize
(
p
->
aSessi⁄
));

4263 
mëa_comm™d_exô
;

4265 
pSessi⁄
 = &
p
->
aSessi⁄
[p->
nSessi⁄
];

4266 
rc
 = 
	`sqlôe3£ssi⁄_¸óã
(
p
->
db
, 
azCmd
[1], &
pSessi⁄
->p);

4267 if–
rc
 ){

4268 
	`øw_¥ötf
(
°dîr
, "C™nŸ o≥¿£ssi⁄:Éº‹ code=%d\n", 
rc
);

4269 
rc
 = 0;

4270 
mëa_comm™d_exô
;

4272 
pSessi⁄
->
nFûãr
 = 0;

4273 
	`sqlôe3£ssi⁄_èbÀ_fûãr
(
pSessi⁄
->
p
, 
£ssi⁄_fûãr
,ÖSession);

4274 
p
->
nSessi⁄
++;

4275 
pSessi⁄
->
zName
 = 
	`sqlôe3_m¥ötf
("%s", zName);

4278 
£ssi⁄_sy¡ax_îr‹
:

4279 
	`£ssi⁄_hñp
(
p
);

4283 #ifde‡
SQLITE_DEBUG


4286 if–
c
=='s' && 
n
>=10 && 
	`°∫cmp
(
azArg
[0], "selftest-", 9)==0 ){

4287 if–
	`°∫cmp
(
azArg
[0]+9, "boﬁón", 
n
-9)==0 ){

4288 
i
, 
v
;

4289 
i
=1; i<
nArg
; i++){

4290 
v
 = 
	`boﬁónVÆue
(
azArg
[
i
]);

4291 
	`utf8_¥ötf
(
p
->
out
, "%s: %d 0x%x\n", 
azArg
[
i
], 
v
, v);

4294 if–
	`°∫cmp
(
azArg
[0]+9, "öãgî", 
n
-9)==0 ){

4295 
i
; 
sqlôe3_öt64
 
v
;

4296 
i
=1; i<
nArg
; i++){

4297 
zBuf
[200];

4298 
v
 = 
	`öãgîVÆue
(
azArg
[
i
]);

4299 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf,"%s: %Œd 0x%Œx\n", 
azArg
[
i
],
v
,v);

4300 
	`utf8_¥ötf
(
p
->
out
, "%s", 
zBuf
);

4306 if–
c
=='s' && 
	`°∫cmp
(
azArg
[0], "£∑øt‹", 
n
)==0 ){

4307 if–
nArg
<2 ||ÇArg>3 ){

4308 
	`øw_¥ötf
(
°dîr
, "Usage: .separator COL ?ROW?\n");

4309 
rc
 = 1;

4311 if–
nArg
>=2 ){

4312 
	`sqlôe3_¢¥ötf
((
p
->
cﬁSï¨©‹
),Ö->colSeparator,

4313 "%.*s", ()
	`AºaySize
(
p
->
cﬁSï¨©‹
)-1, 
azArg
[1]);

4315 if–
nArg
>=3 ){

4316 
	`sqlôe3_¢¥ötf
((
p
->
rowSï¨©‹
),Ö->rowSeparator,

4317 "%.*s", ()
	`AºaySize
(
p
->
rowSï¨©‹
)-1, 
azArg
[2]);

4321 if–
c
=='s'

4322 && (
	`°∫cmp
(
azArg
[0], "shñl", 
n
)==0 || strncmp(azArg[0],"system",n)==0)

4324 *
zCmd
;

4325 
i
, 
x
;

4326 if–
nArg
<2 ){

4327 
	`øw_¥ötf
(
°dîr
, "Usage: .system COMMAND\n");

4328 
rc
 = 1;

4329 
mëa_comm™d_exô
;

4331 
zCmd
 = 
	`sqlôe3_m¥ötf
(
	`°rchr
(
azArg
[1],' ')==0?"%s":"\"%s\"",ázArg[1]);

4332 
i
=2; i<
nArg
; i++){

4333 
zCmd
 = 
	`sqlôe3_m¥ötf
(
	`°rchr
(
azArg
[
i
],' ')==0?"%z %s":"%z \"%s\"",

4334 
zCmd
, 
azArg
[
i
]);

4336 
x
 = 
	`sy°em
(
zCmd
);

4337 
	`sqlôe3_‰ì
(
zCmd
);

4338 if–
x
 ) 
	`øw_¥ötf
(
°dîr
, "System commandÑeturns %d\n", x);

4341 if–
c
=='s' && 
	`°∫cmp
(
azArg
[0], "show", 
n
)==0 ){

4342 c⁄° *
azBoﬁ
[] = { "off", "on", "full", "unk" };

4343 
i
;

4344 if–
nArg
!=1 ){

4345 
	`øw_¥ötf
(
°dîr
, "Usage: .show\n");

4346 
rc
 = 1;

4347 
mëa_comm™d_exô
;

4349 
	`utf8_¥ötf
(
p
->
out
, "%12.12s: %s\n","echo", 
azBoﬁ
[p->
echoOn
!=0]);

4350 
	`utf8_¥ötf
(
p
->
out
, "%12.12s: %s\n","eqp", 
azBoﬁ
[p->
autoEQP
&3]);

4351 
	`utf8_¥ötf
(
p
->
out
, "%12.12s: %s\n","explain",

4352 
p
->
mode
==
MODE_Ex∂aö
 ? "⁄" :Ö->
autoEx∂aö
 ? "auto" : "off");

4353 
	`utf8_¥ötf
(
p
->
out
,"%12.12s: %s\n","hódîs", 
azBoﬁ
[p->
showHódî
!=0]);

4354 
	`utf8_¥ötf
(
p
->
out
, "%12.12s: %s\n","mode", 
modeDes¸
[p->
mode
]);

4355 
	`utf8_¥ötf
(
p
->
out
, "%12.12s: ", "nullvalue");

4356 
	`ouçut_c_°rög
(
p
->
out
,Ö->
nuŒVÆue
);

4357 
	`øw_¥ötf
(
p
->
out
, "\n");

4358 
	`utf8_¥ötf
(
p
->
out
,"%12.12s: %s\n","output",

4359 
	`°æí30
(
p
->
outfûe
) ?Ö->outfile : "stdout");

4360 
	`utf8_¥ötf
(
p
->
out
,"%12.12s: ", "colseparator");

4361 
	`ouçut_c_°rög
(
p
->
out
,Ö->
cﬁSï¨©‹
);

4362 
	`øw_¥ötf
(
p
->
out
, "\n");

4363 
	`utf8_¥ötf
(
p
->
out
,"%12.12s: ", "rowseparator");

4364 
	`ouçut_c_°rög
(
p
->
out
,Ö->
rowSï¨©‹
);

4365 
	`øw_¥ötf
(
p
->
out
, "\n");

4366 
	`utf8_¥ötf
(
p
->
out
, "%12.12s: %s\n","°©s", 
azBoﬁ
[p->
°©sOn
!=0]);

4367 
	`utf8_¥ötf
(
p
->
out
, "%12.12s: ", "width");

4368 
i
=0;i<()
	`AºaySize
(
p
->
cﬁWidth
) &&Ö->colWidth[i] != 0;i++) {

4369 
	`øw_¥ötf
(
p
->
out
, "%d ",Ö->
cﬁWidth
[
i
]);

4371 
	`øw_¥ötf
(
p
->
out
, "\n");

4374 if–
c
=='s' && 
	`°∫cmp
(
azArg
[0], "°©s", 
n
)==0 ){

4375 if–
nArg
==2 ){

4376 
p
->
°©sOn
 = 
	`boﬁónVÆue
(
azArg
[1]);

4377 }if–
nArg
==1 ){

4378 
	`di•œy_°©s
(
p
->
db
,Ö, 0);

4380 
	`øw_¥ötf
(
°dîr
, "Usage: .stats ?on|off?\n");

4381 
rc
 = 1;

4385 if–
c
=='t' && 
n
>1 && 
	`°∫cmp
(
azArg
[0], "tables",Ç)==0 ){

4386 
sqlôe3_°mt
 *
pStmt
;

4387 **
azResu…
;

4388 
nRow
, 
nAŒoc
;

4389 *
zSql
 = 0;

4390 
ii
;

4391 
	`›í_db
(
p
, 0);

4392 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
p
->
db
, "PRAGMA d©aba£_li°", -1, &
pStmt
, 0);

4393 if–
rc
 )  
	`shñlD©aba£Eº‹
(
p
->
db
);

4398 
zSql
 = 
	`sqlôe3_m¥ötf
(

4403  
zSql
 && 
	`sqlôe3_°ï
(
pStmt
)==
SQLITE_ROW
 ){

4404 c⁄° *
zDbName
 = (c⁄° *)
	`sqlôe3_cﬁumn_ãxt
(
pStmt
, 1);

4405 if–
zDbName
==0 || 
	`°rcmp
(zDbName,"main")==0 ) ;

4406 if–
	`°rcmp
(
zDbName
,"temp")==0 ){

4407 
zSql
 = 
	`sqlôe3_m¥ötf
(

4412 " ANDÇamêLIKE ?1", 
zSql
);

4414 
zSql
 = 
	`sqlôe3_m¥ötf
(

4419 " ANDÇamêLIKE ?1", 
zSql
, 
zDbName
, zDbName);

4422 
rc
 = 
	`sqlôe3_föÆize
(
pStmt
);

4423 if–
zSql
 && 
rc
==
SQLITE_OK
 ){

4424 
zSql
 = 
	`sqlôe3_m¥ötf
("%z ORDER BY 1", zSql);

4425 if–
zSql
 ) 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
p
->
db
, zSql, -1, &
pStmt
, 0);

4427 
	`sqlôe3_‰ì
(
zSql
);

4428 if–!
zSql
 )  
	`shñlNomemEº‹
();

4429 if–
rc
 )  
	`shñlD©aba£Eº‹
(
p
->
db
);

4433 
nRow
 = 
nAŒoc
 = 0;

4434 
azResu…
 = 0;

4435 if–
nArg
>1 ){

4436 
	`sqlôe3_böd_ãxt
(
pStmt
, 1, 
azArg
[1], -1, 
SQLITE_TRANSIENT
);

4438 
	`sqlôe3_böd_ãxt
(
pStmt
, 1, "%", -1, 
SQLITE_STATIC
);

4440  
	`sqlôe3_°ï
(
pStmt
)==
SQLITE_ROW
 ){

4441 if–
nRow
>=
nAŒoc
 ){

4442 **
azNew
;

4443 
n2
 = 
nAŒoc
*2 + 10;

4444 
azNew
 = 
	`sqlôe3_ªÆloc64
(
azResu…
, ◊zResu…[0])*
n2
);

4445 if–
azNew
==0 ){

4446 
rc
 = 
	`shñlNomemEº‹
();

4449 
nAŒoc
 = 
n2
;

4450 
azResu…
 = 
azNew
;

4452 
azResu…
[
nRow
] = 
	`sqlôe3_m¥ötf
("%s", 
	`sqlôe3_cﬁumn_ãxt
(
pStmt
, 0));

4453 if–0==
azResu…
[
nRow
] ){

4454 
rc
 = 
	`shñlNomemEº‹
();

4457 
nRow
++;

4459 if–
	`sqlôe3_föÆize
(
pStmt
)!=
SQLITE_OK
 ){

4460 
rc
 = 
	`shñlD©aba£Eº‹
(
p
->
db
);

4464 if–
rc
==0 && 
nRow
>0 ){

4465 
Àn
, 
maxÀn
 = 0;

4466 
i
, 
j
;

4467 
nPrötCﬁ
, 
nPrötRow
;

4468 
i
=0; i<
nRow
; i++){

4469 
Àn
 = 
	`°æí30
(
azResu…
[
i
]);

4470 if–
Àn
>
maxÀn
 ) maxlen =Üen;

4472 
nPrötCﬁ
 = 80/(
maxÀn
+2);

4473 if–
nPrötCﬁ
<1 )ÇPrintCol = 1;

4474 
nPrötRow
 = (
nRow
 + 
nPrötCﬁ
 - 1)/nPrintCol;

4475 
i
=0; i<
nPrötRow
; i++){

4476 
j
=
i
; j<
nRow
; j+=
nPrötRow
){

4477 *
zSp
 = 
j
<
nPrötRow
 ? "" : " ";

4478 
	`utf8_¥ötf
(
p
->
out
, "%s%-*s", 
zSp
, 
maxÀn
,

4479 
azResu…
[
j
] ?ázResult[j]:"");

4481 
	`øw_¥ötf
(
p
->
out
, "\n");

4485 
ii
=0; ii<
nRow
; ii++Ë
	`sqlôe3_‰ì
(
azResu…
[ii]);

4486 
	`sqlôe3_‰ì
(
azResu…
);

4489 if–
c
=='t' && 
n
>=8 && 
	`°∫cmp
(
azArg
[0], "ã°˘æ",Ç)==0 && 
nArg
>=2 ){

4491 c⁄° *
zCålName
;

4492 
˘æCode
;

4493 } 
aCål
[] = {

4494 { "¥ng_ßve", 
SQLITE_TESTCTRL_PRNG_SAVE
 },

4495 { "¥ng_ª°‹e", 
SQLITE_TESTCTRL_PRNG_RESTORE
 },

4496 { "¥ng_ª£t", 
SQLITE_TESTCTRL_PRNG_RESET
 },

4497 { "bôvec_ã°", 
SQLITE_TESTCTRL_BITVEC_TEST
 },

4498 { "Áu…_ö°Æl", 
SQLITE_TESTCTRL_FAULT_INSTALL
 },

4499 { "bíign_mÆloc_hooks", 
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS
 },

4500 { "≥ndög_byã", 
SQLITE_TESTCTRL_PENDING_BYTE
 },

4501 { "as£π", 
SQLITE_TESTCTRL_ASSERT
 },

4502 { "Æways", 
SQLITE_TESTCTRL_ALWAYS
 },

4503 { "ª£rve", 
SQLITE_TESTCTRL_RESERVE
 },

4504 { "›timiz©i⁄s", 
SQLITE_TESTCTRL_OPTIMIZATIONS
 },

4505 { "iskeyw‹d", 
SQLITE_TESTCTRL_ISKEYWORD
 },

4506 { "s¸©chmÆloc", 
SQLITE_TESTCTRL_SCRATCHMALLOC
 },

4507 { "byã‹dî", 
SQLITE_TESTCTRL_BYTEORDER
 },

4508 { "√vî_c‹ru±", 
SQLITE_TESTCTRL_NEVER_CORRUPT
 },

4509 { "impo°î", 
SQLITE_TESTCTRL_IMPOSTER
 },

4511 
ã°˘æ
 = -1;

4512 
rc2
 = 0;

4513 
i
, 
n2
;

4514 
	`›í_db
(
p
, 0);

4518 
n2
 = 
	`°æí30
(
azArg
[1]);

4519 
i
=0; i<
	`AºaySize
(
aCål
); i++){

4520 if–
	`°∫cmp
(
azArg
[1], 
aCål
[
i
].
zCålName
, 
n2
)==0 ){

4521 if–
ã°˘æ
<0 ){

4522 
ã°˘æ
 = 
aCål
[
i
].
˘æCode
;

4524 
	`utf8_¥ötf
(
°dîr
, "ambiguou†›ti⁄Çame: \"%s\"\n", 
azArg
[1]);

4525 
ã°˘æ
 = -1;

4530 if–
ã°˘æ
<0 )Åe°˘æ = ()
	`öãgîVÆue
(
azArg
[1]);

4531 if–(
ã°˘æ
<
SQLITE_TESTCTRL_FIRST
Ë|| (ã°˘æ>
SQLITE_TESTCTRL_LAST
) ){

4532 
	`utf8_¥ötf
(
°dîr
,"Eº‹: invÆidÅe°˘æ o±i⁄: %s\n", 
azArg
[1]);

4534 
ã°˘æ
){

4537 
SQLITE_TESTCTRL_OPTIMIZATIONS
:

4538 
SQLITE_TESTCTRL_RESERVE
:

4539 if–
nArg
==3 ){

4540 
›t
 = ()
	`°πﬁ
(
azArg
[2], 0, 0);

4541 
rc2
 = 
	`sqlôe3_ã°_c⁄åﬁ
(
ã°˘æ
, 
p
->
db
, 
›t
);

4542 
	`øw_¥ötf
(
p
->
out
, "%d (0x%08x)\n", 
rc2
,Ñc2);

4544 
	`utf8_¥ötf
(
°dîr
,"Error:Åestctrl %sÅakesá single int option\n",

4545 
azArg
[1]);

4550 
SQLITE_TESTCTRL_PRNG_SAVE
:

4551 
SQLITE_TESTCTRL_PRNG_RESTORE
:

4552 
SQLITE_TESTCTRL_PRNG_RESET
:

4553 
SQLITE_TESTCTRL_BYTEORDER
:

4554 if–
nArg
==2 ){

4555 
rc2
 = 
	`sqlôe3_ã°_c⁄åﬁ
(
ã°˘æ
);

4556 
	`øw_¥ötf
(
p
->
out
, "%d (0x%08x)\n", 
rc2
,Ñc2);

4558 
	`utf8_¥ötf
(
°dîr
,"Error:Åestctrl %sÅakesÇo options\n",

4559 
azArg
[1]);

4564 
SQLITE_TESTCTRL_PENDING_BYTE
:

4565 if–
nArg
==3 ){

4566 
›t
 = ()
	`öãgîVÆue
(
azArg
[2]);

4567 
rc2
 = 
	`sqlôe3_ã°_c⁄åﬁ
(
ã°˘æ
, 
›t
);

4568 
	`øw_¥ötf
(
p
->
out
, "%d (0x%08x)\n", 
rc2
,Ñc2);

4570 
	`utf8_¥ötf
(
°dîr
,"Error:Åestctrl %sÅakesá single unsigned"

4571 " i¡ o±i⁄\n", 
azArg
[1]);

4576 
SQLITE_TESTCTRL_ASSERT
:

4577 
SQLITE_TESTCTRL_ALWAYS
:

4578 
SQLITE_TESTCTRL_NEVER_CORRUPT
:

4579 if–
nArg
==3 ){

4580 
›t
 = 
	`boﬁónVÆue
(
azArg
[2]);

4581 
rc2
 = 
	`sqlôe3_ã°_c⁄åﬁ
(
ã°˘æ
, 
›t
);

4582 
	`øw_¥ötf
(
p
->
out
, "%d (0x%08x)\n", 
rc2
,Ñc2);

4584 
	`utf8_¥ötf
(
°dîr
,"Error:Åestctrl %sÅakesá single int option\n",

4585 
azArg
[1]);

4590 #ifde‡
SQLITE_N_KEYWORD


4591 
SQLITE_TESTCTRL_ISKEYWORD
:

4592 if–
nArg
==3 ){

4593 c⁄° *
›t
 = 
azArg
[2];

4594 
rc2
 = 
	`sqlôe3_ã°_c⁄åﬁ
(
ã°˘æ
, 
›t
);

4595 
	`øw_¥ötf
(
p
->
out
, "%d (0x%08x)\n", 
rc2
,Ñc2);

4597 
	`utf8_¥ötf
(
°dîr
,

4599 
azArg
[1]);

4604 
SQLITE_TESTCTRL_IMPOSTER
:

4605 if–
nArg
==5 ){

4606 
rc2
 = 
	`sqlôe3_ã°_c⁄åﬁ
(
ã°˘æ
, 
p
->
db
,

4607 
azArg
[2],

4608 
	`öãgîVÆue
(
azArg
[3]),

4609 
	`öãgîVÆue
(
azArg
[4]));

4610 
	`øw_¥ötf
(
p
->
out
, "%d (0x%08x)\n", 
rc2
,Ñc2);

4612 
	`øw_¥ötf
(
°dîr
,"Usage: .testctrl imposter dbName onoffÅnum\n");

4616 
SQLITE_TESTCTRL_BITVEC_TEST
:

4617 
SQLITE_TESTCTRL_FAULT_INSTALL
:

4618 
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS
:

4619 
SQLITE_TESTCTRL_SCRATCHMALLOC
:

4621 
	`utf8_¥ötf
(
°dîr
,

4623 
azArg
[1]);

4629 if–
c
=='t' && 
n
>4 && 
	`°∫cmp
(
azArg
[0], "timeout",Ç)==0 ){

4630 
	`›í_db
(
p
, 0);

4631 
	`sqlôe3_busy_timeout
(
p
->
db
, 
nArg
>=2 ? ()
	`öãgîVÆue
(
azArg
[1]) : 0);

4634 if–
c
=='t' && 
n
>=5 && 
	`°∫cmp
(
azArg
[0], "timer",Ç)==0 ){

4635 if–
nArg
==2 ){

4636 
íabÀTimî
 = 
	`boﬁónVÆue
(
azArg
[1]);

4637 if–
íabÀTimî
 && !
HAS_TIMER
 ){

4638 
	`øw_¥ötf
(
°dîr
, "Error:ÅimerÇotávailable onÅhis system.\n");

4639 
íabÀTimî
 = 0;

4642 
	`øw_¥ötf
(
°dîr
, "Usage: .timer on|off\n");

4643 
rc
 = 1;

4647 if–
c
=='t' && 
	`°∫cmp
(
azArg
[0], "åa˚", 
n
)==0 ){

4648 
	`›í_db
(
p
, 0);

4649 if–
nArg
!=2 ){

4650 
	`øw_¥ötf
(
°dîr
, "Usage: .trace FILE|off\n");

4651 
rc
 = 1;

4652 
mëa_comm™d_exô
;

4654 
	`ouçut_fûe_˛o£
(
p
->
åa˚Out
);

4655 
p
->
åa˚Out
 = 
	`ouçut_fûe_›í
(
azArg
[1]);

4656 #i‡!
	`deföed
(
SQLITE_OMIT_TRACE
Ë&& !deföed(
SQLITE_OMIT_FLOATING_POINT
)

4657 if–
p
->
åa˚Out
==0 ){

4658 
	`sqlôe3_åa˚
(
p
->
db
, 0, 0);

4660 
	`sqlôe3_åa˚
(
p
->
db
, 
sql_åa˚_ˇŒback
,Ö->
åa˚Out
);

4665 #i‡
SQLITE_USER_AUTHENTICATION


4666 if–
c
=='u' && 
	`°∫cmp
(
azArg
[0], "u£r", 
n
)==0 ){

4667 if–
nArg
<2 ){

4668 
	`øw_¥ötf
(
°dîr
, "Usage: .user SUBCOMMAND ...\n");

4669 
rc
 = 1;

4670 
mëa_comm™d_exô
;

4672 
	`›í_db
(
p
, 0);

4673 if–
	`°rcmp
(
azArg
[1],"login")==0 ){

4674 if–
nArg
!=4 ){

4675 
	`øw_¥ötf
(
°dîr
, "Usage: .userÜogin USER PASSWORD\n");

4676 
rc
 = 1;

4677 
mëa_comm™d_exô
;

4679 
rc
 = 
	`sqlôe3_u£r_authítiˇã
(
p
->
db
, 
azArg
[2],ázArg[3],

4680 ()
	`°æí
(
azArg
[3]));

4681 if–
rc
 ){

4682 
	`utf8_¥ötf
(
°dîr
, "Authítiˇti⁄ faûed f‹ u£∏%s\n", 
azArg
[2]);

4683 
rc
 = 1;

4685 }if–
	`°rcmp
(
azArg
[1],"add")==0 ){

4686 if–
nArg
!=5 ){

4687 
	`øw_¥ötf
(
°dîr
, "Usage: .userádd USER PASSWORD ISADMIN\n");

4688 
rc
 = 1;

4689 
mëa_comm™d_exô
;

4691 
rc
 = 
	`sqlôe3_u£r_add
(
p
->
db
, 
azArg
[2],

4692 
azArg
[3], ()
	`°æí
(azArg[3]),

4693 
	`boﬁónVÆue
(
azArg
[4]));

4694 if–
rc
 ){

4695 
	`øw_¥ötf
(
°dîr
, "U£r-Add faûed: %d\n", 
rc
);

4696 
rc
 = 1;

4698 }if–
	`°rcmp
(
azArg
[1],"edit")==0 ){

4699 if–
nArg
!=5 ){

4700 
	`øw_¥ötf
(
°dîr
, "Usage: .userÉdit USER PASSWORD ISADMIN\n");

4701 
rc
 = 1;

4702 
mëa_comm™d_exô
;

4704 
rc
 = 
	`sqlôe3_u£r_ch™ge
(
p
->
db
, 
azArg
[2],

4705 
azArg
[3], ()
	`°æí
(azArg[3]),

4706 
	`boﬁónVÆue
(
azArg
[4]));

4707 if–
rc
 ){

4708 
	`øw_¥ötf
(
°dîr
, "U£r-Edô faûed: %d\n", 
rc
);

4709 
rc
 = 1;

4711 }if–
	`°rcmp
(
azArg
[1],"delete")==0 ){

4712 if–
nArg
!=3 ){

4713 
	`øw_¥ötf
(
°dîr
, "Usage: .user delete USER\n");

4714 
rc
 = 1;

4715 
mëa_comm™d_exô
;

4717 
rc
 = 
	`sqlôe3_u£r_dñëe
(
p
->
db
, 
azArg
[2]);

4718 if–
rc
 ){

4719 
	`øw_¥ötf
(
°dîr
, "U£r-DñëêÁûed: %d\n", 
rc
);

4720 
rc
 = 1;

4723 
	`øw_¥ötf
(
°dîr
, "Usage: .userÜogin|add|edit|delete ...\n");

4724 
rc
 = 1;

4725 
mëa_comm™d_exô
;

4730 if–
c
=='v' && 
	`°∫cmp
(
azArg
[0], "vîsi⁄", 
n
)==0 ){

4731 
	`utf8_¥ötf
(
p
->
out
, "SQLite %s %s\n" ,

4732 
	`sqlôe3_libvîsi⁄
(), 
	`sqlôe3_sour˚id
());

4735 if–
c
=='v' && 
	`°∫cmp
(
azArg
[0], "vfsöfo", 
n
)==0 ){

4736 c⁄° *
zDbName
 = 
nArg
==2 ? 
azArg
[1] : "main";

4737 
sqlôe3_vfs
 *
pVfs
;

4738 if–
p
->
db
 ){

4739 
	`sqlôe3_fûe_c⁄åﬁ
(
p
->
db
, 
zDbName
, 
SQLITE_FCNTL_VFS_POINTER
, &
pVfs
);

4740 if–
pVfs
 ){

4741 
	`utf8_¥ötf
(
p
->
out
, "vfs.zNamê = \"%s\"\n", 
pVfs
->
zName
);

4742 
	`øw_¥ötf
(
p
->
out
, "vfs.iVîsi⁄ = %d\n", 
pVfs
->
iVîsi⁄
);

4743 
	`øw_¥ötf
(
p
->
out
, "vfs.szOsFûê = %d\n", 
pVfs
->
szOsFûe
);

4744 
	`øw_¥ötf
(
p
->
out
, "vfs.mxP©h«mê%d\n", 
pVfs
->
mxP©h«me
);

4749 if–
c
=='v' && 
	`°∫cmp
(
azArg
[0], "vf¶i°", 
n
)==0 ){

4750 
sqlôe3_vfs
 *
pVfs
;

4751 
sqlôe3_vfs
 *
pCuºít
 = 0;

4752 if–
p
->
db
 ){

4753 
	`sqlôe3_fûe_c⁄åﬁ
(
p
->
db
, "maö", 
SQLITE_FCNTL_VFS_POINTER
, &
pCuºít
);

4755 
pVfs
=
	`sqlôe3_vfs_föd
(0);ÖVfs;ÖVfsıVfs->
pNext
){

4756 
	`utf8_¥ötf
(
p
->
out
, "vfs.zNamê = \"%s\"%s\n", 
pVfs
->
zName
,

4757 
pVfs
==
pCuºít
 ? " <--- CURRENT" : "");

4758 
	`øw_¥ötf
(
p
->
out
, "vfs.iVîsi⁄ = %d\n", 
pVfs
->
iVîsi⁄
);

4759 
	`øw_¥ötf
(
p
->
out
, "vfs.szOsFûê = %d\n", 
pVfs
->
szOsFûe
);

4760 
	`øw_¥ötf
(
p
->
out
, "vfs.mxP©h«mê%d\n", 
pVfs
->
mxP©h«me
);

4761 if–
pVfs
->
pNext
 ){

4762 
	`øw_¥ötf
(
p
->
out
, "-----------------------------------\n");

4767 if–
c
=='v' && 
	`°∫cmp
(
azArg
[0], "vf¢ame", 
n
)==0 ){

4768 c⁄° *
zDbName
 = 
nArg
==2 ? 
azArg
[1] : "main";

4769 *
zVfsName
 = 0;

4770 if–
p
->
db
 ){

4771 
	`sqlôe3_fûe_c⁄åﬁ
(
p
->
db
, 
zDbName
, 
SQLITE_FCNTL_VFSNAME
, &
zVfsName
);

4772 if–
zVfsName
 ){

4773 
	`utf8_¥ötf
(
p
->
out
, "%s\n", 
zVfsName
);

4774 
	`sqlôe3_‰ì
(
zVfsName
);

4779 #i‡
	`deföed
(
SQLITE_DEBUG
Ë&& deföed(
SQLITE_ENABLE_WHERETRACE
)

4780 if–
c
=='w' && 
	`°∫cmp
(
azArg
[0], "whîëø˚", 
n
)==0 ){

4781 
sqlôe3WhîeTø˚
 = 
nArg
>=2 ? 
	`boﬁónVÆue
(
azArg
[1]) : 0xff;

4785 if–
c
=='w' && 
	`°∫cmp
(
azArg
[0], "width", 
n
)==0 ){

4786 
j
;

4787 
	`as£π
–
nArg
<=
	`AºaySize
(
azArg
) );

4788 
j
=1; j<
nArg
 && j<
	`AºaySize
(
p
->
cﬁWidth
); j++){

4789 
p
->
cﬁWidth
[
j
-1] = ()
	`öãgîVÆue
(
azArg
[j]);

4794 
	`utf8_¥ötf
(
°dîr
, "Error: unknown command or invalidárguments: "

4795 " \"%s\". E¡î \".hñp\" f‹ hñp\n", 
azArg
[0]);

4796 
rc
 = 1;

4799 
mëa_comm™d_exô
:

4800 if–
p
->
outCou¡
 ){

4801 
p
->
outCou¡
--;

4802 if–
p
->
outCou¡
==0 ) 
	`ouçut_ª£t
(p);

4804  
rc
;

4805 
	}
}

4811 
	$löe_c⁄èös_£micﬁ⁄
(c⁄° *
z
, 
N
){

4812 
i
;

4813 
i
=0; i<
N
; i++){ if–
z
[i]==';' )  1; }

4815 
	}
}

4820 
	$_Æl_whôe•a˚
(c⁄° *
z
){

4821 ; *
z
; z++){

4822 if–
	`IsS∑˚
(
z
[0]) ) ;

4823 if–*
z
=='/' && z[1]=='*' ){

4824 
z
 += 2;

4825  *
z
 && (*z!='*' || z[1]!='/') ){ z++; }

4826 if–*
z
==0 )  0;

4827 
z
++;

4830 if–*
z
=='-' && z[1]=='-' ){

4831 
z
 += 2;

4832  *
z
 && *z!='\n' ){ z++; }

4833 if–*
z
==0 )  1;

4839 
	}
}

4846 
	$löe_is_comm™d_ãrmö©‹
(c⁄° *
zLöe
){

4847  
	`IsS∑˚
(
zLöe
[0]) ){ zLine++; };

4848 if–
zLöe
[0]=='/' && 
	`_Æl_whôe•a˚
(&zLine[1]) ){

4851 if–
	`ToLowî
(
zLöe
[0])=='g' && ToLower(zLine[1])=='o'

4852 && 
	`_Æl_whôe•a˚
(&
zLöe
[2]) ){

4856 
	}
}

4862 
	$löe_is_com∂ëe
(*
zSql
, 
nSql
){

4863 
rc
;

4864 if–
zSql
==0 )  1;

4865 
zSql
[
nSql
] = ';';

4866 
zSql
[
nSql
+1] = 0;

4867 
rc
 = 
	`sqlôe3_com∂ëe
(
zSql
);

4868 
zSql
[
nSql
] = 0;

4869  
rc
;

4870 
	}
}

4881 
	$¥o˚ss_öput
(
ShñlSèã
 *
p
, 
FILE
 *
ö
){

4882 *
zLöe
 = 0;

4883 *
zSql
 = 0;

4884 
nLöe
;

4885 
nSql
 = 0;

4886 
nAŒoc
 = 0;

4887 
nSqlPri‹
 = 0;

4888 *
zEºMsg
;

4889 
rc
;

4890 
îrC¡
 = 0;

4891 
löío
 = 0;

4892 
°¨éöe
 = 0;

4894  
îrC¡
==0 || !
baû_⁄_îr‹
 || (
ö
==0 && 
°dö_is_öãø˘ive
) ){

4895 
	`fÊush
(
p
->
out
);

4896 
zLöe
 = 
	`⁄e_öput_löe
(
ö
, zLöe, 
nSql
>0);

4897 if–
zLöe
==0 ){

4899 if–
°dö_is_öãø˘ive
 ) 
	`¥ötf
("\n");

4902 if–
£íI¡îru±
 ){

4903 if–
ö
!=0 ) ;

4904 
£íI¡îru±
 = 0;

4906 
löío
++;

4907 if–
nSql
==0 && 
	`_Æl_whôe•a˚
(
zLöe
) ){

4908 if–
p
->
echoOn
 ) 
	`¥ötf
("%s\n", 
zLöe
);

4911 if–
zLöe
 && zLöe[0]=='.' && 
nSql
==0 ){

4912 if–
p
->
echoOn
 ) 
	`¥ötf
("%s\n", 
zLöe
);

4913 
rc
 = 
	`do_mëa_comm™d
(
zLöe
, 
p
);

4914 if–
rc
==2 ){

4916 }if–
rc
 ){

4917 
îrC¡
++;

4921 if–
	`löe_is_comm™d_ãrmö©‹
(
zLöe
Ë&& 
	`löe_is_com∂ëe
(
zSql
, 
nSql
) ){

4922 
	`mem˝y
(
zLöe
,";",2);

4924 
nLöe
 = 
	`°æí30
(
zLöe
);

4925 if–
nSql
+
nLöe
+2>=
nAŒoc
 ){

4926 
nAŒoc
 = 
nSql
+
nLöe
+100;

4927 
zSql
 = 
	`ªÆloc
(zSql, 
nAŒoc
);

4928 if–
zSql
==0 ){

4929 
	`øw_¥ötf
(
°dîr
, "Error: out of memory\n");

4930 
	`exô
(1);

4933 
nSqlPri‹
 = 
nSql
;

4934 if–
nSql
==0 ){

4935 
i
;

4936 
i
=0; 
zLöe
[i] && 
	`IsS∑˚
(zLine[i]); i++){}

4937 
	`as£π
–
nAŒoc
>0 && 
zSql
!=0 );

4938 
	`mem˝y
(
zSql
, 
zLöe
+
i
, 
nLöe
+1-i);

4939 
°¨éöe
 = 
löío
;

4940 
nSql
 = 
nLöe
-
i
;

4942 
zSql
[
nSql
++] = '\n';

4943 
	`mem˝y
(
zSql
+
nSql
, 
zLöe
, 
nLöe
+1);

4944 
nSql
 +
nLöe
;

4946 if–
nSql
 && 
	`löe_c⁄èös_£micﬁ⁄
(&
zSql
[
nSqlPri‹
],ÇSql-nSqlPrior)

4947 && 
	`sqlôe3_com∂ëe
(
zSql
) ){

4948 
p
->
˙t
 = 0;

4949 
	`›í_db
(
p
, 0);

4950 if–
p
->
back¶ashOn
 ) 
	`ªsﬁve_back¶ashes
(
zSql
);

4951 
BEGIN_TIMER
;

4952 
rc
 = 
	`shñl_exec
(
p
->
db
, 
zSql
, 
shñl_ˇŒback
,Ö, &
zEºMsg
);

4953 
END_TIMER
;

4954 if–
rc
 || 
zEºMsg
 ){

4955 
zPªfix
[100];

4956 if–
ö
!=0 || !
°dö_is_öãø˘ive
 ){

4957 
	`sqlôe3_¢¥ötf
((
zPªfix
), zPrefix,

4958 "Eº‹:Çó∏löê%d:", 
°¨éöe
);

4960 
	`sqlôe3_¢¥ötf
((
zPªfix
), zPrefix, "Error:");

4962 if–
zEºMsg
!=0 ){

4963 
	`utf8_¥ötf
(
°dîr
, "%†%s\n", 
zPªfix
, 
zEºMsg
);

4964 
	`sqlôe3_‰ì
(
zEºMsg
);

4965 
zEºMsg
 = 0;

4967 
	`utf8_¥ötf
(
°dîr
, "%†%s\n", 
zPªfix
, 
	`sqlôe3_îrmsg
(
p
->
db
));

4969 
îrC¡
++;

4970 }if–
p
->
cou¡Ch™ges
 ){

4971 
	`øw_¥ötf
(
p
->
out
, "changes: %3dÅotal_changes: %d\n",

4972 
	`sqlôe3_ch™ges
(
p
->
db
), 
	`sqlôe3_tŸÆ_ch™ges
(p->db));

4974 
nSql
 = 0;

4975 if–
p
->
outCou¡
 ){

4976 
	`ouçut_ª£t
(
p
);

4977 
p
->
outCou¡
 = 0;

4979 }if–
nSql
 && 
	`_Æl_whôe•a˚
(
zSql
) ){

4980 if–
p
->
echoOn
 ) 
	`¥ötf
("%s\n", 
zSql
);

4981 
nSql
 = 0;

4984 if–
nSql
 ){

4985 if–!
	`_Æl_whôe•a˚
(
zSql
) ){

4986 
	`utf8_¥ötf
(
°dîr
, "Eº‹: incom∂ëêSQL: %s\n", 
zSql
);

4987 
îrC¡
++;

4990 
	`‰ì
(
zSql
);

4991 
	`‰ì
(
zLöe
);

4992  
îrC¡
>0;

4993 
	}
}

4999 *
	$föd_home_dú
(){

5000 *
home_dú
 = 
NULL
;

5001 if–
home_dú
 )  home_dir;

5003 #i‡!
	`deföed
(
_WIN32
Ë&& !deföed(
WIN32
Ë&& !deföed(
_WIN32_WCE
) \

5004 && !
	`deföed
(
__RTP__
Ë&& !deföed(
_WRS_KERNEL
)

5006 
∑sswd
 *
pwít
;

5007 
uid_t
 
uid
 = 
	`gëuid
();

5008 if–(
pwít
=
	`gëpwuid
(
uid
)Ë!
NULL
) {

5009 
home_dú
 = 
pwít
->
pw_dú
;

5014 #i‡
	`deföed
(
_WIN32_WCE
)

5017 
home_dú
 = "/";

5020 #i‡
	`deföed
(
_WIN32
Ë|| deföed(
WIN32
)

5021 i‡(!
home_dú
) {

5022 
home_dú
 = 
	`gëív
("USERPROFILE");

5026 i‡(!
home_dú
) {

5027 
home_dú
 = 
	`gëív
("HOME");

5030 #i‡
	`deföed
(
_WIN32
Ë|| deföed(
WIN32
)

5031 i‡(!
home_dú
) {

5032 *
zDrive
, *
zP©h
;

5033 
n
;

5034 
zDrive
 = 
	`gëív
("HOMEDRIVE");

5035 
zP©h
 = 
	`gëív
("HOMEPATH");

5036 if–
zDrive
 && 
zP©h
 ){

5037 
n
 = 
	`°æí30
(
zDrive
Ë+ såÀn30(
zP©h
) + 1;

5038 
home_dú
 = 
	`mÆloc
–
n
 );

5039 if–
home_dú
==0 )  0;

5040 
	`sqlôe3_¢¥ötf
(
n
, 
home_dú
, "%s%s", 
zDrive
, 
zP©h
);

5041  
home_dú
;

5043 
home_dú
 = "c:\\";

5049 if–
home_dú
 ){

5050 
n
 = 
	`°æí30
(
home_dú
) + 1;

5051 *
z
 = 
	`mÆloc
–
n
 );

5052 if–
z
 ) 
	`mem˝y
(z, 
home_dú
, 
n
);

5053 
home_dú
 = 
z
;

5056  
home_dú
;

5057 
	}
}

5065 
	$¥o˚ss_sqlôîc
(

5066 
ShñlSèã
 *
p
,

5067 c⁄° *
sqlôîc_ovîride


5069 *
home_dú
 = 
NULL
;

5070 c⁄° *
sqlôîc
 = 
sqlôîc_ovîride
;

5071 *
zBuf
 = 0;

5072 
FILE
 *
ö
 = 
NULL
;

5074 i‡(
sqlôîc
 =
NULL
) {

5075 
home_dú
 = 
	`föd_home_dú
();

5076 if–
home_dú
==0 ){

5077 
	`øw_¥ötf
(
°dîr
, "-- warning: cannot find home directory;"

5081 
	`sqlôe3_öôülize
();

5082 
zBuf
 = 
	`sqlôe3_m¥ötf
("%s/.sqlôîc",
home_dú
);

5083 
sqlôîc
 = 
zBuf
;

5085 
ö
 = 
	`f›í
(
sqlôîc
,"rb");

5086 if–
ö
 ){

5087 if–
°dö_is_öãø˘ive
 ){

5088 
	`utf8_¥ötf
(
°dîr
,"-- LﬂdögÑesour˚†‰om %s\n",
sqlôîc
);

5090 
	`¥o˚ss_öput
(
p
,
ö
);

5091 
	`f˛o£
(
ö
);

5093 
	`sqlôe3_‰ì
(
zBuf
);

5094 
	}
}

5099 c⁄° 
	gzO±i⁄s
[] =

5109 #i‡
deföed
(
SQLITE_ENABLE_MEMSYS3
Ë|| deföed(
SQLITE_ENABLE_MEMSYS5
)

5119 #ifde‡
SQLITE_ENABLE_MULTIPLEX


5130 #ifde‡
SQLITE_ENABLE_VFSTRACE


5134 
	$ußge
(
showDëaû
){

5135 
	`utf8_¥ötf
(
°dîr
,

5138 "i‡thêfûêd€†nŸÖªviou¶yÉxi°.\n", 
Argv0
);

5139 if–
showDëaû
 ){

5140 
	`utf8_¥ötf
(
°dîr
, "OPTIONS in˛ude:\n%s", 
zO±i⁄s
);

5142 
	`øw_¥ötf
(
°dîr
, "UseÅhe -help option forádditional information\n");

5144 
	`exô
(1);

5145 
	}
}

5150 
	$maö_öô
(
ShñlSèã
 *
d©a
) {

5151 
	`mem£t
(
d©a
, 0, (*data));

5152 
d©a
->
n‹mÆMode
 = d©a->
cMode
 = d©a->
mode
 = 
MODE_Li°
;

5153 
d©a
->
autoEx∂aö
 = 1;

5154 
	`mem˝y
(
d©a
->
cﬁSï¨©‹
,
SEP_Cﬁumn
, 2);

5155 
	`mem˝y
(
d©a
->
rowSï¨©‹
,
SEP_Row
, 2);

5156 
d©a
->
showHódî
 = 0;

5157 
d©a
->
shñlFlgs
 = 
SHFLG_Lookaside
;

5158 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_URI
, 1);

5159 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_LOG
, 
shñlLog
, 
d©a
);

5160 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_MULTITHREAD
);

5161 
	`sqlôe3_¢¥ötf
((
maöProm±
), mainPrompt,"sqlite> ");

5162 
	`sqlôe3_¢¥ötf
((
c⁄töueProm±
), continuePrompt," ...> ");

5163 
	}
}

5168 #ifde‡
_WIN32


5169 
	$¥ötBﬁd
(c⁄° *
zText
){

5170 
HANDLE
 
out
 = 
	`GëStdH™dÀ
(
STD_OUTPUT_HANDLE
);

5171 
CONSOLE_SCREEN_BUFFER_INFO
 
deÁu…S¸ìnInfo
;

5172 
	`GëC⁄sﬁeS¸ìnBuf„rInfo
(
out
, &
deÁu…S¸ìnInfo
);

5173 
	`SëC⁄sﬁeTextAâribuã
(
out
,

5174 
FOREGROUND_RED
|
FOREGROUND_INTENSITY


5176 
	`¥ötf
("%s", 
zText
);

5177 
	`SëC⁄sﬁeTextAâribuã
(
out
, 
deÁu…S¸ìnInfo
.
wAâribuãs
);

5178 
	}
}

5180 
	$¥ötBﬁd
(c⁄° *
zText
){

5181 
	`¥ötf
("\033[1m%s\033[0m", 
zText
);

5182 
	}
}

5189 *
	$cmdlöe_›ti⁄_vÆue
(
¨gc
, **
¨gv
, 
i
){

5190 if–
i
==
¨gc
 ){

5191 
	`utf8_¥ötf
(
°dîr
, "%s: Error: missingárgumentÅo %s\n",

5192 
¨gv
[0],árgv[
¨gc
-1]);

5193 
	`exô
(1);

5195  
¨gv
[
i
];

5196 
	}
}

5198 #i‚de‡
SQLITE_SHELL_IS_UTF8


5199 #i‡(
deföed
(
_WIN32
Ë|| deföed(
WIN32
)Ë&& deföed(
_MSC_VER
)

5200 
	#SQLITE_SHELL_IS_UTF8
 (0)

	)

5202 
	#SQLITE_SHELL_IS_UTF8
 (1)

	)

5206 #i‡
SQLITE_SHELL_IS_UTF8


5207 
SQLITE_CDECL
 
	$maö
(
¨gc
, **
¨gv
){

5209 
SQLITE_CDECL
 
	$wmaö
(
¨gc
, 
wch¨_t
 **
w¨gv
){

5210 **
¨gv
;

5212 *
zEºMsg
 = 0;

5213 
ShñlSèã
 
d©a
;

5214 c⁄° *
zInôFûe
 = 0;

5215 
i
;

5216 
rc
 = 0;

5217 
w¨nInmem‹yDb
 = 0;

5218 
ªadStdö
 = 1;

5219 
nCmd
 = 0;

5220 **
azCmd
 = 0;

5222 
	`£tBö¨yMode
(
°dö
, 0);

5223 
	`£tvbuf
(
°dîr
, 0, 
_IONBF
, 0);

5224 
°dö_is_öãø˘ive
 = 
	`ißây
(0);

5225 
°dout_is_c⁄sﬁe
 = 
	`ißây
(1);

5227 #i‡
USE_SYSTEM_SQLITE
+0!=1

5228 if–
	`°rcmp
(
	`sqlôe3_sour˚id
(),
SQLITE_SOURCE_ID
)!=0 ){

5229 
	`utf8_¥ötf
(
°dîr
, "SQLite headeránd source version mismatch\n%s\n%s\n",

5230 
	`sqlôe3_sour˚id
(), 
SQLITE_SOURCE_ID
);

5231 
	`exô
(1);

5234 
	`maö_öô
(&
d©a
);

5235 #i‡!
SQLITE_SHELL_IS_UTF8


5236 
	`sqlôe3_öôülize
();

5237 
¨gv
 = 
	`sqlôe3_mÆloc64
(◊rgv[0])*
¨gc
);

5238 if–
¨gv
==0 ){

5239 
	`øw_¥ötf
(
°dîr
, "out of memory\n");

5240 
	`exô
(1);

5242 
i
=0; i<
¨gc
; i++){

5243 
¨gv
[
i
] = 
	`sqlôe3_wö32_unicode_to_utf8
(
w¨gv
[i]);

5244 if–
¨gv
[
i
]==0 ){

5245 
	`øw_¥ötf
(
°dîr
, "out of memory\n");

5246 
	`exô
(1);

5250 
	`as£π
–
¨gc
>=1 && 
¨gv
 &&árgv[0] );

5251 
Argv0
 = 
¨gv
[0];

5256 #ifde‡
SIGINT


5257 
	`sig«l
(
SIGINT
, 
öãºu±_h™dÀr
);

5260 #ifde‡
SQLITE_SHELL_DBNAME_PROC


5266 
	`SQLITE_SHELL_DBNAME_PROC
(const **);

5267 
	`SQLITE_SHELL_DBNAME_PROC
(&
d©a
.
zDbFûíame
);

5268 
w¨nInmem‹yDb
 = 0;

5277 
i
=1; i<
¨gc
; i++){

5278 *
z
;

5279 
z
 = 
¨gv
[
i
];

5280 if–
z
[0]!='-' ){

5281 if–
d©a
.
zDbFûíame
==0 ){

5282 
d©a
.
zDbFûíame
 = 
z
;

5286 
ªadStdö
 = 0;

5287 
nCmd
++;

5288 
azCmd
 = 
	`ªÆloc
◊zCmd, ◊zCmd[0])*
nCmd
);

5289 if–
azCmd
==0 ){

5290 
	`øw_¥ötf
(
°dîr
, "out of memory\n");

5291 
	`exô
(1);

5293 
azCmd
[
nCmd
-1] = 
z
;

5296 if–
z
[1]=='-' ) z++;

5297 if–
	`°rcmp
(
z
,"-separator")==0

5298 || 
	`°rcmp
(
z
,"-nullvalue")==0

5299 || 
	`°rcmp
(
z
,"-newline")==0

5300 || 
	`°rcmp
(
z
,"-cmd")==0

5302 ()
	`cmdlöe_›ti⁄_vÆue
(
¨gc
, 
¨gv
, ++
i
);

5303 }if–
	`°rcmp
(
z
,"-init")==0 ){

5304 
zInôFûe
 = 
	`cmdlöe_›ti⁄_vÆue
(
¨gc
, 
¨gv
, ++
i
);

5305 }if–
	`°rcmp
(
z
,"-batch")==0 ){

5310 
°dö_is_öãø˘ive
 = 0;

5311 }if–
	`°rcmp
(
z
,"-heap")==0 ){

5312 #i‡
	`deföed
(
SQLITE_ENABLE_MEMSYS3
Ë|| deföed(
SQLITE_ENABLE_MEMSYS5
)

5313 c⁄° *
zSize
;

5314 
sqlôe3_öt64
 
szHóp
;

5316 
zSize
 = 
	`cmdlöe_›ti⁄_vÆue
(
¨gc
, 
¨gv
, ++
i
);

5317 
szHóp
 = 
	`öãgîVÆue
(
zSize
);

5318 if–
szHóp
>0x7fff0000 ) szHeap = 0x7fff0000;

5319 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_HEAP
, 
	`mÆloc
(()
szHóp
), ()szHeap, 64);

5321 }if–
	`°rcmp
(
z
,"-scratch")==0 ){

5322 
n
, 
sz
;

5323 
sz
 = ()
	`öãgîVÆue
(
	`cmdlöe_›ti⁄_vÆue
(
¨gc
,
¨gv
,++
i
));

5324 if–
sz
>400000 ) sz = 400000;

5325 if–
sz
<2500 ) sz = 2500;

5326 
n
 = ()
	`öãgîVÆue
(
	`cmdlöe_›ti⁄_vÆue
(
¨gc
,
¨gv
,++
i
));

5327 if–
n
>10 )Ç = 10;

5328 if–
n
<1 )Ç = 1;

5329 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_SCRATCH
, 
	`mÆloc
(
n
*
sz
+1), sz,Ç);

5330 
d©a
.
shñlFlgs
 |
SHFLG_S¸©ch
;

5331 }if–
	`°rcmp
(
z
,"-pagecache")==0 ){

5332 
n
, 
sz
;

5333 
sz
 = ()
	`öãgîVÆue
(
	`cmdlöe_›ti⁄_vÆue
(
¨gc
,
¨gv
,++
i
));

5334 if–
sz
>70000 ) sz = 70000;

5335 if–
sz
<0 ) sz = 0;

5336 
n
 = ()
	`öãgîVÆue
(
	`cmdlöe_›ti⁄_vÆue
(
¨gc
,
¨gv
,++
i
));

5337 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_PAGECACHE
,

5338 (
n
>0 && 
sz
>0Ë? 
	`mÆloc
(n*sz) : 0, sz,Ç);

5339 
d©a
.
shñlFlgs
 |
SHFLG_Pageˇche
;

5340 }if–
	`°rcmp
(
z
,"-lookaside")==0 ){

5341 
n
, 
sz
;

5342 
sz
 = ()
	`öãgîVÆue
(
	`cmdlöe_›ti⁄_vÆue
(
¨gc
,
¨gv
,++
i
));

5343 if–
sz
<0 ) sz = 0;

5344 
n
 = ()
	`öãgîVÆue
(
	`cmdlöe_›ti⁄_vÆue
(
¨gc
,
¨gv
,++
i
));

5345 if–
n
<0 )Ç = 0;

5346 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_LOOKASIDE
, 
sz
, 
n
);

5347 if–
sz
*
n
==0 ) 
d©a
.
shñlFlgs
 &~
SHFLG_Lookaside
;

5348 #ifde‡
SQLITE_ENABLE_VFSTRACE


5349 }if–
	`°rcmp
(
z
,"-vfstrace")==0 ){

5350 
	`vf°ø˚_ªgi°î
(

5351 c⁄° *
zTø˚Name
,

5352 c⁄° *
zOldVfsName
,

5353 (*
xOut
)(const *,*),

5354 *
pOutArg
,

5355 
makeDeÁu…


5357 
	`vf°ø˚_ªgi°î
("åa˚",0,((*)(c⁄° *,*))
Âuts
,
°dîr
,1);

5359 #ifde‡
SQLITE_ENABLE_MULTIPLEX


5360 }if–
	`°rcmp
(
z
,"-multiplex")==0 ){

5361 
	`sqlôe3_mu…ùÀ_öôülize
(const *,);

5362 
	`sqlôe3_mu…ùÀx_öôülize
(0, 1);

5364 }if–
	`°rcmp
(
z
,"-mmap")==0 ){

5365 
sqlôe3_öt64
 
sz
 = 
	`öãgîVÆue
(
	`cmdlöe_›ti⁄_vÆue
(
¨gc
,
¨gv
,++
i
));

5366 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_MMAP_SIZE
, 
sz
, sz);

5367 }if–
	`°rcmp
(
z
,"-vfs")==0 ){

5368 
sqlôe3_vfs
 *
pVfs
 = 
	`sqlôe3_vfs_föd
(
	`cmdlöe_›ti⁄_vÆue
(
¨gc
,
¨gv
,++
i
));

5369 if–
pVfs
 ){

5370 
	`sqlôe3_vfs_ªgi°î
(
pVfs
, 1);

5372 
	`utf8_¥ötf
(
°dîr
, "nÿsuch VFS: \"%s\"\n", 
¨gv
[
i
]);

5373 
	`exô
(1);

5377 if–
d©a
.
zDbFûíame
==0 ){

5378 #i‚de‡
SQLITE_OMIT_MEMORYDB


5379 
d©a
.
zDbFûíame
 = ":memory:";

5380 
w¨nInmem‹yDb
 = 
¨gc
==1;

5382 
	`utf8_¥ötf
(
°dîr
,"%s: Eº‹:Çÿd©aba£ fûíamê•ecifõd\n", 
Argv0
);

5386 
d©a
.
out
 = 
°dout
;

5393 if–
	`ac˚ss
(
d©a
.
zDbFûíame
, 0)==0 ){

5394 
	`›í_db
(&
d©a
, 0);

5401 
	`¥o˚ss_sqlôîc
(&
d©a
,
zInôFûe
);

5408 
i
=1; i<
¨gc
; i++){

5409 *
z
 = 
¨gv
[
i
];

5410 if–
z
[0]!='-' ) ;

5411 if–
z
[1]=='-' ){ z++; }

5412 if–
	`°rcmp
(
z
,"-init")==0 ){

5413 
i
++;

5414 }if–
	`°rcmp
(
z
,"-html")==0 ){

5415 
d©a
.
mode
 = 
MODE_Html
;

5416 }if–
	`°rcmp
(
z
,"-list")==0 ){

5417 
d©a
.
mode
 = 
MODE_Li°
;

5418 }if–
	`°rcmp
(
z
,"-line")==0 ){

5419 
d©a
.
mode
 = 
MODE_Löe
;

5420 }if–
	`°rcmp
(
z
,"-column")==0 ){

5421 
d©a
.
mode
 = 
MODE_Cﬁumn
;

5422 }if–
	`°rcmp
(
z
,"-csv")==0 ){

5423 
d©a
.
mode
 = 
MODE_Csv
;

5424 
	`mem˝y
(
d©a
.
cﬁSï¨©‹
,",",2);

5425 }if–
	`°rcmp
(
z
,"-ascii")==0 ){

5426 
d©a
.
mode
 = 
MODE_Ascii
;

5427 
	`sqlôe3_¢¥ötf
((
d©a
.
cﬁSï¨©‹
), data.colSeparator,

5428 
SEP_Unô
);

5429 
	`sqlôe3_¢¥ötf
((
d©a
.
rowSï¨©‹
), data.rowSeparator,

5430 
SEP_Rec‹d
);

5431 }if–
	`°rcmp
(
z
,"-separator")==0 ){

5432 
	`sqlôe3_¢¥ötf
((
d©a
.
cﬁSï¨©‹
), data.colSeparator,

5433 "%s",
	`cmdlöe_›ti⁄_vÆue
(
¨gc
,
¨gv
,++
i
));

5434 }if–
	`°rcmp
(
z
,"-newline")==0 ){

5435 
	`sqlôe3_¢¥ötf
((
d©a
.
rowSï¨©‹
), data.rowSeparator,

5436 "%s",
	`cmdlöe_›ti⁄_vÆue
(
¨gc
,
¨gv
,++
i
));

5437 }if–
	`°rcmp
(
z
,"-nullvalue")==0 ){

5438 
	`sqlôe3_¢¥ötf
((
d©a
.
nuŒVÆue
), data.nullValue,

5439 "%s",
	`cmdlöe_›ti⁄_vÆue
(
¨gc
,
¨gv
,++
i
));

5440 }if–
	`°rcmp
(
z
,"-header")==0 ){

5441 
d©a
.
showHódî
 = 1;

5442 }if–
	`°rcmp
(
z
,"-noheader")==0 ){

5443 
d©a
.
showHódî
 = 0;

5444 }if–
	`°rcmp
(
z
,"-echo")==0 ){

5445 
d©a
.
echoOn
 = 1;

5446 }if–
	`°rcmp
(
z
,"-eqp")==0 ){

5447 
d©a
.
autoEQP
 = 1;

5448 }if–
	`°rcmp
(
z
,"-eqpfull")==0 ){

5449 
d©a
.
autoEQP
 = 2;

5450 }if–
	`°rcmp
(
z
,"-stats")==0 ){

5451 
d©a
.
°©sOn
 = 1;

5452 }if–
	`°rcmp
(
z
,"-scanstats")==0 ){

5453 
d©a
.
sˇn°©sOn
 = 1;

5454 }if–
	`°rcmp
(
z
,"-backslash")==0 ){

5460 
d©a
.
back¶ashOn
 = 1;

5461 }if–
	`°rcmp
(
z
,"-bail")==0 ){

5462 
baû_⁄_îr‹
 = 1;

5463 }if–
	`°rcmp
(
z
,"-version")==0 ){

5464 
	`¥ötf
("%†%s\n", 
	`sqlôe3_libvîsi⁄
(), 
	`sqlôe3_sour˚id
());

5466 }if–
	`°rcmp
(
z
,"-interactive")==0 ){

5467 
°dö_is_öãø˘ive
 = 1;

5468 }if–
	`°rcmp
(
z
,"-batch")==0 ){

5469 
°dö_is_öãø˘ive
 = 0;

5470 }if–
	`°rcmp
(
z
,"-heap")==0 ){

5471 
i
++;

5472 }if–
	`°rcmp
(
z
,"-scratch")==0 ){

5473 
i
+=2;

5474 }if–
	`°rcmp
(
z
,"-pagecache")==0 ){

5475 
i
+=2;

5476 }if–
	`°rcmp
(
z
,"-lookaside")==0 ){

5477 
i
+=2;

5478 }if–
	`°rcmp
(
z
,"-mmap")==0 ){

5479 
i
++;

5480 }if–
	`°rcmp
(
z
,"-vfs")==0 ){

5481 
i
++;

5482 #ifde‡
SQLITE_ENABLE_VFSTRACE


5483 }if–
	`°rcmp
(
z
,"-vfstrace")==0 ){

5484 
i
++;

5486 #ifde‡
SQLITE_ENABLE_MULTIPLEX


5487 }if–
	`°rcmp
(
z
,"-multiplex")==0 ){

5488 
i
++;

5490 }if–
	`°rcmp
(
z
,"-help")==0 ){

5491 
	`ußge
(1);

5492 }if–
	`°rcmp
(
z
,"-cmd")==0 ){

5497 if–
i
==
¨gc
-1 ) ;

5498 
z
 = 
	`cmdlöe_›ti⁄_vÆue
(
¨gc
,
¨gv
,++
i
);

5499 if–
z
[0]=='.' ){

5500 
rc
 = 
	`do_mëa_comm™d
(
z
, &
d©a
);

5501 if–
rc
 && 
baû_⁄_îr‹
 ) Ñc==2 ? 0 :Ñc;

5503 
	`›í_db
(&
d©a
, 0);

5504 
rc
 = 
	`shñl_exec
(
d©a
.
db
, 
z
, 
shñl_ˇŒback
, &d©a, &
zEºMsg
);

5505 if–
zEºMsg
!=0 ){

5506 
	`utf8_¥ötf
(
°dîr
,"Eº‹: %s\n", 
zEºMsg
);

5507 if–
baû_⁄_îr‹
 )  
rc
!=0 ?Ñc : 1;

5508 }if–
rc
!=0 ){

5509 
	`utf8_¥ötf
(
°dîr
,"Eº‹: u«bÀÅÿ¥o˚s†SQL \"%s\"\n", 
z
);

5510 if–
baû_⁄_îr‹
 )  
rc
;

5514 
	`utf8_¥ötf
(
°dîr
,"%s: Eº‹: unknow¿›ti⁄: %s\n", 
Argv0
, 
z
);

5515 
	`øw_¥ötf
(
°dîr
,"Use -help foráÜist of options.\n");

5518 
d©a
.
cMode
 = d©a.
mode
;

5521 if–!
ªadStdö
 ){

5526 
i
=0; i<
nCmd
; i++){

5527 if–
azCmd
[
i
][0]=='.' ){

5528 
rc
 = 
	`do_mëa_comm™d
(
azCmd
[
i
], &
d©a
);

5529 if–
rc
 ) Ñc==2 ? 0 :Ñc;

5531 
	`›í_db
(&
d©a
, 0);

5532 
rc
 = 
	`shñl_exec
(
d©a
.
db
, 
azCmd
[
i
], 
shñl_ˇŒback
, &d©a, &
zEºMsg
);

5533 if–
zEºMsg
!=0 ){

5534 
	`utf8_¥ötf
(
°dîr
,"Eº‹: %s\n", 
zEºMsg
);

5535  
rc
!=0 ?Ñc : 1;

5536 }if–
rc
!=0 ){

5537 
	`utf8_¥ötf
(
°dîr
,"Eº‹: u«bÀÅÿ¥o˚s†SQL: %s\n", 
azCmd
[
i
]);

5538  
rc
;

5542 
	`‰ì
(
azCmd
);

5546 if–
°dö_is_öãø˘ive
 ){

5547 *
zHome
;

5548 *
zHi°‹y
 = 0;

5549 
nHi°‹y
;

5550 
	`¥ötf
(

5553 
	`sqlôe3_libvîsi⁄
(), 
	`sqlôe3_sour˚id
()

5555 if–
w¨nInmem‹yDb
 ){

5556 
	`¥ötf
("ConnectedÅoá ");

5557 
	`¥ötBﬁd
("transient in-memory database");

5558 
	`¥ötf
(".\nUse \".open FILENAME\"ÅoÑeopen oná "

5561 
zHome
 = 
	`föd_home_dú
();

5562 if–
zHome
 ){

5563 
nHi°‹y
 = 
	`°æí30
(
zHome
) + 20;

5564 if–(
zHi°‹y
 = 
	`mÆloc
(
nHi°‹y
))!=0 ){

5565 
	`sqlôe3_¢¥ötf
(
nHi°‹y
, 
zHi°‹y
,"%s/.sqlôe_hi°‹y", 
zHome
);

5568 if–
zHi°‹y
 ){ 
	`shñl_ªad_hi°‹y
(zHistory); }

5569 
rc
 = 
	`¥o˚ss_öput
(&
d©a
, 0);

5570 if–
zHi°‹y
 ){

5571 
	`shñl_°iÊe_hi°‹y
(100);

5572 
	`shñl_wrôe_hi°‹y
(
zHi°‹y
);

5573 
	`‰ì
(
zHi°‹y
);

5576 
rc
 = 
	`¥o˚ss_öput
(&
d©a
, 
°dö
);

5579 
	`£t_èbÀ_«me
(&
d©a
, 0);

5580 if–
d©a
.
db
 ){

5581 
	`£ssi⁄_˛o£_Æl
(&
d©a
);

5582 
	`sqlôe3_˛o£
(
d©a
.
db
);

5584 
	`sqlôe3_‰ì
(
d©a
.
zFªeOnClo£
);

5585 #i‡!
SQLITE_SHELL_IS_UTF8


5586 
i
=0; i<
¨gc
; i++Ë
	`sqlôe3_‰ì
(
¨gv
[i]);

5587 
	`sqlôe3_‰ì
(
¨gv
);

5589  
rc
;

5590 
	}
}

	@sqlite3ext.h

18 #i‚de‡
_SQLITE3EXT_H_


19 
	#_SQLITE3EXT_H_


	)

20 
	~"sqlôe3.h
"

22 
sqlôe3_≠i_routöes
 
	tsqlôe3_≠i_routöes
;

34 
	ssqlôe3_≠i_routöes
 {

35 * (*
	maggªg©e_c⁄ãxt
)(
	msqlôe3_c⁄ãxt
*,
	mnByãs
);

36 (*
	maggªg©e_cou¡
)(
	msqlôe3_c⁄ãxt
*);

37 (*
	mböd_blob
)(
	msqlôe3_°mt
*,,c⁄° *,
	mn
,(*)(*));

38 (*
	mböd_doubÀ
)(
	msqlôe3_°mt
*,,);

39 (*
	mböd_öt
)(
	msqlôe3_°mt
*,,);

40 (*
	mböd_öt64
)(
	msqlôe3_°mt
*,,
	msqlôe_öt64
);

41 (*
	mböd_nuŒ
)(
	msqlôe3_°mt
*,);

42 (*
	mböd_∑ømëî_cou¡
)(
	msqlôe3_°mt
*);

43 (*
	mböd_∑ømëî_ödex
)(
	msqlôe3_°mt
*,c⁄° *
	mzName
);

44 c⁄° * (*
	mböd_∑ømëî_«me
)(
	msqlôe3_°mt
*,);

45 (*
	mböd_ãxt
)(
	msqlôe3_°mt
*,,c⁄° *,
	mn
,(*)(*));

46 (*
	mböd_ãxt16
)(
	msqlôe3_°mt
*,,const *,,(*)(*));

47 (*
	mböd_vÆue
)(
	msqlôe3_°mt
*,,c⁄° 
	msqlôe3_vÆue
*);

48 (*
	mbusy_h™dÀr
)(
	msqlôe3
*,(*)(*,),*);

49 (*
	mbusy_timeout
)(
	msqlôe3
*,
	mms
);

50 (*
	mch™ges
)(
	msqlôe3
*);

51 (*
	m˛o£
)(
	msqlôe3
*);

52 (*
	mcﬁœti⁄_√eded
)(
	msqlôe3
*,*,(*)(*,sqlite3*,

53 
	meTextRï
,const *));

54 (*
	mcﬁœti⁄_√eded16
)(
	msqlôe3
*,*,(*)(*,sqlite3*,

55 
	meTextRï
,const *));

56 c⁄° * (*
	mcﬁumn_blob
)(
	msqlôe3_°mt
*,
	miCﬁ
);

57 (*
	mcﬁumn_byãs
)(
	msqlôe3_°mt
*,
	miCﬁ
);

58 (*
	mcﬁumn_byãs16
)(
	msqlôe3_°mt
*,
	miCﬁ
);

59 (*
	mcﬁumn_cou¡
)(
sqlôe3_°mt
*
	mpStmt
);

60 c⁄° * (*
	mcﬁumn_d©aba£_«me
)(
	msqlôe3_°mt
*,);

61 c⁄° * (*
	mcﬁumn_d©aba£_«me16
)(
	msqlôe3_°mt
*,);

62 c⁄° * (*
	mcﬁumn_de˛ty≥
)(
	msqlôe3_°mt
*,
	mi
);

63 c⁄° * (*
	mcﬁumn_de˛ty≥16
)(
	msqlôe3_°mt
*,);

64 (*
	mcﬁumn_doubÀ
)(
	msqlôe3_°mt
*,
	miCﬁ
);

65 (*
	mcﬁumn_öt
)(
	msqlôe3_°mt
*,
	miCﬁ
);

66 
sqlôe_öt64
 (*
cﬁumn_öt64
)(
	msqlôe3_°mt
*,
	miCﬁ
);

67 c⁄° * (*
	mcﬁumn_«me
)(
	msqlôe3_°mt
*,);

68 c⁄° * (*
	mcﬁumn_«me16
)(
	msqlôe3_°mt
*,);

69 c⁄° * (*
	mcﬁumn_‹igö_«me
)(
	msqlôe3_°mt
*,);

70 c⁄° * (*
	mcﬁumn_‹igö_«me16
)(
	msqlôe3_°mt
*,);

71 c⁄° * (*
	mcﬁumn_èbÀ_«me
)(
	msqlôe3_°mt
*,);

72 c⁄° * (*
	mcﬁumn_èbÀ_«me16
)(
	msqlôe3_°mt
*,);

73 c⁄° * (*
	mcﬁumn_ãxt
)(
	msqlôe3_°mt
*,
	miCﬁ
);

74 c⁄° * (*
	mcﬁumn_ãxt16
)(
	msqlôe3_°mt
*,
	miCﬁ
);

75 (*
	mcﬁumn_ty≥
)(
	msqlôe3_°mt
*,
	miCﬁ
);

76 
	msqlôe3_vÆue
* (*
	mcﬁumn_vÆue
)(
	msqlôe3_°mt
*,
	miCﬁ
);

77 * (*
	mcommô_hook
)(
	msqlôe3
*,(*)(*),*);

78 (*
	mcom∂ëe
)(c⁄° *
	msql
);

79 (*
	mcom∂ëe16
)(c⁄° *
	msql
);

80 (*
	m¸óã_cﬁœti⁄
)(
	msqlôe3
*,const *,,*,

82 (*
	m¸óã_cﬁœti⁄16
)(
	msqlôe3
*,const *,,*,

84 (*
	m¸óã_fun˘i⁄
)(
	msqlôe3
*,const *,,,*,

85 (*
	mxFunc
)(
	msqlôe3_c⁄ãxt
*,,
	msqlôe3_vÆue
**),

86 (*
	mxSãp
)(
	msqlôe3_c⁄ãxt
*,,
	msqlôe3_vÆue
**),

87 (*
	mxFöÆ
)(
	msqlôe3_c⁄ãxt
*));

88 (*
	m¸óã_fun˘i⁄16
)(
	msqlôe3
*,const *,,,*,

89 (*
	mxFunc
)(
	msqlôe3_c⁄ãxt
*,,
	msqlôe3_vÆue
**),

90 (*
	mxSãp
)(
	msqlôe3_c⁄ãxt
*,,
	msqlôe3_vÆue
**),

91 (*
	mxFöÆ
)(
	msqlôe3_c⁄ãxt
*));

92 (*
	m¸óã_moduÀ
)(
	msqlôe3
*,c⁄° *,c⁄° 
	msqlôe3_moduÀ
*,*);

93 (*
	md©a_cou¡
)(
sqlôe3_°mt
*
	mpStmt
);

94 
	msqlôe3
 * (*
	mdb_h™dÀ
)(
	msqlôe3_°mt
*);

95 (*
	mde˛¨e_vèb
)(
	msqlôe3
*,const *);

96 (*
	míabÀ_sh¨ed_ˇche
)();

97 (*
	mîrcode
)(
sqlôe3
*
	mdb
);

98 c⁄° * (*
	mîrmsg
)(
	msqlôe3
*);

99 c⁄° * (*
	mîrmsg16
)(
	msqlôe3
*);

100 (*
	mexec
)(
	msqlôe3
*,c⁄° *,
	msqlôe3_ˇŒback
,*,**);

101 (*
	mexpúed
)(
	msqlôe3_°mt
*);

102 (*
	mföÆize
)(
sqlôe3_°mt
*
	mpStmt
);

103 (*
	m‰ì
)(*);

104 (*
	m‰ì_èbÀ
)(**
	mªsu…
);

105 (*
	mgë_autocommô
)(
	msqlôe3
*);

106 * (*
	mgë_auxd©a
)(
	msqlôe3_c⁄ãxt
*,);

107 (*
	mgë_èbÀ
)(
	msqlôe3
*,const *,***,*,*,**);

108 (*
	mglobÆ_ªcovî
)();

109 (*
	möãºu±x
)(
	msqlôe3
*);

110 
sqlôe_öt64
 (*
œ°_ö£π_rowid
)(
	msqlôe3
*);

111 c⁄° * (*
	mlibvîsi⁄
)();

112 (*
	mlibvîsi⁄_numbî
)();

113 *(*
	mmÆloc
)();

114 * (*
	mm¥ötf
)(const *,...);

115 (*
	m›í
)(c⁄° *,
	msqlôe3
**);

116 (*
	m›í16
)(c⁄° *,
	msqlôe3
**);

117 (*
	m¥ï¨e
)(
	msqlôe3
*,c⁄° *,,
	msqlôe3_°mt
**,const **);

118 (*
	m¥ï¨e16
)(
	msqlôe3
*,c⁄° *,,
	msqlôe3_°mt
**,const **);

119 * (*
	m¥ofûe
)(
	msqlôe3
*,(*)(*,c⁄° *,
	msqlôe_uöt64
),*);

120 (*
	m¥ogªss_h™dÀr
)(
	msqlôe3
*,,(*)(*),*);

121 *(*
	mªÆloc
)(*,);

122 (*
	mª£t
)(
sqlôe3_°mt
*
	mpStmt
);

123 (*
	mªsu…_blob
)(
	msqlôe3_c⁄ãxt
*,const *,,(*)(*));

124 (*
	mªsu…_doubÀ
)(
	msqlôe3_c⁄ãxt
*,);

125 (*
	mªsu…_îr‹
)(
	msqlôe3_c⁄ãxt
*,const *,);

126 (*
	mªsu…_îr‹16
)(
	msqlôe3_c⁄ãxt
*,const *,);

127 (*
	mªsu…_öt
)(
	msqlôe3_c⁄ãxt
*,);

128 (*
	mªsu…_öt64
)(
	msqlôe3_c⁄ãxt
*,
	msqlôe_öt64
);

129 (*
	mªsu…_nuŒ
)(
	msqlôe3_c⁄ãxt
*);

130 (*
	mªsu…_ãxt
)(
	msqlôe3_c⁄ãxt
*,const *,,(*)(*));

131 (*
	mªsu…_ãxt16
)(
	msqlôe3_c⁄ãxt
*,const *,,(*)(*));

132 (*
	mªsu…_ãxt16be
)(
	msqlôe3_c⁄ãxt
*,const *,,(*)(*));

133 (*
	mªsu…_ãxt16À
)(
	msqlôe3_c⁄ãxt
*,const *,,(*)(*));

134 (*
	mªsu…_vÆue
)(
	msqlôe3_c⁄ãxt
*,
	msqlôe3_vÆue
*);

135 * (*
	mrﬁlback_hook
)(
	msqlôe3
*,(*)(*),*);

136 (*
	m£t_auth‹izî
)(
	msqlôe3
*,(*)(*,,const *,const *,

138 (*
	m£t_auxd©a
)(
	msqlôe3_c⁄ãxt
*,,*,(*)(*));

139 * (*
	m¢¥ötf
)(,*,const *,...);

140 (*
	m°ï
)(
	msqlôe3_°mt
*);

141 (*
	mèbÀ_cﬁumn_mëad©a
)(
	msqlôe3
*,const *,const *,const *,

143 (*
	mthªad_˛ónup
)();

144 (*
	mtŸÆ_ch™ges
)(
	msqlôe3
*);

145 * (*
	måa˚
)(
	msqlôe3
*,(*
	mxTø˚
)(*,const *),*);

146 (*
	må™s„r_bödögs
)(
	msqlôe3_°mt
*,sqlite3_stmt*);

147 * (*
	mupd©e_hook
)(
	msqlôe3
*,(*)(*,,const*,const*,

148 
	msqlôe_öt64
),*);

149 * (*
	mu£r_d©a
)(
	msqlôe3_c⁄ãxt
*);

150 c⁄° * (*
	mvÆue_blob
)(
	msqlôe3_vÆue
*);

151 (*
	mvÆue_byãs
)(
	msqlôe3_vÆue
*);

152 (*
	mvÆue_byãs16
)(
	msqlôe3_vÆue
*);

153 (*
	mvÆue_doubÀ
)(
	msqlôe3_vÆue
*);

154 (*
	mvÆue_öt
)(
	msqlôe3_vÆue
*);

155 
sqlôe_öt64
 (*
vÆue_öt64
)(
	msqlôe3_vÆue
*);

156 (*
	mvÆue_numîic_ty≥
)(
	msqlôe3_vÆue
*);

157 c⁄° * (*
	mvÆue_ãxt
)(
	msqlôe3_vÆue
*);

158 c⁄° * (*
	mvÆue_ãxt16
)(
	msqlôe3_vÆue
*);

159 c⁄° * (*
	mvÆue_ãxt16be
)(
	msqlôe3_vÆue
*);

160 c⁄° * (*
	mvÆue_ãxt16À
)(
	msqlôe3_vÆue
*);

161 (*
	mvÆue_ty≥
)(
	msqlôe3_vÆue
*);

162 *(*
	mvm¥ötf
)(c⁄° *,
	mva_li°
);

164 (*
	movîlﬂd_fun˘i⁄
)(
	msqlôe3
*, c⁄° *
	mzFuncName
, 
	mnArg
);

166 (*
	m¥ï¨e_v2
)(
	msqlôe3
*,c⁄° *,,
	msqlôe3_°mt
**,const **);

167 (*
	m¥ï¨e16_v2
)(
	msqlôe3
*,c⁄° *,,
	msqlôe3_°mt
**,const **);

168 (*
	m˛ór_bödögs
)(
	msqlôe3_°mt
*);

170 (*
	m¸óã_moduÀ_v2
)(
	msqlôe3
*,c⁄° *,c⁄° 
	msqlôe3_moduÀ
*,*,

171 (*
	mxDe°roy
)(*));

173 (*
	mböd_zîoblob
)(
	msqlôe3_°mt
*,,);

174 (*
	mblob_byãs
)(
	msqlôe3_blob
*);

175 (*
	mblob_˛o£
)(
	msqlôe3_blob
*);

176 (*
	mblob_›í
)(
	msqlôe3
*,c⁄° *,c⁄° *,c⁄° *,
	msqlôe3_öt64
,

177 ,
	msqlôe3_blob
**);

178 (*
	mblob_ªad
)(
	msqlôe3_blob
*,*,,);

179 (*
	mblob_wrôe
)(
	msqlôe3_blob
*,const *,,);

180 (*
	m¸óã_cﬁœti⁄_v2
)(
	msqlôe3
*,const *,,*,

183 (*
	mfûe_c⁄åﬁ
)(
	msqlôe3
*,const *,,*);

184 
sqlôe3_öt64
 (*
mem‹y_highw©î
)();

185 
sqlôe3_öt64
 (*
mem‹y_u£d
)();

186 
	msqlôe3_muãx
 *(*
	mmuãx_Æloc
)();

187 (*
	mmuãx_íãr
)(
	msqlôe3_muãx
*);

188 (*
	mmuãx_‰ì
)(
	msqlôe3_muãx
*);

189 (*
	mmuãx_Àave
)(
	msqlôe3_muãx
*);

190 (*
	mmuãx_åy
)(
	msqlôe3_muãx
*);

191 (*
	m›í_v2
)(c⁄° *,
	msqlôe3
**,,const *);

192 (*
	mªÀa£_mem‹y
)();

193 (*
	mªsu…_îr‹_nomem
)(
	msqlôe3_c⁄ãxt
*);

194 (*
	mªsu…_îr‹_toobig
)(
	msqlôe3_c⁄ãxt
*);

195 (*
	m¶ìp
)();

196 (*
	mso·_hóp_limô
)();

197 
	msqlôe3_vfs
 *(*
	mvfs_föd
)(const *);

198 (*
	mvfs_ªgi°î
)(
	msqlôe3_vfs
*,);

199 (*
	mvfs_uƒegi°î
)(
	msqlôe3_vfs
*);

200 (*
	mxthªadß„
)();

201 (*
	mªsu…_zîoblob
)(
	msqlôe3_c⁄ãxt
*,);

202 (*
	mªsu…_îr‹_code
)(
	msqlôe3_c⁄ãxt
*,);

203 (*
	mã°_c⁄åﬁ
)(, ...);

204 (*
	møndom√ss
)(,*);

205 
	msqlôe3
 *(*
	mc⁄ãxt_db_h™dÀ
)(
	msqlôe3_c⁄ãxt
*);

206 (*
	mexãnded_ªsu…_codes
)(
	msqlôe3
*,);

207 (*
	mlimô
)(
	msqlôe3
*,,);

208 
	msqlôe3_°mt
 *(*
	m√xt_°mt
)(
	msqlôe3
*,sqlite3_stmt*);

209 c⁄° *(*
	msql
)(
	msqlôe3_°mt
*);

210 (*
	m°©us
)(,*,*,);

211 (*
	mbackup_föish
)(
	msqlôe3_backup
*);

212 
	msqlôe3_backup
 *(*
	mbackup_öô
)(
	msqlôe3
*,const *,sqlite3*,const *);

213 (*
	mbackup_∑gecou¡
)(
	msqlôe3_backup
*);

214 (*
	mbackup_ªmaöög
)(
	msqlôe3_backup
*);

215 (*
	mbackup_°ï
)(
	msqlôe3_backup
*,);

216 c⁄° *(*
	mcompûe›ti⁄_gë
)();

217 (*
	mcompûe›ti⁄_u£d
)(const *);

218 (*
	m¸óã_fun˘i⁄_v2
)(
	msqlôe3
*,const *,,,*,

219 (*
	mxFunc
)(
	msqlôe3_c⁄ãxt
*,,
	msqlôe3_vÆue
**),

220 (*
	mxSãp
)(
	msqlôe3_c⁄ãxt
*,,
	msqlôe3_vÆue
**),

221 (*
	mxFöÆ
)(
	msqlôe3_c⁄ãxt
*),

222 (*
	mxDe°roy
)(*));

223 (*
	mdb_c⁄fig
)(
	msqlôe3
*,,...);

224 
	msqlôe3_muãx
 *(*
	mdb_muãx
)(
	msqlôe3
*);

225 (*
	mdb_°©us
)(
	msqlôe3
*,,*,*,);

226 (*
	mexãnded_îrcode
)(
	msqlôe3
*);

227 (*
	mlog
)(,const *,...);

228 
sqlôe3_öt64
 (*
so·_hóp_limô64
)(
	msqlôe3_öt64
);

229 c⁄° *(*
	msour˚id
)();

230 (*
	m°mt_°©us
)(
	msqlôe3_°mt
*,,);

231 (*
	m°∫icmp
)(const *,const *,);

232 (*
	mu∆ock_nŸify
)(
	msqlôe3
*,(*)(**,),*);

233 (*
	mwÆ_autocheckpoöt
)(
	msqlôe3
*,);

234 (*
	mwÆ_checkpoöt
)(
	msqlôe3
*,const *);

235 *(*
	mwÆ_hook
)(
	msqlôe3
*,(*)(*,sqlite3*,const *,),*);

236 (*
	mblob_ª›í
)(
	msqlôe3_blob
*,
	msqlôe3_öt64
);

237 (*
	mvèb_c⁄fig
)(
	msqlôe3
*,
	m›
,...);

238 (*
	mvèb_⁄_c⁄Êi˘
)(
	msqlôe3
*);

240 (*
	m˛o£_v2
)(
	msqlôe3
*);

241 c⁄° *(*
	mdb_fûíame
)(
	msqlôe3
*,const *);

242 (*
	mdb_ªad⁄ly
)(
	msqlôe3
*,const *);

243 (*
	mdb_ªÀa£_mem‹y
)(
	msqlôe3
*);

244 c⁄° *(*
	mîr°r
)();

245 (*
	m°mt_busy
)(
	msqlôe3_°mt
*);

246 (*
	m°mt_ªad⁄ly
)(
	msqlôe3_°mt
*);

247 (*
	m°ricmp
)(const *,const *);

248 (*
	muri_boﬁón
)(const *,const *,);

249 
sqlôe3_öt64
 (*
uri_öt64
)(c⁄° *,c⁄° *,
	msqlôe3_öt64
);

250 c⁄° *(*
	muri_∑ømëî
)(const *,const *);

251 *(*
	mv¢¥ötf
)(,*,c⁄° *,
	mva_li°
);

252 (*
	mwÆ_checkpoöt_v2
)(
	msqlôe3
*,const *,,*,*);

254 (*
	mauto_exãnsi⁄
)((*)());

255 (*
	mböd_blob64
)(
	msqlôe3_°mt
*,,c⁄° *,
	msqlôe3_uöt64
,

257 (*
	mböd_ãxt64
)(
	msqlôe3_°mt
*,,c⁄° *,
	msqlôe3_uöt64
,

259 (*
	mˇn˚l_auto_exãnsi⁄
)((*)());

260 (*
	mlﬂd_exãnsi⁄
)(
	msqlôe3
*,const *,const *,**);

261 *(*
	mmÆloc64
)(
	msqlôe3_uöt64
);

262 
sqlôe3_uöt64
 (*
msize
)(*);

263 *(*
	mªÆloc64
)(*,
	msqlôe3_uöt64
);

264 (*
	mª£t_auto_exãnsi⁄
)();

265 (*
	mªsu…_blob64
)(
	msqlôe3_c⁄ãxt
*,c⁄° *,
	msqlôe3_uöt64
,

267 (*
	mªsu…_ãxt64
)(
	msqlôe3_c⁄ãxt
*,c⁄° *,
	msqlôe3_uöt64
,

269 (*
	m°rglob
)(const *,const *);

271 
	msqlôe3_vÆue
 *(*
	mvÆue_dup
)(const sqlite3_value*);

272 (*
	mvÆue_‰ì
)(
	msqlôe3_vÆue
*);

273 (*
	mªsu…_zîoblob64
)(
	msqlôe3_c⁄ãxt
*,
	msqlôe3_uöt64
);

274 (*
	mböd_zîoblob64
)(
	msqlôe3_°mt
*, , 
	msqlôe3_uöt64
);

276 (*
	mvÆue_subty≥
)(
	msqlôe3_vÆue
*);

277 (*
	mªsu…_subty≥
)(
	msqlôe3_c⁄ãxt
*,);

279 (*
	m°©us64
)(,
	msqlôe3_öt64
*,sqlite3_int64*,);

280 (*
	m°æike
)(const *,const *,);

281 (*
	mdb_ˇcheÊush
)(
	msqlôe3
*);

283 (*
	msy°em_î∫o
)(
	msqlôe3
*);

297 #i‡!
deföed
(
SQLITE_CORE
Ë&& !deföed(
SQLITE_OMIT_LOAD_EXTENSION
)

298 
	#sqlôe3_aggªg©e_c⁄ãxt
 
sqlôe3_≠i
->
aggªg©e_c⁄ãxt


	)

299 #i‚de‡
SQLITE_OMIT_DEPRECATED


300 
	#sqlôe3_aggªg©e_cou¡
 
sqlôe3_≠i
->
aggªg©e_cou¡


	)

302 
	#sqlôe3_böd_blob
 
sqlôe3_≠i
->
böd_blob


	)

303 
	#sqlôe3_böd_doubÀ
 
sqlôe3_≠i
->
böd_doubÀ


	)

304 
	#sqlôe3_böd_öt
 
sqlôe3_≠i
->
böd_öt


	)

305 
	#sqlôe3_böd_öt64
 
sqlôe3_≠i
->
böd_öt64


	)

306 
	#sqlôe3_böd_nuŒ
 
sqlôe3_≠i
->
böd_nuŒ


	)

307 
	#sqlôe3_böd_∑ømëî_cou¡
 
sqlôe3_≠i
->
böd_∑ømëî_cou¡


	)

308 
	#sqlôe3_böd_∑ømëî_ödex
 
sqlôe3_≠i
->
böd_∑ømëî_ödex


	)

309 
	#sqlôe3_böd_∑ømëî_«me
 
sqlôe3_≠i
->
böd_∑ømëî_«me


	)

310 
	#sqlôe3_böd_ãxt
 
sqlôe3_≠i
->
böd_ãxt


	)

311 
	#sqlôe3_böd_ãxt16
 
sqlôe3_≠i
->
böd_ãxt16


	)

312 
	#sqlôe3_böd_vÆue
 
sqlôe3_≠i
->
böd_vÆue


	)

313 
	#sqlôe3_busy_h™dÀr
 
sqlôe3_≠i
->
busy_h™dÀr


	)

314 
	#sqlôe3_busy_timeout
 
sqlôe3_≠i
->
busy_timeout


	)

315 
	#sqlôe3_ch™ges
 
sqlôe3_≠i
->
ch™ges


	)

316 
	#sqlôe3_˛o£
 
sqlôe3_≠i
->
˛o£


	)

317 
	#sqlôe3_cﬁœti⁄_√eded
 
sqlôe3_≠i
->
cﬁœti⁄_√eded


	)

318 
	#sqlôe3_cﬁœti⁄_√eded16
 
sqlôe3_≠i
->
cﬁœti⁄_√eded16


	)

319 
	#sqlôe3_cﬁumn_blob
 
sqlôe3_≠i
->
cﬁumn_blob


	)

320 
	#sqlôe3_cﬁumn_byãs
 
sqlôe3_≠i
->
cﬁumn_byãs


	)

321 
	#sqlôe3_cﬁumn_byãs16
 
sqlôe3_≠i
->
cﬁumn_byãs16


	)

322 
	#sqlôe3_cﬁumn_cou¡
 
sqlôe3_≠i
->
cﬁumn_cou¡


	)

323 
	#sqlôe3_cﬁumn_d©aba£_«me
 
sqlôe3_≠i
->
cﬁumn_d©aba£_«me


	)

324 
	#sqlôe3_cﬁumn_d©aba£_«me16
 
sqlôe3_≠i
->
cﬁumn_d©aba£_«me16


	)

325 
	#sqlôe3_cﬁumn_de˛ty≥
 
sqlôe3_≠i
->
cﬁumn_de˛ty≥


	)

326 
	#sqlôe3_cﬁumn_de˛ty≥16
 
sqlôe3_≠i
->
cﬁumn_de˛ty≥16


	)

327 
	#sqlôe3_cﬁumn_doubÀ
 
sqlôe3_≠i
->
cﬁumn_doubÀ


	)

328 
	#sqlôe3_cﬁumn_öt
 
sqlôe3_≠i
->
cﬁumn_öt


	)

329 
	#sqlôe3_cﬁumn_öt64
 
sqlôe3_≠i
->
cﬁumn_öt64


	)

330 
	#sqlôe3_cﬁumn_«me
 
sqlôe3_≠i
->
cﬁumn_«me


	)

331 
	#sqlôe3_cﬁumn_«me16
 
sqlôe3_≠i
->
cﬁumn_«me16


	)

332 
	#sqlôe3_cﬁumn_‹igö_«me
 
sqlôe3_≠i
->
cﬁumn_‹igö_«me


	)

333 
	#sqlôe3_cﬁumn_‹igö_«me16
 
sqlôe3_≠i
->
cﬁumn_‹igö_«me16


	)

334 
	#sqlôe3_cﬁumn_èbÀ_«me
 
sqlôe3_≠i
->
cﬁumn_èbÀ_«me


	)

335 
	#sqlôe3_cﬁumn_èbÀ_«me16
 
sqlôe3_≠i
->
cﬁumn_èbÀ_«me16


	)

336 
	#sqlôe3_cﬁumn_ãxt
 
sqlôe3_≠i
->
cﬁumn_ãxt


	)

337 
	#sqlôe3_cﬁumn_ãxt16
 
sqlôe3_≠i
->
cﬁumn_ãxt16


	)

338 
	#sqlôe3_cﬁumn_ty≥
 
sqlôe3_≠i
->
cﬁumn_ty≥


	)

339 
	#sqlôe3_cﬁumn_vÆue
 
sqlôe3_≠i
->
cﬁumn_vÆue


	)

340 
	#sqlôe3_commô_hook
 
sqlôe3_≠i
->
commô_hook


	)

341 
	#sqlôe3_com∂ëe
 
sqlôe3_≠i
->
com∂ëe


	)

342 
	#sqlôe3_com∂ëe16
 
sqlôe3_≠i
->
com∂ëe16


	)

343 
	#sqlôe3_¸óã_cﬁœti⁄
 
sqlôe3_≠i
->
¸óã_cﬁœti⁄


	)

344 
	#sqlôe3_¸óã_cﬁœti⁄16
 
sqlôe3_≠i
->
¸óã_cﬁœti⁄16


	)

345 
	#sqlôe3_¸óã_fun˘i⁄
 
sqlôe3_≠i
->
¸óã_fun˘i⁄


	)

346 
	#sqlôe3_¸óã_fun˘i⁄16
 
sqlôe3_≠i
->
¸óã_fun˘i⁄16


	)

347 
	#sqlôe3_¸óã_moduÀ
 
sqlôe3_≠i
->
¸óã_moduÀ


	)

348 
	#sqlôe3_¸óã_moduÀ_v2
 
sqlôe3_≠i
->
¸óã_moduÀ_v2


	)

349 
	#sqlôe3_d©a_cou¡
 
sqlôe3_≠i
->
d©a_cou¡


	)

350 
	#sqlôe3_db_h™dÀ
 
sqlôe3_≠i
->
db_h™dÀ


	)

351 
	#sqlôe3_de˛¨e_vèb
 
sqlôe3_≠i
->
de˛¨e_vèb


	)

352 
	#sqlôe3_íabÀ_sh¨ed_ˇche
 
sqlôe3_≠i
->
íabÀ_sh¨ed_ˇche


	)

353 
	#sqlôe3_îrcode
 
sqlôe3_≠i
->
îrcode


	)

354 
	#sqlôe3_îrmsg
 
sqlôe3_≠i
->
îrmsg


	)

355 
	#sqlôe3_îrmsg16
 
sqlôe3_≠i
->
îrmsg16


	)

356 
	#sqlôe3_exec
 
sqlôe3_≠i
->
exec


	)

357 #i‚de‡
SQLITE_OMIT_DEPRECATED


358 
	#sqlôe3_expúed
 
sqlôe3_≠i
->
expúed


	)

360 
	#sqlôe3_föÆize
 
sqlôe3_≠i
->
föÆize


	)

361 
	#sqlôe3_‰ì
 
sqlôe3_≠i
->
‰ì


	)

362 
	#sqlôe3_‰ì_èbÀ
 
sqlôe3_≠i
->
‰ì_èbÀ


	)

363 
	#sqlôe3_gë_autocommô
 
sqlôe3_≠i
->
gë_autocommô


	)

364 
	#sqlôe3_gë_auxd©a
 
sqlôe3_≠i
->
gë_auxd©a


	)

365 
	#sqlôe3_gë_èbÀ
 
sqlôe3_≠i
->
gë_èbÀ


	)

366 #i‚de‡
SQLITE_OMIT_DEPRECATED


367 
	#sqlôe3_globÆ_ªcovî
 
sqlôe3_≠i
->
globÆ_ªcovî


	)

369 
	#sqlôe3_öãºu±
 
sqlôe3_≠i
->
öãºu±x


	)

370 
	#sqlôe3_œ°_ö£π_rowid
 
sqlôe3_≠i
->
œ°_ö£π_rowid


	)

371 
	#sqlôe3_libvîsi⁄
 
sqlôe3_≠i
->
libvîsi⁄


	)

372 
	#sqlôe3_libvîsi⁄_numbî
 
sqlôe3_≠i
->
libvîsi⁄_numbî


	)

373 
	#sqlôe3_mÆloc
 
sqlôe3_≠i
->
mÆloc


	)

374 
	#sqlôe3_m¥ötf
 
sqlôe3_≠i
->
m¥ötf


	)

375 
	#sqlôe3_›í
 
sqlôe3_≠i
->
›í


	)

376 
	#sqlôe3_›í16
 
sqlôe3_≠i
->
›í16


	)

377 
	#sqlôe3_¥ï¨e
 
sqlôe3_≠i
->
¥ï¨e


	)

378 
	#sqlôe3_¥ï¨e16
 
sqlôe3_≠i
->
¥ï¨e16


	)

379 
	#sqlôe3_¥ï¨e_v2
 
sqlôe3_≠i
->
¥ï¨e_v2


	)

380 
	#sqlôe3_¥ï¨e16_v2
 
sqlôe3_≠i
->
¥ï¨e16_v2


	)

381 
	#sqlôe3_¥ofûe
 
sqlôe3_≠i
->
¥ofûe


	)

382 
	#sqlôe3_¥ogªss_h™dÀr
 
sqlôe3_≠i
->
¥ogªss_h™dÀr


	)

383 
	#sqlôe3_ªÆloc
 
sqlôe3_≠i
->
ªÆloc


	)

384 
	#sqlôe3_ª£t
 
sqlôe3_≠i
->
ª£t


	)

385 
	#sqlôe3_ªsu…_blob
 
sqlôe3_≠i
->
ªsu…_blob


	)

386 
	#sqlôe3_ªsu…_doubÀ
 
sqlôe3_≠i
->
ªsu…_doubÀ


	)

387 
	#sqlôe3_ªsu…_îr‹
 
sqlôe3_≠i
->
ªsu…_îr‹


	)

388 
	#sqlôe3_ªsu…_îr‹16
 
sqlôe3_≠i
->
ªsu…_îr‹16


	)

389 
	#sqlôe3_ªsu…_öt
 
sqlôe3_≠i
->
ªsu…_öt


	)

390 
	#sqlôe3_ªsu…_öt64
 
sqlôe3_≠i
->
ªsu…_öt64


	)

391 
	#sqlôe3_ªsu…_nuŒ
 
sqlôe3_≠i
->
ªsu…_nuŒ


	)

392 
	#sqlôe3_ªsu…_ãxt
 
sqlôe3_≠i
->
ªsu…_ãxt


	)

393 
	#sqlôe3_ªsu…_ãxt16
 
sqlôe3_≠i
->
ªsu…_ãxt16


	)

394 
	#sqlôe3_ªsu…_ãxt16be
 
sqlôe3_≠i
->
ªsu…_ãxt16be


	)

395 
	#sqlôe3_ªsu…_ãxt16À
 
sqlôe3_≠i
->
ªsu…_ãxt16À


	)

396 
	#sqlôe3_ªsu…_vÆue
 
sqlôe3_≠i
->
ªsu…_vÆue


	)

397 
	#sqlôe3_rﬁlback_hook
 
sqlôe3_≠i
->
rﬁlback_hook


	)

398 
	#sqlôe3_£t_auth‹izî
 
sqlôe3_≠i
->
£t_auth‹izî


	)

399 
	#sqlôe3_£t_auxd©a
 
sqlôe3_≠i
->
£t_auxd©a


	)

400 
	#sqlôe3_¢¥ötf
 
sqlôe3_≠i
->
¢¥ötf


	)

401 
	#sqlôe3_°ï
 
sqlôe3_≠i
->
°ï


	)

402 
	#sqlôe3_èbÀ_cﬁumn_mëad©a
 
sqlôe3_≠i
->
èbÀ_cﬁumn_mëad©a


	)

403 
	#sqlôe3_thªad_˛ónup
 
sqlôe3_≠i
->
thªad_˛ónup


	)

404 
	#sqlôe3_tŸÆ_ch™ges
 
sqlôe3_≠i
->
tŸÆ_ch™ges


	)

405 
	#sqlôe3_åa˚
 
sqlôe3_≠i
->
åa˚


	)

406 #i‚de‡
SQLITE_OMIT_DEPRECATED


407 
	#sqlôe3_å™s„r_bödögs
 
sqlôe3_≠i
->
å™s„r_bödögs


	)

409 
	#sqlôe3_upd©e_hook
 
sqlôe3_≠i
->
upd©e_hook


	)

410 
	#sqlôe3_u£r_d©a
 
sqlôe3_≠i
->
u£r_d©a


	)

411 
	#sqlôe3_vÆue_blob
 
sqlôe3_≠i
->
vÆue_blob


	)

412 
	#sqlôe3_vÆue_byãs
 
sqlôe3_≠i
->
vÆue_byãs


	)

413 
	#sqlôe3_vÆue_byãs16
 
sqlôe3_≠i
->
vÆue_byãs16


	)

414 
	#sqlôe3_vÆue_doubÀ
 
sqlôe3_≠i
->
vÆue_doubÀ


	)

415 
	#sqlôe3_vÆue_öt
 
sqlôe3_≠i
->
vÆue_öt


	)

416 
	#sqlôe3_vÆue_öt64
 
sqlôe3_≠i
->
vÆue_öt64


	)

417 
	#sqlôe3_vÆue_numîic_ty≥
 
sqlôe3_≠i
->
vÆue_numîic_ty≥


	)

418 
	#sqlôe3_vÆue_ãxt
 
sqlôe3_≠i
->
vÆue_ãxt


	)

419 
	#sqlôe3_vÆue_ãxt16
 
sqlôe3_≠i
->
vÆue_ãxt16


	)

420 
	#sqlôe3_vÆue_ãxt16be
 
sqlôe3_≠i
->
vÆue_ãxt16be


	)

421 
	#sqlôe3_vÆue_ãxt16À
 
sqlôe3_≠i
->
vÆue_ãxt16À


	)

422 
	#sqlôe3_vÆue_ty≥
 
sqlôe3_≠i
->
vÆue_ty≥


	)

423 
	#sqlôe3_vm¥ötf
 
sqlôe3_≠i
->
vm¥ötf


	)

424 
	#sqlôe3_v¢¥ötf
 
sqlôe3_≠i
->
v¢¥ötf


	)

425 
	#sqlôe3_ovîlﬂd_fun˘i⁄
 
sqlôe3_≠i
->
ovîlﬂd_fun˘i⁄


	)

426 
	#sqlôe3_¥ï¨e_v2
 
sqlôe3_≠i
->
¥ï¨e_v2


	)

427 
	#sqlôe3_¥ï¨e16_v2
 
sqlôe3_≠i
->
¥ï¨e16_v2


	)

428 
	#sqlôe3_˛ór_bödögs
 
sqlôe3_≠i
->
˛ór_bödögs


	)

429 
	#sqlôe3_böd_zîoblob
 
sqlôe3_≠i
->
böd_zîoblob


	)

430 
	#sqlôe3_blob_byãs
 
sqlôe3_≠i
->
blob_byãs


	)

431 
	#sqlôe3_blob_˛o£
 
sqlôe3_≠i
->
blob_˛o£


	)

432 
	#sqlôe3_blob_›í
 
sqlôe3_≠i
->
blob_›í


	)

433 
	#sqlôe3_blob_ªad
 
sqlôe3_≠i
->
blob_ªad


	)

434 
	#sqlôe3_blob_wrôe
 
sqlôe3_≠i
->
blob_wrôe


	)

435 
	#sqlôe3_¸óã_cﬁœti⁄_v2
 
sqlôe3_≠i
->
¸óã_cﬁœti⁄_v2


	)

436 
	#sqlôe3_fûe_c⁄åﬁ
 
sqlôe3_≠i
->
fûe_c⁄åﬁ


	)

437 
	#sqlôe3_mem‹y_highw©î
 
sqlôe3_≠i
->
mem‹y_highw©î


	)

438 
	#sqlôe3_mem‹y_u£d
 
sqlôe3_≠i
->
mem‹y_u£d


	)

439 
	#sqlôe3_muãx_Æloc
 
sqlôe3_≠i
->
muãx_Æloc


	)

440 
	#sqlôe3_muãx_íãr
 
sqlôe3_≠i
->
muãx_íãr


	)

441 
	#sqlôe3_muãx_‰ì
 
sqlôe3_≠i
->
muãx_‰ì


	)

442 
	#sqlôe3_muãx_Àave
 
sqlôe3_≠i
->
muãx_Àave


	)

443 
	#sqlôe3_muãx_åy
 
sqlôe3_≠i
->
muãx_åy


	)

444 
	#sqlôe3_›í_v2
 
sqlôe3_≠i
->
›í_v2


	)

445 
	#sqlôe3_ªÀa£_mem‹y
 
sqlôe3_≠i
->
ªÀa£_mem‹y


	)

446 
	#sqlôe3_ªsu…_îr‹_nomem
 
sqlôe3_≠i
->
ªsu…_îr‹_nomem


	)

447 
	#sqlôe3_ªsu…_îr‹_toobig
 
sqlôe3_≠i
->
ªsu…_îr‹_toobig


	)

448 
	#sqlôe3_¶ìp
 
sqlôe3_≠i
->
¶ìp


	)

449 
	#sqlôe3_so·_hóp_limô
 
sqlôe3_≠i
->
so·_hóp_limô


	)

450 
	#sqlôe3_vfs_föd
 
sqlôe3_≠i
->
vfs_föd


	)

451 
	#sqlôe3_vfs_ªgi°î
 
sqlôe3_≠i
->
vfs_ªgi°î


	)

452 
	#sqlôe3_vfs_uƒegi°î
 
sqlôe3_≠i
->
vfs_uƒegi°î


	)

453 
	#sqlôe3_thªadß„
 
sqlôe3_≠i
->
xthªadß„


	)

454 
	#sqlôe3_ªsu…_zîoblob
 
sqlôe3_≠i
->
ªsu…_zîoblob


	)

455 
	#sqlôe3_ªsu…_îr‹_code
 
sqlôe3_≠i
->
ªsu…_îr‹_code


	)

456 
	#sqlôe3_ã°_c⁄åﬁ
 
sqlôe3_≠i
->
ã°_c⁄åﬁ


	)

457 
	#sqlôe3_øndom√ss
 
sqlôe3_≠i
->
øndom√ss


	)

458 
	#sqlôe3_c⁄ãxt_db_h™dÀ
 
sqlôe3_≠i
->
c⁄ãxt_db_h™dÀ


	)

459 
	#sqlôe3_exãnded_ªsu…_codes
 
sqlôe3_≠i
->
exãnded_ªsu…_codes


	)

460 
	#sqlôe3_limô
 
sqlôe3_≠i
->
limô


	)

461 
	#sqlôe3_√xt_°mt
 
sqlôe3_≠i
->
√xt_°mt


	)

462 
	#sqlôe3_sql
 
sqlôe3_≠i
->
sql


	)

463 
	#sqlôe3_°©us
 
sqlôe3_≠i
->
°©us


	)

464 
	#sqlôe3_backup_föish
 
sqlôe3_≠i
->
backup_föish


	)

465 
	#sqlôe3_backup_öô
 
sqlôe3_≠i
->
backup_öô


	)

466 
	#sqlôe3_backup_∑gecou¡
 
sqlôe3_≠i
->
backup_∑gecou¡


	)

467 
	#sqlôe3_backup_ªmaöög
 
sqlôe3_≠i
->
backup_ªmaöög


	)

468 
	#sqlôe3_backup_°ï
 
sqlôe3_≠i
->
backup_°ï


	)

469 
	#sqlôe3_compûe›ti⁄_gë
 
sqlôe3_≠i
->
compûe›ti⁄_gë


	)

470 
	#sqlôe3_compûe›ti⁄_u£d
 
sqlôe3_≠i
->
compûe›ti⁄_u£d


	)

471 
	#sqlôe3_¸óã_fun˘i⁄_v2
 
sqlôe3_≠i
->
¸óã_fun˘i⁄_v2


	)

472 
	#sqlôe3_db_c⁄fig
 
sqlôe3_≠i
->
db_c⁄fig


	)

473 
	#sqlôe3_db_muãx
 
sqlôe3_≠i
->
db_muãx


	)

474 
	#sqlôe3_db_°©us
 
sqlôe3_≠i
->
db_°©us


	)

475 
	#sqlôe3_exãnded_îrcode
 
sqlôe3_≠i
->
exãnded_îrcode


	)

476 
	#sqlôe3_log
 
sqlôe3_≠i
->
log


	)

477 
	#sqlôe3_so·_hóp_limô64
 
sqlôe3_≠i
->
so·_hóp_limô64


	)

478 
	#sqlôe3_sour˚id
 
sqlôe3_≠i
->
sour˚id


	)

479 
	#sqlôe3_°mt_°©us
 
sqlôe3_≠i
->
°mt_°©us


	)

480 
	#sqlôe3_°∫icmp
 
sqlôe3_≠i
->
°∫icmp


	)

481 
	#sqlôe3_u∆ock_nŸify
 
sqlôe3_≠i
->
u∆ock_nŸify


	)

482 
	#sqlôe3_wÆ_autocheckpoöt
 
sqlôe3_≠i
->
wÆ_autocheckpoöt


	)

483 
	#sqlôe3_wÆ_checkpoöt
 
sqlôe3_≠i
->
wÆ_checkpoöt


	)

484 
	#sqlôe3_wÆ_hook
 
sqlôe3_≠i
->
wÆ_hook


	)

485 
	#sqlôe3_blob_ª›í
 
sqlôe3_≠i
->
blob_ª›í


	)

486 
	#sqlôe3_vèb_c⁄fig
 
sqlôe3_≠i
->
vèb_c⁄fig


	)

487 
	#sqlôe3_vèb_⁄_c⁄Êi˘
 
sqlôe3_≠i
->
vèb_⁄_c⁄Êi˘


	)

489 
	#sqlôe3_˛o£_v2
 
sqlôe3_≠i
->
˛o£_v2


	)

490 
	#sqlôe3_db_fûíame
 
sqlôe3_≠i
->
db_fûíame


	)

491 
	#sqlôe3_db_ªad⁄ly
 
sqlôe3_≠i
->
db_ªad⁄ly


	)

492 
	#sqlôe3_db_ªÀa£_mem‹y
 
sqlôe3_≠i
->
db_ªÀa£_mem‹y


	)

493 
	#sqlôe3_îr°r
 
sqlôe3_≠i
->
îr°r


	)

494 
	#sqlôe3_°mt_busy
 
sqlôe3_≠i
->
°mt_busy


	)

495 
	#sqlôe3_°mt_ªad⁄ly
 
sqlôe3_≠i
->
°mt_ªad⁄ly


	)

496 
	#sqlôe3_°ricmp
 
sqlôe3_≠i
->
°ricmp


	)

497 
	#sqlôe3_uri_boﬁón
 
sqlôe3_≠i
->
uri_boﬁón


	)

498 
	#sqlôe3_uri_öt64
 
sqlôe3_≠i
->
uri_öt64


	)

499 
	#sqlôe3_uri_∑ømëî
 
sqlôe3_≠i
->
uri_∑ømëî


	)

500 
	#sqlôe3_uri_v¢¥ötf
 
sqlôe3_≠i
->
v¢¥ötf


	)

501 
	#sqlôe3_wÆ_checkpoöt_v2
 
sqlôe3_≠i
->
wÆ_checkpoöt_v2


	)

503 
	#sqlôe3_auto_exãnsi⁄
 
sqlôe3_≠i
->
auto_exãnsi⁄


	)

504 
	#sqlôe3_böd_blob64
 
sqlôe3_≠i
->
böd_blob64


	)

505 
	#sqlôe3_böd_ãxt64
 
sqlôe3_≠i
->
böd_ãxt64


	)

506 
	#sqlôe3_ˇn˚l_auto_exãnsi⁄
 
sqlôe3_≠i
->
ˇn˚l_auto_exãnsi⁄


	)

507 
	#sqlôe3_lﬂd_exãnsi⁄
 
sqlôe3_≠i
->
lﬂd_exãnsi⁄


	)

508 
	#sqlôe3_mÆloc64
 
sqlôe3_≠i
->
mÆloc64


	)

509 
	#sqlôe3_msize
 
sqlôe3_≠i
->
msize


	)

510 
	#sqlôe3_ªÆloc64
 
sqlôe3_≠i
->
ªÆloc64


	)

511 
	#sqlôe3_ª£t_auto_exãnsi⁄
 
sqlôe3_≠i
->
ª£t_auto_exãnsi⁄


	)

512 
	#sqlôe3_ªsu…_blob64
 
sqlôe3_≠i
->
ªsu…_blob64


	)

513 
	#sqlôe3_ªsu…_ãxt64
 
sqlôe3_≠i
->
ªsu…_ãxt64


	)

514 
	#sqlôe3_°rglob
 
sqlôe3_≠i
->
°rglob


	)

516 
	#sqlôe3_vÆue_dup
 
sqlôe3_≠i
->
vÆue_dup


	)

517 
	#sqlôe3_vÆue_‰ì
 
sqlôe3_≠i
->
vÆue_‰ì


	)

518 
	#sqlôe3_ªsu…_zîoblob64
 
sqlôe3_≠i
->
ªsu…_zîoblob64


	)

519 
	#sqlôe3_böd_zîoblob64
 
sqlôe3_≠i
->
böd_zîoblob64


	)

521 
	#sqlôe3_vÆue_subty≥
 
sqlôe3_≠i
->
vÆue_subty≥


	)

522 
	#sqlôe3_ªsu…_subty≥
 
sqlôe3_≠i
->
ªsu…_subty≥


	)

524 
	#sqlôe3_°©us64
 
sqlôe3_≠i
->
°©us64


	)

525 
	#sqlôe3_°æike
 
sqlôe3_≠i
->
°æike


	)

526 
	#sqlôe3_db_ˇcheÊush
 
sqlôe3_≠i
->
db_ˇcheÊush


	)

528 
	#sqlôe3_sy°em_î∫o
 
sqlôe3_≠i
->
sy°em_î∫o


	)

531 #i‡!
deföed
(
SQLITE_CORE
Ë&& !deföed(
SQLITE_OMIT_LOAD_EXTENSION
)

534 
	#SQLITE_EXTENSION_INIT1
 c⁄° 
sqlôe3_≠i_routöes
 *
sqlôe3_≠i
=0;

	)

535 
	#SQLITE_EXTENSION_INIT2
(
v
Ë
sqlôe3_≠i
=v;

	)

536 
	#SQLITE_EXTENSION_INIT3
 \

537 c⁄° 
sqlôe3_≠i_routöes
 *
sqlôe3_≠i
;

	)

541 
	#SQLITE_EXTENSION_INIT1


	)

542 
	#SQLITE_EXTENSION_INIT2
(
v
Ë()v;

	)

543 
	#SQLITE_EXTENSION_INIT3


	)

	@sqliteInt.h

15 #i‚de‡
_SQLITEINT_H_


16 
	#_SQLITEINT_H_


	)

49 #i‡
deföed
(
_MSC_VER
) && _MSC_VER>=1400

50 
	#_CRT_RAND_S


	)

59 
	~"msvc.h
"

64 
	~"vxw‹ks.h
"

90 #i‚de‡
SQLITE_DISABLE_LFS


91 
	#_LARGE_FILE
 1

	)

92 #i‚de‡
_FILE_OFFSET_BITS


93 
	#_FILE_OFFSET_BITS
 64

	)

95 
	#_LARGEFILE_SOURCE
 1

	)

99 #ifde‡
__GNUC__


100 
	#GCC_VERSION
 (
__GNUC__
*1000000+
__GNUC_MINOR__
*1000+
__GNUC_PATCHLEVEL__
)

	)

102 
	#GCC_VERSION
 0

	)

106 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
_GNU_SOURCE
)

107 
	#_GNU_SOURCE


	)

110 #i‡
deföed
(
__O≥nBSD__
Ë&& !deföed(
_BSD_SOURCE
)

111 
	#_BSD_SOURCE


	)

128 #i‡
deföed
(
_HAVE_MINGW_H
)

129 
	~"mögw.h
"

130 #ñi‡
deföed
(
_HAVE__MINGW_H
)

131 
	~"_mögw.h
"

139 #i‡!
deföed
(
_USE_32BIT_TIME_T
Ë&& !deföed(
_USE_64BIT_TIME_T
) && \

140 
deföed
(
_WIN32
Ë&& !deföed(
_WIN64
) && \

141 
deföed
(
__MINGW_MAJOR_VERSION
Ë&& 
	g__MINGW_MAJOR_VERSION
 >= 4 && \

142 
	$deföed
(
__MSVCRT__
)

143 
	#_USE_32BIT_TIME_T


	)

150 
	~"sqlôe3.h
"

156 #ifde‡
_HAVE_SQLITE_CONFIG_H


157 
	~"c⁄fig.h
"

160 
	~"sqlôeLimô.h
"

163 #i‡
	`deföed
(
__BORLANDC__
)

164 #¥agm®
w¨n
 -
rch


165 #¥agm®
w¨n
 -
ccc


166 #¥agm®
w¨n
 -
aus


167 #¥agm®
w¨n
 -
csu


168 #¥agm®
w¨n
 -
•a


174 #ifde‡
HAVE_STDINT_H


175 
	~<°döt.h
>

177 #ifde‡
HAVE_INTTYPES_H


178 
	~<öây≥s.h
>

197 #i‡
	`deföed
(
__PTRDIFF_TYPE__
)

198 
	#SQLITE_INT_TO_PTR
(
X
Ë((*)(
__PTRDIFF_TYPE__
)(X))

	)

199 
	#SQLITE_PTR_TO_INT
(
X
Ë(()(
__PTRDIFF_TYPE__
)(X))

	)

200 #ñi‡!
	`deföed
(
__GNUC__
)

201 
	#SQLITE_INT_TO_PTR
(
X
Ë((*)&((*)0)[X])

	)

202 
	#SQLITE_PTR_TO_INT
(
X
Ë(()(((*)X)-(*)0))

	)

203 #ñi‡
	`deföed
(
HAVE_STDINT_H
)

204 
	#SQLITE_INT_TO_PTR
(
X
Ë((*)(
öçå_t
)(X))

	)

205 
	#SQLITE_PTR_TO_INT
(
X
Ë(()(
öçå_t
)(X))

	)

207 
	#SQLITE_INT_TO_PTR
(
X
Ë((*)(X))

	)

208 
	#SQLITE_PTR_TO_INT
(
X
Ë(()(X))

	)

215 #i‡
	`deföed
(
__GNUC__
)

216 
	#SQLITE_NOINLINE
 
	`__©åibuã__
((
noölöe
))

	)

217 #ñi‡
	`deföed
(
_MSC_VER
) && _MSC_VER>=1310

218 
	#SQLITE_NOINLINE
 
	`__de˛•ec
(
noölöe
)

	)

220 
	#SQLITE_NOINLINE


	)

228 #i‡!
	`deföed
(
SQLITE_DISABLE_INTRINSIC
)

229 #i‡
	`deföed
(
_MSC_VER
) && _MSC_VER>=1300

230 #i‡!
	`deföed
(
_WIN32_WCE
)

231 
	~<öåö.h
>

232 #¥agm®
	`öåösic
(
_byãsw≠_ush‹t
)

233 #¥agm®
	`öåösic
(
_byãsw≠_ul⁄g
)

234 #¥agm®
	`öåösic
(
_RódWrôeB¨rõr
)

236 
	~<cmnöåö.h
>

252 #i‡!
	`deföed
(
SQLITE_THREADSAFE
)

253 #i‡
	`deföed
(
THREADSAFE
)

254 
	#SQLITE_THREADSAFE
 
THREADSAFE


	)

256 
	#SQLITE_THREADSAFE
 1

	)

264 #i‚de‡
SQLITE_POWERSAFE_OVERWRITE


265 
	#SQLITE_POWERSAFE_OVERWRITE
 1

	)

273 #i‡!
	`deföed
(
SQLITE_DEFAULT_MEMSTATUS
)

274 
	#SQLITE_DEFAULT_MEMSTATUS
 1

	)

294 #i‡
	`deföed
(
SQLITE_SYSTEM_MALLOC
) \

295 + 
	`deföed
(
SQLITE_WIN32_MALLOC
) \

296 + 
	`deföed
(
SQLITE_ZERO_MALLOC
) \

297 + 
	`deföed
(
SQLITE_MEMDEBUG
)>1

303 #i‡
	`deföed
(
SQLITE_SYSTEM_MALLOC
) \

304 + 
	`deföed
(
SQLITE_WIN32_MALLOC
) \

305 + 
	`deföed
(
SQLITE_ZERO_MALLOC
) \

306 + 
	`deföed
(
SQLITE_MEMDEBUG
)==0

307 
	#SQLITE_SYSTEM_MALLOC
 1

	)

314 #i‡!
	`deföed
(
SQLITE_MALLOC_SOFT_LIMIT
)

315 
	#SQLITE_MALLOC_SOFT_LIMIT
 1024

	)

324 #i‡!
	`deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
__DARWIN__
Ë&& !deföed(
__APPLE__
)

325 
	#_XOPEN_SOURCE
 600

	)

339 #i‡!
	`deföed
(
NDEBUG
Ë&& !deföed(
SQLITE_DEBUG
)

340 
	#NDEBUG
 1

	)

342 #i‡
	`deföed
(
NDEBUG
Ë&& deföed(
SQLITE_DEBUG
)

343 #unde‡
NDEBUG


349 #i‡!
	`deföed
(
SQLITE_ENABLE_EXPLAIN_COMMENTS
Ë&& deföed(
SQLITE_DEBUG
)

350 
	#SQLITE_ENABLE_EXPLAIN_COMMENTS
 1

	)

367 #ifde‡
SQLITE_COVERAGE_TEST


368 
	`sqlôe3Covîage
();

369 
	#ã°ˇ£
(
X
Ëif–X ){ 
	`sqlôe3Covîage
(
__LINE__
); 
	}

	)
}

371 
	#ã°ˇ£
(
X
)

	)

379 #i‡!
deföed
(
NDEBUG
Ë|| deföed(
SQLITE_COVERAGE_TEST
)

380 
	#TESTONLY
(
X
Ë
	)
X

382 
	#TESTONLY
(
X
)

	)

393 #i‚de‡
NDEBUG


394 
	#VVA_ONLY
(
X
Ë
	)
X

396 
	#VVA_ONLY
(
X
)

	)

414 #i‡
deföed
(
SQLITE_COVERAGE_TEST
Ë|| deföed(
SQLITE_MUTATION_TEST
)

415 
	#ALWAYS
(
X
Ë(1)

	)

416 
	#NEVER
(
X
Ë(0)

	)

417 #ñi‡!
deföed
(
NDEBUG
)

418 
	#ALWAYS
(
X
Ë((X)?1:(
	`as£π
(0),0))

	)

419 
	#NEVER
(
X
Ë((X)?(
	`as£π
(0),1):0)

	)

421 
	#ALWAYS
(
X
Ë(X)

	)

422 
	#NEVER
(
X
Ë(X)

	)

432 #i‡
deföed
(
SQLITE_TEST_REALLOC_STRESS
)

433 
	#ONLY_IF_REALLOC_STRESS
(
X
Ë(X)

	)

434 #ñi‡!
deföed
(
NDEBUG
)

435 
	#ONLY_IF_REALLOC_STRESS
(
X
Ë((X)?(
	`as£π
(0),1):0)

	)

437 
	#ONLY_IF_REALLOC_STRESS
(
X
Ë(0)

	)

443 #i‡
deföed
(
SQLITE_FORCE_OS_TRACE
Ë|| deföed(
SQLITE_TEST
) || \

444 (
deföed
(
SQLITE_DEBUG
Ë&& 
	gSQLITE_OS_WIN
)

445 
sqlôe3OSTø˚
;

446 
	#OSTRACE
(
X
Ëif–
sqlôe3OSTø˚
 ) 
sqlôe3DebugPrötf
 
	)
X

447 
	#SQLITE_HAVE_OS_TRACE


	)

449 
	#OSTRACE
(
X
)

	)

450 #unde‡
SQLITE_HAVE_OS_TRACE


459 #i‡
deföed
(
SQLITE_HAVE_OS_TRACE
Ë|| deföed(
SQLITE_TEST
) || \

460 (
deföed
(
SQLITE_DEBUG
Ë&& 
	gSQLITE_OS_WIN
)

461 
	#SQLITE_NEED_ERR_NAME


	)

463 #unde‡
SQLITE_NEED_ERR_NAME


469 #ifde‡
SQLITE_OMIT_EXPLAIN


470 #unde‡
SQLITE_ENABLE_EXPLAIN_COMMENTS


478 
	#IS_BIG_INT
(
X
Ë(((X)&~(
i64
)0xffffffff)!=0)

	)

487 
	#likñy
(
X
Ë(X)

	)

488 
	#u∆ikñy
(
X
Ë(X)

	)

490 
	~"hash.h
"

491 
	~"∑r£.h
"

492 
	~<°dio.h
>

493 
	~<°dlib.h
>

494 
	~<°rög.h
>

495 
	~<as£π.h
>

496 
	~<°ddef.h
>

502 #ifde‡
SQLITE_OMIT_FLOATING_POINT


503 
sqlôe_öt64


	)

504 
sqlôe_öt64


	)

505 
	#LONGDOUBLE_TYPE
 
sqlôe_öt64


	)

506 #i‚de‡
SQLITE_BIG_DBL


507 
	#SQLITE_BIG_DBL
 (((
sqlôe3_öt64
)1)<<50)

	)

509 
	#SQLITE_OMIT_DATETIME_FUNCS
 1

	)

510 
	#SQLITE_OMIT_TRACE
 1

	)

511 #unde‡
SQLITE_MIXED_ENDIAN_64BIT_FLOAT


512 #unde‡
SQLITE_HAVE_ISNAN


514 #i‚de‡
SQLITE_BIG_DBL


515 
	#SQLITE_BIG_DBL
 (1e99)

	)

523 #ifde‡
SQLITE_OMIT_TEMPDB


524 
	#OMIT_TEMPDB
 1

	)

526 
	#OMIT_TEMPDB
 0

	)

535 
	#SQLITE_MAX_FILE_FORMAT
 4

	)

536 #i‚de‡
SQLITE_DEFAULT_FILE_FORMAT


537 
	#SQLITE_DEFAULT_FILE_FORMAT
 4

	)

544 #i‚de‡
SQLITE_DEFAULT_RECURSIVE_TRIGGERS


545 
	#SQLITE_DEFAULT_RECURSIVE_TRIGGERS
 0

	)

552 #i‚de‡
SQLITE_TEMP_STORE


553 
	#SQLITE_TEMP_STORE
 1

	)

554 
	#SQLITE_TEMP_STORE_xc
 1

	)

562 #i‡
SQLITE_TEMP_STORE
==3 || 
SQLITE_THREADSAFE
==0

563 #unde‡
SQLITE_MAX_WORKER_THREADS


564 
	#SQLITE_MAX_WORKER_THREADS
 0

	)

566 #i‚de‡
SQLITE_MAX_WORKER_THREADS


567 
	#SQLITE_MAX_WORKER_THREADS
 8

	)

569 #i‚de‡
SQLITE_DEFAULT_WORKER_THREADS


570 
	#SQLITE_DEFAULT_WORKER_THREADS
 0

	)

572 #i‡
SQLITE_DEFAULT_WORKER_THREADS
>
SQLITE_MAX_WORKER_THREADS


573 #unde‡
SQLITE_MAX_WORKER_THREADS


574 
	#SQLITE_MAX_WORKER_THREADS
 
SQLITE_DEFAULT_WORKER_THREADS


	)

583 #i‚de‡
SQLITE_DEFAULT_PCACHE_INITSZ


584 
	#SQLITE_DEFAULT_PCACHE_INITSZ
 100

	)

591 #i‚de‡
off£tof


592 
	#off£tof
(
STRUCTURE
,
FIELD
Ë(()((*)&((STRUCTURE*)0)->FIELD))

	)

598 #i‚de‡
MIN


599 
	#MIN
(
A
,
B
Ë((A)<(B)?(A):(B))

	)

601 #i‚de‡
MAX


602 
	#MAX
(
A
,
B
Ë((A)>(B)?(A):(B))

	)

608 
	#SWAP
(
TYPE
,
A
,
B
Ë{TYPE 
t
=A; A=B; BÒ;}

	)

615 
	#SQLITE_EBCDIC
 1

	)

617 
	#SQLITE_ASCII
 1

	)

627 #i‚de‡
UINT32_TYPE


628 #ifde‡
HAVE_UINT32_T


629 
	#UINT32_TYPE
 
uöt32_t


	)

631 
	#UINT32_TYPE
 

	)

634 #i‚de‡
UINT16_TYPE


635 #ifde‡
HAVE_UINT16_T


636 
	#UINT16_TYPE
 
uöt16_t


	)

638 
	#UINT16_TYPE
 

	)

641 #i‚de‡
INT16_TYPE


642 #ifde‡
HAVE_INT16_T


643 
	#INT16_TYPE
 
öt16_t


	)

645 
	#INT16_TYPE
 

	)

648 #i‚de‡
UINT8_TYPE


649 #ifde‡
HAVE_UINT8_T


650 
	#UINT8_TYPE
 
uöt8_t


	)

652 
	#UINT8_TYPE
 

	)

655 #i‚de‡
INT8_TYPE


656 #ifde‡
HAVE_INT8_T


657 
	#INT8_TYPE
 
öt8_t


	)

659 
	#INT8_TYPE
 sig√d 

	)

662 #i‚de‡
LONGDOUBLE_TYPE


663 
	#LONGDOUBLE_TYPE
 

	)

665 
sqlôe_öt64
 
	ti64
;

666 
sqlôe_uöt64
 
	tu64
;

667 
UINT32_TYPE
 
	tu32
;

668 
UINT16_TYPE
 
	tu16
;

669 
INT16_TYPE
 
	ti16
;

670 
UINT8_TYPE
 
	tu8
;

671 
INT8_TYPE
 
	ti8
;

679 
	#SQLITE_MAX_U32
 ((((
u64
)1)<<32)-1)

	)

687 #ifde‡
SQLITE_64BIT_STATS


688 
u64
 
	ttRow˙t
;

690 
u32
 
	ttRow˙t
;

716 
INT16_TYPE
 
	tLogE°
;

721 #i‚de‡
SQLITE_PTRSIZE


722 #i‡
deföed
(
__SIZEOF_POINTER__
)

723 
	#SQLITE_PTRSIZE
 
__SIZEOF_POINTER__


	)

724 #ñi‡
deföed
(
i386
Ë|| deföed(
__i386__
Ë|| deföed(
_M_IX86
) || \

725 
deföed
(
_M_ARM
Ë|| deföed(
__¨m__
Ë|| 
	$deföed
(
__x86
)

726 
	#SQLITE_PTRSIZE
 4

	)

728 
	#SQLITE_PTRSIZE
 8

	)

734 #i‡
	`deföed
(
HAVE_STDINT_H
)

735 
uöçå_t
 
	tu±r
;

736 #ñi‡
SQLITE_PTRSIZE
==4

737 
u32
 
	tu±r
;

739 
u64
 
	tu±r
;

750 
	#SQLITE_WITHIN
(
P
,
S
,
E
Ë(((
u±r
)(P)>=(u±r)(S))&&((u±r)(P)<(u±r)(E)))

	)

762 #i‡(
	`deföed
(
i386
Ë|| deföed(
__i386__
Ë|| deföed(
_M_IX86
) || \

763 
	`deföed
(
__x86_64
Ë|| deföed(
__x86_64__
Ë|| deföed(
_M_X64
) || \

764 
	`deföed
(
_M_AMD64
Ë|| deföed(
_M_ARM
Ë|| deföed(
__x86
) || \

765 
	`deföed
(
__¨m__
)Ë&& !
	$deföed
(
SQLITE_RUNTIME_BYTEORDER
)

766 
	#SQLITE_BYTEORDER
 1234

	)

767 
	#SQLITE_BIGENDIAN
 0

	)

768 
	#SQLITE_LITTLEENDIAN
 1

	)

769 
	#SQLITE_UTF16NATIVE
 
SQLITE_UTF16LE


	)

771 #i‡(
	`deföed
(
•¨c
Ë|| deföed(
__µc__
)) \

772 && !
	$deföed
(
SQLITE_RUNTIME_BYTEORDER
)

773 
	#SQLITE_BYTEORDER
 4321

	)

774 
	#SQLITE_BIGENDIAN
 1

	)

775 
	#SQLITE_LITTLEENDIAN
 0

	)

776 
	#SQLITE_UTF16NATIVE
 
SQLITE_UTF16BE


	)

778 #i‡!
	`deföed
(
SQLITE_BYTEORDER
)

779 #ifde‡
SQLITE_AMALGAMATION


780 c⁄° 
sqlôe3⁄e
 = 1;

782 c⁄° 
sqlôe3⁄e
;

784 
	#SQLITE_BYTEORDER
 0

	)

785 
	#SQLITE_BIGENDIAN
 (*(*)(&
sqlôe3⁄e
)==0)

	)

786 
	#SQLITE_LITTLEENDIAN
 (*(*)(&
sqlôe3⁄e
)==1)

	)

787 
	#SQLITE_UTF16NATIVE
 (
SQLITE_BIGENDIAN
?
SQLITE_UTF16BE
:
SQLITE_UTF16LE
)

	)

795 
	#LARGEST_INT64
 (0xffffffff|(((
i64
)0x7fffffff)<<32))

	)

796 
	#SMALLEST_INT64
 (((
i64
)-1Ë- 
LARGEST_INT64
)

	)

802 
	#ROUND8
(
x
Ë(((x)+7)&~7)

	)

807 
	#ROUNDDOWN8
(
x
Ë((x)&~7)

	)

818 #ifde‡
SQLITE_4_BYTE_ALIGNED_MALLOC


819 
	#EIGHT_BYTE_ALIGNMENT
(
X
Ë((((*)(XË- (*)0)&3)==0)

	)

821 
	#EIGHT_BYTE_ALIGNMENT
(
X
Ë((((*)(XË- (*)0)&7)==0)

	)

827 #i‡
	`deföed
(
__O≥nBSD__
Ë|| deföed(
__QNXNTO__
)

828 #unde‡
SQLITE_MAX_MMAP_SIZE


829 
	#SQLITE_MAX_MMAP_SIZE
 0

	)

835 #ifde‡
__APPLE__


836 
	~<T¨gëC⁄dôi⁄Æs.h
>

838 #i‚de‡
SQLITE_MAX_MMAP_SIZE


839 #i‡
	`deföed
(
__löux__
) \

840 || 
	`deföed
(
_WIN32
) \

841 || (
	`deföed
(
__APPLE__
Ë&& deföed(
__MACH__
)) \

842 || 
	`deföed
(
__sun
) \

843 || 
	`deföed
(
__FªeBSD__
) \

844 || 
	$deföed
(
__Døg⁄Fly__
)

845 
	#SQLITE_MAX_MMAP_SIZE
 0x7fff0000

	)

847 
	#SQLITE_MAX_MMAP_SIZE
 0

	)

849 
	#SQLITE_MAX_MMAP_SIZE_xc
 1

	)

857 #i‚de‡
SQLITE_DEFAULT_MMAP_SIZE


858 
	#SQLITE_DEFAULT_MMAP_SIZE
 0

	)

859 
	#SQLITE_DEFAULT_MMAP_SIZE_xc
 1

	)

861 #i‡
SQLITE_DEFAULT_MMAP_SIZE
>
SQLITE_MAX_MMAP_SIZE


862 #unde‡
SQLITE_DEFAULT_MMAP_SIZE


863 
	#SQLITE_DEFAULT_MMAP_SIZE
 
SQLITE_MAX_MMAP_SIZE


	)

871 #ifde‡
SQLITE_ENABLE_STAT4


872 #unde‡
SQLITE_ENABLE_STAT3


873 
	#SQLITE_ENABLE_STAT3_OR_STAT4
 1

	)

874 #ñi‡
SQLITE_ENABLE_STAT3


875 
	#SQLITE_ENABLE_STAT3_OR_STAT4
 1

	)

876 #ñi‡
SQLITE_ENABLE_STAT3_OR_STAT4


877 #unde‡
SQLITE_ENABLE_STAT3_OR_STAT4


884 #i‡
	`deföed
(
SQLITE_DEBUG
Ë|| deföed(
SQLITE_ENABLE_SELECTTRACE
)

885 
	#SELECTTRACE_ENABLED
 1

	)

887 
	#SELECTTRACE_ENABLED
 0

	)

899 
BusyH™dÀr
 
	tBusyH™dÀr
;

900 
	sBusyH™dÀr
 {

901 (*
xFunc
)(*,);

902 *
pArg
;

903 
nBusy
;

911 
	#MASTER_NAME
 "sqlôe_ma°î"

	)

912 
	#TEMP_MASTER_NAME
 "sqlôe_ãmp_ma°î"

	)

917 
	#MASTER_ROOT
 1

	)

922 
	#SCHEMA_TABLE
(
x
Ë((!
OMIT_TEMPDB
)&&(x==1)?
TEMP_MASTER_NAME
:
MASTER_NAME
)

	)

928 
	#AºaySize
(
X
Ë(()((X)/(X[0])))

	)

933 
	#IsPowîOfTwo
(
X
Ë(((X)&((X)-1))==0)

	)

943 
	#SQLITE_DYNAMIC
 ((
sqlôe3_de°ru˘‹_ty≥
)
sqlôe3MÆlocSize
)

	)

959 #ifde‡
SQLITE_OMIT_WSD


960 
	#SQLITE_WSD
 c⁄°

	)

961 
	#GLOBAL
(
t
,
v
Ë(*—*)
	`sqlôe3_wsd_föd
((*)&(v), (v)))

	)

962 
	#sqlôe3GlobÆC⁄fig
 
	`GLOBAL
(
Sqlôe3C⁄fig
, 
sqlôe3C⁄fig
)

	)

963 
	`sqlôe3_wsd_öô
(
N
, 
J
);

964 *
	`sqlôe3_wsd_föd
(*
K
, 
L
);

966 
	#SQLITE_WSD


	)

967 
	#GLOBAL
(
t
,
v
Ë
	)
v

968 
	#sqlôe3GlobÆC⁄fig
 
sqlôe3C⁄fig


	)

987 
	#UNUSED_PARAMETER
(
x
Ë()(x)

	)

988 
	#UNUSED_PARAMETER2
(
x
,
y
Ë
	`UNUSED_PARAMETER
(x),UNUSED_PARAMETER(y)

	)

993 
AggInfo
 
	tAggInfo
;

994 
AuthC⁄ãxt
 
	tAuthC⁄ãxt
;

995 
AutoöcInfo
 
	tAutoöcInfo
;

996 
Bôvec
 
	tBôvec
;

997 
CﬁlSeq
 
	tCﬁlSeq
;

998 
Cﬁumn
 
	tCﬁumn
;

999 
Db
 
	tDb
;

1000 
Schema
 
	tSchema
;

1001 
Ex¥
 
	tEx¥
;

1002 
Ex¥Li°
 
	tEx¥Li°
;

1003 
Ex¥S∑n
 
	tEx¥S∑n
;

1004 
FKey
 
	tFKey
;

1005 
FuncDe°ru˘‹
 
	tFuncDe°ru˘‹
;

1006 
FuncDef
 
	tFuncDef
;

1007 
FuncDefHash
 
	tFuncDefHash
;

1008 
IdLi°
 
	tIdLi°
;

1009 
Index
 
	tIndex
;

1010 
IndexSam∂e
 
	tIndexSam∂e
;

1011 
KeyCœss
 
	tKeyCœss
;

1012 
KeyInfo
 
	tKeyInfo
;

1013 
Lookaside
 
	tLookaside
;

1014 
LookasideSlŸ
 
	tLookasideSlŸ
;

1015 
ModuÀ
 
	tModuÀ
;

1016 
NameC⁄ãxt
 
	tNameC⁄ãxt
;

1017 
P¨£
 
	tP¨£
;

1018 
PªUpd©e
 
	tPªUpd©e
;

1019 
PrötfArgumíts
 
	tPrötfArgumíts
;

1020 
RowSë
 
	tRowSë
;

1021 
Savïoöt
 
	tSavïoöt
;

1022 
Sñe˘
 
	tSñe˘
;

1023 
SQLôeThªad
 
	tSQLôeThªad
;

1024 
Sñe˘De°
 
	tSñe˘De°
;

1025 
SrcLi°
 
	tSrcLi°
;

1026 
SåAccum
 
	tSåAccum
;

1027 
TabÀ
 
	tTabÀ
;

1028 
TabÀLock
 
	tTabÀLock
;

1029 
Tokí
 
	tTokí
;

1030 
TªeVõw
 
	tTªeVõw
;

1031 
Triggî
 
	tTriggî
;

1032 
TriggîPrg
 
	tTriggîPrg
;

1033 
TriggîSãp
 
	tTriggîSãp
;

1034 
U≈ackedRec‹d
 
	tU≈ackedRec‹d
;

1035 
VTabÀ
 
	tVTabÀ
;

1036 
VèbCtx
 
	tVèbCtx
;

1037 
WÆkî
 
	tWÆkî
;

1038 
WhîeInfo
 
	tWhîeInfo
;

1039 
Wôh
 
	tWôh
;

1046 
	~"båì.h
"

1047 
	~"vdbe.h
"

1048 
	~"∑gî.h
"

1049 
	~"pˇche.h
"

1050 
	~"os.h
"

1051 
	~"muãx.h
"

1056 #ifde‡
SQLITE_EXTRA_DURABLE


1057 #w¨nög 
U£
 
SQLITE_DEFAULT_SYNCHRONOUS
=3 
ö°ód
 
of
 
SQLITE_EXTRA_DURABLE


1058 
	#SQLITE_DEFAULT_SYNCHRONOUS
 3

	)

1077 #i‚de‡
SQLITE_DEFAULT_SYNCHRONOUS


1078 
	#SQLITE_DEFAULT_SYNCHRONOUS
 (
PAGER_SYNCHRONOUS_FULL
-1)

	)

1080 #i‚de‡
SQLITE_DEFAULT_WAL_SYNCHRONOUS


1081 
	#SQLITE_DEFAULT_WAL_SYNCHRONOUS
 
SQLITE_DEFAULT_SYNCHRONOUS


	)

1091 
	sDb
 {

1092 *
zName
;

1093 
Båì
 *
pBt
;

1094 
u8
 
ß„ty_Àvñ
;

1095 
u8
 
bSyncSë
;

1096 
Schema
 *
pSchema
;

1116 
	sSchema
 {

1117 
schema_cookõ
;

1118 
iGíî©i⁄
;

1119 
Hash
 
tblHash
;

1120 
Hash
 
idxHash
;

1121 
Hash
 
åigHash
;

1122 
Hash
 
fkeyHash
;

1123 
TabÀ
 *
pSeqTab
;

1124 
u8
 
fûe_f‹m©
;

1125 
u8
 
íc
;

1126 
u16
 
schemaFœgs
;

1127 
ˇche_size
;

1134 
	#DbHasPr›îty
(
D
,
I
,
P
Ë(((D)->
aDb
[I].
pSchema
->
schemaFœgs
&(P))==(P))

	)

1135 
	#DbHasAnyPr›îty
(
D
,
I
,
P
Ë(((D)->
aDb
[I].
pSchema
->
schemaFœgs
&(P))!=0)

	)

1136 
	#DbSëPr›îty
(
D
,
I
,
P
Ë(D)->
aDb
[I].
pSchema
->
schemaFœgs
|=(P)

	)

1137 
	#DbCÀ¨Pr›îty
(
D
,
I
,
P
Ë(D)->
aDb
[I].
pSchema
->
schemaFœgs
&=~(P)

	)

1149 
	#DB_SchemaLﬂded
 0x0001

	)

1150 
	#DB_Uƒe£tVõws
 0x0002

	)

1151 
	#DB_Em±y
 0x0004

	)

1157 
	#SQLITE_N_LIMIT
 (
SQLITE_LIMIT_WORKER_THREADS
+1)

	)

1179 
	sLookaside
 {

1180 
u32
 
bDißbÀ
;

1181 
u16
 
sz
;

1182 
u8
 
bMÆlo˚d
;

1183 
nOut
;

1184 
mxOut
;

1185 
™Sèt
[3];

1186 
LookasideSlŸ
 *
pFªe
;

1187 *
pSèπ
;

1188 *
pEnd
;

1190 
	sLookasideSlŸ
 {

1191 
LookasideSlŸ
 *
pNext
;

1201 
	#SQLITE_FUNC_HASH_SZ
 23

	)

1202 
	sFuncDefHash
 {

1203 
FuncDef
 *
a
[
SQLITE_FUNC_HASH_SZ
];

1206 #ifde‡
SQLITE_USER_AUTHENTICATION


1211 
sqlôe3_u£øuth
 
	tsqlôe3_u£øuth
;

1212 
	ssqlôe3_u£øuth
 {

1213 
u8
 
authLevñ
;

1214 
nAuthPW
;

1215 *
zAuthPW
;

1216 *
zAuthU£r
;

1220 
	#UAUTH_Unknown
 0

	)

1221 
	#UAUTH_Faû
 1

	)

1222 
	#UAUTH_U£r
 2

	)

1223 
	#UAUTH_Admö
 3

	)

1226 
	`sqlôe3U£rAuthTabÀ
(const *);

1227 
	`sqlôe3U£rAuthCheckLogö
(
sqlôe3
*,c⁄° *,
u8
*);

1228 
	`sqlôe3U£rAuthInô
(
sqlôe3
*);

1229 
	`sqlôe3Cry±Func
(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**);

1236 #ifde‡
SQLITE_USER_AUTHENTICATION


1237 (*
	tsqlôe3_xauth
)(*,,const *,const *,const *,

1240 (*
	tsqlôe3_xauth
)(*,,const *,const *,const *,

1248 
	ssqlôe3
 {

1249 
sqlôe3_vfs
 *
pVfs
;

1250 
Vdbe
 *
pVdbe
;

1251 
CﬁlSeq
 *
pDÊtCﬁl
;

1252 
sqlôe3_muãx
 *
muãx
;

1253 
Db
 *
aDb
;

1254 
nDb
;

1255 
Êags
;

1256 
i64
 
œ°Rowid
;

1257 
i64
 
szMm≠
;

1258 
›íFœgs
;

1259 
îrCode
;

1260 
îrMask
;

1261 
iSysEºno
;

1262 
u16
 
dbO±Fœgs
;

1263 
u8
 
íc
;

1264 
u8
 
autoCommô
;

1265 
u8
 
ãmp_°‹e
;

1266 
u8
 
mÆlocFaûed
;

1267 
u8
 
bBíignMÆloc
;

1268 
u8
 
dÊtLockMode
;

1269 sig√d 
√xtAutovac
;

1270 
u8
 
suµªssEº
;

1271 
u8
 
vèbOnC⁄Êi˘
;

1272 
u8
 
isTønß˘i⁄Savïoöt
;

1273 
√xtPagesize
;

1274 
u32
 
magic
;

1275 
nCh™ge
;

1276 
nTŸÆCh™ge
;

1277 
aLimô
[
SQLITE_N_LIMIT
];

1278 
nMaxS‹ãrMm≠
;

1279 
	ssqlôe3InôInfo
 {

1280 
√wTnum
;

1281 
u8
 
iDb
;

1282 
u8
 
busy
;

1283 
u8
 
‹ph™Triggî
;

1284 
u8
 
impo°îTabÀ
;

1285 } 
öô
;

1286 
nVdbeA˘ive
;

1287 
nVdbeRód
;

1288 
nVdbeWrôe
;

1289 
nVdbeExec
;

1290 
nVDe°roy
;

1291 
nExãnsi⁄
;

1292 **
aExãnsi⁄
;

1293 (*
xTø˚
)(*,const *);

1294 *
pTø˚Arg
;

1295 (*
xProfûe
)(*,c⁄° *,
u64
);

1296 *
pProfûeArg
;

1297 *
pCommôArg
;

1298 (*
xCommôCÆlback
)(*);

1299 *
pRﬁlbackArg
;

1300 (*
xRﬁlbackCÆlback
)(*);

1301 *
pUpd©eArg
;

1302 (*
xUpd©eCÆlback
)(*,, c⁄° *,c⁄° *,
sqlôe_öt64
);

1303 #ifde‡
SQLITE_ENABLE_PREUPDATE_HOOK


1304 *
pPªUpd©eArg
;

1305 (*
xPªUpd©eCÆlback
)(

1306 *,
sqlôe3
*,,c⁄°*,c⁄°*,
sqlôe3_öt64
,sqlite3_int64

1308 
PªUpd©e
 *
pPªUpd©e
;

1310 #i‚de‡
SQLITE_OMIT_WAL


1311 (*
xWÆCÆlback
)(*, 
sqlôe3
 *, const *, );

1312 *
pWÆArg
;

1314 (*
xCﬁlNìded
)(*,
sqlôe3
*,
eTextRï
,const *);

1315 (*
xCﬁlNìded16
)(*,
sqlôe3
*,
eTextRï
,const *);

1316 *
pCﬁlNìdedArg
;

1317 
sqlôe3_vÆue
 *
pEº
;

1319 vﬁ©ûê
isI¡îru±ed
;

1320 
nŸU£d1
;

1321 } 
u1
;

1322 
Lookaside
 
lookaside
;

1323 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


1324 
sqlôe3_xauth
 
xAuth
;

1325 *
pAuthArg
;

1327 #i‚de‡
SQLITE_OMIT_PROGRESS_CALLBACK


1328 (*
xProgªss
)(*);

1329 *
pProgªssArg
;

1330 
nProgªssOps
;

1332 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


1333 
nVTøns
;

1334 
Hash
 
aModuÀ
;

1335 
VèbCtx
 *
pVèbCtx
;

1336 
VTabÀ
 **
aVTøns
;

1337 
VTabÀ
 *
pDisc⁄√˘
;

1339 
Hash
 
aFunc
;

1340 
Hash
 
aCﬁlSeq
;

1341 
BusyH™dÀr
 
busyH™dÀr
;

1342 
Db
 
aDbSètic
[2];

1343 
Savïoöt
 *
pSavïoöt
;

1344 
busyTimeout
;

1345 
nSavïoöt
;

1346 
nSèãmít
;

1347 
i64
 
nDe„ºedC⁄s
;

1348 
i64
 
nDe„ºedImmC⁄s
;

1349 *
≤ByãsFªed
;

1350 #ifde‡
SQLITE_ENABLE_UNLOCK_NOTIFY


1361 
sqlôe3
 *
pBlockögC⁄√˘i⁄
;

1362 
sqlôe3
 *
pU∆ockC⁄√˘i⁄
;

1363 *
pU∆ockArg
;

1364 (*
xU∆ockNŸify
)(**, );

1365 
sqlôe3
 *
pNextBlocked
;

1367 #ifde‡
SQLITE_USER_AUTHENTICATION


1368 
sqlôe3_u£øuth
 
auth
;

1375 
	#SCHEMA_ENC
(
db
Ë((db)->
aDb
[0].
pSchema
->
íc
)

	)

1376 
	#ENC
(
db
Ë((db)->
íc
)

	)

1386 
	#SQLITE_VdbeTø˚
 0x00000001

	)

1387 
	#SQLITE_I¡înCh™ges
 0x00000002

	)

1388 
	#SQLITE_FuŒCﬁNames
 0x00000004

	)

1389 
	#SQLITE_FuŒFSync
 0x00000008

	)

1390 
	#SQLITE_Ck±FuŒFSync
 0x00000010

	)

1391 
	#SQLITE_CacheSpûl
 0x00000020

	)

1392 
	#SQLITE_Sh‹tCﬁNames
 0x00000040

	)

1393 
	#SQLITE_Cou¡Rows
 0x00000080

	)

1396 
	#SQLITE_NuŒCÆlback
 0x00000100

	)

1398 
	#SQLITE_SqlTø˚
 0x00000200

	)

1399 
	#SQLITE_VdbeLi°ög
 0x00000400

	)

1400 
	#SQLITE_WrôeSchema
 0x00000800

	)

1401 
	#SQLITE_VdbeAdd›Tø˚
 0x00001000

	)

1402 
	#SQLITE_Ign‹eChecks
 0x00002000

	)

1403 
	#SQLITE_RódUncommôãd
 0x0004000

	)

1404 
	#SQLITE_LegacyFûeFmt
 0x00008000

	)

1405 
	#SQLITE_RecovîyMode
 0x00010000

	)

1406 
	#SQLITE_Revî£Ordî
 0x00020000

	)

1407 
	#SQLITE_RecTriggîs
 0x00040000

	)

1408 
	#SQLITE_F‹eignKeys
 0x00080000

	)

1409 
	#SQLITE_AutoIndex
 0x00100000

	)

1410 
	#SQLITE_Pª„rBuûtö
 0x00200000

	)

1411 
	#SQLITE_LﬂdExãnsi⁄
 0x00400000

	)

1412 
	#SQLITE_LﬂdExtFunc
 0x00800000

	)

1413 
	#SQLITE_E«bÀTriggî
 0x01000000

	)

1414 
	#SQLITE_De„rFKs
 0x02000000

	)

1415 
	#SQLITE_QuîyO∆y
 0x04000000

	)

1416 
	#SQLITE_VdbeEQP
 0x08000000

	)

1417 
	#SQLITE_Vacuum
 0x10000000

	)

1418 
	#SQLITE_CñlSizeCk
 0x20000000

	)

1419 
	#SQLITE_Fts3Tokíizî
 0x40000000

	)

1427 
	#SQLITE_QuîyFœâíî
 0x0001

	)

1428 
	#SQLITE_CﬁumnCache
 0x0002

	)

1429 
	#SQLITE_GroupByOrdî
 0x0004

	)

1430 
	#SQLITE_Fa˘‹OutC⁄°
 0x0008

	)

1432 
	#SQLITE_Di°ö˘O±
 0x0020

	)

1433 
	#SQLITE_CovîIdxSˇn
 0x0040

	)

1434 
	#SQLITE_OrdîByIdxJoö
 0x0080

	)

1435 
	#SQLITE_SubqC‹outöe
 0x0100

	)

1436 
	#SQLITE_Tønsôive
 0x0200

	)

1437 
	#SQLITE_OmôNo›Joö
 0x0400

	)

1438 
	#SQLITE_Sèt34
 0x0800

	)

1439 
	#SQLITE_Curs‹Höts
 0x2000

	)

1440 
	#SQLITE_AŒO±s
 0xfff‡

	)

1445 #i‚de‡
SQLITE_OMIT_BUILTIN_TEST


1446 
	#O±imiz©i⁄DißbÀd
(
db
, 
mask
Ë(((db)->
dbO±Fœgs
&(mask))!=0)

	)

1447 
	#O±imiz©i⁄E«bÀd
(
db
, 
mask
Ë(((db)->
dbO±Fœgs
&(mask))==0)

	)

1449 
	#O±imiz©i⁄DißbÀd
(
db
, 
mask
Ë0

	)

1450 
	#O±imiz©i⁄E«bÀd
(
db
, 
mask
Ë1

	)

1457 
	#C⁄°Fa˘‹Ok
(
P
Ë((P)->
okC⁄°Fa˘‹
)

	)

1464 
	#SQLITE_MAGIC_OPEN
 0xa029a697

	)

1465 
	#SQLITE_MAGIC_CLOSED
 0x9f3c2d33

	)

1466 
	#SQLITE_MAGIC_SICK
 0x4b771290

	)

1467 
	#SQLITE_MAGIC_BUSY
 0xf03b7906

	)

1468 
	#SQLITE_MAGIC_ERROR
 0xb5357930

	)

1469 
	#SQLITE_MAGIC_ZOMBIE
 0x64cffc7‡

	)

1481 
	sFuncDef
 {

1482 
i8
 
nArg
;

1483 
u16
 
funcFœgs
;

1484 *
pU£rD©a
;

1485 
FuncDef
 *
pNext
;

1486 (*
xSFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**);

1487 (*
xFöÆize
)(
sqlôe3_c⁄ãxt
*);

1488 c⁄° *
zName
;

1490 
FuncDef
 *
pHash
;

1491 
FuncDe°ru˘‹
 *
pDe°ru˘‹
;

1492 } 
u
;

1509 
	sFuncDe°ru˘‹
 {

1510 
nRef
;

1511 (*
xDe°roy
)(*);

1512 *
pU£rD©a
;

1528 
	#SQLITE_FUNC_ENCMASK
 0x0003

	)

1529 
	#SQLITE_FUNC_LIKE
 0x0004

	)

1530 
	#SQLITE_FUNC_CASE
 0x0008

	)

1531 
	#SQLITE_FUNC_EPHEM
 0x0010

	)

1532 
	#SQLITE_FUNC_NEEDCOLL
 0x0020

	)

1533 
	#SQLITE_FUNC_LENGTH
 0x0040

	)

1534 
	#SQLITE_FUNC_TYPEOF
 0x0080

	)

1535 
	#SQLITE_FUNC_COUNT
 0x0100

	)

1536 
	#SQLITE_FUNC_COALESCE
 0x0200

	)

1537 
	#SQLITE_FUNC_UNLIKELY
 0x0400

	)

1538 
	#SQLITE_FUNC_CONSTANT
 0x0800

	)

1539 
	#SQLITE_FUNC_MINMAX
 0x1000

	)

1540 
	#SQLITE_FUNC_SLOCHNG
 0x2000

	)

1577 
	#FUNCTION
(
zName
, 
nArg
, 
iArg
, 
bNC
, 
xFunc
) \

1578 {
nArg
, 
SQLITE_FUNC_CONSTANT
|
SQLITE_UTF8
|(
bNC
*
SQLITE_FUNC_NEEDCOLL
), \

1579 
	`SQLITE_INT_TO_PTR
(
iArg
), 0, 
xFunc
, 0, #zName, {0} 
	}

	)
}

1580 
	#VFUNCTION
(
zName
, 
nArg
, 
iArg
, 
bNC
, 
xFunc
) \

1581 {
nArg
, 
SQLITE_UTF8
|(
bNC
*
SQLITE_FUNC_NEEDCOLL
), \

1582 
	`SQLITE_INT_TO_PTR
(
iArg
), 0, 
xFunc
, 0, #zName, {0} }

	)

1583 
	#DFUNCTION
(
zName
, 
nArg
, 
iArg
, 
bNC
, 
xFunc
) \

1584 {
nArg
, 
SQLITE_FUNC_SLOCHNG
|
SQLITE_UTF8
|(
bNC
*
SQLITE_FUNC_NEEDCOLL
), \

1585 
	`SQLITE_INT_TO_PTR
(
iArg
), 0, 
xFunc
, 0, #zName, {0} }

	)

1586 
	#FUNCTION2
(
zName
, 
nArg
, 
iArg
, 
bNC
, 
xFunc
, 
exåaFœgs
) \

1587 {
nArg
,
SQLITE_FUNC_CONSTANT
|
SQLITE_UTF8
|(
bNC
*
SQLITE_FUNC_NEEDCOLL
)|
exåaFœgs
,\

1588 
	`SQLITE_INT_TO_PTR
(
iArg
), 0, 
xFunc
, 0, #zName, {0} }

	)

1589 
	#STR_FUNCTION
(
zName
, 
nArg
, 
pArg
, 
bNC
, 
xFunc
) \

1590 {
nArg
, 
SQLITE_FUNC_SLOCHNG
|
SQLITE_UTF8
|(
bNC
*
SQLITE_FUNC_NEEDCOLL
), \

1591 
pArg
, 0, 
xFunc
, 0, #zName, }

	)

1592 
	#LIKEFUNC
(
zName
, 
nArg
, 
¨g
, 
Êags
) \

1593 {
nArg
, 
SQLITE_FUNC_CONSTANT
|
SQLITE_UTF8
|
Êags
, \

1594 (*)
¨g
, 0, 
likeFunc
, 0, #zName, {0} }

	)

1595 
	#AGGREGATE
(
zName
, 
nArg
, 
¨g
, 
nc
, 
xSãp
, 
xFöÆ
) \

1596 {
nArg
, 
SQLITE_UTF8
|(
nc
*
SQLITE_FUNC_NEEDCOLL
), \

1597 
	`SQLITE_INT_TO_PTR
(
¨g
), 0, 
xSãp
,
xFöÆ
,#zName, {0}}

	)

1598 
	#AGGREGATE2
(
zName
, 
nArg
, 
¨g
, 
nc
, 
xSãp
, 
xFöÆ
, 
exåaFœgs
) \

1599 {
nArg
, 
SQLITE_UTF8
|(
nc
*
SQLITE_FUNC_NEEDCOLL
)|
exåaFœgs
, \

1600 
	`SQLITE_INT_TO_PTR
(
¨g
), 0, 
xSãp
,
xFöÆ
,#zName, {0}}

	)

1608 
	sSavïoöt
 {

1609 *
	mzName
;

1610 
i64
 
	mnDe„ºedC⁄s
;

1611 
i64
 
	mnDe„ºedImmC⁄s
;

1612 
Savïoöt
 *
	mpNext
;

1619 
	#SAVEPOINT_BEGIN
 0

	)

1620 
	#SAVEPOINT_RELEASE
 1

	)

1621 
	#SAVEPOINT_ROLLBACK
 2

	)

1629 
	sModuÀ
 {

1630 c⁄° 
sqlôe3_moduÀ
 *
	mpModuÀ
;

1631 c⁄° *
	mzName
;

1632 *
	mpAux
;

1633 (*
	mxDe°roy
)(*);

1634 
TabÀ
 *
	mpEpoTab
;

1641 
	sCﬁumn
 {

1642 *
	mzName
;

1643 
Ex¥
 *
	mpDÊt
;

1644 *
	mzCﬁl
;

1645 
u8
 
	mnŸNuŒ
;

1646 
	mafföôy
;

1647 
u8
 
	mszE°
;

1648 
u8
 
	mcﬁFœgs
;

1653 
	#COLFLAG_PRIMKEY
 0x0001

	)

1654 
	#COLFLAG_HIDDEN
 0x0002

	)

1655 
	#COLFLAG_HASTYPE
 0x0004

	)

1666 
	sCﬁlSeq
 {

1667 *
	mzName
;

1668 
u8
 
	míc
;

1669 *
	mpU£r
;

1670 (*
	mxCmp
)(*,, const *, , const *);

1671 (*
	mxDñ
)(*);

1677 
	#SQLITE_SO_ASC
 0

	)

1678 
	#SQLITE_SO_DESC
 1

	)

1679 
	#SQLITE_SO_UNDEFINED
 -1

	)

1695 
	#SQLITE_AFF_BLOB
 'A'

	)

1696 
	#SQLITE_AFF_TEXT
 'B'

	)

1697 
	#SQLITE_AFF_NUMERIC
 'C'

	)

1698 
	#SQLITE_AFF_INTEGER
 'D'

	)

1699 
	#SQLITE_AFF_REAL
 'E'

	)

1701 
	#sqlôe3IsNumîicAfföôy
(
X
Ë((X)>=
SQLITE_AFF_NUMERIC
)

	)

1707 
	#SQLITE_AFF_MASK
 0x47

	)

1718 
	#SQLITE_JUMPIFNULL
 0x10

	)

1719 
	#SQLITE_STOREP2
 0x20

	)

1720 
	#SQLITE_NULLEQ
 0x80

	)

1721 
	#SQLITE_NOTNULL
 0x90

	)

1765 
	sVTabÀ
 {

1766 
sqlôe3
 *
	mdb
;

1767 
ModuÀ
 *
	mpMod
;

1768 
sqlôe3_vèb
 *
	mpVèb
;

1769 
	mnRef
;

1770 
u8
 
	mbC⁄°øöt
;

1771 
	miSavïoöt
;

1772 
VTabÀ
 *
	mpNext
;

1779 
	sTabÀ
 {

1780 *
	mzName
;

1781 
Cﬁumn
 *
	maCﬁ
;

1782 
Index
 *
	mpIndex
;

1783 
Sñe˘
 *
	mpSñe˘
;

1784 
FKey
 *
	mpFKey
;

1785 *
	mzCﬁAff
;

1786 
Ex¥Li°
 *
	mpCheck
;

1788 
	mäum
;

1789 
i16
 
	miPKey
;

1790 
i16
 
	mnCﬁ
;

1791 
u16
 
	mnRef
;

1792 
LogE°
 
	mnRowLogE°
;

1793 
LogE°
 
	mszTabRow
;

1794 #ifde‡
SQLITE_ENABLE_COSTMULT


1795 
LogE°
 
	mco°Mu…
;

1797 
u8
 
	mèbFœgs
;

1798 
u8
 
	mkeyC⁄f
;

1799 #i‚de‡
SQLITE_OMIT_ALTERTABLE


1800 
	maddCﬁOff£t
;

1802 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


1803 
	mnModuÀArg
;

1804 **
	mazModuÀArg
;

1805 
VTabÀ
 *
	mpVTabÀ
;

1807 
Triggî
 *
	mpTriggî
;

1808 
Schema
 *
	mpSchema
;

1809 
TabÀ
 *
	mpNextZombõ
;

1821 
	#TF_Ród⁄ly
 0x01

	)

1822 
	#TF_EphemîÆ
 0x02

	)

1823 
	#TF_HasPrim¨yKey
 0x04

	)

1824 
	#TF_Autoö¸emít
 0x08

	)

1825 
	#TF_VútuÆ
 0x10

	)

1826 
	#TF_WôhoutRowid
 0x20

	)

1827 
	#TF_NoVisibÀRowid
 0x40

	)

1828 
	#TF_OOOHiddí
 0x80

	)

1836 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


1837 
	#IsVútuÆ
(
X
Ë(((X)->
èbFœgs
 & 
TF_VútuÆ
)!=0)

	)

1839 
	#IsVútuÆ
(
X
Ë0

	)

1848 #i‡
deföed
(
SQLITE_ENABLE_HIDDEN_COLUMNS
)

1849 
	#IsHiddíCﬁumn
(
X
Ë(((X)->
cﬁFœgs
 & 
COLFLAG_HIDDEN
)!=0)

	)

1850 
	#IsOrdö¨yHiddíCﬁumn
(
X
Ë(((X)->
cﬁFœgs
 & 
COLFLAG_HIDDEN
)!=0)

	)

1851 #ñi‡!
deföed
(
SQLITE_OMIT_VIRTUALTABLE
)

1852 
	#IsHiddíCﬁumn
(
X
Ë(((X)->
cﬁFœgs
 & 
COLFLAG_HIDDEN
)!=0)

	)

1853 
	#IsOrdö¨yHiddíCﬁumn
(
X
Ë0

	)

1855 
	#IsHiddíCﬁumn
(
X
Ë0

	)

1856 
	#IsOrdö¨yHiddíCﬁumn
(
X
Ë0

	)

1861 
	#HasRowid
(
X
Ë(((X)->
èbFœgs
 & 
TF_WôhoutRowid
)==0)

	)

1862 
	#VisibÀRowid
(
X
Ë(((X)->
èbFœgs
 & 
TF_NoVisibÀRowid
)==0)

	)

1892 
	sFKey
 {

1893 
TabÀ
 *
	mpFrom
;

1894 
FKey
 *
	mpNextFrom
;

1895 *
	mzTo
;

1896 
FKey
 *
	mpNextTo
;

1897 
FKey
 *
	mpPªvTo
;

1898 
	mnCﬁ
;

1900 
u8
 
	misDe„ºed
;

1901 
u8
 
	maA˘i⁄
[2];

1902 
Triggî
 *
	m≠Triggî
[2];

1903 
	ssCﬁM≠
 {

1904 
	miFrom
;

1905 *
	mzCﬁ
;

1906 } 
	maCﬁ
[1];

1934 
	#OE_N⁄e
 0

	)

1935 
	#OE_Rﬁlback
 1

	)

1936 
	#OE_Ab‹t
 2

	)

1937 
	#OE_Faû
 3

	)

1938 
	#OE_Ign‹e
 4

	)

1939 
	#OE_Rïœ˚
 5

	)

1941 
	#OE_Re°ri˘
 6

	)

1942 
	#OE_SëNuŒ
 7

	)

1943 
	#OE_SëDÊt
 8

	)

1944 
	#OE_Casˇde
 9

	)

1946 
	#OE_DeÁu…
 10

	)

1958 
	sKeyInfo
 {

1959 
u32
 
	mnRef
;

1960 
u8
 
	míc
;

1961 
u16
 
	mnFõld
;

1962 
u16
 
	mnXFõld
;

1963 
sqlôe3
 *
	mdb
;

1964 
u8
 *
	maS‹tOrdî
;

1965 
CﬁlSeq
 *
	maCﬁl
[1];

2003 
	sU≈ackedRec‹d
 {

2004 
KeyInfo
 *
	mpKeyInfo
;

2005 
Mem
 *
	maMem
;

2006 
u16
 
	mnFõld
;

2007 
i8
 
	mdeÁu…_rc
;

2008 
u8
 
	mîrCode
;

2009 
i8
 
	mr1
;

2010 
i8
 
	mr2
;

2011 
u8
 
	meqSìn
;

2049 
	sIndex
 {

2050 *
	mzName
;

2051 
i16
 *
	maiCﬁumn
;

2052 
LogE°
 *
	maiRowLogE°
;

2053 
TabÀ
 *
	mpTabÀ
;

2054 *
	mzCﬁAff
;

2055 
Index
 *
	mpNext
;

2056 
Schema
 *
	mpSchema
;

2057 
u8
 *
	maS‹tOrdî
;

2058 c⁄° **
	mazCﬁl
;

2059 
Ex¥
 *
	mpP¨tIdxWhîe
;

2060 
Ex¥Li°
 *
	maCﬁEx¥
;

2061 
	mäum
;

2062 
LogE°
 
	mszIdxRow
;

2063 
u16
 
	mnKeyCﬁ
;

2064 
u16
 
	mnCﬁumn
;

2065 
u8
 
	m⁄Eº‹
;

2066 
	midxTy≥
:2;

2067 
	mbUn‹dîed
:1;

2068 
	muniqNŸNuŒ
:1;

2069 
	misResized
:1;

2070 
	misCovîög
:1;

2071 
	mnoSkùSˇn
:1;

2072 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


2073 
	mnSam∂e
;

2074 
	mnSam∂eCﬁ
;

2075 
tRow˙t
 *
	maAvgEq
;

2076 
IndexSam∂e
 *
	maSam∂e
;

2077 
tRow˙t
 *
	maiRowE°
;

2078 
tRow˙t
 
	mnRowE°0
;

2085 
	#SQLITE_IDXTYPE_APPDEF
 0

	)

2086 
	#SQLITE_IDXTYPE_UNIQUE
 1

	)

2087 
	#SQLITE_IDXTYPE_PRIMARYKEY
 2

	)

2090 
	#IsPrim¨yKeyIndex
(
X
Ë((X)->
idxTy≥
==
SQLITE_IDXTYPE_PRIMARYKEY
)

	)

2093 
	#IsUniqueIndex
(
X
Ë((X)->
⁄Eº‹
!=
OE_N⁄e
)

	)

2098 
	#XN_ROWID
 (-1Ë

	)

2099 
	#XN_EXPR
 (-2Ë

	)

2106 
	sIndexSam∂e
 {

2107 *
	mp
;

2108 
	mn
;

2109 
tRow˙t
 *
	m™Eq
;

2110 
tRow˙t
 *
	m™Lt
;

2111 
tRow˙t
 *
	m™DLt
;

2122 
	sTokí
 {

2123 c⁄° *
	mz
;

2124 
	mn
;

2140 
	sAggInfo
 {

2141 
u8
 
	mdúe˘Mode
;

2143 
u8
 
	mu£S‹tögIdx
;

2145 
	ms‹tögIdx
;

2146 
	ms‹tögIdxPTab
;

2147 
	mnS‹tögCﬁumn
;

2148 
	mmnReg
, 
	mmxReg
;

2149 
Ex¥Li°
 *
	mpGroupBy
;

2150 
	sAggInfo_cﬁ
 {

2151 
TabÀ
 *
	mpTab
;

2152 
	miTabÀ
;

2153 
	miCﬁumn
;

2154 
	miS‹ãrCﬁumn
;

2155 
	miMem
;

2156 
Ex¥
 *
	mpEx¥
;

2157 } *
	maCﬁ
;

2158 
	mnCﬁumn
;

2159 
	mnAccumuœt‹
;

2162 
	sAggInfo_func
 {

2163 
Ex¥
 *
	mpEx¥
;

2164 
FuncDef
 *
	mpFunc
;

2165 
	miMem
;

2166 
	miDi°ö˘
;

2167 } *
	maFunc
;

2168 
	mnFunc
;

2181 #i‡
SQLITE_MAX_VARIABLE_NUMBER
<=32767

2182 
i16
 
	tynV¨
;

2184 
	tynV¨
;

2250 
	sEx¥
 {

2251 
u8
 
	m›
;

2252 
	mafföôy
;

2253 
u32
 
	mÊags
;

2255 *
	mzTokí
;

2256 
	miVÆue
;

2257 } 
	mu
;

2264 
Ex¥
 *
	mpLe·
;

2265 
Ex¥
 *
	mpRight
;

2267 
Ex¥Li°
 *
	mpLi°
;

2268 
Sñe˘
 *
	mpSñe˘
;

2269 } 
	mx
;

2276 #i‡
SQLITE_MAX_EXPR_DEPTH
>0

2277 
	mnHeight
;

2279 
	miTabÀ
;

2283 
ynV¨
 
	miCﬁumn
;

2285 
i16
 
	miAgg
;

2286 
i16
 
	miRightJoöTabÀ
;

2287 
u8
 
	m›2
;

2290 
AggInfo
 *
	mpAggInfo
;

2291 
TabÀ
 *
	mpTab
;

2297 
	#EP_FromJoö
 0x000001

	)

2298 
	#EP_Agg
 0x000002

	)

2299 
	#EP_Resﬁved
 0x000004

	)

2300 
	#EP_Eº‹
 0x000008

	)

2301 
	#EP_Di°ö˘
 0x000010

	)

2302 
	#EP_V¨Sñe˘
 0x000020

	)

2303 
	#EP_DblQuŸed
 0x000040

	)

2304 
	#EP_InfixFunc
 0x000080

	)

2305 
	#EP_Cﬁœã
 0x000100

	)

2306 
	#EP_Gíîic
 0x000200

	)

2307 
	#EP_I¡VÆue
 0x000400

	)

2308 
	#EP_xIsSñe˘
 0x000800

	)

2309 
	#EP_Skù
 0x001000

	)

2310 
	#EP_Redu˚d
 0x002000

	)

2311 
	#EP_TokíO∆y
 0x004000

	)

2312 
	#EP_Sètic
 0x008000

	)

2313 
	#EP_MemTokí
 0x010000

	)

2314 
	#EP_NoRedu˚
 0x020000

	)

2315 
	#EP_U∆ikñy
 0x040000

	)

2316 
	#EP_C⁄°Func
 0x080000

	)

2317 
	#EP_C™BeNuŒ
 0x100000

	)

2318 
	#EP_Subquîy
 0x200000

	)

2319 
	#EP_Alüs
 0x400000

	)

2324 
	#EP_Pr›ag©e
 (
EP_Cﬁœã
|
EP_Subquîy
Ë

	)

2330 
	#Ex¥HasPr›îty
(
E
,
P
Ë(((E)->
Êags
&(P))!=0)

	)

2331 
	#Ex¥HasAŒPr›îty
(
E
,
P
Ë(((E)->
Êags
&(P))==(P))

	)

2332 
	#Ex¥SëPr›îty
(
E
,
P
Ë(E)->
Êags
|=(P)

	)

2333 
	#Ex¥CÀ¨Pr›îty
(
E
,
P
Ë(E)->
Êags
&=~(P)

	)

2339 #ifde‡
SQLITE_DEBUG


2340 
	#Ex¥SëVVAPr›îty
(
E
,
P
Ë(E)->
Êags
|=(P)

	)

2342 
	#Ex¥SëVVAPr›îty
(
E
,
P
)

	)

2350 
	#EXPR_FULLSIZE
 (
Ex¥
Ë

	)

2351 
	#EXPR_REDUCEDSIZE
 
	`off£tof
(
Ex¥
,
iTabÀ
Ë

	)

2352 
	#EXPR_TOKENONLYSIZE
 
	`off£tof
(
Ex¥
,
pLe·
Ë

	)

2358 
	#EXPRDUP_REDUCE
 0x0001

	)

2376 
	sEx¥Li°
 {

2377 
	mnEx¥
;

2378 
	sEx¥Li°_ôem
 {

2379 
Ex¥
 *
	mpEx¥
;

2380 *
	mzName
;

2381 *
	mzS∑n
;

2382 
u8
 
	ms‹tOrdî
;

2383 
	md⁄e
 :1;

2384 
	mbS∑nIsTab
 :1;

2385 
	mªußbÀ
 :1;

2388 
u16
 
	miOrdîByCﬁ
;

2389 
u16
 
	miAlüs
;

2390 } 
	mx
;

2391 
	miC⁄°Ex¥Reg
;

2392 } 
	mu
;

2393 } *
	ma
;

2401 
	sEx¥S∑n
 {

2402 
Ex¥
 *
	mpEx¥
;

2403 c⁄° *
	mzSèπ
;

2404 c⁄° *
	mzEnd
;

2422 
	sIdLi°
 {

2423 
	sIdLi°_ôem
 {

2424 *
	mzName
;

2425 
	midx
;

2426 } *
	ma
;

2427 
	mnId
;

2437 #ifde‡
SQLITE_BITMASK_TYPE


2438 
SQLITE_BITMASK_TYPE
 
	tBômask
;

2440 
u64
 
	tBômask
;

2446 
	#BMS
 (()((
Bômask
)*8))

	)

2451 
	#MASKBIT
(
n
Ë(((
Bômask
)1)<<“))

	)

2452 
	#MASKBIT32
(
n
Ë((()1)<<“))

	)

2453 
	#ALLBITS
 ((
Bômask
)-1)

	)

2474 
	sSrcLi°
 {

2475 
	mnSrc
;

2476 
u32
 
	mnAŒoc
;

2477 
	sSrcLi°_ôem
 {

2478 
Schema
 *
	mpSchema
;

2479 *
	mzD©aba£
;

2480 *
	mzName
;

2481 *
	mzAlüs
;

2482 
TabÀ
 *
	mpTab
;

2483 
Sñe˘
 *
	mpSñe˘
;

2484 
	maddrFûlSub
;

2485 
	mªgRëu∫
;

2486 
	mªgResu…
;

2488 
u8
 
	mjoöty≥
;

2489 
	mnŸIndexed
 :1;

2490 
	misIndexedBy
 :1;

2491 
	misTabFunc
 :1;

2492 
	misC‹ªœãd
 :1;

2493 
	mvüC‹outöe
 :1;

2494 
	misRecursive
 :1;

2495 } 
	mfg
;

2496 #i‚de‡
SQLITE_OMIT_EXPLAIN


2497 
u8
 
	miSñe˘Id
;

2499 
	miCurs‹
;

2500 
Ex¥
 *
	mpOn
;

2501 
IdLi°
 *
	mpUsög
;

2502 
Bômask
 
	mcﬁU£d
;

2504 *
	mzIndexedBy
;

2505 
Ex¥Li°
 *
	mpFuncArg
;

2506 } 
	mu1
;

2507 
Index
 *
	mpIBIndex
;

2508 } 
	ma
[1];

2514 
	#JT_INNER
 0x0001

	)

2515 
	#JT_CROSS
 0x0002

	)

2516 
	#JT_NATURAL
 0x0004

	)

2517 
	#JT_LEFT
 0x0008

	)

2518 
	#JT_RIGHT
 0x0010

	)

2519 
	#JT_OUTER
 0x0020

	)

2520 
	#JT_ERROR
 0x0040

	)

2530 
	#WHERE_ORDERBY_NORMAL
 0x0000

	)

2531 
	#WHERE_ORDERBY_MIN
 0x0001

	)

2532 
	#WHERE_ORDERBY_MAX
 0x0002

	)

2533 
	#WHERE_ONEPASS_DESIRED
 0x0004

	)

2534 
	#WHERE_DUPLICATES_OK
 0x0008

	)

2535 
	#WHERE_OMIT_OPEN_CLOSE
 0x0010

	)

2536 
	#WHERE_FORCE_TABLE
 0x0020

	)

2537 
	#WHERE_ONETABLE_ONLY
 0x0040

	)

2538 
	#WHERE_NO_AUTOINDEX
 0x0080

	)

2539 
	#WHERE_GROUPBY
 0x0100

	)

2540 
	#WHERE_DISTINCTBY
 0x0200

	)

2541 
	#WHERE_WANT_DISTINCT
 0x0400

	)

2542 
	#WHERE_SORTBYGROUP
 0x0800

	)

2543 
	#WHERE_REOPEN_IDX
 0x1000

	)

2544 
	#WHERE_ONEPASS_MULTIROW
 0x2000

	)

2545 
	#WHERE_USE_LIMIT
 0x4000

	)

2546 
	#WHERE_SEEK_TABLE
 0x8000

	)

2550 
	#WHERE_DISTINCT_NOOP
 0

	)

2551 
	#WHERE_DISTINCT_UNIQUE
 1

	)

2552 
	#WHERE_DISTINCT_ORDERED
 2

	)

2553 
	#WHERE_DISTINCT_UNORDERED
 3

	)

2576 
	sNameC⁄ãxt
 {

2577 
P¨£
 *
	mpP¨£
;

2578 
SrcLi°
 *
	mpSrcLi°
;

2579 
Ex¥Li°
 *
	mpELi°
;

2580 
AggInfo
 *
	mpAggInfo
;

2581 
NameC⁄ãxt
 *
	mpNext
;

2582 
	mnRef
;

2583 
	mnEº
;

2584 
u16
 
	mncFœgs
;

2595 
	#NC_AŒowAgg
 0x0001

	)

2596 
	#NC_P¨tIdx
 0x0002

	)

2597 
	#NC_IsCheck
 0x0004

	)

2598 
	#NC_InAggFunc
 0x0008

	)

2599 
	#NC_HasAgg
 0x0010

	)

2600 
	#NC_IdxEx¥
 0x0020

	)

2601 
	#NC_V¨Sñe˘
 0x0040

	)

2602 
	#NC_MöMaxAgg
 0x1000

	)

2624 
	sSñe˘
 {

2625 
Ex¥Li°
 *
	mpELi°
;

2626 
u8
 
	m›
;

2627 
LogE°
 
	mnSñe˘Row
;

2628 
u32
 
	m£lFœgs
;

2629 
	miLimô
, 
	miOff£t
;

2630 #i‡
SELECTTRACE_ENABLED


2631 
	mzSñName
[12];

2633 
	maddrO≥nEphm
[2];

2634 
SrcLi°
 *
	mpSrc
;

2635 
Ex¥
 *
	mpWhîe
;

2636 
Ex¥Li°
 *
	mpGroupBy
;

2637 
Ex¥
 *
	mpHavög
;

2638 
Ex¥Li°
 *
	mpOrdîBy
;

2639 
Sñe˘
 *
	mpPri‹
;

2640 
Sñe˘
 *
	mpNext
;

2641 
Ex¥
 *
	mpLimô
;

2642 
Ex¥
 *
	mpOff£t
;

2643 
Wôh
 *
	mpWôh
;

2655 
	#SF_Di°ö˘
 0x00001

	)

2656 
	#SF_AŒ
 0x00002

	)

2657 
	#SF_Resﬁved
 0x00004

	)

2658 
	#SF_Aggªg©e
 0x00008

	)

2659 
	#SF_HasAgg
 0x00010

	)

2660 
	#SF_U£sEphemîÆ
 0x00020

	)

2661 
	#SF_Ex∑nded
 0x00040

	)

2662 
	#SF_HasTy≥Info
 0x00080

	)

2663 
	#SF_Compound
 0x00100

	)

2664 
	#SF_VÆues
 0x00200

	)

2665 
	#SF_Mu…iVÆue
 0x00400

	)

2666 
	#SF_Ne°edFrom
 0x00800

	)

2667 
	#SF_MöMaxAgg
 0x01000

	)

2668 
	#SF_Recursive
 0x02000

	)

2669 
	#SF_FixedLimô
 0x04000

	)

2670 
	#SF_MaybeC⁄vît
 0x08000

	)

2671 
	#SF_C⁄vîãd
 0x10000

	)

2672 
	#SF_In˛udeHiddí
 0x20000

	)

2739 
	#SRT_Uni⁄
 1

	)

2740 
	#SRT_Ex˚±
 2

	)

2741 
	#SRT_Exi°s
 3

	)

2742 
	#SRT_Disˇrd
 4

	)

2743 
	#SRT_Fifo
 5

	)

2744 
	#SRT_Di°Fifo
 6

	)

2745 
	#SRT_Queue
 7

	)

2746 
	#SRT_Di°Queue
 8

	)

2749 
	#Ign‹abÀOrdîby
(
X
Ë((X->
eDe°
)<=
SRT_Di°Queue
)

	)

2751 
	#SRT_Ouçut
 9

	)

2752 
	#SRT_Mem
 10

	)

2753 
	#SRT_Së
 11

	)

2754 
	#SRT_EphemTab
 12

	)

2755 
	#SRT_C‹outöe
 13

	)

2756 
	#SRT_TabÀ
 14

	)

2762 
	sSñe˘De°
 {

2763 
u8
 
	meDe°
;

2764 
	maffSd°
;

2765 
	miSDP¨m
;

2766 
	miSd°
;

2767 
	mnSd°
;

2768 
Ex¥Li°
 *
	mpOrdîBy
;

2780 
	sAutoöcInfo
 {

2781 
AutoöcInfo
 *
	mpNext
;

2782 
TabÀ
 *
	mpTab
;

2783 
	miDb
;

2784 
	mªgCå
;

2790 #i‚de‡
SQLITE_N_COLCACHE


2791 
	#SQLITE_N_COLCACHE
 10

	)

2812 
	sTriggîPrg
 {

2813 
Triggî
 *
	mpTriggî
;

2814 
TriggîPrg
 *
	mpNext
;

2815 
SubProgøm
 *
	mpProgøm
;

2816 
	m‹c⁄f
;

2817 
u32
 
	maCﬁmask
[2];

2823 #i‡
SQLITE_MAX_ATTACHED
>30

2824 
	tyDbMask
[(
SQLITE_MAX_ATTACHED
+9)/8];

2825 
	#DbMaskTe°
(
M
,
I
Ë(((M)[(I)/8]&(1<<((I)&7)))!=0)

	)

2826 
	#DbMaskZîo
(
M
Ë
	`mem£t
((M),0,(M))

	)

2827 
	#DbMaskSë
(
M
,
I
Ë(M)[(I)/8]|=(1<<((I)&7))

	)

2828 
	#DbMaskAŒZîo
(
M
Ë
	`sqlôe3DbMaskAŒZîo
(M)

	)

2829 
	#DbMaskN⁄Zîo
(
M
Ë(
	`sqlôe3DbMaskAŒZîo
(M)==0)

	)

2831 
	tyDbMask
;

2832 
	#DbMaskTe°
(
M
,
I
Ë(((M)&(((
yDbMask
)1)<<(I)))!=0)

	)

2833 
	#DbMaskZîo
(
M
Ë(M)=0

	)

2834 
	#DbMaskSë
(
M
,
I
Ë(M)|=(((
yDbMask
)1)<<(I))

	)

2835 
	#DbMaskAŒZîo
(
M
Ë(M)==0

	)

2836 
	#DbMaskN⁄Zîo
(
M
Ë(M)!=0

	)

2855 
	sP¨£
 {

2856 
sqlôe3
 *
	mdb
;

2857 *
	mzEºMsg
;

2858 
Vdbe
 *
	mpVdbe
;

2859 
	mrc
;

2860 
u8
 
	mcﬁNamesSë
;

2861 
u8
 
	mcheckSchema
;

2862 
u8
 
	m√°ed
;

2863 
u8
 
	mnTempReg
;

2864 
u8
 
	misMu…iWrôe
;

2865 
u8
 
	mmayAb‹t
;

2866 
u8
 
	mhasCompound
;

2867 
u8
 
	mokC⁄°Fa˘‹
;

2868 
u8
 
	mdißbÀLookaside
;

2869 
u8
 
	mnCﬁCache
;

2870 
	maTempReg
[8];

2871 
	mnR™geReg
;

2872 
	miR™geReg
;

2873 
	mnEº
;

2874 
	mnTab
;

2875 
	mnMem
;

2876 
	mnSë
;

2877 
	mnOn˚
;

2878 
	mnOpAŒoc
;

2879 
	mszOpAŒoc
;

2880 
	miFixedOp
;

2881 
	mckBa£
;

2882 
	miSñfTab
;

2883 
	miCacheLevñ
;

2884 
	miCacheC¡
;

2885 
	mnLabñ
;

2886 *
	maLabñ
;

2887 
	syCﬁCache
 {

2888 
	miTabÀ
;

2889 
i16
 
	miCﬁumn
;

2890 
u8
 
	mãmpReg
;

2891 
	miLevñ
;

2892 
	miReg
;

2893 
	mÃu
;

2894 } 
	maCﬁCache
[
SQLITE_N_COLCACHE
];

2895 
Ex¥Li°
 *
	mpC⁄°Ex¥
;

2896 
Tokí
 
	mc⁄°øötName
;

2897 
yDbMask
 
	mwrôeMask
;

2898 
yDbMask
 
	mcookõMask
;

2899 
	mcookõVÆue
[
SQLITE_MAX_ATTACHED
+2];

2900 
	mªgRowid
;

2901 
	mªgRoŸ
;

2902 
	mnMaxArg
;

2903 #i‡
SELECTTRACE_ENABLED


2904 
	mnSñe˘
;

2905 
	mnSñe˘Indít
;

2907 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


2908 
	mnTabÀLock
;

2909 
TabÀLock
 *
	maTabÀLock
;

2911 
AutoöcInfo
 *
	mpAöc
;

2914 
P¨£
 *
	mpT›Àvñ
;

2915 
TabÀ
 *
	mpTriggîTab
;

2916 
	maddrCrTab
;

2917 
u32
 
	mnQuîyLo›
;

2918 
u32
 
	mﬁdmask
;

2919 
u32
 
	m√wmask
;

2920 
u8
 
	meTriggîOp
;

2921 
u8
 
	meOrc⁄f
;

2922 
u8
 
	mdißbÀTriggîs
;

2931 
ynV¨
 
	mnV¨
;

2932 
	mnzV¨
;

2933 
u8
 
	miPkS‹tOrdî
;

2934 
u8
 
	mex∂aö
;

2935 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


2936 
u8
 
	mde˛¨eVèb
;

2937 
	mnVèbLock
;

2939 
	mnAlüs
;

2940 
	mnHeight
;

2941 #i‚de‡
SQLITE_OMIT_EXPLAIN


2942 
	miSñe˘Id
;

2943 
	miNextSñe˘Id
;

2945 **
	mazV¨
;

2946 
Vdbe
 *
	mpRïª∑ª
;

2947 c⁄° *
	mzTaû
;

2948 
TabÀ
 *
	mpNewTabÀ
;

2949 
Triggî
 *
	mpNewTriggî
;

2950 c⁄° *
	mzAuthC⁄ãxt
;

2951 
Tokí
 
	msNameTokí
;

2952 
Tokí
 
	msLa°Tokí
;

2953 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


2954 
Tokí
 
	msArg
;

2955 
TabÀ
 **
	m≠VèbLock
;

2957 
TabÀ
 *
	mpZombõTab
;

2958 
TriggîPrg
 *
	mpTriggîPrg
;

2959 
Wôh
 *
	mpWôh
;

2960 
Wôh
 *
	mpWôhToFªe
;

2966 #ifde‡
SQLITE_OMIT_VIRTUALTABLE


2967 
	#IN_DECLARE_VTAB
 0

	)

2969 
	#IN_DECLARE_VTAB
 (
pP¨£
->
de˛¨eVèb
)

	)

2976 
	sAuthC⁄ãxt
 {

2977 c⁄° *
	mzAuthC⁄ãxt
;

2978 
P¨£
 *
	mpP¨£
;

2993 
	#OPFLAG_NCHANGE
 0x01

	)

2995 
	#OPFLAG_EPHEM
 0x01

	)

2996 
	#OPFLAG_LASTROWID
 0x02

	)

2997 
	#OPFLAG_ISUPDATE
 0x04

	)

2998 
	#OPFLAG_APPEND
 0x08

	)

2999 
	#OPFLAG_USESEEKRESULT
 0x10

	)

3000 #ifde‡
SQLITE_ENABLE_PREUPDATE_HOOK


3001 
	#OPFLAG_ISNOOP
 0x40

	)

3003 
	#OPFLAG_LENGTHARG
 0x40

	)

3004 
	#OPFLAG_TYPEOFARG
 0x80

	)

3005 
	#OPFLAG_BULKCSR
 0x01

	)

3006 
	#OPFLAG_SEEKEQ
 0x02

	)

3007 
	#OPFLAG_FORDELETE
 0x08

	)

3008 
	#OPFLAG_P2ISREG
 0x10

	)

3009 
	#OPFLAG_PERMUTE
 0x01

	)

3010 
	#OPFLAG_SAVEPOSITION
 0x02

	)

3011 
	#OPFLAG_AUXDELETE
 0x04

	)

3028 
	sTriggî
 {

3029 *
	mzName
;

3030 *
	mèbÀ
;

3031 
u8
 
	m›
;

3032 
u8
 
	må_tm
;

3033 
Ex¥
 *
	mpWhí
;

3034 
IdLi°
 *
	mpCﬁumns
;

3036 
Schema
 *
	mpSchema
;

3037 
Schema
 *
	mpTabSchema
;

3038 
TriggîSãp
 *
	m°ï_li°
;

3039 
Triggî
 *
	mpNext
;

3049 
	#TRIGGER_BEFORE
 1

	)

3050 
	#TRIGGER_AFTER
 2

	)

3090 
	sTriggîSãp
 {

3091 
u8
 
	m›
;

3092 
u8
 
	m‹c⁄f
;

3093 
Triggî
 *
	mpTrig
;

3094 
Sñe˘
 *
	mpSñe˘
;

3095 *
	mzT¨gë
;

3096 
Ex¥
 *
	mpWhîe
;

3097 
Ex¥Li°
 *
	mpEx¥Li°
;

3098 
IdLi°
 *
	mpIdLi°
;

3099 
TriggîSãp
 *
	mpNext
;

3100 
TriggîSãp
 *
	mpLa°
;

3108 
DbFixî
 
	tDbFixî
;

3109 
	sDbFixî
 {

3110 
P¨£
 *
	mpP¨£
;

3111 
Schema
 *
	mpSchema
;

3112 
	mbV¨O∆y
;

3113 c⁄° *
	mzDb
;

3114 c⁄° *
	mzTy≥
;

3115 c⁄° 
Tokí
 *
	mpName
;

3122 
	sSåAccum
 {

3123 
sqlôe3
 *
	mdb
;

3124 *
	mzBa£
;

3125 *
	mzText
;

3126 
u32
 
	mnCh¨
;

3127 
u32
 
	mnAŒoc
;

3128 
u32
 
	mmxAŒoc
;

3129 
u8
 
	maccEº‹
;

3130 
u8
 
	m¥ötfFœgs
;

3132 
	#STRACCUM_NOMEM
 1

	)

3133 
	#STRACCUM_TOOBIG
 2

	)

3134 
	#SQLITE_PRINTF_INTERNAL
 0x01

	)

3135 
	#SQLITE_PRINTF_SQLFUNC
 0x02

	)

3136 
	#SQLITE_PRINTF_MALLOCED
 0x04

	)

3138 
	#isMÆlo˚d
(
X
Ë(((X)->
¥ötfFœgs
 & 
SQLITE_PRINTF_MALLOCED
)!=0)

	)

3146 
sqlôe3
 *
	mdb
;

3147 **
	mpzEºMsg
;

3148 
	miDb
;

3149 
	mrc
;

3150 } 
	tInôD©a
;

3157 
	sSqlôe3C⁄fig
 {

3158 
	mbMem°©
;

3159 
	mbC‹eMuãx
;

3160 
	mbFuŒMuãx
;

3161 
	mbO≥nUri
;

3162 
	mbU£Cis
;

3163 
	mmxSåÀn
;

3164 
	m√vîC‹ru±
;

3165 
	mszLookaside
;

3166 
	mnLookaside
;

3167 
	mnStmtSpûl
;

3168 
sqlôe3_mem_mëhods
 
	mm
;

3169 
sqlôe3_muãx_mëhods
 
	mmuãx
;

3170 
sqlôe3_pˇche_mëhods2
 
	mpˇche2
;

3171 *
	mpHóp
;

3172 
	mnHóp
;

3173 
	mmnReq
, 
	mmxReq
;

3174 
sqlôe3_öt64
 
	mszMm≠
;

3175 
sqlôe3_öt64
 
	mmxMm≠
;

3176 *
	mpS¸©ch
;

3177 
	mszS¸©ch
;

3178 
	mnS¸©ch
;

3179 *
	mpPage
;

3180 
	mszPage
;

3181 
	mnPage
;

3182 
	mmxP¨£rSèck
;

3183 
	msh¨edCacheE«bÀd
;

3184 
u32
 
	mszPma
;

3187 
	misInô
;

3188 
	möProgªss
;

3189 
	misMuãxInô
;

3190 
	misMÆlocInô
;

3191 
	misPCacheInô
;

3192 
	mnRefInôMuãx
;

3193 
sqlôe3_muãx
 *
	mpInôMuãx
;

3194 (*
	mxLog
)(*,,const *);

3195 *
	mpLogArg
;

3196 #ifde‡
SQLITE_ENABLE_SQLLOG


3197 (*
	mxSqŒog
)(*,
	msqlôe3
*,const *, );

3198 *
	mpSqŒogArg
;

3200 #ifde‡
SQLITE_VDBE_COVERAGE


3204 (*
	mxVdbeBønch
)(*,
	miSrcLöe
,
u8
 
	meThis
,u8 
	meMx
);

3205 *
	mpVdbeBønchArg
;

3207 #i‚de‡
SQLITE_OMIT_BUILTIN_TEST


3208 (*
	mxTe°CÆlback
)();

3210 
	mbLoˇ…imeFau…
;

3229 
	#CORRUPT_DB
 (
sqlôe3C⁄fig
.
√vîC‹ru±
==0)

	)

3234 
	sWÆkî
 {

3235 
P¨£
 *
	mpP¨£
;

3236 (*
	mxEx¥CÆlback
)(
	mWÆkî
*, 
	mEx¥
*);

3237 (*
	mxSñe˘CÆlback
)(
	mWÆkî
*,
	mSñe˘
*);

3238 (*
	mxSñe˘CÆlback2
)(
	mWÆkî
*,
	mSñe˘
*);

3239 
	mwÆkîDïth
;

3240 
u8
 
	meCode
;

3242 
NameC⁄ãxt
 *
	mpNC
;

3243 
	mn
;

3244 
	miCur
;

3245 
SrcLi°
 *
	mpSrcLi°
;

3246 
SrcCou¡
 *
	mpSrcCou¡
;

3247 
CCurHöt
 *
	mpCCurHöt
;

3248 *
	maiCﬁ
;

3249 } 
	mu
;

3253 
sqlôe3WÆkEx¥
(
WÆkî
*, 
Ex¥
*);

3254 
sqlôe3WÆkEx¥Li°
(
WÆkî
*, 
Ex¥Li°
*);

3255 
sqlôe3WÆkSñe˘
(
WÆkî
*, 
Sñe˘
*);

3256 
sqlôe3WÆkSñe˘Ex¥
(
WÆkî
*, 
Sñe˘
*);

3257 
sqlôe3WÆkSñe˘From
(
WÆkî
*, 
Sñe˘
*);

3258 
sqlôe3Ex¥WÆkNo›
(
WÆkî
*, 
Ex¥
*);

3264 
	#WRC_C⁄töue
 0

	)

3265 
	#WRC_Pru√
 1

	)

3266 
	#WRC_Ab‹t
 2

	)

3272 
	sWôh
 {

3273 
	mnCã
;

3274 
Wôh
 *
	mpOuãr
;

3275 
	sCã
 {

3276 *
	mzName
;

3277 
Ex¥Li°
 *
	mpCﬁs
;

3278 
Sñe˘
 *
	mpSñe˘
;

3279 c⁄° *
	mzCãEº
;

3280 } 
	ma
[1];

3283 #ifde‡
SQLITE_DEBUG


3288 
	sTªeVõw
 {

3289 
	miLevñ
;

3290 
u8
 
	mbLöe
[100];

3298 
	#SQLITE_SKIP_UTF8
(
zIn
) { \

3299 if–(*(
zIn
++))>=0xc0 ){ \

3300  (*
zIn
 & 0xc0)==0x80 ){ zIn++; } \

3302 }

	)

3311 
sqlôe3C‹ru±Eº‹
();

3312 
sqlôe3Misu£Eº‹
();

3313 
sqlôe3C™t›íEº‹
();

3314 
	#SQLITE_CORRUPT_BKPT
 
	`sqlôe3C‹ru±Eº‹
(
__LINE__
)

	)

3315 
	#SQLITE_MISUSE_BKPT
 
	`sqlôe3Misu£Eº‹
(
__LINE__
)

	)

3316 
	#SQLITE_CANTOPEN_BKPT
 
	`sqlôe3C™t›íEº‹
(
__LINE__
)

	)

3317 #ifde‡
SQLITE_DEBUG


3318 
sqlôe3NomemEº‹
();

3319 
sqlôe3I€ºnomemEº‹
();

3320 
	#SQLITE_NOMEM_BKPT
 
	`sqlôe3NomemEº‹
(
__LINE__
)

	)

3321 
	#SQLITE_IOERR_NOMEM_BKPT
 
	`sqlôe3I€ºnomemEº‹
(
__LINE__
)

	)

3323 
	#SQLITE_NOMEM_BKPT
 
SQLITE_NOMEM


	)

3324 
	#SQLITE_IOERR_NOMEM_BKPT
 
SQLITE_IOERR_NOMEM


	)

3330 #i‡
deföed
(
SQLITE_OMIT_VIRTUALTABLE
)

3331 #unde‡
SQLITE_ENABLE_FTS3


3332 #unde‡
SQLITE_ENABLE_FTS4


3340 #i‡
deföed
(
SQLITE_ENABLE_FTS4
Ë&& !deföed(
SQLITE_ENABLE_FTS3
)

3341 
	#SQLITE_ENABLE_FTS3
 1

	)

3348 #i‡!
deföed
(
SQLITE_ASCII
) || \

3349 (
deföed
(
SQLITE_ENABLE_FTS3
Ë&& 
	$deföed
(
SQLITE_AMALGAMATION
))

3350 
	~<˘y≥.h
>

3358 #ifde‡
SQLITE_ASCII


3359 
	#sqlôe3Touµî
(
x
Ë((x)&~(
sqlôe3Cty≥M≠
[()(x)]&0x20))

	)

3360 
	#sqlôe3Is•a˚
(
x
Ë(
sqlôe3Cty≥M≠
[()(x)]&0x01)

	)

3361 
	#sqlôe3Iß um
(
x
Ë(
sqlôe3Cty≥M≠
[()(x)]&0x06)

	)

3362 
	#sqlôe3IßÕha
(
x
Ë(
sqlôe3Cty≥M≠
[()(x)]&0x02)

	)

3363 
	#sqlôe3Isdigô
(
x
Ë(
sqlôe3Cty≥M≠
[()(x)]&0x04)

	)

3364 
	#sqlôe3Isxdigô
(
x
Ë(
sqlôe3Cty≥M≠
[()(x)]&0x08)

	)

3365 
	#sqlôe3Tﬁowî
(
x
Ë(
sqlôe3UµîToLowî
[()(x)])

	)

3366 
	#sqlôe3IsquŸe
(
x
Ë(
sqlôe3Cty≥M≠
[()(x)]&0x80)

	)

3368 
	#sqlôe3Touµî
(
x
Ë
	`touµî
(()(x))

	)

3369 
	#sqlôe3Is•a˚
(
x
Ë
	`is•a˚
(()(x))

	)

3370 
	#sqlôe3Iß um
(
x
Ë
	`iß um
(()(x))

	)

3371 
	#sqlôe3IßÕha
(
x
Ë
	`ißÕha
(()(x))

	)

3372 
	#sqlôe3Isdigô
(
x
Ë
	`isdigô
(()(x))

	)

3373 
	#sqlôe3Isxdigô
(
x
Ë
	`isxdigô
(()(x))

	)

3374 
	#sqlôe3Tﬁowî
(
x
Ë
	`tﬁowî
(()(x))

	)

3375 
	#sqlôe3IsquŸe
(
x
Ë((x)=='"'||(x)=='\''||(x)=='['||(x)=='`')

	)

3377 #i‚de‡
SQLITE_OMIT_COMPILEOPTION_DIAGS


3378 
	`sqlôe3IsIdCh¨
(
u8
);

3384 
	`sqlôe3SåICmp
(const *,const *);

3385 
	`sqlôe3SåÀn30
(const *);

3386 *
	`sqlôe3CﬁumnTy≥
(
Cﬁumn
*,*);

3387 
	#sqlôe3SåNICmp
 
sqlôe3_°∫icmp


	)

3389 
	`sqlôe3MÆlocInô
();

3390 
	`sqlôe3MÆlocEnd
();

3391 *
	`sqlôe3MÆloc
(
u64
);

3392 *
	`sqlôe3MÆlocZîo
(
u64
);

3393 *
	`sqlôe3DbMÆlocZîo
(
sqlôe3
*, 
u64
);

3394 *
	`sqlôe3DbMÆlocRaw
(
sqlôe3
*, 
u64
);

3395 *
	`sqlôe3DbMÆlocRawNN
(
sqlôe3
*, 
u64
);

3396 *
	`sqlôe3DbSåDup
(
sqlôe3
*,const *);

3397 *
	`sqlôe3DbSåNDup
(
sqlôe3
*,c⁄° *, 
u64
);

3398 *
	`sqlôe3RóŒoc
(*, 
u64
);

3399 *
	`sqlôe3DbRóŒocOrFªe
(
sqlôe3
 *, *, 
u64
);

3400 *
	`sqlôe3DbRóŒoc
(
sqlôe3
 *, *, 
u64
);

3401 
	`sqlôe3DbFªe
(
sqlôe3
*, *);

3402 
	`sqlôe3MÆlocSize
(*);

3403 
	`sqlôe3DbMÆlocSize
(
sqlôe3
*, *);

3404 *
	`sqlôe3S¸©chMÆloc
();

3405 
	`sqlôe3S¸©chFªe
(*);

3406 *
	`sqlôe3PageMÆloc
();

3407 
	`sqlôe3PageFªe
(*);

3408 
	`sqlôe3MemSëDeÁu…
();

3409 #i‚de‡
SQLITE_OMIT_BUILTIN_TEST


3410 
	`sqlôe3BíignMÆlocHooks
((*)(), (*)());

3412 
	`sqlôe3HópNóæyFuŒ
();

3422 #ifde‡
SQLITE_USE_ALLOCA


3423 
	#sqlôe3SèckAŒocRaw
(
D
,
N
Ë
	`Æloˇ
(N)

	)

3424 
	#sqlôe3SèckAŒocZîo
(
D
,
N
Ë
	`mem£t
(
	`Æloˇ
(N), 0, N)

	)

3425 
	#sqlôe3SèckFªe
(
D
,
P
)

	)

3427 
	#sqlôe3SèckAŒocRaw
(
D
,
N
Ë
	`sqlôe3DbMÆlocRaw
(D,N)

	)

3428 
	#sqlôe3SèckAŒocZîo
(
D
,
N
Ë
	`sqlôe3DbMÆlocZîo
(D,N)

	)

3429 
	#sqlôe3SèckFªe
(
D
,
P
Ë
	`sqlôe3DbFªe
(D,P)

	)

3432 #ifde‡
SQLITE_ENABLE_MEMSYS3


3433 c⁄° 
sqlôe3_mem_mëhods
 *
	`sqlôe3MemGëMemsys3
();

3435 #ifde‡
SQLITE_ENABLE_MEMSYS5


3436 c⁄° 
sqlôe3_mem_mëhods
 *
	`sqlôe3MemGëMemsys5
();

3440 #i‚de‡
SQLITE_MUTEX_OMIT


3441 
sqlôe3_muãx_mëhods
 c⁄° *
	`sqlôe3DeÁu…Muãx
();

3442 
sqlôe3_muãx_mëhods
 c⁄° *
	`sqlôe3No›Muãx
();

3443 
sqlôe3_muãx
 *
	`sqlôe3MuãxAŒoc
();

3444 
	`sqlôe3MuãxInô
();

3445 
	`sqlôe3MuãxEnd
();

3447 #i‡!
	`deföed
(
SQLITE_MUTEX_OMIT
Ë&& !deföed(
SQLITE_MUTEX_NOOP
)

3448 
	`sqlôe3Mem‹yB¨rõr
();

3450 
	#sqlôe3Mem‹yB¨rõr
()

	)

3453 
sqlôe3_öt64
 
	`sqlôe3SètusVÆue
();

3454 
	`sqlôe3SètusUp
(, );

3455 
	`sqlôe3SètusDown
(, );

3456 
	`sqlôe3SètusHighw©î
(, );

3459 
sqlôe3_muãx
 *
	`sqlôe3Pˇche1Muãx
();

3460 
sqlôe3_muãx
 *
	`sqlôe3MÆlocMuãx
();

3462 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


3463 
	`sqlôe3IsNaN
();

3465 
	#sqlôe3IsNaN
(
X
Ë0

	)

3472 
	sPrötfArgumíts
 {

3473 
nArg
;

3474 
nU£d
;

3475 
sqlôe3_vÆue
 **
≠Arg
;

3478 
	`sqlôe3VXPrötf
(
SåAccum
*, c⁄° *, 
va_li°
);

3479 
	`sqlôe3XPrötf
(
SåAccum
*, const *, ...);

3480 *
	`sqlôe3MPrötf
(
sqlôe3
*,const *, ...);

3481 *
	`sqlôe3VMPrötf
(
sqlôe3
*,c⁄° *, 
va_li°
);

3482 #i‡
	`deföed
(
SQLITE_DEBUG
Ë|| deföed(
SQLITE_HAVE_OS_TRACE
)

3483 
	`sqlôe3DebugPrötf
(const *, ...);

3485 #i‡
	`deföed
(
SQLITE_TEST
)

3486 *
	`sqlôe3Te°TextToPå
(const *);

3489 #i‡
	`deföed
(
SQLITE_DEBUG
)

3490 
	`sqlôe3TªeVõwEx¥
(
TªeVõw
*, c⁄° 
Ex¥
*, 
u8
);

3491 
	`sqlôe3TªeVõwEx¥Li°
(
TªeVõw
*, c⁄° 
Ex¥Li°
*, 
u8
, const *);

3492 
	`sqlôe3TªeVõwSñe˘
(
TªeVõw
*, c⁄° 
Sñe˘
*, 
u8
);

3493 
	`sqlôe3TªeVõwWôh
(
TªeVõw
*, c⁄° 
Wôh
*, 
u8
);

3497 
	`sqlôe3SëSåög
(**, 
sqlôe3
*, const *);

3498 
	`sqlôe3Eº‹Msg
(
P¨£
*, const *, ...);

3499 
	`sqlôe3DequŸe
(*);

3500 
	`sqlôe3TokíInô
(
Tokí
*,*);

3501 
	`sqlôe3Keyw‹dCode
(const *, );

3502 
	`sqlôe3RunP¨£r
(
P¨£
*, const *, **);

3503 
	`sqlôe3FöishCodög
(
P¨£
*);

3504 
	`sqlôe3GëTempReg
(
P¨£
*);

3505 
	`sqlôe3Rñó£TempReg
(
P¨£
*,);

3506 
	`sqlôe3GëTempR™ge
(
P¨£
*,);

3507 
	`sqlôe3Rñó£TempR™ge
(
P¨£
*,,);

3508 
	`sqlôe3CÀ¨TempRegCache
(
P¨£
*);

3509 #ifde‡
SQLITE_DEBUG


3510 
	`sqlôe3NoTempsInR™ge
(
P¨£
*,,);

3512 
Ex¥
 *
	`sqlôe3Ex¥AŒoc
(
sqlôe3
*,,c⁄° 
Tokí
*,);

3513 
Ex¥
 *
	`sqlôe3Ex¥
(
sqlôe3
*,,const *);

3514 
	`sqlôe3Ex¥AâachSubåìs
(
sqlôe3
*,
Ex¥
*,Expr*,Expr*);

3515 
Ex¥
 *
	`sqlôe3PEx¥
(
P¨£
*, , Ex¥*, Ex¥*, c⁄° 
Tokí
*);

3516 
	`sqlôe3PEx¥AddSñe˘
(
P¨£
*, 
Ex¥
*, 
Sñe˘
*);

3517 
Ex¥
 *
	`sqlôe3Ex¥And
(
sqlôe3
*,Expr*, Expr*);

3518 
Ex¥
 *
	`sqlôe3Ex¥Fun˘i⁄
(
P¨£
*,
Ex¥Li°
*, 
Tokí
*);

3519 
	`sqlôe3Ex¥AssignV¨Numbî
(
P¨£
*, 
Ex¥
*);

3520 
	`sqlôe3Ex¥Dñëe
(
sqlôe3
*, 
Ex¥
*);

3521 
Ex¥Li°
 *
	`sqlôe3Ex¥Li°Aµíd
(
P¨£
*,Ex¥Li°*,
Ex¥
*);

3522 
	`sqlôe3Ex¥Li°SëS‹tOrdî
(
Ex¥Li°
*,);

3523 
	`sqlôe3Ex¥Li°SëName
(
P¨£
*,
Ex¥Li°
*,
Tokí
*,);

3524 
	`sqlôe3Ex¥Li°SëS∑n
(
P¨£
*,
Ex¥Li°
*,
Ex¥S∑n
*);

3525 
	`sqlôe3Ex¥Li°Dñëe
(
sqlôe3
*, 
Ex¥Li°
*);

3526 
u32
 
	`sqlôe3Ex¥Li°Fœgs
(c⁄° 
Ex¥Li°
*);

3527 
	`sqlôe3Inô
(
sqlôe3
*, **);

3528 
	`sqlôe3InôCÆlback
(*, , **, **);

3529 
	`sqlôe3Pøgma
(
P¨£
*,
Tokí
*,Token*,Token*,);

3530 
	`sqlôe3Re£tAŒSchemasOfC⁄√˘i⁄
(
sqlôe3
*);

3531 
	`sqlôe3Re£tO√Schema
(
sqlôe3
*,);

3532 
	`sqlôe3Cﬁœp£D©aba£Aºay
(
sqlôe3
*);

3533 
	`sqlôe3CommôI¡î«lCh™ges
(
sqlôe3
*);

3534 
	`sqlôe3DñëeCﬁumnNames
(
sqlôe3
*,
TabÀ
*);

3535 
	`sqlôe3CﬁumnsFromEx¥Li°
(
P¨£
*,
Ex¥Li°
*,
i16
*,
Cﬁumn
**);

3536 
	`sqlôe3Sñe˘AddCﬁumnTy≥AndCﬁœti⁄
(
P¨£
*,
TabÀ
*,
Sñe˘
*);

3537 
TabÀ
 *
	`sqlôe3Resu…SëOfSñe˘
(
P¨£
*,
Sñe˘
*);

3538 
	`sqlôe3O≥nMa°îTabÀ
(
P¨£
 *, );

3539 
Index
 *
	`sqlôe3Prim¨yKeyIndex
(
TabÀ
*);

3540 
i16
 
	`sqlôe3CﬁumnOfIndex
(
Index
*, i16);

3541 
	`sqlôe3SèπTabÀ
(
P¨£
*,
Tokí
*,Token*,,,,);

3542 #i‡
SQLITE_ENABLE_HIDDEN_COLUMNS


3543 
	`sqlôe3CﬁumnPr›îtõsFromName
(
TabÀ
*, 
Cﬁumn
*);

3545 
	#sqlôe3CﬁumnPr›îtõsFromName
(
T
,
C
Ë

	)

3547 
	`sqlôe3AddCﬁumn
(
P¨£
*,
Tokí
*,Token*);

3548 
	`sqlôe3AddNŸNuŒ
(
P¨£
*, );

3549 
	`sqlôe3AddPrim¨yKey
(
P¨£
*, 
Ex¥Li°
*, , , );

3550 
	`sqlôe3AddCheckC⁄°øöt
(
P¨£
*, 
Ex¥
*);

3551 
	`sqlôe3AddDeÁu…VÆue
(
P¨£
*,
Ex¥S∑n
*);

3552 
	`sqlôe3AddCﬁœãTy≥
(
P¨£
*, 
Tokí
*);

3553 
	`sqlôe3EndTabÀ
(
P¨£
*,
Tokí
*,Tokí*,
u8
,
Sñe˘
*);

3554 
	`sqlôe3P¨£Uri
(const *,const *,*,

3555 
sqlôe3_vfs
**,**,**);

3556 
Båì
 *
	`sqlôe3DbNameToBåì
(
sqlôe3
*,const *);

3557 
	`sqlôe3CodeOn˚
(
P¨£
 *);

3559 #ifde‡
SQLITE_OMIT_BUILTIN_TEST


3560 
	#sqlôe3Fau…Sim
(
X
Ë
SQLITE_OK


	)

3562 
	`sqlôe3Fau…Sim
();

3565 
Bôvec
 *
	`sqlôe3BôvecCª©e
(
u32
);

3566 
	`sqlôe3BôvecTe°
(
Bôvec
*, 
u32
);

3567 
	`sqlôe3BôvecTe°NŸNuŒ
(
Bôvec
*, 
u32
);

3568 
	`sqlôe3BôvecSë
(
Bôvec
*, 
u32
);

3569 
	`sqlôe3BôvecCÀ¨
(
Bôvec
*, 
u32
, *);

3570 
	`sqlôe3BôvecDe°roy
(
Bôvec
*);

3571 
u32
 
	`sqlôe3BôvecSize
(
Bôvec
*);

3572 #i‚de‡
SQLITE_OMIT_BUILTIN_TEST


3573 
	`sqlôe3BôvecBuûtöTe°
(,*);

3576 
RowSë
 *
	`sqlôe3RowSëInô
(
sqlôe3
*, *, );

3577 
	`sqlôe3RowSëCÀ¨
(
RowSë
*);

3578 
	`sqlôe3RowSëIn£π
(
RowSë
*, 
i64
);

3579 
	`sqlôe3RowSëTe°
(
RowSë
*, 
iB©ch
, 
i64
);

3580 
	`sqlôe3RowSëNext
(
RowSë
*, 
i64
*);

3582 
	`sqlôe3Cª©eVõw
(
P¨£
*,
Tokí
*,Tokí*,Tokí*,
Ex¥Li°
*,
Sñe˘
*,,);

3584 #i‡!
	`deföed
(
SQLITE_OMIT_VIEW
Ë|| !deföed(
SQLITE_OMIT_VIRTUALTABLE
)

3585 
	`sqlôe3VõwGëCﬁumnNames
(
P¨£
*,
TabÀ
*);

3587 
	#sqlôe3VõwGëCﬁumnNames
(
A
,
B
Ë0

	)

3590 #i‡
SQLITE_MAX_ATTACHED
>30

3591 
	`sqlôe3DbMaskAŒZîo
(
yDbMask
);

3593 
	`sqlôe3Dr›TabÀ
(
P¨£
*, 
SrcLi°
*, , );

3594 
	`sqlôe3CodeDr›TabÀ
(
P¨£
*, 
TabÀ
*, , );

3595 
	`sqlôe3DñëeTabÀ
(
sqlôe3
*, 
TabÀ
*);

3596 #i‚de‡
SQLITE_OMIT_AUTOINCREMENT


3597 
	`sqlôe3Autoö¸emítBegö
(
P¨£
 *
pP¨£
);

3598 
	`sqlôe3Autoö¸emítEnd
(
P¨£
 *
pP¨£
);

3600 
	#sqlôe3Autoö¸emítBegö
(
X
)

	)

3601 
	#sqlôe3Autoö¸emítEnd
(
X
)

	)

3603 
	`sqlôe3In£π
(
P¨£
*, 
SrcLi°
*, 
Sñe˘
*, 
IdLi°
*, );

3604 *
	`sqlôe3AºayAŒoˇã
(
sqlôe3
*,*,,*,*);

3605 
IdLi°
 *
	`sqlôe3IdLi°Aµíd
(
sqlôe3
*, IdLi°*, 
Tokí
*);

3606 
	`sqlôe3IdLi°Index
(
IdLi°
*,const *);

3607 
SrcLi°
 *
	`sqlôe3SrcLi°E∆¨ge
(
sqlôe3
*, SrcList*, , );

3608 
SrcLi°
 *
	`sqlôe3SrcLi°Aµíd
(
sqlôe3
*, SrcLi°*, 
Tokí
*, Token*);

3609 
SrcLi°
 *
	`sqlôe3SrcLi°AµídFromTîm
(
P¨£
*, SrcLi°*, 
Tokí
*, Token*,

3610 
Tokí
*, 
Sñe˘
*, 
Ex¥
*, 
IdLi°
*);

3611 
	`sqlôe3SrcLi°IndexedBy
(
P¨£
 *, 
SrcLi°
 *, 
Tokí
 *);

3612 
	`sqlôe3SrcLi°FuncArgs
(
P¨£
*, 
SrcLi°
*, 
Ex¥Li°
*);

3613 
	`sqlôe3IndexedByLookup
(
P¨£
 *, 
SrcLi°_ôem
 *);

3614 
	`sqlôe3SrcLi°Shi·JoöTy≥
(
SrcLi°
*);

3615 
	`sqlôe3SrcLi°AssignCurs‹s
(
P¨£
*, 
SrcLi°
*);

3616 
	`sqlôe3IdLi°Dñëe
(
sqlôe3
*, 
IdLi°
*);

3617 
	`sqlôe3SrcLi°Dñëe
(
sqlôe3
*, 
SrcLi°
*);

3618 
Index
 *
	`sqlôe3AŒoˇãIndexObje˘
(
sqlôe3
*,
i16
,,**);

3619 
Index
 *
	`sqlôe3Cª©eIndex
(
P¨£
*,
Tokí
*,Tokí*,
SrcLi°
*,
Ex¥Li°
*,,Token*,

3620 
Ex¥
*, , );

3621 
	`sqlôe3Dr›Index
(
P¨£
*, 
SrcLi°
*, );

3622 
	`sqlôe3Sñe˘
(
P¨£
*, 
Sñe˘
*, 
Sñe˘De°
*);

3623 
Sñe˘
 *
	`sqlôe3Sñe˘New
(
P¨£
*,
Ex¥Li°
*,
SrcLi°
*,
Ex¥
*,ExprList*,

3624 
Ex¥
*,
Ex¥Li°
*,
u32
,Expr*,Expr*);

3625 
	`sqlôe3Sñe˘Dñëe
(
sqlôe3
*, 
Sñe˘
*);

3626 
TabÀ
 *
	`sqlôe3SrcLi°Lookup
(
P¨£
*, 
SrcLi°
*);

3627 
	`sqlôe3IsRódO∆y
(
P¨£
*, 
TabÀ
*, );

3628 
	`sqlôe3O≥nTabÀ
(
P¨£
*, 
iCur
, 
iDb
, 
TabÀ
*, );

3629 #i‡
	`deföed
(
SQLITE_ENABLE_UPDATE_DELETE_LIMIT
Ë&& !deföed(
SQLITE_OMIT_SUBQUERY
)

3630 
Ex¥
 *
	`sqlôe3LimôWhîe
(
P¨£
*,
SrcLi°
*,Ex¥*,
Ex¥Li°
*,Expr*,Expr*,*);

3632 
	`sqlôe3DñëeFrom
(
P¨£
*, 
SrcLi°
*, 
Ex¥
*);

3633 
	`sqlôe3Upd©e
(
P¨£
*, 
SrcLi°
*, 
Ex¥Li°
*, 
Ex¥
*, );

3634 
WhîeInfo
 *
	`sqlôe3WhîeBegö
(
P¨£
*,
SrcLi°
*,
Ex¥
*,
Ex¥Li°
*,Ex¥Li°*,
u16
,);

3635 
	`sqlôe3WhîeEnd
(
WhîeInfo
*);

3636 
LogE°
 
	`sqlôe3WhîeOuçutRowCou¡
(
WhîeInfo
*);

3637 
	`sqlôe3WhîeIsDi°ö˘
(
WhîeInfo
*);

3638 
	`sqlôe3WhîeIsOrdîed
(
WhîeInfo
*);

3639 
	`sqlôe3WhîeIsS‹ãd
(
WhîeInfo
*);

3640 
	`sqlôe3WhîeC⁄töueLabñ
(
WhîeInfo
*);

3641 
	`sqlôe3WhîeBªakLabñ
(
WhîeInfo
*);

3642 
	`sqlôe3WhîeOkO√Pass
(
WhîeInfo
*, *);

3643 
	#ONEPASS_OFF
 0

	)

3644 
	#ONEPASS_SINGLE
 1

	)

3645 
	#ONEPASS_MULTI
 2

	)

3646 
	`sqlôe3Ex¥CodeLﬂdIndexCﬁumn
(
P¨£
*, 
Index
*, , , );

3647 
	`sqlôe3Ex¥CodeGëCﬁumn
(
P¨£
*, 
TabÀ
*, , , , 
u8
);

3648 
	`sqlôe3Ex¥CodeGëCﬁumnToReg
(
P¨£
*, 
TabÀ
*, , , );

3649 
	`sqlôe3Ex¥CodeGëCﬁumnOfTabÀ
(
Vdbe
*, 
TabÀ
*, , , );

3650 
	`sqlôe3Ex¥CodeMove
(
P¨£
*, , , );

3651 
	`sqlôe3Ex¥CacheSt‹e
(
P¨£
*, , , );

3652 
	`sqlôe3Ex¥CachePush
(
P¨£
*);

3653 
	`sqlôe3Ex¥CacheP›
(
P¨£
*);

3654 
	`sqlôe3Ex¥CacheRemove
(
P¨£
*, , );

3655 
	`sqlôe3Ex¥CacheCÀ¨
(
P¨£
*);

3656 
	`sqlôe3Ex¥CacheAfföôyCh™ge
(
P¨£
*, , );

3657 
	`sqlôe3Ex¥Code
(
P¨£
*, 
Ex¥
*, );

3658 
	`sqlôe3Ex¥CodeC›y
(
P¨£
*, 
Ex¥
*, );

3659 
	`sqlôe3Ex¥CodeFa˘‹abÀ
(
P¨£
*, 
Ex¥
*, );

3660 
	`sqlôe3Ex¥CodeAtInô
(
P¨£
*, 
Ex¥
*, , 
u8
);

3661 
	`sqlôe3Ex¥CodeTemp
(
P¨£
*, 
Ex¥
*, *);

3662 
	`sqlôe3Ex¥CodeT¨gë
(
P¨£
*, 
Ex¥
*, );

3663 
	`sqlôe3Ex¥CodeAndCache
(
P¨£
*, 
Ex¥
*, );

3664 
	`sqlôe3Ex¥CodeEx¥Li°
(
P¨£
*, 
Ex¥Li°
*, , , 
u8
);

3665 
	#SQLITE_ECEL_DUP
 0x01

	)

3666 
	#SQLITE_ECEL_FACTOR
 0x02

	)

3667 
	#SQLITE_ECEL_REF
 0x04

	)

3668 
	`sqlôe3Ex¥IfTrue
(
P¨£
*, 
Ex¥
*, , );

3669 
	`sqlôe3Ex¥IfFÆ£
(
P¨£
*, 
Ex¥
*, , );

3670 
	`sqlôe3Ex¥IfFÆ£Dup
(
P¨£
*, 
Ex¥
*, , );

3671 
TabÀ
 *
	`sqlôe3FödTabÀ
(
sqlôe3
*,const *, const *);

3672 
TabÀ
 *
	`sqlôe3LoˇãTabÀ
(
P¨£
*,
isVõw
,const *, const *);

3673 
TabÀ
 *
	`sqlôe3LoˇãTabÀIãm
(
P¨£
*,
isVõw
,
SrcLi°_ôem
 *);

3674 
Index
 *
	`sqlôe3FödIndex
(
sqlôe3
*,const *, const *);

3675 
	`sqlôe3U∆ökAndDñëeTabÀ
(
sqlôe3
*,,const *);

3676 
	`sqlôe3U∆ökAndDñëeIndex
(
sqlôe3
*,,const *);

3677 
	`sqlôe3Vacuum
(
P¨£
*);

3678 
	`sqlôe3RunVacuum
(**, 
sqlôe3
*);

3679 *
	`sqlôe3NameFromTokí
(
sqlôe3
*, 
Tokí
*);

3680 
	`sqlôe3Ex¥Com∑ª
(
Ex¥
*, Expr*, );

3681 
	`sqlôe3Ex¥Li°Com∑ª
(
Ex¥Li°
*, ExprList*, );

3682 
	`sqlôe3Ex¥Im∂õsEx¥
(
Ex¥
*, Expr*, );

3683 
	`sqlôe3Ex¥A«lyzeAggªg©es
(
NameC⁄ãxt
*, 
Ex¥
*);

3684 
	`sqlôe3Ex¥A«lyzeAggLi°
(
NameC⁄ãxt
*,
Ex¥Li°
*);

3685 
	`sqlôe3Fun˘i⁄U£sThisSrc
(
Ex¥
*, 
SrcLi°
*);

3686 
Vdbe
 *
	`sqlôe3GëVdbe
(
P¨£
*);

3687 #i‚de‡
SQLITE_OMIT_BUILTIN_TEST


3688 
	`sqlôe3P∫gSaveSèã
();

3689 
	`sqlôe3P∫gRe°‹eSèã
();

3691 
	`sqlôe3RﬁlbackAŒ
(
sqlôe3
*,);

3692 
	`sqlôe3CodeVîifySchema
(
P¨£
*, );

3693 
	`sqlôe3CodeVîifyNamedSchema
(
P¨£
*, c⁄° *
zDb
);

3694 
	`sqlôe3BegöTønß˘i⁄
(
P¨£
*, );

3695 
	`sqlôe3CommôTønß˘i⁄
(
P¨£
*);

3696 
	`sqlôe3RﬁlbackTønß˘i⁄
(
P¨£
*);

3697 
	`sqlôe3Savïoöt
(
P¨£
*, , 
Tokí
*);

3698 
	`sqlôe3Clo£Savïoöts
(
sqlôe3
 *);

3699 
	`sqlôe3LóveMuãxAndClo£Zombõ
(
sqlôe3
*);

3700 
	`sqlôe3Ex¥IsC⁄°™t
(
Ex¥
*);

3701 
	`sqlôe3Ex¥IsC⁄°™tNŸJoö
(
Ex¥
*);

3702 
	`sqlôe3Ex¥IsC⁄°™tOrFun˘i⁄
(
Ex¥
*, 
u8
);

3703 
	`sqlôe3Ex¥IsTabÀC⁄°™t
(
Ex¥
*,);

3704 #ifde‡
SQLITE_ENABLE_CURSOR_HINTS


3705 
	`sqlôe3Ex¥C⁄èösSubquîy
(
Ex¥
*);

3707 
	`sqlôe3Ex¥IsI¡egî
(
Ex¥
*, *);

3708 
	`sqlôe3Ex¥C™BeNuŒ
(c⁄° 
Ex¥
*);

3709 
	`sqlôe3Ex¥NìdsNoAfföôyCh™ge
(c⁄° 
Ex¥
*, );

3710 
	`sqlôe3IsRowid
(const *);

3711 
	`sqlôe3Gíî©eRowDñëe
(

3712 
P¨£
*,
TabÀ
*,
Triggî
*,,,,
i16
,
u8
,u8,u8,);

3713 
	`sqlôe3Gíî©eRowIndexDñëe
(
P¨£
*, 
TabÀ
*, , , *, );

3714 
	`sqlôe3Gíî©eIndexKey
(
P¨£
*, 
Index
*, , , , *,Index*,);

3715 
	`sqlôe3ResﬁveP¨tIdxLabñ
(
P¨£
*,);

3716 
	`sqlôe3Gíî©eC⁄°øötChecks
(
P¨£
*,
TabÀ
*,*,,,,,

3717 
u8
,u8,,*,*);

3718 
	`sqlôe3Com∂ëeIn£πi⁄
(
P¨£
*,
TabÀ
*,,,,*,,,);

3719 
	`sqlôe3O≥nTabÀAndIndi˚s
(
P¨£
*, 
TabÀ
*, , 
u8
, , u8*, *, *);

3720 
	`sqlôe3BegöWrôeO≥øti⁄
(
P¨£
*, , );

3721 
	`sqlôe3Mu…iWrôe
(
P¨£
*);

3722 
	`sqlôe3MayAb‹t
(
P¨£
*);

3723 
	`sqlôe3HÆtC⁄°øöt
(
P¨£
*, , , *, 
i8
, 
u8
);

3724 
	`sqlôe3UniqueC⁄°øöt
(
P¨£
*, , 
Index
*);

3725 
	`sqlôe3RowidC⁄°øöt
(
P¨£
*, , 
TabÀ
*);

3726 
Ex¥
 *
	`sqlôe3Ex¥Dup
(
sqlôe3
*,Expr*,);

3727 
Ex¥Li°
 *
	`sqlôe3Ex¥Li°Dup
(
sqlôe3
*,ExprList*,);

3728 
SrcLi°
 *
	`sqlôe3SrcLi°Dup
(
sqlôe3
*,SrcList*,);

3729 
IdLi°
 *
	`sqlôe3IdLi°Dup
(
sqlôe3
*,IdList*);

3730 
Sñe˘
 *
	`sqlôe3Sñe˘Dup
(
sqlôe3
*,Select*,);

3731 #i‡
SELECTTRACE_ENABLED


3732 
	`sqlôe3Sñe˘SëName
(
Sñe˘
*,const *);

3734 
	#sqlôe3Sñe˘SëName
(
A
,
B
)

	)

3736 
	`sqlôe3In£πBuûtöFuncs
(
FuncDef
*,);

3737 
FuncDef
 *
	`sqlôe3FödFun˘i⁄
(
sqlôe3
*,c⁄° *,,
u8
,u8);

3738 
	`sqlôe3Regi°îBuûtöFun˘i⁄s
();

3739 
	`sqlôe3Regi°îD©eTimeFun˘i⁄s
();

3740 
	`sqlôe3Regi°îPîC⁄√˘i⁄BuûtöFun˘i⁄s
(
sqlôe3
*);

3741 
	`sqlôe3Sa„tyCheckOk
(
sqlôe3
*);

3742 
	`sqlôe3Sa„tyCheckSickOrOk
(
sqlôe3
*);

3743 
	`sqlôe3Ch™geCookõ
(
P¨£
*, );

3745 #i‡!
	`deföed
(
SQLITE_OMIT_VIEW
Ë&& !deföed(
SQLITE_OMIT_TRIGGER
)

3746 
	`sqlôe3M©îülizeVõw
(
P¨£
*, 
TabÀ
*, 
Ex¥
*, );

3749 #i‚de‡
SQLITE_OMIT_TRIGGER


3750 
	`sqlôe3BegöTriggî
(
P¨£
*, 
Tokí
*,Tokí*,,,
IdLi°
*,
SrcLi°
*,

3751 
Ex¥
*,, );

3752 
	`sqlôe3FöishTriggî
(
P¨£
*, 
TriggîSãp
*, 
Tokí
*);

3753 
	`sqlôe3Dr›Triggî
(
P¨£
*, 
SrcLi°
*, );

3754 
	`sqlôe3Dr›TriggîPå
(
P¨£
*, 
Triggî
*);

3755 
Triggî
 *
	`sqlôe3TriggîsExi°
(
P¨£
 *, 
TabÀ
*, , 
Ex¥Li°
*, *
pMask
);

3756 
Triggî
 *
	`sqlôe3TriggîLi°
(
P¨£
 *, 
TabÀ
 *);

3757 
	`sqlôe3CodeRowTriggî
(
P¨£
*, 
Triggî
 *, , 
Ex¥Li°
*, , 
TabÀ
 *,

3759 
	`sqlôe3CodeRowTriggîDúe˘
(
P¨£
 *, 
Triggî
 *, 
TabÀ
 *, , , );

3760 
	`sqlôeVõwTriggîs
(
P¨£
*, 
TabÀ
*, 
Ex¥
*, , 
Ex¥Li°
*);

3761 
	`sqlôe3DñëeTriggîSãp
(
sqlôe3
*, 
TriggîSãp
*);

3762 
TriggîSãp
 *
	`sqlôe3TriggîSñe˘Sãp
(
sqlôe3
*,
Sñe˘
*);

3763 
TriggîSãp
 *
	`sqlôe3TriggîIn£πSãp
(
sqlôe3
*,
Tokí
*, 
IdLi°
*,

3764 
Sñe˘
*,
u8
);

3765 
TriggîSãp
 *
	`sqlôe3TriggîUpd©eSãp
(
sqlôe3
*,
Tokí
*,
Ex¥Li°
*, 
Ex¥
*, 
u8
);

3766 
TriggîSãp
 *
	`sqlôe3TriggîDñëeSãp
(
sqlôe3
*,
Tokí
*, 
Ex¥
*);

3767 
	`sqlôe3DñëeTriggî
(
sqlôe3
*, 
Triggî
*);

3768 
	`sqlôe3U∆ökAndDñëeTriggî
(
sqlôe3
*,,const *);

3769 
u32
 
	`sqlôe3TriggîCﬁmask
(
P¨£
*,
Triggî
*,
Ex¥Li°
*,,,
TabÀ
*,);

3770 
	#sqlôe3P¨£T›Àvñ
(
p
Ë(’)->
pT›Àvñ
 ? (p)->pT›Àvñ : (p))

	)

3771 
	#sqlôe3IsT›Àvñ
(
p
Ë(’)->
pT›Àvñ
==0)

	)

3773 
	#sqlôe3TriggîsExi°
(
B
,
C
,
D
,
E
,
F
Ë0

	)

3774 
	#sqlôe3DñëeTriggî
(
A
,
B
)

	)

3775 
	#sqlôe3Dr›TriggîPå
(
A
,
B
)

	)

3776 
	#sqlôe3U∆ökAndDñëeTriggî
(
A
,
B
,
C
)

	)

3777 
	#sqlôe3CodeRowTriggî
(
A
,
B
,
C
,
D
,
E
,
F
,
G
,
H
,
I
)

	)

3778 
	#sqlôe3CodeRowTriggîDúe˘
(
A
,
B
,
C
,
D
,
E
,
F
)

	)

3779 
	#sqlôe3TriggîLi°
(
X
, 
Y
Ë0

	)

3780 
	#sqlôe3P¨£T›Àvñ
(
p
Ë
	)
p

3781 
	#sqlôe3IsT›Àvñ
(
p
Ë1

	)

3782 
	#sqlôe3TriggîCﬁmask
(
A
,
B
,
C
,
D
,
E
,
F
,
G
Ë0

	)

3785 
	`sqlôe3JoöTy≥
(
P¨£
*, 
Tokí
*, Token*, Token*);

3786 
	`sqlôe3Cª©eF‹eignKey
(
P¨£
*, 
Ex¥Li°
*, 
Tokí
*, ExprList*, );

3787 
	`sqlôe3De„rF‹eignKey
(
P¨£
*, );

3788 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


3789 
	`sqlôe3AuthRód
(
P¨£
*,
Ex¥
*,
Schema
*,
SrcLi°
*);

3790 
	`sqlôe3AuthCheck
(
P¨£
*,, const *, const *, const *);

3791 
	`sqlôe3AuthC⁄ãxtPush
(
P¨£
*, 
AuthC⁄ãxt
*, const *);

3792 
	`sqlôe3AuthC⁄ãxtP›
(
AuthC⁄ãxt
*);

3793 
	`sqlôe3AuthRódCﬁ
(
P¨£
*, const *, const *, );

3795 
	#sqlôe3AuthRód
(
a
,
b
,
c
,
d
)

	)

3796 
	#sqlôe3AuthCheck
(
a
,
b
,
c
,
d
,
e
Ë
SQLITE_OK


	)

3797 
	#sqlôe3AuthC⁄ãxtPush
(
a
,
b
,
c
)

	)

3798 
	#sqlôe3AuthC⁄ãxtP›
(
a
Ë(()◊))

	)

3800 
	`sqlôe3Aâach
(
P¨£
*, 
Ex¥
*, Expr*, Expr*);

3801 
	`sqlôe3Dëach
(
P¨£
*, 
Ex¥
*);

3802 
	`sqlôe3FixInô
(
DbFixî
*, 
P¨£
*, , c⁄° *, c⁄° 
Tokí
*);

3803 
	`sqlôe3FixSrcLi°
(
DbFixî
*, 
SrcLi°
*);

3804 
	`sqlôe3FixSñe˘
(
DbFixî
*, 
Sñe˘
*);

3805 
	`sqlôe3FixEx¥
(
DbFixî
*, 
Ex¥
*);

3806 
	`sqlôe3FixEx¥Li°
(
DbFixî
*, 
Ex¥Li°
*);

3807 
	`sqlôe3FixTriggîSãp
(
DbFixî
*, 
TriggîSãp
*);

3808 
	`sqlôe3AtoF
(c⁄° *
z
, *, , 
u8
);

3809 
	`sqlôe3GëI¡32
(const *, *);

3810 
	`sqlôe3Atoi
(const *);

3811 
	`sqlôe3Utf16ByãLí
(c⁄° *
pD©a
, 
nCh¨
);

3812 
	`sqlôe3Utf8Ch¨Lí
(c⁄° *
pD©a
, 
nByã
);

3813 
u32
 
	`sqlôe3Utf8Ród
(c⁄° 
u8
**);

3814 
LogE°
 
	`sqlôe3LogE°
(
u64
);

3815 
LogE°
 
	`sqlôe3LogE°Add
(LogEst,LogEst);

3816 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


3817 
LogE°
 
	`sqlôe3LogE°FromDoubÀ
();

3819 #i‡
	`deföed
(
SQLITE_ENABLE_STMT_SCANSTATUS
) || \

3820 
	`deföed
(
SQLITE_ENABLE_STAT3_OR_STAT4
) || \

3821 
	$deföed
(
SQLITE_EXPLAIN_ESTIMATED_ROWS
)

3822 
u64
 
	`sqlôe3LogE°ToI¡
(
LogE°
);

3830 
	`sqlôe3PutV¨öt
(*, 
u64
);

3831 
u8
 
	`sqlôe3GëV¨öt
(c⁄° *, 
u64
 *);

3832 
u8
 
	`sqlôe3GëV¨öt32
(c⁄° *, 
u32
 *);

3833 
	`sqlôe3V¨ötLí
(
u64
 
v
);

3840 
	#gëV¨öt32
(
A
,
B
) \

3841 (
u8
)((*(
A
)<(u8)0x80)?((
B
)=(
u32
)*(A)),1:
	`sqlôe3GëV¨öt32
((A),(u32 *)&(B)))

	)

3842 
	#putV¨öt32
(
A
,
B
) \

3843 (
u8
)(((
u32
)(
B
)<(u32)0x80)?(*(
A
)=()(B)),1:\

3844 
	`sqlôe3PutV¨öt
((
A
),(
B
)))

	)

3845 
	#gëV¨öt
 
sqlôe3GëV¨öt


	)

3846 
	#putV¨öt
 
sqlôe3PutV¨öt


	)

3849 c⁄° *
	`sqlôe3IndexAfföôySå
(
sqlôe3
*, 
Index
*);

3850 
	`sqlôe3TabÀAfföôy
(
Vdbe
*, 
TabÀ
*, );

3851 
	`sqlôe3Com∑ªAfföôy
(
Ex¥
 *
pEx¥
, 
aff2
);

3852 
	`sqlôe3IndexAfföôyOk
(
Ex¥
 *
pEx¥
, 
idx_afföôy
);

3853 
	`sqlôe3Ex¥Afföôy
(
Ex¥
 *
pEx¥
);

3854 
	`sqlôe3Atoi64
(c⁄° *, 
i64
*, , 
u8
);

3855 
	`sqlôe3DecOrHexToI64
(c⁄° *, 
i64
*);

3856 
	`sqlôe3Eº‹WôhMsg
(
sqlôe3
*, , const *,...);

3857 
	`sqlôe3Eº‹
(
sqlôe3
*,);

3858 
	`sqlôe3Sy°emEº‹
(
sqlôe3
*,);

3859 *
	`sqlôe3HexToBlob
(
sqlôe3
*, c⁄° *
z
, 
n
);

3860 
u8
 
	`sqlôe3HexToI¡
(
h
);

3861 
	`sqlôe3TwoP¨tName
(
P¨£
 *, 
Tokí
 *, Token *, Token **);

3863 #i‡
	`deföed
(
SQLITE_NEED_ERR_NAME
)

3864 c⁄° *
	`sqlôe3EºName
();

3867 c⁄° *
	`sqlôe3EºSå
();

3868 
	`sqlôe3RódSchema
(
P¨£
 *
pP¨£
);

3869 
CﬁlSeq
 *
	`sqlôe3FödCﬁlSeq
(
sqlôe3
*,
u8
 
íc
, const *,);

3870 
CﬁlSeq
 *
	`sqlôe3LoˇãCﬁlSeq
(
P¨£
 *
pP¨£
, c⁄° *
zName
);

3871 
CﬁlSeq
 *
	`sqlôe3Ex¥CﬁlSeq
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
);

3872 
Ex¥
 *
	`sqlôe3Ex¥AddCﬁœãTokí
(
P¨£
 *
pP¨£
, Ex¥*, c⁄° 
Tokí
*, );

3873 
Ex¥
 *
	`sqlôe3Ex¥AddCﬁœãSåög
(
P¨£
*,Expr*,const *);

3874 
Ex¥
 *
	`sqlôe3Ex¥SkùCﬁœã
(Expr*);

3875 
	`sqlôe3CheckCﬁlSeq
(
P¨£
 *, 
CﬁlSeq
 *);

3876 
	`sqlôe3CheckObje˘Name
(
P¨£
 *, const *);

3877 
	`sqlôe3VdbeSëCh™ges
(
sqlôe3
 *, );

3878 
	`sqlôe3AddI¡64
(
i64
*,i64);

3879 
	`sqlôe3SubI¡64
(
i64
*,i64);

3880 
	`sqlôe3MulI¡64
(
i64
*,i64);

3881 
	`sqlôe3AbsI¡32
();

3882 #ifde‡
SQLITE_ENABLE_8_3_NAMES


3883 
	`sqlôe3FûeSuffix3
(const *, *);

3885 
	#sqlôe3FûeSuffix3
(
X
,
Y
)

	)

3887 
u8
 
	`sqlôe3GëBoﬁón
(c⁄° *
z
,u8);

3889 c⁄° *
	`sqlôe3VÆueText
(
sqlôe3_vÆue
*, 
u8
);

3890 
	`sqlôe3VÆueByãs
(
sqlôe3_vÆue
*, 
u8
);

3891 
	`sqlôe3VÆueSëSå
(
sqlôe3_vÆue
*, , c⁄° *,
u8
,

3893 
	`sqlôe3VÆueSëNuŒ
(
sqlôe3_vÆue
*);

3894 
	`sqlôe3VÆueFªe
(
sqlôe3_vÆue
*);

3895 
sqlôe3_vÆue
 *
	`sqlôe3VÆueNew
(
sqlôe3
 *);

3896 *
	`sqlôe3Utf16to8
(
sqlôe3
 *, c⁄° *, , 
u8
);

3897 
	`sqlôe3VÆueFromEx¥
(
sqlôe3
 *, 
Ex¥
 *, 
u8
, u8, 
sqlôe3_vÆue
 **);

3898 
	`sqlôe3VÆueAµlyAfföôy
(
sqlôe3_vÆue
 *, 
u8
, u8);

3899 #i‚de‡
SQLITE_AMALGAMATION


3900 c⁄° 
sqlôe3OpcodePr›îty
[];

3901 c⁄° 
sqlôe3SåBINARY
[];

3902 c⁄° 
sqlôe3UµîToLowî
[];

3903 c⁄° 
sqlôe3Cty≥M≠
[];

3904 c⁄° 
Tokí
 
sqlôe3I¡Tokís
[];

3905 
SQLITE_WSD
 
Sqlôe3C⁄fig
 
sqlôe3C⁄fig
;

3906 
FuncDefHash
 
sqlôe3BuûtöFun˘i⁄s
;

3907 #i‚de‡
SQLITE_OMIT_WSD


3908 
sqlôe3PídögByã
;

3911 
	`sqlôe3RoŸPageMoved
(
sqlôe3
*, , , );

3912 
	`sqlôe3Reödex
(
P¨£
*, 
Tokí
*, Token*);

3913 
	`sqlôe3A…îFun˘i⁄s
();

3914 
	`sqlôe3A…îRíameTabÀ
(
P¨£
*, 
SrcLi°
*, 
Tokí
*);

3915 
	`sqlôe3GëTokí
(const *, *);

3916 
	`sqlôe3Ne°edP¨£
(
P¨£
*, const *, ...);

3917 
	`sqlôe3ExpúePª∑ªdSèãmíts
(
sqlôe3
*);

3918 
	`sqlôe3CodeSub£À˘
(
P¨£
 *, 
Ex¥
 *, , );

3919 
	`sqlôe3Sñe˘Pªp
(
P¨£
*, 
Sñe˘
*, 
NameC⁄ãxt
*);

3920 
	`sqlôe3Sñe˘Wr⁄gNumTîmsEº‹
(
P¨£
 *
pP¨£
, 
Sñe˘
 *
p
);

3921 
	`sqlôe3M©chS∑nName
(const *, const *, const *, const *);

3922 
	`sqlôe3ResﬁveEx¥Names
(
NameC⁄ãxt
*, 
Ex¥
*);

3923 
	`sqlôe3ResﬁveEx¥Li°Names
(
NameC⁄ãxt
*, 
Ex¥Li°
*);

3924 
	`sqlôe3ResﬁveSñe˘Names
(
P¨£
*, 
Sñe˘
*, 
NameC⁄ãxt
*);

3925 
	`sqlôe3ResﬁveSñfRe„ªn˚
(
P¨£
*,
TabÀ
*,,
Ex¥
*,
Ex¥Li°
*);

3926 
	`sqlôe3ResﬁveOrdîGroupBy
(
P¨£
*, 
Sñe˘
*, 
Ex¥Li°
*, const *);

3927 
	`sqlôe3CﬁumnDeÁu…
(
Vdbe
 *, 
TabÀ
 *, , );

3928 
	`sqlôe3A…îFöishAddCﬁumn
(
P¨£
 *, 
Tokí
 *);

3929 
	`sqlôe3A…îBegöAddCﬁumn
(
P¨£
 *, 
SrcLi°
 *);

3930 
CﬁlSeq
 *
	`sqlôe3GëCﬁlSeq
(
P¨£
*, 
u8
, CollSeq *, const *);

3931 
	`sqlôe3AfföôyTy≥
(c⁄° *, 
u8
*);

3932 
	`sqlôe3A«lyze
(
P¨£
*, 
Tokí
*, Token*);

3933 
	`sqlôe3InvokeBusyH™dÀr
(
BusyH™dÀr
*);

3934 
	`sqlôe3FödDb
(
sqlôe3
*, 
Tokí
*);

3935 
	`sqlôe3FödDbName
(
sqlôe3
 *, const *);

3936 
	`sqlôe3A«lysisLﬂd
(
sqlôe3
*,
iDB
);

3937 
	`sqlôe3DñëeIndexSam∂es
(
sqlôe3
*,
Index
*);

3938 
	`sqlôe3DeÁu…RowE°
(
Index
*);

3939 
	`sqlôe3Regi°îLikeFun˘i⁄s
(
sqlôe3
*, );

3940 
	`sqlôe3IsLikeFun˘i⁄
(
sqlôe3
*,
Ex¥
*,*,*);

3941 
	`sqlôe3SchemaCÀ¨
(*);

3942 
Schema
 *
	`sqlôe3SchemaGë
(
sqlôe3
 *, 
Båì
 *);

3943 
	`sqlôe3SchemaToIndex
(
sqlôe3
 *
db
, 
Schema
 *);

3944 
KeyInfo
 *
	`sqlôe3KeyInfoAŒoc
(
sqlôe3
*,,);

3945 
	`sqlôe3KeyInfoUƒef
(
KeyInfo
*);

3946 
KeyInfo
 *
	`sqlôe3KeyInfoRef
(KeyInfo*);

3947 
KeyInfo
 *
	`sqlôe3KeyInfoOfIndex
(
P¨£
*, 
Index
*);

3948 #ifde‡
SQLITE_DEBUG


3949 
	`sqlôe3KeyInfoIsWrôóbÀ
(
KeyInfo
*);

3951 
	`sqlôe3Cª©eFunc
(
sqlôe3
 *, const *, , , *,

3952 (*)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
 **),

3953 (*)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
 **), (*)(sqlite3_context*),

3954 
FuncDe°ru˘‹
 *
pDe°ru˘‹


3956 
	`sqlôe3OomFau…
(
sqlôe3
*);

3957 
	`sqlôe3OomCÀ¨
(
sqlôe3
*);

3958 
	`sqlôe3ApiExô
(
sqlôe3
 *
db
, );

3959 
	`sqlôe3O≥nTempD©aba£
(
P¨£
 *);

3961 
	`sqlôe3SåAccumInô
(
SåAccum
*, 
sqlôe3
*, *, , );

3962 
	`sqlôe3SåAccumAµíd
(
SåAccum
*,const *,);

3963 
	`sqlôe3SåAccumAµídAŒ
(
SåAccum
*,const *);

3964 
	`sqlôe3AµídCh¨
(
SåAccum
*,,);

3965 *
	`sqlôe3SåAccumFöish
(
SåAccum
*);

3966 
	`sqlôe3SåAccumRe£t
(
SåAccum
*);

3967 
	`sqlôe3Sñe˘De°Inô
(
Sñe˘De°
*,,);

3968 
Ex¥
 *
	`sqlôe3Cª©eCﬁumnEx¥
(
sqlôe3
 *, 
SrcLi°
 *, , );

3970 
	`sqlôe3BackupRe°¨t
(
sqlôe3_backup
 *);

3971 
	`sqlôe3BackupUpd©e
(
sqlôe3_backup
 *, 
Pgno
, c⁄° 
u8
 *);

3973 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


3974 
	`sqlôe3A«lyzeFun˘i⁄s
();

3975 
	`sqlôe3Sèt4ProbeSëVÆue
(
P¨£
*,
Index
*,
U≈ackedRec‹d
**,
Ex¥
*,
u8
,,*);

3976 
	`sqlôe3Sèt4VÆueFromEx¥
(
P¨£
*, 
Ex¥
*, 
u8
, 
sqlôe3_vÆue
**);

3977 
	`sqlôe3Sèt4ProbeFªe
(
U≈ackedRec‹d
*);

3978 
	`sqlôe3Sèt4Cﬁumn
(
sqlôe3
*, c⁄° *, , , 
sqlôe3_vÆue
**);

3984 *
	`sqlôe3P¨£rAŒoc
(*(*)(
u64
));

3985 
	`sqlôe3P¨£rFªe
(*, (*)(*));

3986 
	`sqlôe3P¨£r
(*, , 
Tokí
, 
P¨£
*);

3987 #ifde‡
YYTRACKMAXSTACKDEPTH


3988 
	`sqlôe3P¨£rSèckPók
(*);

3991 
	`sqlôe3AutoLﬂdExãnsi⁄s
(
sqlôe3
*);

3992 #i‚de‡
SQLITE_OMIT_LOAD_EXTENSION


3993 
	`sqlôe3Clo£Exãnsi⁄s
(
sqlôe3
*);

3995 
	#sqlôe3Clo£Exãnsi⁄s
(
X
)

	)

3998 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


3999 
	`sqlôe3TabÀLock
(
P¨£
 *, , , 
u8
, const *);

4001 
	#sqlôe3TabÀLock
(
v
,
w
,
x
,
y
,
z
)

	)

4004 #ifde‡
SQLITE_TEST


4005 
	`sqlôe3Utf8To8
(*);

4008 #ifde‡
SQLITE_OMIT_VIRTUALTABLE


4009 
	#sqlôe3VèbCÀ¨
(
Y
)

	)

4010 
	#sqlôe3VèbSync
(
X
,
Y
Ë
SQLITE_OK


	)

4011 
	#sqlôe3VèbRﬁlback
(
X
)

	)

4012 
	#sqlôe3VèbCommô
(
X
)

	)

4013 
	#sqlôe3VèbInSync
(
db
Ë0

	)

4014 
	#sqlôe3VèbLock
(
X
)

	)

4015 
	#sqlôe3VèbU∆ock
(
X
)

	)

4016 
	#sqlôe3VèbU∆ockLi°
(
X
)

	)

4017 
	#sqlôe3VèbSavïoöt
(
X
, 
Y
, 
Z
Ë
SQLITE_OK


	)

4018 
	#sqlôe3GëVTabÀ
(
X
,
Y
Ë((
VTabÀ
*)0)

	)

4020 
	`sqlôe3VèbCÀ¨
(
sqlôe3
 *
db
, 
TabÀ
*);

4021 
	`sqlôe3VèbDisc⁄√˘
(
sqlôe3
 *
db
, 
TabÀ
 *
p
);

4022 
	`sqlôe3VèbSync
(
sqlôe3
 *
db
, 
Vdbe
*);

4023 
	`sqlôe3VèbRﬁlback
(
sqlôe3
 *
db
);

4024 
	`sqlôe3VèbCommô
(
sqlôe3
 *
db
);

4025 
	`sqlôe3VèbLock
(
VTabÀ
 *);

4026 
	`sqlôe3VèbU∆ock
(
VTabÀ
 *);

4027 
	`sqlôe3VèbU∆ockLi°
(
sqlôe3
*);

4028 
	`sqlôe3VèbSavïoöt
(
sqlôe3
 *, , );

4029 
	`sqlôe3VèbImp‹tEºmsg
(
Vdbe
*, 
sqlôe3_vèb
*);

4030 
VTabÀ
 *
	`sqlôe3GëVTabÀ
(
sqlôe3
*, 
TabÀ
*);

4031 
	#sqlôe3VèbInSync
(
db
Ë((db)->
nVTøns
>0 && (db)->
aVTøns
==0)

	)

4033 
	`sqlôe3VèbEp⁄ymousTabÀInô
(
P¨£
*,
ModuÀ
*);

4034 
	`sqlôe3VèbEp⁄ymousTabÀCÀ¨
(
sqlôe3
*,
ModuÀ
*);

4035 
	`sqlôe3VèbMakeWrôabÀ
(
P¨£
*,
TabÀ
*);

4036 
	`sqlôe3VèbBegöP¨£
(
P¨£
*, 
Tokí
*, Token*, Token*, );

4037 
	`sqlôe3VèbFöishP¨£
(
P¨£
*, 
Tokí
*);

4038 
	`sqlôe3VèbArgInô
(
P¨£
*);

4039 
	`sqlôe3VèbArgExãnd
(
P¨£
*, 
Tokí
*);

4040 
	`sqlôe3VèbCÆlCª©e
(
sqlôe3
*, , const *, **);

4041 
	`sqlôe3VèbCÆlC⁄√˘
(
P¨£
*, 
TabÀ
*);

4042 
	`sqlôe3VèbCÆlDe°roy
(
sqlôe3
*, , const *);

4043 
	`sqlôe3VèbBegö
(
sqlôe3
 *, 
VTabÀ
 *);

4044 
FuncDef
 *
	`sqlôe3VèbOvîlﬂdFun˘i⁄
(
sqlôe3
 *,FuncDef*, 
nArg
, 
Ex¥
*);

4045 
	`sqlôe3InvÆidFun˘i⁄
(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**);

4046 
sqlôe3_öt64
 
	`sqlôe3StmtCuºítTime
(
sqlôe3_c⁄ãxt
*);

4047 
	`sqlôe3VdbeP¨amëîIndex
(
Vdbe
*, const *, );

4048 
	`sqlôe3Tøns„rBödögs
(
sqlôe3_°mt
 *, sqlite3_stmt *);

4049 
	`sqlôe3P¨£rRe£t
(
P¨£
*);

4050 
	`sqlôe3Rïª∑ª
(
Vdbe
*);

4051 
	`sqlôe3Ex¥Li°CheckLígth
(
P¨£
*, 
Ex¥Li°
*, const *);

4052 
CﬁlSeq
 *
	`sqlôe3Bö¨yCom∑ªCﬁlSeq
(
P¨£
 *, 
Ex¥
 *, Expr *);

4053 
	`sqlôe3TempInMem‹y
(c⁄° 
sqlôe3
*);

4054 c⁄° *
	`sqlôe3Jou∫ÆModíame
();

4055 #i‚de‡
SQLITE_OMIT_WAL


4056 
	`sqlôe3Checkpoöt
(
sqlôe3
*, , , *, *);

4057 
	`sqlôe3WÆDeÁu…Hook
(*,
sqlôe3
*,const *,);

4059 #i‚de‡
SQLITE_OMIT_CTE


4060 
Wôh
 *
	`sqlôe3WôhAdd
(
P¨£
*,Wôh*,
Tokí
*,
Ex¥Li°
*,
Sñe˘
*);

4061 
	`sqlôe3WôhDñëe
(
sqlôe3
*,
Wôh
*);

4062 
	`sqlôe3WôhPush
(
P¨£
*, 
Wôh
*, 
u8
);

4064 
	#sqlôe3WôhPush
(
x
,
y
,
z
)

	)

4065 
	#sqlôe3WôhDñëe
(
x
,
y
)

	)

4075 #i‡!
	`deföed
(
SQLITE_OMIT_FOREIGN_KEY
Ë&& !deföed(
SQLITE_OMIT_TRIGGER
)

4076 
	`sqlôe3FkCheck
(
P¨£
*, 
TabÀ
*, , , *, );

4077 
	`sqlôe3FkDr›TabÀ
(
P¨£
*, 
SrcLi°
 *, 
TabÀ
*);

4078 
	`sqlôe3FkA˘i⁄s
(
P¨£
*, 
TabÀ
*, 
Ex¥Li°
*, , *, );

4079 
	`sqlôe3FkRequúed
(
P¨£
*, 
TabÀ
*, *, );

4080 
u32
 
	`sqlôe3FkOldmask
(
P¨£
*, 
TabÀ
*);

4081 
FKey
 *
	`sqlôe3FkRe„ªn˚s
(
TabÀ
 *);

4083 
	#sqlôe3FkA˘i⁄s
(
a
,
b
,
c
,
d
,
e
,
f
)

	)

4084 
	#sqlôe3FkCheck
(
a
,
b
,
c
,
d
,
e
,
f
)

	)

4085 
	#sqlôe3FkDr›TabÀ
(
a
,
b
,
c
)

	)

4086 
	#sqlôe3FkOldmask
(
a
,
b
Ë0

	)

4087 
	#sqlôe3FkRequúed
(
a
,
b
,
c
,
d
Ë0

	)

4089 #i‚de‡
SQLITE_OMIT_FOREIGN_KEY


4090 
	`sqlôe3FkDñëe
(
sqlôe3
 *, 
TabÀ
*);

4091 
	`sqlôe3FkLoˇãIndex
(
P¨£
*,
TabÀ
*,
FKey
*,
Index
**,**);

4093 
	#sqlôe3FkDñëe
(
a
,
b
)

	)

4094 
	#sqlôe3FkLoˇãIndex
(
a
,
b
,
c
,
d
,
e
)

	)

4101 
	#SQLITE_FAULTINJECTOR_MALLOC
 0

	)

4102 
	#SQLITE_FAULTINJECTOR_COUNT
 1

	)

4109 #i‚de‡
SQLITE_OMIT_BUILTIN_TEST


4110 
	`sqlôe3BegöBíignMÆloc
();

4111 
	`sqlôe3EndBíignMÆloc
();

4113 
	#sqlôe3BegöBíignMÆloc
()

	)

4114 
	#sqlôe3EndBíignMÆloc
()

	)

4120 
	#IN_INDEX_ROWID
 1

	)

4121 
	#IN_INDEX_EPH
 2

	)

4122 
	#IN_INDEX_INDEX_ASC
 3

	)

4123 
	#IN_INDEX_INDEX_DESC
 4

	)

4124 
	#IN_INDEX_NOOP
 5

	)

4128 
	#IN_INDEX_NOOP_OK
 0x0001

	)

4129 
	#IN_INDEX_MEMBERSHIP
 0x0002

	)

4130 
	#IN_INDEX_LOOP
 0x0004

	)

4131 
	`sqlôe3FödInIndex
(
P¨£
 *, 
Ex¥
 *, 
u32
, *);

4133 
	`sqlôe3Jou∫ÆO≥n
(
sqlôe3_vfs
 *, c⁄° *, 
sqlôe3_fûe
 *, , );

4134 
	`sqlôe3Jou∫ÆSize
(
sqlôe3_vfs
 *);

4135 #ifde‡
SQLITE_ENABLE_ATOMIC_WRITE


4136 
	`sqlôe3Jou∫ÆCª©e
(
sqlôe3_fûe
 *);

4139 
	`sqlôe3Jou∫ÆIsInMem‹y
(
sqlôe3_fûe
 *
p
);

4140 
	`sqlôe3MemJou∫ÆO≥n
(
sqlôe3_fûe
 *);

4142 
	`sqlôe3Ex¥SëHeightAndFœgs
(
P¨£
 *
pP¨£
, 
Ex¥
 *
p
);

4143 #i‡
SQLITE_MAX_EXPR_DEPTH
>0

4144 
	`sqlôe3Sñe˘Ex¥Height
(
Sñe˘
 *);

4145 
	`sqlôe3Ex¥CheckHeight
(
P¨£
*, );

4147 
	#sqlôe3Sñe˘Ex¥Height
(
x
Ë0

	)

4148 
	#sqlôe3Ex¥CheckHeight
(
x
,
y
)

	)

4151 
u32
 
	`sqlôe3Gë4byã
(c⁄° 
u8
*);

4152 
	`sqlôe3Put4byã
(
u8
*, 
u32
);

4154 #ifde‡
SQLITE_ENABLE_UNLOCK_NOTIFY


4155 
	`sqlôe3C⁄√˘i⁄Blocked
(
sqlôe3
 *, sqlite3 *);

4156 
	`sqlôe3C⁄√˘i⁄U∆ocked
(
sqlôe3
 *
db
);

4157 
	`sqlôe3C⁄√˘i⁄Clo£d
(
sqlôe3
 *
db
);

4159 
	#sqlôe3C⁄√˘i⁄Blocked
(
x
,
y
)

	)

4160 
	#sqlôe3C⁄√˘i⁄U∆ocked
(
x
)

	)

4161 
	#sqlôe3C⁄√˘i⁄Clo£d
(
x
)

	)

4164 #ifde‡
SQLITE_DEBUG


4165 
	`sqlôe3P¨£rTø˚
(
FILE
*, *);

4173 #ifde‡
SQLITE_ENABLE_IOTRACE


4174 
	#IOTRACE
(
A
Ëif–
sqlôe3IoTø˚
 ){ sqlôe3IoTø˚ A; 
	}

	)
}

4175 
sqlôe3VdbeIOTø˚Sql
(
Vdbe
*);

4176 
SQLITE_API
 
SQLITE_EXTERN
 (
SQLITE_CDECL
 *
sqlôe3IoTø˚
)(const *,...);

4178 
	#IOTRACE
(
A
)

	)

4179 
	#sqlôe3VdbeIOTø˚Sql
(
X
)

	)

4210 #ifde‡
SQLITE_MEMDEBUG


4211 
	`sqlôe3MemdebugSëTy≥
(*,
u8
);

4212 
	`sqlôe3MemdebugHasTy≥
(*,
u8
);

4213 
	`sqlôe3MemdebugNoTy≥
(*,
u8
);

4215 
	#sqlôe3MemdebugSëTy≥
(
X
,
Y
Ë

	)

4216 
	#sqlôe3MemdebugHasTy≥
(
X
,
Y
Ë1

	)

4217 
	#sqlôe3MemdebugNoTy≥
(
X
,
Y
Ë1

	)

4219 
	#MEMTYPE_HEAP
 0x01

	)

4220 
	#MEMTYPE_LOOKASIDE
 0x02

	)

4221 
	#MEMTYPE_SCRATCH
 0x04

	)

4222 
	#MEMTYPE_PCACHE
 0x08

	)

4227 #i‡
SQLITE_MAX_WORKER_THREADS
>0

4228 
	`sqlôe3ThªadCª©e
(
SQLôeThªad
**,*(*)(*),*);

4229 
	`sqlôe3ThªadJoö
(
SQLôeThªad
*, **);

4232 #i‡
	`deföed
(
SQLITE_ENABLE_DBSTAT_VTAB
Ë|| deföed(
SQLITE_TEST
)

4233 
	`sqlôe3Db°©Regi°î
(
sqlôe3
*);

	@sqliteLimit.h

23 #i‚de‡
SQLITE_MAX_LENGTH


24 
	#SQLITE_MAX_LENGTH
 1000000000

	)

44 #i‚de‡
SQLITE_MAX_COLUMN


45 
	#SQLITE_MAX_COLUMN
 2000

	)

55 #i‚de‡
SQLITE_MAX_SQL_LENGTH


56 
	#SQLITE_MAX_SQL_LENGTH
 1000000000

	)

69 #i‚de‡
SQLITE_MAX_EXPR_DEPTH


70 
	#SQLITE_MAX_EXPR_DEPTH
 1000

	)

81 #i‚de‡
SQLITE_MAX_COMPOUND_SELECT


82 
	#SQLITE_MAX_COMPOUND_SELECT
 500

	)

89 #i‚de‡
SQLITE_MAX_VDBE_OP


90 
	#SQLITE_MAX_VDBE_OP
 25000

	)

96 #i‚de‡
SQLITE_MAX_FUNCTION_ARG


97 
	#SQLITE_MAX_FUNCTION_ARG
 127

	)

109 #i‚de‡
SQLITE_DEFAULT_CACHE_SIZE


110 
	#SQLITE_DEFAULT_CACHE_SIZE
 -2000

	)

117 #i‚de‡
SQLITE_DEFAULT_WAL_AUTOCHECKPOINT


118 
	#SQLITE_DEFAULT_WAL_AUTOCHECKPOINT
 1000

	)

127 #i‚de‡
SQLITE_MAX_ATTACHED


128 
	#SQLITE_MAX_ATTACHED
 10

	)

135 #i‚de‡
SQLITE_MAX_VARIABLE_NUMBER


136 
	#SQLITE_MAX_VARIABLE_NUMBER
 999

	)

150 #ifde‡
SQLITE_MAX_PAGE_SIZE


151 #unde‡
SQLITE_MAX_PAGE_SIZE


153 
	#SQLITE_MAX_PAGE_SIZE
 65536

	)

159 #i‚de‡
SQLITE_DEFAULT_PAGE_SIZE


160 
	#SQLITE_DEFAULT_PAGE_SIZE
 4096

	)

162 #i‡
SQLITE_DEFAULT_PAGE_SIZE
>
SQLITE_MAX_PAGE_SIZE


163 #unde‡
SQLITE_DEFAULT_PAGE_SIZE


164 
	#SQLITE_DEFAULT_PAGE_SIZE
 
SQLITE_MAX_PAGE_SIZE


	)

174 #i‚de‡
SQLITE_MAX_DEFAULT_PAGE_SIZE


175 
	#SQLITE_MAX_DEFAULT_PAGE_SIZE
 8192

	)

177 #i‡
SQLITE_MAX_DEFAULT_PAGE_SIZE
>
SQLITE_MAX_PAGE_SIZE


178 #unde‡
SQLITE_MAX_DEFAULT_PAGE_SIZE


179 
	#SQLITE_MAX_DEFAULT_PAGE_SIZE
 
SQLITE_MAX_PAGE_SIZE


	)

190 #i‚de‡
SQLITE_MAX_PAGE_COUNT


191 
	#SQLITE_MAX_PAGE_COUNT
 1073741823

	)

198 #i‚de‡
SQLITE_MAX_LIKE_PATTERN_LENGTH


199 
	#SQLITE_MAX_LIKE_PATTERN_LENGTH
 50000

	)

209 #i‚de‡
SQLITE_MAX_TRIGGER_DEPTH


210 
	#SQLITE_MAX_TRIGGER_DEPTH
 1000

	)

	@status.c

16 
	~"sqlôeI¡.h
"

17 
	~"vdbeI¡.h
"

22 #i‡
SQLITE_PTRSIZE
>4

23 
sqlôe3_öt64
 
	tsqlôe3SètVÆueTy≥
;

25 
u32
 
	tsqlôe3SètVÆueTy≥
;

27 
sqlôe3SètTy≥
 
	tsqlôe3SètTy≥
;

28 
SQLITE_WSD
 
	ssqlôe3SètTy≥
 {

29 
sqlôe3SètVÆueTy≥
 
	mnowVÆue
[10];

30 
sqlôe3SètVÆueTy≥
 
	mmxVÆue
[10];

31 } 
	gsqlôe3Sèt
 = { {0,}, {0,} };

37 c⁄° 
	g°©Muãx
[] = {

57 #ifde‡
SQLITE_OMIT_WSD


58 
	#wsdSètInô
 
sqlôe3SètTy≥
 *
x
 = &
	`GLOBAL
(sqlôe3SètTy≥,
sqlôe3Sèt
)

	)

59 
	#wsdSèt
 
x
[0]

	)

61 
	#wsdSètInô


	)

62 
	#wsdSèt
 
sqlôe3Sèt


	)

69 
sqlôe3_öt64
 
	$sqlôe3SètusVÆue
(
›
){

70 
wsdSètInô
;

71 
	`as£π
–
›
>=0 && op<
	`AºaySize
(
wsdSèt
.
nowVÆue
) );

72 
	`as£π
–
›
>=0 && op<
	`AºaySize
(
°©Muãx
) );

73 
	`as£π
–
	`sqlôe3_muãx_hñd
(
°©Muãx
[
›
] ? 
	`sqlôe3Pˇche1Muãx
()

74 : 
	`sqlôe3MÆlocMuãx
()) );

75  
wsdSèt
.
nowVÆue
[
›
];

76 
	}
}

89 
	$sqlôe3SètusUp
(
›
, 
N
){

90 
wsdSètInô
;

91 
	`as£π
–
›
>=0 && op<
	`AºaySize
(
wsdSèt
.
nowVÆue
) );

92 
	`as£π
–
›
>=0 && op<
	`AºaySize
(
°©Muãx
) );

93 
	`as£π
–
	`sqlôe3_muãx_hñd
(
°©Muãx
[
›
] ? 
	`sqlôe3Pˇche1Muãx
()

94 : 
	`sqlôe3MÆlocMuãx
()) );

95 
wsdSèt
.
nowVÆue
[
›
] +
N
;

96 if–
wsdSèt
.
nowVÆue
[
›
]>wsdSèt.
mxVÆue
[op] ){

97 
wsdSèt
.
mxVÆue
[
›
] = wsdSèt.
nowVÆue
[op];

99 
	}
}

100 
	$sqlôe3SètusDown
(
›
, 
N
){

101 
wsdSètInô
;

102 
	`as£π
–
N
>=0 );

103 
	`as£π
–
›
>=0 && op<
	`AºaySize
(
°©Muãx
) );

104 
	`as£π
–
	`sqlôe3_muãx_hñd
(
°©Muãx
[
›
] ? 
	`sqlôe3Pˇche1Muãx
()

105 : 
	`sqlôe3MÆlocMuãx
()) );

106 
	`as£π
–
›
>=0 && op<
	`AºaySize
(
wsdSèt
.
nowVÆue
) );

107 
wsdSèt
.
nowVÆue
[
›
] -
N
;

108 
	}
}

114 
	$sqlôe3SètusHighw©î
(
›
, 
X
){

115 
sqlôe3SètVÆueTy≥
 
√wVÆue
;

116 
wsdSètInô
;

117 
	`as£π
–
X
>=0 );

118 
√wVÆue
 = (
sqlôe3SètVÆueTy≥
)
X
;

119 
	`as£π
–
›
>=0 && op<
	`AºaySize
(
wsdSèt
.
nowVÆue
) );

120 
	`as£π
–
›
>=0 && op<
	`AºaySize
(
°©Muãx
) );

121 
	`as£π
–
	`sqlôe3_muãx_hñd
(
°©Muãx
[
›
] ? 
	`sqlôe3Pˇche1Muãx
()

122 : 
	`sqlôe3MÆlocMuãx
()) );

123 
	`as£π
–
›
==
SQLITE_STATUS_MALLOC_SIZE


124 || 
›
==
SQLITE_STATUS_PAGECACHE_SIZE


125 || 
›
==
SQLITE_STATUS_SCRATCH_SIZE


126 || 
›
==
SQLITE_STATUS_PARSER_STACK
 );

127 if–
√wVÆue
>
wsdSèt
.
mxVÆue
[
›
] ){

128 
wsdSèt
.
mxVÆue
[
›
] = 
√wVÆue
;

130 
	}
}

135 
	$sqlôe3_°©us64
(

136 
›
,

137 
sqlôe3_öt64
 *
pCuºít
,

138 
sqlôe3_öt64
 *
pHighw©î
,

139 
ª£tFœg


141 
sqlôe3_muãx
 *
pMuãx
;

142 
wsdSètInô
;

143 if–
›
<0 || op>=
	`AºaySize
(
wsdSèt
.
nowVÆue
) ){

144  
SQLITE_MISUSE_BKPT
;

146 #ifde‡
SQLITE_ENABLE_API_ARMOR


147 if–
pCuºít
==0 || 
pHighw©î
==0 )  
SQLITE_MISUSE_BKPT
;

149 
pMuãx
 = 
°©Muãx
[
›
] ? 
	`sqlôe3Pˇche1Muãx
(Ë: 
	`sqlôe3MÆlocMuãx
();

150 
	`sqlôe3_muãx_íãr
(
pMuãx
);

151 *
pCuºít
 = 
wsdSèt
.
nowVÆue
[
›
];

152 *
pHighw©î
 = 
wsdSèt
.
mxVÆue
[
›
];

153 if–
ª£tFœg
 ){

154 
wsdSèt
.
mxVÆue
[
›
] = wsdSèt.
nowVÆue
[op];

156 
	`sqlôe3_muãx_Àave
(
pMuãx
);

157 ()
pMuãx
;

158  
SQLITE_OK
;

159 
	}
}

160 
	$sqlôe3_°©us
(
›
, *
pCuºít
, *
pHighw©î
, 
ª£tFœg
){

161 
sqlôe3_öt64
 
iCur
, 
iHwå
;

162 
rc
;

163 #ifde‡
SQLITE_ENABLE_API_ARMOR


164 if–
pCuºít
==0 || 
pHighw©î
==0 )  
SQLITE_MISUSE_BKPT
;

166 
rc
 = 
	`sqlôe3_°©us64
(
›
, &
iCur
, &
iHwå
, 
ª£tFœg
);

167 if–
rc
==0 ){

168 *
pCuºít
 = ()
iCur
;

169 *
pHighw©î
 = ()
iHwå
;

171  
rc
;

172 
	}
}

177 
	$sqlôe3_db_°©us
(

178 
sqlôe3
 *
db
,

179 
›
,

180 *
pCuºít
,

181 *
pHighw©î
,

182 
ª£tFœg


184 
rc
 = 
SQLITE_OK
;

185 #ifde‡
SQLITE_ENABLE_API_ARMOR


186 if–!
	`sqlôe3Sa„tyCheckOk
(
db
Ë|| 
pCuºít
==0|| 
pHighw©î
==0 ){

187  
SQLITE_MISUSE_BKPT
;

190 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

191  
›
 ){

192 
SQLITE_DBSTATUS_LOOKASIDE_USED
: {

193 *
pCuºít
 = 
db
->
lookaside
.
nOut
;

194 *
pHighw©î
 = 
db
->
lookaside
.
mxOut
;

195 if–
ª£tFœg
 ){

196 
db
->
lookaside
.
mxOut
 = db->lookaside.
nOut
;

201 
SQLITE_DBSTATUS_LOOKASIDE_HIT
:

202 
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE
:

203 
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL
: {

204 
	`ã°ˇ£
–
›
==
SQLITE_DBSTATUS_LOOKASIDE_HIT
 );

205 
	`ã°ˇ£
–
›
==
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE
 );

206 
	`ã°ˇ£
–
›
==
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL
 );

207 
	`as£π
–(
›
-
SQLITE_DBSTATUS_LOOKASIDE_HIT
)>=0 );

208 
	`as£π
–(
›
-
SQLITE_DBSTATUS_LOOKASIDE_HIT
)<3 );

209 *
pCuºít
 = 0;

210 *
pHighw©î
 = 
db
->
lookaside
.
™Sèt
[
›
 - 
SQLITE_DBSTATUS_LOOKASIDE_HIT
];

211 if–
ª£tFœg
 ){

212 
db
->
lookaside
.
™Sèt
[
›
 - 
SQLITE_DBSTATUS_LOOKASIDE_HIT
] = 0;

222 
SQLITE_DBSTATUS_CACHE_USED
: {

223 
tŸÆU£d
 = 0;

224 
i
;

225 
	`sqlôe3BåìE¡îAŒ
(
db
);

226 
i
=0; i<
db
->
nDb
; i++){

227 
Båì
 *
pBt
 = 
db
->
aDb
[
i
].pBt;

228 if–
pBt
 ){

229 
Pagî
 *
pPagî
 = 
	`sqlôe3BåìPagî
(
pBt
);

230 
tŸÆU£d
 +
	`sqlôe3PagîMemU£d
(
pPagî
);

233 
	`sqlôe3BåìLóveAŒ
(
db
);

234 *
pCuºít
 = 
tŸÆU£d
;

235 *
pHighw©î
 = 0;

244 
SQLITE_DBSTATUS_SCHEMA_USED
: {

245 
i
;

246 
nByã
 = 0;

248 
	`sqlôe3BåìE¡îAŒ
(
db
);

249 
db
->
≤ByãsFªed
 = &
nByã
;

250 
i
=0; i<
db
->
nDb
; i++){

251 
Schema
 *
pSchema
 = 
db
->
aDb
[
i
].pSchema;

252 if–
	`ALWAYS
(
pSchema
!=0) ){

253 
HashEÀm
 *
p
;

255 
nByã
 +
sqlôe3GlobÆC⁄fig
.
m
.
	`xRoundup
((
HashEÀm
)) * (

256 
pSchema
->
tblHash
.
cou¡


257 + 
pSchema
->
åigHash
.
cou¡


258 + 
pSchema
->
idxHash
.
cou¡


259 + 
pSchema
->
fkeyHash
.
cou¡


261 
nByã
 +
	`sqlôe3_msize
(
pSchema
->
tblHash
.
ht
);

262 
nByã
 +
	`sqlôe3_msize
(
pSchema
->
åigHash
.
ht
);

263 
nByã
 +
	`sqlôe3_msize
(
pSchema
->
idxHash
.
ht
);

264 
nByã
 +
	`sqlôe3_msize
(
pSchema
->
fkeyHash
.
ht
);

266 
p
=
	`sqlôeHashFú°
(&
pSchema
->
åigHash
);Ö;Ö=
	`sqlôeHashNext
(p)){

267 
	`sqlôe3DñëeTriggî
(
db
, (
Triggî
*)
	`sqlôeHashD©a
(
p
));

269 
p
=
	`sqlôeHashFú°
(&
pSchema
->
tblHash
);Ö;Ö=
	`sqlôeHashNext
(p)){

270 
	`sqlôe3DñëeTabÀ
(
db
, (
TabÀ
 *)
	`sqlôeHashD©a
(
p
));

274 
db
->
≤ByãsFªed
 = 0;

275 
	`sqlôe3BåìLóveAŒ
(
db
);

277 *
pHighw©î
 = 0;

278 *
pCuºít
 = 
nByã
;

287 
SQLITE_DBSTATUS_STMT_USED
: {

288 
Vdbe
 *
pVdbe
;

289 
nByã
 = 0;

291 
db
->
≤ByãsFªed
 = &
nByã
;

292 
pVdbe
=
db
->pVdbe;ÖVdbe;ÖVdbeıVdbe->
pNext
){

293 
	`sqlôe3VdbeCÀ¨Obje˘
(
db
, 
pVdbe
);

294 
	`sqlôe3DbFªe
(
db
, 
pVdbe
);

296 
db
->
≤ByãsFªed
 = 0;

298 *
pHighw©î
 = 0;

299 *
pCuºít
 = 
nByã
;

309 
SQLITE_DBSTATUS_CACHE_HIT
:

310 
SQLITE_DBSTATUS_CACHE_MISS
:

311 
SQLITE_DBSTATUS_CACHE_WRITE
:{

312 
i
;

313 
nRë
 = 0;

314 
	`as£π
–
SQLITE_DBSTATUS_CACHE_MISS
==
SQLITE_DBSTATUS_CACHE_HIT
+1 );

315 
	`as£π
–
SQLITE_DBSTATUS_CACHE_WRITE
==
SQLITE_DBSTATUS_CACHE_HIT
+2 );

317 
i
=0; i<
db
->
nDb
; i++){

318 if–
db
->
aDb
[
i
].
pBt
 ){

319 
Pagî
 *
pPagî
 = 
	`sqlôe3BåìPagî
(
db
->
aDb
[
i
].
pBt
);

320 
	`sqlôe3PagîCacheSèt
(
pPagî
, 
›
, 
ª£tFœg
, &
nRë
);

323 *
pHighw©î
 = 0;

326 *
pCuºít
 = 
nRë
;

334 
SQLITE_DBSTATUS_DEFERRED_FKS
: {

335 *
pHighw©î
 = 0;

336 *
pCuºít
 = 
db
->
nDe„ºedImmC⁄s
>0 || db->
nDe„ºedC⁄s
>0;

341 
rc
 = 
SQLITE_ERROR
;

344 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

345  
rc
;

346 
	}
}

	@table.c

19 
	~"sqlôeI¡.h
"

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 #i‚de‡
SQLITE_OMIT_GET_TABLE


29 
	sTabResu…
 {

30 **
	mazResu…
;

31 *
	mzEºMsg
;

32 
u32
 
	mnAŒoc
;

33 
u32
 
	mnRow
;

34 
u32
 
	mnCﬁumn
;

35 
u32
 
	mnD©a
;

36 
	mrc
;

37 } 
	tTabResu…
;

44 
	$sqlôe3_gë_èbÀ_cb
(*
pArg
, 
nCﬁ
, **
¨gv
, **
cﬁv
){

45 
TabResu…
 *
p
 = (TabResu…*)
pArg
;

46 
√ed
;

47 
i
;

48 *
z
;

53 if–
p
->
nRow
==0 && 
¨gv
!=0 ){

54 
√ed
 = 
nCﬁ
*2;

56 
√ed
 = 
nCﬁ
;

58 if–
p
->
nD©a
 + 
√ed
 >Ö->
nAŒoc
 ){

59 **
azNew
;

60 
p
->
nAŒoc
 =Ö->nAŒoc*2 + 
√ed
;

61 
azNew
 = 
	`sqlôe3_ªÆloc64
–
p
->
azResu…
, (*)*p->
nAŒoc
 );

62 if–
azNew
==0 ) 
mÆloc_Áûed
;

63 
p
->
azResu…
 = 
azNew
;

69 if–
p
->
nRow
==0 ){

70 
p
->
nCﬁumn
 = 
nCﬁ
;

71 
i
=0; i<
nCﬁ
; i++){

72 
z
 = 
	`sqlôe3_m¥ötf
("%s", 
cﬁv
[
i
]);

73 if–
z
==0 ) 
mÆloc_Áûed
;

74 
p
->
azResu…
[p->
nD©a
++] = 
z
;

76 }if–()
p
->
nCﬁumn
!=
nCﬁ
 ){

77 
	`sqlôe3_‰ì
(
p
->
zEºMsg
);

78 
p
->
zEºMsg
 = 
	`sqlôe3_m¥ötf
(

81 
p
->
rc
 = 
SQLITE_ERROR
;

87 if–
¨gv
!=0 ){

88 
i
=0; i<
nCﬁ
; i++){

89 if–
¨gv
[
i
]==0 ){

90 
z
 = 0;

92 
n
 = 
	`sqlôe3SåÀn30
(
¨gv
[
i
])+1;

93 
z
 = 
	`sqlôe3_mÆloc64
–
n
 );

94 if–
z
==0 ) 
mÆloc_Áûed
;

95 
	`mem˝y
(
z
, 
¨gv
[
i
], 
n
);

97 
p
->
azResu…
[p->
nD©a
++] = 
z
;

99 
p
->
nRow
++;

103 
mÆloc_Áûed
:

104 
p
->
rc
 = 
SQLITE_NOMEM_BKPT
;

106 
	}
}

118 
	$sqlôe3_gë_èbÀ
(

119 
sqlôe3
 *
db
,

120 c⁄° *
zSql
,

121 ***
∑zResu…
,

122 *
≤Row
,

123 *
≤Cﬁumn
,

124 **
pzEºMsg


126 
rc
;

127 
TabResu…
 
ªs
;

129 #ifde‡
SQLITE_ENABLE_API_ARMOR


130 if–!
	`sqlôe3Sa„tyCheckOk
(
db
Ë|| 
∑zResu…
==0 )  
SQLITE_MISUSE_BKPT
;

132 *
∑zResu…
 = 0;

133 if–
≤Cﬁumn
 ) *pnColumn = 0;

134 if–
≤Row
 ) *pnRow = 0;

135 if–
pzEºMsg
 ) *pzErrMsg = 0;

136 
ªs
.
zEºMsg
 = 0;

137 
ªs
.
nRow
 = 0;

138 
ªs
.
nCﬁumn
 = 0;

139 
ªs
.
nD©a
 = 1;

140 
ªs
.
nAŒoc
 = 20;

141 
ªs
.
rc
 = 
SQLITE_OK
;

142 
ªs
.
azResu…
 = 
	`sqlôe3_mÆloc64
((*)*ªs.
nAŒoc
 );

143 if–
ªs
.
azResu…
==0 ){

144 
db
->
îrCode
 = 
SQLITE_NOMEM
;

145  
SQLITE_NOMEM_BKPT
;

147 
ªs
.
azResu…
[0] = 0;

148 
rc
 = 
	`sqlôe3_exec
(
db
, 
zSql
, 
sqlôe3_gë_èbÀ_cb
, &
ªs
, 
pzEºMsg
);

149 
	`as£π
–(
ªs
.
azResu…
[0])>‘es.
nD©a
) );

150 
ªs
.
azResu…
[0] = 
	`SQLITE_INT_TO_PTR
‘es.
nD©a
);

151 if–(
rc
&0xff)==
SQLITE_ABORT
 ){

152 
	`sqlôe3_‰ì_èbÀ
(&
ªs
.
azResu…
[1]);

153 if–
ªs
.
zEºMsg
 ){

154 if–
pzEºMsg
 ){

155 
	`sqlôe3_‰ì
(*
pzEºMsg
);

156 *
pzEºMsg
 = 
	`sqlôe3_m¥ötf
("%s",
ªs
.
zEºMsg
);

158 
	`sqlôe3_‰ì
(
ªs
.
zEºMsg
);

160 
db
->
îrCode
 = 
ªs
.
rc
;

161  
ªs
.
rc
;

163 
	`sqlôe3_‰ì
(
ªs
.
zEºMsg
);

164 if–
rc
!=
SQLITE_OK
 ){

165 
	`sqlôe3_‰ì_èbÀ
(&
ªs
.
azResu…
[1]);

166  
rc
;

168 if–
ªs
.
nAŒoc
>ªs.
nD©a
 ){

169 **
azNew
;

170 
azNew
 = 
	`sqlôe3_ªÆloc64
–
ªs
.
azResu…
, (*)*ªs.
nD©a
 );

171 if–
azNew
==0 ){

172 
	`sqlôe3_‰ì_èbÀ
(&
ªs
.
azResu…
[1]);

173 
db
->
îrCode
 = 
SQLITE_NOMEM
;

174  
SQLITE_NOMEM_BKPT
;

176 
ªs
.
azResu…
 = 
azNew
;

178 *
∑zResu…
 = &
ªs
.
azResu…
[1];

179 if–
≤Cﬁumn
 ) *≤Cﬁum¿
ªs
.
nCﬁumn
;

180 if–
≤Row
 ) *≤Row = 
ªs
.
nRow
;

181  
rc
;

182 
	}
}

187 
	$sqlôe3_‰ì_èbÀ
(

188 **
azResu…


190 if–
azResu…
 ){

191 
i
, 
n
;

192 
azResu…
--;

193 
	`as£π
–
azResu…
!=0 );

194 
n
 = 
	`SQLITE_PTR_TO_INT
(
azResu…
[0]);

195 
i
=1; i<
n
; i++){ if–
azResu…
[i] ) 
	`sqlôe3_‰ì
(azResult[i]); }

196 
	`sqlôe3_‰ì
(
azResu…
);

198 
	}
}

	@tclsqlite.c

32 #i‡
deföed
(
INCLUDE_MSVC_H
)

33 
	~"msvc.h
"

36 
	~"t˛.h
"

37 
	~<î∫o.h
>

43 #i‚de‡
SQLITE_AMALGAMATION


44 
	~"sqlôe3.h
"

45 
	~<°dlib.h
>

46 
	~<°rög.h
>

47 
	~<as£π.h
>

48 
	tu8
;

50 
	~<˘y≥.h
>

53 #i‡!
deföed
(
_WIN32
)

54 
	~<uni°d.h
>

55 
	#GETPID
 
gëpid


	)

56 #ñi‡!
deföed
(
_WIN32_WCE
)

57 #i‚de‡
SQLITE_AMALGAMATION


58 
	#WIN32_LEAN_AND_MEAN


	)

59 
	~<wödows.h
>

61 
	#GETPID
 ()
GëCuºítPro˚ssId


	)

68 #ifde‡
BUILD_sqlôe


69 #unde‡
TCL_STORAGE_CLASS


70 
	#TCL_STORAGE_CLASS
 
DLLEXPORT


	)

73 
	#NUM_PREPARED_STMTS
 10

	)

74 
	#MAX_PREPARED_STMTS
 100

	)

77 
SqlôeDb
 
	tSqlôeDb
;

83 
SqlFunc
 
	tSqlFunc
;

84 
	sSqlFunc
 {

85 
T˛_I¡îp
 *
	möãΩ
;

86 
T˛_Obj
 *
	mpS¸ùt
;

87 
SqlôeDb
 *
	mpDb
;

88 
	mu£EvÆObjv
;

89 *
	mzName
;

90 
SqlFunc
 *
	mpNext
;

97 
SqlCﬁœã
 
	tSqlCﬁœã
;

98 
	sSqlCﬁœã
 {

99 
T˛_I¡îp
 *
	möãΩ
;

100 *
	mzS¸ùt
;

101 
SqlCﬁœã
 *
	mpNext
;

108 
SqlPª∑ªdStmt
 
	tSqlPª∑ªdStmt
;

109 
	sSqlPª∑ªdStmt
 {

110 
SqlPª∑ªdStmt
 *
	mpNext
;

111 
SqlPª∑ªdStmt
 *
	mpPªv
;

112 
sqlôe3_°mt
 *
	mpStmt
;

113 
	mnSql
;

114 c⁄° *
	mzSql
;

115 
	mnP¨m
;

116 
T˛_Obj
 **
	m≠P¨m
;

119 
In¸blobCh™√l
 
	tIn¸blobCh™√l
;

130 
	sSqlôeDb
 {

131 
sqlôe3
 *
	mdb
;

132 
T˛_I¡îp
 *
	möãΩ
;

133 *
	mzBusy
;

134 *
	mzCommô
;

135 *
	mzTø˚
;

136 *
	mzProfûe
;

137 *
	mzProgªss
;

138 *
	mzAuth
;

139 
	mdißbÀAuth
;

140 *
	mzNuŒ
;

141 
SqlFunc
 *
	mpFunc
;

142 
T˛_Obj
 *
	mpUpd©eHook
;

143 
T˛_Obj
 *
	mpPªUpd©eHook
;

144 
T˛_Obj
 *
	mpRﬁlbackHook
;

145 
T˛_Obj
 *
	mpWÆHook
;

146 
T˛_Obj
 *
	mpU∆ockNŸify
;

147 
SqlCﬁœã
 *
	mpCﬁœã
;

148 
	mrc
;

149 
T˛_Obj
 *
	mpCﬁœãNìded
;

150 
SqlPª∑ªdStmt
 *
	m°mtLi°
;

151 
SqlPª∑ªdStmt
 *
	m°mtLa°
;

152 
	mmaxStmt
;

153 
	mnStmt
;

154 
In¸blobCh™√l
 *
	mpIn¸blob
;

155 
	mnSãp
, 
	mnS‹t
, 
	mnIndex
;

156 
	mnTønß˘i⁄
;

157 
	m›íFœgs
;

158 #ifde‡
SQLITE_TEST


159 
	mbLegacyPª∑ª
;

163 
	sIn¸blobCh™√l
 {

164 
sqlôe3_blob
 *
	mpBlob
;

165 
SqlôeDb
 *
	mpDb
;

166 
	miSìk
;

167 
T˛_Ch™√l
 
	mch™√l
;

168 
In¸blobCh™√l
 *
	mpNext
;

169 
In¸blobCh™√l
 *
	mpPªv
;

176 
	$°æí30
(c⁄° *
z
){

177 c⁄° *
z2
 = 
z
;

178  *
z2
 ){ z2++; }

179  0x3ffffff‡& ()(
z2
 - 
z
);

180 
	}
}

183 #i‚de‡
SQLITE_OMIT_INCRBLOB


188 
	$˛o£In¸blobCh™√ls
(
SqlôeDb
 *
pDb
){

189 
In¸blobCh™√l
 *
p
;

190 
In¸blobCh™√l
 *
pNext
;

192 
p
=
pDb
->
pIn¸blob
;Ö;Ö=
pNext
){

193 
pNext
 = 
p
->pNext;

199 
	`T˛_Uƒegi°îCh™√l
(
pDb
->
öãΩ
, 
p
->
ch™√l
);

201 
	}
}

206 
	$ö¸blobClo£
(
Clõ¡D©a
 
ö°™˚D©a
, 
T˛_I¡îp
 *
öãΩ
){

207 
In¸blobCh™√l
 *
p
 = (In¸blobCh™√»*)
ö°™˚D©a
;

208 
rc
 = 
	`sqlôe3_blob_˛o£
(
p
->
pBlob
);

209 
sqlôe3
 *
db
 = 
p
->
pDb
->db;

212 if–
p
->
pNext
 ){

213 
p
->
pNext
->
pPªv
 =Ö->pPrev;

215 if–
p
->
pPªv
 ){

216 
p
->
pPªv
->
pNext
 =Ö->pNext;

218 if–
p
->
pDb
->
pIn¸blob
==p ){

219 
p
->
pDb
->
pIn¸blob
 =Ö->
pNext
;

223 
	`T˛_Fªe
((*)
p
);

225 if–
rc
!=
SQLITE_OK
 ){

226 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3_îrmsg
(
db
), 
TCL_VOLATILE
);

227  
TCL_ERROR
;

229  
TCL_OK
;

230 
	}
}

235 
	$ö¸blobI≈ut
(

236 
Clõ¡D©a
 
ö°™˚D©a
,

237 *
buf
,

238 
bufSize
,

239 *
îr‹CodePå


241 
In¸blobCh™√l
 *
p
 = (In¸blobCh™√»*)
ö°™˚D©a
;

242 
nRód
 = 
bufSize
;

243 
nBlob
;

244 
rc
;

246 
nBlob
 = 
	`sqlôe3_blob_byãs
(
p
->
pBlob
);

247 if–(
p
->
iSìk
+
nRód
)>
nBlob
 ){

248 
nRód
 = 
nBlob
-
p
->
iSìk
;

250 if–
nRód
<=0 ){

254 
rc
 = 
	`sqlôe3_blob_ªad
(
p
->
pBlob
, (*)
buf
, 
nRód
,Ö->
iSìk
);

255 if–
rc
!=
SQLITE_OK
 ){

256 *
îr‹CodePå
 = 
rc
;

260 
p
->
iSìk
 +
nRód
;

261  
nRód
;

262 
	}
}

267 
	$ö¸blobOuçut
(

268 
Clõ¡D©a
 
ö°™˚D©a
,

269 
CONST
 *
buf
,

270 
toWrôe
,

271 *
îr‹CodePå


273 
In¸blobCh™√l
 *
p
 = (In¸blobCh™√»*)
ö°™˚D©a
;

274 
nWrôe
 = 
toWrôe
;

275 
nBlob
;

276 
rc
;

278 
nBlob
 = 
	`sqlôe3_blob_byãs
(
p
->
pBlob
);

279 if–(
p
->
iSìk
+
nWrôe
)>
nBlob
 ){

280 *
îr‹CodePå
 = 
EINVAL
;

283 if–
nWrôe
<=0 ){

287 
rc
 = 
	`sqlôe3_blob_wrôe
(
p
->
pBlob
, (*)
buf
, 
nWrôe
,Ö->
iSìk
);

288 if–
rc
!=
SQLITE_OK
 ){

289 *
îr‹CodePå
 = 
EIO
;

293 
p
->
iSìk
 +
nWrôe
;

294  
nWrôe
;

295 
	}
}

300 
	$ö¸blobSìk
(

301 
Clõ¡D©a
 
ö°™˚D©a
,

302 
off£t
,

303 
£ekMode
,

304 *
îr‹CodePå


306 
In¸blobCh™√l
 *
p
 = (In¸blobCh™√»*)
ö°™˚D©a
;

308  
£ekMode
 ){

309 
SEEK_SET
:

310 
p
->
iSìk
 = 
off£t
;

312 
SEEK_CUR
:

313 
p
->
iSìk
 +
off£t
;

315 
SEEK_END
:

316 
p
->
iSìk
 = 
	`sqlôe3_blob_byãs
’->
pBlob
Ë+ 
off£t
;

319 : 
	`as£π
(!"Bad seekMode");

322  
p
->
iSìk
;

323 
	}
}

326 
	$ö¸blobW©ch
(
Clõ¡D©a
 
ö°™˚D©a
, 
mode
){

328 
	}
}

329 
	$ö¸blobH™dÀ
(
Clõ¡D©a
 
ö°™˚D©a
, 
dú
, Clõ¡D©®*
hPå
){

330  
TCL_ERROR
;

331 
	}
}

333 
T˛_Ch™√lTy≥
 
	gIn¸blobCh™√lTy≥
 = {

335 
TCL_CHANNEL_VERSION_2
,

336 
ö¸blobClo£
,

337 
ö¸blobI≈ut
,

338 
ö¸blobOuçut
,

339 
ö¸blobSìk
,

342 
ö¸blobW©ch
,

343 
ö¸blobH™dÀ
,

354 
	$¸óãIn¸blobCh™√l
(

355 
T˛_I¡îp
 *
öãΩ
,

356 
SqlôeDb
 *
pDb
,

357 c⁄° *
zDb
,

358 c⁄° *
zTabÀ
,

359 c⁄° *
zCﬁumn
,

360 
sqlôe_öt64
 
iRow
,

361 
isRód⁄ly


363 
In¸blobCh™√l
 *
p
;

364 
sqlôe3
 *
db
 = 
pDb
->db;

365 
sqlôe3_blob
 *
pBlob
;

366 
rc
;

367 
Êags
 = 
TCL_READABLE
|(
isRód⁄ly
 ? 0 : 
TCL_WRITABLE
);

370 
cou¡
 = 0;

371 
zCh™√l
[64];

373 
rc
 = 
	`sqlôe3_blob_›í
(
db
, 
zDb
, 
zTabÀ
, 
zCﬁumn
, 
iRow
, !
isRód⁄ly
, &
pBlob
);

374 if–
rc
!=
SQLITE_OK
 ){

375 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3_îrmsg
(
pDb
->
db
), 
TCL_VOLATILE
);

376  
TCL_ERROR
;

379 
p
 = (
In¸blobCh™√l
 *)
	`T˛_AŒoc
((IncrblobChannel));

380 
p
->
iSìk
 = 0;

381 
p
->
pBlob
 =ÖBlob;

383 
	`sqlôe3_¢¥ötf
((
zCh™√l
), zCh™√l, "ö¸blob_%d", ++
cou¡
);

384 
p
->
ch™√l
 = 
	`T˛_Cª©eCh™√l
(&
In¸blobCh™√lTy≥
, 
zCh™√l
,Ö, 
Êags
);

385 
	`T˛_Regi°îCh™√l
(
öãΩ
, 
p
->
ch™√l
);

388 
p
->
pNext
 = 
pDb
->
pIn¸blob
;

389 
p
->
pPªv
 = 0;

390 if–
p
->
pNext
 ){

391 
p
->
pNext
->
pPªv
 =Ö;

393 
pDb
->
pIn¸blob
 = 
p
;

394 
p
->
pDb
 =ÖDb;

396 
	`T˛_SëResu…
(
öãΩ
, (*)
	`T˛_GëCh™√lName
(
p
->
ch™√l
), 
TCL_VOLATILE
);

397  
TCL_OK
;

398 
	}
}

400 
	#˛o£In¸blobCh™√ls
(
pDb
)

	)

415 
	$ß„ToU£EvÆObjv
(
T˛_I¡îp
 *
öãΩ
, 
T˛_Obj
 *
pCmd
){

420 c⁄° *
z
;

421 
n
;

422 
z
 = 
	`T˛_GëSåögFromObj
(
pCmd
, &
n
);

423  
n
-- > 0 ){

424 
c
 = *(
z
++);

425 if–
c
=='$' || c=='[' || c==';' )  0;

428 
	}
}

435 
SqlFunc
 *
	$födSqlFunc
(
SqlôeDb
 *
pDb
, c⁄° *
zName
){

436 
SqlFunc
 *
p
, *
pNew
;

437 
nName
 = 
	`°æí30
(
zName
);

438 
pNew
 = (
SqlFunc
*)
	`T˛_AŒoc
–(*pNewË+ 
nName
 + 1 );

439 
pNew
->
zName
 = (*)&pNew[1];

440 
	`mem˝y
(
pNew
->
zName
, zName, 
nName
+1);

441 
p
=
pDb
->
pFunc
;Ö;Öı->
pNext
){

442 if–
	`sqlôe3_°ricmp
(
p
->
zName
, 
pNew
->zName)==0 ){

443 
	`T˛_Fªe
((*)
pNew
);

444  
p
;

447 
pNew
->
öãΩ
 = 
pDb
->interp;

448 
pNew
->
pDb
 =ÖDb;

449 
pNew
->
pS¸ùt
 = 0;

450 
pNew
->
pNext
 = 
pDb
->
pFunc
;

451 
pDb
->
pFunc
 = 
pNew
;

452  
pNew
;

453 
	}
}

458 
	$dbFªeStmt
(
SqlPª∑ªdStmt
 *
pStmt
){

459 #ifde‡
SQLITE_TEST


460 if–
	`sqlôe3_sql
(
pStmt
->pStmt)==0 ){

461 
	`T˛_Fªe
((*)
pStmt
->
zSql
);

464 
	`sqlôe3_föÆize
(
pStmt
->pStmt);

465 
	`T˛_Fªe
((*)
pStmt
);

466 
	}
}

471 
	$ÊushStmtCache
(
SqlôeDb
 *
pDb
){

472 
SqlPª∑ªdStmt
 *
pPªStmt
;

473 
SqlPª∑ªdStmt
 *
pNext
;

475 
pPªStmt
 = 
pDb
->
°mtLi°
;ÖPªStmt;ÖPªStmt=
pNext
){

476 
pNext
 = 
pPªStmt
->pNext;

477 
	`dbFªeStmt
(
pPªStmt
);

479 
pDb
->
nStmt
 = 0;

480 
pDb
->
°mtLa°
 = 0;

481 
pDb
->
°mtLi°
 = 0;

482 
	}
}

488 
	$DbDñëeCmd
(*
db
){

489 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
db
;

490 
	`ÊushStmtCache
(
pDb
);

491 
	`˛o£In¸blobCh™√ls
(
pDb
);

492 
	`sqlôe3_˛o£
(
pDb
->
db
);

493  
pDb
->
pFunc
 ){

494 
SqlFunc
 *
pFunc
 = 
pDb
->pFunc;

495 
pDb
->
pFunc
 =ÖFunc->
pNext
;

496 
	`as£π
–
pFunc
->
pDb
==pDb );

497 
	`T˛_De¸RefCou¡
(
pFunc
->
pS¸ùt
);

498 
	`T˛_Fªe
((*)
pFunc
);

500  
pDb
->
pCﬁœã
 ){

501 
SqlCﬁœã
 *
pCﬁœã
 = 
pDb
->pCollate;

502 
pDb
->
pCﬁœã
 =ÖCﬁœã->
pNext
;

503 
	`T˛_Fªe
((*)
pCﬁœã
);

505 if–
pDb
->
zBusy
 ){

506 
	`T˛_Fªe
(
pDb
->
zBusy
);

508 if–
pDb
->
zTø˚
 ){

509 
	`T˛_Fªe
(
pDb
->
zTø˚
);

511 if–
pDb
->
zProfûe
 ){

512 
	`T˛_Fªe
(
pDb
->
zProfûe
);

514 if–
pDb
->
zAuth
 ){

515 
	`T˛_Fªe
(
pDb
->
zAuth
);

517 if–
pDb
->
zNuŒ
 ){

518 
	`T˛_Fªe
(
pDb
->
zNuŒ
);

520 if–
pDb
->
pUpd©eHook
 ){

521 
	`T˛_De¸RefCou¡
(
pDb
->
pUpd©eHook
);

523 if–
pDb
->
pPªUpd©eHook
 ){

524 
	`T˛_De¸RefCou¡
(
pDb
->
pPªUpd©eHook
);

526 if–
pDb
->
pRﬁlbackHook
 ){

527 
	`T˛_De¸RefCou¡
(
pDb
->
pRﬁlbackHook
);

529 if–
pDb
->
pWÆHook
 ){

530 
	`T˛_De¸RefCou¡
(
pDb
->
pWÆHook
);

532 if–
pDb
->
pCﬁœãNìded
 ){

533 
	`T˛_De¸RefCou¡
(
pDb
->
pCﬁœãNìded
);

535 
	`T˛_Fªe
((*)
pDb
);

536 
	}
}

542 
	$DbBusyH™dÀr
(*
cd
, 
nTrõs
){

543 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
cd
;

544 
rc
;

545 
zVÆ
[30];

547 
	`sqlôe3_¢¥ötf
((
zVÆ
), zVÆ, "%d", 
nTrõs
);

548 
rc
 = 
	`T˛_V¨EvÆ
(
pDb
->
öãΩ
,ÖDb->
zBusy
, " ", 
zVÆ
, (*)0);

549 if–
rc
!=
TCL_OK
 || 
	`©oi
(
	`T˛_GëSåögResu…
(
pDb
->
öãΩ
)) ){

553 
	}
}

555 #i‚de‡
SQLITE_OMIT_PROGRESS_CALLBACK


559 
	$DbProgªssH™dÀr
(*
cd
){

560 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
cd
;

561 
rc
;

563 
	`as£π
–
pDb
->
zProgªss
 );

564 
rc
 = 
	`T˛_EvÆ
(
pDb
->
öãΩ
,ÖDb->
zProgªss
);

565 if–
rc
!=
TCL_OK
 || 
	`©oi
(
	`T˛_GëSåögResu…
(
pDb
->
öãΩ
)) ){

569 
	}
}

572 #i‚de‡
SQLITE_OMIT_TRACE


577 
	$DbTø˚H™dÀr
(*
cd
, c⁄° *
zSql
){

578 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
cd
;

579 
T˛_DSåög
 
°r
;

581 
	`T˛_DSåögInô
(&
°r
);

582 
	`T˛_DSåögAµíd
(&
°r
, 
pDb
->
zTø˚
, -1);

583 
	`T˛_DSåögAµídEÀmít
(&
°r
, 
zSql
);

584 
	`T˛_EvÆ
(
pDb
->
öãΩ
, 
	`T˛_DSåögVÆue
(&
°r
));

585 
	`T˛_DSåögFªe
(&
°r
);

586 
	`T˛_Re£tResu…
(
pDb
->
öãΩ
);

587 
	}
}

590 #i‚de‡
SQLITE_OMIT_TRACE


595 
	$DbProfûeH™dÀr
(*
cd
, c⁄° *
zSql
, 
sqlôe_uöt64
 
tm
){

596 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
cd
;

597 
T˛_DSåög
 
°r
;

598 
zTm
[100];

600 
	`sqlôe3_¢¥ötf
((
zTm
)-1, zTm, "%Œd", 
tm
);

601 
	`T˛_DSåögInô
(&
°r
);

602 
	`T˛_DSåögAµíd
(&
°r
, 
pDb
->
zProfûe
, -1);

603 
	`T˛_DSåögAµídEÀmít
(&
°r
, 
zSql
);

604 
	`T˛_DSåögAµídEÀmít
(&
°r
, 
zTm
);

605 
	`T˛_EvÆ
(
pDb
->
öãΩ
, 
	`T˛_DSåögVÆue
(&
°r
));

606 
	`T˛_DSåögFªe
(&
°r
);

607 
	`T˛_Re£tResu…
(
pDb
->
öãΩ
);

608 
	}
}

617 
	$DbCommôH™dÀr
(*
cd
){

618 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
cd
;

619 
rc
;

621 
rc
 = 
	`T˛_EvÆ
(
pDb
->
öãΩ
,ÖDb->
zCommô
);

622 if–
rc
!=
TCL_OK
 || 
	`©oi
(
	`T˛_GëSåögResu…
(
pDb
->
öãΩ
)) ){

626 
	}
}

628 
	$DbRﬁlbackH™dÀr
(*
˛õ¡D©a
){

629 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
˛õ¡D©a
;

630 
	`as£π
(
pDb
->
pRﬁlbackHook
);

631 if–
TCL_OK
!=
	`T˛_EvÆObjEx
(
pDb
->
öãΩ
,ÖDb->
pRﬁlbackHook
, 0) ){

632 
	`T˛_BackgroundEº‹
(
pDb
->
öãΩ
);

634 
	}
}

639 
	$DbWÆH™dÀr
(

640 *
˛õ¡D©a
,

641 
sqlôe3
 *
db
,

642 c⁄° *
zDb
,

643 
nE¡ry


645 
ªt
 = 
SQLITE_OK
;

646 
T˛_Obj
 *
p
;

647 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
˛õ¡D©a
;

648 
T˛_I¡îp
 *
öãΩ
 = 
pDb
->interp;

649 
	`as£π
(
pDb
->
pWÆHook
);

651 
	`as£π
–
db
==
pDb
->db );

652 
p
 = 
	`T˛_Du∂iˇãObj
(
pDb
->
pWÆHook
);

653 
	`T˛_In¸RefCou¡
(
p
);

654 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
p
, 
	`T˛_NewSåögObj
(
zDb
, -1));

655 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
p
, 
	`T˛_NewI¡Obj
(
nE¡ry
));

656 if–
TCL_OK
!=
	`T˛_EvÆObjEx
(
öãΩ
, 
p
, 0)

657 || 
TCL_OK
!=
	`T˛_GëI¡FromObj
(
öãΩ
, 
	`T˛_GëObjResu…
(öãΩ), &
ªt
)

659 
	`T˛_BackgroundEº‹
(
öãΩ
);

661 
	`T˛_De¸RefCou¡
(
p
);

663  
ªt
;

664 
	}
}

666 #i‡
deföed
(
SQLITE_TEST
Ë&& deföed(
SQLITE_ENABLE_UNLOCK_NOTIFY
)

667 
	$£tTe°U∆ockNŸifyV¨s
(
T˛_I¡îp
 *
öãΩ
, 
iArg
, 
nArg
){

668 
zBuf
[64];

669 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%d", 
iArg
);

670 
	`T˛_SëV¨
(
öãΩ
, "sqlôe_u∆ock_nŸify_¨g", 
zBuf
, 
TCL_GLOBAL_ONLY
);

671 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%d", 
nArg
);

672 
	`T˛_SëV¨
(
öãΩ
, "sqlôe_u∆ock_nŸify_¨gcou¡", 
zBuf
, 
TCL_GLOBAL_ONLY
);

673 
	}
}

675 
	#£tTe°U∆ockNŸifyV¨s
(
x
,
y
,
z
)

	)

678 #ifde‡
SQLITE_ENABLE_UNLOCK_NOTIFY


679 
	$DbU∆ockNŸify
(**
≠Arg
, 
nArg
){

680 
i
;

681 
i
=0; i<
nArg
; i++){

682 c⁄° 
Êags
 = (
TCL_EVAL_GLOBAL
|
TCL_EVAL_DIRECT
);

683 
SqlôeDb
 *
pDb
 = (SqlôeDb *)
≠Arg
[
i
];

684 
	`£tTe°U∆ockNŸifyV¨s
(
pDb
->
öãΩ
, 
i
, 
nArg
);

685 
	`as£π
–
pDb
->
pU∆ockNŸify
);

686 
	`T˛_EvÆObjEx
(
pDb
->
öãΩ
,ÖDb->
pU∆ockNŸify
, 
Êags
);

687 
	`T˛_De¸RefCou¡
(
pDb
->
pU∆ockNŸify
);

688 
pDb
->
pU∆ockNŸify
 = 0;

690 
	}
}

693 #ifde‡
SQLITE_ENABLE_PREUPDATE_HOOK


697 
	$DbPªUpd©eH™dÀr
(

698 *
p
,

699 
sqlôe3
 *
db
,

700 
›
,

701 c⁄° *
zDb
,

702 c⁄° *
zTbl
,

703 
sqlôe_öt64
 
iKey1
,

704 
sqlôe_öt64
 
iKey2


706 
SqlôeDb
 *
pDb
 = (SqlôeDb *)
p
;

707 
T˛_Obj
 *
pCmd
;

708 c⁄° *
azSå
[] = {"DELETE", "INSERT", "UPDATE"};

710 
	`as£π
–(
SQLITE_DELETE
-1)/9 == 0 );

711 
	`as£π
–(
SQLITE_INSERT
-1)/9 == 1 );

712 
	`as£π
–(
SQLITE_UPDATE
-1)/9 == 2 );

713 
	`as£π
–
pDb
->
pPªUpd©eHook
 );

714 
	`as£π
–
db
==
pDb
->db );

715 
	`as£π
–
›
==
SQLITE_INSERT
 || op==
SQLITE_UPDATE
 || op==
SQLITE_DELETE
 );

717 
pCmd
 = 
	`T˛_Du∂iˇãObj
(
pDb
->
pPªUpd©eHook
);

718 
	`T˛_In¸RefCou¡
(
pCmd
);

719 
	`T˛_Li°ObjAµídEÀmít
(0, 
pCmd
, 
	`T˛_NewSåögObj
(
azSå
[(
›
-1)/9], -1));

720 
	`T˛_Li°ObjAµídEÀmít
(0, 
pCmd
, 
	`T˛_NewSåögObj
(
zDb
, -1));

721 
	`T˛_Li°ObjAµídEÀmít
(0, 
pCmd
, 
	`T˛_NewSåögObj
(
zTbl
, -1));

722 
	`T˛_Li°ObjAµídEÀmít
(0, 
pCmd
, 
	`T˛_NewWideI¡Obj
(
iKey1
));

723 
	`T˛_Li°ObjAµídEÀmít
(0, 
pCmd
, 
	`T˛_NewWideI¡Obj
(
iKey2
));

724 
	`T˛_EvÆObjEx
(
pDb
->
öãΩ
, 
pCmd
, 
TCL_EVAL_DIRECT
);

725 
	`T˛_De¸RefCou¡
(
pCmd
);

726 
	}
}

729 
	$DbUpd©eH™dÀr
(

730 *
p
,

731 
›
,

732 c⁄° *
zDb
,

733 c⁄° *
zTbl
,

734 
sqlôe_öt64
 
rowid


736 
SqlôeDb
 *
pDb
 = (SqlôeDb *)
p
;

737 
T˛_Obj
 *
pCmd
;

738 c⁄° *
azSå
[] = {"DELETE", "INSERT", "UPDATE"};

740 
	`as£π
–(
SQLITE_DELETE
-1)/9 == 0 );

741 
	`as£π
–(
SQLITE_INSERT
-1)/9 == 1 );

742 
	`as£π
–(
SQLITE_UPDATE
-1)/9 == 2 );

744 
	`as£π
–
pDb
->
pUpd©eHook
 );

745 
	`as£π
–
›
==
SQLITE_INSERT
 || op==
SQLITE_UPDATE
 || op==
SQLITE_DELETE
 );

747 
pCmd
 = 
	`T˛_Du∂iˇãObj
(
pDb
->
pUpd©eHook
);

748 
	`T˛_In¸RefCou¡
(
pCmd
);

749 
	`T˛_Li°ObjAµídEÀmít
(0, 
pCmd
, 
	`T˛_NewSåögObj
(
azSå
[(
›
-1)/9], -1));

750 
	`T˛_Li°ObjAµídEÀmít
(0, 
pCmd
, 
	`T˛_NewSåögObj
(
zDb
, -1));

751 
	`T˛_Li°ObjAµídEÀmít
(0, 
pCmd
, 
	`T˛_NewSåögObj
(
zTbl
, -1));

752 
	`T˛_Li°ObjAµídEÀmít
(0, 
pCmd
, 
	`T˛_NewWideI¡Obj
(
rowid
));

753 
	`T˛_EvÆObjEx
(
pDb
->
öãΩ
, 
pCmd
, 
TCL_EVAL_DIRECT
);

754 
	`T˛_De¸RefCou¡
(
pCmd
);

755 
	}
}

757 
	$t˛CﬁœãNìded
(

758 *
pCtx
,

759 
sqlôe3
 *
db
,

760 
íc
,

761 c⁄° *
zName


763 
SqlôeDb
 *
pDb
 = (SqlôeDb *)
pCtx
;

764 
T˛_Obj
 *
pS¸ùt
 = 
	`T˛_Du∂iˇãObj
(
pDb
->
pCﬁœãNìded
);

765 
	`T˛_In¸RefCou¡
(
pS¸ùt
);

766 
	`T˛_Li°ObjAµídEÀmít
(0, 
pS¸ùt
, 
	`T˛_NewSåögObj
(
zName
, -1));

767 
	`T˛_EvÆObjEx
(
pDb
->
öãΩ
, 
pS¸ùt
, 0);

768 
	`T˛_De¸RefCou¡
(
pS¸ùt
);

769 
	}
}

775 
	$t˛SqlCﬁœã
(

776 *
pCtx
,

777 
nA
,

778 c⁄° *
zA
,

779 
nB
,

780 c⁄° *
zB


782 
SqlCﬁœã
 *
p
 = (SqlCﬁœã *)
pCtx
;

783 
T˛_Obj
 *
pCmd
;

785 
pCmd
 = 
	`T˛_NewSåögObj
(
p
->
zS¸ùt
, -1);

786 
	`T˛_In¸RefCou¡
(
pCmd
);

787 
	`T˛_Li°ObjAµídEÀmít
(
p
->
öãΩ
, 
pCmd
, 
	`T˛_NewSåögObj
(
zA
, 
nA
));

788 
	`T˛_Li°ObjAµídEÀmít
(
p
->
öãΩ
, 
pCmd
, 
	`T˛_NewSåögObj
(
zB
, 
nB
));

789 
	`T˛_EvÆObjEx
(
p
->
öãΩ
, 
pCmd
, 
TCL_EVAL_DIRECT
);

790 
	`T˛_De¸RefCou¡
(
pCmd
);

791  (
	`©oi
(
	`T˛_GëSåögResu…
(
p
->
öãΩ
)));

792 
	}
}

798 
	$t˛SqlFunc
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
**
¨gv
){

799 
SqlFunc
 *
p
 = 
	`sqlôe3_u£r_d©a
(
c⁄ãxt
);

800 
T˛_Obj
 *
pCmd
;

801 
i
;

802 
rc
;

804 if–
¨gc
==0 ){

809 
pCmd
 = 
p
->
pS¸ùt
;

810 
	`T˛_In¸RefCou¡
(
pCmd
);

811 
rc
 = 
	`T˛_EvÆObjEx
(
p
->
öãΩ
, 
pCmd
, 0);

812 
	`T˛_De¸RefCou¡
(
pCmd
);

823 
T˛_Obj
 **
aArg
;

824 
nArg
;

825 if–
	`T˛_Li°ObjGëEÀmíts
(
p
->
öãΩ
,Ö->
pS¸ùt
, &
nArg
, &
aArg
) ){

826 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, 
	`T˛_GëSåögResu…
(
p
->
öãΩ
), -1);

829 
pCmd
 = 
	`T˛_NewLi°Obj
(
nArg
, 
aArg
);

830 
	`T˛_In¸RefCou¡
(
pCmd
);

831 
i
=0; i<
¨gc
; i++){

832 
sqlôe3_vÆue
 *
pIn
 = 
¨gv
[
i
];

833 
T˛_Obj
 *
pVÆ
;

836  
	`sqlôe3_vÆue_ty≥
(
pIn
) ){

837 
SQLITE_BLOB
: {

838 
byãs
 = 
	`sqlôe3_vÆue_byãs
(
pIn
);

839 
pVÆ
 = 
	`T˛_NewByãAºayObj
(
	`sqlôe3_vÆue_blob
(
pIn
), 
byãs
);

842 
SQLITE_INTEGER
: {

843 
sqlôe_öt64
 
v
 = 
	`sqlôe3_vÆue_öt64
(
pIn
);

844 if–
v
>=-2147483647 && v<=2147483647 ){

845 
pVÆ
 = 
	`T˛_NewI¡Obj
(()
v
);

847 
pVÆ
 = 
	`T˛_NewWideI¡Obj
(
v
);

851 
SQLITE_FLOAT
: {

852 
r
 = 
	`sqlôe3_vÆue_doubÀ
(
pIn
);

853 
pVÆ
 = 
	`T˛_NewDoubÀObj
(
r
);

856 
SQLITE_NULL
: {

857 
pVÆ
 = 
	`T˛_NewSåögObj
(
p
->
pDb
->
zNuŒ
, -1);

861 
byãs
 = 
	`sqlôe3_vÆue_byãs
(
pIn
);

862 
pVÆ
 = 
	`T˛_NewSåögObj
((*)
	`sqlôe3_vÆue_ãxt
(
pIn
), 
byãs
);

866 
rc
 = 
	`T˛_Li°ObjAµídEÀmít
(
p
->
öãΩ
, 
pCmd
, 
pVÆ
);

867 if–
rc
 ){

868 
	`T˛_De¸RefCou¡
(
pCmd
);

869 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, 
	`T˛_GëSåögResu…
(
p
->
öãΩ
), -1);

873 if–!
p
->
u£EvÆObjv
 ){

877 
	`T˛_GëSåög
(
pCmd
);

879 
rc
 = 
	`T˛_EvÆObjEx
(
p
->
öãΩ
, 
pCmd
, 
TCL_EVAL_DIRECT
);

880 
	`T˛_De¸RefCou¡
(
pCmd
);

883 if–
rc
 &&Ñc!=
TCL_RETURN
 ){

884 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, 
	`T˛_GëSåögResu…
(
p
->
öãΩ
), -1);

886 
T˛_Obj
 *
pV¨
 = 
	`T˛_GëObjResu…
(
p
->
öãΩ
);

887 
n
;

888 
u8
 *
d©a
;

889 c⁄° *
zTy≥
 = (
pV¨
->
ty≥På
 ?ÖV¨->ty≥På->
«me
 : "");

890 
c
 = 
zTy≥
[0];

891 if–
c
=='b' && 
	`°rcmp
(
zTy≥
,"byã¨øy")==0 && 
pV¨
->
byãs
==0 ){

894 
d©a
 = 
	`T˛_GëByãAºayFromObj
(
pV¨
, &
n
);

895 
	`sqlôe3_ªsu…_blob
(
c⁄ãxt
, 
d©a
, 
n
, 
SQLITE_TRANSIENT
);

896 }if–
c
=='b' && 
	`°rcmp
(
zTy≥
,"boolean")==0 ){

897 
	`T˛_GëI¡FromObj
(0, 
pV¨
, &
n
);

898 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
n
);

899 }if–
c
=='d' && 
	`°rcmp
(
zTy≥
,"double")==0 ){

900 
r
;

901 
	`T˛_GëDoubÀFromObj
(0, 
pV¨
, &
r
);

902 
	`sqlôe3_ªsu…_doubÀ
(
c⁄ãxt
, 
r
);

903 }if–(
c
=='w' && 
	`°rcmp
(
zTy≥
,"wideInt")==0) ||

904 (
c
=='i' && 
	`°rcmp
(
zTy≥
,"int")==0) ){

905 
T˛_WideI¡
 
v
;

906 
	`T˛_GëWideI¡FromObj
(0, 
pV¨
, &
v
);

907 
	`sqlôe3_ªsu…_öt64
(
c⁄ãxt
, 
v
);

909 
d©a
 = (*)
	`T˛_GëSåögFromObj
(
pV¨
, &
n
);

910 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, (*)
d©a
, 
n
, 
SQLITE_TRANSIENT
);

913 
	}
}

915 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


922 
auth_ˇŒback
(

923 *
pArg
,

924 
code
,

925 c⁄° *
zArg1
,

926 c⁄° *
zArg2
,

927 c⁄° *
zArg3
,

928 c⁄° *
zArg4


929 #ifde‡
SQLITE_USER_AUTHENTICATION


930 ,c⁄° *
zArg5


933 c⁄° *
	gzCode
;

934 
T˛_DSåög
 
	g°r
;

935 
	grc
;

936 c⁄° *
	gzRïly
;

937 
SqlôeDb
 *
	gpDb
 = (SqlôeDb*)
pArg
;

938 if–
	gpDb
->
	gdißbÀAuth
 )  
	gSQLITE_OK
;

940  
	gcode
 ){

941 
	gSQLITE_COPY
 : 
zCode
="SQLITE_COPY"; ;

942 
	gSQLITE_CREATE_INDEX
 : 
zCode
="SQLITE_CREATE_INDEX"; ;

943 
	gSQLITE_CREATE_TABLE
 : 
zCode
="SQLITE_CREATE_TABLE"; ;

944 
	gSQLITE_CREATE_TEMP_INDEX
 : 
zCode
="SQLITE_CREATE_TEMP_INDEX"; ;

945 
	gSQLITE_CREATE_TEMP_TABLE
 : 
zCode
="SQLITE_CREATE_TEMP_TABLE"; ;

946 
	gSQLITE_CREATE_TEMP_TRIGGER
: 
zCode
="SQLITE_CREATE_TEMP_TRIGGER"; ;

947 
	gSQLITE_CREATE_TEMP_VIEW
 : 
zCode
="SQLITE_CREATE_TEMP_VIEW"; ;

948 
	gSQLITE_CREATE_TRIGGER
 : 
zCode
="SQLITE_CREATE_TRIGGER"; ;

949 
	gSQLITE_CREATE_VIEW
 : 
zCode
="SQLITE_CREATE_VIEW"; ;

950 
	gSQLITE_DELETE
 : 
zCode
="SQLITE_DELETE"; ;

951 
	gSQLITE_DROP_INDEX
 : 
zCode
="SQLITE_DROP_INDEX"; ;

952 
	gSQLITE_DROP_TABLE
 : 
zCode
="SQLITE_DROP_TABLE"; ;

953 
	gSQLITE_DROP_TEMP_INDEX
 : 
zCode
="SQLITE_DROP_TEMP_INDEX"; ;

954 
	gSQLITE_DROP_TEMP_TABLE
 : 
zCode
="SQLITE_DROP_TEMP_TABLE"; ;

955 
	gSQLITE_DROP_TEMP_TRIGGER
 : 
zCode
="SQLITE_DROP_TEMP_TRIGGER"; ;

956 
	gSQLITE_DROP_TEMP_VIEW
 : 
zCode
="SQLITE_DROP_TEMP_VIEW"; ;

957 
	gSQLITE_DROP_TRIGGER
 : 
zCode
="SQLITE_DROP_TRIGGER"; ;

958 
	gSQLITE_DROP_VIEW
 : 
zCode
="SQLITE_DROP_VIEW"; ;

959 
	gSQLITE_INSERT
 : 
zCode
="SQLITE_INSERT"; ;

960 
	gSQLITE_PRAGMA
 : 
zCode
="SQLITE_PRAGMA"; ;

961 
	gSQLITE_READ
 : 
zCode
="SQLITE_READ"; ;

962 
	gSQLITE_SELECT
 : 
zCode
="SQLITE_SELECT"; ;

963 
	gSQLITE_TRANSACTION
 : 
zCode
="SQLITE_TRANSACTION"; ;

964 
	gSQLITE_UPDATE
 : 
zCode
="SQLITE_UPDATE"; ;

965 
	gSQLITE_ATTACH
 : 
zCode
="SQLITE_ATTACH"; ;

966 
	gSQLITE_DETACH
 : 
zCode
="SQLITE_DETACH"; ;

967 
	gSQLITE_ALTER_TABLE
 : 
zCode
="SQLITE_ALTER_TABLE"; ;

968 
	gSQLITE_REINDEX
 : 
zCode
="SQLITE_REINDEX"; ;

969 
	gSQLITE_ANALYZE
 : 
zCode
="SQLITE_ANALYZE"; ;

970 
	gSQLITE_CREATE_VTABLE
 : 
zCode
="SQLITE_CREATE_VTABLE"; ;

971 
	gSQLITE_DROP_VTABLE
 : 
zCode
="SQLITE_DROP_VTABLE"; ;

972 
	gSQLITE_FUNCTION
 : 
zCode
="SQLITE_FUNCTION"; ;

973 
	gSQLITE_SAVEPOINT
 : 
zCode
="SQLITE_SAVEPOINT"; ;

974 
	gSQLITE_RECURSIVE
 : 
zCode
="SQLITE_RECURSIVE"; ;

975  : 
zCode
="????"; ;

977 
T˛_DSåögInô
(&
°r
);

978 
T˛_DSåögAµíd
(&
°r
, 
pDb
->
zAuth
, -1);

979 
T˛_DSåögAµídEÀmít
(&
°r
, 
zCode
);

980 
T˛_DSåögAµídEÀmít
(&
°r
, 
zArg1
 ? zArg1 : "");

981 
T˛_DSåögAµídEÀmít
(&
°r
, 
zArg2
 ? zArg2 : "");

982 
T˛_DSåögAµídEÀmít
(&
°r
, 
zArg3
 ? zArg3 : "");

983 
T˛_DSåögAµídEÀmít
(&
°r
, 
zArg4
 ? zArg4 : "");

984 #ifde‡
SQLITE_USER_AUTHENTICATION


985 
T˛_DSåögAµídEÀmít
(&
°r
, 
zArg5
 ? zArg5 : "");

987 
	grc
 = 
T˛_GlobÆEvÆ
(
pDb
->
öãΩ
, 
T˛_DSåögVÆue
(&
°r
));

988 
T˛_DSåögFªe
(&
°r
);

989 
	gzRïly
 = 
rc
==
TCL_OK
 ? 
T˛_GëSåögResu…
(
pDb
->
öãΩ
) : "SQLITE_DENY";

990 if–
°rcmp
(
zRïly
,"SQLITE_OK")==0 ){

991 
rc
 = 
SQLITE_OK
;

992 }if–
°rcmp
(
zRïly
,"SQLITE_DENY")==0 ){

993 
rc
 = 
SQLITE_DENY
;

994 }if–
°rcmp
(
zRïly
,"SQLITE_IGNORE")==0 ){

995 
rc
 = 
SQLITE_IGNORE
;

997 
	grc
 = 999;

999  
	grc
;

1014 *
	$loˇl_gëlöe
(*
zProm±
, 
FILE
 *
ö
){

1015 *
zLöe
;

1016 
nLöe
;

1017 
n
;

1019 
nLöe
 = 100;

1020 
zLöe
 = 
	`mÆloc
–
nLöe
 );

1021 if–
zLöe
==0 )  0;

1022 
n
 = 0;

1024 if–
n
+100>
nLöe
 ){

1025 
nLöe
 =ÇLine*2 + 100;

1026 
zLöe
 = 
	`ªÆloc
(zLöe, 
nLöe
);

1027 if–
zLöe
==0 )  0;

1029 if–
	`fgës
(&
zLöe
[
n
], 
nLöe
 -Ç, 
ö
)==0 ){

1030 if–
n
==0 ){

1031 
	`‰ì
(
zLöe
);

1034 
zLöe
[
n
] = 0;

1037  
zLöe
[
n
] ){Ç++; }

1038 if–
n
>0 && 
zLöe
[n-1]=='\n' ){

1039 
n
--;

1040 
zLöe
[
n
] = 0;

1044 
zLöe
 = 
	`ªÆloc
–zLöe, 
n
+1 );

1045  
zLöe
;

1046 
	}
}

1057 
	$DbTønsPo°Cmd
(

1058 
Clõ¡D©a
 
d©a
[],

1059 
T˛_I¡îp
 *
öãΩ
,

1060 
ªsu…


1062 c⁄° *c⁄° 
azEnd
[] = {

1068 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
d©a
[0];

1069 
rc
 = 
ªsu…
;

1070 c⁄° *
zEnd
;

1072 
pDb
->
nTønß˘i⁄
--;

1073 
zEnd
 = 
azEnd
[(
rc
==
TCL_ERROR
)*2 + (
pDb
->
nTønß˘i⁄
==0)];

1075 
pDb
->
dißbÀAuth
++;

1076 if–
	`sqlôe3_exec
(
pDb
->
db
, 
zEnd
, 0, 0, 0) ){

1087 if–
rc
!=
TCL_ERROR
 ){

1088 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3_îrmsg
(
pDb
->
db
), (*)0);

1089 
rc
 = 
TCL_ERROR
;

1091 
	`sqlôe3_exec
(
pDb
->
db
, "ROLLBACK", 0, 0, 0);

1093 
pDb
->
dißbÀAuth
--;

1095  
rc
;

1096 
	}
}

1105 
	$dbPª∑ª
(

1106 
SqlôeDb
 *
pDb
,

1107 c⁄° *
zSql
,

1108 
sqlôe3_°mt
 **
µStmt
,

1109 c⁄° **
pzOut


1111 #ifde‡
SQLITE_TEST


1112 if–
pDb
->
bLegacyPª∑ª
 ){

1113  
	`sqlôe3_¥ï¨e
(
pDb
->
db
, 
zSql
, -1, 
µStmt
, 
pzOut
);

1116  
	`sqlôe3_¥ï¨e_v2
(
pDb
->
db
, 
zSql
, -1, 
µStmt
, 
pzOut
);

1117 
	}
}

1134 
	$dbPª∑ªAndBöd
(

1135 
SqlôeDb
 *
pDb
,

1136 c⁄° *
zIn
,

1137 c⁄° **
pzOut
,

1138 
SqlPª∑ªdStmt
 **
µPªStmt


1140 c⁄° *
zSql
 = 
zIn
;

1141 
sqlôe3_°mt
 *
pStmt
 = 0;

1142 
SqlPª∑ªdStmt
 *
pPªStmt
;

1143 
nSql
;

1144 
nV¨
 = 0;

1145 
iP¨m
 = 0;

1146 
c
;

1147 
i
;

1148 
T˛_I¡îp
 *
öãΩ
 = 
pDb
->interp;

1150 *
µPªStmt
 = 0;

1153  (
c
 = 
zSql
[0])==' ' || c=='\t' || c=='\r' || c=='\n' ){ zSql++; }

1154 
nSql
 = 
	`°æí30
(
zSql
);

1156 
pPªStmt
 = 
pDb
->
°mtLi°
;ÖPªStmt;ÖPªStmtıPªStmt->
pNext
){

1157 
n
 = 
pPªStmt
->
nSql
;

1158 if–
nSql
>=
n


1159 && 
	`memcmp
(
pPªStmt
->
zSql
, zSql, 
n
)==0

1160 && (
zSql
[
n
]==0 || zSql[n-1]==';')

1162 
pStmt
 = 
pPªStmt
->pStmt;

1163 *
pzOut
 = &
zSql
[
pPªStmt
->
nSql
];

1169 if–
pPªStmt
->
pPªv
 ){

1170 
pPªStmt
->
pPªv
->
pNext
 =ÖPreStmt->pNext;

1172 
pDb
->
°mtLi°
 = 
pPªStmt
->
pNext
;

1174 if–
pPªStmt
->
pNext
 ){

1175 
pPªStmt
->
pNext
->
pPªv
 =ÖPreStmt->pPrev;

1177 
pDb
->
°mtLa°
 = 
pPªStmt
->
pPªv
;

1179 
pDb
->
nStmt
--;

1180 
nV¨
 = 
	`sqlôe3_böd_∑ømëî_cou¡
(
pStmt
);

1187 if–
pPªStmt
==0 ){

1188 
nByã
;

1190 if–
SQLITE_OK
!=
	`dbPª∑ª
(
pDb
, 
zSql
, &
pStmt
, 
pzOut
) ){

1191 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewSåögObj
(
	`sqlôe3_îrmsg
(
pDb
->
db
), -1));

1192  
TCL_ERROR
;

1194 if–
pStmt
==0 ){

1195 if–
SQLITE_OK
!=
	`sqlôe3_îrcode
(
pDb
->
db
) ){

1197 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewSåögObj
(
	`sqlôe3_îrmsg
(
pDb
->
db
), -1));

1198  
TCL_ERROR
;

1203  
TCL_OK
;

1207 
	`as£π
–
pPªStmt
==0 );

1208 
nV¨
 = 
	`sqlôe3_böd_∑ømëî_cou¡
(
pStmt
);

1209 
nByã
 = (
SqlPª∑ªdStmt
Ë+ 
nV¨
*(
T˛_Obj
 *);

1210 
pPªStmt
 = (
SqlPª∑ªdStmt
*)
	`T˛_AŒoc
(
nByã
);

1211 
	`mem£t
(
pPªStmt
, 0, 
nByã
);

1213 
pPªStmt
->
pStmt
 =ÖStmt;

1214 
pPªStmt
->
nSql
 = ()(*
pzOut
 - 
zSql
);

1215 
pPªStmt
->
zSql
 = 
	`sqlôe3_sql
(
pStmt
);

1216 
pPªStmt
->
≠P¨m
 = (
T˛_Obj
 **)&pPreStmt[1];

1217 #ifde‡
SQLITE_TEST


1218 if–
pPªStmt
->
zSql
==0 ){

1219 *
zC›y
 = 
	`T˛_AŒoc
(
pPªStmt
->
nSql
 + 1);

1220 
	`mem˝y
(
zC›y
, 
zSql
, 
pPªStmt
->
nSql
);

1221 
zC›y
[
pPªStmt
->
nSql
] = '\0';

1222 
pPªStmt
->
zSql
 = 
zC›y
;

1226 
	`as£π
–
pPªStmt
 );

1227 
	`as£π
–
	`°æí30
(
pPªStmt
->
zSql
)=ıPªStmt->
nSql
 );

1228 
	`as£π
–0==
	`memcmp
(
pPªStmt
->
zSql
, zSql,ÖPªStmt->
nSql
) );

1231 
i
=1; i<=
nV¨
; i++){

1232 c⁄° *
zV¨
 = 
	`sqlôe3_böd_∑ømëî_«me
(
pStmt
, 
i
);

1233 if–
zV¨
!=0 && (zVar[0]=='$' || zVar[0]==':' || zVar[0]=='@') ){

1234 
T˛_Obj
 *
pV¨
 = 
	`T˛_GëV¨2Ex
(
öãΩ
, &
zV¨
[1], 0, 0);

1235 if–
pV¨
 ){

1236 
n
;

1237 
u8
 *
d©a
;

1238 c⁄° *
zTy≥
 = (
pV¨
->
ty≥På
 ?ÖV¨->ty≥På->
«me
 : "");

1239 
c
 = 
zTy≥
[0];

1240 if–
zV¨
[0]=='@' ||

1241 (
c
=='b' && 
	`°rcmp
(
zTy≥
,"byã¨øy")==0 && 
pV¨
->
byãs
==0) ){

1245 
d©a
 = 
	`T˛_GëByãAºayFromObj
(
pV¨
, &
n
);

1246 
	`sqlôe3_böd_blob
(
pStmt
, 
i
, 
d©a
, 
n
, 
SQLITE_STATIC
);

1247 
	`T˛_In¸RefCou¡
(
pV¨
);

1248 
pPªStmt
->
≠P¨m
[
iP¨m
++] = 
pV¨
;

1249 }if–
c
=='b' && 
	`°rcmp
(
zTy≥
,"boolean")==0 ){

1250 
	`T˛_GëI¡FromObj
(
öãΩ
, 
pV¨
, &
n
);

1251 
	`sqlôe3_böd_öt
(
pStmt
, 
i
, 
n
);

1252 }if–
c
=='d' && 
	`°rcmp
(
zTy≥
,"double")==0 ){

1253 
r
;

1254 
	`T˛_GëDoubÀFromObj
(
öãΩ
, 
pV¨
, &
r
);

1255 
	`sqlôe3_böd_doubÀ
(
pStmt
, 
i
, 
r
);

1256 }if–(
c
=='w' && 
	`°rcmp
(
zTy≥
,"wideInt")==0) ||

1257 (
c
=='i' && 
	`°rcmp
(
zTy≥
,"int")==0) ){

1258 
T˛_WideI¡
 
v
;

1259 
	`T˛_GëWideI¡FromObj
(
öãΩ
, 
pV¨
, &
v
);

1260 
	`sqlôe3_böd_öt64
(
pStmt
, 
i
, 
v
);

1262 
d©a
 = (*)
	`T˛_GëSåögFromObj
(
pV¨
, &
n
);

1263 
	`sqlôe3_böd_ãxt
(
pStmt
, 
i
, (*)
d©a
, 
n
, 
SQLITE_STATIC
);

1264 
	`T˛_In¸RefCou¡
(
pV¨
);

1265 
pPªStmt
->
≠P¨m
[
iP¨m
++] = 
pV¨
;

1268 
	`sqlôe3_böd_nuŒ
(
pStmt
, 
i
);

1272 
pPªStmt
->
nP¨m
 = 
iP¨m
;

1273 *
µPªStmt
 = 
pPªStmt
;

1275  
TCL_OK
;

1276 
	}
}

1287 
	$dbRñó£Stmt
(

1288 
SqlôeDb
 *
pDb
,

1289 
SqlPª∑ªdStmt
 *
pPªStmt
,

1290 
disˇrd


1292 
i
;

1295 
i
=0; i<
pPªStmt
->
nP¨m
; i++){

1296 
	`T˛_De¸RefCou¡
(
pPªStmt
->
≠P¨m
[
i
]);

1298 
pPªStmt
->
nP¨m
 = 0;

1300 if–
pDb
->
maxStmt
<=0 || 
disˇrd
 ){

1302 
	`dbFªeStmt
(
pPªStmt
);

1305 
pPªStmt
->
pNext
 = 
pDb
->
°mtLi°
;

1306 
pPªStmt
->
pPªv
 = 0;

1307 if–
pDb
->
°mtLi°
 ){

1308 
pDb
->
°mtLi°
->
pPªv
 = 
pPªStmt
;

1310 
pDb
->
°mtLi°
 = 
pPªStmt
;

1311 if–
pDb
->
°mtLa°
==0 ){

1312 
	`as£π
–
pDb
->
nStmt
==0 );

1313 
pDb
->
°mtLa°
 = 
pPªStmt
;

1315 
	`as£π
–
pDb
->
nStmt
>0 );

1317 
pDb
->
nStmt
++;

1321  
pDb
->
nStmt
>pDb->
maxStmt
 ){

1322 
SqlPª∑ªdStmt
 *
pLa°
 = 
pDb
->
°mtLa°
;

1323 
pDb
->
°mtLa°
 = 
pLa°
->
pPªv
;

1324 
pDb
->
°mtLa°
->
pNext
 = 0;

1325 
pDb
->
nStmt
--;

1326 
	`dbFªeStmt
(
pLa°
);

1329 
	}
}

1340 
DbEvÆC⁄ãxt
 
	tDbEvÆC⁄ãxt
;

1341 
	sDbEvÆC⁄ãxt
 {

1342 
SqlôeDb
 *
	mpDb
;

1343 
T˛_Obj
 *
	mpSql
;

1344 c⁄° *
	mzSql
;

1345 
SqlPª∑ªdStmt
 *
	mpPªStmt
;

1346 
	mnCﬁ
;

1347 
T˛_Obj
 *
	mpAºay
;

1348 
T˛_Obj
 **
	m≠CﬁName
;

1355 
	$dbRñó£CﬁumnNames
(
DbEvÆC⁄ãxt
 *
p
){

1356 if–
p
->
≠CﬁName
 ){

1357 
i
;

1358 
i
=0; i<
p
->
nCﬁ
; i++){

1359 
	`T˛_De¸RefCou¡
(
p
->
≠CﬁName
[
i
]);

1361 
	`T˛_Fªe
((*)
p
->
≠CﬁName
);

1362 
p
->
≠CﬁName
 = 0;

1364 
p
->
nCﬁ
 = 0;

1365 
	}
}

1379 
	$dbEvÆInô
(

1380 
DbEvÆC⁄ãxt
 *
p
,

1381 
SqlôeDb
 *
pDb
,

1382 
T˛_Obj
 *
pSql
,

1383 
T˛_Obj
 *
pAºay


1385 
	`mem£t
(
p
, 0, (
DbEvÆC⁄ãxt
));

1386 
p
->
pDb
 =ÖDb;

1387 
p
->
zSql
 = 
	`T˛_GëSåög
(
pSql
);

1388 
p
->
pSql
 =ÖSql;

1389 
	`T˛_In¸RefCou¡
(
pSql
);

1390 if–
pAºay
 ){

1391 
p
->
pAºay
 =ÖArray;

1392 
	`T˛_In¸RefCou¡
(
pAºay
);

1394 
	}
}

1400 
	$dbEvÆRowInfo
(

1401 
DbEvÆC⁄ãxt
 *
p
,

1402 *
≤Cﬁ
,

1403 
T˛_Obj
 ***
∑pCﬁName


1406 if–0==
p
->
≠CﬁName
 ){

1407 
sqlôe3_°mt
 *
pStmt
 = 
p
->
pPªStmt
->pStmt;

1408 
i
;

1409 
nCﬁ
;

1410 
T˛_Obj
 **
≠CﬁName
 = 0;

1412 
p
->
nCﬁ
 =ÇCﬁ = 
	`sqlôe3_cﬁumn_cou¡
(
pStmt
);

1413 if–
nCﬁ
>0 && (
∑pCﬁName
 || 
p
->
pAºay
) ){

1414 
≠CﬁName
 = (
T˛_Obj
**)
	`T˛_AŒoc
–(T˛_Obj*)*
nCﬁ
 );

1415 
i
=0; i<
nCﬁ
; i++){

1416 
≠CﬁName
[
i
] = 
	`T˛_NewSåögObj
(
	`sqlôe3_cﬁumn_«me
(
pStmt
,i), -1);

1417 
	`T˛_In¸RefCou¡
(
≠CﬁName
[
i
]);

1419 
p
->
≠CﬁName
 =ápColName;

1425 if–
p
->
pAºay
 ){

1426 
T˛_I¡îp
 *
öãΩ
 = 
p
->
pDb
->interp;

1427 
T˛_Obj
 *
pCﬁLi°
 = 
	`T˛_NewObj
();

1428 
T˛_Obj
 *
pSèr
 = 
	`T˛_NewSåögObj
("*", -1);

1430 
i
=0; i<
nCﬁ
; i++){

1431 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pCﬁLi°
, 
≠CﬁName
[
i
]);

1433 
	`T˛_In¸RefCou¡
(
pSèr
);

1434 
	`T˛_ObjSëV¨2
(
öãΩ
, 
p
->
pAºay
, 
pSèr
, 
pCﬁLi°
, 0);

1435 
	`T˛_De¸RefCou¡
(
pSèr
);

1439 if–
∑pCﬁName
 ){

1440 *
∑pCﬁName
 = 
p
->
≠CﬁName
;

1442 if–
≤Cﬁ
 ){

1443 *
≤Cﬁ
 = 
p
->
nCﬁ
;

1445 
	}
}

1458 
	$dbEvÆSãp
(
DbEvÆC⁄ãxt
 *
p
){

1459 c⁄° *
zPªvSql
 = 0;

1461  
p
->
zSql
[0] ||Ö->
pPªStmt
 ){

1462 
rc
;

1463 if–
p
->
pPªStmt
==0 ){

1464 
zPªvSql
 = (
p
->
zSql
==zPrevSql ? 0 :Ö->zSql);

1465 
rc
 = 
	`dbPª∑ªAndBöd
(
p
->
pDb
,Ö->
zSql
, &p->zSql, &p->
pPªStmt
);

1466 if–
rc
!=
TCL_OK
 ) Ñc;

1468 
rcs
;

1469 
SqlôeDb
 *
pDb
 = 
p
->pDb;

1470 
SqlPª∑ªdStmt
 *
pPªStmt
 = 
p
->pPreStmt;

1471 
sqlôe3_°mt
 *
pStmt
 = 
pPªStmt
->pStmt;

1473 
rcs
 = 
	`sqlôe3_°ï
(
pStmt
);

1474 if–
rcs
==
SQLITE_ROW
 ){

1475  
TCL_OK
;

1477 if–
p
->
pAºay
 ){

1478 
	`dbEvÆRowInfo
(
p
, 0, 0);

1480 
rcs
 = 
	`sqlôe3_ª£t
(
pStmt
);

1482 
pDb
->
nSãp
 = 
	`sqlôe3_°mt_°©us
(
pStmt
,
SQLITE_STMTSTATUS_FULLSCAN_STEP
,1);

1483 
pDb
->
nS‹t
 = 
	`sqlôe3_°mt_°©us
(
pStmt
,
SQLITE_STMTSTATUS_SORT
,1);

1484 
pDb
->
nIndex
 = 
	`sqlôe3_°mt_°©us
(
pStmt
,
SQLITE_STMTSTATUS_AUTOINDEX
,1);

1485 
	`dbRñó£CﬁumnNames
(
p
);

1486 
p
->
pPªStmt
 = 0;

1488 if–
rcs
!=
SQLITE_OK
 ){

1491 
	`dbRñó£Stmt
(
pDb
, 
pPªStmt
, 1);

1492 #i‡
SQLITE_TEST


1493 if–
p
->
pDb
->
bLegacyPª∑ª
 && 
rcs
==
SQLITE_SCHEMA
 && 
zPªvSql
 ){

1499 
p
->
zSql
 = 
zPªvSql
;

1503 
	`T˛_SëObjResu…
(
pDb
->
öãΩ
,

1504 
	`T˛_NewSåögObj
(
	`sqlôe3_îrmsg
(
pDb
->
db
), -1));

1505  
TCL_ERROR
;

1507 
	`dbRñó£Stmt
(
pDb
, 
pPªStmt
, 0);

1513  
TCL_BREAK
;

1514 
	}
}

1521 
	$dbEvÆFöÆize
(
DbEvÆC⁄ãxt
 *
p
){

1522 if–
p
->
pPªStmt
 ){

1523 
	`sqlôe3_ª£t
(
p
->
pPªStmt
->
pStmt
);

1524 
	`dbRñó£Stmt
(
p
->
pDb
,Ö->
pPªStmt
, 0);

1525 
p
->
pPªStmt
 = 0;

1527 if–
p
->
pAºay
 ){

1528 
	`T˛_De¸RefCou¡
(
p
->
pAºay
);

1529 
p
->
pAºay
 = 0;

1531 
	`T˛_De¸RefCou¡
(
p
->
pSql
);

1532 
	`dbRñó£CﬁumnNames
(
p
);

1533 
	}
}

1540 
T˛_Obj
 *
	$dbEvÆCﬁumnVÆue
(
DbEvÆC⁄ãxt
 *
p
, 
iCﬁ
){

1541 
sqlôe3_°mt
 *
pStmt
 = 
p
->
pPªStmt
->pStmt;

1542  
	`sqlôe3_cﬁumn_ty≥
(
pStmt
, 
iCﬁ
) ){

1543 
SQLITE_BLOB
: {

1544 
byãs
 = 
	`sqlôe3_cﬁumn_byãs
(
pStmt
, 
iCﬁ
);

1545 c⁄° *
zBlob
 = 
	`sqlôe3_cﬁumn_blob
(
pStmt
, 
iCﬁ
);

1546 if–!
zBlob
 ) 
byãs
 = 0;

1547  
	`T˛_NewByãAºayObj
((
u8
*)
zBlob
, 
byãs
);

1549 
SQLITE_INTEGER
: {

1550 
sqlôe_öt64
 
v
 = 
	`sqlôe3_cﬁumn_öt64
(
pStmt
, 
iCﬁ
);

1551 if–
v
>=-2147483647 && v<=2147483647 ){

1552  
	`T˛_NewI¡Obj
(()
v
);

1554  
	`T˛_NewWideI¡Obj
(
v
);

1557 
SQLITE_FLOAT
: {

1558  
	`T˛_NewDoubÀObj
(
	`sqlôe3_cﬁumn_doubÀ
(
pStmt
, 
iCﬁ
));

1560 
SQLITE_NULL
: {

1561  
	`T˛_NewSåögObj
(
p
->
pDb
->
zNuŒ
, -1);

1565  
	`T˛_NewSåögObj
((*)
	`sqlôe3_cﬁumn_ãxt
(
pStmt
, 
iCﬁ
), -1);

1566 
	}
}

1575 #i‡
TCL_MAJOR_VERSION
>8 || (TCL_MAJOR_VERSION==8 && 
TCL_MINOR_VERSION
>=6)

1576 
	#SQLITE_TCL_NRE
 1

	)

1577 
	$DbU£Nª
(){

1578 
maj‹
, 
mö‹
;

1579 
	`T˛_GëVîsi⁄
(&
maj‹
, &
mö‹
, 0, 0);

1580 –(
maj‹
==8 && 
mö‹
>=6) || major>8 );

1581 
	}
}

1592 
	#SQLITE_TCL_NRE
 0

	)

1593 
	#DbU£Nª
(Ë0

	)

1594 
	#T˛_NRAddCÆlback
(
a
,
b
,
c
,
d
,
e
,
f
Ë()0

	)

1595 
	#T˛_NREvÆObj
(
a
,
b
,
c
Ë0

	)

1596 
	#T˛_NRCª©eComm™d
(
a
,
b
,
c
,
d
,
e
,
f
Ë()0

	)

1604 
	$DbEvÆNextCmd
(

1605 
Clõ¡D©a
 
d©a
[],

1606 
T˛_I¡îp
 *
öãΩ
,

1607 
ªsu…


1609 
rc
 = 
ªsu…
;

1615 
DbEvÆC⁄ãxt
 *
p
 = (DbEvÆC⁄ãxà*)
d©a
[0];

1616 
T˛_Obj
 *
pS¸ùt
 = (T˛_Obj *)
d©a
[1];

1617 
T˛_Obj
 *
pAºay
 = 
p
->pArray;

1619  (
rc
==
TCL_OK
 ||Ñc==
TCL_CONTINUE
Ë&& TCL_OK==‘¯
	`dbEvÆSãp
(
p
)) ){

1620 
i
;

1621 
nCﬁ
;

1622 
T˛_Obj
 **
≠CﬁName
;

1623 
	`dbEvÆRowInfo
(
p
, &
nCﬁ
, &
≠CﬁName
);

1624 
i
=0; i<
nCﬁ
; i++){

1625 
T˛_Obj
 *
pVÆ
 = 
	`dbEvÆCﬁumnVÆue
(
p
, 
i
);

1626 if–
pAºay
==0 ){

1627 
	`T˛_ObjSëV¨2
(
öãΩ
, 
≠CﬁName
[
i
], 0, 
pVÆ
, 0);

1629 
	`T˛_ObjSëV¨2
(
öãΩ
, 
pAºay
, 
≠CﬁName
[
i
], 
pVÆ
, 0);

1642 if–
	`DbU£Nª
() ){

1643 
	`T˛_NRAddCÆlback
(
öãΩ
, 
DbEvÆNextCmd
, (*)
p
, (*)
pS¸ùt
, 0, 0);

1644  
	`T˛_NREvÆObj
(
öãΩ
, 
pS¸ùt
, 0);

1646 
rc
 = 
	`T˛_EvÆObjEx
(
öãΩ
, 
pS¸ùt
, 0);

1650 
	`T˛_De¸RefCou¡
(
pS¸ùt
);

1651 
	`dbEvÆFöÆize
(
p
);

1652 
	`T˛_Fªe
((*)
p
);

1654 if–
rc
==
TCL_OK
 ||Ñc==
TCL_BREAK
 ){

1655 
	`T˛_Re£tResu…
(
öãΩ
);

1656 
rc
 = 
TCL_OK
;

1658  
rc
;

1659 
	}
}

1670 
	$DbHookCmd
(

1671 
T˛_I¡îp
 *
öãΩ
,

1672 
SqlôeDb
 *
pDb
,

1673 
T˛_Obj
 *
pArg
,

1674 
T˛_Obj
 **
µHook


1676 
sqlôe3
 *
db
 = 
pDb
->db;

1678 if–*
µHook
 ){

1679 
	`T˛_SëObjResu…
(
öãΩ
, *
µHook
);

1680 if–
pArg
 ){

1681 
	`T˛_De¸RefCou¡
(*
µHook
);

1682 *
µHook
 = 0;

1685 if–
pArg
 ){

1686 
	`as£π
–!(*
µHook
) );

1687 if–
	`T˛_GëCh¨Lígth
(
pArg
)>0 ){

1688 *
µHook
 = 
pArg
;

1689 
	`T˛_In¸RefCou¡
(*
µHook
);

1693 #ifde‡
SQLITE_ENABLE_PREUPDATE_HOOK


1694 
	`sqlôe3_¥eupd©e_hook
(
db
, (
pDb
->
pPªUpd©eHook
?
DbPªUpd©eH™dÀr
:0),ÖDb);

1696 
	`sqlôe3_upd©e_hook
(
db
, (
pDb
->
pUpd©eHook
?
DbUpd©eH™dÀr
:0),ÖDb);

1697 
	`sqlôe3_rﬁlback_hook
(
db
, (
pDb
->
pRﬁlbackHook
?
DbRﬁlbackH™dÀr
:0),ÖDb);

1698 
	`sqlôe3_wÆ_hook
(
db
, (
pDb
->
pWÆHook
?
DbWÆH™dÀr
:0),ÖDb);

1699 
	}
}

1714 
	$DbObjCmd
(*
cd
, 
T˛_I¡îp
 *
öãΩ
, 
objc
,
T˛_Obj
 *c⁄°*
objv
){

1715 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
cd
;

1716 
choi˚
;

1717 
rc
 = 
TCL_OK
;

1718 c⁄° *
DB_°rs
[] = {

1733 
	eDB_íum
 {

1734 
DB_AUTHORIZER
, 
DB_BACKUP
, 
DB_BUSY
,

1735 
DB_CACHE
, 
DB_CHANGES
, 
DB_CLOSE
,

1736 
DB_COLLATE
, 
DB_COLLATION_NEEDED
, 
DB_COMMIT_HOOK
,

1737 
DB_COMPLETE
, 
DB_COPY
, 
DB_ENABLE_LOAD_EXTENSION
,

1738 
DB_ERRORCODE
, 
DB_EVAL
, 
DB_EXISTS
,

1739 
DB_FUNCTION
, 
DB_INCRBLOB
, 
DB_INTERRUPT
,

1740 
DB_LAST_INSERT_ROWID
, 
DB_NULLVALUE
, 
DB_ONECOLUMN
,

1741 
DB_PREUPDATE
, 
DB_PROFILE
, 
DB_PROGRESS
,

1742 
DB_REKEY
, 
DB_RESTORE
, 
DB_ROLLBACK_HOOK
,

1743 
DB_STATUS
, 
DB_TIMEOUT
, 
DB_TOTAL_CHANGES
,

1744 
DB_TRACE
, 
DB_TRANSACTION
, 
DB_UNLOCK_NOTIFY
,

1745 
DB_UPDATE_HOOK
, 
DB_VERSION
, 
DB_WAL_HOOK
,

1749 if–
objc
<2 ){

1750 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "SUBCOMMAND ...");

1751  
TCL_ERROR
;

1753 if–
	`T˛_GëIndexFromObj
(
öãΩ
, 
objv
[1], 
DB_°rs
, "›ti⁄", 0, &
choi˚
) ){

1754  
TCL_ERROR
;

1757  (
DB_íum
)
choi˚
 ){

1777 
DB_AUTHORIZER
: {

1778 #ifde‡
SQLITE_OMIT_AUTHORIZATION


1779 
	`T˛_AµídResu…
(
öãΩ
, "authorizationÇotávailable inÅhis build",

1781  
TCL_ERROR
;

1783 if–
objc
>3 ){

1784 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?CALLBACK?");

1785  
TCL_ERROR
;

1786 }if–
objc
==2 ){

1787 if–
pDb
->
zAuth
 ){

1788 
	`T˛_AµídResu…
(
öãΩ
, 
pDb
->
zAuth
, (*)0);

1791 *
zAuth
;

1792 
Àn
;

1793 if–
pDb
->
zAuth
 ){

1794 
	`T˛_Fªe
(
pDb
->
zAuth
);

1796 
zAuth
 = 
	`T˛_GëSåögFromObj
(
objv
[2], &
Àn
);

1797 if–
zAuth
 && 
Àn
>0 ){

1798 
pDb
->
zAuth
 = 
	`T˛_AŒoc
–
Àn
 + 1 );

1799 
	`mem˝y
(
pDb
->
zAuth
, zAuth, 
Àn
+1);

1801 
pDb
->
zAuth
 = 0;

1803 if–
pDb
->
zAuth
 ){

1804 (*
	tsqlôe3_auth_cb
)(

1807 
pDb
->
öãΩ
 = interp;

1808 
	`sqlôe3_£t_auth‹izî
(
pDb
->
db
,(
sqlôe3_auth_cb
)
auth_ˇŒback
,pDb);

1810 
	`sqlôe3_£t_auth‹izî
(
pDb
->
db
, 0, 0);

1823 
DB_BACKUP
: {

1824 c⁄° *
zDe°Fûe
;

1825 c⁄° *
zSrcDb
;

1826 
sqlôe3
 *
pDe°
;

1827 
sqlôe3_backup
 *
pBackup
;

1829 if–
objc
==3 ){

1830 
zSrcDb
 = "main";

1831 
zDe°Fûe
 = 
	`T˛_GëSåög
(
objv
[2]);

1832 }if–
objc
==4 ){

1833 
zSrcDb
 = 
	`T˛_GëSåög
(
objv
[2]);

1834 
zDe°Fûe
 = 
	`T˛_GëSåög
(
objv
[3]);

1836 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?DATABASE? FILENAME");

1837  
TCL_ERROR
;

1839 
rc
 = 
	`sqlôe3_›í_v2
(
zDe°Fûe
, &
pDe°
,

1840 
SQLITE_OPEN_READWRITE
 | 
SQLITE_OPEN_CREATE
| 
pDb
->
›íFœgs
, 0);

1841 if–
rc
!=
SQLITE_OK
 ){

1842 
	`T˛_AµídResu…
(
öãΩ
, "cannot openÅarget database: ",

1843 
	`sqlôe3_îrmsg
(
pDe°
), (*)0);

1844 
	`sqlôe3_˛o£
(
pDe°
);

1845  
TCL_ERROR
;

1847 
pBackup
 = 
	`sqlôe3_backup_öô
(
pDe°
, "maö", 
pDb
->
db
, 
zSrcDb
);

1848 if–
pBackup
==0 ){

1849 
	`T˛_AµídResu…
(
öãΩ
, "backup failed: ",

1850 
	`sqlôe3_îrmsg
(
pDe°
), (*)0);

1851 
	`sqlôe3_˛o£
(
pDe°
);

1852  
TCL_ERROR
;

1854  (
rc
 = 
	`sqlôe3_backup_°ï
(
pBackup
,100))==
SQLITE_OK
 ){}

1855 
	`sqlôe3_backup_föish
(
pBackup
);

1856 if–
rc
==
SQLITE_DONE
 ){

1857 
rc
 = 
TCL_OK
;

1859 
	`T˛_AµídResu…
(
öãΩ
, "backup failed: ",

1860 
	`sqlôe3_îrmsg
(
pDe°
), (*)0);

1861 
rc
 = 
TCL_ERROR
;

1863 
	`sqlôe3_˛o£
(
pDe°
);

1872 
DB_BUSY
: {

1873 if–
objc
>3 ){

1874 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "CALLBACK");

1875  
TCL_ERROR
;

1876 }if–
objc
==2 ){

1877 if–
pDb
->
zBusy
 ){

1878 
	`T˛_AµídResu…
(
öãΩ
, 
pDb
->
zBusy
, (*)0);

1881 *
zBusy
;

1882 
Àn
;

1883 if–
pDb
->
zBusy
 ){

1884 
	`T˛_Fªe
(
pDb
->
zBusy
);

1886 
zBusy
 = 
	`T˛_GëSåögFromObj
(
objv
[2], &
Àn
);

1887 if–
zBusy
 && 
Àn
>0 ){

1888 
pDb
->
zBusy
 = 
	`T˛_AŒoc
–
Àn
 + 1 );

1889 
	`mem˝y
(
pDb
->
zBusy
, zBusy, 
Àn
+1);

1891 
pDb
->
zBusy
 = 0;

1893 if–
pDb
->
zBusy
 ){

1894 
pDb
->
öãΩ
 = interp;

1895 
	`sqlôe3_busy_h™dÀr
(
pDb
->
db
, 
DbBusyH™dÀr
,ÖDb);

1897 
	`sqlôe3_busy_h™dÀr
(
pDb
->
db
, 0, 0);

1909 
DB_CACHE
: {

1910 *
subCmd
;

1911 
n
;

1913 if–
objc
<=2 ){

1914 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "cache option ?arg?");

1915  
TCL_ERROR
;

1917 
subCmd
 = 
	`T˛_GëSåögFromObj
–
objv
[2], 0 );

1918 if–*
subCmd
=='f' && 
	`°rcmp
(subCmd,"flush")==0 ){

1919 if–
objc
!=3 ){

1920 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "flush");

1921  
TCL_ERROR
;

1923 
	`ÊushStmtCache
–
pDb
 );

1925 }if–*
subCmd
=='s' && 
	`°rcmp
(subCmd,"size")==0 ){

1926 if–
objc
!=4 ){

1927 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "sizeÇ");

1928  
TCL_ERROR
;

1930 if–
TCL_ERROR
==
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
n
) ){

1931 
	`T˛_AµídResu…
–
öãΩ
, "cannot convert \"",

1932 
	`T˛_GëSåögFromObj
(
objv
[3],0), "\"Åo integer", (*)0);

1933  
TCL_ERROR
;

1935 if–
n
<0 ){

1936 
	`ÊushStmtCache
–
pDb
 );

1937 
n
 = 0;

1938 }if–
n
>
MAX_PREPARED_STMTS
 ){

1939 
n
 = 
MAX_PREPARED_STMTS
;

1941 
pDb
->
maxStmt
 = 
n
;

1945 
	`T˛_AµídResu…
–
öãΩ
, "bad option \"",

1946 
	`T˛_GëSåögFromObj
(
objv
[2],0), "\": must be flush or size",

1948  
TCL_ERROR
;

1959 
DB_CHANGES
: {

1960 
T˛_Obj
 *
pResu…
;

1961 if–
objc
!=2 ){

1962 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "");

1963  
TCL_ERROR
;

1965 
pResu…
 = 
	`T˛_GëObjResu…
(
öãΩ
);

1966 
	`T˛_SëI¡Obj
(
pResu…
, 
	`sqlôe3_ch™ges
(
pDb
->
db
));

1974 
DB_CLOSE
: {

1975 
	`T˛_DñëeComm™d
(
öãΩ
, 
	`T˛_GëSåögFromObj
(
objv
[0], 0));

1985 
DB_COLLATE
: {

1986 
SqlCﬁœã
 *
pCﬁœã
;

1987 *
zName
;

1988 *
zS¸ùt
;

1989 
nS¸ùt
;

1990 if–
objc
!=4 ){

1991 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "NAME SCRIPT");

1992  
TCL_ERROR
;

1994 
zName
 = 
	`T˛_GëSåögFromObj
(
objv
[2], 0);

1995 
zS¸ùt
 = 
	`T˛_GëSåögFromObj
(
objv
[3], &
nS¸ùt
);

1996 
pCﬁœã
 = (
SqlCﬁœã
*)
	`T˛_AŒoc
–(*pCﬁœãË+ 
nS¸ùt
 + 1 );

1997 if–
pCﬁœã
==0 )  
TCL_ERROR
;

1998 
pCﬁœã
->
öãΩ
 = interp;

1999 
pCﬁœã
->
pNext
 = 
pDb
->pCollate;

2000 
pCﬁœã
->
zS¸ùt
 = (*)&pCollate[1];

2001 
pDb
->
pCﬁœã
 =ÖCollate;

2002 
	`mem˝y
(
pCﬁœã
->
zS¸ùt
, zS¸ùt, 
nS¸ùt
+1);

2003 if–
	`sqlôe3_¸óã_cﬁœti⁄
(
pDb
->
db
, 
zName
, 
SQLITE_UTF8
,

2004 
pCﬁœã
, 
t˛SqlCﬁœã
) ){

2005 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3_îrmsg
(
pDb
->
db
), 
TCL_VOLATILE
);

2006  
TCL_ERROR
;

2017 
DB_COLLATION_NEEDED
: {

2018 if–
objc
!=3 ){

2019 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "SCRIPT");

2020  
TCL_ERROR
;

2022 if–
pDb
->
pCﬁœãNìded
 ){

2023 
	`T˛_De¸RefCou¡
(
pDb
->
pCﬁœãNìded
);

2025 
pDb
->
pCﬁœãNìded
 = 
	`T˛_Du∂iˇãObj
(
objv
[2]);

2026 
	`T˛_In¸RefCou¡
(
pDb
->
pCﬁœãNìded
);

2027 
	`sqlôe3_cﬁœti⁄_√eded
(
pDb
->
db
,ÖDb, 
t˛CﬁœãNìded
);

2038 
DB_COMMIT_HOOK
: {

2039 if–
objc
>3 ){

2040 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?CALLBACK?");

2041  
TCL_ERROR
;

2042 }if–
objc
==2 ){

2043 if–
pDb
->
zCommô
 ){

2044 
	`T˛_AµídResu…
(
öãΩ
, 
pDb
->
zCommô
, (*)0);

2047 c⁄° *
zCommô
;

2048 
Àn
;

2049 if–
pDb
->
zCommô
 ){

2050 
	`T˛_Fªe
(
pDb
->
zCommô
);

2052 
zCommô
 = 
	`T˛_GëSåögFromObj
(
objv
[2], &
Àn
);

2053 if–
zCommô
 && 
Àn
>0 ){

2054 
pDb
->
zCommô
 = 
	`T˛_AŒoc
–
Àn
 + 1 );

2055 
	`mem˝y
(
pDb
->
zCommô
, zCommô, 
Àn
+1);

2057 
pDb
->
zCommô
 = 0;

2059 if–
pDb
->
zCommô
 ){

2060 
pDb
->
öãΩ
 = interp;

2061 
	`sqlôe3_commô_hook
(
pDb
->
db
, 
DbCommôH™dÀr
,ÖDb);

2063 
	`sqlôe3_commô_hook
(
pDb
->
db
, 0, 0);

2075 
DB_COMPLETE
: {

2076 #i‚de‡
SQLITE_OMIT_COMPLETE


2077 
T˛_Obj
 *
pResu…
;

2078 
isCom∂ëe
;

2079 if–
objc
!=3 ){

2080 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "SQL");

2081  
TCL_ERROR
;

2083 
isCom∂ëe
 = 
	`sqlôe3_com∂ëe
–
	`T˛_GëSåögFromObj
(
objv
[2], 0) );

2084 
pResu…
 = 
	`T˛_GëObjResu…
(
öãΩ
);

2085 
	`T˛_SëBoﬁónObj
(
pResu…
, 
isCom∂ëe
);

2107 
DB_COPY
: {

2108 *
zTabÀ
;

2109 *
zFûe
;

2110 *
zC⁄Êi˘
;

2111 
sqlôe3_°mt
 *
pStmt
;

2112 
nCﬁ
;

2113 
nByã
;

2114 
i
, 
j
;

2115 
nSï
;

2116 
nNuŒ
;

2117 *
zSql
;

2118 *
zLöe
;

2119 **
azCﬁ
;

2120 c⁄° *
zCommô
;

2121 
FILE
 *
ö
;

2122 
löío
 = 0;

2123 
zLöeNum
[80];

2124 
T˛_Obj
 *
pResu…
;

2126 c⁄° *
zSï
;

2127 c⁄° *
zNuŒ
;

2128 if–
objc
<5 || objc>7 ){

2129 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
,

2131  
TCL_ERROR
;

2133 if–
objc
>=6 ){

2134 
zSï
 = 
	`T˛_GëSåögFromObj
(
objv
[5], 0);

2136 
zSï
 = "\t";

2138 if–
objc
>=7 ){

2139 
zNuŒ
 = 
	`T˛_GëSåögFromObj
(
objv
[6], 0);

2141 
zNuŒ
 = "";

2143 
zC⁄Êi˘
 = 
	`T˛_GëSåögFromObj
(
objv
[2], 0);

2144 
zTabÀ
 = 
	`T˛_GëSåögFromObj
(
objv
[3], 0);

2145 
zFûe
 = 
	`T˛_GëSåögFromObj
(
objv
[4], 0);

2146 
nSï
 = 
	`°æí30
(
zSï
);

2147 
nNuŒ
 = 
	`°æí30
(
zNuŒ
);

2148 if–
nSï
==0 ){

2149 
	`T˛_AµídResu…
(
öãΩ
,"Error:Çon-null separatorÑequired for copy",

2151  
TCL_ERROR
;

2153 if(
	`°rcmp
(
zC⁄Êi˘
, "rollback") != 0 &&

2154 
	`°rcmp
(
zC⁄Êi˘
, "abort" ) != 0 &&

2155 
	`°rcmp
(
zC⁄Êi˘
, "fail" ) != 0 &&

2156 
	`°rcmp
(
zC⁄Êi˘
, "ignore" ) != 0 &&

2157 
	`°rcmp
(
zC⁄Êi˘
, "replace" ) != 0 ) {

2158 
	`T˛_AµídResu…
(
öãΩ
, "Eº‹: \"", 
zC⁄Êi˘
,

2161  
TCL_ERROR
;

2163 
zSql
 = 
	`sqlôe3_m¥ötf
("SELECT * FROM '%q'", 
zTabÀ
);

2164 if–
zSql
==0 ){

2165 
	`T˛_AµídResu…
(
öãΩ
, "Eº‹:ÇÿsuchÅabÀ: ", 
zTabÀ
, (*)0);

2166  
TCL_ERROR
;

2168 
nByã
 = 
	`°æí30
(
zSql
);

2169 
rc
 = 
	`sqlôe3_¥ï¨e
(
pDb
->
db
, 
zSql
, -1, &
pStmt
, 0);

2170 
	`sqlôe3_‰ì
(
zSql
);

2171 if–
rc
 ){

2172 
	`T˛_AµídResu…
(
öãΩ
, "Eº‹: ", 
	`sqlôe3_îrmsg
(
pDb
->
db
), (*)0);

2173 
nCﬁ
 = 0;

2175 
nCﬁ
 = 
	`sqlôe3_cﬁumn_cou¡
(
pStmt
);

2177 
	`sqlôe3_föÆize
(
pStmt
);

2178 if–
nCﬁ
==0 ) {

2179  
TCL_ERROR
;

2181 
zSql
 = 
	`mÆloc
–
nByã
 + 50 + 
nCﬁ
*2 );

2182 if–
zSql
==0 ) {

2183 
	`T˛_AµídResu…
(
öãΩ
, "Error: can't malloc()", (*)0);

2184  
TCL_ERROR
;

2186 
	`sqlôe3_¢¥ötf
(
nByã
+50, 
zSql
, "INSERT OR %q INTO '%q' VALUES(?",

2187 
zC⁄Êi˘
, 
zTabÀ
);

2188 
j
 = 
	`°æí30
(
zSql
);

2189 
i
=1; i<
nCﬁ
; i++){

2190 
zSql
[
j
++] = ',';

2191 
zSql
[
j
++] = '?';

2193 
zSql
[
j
++] = ')';

2194 
zSql
[
j
] = 0;

2195 
rc
 = 
	`sqlôe3_¥ï¨e
(
pDb
->
db
, 
zSql
, -1, &
pStmt
, 0);

2196 
	`‰ì
(
zSql
);

2197 if–
rc
 ){

2198 
	`T˛_AµídResu…
(
öãΩ
, "Eº‹: ", 
	`sqlôe3_îrmsg
(
pDb
->
db
), (*)0);

2199 
	`sqlôe3_föÆize
(
pStmt
);

2200  
TCL_ERROR
;

2202 
ö
 = 
	`f›í
(
zFûe
, "rb");

2203 if–
ö
==0 ){

2204 
	`T˛_AµídResu…
(
öãΩ
, "Eº‹: c™nŸ o≥¿fûe: ", 
zFûe
, 
NULL
);

2205 
	`sqlôe3_föÆize
(
pStmt
);

2206  
TCL_ERROR
;

2208 
azCﬁ
 = 
	`mÆloc
–◊zCﬁ[0])*(
nCﬁ
+1) );

2209 if–
azCﬁ
==0 ) {

2210 
	`T˛_AµídResu…
(
öãΩ
, "Error: can't malloc()", (*)0);

2211 
	`f˛o£
(
ö
);

2212  
TCL_ERROR
;

2214 ()
	`sqlôe3_exec
(
pDb
->
db
, "BEGIN", 0, 0, 0);

2215 
zCommô
 = "COMMIT";

2216  (
zLöe
 = 
	`loˇl_gëlöe
(0, 
ö
))!=0 ){

2217 *
z
;

2218 
löío
++;

2219 
azCﬁ
[0] = 
zLöe
;

2220 
i
=0, 
z
=
zLöe
; *z; z++){

2221 if–*
z
==
zSï
[0] && 
	`°∫cmp
(z, zSï, 
nSï
)==0 ){

2222 *
z
 = 0;

2223 
i
++;

2224 if–
i
<
nCﬁ
 ){

2225 
azCﬁ
[
i
] = &
z
[
nSï
];

2226 
z
 +
nSï
-1;

2230 if–
i
+1!=
nCﬁ
 ){

2231 *
zEº
;

2232 
nEº
 = 
	`°æí30
(
zFûe
) + 200;

2233 
zEº
 = 
	`mÆloc
(
nEº
);

2234 if–
zEº
 ){

2235 
	`sqlôe3_¢¥ötf
(
nEº
, 
zEº
,

2237 
zFûe
, 
löío
, 
nCﬁ
, 
i
+1);

2238 
	`T˛_AµídResu…
(
öãΩ
, 
zEº
, (*)0);

2239 
	`‰ì
(
zEº
);

2241 
zCommô
 = "ROLLBACK";

2244 
i
=0; i<
nCﬁ
; i++){

2246 if–(
nNuŒ
>0 && 
	`°rcmp
(
azCﬁ
[
i
], 
zNuŒ
)==0)

2247 || 
	`°æí30
(
azCﬁ
[
i
])==0

2249 
	`sqlôe3_böd_nuŒ
(
pStmt
, 
i
+1);

2251 
	`sqlôe3_böd_ãxt
(
pStmt
, 
i
+1, 
azCﬁ
[i], -1, 
SQLITE_STATIC
);

2254 
	`sqlôe3_°ï
(
pStmt
);

2255 
rc
 = 
	`sqlôe3_ª£t
(
pStmt
);

2256 
	`‰ì
(
zLöe
);

2257 if–
rc
!=
SQLITE_OK
 ){

2258 
	`T˛_AµídResu…
(
öãΩ
,"Eº‹: ", 
	`sqlôe3_îrmsg
(
pDb
->
db
), (*)0);

2259 
zCommô
 = "ROLLBACK";

2263 
	`‰ì
(
azCﬁ
);

2264 
	`f˛o£
(
ö
);

2265 
	`sqlôe3_föÆize
(
pStmt
);

2266 ()
	`sqlôe3_exec
(
pDb
->
db
, 
zCommô
, 0, 0, 0);

2268 if–
zCommô
[0] == 'C' ){

2270 
pResu…
 = 
	`T˛_GëObjResu…
(
öãΩ
);

2271 
	`T˛_SëI¡Obj
(
pResu…
, 
löío
);

2272 
rc
 = 
TCL_OK
;

2275 
	`sqlôe3_¢¥ötf
((
zLöeNum
), zLöeNum,"%d",
löío
);

2276 
	`T˛_AµídResu…
(
öãΩ
,", faûed whûê¥o˚ssögÜöe: ",
zLöeNum
,

2278 
rc
 = 
TCL_ERROR
;

2289 
DB_ENABLE_LOAD_EXTENSION
: {

2290 #i‚de‡
SQLITE_OMIT_LOAD_EXTENSION


2291 
⁄off
;

2292 if–
objc
!=3 ){

2293 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "BOOLEAN");

2294  
TCL_ERROR
;

2296 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[2], &
⁄off
) ){

2297  
TCL_ERROR
;

2299 
	`sqlôe3_íabÀ_lﬂd_exãnsi⁄
(
pDb
->
db
, 
⁄off
);

2302 
	`T˛_AµídResu…
(
öãΩ
, "extensionÜoading isÅurned offát compile-time",

2304  
TCL_ERROR
;

2314 
DB_ERRORCODE
: {

2315 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`sqlôe3_îrcode
(
pDb
->
db
)));

2326 
DB_EXISTS
:

2327 
DB_ONECOLUMN
: {

2328 
DbEvÆC⁄ãxt
 
sEvÆ
;

2329 if–
objc
!=3 ){

2330 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "SQL");

2331  
TCL_ERROR
;

2334 
	`dbEvÆInô
(&
sEvÆ
, 
pDb
, 
objv
[2], 0);

2335 
rc
 = 
	`dbEvÆSãp
(&
sEvÆ
);

2336 if–
choi˚
==
DB_ONECOLUMN
 ){

2337 if–
rc
==
TCL_OK
 ){

2338 
	`T˛_SëObjResu…
(
öãΩ
, 
	`dbEvÆCﬁumnVÆue
(&
sEvÆ
, 0));

2339 }if–
rc
==
TCL_BREAK
 ){

2340 
	`T˛_Re£tResu…
(
öãΩ
);

2342 }if–
rc
==
TCL_BREAK
 ||Ñc==
TCL_OK
 ){

2343 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewBoﬁónObj
(
rc
==
TCL_OK
));

2345 
	`dbEvÆFöÆize
(&
sEvÆ
);

2347 if–
rc
==
TCL_BREAK
 ){

2348 
rc
 = 
TCL_OK
;

2362 
DB_EVAL
: {

2363 if–
objc
<3 || objc>5 ){

2364 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "SQL ?ARRAY-NAME? ?SCRIPT?");

2365  
TCL_ERROR
;

2368 if–
objc
==3 ){

2369 
DbEvÆC⁄ãxt
 
sEvÆ
;

2370 
T˛_Obj
 *
pRë
 = 
	`T˛_NewObj
();

2371 
	`T˛_In¸RefCou¡
(
pRë
);

2372 
	`dbEvÆInô
(&
sEvÆ
, 
pDb
, 
objv
[2], 0);

2373  
TCL_OK
==(
rc
 = 
	`dbEvÆSãp
(&
sEvÆ
)) ){

2374 
i
;

2375 
nCﬁ
;

2376 
	`dbEvÆRowInfo
(&
sEvÆ
, &
nCﬁ
, 0);

2377 
i
=0; i<
nCﬁ
; i++){

2378 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`dbEvÆCﬁumnVÆue
(&
sEvÆ
, 
i
));

2381 
	`dbEvÆFöÆize
(&
sEvÆ
);

2382 if–
rc
==
TCL_BREAK
 ){

2383 
	`T˛_SëObjResu…
(
öãΩ
, 
pRë
);

2384 
rc
 = 
TCL_OK
;

2386 
	`T˛_De¸RefCou¡
(
pRë
);

2388 
Clõ¡D©a
 
cd2
[2];

2389 
DbEvÆC⁄ãxt
 *
p
;

2390 
T˛_Obj
 *
pAºay
 = 0;

2391 
T˛_Obj
 *
pS¸ùt
;

2393 if–
objc
==5 && *(*)
	`T˛_GëSåög
(
objv
[3]) ){

2394 
pAºay
 = 
objv
[3];

2396 
pS¸ùt
 = 
objv
[
objc
-1];

2397 
	`T˛_In¸RefCou¡
(
pS¸ùt
);

2399 
p
 = (
DbEvÆC⁄ãxt
 *)
	`T˛_AŒoc
((DbEvalContext));

2400 
	`dbEvÆInô
(
p
, 
pDb
, 
objv
[2], 
pAºay
);

2402 
cd2
[0] = (*)
p
;

2403 
cd2
[1] = (*)
pS¸ùt
;

2404 
rc
 = 
	`DbEvÆNextCmd
(
cd2
, 
öãΩ
, 
TCL_OK
);

2415 
DB_FUNCTION
: {

2416 
Êags
 = 
SQLITE_UTF8
;

2417 
SqlFunc
 *
pFunc
;

2418 
T˛_Obj
 *
pS¸ùt
;

2419 *
zName
;

2420 
nArg
 = -1;

2421 
i
;

2422 if–
objc
<4 ){

2423 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "NAME ?SWITCHES? SCRIPT");

2424  
TCL_ERROR
;

2426 
i
=3; i<(
objc
-1); i++){

2427 c⁄° *
z
 = 
	`T˛_GëSåög
(
objv
[
i
]);

2428 
n
 = 
	`°æí30
(
z
);

2429 if–
n
>2 && 
	`°∫cmp
(
z
, "-argcount",n)==0 ){

2430 if–
i
==(
objc
-2) ){

2431 
	`T˛_AµídResu…
(
öãΩ
, "›ti⁄Ñequúe†™árgumít: ", 
z
, 0);

2432  
TCL_ERROR
;

2434 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[
i
+1], &
nArg
ËË 
TCL_ERROR
;

2435 if–
nArg
<0 ){

2436 
	`T˛_AµídResu…
(
öãΩ
, "number ofárguments must beÇon-negative",

2438  
TCL_ERROR
;

2440 
i
++;

2442 if–
n
>2 && 
	`°∫cmp
(
z
, "-deterministic",n)==0 ){

2443 
Êags
 |
SQLITE_DETERMINISTIC
;

2445 
	`T˛_AµídResu…
(
öãΩ
, "bad o±i⁄ \"", 
z
,

2448  
TCL_ERROR
;

2452 
pS¸ùt
 = 
objv
[
objc
-1];

2453 
zName
 = 
	`T˛_GëSåögFromObj
(
objv
[2], 0);

2454 
pFunc
 = 
	`födSqlFunc
(
pDb
, 
zName
);

2455 if–
pFunc
==0 )  
TCL_ERROR
;

2456 if–
pFunc
->
pS¸ùt
 ){

2457 
	`T˛_De¸RefCou¡
(
pFunc
->
pS¸ùt
);

2459 
pFunc
->
pS¸ùt
 =ÖScript;

2460 
	`T˛_In¸RefCou¡
(
pS¸ùt
);

2461 
pFunc
->
u£EvÆObjv
 = 
	`ß„ToU£EvÆObjv
(
öãΩ
, 
pS¸ùt
);

2462 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
pDb
->
db
, 
zName
, 
nArg
, 
Êags
,

2463 
pFunc
, 
t˛SqlFunc
, 0, 0);

2464 if–
rc
!=
SQLITE_OK
 ){

2465 
rc
 = 
TCL_ERROR
;

2466 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3_îrmsg
(
pDb
->
db
), 
TCL_VOLATILE
);

2474 
DB_INCRBLOB
: {

2475 #ifde‡
SQLITE_OMIT_INCRBLOB


2476 
	`T˛_AµídResu…
(
öãΩ
, "incrblobÇotávailable inÅhis build", (*)0);

2477  
TCL_ERROR
;

2479 
isRód⁄ly
 = 0;

2480 c⁄° *
zDb
 = "main";

2481 c⁄° *
zTabÀ
;

2482 c⁄° *
zCﬁumn
;

2483 
T˛_WideI¡
 
iRow
;

2486 if–
objc
>3 && 
	`°rcmp
(
	`T˛_GëSåög
(
objv
[2]), "-readonly")==0 ){

2487 
isRód⁄ly
 = 1;

2490 if–
objc
!=(5+
isRód⁄ly
) && objc!=(6+isReadonly) ){

2491 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?-readonly? ?DB? TABLE COLUMN ROWID");

2492  
TCL_ERROR
;

2495 if–
objc
==(6+
isRód⁄ly
) ){

2496 
zDb
 = 
	`T˛_GëSåög
(
objv
[2]);

2498 
zTabÀ
 = 
	`T˛_GëSåög
(
objv
[
objc
-3]);

2499 
zCﬁumn
 = 
	`T˛_GëSåög
(
objv
[
objc
-2]);

2500 
rc
 = 
	`T˛_GëWideI¡FromObj
(
öãΩ
, 
objv
[
objc
-1], &
iRow
);

2502 if–
rc
==
TCL_OK
 ){

2503 
rc
 = 
	`¸óãIn¸blobCh™√l
(

2504 
öãΩ
, 
pDb
, 
zDb
, 
zTabÀ
, 
zCﬁumn
, (
sqlôe3_öt64
)
iRow
, 
isRód⁄ly


2517 
DB_INTERRUPT
: {

2518 
	`sqlôe3_öãºu±
(
pDb
->
db
);

2530 
DB_NULLVALUE
: {

2531 if–
objc
!=2 && objc!=3 ){

2532 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "NULLVALUE");

2533  
TCL_ERROR
;

2535 if–
objc
==3 ){

2536 
Àn
;

2537 *
zNuŒ
 = 
	`T˛_GëSåögFromObj
(
objv
[2], &
Àn
);

2538 if–
pDb
->
zNuŒ
 ){

2539 
	`T˛_Fªe
(
pDb
->
zNuŒ
);

2541 if–
zNuŒ
 && 
Àn
>0 ){

2542 
pDb
->
zNuŒ
 = 
	`T˛_AŒoc
–
Àn
 + 1 );

2543 
	`mem˝y
(
pDb
->
zNuŒ
, zNuŒ, 
Àn
);

2544 
pDb
->
zNuŒ
[
Àn
] = '\0';

2546 
pDb
->
zNuŒ
 = 0;

2549 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewSåögObj
(
pDb
->
zNuŒ
, -1));

2558 
DB_LAST_INSERT_ROWID
: {

2559 
T˛_Obj
 *
pResu…
;

2560 
T˛_WideI¡
 
rowid
;

2561 if–
objc
!=2 ){

2562 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "");

2563  
TCL_ERROR
;

2565 
rowid
 = 
	`sqlôe3_œ°_ö£π_rowid
(
pDb
->
db
);

2566 
pResu…
 = 
	`T˛_GëObjResu…
(
öãΩ
);

2567 
	`T˛_SëWideI¡Obj
(
pResu…
, 
rowid
);

2580 
DB_PROGRESS
: {

2581 if–
objc
==2 ){

2582 if–
pDb
->
zProgªss
 ){

2583 
	`T˛_AµídResu…
(
öãΩ
, 
pDb
->
zProgªss
, (*)0);

2585 }if–
objc
==4 ){

2586 *
zProgªss
;

2587 
Àn
;

2588 
N
;

2589 if–
TCL_OK
!=
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
N
) ){

2590  
TCL_ERROR
;

2592 if–
pDb
->
zProgªss
 ){

2593 
	`T˛_Fªe
(
pDb
->
zProgªss
);

2595 
zProgªss
 = 
	`T˛_GëSåögFromObj
(
objv
[3], &
Àn
);

2596 if–
zProgªss
 && 
Àn
>0 ){

2597 
pDb
->
zProgªss
 = 
	`T˛_AŒoc
–
Àn
 + 1 );

2598 
	`mem˝y
(
pDb
->
zProgªss
, zProgªss, 
Àn
+1);

2600 
pDb
->
zProgªss
 = 0;

2602 #i‚de‡
SQLITE_OMIT_PROGRESS_CALLBACK


2603 if–
pDb
->
zProgªss
 ){

2604 
pDb
->
öãΩ
 = interp;

2605 
	`sqlôe3_¥ogªss_h™dÀr
(
pDb
->
db
, 
N
, 
DbProgªssH™dÀr
,ÖDb);

2607 
	`sqlôe3_¥ogªss_h™dÀr
(
pDb
->
db
, 0, 0, 0);

2611 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "N CALLBACK");

2612  
TCL_ERROR
;

2623 
DB_PROFILE
: {

2624 if–
objc
>3 ){

2625 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?CALLBACK?");

2626  
TCL_ERROR
;

2627 }if–
objc
==2 ){

2628 if–
pDb
->
zProfûe
 ){

2629 
	`T˛_AµídResu…
(
öãΩ
, 
pDb
->
zProfûe
, (*)0);

2632 *
zProfûe
;

2633 
Àn
;

2634 if–
pDb
->
zProfûe
 ){

2635 
	`T˛_Fªe
(
pDb
->
zProfûe
);

2637 
zProfûe
 = 
	`T˛_GëSåögFromObj
(
objv
[2], &
Àn
);

2638 if–
zProfûe
 && 
Àn
>0 ){

2639 
pDb
->
zProfûe
 = 
	`T˛_AŒoc
–
Àn
 + 1 );

2640 
	`mem˝y
(
pDb
->
zProfûe
, zProfûe, 
Àn
+1);

2642 
pDb
->
zProfûe
 = 0;

2644 #i‡!
	`deföed
(
SQLITE_OMIT_TRACE
Ë&& !deföed(
SQLITE_OMIT_FLOATING_POINT
)

2645 if–
pDb
->
zProfûe
 ){

2646 
pDb
->
öãΩ
 = interp;

2647 
	`sqlôe3_¥ofûe
(
pDb
->
db
, 
DbProfûeH™dÀr
,ÖDb);

2649 
	`sqlôe3_¥ofûe
(
pDb
->
db
, 0, 0);

2661 
DB_REKEY
: {

2662 #i‡
	`deföed
(
SQLITE_HAS_CODEC
Ë&& !deföed(
SQLITE_OMIT_CODEC_FROM_TCL
)

2663 
nKey
;

2664 *
pKey
;

2666 if–
objc
!=3 ){

2667 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "KEY");

2668  
TCL_ERROR
;

2670 #i‡
	`deföed
(
SQLITE_HAS_CODEC
Ë&& !deföed(
SQLITE_OMIT_CODEC_FROM_TCL
)

2671 
pKey
 = 
	`T˛_GëByãAºayFromObj
(
objv
[2], &
nKey
);

2672 
rc
 = 
	`sqlôe3_ªkey
(
pDb
->
db
, 
pKey
, 
nKey
);

2673 if–
rc
 ){

2674 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3_îr°r
(
rc
), (*)0);

2675 
rc
 = 
TCL_ERROR
;

2686 
DB_RESTORE
: {

2687 c⁄° *
zSrcFûe
;

2688 c⁄° *
zDe°Db
;

2689 
sqlôe3
 *
pSrc
;

2690 
sqlôe3_backup
 *
pBackup
;

2691 
nTimeout
 = 0;

2693 if–
objc
==3 ){

2694 
zDe°Db
 = "main";

2695 
zSrcFûe
 = 
	`T˛_GëSåög
(
objv
[2]);

2696 }if–
objc
==4 ){

2697 
zDe°Db
 = 
	`T˛_GëSåög
(
objv
[2]);

2698 
zSrcFûe
 = 
	`T˛_GëSåög
(
objv
[3]);

2700 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?DATABASE? FILENAME");

2701  
TCL_ERROR
;

2703 
rc
 = 
	`sqlôe3_›í_v2
(
zSrcFûe
, &
pSrc
,

2704 
SQLITE_OPEN_READONLY
 | 
pDb
->
›íFœgs
, 0);

2705 if–
rc
!=
SQLITE_OK
 ){

2706 
	`T˛_AµídResu…
(
öãΩ
, "cannot open source database: ",

2707 
	`sqlôe3_îrmsg
(
pSrc
), (*)0);

2708 
	`sqlôe3_˛o£
(
pSrc
);

2709  
TCL_ERROR
;

2711 
pBackup
 = 
	`sqlôe3_backup_öô
(
pDb
->
db
, 
zDe°Db
, 
pSrc
, "main");

2712 if–
pBackup
==0 ){

2713 
	`T˛_AµídResu…
(
öãΩ
, "restore failed: ",

2714 
	`sqlôe3_îrmsg
(
pDb
->
db
), (*)0);

2715 
	`sqlôe3_˛o£
(
pSrc
);

2716  
TCL_ERROR
;

2718  (
rc
 = 
	`sqlôe3_backup_°ï
(
pBackup
,100))==
SQLITE_OK


2719 || 
rc
==
SQLITE_BUSY
 ){

2720 if–
rc
==
SQLITE_BUSY
 ){

2721 if–
nTimeout
++ >= 3 ) ;

2722 
	`sqlôe3_¶ìp
(100);

2725 
	`sqlôe3_backup_föish
(
pBackup
);

2726 if–
rc
==
SQLITE_DONE
 ){

2727 
rc
 = 
TCL_OK
;

2728 }if–
rc
==
SQLITE_BUSY
 ||Ñc==
SQLITE_LOCKED
 ){

2729 
	`T˛_AµídResu…
(
öãΩ
, "restore failed: source database busy",

2731 
rc
 = 
TCL_ERROR
;

2733 
	`T˛_AµídResu…
(
öãΩ
, "restore failed: ",

2734 
	`sqlôe3_îrmsg
(
pDb
->
db
), (*)0);

2735 
rc
 = 
TCL_ERROR
;

2737 
	`sqlôe3_˛o£
(
pSrc
);

2747 
DB_STATUS
: {

2748 
v
;

2749 c⁄° *
zOp
;

2750 if–
objc
!=3 ){

2751 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "(step|sort|autoindex)");

2752  
TCL_ERROR
;

2754 
zOp
 = 
	`T˛_GëSåög
(
objv
[2]);

2755 if–
	`°rcmp
(
zOp
, "step")==0 ){

2756 
v
 = 
pDb
->
nSãp
;

2757 }if–
	`°rcmp
(
zOp
, "sort")==0 ){

2758 
v
 = 
pDb
->
nS‹t
;

2759 }if–
	`°rcmp
(
zOp
, "autoindex")==0 ){

2760 
v
 = 
pDb
->
nIndex
;

2762 
	`T˛_AµídResu…
(
öãΩ
,

2765  
TCL_ERROR
;

2767 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
v
));

2776 
DB_TIMEOUT
: {

2777 
ms
;

2778 if–
objc
!=3 ){

2779 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "MILLISECONDS");

2780  
TCL_ERROR
;

2782 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
ms
ËË 
TCL_ERROR
;

2783 
	`sqlôe3_busy_timeout
(
pDb
->
db
, 
ms
);

2793 
DB_TOTAL_CHANGES
: {

2794 
T˛_Obj
 *
pResu…
;

2795 if–
objc
!=2 ){

2796 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "");

2797  
TCL_ERROR
;

2799 
pResu…
 = 
	`T˛_GëObjResu…
(
öãΩ
);

2800 
	`T˛_SëI¡Obj
(
pResu…
, 
	`sqlôe3_tŸÆ_ch™ges
(
pDb
->
db
));

2810 
DB_TRACE
: {

2811 if–
objc
>3 ){

2812 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?CALLBACK?");

2813  
TCL_ERROR
;

2814 }if–
objc
==2 ){

2815 if–
pDb
->
zTø˚
 ){

2816 
	`T˛_AµídResu…
(
öãΩ
, 
pDb
->
zTø˚
, (*)0);

2819 *
zTø˚
;

2820 
Àn
;

2821 if–
pDb
->
zTø˚
 ){

2822 
	`T˛_Fªe
(
pDb
->
zTø˚
);

2824 
zTø˚
 = 
	`T˛_GëSåögFromObj
(
objv
[2], &
Àn
);

2825 if–
zTø˚
 && 
Àn
>0 ){

2826 
pDb
->
zTø˚
 = 
	`T˛_AŒoc
–
Àn
 + 1 );

2827 
	`mem˝y
(
pDb
->
zTø˚
, zTø˚, 
Àn
+1);

2829 
pDb
->
zTø˚
 = 0;

2831 #i‡!
	`deföed
(
SQLITE_OMIT_TRACE
Ë&& !deföed(
SQLITE_OMIT_FLOATING_POINT
)

2832 if–
pDb
->
zTø˚
 ){

2833 
pDb
->
öãΩ
 = interp;

2834 
	`sqlôe3_åa˚
(
pDb
->
db
, 
DbTø˚H™dÀr
,ÖDb);

2836 
	`sqlôe3_åa˚
(
pDb
->
db
, 0, 0);

2854 
DB_TRANSACTION
: {

2855 
T˛_Obj
 *
pS¸ùt
;

2856 c⁄° *
zBegö
 = "SAVEPOINT _tcl_transaction";

2857 if–
objc
!=3 && objc!=4 ){

2858 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "[TYPE] SCRIPT");

2859  
TCL_ERROR
;

2862 if–
pDb
->
nTønß˘i⁄
==0 && 
objc
==4 ){

2863 c⁄° *
TTYPE_°rs
[] = {

2866 
	eTTYPE_íum
 {

2867 
TTYPE_DEFERRED
, 
TTYPE_EXCLUSIVE
, 
TTYPE_IMMEDIATE


2869 
ây≥
;

2870 if–
	`T˛_GëIndexFromObj
(
öãΩ
, 
objv
[2], 
TTYPE_°rs
, "transactionÅype",

2871 0, &
ây≥
) ){

2872  
TCL_ERROR
;

2874  (
TTYPE_íum
)
ây≥
 ){

2875 
TTYPE_DEFERRED
: ; ;

2876 
TTYPE_EXCLUSIVE
: 
zBegö
 = "BEGIN EXCLUSIVE"; ;

2877 
TTYPE_IMMEDIATE
: 
zBegö
 = "BEGIN IMMEDIATE"; ;

2880 
pS¸ùt
 = 
objv
[
objc
-1];

2883 
pDb
->
dißbÀAuth
++;

2884 
rc
 = 
	`sqlôe3_exec
(
pDb
->
db
, 
zBegö
, 0, 0, 0);

2885 
pDb
->
dißbÀAuth
--;

2886 if–
rc
!=
SQLITE_OK
 ){

2887 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3_îrmsg
(
pDb
->
db
), (*)0);

2888  
TCL_ERROR
;

2890 
pDb
->
nTønß˘i⁄
++;

2897 if–
	`DbU£Nª
() ){

2898 
	`T˛_NRAddCÆlback
(
öãΩ
, 
DbTønsPo°Cmd
, 
cd
, 0, 0, 0);

2899 ()
	`T˛_NREvÆObj
(
öãΩ
, 
pS¸ùt
, 0);

2901 
rc
 = 
	`DbTønsPo°Cmd
(&
cd
, 
öãΩ
, 
	`T˛_EvÆObjEx
(öãΩ, 
pS¸ùt
, 0));

2909 
DB_UNLOCK_NOTIFY
: {

2910 #i‚de‡
SQLITE_ENABLE_UNLOCK_NOTIFY


2911 
	`T˛_AµídResu…
(
öãΩ
, "unlock_notifyÇotávailable inÅhis build",

2913 
rc
 = 
TCL_ERROR
;

2915 if–
objc
!=2 && objc!=3 ){

2916 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?SCRIPT?");

2917 
rc
 = 
TCL_ERROR
;

2919 (*
xNŸify
)(**, ) = 0;

2920 *
pNŸifyArg
 = 0;

2922 if–
pDb
->
pU∆ockNŸify
 ){

2923 
	`T˛_De¸RefCou¡
(
pDb
->
pU∆ockNŸify
);

2924 
pDb
->
pU∆ockNŸify
 = 0;

2927 if–
objc
==3 ){

2928 
xNŸify
 = 
DbU∆ockNŸify
;

2929 
pNŸifyArg
 = (*)
pDb
;

2930 
pDb
->
pU∆ockNŸify
 = 
objv
[2];

2931 
	`T˛_In¸RefCou¡
(
pDb
->
pU∆ockNŸify
);

2934 if–
	`sqlôe3_u∆ock_nŸify
(
pDb
->
db
, 
xNŸify
, 
pNŸifyArg
) ){

2935 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3_îrmsg
(
pDb
->
db
), (*)0);

2936 
rc
 = 
TCL_ERROR
;

2949 
DB_PREUPDATE
: {

2950 #i‚de‡
SQLITE_ENABLE_PREUPDATE_HOOK


2951 
	`T˛_AµídResu…
(
öãΩ
, "preupdate_hook was omittedát compile-time");

2952 
rc
 = 
TCL_ERROR
;

2954 c⁄° *
azSub
[] = {"count", "depth", "hook", "new", "old", 0};

2955 
	eDbPªupd©eSubCmd
 {

2956 
PRE_COUNT
, 
PRE_DEPTH
, 
PRE_HOOK
, 
PRE_NEW
, 
PRE_OLD


2958 
iSub
;

2960 if–
objc
<3 ){

2961 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "SUB-COMMAND ?ARGS?");

2963 if–
	`T˛_GëIndexFromObj
(
öãΩ
, 
objv
[2], 
azSub
, "sub-comm™d", 0, &
iSub
) ){

2964  
TCL_ERROR
;

2967  (
DbPªupd©eSubCmd
)
iSub
 ){

2968 
PRE_COUNT
: {

2969 
nCﬁ
 = 
	`sqlôe3_¥eupd©e_cou¡
(
pDb
->
db
);

2970 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
nCﬁ
));

2974 
PRE_HOOK
: {

2975 if–
objc
>4 ){

2976 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "hook ?SCRIPT?");

2977  
TCL_ERROR
;

2979 
	`DbHookCmd
(
öãΩ
, 
pDb
, (
objc
==4 ? 
objv
[3] : 0), &pDb->
pPªUpd©eHook
);

2983 
PRE_DEPTH
: {

2984 
T˛_Obj
 *
pRë
;

2985 if–
objc
!=3 ){

2986 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 3, 
objv
, "");

2987  
TCL_ERROR
;

2989 
pRë
 = 
	`T˛_NewI¡Obj
(
	`sqlôe3_¥eupd©e_dïth
(
pDb
->
db
));

2990 
	`T˛_SëObjResu…
(
öãΩ
, 
pRë
);

2994 
PRE_NEW
:

2995 
PRE_OLD
: {

2996 
iIdx
;

2997 
sqlôe3_vÆue
 *
pVÆue
;

2998 if–
objc
!=4 ){

2999 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 3, 
objv
, "INDEX");

3000  
TCL_ERROR
;

3002 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
iIdx
) ){

3003  
TCL_ERROR
;

3006 if–
iSub
==
PRE_OLD
 ){

3007 
rc
 = 
	`sqlôe3_¥eupd©e_ﬁd
(
pDb
->
db
, 
iIdx
, &
pVÆue
);

3009 
	`as£π
–
iSub
==
PRE_NEW
 );

3010 
rc
 = 
	`sqlôe3_¥eupd©e_√w
(
pDb
->
db
, 
iIdx
, &
pVÆue
);

3013 if–
rc
==
SQLITE_OK
 ){

3014 
T˛_Obj
 *
pObj
;

3015 
pObj
 = 
	`T˛_NewSåögObj
((*)
	`sqlôe3_vÆue_ãxt
(
pVÆue
), -1);

3016 
	`T˛_SëObjResu…
(
öãΩ
, 
pObj
);

3018 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3_îrmsg
(
pDb
->
db
), 0);

3019  
TCL_ERROR
;

3032 
DB_WAL_HOOK
:

3033 
DB_UPDATE_HOOK
:

3034 
DB_ROLLBACK_HOOK
: {

3038 
T˛_Obj
 **
µHook
 = 0;

3039 if–
choi˚
==
DB_WAL_HOOK
 ) 
µHook
 = &
pDb
->
pWÆHook
;

3040 if–
choi˚
==
DB_UPDATE_HOOK
 ) 
µHook
 = &
pDb
->
pUpd©eHook
;

3041 if–
choi˚
==
DB_ROLLBACK_HOOK
 ) 
µHook
 = &
pDb
->
pRﬁlbackHook
;

3042 if–
objc
>3 ){

3043 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?SCRIPT?");

3044  
TCL_ERROR
;

3047 
	`DbHookCmd
(
öãΩ
, 
pDb
, (
objc
==3 ? 
objv
[2] : 0), 
µHook
);

3055 
DB_VERSION
: {

3056 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3_libvîsi⁄
(), 
TCL_STATIC
);

3062  
rc
;

3063 
	}
}

3065 #i‡
SQLITE_TCL_NRE


3070 
	$DbObjCmdAd≠t‹
(

3071 *
cd
,

3072 
T˛_I¡îp
 *
öãΩ
,

3073 
objc
,

3074 
T˛_Obj
 *c⁄°*
objv


3076  
	`T˛_NRCÆlObjProc
(
öãΩ
, 
DbObjCmd
, 
cd
, 
objc
, 
objv
);

3077 
	}
}

3095 
	$DbMaö
(*
cd
, 
T˛_I¡îp
 *
öãΩ
, 
objc
,
T˛_Obj
 *c⁄°*
objv
){

3096 
SqlôeDb
 *
p
;

3097 c⁄° *
zArg
;

3098 *
zEºMsg
;

3099 
i
;

3100 c⁄° *
zFûe
;

3101 c⁄° *
zVfs
 = 0;

3102 
Êags
;

3103 
T˛_DSåög
 
å™¶©edFûíame
;

3104 #i‡
	`deföed
(
SQLITE_HAS_CODEC
Ë&& !deföed(
SQLITE_OMIT_CODEC_FROM_TCL
)

3105 *
pKey
 = 0;

3106 
nKey
 = 0;

3108 
rc
;

3116 #ifde‡
SQLITE_TCL_DEFAULT_FULLMUTEX


3117 
Êags
 = 
SQLITE_OPEN_READWRITE
 | 
SQLITE_OPEN_CREATE
 | 
SQLITE_OPEN_FULLMUTEX
;

3119 
Êags
 = 
SQLITE_OPEN_READWRITE
 | 
SQLITE_OPEN_CREATE
 | 
SQLITE_OPEN_NOMUTEX
;

3122 if–
objc
==2 ){

3123 
zArg
 = 
	`T˛_GëSåögFromObj
(
objv
[1], 0);

3124 if–
	`°rcmp
(
zArg
,"-version")==0 ){

3125 
	`T˛_AµídResu…
(
öãΩ
,
	`sqlôe3_libvîsi⁄
(), (*)0);

3126  
TCL_OK
;

3128 if–
	`°rcmp
(
zArg
,"-sourceid")==0 ){

3129 
	`T˛_AµídResu…
(
öãΩ
,
	`sqlôe3_sour˚id
(), (*)0);

3130  
TCL_OK
;

3132 if–
	`°rcmp
(
zArg
,"-has-codec")==0 ){

3133 #i‡
	`deföed
(
SQLITE_HAS_CODEC
Ë&& !deföed(
SQLITE_OMIT_CODEC_FROM_TCL
)

3134 
	`T˛_AµídResu…
(
öãΩ
,"1",(*)0);

3136 
	`T˛_AµídResu…
(
öãΩ
,"0",(*)0);

3138  
TCL_OK
;

3141 
i
=3; i+1<
objc
; i+=2){

3142 
zArg
 = 
	`T˛_GëSåög
(
objv
[
i
]);

3143 if–
	`°rcmp
(
zArg
,"-key")==0 ){

3144 #i‡
	`deföed
(
SQLITE_HAS_CODEC
Ë&& !deföed(
SQLITE_OMIT_CODEC_FROM_TCL
)

3145 
pKey
 = 
	`T˛_GëByãAºayFromObj
(
objv
[
i
+1], &
nKey
);

3147 }if–
	`°rcmp
(
zArg
, "-vfs")==0 ){

3148 
zVfs
 = 
	`T˛_GëSåög
(
objv
[
i
+1]);

3149 }if–
	`°rcmp
(
zArg
, "-readonly")==0 ){

3150 
b
;

3151 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[
i
+1], &
b
ËË 
TCL_ERROR
;

3152 if–
b
 ){

3153 
Êags
 &~(
SQLITE_OPEN_READWRITE
|
SQLITE_OPEN_CREATE
);

3154 
Êags
 |
SQLITE_OPEN_READONLY
;

3156 
Êags
 &~
SQLITE_OPEN_READONLY
;

3157 
Êags
 |
SQLITE_OPEN_READWRITE
;

3159 }if–
	`°rcmp
(
zArg
, "-create")==0 ){

3160 
b
;

3161 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[
i
+1], &
b
ËË 
TCL_ERROR
;

3162 if–
b
 && (
Êags
 & 
SQLITE_OPEN_READONLY
)==0 ){

3163 
Êags
 |
SQLITE_OPEN_CREATE
;

3165 
Êags
 &~
SQLITE_OPEN_CREATE
;

3167 }if–
	`°rcmp
(
zArg
, "-nomutex")==0 ){

3168 
b
;

3169 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[
i
+1], &
b
ËË 
TCL_ERROR
;

3170 if–
b
 ){

3171 
Êags
 |
SQLITE_OPEN_NOMUTEX
;

3172 
Êags
 &~
SQLITE_OPEN_FULLMUTEX
;

3174 
Êags
 &~
SQLITE_OPEN_NOMUTEX
;

3176 }if–
	`°rcmp
(
zArg
, "-fullmutex")==0 ){

3177 
b
;

3178 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[
i
+1], &
b
ËË 
TCL_ERROR
;

3179 if–
b
 ){

3180 
Êags
 |
SQLITE_OPEN_FULLMUTEX
;

3181 
Êags
 &~
SQLITE_OPEN_NOMUTEX
;

3183 
Êags
 &~
SQLITE_OPEN_FULLMUTEX
;

3185 }if–
	`°rcmp
(
zArg
, "-uri")==0 ){

3186 
b
;

3187 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[
i
+1], &
b
ËË 
TCL_ERROR
;

3188 if–
b
 ){

3189 
Êags
 |
SQLITE_OPEN_URI
;

3191 
Êags
 &~
SQLITE_OPEN_URI
;

3194 
	`T˛_AµídResu…
(
öãΩ
, "unknow¿›ti⁄: ", 
zArg
, (*)0);

3195  
TCL_ERROR
;

3198 if–
objc
<3 || (objc&1)!=1 ){

3199 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
,

3202 #i‡
	`deföed
(
SQLITE_HAS_CODEC
Ë&& !deföed(
SQLITE_OMIT_CODEC_FROM_TCL
)

3206  
TCL_ERROR
;

3208 
zEºMsg
 = 0;

3209 
p
 = (
SqlôeDb
*)
	`T˛_AŒoc
( (*p) );

3210 if–
p
==0 ){

3211 
	`T˛_SëResu…
(
öãΩ
, (*)"mÆlo¯Áûed", 
TCL_STATIC
);

3212  
TCL_ERROR
;

3214 
	`mem£t
(
p
, 0, (*p));

3215 
zFûe
 = 
	`T˛_GëSåögFromObj
(
objv
[2], 0);

3216 
zFûe
 = 
	`T˛_Tøn¶©eFûeName
(
öãΩ
, zFûe, &
å™¶©edFûíame
);

3217 
rc
 = 
	`sqlôe3_›í_v2
(
zFûe
, &
p
->
db
, 
Êags
, 
zVfs
);

3218 
	`T˛_DSåögFªe
(&
å™¶©edFûíame
);

3219 if–
p
->
db
 ){

3220 if–
SQLITE_OK
!=
	`sqlôe3_îrcode
(
p
->
db
) ){

3221 
zEºMsg
 = 
	`sqlôe3_m¥ötf
("%s", 
	`sqlôe3_îrmsg
(
p
->
db
));

3222 
	`sqlôe3_˛o£
(
p
->
db
);

3223 
p
->
db
 = 0;

3226 
zEºMsg
 = 
	`sqlôe3_m¥ötf
("%s", 
	`sqlôe3_îr°r
(
rc
));

3228 #i‡
	`deföed
(
SQLITE_HAS_CODEC
Ë&& !deföed(
SQLITE_OMIT_CODEC_FROM_TCL
)

3229 if–
p
->
db
 ){

3230 
	`sqlôe3_key
(
p
->
db
, 
pKey
, 
nKey
);

3233 if–
p
->
db
==0 ){

3234 
	`T˛_SëResu…
(
öãΩ
, 
zEºMsg
, 
TCL_VOLATILE
);

3235 
	`T˛_Fªe
((*)
p
);

3236 
	`sqlôe3_‰ì
(
zEºMsg
);

3237  
TCL_ERROR
;

3239 
p
->
maxStmt
 = 
NUM_PREPARED_STMTS
;

3240 
p
->
›íFœgs
 = 
Êags
 & 
SQLITE_OPEN_URI
;

3241 
p
->
öãΩ
 = interp;

3242 
zArg
 = 
	`T˛_GëSåögFromObj
(
objv
[1], 0);

3243 if–
	`DbU£Nª
() ){

3244 
	`T˛_NRCª©eComm™d
(
öãΩ
, 
zArg
, 
DbObjCmdAd≠t‹
, 
DbObjCmd
,

3245 (*)
p
, 
DbDñëeCmd
);

3247 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
zArg
, 
DbObjCmd
, (*)
p
, 
DbDñëeCmd
);

3249  
TCL_OK
;

3250 
	}
}

3256 #i‚de‡
USE_TCL_STUBS


3257 #unde‡
T˛_InôStubs


3258 
	#T˛_InôStubs
(
a
,
b
,
c
Ë
TCL_VERSION


	)

3266 #i‚de‡
PACKAGE_VERSION


3267 
	#PACKAGE_VERSION
 
SQLITE_VERSION


	)

3281 
EXTERN
 
	$Sqlôe3_Inô
(
T˛_I¡îp
 *
öãΩ
){

3282 
rc
 = 
	`T˛_InôStubs
(
öãΩ
, "8.4", 0Ë? 
TCL_OK
 : 
TCL_ERROR
;

3283 if–
rc
==
TCL_OK
 ){

3284 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlôe3", (
T˛_ObjCmdProc
*)
DbMaö
, 0, 0);

3285 #i‚de‡
SQLITE_3_SUFFIX_ONLY


3289 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlôe", (
T˛_ObjCmdProc
*)
DbMaö
, 0, 0);

3291 
rc
 = 
	`T˛_PkgProvide
(
öãΩ
, "sqlôe3", 
PACKAGE_VERSION
);

3293  
rc
;

3294 
	}
}

3295 
EXTERN
 
	$T˛sqlôe3_Inô
(
T˛_I¡îp
 *
öãΩ
){  
	`Sqlôe3_Inô
(öãΩ); 
	}
}

3296 
EXTERN
 
	$Sqlôe3_U∆ﬂd
(
T˛_I¡îp
 *
öãΩ
, 
Êags
){  
TCL_OK
; 
	}
}

3297 
EXTERN
 
	$T˛sqlôe3_U∆ﬂd
(
T˛_I¡îp
 *
öãΩ
, 
Êags
){  
TCL_OK
; 
	}
}

3303 
EXTERN
 
	$Sqlôe3_Sa„Inô
(
T˛_I¡îp
 *
öãΩ
){  
TCL_ERROR
; 
	}
}

3304 
EXTERN
 
	$Sqlôe3_Sa„U∆ﬂd
(
T˛_I¡îp
 *
öãΩ
, 
Êags
){ 
TCL_ERROR
;
	}
}

3308 #i‚de‡
SQLITE_3_SUFFIX_ONLY


3309 
	$Sqlôe_Inô
(
T˛_I¡îp
 *
öãΩ
){  
	`Sqlôe3_Inô
(öãΩ); 
	}
}

3310 
	$T˛sqlôe_Inô
(
T˛_I¡îp
 *
öãΩ
){  
	`Sqlôe3_Inô
(öãΩ); 
	}
}

3311 
	$Sqlôe_U∆ﬂd
(
T˛_I¡îp
 *
öãΩ
, 
Êags
){  
TCL_OK
; 
	}
}

3312 
	$T˛sqlôe_U∆ﬂd
(
T˛_I¡îp
 *
öãΩ
, 
Êags
){  
TCL_OK
; 
	}
}

3315 #ifde‡
TCLSH


3324 #i‡
deföed
(
SQLITE_TEST
Ë|| deföed(
SQLITE_TCLMD5
)

3350 #i‚de‡
uöt32


3351 
	#uöt32
 

	)

3354 
	sMD5C⁄ãxt
 {

3355 
	misInô
;

3356 
uöt32
 
	mbuf
[4];

3357 
uöt32
 
	mbôs
[2];

3358 
	mö
[64];

3360 
MD5C⁄ãxt
 
	tMD5C⁄ãxt
;

3365 
	$byãRevî£
 (*
buf
, 
l⁄gs
){

3366 
uöt32
 
t
;

3368 
t
 = (
uöt32
)(()
buf
[3]<<8 | buf[2]) << 16 |

3369 (()
buf
[1]<<8 | buf[0]);

3370 *(
uöt32
 *)
buf
 = 
t
;

3371 
buf
 += 4;

3372 } --
l⁄gs
);

3373 
	}
}

3377 
	#F1
(
x
, 
y
, 
z
Ë(z ^ (x & (y ^ z)))

	)

3378 
	#F2
(
x
, 
y
, 
z
Ë
	`F1
(z, x, y)

	)

3379 
	#F3
(
x
, 
y
, 
z
Ë(x ^ y ^ z)

	)

3380 
	#F4
(
x
, 
y
, 
z
Ë(y ^ (x | ~z))

	)

3383 
	#MD5STEP
(
f
, 
w
, 
x
, 
y
, 
z
, 
d©a
, 
s
) \

3384 –
w
 +
	`f
(
x
, 
y
, 
z
Ë+ 
d©a
, w = w<<
s
 | w>>(32-s), w +x )

	)

3391 
	$MD5Tønsf‹m
(
uöt32
 
buf
[4], c⁄° uöt32 
ö
[16]){

3392 
uöt32
 
a
, 
b
, 
c
, 
d
;

3394 
a
 = 
buf
[0];

3395 
b
 = 
buf
[1];

3396 
c
 = 
buf
[2];

3397 
d
 = 
buf
[3];

3399 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 0]+0xd76aa478, 7);

3400 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 1]+0xe8c7b756, 12);

3401 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 2]+0x242070db, 17);

3402 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 3]+0xc1bdceee, 22);

3403 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 4]+0xf57c0faf, 7);

3404 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 5]+0x4787c62a, 12);

3405 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 6]+0xa8304613, 17);

3406 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 7]+0xfd469501, 22);

3407 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 8]+0x698098d8, 7);

3408 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 9]+0x8b44f7af, 12);

3409 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[10]+0xffff5bb1, 17);

3410 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[11]+0x895cd7be, 22);

3411 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[12]+0x6b901122, 7);

3412 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[13]+0xfd987193, 12);

3413 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[14]+0xa679438e, 17);

3414 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[15]+0x49b40821, 22);

3416 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 1]+0xf61e2562, 5);

3417 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 6]+0xc040b340, 9);

3418 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[11]+0x265e5a51, 14);

3419 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 0]+0xe9b6c7aa, 20);

3420 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 5]+0xd62f105d, 5);

3421 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[10]+0x02441453, 9);

3422 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[15]+0xd8a1e681, 14);

3423 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 4]+0xe7d3fbc8, 20);

3424 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 9]+0x21e1cde6, 5);

3425 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[14]+0xc33707d6, 9);

3426 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 3]+0xf4d50d87, 14);

3427 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 8]+0x455a14ed, 20);

3428 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[13]+0xa9e3e905, 5);

3429 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 2]+0xfcefa3f8, 9);

3430 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 7]+0x676f02d9, 14);

3431 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[12]+0x8d2a4c8a, 20);

3433 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 5]+0xfffa3942, 4);

3434 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 8]+0x8771f681, 11);

3435 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[11]+0x6d9d6122, 16);

3436 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[14]+0xfde5380c, 23);

3437 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 1]+0xa4beea44, 4);

3438 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 4]+0x4bdecfa9, 11);

3439 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 7]+0xf6bb4b60, 16);

3440 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[10]+0xbebfbc70, 23);

3441 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[13]+0x289b7ec6, 4);

3442 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 0]+0xeaa127fa, 11);

3443 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 3]+0xd4ef3085, 16);

3444 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 6]+0x04881d05, 23);

3445 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 9]+0xd9d4d039, 4);

3446 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[12]+0xe6db99e5, 11);

3447 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[15]+0x1fa27cf8, 16);

3448 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 2]+0xc4ac5665, 23);

3450 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 0]+0xf4292244, 6);

3451 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 7]+0x432aff97, 10);

3452 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[14]+0xab9423a7, 15);

3453 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 5]+0xfc93a039, 21);

3454 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[12]+0x655b59c3, 6);

3455 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 3]+0x8f0ccc92, 10);

3456 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[10]+0xffeff47d, 15);

3457 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 1]+0x85845dd1, 21);

3458 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 8]+0x6fa87e4f, 6);

3459 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[15]+0xfe2ce6e0, 10);

3460 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 6]+0xa3014314, 15);

3461 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[13]+0x4e0811a1, 21);

3462 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 4]+0xf7537e82, 6);

3463 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[11]+0xbd3af235, 10);

3464 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 2]+0x2ad7d2bb, 15);

3465 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 9]+0xeb86d391, 21);

3467 
buf
[0] +
a
;

3468 
buf
[1] +
b
;

3469 
buf
[2] +
c
;

3470 
buf
[3] +
d
;

3471 
	}
}

3477 
	$MD5Inô
(
MD5C⁄ãxt
 *
˘x
){

3478 
˘x
->
isInô
 = 1;

3479 
˘x
->
buf
[0] = 0x67452301;

3480 
˘x
->
buf
[1] = 0xefcdab89;

3481 
˘x
->
buf
[2] = 0x98badcfe;

3482 
˘x
->
buf
[3] = 0x10325476;

3483 
˘x
->
bôs
[0] = 0;

3484 
˘x
->
bôs
[1] = 0;

3485 
	}
}

3492 
	$MD5Upd©e
(
MD5C⁄ãxt
 *
˘x
, c⁄° *
buf
, 
Àn
){

3493 
uöt32
 
t
;

3497 
t
 = 
˘x
->
bôs
[0];

3498 i‡((
˘x
->
bôs
[0] = 
t
 + ((
uöt32
)
Àn
 << 3)) <Å)

3499 
˘x
->
bôs
[1]++;

3500 
˘x
->
bôs
[1] +
Àn
 >> 29;

3502 
t
 = (t >> 3) & 0x3f;

3506 i‡–
t
 ) {

3507 *
p
 = (*)
˘x
->
ö
 + 
t
;

3509 
t
 = 64-t;

3510 i‡(
Àn
 < 
t
) {

3511 
	`mem˝y
(
p
, 
buf
, 
Àn
);

3514 
	`mem˝y
(
p
, 
buf
, 
t
);

3515 
	`byãRevî£
(
˘x
->
ö
, 16);

3516 
	`MD5Tønsf‹m
(
˘x
->
buf
, (
uöt32
 *)˘x->
ö
);

3517 
buf
 +
t
;

3518 
Àn
 -
t
;

3523 
Àn
 >= 64) {

3524 
	`mem˝y
(
˘x
->
ö
, 
buf
, 64);

3525 
	`byãRevî£
(
˘x
->
ö
, 16);

3526 
	`MD5Tønsf‹m
(
˘x
->
buf
, (
uöt32
 *)˘x->
ö
);

3527 
buf
 += 64;

3528 
Àn
 -= 64;

3533 
	`mem˝y
(
˘x
->
ö
, 
buf
, 
Àn
);

3534 
	}
}

3540 
	$MD5FöÆ
(
dige°
[16], 
MD5C⁄ãxt
 *
˘x
){

3541 
cou¡
;

3542 *
p
;

3545 
cou¡
 = (
˘x
->
bôs
[0] >> 3) & 0x3F;

3549 
p
 = 
˘x
->
ö
 + 
cou¡
;

3550 *
p
++ = 0x80;

3553 
cou¡
 = 64 - 1 - count;

3556 i‡(
cou¡
 < 8) {

3558 
	`mem£t
(
p
, 0, 
cou¡
);

3559 
	`byãRevî£
(
˘x
->
ö
, 16);

3560 
	`MD5Tønsf‹m
(
˘x
->
buf
, (
uöt32
 *)˘x->
ö
);

3563 
	`mem£t
(
˘x
->
ö
, 0, 56);

3566 
	`mem£t
(
p
, 0, 
cou¡
-8);

3568 
	`byãRevî£
(
˘x
->
ö
, 14);

3571 
	`mem˝y
(
˘x
->
ö
 + 14*4, ctx->
bôs
, 8);

3573 
	`MD5Tønsf‹m
(
˘x
->
buf
, (
uöt32
 *)˘x->
ö
);

3574 
	`byãRevî£
((*)
˘x
->
buf
, 4);

3575 
	`mem˝y
(
dige°
, 
˘x
->
buf
, 16);

3576 
	}
}

3581 
	$MD5Dige°ToBa£16
(*
dige°
, *
zBuf
){

3582 c⁄° 
zEncode
[] = "0123456789abcdef";

3583 
i
, 
j
;

3585 
j
=
i
=0; i<16; i++){

3586 
a
 = 
dige°
[
i
];

3587 
zBuf
[
j
++] = 
zEncode
[(
a
>>4)&0xf];

3588 
zBuf
[
j
++] = 
zEncode
[
a
 & 0xf];

3590 
zBuf
[
j
] = 0;

3591 
	}
}

3599 
	$MD5Dige°ToBa£10x8
(
dige°
[16], 
zDige°
[50]){

3600 
i
, 
j
;

3601 
x
;

3602 
i
=
j
=0; i<16; i+=2){

3603 
x
 = 
dige°
[
i
]*256 + digest[i+1];

3604 if–
i
>0 ) 
zDige°
[
j
++] = '-';

3605 
	`sqlôe3_¢¥ötf
(50-
j
, &
zDige°
[j], "%05u", 
x
);

3606 
j
 += 5;

3608 
zDige°
[
j
] = 0;

3609 
	}
}

3615 
	$md5_cmd
(*
cd
, 
T˛_I¡îp
 *
öãΩ
, 
¨gc
, c⁄° **
¨gv
){

3616 
MD5C⁄ãxt
 
˘x
;

3617 
dige°
[16];

3618 
zBuf
[50];

3619 (*
c⁄vîãr
)(*, *);

3621 if–
¨gc
!=2 ){

3622 
	`T˛_AµídResu…
(
öãΩ
,"wr⁄g #árgs: should bê\"", 
¨gv
[0],

3624  
TCL_ERROR
;

3626 
	`MD5Inô
(&
˘x
);

3627 
	`MD5Upd©e
(&
˘x
, (*)
¨gv
[1], ()
	`°æí
(argv[1]));

3628 
	`MD5FöÆ
(
dige°
, &
˘x
);

3629 
c⁄vîãr
 = ((*)(*,*))
cd
;

3630 
	`c⁄vîãr
(
dige°
, 
zBuf
);

3631 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, (*)0);

3632  
TCL_OK
;

3633 
	}
}

3639 
	$md5fûe_cmd
(*
cd
, 
T˛_I¡îp
*
öãΩ
, 
¨gc
, c⁄° **
¨gv
){

3640 
FILE
 *
ö
;

3641 
MD5C⁄ãxt
 
˘x
;

3642 (*
c⁄vîãr
)(*, *);

3643 
dige°
[16];

3644 
zBuf
[10240];

3646 if–
¨gc
!=2 ){

3647 
	`T˛_AµídResu…
(
öãΩ
,"wr⁄g #árgs: should bê\"", 
¨gv
[0],

3649  
TCL_ERROR
;

3651 
ö
 = 
	`f›í
(
¨gv
[1],"rb");

3652 if–
ö
==0 ){

3653 
	`T˛_AµídResu…
(
öãΩ
,"u«bÀÅÿ›í fûê\"", 
¨gv
[1],

3655  
TCL_ERROR
;

3657 
	`MD5Inô
(&
˘x
);

3659 
n
;

3660 
n
 = ()
	`‰ód
(
zBuf
, 1, (zBuf), 
ö
);

3661 if–
n
<=0 ) ;

3662 
	`MD5Upd©e
(&
˘x
, (*)
zBuf
, ()
n
);

3664 
	`f˛o£
(
ö
);

3665 
	`MD5FöÆ
(
dige°
, &
˘x
);

3666 
c⁄vîãr
 = ((*)(*,*))
cd
;

3667 
	`c⁄vîãr
(
dige°
, 
zBuf
);

3668 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, (*)0);

3669  
TCL_OK
;

3670 
	}
}

3676 
	$Md5_Inô
(
T˛_I¡îp
 *
öãΩ
){

3677 
	`T˛_Cª©eComm™d
(
öãΩ
, "md5", (
T˛_CmdProc
*)
md5_cmd
,

3678 
MD5Dige°ToBa£16
, 0);

3679 
	`T˛_Cª©eComm™d
(
öãΩ
, "md5-10x8", (
T˛_CmdProc
*)
md5_cmd
,

3680 
MD5Dige°ToBa£10x8
, 0);

3681 
	`T˛_Cª©eComm™d
(
öãΩ
, "md5fûe", (
T˛_CmdProc
*)
md5fûe_cmd
,

3682 
MD5Dige°ToBa£16
, 0);

3683 
	`T˛_Cª©eComm™d
(
öãΩ
, "md5fûe-10x8", (
T˛_CmdProc
*)
md5fûe_cmd
,

3684 
MD5Dige°ToBa£10x8
, 0);

3685  
TCL_OK
;

3686 
	}
}

3689 #i‡
deföed
(
SQLITE_TEST
)

3694 
	$md5°ï
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

3695 
MD5C⁄ãxt
 *
p
;

3696 
i
;

3697 if–
¨gc
<1 ) ;

3698 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

3699 if–
p
==0 ) ;

3700 if–!
p
->
isInô
 ){

3701 
	`MD5Inô
(
p
);

3703 
i
=0; i<
¨gc
; i++){

3704 c⁄° *
zD©a
 = (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[
i
]);

3705 if–
zD©a
 ){

3706 
	`MD5Upd©e
(
p
, (*)
zD©a
, ()
	`°æí
(zData));

3709 
	}
}

3710 
	$md5föÆize
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
){

3711 
MD5C⁄ãxt
 *
p
;

3712 
dige°
[16];

3713 
zBuf
[33];

3714 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

3715 
	`MD5FöÆ
(
dige°
,
p
);

3716 
	`MD5Dige°ToBa£16
(
dige°
, 
zBuf
);

3717 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zBuf
, -1, 
SQLITE_TRANSIENT
);

3718 
	}
}

3719 
	$Md5_Regi°î
(
sqlôe3
 *
db
){

3720 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "md5sum", -1, 
SQLITE_UTF8
, 0, 0,

3721 
md5°ï
, 
md5föÆize
);

3722 
	`sqlôe3_ovîlﬂd_fun˘i⁄
(
db
, "md5sum", -1);

3723  
rc
;

3724 
	}
}

3734 #i‡
TCLSH
==1

3735 c⁄° *
	$t˛sh_maö_lo›
(){

3736 c⁄° 
zMaölo›
[] =

3758  
zMaölo›
;

3759 
	}
}

3761 #i‡
TCLSH
==2

3762 c⁄° *
t˛sh_maö_lo›
();

3765 #ifde‡
SQLITE_TEST


3766 
öô_Æl
(
T˛_I¡îp
 *);

3767 
	$öô_Æl_cmd
(

3768 
Clõ¡D©a
 
cd
,

3769 
T˛_I¡îp
 *
öãΩ
,

3770 
objc
,

3771 
T˛_Obj
 *
CONST
 
objv
[]

3774 
T˛_I¡îp
 *
¶ave
;

3775 if–
objc
!=2 ){

3776 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "SLAVE");

3777  
TCL_ERROR
;

3780 
¶ave
 = 
	`T˛_GëSœve
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]));

3781 if–!
¶ave
 ){

3782  
TCL_ERROR
;

3785 
	`öô_Æl
(
¶ave
);

3786  
TCL_OK
;

3787 
	}
}

3797 
	$db_u£_Àgacy_¥ï¨e_cmd
(

3798 
Clõ¡D©a
 
cd
,

3799 
T˛_I¡îp
 *
öãΩ
,

3800 
objc
,

3801 
T˛_Obj
 *
CONST
 
objv
[]

3803 
T˛_CmdInfo
 
cmdInfo
;

3804 
SqlôeDb
 *
pDb
;

3805 
bPª∑ª
;

3807 if–
objc
!=3 ){

3808 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB BOOLEAN");

3809  
TCL_ERROR
;

3812 if–!
	`T˛_GëComm™dInfo
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
cmdInfo
) ){

3813 
	`T˛_AµídResu…
(
öãΩ
, "nÿsuch db: ", 
	`T˛_GëSåög
(
objv
[1]), (*)0);

3814  
TCL_ERROR
;

3816 
pDb
 = (
SqlôeDb
*)
cmdInfo
.
objClõ¡D©a
;

3817 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[2], &
bPª∑ª
) ){

3818  
TCL_ERROR
;

3821 
pDb
->
bLegacyPª∑ª
 = 
bPª∑ª
;

3823 
	`T˛_Re£tResu…
(
öãΩ
);

3824  
TCL_OK
;

3825 
	}
}

3834 
	$db_œ°_°mt_±r
(

3835 
Clõ¡D©a
 
cd
,

3836 
T˛_I¡îp
 *
öãΩ
,

3837 
objc
,

3838 
T˛_Obj
 *
CONST
 
objv
[]

3840 
	`sqlôe3Te°MakePoöãrSå
(
T˛_I¡îp
*, *, *);

3841 
T˛_CmdInfo
 
cmdInfo
;

3842 
SqlôeDb
 *
pDb
;

3843 
sqlôe3_°mt
 *
pStmt
 = 0;

3844 
zBuf
[100];

3846 if–
objc
!=2 ){

3847 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB");

3848  
TCL_ERROR
;

3851 if–!
	`T˛_GëComm™dInfo
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
cmdInfo
) ){

3852 
	`T˛_AµídResu…
(
öãΩ
, "nÿsuch db: ", 
	`T˛_GëSåög
(
objv
[1]), (*)0);

3853  
TCL_ERROR
;

3855 
pDb
 = (
SqlôeDb
*)
cmdInfo
.
objClõ¡D©a
;

3857 if–
pDb
->
°mtLi°
 ) 
pStmt
 =ÖDb->stmtList->pStmt;

3858 if–
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
pStmt
) ){

3859  
TCL_ERROR
;

3861 
	`T˛_SëResu…
(
öãΩ
, 
zBuf
, 
TCL_VOLATILE
);

3863  
TCL_OK
;

3864 
	}
}

3878 
	$öô_Æl
(
T˛_I¡îp
 *
öãΩ
){

3879 
	`Sqlôe3_Inô
(
öãΩ
);

3881 #i‡
	`deföed
(
SQLITE_TEST
Ë|| deföed(
SQLITE_TCLMD5
)

3882 
	`Md5_Inô
(
öãΩ
);

3885 #ifde‡
SQLITE_TEST


3887 
	`Sqlôec⁄fig_Inô
(
T˛_I¡îp
*);

3888 
	`Sqlôëe°1_Inô
(
T˛_I¡îp
*);

3889 
	`Sqlôëe°2_Inô
(
T˛_I¡îp
*);

3890 
	`Sqlôëe°3_Inô
(
T˛_I¡îp
*);

3891 
	`Sqlôëe°4_Inô
(
T˛_I¡îp
*);

3892 
	`Sqlôëe°5_Inô
(
T˛_I¡îp
*);

3893 
	`Sqlôëe°6_Inô
(
T˛_I¡îp
*);

3894 
	`Sqlôëe°7_Inô
(
T˛_I¡îp
*);

3895 
	`Sqlôëe°8_Inô
(
T˛_I¡îp
*);

3896 
	`Sqlôëe°9_Inô
(
T˛_I¡îp
*);

3897 
	`Sqlôëe°async_Inô
(
T˛_I¡îp
*);

3898 
	`Sqlôëe°_aut€xt_Inô
(
T˛_I¡îp
*);

3899 
	`Sqlôëe°_blob_Inô
(
T˛_I¡îp
*);

3900 
	`Sqlôëe°_demovfs_Inô
(
T˛_I¡îp
 *);

3901 
	`Sqlôëe°_func_Inô
(
T˛_I¡îp
*);

3902 
	`Sqlôëe°_hexio_Inô
(
T˛_I¡îp
*);

3903 
	`Sqlôëe°_öô_Inô
(
T˛_I¡îp
*);

3904 
	`Sqlôëe°_mÆloc_Inô
(
T˛_I¡îp
*);

3905 
	`Sqlôëe°_muãx_Inô
(
T˛_I¡îp
*);

3906 
	`Sqlôëe°schema_Inô
(
T˛_I¡îp
*);

3907 
	`Sqlôëe°s£_Inô
(
T˛_I¡îp
*);

3908 
	`Sqlôëe°t˛v¨_Inô
(
T˛_I¡îp
*);

3909 
	`Sqlôëe°fs_Inô
(
T˛_I¡îp
*);

3910 
	`Sqlôëe°Thªad_Inô
(
T˛_I¡îp
*);

3911 
	`Sqlôëe°O√fûe_Inô
();

3912 
	`Sqlôëe°Osö°_Inô
(
T˛_I¡îp
*);

3913 
	`Sqlôëe°backup_Inô
(
T˛_I¡îp
*);

3914 
	`Sqlôëe°öèºay_Inô
(
T˛_I¡îp
*);

3915 
	`Sqlôëe°vfs_Inô
(
T˛_I¡îp
 *);

3916 
	`Sqlôëe°πªe_Inô
(
T˛_I¡îp
*);

3917 
	`SqlôequŸa_Inô
(
T˛_I¡îp
*);

3918 
	`Sqlôemu…ùÀx_Inô
(
T˛_I¡îp
*);

3919 
	`SqlôeSu≥æock_Inô
(
T˛_I¡îp
*);

3920 
	`Sqlôëe°SysˇŒ_Inô
(
T˛_I¡îp
*);

3921 #i‡
	`deföed
(
SQLITE_ENABLE_SESSION
Ë&& deföed(
SQLITE_ENABLE_PREUPDATE_HOOK
)

3922 
	`Te°Sessi⁄_Inô
(
T˛_I¡îp
*);

3924 
	`Fts5t˛_Inô
(
T˛_I¡îp
 *);

3925 
	`SqlôeRbu_Inô
(
T˛_I¡îp
*);

3926 
	`Sqlôëe°t˛_Inô
(
T˛_I¡îp
*);

3927 #i‡
	`deföed
(
SQLITE_ENABLE_FTS3
Ë|| deföed(
SQLITE_ENABLE_FTS4
)

3928 
	`Sqlôëe°·s3_Inô
(
T˛_I¡îp
 *
öãΩ
);

3931 #ifde‡
SQLITE_ENABLE_ZIPVFS


3932 
	`Zùvfs_Inô
(
T˛_I¡îp
*);

3933 
	`Zùvfs_Inô
(
öãΩ
);

3936 
	`Sqlôec⁄fig_Inô
(
öãΩ
);

3937 
	`Sqlôëe°1_Inô
(
öãΩ
);

3938 
	`Sqlôëe°2_Inô
(
öãΩ
);

3939 
	`Sqlôëe°3_Inô
(
öãΩ
);

3940 
	`Sqlôëe°4_Inô
(
öãΩ
);

3941 
	`Sqlôëe°5_Inô
(
öãΩ
);

3942 
	`Sqlôëe°6_Inô
(
öãΩ
);

3943 
	`Sqlôëe°7_Inô
(
öãΩ
);

3944 
	`Sqlôëe°8_Inô
(
öãΩ
);

3945 
	`Sqlôëe°9_Inô
(
öãΩ
);

3946 
	`Sqlôëe°async_Inô
(
öãΩ
);

3947 
	`Sqlôëe°_aut€xt_Inô
(
öãΩ
);

3948 
	`Sqlôëe°_blob_Inô
(
öãΩ
);

3949 
	`Sqlôëe°_demovfs_Inô
(
öãΩ
);

3950 
	`Sqlôëe°_func_Inô
(
öãΩ
);

3951 
	`Sqlôëe°_hexio_Inô
(
öãΩ
);

3952 
	`Sqlôëe°_öô_Inô
(
öãΩ
);

3953 
	`Sqlôëe°_mÆloc_Inô
(
öãΩ
);

3954 
	`Sqlôëe°_muãx_Inô
(
öãΩ
);

3955 
	`Sqlôëe°schema_Inô
(
öãΩ
);

3956 
	`Sqlôëe°t˛v¨_Inô
(
öãΩ
);

3957 
	`Sqlôëe°fs_Inô
(
öãΩ
);

3958 
	`Sqlôëe°Thªad_Inô
(
öãΩ
);

3959 
	`Sqlôëe°O√fûe_Inô
(
öãΩ
);

3960 
	`Sqlôëe°Osö°_Inô
(
öãΩ
);

3961 
	`Sqlôëe°backup_Inô
(
öãΩ
);

3962 
	`Sqlôëe°öèºay_Inô
(
öãΩ
);

3963 
	`Sqlôëe°vfs_Inô
(
öãΩ
);

3964 
	`Sqlôëe°πªe_Inô
(
öãΩ
);

3965 
	`SqlôequŸa_Inô
(
öãΩ
);

3966 
	`Sqlôemu…ùÀx_Inô
(
öãΩ
);

3967 
	`SqlôeSu≥æock_Inô
(
öãΩ
);

3968 
	`Sqlôëe°SysˇŒ_Inô
(
öãΩ
);

3969 #i‡
	`deföed
(
SQLITE_ENABLE_SESSION
Ë&& deföed(
SQLITE_ENABLE_PREUPDATE_HOOK
)

3970 
	`Te°Sessi⁄_Inô
(
öãΩ
);

3972 
	`Fts5t˛_Inô
(
öãΩ
);

3973 
	`SqlôeRbu_Inô
(
öãΩ
);

3974 
	`Sqlôëe°t˛_Inô
(
öãΩ
);

3976 #i‡
	`deföed
(
SQLITE_ENABLE_FTS3
Ë|| deföed(
SQLITE_ENABLE_FTS4
)

3977 
	`Sqlôëe°·s3_Inô
(
öãΩ
);

3980 
	`T˛_Cª©eObjComm™d
(

3981 
öãΩ
, "lﬂd_ã°fixtuª_exãnsi⁄s", 
öô_Æl_cmd
, 0, 0

3983 
	`T˛_Cª©eObjComm™d
(

3984 
öãΩ
, "db_u£_Àgacy_¥ï¨e", 
db_u£_Àgacy_¥ï¨e_cmd
, 0, 0

3986 
	`T˛_Cª©eObjComm™d
(

3987 
öãΩ
, "db_œ°_°mt_±r", 
db_œ°_°mt_±r
, 0, 0

3990 #ifde‡
SQLITE_SSE


3991 
	`Sqlôëe°s£_Inô
(
öãΩ
);

3995 
	}
}

3998 #i‡
deföed
(
unix
)

3999 
	~<sys/ªsour˚.h
>

4002 
	#TCLSH_MAIN
 
maö


	)

4003 
	$TCLSH_MAIN
(
¨gc
, **
¨gv
){

4004 
T˛_I¡îp
 *
öãΩ
;

4006 #i‡!
	`deföed
(
_WIN32_WCE
)

4007 if–
	`gëív
("BREAK") ){

4008 
	`Ârötf
(
°dîr
,

4010 
	`GETPID
());

4011 
	`fgëc
(
°dö
);

4017 #i‡
	`deföed
(
SQLITE_TEST
Ë&& deföed(
unix
)

4018 { 
æimô
 
x
;

4019 
	`gëæimô
(
RLIMIT_CORE
, &
x
);

4020 
x
.
æim_cur
 = x.
æim_max
;

4021 
	`£ålimô
(
RLIMIT_CORE
, &
x
);

4029 
	`sqlôe3_shutdown
();

4031 
	`T˛_FödExecuèbÀ
(
¨gv
[0]);

4032 
	`T˛_SëSy°emEncodög
(
NULL
, "utf-8");

4033 
öãΩ
 = 
	`T˛_Cª©eI¡îp
();

4035 #i‡
TCLSH
==2

4036 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_SINGLETHREAD
);

4039 
	`öô_Æl
(
öãΩ
);

4040 if–
¨gc
>=2 ){

4041 
i
;

4042 
zArgc
[32];

4043 
	`sqlôe3_¢¥ötf
((
zArgc
), zArgc, "%d", 
¨gc
-(3-
TCLSH
));

4044 
	`T˛_SëV¨
(
öãΩ
,"¨gc", 
zArgc
, 
TCL_GLOBAL_ONLY
);

4045 
	`T˛_SëV¨
(
öãΩ
,"¨gv0",
¨gv
[1],
TCL_GLOBAL_ONLY
);

4046 
	`T˛_SëV¨
(
öãΩ
,"¨gv", "", 
TCL_GLOBAL_ONLY
);

4047 
i
=3-
TCLSH
; i<
¨gc
; i++){

4048 
	`T˛_SëV¨
(
öãΩ
, "¨gv", 
¨gv
[
i
],

4049 
TCL_GLOBAL_ONLY
 | 
TCL_LIST_ELEMENT
 | 
TCL_APPEND_VALUE
);

4051 if–
TCLSH
==1 && 
	`T˛_EvÆFûe
(
öãΩ
, 
¨gv
[1])!=
TCL_OK
 ){

4052 c⁄° *
zInfo
 = 
	`T˛_GëV¨
(
öãΩ
, "îr‹Info", 
TCL_GLOBAL_ONLY
);

4053 if–
zInfo
==0 ) zInfÿ
	`T˛_GëSåögResu…
(
öãΩ
);

4054 
	`Ârötf
(
°dîr
,"%s: %s\n", *
¨gv
, 
zInfo
);

4058 if–
TCLSH
==2 || 
¨gc
<=1 ){

4059 
	`T˛_GlobÆEvÆ
(
öãΩ
, 
	`t˛sh_maö_lo›
());

4062 
	}
}

	@test1.c

16 
	~"sqlôeI¡.h
"

17 #i‡
SQLITE_OS_WIN


18 
	~"os_wö.h
"

21 
	~"vdbeI¡.h
"

22 
	~"t˛.h
"

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

32 
	sSqlôeDb
 {

33 
sqlôe3
 *
	mdb
;

40 
	$ã°HexToI¡
(
h
){

41 if–
h
>='0' && h<='9' ){

42  
h
 - '0';

43 }if–
h
>='a' && h<='f' ){

44  
h
 - 'a' + 10;

46 
	`as£π
–
h
>='A' && h<='F' );

47  
h
 - 'A' + 10;

49 
	}
}

50 *
	$sqlôe3Te°TextToPå
(c⁄° *
z
){

51 *
p
;

52 
u64
 
v
;

53 
u32
 
v2
;

54 if–
z
[0]=='0' && z[1]=='x' ){

55 
z
 += 2;

57 
v
 = 0;

58  *
z
 ){

59 
v
 = (v<<4Ë+ 
	`ã°HexToI¡
(*
z
);

60 
z
++;

62 if–(
p
)==(
v
) ){

63 
	`mem˝y
(&
p
, &
v
, (p));

65 
	`as£π
–(
p
)==(
v2
) );

66 
v2
 = (
u32
)
v
;

67 
	`mem˝y
(&
p
, &
v2
, (p));

69  
p
;

70 
	}
}

78 
	$gë_sqlôe_poöãr
(

79 * 
˛õ¡D©a
,

80 
T˛_I¡îp
 *
öãΩ
,

81 
objc
,

82 
T˛_Obj
 *
CONST
 
objv
[]

84 
SqlôeDb
 *
p
;

85 
T˛_CmdInfo
 
cmdInfo
;

86 
zBuf
[100];

87 if–
objc
!=2 ){

88 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "SQLITE-CONNECTION");

89  
TCL_ERROR
;

91 if–!
	`T˛_GëComm™dInfo
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
cmdInfo
) ){

92 
	`T˛_AµídResu…
(
öãΩ
, "commandÇot found: ",

93 
	`T˛_GëSåög
(
objv
[1]), (*)0);

94  
TCL_ERROR
;

96 
p
 = (
SqlôeDb
*)
cmdInfo
.
objClõ¡D©a
;

97 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%p", 
p
->
db
);

98 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

99  
TCL_OK
;

100 
	}
}

105 
	$gëDbPoöãr
(
T˛_I¡îp
 *
öãΩ
, c⁄° *
zA
, 
sqlôe3
 **
µDb
){

106 
SqlôeDb
 *
p
;

107 
T˛_CmdInfo
 
cmdInfo
;

108 if–
	`T˛_GëComm™dInfo
(
öãΩ
, 
zA
, &
cmdInfo
) ){

109 
p
 = (
SqlôeDb
*)
cmdInfo
.
objClõ¡D©a
;

110 *
µDb
 = 
p
->
db
;

112 *
µDb
 = (
sqlôe3
*)
	`sqlôe3Te°TextToPå
(
zA
);

114  
TCL_OK
;

115 
	}
}

117 #i‡
SQLITE_OS_WIN


121 
	$gëWö32H™dÀ
(
T˛_I¡îp
 *
öãΩ
, c⁄° *
zA
, 
LPHANDLE
 
phFûe
){

122 *
phFûe
 = (
HANDLE
)
	`sqlôe3Te°TextToPå
(
zA
);

123  
TCL_OK
;

124 
	}
}

127 c⁄° *
sqlôe3EºName
();

128 
	#t1Eº‹Name
 
sqlôe3EºName


	)

134 
	#StmtToDb
(
X
Ë
	`sqlôe3_db_h™dÀ
(X)

	)

140 
	$sqlôe3Te°EºCode
(
T˛_I¡îp
 *
öãΩ
, 
sqlôe3
 *
db
, 
rc
){

141 if–
	`sqlôe3_thªadß„
()==0 && 
rc
!=
SQLITE_MISUSE
 &&Ñc!=
SQLITE_OK


142 && 
	`sqlôe3_îrcode
(
db
)!=
rc
 ){

143 
zBuf
[200];

144 
r2
 = 
	`sqlôe3_îrcode
(
db
);

145 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf,

147 
	`t1Eº‹Name
(
rc
),Ñc,Å1Eº‹Name(
r2
),Ñ2);

148 
	`T˛_Re£tResu…
(
öãΩ
);

149 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

153 
	}
}

158 
	$gëStmtPoöãr
(

159 
T˛_I¡îp
 *
öãΩ
,

160 c⁄° *
zArg
,

161 
sqlôe3_°mt
 **
µStmt


163 *
µStmt
 = (
sqlôe3_°mt
*)
	`sqlôe3Te°TextToPå
(
zArg
);

164  
TCL_OK
;

165 
	}
}

180 
	$sqlôe3Te°MakePoöãrSå
(
T˛_I¡îp
 *
öãΩ
, *
zPå
, *
p
){

181 
	`sqlôe3_¢¥ötf
(100, 
zPå
, "%p", 
p
);

182  
TCL_OK
;

183 
	}
}

188 
	$exec_¥ötf_cb
(*
pArg
, 
¨gc
, **
¨gv
, **
«me
){

189 
T˛_DSåög
 *
°r
 = (T˛_DSåög*)
pArg
;

190 
i
;

192 if–
	`T˛_DSåögLígth
(
°r
)==0 ){

193 
i
=0; i<
¨gc
; i++){

194 
	`T˛_DSåögAµídEÀmít
(
°r
, 
«me
[
i
] ?Çame[i] : "NULL");

197 
i
=0; i<
¨gc
; i++){

198 
	`T˛_DSåögAµídEÀmít
(
°r
, 
¨gv
[
i
] ?árgv[i] : "NULL");

201 
	}
}

206 #i‡!
deföed
(
SQLITE_OMIT_TRACE
Ë&& deföed(
SQLITE_ENABLE_IOTRACE
)

207 
FILE
 *
	giŸø˚_fûe
 = 0;

208 
	$io_åa˚_ˇŒback
(c⁄° *
zF‹m©
, ...){

209 
va_li°
 
≠
;

210 
	`va_°¨t
(
≠
, 
zF‹m©
);

211 
	`vÂrötf
(
iŸø˚_fûe
, 
zF‹m©
, 
≠
);

212 
	`va_íd
(
≠
);

213 
	`fÊush
(
iŸø˚_fûe
);

214 
	}
}

224 
	$ã°_io_åa˚
(

225 *
NŸU£d
,

226 
T˛_I¡îp
 *
öãΩ
,

227 
¨gc
,

228 **
¨gv


230 #i‡!
	`deföed
(
SQLITE_OMIT_TRACE
Ë&& deföed(
SQLITE_ENABLE_IOTRACE
)

231 if–
¨gc
!=2 ){

232 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

234  
TCL_ERROR
;

236 if–
iŸø˚_fûe
 ){

237 if–
iŸø˚_fûe
!=
°dout
 && iŸø˚_fûe!=
°dîr
 ){

238 
	`f˛o£
(
iŸø˚_fûe
);

240 
iŸø˚_fûe
 = 0;

241 
sqlôe3IoTø˚
 = 0;

243 if–
¨gv
[1][0] ){

244 if–
	`°rcmp
(
¨gv
[1],"stdout")==0 ){

245 
iŸø˚_fûe
 = 
°dout
;

246 }if–
	`°rcmp
(
¨gv
[1],"stderr")==0 ){

247 
iŸø˚_fûe
 = 
°dîr
;

249 
iŸø˚_fûe
 = 
	`f›í
(
¨gv
[1], "w");

251 
sqlôe3IoTø˚
 = 
io_åa˚_ˇŒback
;

254  
TCL_OK
;

255 
	}
}

265 
	$˛™g_ßnôize_addªss
(

266 *
NŸU£d
,

267 
T˛_I¡îp
 *
öãΩ
,

268 
¨gc
,

269 **
¨gv


271 
ªs
 = 0;

272 #i‡
	`deföed
(
__has_„©uª
)

273 #i‡
	`__has_„©uª
(
addªss_ßnôizî
)

274 
ªs
 = 1;

277 #ifde‡
__SANITIZE_ADDRESS__


278 
ªs
 = 1;

280 if–
ªs
==0 && 
	`gëív
("OMIT_MISUSE")!=0 )Ñes = 1;

281 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
ªs
));

282  
TCL_OK
;

283 
	}
}

292 
	$ã°_exec_¥ötf
(

293 *
NŸU£d
,

294 
T˛_I¡îp
 *
öãΩ
,

295 
¨gc
,

296 **
¨gv


298 
sqlôe3
 *
db
;

299 
T˛_DSåög
 
°r
;

300 
rc
;

301 *
zEº
 = 0;

302 *
zSql
;

303 
zBuf
[30];

304 if–
¨gc
!=4 ){

305 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

307  
TCL_ERROR
;

309 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

310 
	`T˛_DSåögInô
(&
°r
);

311 
zSql
 = 
	`sqlôe3_m¥ötf
(
¨gv
[2],árgv[3]);

312 
rc
 = 
	`sqlôe3_exec
(
db
, 
zSql
, 
exec_¥ötf_cb
, &
°r
, &
zEº
);

313 
	`sqlôe3_‰ì
(
zSql
);

314 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%d", 
rc
);

315 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

316 
	`T˛_AµídEÀmít
(
öãΩ
, 
rc
==
SQLITE_OK
 ? 
	`T˛_DSåögVÆue
(&
°r
Ë: 
zEº
);

317 
	`T˛_DSåögFªe
(&
°r
);

318 if–
zEº
 ) 
	`sqlôe3_‰ì
(zErr);

319 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

320  
TCL_OK
;

321 
	}
}

330 
	$ã°_exec_hex
(

331 *
NŸU£d
,

332 
T˛_I¡îp
 *
öãΩ
,

333 
¨gc
,

334 **
¨gv


336 
sqlôe3
 *
db
;

337 
T˛_DSåög
 
°r
;

338 
rc
, 
i
, 
j
;

339 *
zEº
 = 0;

340 *
zHex
;

341 
zSql
[501];

342 
zBuf
[30];

343 if–
¨gc
!=3 ){

344 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

346  
TCL_ERROR
;

348 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

349 
zHex
 = 
¨gv
[2];

350 
i
=
j
=0; i<((
zSql
)-1Ë&& 
zHex
[j]; i++, j++){

351 if–
zHex
[
j
]=='%' && zHex[j+2] && zHex[j+2] ){

352 
zSql
[
i
] = (
	`ã°HexToI¡
(
zHex
[
j
+1])<<4) +ÅestHexToInt(zHex[j+2]);

353 
j
 += 2;

355 
zSql
[
i
] = 
zHex
[
j
];

358 
zSql
[
i
] = 0;

359 
	`T˛_DSåögInô
(&
°r
);

360 
rc
 = 
	`sqlôe3_exec
(
db
, 
zSql
, 
exec_¥ötf_cb
, &
°r
, &
zEº
);

361 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%d", 
rc
);

362 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

363 
	`T˛_AµídEÀmít
(
öãΩ
, 
rc
==
SQLITE_OK
 ? 
	`T˛_DSåögVÆue
(&
°r
Ë: 
zEº
);

364 
	`T˛_DSåögFªe
(&
°r
);

365 if–
zEº
 ) 
	`sqlôe3_‰ì
(zErr);

366 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

367  
TCL_OK
;

368 
	}
}

376 
	$db_íãr
(

377 *
NŸU£d
,

378 
T˛_I¡îp
 *
öãΩ
,

379 
¨gc
,

380 **
¨gv


382 
sqlôe3
 *
db
;

383 if–
¨gc
!=2 ){

384 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

386  
TCL_ERROR
;

388 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

389 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

390  
TCL_OK
;

391 
	}
}

392 
	$db_Àave
(

393 *
NŸU£d
,

394 
T˛_I¡îp
 *
öãΩ
,

395 
¨gc
,

396 **
¨gv


398 
sqlôe3
 *
db
;

399 if–
¨gc
!=2 ){

400 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

402  
TCL_ERROR
;

404 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

405 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

406  
TCL_OK
;

407 
	}
}

414 
	$ã°_exec
(

415 *
NŸU£d
,

416 
T˛_I¡îp
 *
öãΩ
,

417 
¨gc
,

418 **
¨gv


420 
sqlôe3
 *
db
;

421 
T˛_DSåög
 
°r
;

422 
rc
;

423 *
zEº
 = 0;

424 *
zSql
;

425 
i
, 
j
;

426 
zBuf
[30];

427 if–
¨gc
!=3 ){

428 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

430  
TCL_ERROR
;

432 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

433 
	`T˛_DSåögInô
(&
°r
);

434 
zSql
 = 
	`sqlôe3_m¥ötf
("%s", 
¨gv
[2]);

435 
i
=
j
=0; 
zSql
[i];){

436 if–
zSql
[
i
]=='%' ){

437 
zSql
[
j
++] = (
	`ã°HexToI¡
(zSql[
i
+1])<<4) +ÅestHexToInt(zSql[i+2]);

438 
i
 += 3;

440 
zSql
[
j
++] = zSql[
i
++];

443 
zSql
[
j
] = 0;

444 
rc
 = 
	`sqlôe3_exec
(
db
, 
zSql
, 
exec_¥ötf_cb
, &
°r
, &
zEº
);

445 
	`sqlôe3_‰ì
(
zSql
);

446 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%d", 
rc
);

447 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

448 
	`T˛_AµídEÀmít
(
öãΩ
, 
rc
==
SQLITE_OK
 ? 
	`T˛_DSåögVÆue
(&
°r
Ë: 
zEº
);

449 
	`T˛_DSåögFªe
(&
°r
);

450 if–
zEº
 ) 
	`sqlôe3_‰ì
(zErr);

451 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

452  
TCL_OK
;

453 
	}
}

461 
	$ã°_exec_ƒ
(

462 *
NŸU£d
,

463 
T˛_I¡îp
 *
öãΩ
,

464 
¨gc
,

465 **
¨gv


467 
sqlôe3
 *
db
;

468 
rc
;

469 *
zEº
 = 0;

470 if–
¨gc
!=3 ){

471 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

473  
TCL_ERROR
;

475 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

476 
rc
 = 
	`sqlôe3_exec
(
db
, 
¨gv
[2], 0, 0, &
zEº
);

477 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

478  
TCL_OK
;

479 
	}
}

488 
	$ã°_m¥ötf_z
(

489 *
NŸU£d
,

490 
T˛_I¡îp
 *
öãΩ
,

491 
¨gc
,

492 **
¨gv


494 *
zResu…
 = 0;

495 
i
;

497 
i
=2; i<
¨gc
 && (i==2 || 
zResu…
); i++){

498 
zResu…
 = 
	`sqlôe3_m¥ötf
("%z%s%s", zResu…, 
¨gv
[1],árgv[
i
]);

500 
	`T˛_AµídResu…
(
öãΩ
, 
zResu…
, 0);

501 
	`sqlôe3_‰ì
(
zResu…
);

502  
TCL_OK
;

503 
	}
}

511 
	$ã°_m¥ötf_n
(

512 *
NŸU£d
,

513 
T˛_I¡îp
 *
öãΩ
,

514 
¨gc
,

515 **
¨gv


517 *
zSå
;

518 
n
 = 0;

519 
zSå
 = 
	`sqlôe3_m¥ötf
("%s%n", 
¨gv
[1], &
n
);

520 
	`sqlôe3_‰ì
(
zSå
);

521 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
n
));

522  
TCL_OK
;

523 
	}
}

535 
	$ã°_¢¥ötf_öt
(

536 *
NŸU£d
,

537 
T˛_I¡îp
 *
öãΩ
,

538 
¨gc
,

539 **
¨gv


541 
zSå
[100];

542 
n
 = 
	`©oi
(
¨gv
[1]);

543 c⁄° *
zF‹m©
 = 
¨gv
[2];

544 
a1
 = 
	`©oi
(
¨gv
[3]);

545 if–
n
>(
zSå
) )Ç = (zStr);

546 
	`sqlôe3_¢¥ötf
((
zSå
), zStr, "abcdefghijklmnopqrstuvwxyz");

547 
	`sqlôe3_¢¥ötf
(
n
, 
zSå
, 
zF‹m©
, 
a1
);

548 
	`T˛_AµídResu…
(
öãΩ
, 
zSå
, 0);

549  
TCL_OK
;

550 
	}
}

552 #i‚de‡
SQLITE_OMIT_GET_TABLE


561 
	$ã°_gë_èbÀ_¥ötf
(

562 *
NŸU£d
,

563 
T˛_I¡îp
 *
öãΩ
,

564 
¨gc
,

565 **
¨gv


567 
sqlôe3
 *
db
;

568 
T˛_DSåög
 
°r
;

569 
rc
;

570 *
zEº
 = 0;

571 
nRow
 = 0, 
nCﬁ
 = 0;

572 **
aResu…
;

573 
i
;

574 
zBuf
[30];

575 *
zSql
;

576 
ªsCou¡
 = -1;

577 if–
¨gc
==5 ){

578 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[4], &
ªsCou¡
ËË 
TCL_ERROR
;

580 if–
¨gc
!=4 &&árgc!=5 ){

581 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

583  
TCL_ERROR
;

585 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

586 
	`T˛_DSåögInô
(&
°r
);

587 
zSql
 = 
	`sqlôe3_m¥ötf
(
¨gv
[2],argv[3]);

588 if–
¨gc
==5 ){

589 
rc
 = 
	`sqlôe3_gë_èbÀ
(
db
, 
zSql
, &
aResu…
, 0, 0, &
zEº
);

591 
rc
 = 
	`sqlôe3_gë_èbÀ
(
db
, 
zSql
, &
aResu…
, &
nRow
, &
nCﬁ
, &
zEº
);

592 
ªsCou¡
 = (
nRow
+1)*
nCﬁ
;

594 
	`sqlôe3_‰ì
(
zSql
);

595 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%d", 
rc
);

596 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

597 if–
rc
==
SQLITE_OK
 ){

598 if–
¨gc
==4 ){

599 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%d", 
nRow
);

600 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

601 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%d", 
nCﬁ
);

602 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

604 
i
=0; i<
ªsCou¡
; i++){

605 
	`T˛_AµídEÀmít
(
öãΩ
, 
aResu…
[
i
] ?áResult[i] : "NULL");

608 
	`T˛_AµídEÀmít
(
öãΩ
, 
zEº
);

610 
	`sqlôe3_‰ì_èbÀ
(
aResu…
);

611 if–
zEº
 ) 
	`sqlôe3_‰ì
(zErr);

612 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

613  
TCL_OK
;

614 
	}
}

624 
	$ã°_œ°_rowid
(

625 *
NŸU£d
,

626 
T˛_I¡îp
 *
öãΩ
,

627 
¨gc
,

628 **
¨gv


630 
sqlôe3
 *
db
;

631 
zBuf
[30];

633 if–
¨gc
!=2 ){

634 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0], " DB\"", 0);

635  
TCL_ERROR
;

637 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

638 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%Œd", 
	`sqlôe3_œ°_ö£π_rowid
(
db
));

639 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

640  
SQLITE_OK
;

641 
	}
}

648 
	$ã°_key
(

649 *
NŸU£d
,

650 
T˛_I¡îp
 *
öãΩ
,

651 
¨gc
,

652 **
¨gv


654 #i‡
	`deföed
(
SQLITE_HAS_CODEC
Ë&& !deföed(
SQLITE_OMIT_CODEC_FROM_TCL
)

655 
sqlôe3
 *
db
;

656 c⁄° *
zKey
;

657 
nKey
;

658 if–
¨gc
!=3 ){

659 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

661  
TCL_ERROR
;

663 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

664 
zKey
 = 
¨gv
[2];

665 
nKey
 = 
	`°æí
(
zKey
);

666 
	`sqlôe3_key
(
db
, 
zKey
, 
nKey
);

668  
TCL_OK
;

669 
	}
}

676 
	$ã°_ªkey
(

677 *
NŸU£d
,

678 
T˛_I¡îp
 *
öãΩ
,

679 
¨gc
,

680 **
¨gv


682 #ifde‡
SQLITE_HAS_CODEC


683 
sqlôe3
 *
db
;

684 c⁄° *
zKey
;

685 
nKey
;

686 if–
¨gc
!=3 ){

687 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

689  
TCL_ERROR
;

691 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

692 
zKey
 = 
¨gv
[2];

693 
nKey
 = 
	`°æí
(
zKey
);

694 
	`sqlôe3_ªkey
(
db
, 
zKey
, 
nKey
);

696  
TCL_OK
;

697 
	}
}

704 
	$sqlôe_ã°_˛o£
(

705 *
NŸU£d
,

706 
T˛_I¡îp
 *
öãΩ
,

707 
¨gc
,

708 **
¨gv


710 
sqlôe3
 *
db
;

711 
rc
;

712 if–
¨gc
!=2 ){

713 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

715  
TCL_ERROR
;

717 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

718 
rc
 = 
	`sqlôe3_˛o£
(
db
);

719 
	`T˛_SëResu…
(
öãΩ
, (*)
	`t1Eº‹Name
(
rc
), 
TCL_STATIC
);

720  
TCL_OK
;

721 
	}
}

728 
	$sqlôe_ã°_˛o£_v2
(

729 *
NŸU£d
,

730 
T˛_I¡îp
 *
öãΩ
,

731 
¨gc
,

732 **
¨gv


734 
sqlôe3
 *
db
;

735 
rc
;

736 if–
¨gc
!=2 ){

737 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

739  
TCL_ERROR
;

741 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

742 
rc
 = 
	`sqlôe3_˛o£_v2
(
db
);

743 
	`T˛_SëResu…
(
öãΩ
, (*)
	`t1Eº‹Name
(
rc
), 
TCL_STATIC
);

744  
TCL_OK
;

745 
	}
}

751 
	$t1_i‚uŒFunc
(

752 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

753 
¨gc
,

754 
sqlôe3_vÆue
 **
¨gv


756 
i
;

757 
i
=0; i<
¨gc
; i++){

758 if–
SQLITE_NULL
!=
	`sqlôe3_vÆue_ty≥
(
¨gv
[
i
]) ){

759 
n
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[
i
]);

760 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[
i
]),

761 
n
, 
SQLITE_TRANSIENT
);

765 
	}
}

772 
	$hex8Func
(
sqlôe3_c⁄ãxt
 *
p
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

773 c⁄° *
z
;

774 
i
;

775 
zBuf
[200];

776 
z
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

777 
i
=0; i<(
zBuf
)/2 - 2 && 
z
[i]; i++){

778 
	`sqlôe3_¢¥ötf
((
zBuf
)-
i
*2, &zBuf[i*2], "%02x", 
z
[i]);

780 
zBuf
[
i
*2] = 0;

781 
	`sqlôe3_ªsu…_ãxt
(
p
, (*)
zBuf
, -1, 
SQLITE_TRANSIENT
);

782 
	}
}

783 #i‚de‡
SQLITE_OMIT_UTF16


784 
	$hex16Func
(
sqlôe3_c⁄ãxt
 *
p
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

785 c⁄° *
z
;

786 
i
;

787 
zBuf
[400];

788 
z
 = 
	`sqlôe3_vÆue_ãxt16
(
¨gv
[0]);

789 
i
=0; i<(
zBuf
)/4 - 4 && 
z
[i]; i++){

790 
	`sqlôe3_¢¥ötf
((
zBuf
)-
i
*4, &zBuf[i*4],"%04x", 
z
[i]&0xff);

792 
zBuf
[
i
*4] = 0;

793 
	`sqlôe3_ªsu…_ãxt
(
p
, (*)
zBuf
, -1, 
SQLITE_TRANSIENT
);

794 
	}
}

800 
	sd°r
 {

801 
	mnAŒoc
;

802 
	mnU£d
;

803 *
	mz
;

809 
	$d°rAµíd
(
d°r
 *
p
, c⁄° *
z
, 
dividî
){

810 
n
 = ()
	`°æí
(
z
);

811 if–
p
->
nU£d
 + 
n
 + 2 >Ö->
nAŒoc
 ){

812 *
zNew
;

813 
p
->
nAŒoc
 =Ö->nAŒoc*2 + 
n
 + 200;

814 
zNew
 = 
	`sqlôe3_ªÆloc
(
p
->
z
,Ö->
nAŒoc
);

815 if–
zNew
==0 ){

816 
	`sqlôe3_‰ì
(
p
->
z
);

817 
	`mem£t
(
p
, 0, (*p));

820 
p
->
z
 = 
zNew
;

822 if–
dividî
 && 
p
->
nU£d
>0 ){

823 
p
->
z
[p->
nU£d
++] = 
dividî
;

825 
	`mem˝y
(&
p
->
z
[p->
nU£d
], z, 
n
+1);

826 
p
->
nU£d
 +
n
;

827 
	}
}

832 
	$execFuncCÆlback
(*
pD©a
, 
¨gc
, **
¨gv
, **
NŸU£d
){

833 
d°r
 *
p
 = (d°r*)
pD©a
;

834 
i
;

835 
i
=0; i<
¨gc
; i++){

836 if–
¨gv
[
i
]==0 ){

837 
	`d°rAµíd
(
p
, "NULL", ' ');

839 
	`d°rAµíd
(
p
, 
¨gv
[
i
], ' ');

843 
	}
}

856 
	$sqlôe3ExecFunc
(

857 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

858 
¨gc
,

859 
sqlôe3_vÆue
 **
¨gv


861 
d°r
 
x
;

862 
	`mem£t
(&
x
, 0, (x));

863 ()
	`sqlôe3_exec
((
sqlôe3
*)
	`sqlôe3_u£r_d©a
(
c⁄ãxt
),

864 (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]),

865 
execFuncCÆlback
, &
x
, 0);

866 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
x
.
z
, x.
nU£d
, 
SQLITE_TRANSIENT
);

867 
	`sqlôe3_‰ì
(
x
.
z
);

868 
	}
}

886 
	$tkt2213Fun˘i⁄
(

887 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

888 
¨gc
,

889 
sqlôe3_vÆue
 **
¨gv


891 
nText
;

892 c⁄° *
zText1
;

893 c⁄° *
zText2
;

894 c⁄° *
zText3
;

896 
nText
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[0]);

897 
zText1
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

898 
zText2
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

899 
zText3
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

901 if–
zText1
!=
zText2
 || zText2!=
zText3
 ){

902 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, "tkt2213 isÇot fixed", -1);

904 *
zC›y
 = (*)
	`sqlôe3_mÆloc
(
nText
);

905 
	`mem˝y
(
zC›y
, 
zText1
, 
nText
);

906 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zC›y
, 
nText
, 
sqlôe3_‰ì
);

908 
	}
}

934 
	$±rChngFun˘i⁄
(

935 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

936 
¨gc
,

937 
sqlôe3_vÆue
 **
¨gv


939 c⁄° *
p1
, *
p2
;

940 c⁄° *
zCmd
;

941 if–
¨gc
!=4 ) ;

942 
zCmd
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[1]);

943 if–
zCmd
==0 ) ;

944 if–
	`°rcmp
(
zCmd
,"text")==0 ){

945 
p1
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

946 #i‚de‡
SQLITE_OMIT_UTF16


947 }if–
	`°rcmp
(
zCmd
, "text16")==0 ){

948 
p1
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt16
(
¨gv
[0]);

950 }if–
	`°rcmp
(
zCmd
, "blob")==0 ){

951 
p1
 = (c⁄° *)
	`sqlôe3_vÆue_blob
(
¨gv
[0]);

955 
zCmd
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[2]);

956 if–
zCmd
==0 ) ;

957 if–
	`°rcmp
(
zCmd
,"bytes")==0 ){

958 
	`sqlôe3_vÆue_byãs
(
¨gv
[0]);

959 #i‚de‡
SQLITE_OMIT_UTF16


960 }if–
	`°rcmp
(
zCmd
, "bytes16")==0 ){

961 
	`sqlôe3_vÆue_byãs16
(
¨gv
[0]);

963 }if–
	`°rcmp
(
zCmd
, "noop")==0 ){

968 
zCmd
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[3]);

969 if–
zCmd
==0 ) ;

970 if–
	`°rcmp
(
zCmd
,"text")==0 ){

971 
p2
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

972 #i‚de‡
SQLITE_OMIT_UTF16


973 }if–
	`°rcmp
(
zCmd
, "text16")==0 ){

974 
p2
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt16
(
¨gv
[0]);

976 }if–
	`°rcmp
(
zCmd
, "blob")==0 ){

977 
p2
 = (c⁄° *)
	`sqlôe3_vÆue_blob
(
¨gv
[0]);

981 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
p1
!=
p2
);

982 
	}
}

988 
	$n⁄dëîmöi°icFun˘i⁄
(

989 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

990 
¨gc
,

991 
sqlôe3_vÆue
 **
¨gv


993 
˙t
 = 0;

994 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
˙t
++);

995 
	}
}

1012 
	$ã°_¸óã_fun˘i⁄
(

1013 *
NŸU£d
,

1014 
T˛_I¡îp
 *
öãΩ
,

1015 
¨gc
,

1016 **
¨gv


1018 
rc
;

1019 
sqlôe3
 *
db
;

1021 if–
¨gc
!=2 ){

1022 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1024  
TCL_ERROR
;

1026 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

1027 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "x_cﬂÀs˚", -1, 
SQLITE_UTF8
, 0,

1028 
t1_i‚uŒFunc
, 0, 0);

1029 if–
rc
==
SQLITE_OK
 ){

1030 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "hex8", 1, 
SQLITE_UTF8
 | 
SQLITE_DETERMINISTIC
,

1031 0, 
hex8Func
, 0, 0);

1033 #i‚de‡
SQLITE_OMIT_UTF16


1034 if–
rc
==
SQLITE_OK
 ){

1035 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "hex16", 1, 
SQLITE_UTF16
 | 
SQLITE_DETERMINISTIC
,

1036 0, 
hex16Func
, 0, 0);

1039 if–
rc
==
SQLITE_OK
 ){

1040 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "tkt2213func", 1, 
SQLITE_ANY
, 0,

1041 
tkt2213Fun˘i⁄
, 0, 0);

1043 if–
rc
==
SQLITE_OK
 ){

1044 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "poöãr_ch™ge", 4, 
SQLITE_ANY
, 0,

1045 
±rChngFun˘i⁄
, 0, 0);

1052 if–
rc
==
SQLITE_OK
 ){

1053 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "cou¡î1", -1, 
SQLITE_UTF8
,

1054 0, 
n⁄dëîmöi°icFun˘i⁄
, 0, 0);

1056 if–
rc
==
SQLITE_OK
 ){

1057 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "cou¡î2", -1, 
SQLITE_UTF8
|
SQLITE_DETERMINISTIC
,

1058 0, 
n⁄dëîmöi°icFun˘i⁄
, 0, 0);

1061 #i‚de‡
SQLITE_OMIT_UTF16


1064 if–
rc
==
SQLITE_OK
 ){

1065 c⁄° *
zUtf16
;

1066 
sqlôe3_vÆue
 *
pVÆ
;

1067 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

1068 
pVÆ
 = 
	`sqlôe3VÆueNew
(
db
);

1069 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, "x_sqlôe_exec", 
SQLITE_UTF8
, 
SQLITE_STATIC
);

1070 
zUtf16
 = 
	`sqlôe3VÆueText
(
pVÆ
, 
SQLITE_UTF16NATIVE
);

1071 if–
db
->
mÆlocFaûed
 ){

1072 
rc
 = 
SQLITE_NOMEM
;

1074 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄16
(
db
, 
zUtf16
,

1075 1, 
SQLITE_UTF16
, 
db
, 
sqlôe3ExecFunc
, 0, 0);

1077 
	`sqlôe3VÆueFªe
(
pVÆ
);

1078 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

1082 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

1083 
	`T˛_SëResu…
(
öãΩ
, (*)
	`t1Eº‹Name
(
rc
), 0);

1084  
TCL_OK
;

1085 
	}
}

1098 
t1Cou¡Ctx
 
	tt1Cou¡Ctx
;

1099 
	st1Cou¡Ctx
 {

1100 
	mn
;

1102 
	$t1Cou¡Sãp
(

1103 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

1104 
¨gc
,

1105 
sqlôe3_vÆue
 **
¨gv


1107 
t1Cou¡Ctx
 *
p
;

1108 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

1109 if–(
¨gc
==0 || 
SQLITE_NULL
!=
	`sqlôe3_vÆue_ty≥
(
¨gv
[0]ËË&& 
p
 ){

1110 
p
->
n
++;

1112 if–
¨gc
>0 ){

1113 
v
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[0]);

1114 if–
v
==40 ){

1115 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, "value of 40 handedÅo x_count", -1);

1116 #i‚de‡
SQLITE_OMIT_UTF16


1117 }if–
v
==41 ){

1118 c⁄° 
zUtf16EºMsg
[] = { 0, 0x61, 0, 0x62, 0, 0x63, 0, 0, 0};

1119 
	`sqlôe3_ªsu…_îr‹16
(
c⁄ãxt
, &
zUtf16EºMsg
[1-
SQLITE_BIGENDIAN
], -1);

1123 
	}
}

1124 
	$t1Cou¡FöÆize
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
){

1125 
t1Cou¡Ctx
 *
p
;

1126 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

1127 if–
p
 ){

1128 if–
p
->
n
==42 ){

1129 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, "x_countÅotalsÅo 42", -1);

1131 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
p
 ?Ö->
n
 : 0);

1134 
	}
}

1136 #i‚de‡
SQLITE_OMIT_DEPRECATED


1137 
	$ÀgacyCou¡Sãp
(

1138 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

1139 
¨gc
,

1140 
sqlôe3_vÆue
 **
¨gv


1143 
	}
}

1145 
	$ÀgacyCou¡FöÆize
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
){

1146 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
	`sqlôe3_aggªg©e_cou¡
(context));

1147 
	}
}

1169 
	$ã°_¸óã_aggªg©e
(

1170 *
NŸU£d
,

1171 
T˛_I¡îp
 *
öãΩ
,

1172 
¨gc
,

1173 **
¨gv


1175 
sqlôe3
 *
db
;

1176 
rc
;

1177 if–
¨gc
!=2 ){

1178 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1180  
TCL_ERROR
;

1182 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

1183 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "x_cou¡", 0, 
SQLITE_UTF8
, 0, 0,

1184 
t1Cou¡Sãp
,
t1Cou¡FöÆize
);

1185 if–
rc
==
SQLITE_OK
 ){

1186 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "x_cou¡", 1, 
SQLITE_UTF8
, 0, 0,

1187 
t1Cou¡Sãp
,
t1Cou¡FöÆize
);

1189 #i‚de‡
SQLITE_OMIT_DEPRECATED


1190 if–
rc
==
SQLITE_OK
 ){

1191 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "Àgacy_cou¡", 0, 
SQLITE_ANY
, 0, 0,

1192 
ÀgacyCou¡Sãp
, 
ÀgacyCou¡FöÆize


1196 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

1197 
	`T˛_SëResu…
(
öãΩ
, (*)
	`t1Eº‹Name
(
rc
), 0);

1198  
TCL_OK
;

1199 
	}
}

1210 
	$ã°_¥ötf
(

1211 *
NŸU£d
,

1212 
T˛_I¡îp
 *
öãΩ
,

1213 
¨gc
,

1214 **
¨gv


1216 if–
¨gc
!=2 ){

1217 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1219  
TCL_ERROR
;

1221 
	`¥ötf
("%s\n", 
¨gv
[1]);

1222  
TCL_OK
;

1223 
	}
}

1232 
	$sqlôe3_m¥ötf_öt
(

1233 *
NŸU£d
,

1234 
T˛_I¡îp
 *
öãΩ
,

1235 
¨gc
,

1236 **
¨gv


1238 
a
[3], 
i
;

1239 *
z
;

1240 if–
¨gc
!=5 ){

1241 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1243  
TCL_ERROR
;

1245 
i
=2; i<5; i++){

1246 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[
i
], &
a
[i-2]ËË 
TCL_ERROR
;

1248 
z
 = 
	`sqlôe3_m¥ötf
(
¨gv
[1], 
a
[0],á[1],á[2]);

1249 
	`T˛_AµídResu…
(
öãΩ
, 
z
, 0);

1250 
	`sqlôe3_‰ì
(
z
);

1251  
TCL_OK
;

1252 
	}
}

1259 
	$sqlôe3_m¥ötf_öt64
(

1260 *
NŸU£d
,

1261 
T˛_I¡îp
 *
öãΩ
,

1262 
¨gc
,

1263 **
¨gv


1265 
i
;

1266 
sqlôe_öt64
 
a
[3];

1267 *
z
;

1268 if–
¨gc
!=5 ){

1269 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1271  
TCL_ERROR
;

1273 
i
=2; i<5; i++){

1274 if–
	`sqlôe3Atoi64
(
¨gv
[
i
], &
a
[i-2], 
	`sqlôe3SåÀn30
◊rgv[i]), 
SQLITE_UTF8
) ){

1275 
	`T˛_AµídResu…
(
öãΩ
, "argument isÇotá valid 64-bit integer", 0);

1276  
TCL_ERROR
;

1279 
z
 = 
	`sqlôe3_m¥ötf
(
¨gv
[1], 
a
[0],á[1],á[2]);

1280 
	`T˛_AµídResu…
(
öãΩ
, 
z
, 0);

1281 
	`sqlôe3_‰ì
(
z
);

1282  
TCL_OK
;

1283 
	}
}

1292 
	$sqlôe3_m¥ötf_l⁄g
(

1293 *
NŸU£d
,

1294 
T˛_I¡îp
 *
öãΩ
,

1295 
¨gc
,

1296 **
¨gv


1298 
i
;

1299 
a
[3];

1300 
b
[3];

1301 *
z
;

1302 if–
¨gc
!=5 ){

1303 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1305  
TCL_ERROR
;

1307 
i
=2; i<5; i++){

1308 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[
i
], &
b
[i-2]ËË 
TCL_ERROR
;

1309 
a
[
i
-2] = ()
b
[i-2];

1310 
a
[
i
-2] &(((
u64
)1)<<(()*8))-1;

1312 
z
 = 
	`sqlôe3_m¥ötf
(
¨gv
[1], 
a
[0],á[1],á[2]);

1313 
	`T˛_AµídResu…
(
öãΩ
, 
z
, 0);

1314 
	`sqlôe3_‰ì
(
z
);

1315  
TCL_OK
;

1316 
	}
}

1323 
	$sqlôe3_m¥ötf_°r
(

1324 *
NŸU£d
,

1325 
T˛_I¡îp
 *
öãΩ
,

1326 
¨gc
,

1327 **
¨gv


1329 
a
[3], 
i
;

1330 *
z
;

1331 if–
¨gc
<4 ||árgc>5 ){

1332 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1334  
TCL_ERROR
;

1336 
i
=2; i<4; i++){

1337 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[
i
], &
a
[i-2]ËË 
TCL_ERROR
;

1339 
z
 = 
	`sqlôe3_m¥ötf
(
¨gv
[1], 
a
[0],á[1], 
¨gc
>4 ?árgv[4] : 
NULL
);

1340 
	`T˛_AµídResu…
(
öãΩ
, 
z
, 0);

1341 
	`sqlôe3_‰ì
(
z
);

1342  
TCL_OK
;

1343 
	}
}

1350 
	$sqlôe3_¢¥ötf_°r
(

1351 *
NŸU£d
,

1352 
T˛_I¡îp
 *
öãΩ
,

1353 
¨gc
,

1354 **
¨gv


1356 
a
[3], 
i
;

1357 
n
;

1358 *
z
;

1359 if–
¨gc
<5 ||árgc>6 ){

1360 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1362  
TCL_ERROR
;

1364 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], &
n
ËË 
TCL_ERROR
;

1365 if–
n
<0 ){

1366 
	`T˛_AµídResu…
(
öãΩ
, "N must beÇon-negative", 0);

1367  
TCL_ERROR
;

1369 
i
=3; i<5; i++){

1370 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[
i
], &
a
[i-3]ËË 
TCL_ERROR
;

1372 
z
 = 
	`sqlôe3_mÆloc
–
n
+1 );

1373 
	`sqlôe3_¢¥ötf
(
n
, 
z
, 
¨gv
[2], 
a
[0],á[1], 
¨gc
>4 ?árgv[5] : 
NULL
);

1374 
	`T˛_AµídResu…
(
öãΩ
, 
z
, 0);

1375 
	`sqlôe3_‰ì
(
z
);

1376  
TCL_OK
;

1377 
	}
}

1384 
	$sqlôe3_m¥ötf_doubÀ
(

1385 *
NŸU£d
,

1386 
T˛_I¡îp
 *
öãΩ
,

1387 
¨gc
,

1388 **
¨gv


1390 
a
[3], 
i
;

1391 
r
;

1392 *
z
;

1393 if–
¨gc
!=5 ){

1394 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1396  
TCL_ERROR
;

1398 
i
=2; i<4; i++){

1399 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[
i
], &
a
[i-2]ËË 
TCL_ERROR
;

1401 if–
	`T˛_GëDoubÀ
(
öãΩ
, 
¨gv
[4], &
r
ËË 
TCL_ERROR
;

1402 
z
 = 
	`sqlôe3_m¥ötf
(
¨gv
[1], 
a
[0],á[1], 
r
);

1403 
	`T˛_AµídResu…
(
öãΩ
, 
z
, 0);

1404 
	`sqlôe3_‰ì
(
z
);

1405  
TCL_OK
;

1406 
	}
}

1415 
	$sqlôe3_m¥ötf_sˇÀd
(

1416 *
NŸU£d
,

1417 
T˛_I¡îp
 *
öãΩ
,

1418 
¨gc
,

1419 **
¨gv


1421 
i
;

1422 
r
[2];

1423 *
z
;

1424 if–
¨gc
!=4 ){

1425 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1427  
TCL_ERROR
;

1429 
i
=2; i<4; i++){

1430 if–
	`T˛_GëDoubÀ
(
öãΩ
, 
¨gv
[
i
], &
r
[i-2]ËË 
TCL_ERROR
;

1432 
z
 = 
	`sqlôe3_m¥ötf
(
¨gv
[1], 
r
[0]*r[1]);

1433 
	`T˛_AµídResu…
(
öãΩ
, 
z
, 0);

1434 
	`sqlôe3_‰ì
(
z
);

1435  
TCL_OK
;

1436 
	}
}

1445 
	$sqlôe3_m¥ötf_°r⁄ly
(

1446 *
NŸU£d
,

1447 
T˛_I¡îp
 *
öãΩ
,

1448 
¨gc
,

1449 **
¨gv


1451 *
z
;

1452 if–
¨gc
!=3 ){

1453 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1455  
TCL_ERROR
;

1457 
z
 = 
	`sqlôe3_m¥ötf
(
¨gv
[1],árgv[2]);

1458 
	`T˛_AµídResu…
(
öãΩ
, 
z
, 0);

1459 
	`sqlôe3_‰ì
(
z
);

1460  
TCL_OK
;

1461 
	}
}

1469 
	$sqlôe3_m¥ötf_hexdoubÀ
(

1470 *
NŸU£d
,

1471 
T˛_I¡îp
 *
öãΩ
,

1472 
¨gc
,

1473 **
¨gv


1475 *
z
;

1476 
r
;

1477 
x1
, 
x2
;

1478 
sqlôe_uöt64
 
d
;

1479 if–
¨gc
!=3 ){

1480 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1482  
TCL_ERROR
;

1484 if–
	`ssˇnf
(
¨gv
[2], "%08x%08x", &
x2
, &
x1
)!=2 ){

1485 
	`T˛_AµídResu…
(
öãΩ
, "2ndárgument should be 16-characters of hex", 0);

1486  
TCL_ERROR
;

1488 
d
 = 
x2
;

1489 
d
 = (d<<32Ë+ 
x1
;

1490 
	`mem˝y
(&
r
, &
d
, (r));

1491 
z
 = 
	`sqlôe3_m¥ötf
(
¨gv
[1], 
r
);

1492 
	`T˛_AµídResu…
(
öãΩ
, 
z
, 0);

1493 
	`sqlôe3_‰ì
(
z
);

1494  
TCL_OK
;

1495 
	}
}

1501 #i‡!
deföed
(
SQLITE_OMIT_SHARED_CACHE
)

1502 
	$ã°_íabÀ_sh¨ed
(

1503 
Clõ¡D©a
 
˛õ¡D©a
,

1504 
T˛_I¡îp
 *
öãΩ
,

1505 
objc
,

1506 
T˛_Obj
 *
CONST
 
objv
[]

1508 
rc
;

1509 
íabÀ
;

1510 
ªt
 = 0;

1512 if–
objc
!=2 && objc!=1 ){

1513 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "?BOOLEAN?");

1514  
TCL_ERROR
;

1516 
ªt
 = 
sqlôe3GlobÆC⁄fig
.
sh¨edCacheE«bÀd
;

1518 if–
objc
==2 ){

1519 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[1], &
íabÀ
) ){

1520  
TCL_ERROR
;

1522 
rc
 = 
	`sqlôe3_íabÀ_sh¨ed_ˇche
(
íabÀ
);

1523 if–
rc
!=
SQLITE_OK
 ){

1524 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºSå
(
rc
), 
TCL_STATIC
);

1525  
TCL_ERROR
;

1528 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewBoﬁónObj
(
ªt
));

1529  
TCL_OK
;

1530 
	}
}

1539 
	$ã°_exãnded_ªsu…_codes
(

1540 
Clõ¡D©a
 
˛õ¡D©a
,

1541 
T˛_I¡îp
 *
öãΩ
,

1542 
objc
,

1543 
T˛_Obj
 *
CONST
 
objv
[]

1545 
íabÀ
;

1546 
sqlôe3
 *
db
;

1548 if–
objc
!=3 ){

1549 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB BOOLEAN");

1550  
TCL_ERROR
;

1552 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

1553 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[2], &
íabÀ
ËË 
TCL_ERROR
;

1554 
	`sqlôe3_exãnded_ªsu…_codes
(
db
, 
íabÀ
);

1555  
TCL_OK
;

1556 
	}
}

1562 
	$ã°_libvîsi⁄_numbî
(

1563 
Clõ¡D©a
 
˛õ¡D©a
,

1564 
T˛_I¡îp
 *
öãΩ
,

1565 
objc
,

1566 
T˛_Obj
 *
CONST
 
objv
[]

1568 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`sqlôe3_libvîsi⁄_numbî
()));

1569  
TCL_OK
;

1570 
	}
}

1576 
	$ã°_èbÀ_cﬁumn_mëad©a
(

1577 
Clõ¡D©a
 
˛õ¡D©a
,

1578 
T˛_I¡îp
 *
öãΩ
,

1579 
objc
,

1580 
T˛_Obj
 *
CONST
 
objv
[]

1582 
sqlôe3
 *
db
;

1583 c⁄° *
zDb
;

1584 c⁄° *
zTbl
;

1585 c⁄° *
zCﬁ
;

1586 
rc
;

1587 
T˛_Obj
 *
pRë
;

1589 c⁄° *
zD©©y≥
;

1590 c⁄° *
zCﬁl£q
;

1591 
nŸnuŒ
;

1592 
¥im¨ykey
;

1593 
autoö¸emít
;

1595 if–
objc
!=5 && objc!=4 ){

1596 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB dbnameÅblname colname");

1597  
TCL_ERROR
;

1599 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

1600 
zDb
 = 
	`T˛_GëSåög
(
objv
[2]);

1601 
zTbl
 = 
	`T˛_GëSåög
(
objv
[3]);

1602 
zCﬁ
 = 
objc
==5 ? 
	`T˛_GëSåög
(
objv
[4]) : 0;

1604 if–
	`°æí
(
zDb
)==0 ) zDb = 0;

1606 
rc
 = 
	`sqlôe3_èbÀ_cﬁumn_mëad©a
(
db
, 
zDb
, 
zTbl
, 
zCﬁ
,

1607 &
zD©©y≥
, &
zCﬁl£q
, &
nŸnuŒ
, &
¥im¨ykey
, &
autoö¸emít
);

1609 if–
rc
!=
SQLITE_OK
 ){

1610 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3_îrmsg
(
db
), 0);

1611  
TCL_ERROR
;

1614 
pRë
 = 
	`T˛_NewObj
();

1615 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRë
, 
	`T˛_NewSåögObj
(
zD©©y≥
, -1));

1616 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRë
, 
	`T˛_NewSåögObj
(
zCﬁl£q
, -1));

1617 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRë
, 
	`T˛_NewI¡Obj
(
nŸnuŒ
));

1618 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRë
, 
	`T˛_NewI¡Obj
(
¥im¨ykey
));

1619 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRë
, 
	`T˛_NewI¡Obj
(
autoö¸emít
));

1620 
	`T˛_SëObjResu…
(
öãΩ
, 
pRë
);

1622  
TCL_OK
;

1623 
	}
}

1625 #i‚de‡
SQLITE_OMIT_INCRBLOB


1627 
	$blobH™dÀFromObj
(

1628 
T˛_I¡îp
 *
öãΩ
,

1629 
T˛_Obj
 *
pObj
,

1630 
sqlôe3_blob
 **
µBlob


1632 *
z
;

1633 
n
;

1635 
z
 = 
	`T˛_GëSåögFromObj
(
pObj
, &
n
);

1636 if–
n
==0 ){

1637 *
µBlob
 = 0;

1639 
nŸU£d
;

1640 
T˛_Ch™√l
 
ch™√l
;

1641 
Clõ¡D©a
 
ö°™˚D©a
;

1643 
ch™√l
 = 
	`T˛_GëCh™√l
(
öãΩ
, 
z
, &
nŸU£d
);

1644 if–!
ch™√l
 )  
TCL_ERROR
;

1646 
	`T˛_Flush
(
ch™√l
);

1647 
	`T˛_Sìk
(
ch™√l
, 0, 
SEEK_SET
);

1649 
ö°™˚D©a
 = 
	`T˛_GëCh™√lIn°™˚D©a
(
ch™√l
);

1650 *
µBlob
 = *((
sqlôe3_blob
 **)
ö°™˚D©a
);

1653  
TCL_OK
;

1654 
	}
}

1656 
	$ã°_blob_ª›í
(

1657 
Clõ¡D©a
 
˛õ¡D©a
,

1658 
T˛_I¡îp
 *
öãΩ
,

1659 
objc
,

1660 
T˛_Obj
 *
CONST
 
objv
[]

1662 
T˛_WideI¡
 
iRowid
;

1663 
sqlôe3_blob
 *
pBlob
;

1664 
rc
;

1666 if–
objc
!=3 ){

1667 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "CHANNEL ROWID");

1668  
TCL_ERROR
;

1671 if–
	`blobH™dÀFromObj
(
öãΩ
, 
objv
[1], &
pBlob
ËË 
TCL_ERROR
;

1672 if–
	`T˛_GëWideI¡FromObj
(
öãΩ
, 
objv
[2], &
iRowid
ËË 
TCL_ERROR
;

1674 
rc
 = 
	`sqlôe3_blob_ª›í
(
pBlob
, 
iRowid
);

1675 if–
rc
!=
SQLITE_OK
 ){

1676 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_VOLATILE
);

1679  (
rc
==
SQLITE_OK
 ? 
TCL_OK
 : 
TCL_ERROR
);

1680 
	}
}

1690 
	sTe°Cﬁœti⁄X
 {

1691 
T˛_I¡îp
 *
	möãΩ
;

1692 
T˛_Obj
 *
	mpCmp
;

1693 
T˛_Obj
 *
	mpDñ
;

1695 
Te°Cﬁœti⁄X
 
	tTe°Cﬁœti⁄X
;

1696 
	$ã°Cª©eCﬁœti⁄Dñ
(*
pCtx
){

1697 
Te°Cﬁœti⁄X
 *
p
 = (Te°Cﬁœti⁄X *)
pCtx
;

1699 
rc
 = 
	`T˛_EvÆObjEx
(
p
->
öãΩ
,Ö->
pDñ
, 
TCL_EVAL_DIRECT
|
TCL_EVAL_GLOBAL
);

1700 if–
rc
!=
TCL_OK
 ){

1701 
	`T˛_BackgroundEº‹
(
p
->
öãΩ
);

1704 
	`T˛_De¸RefCou¡
(
p
->
pCmp
);

1705 
	`T˛_De¸RefCou¡
(
p
->
pDñ
);

1706 
	`sqlôe3_‰ì
((*)
p
);

1707 
	}
}

1708 
	$ã°Cª©eCﬁœti⁄Cmp
(

1709 *
pCtx
,

1710 
nLe·
,

1711 c⁄° *
zLe·
,

1712 
nRight
,

1713 c⁄° *
zRight


1715 
Te°Cﬁœti⁄X
 *
p
 = (Te°Cﬁœti⁄X *)
pCtx
;

1716 
T˛_Obj
 *
pS¸ùt
 = 
	`T˛_Du∂iˇãObj
(
p
->
pCmp
);

1717 
iRes
 = 0;

1719 
	`T˛_In¸RefCou¡
(
pS¸ùt
);

1720 
	`T˛_Li°ObjAµídEÀmít
(0, 
pS¸ùt
, 
	`T˛_NewSåögObj
((*)
zLe·
, 
nLe·
));

1721 
	`T˛_Li°ObjAµídEÀmít
(0, 
pS¸ùt
, 
	`T˛_NewSåögObj
((*)
zRight
,
nRight
));

1723 if–
TCL_OK
!=
	`T˛_EvÆObjEx
(
p
->
öãΩ
, 
pS¸ùt
, 
TCL_EVAL_DIRECT
|
TCL_EVAL_GLOBAL
)

1724 || 
TCL_OK
!=
	`T˛_GëI¡FromObj
(
p
->
öãΩ
, 
	`T˛_GëObjResu…
’->öãΩ), &
iRes
)

1726 
	`T˛_BackgroundEº‹
(
p
->
öãΩ
);

1728 
	`T˛_De¸RefCou¡
(
pS¸ùt
);

1730  
iRes
;

1731 
	}
}

1732 
	$ã°_¸óã_cﬁœti⁄_v2
(

1733 
Clõ¡D©a
 
˛õ¡D©a
,

1734 
T˛_I¡îp
 *
öãΩ
,

1735 
objc
,

1736 
T˛_Obj
 *
CONST
 
objv
[]

1738 
Te°Cﬁœti⁄X
 *
p
;

1739 
sqlôe3
 *
db
;

1740 
rc
;

1742 if–
objc
!=5 ){

1743 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB-HANDLE NAME CMP-PROC DEL-PROC");

1744  
TCL_ERROR
;

1746 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

1748 
p
 = (
Te°Cﬁœti⁄X
 *)
	`sqlôe3_mÆloc
((TestCollationX));

1749 
p
->
pCmp
 = 
objv
[3];

1750 
p
->
pDñ
 = 
objv
[4];

1751 
p
->
öãΩ
 = interp;

1752 
	`T˛_In¸RefCou¡
(
p
->
pCmp
);

1753 
	`T˛_In¸RefCou¡
(
p
->
pDñ
);

1755 
rc
 = 
	`sqlôe3_¸óã_cﬁœti⁄_v2
(
db
, 
	`T˛_GëSåög
(
objv
[2]), 16,

1756 (*)
p
, 
ã°Cª©eCﬁœti⁄Cmp
, 
ã°Cª©eCﬁœti⁄Dñ


1758 if–
rc
!=
SQLITE_MISUSE
 ){

1759 
	`T˛_AµídResu…
(
öãΩ
, "sqlite3_create_collate_v2() failedÅo detect "

1761  
TCL_ERROR
;

1763 
rc
 = 
	`sqlôe3_¸óã_cﬁœti⁄_v2
(
db
, 
	`T˛_GëSåög
(
objv
[2]), 
SQLITE_UTF8
,

1764 (*)
p
, 
ã°Cª©eCﬁœti⁄Cmp
, 
ã°Cª©eCﬁœti⁄Dñ


1766  
TCL_OK
;

1767 
	}
}

1779 
Cª©eFun˘i⁄V2
 
	tCª©eFun˘i⁄V2
;

1780 
	sCª©eFun˘i⁄V2
 {

1781 
T˛_I¡îp
 *
	möãΩ
;

1782 
T˛_Obj
 *
	mpFunc
;

1783 
T˛_Obj
 *
	mpSãp
;

1784 
T˛_Obj
 *
	mpFöÆ
;

1785 
T˛_Obj
 *
	mpDe°roy
;

1787 
	$cf2Func
(
sqlôe3_c⁄ãxt
 *
˘x
, 
nArg
, 
sqlôe3_vÆue
 **
aArg
){

1788 
	}
}

1789 
	$cf2Sãp
(
sqlôe3_c⁄ãxt
 *
˘x
, 
nArg
, 
sqlôe3_vÆue
 **
aArg
){

1790 
	}
}

1791 
	$cf2FöÆ
(
sqlôe3_c⁄ãxt
 *
˘x
){

1792 
	}
}

1793 
	$cf2De°roy
(*
pU£r
){

1794 
Cª©eFun˘i⁄V2
 *
p
 = (Cª©eFun˘i⁄V2 *)
pU£r
;

1796 if–
p
->
öãΩ
 &&Ö->
pDe°roy
 ){

1797 
rc
 = 
	`T˛_EvÆObjEx
(
p
->
öãΩ
,Ö->
pDe°roy
, 0);

1798 if–
rc
!=
TCL_OK
 ) 
	`T˛_BackgroundEº‹
(
p
->
öãΩ
);

1801 if–
p
->
pFunc
 ) 
	`T˛_De¸RefCou¡
(p->pFunc);

1802 if–
p
->
pSãp
 ) 
	`T˛_De¸RefCou¡
(p->pStep);

1803 if–
p
->
pFöÆ
 ) 
	`T˛_De¸RefCou¡
(p->pFinal);

1804 if–
p
->
pDe°roy
 ) 
	`T˛_De¸RefCou¡
(p->pDestroy);

1805 
	`sqlôe3_‰ì
(
p
);

1806 
	}
}

1807 
	$ã°_¸óã_fun˘i⁄_v2
(

1808 
Clõ¡D©a
 
˛õ¡D©a
,

1809 
T˛_I¡îp
 *
öãΩ
,

1810 
objc
,

1811 
T˛_Obj
 *
CONST
 
objv
[]

1813 
sqlôe3
 *
db
;

1814 c⁄° *
zFunc
;

1815 
nArg
;

1816 
íc
;

1817 
Cª©eFun˘i⁄V2
 *
p
;

1818 
i
;

1819 
rc
;

1821 
	sEncTabÀ
 {

1822 c⁄° *
zEnc
;

1823 
íc
;

1824 } 
aEnc
[] = {

1825 {"utf8", 
SQLITE_UTF8
 },

1826 {"utf16", 
SQLITE_UTF16
 },

1827 {"utf16À", 
SQLITE_UTF16LE
 },

1828 {"utf16be", 
SQLITE_UTF16BE
 },

1829 {"™y", 
SQLITE_ANY
 },

1833 if–
objc
<5 || (objc%2)==0 ){

1834 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB NAME NARG ENC SWITCHES...");

1835  
TCL_ERROR
;

1838 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

1839 
zFunc
 = 
	`T˛_GëSåög
(
objv
[2]);

1840 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
nArg
ËË 
TCL_ERROR
;

1841 if–
	`T˛_GëIndexFromObjSåu˘
(
öãΩ
, 
objv
[4], 
aEnc
, (aEnc[0]),

1842 "ícodög", 0, &
íc
)

1844  
TCL_ERROR
;

1846 
íc
 = 
aEnc
[enc].enc;

1848 
p
 = 
	`sqlôe3_mÆloc
((
Cª©eFun˘i⁄V2
));

1849 
	`as£π
–
p
 );

1850 
	`mem£t
(
p
, 0, (
Cª©eFun˘i⁄V2
));

1851 
p
->
öãΩ
 = interp;

1853 
i
=5; i<
objc
; i+=2){

1854 
iSwôch
;

1855 c⁄° *
azSwôch
[] = {"-func", "-step", "-final", "-destroy", 0};

1856 if–
	`T˛_GëIndexFromObj
(
öãΩ
, 
objv
[
i
], 
azSwôch
, "swôch", 0, &
iSwôch
) ){

1857 
	`sqlôe3_‰ì
(
p
);

1858  
TCL_ERROR
;

1861  
iSwôch
 ){

1862 0: 
p
->
pFunc
 = 
objv
[
i
+1]; ;

1863 1: 
p
->
pSãp
 = 
objv
[
i
+1]; ;

1864 2: 
p
->
pFöÆ
 = 
objv
[
i
+1]; ;

1865 3: 
p
->
pDe°roy
 = 
objv
[
i
+1]; ;

1868 if–
p
->
pFunc
 )Ö->pFun¯
	`T˛_Du∂iˇãObj
(p->pFunc);

1869 if–
p
->
pSãp
 )Ö->pSã∞
	`T˛_Du∂iˇãObj
(p->pStep);

1870 if–
p
->
pFöÆ
 )Ö->pFöÆ = 
	`T˛_Du∂iˇãObj
(p->pFinal);

1871 if–
p
->
pDe°roy
 )Ö->pDe°roy = 
	`T˛_Du∂iˇãObj
(p->pDestroy);

1873 if–
p
->
pFunc
 ) 
	`T˛_In¸RefCou¡
(p->pFunc);

1874 if–
p
->
pSãp
 ) 
	`T˛_In¸RefCou¡
(p->pStep);

1875 if–
p
->
pFöÆ
 ) 
	`T˛_In¸RefCou¡
(p->pFinal);

1876 if–
p
->
pDe°roy
 ) 
	`T˛_In¸RefCou¡
(p->pDestroy);

1878 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄_v2
(
db
, 
zFunc
, 
nArg
, 
íc
, (*)
p
,

1879 (
p
->
pFunc
 ? 
cf2Func
 : 0),

1880 (
p
->
pSãp
 ? 
cf2Sãp
 : 0),

1881 (
p
->
pFöÆ
 ? 
cf2FöÆ
 : 0),

1882 
cf2De°roy


1884 if–
rc
!=
SQLITE_OK
 ){

1885 
	`T˛_Re£tResu…
(
öãΩ
);

1886 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

1887  
TCL_ERROR
;

1889  
TCL_OK
;

1890 
	}
}

1895 
	$ã°_lﬂd_exãnsi⁄
(

1896 
Clõ¡D©a
 
˛õ¡D©a
,

1897 
T˛_I¡îp
 *
öãΩ
,

1898 
objc
,

1899 
T˛_Obj
 *
CONST
 
objv
[]

1901 
T˛_CmdInfo
 
cmdInfo
;

1902 
sqlôe3
 *
db
;

1903 
rc
;

1904 *
zDb
;

1905 *
zFûe
;

1906 *
zProc
 = 0;

1907 *
zEº
 = 0;

1909 if–
objc
!=4 && objc!=3 ){

1910 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB-HANDLE FILE ?PROC?");

1911  
TCL_ERROR
;

1913 
zDb
 = 
	`T˛_GëSåög
(
objv
[1]);

1914 
zFûe
 = 
	`T˛_GëSåög
(
objv
[2]);

1915 if–
objc
==4 ){

1916 
zProc
 = 
	`T˛_GëSåög
(
objv
[3]);

1920 if–!
	`T˛_GëComm™dInfo
(
öãΩ
, 
zDb
, &
cmdInfo
) ){

1921 
	`T˛_AµídResu…
(
öãΩ
, "comm™dÇŸ found: ", 
zDb
, (*)0);

1922  
TCL_ERROR
;

1924 
db
 = ((
SqlôeDb
*)
cmdInfo
.
objClõ¡D©a
)->db;

1925 
	`as£π
(
db
);

1931 #ifde‡
SQLITE_OMIT_LOAD_EXTENSION


1932 
rc
 = 
SQLITE_ERROR
;

1933 
zEº
 = 
	`sqlôe3_m¥ötf
("this build omits sqlite3_load_extension()");

1934 ()
zProc
;

1935 ()
zFûe
;

1937 
rc
 = 
	`sqlôe3_lﬂd_exãnsi⁄
(
db
, 
zFûe
, 
zProc
, &
zEº
);

1939 if–
rc
!=
SQLITE_OK
 ){

1940 
	`T˛_SëResu…
(
öãΩ
, 
zEº
 ? zEº : "", 
TCL_VOLATILE
);

1941 
rc
 = 
TCL_ERROR
;

1943 
rc
 = 
TCL_OK
;

1945 
	`sqlôe3_‰ì
(
zEº
);

1947  
rc
;

1948 
	}
}

1953 
	$ã°_íabÀ_lﬂd
(

1954 
Clõ¡D©a
 
˛õ¡D©a
,

1955 
T˛_I¡îp
 *
öãΩ
,

1956 
objc
,

1957 
T˛_Obj
 *
CONST
 
objv
[]

1959 
T˛_CmdInfo
 
cmdInfo
;

1960 
sqlôe3
 *
db
;

1961 *
zDb
;

1962 
⁄off
;

1964 if–
objc
!=3 ){

1965 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB-HANDLE ONOFF");

1966  
TCL_ERROR
;

1968 
zDb
 = 
	`T˛_GëSåög
(
objv
[1]);

1971 if–!
	`T˛_GëComm™dInfo
(
öãΩ
, 
zDb
, &
cmdInfo
) ){

1972 
	`T˛_AµídResu…
(
öãΩ
, "comm™dÇŸ found: ", 
zDb
, (*)0);

1973  
TCL_ERROR
;

1975 
db
 = ((
SqlôeDb
*)
cmdInfo
.
objClõ¡D©a
)->db;

1976 
	`as£π
(
db
);

1979 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[2], &
⁄off
) ){

1980  
TCL_ERROR
;

1983 #ifde‡
SQLITE_OMIT_LOAD_EXTENSION


1984 
	`T˛_AµídResu…
(
öãΩ
, "this build omits sqlite3_load_extension()");

1985  
TCL_ERROR
;

1987 
	`sqlôe3_íabÀ_lﬂd_exãnsi⁄
(
db
, 
⁄off
);

1988  
TCL_OK
;

1990 
	}
}

1999 
	$sqlôe_ab‹t
(

2000 *
NŸU£d
,

2001 
T˛_I¡îp
 *
öãΩ
,

2002 
¨gc
,

2003 **
¨gv


2005 #i‡
	`deföed
(
_MSC_VER
)

2009 
	`_£t_ab‹t_behavi‹
–0, 
_CALL_REPORTFAULT
 );

2011 
	`exô
(255);

2012 
	`as£π
–
öãΩ
==0 );

2013  
TCL_OK
;

2014 
	}
}

2020 
	$ã°Func
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

2021  
¨gc
>=2 ){

2022 c⁄° *
zArg0
 = (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

2023 if–
zArg0
 ){

2024 if–0==
	`sqlôe3SåICmp
(
zArg0
, "int") ){

2025 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
	`sqlôe3_vÆue_öt
(
¨gv
[1]));

2026 }if–
	`sqlôe3SåICmp
(
zArg0
,"int64")==0 ){

2027 
	`sqlôe3_ªsu…_öt64
(
c⁄ãxt
, 
	`sqlôe3_vÆue_öt64
(
¨gv
[1]));

2028 }if–
	`sqlôe3SåICmp
(
zArg0
,"string")==0 ){

2029 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[1]), -1,

2030 
SQLITE_TRANSIENT
);

2031 }if–
	`sqlôe3SåICmp
(
zArg0
,"double")==0 ){

2032 
	`sqlôe3_ªsu…_doubÀ
(
c⁄ãxt
, 
	`sqlôe3_vÆue_doubÀ
(
¨gv
[1]));

2033 }if–
	`sqlôe3SåICmp
(
zArg0
,"null")==0 ){

2034 
	`sqlôe3_ªsu…_nuŒ
(
c⁄ãxt
);

2035 }if–
	`sqlôe3SåICmp
(
zArg0
,"value")==0 ){

2036 
	`sqlôe3_ªsu…_vÆue
(
c⁄ãxt
, 
¨gv
[
	`sqlôe3_vÆue_öt
(argv[1])]);

2038 
îr‹_out
;

2041 
îr‹_out
;

2043 
¨gc
 -= 2;

2044 
¨gv
 += 2;

2048 
îr‹_out
:

2049 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
,"firstárgument should be one of: "

2051 
	}
}

2058 
	$ã°_ªgi°î_func
(

2059 *
NŸU£d
,

2060 
T˛_I¡îp
 *
öãΩ
,

2061 
¨gc
,

2062 **
¨gv


2064 
sqlôe3
 *
db
;

2065 
rc
;

2066 if–
¨gc
!=3 ){

2067 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

2069  
TCL_ERROR
;

2071 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

2072 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, 
¨gv
[2], -1, 
SQLITE_UTF8
, 0,

2073 
ã°Func
, 0, 0);

2074 if–
rc
!=0 ){

2075 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºSå
(
rc
), 0);

2076  
TCL_ERROR
;

2078 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

2079  
TCL_OK
;

2080 
	}
}

2087 
	$ã°_föÆize
(

2088 * 
˛õ¡D©a
,

2089 
T˛_I¡îp
 *
öãΩ
,

2090 
objc
,

2091 
T˛_Obj
 *
CONST
 
objv
[]

2093 
sqlôe3_°mt
 *
pStmt
;

2094 
rc
;

2095 
sqlôe3
 *
db
 = 0;

2097 if–
objc
!=2 ){

2098 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2099 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " <STMT>", 0);

2100  
TCL_ERROR
;

2103 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2105 if–
pStmt
 ){

2106 
db
 = 
	`StmtToDb
(
pStmt
);

2108 
rc
 = 
	`sqlôe3_föÆize
(
pStmt
);

2109 
	`T˛_SëResu…
(
öãΩ
, (*)
	`t1Eº‹Name
(
rc
), 
TCL_STATIC
);

2110 if–
db
 && 
	`sqlôe3Te°EºCode
(
öãΩ
, db, 
rc
ËË 
TCL_ERROR
;

2111  
TCL_OK
;

2112 
	}
}

2119 
	$ã°_°mt_°©us
(

2120 * 
˛õ¡D©a
,

2121 
T˛_I¡îp
 *
öãΩ
,

2122 
objc
,

2123 
T˛_Obj
 *
CONST
 
objv
[]

2125 
iVÆue
;

2126 
i
, 
›
 = 0, 
ª£tFœg
;

2127 c⁄° *
zOpName
;

2128 
sqlôe3_°mt
 *
pStmt
;

2131 c⁄° *
zName
;

2132 
›
;

2133 } 
aOp
[] = {

2134 { "SQLITE_STMTSTATUS_FULLSCAN_STEP", 
SQLITE_STMTSTATUS_FULLSCAN_STEP
 },

2135 { "SQLITE_STMTSTATUS_SORT", 
SQLITE_STMTSTATUS_SORT
 },

2136 { "SQLITE_STMTSTATUS_AUTOINDEX", 
SQLITE_STMTSTATUS_AUTOINDEX
 },

2137 { "SQLITE_STMTSTATUS_VM_STEP", 
SQLITE_STMTSTATUS_VM_STEP
 },

2139 if–
objc
!=4 ){

2140 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "STMT PARAMETER RESETFLAG");

2141  
TCL_ERROR
;

2143 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2144 
zOpName
 = 
	`T˛_GëSåög
(
objv
[2]);

2145 
i
=0; i<
	`AºaySize
(
aOp
); i++){

2146 if–
	`°rcmp
(
aOp
[
i
].
zName
, 
zOpName
)==0 ){

2147 
›
 = 
aOp
[
i
].op;

2151 if–
i
>=
	`AºaySize
(
aOp
) ){

2152 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
›
ËË 
TCL_ERROR
;

2154 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[3], &
ª£tFœg
ËË 
TCL_ERROR
;

2155 
iVÆue
 = 
	`sqlôe3_°mt_°©us
(
pStmt
, 
›
, 
ª£tFœg
);

2156 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
iVÆue
));

2157  
TCL_OK
;

2158 
	}
}

2160 #ifde‡
SQLITE_ENABLE_STMT_SCANSTATUS


2164 
	$ã°_°mt_sˇn°©us
(

2165 * 
˛õ¡D©a
,

2166 
T˛_I¡îp
 *
öãΩ
,

2167 
objc
,

2168 
T˛_Obj
 *
CONST
 
objv
[]

2170 
sqlôe3_°mt
 *
pStmt
;

2171 
idx
;

2173 c⁄° *
zName
;

2174 c⁄° *
zEx∂aö
;

2175 
sqlôe3_öt64
 
nLo›
;

2176 
sqlôe3_öt64
 
nVisô
;

2177 
rE°
;

2178 
ªs
;

2180 if–
objc
!=3 ){

2181 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "STMT IDX");

2182  
TCL_ERROR
;

2184 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2185 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
idx
ËË 
TCL_ERROR
;

2187 
ªs
 = 
	`sqlôe3_°mt_sˇn°©us
(
pStmt
, 
idx
, 
SQLITE_SCANSTAT_NLOOP
, (*)&
nLo›
);

2188 if–
ªs
==0 ){

2189 
T˛_Obj
 *
pRë
 = 
	`T˛_NewObj
();

2190 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRë
, 
	`T˛_NewSåögObj
("nLoop", -1));

2191 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRë
, 
	`T˛_NewWideI¡Obj
(
nLo›
));

2192 
	`sqlôe3_°mt_sˇn°©us
(
pStmt
, 
idx
, 
SQLITE_SCANSTAT_NVISIT
, (*)&
nVisô
);

2193 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRë
, 
	`T˛_NewSåögObj
("nVisit", -1));

2194 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRë
, 
	`T˛_NewWideI¡Obj
(
nVisô
));

2195 
	`sqlôe3_°mt_sˇn°©us
(
pStmt
, 
idx
, 
SQLITE_SCANSTAT_EST
, (*)&
rE°
);

2196 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRë
, 
	`T˛_NewSåögObj
("nEst", -1));

2197 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRë
, 
	`T˛_NewDoubÀObj
(
rE°
));

2198 
	`sqlôe3_°mt_sˇn°©us
(
pStmt
, 
idx
, 
SQLITE_SCANSTAT_NAME
, (*)&
zName
);

2199 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRë
, 
	`T˛_NewSåögObj
("zName", -1));

2200 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRë
, 
	`T˛_NewSåögObj
(
zName
, -1));

2201 
	`sqlôe3_°mt_sˇn°©us
(
pStmt
, 
idx
, 
SQLITE_SCANSTAT_EXPLAIN
, (*)&
zEx∂aö
);

2202 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRë
, 
	`T˛_NewSåögObj
("zExplain", -1));

2203 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRë
, 
	`T˛_NewSåögObj
(
zEx∂aö
, -1));

2204 
	`T˛_SëObjResu…
(
öãΩ
, 
pRë
);

2206 
	`T˛_Re£tResu…
(
öãΩ
);

2208  
TCL_OK
;

2209 
	}
}

2214 
	$ã°_°mt_sˇn°©us_ª£t
(

2215 * 
˛õ¡D©a
,

2216 
T˛_I¡îp
 *
öãΩ
,

2217 
objc
,

2218 
T˛_Obj
 *
CONST
 
objv
[]

2220 
sqlôe3_°mt
 *
pStmt
;

2221 if–
objc
!=2 ){

2222 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "STMT");

2223  
TCL_ERROR
;

2225 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2226 
	`sqlôe3_°mt_sˇn°©us_ª£t
(
pStmt
);

2227  
TCL_OK
;

2228 
	}
}

2231 #ifde‡
SQLITE_ENABLE_SQLLOG


2237 
	$ã°_c⁄fig_sqŒog
(

2238 * 
˛õ¡D©a
,

2239 
T˛_I¡îp
 *
öãΩ
,

2240 
objc
,

2241 
T˛_Obj
 *
CONST
 
objv
[]

2243 if–
objc
!=1 ){

2244 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

2245  
TCL_ERROR
;

2247 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_SQLLOG
, 0, 0);

2248  
TCL_OK
;

2249 
	}
}

2257 
	$vfsCuºítTimeI¡64
(

2258 * 
˛õ¡D©a
,

2259 
T˛_I¡îp
 *
öãΩ
,

2260 
objc
,

2261 
T˛_Obj
 *
CONST
 
objv
[]

2263 
i64
 
t
;

2264 
sqlôe3_vfs
 *
pVfs
 = 
	`sqlôe3_vfs_föd
(0);

2265 if–
objc
!=1 ){

2266 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

2267  
TCL_ERROR
;

2269 
pVfs
->
	`xCuºítTimeI¡64
’Vfs, &
t
);

2270 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewWideI¡Obj
(
t
));

2271  
TCL_OK
;

2272 
	}
}

2274 #ifde‡
SQLITE_ENABLE_SNAPSHOT


2278 
	$ã°_¢≠shŸ_gë
(

2279 * 
˛õ¡D©a
,

2280 
T˛_I¡îp
 *
öãΩ
,

2281 
objc
,

2282 
T˛_Obj
 *
CONST
 
objv
[]

2284 
rc
;

2285 
sqlôe3
 *
db
;

2286 *
zName
;

2287 
sqlôe3_¢≠shŸ
 *
pS«pshŸ
 = 0;

2289 if–
objc
!=3 ){

2290 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB DBNAME");

2291  
TCL_ERROR
;

2293 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

2294 
zName
 = 
	`T˛_GëSåög
(
objv
[2]);

2296 
rc
 = 
	`sqlôe3_¢≠shŸ_gë
(
db
, 
zName
, &
pS«pshŸ
);

2297 if–
rc
!=
SQLITE_OK
 ){

2298 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewSåögObj
(
	`sqlôe3EºName
(
rc
), -1));

2299  
TCL_ERROR
;

2301 
zBuf
[100];

2302 if–
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
pS«pshŸ
ËË 
TCL_ERROR
;

2303 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewSåögObj
(
zBuf
, -1));

2305  
TCL_OK
;

2306 
	}
}

2309 #ifde‡
SQLITE_ENABLE_SNAPSHOT


2313 
	$ã°_¢≠shŸ_›í
(

2314 * 
˛õ¡D©a
,

2315 
T˛_I¡îp
 *
öãΩ
,

2316 
objc
,

2317 
T˛_Obj
 *
CONST
 
objv
[]

2319 
rc
;

2320 
sqlôe3
 *
db
;

2321 *
zName
;

2322 
sqlôe3_¢≠shŸ
 *
pS«pshŸ
;

2324 if–
objc
!=4 ){

2325 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB DBNAME SNAPSHOT");

2326  
TCL_ERROR
;

2328 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

2329 
zName
 = 
	`T˛_GëSåög
(
objv
[2]);

2330 
pS«pshŸ
 = (
sqlôe3_¢≠shŸ
*)
	`sqlôe3Te°TextToPå
(
	`T˛_GëSåög
(
objv
[3]));

2332 
rc
 = 
	`sqlôe3_¢≠shŸ_›í
(
db
, 
zName
, 
pS«pshŸ
);

2333 if–
rc
!=
SQLITE_OK
 ){

2334 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewSåögObj
(
	`sqlôe3EºName
(
rc
), -1));

2335  
TCL_ERROR
;

2337  
TCL_OK
;

2338 
	}
}

2341 #ifde‡
SQLITE_ENABLE_SNAPSHOT


2345 
	$ã°_¢≠shŸ_‰ì
(

2346 * 
˛õ¡D©a
,

2347 
T˛_I¡îp
 *
öãΩ
,

2348 
objc
,

2349 
T˛_Obj
 *
CONST
 
objv
[]

2351 
sqlôe3_¢≠shŸ
 *
pS«pshŸ
;

2352 if–
objc
!=2 ){

2353 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "SNAPSHOT");

2354  
TCL_ERROR
;

2356 
pS«pshŸ
 = (
sqlôe3_¢≠shŸ
*)
	`sqlôe3Te°TextToPå
(
	`T˛_GëSåög
(
objv
[1]));

2357 
	`sqlôe3_¢≠shŸ_‰ì
(
pS«pshŸ
);

2358  
TCL_OK
;

2359 
	}
}

2362 #ifde‡
SQLITE_ENABLE_SNAPSHOT


2366 
	$ã°_¢≠shŸ_cmp
(

2367 * 
˛õ¡D©a
,

2368 
T˛_I¡îp
 *
öãΩ
,

2369 
objc
,

2370 
T˛_Obj
 *
CONST
 
objv
[]

2372 
ªs
;

2373 
sqlôe3_¢≠shŸ
 *
p1
;

2374 
sqlôe3_¢≠shŸ
 *
p2
;

2375 if–
objc
!=3 ){

2376 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "SNAPSHOT1 SNAPSHOT2");

2377  
TCL_ERROR
;

2379 
p1
 = (
sqlôe3_¢≠shŸ
*)
	`sqlôe3Te°TextToPå
(
	`T˛_GëSåög
(
objv
[1]));

2380 
p2
 = (
sqlôe3_¢≠shŸ
*)
	`sqlôe3Te°TextToPå
(
	`T˛_GëSåög
(
objv
[2]));

2381 
ªs
 = 
	`sqlôe3_¢≠shŸ_cmp
(
p1
, 
p2
);

2382 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
ªs
));

2383  
TCL_OK
;

2384 
	}
}

2392 
	$ã°_√xt_°mt
(

2393 * 
˛õ¡D©a
,

2394 
T˛_I¡îp
 *
öãΩ
,

2395 
objc
,

2396 
T˛_Obj
 *
CONST
 
objv
[]

2398 
sqlôe3_°mt
 *
pStmt
;

2399 
sqlôe3
 *
db
 = 0;

2400 
zBuf
[50];

2402 if–
objc
!=3 ){

2403 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2404 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " DB STMT", 0);

2405  
TCL_ERROR
;

2408 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

2409 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[2]), &
pStmt
ËË 
TCL_ERROR
;

2410 
pStmt
 = 
	`sqlôe3_√xt_°mt
(
db
,ÖStmt);

2411 if–
pStmt
 ){

2412 if–
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
pStmt
ËË 
TCL_ERROR
;

2413 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

2415  
TCL_OK
;

2416 
	}
}

2424 
	$ã°_°mt_ªad⁄ly
(

2425 * 
˛õ¡D©a
,

2426 
T˛_I¡îp
 *
öãΩ
,

2427 
objc
,

2428 
T˛_Obj
 *
CONST
 
objv
[]

2430 
sqlôe3_°mt
 *
pStmt
;

2431 
rc
;

2433 if–
objc
!=2 ){

2434 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2435 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " STMT", 0);

2436  
TCL_ERROR
;

2439 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2440 
rc
 = 
	`sqlôe3_°mt_ªad⁄ly
(
pStmt
);

2441 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewBoﬁónObj
(
rc
));

2442  
TCL_OK
;

2443 
	}
}

2451 
	$ã°_°mt_busy
(

2452 * 
˛õ¡D©a
,

2453 
T˛_I¡îp
 *
öãΩ
,

2454 
objc
,

2455 
T˛_Obj
 *
CONST
 
objv
[]

2457 
sqlôe3_°mt
 *
pStmt
;

2458 
rc
;

2460 if–
objc
!=2 ){

2461 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2462 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " STMT", 0);

2463  
TCL_ERROR
;

2466 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2467 
rc
 = 
	`sqlôe3_°mt_busy
(
pStmt
);

2468 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewBoﬁónObj
(
rc
));

2469  
TCL_OK
;

2470 
	}
}

2477 
	$u£s_°mt_jou∫Æ
(

2478 * 
˛õ¡D©a
,

2479 
T˛_I¡îp
 *
öãΩ
,

2480 
objc
,

2481 
T˛_Obj
 *
CONST
 
objv
[]

2483 
sqlôe3_°mt
 *
pStmt
;

2485 if–
objc
!=2 ){

2486 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2487 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " STMT", 0);

2488  
TCL_ERROR
;

2491 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2492 
	`sqlôe3_°mt_ªad⁄ly
(
pStmt
);

2493 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewBoﬁónObj
(((
Vdbe
 *)
pStmt
)->
u£sStmtJou∫Æ
));

2494  
TCL_OK
;

2495 
	}
}

2503 
	$ã°_ª£t
(

2504 * 
˛õ¡D©a
,

2505 
T˛_I¡îp
 *
öãΩ
,

2506 
objc
,

2507 
T˛_Obj
 *
CONST
 
objv
[]

2509 
sqlôe3_°mt
 *
pStmt
;

2510 
rc
;

2512 if–
objc
!=2 ){

2513 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2514 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " <STMT>", 0);

2515  
TCL_ERROR
;

2518 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2520 
rc
 = 
	`sqlôe3_ª£t
(
pStmt
);

2521 if–
pStmt
 && 
	`sqlôe3Te°EºCode
(
öãΩ
, 
	`StmtToDb
’Stmt), 
rc
) ){

2522  
TCL_ERROR
;

2524 
	`T˛_SëResu…
(
öãΩ
, (*)
	`t1Eº‹Name
(
rc
), 
TCL_STATIC
);

2530  
TCL_OK
;

2531 
	}
}

2538 
	$ã°_expúed
(

2539 * 
˛õ¡D©a
,

2540 
T˛_I¡îp
 *
öãΩ
,

2541 
objc
,

2542 
T˛_Obj
 *
CONST
 
objv
[]

2544 #i‚de‡
SQLITE_OMIT_DEPRECATED


2545 
sqlôe3_°mt
 *
pStmt
;

2546 if–
objc
!=2 ){

2547 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2548 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " <STMT>", 0);

2549  
TCL_ERROR
;

2551 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2552 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewBoﬁónObj
(
	`sqlôe3_expúed
(
pStmt
)));

2554  
TCL_OK
;

2555 
	}
}

2562 
	$ã°_å™s„r_böd
(

2563 * 
˛õ¡D©a
,

2564 
T˛_I¡îp
 *
öãΩ
,

2565 
objc
,

2566 
T˛_Obj
 *
CONST
 
objv
[]

2568 #i‚de‡
SQLITE_OMIT_DEPRECATED


2569 
sqlôe3_°mt
 *
pStmt1
, *
pStmt2
;

2570 if–
objc
!=3 ){

2571 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2572 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " FROM-STMT TO-STMT", 0);

2573  
TCL_ERROR
;

2575 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt1
)Ë 
TCL_ERROR
;

2576 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[2]), &
pStmt2
)Ë 
TCL_ERROR
;

2577 
	`T˛_SëObjResu…
(
öãΩ
,

2578 
	`T˛_NewI¡Obj
(
	`sqlôe3_å™s„r_bödögs
(
pStmt1
,
pStmt2
)));

2580  
TCL_OK
;

2581 
	}
}

2589 
	$ã°_ch™ges
(

2590 * 
˛õ¡D©a
,

2591 
T˛_I¡îp
 *
öãΩ
,

2592 
objc
,

2593 
T˛_Obj
 *
CONST
 
objv
[]

2595 
sqlôe3
 *
db
;

2596 if–
objc
!=2 ){

2597 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2598 
	`T˛_GëSåög
(
objv
[0]), " DB", 0);

2599  
TCL_ERROR
;

2601 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

2602 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`sqlôe3_ch™ges
(
db
)));

2603  
TCL_OK
;

2604 
	}
}

2610 *
	gsqlôe_°©ic_böd_vÆue
 = 0;

2611 
	gsqlôe_°©ic_böd_nbyã
 = 0;

2624 
	$ã°_böd
(

2625 *
NŸU£d
,

2626 
T˛_I¡îp
 *
öãΩ
,

2627 
¨gc
,

2628 **
¨gv


2630 
sqlôe3_°mt
 *
pStmt
;

2631 
rc
;

2632 
idx
;

2633 if–
¨gc
!=5 ){

2634 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

2636  
TCL_ERROR
;

2638 if–
	`gëStmtPoöãr
(
öãΩ
, 
¨gv
[1], &
pStmt
ËË 
TCL_ERROR
;

2639 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
idx
ËË 
TCL_ERROR
;

2640 if–
	`°rcmp
(
¨gv
[4],"null")==0 ){

2641 
rc
 = 
	`sqlôe3_böd_nuŒ
(
pStmt
, 
idx
);

2642 }if–
	`°rcmp
(
¨gv
[4],"static")==0 ){

2643 
rc
 = 
	`sqlôe3_böd_ãxt
(
pStmt
, 
idx
, 
sqlôe_°©ic_böd_vÆue
, -1, 0);

2644 }if–
	`°rcmp
(
¨gv
[4],"static-nbytes")==0 ){

2645 
rc
 = 
	`sqlôe3_böd_ãxt
(
pStmt
, 
idx
, 
sqlôe_°©ic_böd_vÆue
,

2646 
sqlôe_°©ic_böd_nbyã
, 0);

2647 }if–
	`°rcmp
(
¨gv
[4],"normal")==0 ){

2648 
rc
 = 
	`sqlôe3_böd_ãxt
(
pStmt
, 
idx
, 
¨gv
[3], -1, 
SQLITE_TRANSIENT
);

2649 }if–
	`°rcmp
(
¨gv
[4],"blob10")==0 ){

2650 
rc
 = 
	`sqlôe3_böd_ãxt
(
pStmt
, 
idx
, "abc\000xyz\000pq", 10, 
SQLITE_STATIC
);

2652 
	`T˛_AµídResu…
(
öãΩ
, "4thárgument should be "

2654  
TCL_ERROR
;

2656 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
	`StmtToDb
(
pStmt
), 
rc
ËË 
TCL_ERROR
;

2657 if–
rc
 ){

2658 
zBuf
[50];

2659 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "(%dË", 
rc
);

2660 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 
	`sqlôe3EºSå
(
rc
), 0);

2661  
TCL_ERROR
;

2663  
TCL_OK
;

2664 
	}
}

2666 #i‚de‡
SQLITE_OMIT_UTF16


2695 
T˛_I¡îp
* 
	gpTe°CﬁœãI¡îp
;

2696 
	$ã°_cﬁœã_func
(

2697 *
pCtx
,

2698 
nA
, c⁄° *
zA
,

2699 
nB
, c⁄° *
zB


2701 
T˛_I¡îp
 *
i
 = 
pTe°CﬁœãI¡îp
;

2702 
ícö
 = 
	`SQLITE_PTR_TO_INT
(
pCtx
);

2703 
ªs
;

2704 
n
;

2706 
sqlôe3_vÆue
 *
pVÆ
;

2707 
T˛_Obj
 *
pX
;

2709 
pX
 = 
	`T˛_NewSåögObj
("test_collate", -1);

2710 
	`T˛_In¸RefCou¡
(
pX
);

2712  
ícö
 ){

2713 
SQLITE_UTF8
:

2714 
	`T˛_Li°ObjAµídEÀmít
(
i
,
pX
,
	`T˛_NewSåögObj
("UTF-8",-1));

2716 
SQLITE_UTF16LE
:

2717 
	`T˛_Li°ObjAµídEÀmít
(
i
,
pX
,
	`T˛_NewSåögObj
("UTF-16LE",-1));

2719 
SQLITE_UTF16BE
:

2720 
	`T˛_Li°ObjAµídEÀmít
(
i
,
pX
,
	`T˛_NewSåögObj
("UTF-16BE",-1));

2723 
	`as£π
(0);

2726 
	`sqlôe3BegöBíignMÆloc
();

2727 
pVÆ
 = 
	`sqlôe3VÆueNew
(0);

2728 if–
pVÆ
 ){

2729 
	`sqlôe3VÆueSëSå
(
pVÆ
, 
nA
, 
zA
, 
ícö
, 
SQLITE_STATIC
);

2730 
n
 = 
	`sqlôe3_vÆue_byãs
(
pVÆ
);

2731 
	`T˛_Li°ObjAµídEÀmít
(
i
,
pX
,

2732 
	`T˛_NewSåögObj
((*)
	`sqlôe3_vÆue_ãxt
(
pVÆ
),
n
));

2733 
	`sqlôe3VÆueSëSå
(
pVÆ
, 
nB
, 
zB
, 
ícö
, 
SQLITE_STATIC
);

2734 
n
 = 
	`sqlôe3_vÆue_byãs
(
pVÆ
);

2735 
	`T˛_Li°ObjAµídEÀmít
(
i
,
pX
,

2736 
	`T˛_NewSåögObj
((*)
	`sqlôe3_vÆue_ãxt
(
pVÆ
),
n
));

2737 
	`sqlôe3VÆueFªe
(
pVÆ
);

2739 
	`sqlôe3EndBíignMÆloc
();

2741 
	`T˛_EvÆObjEx
(
i
, 
pX
, 0);

2742 
	`T˛_De¸RefCou¡
(
pX
);

2743 
	`T˛_GëI¡FromObj
(
i
, 
	`T˛_GëObjResu…
(i), &
ªs
);

2744  
ªs
;

2745 
	}
}

2746 
	$ã°_cﬁœã
(

2747 * 
˛õ¡D©a
,

2748 
T˛_I¡îp
 *
öãΩ
,

2749 
objc
,

2750 
T˛_Obj
 *
CONST
 
objv
[]

2752 
sqlôe3
 *
db
;

2753 
vÆ
;

2754 
sqlôe3_vÆue
 *
pVÆ
;

2755 
rc
;

2757 if–
objc
!=5 ) 
bad_¨gs
;

2758 
pTe°CﬁœãI¡îp
 = 
öãΩ
;

2759 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

2761 if–
TCL_OK
!=
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[2], &
vÆ
ËË 
TCL_ERROR
;

2762 
rc
 = 
	`sqlôe3_¸óã_cﬁœti⁄
(
db
, "ã°_cﬁœã", 
SQLITE_UTF8
,

2763 (*)
SQLITE_UTF8
, 
vÆ
?
ã°_cﬁœã_func
:0);

2764 if–
rc
==
SQLITE_OK
 ){

2765 c⁄° *
zUtf16
;

2766 if–
TCL_OK
!=
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[3], &
vÆ
ËË 
TCL_ERROR
;

2767 
rc
 = 
	`sqlôe3_¸óã_cﬁœti⁄
(
db
, "ã°_cﬁœã", 
SQLITE_UTF16LE
,

2768 (*)
SQLITE_UTF16LE
, 
vÆ
?
ã°_cﬁœã_func
:0);

2769 if–
TCL_OK
!=
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[4], &
vÆ
ËË 
TCL_ERROR
;

2772 if–
sqlôe3_iMÆlocFaû
>0 ){

2773 
sqlôe3_iMÆlocFaû
++;

2776 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

2777 
pVÆ
 = 
	`sqlôe3VÆueNew
(
db
);

2778 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, "ã°_cﬁœã", 
SQLITE_UTF8
, 
SQLITE_STATIC
);

2779 
zUtf16
 = 
	`sqlôe3VÆueText
(
pVÆ
, 
SQLITE_UTF16NATIVE
);

2780 if–
db
->
mÆlocFaûed
 ){

2781 
rc
 = 
SQLITE_NOMEM
;

2783 
rc
 = 
	`sqlôe3_¸óã_cﬁœti⁄16
(
db
, 
zUtf16
, 
SQLITE_UTF16BE
,

2784 (*)
SQLITE_UTF16BE
, 
vÆ
?
ã°_cﬁœã_func
:0);

2786 
	`sqlôe3VÆueFªe
(
pVÆ
);

2787 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

2789 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

2791 if–
rc
!=
SQLITE_OK
 ){

2792 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

2793  
TCL_ERROR
;

2795  
TCL_OK
;

2797 
bad_¨gs
:

2798 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2799 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " <DB> <utf8> <utf16le> <utf16be>", 0);

2800  
TCL_ERROR
;

2801 
	}
}

2810 
	$ã°_utf16bö_cﬁœã_func
(

2811 *
pCtx
,

2812 
nA
, c⁄° *
zA
,

2813 
nB
, c⁄° *
zB


2815 
nCmp
 = (
nA
>
nB
 ?ÇB :ÇA);

2816 
ªs
 = 
	`memcmp
(
zA
, 
zB
, 
nCmp
);

2817 if–
ªs
==0 )Ñe†
nA
 - 
nB
;

2818  
ªs
;

2819 
	}
}

2820 
	$ã°_utf16bö_cﬁœã
(

2821 * 
˛õ¡D©a
,

2822 
T˛_I¡îp
 *
öãΩ
,

2823 
objc
,

2824 
T˛_Obj
 *
CONST
 
objv
[]

2826 
sqlôe3
 *
db
;

2827 
rc
;

2829 if–
objc
!=2 ) 
bad_¨gs
;

2830 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

2832 
rc
 = 
	`sqlôe3_¸óã_cﬁœti⁄
(
db
, "utf16bö", 
SQLITE_UTF16
, 0,

2833 
ã°_utf16bö_cﬁœã_func


2835 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

2836  
TCL_OK
;

2838 
bad_¨gs
:

2839 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB");

2840  
TCL_ERROR
;

2841 
	}
}

2849 
	gzNìdedCﬁœti⁄
[200];

2850 *
	gpzNìdedCﬁœti⁄
 = 
zNìdedCﬁœti⁄
;

2857 
	$ã°_cﬁœã_√eded_cb
(

2858 *
pCtx
,

2859 
sqlôe3
 *
db
,

2860 
eTextRï
,

2861 c⁄° *
pName


2863 
íc
 = 
	`ENC
(
db
);

2864 
i
;

2865 *
z
;

2866 
z
 = (*)
pName
, 
i
=0; *z || z[1]; z++){

2867 if–*
z
 ) 
zNìdedCﬁœti⁄
[
i
++] = *z;

2869 
zNìdedCﬁœti⁄
[
i
] = 0;

2870 
	`sqlôe3_¸óã_cﬁœti⁄
(

2871 
db
, "ã°_cﬁœã", 
	`ENC
(db), 
	`SQLITE_INT_TO_PTR
(
íc
), 
ã°_cﬁœã_func
);

2872 
	}
}

2877 
	$ã°_cﬁœã_√eded
(

2878 * 
˛õ¡D©a
,

2879 
T˛_I¡îp
 *
öãΩ
,

2880 
objc
,

2881 
T˛_Obj
 *
CONST
 
objv
[]

2883 
sqlôe3
 *
db
;

2884 
rc
;

2886 if–
objc
!=2 ) 
bad_¨gs
;

2887 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

2888 
rc
 = 
	`sqlôe3_cﬁœti⁄_√eded16
(
db
, 0, 
ã°_cﬁœã_√eded_cb
);

2889 
zNìdedCﬁœti⁄
[0] = 0;

2890 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

2891  
TCL_OK
;

2893 
bad_¨gs
:

2894 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB");

2895  
TCL_ERROR
;

2896 
	}
}

2912 
	gu«lig√d_°rög_cou¡î
 = 0;

2913 
	$ÆignmítCﬁlFunc
(

2914 *
NŸU£d
,

2915 
nKey1
, c⁄° *
pKey1
,

2916 
nKey2
, c⁄° *
pKey2


2918 
rc
, 
n
;

2919 
n
 = 
nKey1
<
nKey2
 ?ÇKey1 :ÇKey2;

2920 if–
nKey1
>0 && 1==(1&(
	`SQLITE_PTR_TO_INT
(
pKey1
))ËË
u«lig√d_°rög_cou¡î
++;

2921 if–
nKey2
>0 && 1==(1&(
	`SQLITE_PTR_TO_INT
(
pKey2
))ËË
u«lig√d_°rög_cou¡î
++;

2922 
rc
 = 
	`memcmp
(
pKey1
, 
pKey2
, 
n
);

2923 if–
rc
==0 ){

2924 
rc
 = 
nKey1
 - 
nKey2
;

2926  
rc
;

2927 
	}
}

2928 
	$add_Æignmít_ã°_cﬁœti⁄s
(

2929 * 
˛õ¡D©a
,

2930 
T˛_I¡îp
 *
öãΩ
,

2931 
objc
,

2932 
T˛_Obj
 *
CONST
 
objv
[]

2934 
sqlôe3
 *
db
;

2935 if–
objc
>=2 ){

2936 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

2937 
	`sqlôe3_¸óã_cﬁœti⁄
(
db
, "utf16_u«lig√d", 
SQLITE_UTF16
,

2938 0, 
ÆignmítCﬁlFunc
);

2939 
	`sqlôe3_¸óã_cﬁœti⁄
(
db
, "utf16_Æig√d", 
SQLITE_UTF16_ALIGNED
,

2940 0, 
ÆignmítCﬁlFunc
);

2942  
SQLITE_OK
;

2943 
	}
}

2971 #i‚de‡
SQLITE_OMIT_UTF16


2972 
	$ã°_fun˘i⁄_utf8
(

2973 
sqlôe3_c⁄ãxt
 *
pCtx
,

2974 
nArg
,

2975 
sqlôe3_vÆue
 **
¨gv


2977 
T˛_I¡îp
 *
öãΩ
;

2978 
T˛_Obj
 *
pX
;

2979 
sqlôe3_vÆue
 *
pVÆ
;

2980 
öãΩ
 = (
T˛_I¡îp
 *)
	`sqlôe3_u£r_d©a
(
pCtx
);

2981 
pX
 = 
	`T˛_NewSåögObj
("test_function", -1);

2982 
	`T˛_In¸RefCou¡
(
pX
);

2983 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pX
, 
	`T˛_NewSåögObj
("UTF-8", -1));

2984 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pX
,

2985 
	`T˛_NewSåögObj
((*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]), -1));

2986 
	`T˛_EvÆObjEx
(
öãΩ
, 
pX
, 0);

2987 
	`T˛_De¸RefCou¡
(
pX
);

2988 
	`sqlôe3_ªsu…_ãxt
(
pCtx
, 
	`T˛_GëSåögResu…
(
öãΩ
), -1, 
SQLITE_TRANSIENT
);

2989 
pVÆ
 = 
	`sqlôe3VÆueNew
(0);

2990 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, 
	`T˛_GëSåögResu…
(
öãΩ
),

2991 
SQLITE_UTF8
, 
SQLITE_STATIC
);

2992 
	`sqlôe3_ªsu…_ãxt16be
(
pCtx
, 
	`sqlôe3_vÆue_ãxt16be
(
pVÆ
),

2993 -1, 
SQLITE_TRANSIENT
);

2994 
	`sqlôe3VÆueFªe
(
pVÆ
);

2995 
	}
}

2996 
	$ã°_fun˘i⁄_utf16À
(

2997 
sqlôe3_c⁄ãxt
 *
pCtx
,

2998 
nArg
,

2999 
sqlôe3_vÆue
 **
¨gv


3001 
T˛_I¡îp
 *
öãΩ
;

3002 
T˛_Obj
 *
pX
;

3003 
sqlôe3_vÆue
 *
pVÆ
;

3004 
öãΩ
 = (
T˛_I¡îp
 *)
	`sqlôe3_u£r_d©a
(
pCtx
);

3005 
pX
 = 
	`T˛_NewSåögObj
("test_function", -1);

3006 
	`T˛_In¸RefCou¡
(
pX
);

3007 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pX
, 
	`T˛_NewSåögObj
("UTF-16LE", -1));

3008 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pX
,

3009 
	`T˛_NewSåögObj
((*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]), -1));

3010 
	`T˛_EvÆObjEx
(
öãΩ
, 
pX
, 0);

3011 
	`T˛_De¸RefCou¡
(
pX
);

3012 
pVÆ
 = 
	`sqlôe3VÆueNew
(0);

3013 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, 
	`T˛_GëSåögResu…
(
öãΩ
),

3014 
SQLITE_UTF8
, 
SQLITE_STATIC
);

3015 
	`sqlôe3_ªsu…_ãxt
(
pCtx
,(*)
	`sqlôe3_vÆue_ãxt
(
pVÆ
),-1,
SQLITE_TRANSIENT
);

3016 
	`sqlôe3VÆueFªe
(
pVÆ
);

3017 
	}
}

3018 
	$ã°_fun˘i⁄_utf16be
(

3019 
sqlôe3_c⁄ãxt
 *
pCtx
,

3020 
nArg
,

3021 
sqlôe3_vÆue
 **
¨gv


3023 
T˛_I¡îp
 *
öãΩ
;

3024 
T˛_Obj
 *
pX
;

3025 
sqlôe3_vÆue
 *
pVÆ
;

3026 
öãΩ
 = (
T˛_I¡îp
 *)
	`sqlôe3_u£r_d©a
(
pCtx
);

3027 
pX
 = 
	`T˛_NewSåögObj
("test_function", -1);

3028 
	`T˛_In¸RefCou¡
(
pX
);

3029 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pX
, 
	`T˛_NewSåögObj
("UTF-16BE", -1));

3030 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pX
,

3031 
	`T˛_NewSåögObj
((*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]), -1));

3032 
	`T˛_EvÆObjEx
(
öãΩ
, 
pX
, 0);

3033 
	`T˛_De¸RefCou¡
(
pX
);

3034 
pVÆ
 = 
	`sqlôe3VÆueNew
(0);

3035 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, 
	`T˛_GëSåögResu…
(
öãΩ
),

3036 
SQLITE_UTF8
, 
SQLITE_STATIC
);

3037 
	`sqlôe3_ªsu…_ãxt16
(
pCtx
, 
	`sqlôe3_vÆue_ãxt16À
(
pVÆ
),

3038 -1, 
SQLITE_TRANSIENT
);

3039 
	`sqlôe3_ªsu…_ãxt16be
(
pCtx
, 
	`sqlôe3_vÆue_ãxt16À
(
pVÆ
),

3040 -1, 
SQLITE_TRANSIENT
);

3041 
	`sqlôe3_ªsu…_ãxt16À
(
pCtx
, 
	`sqlôe3_vÆue_ãxt16À
(
pVÆ
),

3042 -1, 
SQLITE_TRANSIENT
);

3043 
	`sqlôe3VÆueFªe
(
pVÆ
);

3044 
	}
}

3046 
	$ã°_fun˘i⁄
(

3047 * 
˛õ¡D©a
,

3048 
T˛_I¡îp
 *
öãΩ
,

3049 
objc
,

3050 
T˛_Obj
 *
CONST
 
objv
[]

3052 #i‚de‡
SQLITE_OMIT_UTF16


3053 
sqlôe3
 *
db
;

3054 
vÆ
;

3056 if–
objc
!=5 ) 
bad_¨gs
;

3057 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

3059 if–
TCL_OK
!=
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[2], &
vÆ
ËË 
TCL_ERROR
;

3060 if–
vÆ
 ){

3061 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "ã°_fun˘i⁄", 1, 
SQLITE_UTF8
,

3062 
öãΩ
, 
ã°_fun˘i⁄_utf8
, 0, 0);

3064 if–
TCL_OK
!=
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[3], &
vÆ
ËË 
TCL_ERROR
;

3065 if–
vÆ
 ){

3066 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "ã°_fun˘i⁄", 1, 
SQLITE_UTF16LE
,

3067 
öãΩ
, 
ã°_fun˘i⁄_utf16À
, 0, 0);

3069 if–
TCL_OK
!=
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[4], &
vÆ
ËË 
TCL_ERROR
;

3070 if–
vÆ
 ){

3071 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "ã°_fun˘i⁄", 1, 
SQLITE_UTF16BE
,

3072 
öãΩ
, 
ã°_fun˘i⁄_utf16be
, 0, 0);

3075  
TCL_OK
;

3076 
bad_¨gs
:

3077 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

3078 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " <DB> <utf8> <utf16le> <utf16be>", 0);

3080  
TCL_ERROR
;

3081 
	}
}

3091 
	$ã°_îr°r
(

3092 * 
˛õ¡D©a
,

3093 
T˛_I¡îp
 *
öãΩ
,

3094 
objc
,

3095 
T˛_Obj
 *
CONST
 
objv
[]

3097 *
zCode
;

3098 
i
;

3099 if–
objc
!=1 ){

3100 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "<error code>");

3103 
zCode
 = 
	`T˛_GëSåög
(
objv
[1]);

3104 
i
=0; i<200; i++){

3105 if–0==
	`°rcmp
(
	`t1Eº‹Name
(
i
), 
zCode
) ) ;

3107 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºSå
(
i
), 0);

3108  
TCL_OK
;

3109 
	}
}

3124 
	$ã°_bªakpoöt
(

3125 *
NŸU£d
,

3126 
T˛_I¡îp
 *
öãΩ
,

3127 
¨gc
,

3128 **
¨gv


3130  
TCL_OK
;

3131 
	}
}

3140 
	$ã°_böd_zîoblob
(

3141 * 
˛õ¡D©a
,

3142 
T˛_I¡îp
 *
öãΩ
,

3143 
objc
,

3144 
T˛_Obj
 *
CONST
 
objv
[]

3146 
sqlôe3_°mt
 *
pStmt
;

3147 
idx
;

3148 
n
;

3149 
rc
;

3151 if–
objc
!=4 ){

3152 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "STMT IDX N");

3153  
TCL_ERROR
;

3156 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

3157 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
idx
ËË 
TCL_ERROR
;

3158 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
n
ËË 
TCL_ERROR
;

3160 
rc
 = 
	`sqlôe3_böd_zîoblob
(
pStmt
, 
idx
, 
n
);

3161 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
	`StmtToDb
(
pStmt
), 
rc
ËË 
TCL_ERROR
;

3162 if–
rc
!=
SQLITE_OK
 ){

3163  
TCL_ERROR
;

3166  
TCL_OK
;

3167 
	}
}

3176 
	$ã°_böd_zîoblob64
(

3177 * 
˛õ¡D©a
,

3178 
T˛_I¡îp
 *
öãΩ
,

3179 
objc
,

3180 
T˛_Obj
 *
CONST
 
objv
[]

3182 
sqlôe3_°mt
 *
pStmt
;

3183 
idx
;

3184 
T˛_WideI¡
 
n
;

3185 
rc
;

3187 if–
objc
!=4 ){

3188 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "STMT IDX N");

3189  
TCL_ERROR
;

3192 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

3193 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
idx
ËË 
TCL_ERROR
;

3194 if–
	`T˛_GëWideI¡FromObj
(
öãΩ
, 
objv
[3], &
n
ËË 
TCL_ERROR
;

3196 
rc
 = 
	`sqlôe3_böd_zîoblob64
(
pStmt
, 
idx
, 
n
);

3197 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
	`StmtToDb
(
pStmt
), 
rc
ËË 
TCL_ERROR
;

3198 if–
rc
!=
SQLITE_OK
 ){

3199 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

3200  
TCL_ERROR
;

3203  
TCL_OK
;

3204 
	}
}

3213 
	$ã°_böd_öt
(

3214 * 
˛õ¡D©a
,

3215 
T˛_I¡îp
 *
öãΩ
,

3216 
objc
,

3217 
T˛_Obj
 *
CONST
 
objv
[]

3219 
sqlôe3_°mt
 *
pStmt
;

3220 
idx
;

3221 
vÆue
;

3222 
rc
;

3224 if–
objc
!=4 ){

3225 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

3226 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " STMT N VALUE", 0);

3227  
TCL_ERROR
;

3230 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

3231 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
idx
ËË 
TCL_ERROR
;

3232 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
vÆue
ËË 
TCL_ERROR
;

3234 
rc
 = 
	`sqlôe3_böd_öt
(
pStmt
, 
idx
, 
vÆue
);

3235 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
	`StmtToDb
(
pStmt
), 
rc
ËË 
TCL_ERROR
;

3236 if–
rc
!=
SQLITE_OK
 ){

3237  
TCL_ERROR
;

3240  
TCL_OK
;

3241 
	}
}

3251 
	$ã°_böd_öt64
(

3252 * 
˛õ¡D©a
,

3253 
T˛_I¡îp
 *
öãΩ
,

3254 
objc
,

3255 
T˛_Obj
 *
CONST
 
objv
[]

3257 
sqlôe3_°mt
 *
pStmt
;

3258 
idx
;

3259 
T˛_WideI¡
 
vÆue
;

3260 
rc
;

3262 if–
objc
!=4 ){

3263 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

3264 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " STMT N VALUE", 0);

3265  
TCL_ERROR
;

3268 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

3269 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
idx
ËË 
TCL_ERROR
;

3270 if–
	`T˛_GëWideI¡FromObj
(
öãΩ
, 
objv
[3], &
vÆue
ËË 
TCL_ERROR
;

3272 
rc
 = 
	`sqlôe3_böd_öt64
(
pStmt
, 
idx
, 
vÆue
);

3273 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
	`StmtToDb
(
pStmt
), 
rc
ËË 
TCL_ERROR
;

3274 if–
rc
!=
SQLITE_OK
 ){

3275  
TCL_ERROR
;

3278  
TCL_OK
;

3279 
	}
}

3289 
	$ã°_böd_doubÀ
(

3290 * 
˛õ¡D©a
,

3291 
T˛_I¡îp
 *
öãΩ
,

3292 
objc
,

3293 
T˛_Obj
 *
CONST
 
objv
[]

3295 
sqlôe3_°mt
 *
pStmt
;

3296 
idx
;

3297 
vÆue
 = 0;

3298 
rc
;

3299 c⁄° *
zVÆ
;

3300 
i
;

3302 c⁄° *
zName
;

3303 
iUµî
;

3304 
iLowî
;

3305 } 
aS≥cülFp
[] = {

3318 if–
objc
!=4 ){

3319 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

3320 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " STMT N VALUE", 0);

3321  
TCL_ERROR
;

3324 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

3325 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
idx
ËË 
TCL_ERROR
;

3332 
zVÆ
 = 
	`T˛_GëSåög
(
objv
[3]);

3333 
i
=0; i<(
aS≥cülFp
)/(aSpecialFp[0]); i++){

3334 if–
	`°rcmp
(
aS≥cülFp
[
i
].
zName
, 
zVÆ
)==0 ){

3335 
sqlôe3_uöt64
 
x
;

3336 
x
 = 
aS≥cülFp
[
i
].
iUµî
;

3337 
x
 <<= 32;

3338 
x
 |
aS≥cülFp
[
i
].
iLowî
;

3339 
	`as£π
–(
vÆue
)==8 );

3340 
	`as£π
–(
x
)==8 );

3341 
	`mem˝y
(&
vÆue
, &
x
, 8);

3345 if–
i
>=(
aS≥cülFp
)/(aSpecialFp[0]) &&

3346 
	`T˛_GëDoubÀFromObj
(
öãΩ
, 
objv
[3], &
vÆue
) ){

3347  
TCL_ERROR
;

3349 
rc
 = 
	`sqlôe3_böd_doubÀ
(
pStmt
, 
idx
, 
vÆue
);

3350 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
	`StmtToDb
(
pStmt
), 
rc
ËË 
TCL_ERROR
;

3351 if–
rc
!=
SQLITE_OK
 ){

3352  
TCL_ERROR
;

3355  
TCL_OK
;

3356 
	}
}

3365 
	$ã°_böd_nuŒ
(

3366 * 
˛õ¡D©a
,

3367 
T˛_I¡îp
 *
öãΩ
,

3368 
objc
,

3369 
T˛_Obj
 *
CONST
 
objv
[]

3371 
sqlôe3_°mt
 *
pStmt
;

3372 
idx
;

3373 
rc
;

3375 if–
objc
!=3 ){

3376 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

3377 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " STMT N", 0);

3378  
TCL_ERROR
;

3381 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

3382 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
idx
ËË 
TCL_ERROR
;

3384 
rc
 = 
	`sqlôe3_böd_nuŒ
(
pStmt
, 
idx
);

3385 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
	`StmtToDb
(
pStmt
), 
rc
ËË 
TCL_ERROR
;

3386 if–
rc
!=
SQLITE_OK
 ){

3387  
TCL_ERROR
;

3390  
TCL_OK
;

3391 
	}
}

3401 
	$ã°_böd_ãxt
(

3402 * 
˛õ¡D©a
,

3403 
T˛_I¡îp
 *
öãΩ
,

3404 
objc
,

3405 
T˛_Obj
 *
CONST
 
objv
[]

3407 
sqlôe3_°mt
 *
pStmt
;

3408 
idx
;

3409 
byãs
;

3410 *
vÆue
;

3411 
rc
;

3413 if–
objc
!=5 ){

3414 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

3415 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " STMT N VALUE BYTES", 0);

3416  
TCL_ERROR
;

3419 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

3420 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
idx
ËË 
TCL_ERROR
;

3421 
vÆue
 = (*)
	`T˛_GëByãAºayFromObj
(
objv
[3], &
byãs
);

3422 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[4], &
byãs
ËË 
TCL_ERROR
;

3424 
rc
 = 
	`sqlôe3_böd_ãxt
(
pStmt
, 
idx
, 
vÆue
, 
byãs
, 
SQLITE_TRANSIENT
);

3425 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
	`StmtToDb
(
pStmt
), 
rc
ËË 
TCL_ERROR
;

3426 if–
rc
!=
SQLITE_OK
 ){

3427 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

3428  
TCL_ERROR
;

3431  
TCL_OK
;

3432 
	}
}

3442 
	$ã°_böd_ãxt16
(

3443 * 
˛õ¡D©a
,

3444 
T˛_I¡îp
 *
öãΩ
,

3445 
objc
,

3446 
T˛_Obj
 *
CONST
 
objv
[]

3448 #i‚de‡
SQLITE_OMIT_UTF16


3449 
sqlôe3_°mt
 *
pStmt
;

3450 
idx
;

3451 
byãs
;

3452 *
vÆue
;

3453 
rc
;

3455 (*
xDñ
)(*Ë(
objc
==6?
SQLITE_STATIC
:
SQLITE_TRANSIENT
);

3456 
T˛_Obj
 *
oStmt
 = 
objv
[
objc
-4];

3457 
T˛_Obj
 *
oN
 = 
objv
[
objc
-3];

3458 
T˛_Obj
 *
oSåög
 = 
objv
[
objc
-2];

3459 
T˛_Obj
 *
oByãs
 = 
objv
[
objc
-1];

3461 if–
objc
!=5 && objc!=6){

3462 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

3463 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " STMT N VALUE BYTES", 0);

3464  
TCL_ERROR
;

3467 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
oStmt
), &
pStmt
ËË 
TCL_ERROR
;

3468 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
oN
, &
idx
ËË 
TCL_ERROR
;

3469 
vÆue
 = (*)
	`T˛_GëByãAºayFromObj
(
oSåög
, 0);

3470 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
oByãs
, &
byãs
ËË 
TCL_ERROR
;

3472 
rc
 = 
	`sqlôe3_böd_ãxt16
(
pStmt
, 
idx
, (*)
vÆue
, 
byãs
, 
xDñ
);

3473 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
	`StmtToDb
(
pStmt
), 
rc
ËË 
TCL_ERROR
;

3474 if–
rc
!=
SQLITE_OK
 ){

3475 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

3476  
TCL_ERROR
;

3480  
TCL_OK
;

3481 
	}
}

3490 
	$ã°_böd_blob
(

3491 * 
˛õ¡D©a
,

3492 
T˛_I¡îp
 *
öãΩ
,

3493 
objc
,

3494 
T˛_Obj
 *
CONST
 
objv
[]

3496 
sqlôe3_°mt
 *
pStmt
;

3497 
idx
;

3498 
byãs
;

3499 *
vÆue
;

3500 
rc
;

3501 
sqlôe3_de°ru˘‹_ty≥
 
xDe°ru˘‹
 = 
SQLITE_TRANSIENT
;

3503 if–
objc
!=5 && objc!=6 ){

3504 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

3505 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " STMT N DATA BYTES", 0);

3506  
TCL_ERROR
;

3509 if–
objc
==6 ){

3510 
xDe°ru˘‹
 = 
SQLITE_STATIC
;

3511 
objv
++;

3514 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

3515 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
idx
ËË 
TCL_ERROR
;

3516 
vÆue
 = 
	`T˛_GëSåög
(
objv
[3]);

3517 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[4], &
byãs
ËË 
TCL_ERROR
;

3519 
rc
 = 
	`sqlôe3_böd_blob
(
pStmt
, 
idx
, 
vÆue
, 
byãs
, 
xDe°ru˘‹
);

3520 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
	`StmtToDb
(
pStmt
), 
rc
ËË 
TCL_ERROR
;

3521 if–
rc
!=
SQLITE_OK
 ){

3522  
TCL_ERROR
;

3525  
TCL_OK
;

3526 
	}
}

3533 
	$ã°_böd_∑ømëî_cou¡
(

3534 * 
˛õ¡D©a
,

3535 
T˛_I¡îp
 *
öãΩ
,

3536 
objc
,

3537 
T˛_Obj
 *
CONST
 
objv
[]

3539 
sqlôe3_°mt
 *
pStmt
;

3541 if–
objc
!=2 ){

3542 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "STMT");

3543  
TCL_ERROR
;

3545 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

3546 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`sqlôe3_böd_∑ømëî_cou¡
(
pStmt
)));

3547  
TCL_OK
;

3548 
	}
}

3557 
	$ã°_böd_∑ømëî_«me
(

3558 * 
˛õ¡D©a
,

3559 
T˛_I¡îp
 *
öãΩ
,

3560 
objc
,

3561 
T˛_Obj
 *
CONST
 
objv
[]

3563 
sqlôe3_°mt
 *
pStmt
;

3564 
i
;

3566 if–
objc
!=3 ){

3567 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "STMT N");

3568  
TCL_ERROR
;

3570 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

3571 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
i
ËË 
TCL_ERROR
;

3572 
	`T˛_SëObjResu…
(
öãΩ
,

3573 
	`T˛_NewSåögObj
(
	`sqlôe3_böd_∑ømëî_«me
(
pStmt
,
i
),-1)

3575  
TCL_OK
;

3576 
	}
}

3584 
	$ã°_böd_∑ømëî_ödex
(

3585 * 
˛õ¡D©a
,

3586 
T˛_I¡îp
 *
öãΩ
,

3587 
objc
,

3588 
T˛_Obj
 *
CONST
 
objv
[]

3590 
sqlôe3_°mt
 *
pStmt
;

3592 if–
objc
!=3 ){

3593 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "STMT NAME");

3594  
TCL_ERROR
;

3596 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

3597 
	`T˛_SëObjResu…
(
öãΩ
,

3598 
	`T˛_NewI¡Obj
(

3599 
	`sqlôe3_böd_∑ømëî_ödex
(
pStmt
,
	`T˛_GëSåög
(
objv
[2]))

3602  
TCL_OK
;

3603 
	}
}

3609 
	$ã°_˛ór_bödögs
(

3610 * 
˛õ¡D©a
,

3611 
T˛_I¡îp
 *
öãΩ
,

3612 
objc
,

3613 
T˛_Obj
 *
CONST
 
objv
[]

3615 
sqlôe3_°mt
 *
pStmt
;

3617 if–
objc
!=2 ){

3618 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "STMT");

3619  
TCL_ERROR
;

3621 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

3622 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`sqlôe3_˛ór_bödögs
(
pStmt
)));

3623  
TCL_OK
;

3624 
	}
}

3629 
	$ã°_¶ìp
(

3630 * 
˛õ¡D©a
,

3631 
T˛_I¡îp
 *
öãΩ
,

3632 
objc
,

3633 
T˛_Obj
 *
CONST
 
objv
[]

3635 
ms
;

3637 if–
objc
!=2 ){

3638 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "MILLISECONDS");

3639  
TCL_ERROR
;

3641 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
ms
) ){

3642  
TCL_ERROR
;

3644 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`sqlôe3_¶ìp
(
ms
)));

3645  
TCL_OK
;

3646 
	}
}

3654 
	$ã°_ex_îrcode
(

3655 * 
˛õ¡D©a
,

3656 
T˛_I¡îp
 *
öãΩ
,

3657 
objc
,

3658 
T˛_Obj
 *
CONST
 
objv
[]

3660 
sqlôe3
 *
db
;

3661 
rc
;

3663 if–
objc
!=2 ){

3664 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

3665 
	`T˛_GëSåög
(
objv
[0]), " DB", 0);

3666  
TCL_ERROR
;

3668 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

3669 
rc
 = 
	`sqlôe3_exãnded_îrcode
(
db
);

3670 
	`T˛_AµídResu…
(
öãΩ
, (*)
	`t1Eº‹Name
(
rc
), 0);

3671  
TCL_OK
;

3672 
	}
}

3681 
	$ã°_îrcode
(

3682 * 
˛õ¡D©a
,

3683 
T˛_I¡îp
 *
öãΩ
,

3684 
objc
,

3685 
T˛_Obj
 *
CONST
 
objv
[]

3687 
sqlôe3
 *
db
;

3688 
rc
;

3690 if–
objc
!=2 ){

3691 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

3692 
	`T˛_GëSåög
(
objv
[0]), " DB", 0);

3693  
TCL_ERROR
;

3695 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

3696 
rc
 = 
	`sqlôe3_îrcode
(
db
);

3697 
	`T˛_AµídResu…
(
öãΩ
, (*)
	`t1Eº‹Name
(
rc
), 0);

3698  
TCL_OK
;

3699 
	}
}

3707 
	$ã°_îrmsg
(

3708 * 
˛õ¡D©a
,

3709 
T˛_I¡îp
 *
öãΩ
,

3710 
objc
,

3711 
T˛_Obj
 *
CONST
 
objv
[]

3713 
sqlôe3
 *
db
;

3714 c⁄° *
zEº
;

3716 if–
objc
!=2 ){

3717 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

3718 
	`T˛_GëSåög
(
objv
[0]), " DB", 0);

3719  
TCL_ERROR
;

3721 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

3723 
zEº
 = 
	`sqlôe3_îrmsg
(
db
);

3724 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewSåögObj
(
zEº
, -1));

3725  
TCL_OK
;

3726 
	}
}

3736 
	$ã°_îrmsg16
(

3737 * 
˛õ¡D©a
,

3738 
T˛_I¡îp
 *
öãΩ
,

3739 
objc
,

3740 
T˛_Obj
 *
CONST
 
objv
[]

3742 #i‚de‡
SQLITE_OMIT_UTF16


3743 
sqlôe3
 *
db
;

3744 c⁄° *
zEº
;

3745 c⁄° *
z
;

3746 
byãs
 = 0;

3748 if–
objc
!=2 ){

3749 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

3750 
	`T˛_GëSåög
(
objv
[0]), " DB", 0);

3751  
TCL_ERROR
;

3753 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

3755 
zEº
 = 
	`sqlôe3_îrmsg16
(
db
);

3756 if–
zEº
 ){

3757 
z
 = 
zEº
;

3758 
byãs
=0; 
z
[bytes] || z[bytes+1]; bytes+=2){}

3760 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewByãAºayObj
(
zEº
, 
byãs
));

3762  
TCL_OK
;

3763 
	}
}

3773 
	$ã°_¥ï¨e
(

3774 * 
˛õ¡D©a
,

3775 
T˛_I¡îp
 *
öãΩ
,

3776 
objc
,

3777 
T˛_Obj
 *
CONST
 
objv
[]

3779 
sqlôe3
 *
db
;

3780 c⁄° *
zSql
;

3781 
byãs
;

3782 c⁄° *
zTaû
 = 0;

3783 
sqlôe3_°mt
 *
pStmt
 = 0;

3784 
zBuf
[50];

3785 
rc
;

3787 if–
objc
!=5 && objc!=4 ){

3788 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

3789 
	`T˛_GëSåög
(
objv
[0]), " DB sql bytes ?tailvar?", 0);

3790  
TCL_ERROR
;

3792 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

3793 
zSql
 = 
	`T˛_GëSåög
(
objv
[2]);

3794 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
byãs
ËË 
TCL_ERROR
;

3796 
rc
 = 
	`sqlôe3_¥ï¨e
(
db
, 
zSql
, 
byãs
, &
pStmt
, 
objc
>=5 ? &
zTaû
 : 0);

3797 
	`T˛_Re£tResu…
(
öãΩ
);

3798 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

3799 if–
zTaû
 && 
objc
>=5 ){

3800 if–
byãs
>=0 ){

3801 
byãs
 = byã†- ()(
zTaû
-
zSql
);

3803 if–()
	`°æí
(
zTaû
)<
byãs
 ){

3804 
byãs
 = ()
	`°æí
(
zTaû
);

3806 
	`T˛_ObjSëV¨2
(
öãΩ
, 
objv
[4], 0, 
	`T˛_NewSåögObj
(
zTaû
, 
byãs
), 0);

3808 if–
rc
!=
SQLITE_OK
 ){

3809 
	`as£π
–
pStmt
==0 );

3810 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "(%dË", 
rc
);

3811 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 
	`sqlôe3_îrmsg
(
db
), 0);

3812  
TCL_ERROR
;

3815 if–
pStmt
 ){

3816 if–
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
pStmt
ËË 
TCL_ERROR
;

3817 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

3819  
TCL_OK
;

3820 
	}
}

3830 
	$ã°_¥ï¨e_v2
(

3831 * 
˛õ¡D©a
,

3832 
T˛_I¡îp
 *
öãΩ
,

3833 
objc
,

3834 
T˛_Obj
 *
CONST
 
objv
[]

3836 
sqlôe3
 *
db
;

3837 c⁄° *
zSql
;

3838 *
zC›y
 = 0;

3839 
byãs
;

3840 c⁄° *
zTaû
 = 0;

3841 
sqlôe3_°mt
 *
pStmt
 = 0;

3842 
zBuf
[50];

3843 
rc
;

3845 if–
objc
!=5 && objc!=4 ){

3846 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

3847 
	`T˛_GëSåög
(
objv
[0]), " DB sql bytesÅailvar", 0);

3848  
TCL_ERROR
;

3850 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

3851 
zSql
 = 
	`T˛_GëSåög
(
objv
[2]);

3852 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
byãs
ËË 
TCL_ERROR
;

3857 if–
byãs
>=0 ){

3858 
zC›y
 = 
	`mÆloc
(
byãs
);

3859 
	`mem˝y
(
zC›y
, 
zSql
, 
byãs
);

3861 
n
 = ()
	`°æí
(
zSql
) + 1;

3862 
zC›y
 = 
	`mÆloc
(
n
);

3863 
	`mem˝y
(
zC›y
, 
zSql
, 
n
);

3865 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
db
, 
zC›y
, 
byãs
, &
pStmt
, 
objc
>=5 ? &
zTaû
 : 0);

3866 
	`‰ì
(
zC›y
);

3867 
zTaû
 = &
zSql
[(zTaû - 
zC›y
)];

3869 
	`as£π
(
rc
==
SQLITE_OK
 || 
pStmt
==0);

3870 
	`T˛_Re£tResu…
(
öãΩ
);

3871 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

3872 if–
rc
==
SQLITE_OK
 && 
zTaû
 && 
objc
>=5 ){

3873 if–
byãs
>=0 ){

3874 
byãs
 = byã†- ()(
zTaû
-
zSql
);

3876 
	`T˛_ObjSëV¨2
(
öãΩ
, 
objv
[4], 0, 
	`T˛_NewSåögObj
(
zTaû
, 
byãs
), 0);

3878 if–
rc
!=
SQLITE_OK
 ){

3879 
	`as£π
–
pStmt
==0 );

3880 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "(%dË", 
rc
);

3881 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 
	`sqlôe3_îrmsg
(
db
), 0);

3882  
TCL_ERROR
;

3885 if–
pStmt
 ){

3886 if–
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
pStmt
ËË 
TCL_ERROR
;

3887 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

3889  
TCL_OK
;

3890 
	}
}

3898 
	$ã°_¥ï¨e_tkt3134
(

3899 * 
˛õ¡D©a
,

3900 
T˛_I¡îp
 *
öãΩ
,

3901 
objc
,

3902 
T˛_Obj
 *
CONST
 
objv
[]

3904 
sqlôe3
 *
db
;

3905 c⁄° 
zSql
[] = "\000SELECT 1";

3906 
sqlôe3_°mt
 *
pStmt
 = 0;

3907 
zBuf
[50];

3908 
rc
;

3910 if–
objc
!=2 ){

3911 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

3912 
	`T˛_GëSåög
(
objv
[0]), " DB sql bytesÅailvar", 0);

3913  
TCL_ERROR
;

3915 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

3916 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
db
, &
zSql
[1], 0, &
pStmt
, 0);

3917 
	`as£π
(
rc
==
SQLITE_OK
 || 
pStmt
==0);

3918 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

3919 if–
rc
!=
SQLITE_OK
 ){

3920 
	`as£π
–
pStmt
==0 );

3921 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "(%dË", 
rc
);

3922 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 
	`sqlôe3_îrmsg
(
db
), 0);

3923  
TCL_ERROR
;

3926 if–
pStmt
 ){

3927 if–
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
pStmt
ËË 
TCL_ERROR
;

3928 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

3930  
TCL_OK
;

3931 
	}
}

3941 
	$ã°_¥ï¨e16
(

3942 * 
˛õ¡D©a
,

3943 
T˛_I¡îp
 *
öãΩ
,

3944 
objc
,

3945 
T˛_Obj
 *
CONST
 
objv
[]

3947 #i‚de‡
SQLITE_OMIT_UTF16


3948 
sqlôe3
 *
db
;

3949 c⁄° *
zSql
;

3950 c⁄° *
zTaû
 = 0;

3951 
T˛_Obj
 *
pTaû
 = 0;

3952 
sqlôe3_°mt
 *
pStmt
 = 0;

3953 
zBuf
[50];

3954 
rc
;

3955 
byãs
;

3956 
objÀn
;

3958 if–
objc
!=5 && objc!=4 ){

3959 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

3960 
	`T˛_GëSåög
(
objv
[0]), " DB sql bytes ?tailvar?", 0);

3961  
TCL_ERROR
;

3963 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

3964 
zSql
 = 
	`T˛_GëByãAºayFromObj
(
objv
[2], &
objÀn
);

3965 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
byãs
ËË 
TCL_ERROR
;

3967 
rc
 = 
	`sqlôe3_¥ï¨e16
(
db
, 
zSql
, 
byãs
, &
pStmt
, 
objc
>=5 ? &
zTaû
 : 0);

3968 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

3969 if–
rc
 ){

3970  
TCL_ERROR
;

3973 if–
objc
>=5 ){

3974 if–
zTaû
 ){

3975 
objÀn
 = objÀ¿- ()((
u8
 *)
zTaû
-(u8 *)
zSql
);

3977 
objÀn
 = 0;

3979 
pTaû
 = 
	`T˛_NewByãAºayObj
((
u8
 *)
zTaû
, 
objÀn
);

3980 
	`T˛_In¸RefCou¡
(
pTaû
);

3981 
	`T˛_ObjSëV¨2
(
öãΩ
, 
objv
[4], 0, 
pTaû
, 0);

3982 
	`T˛_De¸RefCou¡
(
pTaû
);

3985 if–
pStmt
 ){

3986 if–
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
pStmt
ËË 
TCL_ERROR
;

3988 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

3990  
TCL_OK
;

3991 
	}
}

4001 
	$ã°_¥ï¨e16_v2
(

4002 * 
˛õ¡D©a
,

4003 
T˛_I¡îp
 *
öãΩ
,

4004 
objc
,

4005 
T˛_Obj
 *
CONST
 
objv
[]

4007 #i‚de‡
SQLITE_OMIT_UTF16


4008 
sqlôe3
 *
db
;

4009 c⁄° *
zSql
;

4010 c⁄° *
zTaû
 = 0;

4011 
T˛_Obj
 *
pTaû
 = 0;

4012 
sqlôe3_°mt
 *
pStmt
 = 0;

4013 
zBuf
[50];

4014 
rc
;

4015 
byãs
;

4016 
objÀn
;

4018 if–
objc
!=5 && objc!=4 ){

4019 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

4020 
	`T˛_GëSåög
(
objv
[0]), " DB sql bytes ?tailvar?", 0);

4021  
TCL_ERROR
;

4023 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

4024 
zSql
 = 
	`T˛_GëByãAºayFromObj
(
objv
[2], &
objÀn
);

4025 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
byãs
ËË 
TCL_ERROR
;

4027 
rc
 = 
	`sqlôe3_¥ï¨e16_v2
(
db
, 
zSql
, 
byãs
, &
pStmt
, 
objc
>=5 ? &
zTaû
 : 0);

4028 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

4029 if–
rc
 ){

4030  
TCL_ERROR
;

4033 if–
objc
>=5 ){

4034 if–
zTaû
 ){

4035 
objÀn
 = objÀ¿- ()((
u8
 *)
zTaû
-(u8 *)
zSql
);

4037 
objÀn
 = 0;

4039 
pTaû
 = 
	`T˛_NewByãAºayObj
((
u8
 *)
zTaû
, 
objÀn
);

4040 
	`T˛_In¸RefCou¡
(
pTaû
);

4041 
	`T˛_ObjSëV¨2
(
öãΩ
, 
objv
[4], 0, 
pTaû
, 0);

4042 
	`T˛_De¸RefCou¡
(
pTaû
);

4045 if–
pStmt
 ){

4046 if–
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
pStmt
ËË 
TCL_ERROR
;

4048 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

4050  
TCL_OK
;

4051 
	}
}

4056 
	$ã°_›í
(

4057 * 
˛õ¡D©a
,

4058 
T˛_I¡îp
 *
öãΩ
,

4059 
objc
,

4060 
T˛_Obj
 *
CONST
 
objv
[]

4062 c⁄° *
zFûíame
;

4063 
sqlôe3
 *
db
;

4064 
zBuf
[100];

4066 if–
objc
!=3 && objc!=2 && objc!=1 ){

4067 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

4068 
	`T˛_GëSåög
(
objv
[0]), " filename options-list", 0);

4069  
TCL_ERROR
;

4072 
zFûíame
 = 
objc
>1 ? 
	`T˛_GëSåög
(
objv
[1]) : 0;

4073 
	`sqlôe3_›í
(
zFûíame
, &
db
);

4075 if–
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
db
ËË 
TCL_ERROR
;

4076 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

4077  
TCL_OK
;

4078 
	}
}

4083 
	$ã°_›í_v2
(

4084 * 
˛õ¡D©a
,

4085 
T˛_I¡îp
 *
öãΩ
,

4086 
objc
,

4087 
T˛_Obj
 *
CONST
 
objv
[]

4089 c⁄° *
zFûíame
;

4090 c⁄° *
zVfs
;

4091 
Êags
 = 0;

4092 
sqlôe3
 *
db
;

4093 
rc
;

4094 
zBuf
[100];

4096 
nFœg
;

4097 
T˛_Obj
 **
≠Fœg
;

4098 
i
;

4100 if–
objc
!=4 ){

4101 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "FILENAME FLAGS VFS");

4102  
TCL_ERROR
;

4104 
zFûíame
 = 
	`T˛_GëSåög
(
objv
[1]);

4105 
zVfs
 = 
	`T˛_GëSåög
(
objv
[3]);

4106 if–
zVfs
[0]==0x00 ) zVfs = 0;

4108 
rc
 = 
	`T˛_Li°ObjGëEÀmíts
(
öãΩ
, 
objv
[2], &
nFœg
, &
≠Fœg
);

4109 if–
rc
!=
TCL_OK
 ) Ñc;

4110 
i
=0; i<
nFœg
; i++){

4111 
iFœg
;

4112 
	sO≥nFœg
 {

4113 c⁄° *
zFœg
;

4114 
Êag
;

4115 } 
aFœg
[] = {

4116 { "SQLITE_OPEN_READONLY", 
SQLITE_OPEN_READONLY
 },

4117 { "SQLITE_OPEN_READWRITE", 
SQLITE_OPEN_READWRITE
 },

4118 { "SQLITE_OPEN_CREATE", 
SQLITE_OPEN_CREATE
 },

4119 { "SQLITE_OPEN_DELETEONCLOSE", 
SQLITE_OPEN_DELETEONCLOSE
 },

4120 { "SQLITE_OPEN_EXCLUSIVE", 
SQLITE_OPEN_EXCLUSIVE
 },

4121 { "SQLITE_OPEN_AUTOPROXY", 
SQLITE_OPEN_AUTOPROXY
 },

4122 { "SQLITE_OPEN_MAIN_DB", 
SQLITE_OPEN_MAIN_DB
 },

4123 { "SQLITE_OPEN_TEMP_DB", 
SQLITE_OPEN_TEMP_DB
 },

4124 { "SQLITE_OPEN_TRANSIENT_DB", 
SQLITE_OPEN_TRANSIENT_DB
 },

4125 { "SQLITE_OPEN_MAIN_JOURNAL", 
SQLITE_OPEN_MAIN_JOURNAL
 },

4126 { "SQLITE_OPEN_TEMP_JOURNAL", 
SQLITE_OPEN_TEMP_JOURNAL
 },

4127 { "SQLITE_OPEN_SUBJOURNAL", 
SQLITE_OPEN_SUBJOURNAL
 },

4128 { "SQLITE_OPEN_MASTER_JOURNAL", 
SQLITE_OPEN_MASTER_JOURNAL
 },

4129 { "SQLITE_OPEN_NOMUTEX", 
SQLITE_OPEN_NOMUTEX
 },

4130 { "SQLITE_OPEN_FULLMUTEX", 
SQLITE_OPEN_FULLMUTEX
 },

4131 { "SQLITE_OPEN_SHAREDCACHE", 
SQLITE_OPEN_SHAREDCACHE
 },

4132 { "SQLITE_OPEN_PRIVATECACHE", 
SQLITE_OPEN_PRIVATECACHE
 },

4133 { "SQLITE_OPEN_WAL", 
SQLITE_OPEN_WAL
 },

4134 { "SQLITE_OPEN_URI", 
SQLITE_OPEN_URI
 },

4137 
rc
 = 
	`T˛_GëIndexFromObjSåu˘
(
öãΩ
, 
≠Fœg
[
i
], 
aFœg
, (aFlag[0]),

4138 "Êag", 0, &
iFœg


4140 if–
rc
!=
TCL_OK
 ) Ñc;

4141 
Êags
 |
aFœg
[
iFœg
].
Êag
;

4144 
rc
 = 
	`sqlôe3_›í_v2
(
zFûíame
, &
db
, 
Êags
, 
zVfs
);

4145 if–
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
db
ËË 
TCL_ERROR
;

4146 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

4147  
TCL_OK
;

4148 
	}
}

4153 
	$ã°_›í16
(

4154 * 
˛õ¡D©a
,

4155 
T˛_I¡îp
 *
öãΩ
,

4156 
objc
,

4157 
T˛_Obj
 *
CONST
 
objv
[]

4159 #i‚de‡
SQLITE_OMIT_UTF16


4160 c⁄° *
zFûíame
;

4161 
sqlôe3
 *
db
;

4162 
zBuf
[100];

4164 if–
objc
!=3 ){

4165 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

4166 
	`T˛_GëSåög
(
objv
[0]), " filename options-list", 0);

4167  
TCL_ERROR
;

4170 
zFûíame
 = 
	`T˛_GëByãAºayFromObj
(
objv
[1], 0);

4171 
	`sqlôe3_›í16
(
zFûíame
, &
db
);

4173 if–
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
db
ËË 
TCL_ERROR
;

4174 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

4176  
TCL_OK
;

4177 
	}
}

4185 
	$ã°_com∂ëe16
(

4186 * 
˛õ¡D©a
,

4187 
T˛_I¡îp
 *
öãΩ
,

4188 
objc
,

4189 
T˛_Obj
 *
CONST
 
objv
[]

4191 #i‡!
	`deföed
(
SQLITE_OMIT_COMPLETE
Ë&& !deföed(
SQLITE_OMIT_UTF16
)

4192 *
zBuf
;

4194 if–
objc
!=2 ){

4195 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "<utf-16 sql>");

4196  
TCL_ERROR
;

4199 
zBuf
 = (*)
	`T˛_GëByãAºayFromObj
(
objv
[1], 0);

4200 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`sqlôe3_com∂ëe16
(
zBuf
)));

4202  
TCL_OK
;

4203 
	}
}

4210 
	$ã°_°ï
(

4211 * 
˛õ¡D©a
,

4212 
T˛_I¡îp
 *
öãΩ
,

4213 
objc
,

4214 
T˛_Obj
 *
CONST
 
objv
[]

4216 
sqlôe3_°mt
 *
pStmt
;

4217 
rc
;

4219 if–
objc
!=2 ){

4220 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

4221 
	`T˛_GëSåög
(
objv
[0]), " STMT", 0);

4222  
TCL_ERROR
;

4225 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

4226 
rc
 = 
	`sqlôe3_°ï
(
pStmt
);

4229 
	`T˛_SëResu…
(
öãΩ
, (*)
	`t1Eº‹Name
(
rc
), 0);

4230  
TCL_OK
;

4231 
	}
}

4233 
	$ã°_sql
(

4234 * 
˛õ¡D©a
,

4235 
T˛_I¡îp
 *
öãΩ
,

4236 
objc
,

4237 
T˛_Obj
 *
CONST
 
objv
[]

4239 
sqlôe3_°mt
 *
pStmt
;

4241 if–
objc
!=2 ){

4242 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "STMT");

4243  
TCL_ERROR
;

4246 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

4247 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3_sql
(
pStmt
), 
TCL_VOLATILE
);

4248  
TCL_OK
;

4249 
	}
}

4256 
	$ã°_cﬁumn_cou¡
(

4257 * 
˛õ¡D©a
,

4258 
T˛_I¡îp
 *
öãΩ
,

4259 
objc
,

4260 
T˛_Obj
 *
CONST
 
objv
[]

4262 
sqlôe3_°mt
 *
pStmt
;

4264 if–
objc
!=2 ){

4265 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

4266 
	`T˛_GëSåög
(
objv
[0]), " STMT column", 0);

4267  
TCL_ERROR
;

4270 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

4272 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`sqlôe3_cﬁumn_cou¡
(
pStmt
)));

4273  
TCL_OK
;

4274 
	}
}

4281 
	$ã°_cﬁumn_ty≥
(

4282 * 
˛õ¡D©a
,

4283 
T˛_I¡îp
 *
öãΩ
,

4284 
objc
,

4285 
T˛_Obj
 *
CONST
 
objv
[]

4287 
sqlôe3_°mt
 *
pStmt
;

4288 
cﬁ
;

4289 
ç
;

4291 if–
objc
!=3 ){

4292 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

4293 
	`T˛_GëSåög
(
objv
[0]), " STMT column", 0);

4294  
TCL_ERROR
;

4297 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

4298 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
cﬁ
ËË 
TCL_ERROR
;

4300 
ç
 = 
	`sqlôe3_cﬁumn_ty≥
(
pStmt
, 
cﬁ
);

4301  
ç
 ){

4302 
SQLITE_INTEGER
:

4303 
	`T˛_SëResu…
(
öãΩ
, "INTEGER", 
TCL_STATIC
);

4305 
SQLITE_NULL
:

4306 
	`T˛_SëResu…
(
öãΩ
, "NULL", 
TCL_STATIC
);

4308 
SQLITE_FLOAT
:

4309 
	`T˛_SëResu…
(
öãΩ
, "FLOAT", 
TCL_STATIC
);

4311 
SQLITE_TEXT
:

4312 
	`T˛_SëResu…
(
öãΩ
, "TEXT", 
TCL_STATIC
);

4314 
SQLITE_BLOB
:

4315 
	`T˛_SëResu…
(
öãΩ
, "BLOB", 
TCL_STATIC
);

4318 
	`as£π
(0);

4321  
TCL_OK
;

4322 
	}
}

4330 
	$ã°_cﬁumn_öt64
(

4331 * 
˛õ¡D©a
,

4332 
T˛_I¡îp
 *
öãΩ
,

4333 
objc
,

4334 
T˛_Obj
 *
CONST
 
objv
[]

4336 
sqlôe3_°mt
 *
pStmt
;

4337 
cﬁ
;

4338 
i64
 
iVÆ
;

4340 if–
objc
!=3 ){

4341 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

4342 
	`T˛_GëSåög
(
objv
[0]), " STMT column", 0);

4343  
TCL_ERROR
;

4346 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

4347 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
cﬁ
ËË 
TCL_ERROR
;

4349 
iVÆ
 = 
	`sqlôe3_cﬁumn_öt64
(
pStmt
, 
cﬁ
);

4350 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewWideI¡Obj
(
iVÆ
));

4351  
TCL_OK
;

4352 
	}
}

4357 
	$ã°_cﬁumn_blob
(

4358 * 
˛õ¡D©a
,

4359 
T˛_I¡îp
 *
öãΩ
,

4360 
objc
,

4361 
T˛_Obj
 *
CONST
 
objv
[]

4363 
sqlôe3_°mt
 *
pStmt
;

4364 
cﬁ
;

4366 
Àn
;

4367 c⁄° *
pBlob
;

4369 if–
objc
!=3 ){

4370 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

4371 
	`T˛_GëSåög
(
objv
[0]), " STMT column", 0);

4372  
TCL_ERROR
;

4375 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

4376 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
cﬁ
ËË 
TCL_ERROR
;

4378 
Àn
 = 
	`sqlôe3_cﬁumn_byãs
(
pStmt
, 
cﬁ
);

4379 
pBlob
 = 
	`sqlôe3_cﬁumn_blob
(
pStmt
, 
cﬁ
);

4380 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewByãAºayObj
(
pBlob
, 
Àn
));

4381  
TCL_OK
;

4382 
	}
}

4389 
	$ã°_cﬁumn_doubÀ
(

4390 * 
˛õ¡D©a
,

4391 
T˛_I¡îp
 *
öãΩ
,

4392 
objc
,

4393 
T˛_Obj
 *
CONST
 
objv
[]

4395 
sqlôe3_°mt
 *
pStmt
;

4396 
cﬁ
;

4397 
rVÆ
;

4399 if–
objc
!=3 ){

4400 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

4401 
	`T˛_GëSåög
(
objv
[0]), " STMT column", 0);

4402  
TCL_ERROR
;

4405 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

4406 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
cﬁ
ËË 
TCL_ERROR
;

4408 
rVÆ
 = 
	`sqlôe3_cﬁumn_doubÀ
(
pStmt
, 
cﬁ
);

4409 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewDoubÀObj
(
rVÆ
));

4410  
TCL_OK
;

4411 
	}
}

4418 
	$ã°_d©a_cou¡
(

4419 * 
˛õ¡D©a
,

4420 
T˛_I¡îp
 *
öãΩ
,

4421 
objc
,

4422 
T˛_Obj
 *
CONST
 
objv
[]

4424 
sqlôe3_°mt
 *
pStmt
;

4426 if–
objc
!=2 ){

4427 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

4428 
	`T˛_GëSåög
(
objv
[0]), " STMT column", 0);

4429  
TCL_ERROR
;

4432 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

4434 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`sqlôe3_d©a_cou¡
(
pStmt
)));

4435  
TCL_OK
;

4436 
	}
}

4445 
	$ã°_°mt_utf8
(

4446 * 
˛õ¡D©a
,

4447 
T˛_I¡îp
 *
öãΩ
,

4448 
objc
,

4449 
T˛_Obj
 *
CONST
 
objv
[]

4451 
sqlôe3_°mt
 *
pStmt
;

4452 
cﬁ
;

4453 c⁄° *(*
xFunc
)(
sqlôe3_°mt
*, );

4454 c⁄° *
zRë
;

4456 
xFunc
 = (c⁄° *(*)(
sqlôe3_°mt
*, ))
˛õ¡D©a
;

4457 if–
objc
!=3 ){

4458 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

4459 
	`T˛_GëSåög
(
objv
[0]), " STMT column", 0);

4460  
TCL_ERROR
;

4463 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

4464 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
cﬁ
ËË 
TCL_ERROR
;

4465 
zRë
 = 
	`xFunc
(
pStmt
, 
cﬁ
);

4466 if–
zRë
 ){

4467 
	`T˛_SëResu…
(
öãΩ
, (*)
zRë
, 0);

4469  
TCL_OK
;

4470 
	}
}

4472 
	$ã°_globÆ_ªcovî
(

4473 * 
˛õ¡D©a
,

4474 
T˛_I¡îp
 *
öãΩ
,

4475 
objc
,

4476 
T˛_Obj
 *
CONST
 
objv
[]

4478 #i‚de‡
SQLITE_OMIT_DEPRECATED


4479 
rc
;

4480 if–
objc
!=1 ){

4481 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

4482  
TCL_ERROR
;

4484 
rc
 = 
	`sqlôe3_globÆ_ªcovî
();

4485 
	`T˛_SëResu…
(
öãΩ
, (*)
	`t1Eº‹Name
(
rc
), 
TCL_STATIC
);

4487  
TCL_OK
;

4488 
	}
}

4497 
	$ã°_°mt_utf16
(

4498 * 
˛õ¡D©a
,

4499 
T˛_I¡îp
 *
öãΩ
,

4500 
objc
,

4501 
T˛_Obj
 *
CONST
 
objv
[]

4503 #i‚de‡
SQLITE_OMIT_UTF16


4504 
sqlôe3_°mt
 *
pStmt
;

4505 
cﬁ
;

4506 
T˛_Obj
 *
pRë
;

4507 c⁄° *
zName16
;

4508 c⁄° *(*
xFunc
)(
sqlôe3_°mt
*, );

4510 
xFunc
 = (c⁄° *(*)(
sqlôe3_°mt
*, ))
˛õ¡D©a
;

4511 if–
objc
!=3 ){

4512 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

4513 
	`T˛_GëSåög
(
objv
[0]), " STMT column", 0);

4514  
TCL_ERROR
;

4517 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

4518 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
cﬁ
ËË 
TCL_ERROR
;

4520 
zName16
 = 
	`xFunc
(
pStmt
, 
cﬁ
);

4521 if–
zName16
 ){

4522 
n
;

4523 c⁄° *
z
 = 
zName16
;

4524 
n
=0; 
z
[n] || z[n+1];Ç+=2){}

4525 
pRë
 = 
	`T˛_NewByãAºayObj
(
zName16
, 
n
+2);

4526 
	`T˛_SëObjResu…
(
öãΩ
, 
pRë
);

4530  
TCL_OK
;

4531 
	}
}

4541 
	$ã°_°mt_öt
(

4542 * 
˛õ¡D©a
,

4543 
T˛_I¡îp
 *
öãΩ
,

4544 
objc
,

4545 
T˛_Obj
 *
CONST
 
objv
[]

4547 
sqlôe3_°mt
 *
pStmt
;

4548 
cﬁ
;

4549 (*
xFunc
)(
sqlôe3_°mt
*, );

4551 
xFunc
 = ((*)(
sqlôe3_°mt
*, ))
˛õ¡D©a
;

4552 if–
objc
!=3 ){

4553 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

4554 
	`T˛_GëSåög
(
objv
[0]), " STMT column", 0);

4555  
TCL_ERROR
;

4558 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

4559 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
cﬁ
ËË 
TCL_ERROR
;

4561 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`xFunc
(
pStmt
, 
cﬁ
)));

4562  
TCL_OK
;

4563 
	}
}

4570 
	$sqlôe_£t_magic
(

4571 * 
˛õ¡D©a
,

4572 
T˛_I¡îp
 *
öãΩ
,

4573 
¨gc
,

4574 **
¨gv


4576 
sqlôe3
 *
db
;

4577 if–
¨gc
!=3 ){

4578 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

4580  
TCL_ERROR
;

4582 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

4583 if–
	`°rcmp
(
¨gv
[2], "SQLITE_MAGIC_OPEN")==0 ){

4584 
db
->
magic
 = 
SQLITE_MAGIC_OPEN
;

4585 }if–
	`°rcmp
(
¨gv
[2], "SQLITE_MAGIC_CLOSED")==0 ){

4586 
db
->
magic
 = 
SQLITE_MAGIC_CLOSED
;

4587 }if–
	`°rcmp
(
¨gv
[2], "SQLITE_MAGIC_BUSY")==0 ){

4588 
db
->
magic
 = 
SQLITE_MAGIC_BUSY
;

4589 }if–
	`°rcmp
(
¨gv
[2], "SQLITE_MAGIC_ERROR")==0 ){

4590 
db
->
magic
 = 
SQLITE_MAGIC_ERROR
;

4591 }if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], (*)&
db
->
magic
) ){

4592  
TCL_ERROR
;

4594  
TCL_OK
;

4595 
	}
}

4602 
	$ã°_öãºu±
(

4603 * 
˛õ¡D©a
,

4604 
T˛_I¡îp
 *
öãΩ
,

4605 
¨gc
,

4606 **
¨gv


4608 
sqlôe3
 *
db
;

4609 if–
¨gc
!=2 ){

4610 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0], " DB", 0);

4611  
TCL_ERROR
;

4613 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

4614 
	`sqlôe3_öãºu±
(
db
);

4615  
TCL_OK
;

4616 
	}
}

4618 
u8
 *
	gsqlôe3_°ack_ba£löe
 = 0;

4623 
	$¥ïSèck
(){

4624 
i
;

4625 
u32
 
bigBuf
[65536];

4626 
i
=0; i<(
bigBuf
)/(bigBuf[0]); i++) bigBuf[i] = 0xdeadbeef;

4627 
sqlôe3_°ack_ba£löe
 = (
u8
*)&
bigBuf
[65536];

4628 
	}
}

4633 
u64
 
	$sqlôe3SèckDïth
(){

4634 
u8
 
x
;

4635  (
u64
)(
sqlôe3_°ack_ba£löe
 - &
x
);

4636 
	}
}

4643 
	$ã°_°ack_u£d
(

4644 * 
˛õ¡D©a
,

4645 
T˛_I¡îp
 *
öãΩ
,

4646 
¨gc
,

4647 **
¨gv


4649 
sqlôe3
 *
db
;

4650 
i
;

4651 if–
¨gc
!=3 ){

4652 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

4654  
TCL_ERROR
;

4656 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

4657 
	`¥ïSèck
();

4658 ()
	`sqlôe3_exec
(
db
, 
¨gv
[2], 0, 0, 0);

4659 
i
=65535; i>=0 && ((
u32
*)
sqlôe3_°ack_ba£löe
)[-i]==0xdeadbeef; i--){}

4660 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
i
*4));

4661  
TCL_OK
;

4662 
	}
}

4671 
	$dñëe_fun˘i⁄
(

4672 * 
˛õ¡D©a
,

4673 
T˛_I¡îp
 *
öãΩ
,

4674 
¨gc
,

4675 **
¨gv


4677 
rc
;

4678 
sqlôe3
 *
db
;

4679 if–
¨gc
!=3 ){

4680 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

4682  
TCL_ERROR
;

4684 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

4685 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, 
¨gv
[2], -1, 
SQLITE_UTF8
, 0, 0, 0, 0);

4686 
	`T˛_SëResu…
(
öãΩ
, (*)
	`t1Eº‹Name
(
rc
), 
TCL_STATIC
);

4687  
TCL_OK
;

4688 
	}
}

4697 
	$dñëe_cﬁœti⁄
(

4698 * 
˛õ¡D©a
,

4699 
T˛_I¡îp
 *
öãΩ
,

4700 
¨gc
,

4701 **
¨gv


4703 
rc
;

4704 
sqlôe3
 *
db
;

4705 if–
¨gc
!=3 ){

4706 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

4708  
TCL_ERROR
;

4710 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

4711 
rc
 = 
	`sqlôe3_¸óã_cﬁœti⁄
(
db
, 
¨gv
[2], 
SQLITE_UTF8
, 0, 0);

4712 
	`T˛_SëResu…
(
öãΩ
, (*)
	`t1Eº‹Name
(
rc
), 
TCL_STATIC
);

4713  
TCL_OK
;

4714 
	}
}

4722 
	$gë_autocommô
(

4723 * 
˛õ¡D©a
,

4724 
T˛_I¡îp
 *
öãΩ
,

4725 
¨gc
,

4726 **
¨gv


4728 
zBuf
[30];

4729 
sqlôe3
 *
db
;

4730 if–
¨gc
!=2 ){

4731 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

4733  
TCL_ERROR
;

4735 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

4736 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%d", 
	`sqlôe3_gë_autocommô
(
db
));

4737 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

4738  
TCL_OK
;

4739 
	}
}

4748 
	$ã°_busy_timeout
(

4749 * 
˛õ¡D©a
,

4750 
T˛_I¡îp
 *
öãΩ
,

4751 
¨gc
,

4752 **
¨gv


4754 
rc
, 
ms
;

4755 
sqlôe3
 *
db
;

4756 if–
¨gc
!=3 ){

4757 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

4759  
TCL_ERROR
;

4761 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

4762 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
ms
ËË 
TCL_ERROR
;

4763 
rc
 = 
	`sqlôe3_busy_timeout
(
db
, 
ms
);

4764 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

4765  
TCL_OK
;

4766 
	}
}

4774 
	$t˛_v¨übÀ_ty≥
(

4775 * 
˛õ¡D©a
,

4776 
T˛_I¡îp
 *
öãΩ
,

4777 
objc
,

4778 
T˛_Obj
 *
CONST
 
objv
[]

4780 
T˛_Obj
 *
pV¨
;

4781 if–
objc
!=2 ){

4782 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "VARIABLE");

4783  
TCL_ERROR
;

4785 
pV¨
 = 
	`T˛_GëV¨2Ex
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), 0, 
TCL_LEAVE_ERR_MSG
);

4786 if–
pV¨
==0 )  
TCL_ERROR
;

4787 if–
pV¨
->
ty≥På
 ){

4788 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewSåögObj
(
pV¨
->
ty≥På
->
«me
, -1));

4790  
TCL_OK
;

4791 
	}
}

4800 
	$ã°_ªÀa£_mem‹y
(

4801 * 
˛õ¡D©a
,

4802 
T˛_I¡îp
 *
öãΩ
,

4803 
objc
,

4804 
T˛_Obj
 *
CONST
 
objv
[]

4806 #i‡
	`deföed
(
SQLITE_ENABLE_MEMORY_MANAGEMENT
Ë&& !deföed(
SQLITE_OMIT_DISKIO
)

4807 
N
;

4808 
amt
;

4809 if–
objc
!=1 && objc!=2 ){

4810 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "?N?");

4811  
TCL_ERROR
;

4813 if–
objc
==2 ){

4814 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
N
ËË 
TCL_ERROR
;

4816 
N
 = -1;

4818 
amt
 = 
	`sqlôe3_ªÀa£_mem‹y
(
N
);

4819 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
amt
));

4821  
TCL_OK
;

4822 
	}
}

4831 
	$ã°_db_ªÀa£_mem‹y
(

4832 * 
˛õ¡D©a
,

4833 
T˛_I¡îp
 *
öãΩ
,

4834 
objc
,

4835 
T˛_Obj
 *
CONST
 
objv
[]

4837 
sqlôe3
 *
db
;

4838 
rc
;

4839 if–
objc
!=2 ){

4840 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB");

4841  
TCL_ERROR
;

4843 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

4844 
rc
 = 
	`sqlôe3_db_ªÀa£_mem‹y
(
db
);

4845 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

4846  
TCL_OK
;

4847 
	}
}

4854 
	$ã°_db_ˇcheÊush
(

4855 * 
˛õ¡D©a
,

4856 
T˛_I¡îp
 *
öãΩ
,

4857 
objc
,

4858 
T˛_Obj
 *
CONST
 
objv
[]

4860 
sqlôe3
 *
db
;

4861 
rc
;

4862 if–
objc
!=2 ){

4863 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB");

4864  
TCL_ERROR
;

4866 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

4867 
rc
 = 
	`sqlôe3_db_ˇcheÊush
(
db
);

4868 if–
rc
 ){

4869 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºSå
(
rc
), 
TCL_STATIC
);

4870  
TCL_ERROR
;

4873 
	`T˛_Re£tResu…
(
öãΩ
);

4874  
TCL_OK
;

4875 
	}
}

4882 
	$ã°_sy°em_î∫o
(

4883 * 
˛õ¡D©a
,

4884 
T˛_I¡îp
 *
öãΩ
,

4885 
objc
,

4886 
T˛_Obj
 *
CONST
 
objv
[]

4888 
sqlôe3
 *
db
;

4889 
iEºno
;

4890 if–
objc
!=2 ){

4891 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB");

4892  
TCL_ERROR
;

4894 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

4895 
iEºno
 = 
	`sqlôe3_sy°em_î∫o
(
db
);

4896 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
iEºno
));

4897  
TCL_OK
;

4898 
	}
}

4905 
	$ã°_db_fûíame
(

4906 * 
˛õ¡D©a
,

4907 
T˛_I¡îp
 *
öãΩ
,

4908 
objc
,

4909 
T˛_Obj
 *
CONST
 
objv
[]

4911 
sqlôe3
 *
db
;

4912 c⁄° *
zDbName
;

4913 if–
objc
!=3 ){

4914 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB DBNAME");

4915  
TCL_ERROR
;

4917 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

4918 
zDbName
 = 
	`T˛_GëSåög
(
objv
[2]);

4919 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3_db_fûíame
(
db
, 
zDbName
), (*)0);

4920  
TCL_OK
;

4921 
	}
}

4929 
	$ã°_db_ªad⁄ly
(

4930 * 
˛õ¡D©a
,

4931 
T˛_I¡îp
 *
öãΩ
,

4932 
objc
,

4933 
T˛_Obj
 *
CONST
 
objv
[]

4935 
sqlôe3
 *
db
;

4936 c⁄° *
zDbName
;

4937 if–
objc
!=3 ){

4938 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB DBNAME");

4939  
TCL_ERROR
;

4941 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

4942 
zDbName
 = 
	`T˛_GëSåög
(
objv
[2]);

4943 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`sqlôe3_db_ªad⁄ly
(
db
, 
zDbName
)));

4944  
TCL_OK
;

4945 
	}
}

4954 
	$ã°_so·_hóp_limô
(

4955 * 
˛õ¡D©a
,

4956 
T˛_I¡îp
 *
öãΩ
,

4957 
objc
,

4958 
T˛_Obj
 *
CONST
 
objv
[]

4960 
sqlôe3_öt64
 
amt
;

4961 
T˛_WideI¡
 
N
 = -1;

4962 if–
objc
!=1 && objc!=2 ){

4963 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "?N?");

4964  
TCL_ERROR
;

4966 if–
objc
==2 ){

4967 if–
	`T˛_GëWideI¡FromObj
(
öãΩ
, 
objv
[1], &
N
ËË 
TCL_ERROR
;

4969 
amt
 = 
	`sqlôe3_so·_hóp_limô64
(
N
);

4970 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewWideI¡Obj
(
amt
));

4971  
TCL_OK
;

4972 
	}
}

4979 
	$ã°_thªad_˛ónup
(

4980 * 
˛õ¡D©a
,

4981 
T˛_I¡îp
 *
öãΩ
,

4982 
objc
,

4983 
T˛_Obj
 *
CONST
 
objv
[]

4985 #i‚de‡
SQLITE_OMIT_DEPRECATED


4986 
	`sqlôe3_thªad_˛ónup
();

4988  
TCL_OK
;

4989 
	}
}

4997 
	$ã°_∑gî_ªfcou¡s
(

4998 * 
˛õ¡D©a
,

4999 
T˛_I¡îp
 *
öãΩ
,

5000 
objc
,

5001 
T˛_Obj
 *
CONST
 
objv
[]

5003 
sqlôe3
 *
db
;

5004 
i
;

5005 
v
, *
a
;

5006 
T˛_Obj
 *
pResu…
;

5008 if–
objc
!=2 ){

5009 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

5010 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " DB", 0);

5011  
TCL_ERROR
;

5013 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

5014 
pResu…
 = 
	`T˛_NewObj
();

5015 
i
=0; i<
db
->
nDb
; i++){

5016 if–
db
->
aDb
[
i
].
pBt
==0 ){

5017 
v
 = -1;

5019 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

5020 
a
 = 
	`sqlôe3PagîSèts
(
	`sqlôe3BåìPagî
(
db
->
aDb
[
i
].
pBt
));

5021 
v
 = 
a
[0];

5022 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

5024 
	`T˛_Li°ObjAµídEÀmít
(0, 
pResu…
, 
	`T˛_NewI¡Obj
(
v
));

5026 
	`T˛_SëObjResu…
(
öãΩ
, 
pResu…
);

5027  
TCL_OK
;

5028 
	}
}

5043 
	$w‹kög_64bô_öt
(

5044 
Clõ¡D©a
 
˛õ¡D©a
,

5045 
T˛_I¡îp
 *
öãΩ
,

5046 
objc
,

5047 
T˛_Obj
 *
CONST
 
objv
[]

5049 
T˛_Obj
 *
pTe°Obj
;

5050 
w‹kög
 = 0;

5052 
pTe°Obj
 = 
	`T˛_NewWideI¡Obj
(1000000*(
i64
)1234567890);

5053 
w‹kög
 = 
	`°rcmp
(
	`T˛_GëSåög
(
pTe°Obj
), "1234567890000000")==0;

5054 
	`T˛_De¸RefCou¡
(
pTe°Obj
);

5055 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewBoﬁónObj
(
w‹kög
));

5056  
TCL_OK
;

5057 
	}
}

5068 
	$vfs_u∆ök_ã°
(

5069 
Clõ¡D©a
 
˛õ¡D©a
,

5070 
T˛_I¡îp
 *
öãΩ
,

5071 
objc
,

5072 
T˛_Obj
 *
CONST
 
objv
[]

5074 
i
;

5075 
sqlôe3_vfs
 *
pMaö
;

5076 
sqlôe3_vfs
 *
≠Vfs
[20];

5077 
sqlôe3_vfs
 
⁄e
, 
two
;

5079 
	`sqlôe3_vfs_uƒegi°î
(0);

5080 
⁄e
.
zName
 = "__one";

5081 
two
.
zName
 = "__two";

5086 
pMaö
 = 
	`sqlôe3_vfs_föd
(0);

5087 
	`sqlôe3_vfs_ªgi°î
(&
⁄e
, 0);

5088 
	`as£π
–
pMaö
==0 ||ÖMaö==
	`sqlôe3_vfs_föd
(0) );

5089 
	`sqlôe3_vfs_ªgi°î
(&
two
, 0);

5090 
	`as£π
–
pMaö
==0 ||ÖMaö==
	`sqlôe3_vfs_föd
(0) );

5093 
	`as£π
–
	`sqlôe3_vfs_föd
("__⁄e")==&
⁄e
 );

5094 
	`as£π
–
	`sqlôe3_vfs_föd
("__two")==&
two
 );

5100 
	`sqlôe3_vfs_ªgi°î
(&
⁄e
, 1);

5101 
	`as£π
–
	`sqlôe3_vfs_föd
("__⁄e")==&
⁄e
 );

5102 
	`as£π
–
	`sqlôe3_vfs_föd
("__two")==&
two
 );

5103 
	`as£π
–
	`sqlôe3_vfs_föd
(0)==&
⁄e
 );

5104 
	`sqlôe3_vfs_ªgi°î
(&
two
, 1);

5105 
	`as£π
–
	`sqlôe3_vfs_föd
("__⁄e")==&
⁄e
 );

5106 
	`as£π
–
	`sqlôe3_vfs_föd
("__two")==&
two
 );

5107 
	`as£π
–
	`sqlôe3_vfs_föd
(0)==&
two
 );

5108 if–
pMaö
 ){

5109 
	`sqlôe3_vfs_ªgi°î
(
pMaö
, 1);

5110 
	`as£π
–
	`sqlôe3_vfs_föd
("__⁄e")==&
⁄e
 );

5111 
	`as£π
–
	`sqlôe3_vfs_föd
("__two")==&
two
 );

5112 
	`as£π
–
	`sqlôe3_vfs_föd
(0)==
pMaö
 );

5118 
i
=0; i<(
≠Vfs
)/(apVfs[0]); i++){

5119 
≠Vfs
[
i
] = 
	`sqlôe3_vfs_föd
(0);

5120 if–
≠Vfs
[
i
] ){

5121 
	`as£π
–
≠Vfs
[
i
]==
	`sqlôe3_vfs_föd
◊pVfs[i]->
zName
) );

5122 
	`sqlôe3_vfs_uƒegi°î
(
≠Vfs
[
i
]);

5123 
	`as£π
–0==
	`sqlôe3_vfs_föd
(
≠Vfs
[
i
]->
zName
) );

5126 
	`as£π
–0==
	`sqlôe3_vfs_föd
(0) );

5131 
	`sqlôe3_vfs_ªgi°î
(
pMaö
, 0);

5132 
	`as£π
–
	`sqlôe3_vfs_föd
(0)==
pMaö
 );

5135 
	`sqlôe3_vfs_uƒegi°î
(
pMaö
);

5136 
	`as£π
–0==
	`sqlôe3_vfs_föd
(0) );

5139 
i
=(
≠Vfs
)/(apVfs[0])-1; i>=0; i--){

5140 if–
≠Vfs
[
i
] ){

5141 
	`sqlôe3_vfs_ªgi°î
(
≠Vfs
[
i
], 1);

5142 
	`as£π
–
≠Vfs
[
i
]==
	`sqlôe3_vfs_föd
(0) );

5143 
	`as£π
–
≠Vfs
[
i
]==
	`sqlôe3_vfs_föd
◊pVfs[i]->
zName
) );

5148 
	`sqlôe3_vfs_uƒegi°î
(&
⁄e
);

5149 
	`sqlôe3_vfs_uƒegi°î
(&
two
);

5152 
	`sqlôe3_vfs_uƒegi°î
(&
⁄e
);

5153 
	`sqlôe3_vfs_uƒegi°î
(&
two
);

5154 
	`as£π
–
	`sqlôe3_vfs_föd
("__one")==0 );

5155 
	`as£π
–
	`sqlôe3_vfs_föd
("__two")==0 );

5159 
	`as£π
–
	`sqlôe3_vfs_föd
(0)==
pMaö
 );

5161  
TCL_OK
;

5162 
	}
}

5170 
	$vfs_öôÁû_ã°
(

5171 
Clõ¡D©a
 
˛õ¡D©a
,

5172 
T˛_I¡îp
 *
öãΩ
,

5173 
objc
,

5174 
T˛_Obj
 *
CONST
 
objv
[]

5176 
sqlôe3_vfs
 
⁄e
;

5177 
⁄e
.
zName
 = "__one";

5179 if–
	`sqlôe3_vfs_föd
(0ËË 
TCL_ERROR
;

5180 
	`sqlôe3_vfs_ªgi°î
(&
⁄e
, 0);

5181 if–
	`sqlôe3_vfs_föd
(0ËË 
TCL_ERROR
;

5182 
	`sqlôe3_vfs_ªgi°î
(&
⁄e
, 1);

5183 if–
	`sqlôe3_vfs_föd
(0ËË 
TCL_ERROR
;

5184  
TCL_OK
;

5185 
	}
}

5190 
sqlôe3_vfs
 *
	g≠Vfs
[20];

5191 
	gnVfs
 = 0;

5198 
	$vfs_uƒegi°î_Æl
(

5199 
Clõ¡D©a
 
˛õ¡D©a
,

5200 
T˛_I¡îp
 *
öãΩ
,

5201 
objc
,

5202 
T˛_Obj
 *
CONST
 
objv
[]

5204 
i
;

5205 
i
=0; i<
	`AºaySize
(
≠Vfs
); i++){

5206 
≠Vfs
[
i
] = 
	`sqlôe3_vfs_föd
(0);

5207 if–
≠Vfs
[
i
]==0 ) ;

5208 
	`sqlôe3_vfs_uƒegi°î
(
≠Vfs
[
i
]);

5210 
nVfs
 = 
i
;

5211  
TCL_OK
;

5212 
	}
}

5220 
	$vfs_ªªgi°î_Æl
(

5221 
Clõ¡D©a
 
˛õ¡D©a
,

5222 
T˛_I¡îp
 *
öãΩ
,

5223 
objc
,

5224 
T˛_Obj
 *
CONST
 
objv
[]

5226 
i
;

5227 
i
=
nVfs
-1; i>=0; i--){

5228 
	`sqlôe3_vfs_ªgi°î
(
≠Vfs
[
i
], 1);

5230  
TCL_OK
;

5231 
	}
}

5240 
	$fûe_c⁄åﬁ_ã°
(

5241 
Clõ¡D©a
 
˛õ¡D©a
,

5242 
T˛_I¡îp
 *
öãΩ
,

5243 
objc
,

5244 
T˛_Obj
 *
CONST
 
objv
[]

5246 
iArg
 = 0;

5247 
sqlôe3
 *
db
;

5248 
rc
;

5250 if–
objc
!=2 ){

5251 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

5252 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " DB", 0);

5253  
TCL_ERROR
;

5255 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

5256 
rc
 = 
	`sqlôe3_fûe_c⁄åﬁ
(
db
, 0, 0, &
iArg
);

5257 
	`as£π
–
rc
==
SQLITE_NOTFOUND
 );

5258 
rc
 = 
	`sqlôe3_fûe_c⁄åﬁ
(
db
, "nŸad©aba£", 
SQLITE_FCNTL_LOCKSTATE
, &
iArg
);

5259 
	`as£π
–
rc
==
SQLITE_ERROR
 );

5260 
rc
 = 
	`sqlôe3_fûe_c⁄åﬁ
(
db
, "maö", -1, &
iArg
);

5261 
	`as£π
–
rc
==
SQLITE_NOTFOUND
 );

5262 
rc
 = 
	`sqlôe3_fûe_c⁄åﬁ
(
db
, "ãmp", -1, &
iArg
);

5263 
	`as£π
–
rc
==
SQLITE_NOTFOUND
 ||Ñc==
SQLITE_ERROR
 );

5265  
TCL_OK
;

5266 
	}
}

5275 
	$fûe_c⁄åﬁ_œ°î∫o_ã°
(

5276 
Clõ¡D©a
 
˛õ¡D©a
,

5277 
T˛_I¡îp
 *
öãΩ
,

5278 
objc
,

5279 
T˛_Obj
 *
CONST
 
objv
[]

5281 
iArg
 = 0;

5282 
sqlôe3
 *
db
;

5283 
rc
;

5285 if–
objc
!=2 ){

5286 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

5287 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " DB", 0);

5288  
TCL_ERROR
;

5290 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
) ){

5291  
TCL_ERROR
;

5293 
rc
 = 
	`sqlôe3_fûe_c⁄åﬁ
(
db
, 
NULL
, 
SQLITE_LAST_ERRNO
, &
iArg
);

5294 if–
rc
 ){

5295 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

5296  
TCL_ERROR
;

5298 if–
iArg
!=0 ) {

5299 
	`T˛_AµídResu…
(
öãΩ
, "UnexpectedÇon-zeroÉrrno: ",

5300 
	`T˛_GëSåögFromObj
(
	`T˛_NewI¡Obj
(
iArg
), 0), " ", 0);

5301  
TCL_ERROR
;

5303  
TCL_OK
;

5304 
	}
}

5313 
	$fûe_c⁄åﬁ_chunksize_ã°
(

5314 
Clõ¡D©a
 
˛õ¡D©a
,

5315 
T˛_I¡îp
 *
öãΩ
,

5316 
objc
,

5317 
T˛_Obj
 *
CONST
 
objv
[]

5319 
nSize
;

5320 *
zDb
;

5321 
sqlôe3
 *
db
;

5322 
rc
;

5324 if–
objc
!=4 ){

5325 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB DBNAME SIZE");

5326  
TCL_ERROR
;

5328 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
)

5329 || 
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
nSize
)

5331  
TCL_ERROR
;

5333 
zDb
 = 
	`T˛_GëSåög
(
objv
[2]);

5334 if–
zDb
[0]=='\0' ) zDb = 
NULL
;

5336 
rc
 = 
	`sqlôe3_fûe_c⁄åﬁ
(
db
, 
zDb
, 
SQLITE_FCNTL_CHUNK_SIZE
, (*)&
nSize
);

5337 if–
rc
 ){

5338 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_STATIC
);

5339  
TCL_ERROR
;

5341  
TCL_OK
;

5342 
	}
}

5350 
	$fûe_c⁄åﬁ_sizehöt_ã°
(

5351 
Clõ¡D©a
 
˛õ¡D©a
,

5352 
T˛_I¡îp
 *
öãΩ
,

5353 
objc
,

5354 
T˛_Obj
 *
CONST
 
objv
[]

5356 
T˛_WideI¡
 
nSize
;

5357 *
zDb
;

5358 
sqlôe3
 *
db
;

5359 
rc
;

5361 if–
objc
!=4 ){

5362 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB DBNAME SIZE");

5363  
TCL_ERROR
;

5365 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
)

5366 || 
	`T˛_GëWideI¡FromObj
(
öãΩ
, 
objv
[3], &
nSize
)

5368  
TCL_ERROR
;

5370 
zDb
 = 
	`T˛_GëSåög
(
objv
[2]);

5371 if–
zDb
[0]=='\0' ) zDb = 
NULL
;

5373 
rc
 = 
	`sqlôe3_fûe_c⁄åﬁ
(
db
, 
zDb
, 
SQLITE_FCNTL_SIZE_HINT
, (*)&
nSize
);

5374 if–
rc
 ){

5375 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_STATIC
);

5376  
TCL_ERROR
;

5378  
TCL_OK
;

5379 
	}
}

5388 
	$fûe_c⁄åﬁ_lock¥oxy_ã°
(

5389 
Clõ¡D©a
 
˛õ¡D©a
,

5390 
T˛_I¡îp
 *
öãΩ
,

5391 
objc
,

5392 
T˛_Obj
 *
CONST
 
objv
[]

5394 
sqlôe3
 *
db
;

5396 if–
objc
!=3 ){

5397 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

5398 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " DB PWD", 0);

5399  
TCL_ERROR
;

5401 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
) ){

5402  
TCL_ERROR
;

5405 #i‡!
	`deföed
(
SQLITE_ENABLE_LOCKING_STYLE
)

5406 #i‡
	`deföed
(
__APPLE__
)

5407 
	#SQLITE_ENABLE_LOCKING_STYLE
 1

	)

5409 
	#SQLITE_ENABLE_LOCKING_STYLE
 0

	)

5412 #i‡
SQLITE_ENABLE_LOCKING_STYLE
 && 
	`deföed
(
__APPLE__
)

5414 *
ã°P©h
;

5415 
rc
;

5416 
nPwd
;

5417 c⁄° *
zPwd
;

5418 
¥oxyP©h
[400];

5420 
zPwd
 = 
	`T˛_GëSåögFromObj
(
objv
[2], &
nPwd
);

5421 if–(
¥oxyP©h
)<
nPwd
+20 ){

5422 
	`T˛_AµídResu…
(
öãΩ
, "PWDÅoo big", (*)0);

5423  
TCL_ERROR
;

5425 
	`sqlôe3_¢¥ötf
((
¥oxyP©h
),ÖroxyP©h, "%s/ã°.¥oxy", 
zPwd
);

5426 
rc
 = 
	`sqlôe3_fûe_c⁄åﬁ
(
db
, 
NULL
, 
SQLITE_SET_LOCKPROXYFILE
, 
¥oxyP©h
);

5427 if–
rc
 ){

5428 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

5429  
TCL_ERROR
;

5431 
rc
 = 
	`sqlôe3_fûe_c⁄åﬁ
(
db
, 
NULL
, 
SQLITE_GET_LOCKPROXYFILE
, &
ã°P©h
);

5432 if–
	`°∫cmp
(
¥oxyP©h
,
ã°P©h
,11) ){

5433 
	`T˛_AµídResu…
(
öãΩ
, "LockÖroxy file didÇot matchÅhe "

5435  
TCL_ERROR
;

5437 if–
rc
 ){

5438 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

5439  
TCL_ERROR
;

5441 
rc
 = 
	`sqlôe3_fûe_c⁄åﬁ
(
db
, 
NULL
, 
SQLITE_SET_LOCKPROXYFILE
, 
¥oxyP©h
);

5442 if–
rc
 ){

5443 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

5444  
TCL_ERROR
;

5448  
TCL_OK
;

5449 
	}
}

5451 #i‡
SQLITE_OS_WIN


5458 
	$fûe_c⁄åﬁ_wö32_av_ªåy
(

5459 
Clõ¡D©a
 
˛õ¡D©a
,

5460 
T˛_I¡îp
 *
öãΩ
,

5461 
objc
,

5462 
T˛_Obj
 *
CONST
 
objv
[]

5464 
sqlôe3
 *
db
;

5465 
rc
;

5466 
a
[2];

5467 
z
[100];

5469 if–
objc
!=4 ){

5470 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

5471 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " DB NRETRY DELAY", 0);

5472  
TCL_ERROR
;

5474 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
) ){

5475  
TCL_ERROR
;

5477 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
a
[0]ËË 
TCL_ERROR
;

5478 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
a
[1]ËË 
TCL_ERROR
;

5479 
rc
 = 
	`sqlôe3_fûe_c⁄åﬁ
(
db
, 
NULL
, 
SQLITE_FCNTL_WIN32_AV_RETRY
, (*)
a
);

5480 
	`sqlôe3_¢¥ötf
((
z
), z, "%d %d %d", 
rc
, 
a
[0],á[1]);

5481 
	`T˛_AµídResu…
(
öãΩ
, 
z
, (*)0);

5482  
TCL_OK
;

5483 
	}
}

5491 
	$fûe_c⁄åﬁ_wö32_£t_h™dÀ
(

5492 
Clõ¡D©a
 
˛õ¡D©a
,

5493 
T˛_I¡îp
 *
öãΩ
,

5494 
objc
,

5495 
T˛_Obj
 *
CONST
 
objv
[]

5497 
sqlôe3
 *
db
;

5498 
rc
;

5499 
HANDLE
 
hFûe
 = 
NULL
;

5500 
z
[100];

5502 if–
objc
!=3 ){

5503 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

5504 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " DB HANDLE", 0);

5505  
TCL_ERROR
;

5507 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
) ){

5508  
TCL_ERROR
;

5510 if–
	`gëWö32H™dÀ
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[2]), &
hFûe
) ){

5511  
TCL_ERROR
;

5513 
rc
 = 
	`sqlôe3_fûe_c⁄åﬁ
(
db
, 
NULL
, 
SQLITE_FCNTL_WIN32_SET_HANDLE
,

5514 (*)&
hFûe
);

5515 
	`sqlôe3_¢¥ötf
((
z
), z, "%d %p", 
rc
, (*)
hFûe
);

5516 
	`T˛_AµídResu…
(
öãΩ
, 
z
, (*)0);

5517  
TCL_OK
;

5518 
	}
}

5527 
	$fûe_c⁄åﬁ_≥rsi°_wÆ
(

5528 
Clõ¡D©a
 
˛õ¡D©a
,

5529 
T˛_I¡îp
 *
öãΩ
,

5530 
objc
,

5531 
T˛_Obj
 *
CONST
 
objv
[]

5533 
sqlôe3
 *
db
;

5534 
rc
;

5535 
bPîsi°
;

5536 
z
[100];

5538 if–
objc
!=3 ){

5539 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

5540 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " DB FLAG", 0);

5541  
TCL_ERROR
;

5543 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
) ){

5544  
TCL_ERROR
;

5546 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
bPîsi°
ËË 
TCL_ERROR
;

5547 
rc
 = 
	`sqlôe3_fûe_c⁄åﬁ
(
db
, 
NULL
, 
SQLITE_FCNTL_PERSIST_WAL
, (*)&
bPîsi°
);

5548 
	`sqlôe3_¢¥ötf
((
z
), z, "%d %d", 
rc
, 
bPîsi°
);

5549 
	`T˛_AµídResu…
(
öãΩ
, 
z
, (*)0);

5550  
TCL_OK
;

5551 
	}
}

5559 
	$fûe_c⁄åﬁ_powîß„_ovîwrôe
(

5560 
Clõ¡D©a
 
˛õ¡D©a
,

5561 
T˛_I¡îp
 *
öãΩ
,

5562 
objc
,

5563 
T˛_Obj
 *
CONST
 
objv
[]

5565 
sqlôe3
 *
db
;

5566 
rc
;

5567 
b
;

5568 
z
[100];

5570 if–
objc
!=3 ){

5571 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

5572 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " DB FLAG", 0);

5573  
TCL_ERROR
;

5575 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
) ){

5576  
TCL_ERROR
;

5578 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
b
ËË 
TCL_ERROR
;

5579 
rc
 = 
	`sqlôe3_fûe_c⁄åﬁ
(
db
,
NULL
,
SQLITE_FCNTL_POWERSAFE_OVERWRITE
,(*)&
b
);

5580 
	`sqlôe3_¢¥ötf
((
z
), z, "%d %d", 
rc
, 
b
);

5581 
	`T˛_AµídResu…
(
öãΩ
, 
z
, (*)0);

5582  
TCL_OK
;

5583 
	}
}

5591 
	$fûe_c⁄åﬁ_vf¢ame
(

5592 
Clõ¡D©a
 
˛õ¡D©a
,

5593 
T˛_I¡îp
 *
öãΩ
,

5594 
objc
,

5595 
T˛_Obj
 *
CONST
 
objv
[]

5597 
sqlôe3
 *
db
;

5598 c⁄° *
zDbName
 = "main";

5599 *
zVfsName
 = 0;

5601 if–
objc
!=2 && objc!=3 ){

5602 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

5603 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " DB ?AUXDB?", 0);

5604  
TCL_ERROR
;

5606 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
) ){

5607  
TCL_ERROR
;

5609 if–
objc
==3 ){

5610 
zDbName
 = 
	`T˛_GëSåög
(
objv
[2]);

5612 
	`sqlôe3_fûe_c⁄åﬁ
(
db
, 
zDbName
, 
SQLITE_FCNTL_VFSNAME
,(*)&
zVfsName
);

5613 
	`T˛_AµídResu…
(
öãΩ
, 
zVfsName
, (*)0);

5614 
	`sqlôe3_‰ì
(
zVfsName
);

5615  
TCL_OK
;

5616 
	}
}

5623 
	$fûe_c⁄åﬁ_ãmpfûíame
(

5624 
Clõ¡D©a
 
˛õ¡D©a
,

5625 
T˛_I¡îp
 *
öãΩ
,

5626 
objc
,

5627 
T˛_Obj
 *
CONST
 
objv
[]

5629 
sqlôe3
 *
db
;

5630 c⁄° *
zDbName
 = "main";

5631 *
zTName
 = 0;

5633 if–
objc
!=2 && objc!=3 ){

5634 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

5635 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " DB ?AUXDB?", 0);

5636  
TCL_ERROR
;

5638 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
) ){

5639  
TCL_ERROR
;

5641 if–
objc
==3 ){

5642 
zDbName
 = 
	`T˛_GëSåög
(
objv
[2]);

5644 
	`sqlôe3_fûe_c⁄åﬁ
(
db
, 
zDbName
, 
SQLITE_FCNTL_TEMPFILENAME
, (*)&
zTName
);

5645 
	`T˛_AµídResu…
(
öãΩ
, 
zTName
, (*)0);

5646 
	`sqlôe3_‰ì
(
zTName
);

5647  
TCL_OK
;

5648 
	}
}

5656 
	$vfs_li°
(

5657 
Clõ¡D©a
 
˛õ¡D©a
,

5658 
T˛_I¡îp
 *
öãΩ
,

5659 
objc
,

5660 
T˛_Obj
 *
CONST
 
objv
[]

5662 
sqlôe3_vfs
 *
pVfs
;

5663 
T˛_Obj
 *
pRë
 = 
	`T˛_NewObj
();

5664 if–
objc
!=1 ){

5665 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

5666  
TCL_ERROR
;

5668 
pVfs
=
	`sqlôe3_vfs_föd
(0);ÖVfs;ÖVfsıVfs->
pNext
){

5669 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`T˛_NewSåögObj
(
pVfs
->
zName
, -1));

5671 
	`T˛_SëObjResu…
(
öãΩ
, 
pRë
);

5672  
TCL_OK
;

5673 
	}
}

5681 
	$ã°_limô
(

5682 
Clõ¡D©a
 
˛õ¡D©a
,

5683 
T˛_I¡îp
 *
öãΩ
,

5684 
objc
,

5685 
T˛_Obj
 *
CONST
 
objv
[]

5687 
sqlôe3
 *
db
;

5688 
rc
;

5690 *
zName
;

5691 
id
;

5692 } 
aId
[] = {

5693 { "SQLITE_LIMIT_LENGTH", 
SQLITE_LIMIT_LENGTH
 },

5694 { "SQLITE_LIMIT_SQL_LENGTH", 
SQLITE_LIMIT_SQL_LENGTH
 },

5695 { "SQLITE_LIMIT_COLUMN", 
SQLITE_LIMIT_COLUMN
 },

5696 { "SQLITE_LIMIT_EXPR_DEPTH", 
SQLITE_LIMIT_EXPR_DEPTH
 },

5697 { "SQLITE_LIMIT_COMPOUND_SELECT", 
SQLITE_LIMIT_COMPOUND_SELECT
 },

5698 { "SQLITE_LIMIT_VDBE_OP", 
SQLITE_LIMIT_VDBE_OP
 },

5699 { "SQLITE_LIMIT_FUNCTION_ARG", 
SQLITE_LIMIT_FUNCTION_ARG
 },

5700 { "SQLITE_LIMIT_ATTACHED", 
SQLITE_LIMIT_ATTACHED
 },

5701 { "SQLITE_LIMIT_LIKE_PATTERN_LENGTH", 
SQLITE_LIMIT_LIKE_PATTERN_LENGTH
 },

5702 { "SQLITE_LIMIT_VARIABLE_NUMBER", 
SQLITE_LIMIT_VARIABLE_NUMBER
 },

5703 { "SQLITE_LIMIT_TRIGGER_DEPTH", 
SQLITE_LIMIT_TRIGGER_DEPTH
 },

5704 { "SQLITE_LIMIT_WORKER_THREADS", 
SQLITE_LIMIT_WORKER_THREADS
 },

5708 { "SQLITE_LIMIT_TOOBIG", 
SQLITE_LIMIT_WORKER_THREADS
+1 },

5710 
i
, 
id
 = 0;

5711 
vÆ
;

5712 c⁄° *
zId
;

5714 if–
objc
!=4 ){

5715 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

5716 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " DB ID VALUE", 0);

5717  
TCL_ERROR
;

5719 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

5720 
zId
 = 
	`T˛_GëSåög
(
objv
[2]);

5721 
i
=0; i<(
aId
)/(aId[0]); i++){

5722 if–
	`°rcmp
(
zId
, 
aId
[
i
].
zName
)==0 ){

5723 
id
 = 
aId
[
i
].id;

5727 if–
i
>=(
aId
)/(aId[0]) ){

5728 
	`T˛_AµídResu…
(
öãΩ
, "unknow¿limôÅy≥: ", 
zId
, (*)0);

5729  
TCL_ERROR
;

5731 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
vÆ
ËË 
TCL_ERROR
;

5732 
rc
 = 
	`sqlôe3_limô
(
db
, 
id
, 
vÆ
);

5733 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

5734  
TCL_OK
;

5735 
	}
}

5744 
	$ßve_¥ng_°©e
(

5745 
Clõ¡D©a
 
˛õ¡D©a
,

5746 
T˛_I¡îp
 *
öãΩ
,

5747 
objc
,

5748 
T˛_Obj
 *
CONST
 
objv
[]

5750 
rc
 = 
	`sqlôe3_ã°_c⁄åﬁ
(9999);

5751 
	`as£π
–
rc
==0 );

5752 
rc
 = 
	`sqlôe3_ã°_c⁄åﬁ
(-1);

5753 
	`as£π
–
rc
==0 );

5754 
	`sqlôe3_ã°_c⁄åﬁ
(
SQLITE_TESTCTRL_PRNG_SAVE
);

5755  
TCL_OK
;

5756 
	}
}

5760 
	$ª°‹e_¥ng_°©e
(

5761 
Clõ¡D©a
 
˛õ¡D©a
,

5762 
T˛_I¡îp
 *
öãΩ
,

5763 
objc
,

5764 
T˛_Obj
 *
CONST
 
objv
[]

5766 
	`sqlôe3_ã°_c⁄åﬁ
(
SQLITE_TESTCTRL_PRNG_RESTORE
);

5767  
TCL_OK
;

5768 
	}
}

5772 
	$ª£t_¥ng_°©e
(

5773 
Clõ¡D©a
 
˛õ¡D©a
,

5774 
T˛_I¡îp
 *
öãΩ
,

5775 
objc
,

5776 
T˛_Obj
 *
CONST
 
objv
[]

5778 
	`sqlôe3_ã°_c⁄åﬁ
(
SQLITE_TESTCTRL_PRNG_RESET
);

5779  
TCL_OK
;

5780 
	}
}

5788 
	$d©aba£_may_be_c‹ru±
(

5789 
Clõ¡D©a
 
˛õ¡D©a
,

5790 
T˛_I¡îp
 *
öãΩ
,

5791 
objc
,

5792 
T˛_Obj
 *
CONST
 
objv
[]

5794 
	`sqlôe3_ã°_c⁄åﬁ
(
SQLITE_TESTCTRL_NEVER_CORRUPT
, 0);

5795  
TCL_OK
;

5796 
	}
}

5803 
	$d©aba£_√vî_c‹ru±
(

5804 
Clõ¡D©a
 
˛õ¡D©a
,

5805 
T˛_I¡îp
 *
öãΩ
,

5806 
objc
,

5807 
T˛_Obj
 *
CONST
 
objv
[]

5809 
	`sqlôe3_ã°_c⁄åﬁ
(
SQLITE_TESTCTRL_NEVER_CORRUPT
, 1);

5810  
TCL_OK
;

5811 
	}
}

5816 
	$ã°_pˇche_°©s
(

5817 
Clõ¡D©a
 
˛õ¡D©a
,

5818 
T˛_I¡îp
 *
öãΩ
,

5819 
objc
,

5820 
T˛_Obj
 *
CONST
 
objv
[]

5822 
nMö
;

5823 
nMax
;

5824 
nCuºít
;

5825 
nRecy˛abÀ
;

5826 
T˛_Obj
 *
pRë
;

5828 
	`sqlôe3PˇcheSèts
(&
nCuºít
, &
nMax
, &
nMö
, &
nRecy˛abÀ
);

5830 
pRë
 = 
	`T˛_NewObj
();

5831 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`T˛_NewSåögObj
("current", -1));

5832 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`T˛_NewI¡Obj
(
nCuºít
));

5833 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`T˛_NewSåögObj
("max", -1));

5834 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`T˛_NewI¡Obj
(
nMax
));

5835 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`T˛_NewSåögObj
("min", -1));

5836 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`T˛_NewI¡Obj
(
nMö
));

5837 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`T˛_NewSåögObj
("recyclable", -1));

5838 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`T˛_NewI¡Obj
(
nRecy˛abÀ
));

5840 
	`T˛_SëObjResu…
(
öãΩ
, 
pRë
);

5842  
TCL_OK
;

5843 
	}
}

5845 #ifde‡
SQLITE_ENABLE_UNLOCK_NOTIFY


5846 
	$ã°_u∆ock_nŸify_cb
(**
aArg
, 
nArg
){

5847 
ii
;

5848 
ii
=0; ii<
nArg
; ii++){

5849 
	`T˛_EvÆEx
((
T˛_I¡îp
 *)
aArg
[
ii
], "u∆ock_nŸify", -1, 
TCL_EVAL_GLOBAL
);

5851 
	}
}

5857 #ifde‡
SQLITE_ENABLE_UNLOCK_NOTIFY


5858 
	$ã°_u∆ock_nŸify
(

5859 
Clõ¡D©a
 
˛õ¡D©a
,

5860 
T˛_I¡îp
 *
öãΩ
,

5861 
objc
,

5862 
T˛_Obj
 *
CONST
 
objv
[]

5864 
sqlôe3
 *
db
;

5865 
rc
;

5867 if–
objc
!=2 ){

5868 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB");

5869  
TCL_ERROR
;

5872 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
) ){

5873  
TCL_ERROR
;

5875 
rc
 = 
	`sqlôe3_u∆ock_nŸify
(
db
, 
ã°_u∆ock_nŸify_cb
, (*)
öãΩ
);

5876 
	`T˛_SëResu…
(
öãΩ
, (*)
	`t1Eº‹Name
(
rc
), 
TCL_STATIC
);

5877  
TCL_OK
;

5878 
	}
}

5884 
	$ã°_wÆ_checkpoöt
(

5885 
Clõ¡D©a
 
˛õ¡D©a
,

5886 
T˛_I¡îp
 *
öãΩ
,

5887 
objc
,

5888 
T˛_Obj
 *
CONST
 
objv
[]

5890 *
zDb
 = 0;

5891 
sqlôe3
 *
db
;

5892 
rc
;

5894 if–
objc
!=3 && objc!=2 ){

5895 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB ?NAME?");

5896  
TCL_ERROR
;

5899 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
) ){

5900  
TCL_ERROR
;

5902 if–
objc
==3 ){

5903 
zDb
 = 
	`T˛_GëSåög
(
objv
[2]);

5905 
rc
 = 
	`sqlôe3_wÆ_checkpoöt
(
db
, 
zDb
);

5906 
	`T˛_SëResu…
(
öãΩ
, (*)
	`t1Eº‹Name
(
rc
), 
TCL_STATIC
);

5907  
TCL_OK
;

5908 
	}
}

5928 
	$ã°_wÆ_checkpoöt_v2
(

5929 
Clõ¡D©a
 
˛õ¡D©a
,

5930 
T˛_I¡îp
 *
öãΩ
,

5931 
objc
,

5932 
T˛_Obj
 *
CONST
 
objv
[]

5934 *
zDb
 = 0;

5935 
sqlôe3
 *
db
;

5936 
rc
;

5938 
eMode
;

5939 
nLog
 = -555;

5940 
nCk±
 = -555;

5941 
T˛_Obj
 *
pRë
;

5943 c⁄° * 
aMode
[] = { "passive", "full", "restart", "truncate", 0 };

5944 
	`as£π
–
SQLITE_CHECKPOINT_PASSIVE
==0 );

5945 
	`as£π
–
SQLITE_CHECKPOINT_FULL
==1 );

5946 
	`as£π
–
SQLITE_CHECKPOINT_RESTART
==2 );

5947 
	`as£π
–
SQLITE_CHECKPOINT_TRUNCATE
==3 );

5949 if–
objc
!=3 && objc!=4 ){

5950 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB MODE ?NAME?");

5951  
TCL_ERROR
;

5954 if–
objc
==4 ){

5955 
zDb
 = 
	`T˛_GëSåög
(
objv
[3]);

5957 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
) || (

5958 
TCL_OK
!=
	`T˛_GëI¡FromObj
(0, 
objv
[2], &
eMode
)

5959 && 
TCL_OK
!=
	`T˛_GëIndexFromObj
(
öãΩ
, 
objv
[2], 
aMode
, "mode", 0, &
eMode
)

5961  
TCL_ERROR
;

5964 
rc
 = 
	`sqlôe3_wÆ_checkpoöt_v2
(
db
, 
zDb
, 
eMode
, &
nLog
, &
nCk±
);

5965 if–
rc
!=
SQLITE_OK
 &&Ñc!=
SQLITE_BUSY
 ){

5966 c⁄° *
zEºCode
 = 
	`sqlôe3EºName
(
rc
);

5967 
	`T˛_Re£tResu…
(
öãΩ
);

5968 
	`T˛_AµídResu…
(
öãΩ
, 
zEºCode
, " - ", (*)
	`sqlôe3_îrmsg
(
db
), 0);

5969  
TCL_ERROR
;

5972 
pRë
 = 
	`T˛_NewObj
();

5973 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`T˛_NewI¡Obj
(
rc
==
SQLITE_BUSY
?1:0));

5974 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`T˛_NewI¡Obj
(
nLog
));

5975 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`T˛_NewI¡Obj
(
nCk±
));

5976 
	`T˛_SëObjResu…
(
öãΩ
, 
pRë
);

5978  
TCL_OK
;

5979 
	}
}

5984 
	$ã°_wÆ_autocheckpoöt
(

5985 
Clõ¡D©a
 
˛õ¡D©a
,

5986 
T˛_I¡îp
 *
öãΩ
,

5987 
objc
,

5988 
T˛_Obj
 *
CONST
 
objv
[]

5990 
sqlôe3
 *
db
;

5991 
rc
;

5992 
iVÆ
;

5995 if–
objc
!=3 ){

5996 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB VALUE");

5997  
TCL_ERROR
;

6000 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
)

6001 || 
	`T˛_GëI¡FromObj
(0, 
objv
[2], &
iVÆ
)

6003  
TCL_ERROR
;

6006 
rc
 = 
	`sqlôe3_wÆ_autocheckpoöt
(
db
, 
iVÆ
);

6007 
	`T˛_Re£tResu…
(
öãΩ
);

6008 if–
rc
!=
SQLITE_OK
 ){

6009 c⁄° *
zEºCode
 = 
	`sqlôe3EºName
(
rc
);

6010 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewSåögObj
(
zEºCode
, -1));

6011  
TCL_ERROR
;

6014  
TCL_OK
;

6015 
	}
}

6021 
	sLogCÆlback
 {

6022 
T˛_I¡îp
 *
	mpI¡îp
;

6023 
T˛_Obj
 *
	mpObj
;

6024 } 
	glogˇŒback
 = {0, 0};

6025 
	$xLogˇŒback
(*
unu£d
, 
îr
, *
zMsg
){

6026 
T˛_Obj
 *
pNew
 = 
	`T˛_Du∂iˇãObj
(
logˇŒback
.
pObj
);

6027 
	`T˛_In¸RefCou¡
(
pNew
);

6028 
	`T˛_Li°ObjAµídEÀmít
(

6029 0, 
pNew
, 
	`T˛_NewSåögObj
(
	`sqlôe3EºName
(
îr
), -1)

6031 
	`T˛_Li°ObjAµídEÀmít
(0, 
pNew
, 
	`T˛_NewSåögObj
(
zMsg
, -1));

6032 
	`T˛_EvÆObjEx
(
logˇŒback
.
pI¡îp
, 
pNew
, 
TCL_EVAL_GLOBAL
|
TCL_EVAL_DIRECT
);

6033 
	`T˛_De¸RefCou¡
(
pNew
);

6034 
	}
}

6035 
	$ã°_sqlôe3_log
(

6036 
Clõ¡D©a
 
˛õ¡D©a
,

6037 
T˛_I¡îp
 *
öãΩ
,

6038 
objc
,

6039 
T˛_Obj
 *
CONST
 
objv
[]

6041 if–
objc
>2 ){

6042 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "SCRIPT");

6043  
TCL_ERROR
;

6045 if–
logˇŒback
.
pObj
 ){

6046 
	`T˛_De¸RefCou¡
(
logˇŒback
.
pObj
);

6047 
logˇŒback
.
pObj
 = 0;

6048 
logˇŒback
.
pI¡îp
 = 0;

6049 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_LOG
, (*)0, (*)0);

6051 if–
objc
>1 ){

6052 
logˇŒback
.
pObj
 = 
objv
[1];

6053 
	`T˛_In¸RefCou¡
(
logˇŒback
.
pObj
);

6054 
logˇŒback
.
pI¡îp
 = 
öãΩ
;

6055 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_LOG
, 
xLogˇŒback
, (*)0);

6057  
TCL_OK
;

6058 
	}
}

6066 
	$runAsObjProc
(

6067 * 
˛õ¡D©a
,

6068 
T˛_I¡îp
 *
öãΩ
,

6069 
objc
,

6070 
T˛_Obj
 *
CONST
 
objv
[]

6072 
T˛_CmdInfo
 
cmdInfo
;

6073 if–
objc
<2 ){

6074 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "COMMAND ...");

6075  
TCL_ERROR
;

6077 if–!
	`T˛_GëComm™dInfo
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
cmdInfo
) ){

6078 
	`T˛_AµídResu…
(
öãΩ
, "commandÇot found: ",

6079 
	`T˛_GëSåög
(
objv
[1]), (*)0);

6080  
TCL_ERROR
;

6082 if–
cmdInfo
.
objProc
==0 ){

6083 
	`T˛_AµídResu…
(
öãΩ
, "command hasÇo objProc: ",

6084 
	`T˛_GëSåög
(
objv
[1]), (*)0);

6085  
TCL_ERROR
;

6087  
cmdInfo
.
	`objProc
(cmdInfo.
objClõ¡D©a
, 
öãΩ
, 
objc
-1, 
objv
+1);

6088 
	}
}

6090 #i‚de‡
SQLITE_OMIT_EXPLAIN


6101 
	$¥ötEx∂aöQuîyPœn
(
sqlôe3_°mt
 *
pStmt
){

6102 c⁄° *
zSql
;

6103 *
zEx∂aö
;

6104 
sqlôe3_°mt
 *
pEx∂aö
;

6105 
rc
;

6107 
zSql
 = 
	`sqlôe3_sql
(
pStmt
);

6108 if–
zSql
==0 )  
SQLITE_ERROR
;

6110 
zEx∂aö
 = 
	`sqlôe3_m¥ötf
("EXPLAIN QUERY PLAN %s", 
zSql
);

6111 if–
zEx∂aö
==0 )  
SQLITE_NOMEM
;

6113 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
	`sqlôe3_db_h™dÀ
(
pStmt
), 
zEx∂aö
, -1, &
pEx∂aö
, 0);

6114 
	`sqlôe3_‰ì
(
zEx∂aö
);

6115 if–
rc
!=
SQLITE_OK
 ) Ñc;

6117  
SQLITE_ROW
==
	`sqlôe3_°ï
(
pEx∂aö
) ){

6118 
iSñe˘id
 = 
	`sqlôe3_cﬁumn_öt
(
pEx∂aö
, 0);

6119 
iOrdî
 = 
	`sqlôe3_cﬁumn_öt
(
pEx∂aö
, 1);

6120 
iFrom
 = 
	`sqlôe3_cﬁumn_öt
(
pEx∂aö
, 2);

6121 c⁄° *
zDëaû
 = (c⁄° *)
	`sqlôe3_cﬁumn_ãxt
(
pEx∂aö
, 3);

6123 
	`¥ötf
("%d %d %d %s\n", 
iSñe˘id
, 
iOrdî
, 
iFrom
, 
zDëaû
);

6126  
	`sqlôe3_föÆize
(
pEx∂aö
);

6127 
	}
}

6129 
	$ã°_¥öt_eqp
(

6130 * 
˛õ¡D©a
,

6131 
T˛_I¡îp
 *
öãΩ
,

6132 
objc
,

6133 
T˛_Obj
 *
CONST
 
objv
[]

6135 
rc
;

6136 
sqlôe3_°mt
 *
pStmt
;

6138 if–
objc
!=2 ){

6139 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "STMT");

6140  
TCL_ERROR
;

6142 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

6143 
rc
 = 
	`¥ötEx∂aöQuîyPœn
(
pStmt
);

6148 
	`fÊush
(
°dout
);

6149 
	`T˛_SëResu…
(
öãΩ
, (*)
	`t1Eº‹Name
(
rc
), 0);

6150  
TCL_OK
;

6151 
	}
}

6157 
	$ã°_ã°_c⁄åﬁ
(

6158 * 
˛õ¡D©a
,

6159 
T˛_I¡îp
 *
öãΩ
,

6160 
objc
,

6161 
T˛_Obj
 *
CONST
 
objv
[]

6163 
	sVîb
 {

6164 c⁄° *
zName
;

6165 
i
;

6166 } 
aVîb
[] = {

6167 { "SQLITE_TESTCTRL_LOCALTIME_FAULT", 
SQLITE_TESTCTRL_LOCALTIME_FAULT
 },

6168 { "SQLITE_TESTCTRL_SORTER_MMAP", 
SQLITE_TESTCTRL_SORTER_MMAP
 },

6169 { "SQLITE_TESTCTRL_IMPOSTER", 
SQLITE_TESTCTRL_IMPOSTER
 },

6171 
iVîb
;

6172 
iFœg
;

6173 
rc
;

6175 if–
objc
<2 ){

6176 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "VERB ARGS...");

6177  
TCL_ERROR
;

6180 
rc
 = 
	`T˛_GëIndexFromObjSåu˘
(

6181 
öãΩ
, 
objv
[1], 
aVîb
, ◊Vîb[0]), "VERB", 0, &
iVîb


6183 if–
rc
!=
TCL_OK
 ) Ñc;

6185 
iFœg
 = 
aVîb
[
iVîb
].
i
;

6186  
iFœg
 ){

6187 
SQLITE_TESTCTRL_LOCALTIME_FAULT
: {

6188 
vÆ
;

6189 if–
objc
!=3 ){

6190 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "ONOFF");

6191  
TCL_ERROR
;

6193 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[2], &
vÆ
ËË 
TCL_ERROR
;

6194 
	`sqlôe3_ã°_c⁄åﬁ
(
SQLITE_TESTCTRL_LOCALTIME_FAULT
, 
vÆ
);

6198 
SQLITE_TESTCTRL_SORTER_MMAP
: {

6199 
vÆ
;

6200 
sqlôe3
 *
db
;

6201 if–
objc
!=4 ){

6202 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "DB LIMIT");

6203  
TCL_ERROR
;

6205 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[2]), &
db
ËË 
TCL_ERROR
;

6206 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
vÆ
ËË 
TCL_ERROR
;

6207 
	`sqlôe3_ã°_c⁄åﬁ
(
SQLITE_TESTCTRL_SORTER_MMAP
, 
db
, 
vÆ
);

6211 
SQLITE_TESTCTRL_IMPOSTER
: {

6212 
⁄Off
, 
äum
;

6213 c⁄° *
zDbName
;

6214 
sqlôe3
 *
db
;

6215 if–
objc
!=6 ){

6216 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "DB dbName onOffÅnum");

6217  
TCL_ERROR
;

6219 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[2]), &
db
ËË 
TCL_ERROR
;

6220 
zDbName
 = 
	`T˛_GëSåög
(
objv
[3]);

6221 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[4], &
⁄Off
ËË 
TCL_ERROR
;

6222 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[5], &
äum
ËË 
TCL_ERROR
;

6223 
	`sqlôe3_ã°_c⁄åﬁ
(
SQLITE_TESTCTRL_IMPOSTER
, 
db
, 
zDbName
, 
⁄Off
, 
äum
);

6228 
	`T˛_Re£tResu…
(
öãΩ
);

6229  
TCL_OK
;

6230 
	}
}

6232 #i‡
SQLITE_OS_UNIX


6233 
	~<sys/time.h
>

6234 
	~<sys/ªsour˚.h
>

6236 
	$ã°_gërußge
(

6237 * 
˛õ¡D©a
,

6238 
T˛_I¡îp
 *
öãΩ
,

6239 
objc
,

6240 
T˛_Obj
 *
CONST
 
objv
[]

6242 
buf
[1024];

6243 
rußge
 
r
;

6244 
	`mem£t
(&
r
, 0, (r));

6245 
	`gërußge
(
RUSAGE_SELF
, &
r
);

6247 
	`sqlôe3_¢¥ötf
((
buf
), buf,

6249 ()
r
.
ru_utime
.
tv_£c
, (Ï.ru_utime.
tv_u£c
,

6250 ()
r
.
ru_°ime
.
tv_£c
, (Ï.ru_°ime.
tv_u£c
,

6251 ()
r
.
ru_möÊt
, (Ï.
ru_majÊt


6253 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewSåögObj
(
buf
, -1));

6254  
TCL_OK
;

6255 
	}
}

6258 #i‡
SQLITE_OS_WIN


6263 
	swö32FûeLockî
 {

6264 *
	mevName
;

6265 
HANDLE
 
	mh
;

6266 
	mdñay1
;

6267 
	mdñay2
;

6268 
	mok
;

6269 
	mîr
;

6274 #i‡
SQLITE_OS_WIN


6275 
	~<¥o˚ss.h
>

6279 
	$wö32_fûe_lockî
(*
pAµD©a
){

6280 
wö32FûeLockî
 *
p
 = (wö32FûeLockî*)
pAµD©a
;

6281 if–
p
->
evName
 ){

6282 
HANDLE
 
ev
 = 
	`O≥nEvít
(
EVENT_MODIFY_STATE
, 
FALSE
, 
p
->
evName
);

6283 i‡–
ev
 ){

6284 
	`SëEvít
(
ev
);

6285 
	`Clo£H™dÀ
(
ev
);

6288 if–
p
->
dñay1
 ) 
	`SÀï
(p->delay1);

6289 if–
	`LockFûe
(
p
->
h
, 0, 0, 100000000, 0) ){

6290 
	`SÀï
(
p
->
dñay2
);

6291 
	`U∆ockFûe
(
p
->
h
, 0, 0, 100000000, 0);

6292 
p
->
ok
 = 1;

6294 
p
->
îr
 = 1;

6296 
	`Clo£H™dÀ
(
p
->
h
);

6297 
p
->
h
 = 0;

6298 
p
->
dñay1
 = 0;

6299 
p
->
dñay2
 = 0;

6300 
	}
}

6303 #i‡
SQLITE_OS_WIN


6310 
	$wö32_fûe_lock
(

6311 * 
˛õ¡D©a
,

6312 
T˛_I¡îp
 *
öãΩ
,

6313 
objc
,

6314 
T˛_Obj
 *
CONST
 
objv
[]

6316 
wö32FûeLockî
 
x
 = { "win32_file_lock", 0, 0, 0, 0, 0 };

6317 c⁄° *
zFûíame
;

6318 
zBuf
[200];

6319 
ªåy
 = 0;

6320 
HANDLE
 
ev
;

6321 
DWORD
 
wResu…
;

6323 if–
objc
!=4 && objc!=1 ){

6324 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "FILENAME DELAY1 DELAY2");

6325  
TCL_ERROR
;

6327 if–
objc
==1 ){

6328 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%d %d %d %d %d",

6329 
x
.
ok
, x.
îr
, x.
dñay1
, x.
dñay2
, x.
h
);

6330 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, (*)0);

6331  
TCL_OK
;

6333  
x
.
h
 && 
ªåy
<30 ){

6334 
ªåy
++;

6335 
	`SÀï
(100);

6337 if–
x
.
h
 ){

6338 
	`T˛_AµídResu…
(
öãΩ
, "busy", (*)0);

6339  
TCL_ERROR
;

6341 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
x
.
dñay1
ËË 
TCL_ERROR
;

6342 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
x
.
dñay2
ËË 
TCL_ERROR
;

6343 
zFûíame
 = 
	`T˛_GëSåög
(
objv
[1]);

6344 
x
.
h
 = 
	`Cª©eFûe
(
zFûíame
, 
GENERIC_READ
|
GENERIC_WRITE
,

6345 
FILE_SHARE_READ
|
FILE_SHARE_WRITE
, 0, 
OPEN_ALWAYS
,

6346 
FILE_ATTRIBUTE_NORMAL
, 0);

6347 if–!
x
.
h
 ){

6348 
	`T˛_AµídResu…
(
öãΩ
, "ˇ¬Ÿ o≥¿fûe: ", 
zFûíame
, (*)0);

6349  
TCL_ERROR
;

6351 
ev
 = 
	`Cª©eEvít
(
NULL
, 
TRUE
, 
FALSE
, 
x
.
evName
);

6352 i‡–!
ev
 ){

6353 
	`T˛_AµídResu…
(
öãΩ
, "ˇ¬Ÿ cª©êevít: ", 
x
.
evName
, (*)0);

6354  
TCL_ERROR
;

6356 
	`_begöthªad
(
wö32_fûe_lockî
, 0, (*)&
x
);

6357 
	`SÀï
(0);

6358 i‡–(
wResu…
 = 
	`WaôF‹SögÀObje˘
(
ev
, 10000))!=
WAIT_OBJECT_0
 ){

6359 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "0x%x", 
wResu…
);

6360 
	`T˛_AµídResu…
(
öãΩ
, "waô faûed: ", 
zBuf
, (*)0);

6361 
	`Clo£H™dÀ
(
ev
);

6362  
TCL_ERROR
;

6364 
	`Clo£H™dÀ
(
ev
);

6365  
TCL_OK
;

6366 
	}
}

6374 
	$wö32_exi°s_∑th
(

6375 *
˛õ¡D©a
,

6376 
T˛_I¡îp
 *
öãΩ
,

6377 
objc
,

6378 
T˛_Obj
 *
CONST
 
objv
[]

6380 if–
objc
!=2 ){

6381 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "PATH");

6382  
TCL_ERROR
;

6384 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewBoﬁónObj
(

6385 
	`GëFûeAâribuãsW
–
	`T˛_GëUnicode
(
objv
[1]))!=
INVALID_FILE_ATTRIBUTES
 ));

6386  
TCL_OK
;

6387 
	}
}

6396 
	$wö32_föd_fûe
(

6397 *
˛õ¡D©a
,

6398 
T˛_I¡îp
 *
öãΩ
,

6399 
objc
,

6400 
T˛_Obj
 *
CONST
 
objv
[]

6402 
HANDLE
 
hFödFûe
 = 
INVALID_HANDLE_VALUE
;

6403 
WIN32_FIND_DATAW
 
födD©a
;

6404 
T˛_Obj
 *
li°Obj
;

6405 
DWORD
 
œ°Eºno
;

6406 if–
objc
!=2 ){

6407 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "PATTERN");

6408  
TCL_ERROR
;

6410 
hFödFûe
 = 
	`FödFú°FûeW
(
	`T˛_GëUnicode
(
objv
[1]), &
födD©a
);

6411 if–
hFödFûe
==
INVALID_HANDLE_VALUE
 ){

6412 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewWideI¡Obj
(
	`GëLa°Eº‹
()));

6413  
TCL_ERROR
;

6415 
li°Obj
 = 
	`T˛_NewObj
();

6416 
	`T˛_In¸RefCou¡
(
li°Obj
);

6418 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
li°Obj
, 
	`T˛_NewUnicodeObj
(

6419 
födD©a
.
cFûeName
, -1));

6420 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
li°Obj
, 
	`T˛_NewWideI¡Obj
(

6421 
födD©a
.
dwFûeAâribuãs
));

6422 }  
	`FödNextFûeW
(
hFödFûe
, &
födD©a
) );

6423 
œ°Eºno
 = 
	`GëLa°Eº‹
();

6424 if–
œ°Eºno
!=
NO_ERROR
 &&Üa°Eºno!=
ERROR_NO_MORE_FILES
 ){

6425 
	`FödClo£
(
hFödFûe
);

6426 
	`T˛_De¸RefCou¡
(
li°Obj
);

6427 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewWideI¡Obj
(
	`GëLa°Eº‹
()));

6428  
TCL_ERROR
;

6430 
	`FödClo£
(
hFödFûe
);

6431 
	`T˛_SëObjResu…
(
öãΩ
, 
li°Obj
);

6432  
TCL_OK
;

6433 
	}
}

6441 
	$wö32_dñëe_fûe
(

6442 *
˛õ¡D©a
,

6443 
T˛_I¡îp
 *
öãΩ
,

6444 
objc
,

6445 
T˛_Obj
 *
CONST
 
objv
[]

6447 if–
objc
!=2 ){

6448 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "FILENAME");

6449  
TCL_ERROR
;

6451 if–!
	`DñëeFûeW
(
	`T˛_GëUnicode
(
objv
[1])) ){

6452 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewWideI¡Obj
(
	`GëLa°Eº‹
()));

6453  
TCL_ERROR
;

6455 
	`T˛_Re£tResu…
(
öãΩ
);

6456  
TCL_OK
;

6457 
	}
}

6465 
	$wö32_mkdú
(

6466 *
˛õ¡D©a
,

6467 
T˛_I¡îp
 *
öãΩ
,

6468 
objc
,

6469 
T˛_Obj
 *
CONST
 
objv
[]

6471 if–
objc
!=2 ){

6472 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DIRECTORY");

6473  
TCL_ERROR
;

6475 if–!
	`Cª©eDúe˘‹yW
(
	`T˛_GëUnicode
(
objv
[1]), 
NULL
) ){

6476 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewWideI¡Obj
(
	`GëLa°Eº‹
()));

6477  
TCL_ERROR
;

6479 
	`T˛_Re£tResu…
(
öãΩ
);

6480  
TCL_OK
;

6481 
	}
}

6489 
	$wö32_rmdú
(

6490 *
˛õ¡D©a
,

6491 
T˛_I¡îp
 *
öãΩ
,

6492 
objc
,

6493 
T˛_Obj
 *
CONST
 
objv
[]

6495 if–
objc
!=2 ){

6496 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DIRECTORY");

6497  
TCL_ERROR
;

6499 if–!
	`RemoveDúe˘‹yW
(
	`T˛_GëUnicode
(
objv
[1])) ){

6500 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewWideI¡Obj
(
	`GëLa°Eº‹
()));

6501  
TCL_ERROR
;

6503 
	`T˛_Re£tResu…
(
öãΩ
);

6504  
TCL_OK
;

6505 
	}
}

6516 
	$›timiz©i⁄_c⁄åﬁ
(

6517 * 
˛õ¡D©a
,

6518 
T˛_I¡îp
 *
öãΩ
,

6519 
objc
,

6520 
T˛_Obj
 *
CONST
 
objv
[]

6522 
i
;

6523 
sqlôe3
 *
db
;

6524 c⁄° *
zO±
;

6525 
⁄off
;

6526 
mask
 = 0;

6528 c⁄° *
zO±Name
;

6529 
mask
;

6530 } 
aO±
[] = {

6531 { "Æl", 
SQLITE_AŒO±s
 },

6533 { "quîy-Ê©ã√r", 
SQLITE_QuîyFœâíî
 },

6534 { "cﬁumn-ˇche", 
SQLITE_CﬁumnCache
 },

6535 { "groupby-‹dî", 
SQLITE_GroupByOrdî
 },

6536 { "Á˘‹-c⁄°™ts", 
SQLITE_Fa˘‹OutC⁄°
 },

6537 { "di°ö˘-›t", 
SQLITE_Di°ö˘O±
 },

6538 { "covî-idx-sˇn", 
SQLITE_CovîIdxSˇn
 },

6539 { "‹dî-by-idx-joö", 
SQLITE_OrdîByIdxJoö
 },

6540 { "å™sôive", 
SQLITE_Tønsôive
 },

6541 { "subquîy-c‹outöe", 
SQLITE_SubqC‹outöe
 },

6542 { "omô-no›-joö", 
SQLITE_OmôNo›Joö
 },

6543 { "°©3", 
SQLITE_Sèt34
 },

6544 { "°©4", 
SQLITE_Sèt34
 },

6547 if–
objc
!=4 ){

6548 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB OPT BOOLEAN");

6549  
TCL_ERROR
;

6551 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

6552 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[3], &
⁄off
ËË 
TCL_ERROR
;

6553 
zO±
 = 
	`T˛_GëSåög
(
objv
[2]);

6554 
i
=0; i<(
aO±
)/(aOpt[0]); i++){

6555 if–
	`°rcmp
(
zO±
, 
aO±
[
i
].
zO±Name
)==0 ){

6556 
mask
 = 
aO±
[
i
].mask;

6560 if–
⁄off
 ) 
mask
 = ~mask;

6561 if–
i
>=(
aO±
)/(aOpt[0]) ){

6562 
	`T˛_AµídResu…
(
öãΩ
, "unknown optimization - should be one of:",

6564 
i
=0; i<(
aO±
)/(aOpt[0]); i++){

6565 
	`T˛_AµídResu…
(
öãΩ
, " ", 
aO±
[
i
].
zO±Name
, (*)0);

6567  
TCL_ERROR
;

6569 
	`sqlôe3_ã°_c⁄åﬁ
(
SQLITE_TESTCTRL_OPTIMIZATIONS
, 
db
, 
mask
);

6570  
TCL_OK
;

6571 
	}
}

6573 
sqlôe3_≠i_routöes
 
	tsqlôe3_≠i_routöes
;

6579 
	$t˛LﬂdSèticExãnsi⁄Cmd
(

6580 * 
˛õ¡D©a
,

6581 
T˛_I¡îp
 *
öãΩ
,

6582 
objc
,

6583 
T˛_Obj
 *
CONST
 
objv
[]

6585 
	`sqlôe3_am©ch_öô
(
sqlôe3
*,**,c⁄° 
sqlôe3_≠i_routöes
*);

6586 
	`sqlôe3_˛osuª_öô
(
sqlôe3
*,**,c⁄° 
sqlôe3_≠i_routöes
*);

6587 
	`sqlôe3_evÆ_öô
(
sqlôe3
*,**,c⁄° 
sqlôe3_≠i_routöes
*);

6588 
	`sqlôe3_fûeio_öô
(
sqlôe3
*,**,c⁄° 
sqlôe3_≠i_routöes
*);

6589 
	`sqlôe3_fuzzî_öô
(
sqlôe3
*,**,c⁄° 
sqlôe3_≠i_routöes
*);

6590 
	`sqlôe3_õì_öô
(
sqlôe3
*,**,c⁄° 
sqlôe3_≠i_routöes
*);

6591 
	`sqlôe3_√xtch¨_öô
(
sqlôe3
*,**,c⁄° 
sqlôe3_≠i_routöes
*);

6592 
	`sqlôe3_≥r˚¡ûe_öô
(
sqlôe3
*,**,c⁄° 
sqlôe3_≠i_routöes
*);

6593 
	`sqlôe3_ªgexp_öô
(
sqlôe3
*,**,c⁄° 
sqlôe3_≠i_routöes
*);

6594 
	`sqlôe3_£rõs_öô
(
sqlôe3
*,**,c⁄° 
sqlôe3_≠i_routöes
*);

6595 
	`sqlôe3_•ñlfix_öô
(
sqlôe3
*,**,c⁄° 
sqlôe3_≠i_routöes
*);

6596 
	`sqlôe3_tŸy≥_öô
(
sqlôe3
*,**,c⁄° 
sqlôe3_≠i_routöes
*);

6597 
	`sqlôe3_whﬁíumbî_öô
(
sqlôe3
*,**,c⁄° 
sqlôe3_≠i_routöes
*);

6599 c⁄° *
zExtName
;

6600 (*
pInô
)(
sqlôe3
*,**,c⁄° 
sqlôe3_≠i_routöes
*);

6601 } 
aExãnsi⁄
[] = {

6602 { "am©ch", 
sqlôe3_am©ch_öô
 },

6603 { "˛osuª", 
sqlôe3_˛osuª_öô
 },

6604 { "evÆ", 
sqlôe3_evÆ_öô
 },

6605 { "fûeio", 
sqlôe3_fûeio_öô
 },

6606 { "fuzzî", 
sqlôe3_fuzzî_öô
 },

6607 { "õì754", 
sqlôe3_õì_öô
 },

6608 { "√xtch¨", 
sqlôe3_√xtch¨_öô
 },

6609 { "≥r˚¡ûe", 
sqlôe3_≥r˚¡ûe_öô
 },

6610 { "ªgexp", 
sqlôe3_ªgexp_öô
 },

6611 { "£rõs", 
sqlôe3_£rõs_öô
 },

6612 { "•ñlfix", 
sqlôe3_•ñlfix_öô
 },

6613 { "tŸy≥", 
sqlôe3_tŸy≥_öô
 },

6614 { "whﬁíumbî", 
sqlôe3_whﬁíumbî_öô
 },

6616 
sqlôe3
 *
db
;

6617 c⁄° *
zName
;

6618 
i
, 
j
, 
rc
;

6619 *
zEºMsg
 = 0;

6620 if–
objc
<3 ){

6621 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB NAME ...");

6622  
TCL_ERROR
;

6624 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

6625 
j
=2; j<
objc
; j++){

6626 
zName
 = 
	`T˛_GëSåög
(
objv
[
j
]);

6627 
i
=0; i<
	`AºaySize
(
aExãnsi⁄
); i++){

6628 if–
	`°rcmp
(
zName
, 
aExãnsi⁄
[
i
].
zExtName
)==0 ) ;

6630 if–
i
>=
	`AºaySize
(
aExãnsi⁄
) ){

6631 
	`T˛_AµídResu…
(
öãΩ
, "nÿsuchÉxãnsi⁄: ", 
zName
, (*)0);

6632  
TCL_ERROR
;

6634 if–
aExãnsi⁄
[
i
].
pInô
 ){

6635 
rc
 = 
aExãnsi⁄
[
i
].
	`pInô
(
db
, &
zEºMsg
, 0);

6637 
rc
 = 
SQLITE_OK
;

6639 if–
rc
!=
SQLITE_OK
 || 
zEºMsg
 ){

6640 
	`T˛_AµídResu…
(
öãΩ
, "öôüliz©i⁄ o‡", 
zName
, " faûed: ", 
zEºMsg
,

6642 
	`sqlôe3_‰ì
(
zEºMsg
);

6643  
TCL_ERROR
;

6646  
TCL_OK
;

6647 
	}
}

6653 
	$s‹ãr_ã°_Ákehóp
(

6654 * 
˛õ¡D©a
,

6655 
T˛_I¡îp
 *
öãΩ
,

6656 
objc
,

6657 
T˛_Obj
 *
CONST
 
objv
[]

6659 
bArg
;

6660 if–
objc
!=2 ){

6661 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "BOOL");

6662  
TCL_ERROR
;

6665 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[1], &
bArg
) ){

6666  
TCL_ERROR
;

6669 if–
bArg
 ){

6670 if–
sqlôe3GlobÆC⁄fig
.
pHóp
==0 ){

6671 
sqlôe3GlobÆC⁄fig
.
pHóp
 = 
	`SQLITE_INT_TO_PTR
(-1);

6674 if–
sqlôe3GlobÆC⁄fig
.
pHóp
==
	`SQLITE_INT_TO_PTR
(-1) ){

6675 
sqlôe3GlobÆC⁄fig
.
pHóp
 = 0;

6679 
	`T˛_Re£tResu…
(
öãΩ
);

6680  
TCL_OK
;

6681 
	}
}

6693 
	$s‹ãr_ã°_s‹t4_hñ≥r
(

6694 * 
˛õ¡D©a
,

6695 
T˛_I¡îp
 *
öãΩ
,

6696 
objc
,

6697 
T˛_Obj
 *
CONST
 
objv
[]

6699 c⁄° *
zSql1
;

6700 c⁄° *
zSql2
;

6701 
nSãp
;

6702 
iSãp
;

6703 
iCksum1
 = 0;

6704 
iCksum2
 = 0;

6705 
rc
;

6706 
iB
;

6707 
sqlôe3
 *
db
;

6708 
sqlôe3_°mt
 *
pStmt
;

6710 if–
objc
!=5 ){

6711 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB SQL1 NSTEP SQL2");

6712  
TCL_ERROR
;

6715 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

6716 
zSql1
 = 
	`T˛_GëSåög
(
objv
[2]);

6717 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
nSãp
ËË 
TCL_ERROR
;

6718 
zSql2
 = 
	`T˛_GëSåög
(
objv
[4]);

6720 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
db
, 
zSql1
, -1, &
pStmt
, 0);

6721 if–
rc
!=
SQLITE_OK
 ) 
sql_îr‹
;

6723 
iB
 = 
	`sqlôe3_cﬁumn_cou¡
(
pStmt
)-1;

6724 
iSãp
=0; iSãp<
nSãp
 && 
SQLITE_ROW
==
	`sqlôe3_°ï
(
pStmt
); iStep++){

6725 
a
 = 
	`sqlôe3_cﬁumn_öt
(
pStmt
, 0);

6726 if–
a
!=
	`sqlôe3_cﬁumn_öt
(
pStmt
, 
iB
) ){

6727 
	`T˛_AµídResu…
(
öãΩ
, "dataÉrror: (a!=b)", 0);

6728  
TCL_ERROR
;

6731 
iCksum1
 +(iCksum1 << 3Ë+ ()
a
;

6733 
rc
 = 
	`sqlôe3_föÆize
(
pStmt
);

6734 if–
rc
!=
SQLITE_OK
 ) 
sql_îr‹
;

6736 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
db
, 
zSql2
, -1, &
pStmt
, 0);

6737 if–
rc
!=
SQLITE_OK
 ) 
sql_îr‹
;

6738 
iSãp
=0; 
SQLITE_ROW
==
	`sqlôe3_°ï
(
pStmt
); iStep++){

6739 
a
 = 
	`sqlôe3_cﬁumn_öt
(
pStmt
, 0);

6740 
iCksum2
 +(iCksum2 << 3Ë+ ()
a
;

6742 
rc
 = 
	`sqlôe3_föÆize
(
pStmt
);

6743 if–
rc
!=
SQLITE_OK
 ) 
sql_îr‹
;

6745 if–
iCksum1
!=
iCksum2
 ){

6746 
	`T˛_AµídResu…
(
öãΩ
, "checksum mismatch", 0);

6747  
TCL_ERROR
;

6750  
TCL_OK
;

6751 
sql_îr‹
:

6752 
	`T˛_AµídResu…
(
öãΩ
, "sq»îr‹: ", 
	`sqlôe3_îrmsg
(
db
), 0);

6753  
TCL_ERROR
;

6754 
	}
}

6757 #ifde‡
SQLITE_USER_AUTHENTICATION


6758 
	~"sqlôe3u£øuth.h
"

6762 
	$ã°_u£r_authítiˇã
(

6763 
Clõ¡D©a
 
˛õ¡D©a
,

6764 
T˛_I¡îp
 *
öãΩ
,

6765 
objc
,

6766 
T˛_Obj
 *
CONST
 
objv
[]

6768 *
zU£r
 = 0;

6769 *
zPasswd
 = 0;

6770 
nPasswd
 = 0;

6771 
sqlôe3
 *
db
;

6772 
rc
;

6774 if–
objc
!=4 ){

6775 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB USERNAME PASSWORD");

6776  
TCL_ERROR
;

6778 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
) ){

6779  
TCL_ERROR
;

6781 
zU£r
 = 
	`T˛_GëSåög
(
objv
[2]);

6782 
zPasswd
 = 
	`T˛_GëSåögFromObj
(
objv
[3], &
nPasswd
);

6783 
rc
 = 
	`sqlôe3_u£r_authítiˇã
(
db
, 
zU£r
, 
zPasswd
, 
nPasswd
);

6784 
	`T˛_SëResu…
(
öãΩ
, (*)
	`t1Eº‹Name
(
rc
), 
TCL_STATIC
);

6785  
TCL_OK
;

6786 
	}
}

6789 #ifde‡
SQLITE_USER_AUTHENTICATION


6793 
	$ã°_u£r_add
(

6794 
Clõ¡D©a
 
˛õ¡D©a
,

6795 
T˛_I¡îp
 *
öãΩ
,

6796 
objc
,

6797 
T˛_Obj
 *
CONST
 
objv
[]

6799 *
zU£r
 = 0;

6800 *
zPasswd
 = 0;

6801 
nPasswd
 = 0;

6802 
isAdmö
 = 0;

6803 
sqlôe3
 *
db
;

6804 
rc
;

6806 if–
objc
!=5 ){

6807 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB USERNAME PASSWORD ISADMIN");

6808  
TCL_ERROR
;

6810 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
) ){

6811  
TCL_ERROR
;

6813 
zU£r
 = 
	`T˛_GëSåög
(
objv
[2]);

6814 
zPasswd
 = 
	`T˛_GëSåögFromObj
(
objv
[3], &
nPasswd
);

6815 
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[4], &
isAdmö
);

6816 
rc
 = 
	`sqlôe3_u£r_add
(
db
, 
zU£r
, 
zPasswd
, 
nPasswd
, 
isAdmö
);

6817 
	`T˛_SëResu…
(
öãΩ
, (*)
	`t1Eº‹Name
(
rc
), 
TCL_STATIC
);

6818  
TCL_OK
;

6819 
	}
}

6822 #ifde‡
SQLITE_USER_AUTHENTICATION


6826 
	$ã°_u£r_ch™ge
(

6827 
Clõ¡D©a
 
˛õ¡D©a
,

6828 
T˛_I¡îp
 *
öãΩ
,

6829 
objc
,

6830 
T˛_Obj
 *
CONST
 
objv
[]

6832 *
zU£r
 = 0;

6833 *
zPasswd
 = 0;

6834 
nPasswd
 = 0;

6835 
isAdmö
 = 0;

6836 
sqlôe3
 *
db
;

6837 
rc
;

6839 if–
objc
!=5 ){

6840 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB USERNAME PASSWORD ISADMIN");

6841  
TCL_ERROR
;

6843 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
) ){

6844  
TCL_ERROR
;

6846 
zU£r
 = 
	`T˛_GëSåög
(
objv
[2]);

6847 
zPasswd
 = 
	`T˛_GëSåögFromObj
(
objv
[3], &
nPasswd
);

6848 
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[4], &
isAdmö
);

6849 
rc
 = 
	`sqlôe3_u£r_ch™ge
(
db
, 
zU£r
, 
zPasswd
, 
nPasswd
, 
isAdmö
);

6850 
	`T˛_SëResu…
(
öãΩ
, (*)
	`t1Eº‹Name
(
rc
), 
TCL_STATIC
);

6851  
TCL_OK
;

6852 
	}
}

6855 #ifde‡
SQLITE_USER_AUTHENTICATION


6859 
	$ã°_u£r_dñëe
(

6860 
Clõ¡D©a
 
˛õ¡D©a
,

6861 
T˛_I¡îp
 *
öãΩ
,

6862 
objc
,

6863 
T˛_Obj
 *
CONST
 
objv
[]

6865 *
zU£r
 = 0;

6866 
sqlôe3
 *
db
;

6867 
rc
;

6869 if–
objc
!=3 ){

6870 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB USERNAME");

6871  
TCL_ERROR
;

6873 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
) ){

6874  
TCL_ERROR
;

6876 
zU£r
 = 
	`T˛_GëSåög
(
objv
[2]);

6877 
rc
 = 
	`sqlôe3_u£r_dñëe
(
db
, 
zU£r
);

6878 
	`T˛_SëResu…
(
öãΩ
, (*)
	`t1Eº‹Name
(
rc
), 
TCL_STATIC
);

6879  
TCL_OK
;

6880 
	}
}

6896 
	$ã°_bad_behavi‹
(

6897 
Clõ¡D©a
 
˛õ¡D©a
,

6898 
T˛_I¡îp
 *
öãΩ
,

6899 
objc
,

6900 
T˛_Obj
 *
CONST
 
objv
[]

6902 
iTy≥
;

6903 
xyz
;

6904 
i
 = *(*)
˛õ¡D©a
;

6905 
j
;

6906 
w
[10];

6907 *
a
;

6908 if–
objc
!=2 ){

6909 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "TYPE");

6910  
TCL_ERROR
;

6912 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
iTy≥
ËË 
TCL_ERROR
;

6913  
iTy≥
 ){

6915 
xyz
 = 0x7fffff00 - 
i
;

6916 
xyz
 += 0x100;

6917 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
xyz
));

6921 
w
[1] = 5;

6922 if–
w
[
i
]>0 ) w[1]++;

6923 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
w
[1]));

6927 
a
 = 
	`mÆloc
( ()*10 );

6928 
j
=0; j<10; j++Ë
a
[j] = j;

6929 
	`‰ì
(
a
);

6930 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
a
[
i
]));

6934 
	`T˛_P™ic
("DeliberateÖanic");

6938  
TCL_OK
;

6939 
	}
}

6946 
	$ã°_ªgi°î_db°©_vèb
(

6947 *
˛õ¡D©a
,

6948 
T˛_I¡îp
 *
öãΩ
,

6949 
objc
,

6950 
T˛_Obj
 *
CONST
 
objv
[]

6952 #ifde‡
SQLITE_OMIT_VIRTUALTABLE


6953 
	`T˛_AµídResu…
(
öãΩ
, "dbstatÇotávailable because of "

6955  
TCL_ERROR
;

6957 
	sSqlôeDb
 { 
sqlôe3
 *
db
; };

6958 *
zDb
;

6959 
T˛_CmdInfo
 
cmdInfo
;

6961 if–
objc
!=2 ){

6962 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB");

6963  
TCL_ERROR
;

6966 
zDb
 = 
	`T˛_GëSåög
(
objv
[1]);

6967 if–
	`T˛_GëComm™dInfo
(
öãΩ
, 
zDb
, &
cmdInfo
) ){

6968 
sqlôe3
* 
db
 = ((
SqlôeDb
*)
cmdInfo
.
objClõ¡D©a
)->db;

6969 
	`sqlôe3Db°©Regi°î
(
db
);

6971  
TCL_OK
;

6973 
	}
}

6980 
	$ã°_sqlôe3_db_c⁄fig
(

6981 *
˛õ¡D©a
,

6982 
T˛_I¡îp
 *
öãΩ
,

6983 
objc
,

6984 
T˛_Obj
 *
CONST
 
objv
[]

6987 c⁄° *
zName
;

6988 
eVÆ
;

6989 } 
aSëtög
[] = {

6990 { "FKEY", 
SQLITE_DBCONFIG_ENABLE_FKEY
 },

6991 { "TRIGGER", 
SQLITE_DBCONFIG_ENABLE_TRIGGER
 },

6992 { "FTS3_TOKENIZER", 
SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER
 },

6993 { "LOAD_EXTENSION", 
SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION
 },

6995 
i
;

6996 
v
;

6997 c⁄° *
zSëtög
;

6998 
sqlôe3
 *
db
;

7000 if–
objc
!=4 ){

7001 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB SETTING VALUE");

7002  
TCL_ERROR
;

7004 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

7005 
zSëtög
 = 
	`T˛_GëSåög
(
objv
[2]);

7006 if–
	`sqlôe3_°rglob
("SQLITE_*", 
zSëtög
)==0 ) zSetting += 7;

7007 if–
	`sqlôe3_°rglob
("DBCONFIG_*", 
zSëtög
)==0 ) zSetting += 9;

7008 if–
	`sqlôe3_°rglob
("ENABLE_*", 
zSëtög
)==0 ) zSetting += 7;

7009 
i
=0; i<
	`AºaySize
(
aSëtög
); i++){

7010 if–
	`°rcmp
(
zSëtög
, 
aSëtög
[
i
].
zName
)==0 ) ;

7012 if–
i
>=
	`AºaySize
(
aSëtög
) ){

7013 
	`T˛_SëObjResu…
(
öãΩ
,

7014 
	`T˛_NewSåögObj
("unknown sqlite3_db_config setting", -1));

7015  
TCL_ERROR
;

7017 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
v
ËË 
TCL_ERROR
;

7018 
	`sqlôe3_db_c⁄fig
(
db
, 
aSëtög
[
i
].
eVÆ
, 
v
, &v);

7019 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
v
));

7020  
TCL_OK
;

7021 
	}
}

7026 
	$Sqlôëe°1_Inô
(
T˛_I¡îp
 *
öãΩ
){

7027 
sqlôe3_£¨ch_cou¡
;

7028 
sqlôe3_found_cou¡
;

7029 
sqlôe3_öãºu±_cou¡
;

7030 
sqlôe3_›í_fûe_cou¡
;

7031 
sqlôe3_s‹t_cou¡
;

7032 
sqlôe3_cuºít_time
;

7033 #i‡
SQLITE_OS_UNIX
 && 
	`deföed
(
__APPLE__
Ë&& 
SQLITE_ENABLE_LOCKING_STYLE


7034 
sqlôe3_ho°id_num
;

7036 
sqlôe3_max_blobsize
;

7037 
	`sqlôe3BåìSh¨edCacheRï‹t
(*,

7038 
T˛_I¡îp
*,,
T˛_Obj
*
CONST
*);

7039 
iZîo
 = 0;

7041 *
zName
;

7042 
T˛_CmdProc
 *
xProc
;

7043 } 
aCmd
[] = {

7044 { "db_íãr", (
T˛_CmdProc
*)
db_íãr
 },

7045 { "db_Àave", (
T˛_CmdProc
*)
db_Àave
 },

7046 { "sqlôe3_m¥ötf_öt", (
T˛_CmdProc
*)
sqlôe3_m¥ötf_öt
 },

7047 { "sqlôe3_m¥ötf_öt64", (
T˛_CmdProc
*)
sqlôe3_m¥ötf_öt64
 },

7048 { "sqlôe3_m¥ötf_l⁄g", (
T˛_CmdProc
*)
sqlôe3_m¥ötf_l⁄g
 },

7049 { "sqlôe3_m¥ötf_°r", (
T˛_CmdProc
*)
sqlôe3_m¥ötf_°r
 },

7050 { "sqlôe3_¢¥ötf_°r", (
T˛_CmdProc
*)
sqlôe3_¢¥ötf_°r
 },

7051 { "sqlôe3_m¥ötf_°r⁄ly", (
T˛_CmdProc
*)
sqlôe3_m¥ötf_°r⁄ly
},

7052 { "sqlôe3_m¥ötf_doubÀ", (
T˛_CmdProc
*)
sqlôe3_m¥ötf_doubÀ
 },

7053 { "sqlôe3_m¥ötf_sˇÀd", (
T˛_CmdProc
*)
sqlôe3_m¥ötf_sˇÀd
 },

7054 { "sqlôe3_m¥ötf_hexdoubÀ", (
T˛_CmdProc
*)
sqlôe3_m¥ötf_hexdoubÀ
},

7055 { "sqlôe3_m¥ötf_z_ã°", (
T˛_CmdProc
*)
ã°_m¥ötf_z
 },

7056 { "sqlôe3_m¥ötf_n_ã°", (
T˛_CmdProc
*)
ã°_m¥ötf_n
 },

7057 { "sqlôe3_¢¥ötf_öt", (
T˛_CmdProc
*)
ã°_¢¥ötf_öt
 },

7058 { "sqlôe3_œ°_ö£π_rowid", (
T˛_CmdProc
*)
ã°_œ°_rowid
 },

7059 { "sqlôe3_exec_¥ötf", (
T˛_CmdProc
*)
ã°_exec_¥ötf
 },

7060 { "sqlôe3_exec_hex", (
T˛_CmdProc
*)
ã°_exec_hex
 },

7061 { "sqlôe3_exec", (
T˛_CmdProc
*)
ã°_exec
 },

7062 { "sqlôe3_exec_ƒ", (
T˛_CmdProc
*)
ã°_exec_ƒ
 },

7063 #i‚de‡
SQLITE_OMIT_GET_TABLE


7064 { "sqlôe3_gë_èbÀ_¥ötf", (
T˛_CmdProc
*)
ã°_gë_èbÀ_¥ötf
 },

7066 { "sqlôe3_˛o£", (
T˛_CmdProc
*)
sqlôe_ã°_˛o£
 },

7067 { "sqlôe3_˛o£_v2", (
T˛_CmdProc
*)
sqlôe_ã°_˛o£_v2
 },

7068 { "sqlôe3_¸óã_fun˘i⁄", (
T˛_CmdProc
*)
ã°_¸óã_fun˘i⁄
 },

7069 { "sqlôe3_¸óã_aggªg©e", (
T˛_CmdProc
*)
ã°_¸óã_aggªg©e
 },

7070 { "sqlôe_ªgi°î_ã°_fun˘i⁄", (
T˛_CmdProc
*)
ã°_ªgi°î_func
 },

7071 { "sqlôe_ab‹t", (
T˛_CmdProc
*)
sqlôe_ab‹t
 },

7072 { "sqlôe_böd", (
T˛_CmdProc
*)
ã°_böd
 },

7073 { "bªakpoöt", (
T˛_CmdProc
*)
ã°_bªakpoöt
 },

7074 { "sqlôe3_key", (
T˛_CmdProc
*)
ã°_key
 },

7075 { "sqlôe3_ªkey", (
T˛_CmdProc
*)
ã°_ªkey
 },

7076 { "sqlôe_£t_magic", (
T˛_CmdProc
*)
sqlôe_£t_magic
 },

7077 { "sqlôe3_öãºu±", (
T˛_CmdProc
*)
ã°_öãºu±
 },

7078 { "sqlôe_dñëe_fun˘i⁄", (
T˛_CmdProc
*)
dñëe_fun˘i⁄
 },

7079 { "sqlôe_dñëe_cﬁœti⁄", (
T˛_CmdProc
*)
dñëe_cﬁœti⁄
 },

7080 { "sqlôe3_gë_autocommô", (
T˛_CmdProc
*)
gë_autocommô
 },

7081 { "sqlôe3_°ack_u£d", (
T˛_CmdProc
*)
ã°_°ack_u£d
 },

7082 { "sqlôe3_busy_timeout", (
T˛_CmdProc
*)
ã°_busy_timeout
 },

7083 { "¥ötf", (
T˛_CmdProc
*)
ã°_¥ötf
 },

7084 { "sqlôe3IoTø˚", (
T˛_CmdProc
*)
ã°_io_åa˚
 },

7085 { "˛™g_ßnôize_addªss", (
T˛_CmdProc
*)
˛™g_ßnôize_addªss
 },

7088 *
zName
;

7089 
T˛_ObjCmdProc
 *
xProc
;

7090 *
˛õ¡D©a
;

7091 } 
aObjCmd
[] = {

7092 { "sqlôe3_db_c⁄fig", 
ã°_sqlôe3_db_c⁄fig
, 0 },

7093 { "bad_behavi‹", 
ã°_bad_behavi‹
, (*)&
iZîo
 },

7094 { "ªgi°î_db°©_vèb", 
ã°_ªgi°î_db°©_vèb
 },

7095 { "sqlôe3_c⁄√˘i⁄_poöãr", 
gë_sqlôe_poöãr
, 0 },

7096 { "sqlôe3_böd_öt", 
ã°_böd_öt
, 0 },

7097 { "sqlôe3_böd_zîoblob", 
ã°_böd_zîoblob
, 0 },

7098 { "sqlôe3_böd_zîoblob64", 
ã°_böd_zîoblob64
, 0 },

7099 { "sqlôe3_böd_öt64", 
ã°_böd_öt64
, 0 },

7100 { "sqlôe3_böd_doubÀ", 
ã°_böd_doubÀ
, 0 },

7101 { "sqlôe3_böd_nuŒ", 
ã°_böd_nuŒ
 ,0 },

7102 { "sqlôe3_böd_ãxt", 
ã°_böd_ãxt
 ,0 },

7103 { "sqlôe3_böd_ãxt16", 
ã°_böd_ãxt16
 ,0 },

7104 { "sqlôe3_böd_blob", 
ã°_böd_blob
 ,0 },

7105 { "sqlôe3_böd_∑ømëî_cou¡", 
ã°_böd_∑ømëî_cou¡
, 0},

7106 { "sqlôe3_böd_∑ømëî_«me", 
ã°_böd_∑ømëî_«me
, 0},

7107 { "sqlôe3_böd_∑ømëî_ödex", 
ã°_böd_∑ømëî_ödex
, 0},

7108 { "sqlôe3_˛ór_bödögs", 
ã°_˛ór_bödögs
, 0},

7109 { "sqlôe3_¶ìp", 
ã°_¶ìp
, 0},

7110 { "sqlôe3_îrcode", 
ã°_îrcode
 ,0 },

7111 { "sqlôe3_exãnded_îrcode", 
ã°_ex_îrcode
 ,0 },

7112 { "sqlôe3_îrmsg", 
ã°_îrmsg
 ,0 },

7113 { "sqlôe3_îrmsg16", 
ã°_îrmsg16
 ,0 },

7114 { "sqlôe3_›í", 
ã°_›í
 ,0 },

7115 { "sqlôe3_›í16", 
ã°_›í16
 ,0 },

7116 { "sqlôe3_›í_v2", 
ã°_›í_v2
 ,0 },

7117 { "sqlôe3_com∂ëe16", 
ã°_com∂ëe16
 ,0 },

7119 { "sqlôe3_¥ï¨e", 
ã°_¥ï¨e
 ,0 },

7120 { "sqlôe3_¥ï¨e16", 
ã°_¥ï¨e16
 ,0 },

7121 { "sqlôe3_¥ï¨e_v2", 
ã°_¥ï¨e_v2
 ,0 },

7122 { "sqlôe3_¥ï¨e_tkt3134", 
ã°_¥ï¨e_tkt3134
, 0},

7123 { "sqlôe3_¥ï¨e16_v2", 
ã°_¥ï¨e16_v2
 ,0 },

7124 { "sqlôe3_föÆize", 
ã°_föÆize
 ,0 },

7125 { "sqlôe3_°mt_°©us", 
ã°_°mt_°©us
 ,0 },

7126 { "sqlôe3_ª£t", 
ã°_ª£t
 ,0 },

7127 { "sqlôe3_expúed", 
ã°_expúed
 ,0 },

7128 { "sqlôe3_å™s„r_bödögs", 
ã°_å™s„r_böd
 ,0 },

7129 { "sqlôe3_ch™ges", 
ã°_ch™ges
 ,0 },

7130 { "sqlôe3_°ï", 
ã°_°ï
 ,0 },

7131 { "sqlôe3_sql", 
ã°_sql
 ,0 },

7132 { "sqlôe3_√xt_°mt", 
ã°_√xt_°mt
 ,0 },

7133 { "sqlôe3_°mt_ªad⁄ly", 
ã°_°mt_ªad⁄ly
 ,0 },

7134 { "sqlôe3_°mt_busy", 
ã°_°mt_busy
 ,0 },

7135 { "u£s_°mt_jou∫Æ", 
u£s_°mt_jou∫Æ
 ,0 },

7137 { "sqlôe3_ªÀa£_mem‹y", 
ã°_ªÀa£_mem‹y
, 0},

7138 { "sqlôe3_db_ªÀa£_mem‹y", 
ã°_db_ªÀa£_mem‹y
, 0},

7139 { "sqlôe3_db_ˇcheÊush", 
ã°_db_ˇcheÊush
, 0},

7140 { "sqlôe3_sy°em_î∫o", 
ã°_sy°em_î∫o
, 0},

7141 { "sqlôe3_db_fûíame", 
ã°_db_fûíame
, 0},

7142 { "sqlôe3_db_ªad⁄ly", 
ã°_db_ªad⁄ly
, 0},

7143 { "sqlôe3_so·_hóp_limô", 
ã°_so·_hóp_limô
, 0},

7144 { "sqlôe3_thªad_˛ónup", 
ã°_thªad_˛ónup
, 0},

7145 { "sqlôe3_∑gî_ªfcou¡s", 
ã°_∑gî_ªfcou¡s
, 0},

7147 { "sqlôe3_lﬂd_exãnsi⁄", 
ã°_lﬂd_exãnsi⁄
, 0},

7148 { "sqlôe3_íabÀ_lﬂd_exãnsi⁄", 
ã°_íabÀ_lﬂd
, 0},

7149 { "sqlôe3_exãnded_ªsu…_codes", 
ã°_exãnded_ªsu…_codes
, 0},

7150 { "sqlôe3_limô", 
ã°_limô
, 0},

7152 { "ßve_¥ng_°©e", 
ßve_¥ng_°©e
, 0 },

7153 { "ª°‹e_¥ng_°©e", 
ª°‹e_¥ng_°©e
, 0 },

7154 { "ª£t_¥ng_°©e", 
ª£t_¥ng_°©e
, 0 },

7155 { "d©aba£_√vî_c‹ru±", 
d©aba£_√vî_c‹ru±
, 0},

7156 { "d©aba£_may_be_c‹ru±", 
d©aba£_may_be_c‹ru±
, 0},

7157 { "›timiz©i⁄_c⁄åﬁ", 
›timiz©i⁄_c⁄åﬁ
,0},

7158 #i‡
SQLITE_OS_WIN


7159 { "lock_wö32_fûe", 
wö32_fûe_lock
, 0 },

7160 { "exi°s_wö32_∑th", 
wö32_exi°s_∑th
, 0 },

7161 { "föd_wö32_fûe", 
wö32_föd_fûe
, 0 },

7162 { "dñëe_wö32_fûe", 
wö32_dñëe_fûe
, 0 },

7163 { "make_wö32_dú", 
wö32_mkdú
, 0 },

7164 { "ªmove_wö32_dú", 
wö32_rmdú
, 0 },

7166 { "t˛_obj¥oc", 
runAsObjProc
, 0 },

7169 { "sqlôe3_cﬁumn_cou¡", 
ã°_cﬁumn_cou¡
 ,0 },

7170 { "sqlôe3_d©a_cou¡", 
ã°_d©a_cou¡
 ,0 },

7171 { "sqlôe3_cﬁumn_ty≥", 
ã°_cﬁumn_ty≥
 ,0 },

7172 { "sqlôe3_cﬁumn_blob", 
ã°_cﬁumn_blob
 ,0 },

7173 { "sqlôe3_cﬁumn_doubÀ", 
ã°_cﬁumn_doubÀ
 ,0 },

7174 { "sqlôe3_cﬁumn_öt64", 
ã°_cﬁumn_öt64
 ,0 },

7175 { "sqlôe3_cﬁumn_ãxt", 
ã°_°mt_utf8
, (*)
sqlôe3_cﬁumn_ãxt
 },

7176 { "sqlôe3_cﬁumn_«me", 
ã°_°mt_utf8
, (*)
sqlôe3_cﬁumn_«me
 },

7177 { "sqlôe3_cﬁumn_öt", 
ã°_°mt_öt
, (*)
sqlôe3_cﬁumn_öt
 },

7178 { "sqlôe3_cﬁumn_byãs", 
ã°_°mt_öt
, (*)
sqlôe3_cﬁumn_byãs
},

7179 #i‚de‡
SQLITE_OMIT_DECLTYPE


7180 { "sqlôe3_cﬁumn_de˛ty≥",
ã°_°mt_utf8
,(*)
sqlôe3_cﬁumn_de˛ty≥
},

7182 #ifde‡
SQLITE_ENABLE_COLUMN_METADATA


7183 { "sqlôe3_cﬁumn_d©aba£_«me",
ã°_°mt_utf8
,(*)
sqlôe3_cﬁumn_d©aba£_«me
},

7184 { "sqlôe3_cﬁumn_èbÀ_«me",
ã°_°mt_utf8
,(*)
sqlôe3_cﬁumn_èbÀ_«me
},

7185 { "sqlôe3_cﬁumn_‹igö_«me",
ã°_°mt_utf8
,(*)
sqlôe3_cﬁumn_‹igö_«me
},

7188 #i‚de‡
SQLITE_OMIT_UTF16


7189 { "sqlôe3_cﬁumn_byãs16", 
ã°_°mt_öt
, (*)
sqlôe3_cﬁumn_byãs16
 },

7190 { "sqlôe3_cﬁumn_ãxt16", 
ã°_°mt_utf16
, (*)
sqlôe3_cﬁumn_ãxt16
},

7191 { "sqlôe3_cﬁumn_«me16", 
ã°_°mt_utf16
, (*)
sqlôe3_cﬁumn_«me16
},

7192 { "add_Æignmít_ã°_cﬁœti⁄s", 
add_Æignmít_ã°_cﬁœti⁄s
, 0 },

7193 #i‚de‡
SQLITE_OMIT_DECLTYPE


7194 { "sqlôe3_cﬁumn_de˛ty≥16",
ã°_°mt_utf16
,(*)
sqlôe3_cﬁumn_de˛ty≥16
},

7196 #ifde‡
SQLITE_ENABLE_COLUMN_METADATA


7198 
ã°_°mt_utf16
, (*)
sqlôe3_cﬁumn_d©aba£_«me16
},

7199 {"sqlôe3_cﬁumn_èbÀ_«me16", 
ã°_°mt_utf16
, (*)
sqlôe3_cﬁumn_èbÀ_«me16
},

7200 {"sqlôe3_cﬁumn_‹igö_«me16", 
ã°_°mt_utf16
, (*)
sqlôe3_cﬁumn_‹igö_«me16
},

7203 { "sqlôe3_¸óã_cﬁœti⁄_v2", 
ã°_¸óã_cﬁœti⁄_v2
, 0 },

7204 { "sqlôe3_globÆ_ªcovî", 
ã°_globÆ_ªcovî
, 0 },

7205 { "w‹kög_64bô_öt", 
w‹kög_64bô_öt
, 0 },

7206 { "vfs_u∆ök_ã°", 
vfs_u∆ök_ã°
, 0 },

7207 { "vfs_öôÁû_ã°", 
vfs_öôÁû_ã°
, 0 },

7208 { "vfs_uƒegi°î_Æl", 
vfs_uƒegi°î_Æl
, 0 },

7209 { "vfs_ªªgi°î_Æl", 
vfs_ªªgi°î_Æl
, 0 },

7210 { "fûe_c⁄åﬁ_ã°", 
fûe_c⁄åﬁ_ã°
, 0 },

7211 { "fûe_c⁄åﬁ_œ°î∫o_ã°", 
fûe_c⁄åﬁ_œ°î∫o_ã°
, 0 },

7212 { "fûe_c⁄åﬁ_lock¥oxy_ã°", 
fûe_c⁄åﬁ_lock¥oxy_ã°
, 0 },

7213 { "fûe_c⁄åﬁ_chunksize_ã°", 
fûe_c⁄åﬁ_chunksize_ã°
, 0 },

7214 { "fûe_c⁄åﬁ_sizehöt_ã°", 
fûe_c⁄åﬁ_sizehöt_ã°
, 0 },

7215 #i‡
SQLITE_OS_WIN


7216 { "fûe_c⁄åﬁ_wö32_av_ªåy", 
fûe_c⁄åﬁ_wö32_av_ªåy
, 0 },

7217 { "fûe_c⁄åﬁ_wö32_£t_h™dÀ", 
fûe_c⁄åﬁ_wö32_£t_h™dÀ
, 0 },

7219 { "fûe_c⁄åﬁ_≥rsi°_wÆ", 
fûe_c⁄åﬁ_≥rsi°_wÆ
, 0 },

7220 { "fûe_c⁄åﬁ_powîß„_ovîwrôe",
fûe_c⁄åﬁ_powîß„_ovîwrôe
,0},

7221 { "fûe_c⁄åﬁ_vf¢ame", 
fûe_c⁄åﬁ_vf¢ame
, 0 },

7222 { "fûe_c⁄åﬁ_ãmpfûíame", 
fûe_c⁄åﬁ_ãmpfûíame
, 0 },

7223 { "sqlôe3_vfs_li°", 
vfs_li°
, 0 },

7224 { "sqlôe3_¸óã_fun˘i⁄_v2", 
ã°_¸óã_fun˘i⁄_v2
, 0 },

7227 #i‚de‡
SQLITE_OMIT_UTF16


7228 { "add_ã°_cﬁœã", 
ã°_cﬁœã
, 0 },

7229 { "add_ã°_cﬁœã_√eded", 
ã°_cﬁœã_√eded
, 0 },

7230 { "add_ã°_fun˘i⁄", 
ã°_fun˘i⁄
, 0 },

7231 { "add_ã°_utf16bö_cﬁœã", 
ã°_utf16bö_cﬁœã
, 0 },

7233 { "sqlôe3_ã°_îr°r", 
ã°_îr°r
, 0 },

7234 { "t˛_v¨übÀ_ty≥", 
t˛_v¨übÀ_ty≥
, 0 },

7235 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


7236 { "sqlôe3_íabÀ_sh¨ed_ˇche", 
ã°_íabÀ_sh¨ed
, 0 },

7237 { "sqlôe3_sh¨ed_ˇche_ªp‹t", 
sqlôe3BåìSh¨edCacheRï‹t
, 0},

7239 { "sqlôe3_libvîsi⁄_numbî", 
ã°_libvîsi⁄_numbî
, 0 },

7240 { "sqlôe3_èbÀ_cﬁumn_mëad©a", 
ã°_èbÀ_cﬁumn_mëad©a
, 0 },

7241 #i‚de‡
SQLITE_OMIT_INCRBLOB


7242 { "sqlôe3_blob_ª›í", 
ã°_blob_ª›í
, 0 },

7244 { "pˇche_°©s", 
ã°_pˇche_°©s
, 0 },

7245 #ifde‡
SQLITE_ENABLE_UNLOCK_NOTIFY


7246 { "sqlôe3_u∆ock_nŸify", 
ã°_u∆ock_nŸify
, 0 },

7248 { "sqlôe3_wÆ_checkpoöt", 
ã°_wÆ_checkpoöt
, 0 },

7249 { "sqlôe3_wÆ_checkpoöt_v2",
ã°_wÆ_checkpoöt_v2
, 0 },

7250 { "sqlôe3_wÆ_autocheckpoöt",
ã°_wÆ_autocheckpoöt
, 0 },

7251 { "ã°_sqlôe3_log", 
ã°_sqlôe3_log
, 0 },

7252 #i‚de‡
SQLITE_OMIT_EXPLAIN


7253 { "¥öt_ex∂aö_quîy_∂™", 
ã°_¥öt_eqp
, 0 },

7255 { "sqlôe3_ã°_c⁄åﬁ", 
ã°_ã°_c⁄åﬁ
 },

7256 #i‡
SQLITE_OS_UNIX


7257 { "gërußge", 
ã°_gërußge
 },

7259 { "lﬂd_°©ic_exãnsi⁄", 
t˛LﬂdSèticExãnsi⁄Cmd
 },

7260 { "s‹ãr_ã°_Ákehóp", 
s‹ãr_ã°_Ákehóp
 },

7261 { "s‹ãr_ã°_s‹t4_hñ≥r", 
s‹ãr_ã°_s‹t4_hñ≥r
 },

7262 #ifde‡
SQLITE_USER_AUTHENTICATION


7263 { "sqlôe3_u£r_authítiˇã", 
ã°_u£r_authítiˇã
, 0 },

7264 { "sqlôe3_u£r_add", 
ã°_u£r_add
, 0 },

7265 { "sqlôe3_u£r_ch™ge", 
ã°_u£r_ch™ge
, 0 },

7266 { "sqlôe3_u£r_dñëe", 
ã°_u£r_dñëe
, 0 },

7268 #ifde‡
SQLITE_ENABLE_STMT_SCANSTATUS


7269 { "sqlôe3_°mt_sˇn°©us", 
ã°_°mt_sˇn°©us
, 0 },

7270 { "sqlôe3_°mt_sˇn°©us_ª£t", 
ã°_°mt_sˇn°©us_ª£t
, 0 },

7272 #ifde‡
SQLITE_ENABLE_SQLLOG


7273 { "sqlôe3_c⁄fig_sqŒog", 
ã°_c⁄fig_sqŒog
, 0 },

7275 { "vfs_cuºít_time_öt64", 
vfsCuºítTimeI¡64
, 0 },

7276 #ifde‡
SQLITE_ENABLE_SNAPSHOT


7277 { "sqlôe3_¢≠shŸ_gë", 
ã°_¢≠shŸ_gë
, 0 },

7278 { "sqlôe3_¢≠shŸ_›í", 
ã°_¢≠shŸ_›í
, 0 },

7279 { "sqlôe3_¢≠shŸ_‰ì", 
ã°_¢≠shŸ_‰ì
, 0 },

7280 { "sqlôe3_¢≠shŸ_cmp", 
ã°_¢≠shŸ_cmp
, 0 },

7283 
bômask_size
 = (
Bômask
)*8;

7284 
l⁄gdoubÀ_size
 = (
LONGDOUBLE_TYPE
);

7285 
i
;

7286 
sqlôe3_sync_cou¡
, 
sqlôe3_fuŒsync_cou¡
;

7287 
sqlôe3_›íãmp_cou¡
;

7288 
sqlôe3_like_cou¡
;

7289 
sqlôe3_x„r›t_cou¡
;

7290 
sqlôe3_∑gî_ªaddb_cou¡
;

7291 
sqlôe3_∑gî_wrôedb_cou¡
;

7292 
sqlôe3_∑gî_wrôej_cou¡
;

7293 #i‡
SQLITE_OS_WIN


7294 
LONG
 vﬁ©ûê
sqlôe3_os_ty≥
;

7296 #ifde‡
SQLITE_DEBUG


7297 
sqlôe3WhîeTø˚
;

7298 
sqlôe3OSTø˚
;

7299 
sqlôe3WÆTø˚
;

7301 #ifde‡
SQLITE_TEST


7302 #ifde‡
SQLITE_ENABLE_FTS3


7303 
sqlôe3_·s3_íabÀ_∑ª¡he£s
;

7307 
i
=0; i<(
aCmd
)/(aCmd[0]); i++){

7308 
	`T˛_Cª©eComm™d
(
öãΩ
, 
aCmd
[
i
].
zName
,áCmd[i].
xProc
, 0, 0);

7310 
i
=0; i<(
aObjCmd
)/(aObjCmd[0]); i++){

7311 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
aObjCmd
[
i
].
zName
,

7312 
aObjCmd
[
i
].
xProc
,áObjCmd[i].
˛õ¡D©a
, 0);

7314 
	`T˛_LökV¨
(
öãΩ
, "sqlite_search_count",

7315 (*)&
sqlôe3_£¨ch_cou¡
, 
TCL_LINK_INT
);

7316 
	`T˛_LökV¨
(
öãΩ
, "sqlite_found_count",

7317 (*)&
sqlôe3_found_cou¡
, 
TCL_LINK_INT
);

7318 
	`T˛_LökV¨
(
öãΩ
, "sqlite_sort_count",

7319 (*)&
sqlôe3_s‹t_cou¡
, 
TCL_LINK_INT
);

7320 
	`T˛_LökV¨
(
öãΩ
, "sqlite3_max_blobsize",

7321 (*)&
sqlôe3_max_blobsize
, 
TCL_LINK_INT
);

7322 
	`T˛_LökV¨
(
öãΩ
, "sqlite_like_count",

7323 (*)&
sqlôe3_like_cou¡
, 
TCL_LINK_INT
);

7324 
	`T˛_LökV¨
(
öãΩ
, "sqlite_interrupt_count",

7325 (*)&
sqlôe3_öãºu±_cou¡
, 
TCL_LINK_INT
);

7326 
	`T˛_LökV¨
(
öãΩ
, "sqlite_open_file_count",

7327 (*)&
sqlôe3_›í_fûe_cou¡
, 
TCL_LINK_INT
);

7328 
	`T˛_LökV¨
(
öãΩ
, "sqlite_current_time",

7329 (*)&
sqlôe3_cuºít_time
, 
TCL_LINK_INT
);

7330 #i‡
SQLITE_OS_UNIX
 && 
	`deföed
(
__APPLE__
Ë&& 
SQLITE_ENABLE_LOCKING_STYLE


7331 
	`T˛_LökV¨
(
öãΩ
, "sqlite_hostid_num",

7332 (*)&
sqlôe3_ho°id_num
, 
TCL_LINK_INT
);

7334 
	`T˛_LökV¨
(
öãΩ
, "sqlite3_xferopt_count",

7335 (*)&
sqlôe3_x„r›t_cou¡
, 
TCL_LINK_INT
);

7336 
	`T˛_LökV¨
(
öãΩ
, "sqlite3_pager_readdb_count",

7337 (*)&
sqlôe3_∑gî_ªaddb_cou¡
, 
TCL_LINK_INT
);

7338 
	`T˛_LökV¨
(
öãΩ
, "sqlite3_pager_writedb_count",

7339 (*)&
sqlôe3_∑gî_wrôedb_cou¡
, 
TCL_LINK_INT
);

7340 
	`T˛_LökV¨
(
öãΩ
, "sqlite3_pager_writej_count",

7341 (*)&
sqlôe3_∑gî_wrôej_cou¡
, 
TCL_LINK_INT
);

7342 #i‚de‡
SQLITE_OMIT_UTF16


7343 
	`T˛_LökV¨
(
öãΩ
, "unaligned_string_counter",

7344 (*)&
u«lig√d_°rög_cou¡î
, 
TCL_LINK_INT
);

7346 #i‚de‡
SQLITE_OMIT_UTF16


7347 
	`T˛_LökV¨
(
öãΩ
, "sqlite_last_needed_collation",

7348 (*)&
pzNìdedCﬁœti⁄
, 
TCL_LINK_STRING
|
TCL_LINK_READ_ONLY
);

7350 #i‡
SQLITE_OS_WIN


7351 
	`T˛_LökV¨
(
öãΩ
, "sqlite_os_type",

7352 (*)&
sqlôe3_os_ty≥
, 
TCL_LINK_LONG
);

7354 #ifde‡
SQLITE_TEST


7356 c⁄° *
quîy_∂™
 = "*** OBSOLETE VARIABLE ***";

7357 
	`T˛_LökV¨
(
öãΩ
, "sqlite_query_plan",

7358 (*)&
quîy_∂™
, 
TCL_LINK_STRING
|
TCL_LINK_READ_ONLY
);

7361 #ifde‡
SQLITE_DEBUG


7362 
	`T˛_LökV¨
(
öãΩ
, "sqlite_where_trace",

7363 (*)&
sqlôe3WhîeTø˚
, 
TCL_LINK_INT
);

7364 
	`T˛_LökV¨
(
öãΩ
, "sqlite_os_trace",

7365 (*)&
sqlôe3OSTø˚
, 
TCL_LINK_INT
);

7366 #i‚de‡
SQLITE_OMIT_WAL


7367 
	`T˛_LökV¨
(
öãΩ
, "sqlite_wal_trace",

7368 (*)&
sqlôe3WÆTø˚
, 
TCL_LINK_INT
);

7371 #i‚de‡
SQLITE_OMIT_DISKIO


7372 
	`T˛_LökV¨
(
öãΩ
, "sqlite_opentemp_count",

7373 (*)&
sqlôe3_›íãmp_cou¡
, 
TCL_LINK_INT
);

7375 
	`T˛_LökV¨
(
öãΩ
, "sqlite_static_bind_value",

7376 (*)&
sqlôe_°©ic_böd_vÆue
, 
TCL_LINK_STRING
);

7377 
	`T˛_LökV¨
(
öãΩ
, "sqlite_static_bind_nbyte",

7378 (*)&
sqlôe_°©ic_böd_nbyã
, 
TCL_LINK_INT
);

7379 
	`T˛_LökV¨
(
öãΩ
, "sqlite_temp_directory",

7380 (*)&
sqlôe3_ãmp_dúe˘‹y
, 
TCL_LINK_STRING
);

7381 
	`T˛_LökV¨
(
öãΩ
, "sqlite_data_directory",

7382 (*)&
sqlôe3_d©a_dúe˘‹y
, 
TCL_LINK_STRING
);

7383 
	`T˛_LökV¨
(
öãΩ
, "bitmask_size",

7384 (*)&
bômask_size
, 
TCL_LINK_INT
|
TCL_LINK_READ_ONLY
);

7385 
	`T˛_LökV¨
(
öãΩ
, "longdouble_size",

7386 (*)&
l⁄gdoubÀ_size
, 
TCL_LINK_INT
|
TCL_LINK_READ_ONLY
);

7387 
	`T˛_LökV¨
(
öãΩ
, "sqlite_sync_count",

7388 (*)&
sqlôe3_sync_cou¡
, 
TCL_LINK_INT
);

7389 
	`T˛_LökV¨
(
öãΩ
, "sqlite_fullsync_count",

7390 (*)&
sqlôe3_fuŒsync_cou¡
, 
TCL_LINK_INT
);

7391 #i‡
	`deföed
(
SQLITE_ENABLE_FTS3
Ë&& deföed(
SQLITE_TEST
)

7392 
	`T˛_LökV¨
(
öãΩ
, "sqlite_fts3_enable_parentheses",

7393 (*)&
sqlôe3_·s3_íabÀ_∑ª¡he£s
, 
TCL_LINK_INT
);

7395  
TCL_OK
;

7396 
	}
}

	@test2.c

16 
	~"sqlôeI¡.h
"

17 
	~"t˛.h
"

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

20 
	~<˘y≥.h
>

22 c⁄° *
sqlôe3EºName
();

27 
	gã°_∑gesize
 = 1024;

32 
	$∑gî_ã°_ªöôî
(
DbPage
 *
pNŸU£d
){

34 
	}
}

41 
	$∑gî_›í
(

42 *
NŸU£d
,

43 
T˛_I¡îp
 *
öãΩ
,

44 
¨gc
,

45 c⁄° **
¨gv


47 
u32
 
∑geSize
;

48 
Pagî
 *
pPagî
;

49 
nPage
;

50 
rc
;

51 
zBuf
[100];

52 if–
¨gc
!=3 ){

53 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

55  
TCL_ERROR
;

57 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
nPage
ËË 
TCL_ERROR
;

58 
rc
 = 
	`sqlôe3PagîO≥n
(
	`sqlôe3_vfs_föd
(0), &
pPagî
, 
¨gv
[1], 0, 0,

59 
SQLITE_OPEN_READWRITE
 | 
SQLITE_OPEN_CREATE
 | 
SQLITE_OPEN_MAIN_DB
,

60 
∑gî_ã°_ªöôî
);

61 if–
rc
!=
SQLITE_OK
 ){

62 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

63  
TCL_ERROR
;

65 
	`sqlôe3PagîSëCachesize
(
pPagî
, 
nPage
);

66 
∑geSize
 = 
ã°_∑gesize
;

67 
	`sqlôe3PagîSëPagesize
(
pPagî
, &
∑geSize
, -1);

68 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf,"%p",
pPagî
);

69 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

70  
TCL_OK
;

71 
	}
}

78 
	$∑gî_˛o£
(

79 *
NŸU£d
,

80 
T˛_I¡îp
 *
öãΩ
,

81 
¨gc
,

82 c⁄° **
¨gv


84 
Pagî
 *
pPagî
;

85 
rc
;

86 if–
¨gc
!=2 ){

87 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

89  
TCL_ERROR
;

91 
pPagî
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

92 
rc
 = 
	`sqlôe3PagîClo£
(
pPagî
);

93 if–
rc
!=
SQLITE_OK
 ){

94 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

95  
TCL_ERROR
;

97  
TCL_OK
;

98 
	}
}

105 
	$∑gî_rﬁlback
(

106 *
NŸU£d
,

107 
T˛_I¡îp
 *
öãΩ
,

108 
¨gc
,

109 c⁄° **
¨gv


111 
Pagî
 *
pPagî
;

112 
rc
;

113 if–
¨gc
!=2 ){

114 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

116  
TCL_ERROR
;

118 
pPagî
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

119 
rc
 = 
	`sqlôe3PagîRﬁlback
(
pPagî
);

120 if–
rc
!=
SQLITE_OK
 ){

121 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

122  
TCL_ERROR
;

124  
TCL_OK
;

125 
	}
}

132 
	$∑gî_commô
(

133 *
NŸU£d
,

134 
T˛_I¡îp
 *
öãΩ
,

135 
¨gc
,

136 c⁄° **
¨gv


138 
Pagî
 *
pPagî
;

139 
rc
;

140 if–
¨gc
!=2 ){

141 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

143  
TCL_ERROR
;

145 
pPagî
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

146 
rc
 = 
	`sqlôe3PagîCommôPha£O√
(
pPagî
, 0, 0);

147 if–
rc
!=
SQLITE_OK
 ){

148 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

149  
TCL_ERROR
;

151 
rc
 = 
	`sqlôe3PagîCommôPha£Two
(
pPagî
);

152 if–
rc
!=
SQLITE_OK
 ){

153 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

154  
TCL_ERROR
;

156  
TCL_OK
;

157 
	}
}

164 
	$∑gî_°mt_begö
(

165 *
NŸU£d
,

166 
T˛_I¡îp
 *
öãΩ
,

167 
¨gc
,

168 c⁄° **
¨gv


170 
Pagî
 *
pPagî
;

171 
rc
;

172 if–
¨gc
!=2 ){

173 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

175  
TCL_ERROR
;

177 
pPagî
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

178 
rc
 = 
	`sqlôe3PagîO≥nSavïoöt
(
pPagî
, 1);

179 if–
rc
!=
SQLITE_OK
 ){

180 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

181  
TCL_ERROR
;

183  
TCL_OK
;

184 
	}
}

191 
	$∑gî_°mt_rﬁlback
(

192 *
NŸU£d
,

193 
T˛_I¡îp
 *
öãΩ
,

194 
¨gc
,

195 c⁄° **
¨gv


197 
Pagî
 *
pPagî
;

198 
rc
;

199 if–
¨gc
!=2 ){

200 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

202  
TCL_ERROR
;

204 
pPagî
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

205 
rc
 = 
	`sqlôe3PagîSavïoöt
(
pPagî
, 
SAVEPOINT_ROLLBACK
, 0);

206 
	`sqlôe3PagîSavïoöt
(
pPagî
, 
SAVEPOINT_RELEASE
, 0);

207 if–
rc
!=
SQLITE_OK
 ){

208 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

209  
TCL_ERROR
;

211  
TCL_OK
;

212 
	}
}

219 
	$∑gî_°mt_commô
(

220 *
NŸU£d
,

221 
T˛_I¡îp
 *
öãΩ
,

222 
¨gc
,

223 c⁄° **
¨gv


225 
Pagî
 *
pPagî
;

226 
rc
;

227 if–
¨gc
!=2 ){

228 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

230  
TCL_ERROR
;

232 
pPagî
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

233 
rc
 = 
	`sqlôe3PagîSavïoöt
(
pPagî
, 
SAVEPOINT_RELEASE
, 0);

234 if–
rc
!=
SQLITE_OK
 ){

235 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

236  
TCL_ERROR
;

238  
TCL_OK
;

239 
	}
}

246 
	$∑gî_°©s
(

247 *
NŸU£d
,

248 
T˛_I¡îp
 *
öãΩ
,

249 
¨gc
,

250 c⁄° **
¨gv


252 
Pagî
 *
pPagî
;

253 
i
, *
a
;

254 if–
¨gc
!=2 ){

255 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

257  
TCL_ERROR
;

259 
pPagî
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

260 
a
 = 
	`sqlôe3PagîSèts
(
pPagî
);

261 
i
=0; i<9; i++){

262 *
zName
[] = {

266 
zBuf
[100];

267 
	`T˛_AµídEÀmít
(
öãΩ
, 
zName
[
i
]);

268 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf,"%d",
a
[
i
]);

269 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

271  
TCL_OK
;

272 
	}
}

279 
	$∑gî_∑gecou¡
(

280 *
NŸU£d
,

281 
T˛_I¡îp
 *
öãΩ
,

282 
¨gc
,

283 c⁄° **
¨gv


285 
Pagî
 *
pPagî
;

286 
zBuf
[100];

287 
nPage
;

288 if–
¨gc
!=2 ){

289 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

291  
TCL_ERROR
;

293 
pPagî
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

294 
	`sqlôe3PagîPagecou¡
(
pPagî
, &
nPage
);

295 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%d", 
nPage
);

296 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

297  
TCL_OK
;

298 
	}
}

305 
	$∑ge_gë
(

306 *
NŸU£d
,

307 
T˛_I¡îp
 *
öãΩ
,

308 
¨gc
,

309 c⁄° **
¨gv


311 
Pagî
 *
pPagî
;

312 
zBuf
[100];

313 
DbPage
 *
pPage
 = 0;

314 
pgno
;

315 
rc
;

316 if–
¨gc
!=3 ){

317 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

319  
TCL_ERROR
;

321 
pPagî
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

322 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
pgno
ËË 
TCL_ERROR
;

323 
rc
 = 
	`sqlôe3PagîSh¨edLock
(
pPagî
);

324 if–
rc
==
SQLITE_OK
 ){

325 
rc
 = 
	`sqlôe3PagîGë
(
pPagî
, 
pgno
, &
pPage
, 0);

327 if–
rc
!=
SQLITE_OK
 ){

328 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

329  
TCL_ERROR
;

331 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf,"%p",
pPage
);

332 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

333  
TCL_OK
;

334 
	}
}

342 
	$∑ge_lookup
(

343 *
NŸU£d
,

344 
T˛_I¡îp
 *
öãΩ
,

345 
¨gc
,

346 c⁄° **
¨gv


348 
Pagî
 *
pPagî
;

349 
zBuf
[100];

350 
DbPage
 *
pPage
;

351 
pgno
;

352 if–
¨gc
!=3 ){

353 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

355  
TCL_ERROR
;

357 
pPagî
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

358 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
pgno
ËË 
TCL_ERROR
;

359 
pPage
 = 
	`sqlôe3PagîLookup
(
pPagî
, 
pgno
);

360 if–
pPage
 ){

361 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf,"%p",
pPage
);

362 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

364  
TCL_OK
;

365 
	}
}

370 
	$∑gî_åunˇã
(

371 *
NŸU£d
,

372 
T˛_I¡îp
 *
öãΩ
,

373 
¨gc
,

374 c⁄° **
¨gv


376 
Pagî
 *
pPagî
;

377 
pgno
;

378 if–
¨gc
!=3 ){

379 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

381  
TCL_ERROR
;

383 
pPagî
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

384 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
pgno
ËË 
TCL_ERROR
;

385 
	`sqlôe3PagîTrunˇãImage
(
pPagî
, 
pgno
);

386  
TCL_OK
;

387 
	}
}

395 
	$∑ge_uƒef
(

396 *
NŸU£d
,

397 
T˛_I¡îp
 *
öãΩ
,

398 
¨gc
,

399 c⁄° **
¨gv


401 
DbPage
 *
pPage
;

402 if–
¨gc
!=2 ){

403 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

405  
TCL_ERROR
;

407 
pPage
 = (
DbPage
 *)
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

408 
	`sqlôe3PagîUƒef
(
pPage
);

409  
TCL_OK
;

410 
	}
}

417 
	$∑ge_ªad
(

418 *
NŸU£d
,

419 
T˛_I¡îp
 *
öãΩ
,

420 
¨gc
,

421 c⁄° **
¨gv


423 
zBuf
[100];

424 
DbPage
 *
pPage
;

425 if–
¨gc
!=2 ){

426 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

428  
TCL_ERROR
;

430 
pPage
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

431 
	`mem˝y
(
zBuf
, 
	`sqlôe3PagîGëD©a
(
pPage
), (zBuf));

432 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

433  
TCL_OK
;

434 
	}
}

441 
	$∑ge_numbî
(

442 *
NŸU£d
,

443 
T˛_I¡îp
 *
öãΩ
,

444 
¨gc
,

445 c⁄° **
¨gv


447 
zBuf
[100];

448 
DbPage
 *
pPage
;

449 if–
¨gc
!=2 ){

450 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

452  
TCL_ERROR
;

454 
pPage
 = (
DbPage
 *)
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

455 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%d", 
	`sqlôe3PagîPagíumbî
(
pPage
));

456 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

457  
TCL_OK
;

458 
	}
}

465 
	$∑ge_wrôe
(

466 *
NŸU£d
,

467 
T˛_I¡îp
 *
öãΩ
,

468 
¨gc
,

469 c⁄° **
¨gv


471 
DbPage
 *
pPage
;

472 *
pD©a
;

473 
rc
;

474 if–
¨gc
!=3 ){

475 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

477  
TCL_ERROR
;

479 
pPage
 = (
DbPage
 *)
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

480 
rc
 = 
	`sqlôe3PagîWrôe
(
pPage
);

481 if–
rc
!=
SQLITE_OK
 ){

482 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

483  
TCL_ERROR
;

485 
pD©a
 = 
	`sqlôe3PagîGëD©a
(
pPage
);

486 
	`°∫˝y
(
pD©a
, 
¨gv
[2], 
ã°_∑gesize
-1);

487 
pD©a
[
ã°_∑gesize
-1] = 0;

488  
TCL_OK
;

489 
	}
}

491 #i‚de‡
SQLITE_OMIT_DISKIO


501 
	$Áke_big_fûe
(

502 *
NŸU£d
,

503 
T˛_I¡îp
 *
öãΩ
,

504 
¨gc
,

505 c⁄° **
¨gv


507 
sqlôe3_vfs
 *
pVfs
;

508 
sqlôe3_fûe
 *
fd
 = 0;

509 
rc
;

510 
n
;

511 
i64
 
off£t
;

512 *
zFûe
;

513 
nFûe
;

514 if–
¨gc
!=3 ){

515 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

517  
TCL_ERROR
;

519 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], &
n
ËË 
TCL_ERROR
;

521 
pVfs
 = 
	`sqlôe3_vfs_föd
(0);

522 
nFûe
 = ()
	`°æí
(
¨gv
[2]);

523 
zFûe
 = 
	`sqlôe3_mÆloc
–
nFûe
+2 );

524 if–
zFûe
==0 )  
TCL_ERROR
;

525 
	`mem˝y
(
zFûe
, 
¨gv
[2], 
nFûe
+1);

526 
zFûe
[
nFûe
+1] = 0;

527 
rc
 = 
	`sqlôe3OsO≥nMÆloc
(
pVfs
, 
zFûe
, &
fd
,

528 (
SQLITE_OPEN_CREATE
|
SQLITE_OPEN_READWRITE
|
SQLITE_OPEN_MAIN_DB
), 0

530 if–
rc
 ){

531 
	`T˛_AµídResu…
(
öãΩ
, "›í faûed: ", 
	`sqlôe3EºName
(
rc
), 0);

532 
	`sqlôe3_‰ì
(
zFûe
);

533  
TCL_ERROR
;

535 
off£t
 = 
n
;

536 
off£t
 *= 1024*1024;

537 
rc
 = 
	`sqlôe3OsWrôe
(
fd
, "Hñlo, W‹ld!", 14, 
off£t
);

538 
	`sqlôe3OsClo£Fªe
(
fd
);

539 
	`sqlôe3_‰ì
(
zFûe
);

540 if–
rc
 ){

541 
	`T˛_AµídResu…
(
öãΩ
, "wrôêÁûed: ", 
	`sqlôe3EºName
(
rc
), 0);

542  
TCL_ERROR
;

544  
TCL_OK
;

545 
	}
}

554 
	$ã°PídögByã
(

555 *
NŸU£d
,

556 
T˛_I¡îp
 *
öãΩ
,

557 
¨gc
,

558 c⁄° **
¨gv


560 
pbyã
;

561 
rc
;

562 if–
¨gc
!=2 ){

563 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

565  
TCL_ERROR
;

567 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], &
pbyã
ËË 
TCL_ERROR
;

568 
rc
 = 
	`sqlôe3_ã°_c⁄åﬁ
(
SQLITE_TESTCTRL_PENDING_BYTE
, 
pbyã
);

569 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

570  
TCL_OK
;

571 
	}
}

576 
T˛_I¡îp
 *
	gÁu…SimI¡îp
 = 0;

577 
	gÁu…SimS¸ùtSize
 = 0;

578 *
	gÁu…SimS¸ùt
;

579 
	$Áu…SimCÆlback
(
x
){

580 
zI¡
[30];

581 
i
;

582 
isNeg
;

583 
rc
;

584 if–
x
==0 ){

585 
	`mem˝y
(
Áu…SimS¸ùt
+
Áu…SimS¸ùtSize
, "0", 2);

588 if–
x
<0 ){

589 
isNeg
 = 1;

590 
x
 = -x;

592 
isNeg
 = 0;

594 
zI¡
[(zInt)-1] = 0;

595 
i
=(
zI¡
)-2; i>0 && 
x
>0; i--, x /= 10){

596 
zI¡
[
i
] = (
x
%10) + '0';

598 if–
isNeg
 ) 
zI¡
[
i
--] = '-';

599 
	`mem˝y
(
Áu…SimS¸ùt
+
Áu…SimS¸ùtSize
, 
zI¡
+
i
+1, (zInt)-i);

601 
rc
 = 
	`T˛_EvÆ
(
Áu…SimI¡îp
, 
Áu…SimS¸ùt
);

602 if–
rc
 ){

603 
	`Ârötf
(
°dîr
, "Áu… simuœt‹ s¸ùàÁûed: [%s]", 
Áu…SimS¸ùt
);

604 
rc
 = 
SQLITE_ERROR
;

606 
rc
 = 
	`©oi
(
	`T˛_GëSåögResu…
(
Áu…SimI¡îp
));

608 
	`T˛_Re£tResu…
(
Áu…SimI¡îp
);

609  
rc
;

610 
	}
}

619 
	$Áu…In°ÆlCmd
(

620 *
NŸU£d
,

621 
T˛_I¡îp
 *
öãΩ
,

622 
¨gc
,

623 c⁄° **
¨gv


625 c⁄° *
zS¸ùt
;

626 
nS¸ùt
;

627 
rc
;

628 if–
¨gc
!=1 &&árgc!=2 ){

629 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

632 
zS¸ùt
 = 
¨gc
==2 ? 
¨gv
[1] : "";

633 
nS¸ùt
 = ()
	`°æí
(
zS¸ùt
);

634 if–
Áu…SimS¸ùt
 ){

635 
	`‰ì
(
Áu…SimS¸ùt
);

636 
Áu…SimS¸ùt
 = 0;

638 if–
nS¸ùt
==0 ){

639 
rc
 = 
	`sqlôe3_ã°_c⁄åﬁ
(
SQLITE_TESTCTRL_FAULT_INSTALL
, 0);

641 
Áu…SimS¸ùt
 = 
	`mÆloc
–
nS¸ùt
+100 );

642 if–
Áu…SimS¸ùt
==0 ){

643 
	`T˛_AµídResu…
(
öãΩ
, "out of memory", (*)0);

644  
SQLITE_ERROR
;

646 
	`mem˝y
(
Áu…SimS¸ùt
, 
zS¸ùt
, 
nS¸ùt
);

647 
Áu…SimS¸ùt
[
nS¸ùt
] = ' ';

648 
Áu…SimS¸ùtSize
 = 
nS¸ùt
+1;

649 
Áu…SimI¡îp
 = 
öãΩ
;

650 
rc
 = 
	`sqlôe3_ã°_c⁄åﬁ
(
SQLITE_TESTCTRL_FAULT_INSTALL
, 
Áu…SimCÆlback
);

652 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

653  
SQLITE_OK
;

654 
	}
}

662 
	$ã°BôvecBuûtöTe°
(

663 *
NŸU£d
,

664 
T˛_I¡îp
 *
öãΩ
,

665 
¨gc
,

666 c⁄° **
¨gv


668 
sz
, 
rc
;

669 
nProg
 = 0;

670 
aProg
[100];

671 c⁄° *
z
;

672 if–
¨gc
!=3 ){

673 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

676 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], &
sz
ËË 
TCL_ERROR
;

677 
z
 = 
¨gv
[2];

678  
nProg
<99 && *
z
 ){

679  *
z
 && !
	`sqlôe3Isdigô
(*z) ){ z++; }

680 if–*
z
==0 ) ;

681 
aProg
[
nProg
++] = 
	`©oi
(
z
);

682  
	`sqlôe3Isdigô
(*
z
) ){ z++; }

684 
aProg
[
nProg
] = 0;

685 
rc
 = 
	`sqlôe3_ã°_c⁄åﬁ
(
SQLITE_TESTCTRL_BITVEC_TEST
, 
sz
, 
aProg
);

686 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

687  
TCL_OK
;

688 
	}
}

693 
	$Sqlôëe°2_Inô
(
T˛_I¡îp
 *
öãΩ
){

694 
sqlôe3_io_îr‹_≥rsi°
;

695 
sqlôe3_io_îr‹_≥ndög
;

696 
sqlôe3_io_îr‹_hô
;

697 
sqlôe3_io_îr‹_h¨dhô
;

698 
sqlôe3_diskfuŒ_≥ndög
;

699 
sqlôe3_diskfuŒ
;

701 *
zName
;

702 
T˛_CmdProc
 *
xProc
;

703 } 
aCmd
[] = {

704 { "∑gî_›í", (
T˛_CmdProc
*)
∑gî_›í
 },

705 { "∑gî_˛o£", (
T˛_CmdProc
*)
∑gî_˛o£
 },

706 { "∑gî_commô", (
T˛_CmdProc
*)
∑gî_commô
 },

707 { "∑gî_rﬁlback", (
T˛_CmdProc
*)
∑gî_rﬁlback
 },

708 { "∑gî_°mt_begö", (
T˛_CmdProc
*)
∑gî_°mt_begö
 },

709 { "∑gî_°mt_commô", (
T˛_CmdProc
*)
∑gî_°mt_commô
 },

710 { "∑gî_°mt_rﬁlback", (
T˛_CmdProc
*)
∑gî_°mt_rﬁlback
 },

711 { "∑gî_°©s", (
T˛_CmdProc
*)
∑gî_°©s
 },

712 { "∑gî_∑gecou¡", (
T˛_CmdProc
*)
∑gî_∑gecou¡
 },

713 { "∑ge_gë", (
T˛_CmdProc
*)
∑ge_gë
 },

714 { "∑ge_lookup", (
T˛_CmdProc
*)
∑ge_lookup
 },

715 { "∑ge_uƒef", (
T˛_CmdProc
*)
∑ge_uƒef
 },

716 { "∑ge_ªad", (
T˛_CmdProc
*)
∑ge_ªad
 },

717 { "∑ge_wrôe", (
T˛_CmdProc
*)
∑ge_wrôe
 },

718 { "∑ge_numbî", (
T˛_CmdProc
*)
∑ge_numbî
 },

719 { "∑gî_åunˇã", (
T˛_CmdProc
*)
∑gî_åunˇã
 },

720 #i‚de‡
SQLITE_OMIT_DISKIO


721 { "Áke_big_fûe", (
T˛_CmdProc
*)
Áke_big_fûe
 },

723 { "sqlôe3BôvecBuûtöTe°",(
T˛_CmdProc
*)
ã°BôvecBuûtöTe°
 },

724 { "sqlôe3_ã°_c⁄åﬁ_≥ndög_byã", (
T˛_CmdProc
*)
ã°PídögByã
 },

725 { "sqlôe3_ã°_c⁄åﬁ_Áu…_ö°Æl", (
T˛_CmdProc
*)
Áu…In°ÆlCmd
 },

727 
i
;

728 
i
=0; i<(
aCmd
)/(aCmd[0]); i++){

729 
	`T˛_Cª©eComm™d
(
öãΩ
, 
aCmd
[
i
].
zName
,áCmd[i].
xProc
, 0, 0);

731 
	`T˛_LökV¨
(
öãΩ
, "sqlite_io_error_pending",

732 (*)&
sqlôe3_io_îr‹_≥ndög
, 
TCL_LINK_INT
);

733 
	`T˛_LökV¨
(
öãΩ
, "sqlite_io_error_persist",

734 (*)&
sqlôe3_io_îr‹_≥rsi°
, 
TCL_LINK_INT
);

735 
	`T˛_LökV¨
(
öãΩ
, "sqlite_io_error_hit",

736 (*)&
sqlôe3_io_îr‹_hô
, 
TCL_LINK_INT
);

737 
	`T˛_LökV¨
(
öãΩ
, "sqlite_io_error_hardhit",

738 (*)&
sqlôe3_io_îr‹_h¨dhô
, 
TCL_LINK_INT
);

739 
	`T˛_LökV¨
(
öãΩ
, "sqlite_diskfull_pending",

740 (*)&
sqlôe3_diskfuŒ_≥ndög
, 
TCL_LINK_INT
);

741 
	`T˛_LökV¨
(
öãΩ
, "sqlite_diskfull",

742 (*)&
sqlôe3_diskfuŒ
, 
TCL_LINK_INT
);

743 #i‚de‡
SQLITE_OMIT_WSD


744 
	`T˛_LökV¨
(
öãΩ
, "sqlite_pending_byte",

745 (*)&
sqlôe3PídögByã
, 
TCL_LINK_INT
 | 
TCL_LINK_READ_ONLY
);

747  
TCL_OK
;

748 
	}
}

	@test3.c

16 
	~"sqlôeI¡.h
"

17 
	~"båìI¡.h
"

18 
	~"t˛.h
"

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 c⁄° *
sqlôe3EºName
();

28 
sqlôe3
 
	gsDb
;

29 
	gnRefSqlôe3
 = 0;

36 
	$båì_›í
(

37 *
NŸU£d
,

38 
T˛_I¡îp
 *
öãΩ
,

39 
¨gc
,

40 c⁄° **
¨gv


42 
Båì
 *
pBt
;

43 
rc
, 
nCache
;

44 
zBuf
[100];

45 
n
;

46 *
zFûíame
;

47 if–
¨gc
!=3 ){

48 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

50  
TCL_ERROR
;

52 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
nCache
ËË 
TCL_ERROR
;

53 
nRefSqlôe3
++;

54 if–
nRefSqlôe3
==1 ){

55 
sDb
.
pVfs
 = 
	`sqlôe3_vfs_föd
(0);

56 
sDb
.
muãx
 = 
	`sqlôe3MuãxAŒoc
(
SQLITE_MUTEX_RECURSIVE
);

57 
	`sqlôe3_muãx_íãr
(
sDb
.
muãx
);

59 
n
 = ()
	`°æí
(
¨gv
[1]);

60 
zFûíame
 = 
	`sqlôe3_mÆloc
–
n
+2 );

61 if–
zFûíame
==0 )  
TCL_ERROR
;

62 
	`mem˝y
(
zFûíame
, 
¨gv
[1], 
n
+1);

63 
zFûíame
[
n
+1] = 0;

64 
rc
 = 
	`sqlôe3BåìO≥n
(
sDb
.
pVfs
, 
zFûíame
, &sDb, &
pBt
, 0,

65 
SQLITE_OPEN_READWRITE
 | 
SQLITE_OPEN_CREATE
 | 
SQLITE_OPEN_MAIN_DB
);

66 
	`sqlôe3_‰ì
(
zFûíame
);

67 if–
rc
!=
SQLITE_OK
 ){

68 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

69  
TCL_ERROR
;

71 
	`sqlôe3BåìSëCacheSize
(
pBt
, 
nCache
);

72 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf,"%p", 
pBt
);

73 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

74  
TCL_OK
;

75 
	}
}

82 
	$båì_˛o£
(

83 *
NŸU£d
,

84 
T˛_I¡îp
 *
öãΩ
,

85 
¨gc
,

86 c⁄° **
¨gv


88 
Båì
 *
pBt
;

89 
rc
;

90 if–
¨gc
!=2 ){

91 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

93  
TCL_ERROR
;

95 
pBt
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

96 
rc
 = 
	`sqlôe3BåìClo£
(
pBt
);

97 if–
rc
!=
SQLITE_OK
 ){

98 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

99  
TCL_ERROR
;

101 
nRefSqlôe3
--;

102 if–
nRefSqlôe3
==0 ){

103 
	`sqlôe3_muãx_Àave
(
sDb
.
muãx
);

104 
	`sqlôe3_muãx_‰ì
(
sDb
.
muãx
);

105 
sDb
.
muãx
 = 0;

106 
sDb
.
pVfs
 = 0;

108  
TCL_OK
;

109 
	}
}

117 
	$båì_begö_å™ß˘i⁄
(

118 *
NŸU£d
,

119 
T˛_I¡îp
 *
öãΩ
,

120 
¨gc
,

121 c⁄° **
¨gv


123 
Båì
 *
pBt
;

124 
rc
;

125 if–
¨gc
!=2 ){

126 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

128  
TCL_ERROR
;

130 
pBt
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

131 
	`sqlôe3BåìE¡î
(
pBt
);

132 
rc
 = 
	`sqlôe3BåìBegöTøns
(
pBt
, 1);

133 
	`sqlôe3BåìLóve
(
pBt
);

134 if–
rc
!=
SQLITE_OK
 ){

135 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

136  
TCL_ERROR
;

138  
TCL_OK
;

139 
	}
}

146 
	$båì_∑gî_°©s
(

147 *
NŸU£d
,

148 
T˛_I¡îp
 *
öãΩ
,

149 
¨gc
,

150 c⁄° **
¨gv


152 
Båì
 *
pBt
;

153 
i
;

154 *
a
;

156 if–
¨gc
!=2 ){

157 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

159  
TCL_ERROR
;

161 
pBt
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

170 
	`sqlôe3_muãx_íãr
(
pBt
->
db
->
muãx
);

172 
	`sqlôe3BåìE¡î
(
pBt
);

173 
a
 = 
	`sqlôe3PagîSèts
(
	`sqlôe3BåìPagî
(
pBt
));

174 
i
=0; i<11; i++){

175 *
zName
[] = {

179 
zBuf
[100];

180 
	`T˛_AµídEÀmít
(
öãΩ
, 
zName
[
i
]);

181 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf,"%d",
a
[
i
]);

182 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

184 
	`sqlôe3BåìLóve
(
pBt
);

187 
	`sqlôe3_muãx_Àave
(
pBt
->
db
->
muãx
);

188  
TCL_OK
;

189 
	}
}

196 
	$båì_curs‹
(

197 *
NŸU£d
,

198 
T˛_I¡îp
 *
öãΩ
,

199 
¨gc
,

200 c⁄° **
¨gv


202 
Båì
 *
pBt
;

203 
iTabÀ
;

204 
BtCurs‹
 *
pCur
;

205 
rc
 = 
SQLITE_OK
;

206 
wrFœg
;

207 
zBuf
[30];

209 if–
¨gc
!=4 ){

210 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

212  
TCL_ERROR
;

214 
pBt
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

215 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
iTabÀ
ËË 
TCL_ERROR
;

216 if–
	`T˛_GëBoﬁón
(
öãΩ
, 
¨gv
[3], &
wrFœg
ËË 
TCL_ERROR
;

217 if–
wrFœg
 ) wrFœg = 
BTREE_WRCSR
;

218 
pCur
 = (
BtCurs‹
 *)
	`ckÆloc
(
	`sqlôe3BåìCurs‹Size
());

219 
	`mem£t
(
pCur
, 0, 
	`sqlôe3BåìCurs‹Size
());

220 
	`sqlôe3_muãx_íãr
(
pBt
->
db
->
muãx
);

221 
	`sqlôe3BåìE¡î
(
pBt
);

222 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


223 
rc
 = 
	`sqlôe3BåìLockTabÀ
(
pBt
, 
iTabÀ
, !!
wrFœg
);

225 if–
rc
==
SQLITE_OK
 ){

226 
rc
 = 
	`sqlôe3BåìCurs‹
(
pBt
, 
iTabÀ
, 
wrFœg
, 0, 
pCur
);

228 
	`sqlôe3BåìLóve
(
pBt
);

229 
	`sqlôe3_muãx_Àave
(
pBt
->
db
->
muãx
);

230 if–
rc
 ){

231 
	`ck‰ì
((*)
pCur
);

232 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

233  
TCL_ERROR
;

235 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf,"%p", 
pCur
);

236 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

237  
SQLITE_OK
;

238 
	}
}

245 
	$båì_˛o£_curs‹
(

246 *
NŸU£d
,

247 
T˛_I¡îp
 *
öãΩ
,

248 
¨gc
,

249 c⁄° **
¨gv


251 
BtCurs‹
 *
pCur
;

252 
Båì
 *
pBt
;

253 
rc
;

255 if–
¨gc
!=2 ){

256 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

258  
TCL_ERROR
;

260 
pCur
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

261 
pBt
 = 
pCur
->
pBåì
;

262 
	`sqlôe3_muãx_íãr
(
pBt
->
db
->
muãx
);

263 
	`sqlôe3BåìE¡î
(
pBt
);

264 
rc
 = 
	`sqlôe3BåìClo£Curs‹
(
pCur
);

265 
	`sqlôe3BåìLóve
(
pBt
);

266 
	`sqlôe3_muãx_Àave
(
pBt
->
db
->
muãx
);

267 
	`ck‰ì
((*)
pCur
);

268 if–
rc
 ){

269 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

270  
TCL_ERROR
;

272  
SQLITE_OK
;

273 
	}
}

282 
	$båì_√xt
(

283 *
NŸU£d
,

284 
T˛_I¡îp
 *
öãΩ
,

285 
¨gc
,

286 c⁄° **
¨gv


288 
BtCurs‹
 *
pCur
;

289 
rc
;

290 
ªs
 = 0;

291 
zBuf
[100];

293 if–
¨gc
!=2 ){

294 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

296  
TCL_ERROR
;

298 
pCur
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

299 
	`sqlôe3BåìE¡î
(
pCur
->
pBåì
);

300 
rc
 = 
	`sqlôe3BåìNext
(
pCur
, &
ªs
);

301 
	`sqlôe3BåìLóve
(
pCur
->
pBåì
);

302 if–
rc
 ){

303 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

304  
TCL_ERROR
;

306 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf,"%d",
ªs
);

307 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

308  
SQLITE_OK
;

309 
	}
}

317 
	$båì_fú°
(

318 *
NŸU£d
,

319 
T˛_I¡îp
 *
öãΩ
,

320 
¨gc
,

321 c⁄° **
¨gv


323 
BtCurs‹
 *
pCur
;

324 
rc
;

325 
ªs
 = 0;

326 
zBuf
[100];

328 if–
¨gc
!=2 ){

329 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

331  
TCL_ERROR
;

333 
pCur
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

334 
	`sqlôe3BåìE¡î
(
pCur
->
pBåì
);

335 
rc
 = 
	`sqlôe3BåìFú°
(
pCur
, &
ªs
);

336 
	`sqlôe3BåìLóve
(
pCur
->
pBåì
);

337 if–
rc
 ){

338 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

339  
TCL_ERROR
;

341 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf,"%d",
ªs
);

342 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

343  
SQLITE_OK
;

344 
	}
}

352 
	$båì_eof
(

353 *
NŸU£d
,

354 
T˛_I¡îp
 *
öãΩ
,

355 
¨gc
,

356 c⁄° **
¨gv


358 
BtCurs‹
 *
pCur
;

359 
rc
;

360 
zBuf
[50];

362 if–
¨gc
!=2 ){

363 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

365  
TCL_ERROR
;

367 
pCur
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

368 
	`sqlôe3BåìE¡î
(
pCur
->
pBåì
);

369 
rc
 = 
	`sqlôe3BåìEof
(
pCur
);

370 
	`sqlôe3BåìLóve
(
pCur
->
pBåì
);

371 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf, "%d", 
rc
);

372 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

373  
SQLITE_OK
;

374 
	}
}

381 
	$båì_∑ylﬂd_size
(

382 *
NŸU£d
,

383 
T˛_I¡îp
 *
öãΩ
,

384 
¨gc
,

385 c⁄° **
¨gv


387 
BtCurs‹
 *
pCur
;

388 
n2
;

389 
u64
 
n1
;

390 
zBuf
[50];

392 if–
¨gc
!=2 ){

393 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

395  
TCL_ERROR
;

397 
pCur
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

398 
	`sqlôe3BåìE¡î
(
pCur
->
pBåì
);

402 
	`sqlôe3BåìD©aSize
(
pCur
, (
u32
*)&
n2
);

403 if–
pCur
->
≠Page
[pCur->
iPage
]->
ötKey
 ){

404 
n1
 = 0;

406 
	`sqlôe3BåìKeySize
(
pCur
, (
i64
*)&
n1
);

408 
	`sqlôe3BåìLóve
(
pCur
->
pBåì
);

409 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf, "%d", ()(
n1
+
n2
));

410 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

411  
SQLITE_OK
;

412 
	}
}

428 
	$båì_v¨öt_ã°
(

429 *
NŸU£d
,

430 
T˛_I¡îp
 *
öãΩ
,

431 
¨gc
,

432 c⁄° **
¨gv


434 
u32
 
°¨t
, 
mu…
, 
cou¡
, 
ö¸
;

435 
u64
 
ö
, 
out
;

436 
n1
, 
n2
, 
i
, 
j
;

437 
zBuf
[100];

438 if–
¨gc
!=5 ){

439 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

441  
TCL_ERROR
;

443 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
°¨t
ËË 
TCL_ERROR
;

444 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], (*)&
mu…
ËË 
TCL_ERROR
;

445 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[3], (*)&
cou¡
ËË 
TCL_ERROR
;

446 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[4], (*)&
ö¸
ËË 
TCL_ERROR
;

447 
ö
 = 
°¨t
;

448 
ö
 *
mu…
;

449 
i
=0; i<()
cou¡
; i++){

450 
zEº
[200];

451 
n1
 = 
	`putV¨öt
(
zBuf
, 
ö
);

452 if–
n1
>9 ||Ç1<1 ){

453 
	`sqlôe3_¢¥ötf
((
zEº
), zErr,

454 "putV¨öàªtu∫ed %d - should bêbëwì¿1ánd 9", 
n1
);

455 
	`T˛_AµídResu…
(
öãΩ
, 
zEº
, 0);

456  
TCL_ERROR
;

458 
n2
 = 
	`gëV¨öt
(
zBuf
, &
out
);

459 if–
n1
!=
n2
 ){

460 
	`sqlôe3_¢¥ötf
((
zEº
), zErr,

461 "putV¨öàªtu∫ed %dánd gëV¨öàªtu∫ed %d", 
n1
, 
n2
);

462 
	`T˛_AµídResu…
(
öãΩ
, 
zEº
, 0);

463  
TCL_ERROR
;

465 if–
ö
!=
out
 ){

466 
	`sqlôe3_¢¥ötf
((
zEº
), zErr,

467 "WrŸê0x%016Œxánd gŸ back 0x%016Œx", 
ö
, 
out
);

468 
	`T˛_AµídResu…
(
öãΩ
, 
zEº
, 0);

469  
TCL_ERROR
;

471 if–(
ö
 & 0xffffffff)==in ){

472 
u32
 
out32
;

473 
n2
 = 
	`gëV¨öt32
(
zBuf
, 
out32
);

474 
out
 = 
out32
;

475 if–
n1
!=
n2
 ){

476 
	`sqlôe3_¢¥ötf
((
zEº
), zErr,

478 
n1
, 
n2
);

479 
	`T˛_AµídResu…
(
öãΩ
, 
zEº
, 0);

480  
TCL_ERROR
;

482 if–
ö
!=
out
 ){

483 
	`sqlôe3_¢¥ötf
((
zEº
), zErr,

485 
ö
, 
out
);

486 
	`T˛_AµídResu…
(
öãΩ
, 
zEº
, 0);

487  
TCL_ERROR
;

495 
j
=0; j<19; j++){

496 
	`gëV¨öt
(
zBuf
, &
out
);

498 
ö
 +
ö¸
;

500  
TCL_OK
;

501 
	}
}

512 
	$båì_‰om_db
(

513 *
NŸU£d
,

514 
T˛_I¡îp
 *
öãΩ
,

515 
¨gc
,

516 c⁄° **
¨gv


518 
zBuf
[100];

519 
T˛_CmdInfo
 
öfo
;

520 
sqlôe3
 *
db
;

521 
Båì
 *
pBt
;

522 
iDb
 = 0;

524 if–
¨gc
!=2 &&árgc!=3 ){

525 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

527  
TCL_ERROR
;

530 if–1!=
	`T˛_GëComm™dInfo
(
öãΩ
, 
¨gv
[1], &
öfo
) ){

531 
	`T˛_AµídResu…
(
öãΩ
, "Nÿsuch db-h™dÀ: \"", 
¨gv
[1], "\"", 0);

532  
TCL_ERROR
;

534 if–
¨gc
==3 ){

535 
iDb
 = 
	`©oi
(
¨gv
[2]);

538 
db
 = *((
sqlôe3
 **)
öfo
.
objClõ¡D©a
);

539 
	`as£π
–
db
 );

541 
pBt
 = 
db
->
aDb
[
iDb
].pBt;

542 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%p", 
pBt
);

543 
	`T˛_SëResu…
(
öãΩ
, 
zBuf
, 
TCL_VOLATILE
);

544  
TCL_OK
;

545 
	}
}

552 
	$båì_ismemdb
(

553 *
NŸU£d
,

554 
T˛_I¡îp
 *
öãΩ
,

555 
¨gc
,

556 c⁄° **
¨gv


558 
Båì
 *
pBt
;

559 
ªs
;

560 
sqlôe3_fûe
 *
pFûe
;

562 if–
¨gc
!=2 ){

563 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

565  
TCL_ERROR
;

567 
pBt
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

568 
	`sqlôe3_muãx_íãr
(
pBt
->
db
->
muãx
);

569 
	`sqlôe3BåìE¡î
(
pBt
);

570 
pFûe
 = 
	`sqlôe3PagîFûe
(
	`sqlôe3BåìPagî
(
pBt
));

571 
ªs
 = (
pFûe
->
pMëhods
==0);

572 
	`sqlôe3BåìLóve
(
pBt
);

573 
	`sqlôe3_muãx_Àave
(
pBt
->
db
->
muãx
);

574 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewBoﬁónObj
(
ªs
));

575  
SQLITE_OK
;

576 
	}
}

583 
	$båì_£t_ˇche_size
(

584 *
NŸU£d
,

585 
T˛_I¡îp
 *
öãΩ
,

586 
¨gc
,

587 c⁄° **
¨gv


589 
nCache
;

590 
Båì
 *
pBt
;

592 if–
¨gc
!=3 ){

593 
	`T˛_AµídResu…
(

594 
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0], " BT NCACHE\"", 0);

595  
TCL_ERROR
;

597 
pBt
 = 
	`sqlôe3Te°TextToPå
(
¨gv
[1]);

598 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
nCache
ËË 
TCL_ERROR
;

600 
	`sqlôe3_muãx_íãr
(
pBt
->
db
->
muãx
);

601 
	`sqlôe3BåìE¡î
(
pBt
);

602 
	`sqlôe3BåìSëCacheSize
(
pBt
, 
nCache
);

603 
	`sqlôe3BåìLóve
(
pBt
);

604 
	`sqlôe3_muãx_Àave
(
pBt
->
db
->
muãx
);

605  
TCL_OK
;

606 
	}
}

613 
	$båì_ö£π
(

614 
Clõ¡D©a
 
˛õ¡D©a
,

615 
T˛_I¡îp
 *
öãΩ
,

616 
objc
,

617 
T˛_Obj
 *c⁄° 
objv
[]

619 
BtCurs‹
 *
pCur
;

620 
rc
;

621 *
pKey
 = 0;

622 
nKey
 = 0;

623 *
pD©a
 = 0;

624 
nD©a
 = 0;

626 if–
objc
!=4 && objc!=3 ){

627 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "?-intkey? CSR KEY VALUE");

628  
TCL_ERROR
;

631 if–
objc
==4 ){

632 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
nKey
ËË 
TCL_ERROR
;

633 
pD©a
 = (*)
	`T˛_GëByãAºayFromObj
(
objv
[3], &
nD©a
);

635 
pKey
 = (*)
	`T˛_GëByãAºayFromObj
(
objv
[2], &
nKey
);

637 
pCur
 = (
BtCurs‹
*)
	`sqlôe3Te°TextToPå
(
	`T˛_GëSåög
(
objv
[1]));

639 
	`sqlôe3_muãx_íãr
(
pCur
->
pBåì
->
db
->
muãx
);

640 
	`sqlôe3BåìE¡î
(
pCur
->
pBåì
);

641 
rc
 = 
	`sqlôe3BåìIn£π
(
pCur
, 
pKey
, 
nKey
, 
pD©a
, 
nD©a
, 0, 0, 0);

642 
	`sqlôe3BåìLóve
(
pCur
->
pBåì
);

643 
	`sqlôe3_muãx_Àave
(
pCur
->
pBåì
->
db
->
muãx
);

645 
	`T˛_Re£tResu…
(
öãΩ
);

646 if–
rc
 ){

647 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), 0);

648  
TCL_ERROR
;

650  
TCL_OK
;

651 
	}
}

657 
	$Sqlôëe°3_Inô
(
T˛_I¡îp
 *
öãΩ
){

659 *
zName
;

660 
T˛_CmdProc
 *
xProc
;

661 } 
aCmd
[] = {

662 { "båì_›í", (
T˛_CmdProc
*)
båì_›í
 },

663 { "båì_˛o£", (
T˛_CmdProc
*)
båì_˛o£
 },

664 { "båì_begö_å™ß˘i⁄", (
T˛_CmdProc
*)
båì_begö_å™ß˘i⁄
 },

665 { "båì_∑gî_°©s", (
T˛_CmdProc
*)
båì_∑gî_°©s
 },

666 { "båì_curs‹", (
T˛_CmdProc
*)
båì_curs‹
 },

667 { "båì_˛o£_curs‹", (
T˛_CmdProc
*)
båì_˛o£_curs‹
 },

668 { "båì_√xt", (
T˛_CmdProc
*)
båì_√xt
 },

669 { "båì_eof", (
T˛_CmdProc
*)
båì_eof
 },

670 { "båì_∑ylﬂd_size", (
T˛_CmdProc
*)
båì_∑ylﬂd_size
 },

671 { "båì_fú°", (
T˛_CmdProc
*)
båì_fú°
 },

672 { "båì_v¨öt_ã°", (
T˛_CmdProc
*)
båì_v¨öt_ã°
 },

673 { "båì_‰om_db", (
T˛_CmdProc
*)
båì_‰om_db
 },

674 { "båì_ismemdb", (
T˛_CmdProc
*)
båì_ismemdb
 },

675 { "båì_£t_ˇche_size", (
T˛_CmdProc
*)
båì_£t_ˇche_size
 }

677 
i
;

679 
i
=0; i<(
aCmd
)/(aCmd[0]); i++){

680 
	`T˛_Cª©eComm™d
(
öãΩ
, 
aCmd
[
i
].
zName
,áCmd[i].
xProc
, 0, 0);

683 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "båì_ö£π", 
båì_ö£π
, 0, 0);

685  
TCL_OK
;

686 
	}
}

	@test4.c

14 
	~"sqlôeI¡.h
"

15 
	~"t˛.h
"

16 #i‡
SQLITE_OS_UNIX
 && 
SQLITE_THREADSAFE


17 
	~<°dlib.h
>

18 
	~<°rög.h
>

19 
	~<±hªad.h
>

20 
	~<sched.h
>

21 
	~<˘y≥.h
>

23 c⁄° *
sqlôe3EºName
();

29 
Thªad
 
	tThªad
;

30 
	sThªad
 {

33 *
	mzFûíame
;

34 (*
	mxOp
)(
	mThªad
*);

35 *
	mzArg
;

36 
	m›num
;

37 
	mbusy
;

41 
	mcom∂ëed
;

42 
sqlôe3
 *
	mdb
;

43 
sqlôe3_°mt
 *
	mpStmt
;

44 *
	mzEº
;

45 *
	mzSèticEº
;

46 
	mrc
;

47 
	m¨gc
;

48 c⁄° *
	m¨gv
[100];

49 c⁄° *
	mcﬁv
[100];

56 
	#N_THREAD
 26

	)

57 
Thªad
 
	gthªad£t
[
N_THREAD
];

63 *
	$thªad_maö
(*
pArg
){

64 
Thªad
 *
p
 = (Thªad*)
pArg
;

65 if–
p
->
db
 ){

66 
	`sqlôe3_˛o£
(
p
->
db
);

68 
	`sqlôe3_›í
(
p
->
zFûíame
, &p->
db
);

69 if–
SQLITE_OK
!=
	`sqlôe3_îrcode
(
p
->
db
) ){

70 
p
->
zEº
 = 
	`°rdup
(
	`sqlôe3_îrmsg
’->
db
));

71 
	`sqlôe3_˛o£
(
p
->
db
);

72 
p
->
db
 = 0;

74 
p
->
pStmt
 = 0;

75 
p
->
com∂ëed
 = 1;

76  
p
->
›num
<ı->
com∂ëed
 ) 
	`sched_yõld
();

77  
p
->
xOp
 ){

78 if–
p
->
zEº
 &&Ö->zEº!ı->
zSèticEº
 ){

79 
	`sqlôe3_‰ì
(
p
->
zEº
);

80 
p
->
zEº
 = 0;

82 (*
p
->
xOp
)(p);

83 
p
->
com∂ëed
++;

84  
p
->
›num
<ı->
com∂ëed
 ) 
	`sched_yõld
();

86 if–
p
->
pStmt
 ){

87 
	`sqlôe3_föÆize
(
p
->
pStmt
);

88 
p
->
pStmt
 = 0;

90 if–
p
->
db
 ){

91 
	`sqlôe3_˛o£
(
p
->
db
);

92 
p
->
db
 = 0;

94 if–
p
->
zEº
 &&Ö->zEº!ı->
zSèticEº
 ){

95 
	`sqlôe3_‰ì
(
p
->
zEº
);

96 
p
->
zEº
 = 0;

98 
p
->
com∂ëed
++;

99 #i‚de‡
SQLITE_OMIT_DEPRECATED


100 
	`sqlôe3_thªad_˛ónup
();

103 
	}
}

110 
	$∑r£_thªad_id
(
T˛_I¡îp
 *
öãΩ
, c⁄° *
zArg
){

111 if–
zArg
==0 || zArg[0]==0 || zArg[1]!=0 || !
	`isuµî
(()zArg[0]) ){

112 
	`T˛_AµídResu…
(
öãΩ
, "thread ID must beán upper caseÜetter", 0);

115  
zArg
[0] - 'A';

116 
	}
}

124 
	$t˛_thªad_¸óã
(

125 *
NŸU£d
,

126 
T˛_I¡îp
 *
öãΩ
,

127 
¨gc
,

128 c⁄° **
¨gv


130 
i
;

131 
±hªad_t
 
x
;

132 
rc
;

134 if–
¨gc
!=3 ){

135 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

137  
TCL_ERROR
;

139 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

140 if–
i
<0 )  
TCL_ERROR
;

141 if–
thªad£t
[
i
].
busy
 ){

142 
	`T˛_AµídResu…
(
öãΩ
, "thªad ", 
¨gv
[1], " isálreadyÑunning", 0);

143  
TCL_ERROR
;

145 
thªad£t
[
i
].
busy
 = 1;

146 
	`sqlôe3_‰ì
(
thªad£t
[
i
].
zFûíame
);

147 
thªad£t
[
i
].
zFûíame
 = 
	`sqlôe3_m¥ötf
("%s", 
¨gv
[2]);

148 
thªad£t
[
i
].
›num
 = 1;

149 
thªad£t
[
i
].
com∂ëed
 = 0;

150 
rc
 = 
	`±hªad_¸óã
(&
x
, 0, 
thªad_maö
, &
thªad£t
[
i
]);

151 if–
rc
 ){

152 
	`T˛_AµídResu…
(
öãΩ
, "failedÅo createÅheÅhread", 0);

153 
	`sqlôe3_‰ì
(
thªad£t
[
i
].
zFûíame
);

154 
thªad£t
[
i
].
busy
 = 0;

155  
TCL_ERROR
;

157 
	`±hªad_dëach
(
x
);

158  
TCL_OK
;

159 
	}
}

164 
	$thªad_waô
(
Thªad
 *
p
){

165  
p
->
›num
>p->
com∂ëed
 ) 
	`sched_yõld
();

166 
	}
}

173 
	$t˛_thªad_waô
(

174 *
NŸU£d
,

175 
T˛_I¡îp
 *
öãΩ
,

176 
¨gc
,

177 c⁄° **
¨gv


179 
i
;

181 if–
¨gc
!=2 ){

182 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

184  
TCL_ERROR
;

186 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

187 if–
i
<0 )  
TCL_ERROR
;

188 if–!
thªad£t
[
i
].
busy
 ){

189 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

190  
TCL_ERROR
;

192 
	`thªad_waô
(&
thªad£t
[
i
]);

193  
TCL_OK
;

194 
	}
}

199 
	$°›_thªad
(
Thªad
 *
p
){

200 
	`thªad_waô
(
p
);

201 
p
->
xOp
 = 0;

202 
p
->
›num
++;

203 
	`thªad_waô
(
p
);

204 
	`sqlôe3_‰ì
(
p
->
zArg
);

205 
p
->
zArg
 = 0;

206 
	`sqlôe3_‰ì
(
p
->
zFûíame
);

207 
p
->
zFûíame
 = 0;

208 
p
->
busy
 = 0;

209 
	}
}

217 
	$t˛_thªad_hÆt
(

218 *
NŸU£d
,

219 
T˛_I¡îp
 *
öãΩ
,

220 
¨gc
,

221 c⁄° **
¨gv


223 
i
;

225 if–
¨gc
!=2 ){

226 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

228  
TCL_ERROR
;

230 if–
¨gv
[1][0]=='*' &&árgv[1][1]==0 ){

231 
i
=0; i<
N_THREAD
; i++){

232 if–
thªad£t
[
i
].
busy
 ) 
	`°›_thªad
(&threadset[i]);

235 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

236 if–
i
<0 )  
TCL_ERROR
;

237 if–!
thªad£t
[
i
].
busy
 ){

238 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

239  
TCL_ERROR
;

241 
	`°›_thªad
(&
thªad£t
[
i
]);

243  
TCL_OK
;

244 
	}
}

252 
	$t˛_thªad_¨gc
(

253 *
NŸU£d
,

254 
T˛_I¡îp
 *
öãΩ
,

255 
¨gc
,

256 c⁄° **
¨gv


258 
i
;

259 
zBuf
[100];

261 if–
¨gc
!=2 ){

262 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

264  
TCL_ERROR
;

266 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

267 if–
i
<0 )  
TCL_ERROR
;

268 if–!
thªad£t
[
i
].
busy
 ){

269 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

270  
TCL_ERROR
;

272 
	`thªad_waô
(&
thªad£t
[
i
]);

273 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%d", 
thªad£t
[
i
].
¨gc
);

274 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

275  
TCL_OK
;

276 
	}
}

284 
	$t˛_thªad_¨gv
(

285 *
NŸU£d
,

286 
T˛_I¡îp
 *
öãΩ
,

287 
¨gc
,

288 c⁄° **
¨gv


290 
i
;

291 
n
;

293 if–
¨gc
!=3 ){

294 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

296  
TCL_ERROR
;

298 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

299 if–
i
<0 )  
TCL_ERROR
;

300 if–!
thªad£t
[
i
].
busy
 ){

301 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

302  
TCL_ERROR
;

304 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
n
ËË 
TCL_ERROR
;

305 
	`thªad_waô
(&
thªad£t
[
i
]);

306 if–
n
<0 ||Ç>=
thªad£t
[
i
].
¨gc
 ){

307 
	`T˛_AµídResu…
(
öãΩ
, "columnÇumber out ofÑange", 0);

308  
TCL_ERROR
;

310 
	`T˛_AµídResu…
(
öãΩ
, 
thªad£t
[
i
].
¨gv
[
n
], 0);

311  
TCL_OK
;

312 
	}
}

320 
	$t˛_thªad_cﬁ«me
(

321 *
NŸU£d
,

322 
T˛_I¡îp
 *
öãΩ
,

323 
¨gc
,

324 c⁄° **
¨gv


326 
i
;

327 
n
;

329 if–
¨gc
!=3 ){

330 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

332  
TCL_ERROR
;

334 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

335 if–
i
<0 )  
TCL_ERROR
;

336 if–!
thªad£t
[
i
].
busy
 ){

337 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

338  
TCL_ERROR
;

340 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
n
ËË 
TCL_ERROR
;

341 
	`thªad_waô
(&
thªad£t
[
i
]);

342 if–
n
<0 ||Ç>=
thªad£t
[
i
].
¨gc
 ){

343 
	`T˛_AµídResu…
(
öãΩ
, "columnÇumber out ofÑange", 0);

344  
TCL_ERROR
;

346 
	`T˛_AµídResu…
(
öãΩ
, 
thªad£t
[
i
].
cﬁv
[
n
], 0);

347  
TCL_OK
;

348 
	}
}

356 
	$t˛_thªad_ªsu…
(

357 *
NŸU£d
,

358 
T˛_I¡îp
 *
öãΩ
,

359 
¨gc
,

360 c⁄° **
¨gv


362 
i
;

363 c⁄° *
zName
;

365 if–
¨gc
!=2 ){

366 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

368  
TCL_ERROR
;

370 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

371 if–
i
<0 )  
TCL_ERROR
;

372 if–!
thªad£t
[
i
].
busy
 ){

373 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

374  
TCL_ERROR
;

376 
	`thªad_waô
(&
thªad£t
[
i
]);

377 
zName
 = 
	`sqlôe3EºName
(
thªad£t
[
i
].
rc
);

378 
	`T˛_AµídResu…
(
öãΩ
, 
zName
, 0);

379  
TCL_OK
;

380 
	}
}

388 
	$t˛_thªad_îr‹
(

389 *
NŸU£d
,

390 
T˛_I¡îp
 *
öãΩ
,

391 
¨gc
,

392 c⁄° **
¨gv


394 
i
;

396 if–
¨gc
!=2 ){

397 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

399  
TCL_ERROR
;

401 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

402 if–
i
<0 )  
TCL_ERROR
;

403 if–!
thªad£t
[
i
].
busy
 ){

404 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

405  
TCL_ERROR
;

407 
	`thªad_waô
(&
thªad£t
[
i
]);

408 
	`T˛_AµídResu…
(
öãΩ
, 
thªad£t
[
i
].
zEº
, 0);

409  
TCL_OK
;

410 
	}
}

415 
	$do_compûe
(
Thªad
 *
p
){

416 if–
p
->
db
==0 ){

417 
p
->
zEº
 =Ö->
zSèticEº
 = "no database is open";

418 
p
->
rc
 = 
SQLITE_ERROR
;

421 if–
p
->
pStmt
 ){

422 
	`sqlôe3_föÆize
(
p
->
pStmt
);

423 
p
->
pStmt
 = 0;

425 
p
->
rc
 = 
	`sqlôe3_¥ï¨e
’->
db
,Ö->
zArg
, -1, &p->
pStmt
, 0);

426 
	}
}

433 
	$t˛_thªad_compûe
(

434 *
NŸU£d
,

435 
T˛_I¡îp
 *
öãΩ
,

436 
¨gc
,

437 c⁄° **
¨gv


439 
i
;

440 if–
¨gc
!=3 ){

441 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

443  
TCL_ERROR
;

445 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

446 if–
i
<0 )  
TCL_ERROR
;

447 if–!
thªad£t
[
i
].
busy
 ){

448 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

449  
TCL_ERROR
;

451 
	`thªad_waô
(&
thªad£t
[
i
]);

452 
thªad£t
[
i
].
xOp
 = 
do_compûe
;

453 
	`sqlôe3_‰ì
(
thªad£t
[
i
].
zArg
);

454 
thªad£t
[
i
].
zArg
 = 
	`sqlôe3_m¥ötf
("%s", 
¨gv
[2]);

455 
thªad£t
[
i
].
›num
++;

456  
TCL_OK
;

457 
	}
}

462 
	$do_°ï
(
Thªad
 *
p
){

463 
i
;

464 if–
p
->
pStmt
==0 ){

465 
p
->
zEº
 =Ö->
zSèticEº
 = "no virtual machineávailable";

466 
p
->
rc
 = 
SQLITE_ERROR
;

469 
p
->
rc
 = 
	`sqlôe3_°ï
’->
pStmt
);

470 if–
p
->
rc
==
SQLITE_ROW
 ){

471 
p
->
¨gc
 = 
	`sqlôe3_cﬁumn_cou¡
’->
pStmt
);

472 
i
=0; i<
	`sqlôe3_d©a_cou¡
(
p
->
pStmt
); i++){

473 
p
->
¨gv
[
i
] = (*)
	`sqlôe3_cﬁumn_ãxt
’->
pStmt
, i);

475 
i
=0; i<
p
->
¨gc
; i++){

476 
p
->
cﬁv
[
i
] = 
	`sqlôe3_cﬁumn_«me
’->
pStmt
, i);

479 
	}
}

486 
	$t˛_thªad_°ï
(

487 *
NŸU£d
,

488 
T˛_I¡îp
 *
öãΩ
,

489 
¨gc
,

490 c⁄° **
¨gv


492 
i
;

493 if–
¨gc
!=2 ){

494 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

496  
TCL_ERROR
;

498 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

499 if–
i
<0 )  
TCL_ERROR
;

500 if–!
thªad£t
[
i
].
busy
 ){

501 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

502  
TCL_ERROR
;

504 
	`thªad_waô
(&
thªad£t
[
i
]);

505 
thªad£t
[
i
].
xOp
 = 
do_°ï
;

506 
thªad£t
[
i
].
›num
++;

507  
TCL_OK
;

508 
	}
}

513 
	$do_föÆize
(
Thªad
 *
p
){

514 if–
p
->
pStmt
==0 ){

515 
p
->
zEº
 =Ö->
zSèticEº
 = "no virtual machineávailable";

516 
p
->
rc
 = 
SQLITE_ERROR
;

519 
p
->
rc
 = 
	`sqlôe3_föÆize
’->
pStmt
);

520 
p
->
pStmt
 = 0;

521 
	}
}

528 
	$t˛_thªad_föÆize
(

529 *
NŸU£d
,

530 
T˛_I¡îp
 *
öãΩ
,

531 
¨gc
,

532 c⁄° **
¨gv


534 
i
;

535 if–
¨gc
!=2 ){

536 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

538  
TCL_ERROR
;

540 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

541 if–
i
<0 )  
TCL_ERROR
;

542 if–!
thªad£t
[
i
].
busy
 ){

543 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

544  
TCL_ERROR
;

546 
	`thªad_waô
(&
thªad£t
[
i
]);

547 
thªad£t
[
i
].
xOp
 = 
do_föÆize
;

548 
	`sqlôe3_‰ì
(
thªad£t
[
i
].
zArg
);

549 
thªad£t
[
i
].
zArg
 = 0;

550 
thªad£t
[
i
].
›num
++;

551  
TCL_OK
;

552 
	}
}

559 
	$t˛_thªad_sw≠
(

560 *
NŸU£d
,

561 
T˛_I¡îp
 *
öãΩ
,

562 
¨gc
,

563 c⁄° **
¨gv


565 
i
, 
j
;

566 
sqlôe3
 *
ãmp
;

567 if–
¨gc
!=3 ){

568 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

570  
TCL_ERROR
;

572 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

573 if–
i
<0 )  
TCL_ERROR
;

574 if–!
thªad£t
[
i
].
busy
 ){

575 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

576  
TCL_ERROR
;

578 
	`thªad_waô
(&
thªad£t
[
i
]);

579 
j
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[2]);

580 if–
j
<0 )  
TCL_ERROR
;

581 if–!
thªad£t
[
j
].
busy
 ){

582 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

583  
TCL_ERROR
;

585 
	`thªad_waô
(&
thªad£t
[
j
]);

586 
ãmp
 = 
thªad£t
[
i
].
db
;

587 
thªad£t
[
i
].
db
 =Åhªad£t[
j
].db;

588 
thªad£t
[
j
].
db
 = 
ãmp
;

589  
TCL_OK
;

590 
	}
}

599 
	$t˛_thªad_db_gë
(

600 *
NŸU£d
,

601 
T˛_I¡îp
 *
öãΩ
,

602 
¨gc
,

603 c⁄° **
¨gv


605 
i
;

606 
zBuf
[100];

607 
	`sqlôe3Te°MakePoöãrSå
(
T˛_I¡îp
*, *, *);

608 if–
¨gc
!=2 ){

609 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

611  
TCL_ERROR
;

613 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

614 if–
i
<0 )  
TCL_ERROR
;

615 if–!
thªad£t
[
i
].
busy
 ){

616 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

617  
TCL_ERROR
;

619 
	`thªad_waô
(&
thªad£t
[
i
]);

620 
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
thªad£t
[
i
].
db
);

621 
thªad£t
[
i
].
db
 = 0;

622 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, (*)0);

623  
TCL_OK
;

624 
	}
}

630 
	$t˛_thªad_db_put
(

631 *
NŸU£d
,

632 
T˛_I¡îp
 *
öãΩ
,

633 
¨gc
,

634 c⁄° **
¨gv


636 
i
;

637 
	`sqlôe3Te°MakePoöãrSå
(
T˛_I¡îp
*, *, *);

638 *
	`sqlôe3Te°TextToPå
(const *);

639 if–
¨gc
!=3 ){

640 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

642  
TCL_ERROR
;

644 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

645 if–
i
<0 )  
TCL_ERROR
;

646 if–!
thªad£t
[
i
].
busy
 ){

647 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

648  
TCL_ERROR
;

650 
	`thªad_waô
(&
thªad£t
[
i
]);

651 
	`as£π
–!
thªad£t
[
i
].
db
 );

652 
thªad£t
[
i
].
db
 = (
sqlôe3
*)
	`sqlôe3Te°TextToPå
(
¨gv
[2]);

653  
TCL_OK
;

654 
	}
}

662 
	$t˛_thªad_°mt_gë
(

663 *
NŸU£d
,

664 
T˛_I¡îp
 *
öãΩ
,

665 
¨gc
,

666 c⁄° **
¨gv


668 
i
;

669 
zBuf
[100];

670 
	`sqlôe3Te°MakePoöãrSå
(
T˛_I¡îp
*, *, *);

671 if–
¨gc
!=2 ){

672 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

674  
TCL_ERROR
;

676 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

677 if–
i
<0 )  
TCL_ERROR
;

678 if–!
thªad£t
[
i
].
busy
 ){

679 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

680  
TCL_ERROR
;

682 
	`thªad_waô
(&
thªad£t
[
i
]);

683 
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
thªad£t
[
i
].
pStmt
);

684 
thªad£t
[
i
].
pStmt
 = 0;

685 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, (*)0);

686  
TCL_OK
;

687 
	}
}

692 
	$Sqlôëe°4_Inô
(
T˛_I¡îp
 *
öãΩ
){

694 *
zName
;

695 
T˛_CmdProc
 *
xProc
;

696 } 
aCmd
[] = {

697 { "thªad_¸óã", (
T˛_CmdProc
*)
t˛_thªad_¸óã
 },

698 { "thªad_waô", (
T˛_CmdProc
*)
t˛_thªad_waô
 },

699 { "thªad_hÆt", (
T˛_CmdProc
*)
t˛_thªad_hÆt
 },

700 { "thªad_¨gc", (
T˛_CmdProc
*)
t˛_thªad_¨gc
 },

701 { "thªad_¨gv", (
T˛_CmdProc
*)
t˛_thªad_¨gv
 },

702 { "thªad_cﬁ«me", (
T˛_CmdProc
*)
t˛_thªad_cﬁ«me
 },

703 { "thªad_ªsu…", (
T˛_CmdProc
*)
t˛_thªad_ªsu…
 },

704 { "thªad_îr‹", (
T˛_CmdProc
*)
t˛_thªad_îr‹
 },

705 { "thªad_compûe", (
T˛_CmdProc
*)
t˛_thªad_compûe
 },

706 { "thªad_°ï", (
T˛_CmdProc
*)
t˛_thªad_°ï
 },

707 { "thªad_föÆize", (
T˛_CmdProc
*)
t˛_thªad_föÆize
 },

708 { "thªad_sw≠", (
T˛_CmdProc
*)
t˛_thªad_sw≠
 },

709 { "thªad_db_gë", (
T˛_CmdProc
*)
t˛_thªad_db_gë
 },

710 { "thªad_db_put", (
T˛_CmdProc
*)
t˛_thªad_db_put
 },

711 { "thªad_°mt_gë", (
T˛_CmdProc
*)
t˛_thªad_°mt_gë
 },

713 
i
;

715 
i
=0; i<(
aCmd
)/(aCmd[0]); i++){

716 
	`T˛_Cª©eComm™d
(
öãΩ
, 
aCmd
[
i
].
zName
,áCmd[i].
xProc
, 0, 0);

718  
TCL_OK
;

719 
	}
}

721 
	$Sqlôëe°4_Inô
(
T˛_I¡îp
 *
öãΩ
){  
TCL_OK
; 
	}
}

	@test5.c

18 
	~"sqlôeI¡.h
"

19 
	~"vdbeI¡.h
"

20 
	~"t˛.h
"

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

29 
	$bö¨ize
(

30 * 
˛õ¡D©a
,

31 
T˛_I¡îp
 *
öãΩ
,

32 
objc
,

33 
T˛_Obj
 *
CONST
 
objv
[]

35 
Àn
;

36 *
byãs
;

37 
T˛_Obj
 *
pRë
;

38 
	`as£π
(
objc
==2);

40 
byãs
 = 
	`T˛_GëSåögFromObj
(
objv
[1], &
Àn
);

41 
pRë
 = 
	`T˛_NewByãAºayObj
((
u8
*)
byãs
, 
Àn
+1);

42 
	`T˛_SëObjResu…
(
öãΩ
, 
pRë
);

43  
TCL_OK
;

44 
	}
}

57 
	$ã°_vÆue_ovîhód
(

58 * 
˛õ¡D©a
,

59 
T˛_I¡îp
 *
öãΩ
,

60 
objc
,

61 
T˛_Obj
 *
CONST
 
objv
[]

63 
do_ˇŒs
;

64 
ª≥©_cou¡
;

65 
i
;

66 
Mem
 
vÆ
;

68 if–
objc
!=3 ){

69 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

70 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " <repeat-count> <do-calls>", 0);

71  
TCL_ERROR
;

74 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
ª≥©_cou¡
ËË 
TCL_ERROR
;

75 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
do_ˇŒs
ËË 
TCL_ERROR
;

77 
vÆ
.
Êags
 = 
MEM_Så
|
MEM_Tîm
|
MEM_Sètic
;

78 
vÆ
.
z
 = "hello world";

79 
vÆ
.
íc
 = 
SQLITE_UTF8
;

81 
i
=0; i<
ª≥©_cou¡
; i++){

82 if–
do_ˇŒs
 ){

83 
	`sqlôe3_vÆue_ãxt
(&
vÆ
);

87  
TCL_OK
;

88 
	}
}

90 
u8
 
	$«me_to_íc
(
T˛_I¡îp
 *
öãΩ
, 
T˛_Obj
 *
pObj
){

91 
	sEncName
 {

92 *
zName
;

93 
u8
 
íc
;

94 } 
í˙ames
[] = {

95 { "UTF8", 
SQLITE_UTF8
 },

96 { "UTF16LE", 
SQLITE_UTF16LE
 },

97 { "UTF16BE", 
SQLITE_UTF16BE
 },

98 { "UTF16", 
SQLITE_UTF16
 },

101 
EncName
 *
pEnc
;

102 *
z
 = 
	`T˛_GëSåög
(
pObj
);

103 
pEnc
=&
í˙ames
[0];ÖEnc->
zName
;ÖEnc++){

104 if–0==
	`sqlôe3SåICmp
(
z
, 
pEnc
->
zName
) ){

108 if–!
pEnc
->
íc
 ){

109 
	`T˛_AµídResu…
(
öãΩ
, "NÿsuchÉncodög: ", 
z
, 0);

111 if–
pEnc
->
íc
==
SQLITE_UTF16
 ){

112  
SQLITE_UTF16NATIVE
;

114  
pEnc
->
íc
;

115 
	}
}

121 
	$ã°_å™¶©e
(

122 * 
˛õ¡D©a
,

123 
T˛_I¡îp
 *
öãΩ
,

124 
objc
,

125 
T˛_Obj
 *
CONST
 
objv
[]

127 
u8
 
íc_‰om
;

128 
u8
 
íc_to
;

129 
sqlôe3_vÆue
 *
pVÆ
;

131 *
z
;

132 
Àn
;

133 (*
xDñ
)(*
p
Ë
SQLITE_STATIC
;

135 if–
objc
!=4 && objc!=5 ){

136 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

137 
	`T˛_GëSåögFromObj
(
objv
[0], 0),

140  
TCL_ERROR
;

142 if–
objc
==5 ){

143 
xDñ
 = 
sqlôe3_‰ì
;

146 
íc_‰om
 = 
	`«me_to_íc
(
öãΩ
, 
objv
[2]);

147 if–!
íc_‰om
 )  
TCL_ERROR
;

148 
íc_to
 = 
	`«me_to_íc
(
öãΩ
, 
objv
[3]);

149 if–!
íc_to
 )  
TCL_ERROR
;

151 
pVÆ
 = 
	`sqlôe3VÆueNew
(0);

153 if–
íc_‰om
==
SQLITE_UTF8
 ){

154 
z
 = 
	`T˛_GëSåög
(
objv
[1]);

155 if–
objc
==5 ){

156 
z
 = 
	`sqlôe3_m¥ötf
("%s", z);

158 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, 
z
, 
íc_‰om
, 
xDñ
);

160 
z
 = (*)
	`T˛_GëByãAºayFromObj
(
objv
[1], &
Àn
);

161 if–
objc
==5 ){

162 *
zTmp
 = 
z
;

163 
z
 = 
	`sqlôe3_mÆloc
(
Àn
);

164 
	`mem˝y
(
z
, 
zTmp
, 
Àn
);

166 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, 
z
, 
íc_‰om
, 
xDñ
);

169 
z
 = (*)
	`sqlôe3VÆueText
(
pVÆ
, 
íc_to
);

170 
Àn
 = 
	`sqlôe3VÆueByãs
(
pVÆ
, 
íc_to
Ë+ (íc_to==
SQLITE_UTF8
?1:2);

171 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewByãAºayObj
((
u8
*)
z
, 
Àn
));

173 
	`sqlôe3VÆueFªe
(
pVÆ
);

175  
TCL_OK
;

176 
	}
}

184 
sqlôe3UtfSñfTe°
();

185 
	$ã°_å™¶©e_£l·e°
(

186 * 
˛õ¡D©a
,

187 
T˛_I¡îp
 *
öãΩ
,

188 
objc
,

189 
T˛_Obj
 *
CONST
 
objv
[]

191 #i‚de‡
SQLITE_OMIT_UTF16


192 
	`sqlôe3UtfSñfTe°
();

194  
SQLITE_OK
;

195 
	}
}

201 
	$Sqlôëe°5_Inô
(
T˛_I¡îp
 *
öãΩ
){

203 *
zName
;

204 
T˛_ObjCmdProc
 *
xProc
;

205 } 
aCmd
[] = {

206 { "bö¨ize", (
T˛_ObjCmdProc
*)
bö¨ize
 },

207 { "ã°_vÆue_ovîhód", (
T˛_ObjCmdProc
*)
ã°_vÆue_ovîhód
 },

208 { "ã°_å™¶©e", (
T˛_ObjCmdProc
*)
ã°_å™¶©e
 },

209 { "å™¶©e_£l·e°", (
T˛_ObjCmdProc
*)
ã°_å™¶©e_£l·e°
},

211 
i
;

212 
i
=0; i<(
aCmd
)/(aCmd[0]); i++){

213 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
aCmd
[
i
].
zName
,áCmd[i].
xProc
, 0, 0);

215  
SQLITE_OK
;

216 
	}
}

	@test6.c

17 #i‡
SQLITE_TEST


18 
	~"sqlôeI¡.h
"

19 
	~"t˛.h
"

21 #i‚de‡
SQLITE_OMIT_DISKIO


25 
CøshFûe
 
	tCøshFûe
;

26 
CøshGlobÆ
 
	tCøshGlobÆ
;

27 
WrôeBuf„r
 
	tWrôeBuf„r
;

117 
	sWrôeBuf„r
 {

118 
i64
 
	miOff£t
;

119 
	mnBuf
;

120 
u8
 *
	mzBuf
;

121 
CøshFûe
 *
	mpFûe
;

123 
WrôeBuf„r
 *
	mpNext
;

126 
	sCøshFûe
 {

127 c⁄° 
sqlôe3_io_mëhods
 *
	mpMëhod
;

128 
sqlôe3_fûe
 *
	mpRólFûe
;

129 *
	mzName
;

130 
	mÊags
;

136 
u8
 *
	mzD©a
;

137 
	mnD©a
;

138 
i64
 
	miSize
;

141 
	sCøshGlobÆ
 {

142 
WrôeBuf„r
 *
	mpWrôeLi°
;

143 
WrôeBuf„r
 *
	mpWrôeLi°End
;

145 
	miSe˘‹Size
;

146 
	miDevi˚Ch¨a˘îi°ics
;

148 
	miCøsh
;

149 
	mzCøshFûe
[500];

152 
CøshGlobÆ
 
	gg
 = {0, 0, 
SQLITE_DEFAULT_SECTOR_SIZE
, 0, 0};

157 
	gsqlôe3CøshTe°E«bÀ
 = 0;

159 *
	$¸ash_mÆloc
(
nByã
){

160  (*)
	`T˛_AŒoc
((
size_t
)
nByã
);

161 
	}
}

162 
	$¸ash_‰ì
(*
p
){

163 
	`T˛_Fªe
(
p
);

164 
	}
}

165 *
	$¸ash_ªÆloc
(*
p
, 
n
){

166  (*)
	`T˛_RóŒoc
(
p
, (
size_t
)
n
);

167 
	}
}

173 
	$wrôeDbFûe
(
CøshFûe
 *
p
, 
u8
 *
z
, 
i64
 
iAmt
, i64 
iOff
){

174 
rc
 = 
SQLITE_OK
;

175 
iSkù
 = 0;

176 if–(
iAmt
-
iSkù
)>0 ){

177 
rc
 = 
	`sqlôe3OsWrôe
(
p
->
pRólFûe
, &
z
[
iSkù
], ()(
iAmt
-iSkù), 
iOff
+iSkip);

179  
rc
;

180 
	}
}

186 
	$wrôeLi°Sync
(
CøshFûe
 *
pFûe
, 
isCøsh
){

187 
rc
 = 
SQLITE_OK
;

188 
iDc
 = 
g
.
iDevi˚Ch¨a˘îi°ics
;

190 
WrôeBuf„r
 *
pWrôe
;

191 
WrôeBuf„r
 **
µPå
;

200 
WrôeBuf„r
 *
pFöÆ
 = 0;

201 if–!
isCøsh
 ){

202 
pWrôe
=
g
.
pWrôeLi°
;ÖWrôe;ÖWrôeıWrôe->
pNext
){

203 if–
pWrôe
->
pFûe
==pFile ){

204 
pFöÆ
 = 
pWrôe
;

207 }if–
iDc
&(
SQLITE_IOCAP_SEQUENTIAL
|
SQLITE_IOCAP_SAFE_APPEND
) ){

208 
nWrôe
 = 0;

209 
iFöÆ
;

210 
pWrôe
=
g
.
pWrôeLi°
;ÖWrôe;ÖWrôeıWrôe->
pNext
Ë
nWrôe
++;

211 
	`sqlôe3_øndom√ss
((), &
iFöÆ
);

212 
iFöÆ
 = ((iFöÆ<0)?-1*iFöÆ:iFöÆ)%
nWrôe
;

213 
pWrôe
=
g
.
pWrôeLi°
; 
iFöÆ
>0;ÖWrôeıWrôe->
pNext
) iFinal--;

214 
pFöÆ
 = 
pWrôe
;

217 #ifde‡
TRACE_CRASHTEST


218 
	`¥ötf
("Syn¯%†(i†%†¸ash)\n", 
pFûe
->
zName
, (
isCøsh
?"a":"notá"));

221 
µPå
 = &
g
.
pWrôeLi°
;

222 
pWrôe
=*
µPå
; 
rc
==
SQLITE_OK
 &&ÖWrite;ÖWrite=*ppPtr){

223 
sqlôe3_fûe
 *
pRólFûe
 = 
pWrôe
->
pFûe
->pRealFile;

229 
eA˘i⁄
 = 0;

230 if–!
isCøsh
 ){

231 
eA˘i⁄
 = 2;

232 if–(
pWrôe
->
pFûe
=ıFûê|| 
iDc
&
SQLITE_IOCAP_SEQUENTIAL
) ){

233 
eA˘i⁄
 = 1;

236 
øndom
;

237 
	`sqlôe3_øndom√ss
(1, &
øndom
);

242 if–(
iDc
&
SQLITE_IOCAP_ATOMIC
Ë|| (
pWrôe
->
zBuf
==0) ){

243 
øndom
 &= 0x01;

250 if–(
iDc
&
SQLITE_IOCAP_SEQUENTIAL
 && 
pWrôe
!=
pFöÆ
) ){

251 
øndom
 = 0;

258 if–
iDc
&
SQLITE_IOCAP_SAFE_APPEND
 && 
pWrôe
->
zBuf
 ){

259 
i64
 
iSize
;

260 
	`sqlôe3OsFûeSize
(
pRólFûe
, &
iSize
);

261 if–
iSize
==
pWrôe
->
iOff£t
 ){

262 
øndom
 = 0;

266 if–(
øndom
&0x06)==0x06 ){

267 
eA˘i⁄
 = 3;

269 
eA˘i⁄
 = ((
øndom
&0x01)?2:1);

273  
eA˘i⁄
 ){

275 if–
pWrôe
->
zBuf
 ){

276 
rc
 = 
	`wrôeDbFûe
(

277 
pWrôe
->
pFûe
,ÖWrôe->
zBuf
,ÖWrôe->
nBuf
,ÖWrôe->
iOff£t


280 
rc
 = 
	`sqlôe3OsTrunˇã
(
pRólFûe
, 
pWrôe
->
iOff£t
);

282 *
µPå
 = 
pWrôe
->
pNext
;

283 #ifde‡
TRACE_CRASHTEST


284 if–
isCøsh
 ){

285 
	`¥ötf
("Writing %d bytes @ %d (%s)\n",

286 
pWrôe
->
nBuf
, (ÌWrôe->
iOff£t
,ÖWrôe->
pFûe
->
zName


290 
	`¸ash_‰ì
(
pWrôe
);

294 
µPå
 = &
pWrôe
->
pNext
;

295 #ifde‡
TRACE_CRASHTEST


296 if–
isCøsh
 ){

297 
	`¥ötf
("Omiting %d bytes @ %d (%s)\n",

298 
pWrôe
->
nBuf
, (ÌWrôe->
iOff£t
,ÖWrôe->
pFûe
->
zName


305 
u8
 *
zG¨bage
;

306 
iFú°
 = ()(
pWrôe
->
iOff£t
/
g
.
iSe˘‹Size
);

307 
iLa°
 = ()((
pWrôe
->
iOff£t
+pWrôe->
nBuf
-1)/
g
.
iSe˘‹Size
);

309 
	`as£π
(
pWrôe
->
zBuf
);

311 #ifde‡
TRACE_CRASHTEST


312 
	`¥ötf
("Trashing %d sectors @ %lld (sector %d) (%s)\n",

313 1+
iLa°
-
iFú°
, 
pWrôe
->
iOff£t
, iFú°,ÖWrôe->
pFûe
->
zName


317 
zG¨bage
 = 
	`¸ash_mÆloc
(
g
.
iSe˘‹Size
);

318 if–
zG¨bage
 ){

319 
sqlôe3_öt64
 
i
;

320 
i
=
iFú°
; 
rc
==
SQLITE_OK
 && i<=
iLa°
; i++){

321 
	`sqlôe3_øndom√ss
(
g
.
iSe˘‹Size
, 
zG¨bage
);

322 
rc
 = 
	`wrôeDbFûe
(

323 
pWrôe
->
pFûe
, 
zG¨bage
, 
g
.
iSe˘‹Size
, 
i
*g.iSectorSize

326 
	`¸ash_‰ì
(
zG¨bage
);

328 
rc
 = 
SQLITE_NOMEM
;

331 
µPå
 = &
pWrôe
->
pNext
;

336 
	`as£π
(!"Cannot happen");

339 if–
pWrôe
==
pFöÆ
 ) ;

342 if–
rc
==
SQLITE_OK
 && 
isCøsh
 ){

343 
	`exô
(-1);

346 
pWrôe
=
g
.
pWrôeLi°
;ÖWrôê&&ÖWrôe->
pNext
;ÖWrite=pWrite->pNext);

347 
g
.
pWrôeLi°End
 = 
pWrôe
;

349  
rc
;

350 
	}
}

355 
	$wrôeLi°Aµíd
(

356 
sqlôe3_fûe
 *
pFûe
,

357 
sqlôe3_öt64
 
iOff£t
,

358 c⁄° 
u8
 *
zBuf
,

359 
nBuf


361 
WrôeBuf„r
 *
pNew
;

363 
	`as£π
((
zBuf
 && 
nBuf
) || (!nBuf && !zBuf));

365 
pNew
 = (
WrôeBuf„r
 *)
	`¸ash_mÆloc
((WrôeBuf„rË+ 
nBuf
);

366 if–
pNew
==0 ){

367 
	`Ârötf
(
°dîr
, "out of memory inÅhe crash simulator\n");

369 
	`mem£t
(
pNew
, 0, (
WrôeBuf„r
)+
nBuf
);

370 
pNew
->
iOff£t
 = iOffset;

371 
pNew
->
nBuf
 =ÇBuf;

372 
pNew
->
pFûe
 = (
CøshFûe
 *)pFile;

373 if–
zBuf
 ){

374 
pNew
->
zBuf
 = (
u8
 *)&pNew[1];

375 
	`mem˝y
(
pNew
->
zBuf
, zBuf, 
nBuf
);

378 if–
g
.
pWrôeLi°
 ){

379 
	`as£π
(
g
.
pWrôeLi°End
);

380 
g
.
pWrôeLi°End
->
pNext
 = 
pNew
;

382 
g
.
pWrôeLi°
 = 
pNew
;

384 
g
.
pWrôeLi°End
 = 
pNew
;

386  
SQLITE_OK
;

387 
	}
}

392 
	$cfClo£
(
sqlôe3_fûe
 *
pFûe
){

393 
CøshFûe
 *
pCøsh
 = (CøshFûê*)
pFûe
;

394 
	`wrôeLi°Sync
(
pCøsh
, 0);

395 
	`sqlôe3OsClo£
(
pCøsh
->
pRólFûe
);

396  
SQLITE_OK
;

397 
	}
}

402 
	$cfRód
(

403 
sqlôe3_fûe
 *
pFûe
,

404 *
zBuf
,

405 
iAmt
,

406 
sqlôe_öt64
 
iOf°


408 
CøshFûe
 *
pCøsh
 = (CøshFûê*)
pFûe
;

409 
nC›y
 = ()
	`MIN
((
i64
)
iAmt
, (
pCøsh
->
iSize
 - 
iOf°
));

411 if–
nC›y
>0 ){

412 
	`mem˝y
(
zBuf
, &
pCøsh
->
zD©a
[
iOf°
], 
nC›y
);

416 if–
nC›y
<
iAmt
 ){

417  
SQLITE_IOERR_SHORT_READ
;

420  
SQLITE_OK
;

421 
	}
}

426 
	$cfWrôe
(

427 
sqlôe3_fûe
 *
pFûe
,

428 c⁄° *
zBuf
,

429 
iAmt
,

430 
sqlôe_öt64
 
iOf°


432 
CøshFûe
 *
pCøsh
 = (CøshFûê*)
pFûe
;

433 if–
iAmt
+
iOf°
>
pCøsh
->
iSize
 ){

434 
pCøsh
->
iSize
 = ()(
iAmt
+
iOf°
);

436  
pCøsh
->
iSize
>pCøsh->
nD©a
 ){

437 
u8
 *
zNew
;

438 
nNew
 = (
pCøsh
->
nD©a
*2) + 4096;

439 
zNew
 = 
	`¸ash_ªÆloc
(
pCøsh
->
zD©a
, 
nNew
);

440 if–!
zNew
 ){

441  
SQLITE_NOMEM
;

443 
	`mem£t
(&
zNew
[
pCøsh
->
nD©a
], 0, 
nNew
-pCrash->nData);

444 
pCøsh
->
nD©a
 = 
nNew
;

445 
pCøsh
->
zD©a
 = 
zNew
;

447 
	`mem˝y
(&
pCøsh
->
zD©a
[
iOf°
], 
zBuf
, 
iAmt
);

448  
	`wrôeLi°Aµíd
(
pFûe
, 
iOf°
, 
zBuf
, 
iAmt
);

449 
	}
}

454 
	$cfTrunˇã
(
sqlôe3_fûe
 *
pFûe
, 
sqlôe_öt64
 
size
){

455 
CøshFûe
 *
pCøsh
 = (CøshFûê*)
pFûe
;

456 
	`as£π
(
size
>=0);

457 if–
pCøsh
->
iSize
>
size
 ){

458 
pCøsh
->
iSize
 = ()
size
;

460  
	`wrôeLi°Aµíd
(
pFûe
, 
size
, 0, 0);

461 
	}
}

466 
	$cfSync
(
sqlôe3_fûe
 *
pFûe
, 
Êags
){

467 
CøshFûe
 *
pCøsh
 = (CøshFûê*)
pFûe
;

468 
isCøsh
 = 0;

470 c⁄° *
zName
 = 
pCøsh
->zName;

471 c⁄° *
zCøshFûe
 = 
g
.zCrashFile;

472 
nName
 = ()
	`°æí
(
zName
);

473 
nCøshFûe
 = ()
	`°æí
(
zCøshFûe
);

475 if–
nCøshFûe
>0 && 
zCøshFûe
[nCrashFile-1]=='*' ){

476 
nCøshFûe
--;

477 if–
nName
>
nCøshFûe
 )ÇName =ÇCrashFile;

480 #ifde‡
TRACE_CRASHTEST


481 
	`¥ötf
("cfSync():ÇName = %d,ÇCrashFile = %d, zName = %s, zCrashFile = %s\n",

482 
nName
, 
nCøshFûe
, 
zName
, 
zCøshFûe
);

485 if–
nName
==
nCøshFûe
 && 0==
	`memcmp
(
zName
, 
zCøshFûe
,ÇName) ){

486 #ifde‡
TRACE_CRASHTEST


487 
	`¥ötf
("cfSync():Çamêm©ched, g.iCøsh = %d\n", 
g
.
iCøsh
);

489 if–(--
g
.
iCøsh
)==0 ) 
isCøsh
 = 1;

492  
	`wrôeLi°Sync
(
pCøsh
, 
isCøsh
);

493 
	}
}

498 
	$cfFûeSize
(
sqlôe3_fûe
 *
pFûe
, 
sqlôe_öt64
 *
pSize
){

499 
CøshFûe
 *
pCøsh
 = (CøshFûê*)
pFûe
;

500 *
pSize
 = (
i64
)
pCøsh
->
iSize
;

501  
SQLITE_OK
;

502 
	}
}

507 
	$cfLock
(
sqlôe3_fûe
 *
pFûe
, 
eLock
){

508  
	`sqlôe3OsLock
(((
CøshFûe
 *)
pFûe
)->
pRólFûe
, 
eLock
);

509 
	}
}

510 
	$cfU∆ock
(
sqlôe3_fûe
 *
pFûe
, 
eLock
){

511  
	`sqlôe3OsU∆ock
(((
CøshFûe
 *)
pFûe
)->
pRólFûe
, 
eLock
);

512 
	}
}

513 
	$cfCheckRe£rvedLock
(
sqlôe3_fûe
 *
pFûe
, *
pResOut
){

514  
	`sqlôe3OsCheckRe£rvedLock
(((
CøshFûe
 *)
pFûe
)->
pRólFûe
, 
pResOut
);

515 
	}
}

516 
	$cfFûeC⁄åﬁ
(
sqlôe3_fûe
 *
pFûe
, 
›
, *
pArg
){

517 if–
›
==
SQLITE_FCNTL_SIZE_HINT
 ){

518 
CøshFûe
 *
pCøsh
 = (CøshFûê*)
pFûe
;

519 
i64
 
nByã
 = *(i64 *)
pArg
;

520 if–
nByã
>
pCøsh
->
iSize
 ){

521 if–
SQLITE_OK
==
	`wrôeLi°Aµíd
(
pFûe
, 
nByã
, 0, 0) ){

522 
pCøsh
->
iSize
 = ()
nByã
;

525  
SQLITE_OK
;

527  
	`sqlôe3OsFûeC⁄åﬁ
(((
CøshFûe
 *)
pFûe
)->
pRólFûe
, 
›
, 
pArg
);

528 
	}
}

535 
	$cfSe˘‹Size
(
sqlôe3_fûe
 *
pFûe
){

536  
g
.
iSe˘‹Size
;

537 
	}
}

538 
	$cfDevi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
 *
pFûe
){

539  
g
.
iDevi˚Ch¨a˘îi°ics
;

540 
	}
}

545 
	$cfShmLock
(
sqlôe3_fûe
 *
pFûe
, 
of°
, 
n
, 
Êags
){

546  
	`sqlôe3OsShmLock
(((
CøshFûe
*)
pFûe
)->
pRólFûe
, 
of°
, 
n
, 
Êags
);

547 
	}
}

548 
	$cfShmB¨rõr
(
sqlôe3_fûe
 *
pFûe
){

549 
	`sqlôe3OsShmB¨rõr
(((
CøshFûe
*)
pFûe
)->
pRólFûe
);

550 
	}
}

551 
	$cfShmUnm≠
(
sqlôe3_fûe
 *
pFûe
, 
dñFœg
){

552  
	`sqlôe3OsShmUnm≠
(((
CøshFûe
*)
pFûe
)->
pRólFûe
, 
dñFœg
);

553 
	}
}

554 
	$cfShmM≠
(

555 
sqlôe3_fûe
 *
pFûe
,

556 
iRegi⁄
,

557 
sz
,

558 
w
,

559 vﬁ©ûê**
µ


561  
	`sqlôe3OsShmM≠
(((
CøshFûe
*)
pFûe
)->
pRólFûe
, 
iRegi⁄
, 
sz
, 
w
, 
µ
);

562 
	}
}

564 c⁄° 
sqlôe3_io_mëhods
 
	gCøshFûeVèb
 = {

566 
cfClo£
,

567 
cfRód
,

568 
cfWrôe
,

569 
cfTrunˇã
,

570 
cfSync
,

571 
cfFûeSize
,

572 
cfLock
,

573 
cfU∆ock
,

574 
cfCheckRe£rvedLock
,

575 
cfFûeC⁄åﬁ
,

576 
cfSe˘‹Size
,

577 
cfDevi˚Ch¨a˘îi°ics
,

578 
cfShmM≠
,

579 
cfShmLock
,

580 
cfShmB¨rõr
,

581 
cfShmUnm≠


587 
	s¸ashAµD©a
 {

588 
sqlôe3_vfs
 *
	mpOrig
;

600 
	$cfO≥n
(

601 
sqlôe3_vfs
 *
pCfVfs
,

602 c⁄° *
zName
,

603 
sqlôe3_fûe
 *
pFûe
,

604 
Êags
,

605 *
pOutFœgs


607 
sqlôe3_vfs
 *
pVfs
 = (sqlôe3_vf†*)
pCfVfs
->
pAµD©a
;

608 
rc
;

609 
CøshFûe
 *
pWøµî
 = (CøshFûê*)
pFûe
;

610 
sqlôe3_fûe
 *
pRól
 = (sqlôe3_fûe*)&
pWøµî
[1];

612 
	`mem£t
(
pWøµî
, 0, (
CøshFûe
));

613 
rc
 = 
	`sqlôe3OsO≥n
(
pVfs
, 
zName
, 
pRól
, 
Êags
, 
pOutFœgs
);

615 if–
rc
==
SQLITE_OK
 ){

616 
i64
 
iSize
;

617 
pWøµî
->
pMëhod
 = &
CøshFûeVèb
;

618 
pWøµî
->
zName
 = (*)zName;

619 
pWøµî
->
pRólFûe
 = 
pRól
;

620 
rc
 = 
	`sqlôe3OsFûeSize
(
pRól
, &
iSize
);

621 
pWøµî
->
iSize
 = ()iSize;

622 
pWøµî
->
Êags
 = flags;

624 if–
rc
==
SQLITE_OK
 ){

625 
pWøµî
->
nD©a
 = ()(4096 +ÖWøµî->
iSize
);

626 
pWøµî
->
zD©a
 = 
	`¸ash_mÆloc
’Wøµî->
nD©a
);

627 if–
pWøµî
->
zD©a
 ){

636 
i64
 
iOff
;

638 
	`mem£t
(
pWøµî
->
zD©a
, 0,ÖWøµî->
nD©a
);

639 
iOff
=0; iOff<
pWøµî
->
iSize
; iOff += 512){

640 
nRód
 = ()(
pWøµî
->
iSize
 - 
iOff
);

641 if–
nRód
>512 )ÇRead = 512;

642 
rc
 = 
	`sqlôe3OsRód
(
pRól
, &
pWøµî
->
zD©a
[
iOff
], 
nRód
, iOff);

645 
rc
 = 
SQLITE_NOMEM
;

648 if–
rc
!=
SQLITE_OK
 && 
pWøµî
->
pMëhod
 ){

649 
	`sqlôe3OsClo£
(
pFûe
);

651  
rc
;

652 
	}
}

654 
	$cfDñëe
(
sqlôe3_vfs
 *
pCfVfs
, c⁄° *
zP©h
, 
dúSync
){

655 
sqlôe3_vfs
 *
pVfs
 = (sqlôe3_vf†*)
pCfVfs
->
pAµD©a
;

656  
pVfs
->
	`xDñëe
’Vfs, 
zP©h
, 
dúSync
);

657 
	}
}

658 
	$cfAc˚ss
(

659 
sqlôe3_vfs
 *
pCfVfs
,

660 c⁄° *
zP©h
,

661 
Êags
,

662 *
pResOut


664 
sqlôe3_vfs
 *
pVfs
 = (sqlôe3_vf†*)
pCfVfs
->
pAµD©a
;

665  
pVfs
->
	`xAc˚ss
’Vfs, 
zP©h
, 
Êags
, 
pResOut
);

666 
	}
}

667 
	$cfFuŒP©h«me
(

668 
sqlôe3_vfs
 *
pCfVfs
,

669 c⁄° *
zP©h
,

670 
nP©hOut
,

671 *
zP©hOut


673 
sqlôe3_vfs
 *
pVfs
 = (sqlôe3_vf†*)
pCfVfs
->
pAµD©a
;

674  
pVfs
->
	`xFuŒP©h«me
’Vfs, 
zP©h
, 
nP©hOut
, 
zP©hOut
);

675 
	}
}

676 *
	$cfDlO≥n
(
sqlôe3_vfs
 *
pCfVfs
, c⁄° *
zP©h
){

677 
sqlôe3_vfs
 *
pVfs
 = (sqlôe3_vf†*)
pCfVfs
->
pAµD©a
;

678  
pVfs
->
	`xDlO≥n
’Vfs, 
zP©h
);

679 
	}
}

680 
	$cfDlEº‹
(
sqlôe3_vfs
 *
pCfVfs
, 
nByã
, *
zEºMsg
){

681 
sqlôe3_vfs
 *
pVfs
 = (sqlôe3_vf†*)
pCfVfs
->
pAµD©a
;

682 
pVfs
->
	`xDlEº‹
’Vfs, 
nByã
, 
zEºMsg
);

683 
	}
}

684 (*
	$cfDlSym
(
sqlôe3_vfs
 *
pCfVfs
, *
pH
, c⁄° *
zSym
))(){

685 
sqlôe3_vfs
 *
pVfs
 = (sqlôe3_vf†*)
pCfVfs
->
pAµD©a
;

686  
pVfs
->
	`xDlSym
’Vfs, 
pH
, 
zSym
);

687 
	}
}

688 
	$cfDlClo£
(
sqlôe3_vfs
 *
pCfVfs
, *
pH™dÀ
){

689 
sqlôe3_vfs
 *
pVfs
 = (sqlôe3_vf†*)
pCfVfs
->
pAµD©a
;

690 
pVfs
->
	`xDlClo£
’Vfs, 
pH™dÀ
);

691 
	}
}

692 
	$cfR™dom√ss
(
sqlôe3_vfs
 *
pCfVfs
, 
nByã
, *
zBufOut
){

693 
sqlôe3_vfs
 *
pVfs
 = (sqlôe3_vf†*)
pCfVfs
->
pAµD©a
;

694  
pVfs
->
	`xR™dom√ss
’Vfs, 
nByã
, 
zBufOut
);

695 
	}
}

696 
	$cfSÀï
(
sqlôe3_vfs
 *
pCfVfs
, 
nMi¸o
){

697 
sqlôe3_vfs
 *
pVfs
 = (sqlôe3_vf†*)
pCfVfs
->
pAµD©a
;

698  
pVfs
->
	`xSÀï
’Vfs, 
nMi¸o
);

699 
	}
}

700 
	$cfCuºítTime
(
sqlôe3_vfs
 *
pCfVfs
, *
pTimeOut
){

701 
sqlôe3_vfs
 *
pVfs
 = (sqlôe3_vf†*)
pCfVfs
->
pAµD©a
;

702  
pVfs
->
	`xCuºítTime
’Vfs, 
pTimeOut
);

703 
	}
}

704 
	$cfGëLa°Eº‹
(
sqlôe3_vfs
 *
pCfVfs
, 
n
, *
z
){

705 
sqlôe3_vfs
 *
pVfs
 = (sqlôe3_vf†*)
pCfVfs
->
pAµD©a
;

706  
pVfs
->
	`xGëLa°Eº‹
’Vfs, 
n
, 
z
);

707 
	}
}

709 
	$¥o˚ssDevSymArgs
(

710 
T˛_I¡îp
 *
öãΩ
,

711 
objc
,

712 
T˛_Obj
 *
CONST
 
objv
[],

713 *
piDevi˚Ch¨
,

714 *
piSe˘‹Size


716 
	sDevi˚Fœg
 {

717 *
zName
;

718 
iVÆue
;

719 } 
aFœg
[] = {

720 { "©omic", 
SQLITE_IOCAP_ATOMIC
 },

721 { "©omic512", 
SQLITE_IOCAP_ATOMIC512
 },

722 { "©omic1k", 
SQLITE_IOCAP_ATOMIC1K
 },

723 { "©omic2k", 
SQLITE_IOCAP_ATOMIC2K
 },

724 { "©omic4k", 
SQLITE_IOCAP_ATOMIC4K
 },

725 { "©omic8k", 
SQLITE_IOCAP_ATOMIC8K
 },

726 { "©omic16k", 
SQLITE_IOCAP_ATOMIC16K
 },

727 { "©omic32k", 
SQLITE_IOCAP_ATOMIC32K
 },

728 { "©omic64k", 
SQLITE_IOCAP_ATOMIC64K
 },

729 { "£quítül", 
SQLITE_IOCAP_SEQUENTIAL
 },

730 { "ß„_≠≥nd", 
SQLITE_IOCAP_SAFE_APPEND
 },

731 { "powîß„_ovîwrôe", 
SQLITE_IOCAP_POWERSAFE_OVERWRITE
 },

735 
i
;

736 
iDc
 = 0;

737 
iSe˘‹Size
 = 0;

738 
£tSe˘‹size
 = 0;

739 
£tDevi˚Ch¨
 = 0;

741 
i
=0; i<
objc
; i+=2){

742 
nO±
;

743 *
zO±
 = 
	`T˛_GëSåögFromObj
(
objv
[
i
], &
nO±
);

745 if–(
nO±
>11 ||ÇO±<2 || 
	`°∫cmp
("-£˘‹size", 
zO±
,ÇOpt))

746 && (
nO±
>16 ||ÇO±<2 || 
	`°∫cmp
("-ch¨a˘îi°ics", 
zO±
,ÇOpt))

748 
	`T˛_AµídResu…
(
öãΩ
,

749 "Bad o±i⁄: \"", 
zO±
,

752  
TCL_ERROR
;

754 if–
i
==
objc
-1 ){

755 
	`T˛_AµídResu…
(
öãΩ
, "O±i⁄Ñequúe†™árgumít: \"", 
zO±
, "\"",0);

756  
TCL_ERROR
;

759 if–
zO±
[1]=='s' ){

760 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[
i
+1], &
iSe˘‹Size
) ){

761  
TCL_ERROR
;

763 
£tSe˘‹size
 = 1;

765 
j
;

766 
T˛_Obj
 **
≠Obj
;

767 
nObj
;

768 if–
	`T˛_Li°ObjGëEÀmíts
(
öãΩ
, 
objv
[
i
+1], &
nObj
, &
≠Obj
) ){

769  
TCL_ERROR
;

771 
j
=0; j<
nObj
; j++){

772 
rc
;

773 
iChoi˚
;

774 
T˛_Obj
 *
pFœg
 = 
	`T˛_Du∂iˇãObj
(
≠Obj
[
j
]);

775 
	`T˛_In¸RefCou¡
(
pFœg
);

776 
	`T˛_UtfToLowî
(
	`T˛_GëSåög
(
pFœg
));

778 
rc
 = 
	`T˛_GëIndexFromObjSåu˘
(

779 
öãΩ
, 
pFœg
, 
aFœg
, ◊Fœg[0]), "nÿsuch fœg", 0, &
iChoi˚


781 
	`T˛_De¸RefCou¡
(
pFœg
);

782 if–
rc
 ){

783  
TCL_ERROR
;

786 
iDc
 |
aFœg
[
iChoi˚
].
iVÆue
;

788 
£tDevi˚Ch¨
 = 1;

792 if–
£tDevi˚Ch¨
 ){

793 *
piDevi˚Ch¨
 = 
iDc
;

795 if–
£tSe˘‹size
 ){

796 *
piSe˘‹Size
 = 
iSe˘‹Size
;

799  
TCL_OK
;

800 
	}
}

808 
	$¸ashE«bÀCmd
(

809 * 
˛õ¡D©a
,

810 
T˛_I¡îp
 *
öãΩ
,

811 
objc
,

812 
T˛_Obj
 *
CONST
 
objv
[]

814 
isE«bÀ
;

815 
sqlôe3_vfs
 
¸ashVfs
 = {

823 
cfO≥n
,

824 
cfDñëe
,

825 
cfAc˚ss
,

826 
cfFuŒP©h«me
,

827 
cfDlO≥n
,

828 
cfDlEº‹
,

829 
cfDlSym
,

830 
cfDlClo£
,

831 
cfR™dom√ss
,

832 
cfSÀï
,

833 
cfCuºítTime
,

834 
cfGëLa°Eº‹
,

838 if–
objc
!=2 ){

839 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "ENABLE");

840  
TCL_ERROR
;

843 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[1], &
isE«bÀ
) ){

844  
TCL_ERROR
;

847 if–(
isE«bÀ
 && 
¸ashVfs
.
pAµD©a
) || (!isEnable && !crashVfs.pAppData) ){

848  
TCL_OK
;

851 if–
¸ashVfs
.
pAµD©a
==0 ){

852 
sqlôe3_vfs
 *
pOrigöÆVfs
 = 
	`sqlôe3_vfs_föd
(0);

853 
¸ashVfs
.
mxP©h«me
 = 
pOrigöÆVfs
->mxPathname;

854 
¸ashVfs
.
pAµD©a
 = (*)
pOrigöÆVfs
;

855 
¸ashVfs
.
szOsFûe
 = (
CøshFûe
Ë+ 
pOrigöÆVfs
->szOsFile;

856 
	`sqlôe3_vfs_ªgi°î
(&
¸ashVfs
, 0);

858 
¸ashVfs
.
pAµD©a
 = 0;

859 
	`sqlôe3_vfs_uƒegi°î
(&
¸ashVfs
);

862  
TCL_OK
;

863 
	}
}

883 
	$¸ashP¨amsObjCmd
(

884 * 
˛õ¡D©a
,

885 
T˛_I¡îp
 *
öãΩ
,

886 
objc
,

887 
T˛_Obj
 *
CONST
 
objv
[]

889 
iDñay
;

890 c⁄° *
zCøshFûe
;

891 
nCøshFûe
, 
iDc
, 
iSe˘‹Size
;

893 
iDc
 = -1;

894 
iSe˘‹Size
 = -1;

896 if–
objc
<3 ){

897 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "?OPTIONS? DELAY CRASHFILE");

898 
îr‹
;

901 
zCøshFûe
 = 
	`T˛_GëSåögFromObj
(
objv
[
objc
-1], &
nCøshFûe
);

902 if–
nCøshFûe
>=(
g
.
zCøshFûe
) ){

903 
	`T˛_AµídResu…
(
öãΩ
, "Fûíamêi†toÿl⁄g: \"", 
zCøshFûe
, "\"", 0);

904 
îr‹
;

906 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[
objc
-2], &
iDñay
) ){

907 
îr‹
;

910 if–
	`¥o˚ssDevSymArgs
(
öãΩ
, 
objc
-3, &
objv
[1], &
iDc
, &
iSe˘‹Size
) ){

911  
TCL_ERROR
;

914 if–
iDc
>=0 ){

915 
g
.
iDevi˚Ch¨a˘îi°ics
 = 
iDc
;

917 if–
iSe˘‹Size
>=0 ){

918 
g
.
iSe˘‹Size
 = iSectorSize;

921 
g
.
iCøsh
 = 
iDñay
;

922 
	`mem˝y
(
g
.
zCøshFûe
, zCøshFûe, 
nCøshFûe
+1);

923 
sqlôe3CøshTe°E«bÀ
 = 1;

924  
TCL_OK
;

926 
îr‹
:

927  
TCL_ERROR
;

928 
	}
}

930 
	$devSymObjCmd
(

931 * 
˛õ¡D©a
,

932 
T˛_I¡îp
 *
öãΩ
,

933 
objc
,

934 
T˛_Obj
 *
CONST
 
objv
[]

936 
	`devsym_ªgi°î
(
iDevi˚Ch¨
, 
iSe˘‹Size
);

938 
iDc
 = -1;

939 
iSe˘‹Size
 = -1;

941 if–
	`¥o˚ssDevSymArgs
(
öãΩ
, 
objc
-1, &
objv
[1], &
iDc
, &
iSe˘‹Size
) ){

942  
TCL_ERROR
;

944 
	`devsym_ªgi°î
(
iDc
, 
iSe˘‹Size
);

946  
TCL_OK
;

948 
	}
}

953 
	$dsUƒegi°îObjCmd
(

954 * 
˛õ¡D©a
,

955 
T˛_I¡îp
 *
öãΩ
,

956 
objc
,

957 
T˛_Obj
 *
CONST
 
objv
[]

959 
	`devsym_uƒegi°î
();

961 if–
objc
!=1 ){

962 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

963  
TCL_ERROR
;

966 
	`devsym_uƒegi°î
();

967  
TCL_OK
;

968 
	}
}

973 
	$jtObjCmd
(

974 * 
˛õ¡D©a
,

975 
T˛_I¡îp
 *
öãΩ
,

976 
objc
,

977 
T˛_Obj
 *
CONST
 
objv
[]

979 
	`jt_ªgi°î
(*, );

980 *
zP¨ít
 = 0;

982 if–
objc
!=2 && objc!=3 ){

983 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "?-default? PARENT-VFS");

984  
TCL_ERROR
;

986 
zP¨ít
 = 
	`T˛_GëSåög
(
objv
[1]);

987 if–
objc
==3 ){

988 if–
	`°rcmp
(
zP¨ít
, "-default") ){

989 
	`T˛_AµídResu…
(
öãΩ
,

990 "bad o±i⁄ \"", 
zP¨ít
, "\": must be -default", 0

992  
TCL_ERROR
;

994 
zP¨ít
 = 
	`T˛_GëSåög
(
objv
[2]);

997 if–!(*
zP¨ít
) ){

998 
zP¨ít
 = 0;

1000 if–
	`jt_ªgi°î
(
zP¨ít
, 
objc
==3) ){

1001 
	`T˛_AµídResu…
(
öãΩ
, "Error in jt_register", 0);

1002  
TCL_ERROR
;

1005  
TCL_OK
;

1006 
	}
}

1011 
	$jtUƒegi°îObjCmd
(

1012 * 
˛õ¡D©a
,

1013 
T˛_I¡îp
 *
öãΩ
,

1014 
objc
,

1015 
T˛_Obj
 *
CONST
 
objv
[]

1017 
	`jt_uƒegi°î
();

1019 if–
objc
!=1 ){

1020 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

1021  
TCL_ERROR
;

1024 
	`jt_uƒegi°î
();

1025  
TCL_OK
;

1026 
	}
}

1033 
	$Sqlôëe°6_Inô
(
T˛_I¡îp
 *
öãΩ
){

1034 #i‚de‡
SQLITE_OMIT_DISKIO


1035 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlôe3_¸ash_íabÀ", 
¸ashE«bÀCmd
, 0, 0);

1036 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlôe3_¸ash∑øms", 
¸ashP¨amsObjCmd
, 0, 0);

1037 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlôe3_simuœã_devi˚", 
devSymObjCmd
, 0, 0);

1038 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "uƒegi°î_devsim", 
dsUƒegi°îObjCmd
, 0, 0);

1039 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "ªgi°î_jt_vfs", 
jtObjCmd
, 0, 0);

1040 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "uƒegi°î_jt_vfs", 
jtUƒegi°îObjCmd
, 0, 0);

1042  
TCL_OK
;

1043 
	}
}

	@test7.c

15 
	~"sqlôeI¡.h
"

16 
	~"t˛.h
"

22 #i‡
deföed
(
SQLITE_SERVER
Ë&& !deföed(
SQLITE_OMIT_SHARED_CACHE
) && \

23 
	gSQLITE_OS_UNIX
 && 
	gSQLITE_THREADSAFE


25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<±hªad.h
>

28 
	~<sched.h
>

29 
	~<˘y≥.h
>

34 
sqlôe3_˛õ¡_›í
(c⁄° *, 
sqlôe3
**);

35 
sqlôe3_˛õ¡_¥ï¨e
(
sqlôe3
*,const *,,

36 
sqlôe3_°mt
**,const **);

37 
sqlôe3_˛õ¡_°ï
(
sqlôe3_°mt
*);

38 
sqlôe3_˛õ¡_ª£t
(
sqlôe3_°mt
*);

39 
sqlôe3_˛õ¡_föÆize
(
sqlôe3_°mt
*);

40 
sqlôe3_˛õ¡_˛o£
(
sqlôe3
*);

41 
sqlôe3_£rvî_°¨t
();

42 
sqlôe3_£rvî_°›
();

43 
sqlôe3_£rvî_°¨t2
(*
≤De¸
);

49 
Thªad
 
	tThªad
;

50 
	sThªad
 {

54 *
	mzFûíame
;

55 (*
	mxOp
)(
	mThªad
*);

56 *
	mzArg
;

57 vﬁ©ûê
	m›num
;

58 vﬁ©ûê
	mbusy
;

63 vﬁ©ûê
	mcom∂ëed
;

64 
sqlôe3
 *
	mdb
;

65 
sqlôe3_°mt
 *
	mpStmt
;

66 *
	mzEº
;

67 *
	mzSèticEº
;

68 
	mrc
;

69 
	m¨gc
;

70 c⁄° *
	m¨gv
[100];

71 c⁄° *
	mcﬁv
[100];

78 
	mnSîvî
;

85 
	#N_THREAD
 26

	)

86 
Thªad
 
	gthªad£t
[
N_THREAD
];

91 *
	$˛õ¡_maö
(*
pArg
){

92 
Thªad
 *
p
 = (Thªad*)
pArg
;

93 if–
p
->
db
 ){

94 
	`sqlôe3_˛õ¡_˛o£
(
p
->
db
);

96 
	`sqlôe3_˛õ¡_›í
(
p
->
zFûíame
, &p->
db
);

97 if–
SQLITE_OK
!=
	`sqlôe3_îrcode
(
p
->
db
) ){

98 
p
->
zEº
 = 
	`°rdup
(
	`sqlôe3_îrmsg
’->
db
));

99 
	`sqlôe3_˛õ¡_˛o£
(
p
->
db
);

100 
p
->
db
 = 0;

102 
p
->
pStmt
 = 0;

103 
p
->
com∂ëed
 = 1;

104  
p
->
›num
<ı->
com∂ëed
 ) 
	`sched_yõld
();

105  
p
->
xOp
 ){

106 if–
p
->
zEº
 &&Ö->zEº!ı->
zSèticEº
 ){

107 
	`sqlôe3_‰ì
(
p
->
zEº
);

108 
p
->
zEº
 = 0;

110 (*
p
->
xOp
)(p);

111 
p
->
com∂ëed
++;

112  
p
->
›num
<ı->
com∂ëed
 ) 
	`sched_yõld
();

114 if–
p
->
pStmt
 ){

115 
	`sqlôe3_˛õ¡_föÆize
(
p
->
pStmt
);

116 
p
->
pStmt
 = 0;

118 if–
p
->
db
 ){

119 
	`sqlôe3_˛õ¡_˛o£
(
p
->
db
);

120 
p
->
db
 = 0;

122 if–
p
->
zEº
 &&Ö->zEº!ı->
zSèticEº
 ){

123 
	`sqlôe3_‰ì
(
p
->
zEº
);

124 
p
->
zEº
 = 0;

126 
p
->
com∂ëed
++;

127 #i‚de‡
SQLITE_OMIT_DEPRECATED


128 
	`sqlôe3_thªad_˛ónup
();

131 
	}
}

138 
	$∑r£_˛õ¡_id
(
T˛_I¡îp
 *
öãΩ
, c⁄° *
zArg
){

139 if–
zArg
==0 || zArg[0]==0 || zArg[1]!=0 || !
	`isuµî
(()zArg[0]) ){

140 
	`T˛_AµídResu…
(
öãΩ
, "thread ID must beán upper caseÜetter", 0);

143  
zArg
[0] - 'A';

144 
	}
}

152 
	$t˛_˛õ¡_¸óã
(

153 *
NŸU£d
,

154 
T˛_I¡îp
 *
öãΩ
,

155 
¨gc
,

156 c⁄° **
¨gv


158 
i
;

159 
±hªad_t
 
x
;

160 
rc
;

162 if–
¨gc
!=3 ){

163 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

165  
TCL_ERROR
;

167 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

168 if–
i
<0 )  
TCL_ERROR
;

169 if–
thªad£t
[
i
].
busy
 ){

170 
	`T˛_AµídResu…
(
öãΩ
, "thªad ", 
¨gv
[1], " isálreadyÑunning", 0);

171  
TCL_ERROR
;

173 
thªad£t
[
i
].
busy
 = 1;

174 
	`sqlôe3_‰ì
(
thªad£t
[
i
].
zFûíame
);

175 
thªad£t
[
i
].
zFûíame
 = 
	`sqlôe3_m¥ötf
("%s", 
¨gv
[2]);

176 
thªad£t
[
i
].
›num
 = 1;

177 
thªad£t
[
i
].
com∂ëed
 = 0;

178 
rc
 = 
	`±hªad_¸óã
(&
x
, 0, 
˛õ¡_maö
, &
thªad£t
[
i
]);

179 if–
rc
 ){

180 
	`T˛_AµídResu…
(
öãΩ
, "failedÅo createÅheÅhread", 0);

181 
	`sqlôe3_‰ì
(
thªad£t
[
i
].
zFûíame
);

182 
thªad£t
[
i
].
busy
 = 0;

183  
TCL_ERROR
;

185 
	`±hªad_dëach
(
x
);

186 if–
thªad£t
[
i
].
nSîvî
==0 ){

187 
thªad£t
[
i
].
nSîvî
 = 1;

188 
	`sqlôe3_£rvî_°¨t2
(&
thªad£t
[
i
].
nSîvî
);

190  
TCL_OK
;

191 
	}
}

196 
	$˛õ¡_waô
(
Thªad
 *
p
){

197  
p
->
›num
>p->
com∂ëed
 ) 
	`sched_yõld
();

198 
	}
}

205 
	$t˛_˛õ¡_waô
(

206 *
NŸU£d
,

207 
T˛_I¡îp
 *
öãΩ
,

208 
¨gc
,

209 c⁄° **
¨gv


211 
i
;

213 if–
¨gc
!=2 ){

214 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

216  
TCL_ERROR
;

218 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

219 if–
i
<0 )  
TCL_ERROR
;

220 if–!
thªad£t
[
i
].
busy
 ){

221 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

222  
TCL_ERROR
;

224 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

225  
TCL_OK
;

226 
	}
}

231 
	$°›_thªad
(
Thªad
 *
p
){

232 
	`˛õ¡_waô
(
p
);

233 
p
->
xOp
 = 0;

234 
p
->
›num
++;

235 
	`˛õ¡_waô
(
p
);

236 
	`sqlôe3_‰ì
(
p
->
zArg
);

237 
p
->
zArg
 = 0;

238 
	`sqlôe3_‰ì
(
p
->
zFûíame
);

239 
p
->
zFûíame
 = 0;

240 
p
->
busy
 = 0;

241 
	}
}

249 
	$t˛_˛õ¡_hÆt
(

250 *
NŸU£d
,

251 
T˛_I¡îp
 *
öãΩ
,

252 
¨gc
,

253 c⁄° **
¨gv


255 
i
;

257 if–
¨gc
!=2 ){

258 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

260  
TCL_ERROR
;

262 if–
¨gv
[1][0]=='*' &&árgv[1][1]==0 ){

263 
i
=0; i<
N_THREAD
; i++){

264 if–
thªad£t
[
i
].
busy
 ){

265 
	`°›_thªad
(&
thªad£t
[
i
]);

269 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

270 if–
i
<0 )  
TCL_ERROR
;

271 if–!
thªad£t
[
i
].
busy
 ){

272 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

273  
TCL_ERROR
;

275 
	`°›_thªad
(&
thªad£t
[
i
]);

279 
i
=0; i<
N_THREAD
 && 
thªad£t
[i].
busy
==0; i++){}

280 if–
i
>=
N_THREAD
 ){

281 
	`sqlôe3_£rvî_°›
();

283 
i
=0; i<
N_THREAD
 && 
thªad£t
[i].
nSîvî
==0; i++);

284 if–
i
==
N_THREAD
 ) ;

285 
	`sched_yõld
();

288  
TCL_OK
;

289 
	}
}

297 
	$t˛_˛õ¡_¨gc
(

298 *
NŸU£d
,

299 
T˛_I¡îp
 *
öãΩ
,

300 
¨gc
,

301 c⁄° **
¨gv


303 
i
;

304 
zBuf
[100];

306 if–
¨gc
!=2 ){

307 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

309  
TCL_ERROR
;

311 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

312 if–
i
<0 )  
TCL_ERROR
;

313 if–!
thªad£t
[
i
].
busy
 ){

314 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

315  
TCL_ERROR
;

317 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

318 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%d", 
thªad£t
[
i
].
¨gc
);

319 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

320  
TCL_OK
;

321 
	}
}

329 
	$t˛_˛õ¡_¨gv
(

330 *
NŸU£d
,

331 
T˛_I¡îp
 *
öãΩ
,

332 
¨gc
,

333 c⁄° **
¨gv


335 
i
;

336 
n
;

338 if–
¨gc
!=3 ){

339 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

341  
TCL_ERROR
;

343 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

344 if–
i
<0 )  
TCL_ERROR
;

345 if–!
thªad£t
[
i
].
busy
 ){

346 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

347  
TCL_ERROR
;

349 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
n
ËË 
TCL_ERROR
;

350 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

351 if–
n
<0 ||Ç>=
thªad£t
[
i
].
¨gc
 ){

352 
	`T˛_AµídResu…
(
öãΩ
, "columnÇumber out ofÑange", 0);

353  
TCL_ERROR
;

355 
	`T˛_AµídResu…
(
öãΩ
, 
thªad£t
[
i
].
¨gv
[
n
], 0);

356  
TCL_OK
;

357 
	}
}

365 
	$t˛_˛õ¡_cﬁ«me
(

366 *
NŸU£d
,

367 
T˛_I¡îp
 *
öãΩ
,

368 
¨gc
,

369 c⁄° **
¨gv


371 
i
;

372 
n
;

374 if–
¨gc
!=3 ){

375 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

377  
TCL_ERROR
;

379 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

380 if–
i
<0 )  
TCL_ERROR
;

381 if–!
thªad£t
[
i
].
busy
 ){

382 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

383  
TCL_ERROR
;

385 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
n
ËË 
TCL_ERROR
;

386 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

387 if–
n
<0 ||Ç>=
thªad£t
[
i
].
¨gc
 ){

388 
	`T˛_AµídResu…
(
öãΩ
, "columnÇumber out ofÑange", 0);

389  
TCL_ERROR
;

391 
	`T˛_AµídResu…
(
öãΩ
, 
thªad£t
[
i
].
cﬁv
[
n
], 0);

392  
TCL_OK
;

393 
	}
}

395 c⁄° *
sqlôe3EºName
();

403 
	$t˛_˛õ¡_ªsu…
(

404 *
NŸU£d
,

405 
T˛_I¡îp
 *
öãΩ
,

406 
¨gc
,

407 c⁄° **
¨gv


409 
i
;

410 c⁄° *
zName
;

412 if–
¨gc
!=2 ){

413 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

415  
TCL_ERROR
;

417 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

418 if–
i
<0 )  
TCL_ERROR
;

419 if–!
thªad£t
[
i
].
busy
 ){

420 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

421  
TCL_ERROR
;

423 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

424 
zName
 = 
	`sqlôe3EºName
(
thªad£t
[
i
].
rc
);

425 
	`T˛_AµídResu…
(
öãΩ
, 
zName
, 0);

426  
TCL_OK
;

427 
	}
}

435 
	$t˛_˛õ¡_îr‹
(

436 *
NŸU£d
,

437 
T˛_I¡îp
 *
öãΩ
,

438 
¨gc
,

439 c⁄° **
¨gv


441 
i
;

443 if–
¨gc
!=2 ){

444 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

446  
TCL_ERROR
;

448 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

449 if–
i
<0 )  
TCL_ERROR
;

450 if–!
thªad£t
[
i
].
busy
 ){

451 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

452  
TCL_ERROR
;

454 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

455 
	`T˛_AµídResu…
(
öãΩ
, 
thªad£t
[
i
].
zEº
, 0);

456  
TCL_OK
;

457 
	}
}

462 
	$do_compûe
(
Thªad
 *
p
){

463 if–
p
->
db
==0 ){

464 
p
->
zEº
 =Ö->
zSèticEº
 = "no database is open";

465 
p
->
rc
 = 
SQLITE_ERROR
;

468 if–
p
->
pStmt
 ){

469 
	`sqlôe3_˛õ¡_föÆize
(
p
->
pStmt
);

470 
p
->
pStmt
 = 0;

472 
p
->
rc
 = 
	`sqlôe3_˛õ¡_¥ï¨e
’->
db
,Ö->
zArg
, -1, &p->
pStmt
, 0);

473 
	}
}

480 
	$t˛_˛õ¡_compûe
(

481 *
NŸU£d
,

482 
T˛_I¡îp
 *
öãΩ
,

483 
¨gc
,

484 c⁄° **
¨gv


486 
i
;

487 if–
¨gc
!=3 ){

488 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

490  
TCL_ERROR
;

492 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

493 if–
i
<0 )  
TCL_ERROR
;

494 if–!
thªad£t
[
i
].
busy
 ){

495 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

496  
TCL_ERROR
;

498 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

499 
thªad£t
[
i
].
xOp
 = 
do_compûe
;

500 
	`sqlôe3_‰ì
(
thªad£t
[
i
].
zArg
);

501 
thªad£t
[
i
].
zArg
 = 
	`sqlôe3_m¥ötf
("%s", 
¨gv
[2]);

502 
thªad£t
[
i
].
›num
++;

503  
TCL_OK
;

504 
	}
}

509 
	$do_°ï
(
Thªad
 *
p
){

510 
i
;

511 if–
p
->
pStmt
==0 ){

512 
p
->
zEº
 =Ö->
zSèticEº
 = "no virtual machineávailable";

513 
p
->
rc
 = 
SQLITE_ERROR
;

516 
p
->
rc
 = 
	`sqlôe3_˛õ¡_°ï
’->
pStmt
);

517 if–
p
->
rc
==
SQLITE_ROW
 ){

518 
p
->
¨gc
 = 
	`sqlôe3_cﬁumn_cou¡
’->
pStmt
);

519 
i
=0; i<
	`sqlôe3_d©a_cou¡
(
p
->
pStmt
); i++){

520 
p
->
¨gv
[
i
] = (*)
	`sqlôe3_cﬁumn_ãxt
’->
pStmt
, i);

522 
i
=0; i<
p
->
¨gc
; i++){

523 
p
->
cﬁv
[
i
] = 
	`sqlôe3_cﬁumn_«me
’->
pStmt
, i);

526 
	}
}

533 
	$t˛_˛õ¡_°ï
(

534 *
NŸU£d
,

535 
T˛_I¡îp
 *
öãΩ
,

536 
¨gc
,

537 c⁄° **
¨gv


539 
i
;

540 if–
¨gc
!=2 ){

541 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

543  
TCL_ERROR
;

545 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

546 if–
i
<0 )  
TCL_ERROR
;

547 if–!
thªad£t
[
i
].
busy
 ){

548 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

549  
TCL_ERROR
;

551 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

552 
thªad£t
[
i
].
xOp
 = 
do_°ï
;

553 
thªad£t
[
i
].
›num
++;

554  
TCL_OK
;

555 
	}
}

560 
	$do_föÆize
(
Thªad
 *
p
){

561 if–
p
->
pStmt
==0 ){

562 
p
->
zEº
 =Ö->
zSèticEº
 = "no virtual machineávailable";

563 
p
->
rc
 = 
SQLITE_ERROR
;

566 
p
->
rc
 = 
	`sqlôe3_˛õ¡_föÆize
’->
pStmt
);

567 
p
->
pStmt
 = 0;

568 
	}
}

575 
	$t˛_˛õ¡_föÆize
(

576 *
NŸU£d
,

577 
T˛_I¡îp
 *
öãΩ
,

578 
¨gc
,

579 c⁄° **
¨gv


581 
i
;

582 if–
¨gc
!=2 ){

583 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

585  
TCL_ERROR
;

587 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

588 if–
i
<0 )  
TCL_ERROR
;

589 if–!
thªad£t
[
i
].
busy
 ){

590 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

591  
TCL_ERROR
;

593 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

594 
thªad£t
[
i
].
xOp
 = 
do_föÆize
;

595 
	`sqlôe3_‰ì
(
thªad£t
[
i
].
zArg
);

596 
thªad£t
[
i
].
zArg
 = 0;

597 
thªad£t
[
i
].
›num
++;

598  
TCL_OK
;

599 
	}
}

604 
	$do_ª£t
(
Thªad
 *
p
){

605 if–
p
->
pStmt
==0 ){

606 
p
->
zEº
 =Ö->
zSèticEº
 = "no virtual machineávailable";

607 
p
->
rc
 = 
SQLITE_ERROR
;

610 
p
->
rc
 = 
	`sqlôe3_˛õ¡_ª£t
’->
pStmt
);

611 
p
->
pStmt
 = 0;

612 
	}
}

619 
	$t˛_˛õ¡_ª£t
(

620 *
NŸU£d
,

621 
T˛_I¡îp
 *
öãΩ
,

622 
¨gc
,

623 c⁄° **
¨gv


625 
i
;

626 if–
¨gc
!=2 ){

627 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

629  
TCL_ERROR
;

631 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

632 if–
i
<0 )  
TCL_ERROR
;

633 if–!
thªad£t
[
i
].
busy
 ){

634 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

635  
TCL_ERROR
;

637 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

638 
thªad£t
[
i
].
xOp
 = 
do_ª£t
;

639 
	`sqlôe3_‰ì
(
thªad£t
[
i
].
zArg
);

640 
thªad£t
[
i
].
zArg
 = 0;

641 
thªad£t
[
i
].
›num
++;

642  
TCL_OK
;

643 
	}
}

650 
	$t˛_˛õ¡_sw≠
(

651 *
NŸU£d
,

652 
T˛_I¡îp
 *
öãΩ
,

653 
¨gc
,

654 c⁄° **
¨gv


656 
i
, 
j
;

657 
sqlôe3
 *
ãmp
;

658 if–
¨gc
!=3 ){

659 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

661  
TCL_ERROR
;

663 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

664 if–
i
<0 )  
TCL_ERROR
;

665 if–!
thªad£t
[
i
].
busy
 ){

666 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

667  
TCL_ERROR
;

669 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

670 
j
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[2]);

671 if–
j
<0 )  
TCL_ERROR
;

672 if–!
thªad£t
[
j
].
busy
 ){

673 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

674  
TCL_ERROR
;

676 
	`˛õ¡_waô
(&
thªad£t
[
j
]);

677 
ãmp
 = 
thªad£t
[
i
].
db
;

678 
thªad£t
[
i
].
db
 =Åhªad£t[
j
].db;

679 
thªad£t
[
j
].
db
 = 
ãmp
;

680  
TCL_OK
;

681 
	}
}

686 
	$Sqlôëe°7_Inô
(
T˛_I¡îp
 *
öãΩ
){

688 *
zName
;

689 
T˛_CmdProc
 *
xProc
;

690 } 
aCmd
[] = {

691 { "˛õ¡_¸óã", (
T˛_CmdProc
*)
t˛_˛õ¡_¸óã
 },

692 { "˛õ¡_waô", (
T˛_CmdProc
*)
t˛_˛õ¡_waô
 },

693 { "˛õ¡_hÆt", (
T˛_CmdProc
*)
t˛_˛õ¡_hÆt
 },

694 { "˛õ¡_¨gc", (
T˛_CmdProc
*)
t˛_˛õ¡_¨gc
 },

695 { "˛õ¡_¨gv", (
T˛_CmdProc
*)
t˛_˛õ¡_¨gv
 },

696 { "˛õ¡_cﬁ«me", (
T˛_CmdProc
*)
t˛_˛õ¡_cﬁ«me
 },

697 { "˛õ¡_ªsu…", (
T˛_CmdProc
*)
t˛_˛õ¡_ªsu…
 },

698 { "˛õ¡_îr‹", (
T˛_CmdProc
*)
t˛_˛õ¡_îr‹
 },

699 { "˛õ¡_compûe", (
T˛_CmdProc
*)
t˛_˛õ¡_compûe
 },

700 { "˛õ¡_°ï", (
T˛_CmdProc
*)
t˛_˛õ¡_°ï
 },

701 { "˛õ¡_ª£t", (
T˛_CmdProc
*)
t˛_˛õ¡_ª£t
 },

702 { "˛õ¡_föÆize", (
T˛_CmdProc
*)
t˛_˛õ¡_föÆize
 },

703 { "˛õ¡_sw≠", (
T˛_CmdProc
*)
t˛_˛õ¡_sw≠
 },

705 
i
;

707 
i
=0; i<(
aCmd
)/(aCmd[0]); i++){

708 
	`T˛_Cª©eComm™d
(
öãΩ
, 
aCmd
[
i
].
zName
,áCmd[i].
xProc
, 0, 0);

710  
TCL_OK
;

711 
	}
}

713 
	$Sqlôëe°7_Inô
(
T˛_I¡îp
 *
öãΩ
){  
TCL_OK
; 
	}
}

	@test8.c

16 
	~"sqlôeI¡.h
"

17 
	~"t˛.h
"

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

21 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


23 
echo_vèb
 
	techo_vèb
;

24 
echo_curs‹
 
	techo_curs‹
;

72 
	secho_vèb
 {

73 
sqlôe3_vèb
 
	mba£
;

74 
T˛_I¡îp
 *
	möãΩ
;

75 
sqlôe3
 *
	mdb
;

77 
	misP©ã∫
;

78 
	möTønß˘i⁄
;

79 *
	mzThis
;

80 *
	mzTabÀName
;

81 *
	mzLogName
;

82 
	mnCﬁ
;

83 *
	maIndex
;

84 **
	maCﬁ
;

88 
	secho_curs‹
 {

89 
sqlôe3_vèb_curs‹
 
	mba£
;

90 
sqlôe3_°mt
 *
	mpStmt
;

93 
	$simuœãVèbEº‹
(
echo_vèb
 *
p
, c⁄° *
zMëhod
){

94 c⁄° *
zEº
;

95 
zV¨«me
[128];

96 
zV¨«me
[127] = '\0';

97 
	`sqlôe3_¢¥ötf
(127, 
zV¨«me
, "echo_moduÀ_Áû(%s,%s)", 
zMëhod
, 
p
->
zTabÀName
);

98 
zEº
 = 
	`T˛_GëV¨
(
p
->
öãΩ
, 
zV¨«me
, 
TCL_GLOBAL_ONLY
);

99 if–
zEº
 ){

100 
p
->
ba£
.
zEºMsg
 = 
	`sqlôe3_m¥ötf
("echo-vèb-îr‹: %s", 
zEº
);

102  (
zEº
!=0);

103 
	}
}

118 
	$dequŸeSåög
(*
z
){

119 
quŸe
;

120 
i
, 
j
;

121 if–
z
==0 ) ;

122 
quŸe
 = 
z
[0];

123  
quŸe
 ){

127 '[': 
quŸe
 = ']'; ;

130 
i
=1, 
j
=0; 
z
[i]; i++){

131 if–
z
[
i
]==
quŸe
 ){

132 if–
z
[
i
+1]==
quŸe
 ){

133 
z
[
j
++] = 
quŸe
;

134 
i
++;

136 
z
[
j
++] = 0;

140 
z
[
j
++] = z[
i
];

143 
	}
}

155 
	$gëCﬁumnNames
(

156 
sqlôe3
 *
db
,

157 c⁄° *
zTab
,

158 ***
∑Cﬁ
,

159 *
≤Cﬁ


161 **
aCﬁ
 = 0;

162 *
zSql
;

163 
sqlôe3_°mt
 *
pStmt
 = 0;

164 
rc
 = 
SQLITE_OK
;

165 
nCﬁ
 = 0;

171 
zSql
 = 
	`sqlôe3_m¥ötf
("SELECT * FROM %Q", 
zTab
);

172 if–!
zSql
 ){

173 
rc
 = 
SQLITE_NOMEM
;

174 
out
;

176 
rc
 = 
	`sqlôe3_¥ï¨e
(
db
, 
zSql
, -1, &
pStmt
, 0);

177 
	`sqlôe3_‰ì
(
zSql
);

179 if–
rc
==
SQLITE_OK
 ){

180 
ii
;

181 
nByãs
;

182 *
zS∑˚
;

183 
nCﬁ
 = 
	`sqlôe3_cﬁumn_cou¡
(
pStmt
);

188 
nByãs
 = (*Ë* 
nCﬁ
;

189 
ii
=0; ii<
nCﬁ
; ii++){

190 c⁄° *
zName
 = 
	`sqlôe3_cﬁumn_«me
(
pStmt
, 
ii
);

191 if–!
zName
 ){

192 
rc
 = 
SQLITE_NOMEM
;

193 
out
;

195 
nByãs
 +()
	`°æí
(
zName
)+1;

197 
aCﬁ
 = (**)
	`sqlôe3MÆlocZîo
(
nByãs
);

198 if–!
aCﬁ
 ){

199 
rc
 = 
SQLITE_NOMEM
;

200 
out
;

206 
zS∑˚
 = (*)(&
aCﬁ
[
nCﬁ
]);

207 
ii
=0; ii<
nCﬁ
; ii++){

208 
aCﬁ
[
ii
] = 
zS∑˚
;

209 
	`sqlôe3_¢¥ötf
(
nByãs
, 
zS∑˚
, "%s", 
	`sqlôe3_cﬁumn_«me
(
pStmt
,
ii
));

210 
zS∑˚
 +()
	`°æí
(zSpace) + 1;

212 
	`as£π
–(
zS∑˚
-
nByãs
)==(*)
aCﬁ
 );

215 *
∑Cﬁ
 = 
aCﬁ
;

216 *
≤Cﬁ
 = 
nCﬁ
;

218 
out
:

219 
	`sqlôe3_föÆize
(
pStmt
);

220  
rc
;

221 
	}
}

235 
	$gëIndexAºay
(

236 
sqlôe3
 *
db
,

237 c⁄° *
zTab
,

238 
nCﬁ
,

239 **
∑Index


241 
sqlôe3_°mt
 *
pStmt
 = 0;

242 *
aIndex
 = 0;

243 
rc
;

244 *
zSql
;

247 
aIndex
 = (*)
	`sqlôe3MÆlocZîo
((Ë* 
nCﬁ
);

248 if–!
aIndex
 ){

249 
rc
 = 
SQLITE_NOMEM
;

250 
gë_ödex_¨øy_out
;

254 
zSql
 = 
	`sqlôe3_m¥ötf
("PRAGMA index_li°(%s)", 
zTab
);

255 if–!
zSql
 ){

256 
rc
 = 
SQLITE_NOMEM
;

257 
gë_ödex_¨øy_out
;

259 
rc
 = 
	`sqlôe3_¥ï¨e
(
db
, 
zSql
, -1, &
pStmt
, 0);

260 
	`sqlôe3_‰ì
(
zSql
);

265  
pStmt
 && 
	`sqlôe3_°ï
’Stmt)==
SQLITE_ROW
 ){

266 c⁄° *
zIdx
 = (c⁄° *)
	`sqlôe3_cﬁumn_ãxt
(
pStmt
, 1);

267 
sqlôe3_°mt
 *
pStmt2
 = 0;

268 if–
zIdx
==0 ) ;

269 
zSql
 = 
	`sqlôe3_m¥ötf
("PRAGMA index_öfo(%s)", 
zIdx
);

270 if–!
zSql
 ){

271 
rc
 = 
SQLITE_NOMEM
;

272 
gë_ödex_¨øy_out
;

274 
rc
 = 
	`sqlôe3_¥ï¨e
(
db
, 
zSql
, -1, &
pStmt2
, 0);

275 
	`sqlôe3_‰ì
(
zSql
);

276 if–
pStmt2
 && 
	`sqlôe3_°ï
’Stmt2)==
SQLITE_ROW
 ){

277 
cid
 = 
	`sqlôe3_cﬁumn_öt
(
pStmt2
, 1);

278 
	`as£π
–
cid
>=0 && cid<
nCﬁ
 );

279 
aIndex
[
cid
] = 1;

281 if–
pStmt2
 ){

282 
rc
 = 
	`sqlôe3_föÆize
(
pStmt2
);

284 if–
rc
!=
SQLITE_OK
 ){

285 
gë_ödex_¨øy_out
;

290 
gë_ödex_¨øy_out
:

291 if–
pStmt
 ){

292 
rc2
 = 
	`sqlôe3_föÆize
(
pStmt
);

293 if–
rc
==
SQLITE_OK
 ){

294 
rc
 = 
rc2
;

297 if–
rc
!=
SQLITE_OK
 ){

298 
	`sqlôe3_‰ì
(
aIndex
);

299 
aIndex
 = 0;

301 *
∑Index
 = 
aIndex
;

302  
rc
;

303 
	}
}

309 
	$≠≥ndToEchoModuÀ
(
T˛_I¡îp
 *
öãΩ
, c⁄° *
zArg
){

310 
Êags
 = (
TCL_APPEND_VALUE
 | 
TCL_LIST_ELEMENT
 | 
TCL_GLOBAL_ONLY
);

311 
	`T˛_SëV¨
(
öãΩ
, "echo_moduÀ", (
zArg
?zArg:""), 
Êags
);

312 
	}
}

331 
	$echoDe˛¨eVèb
(

332 
echo_vèb
 *
pVèb
,

333 
sqlôe3
 *
db


335 
rc
 = 
SQLITE_OK
;

337 if–
pVèb
->
zTabÀName
 ){

338 
sqlôe3_°mt
 *
pStmt
 = 0;

339 
rc
 = 
	`sqlôe3_¥ï¨e
(
db
,

341 -1, &
pStmt
, 0);

342 if–
rc
==
SQLITE_OK
 ){

343 
	`sqlôe3_böd_ãxt
(
pStmt
, 1, 
pVèb
->
zTabÀName
, -1, 0);

344 if–
	`sqlôe3_°ï
(
pStmt
)==
SQLITE_ROW
 ){

345 
rc2
;

346 c⁄° *
zCª©eTabÀ
 = (c⁄° *)
	`sqlôe3_cﬁumn_ãxt
(
pStmt
, 0);

347 
rc
 = 
	`sqlôe3_de˛¨e_vèb
(
db
, 
zCª©eTabÀ
);

348 
rc2
 = 
	`sqlôe3_föÆize
(
pStmt
);

349 if–
rc
==
SQLITE_OK
 ){

350 
rc
 = 
rc2
;

353 
rc
 = 
	`sqlôe3_föÆize
(
pStmt
);

354 if–
rc
==
SQLITE_OK
 ){

355 
rc
 = 
SQLITE_ERROR
;

358 if–
rc
==
SQLITE_OK
 ){

359 
rc
 = 
	`gëCﬁumnNames
(
db
, 
pVèb
->
zTabÀName
, &pVèb->
aCﬁ
, &pVèb->
nCﬁ
);

361 if–
rc
==
SQLITE_OK
 ){

362 
rc
 = 
	`gëIndexAºay
(
db
, 
pVèb
->
zTabÀName
,ÖVèb->
nCﬁ
, &pVèb->
aIndex
);

367  
rc
;

368 
	}
}

374 
	$echoDe°ru˘‹
(
sqlôe3_vèb
 *
pVèb
){

375 
echo_vèb
 *
p
 = (echo_vèb*)
pVèb
;

376 
	`sqlôe3_‰ì
(
p
->
aIndex
);

377 
	`sqlôe3_‰ì
(
p
->
aCﬁ
);

378 
	`sqlôe3_‰ì
(
p
->
zThis
);

379 
	`sqlôe3_‰ì
(
p
->
zTabÀName
);

380 
	`sqlôe3_‰ì
(
p
->
zLogName
);

381 
	`sqlôe3_‰ì
(
p
);

383 
	}
}

385 
EchoModuÀ
 
	tEchoModuÀ
;

386 
	sEchoModuÀ
 {

387 
T˛_I¡îp
 *
	möãΩ
;

395 
	$echoC⁄°ru˘‹
(

396 
sqlôe3
 *
db
,

397 *
pAux
,

398 
¨gc
, c⁄° *c⁄°*
¨gv
,

399 
sqlôe3_vèb
 **
µVèb
,

400 **
pzEº


402 
rc
;

403 
i
;

404 
echo_vèb
 *
pVèb
;

407 
pVèb
 = 
	`sqlôe3MÆlocZîo
( (*pVtab) );

408 if–!
pVèb
 ){

409  
SQLITE_NOMEM
;

411 
pVèb
->
öãΩ
 = ((
EchoModuÀ
 *)
pAux
)->interp;

412 
pVèb
->
db
 = db;

415 
pVèb
->
zThis
 = 
	`sqlôe3_m¥ötf
("%s", 
¨gv
[2]);

416 if–!
pVèb
->
zThis
 ){

417 
	`echoDe°ru˘‹
((
sqlôe3_vèb
 *)
pVèb
);

418  
SQLITE_NOMEM
;

422 if–
¨gc
>3 ){

423 
pVèb
->
zTabÀName
 = 
	`sqlôe3_m¥ötf
("%s", 
¨gv
[3]);

424 
	`dequŸeSåög
(
pVèb
->
zTabÀName
);

425 if–
pVèb
->
zTabÀName
 &&ÖVtab->zTableName[0]=='*' ){

426 *
z
 = 
	`sqlôe3_m¥ötf
("%s%s", 
¨gv
[2], &(
pVèb
->
zTabÀName
[1]));

427 
	`sqlôe3_‰ì
(
pVèb
->
zTabÀName
);

428 
pVèb
->
zTabÀName
 = 
z
;

429 
pVèb
->
isP©ã∫
 = 1;

431 if–!
pVèb
->
zTabÀName
 ){

432 
	`echoDe°ru˘‹
((
sqlôe3_vèb
 *)
pVèb
);

433  
SQLITE_NOMEM
;

438 
i
=0; i<
¨gc
; i++){

439 
	`≠≥ndToEchoModuÀ
(
pVèb
->
öãΩ
, 
¨gv
[
i
]);

446 
rc
 = 
	`echoDe˛¨eVèb
(
pVèb
, 
db
);

447 if–
rc
!=
SQLITE_OK
 ){

448 
	`echoDe°ru˘‹
((
sqlôe3_vèb
 *)
pVèb
);

449  
rc
;

453 *
µVèb
 = &
pVèb
->
ba£
;

454  
SQLITE_OK
;

455 
	}
}

460 
	$echoCª©e
(

461 
sqlôe3
 *
db
,

462 *
pAux
,

463 
¨gc
, c⁄° *c⁄°*
¨gv
,

464 
sqlôe3_vèb
 **
µVèb
,

465 **
pzEº


467 
rc
 = 
SQLITE_OK
;

468 
	`≠≥ndToEchoModuÀ
(((
EchoModuÀ
 *)
pAux
)->
öãΩ
, "xCreate");

469 
rc
 = 
	`echoC⁄°ru˘‹
(
db
, 
pAux
, 
¨gc
, 
¨gv
, 
µVèb
, 
pzEº
);

481 if–
rc
==
SQLITE_OK
 && 
¨gc
==5 ){

482 *
zSql
;

483 
echo_vèb
 *
pVèb
 = *”cho_vèb **)
µVèb
;

484 
pVèb
->
zLogName
 = 
	`sqlôe3_m¥ötf
("%s", 
¨gv
[4]);

485 
zSql
 = 
	`sqlôe3_m¥ötf
("CREATE TABLE %Q÷ogmsg)", 
pVèb
->
zLogName
);

486 
rc
 = 
	`sqlôe3_exec
(
db
, 
zSql
, 0, 0, 0);

487 
	`sqlôe3_‰ì
(
zSql
);

488 if–
rc
!=
SQLITE_OK
 ){

489 *
pzEº
 = 
	`sqlôe3_m¥ötf
("%s", 
	`sqlôe3_îrmsg
(
db
));

493 if–*
µVèb
 && 
rc
!=
SQLITE_OK
 ){

494 
	`echoDe°ru˘‹
(*
µVèb
);

495 *
µVèb
 = 0;

498 if–
rc
==
SQLITE_OK
 ){

499 (*(
echo_vèb
**)
µVèb
)->
öTønß˘i⁄
 = 1;

502  
rc
;

503 
	}
}

508 
	$echoC⁄√˘
(

509 
sqlôe3
 *
db
,

510 *
pAux
,

511 
¨gc
, c⁄° *c⁄°*
¨gv
,

512 
sqlôe3_vèb
 **
µVèb
,

513 **
pzEº


515 
	`≠≥ndToEchoModuÀ
(((
EchoModuÀ
 *)
pAux
)->
öãΩ
, "xConnect");

516  
	`echoC⁄°ru˘‹
(
db
, 
pAux
, 
¨gc
, 
¨gv
, 
µVèb
, 
pzEº
);

517 
	}
}

522 
	$echoDisc⁄√˘
(
sqlôe3_vèb
 *
pVèb
){

523 
	`≠≥ndToEchoModuÀ
(((
echo_vèb
 *)
pVèb
)->
öãΩ
, "xDisconnect");

524  
	`echoDe°ru˘‹
(
pVèb
);

525 
	}
}

530 
	$echoDe°roy
(
sqlôe3_vèb
 *
pVèb
){

531 
rc
 = 
SQLITE_OK
;

532 
echo_vèb
 *
p
 = (echo_vèb *)
pVèb
;

533 
	`≠≥ndToEchoModuÀ
(((
echo_vèb
 *)
pVèb
)->
öãΩ
, "xDestroy");

536 if–
p
 &&Ö->
zLogName
 ){

537 *
zSql
;

538 
zSql
 = 
	`sqlôe3_m¥ötf
("DROP TABLE %Q", 
p
->
zLogName
);

539 
rc
 = 
	`sqlôe3_exec
(
p
->
db
, 
zSql
, 0, 0, 0);

540 
	`sqlôe3_‰ì
(
zSql
);

543 if–
rc
==
SQLITE_OK
 ){

544 
rc
 = 
	`echoDe°ru˘‹
(
pVèb
);

546  
rc
;

547 
	}
}

552 
	$echoO≥n
(
sqlôe3_vèb
 *
pVTab
, 
sqlôe3_vèb_curs‹
 **
µCurs‹
){

553 
echo_curs‹
 *
pCur
;

554 if–
	`simuœãVèbEº‹
((
echo_vèb
 *)
pVTab
, "xOpen") ){

555  
SQLITE_ERROR
;

557 
pCur
 = 
	`sqlôe3MÆlocZîo
((
echo_curs‹
));

558 *
µCurs‹
 = (
sqlôe3_vèb_curs‹
 *)
pCur
;

559  (
pCur
 ? 
SQLITE_OK
 : 
SQLITE_NOMEM
);

560 
	}
}

565 
	$echoClo£
(
sqlôe3_vèb_curs‹
 *
cur
){

566 
rc
;

567 
echo_curs‹
 *
pCur
 = (echo_curs‹ *)
cur
;

568 
sqlôe3_°mt
 *
pStmt
 = 
pCur
->pStmt;

569 
pCur
->
pStmt
 = 0;

570 
	`sqlôe3_‰ì
(
pCur
);

571 
rc
 = 
	`sqlôe3_föÆize
(
pStmt
);

572  
rc
;

573 
	}
}

579 
	$echoEof
(
sqlôe3_vèb_curs‹
 *
cur
){

580  (((
echo_curs‹
 *)
cur
)->
pStmt
 ? 0 : 1);

581 
	}
}

586 
	$echoNext
(
sqlôe3_vèb_curs‹
 *
cur
){

587 
rc
 = 
SQLITE_OK
;

588 
echo_curs‹
 *
pCur
 = (echo_curs‹ *)
cur
;

590 if–
	`simuœãVèbEº‹
((
echo_vèb
 *)(
cur
->
pVèb
), "xNext") ){

591  
SQLITE_ERROR
;

594 if–
pCur
->
pStmt
 ){

595 
rc
 = 
	`sqlôe3_°ï
(
pCur
->
pStmt
);

596 if–
rc
==
SQLITE_ROW
 ){

597 
rc
 = 
SQLITE_OK
;

599 
rc
 = 
	`sqlôe3_föÆize
(
pCur
->
pStmt
);

600 
pCur
->
pStmt
 = 0;

604  
rc
;

605 
	}
}

610 
	$echoCﬁumn
(
sqlôe3_vèb_curs‹
 *
cur
, 
sqlôe3_c⁄ãxt
 *
˘x
, 
i
){

611 
iCﬁ
 = 
i
 + 1;

612 
sqlôe3_°mt
 *
pStmt
 = ((
echo_curs‹
 *)
cur
)->pStmt;

614 if–
	`simuœãVèbEº‹
((
echo_vèb
 *)(
cur
->
pVèb
), "xColumn") ){

615  
SQLITE_ERROR
;

618 if–!
pStmt
 ){

619 
	`sqlôe3_ªsu…_nuŒ
(
˘x
);

621 
	`as£π
–
	`sqlôe3_d©a_cou¡
(
pStmt
)>
iCﬁ
 );

622 
	`sqlôe3_ªsu…_vÆue
(
˘x
, 
	`sqlôe3_cﬁumn_vÆue
(
pStmt
, 
iCﬁ
));

624  
SQLITE_OK
;

625 
	}
}

630 
	$echoRowid
(
sqlôe3_vèb_curs‹
 *
cur
, 
sqlôe_öt64
 *
pRowid
){

631 
sqlôe3_°mt
 *
pStmt
 = ((
echo_curs‹
 *)
cur
)->pStmt;

633 if–
	`simuœãVèbEº‹
((
echo_vèb
 *)(
cur
->
pVèb
), "xRowid") ){

634  
SQLITE_ERROR
;

637 *
pRowid
 = 
	`sqlôe3_cﬁumn_öt64
(
pStmt
, 0);

638  
SQLITE_OK
;

639 
	}
}

650 
	$hashSåög
(c⁄° *
zSåög
){

651 
u32
 
vÆ
 = 0;

652 
ii
;

653 
ii
=0; 
zSåög
[ii]; ii++){

654 
vÆ
 = (vÆ << 3Ë+ ()
zSåög
[
ii
];

656  ()(
vÆ
&0x7fffffff);

657 
	}
}

662 
	$echoFûãr
(

663 
sqlôe3_vèb_curs‹
 *
pVèbCurs‹
,

664 
idxNum
, c⁄° *
idxSå
,

665 
¨gc
, 
sqlôe3_vÆue
 **
¨gv


667 
rc
;

668 
i
;

670 
echo_curs‹
 *
pCur
 = (echo_curs‹ *)
pVèbCurs‹
;

671 
echo_vèb
 *
pVèb
 = (echo_vèb *)
pVèbCurs‹
->pVtab;

672 
sqlôe3
 *
db
 = 
pVèb
->db;

674 if–
	`simuœãVèbEº‹
(
pVèb
, "xFilter") ){

675  
SQLITE_ERROR
;

679 
	`as£π
–
idxNum
==
	`hashSåög
(
idxSå
) );

682 
	`≠≥ndToEchoModuÀ
(
pVèb
->
öãΩ
, "xFilter");

683 
	`≠≥ndToEchoModuÀ
(
pVèb
->
öãΩ
, 
idxSå
);

684 
i
=0; i<
¨gc
; i++){

685 
	`≠≥ndToEchoModuÀ
(
pVèb
->
öãΩ
, (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[
i
]));

688 
	`sqlôe3_föÆize
(
pCur
->
pStmt
);

689 
pCur
->
pStmt
 = 0;

694 
rc
 = 
	`sqlôe3_¥ï¨e
(
db
, 
idxSå
, -1, &
pCur
->
pStmt
, 0);

695 
	`as£π
–
pCur
->
pStmt
 || 
rc
!=
SQLITE_OK
 );

696 
i
=0; 
rc
==
SQLITE_OK
 && i<
¨gc
; i++){

697 
rc
 = 
	`sqlôe3_böd_vÆue
(
pCur
->
pStmt
, 
i
+1, 
¨gv
[i]);

701 if–
rc
==
SQLITE_OK
 ){

702 
rc
 = 
	`echoNext
(
pVèbCurs‹
);

705  
rc
;

706 
	}
}

722 
	$°rög_c⁄ˇt
(**
pzSå
, *
zAµíd
, 
doFªe
, *
pRc
){

723 *
zIn
 = *
pzSå
;

724 if–!
zAµíd
 && 
doFªe
 && *
pRc
==
SQLITE_OK
 ){

725 *
pRc
 = 
SQLITE_NOMEM
;

727 if–*
pRc
!=
SQLITE_OK
 ){

728 
	`sqlôe3_‰ì
(
zIn
);

729 
zIn
 = 0;

731 if–
zIn
 ){

732 *
zTemp
 = 
zIn
;

733 
zIn
 = 
	`sqlôe3_m¥ötf
("%s%s", zIn, 
zAµíd
);

734 
	`sqlôe3_‰ì
(
zTemp
);

736 
zIn
 = 
	`sqlôe3_m¥ötf
("%s", 
zAµíd
);

738 if–!
zIn
 ){

739 *
pRc
 = 
SQLITE_NOMEM
;

742 *
pzSå
 = 
zIn
;

743 if–
doFªe
 ){

744 
	`sqlôe3_‰ì
(
zAµíd
);

746 
	}
}

758 *
	$echoSñe˘Li°
(
echo_vèb
 *
pTab
, 
sqlôe3_ödex_öfo
 *
pIdxInfo
){

759 *
zRë
 = 0;

760 if–
	`sqlôe3_libvîsi⁄_numbî
()<3010000 ){

761 
zRë
 = 
	`sqlôe3_m¥ötf
(", *");

763 
i
;

764 
i
=0; i<
pTab
->
nCﬁ
; i++){

765 if–
pIdxInfo
->
cﬁU£d
 & ((
sqlôe3_uöt64
)1 << (
i
>=63 ? 63 : i)) ){

766 
zRë
 = 
	`sqlôe3_m¥ötf
("%z, %s", zRë, 
pTab
->
aCﬁ
[
i
]);

768 
zRë
 = 
	`sqlôe3_m¥ötf
("%z, NULL", zRet);

770 if–!
zRë
 ) ;

773  
zRë
;

774 
	}
}

798 
	$echoBe°Index
(
sqlôe3_vèb
 *
èb
, 
sqlôe3_ödex_öfo
 *
pIdxInfo
){

799 
ii
;

800 *
zQuîy
 = 0;

801 *
zCﬁ
 = 0;

802 *
zNew
;

803 
nArg
 = 0;

804 c⁄° *
zSï
 = "WHERE";

805 
echo_vèb
 *
pVèb
 = (echo_vèb *)
èb
;

806 
sqlôe3_°mt
 *
pStmt
 = 0;

807 
T˛_I¡îp
 *
öãΩ
 = 
pVèb
->interp;

809 
nRow
 = 0;

810 
u£Idx
 = 0;

811 
rc
 = 
SQLITE_OK
;

812 
u£Co°
 = 0;

813 
co°
 = 0;

814 
isIgn‹eUßbÀ
 = 0;

815 if–
	`T˛_GëV¨
(
öãΩ
, "echo_moduÀ_ign‹e_ußbÀ", 
TCL_GLOBAL_ONLY
) ){

816 
isIgn‹eUßbÀ
 = 1;

819 if–
	`simuœãVèbEº‹
(
pVèb
, "xBestIndex") ){

820  
SQLITE_ERROR
;

828 if–
	`T˛_GëV¨
(
öãΩ
, "echo_moduÀ_co°", 
TCL_GLOBAL_ONLY
) ){

829 
co°
 = 
	`©of
(
	`T˛_GëV¨
(
öãΩ
, "echo_moduÀ_co°", 
TCL_GLOBAL_ONLY
));

830 
u£Co°
 = 1;

832 
zQuîy
 = 
	`sqlôe3_m¥ötf
("SELECT cou¡(*ËFROM %Q", 
pVèb
->
zTabÀName
);

833 if–!
zQuîy
 ){

834  
SQLITE_NOMEM
;

836 
rc
 = 
	`sqlôe3_¥ï¨e
(
pVèb
->
db
, 
zQuîy
, -1, &
pStmt
, 0);

837 
	`sqlôe3_‰ì
(
zQuîy
);

838 if–
rc
!=
SQLITE_OK
 ){

839  
rc
;

841 
	`sqlôe3_°ï
(
pStmt
);

842 
nRow
 = 
	`sqlôe3_cﬁumn_öt
(
pStmt
, 0);

843 
rc
 = 
	`sqlôe3_föÆize
(
pStmt
);

844 if–
rc
!=
SQLITE_OK
 ){

845  
rc
;

849 
zCﬁ
 = 
	`echoSñe˘Li°
(
pVèb
, 
pIdxInfo
);

850 if–!
zCﬁ
 )  
SQLITE_NOMEM
;

851 
zQuîy
 = 
	`sqlôe3_m¥ötf
("SELECTÑowid%z FROM %Q", 
zCﬁ
, 
pVèb
->
zTabÀName
);

852 if–!
zQuîy
 )  
SQLITE_NOMEM
;

854 
ii
=0; ii<
pIdxInfo
->
nC⁄°øöt
; ii++){

855 c⁄° 
sqlôe3_ödex_c⁄°øöt
 *
pC⁄°øöt
;

856 
sqlôe3_ödex_c⁄°øöt_ußge
 *
pUßge
;

857 
iCﬁ
;

859 
pC⁄°øöt
 = &
pIdxInfo
->
aC⁄°øöt
[
ii
];

860 
pUßge
 = &
pIdxInfo
->
aC⁄°øötUßge
[
ii
];

862 if–!
isIgn‹eUßbÀ
 && !
pC⁄°øöt
->
ußbÀ
 ) ;

864 
iCﬁ
 = 
pC⁄°øöt
->
iCﬁumn
;

865 if–
iCﬁ
<0 || 
pVèb
->
aIndex
[iCol] ){

866 *
zNewCﬁ
 = 
iCﬁ
>=0 ? 
pVèb
->
aCﬁ
[iCol] : "rowid";

867 *
zOp
 = 0;

868 
u£Idx
 = 1;

869  
pC⁄°øöt
->
›
 ){

870 
SQLITE_INDEX_CONSTRAINT_EQ
:

871 
zOp
 = "="; ;

872 
SQLITE_INDEX_CONSTRAINT_LT
:

873 
zOp
 = "<"; ;

874 
SQLITE_INDEX_CONSTRAINT_GT
:

875 
zOp
 = ">"; ;

876 
SQLITE_INDEX_CONSTRAINT_LE
:

877 
zOp
 = "<="; ;

878 
SQLITE_INDEX_CONSTRAINT_GE
:

879 
zOp
 = ">="; ;

880 
SQLITE_INDEX_CONSTRAINT_MATCH
:

888 
zOp
 = "LIKE"; ;

889 
SQLITE_INDEX_CONSTRAINT_LIKE
:

890 
zOp
 = "like"; ;

891 
SQLITE_INDEX_CONSTRAINT_GLOB
:

892 
zOp
 = "glob"; ;

893 
SQLITE_INDEX_CONSTRAINT_REGEXP
:

894 
zOp
 = "regexp"; ;

896 if–
zOp
[0]=='L' ){

897 
zNew
 = 
	`sqlôe3_m¥ötf
(" %s %s LIKE (SELECT '%%'||?||'%%')",

898 
zSï
, 
zNewCﬁ
);

900 
zNew
 = 
	`sqlôe3_m¥ötf
(" %†%†%†?", 
zSï
, 
zNewCﬁ
, 
zOp
);

902 
	`°rög_c⁄ˇt
(&
zQuîy
, 
zNew
, 1, &
rc
);

904 
zSï
 = "AND";

905 
pUßge
->
¨gvIndex
 = ++
nArg
;

906 
pUßge
->
omô
 = 1;

914 if–
pIdxInfo
->
nOrdîBy
==1 && (

915 
pIdxInfo
->
aOrdîBy
->
iCﬁumn
<0 ||

916 
pVèb
->
aIndex
[
pIdxInfo
->
aOrdîBy
->
iCﬁumn
]) ){

917 
iCﬁ
 = 
pIdxInfo
->
aOrdîBy
->
iCﬁumn
;

918 *
zNewCﬁ
 = 
iCﬁ
>=0 ? 
pVèb
->
aCﬁ
[iCol] : "rowid";

919 *
zDú
 = 
pIdxInfo
->
aOrdîBy
->
desc
?"DESC":"ASC";

920 
zNew
 = 
	`sqlôe3_m¥ötf
(" ORDER BY %†%s", 
zNewCﬁ
, 
zDú
);

921 
	`°rög_c⁄ˇt
(&
zQuîy
, 
zNew
, 1, &
rc
);

922 
pIdxInfo
->
‹dîByC⁄sumed
 = 1;

925 
	`≠≥ndToEchoModuÀ
(
pVèb
->
öãΩ
, "xBestIndex");;

926 
	`≠≥ndToEchoModuÀ
(
pVèb
->
öãΩ
, 
zQuîy
);

928 if–!
zQuîy
 ){

929  
rc
;

931 
pIdxInfo
->
idxNum
 = 
	`hashSåög
(
zQuîy
);

932 
pIdxInfo
->
idxSå
 = 
zQuîy
;

933 
pIdxInfo
->
√edToFªeIdxSå
 = 1;

934 if–
u£Co°
 ){

935 
pIdxInfo
->
e°im©edCo°
 = 
co°
;

936 }if–
u£Idx
 ){

938  
ii
=0; ii<(()*8)-1; ii++ ){

939 if–
nRow
 & (1<<
ii
) ){

940 
pIdxInfo
->
e°im©edCo°
 = ()
ii
;

944 
pIdxInfo
->
e°im©edCo°
 = ()
nRow
;

946  
rc
;

947 
	}
}

963 
	$echoUpd©e
(

964 
sqlôe3_vèb
 *
èb
,

965 
nD©a
,

966 
sqlôe3_vÆue
 **
≠D©a
,

967 
sqlôe_öt64
 *
pRowid


969 
echo_vèb
 *
pVèb
 = (echo_vèb *)
èb
;

970 
sqlôe3
 *
db
 = 
pVèb
->db;

971 
rc
 = 
SQLITE_OK
;

973 
sqlôe3_°mt
 *
pStmt
 = 0;

974 *
z
 = 0;

975 
bödArgZîo
 = 0;

976 
bödArgO√
 = 0;

977 
i
;

979 
	`as£π
–
nD©a
==
pVèb
->
nCﬁ
+2 ||ÇData==1 );

983 
	`as£π
–
pVèb
->
öTønß˘i⁄
 );

985 if–
	`simuœãVèbEº‹
(
pVèb
, "xUpdate") ){

986  
SQLITE_ERROR
;

990 if–
nD©a
>1 && 
	`sqlôe3_vÆue_ty≥
(
≠D©a
[0])==
SQLITE_INTEGER
 ){

991 *
zSï
 = " SET";

992 
z
 = 
	`sqlôe3_m¥ötf
("UPDATE %Q", 
pVèb
->
zTabÀName
);

993 if–!
z
 ){

994 
rc
 = 
SQLITE_NOMEM
;

997 
bödArgO√
 = (
≠D©a
[1] && 
	`sqlôe3_vÆue_ty≥
◊pD©a[1])==
SQLITE_INTEGER
);

998 
bödArgZîo
 = 1;

1000 if–
bödArgO√
 ){

1001 
	`°rög_c⁄ˇt
(&
z
, " SETÑowid=?1 ", 0, &
rc
);

1002 
zSï
 = ",";

1004 
i
=2; i<
nD©a
; i++){

1005 if–
≠D©a
[
i
]==0 ) ;

1006 
	`°rög_c⁄ˇt
(&
z
, 
	`sqlôe3_m¥ötf
(

1007 "%†%Q=?%d", 
zSï
, 
pVèb
->
aCﬁ
[
i
-2], i), 1, &
rc
);

1008 
zSï
 = ",";

1010 
	`°rög_c⁄ˇt
(&
z
, 
	`sqlôe3_m¥ötf
(" WHEREÑowid=?%d", 
nD©a
), 1, &
rc
);

1014 if–
nD©a
==1 && 
	`sqlôe3_vÆue_ty≥
(
≠D©a
[0])==
SQLITE_INTEGER
 ){

1015 
z
 = 
	`sqlôe3_m¥ötf
("DELETE FROM %Q WHEREÑowid = ?1", 
pVèb
->
zTabÀName
);

1016 if–!
z
 ){

1017 
rc
 = 
SQLITE_NOMEM
;

1019 
bödArgZîo
 = 1;

1023 if–
nD©a
>2 && 
	`sqlôe3_vÆue_ty≥
(
≠D©a
[0])==
SQLITE_NULL
 ){

1024 
ii
;

1025 *
zIn£π
 = 0;

1026 *
zVÆues
 = 0;

1028 
zIn£π
 = 
	`sqlôe3_m¥ötf
("INSERT INTO %Q (", 
pVèb
->
zTabÀName
);

1029 if–!
zIn£π
 ){

1030 
rc
 = 
SQLITE_NOMEM
;

1032 if–
	`sqlôe3_vÆue_ty≥
(
≠D©a
[1])==
SQLITE_INTEGER
 ){

1033 
bödArgO√
 = 1;

1034 
zVÆues
 = 
	`sqlôe3_m¥ötf
("?");

1035 
	`°rög_c⁄ˇt
(&
zIn£π
, "rowid", 0, &
rc
);

1038 
	`as£π
((
pVèb
->
nCﬁ
+2)==
nD©a
);

1039 
ii
=2; ii<
nD©a
; ii++){

1040 
	`°rög_c⁄ˇt
(&
zIn£π
,

1041 
	`sqlôe3_m¥ötf
("%s%Q", 
zVÆues
?", ":"", 
pVèb
->
aCﬁ
[
ii
-2]), 1, &
rc
);

1042 
	`°rög_c⁄ˇt
(&
zVÆues
,

1043 
	`sqlôe3_m¥ötf
("%s?%d", 
zVÆues
?", ":"", 
ii
), 1, &
rc
);

1046 
	`°rög_c⁄ˇt
(&
z
, 
zIn£π
, 1, &
rc
);

1047 
	`°rög_c⁄ˇt
(&
z
, "ËVALUES(", 0, &
rc
);

1048 
	`°rög_c⁄ˇt
(&
z
, 
zVÆues
, 1, &
rc
);

1049 
	`°rög_c⁄ˇt
(&
z
, ")", 0, &
rc
);

1054 
	`as£π
(0);

1055  
SQLITE_ERROR
;

1058 if–
rc
==
SQLITE_OK
 ){

1059 
rc
 = 
	`sqlôe3_¥ï¨e
(
db
, 
z
, -1, &
pStmt
, 0);

1061 
	`as£π
–
rc
!=
SQLITE_OK
 || 
pStmt
 );

1062 
	`sqlôe3_‰ì
(
z
);

1063 if–
rc
==
SQLITE_OK
 ) {

1064 if–
bödArgZîo
 ){

1065 
	`sqlôe3_böd_vÆue
(
pStmt
, 
nD©a
, 
≠D©a
[0]);

1067 if–
bödArgO√
 ){

1068 
	`sqlôe3_böd_vÆue
(
pStmt
, 1, 
≠D©a
[1]);

1070 
i
=2; i<
nD©a
 && 
rc
==
SQLITE_OK
; i++){

1071 if–
≠D©a
[
i
] ) 
rc
 = 
	`sqlôe3_böd_vÆue
(
pStmt
, i,ápData[i]);

1073 if–
rc
==
SQLITE_OK
 ){

1074 
	`sqlôe3_°ï
(
pStmt
);

1075 
rc
 = 
	`sqlôe3_föÆize
(
pStmt
);

1077 
	`sqlôe3_föÆize
(
pStmt
);

1081 if–
pRowid
 && 
rc
==
SQLITE_OK
 ){

1082 *
pRowid
 = 
	`sqlôe3_œ°_ö£π_rowid
(
db
);

1084 if–
rc
!=
SQLITE_OK
 ){

1085 
èb
->
zEºMsg
 = 
	`sqlôe3_m¥ötf
("echo-vèb-îr‹: %s", 
	`sqlôe3_îrmsg
(
db
));

1088  
rc
;

1089 
	}
}

1096 
	$echoTønß˘i⁄CÆl
(
sqlôe3_vèb
 *
èb
, c⁄° *
zCÆl
){

1097 *
z
;

1098 
echo_vèb
 *
pVèb
 = (echo_vèb *)
èb
;

1099 
z
 = 
	`sqlôe3_m¥ötf
("echo(%s)", 
pVèb
->
zTabÀName
);

1100 if–
z
==0 )  
SQLITE_NOMEM
;

1101 
	`≠≥ndToEchoModuÀ
(
pVèb
->
öãΩ
, 
zCÆl
);

1102 
	`≠≥ndToEchoModuÀ
(
pVèb
->
öãΩ
, 
z
);

1103 
	`sqlôe3_‰ì
(
z
);

1104  
SQLITE_OK
;

1105 
	}
}

1106 
	$echoBegö
(
sqlôe3_vèb
 *
èb
){

1107 
rc
;

1108 
echo_vèb
 *
pVèb
 = (echo_vèb *)
èb
;

1109 
T˛_I¡îp
 *
öãΩ
 = 
pVèb
->interp;

1110 c⁄° *
zVÆ
;

1114 
	`as£π
–!
pVèb
->
öTønß˘i⁄
 );

1116 if–
	`simuœãVèbEº‹
(
pVèb
, "xBegin") ){

1117  
SQLITE_ERROR
;

1120 
rc
 = 
	`echoTønß˘i⁄CÆl
(
èb
, "xBegin");

1122 if–
rc
==
SQLITE_OK
 ){

1127 
zVÆ
 = 
	`T˛_GëV¨
(
öãΩ
, "echo_moduÀ_begö_Áû", 
TCL_GLOBAL_ONLY
);

1128 if–
zVÆ
 && 0==
	`°rcmp
(zVÆ, 
pVèb
->
zTabÀName
) ){

1129 
rc
 = 
SQLITE_ERROR
;

1132 if–
rc
==
SQLITE_OK
 ){

1133 
pVèb
->
öTønß˘i⁄
 = 1;

1135  
rc
;

1136 
	}
}

1137 
	$echoSync
(
sqlôe3_vèb
 *
èb
){

1138 
rc
;

1139 
echo_vèb
 *
pVèb
 = (echo_vèb *)
èb
;

1140 
T˛_I¡îp
 *
öãΩ
 = 
pVèb
->interp;

1141 c⁄° *
zVÆ
;

1145 
	`as£π
–
pVèb
->
öTønß˘i⁄
 );

1147 if–
	`simuœãVèbEº‹
(
pVèb
, "xSync") ){

1148  
SQLITE_ERROR
;

1151 
rc
 = 
	`echoTønß˘i⁄CÆl
(
èb
, "xSync");

1153 if–
rc
==
SQLITE_OK
 ){

1158 
zVÆ
 = 
	`T˛_GëV¨
(
öãΩ
, "echo_moduÀ_sync_Áû", 
TCL_GLOBAL_ONLY
);

1159 if–
zVÆ
 && 0==
	`°rcmp
(zVÆ, 
pVèb
->
zTabÀName
) ){

1160 
rc
 = -1;

1163  
rc
;

1164 
	}
}

1165 
	$echoCommô
(
sqlôe3_vèb
 *
èb
){

1166 
echo_vèb
 *
pVèb
 = (echo_vèb*)
èb
;

1167 
rc
;

1171 
	`as£π
–
pVèb
->
öTønß˘i⁄
 );

1173 if–
	`simuœãVèbEº‹
(
pVèb
, "xCommit") ){

1174  
SQLITE_ERROR
;

1177 
	`sqlôe3BegöBíignMÆloc
();

1178 
rc
 = 
	`echoTønß˘i⁄CÆl
(
èb
, "xCommit");

1179 
	`sqlôe3EndBíignMÆloc
();

1180 
pVèb
->
öTønß˘i⁄
 = 0;

1181  
rc
;

1182 
	}
}

1183 
	$echoRﬁlback
(
sqlôe3_vèb
 *
èb
){

1184 
rc
;

1185 
echo_vèb
 *
pVèb
 = (echo_vèb*)
èb
;

1189 
	`as£π
–
pVèb
->
öTønß˘i⁄
 );

1191 
rc
 = 
	`echoTønß˘i⁄CÆl
(
èb
, "xRollback");

1192 
pVèb
->
öTønß˘i⁄
 = 0;

1193  
rc
;

1194 
	}
}

1201 
	$ovîlﬂdedGlobFun˘i⁄
(

1202 
sqlôe3_c⁄ãxt
 *
pC⁄ãxt
,

1203 
nArg
,

1204 
sqlôe3_vÆue
 **
≠Arg


1206 
T˛_I¡îp
 *
öãΩ
 = 
	`sqlôe3_u£r_d©a
(
pC⁄ãxt
);

1207 
T˛_DSåög
 
°r
;

1208 
i
;

1209 
rc
;

1210 
	`T˛_DSåögInô
(&
°r
);

1211 
	`T˛_DSåögAµídEÀmít
(&
°r
, "::echo_glob_overload");

1212 
i
=0; i<
nArg
; i++){

1213 
	`T˛_DSåögAµídEÀmít
(&
°r
, (*)
	`sqlôe3_vÆue_ãxt
(
≠Arg
[
i
]));

1215 
rc
 = 
	`T˛_EvÆ
(
öãΩ
, 
	`T˛_DSåögVÆue
(&
°r
));

1216 
	`T˛_DSåögFªe
(&
°r
);

1217 if–
rc
 ){

1218 
	`sqlôe3_ªsu…_îr‹
(
pC⁄ãxt
, 
	`T˛_GëSåögResu…
(
öãΩ
), -1);

1220 
	`sqlôe3_ªsu…_ãxt
(
pC⁄ãxt
, 
	`T˛_GëSåögResu…
(
öãΩ
),

1221 -1, 
SQLITE_TRANSIENT
);

1223 
	`T˛_Re£tResu…
(
öãΩ
);

1224 
	}
}

1234 
echoFödFun˘i⁄
(

1235 
sqlôe3_vèb
 *
vèb
,

1236 
nArg
,

1237 c⁄° *
zFuncName
,

1238 (**
pxFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**),

1239 **
µArg


1241 
echo_vèb
 *
pVèb
 = (echo_vèb *)
vèb
;

1242 
T˛_I¡îp
 *
öãΩ
 = 
pVèb
->interp;

1243 
T˛_CmdInfo
 
öfo
;

1244 if–
	`°rcmp
(
zFuncName
,"glob")!=0 ){

1247 if–
	`T˛_GëComm™dInfo
(
öãΩ
, "::echo_glob_ovîlﬂd", &
öfo
)==0 ){

1250 *
pxFunc
 = 
ovîlﬂdedGlobFun˘i⁄
;

1251 *
µArg
 = 
öãΩ
;

1253 
	}
}

1255 
	$echoRíame
(
sqlôe3_vèb
 *
vèb
, c⁄° *
zNewName
){

1256 
rc
 = 
SQLITE_OK
;

1257 
echo_vèb
 *
p
 = (echo_vèb *)
vèb
;

1259 if–
	`simuœãVèbEº‹
(
p
, "xRename") ){

1260  
SQLITE_ERROR
;

1263 if–
p
->
isP©ã∫
 ){

1264 
nThis
 = ()
	`°æí
(
p
->
zThis
);

1265 *
zSql
 = 
	`sqlôe3_m¥ötf
("ALTER TABLE %s RENAME TO %s%s",

1266 
p
->
zTabÀName
, 
zNewName
, &p->zTabÀName[
nThis
]

1268 
rc
 = 
	`sqlôe3_exec
(
p
->
db
, 
zSql
, 0, 0, 0);

1269 
	`sqlôe3_‰ì
(
zSql
);

1272  
rc
;

1273 
	}
}

1275 
	$echoSavïoöt
(
sqlôe3_vèb
 *
pVTab
, 
iSavïoöt
){

1276 
	`as£π
–
pVTab
 );

1277  
SQLITE_OK
;

1278 
	}
}

1280 
	$echoRñó£
(
sqlôe3_vèb
 *
pVTab
, 
iSavïoöt
){

1281 
	`as£π
–
pVTab
 );

1282  
SQLITE_OK
;

1283 
	}
}

1285 
	$echoRﬁlbackTo
(
sqlôe3_vèb
 *
pVTab
, 
iSavïoöt
){

1286 
	`as£π
–
pVTab
 );

1287  
SQLITE_OK
;

1288 
	}
}

1294 
sqlôe3_moduÀ
 
	gechoModuÀ
 = {

1296 
echoCª©e
,

1297 
echoC⁄√˘
,

1298 
echoBe°Index
,

1299 
echoDisc⁄√˘
,

1300 
echoDe°roy
,

1301 
echoO≥n
,

1302 
echoClo£
,

1303 
echoFûãr
,

1304 
echoNext
,

1305 
echoEof
,

1306 
echoCﬁumn
,

1307 
echoRowid
,

1308 
echoUpd©e
,

1309 
echoBegö
,

1310 
echoSync
,

1311 
echoCommô
,

1312 
echoRﬁlback
,

1313 
echoFödFun˘i⁄
,

1314 
echoRíame


1317 
sqlôe3_moduÀ
 
	gechoModuÀV2
 = {

1319 
echoCª©e
,

1320 
echoC⁄√˘
,

1321 
echoBe°Index
,

1322 
echoDisc⁄√˘
,

1323 
echoDe°roy
,

1324 
echoO≥n
,

1325 
echoClo£
,

1326 
echoFûãr
,

1327 
echoNext
,

1328 
echoEof
,

1329 
echoCﬁumn
,

1330 
echoRowid
,

1331 
echoUpd©e
,

1332 
echoBegö
,

1333 
echoSync
,

1334 
echoCommô
,

1335 
echoRﬁlback
,

1336 
echoFödFun˘i⁄
,

1337 
echoRíame
,

1338 
echoSavïoöt
,

1339 
echoRñó£
,

1340 
echoRﬁlbackTo


1346 
gëDbPoöãr
(
T˛_I¡îp
 *
öãΩ
, c⁄° *
zA
, 
sqlôe3
 **
µDb
);

1347 c⁄° *
sqlôe3EºName
();

1349 
	$moduÀDe°roy
(*
p
){

1350 
	`sqlôe3_‰ì
(
p
);

1351 
	}
}

1356 
	$ªgi°î_echo_moduÀ
(

1357 
Clõ¡D©a
 
˛õ¡D©a
,

1358 
T˛_I¡îp
 *
öãΩ
,

1359 
objc
,

1360 
T˛_Obj
 *
CONST
 
objv
[]

1362 
rc
;

1363 
sqlôe3
 *
db
;

1364 
EchoModuÀ
 *
pMod
;

1365 if–
objc
!=2 ){

1366 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB");

1367  
TCL_ERROR
;

1369 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

1372 
pMod
 = 
	`sqlôe3_mÆloc
((
EchoModuÀ
));

1373 
pMod
->
öãΩ
 = interp;

1374 
rc
 = 
	`sqlôe3_¸óã_moduÀ_v2
(

1375 
db
, "echo", &
echoModuÀ
, (*)
pMod
, 
moduÀDe°roy


1379 if–
rc
==
SQLITE_OK
 ){

1380 
pMod
 = 
	`sqlôe3_mÆloc
((
EchoModuÀ
));

1381 
pMod
->
öãΩ
 = interp;

1382 
rc
 = 
	`sqlôe3_¸óã_moduÀ_v2
(
db
, "echo_v2",

1383 &
echoModuÀV2
, (*)
pMod
, 
moduÀDe°roy


1387 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_STATIC
);

1388  
TCL_OK
;

1389 
	}
}

1396 
	$de˛¨e_vèb
(

1397 
Clõ¡D©a
 
˛õ¡D©a
,

1398 
T˛_I¡îp
 *
öãΩ
,

1399 
objc
,

1400 
T˛_Obj
 *
CONST
 
objv
[]

1402 
sqlôe3
 *
db
;

1403 
rc
;

1404 if–
objc
!=3 ){

1405 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB SQL");

1406  
TCL_ERROR
;

1408 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

1409 
rc
 = 
	`sqlôe3_de˛¨e_vèb
(
db
, 
	`T˛_GëSåög
(
objv
[2]));

1410 if–
rc
!=
SQLITE_OK
 ){

1411 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3_îrmsg
(
db
), 
TCL_VOLATILE
);

1412  
TCL_ERROR
;

1414  
TCL_OK
;

1415 
	}
}

1422 
	$Sqlôëe°8_Inô
(
T˛_I¡îp
 *
öãΩ
){

1423 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


1425 *
zName
;

1426 
T˛_ObjCmdProc
 *
xProc
;

1427 *
˛õ¡D©a
;

1428 } 
aObjCmd
[] = {

1429 { "ªgi°î_echo_moduÀ", 
ªgi°î_echo_moduÀ
, 0 },

1430 { "sqlôe3_de˛¨e_vèb", 
de˛¨e_vèb
, 0 },

1432 
i
;

1433 
i
=0; i<(
aObjCmd
)/(aObjCmd[0]); i++){

1434 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
aObjCmd
[
i
].
zName
,

1435 
aObjCmd
[
i
].
xProc
,áObjCmd[i].
˛õ¡D©a
, 0);

1438  
TCL_OK
;

1439 
	}
}

	@test9.c

17 
	~"sqlôeI¡.h
"

18 
	~"t˛.h
"

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

25 
	$c_cﬁœti⁄_ã°
(

26 
Clõ¡D©a
 
˛õ¡D©a
,

27 
T˛_I¡îp
 *
öãΩ
,

28 
objc
,

29 
T˛_Obj
 *
CONST
 
objv
[]

31 c⁄° *
zEºFun˘i⁄
 = "N/A";

32 
sqlôe3
 *
db
;

34 
rc
;

35 if–
objc
!=1 ){

36 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

37  
TCL_ERROR
;

41 
rc
 = 
	`sqlôe3_›í
(":mem‹y:", &
db
);

42 if–
rc
!=
SQLITE_OK
 ){

43 
zEºFun˘i⁄
 = "sqlite3_open";

44 
îr‹_out
;

47 
rc
 = 
	`sqlôe3_¸óã_cﬁœti⁄
(
db
, "collate", 456, 0, 0);

48 if–
rc
!=
SQLITE_MISUSE
 ){

49 
	`sqlôe3_˛o£
(
db
);

50 
zEºFun˘i⁄
 = "sqlite3_create_collation";

51 
îr‹_out
;

54 
	`sqlôe3_˛o£
(
db
);

55  
TCL_OK
;

57 
îr‹_out
:

58 
	`T˛_Re£tResu…
(
öãΩ
);

59 
	`T˛_AµídResu…
(
öãΩ
, "Eº‹Åe°ög fun˘i⁄: ", 
zEºFun˘i⁄
, 0);

60  
TCL_ERROR
;

61 
	}
}

66 
	$c_ªÆloc_ã°
(

67 
Clõ¡D©a
 
˛õ¡D©a
,

68 
T˛_I¡îp
 *
öãΩ
,

69 
objc
,

70 
T˛_Obj
 *
CONST
 
objv
[]

72 *
p
;

73 c⁄° *
zEºFun˘i⁄
 = "N/A";

75 if–
objc
!=1 ){

76 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

77  
TCL_ERROR
;

80 
p
 = 
	`sqlôe3_mÆloc
(5);

81 if–!
p
 ){

82 
zEºFun˘i⁄
 = "sqlite3_malloc";

83 
îr‹_out
;

89 
p
 = 
	`sqlôe3_ªÆloc
(p, -1);

90 if–
p
 ){

91 
zEºFun˘i⁄
 = "sqlite3_realloc";

92 
îr‹_out
;

95  
TCL_OK
;

97 
îr‹_out
:

98 
	`T˛_Re£tResu…
(
öãΩ
);

99 
	`T˛_AµídResu…
(
öãΩ
, "Eº‹Åe°ög fun˘i⁄: ", 
zEºFun˘i⁄
, 0);

100  
TCL_ERROR
;

101 
	}
}

107 
	$c_misu£_ã°
(

108 
Clõ¡D©a
 
˛õ¡D©a
,

109 
T˛_I¡îp
 *
öãΩ
,

110 
objc
,

111 
T˛_Obj
 *
CONST
 
objv
[]

113 c⁄° *
zEºFun˘i⁄
 = "N/A";

114 
sqlôe3
 *
db
 = 0;

115 
sqlôe3_°mt
 *
pStmt
;

116 
rc
;

118 if–
objc
!=1 ){

119 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

120  
TCL_ERROR
;

126 
rc
 = 
	`sqlôe3_›í
(":mem‹y:", &
db
);

127 if–
rc
!=
SQLITE_OK
 ){

128 
zEºFun˘i⁄
 = "sqlite3_open";

129 
îr‹_out
;

131 
	`sqlôe3_˛o£
(
db
);

134 
rc
 = 
	`sqlôe3_îrcode
(
db
);

135 if–
rc
!=
SQLITE_MISUSE
 ){

136 
zEºFun˘i⁄
 = "sqlite3_errcode";

137 
îr‹_out
;

140 
pStmt
 = (
sqlôe3_°mt
*)1234;

141 
rc
 = 
	`sqlôe3_¥ï¨e
(
db
, 0, 0, &
pStmt
, 0);

142 if–
rc
!=
SQLITE_MISUSE
 ){

143 
zEºFun˘i⁄
 = "sqlite3_prepare";

144 
îr‹_out
;

146 
	`as£π
–
pStmt
==0 );

148 
pStmt
 = (
sqlôe3_°mt
*)1234;

149 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
db
, 0, 0, &
pStmt
, 0);

150 if–
rc
!=
SQLITE_MISUSE
 ){

151 
zEºFun˘i⁄
 = "sqlite3_prepare_v2";

152 
îr‹_out
;

154 
	`as£π
–
pStmt
==0 );

156 #i‚de‡
SQLITE_OMIT_UTF16


157 
pStmt
 = (
sqlôe3_°mt
*)1234;

158 
rc
 = 
	`sqlôe3_¥ï¨e16
(
db
, 0, 0, &
pStmt
, 0);

159 if–
rc
!=
SQLITE_MISUSE
 ){

160 
zEºFun˘i⁄
 = "sqlite3_prepare16";

161 
îr‹_out
;

163 
	`as£π
–
pStmt
==0 );

164 
pStmt
 = (
sqlôe3_°mt
*)1234;

165 
rc
 = 
	`sqlôe3_¥ï¨e16_v2
(
db
, 0, 0, &
pStmt
, 0);

166 if–
rc
!=
SQLITE_MISUSE
 ){

167 
zEºFun˘i⁄
 = "sqlite3_prepare16_v2";

168 
îr‹_out
;

170 
	`as£π
–
pStmt
==0 );

173  
TCL_OK
;

175 
îr‹_out
:

176 
	`T˛_Re£tResu…
(
öãΩ
);

177 
	`T˛_AµídResu…
(
öãΩ
, "Eº‹Åe°ög fun˘i⁄: ", 
zEºFun˘i⁄
, 0);

178  
TCL_ERROR
;

179 
	}
}

184 
	$Sqlôëe°9_Inô
(
T˛_I¡îp
 *
öãΩ
){

186 *
zName
;

187 
T˛_ObjCmdProc
 *
xProc
;

188 *
˛õ¡D©a
;

189 } 
aObjCmd
[] = {

190 { "c_misu£_ã°", 
c_misu£_ã°
, 0 },

191 { "c_ªÆloc_ã°", 
c_ªÆloc_ã°
, 0 },

192 { "c_cﬁœti⁄_ã°", 
c_cﬁœti⁄_ã°
, 0 },

194 
i
;

195 
i
=0; i<(
aObjCmd
)/(aObjCmd[0]); i++){

196 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
aObjCmd
[
i
].
zName
,

197 
aObjCmd
[
i
].
xProc
,áObjCmd[i].
˛õ¡D©a
, 0);

199  
TCL_OK
;

200 
	}
}

	@test_async.c

17 
	#TCL_THREADS


	)

18 
	~<t˛.h
>

20 #ifde‡
SQLITE_ENABLE_ASYNCIO


22 
	~"sqlôe3async.h
"

23 
	~"sqlôe3.h
"

24 
	~<as£π.h
>

27 c⁄° *
sqlôe3EºName
();

30 
	sTe°AsyncGlobÆ
 {

31 
	misIn°ÆÀd
;

32 } 
	gã°async_g
 = { 0 };

34 
TCL_DECLARE_MUTEX
(
ã°async_g_wrôîMuãx
);

39 
	$ã°AsyncInô
(

40 * 
˛õ¡D©a
,

41 
T˛_I¡îp
 *
öãΩ
,

42 
objc
,

43 
T˛_Obj
 *
CONST
 
objv
[]

45 c⁄° *
zP¨ít
;

46 
isDeÁu…
;

47 
rc
;

49 if–
objc
!=3 ){

50 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "PARENT-VFS ISDEFAULT");

51  
TCL_ERROR
;

53 
zP¨ít
 = 
	`T˛_GëSåög
(
objv
[1]);

54 if–!*
zP¨ít
 ) {

55 
zP¨ít
 = 0;

57 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[2], &
isDeÁu…
) ){

58  
TCL_ERROR
;

61 
rc
 = 
	`sqlôe3async_öôülize
(
zP¨ít
, 
isDeÁu…
);

62 if–
rc
!=
SQLITE_OK
 ){

63 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewSåögObj
(
	`sqlôe3EºName
(
rc
), -1));

64  
TCL_ERROR
;

66  
TCL_OK
;

67 
	}
}

72 
	$ã°AsyncShutdown
(

73 * 
˛õ¡D©a
,

74 
T˛_I¡îp
 *
öãΩ
,

75 
objc
,

76 
T˛_Obj
 *
CONST
 
objv
[]

78 
	`sqlôe3async_shutdown
();

79  
TCL_OK
;

80 
	}
}

82 
T˛_ThªadCª©eTy≥
 
	$t˛WrôîThªad
(
Clõ¡D©a
 
pIsSèπed
){

83 
	`T˛_MuãxLock
(&
ã°async_g_wrôîMuãx
);

84 *((*)
pIsSèπed
) = 1;

85 
	`sqlôe3async_run
();

86 
	`T˛_MuãxU∆ock
(&
ã°async_g_wrôîMuãx
);

87 
	`T˛_ExôThªad
(0);

88 
TCL_THREAD_CREATE_RETURN
;

89 
	}
}

96 
	$ã°AsyncSèπ
(

97 * 
˛õ¡D©a
,

98 
T˛_I¡îp
 *
öãΩ
,

99 
objc
,

100 
T˛_Obj
 *
CONST
 
objv
[]

102 vﬁ©ûê
isSèπed
 = 0;

103 
Clõ¡D©a
 
thªadD©a
 = (Clõ¡D©a)&
isSèπed
;

105 
T˛_ThªadId
 
x
;

106 c⁄° 
nSèck
 = 
TCL_THREAD_STACK_DEFAULT
;

107 c⁄° 
Êags
 = 
TCL_THREAD_NOFLAGS
;

108 
rc
;

110 
rc
 = 
	`T˛_Cª©eThªad
(&
x
, 
t˛WrôîThªad
, 
thªadD©a
, 
nSèck
, 
Êags
);

111 if–
rc
!=
TCL_OK
 ){

112 
	`T˛_AµídResu…
(
öãΩ
, "Tcl_CreateThread() failed", 0);

113  
TCL_ERROR
;

116  
isSèπed
==0 ) { }

117  
TCL_OK
;

118 
	}
}

128 
	$ã°AsyncWaô
(

129 * 
˛õ¡D©a
,

130 
T˛_I¡îp
 *
öãΩ
,

131 
objc
,

132 
T˛_Obj
 *
CONST
 
objv
[]

134 
eC⁄d
;

135 if–
objc
!=1 ){

136 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

137  
TCL_ERROR
;

140 
	`sqlôe3async_c⁄åﬁ
(
SQLITEASYNC_GET_HALT
, &
eC⁄d
);

141 if–
eC⁄d
==
SQLITEASYNC_HALT_NEVER
 ){

142 
	`T˛_AµídResu…
(
öãΩ
, "would block forever", (*)0);

143  
TCL_ERROR
;

146 
	`T˛_MuãxLock
(&
ã°async_g_wrôîMuãx
);

147 
	`T˛_MuãxU∆ock
(&
ã°async_g_wrôîMuãx
);

148  
TCL_OK
;

149 
	}
}

154 
	$ã°AsyncC⁄åﬁ
(

155 * 
˛õ¡D©a
,

156 
T˛_I¡îp
 *
öãΩ
,

157 
objc
,

158 
T˛_Obj
 *
CONST
 
objv
[]

160 
rc
 = 
SQLITE_OK
;

161 
´O±
[] = { 
SQLITEASYNC_HALT
, 
SQLITEASYNC_DELAY
, 
SQLITEASYNC_LOCKFILES
 };

162 c⁄° *
azO±
[] = { "halt", "delay", "lockfiles", 0 };

163 c⁄° *
az
[] = { "never", "now", "idle", 0 };

164 
iVÆ
;

165 
eO±
;

167 if–
objc
!=2 && objc!=3 ){

168 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "OPTION ?VALUE?");

169  
TCL_ERROR
;

171 if–
	`T˛_GëIndexFromObj
(
öãΩ
, 
objv
[1], 
azO±
, "›ti⁄", 0, &
eO±
) ){

172  
TCL_ERROR
;

174 
eO±
 = 
´O±
[eOpt];

176 if–
objc
==3 ){

177  
eO±
 ){

178 
SQLITEASYNC_HALT
: {

179 
	`as£π
–
SQLITEASYNC_HALT_NEVER
==0 );

180 
	`as£π
–
SQLITEASYNC_HALT_NOW
==1 );

181 
	`as£π
–
SQLITEASYNC_HALT_IDLE
==2 );

182 if–
	`T˛_GëIndexFromObj
(
öãΩ
, 
objv
[2], 
az
, "vÆue", 0, &
iVÆ
) ){

183  
TCL_ERROR
;

187 
SQLITEASYNC_DELAY
:

188 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
iVÆ
) ){

189  
TCL_ERROR
;

193 
SQLITEASYNC_LOCKFILES
:

194 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[2], &
iVÆ
) ){

195  
TCL_ERROR
;

200 
rc
 = 
	`sqlôe3async_c⁄åﬁ
(
eO±
, 
iVÆ
);

203 if–
rc
==
SQLITE_OK
 ){

204 
rc
 = 
	`sqlôe3async_c⁄åﬁ
(

205 
eO±
==
SQLITEASYNC_HALT
 ? 
SQLITEASYNC_GET_HALT
 :

206 
eO±
==
SQLITEASYNC_DELAY
 ? 
SQLITEASYNC_GET_DELAY
 :

207 
SQLITEASYNC_GET_LOCKFILES
, &
iVÆ
);

210 if–
rc
!=
SQLITE_OK
 ){

211 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewSåögObj
(
	`sqlôe3EºName
(
rc
), -1));

212  
TCL_ERROR
;

215 if–
eO±
==
SQLITEASYNC_HALT
 ){

216 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewSåögObj
(
az
[
iVÆ
], -1));

218 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
iVÆ
));

221  
TCL_OK
;

222 
	}
}

231 
	$Sqlôëe°async_Inô
(
T˛_I¡îp
 *
öãΩ
){

232 #ifde‡
SQLITE_ENABLE_ASYNCIO


233 
	`T˛_Cª©eObjComm™d
(
öãΩ
,"sqlôe3async_°¨t",
ã°AsyncSèπ
,0,0);

234 
	`T˛_Cª©eObjComm™d
(
öãΩ
,"sqlôe3async_waô",
ã°AsyncWaô
,0,0);

236 
	`T˛_Cª©eObjComm™d
(
öãΩ
,"sqlôe3async_c⁄åﬁ",
ã°AsyncC⁄åﬁ
,0,0);

237 
	`T˛_Cª©eObjComm™d
(
öãΩ
,"sqlôe3async_öôülize",
ã°AsyncInô
,0,0);

238 
	`T˛_Cª©eObjComm™d
(
öãΩ
,"sqlôe3async_shutdown",
ã°AsyncShutdown
,0,0);

240  
TCL_OK
;

241 
	}
}

	@test_autoext.c

14 
	~"t˛.h
"

15 
	~"sqlôe3ext.h
"

17 #i‚de‡
SQLITE_OMIT_LOAD_EXTENSION


18 
SQLITE_EXTENSION_INIT1


23 
	$sqrFunc
(

24 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

25 
¨gc
,

26 
sqlôe3_vÆue
 **
¨gv


28 
r
 = 
	`sqlôe3_vÆue_doubÀ
(
¨gv
[0]);

29 
	`sqlôe3_ªsu…_doubÀ
(
c⁄ãxt
, 
r
*r);

30 
	}
}

35 
	$sqr_öô
(

36 
sqlôe3
 *
db
,

37 **
pzEºMsg
,

38 c⁄° 
sqlôe3_≠i_routöes
 *
pApi


40 
	`SQLITE_EXTENSION_INIT2
(
pApi
);

41 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "sqr", 1, 
SQLITE_ANY
, 0, 
sqrFunc
, 0, 0);

43 
	}
}

48 
	$cubeFunc
(

49 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

50 
¨gc
,

51 
sqlôe3_vÆue
 **
¨gv


53 
r
 = 
	`sqlôe3_vÆue_doubÀ
(
¨gv
[0]);

54 
	`sqlôe3_ªsu…_doubÀ
(
c⁄ãxt
, 
r
*r*r);

55 
	}
}

60 
	$cube_öô
(

61 
sqlôe3
 *
db
,

62 **
pzEºMsg
,

63 c⁄° 
sqlôe3_≠i_routöes
 *
pApi


65 
	`SQLITE_EXTENSION_INIT2
(
pApi
);

66 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "cube", 1, 
SQLITE_ANY
, 0, 
cubeFunc
, 0, 0);

68 
	}
}

73 
	$brokí_öô
(

74 
sqlôe3
 *
db
,

75 **
pzEºMsg
,

76 c⁄° 
sqlôe3_≠i_routöes
 *
pApi


78 *
zEº
;

79 
	`SQLITE_EXTENSION_INIT2
(
pApi
);

80 
zEº
 = 
	`sqlôe3_m¥ötf
("brokenáutoext!");

81 *
pzEºMsg
 = 
zEº
;

83 
	}
}

90 
	$autoExtSqrObjCmd
(

91 * 
˛õ¡D©a
,

92 
T˛_I¡îp
 *
öãΩ
,

93 
objc
,

94 
T˛_Obj
 *
CONST
 
objv
[]

96 
rc
 = 
	`sqlôe3_auto_exãnsi⁄
((*)
sqr_öô
);

97 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

98  
SQLITE_OK
;

99 
	}
}

106 
	$ˇn˚lAutoExtSqrObjCmd
(

107 * 
˛õ¡D©a
,

108 
T˛_I¡îp
 *
öãΩ
,

109 
objc
,

110 
T˛_Obj
 *
CONST
 
objv
[]

112 
rc
 = 
	`sqlôe3_ˇn˚l_auto_exãnsi⁄
((*)
sqr_öô
);

113 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

114  
SQLITE_OK
;

115 
	}
}

122 
	$autoExtCubeObjCmd
(

123 * 
˛õ¡D©a
,

124 
T˛_I¡îp
 *
öãΩ
,

125 
objc
,

126 
T˛_Obj
 *
CONST
 
objv
[]

128 
rc
 = 
	`sqlôe3_auto_exãnsi⁄
((*)
cube_öô
);

129 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

130  
SQLITE_OK
;

131 
	}
}

138 
	$ˇn˚lAutoExtCubeObjCmd
(

139 * 
˛õ¡D©a
,

140 
T˛_I¡îp
 *
öãΩ
,

141 
objc
,

142 
T˛_Obj
 *
CONST
 
objv
[]

144 
rc
 = 
	`sqlôe3_ˇn˚l_auto_exãnsi⁄
((*)
cube_öô
);

145 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

146  
SQLITE_OK
;

147 
	}
}

154 
	$autoExtBrokíObjCmd
(

155 * 
˛õ¡D©a
,

156 
T˛_I¡îp
 *
öãΩ
,

157 
objc
,

158 
T˛_Obj
 *
CONST
 
objv
[]

160 
rc
 = 
	`sqlôe3_auto_exãnsi⁄
((*)
brokí_öô
);

161 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

162  
SQLITE_OK
;

163 
	}
}

170 
	$ˇn˚lAutoExtBrokíObjCmd
(

171 * 
˛õ¡D©a
,

172 
T˛_I¡îp
 *
öãΩ
,

173 
objc
,

174 
T˛_Obj
 *
CONST
 
objv
[]

176 
rc
 = 
	`sqlôe3_ˇn˚l_auto_exãnsi⁄
((*)
brokí_öô
);

177 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

178  
SQLITE_OK
;

179 
	}
}

189 
	$ª£tAutoExtObjCmd
(

190 * 
˛õ¡D©a
,

191 
T˛_I¡îp
 *
öãΩ
,

192 
objc
,

193 
T˛_Obj
 *
CONST
 
objv
[]

195 
	`sqlôe3_ª£t_auto_exãnsi⁄
();

196  
SQLITE_OK
;

197 
	}
}

203 
	$Sqlôëe°_aut€xt_Inô
(
T˛_I¡îp
 *
öãΩ
){

204 #i‚de‡
SQLITE_OMIT_LOAD_EXTENSION


205 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlite3_auto_extension_sqr",

206 
autoExtSqrObjCmd
, 0, 0);

207 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlite3_auto_extension_cube",

208 
autoExtCubeObjCmd
, 0, 0);

209 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlite3_auto_extension_broken",

210 
autoExtBrokíObjCmd
, 0, 0);

211 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlite3_cancel_auto_extension_sqr",

212 
ˇn˚lAutoExtSqrObjCmd
, 0, 0);

213 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlite3_cancel_auto_extension_cube",

214 
ˇn˚lAutoExtCubeObjCmd
, 0, 0);

215 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlite3_cancel_auto_extension_broken",

216 
ˇn˚lAutoExtBrokíObjCmd
, 0, 0);

218 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlite3_reset_auto_extension",

219 
ª£tAutoExtObjCmd
, 0, 0);

220  
TCL_OK
;

221 
	}
}

	@test_backup.c

16 
	~"t˛.h
"

17 
	~"sqlôe3.h
"

18 
	~<as£π.h
>

21 c⁄° *
sqlôe3EºName
();

24 
gëDbPoöãr
(
T˛_I¡îp
 *, c⁄° *, 
sqlôe3
 **);

26 
	$backupTe°Cmd
(

27 
Clõ¡D©a
 
˛õ¡D©a
,

28 
T˛_I¡îp
 *
öãΩ
,

29 
objc
,

30 
T˛_Obj
 *c⁄°*
objv


32 
	eBackupSubComm™dEnum
 {

33 
BACKUP_STEP
, 
BACKUP_FINISH
, 
BACKUP_REMAINING
, 
BACKUP_PAGECOUNT


35 
	sBackupSubComm™d
 {

36 c⁄° *
zCmd
;

37 
BackupSubComm™dEnum
 
eCmd
;

38 
nArg
;

39 c⁄° *
zArg
;

40 } 
aSub
[] = {

41 {"°ï", 
BACKUP_STEP
 , 1, "npage" },

42 {"föish", 
BACKUP_FINISH
 , 0, "" },

43 {"ªmaöög", 
BACKUP_REMAINING
 , 0, "" },

44 {"∑gecou¡", 
BACKUP_PAGECOUNT
 , 0, "" },

48 
sqlôe3_backup
 *
p
 = (sqlôe3_backu∞*)
˛õ¡D©a
;

49 
iCmd
;

50 
rc
;

52 
rc
 = 
	`T˛_GëIndexFromObjSåu˘
(

53 
öãΩ
, 
objv
[1], 
aSub
, ◊Sub[0]), "›ti⁄", 0, &
iCmd


55 if–
rc
!=
TCL_OK
 ){

56  
rc
;

58 if–
objc
!=(2 + 
aSub
[
iCmd
].
nArg
) ){

59 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, 
aSub
[
iCmd
].
zArg
);

60  
TCL_ERROR
;

63  
aSub
[
iCmd
].
eCmd
 ){

65 
BACKUP_FINISH
: {

66 c⁄° *
zCmdName
;

67 
T˛_CmdInfo
 
cmdInfo
;

68 
zCmdName
 = 
	`T˛_GëSåög
(
objv
[0]);

69 
	`T˛_GëComm™dInfo
(
öãΩ
, 
zCmdName
, &
cmdInfo
);

70 
cmdInfo
.
dñëeProc
 = 0;

71 
	`T˛_SëComm™dInfo
(
öãΩ
, 
zCmdName
, &
cmdInfo
);

72 
	`T˛_DñëeComm™d
(
öãΩ
, 
zCmdName
);

74 
rc
 = 
	`sqlôe3_backup_föish
(
p
);

75 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_STATIC
);

79 
BACKUP_STEP
: {

80 
nPage
;

81 if–
TCL_OK
!=
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
nPage
) ){

82  
TCL_ERROR
;

84 
rc
 = 
	`sqlôe3_backup_°ï
(
p
, 
nPage
);

85 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_STATIC
);

89 
BACKUP_REMAINING
:

90 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`sqlôe3_backup_ªmaöög
(
p
)));

93 
BACKUP_PAGECOUNT
:

94 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`sqlôe3_backup_∑gecou¡
(
p
)));

98  
TCL_OK
;

99 
	}
}

101 
	$backupTe°Föish
(
Clõ¡D©a
 
˛õ¡D©a
){

102 
sqlôe3_backup
 *
pBackup
 = (sqlôe3_backu∞*)
˛õ¡D©a
;

103 
	`sqlôe3_backup_föish
(
pBackup
);

104 
	}
}

110 
	$backupTe°Inô
(

111 
Clõ¡D©a
 
˛õ¡D©a
,

112 
T˛_I¡îp
 *
öãΩ
,

113 
objc
,

114 
T˛_Obj
 *c⁄°*
objv


116 
sqlôe3_backup
 *
pBackup
;

117 
sqlôe3
 *
pDe°Db
;

118 
sqlôe3
 *
pSrcDb
;

119 c⁄° *
zDe°Name
;

120 c⁄° *
zSrcName
;

121 c⁄° *
zCmd
;

123 if–
objc
!=6 ){

124 
	`T˛_Wr⁄gNumArgs
(

125 
öãΩ
, 1, 
objv
, "CMDNAME DESTHANDLE DESTNAME SRCHANDLE SRCNAME"

127  
TCL_ERROR
;

130 
zCmd
 = 
	`T˛_GëSåög
(
objv
[1]);

131 
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[2]), &
pDe°Db
);

132 
zDe°Name
 = 
	`T˛_GëSåög
(
objv
[3]);

133 
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[4]), &
pSrcDb
);

134 
zSrcName
 = 
	`T˛_GëSåög
(
objv
[5]);

136 
pBackup
 = 
	`sqlôe3_backup_öô
(
pDe°Db
, 
zDe°Name
, 
pSrcDb
, 
zSrcName
);

137 if–!
pBackup
 ){

138 
	`T˛_AµídResu…
(
öãΩ
, "sqlite3_backup_init() failed", 0);

139  
TCL_ERROR
;

142 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
zCmd
, 
backupTe°Cmd
, 
pBackup
, 
backupTe°Föish
);

143 
	`T˛_SëObjResu…
(
öãΩ
, 
objv
[1]);

144  
TCL_OK
;

145 
	}
}

147 
	$Sqlôëe°backup_Inô
(
T˛_I¡îp
 *
öãΩ
){

148 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlôe3_backup", 
backupTe°Inô
, 0, 0);

149  
TCL_OK
;

150 
	}
}

	@test_bestindex.c

95 
	~"sqlôeI¡.h
"

96 
	~"t˛.h
"

98 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


100 
t˛_vèb
 
	tt˛_vèb
;

101 
t˛_curs‹
 
	tt˛_curs‹
;

106 
	st˛_vèb
 {

107 
sqlôe3_vèb
 
	mba£
;

108 
T˛_I¡îp
 *
	möãΩ
;

109 
T˛_Obj
 *
	mpCmd
;

110 
sqlôe3
 *
	mdb
;

114 
	st˛_curs‹
 {

115 
sqlôe3_vèb_curs‹
 
	mba£
;

116 
sqlôe3_°mt
 *
	mpStmt
;

122 
	$t˛DequŸe
(*
z
){

123 
q
 = 
z
[0];

126 if–
q
=='[' || q=='\'' || q=='"' || q=='`' ){

127 
iIn
 = 1;

128 
iOut
 = 0;

129 if–
q
=='[' ) q = ']';

131  
	`ALWAYS
(
z
[
iIn
]) ){

132 if–
z
[
iIn
]==
q
 ){

133 if–
z
[
iIn
+1]!=
q
 ){

135 
iIn
++;

141 
iIn
 += 2;

142 
z
[
iOut
++] = 
q
;

145 
z
[
iOut
++] = z[
iIn
++];

149 
z
[
iOut
] = '\0';

151 
	}
}

164 
	$t˛C⁄√˘
(

165 
sqlôe3
 *
db
,

166 *
pAux
,

167 
¨gc
, c⁄° *c⁄°*
¨gv
,

168 
sqlôe3_vèb
 **
µVèb
,

169 **
pzEº


171 
T˛_I¡îp
 *
öãΩ
 = (T˛_I¡îp*)
pAux
;

172 
t˛_vèb
 *
pTab
 = 0;

173 *
zCmd
 = 0;

174 
T˛_Obj
 *
pS¸ùt
 = 0;

175 
rc
 = 
SQLITE_OK
;

177 if–
¨gc
!=4 ){

178 *
pzEº
 = 
	`sqlôe3_m¥ötf
("wrongÇumber ofárguments");

179  
SQLITE_ERROR
;

182 
zCmd
 = 
	`sqlôe3_mÆloc
(
	`°æí
(
¨gv
[3])+1);

183 
pTab
 = (
t˛_vèb
*)
	`sqlôe3_mÆloc
((tcl_vtab));

184 if–
zCmd
 && 
pTab
 ){

185 
	`mem˝y
(
zCmd
, 
¨gv
[3], 
	`°æí
(argv[3])+1);

186 
	`t˛DequŸe
(
zCmd
);

187 
	`mem£t
(
pTab
, 0, (
t˛_vèb
));

189 
pTab
->
pCmd
 = 
	`T˛_NewSåögObj
(
zCmd
, -1);

190 
pTab
->
öãΩ
 = interp;

191 
pTab
->
db
 = db;

192 
	`T˛_In¸RefCou¡
(
pTab
->
pCmd
);

194 
pS¸ùt
 = 
	`T˛_Du∂iˇãObj
(
pTab
->
pCmd
);

195 
	`T˛_In¸RefCou¡
(
pS¸ùt
);

196 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pS¸ùt
, 
	`T˛_NewSåögObj
("xConnect", -1));

198 
rc
 = 
	`T˛_EvÆObjEx
(
öãΩ
, 
pS¸ùt
, 
TCL_EVAL_GLOBAL
);

199 if–
rc
!=
TCL_OK
 ){

200 *
pzEº
 = 
	`sqlôe3_m¥ötf
("%s", 
	`T˛_GëSåögResu…
(
öãΩ
));

201 
rc
 = 
SQLITE_ERROR
;

203 
rc
 = 
	`sqlôe3_de˛¨e_vèb
(
db
, 
	`T˛_GëSåögResu…
(
öãΩ
));

206 if–
rc
!=
SQLITE_OK
 ){

207 
	`sqlôe3_‰ì
(
pTab
);

208 
pTab
 = 0;

211 
rc
 = 
SQLITE_NOMEM
;

214 
	`sqlôe3_‰ì
(
zCmd
);

215 *
µVèb
 = &
pTab
->
ba£
;

216  
rc
;

217 
	}
}

220 
	$t˛Disc⁄√˘
(
sqlôe3_vèb
 *
pVèb
){

221 
t˛_vèb
 *
pTab
 = (t˛_vèb*)
pVèb
;

222 
	`T˛_De¸RefCou¡
(
pTab
->
pCmd
);

223 
	`sqlôe3_‰ì
(
pTab
);

224  
SQLITE_OK
;

225 
	}
}

230 
	$t˛O≥n
(
sqlôe3_vèb
 *
pVTab
, 
sqlôe3_vèb_curs‹
 **
µCurs‹
){

231 
t˛_curs‹
 *
pCur
;

232 
pCur
 = 
	`sqlôe3_mÆloc
((
t˛_curs‹
));

233 if–
pCur
==0 )  
SQLITE_NOMEM
;

234 
	`mem£t
(
pCur
, 0, (
t˛_curs‹
));

235 *
µCurs‹
 = &
pCur
->
ba£
;

236  
SQLITE_OK
;

237 
	}
}

242 
	$t˛Clo£
(
sqlôe3_vèb_curs‹
 *
cur
){

243 
t˛_curs‹
 *
pCur
 = (t˛_curs‹ *)
cur
;

244 if–
pCur
 ){

245 
	`sqlôe3_föÆize
(
pCur
->
pStmt
);

246 
	`sqlôe3_‰ì
(
pCur
);

248  
SQLITE_OK
;

249 
	}
}

251 
	$t˛Next
(
sqlôe3_vèb_curs‹
 *
pVèbCurs‹
){

252 
t˛_curs‹
 *
pC§
 = (t˛_curs‹*)
pVèbCurs‹
;

253 if–
pC§
->
pStmt
 ){

254 
t˛_vèb
 *
pTab
 = (t˛_vèb*)(
pVèbCurs‹
->
pVèb
);

255 
rc
 = 
	`sqlôe3_°ï
(
pC§
->
pStmt
);

256 if–
rc
!=
SQLITE_ROW
 ){

257 c⁄° *
zEº
;

258 
rc
 = 
	`sqlôe3_föÆize
(
pC§
->
pStmt
);

259 
pC§
->
pStmt
 = 0;

260 if–
rc
!=
SQLITE_OK
 ){

261 
zEº
 = 
	`sqlôe3_îrmsg
(
pTab
->
db
);

262 
pTab
->
ba£
.
zEºMsg
 = 
	`sqlôe3_m¥ötf
("%s", 
zEº
);

266  
SQLITE_OK
;

267 
	}
}

269 
	$t˛Fûãr
(

270 
sqlôe3_vèb_curs‹
 *
pVèbCurs‹
,

271 
idxNum
, c⁄° *
idxSå
,

272 
¨gc
, 
sqlôe3_vÆue
 **
¨gv


274 
t˛_curs‹
 *
pC§
 = (t˛_curs‹*)
pVèbCurs‹
;

275 
t˛_vèb
 *
pTab
 = (t˛_vèb*)(
pVèbCurs‹
->
pVèb
);

276 
T˛_I¡îp
 *
öãΩ
 = 
pTab
->interp;

277 
T˛_Obj
 *
pS¸ùt
;

278 
T˛_Obj
 *
pArg
;

279 
ii
;

280 
rc
;

282 
pS¸ùt
 = 
	`T˛_Du∂iˇãObj
(
pTab
->
pCmd
);

283 
	`T˛_In¸RefCou¡
(
pS¸ùt
);

284 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pS¸ùt
, 
	`T˛_NewSåögObj
("xFilter", -1));

285 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pS¸ùt
, 
	`T˛_NewI¡Obj
(
idxNum
));

286 if–
idxSå
 ){

287 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pS¸ùt
, 
	`T˛_NewSåögObj
(
idxSå
, -1));

289 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pS¸ùt
, 
	`T˛_NewSåögObj
("", -1));

292 
pArg
 = 
	`T˛_NewObj
();

293 
	`T˛_In¸RefCou¡
(
pArg
);

294 
ii
=0; ii<
¨gc
; ii++){

295 c⁄° *
zVÆ
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[
ii
]);

296 
T˛_Obj
 *
pVÆ
;

297 if–
zVÆ
==0 ){

298 
pVÆ
 = 
	`T˛_NewObj
();

300 
pVÆ
 = 
	`T˛_NewSåögObj
(
zVÆ
, -1);

302 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pArg
, 
pVÆ
);

304 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pS¸ùt
, 
pArg
);

305 
	`T˛_De¸RefCou¡
(
pArg
);

307 
rc
 = 
	`T˛_EvÆObjEx
(
öãΩ
, 
pS¸ùt
, 
TCL_EVAL_GLOBAL
);

308 if–
rc
!=
TCL_OK
 ){

309 c⁄° *
zEº
 = 
	`T˛_GëSåögResu…
(
öãΩ
);

310 
rc
 = 
SQLITE_ERROR
;

311 
pTab
->
ba£
.
zEºMsg
 = 
	`sqlôe3_m¥ötf
("%s", 
zEº
);

319 
T˛_Obj
 *
pRes
 = 
	`T˛_GëObjResu…
(
öãΩ
);

320 
T˛_Obj
 **
≠EÀm
 = 0;

321 
nEÀm
;

322 
rc
 = 
	`T˛_Li°ObjGëEÀmíts
(
öãΩ
, 
pRes
, &
nEÀm
, &
≠EÀm
);

323 if–
rc
!=
TCL_OK
 ){

324 c⁄° *
zEº
 = 
	`T˛_GëSåögResu…
(
öãΩ
);

325 
rc
 = 
SQLITE_ERROR
;

326 
pTab
->
ba£
.
zEºMsg
 = 
	`sqlôe3_m¥ötf
("%s", 
zEº
);

328 
ii
=0; 
rc
==
SQLITE_OK
 && ii<
nEÀm
; ii+=2){

329 c⁄° *
zCmd
 = 
	`T˛_GëSåög
(
≠EÀm
[
ii
]);

330 
T˛_Obj
 *
p
 = 
≠EÀm
[
ii
+1];

331 if–
	`sqlôe3_°ricmp
("sql", 
zCmd
)==0 ){

332 c⁄° *
zSql
 = 
	`T˛_GëSåög
(
p
);

333 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
pTab
->
db
, 
zSql
, -1, &
pC§
->
pStmt
, 0);

334 if–
rc
!=
SQLITE_OK
 ){

335 c⁄° *
zEº
 = 
	`sqlôe3_îrmsg
(
pTab
->
db
);

336 
pTab
->
ba£
.
zEºMsg
 = 
	`sqlôe3_m¥ötf
("u√x≥˘ed: %s", 
zEº
);

339 
rc
 = 
SQLITE_ERROR
;

340 
pTab
->
ba£
.
zEºMsg
 = 
	`sqlôe3_m¥ötf
("u√x≥˘ed: %s", 
zCmd
);

346 if–
rc
==
SQLITE_OK
 ){

347 
rc
 = 
	`t˛Next
(
pVèbCurs‹
);

349  
rc
;

350 
	}
}

352 
	$t˛Cﬁumn
(

353 
sqlôe3_vèb_curs‹
 *
pVèbCurs‹
,

354 
sqlôe3_c⁄ãxt
 *
˘x
,

355 
i


357 
t˛_curs‹
 *
pC§
 = (t˛_curs‹*)
pVèbCurs‹
;

358 
	`sqlôe3_ªsu…_vÆue
(
˘x
, 
	`sqlôe3_cﬁumn_vÆue
(
pC§
->
pStmt
, 
i
+1));

359  
SQLITE_OK
;

360 
	}
}

362 
	$t˛Rowid
(
sqlôe3_vèb_curs‹
 *
pVèbCurs‹
, 
sqlôe_öt64
 *
pRowid
){

363 
t˛_curs‹
 *
pC§
 = (t˛_curs‹*)
pVèbCurs‹
;

364 *
pRowid
 = 
	`sqlôe3_cﬁumn_öt64
(
pC§
->
pStmt
, 0);

365  
SQLITE_OK
;

366 
	}
}

368 
	$t˛Eof
(
sqlôe3_vèb_curs‹
 *
pVèbCurs‹
){

369 
t˛_curs‹
 *
pC§
 = (t˛_curs‹*)
pVèbCurs‹
;

370  (
pC§
->
pStmt
==0);

371 
	}
}

373 
	$t˛Be°Index
(
sqlôe3_vèb
 *
èb
, 
sqlôe3_ödex_öfo
 *
pIdxInfo
){

374 
t˛_vèb
 *
pTab
 = (t˛_vèb*)
èb
;

375 
T˛_I¡îp
 *
öãΩ
 = 
pTab
->interp;

376 
T˛_Obj
 *
pArg
;

377 
T˛_Obj
 *
pS¸ùt
;

378 
ii
;

379 
rc
 = 
SQLITE_OK
;

381 
pS¸ùt
 = 
	`T˛_Du∂iˇãObj
(
pTab
->
pCmd
);

382 
	`T˛_In¸RefCou¡
(
pS¸ùt
);

383 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pS¸ùt
, 
	`T˛_NewSåögObj
("xBestIndex", -1));

385 
pArg
 = 
	`T˛_NewObj
();

386 
	`T˛_In¸RefCou¡
(
pArg
);

387 
ii
=0; ii<
pIdxInfo
->
nC⁄°øöt
; ii++){

388 
sqlôe3_ödex_c⁄°øöt
 c⁄° *
pC⁄s
 = &
pIdxInfo
->
aC⁄°øöt
[
ii
];

389 
T˛_Obj
 *
pEÀm
 = 
	`T˛_NewObj
();

390 c⁄° *
zOp
 = "?";

392 
	`T˛_In¸RefCou¡
(
pEÀm
);

394  
pC⁄s
->
›
 ){

395 
SQLITE_INDEX_CONSTRAINT_EQ
:

396 
zOp
 = "eq"; ;

397 
SQLITE_INDEX_CONSTRAINT_GT
:

398 
zOp
 = "gt"; ;

399 
SQLITE_INDEX_CONSTRAINT_LE
:

400 
zOp
 = "le"; ;

401 
SQLITE_INDEX_CONSTRAINT_LT
:

402 
zOp
 = "lt"; ;

403 
SQLITE_INDEX_CONSTRAINT_GE
:

404 
zOp
 = "ge"; ;

405 
SQLITE_INDEX_CONSTRAINT_MATCH
:

406 
zOp
 = "match"; ;

407 
SQLITE_INDEX_CONSTRAINT_LIKE
:

408 
zOp
 = "like"; ;

409 
SQLITE_INDEX_CONSTRAINT_GLOB
:

410 
zOp
 = "glob"; ;

411 
SQLITE_INDEX_CONSTRAINT_REGEXP
:

412 
zOp
 = "regexp"; ;

415 
	`T˛_Li°ObjAµídEÀmít
(0, 
pEÀm
, 
	`T˛_NewSåögObj
("op", -1));

416 
	`T˛_Li°ObjAµídEÀmít
(0, 
pEÀm
, 
	`T˛_NewSåögObj
(
zOp
, -1));

417 
	`T˛_Li°ObjAµídEÀmít
(0, 
pEÀm
, 
	`T˛_NewSåögObj
("column", -1));

418 
	`T˛_Li°ObjAµídEÀmít
(0, 
pEÀm
, 
	`T˛_NewI¡Obj
(
pC⁄s
->
iCﬁumn
));

419 
	`T˛_Li°ObjAµídEÀmít
(0, 
pEÀm
, 
	`T˛_NewSåögObj
("usable", -1));

420 
	`T˛_Li°ObjAµídEÀmít
(0, 
pEÀm
, 
	`T˛_NewI¡Obj
(
pC⁄s
->
ußbÀ
));

422 
	`T˛_Li°ObjAµídEÀmít
(0, 
pArg
, 
pEÀm
);

423 
	`T˛_De¸RefCou¡
(
pEÀm
);

426 
	`T˛_Li°ObjAµídEÀmít
(0, 
pS¸ùt
, 
pArg
);

427 
	`T˛_De¸RefCou¡
(
pArg
);

429 
pArg
 = 
	`T˛_NewObj
();

430 
	`T˛_In¸RefCou¡
(
pArg
);

431 
ii
=0; ii<
pIdxInfo
->
nOrdîBy
; ii++){

432 
sqlôe3_ödex_‹dîby
 c⁄° *
pOrdî
 = &
pIdxInfo
->
aOrdîBy
[
ii
];

433 
T˛_Obj
 *
pEÀm
 = 
	`T˛_NewObj
();

434 
	`T˛_In¸RefCou¡
(
pEÀm
);

436 
	`T˛_Li°ObjAµídEÀmít
(0, 
pEÀm
, 
	`T˛_NewSåögObj
("column", -1));

437 
	`T˛_Li°ObjAµídEÀmít
(0, 
pEÀm
, 
	`T˛_NewI¡Obj
(
pOrdî
->
iCﬁumn
));

438 
	`T˛_Li°ObjAµídEÀmít
(0, 
pEÀm
, 
	`T˛_NewSåögObj
("desc", -1));

439 
	`T˛_Li°ObjAµídEÀmít
(0, 
pEÀm
, 
	`T˛_NewI¡Obj
(
pOrdî
->
desc
));

441 
	`T˛_Li°ObjAµídEÀmít
(0, 
pArg
, 
pEÀm
);

442 
	`T˛_De¸RefCou¡
(
pEÀm
);

445 
	`T˛_Li°ObjAµídEÀmít
(0, 
pS¸ùt
, 
pArg
);

446 
	`T˛_De¸RefCou¡
(
pArg
);

448 
	`T˛_Li°ObjAµídEÀmít
(0, 
pS¸ùt
, 
	`T˛_NewWideI¡Obj
(
pIdxInfo
->
cﬁU£d
));

450 
rc
 = 
	`T˛_EvÆObjEx
(
öãΩ
, 
pS¸ùt
, 
TCL_EVAL_GLOBAL
);

451 
	`T˛_De¸RefCou¡
(
pS¸ùt
);

452 if–
rc
!=
TCL_OK
 ){

453 c⁄° *
zEº
 = 
	`T˛_GëSåögResu…
(
öãΩ
);

454 
rc
 = 
SQLITE_ERROR
;

455 
pTab
->
ba£
.
zEºMsg
 = 
	`sqlôe3_m¥ötf
("%s", 
zEº
);

469 
T˛_Obj
 *
pRes
 = 
	`T˛_GëObjResu…
(
öãΩ
);

470 
T˛_Obj
 **
≠EÀm
 = 0;

471 
nEÀm
;

472 
rc
 = 
	`T˛_Li°ObjGëEÀmíts
(
öãΩ
, 
pRes
, &
nEÀm
, &
≠EÀm
);

473 if–
rc
!=
TCL_OK
 ){

474 c⁄° *
zEº
 = 
	`T˛_GëSåögResu…
(
öãΩ
);

475 
rc
 = 
SQLITE_ERROR
;

476 
pTab
->
ba£
.
zEºMsg
 = 
	`sqlôe3_m¥ötf
("%s", 
zEº
);

478 
iArgv
 = 1;

479 
ii
=0; 
rc
==
SQLITE_OK
 && ii<
nEÀm
; ii+=2){

480 c⁄° *
zCmd
 = 
	`T˛_GëSåög
(
≠EÀm
[
ii
]);

481 
T˛_Obj
 *
p
 = 
≠EÀm
[
ii
+1];

482 if–
	`sqlôe3_°ricmp
("co°", 
zCmd
)==0 ){

483 
rc
 = 
	`T˛_GëDoubÀFromObj
(
öãΩ
, 
p
, &
pIdxInfo
->
e°im©edCo°
);

485 if–
	`sqlôe3_°ricmp
("‹dîby", 
zCmd
)==0 ){

486 
rc
 = 
	`T˛_GëI¡FromObj
(
öãΩ
, 
p
, &
pIdxInfo
->
‹dîByC⁄sumed
);

488 if–
	`sqlôe3_°ricmp
("idxnum", 
zCmd
)==0 ){

489 
rc
 = 
	`T˛_GëI¡FromObj
(
öãΩ
, 
p
, &
pIdxInfo
->
idxNum
);

491 if–
	`sqlôe3_°ricmp
("idx°r", 
zCmd
)==0 ){

492 
	`sqlôe3_‰ì
(
pIdxInfo
->
idxSå
);

493 
pIdxInfo
->
idxSå
 = 
	`sqlôe3_m¥ötf
("%s", 
	`T˛_GëSåög
(
p
));

494 
pIdxInfo
->
√edToFªeIdxSå
 = 1;

496 if–
	`sqlôe3_°ricmp
("rows", 
zCmd
)==0 ){

497 
T˛_WideI¡
 
x
 = 0;

498 
rc
 = 
	`T˛_GëWideI¡FromObj
(
öãΩ
, 
p
, &
x
);

499 
pIdxInfo
->
e°im©edRows
 = (
tRow˙t
)
x
;

501 if–
	`sqlôe3_°ricmp
("u£", 
zCmd
)==0

502 || 
	`sqlôe3_°ricmp
("omô", 
zCmd
)==0

504 
iC⁄s
;

505 
rc
 = 
	`T˛_GëI¡FromObj
(
öãΩ
, 
p
, &
iC⁄s
);

506 if–
rc
==
SQLITE_OK
 ){

507 if–
iC⁄s
<0 || iC⁄s>=
pIdxInfo
->
nC⁄°øöt
 ){

508 
rc
 = 
SQLITE_ERROR
;

509 
pTab
->
ba£
.
zEºMsg
 = 
	`sqlôe3_m¥ötf
("u√x≥˘ed: %d", 
iC⁄s
);

511 
bOmô
 = (
zCmd
[0]=='o' || zCmd[0]=='O');

512 
pIdxInfo
->
aC⁄°øötUßge
[
iC⁄s
].
¨gvIndex
 = 
iArgv
++;

513 
pIdxInfo
->
aC⁄°øötUßge
[
iC⁄s
].
omô
 = 
bOmô
;

517 
rc
 = 
SQLITE_ERROR
;

518 
pTab
->
ba£
.
zEºMsg
 = 
	`sqlôe3_m¥ötf
("u√x≥˘ed: %s", 
zCmd
);

520 if–
rc
!=
SQLITE_OK
 && 
pTab
->
ba£
.
zEºMsg
==0 ){

521 c⁄° *
zEº
 = 
	`T˛_GëSåögResu…
(
öãΩ
);

522 
pTab
->
ba£
.
zEºMsg
 = 
	`sqlôe3_m¥ötf
("%s", 
zEº
);

528  
rc
;

529 
	}
}

535 
sqlôe3_moduÀ
 
	gt˛ModuÀ
 = {

537 
t˛C⁄√˘
,

538 
t˛C⁄√˘
,

539 
t˛Be°Index
,

540 
t˛Disc⁄√˘
,

541 
t˛Disc⁄√˘
,

542 
t˛O≥n
,

543 
t˛Clo£
,

544 
t˛Fûãr
,

545 
t˛Next
,

546 
t˛Eof
,

547 
t˛Cﬁumn
,

548 
t˛Rowid
,

561 
gëDbPoöãr
(
T˛_I¡îp
 *
öãΩ
, c⁄° *
zA
, 
sqlôe3
 **
µDb
);

566 
	$ªgi°î_t˛_moduÀ
(

567 
Clõ¡D©a
 
˛õ¡D©a
,

568 
T˛_I¡îp
 *
öãΩ
,

569 
objc
,

570 
T˛_Obj
 *
CONST
 
objv
[]

572 
sqlôe3
 *
db
;

573 if–
objc
!=2 ){

574 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB");

575  
TCL_ERROR
;

577 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

578 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


579 
	`sqlôe3_¸óã_moduÀ
(
db
, "t˛", &
t˛ModuÀ
, (*)
öãΩ
);

581  
TCL_OK
;

582 
	}
}

590 
	$Sqlôëe°t˛_Inô
(
T˛_I¡îp
 *
öãΩ
){

591 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


593 *
zName
;

594 
T˛_ObjCmdProc
 *
xProc
;

595 *
˛õ¡D©a
;

596 } 
aObjCmd
[] = {

597 { "ªgi°î_t˛_moduÀ", 
ªgi°î_t˛_moduÀ
, 0 },

599 
i
;

600 
i
=0; i<(
aObjCmd
)/(aObjCmd[0]); i++){

601 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
aObjCmd
[
i
].
zName
,

602 
aObjCmd
[
i
].
xProc
,áObjCmd[i].
˛õ¡D©a
, 0);

605  
TCL_OK
;

606 
	}
}

	@test_blob.c

14 
	~"sqlôeI¡.h
"

15 
	~"t˛.h
"

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

18 
	~<as£π.h
>

19 #i‚de‡
SQLITE_OMIT_INCRBLOB


22 c⁄° *
sqlôe3EºName
();

25 
gëDbPoöãr
(
T˛_I¡îp
 *
öãΩ
, c⁄° *
zA
, 
sqlôe3
 **
µDb
);

26 *
sqlôe3Te°TextToPå
(c⁄° *
z
);

33 *
	$±rToText
(*
p
){

34 
buf
[100];

35 
	`sqlôe3_¢¥ötf
((
buf
)-1, buf, "%p", 
p
);

36  
buf
;

37 
	}
}

51 
	$blobH™dÀFromObj
(

52 
T˛_I¡îp
 *
öãΩ
,

53 
T˛_Obj
 *
pObj
,

54 
sqlôe3_blob
 **
µBlob


56 *
z
;

57 
n
;

59 
z
 = 
	`T˛_GëSåögFromObj
(
pObj
, &
n
);

60 if–
n
==0 ){

61 *
µBlob
 = 0;

62 }if–
n
>9 && 0==
	`memcmp
("ö¸blob_", 
z
, 9) ){

63 
nŸU£d
;

64 
T˛_Ch™√l
 
ch™√l
;

65 
Clõ¡D©a
 
ö°™˚D©a
;

67 
ch™√l
 = 
	`T˛_GëCh™√l
(
öãΩ
, 
z
, &
nŸU£d
);

68 if–!
ch™√l
 )  
TCL_ERROR
;

70 
	`T˛_Flush
(
ch™√l
);

71 
	`T˛_Sìk
(
ch™√l
, 0, 
SEEK_SET
);

73 
ö°™˚D©a
 = 
	`T˛_GëCh™√lIn°™˚D©a
(
ch™√l
);

74 *
µBlob
 = *((
sqlôe3_blob
 **)
ö°™˚D©a
);

76 *
µBlob
 = (
sqlôe3_blob
*)
	`sqlôe3Te°TextToPå
(
z
);

79  
TCL_OK
;

80 
	}
}

86 *
	$blobSåögFromObj
(
T˛_Obj
 *
pObj
){

87 
n
;

88 *
z
;

89 
z
 = 
	`T˛_GëSåögFromObj
(
pObj
, &
n
);

90  (
n
 ? 
z
 : 0);

91 
	}
}

98 
	$ã°_blob_›í
(

99 
Clõ¡D©a
 
˛õ¡D©a
,

100 
T˛_I¡îp
 *
öãΩ
,

101 
objc
,

102 
T˛_Obj
 *
CONST
 
objv
[]

104 
sqlôe3
 *
db
;

105 c⁄° *
zDb
;

106 c⁄° *
zTabÀ
;

107 c⁄° *
zCﬁumn
;

108 
T˛_WideI¡
 
iRowid
;

109 
Êags
;

110 c⁄° *
zV¨«me
;

111 
nV¨«me
;

113 
sqlôe3_blob
 *
pBlob
 = (sqlite3_blob*)0xFFFFFFFF;

114 
rc
;

116 if–
objc
!=8 ){

117 c⁄° *
zUßge
 = "DB DATABASE TABLE COLUMN ROWID FLAGS VARNAME";

118 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, 
zUßge
);

119  
TCL_ERROR
;

121 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

122 
zDb
 = 
	`T˛_GëSåög
(
objv
[2]);

123 
zTabÀ
 = 
	`blobSåögFromObj
(
objv
[3]);

124 
zCﬁumn
 = 
	`T˛_GëSåög
(
objv
[4]);

125 if–
	`T˛_GëWideI¡FromObj
(
öãΩ
, 
objv
[5], &
iRowid
ËË 
TCL_ERROR
;

126 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[6], &
Êags
ËË 
TCL_ERROR
;

127 
zV¨«me
 = 
	`T˛_GëSåögFromObj
(
objv
[7], &
nV¨«me
);

129 if–
nV¨«me
>0 ){

130 
rc
 = 
	`sqlôe3_blob_›í
(
db
, 
zDb
, 
zTabÀ
, 
zCﬁumn
, 
iRowid
, 
Êags
, &
pBlob
);

131 
	`T˛_SëV¨
(
öãΩ
, 
zV¨«me
, 
	`±rToText
(
pBlob
), 0);

133 
rc
 = 
	`sqlôe3_blob_›í
(
db
, 
zDb
, 
zTabÀ
, 
zCﬁumn
, 
iRowid
, 
Êags
, 0);

136 if–
rc
==
SQLITE_OK
 ){

137 
	`T˛_Re£tResu…
(
öãΩ
);

139 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_VOLATILE
);

140  
TCL_ERROR
;

142  
TCL_OK
;

143 
	}
}

149 
	$ã°_blob_˛o£
(

150 
Clõ¡D©a
 
˛õ¡D©a
,

151 
T˛_I¡îp
 *
öãΩ
,

152 
objc
,

153 
T˛_Obj
 *
CONST
 
objv
[]

155 
sqlôe3_blob
 *
pBlob
;

156 
rc
;

158 if–
objc
!=2 ){

159 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "HANDLE");

160  
TCL_ERROR
;

163 if–
	`blobH™dÀFromObj
(
öãΩ
, 
objv
[1], &
pBlob
ËË 
TCL_ERROR
;

164 
rc
 = 
	`sqlôe3_blob_˛o£
(
pBlob
);

166 if–
rc
 ){

167 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_VOLATILE
);

169 
	`T˛_Re£tResu…
(
öãΩ
);

171  
TCL_OK
;

172 
	}
}

177 
	$ã°_blob_byãs
(

178 
Clõ¡D©a
 
˛õ¡D©a
,

179 
T˛_I¡îp
 *
öãΩ
,

180 
objc
,

181 
T˛_Obj
 *
CONST
 
objv
[]

183 
sqlôe3_blob
 *
pBlob
;

184 
nByã
;

186 if–
objc
!=2 ){

187 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "HANDLE");

188  
TCL_ERROR
;

191 if–
	`blobH™dÀFromObj
(
öãΩ
, 
objv
[1], &
pBlob
ËË 
TCL_ERROR
;

192 
nByã
 = 
	`sqlôe3_blob_byãs
(
pBlob
);

193 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
nByã
));

195  
TCL_OK
;

196 
	}
}

213 
	$ã°_blob_ªad
(

214 
Clõ¡D©a
 
˛õ¡D©a
,

215 
T˛_I¡îp
 *
öãΩ
,

216 
objc
,

217 
T˛_Obj
 *
CONST
 
objv
[]

219 
sqlôe3_blob
 *
pBlob
;

220 
nByã
;

221 
iOff£t
;

222 *
zBuf
 = 0;

223 
rc
;

225 if–
objc
!=4 ){

226 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "CHANNEL OFFSET N");

227  
TCL_ERROR
;

230 if–
	`blobH™dÀFromObj
(
öãΩ
, 
objv
[1], &
pBlob
ËË 
TCL_ERROR
;

231 if–
TCL_OK
!=
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
iOff£t
)

232 || 
TCL_OK
!=
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
nByã
)

234  
TCL_ERROR
;

237 if–
nByã
>0 ){

238 
zBuf
 = (*)
	`T˛_AŒoc
(
nByã
);

240 
rc
 = 
	`sqlôe3_blob_ªad
(
pBlob
, 
zBuf
, 
nByã
, 
iOff£t
);

241 if–
rc
==
SQLITE_OK
 ){

242 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewByãAºayObj
(
zBuf
, 
nByã
));

244 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_VOLATILE
);

246 
	`T˛_Fªe
((*)
zBuf
);

248  (
rc
==
SQLITE_OK
 ? 
TCL_OK
 : 
TCL_ERROR
);

249 
	}
}

265 
	$ã°_blob_wrôe
(

266 
Clõ¡D©a
 
˛õ¡D©a
,

267 
T˛_I¡îp
 *
öãΩ
,

268 
objc
,

269 
T˛_Obj
 *
CONST
 
objv
[]

271 
sqlôe3_blob
 *
pBlob
;

272 
iOff£t
;

273 
rc
;

275 *
zBuf
;

276 
nBuf
;

278 if–
objc
!=4 && objc!=5 ){

279 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "HANDLE OFFSET DATA ?NDATA?");

280  
TCL_ERROR
;

283 if–
	`blobH™dÀFromObj
(
öãΩ
, 
objv
[1], &
pBlob
ËË 
TCL_ERROR
;

284 if–
TCL_OK
!=
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
iOff£t
) ){

285  
TCL_ERROR
;

288 
zBuf
 = 
	`T˛_GëByãAºayFromObj
(
objv
[3], &
nBuf
);

289 if–
objc
==5 && 
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[4], &
nBuf
) ){

290  
TCL_ERROR
;

292 
rc
 = 
	`sqlôe3_blob_wrôe
(
pBlob
, 
zBuf
, 
nBuf
, 
iOff£t
);

293 if–
rc
!=
SQLITE_OK
 ){

294 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_VOLATILE
);

297  (
rc
==
SQLITE_OK
 ? 
TCL_OK
 : 
TCL_ERROR
);

298 
	}
}

304 
	$Sqlôëe°_blob_Inô
(
T˛_I¡îp
 *
öãΩ
){

305 #i‚de‡
SQLITE_OMIT_INCRBLOB


307 *
zName
;

308 
T˛_ObjCmdProc
 *
xProc
;

309 } 
aObjCmd
[] = {

310 { "sqlôe3_blob_›í", 
ã°_blob_›í
 },

311 { "sqlôe3_blob_˛o£", 
ã°_blob_˛o£
 },

312 { "sqlôe3_blob_byãs", 
ã°_blob_byãs
 },

313 { "sqlôe3_blob_ªad", 
ã°_blob_ªad
 },

314 { "sqlôe3_blob_wrôe", 
ã°_blob_wrôe
 },

316 
i
;

317 
i
=0; i<(
aObjCmd
)/(aObjCmd[0]); i++){

318 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
aObjCmd
[
i
].
zName
,áObjCmd[i].
xProc
, 0, 0);

321  
TCL_OK
;

322 
	}
}

	@test_btree.c

16 
	~"båìI¡.h
"

17 
	~<t˛.h
>

25 
	$sqlôe3BåìSh¨edCacheRï‹t
(

26 * 
˛õ¡D©a
,

27 
T˛_I¡îp
 *
öãΩ
,

28 
objc
,

29 
T˛_Obj
 *
CONST
 
objv
[]

31 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


32 
BtSh¨ed
 *
sqlôe3Sh¨edCacheLi°
;

33 
BtSh¨ed
 *
pBt
;

34 
T˛_Obj
 *
pRë
 = 
	`T˛_NewObj
();

35 
pBt
=
	`GLOBAL
(
BtSh¨ed
*,
sqlôe3Sh¨edCacheLi°
);ÖBt;ÖBtıBt->
pNext
){

36 c⁄° *
zFûe
 = 
	`sqlôe3PagîFûíame
(
pBt
->
pPagî
, 1);

37 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`T˛_NewSåögObj
(
zFûe
, -1));

38 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`T˛_NewI¡Obj
(
pBt
->
nRef
));

40 
	`T˛_SëObjResu…
(
öãΩ
, 
pRë
);

42  
TCL_OK
;

43 
	}
}

48 
	$sqlôe3BåìCurs‹Li°
(
Båì
 *
p
){

49 #ifde‡
SQLITE_DEBUG


50 
BtCurs‹
 *
pCur
;

51 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

52 
pCur
=
pBt
->
pCurs‹
;ÖCur;ÖCurıCur->
pNext
){

53 
MemPage
 *
pPage
 = 
pCur
->
≠Page
[pCur->
iPage
];

54 *
zMode
 = (
pCur
->
curFœgs
 & 
BTCF_WrôeFœg
) ? "rw" : "ro";

55 
	`sqlôe3DebugPrötf
("CURSOR %pÑootedát %4d(%s) currentlyát %d.%d%s\n",

56 
pCur
,ÖCur->
pgnoRoŸ
, 
zMode
,

57 
pPage
 ?ÖPage->
pgno
 : 0, 
pCur
->
aiIdx
[pCur->
iPage
],

58 (
pCur
->
eSèã
==
CURSOR_VALID
) ? "" : "Éof"

62 
	}
}

	@test_config.c

20 
	~"sqlôeLimô.h
"

22 
	~"sqlôeI¡.h
"

23 #i‡
SQLITE_OS_WIN


24 
	~"os_wö.h
"

27 
	~"t˛.h
"

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

35 
	#STRINGVALUE2
(
x
Ë#x

	)

36 
	#STRINGVALUE
(
x
Ë
	`STRINGVALUE2
(x)

	)

43 
	$£t_›ti⁄s
(
T˛_I¡îp
 *
öãΩ
){

44 #i‡
HAVE_MALLOC_USABLE_SIZE


45 
	`T˛_SëV¨2
(
öãΩ
, "sqlite_options", "malloc_usable_size", "1",

46 
TCL_GLOBAL_ONLY
);

48 
	`T˛_SëV¨2
(
öãΩ
, "sqlite_options", "malloc_usable_size", "0",

49 
TCL_GLOBAL_ONLY
);

52 #ifde‡
SQLITE_32BIT_ROWID


53 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "rowid32", "1", 
TCL_GLOBAL_ONLY
);

55 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "rowid32", "0", 
TCL_GLOBAL_ONLY
);

58 #ifde‡
SQLITE_CASE_SENSITIVE_LIKE


59 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s","ˇ££nsôivñike","1",
TCL_GLOBAL_ONLY
);

61 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s","ˇ££nsôivñike","0",
TCL_GLOBAL_ONLY
);

64 #i‡!
SQLITE_OS_WINCE
 && !
SQLITE_OS_WINRT


65 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "curdú", "1", 
TCL_GLOBAL_ONLY
);

67 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "curdú", "0", 
TCL_GLOBAL_ONLY
);

70 #ifde‡
SQLITE_WIN32_MALLOC


71 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "wö32mÆloc", "1", 
TCL_GLOBAL_ONLY
);

73 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "wö32mÆloc", "0", 
TCL_GLOBAL_ONLY
);

76 #ifde‡
SQLITE_DEBUG


77 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "debug", "1", 
TCL_GLOBAL_ONLY
);

79 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "debug", "0", 
TCL_GLOBAL_ONLY
);

82 #ifde‡
SQLITE_DEFAULT_CKPTFULLFSYNC


83 
	`T˛_SëV¨2
(
öãΩ
, "sqlite_options", "default_ckptfullfsync",

84 
SQLITE_DEFAULT_CKPTFULLFSYNC
 ? "1" : "0", 
TCL_GLOBAL_ONLY
);

86 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "deÁu…_ck±fuŒfsync", "0", 
TCL_GLOBAL_ONLY
);

89 #ifde‡
SQLITE_DIRECT_OVERFLOW_READ


90 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "dúe˘_ªad", "1", 
TCL_GLOBAL_ONLY
);

92 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "dúe˘_ªad", "0", 
TCL_GLOBAL_ONLY
);

95 #ifde‡
SQLITE_DISABLE_DIRSYNC


96 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "dúsync", "0", 
TCL_GLOBAL_ONLY
);

98 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "dúsync", "1", 
TCL_GLOBAL_ONLY
);

101 #ifde‡
SQLITE_DISABLE_LFS


102 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "lfs", "0", 
TCL_GLOBAL_ONLY
);

104 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "lfs", "1", 
TCL_GLOBAL_ONLY
);

107 #ifde‡
SQLITE_DISABLE_PAGECACHE_OVERFLOW_STATS


108 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "∑geˇche_ovîÊow_°©s","0",
TCL_GLOBAL_ONLY
);

110 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "∑geˇche_ovîÊow_°©s","1",
TCL_GLOBAL_ONLY
);

113 #i‡
SQLITE_MAX_MMAP_SIZE
>0

114 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "mm≠", "1", 
TCL_GLOBAL_ONLY
);

116 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "mm≠", "0", 
TCL_GLOBAL_ONLY
);

119 
	`T˛_SëV¨2
(
öãΩ
, "sqlite_options", "worker_threads",

120 
	`STRINGVALUE
(
SQLITE_MAX_WORKER_THREADS
), 
TCL_GLOBAL_ONLY


124 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "memdebug", "1", 
TCL_GLOBAL_ONLY
);

126 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "memdebug", "0", 
TCL_GLOBAL_ONLY
);

129 #ifde‡
SQLITE_ENABLE_8_3_NAMES


130 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "8_3_«mes", "1", 
TCL_GLOBAL_ONLY
);

132 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "8_3_«mes", "0", 
TCL_GLOBAL_ONLY
);

135 #ifde‡
SQLITE_ENABLE_CURSOR_HINTS


136 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "curs‹höts", "1", 
TCL_GLOBAL_ONLY
);

138 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "curs‹höts", "0", 
TCL_GLOBAL_ONLY
);

141 #ifde‡
SQLITE_ENABLE_HIDDEN_COLUMNS


142 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "hiddícﬁumns", "1", 
TCL_GLOBAL_ONLY
);

144 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "hiddícﬁumns", "0", 
TCL_GLOBAL_ONLY
);

147 #ifde‡
SQLITE_ENABLE_MEMSYS3


148 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "mem3", "1", 
TCL_GLOBAL_ONLY
);

150 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "mem3", "0", 
TCL_GLOBAL_ONLY
);

153 #ifde‡
SQLITE_ENABLE_MEMSYS5


154 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "mem5", "1", 
TCL_GLOBAL_ONLY
);

156 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "mem5", "0", 
TCL_GLOBAL_ONLY
);

159 #ifde‡
SQLITE_ENABLE_PREUPDATE_HOOK


160 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "¥eupd©e", "1", 
TCL_GLOBAL_ONLY
);

162 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "¥eupd©e", "0", 
TCL_GLOBAL_ONLY
);

165 #ifde‡
SQLITE_ENABLE_SNAPSHOT


166 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "¢≠shŸ", "1", 
TCL_GLOBAL_ONLY
);

168 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "¢≠shŸ", "0", 
TCL_GLOBAL_ONLY
);

171 #ifde‡
SQLITE_MUTEX_OMIT


172 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "muãx", "0", 
TCL_GLOBAL_ONLY
);

174 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "muãx", "1", 
TCL_GLOBAL_ONLY
);

177 #ifde‡
SQLITE_MUTEX_NOOP


178 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "muãx_no›", "1", 
TCL_GLOBAL_ONLY
);

180 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "muãx_no›", "0", 
TCL_GLOBAL_ONLY
);

183 #ifde‡
SQLITE_OMIT_ALTERTABLE


184 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ÆãπabÀ", "0", 
TCL_GLOBAL_ONLY
);

186 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ÆãπabÀ", "1", 
TCL_GLOBAL_ONLY
);

189 #ifde‡
SQLITE_OMIT_ANALYZE


190 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "™Æyze", "0", 
TCL_GLOBAL_ONLY
);

192 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "™Æyze", "1", 
TCL_GLOBAL_ONLY
);

195 #ifde‡
SQLITE_ENABLE_API_ARMOR


196 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "≠i_¨m‹", "1", 
TCL_GLOBAL_ONLY
);

198 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "≠i_¨m‹", "0", 
TCL_GLOBAL_ONLY
);

201 #ifde‡
SQLITE_ENABLE_ATOMIC_WRITE


202 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "©omicwrôe", "1", 
TCL_GLOBAL_ONLY
);

204 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "©omicwrôe", "0", 
TCL_GLOBAL_ONLY
);

207 #ifde‡
SQLITE_ENABLE_JSON1


208 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "js⁄1", "1", 
TCL_GLOBAL_ONLY
);

210 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "js⁄1", "0", 
TCL_GLOBAL_ONLY
);

213 #ifde‡
SQLITE_LIKE_DOESNT_MATCH_BLOBS


214 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "like_m©ch_blobs", "0", 
TCL_GLOBAL_ONLY
);

216 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "like_m©ch_blobs", "1", 
TCL_GLOBAL_ONLY
);

219 #ifde‡
SQLITE_OMIT_ATTACH


220 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "©èch", "0", 
TCL_GLOBAL_ONLY
);

222 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "©èch", "1", 
TCL_GLOBAL_ONLY
);

225 #ifde‡
SQLITE_OMIT_AUTHORIZATION


226 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "auth", "0", 
TCL_GLOBAL_ONLY
);

228 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "auth", "1", 
TCL_GLOBAL_ONLY
);

231 #ifde‡
SQLITE_OMIT_AUTOINCREMENT


232 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "autoöc", "0", 
TCL_GLOBAL_ONLY
);

234 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "autoöc", "1", 
TCL_GLOBAL_ONLY
);

237 #ifde‡
SQLITE_OMIT_AUTOMATIC_INDEX


238 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "autoödex", "0", 
TCL_GLOBAL_ONLY
);

240 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "autoödex", "1", 
TCL_GLOBAL_ONLY
);

243 #ifde‡
SQLITE_OMIT_AUTORESET


244 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "aut‹e£t", "0", 
TCL_GLOBAL_ONLY
);

246 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "aut‹e£t", "1", 
TCL_GLOBAL_ONLY
);

249 #ifde‡
SQLITE_OMIT_AUTOVACUUM


250 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "autovacuum", "0", 
TCL_GLOBAL_ONLY
);

252 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "autovacuum", "1", 
TCL_GLOBAL_ONLY
);

254 #i‡!
	`deföed
(
SQLITE_DEFAULT_AUTOVACUUM
)

255 
	`T˛_SëV¨2
(
öãΩ
,"sqlôe_›ti⁄s","deÁu…_autovacuum","0",
TCL_GLOBAL_ONLY
);

257 
	`T˛_SëV¨2
(
öãΩ
, "sqlite_options", "default_autovacuum",

258 
	`STRINGVALUE
(
SQLITE_DEFAULT_AUTOVACUUM
), 
TCL_GLOBAL_ONLY
);

261 #ifde‡
SQLITE_OMIT_BETWEEN_OPTIMIZATION


262 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "bëwìn_›t", "0", 
TCL_GLOBAL_ONLY
);

264 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "bëwìn_›t", "1", 
TCL_GLOBAL_ONLY
);

267 #ifde‡
SQLITE_OMIT_BUILTIN_TEST


268 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "buûtö_ã°", "0", 
TCL_GLOBAL_ONLY
);

270 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "buûtö_ã°", "1", 
TCL_GLOBAL_ONLY
);

273 #ifde‡
SQLITE_OMIT_BLOB_LITERAL


274 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "bloblô", "0", 
TCL_GLOBAL_ONLY
);

276 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "bloblô", "1", 
TCL_GLOBAL_ONLY
);

279 #ifde‡
SQLITE_OMIT_CAST


280 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ˇ°", "0", 
TCL_GLOBAL_ONLY
);

282 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ˇ°", "1", 
TCL_GLOBAL_ONLY
);

285 #ifde‡
SQLITE_OMIT_CHECK


286 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "check", "0", 
TCL_GLOBAL_ONLY
);

288 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "check", "1", 
TCL_GLOBAL_ONLY
);

291 #ifde‡
SQLITE_OMIT_CTE


292 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "˘e", "0", 
TCL_GLOBAL_ONLY
);

294 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "˘e", "1", 
TCL_GLOBAL_ONLY
);

297 #ifde‡
SQLITE_ENABLE_COLUMN_METADATA


298 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "cﬁumnmëad©a", "1", 
TCL_GLOBAL_ONLY
);

300 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "cﬁumnmëad©a", "0", 
TCL_GLOBAL_ONLY
);

303 #ifde‡
SQLITE_ENABLE_OVERSIZE_CELL_CHECK


304 
	`T˛_SëV¨2
(
öãΩ
, "sqlite_options", "oversize_cell_check", "1",

305 
TCL_GLOBAL_ONLY
);

307 
	`T˛_SëV¨2
(
öãΩ
, "sqlite_options", "oversize_cell_check", "0",

308 
TCL_GLOBAL_ONLY
);

311 #ifde‡
SQLITE_OMIT_COMPILEOPTION_DIAGS


312 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "compûe›ti⁄_dügs", "0", 
TCL_GLOBAL_ONLY
);

314 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "compûe›ti⁄_dügs", "1", 
TCL_GLOBAL_ONLY
);

317 #ifde‡
SQLITE_OMIT_COMPLETE


318 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "com∂ëe", "0", 
TCL_GLOBAL_ONLY
);

320 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "com∂ëe", "1", 
TCL_GLOBAL_ONLY
);

323 #ifde‡
SQLITE_OMIT_COMPOUND_SELECT


324 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "compound", "0", 
TCL_GLOBAL_ONLY
);

326 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "compound", "1", 
TCL_GLOBAL_ONLY
);

329 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "c⁄Êi˘", "1", 
TCL_GLOBAL_ONLY
);

330 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "¸ashã°", "1", 
TCL_GLOBAL_ONLY
);

332 #ifde‡
SQLITE_OMIT_DATETIME_FUNCS


333 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "d©ëime", "0", 
TCL_GLOBAL_ONLY
);

335 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "d©ëime", "1", 
TCL_GLOBAL_ONLY
);

338 #ifde‡
SQLITE_OMIT_DECLTYPE


339 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "de˛ty≥", "0", 
TCL_GLOBAL_ONLY
);

341 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "de˛ty≥", "1", 
TCL_GLOBAL_ONLY
);

344 #ifde‡
SQLITE_OMIT_DEPRECATED


345 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "dïªˇãd", "0", 
TCL_GLOBAL_ONLY
);

347 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "dïªˇãd", "1", 
TCL_GLOBAL_ONLY
);

350 #ifde‡
SQLITE_OMIT_DISKIO


351 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "diskio", "0", 
TCL_GLOBAL_ONLY
);

353 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "diskio", "1", 
TCL_GLOBAL_ONLY
);

356 #ifde‡
SQLITE_OMIT_EXPLAIN


357 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ex∂aö", "0", 
TCL_GLOBAL_ONLY
);

359 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ex∂aö", "1", 
TCL_GLOBAL_ONLY
);

362 #ifde‡
SQLITE_OMIT_FLOATING_POINT


363 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "Êﬂtögpoöt", "0", 
TCL_GLOBAL_ONLY
);

365 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "Êﬂtögpoöt", "1", 
TCL_GLOBAL_ONLY
);

368 #ifde‡
SQLITE_OMIT_FOREIGN_KEY


369 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "f‹eignkey", "0", 
TCL_GLOBAL_ONLY
);

371 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "f‹eignkey", "1", 
TCL_GLOBAL_ONLY
);

374 #ifde‡
SQLITE_ENABLE_FTS1


375 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "·s1", "1", 
TCL_GLOBAL_ONLY
);

377 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "·s1", "0", 
TCL_GLOBAL_ONLY
);

380 #ifde‡
SQLITE_ENABLE_FTS2


381 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "·s2", "1", 
TCL_GLOBAL_ONLY
);

383 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "·s2", "0", 
TCL_GLOBAL_ONLY
);

386 #ifde‡
SQLITE_ENABLE_FTS3


387 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "·s3", "1", 
TCL_GLOBAL_ONLY
);

389 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "·s3", "0", 
TCL_GLOBAL_ONLY
);

392 #ifde‡
SQLITE_ENABLE_FTS5


393 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "·s5", "1", 
TCL_GLOBAL_ONLY
);

395 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "·s5", "0", 
TCL_GLOBAL_ONLY
);

398 #i‡
	`deföed
(
SQLITE_ENABLE_FTS3
Ë&& !deföed(
SQLITE_DISABLE_FTS3_UNICODE
)

399 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "·s3_unicode", "1", 
TCL_GLOBAL_ONLY
);

401 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "·s3_unicode", "0", 
TCL_GLOBAL_ONLY
);

404 #ifde‡
SQLITE_DISABLE_FTS4_DEFERRED


405 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "·s4_de„ºed", "0", 
TCL_GLOBAL_ONLY
);

407 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "·s4_de„ºed", "1", 
TCL_GLOBAL_ONLY
);

410 #ifde‡
SQLITE_OMIT_GET_TABLE


411 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "gëèbÀ", "0", 
TCL_GLOBAL_ONLY
);

413 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "gëèbÀ", "1", 
TCL_GLOBAL_ONLY
);

416 #ifde‡
SQLITE_ENABLE_ICU


417 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "icu", "1", 
TCL_GLOBAL_ONLY
);

419 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "icu", "0", 
TCL_GLOBAL_ONLY
);

422 #ifde‡
SQLITE_OMIT_INCRBLOB


423 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ö¸blob", "0", 
TCL_GLOBAL_ONLY
);

425 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ö¸blob", "1", 
TCL_GLOBAL_ONLY
);

428 #ifde‡
SQLITE_OMIT_INTEGRITY_CHECK


429 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "öãgrôyck", "0", 
TCL_GLOBAL_ONLY
);

431 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "öãgrôyck", "1", 
TCL_GLOBAL_ONLY
);

434 #i‡
	`deföed
(
SQLITE_DEFAULT_FILE_FORMAT
) && SQLITE_DEFAULT_FILE_FORMAT==1

435 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "Àgacyf‹m©", "1", 
TCL_GLOBAL_ONLY
);

437 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "Àgacyf‹m©", "0", 
TCL_GLOBAL_ONLY
);

440 #ifde‡
SQLITE_OMIT_LIKE_OPTIMIZATION


441 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "like_›t", "0", 
TCL_GLOBAL_ONLY
);

443 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "like_›t", "1", 
TCL_GLOBAL_ONLY
);

446 #ifde‡
SQLITE_OMIT_LOAD_EXTENSION


447 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "lﬂd_ext", "0", 
TCL_GLOBAL_ONLY
);

449 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "lﬂd_ext", "1", 
TCL_GLOBAL_ONLY
);

452 #ifde‡
SQLITE_OMIT_LOCALTIME


453 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "loˇ…ime", "0", 
TCL_GLOBAL_ONLY
);

455 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "loˇ…ime", "1", 
TCL_GLOBAL_ONLY
);

458 #ifde‡
SQLITE_OMIT_LOOKASIDE


459 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "lookaside", "0", 
TCL_GLOBAL_ONLY
);

461 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "lookaside", "1", 
TCL_GLOBAL_ONLY
);

464 
	`T˛_SëV¨2
(
öãΩ
, "sqlite_options", "long_double",

465 (
LONGDOUBLE_TYPE
)>() ? "1" : "0",

466 
TCL_GLOBAL_ONLY
);

468 #ifde‡
SQLITE_OMIT_MEMORYDB


469 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "mem‹ydb", "0", 
TCL_GLOBAL_ONLY
);

471 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "mem‹ydb", "1", 
TCL_GLOBAL_ONLY
);

474 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


475 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "mem‹ym™age", "1", 
TCL_GLOBAL_ONLY
);

477 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "mem‹ym™age", "0", 
TCL_GLOBAL_ONLY
);

480 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "mîges‹t", "1", 
TCL_GLOBAL_ONLY
);

482 #ifde‡
SQLITE_OMIT_OR_OPTIMIZATION


483 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "‹_›t", "0", 
TCL_GLOBAL_ONLY
);

485 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "‹_›t", "1", 
TCL_GLOBAL_ONLY
);

488 #ifde‡
SQLITE_ENABLE_RBU


489 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "rbu", "1", 
TCL_GLOBAL_ONLY
);

491 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "rbu", "0", 
TCL_GLOBAL_ONLY
);

494 #ifde‡
SQLITE_OMIT_PAGER_PRAGMAS


495 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "∑gî_¥agmas", "0", 
TCL_GLOBAL_ONLY
);

497 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "∑gî_¥agmas", "1", 
TCL_GLOBAL_ONLY
);

500 #i‡
	`deföed
(
SQLITE_OMIT_PRAGMA
Ë|| deföed(
SQLITE_OMIT_FLAG_PRAGMAS
)

501 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "¥agma", "0", 
TCL_GLOBAL_ONLY
);

502 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "öãgrôyck", "0", 
TCL_GLOBAL_ONLY
);

504 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "¥agma", "1", 
TCL_GLOBAL_ONLY
);

507 #ifde‡
SQLITE_OMIT_PROGRESS_CALLBACK


508 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "¥ogªss", "0", 
TCL_GLOBAL_ONLY
);

510 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "¥ogªss", "1", 
TCL_GLOBAL_ONLY
);

513 #ifde‡
SQLITE_OMIT_REINDEX


514 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ªödex", "0", 
TCL_GLOBAL_ONLY
);

516 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ªödex", "1", 
TCL_GLOBAL_ONLY
);

519 #ifde‡
SQLITE_ENABLE_RTREE


520 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "πªe", "1", 
TCL_GLOBAL_ONLY
);

522 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "πªe", "0", 
TCL_GLOBAL_ONLY
);

525 #ifde‡
SQLITE_RTREE_INT_ONLY


526 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "πªe_öt_⁄ly", "1", 
TCL_GLOBAL_ONLY
);

528 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "πªe_öt_⁄ly", "0", 
TCL_GLOBAL_ONLY
);

531 #ifde‡
SQLITE_OMIT_SCHEMA_PRAGMAS


532 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "schema_¥agmas", "0", 
TCL_GLOBAL_ONLY
);

534 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "schema_¥agmas", "1", 
TCL_GLOBAL_ONLY
);

537 #ifde‡
SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS


538 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "schema_vîsi⁄", "0", 
TCL_GLOBAL_ONLY
);

540 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "schema_vîsi⁄", "1", 
TCL_GLOBAL_ONLY
);

543 #ifde‡
SQLITE_ENABLE_SESSION


544 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "£ssi⁄", "1", 
TCL_GLOBAL_ONLY
);

546 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "£ssi⁄", "0", 
TCL_GLOBAL_ONLY
);

549 #ifde‡
SQLITE_ENABLE_STAT4


550 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "°©4", "1", 
TCL_GLOBAL_ONLY
);

552 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "°©4", "0", 
TCL_GLOBAL_ONLY
);

554 #i‡
	`deföed
(
SQLITE_ENABLE_STAT3
Ë&& !deföed(
SQLITE_ENABLE_STAT4
)

555 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "°©3", "1", 
TCL_GLOBAL_ONLY
);

557 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "°©3", "0", 
TCL_GLOBAL_ONLY
);

560 #ifde‡
SQLITE_ENABLE_STMT_SCANSTATUS


561 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "sˇn°©us", "1", 
TCL_GLOBAL_ONLY
);

563 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "sˇn°©us", "0", 
TCL_GLOBAL_ONLY
);

566 #i‡!
	`deföed
(
SQLITE_ENABLE_LOCKING_STYLE
)

567 #i‡
	`deföed
(
__APPLE__
)

568 
	#SQLITE_ENABLE_LOCKING_STYLE
 1

	)

570 
	#SQLITE_ENABLE_LOCKING_STYLE
 0

	)

573 #i‡
SQLITE_ENABLE_LOCKING_STYLE
 && 
	`deföed
(
__APPLE__
)

574 
	`T˛_SëV¨2
(
öãΩ
,"sqlôe_›ti⁄s","lock_¥oxy_¥agmas","1",
TCL_GLOBAL_ONLY
);

576 
	`T˛_SëV¨2
(
öãΩ
,"sqlôe_›ti⁄s","lock_¥oxy_¥agmas","0",
TCL_GLOBAL_ONLY
);

578 #i‡
	`deföed
(
SQLITE_PREFER_PROXY_LOCKING
Ë&& deföed(
__APPLE__
)

579 
	`T˛_SëV¨2
(
öãΩ
,"sqlôe_›ti⁄s","¥e„r_¥oxy_lockög","1",
TCL_GLOBAL_ONLY
);

581 
	`T˛_SëV¨2
(
öãΩ
,"sqlôe_›ti⁄s","¥e„r_¥oxy_lockög","0",
TCL_GLOBAL_ONLY
);

585 #ifde‡
SQLITE_OMIT_SHARED_CACHE


586 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "sh¨ed_ˇche", "0", 
TCL_GLOBAL_ONLY
);

588 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "sh¨ed_ˇche", "1", 
TCL_GLOBAL_ONLY
);

591 #ifde‡
SQLITE_OMIT_SUBQUERY


592 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "subquîy", "0", 
TCL_GLOBAL_ONLY
);

594 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "subquîy", "1", 
TCL_GLOBAL_ONLY
);

597 #ifde‡
SQLITE_OMIT_TCL_VARIABLE


598 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "t˛v¨", "0", 
TCL_GLOBAL_ONLY
);

600 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "t˛v¨", "1", 
TCL_GLOBAL_ONLY
);

603 
	`T˛_SëV¨2
(
öãΩ
, "sqlite_options", "threadsafe",

604 
SQLITE_THREADSAFE
 ? "1" : "0", 
TCL_GLOBAL_ONLY
);

605 
	`T˛_SëV¨2
(
öãΩ
, "sqlite_options", "threadsafe1",

606 
SQLITE_THREADSAFE
==1 ? "1" : "0", 
TCL_GLOBAL_ONLY
);

607 
	`T˛_SëV¨2
(
öãΩ
, "sqlite_options", "threadsafe2",

608 
SQLITE_THREADSAFE
==2 ? "1" : "0", 
TCL_GLOBAL_ONLY
);

609 
	`as£π
–
	`sqlôe3_thªadß„
()==
SQLITE_THREADSAFE
 );

611 #ifde‡
SQLITE_OMIT_TEMPDB


612 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ãmpdb", "0", 
TCL_GLOBAL_ONLY
);

614 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ãmpdb", "1", 
TCL_GLOBAL_ONLY
);

617 #ifde‡
SQLITE_OMIT_TRACE


618 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "åa˚", "0", 
TCL_GLOBAL_ONLY
);

620 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "åa˚", "1", 
TCL_GLOBAL_ONLY
);

623 #ifde‡
SQLITE_OMIT_TRIGGER


624 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "åiggî", "0", 
TCL_GLOBAL_ONLY
);

626 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "åiggî", "1", 
TCL_GLOBAL_ONLY
);

629 #ifde‡
SQLITE_OMIT_TRUNCATE_OPTIMIZATION


630 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "åunˇã_›t", "0", 
TCL_GLOBAL_ONLY
);

632 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "åunˇã_›t", "1", 
TCL_GLOBAL_ONLY
);

635 #ifde‡
SQLITE_OMIT_UTF16


636 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "utf16", "0", 
TCL_GLOBAL_ONLY
);

638 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "utf16", "1", 
TCL_GLOBAL_ONLY
);

641 #i‡
	`deföed
(
SQLITE_OMIT_VACUUM
Ë|| deföed(
SQLITE_OMIT_ATTACH
)

642 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "vacuum", "0", 
TCL_GLOBAL_ONLY
);

644 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "vacuum", "1", 
TCL_GLOBAL_ONLY
);

647 #ifde‡
SQLITE_OMIT_VIEW


648 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "võw", "0", 
TCL_GLOBAL_ONLY
);

650 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "võw", "1", 
TCL_GLOBAL_ONLY
);

653 #ifde‡
SQLITE_OMIT_VIRTUALTABLE


654 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "vèb", "0", 
TCL_GLOBAL_ONLY
);

656 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "vèb", "1", 
TCL_GLOBAL_ONLY
);

659 #ifde‡
SQLITE_OMIT_WAL


660 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "wÆ", "0", 
TCL_GLOBAL_ONLY
);

662 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "wÆ", "1", 
TCL_GLOBAL_ONLY
);

665 #ifde‡
SQLITE_OMIT_WSD


666 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "wsd", "0", 
TCL_GLOBAL_ONLY
);

668 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "wsd", "1", 
TCL_GLOBAL_ONLY
);

671 #i‡
	`deföed
(
SQLITE_ENABLE_UPDATE_DELETE_LIMIT
Ë&& !deföed(
SQLITE_OMIT_SUBQUERY
)

672 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "upd©e_dñëe_limô", "1", 
TCL_GLOBAL_ONLY
);

674 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "upd©e_dñëe_limô", "0", 
TCL_GLOBAL_ONLY
);

677 #i‡
	`deföed
(
SQLITE_ENABLE_UNLOCK_NOTIFY
)

678 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "u∆ock_nŸify", "1", 
TCL_GLOBAL_ONLY
);

680 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "u∆ock_nŸify", "0", 
TCL_GLOBAL_ONLY
);

683 #ifde‡
SQLITE_SECURE_DELETE


684 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "£cuª_dñëe", "1", 
TCL_GLOBAL_ONLY
);

686 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "£cuª_dñëe", "0", 
TCL_GLOBAL_ONLY
);

689 #ifde‡
SQLITE_USER_AUTHENTICATION


690 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "u£øuth", "1", 
TCL_GLOBAL_ONLY
);

692 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "u£øuth", "0", 
TCL_GLOBAL_ONLY
);

695 #ifde‡
SQLITE_MULTIPLEX_EXT_OVWR


696 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "mu…ùÀx_ext_ovîwrôe", "1", 
TCL_GLOBAL_ONLY
);

698 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "mu…ùÀx_ext_ovîwrôe", "0", 
TCL_GLOBAL_ONLY
);

701 #ifde‡
YYTRACKMAXSTACKDEPTH


702 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "yyåackmax°ackdïth", "1", 
TCL_GLOBAL_ONLY
);

704 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "yyåackmax°ackdïth", "0", 
TCL_GLOBAL_ONLY
);

707 #ifde‡
SQLITE_ENABLE_SQLLOG


708 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "sqŒog", "1", 
TCL_GLOBAL_ONLY
);

710 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "sqŒog", "0", 
TCL_GLOBAL_ONLY
);

713 
	#LINKVAR
(
x
) { \

714 c⁄° 
cv_
 ## 
x
 = 
SQLITE_
 ## x; \

715 
	`T˛_LökV¨
(
öãΩ
, "SQLITE_" #x, (*)&(
cv_
 ## 
x
), \

716 
TCL_LINK_INT
 | 
TCL_LINK_READ_ONLY
); }

	)

718 
	`LINKVAR
–
MAX_LENGTH
 );

719 
	`LINKVAR
–
MAX_COLUMN
 );

720 
	`LINKVAR
–
MAX_SQL_LENGTH
 );

721 
	`LINKVAR
–
MAX_EXPR_DEPTH
 );

722 
	`LINKVAR
–
MAX_COMPOUND_SELECT
 );

723 
	`LINKVAR
–
MAX_VDBE_OP
 );

724 
	`LINKVAR
–
MAX_FUNCTION_ARG
 );

725 
	`LINKVAR
–
MAX_VARIABLE_NUMBER
 );

726 
	`LINKVAR
–
MAX_PAGE_SIZE
 );

727 
	`LINKVAR
–
MAX_PAGE_COUNT
 );

728 
	`LINKVAR
–
MAX_LIKE_PATTERN_LENGTH
 );

729 
	`LINKVAR
–
MAX_TRIGGER_DEPTH
 );

730 
	`LINKVAR
–
DEFAULT_CACHE_SIZE
 );

731 
	`LINKVAR
–
DEFAULT_PAGE_SIZE
 );

732 
	`LINKVAR
–
DEFAULT_FILE_FORMAT
 );

733 
	`LINKVAR
–
MAX_ATTACHED
 );

734 
	`LINKVAR
–
MAX_DEFAULT_PAGE_SIZE
 );

735 
	`LINKVAR
–
MAX_WORKER_THREADS
 );

738 c⁄° 
cv_TEMP_STORE
 = 
SQLITE_TEMP_STORE
;

739 
	`T˛_LökV¨
(
öãΩ
, "TEMP_STORE", (*)&(
cv_TEMP_STORE
),

740 
TCL_LINK_INT
 | 
TCL_LINK_READ_ONLY
);

743 #ifde‡
_MSC_VER


745 c⁄° 
cv__MSC_VER
 = 1;

746 
	`T˛_LökV¨
(
öãΩ
, "_MSC_VER", (*)&(
cv__MSC_VER
),

747 
TCL_LINK_INT
 | 
TCL_LINK_READ_ONLY
);

750 #ifde‡
__GNUC__


752 c⁄° 
cv___GNUC__
 = 1;

753 
	`T˛_LökV¨
(
öãΩ
, "__GNUC__", (*)&(
cv___GNUC__
),

754 
TCL_LINK_INT
 | 
TCL_LINK_READ_ONLY
);

757 
	}
}

763 
	$Sqlôec⁄fig_Inô
(
T˛_I¡îp
 *
öãΩ
){

764 
	`£t_›ti⁄s
(
öãΩ
);

765  
TCL_OK
;

766 
	}
}

	@test_demovfs.c

116 #i‡!
deföed
(
SQLITE_TEST
Ë|| 
SQLITE_OS_UNIX


118 
	~"sqlôe3.h
"

120 
	~<as£π.h
>

121 
	~<°rög.h
>

122 
	~<sys/ty≥s.h
>

123 
	~<sys/°©.h
>

124 
	~<sys/fûe.h
>

125 
	~<sys/∑øm.h
>

126 
	~<uni°d.h
>

127 
	~<time.h
>

128 
	~<î∫o.h
>

129 
	~<f˙é.h
>

134 #i‚de‡
SQLITE_DEMOVFS_BUFFERSZ


135 
	#SQLITE_DEMOVFS_BUFFERSZ
 8192

	)

141 
	#MAXPATHNAME
 512

	)

147 
DemoFûe
 
	tDemoFûe
;

148 
	sDemoFûe
 {

149 
sqlôe3_fûe
 
	mba£
;

150 
	mfd
;

152 *
	maBuf„r
;

153 
	mnBuf„r
;

154 
sqlôe3_öt64
 
	miBuf„rOf°
;

161 
	$demoDúe˘Wrôe
(

162 
DemoFûe
 *
p
,

163 c⁄° *
zBuf
,

164 
iAmt
,

165 
sqlôe_öt64
 
iOf°


167 
off_t
 
of°
;

168 
size_t
 
nWrôe
;

170 
of°
 = 
	`l£ek
(
p
->
fd
, 
iOf°
, 
SEEK_SET
);

171 if–
of°
!=
iOf°
 ){

172  
SQLITE_IOERR_WRITE
;

175 
nWrôe
 = 
	`wrôe
(
p
->
fd
, 
zBuf
, 
iAmt
);

176 if–
nWrôe
!=
iAmt
 ){

177  
SQLITE_IOERR_WRITE
;

180  
SQLITE_OK
;

181 
	}
}

188 
	$demoFlushBuf„r
(
DemoFûe
 *
p
){

189 
rc
 = 
SQLITE_OK
;

190 if–
p
->
nBuf„r
 ){

191 
rc
 = 
	`demoDúe˘Wrôe
(
p
,Ö->
aBuf„r
,Ö->
nBuf„r
,Ö->
iBuf„rOf°
);

192 
p
->
nBuf„r
 = 0;

194  
rc
;

195 
	}
}

200 
	$demoClo£
(
sqlôe3_fûe
 *
pFûe
){

201 
rc
;

202 
DemoFûe
 *
p
 = (DemoFûe*)
pFûe
;

203 
rc
 = 
	`demoFlushBuf„r
(
p
);

204 
	`sqlôe3_‰ì
(
p
->
aBuf„r
);

205 
	`˛o£
(
p
->
fd
);

206  
rc
;

207 
	}
}

212 
	$demoRód
(

213 
sqlôe3_fûe
 *
pFûe
,

214 *
zBuf
,

215 
iAmt
,

216 
sqlôe_öt64
 
iOf°


218 
DemoFûe
 *
p
 = (DemoFûe*)
pFûe
;

219 
off_t
 
of°
;

220 
nRód
;

221 
rc
;

229 
rc
 = 
	`demoFlushBuf„r
(
p
);

230 if–
rc
!=
SQLITE_OK
 ){

231  
rc
;

234 
of°
 = 
	`l£ek
(
p
->
fd
, 
iOf°
, 
SEEK_SET
);

235 if–
of°
!=
iOf°
 ){

236  
SQLITE_IOERR_READ
;

238 
nRód
 = 
	`ªad
(
p
->
fd
, 
zBuf
, 
iAmt
);

240 if–
nRód
==
iAmt
 ){

241  
SQLITE_OK
;

242 }if–
nRód
>=0 ){

243  
SQLITE_IOERR_SHORT_READ
;

246  
SQLITE_IOERR_READ
;

247 
	}
}

252 
	$demoWrôe
(

253 
sqlôe3_fûe
 *
pFûe
,

254 c⁄° *
zBuf
,

255 
iAmt
,

256 
sqlôe_öt64
 
iOf°


258 
DemoFûe
 *
p
 = (DemoFûe*)
pFûe
;

260 if–
p
->
aBuf„r
 ){

261 *
z
 = (*)
zBuf
;

262 
n
 = 
iAmt
;

263 
sqlôe3_öt64
 
i
 = 
iOf°
;

265  
n
>0 ){

266 
nC›y
;

272 if–
p
->
nBuf„r
==
SQLITE_DEMOVFS_BUFFERSZ
 ||Ö->
iBuf„rOf°
+p->nBuf„r!=
i
 ){

273 
rc
 = 
	`demoFlushBuf„r
(
p
);

274 if–
rc
!=
SQLITE_OK
 ){

275  
rc
;

278 
	`as£π
–
p
->
nBuf„r
==0 ||Ö->
iBuf„rOf°
+p->nBuf„r==
i
 );

279 
p
->
iBuf„rOf°
 = 
i
 -Ö->
nBuf„r
;

282 
nC›y
 = 
SQLITE_DEMOVFS_BUFFERSZ
 - 
p
->
nBuf„r
;

283 if–
nC›y
>
n
 ){

284 
nC›y
 = 
n
;

286 
	`mem˝y
(&
p
->
aBuf„r
[p->
nBuf„r
], 
z
, 
nC›y
);

287 
p
->
nBuf„r
 +
nC›y
;

289 
n
 -
nC›y
;

290 
i
 +
nC›y
;

291 
z
 +
nC›y
;

294  
	`demoDúe˘Wrôe
(
p
, 
zBuf
, 
iAmt
, 
iOf°
);

297  
SQLITE_OK
;

298 
	}
}

304 
	$demoTrunˇã
(
sqlôe3_fûe
 *
pFûe
, 
sqlôe_öt64
 
size
){

306 if–
	`·runˇã
(((
DemoFûe
 *)
pFûe
)->
fd
, 
size
ËË 
SQLITE_IOERR_TRUNCATE
;

308  
SQLITE_OK
;

309 
	}
}

314 
	$demoSync
(
sqlôe3_fûe
 *
pFûe
, 
Êags
){

315 
DemoFûe
 *
p
 = (DemoFûe*)
pFûe
;

316 
rc
;

318 
rc
 = 
	`demoFlushBuf„r
(
p
);

319 if–
rc
!=
SQLITE_OK
 ){

320  
rc
;

323 
rc
 = 
	`fsync
(
p
->
fd
);

324  (
rc
==0 ? 
SQLITE_OK
 : 
SQLITE_IOERR_FSYNC
);

325 
	}
}

330 
	$demoFûeSize
(
sqlôe3_fûe
 *
pFûe
, 
sqlôe_öt64
 *
pSize
){

331 
DemoFûe
 *
p
 = (DemoFûe*)
pFûe
;

332 
rc
;

333 
°©
 
sSèt
;

340 
rc
 = 
	`demoFlushBuf„r
(
p
);

341 if–
rc
!=
SQLITE_OK
 ){

342  
rc
;

345 
rc
 = 
	`f°©
(
p
->
fd
, &
sSèt
);

346 if–
rc
!=0 )  
SQLITE_IOERR_FSTAT
;

347 *
pSize
 = 
sSèt
.
°_size
;

348  
SQLITE_OK
;

349 
	}
}

357 
	$demoLock
(
sqlôe3_fûe
 *
pFûe
, 
eLock
){

358  
SQLITE_OK
;

359 
	}
}

360 
	$demoU∆ock
(
sqlôe3_fûe
 *
pFûe
, 
eLock
){

361  
SQLITE_OK
;

362 
	}
}

363 
	$demoCheckRe£rvedLock
(
sqlôe3_fûe
 *
pFûe
, *
pResOut
){

364 *
pResOut
 = 0;

365  
SQLITE_OK
;

366 
	}
}

371 
	$demoFûeC⁄åﬁ
(
sqlôe3_fûe
 *
pFûe
, 
›
, *
pArg
){

372  
SQLITE_OK
;

373 
	}
}

380 
	$demoSe˘‹Size
(
sqlôe3_fûe
 *
pFûe
){

382 
	}
}

383 
	$demoDevi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
 *
pFûe
){

385 
	}
}

390 
	$demoO≥n
(

391 
sqlôe3_vfs
 *
pVfs
,

392 c⁄° *
zName
,

393 
sqlôe3_fûe
 *
pFûe
,

394 
Êags
,

395 *
pOutFœgs


397 c⁄° 
sqlôe3_io_mëhods
 
demoio
 = {

399 
demoClo£
,

400 
demoRód
,

401 
demoWrôe
,

402 
demoTrunˇã
,

403 
demoSync
,

404 
demoFûeSize
,

405 
demoLock
,

406 
demoU∆ock
,

407 
demoCheckRe£rvedLock
,

408 
demoFûeC⁄åﬁ
,

409 
demoSe˘‹Size
,

410 
demoDevi˚Ch¨a˘îi°ics


413 
DemoFûe
 *
p
 = (DemoFûe*)
pFûe
;

414 
oÊags
 = 0;

415 *
aBuf
 = 0;

417 if–
zName
==0 ){

418  
SQLITE_IOERR
;

421 if–
Êags
&
SQLITE_OPEN_MAIN_JOURNAL
 ){

422 
aBuf
 = (*)
	`sqlôe3_mÆloc
(
SQLITE_DEMOVFS_BUFFERSZ
);

423 if–!
aBuf
 ){

424  
SQLITE_NOMEM
;

428 if–
Êags
&
SQLITE_OPEN_EXCLUSIVE
 ) 
oÊags
 |
O_EXCL
;

429 if–
Êags
&
SQLITE_OPEN_CREATE
 ) 
oÊags
 |
O_CREAT
;

430 if–
Êags
&
SQLITE_OPEN_READONLY
 ) 
oÊags
 |
O_RDONLY
;

431 if–
Êags
&
SQLITE_OPEN_READWRITE
 ) 
oÊags
 |
O_RDWR
;

433 
	`mem£t
(
p
, 0, (
DemoFûe
));

434 
p
->
fd
 = 
	`›í
(
zName
, 
oÊags
, 0600);

435 if–
p
->
fd
<0 ){

436 
	`sqlôe3_‰ì
(
aBuf
);

437  
SQLITE_CANTOPEN
;

439 
p
->
aBuf„r
 = 
aBuf
;

441 if–
pOutFœgs
 ){

442 *
pOutFœgs
 = 
Êags
;

444 
p
->
ba£
.
pMëhods
 = &
demoio
;

445  
SQLITE_OK
;

446 
	}
}

453 
	$demoDñëe
(
sqlôe3_vfs
 *
pVfs
, c⁄° *
zP©h
, 
dúSync
){

454 
rc
;

456 
rc
 = 
	`u∆ök
(
zP©h
);

457 if–
rc
!=0 && 
î∫o
==
ENOENT
 )  
SQLITE_OK
;

459 if–
rc
==0 && 
dúSync
 ){

460 
dfd
;

461 
i
;

462 
zDú
[
MAXPATHNAME
+1];

465 
	`sqlôe3_¢¥ötf
(
MAXPATHNAME
, 
zDú
, "%s", 
zP©h
);

466 
zDú
[
MAXPATHNAME
] = '\0';

467 
i
=
	`°æí
(
zDú
); i>1 && zDir[i]!='/'; i++);

468 
zDú
[
i
] = '\0';

471 
dfd
 = 
	`›í
(
zDú
, 
O_RDONLY
, 0);

472 if–
dfd
<0 ){

473 
rc
 = -1;

475 
rc
 = 
	`fsync
(
dfd
);

476 
	`˛o£
(
dfd
);

479  (
rc
==0 ? 
SQLITE_OK
 : 
SQLITE_IOERR_DELETE
);

480 
	}
}

482 #i‚de‡
F_OK


483 
	#F_OK
 0

	)

485 #i‚de‡
R_OK


486 
	#R_OK
 4

	)

488 #i‚de‡
W_OK


489 
	#W_OK
 2

	)

496 
	$demoAc˚ss
(

497 
sqlôe3_vfs
 *
pVfs
,

498 c⁄° *
zP©h
,

499 
Êags
,

500 *
pResOut


502 
rc
;

503 
eAc˚ss
 = 
F_OK
;

505 
	`as£π
–
Êags
==
SQLITE_ACCESS_EXISTS


506 || 
Êags
==
SQLITE_ACCESS_READ


507 || 
Êags
==
SQLITE_ACCESS_READWRITE


510 if–
Êags
==
SQLITE_ACCESS_READWRITE
 ) 
eAc˚ss
 = 
R_OK
|
W_OK
;

511 if–
Êags
==
SQLITE_ACCESS_READ
 ) 
eAc˚ss
 = 
R_OK
;

513 
rc
 = 
	`ac˚ss
(
zP©h
, 
eAc˚ss
);

514 *
pResOut
 = (
rc
==0);

515  
SQLITE_OK
;

516 
	}
}

529 
	$demoFuŒP©h«me
(

530 
sqlôe3_vfs
 *
pVfs
,

531 c⁄° *
zP©h
,

532 
nP©hOut
,

533 *
zP©hOut


535 
zDú
[
MAXPATHNAME
+1];

536 if–
zP©h
[0]=='/' ){

537 
zDú
[0] = '\0';

539 if–
	`gëcwd
(
zDú
, (zDú))==0 )  
SQLITE_IOERR
;

541 
zDú
[
MAXPATHNAME
] = '\0';

543 
	`sqlôe3_¢¥ötf
(
nP©hOut
, 
zP©hOut
, "%s/%s", 
zDú
, 
zP©h
);

544 
zP©hOut
[
nP©hOut
-1] = '\0';

546  
SQLITE_OK
;

547 
	}
}

561 *
	$demoDlO≥n
(
sqlôe3_vfs
 *
pVfs
, c⁄° *
zP©h
){

563 
	}
}

564 
	$demoDlEº‹
(
sqlôe3_vfs
 *
pVfs
, 
nByã
, *
zEºMsg
){

565 
	`sqlôe3_¢¥ötf
(
nByã
, 
zEºMsg
, "LoadableÉxtensionsáreÇot supported");

566 
zEºMsg
[
nByã
-1] = '\0';

567 
	}
}

568 (*
	$demoDlSym
(
sqlôe3_vfs
 *
pVfs
, *
pH
, c⁄° *
z
))(){

570 
	}
}

571 
	$demoDlClo£
(
sqlôe3_vfs
 *
pVfs
, *
pH™dÀ
){

573 
	}
}

579 
	$demoR™dom√ss
(
sqlôe3_vfs
 *
pVfs
, 
nByã
, *
zByã
){

580  
SQLITE_OK
;

581 
	}
}

587 
	$demoSÀï
(
sqlôe3_vfs
 *
pVfs
, 
nMi¸o
){

588 
	`¶ìp
(
nMi¸o
 / 1000000);

589 
	`u¶ìp
(
nMi¸o
 % 1000000);

590  
nMi¸o
;

591 
	}
}

604 
	$demoCuºítTime
(
sqlôe3_vfs
 *
pVfs
, *
pTime
){

605 
time_t
 
t
 = 
	`time
(0);

606 *
pTime
 = 
t
/86400.0 + 2440587.5;

607  
SQLITE_OK
;

608 
	}
}

616 
sqlôe3_vfs
 *
	$sqlôe3_demovfs
(){

617 
sqlôe3_vfs
 
demovfs
 = {

619 (
DemoFûe
),

620 
MAXPATHNAME
,

624 
demoO≥n
,

625 
demoDñëe
,

626 
demoAc˚ss
,

627 
demoFuŒP©h«me
,

628 
demoDlO≥n
,

629 
demoDlEº‹
,

630 
demoDlSym
,

631 
demoDlClo£
,

632 
demoR™dom√ss
,

633 
demoSÀï
,

634 
demoCuºítTime
,

636  &
demovfs
;

637 
	}
}

642 #ifde‡
SQLITE_TEST


644 
	~<t˛.h
>

646 #i‡
SQLITE_OS_UNIX


647 
	$ªgi°î_demovfs
(

648 
Clõ¡D©a
 
˛õ¡D©a
,

649 
T˛_I¡îp
 *
öãΩ
,

650 
objc
,

651 
T˛_Obj
 *
CONST
 
objv
[]

653 
	`sqlôe3_vfs_ªgi°î
(
	`sqlôe3_demovfs
(), 1);

654  
TCL_OK
;

655 
	}
}

656 
	$uƒegi°î_demovfs
(

657 
Clõ¡D©a
 
˛õ¡D©a
,

658 
T˛_I¡îp
 *
öãΩ
,

659 
objc
,

660 
T˛_Obj
 *
CONST
 
objv
[]

662 
	`sqlôe3_vfs_uƒegi°î
(
	`sqlôe3_demovfs
());

663  
TCL_OK
;

664 
	}
}

669 
	$Sqlôëe°_demovfs_Inô
(
T˛_I¡îp
 *
öãΩ
){

670 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "ªgi°î_demovfs", 
ªgi°î_demovfs
, 0, 0);

671 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "uƒegi°î_demovfs", 
uƒegi°î_demovfs
, 0, 0);

672  
TCL_OK
;

673 
	}
}

676 
	$Sqlôëe°_demovfs_Inô
(
T˛_I¡îp
 *
öãΩ
){  
TCL_OK
; 
	}
}

	@test_devsym.c

17 #i‡
SQLITE_TEST


19 
	~"sqlôe3.h
"

20 
	~"sqlôeI¡.h
"

25 
	#DEVSYM_MAX_PATHNAME
 512

	)

30 
	#DEVSYM_VFS_NAME
 "devsym"

	)

32 
devsym_fûe
 
	tdevsym_fûe
;

33 
	sdevsym_fûe
 {

34 
sqlôe3_fûe
 
	mba£
;

35 
sqlôe3_fûe
 *
	mpRól
;

41 
devsymClo£
(
sqlôe3_fûe
*);

42 
devsymRód
(
sqlôe3_fûe
*, *, 
iAmt
, 
sqlôe3_öt64
 
iOf°
);

43 
devsymWrôe
(
sqlôe3_fûe
*,c⁄° *,
iAmt
, 
sqlôe3_öt64
 
iOf°
);

44 
devsymTrunˇã
(
sqlôe3_fûe
*, 
sqlôe3_öt64
 
size
);

45 
devsymSync
(
sqlôe3_fûe
*, 
Êags
);

46 
devsymFûeSize
(
sqlôe3_fûe
*, 
sqlôe3_öt64
 *
pSize
);

47 
devsymLock
(
sqlôe3_fûe
*, );

48 
devsymU∆ock
(
sqlôe3_fûe
*, );

49 
devsymCheckRe£rvedLock
(
sqlôe3_fûe
*, *);

50 
devsymFûeC⁄åﬁ
(
sqlôe3_fûe
*, 
›
, *
pArg
);

51 
devsymSe˘‹Size
(
sqlôe3_fûe
*);

52 
devsymDevi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
*);

53 
devsymShmLock
(
sqlôe3_fûe
*,,,);

54 
devsymShmM≠
(
sqlôe3_fûe
*,,,, volatile **);

55 
devsymShmB¨rõr
(
sqlôe3_fûe
*);

56 
devsymShmUnm≠
(
sqlôe3_fûe
*,);

61 
devsymO≥n
(
sqlôe3_vfs
*, c⁄° *, 
sqlôe3_fûe
*, , *);

62 
devsymDñëe
(
sqlôe3_vfs
*, c⁄° *
zName
, 
syncDú
);

63 
devsymAc˚ss
(
sqlôe3_vfs
*, c⁄° *
zName
, 
Êags
, *);

64 
devsymFuŒP©h«me
(
sqlôe3_vfs
*, c⁄° *
zName
, , *
zOut
);

65 #i‚de‡
SQLITE_OMIT_LOAD_EXTENSION


66 *
devsymDlO≥n
(
sqlôe3_vfs
*, c⁄° *
zFûíame
);

67 
devsymDlEº‹
(
sqlôe3_vfs
*, 
nByã
, *
zEºMsg
);

68 (*
	$devsymDlSym
(
sqlôe3_vfs
*,*, c⁄° *
zSymbﬁ
))();

69 
	`devsymDlClo£
(
sqlôe3_vfs
*, *);

71 
	`devsymR™dom√ss
(
sqlôe3_vfs
*, 
nByã
, *
zOut
);

72 
	`devsymSÀï
(
sqlôe3_vfs
*, 
mi¸o£c⁄ds
);

73 
	`devsymCuºítTime
(
sqlôe3_vfs
*, *);

75 
sqlôe3_vfs
 
devsym_vfs
 = {

77 (
devsym_fûe
),

78 
DEVSYM_MAX_PATHNAME
,

80 
DEVSYM_VFS_NAME
,

82 
devsymO≥n
,

83 
devsymDñëe
,

84 
devsymAc˚ss
,

85 
devsymFuŒP©h«me
,

86 #i‚de‡
SQLITE_OMIT_LOAD_EXTENSION


87 
devsymDlO≥n
,

88 
devsymDlEº‹
,

89 
devsymDlSym
,

90 
devsymDlClo£
,

97 
devsymR™dom√ss
,

98 
devsymSÀï
,

99 
devsymCuºítTime
,

102 
	}
};

104 
sqlôe3_io_mëhods
 
	gdevsym_io_mëhods
 = {

106 
devsymClo£
,

107 
devsymRód
,

108 
devsymWrôe
,

109 
devsymTrunˇã
,

110 
devsymSync
,

111 
devsymFûeSize
,

112 
devsymLock
,

113 
devsymU∆ock
,

114 
devsymCheckRe£rvedLock
,

115 
devsymFûeC⁄åﬁ
,

116 
devsymSe˘‹Size
,

117 
devsymDevi˚Ch¨a˘îi°ics
,

118 
devsymShmM≠
,

119 
devsymShmLock
,

120 
devsymShmB¨rõr
,

121 
devsymShmUnm≠


124 
	sDevsymGlobÆ
 {

125 
sqlôe3_vfs
 *
	mpVfs
;

126 
	miDevi˚Ch¨
;

127 
	miSe˘‹Size
;

129 
DevsymGlobÆ
 
	gg
 = {0, 0, 512};

134 
	$devsymClo£
(
sqlôe3_fûe
 *
pFûe
){

135 
devsym_fûe
 *
p
 = (devsym_fûê*)
pFûe
;

136 
	`sqlôe3OsClo£
(
p
->
pRól
);

137  
SQLITE_OK
;

138 
	}
}

143 
	$devsymRód
(

144 
sqlôe3_fûe
 *
pFûe
,

145 *
zBuf
,

146 
iAmt
,

147 
sqlôe_öt64
 
iOf°


149 
devsym_fûe
 *
p
 = (devsym_fûê*)
pFûe
;

150  
	`sqlôe3OsRód
(
p
->
pRól
, 
zBuf
, 
iAmt
, 
iOf°
);

151 
	}
}

156 
	$devsymWrôe
(

157 
sqlôe3_fûe
 *
pFûe
,

158 c⁄° *
zBuf
,

159 
iAmt
,

160 
sqlôe_öt64
 
iOf°


162 
devsym_fûe
 *
p
 = (devsym_fûê*)
pFûe
;

163  
	`sqlôe3OsWrôe
(
p
->
pRól
, 
zBuf
, 
iAmt
, 
iOf°
);

164 
	}
}

169 
	$devsymTrunˇã
(
sqlôe3_fûe
 *
pFûe
, 
sqlôe_öt64
 
size
){

170 
devsym_fûe
 *
p
 = (devsym_fûê*)
pFûe
;

171  
	`sqlôe3OsTrunˇã
(
p
->
pRól
, 
size
);

172 
	}
}

177 
	$devsymSync
(
sqlôe3_fûe
 *
pFûe
, 
Êags
){

178 
devsym_fûe
 *
p
 = (devsym_fûê*)
pFûe
;

179  
	`sqlôe3OsSync
(
p
->
pRól
, 
Êags
);

180 
	}
}

185 
	$devsymFûeSize
(
sqlôe3_fûe
 *
pFûe
, 
sqlôe_öt64
 *
pSize
){

186 
devsym_fûe
 *
p
 = (devsym_fûê*)
pFûe
;

187  
	`sqlôe3OsFûeSize
(
p
->
pRól
, 
pSize
);

188 
	}
}

193 
	$devsymLock
(
sqlôe3_fûe
 *
pFûe
, 
eLock
){

194 
devsym_fûe
 *
p
 = (devsym_fûê*)
pFûe
;

195  
	`sqlôe3OsLock
(
p
->
pRól
, 
eLock
);

196 
	}
}

201 
	$devsymU∆ock
(
sqlôe3_fûe
 *
pFûe
, 
eLock
){

202 
devsym_fûe
 *
p
 = (devsym_fûê*)
pFûe
;

203  
	`sqlôe3OsU∆ock
(
p
->
pRól
, 
eLock
);

204 
	}
}

209 
	$devsymCheckRe£rvedLock
(
sqlôe3_fûe
 *
pFûe
, *
pResOut
){

210 
devsym_fûe
 *
p
 = (devsym_fûê*)
pFûe
;

211  
	`sqlôe3OsCheckRe£rvedLock
(
p
->
pRól
, 
pResOut
);

212 
	}
}

217 
	$devsymFûeC⁄åﬁ
(
sqlôe3_fûe
 *
pFûe
, 
›
, *
pArg
){

218 
devsym_fûe
 *
p
 = (devsym_fûê*)
pFûe
;

219  
	`sqlôe3OsFûeC⁄åﬁ
(
p
->
pRól
, 
›
, 
pArg
);

220 
	}
}

225 
	$devsymSe˘‹Size
(
sqlôe3_fûe
 *
pFûe
){

226  
g
.
iSe˘‹Size
;

227 
	}
}

232 
	$devsymDevi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
 *
pFûe
){

233  
g
.
iDevi˚Ch¨
;

234 
	}
}

239 
	$devsymShmLock
(
sqlôe3_fûe
 *
pFûe
, 
of°
, 
n
, 
Êags
){

240 
devsym_fûe
 *
p
 = (devsym_fûê*)
pFûe
;

241  
	`sqlôe3OsShmLock
(
p
->
pRól
, 
of°
, 
n
, 
Êags
);

242 
	}
}

243 
	$devsymShmM≠
(

244 
sqlôe3_fûe
 *
pFûe
,

245 
iRegi⁄
,

246 
szRegi⁄
,

247 
isWrôe
,

248 vﬁ©ûê**
µ


250 
devsym_fûe
 *
p
 = (devsym_fûê*)
pFûe
;

251  
	`sqlôe3OsShmM≠
(
p
->
pRól
, 
iRegi⁄
, 
szRegi⁄
, 
isWrôe
, 
µ
);

252 
	}
}

253 
	$devsymShmB¨rõr
(
sqlôe3_fûe
 *
pFûe
){

254 
devsym_fûe
 *
p
 = (devsym_fûê*)
pFûe
;

255 
	`sqlôe3OsShmB¨rõr
(
p
->
pRól
);

256 
	}
}

257 
	$devsymShmUnm≠
(
sqlôe3_fûe
 *
pFûe
, 
dñFœg
){

258 
devsym_fûe
 *
p
 = (devsym_fûê*)
pFûe
;

259  
	`sqlôe3OsShmUnm≠
(
p
->
pRól
, 
dñFœg
);

260 
	}
}

267 
	$devsymO≥n
(

268 
sqlôe3_vfs
 *
pVfs
,

269 c⁄° *
zName
,

270 
sqlôe3_fûe
 *
pFûe
,

271 
Êags
,

272 *
pOutFœgs


274 
rc
;

275 
devsym_fûe
 *
p
 = (devsym_fûê*)
pFûe
;

276 
p
->
pRól
 = (
sqlôe3_fûe
 *)&p[1];

277 
rc
 = 
	`sqlôe3OsO≥n
(
g
.
pVfs
, 
zName
, 
p
->
pRól
, 
Êags
, 
pOutFœgs
);

278 if–
p
->
pRól
->
pMëhods
 ){

279 
pFûe
->
pMëhods
 = &
devsym_io_mëhods
;

281  
rc
;

282 
	}
}

289 
	$devsymDñëe
(
sqlôe3_vfs
 *
pVfs
, c⁄° *
zP©h
, 
dúSync
){

290  
	`sqlôe3OsDñëe
(
g
.
pVfs
, 
zP©h
, 
dúSync
);

291 
	}
}

297 
	$devsymAc˚ss
(

298 
sqlôe3_vfs
 *
pVfs
,

299 c⁄° *
zP©h
,

300 
Êags
,

301 *
pResOut


303  
	`sqlôe3OsAc˚ss
(
g
.
pVfs
, 
zP©h
, 
Êags
, 
pResOut
);

304 
	}
}

311 
	$devsymFuŒP©h«me
(

312 
sqlôe3_vfs
 *
pVfs
,

313 c⁄° *
zP©h
,

314 
nOut
,

315 *
zOut


317  
	`sqlôe3OsFuŒP©h«me
(
g
.
pVfs
, 
zP©h
, 
nOut
, 
zOut
);

318 
	}
}

320 #i‚de‡
SQLITE_OMIT_LOAD_EXTENSION


324 *
	$devsymDlO≥n
(
sqlôe3_vfs
 *
pVfs
, c⁄° *
zP©h
){

325  
	`sqlôe3OsDlO≥n
(
g
.
pVfs
, 
zP©h
);

326 
	}
}

333 
	$devsymDlEº‹
(
sqlôe3_vfs
 *
pVfs
, 
nByã
, *
zEºMsg
){

334 
	`sqlôe3OsDlEº‹
(
g
.
pVfs
, 
nByã
, 
zEºMsg
);

335 
	}
}

340 (*
	$devsymDlSym
(
sqlôe3_vfs
 *
pVfs
, *
p
, c⁄° *
zSym
))(){

341  
	`sqlôe3OsDlSym
(
g
.
pVfs
, 
p
, 
zSym
);

342 
	}
}

347 
	$devsymDlClo£
(
sqlôe3_vfs
 *
pVfs
, *
pH™dÀ
){

348 
	`sqlôe3OsDlClo£
(
g
.
pVfs
, 
pH™dÀ
);

349 
	}
}

356 
	$devsymR™dom√ss
(
sqlôe3_vfs
 *
pVfs
, 
nByã
, *
zBufOut
){

357  
	`sqlôe3OsR™dom√ss
(
g
.
pVfs
, 
nByã
, 
zBufOut
);

358 
	}
}

364 
	$devsymSÀï
(
sqlôe3_vfs
 *
pVfs
, 
nMi¸o
){

365  
	`sqlôe3OsSÀï
(
g
.
pVfs
, 
nMi¸o
);

366 
	}
}

371 
	$devsymCuºítTime
(
sqlôe3_vfs
 *
pVfs
, *
pTimeOut
){

372  
g
.
pVfs
->
	`xCuºítTime
(g.pVfs, 
pTimeOut
);

373 
	}
}

381 
	$devsym_ªgi°î
(
iDevi˚Ch¨
, 
iSe˘‹Size
){

382 if–
g
.
pVfs
==0 ){

383 
g
.
pVfs
 = 
	`sqlôe3_vfs_föd
(0);

384 
devsym_vfs
.
szOsFûe
 +
g
.
pVfs
->szOsFile;

385 
	`sqlôe3_vfs_ªgi°î
(&
devsym_vfs
, 0);

387 if–
iDevi˚Ch¨
>=0 ){

388 
g
.
iDevi˚Ch¨
 = iDeviceChar;

390 
g
.
iDevi˚Ch¨
 = 0;

392 if–
iSe˘‹Size
>=0 ){

393 
g
.
iSe˘‹Size
 = iSectorSize;

395 
g
.
iSe˘‹Size
 = 512;

397 
	}
}

399 
	$devsym_uƒegi°î
(){

400 
	`sqlôe3_vfs_uƒegi°î
(&
devsym_vfs
);

401 
g
.
pVfs
 = 0;

402 
g
.
iDevi˚Ch¨
 = 0;

403 
g
.
iSe˘‹Size
 = 0;

404 
	}
}

	@test_fs.c

64 
	~"sqlôeI¡.h
"

65 
	~"t˛.h
"

67 
	~<°dlib.h
>

68 
	~<°rög.h
>

69 
	~<sys/ty≥s.h
>

70 
	~<sys/°©.h
>

71 
	~<f˙é.h
>

73 #i‡
SQLITE_OS_UNIX
 || 
deföed
(
__MINGW_H
)

74 
	~<uni°d.h
>

75 
	~<dúít.h
>

76 #i‚de‡
DIRENT


77 
	#DIRENT
 
dúít


	)

80 #i‡
SQLITE_OS_WIN


81 
	~<io.h
>

82 #i‡!
deföed
(
__MINGW_H
)

83 
	~"ã°_wödúít.h
"

85 #i‚de‡
S_ISREG


86 
	#S_ISREG
(
mode
Ë(((modeË& 
S_IFMT
Ë=
S_IFREG
)

	)

90 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


92 
fs_vèb
 
	tfs_vèb
;

93 
fs_curs‹
 
	tfs_curs‹
;

98 
	sfs_vèb
 {

99 
sqlôe3_vèb
 
	mba£
;

100 
sqlôe3
 *
	mdb
;

101 *
	mzDb
;

102 *
	mzTbl
;

106 
	sfs_curs‹
 {

107 
sqlôe3_vèb_curs‹
 
	mba£
;

108 
sqlôe3_°mt
 *
	mpStmt
;

109 *
	mzBuf
;

110 
	mnBuf
;

111 
	mnAŒoc
;

117 
FsdúVèb
 
	tFsdúVèb
;

118 
FsdúC§
 
	tFsdúC§
;

119 
	sFsdúVèb
 {

120 
sqlôe3_vèb
 
	mba£
;

123 
	sFsdúC§
 {

124 
sqlôe3_vèb_curs‹
 
	mba£
;

125 *
	mzDú
;

126 
DIR
 *
	mpDú
;

127 
sqlôe3_öt64
 
	miRowid
;

128 
DIRENT
 
	míåy
;

142 
	$fsdúC⁄√˘
(

143 
sqlôe3
 *
db
,

144 *
pAux
,

145 
¨gc
, c⁄° *c⁄°*
¨gv
,

146 
sqlôe3_vèb
 **
µVèb
,

147 **
pzEº


149 
FsdúVèb
 *
pTab
;

151 if–
¨gc
!=3 ){

152 *
pzEº
 = 
	`sqlôe3_m¥ötf
("wrongÇumber ofárguments");

153  
SQLITE_ERROR
;

156 
pTab
 = (
FsdúVèb
 *)
	`sqlôe3_mÆloc
((FsdirVtab));

157 if–!
pTab
 )  
SQLITE_NOMEM
;

158 
	`mem£t
(
pTab
, 0, (
FsdúVèb
));

160 *
µVèb
 = &
pTab
->
ba£
;

161 
	`sqlôe3_de˛¨e_vèb
(
db
, "CREATE TABLE xyz(dir,Çame);");

163  
SQLITE_OK
;

164 
	}
}

169 
	$fsdúDisc⁄√˘
(
sqlôe3_vèb
 *
pVèb
){

170 
	`sqlôe3_‰ì
(
pVèb
);

171  
SQLITE_OK
;

172 
	}
}

179 
	$fsdúBe°Index
(
sqlôe3_vèb
 *
èb
, 
sqlôe3_ödex_öfo
 *
pIdxInfo
){

180 
ii
;

182 
pIdxInfo
->
e°im©edCo°
 = 1000000000.0;

184 
ii
=0; ii<
pIdxInfo
->
nC⁄°øöt
; ii++){

185 
sqlôe3_ödex_c⁄°øöt
 c⁄° *
p
 = &
pIdxInfo
->
aC⁄°øöt
[
ii
];

186 if–
p
->
iCﬁumn
==0 &&Ö->
ußbÀ
 &&Ö->
›
==
SQLITE_INDEX_CONSTRAINT_EQ
 ){

187 
sqlôe3_ödex_c⁄°øöt_ußge
 *
pUßge
;

188 
pUßge
 = &
pIdxInfo
->
aC⁄°øötUßge
[
ii
];

189 
pUßge
->
omô
 = 1;

190 
pUßge
->
¨gvIndex
 = 1;

191 
pIdxInfo
->
idxNum
 = 1;

192 
pIdxInfo
->
e°im©edCo°
 = 1.0;

197  
SQLITE_OK
;

198 
	}
}

205 
	$fsdúO≥n
(
sqlôe3_vèb
 *
pVTab
, 
sqlôe3_vèb_curs‹
 **
µCurs‹
){

206 
FsdúC§
 *
pCur
;

210 
pCur
 = (
FsdúC§
*)
	`sqlôe3_mÆloc
((FsdirCsr)+256);

211 if–
pCur
==0 )  
SQLITE_NOMEM
;

212 
	`mem£t
(
pCur
, 0, (
FsdúC§
));

213 *
µCurs‹
 = &
pCur
->
ba£
;

214  
SQLITE_OK
;

215 
	}
}

220 
	$fsdúClo£
(
sqlôe3_vèb_curs‹
 *
cur
){

221 
FsdúC§
 *
pCur
 = (FsdúC§*)
cur
;

222 if–
pCur
->
pDú
 ) 
	`˛o£dú
(pCur->pDir);

223 
	`sqlôe3_‰ì
(
pCur
->
zDú
);

224 
	`sqlôe3_‰ì
(
pCur
);

225  
SQLITE_OK
;

226 
	}
}

231 
	$fsdúNext
(
sqlôe3_vèb_curs‹
 *
cur
){

232 
FsdúC§
 *
pC§
 = (FsdúC§*)
cur
;

234 if–
pC§
->
pDú
 ){

235 
DIRENT
 *
pRes
 = 0;

236 #i‡
	`deföed
(
__MINGW_H
)

237 
pRes
 = 
	`ªaddú
(
pC§
->
pDú
);

238 if–
pRes
!=0 ){

239 
	`mem˝y
(&
pC§
->
íåy
, 
pRes
, (
DIRENT
));

242 
	`ªaddú_r
(
pC§
->
pDú
, &pC§->
íåy
, &
pRes
);

244 if–
pRes
==0 ){

245 
	`˛o£dú
(
pC§
->
pDú
);

246 
pC§
->
pDú
 = 0;

248 
pC§
->
iRowid
++;

251  
SQLITE_OK
;

252 
	}
}

257 
	$fsdúFûãr
(

258 
sqlôe3_vèb_curs‹
 *
pVèbCurs‹
,

259 
idxNum
, c⁄° *
idxSå
,

260 
¨gc
, 
sqlôe3_vÆue
 **
¨gv


262 
FsdúC§
 *
pC§
 = (FsdúC§*)
pVèbCurs‹
;

263 c⁄° *
zDú
;

264 
nDú
;

267 if–
idxNum
!=1 || 
¨gc
!=1 ){

268  
SQLITE_ERROR
;

271 
pC§
->
iRowid
 = 0;

272 
	`sqlôe3_‰ì
(
pC§
->
zDú
);

273 if–
pC§
->
pDú
 ){

274 
	`˛o£dú
(
pC§
->
pDú
);

275 
pC§
->
pDú
 = 0;

278 
zDú
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

279 
nDú
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[0]);

280 
pC§
->
zDú
 = 
	`sqlôe3_mÆloc
(
nDú
+1);

281 if–
pC§
->
zDú
==0 )  
SQLITE_NOMEM
;

282 
	`mem˝y
(
pC§
->
zDú
, zDú, 
nDú
+1);

284 
pC§
->
pDú
 = 
	`›ídú
’C§->
zDú
);

285  
	`fsdúNext
(
pVèbCurs‹
);

286 
	}
}

291 
	$fsdúEof
(
sqlôe3_vèb_curs‹
 *
cur
){

292 
FsdúC§
 *
pC§
 = (FsdúC§*)
cur
;

293  
pC§
->
pDú
==0;

294 
	}
}

299 
	$fsdúCﬁumn
(
sqlôe3_vèb_curs‹
 *
cur
, 
sqlôe3_c⁄ãxt
 *
˘x
, 
i
){

300 
FsdúC§
 *
pC§
 = (FsdúC§*)
cur
;

301  
i
 ){

303 
	`sqlôe3_ªsu…_ãxt
(
˘x
, 
pC§
->
zDú
, -1, 
SQLITE_STATIC
);

307 
	`sqlôe3_ªsu…_ãxt
(
˘x
, 
pC§
->
íåy
.
d_«me
, -1, 
SQLITE_TRANSIENT
);

311 
	`as£π
( 0 );

314  
SQLITE_OK
;

315 
	}
}

320 
	$fsdúRowid
(
sqlôe3_vèb_curs‹
 *
cur
, 
sqlôe_öt64
 *
pRowid
){

321 
FsdúC§
 *
pC§
 = (FsdúC§*)
cur
;

322 *
pRowid
 = 
pC§
->
iRowid
;

323  
SQLITE_OK
;

324 
	}
}

332 
F°ªeVèb
 
	tF°ªeVèb
;

333 
F°ªeC§
 
	tF°ªeC§
;

334 
	sF°ªeVèb
 {

335 
sqlôe3_vèb
 
	mba£
;

336 
sqlôe3
 *
	mdb
;

339 
	sF°ªeC§
 {

340 
sqlôe3_vèb_curs‹
 
	mba£
;

341 
sqlôe3_°mt
 *
	mpStmt
;

342 
	mfd
;

356 
	$f°ªeC⁄√˘
(

357 
sqlôe3
 *
db
,

358 *
pAux
,

359 
¨gc
, c⁄° *c⁄°*
¨gv
,

360 
sqlôe3_vèb
 **
µVèb
,

361 **
pzEº


363 
F°ªeVèb
 *
pTab
;

365 if–
¨gc
!=3 ){

366 *
pzEº
 = 
	`sqlôe3_m¥ötf
("wrongÇumber ofárguments");

367  
SQLITE_ERROR
;

370 
pTab
 = (
F°ªeVèb
 *)
	`sqlôe3_mÆloc
((FstreeVtab));

371 if–!
pTab
 )  
SQLITE_NOMEM
;

372 
	`mem£t
(
pTab
, 0, (
F°ªeVèb
));

373 
pTab
->
db
 = db;

375 *
µVèb
 = &
pTab
->
ba£
;

376 
	`sqlôe3_de˛¨e_vèb
(
db
, "CREATE TABLE xyz(path, size, data);");

378  
SQLITE_OK
;

379 
	}
}

384 
	$f°ªeDisc⁄√˘
(
sqlôe3_vèb
 *
pVèb
){

385 
	`sqlôe3_‰ì
(
pVèb
);

386  
SQLITE_OK
;

387 
	}
}

394 
	$f°ªeBe°Index
(
sqlôe3_vèb
 *
èb
, 
sqlôe3_ödex_öfo
 *
pIdxInfo
){

395 
ii
;

397 
ii
=0; ii<
pIdxInfo
->
nC⁄°øöt
; ii++){

398 
sqlôe3_ödex_c⁄°øöt
 c⁄° *
p
 = &
pIdxInfo
->
aC⁄°øöt
[
ii
];

399 if–
p
->
iCﬁumn
==0 &&Ö->
ußbÀ
 && (

400 
p
->
›
==
SQLITE_INDEX_CONSTRAINT_GLOB


401 || 
p
->
›
==
SQLITE_INDEX_CONSTRAINT_LIKE


402 || 
p
->
›
==
SQLITE_INDEX_CONSTRAINT_EQ


404 
sqlôe3_ödex_c⁄°øöt_ußge
 *
pUßge
;

405 
pUßge
 = &
pIdxInfo
->
aC⁄°øötUßge
[
ii
];

406 
pIdxInfo
->
idxNum
 = 
p
->
›
;

407 
pUßge
->
¨gvIndex
 = 1;

408 
pIdxInfo
->
e°im©edCo°
 = 100000.0;

409  
SQLITE_OK
;

413 
pIdxInfo
->
e°im©edCo°
 = 1000000000.0;

414  
SQLITE_OK
;

415 
	}
}

422 
	$f°ªeO≥n
(
sqlôe3_vèb
 *
pVTab
, 
sqlôe3_vèb_curs‹
 **
µCurs‹
){

423 
F°ªeC§
 *
pCur
;

424 
pCur
 = (
F°ªeC§
*)
	`sqlôe3_mÆloc
((FstreeCsr));

425 if–
pCur
==0 )  
SQLITE_NOMEM
;

426 
	`mem£t
(
pCur
, 0, (
F°ªeC§
));

427 
pCur
->
fd
 = -1;

428 *
µCurs‹
 = &
pCur
->
ba£
;

429  
SQLITE_OK
;

430 
	}
}

432 
	$f°ªeClo£Fd
(
F°ªeC§
 *
pC§
){

433 if–
pC§
->
fd
>=0 ){

434 
	`˛o£
(
pC§
->
fd
);

435 
pC§
->
fd
 = -1;

437 
	}
}

442 
	$f°ªeClo£
(
sqlôe3_vèb_curs‹
 *
cur
){

443 
F°ªeC§
 *
pC§
 = (F°ªeC§*)
cur
;

444 
	`sqlôe3_föÆize
(
pC§
->
pStmt
);

445 
	`f°ªeClo£Fd
(
pC§
);

446 
	`sqlôe3_‰ì
(
pC§
);

447  
SQLITE_OK
;

448 
	}
}

453 
	$f°ªeNext
(
sqlôe3_vèb_curs‹
 *
cur
){

454 
F°ªeC§
 *
pC§
 = (F°ªeC§*)
cur
;

455 
rc
;

457 
	`f°ªeClo£Fd
(
pC§
);

458 
rc
 = 
	`sqlôe3_°ï
(
pC§
->
pStmt
);

459 if–
rc
!=
SQLITE_ROW
 ){

460 
rc
 = 
	`sqlôe3_föÆize
(
pC§
->
pStmt
);

461 
pC§
->
pStmt
 = 0;

463 
rc
 = 
SQLITE_OK
;

464 
pC§
->
fd
 = 
	`›í
((c⁄° *)
	`sqlôe3_cﬁumn_ãxt
’C§->
pStmt
, 0), 
O_RDONLY
);

467  
rc
;

468 
	}
}

473 
	$f°ªeFûãr
(

474 
sqlôe3_vèb_curs‹
 *
pVèbCurs‹
,

475 
idxNum
, c⁄° *
idxSå
,

476 
¨gc
, 
sqlôe3_vÆue
 **
¨gv


478 
F°ªeC§
 *
pC§
 = (F°ªeC§*)
pVèbCurs‹
;

479 
F°ªeVèb
 *
pTab
 = (F°ªeVèb*)(
pC§
->
ba£
.
pVèb
);

480 
rc
;

481 c⁄° *
zSql
 =

489 *
zRoŸ
;

490 
nRoŸ
;

491 *
zPªfix
;

492 
nPªfix
;

493 c⁄° *
zDú
;

494 
nDú
;

495 
aWûd
[2] = { '\0', '\0' };

497 #i‡
SQLITE_OS_WIN


498 
zRoŸ
 = 
	`sqlôe3_m¥ötf
("%s%c", 
	`gëív
("SystemDrive"), '/');

499 
nRoŸ
 = 
	`sqlôe3SåÀn30
(
zRoŸ
);

500 
zPªfix
 = 
	`sqlôe3_m¥ötf
("%s", 
	`gëív
("SystemDrive"));

501 
nPªfix
 = 
	`sqlôe3SåÀn30
(
zPªfix
);

503 
zRoŸ
 = "/";

504 
nRoŸ
 = 1;

505 
zPªfix
 = "";

506 
nPªfix
 = 0;

509 
zDú
 = 
zRoŸ
;

510 
nDú
 = 
nRoŸ
;

512 
	`f°ªeClo£Fd
(
pC§
);

513 
	`sqlôe3_föÆize
(
pC§
->
pStmt
);

514 
pC§
->
pStmt
 = 0;

515 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
pTab
->
db
, 
zSql
, -1, &
pC§
->
pStmt
, 0);

516 if–
rc
!=
SQLITE_OK
 ) Ñc;

518 if–
idxNum
 ){

519 c⁄° *
zQuîy
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

520  
idxNum
 ){

521 
SQLITE_INDEX_CONSTRAINT_GLOB
:

522 
aWûd
[0] = '*';

523 
aWûd
[1] = '?';

525 
SQLITE_INDEX_CONSTRAINT_LIKE
:

526 
aWûd
[0] = '_';

527 
aWûd
[1] = '%';

531 if–
	`sqlôe3_°∫icmp
(
zQuîy
, 
zPªfix
, 
nPªfix
)==0 ){

532 
i
;

533 
i
=
nPªfix
; 
zQuîy
[i]; i++){

534 if–
zQuîy
[
i
]==
aWûd
[0] || zQuery[i]==aWild[1] ) ;

535 if–
zQuîy
[
i
]=='/' ) 
nDú
 = i;

537 
zDú
 = 
zQuîy
;

541 
	`sqlôe3_böd_ãxt
(
pC§
->
pStmt
, 1, 
zDú
, 
nDú
, 
SQLITE_TRANSIENT
);

542 
	`sqlôe3_böd_ãxt
(
pC§
->
pStmt
, 2, 
zRoŸ
, 
nRoŸ
, 
SQLITE_TRANSIENT
);

543 
	`sqlôe3_böd_ãxt
(
pC§
->
pStmt
, 3, 
zPªfix
, 
nPªfix
, 
SQLITE_TRANSIENT
);

545 #i‡
SQLITE_OS_WIN


546 
	`sqlôe3_‰ì
(
zPªfix
);

547 
	`sqlôe3_‰ì
(
zRoŸ
);

550  
	`f°ªeNext
(
pVèbCurs‹
);

551 
	}
}

556 
	$f°ªeEof
(
sqlôe3_vèb_curs‹
 *
cur
){

557 
F°ªeC§
 *
pC§
 = (F°ªeC§*)
cur
;

558  
pC§
->
pStmt
==0;

559 
	}
}

564 
	$f°ªeCﬁumn
(
sqlôe3_vèb_curs‹
 *
cur
, 
sqlôe3_c⁄ãxt
 *
˘x
, 
i
){

565 
F°ªeC§
 *
pC§
 = (F°ªeC§*)
cur
;

566 if–
i
==0 ){

567 
	`sqlôe3_ªsu…_vÆue
(
˘x
, 
	`sqlôe3_cﬁumn_vÆue
(
pC§
->
pStmt
, 0));

569 
°©
 
sBuf
;

570 
	`f°©
(
pC§
->
fd
, &
sBuf
);

572 if–
	`S_ISREG
(
sBuf
.
°_mode
) ){

573 if–
i
==1 ){

574 
	`sqlôe3_ªsu…_öt64
(
˘x
, 
sBuf
.
°_size
);

576 
nRód
;

577 *
aBuf
 = 
	`sqlôe3_mÆloc
(
sBuf
.
°_mode
+1);

578 if–!
aBuf
 )  
SQLITE_NOMEM
;

579 
nRód
 = 
	`ªad
(
pC§
->
fd
, 
aBuf
, 
sBuf
.
°_mode
);

580 if–
nRód
!=
sBuf
.
°_mode
 ){

581  
SQLITE_IOERR
;

583 
	`sqlôe3_ªsu…_blob
(
˘x
, 
aBuf
, 
nRód
, 
SQLITE_TRANSIENT
);

584 
	`sqlôe3_‰ì
(
aBuf
);

589  
SQLITE_OK
;

590 
	}
}

595 
	$f°ªeRowid
(
sqlôe3_vèb_curs‹
 *
cur
, 
sqlôe_öt64
 *
pRowid
){

596 *
pRowid
 = 0;

597  
SQLITE_OK
;

598 
	}
}

617 
	$fsC⁄√˘
(

618 
sqlôe3
 *
db
,

619 *
pAux
,

620 
¨gc
, c⁄° *c⁄°*
¨gv
,

621 
sqlôe3_vèb
 **
µVèb
,

622 **
pzEº


624 
fs_vèb
 *
pVèb
;

625 
nByã
;

626 c⁄° *
zTbl
;

627 c⁄° *
zDb
 = 
¨gv
[1];

629 if–
¨gc
!=4 ){

630 *
pzEº
 = 
	`sqlôe3_m¥ötf
("wrongÇumber ofárguments");

631  
SQLITE_ERROR
;

633 
zTbl
 = 
¨gv
[3];

635 
nByã
 = (
fs_vèb
Ë+ ()
	`°æí
(
zTbl
Ë+ 1 + ()°æí(
zDb
) + 1;

636 
pVèb
 = (
fs_vèb
 *)
	`sqlôe3MÆlocZîo
–
nByã
 );

637 if–!
pVèb
 )  
SQLITE_NOMEM
;

639 
pVèb
->
zTbl
 = (*)&pVtab[1];

640 
pVèb
->
zDb
 = &pVèb->
zTbl
[
	`°æí
(zTbl)+1];

641 
pVèb
->
db
 = db;

642 
	`mem˝y
(
pVèb
->
zTbl
, zTbl, 
	`°æí
(zTbl));

643 
	`mem˝y
(
pVèb
->
zDb
, zDb, 
	`°æí
(zDb));

644 *
µVèb
 = &
pVèb
->
ba£
;

645 
	`sqlôe3_de˛¨e_vèb
(
db
, "CREATE TABLE x(path TEXT, data TEXT)");

647  
SQLITE_OK
;

648 
	}
}

652 
	$fsDisc⁄√˘
(
sqlôe3_vèb
 *
pVèb
){

653 
	`sqlôe3_‰ì
(
pVèb
);

654  
SQLITE_OK
;

655 
	}
}

661 
	$fsO≥n
(
sqlôe3_vèb
 *
pVTab
, 
sqlôe3_vèb_curs‹
 **
µCurs‹
){

662 
fs_curs‹
 *
pCur
;

663 
pCur
 = 
	`sqlôe3MÆlocZîo
((
fs_curs‹
));

664 *
µCurs‹
 = &
pCur
->
ba£
;

665  
SQLITE_OK
;

666 
	}
}

671 
	$fsClo£
(
sqlôe3_vèb_curs‹
 *
cur
){

672 
fs_curs‹
 *
pCur
 = (fs_curs‹ *)
cur
;

673 
	`sqlôe3_föÆize
(
pCur
->
pStmt
);

674 
	`sqlôe3_‰ì
(
pCur
->
zBuf
);

675 
	`sqlôe3_‰ì
(
pCur
);

676  
SQLITE_OK
;

677 
	}
}

679 
	$fsNext
(
sqlôe3_vèb_curs‹
 *
cur
){

680 
fs_curs‹
 *
pCur
 = (fs_curs‹ *)
cur
;

681 
rc
;

683 
rc
 = 
	`sqlôe3_°ï
(
pCur
->
pStmt
);

684 if–
rc
==
SQLITE_ROW
 ||Ñc==
SQLITE_DONE
 )Ñ¯
SQLITE_OK
;

686  
rc
;

687 
	}
}

689 
	$fsFûãr
(

690 
sqlôe3_vèb_curs‹
 *
pVèbCurs‹
,

691 
idxNum
, c⁄° *
idxSå
,

692 
¨gc
, 
sqlôe3_vÆue
 **
¨gv


694 
rc
;

695 
fs_curs‹
 *
pCur
 = (fs_curs‹ *)
pVèbCurs‹
;

696 
fs_vèb
 *
p
 = (fs_vèb *)(
pVèbCurs‹
->
pVèb
);

698 
	`as£π
–(
idxNum
==0 && 
¨gc
==0) || (idxNum==1 &&árgc==1) );

699 if–
idxNum
==1 ){

700 *
zStmt
 = 
	`sqlôe3_m¥ötf
(

701 "SELECT * FROM %Q.%Q WHEREÑowid=?", 
p
->
zDb
,Ö->
zTbl
);

702 if–!
zStmt
 )  
SQLITE_NOMEM
;

703 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
p
->
db
, 
zStmt
, -1, &
pCur
->
pStmt
, 0);

704 
	`sqlôe3_‰ì
(
zStmt
);

705 if–
rc
==
SQLITE_OK
 ){

706 
	`sqlôe3_böd_vÆue
(
pCur
->
pStmt
, 1, 
¨gv
[0]);

709 *
zStmt
 = 
	`sqlôe3_m¥ötf
("SELECT * FROM %Q.%Q", 
p
->
zDb
,Ö->
zTbl
);

710 if–!
zStmt
 )  
SQLITE_NOMEM
;

711 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
p
->
db
, 
zStmt
, -1, &
pCur
->
pStmt
, 0);

712 
	`sqlôe3_‰ì
(
zStmt
);

715 if–
rc
==
SQLITE_OK
 ){

716 
rc
 = 
	`fsNext
(
pVèbCurs‹
);

718  
rc
;

719 
	}
}

721 
	$fsCﬁumn
(
sqlôe3_vèb_curs‹
 *
cur
, 
sqlôe3_c⁄ãxt
 *
˘x
, 
i
){

722 
fs_curs‹
 *
pCur
 = (fs_curs‹*)
cur
;

724 
	`as£π
–
i
==0 || i==1 || i==2 );

725 if–
i
==0 ){

726 
	`sqlôe3_ªsu…_vÆue
(
˘x
, 
	`sqlôe3_cﬁumn_vÆue
(
pCur
->
pStmt
, 0));

728 c⁄° *
zFûe
 = (c⁄° *)
	`sqlôe3_cﬁumn_ãxt
(
pCur
->
pStmt
, 1);

729 
°©
 
sbuf
;

730 
fd
;

732 
n
;

733 
fd
 = 
	`›í
(
zFûe
, 
O_RDONLY
);

734 if–
fd
<0 )  
SQLITE_IOERR
;

735 
	`f°©
(
fd
, &
sbuf
);

737 if–
sbuf
.
°_size
>=
pCur
->
nAŒoc
 ){

738 
nNew
 = 
sbuf
.
°_size
*2;

739 *
zNew
;

740 if–
nNew
<1024 )ÇNew = 1024;

742 
zNew
 = 
	`sqlôe3RóŒoc
(
pCur
->
zBuf
, 
nNew
);

743 if–
zNew
==0 ){

744 
	`˛o£
(
fd
);

745  
SQLITE_NOMEM
;

747 
pCur
->
zBuf
 = 
zNew
;

748 
pCur
->
nAŒoc
 = 
nNew
;

751 
n
 = ()
	`ªad
(
fd
, 
pCur
->
zBuf
, 
sbuf
.
°_size
);

752 
	`˛o£
(
fd
);

753 if–
n
!=
sbuf
.
°_size
 )  
SQLITE_ERROR
;

754 
pCur
->
nBuf
 = 
sbuf
.
°_size
;

755 
pCur
->
zBuf
[pCur->
nBuf
] = '\0';

757 
	`sqlôe3_ªsu…_ãxt
(
˘x
, 
pCur
->
zBuf
, -1, 
SQLITE_TRANSIENT
);

759  
SQLITE_OK
;

760 
	}
}

762 
	$fsRowid
(
sqlôe3_vèb_curs‹
 *
cur
, 
sqlôe_öt64
 *
pRowid
){

763 
fs_curs‹
 *
pCur
 = (fs_curs‹*)
cur
;

764 *
pRowid
 = 
	`sqlôe3_cﬁumn_öt64
(
pCur
->
pStmt
, 0);

765  
SQLITE_OK
;

766 
	}
}

768 
	$fsEof
(
sqlôe3_vèb_curs‹
 *
cur
){

769 
fs_curs‹
 *
pCur
 = (fs_curs‹*)
cur
;

770  (
	`sqlôe3_d©a_cou¡
(
pCur
->
pStmt
)==0);

771 
	}
}

773 
	$fsBe°Index
(
sqlôe3_vèb
 *
èb
, 
sqlôe3_ödex_öfo
 *
pIdxInfo
){

774 
ii
;

776 
ii
=0; ii<
pIdxInfo
->
nC⁄°øöt
; ii++){

777 
sqlôe3_ödex_c⁄°øöt
 c⁄° *
pC⁄s
 = &
pIdxInfo
->
aC⁄°øöt
[
ii
];

778 if–
pC⁄s
->
iCﬁumn
<0 &&ÖC⁄s->
ußbÀ


779 && 
pC⁄s
->
›
==
SQLITE_INDEX_CONSTRAINT_EQ
 ){

780 
sqlôe3_ödex_c⁄°øöt_ußge
 *
pUßge
;

781 
pUßge
 = &
pIdxInfo
->
aC⁄°øötUßge
[
ii
];

782 
pUßge
->
omô
 = 0;

783 
pUßge
->
¨gvIndex
 = 1;

784 
pIdxInfo
->
idxNum
 = 1;

785 
pIdxInfo
->
e°im©edCo°
 = 1.0;

790  
SQLITE_OK
;

791 
	}
}

797 
sqlôe3_moduÀ
 
	gfsModuÀ
 = {

799 
fsC⁄√˘
,

800 
fsC⁄√˘
,

801 
fsBe°Index
,

802 
fsDisc⁄√˘
,

803 
fsDisc⁄√˘
,

804 
fsO≥n
,

805 
fsClo£
,

806 
fsFûãr
,

807 
fsNext
,

808 
fsEof
,

809 
fsCﬁumn
,

810 
fsRowid
,

820 
sqlôe3_moduÀ
 
	gfsdúModuÀ
 = {

822 
fsdúC⁄√˘
,

823 
fsdúC⁄√˘
,

824 
fsdúBe°Index
,

825 
fsdúDisc⁄√˘
,

826 
fsdúDisc⁄√˘
,

827 
fsdúO≥n
,

828 
fsdúClo£
,

829 
fsdúFûãr
,

830 
fsdúNext
,

831 
fsdúEof
,

832 
fsdúCﬁumn
,

833 
fsdúRowid
,

843 
sqlôe3_moduÀ
 
	gf°ªeModuÀ
 = {

845 
f°ªeC⁄√˘
,

846 
f°ªeC⁄√˘
,

847 
f°ªeBe°Index
,

848 
f°ªeDisc⁄√˘
,

849 
f°ªeDisc⁄√˘
,

850 
f°ªeO≥n
,

851 
f°ªeClo£
,

852 
f°ªeFûãr
,

853 
f°ªeNext
,

854 
f°ªeEof
,

855 
f°ªeCﬁumn
,

856 
f°ªeRowid
,

869 
gëDbPoöãr
(
T˛_I¡îp
 *
öãΩ
, c⁄° *
zA
, 
sqlôe3
 **
µDb
);

874 
	$ªgi°î_fs_moduÀ
(

875 
Clõ¡D©a
 
˛õ¡D©a
,

876 
T˛_I¡îp
 *
öãΩ
,

877 
objc
,

878 
T˛_Obj
 *
CONST
 
objv
[]

880 
sqlôe3
 *
db
;

881 if–
objc
!=2 ){

882 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB");

883  
TCL_ERROR
;

885 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

886 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


887 
	`sqlôe3_¸óã_moduÀ
(
db
, "fs", &
fsModuÀ
, (*)
öãΩ
);

888 
	`sqlôe3_¸óã_moduÀ
(
db
, "fsdú", &
fsdúModuÀ
, 0);

889 
	`sqlôe3_¸óã_moduÀ
(
db
, "f°ªe", &
f°ªeModuÀ
, 0);

891  
TCL_OK
;

892 
	}
}

900 
	$Sqlôëe°fs_Inô
(
T˛_I¡îp
 *
öãΩ
){

901 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


903 *
zName
;

904 
T˛_ObjCmdProc
 *
xProc
;

905 *
˛õ¡D©a
;

906 } 
aObjCmd
[] = {

907 { "ªgi°î_fs_moduÀ", 
ªgi°î_fs_moduÀ
, 0 },

909 
i
;

910 
i
=0; i<(
aObjCmd
)/(aObjCmd[0]); i++){

911 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
aObjCmd
[
i
].
zName
,

912 
aObjCmd
[
i
].
xProc
,áObjCmd[i].
˛õ¡D©a
, 0);

915  
TCL_OK
;

916 
	}
}

	@test_func.c

15 
	~"sqlôe3.h
"

16 
	~"t˛.h
"

17 
	~<°dlib.h
>

18 
	~<°rög.h
>

19 
	~<as£π.h
>

21 
	~"sqlôeI¡.h
"

22 
	~"vdbeI¡.h
"

30 *
	$ã°C⁄ãxtMÆloc
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
nByã
){

31 *
z
 = 
	`sqlôe3_mÆloc
(
nByã
);

32 if–!
z
 && 
nByã
>0 ){

33 
	`sqlôe3_ªsu…_îr‹_nomem
(
c⁄ãxt
);

35  
z
;

36 
	}
}

42 
	$øndSå
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

43 c⁄° 
zSrc
[] =

48 
iMö
, 
iMax
, 
n
, 
r
, 
i
;

49 
zBuf
[1000];

54 
	`as£π
(
¨gc
==2);

56 
iMö
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[0]);

57 if–
iMö
<0 ) iMin = 0;

58 if–
iMö
>=(
zBuf
) ) iMin = (zBuf)-1;

59 
iMax
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[1]);

60 if–
iMax
<
iMö
 ) iMax = iMin;

61 if–
iMax
>=(
zBuf
) ) iMax = (zBuf)-1;

62 
n
 = 
iMö
;

63 if–
iMax
>
iMö
 ){

64 
	`sqlôe3_øndom√ss
((
r
), &r);

65 
r
 &= 0x7fffffff;

66 
n
 +
r
%(
iMax
 + 1 - 
iMö
);

68 
	`as£π
–
n
<(
zBuf
) );

69 
	`sqlôe3_øndom√ss
(
n
, 
zBuf
);

70 
i
=0; i<
n
; i++){

71 
zBuf
[
i
] = 
zSrc
[zBuf[i]%((zSrc)-1)];

73 
zBuf
[
n
] = 0;

74 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, (*)
zBuf
, 
n
, 
SQLITE_TRANSIENT
);

75 
	}
}

88 
	gã°_de°ru˘‹_cou¡_v¨
 = 0;

89 
	$de°ru˘‹
(*
p
){

90 *
zVÆ
 = (*)
p
;

91 
	`as£π
(
zVÆ
);

92 
zVÆ
--;

93 
	`sqlôe3_‰ì
(
zVÆ
);

94 
ã°_de°ru˘‹_cou¡_v¨
--;

95 
	}
}

96 
	$ã°_de°ru˘‹
(

97 
sqlôe3_c⁄ãxt
 *
pCtx
,

98 
nArg
,

99 
sqlôe3_vÆue
 **
¨gv


101 *
zVÆ
;

102 
Àn
;

104 
ã°_de°ru˘‹_cou¡_v¨
++;

105 
	`as£π
–
nArg
==1 );

106 if–
	`sqlôe3_vÆue_ty≥
(
¨gv
[0])==
SQLITE_NULL
 ) ;

107 
Àn
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[0]);

108 
zVÆ
 = 
	`ã°C⁄ãxtMÆloc
(
pCtx
, 
Àn
+3);

109 if–!
zVÆ
 ){

112 
zVÆ
[
Àn
+1] = 0;

113 
zVÆ
[
Àn
+2] = 0;

114 
zVÆ
++;

115 
	`mem˝y
(
zVÆ
, 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]), 
Àn
);

116 
	`sqlôe3_ªsu…_ãxt
(
pCtx
, 
zVÆ
, -1, 
de°ru˘‹
);

117 
	}
}

118 #i‚de‡
SQLITE_OMIT_UTF16


119 
	$ã°_de°ru˘‹16
(

120 
sqlôe3_c⁄ãxt
 *
pCtx
,

121 
nArg
,

122 
sqlôe3_vÆue
 **
¨gv


124 *
zVÆ
;

125 
Àn
;

127 
ã°_de°ru˘‹_cou¡_v¨
++;

128 
	`as£π
–
nArg
==1 );

129 if–
	`sqlôe3_vÆue_ty≥
(
¨gv
[0])==
SQLITE_NULL
 ) ;

130 
Àn
 = 
	`sqlôe3_vÆue_byãs16
(
¨gv
[0]);

131 
zVÆ
 = 
	`ã°C⁄ãxtMÆloc
(
pCtx
, 
Àn
+3);

132 if–!
zVÆ
 ){

135 
zVÆ
[
Àn
+1] = 0;

136 
zVÆ
[
Àn
+2] = 0;

137 
zVÆ
++;

138 
	`mem˝y
(
zVÆ
, 
	`sqlôe3_vÆue_ãxt16
(
¨gv
[0]), 
Àn
);

139 
	`sqlôe3_ªsu…_ãxt16
(
pCtx
, 
zVÆ
, -1, 
de°ru˘‹
);

140 
	}
}

142 
	$ã°_de°ru˘‹_cou¡
(

143 
sqlôe3_c⁄ãxt
 *
pCtx
,

144 
nArg
,

145 
sqlôe3_vÆue
 **
¨gv


147 
	`sqlôe3_ªsu…_öt
(
pCtx
, 
ã°_de°ru˘‹_cou¡_v¨
);

148 
	}
}

155 #i‚de‡
SQLITE_OMIT_BUILTIN_TEST


156 
sqlôe3BegöBíignMÆloc
();

157 
sqlôe3EndBíignMÆloc
();

159 
	#sqlôe3BegöBíignMÆloc
()

	)

160 
	#sqlôe3EndBíignMÆloc
()

	)

162 
	$ã°_agg_îrmsg16_°ï
(
sqlôe3_c⁄ãxt
 *
a
, 
b
,
sqlôe3_vÆue
 **
c
){

163 
	}
}

164 
	$ã°_agg_îrmsg16_föÆ
(
sqlôe3_c⁄ãxt
 *
˘x
){

165 #i‚de‡
SQLITE_OMIT_UTF16


166 c⁄° *
z
;

167 
sqlôe3
 * 
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
˘x
);

168 
	`sqlôe3_aggªg©e_c⁄ãxt
(
˘x
, 2048);

169 
z
 = 
	`sqlôe3_îrmsg16
(
db
);

170 
	`sqlôe3_ªsu…_ãxt16
(
˘x
, 
z
, -1, 
SQLITE_TRANSIENT
);

172 
	}
}

185 
	$‰ì_ã°_auxd©a
(*
p
Ë{
	`sqlôe3_‰ì
’);
	}
}

186 
	$ã°_auxd©a
(

187 
sqlôe3_c⁄ãxt
 *
pCtx
,

188 
nArg
,

189 
sqlôe3_vÆue
 **
¨gv


191 
i
;

192 *
zRë
 = 
	`ã°C⁄ãxtMÆloc
(
pCtx
, 
nArg
*2);

193 if–!
zRë
 ) ;

194 
	`mem£t
(
zRë
, 0, 
nArg
*2);

195 
i
=0; i<
nArg
; i++){

196 c⁄° *
z
 = (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[
i
]);

197 if–
z
 ){

198 
n
;

199 *
zAux
 = 
	`sqlôe3_gë_auxd©a
(
pCtx
, 
i
);

200 if–
zAux
 ){

201 
zRë
[
i
*2] = '1';

202 
	`as£π
–
	`°rcmp
(
zAux
,
z
)==0 );

204 
zRë
[
i
*2] = '0';

206 
n
 = ()
	`°æí
(
z
) + 1;

207 
zAux
 = 
	`ã°C⁄ãxtMÆloc
(
pCtx
, 
n
);

208 if–
zAux
 ){

209 
	`mem˝y
(
zAux
, 
z
, 
n
);

210 
	`sqlôe3_£t_auxd©a
(
pCtx
, 
i
, 
zAux
, 
‰ì_ã°_auxd©a
);

212 
zRë
[
i
*2+1] = ' ';

215 
	`sqlôe3_ªsu…_ãxt
(
pCtx
, 
zRë
, 2*
nArg
-1, 
‰ì_ã°_auxd©a
);

216 
	}
}

223 
	$ã°_îr‹
(

224 
sqlôe3_c⁄ãxt
 *
pCtx
,

225 
nArg
,

226 
sqlôe3_vÆue
 **
¨gv


228 
	`sqlôe3_ªsu…_îr‹
(
pCtx
, (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]), -1);

229 if–
nArg
==2 ){

230 
	`sqlôe3_ªsu…_îr‹_code
(
pCtx
, 
	`sqlôe3_vÆue_öt
(
¨gv
[1]));

232 
	}
}

240 
	$cou¡îFunc
(

241 
sqlôe3_c⁄ãxt
 *
pCtx
,

242 
nArg
,

243 
sqlôe3_vÆue
 **
¨gv


245 *
pCou¡î
 = (*)
	`sqlôe3_gë_auxd©a
(
pCtx
, 0);

246 if–
pCou¡î
==0 ){

247 
pCou¡î
 = 
	`sqlôe3_mÆloc
( (*pCounter) );

248 if–
pCou¡î
==0 ){

249 
	`sqlôe3_ªsu…_îr‹_nomem
(
pCtx
);

252 *
pCou¡î
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[0]);

253 
	`sqlôe3_£t_auxd©a
(
pCtx
, 0, 
pCou¡î
, 
sqlôe3_‰ì
);

255 ++*
pCou¡î
;

257 
	`sqlôe3_ªsu…_öt
(
pCtx
, *
pCou¡î
);

258 
	}
}

273 
	$ã°_isﬁ©i⁄
(

274 
sqlôe3_c⁄ãxt
 *
pCtx
,

275 
nArg
,

276 
sqlôe3_vÆue
 **
¨gv


278 #i‚de‡
SQLITE_OMIT_UTF16


279 
	`sqlôe3_vÆue_ãxt16
(
¨gv
[0]);

280 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

281 
	`sqlôe3_vÆue_ãxt16
(
¨gv
[0]);

282 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

284 
	`sqlôe3_ªsu…_vÆue
(
pCtx
, 
¨gv
[1]);

285 
	}
}

291 
	$ã°_evÆ
(

292 
sqlôe3_c⁄ãxt
 *
pCtx
,

293 
nArg
,

294 
sqlôe3_vÆue
 **
¨gv


296 
sqlôe3_°mt
 *
pStmt
;

297 
rc
;

298 
sqlôe3
 *
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
pCtx
);

299 c⁄° *
zSql
;

301 
zSql
 = (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

302 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
db
, 
zSql
, -1, &
pStmt
, 0);

303 if–
rc
==
SQLITE_OK
 ){

304 
rc
 = 
	`sqlôe3_°ï
(
pStmt
);

305 if–
rc
==
SQLITE_ROW
 ){

306 
	`sqlôe3_ªsu…_vÆue
(
pCtx
, 
	`sqlôe3_cﬁumn_vÆue
(
pStmt
, 0));

308 
rc
 = 
	`sqlôe3_föÆize
(
pStmt
);

310 if–
rc
 ){

311 *
zEº
;

312 
	`as£π
–
pStmt
==0 );

313 
zEº
 = 
	`sqlôe3_m¥ötf
("sqlôe3_¥ï¨e_v2(Ëîr‹: %s",
	`sqlôe3_îrmsg
(
db
));

314 
	`sqlôe3_ªsu…_ãxt
(
pCtx
, 
zEº
, -1, 
sqlôe3_‰ì
);

315 
	`sqlôe3_ªsu…_îr‹_code
(
pCtx
, 
rc
);

317 
	}
}

323 
	$ã°HexCh¨
(
c
){

324 if–
c
>='0' && c<='9' ){

325  
c
 - '0';

326 }if–
c
>='a' && c<='f' ){

327  
c
 - 'a' + 10;

328 }if–
c
>='A' && c<='F' ){

329  
c
 - 'A' + 10;

332 
	}
}

337 
	$ã°HexToBö
(c⁄° *
zIn
, *
zOut
){

338  
zIn
[0] && zIn[1] ){

339 *(
zOut
++Ë(
	`ã°HexCh¨
(
zIn
[0])<<4) +ÅestHexChar(zIn[1]);

340 
zIn
 += 2;

342 
	}
}

350 #i‚de‡
SQLITE_OMIT_UTF16


351 
	$ã°HexToUtf16be
(

352 
sqlôe3_c⁄ãxt
 *
pCtx
,

353 
nArg
,

354 
sqlôe3_vÆue
 **
¨gv


356 
n
;

357 c⁄° *
zIn
;

358 *
zOut
;

359 
	`as£π
–
nArg
==1 );

360 
n
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[0]);

361 
zIn
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

362 
zOut
 = 
	`sqlôe3_mÆloc
–
n
/2 );

363 if–
zOut
==0 ){

364 
	`sqlôe3_ªsu…_îr‹_nomem
(
pCtx
);

366 
	`ã°HexToBö
(
zIn
, 
zOut
);

367 
	`sqlôe3_ªsu…_ãxt16be
(
pCtx
, 
zOut
, 
n
/2, 
sqlôe3_‰ì
);

369 
	}
}

378 
	$ã°HexToUtf8
(

379 
sqlôe3_c⁄ãxt
 *
pCtx
,

380 
nArg
,

381 
sqlôe3_vÆue
 **
¨gv


383 
n
;

384 c⁄° *
zIn
;

385 *
zOut
;

386 
	`as£π
–
nArg
==1 );

387 
n
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[0]);

388 
zIn
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

389 
zOut
 = 
	`sqlôe3_mÆloc
–
n
/2 );

390 if–
zOut
==0 ){

391 
	`sqlôe3_ªsu…_îr‹_nomem
(
pCtx
);

393 
	`ã°HexToBö
(
zIn
, 
zOut
);

394 
	`sqlôe3_ªsu…_ãxt
(
pCtx
, 
zOut
, 
n
/2, 
sqlôe3_‰ì
);

396 
	}
}

404 #i‚de‡
SQLITE_OMIT_UTF16


405 
	$ã°HexToUtf16À
(

406 
sqlôe3_c⁄ãxt
 *
pCtx
,

407 
nArg
,

408 
sqlôe3_vÆue
 **
¨gv


410 
n
;

411 c⁄° *
zIn
;

412 *
zOut
;

413 
	`as£π
–
nArg
==1 );

414 
n
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[0]);

415 
zIn
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

416 
zOut
 = 
	`sqlôe3_mÆloc
–
n
/2 );

417 if–
zOut
==0 ){

418 
	`sqlôe3_ªsu…_îr‹_nomem
(
pCtx
);

420 
	`ã°HexToBö
(
zIn
, 
zOut
);

421 
	`sqlôe3_ªsu…_ãxt16À
(
pCtx
, 
zOut
, 
n
/2, 
sqlôe3_‰ì
);

423 
	}
}

433 
	$ªÆ2hex
(

434 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

435 
¨gc
,

436 
sqlôe3_vÆue
 **
¨gv


439 
sqlôe3_uöt64
 
i
;

440 
r
;

441 
x
[8];

442 } 
v
;

443 
zOut
[20];

444 
i
;

445 
bigEndün
;

446 
v
.
i
 = 1;

447 
bigEndün
 = 
v
.
x
[0]==0;

448 
v
.
r
 = 
	`sqlôe3_vÆue_doubÀ
(
¨gv
[0]);

449 
i
=0; i<8; i++){

450 if–
bigEndün
 ){

451 
zOut
[
i
*2] = "0123456789abcdef"[
v
.
x
[i]>>4];

452 
zOut
[
i
*2+1] = "0123456789abcdef"[
v
.
x
[i]&0xf];

454 
zOut
[14-
i
*2] = "0123456789abcdef"[
v
.
x
[i]>>4];

455 
zOut
[14-
i
*2+1] = "0123456789abcdef"[
v
.
x
[i]&0xf];

458 
zOut
[16] = 0;

459 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zOut
, -1, 
SQLITE_TRANSIENT
);

460 
	}
}

470 
	$ã°_exåa˘
(

471 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

472 
¨gc
,

473 
sqlôe3_vÆue
 **
¨gv


475 
sqlôe3
 *
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
);

476 
u8
 *
pRec
;

477 
u8
 *
pEndHdr
;

478 
u8
 *
pHdr
;

479 
u8
 *
pBody
;

480 
u64
 
nHdr
;

481 
iIdx
;

482 
iCuºít
 = 0;

484 
	`as£π
–
¨gc
==2 );

485 
pRec
 = (
u8
*)
	`sqlôe3_vÆue_blob
(
¨gv
[0]);

486 
iIdx
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[1]);

488 
pHdr
 = 
pRec
 + 
	`sqlôe3GëV¨öt
’Rec, &
nHdr
);

489 
pBody
 = 
pEndHdr
 = &
pRec
[
nHdr
];

491 
iCuºít
=0; 
pHdr
<
pEndHdr
 && iCuºít<=
iIdx
; iCurrent++){

492 
u64
 
iSîülTy≥
;

493 
Mem
 
mem
;

495 
	`mem£t
(&
mem
, 0, (mem));

496 
mem
.
db
 = db;

497 
mem
.
íc
 = 
	`ENC
(
db
);

498 
pHdr
 +
	`sqlôe3GëV¨öt
’Hdr, &
iSîülTy≥
);

499 
pBody
 +
	`sqlôe3VdbeSîülGë
’Body, (
u32
)
iSîülTy≥
, &
mem
);

501 if–
iCuºít
==
iIdx
 ){

502 
	`sqlôe3_ªsu…_vÆue
(
c⁄ãxt
, &
mem
);

505 if–
mem
.
szMÆloc
 ) 
	`sqlôe3DbFªe
(
db
, mem.
zMÆloc
);

507 
	}
}

517 
	$ã°_decode
(

518 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

519 
¨gc
,

520 
sqlôe3_vÆue
 **
¨gv


522 
sqlôe3
 *
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
);

523 
u8
 *
pRec
;

524 
u8
 *
pEndHdr
;

525 
u8
 *
pHdr
;

526 
u8
 *
pBody
;

527 
u64
 
nHdr
;

528 
T˛_Obj
 *
pRë
;

530 
pRë
 = 
	`T˛_NewObj
();

531 
	`T˛_In¸RefCou¡
(
pRë
);

533 
	`as£π
–
¨gc
==1 );

534 
pRec
 = (
u8
*)
	`sqlôe3_vÆue_blob
(
¨gv
[0]);

536 
pHdr
 = 
pRec
 + 
	`sqlôe3GëV¨öt
’Rec, &
nHdr
);

537 
pBody
 = 
pEndHdr
 = &
pRec
[
nHdr
];

538  
pHdr
<
pEndHdr
 ){

539 
T˛_Obj
 *
pVÆ
 = 0;

540 
u64
 
iSîülTy≥
;

541 
Mem
 
mem
;

543 
	`mem£t
(&
mem
, 0, (mem));

544 
mem
.
db
 = db;

545 
mem
.
íc
 = 
	`ENC
(
db
);

546 
pHdr
 +
	`sqlôe3GëV¨öt
’Hdr, &
iSîülTy≥
);

547 
pBody
 +
	`sqlôe3VdbeSîülGë
’Body, (
u32
)
iSîülTy≥
, &
mem
);

549  
	`sqlôe3_vÆue_ty≥
(&
mem
) ){

550 
SQLITE_TEXT
:

551 
pVÆ
 = 
	`T˛_NewSåögObj
((c⁄° *)
	`sqlôe3_vÆue_ãxt
(&
mem
), -1);

554 
SQLITE_BLOB
: {

555 
hexdigô
[] = {

559 
n
 = 
	`sqlôe3_vÆue_byãs
(&
mem
);

560 
u8
 *
z
 = (u8*)
	`sqlôe3_vÆue_blob
(&
mem
);

561 
i
;

562 
pVÆ
 = 
	`T˛_NewSåögObj
("x'", -1);

563 
i
=0; i<
n
; i++){

564 
hex
[3];

565 
hex
[0] = 
hexdigô
[((
z
[
i
] >> 4) & 0x0F)];

566 
hex
[1] = 
hexdigô
[(
z
[
i
] & 0x0F)];

567 
hex
[2] = '\0';

568 
	`T˛_AµídSåögsToObj
(
pVÆ
, 
hex
, 0);

570 
	`T˛_AµídSåögsToObj
(
pVÆ
, "'", 0);

574 
SQLITE_FLOAT
:

575 
pVÆ
 = 
	`T˛_NewDoubÀObj
(
	`sqlôe3_vÆue_doubÀ
(&
mem
));

578 
SQLITE_INTEGER
:

579 
pVÆ
 = 
	`T˛_NewWideI¡Obj
(
	`sqlôe3_vÆue_öt64
(&
mem
));

582 
SQLITE_NULL
:

583 
pVÆ
 = 
	`T˛_NewSåögObj
("NULL", -1);

587 
	`as£π
( 0 );

590 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRë
, 
pVÆ
);

592 if–
mem
.
szMÆloc
 ){

593 
	`sqlôe3DbFªe
(
db
, 
mem
.
zMÆloc
);

597 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
	`T˛_GëSåög
(
pRë
), -1, 
SQLITE_TRANSIENT
);

598 
	`T˛_De¸RefCou¡
(
pRë
);

599 
	}
}

609 
	$ã°_zîoblob
(

610 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

611 
¨gc
,

612 
sqlôe3_vÆue
 **
¨gv


614 
nZîo
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[0]);

615 
	`sqlôe3_ªsu…_zîoblob
(
c⁄ãxt
, 
nZîo
);

616 
	}
}

622 
	$ã°_gësubty≥
(

623 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

624 
¨gc
,

625 
sqlôe3_vÆue
 **
¨gv


627 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, ()
	`sqlôe3_vÆue_subty≥
(
¨gv
[0]));

628 
	}
}

634 
	$ã°_£tsubty≥
(

635 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

636 
¨gc
,

637 
sqlôe3_vÆue
 **
¨gv


639 
	`sqlôe3_ªsu…_vÆue
(
c⁄ãxt
, 
¨gv
[0]);

640 
	`sqlôe3_ªsu…_subty≥
(
c⁄ãxt
, ()
	`sqlôe3_vÆue_öt
(
¨gv
[1]));

641 
	}
}

643 
	$ªgi°îTe°Fun˘i⁄s
(
sqlôe3
 *
db
){

645 *
zName
;

646 sig√d 
nArg
;

647 
eTextRï
;

648 (*
xFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
 **);

649 } 
aFuncs
[] = {

650 { "ønd°r", 2, 
SQLITE_UTF8
, 
øndSå
 },

651 { "ã°_de°ru˘‹", 1, 
SQLITE_UTF8
, 
ã°_de°ru˘‹
},

652 #i‚de‡
SQLITE_OMIT_UTF16


653 { "ã°_de°ru˘‹16", 1, 
SQLITE_UTF8
, 
ã°_de°ru˘‹16
},

654 { "hex_to_utf16be", 1, 
SQLITE_UTF8
, 
ã°HexToUtf16be
},

655 { "hex_to_utf16À", 1, 
SQLITE_UTF8
, 
ã°HexToUtf16À
},

657 { "hex_to_utf8", 1, 
SQLITE_UTF8
, 
ã°HexToUtf8
},

658 { "ã°_de°ru˘‹_cou¡", 0, 
SQLITE_UTF8
, 
ã°_de°ru˘‹_cou¡
},

659 { "ã°_auxd©a", -1, 
SQLITE_UTF8
, 
ã°_auxd©a
},

660 { "ã°_îr‹", 1, 
SQLITE_UTF8
, 
ã°_îr‹
},

661 { "ã°_îr‹", 2, 
SQLITE_UTF8
, 
ã°_îr‹
},

662 { "ã°_evÆ", 1, 
SQLITE_UTF8
, 
ã°_evÆ
},

663 { "ã°_isﬁ©i⁄", 2, 
SQLITE_UTF8
, 
ã°_isﬁ©i⁄
},

664 { "ã°_cou¡î", 1, 
SQLITE_UTF8
, 
cou¡îFunc
},

665 { "ªÆ2hex", 1, 
SQLITE_UTF8
, 
ªÆ2hex
},

666 { "ã°_decode", 1, 
SQLITE_UTF8
, 
ã°_decode
},

667 { "ã°_exåa˘", 2, 
SQLITE_UTF8
, 
ã°_exåa˘
},

668 { "ã°_zîoblob", 1, 
SQLITE_UTF8
|
SQLITE_DETERMINISTIC
, 
ã°_zîoblob
},

669 { "ã°_gësubty≥", 1, 
SQLITE_UTF8
, 
ã°_gësubty≥
},

670 { "ã°_£tsubty≥", 2, 
SQLITE_UTF8
, 
ã°_£tsubty≥
},

672 
i
;

674 
i
=0; i<(
aFuncs
)/(aFuncs[0]); i++){

675 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, 
aFuncs
[
i
].
zName
,áFuncs[i].
nArg
,

676 
aFuncs
[
i
].
eTextRï
, 0,áFuncs[i].
xFunc
, 0, 0);

679 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "ã°_agg_îrmsg16", 0, 
SQLITE_ANY
, 0, 0,

680 
ã°_agg_îrmsg16_°ï
, 
ã°_agg_îrmsg16_föÆ
);

682  
SQLITE_OK
;

683 
	}
}

692 
	$autoö°Æl_ã°_funcs
(

693 * 
˛õ¡D©a
,

694 
T˛_I¡îp
 *
öãΩ
,

695 
objc
,

696 
T˛_Obj
 *
CONST
 
objv
[]

698 
	`Md5_Regi°î
(
sqlôe3
*);

699 
rc
 = 
	`sqlôe3_auto_exãnsi⁄
((*)
ªgi°îTe°Fun˘i⁄s
);

700 if–
rc
==
SQLITE_OK
 ){

701 
rc
 = 
	`sqlôe3_auto_exãnsi⁄
((*)
Md5_Regi°î
);

703 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

704  
TCL_OK
;

705 
	}
}

710 
	$tSãp
(
sqlôe3_c⁄ãxt
 *
a
, 
b
, 
sqlôe3_vÆue
 **
c
){
	}
}

711 
	$tFöÆ
(
sqlôe3_c⁄ãxt
 *
a
){
	}
}

720 
	$abu£_¸óã_fun˘i⁄
(

721 * 
˛õ¡D©a
,

722 
T˛_I¡îp
 *
öãΩ
,

723 
objc
,

724 
T˛_Obj
 *
CONST
 
objv
[]

726 
	`gëDbPoöãr
(
T˛_I¡îp
*, c⁄° *, 
sqlôe3
**);

727 
sqlôe3
 *
db
;

728 
rc
;

729 
mxArg
;

731 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

733 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "tx", 1, 
SQLITE_UTF8
, 0, 
tSãp
,tSãp,
tFöÆ
);

734 if–
rc
!=
SQLITE_MISUSE
 ) 
abu£_îr
;

736 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "tx", 1, 
SQLITE_UTF8
, 0, 
tSãp
,ÅStep, 0);

737 if–
rc
!=
SQLITE_MISUSE
 ) 
abu£_îr
;

739 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "tx", 1, 
SQLITE_UTF8
, 0, 
tSãp
, 0, 
tFöÆ
);

740 if–
rc
!=
SQLITE_MISUSE
Ë
abu£_îr
;

742 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "tx", 1, 
SQLITE_UTF8
, 0, 0, 0, 
tFöÆ
);

743 if–
rc
!=
SQLITE_MISUSE
 ) 
abu£_îr
;

745 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "tx", 1, 
SQLITE_UTF8
, 0, 0, 
tSãp
, 0);

746 if–
rc
!=
SQLITE_MISUSE
 ) 
abu£_îr
;

748 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "tx", -2, 
SQLITE_UTF8
, 0, 
tSãp
, 0, 0);

749 if–
rc
!=
SQLITE_MISUSE
 ) 
abu£_îr
;

751 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "tx", 128, 
SQLITE_UTF8
, 0, 
tSãp
, 0, 0);

752 if–
rc
!=
SQLITE_MISUSE
 ) 
abu£_îr
;

754 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "funcxx"

760 1, 
SQLITE_UTF8
, 0, 
tSãp
, 0, 0);

761 if–
rc
!=
SQLITE_MISUSE
 ) 
abu£_îr
;

767 
	`sqlôe3_limô
(
db
, 
SQLITE_LIMIT_FUNCTION_ARG
, 10000);

768 
mxArg
 = 
	`sqlôe3_limô
(
db
, 
SQLITE_LIMIT_FUNCTION_ARG
, -1);

769 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "nullx"

775 
mxArg
, 
SQLITE_UTF8
, 0, 
tSãp
, 0, 0);

776 if–
rc
!=
SQLITE_OK
 ) 
abu£_îr
;

778  
TCL_OK
;

780 
abu£_îr
:

781 
	`T˛_AµídResu…
(
öãΩ
, "sqlite3_create_functionábusedÅest failed",

783  
TCL_ERROR
;

784 
	}
}

789 
	$Sqlôëe°_func_Inô
(
T˛_I¡îp
 *
öãΩ
){

791 *
zName
;

792 
T˛_ObjCmdProc
 *
xProc
;

793 } 
aObjCmd
[] = {

794 { "autoö°Æl_ã°_fun˘i⁄s", 
autoö°Æl_ã°_funcs
 },

795 { "abu£_¸óã_fun˘i⁄", 
abu£_¸óã_fun˘i⁄
 },

797 
i
;

798 
	`Md5_Regi°î
(
sqlôe3
*);

800 
i
=0; i<(
aObjCmd
)/(aObjCmd[0]); i++){

801 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
aObjCmd
[
i
].
zName
,áObjCmd[i].
xProc
, 0, 0);

803 
	`sqlôe3_öôülize
();

804 
	`sqlôe3_auto_exãnsi⁄
((*)
ªgi°îTe°Fun˘i⁄s
);

805 
	`sqlôe3_auto_exãnsi⁄
((*)
Md5_Regi°î
);

806  
TCL_OK
;

807 
	}
}

	@test_hexio.c

20 
	~"sqlôeI¡.h
"

21 
	~"t˛.h
"

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<as£π.h
>

32 
	$sqlôe3Te°BöToHex
(*
zBuf
, 
N
){

33 c⁄° 
zHex
[] = "0123456789ABCDEF";

34 
i
, 
j
;

35 
c
;

36 
i
 = 
N
*2;

37 
zBuf
[
i
--] = 0;

38 
j
=
N
-1; j>=0; j--){

39 
c
 = 
zBuf
[
j
];

40 
zBuf
[
i
--] = 
zHex
[
c
&0xf];

41 
zBuf
[
i
--] = 
zHex
[
c
>>4];

43 
	`as£π
–
i
==-1 );

44 
	}
}

52 
	$sqlôe3Te°HexToBö
(c⁄° *
zIn
, 
N
, *
aOut
){

53 c⁄° 
aM≠
[] = {

71 
i
, 
j
;

72 
hi
=1;

73 
c
;

75 
i
=
j
=0; i<
N
; i++){

76 
c
 = 
aM≠
[
zIn
[
i
]];

77 if–
c
==0 ) ;

78 if–
hi
 ){

79 
aOut
[
j
] = (
c
-1)<<4;

80 
hi
 = 0;

82 
aOut
[
j
++] |
c
-1;

83 
hi
 = 1;

86  
j
;

87 
	}
}

97 
	$hexio_ªad
(

98 * 
˛õ¡D©a
,

99 
T˛_I¡îp
 *
öãΩ
,

100 
objc
,

101 
T˛_Obj
 *
CONST
 
objv
[]

103 
off£t
;

104 
amt
, 
gŸ
;

105 c⁄° *
zFûe
;

106 *
zBuf
;

107 
FILE
 *
ö
;

109 if–
objc
!=4 ){

110 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "FILENAME OFFSET AMT");

111  
TCL_ERROR
;

113 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
off£t
ËË 
TCL_ERROR
;

114 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
amt
ËË 
TCL_ERROR
;

115 
zFûe
 = 
	`T˛_GëSåög
(
objv
[1]);

116 
zBuf
 = 
	`sqlôe3_mÆloc
–
amt
*2+1 );

117 if–
zBuf
==0 ){

118  
TCL_ERROR
;

120 
ö
 = 
	`f›í
(
zFûe
, "rb");

121 if–
ö
==0 ){

122 
ö
 = 
	`f›í
(
zFûe
, "r");

124 if–
ö
==0 ){

125 
	`T˛_AµídResu…
(
öãΩ
, "ˇ¬Ÿ o≥¿öpuàfûê", 
zFûe
, 0);

126  
TCL_ERROR
;

128 
	`f£ek
(
ö
, 
off£t
, 
SEEK_SET
);

129 
gŸ
 = ()
	`‰ód
(
zBuf
, 1, 
amt
, 
ö
);

130 
	`f˛o£
(
ö
);

131 if–
gŸ
<0 ){

132 
gŸ
 = 0;

134 
	`sqlôe3Te°BöToHex
(
zBuf
, 
gŸ
);

135 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

136 
	`sqlôe3_‰ì
(
zBuf
);

137  
TCL_OK
;

138 
	}
}

147 
	$hexio_wrôe
(

148 * 
˛õ¡D©a
,

149 
T˛_I¡îp
 *
öãΩ
,

150 
objc
,

151 
T˛_Obj
 *
CONST
 
objv
[]

153 
off£t
;

154 
nIn
, 
nOut
, 
wrôãn
;

155 c⁄° *
zFûe
;

156 c⁄° *
zIn
;

157 *
aOut
;

158 
FILE
 *
out
;

160 if–
objc
!=4 ){

161 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "FILENAME OFFSET HEXDATA");

162  
TCL_ERROR
;

164 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
off£t
ËË 
TCL_ERROR
;

165 
zFûe
 = 
	`T˛_GëSåög
(
objv
[1]);

166 
zIn
 = (c⁄° *)
	`T˛_GëSåögFromObj
(
objv
[3], &
nIn
);

167 
aOut
 = 
	`sqlôe3_mÆloc
–
nIn
/2 );

168 if–
aOut
==0 ){

169  
TCL_ERROR
;

171 
nOut
 = 
	`sqlôe3Te°HexToBö
(
zIn
, 
nIn
, 
aOut
);

172 
out
 = 
	`f›í
(
zFûe
, "r+b");

173 if–
out
==0 ){

174 
out
 = 
	`f›í
(
zFûe
, "r+");

176 if–
out
==0 ){

177 
	`T˛_AµídResu…
(
öãΩ
, "ˇ¬Ÿ o≥¿ouçuàfûê", 
zFûe
, 0);

178  
TCL_ERROR
;

180 
	`f£ek
(
out
, 
off£t
, 
SEEK_SET
);

181 
wrôãn
 = ()
	`fwrôe
(
aOut
, 1, 
nOut
, 
out
);

182 
	`sqlôe3_‰ì
(
aOut
);

183 
	`f˛o£
(
out
);

184 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
wrôãn
));

185  
TCL_OK
;

186 
	}
}

195 
	$hexio_gë_öt
(

196 * 
˛õ¡D©a
,

197 
T˛_I¡îp
 *
öãΩ
,

198 
objc
,

199 
T˛_Obj
 *
CONST
 
objv
[]

201 
vÆ
;

202 
nIn
, 
nOut
;

203 c⁄° *
zIn
;

204 *
aOut
;

205 
aNum
[4];

207 if–
objc
!=2 ){

208 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "HEXDATA");

209  
TCL_ERROR
;

211 
zIn
 = (c⁄° *)
	`T˛_GëSåögFromObj
(
objv
[1], &
nIn
);

212 
aOut
 = 
	`sqlôe3_mÆloc
–
nIn
/2 );

213 if–
aOut
==0 ){

214  
TCL_ERROR
;

216 
nOut
 = 
	`sqlôe3Te°HexToBö
(
zIn
, 
nIn
, 
aOut
);

217 if–
nOut
>=4 ){

218 
	`mem˝y
(
aNum
, 
aOut
, 4);

220 
	`mem£t
(
aNum
, 0, (aNum));

221 
	`mem˝y
(&
aNum
[4-
nOut
], 
aOut
,ÇOut);

223 
	`sqlôe3_‰ì
(
aOut
);

224 
vÆ
 = (
aNum
[0]<<24) | (aNum[1]<<16) | (aNum[2]<<8) |áNum[3];

225 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
vÆ
));

226  
TCL_OK
;

227 
	}
}

235 
	$hexio_ªndî_öt16
(

236 * 
˛õ¡D©a
,

237 
T˛_I¡îp
 *
öãΩ
,

238 
objc
,

239 
T˛_Obj
 *
CONST
 
objv
[]

241 
vÆ
;

242 
aNum
[10];

244 if–
objc
!=2 ){

245 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "INTEGER");

246  
TCL_ERROR
;

248 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
vÆ
ËË 
TCL_ERROR
;

249 
aNum
[0] = 
vÆ
>>8;

250 
aNum
[1] = 
vÆ
;

251 
	`sqlôe3Te°BöToHex
(
aNum
, 2);

252 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewSåögObj
((*)
aNum
, 4));

253  
TCL_OK
;

254 
	}
}

262 
	$hexio_ªndî_öt32
(

263 * 
˛õ¡D©a
,

264 
T˛_I¡îp
 *
öãΩ
,

265 
objc
,

266 
T˛_Obj
 *
CONST
 
objv
[]

268 
vÆ
;

269 
aNum
[10];

271 if–
objc
!=2 ){

272 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "INTEGER");

273  
TCL_ERROR
;

275 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
vÆ
ËË 
TCL_ERROR
;

276 
aNum
[0] = 
vÆ
>>24;

277 
aNum
[1] = 
vÆ
>>16;

278 
aNum
[2] = 
vÆ
>>8;

279 
aNum
[3] = 
vÆ
;

280 
	`sqlôe3Te°BöToHex
(
aNum
, 4);

281 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewSåögObj
((*)
aNum
, 8));

282  
TCL_OK
;

283 
	}
}

292 
	$utf8_to_utf8
(

293 * 
˛õ¡D©a
,

294 
T˛_I¡îp
 *
öãΩ
,

295 
objc
,

296 
T˛_Obj
 *
CONST
 
objv
[]

298 #ifde‡
SQLITE_DEBUG


299 
n
;

300 
nOut
;

301 c⁄° *
zOrig
;

302 *
z
;

303 if–
objc
!=2 ){

304 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "HEX");

305  
TCL_ERROR
;

307 
zOrig
 = (*)
	`T˛_GëSåögFromObj
(
objv
[1], &
n
);

308 
z
 = 
	`sqlôe3_mÆloc
–
n
+3 );

309 
n
 = 
	`sqlôe3Te°HexToBö
(
zOrig
,Ç, 
z
);

310 
z
[
n
] = 0;

311 
nOut
 = 
	`sqlôe3Utf8To8
(
z
);

312 
	`sqlôe3Te°BöToHex
(
z
,
nOut
);

313 
	`T˛_AµídResu…
(
öãΩ
, (*)
z
, 0);

314 
	`sqlôe3_‰ì
(
z
);

315  
TCL_OK
;

317 
	`T˛_AµídResu…
(
öãΩ
,

320  
TCL_ERROR
;

322 
	}
}

324 
	$gëFts3V¨öt
(c⁄° *
p
, 
sqlôe_öt64
 *
v
){

325 c⁄° *
q
 = (c⁄° *Ë
p
;

326 
sqlôe_uöt64
 
x
 = 0, 
y
 = 1;

327  (*
q
 & 0x80) == 0x80 ){

328 
x
 +
y
 * (*
q
++ & 0x7f);

329 
y
 <<= 7;

331 
x
 +
y
 * (*
q
++);

332 *
v
 = (
sqlôe_öt64
Ë
x
;

333  (Ë(
q
 - (*)
p
);

334 
	}
}

343 
	$ªad_·s3v¨öt
(

344 * 
˛õ¡D©a
,

345 
T˛_I¡îp
 *
öãΩ
,

346 
objc
,

347 
T˛_Obj
 *
CONST
 
objv
[]

349 
nBlob
;

350 *
zBlob
;

351 
sqlôe3_öt64
 
iVÆ
;

352 
nVÆ
;

354 if–
objc
!=3 ){

355 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "BLOB VARNAME");

356  
TCL_ERROR
;

358 
zBlob
 = 
	`T˛_GëByãAºayFromObj
(
objv
[1], &
nBlob
);

360 
nVÆ
 = 
	`gëFts3V¨öt
((*)
zBlob
, (
sqlôe3_öt64
 *)(&
iVÆ
));

361 
	`T˛_ObjSëV¨2
(
öãΩ
, 
objv
[2], 0, 
	`T˛_NewWideI¡Obj
(
iVÆ
), 0);

362 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
nVÆ
));

363  
TCL_OK
;

364 
	}
}

370 
	$Sqlôëe°_hexio_Inô
(
T˛_I¡îp
 *
öãΩ
){

372 *
zName
;

373 
T˛_ObjCmdProc
 *
xProc
;

374 } 
aObjCmd
[] = {

375 { "hexio_ªad", 
hexio_ªad
 },

376 { "hexio_wrôe", 
hexio_wrôe
 },

377 { "hexio_gë_öt", 
hexio_gë_öt
 },

378 { "hexio_ªndî_öt16", 
hexio_ªndî_öt16
 },

379 { "hexio_ªndî_öt32", 
hexio_ªndî_öt32
 },

380 { "utf8_to_utf8", 
utf8_to_utf8
 },

381 { "ªad_·s3v¨öt", 
ªad_·s3v¨öt
 },

383 
i
;

384 
i
=0; i<(
aObjCmd
)/(aObjCmd[0]); i++){

385 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
aObjCmd
[
i
].
zName
,áObjCmd[i].
xProc
, 0, 0);

387  
TCL_OK
;

388 
	}
}

	@test_init.c

28 
	~"sqlôeI¡.h
"

29 
	~<°rög.h
>

30 
	~<t˛.h
>

32 
	sWøµed
 {

33 
sqlôe3_pˇche_mëhods2
 
	mpˇche
;

34 
sqlôe3_mem_mëhods
 
	mmem
;

35 
sqlôe3_muãx_mëhods
 
	mmuãx
;

37 
	mmem_öô
;

38 
	mmem_Áû
;

39 
	mmuãx_öô
;

40 
	mmuãx_Áû
;

41 
	mpˇche_öô
;

42 
	mpˇche_Áû
;

43 } 
	gwøµed
;

45 
	$wrMemInô
(*
pAµD©a
){

46 
rc
;

47 if–
wøµed
.
mem_Áû
 ){

48 
rc
 = 
SQLITE_ERROR
;

50 
rc
 = 
wøµed
.
mem
.
	`xInô
(wøµed.mem.
pAµD©a
);

52 if–
rc
==
SQLITE_OK
 ){

53 
wøµed
.
mem_öô
 = 1;

55  
rc
;

56 
	}
}

57 
	$wrMemShutdown
(*
pAµD©a
){

58 
wøµed
.
mem
.
	`xShutdown
(wøµed.mem.
pAµD©a
);

59 
wøµed
.
mem_öô
 = 0;

60 
	}
}

61 *
	$wrMemMÆloc
(
n
Ë{ 
wøµed
.
mem
.
	`xMÆloc
“);
	}
}

62 
	$wrMemFªe
(*
p
Ë{
wøµed
.
mem
.
	`xFªe
’);
	}
}

63 *
	$wrMemRóŒoc
(*
p
, 
n
Ë{ 
wøµed
.
mem
.
	`xRóŒoc
’,Ç);
	}
}

64 
	$wrMemSize
(*
p
Ë{ 
wøµed
.
mem
.
	`xSize
’);
	}
}

65 
	$wrMemRoundup
(
n
Ë{ 
wøµed
.
mem
.
	`xRoundup
“);
	}
}

68 
	$wrMuãxInô
(){

69 
rc
;

70 if–
wøµed
.
muãx_Áû
 ){

71 
rc
 = 
SQLITE_ERROR
;

73 
rc
 = 
wøµed
.
muãx
.
	`xMuãxInô
();

75 if–
rc
==
SQLITE_OK
 ){

76 
wøµed
.
muãx_öô
 = 1;

78  
rc
;

79 
	}
}

80 
	$wrMuãxEnd
(){

81 
wøµed
.
muãx
.
	`xMuãxEnd
();

82 
wøµed
.
muãx_öô
 = 0;

83  
SQLITE_OK
;

84 
	}
}

85 
sqlôe3_muãx
 *
	$wrMuãxAŒoc
(
e
){

86  
wøµed
.
muãx
.
	`xMuãxAŒoc
(
e
);

87 
	}
}

88 
	$wrMuãxFªe
(
sqlôe3_muãx
 *
p
){

89 
wøµed
.
muãx
.
	`xMuãxFªe
(
p
);

90 
	}
}

91 
	$wrMuãxE¡î
(
sqlôe3_muãx
 *
p
){

92 
wøµed
.
muãx
.
	`xMuãxE¡î
(
p
);

93 
	}
}

94 
	$wrMuãxTry
(
sqlôe3_muãx
 *
p
){

95  
wøµed
.
muãx
.
	`xMuãxTry
(
p
);

96 
	}
}

97 
	$wrMuãxLóve
(
sqlôe3_muãx
 *
p
){

98 
wøµed
.
muãx
.
	`xMuãxLóve
(
p
);

99 
	}
}

100 
	$wrMuãxHñd
(
sqlôe3_muãx
 *
p
){

101  
wøµed
.
muãx
.
	`xMuãxHñd
(
p
);

102 
	}
}

103 
	$wrMuãxNŸhñd
(
sqlôe3_muãx
 *
p
){

104  
wøµed
.
muãx
.
	`xMuãxNŸhñd
(
p
);

105 
	}
}

109 
	$wrPCacheInô
(*
pArg
){

110 
rc
;

111 if–
wøµed
.
pˇche_Áû
 ){

112 
rc
 = 
SQLITE_ERROR
;

114 
rc
 = 
wøµed
.
pˇche
.
	`xInô
(wøµed.pˇche.
pArg
);

116 if–
rc
==
SQLITE_OK
 ){

117 
wøµed
.
pˇche_öô
 = 1;

119  
rc
;

120 
	}
}

121 
	$wrPCacheShutdown
(*
pArg
){

122 
wøµed
.
pˇche
.
	`xShutdown
(wøµed.pˇche.
pArg
);

123 
wøµed
.
pˇche_öô
 = 0;

124 
	}
}

126 
sqlôe3_pˇche
 *
	$wrPCacheCª©e
(
a
, 
b
, 
c
){

127  
wøµed
.
pˇche
.
	`xCª©e
(
a
, 
b
, 
c
);

128 
	}
}

129 
	$wrPCacheCachesize
(
sqlôe3_pˇche
 *
p
, 
n
){

130 
wøµed
.
pˇche
.
	`xCachesize
(
p
, 
n
);

131 
	}
}

132 
	$wrPCachePagecou¡
(
sqlôe3_pˇche
 *
p
){

133  
wøµed
.
pˇche
.
	`xPagecou¡
(
p
);

134 
	}
}

135 
sqlôe3_pˇche_∑ge
 *
	$wrPCacheFëch
(
sqlôe3_pˇche
 *
p
, 
a
, 
b
){

136  
wøµed
.
pˇche
.
	`xFëch
(
p
, 
a
, 
b
);

137 
	}
}

138 
	$wrPCacheU≈ö
(
sqlôe3_pˇche
 *
p
, 
sqlôe3_pˇche_∑ge
 *
a
, 
b
){

139 
wøµed
.
pˇche
.
	`xU≈ö
(
p
, 
a
, 
b
);

140 
	}
}

141 
	$wrPCacheRekey
(

142 
sqlôe3_pˇche
 *
p
,

143 
sqlôe3_pˇche_∑ge
 *
a
,

144 
b
,

145 
c


147 
wøµed
.
pˇche
.
	`xRekey
(
p
, 
a
, 
b
, 
c
);

148 
	}
}

149 
	$wrPCacheTrunˇã
(
sqlôe3_pˇche
 *
p
, 
a
){

150 
wøµed
.
pˇche
.
	`xTrunˇã
(
p
, 
a
);

151 
	}
}

152 
	$wrPCacheDe°roy
(
sqlôe3_pˇche
 *
p
){

153 
wøµed
.
pˇche
.
	`xDe°roy
(
p
);

154 
	}
}

156 
	$ö°ÆlInôWøµîs
(){

157 
sqlôe3_muãx_mëhods
 
muãxmëhods
 = {

158 
wrMuãxInô
, 
wrMuãxEnd
, 
wrMuãxAŒoc
,

159 
wrMuãxFªe
, 
wrMuãxE¡î
, 
wrMuãxTry
,

160 
wrMuãxLóve
, 
wrMuãxHñd
, 
wrMuãxNŸhñd


162 
sqlôe3_pˇche_mëhods2
 
pˇchemëhods
 = {

164 
wrPCacheInô
, 
wrPCacheShutdown
, 
wrPCacheCª©e
,

165 
wrPCacheCachesize
, 
wrPCachePagecou¡
, 
wrPCacheFëch
,

166 
wrPCacheU≈ö
, 
wrPCacheRekey
, 
wrPCacheTrunˇã
,

167 
wrPCacheDe°roy


169 
sqlôe3_mem_mëhods
 
memmëhods
 = {

170 
wrMemMÆloc
, 
wrMemFªe
, 
wrMemRóŒoc
,

171 
wrMemSize
, 
wrMemRoundup
, 
wrMemInô
,

172 
wrMemShutdown
,

176 
	`mem£t
(&
wøµed
, 0, (wrapped));

178 
	`sqlôe3_shutdown
();

179 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_GETMUTEX
, &
wøµed
.
muãx
);

180 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_GETMALLOC
, &
wøµed
.
mem
);

181 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_GETPCACHE2
, &
wøµed
.
pˇche
);

182 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_MUTEX
, &
muãxmëhods
);

183 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_MALLOC
, &
memmëhods
);

184 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_PCACHE2
, &
pˇchemëhods
);

185 
	}
}

187 
	$öô_wøµî_ö°Æl
(

188 
Clõ¡D©a
 
˛õ¡D©a
,

189 
T˛_I¡îp
 *
öãΩ
,

190 
objc
,

191 
T˛_Obj
 *
CONST
 
objv
[]

193 
i
;

194 
	`ö°ÆlInôWøµîs
();

195 
i
=1; i<
objc
; i++){

196 *
z
 = 
	`T˛_GëSåög
(
objv
[
i
]);

197 if–
	`°rcmp
(
z
, "mem")==0 ){

198 
wøµed
.
mem_Áû
 = 1;

199 }if–
	`°rcmp
(
z
, "mutex")==0 ){

200 
wøµed
.
muãx_Áû
 = 1;

201 }if–
	`°rcmp
(
z
, "pcache")==0 ){

202 
wøµed
.
pˇche_Áû
 = 1;

204 
	`T˛_AµídResu…
(
öãΩ
, "Unknow¿¨gumít: \"", 
z
, "\"");

205  
TCL_ERROR
;

208  
TCL_OK
;

209 
	}
}

211 
	$öô_wøµî_unö°Æl
(

212 
Clõ¡D©a
 
˛õ¡D©a
,

213 
T˛_I¡îp
 *
öãΩ
,

214 
objc
,

215 
T˛_Obj
 *
CONST
 
objv
[]

217 if–
objc
!=1 ){

218 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

219  
TCL_ERROR
;

222 
	`sqlôe3_shutdown
();

223 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_MUTEX
, &
wøµed
.
muãx
);

224 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_MALLOC
, &
wøµed
.
mem
);

225 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_PCACHE2
, &
wøµed
.
pˇche
);

226  
TCL_OK
;

227 
	}
}

229 
	$öô_wøµî_˛ór
(

230 
Clõ¡D©a
 
˛õ¡D©a
,

231 
T˛_I¡îp
 *
öãΩ
,

232 
objc
,

233 
T˛_Obj
 *
CONST
 
objv
[]

235 if–
objc
!=1 ){

236 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

237  
TCL_ERROR
;

240 
wøµed
.
mem_Áû
 = 0;

241 
wøµed
.
muãx_Áû
 = 0;

242 
wøµed
.
pˇche_Áû
 = 0;

243  
TCL_OK
;

244 
	}
}

246 
	$öô_wøµî_quîy
(

247 
Clõ¡D©a
 
˛õ¡D©a
,

248 
T˛_I¡îp
 *
öãΩ
,

249 
objc
,

250 
T˛_Obj
 *
CONST
 
objv
[]

252 
T˛_Obj
 *
pRë
;

254 if–
objc
!=1 ){

255 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

256  
TCL_ERROR
;

259 
pRë
 = 
	`T˛_NewObj
();

260 if–
wøµed
.
muãx_öô
 ){

261 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`T˛_NewSåögObj
("mutex", -1));

263 if–
wøµed
.
mem_öô
 ){

264 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`T˛_NewSåögObj
("mem", -1));

266 if–
wøµed
.
pˇche_öô
 ){

267 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`T˛_NewSåögObj
("pcache", -1));

270 
	`T˛_SëObjResu…
(
öãΩ
, 
pRë
);

271  
TCL_OK
;

272 
	}
}

274 
	$Sqlôëe°_öô_Inô
(
T˛_I¡îp
 *
öãΩ
){

276 *
zName
;

277 
T˛_ObjCmdProc
 *
xProc
;

278 } 
aObjCmd
[] = {

279 {"öô_wøµî_ö°Æl", 
öô_wøµî_ö°Æl
},

280 {"öô_wøµî_quîy", 
öô_wøµî_quîy
 },

281 {"öô_wøµî_unö°Æl", 
öô_wøµî_unö°Æl
},

282 {"öô_wøµî_˛ór", 
öô_wøµî_˛ór
}

284 
i
;

286 
i
=0; i<(
aObjCmd
)/(aObjCmd[0]); i++){

287 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
aObjCmd
[
i
].
zName
,áObjCmd[i].
xProc
, 0, 0);

290  
TCL_OK
;

291 
	}
}

	@test_intarray.c

17 
	~"ã°_öèºay.h
"

18 
	~<°rög.h
>

19 
	~<as£π.h
>

30 
	ssqlôe3_öèºay
 {

31 
	mn
;

32 
sqlôe3_öt64
 *
	ma
;

33 (*
	mxFªe
)(*);

37 
öèºay_vèb
 
	töèºay_vèb
;

38 
öèºay_curs‹
 
	töèºay_curs‹
;

41 
	söèºay_vèb
 {

42 
sqlôe3_vèb
 
	mba£
;

43 
sqlôe3_öèºay
 *
	mpC⁄ã¡
;

47 
	söèºay_curs‹
 {

48 
sqlôe3_vèb_curs‹
 
	mba£
;

49 
	mi
;

55 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


60 
	$öèºayFªe
(
sqlôe3_öèºay
 *
p
){

61 if–
p
->
xFªe
 ){

62 
p
->
	`xFªe
’->
a
);

64 
	`sqlôe3_‰ì
(
p
);

65 
	}
}

70 
	$öèºayDe°roy
(
sqlôe3_vèb
 *
p
){

71 
öèºay_vèb
 *
pVèb
 = (öèºay_vèb*)
p
;

72 
	`sqlôe3_‰ì
(
pVèb
);

74 
	}
}

79 
	$öèºayCª©e
(

80 
sqlôe3
 *
db
,

81 *
pAux
,

82 
¨gc
,

83 c⁄° *c⁄°*
¨gv
,

84 
sqlôe3_vèb
 **
µVèb
,

85 **
pzEº


87 
rc
 = 
SQLITE_NOMEM
;

88 
öèºay_vèb
 *
pVèb
 = 
	`sqlôe3_mÆloc64
((intarray_vtab));

90 if–
pVèb
 ){

91 
	`mem£t
(
pVèb
, 0, (
öèºay_vèb
));

92 
pVèb
->
pC⁄ã¡
 = (
sqlôe3_öèºay
*)
pAux
;

93 
rc
 = 
	`sqlôe3_de˛¨e_vèb
(
db
, "CREATE TABLE x(value INTEGER PRIMARY KEY)");

95 *
µVèb
 = (
sqlôe3_vèb
 *)
pVèb
;

96  
rc
;

97 
	}
}

102 
	$öèºayO≥n
(
sqlôe3_vèb
 *
pVTab
, 
sqlôe3_vèb_curs‹
 **
µCurs‹
){

103 
rc
 = 
SQLITE_NOMEM
;

104 
öèºay_curs‹
 *
pCur
;

105 
pCur
 = 
	`sqlôe3_mÆloc64
((
öèºay_curs‹
));

106 if–
pCur
 ){

107 
	`mem£t
(
pCur
, 0, (
öèºay_curs‹
));

108 *
µCurs‹
 = (
sqlôe3_vèb_curs‹
 *)
pCur
;

109 
rc
 = 
SQLITE_OK
;

111  
rc
;

112 
	}
}

117 
	$öèºayClo£
(
sqlôe3_vèb_curs‹
 *
cur
){

118 
öèºay_curs‹
 *
pCur
 = (öèºay_curs‹ *)
cur
;

119 
	`sqlôe3_‰ì
(
pCur
);

120  
SQLITE_OK
;

121 
	}
}

126 
	$öèºayCﬁumn
(
sqlôe3_vèb_curs‹
 *
cur
, 
sqlôe3_c⁄ãxt
 *
˘x
, 
i
){

127 
öèºay_curs‹
 *
pCur
 = (öèºay_curs‹*)
cur
;

128 
öèºay_vèb
 *
pVèb
 = (öèºay_vèb*)
cur
->pVtab;

129 if–
pCur
->
i
>=0 &&ÖCur->i<
pVèb
->
pC⁄ã¡
->
n
 ){

130 
	`sqlôe3_ªsu…_öt64
(
˘x
, 
pVèb
->
pC⁄ã¡
->
a
[
pCur
->
i
]);

132  
SQLITE_OK
;

133 
	}
}

138 
	$öèºayRowid
(
sqlôe3_vèb_curs‹
 *
cur
, 
sqlôe_öt64
 *
pRowid
){

139 
öèºay_curs‹
 *
pCur
 = (öèºay_curs‹ *)
cur
;

140 *
pRowid
 = 
pCur
->
i
;

141  
SQLITE_OK
;

142 
	}
}

144 
	$öèºayEof
(
sqlôe3_vèb_curs‹
 *
cur
){

145 
öèºay_curs‹
 *
pCur
 = (öèºay_curs‹ *)
cur
;

146 
öèºay_vèb
 *
pVèb
 = (öèºay_vèb *)
cur
->pVtab;

147  
pCur
->
i
>=
pVèb
->
pC⁄ã¡
->
n
;

148 
	}
}

153 
	$öèºayNext
(
sqlôe3_vèb_curs‹
 *
cur
){

154 
öèºay_curs‹
 *
pCur
 = (öèºay_curs‹ *)
cur
;

155 
pCur
->
i
++;

156  
SQLITE_OK
;

157 
	}
}

162 
	$öèºayFûãr
(

163 
sqlôe3_vèb_curs‹
 *
pVèbCurs‹
,

164 
idxNum
, c⁄° *
idxSå
,

165 
¨gc
, 
sqlôe3_vÆue
 **
¨gv


167 
öèºay_curs‹
 *
pCur
 = (öèºay_curs‹ *)
pVèbCurs‹
;

168 
pCur
->
i
 = 0;

169  
SQLITE_OK
;

170 
	}
}

175 
	$öèºayBe°Index
(
sqlôe3_vèb
 *
èb
, 
sqlôe3_ödex_öfo
 *
pIdxInfo
){

176  
SQLITE_OK
;

177 
	}
}

183 
sqlôe3_moduÀ
 
	göèºayModuÀ
 = {

185 
öèºayCª©e
,

186 
öèºayCª©e
,

187 
öèºayBe°Index
,

188 
öèºayDe°roy
,

189 
öèºayDe°roy
,

190 
öèºayO≥n
,

191 
öèºayClo£
,

192 
öèºayFûãr
,

193 
öèºayNext
,

194 
öèºayEof
,

195 
öèºayCﬁumn
,

196 
öèºayRowid
,

219 
SQLITE_API
 
	$sqlôe3_öèºay_¸óã
(

220 
sqlôe3
 *
db
,

221 c⁄° *
zName
,

222 
sqlôe3_öèºay
 **
µRëu∫


224 
rc
 = 
SQLITE_OK
;

225 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


226 
sqlôe3_öèºay
 *
p
;

228 *
µRëu∫
 = 
p
 = 
	`sqlôe3_mÆloc64
( (*p) );

229 if–
p
==0 ){

230  
SQLITE_NOMEM
;

232 
	`mem£t
(
p
, 0, (*p));

233 
rc
 = 
	`sqlôe3_¸óã_moduÀ_v2
(
db
, 
zName
, &
öèºayModuÀ
, 
p
,

234 ((*)(*))
öèºayFªe
);

235 if–
rc
==
SQLITE_OK
 ){

236 *
zSql
;

237 
zSql
 = 
	`sqlôe3_m¥ötf
("CREATE VIRTUAL TABLEÅemp.%Q USING %Q",

238 
zName
, zName);

239 
rc
 = 
	`sqlôe3_exec
(
db
, 
zSql
, 0, 0, 0);

240 
	`sqlôe3_‰ì
(
zSql
);

243  
rc
;

244 
	}
}

253 
SQLITE_API
 
sqlôe3_öèºay_böd
(

254 
sqlôe3_öèºay
 *
pI¡Aºay
,

255 
nEÀmíts
,

256 
sqlôe3_öt64
 *
aEÀmíts
,

257 (*
xFªe
)(*)

259 if–
pI¡Aºay
->
xFªe
 ){

260 
pI¡Aºay
->
	`xFªe
’I¡Aºay->
a
);

262 
pI¡Aºay
->
n
 = 
nEÀmíts
;

263 
pI¡Aºay
->
a
 = 
aEÀmíts
;

264 
pI¡Aºay
->
xFªe
 = xFree;

265  
SQLITE_OK
;

266 
	}
}

272 #ifde‡
SQLITE_TEST


273 
	~<t˛.h
>

278 
gëDbPoöãr
(
T˛_I¡îp
 *
öãΩ
, c⁄° *
zA
, 
sqlôe3
 **
µDb
);

279 *
sqlôe3Te°TextToPå
(const *);

280 
sqlôe3Te°MakePoöãrSå
(
T˛_I¡îp
*, *
zPå
, *);

281 c⁄° *
sqlôe3EºName
();

289 
	$ã°_öèºay_¸óã
(

290 
Clõ¡D©a
 
˛õ¡D©a
,

291 
T˛_I¡îp
 *
öãΩ
,

292 
objc
,

293 
T˛_Obj
 *
CONST
 
objv
[]

295 
sqlôe3
 *
db
;

296 c⁄° *
zName
;

297 
sqlôe3_öèºay
 *
pAºay
;

298 
rc
 = 
SQLITE_OK
;

299 
zPå
[100];

301 if–
objc
!=3 ){

302 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB");

303  
TCL_ERROR
;

305 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

306 
zName
 = 
	`T˛_GëSåög
(
objv
[2]);

307 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


308 
rc
 = 
	`sqlôe3_öèºay_¸óã
(
db
, 
zName
, &
pAºay
);

310 if–
rc
!=
SQLITE_OK
 ){

311 
	`as£π
–
pAºay
==0 );

312 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), (*)0);

313  
TCL_ERROR
;

315 
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zPå
, 
pAºay
);

316 
	`T˛_AµídResu…
(
öãΩ
, 
zPå
, (*)0);

317  
TCL_OK
;

318 
	}
}

325 
	$ã°_öèºay_böd
(

326 
Clõ¡D©a
 
˛õ¡D©a
,

327 
T˛_I¡îp
 *
öãΩ
,

328 
objc
,

329 
T˛_Obj
 *
CONST
 
objv
[]

331 
sqlôe3_öèºay
 *
pAºay
;

332 
rc
 = 
SQLITE_OK
;

333 
i
, 
n
;

334 
sqlôe3_öt64
 *
a
;

336 if–
objc
<2 ){

337 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "INTARRAY");

338  
TCL_ERROR
;

340 
pAºay
 = (
sqlôe3_öèºay
*)
	`sqlôe3Te°TextToPå
(
	`T˛_GëSåög
(
objv
[1]));

341 
n
 = 
objc
 - 2;

342 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


343 
a
 = 
	`sqlôe3_mÆloc64
–◊[0])*
n
 );

344 if–
a
==0 ){

345 
	`T˛_AµídResu…
(
öãΩ
, "SQLITE_NOMEM", (*)0);

346  
TCL_ERROR
;

348 
i
=0; i<
n
; i++){

349 
T˛_WideI¡
 
x
 = 0;

350 
	`T˛_GëWideI¡FromObj
(0, 
objv
[
i
+2], &
x
);

351 
a
[
i
] = 
x
;

353 
rc
 = 
	`sqlôe3_öèºay_böd
(
pAºay
, 
n
, 
a
, 
sqlôe3_‰ì
);

354 if–
rc
!=
SQLITE_OK
 ){

355 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºName
(
rc
), (*)0);

356  
TCL_ERROR
;

359  
TCL_OK
;

360 
	}
}

365 
	$Sqlôëe°öèºay_Inô
(
T˛_I¡îp
 *
öãΩ
){

367 *
zName
;

368 
T˛_ObjCmdProc
 *
xProc
;

369 *
˛õ¡D©a
;

370 } 
aObjCmd
[] = {

371 { "sqlôe3_öèºay_¸óã", 
ã°_öèºay_¸óã
, 0 },

372 { "sqlôe3_öèºay_böd", 
ã°_öèºay_böd
, 0 },

374 
i
;

375 
i
=0; i<(
aObjCmd
)/(aObjCmd[0]); i++){

376 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
aObjCmd
[
i
].
zName
,

377 
aObjCmd
[
i
].
xProc
,áObjCmd[i].
˛õ¡D©a
, 0);

379  
TCL_OK
;

380 
	}
}

	@test_intarray.h

77 
	~"sqlôe3.h
"

78 #i‚de‡
_INTARRAY_H_


79 
	#_INTARRAY_H_


	)

84 #ifde‡
__˝lu•lus


92 
sqlôe3_öèºay
 
	tsqlôe3_öèºay
;

105 
SQLITE_API
 
sqlôe3_öèºay_¸óã
(

106 
sqlôe3
 *
db
,

107 c⁄° *
zName
,

108 
sqlôe3_öèºay
 **
µRëu∫


118 
SQLITE_API
 
sqlôe3_öèºay_böd
(

119 
sqlôe3_öèºay
 *
pI¡Aºay
,

120 
nEÀmíts
,

121 
sqlôe3_öt64
 *
aEÀmíts
,

122 (*
xFªe
)(*)

125 #ifde‡
__˝lu•lus


	@test_journal.c

96 #i‡
SQLITE_TEST


98 
	~"sqlôe3.h
"

99 
	~"sqlôeI¡.h
"

104 
	#JT_MAX_PATHNAME
 512

	)

109 
	#JT_VFS_NAME
 "jt"

	)

111 
jt_fûe
 
	tjt_fûe
;

112 
	sjt_fûe
 {

113 
sqlôe3_fûe
 
	mba£
;

114 c⁄° *
	mzName
;

115 
	mÊags
;

118 
	meLock
;

119 
u32
 
	mnPage
;

120 
u32
 
	mnPagesize
;

121 
Bôvec
 *
	mpWrôabÀ
;

122 
u32
 *
	maCksum
;

123 
	mnSync
;

126 
sqlôe3_öt64
 
	miMaxOff
;

128 
jt_fûe
 *
	mpNext
;

129 
sqlôe3_fûe
 *
	mpRól
;

135 
jtClo£
(
sqlôe3_fûe
*);

136 
jtRód
(
sqlôe3_fûe
*, *, 
iAmt
, 
sqlôe3_öt64
 
iOf°
);

137 
jtWrôe
(
sqlôe3_fûe
*,c⁄° *,
iAmt
, 
sqlôe3_öt64
 
iOf°
);

138 
jtTrunˇã
(
sqlôe3_fûe
*, 
sqlôe3_öt64
 
size
);

139 
jtSync
(
sqlôe3_fûe
*, 
Êags
);

140 
jtFûeSize
(
sqlôe3_fûe
*, 
sqlôe3_öt64
 *
pSize
);

141 
jtLock
(
sqlôe3_fûe
*, );

142 
jtU∆ock
(
sqlôe3_fûe
*, );

143 
jtCheckRe£rvedLock
(
sqlôe3_fûe
*, *);

144 
jtFûeC⁄åﬁ
(
sqlôe3_fûe
*, 
›
, *
pArg
);

145 
jtSe˘‹Size
(
sqlôe3_fûe
*);

146 
jtDevi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
*);

151 
jtO≥n
(
sqlôe3_vfs
*, c⁄° *, 
sqlôe3_fûe
*, , *);

152 
jtDñëe
(
sqlôe3_vfs
*, c⁄° *
zName
, 
syncDú
);

153 
jtAc˚ss
(
sqlôe3_vfs
*, c⁄° *
zName
, 
Êags
, *);

154 
jtFuŒP©h«me
(
sqlôe3_vfs
*, c⁄° *
zName
, , *
zOut
);

155 *
jtDlO≥n
(
sqlôe3_vfs
*, c⁄° *
zFûíame
);

156 
jtDlEº‹
(
sqlôe3_vfs
*, 
nByã
, *
zEºMsg
);

157 (*
	$jtDlSym
(
sqlôe3_vfs
*,*, c⁄° *
zSymbﬁ
))();

158 
	`jtDlClo£
(
sqlôe3_vfs
*, *);

159 
	`jtR™dom√ss
(
sqlôe3_vfs
*, 
nByã
, *
zOut
);

160 
	`jtSÀï
(
sqlôe3_vfs
*, 
mi¸o£c⁄ds
);

161 
	`jtCuºítTime
(
sqlôe3_vfs
*, *);

162 
	`jtCuºítTimeI¡64
(
sqlôe3_vfs
*, 
sqlôe3_öt64
*);

163 
	`jtGëLa°Eº‹
(
sqlôe3_vfs
*, , *);

165 
sqlôe3_vfs
 
jt_vfs
 = {

167 (
jt_fûe
),

168 
JT_MAX_PATHNAME
,

170 
JT_VFS_NAME
,

172 
jtO≥n
,

173 
jtDñëe
,

174 
jtAc˚ss
,

175 
jtFuŒP©h«me
,

176 
jtDlO≥n
,

177 
jtDlEº‹
,

178 
jtDlSym
,

179 
jtDlClo£
,

180 
jtR™dom√ss
,

181 
jtSÀï
,

182 
jtCuºítTime
,

183 
jtGëLa°Eº‹
,

184 
jtCuºítTimeI¡64


185 
	}
};

187 
sqlôe3_io_mëhods
 
	gjt_io_mëhods
 = {

189 
jtClo£
,

190 
jtRód
,

191 
jtWrôe
,

192 
jtTrunˇã
,

193 
jtSync
,

194 
jtFûeSize
,

195 
jtLock
,

196 
jtU∆ock
,

197 
jtCheckRe£rvedLock
,

198 
jtFûeC⁄åﬁ
,

199 
jtSe˘‹Size
,

200 
jtDevi˚Ch¨a˘îi°ics


203 
	sJtGlobÆ
 {

204 
sqlôe3_vfs
 *
	mpVfs
;

205 
jt_fûe
 *
	mpLi°
;

207 
JtGlobÆ
 
	gg
 = {0, 0};

213 
	$íãrJtMuãx
(){

214 
	`sqlôe3_muãx_íãr
(
	`sqlôe3_muãx_Æloc
(
SQLITE_MUTEX_STATIC_PRNG
));

215 
	}
}

216 
	$ÀaveJtMuãx
(){

217 
	`sqlôe3_muãx_Àave
(
	`sqlôe3_muãx_Æloc
(
SQLITE_MUTEX_STATIC_PRNG
));

218 
	}
}

220 
sqlôe3_io_îr‹_≥ndög
;

221 
sqlôe3_io_îr‹_hô
;

222 
	$°›_i€º_simuœti⁄
(*
piSave
, *
piSave2
){

223 *
piSave
 = 
sqlôe3_io_îr‹_≥ndög
;

224 *
piSave2
 = 
sqlôe3_io_îr‹_hô
;

225 
sqlôe3_io_îr‹_≥ndög
 = -1;

226 
sqlôe3_io_îr‹_hô
 = 0;

227 
	}
}

228 
	$°¨t_i€º_simuœti⁄
(
iSave
, 
iSave2
){

229 
sqlôe3_io_îr‹_≥ndög
 = 
iSave
;

230 
sqlôe3_io_îr‹_hô
 = 
iSave2
;

231 
	}
}

238 
	$˛o£Tønß˘i⁄
(
jt_fûe
 *
p
){

239 
	`sqlôe3BôvecDe°roy
(
p
->
pWrôabÀ
);

240 
	`sqlôe3_‰ì
(
p
->
aCksum
);

241 
p
->
pWrôabÀ
 = 0;

242 
p
->
aCksum
 = 0;

243 
p
->
nSync
 = 0;

244 
	}
}

249 
	$jtClo£
(
sqlôe3_fûe
 *
pFûe
){

250 
jt_fûe
 **
µ
;

251 
jt_fûe
 *
p
 = (jt_fûê*)
pFûe
;

253 
	`˛o£Tønß˘i⁄
(
p
);

254 
	`íãrJtMuãx
();

255 if–
p
->
zName
 ){

256 
µ
=&
g
.
pLi°
; *µ!=
p
;Öp=&(*µ)->
pNext
);

257 *
µ
 = 
p
->
pNext
;

259 
	`ÀaveJtMuãx
();

260 
	`sqlôe3OsClo£
(
p
->
pRól
);

261  
SQLITE_OK
;

262 
	}
}

267 
	$jtRód
(

268 
sqlôe3_fûe
 *
pFûe
,

269 *
zBuf
,

270 
iAmt
,

271 
sqlôe_öt64
 
iOf°


273 
jt_fûe
 *
p
 = (jt_fûê*)
pFûe
;

274  
	`sqlôe3OsRód
(
p
->
pRól
, 
zBuf
, 
iAmt
, 
iOf°
);

275 
	}
}

292 
jt_fûe
 *
	$loˇãD©aba£H™dÀ
(c⁄° *
zJou∫Æ
, 
noLock
){

293 
jt_fûe
 *
pMaö
 = 0;

294 
	`íãrJtMuãx
();

295 
pMaö
=
g
.
pLi°
;ÖMaö;ÖMaöıMaö->
pNext
){

296 
nName
 = ()(
	`°æí
(
zJou∫Æ
) - strlen("-journal"));

297 if–(
pMaö
->
Êags
&
SQLITE_OPEN_MAIN_DB
)

298 && (()
	`°æí
(
pMaö
->
zName
)==
nName
)

299 && 0==
	`memcmp
(
pMaö
->
zName
, 
zJou∫Æ
, 
nName
)

300 && ((
pMaö
->
eLock
>=
SQLITE_LOCK_RESERVED
Ë|| 
noLock
)

305 
	`ÀaveJtMuãx
();

306  
pMaö
;

307 
	}
}

314 
u32
 
	$decodeUöt32
(c⁄° *
z
){

315  (
z
[0]<<24) + (z[1]<<16) + (z[2]<<8) + z[3];

316 
	}
}

322 
u32
 
	$gíCksum
(c⁄° *
z
, 
n
){

323 
i
;

324 
u32
 
cksum
 = 0;

325 
i
=0; i<
n
; i++){

326 
cksum
 = cksum + 
z
[
i
] + (cksum<<3);

328  
cksum
;

329 
	}
}

340 
	$decodeJou∫ÆHdr
(

341 c⁄° *
zBuf
,

342 
u32
 *
≤Rec
,

343 
u32
 *
≤Page
,

344 
u32
 *
≤Se˘‹
,

345 
u32
 *
≤Pagesize


347 
aMagic
[] = { 0xd9, 0xd5, 0x05, 0xf9, 0x20, 0xa1, 0x63, 0xd7 };

348 if–
	`memcmp
(
aMagic
, 
zBuf
, 8ËË 
SQLITE_ERROR
;

349 if–
≤Rec
 ) *≤Re¯
	`decodeUöt32
(&
zBuf
[8]);

350 if–
≤Page
 ) *≤Pagê
	`decodeUöt32
(&
zBuf
[16]);

351 if–
≤Se˘‹
 ) *≤Se˘‹ = 
	`decodeUöt32
(&
zBuf
[20]);

352 if–
≤Pagesize
 ) *≤Pagesizê
	`decodeUöt32
(&
zBuf
[24]);

353  
SQLITE_OK
;

354 
	}
}

360 
	$›íTønß˘i⁄
(
jt_fûe
 *
pMaö
, jt_fûê*
pJou∫Æ
){

361 *
aD©a
;

362 
sqlôe3_fûe
 *
p
 = 
pMaö
->
pRól
;

363 
rc
 = 
SQLITE_OK
;

365 
	`˛o£Tønß˘i⁄
(
pMaö
);

366 
aD©a
 = 
	`sqlôe3_mÆloc
(
pMaö
->
nPagesize
);

367 
pMaö
->
pWrôabÀ
 = 
	`sqlôe3BôvecCª©e
’Maö->
nPage
);

368 
pMaö
->
aCksum
 = 
	`sqlôe3_mÆloc
((
u32
Ë* (pMaö->
nPage
 + 1));

369 
pJou∫Æ
->
iMaxOff
 = 0;

371 if–!
pMaö
->
pWrôabÀ
 || !pMaö->
aCksum
 || !
aD©a
 ){

372 
rc
 = 
SQLITE_IOERR_NOMEM
;

373 }if–
pMaö
->
nPage
>0 ){

374 
u32
 
iTrunk
;

375 
iSave
;

376 
iSave2
;

378 
	`°›_i€º_simuœti⁄
(&
iSave
, &
iSave2
);

383 
rc
 = 
	`sqlôe3OsRód
(
p
, 
aD©a
, 
pMaö
->
nPagesize
, 0);

384 if–
rc
==
SQLITE_OK
 ){

385 
u32
 
nDbsize
 = 
	`decodeUöt32
(&
aD©a
[28]);

386 if–
nDbsize
>0 && 
	`memcmp
(&
aD©a
[24], &aData[92], 4)==0 ){

387 
u32
 
iPg
;

388 
iPg
=
nDbsize
+1; iPg<=
pMaö
->
nPage
; iPg++){

389 
	`sqlôe3BôvecSë
(
pMaö
->
pWrôabÀ
, 
iPg
);

393 
iTrunk
 = 
	`decodeUöt32
(&
aD©a
[32]);

394  
rc
==
SQLITE_OK
 && 
iTrunk
>0 ){

395 
u32
 
nLóf
;

396 
u32
 
iLóf
;

397 
sqlôe3_öt64
 
iOff
 = (
i64
)(
iTrunk
-1)*
pMaö
->
nPagesize
;

398 
rc
 = 
	`sqlôe3OsRód
(
p
, 
aD©a
, 
pMaö
->
nPagesize
, 
iOff
);

399 
nLóf
 = 
	`decodeUöt32
(&
aD©a
[4]);

400 
iLóf
=0; 
rc
==
SQLITE_OK
 && iLóf<
nLóf
; iLeaf++){

401 
u32
 
pgno
 = 
	`decodeUöt32
(&
aD©a
[8+4*
iLóf
]);

402 
	`sqlôe3BôvecSë
(
pMaö
->
pWrôabÀ
, 
pgno
);

404 
iTrunk
 = 
	`decodeUöt32
(
aD©a
);

408 if–
rc
==
SQLITE_OK
 ){

409 
ii
;

410 
ii
=0; 
rc
==
SQLITE_OK
 && ii<()
pMaö
->
nPage
; ii++){

411 
i64
 
iOff
 = (i64)(
pMaö
->
nPagesize
Ë* (i64)
ii
;

412 if–
iOff
==
PENDING_BYTE
 ) ;

413 
rc
 = 
	`sqlôe3OsRód
(
pMaö
->
pRól
, 
aD©a
,ÖMaö->
nPagesize
, 
iOff
);

414 
pMaö
->
aCksum
[
ii
] = 
	`gíCksum
(
aD©a
,ÖMaö->
nPagesize
);

415 if–
ii
+1==()
pMaö
->
nPage
 && 
rc
==
SQLITE_IOERR_SHORT_READ
 ){

416 
rc
 = 
SQLITE_OK
;

421 
	`°¨t_i€º_simuœti⁄
(
iSave
, 
iSave2
);

424 
	`sqlôe3_‰ì
(
aD©a
);

425  
rc
;

426 
	}
}

433 
	$ªadJou∫ÆFûe
(
jt_fûe
 *
p
, jt_fûê*
pMaö
){

434 
rc
 = 
SQLITE_OK
;

435 
zBuf
[28];

436 
sqlôe3_fûe
 *
pRól
 = 
p
->pReal;

437 
sqlôe3_öt64
 
iOff
 = 0;

438 
sqlôe3_öt64
 
iSize
 = 
p
->
iMaxOff
;

439 *
aPage
;

440 
iSave
;

441 
iSave2
;

443 
aPage
 = 
	`sqlôe3_mÆloc
(
pMaö
->
nPagesize
);

444 if–!
aPage
 ){

445  
SQLITE_IOERR_NOMEM
;

448 
	`°›_i€º_simuœti⁄
(&
iSave
, &
iSave2
);

450  
rc
==
SQLITE_OK
 && 
iOff
<
iSize
 ){

451 
u32
 
nRec
, 
nPage
, 
nSe˘‹
, 
nPagesize
;

452 
u32
 
ii
;

455 
rc
 = 
	`sqlôe3OsRód
(
pRól
, 
zBuf
, 28, 
iOff
);

456 if–
rc
!=
SQLITE_OK


457 || 
	`decodeJou∫ÆHdr
(
zBuf
, &
nRec
, &
nPage
, &
nSe˘‹
, &
nPagesize
)

459 
föish_rjf
;

461 
iOff
 +
nSe˘‹
;

463 if–
nRec
==0 ){

468 if–
iSize
>=(
iOff
+
nSe˘‹
) ){

469 
rc
 = 
	`sqlôe3OsRód
(
pRól
, 
zBuf
, 28, 
iOff
);

470 if–
rc
!=
SQLITE_OK
 || 0==
	`decodeJou∫ÆHdr
(
zBuf
, 0, 0, 0, 0) ){

474 
nRec
 = (
u32
)((
iSize
-
iOff
Ë/ (
pMaö
->
nPagesize
+8));

478 
ii
=0; 
rc
==
SQLITE_OK
 && ii<
nRec
 && 
iOff
<
iSize
; ii++){

479 
u32
 
pgno
;

480 
rc
 = 
	`sqlôe3OsRód
(
pRól
, 
zBuf
, 4, 
iOff
);

481 if–
rc
==
SQLITE_OK
 ){

482 
pgno
 = 
	`decodeUöt32
(
zBuf
);

483 if–
pgno
>0 &&Ögno<=
pMaö
->
nPage
 ){

484 if–0==
	`sqlôe3BôvecTe°
(
pMaö
->
pWrôabÀ
, 
pgno
) ){

485 
rc
 = 
	`sqlôe3OsRód
(
pRól
, 
aPage
, 
pMaö
->
nPagesize
, 
iOff
+4);

486 if–
rc
==
SQLITE_OK
 ){

487 
u32
 
cksum
 = 
	`gíCksum
(
aPage
, 
pMaö
->
nPagesize
);

488 
	`as£π
–
cksum
==
pMaö
->
aCksum
[
pgno
-1] );

491 
	`sqlôe3BôvecSë
(
pMaö
->
pWrôabÀ
, 
pgno
);

493 
iOff
 +(8 + 
pMaö
->
nPagesize
);

497 
iOff
 = ((iOf‡+ (
nSe˘‹
-1)) /ÇSector) *ÇSector;

500 
föish_rjf
:

501 
	`°¨t_i€º_simuœti⁄
(
iSave
, 
iSave2
);

502 
	`sqlôe3_‰ì
(
aPage
);

503 if–
rc
==
SQLITE_IOERR_SHORT_READ
 ){

504 
rc
 = 
SQLITE_OK
;

506  
rc
;

507 
	}
}

512 
	$jtWrôe
(

513 
sqlôe3_fûe
 *
pFûe
,

514 c⁄° *
zBuf
,

515 
iAmt
,

516 
sqlôe_öt64
 
iOf°


518 
rc
;

519 
jt_fûe
 *
p
 = (jt_fûê*)
pFûe
;

520 if–
p
->
Êags
&
SQLITE_OPEN_MAIN_JOURNAL
 ){

521 if–
iOf°
==0 ){

522 
jt_fûe
 *
pMaö
 = 
	`loˇãD©aba£H™dÀ
(
p
->
zName
, 0);

523 
	`as£π
–
pMaö
 );

525 if–
iAmt
==28 ){

528 
	`˛o£Tønß˘i⁄
(
pMaö
);

529 }if–
iAmt
!=12 ){

532 
u8
 *
z
 = (u8 *)
zBuf
;

533 
pMaö
->
nPage
 = 
	`decodeUöt32
(&
z
[16]);

534 
pMaö
->
nPagesize
 = 
	`decodeUöt32
(&
z
[24]);

535 if–
SQLITE_OK
!=(
rc
=
	`›íTønß˘i⁄
(
pMaö
, 
p
)) ){

536  
rc
;

540 if–
p
->
iMaxOff
<(
iOf°
 + 
iAmt
) ){

541 
p
->
iMaxOff
 = 
iOf°
 + 
iAmt
;

545 if–
p
->
Êags
&
SQLITE_OPEN_MAIN_DB
 &&Ö->
pWrôabÀ
 ){

546 if–
iAmt
<()
p
->
nPagesize


547 && 
p
->
nPagesize
%
iAmt
==0

548 && 
iOf°
>=(
PENDING_BYTE
+512)

549 && 
iOf°
+
iAmt
<=
PENDING_BYTE
+
p
->
nPagesize


557 
u32
 
pgno
 = (u32)(
iOf°
/
p
->
nPagesize
 + 1);

558 
	`as£π
–(
iAmt
==1||iAmt==()
p
->
nPagesize
) &&

559 ((
iOf°
+
iAmt
)%
p
->
nPagesize
)==0 );

560 
	`as£π
–
pgno
<=
p
->
nPage
 ||Ö->
nSync
>0 );

561 
	`as£π
–
pgno
>
p
->
nPage
 || 
	`sqlôe3BôvecTe°
’->
pWrôabÀ
,Ögno) );

565 
rc
 = 
	`sqlôe3OsWrôe
(
p
->
pRól
, 
zBuf
, 
iAmt
, 
iOf°
);

566 if–(
p
->
Êags
&
SQLITE_OPEN_MAIN_JOURNAL
Ë&& 
iAmt
==12 ){

567 
jt_fûe
 *
pMaö
 = 
	`loˇãD©aba£H™dÀ
(
p
->
zName
, 0);

568 
rc2
 = 
	`ªadJou∫ÆFûe
(
p
, 
pMaö
);

569 if–
rc
==
SQLITE_OK
 )Ñ¯
rc2
;

571  
rc
;

572 
	}
}

577 
	$jtTrunˇã
(
sqlôe3_fûe
 *
pFûe
, 
sqlôe_öt64
 
size
){

578 
jt_fûe
 *
p
 = (jt_fûê*)
pFûe
;

579 if–
p
->
Êags
&
SQLITE_OPEN_MAIN_JOURNAL
 && 
size
==0 ){

581 
jt_fûe
 *
pMaö
 = 
	`loˇãD©aba£H™dÀ
(
p
->
zName
, 0);

582 
	`˛o£Tønß˘i⁄
(
pMaö
);

584 if–
p
->
Êags
&
SQLITE_OPEN_MAIN_DB
 &&Ö->
pWrôabÀ
 ){

585 
u32
 
pgno
;

586 
u32
 
lockög_∑ge
 = (u32)(
PENDING_BYTE
/
p
->
nPagesize
+1);

587 
pgno
=(
u32
)(
size
/
p
->
nPagesize
+1);Ögno<ı->
nPage
;Ögno++){

588 
	`as£π
–
pgno
==
lockög_∑ge
 || 
	`sqlôe3BôvecTe°
(
p
->
pWrôabÀ
,Ögno) );

591  
	`sqlôe3OsTrunˇã
(
p
->
pRól
, 
size
);

592 
	}
}

597 
	$jtSync
(
sqlôe3_fûe
 *
pFûe
, 
Êags
){

598 
jt_fûe
 *
p
 = (jt_fûê*)
pFûe
;

600 if–
p
->
Êags
&
SQLITE_OPEN_MAIN_JOURNAL
 ){

601 
rc
;

602 
jt_fûe
 *
pMaö
;

609 
pMaö
 = 
	`loˇãD©aba£H™dÀ
(
p
->
zName
, 0);

612 if–
pMaö
 &&ÖMaö->
pWrôabÀ
 ){

613 
pMaö
->
nSync
++;

614 
rc
 = 
	`ªadJou∫ÆFûe
(
p
, 
pMaö
);

615 if–
rc
!=
SQLITE_OK
 ){

616  
rc
;

621  
	`sqlôe3OsSync
(
p
->
pRól
, 
Êags
);

622 
	}
}

627 
	$jtFûeSize
(
sqlôe3_fûe
 *
pFûe
, 
sqlôe_öt64
 *
pSize
){

628 
jt_fûe
 *
p
 = (jt_fûê*)
pFûe
;

629  
	`sqlôe3OsFûeSize
(
p
->
pRól
, 
pSize
);

630 
	}
}

635 
	$jtLock
(
sqlôe3_fûe
 *
pFûe
, 
eLock
){

636 
rc
;

637 
jt_fûe
 *
p
 = (jt_fûê*)
pFûe
;

638 
rc
 = 
	`sqlôe3OsLock
(
p
->
pRól
, 
eLock
);

639 if–
rc
==
SQLITE_OK
 && 
eLock
>
p
->eLock ){

640 
p
->
eLock
 =ÉLock;

642  
rc
;

643 
	}
}

648 
	$jtU∆ock
(
sqlôe3_fûe
 *
pFûe
, 
eLock
){

649 
rc
;

650 
jt_fûe
 *
p
 = (jt_fûê*)
pFûe
;

651 
rc
 = 
	`sqlôe3OsU∆ock
(
p
->
pRól
, 
eLock
);

652 if–
rc
==
SQLITE_OK
 && 
eLock
<
p
->eLock ){

653 
p
->
eLock
 =ÉLock;

655  
rc
;

656 
	}
}

661 
	$jtCheckRe£rvedLock
(
sqlôe3_fûe
 *
pFûe
, *
pResOut
){

662 
jt_fûe
 *
p
 = (jt_fûê*)
pFûe
;

663  
	`sqlôe3OsCheckRe£rvedLock
(
p
->
pRól
, 
pResOut
);

664 
	}
}

669 
	$jtFûeC⁄åﬁ
(
sqlôe3_fûe
 *
pFûe
, 
›
, *
pArg
){

670 
jt_fûe
 *
p
 = (jt_fûê*)
pFûe
;

671  
p
->
pRól
->
pMëhods
->
	`xFûeC⁄åﬁ
’->pRól, 
›
, 
pArg
);

672 
	}
}

677 
	$jtSe˘‹Size
(
sqlôe3_fûe
 *
pFûe
){

678 
jt_fûe
 *
p
 = (jt_fûê*)
pFûe
;

679  
	`sqlôe3OsSe˘‹Size
(
p
->
pRól
);

680 
	}
}

685 
	$jtDevi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
 *
pFûe
){

686 
jt_fûe
 *
p
 = (jt_fûê*)
pFûe
;

687  
	`sqlôe3OsDevi˚Ch¨a˘îi°ics
(
p
->
pRól
);

688 
	}
}

693 
	$jtO≥n
(

694 
sqlôe3_vfs
 *
pVfs
,

695 c⁄° *
zName
,

696 
sqlôe3_fûe
 *
pFûe
,

697 
Êags
,

698 *
pOutFœgs


700 
rc
;

701 
jt_fûe
 *
p
 = (jt_fûê*)
pFûe
;

702 
pFûe
->
pMëhods
 = 0;

703 
p
->
pRól
 = (
sqlôe3_fûe
 *)&p[1];

704 
p
->
pRól
->
pMëhods
 = 0;

705 
rc
 = 
	`sqlôe3OsO≥n
(
g
.
pVfs
, 
zName
, 
p
->
pRól
, 
Êags
, 
pOutFœgs
);

706 
	`as£π
–
rc
==
SQLITE_OK
 || 
p
->
pRól
->
pMëhods
==0 );

707 if–
rc
==
SQLITE_OK
 ){

708 
pFûe
->
pMëhods
 = &
jt_io_mëhods
;

709 
p
->
eLock
 = 0;

710 
p
->
zName
 = zName;

711 
p
->
Êags
 = flags;

712 
p
->
pNext
 = 0;

713 
p
->
pWrôabÀ
 = 0;

714 
p
->
aCksum
 = 0;

715 
	`íãrJtMuãx
();

716 if–
zName
 ){

717 
p
->
pNext
 = 
g
.
pLi°
;

718 
g
.
pLi°
 = 
p
;

720 
	`ÀaveJtMuãx
();

722  
rc
;

723 
	}
}

730 
	$jtDñëe
(
sqlôe3_vfs
 *
pVfs
, c⁄° *
zP©h
, 
dúSync
){

731 
nP©h
 = ()
	`°æí
(
zP©h
);

732 if–
nP©h
>8 && 0==
	`°rcmp
("-jou∫Æ", &
zP©h
[nPath-8]) ){

734 
jt_fûe
 *
pMaö
 = 
	`loˇãD©aba£H™dÀ
(
zP©h
, 0);

735 if–
pMaö
 ){

736 
	`˛o£Tønß˘i⁄
(
pMaö
);

740  
	`sqlôe3OsDñëe
(
g
.
pVfs
, 
zP©h
, 
dúSync
);

741 
	}
}

747 
	$jtAc˚ss
(

748 
sqlôe3_vfs
 *
pVfs
,

749 c⁄° *
zP©h
,

750 
Êags
,

751 *
pResOut


753  
	`sqlôe3OsAc˚ss
(
g
.
pVfs
, 
zP©h
, 
Êags
, 
pResOut
);

754 
	}
}

761 
	$jtFuŒP©h«me
(

762 
sqlôe3_vfs
 *
pVfs
,

763 c⁄° *
zP©h
,

764 
nOut
,

765 *
zOut


767  
	`sqlôe3OsFuŒP©h«me
(
g
.
pVfs
, 
zP©h
, 
nOut
, 
zOut
);

768 
	}
}

773 *
	$jtDlO≥n
(
sqlôe3_vfs
 *
pVfs
, c⁄° *
zP©h
){

774  
g
.
pVfs
->
	`xDlO≥n
(g.pVfs, 
zP©h
);

775 
	}
}

782 
	$jtDlEº‹
(
sqlôe3_vfs
 *
pVfs
, 
nByã
, *
zEºMsg
){

783 
g
.
pVfs
->
	`xDlEº‹
(g.pVfs, 
nByã
, 
zEºMsg
);

784 
	}
}

789 (*
	$jtDlSym
(
sqlôe3_vfs
 *
pVfs
, *
p
, c⁄° *
zSym
))(){

790  
g
.
pVfs
->
	`xDlSym
(g.pVfs, 
p
, 
zSym
);

791 
	}
}

796 
	$jtDlClo£
(
sqlôe3_vfs
 *
pVfs
, *
pH™dÀ
){

797 
g
.
pVfs
->
	`xDlClo£
(g.pVfs, 
pH™dÀ
);

798 
	}
}

804 
	$jtR™dom√ss
(
sqlôe3_vfs
 *
pVfs
, 
nByã
, *
zBufOut
){

805  
	`sqlôe3OsR™dom√ss
(
g
.
pVfs
, 
nByã
, 
zBufOut
);

806 
	}
}

812 
	$jtSÀï
(
sqlôe3_vfs
 *
pVfs
, 
nMi¸o
){

813  
	`sqlôe3OsSÀï
(
g
.
pVfs
, 
nMi¸o
);

814 
	}
}

819 
	$jtCuºítTime
(
sqlôe3_vfs
 *
pVfs
, *
pTimeOut
){

820  
g
.
pVfs
->
	`xCuºítTime
(g.pVfs, 
pTimeOut
);

821 
	}
}

825 
	$jtCuºítTimeI¡64
(
sqlôe3_vfs
 *
pVfs
, 
sqlôe3_öt64
 *
pTimeOut
){

826  
g
.
pVfs
->
	`xCuºítTimeI¡64
(g.pVfs, 
pTimeOut
);

827 
	}
}

829 
	$jtGëLa°Eº‹
(
sqlôe3_vfs
 *
pVfs
, 
n
, *
z
){

830  
g
.
pVfs
->
	`xGëLa°Eº‹
(g.pVfs, 
n
, 
z
);

831 
	}
}

844 
	$jt_ªgi°î
(*
zWøp
, 
isDeÁu…
){

845 
g
.
pVfs
 = 
	`sqlôe3_vfs_föd
(
zWøp
);

846 if–
g
.
pVfs
==0 ){

847  
SQLITE_ERROR
;

849 
jt_vfs
.
szOsFûe
 = (
jt_fûe
Ë+ 
g
.
pVfs
->szOsFile;

850 if–
g
.
pVfs
->
iVîsi⁄
==1 ){

851 
jt_vfs
.
iVîsi⁄
 = 1;

852 }if–
g
.
pVfs
->
xCuºítTimeI¡64
==0 ){

853 
jt_vfs
.
xCuºítTimeI¡64
 = 0;

855 
	`sqlôe3_vfs_ªgi°î
(&
jt_vfs
, 
isDeÁu…
);

856  
SQLITE_OK
;

857 
	}
}

862 
	$jt_uƒegi°î
(){

863 
	`sqlôe3_vfs_uƒegi°î
(&
jt_vfs
);

864 
	}
}

	@test_loadext.c

14 
	~<°rög.h
>

15 
	~"sqlôe3ext.h
"

16 
SQLITE_EXTENSION_INIT1


21 
	$hÆfFunc
(

22 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

23 
¨gc
,

24 
sqlôe3_vÆue
 **
¨gv


26 
	`sqlôe3_ªsu…_doubÀ
(
c⁄ãxt
, 0.5*
	`sqlôe3_vÆue_doubÀ
(
¨gv
[0]));

27 
	}
}

32 
	$°©usFunc
(

33 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

34 
¨gc
,

35 
sqlôe3_vÆue
 **
¨gv


37 
›
 = 0, 
mx
, 
cur
, 
ª£tFœg
, 
rc
;

38 if–
	`sqlôe3_vÆue_ty≥
(
¨gv
[0])==
SQLITE_INTEGER
 ){

39 
›
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[0]);

40 }if–
	`sqlôe3_vÆue_ty≥
(
¨gv
[0])==
SQLITE_TEXT
 ){

41 
i
;

42 c⁄° *
zName
;

44 c⁄° *
zName
;

45 
›
;

46 } 
aOp
[] = {

47 { "MEMORY_USED", 
SQLITE_STATUS_MEMORY_USED
 },

48 { "PAGECACHE_USED", 
SQLITE_STATUS_PAGECACHE_USED
 },

49 { "PAGECACHE_OVERFLOW", 
SQLITE_STATUS_PAGECACHE_OVERFLOW
 },

50 { "SCRATCH_USED", 
SQLITE_STATUS_SCRATCH_USED
 },

51 { "SCRATCH_OVERFLOW", 
SQLITE_STATUS_SCRATCH_OVERFLOW
 },

52 { "MALLOC_SIZE", 
SQLITE_STATUS_MALLOC_SIZE
 },

54 
nOp
 = (
aOp
)/(aOp[0]);

55 
zName
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

56 
i
=0; i<
nOp
; i++){

57 if–
	`°rcmp
(
aOp
[
i
].
zName
, zName)==0 ){

58 
›
 = 
aOp
[
i
].op;

62 if–
i
>=
nOp
 ){

63 *
zMsg
 = 
	`sqlôe3_m¥ötf
("unknow¿°©u†¥›îty: %s", 
zName
);

64 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, 
zMsg
, -1);

65 
	`sqlôe3_‰ì
(
zMsg
);

69 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, "unknown statusÅype", -1);

72 if–
¨gc
==2 ){

73 
ª£tFœg
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[1]);

75 
ª£tFœg
 = 0;

77 
rc
 = 
	`sqlôe3_°©us
(
›
, &
cur
, &
mx
, 
ª£tFœg
);

78 if–
rc
!=
SQLITE_OK
 ){

79 *
zMsg
 = 
	`sqlôe3_m¥ötf
("sqlôe3_°©us(%d,...Ëªtu∫†%d", 
›
, 
rc
);

80 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, 
zMsg
, -1);

81 
	`sqlôe3_‰ì
(
zMsg
);

84 if–
¨gc
==2 ){

85 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
mx
);

87 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
cur
);

89 
	}
}

94 #ifde‡
_WIN32


95 
	$__de˛•ec
(
dŒexp‹t
)

97 
	$ã°lﬂdext_öô
(

98 
sqlôe3
 *
db
,

99 **
pzEºMsg
,

100 c⁄° 
sqlôe3_≠i_routöes
 *
pApi


102 
nEº
 = 0;

103 
	`SQLITE_EXTENSION_INIT2
(
pApi
);

104 
nEº
 |
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "hÆf", 1, 
SQLITE_ANY
, 0, 
hÆfFunc
, 0, 0);

105 
nEº
 |
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "sqlôe3_°©us", 1, 
SQLITE_ANY
, 0,

106 
°©usFunc
, 0, 0);

107 
nEº
 |
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "sqlôe3_°©us", 2, 
SQLITE_ANY
, 0,

108 
°©usFunc
, 0, 0);

109  
nEº
 ? 
SQLITE_ERROR
 : 
SQLITE_OK
;

110 
	}
}

115 #ifde‡
_WIN32


116 
	$__de˛•ec
(
dŒexp‹t
)

118 
	$ã°brokíext_öô
(

119 
sqlôe3
 *
db
,

120 **
pzEºMsg
,

121 c⁄° 
sqlôe3_≠i_routöes
 *
pApi


123 *
zEº
;

124 
	`SQLITE_EXTENSION_INIT2
(
pApi
);

125 
zEº
 = 
	`sqlôe3_m¥ötf
("broken!");

126 *
pzEºMsg
 = 
zEº
;

128 
	}
}

	@test_malloc.c

16 
	~"sqlôeI¡.h
"

17 
	~"t˛.h
"

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

20 
	~<as£π.h
>

26 
	sMemFau…
 {

27 
	miCou¡down
;

28 
	mnRïót
;

29 
	mnBíign
;

30 
	mnFaû
;

31 
u8
 
	míabÀ
;

32 
	misIn°ÆÀd
;

33 
	misBíignMode
;

34 
sqlôe3_mem_mëhods
 
	mm
;

35 } 
	gmemÁu…
;

41 
	$sqlôe3Fau…
(){

42 
˙t
 = 0;

43 
˙t
++;

44 
	}
}

50 
	$Áu…simSãp
(){

51 if–
	`likñy
(!
memÁu…
.
íabÀ
) ){

54 if–
memÁu…
.
iCou¡down
>0 ){

55 
memÁu…
.
iCou¡down
--;

58 
	`sqlôe3Fau…
();

59 
memÁu…
.
nFaû
++;

60 if–
memÁu…
.
isBíignMode
>0 ){

61 
memÁu…
.
nBíign
++;

63 
memÁu…
.
nRïót
--;

64 if–
memÁu…
.
nRïót
<=0 ){

65 
memÁu…
.
íabÀ
 = 0;

68 
	}
}

74 *
	$Áu…simMÆloc
(
n
){

75 *
p
 = 0;

76 if–!
	`Áu…simSãp
() ){

77 
p
 = 
memÁu…
.
m
.
	`xMÆloc
(
n
);

79  
p
;

80 
	}
}

87 *
	$Áu…simRóŒoc
(*
pOld
, 
n
){

88 *
p
 = 0;

89 if–!
	`Áu…simSãp
() ){

90 
p
 = 
memÁu…
.
m
.
	`xRóŒoc
(
pOld
, 
n
);

92  
p
;

93 
	}
}

105 
	$Áu…simFªe
(*
p
){

106 
memÁu…
.
m
.
	`xFªe
(
p
);

107 
	}
}

108 
	$Áu…simSize
(*
p
){

109  
memÁu…
.
m
.
	`xSize
(
p
);

110 
	}
}

111 
	$Áu…simRoundup
(
n
){

112  
memÁu…
.
m
.
	`xRoundup
(
n
);

113 
	}
}

114 
	$Áu…simInô
(*
p
){

115  
memÁu…
.
m
.
	`xInô
(memÁu….m.
pAµD©a
);

116 
	}
}

117 
	$Áu…simShutdown
(*
p
){

118 
memÁu…
.
m
.
	`xShutdown
(memÁu….m.
pAµD©a
);

119 
	}
}

127 
	$Áu…simC⁄fig
(
nDñay
, 
nRïót
){

128 
memÁu…
.
iCou¡down
 = 
nDñay
;

129 
memÁu…
.
nRïót
 =ÇRepeat;

130 
memÁu…
.
nBíign
 = 0;

131 
memÁu…
.
nFaû
 = 0;

132 
memÁu…
.
íabÀ
 = 
nDñay
>=0;

141 
memÁu…
.
isBíignMode
 = 0;

142 
	}
}

148 
	$Áu…simFaûuªs
(){

149  
memÁu…
.
nFaû
;

150 
	}
}

156 
	$Áu…simBíignFaûuªs
(){

157  
memÁu…
.
nBíign
;

158 
	}
}

164 
	$Áu…simPídög
(){

165 if–
memÁu…
.
íabÀ
 ){

166  
memÁu…
.
iCou¡down
;

170 
	}
}

173 
	$Áu…simBegöBíign
(){

174 
memÁu…
.
isBíignMode
++;

175 
	}
}

176 
	$Áu…simEndBíign
(){

177 
memÁu…
.
isBíignMode
--;

178 
	}
}

184 
	$Áu…simIn°Æl
(
ö°Æl
){

185 
sqlôe3_mem_mëhods
 
m
 = {

186 
Áu…simMÆloc
,

187 
Áu…simFªe
,

188 
Áu…simRóŒoc
,

189 
Áu…simSize
,

190 
Áu…simRoundup
,

191 
Áu…simInô
,

192 
Áu…simShutdown
,

195 
rc
;

197 
ö°Æl
 = (install ? 1 : 0);

198 
	`as£π
(
memÁu…
.
isIn°ÆÀd
==1 || memfault.isInstalled==0);

200 if–
ö°Æl
==
memÁu…
.
isIn°ÆÀd
 ){

201  
SQLITE_ERROR
;

204 if–
ö°Æl
 ){

205 
rc
 = 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_GETMALLOC
, &
memÁu…
.
m
);

206 
	`as£π
(
memÁu…
.
m
.
xMÆloc
);

207 if–
rc
==
SQLITE_OK
 ){

208 
rc
 = 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_MALLOC
, &
m
);

210 
	`sqlôe3_ã°_c⁄åﬁ
(
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS
,

211 
Áu…simBegöBíign
, 
Áu…simEndBíign


214 
sqlôe3_mem_mëhods
 
m2
;

215 
	`as£π
(
memÁu…
.
m
.
xMÆloc
);

219 
	`mem£t
(&
m2
, 0, (m2));

220 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_MALLOC
, &
m2
);

221 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_GETMALLOC
, &
m2
);

222 
	`as£π
–
	`memcmp
(&
m2
, &
memÁu…
.
m
, (m2))==0 );

224 
rc
 = 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_MALLOC
, &
memÁu…
.
m
);

225 
	`sqlôe3_ã°_c⁄åﬁ
(
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS
,

229 if–
rc
==
SQLITE_OK
 ){

230 
memÁu…
.
isIn°ÆÀd
 = 1;

232  
rc
;

233 
	}
}

235 #ifde‡
SQLITE_TEST


245 c⁄° *
sqlôe3EºName
();

250 
	$poöãrToText
(*
p
, *
z
){

251 c⁄° 
zHex
[] = "0123456789abcdef";

252 
i
, 
k
;

253 
u
;

254 
sqlôe3_uöt64
 
n
;

255 if–
p
==0 ){

256 
	`°r˝y
(
z
, "0");

259 if–(
n
)==(
p
) ){

260 
	`mem˝y
(&
n
, &
p
, (p));

261 }if–(
u
)==(
p
) ){

262 
	`mem˝y
(&
u
, &
p
, (u));

263 
n
 = 
u
;

265 
	`as£π
( 0 );

267 
i
=0, 
k
=(
p
)*2-1; i<(p)*2; i++, k--){

268 
z
[
k
] = 
zHex
[
n
&0xf];

269 
n
 >>= 4;

271 
z
[(
p
)*2] = 0;

272 
	}
}

273 
	$hexToI¡
(
h
){

274 if–
h
>='0' && h<='9' ){

275  
h
 - '0';

276 }if–
h
>='a' && h<='f' ){

277  
h
 - 'a' + 10;

281 
	}
}

282 
	$ãxtToPoöãr
(c⁄° *
z
, **
µ
){

283 
sqlôe3_uöt64
 
n
 = 0;

284 
i
;

285 
u
;

286 
i
=0; i<(*)*2 && 
z
[0]; i++){

287 
v
;

288 
v
 = 
	`hexToI¡
(*
z
++);

289 if–
v
<0 )  
TCL_ERROR
;

290 
n
 =Ç*16 + 
v
;

292 if–*
z
!=0 )  
TCL_ERROR
;

293 if–(
n
)==(*
µ
) ){

294 
	`mem˝y
(
µ
, &
n
, (n));

295 }if–(
u
)==(*
µ
) ){

296 
u
 = ()
n
;

297 
	`mem˝y
(
µ
, &
u
, (u));

299 
	`as£π
( 0 );

301  
TCL_OK
;

302 
	}
}

309 
	$ã°_mÆloc
(

310 * 
˛õ¡D©a
,

311 
T˛_I¡îp
 *
öãΩ
,

312 
objc
,

313 
T˛_Obj
 *
CONST
 
objv
[]

315 
nByã
;

316 *
p
;

317 
zOut
[100];

318 if–
objc
!=2 ){

319 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "NBYTES");

320  
TCL_ERROR
;

322 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
nByã
ËË 
TCL_ERROR
;

323 
p
 = 
	`sqlôe3_mÆloc
(()
nByã
);

324 
	`poöãrToText
(
p
, 
zOut
);

325 
	`T˛_AµídResu…
(
öãΩ
, 
zOut
, 
NULL
);

326  
TCL_OK
;

327 
	}
}

334 
	$ã°_ªÆloc
(

335 * 
˛õ¡D©a
,

336 
T˛_I¡îp
 *
öãΩ
,

337 
objc
,

338 
T˛_Obj
 *
CONST
 
objv
[]

340 
nByã
;

341 *
pPri‹
, *
p
;

342 
zOut
[100];

343 if–
objc
!=3 ){

344 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "PRIOR NBYTES");

345  
TCL_ERROR
;

347 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
nByã
ËË 
TCL_ERROR
;

348 if–
	`ãxtToPoöãr
(
	`T˛_GëSåög
(
objv
[1]), &
pPri‹
) ){

349 
	`T˛_AµídResu…
(
öãΩ
, "badÖoöãr: ", 
	`T˛_GëSåög
(
objv
[1]), (*)0);

350  
TCL_ERROR
;

352 
p
 = 
	`sqlôe3_ªÆloc
(
pPri‹
, ()
nByã
);

353 
	`poöãrToText
(
p
, 
zOut
);

354 
	`T˛_AµídResu…
(
öãΩ
, 
zOut
, 
NULL
);

355  
TCL_OK
;

356 
	}
}

363 
	$ã°_‰ì
(

364 * 
˛õ¡D©a
,

365 
T˛_I¡îp
 *
öãΩ
,

366 
objc
,

367 
T˛_Obj
 *
CONST
 
objv
[]

369 *
pPri‹
;

370 if–
objc
!=2 ){

371 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "PRIOR");

372  
TCL_ERROR
;

374 if–
	`ãxtToPoöãr
(
	`T˛_GëSåög
(
objv
[1]), &
pPri‹
) ){

375 
	`T˛_AµídResu…
(
öãΩ
, "badÖoöãr: ", 
	`T˛_GëSåög
(
objv
[1]), (*)0);

376  
TCL_ERROR
;

378 
	`sqlôe3_‰ì
(
pPri‹
);

379  
TCL_OK
;

380 
	}
}

385 
sqlôe3Te°HexToBö
(const *, , *);

386 
sqlôe3Te°BöToHex
(*,);

394 
	$ã°_mem£t
(

395 * 
˛õ¡D©a
,

396 
T˛_I¡îp
 *
öãΩ
,

397 
objc
,

398 
T˛_Obj
 *
CONST
 
objv
[]

400 *
p
;

401 
size
, 
n
, 
i
;

402 *
zHex
;

403 *
zOut
;

404 
zBö
[100];

406 if–
objc
!=4 ){

407 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "ADDRESS SIZE HEX");

408  
TCL_ERROR
;

410 if–
	`ãxtToPoöãr
(
	`T˛_GëSåög
(
objv
[1]), &
p
) ){

411 
	`T˛_AµídResu…
(
öãΩ
, "badÖoöãr: ", 
	`T˛_GëSåög
(
objv
[1]), (*)0);

412  
TCL_ERROR
;

414 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
size
) ){

415  
TCL_ERROR
;

417 if–
size
<=0 ){

418 
	`T˛_AµídResu…
(
öãΩ
, "size must beÖositive", (*)0);

419  
TCL_ERROR
;

421 
zHex
 = 
	`T˛_GëSåögFromObj
(
objv
[3], &
n
);

422 if–
n
>(
zBö
)*2 )Ç = (zBin)*2;

423 
n
 = 
	`sqlôe3Te°HexToBö
(
zHex
,Ç, 
zBö
);

424 if–
n
==0 ){

425 
	`T˛_AµídResu…
(
öãΩ
, "no data", (*)0);

426  
TCL_ERROR
;

428 
zOut
 = 
p
;

429 
i
=0; i<
size
; i++){

430 
zOut
[
i
] = 
zBö
[i%
n
];

432  
TCL_OK
;

433 
	}
}

440 
	$ã°_memgë
(

441 * 
˛õ¡D©a
,

442 
T˛_I¡îp
 *
öãΩ
,

443 
objc
,

444 
T˛_Obj
 *
CONST
 
objv
[]

446 *
p
;

447 
size
, 
n
;

448 *
zBö
;

449 
zHex
[100];

451 if–
objc
!=3 ){

452 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "ADDRESS SIZE");

453  
TCL_ERROR
;

455 if–
	`ãxtToPoöãr
(
	`T˛_GëSåög
(
objv
[1]), &
p
) ){

456 
	`T˛_AµídResu…
(
öãΩ
, "badÖoöãr: ", 
	`T˛_GëSåög
(
objv
[1]), (*)0);

457  
TCL_ERROR
;

459 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
size
) ){

460  
TCL_ERROR
;

462 if–
size
<=0 ){

463 
	`T˛_AµídResu…
(
öãΩ
, "size must beÖositive", (*)0);

464  
TCL_ERROR
;

466 
zBö
 = 
p
;

467  
size
>0 ){

468 if–
size
>((
zHex
)-1)/2 ){

469 
n
 = ((
zHex
)-1)/2;

471 
n
 = 
size
;

473 
	`mem˝y
(
zHex
, 
zBö
, 
n
);

474 
zBö
 +
n
;

475 
size
 -
n
;

476 
	`sqlôe3Te°BöToHex
(
zHex
, 
n
);

477 
	`T˛_AµídResu…
(
öãΩ
, 
zHex
, (*)0);

479  
TCL_OK
;

480 
	}
}

487 
	$ã°_mem‹y_u£d
(

488 * 
˛õ¡D©a
,

489 
T˛_I¡îp
 *
öãΩ
,

490 
objc
,

491 
T˛_Obj
 *
CONST
 
objv
[]

493 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewWideI¡Obj
(
	`sqlôe3_mem‹y_u£d
()));

494  
TCL_OK
;

495 
	}
}

502 
	$ã°_mem‹y_highw©î
(

503 * 
˛õ¡D©a
,

504 
T˛_I¡îp
 *
öãΩ
,

505 
objc
,

506 
T˛_Obj
 *
CONST
 
objv
[]

508 
ª£tFœg
 = 0;

509 if–
objc
!=1 && objc!=2 ){

510 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "?RESET?");

511  
TCL_ERROR
;

513 if–
objc
==2 ){

514 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[1], &
ª£tFœg
ËË 
TCL_ERROR
;

516 
	`T˛_SëObjResu…
(
öãΩ
,

517 
	`T˛_NewWideI¡Obj
(
	`sqlôe3_mem‹y_highw©î
(
ª£tFœg
)));

518  
TCL_OK
;

519 
	}
}

527 
	$ã°_memdebug_backåa˚
(

528 * 
˛õ¡D©a
,

529 
T˛_I¡îp
 *
öãΩ
,

530 
objc
,

531 
T˛_Obj
 *
CONST
 
objv
[]

533 
dïth
;

534 if–
objc
!=2 ){

535 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DEPT");

536  
TCL_ERROR
;

538 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
dïth
ËË 
TCL_ERROR
;

539 #ifde‡
SQLITE_MEMDEBUG


541 
	`sqlôe3MemdebugBackåa˚
();

542 
	`sqlôe3MemdebugBackåa˚
(
dïth
);

545  
TCL_OK
;

546 
	}
}

553 
	$ã°_memdebug_dump
(

554 * 
˛õ¡D©a
,

555 
T˛_I¡îp
 *
öãΩ
,

556 
objc
,

557 
T˛_Obj
 *
CONST
 
objv
[]

559 if–
objc
!=2 ){

560 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "FILENAME");

561  
TCL_ERROR
;

563 #i‡
	`deföed
(
SQLITE_MEMDEBUG
Ë|| deföed(
SQLITE_MEMORY_SIZE
) \

564 || 
	`deföed
(
SQLITE_POW2_MEMORY_SIZE
)

566 
	`sqlôe3MemdebugDump
(const *);

567 
	`sqlôe3MemdebugDump
(
	`T˛_GëSåög
(
objv
[1]));

570  
TCL_OK
;

571 
	}
}

578 
	$ã°_memdebug_mÆloc_cou¡
(

579 * 
˛õ¡D©a
,

580 
T˛_I¡îp
 *
öãΩ
,

581 
objc
,

582 
T˛_Obj
 *
CONST
 
objv
[]

584 
nMÆloc
 = -1;

585 if–
objc
!=1 ){

586 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

587  
TCL_ERROR
;

589 #i‡
	`deföed
(
SQLITE_MEMDEBUG
)

591 
	`sqlôe3MemdebugMÆlocCou¡
();

592 
nMÆloc
 = 
	`sqlôe3MemdebugMÆlocCou¡
();

595 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
nMÆloc
));

596  
TCL_OK
;

597 
	}
}

618 
	$ã°_memdebug_Áû
(

619 * 
˛õ¡D©a
,

620 
T˛_I¡îp
 *
öãΩ
,

621 
objc
,

622 
T˛_Obj
 *
CONST
 
objv
[]

624 
ii
;

625 
iFaû
;

626 
nRïót
 = 1;

627 
T˛_Obj
 *
pBíignC¡
 = 0;

628 
nBíign
;

629 
nFaû
 = 0;

631 if–
objc
<2 ){

632 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "COUNTER ?OPTIONS?");

633  
TCL_ERROR
;

635 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
iFaû
ËË 
TCL_ERROR
;

637 
ii
=2; ii<
objc
; ii+=2){

638 
nO±i⁄
;

639 *
zO±i⁄
 = 
	`T˛_GëSåögFromObj
(
objv
[
ii
], &
nO±i⁄
);

640 *
zEº
 = 0;

642 if–
nO±i⁄
>1 && 
	`°∫cmp
(
zO±i⁄
, "-repeat",ÇOption)==0 ){

643 if–
ii
==(
objc
-1) ){

644 
zEº
 = "optionÑequiresánárgument: ";

646 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[
ii
+1], &
nRïót
) ){

647  
TCL_ERROR
;

650 }if–
nO±i⁄
>1 && 
	`°∫cmp
(
zO±i⁄
, "-benigncnt",ÇOption)==0 ){

651 if–
ii
==(
objc
-1) ){

652 
zEº
 = "optionÑequiresánárgument: ";

654 
pBíignC¡
 = 
objv
[
ii
+1];

657 
zEº
 = "unknown option: ";

660 if–
zEº
 ){

661 
	`T˛_AµídResu…
(
öãΩ
, 
zEº
, 
zO±i⁄
, 0);

662  
TCL_ERROR
;

666 
nBíign
 = 
	`Áu…simBíignFaûuªs
();

667 
nFaû
 = 
	`Áu…simFaûuªs
();

668 
	`Áu…simC⁄fig
(
iFaû
, 
nRïót
);

670 if–
pBíignC¡
 ){

671 
	`T˛_ObjSëV¨2
(
öãΩ
, 
pBíignC¡
, 0, 
	`T˛_NewI¡Obj
(
nBíign
), 0);

673 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
nFaû
));

674  
TCL_OK
;

675 
	}
}

684 
	$ã°_memdebug_≥ndög
(

685 * 
˛õ¡D©a
,

686 
T˛_I¡îp
 *
öãΩ
,

687 
objc
,

688 
T˛_Obj
 *
CONST
 
objv
[]

690 
nPídög
;

691 if–
objc
!=1 ){

692 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

693  
TCL_ERROR
;

695 
nPídög
 = 
	`Áu…simPídög
();

696 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
nPídög
));

697  
TCL_OK
;

698 
	}
}

705 
	gsqlôe3_memdebug_tôÀ_cou¡
 = 0;

717 
	$ã°_memdebug_£âôÀ
(

718 * 
˛õ¡D©a
,

719 
T˛_I¡îp
 *
öãΩ
,

720 
objc
,

721 
T˛_Obj
 *
CONST
 
objv
[]

723 
sqlôe3_memdebug_tôÀ_cou¡
++;

724 if–
objc
!=2 ){

725 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "TITLE");

726  
TCL_ERROR
;

728 #ifde‡
SQLITE_MEMDEBUG


730 c⁄° *
zTôÀ
;

731 
	`sqlôe3MemdebugSëtôÀ
(const *);

732 
zTôÀ
 = 
	`T˛_GëSåög
(
objv
[1]);

733 
	`sqlôe3MemdebugSëtôÀ
(
zTôÀ
);

736  
TCL_OK
;

737 
	}
}

739 
	#MALLOC_LOG_FRAMES
 10

	)

740 
	#MALLOC_LOG_KEYINTS
 ( \

742 )

	)

743 
T˛_HashTabÀ
 
	gaMÆlocLog
;

744 
	gmÆlocLogE«bÀd
 = 0;

746 
MÆlocLog
 
	tMÆlocLog
;

747 
	sMÆlocLog
 {

748 
	mnCÆl
;

749 
	mnByã
;

752 #ifde‡
SQLITE_MEMDEBUG


753 
	$ã°_memdebug_ˇŒback
(
nByã
, 
nFøme
, **
aFøme
){

754 if–
mÆlocLogE«bÀd
 ){

755 
MÆlocLog
 *
pLog
;

756 
T˛_HashE¡ry
 *
pE¡ry
;

757 
isNew
;

759 
aKey
[
MALLOC_LOG_KEYINTS
];

760 
nKey
 = ()*
MALLOC_LOG_KEYINTS
;

762 
	`mem£t
(
aKey
, 0, 
nKey
);

763 if–((*)*
nFøme
)<
nKey
 ){

764 
nKey
 = 
nFøme
*(*);

766 
	`mem˝y
(
aKey
, 
aFøme
, 
nKey
);

768 
pE¡ry
 = 
	`T˛_Cª©eHashE¡ry
(&
aMÆlocLog
, (c⁄° *)
aKey
, &
isNew
);

769 if–
isNew
 ){

770 
pLog
 = (
MÆlocLog
 *)
	`T˛_AŒoc
((MallocLog));

771 
	`mem£t
(
pLog
, 0, (
MÆlocLog
));

772 
	`T˛_SëHashVÆue
(
pE¡ry
, (
Clõ¡D©a
)
pLog
);

774 
pLog
 = (
MÆlocLog
 *)
	`T˛_GëHashVÆue
(
pE¡ry
);

777 
pLog
->
nCÆl
++;

778 
pLog
->
nByã
 +=ÇByte;

780 
	}
}

783 
	$ã°_memdebug_log_˛ór
(){

784 
T˛_HashSórch
 
£¨ch
;

785 
T˛_HashE¡ry
 *
pE¡ry
;

787 
pE¡ry
=
	`T˛_Fú°HashE¡ry
(&
aMÆlocLog
, &
£¨ch
);

788 
pE¡ry
;

789 
pE¡ry
=
	`T˛_NextHashE¡ry
(&
£¨ch
)

791 
MÆlocLog
 *
pLog
 = (MÆlocLog *)
	`T˛_GëHashVÆue
(
pE¡ry
);

792 
	`T˛_Fªe
((*)
pLog
);

794 
	`T˛_DñëeHashTabÀ
(&
aMÆlocLog
);

795 
	`T˛_InôHashTabÀ
(&
aMÆlocLog
, 
MALLOC_LOG_KEYINTS
);

796 
	}
}

798 
	$ã°_memdebug_log
(

799 * 
˛õ¡D©a
,

800 
T˛_I¡îp
 *
öãΩ
,

801 
objc
,

802 
T˛_Obj
 *
CONST
 
objv
[]

804 
isInô
 = 0;

805 
iSub
;

807 c⁄° *
MB_°rs
[] = { "start", "stop", "dump", "clear", "sync" };

808 
	eMB_íum
 {

809 
MB_LOG_START
, 
MB_LOG_STOP
, 
MB_LOG_DUMP
, 
MB_LOG_CLEAR
, 
MB_LOG_SYNC


812 if–!
isInô
 ){

813 #ifde‡
SQLITE_MEMDEBUG


814 
	`sqlôe3MemdebugBackåa˚CÆlback
(

815 (*
xBackåa˚
)(, , **));

816 
	`sqlôe3MemdebugBackåa˚CÆlback
(
ã°_memdebug_ˇŒback
);

818 
	`T˛_InôHashTabÀ
(&
aMÆlocLog
, 
MALLOC_LOG_KEYINTS
);

819 
isInô
 = 1;

822 if–
objc
<2 ){

823 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "SUB-COMMAND ...");

825 if–
	`T˛_GëIndexFromObj
(
öãΩ
, 
objv
[1], 
MB_°rs
, "sub-comm™d", 0, &
iSub
) ){

826  
TCL_ERROR
;

829  (
MB_íum
)
iSub
 ){

830 
MB_LOG_START
:

831 
mÆlocLogE«bÀd
 = 1;

833 
MB_LOG_STOP
:

834 
mÆlocLogE«bÀd
 = 0;

836 
MB_LOG_DUMP
: {

837 
T˛_HashSórch
 
£¨ch
;

838 
T˛_HashE¡ry
 *
pE¡ry
;

839 
T˛_Obj
 *
pRë
 = 
	`T˛_NewObj
();

841 
	`as£π
((
T˛_WideI¡
)>=(*));

844 
pE¡ry
=
	`T˛_Fú°HashE¡ry
(&
aMÆlocLog
, &
£¨ch
);

845 
pE¡ry
;

846 
pE¡ry
=
	`T˛_NextHashE¡ry
(&
£¨ch
)

848 
T˛_Obj
 *
≠EÀm
[
MALLOC_LOG_FRAMES
+2];

849 
MÆlocLog
 *
pLog
 = (MÆlocLog *)
	`T˛_GëHashVÆue
(
pE¡ry
);

850 
T˛_WideI¡
 *
aKey
 = (T˛_WideI¡ *)
	`T˛_GëHashKey
(&
aMÆlocLog
, 
pE¡ry
);

851 
ii
;

853 
≠EÀm
[0] = 
	`T˛_NewI¡Obj
(
pLog
->
nCÆl
);

854 
≠EÀm
[1] = 
	`T˛_NewI¡Obj
(
pLog
->
nByã
);

855 
ii
=0; ii<
MALLOC_LOG_FRAMES
; ii++){

856 
≠EÀm
[
ii
+2] = 
	`T˛_NewWideI¡Obj
(
aKey
[ii]);

859 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
,

860 
	`T˛_NewLi°Obj
(
MALLOC_LOG_FRAMES
+2, 
≠EÀm
)

864 
	`T˛_SëObjResu…
(
öãΩ
, 
pRë
);

867 
MB_LOG_CLEAR
: {

868 
	`ã°_memdebug_log_˛ór
();

872 
MB_LOG_SYNC
: {

873 #ifde‡
SQLITE_MEMDEBUG


874 
	`sqlôe3MemdebugSync
();

875 
	`ã°_memdebug_log_˛ór
();

876 
mÆlocLogE«bÀd
 = 1;

877 
	`sqlôe3MemdebugSync
();

883  
TCL_OK
;

884 
	}
}

896 
	$ã°_c⁄fig_s¸©ch
(

897 * 
˛õ¡D©a
,

898 
T˛_I¡îp
 *
öãΩ
,

899 
objc
,

900 
T˛_Obj
 *
CONST
 
objv
[]

902 
sz
, 
N
, 
rc
;

903 
T˛_Obj
 *
pResu…
;

904 *
buf
 = 0;

905 if–
objc
!=3 ){

906 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "SIZE N");

907  
TCL_ERROR
;

909 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
sz
ËË 
TCL_ERROR
;

910 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
N
ËË 
TCL_ERROR
;

911 
	`‰ì
(
buf
);

912 if–
sz
<0 ){

913 
buf
 = 0;

914 
rc
 = 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_SCRATCH
, (*)0, 0, 0);

916 
buf
 = 
	`mÆloc
–
sz
*
N
 + 1 );

917 
rc
 = 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_SCRATCH
, 
buf
, 
sz
, 
N
);

919 
pResu…
 = 
	`T˛_NewObj
();

920 
	`T˛_Li°ObjAµídEÀmít
(0, 
pResu…
, 
	`T˛_NewI¡Obj
(
rc
));

921 
	`T˛_Li°ObjAµídEÀmít
(0, 
pResu…
, 
	`T˛_NewI¡Obj
(
N
));

922 
	`T˛_SëObjResu…
(
öãΩ
, 
pResu…
);

923  
TCL_OK
;

924 
	}
}

936 
	$ã°_c⁄fig_∑geˇche
(

937 * 
˛õ¡D©a
,

938 
T˛_I¡îp
 *
öãΩ
,

939 
objc
,

940 
T˛_Obj
 *
CONST
 
objv
[]

942 
sz
, 
N
;

943 
T˛_Obj
 *
pRes
;

944 *
buf
 = 0;

945 if–
objc
!=3 ){

946 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "SIZE N");

947  
TCL_ERROR
;

949 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
sz
ËË 
TCL_ERROR
;

950 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
N
ËË 
TCL_ERROR
;

951 
	`‰ì
(
buf
);

952 
buf
 = 0;

955 
pRes
 = 
	`T˛_NewObj
();

956 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRes
, 
	`T˛_NewI¡Obj
(
sqlôe3GlobÆC⁄fig
.
szPage
));

957 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRes
, 
	`T˛_NewI¡Obj
(
sqlôe3GlobÆC⁄fig
.
nPage
));

958 
	`T˛_SëObjResu…
(
öãΩ
, 
pRes
);

960 if–
sz
<0 ){

961 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_PAGECACHE
, (*)0, 0, 0);

963 
buf
 = 
	`mÆloc
–
sz
*
N
 );

964 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_PAGECACHE
, 
buf
, 
sz
, 
N
);

966  
TCL_OK
;

967 
	}
}

979 
	$ã°_Æt_pˇche
(

980 * 
˛õ¡D©a
,

981 
T˛_I¡îp
 *
öãΩ
,

982 
objc
,

983 
T˛_Obj
 *
CONST
 
objv
[]

985 
ö°ÆlFœg
;

986 
disˇrdCh™˚
 = 0;

987 
¥ngSìd
 = 0;

988 
highSåess
 = 0;

989 
	`ö°ÆlTe°PCache
(,,,);

990 if–
objc
<2 || objc>5 ){

991 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
,

993  
TCL_ERROR
;

995 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
ö°ÆlFœg
ËË 
TCL_ERROR
;

996 if–
objc
>=3 && 
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
disˇrdCh™˚
) ){

997  
TCL_ERROR
;

999 if–
objc
>=4 && 
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
¥ngSìd
) ){

1000  
TCL_ERROR
;

1002 if–
objc
>=5 && 
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[4], &
highSåess
) ){

1003  
TCL_ERROR
;

1005 if–
disˇrdCh™˚
<0 || discardChance>100 ){

1006 
	`T˛_AµídResu…
(
öãΩ
, "discard-chance should be between 0ánd 100",

1008  
TCL_ERROR
;

1010 
	`ö°ÆlTe°PCache
(
ö°ÆlFœg
, ()
disˇrdCh™˚
, ()
¥ngSìd
,

1011 ()
highSåess
);

1012  
TCL_OK
;

1013 
	}
}

1020 
	$ã°_c⁄fig_mem°©us
(

1021 * 
˛õ¡D©a
,

1022 
T˛_I¡îp
 *
öãΩ
,

1023 
objc
,

1024 
T˛_Obj
 *
CONST
 
objv
[]

1026 
íabÀ
, 
rc
;

1027 if–
objc
!=2 ){

1028 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "BOOLEAN");

1029  
TCL_ERROR
;

1031 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[1], &
íabÀ
ËË 
TCL_ERROR
;

1032 
rc
 = 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_MEMSTATUS
, 
íabÀ
);

1033 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

1034  
TCL_OK
;

1035 
	}
}

1041 
	$ã°_c⁄fig_lookaside
(

1042 * 
˛õ¡D©a
,

1043 
T˛_I¡îp
 *
öãΩ
,

1044 
objc
,

1045 
T˛_Obj
 *
CONST
 
objv
[]

1047 
sz
, 
˙t
;

1048 
T˛_Obj
 *
pRë
;

1049 if–
objc
!=3 ){

1050 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "SIZE COUNT");

1051  
TCL_ERROR
;

1053 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
sz
ËË 
TCL_ERROR
;

1054 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
˙t
ËË 
TCL_ERROR
;

1055 
pRë
 = 
	`T˛_NewObj
();

1056 
	`T˛_Li°ObjAµídEÀmít
(

1057 
öãΩ
, 
pRë
, 
	`T˛_NewI¡Obj
(
sqlôe3GlobÆC⁄fig
.
szLookaside
)

1059 
	`T˛_Li°ObjAµídEÀmít
(

1060 
öãΩ
, 
pRë
, 
	`T˛_NewI¡Obj
(
sqlôe3GlobÆC⁄fig
.
nLookaside
)

1062 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_LOOKASIDE
, 
sz
, 
˙t
);

1063 
	`T˛_SëObjResu…
(
öãΩ
, 
pRë
);

1064  
TCL_OK
;

1065 
	}
}

1075 
	$ã°_db_c⁄fig_lookaside
(

1076 * 
˛õ¡D©a
,

1077 
T˛_I¡îp
 *
öãΩ
,

1078 
objc
,

1079 
T˛_Obj
 *
CONST
 
objv
[]

1081 
rc
;

1082 
sz
, 
˙t
;

1083 
sqlôe3
 *
db
;

1084 
bufid
;

1085 
azBuf
[2][10000];

1086 
	`gëDbPoöãr
(
T˛_I¡îp
*, c⁄° *, 
sqlôe3
**);

1087 if–
objc
!=5 ){

1088 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "BUFID SIZE COUNT");

1089  
TCL_ERROR
;

1091 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

1092 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
bufid
ËË 
TCL_ERROR
;

1093 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
sz
ËË 
TCL_ERROR
;

1094 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[4], &
˙t
ËË 
TCL_ERROR
;

1095 if–
bufid
==0 ){

1096 
rc
 = 
	`sqlôe3_db_c⁄fig
(
db
, 
SQLITE_DBCONFIG_LOOKASIDE
, (*)0, 
sz
, 
˙t
);

1097 }if–
bufid
>=1 && bufid<=2 && 
sz
*
˙t
<=(
azBuf
[0]) ){

1098 
rc
 = 
	`sqlôe3_db_c⁄fig
(
db
, 
SQLITE_DBCONFIG_LOOKASIDE
, 
azBuf
[
bufid
], 
sz
,
˙t
);

1100 
	`T˛_AµídResu…
(
öãΩ
, "illegalárguments - see documentation", (*)0);

1101  
TCL_ERROR
;

1103 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

1104  
TCL_OK
;

1105 
	}
}

1110 
	$ã°_c⁄fig_hóp
(

1111 * 
˛õ¡D©a
,

1112 
T˛_I¡îp
 *
öãΩ
,

1113 
objc
,

1114 
T˛_Obj
 *
CONST
 
objv
[]

1116 *
zBuf
;

1117 
nByã
;

1118 
nMöAŒoc
;

1119 
rc
;

1121 
T˛_Obj
 * 
CONST
 *
aArg
 = &
objv
[1];

1122 
nArg
 = 
objc
-1;

1124 if–
nArg
!=2 ){

1125 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "NBYTE NMINALLOC");

1126  
TCL_ERROR
;

1128 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
aArg
[0], &
nByã
ËË 
TCL_ERROR
;

1129 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
aArg
[1], &
nMöAŒoc
ËË 
TCL_ERROR
;

1131 if–
nByã
==0 ){

1132 
	`‰ì
–
zBuf
 );

1133 
zBuf
 = 0;

1134 
rc
 = 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_HEAP
, (*)0, 0, 0);

1136 
zBuf
 = 
	`ªÆloc
(zBuf, 
nByã
);

1137 
rc
 = 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_HEAP
, 
zBuf
, 
nByã
, 
nMöAŒoc
);

1140 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_VOLATILE
);

1141  
TCL_OK
;

1142 
	}
}

1147 
	$ã°_c⁄fig_hóp_size
(

1148 * 
˛õ¡D©a
,

1149 
T˛_I¡îp
 *
öãΩ
,

1150 
objc
,

1151 
T˛_Obj
 *
CONST
 
objv
[]

1153 
nByã
;

1154 
rc
;

1156 
T˛_Obj
 * 
CONST
 *
aArg
 = &
objv
[1];

1157 
nArg
 = 
objc
-1;

1159 if–
nArg
!=1 ){

1160 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "NBYTE");

1161  
TCL_ERROR
;

1163 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
aArg
[0], &
nByã
ËË 
TCL_ERROR
;

1165 
rc
 = 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_WIN32_HEAPSIZE
, 
nByã
);

1167 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_VOLATILE
);

1168  
TCL_OK
;

1169 
	}
}

1177 
	$ã°_c⁄fig_îr‹
(

1178 * 
˛õ¡D©a
,

1179 
T˛_I¡îp
 *
öãΩ
,

1180 
objc
,

1181 
T˛_Obj
 *
CONST
 
objv
[]

1183 
sqlôe3
 *
db
;

1184 
	`gëDbPoöãr
(
T˛_I¡îp
*, c⁄° *, 
sqlôe3
**);

1186 if–
objc
!=2 && objc!=1 ){

1187 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "[DB]");

1188  
TCL_ERROR
;

1190 if–
objc
==2 ){

1191 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

1192 if–
	`sqlôe3_db_c⁄fig
(
db
, 99999)!=
SQLITE_ERROR
 ){

1193 
	`T˛_AµídResu…
(
öãΩ
,

1196  
TCL_ERROR
;

1199 if–
	`sqlôe3_c⁄fig
(99999)!=
SQLITE_ERROR
 ){

1200 
	`T˛_AµídResu…
(
öãΩ
,

1203  
TCL_ERROR
;

1206  
TCL_OK
;

1207 
	}
}

1215 
	$ã°_c⁄fig_uri
(

1216 * 
˛õ¡D©a
,

1217 
T˛_I¡îp
 *
öãΩ
,

1218 
objc
,

1219 
T˛_Obj
 *
CONST
 
objv
[]

1221 
rc
;

1222 
bO≥nUri
;

1224 if–
objc
!=2 ){

1225 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "BOOL");

1226  
TCL_ERROR
;

1228 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[1], &
bO≥nUri
) ){

1229  
TCL_ERROR
;

1232 
rc
 = 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_URI
, 
bO≥nUri
);

1233 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_VOLATILE
);

1235  
TCL_OK
;

1236 
	}
}

1244 
	$ã°_c⁄fig_cis
(

1245 * 
˛õ¡D©a
,

1246 
T˛_I¡îp
 *
öãΩ
,

1247 
objc
,

1248 
T˛_Obj
 *
CONST
 
objv
[]

1250 
rc
;

1251 
bU£Cis
;

1253 if–
objc
!=2 ){

1254 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "BOOL");

1255  
TCL_ERROR
;

1257 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[1], &
bU£Cis
) ){

1258  
TCL_ERROR
;

1261 
rc
 = 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_COVERING_INDEX_SCAN
, 
bU£Cis
);

1262 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_VOLATILE
);

1264  
TCL_OK
;

1265 
	}
}

1272 
	$ã°_c⁄fig_pmasz
(

1273 * 
˛õ¡D©a
,

1274 
T˛_I¡îp
 *
öãΩ
,

1275 
objc
,

1276 
T˛_Obj
 *
CONST
 
objv
[]

1278 
rc
;

1279 
iPmaSz
;

1281 if–
objc
!=2 ){

1282 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "BOOL");

1283  
TCL_ERROR
;

1285 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
iPmaSz
) ){

1286  
TCL_ERROR
;

1289 
rc
 = 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_PMASZ
, 
iPmaSz
);

1290 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_VOLATILE
);

1292  
TCL_OK
;

1293 
	}
}

1302 
	$ã°_dump_memsys3
(

1303 * 
˛õ¡D©a
,

1304 
T˛_I¡îp
 *
öãΩ
,

1305 
objc
,

1306 
T˛_Obj
 *
CONST
 
objv
[]

1308 if–
objc
!=2 ){

1309 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "FILENAME");

1310  
TCL_ERROR
;

1313  
	`SQLITE_PTR_TO_INT
(
˛õ¡D©a
) ){

1315 #ifde‡
SQLITE_ENABLE_MEMSYS3


1316 
	`sqlôe3Memsys3Dump
(const *);

1317 
	`sqlôe3Memsys3Dump
(
	`T˛_GëSåög
(
objv
[1]));

1322 #ifde‡
SQLITE_ENABLE_MEMSYS5


1323 
	`sqlôe3Memsys5Dump
(const *);

1324 
	`sqlôe3Memsys5Dump
(
	`T˛_GëSåög
(
objv
[1]));

1329  
TCL_OK
;

1330 
	}
}

1338 
	$ã°_°©us
(

1339 * 
˛õ¡D©a
,

1340 
T˛_I¡îp
 *
öãΩ
,

1341 
objc
,

1342 
T˛_Obj
 *
CONST
 
objv
[]

1344 
rc
, 
iVÆue
, 
mxVÆue
;

1345 
i
, 
›
 = 0, 
ª£tFœg
;

1346 c⁄° *
zOpName
;

1348 c⁄° *
zName
;

1349 
›
;

1350 } 
aOp
[] = {

1351 { "SQLITE_STATUS_MEMORY_USED", 
SQLITE_STATUS_MEMORY_USED
 },

1352 { "SQLITE_STATUS_MALLOC_SIZE", 
SQLITE_STATUS_MALLOC_SIZE
 },

1353 { "SQLITE_STATUS_PAGECACHE_USED", 
SQLITE_STATUS_PAGECACHE_USED
 },

1354 { "SQLITE_STATUS_PAGECACHE_OVERFLOW", 
SQLITE_STATUS_PAGECACHE_OVERFLOW
 },

1355 { "SQLITE_STATUS_PAGECACHE_SIZE", 
SQLITE_STATUS_PAGECACHE_SIZE
 },

1356 { "SQLITE_STATUS_SCRATCH_USED", 
SQLITE_STATUS_SCRATCH_USED
 },

1357 { "SQLITE_STATUS_SCRATCH_OVERFLOW", 
SQLITE_STATUS_SCRATCH_OVERFLOW
 },

1358 { "SQLITE_STATUS_SCRATCH_SIZE", 
SQLITE_STATUS_SCRATCH_SIZE
 },

1359 { "SQLITE_STATUS_PARSER_STACK", 
SQLITE_STATUS_PARSER_STACK
 },

1360 { "SQLITE_STATUS_MALLOC_COUNT", 
SQLITE_STATUS_MALLOC_COUNT
 },

1362 
T˛_Obj
 *
pResu…
;

1363 if–
objc
!=3 ){

1364 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "PARAMETER RESETFLAG");

1365  
TCL_ERROR
;

1367 
zOpName
 = 
	`T˛_GëSåög
(
objv
[1]);

1368 
i
=0; i<
	`AºaySize
(
aOp
); i++){

1369 if–
	`°rcmp
(
aOp
[
i
].
zName
, 
zOpName
)==0 ){

1370 
›
 = 
aOp
[
i
].op;

1374 if–
i
>=
	`AºaySize
(
aOp
) ){

1375 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
›
ËË 
TCL_ERROR
;

1377 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[2], &
ª£tFœg
ËË 
TCL_ERROR
;

1378 
iVÆue
 = 0;

1379 
mxVÆue
 = 0;

1380 
rc
 = 
	`sqlôe3_°©us
(
›
, &
iVÆue
, &
mxVÆue
, 
ª£tFœg
);

1381 
pResu…
 = 
	`T˛_NewObj
();

1382 
	`T˛_Li°ObjAµídEÀmít
(0, 
pResu…
, 
	`T˛_NewI¡Obj
(
rc
));

1383 
	`T˛_Li°ObjAµídEÀmít
(0, 
pResu…
, 
	`T˛_NewI¡Obj
(
iVÆue
));

1384 
	`T˛_Li°ObjAµídEÀmít
(0, 
pResu…
, 
	`T˛_NewI¡Obj
(
mxVÆue
));

1385 
	`T˛_SëObjResu…
(
öãΩ
, 
pResu…
);

1386  
TCL_OK
;

1387 
	}
}

1395 
	$ã°_db_°©us
(

1396 * 
˛õ¡D©a
,

1397 
T˛_I¡îp
 *
öãΩ
,

1398 
objc
,

1399 
T˛_Obj
 *
CONST
 
objv
[]

1401 
rc
, 
iVÆue
, 
mxVÆue
;

1402 
i
, 
›
 = 0, 
ª£tFœg
;

1403 c⁄° *
zOpName
;

1404 
sqlôe3
 *
db
;

1405 
	`gëDbPoöãr
(
T˛_I¡îp
*, c⁄° *, 
sqlôe3
**);

1407 c⁄° *
zName
;

1408 
›
;

1409 } 
aOp
[] = {

1410 { "LOOKASIDE_USED", 
SQLITE_DBSTATUS_LOOKASIDE_USED
 },

1411 { "CACHE_USED", 
SQLITE_DBSTATUS_CACHE_USED
 },

1412 { "SCHEMA_USED", 
SQLITE_DBSTATUS_SCHEMA_USED
 },

1413 { "STMT_USED", 
SQLITE_DBSTATUS_STMT_USED
 },

1414 { "LOOKASIDE_HIT", 
SQLITE_DBSTATUS_LOOKASIDE_HIT
 },

1415 { "LOOKASIDE_MISS_SIZE", 
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE
 },

1416 { "LOOKASIDE_MISS_FULL", 
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL
 },

1417 { "CACHE_HIT", 
SQLITE_DBSTATUS_CACHE_HIT
 },

1418 { "CACHE_MISS", 
SQLITE_DBSTATUS_CACHE_MISS
 },

1419 { "CACHE_WRITE", 
SQLITE_DBSTATUS_CACHE_WRITE
 },

1420 { "DEFERRED_FKS", 
SQLITE_DBSTATUS_DEFERRED_FKS
 }

1422 
T˛_Obj
 *
pResu…
;

1423 if–
objc
!=4 ){

1424 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB PARAMETER RESETFLAG");

1425  
TCL_ERROR
;

1427 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

1428 
zOpName
 = 
	`T˛_GëSåög
(
objv
[2]);

1429 if–
	`memcmp
(
zOpName
, "SQLITE_", 7)==0 ) zOpName += 7;

1430 if–
	`memcmp
(
zOpName
, "DBSTATUS_", 9)==0 ) zOpName += 9;

1431 
i
=0; i<
	`AºaySize
(
aOp
); i++){

1432 if–
	`°rcmp
(
aOp
[
i
].
zName
, 
zOpName
)==0 ){

1433 
›
 = 
aOp
[
i
].op;

1437 if–
i
>=
	`AºaySize
(
aOp
) ){

1438 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
›
ËË 
TCL_ERROR
;

1440 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[3], &
ª£tFœg
ËË 
TCL_ERROR
;

1441 
iVÆue
 = 0;

1442 
mxVÆue
 = 0;

1443 
rc
 = 
	`sqlôe3_db_°©us
(
db
, 
›
, &
iVÆue
, &
mxVÆue
, 
ª£tFœg
);

1444 
pResu…
 = 
	`T˛_NewObj
();

1445 
	`T˛_Li°ObjAµídEÀmít
(0, 
pResu…
, 
	`T˛_NewI¡Obj
(
rc
));

1446 
	`T˛_Li°ObjAµídEÀmít
(0, 
pResu…
, 
	`T˛_NewI¡Obj
(
iVÆue
));

1447 
	`T˛_Li°ObjAµídEÀmít
(0, 
pResu…
, 
	`T˛_NewI¡Obj
(
mxVÆue
));

1448 
	`T˛_SëObjResu…
(
öãΩ
, 
pResu…
);

1449  
TCL_OK
;

1450 
	}
}

1455 
	$ã°_ö°Æl_mÆloc_Áu…sim
(

1456 * 
˛õ¡D©a
,

1457 
T˛_I¡îp
 *
öãΩ
,

1458 
objc
,

1459 
T˛_Obj
 *
CONST
 
objv
[]

1461 
rc
;

1462 
isIn°Æl
;

1464 if–
objc
!=2 ){

1465 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "BOOLEAN");

1466  
TCL_ERROR
;

1468 if–
TCL_OK
!=
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[1], &
isIn°Æl
) ){

1469  
TCL_ERROR
;

1471 
rc
 = 
	`Áu…simIn°Æl
(
isIn°Æl
);

1472 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_VOLATILE
);

1473  
TCL_OK
;

1474 
	}
}

1479 
	$ã°_ö°Æl_memsys3
(

1480 * 
˛õ¡D©a
,

1481 
T˛_I¡îp
 *
öãΩ
,

1482 
objc
,

1483 
T˛_Obj
 *
CONST
 
objv
[]

1485 
rc
 = 
SQLITE_MISUSE
;

1486 #ifde‡
SQLITE_ENABLE_MEMSYS3


1487 c⁄° 
sqlôe3_mem_mëhods
 *
	`sqlôe3MemGëMemsys3
();

1488 
rc
 = 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_MALLOC
, 
	`sqlôe3MemGëMemsys3
());

1490 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_VOLATILE
);

1491  
TCL_OK
;

1492 
	}
}

1494 
	$ã°_vfs_oom_ã°
(

1495 * 
˛õ¡D©a
,

1496 
T˛_I¡îp
 *
öãΩ
,

1497 
objc
,

1498 
T˛_Obj
 *
CONST
 
objv
[]

1500 
sqlôe3_memdebug_vfs_oom_ã°
;

1501 if–
objc
>2 ){

1502 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "?INTEGER?");

1503  
TCL_ERROR
;

1504 }if–
objc
==2 ){

1505 
iNew
;

1506 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
iNew
ËË 
TCL_ERROR
;

1507 
sqlôe3_memdebug_vfs_oom_ã°
 = 
iNew
;

1509 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
sqlôe3_memdebug_vfs_oom_ã°
));

1510  
TCL_OK
;

1511 
	}
}

1516 
	$Sqlôëe°_mÆloc_Inô
(
T˛_I¡îp
 *
öãΩ
){

1518 *
zName
;

1519 
T˛_ObjCmdProc
 *
xProc
;

1520 
˛õ¡D©a
;

1521 } 
aObjCmd
[] = {

1522 { "sqlôe3_mÆloc", 
ã°_mÆloc
 ,0 },

1523 { "sqlôe3_ªÆloc", 
ã°_ªÆloc
 ,0 },

1524 { "sqlôe3_‰ì", 
ã°_‰ì
 ,0 },

1525 { "mem£t", 
ã°_mem£t
 ,0 },

1526 { "memgë", 
ã°_memgë
 ,0 },

1527 { "sqlôe3_mem‹y_u£d", 
ã°_mem‹y_u£d
 ,0 },

1528 { "sqlôe3_mem‹y_highw©î", 
ã°_mem‹y_highw©î
 ,0 },

1529 { "sqlôe3_memdebug_backåa˚", 
ã°_memdebug_backåa˚
 ,0 },

1530 { "sqlôe3_memdebug_dump", 
ã°_memdebug_dump
 ,0 },

1531 { "sqlôe3_memdebug_Áû", 
ã°_memdebug_Áû
 ,0 },

1532 { "sqlôe3_memdebug_≥ndög", 
ã°_memdebug_≥ndög
 ,0 },

1533 { "sqlôe3_memdebug_£âôÀ", 
ã°_memdebug_£âôÀ
 ,0 },

1534 { "sqlôe3_memdebug_mÆloc_cou¡", 
ã°_memdebug_mÆloc_cou¡
 ,0 },

1535 { "sqlôe3_memdebug_log", 
ã°_memdebug_log
 ,0 },

1536 { "sqlôe3_c⁄fig_s¸©ch", 
ã°_c⁄fig_s¸©ch
 ,0 },

1537 { "sqlôe3_c⁄fig_∑geˇche", 
ã°_c⁄fig_∑geˇche
 ,0 },

1538 { "sqlôe3_c⁄fig_Æt_pˇche", 
ã°_Æt_pˇche
 ,0 },

1539 { "sqlôe3_°©us", 
ã°_°©us
 ,0 },

1540 { "sqlôe3_db_°©us", 
ã°_db_°©us
 ,0 },

1541 { "ö°Æl_mÆloc_Áu…sim", 
ã°_ö°Æl_mÆloc_Áu…sim
 ,0 },

1542 { "sqlôe3_c⁄fig_hóp", 
ã°_c⁄fig_hóp
 ,0 },

1543 { "sqlôe3_c⁄fig_hóp_size", 
ã°_c⁄fig_hóp_size
 ,0 },

1544 { "sqlôe3_c⁄fig_mem°©us", 
ã°_c⁄fig_mem°©us
 ,0 },

1545 { "sqlôe3_c⁄fig_lookaside", 
ã°_c⁄fig_lookaside
 ,0 },

1546 { "sqlôe3_c⁄fig_îr‹", 
ã°_c⁄fig_îr‹
 ,0 },

1547 { "sqlôe3_c⁄fig_uri", 
ã°_c⁄fig_uri
 ,0 },

1548 { "sqlôe3_c⁄fig_cis", 
ã°_c⁄fig_cis
 ,0 },

1549 { "sqlôe3_c⁄fig_pmasz", 
ã°_c⁄fig_pmasz
 ,0 },

1550 { "sqlôe3_db_c⁄fig_lookaside",
ã°_db_c⁄fig_lookaside
 ,0 },

1551 { "sqlôe3_dump_memsys3", 
ã°_dump_memsys3
 ,3 },

1552 { "sqlôe3_dump_memsys5", 
ã°_dump_memsys3
 ,5 },

1553 { "sqlôe3_ö°Æl_memsys3", 
ã°_ö°Æl_memsys3
 ,0 },

1554 { "sqlôe3_memdebug_vfs_oom_ã°", 
ã°_vfs_oom_ã°
 ,0 },

1556 
i
;

1557 
i
=0; i<(
aObjCmd
)/(aObjCmd[0]); i++){

1558 
Clõ¡D©a
 
c
 = (Clõ¡D©a)
	`SQLITE_INT_TO_PTR
(
aObjCmd
[
i
].
˛õ¡D©a
);

1559 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
aObjCmd
[
i
].
zName
,áObjCmd[i].
xProc
, 
c
, 0);

1561  
TCL_OK
;

1562 
	}
}

	@test_multiplex.c

50 
	~"sqlôe3.h
"

51 
	~<°rög.h
>

52 
	~<as£π.h
>

53 
	~<°dlib.h
>

54 
	~"ã°_mu…ùÀx.h
"

56 #i‚de‡
SQLITE_CORE


57 
	#SQLITE_CORE
 1

	)

59 
	~"sqlôe3ext.h
"

67 
	#UNUSED_PARAMETER
(
x
Ë()(x)

	)

68 
	#MAX_PAGE_SIZE
 0x10000

	)

69 
	#DEFAULT_SECTOR_SIZE
 0x1000

	)

74 #i‡
deföed
(
SQLITE_THREADSAFE
) && SQLITE_THREADSAFE==0

75 
	#sqlôe3_muãx_Æloc
(
X
Ë((
sqlôe3_muãx
*)8)

	)

76 
	#sqlôe3_muãx_‰ì
(
X
)

	)

77 
	#sqlôe3_muãx_íãr
(
X
)

	)

78 
	#sqlôe3_muãx_åy
(
X
Ë
SQLITE_OK


	)

79 
	#sqlôe3_muãx_Àave
(
X
)

	)

80 
	#sqlôe3_muãx_hñd
(
X
Ë(()(X),1)

	)

81 
	#sqlôe3_muãx_nŸhñd
(
X
Ë(()(X),1)

	)

85 
	#MX_CHUNK_NUMBER
 299

	)

88 
	#SQLITE_MULTIPLEX_JOURNAL_8_3_OFFSET
 400

	)

89 
	#SQLITE_MULTIPLEX_WAL_8_3_OFFSET
 700

	)

94 #i‚de‡
SQLITE_MULTIPLEX_VFS_NAME


95 
	#SQLITE_MULTIPLEX_VFS_NAME
 "mu…ùÀx"

	)

102 #i‚de‡
SQLITE_MULTIPLEX_CHUNK_SIZE


103 
	#SQLITE_MULTIPLEX_CHUNK_SIZE
 2147418112

	)

112 #i‚de‡
SQLITE_MULTIPLEX_MAX_CHUNKS


113 
	#SQLITE_MULTIPLEX_MAX_CHUNKS
 12

	)

119 
mu…ùÀxGroup
 
	tmu…ùÀxGroup
;

120 
mu…ùÀxC⁄n
 
	tmu…ùÀxC⁄n
;

130 
	smu…ùÀxGroup
 {

131 
	smu…ùÀxRól
 {

132 
sqlôe3_fûe
 *
	mp
;

133 *
	mz
;

134 } *
	maRól
;

135 
	mnRól
;

136 *
	mzName
;

137 
	mnName
;

138 
	mÊags
;

139 
	mszChunk
;

140 
	mbE«bÀd
;

141 
	mbTrunˇã
;

142 
mu…ùÀxGroup
 *
	mpNext
, *
	mpPªv
;

151 
	smu…ùÀxC⁄n
 {

152 
sqlôe3_fûe
 
	mba£
;

153 
mu…ùÀxGroup
 *
	mpGroup
;

167 
sqlôe3_vfs
 *
	mpOrigVfs
;

172 
sqlôe3_vfs
 
	msThisVfs
;

184 
sqlôe3_io_mëhods
 
	msIoMëhodsV1
;

185 
sqlôe3_io_mëhods
 
	msIoMëhodsV2
;

189 
	misInôülized
;

197 
sqlôe3_muãx
 *
	mpMuãx
;

201 
mu…ùÀxGroup
 *
	mpGroups
;

202 } 
	ggMu…ùÀx
;

209 
	$mu…ùÀxE¡î
(){ 
	`sqlôe3_muãx_íãr
(
gMu…ùÀx
.
pMuãx
); 
	}
}

210 
	$mu…ùÀxLóve
(){ 
	`sqlôe3_muãx_Àave
(
gMu…ùÀx
.
pMuãx
); 
	}
}

220 
	$mu…ùÀxSåÀn30
(c⁄° *
z
){

221 c⁄° *
z2
 = 
z
;

222 if–
z
==0 )  0;

223  *
z2
 ){ z2++; }

224  0x3ffffff‡& ()(
z2
 - 
z
);

225 
	}
}

252 
	$mu…ùÀxFûíame
(

253 c⁄° *
zBa£
,

254 
nBa£
,

255 
Êags
,

256 
iChunk
,

257 *
zOut


259 
n
 = 
nBa£
;

260 
	`mem˝y
(
zOut
, 
zBa£
, 
n
+1);

261 if–
iChunk
!=0 && iChunk<=
MX_CHUNK_NUMBER
 ){

262 #ifde‡
SQLITE_ENABLE_8_3_NAMES


263 
i
;

264 
i
=
n
-1; i>0 && i>Ú-4 && 
zOut
[i]!='.'; i--){}

265 if–
i
>=
n
-4 )Ç = i+1;

266 if–
Êags
 & 
SQLITE_OPEN_MAIN_JOURNAL
 ){

271 
iChunk
 +
SQLITE_MULTIPLEX_JOURNAL_8_3_OFFSET
;

272 }if–
Êags
 & 
SQLITE_OPEN_WAL
 ){

276 
iChunk
 +
SQLITE_MULTIPLEX_WAL_8_3_OFFSET
;

279 
	`sqlôe3_¢¥ötf
(4,&
zOut
[
n
],"%03d",
iChunk
);

280 
n
 += 3;

283 
	`as£π
–
zOut
[
n
]=='\0' );

284 
zOut
[
n
+1] = '\0';

285 
	}
}

289 
	$mu…ùÀxSubFûíame
(
mu…ùÀxGroup
 *
pGroup
, 
iChunk
){

290 if–
iChunk
>=
pGroup
->
nRól
 ){

291 
mu…ùÀxRól
 *
p
;

292 
p
 = 
	`sqlôe3_ªÆloc64
(
pGroup
->
aRól
, (
iChunk
+1)*(*p));

293 if–
p
==0 ){

294  
SQLITE_NOMEM
;

296 
	`mem£t
(&
p
[
pGroup
->
nRól
], 0, ’[0])*(
iChunk
+1-pGroup->nReal));

297 
pGroup
->
aRól
 = 
p
;

298 
pGroup
->
nRól
 = 
iChunk
+1;

300 if–
pGroup
->
zName
 &&ÖGroup->
aRól
[
iChunk
].
z
==0 ){

301 *
z
;

302 
n
 = 
pGroup
->
nName
;

303 
pGroup
->
aRól
[
iChunk
].
z
 = z = 
	`sqlôe3_mÆloc64
–
n
+5 );

304 if–
z
==0 ){

305  
SQLITE_NOMEM
;

307 
	`mu…ùÀxFûíame
(
pGroup
->
zName
,ÖGroup->
nName
,ÖGroup->
Êags
, 
iChunk
, 
z
);

309  
SQLITE_OK
;

310 
	}
}

319 
sqlôe3_fûe
 *
	$mu…ùÀxSubO≥n
(

320 
mu…ùÀxGroup
 *
pGroup
,

321 
iChunk
,

322 *
rc
,

323 *
pOutFœgs
,

324 
¸óãFœg


326 
sqlôe3_fûe
 *
pSubO≥n
 = 0;

327 
sqlôe3_vfs
 *
pOrigVfs
 = 
gMu…ùÀx
.pOrigVfs;

329 #ifde‡
SQLITE_ENABLE_8_3_NAMES


334 if–
iChunk
>=
SQLITE_MULTIPLEX_JOURNAL_8_3_OFFSET
 ){

335 
	`sqlôe3_log
(
SQLITE_FULL
, "mu…ùÀxed chunk ovîÊow: %s", 
pGroup
->
zName
);

336 *
rc
 = 
SQLITE_FULL
;

341 *
rc
 = 
	`mu…ùÀxSubFûíame
(
pGroup
, 
iChunk
);

342 if–(*
rc
)==
SQLITE_OK
 && (
pSubO≥n
 = 
pGroup
->
aRól
[
iChunk
].
p
)==0 ){

343 
Êags
, 
bExi°s
;

344 
Êags
 = 
pGroup
->flags;

345 if–
¸óãFœg
 ){

346 
Êags
 |
SQLITE_OPEN_CREATE
;

347 }if–
iChunk
==0 ){

349 }if–
pGroup
->
aRól
[
iChunk
].
z
==0 ){

352 *
rc
 = 
pOrigVfs
->
	`xAc˚ss
’OrigVfs, 
pGroup
->
aRól
[
iChunk
].
z
,

353 
SQLITE_ACCESS_EXISTS
, &
bExi°s
);

354 if–*
rc
 || !
bExi°s
 ){

355 if–*
rc
 ){

356 
	`sqlôe3_log
(*
rc
, "multiplexor.xAccess failure on %s",

357 
pGroup
->
aRól
[
iChunk
].
z
);

361 
Êags
 &~
SQLITE_OPEN_CREATE
;

363 
pSubO≥n
 = 
	`sqlôe3_mÆloc64
–
pOrigVfs
->
szOsFûe
 );

364 if–
pSubO≥n
==0 ){

365 *
rc
 = 
SQLITE_IOERR_NOMEM
;

368 
pGroup
->
aRól
[
iChunk
].
p
 = 
pSubO≥n
;

369 *
rc
 = 
pOrigVfs
->
	`xO≥n
’OrigVfs, 
pGroup
->
aRól
[
iChunk
].
z
, 
pSubO≥n
,

370 
Êags
, 
pOutFœgs
);

371 if–(*
rc
)!=
SQLITE_OK
 ){

372 
	`sqlôe3_log
(*
rc
, "multiplexor.xOpen failure on %s",

373 
pGroup
->
aRól
[
iChunk
].
z
);

374 
	`sqlôe3_‰ì
(
pSubO≥n
);

375 
pGroup
->
aRól
[
iChunk
].
p
 = 0;

379  
pSubO≥n
;

380 
	}
}

387 
sqlôe3_öt64
 
	$mu…ùÀxSubSize
(

388 
mu…ùÀxGroup
 *
pGroup
,

389 
iChunk
,

390 *
rc


392 
sqlôe3_fûe
 *
pSub
;

393 
sqlôe3_öt64
 
sz
 = 0;

395 if–*
rc
 )  0;

396 
pSub
 = 
	`mu…ùÀxSubO≥n
(
pGroup
, 
iChunk
, 
rc
, 
NULL
, 0);

397 if–
pSub
==0 )  0;

398 *
rc
 = 
pSub
->
pMëhods
->
	`xFûeSize
’Sub, &
sz
);

399  
sz
;

400 
	}
}

405 
	$mu…ùÀxC⁄åﬁFunc
(

406 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

407 
¨gc
,

408 
sqlôe3_vÆue
 **
¨gv


410 
rc
 = 
SQLITE_OK
;

411 
sqlôe3
 *
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
);

412 
›
 = 0;

413 
iVÆ
;

415 if–!
db
 || 
¨gc
!=2 ){

416 
rc
 = 
SQLITE_ERROR
;

419 
›
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[0]);

420 
iVÆ
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[1]);

422  
›
 ){

424 
›
 = 
MULTIPLEX_CTRL_ENABLE
;

427 
›
 = 
MULTIPLEX_CTRL_SET_CHUNK_SIZE
;

430 
›
 = 
MULTIPLEX_CTRL_SET_MAX_CHUNKS
;

433 
rc
 = 
SQLITE_NOTFOUND
;

437 if–
rc
==
SQLITE_OK
 ){

438 
rc
 = 
	`sqlôe3_fûe_c⁄åﬁ
(
db
, 0, 
›
, &
iVÆ
);

440 
	`sqlôe3_ªsu…_îr‹_code
(
c⁄ãxt
, 
rc
);

441 
	}
}

447 
	$mu…ùÀxFuncInô
(

448 
sqlôe3
 *
db
,

449 **
pzEºMsg
,

450 c⁄° 
sqlôe3_≠i_routöes
 *
pApi


452 
rc
;

453 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "mu…ùÀx_c⁄åﬁ", 2, 
SQLITE_ANY
,

454 0, 
mu…ùÀxC⁄åﬁFunc
, 0, 0);

455  
rc
;

456 
	}
}

461 
	$mu…ùÀxSubClo£
(

462 
mu…ùÀxGroup
 *
pGroup
,

463 
iChunk
,

464 
sqlôe3_vfs
 *
pOrigVfs


466 
sqlôe3_fûe
 *
pSubO≥n
 = 
pGroup
->
aRól
[
iChunk
].
p
;

467 if–
pSubO≥n
 ){

468 
pSubO≥n
->
pMëhods
->
	`xClo£
(pSubOpen);

469 if–
pOrigVfs
 && 
pGroup
->
aRól
[
iChunk
].
z
 ){

470 
pOrigVfs
->
	`xDñëe
’OrigVfs, 
pGroup
->
aRól
[
iChunk
].
z
, 0);

472 
	`sqlôe3_‰ì
(
pGroup
->
aRól
[
iChunk
].
p
);

474 
	`sqlôe3_‰ì
(
pGroup
->
aRól
[
iChunk
].
z
);

475 
	`mem£t
(&
pGroup
->
aRól
[
iChunk
], 0, (pGroup->aReal[iChunk]));

476 
	}
}

481 
	$mu…ùÀxFªeComp⁄íts
(
mu…ùÀxGroup
 *
pGroup
){

482 
i
;

483 
i
=0; i<
pGroup
->
nRól
; i++){ 
	`mu…ùÀxSubClo£
(pGroup, i, 0); }

484 
	`sqlôe3_‰ì
(
pGroup
->
aRól
);

485 
pGroup
->
aRól
 = 0;

486 
pGroup
->
nRól
 = 0;

487 
	}
}

499 
	$mu…ùÀxO≥n
(

500 
sqlôe3_vfs
 *
pVfs
,

501 c⁄° *
zName
,

502 
sqlôe3_fûe
 *
pC⁄n
,

503 
Êags
,

504 *
pOutFœgs


506 
rc
 = 
SQLITE_OK
;

507 
mu…ùÀxC⁄n
 *
pMu…ùÀxO≥n
;

508 
mu…ùÀxGroup
 *
pGroup
 = 0;

509 
sqlôe3_fûe
 *
pSubO≥n
 = 0;

510 
sqlôe3_vfs
 *
pOrigVfs
 = 
gMu…ùÀx
.pOrigVfs;

511 
nName
 = 0;

512 
sz
 = 0;

513 *
zToFªe
 = 0;

515 
	`UNUSED_PARAMETER
(
pVfs
);

516 
	`mem£t
(
pC⁄n
, 0, 
pVfs
->
szOsFûe
);

517 
	`as£π
–
zName
 || (
Êags
 & 
SQLITE_OPEN_DELETEONCLOSE
) );

522 
	`mu…ùÀxE¡î
();

523 
pMu…ùÀxO≥n
 = (
mu…ùÀxC⁄n
*)
pC⁄n
;

525 if–
rc
==
SQLITE_OK
 ){

527 
nName
 = 
zName
 ? 
	`mu…ùÀxSåÀn30
(zName) : 0;

528 
sz
 = (
mu…ùÀxGroup
)

529 + 
nName
 + 1;

530 
pGroup
 = 
	`sqlôe3_mÆloc64
–
sz
 );

531 if–
pGroup
==0 ){

532 
rc
 = 
SQLITE_NOMEM
;

536 if–
rc
==
SQLITE_OK
 ){

537 c⁄° *
zUri
 = (
Êags
 & 
SQLITE_OPEN_URI
Ë? 
zName
 : 0;

539 
	`mem£t
(
pGroup
, 0, 
sz
);

540 
pMu…ùÀxO≥n
->
pGroup
 =ÖGroup;

541 
pGroup
->
bE«bÀd
 = ()-1;

542 
pGroup
->
bTrunˇã
 = ()
	`sqlôe3_uri_boﬁón
(
zUri
, "truncate",

543 (
Êags
 & 
SQLITE_OPEN_MAIN_DB
)==0);

544 
pGroup
->
szChunk
 = ()
	`sqlôe3_uri_öt64
(
zUri
, "chunksize",

545 
SQLITE_MULTIPLEX_CHUNK_SIZE
);

546 
pGroup
->
szChunk
 = (pGroup->szChunk+0xffff)&~0xffff;

547 if–
zName
 ){

548 *
p
 = (*)&
pGroup
[1];

549 
pGroup
->
zName
 = 
p
;

550 
	`mem˝y
(
pGroup
->
zName
, zName, 
nName
+1);

551 
pGroup
->
nName
 =ÇName;

553 if–
pGroup
->
bE«bÀd
 ){

558 #i‚de‡
SQLITE_OMIT_WSD


559 
sqlôe3PídögByã
;

561 
sqlôe3PídögByã
 = 0x40000000;

563  (
sqlôe3PídögByã
 % 
pGroup
->
szChunk
)>=(pGroup->szChunk-65536) ){

564 
pGroup
->
szChunk
 += 65536;

567 
pGroup
->
Êags
 = flags;

568 
rc
 = 
	`mu…ùÀxSubFûíame
(
pGroup
, 1);

569 if–
rc
==
SQLITE_OK
 ){

570 
pSubO≥n
 = 
	`mu…ùÀxSubO≥n
(
pGroup
, 0, &
rc
, 
pOutFœgs
, 0);

571 if–
pSubO≥n
==0 && 
rc
==
SQLITE_OK
 )Ñ¯
SQLITE_CANTOPEN
;

573 if–
rc
==
SQLITE_OK
 ){

574 
sqlôe3_öt64
 
sz64
;

576 
rc
 = 
pSubO≥n
->
pMëhods
->
	`xFûeSize
’SubO≥n, &
sz64
);

577 if–
rc
==
SQLITE_OK
 && 
zName
 ){

578 
bExi°s
;

579 if–
Êags
 & 
SQLITE_OPEN_MASTER_JOURNAL
 ){

580 
pGroup
->
bE«bÀd
 = 0;

582 if–
sz64
==0 ){

583 if–
Êags
 & 
SQLITE_OPEN_MAIN_JOURNAL
 ){

587 
iChunk
 = 1;

589 
rc
 = 
pOrigVfs
->
	`xAc˚ss
(pOrigVfs,

590 
pGroup
->
aRól
[
iChunk
].
z
, 
SQLITE_ACCESS_EXISTS
, &
bExi°s


592 if–
rc
==
SQLITE_OK
 && 
bExi°s
 ){

593 
rc
 = 
pOrigVfs
->
	`xDñëe
’OrigVfs, 
pGroup
->
aRól
[
iChunk
].
z
, 0);

594 if–
rc
==
SQLITE_OK
 ){

595 
rc
 = 
	`mu…ùÀxSubFûíame
(
pGroup
, ++
iChunk
);

598 } 
rc
==
SQLITE_OK
 && 
bExi°s
 );

610 
rc
 = 
pOrigVfs
->
	`xAc˚ss
’OrigVfs, 
pGroup
->
aRól
[1].
z
,

611 
SQLITE_ACCESS_EXISTS
, &
bExi°s
);

612 
bExi°s
 = 
	`mu…ùÀxSubSize
(
pGroup
, 1, &
rc
)>0;

613 if–
rc
==
SQLITE_OK
 && 
bExi°s
 && 
sz64
==(sz64&0xffff0000) && sz64>0

614 && 
sz64
!=
pGroup
->
szChunk
 ){

615 
pGroup
->
szChunk
 = ()
sz64
;

616 }if–
rc
==
SQLITE_OK
 && !
bExi°s
 && 
sz64
>
pGroup
->
szChunk
 ){

617 
pGroup
->
bE«bÀd
 = 0;

623 if–
rc
==
SQLITE_OK
 ){

624 if–
pSubO≥n
->
pMëhods
->
iVîsi⁄
==1 ){

625 
pMu…ùÀxO≥n
->
ba£
.
pMëhods
 = &
gMu…ùÀx
.
sIoMëhodsV1
;

627 
pMu…ùÀxO≥n
->
ba£
.
pMëhods
 = &
gMu…ùÀx
.
sIoMëhodsV2
;

630 
pGroup
->
pNext
 = 
gMu…ùÀx
.
pGroups
;

631 if–
gMu…ùÀx
.
pGroups
 ) gMu…ùÀx.pGroups->
pPªv
 = 
pGroup
;

632 
gMu…ùÀx
.
pGroups
 = 
pGroup
;

634 
	`mu…ùÀxFªeComp⁄íts
(
pGroup
);

635 
	`sqlôe3_‰ì
(
pGroup
);

638 
	`mu…ùÀxLóve
();

639 
	`sqlôe3_‰ì
(
zToFªe
);

640  
rc
;

641 
	}
}

647 
	$mu…ùÀxDñëe
(

648 
sqlôe3_vfs
 *
pVfs
,

649 c⁄° *
zName
,

650 
syncDú


652 
rc
;

653 
sqlôe3_vfs
 *
pOrigVfs
 = 
gMu…ùÀx
.pOrigVfs;

654 
rc
 = 
pOrigVfs
->
	`xDñëe
’OrigVfs, 
zName
, 
syncDú
);

655 if–
rc
==
SQLITE_OK
 ){

659 
nName
 = ()
	`°æí
(
zName
);

660 *
z
;

661 
z
 = 
	`sqlôe3_mÆloc64
(
nName
 + 5);

662 if–
z
==0 ){

663 
rc
 = 
SQLITE_IOERR_NOMEM
;

665 
iChunk
 = 0;

666 
bExi°s
;

668 
	`mu…ùÀxFûíame
(
zName
, 
nName
, 
SQLITE_OPEN_MAIN_JOURNAL
, ++
iChunk
, 
z
);

669 
rc
 = 
pOrigVfs
->
	`xAc˚ss
’OrigVfs, 
z
, 
SQLITE_ACCESS_EXISTS
, &
bExi°s
);

670 } 
rc
==
SQLITE_OK
 && 
bExi°s
 );

671  
rc
==
SQLITE_OK
 && 
iChunk
>1 ){

672 
	`mu…ùÀxFûíame
(
zName
, 
nName
, 
SQLITE_OPEN_MAIN_JOURNAL
, --
iChunk
, 
z
);

673 
rc
 = 
pOrigVfs
->
	`xDñëe
’OrigVfs, 
z
, 
syncDú
);

675 if–
rc
==
SQLITE_OK
 ){

676 
iChunk
 = 0;

678 
	`mu…ùÀxFûíame
(
zName
, 
nName
, 
SQLITE_OPEN_WAL
, ++
iChunk
, 
z
);

679 
rc
 = 
pOrigVfs
->
	`xAc˚ss
’OrigVfs, 
z
, 
SQLITE_ACCESS_EXISTS
, &
bExi°s
);

680 } 
rc
==
SQLITE_OK
 && 
bExi°s
 );

681  
rc
==
SQLITE_OK
 && 
iChunk
>1 ){

682 
	`mu…ùÀxFûíame
(
zName
, 
nName
, 
SQLITE_OPEN_WAL
, --
iChunk
, 
z
);

683 
rc
 = 
pOrigVfs
->
	`xDñëe
’OrigVfs, 
z
, 
syncDú
);

687 
	`sqlôe3_‰ì
(
z
);

689  
rc
;

690 
	}
}

692 
	$mu…ùÀxAc˚ss
(
sqlôe3_vfs
 *
a
, c⁄° *
b
, 
c
, *
d
){

693  
gMu…ùÀx
.
pOrigVfs
->
	`xAc˚ss
(gMu…ùÀx.pOrigVfs, 
b
, 
c
, 
d
);

694 
	}
}

695 
	$mu…ùÀxFuŒP©h«me
(
sqlôe3_vfs
 *
a
, c⁄° *
b
, 
c
, *
d
){

696  
gMu…ùÀx
.
pOrigVfs
->
	`xFuŒP©h«me
(gMu…ùÀx.pOrigVfs, 
b
, 
c
, 
d
);

697 
	}
}

698 *
	$mu…ùÀxDlO≥n
(
sqlôe3_vfs
 *
a
, c⁄° *
b
){

699  
gMu…ùÀx
.
pOrigVfs
->
	`xDlO≥n
(gMu…ùÀx.pOrigVfs, 
b
);

700 
	}
}

701 
	$mu…ùÀxDlEº‹
(
sqlôe3_vfs
 *
a
, 
b
, *
c
){

702 
gMu…ùÀx
.
pOrigVfs
->
	`xDlEº‹
(gMu…ùÀx.pOrigVfs, 
b
, 
c
);

703 
	}
}

704 (*
	$mu…ùÀxDlSym
(
sqlôe3_vfs
 *
a
, *
b
, c⁄° *
c
))(){

705  
gMu…ùÀx
.
pOrigVfs
->
	`xDlSym
(gMu…ùÀx.pOrigVfs, 
b
, 
c
);

706 
	}
}

707 
	$mu…ùÀxDlClo£
(
sqlôe3_vfs
 *
a
, *
b
){

708 
gMu…ùÀx
.
pOrigVfs
->
	`xDlClo£
(gMu…ùÀx.pOrigVfs, 
b
);

709 
	}
}

710 
	$mu…ùÀxR™dom√ss
(
sqlôe3_vfs
 *
a
, 
b
, *
c
){

711  
gMu…ùÀx
.
pOrigVfs
->
	`xR™dom√ss
(gMu…ùÀx.pOrigVfs, 
b
, 
c
);

712 
	}
}

713 
	$mu…ùÀxSÀï
(
sqlôe3_vfs
 *
a
, 
b
){

714  
gMu…ùÀx
.
pOrigVfs
->
	`xSÀï
(gMu…ùÀx.pOrigVfs, 
b
);

715 
	}
}

716 
	$mu…ùÀxCuºítTime
(
sqlôe3_vfs
 *
a
, *
b
){

717  
gMu…ùÀx
.
pOrigVfs
->
	`xCuºítTime
(gMu…ùÀx.pOrigVfs, 
b
);

718 
	}
}

719 
	$mu…ùÀxGëLa°Eº‹
(
sqlôe3_vfs
 *
a
, 
b
, *
c
){

720 if–
gMu…ùÀx
.
pOrigVfs
->
xGëLa°Eº‹
 ){

721  
gMu…ùÀx
.
pOrigVfs
->
	`xGëLa°Eº‹
(gMu…ùÀx.pOrigVfs, 
b
, 
c
);

725 
	}
}

726 
	$mu…ùÀxCuºítTimeI¡64
(
sqlôe3_vfs
 *
a
, 
sqlôe3_öt64
 *
b
){

727  
gMu…ùÀx
.
pOrigVfs
->
	`xCuºítTimeI¡64
(gMu…ùÀx.pOrigVfs, 
b
);

728 
	}
}

737 
	$mu…ùÀxClo£
(
sqlôe3_fûe
 *
pC⁄n
){

738 
mu…ùÀxC⁄n
 *
p
 = (mu…ùÀxC⁄n*)
pC⁄n
;

739 
mu…ùÀxGroup
 *
pGroup
 = 
p
->pGroup;

740 
rc
 = 
SQLITE_OK
;

741 
	`mu…ùÀxE¡î
();

742 
	`mu…ùÀxFªeComp⁄íts
(
pGroup
);

744 if–
pGroup
->
pNext
 )ÖGroup->pNext->
pPªv
 =ÖGroup->pPrev;

745 if–
pGroup
->
pPªv
 ){

746 
pGroup
->
pPªv
->
pNext
 =ÖGroup->pNext;

748 
gMu…ùÀx
.
pGroups
 = 
pGroup
->
pNext
;

750 
	`sqlôe3_‰ì
(
pGroup
);

751 
	`mu…ùÀxLóve
();

752  
rc
;

753 
	}
}

759 
	$mu…ùÀxRód
(

760 
sqlôe3_fûe
 *
pC⁄n
,

761 *
pBuf
,

762 
iAmt
,

763 
sqlôe3_öt64
 
iOf°


765 
mu…ùÀxC⁄n
 *
p
 = (mu…ùÀxC⁄n*)
pC⁄n
;

766 
mu…ùÀxGroup
 *
pGroup
 = 
p
->pGroup;

767 
rc
 = 
SQLITE_OK
;

768 if–!
pGroup
->
bE«bÀd
 ){

769 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`mu…ùÀxSubO≥n
(
pGroup
, 0, &
rc
, 
NULL
, 0);

770 if–
pSubO≥n
==0 ){

771 
rc
 = 
SQLITE_IOERR_READ
;

773 
rc
 = 
pSubO≥n
->
pMëhods
->
	`xRód
’SubO≥n, 
pBuf
, 
iAmt
, 
iOf°
);

776  
iAmt
 > 0 ){

777 
i
 = ()(
iOf°
 / 
pGroup
->
szChunk
);

778 
sqlôe3_fûe
 *
pSubO≥n
;

779 
pSubO≥n
 = 
	`mu…ùÀxSubO≥n
(
pGroup
, 
i
, &
rc
, 
NULL
, 1);

780 if–
pSubO≥n
 ){

781 
exåa
 = (()(
iOf°
 % 
pGroup
->
szChunk
Ë+ 
iAmt
) -ÖGroup->szChunk;

782 if–
exåa
<0 )Éxtra = 0;

783 
iAmt
 -
exåa
;

784 
rc
 = 
pSubO≥n
->
pMëhods
->
	`xRód
’SubO≥n, 
pBuf
, 
iAmt
,

785 
iOf°
 % 
pGroup
->
szChunk
);

786 if–
rc
!=
SQLITE_OK
 ) ;

787 
pBuf
 = (*ÌBu‡+ 
iAmt
;

788 
iOf°
 +
iAmt
;

789 
iAmt
 = 
exåa
;

791 
rc
 = 
SQLITE_IOERR_READ
;

797  
rc
;

798 
	}
}

804 
	$mu…ùÀxWrôe
(

805 
sqlôe3_fûe
 *
pC⁄n
,

806 c⁄° *
pBuf
,

807 
iAmt
,

808 
sqlôe3_öt64
 
iOf°


810 
mu…ùÀxC⁄n
 *
p
 = (mu…ùÀxC⁄n*)
pC⁄n
;

811 
mu…ùÀxGroup
 *
pGroup
 = 
p
->pGroup;

812 
rc
 = 
SQLITE_OK
;

813 if–!
pGroup
->
bE«bÀd
 ){

814 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`mu…ùÀxSubO≥n
(
pGroup
, 0, &
rc
, 
NULL
, 0);

815 if–
pSubO≥n
==0 ){

816 
rc
 = 
SQLITE_IOERR_WRITE
;

818 
rc
 = 
pSubO≥n
->
pMëhods
->
	`xWrôe
’SubO≥n, 
pBuf
, 
iAmt
, 
iOf°
);

821  
rc
==
SQLITE_OK
 && 
iAmt
>0 ){

822 
i
 = ()(
iOf°
 / 
pGroup
->
szChunk
);

823 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`mu…ùÀxSubO≥n
(
pGroup
, 
i
, &
rc
, 
NULL
, 1);

824 if–
pSubO≥n
 ){

825 
exåa
 = (()(
iOf°
 % 
pGroup
->
szChunk
Ë+ 
iAmt
) -

826 
pGroup
->
szChunk
;

827 if–
exåa
<0 )Éxtra = 0;

828 
iAmt
 -
exåa
;

829 
rc
 = 
pSubO≥n
->
pMëhods
->
	`xWrôe
’SubO≥n, 
pBuf
, 
iAmt
,

830 
iOf°
 % 
pGroup
->
szChunk
);

831 
pBuf
 = (*ÌBu‡+ 
iAmt
;

832 
iOf°
 +
iAmt
;

833 
iAmt
 = 
exåa
;

837  
rc
;

838 
	}
}

844 
	$mu…ùÀxTrunˇã
(
sqlôe3_fûe
 *
pC⁄n
, 
sqlôe3_öt64
 
size
){

845 
mu…ùÀxC⁄n
 *
p
 = (mu…ùÀxC⁄n*)
pC⁄n
;

846 
mu…ùÀxGroup
 *
pGroup
 = 
p
->pGroup;

847 
rc
 = 
SQLITE_OK
;

848 
	`mu…ùÀxE¡î
();

849 if–!
pGroup
->
bE«bÀd
 ){

850 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`mu…ùÀxSubO≥n
(
pGroup
, 0, &
rc
, 
NULL
, 0);

851 if–
pSubO≥n
==0 ){

852 
rc
 = 
SQLITE_IOERR_TRUNCATE
;

854 
rc
 = 
pSubO≥n
->
pMëhods
->
	`xTrunˇã
’SubO≥n, 
size
);

857 
i
;

858 
iBa£Group
 = ()(
size
 / 
pGroup
->
szChunk
);

859 
sqlôe3_fûe
 *
pSubO≥n
;

860 
sqlôe3_vfs
 *
pOrigVfs
 = 
gMu…ùÀx
.pOrigVfs;

862 
i
 = 
pGroup
->
nRól
-1; i>
iBa£Group
 && 
rc
==
SQLITE_OK
; i--){

863 if–
pGroup
->
bTrunˇã
 ){

864 
	`mu…ùÀxSubClo£
(
pGroup
, 
i
, 
pOrigVfs
);

866 
pSubO≥n
 = 
	`mu…ùÀxSubO≥n
(
pGroup
, 
i
, &
rc
, 0, 0);

867 if–
pSubO≥n
 ){

868 
rc
 = 
pSubO≥n
->
pMëhods
->
	`xTrunˇã
(pSubOpen, 0);

872 if–
rc
==
SQLITE_OK
 ){

873 
pSubO≥n
 = 
	`mu…ùÀxSubO≥n
(
pGroup
, 
iBa£Group
, &
rc
, 0, 0);

874 if–
pSubO≥n
 ){

875 
rc
 = 
pSubO≥n
->
pMëhods
->
	`xTrunˇã
’SubO≥n, 
size
 % 
pGroup
->
szChunk
);

878 if–
rc
 )Ñ¯
SQLITE_IOERR_TRUNCATE
;

880 
	`mu…ùÀxLóve
();

881  
rc
;

882 
	}
}

886 
	$mu…ùÀxSync
(
sqlôe3_fûe
 *
pC⁄n
, 
Êags
){

887 
mu…ùÀxC⁄n
 *
p
 = (mu…ùÀxC⁄n*)
pC⁄n
;

888 
mu…ùÀxGroup
 *
pGroup
 = 
p
->pGroup;

889 
rc
 = 
SQLITE_OK
;

890 
i
;

891 
	`mu…ùÀxE¡î
();

892 
i
=0; i<
pGroup
->
nRól
; i++){

893 
sqlôe3_fûe
 *
pSubO≥n
 = 
pGroup
->
aRól
[
i
].
p
;

894 if–
pSubO≥n
 ){

895 
rc2
 = 
pSubO≥n
->
pMëhods
->
	`xSync
’SubO≥n, 
Êags
);

896 if–
rc2
!=
SQLITE_OK
 ) 
rc
 =Ñc2;

899 
	`mu…ùÀxLóve
();

900  
rc
;

901 
	}
}

906 
	$mu…ùÀxFûeSize
(
sqlôe3_fûe
 *
pC⁄n
, 
sqlôe3_öt64
 *
pSize
){

907 
mu…ùÀxC⁄n
 *
p
 = (mu…ùÀxC⁄n*)
pC⁄n
;

908 
mu…ùÀxGroup
 *
pGroup
 = 
p
->pGroup;

909 
rc
 = 
SQLITE_OK
;

910 
i
;

911 
	`mu…ùÀxE¡î
();

912 if–!
pGroup
->
bE«bÀd
 ){

913 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`mu…ùÀxSubO≥n
(
pGroup
, 0, &
rc
, 
NULL
, 0);

914 if–
pSubO≥n
==0 ){

915 
rc
 = 
SQLITE_IOERR_FSTAT
;

917 
rc
 = 
pSubO≥n
->
pMëhods
->
	`xFûeSize
’SubO≥n, 
pSize
);

920 *
pSize
 = 0;

921 
i
=0; 
rc
==
SQLITE_OK
; i++){

922 
sqlôe3_öt64
 
sz
 = 
	`mu…ùÀxSubSize
(
pGroup
, 
i
, &
rc
);

923 if–
sz
==0 ) ;

924 *
pSize
 = 
i
*(
sqlôe3_öt64
)
pGroup
->
szChunk
 + 
sz
;

927 
	`mu…ùÀxLóve
();

928  
rc
;

929 
	}
}

933 
	$mu…ùÀxLock
(
sqlôe3_fûe
 *
pC⁄n
, 
lock
){

934 
mu…ùÀxC⁄n
 *
p
 = (mu…ùÀxC⁄n*)
pC⁄n
;

935 
rc
;

936 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`mu…ùÀxSubO≥n
(
p
->
pGroup
, 0, &
rc
, 
NULL
, 0);

937 if–
pSubO≥n
 ){

938  
pSubO≥n
->
pMëhods
->
	`xLock
’SubO≥n, 
lock
);

940  
SQLITE_BUSY
;

941 
	}
}

945 
	$mu…ùÀxU∆ock
(
sqlôe3_fûe
 *
pC⁄n
, 
lock
){

946 
mu…ùÀxC⁄n
 *
p
 = (mu…ùÀxC⁄n*)
pC⁄n
;

947 
rc
;

948 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`mu…ùÀxSubO≥n
(
p
->
pGroup
, 0, &
rc
, 
NULL
, 0);

949 if–
pSubO≥n
 ){

950  
pSubO≥n
->
pMëhods
->
	`xU∆ock
’SubO≥n, 
lock
);

952  
SQLITE_IOERR_UNLOCK
;

953 
	}
}

957 
	$mu…ùÀxCheckRe£rvedLock
(
sqlôe3_fûe
 *
pC⁄n
, *
pResOut
){

958 
mu…ùÀxC⁄n
 *
p
 = (mu…ùÀxC⁄n*)
pC⁄n
;

959 
rc
;

960 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`mu…ùÀxSubO≥n
(
p
->
pGroup
, 0, &
rc
, 
NULL
, 0);

961 if–
pSubO≥n
 ){

962  
pSubO≥n
->
pMëhods
->
	`xCheckRe£rvedLock
’SubO≥n, 
pResOut
);

964  
SQLITE_IOERR_CHECKRESERVEDLOCK
;

965 
	}
}

970 
	$mu…ùÀxFûeC⁄åﬁ
(
sqlôe3_fûe
 *
pC⁄n
, 
›
, *
pArg
){

971 
mu…ùÀxC⁄n
 *
p
 = (mu…ùÀxC⁄n*)
pC⁄n
;

972 
mu…ùÀxGroup
 *
pGroup
 = 
p
->pGroup;

973 
rc
 = 
SQLITE_ERROR
;

974 
sqlôe3_fûe
 *
pSubO≥n
;

976 if–!
gMu…ùÀx
.
isInôülized
 )  
SQLITE_MISUSE
;

977  
›
 ){

978 
MULTIPLEX_CTRL_ENABLE
:

979 if–
pArg
 ) {

980 
bE«bÀd
 = *(*)
pArg
;

981 
pGroup
->
bE«bÀd
 = ()bEnabled;

982 
rc
 = 
SQLITE_OK
;

985 
MULTIPLEX_CTRL_SET_CHUNK_SIZE
:

986 if–
pArg
 ) {

987 
szChunk
 = *(*)
pArg
;

988 if–
szChunk
<1 ){

989 
rc
 = 
SQLITE_MISUSE
;

992 
szChunk
 = (szChunk + (
MAX_PAGE_SIZE
-1));

993 
szChunk
 &~(
MAX_PAGE_SIZE
-1);

994 
pGroup
->
szChunk
 = szChunk;

995 
rc
 = 
SQLITE_OK
;

999 
MULTIPLEX_CTRL_SET_MAX_CHUNKS
:

1000 
rc
 = 
SQLITE_OK
;

1002 
SQLITE_FCNTL_SIZE_HINT
:

1003 
SQLITE_FCNTL_CHUNK_SIZE
:

1005 
rc
 = 
SQLITE_OK
;

1007 
SQLITE_FCNTL_PRAGMA
: {

1008 **
aF˙é
 = (**)
pArg
;

1016 if–
aF˙é
[1] && 
	`sqlôe3_°ricmp
(aFcntl[1],"multiplex_truncate")==0 ){

1017 if–
aF˙é
[2] &&áFcntl[2][0] ){

1018 if–
	`sqlôe3_°ricmp
(
aF˙é
[2], "on")==0

1019 || 
	`sqlôe3_°ricmp
(
aF˙é
[2], "1")==0 ){

1020 
pGroup
->
bTrunˇã
 = 1;

1022 if–
	`sqlôe3_°ricmp
(
aF˙é
[2], "off")==0

1023 || 
	`sqlôe3_°ricmp
(
aF˙é
[2], "0")==0 ){

1024 
pGroup
->
bTrunˇã
 = 0;

1033 
aF˙é
[0] = 
	`sqlôe3_m¥ötf
(
pGroup
->
bTrunˇã
 ? "on" : "off");

1034 
rc
 = 
SQLITE_OK
;

1041 
pSubO≥n
 = 
	`mu…ùÀxSubO≥n
(
pGroup
, 0, &
rc
, 
NULL
, 0);

1042 if–
pSubO≥n
 ){

1043 
rc
 = 
pSubO≥n
->
pMëhods
->
	`xFûeC⁄åﬁ
’SubO≥n, 
›
, 
pArg
);

1044 if–
›
==
SQLITE_FCNTL_VFSNAME
 && 
rc
==
SQLITE_OK
 ){

1045 *(**)
pArg
 = 
	`sqlôe3_m¥ötf
("multiplex/%z", *(**)pArg);

1050  
rc
;

1051 
	}
}

1055 
	$mu…ùÀxSe˘‹Size
(
sqlôe3_fûe
 *
pC⁄n
){

1056 
mu…ùÀxC⁄n
 *
p
 = (mu…ùÀxC⁄n*)
pC⁄n
;

1057 
rc
;

1058 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`mu…ùÀxSubO≥n
(
p
->
pGroup
, 0, &
rc
, 
NULL
, 0);

1059 if–
pSubO≥n
 &&ÖSubO≥n->
pMëhods
->
xSe˘‹Size
 ){

1060  
pSubO≥n
->
pMëhods
->
	`xSe˘‹Size
(pSubOpen);

1062  
DEFAULT_SECTOR_SIZE
;

1063 
	}
}

1067 
	$mu…ùÀxDevi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
 *
pC⁄n
){

1068 
mu…ùÀxC⁄n
 *
p
 = (mu…ùÀxC⁄n*)
pC⁄n
;

1069 
rc
;

1070 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`mu…ùÀxSubO≥n
(
p
->
pGroup
, 0, &
rc
, 
NULL
, 0);

1071 if–
pSubO≥n
 ){

1072  
pSubO≥n
->
pMëhods
->
	`xDevi˚Ch¨a˘îi°ics
(pSubOpen);

1075 
	}
}

1079 
	$mu…ùÀxShmM≠
(

1080 
sqlôe3_fûe
 *
pC⁄n
,

1081 
iRegi⁄
,

1082 
szRegi⁄
,

1083 
bExãnd
,

1084 vﬁ©ûê**
µ


1086 
mu…ùÀxC⁄n
 *
p
 = (mu…ùÀxC⁄n*)
pC⁄n
;

1087 
rc
;

1088 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`mu…ùÀxSubO≥n
(
p
->
pGroup
, 0, &
rc
, 
NULL
, 0);

1089 if–
pSubO≥n
 ){

1090  
pSubO≥n
->
pMëhods
->
	`xShmM≠
’SubO≥n, 
iRegi⁄
, 
szRegi⁄
, 
bExãnd
,
µ
);

1092  
SQLITE_IOERR
;

1093 
	}
}

1097 
	$mu…ùÀxShmLock
(

1098 
sqlôe3_fûe
 *
pC⁄n
,

1099 
of°
,

1100 
n
,

1101 
Êags


1103 
mu…ùÀxC⁄n
 *
p
 = (mu…ùÀxC⁄n*)
pC⁄n
;

1104 
rc
;

1105 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`mu…ùÀxSubO≥n
(
p
->
pGroup
, 0, &
rc
, 
NULL
, 0);

1106 if–
pSubO≥n
 ){

1107  
pSubO≥n
->
pMëhods
->
	`xShmLock
’SubO≥n, 
of°
, 
n
, 
Êags
);

1109  
SQLITE_BUSY
;

1110 
	}
}

1114 
	$mu…ùÀxShmB¨rõr
(
sqlôe3_fûe
 *
pC⁄n
){

1115 
mu…ùÀxC⁄n
 *
p
 = (mu…ùÀxC⁄n*)
pC⁄n
;

1116 
rc
;

1117 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`mu…ùÀxSubO≥n
(
p
->
pGroup
, 0, &
rc
, 
NULL
, 0);

1118 if–
pSubO≥n
 ){

1119 
pSubO≥n
->
pMëhods
->
	`xShmB¨rõr
(pSubOpen);

1121 
	}
}

1125 
	$mu…ùÀxShmUnm≠
(
sqlôe3_fûe
 *
pC⁄n
, 
dñëeFœg
){

1126 
mu…ùÀxC⁄n
 *
p
 = (mu…ùÀxC⁄n*)
pC⁄n
;

1127 
rc
;

1128 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`mu…ùÀxSubO≥n
(
p
->
pGroup
, 0, &
rc
, 
NULL
, 0);

1129 if–
pSubO≥n
 ){

1130  
pSubO≥n
->
pMëhods
->
	`xShmUnm≠
’SubO≥n, 
dñëeFœg
);

1132  
SQLITE_OK
;

1133 
	}
}

1148 
	$sqlôe3_mu…ùÀx_öôülize
(c⁄° *
zOrigVfsName
, 
makeDeÁu…
){

1149 
sqlôe3_vfs
 *
pOrigVfs
;

1150 if–
gMu…ùÀx
.
isInôülized
 )  
SQLITE_MISUSE
;

1151 
pOrigVfs
 = 
	`sqlôe3_vfs_föd
(
zOrigVfsName
);

1152 if–
pOrigVfs
==0 )  
SQLITE_ERROR
;

1153 
	`as£π
–
pOrigVfs
!=&
gMu…ùÀx
.
sThisVfs
 );

1154 
gMu…ùÀx
.
pMuãx
 = 
	`sqlôe3_muãx_Æloc
(
SQLITE_MUTEX_FAST
);

1155 if–!
gMu…ùÀx
.
pMuãx
 ){

1156  
SQLITE_NOMEM
;

1158 
gMu…ùÀx
.
pGroups
 = 
NULL
;

1159 
gMu…ùÀx
.
isInôülized
 = 1;

1160 
gMu…ùÀx
.
pOrigVfs
 =ÖOrigVfs;

1161 
gMu…ùÀx
.
sThisVfs
 = *
pOrigVfs
;

1162 
gMu…ùÀx
.
sThisVfs
.
szOsFûe
 +(
mu…ùÀxC⁄n
);

1163 
gMu…ùÀx
.
sThisVfs
.
zName
 = 
SQLITE_MULTIPLEX_VFS_NAME
;

1164 
gMu…ùÀx
.
sThisVfs
.
xO≥n
 = 
mu…ùÀxO≥n
;

1165 
gMu…ùÀx
.
sThisVfs
.
xDñëe
 = 
mu…ùÀxDñëe
;

1166 
gMu…ùÀx
.
sThisVfs
.
xAc˚ss
 = 
mu…ùÀxAc˚ss
;

1167 
gMu…ùÀx
.
sThisVfs
.
xFuŒP©h«me
 = 
mu…ùÀxFuŒP©h«me
;

1168 
gMu…ùÀx
.
sThisVfs
.
xDlO≥n
 = 
mu…ùÀxDlO≥n
;

1169 
gMu…ùÀx
.
sThisVfs
.
xDlEº‹
 = 
mu…ùÀxDlEº‹
;

1170 
gMu…ùÀx
.
sThisVfs
.
xDlSym
 = 
mu…ùÀxDlSym
;

1171 
gMu…ùÀx
.
sThisVfs
.
xDlClo£
 = 
mu…ùÀxDlClo£
;

1172 
gMu…ùÀx
.
sThisVfs
.
xR™dom√ss
 = 
mu…ùÀxR™dom√ss
;

1173 
gMu…ùÀx
.
sThisVfs
.
xSÀï
 = 
mu…ùÀxSÀï
;

1174 
gMu…ùÀx
.
sThisVfs
.
xCuºítTime
 = 
mu…ùÀxCuºítTime
;

1175 
gMu…ùÀx
.
sThisVfs
.
xGëLa°Eº‹
 = 
mu…ùÀxGëLa°Eº‹
;

1176 
gMu…ùÀx
.
sThisVfs
.
xCuºítTimeI¡64
 = 
mu…ùÀxCuºítTimeI¡64
;

1178 
gMu…ùÀx
.
sIoMëhodsV1
.
iVîsi⁄
 = 1;

1179 
gMu…ùÀx
.
sIoMëhodsV1
.
xClo£
 = 
mu…ùÀxClo£
;

1180 
gMu…ùÀx
.
sIoMëhodsV1
.
xRód
 = 
mu…ùÀxRód
;

1181 
gMu…ùÀx
.
sIoMëhodsV1
.
xWrôe
 = 
mu…ùÀxWrôe
;

1182 
gMu…ùÀx
.
sIoMëhodsV1
.
xTrunˇã
 = 
mu…ùÀxTrunˇã
;

1183 
gMu…ùÀx
.
sIoMëhodsV1
.
xSync
 = 
mu…ùÀxSync
;

1184 
gMu…ùÀx
.
sIoMëhodsV1
.
xFûeSize
 = 
mu…ùÀxFûeSize
;

1185 
gMu…ùÀx
.
sIoMëhodsV1
.
xLock
 = 
mu…ùÀxLock
;

1186 
gMu…ùÀx
.
sIoMëhodsV1
.
xU∆ock
 = 
mu…ùÀxU∆ock
;

1187 
gMu…ùÀx
.
sIoMëhodsV1
.
xCheckRe£rvedLock
 = 
mu…ùÀxCheckRe£rvedLock
;

1188 
gMu…ùÀx
.
sIoMëhodsV1
.
xFûeC⁄åﬁ
 = 
mu…ùÀxFûeC⁄åﬁ
;

1189 
gMu…ùÀx
.
sIoMëhodsV1
.
xSe˘‹Size
 = 
mu…ùÀxSe˘‹Size
;

1190 
gMu…ùÀx
.
sIoMëhodsV1
.
xDevi˚Ch¨a˘îi°ics
 =

1191 
mu…ùÀxDevi˚Ch¨a˘îi°ics
;

1192 
gMu…ùÀx
.
sIoMëhodsV2
 = gMu…ùÀx.
sIoMëhodsV1
;

1193 
gMu…ùÀx
.
sIoMëhodsV2
.
iVîsi⁄
 = 2;

1194 
gMu…ùÀx
.
sIoMëhodsV2
.
xShmM≠
 = 
mu…ùÀxShmM≠
;

1195 
gMu…ùÀx
.
sIoMëhodsV2
.
xShmLock
 = 
mu…ùÀxShmLock
;

1196 
gMu…ùÀx
.
sIoMëhodsV2
.
xShmB¨rõr
 = 
mu…ùÀxShmB¨rõr
;

1197 
gMu…ùÀx
.
sIoMëhodsV2
.
xShmUnm≠
 = 
mu…ùÀxShmUnm≠
;

1198 
	`sqlôe3_vfs_ªgi°î
(&
gMu…ùÀx
.
sThisVfs
, 
makeDeÁu…
);

1200 
	`sqlôe3_auto_exãnsi⁄
((*)
mu…ùÀxFuncInô
);

1202  
SQLITE_OK
;

1203 
	}
}

1214 
	$sqlôe3_mu…ùÀx_shutdown
(
eF‹˚
){

1215 
rc
 = 
SQLITE_OK
;

1216 if–
gMu…ùÀx
.
isInôülized
==0 )  
SQLITE_MISUSE
;

1217 if–
gMu…ùÀx
.
pGroups
 ){

1218 
	`sqlôe3_log
(
SQLITE_MISUSE
, "sqlite3_multiplex_shutdown() called "

1220 if–!
eF‹˚
 )  
SQLITE_MISUSE
;

1221 
rc
 = 
SQLITE_MISUSE
;

1223 
gMu…ùÀx
.
isInôülized
 = 0;

1224 
	`sqlôe3_muãx_‰ì
(
gMu…ùÀx
.
pMuãx
);

1225 
	`sqlôe3_vfs_uƒegi°î
(&
gMu…ùÀx
.
sThisVfs
);

1226 
	`mem£t
(&
gMu…ùÀx
, 0, (gMultiplex));

1227  
rc
;

1228 
	}
}

1231 #ifde‡
SQLITE_TEST


1232 
	~<t˛.h
>

1233 c⁄° *
sqlôe3EºName
();

1239 
	$ã°_mu…ùÀx_öôülize
(

1240 * 
˛õ¡D©a
,

1241 
T˛_I¡îp
 *
öãΩ
,

1242 
objc
,

1243 
T˛_Obj
 *
CONST
 
objv
[]

1245 c⁄° *
zName
;

1246 
makeDeÁu…
;

1247 
rc
;

1249 
	`UNUSED_PARAMETER
(
˛õ¡D©a
);

1252 if–
objc
!=3 ){

1253 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "NAME MAKEDEFAULT");

1254  
TCL_ERROR
;

1256 
zName
 = 
	`T˛_GëSåög
(
objv
[1]);

1257 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[2], &
makeDeÁu…
ËË 
TCL_ERROR
;

1258 if–
zName
[0]=='\0' ) zName = 0;

1261 
rc
 = 
	`sqlôe3_mu…ùÀx_öôülize
(
zName
, 
makeDeÁu…
);

1262 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_STATIC
);

1264  
TCL_OK
;

1265 
	}
}

1270 
	$ã°_mu…ùÀx_shutdown
(

1271 * 
˛õ¡D©a
,

1272 
T˛_I¡îp
 *
öãΩ
,

1273 
objc
,

1274 
T˛_Obj
 *
CONST
 
objv
[]

1276 
rc
;

1278 
	`UNUSED_PARAMETER
(
˛õ¡D©a
);

1280 if–
objc
==2 && 
	`°rcmp
(
	`T˛_GëSåög
(
objv
[1]),"-force")!=0 ){

1281 
objc
 = 3;

1283 if–(
objc
!=1 && objc!=2) ){

1284 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "?-force?");

1285  
TCL_ERROR
;

1289 
rc
 = 
	`sqlôe3_mu…ùÀx_shutdown
(
objc
==2);

1290 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_STATIC
);

1292  
TCL_OK
;

1293 
	}
}

1298 
	$ã°_mu…ùÀx_dump
(

1299 * 
˛õ¡D©a
,

1300 
T˛_I¡îp
 *
öãΩ
,

1301 
objc
,

1302 
T˛_Obj
 *
CONST
 
objv
[]

1304 
T˛_Obj
 *
pResu…
;

1305 
T˛_Obj
 *
pGroupTîm
;

1306 
mu…ùÀxGroup
 *
pGroup
;

1307 
i
;

1308 
nChunks
 = 0;

1310 
	`UNUSED_PARAMETER
(
˛õ¡D©a
);

1311 
	`UNUSED_PARAMETER
(
objc
);

1312 
	`UNUSED_PARAMETER
(
objv
);

1314 
pResu…
 = 
	`T˛_NewObj
();

1315 
	`mu…ùÀxE¡î
();

1316 
pGroup
=
gMu…ùÀx
.
pGroups
;ÖGroup;ÖGroupıGroup->
pNext
){

1317 
pGroupTîm
 = 
	`T˛_NewObj
();

1319 if–
pGroup
->
zName
 ){

1320 
pGroup
->
zName
[pGroup->
nName
] = '\0';

1321 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pGroupTîm
,

1322 
	`T˛_NewSåögObj
(
pGroup
->
zName
, -1));

1324 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pGroupTîm
, 
	`T˛_NewObj
());

1326 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pGroupTîm
,

1327 
	`T˛_NewI¡Obj
(
pGroup
->
nName
));

1328 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pGroupTîm
,

1329 
	`T˛_NewI¡Obj
(
pGroup
->
Êags
));

1332 
i
=0; i<
pGroup
->
nRól
; i++){

1333 if–
pGroup
->
aRól
[
i
].
p
!=0 ) 
nChunks
++;

1335 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pGroupTîm
,

1336 
	`T˛_NewI¡Obj
(
nChunks
));

1338 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pGroupTîm
,

1339 
	`T˛_NewI¡Obj
(
pGroup
->
szChunk
));

1340 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pGroupTîm
,

1341 
	`T˛_NewI¡Obj
(
pGroup
->
nRól
));

1343 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pResu…
, 
pGroupTîm
);

1345 
	`mu…ùÀxLóve
();

1346 
	`T˛_SëObjResu…
(
öãΩ
, 
pResu…
);

1347  
TCL_OK
;

1348 
	}
}

1353 
	$ã°_mu…ùÀx_c⁄åﬁ
(

1354 
Clõ¡D©a
 
cd
,

1355 
T˛_I¡îp
 *
öãΩ
,

1356 
objc
,

1357 
T˛_Obj
 *
CONST
 
objv
[]

1359 
rc
;

1360 
idx
;

1361 
T˛_CmdInfo
 
cmdInfo
;

1362 
sqlôe3
 *
db
;

1363 
iVÆue
 = 0;

1364 *
pArg
 = 0;

1366 
	sSubComm™d
 {

1367 c⁄° *
zName
;

1368 
›
;

1369 
¨gty≥
;

1370 } 
aSub
[] = {

1371 { "íabÀ", 
MULTIPLEX_CTRL_ENABLE
, 1 },

1372 { "chunk_size", 
MULTIPLEX_CTRL_SET_CHUNK_SIZE
, 1 },

1373 { "max_chunks", 
MULTIPLEX_CTRL_SET_MAX_CHUNKS
, 1 },

1377 if–
objc
!=5 ){

1378 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "HANDLE DBNAME SUB-COMMAND INT-VALUE");

1379  
TCL_ERROR
;

1382 if–0==
	`T˛_GëComm™dInfo
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
cmdInfo
) ){

1383 
	`T˛_AµídResu…
(
öãΩ
, "expected database handle, got \"", 0);

1384 
	`T˛_AµídResu…
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), "\"", 0);

1385  
TCL_ERROR
;

1387 
db
 = *(
sqlôe3
 **)
cmdInfo
.
objClõ¡D©a
;

1390 
rc
 = 
	`T˛_GëIndexFromObjSåu˘
(

1391 
öãΩ
, 
objv
[3], 
aSub
, ◊Sub[0]), "sub-comm™d", 0, &
idx


1393 if–
rc
!=
TCL_OK
 ) Ñc;

1395  
aSub
[
idx
].
¨gty≥
 ){

1397 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[4], &
iVÆue
) ){

1398  
TCL_ERROR
;

1400 
pArg
 = (*)&
iVÆue
;

1403 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 4, 
objv
, "SUB-COMMAND");

1404  
TCL_ERROR
;

1407 
rc
 = 
	`sqlôe3_fûe_c⁄åﬁ
(
db
, 
	`T˛_GëSåög
(
objv
[2]), 
aSub
[
idx
].
›
, 
pArg
);

1408 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_STATIC
);

1409  (
rc
==
SQLITE_OK
Ë? 
TCL_OK
 : 
TCL_ERROR
;

1410 
	}
}

1417 
	$Sqlôemu…ùÀx_Inô
(
T˛_I¡îp
 *
öãΩ
){

1419 *
zName
;

1420 
T˛_ObjCmdProc
 *
xProc
;

1421 } 
aCmd
[] = {

1422 { "sqlôe3_mu…ùÀx_öôülize", 
ã°_mu…ùÀx_öôülize
 },

1423 { "sqlôe3_mu…ùÀx_shutdown", 
ã°_mu…ùÀx_shutdown
 },

1424 { "sqlôe3_mu…ùÀx_dump", 
ã°_mu…ùÀx_dump
 },

1425 { "sqlôe3_mu…ùÀx_c⁄åﬁ", 
ã°_mu…ùÀx_c⁄åﬁ
 },

1427 
i
;

1429 
i
=0; i<(
aCmd
)/(aCmd[0]); i++){

1430 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
aCmd
[
i
].
zName
,áCmd[i].
xProc
, 0, 0);

1433  
TCL_OK
;

1434 
	}
}

	@test_multiplex.h

23 #i‚de‡
_TEST_MULTIPLEX_H


24 
	#_TEST_MULTIPLEX_H


	)

45 
	#MULTIPLEX_CTRL_ENABLE
 214014

	)

46 
	#MULTIPLEX_CTRL_SET_CHUNK_SIZE
 214015

	)

47 
	#MULTIPLEX_CTRL_SET_MAX_CHUNKS
 214016

	)

49 #ifde‡
__˝lu•lus


82 
sqlôe3_mu…ùÀx_öôülize
(c⁄° *
zOrigVfsName
, 
makeDeÁu…
);

93 
sqlôe3_mu…ùÀx_shutdown
(
eF‹˚
);

95 #ifde‡
__˝lu•lus


	@test_mutex.c

15 
	~"t˛.h
"

16 
	~"sqlôe3.h
"

17 
	~"sqlôeI¡.h
"

18 
	~<°dlib.h
>

19 
	~<as£π.h
>

20 
	~<°rög.h
>

22 
	#MAX_MUTEXES
 (
SQLITE_MUTEX_STATIC_VFS3
+1)

	)

23 
	#STATIC_MUTEXES
 (
MAX_MUTEXES
-(
SQLITE_MUTEX_RECURSIVE
+1))

	)

26 c⁄° *
sqlôe3EºName
();

28 c⁄° *
	gaName
[
MAX_MUTEXES
+1] = {

36 
	ssqlôe3_muãx
 {

37 
sqlôe3_muãx
 *
	mpRól
;

38 
	meTy≥
;

42 
	sã°_muãx_globÆs
 {

43 
	misIn°ÆÀd
;

44 
	mdißbÀInô
;

45 
	mdißbÀTry
;

46 
	misInô
;

47 
sqlôe3_muãx_mëhods
 
	mm
;

48 
	maCou¡î
[
MAX_MUTEXES
];

49 
sqlôe3_muãx
 
	maSètic
[
STATIC_MUTEXES
];

50 } 
	gg
 = {0};

53 
	$cou¡îMuãxHñd
(
sqlôe3_muãx
 *
p
){

54  
g
.
m
.
	`xMuãxHñd
(
p
->
pRól
);

55 
	}
}

58 
	$cou¡îMuãxNŸhñd
(
sqlôe3_muãx
 *
p
){

59  
g
.
m
.
	`xMuãxNŸhñd
(
p
->
pRól
);

60 
	}
}

67 
	$cou¡îMuãxInô
(){

68 
rc
;

69 if–
g
.
dißbÀInô
 )  g.disableInit;

70 
rc
 = 
g
.
m
.
	`xMuãxInô
();

71 
g
.
isInô
 = 1;

72  
rc
;

73 
	}
}

78 
	$cou¡îMuãxEnd
(){

79 
g
.
isInô
 = 0;

80  
g
.
m
.
	`xMuãxEnd
();

81 
	}
}

86 
sqlôe3_muãx
 *
	$cou¡îMuãxAŒoc
(
eTy≥
){

87 
sqlôe3_muãx
 *
pRól
;

88 
sqlôe3_muãx
 *
pRë
 = 0;

90 
	`as£π
–
g
.
isInô
 );

91 
	`as£π
–
eTy≥
>=
SQLITE_MUTEX_FAST
 );

92 
	`as£π
–
eTy≥
<=
SQLITE_MUTEX_STATIC_VFS3
 );

94 
pRól
 = 
g
.
m
.
	`xMuãxAŒoc
(
eTy≥
);

95 if–!
pRól
 )  0;

97 if–
eTy≥
==
SQLITE_MUTEX_FAST
 ||ÉTy≥==
SQLITE_MUTEX_RECURSIVE
 ){

98 
pRë
 = (
sqlôe3_muãx
 *)
	`mÆloc
((sqlite3_mutex));

100 
eSèticTy≥
 = 
eTy≥
 - (
MAX_MUTEXES
 - 
STATIC_MUTEXES
);

101 
	`as£π
–
eSèticTy≥
>=0 );

102 
	`as£π
–
eSèticTy≥
<
STATIC_MUTEXES
 );

103 
pRë
 = &
g
.
aSètic
[
eSèticTy≥
];

106 
pRë
->
eTy≥
 =ÉType;

107 
pRë
->
pRól
 =ÖReal;

108  
pRë
;

109 
	}
}

114 
	$cou¡îMuãxFªe
(
sqlôe3_muãx
 *
p
){

115 
	`as£π
–
g
.
isInô
 );

116 
g
.
m
.
	`xMuãxFªe
(
p
->
pRól
);

117 if–
p
->
eTy≥
==
SQLITE_MUTEX_FAST
 ||Ö->eTy≥==
SQLITE_MUTEX_RECURSIVE
 ){

118 
	`‰ì
(
p
);

120 
	}
}

125 
	$cou¡îMuãxE¡î
(
sqlôe3_muãx
 *
p
){

126 
	`as£π
–
g
.
isInô
 );

127 
	`as£π
–
p
->
eTy≥
>=0 );

128 
	`as£π
–
p
->
eTy≥
<
MAX_MUTEXES
 );

129 
g
.
aCou¡î
[
p
->
eTy≥
]++;

130 
g
.
m
.
	`xMuãxE¡î
(
p
->
pRól
);

131 
	}
}

136 
	$cou¡îMuãxTry
(
sqlôe3_muãx
 *
p
){

137 
	`as£π
–
g
.
isInô
 );

138 
	`as£π
–
p
->
eTy≥
>=0 );

139 
	`as£π
–
p
->
eTy≥
<
MAX_MUTEXES
 );

140 
g
.
aCou¡î
[
p
->
eTy≥
]++;

141 if–
g
.
dißbÀTry
 )  
SQLITE_BUSY
;

142  
g
.
m
.
	`xMuãxTry
(
p
->
pRól
);

143 
	}
}

147 
	$cou¡îMuãxLóve
(
sqlôe3_muãx
 *
p
){

148 
	`as£π
–
g
.
isInô
 );

149 
g
.
m
.
	`xMuãxLóve
(
p
->
pRól
);

150 
	}
}

155 
	$ã°_shutdown
(

156 * 
˛õ¡D©a
,

157 
T˛_I¡îp
 *
öãΩ
,

158 
objc
,

159 
T˛_Obj
 *
CONST
 
objv
[]

161 
rc
;

163 if–
objc
!=1 ){

164 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

165  
TCL_ERROR
;

168 
rc
 = 
	`sqlôe3_shutdown
();

169 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_VOLATILE
);

170  
TCL_OK
;

171 
	}
}

176 
	$ã°_öôülize
(

177 * 
˛õ¡D©a
,

178 
T˛_I¡îp
 *
öãΩ
,

179 
objc
,

180 
T˛_Obj
 *
CONST
 
objv
[]

182 
rc
;

184 if–
objc
!=1 ){

185 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

186  
TCL_ERROR
;

189 
rc
 = 
	`sqlôe3_öôülize
();

190 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_VOLATILE
);

191  
TCL_OK
;

192 
	}
}

197 
	$ã°_ö°Æl_muãx_cou¡îs
(

198 * 
˛õ¡D©a
,

199 
T˛_I¡îp
 *
öãΩ
,

200 
objc
,

201 
T˛_Obj
 *
CONST
 
objv
[]

203 
rc
 = 
SQLITE_OK
;

204 
isIn°Æl
;

206 
sqlôe3_muãx_mëhods
 
cou¡î_mëhods
 = {

207 
cou¡îMuãxInô
,

208 
cou¡îMuãxEnd
,

209 
cou¡îMuãxAŒoc
,

210 
cou¡îMuãxFªe
,

211 
cou¡îMuãxE¡î
,

212 
cou¡îMuãxTry
,

213 
cou¡îMuãxLóve
,

214 
cou¡îMuãxHñd
,

215 
cou¡îMuãxNŸhñd


218 if–
objc
!=2 ){

219 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "BOOLEAN");

220  
TCL_ERROR
;

222 if–
TCL_OK
!=
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[1], &
isIn°Æl
) ){

223  
TCL_ERROR
;

226 
	`as£π
(
isIn°Æl
==0 || isInstall==1);

227 
	`as£π
(
g
.
isIn°ÆÀd
==0 || g.isInstalled==1);

228 if–
isIn°Æl
==
g
.
isIn°ÆÀd
 ){

229 
	`T˛_AµídResu…
(
öãΩ
, "mutex countersáre ", 0);

230 
	`T˛_AµídResu…
(
öãΩ
, 
isIn°Æl
?"already installed":"not installed", 0);

231  
TCL_ERROR
;

234 if–
isIn°Æl
 ){

235 
	`as£π
–
g
.
m
.
xMuãxAŒoc
==0 );

236 
rc
 = 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_GETMUTEX
, &
g
.
m
);

237 if–
rc
==
SQLITE_OK
 ){

238 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_MUTEX
, &
cou¡î_mëhods
);

240 
g
.
dißbÀTry
 = 0;

242 
	`as£π
–
g
.
m
.
xMuãxAŒoc
 );

243 
rc
 = 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_MUTEX
, &
g
.
m
);

244 
	`mem£t
(&
g
.
m
, 0, (
sqlôe3_muãx_mëhods
));

247 if–
rc
==
SQLITE_OK
 ){

248 
g
.
isIn°ÆÀd
 = 
isIn°Æl
;

251 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_VOLATILE
);

252  
TCL_OK
;

253 
	}
}

258 
	$ã°_ªad_muãx_cou¡îs
(

259 * 
˛õ¡D©a
,

260 
T˛_I¡îp
 *
öãΩ
,

261 
objc
,

262 
T˛_Obj
 *
CONST
 
objv
[]

264 
T˛_Obj
 *
pRë
;

265 
ii
;

267 if–
objc
!=1 ){

268 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

269  
TCL_ERROR
;

272 
pRë
 = 
	`T˛_NewObj
();

273 
	`T˛_In¸RefCou¡
(
pRë
);

274 
ii
=0; ii<
MAX_MUTEXES
; ii++){

275 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`T˛_NewSåögObj
(
aName
[
ii
], -1));

276 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`T˛_NewI¡Obj
(
g
.
aCou¡î
[
ii
]));

278 
	`T˛_SëObjResu…
(
öãΩ
, 
pRë
);

279 
	`T˛_De¸RefCou¡
(
pRë
);

281  
TCL_OK
;

282 
	}
}

287 
	$ã°_˛ór_muãx_cou¡îs
(

288 * 
˛õ¡D©a
,

289 
T˛_I¡îp
 *
öãΩ
,

290 
objc
,

291 
T˛_Obj
 *
CONST
 
objv
[]

293 
ii
;

295 if–
objc
!=1 ){

296 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

297  
TCL_ERROR
;

300 
ii
=0; ii<
MAX_MUTEXES
; ii++){

301 
g
.
aCou¡î
[
ii
] = 0;

303  
TCL_OK
;

304 
	}
}

311 
	$ã°_Æloc_muãx
(

312 * 
˛õ¡D©a
,

313 
T˛_I¡îp
 *
öãΩ
,

314 
objc
,

315 
T˛_Obj
 *
CONST
 
objv
[]

317 #i‡
SQLITE_THREADSAFE


318 
sqlôe3_muãx
 *
p
 = 
	`sqlôe3_muãx_Æloc
(
SQLITE_MUTEX_FAST
);

319 
zBuf
[100];

320 
	`sqlôe3_muãx_‰ì
(
p
);

321 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%p", 
p
);

322 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, (*)0);

324  
TCL_OK
;

325 
	}
}

338 
	$ã°_c⁄fig
(

339 * 
˛õ¡D©a
,

340 
T˛_I¡îp
 *
öãΩ
,

341 
objc
,

342 
T˛_Obj
 *
CONST
 
objv
[]

344 
	sC⁄figO±i⁄
 {

345 c⁄° *
zName
;

346 
iVÆue
;

347 } 
aO±
[] = {

348 {"sögÀthªad", 
SQLITE_CONFIG_SINGLETHREAD
},

349 {"mu…ôhªad", 
SQLITE_CONFIG_MULTITHREAD
},

350 {"£rülized", 
SQLITE_CONFIG_SERIALIZED
},

353 
s
 = (
C⁄figO±i⁄
);

354 
i
;

355 
rc
;

357 if–
objc
!=2 ){

358 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

359  
TCL_ERROR
;

362 if–
	`T˛_GëIndexFromObjSåu˘
(
öãΩ
, 
objv
[1], 
aO±
, 
s
, "Êag", 0, &
i
) ){

363 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
i
) ){

364  
TCL_ERROR
;

367 
i
 = 
aO±
[i].
iVÆue
;

370 
rc
 = 
	`sqlôe3_c⁄fig
(
i
);

371 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_VOLATILE
);

372  
TCL_OK
;

373 
	}
}

375 
sqlôe3
 *
	$gëDbPoöãr
(
T˛_I¡îp
 *
pI¡îp
, 
T˛_Obj
 *
pObj
){

376 
sqlôe3
 *
db
;

377 
T˛_CmdInfo
 
öfo
;

378 *
zCmd
 = 
	`T˛_GëSåög
(
pObj
);

379 if–
	`T˛_GëComm™dInfo
(
pI¡îp
, 
zCmd
, &
öfo
) ){

380 
db
 = *((
sqlôe3
 **)
öfo
.
objClõ¡D©a
);

382 
db
 = (
sqlôe3
*)
	`sqlôe3Te°TextToPå
(
zCmd
);

384 
	`as£π
–
db
 );

385  
db
;

386 
	}
}

388 
sqlôe3_muãx
 *
	$gëSèticMuãxPoöãr
(

389 
T˛_I¡îp
 *
pI¡îp
,

390 
T˛_Obj
 *
pObj


392 
iMuãx
;

393 if–
	`T˛_GëIndexFromObj
(
pI¡îp
, 
pObj
, 
aName
, "muãxÇame", 0, &
iMuãx
) ){

396 
	`as£π
–
iMuãx
!=
SQLITE_MUTEX_FAST
 && iMuãx!=
SQLITE_MUTEX_RECURSIVE
 );

397  
	`cou¡îMuãxAŒoc
(
iMuãx
);

398 
	}
}

400 
	$ã°_íãr_°©ic_muãx
(

401 * 
˛õ¡D©a
,

402 
T˛_I¡îp
 *
öãΩ
,

403 
objc
,

404 
T˛_Obj
 *
CONST
 
objv
[]

406 
sqlôe3_muãx
 *
pMuãx
;

407 if–
objc
!=2 ){

408 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "NAME");

409  
TCL_ERROR
;

411 
pMuãx
 = 
	`gëSèticMuãxPoöãr
(
öãΩ
, 
objv
[1]);

412 if–!
pMuãx
 ){

413  
TCL_ERROR
;

415 
	`sqlôe3_muãx_íãr
(
pMuãx
);

416  
TCL_OK
;

417 
	}
}

419 
	$ã°_Àave_°©ic_muãx
(

420 * 
˛õ¡D©a
,

421 
T˛_I¡îp
 *
öãΩ
,

422 
objc
,

423 
T˛_Obj
 *
CONST
 
objv
[]

425 
sqlôe3_muãx
 *
pMuãx
;

426 if–
objc
!=2 ){

427 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "NAME");

428  
TCL_ERROR
;

430 
pMuãx
 = 
	`gëSèticMuãxPoöãr
(
öãΩ
, 
objv
[1]);

431 if–!
pMuãx
 ){

432  
TCL_ERROR
;

434 
	`sqlôe3_muãx_Àave
(
pMuãx
);

435  
TCL_OK
;

436 
	}
}

438 
	$ã°_íãr_db_muãx
(

439 * 
˛õ¡D©a
,

440 
T˛_I¡îp
 *
öãΩ
,

441 
objc
,

442 
T˛_Obj
 *
CONST
 
objv
[]

444 
sqlôe3
 *
db
;

445 if–
objc
!=2 ){

446 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB");

447  
TCL_ERROR
;

449 
db
 = 
	`gëDbPoöãr
(
öãΩ
, 
objv
[1]);

450 if–!
db
 ){

451  
TCL_ERROR
;

453 
	`sqlôe3_muãx_íãr
(
	`sqlôe3_db_muãx
(
db
));

454  
TCL_OK
;

455 
	}
}

457 
	$ã°_Àave_db_muãx
(

458 * 
˛õ¡D©a
,

459 
T˛_I¡îp
 *
öãΩ
,

460 
objc
,

461 
T˛_Obj
 *
CONST
 
objv
[]

463 
sqlôe3
 *
db
;

464 if–
objc
!=2 ){

465 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB");

466  
TCL_ERROR
;

468 
db
 = 
	`gëDbPoöãr
(
öãΩ
, 
objv
[1]);

469 if–!
db
 ){

470  
TCL_ERROR
;

472 
	`sqlôe3_muãx_Àave
(
	`sqlôe3_db_muãx
(
db
));

473  
TCL_OK
;

474 
	}
}

476 
	$Sqlôëe°_muãx_Inô
(
T˛_I¡îp
 *
öãΩ
){

478 *
zName
;

479 
T˛_ObjCmdProc
 *
xProc
;

480 } 
aCmd
[] = {

481 { "sqlôe3_shutdown", (
T˛_ObjCmdProc
*)
ã°_shutdown
 },

482 { "sqlôe3_öôülize", (
T˛_ObjCmdProc
*)
ã°_öôülize
 },

483 { "sqlôe3_c⁄fig", (
T˛_ObjCmdProc
*)
ã°_c⁄fig
 },

485 { "íãr_°©ic_muãx", (
T˛_ObjCmdProc
*)
ã°_íãr_°©ic_muãx
 },

486 { "Àave_°©ic_muãx", (
T˛_ObjCmdProc
*)
ã°_Àave_°©ic_muãx
 },

488 { "íãr_db_muãx", (
T˛_ObjCmdProc
*)
ã°_íãr_db_muãx
 },

489 { "Àave_db_muãx", (
T˛_ObjCmdProc
*)
ã°_Àave_db_muãx
 },

491 { "Æloc_dóŒoc_muãx", (
T˛_ObjCmdProc
*)
ã°_Æloc_muãx
 },

492 { "ö°Æl_muãx_cou¡îs", (
T˛_ObjCmdProc
*)
ã°_ö°Æl_muãx_cou¡îs
 },

493 { "ªad_muãx_cou¡îs", (
T˛_ObjCmdProc
*)
ã°_ªad_muãx_cou¡îs
 },

494 { "˛ór_muãx_cou¡îs", (
T˛_ObjCmdProc
*)
ã°_˛ór_muãx_cou¡îs
 },

496 
i
;

497 
i
=0; i<(
aCmd
)/(aCmd[0]); i++){

498 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
aCmd
[
i
].
zName
,áCmd[i].
xProc
, 0, 0);

501 
	`T˛_LökV¨
(
öãΩ
, "disable_mutex_init",

502 (*)&
g
.
dißbÀInô
, 
TCL_LINK_INT
);

503 
	`T˛_LökV¨
(
öãΩ
, "disable_mutex_try",

504 (*)&
g
.
dißbÀTry
, 
TCL_LINK_INT
);

505  
SQLITE_OK
;

506 
	}
}

	@test_onefile.c

82 
	~"sqlôe3.h
"

83 
	~<as£π.h
>

84 
	~<°rög.h
>

89 
	#BLOCKSIZE
 512

	)

90 
	#BLOBSIZE
 10485760

	)

95 
	#FS_VFS_NAME
 "fs"

	)

97 
fs_ªÆ_fûe
 
	tfs_ªÆ_fûe
;

98 
	sfs_ªÆ_fûe
 {

99 
sqlôe3_fûe
 *
	mpFûe
;

100 c⁄° *
	mzName
;

101 
	mnD©aba£
;

102 
	mnJou∫Æ
;

103 
	mnBlob
;

104 
	mnRef
;

105 
fs_ªÆ_fûe
 *
	mpNext
;

106 
fs_ªÆ_fûe
 **
	mµThis
;

109 
fs_fûe
 
	tfs_fûe
;

110 
	sfs_fûe
 {

111 
sqlôe3_fûe
 
	mba£
;

112 
	meTy≥
;

113 
fs_ªÆ_fûe
 *
	mpRól
;

116 
tmp_fûe
 
	ttmp_fûe
;

117 
	stmp_fûe
 {

118 
sqlôe3_fûe
 
	mba£
;

119 
	mnSize
;

120 
	mnAŒoc
;

121 *
	mzAŒoc
;

125 
	#DATABASE_FILE
 1

	)

126 
	#JOURNAL_FILE
 2

	)

131 
fsClo£
(
sqlôe3_fûe
*);

132 
fsRód
(
sqlôe3_fûe
*, *, 
iAmt
, 
sqlôe3_öt64
 
iOf°
);

133 
fsWrôe
(
sqlôe3_fûe
*, c⁄° *, 
iAmt
, 
sqlôe3_öt64
 
iOf°
);

134 
fsTrunˇã
(
sqlôe3_fûe
*, 
sqlôe3_öt64
 
size
);

135 
fsSync
(
sqlôe3_fûe
*, 
Êags
);

136 
fsFûeSize
(
sqlôe3_fûe
*, 
sqlôe3_öt64
 *
pSize
);

137 
fsLock
(
sqlôe3_fûe
*, );

138 
fsU∆ock
(
sqlôe3_fûe
*, );

139 
fsCheckRe£rvedLock
(
sqlôe3_fûe
*, *
pResOut
);

140 
fsFûeC⁄åﬁ
(
sqlôe3_fûe
*, 
›
, *
pArg
);

141 
fsSe˘‹Size
(
sqlôe3_fûe
*);

142 
fsDevi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
*);

147 
tmpClo£
(
sqlôe3_fûe
*);

148 
tmpRód
(
sqlôe3_fûe
*, *, 
iAmt
, 
sqlôe3_öt64
 
iOf°
);

149 
tmpWrôe
(
sqlôe3_fûe
*, c⁄° *, 
iAmt
, 
sqlôe3_öt64
 
iOf°
);

150 
tmpTrunˇã
(
sqlôe3_fûe
*, 
sqlôe3_öt64
 
size
);

151 
tmpSync
(
sqlôe3_fûe
*, 
Êags
);

152 
tmpFûeSize
(
sqlôe3_fûe
*, 
sqlôe3_öt64
 *
pSize
);

153 
tmpLock
(
sqlôe3_fûe
*, );

154 
tmpU∆ock
(
sqlôe3_fûe
*, );

155 
tmpCheckRe£rvedLock
(
sqlôe3_fûe
*, *
pResOut
);

156 
tmpFûeC⁄åﬁ
(
sqlôe3_fûe
*, 
›
, *
pArg
);

157 
tmpSe˘‹Size
(
sqlôe3_fûe
*);

158 
tmpDevi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
*);

163 
fsO≥n
(
sqlôe3_vfs
*, c⁄° *, 
sqlôe3_fûe
*, , *);

164 
fsDñëe
(
sqlôe3_vfs
*, c⁄° *
zName
, 
syncDú
);

165 
fsAc˚ss
(
sqlôe3_vfs
*, c⁄° *
zName
, 
Êags
, *);

166 
fsFuŒP©h«me
(
sqlôe3_vfs
*, c⁄° *
zName
, 
nOut
,*
zOut
);

167 *
fsDlO≥n
(
sqlôe3_vfs
*, c⁄° *
zFûíame
);

168 
fsDlEº‹
(
sqlôe3_vfs
*, 
nByã
, *
zEºMsg
);

169 (*
	$fsDlSym
(
sqlôe3_vfs
*,*, c⁄° *
zSymbﬁ
))();

170 
	`fsDlClo£
(
sqlôe3_vfs
*, *);

171 
	`fsR™dom√ss
(
sqlôe3_vfs
*, 
nByã
, *
zOut
);

172 
	`fsSÀï
(
sqlôe3_vfs
*, 
mi¸o£c⁄ds
);

173 
	`fsCuºítTime
(
sqlôe3_vfs
*, *);

176 
fs_vfs_t
 
	tfs_vfs_t
;

177 
	sfs_vfs_t
 {

178 
sqlôe3_vfs
 
ba£
;

179 
fs_ªÆ_fûe
 *
pFûeLi°
;

180 
sqlôe3_vfs
 *
pP¨ít
;

183 
fs_vfs_t
 
fs_vfs
 = {

189 
FS_VFS_NAME
,

191 
fsO≥n
,

192 
fsDñëe
,

193 
fsAc˚ss
,

194 
fsFuŒP©h«me
,

195 
fsDlO≥n
,

196 
fsDlEº‹
,

197 
fsDlSym
,

198 
fsDlClo£
,

199 
fsR™dom√ss
,

200 
fsSÀï
,

201 
fsCuºítTime
,

206 
	}
};

208 
sqlôe3_io_mëhods
 
	gfs_io_mëhods
 = {

210 
fsClo£
,

211 
fsRód
,

212 
fsWrôe
,

213 
fsTrunˇã
,

214 
fsSync
,

215 
fsFûeSize
,

216 
fsLock
,

217 
fsU∆ock
,

218 
fsCheckRe£rvedLock
,

219 
fsFûeC⁄åﬁ
,

220 
fsSe˘‹Size
,

221 
fsDevi˚Ch¨a˘îi°ics
,

229 
sqlôe3_io_mëhods
 
	gtmp_io_mëhods
 = {

231 
tmpClo£
,

232 
tmpRód
,

233 
tmpWrôe
,

234 
tmpTrunˇã
,

235 
tmpSync
,

236 
tmpFûeSize
,

237 
tmpLock
,

238 
tmpU∆ock
,

239 
tmpCheckRe£rvedLock
,

240 
tmpFûeC⁄åﬁ
,

241 
tmpSe˘‹Size
,

242 
tmpDevi˚Ch¨a˘îi°ics
,

250 
	#MIN
(
x
,
y
Ë((x)<(y)?(x):(y))

	)

251 
	#MAX
(
x
,
y
Ë((x)>(y)?(x):(y))

	)

257 
	$tmpClo£
(
sqlôe3_fûe
 *
pFûe
){

258 
tmp_fûe
 *
pTmp
 = (tmp_fûê*)
pFûe
;

259 
	`sqlôe3_‰ì
(
pTmp
->
zAŒoc
);

260  
SQLITE_OK
;

261 
	}
}

266 
	$tmpRód
(

267 
sqlôe3_fûe
 *
pFûe
,

268 *
zBuf
,

269 
iAmt
,

270 
sqlôe_öt64
 
iOf°


272 
tmp_fûe
 *
pTmp
 = (tmp_fûê*)
pFûe
;

273 if–(
iAmt
+
iOf°
)>
pTmp
->
nSize
 ){

274  
SQLITE_IOERR_SHORT_READ
;

276 
	`mem˝y
(
zBuf
, &
pTmp
->
zAŒoc
[
iOf°
], 
iAmt
);

277  
SQLITE_OK
;

278 
	}
}

283 
	$tmpWrôe
(

284 
sqlôe3_fûe
 *
pFûe
,

285 c⁄° *
zBuf
,

286 
iAmt
,

287 
sqlôe_öt64
 
iOf°


289 
tmp_fûe
 *
pTmp
 = (tmp_fûê*)
pFûe
;

290 if–(
iAmt
+
iOf°
)>
pTmp
->
nAŒoc
 ){

291 
nNew
 = ()(2*(
iAmt
+
iOf°
+
pTmp
->
nAŒoc
));

292 *
zNew
 = 
	`sqlôe3_ªÆloc
(
pTmp
->
zAŒoc
, 
nNew
);

293 if–!
zNew
 ){

294  
SQLITE_NOMEM
;

296 
pTmp
->
zAŒoc
 = 
zNew
;

297 
pTmp
->
nAŒoc
 = 
nNew
;

299 
	`mem˝y
(&
pTmp
->
zAŒoc
[
iOf°
], 
zBuf
, 
iAmt
);

300 
pTmp
->
nSize
 = ()
	`MAX
’Tmp->nSize, 
iOf°
+
iAmt
);

301  
SQLITE_OK
;

302 
	}
}

307 
	$tmpTrunˇã
(
sqlôe3_fûe
 *
pFûe
, 
sqlôe_öt64
 
size
){

308 
tmp_fûe
 *
pTmp
 = (tmp_fûê*)
pFûe
;

309 
pTmp
->
nSize
 = ()
	`MIN
’Tmp->nSize, 
size
);

310  
SQLITE_OK
;

311 
	}
}

316 
	$tmpSync
(
sqlôe3_fûe
 *
pFûe
, 
Êags
){

317  
SQLITE_OK
;

318 
	}
}

323 
	$tmpFûeSize
(
sqlôe3_fûe
 *
pFûe
, 
sqlôe_öt64
 *
pSize
){

324 
tmp_fûe
 *
pTmp
 = (tmp_fûê*)
pFûe
;

325 *
pSize
 = 
pTmp
->
nSize
;

326  
SQLITE_OK
;

327 
	}
}

332 
	$tmpLock
(
sqlôe3_fûe
 *
pFûe
, 
eLock
){

333  
SQLITE_OK
;

334 
	}
}

339 
	$tmpU∆ock
(
sqlôe3_fûe
 *
pFûe
, 
eLock
){

340  
SQLITE_OK
;

341 
	}
}

346 
	$tmpCheckRe£rvedLock
(
sqlôe3_fûe
 *
pFûe
, *
pResOut
){

347 *
pResOut
 = 0;

348  
SQLITE_OK
;

349 
	}
}

354 
	$tmpFûeC⁄åﬁ
(
sqlôe3_fûe
 *
pFûe
, 
›
, *
pArg
){

355  
SQLITE_OK
;

356 
	}
}

361 
	$tmpSe˘‹Size
(
sqlôe3_fûe
 *
pFûe
){

363 
	}
}

368 
	$tmpDevi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
 *
pFûe
){

370 
	}
}

375 
	$fsClo£
(
sqlôe3_fûe
 *
pFûe
){

376 
rc
 = 
SQLITE_OK
;

377 
fs_fûe
 *
p
 = (fs_fûê*)
pFûe
;

378 
fs_ªÆ_fûe
 *
pRól
 = 
p
->pReal;

381 
pRól
->
nRef
--;

382 
	`as£π
(
pRól
->
nRef
>=0);

385 if–
pRól
->
nRef
==0 ){

386 *
pRól
->
µThis
 =ÖRól->
pNext
;

387 if–
pRól
->
pNext
 ){

388 
pRól
->
pNext
->
µThis
 =ÖReal->ppThis;

390 
rc
 = 
pRól
->
pFûe
->
pMëhods
->
	`xClo£
(pReal->pFile);

391 
	`sqlôe3_‰ì
(
pRól
);

394  
rc
;

395 
	}
}

400 
	$fsRód
(

401 
sqlôe3_fûe
 *
pFûe
,

402 *
zBuf
,

403 
iAmt
,

404 
sqlôe_öt64
 
iOf°


406 
rc
 = 
SQLITE_OK
;

407 
fs_fûe
 *
p
 = (fs_fûê*)
pFûe
;

408 
fs_ªÆ_fûe
 *
pRól
 = 
p
->pReal;

409 
sqlôe3_fûe
 *
pF
 = 
pRól
->
pFûe
;

411 if–(
p
->
eTy≥
==
DATABASE_FILE
 && (
iAmt
+
iOf°
)>
pRól
->
nD©aba£
)

412 || (
p
->
eTy≥
==
JOURNAL_FILE
 && (
iAmt
+
iOf°
)>
pRól
->
nJou∫Æ
)

414 
rc
 = 
SQLITE_IOERR_SHORT_READ
;

415 }if–
p
->
eTy≥
==
DATABASE_FILE
 ){

416 
rc
 = 
pF
->
pMëhods
->
	`xRód
’F, 
zBuf
, 
iAmt
, 
iOf°
+
BLOCKSIZE
);

419 
iRem
 = 
iAmt
;

420 
iBuf
 = 0;

421 
ii
 = ()
iOf°
;

422  
iRem
>0 && 
rc
==
SQLITE_OK
 ){

423 
iRólOff
 = 
pRól
->
nBlob
 - 
BLOCKSIZE
*((
ii
/BLOCKSIZE)+1) + ii%BLOCKSIZE;

424 
iRólAmt
 = 
	`MIN
(
iRem
, 
BLOCKSIZE
 - (
iRólOff
%BLOCKSIZE));

426 
rc
 = 
pF
->
pMëhods
->
	`xRód
’F, &((*)
zBuf
)[
iBuf
], 
iRólAmt
, 
iRólOff
);

427 
ii
 +
iRólAmt
;

428 
iBuf
 +
iRólAmt
;

429 
iRem
 -
iRólAmt
;

433  
rc
;

434 
	}
}

439 
	$fsWrôe
(

440 
sqlôe3_fûe
 *
pFûe
,

441 c⁄° *
zBuf
,

442 
iAmt
,

443 
sqlôe_öt64
 
iOf°


445 
rc
 = 
SQLITE_OK
;

446 
fs_fûe
 *
p
 = (fs_fûê*)
pFûe
;

447 
fs_ªÆ_fûe
 *
pRól
 = 
p
->pReal;

448 
sqlôe3_fûe
 *
pF
 = 
pRól
->
pFûe
;

450 if–
p
->
eTy≥
==
DATABASE_FILE
 ){

451 if–(
iAmt
+
iOf°
+
BLOCKSIZE
)>(
pRól
->
nBlob
-pRól->
nJou∫Æ
) ){

452 
rc
 = 
SQLITE_FULL
;

454 
rc
 = 
pF
->
pMëhods
->
	`xWrôe
’F, 
zBuf
, 
iAmt
, 
iOf°
+
BLOCKSIZE
);

455 if–
rc
==
SQLITE_OK
 ){

456 
pRól
->
nD©aba£
 = ()
	`MAX
’Ról->nD©aba£, 
iAmt
+
iOf°
);

461 
iRem
 = 
iAmt
;

462 
iBuf
 = 0;

463 
ii
 = ()
iOf°
;

464  
iRem
>0 && 
rc
==
SQLITE_OK
 ){

465 
iRólOff
 = 
pRól
->
nBlob
 - 
BLOCKSIZE
*((
ii
/BLOCKSIZE)+1) + ii%BLOCKSIZE;

466 
iRólAmt
 = 
	`MIN
(
iRem
, 
BLOCKSIZE
 - (
iRólOff
%BLOCKSIZE));

468 if–
iRólOff
<(
pRól
->
nD©aba£
+
BLOCKSIZE
) ){

469 
rc
 = 
SQLITE_FULL
;

471 
rc
 = 
pF
->
pMëhods
->
	`xWrôe
’F, &((*)
zBuf
)[
iBuf
], 
iRólAmt
,
iRólOff
);

472 
ii
 +
iRólAmt
;

473 
iBuf
 +
iRólAmt
;

474 
iRem
 -
iRólAmt
;

477 if–
rc
==
SQLITE_OK
 ){

478 
pRól
->
nJou∫Æ
 = ()
	`MAX
’Ról->nJou∫Æ, 
iAmt
+
iOf°
);

482  
rc
;

483 
	}
}

488 
	$fsTrunˇã
(
sqlôe3_fûe
 *
pFûe
, 
sqlôe_öt64
 
size
){

489 
fs_fûe
 *
p
 = (fs_fûê*)
pFûe
;

490 
fs_ªÆ_fûe
 *
pRól
 = 
p
->pReal;

491 if–
p
->
eTy≥
==
DATABASE_FILE
 ){

492 
pRól
->
nD©aba£
 = ()
	`MIN
’Ról->nD©aba£, 
size
);

494 
pRól
->
nJou∫Æ
 = ()
	`MIN
’Ról->nJou∫Æ, 
size
);

496  
SQLITE_OK
;

497 
	}
}

502 
	$fsSync
(
sqlôe3_fûe
 *
pFûe
, 
Êags
){

503 
fs_fûe
 *
p
 = (fs_fûê*)
pFûe
;

504 
fs_ªÆ_fûe
 *
pRól
 = 
p
->pReal;

505 
sqlôe3_fûe
 *
pRólFûe
 = 
pRól
->
pFûe
;

506 
rc
 = 
SQLITE_OK
;

508 if–
p
->
eTy≥
==
DATABASE_FILE
 ){

509 
zSize
[4];

510 
zSize
[0] = (
pRól
->
nD©aba£
&0xFF000000)>>24;

511 
zSize
[1] = ()((
pRól
->
nD©aba£
&0x00FF0000)>>16);

512 
zSize
[2] = (
pRól
->
nD©aba£
&0x0000FF00)>>8;

513 
zSize
[3] = (
pRól
->
nD©aba£
&0x000000FF);

514 
rc
 = 
pRólFûe
->
pMëhods
->
	`xWrôe
’RólFûe, 
zSize
, 4, 0);

516 if–
rc
==
SQLITE_OK
 ){

517 
rc
 = 
pRólFûe
->
pMëhods
->
	`xSync
’RólFûe, 
Êags
&(~
SQLITE_SYNC_DATAONLY
));

520  
rc
;

521 
	}
}

526 
	$fsFûeSize
(
sqlôe3_fûe
 *
pFûe
, 
sqlôe_öt64
 *
pSize
){

527 
fs_fûe
 *
p
 = (fs_fûê*)
pFûe
;

528 
fs_ªÆ_fûe
 *
pRól
 = 
p
->pReal;

529 if–
p
->
eTy≥
==
DATABASE_FILE
 ){

530 *
pSize
 = 
pRól
->
nD©aba£
;

532 *
pSize
 = 
pRól
->
nJou∫Æ
;

534  
SQLITE_OK
;

535 
	}
}

540 
	$fsLock
(
sqlôe3_fûe
 *
pFûe
, 
eLock
){

541  
SQLITE_OK
;

542 
	}
}

547 
	$fsU∆ock
(
sqlôe3_fûe
 *
pFûe
, 
eLock
){

548  
SQLITE_OK
;

549 
	}
}

554 
	$fsCheckRe£rvedLock
(
sqlôe3_fûe
 *
pFûe
, *
pResOut
){

555 *
pResOut
 = 0;

556  
SQLITE_OK
;

557 
	}
}

562 
	$fsFûeC⁄åﬁ
(
sqlôe3_fûe
 *
pFûe
, 
›
, *
pArg
){

563  
SQLITE_OK
;

564 
	}
}

569 
	$fsSe˘‹Size
(
sqlôe3_fûe
 *
pFûe
){

570  
BLOCKSIZE
;

571 
	}
}

576 
	$fsDevi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
 *
pFûe
){

578 
	}
}

583 
	$fsO≥n
(

584 
sqlôe3_vfs
 *
pVfs
,

585 c⁄° *
zName
,

586 
sqlôe3_fûe
 *
pFûe
,

587 
Êags
,

588 *
pOutFœgs


590 
fs_vfs_t
 *
pFsVfs
 = (fs_vfs_à*)
pVfs
;

591 
fs_fûe
 *
p
 = (fs_fûê*)
pFûe
;

592 
fs_ªÆ_fûe
 *
pRól
 = 0;

593 
eTy≥
;

594 
nName
;

595 
rc
 = 
SQLITE_OK
;

597 if–0==(
Êags
&(
SQLITE_OPEN_MAIN_DB
|
SQLITE_OPEN_MAIN_JOURNAL
)) ){

598 
tmp_fûe
 *
p2
 = (tmp_fûê*)
pFûe
;

599 
	`mem£t
(
p2
, 0, (*p2));

600 
p2
->
ba£
.
pMëhods
 = &
tmp_io_mëhods
;

601  
SQLITE_OK
;

604 
eTy≥
 = ((
Êags
&(
SQLITE_OPEN_MAIN_DB
))?
DATABASE_FILE
:
JOURNAL_FILE
);

605 
p
->
ba£
.
pMëhods
 = &
fs_io_mëhods
;

606 
p
->
eTy≥
 =ÉType;

608 
	`as£π
(
	`°æí
("-journal")==8);

609 
nName
 = ()
	`°æí
(
zName
)-((
eTy≥
==
JOURNAL_FILE
)?8:0);

610 
pRól
=
pFsVfs
->
pFûeLi°
;

611 ; 
pRól
 && 
	`°∫cmp
’Ról->
zName
, zName, 
nName
);ÖRólıRól->
pNext
);

613 if–!
pRól
 ){

614 
ªÆ_Êags
 = (
Êags
&~(
SQLITE_OPEN_MAIN_DB
))|
SQLITE_OPEN_TEMP_DB
;

615 
sqlôe3_öt64
 
size
;

616 
sqlôe3_fûe
 *
pRólFûe
;

617 
sqlôe3_vfs
 *
pP¨ít
 = 
pFsVfs
->pParent;

618 
	`as£π
(
eTy≥
==
DATABASE_FILE
);

620 
pRól
 = (
fs_ªÆ_fûe
 *)
	`sqlôe3_mÆloc
((*pRól)+
pP¨ít
->
szOsFûe
);

621 if–!
pRól
 ){

622 
rc
 = 
SQLITE_NOMEM
;

623 
›í_out
;

625 
	`mem£t
(
pRól
, 0, (*pRól)+
pP¨ít
->
szOsFûe
);

626 
pRól
->
zName
 = zName;

627 
pRól
->
pFûe
 = (
sqlôe3_fûe
 *)(&pReal[1]);

629 
rc
 = 
pP¨ít
->
	`xO≥n
’P¨ít, 
zName
, 
pRól
->
pFûe
, 
ªÆ_Êags
, 
pOutFœgs
);

630 if–
rc
!=
SQLITE_OK
 ){

631 
›í_out
;

633 
pRólFûe
 = 
pRól
->
pFûe
;

635 
rc
 = 
pRólFûe
->
pMëhods
->
	`xFûeSize
’RólFûe, &
size
);

636 if–
rc
!=
SQLITE_OK
 ){

637 
›í_out
;

639 if–
size
==0 ){

640 
rc
 = 
pRólFûe
->
pMëhods
->
	`xWrôe
’RólFûe, "\0", 1, 
BLOBSIZE
-1);

641 
pRól
->
nBlob
 = 
BLOBSIZE
;

643 
zS
[4];

644 
pRól
->
nBlob
 = ()
size
;

645 
rc
 = 
pRólFûe
->
pMëhods
->
	`xRód
’RólFûe, 
zS
, 4, 0);

646 
pRól
->
nD©aba£
 = (
zS
[0]<<24)+(zS[1]<<16)+(zS[2]<<8)+zS[3];

647 if–
rc
==
SQLITE_OK
 ){

648 
rc
 = 
pRólFûe
->
pMëhods
->
	`xRód
’RólFûe, 
zS
, 4, 
pRól
->
nBlob
-4);

649 if–
zS
[0] || zS[1] || zS[2] || zS[3] ){

650 
pRól
->
nJou∫Æ
 =ÖRól->
nBlob
;

655 if–
rc
==
SQLITE_OK
 ){

656 
pRól
->
pNext
 = 
pFsVfs
->
pFûeLi°
;

657 if–
pRól
->
pNext
 ){

658 
pRól
->
pNext
->
µThis
 = &pReal->pNext;

660 
pRól
->
µThis
 = &
pFsVfs
->
pFûeLi°
;

661 
pFsVfs
->
pFûeLi°
 = 
pRól
;

665 
›í_out
:

666 if–
pRól
 ){

667 if–
rc
==
SQLITE_OK
 ){

668 
p
->
pRól
 =ÖReal;

669 
pRól
->
nRef
++;

671 if–
pRól
->
pFûe
->
pMëhods
 ){

672 
pRól
->
pFûe
->
pMëhods
->
	`xClo£
(pReal->pFile);

674 
	`sqlôe3_‰ì
(
pRól
);

677  
rc
;

678 
	}
}

685 
	$fsDñëe
(
sqlôe3_vfs
 *
pVfs
, c⁄° *
zP©h
, 
dúSync
){

686 
rc
 = 
SQLITE_OK
;

687 
fs_vfs_t
 *
pFsVfs
 = (fs_vfs_à*)
pVfs
;

688 
fs_ªÆ_fûe
 *
pRól
;

689 
sqlôe3_fûe
 *
pF
;

690 
nName
 = ()
	`°æí
(
zP©h
) - 8;

692 
	`as£π
(
	`°æí
("-journal")==8);

693 
	`as£π
(
	`°rcmp
("-jou∫Æ", &
zP©h
[
nName
])==0);

695 
pRól
 = 
pFsVfs
->
pFûeLi°
;

696 ; 
pRól
 && 
	`°∫cmp
’Ról->
zName
, 
zP©h
, 
nName
);ÖRólıRól->
pNext
);

697 if–
pRól
 ){

698 
pF
 = 
pRól
->
pFûe
;

699 
rc
 = 
pF
->
pMëhods
->
	`xWrôe
’F, "\0\0\0\0", 4, 
pRól
->
nBlob
-
BLOCKSIZE
);

700 if–
rc
==
SQLITE_OK
 ){

701 
pRól
->
nJou∫Æ
 = 0;

704  
rc
;

705 
	}
}

711 
	$fsAc˚ss
(

712 
sqlôe3_vfs
 *
pVfs
,

713 c⁄° *
zP©h
,

714 
Êags
,

715 *
pResOut


717 
fs_vfs_t
 *
pFsVfs
 = (fs_vfs_à*)
pVfs
;

718 
fs_ªÆ_fûe
 *
pRól
;

719 
isJou∫Æ
 = 0;

720 
nName
 = ()
	`°æí
(
zP©h
);

722 if–
Êags
!=
SQLITE_ACCESS_EXISTS
 ){

723 
sqlôe3_vfs
 *
pP¨ít
 = ((
fs_vfs_t
 *)
pVfs
)->pParent;

724  
pP¨ít
->
	`xAc˚ss
’P¨ít, 
zP©h
, 
Êags
, 
pResOut
);

727 
	`as£π
(
	`°æí
("-journal")==8);

728 if–
nName
>8 && 
	`°rcmp
("-jou∫Æ", &
zP©h
[nName-8])==0 ){

729 
nName
 -= 8;

730 
isJou∫Æ
 = 1;

733 
pRól
 = 
pFsVfs
->
pFûeLi°
;

734 ; 
pRól
 && 
	`°∫cmp
’Ról->
zName
, 
zP©h
, 
nName
);ÖRólıRól->
pNext
);

736 *
pResOut
 = (
pRól
 && (!
isJou∫Æ
 ||ÖRól->
nJou∫Æ
>0));

737  
SQLITE_OK
;

738 
	}
}

745 
	$fsFuŒP©h«me
(

746 
sqlôe3_vfs
 *
pVfs
,

747 c⁄° *
zP©h
,

748 
nOut
,

749 *
zOut


751 
sqlôe3_vfs
 *
pP¨ít
 = ((
fs_vfs_t
 *)
pVfs
)->pParent;

752  
pP¨ít
->
	`xFuŒP©h«me
’P¨ít, 
zP©h
, 
nOut
, 
zOut
);

753 
	}
}

758 *
	$fsDlO≥n
(
sqlôe3_vfs
 *
pVfs
, c⁄° *
zP©h
){

759 
sqlôe3_vfs
 *
pP¨ít
 = ((
fs_vfs_t
 *)
pVfs
)->pParent;

760  
pP¨ít
->
	`xDlO≥n
’P¨ít, 
zP©h
);

761 
	}
}

768 
	$fsDlEº‹
(
sqlôe3_vfs
 *
pVfs
, 
nByã
, *
zEºMsg
){

769 
sqlôe3_vfs
 *
pP¨ít
 = ((
fs_vfs_t
 *)
pVfs
)->pParent;

770 
pP¨ít
->
	`xDlEº‹
’P¨ít, 
nByã
, 
zEºMsg
);

771 
	}
}

776 (*
	$fsDlSym
(
sqlôe3_vfs
 *
pVfs
, *
pH
, c⁄° *
zSym
))(){

777 
sqlôe3_vfs
 *
pP¨ít
 = ((
fs_vfs_t
 *)
pVfs
)->pParent;

778  
pP¨ít
->
	`xDlSym
’P¨ít, 
pH
, 
zSym
);

779 
	}
}

784 
	$fsDlClo£
(
sqlôe3_vfs
 *
pVfs
, *
pH™dÀ
){

785 
sqlôe3_vfs
 *
pP¨ít
 = ((
fs_vfs_t
 *)
pVfs
)->pParent;

786 
pP¨ít
->
	`xDlClo£
’P¨ít, 
pH™dÀ
);

787 
	}
}

793 
	$fsR™dom√ss
(
sqlôe3_vfs
 *
pVfs
, 
nByã
, *
zBufOut
){

794 
sqlôe3_vfs
 *
pP¨ít
 = ((
fs_vfs_t
 *)
pVfs
)->pParent;

795  
pP¨ít
->
	`xR™dom√ss
’P¨ít, 
nByã
, 
zBufOut
);

796 
	}
}

802 
	$fsSÀï
(
sqlôe3_vfs
 *
pVfs
, 
nMi¸o
){

803 
sqlôe3_vfs
 *
pP¨ít
 = ((
fs_vfs_t
 *)
pVfs
)->pParent;

804  
pP¨ít
->
	`xSÀï
’P¨ít, 
nMi¸o
);

805 
	}
}

810 
	$fsCuºítTime
(
sqlôe3_vfs
 *
pVfs
, *
pTimeOut
){

811 
sqlôe3_vfs
 *
pP¨ít
 = ((
fs_vfs_t
 *)
pVfs
)->pParent;

812  
pP¨ít
->
	`xCuºítTime
’P¨ít, 
pTimeOut
);

813 
	}
}

820 
	$fs_ªgi°î
(){

821 if–
fs_vfs
.
pP¨ít
 )  
SQLITE_OK
;

822 
fs_vfs
.
pP¨ít
 = 
	`sqlôe3_vfs_föd
(0);

823 
fs_vfs
.
ba£
.
mxP©h«me
 = fs_vfs.
pP¨ít
->mxPathname;

824 
fs_vfs
.
ba£
.
szOsFûe
 = 
	`MAX
((
tmp_fûe
), (
fs_fûe
));

825  
	`sqlôe3_vfs_ªgi°î
(&
fs_vfs
.
ba£
, 0);

826 
	}
}

828 #ifde‡
SQLITE_TEST


829 
	$Sqlôëe°O√fûe_Inô
(Ë{ 
	`fs_ªgi°î
();
	}
}

	@test_osinst.c

72 
	~"sqlôe3.h
"

74 
	~"os_£tup.h
"

75 #i‡
SQLITE_OS_WIN


76 
	~"os_wö.h
"

79 
	~<°rög.h
>

80 
	~<as£π.h
>

86 
	#INST_MAX_PATHNAME
 512

	)

88 
	#OS_ACCESS
 1

	)

89 
	#OS_CHECKRESERVEDLOCK
 2

	)

90 
	#OS_CLOSE
 3

	)

91 
	#OS_CURRENTTIME
 4

	)

92 
	#OS_DELETE
 5

	)

93 
	#OS_DEVCHAR
 6

	)

94 
	#OS_FILECONTROL
 7

	)

95 
	#OS_FILESIZE
 8

	)

96 
	#OS_FULLPATHNAME
 9

	)

97 
	#OS_LOCK
 11

	)

98 
	#OS_OPEN
 12

	)

99 
	#OS_RANDOMNESS
 13

	)

100 
	#OS_READ
 14

	)

101 
	#OS_SECTORSIZE
 15

	)

102 
	#OS_SLEEP
 16

	)

103 
	#OS_SYNC
 17

	)

104 
	#OS_TRUNCATE
 18

	)

105 
	#OS_UNLOCK
 19

	)

106 
	#OS_WRITE
 20

	)

107 
	#OS_SHMUNMAP
 22

	)

108 
	#OS_SHMMAP
 23

	)

109 
	#OS_SHMLOCK
 25

	)

110 
	#OS_SHMBARRIER
 26

	)

111 
	#OS_ANNOTATE
 28

	)

113 
	#OS_NUMEVENTS
 29

	)

115 
	#VFSLOG_BUFFERSIZE
 8192

	)

117 
Vf¶ogVfs
 
	tVf¶ogVfs
;

118 
Vf¶ogFûe
 
	tVf¶ogFûe
;

120 
	sVf¶ogVfs
 {

121 
sqlôe3_vfs
 
	mba£
;

122 
sqlôe3_vfs
 *
	mpVfs
;

123 
	miNextFûeId
;

124 
sqlôe3_fûe
 *
	mpLog
;

125 
sqlôe3_öt64
 
	miOff£t
;

126 
	mnBuf
;

127 
	maBuf
[
VFSLOG_BUFFERSIZE
];

130 
	sVf¶ogFûe
 {

131 
sqlôe3_fûe
 
	mba£
;

132 
sqlôe3_fûe
 *
	mpRól
;

133 
sqlôe3_vfs
 *
	mpVf¶og
;

134 
	miFûeId
;

137 
	#REALVFS
(
p
Ë(((
Vf¶ogVfs
 *)’))->
pVfs
)

	)

144 
vf¶ogClo£
(
sqlôe3_fûe
*);

145 
vf¶ogRód
(
sqlôe3_fûe
*, *, 
iAmt
, 
sqlôe3_öt64
 
iOf°
);

146 
vf¶ogWrôe
(
sqlôe3_fûe
*,c⁄° *,
iAmt
, 
sqlôe3_öt64
 
iOf°
);

147 
vf¶ogTrunˇã
(
sqlôe3_fûe
*, 
sqlôe3_öt64
 
size
);

148 
vf¶ogSync
(
sqlôe3_fûe
*, 
Êags
);

149 
vf¶ogFûeSize
(
sqlôe3_fûe
*, 
sqlôe3_öt64
 *
pSize
);

150 
vf¶ogLock
(
sqlôe3_fûe
*, );

151 
vf¶ogU∆ock
(
sqlôe3_fûe
*, );

152 
vf¶ogCheckRe£rvedLock
(
sqlôe3_fûe
*, *
pResOut
);

153 
vf¶ogFûeC⁄åﬁ
(
sqlôe3_fûe
*, 
›
, *
pArg
);

154 
vf¶ogSe˘‹Size
(
sqlôe3_fûe
*);

155 
vf¶ogDevi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
*);

157 
vf¶ogShmLock
(
sqlôe3_fûe
 *
pFûe
, 
of°
, 
n
, 
Êags
);

158 
vf¶ogShmM≠
(
sqlôe3_fûe
 *
pFûe
,,,,volatile **);

159 
vf¶ogShmB¨rõr
(
sqlôe3_fûe
*);

160 
vf¶ogShmUnm≠
(
sqlôe3_fûe
 *
pFûe
, 
dñëeFœg
);

165 
vf¶ogO≥n
(
sqlôe3_vfs
*, c⁄° *, 
sqlôe3_fûe
*, , *);

166 
vf¶ogDñëe
(
sqlôe3_vfs
*, c⁄° *
zName
, 
syncDú
);

167 
vf¶ogAc˚ss
(
sqlôe3_vfs
*, c⁄° *
zName
, 
Êags
, *);

168 
vf¶ogFuŒP©h«me
(
sqlôe3_vfs
*, c⁄° *
zName
, , *
zOut
);

169 *
vf¶ogDlO≥n
(
sqlôe3_vfs
*, c⁄° *
zFûíame
);

170 
vf¶ogDlEº‹
(
sqlôe3_vfs
*, 
nByã
, *
zEºMsg
);

171 (*
	$vf¶ogDlSym
(
sqlôe3_vfs
 *
pVfs
, *
p
, c⁄° *
zSym
))();

172 
	`vf¶ogDlClo£
(
sqlôe3_vfs
*, *);

173 
	`vf¶ogR™dom√ss
(
sqlôe3_vfs
*, 
nByã
, *
zOut
);

174 
	`vf¶ogSÀï
(
sqlôe3_vfs
*, 
mi¸o£c⁄ds
);

175 
	`vf¶ogCuºítTime
(
sqlôe3_vfs
*, *);

177 
	`vf¶ogGëLa°Eº‹
(
sqlôe3_vfs
*, , *);

178 
	`vf¶ogCuºítTimeI¡64
(
sqlôe3_vfs
*, 
sqlôe3_öt64
*);

180 
sqlôe3_vfs
 
vf¶og_vfs
 = {

182 (
Vf¶ogFûe
),

183 
INST_MAX_PATHNAME
,

187 
vf¶ogO≥n
,

188 
vf¶ogDñëe
,

189 
vf¶ogAc˚ss
,

190 
vf¶ogFuŒP©h«me
,

191 
vf¶ogDlO≥n
,

192 
vf¶ogDlEº‹
,

193 
vf¶ogDlSym
,

194 
vf¶ogDlClo£
,

195 
vf¶ogR™dom√ss
,

196 
vf¶ogSÀï
,

197 
vf¶ogCuºítTime
,

198 
vf¶ogGëLa°Eº‹
,

199 
vf¶ogCuºítTimeI¡64


200 
	}
};

202 
sqlôe3_io_mëhods
 
	gvf¶og_io_mëhods
 = {

204 
vf¶ogClo£
,

205 
vf¶ogRód
,

206 
vf¶ogWrôe
,

207 
vf¶ogTrunˇã
,

208 
vf¶ogSync
,

209 
vf¶ogFûeSize
,

210 
vf¶ogLock
,

211 
vf¶ogU∆ock
,

212 
vf¶ogCheckRe£rvedLock
,

213 
vf¶ogFûeC⁄åﬁ
,

214 
vf¶ogSe˘‹Size
,

215 
vf¶ogDevi˚Ch¨a˘îi°ics
,

216 
vf¶ogShmM≠
,

217 
vf¶ogShmLock
,

218 
vf¶ogShmB¨rõr
,

219 
vf¶ogShmUnm≠


222 #i‡
SQLITE_OS_UNIX
 && !
deföed
(
NO_GETTOD
)

223 
	~<sys/time.h
>

224 
sqlôe3_uöt64
 
	$vf¶og_time
(){

225 
timevÆ
 
sTime
;

226 
	`gëtimeofday
(&
sTime
, 0);

227  
sTime
.
tv_u£c
 + (
sqlôe3_uöt64
)sTime.
tv_£c
 * 1000000;

228 
	}
}

229 #ñi‡
SQLITE_OS_WIN


230 
	~<time.h
>

231 
sqlôe3_uöt64
 
	$vf¶og_time
(){

232 
FILETIME
 
·
;

233 
sqlôe3_uöt64
 
u64time
 = 0;

235 
	`GëSy°emTimeAsFûeTime
(&
·
);

237 
u64time
 |
·
.
dwHighD©eTime
;

238 
u64time
 <<= 32;

239 
u64time
 |
·
.
dwLowD©eTime
;

242  
u64time
 /(
sqlôe3_uöt64
)10;

243 
	}
}

245 
sqlôe3_uöt64
 
	$vf¶og_time
(){

247 
	}
}

250 
vf¶og_ˇŒ
(
sqlôe3_vfs
 *, , , 
sqlôe3_öt64
, , , );

251 
vf¶og_°rög
(
sqlôe3_vfs
 *, const *);

256 
	$vf¶ogClo£
(
sqlôe3_fûe
 *
pFûe
){

257 
sqlôe3_uöt64
 
t
;

258 
rc
 = 
SQLITE_OK
;

259 
Vf¶ogFûe
 *
p
 = (Vf¶ogFûê*)
pFûe
;

261 
t
 = 
	`vf¶og_time
();

262 if–
p
->
pRól
->
pMëhods
 ){

263 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xClo£
(p->pReal);

265 
t
 = 
	`vf¶og_time
() -Å;

266 
	`vf¶og_ˇŒ
(
p
->
pVf¶og
, 
OS_CLOSE
,Ö->
iFûeId
, 
t
, 
rc
, 0, 0);

267  
rc
;

268 
	}
}

273 
	$vf¶ogRód
(

274 
sqlôe3_fûe
 *
pFûe
,

275 *
zBuf
,

276 
iAmt
,

277 
sqlôe_öt64
 
iOf°


279 
rc
;

280 
sqlôe3_uöt64
 
t
;

281 
Vf¶ogFûe
 *
p
 = (Vf¶ogFûê*)
pFûe
;

282 
t
 = 
	`vf¶og_time
();

283 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xRód
’->pRól, 
zBuf
, 
iAmt
, 
iOf°
);

284 
t
 = 
	`vf¶og_time
() -Å;

285 
	`vf¶og_ˇŒ
(
p
->
pVf¶og
, 
OS_READ
,Ö->
iFûeId
, 
t
, 
rc
, 
iAmt
, ()
iOf°
);

286  
rc
;

287 
	}
}

292 
	$vf¶ogWrôe
(

293 
sqlôe3_fûe
 *
pFûe
,

294 c⁄° *
z
,

295 
iAmt
,

296 
sqlôe_öt64
 
iOf°


298 
rc
;

299 
sqlôe3_uöt64
 
t
;

300 
Vf¶ogFûe
 *
p
 = (Vf¶ogFûê*)
pFûe
;

301 
t
 = 
	`vf¶og_time
();

302 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xWrôe
’->pRól, 
z
, 
iAmt
, 
iOf°
);

303 
t
 = 
	`vf¶og_time
() -Å;

304 
	`vf¶og_ˇŒ
(
p
->
pVf¶og
, 
OS_WRITE
,Ö->
iFûeId
, 
t
, 
rc
, 
iAmt
, ()
iOf°
);

305  
rc
;

306 
	}
}

311 
	$vf¶ogTrunˇã
(
sqlôe3_fûe
 *
pFûe
, 
sqlôe_öt64
 
size
){

312 
rc
;

313 
sqlôe3_uöt64
 
t
;

314 
Vf¶ogFûe
 *
p
 = (Vf¶ogFûê*)
pFûe
;

315 
t
 = 
	`vf¶og_time
();

316 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xTrunˇã
’->pRól, 
size
);

317 
t
 = 
	`vf¶og_time
() -Å;

318 
	`vf¶og_ˇŒ
(
p
->
pVf¶og
, 
OS_TRUNCATE
,Ö->
iFûeId
, 
t
, 
rc
, 0, ()
size
);

319  
rc
;

320 
	}
}

325 
	$vf¶ogSync
(
sqlôe3_fûe
 *
pFûe
, 
Êags
){

326 
rc
;

327 
sqlôe3_uöt64
 
t
;

328 
Vf¶ogFûe
 *
p
 = (Vf¶ogFûê*)
pFûe
;

329 
t
 = 
	`vf¶og_time
();

330 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xSync
’->pRól, 
Êags
);

331 
t
 = 
	`vf¶og_time
() -Å;

332 
	`vf¶og_ˇŒ
(
p
->
pVf¶og
, 
OS_SYNC
,Ö->
iFûeId
, 
t
, 
rc
, 
Êags
, 0);

333  
rc
;

334 
	}
}

339 
	$vf¶ogFûeSize
(
sqlôe3_fûe
 *
pFûe
, 
sqlôe_öt64
 *
pSize
){

340 
rc
;

341 
sqlôe3_uöt64
 
t
;

342 
Vf¶ogFûe
 *
p
 = (Vf¶ogFûê*)
pFûe
;

343 
t
 = 
	`vf¶og_time
();

344 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xFûeSize
’->pRól, 
pSize
);

345 
t
 = 
	`vf¶og_time
() -Å;

346 
	`vf¶og_ˇŒ
(
p
->
pVf¶og
, 
OS_FILESIZE
,Ö->
iFûeId
, 
t
, 
rc
, 0, ()*
pSize
);

347  
rc
;

348 
	}
}

353 
	$vf¶ogLock
(
sqlôe3_fûe
 *
pFûe
, 
eLock
){

354 
rc
;

355 
sqlôe3_uöt64
 
t
;

356 
Vf¶ogFûe
 *
p
 = (Vf¶ogFûê*)
pFûe
;

357 
t
 = 
	`vf¶og_time
();

358 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xLock
’->pRól, 
eLock
);

359 
t
 = 
	`vf¶og_time
() -Å;

360 
	`vf¶og_ˇŒ
(
p
->
pVf¶og
, 
OS_LOCK
,Ö->
iFûeId
, 
t
, 
rc
, 
eLock
, 0);

361  
rc
;

362 
	}
}

367 
	$vf¶ogU∆ock
(
sqlôe3_fûe
 *
pFûe
, 
eLock
){

368 
rc
;

369 
sqlôe3_uöt64
 
t
;

370 
Vf¶ogFûe
 *
p
 = (Vf¶ogFûê*)
pFûe
;

371 
t
 = 
	`vf¶og_time
();

372 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xU∆ock
’->pRól, 
eLock
);

373 
t
 = 
	`vf¶og_time
() -Å;

374 
	`vf¶og_ˇŒ
(
p
->
pVf¶og
, 
OS_UNLOCK
,Ö->
iFûeId
, 
t
, 
rc
, 
eLock
, 0);

375  
rc
;

376 
	}
}

381 
	$vf¶ogCheckRe£rvedLock
(
sqlôe3_fûe
 *
pFûe
, *
pResOut
){

382 
rc
;

383 
sqlôe3_uöt64
 
t
;

384 
Vf¶ogFûe
 *
p
 = (Vf¶ogFûê*)
pFûe
;

385 
t
 = 
	`vf¶og_time
();

386 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xCheckRe£rvedLock
’->pRól, 
pResOut
);

387 
t
 = 
	`vf¶og_time
() -Å;

388 
	`vf¶og_ˇŒ
(
p
->
pVf¶og
, 
OS_CHECKRESERVEDLOCK
,Ö->
iFûeId
, 
t
, 
rc
, *
pResOut
, 0);

389  
rc
;

390 
	}
}

395 
	$vf¶ogFûeC⁄åﬁ
(
sqlôe3_fûe
 *
pFûe
, 
›
, *
pArg
){

396 
Vf¶ogFûe
 *
p
 = (Vf¶ogFûê*)
pFûe
;

397 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xFûeC⁄åﬁ
’->pRól, 
›
, 
pArg
);

398 if–
›
==
SQLITE_FCNTL_VFSNAME
 && 
rc
==
SQLITE_OK
 ){

399 *(**)
pArg
 = 
	`sqlôe3_m¥ötf
("vfslog/%z", *(**)pArg);

401  
rc
;

402 
	}
}

407 
	$vf¶ogSe˘‹Size
(
sqlôe3_fûe
 *
pFûe
){

408 
rc
;

409 
sqlôe3_uöt64
 
t
;

410 
Vf¶ogFûe
 *
p
 = (Vf¶ogFûê*)
pFûe
;

411 
t
 = 
	`vf¶og_time
();

412 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xSe˘‹Size
(p->pReal);

413 
t
 = 
	`vf¶og_time
() -Å;

414 
	`vf¶og_ˇŒ
(
p
->
pVf¶og
, 
OS_SECTORSIZE
,Ö->
iFûeId
, 
t
, 
rc
, 0, 0);

415  
rc
;

416 
	}
}

421 
	$vf¶ogDevi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
 *
pFûe
){

422 
rc
;

423 
sqlôe3_uöt64
 
t
;

424 
Vf¶ogFûe
 *
p
 = (Vf¶ogFûê*)
pFûe
;

425 
t
 = 
	`vf¶og_time
();

426 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xDevi˚Ch¨a˘îi°ics
(p->pReal);

427 
t
 = 
	`vf¶og_time
() -Å;

428 
	`vf¶og_ˇŒ
(
p
->
pVf¶og
, 
OS_DEVCHAR
,Ö->
iFûeId
, 
t
, 
rc
, 0, 0);

429  
rc
;

430 
	}
}

432 
	$vf¶ogShmLock
(
sqlôe3_fûe
 *
pFûe
, 
of°
, 
n
, 
Êags
){

433 
rc
;

434 
sqlôe3_uöt64
 
t
;

435 
Vf¶ogFûe
 *
p
 = (Vf¶ogFûê*)
pFûe
;

436 
t
 = 
	`vf¶og_time
();

437 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xShmLock
’->pRól, 
of°
, 
n
, 
Êags
);

438 
t
 = 
	`vf¶og_time
() -Å;

439 
	`vf¶og_ˇŒ
(
p
->
pVf¶og
, 
OS_SHMLOCK
,Ö->
iFûeId
, 
t
, 
rc
, 0, 0);

440  
rc
;

441 
	}
}

442 
	$vf¶ogShmM≠
(

443 
sqlôe3_fûe
 *
pFûe
,

444 
iRegi⁄
,

445 
szRegi⁄
,

446 
isWrôe
,

447 vﬁ©ûê**
µ


449 
rc
;

450 
sqlôe3_uöt64
 
t
;

451 
Vf¶ogFûe
 *
p
 = (Vf¶ogFûê*)
pFûe
;

452 
t
 = 
	`vf¶og_time
();

453 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xShmM≠
’->pRól, 
iRegi⁄
, 
szRegi⁄
, 
isWrôe
, 
µ
);

454 
t
 = 
	`vf¶og_time
() -Å;

455 
	`vf¶og_ˇŒ
(
p
->
pVf¶og
, 
OS_SHMMAP
,Ö->
iFûeId
, 
t
, 
rc
, 0, 0);

456  
rc
;

457 
	}
}

458 
	$vf¶ogShmB¨rõr
(
sqlôe3_fûe
 *
pFûe
){

459 
sqlôe3_uöt64
 
t
;

460 
Vf¶ogFûe
 *
p
 = (Vf¶ogFûê*)
pFûe
;

461 
t
 = 
	`vf¶og_time
();

462 
p
->
pRól
->
pMëhods
->
	`xShmB¨rõr
(p->pReal);

463 
t
 = 
	`vf¶og_time
() -Å;

464 
	`vf¶og_ˇŒ
(
p
->
pVf¶og
, 
OS_SHMBARRIER
,Ö->
iFûeId
, 
t
, 
SQLITE_OK
, 0, 0);

465 
	}
}

466 
	$vf¶ogShmUnm≠
(
sqlôe3_fûe
 *
pFûe
, 
dñëeFœg
){

467 
rc
;

468 
sqlôe3_uöt64
 
t
;

469 
Vf¶ogFûe
 *
p
 = (Vf¶ogFûê*)
pFûe
;

470 
t
 = 
	`vf¶og_time
();

471 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xShmUnm≠
’->pRól, 
dñëeFœg
);

472 
t
 = 
	`vf¶og_time
() -Å;

473 
	`vf¶og_ˇŒ
(
p
->
pVf¶og
, 
OS_SHMUNMAP
,Ö->
iFûeId
, 
t
, 
rc
, 0, 0);

474  
rc
;

475 
	}
}

481 
	$vf¶ogO≥n
(

482 
sqlôe3_vfs
 *
pVfs
,

483 c⁄° *
zName
,

484 
sqlôe3_fûe
 *
pFûe
,

485 
Êags
,

486 *
pOutFœgs


488 
rc
;

489 
sqlôe3_uöt64
 
t
;

490 
Vf¶ogFûe
 *
p
 = (Vf¶ogFûê*)
pFûe
;

491 
Vf¶ogVfs
 *
pLog
 = (Vf¶ogVf†*)
pVfs
;

493 
pFûe
->
pMëhods
 = &
vf¶og_io_mëhods
;

494 
p
->
pRól
 = (
sqlôe3_fûe
 *)&p[1];

495 
p
->
pVf¶og
 = 
pVfs
;

496 
p
->
iFûeId
 = ++
pLog
->
iNextFûeId
;

498 
t
 = 
	`vf¶og_time
();

499 
rc
 = 
	`REALVFS
(
pVfs
)->
	`xO≥n
(REALVFS’Vfs), 
zName
, 
p
->
pRól
, 
Êags
, 
pOutFœgs
);

500 
t
 = 
	`vf¶og_time
() -Å;

502 
	`vf¶og_ˇŒ
(
pVfs
, 
OS_OPEN
, 
p
->
iFûeId
, 
t
, 
rc
, 0, 0);

503 
	`vf¶og_°rög
(
pVfs
, 
zName
);

504  
rc
;

505 
	}
}

512 
	$vf¶ogDñëe
(
sqlôe3_vfs
 *
pVfs
, c⁄° *
zP©h
, 
dúSync
){

513 
rc
;

514 
sqlôe3_uöt64
 
t
;

515 
t
 = 
	`vf¶og_time
();

516 
rc
 = 
	`REALVFS
(
pVfs
)->
	`xDñëe
(REALVFS’Vfs), 
zP©h
, 
dúSync
);

517 
t
 = 
	`vf¶og_time
() -Å;

518 
	`vf¶og_ˇŒ
(
pVfs
, 
OS_DELETE
, 0, 
t
, 
rc
, 
dúSync
, 0);

519 
	`vf¶og_°rög
(
pVfs
, 
zP©h
);

520  
rc
;

521 
	}
}

527 
	$vf¶ogAc˚ss
(

528 
sqlôe3_vfs
 *
pVfs
,

529 c⁄° *
zP©h
,

530 
Êags
,

531 *
pResOut


533 
rc
;

534 
sqlôe3_uöt64
 
t
;

535 
t
 = 
	`vf¶og_time
();

536 
rc
 = 
	`REALVFS
(
pVfs
)->
	`xAc˚ss
(REALVFS’Vfs), 
zP©h
, 
Êags
, 
pResOut
);

537 
t
 = 
	`vf¶og_time
() -Å;

538 
	`vf¶og_ˇŒ
(
pVfs
, 
OS_ACCESS
, 0, 
t
, 
rc
, 
Êags
, *
pResOut
);

539 
	`vf¶og_°rög
(
pVfs
, 
zP©h
);

540  
rc
;

541 
	}
}

548 
	$vf¶ogFuŒP©h«me
(

549 
sqlôe3_vfs
 *
pVfs
,

550 c⁄° *
zP©h
,

551 
nOut
,

552 *
zOut


554  
	`REALVFS
(
pVfs
)->
	`xFuŒP©h«me
(REALVFS’Vfs), 
zP©h
, 
nOut
, 
zOut
);

555 
	}
}

560 *
	$vf¶ogDlO≥n
(
sqlôe3_vfs
 *
pVfs
, c⁄° *
zP©h
){

561  
	`REALVFS
(
pVfs
)->
	`xDlO≥n
(REALVFS’Vfs), 
zP©h
);

562 
	}
}

569 
	$vf¶ogDlEº‹
(
sqlôe3_vfs
 *
pVfs
, 
nByã
, *
zEºMsg
){

570 
	`REALVFS
(
pVfs
)->
	`xDlEº‹
(REALVFS’Vfs), 
nByã
, 
zEºMsg
);

571 
	}
}

576 (*
	$vf¶ogDlSym
(
sqlôe3_vfs
 *
pVfs
, *
p
, c⁄° *
zSym
))(){

577  
	`REALVFS
(
pVfs
)->
	`xDlSym
(REALVFS’Vfs), 
p
, 
zSym
);

578 
	}
}

583 
	$vf¶ogDlClo£
(
sqlôe3_vfs
 *
pVfs
, *
pH™dÀ
){

584 
	`REALVFS
(
pVfs
)->
	`xDlClo£
(REALVFS’Vfs), 
pH™dÀ
);

585 
	}
}

591 
	$vf¶ogR™dom√ss
(
sqlôe3_vfs
 *
pVfs
, 
nByã
, *
zBufOut
){

592  
	`REALVFS
(
pVfs
)->
	`xR™dom√ss
(REALVFS’Vfs), 
nByã
, 
zBufOut
);

593 
	}
}

599 
	$vf¶ogSÀï
(
sqlôe3_vfs
 *
pVfs
, 
nMi¸o
){

600  
	`REALVFS
(
pVfs
)->
	`xSÀï
(REALVFS’Vfs), 
nMi¸o
);

601 
	}
}

606 
	$vf¶ogCuºítTime
(
sqlôe3_vfs
 *
pVfs
, *
pTimeOut
){

607  
	`REALVFS
(
pVfs
)->
	`xCuºítTime
(REALVFS’Vfs), 
pTimeOut
);

608 
	}
}

610 
	$vf¶ogGëLa°Eº‹
(
sqlôe3_vfs
 *
pVfs
, 
a
, *
b
){

611  
	`REALVFS
(
pVfs
)->
	`xGëLa°Eº‹
(REALVFS’Vfs), 
a
, 
b
);

612 
	}
}

613 
	$vf¶ogCuºítTimeI¡64
(
sqlôe3_vfs
 *
pVfs
, 
sqlôe3_öt64
 *
p
){

614  
	`REALVFS
(
pVfs
)->
	`xCuºítTimeI¡64
(REALVFS’Vfs), 
p
);

615 
	}
}

617 
	$vf¶og_Êush
(
Vf¶ogVfs
 *
p
){

618 #ifde‡
SQLITE_TEST


619 
sqlôe3_io_îr‹_≥ndög
;

620 
sqlôe3_io_îr‹_≥rsi°
;

621 
sqlôe3_diskfuŒ_≥ndög
;

623 
≥ndög
 = 
sqlôe3_io_îr‹_≥ndög
;

624 
≥rsi°
 = 
sqlôe3_io_îr‹_≥rsi°
;

625 
diskfuŒ
 = 
sqlôe3_diskfuŒ_≥ndög
;

627 
sqlôe3_io_îr‹_≥ndög
 = 0;

628 
sqlôe3_io_îr‹_≥rsi°
 = 0;

629 
sqlôe3_diskfuŒ_≥ndög
 = 0;

632 if–
p
->
nBuf
 ){

633 
p
->
pLog
->
pMëhods
->
	`xWrôe
’->pLog,Ö->
aBuf
,Ö->
nBuf
,Ö->
iOff£t
);

634 
p
->
iOff£t
 +p->
nBuf
;

635 
p
->
nBuf
 = 0;

638 #ifde‡
SQLITE_TEST


639 
sqlôe3_io_îr‹_≥ndög
 = 
≥ndög
;

640 
sqlôe3_io_îr‹_≥rsi°
 = 
≥rsi°
;

641 
sqlôe3_diskfuŒ_≥ndög
 = 
diskfuŒ
;

643 
	}
}

645 
	$put32bôs
(*
p
, 
v
){

646 
p
[0] = 
v
>>24;

647 
p
[1] = ()(
v
>>16);

648 
p
[2] = ()(
v
>>8);

649 
p
[3] = ()
v
;

650 
	}
}

652 
	$vf¶og_ˇŒ
(

653 
sqlôe3_vfs
 *
pVfs
,

654 
eEvít
,

655 
iFûeid
,

656 
sqlôe3_öt64
 
nClick
,

657 
ªtu∫_code
,

658 
size
,

659 
off£t


661 
Vf¶ogVfs
 *
p
 = (Vf¶ogVf†*)
pVfs
;

662 *
zRec
;

663 if–(24+
p
->
nBuf
)>’->
aBuf
) ){

664 
	`vf¶og_Êush
(
p
);

666 
zRec
 = (*)&
p
->
aBuf
[p->
nBuf
];

667 
	`put32bôs
(&
zRec
[0], 
eEvít
);

668 
	`put32bôs
(&
zRec
[4], 
iFûeid
);

669 
	`put32bôs
(&
zRec
[8], ()(
nClick
&0xffff));

670 
	`put32bôs
(&
zRec
[12], 
ªtu∫_code
);

671 
	`put32bôs
(&
zRec
[16], 
size
);

672 
	`put32bôs
(&
zRec
[20], 
off£t
);

673 
p
->
nBuf
 += 24;

674 
	}
}

676 
	$vf¶og_°rög
(
sqlôe3_vfs
 *
pVfs
, c⁄° *
zSå
){

677 
Vf¶ogVfs
 *
p
 = (Vf¶ogVf†*)
pVfs
;

678 *
zRec
;

679 
nSå
 = 
zSå
 ? ()
	`°æí
(zStr) : 0;

680 if–(4+
nSå
+
p
->
nBuf
)>’->
aBuf
) ){

681 
	`vf¶og_Êush
(
p
);

683 
zRec
 = (*)&
p
->
aBuf
[p->
nBuf
];

684 
	`put32bôs
(&
zRec
[0], 
nSå
);

685 if–
zSå
 ){

686 
	`mem˝y
(&
zRec
[4], 
zSå
, 
nSå
);

688 
p
->
nBuf
 +(4 + 
nSå
);

689 
	}
}

691 
	$vf¶og_föÆize
(
Vf¶ogVfs
 *
p
){

692 if–
p
->
pLog
->
pMëhods
 ){

693 
	`vf¶og_Êush
(
p
);

694 
p
->
pLog
->
pMëhods
->
	`xClo£
(p->pLog);

696 
	`sqlôe3_‰ì
(
p
);

697 
	}
}

699 
	$sqlôe3_vf¶og_föÆize
(c⁄° *
zVfs
){

700 
sqlôe3_vfs
 *
pVfs
;

701 
pVfs
 = 
	`sqlôe3_vfs_föd
(
zVfs
);

702 if–!
pVfs
 ||ÖVfs->
xO≥n
!=
vf¶ogO≥n
 ){

703  
SQLITE_ERROR
;

705 
	`sqlôe3_vfs_uƒegi°î
(
pVfs
);

706 
	`vf¶og_föÆize
((
Vf¶ogVfs
 *)
pVfs
);

707  
SQLITE_OK
;

708 
	}
}

710 
	$sqlôe3_vf¶og_√w
(

711 c⁄° *
zVfs
,

712 c⁄° *
zP¨ítVfs
,

713 c⁄° *
zLog


715 
Vf¶ogVfs
 *
p
;

716 
sqlôe3_vfs
 *
pP¨ít
;

717 
nByã
;

718 
Êags
;

719 
rc
;

720 *
zFûe
;

721 
nVfs
;

723 
pP¨ít
 = 
	`sqlôe3_vfs_föd
(
zP¨ítVfs
);

724 if–!
pP¨ít
 ){

725  
SQLITE_ERROR
;

728 
nVfs
 = ()
	`°æí
(
zVfs
);

729 
nByã
 = (
Vf¶ogVfs
Ë+ 
pP¨ít
->
szOsFûe
 + 
nVfs
+1+pP¨ít->
mxP©h«me
+1;

730 
p
 = (
Vf¶ogVfs
 *)
	`sqlôe3_mÆloc
(
nByã
);

731 
	`mem£t
(
p
, 0, 
nByã
);

733 
p
->
pVfs
 = 
pP¨ít
;

734 
p
->
pLog
 = (
sqlôe3_fûe
 *)&p[1];

735 
	`mem˝y
(&
p
->
ba£
, &
vf¶og_vfs
, (
sqlôe3_vfs
));

736 
p
->
ba£
.
zName
 = &((*Ì->
pLog
)[
pP¨ít
->
szOsFûe
];

737 
p
->
ba£
.
szOsFûe
 +
pP¨ít
->szOsFile;

738 
	`mem˝y
((*)
p
->
ba£
.
zName
, 
zVfs
, 
nVfs
);

740 
zFûe
 = (*)&
p
->
ba£
.
zName
[
nVfs
+1];

741 
pP¨ít
->
	`xFuŒP©h«me
’P¨ít, 
zLog
,ÖP¨ít->
mxP©h«me
, 
zFûe
);

743 
Êags
 = 
SQLITE_OPEN_READWRITE
|
SQLITE_OPEN_CREATE
|
SQLITE_OPEN_MASTER_JOURNAL
;

744 
pP¨ít
->
	`xDñëe
’P¨ít, 
zFûe
, 0);

745 
rc
 = 
pP¨ít
->
	`xO≥n
’P¨ít, 
zFûe
, 
p
->
pLog
, 
Êags
, &flags);

746 if–
rc
==
SQLITE_OK
 ){

747 
	`mem˝y
(
p
->
aBuf
, "sqlite_ostrace1.....", 20);

748 
p
->
iOff£t
 = 0;

749 
p
->
nBuf
 = 20;

750 
rc
 = 
	`sqlôe3_vfs_ªgi°î
((
sqlôe3_vfs
 *)
p
, 1);

752 if–
rc
 ){

753 
	`vf¶og_föÆize
(
p
);

755  
rc
;

756 
	}
}

758 
	$sqlôe3_vf¶og_™nŸ©e
(c⁄° *
zVfs
, c⁄° *
zMsg
){

759 
sqlôe3_vfs
 *
pVfs
;

760 
pVfs
 = 
	`sqlôe3_vfs_föd
(
zVfs
);

761 if–!
pVfs
 ||ÖVfs->
xO≥n
!=
vf¶ogO≥n
 ){

762  
SQLITE_ERROR
;

764 
	`vf¶og_ˇŒ
(
pVfs
, 
OS_ANNOTATE
, 0, 0, 0, 0, 0);

765 
	`vf¶og_°rög
(
pVfs
, 
zMsg
);

766  
SQLITE_OK
;

767 
	}
}

769 c⁄° *
	$vf¶og_evíäame
(
eEvít
){

770 c⁄° *
zEvít
 = 0;

772  
eEvít
 ){

773 
OS_CLOSE
: 
zEvít
 = "xClose"; ;

774 
OS_READ
: 
zEvít
 = "xRead"; ;

775 
OS_WRITE
: 
zEvít
 = "xWrite"; ;

776 
OS_TRUNCATE
: 
zEvít
 = "xTruncate"; ;

777 
OS_SYNC
: 
zEvít
 = "xSync"; ;

778 
OS_FILESIZE
: 
zEvít
 = "xFilesize"; ;

779 
OS_LOCK
: 
zEvít
 = "xLock"; ;

780 
OS_UNLOCK
: 
zEvít
 = "xUnlock"; ;

781 
OS_CHECKRESERVEDLOCK
: 
zEvít
 = "xCheckResLock"; ;

782 
OS_FILECONTROL
: 
zEvít
 = "xFileControl"; ;

783 
OS_SECTORSIZE
: 
zEvít
 = "xSectorSize"; ;

784 
OS_DEVCHAR
: 
zEvít
 = "xDeviceChar"; ;

785 
OS_OPEN
: 
zEvít
 = "xOpen"; ;

786 
OS_DELETE
: 
zEvít
 = "xDelete"; ;

787 
OS_ACCESS
: 
zEvít
 = "xAccess"; ;

788 
OS_FULLPATHNAME
: 
zEvít
 = "xFullPathname"; ;

789 
OS_RANDOMNESS
: 
zEvít
 = "xRandomness"; ;

790 
OS_SLEEP
: 
zEvít
 = "xSleep"; ;

791 
OS_CURRENTTIME
: 
zEvít
 = "xCurrentTime"; ;

793 
OS_SHMUNMAP
: 
zEvít
 = "xShmUnmap"; ;

794 
OS_SHMLOCK
: 
zEvít
 = "xShmLock"; ;

795 
OS_SHMBARRIER
: 
zEvít
 = "xShmBarrier"; ;

796 
OS_SHMMAP
: 
zEvít
 = "xShmMap"; ;

798 
OS_ANNOTATE
: 
zEvít
 = "annotation"; ;

801  
zEvít
;

802 
	}
}

804 
Vf¶ogVèb
 
	tVf¶ogVèb
;

805 
Vf¶ogC§
 
	tVf¶ogC§
;

810 
	sVf¶ogVèb
 {

811 
sqlôe3_vèb
 
	mba£
;

812 
sqlôe3_fûe
 *
	mpFd
;

813 
sqlôe3_öt64
 
	mnByã
;

814 *
	mzFûe
;

820 
	sVf¶ogC§
 {

821 
sqlôe3_vèb_curs‹
 
	mba£
;

822 
sqlôe3_öt64
 
	miRowid
;

823 
sqlôe3_öt64
 
	miOff£t
;

824 *
	mzTønsõ¡
;

825 
	mnFûe
;

826 **
	mazFûe
;

827 
	maBuf
[1024];

830 
	$gë32bôs
(*
p
){

831  (
p
[0]<<24) + (p[1]<<16) + (p[2]<<8) +Ö[3];

832 
	}
}

839 
	$dequŸe
(*
z
){

840 
quŸe
;

841 
quŸe
 = 
z
[0];

842 if–
quŸe
=='[' || quote=='\'' || quote=='"' || quote=='`' ){

843 
iIn
 = 1;

844 
iOut
 = 0;

845 if–
quŸe
=='[' ) quote = ']';

846  
z
[
iIn
] ){

847 if–
z
[
iIn
]==
quŸe
 ){

848 if–
z
[
iIn
+1]!=
quŸe
 ) ;

849 
z
[
iOut
++] = 
quŸe
;

850 
iIn
 += 2;

852 
z
[
iOut
++] = z[
iIn
++];

855 
z
[
iOut
] = '\0';

857 
	}
}

859 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


863 
	$vlogC⁄√˘
(

864 
sqlôe3
 *
db
,

865 *
pAux
,

866 
¨gc
, c⁄° *c⁄°*
¨gv
,

867 
sqlôe3_vèb
 **
µVèb
,

868 **
pzEº


870 
sqlôe3_vfs
 *
pVfs
;

871 
Êags
;

872 
Vf¶ogVèb
 *
p
;

873 
rc
;

874 
nByã
;

875 *
zFûe
;

877 *
µVèb
 = 0;

878 
pVfs
 = 
	`sqlôe3_vfs_föd
(0);

879 
nByã
 = (
Vf¶ogVèb
Ë+ 
pVfs
->
szOsFûe
 +ÖVfs->
mxP©h«me
;

880 
p
 = 
	`sqlôe3_mÆloc
(
nByã
);

881 if–
p
==0 )  
SQLITE_NOMEM
;

882 
	`mem£t
(
p
, 0, 
nByã
);

884 
p
->
pFd
 = (
sqlôe3_fûe
 *)&p[1];

885 
p
->
zFûe
 = &((*Ì->
pFd
)[
pVfs
->
szOsFûe
];

887 
zFûe
 = 
	`sqlôe3_m¥ötf
("%s", 
¨gv
[3]);

888 if–!
zFûe
 ){

889 
	`sqlôe3_‰ì
(
p
);

890  
SQLITE_NOMEM
;

892 
	`dequŸe
(
zFûe
);

893 
pVfs
->
	`xFuŒP©h«me
’Vfs, 
zFûe
,ÖVfs->
mxP©h«me
, 
p
->zFile);

894 
	`sqlôe3_‰ì
(
zFûe
);

896 
Êags
 = 
SQLITE_OPEN_READWRITE
|
SQLITE_OPEN_MASTER_JOURNAL
;

897 
rc
 = 
pVfs
->
	`xO≥n
’Vfs, 
p
->
zFûe
,Ö->
pFd
, 
Êags
, &flags);

899 if–
rc
==
SQLITE_OK
 ){

900 
p
->
pFd
->
pMëhods
->
	`xFûeSize
’->pFd, &p->
nByã
);

901 
	`sqlôe3_de˛¨e_vèb
(
db
,

904 *
µVèb
 = &
p
->
ba£
;

906 
	`sqlôe3_‰ì
(
p
);

909  
rc
;

910 
	}
}

916 
	$vlogBe°Index
(
sqlôe3_vèb
 *
èb
, 
sqlôe3_ödex_öfo
 *
pIdxInfo
){

917 
pIdxInfo
->
e°im©edCo°
 = 10.0;

918  
SQLITE_OK
;

919 
	}
}

924 
	$vlogDisc⁄√˘
(
sqlôe3_vèb
 *
pVèb
){

925 
Vf¶ogVèb
 *
p
 = (Vf¶ogVèb *)
pVèb
;

926 if–
p
->
pFd
->
pMëhods
 ){

927 
p
->
pFd
->
pMëhods
->
	`xClo£
(p->pFd);

928 
p
->
pFd
->
pMëhods
 = 0;

930 
	`sqlôe3_‰ì
(
p
);

931  
SQLITE_OK
;

932 
	}
}

937 
	$vlogO≥n
(
sqlôe3_vèb
 *
pVTab
, 
sqlôe3_vèb_curs‹
 **
µCurs‹
){

938 
Vf¶ogC§
 *
pC§
;

940 
pC§
 = 
	`sqlôe3_mÆloc
((
Vf¶ogC§
));

941 if–!
pC§
 )  
SQLITE_NOMEM
;

942 
	`mem£t
(
pC§
, 0, (
Vf¶ogC§
));

943 *
µCurs‹
 = &
pC§
->
ba£
;

944  
SQLITE_OK
;

945 
	}
}

950 
	$vlogClo£
(
sqlôe3_vèb_curs‹
 *
pCurs‹
){

951 
Vf¶ogC§
 *
p
 = (Vf¶ogC§ *)
pCurs‹
;

952 
i
;

953 
i
=0; i<
p
->
nFûe
; i++){

954 
	`sqlôe3_‰ì
(
p
->
azFûe
[
i
]);

956 
	`sqlôe3_‰ì
(
p
->
azFûe
);

957 
	`sqlôe3_‰ì
(
p
->
zTønsõ¡
);

958 
	`sqlôe3_‰ì
(
p
);

959  
SQLITE_OK
;

960 
	}
}

965 
	$vlogNext
(
sqlôe3_vèb_curs‹
 *
pCurs‹
){

966 
Vf¶ogC§
 *
pC§
 = (Vf¶ogC§ *)
pCurs‹
;

967 
Vf¶ogVèb
 *
p
 = (Vf¶ogVèb *)
pCurs‹
->
pVèb
;

968 
rc
 = 
SQLITE_OK
;

969 
nRód
;

971 
	`sqlôe3_‰ì
(
pC§
->
zTønsõ¡
);

972 
pC§
->
zTønsõ¡
 = 0;

974 
nRód
 = 24;

975 if–
pC§
->
iOff£t
+
nRód
<=
p
->
nByã
 ){

976 
eEvít
;

977 
rc
 = 
p
->
pFd
->
pMëhods
->
	`xRód
’->pFd, 
pC§
->
aBuf
, 
nRód
,ÖC§->
iOff£t
);

979 
eEvít
 = 
	`gë32bôs
(
pC§
->
aBuf
);

980 if–(
rc
==
SQLITE_OK
)

981 && (
eEvít
==
OS_OPEN
 ||ÉEvít==
OS_DELETE
 ||ÉEvít==
OS_ACCESS
)

983 
buf
[4];

984 
rc
 = 
p
->
pFd
->
pMëhods
->
	`xRód
’->pFd, 
buf
, 4, 
pC§
->
iOff£t
+
nRód
);

985 
nRód
 += 4;

986 if–
rc
==
SQLITE_OK
 ){

987 
nSå
 = 
	`gë32bôs
((*)
buf
);

988 *
zSå
 = 
	`sqlôe3_mÆloc
(
nSå
+1);

989 
rc
 = 
p
->
pFd
->
pMëhods
->
	`xRód
’->pFd, 
zSå
, 
nSå
, 
pC§
->
iOff£t
+
nRód
);

990 
zSå
[
nSå
] = '\0';

991 
nRód
 +
nSå
;

993 if–
eEvít
==
OS_OPEN
 ){

994 
iFûeid
 = 
	`gë32bôs
(&
pC§
->
aBuf
[4]);

995 if–
iFûeid
>=
pC§
->
nFûe
 ){

996 
nNew
 = (
pC§
->
azFûe
[0])*(
iFûeid
+1);

997 
pC§
->
azFûe
 = (**)
	`sqlôe3_ªÆloc
’C§->azFûe, 
nNew
);

998 
nNew
 -(
pC§
->
azFûe
[0])*pC§->
nFûe
;

999 
	`mem£t
(&
pC§
->
azFûe
[pC§->
nFûe
], 0, 
nNew
);

1000 
pC§
->
nFûe
 = 
iFûeid
+1;

1002 
	`sqlôe3_‰ì
(
pC§
->
azFûe
[
iFûeid
]);

1003 
pC§
->
azFûe
[
iFûeid
] = 
zSå
;

1005 
pC§
->
zTønsõ¡
 = 
zSå
;

1011 
pC§
->
iRowid
 += 1;

1012 
pC§
->
iOff£t
 +
nRód
;

1013  
rc
;

1014 
	}
}

1016 
	$vlogEof
(
sqlôe3_vèb_curs‹
 *
pCurs‹
){

1017 
Vf¶ogC§
 *
pC§
 = (Vf¶ogC§ *)
pCurs‹
;

1018 
Vf¶ogVèb
 *
p
 = (Vf¶ogVèb *)
pCurs‹
->
pVèb
;

1019  (
pC§
->
iOff£t
>=
p
->
nByã
);

1020 
	}
}

1022 
	$vlogFûãr
(

1023 
sqlôe3_vèb_curs‹
 *
pCurs‹
,

1024 
idxNum
, c⁄° *
idxSå
,

1025 
¨gc
, 
sqlôe3_vÆue
 **
¨gv


1027 
Vf¶ogC§
 *
pC§
 = (Vf¶ogC§ *)
pCurs‹
;

1028 
pC§
->
iRowid
 = 0;

1029 
pC§
->
iOff£t
 = 20;

1030  
	`vlogNext
(
pCurs‹
);

1031 
	}
}

1033 
	$vlogCﬁumn
(

1034 
sqlôe3_vèb_curs‹
 *
pCurs‹
,

1035 
sqlôe3_c⁄ãxt
 *
˘x
,

1036 
i


1038 
vÆ
;

1039 
Vf¶ogC§
 *
pC§
 = (Vf¶ogC§ *)
pCurs‹
;

1041 
	`as£π
–
i
<7 );

1042 
vÆ
 = 
	`gë32bôs
(&
pC§
->
aBuf
[4*
i
]);

1044  
i
 ){

1046 
	`sqlôe3_ªsu…_ãxt
(
˘x
, 
	`vf¶og_evíäame
(
vÆ
), -1, 
SQLITE_STATIC
);

1050 *
zSå
 = 
pC§
->
zTønsõ¡
;

1051 if–
vÆ
!=0 && vÆ<()
pC§
->
nFûe
 ){

1052 
zSå
 = 
pC§
->
azFûe
[
vÆ
];

1054 
	`sqlôe3_ªsu…_ãxt
(
˘x
, 
zSå
, -1, 
SQLITE_TRANSIENT
);

1058 
	`sqlôe3_ªsu…_öt
(
˘x
, 
vÆ
);

1062  
SQLITE_OK
;

1063 
	}
}

1065 
	$vlogRowid
(
sqlôe3_vèb_curs‹
 *
pCurs‹
, 
sqlôe_öt64
 *
pRowid
){

1066 
Vf¶ogC§
 *
pC§
 = (Vf¶ogC§ *)
pCurs‹
;

1067 *
pRowid
 = 
pC§
->
iRowid
;

1068  
SQLITE_OK
;

1069 
	}
}

1071 
	$sqlôe3_vf¶og_ªgi°î
(
sqlôe3
 *
db
){

1072 
sqlôe3_moduÀ
 
vf¶og_moduÀ
 = {

1074 
vlogC⁄√˘
,

1075 
vlogC⁄√˘
,

1076 
vlogBe°Index
,

1077 
vlogDisc⁄√˘
,

1078 
vlogDisc⁄√˘
,

1079 
vlogO≥n
,

1080 
vlogClo£
,

1081 
vlogFûãr
,

1082 
vlogNext
,

1083 
vlogEof
,

1084 
vlogCﬁumn
,

1085 
vlogRowid
,

1095 
	`sqlôe3_¸óã_moduÀ
(
db
, "vf¶og", &
vf¶og_moduÀ
, 0);

1096  
SQLITE_OK
;

1097 
	}
}

1105 #i‡
deföed
(
SQLITE_TEST
Ë|| deföed(
TCLSH
)

1107 
	~<t˛.h
>

1109 
	$ã°_vf¶og
(

1110 *
˛õ¡D©a
,

1111 
T˛_I¡îp
 *
öãΩ
,

1112 
objc
,

1113 
T˛_Obj
 *
CONST
 
objv
[]

1115 
	sSqlôeDb
 { 
sqlôe3
 *
db
; };

1116 
sqlôe3
 *
db
;

1117 
T˛_CmdInfo
 
cmdInfo
;

1118 
rc
 = 
SQLITE_ERROR
;

1120 c⁄° *
°rs
[] = { "annotate", "finalize", "new", "register", 0 };

1121 
	eVL_íum
 { 
VL_ANNOTATE
, 
VL_FINALIZE
, 
VL_NEW
, 
VL_REGISTER
 };

1122 
iSub
;

1124 if–
objc
<2 ){

1125 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "SUB-COMMAND ...");

1126  
TCL_ERROR
;

1128 if–
	`T˛_GëIndexFromObj
(
öãΩ
, 
objv
[1], 
°rs
, "sub-comm™d", 0, &
iSub
) ){

1129  
TCL_ERROR
;

1132  (
VL_íum
)
iSub
 ){

1133 
VL_ANNOTATE
: {

1134 *
zVfs
;

1135 *
zMsg
;

1136 if–
objc
!=4 ){

1137 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 3, 
objv
, "VFS");

1138  
TCL_ERROR
;

1140 
zVfs
 = 
	`T˛_GëSåög
(
objv
[2]);

1141 
zMsg
 = 
	`T˛_GëSåög
(
objv
[3]);

1142 
rc
 = 
	`sqlôe3_vf¶og_™nŸ©e
(
zVfs
, 
zMsg
);

1143 if–
rc
!=
SQLITE_OK
 ){

1144 
	`T˛_AµídResu…
(
öãΩ
, "failed", 0);

1145  
TCL_ERROR
;

1149 
VL_FINALIZE
: {

1150 *
zVfs
;

1151 if–
objc
!=3 ){

1152 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "VFS");

1153  
TCL_ERROR
;

1155 
zVfs
 = 
	`T˛_GëSåög
(
objv
[2]);

1156 
rc
 = 
	`sqlôe3_vf¶og_föÆize
(
zVfs
);

1157 if–
rc
!=
SQLITE_OK
 ){

1158 
	`T˛_AµídResu…
(
öãΩ
, "failed", 0);

1159  
TCL_ERROR
;

1164 
VL_NEW
: {

1165 *
zVfs
;

1166 *
zP¨ít
;

1167 *
zLog
;

1168 if–
objc
!=5 ){

1169 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "VFS PARENT LOGFILE");

1170  
TCL_ERROR
;

1172 
zVfs
 = 
	`T˛_GëSåög
(
objv
[2]);

1173 
zP¨ít
 = 
	`T˛_GëSåög
(
objv
[3]);

1174 
zLog
 = 
	`T˛_GëSåög
(
objv
[4]);

1175 if–*
zP¨ít
=='\0' ) zParent = 0;

1176 
rc
 = 
	`sqlôe3_vf¶og_√w
(
zVfs
, 
zP¨ít
, 
zLog
);

1177 if–
rc
!=
SQLITE_OK
 ){

1178 
	`T˛_AµídResu…
(
öãΩ
, "failed", 0);

1179  
TCL_ERROR
;

1184 
VL_REGISTER
: {

1185 *
zDb
;

1186 if–
objc
!=3 ){

1187 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "DB");

1188  
TCL_ERROR
;

1190 #ifde‡
SQLITE_OMIT_VIRTUALTABLE


1191 
	`T˛_AµídResu…
(
öãΩ
, "vfslogÇotávailable because of "

1193  
TCL_ERROR
;

1195 
zDb
 = 
	`T˛_GëSåög
(
objv
[2]);

1196 if–
	`T˛_GëComm™dInfo
(
öãΩ
, 
zDb
, &
cmdInfo
) ){

1197 
db
 = ((
SqlôeDb
*)
cmdInfo
.
objClõ¡D©a
)->db;

1198 
rc
 = 
	`sqlôe3_vf¶og_ªgi°î
(
db
);

1200 if–
rc
!=
SQLITE_OK
 ){

1201 
	`T˛_AµídResu…
(
öãΩ
, "bad sqlôe3 h™dÀ: ", 
zDb
, (*)0);

1202  
TCL_ERROR
;

1209  
TCL_OK
;

1210 
	}
}

1212 
	$Sqlôëe°Osö°_Inô
(
T˛_I¡îp
 *
öãΩ
){

1213 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "vf¶og", 
ã°_vf¶og
, 0, 0);

1214  
TCL_OK
;

1215 
	}
}

	@test_pcache.c

24 
	~"sqlôe3.h
"

25 
	~<°rög.h
>

26 
	~<as£π.h
>

33 
ã°pˇcheGlobÆTy≥
 
	tã°pˇcheGlobÆTy≥
;

34 
	sã°pˇcheGlobÆTy≥
 {

35 *
	mpDummy
;

36 
	mnIn°™˚
;

37 
	mdisˇrdCh™˚
;

38 
	m¥ngSìd
;

39 
	mhighSåess
;

41 
ã°pˇcheGlobÆTy≥
 
	gã°pˇcheGlobÆ
;

53 
	$ã°pˇcheInô
(*
pArg
){

54 
	`as£π
–
pArg
==(*)&
ã°pˇcheGlobÆ
 );

55 
	`as£π
–
ã°pˇcheGlobÆ
.
pDummy
==0 );

56 
	`as£π
–
ã°pˇcheGlobÆ
.
nIn°™˚
==0 );

57 
ã°pˇcheGlobÆ
.
pDummy
 = 
	`sqlôe3_mÆloc
(10);

58  
ã°pˇcheGlobÆ
.
pDummy
==0 ? 
SQLITE_NOMEM
 : 
SQLITE_OK
;

59 
	}
}

67 
	$ã°pˇcheShutdown
(*
pArg
){

68 
	`as£π
–
pArg
==(*)&
ã°pˇcheGlobÆ
 );

69 
	`as£π
–
ã°pˇcheGlobÆ
.
pDummy
!=0 );

70 
	`as£π
–
ã°pˇcheGlobÆ
.
nIn°™˚
==0 );

71 
	`sqlôe3_‰ì
–
ã°pˇcheGlobÆ
.
pDummy
 );

72 
ã°pˇcheGlobÆ
.
pDummy
 = 0;

73 
	}
}

84 #i‡
deföed
(
SQLITE_TEMP_STORE
) && SQLITE_TEMP_STORE>=2

85 
	#TESTPCACHE_NPAGE
 499

	)

87 
	#TESTPCACHE_NPAGE
 217

	)

89 
	#TESTPCACHE_RESERVE
 17

	)

94 
	#TESTPCACHE_VALID
 0x364585fd

	)

95 
	#TESTPCACHE_CLEAR
 0xd42670d4

	)

100 
ã°pˇche
 
	tã°pˇche
;

101 
	sã°pˇche
 {

102 
	mszPage
;

103 
	mszExåa
;

104 
	mbPurgóbÀ
;

105 
	mnFªe
;

106 
	mnPö√d
;

107 
	miR™d
;

108 
	miMagic
;

109 
	sã°pˇchePage
 {

110 
sqlôe3_pˇche_∑ge
 
	m∑ge
;

111 
	mkey
;

112 
	misPö√d
;

113 } 
	ma
[
TESTPCACHE_NPAGE
];

119 
	$ã°pˇcheR™dom
(
ã°pˇche
 *
p
){

120 
x
 = 0;

121 
i
;

122 
i
=0; i<4; i++){

123 
p
->
iR™d
 = (p->iRand*69069 + 5);

124 
x
 = (x<<8Ë| ((
p
->
iR™d
>>16)&0xff);

126  
x
;

127 
	}
}

133 
sqlôe3_pˇche
 *
	$ã°pˇcheCª©e
(

134 
szPage
,

135 
szExåa
,

136 
bPurgóbÀ


138 
nMem
;

139 *
x
;

140 
ã°pˇche
 *
p
;

141 
i
;

142 
	`as£π
–
ã°pˇcheGlobÆ
.
pDummy
!=0 );

143 
szPage
 = (szPage+7)&~7;

144 
nMem
 = (
ã°pˇche
Ë+ 
TESTPCACHE_NPAGE
*(
szPage
+
szExåa
);

145 
p
 = 
	`sqlôe3_mÆloc
–
nMem
 );

146 if–
p
==0 )  0;

147 
x
 = (*)&
p
[1];

148 
p
->
szPage
 = szPage;

149 
p
->
szExåa
 = szExtra;

150 
p
->
nFªe
 = 
TESTPCACHE_NPAGE
;

151 
p
->
nPö√d
 = 0;

152 
p
->
iR™d
 = 
ã°pˇcheGlobÆ
.
¥ngSìd
;

153 
p
->
bPurgóbÀ
 = bPurgeable;

154 
p
->
iMagic
 = 
TESTPCACHE_VALID
;

155 
i
=0; i<
TESTPCACHE_NPAGE
; i++, 
x
 +(
szPage
+
szExåa
)){

156 
p
->
a
[
i
].
key
 = 0;

157 
p
->
a
[
i
].
isPö√d
 = 0;

158 
p
->
a
[
i
].
∑ge
.
pBuf
 = (*)
x
;

159 
p
->
a
[
i
].
∑ge
.
pExåa
 = (*)&
x
[
szPage
];

161 
ã°pˇcheGlobÆ
.
nIn°™˚
++;

162  (
sqlôe3_pˇche
*)
p
;

163 
	}
}

168 
	$ã°pˇcheCachesize
(
sqlôe3_pˇche
 *
pCache
, 
√wSize
){

169 
ã°pˇche
 *
p
 = (ã°pˇche*)
pCache
;

170 
	`as£π
–
p
->
iMagic
==
TESTPCACHE_VALID
 );

171 
	`as£π
–
ã°pˇcheGlobÆ
.
pDummy
!=0 );

172 
	`as£π
–
ã°pˇcheGlobÆ
.
nIn°™˚
>0 );

173 
	}
}

179 
	$ã°pˇchePagecou¡
(
sqlôe3_pˇche
 *
pCache
){

180 
ã°pˇche
 *
p
 = (ã°pˇche*)
pCache
;

181 
	`as£π
–
p
->
iMagic
==
TESTPCACHE_VALID
 );

182 
	`as£π
–
ã°pˇcheGlobÆ
.
pDummy
!=0 );

183 
	`as£π
–
ã°pˇcheGlobÆ
.
nIn°™˚
>0 );

184  
TESTPCACHE_NPAGE
 - 
p
->
nFªe
;

185 
	}
}

190 
sqlôe3_pˇche_∑ge
 *
	$ã°pˇcheFëch
(

191 
sqlôe3_pˇche
 *
pCache
,

192 
key
,

193 
¸óãFœg


195 
ã°pˇche
 *
p
 = (ã°pˇche*)
pCache
;

196 
i
, 
j
;

197 
	`as£π
–
p
->
iMagic
==
TESTPCACHE_VALID
 );

198 
	`as£π
–
ã°pˇcheGlobÆ
.
pDummy
!=0 );

199 
	`as£π
–
ã°pˇcheGlobÆ
.
nIn°™˚
>0 );

202 
i
=0; i<
TESTPCACHE_NPAGE
; i++){

203 if–
p
->
a
[
i
].
key
==key ){

204 if–!
p
->
a
[
i
].
isPö√d
 ){

205 
p
->
nPö√d
++;

206 
	`as£π
–
p
->
nPö√d
 <
TESTPCACHE_NPAGE
 -Ö->
nFªe
 );

207 
p
->
a
[
i
].
isPö√d
 = 1;

209  &
p
->
a
[
i
].
∑ge
;

214 if–
¸óãFœg
==0 ){

219 if–
p
->
nPö√d
==
TESTPCACHE_NPAGE
 ){

224 if–
p
->
nPö√d
>=
TESTPCACHE_NPAGE
-
TESTPCACHE_RESERVE
 && 
¸óãFœg
<2 ){

233 if–
ã°pˇcheGlobÆ
.
highSåess
 && 
¸óãFœg
<2 ){

240 if–
p
->
nFªe
>
TESTPCACHE_RESERVE
 || (
¸óãFœg
==2 &&Ö->nFree>0) ){

241 
j
 = 
	`ã°pˇcheR™dom
(
p
Ë% 
TESTPCACHE_NPAGE
;

242 
i
=0; i<
TESTPCACHE_NPAGE
; i++, 
j
 = (j+1)%TESTPCACHE_NPAGE){

243 if–
p
->
a
[
j
].
key
==0 ){

244 
p
->
a
[
j
].
key
 = key;

245 
p
->
a
[
j
].
isPö√d
 = 1;

246 
	`mem£t
(
p
->
a
[
j
].
∑ge
.
pBuf
, 0,Ö->
szPage
);

247 
	`mem£t
(
p
->
a
[
j
].
∑ge
.
pExåa
, 0,Ö->
szExåa
);

248 
p
->
nPö√d
++;

249 
p
->
nFªe
--;

250 
	`as£π
–
p
->
nPö√d
 <
TESTPCACHE_NPAGE
 -Ö->
nFªe
 );

251  &
p
->
a
[
j
].
∑ge
;

256 
	`as£π
( 0 );

261 if–
p
->
bPurgóbÀ
==0 ){

268 
j
 = 
	`ã°pˇcheR™dom
(
p
Ë% 
TESTPCACHE_NPAGE
;

269 
i
=0; i<
TESTPCACHE_NPAGE
; i++, 
j
 = (j+1)%TESTPCACHE_NPAGE){

270 if–
p
->
a
[
j
].
key
>0 &&Ö->a[j].
isPö√d
==0 ){

271 
p
->
a
[
j
].
key
 = key;

272 
p
->
a
[
j
].
isPö√d
 = 1;

273 
	`mem£t
(
p
->
a
[
j
].
∑ge
.
pBuf
, 0,Ö->
szPage
);

274 
	`mem£t
(
p
->
a
[
j
].
∑ge
.
pExåa
, 0,Ö->
szExåa
);

275 
p
->
nPö√d
++;

276 
	`as£π
–
p
->
nPö√d
 <
TESTPCACHE_NPAGE
 -Ö->
nFªe
 );

277  &
p
->
a
[
j
].
∑ge
;

282 
	`as£π
(0);

284 
	}
}

289 
	$ã°pˇcheU≈ö
(

290 
sqlôe3_pˇche
 *
pCache
,

291 
sqlôe3_pˇche_∑ge
 *
pOldPage
,

292 
disˇrd


294 
ã°pˇche
 *
p
 = (ã°pˇche*)
pCache
;

295 
i
;

296 
	`as£π
–
p
->
iMagic
==
TESTPCACHE_VALID
 );

297 
	`as£π
–
ã°pˇcheGlobÆ
.
pDummy
!=0 );

298 
	`as£π
–
ã°pˇcheGlobÆ
.
nIn°™˚
>0 );

304 if–
p
->
bPurgóbÀ


305 && (100-
ã°pˇcheGlobÆ
.
disˇrdCh™˚
Ë<(
	`ã°pˇcheR™dom
(
p
)%100)

307 
disˇrd
 = 1;

310 
i
=0; i<
TESTPCACHE_NPAGE
; i++){

311 if–&
p
->
a
[
i
].
∑ge
==
pOldPage
 ){

313 
	`as£π
–
p
->
a
[
i
].
isPö√d
 );

314 
p
->
a
[
i
].
isPö√d
 = 0;

315 
p
->
nPö√d
--;

316 
	`as£π
–
p
->
nPö√d
>=0 );

317 if–
disˇrd
 ){

318 
p
->
a
[
i
].
key
 = 0;

319 
p
->
nFªe
++;

320 
	`as£π
–
p
->
nFªe
<=
TESTPCACHE_NPAGE
 );

327 
	`as£π
( 0 );

328 
	}
}

334 
	$ã°pˇcheRekey
(

335 
sqlôe3_pˇche
 *
pCache
,

336 
sqlôe3_pˇche_∑ge
 *
pOldPage
,

337 
ﬁdKey
,

338 
√wKey


340 
ã°pˇche
 *
p
 = (ã°pˇche*)
pCache
;

341 
i
;

342 
	`as£π
–
p
->
iMagic
==
TESTPCACHE_VALID
 );

343 
	`as£π
–
ã°pˇcheGlobÆ
.
pDummy
!=0 );

344 
	`as£π
–
ã°pˇcheGlobÆ
.
nIn°™˚
>0 );

349 
i
=0; i<
TESTPCACHE_NPAGE
; i++){

350 if–
p
->
a
[
i
].
key
==
√wKey
 ){

352 
	`as£π
–
p
->
a
[
i
].
isPö√d
==0 );

353 
p
->
a
[
i
].
key
 = 0;

354 
p
->
nFªe
++;

355 
	`as£π
–
p
->
nFªe
<=
TESTPCACHE_NPAGE
 );

362 
i
=0; i<
TESTPCACHE_NPAGE
; i++){

363 if–
p
->
a
[
i
].
key
==
ﬁdKey
 ){

365 
	`as£π
–&
p
->
a
[
i
].
∑ge
==
pOldPage
 );

367 
	`as£π
–
p
->
a
[
i
].
isPö√d
 );

368 
p
->
a
[
i
].
key
 = 
√wKey
;

374 
	`as£π
( 0 );

375 
	}
}

382 
	$ã°pˇcheTrunˇã
(
sqlôe3_pˇche
 *
pCache
, 
iLimô
){

383 
ã°pˇche
 *
p
 = (ã°pˇche*)
pCache
;

384 
i
;

385 
	`as£π
–
p
->
iMagic
==
TESTPCACHE_VALID
 );

386 
	`as£π
–
ã°pˇcheGlobÆ
.
pDummy
!=0 );

387 
	`as£π
–
ã°pˇcheGlobÆ
.
nIn°™˚
>0 );

388 
i
=0; i<
TESTPCACHE_NPAGE
; i++){

389 if–
p
->
a
[
i
].
key
>=
iLimô
 ){

390 
p
->
a
[
i
].
key
 = 0;

391 if–
p
->
a
[
i
].
isPö√d
 ){

392 
p
->
nPö√d
--;

393 
	`as£π
–
p
->
nPö√d
>=0 );

395 
p
->
nFªe
++;

396 
	`as£π
–
p
->
nFªe
<=
TESTPCACHE_NPAGE
 );

399 
	}
}

404 
	$ã°pˇcheDe°roy
(
sqlôe3_pˇche
 *
pCache
){

405 
ã°pˇche
 *
p
 = (ã°pˇche*)
pCache
;

406 
	`as£π
–
p
->
iMagic
==
TESTPCACHE_VALID
 );

407 
	`as£π
–
ã°pˇcheGlobÆ
.
pDummy
!=0 );

408 
	`as£π
–
ã°pˇcheGlobÆ
.
nIn°™˚
>0 );

409 
p
->
iMagic
 = 
TESTPCACHE_CLEAR
;

410 
	`sqlôe3_‰ì
(
p
);

411 
ã°pˇcheGlobÆ
.
nIn°™˚
--;

412 
	}
}

427 
	$ö°ÆlTe°PCache
(

428 
ö°ÆlFœg
,

429 
disˇrdCh™˚
,

430 
¥ngSìd
,

431 
highSåess


433 c⁄° 
sqlôe3_pˇche_mëhods2
 
ã°Pˇche
 = {

435 (*)&
ã°pˇcheGlobÆ
,

436 
ã°pˇcheInô
,

437 
ã°pˇcheShutdown
,

438 
ã°pˇcheCª©e
,

439 
ã°pˇcheCachesize
,

440 
ã°pˇchePagecou¡
,

441 
ã°pˇcheFëch
,

442 
ã°pˇcheU≈ö
,

443 
ã°pˇcheRekey
,

444 
ã°pˇcheTrunˇã
,

445 
ã°pˇcheDe°roy
,

447 
sqlôe3_pˇche_mëhods2
 
deÁu…Pˇche
;

448 
isIn°ÆÀd
 = 0;

450 
	`as£π
–
ã°pˇcheGlobÆ
.
nIn°™˚
==0 );

451 
	`as£π
–
ã°pˇcheGlobÆ
.
pDummy
==0 );

452 
	`as£π
–
disˇrdCh™˚
<=100 );

453 
ã°pˇcheGlobÆ
.
disˇrdCh™˚
 = discardChance;

454 
ã°pˇcheGlobÆ
.
¥ngSìd
 =ÖrngSeed ^ (prngSeed<<16);

455 
ã°pˇcheGlobÆ
.
highSåess
 = highStress;

456 if–
ö°ÆlFœg
!=
isIn°ÆÀd
 ){

457 if–
ö°ÆlFœg
 ){

458 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_GETPCACHE2
, &
deÁu…Pˇche
);

459 
	`as£π
–
deÁu…Pˇche
.
xCª©e
!=
ã°pˇcheCª©e
 );

460 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_PCACHE2
, &
ã°Pˇche
);

462 
	`as£π
–
deÁu…Pˇche
.
xCª©e
!=0 );

463 
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_PCACHE2
, &
deÁu…Pˇche
);

465 
isIn°ÆÀd
 = 
ö°ÆlFœg
;

467 
	}
}

	@test_quota.c

30 
	~"ã°_quŸa.h
"

31 
	~<°rög.h
>

32 
	~<as£π.h
>

37 #i‡
deföed
(
SQLITE_THREADSAFE
) && SQLITE_THREADSAFE==0

38 
	#sqlôe3_muãx_Æloc
(
X
Ë((
sqlôe3_muãx
*)8)

	)

39 
	#sqlôe3_muãx_‰ì
(
X
)

	)

40 
	#sqlôe3_muãx_íãr
(
X
)

	)

41 
	#sqlôe3_muãx_åy
(
X
Ë
SQLITE_OK


	)

42 
	#sqlôe3_muãx_Àave
(
X
)

	)

43 
	#sqlôe3_muãx_hñd
(
X
Ë(()(X),1)

	)

44 
	#sqlôe3_muãx_nŸhñd
(
X
Ë(()(X),1)

	)

47 
	~"os_£tup.h
"

49 #i‡
SQLITE_OS_UNIX


50 
	~<uni°d.h
>

52 #i‡
SQLITE_OS_WIN


53 
	~"os_wö.h
"

54 
	~<io.h
>

61 
quŸaGroup
 
	tquŸaGroup
;

62 
quŸaC⁄n
 
	tquŸaC⁄n
;

63 
quŸaFûe
 
	tquŸaFûe
;

79 
	squŸaGroup
 {

80 c⁄° *
	mzP©ã∫
;

81 
sqlôe3_öt64
 
	miLimô
;

82 
sqlôe3_öt64
 
	miSize
;

83 (*
	mxCÆlback
)(

84 c⁄° *
	mzFûíame
,

85 
sqlôe3_öt64
 *
	mpiLimô
,

86 
sqlôe3_öt64
 
	miSize
,

87 *
	mpArg


89 *
	mpArg
;

90 (*
	mxDe°roy
)(*);

91 
quŸaGroup
 *
	mpNext
, **
	mµPªv
;

92 
quŸaFûe
 *
	mpFûes
;

103 
	squŸaFûe
 {

104 *
	mzFûíame
;

105 
quŸaGroup
 *
	mpGroup
;

106 
sqlôe3_öt64
 
	miSize
;

107 
	mnRef
;

108 
	mdñëeOnClo£
;

109 
quŸaFûe
 *
	mpNext
, **
	mµPªv
;

118 
	squŸaC⁄n
 {

119 
sqlôe3_fûe
 
	mba£
;

120 
quŸaFûe
 *
	mpFûe
;

129 
	squŸa_FILE
 {

130 
FILE
 *
	mf
;

131 
sqlôe3_öt64
 
	miOf°
;

132 
quŸaFûe
 *
	mpFûe
;

133 #i‡
SQLITE_OS_WIN


134 *
	mzMbcsName
;

150 
sqlôe3_vfs
 *
	mpOrigVfs
;

155 
sqlôe3_vfs
 
	msThisVfs
;

167 
sqlôe3_io_mëhods
 
	msIoMëhodsV1
;

168 
sqlôe3_io_mëhods
 
	msIoMëhodsV2
;

172 
	misInôülized
;

177 
sqlôe3_muãx
 *
	mpMuãx
;

181 
quŸaGroup
 *
	mpGroup
;

183 } 
	ggQuŸa
;

190 
	$quŸaE¡î
(){ 
	`sqlôe3_muãx_íãr
(
gQuŸa
.
pMuãx
); 
	}
}

191 
	$quŸaLóve
(){ 
	`sqlôe3_muãx_Àave
(
gQuŸa
.
pMuãx
); 
	}
}

195 
	$quŸaGroupO≥nFûeCou¡
(
quŸaGroup
 *
pGroup
){

196 
N
 = 0;

197 
quŸaFûe
 *
pFûe
 = 
pGroup
->
pFûes
;

198  
pFûe
 ){

199 if–
pFûe
->
nRef
 ) 
N
++;

200 
pFûe
 =ÖFûe->
pNext
;

202  
N
;

203 
	}
}

207 
	$quŸaRemoveFûe
(
quŸaFûe
 *
pFûe
){

208 
quŸaGroup
 *
pGroup
 = 
pFûe
->pGroup;

209 
pGroup
->
iSize
 -
pFûe
->iSize;

210 *
pFûe
->
µPªv
 =ÖFûe->
pNext
;

211 if–
pFûe
->
pNext
 )ÖFûe->pNext->
µPªv
 =ÖFile->ppPrev;

212 
	`sqlôe3_‰ì
(
pFûe
);

213 
	}
}

218 
	$quŸaRemoveAŒFûes
(
quŸaGroup
 *
pGroup
){

219  
pGroup
->
pFûes
 ){

220 
	`as£π
–
pGroup
->
pFûes
->
nRef
==0 );

221 
	`quŸaRemoveFûe
(
pGroup
->
pFûes
);

223 
	}
}

229 
	$quŸaGroupDîef
(
quŸaGroup
 *
pGroup
){

230 if–
pGroup
->
iLimô
==0 && 
	`quŸaGroupO≥nFûeCou¡
(pGroup)==0 ){

231 
	`quŸaRemoveAŒFûes
(
pGroup
);

232 *
pGroup
->
µPªv
 =ÖGroup->
pNext
;

233 if–
pGroup
->
pNext
 )ÖGroup->pNext->
µPªv
 =ÖGroup->ppPrev;

234 if–
pGroup
->
xDe°roy
 )ÖGroup->
	`xDe°roy
’Group->
pArg
);

235 
	`sqlôe3_‰ì
(
pGroup
);

237 
	}
}

256 
	$quŸaSåglob
(c⁄° *
zGlob
, c⁄° *
z
){

257 
c
, 
c2
, 
cx
;

258 
övît
;

259 
£í
;

261  (
c
 = (*(
zGlob
++)))!=0 ){

262 if–
c
=='*' ){

263  (
c
=(*(
zGlob
++))) == '*' || c=='?' ){

264 if–
c
=='?' && (*(
z
++))==0 )  0;

266 if–
c
==0 ){

268 }if–
c
=='[' ){

269  *
z
 && 
	`quŸaSåglob
(
zGlob
-1,z)==0 ){

270 
z
++;

272  (*
z
)!=0;

274 
cx
 = (
c
=='/') ? '\\' : c;

275  (
c2
 = (*(
z
++)))!=0 ){

276  
c2
!=
c
 && c2!=
cx
 ){

277 
c2
 = *(
z
++);

278 if–
c2
==0 )  0;

280 if–
	`quŸaSåglob
(
zGlob
,
z
) )  1;

283 }if–
c
=='?' ){

284 if–(*(
z
++))==0 )  0;

285 }if–
c
=='[' ){

286 
¥i‹_c
 = 0;

287 
£í
 = 0;

288 
övît
 = 0;

289 
c
 = *(
z
++);

290 if–
c
==0 )  0;

291 
c2
 = *(
zGlob
++);

292 if–
c2
=='^' ){

293 
övît
 = 1;

294 
c2
 = *(
zGlob
++);

296 if–
c2
==']' ){

297 if–
c
==']' ) 
£í
 = 1;

298 
c2
 = *(
zGlob
++);

300  
c2
 && c2!=']' ){

301 if–
c2
=='-' && 
zGlob
[0]!=']' && zGlob[0]!=0 && 
¥i‹_c
>0 ){

302 
c2
 = *(
zGlob
++);

303 if–
c
>=
¥i‹_c
 && c<=
c2
 ) 
£í
 = 1;

304 
¥i‹_c
 = 0;

306 if–
c
==
c2
 ){

307 
£í
 = 1;

309 
¥i‹_c
 = 
c2
;

311 
c2
 = *(
zGlob
++);

313 if–
c2
==0 || (
£í
 ^ 
övît
)==0 )  0;

314 }if–
c
=='/' ){

315 if–
z
[0]!='/' && z[0]!='\\' )  0;

316 
z
++;

318 if–
c
!=(*(
z
++)) )  0;

321  *
z
==0;

322 
	}
}

329 
quŸaGroup
 *
	$quŸaGroupFöd
(c⁄° *
zFûíame
){

330 
quŸaGroup
 *
p
;

331 
p
=
gQuŸa
.
pGroup
;Ö && 
	`quŸaSåglob
’->
zP©ã∫
, 
zFûíame
)==0;

332 
p
ı->
pNext
){}

333  
p
;

334 
	}
}

339 
sqlôe3_fûe
 *
	$quŸaSubO≥n
(
sqlôe3_fûe
 *
pC⁄n
){

340 
quŸaC⁄n
 *
p
 = (quŸaC⁄n*)
pC⁄n
;

341  (
sqlôe3_fûe
*)&
p
[1];

342 
	}
}

347 
quŸaFûe
 *
	$quŸaFödFûe
(

348 
quŸaGroup
 *
pGroup
,

349 c⁄° *
zName
,

350 
¸óãFœg


352 
quŸaFûe
 *
pFûe
 = 
pGroup
->
pFûes
;

353  
pFûe
 && 
	`°rcmp
’Fûe->
zFûíame
, 
zName
)!=0 ){

354 
pFûe
 =ÖFûe->
pNext
;

356 if–
pFûe
==0 && 
¸óãFœg
 ){

357 
nName
 = ()(
	`°æí
(
zName
) & 0x3fffffff);

358 
pFûe
 = (
quŸaFûe
 *)
	`sqlôe3_mÆloc
–(*pFûeË+ 
nName
 + 1 );

359 if–
pFûe
 ){

360 
	`mem£t
(
pFûe
, 0, (*pFile));

361 
pFûe
->
zFûíame
 = (*)&pFile[1];

362 
	`mem˝y
(
pFûe
->
zFûíame
, 
zName
, 
nName
+1);

363 
pFûe
->
pNext
 = 
pGroup
->
pFûes
;

364 if–
pGroup
->
pFûes
 )ÖGroup->pFûes->
µPªv
 = &
pFûe
->
pNext
;

365 
pFûe
->
µPªv
 = &
pGroup
->
pFûes
;

366 
pGroup
->
pFûes
 = 
pFûe
;

367 
pFûe
->
pGroup
 =ÖGroup;

370  
pFûe
;

371 
	}
}

377 *
	$quŸa_utf8_to_mbcs
(c⁄° *
zUtf8
){

378 #i‡
SQLITE_OS_WIN


379 
size_t
 
n
;

380 
nWide
;

381 
nMbcs
;

382 
LPWSTR
 
zTmpWide
;

383 *
zMbcs
;

384 
codïage
;

386 
n
 = 
	`°æí
(
zUtf8
);

387 
nWide
 = 
	`Mu…iByãToWideCh¨
(
CP_UTF8
, 0, 
zUtf8
, -1, 
NULL
, 0);

388 if–
nWide
==0 )  0;

389 
zTmpWide
 = (
LPWSTR
)
	`sqlôe3_mÆloc
–(
nWide
+1)*(zTmpWide[0]) );

390 if–
zTmpWide
==0 )  0;

391 
	`Mu…iByãToWideCh¨
(
CP_UTF8
, 0, 
zUtf8
, -1, 
zTmpWide
, 
nWide
);

392 
codïage
 = 
	`AªFûeApisANSI
(Ë? 
CP_ACP
 : 
CP_OEMCP
;

393 
nMbcs
 = 
	`WideCh¨ToMu…iByã
(
codïage
, 0, 
zTmpWide
, 
nWide
, 0, 0, 0, 0);

394 
zMbcs
 = 
nMbcs
 ? (*)
	`sqlôe3_mÆloc
(ÇMbcs+1 ) : 0;

395 if–
zMbcs
 ){

396 
	`WideCh¨ToMu…iByã
(
codïage
, 0, 
zTmpWide
, 
nWide
, 
zMbcs
, 
nMbcs
, 0, 0);

398 
	`sqlôe3_‰ì
(
zTmpWide
);

399  
zMbcs
;

401  (*)
zUtf8
;

403 
	}
}

408 
	$quŸa_mbcs_‰ì
(*
zOld
){

409 #i‡
SQLITE_OS_WIN


410 
	`sqlôe3_‰ì
(
zOld
);

414 
	}
}

424 
	$quŸaO≥n
(

425 
sqlôe3_vfs
 *
pVfs
,

426 c⁄° *
zName
,

427 
sqlôe3_fûe
 *
pC⁄n
,

428 
Êags
,

429 *
pOutFœgs


431 
rc
;

432 
quŸaC⁄n
 *
pQuŸaO≥n
;

433 
quŸaFûe
 *
pFûe
;

434 
quŸaGroup
 *
pGroup
;

435 
sqlôe3_fûe
 *
pSubO≥n
;

436 
sqlôe3_vfs
 *
pOrigVfs
 = 
gQuŸa
.pOrigVfs;

441 if–(
Êags
 & (
SQLITE_OPEN_MAIN_DB
|
SQLITE_OPEN_WAL
))==0 ){

442  
pOrigVfs
->
	`xO≥n
’OrigVfs, 
zName
, 
pC⁄n
, 
Êags
, 
pOutFœgs
);

448 
	`quŸaE¡î
();

449 
pGroup
 = 
	`quŸaGroupFöd
(
zName
);

450 if–
pGroup
==0 ){

451 
rc
 = 
pOrigVfs
->
	`xO≥n
’OrigVfs, 
zName
, 
pC⁄n
, 
Êags
, 
pOutFœgs
);

455 
pQuŸaO≥n
 = (
quŸaC⁄n
*)
pC⁄n
;

456 
pSubO≥n
 = 
	`quŸaSubO≥n
(
pC⁄n
);

457 
rc
 = 
pOrigVfs
->
	`xO≥n
’OrigVfs, 
zName
, 
pSubO≥n
, 
Êags
, 
pOutFœgs
);

458 if–
rc
==
SQLITE_OK
 ){

459 
pFûe
 = 
	`quŸaFödFûe
(
pGroup
, 
zName
, 1);

460 if–
pFûe
==0 ){

461 
	`quŸaLóve
();

462 
pSubO≥n
->
pMëhods
->
	`xClo£
(pSubOpen);

463  
SQLITE_NOMEM
;

465 
pFûe
->
dñëeOnClo£
 = (
Êags
 & 
SQLITE_OPEN_DELETEONCLOSE
)!=0;

466 
pFûe
->
nRef
++;

467 
pQuŸaO≥n
->
pFûe
 =ÖFile;

468 if–
pSubO≥n
->
pMëhods
->
iVîsi⁄
==1 ){

469 
pQuŸaO≥n
->
ba£
.
pMëhods
 = &
gQuŸa
.
sIoMëhodsV1
;

471 
pQuŸaO≥n
->
ba£
.
pMëhods
 = &
gQuŸa
.
sIoMëhodsV2
;

475 
	`quŸaLóve
();

476  
rc
;

477 
	}
}

486 
	$quŸaDñëe
(

487 
sqlôe3_vfs
 *
pVfs
,

488 c⁄° *
zName
,

489 
syncDú


491 
rc
;

492 
quŸaFûe
 *
pFûe
;

493 
quŸaGroup
 *
pGroup
;

494 
sqlôe3_vfs
 *
pOrigVfs
 = 
gQuŸa
.pOrigVfs;

497 
rc
 = 
pOrigVfs
->
	`xDñëe
’OrigVfs, 
zName
, 
syncDú
);

502 if–
rc
==
SQLITE_OK
 ){

503 
	`quŸaE¡î
();

504 
pGroup
 = 
	`quŸaGroupFöd
(
zName
);

505 if–
pGroup
 ){

506 
pFûe
 = 
	`quŸaFödFûe
(
pGroup
, 
zName
, 0);

507 if–
pFûe
 ){

508 if–
pFûe
->
nRef
 ){

509 
pFûe
->
dñëeOnClo£
 = 1;

511 
	`quŸaRemoveFûe
(
pFûe
);

512 
	`quŸaGroupDîef
(
pGroup
);

516 
	`quŸaLóve
();

518  
rc
;

519 
	}
}

528 
	$quŸaClo£
(
sqlôe3_fûe
 *
pC⁄n
){

529 
quŸaC⁄n
 *
p
 = (quŸaC⁄n*)
pC⁄n
;

530 
quŸaFûe
 *
pFûe
 = 
p
->pFile;

531 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`quŸaSubO≥n
(
pC⁄n
);

532 
rc
;

533 
rc
 = 
pSubO≥n
->
pMëhods
->
	`xClo£
(pSubOpen);

534 
	`quŸaE¡î
();

535 
pFûe
->
nRef
--;

536 if–
pFûe
->
nRef
==0 ){

537 
quŸaGroup
 *
pGroup
 = 
pFûe
->pGroup;

538 if–
pFûe
->
dñëeOnClo£
 ){

539 
gQuŸa
.
pOrigVfs
->
	`xDñëe
(gQuŸa.pOrigVfs, 
pFûe
->
zFûíame
, 0);

540 
	`quŸaRemoveFûe
(
pFûe
);

542 
	`quŸaGroupDîef
(
pGroup
);

544 
	`quŸaLóve
();

545  
rc
;

546 
	}
}

551 
	$quŸaRód
(

552 
sqlôe3_fûe
 *
pC⁄n
,

553 *
pBuf
,

554 
iAmt
,

555 
sqlôe3_öt64
 
iOf°


557 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`quŸaSubO≥n
(
pC⁄n
);

558  
pSubO≥n
->
pMëhods
->
	`xRód
’SubO≥n, 
pBuf
, 
iAmt
, 
iOf°
);

559 
	}
}

565 
	$quŸaWrôe
(

566 
sqlôe3_fûe
 *
pC⁄n
,

567 c⁄° *
pBuf
,

568 
iAmt
,

569 
sqlôe3_öt64
 
iOf°


571 
quŸaC⁄n
 *
p
 = (quŸaC⁄n*)
pC⁄n
;

572 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`quŸaSubO≥n
(
pC⁄n
);

573 
sqlôe3_öt64
 
iEnd
 = 
iOf°
+
iAmt
;

574 
quŸaGroup
 *
pGroup
;

575 
quŸaFûe
 *
pFûe
 = 
p
->pFile;

576 
sqlôe3_öt64
 
szNew
;

578 if–
pFûe
->
iSize
<
iEnd
 ){

579 
pGroup
 = 
pFûe
->pGroup;

580 
	`quŸaE¡î
();

581 
szNew
 = 
pGroup
->
iSize
 - 
pFûe
->iSizê+ 
iEnd
;

582 if–
szNew
>
pGroup
->
iLimô
 &&ÖGroup->iLimit>0 ){

583 if–
pGroup
->
xCÆlback
 ){

584 
pGroup
->
	`xCÆlback
(
pFûe
->
zFûíame
, &pGroup->
iLimô
, 
szNew
,

585 
pGroup
->
pArg
);

587 if–
szNew
>
pGroup
->
iLimô
 &&ÖGroup->iLimit>0 ){

588 
	`quŸaLóve
();

589  
SQLITE_FULL
;

592 
pGroup
->
iSize
 = 
szNew
;

593 
pFûe
->
iSize
 = 
iEnd
;

594 
	`quŸaLóve
();

596  
pSubO≥n
->
pMëhods
->
	`xWrôe
’SubO≥n, 
pBuf
, 
iAmt
, 
iOf°
);

597 
	}
}

602 
	$quŸaTrunˇã
(
sqlôe3_fûe
 *
pC⁄n
, 
sqlôe3_öt64
 
size
){

603 
quŸaC⁄n
 *
p
 = (quŸaC⁄n*)
pC⁄n
;

604 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`quŸaSubO≥n
(
pC⁄n
);

605 
rc
 = 
pSubO≥n
->
pMëhods
->
	`xTrunˇã
’SubO≥n, 
size
);

606 
quŸaFûe
 *
pFûe
 = 
p
->pFile;

607 
quŸaGroup
 *
pGroup
;

608 if–
rc
==
SQLITE_OK
 ){

609 
	`quŸaE¡î
();

610 
pGroup
 = 
pFûe
->pGroup;

611 
pGroup
->
iSize
 -
pFûe
->iSize;

612 
pFûe
->
iSize
 = 
size
;

613 
pGroup
->
iSize
 +
size
;

614 
	`quŸaLóve
();

616  
rc
;

617 
	}
}

621 
	$quŸaSync
(
sqlôe3_fûe
 *
pC⁄n
, 
Êags
){

622 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`quŸaSubO≥n
(
pC⁄n
);

623  
pSubO≥n
->
pMëhods
->
	`xSync
’SubO≥n, 
Êags
);

624 
	}
}

629 
	$quŸaFûeSize
(
sqlôe3_fûe
 *
pC⁄n
, 
sqlôe3_öt64
 *
pSize
){

630 
quŸaC⁄n
 *
p
 = (quŸaC⁄n*)
pC⁄n
;

631 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`quŸaSubO≥n
(
pC⁄n
);

632 
quŸaFûe
 *
pFûe
 = 
p
->pFile;

633 
quŸaGroup
 *
pGroup
;

634 
sqlôe3_öt64
 
sz
;

635 
rc
;

637 
rc
 = 
pSubO≥n
->
pMëhods
->
	`xFûeSize
’SubO≥n, &
sz
);

638 if–
rc
==
SQLITE_OK
 ){

639 
	`quŸaE¡î
();

640 
pGroup
 = 
pFûe
->pGroup;

641 
pGroup
->
iSize
 -
pFûe
->iSize;

642 
pFûe
->
iSize
 = 
sz
;

643 
pGroup
->
iSize
 +
sz
;

644 
	`quŸaLóve
();

645 *
pSize
 = 
sz
;

647  
rc
;

648 
	}
}

652 
	$quŸaLock
(
sqlôe3_fûe
 *
pC⁄n
, 
lock
){

653 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`quŸaSubO≥n
(
pC⁄n
);

654  
pSubO≥n
->
pMëhods
->
	`xLock
’SubO≥n, 
lock
);

655 
	}
}

659 
	$quŸaU∆ock
(
sqlôe3_fûe
 *
pC⁄n
, 
lock
){

660 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`quŸaSubO≥n
(
pC⁄n
);

661  
pSubO≥n
->
pMëhods
->
	`xU∆ock
’SubO≥n, 
lock
);

662 
	}
}

666 
	$quŸaCheckRe£rvedLock
(
sqlôe3_fûe
 *
pC⁄n
, *
pResOut
){

667 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`quŸaSubO≥n
(
pC⁄n
);

668  
pSubO≥n
->
pMëhods
->
	`xCheckRe£rvedLock
’SubO≥n, 
pResOut
);

669 
	}
}

673 
	$quŸaFûeC⁄åﬁ
(
sqlôe3_fûe
 *
pC⁄n
, 
›
, *
pArg
){

674 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`quŸaSubO≥n
(
pC⁄n
);

675 
rc
 = 
pSubO≥n
->
pMëhods
->
	`xFûeC⁄åﬁ
’SubO≥n, 
›
, 
pArg
);

676 #i‡
	`deföed
(
SQLITE_FCNTL_VFSNAME
)

677 if–
›
==
SQLITE_FCNTL_VFSNAME
 && 
rc
==
SQLITE_OK
 ){

678 *(**)
pArg
 = 
	`sqlôe3_m¥ötf
("quota/%z", *(**)pArg);

681  
rc
;

682 
	}
}

686 
	$quŸaSe˘‹Size
(
sqlôe3_fûe
 *
pC⁄n
){

687 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`quŸaSubO≥n
(
pC⁄n
);

688  
pSubO≥n
->
pMëhods
->
	`xSe˘‹Size
(pSubOpen);

689 
	}
}

693 
	$quŸaDevi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
 *
pC⁄n
){

694 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`quŸaSubO≥n
(
pC⁄n
);

695  
pSubO≥n
->
pMëhods
->
	`xDevi˚Ch¨a˘îi°ics
(pSubOpen);

696 
	}
}

700 
	$quŸaShmM≠
(

701 
sqlôe3_fûe
 *
pC⁄n
,

702 
iRegi⁄
,

703 
szRegi⁄
,

704 
bExãnd
,

705 vﬁ©ûê**
µ


707 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`quŸaSubO≥n
(
pC⁄n
);

708  
pSubO≥n
->
pMëhods
->
	`xShmM≠
’SubO≥n, 
iRegi⁄
, 
szRegi⁄
, 
bExãnd
, 
µ
);

709 
	}
}

713 
	$quŸaShmLock
(

714 
sqlôe3_fûe
 *
pC⁄n
,

715 
of°
,

716 
n
,

717 
Êags


719 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`quŸaSubO≥n
(
pC⁄n
);

720  
pSubO≥n
->
pMëhods
->
	`xShmLock
’SubO≥n, 
of°
, 
n
, 
Êags
);

721 
	}
}

725 
	$quŸaShmB¨rõr
(
sqlôe3_fûe
 *
pC⁄n
){

726 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`quŸaSubO≥n
(
pC⁄n
);

727 
pSubO≥n
->
pMëhods
->
	`xShmB¨rõr
(pSubOpen);

728 
	}
}

732 
	$quŸaShmUnm≠
(
sqlôe3_fûe
 *
pC⁄n
, 
dñëeFœg
){

733 
sqlôe3_fûe
 *
pSubO≥n
 = 
	`quŸaSubO≥n
(
pC⁄n
);

734  
pSubO≥n
->
pMëhods
->
	`xShmUnm≠
’SubO≥n, 
dñëeFœg
);

735 
	}
}

749 
	$sqlôe3_quŸa_öôülize
(c⁄° *
zOrigVfsName
, 
makeDeÁu…
){

750 
sqlôe3_vfs
 *
pOrigVfs
;

751 if–
gQuŸa
.
isInôülized
 )  
SQLITE_MISUSE
;

752 
pOrigVfs
 = 
	`sqlôe3_vfs_föd
(
zOrigVfsName
);

753 if–
pOrigVfs
==0 )  
SQLITE_ERROR
;

754 
	`as£π
–
pOrigVfs
!=&
gQuŸa
.
sThisVfs
 );

755 
gQuŸa
.
pMuãx
 = 
	`sqlôe3_muãx_Æloc
(
SQLITE_MUTEX_FAST
);

756 if–!
gQuŸa
.
pMuãx
 ){

757  
SQLITE_NOMEM
;

759 
gQuŸa
.
isInôülized
 = 1;

760 
gQuŸa
.
pOrigVfs
 =ÖOrigVfs;

761 
gQuŸa
.
sThisVfs
 = *
pOrigVfs
;

762 
gQuŸa
.
sThisVfs
.
xO≥n
 = 
quŸaO≥n
;

763 
gQuŸa
.
sThisVfs
.
xDñëe
 = 
quŸaDñëe
;

764 
gQuŸa
.
sThisVfs
.
szOsFûe
 +(
quŸaC⁄n
);

765 
gQuŸa
.
sThisVfs
.
zName
 = "quota";

766 
gQuŸa
.
sIoMëhodsV1
.
iVîsi⁄
 = 1;

767 
gQuŸa
.
sIoMëhodsV1
.
xClo£
 = 
quŸaClo£
;

768 
gQuŸa
.
sIoMëhodsV1
.
xRód
 = 
quŸaRód
;

769 
gQuŸa
.
sIoMëhodsV1
.
xWrôe
 = 
quŸaWrôe
;

770 
gQuŸa
.
sIoMëhodsV1
.
xTrunˇã
 = 
quŸaTrunˇã
;

771 
gQuŸa
.
sIoMëhodsV1
.
xSync
 = 
quŸaSync
;

772 
gQuŸa
.
sIoMëhodsV1
.
xFûeSize
 = 
quŸaFûeSize
;

773 
gQuŸa
.
sIoMëhodsV1
.
xLock
 = 
quŸaLock
;

774 
gQuŸa
.
sIoMëhodsV1
.
xU∆ock
 = 
quŸaU∆ock
;

775 
gQuŸa
.
sIoMëhodsV1
.
xCheckRe£rvedLock
 = 
quŸaCheckRe£rvedLock
;

776 
gQuŸa
.
sIoMëhodsV1
.
xFûeC⁄åﬁ
 = 
quŸaFûeC⁄åﬁ
;

777 
gQuŸa
.
sIoMëhodsV1
.
xSe˘‹Size
 = 
quŸaSe˘‹Size
;

778 
gQuŸa
.
sIoMëhodsV1
.
xDevi˚Ch¨a˘îi°ics
 = 
quŸaDevi˚Ch¨a˘îi°ics
;

779 
gQuŸa
.
sIoMëhodsV2
 = gQuŸa.
sIoMëhodsV1
;

780 
gQuŸa
.
sIoMëhodsV2
.
iVîsi⁄
 = 2;

781 
gQuŸa
.
sIoMëhodsV2
.
xShmM≠
 = 
quŸaShmM≠
;

782 
gQuŸa
.
sIoMëhodsV2
.
xShmLock
 = 
quŸaShmLock
;

783 
gQuŸa
.
sIoMëhodsV2
.
xShmB¨rõr
 = 
quŸaShmB¨rõr
;

784 
gQuŸa
.
sIoMëhodsV2
.
xShmUnm≠
 = 
quŸaShmUnm≠
;

785 
	`sqlôe3_vfs_ªgi°î
(&
gQuŸa
.
sThisVfs
, 
makeDeÁu…
);

786  
SQLITE_OK
;

787 
	}
}

798 
	$sqlôe3_quŸa_shutdown
(){

799 
quŸaGroup
 *
pGroup
;

800 if–
gQuŸa
.
isInôülized
==0 )  
SQLITE_MISUSE
;

801 
pGroup
=
gQuŸa
.pGroup;ÖGroup;ÖGroupıGroup->
pNext
){

802 if–
	`quŸaGroupO≥nFûeCou¡
(
pGroup
)>0 )  
SQLITE_MISUSE
;

804  
gQuŸa
.
pGroup
 ){

805 
pGroup
 = 
gQuŸa
.pGroup;

806 
gQuŸa
.
pGroup
 =ÖGroup->
pNext
;

807 
pGroup
->
iLimô
 = 0;

808 
	`as£π
–
	`quŸaGroupO≥nFûeCou¡
(
pGroup
)==0 );

809 
	`quŸaGroupDîef
(
pGroup
);

811 
gQuŸa
.
isInôülized
 = 0;

812 
	`sqlôe3_muãx_‰ì
(
gQuŸa
.
pMuãx
);

813 
	`sqlôe3_vfs_uƒegi°î
(&
gQuŸa
.
sThisVfs
);

814 
	`mem£t
(&
gQuŸa
, 0, (gQuota));

815  
SQLITE_OK
;

816 
	}
}

838 
sqlôe3_quŸa_£t
(

839 c⁄° *
zP©ã∫
,

840 
sqlôe3_öt64
 
iLimô
,

841 (*
xCÆlback
)(

842 c⁄° *
zFûíame
,

843 
sqlôe3_öt64
 *
piLimô
,

844 
sqlôe3_öt64
 
iSize
,

845 *
pArg


847 *
pArg
,

848 (*
xDe°roy
)(*)

850 
quŸaGroup
 *
pGroup
;

851 
	`quŸaE¡î
();

852 
pGroup
 = 
gQuŸa
.pGroup;

853  
pGroup
 && 
	`°rcmp
’Group->
zP©ã∫
, zPattern)!=0 ){

854 
pGroup
 =ÖGroup->
pNext
;

856 if–
pGroup
==0 ){

857 
nP©ã∫
 = ()(
	`°æí
(
zP©ã∫
) & 0x3fffffff);

858 if–
iLimô
<=0 ){

859 
	`quŸaLóve
();

860  
SQLITE_OK
;

862 
pGroup
 = (
quŸaGroup
 *)
	`sqlôe3_mÆloc
–(*pGroupË+ 
nP©ã∫
 + 1 );

863 if–
pGroup
==0 ){

864 
	`quŸaLóve
();

865  
SQLITE_NOMEM
;

867 
	`mem£t
(
pGroup
, 0, (*pGroup));

868 
pGroup
->
zP©ã∫
 = (*)&pGroup[1];

869 
	`mem˝y
((*)
pGroup
->
zP©ã∫
, zP©ã∫, 
nP©ã∫
+1);

870 if–
gQuŸa
.
pGroup
 ) gQuŸa.pGroup->
µPªv
 = &pGroup->
pNext
;

871 
pGroup
->
pNext
 = 
gQuŸa
.pGroup;

872 
pGroup
->
µPªv
 = &
gQuŸa
.pGroup;

873 
gQuŸa
.
pGroup
 =ÖGroup;

875 
pGroup
->
iLimô
 = iLimit;

876 
pGroup
->
xCÆlback
 = xCallback;

877 if–
pGroup
->
xDe°roy
 &&ÖGroup->
pArg
!=pArg ){

878 
pGroup
->
	`xDe°roy
’Group->
pArg
);

880 
pGroup
->
pArg
 =ÖArg;

881 
pGroup
->
xDe°roy
 = xDestroy;

882 
	`quŸaGroupDîef
(
pGroup
);

883 
	`quŸaLóve
();

884  
SQLITE_OK
;

885 
	}
}

891 
	$sqlôe3_quŸa_fûe
(c⁄° *
zFûíame
){

892 *
zFuŒ
 = 0;

893 
sqlôe3_fûe
 *
fd
;

894 
rc
;

895 
outFœgs
 = 0;

896 
sqlôe3_öt64
 
iSize
;

897 
nAŒoc
 = 
gQuŸa
.
sThisVfs
.
szOsFûe
 + gQuŸa.sThisVfs.
mxP©h«me
+2;

900 
fd
 = (
sqlôe3_fûe
 *)
	`sqlôe3_mÆloc
(
nAŒoc
);

901 if–
fd
==0 ){

902 
rc
 = 
SQLITE_NOMEM
;

904 
zFuŒ
 = &((*)
fd
)[
gQuŸa
.
sThisVfs
.
szOsFûe
];

905 
rc
 = 
gQuŸa
.
pOrigVfs
->
	`xFuŒP©h«me
(gQuŸa.pOrigVfs, 
zFûíame
,

906 
gQuŸa
.
sThisVfs
.
mxP©h«me
+1, 
zFuŒ
);

909 if–
rc
==
SQLITE_OK
 ){

910 
zFuŒ
[
	`°æí
(zFull)+1] = '\0';

911 
rc
 = 
	`quŸaO≥n
(&
gQuŸa
.
sThisVfs
, 
zFuŒ
, 
fd
,

912 
SQLITE_OPEN_READONLY
 | 
SQLITE_OPEN_MAIN_DB
, &
outFœgs
);

913 if–
rc
==
SQLITE_OK
 ){

914 
fd
->
pMëhods
->
	`xFûeSize
(fd, &
iSize
);

915 
fd
->
pMëhods
->
	`xClo£
(fd);

916 }if–
rc
==
SQLITE_CANTOPEN
 ){

917 
quŸaGroup
 *
pGroup
;

918 
quŸaFûe
 *
pFûe
;

919 
	`quŸaE¡î
();

920 
pGroup
 = 
	`quŸaGroupFöd
(
zFuŒ
);

921 if–
pGroup
 ){

922 
pFûe
 = 
	`quŸaFödFûe
(
pGroup
, 
zFuŒ
, 0);

923 if–
pFûe
 ) 
	`quŸaRemoveFûe
(pFile);

925 
	`quŸaLóve
();

929 
	`sqlôe3_‰ì
(
fd
);

930  
rc
;

931 
	}
}

936 
quŸa_FILE
 *
	$sqlôe3_quŸa_f›í
(c⁄° *
zFûíame
, c⁄° *
zMode
){

937 
quŸa_FILE
 *
p
 = 0;

938 *
zFuŒ
 = 0;

939 *
zFuŒTøn¶©ed
 = 0;

940 
rc
;

941 
quŸaGroup
 *
pGroup
;

942 
quŸaFûe
 *
pFûe
;

944 
zFuŒ
 = (*)
	`sqlôe3_mÆloc
(
gQuŸa
.
sThisVfs
.
mxP©h«me
 + 1);

945 if–
zFuŒ
==0 )  0;

946 
rc
 = 
gQuŸa
.
pOrigVfs
->
	`xFuŒP©h«me
(gQuŸa.pOrigVfs, 
zFûíame
,

947 
gQuŸa
.
sThisVfs
.
mxP©h«me
+1, 
zFuŒ
);

948 if–
rc
 ) 
quŸa_f›í_îr‹
;

949 
p
 = (
quŸa_FILE
*)
	`sqlôe3_mÆloc
((*p));

950 if–
p
==0 ) 
quŸa_f›í_îr‹
;

951 
	`mem£t
(
p
, 0, (*p));

952 
zFuŒTøn¶©ed
 = 
	`quŸa_utf8_to_mbcs
(
zFuŒ
);

953 if–
zFuŒTøn¶©ed
==0 ) 
quŸa_f›í_îr‹
;

954 
p
->
f
 = 
	`f›í
(
zFuŒTøn¶©ed
, 
zMode
);

955 if–
p
->
f
==0 ) 
quŸa_f›í_îr‹
;

956 
	`quŸaE¡î
();

957 
pGroup
 = 
	`quŸaGroupFöd
(
zFuŒ
);

958 if–
pGroup
 ){

959 
pFûe
 = 
	`quŸaFödFûe
(
pGroup
, 
zFuŒ
, 1);

960 if–
pFûe
==0 ){

961 
	`quŸaLóve
();

962 
quŸa_f›í_îr‹
;

964 
pFûe
->
nRef
++;

965 
p
->
pFûe
 =ÖFile;

967 
	`quŸaLóve
();

968 
	`sqlôe3_‰ì
(
zFuŒ
);

969 #i‡
SQLITE_OS_WIN


970 
p
->
zMbcsName
 = 
zFuŒTøn¶©ed
;

972  
p
;

974 
quŸa_f›í_îr‹
:

975 
	`quŸa_mbcs_‰ì
(
zFuŒTøn¶©ed
);

976 
	`sqlôe3_‰ì
(
zFuŒ
);

977 if–
p
 &&Ö->
f
 ) 
	`f˛o£
(p->f);

978 
	`sqlôe3_‰ì
(
p
);

980 
	}
}

985 
size_t
 
	$sqlôe3_quŸa_‰ód
(

986 *
pBuf
,

987 
size_t
 
size
,

988 
size_t
 
nmemb
,

989 
quŸa_FILE
 *
p


991  
	`‰ód
(
pBuf
, 
size
, 
nmemb
, 
p
->
f
);

992 
	}
}

998 
size_t
 
	$sqlôe3_quŸa_fwrôe
(

999 c⁄° *
pBuf
,

1000 
size_t
 
size
,

1001 
size_t
 
nmemb
,

1002 
quŸa_FILE
 *
p


1004 
sqlôe3_öt64
 
iOf°
;

1005 
sqlôe3_öt64
 
iEnd
;

1006 
sqlôe3_öt64
 
szNew
;

1007 
quŸaFûe
 *
pFûe
;

1008 
size_t
 
rc
;

1010 
iOf°
 = 
	`·ñl
(
p
->
f
);

1011 
iEnd
 = 
iOf°
 + 
size
*
nmemb
;

1012 
pFûe
 = 
p
->pFile;

1013 if–
pFûe
 &&ÖFûe->
iSize
<
iEnd
 ){

1014 
quŸaGroup
 *
pGroup
 = 
pFûe
->pGroup;

1015 
	`quŸaE¡î
();

1016 
szNew
 = 
pGroup
->
iSize
 - 
pFûe
->iSizê+ 
iEnd
;

1017 if–
szNew
>
pGroup
->
iLimô
 &&ÖGroup->iLimit>0 ){

1018 if–
pGroup
->
xCÆlback
 ){

1019 
pGroup
->
	`xCÆlback
(
pFûe
->
zFûíame
, &pGroup->
iLimô
, 
szNew
,

1020 
pGroup
->
pArg
);

1022 if–
szNew
>
pGroup
->
iLimô
 &&ÖGroup->iLimit>0 ){

1023 
iEnd
 = 
pGroup
->
iLimô
 -ÖGroup->
iSize
 + 
pFûe
->iSize;

1024 
nmemb
 = (
size_t
)((
iEnd
 - 
iOf°
)/
size
);

1025 
iEnd
 = 
iOf°
 + 
size
*
nmemb
;

1026 
szNew
 = 
pGroup
->
iSize
 - 
pFûe
->iSizê+ 
iEnd
;

1029 
pGroup
->
iSize
 = 
szNew
;

1030 
pFûe
->
iSize
 = 
iEnd
;

1031 
	`quŸaLóve
();

1033 
pFûe
 = 0;

1035 
rc
 = 
	`fwrôe
(
pBuf
, 
size
, 
nmemb
, 
p
->
f
);

1039 if–
rc
<
nmemb
 && 
pFûe
 ){

1040 
size_t
 
nWrôãn
 = 
rc
;

1041 
sqlôe3_öt64
 
iNewEnd
 = 
iOf°
 + 
size
*
nWrôãn
;

1042 if–
iNewEnd
<
iEnd
 ) iNewEnd = iEnd;

1043 
	`quŸaE¡î
();

1044 
pFûe
->
pGroup
->
iSize
 +
iNewEnd
 -ÖFile->iSize;

1045 
pFûe
->
iSize
 = 
iNewEnd
;

1046 
	`quŸaLóve
();

1048  
rc
;

1049 
	}
}

1054 
	$sqlôe3_quŸa_f˛o£
(
quŸa_FILE
 *
p
){

1055 
rc
;

1056 
quŸaFûe
 *
pFûe
;

1057 
rc
 = 
	`f˛o£
(
p
->
f
);

1058 
pFûe
 = 
p
->pFile;

1059 if–
pFûe
 ){

1060 
	`quŸaE¡î
();

1061 
pFûe
->
nRef
--;

1062 if–
pFûe
->
nRef
==0 ){

1063 
quŸaGroup
 *
pGroup
 = 
pFûe
->pGroup;

1064 if–
pFûe
->
dñëeOnClo£
 ){

1065 
gQuŸa
.
pOrigVfs
->
	`xDñëe
(gQuŸa.pOrigVfs, 
pFûe
->
zFûíame
, 0);

1066 
	`quŸaRemoveFûe
(
pFûe
);

1068 
	`quŸaGroupDîef
(
pGroup
);

1070 
	`quŸaLóve
();

1072 #i‡
SQLITE_OS_WIN


1073 
	`quŸa_mbcs_‰ì
(
p
->
zMbcsName
);

1075 
	`sqlôe3_‰ì
(
p
);

1076  
rc
;

1077 
	}
}

1082 
	$sqlôe3_quŸa_fÊush
(
quŸa_FILE
 *
p
, 
doFsync
){

1083 
rc
;

1084 
rc
 = 
	`fÊush
(
p
->
f
);

1085 if–
rc
==0 && 
doFsync
 ){

1086 #i‡
SQLITE_OS_UNIX


1087 
rc
 = 
	`fsync
(
	`fûío
(
p
->
f
));

1089 #i‡
SQLITE_OS_WIN


1090 
rc
 = 
	`_commô
(
	`_fûío
(
p
->
f
));

1093  
rc
!=0;

1094 
	}
}

1099 
	$sqlôe3_quŸa_f£ek
(
quŸa_FILE
 *
p
, 
off£t
, 
whí˚
){

1100  
	`f£ek
(
p
->
f
, 
off£t
, 
whí˚
);

1101 
	}
}

1106 
	$sqlôe3_quŸa_ªwöd
(
quŸa_FILE
 *
p
){

1107 
	`ªwöd
(
p
->
f
);

1108 
	}
}

1113 
	$sqlôe3_quŸa_·ñl
(
quŸa_FILE
 *
p
){

1114  
	`·ñl
(
p
->
f
);

1115 
	}
}

1120 
	$sqlôe3_quŸa_„º‹
(
quŸa_FILE
 *
p
){

1121  
	`„º‹
(
p
->
f
);

1122 
	}
}

1127 
	$sqlôe3_quŸa_·runˇã
(
quŸa_FILE
 *
p
, 
sqlôe3_öt64
 
szNew
){

1128 
quŸaFûe
 *
pFûe
 = 
p
->pFile;

1129 
rc
;

1130 if–(
pFûe
 = 
p
->pFûe)!=0 &&ÖFûe->
iSize
<
szNew
 ){

1131 
quŸaGroup
 *
pGroup
;

1132 if–
pFûe
->
iSize
<
szNew
 ){

1137 
pGroup
 = 
pFûe
->pGroup;

1138 
	`quŸaE¡î
();

1139 
pGroup
->
iSize
 +
szNew
 - 
pFûe
->iSize;

1140 
	`quŸaLóve
();

1142 #i‡
SQLITE_OS_UNIX


1143 
rc
 = 
	`·runˇã
(
	`fûío
(
p
->
f
), 
szNew
);

1145 #i‡
SQLITE_OS_WIN


1146 #i‡
	`deföed
(
__MINGW32__
Ë&& deföed(
SQLITE_TEST
)

1149 
rc
 = 
	`_chsize
(
	`_fûío
(
p
->
f
), ()
szNew
);

1151 
rc
 = 
	`_chsize_s
(
	`_fûío
(
p
->
f
), 
szNew
);

1154 if–
pFûe
 && 
rc
==0 ){

1155 
quŸaGroup
 *
pGroup
 = 
pFûe
->pGroup;

1156 
	`quŸaE¡î
();

1157 
pGroup
->
iSize
 +
szNew
 - 
pFûe
->iSize;

1158 
pFûe
->
iSize
 = 
szNew
;

1159 
	`quŸaLóve
();

1161  
rc
;

1162 
	}
}

1169 
	$sqlôe3_quŸa_fûe_mtime
(
quŸa_FILE
 *
p
, 
time_t
 *
pTime
){

1170 
rc
;

1171 #i‡
SQLITE_OS_UNIX


1172 
°©
 
buf
;

1173 
rc
 = 
	`f°©
(
	`fûío
(
p
->
f
), &
buf
);

1175 #i‡
SQLITE_OS_WIN


1176 
_°©i64
 
buf
;

1177 
rc
 = 
	`_°©i64
(
p
->
zMbcsName
, &
buf
);

1179 if–
rc
==0 ) *
pTime
 = 
buf
.
°_mtime
;

1180  
rc
;

1181 
	}
}

1187 
sqlôe3_öt64
 
	$sqlôe3_quŸa_fûe_åuesize
(
quŸa_FILE
 *
p
){

1188 
rc
;

1189 #i‡
SQLITE_OS_UNIX


1190 
°©
 
buf
;

1191 
rc
 = 
	`f°©
(
	`fûío
(
p
->
f
), &
buf
);

1193 #i‡
SQLITE_OS_WIN


1194 
_°©i64
 
buf
;

1195 
rc
 = 
	`_°©i64
(
p
->
zMbcsName
, &
buf
);

1197  
rc
==0 ? 
buf
.
°_size
 : -1;

1198 
	}
}

1203 
sqlôe3_öt64
 
	$sqlôe3_quŸa_fûe_size
(
quŸa_FILE
 *
p
){

1204  
p
->
pFûe
 ?Ö->pFûe->
iSize
 : -1;

1205 
	}
}

1211 
	$sqlôe3_quŸa_fûe_avaûabÀ
(
quŸa_FILE
 *
p
){

1212 
FILE
* 
f
 = 
p
->f;

1213 
pos1
, 
pos2
;

1214 
rc
;

1215 
pos1
 = 
	`·ñl
(
f
);

1216 i‡–
pos1
 < 0 )  -1;

1217 
rc
 = 
	`f£ek
(
f
, 0, 
SEEK_END
);

1218 i‡–
rc
 != 0 )  -1;

1219 
pos2
 = 
	`·ñl
(
f
);

1220 i‡–
pos2
 < 0 )  -1;

1221 
rc
 = 
	`f£ek
(
f
, 
pos1
, 
SEEK_SET
);

1222 i‡–
rc
 != 0 )  -1;

1223  
pos2
 - 
pos1
;

1224 
	}
}

1229 
	$sqlôe3_quŸa_ªmove
(c⁄° *
zFûíame
){

1230 *
zFuŒ
;

1231 
size_t
 
nFuŒ
;

1232 
rc
;

1233 
quŸaGroup
 *
pGroup
;

1234 
quŸaFûe
 *
pFûe
;

1235 
quŸaFûe
 *
pNextFûe
;

1236 
diff
;

1237 
c
;

1239 
zFuŒ
 = (*)
	`sqlôe3_mÆloc
(
gQuŸa
.
sThisVfs
.
mxP©h«me
 + 1);

1240 if–
zFuŒ
==0 )  
SQLITE_NOMEM
;

1241 
rc
 = 
gQuŸa
.
pOrigVfs
->
	`xFuŒP©h«me
(gQuŸa.pOrigVfs, 
zFûíame
,

1242 
gQuŸa
.
sThisVfs
.
mxP©h«me
+1, 
zFuŒ
);

1243 if–
rc
 ){

1244 
	`sqlôe3_‰ì
(
zFuŒ
);

1245  
rc
;

1251 
nFuŒ
 = 
	`°æí
(
zFuŒ
);

1252 if–
nFuŒ
>0 && (
zFuŒ
[nFull-1]=='/' || zFull[nFull-1]=='\\') ){

1253 
nFuŒ
--;

1254 
zFuŒ
[
nFuŒ
] = 0;

1257 
	`quŸaE¡î
();

1258 
pGroup
 = 
	`quŸaGroupFöd
(
zFuŒ
);

1259 if–
pGroup
 ){

1260 
pFûe
=
pGroup
->
pFûes
;ÖFûê&& 
rc
==
SQLITE_OK
;ÖFûe=
pNextFûe
){

1261 
pNextFûe
 = 
pFûe
->
pNext
;

1262 
diff
 = 
	`°∫cmp
(
zFuŒ
, 
pFûe
->
zFûíame
, 
nFuŒ
);

1263 if–
diff
==0 && ((
c
 = 
pFûe
->
zFûíame
[
nFuŒ
])==0 || c=='/' || c=='\\') ){

1264 if–
pFûe
->
nRef
 ){

1265 
pFûe
->
dñëeOnClo£
 = 1;

1267 
rc
 = 
gQuŸa
.
pOrigVfs
->
	`xDñëe
(gQuŸa.pOrigVfs, 
pFûe
->
zFûíame
, 0);

1268 
	`quŸaRemoveFûe
(
pFûe
);

1269 
	`quŸaGroupDîef
(
pGroup
);

1274 
	`quŸaLóve
();

1275 
	`sqlôe3_‰ì
(
zFuŒ
);

1276  
rc
;

1277 
	}
}

1280 #ifde‡
SQLITE_TEST


1281 
	~<t˛.h
>

1286 
T˛QuŸaCÆlback
 
	tT˛QuŸaCÆlback
;

1287 
	sT˛QuŸaCÆlback
 {

1288 
T˛_I¡îp
 *
	möãΩ
;

1289 
T˛_Obj
 *
	mpS¸ùt
;

1292 c⁄° *
sqlôe3EºName
();

1298 
	$t˛QuŸaCÆlback
(

1299 c⁄° *
zFûíame
,

1300 
sqlôe3_öt64
 *
piLimô
,

1301 
sqlôe3_öt64
 
iSize
,

1302 *
pArg


1304 
T˛QuŸaCÆlback
 *
p
;

1305 
T˛_Obj
 *
pEvÆ
;

1306 
T˛_Obj
 *
pV¨«me
;

1307 
∫d
;

1308 
rc
;

1310 
p
 = (
T˛QuŸaCÆlback
 *)
pArg
;

1311 if–
p
==0 ) ;

1313 
pV¨«me
 = 
	`T˛_NewSåögObj
("::piLimit_", -1);

1314 
	`T˛_In¸RefCou¡
(
pV¨«me
);

1315 
	`sqlôe3_øndom√ss
((
∫d
), (*)&rnd);

1316 
	`T˛_AµídObjToObj
(
pV¨«me
, 
	`T˛_NewI¡Obj
(()(
∫d
&0x7FFFFFFF)));

1317 
	`T˛_ObjSëV¨2
(
p
->
öãΩ
, 
pV¨«me
, 0, 
	`T˛_NewWideI¡Obj
(*
piLimô
), 0);

1319 
pEvÆ
 = 
	`T˛_Du∂iˇãObj
(
p
->
pS¸ùt
);

1320 
	`T˛_In¸RefCou¡
(
pEvÆ
);

1321 
	`T˛_Li°ObjAµídEÀmít
(0, 
pEvÆ
, 
	`T˛_NewSåögObj
(
zFûíame
, -1));

1322 
	`T˛_Li°ObjAµídEÀmít
(0, 
pEvÆ
, 
pV¨«me
);

1323 
	`T˛_Li°ObjAµídEÀmít
(0, 
pEvÆ
, 
	`T˛_NewWideI¡Obj
(
iSize
));

1324 
rc
 = 
	`T˛_EvÆObjEx
(
p
->
öãΩ
, 
pEvÆ
, 
TCL_EVAL_GLOBAL
);

1326 if–
rc
==
TCL_OK
 ){

1327 
T˛_WideI¡
 
x
;

1328 
T˛_Obj
 *
pLimô
 = 
	`T˛_ObjGëV¨2
(
p
->
öãΩ
, 
pV¨«me
, 0, 0);

1329 
rc
 = 
	`T˛_GëWideI¡FromObj
(
p
->
öãΩ
, 
pLimô
, &
x
);

1330 *
piLimô
 = 
x
;

1331 
	`T˛_Un£tV¨
(
p
->
öãΩ
, 
	`T˛_GëSåög
(
pV¨«me
), 0);

1334 
	`T˛_De¸RefCou¡
(
pEvÆ
);

1335 
	`T˛_De¸RefCou¡
(
pV¨«me
);

1336 if–
rc
!=
TCL_OK
 ) 
	`T˛_BackgroundEº‹
(
p
->
öãΩ
);

1337 
	}
}

1342 
	$t˛CÆlbackDe°ru˘‹
(*
pObj
){

1343 
T˛QuŸaCÆlback
 *
p
 = (T˛QuŸaCÆlback*)
pObj
;

1344 if–
p
 ){

1345 
	`T˛_De¸RefCou¡
(
p
->
pS¸ùt
);

1346 
	`sqlôe3_‰ì
((*)
p
);

1348 
	}
}

1353 
	$ã°_quŸa_öôülize
(

1354 * 
˛õ¡D©a
,

1355 
T˛_I¡îp
 *
öãΩ
,

1356 
objc
,

1357 
T˛_Obj
 *
CONST
 
objv
[]

1359 c⁄° *
zName
;

1360 
makeDeÁu…
;

1361 
rc
;

1364 if–
objc
!=3 ){

1365 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "NAME MAKEDEFAULT");

1366  
TCL_ERROR
;

1368 
zName
 = 
	`T˛_GëSåög
(
objv
[1]);

1369 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[2], &
makeDeÁu…
ËË 
TCL_ERROR
;

1370 if–
zName
[0]=='\0' ) zName = 0;

1373 
rc
 = 
	`sqlôe3_quŸa_öôülize
(
zName
, 
makeDeÁu…
);

1374 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_STATIC
);

1376  
TCL_OK
;

1377 
	}
}

1382 
	$ã°_quŸa_shutdown
(

1383 * 
˛õ¡D©a
,

1384 
T˛_I¡îp
 *
öãΩ
,

1385 
objc
,

1386 
T˛_Obj
 *
CONST
 
objv
[]

1388 
rc
;

1390 if–
objc
!=1 ){

1391 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

1392  
TCL_ERROR
;

1396 
rc
 = 
	`sqlôe3_quŸa_shutdown
();

1397 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_STATIC
);

1399  
TCL_OK
;

1400 
	}
}

1405 
	$ã°_quŸa_£t
(

1406 * 
˛õ¡D©a
,

1407 
T˛_I¡îp
 *
öãΩ
,

1408 
objc
,

1409 
T˛_Obj
 *
CONST
 
objv
[]

1411 c⁄° *
zP©ã∫
;

1412 
T˛_WideI¡
 
iLimô
;

1413 
T˛_Obj
 *
pS¸ùt
;

1414 
rc
;

1415 
T˛QuŸaCÆlback
 *
p
;

1416 
nS¸ùt
;

1417 (*
xDe°roy
)(*);

1418 (*
xCÆlback
)(c⁄° *, 
sqlôe3_öt64
 *, sqlite3_int64, *);

1421 if–
objc
!=4 ){

1422 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "PATTERN LIMIT SCRIPT");

1423  
TCL_ERROR
;

1425 
zP©ã∫
 = 
	`T˛_GëSåög
(
objv
[1]);

1426 if–
	`T˛_GëWideI¡FromObj
(
öãΩ
, 
objv
[2], &
iLimô
ËË 
TCL_ERROR
;

1427 
pS¸ùt
 = 
objv
[3];

1428 
	`T˛_GëSåögFromObj
(
pS¸ùt
, &
nS¸ùt
);

1430 if–
nS¸ùt
>0 ){

1432 
p
 = (
T˛QuŸaCÆlback
 *)
	`sqlôe3_mÆloc
((TclQuotaCallback));

1433 if–!
p
 ){

1434 
	`T˛_SëResu…
(
öãΩ
, (*)"SQLITE_NOMEM", 
TCL_STATIC
);

1435  
TCL_OK
;

1437 
	`mem£t
(
p
, 0, (
T˛QuŸaCÆlback
));

1438 
p
->
öãΩ
 = interp;

1439 
	`T˛_In¸RefCou¡
(
pS¸ùt
);

1440 
p
->
pS¸ùt
 =ÖScript;

1441 
xDe°roy
 = 
t˛CÆlbackDe°ru˘‹
;

1442 
xCÆlback
 = 
t˛QuŸaCÆlback
;

1444 
p
 = 0;

1445 
xDe°roy
 = 0;

1446 
xCÆlback
 = 0;

1450 
rc
 = 
	`sqlôe3_quŸa_£t
(
zP©ã∫
, 
iLimô
, 
xCÆlback
, (*)
p
, 
xDe°roy
);

1452 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_STATIC
);

1453  
TCL_OK
;

1454 
	}
}

1459 
	$ã°_quŸa_fûe
(

1460 * 
˛õ¡D©a
,

1461 
T˛_I¡îp
 *
öãΩ
,

1462 
objc
,

1463 
T˛_Obj
 *
CONST
 
objv
[]

1465 c⁄° *
zFûíame
;

1466 
rc
;

1469 if–
objc
!=2 ){

1470 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "FILENAME");

1471  
TCL_ERROR
;

1473 
zFûíame
 = 
	`T˛_GëSåög
(
objv
[1]);

1476 
rc
 = 
	`sqlôe3_quŸa_fûe
(
zFûíame
);

1478 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_STATIC
);

1479  
TCL_OK
;

1480 
	}
}

1485 
	$ã°_quŸa_dump
(

1486 * 
˛õ¡D©a
,

1487 
T˛_I¡îp
 *
öãΩ
,

1488 
objc
,

1489 
T˛_Obj
 *
CONST
 
objv
[]

1491 
T˛_Obj
 *
pResu…
;

1492 
T˛_Obj
 *
pGroupTîm
;

1493 
T˛_Obj
 *
pFûeTîm
;

1494 
quŸaGroup
 *
pGroup
;

1495 
quŸaFûe
 *
pFûe
;

1497 
pResu…
 = 
	`T˛_NewObj
();

1498 
	`quŸaE¡î
();

1499 
pGroup
=
gQuŸa
.pGroup;ÖGroup;ÖGroupıGroup->
pNext
){

1500 
pGroupTîm
 = 
	`T˛_NewObj
();

1501 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pGroupTîm
,

1502 
	`T˛_NewSåögObj
(
pGroup
->
zP©ã∫
, -1));

1503 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pGroupTîm
,

1504 
	`T˛_NewWideI¡Obj
(
pGroup
->
iLimô
));

1505 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pGroupTîm
,

1506 
	`T˛_NewWideI¡Obj
(
pGroup
->
iSize
));

1507 
pFûe
=
pGroup
->
pFûes
;ÖFûe;ÖFûeıFûe->
pNext
){

1508 
i
;

1509 
zTemp
[1000];

1510 
pFûeTîm
 = 
	`T˛_NewObj
();

1511 
	`sqlôe3_¢¥ötf
((
zTemp
), zTemp, "%s", 
pFûe
->
zFûíame
);

1512 
i
=0; 
zTemp
[i]; i++){ if( zTemp[i]=='\\' ) zTemp[i] = '/'; }

1513 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pFûeTîm
,

1514 
	`T˛_NewSåögObj
(
zTemp
, -1));

1515 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pFûeTîm
,

1516 
	`T˛_NewWideI¡Obj
(
pFûe
->
iSize
));

1517 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pFûeTîm
,

1518 
	`T˛_NewWideI¡Obj
(
pFûe
->
nRef
));

1519 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pFûeTîm
,

1520 
	`T˛_NewWideI¡Obj
(
pFûe
->
dñëeOnClo£
));

1521 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pGroupTîm
, 
pFûeTîm
);

1523 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pResu…
, 
pGroupTîm
);

1525 
	`quŸaLóve
();

1526 
	`T˛_SëObjResu…
(
öãΩ
, 
pResu…
);

1527  
TCL_OK
;

1528 
	}
}

1533 
	$ã°_quŸa_f›í
(

1534 * 
˛õ¡D©a
,

1535 
T˛_I¡îp
 *
öãΩ
,

1536 
objc
,

1537 
T˛_Obj
 *
CONST
 
objv
[]

1539 c⁄° *
zFûíame
;

1540 c⁄° *
zMode
;

1541 
quŸa_FILE
 *
p
;

1542 
zRëu∫
[50];

1545 if–
objc
!=3 ){

1546 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "FILENAME MODE");

1547  
TCL_ERROR
;

1549 
zFûíame
 = 
	`T˛_GëSåög
(
objv
[1]);

1550 
zMode
 = 
	`T˛_GëSåög
(
objv
[2]);

1551 
p
 = 
	`sqlôe3_quŸa_f›í
(
zFûíame
, 
zMode
);

1552 
	`sqlôe3_¢¥ötf
((
zRëu∫
), zRëu∫, "%p", 
p
);

1553 
	`T˛_SëResu…
(
öãΩ
, 
zRëu∫
, 
TCL_VOLATILE
);

1554  
TCL_OK
;

1555 
	}
}

1558 *
sqlôe3Te°TextToPå
(const *);

1563 
	$ã°_quŸa_‰ód
(

1564 * 
˛õ¡D©a
,

1565 
T˛_I¡îp
 *
öãΩ
,

1566 
objc
,

1567 
T˛_Obj
 *
CONST
 
objv
[]

1569 
quŸa_FILE
 *
p
;

1570 *
zBuf
;

1571 
sz
;

1572 
nEÀm
;

1573 
size_t
 
gŸ
;

1575 if–
objc
!=4 ){

1576 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "HANDLE SIZE NELEM");

1577  
TCL_ERROR
;

1579 
p
 = 
	`sqlôe3Te°TextToPå
(
	`T˛_GëSåög
(
objv
[1]));

1580 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
sz
ËË 
TCL_ERROR
;

1581 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
nEÀm
ËË 
TCL_ERROR
;

1582 
zBuf
 = (*)
	`sqlôe3_mÆloc
–
sz
*
nEÀm
 + 1 );

1583 if–
zBuf
==0 ){

1584 
	`T˛_SëResu…
(
öãΩ
, "ouào‡mem‹y", 
TCL_STATIC
);

1585  
TCL_ERROR
;

1587 
gŸ
 = 
	`sqlôe3_quŸa_‰ód
(
zBuf
, 
sz
, 
nEÀm
, 
p
);

1588 
zBuf
[
gŸ
*
sz
] = 0;

1589 
	`T˛_SëResu…
(
öãΩ
, 
zBuf
, 
TCL_VOLATILE
);

1590 
	`sqlôe3_‰ì
(
zBuf
);

1591  
TCL_OK
;

1592 
	}
}

1597 
	$ã°_quŸa_fwrôe
(

1598 * 
˛õ¡D©a
,

1599 
T˛_I¡îp
 *
öãΩ
,

1600 
objc
,

1601 
T˛_Obj
 *
CONST
 
objv
[]

1603 
quŸa_FILE
 *
p
;

1604 *
zBuf
;

1605 
sz
;

1606 
nEÀm
;

1607 
size_t
 
gŸ
;

1609 if–
objc
!=5 ){

1610 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "HANDLE SIZE NELEM CONTENT");

1611  
TCL_ERROR
;

1613 
p
 = 
	`sqlôe3Te°TextToPå
(
	`T˛_GëSåög
(
objv
[1]));

1614 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
sz
ËË 
TCL_ERROR
;

1615 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
nEÀm
ËË 
TCL_ERROR
;

1616 
zBuf
 = 
	`T˛_GëSåög
(
objv
[4]);

1617 
gŸ
 = 
	`sqlôe3_quŸa_fwrôe
(
zBuf
, 
sz
, 
nEÀm
, 
p
);

1618 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewWideI¡Obj
(
gŸ
));

1619  
TCL_OK
;

1620 
	}
}

1625 
	$ã°_quŸa_f˛o£
(

1626 * 
˛õ¡D©a
,

1627 
T˛_I¡îp
 *
öãΩ
,

1628 
objc
,

1629 
T˛_Obj
 *
CONST
 
objv
[]

1631 
quŸa_FILE
 *
p
;

1632 
rc
;

1634 if–
objc
!=2 ){

1635 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "HANDLE");

1636  
TCL_ERROR
;

1638 
p
 = 
	`sqlôe3Te°TextToPå
(
	`T˛_GëSåög
(
objv
[1]));

1639 
rc
 = 
	`sqlôe3_quŸa_f˛o£
(
p
);

1640 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

1641  
TCL_OK
;

1642 
	}
}

1647 
	$ã°_quŸa_fÊush
(

1648 * 
˛õ¡D©a
,

1649 
T˛_I¡îp
 *
öãΩ
,

1650 
objc
,

1651 
T˛_Obj
 *
CONST
 
objv
[]

1653 
quŸa_FILE
 *
p
;

1654 
rc
;

1655 
doSync
 = 0;

1657 if–
objc
!=2 && objc!=3 ){

1658 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "HANDLE ?HARDSYNC?");

1659  
TCL_ERROR
;

1661 
p
 = 
	`sqlôe3Te°TextToPå
(
	`T˛_GëSåög
(
objv
[1]));

1662 if–
objc
==3 ){

1663 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[2], &
doSync
ËË 
TCL_ERROR
;

1665 
rc
 = 
	`sqlôe3_quŸa_fÊush
(
p
, 
doSync
);

1666 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

1667  
TCL_OK
;

1668 
	}
}

1673 
	$ã°_quŸa_f£ek
(

1674 * 
˛õ¡D©a
,

1675 
T˛_I¡îp
 *
öãΩ
,

1676 
objc
,

1677 
T˛_Obj
 *
CONST
 
objv
[]

1679 
quŸa_FILE
 *
p
;

1680 
of°
;

1681 c⁄° *
zWhí˚
;

1682 
whí˚
;

1683 
rc
;

1685 if–
objc
!=4 ){

1686 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "HANDLE OFFSET WHENCE");

1687  
TCL_ERROR
;

1689 
p
 = 
	`sqlôe3Te°TextToPå
(
	`T˛_GëSåög
(
objv
[1]));

1690 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
of°
ËË 
TCL_ERROR
;

1691 
zWhí˚
 = 
	`T˛_GëSåög
(
objv
[3]);

1692 if–
	`°rcmp
(
zWhí˚
, "SEEK_SET")==0 ){

1693 
whí˚
 = 
SEEK_SET
;

1694 }if–
	`°rcmp
(
zWhí˚
, "SEEK_CUR")==0 ){

1695 
whí˚
 = 
SEEK_CUR
;

1696 }if–
	`°rcmp
(
zWhí˚
, "SEEK_END")==0 ){

1697 
whí˚
 = 
SEEK_END
;

1699 
	`T˛_AµídResu…
(
öãΩ
,

1701  
TCL_ERROR
;

1703 
rc
 = 
	`sqlôe3_quŸa_f£ek
(
p
, 
of°
, 
whí˚
);

1704 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

1705  
TCL_OK
;

1706 
	}
}

1711 
	$ã°_quŸa_ªwöd
(

1712 * 
˛õ¡D©a
,

1713 
T˛_I¡îp
 *
öãΩ
,

1714 
objc
,

1715 
T˛_Obj
 *
CONST
 
objv
[]

1717 
quŸa_FILE
 *
p
;

1718 if–
objc
!=2 ){

1719 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "HANDLE");

1720  
TCL_ERROR
;

1722 
p
 = 
	`sqlôe3Te°TextToPå
(
	`T˛_GëSåög
(
objv
[1]));

1723 
	`sqlôe3_quŸa_ªwöd
(
p
);

1724  
TCL_OK
;

1725 
	}
}

1730 
	$ã°_quŸa_·ñl
(

1731 * 
˛õ¡D©a
,

1732 
T˛_I¡îp
 *
öãΩ
,

1733 
objc
,

1734 
T˛_Obj
 *
CONST
 
objv
[]

1736 
quŸa_FILE
 *
p
;

1737 
sqlôe3_öt64
 
x
;

1738 if–
objc
!=2 ){

1739 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "HANDLE");

1740  
TCL_ERROR
;

1742 
p
 = 
	`sqlôe3Te°TextToPå
(
	`T˛_GëSåög
(
objv
[1]));

1743 
x
 = 
	`sqlôe3_quŸa_·ñl
(
p
);

1744 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewWideI¡Obj
(
x
));

1745  
TCL_OK
;

1746 
	}
}

1751 
	$ã°_quŸa_·runˇã
(

1752 * 
˛õ¡D©a
,

1753 
T˛_I¡îp
 *
öãΩ
,

1754 
objc
,

1755 
T˛_Obj
 *
CONST
 
objv
[]

1757 
quŸa_FILE
 *
p
;

1758 
sqlôe3_öt64
 
x
;

1759 
T˛_WideI¡
 
w
;

1760 
rc
;

1761 if–
objc
!=3 ){

1762 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "HANDLE SIZE");

1763  
TCL_ERROR
;

1765 
p
 = 
	`sqlôe3Te°TextToPå
(
	`T˛_GëSåög
(
objv
[1]));

1766 if–
	`T˛_GëWideI¡FromObj
(
öãΩ
, 
objv
[2], &
w
ËË 
TCL_ERROR
;

1767 
x
 = (
sqlôe3_öt64
)
w
;

1768 
rc
 = 
	`sqlôe3_quŸa_·runˇã
(
p
, 
x
);

1769 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

1770  
TCL_OK
;

1771 
	}
}

1776 
	$ã°_quŸa_fûe_size
(

1777 * 
˛õ¡D©a
,

1778 
T˛_I¡îp
 *
öãΩ
,

1779 
objc
,

1780 
T˛_Obj
 *
CONST
 
objv
[]

1782 
quŸa_FILE
 *
p
;

1783 
sqlôe3_öt64
 
x
;

1784 if–
objc
!=2 ){

1785 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "HANDLE");

1786  
TCL_ERROR
;

1788 
p
 = 
	`sqlôe3Te°TextToPå
(
	`T˛_GëSåög
(
objv
[1]));

1789 
x
 = 
	`sqlôe3_quŸa_fûe_size
(
p
);

1790 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewWideI¡Obj
(
x
));

1791  
TCL_OK
;

1792 
	}
}

1797 
	$ã°_quŸa_fûe_åuesize
(

1798 * 
˛õ¡D©a
,

1799 
T˛_I¡îp
 *
öãΩ
,

1800 
objc
,

1801 
T˛_Obj
 *
CONST
 
objv
[]

1803 
quŸa_FILE
 *
p
;

1804 
sqlôe3_öt64
 
x
;

1805 if–
objc
!=2 ){

1806 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "HANDLE");

1807  
TCL_ERROR
;

1809 
p
 = 
	`sqlôe3Te°TextToPå
(
	`T˛_GëSåög
(
objv
[1]));

1810 
x
 = 
	`sqlôe3_quŸa_fûe_åuesize
(
p
);

1811 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewWideI¡Obj
(
x
));

1812  
TCL_OK
;

1813 
	}
}

1818 
	$ã°_quŸa_fûe_mtime
(

1819 * 
˛õ¡D©a
,

1820 
T˛_I¡îp
 *
öãΩ
,

1821 
objc
,

1822 
T˛_Obj
 *
CONST
 
objv
[]

1824 
quŸa_FILE
 *
p
;

1825 
time_t
 
t
;

1826 if–
objc
!=2 ){

1827 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "HANDLE");

1828  
TCL_ERROR
;

1830 
p
 = 
	`sqlôe3Te°TextToPå
(
	`T˛_GëSåög
(
objv
[1]));

1831 
t
 = 0;

1832 
	`sqlôe3_quŸa_fûe_mtime
(
p
, &
t
);

1833 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewWideI¡Obj
(
t
));

1834  
TCL_OK
;

1835 
	}
}

1841 
	$ã°_quŸa_ªmove
(

1842 * 
˛õ¡D©a
,

1843 
T˛_I¡îp
 *
öãΩ
,

1844 
objc
,

1845 
T˛_Obj
 *
CONST
 
objv
[]

1847 c⁄° *
zFûíame
;

1848 
rc
;

1849 if–
objc
!=2 ){

1850 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "FILENAME");

1851  
TCL_ERROR
;

1853 
zFûíame
 = 
	`T˛_GëSåög
(
objv
[1]);

1854 
rc
 = 
	`sqlôe3_quŸa_ªmove
(
zFûíame
);

1855 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

1856  
TCL_OK
;

1857 
	}
}

1865 
	$ã°_quŸa_glob
(

1866 * 
˛õ¡D©a
,

1867 
T˛_I¡îp
 *
öãΩ
,

1868 
objc
,

1869 
T˛_Obj
 *
CONST
 
objv
[]

1871 c⁄° *
zP©ã∫
;

1872 c⁄° *
zText
;

1873 
rc
;

1874 if–
objc
!=3 ){

1875 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "PATTERN TEXT");

1876  
TCL_ERROR
;

1878 
zP©ã∫
 = 
	`T˛_GëSåög
(
objv
[1]);

1879 
zText
 = 
	`T˛_GëSåög
(
objv
[2]);

1880 
rc
 = 
	`quŸaSåglob
(
zP©ã∫
, 
zText
);

1881 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
rc
));

1882  
TCL_OK
;

1883 
	}
}

1891 
	$ã°_quŸa_fûe_avaûabÀ
(

1892 * 
˛õ¡D©a
,

1893 
T˛_I¡îp
 *
öãΩ
,

1894 
objc
,

1895 
T˛_Obj
 *
CONST
 
objv
[]

1897 
quŸa_FILE
 *
p
;

1898 
sqlôe3_öt64
 
x
;

1899 if–
objc
!=2 ){

1900 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "HANDLE");

1901  
TCL_ERROR
;

1903 
p
 = 
	`sqlôe3Te°TextToPå
(
	`T˛_GëSåög
(
objv
[1]));

1904 
x
 = 
	`sqlôe3_quŸa_fûe_avaûabÀ
(
p
);

1905 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewWideI¡Obj
(
x
));

1906  
TCL_OK
;

1907 
	}
}

1914 
	$ã°_quŸa_„º‹
(

1915 * 
˛õ¡D©a
,

1916 
T˛_I¡îp
 *
öãΩ
,

1917 
objc
,

1918 
T˛_Obj
 *
CONST
 
objv
[]

1920 
quŸa_FILE
 *
p
;

1921 
x
;

1922 if–
objc
!=2 ){

1923 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "HANDLE");

1924  
TCL_ERROR
;

1926 
p
 = 
	`sqlôe3Te°TextToPå
(
	`T˛_GëSåög
(
objv
[1]));

1927 
x
 = 
	`sqlôe3_quŸa_„º‹
(
p
);

1928 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
x
));

1929  
TCL_OK
;

1930 
	}
}

1937 
	$SqlôequŸa_Inô
(
T˛_I¡îp
 *
öãΩ
){

1939 *
zName
;

1940 
T˛_ObjCmdProc
 *
xProc
;

1941 } 
aCmd
[] = {

1942 { "sqlôe3_quŸa_öôülize", 
ã°_quŸa_öôülize
 },

1943 { "sqlôe3_quŸa_shutdown", 
ã°_quŸa_shutdown
 },

1944 { "sqlôe3_quŸa_£t", 
ã°_quŸa_£t
 },

1945 { "sqlôe3_quŸa_fûe", 
ã°_quŸa_fûe
 },

1946 { "sqlôe3_quŸa_dump", 
ã°_quŸa_dump
 },

1947 { "sqlôe3_quŸa_f›í", 
ã°_quŸa_f›í
 },

1948 { "sqlôe3_quŸa_‰ód", 
ã°_quŸa_‰ód
 },

1949 { "sqlôe3_quŸa_fwrôe", 
ã°_quŸa_fwrôe
 },

1950 { "sqlôe3_quŸa_f˛o£", 
ã°_quŸa_f˛o£
 },

1951 { "sqlôe3_quŸa_fÊush", 
ã°_quŸa_fÊush
 },

1952 { "sqlôe3_quŸa_f£ek", 
ã°_quŸa_f£ek
 },

1953 { "sqlôe3_quŸa_ªwöd", 
ã°_quŸa_ªwöd
 },

1954 { "sqlôe3_quŸa_·ñl", 
ã°_quŸa_·ñl
 },

1955 { "sqlôe3_quŸa_·runˇã", 
ã°_quŸa_·runˇã
 },

1956 { "sqlôe3_quŸa_fûe_size", 
ã°_quŸa_fûe_size
 },

1957 { "sqlôe3_quŸa_fûe_åuesize", 
ã°_quŸa_fûe_åuesize
 },

1958 { "sqlôe3_quŸa_fûe_mtime", 
ã°_quŸa_fûe_mtime
 },

1959 { "sqlôe3_quŸa_ªmove", 
ã°_quŸa_ªmove
 },

1960 { "sqlôe3_quŸa_glob", 
ã°_quŸa_glob
 },

1961 { "sqlôe3_quŸa_fûe_avaûabÀ",
ã°_quŸa_fûe_avaûabÀ
 },

1962 { "sqlôe3_quŸa_„º‹", 
ã°_quŸa_„º‹
 },

1964 
i
;

1966 
i
=0; i<(
aCmd
)/(aCmd[0]); i++){

1967 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
aCmd
[
i
].
zName
,áCmd[i].
xProc
, 0, 0);

1970  
TCL_OK
;

1971 
	}
}

	@test_quota.h

29 #i‚de‡
_QUOTA_H_


30 
	~"sqlôe3.h
"

31 
	~<°dio.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<sys/°©.h
>

36 #ifde‡
__˝lu•lus


51 
sqlôe3_quŸa_öôülize
(c⁄° *
zOrigVfsName
, 
makeDeÁu…
);

62 
sqlôe3_quŸa_shutdown
();

116 
sqlôe3_quŸa_£t
(

117 c⁄° *
zP©ã∫
,

118 
sqlôe3_öt64
 
iLimô
,

119 (*
xCÆlback
)(

120 c⁄° *
zFûíame
,

121 
sqlôe3_öt64
 *
piLimô
,

122 
sqlôe3_öt64
 
iSize
,

123 *
pArg


125 *
pArg
,

126 (*
xDe°roy
)(*)

135 
sqlôe3_quŸa_fûe
(c⁄° *
zFûíame
);

145 
quŸa_FILE
 
	tquŸa_FILE
;

151 
quŸa_FILE
 *
sqlôe3_quŸa_f›í
(c⁄° *
zFûíame
, c⁄° *
zMode
);

158 
size_t
 
sqlôe3_quŸa_‰ód
(*, size_t, size_t, 
quŸa_FILE
*);

159 
size_t
 
sqlôe3_quŸa_fwrôe
(c⁄° *, size_t, size_t, 
quŸa_FILE
*);

171 
sqlôe3_quŸa_fÊush
(
quŸa_FILE
*, 
h¨dSync
);

177 
sqlôe3_quŸa_f˛o£
(
quŸa_FILE
*);

183 
sqlôe3_quŸa_f£ek
(
quŸa_FILE
*, , );

184 
sqlôe3_quŸa_ªwöd
(
quŸa_FILE
*);

185 
sqlôe3_quŸa_·ñl
(
quŸa_FILE
*);

192 
sqlôe3_quŸa_„º‹
(
quŸa_FILE
*);

202 
sqlôe3_quŸa_·runˇã
(
quŸa_FILE
*, 
sqlôe3_öt64
 
√wSize
);

208 
sqlôe3_quŸa_fûe_mtime
(
quŸa_FILE
*, 
time_t
 *
pTime
);

221 
sqlôe3_öt64
 
sqlôe3_quŸa_fûe_size
(
quŸa_FILE
*);

234 
sqlôe3_öt64
 
sqlôe3_quŸa_fûe_åuesize
(
quŸa_FILE
*);

242 
sqlôe3_quŸa_fûe_avaûabÀ
(
quŸa_FILE
*);

263 
sqlôe3_quŸa_ªmove
(c⁄° *
zFûíame
);

265 #ifde‡
__˝lu•lus


	@test_rtree.c

16 
	~"sqlôe3.h
"

17 
	~<t˛.h
>

20 
	~"sqlôeI¡.h
"

22 #ifde‡
SQLITE_ENABLE_RTREE


27 
Cú˛e
 
	tCú˛e
;

28 
	sCú˛e
 {

29 
	sBox
 {

30 
	mxmö
;

31 
	mxmax
;

32 
	mymö
;

33 
	mymax
;

34 } 
	maBox
[2];

35 
	m˚¡îx
;

36 
	m˚¡îy
;

37 
	mødius
;

38 
	mmxAªa
;

39 
	meSc‹eTy≥
;

45 
	$cú˛e_dñ
(*
p
){

46 
	`sqlôe3_‰ì
(
p
);

47 
	}
}

52 
	$cú˛e_geom
(

53 
sqlôe3_πªe_geomëry
 *
p
,

54 
nCo‹d
,

55 
sqlôe3_πªe_dbl
 *
aCo‹d
,

56 *
pRes


58 
i
;

59 
Cú˛e
 *
pCú˛e
;

60 
xmö
, 
xmax
;

61 
ymö
, 
ymax
;

63 
xmö
 = 
aCo‹d
[0];

64 
xmax
 = 
aCo‹d
[1];

65 
ymö
 = 
aCo‹d
[2];

66 
ymax
 = 
aCo‹d
[3];

67 
pCú˛e
 = (
Cú˛e
 *)
p
->
pU£r
;

68 if–
pCú˛e
==0 ){

74 if–
nCo‹d
!=4 )  
SQLITE_ERROR
;

79 if–
p
->
nP¨am
!=3 ||Ö->
aP¨am
[2]<0.0 )  
SQLITE_ERROR
;

83 
pCú˛e
 = (
Cú˛e
 *)(
p
->
pU£r
 = 
	`sqlôe3_mÆloc
((Circle)));

84 if–!
pCú˛e
 )  
SQLITE_NOMEM
;

85 
p
->
xDñU£r
 = 
cú˛e_dñ
;

91 
pCú˛e
->
˚¡îx
 = 
p
->
aP¨am
[0];

92 
pCú˛e
->
˚¡îy
 = 
p
->
aP¨am
[1];

93 
pCú˛e
->
ødius
 = 
p
->
aP¨am
[2];

106 
pCú˛e
->
aBox
[0].
xmö
 =ÖCú˛e->
˚¡îx
;

107 
pCú˛e
->
aBox
[0].
xmax
 =ÖCú˛e->
˚¡îx
;

108 
pCú˛e
->
aBox
[0].
ymö
 =ÖCú˛e->
˚¡îy
 +ÖCú˛e->
ødius
;

109 
pCú˛e
->
aBox
[0].
ymax
 =ÖCú˛e->
˚¡îy
 -ÖCú˛e->
ødius
;

110 
pCú˛e
->
aBox
[1].
xmö
 =ÖCú˛e->
˚¡îx
 +ÖCú˛e->
ødius
;

111 
pCú˛e
->
aBox
[1].
xmax
 =ÖCú˛e->
˚¡îx
 -ÖCú˛e->
ødius
;

112 
pCú˛e
->
aBox
[1].
ymö
 =ÖCú˛e->
˚¡îy
;

113 
pCú˛e
->
aBox
[1].
ymax
 =ÖCú˛e->
˚¡îy
;

114 
pCú˛e
->
mxAªa
 = (
xmax
 - 
xmö
)*(
ymax
 - 
ymö
) + 1.0;

121 
i
=0; i<4; i++){

122 
x
 = (
i
&0x01Ë? 
xmax
 : 
xmö
;

123 
y
 = (
i
&0x02Ë? 
ymax
 : 
ymö
;

124 
d2
;

126 
d2
 = (
x
-
pCú˛e
->
˚¡îx
)*(x-pCircle->centerx);

127 
d2
 +(
y
-
pCú˛e
->
˚¡îy
)*(y-pCircle->centery);

128 if–
d2
<(
pCú˛e
->
ødius
*pCircle->radius) ){

129 *
pRes
 = 1;

130  
SQLITE_OK
;

138 
i
=0; i<2; i++){

139 if–
xmö
<=
pCú˛e
->
aBox
[
i
].xmin

140 && 
xmax
>=
pCú˛e
->
aBox
[
i
].xmax

141 && 
ymö
<=
pCú˛e
->
aBox
[
i
].ymin

142 && 
ymax
>=
pCú˛e
->
aBox
[
i
].ymax

144 *
pRes
 = 1;

145  
SQLITE_OK
;

151 *
pRes
 = 0;

152  
SQLITE_OK
;

153 
	}
}

164 
	$cú˛e_quîy_func
(
sqlôe3_πªe_quîy_öfo
 *
p
){

165 
i
;

166 
Cú˛e
 *
pCú˛e
;

167 
xmö
, 
xmax
;

168 
ymö
, 
ymax
;

169 
nWôhö
 = 0;

171 
xmö
 = 
p
->
aCo‹d
[0];

172 
xmax
 = 
p
->
aCo‹d
[1];

173 
ymö
 = 
p
->
aCo‹d
[2];

174 
ymax
 = 
p
->
aCo‹d
[3];

175 
pCú˛e
 = (
Cú˛e
 *)
p
->
pU£r
;

176 if–
pCú˛e
==0 ){

182 if–
p
->
nCo‹d
!=4 )  
SQLITE_ERROR
;

186 if–
p
->
nP¨am
!=4 &&Ö->nP¨am!=1 )  
SQLITE_ERROR
;

190 
pCú˛e
 = (
Cú˛e
 *)(
p
->
pU£r
 = 
	`sqlôe3_mÆloc
((Circle)));

191 if–!
pCú˛e
 )  
SQLITE_NOMEM
;

192 
p
->
xDñU£r
 = 
cú˛e_dñ
;

198 if–
p
->
nP¨am
==4 ){

199 
pCú˛e
->
˚¡îx
 = 
p
->
aP¨am
[0];

200 
pCú˛e
->
˚¡îy
 = 
p
->
aP¨am
[1];

201 
pCú˛e
->
ødius
 = 
p
->
aP¨am
[2];

202 
pCú˛e
->
eSc‹eTy≥
 = ()
p
->
aP¨am
[3];

204 c⁄° *
z
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
p
->
≠SqlP¨am
[0]);

205 
pCú˛e
->
˚¡îx
 = 0.0;

206 
pCú˛e
->
˚¡îy
 = 0.0;

207 
pCú˛e
->
ødius
 = 0.0;

208 
pCú˛e
->
eSc‹eTy≥
 = 0;

209  
z
 && z[0] ){

210 if–
z
[0]=='r' && z[1]==':' ){

211 
pCú˛e
->
ødius
 = 
	`©of
(&
z
[2]);

212 }if–
z
[0]=='x' && z[1]==':' ){

213 
pCú˛e
->
˚¡îx
 = 
	`©of
(&
z
[2]);

214 }if–
z
[0]=='y' && z[1]==':' ){

215 
pCú˛e
->
˚¡îy
 = 
	`©of
(&
z
[2]);

216 }if–
z
[0]=='e' && z[1]==':' ){

217 
pCú˛e
->
eSc‹eTy≥
 = ()
	`©of
(&
z
[2]);

218 }if–
z
[0]==' ' ){

219 
z
++;

222  
z
[0]!=0 && z[0]!=' ' ) z++;

223  
z
[0]==' ' ) z++;

226 if–
pCú˛e
->
ødius
<0.0 ){

227 
	`sqlôe3_‰ì
(
pCú˛e
);

228  
SQLITE_NOMEM
;

242 
pCú˛e
->
aBox
[0].
xmö
 =ÖCú˛e->
˚¡îx
;

243 
pCú˛e
->
aBox
[0].
xmax
 =ÖCú˛e->
˚¡îx
;

244 
pCú˛e
->
aBox
[0].
ymö
 =ÖCú˛e->
˚¡îy
 +ÖCú˛e->
ødius
;

245 
pCú˛e
->
aBox
[0].
ymax
 =ÖCú˛e->
˚¡îy
 -ÖCú˛e->
ødius
;

246 
pCú˛e
->
aBox
[1].
xmö
 =ÖCú˛e->
˚¡îx
 +ÖCú˛e->
ødius
;

247 
pCú˛e
->
aBox
[1].
xmax
 =ÖCú˛e->
˚¡îx
 -ÖCú˛e->
ødius
;

248 
pCú˛e
->
aBox
[1].
ymö
 =ÖCú˛e->
˚¡îy
;

249 
pCú˛e
->
aBox
[1].
ymax
 =ÖCú˛e->
˚¡îy
;

250 
pCú˛e
->
mxAªa
 = 200.0*200.0;

257 
i
=0; i<4; i++){

258 
x
 = (
i
&0x01Ë? 
xmax
 : 
xmö
;

259 
y
 = (
i
&0x02Ë? 
ymax
 : 
ymö
;

260 
d2
;

262 
d2
 = (
x
-
pCú˛e
->
˚¡îx
)*(x-pCircle->centerx);

263 
d2
 +(
y
-
pCú˛e
->
˚¡îy
)*(y-pCircle->centery);

264 if–
d2
<(
pCú˛e
->
ødius
*pCú˛e->ødiusËË
nWôhö
++;

271 if–
nWôhö
==0 ){

272 
i
=0; i<2; i++){

273 if–
xmö
<=
pCú˛e
->
aBox
[
i
].xmin

274 && 
xmax
>=
pCú˛e
->
aBox
[
i
].xmax

275 && 
ymö
<=
pCú˛e
->
aBox
[
i
].ymin

276 && 
ymax
>=
pCú˛e
->
aBox
[
i
].ymax

278 
nWôhö
 = 1;

284 if–
pCú˛e
->
eSc‹eTy≥
==1 ){

286 
p
->
rSc‹e
 =Ö->
iLevñ
;

287 }if–
pCú˛e
->
eSc‹eTy≥
==2 ){

289 
p
->
rSc‹e
 = 100 -Ö->
iLevñ
;

290 }if–
pCú˛e
->
eSc‹eTy≥
==3 ){

293 if–
p
->
iLevñ
==1 ){

294 
p
->
rSc‹e
 = 1.0 - (
xmax
-
xmö
)*(
ymax
-
ymö
)/
pCú˛e
->
mxAªa
;

295 if–
p
->
rSc‹e
<0.01 )Ö->rScore = 0.01;

297 
p
->
rSc‹e
 = 0.0;

299 }if–
pCú˛e
->
eSc‹eTy≥
==4 ){

301 
p
->
rSc‹e
 =Ö->
iLevñ
;

302 if–
p
->
iRowid
&1 ) 
nWôhö
 = 0;

305 
p
->
rSc‹e
 = 100 -Ö->
iLevñ
;

306 if–
p
->
iRowid
&1 ) 
nWôhö
 = 0;

308 if–
nWôhö
==0 ){

309 
p
->
eWôhö
 = 
NOT_WITHIN
;

310 }if–
nWôhö
>=4 ){

311 
p
->
eWôhö
 = 
FULLY_WITHIN
;

313 
p
->
eWôhö
 = 
PARTLY_WITHIN
;

315  
SQLITE_OK
;

316 
	}
}

325 
	$bfs_quîy_func
(
sqlôe3_πªe_quîy_öfo
 *
p
){

326 
x0
,
x1
,
y0
,
y1
;

327 
bx0
,
bx1
,
by0
,
by1
;

329 if–
p
->
nP¨am
!=4 )  
SQLITE_ERROR
;

330 
x0
 = 
p
->
aCo‹d
[0];

331 
x1
 = 
p
->
aCo‹d
[1];

332 
y0
 = 
p
->
aCo‹d
[2];

333 
y1
 = 
p
->
aCo‹d
[3];

334 
bx0
 = 
p
->
aP¨am
[0];

335 
bx1
 = 
p
->
aP¨am
[1];

336 
by0
 = 
p
->
aP¨am
[2];

337 
by1
 = 
p
->
aP¨am
[3];

338 
p
->
rSc‹e
 = 100 -Ö->
iLevñ
;

339 if–
p
->
eP¨ítWôhö
==
FULLY_WITHIN
 ){

340 
p
->
eWôhö
 = 
FULLY_WITHIN
;

341 }if–
x0
>=
bx0
 && 
x1
<=
bx1
 && 
y0
>=
by0
 && 
y1
<=
by1
 ){

342 
p
->
eWôhö
 = 
FULLY_WITHIN
;

343 }if–
x1
>=
bx0
 && 
x0
<=
bx1
 && 
y1
>=
by0
 && 
y0
<=
by1
 ){

344 
p
->
eWôhö
 = 
PARTLY_WITHIN
;

346 
p
->
eWôhö
 = 
NOT_WITHIN
;

348  
SQLITE_OK
;

349 
	}
}

355 
	~<as£π.h
>

356 
	~"t˛.h
"

358 
Cube
 
	tCube
;

359 
	sCube
 {

360 
	mx
;

361 
	my
;

362 
	mz
;

363 
	mwidth
;

364 
	mheight
;

365 
	mdïth
;

368 
	$cube_c⁄ãxt_‰ì
(*
p
){

369 
	`sqlôe3_‰ì
(
p
);

370 
	}
}

377 
	ggHîe
 = 42;

388 
	$cube_geom
(

389 
sqlôe3_πªe_geomëry
 *
p
,

390 
nCo‹d
,

391 
sqlôe3_πªe_dbl
 *
aCo‹d
,

392 *
piRes


394 
Cube
 *
pCube
 = (Cubê*)
p
->
pU£r
;

396 
	`as£π
–
p
->
pC⁄ãxt
==(*)&
gHîe
 );

398 if–
pCube
==0 ){

399 if–
p
->
nP¨am
!=6 || 
nCo‹d
!=6

400 || 
p
->
aP¨am
[3]<=0.0 ||Ö->aParam[4]<=0.0 ||Ö->aParam[5]<=0.0

402  
SQLITE_ERROR
;

404 
pCube
 = (
Cube
 *)
	`sqlôe3_mÆloc
((Cube));

405 if–!
pCube
 ){

406  
SQLITE_NOMEM
;

408 
pCube
->
x
 = 
p
->
aP¨am
[0];

409 
pCube
->
y
 = 
p
->
aP¨am
[1];

410 
pCube
->
z
 = 
p
->
aP¨am
[2];

411 
pCube
->
width
 = 
p
->
aP¨am
[3];

412 
pCube
->
height
 = 
p
->
aP¨am
[4];

413 
pCube
->
dïth
 = 
p
->
aP¨am
[5];

415 
p
->
pU£r
 = (*)
pCube
;

416 
p
->
xDñU£r
 = 
cube_c⁄ãxt_‰ì
;

419 
	`as£π
–
nCo‹d
==6 );

420 *
piRes
 = 0;

421 if–
aCo‹d
[0]<=(
pCube
->
x
+pCube->
width
)

422 && 
aCo‹d
[1]>=
pCube
->
x


423 && 
aCo‹d
[2]<=(
pCube
->
y
+pCube->
height
)

424 && 
aCo‹d
[3]>=
pCube
->
y


425 && 
aCo‹d
[4]<=(
pCube
->
z
+pCube->
dïth
)

426 && 
aCo‹d
[5]>=
pCube
->
z


428 *
piRes
 = 1;

431  
SQLITE_OK
;

432 
	}
}

435 
	$ªgi°î_cube_geom
(

436 * 
˛õ¡D©a
,

437 
T˛_I¡îp
 *
öãΩ
,

438 
objc
,

439 
T˛_Obj
 *
CONST
 
objv
[]

441 #i‚de‡
SQLITE_ENABLE_RTREE


442 
	`UNUSED_PARAMETER
(
˛õ¡D©a
);

443 
	`UNUSED_PARAMETER
(
öãΩ
);

444 
	`UNUSED_PARAMETER
(
objc
);

445 
	`UNUSED_PARAMETER
(
objv
);

447 
	`gëDbPoöãr
(
T˛_I¡îp
*, c⁄° *, 
sqlôe3
**);

448 c⁄° *
	`sqlôe3EºName
();

449 
sqlôe3
 *
db
;

450 
rc
;

452 if–
objc
!=2 ){

453 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB");

454  
TCL_ERROR
;

456 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

457 
rc
 = 
	`sqlôe3_πªe_geomëry_ˇŒback
(
db
, "cube", 
cube_geom
, (*)&
gHîe
);

458 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_STATIC
);

460  
TCL_OK
;

461 
	}
}

463 
	$ªgi°î_cú˛e_geom
(

464 * 
˛õ¡D©a
,

465 
T˛_I¡îp
 *
öãΩ
,

466 
objc
,

467 
T˛_Obj
 *
CONST
 
objv
[]

469 #i‚de‡
SQLITE_ENABLE_RTREE


470 
	`UNUSED_PARAMETER
(
˛õ¡D©a
);

471 
	`UNUSED_PARAMETER
(
öãΩ
);

472 
	`UNUSED_PARAMETER
(
objc
);

473 
	`UNUSED_PARAMETER
(
objv
);

475 
	`gëDbPoöãr
(
T˛_I¡îp
*, c⁄° *, 
sqlôe3
**);

476 c⁄° *
	`sqlôe3EºName
();

477 
sqlôe3
 *
db
;

478 
rc
;

480 if–
objc
!=2 ){

481 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB");

482  
TCL_ERROR
;

484 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

485 
rc
 = 
	`sqlôe3_πªe_geomëry_ˇŒback
(
db
, "cú˛e", 
cú˛e_geom
, 0);

486 if–
rc
==
SQLITE_OK
 ){

487 
rc
 = 
	`sqlôe3_πªe_quîy_ˇŒback
(
db
, "Qcircle",

488 
cú˛e_quîy_func
, 0, 0);

490 if–
rc
==
SQLITE_OK
 ){

491 
rc
 = 
	`sqlôe3_πªe_quîy_ˇŒback
(
db
, "breadthfirstsearch",

492 
bfs_quîy_func
, 0, 0);

494 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 
TCL_STATIC
);

496  
TCL_OK
;

497 
	}
}

499 
	$Sqlôëe°πªe_Inô
(
T˛_I¡îp
 *
öãΩ
){

500 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "ªgi°î_cube_geom", 
ªgi°î_cube_geom
, 0, 0);

501 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "ªgi°î_cú˛e_geom",
ªgi°î_cú˛e_geom
,0,0);

502  
TCL_OK
;

503 
	}
}

	@test_schema.c

21 
	#SCHEMA
 \

31 ")"

	)

37 #ifde‡
SQLITE_TEST


38 
	~"sqlôeI¡.h
"

39 
	~"t˛.h
"

41 
	~"sqlôe3ext.h
"

42 
	gSQLITE_EXTENSION_INIT1


45 
	~<°dlib.h
>

46 
	~<°rög.h
>

47 
	~<as£π.h
>

49 
schema_vèb
 
	tschema_vèb
;

50 
schema_curs‹
 
	tschema_curs‹
;

53 
	sschema_vèb
 {

54 
sqlôe3_vèb
 
	mba£
;

55 
sqlôe3
 *
	mdb
;

59 
	sschema_curs‹
 {

60 
sqlôe3_vèb_curs‹
 
	mba£
;

61 
sqlôe3_°mt
 *
	mpDbLi°
;

62 
sqlôe3_°mt
 *
	mpTabÀLi°
;

63 
sqlôe3_°mt
 *
	mpCﬁumnLi°
;

64 
	mrowid
;

70 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


75 
	$schemaDe°roy
(
sqlôe3_vèb
 *
pVèb
){

76 
	`sqlôe3_‰ì
(
pVèb
);

78 
	}
}

83 
	$schemaCª©e
(

84 
sqlôe3
 *
db
,

85 *
pAux
,

86 
¨gc
, c⁄° *c⁄°*
¨gv
,

87 
sqlôe3_vèb
 **
µVèb
,

88 **
pzEº


90 
rc
 = 
SQLITE_NOMEM
;

91 
schema_vèb
 *
pVèb
 = 
	`sqlôe3_mÆloc
((schema_vtab));

92 if–
pVèb
 ){

93 
	`mem£t
(
pVèb
, 0, (
schema_vèb
));

94 
pVèb
->
db
 = db;

95 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


96 
rc
 = 
	`sqlôe3_de˛¨e_vèb
(
db
, 
SCHEMA
);

99 *
µVèb
 = (
sqlôe3_vèb
 *)
pVèb
;

100  
rc
;

101 
	}
}

106 
	$schemaO≥n
(
sqlôe3_vèb
 *
pVTab
, 
sqlôe3_vèb_curs‹
 **
µCurs‹
){

107 
rc
 = 
SQLITE_NOMEM
;

108 
schema_curs‹
 *
pCur
;

109 
pCur
 = 
	`sqlôe3_mÆloc
((
schema_curs‹
));

110 if–
pCur
 ){

111 
	`mem£t
(
pCur
, 0, (
schema_curs‹
));

112 *
µCurs‹
 = (
sqlôe3_vèb_curs‹
 *)
pCur
;

113 
rc
 = 
SQLITE_OK
;

115  
rc
;

116 
	}
}

121 
	$schemaClo£
(
sqlôe3_vèb_curs‹
 *
cur
){

122 
schema_curs‹
 *
pCur
 = (schema_curs‹ *)
cur
;

123 
	`sqlôe3_föÆize
(
pCur
->
pDbLi°
);

124 
	`sqlôe3_föÆize
(
pCur
->
pTabÀLi°
);

125 
	`sqlôe3_föÆize
(
pCur
->
pCﬁumnLi°
);

126 
	`sqlôe3_‰ì
(
pCur
);

127  
SQLITE_OK
;

128 
	}
}

133 
	$schemaCﬁumn
(
sqlôe3_vèb_curs‹
 *
cur
, 
sqlôe3_c⁄ãxt
 *
˘x
, 
i
){

134 
schema_curs‹
 *
pCur
 = (schema_curs‹ *)
cur
;

135  
i
 ){

137 
	`sqlôe3_ªsu…_vÆue
(
˘x
, 
	`sqlôe3_cﬁumn_vÆue
(
pCur
->
pDbLi°
, 1));

140 
	`sqlôe3_ªsu…_vÆue
(
˘x
, 
	`sqlôe3_cﬁumn_vÆue
(
pCur
->
pTabÀLi°
, 0));

143 
	`sqlôe3_ªsu…_vÆue
(
˘x
, 
	`sqlôe3_cﬁumn_vÆue
(
pCur
->
pCﬁumnLi°
, 
i
-2));

146  
SQLITE_OK
;

147 
	}
}

152 
	$schemaRowid
(
sqlôe3_vèb_curs‹
 *
cur
, 
sqlôe_öt64
 *
pRowid
){

153 
schema_curs‹
 *
pCur
 = (schema_curs‹ *)
cur
;

154 *
pRowid
 = 
pCur
->
rowid
;

155  
SQLITE_OK
;

156 
	}
}

158 
	$föÆize
(
sqlôe3_°mt
 **
µStmt
){

159 
rc
 = 
	`sqlôe3_föÆize
(*
µStmt
);

160 *
µStmt
 = 0;

161  
rc
;

162 
	}
}

164 
	$schemaEof
(
sqlôe3_vèb_curs‹
 *
cur
){

165 
schema_curs‹
 *
pCur
 = (schema_curs‹ *)
cur
;

166  (
pCur
->
pDbLi°
 ? 0 : 1);

167 
	}
}

172 
	$schemaNext
(
sqlôe3_vèb_curs‹
 *
cur
){

173 
rc
 = 
SQLITE_OK
;

174 
schema_curs‹
 *
pCur
 = (schema_curs‹ *)
cur
;

175 
schema_vèb
 *
pVèb
 = (schema_vèb *)(
cur
->pVtab);

176 *
zSql
 = 0;

178  !
pCur
->
pCﬁumnLi°
 || 
SQLITE_ROW
!=
	`sqlôe3_°ï
(pCur->pColumnList) ){

179 if–
SQLITE_OK
!=(
rc
 = 
	`föÆize
(&
pCur
->
pCﬁumnLi°
)ËË
√xt_exô
;

181  !
pCur
->
pTabÀLi°
 || 
SQLITE_ROW
!=
	`sqlôe3_°ï
(pCur->pTableList) ){

182 if–
SQLITE_OK
!=(
rc
 = 
	`föÆize
(&
pCur
->
pTabÀLi°
)ËË
√xt_exô
;

184 
	`as£π
(
pCur
->
pDbLi°
);

185  
SQLITE_ROW
!=
	`sqlôe3_°ï
(
pCur
->
pDbLi°
) ){

186 
rc
 = 
	`föÆize
(&
pCur
->
pDbLi°
);

187 
√xt_exô
;

195 if–
	`sqlôe3_cﬁumn_öt
(
pCur
->
pDbLi°
, 0)==1 ){

196 
zSql
 = 
	`sqlôe3_m¥ötf
(

200 
sqlôe3_°mt
 *
pDbLi°
 = 
pCur
->pDbList;

201 
zSql
 = 
	`sqlôe3_m¥ötf
(

203 
	`sqlôe3_cﬁumn_ãxt
(
pDbLi°
, 1)

206 if–!
zSql
 ){

207 
rc
 = 
SQLITE_NOMEM
;

208 
√xt_exô
;

211 
rc
 = 
	`sqlôe3_¥ï¨e
(
pVèb
->
db
, 
zSql
, -1, &
pCur
->
pTabÀLi°
, 0);

212 
	`sqlôe3_‰ì
(
zSql
);

213 if–
rc
!=
SQLITE_OK
 ) 
√xt_exô
;

220 
zSql
 = 
	`sqlôe3_m¥ötf
("PRAGMA %Q.table_info(%Q)",

221 
	`sqlôe3_cﬁumn_ãxt
(
pCur
->
pDbLi°
, 1),

222 
	`sqlôe3_cﬁumn_ãxt
(
pCur
->
pTabÀLi°
, 0)

225 if–!
zSql
 ){

226 
rc
 = 
SQLITE_NOMEM
;

227 
√xt_exô
;

229 
rc
 = 
	`sqlôe3_¥ï¨e
(
pVèb
->
db
, 
zSql
, -1, &
pCur
->
pCﬁumnLi°
, 0);

230 
	`sqlôe3_‰ì
(
zSql
);

231 if–
rc
!=
SQLITE_OK
 ) 
√xt_exô
;

233 
pCur
->
rowid
++;

235 
√xt_exô
:

237  
rc
;

238 
	}
}

243 
	$schemaFûãr
(

244 
sqlôe3_vèb_curs‹
 *
pVèbCurs‹
,

245 
idxNum
, c⁄° *
idxSå
,

246 
¨gc
, 
sqlôe3_vÆue
 **
¨gv


248 
rc
;

249 
schema_vèb
 *
pVèb
 = (schema_vèb *)(
pVèbCurs‹
->pVtab);

250 
schema_curs‹
 *
pCur
 = (schema_curs‹ *)
pVèbCurs‹
;

251 
pCur
->
rowid
 = 0;

252 
	`föÆize
(&
pCur
->
pTabÀLi°
);

253 
	`föÆize
(&
pCur
->
pCﬁumnLi°
);

254 
	`föÆize
(&
pCur
->
pDbLi°
);

255 
rc
 = 
	`sqlôe3_¥ï¨e
(
pVèb
->
db
,"PRAGMA d©aba£_li°", -1, &
pCur
->
pDbLi°
, 0);

256  (
rc
==
SQLITE_OK
 ? 
	`schemaNext
(
pVèbCurs‹
) :Ñc);

257 
	}
}

262 
	$schemaBe°Index
(
sqlôe3_vèb
 *
èb
, 
sqlôe3_ödex_öfo
 *
pIdxInfo
){

263  
SQLITE_OK
;

264 
	}
}

270 
sqlôe3_moduÀ
 
	gschemaModuÀ
 = {

272 
schemaCª©e
,

273 
schemaCª©e
,

274 
schemaBe°Index
,

275 
schemaDe°roy
,

276 
schemaDe°roy
,

277 
schemaO≥n
,

278 
schemaClo£
,

279 
schemaFûãr
,

280 
schemaNext
,

281 
schemaEof
,

282 
schemaCﬁumn
,

283 
schemaRowid
,

295 #ifde‡
SQLITE_TEST


300 
gëDbPoöãr
(
T˛_I¡îp
 *
öãΩ
, c⁄° *
zA
, 
sqlôe3
 **
µDb
);

305 
	$ªgi°î_schema_moduÀ
(

306 
Clõ¡D©a
 
˛õ¡D©a
,

307 
T˛_I¡îp
 *
öãΩ
,

308 
objc
,

309 
T˛_Obj
 *
CONST
 
objv
[]

311 
sqlôe3
 *
db
;

312 if–
objc
!=2 ){

313 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB");

314  
TCL_ERROR
;

316 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

317 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


318 
	`sqlôe3_¸óã_moduÀ
(
db
, "schema", &
schemaModuÀ
, 0);

320  
TCL_OK
;

321 
	}
}

326 
	$Sqlôëe°schema_Inô
(
T˛_I¡îp
 *
öãΩ
){

328 *
zName
;

329 
T˛_ObjCmdProc
 *
xProc
;

330 *
˛õ¡D©a
;

331 } 
aObjCmd
[] = {

332 { "ªgi°î_schema_moduÀ", 
ªgi°î_schema_moduÀ
, 0 },

334 
i
;

335 
i
=0; i<(
aObjCmd
)/(aObjCmd[0]); i++){

336 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
aObjCmd
[
i
].
zName
,

337 
aObjCmd
[
i
].
xProc
,áObjCmd[i].
˛õ¡D©a
, 0);

339  
TCL_OK
;

340 
	}
}

347 #ifde‡
_WIN32


348 
	$__de˛•ec
(
dŒexp‹t
)

350 
	$sqlôe3_schema_öô
(

351 
sqlôe3
 *
db
,

352 **
pzEºMsg
,

353 c⁄° 
sqlôe3_≠i_routöes
 *
pApi


355 
	`SQLITE_EXTENSION_INIT2
(
pApi
);

356 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


357 
	`sqlôe3_¸óã_moduÀ
(
db
, "schema", &
schemaModuÀ
, 0);

360 
	}
}

	@test_server.c

202 
	~"sqlôeI¡.h
"

208 #i‡
deföed
(
SQLITE_SERVER
Ë&& !deföed(
SQLITE_OMIT_SHARED_CACHE
)

209 #i‡
SQLITE_OS_UNIX
 && 
SQLITE_THREADSAFE


214 
	~<±hªad.h
>

215 
	~"sqlôe3.h
"

221 
SqlMesßge
 
	tSqlMesßge
;

222 
	sSqlMesßge
 {

223 
	m›
;

224 
sqlôe3
 *
	mpDb
;

225 
sqlôe3_°mt
 *
	mpStmt
;

226 
	mîrCode
;

227 c⁄° *
	mzIn
;

228 
	mnByã
;

229 c⁄° *
	mzOut
;

230 
SqlMesßge
 *
	mpNext
;

231 
SqlMesßge
 *
	mpPªv
;

232 
±hªad_muãx_t
 
	m˛õ¡Muãx
;

233 
±hªad_c⁄d_t
 
	m˛õ¡Wakeup
;

239 
	#MSG_O≥n
 1

	)

240 
	#MSG_Pª∑ª
 2

	)

241 
	#MSG_Sãp
 3

	)

242 
	#MSG_Re£t
 4

	)

243 
	#MSG_FöÆize
 5

	)

244 
	#MSG_Clo£
 6

	)

245 
	#MSG_D⁄e
 7

	)

252 
	sSîvîSèã
 {

253 
±hªad_muãx_t
 
	mqueueMuãx
;

254 
±hªad_muãx_t
 
	m£rvîMuãx
;

255 
±hªad_c⁄d_t
 
	m£rvîWakeup
;

256 vﬁ©ûê
	m£rvîHÆt
;

257 
SqlMesßge
 *
	mpQueueHód
;

258 
SqlMesßge
 *
	mpQueueTaû
;

259 } 
	gg
 = {

260 
PTHREAD_MUTEX_INITIALIZER
,

261 
PTHREAD_MUTEX_INITIALIZER
,

262 
PTHREAD_COND_INITIALIZER
,

272 
	$£ndToSîvî
(
SqlMesßge
 *
pMsg
){

275 
	`±hªad_muãx_öô
(&
pMsg
->
˛õ¡Muãx
, 0);

276 
	`±hªad_c⁄d_öô
(&
pMsg
->
˛õ¡Wakeup
, 0);

280 
	`±hªad_muãx_lock
(&
g
.
queueMuãx
);

281 
pMsg
->
pNext
 = 
g
.
pQueueHód
;

282 if–
g
.
pQueueHód
==0 ){

283 
g
.
pQueueTaû
 = 
pMsg
;

285 
g
.
pQueueHód
->
pPªv
 = 
pMsg
;

287 
pMsg
->
pPªv
 = 0;

288 
g
.
pQueueHód
 = 
pMsg
;

289 
	`±hªad_muãx_u∆ock
(&
g
.
queueMuãx
);

294 
	`±hªad_muãx_lock
(&
pMsg
->
˛õ¡Muãx
);

295 
	`±hªad_c⁄d_sig«l
(&
g
.
£rvîWakeup
);

296  
pMsg
->
›
!=
MSG_D⁄e
 ){

297 
	`±hªad_c⁄d_waô
(&
pMsg
->
˛õ¡Wakeup
, &pMsg->
˛õ¡Muãx
);

299 
	`±hªad_muãx_u∆ock
(&
pMsg
->
˛õ¡Muãx
);

303 
	`±hªad_muãx_de°roy
(&
pMsg
->
˛õ¡Muãx
);

304 
	`±hªad_c⁄d_de°roy
(&
pMsg
->
˛õ¡Wakeup
);

305 
	}
}

332 
	$sqlôe3_˛õ¡_›í
(c⁄° *
zD©aba£Name
, 
sqlôe3
 **
µDb
){

333 
SqlMesßge
 
msg
;

334 
msg
.
›
 = 
MSG_O≥n
;

335 
msg
.
zIn
 = 
zD©aba£Name
;

336 
	`£ndToSîvî
(&
msg
);

337 *
µDb
 = 
msg
.
pDb
;

338  
msg
.
îrCode
;

339 
	}
}

340 
	$sqlôe3_˛õ¡_¥ï¨e
(

341 
sqlôe3
 *
pDb
,

342 c⁄° *
zSql
,

343 
nByã
,

344 
sqlôe3_°mt
 **
µStmt
,

345 c⁄° **
pzTaû


347 
SqlMesßge
 
msg
;

348 
msg
.
›
 = 
MSG_Pª∑ª
;

349 
msg
.
pDb
 =ÖDb;

350 
msg
.
zIn
 = 
zSql
;

351 
msg
.
nByã
 =ÇByte;

352 
	`£ndToSîvî
(&
msg
);

353 *
µStmt
 = 
msg
.
pStmt
;

354 if–
pzTaû
 ) *pzTaû = 
msg
.
zOut
;

355  
msg
.
îrCode
;

356 
	}
}

357 
	$sqlôe3_˛õ¡_°ï
(
sqlôe3_°mt
 *
pStmt
){

358 
SqlMesßge
 
msg
;

359 
msg
.
›
 = 
MSG_Sãp
;

360 
msg
.
pStmt
 =ÖStmt;

361 
	`£ndToSîvî
(&
msg
);

362  
msg
.
îrCode
;

363 
	}
}

364 
	$sqlôe3_˛õ¡_ª£t
(
sqlôe3_°mt
 *
pStmt
){

365 
SqlMesßge
 
msg
;

366 
msg
.
›
 = 
MSG_Re£t
;

367 
msg
.
pStmt
 =ÖStmt;

368 
	`£ndToSîvî
(&
msg
);

369  
msg
.
îrCode
;

370 
	}
}

371 
	$sqlôe3_˛õ¡_föÆize
(
sqlôe3_°mt
 *
pStmt
){

372 
SqlMesßge
 
msg
;

373 
msg
.
›
 = 
MSG_FöÆize
;

374 
msg
.
pStmt
 =ÖStmt;

375 
	`£ndToSîvî
(&
msg
);

376  
msg
.
îrCode
;

377 
	}
}

378 
	$sqlôe3_˛õ¡_˛o£
(
sqlôe3
 *
pDb
){

379 
SqlMesßge
 
msg
;

380 
msg
.
›
 = 
MSG_Clo£
;

381 
msg
.
pDb
 =ÖDb;

382 
	`£ndToSîvî
(&
msg
);

383  
msg
.
îrCode
;

384 
	}
}

393 *
	$sqlôe3_£rvî
(*
NŸU£d
){

394 if–
	`±hªad_muãx_åylock
(&
g
.
£rvîMuãx
) ){

397 
	`sqlôe3_íabÀ_sh¨ed_ˇche
(1);

398  !
g
.
£rvîHÆt
 ){

399 
SqlMesßge
 *
pMsg
;

403 
	`±hªad_muãx_lock
(&
g
.
queueMuãx
);

404  
g
.
pQueueTaû
==0 && g.
£rvîHÆt
==0 ){

405 
	`±hªad_c⁄d_waô
(&
g
.
£rvîWakeup
, &g.
queueMuãx
);

407 
pMsg
 = 
g
.
pQueueTaû
;

408 if–
pMsg
 ){

409 if–
pMsg
->
pPªv
 ){

410 
pMsg
->
pPªv
->
pNext
 = 0;

412 
g
.
pQueueHód
 = 0;

414 
g
.
pQueueTaû
 = 
pMsg
->
pPªv
;

416 
	`±hªad_muãx_u∆ock
(&
g
.
queueMuãx
);

417 if–
pMsg
==0 ) ;

421 
	`±hªad_muãx_lock
(&
pMsg
->
˛õ¡Muãx
);

422  
pMsg
->
›
 ){

423 
MSG_O≥n
: {

424 
pMsg
->
îrCode
 = 
	`sqlôe3_›í
’Msg->
zIn
, &pMsg->
pDb
);

427 
MSG_Pª∑ª
: {

428 
pMsg
->
îrCode
 = 
	`sqlôe3_¥ï¨e
’Msg->
pDb
,ÖMsg->
zIn
,ÖMsg->
nByã
,

429 &
pMsg
->
pStmt
, &pMsg->
zOut
);

432 
MSG_Sãp
: {

433 
pMsg
->
îrCode
 = 
	`sqlôe3_°ï
’Msg->
pStmt
);

436 
MSG_Re£t
: {

437 
pMsg
->
îrCode
 = 
	`sqlôe3_ª£t
’Msg->
pStmt
);

440 
MSG_FöÆize
: {

441 
pMsg
->
îrCode
 = 
	`sqlôe3_föÆize
’Msg->
pStmt
);

444 
MSG_Clo£
: {

445 
pMsg
->
îrCode
 = 
	`sqlôe3_˛o£
’Msg->
pDb
);

452 
pMsg
->
›
 = 
MSG_D⁄e
;

453 
	`±hªad_muãx_u∆ock
(&
pMsg
->
˛õ¡Muãx
);

454 
	`±hªad_c⁄d_sig«l
(&
pMsg
->
˛õ¡Wakeup
);

456 
	`±hªad_muãx_u∆ock
(&
g
.
£rvîMuãx
);

458 
	}
}

465 
	$sqlôe3_£rvî_°¨t
(){

466 
±hªad_t
 
x
;

467 
rc
;

468 
g
.
£rvîHÆt
 = 0;

469 
rc
 = 
	`±hªad_¸óã
(&
x
, 0, 
sqlôe3_£rvî
, 0);

470 if–
rc
==0 ){

471 
	`±hªad_dëach
(
x
);

473 
	}
}

480 *
	$£rvîWøµî
(*
≤De¸
){

481 *
p
 = 
	`sqlôe3_£rvî
(0);

482 (*(*)
≤De¸
)--;

483  
p
;

484 
	}
}

491 
	$sqlôe3_£rvî_°¨t2
(*
≤De¸
){

492 
±hªad_t
 
x
;

493 
rc
;

494 
g
.
£rvîHÆt
 = 0;

495 
rc
 = 
	`±hªad_¸óã
(&
x
, 0, 
£rvîWøµî
, (*)
≤De¸
);

496 if–
rc
==0 ){

497 
	`±hªad_dëach
(
x
);

499 
	}
}

508 
	$sqlôe3_£rvî_°›
(){

509 
g
.
£rvîHÆt
 = 1;

510 
	`±hªad_c⁄d_brﬂdˇ°
(&
g
.
£rvîWakeup
);

511 
	`±hªad_muãx_lock
(&
g
.
£rvîMuãx
);

512 
	`±hªad_muãx_u∆ock
(&
g
.
£rvîMuãx
);

513 
	}
}

	@test_sqllog.c

76 #i‚de‡
_SQLITE3_H_


77 
	~"sqlôe3.h
"

79 
	~<°dio.h
>

80 
	~<°dlib.h
>

81 
	~<°rög.h
>

82 
	~<as£π.h
>

84 
	~<sys/ty≥s.h
>

85 
	~<uni°d.h
>

86 
	$gëPro˚ssId
(){

87 #i‡
SQLITE_OS_WIN


88  ()
	`_gëpid
();

90  ()
	`gëpid
();

92 
	}
}

95 
	#ENVIRONMENT_VARIABLE1_NAME
 "SQLITE_SQLLOG_DIR"

	)

96 
	#ENVIRONMENT_VARIABLE2_NAME
 "SQLITE_SQLLOG_REUSE_FILES"

	)

97 
	#ENVIRONMENT_VARIABLE3_NAME
 "SQLITE_SQLLOG_CONDITIONAL"

	)

100 
	#SQLLOG_NAMESZ
 512

	)

106 
	#MAX_CONNECTIONS
 256

	)

111 
	sSLC⁄n
 {

112 
	misEº
;

113 
sqlôe3
 *
	mdb
;

114 
	miLog
;

115 
FILE
 *
	mfd
;

120 
	sSLGlobÆ
 {

122 
sqlôe3_muãx
 *
	mmuãx
;

123 
	mnC⁄n
;

126 
	mbC⁄dôi⁄Æ
;

127 
	mbReu£
;

128 
	mzPªfix
[
SQLLOG_NAMESZ
];

129 
	mzIdx
[
SQLLOG_NAMESZ
];

130 
	miNextLog
;

131 
	miNextDb
;

132 
	mbRec
;

133 
	miClock
;

134 
SLC⁄n
 
	maC⁄n
[
MAX_CONNECTIONS
];

135 } 
	gsqŒogglobÆ
;

140 
	$sqŒog_is•a˚
(
c
){

141  (
c
==' ' || c=='\t' || c=='\n' || c=='\v' || c=='\f' || c=='\r');

142 
	}
}

151 
	$sqŒogTokíize
(c⁄° *
z
, c⁄° **
pz
, *
≤
){

152 c⁄° *
p
 = 
z
;

153 
n
;

156  
	`sqŒog_is•a˚
(*
p
) ){

157 
p
++;

161 *
pz
 = 
p
;

162 
n
 = 0;

163  (
p
[
n
]>='a' &&Ö[n]<='z') || (p[n]>='A' &&Ö[n]<='Z') )Ç++;

164 *
≤
 = 
n
;

165 
	}
}

175 *
	$sqŒogFödFûe
(c⁄° *
zFûe
){

176 *
zRë
 = 0;

177 
FILE
 *
fd
 = 0;

180 
fd
 = 
	`f›í
(
sqŒogglobÆ
.
zIdx
, "r");

181 if–
fd
==0 ){

182 
	`sqlôe3_log
(
SQLITE_IOERR
, "sqllogFindFile():Érror in fopen()");

189  
	`„of
(
fd
)==0 ){

190 
zLöe
[
SQLLOG_NAMESZ
*2+5];

191 if–
	`fgës
(
zLöe
, (zLöe), 
fd
) ){

192 
n
;

193 *
z
;

195 
zLöe
[(zLine)-1] = '\0';

196 
z
 = 
zLöe
;

197  *
z
>='0' && *z<='9' ) z++;

198  *
z
==' ' ) z++;

200 
n
 = 
	`°æí
(
z
);

201  
n
>0 && 
	`sqŒog_is•a˚
(
z
[n-1]) )Ç--;

203 if–
n
==
	`°æí
(
zFûe
Ë&& 0==
	`memcmp
(zFûe, 
z
,Ç) ){

204 
zBuf
[16];

205 
	`mem£t
(
zBuf
, 0, (zBuf));

206 
z
 = 
zLöe
;

207  *
z
>='0' && *z<='9' ){

208 
zBuf
[
z
-
zLöe
] = *z;

209 
z
++;

211 
zRë
 = 
	`sqlôe3_m¥ötf
("%s_%s.db", 
sqŒogglobÆ
.
zPªfix
, 
zBuf
);

217 if–
	`„º‹
(
fd
) ){

218 
	`sqlôe3_log
(
SQLITE_IOERR
, "sqllogFindFile():ÉrrorÑeading index file");

221 
	`f˛o£
(
fd
);

222  
zRë
;

223 
	}
}

225 
	$sqŒogFödAâached
(

226 
sqlôe3
 *
db
,

227 c⁄° *
zSórch
,

228 *
zName
,

229 *
zFûe


231 
sqlôe3_°mt
 *
pStmt
;

232 
rc
;

237 
	`as£π
–
sqŒogglobÆ
.
bRec
==0 );

238 
sqŒogglobÆ
.
bRec
 = 1;

239 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
db
, "PRAGMA d©aba£_li°", -1, &
pStmt
, 0);

240 if–
rc
==
SQLITE_OK
 ){

241  
SQLITE_ROW
==
	`sqlôe3_°ï
(
pStmt
) ){

242 c⁄° *
zVÆ1
; 
nVÆ1
;

243 c⁄° *
zVÆ2
; 
nVÆ2
;

245 
zVÆ1
 = (c⁄° *)
	`sqlôe3_cﬁumn_ãxt
(
pStmt
, 1);

246 
nVÆ1
 = 
	`sqlôe3_cﬁumn_byãs
(
pStmt
, 1);

247 if–
zName
 ){

248 
	`mem˝y
(
zName
, 
zVÆ1
, 
nVÆ1
+1);

251 
zVÆ2
 = (c⁄° *)
	`sqlôe3_cﬁumn_ãxt
(
pStmt
, 2);

252 
nVÆ2
 = 
	`sqlôe3_cﬁumn_byãs
(
pStmt
, 2);

253 
	`mem˝y
(
zFûe
, 
zVÆ2
, 
nVÆ2
+1);

255 if–
zSórch
 && 
	`°æí
(zSórch)==
nVÆ1


256 && 0==
	`sqlôe3_°∫icmp
(
zSórch
, 
zVÆ1
, 
nVÆ1
)

261 
rc
 = 
	`sqlôe3_föÆize
(
pStmt
);

263 
sqŒogglobÆ
.
bRec
 = 0;

265 if–
rc
!=
SQLITE_OK
 ){

266 
	`sqlôe3_log
(
rc
, "sqllogFindAttached():Érror in \"PRAGMA database_list\"");

268  
rc
;

269 
	}
}

291 
	$sqŒogC›ydb
(
SLC⁄n
 *
p
, c⁄° *
zSórch
, 
bLog
){

292 
zName
[
SQLLOG_NAMESZ
];

293 
zFûe
[
SQLLOG_NAMESZ
];

294 *
zFªe
;

295 *
zInô
 = 0;

296 
rc
;

298 
rc
 = 
	`sqŒogFödAâached
(
p
->
db
, 
zSórch
, 
zName
, 
zFûe
);

299 if–
rc
!=
SQLITE_OK
 ) ;

301 if–
zFûe
[0]=='\0' ){

302 
zInô
 = 
	`sqlôe3_m¥ötf
("");

304 if–
sqŒogglobÆ
.
bReu£
 ){

305 
zInô
 = 
	`sqŒogFödFûe
(
zFûe
);

307 
zInô
 = 0;

309 if–
zInô
==0 ){

310 
rc
;

311 
sqlôe3
 *
c›y
 = 0;

312 
iDb
;

315 
iDb
 = 
sqŒogglobÆ
.
iNextDb
++;

316 
zInô
 = 
	`sqlôe3_m¥ötf
("%s_%d.db", 
sqŒogglobÆ
.
zPªfix
, 
iDb
);

319 
	`as£π
–
sqŒogglobÆ
.
bRec
==0 );

320 
sqŒogglobÆ
.
bRec
 = 1;

321 
rc
 = 
	`sqlôe3_›í
(
zInô
, &
c›y
);

322 if–
rc
==
SQLITE_OK
 ){

323 
sqlôe3_backup
 *
pBak
;

324 
	`sqlôe3_exec
(
c›y
, "PRAGMA synchronous = 0", 0, 0, 0);

325 
pBak
 = 
	`sqlôe3_backup_öô
(
c›y
, "maö", 
p
->
db
, 
zName
);

326 if–
pBak
 ){

327 
	`sqlôe3_backup_°ï
(
pBak
, -1);

328 
rc
 = 
	`sqlôe3_backup_föish
(
pBak
);

330 
rc
 = 
	`sqlôe3_îrcode
(
c›y
);

332 
	`sqlôe3_˛o£
(
c›y
);

334 
sqŒogglobÆ
.
bRec
 = 0;

336 if–
rc
==
SQLITE_OK
 ){

338 
FILE
 *
fd
 = 
	`f›í
(
sqŒogglobÆ
.
zIdx
, "a");

339 if–
fd
 ){

340 
	`Ârötf
(
fd
, "%d %s\n", 
iDb
, 
zFûe
);

341 
	`f˛o£
(
fd
);

344 
	`sqlôe3_log
(
rc
, "sqllogCopydb():Érror backing up database");

349 if–
bLog
 ){

350 
zFªe
 = 
	`sqlôe3_m¥ötf
("ATTACH '%q' AS '%q'; -- clock=%d\n",

351 
zInô
, 
zName
, 
sqŒogglobÆ
.
iClock
++

354 
zFªe
 = 
	`sqlôe3_m¥ötf
("-- Maö d©aba£ i†'%q'\n", 
zInô
);

356 
	`Ârötf
(
p
->
fd
, "%s", 
zFªe
);

357 
	`sqlôe3_‰ì
(
zFªe
);

359 
	`sqlôe3_‰ì
(
zInô
);

360 
	}
}

367 
	$sqŒogO≥∆og
(
SLC⁄n
 *
p
){

369 if–
p
->
fd
==0 ){

370 *
zLog
;

374 if–
sqŒogglobÆ
.
zPªfix
[0]==0 ){

375 
FILE
 *
fd
;

376 *
zV¨
 = 
	`gëív
(
ENVIRONMENT_VARIABLE1_NAME
);

377 if–
zV¨
==0 || 
	`°æí
(zV¨)+10>=((
sqŒogglobÆ
.
zPªfix
)) ) ;

378 
	`sqlôe3_¢¥ötf
((
sqŒogglobÆ
.
zPªfix
), sqllogglobal.zPrefix,

379 "%s/sqŒog_%d", 
zV¨
, 
	`gëPro˚ssId
());

380 
	`sqlôe3_¢¥ötf
((
sqŒogglobÆ
.
zIdx
), sqllogglobal.zIdx,

381 "%s.idx", 
sqŒogglobÆ
.
zPªfix
);

382 if–
	`gëív
(
ENVIRONMENT_VARIABLE2_NAME
) ){

383 
sqŒogglobÆ
.
bReu£
 = 
	`©oi
(
	`gëív
(
ENVIRONMENT_VARIABLE2_NAME
));

385 
fd
 = 
	`f›í
(
sqŒogglobÆ
.
zIdx
, "w");

386 if–
fd
 ) 
	`f˛o£
(fd);

390 
zLog
 = 
	`sqlôe3_m¥ötf
("%s_%d.sql", 
sqŒogglobÆ
.
zPªfix
, 
p
->
iLog
);

391 
p
->
fd
 = 
	`f›í
(
zLog
, "w");

392 
	`sqlôe3_‰ì
(
zLog
);

393 if–
p
->
fd
==0 ){

394 
	`sqlôe3_log
(
SQLITE_IOERR
, "sqllogOpenlog(): FailedÅo openÜog file");

397 
	}
}

404 
	$ã°SqŒogStmt
(
SLC⁄n
 *
p
, c⁄° *
zSql
){

405 c⁄° *
zFú°
;

406 
nFú°
;

408 
	`sqŒogTokíize
(
zSql
, &
zFú°
, &
nFú°
);

409 if–
nFú°
!=6 || 0!=
	`sqlôe3_°∫icmp
("ATTACH", 
zFú°
, 6) ){

411 
	`Ârötf
(
p
->
fd
, "%s; -- clock=%d\n", 
zSql
, 
sqŒogglobÆ
.
iClock
++);

414 
	`sqŒogC›ydb
(
p
, 0, 1);

416 
	}
}

426 
	$sqŒogTø˚Db
(
sqlôe3
 *
db
){

427 
bRë
 = 1;

428 if–
sqŒogglobÆ
.
bC⁄dôi⁄Æ
 ){

429 
zFûe
[
SQLLOG_NAMESZ
];

430 
rc
 = 
	`sqŒogFödAâached
(
db
, "maö", 0, 
zFûe
);

431 if–
rc
==
SQLITE_OK
 ){

432 
nFûe
 = 
	`°æí
(
zFûe
);

433 if–(
SQLLOG_NAMESZ
-
nFûe
)<8 ){

434 
	`sqlôe3_log
(
SQLITE_IOERR
,

435 "sqŒogTø˚Db(): d©aba£Çamêtoÿl⁄g (%d byãs)", 
nFûe


437 
bRë
 = 0;

439 
	`mem˝y
(&
zFûe
[
nFûe
], "-sqllog", 8);

440 
bRë
 = !
	`ac˚ss
(
zFûe
, 
F_OK
);

444  
bRë
;

445 
	}
}

468 
	$ã°SqŒog
(*
pCtx
, 
sqlôe3
 *
db
, c⁄° *
zSql
, 
eTy≥
){

469 
SLC⁄n
 *
p
 = 0;

470 
sqlôe3_muãx
 *
ma°î
 = 
	`sqlôe3_muãx_Æloc
(
SQLITE_MUTEX_STATIC_MASTER
);

472 
	`as£π
–
eTy≥
==0 ||ÉType==1 ||ÉType==2 );

473 
	`as£π
–(
eTy≥
==2)==(
zSql
==0) );

476 if–
eTy≥
==0 ){

477 
	`sqlôe3_muãx_íãr
(
ma°î
);

478 if–
sqŒogglobÆ
.
muãx
==0 ){

479 
sqŒogglobÆ
.
muãx
 = 
	`sqlôe3_muãx_Æloc
(
SQLITE_MUTEX_RECURSIVE
);

481 
	`sqlôe3_muãx_Àave
(
ma°î
);

483 
	`sqlôe3_muãx_íãr
(
sqŒogglobÆ
.
muãx
);

484 if–
sqŒogglobÆ
.
bRec
==0 && 
	`sqŒogTø˚Db
(
db
) ){

486 
	`sqlôe3_muãx_íãr
(
ma°î
);

487 
p
 = &
sqŒogglobÆ
.
aC⁄n
[sqŒogglobÆ.
nC⁄n
++];

488 
p
->
fd
 = 0;

489 
p
->
db
 = db;

490 
p
->
iLog
 = 
sqŒogglobÆ
.
iNextLog
++;

491 
	`sqlôe3_muãx_Àave
(
ma°î
);

494 
	`sqŒogO≥∆og
(
p
);

495 if–
p
->
fd
 ) 
	`sqŒogC›ydb
(p, "main", 0);

497 
	`sqlôe3_muãx_Àave
(
sqŒogglobÆ
.
muãx
);

502 
i
;

503 
i
=0; i<
sqŒogglobÆ
.
nC⁄n
; i++){

504 
p
 = &
sqŒogglobÆ
.
aC⁄n
[
i
];

505 if–
p
->
db
==db ) ;

509 if–
eTy≥
==2 ){

510 
	`sqlôe3_muãx_íãr
(
ma°î
);

511 if–
i
<
sqŒogglobÆ
.
nC⁄n
 ){

512 if–
p
->
fd
 ) 
	`f˛o£
(p->fd);

513 
p
->
db
 = 0;

514 
p
->
fd
 = 0;

515 
sqŒogglobÆ
.
nC⁄n
--;

518 if–
sqŒogglobÆ
.
nC⁄n
==0 ){

519 
	`sqlôe3_muãx_‰ì
(
sqŒogglobÆ
.
muãx
);

520 
sqŒogglobÆ
.
muãx
 = 0;

521 }if–
i
<
sqŒogglobÆ
.
nC⁄n
 ){

522 
nShi·
 = &
sqŒogglobÆ
.
aC⁄n
[sqŒogglobÆ.
nC⁄n
] - 
p
;

523 if–
nShi·
>0 ){

524 
	`memmove
(
p
, &p[1], 
nShi·
*(
SLC⁄n
));

527 
	`sqlôe3_muãx_Àave
(
ma°î
);

530 }if–
i
<
sqŒogglobÆ
.
nC⁄n
 && 
p
->
fd
 ){

531 
	`sqlôe3_muãx_íãr
(
sqŒogglobÆ
.
muãx
);

532 if–
sqŒogglobÆ
.
bRec
==0 ){

533 
	`ã°SqŒogStmt
(
p
, 
zSql
);

535 
	`sqlôe3_muãx_Àave
(
sqŒogglobÆ
.
muãx
);

538 
	}
}

546 
	$sqlôe3_öô_sqŒog
(){

547 if–
	`gëív
(
ENVIRONMENT_VARIABLE1_NAME
) ){

548 if–
SQLITE_OK
==
	`sqlôe3_c⁄fig
(
SQLITE_CONFIG_SQLLOG
, 
ã°SqŒog
, 0) ){

549 
	`mem£t
(&
sqŒogglobÆ
, 0, (sqllogglobal));

550 
sqŒogglobÆ
.
bReu£
 = 1;

551 if–
	`gëív
(
ENVIRONMENT_VARIABLE3_NAME
) ){

552 
sqŒogglobÆ
.
bC⁄dôi⁄Æ
 = 1;

556 
	}
}

	@test_superlock.c

21 
	~"sqlôe3.h
"

22 
	~<°rög.h
>

23 
	~<as£π.h
>

29 
	sSu≥æockBusy
 {

30 (*
	mxBusy
)(*,);

31 *
	mpBusyArg
;

32 
	mnBusy
;

34 
Su≥æockBusy
 
	tSu≥æockBusy
;

41 
	sSu≥æock
 {

42 
sqlôe3
 *
	mdb
;

43 
	mbWÆ
;

45 
Su≥æock
 
	tSu≥æock
;

52 
	$su≥æockBusyH™dÀr
(*
pCtx
, 
UNUSED
){

53 
Su≥æockBusy
 *
pBusy
 = (Su≥æockBusy *)
pCtx
;

54 if–
pBusy
->
xBusy
==0 )  0;

55  
pBusy
->
	`xBusy
’Busy->
pBusyArg
,ÖBusy->
nBusy
++);

56 
	}
}

67 
	$su≥æockIsWÆ
(
Su≥æock
 *
pLock
){

68 
rc
;

69 
sqlôe3_°mt
 *
pStmt
;

71 
rc
 = 
	`sqlôe3_¥ï¨e
(
pLock
->
db
, "PRAGMA maö.jou∫Æ_mode", -1, &
pStmt
, 0);

72 if–
rc
!=
SQLITE_OK
 ) Ñc;

74 
pLock
->
bWÆ
 = 0;

75 if–
SQLITE_ROW
==
	`sqlôe3_°ï
(
pStmt
) ){

76 c⁄° *
zMode
 = (c⁄° *)
	`sqlôe3_cﬁumn_ãxt
(
pStmt
, 0);

77 if–
zMode
 && 
	`°æí
(zMode)==3 && 
	`sqlôe3_°∫icmp
("wal", zMode, 3)==0 ){

78 
pLock
->
bWÆ
 = 1;

82  
	`sqlôe3_föÆize
(
pStmt
);

83 
	}
}

91 
	$su≥æockShmLock
(

92 
sqlôe3_fûe
 *
fd
,

93 
idx
,

94 
nByã
,

95 
Su≥æockBusy
 *
pBusy


97 
rc
;

98 (*
xShmLock
)(
sqlôe3_fûe
*, , , Ë
fd
->
pMëhods
->xShmLock;

100 
rc
 = 
	`xShmLock
(
fd
, 
idx
, 
nByã
, 
SQLITE_SHM_LOCK
|
SQLITE_SHM_EXCLUSIVE
);

101 } 
rc
==
SQLITE_BUSY
 && 
	`su≥æockBusyH™dÀr
((*)
pBusy
, 0) );

102  
rc
;

103 
	}
}

109 
	$su≥æockWÆLock
(

110 
sqlôe3
 *
db
,

111 
Su≥æockBusy
 *
pBusy


113 
rc
;

114 
sqlôe3_fûe
 *
fd
 = 0;

115 vﬁ©ûê*
p
 = 0;

118 
rc
 = 
	`sqlôe3_fûe_c⁄åﬁ
(
db
, "maö", 
SQLITE_FCNTL_FILE_POINTER
, (*)&
fd
);

119 if–
rc
!=
SQLITE_OK
 ) Ñc;

124 
rc
 = 
	`su≥æockShmLock
(
fd
, 2, 1, 
pBusy
);

125 if–
rc
!=
SQLITE_OK
 ) Ñc;

134 
rc
 = 
fd
->
pMëhods
->
	`xShmM≠
(fd, 0, 32*1024, 1, &
p
);

135 if–
rc
!=
SQLITE_OK
 ) Ñc;

136 
	`mem£t
((*)
p
, 0, 32);

142 
rc
 = 
	`su≥æockShmLock
(
fd
, 3, 
SQLITE_SHM_NLOCK
-3, 
pBusy
);

143  
rc
;

144 
	}
}

151 
	$sqlôe3demo_su≥ru∆ock
(*
pLock
){

152 
Su≥æock
 *
p
 = (Su≥æock *)
pLock
;

153 if–
p
->
bWÆ
 ){

154 
rc
;

155 
Êags
 = 
SQLITE_SHM_UNLOCK
 | 
SQLITE_SHM_EXCLUSIVE
;

156 
sqlôe3_fûe
 *
fd
 = 0;

157 
rc
 = 
	`sqlôe3_fûe_c⁄åﬁ
(
p
->
db
, "maö", 
SQLITE_FCNTL_FILE_POINTER
, (*)&
fd
);

158 if–
rc
==
SQLITE_OK
 ){

159 
fd
->
pMëhods
->
	`xShmLock
(fd, 2, 1, 
Êags
);

160 
fd
->
pMëhods
->
	`xShmLock
(fd, 3, 
SQLITE_SHM_NLOCK
-3, 
Êags
);

163 
	`sqlôe3_˛o£
(
p
->
db
);

164 
	`sqlôe3_‰ì
(
p
);

165 
	}
}

182 
sqlôe3demo_su≥æock
(

183 c⁄° *
zP©h
,

184 c⁄° *
zVfs
,

185 (*
xBusy
)(*,),

186 *
pBusyArg
,

187 **
µLock


189 
Su≥æockBusy
 
busy
 = {0, 0, 0};

190 
rc
;

191 
Su≥æock
 *
pLock
;

193 
pLock
 = 
	`sqlôe3_mÆloc
((
Su≥æock
));

194 if–!
pLock
 )  
SQLITE_NOMEM
;

195 
	`mem£t
(
pLock
, 0, (
Su≥æock
));

198 
rc
 = 
	`sqlôe3_›í_v2
(

199 
zP©h
, &
pLock
->
db
, 
SQLITE_OPEN_READWRITE
|
SQLITE_OPEN_CREATE
, 
zVfs


215 if–
rc
==
SQLITE_OK
 ){

216 
busy
.
xBusy
 = xBusy;

217 
busy
.
pBusyArg
 =ÖBusyArg;

218 
	`sqlôe3_busy_h™dÀr
(
pLock
->
db
, 
su≥æockBusyH™dÀr
, (*)&
busy
);

219 
rc
 = 
	`sqlôe3_exec
(
pLock
->
db
, "BEGIN EXCLUSIVE", 0, 0, 0);

231 if–
rc
==
SQLITE_OK
 ){

232 if–
SQLITE_OK
==(
rc
 = 
	`su≥æockIsWÆ
(
pLock
)Ë&&ÖLock->
bWÆ
 ){

233 
rc
 = 
	`sqlôe3_exec
(
pLock
->
db
, "COMMIT", 0, 0, 0);

234 if–
rc
==
SQLITE_OK
 ){

235 
rc
 = 
	`su≥æockWÆLock
(
pLock
->
db
, &
busy
);

240 if–
rc
!=
SQLITE_OK
 ){

241 
	`sqlôe3demo_su≥ru∆ock
(
pLock
);

242 *
µLock
 = 0;

244 *
µLock
 = 
pLock
;

247  
rc
;

248 
	}
}

257 #ifde‡
SQLITE_TEST


259 
	~<t˛.h
>

261 
	sI¡îpAndS¸ùt
 {

262 
T˛_I¡îp
 *
	möãΩ
;

263 
T˛_Obj
 *
	mpS¸ùt
;

265 
I¡îpAndS¸ùt
 
	tI¡îpAndS¸ùt
;

267 
	$su≥ru∆ock_dñ
(
Clõ¡D©a
 
cd
){

268 
	`sqlôe3demo_su≥ru∆ock
((*)
cd
);

269 
	}
}

271 
	$su≥ru∆ock_cmd
(

272 
Clõ¡D©a
 
cd
,

273 
T˛_I¡îp
 *
öãΩ
,

274 
objc
,

275 
T˛_Obj
 *
CONST
 
objv
[]

277 if–
objc
!=1 ){

278 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

279  
TCL_ERROR
;

281 
	`T˛_DñëeComm™d
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[0]));

282  
TCL_OK
;

283 
	}
}

285 
	$su≥æock_busy
(*
pCtx
, 
nBusy
){

286 
I¡îpAndS¸ùt
 *
p
 = (I¡îpAndS¸ùà*)
pCtx
;

287 
T˛_Obj
 *
pEvÆ
;

288 
iVÆ
 = 0;

290 
pEvÆ
 = 
	`T˛_Du∂iˇãObj
(
p
->
pS¸ùt
);

291 
	`T˛_In¸RefCou¡
(
pEvÆ
);

292 
	`T˛_Li°ObjAµídEÀmít
(
p
->
öãΩ
, 
pEvÆ
, 
	`T˛_NewI¡Obj
(
nBusy
));

293 
	`T˛_EvÆObjEx
(
p
->
öãΩ
, 
pEvÆ
, 
TCL_EVAL_GLOBAL
);

294 
	`T˛_GëI¡FromObj
(
p
->
öãΩ
, 
	`T˛_GëObjResu…
’->öãΩ), &
iVÆ
);

295 
	`T˛_De¸RefCou¡
(
pEvÆ
);

297  
iVÆ
;

298 
	}
}

303 
	$su≥æock_cmd
(

304 
Clõ¡D©a
 
cd
,

305 
T˛_I¡îp
 *
öãΩ
,

306 
objc
,

307 
T˛_Obj
 *
CONST
 
objv
[]

309 *
pLock
;

310 *
zP©h
;

311 *
zVfs
 = 0;

312 
I¡îpAndS¸ùt
 
busy
 = {0, 0};

313 (*
xBusy
)(*,) = 0;

314 
rc
;

316 if–
objc
<3 || objc>5 ){

317 
	`T˛_Wr⁄gNumArgs
(

318 
öãΩ
, 1, 
objv
, "CMDNAME PATH ?VFS? ?BUSY-HANDLER-SCRIPT?");

319  
TCL_ERROR
;

322 
zP©h
 = 
	`T˛_GëSåög
(
objv
[2]);

324 if–
objc
>3 ){

325 
zVfs
 = 
	`T˛_GëSåög
(
objv
[3]);

326 if–
	`°æí
(
zVfs
)==0 ) zVfs = 0;

328 if–
objc
>4 ){

329 
busy
.
öãΩ
 = interp;

330 
busy
.
pS¸ùt
 = 
objv
[4];

331 
xBusy
 = 
su≥æock_busy
;

334 
rc
 = 
	`sqlôe3demo_su≥æock
(
zP©h
, 
zVfs
, 
xBusy
, &
busy
, &
pLock
);

335 
	`as£π
–
rc
==
SQLITE_OK
 || 
pLock
==0 );

336 
	`as£π
–
rc
!=
SQLITE_OK
 || 
pLock
!=0 );

338 if–
rc
!=
SQLITE_OK
 ){

339 c⁄° *
	`sqlôe3EºSå
();

340 
	`T˛_Re£tResu…
(
öãΩ
);

341 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºSå
(
rc
), 0);

342  
TCL_ERROR
;

345 
	`T˛_Cª©eObjComm™d
(

346 
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), 
su≥ru∆ock_cmd
, 
pLock
, 
su≥ru∆ock_dñ


348 
	`T˛_SëObjResu…
(
öãΩ
, 
objv
[1]);

349  
TCL_OK
;

350 
	}
}

352 
	$SqlôeSu≥æock_Inô
(
T˛_I¡îp
 *
öãΩ
){

353 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlôe3demo_su≥æock", 
su≥æock_cmd
, 0, 0);

354  
TCL_OK
;

355 
	}
}

	@test_syscall.c

77 
	~"sqlôeI¡.h
"

78 
	~"sqlôe3.h
"

79 
	~"t˛.h
"

80 
	~<°dlib.h
>

81 
	~<°rög.h
>

82 
	~<as£π.h
>

84 #i‡
SQLITE_OS_UNIX


87 c⁄° *
sqlôe3EºName
();

89 
	~<sys/mm™.h
>

90 
	~<sys/ty≥s.h
>

91 
	~<î∫o.h
>

93 
	sTe°SysˇŒGlobÆ
 {

94 
	mbPîsi°
;

95 
	mnCou¡
;

96 
	mnFaû
;

97 
	mpgsz
;

98 
sqlôe3_sysˇŒ_±r
 
	m‹ig_gë∑gesize
;

99 } 
	ggSysˇŒ
 = { 0, 0, 0, 0, 0 };

101 
ts_›í
(const *, , );

102 
ts_˛o£
(
fd
);

103 
ts_ac˚ss
(c⁄° *
zP©h
, 
mode
);

104 *
ts_gëcwd
(*
zP©h
, 
size_t
 
nP©h
);

105 
ts_°©
(c⁄° *
zP©h
, 
°©
 *
p
);

106 
ts_f°©
(
fd
, 
°©
 *
p
);

107 
ts_·runˇã
(
fd
, 
off_t
 
n
);

108 
ts_f˙é
(
fd
, 
cmd
, ... );

109 
ts_ªad
(
fd
, *
aBuf
, 
size_t
 
nBuf
);

110 
ts_¥ód
(
fd
, *
aBuf
, 
size_t
 
nBuf
, 
off_t
 
off
);

114 
ts_¥ód64
(
fd
, *
aBuf
, 
size_t
 
nBuf
, 
sqlôe3_uöt64
 
off
);

115 
ts_wrôe
(
fd
, c⁄° *
aBuf
, 
size_t
 
nBuf
);

116 
ts_pwrôe
(
fd
, c⁄° *
aBuf
, 
size_t
 
nBuf
, 
off_t
 
off
);

117 
ts_pwrôe64
(
fd
, c⁄° *
aBuf
, 
size_t
 
nBuf
, 
sqlôe3_uöt64
 
off
);

118 
ts_fchmod
(
fd
, 
mode_t
 
mode
);

119 
ts_ÁŒoˇã
(
fd
, 
off_t
 
off
, off_à
Àn
);

120 *
ts_mm≠
(*, 
size_t
, , , , 
off_t
);

121 *
ts_mªm≠
(*, 
size_t
, size_t, , ...);

123 
	sTe°SysˇŒAºay
 {

124 c⁄° *
	mzName
;

125 
sqlôe3_sysˇŒ_±r
 
	mxTe°
;

126 
sqlôe3_sysˇŒ_±r
 
	mxOrig
;

127 
	mdeÁu…_î∫o
;

128 
	mcu°om_î∫o
;

129 } 
	gaSysˇŒ
[] = {

130  { "›í", (
sqlôe3_sysˇŒ_±r
)
ts_›í
, 0, 
EACCES
, 0 },

131  { "˛o£", (
sqlôe3_sysˇŒ_±r
)
ts_˛o£
, 0, 0, 0 },

132  { "ac˚ss", (
sqlôe3_sysˇŒ_±r
)
ts_ac˚ss
, 0, 0, 0 },

133  { "gëcwd", (
sqlôe3_sysˇŒ_±r
)
ts_gëcwd
, 0, 0, 0 },

134  { "°©", (
sqlôe3_sysˇŒ_±r
)
ts_°©
, 0, 0, 0 },

135  { "f°©", (
sqlôe3_sysˇŒ_±r
)
ts_f°©
, 0, 0, 0 },

136  { "·runˇã", (
sqlôe3_sysˇŒ_±r
)
ts_·runˇã
, 0, 
EIO
, 0 },

137  { "f˙é", (
sqlôe3_sysˇŒ_±r
)
ts_f˙é
, 0, 
EACCES
, 0 },

138  { "ªad", (
sqlôe3_sysˇŒ_±r
)
ts_ªad
, 0, 0, 0 },

139  { "¥ód", (
sqlôe3_sysˇŒ_±r
)
ts_¥ód
, 0, 0, 0 },

140  { "¥ód64", (
sqlôe3_sysˇŒ_±r
)
ts_¥ód64
, 0, 0, 0 },

141  { "wrôe", (
sqlôe3_sysˇŒ_±r
)
ts_wrôe
, 0, 0, 0 },

142  { "pwrôe", (
sqlôe3_sysˇŒ_±r
)
ts_pwrôe
, 0, 0, 0 },

143  { "pwrôe64", (
sqlôe3_sysˇŒ_±r
)
ts_pwrôe64
, 0, 0, 0 },

144  { "fchmod", (
sqlôe3_sysˇŒ_±r
)
ts_fchmod
, 0, 0, 0 },

145  { "ÁŒoˇã", (
sqlôe3_sysˇŒ_±r
)
ts_ÁŒoˇã
, 0, 0, 0 },

146  { "mm≠", (
sqlôe3_sysˇŒ_±r
)
ts_mm≠
, 0, 0, 0 },

147  { "mªm≠", (
sqlôe3_sysˇŒ_±r
)
ts_mªm≠
, 0, 0, 0 },

151 
	#‹ig_›í
 (((*)(c⁄° *, , ))
aSysˇŒ
[0].
xOrig
)

	)

152 
	#‹ig_˛o£
 (((*)())
aSysˇŒ
[1].
xOrig
)

	)

153 
	#‹ig_ac˚ss
 (((*)(c⁄° *,))
aSysˇŒ
[2].
xOrig
)

	)

154 
	#‹ig_gëcwd
 ((*(*)(*,
size_t
))
aSysˇŒ
[3].
xOrig
)

	)

155 
	#‹ig_°©
 (((*)(c⁄° *,
°©
*))
aSysˇŒ
[4].
xOrig
)

	)

156 
	#‹ig_f°©
 (((*)(,
°©
*))
aSysˇŒ
[5].
xOrig
)

	)

157 
	#‹ig_·runˇã
 (((*)(,
off_t
))
aSysˇŒ
[6].
xOrig
)

	)

158 
	#‹ig_f˙é
 (((*)(,,...))
aSysˇŒ
[7].
xOrig
)

	)

159 
	#‹ig_ªad
 ((
	`ssize_t
(*)(,*,
size_t
))
aSysˇŒ
[8].
xOrig
)

	)

160 
	#‹ig_¥ód
 ((
	`ssize_t
(*)(,*,
size_t
,
off_t
))
aSysˇŒ
[9].
xOrig
)

	)

161 
	#‹ig_¥ód64
 ((
	`ssize_t
(*)(,*,
size_t
,
sqlôe3_uöt64
))
aSysˇŒ
[10].
xOrig
)

	)

162 
	#‹ig_wrôe
 ((
	`ssize_t
(*)(,c⁄° *,
size_t
))
aSysˇŒ
[11].
xOrig
)

	)

163 
	#‹ig_pwrôe
 ((
	`ssize_t
(*)(,c⁄° *,
size_t
,
off_t
))\

164 
aSysˇŒ
[12].
xOrig
)

	)

165 
	#‹ig_pwrôe64
 ((
	`ssize_t
(*)(,c⁄° *,
size_t
,
sqlôe3_uöt64
))\

166 
aSysˇŒ
[13].
xOrig
)

	)

167 
	#‹ig_fchmod
 (((*)(,
mode_t
))
aSysˇŒ
[14].
xOrig
)

	)

168 
	#‹ig_ÁŒoˇã
 (((*)(,
off_t
,off_t))
aSysˇŒ
[15].
xOrig
)

	)

169 
	#‹ig_mm≠
 ((*(*)(*,
size_t
,,,,
off_t
))
aSysˇŒ
[16].
xOrig
)

	)

170 
	#‹ig_mªm≠
 ((*(*)(*,
size_t
,size_t,,...))
aSysˇŒ
[17].
xOrig
)

	)

177 
	$tsIsFaû
(){

178 
gSysˇŒ
.
nCou¡
--;

179 if–
gSysˇŒ
.
nCou¡
==0 || (gSysˇŒ.
nFaû
 && gSysˇŒ.
bPîsi°
) ){

180 
gSysˇŒ
.
nFaû
++;

184 
	}
}

194 
	$tsEºno
(c⁄° *
zFunc
){

195 
i
;

196 
nFunc
 = 
	`°æí
(
zFunc
);

197 
i
=0; 
aSysˇŒ
[i].
zName
; i++){

198 if–
	`°æí
(
aSysˇŒ
[
i
].
zName
)!=
nFunc
 ) ;

199 if–
	`memcmp
(
aSysˇŒ
[
i
].
zName
, 
zFunc
, 
nFunc
) ) ;

200  
aSysˇŒ
[
i
].
cu°om_î∫o
;

203 
	`as£π
(0);

205 
	}
}

211 
	$tsIsFaûEºno
(c⁄° *
zFunc
){

212 if–
	`tsIsFaû
() ){

213 
î∫o
 = 
	`tsEºno
(
zFunc
);

217 
	}
}

222 
	$ts_›í
(c⁄° *
zFûe
, 
Êags
, 
mode
){

223 if–
	`tsIsFaûEºno
("open") ){

226  
	`‹ig_›í
(
zFûe
, 
Êags
, 
mode
);

227 
	}
}

232 
	$ts_˛o£
(
fd
){

233 if–
	`tsIsFaû
() ){

239 
	`‹ig_˛o£
(
fd
);

242  
	`‹ig_˛o£
(
fd
);

243 
	}
}

248 
	$ts_ac˚ss
(c⁄° *
zP©h
, 
mode
){

249 if–
	`tsIsFaû
() ){

252  
	`‹ig_ac˚ss
(
zP©h
, 
mode
);

253 
	}
}

258 *
	$ts_gëcwd
(*
zP©h
, 
size_t
 
nP©h
){

259 if–
	`tsIsFaû
() ){

260  
NULL
;

262  
	`‹ig_gëcwd
(
zP©h
, 
nP©h
);

263 
	}
}

268 
	$ts_°©
(c⁄° *
zP©h
, 
°©
 *
p
){

269 if–
	`tsIsFaû
() ){

272  
	`‹ig_°©
(
zP©h
, 
p
);

273 
	}
}

278 
	$ts_f°©
(
fd
, 
°©
 *
p
){

279 if–
	`tsIsFaûEºno
("fstat") ){

282  
	`‹ig_f°©
(
fd
, 
p
);

283 
	}
}

288 
	$ts_·runˇã
(
fd
, 
off_t
 
n
){

289 if–
	`tsIsFaûEºno
("ftruncate") ){

292  
	`‹ig_·runˇã
(
fd
, 
n
);

293 
	}
}

298 
	$ts_f˙é
(
fd
, 
cmd
, ... ){

299 
va_li°
 
≠
;

300 *
pArg
;

301 if–
	`tsIsFaûEºno
("fcntl") ){

304 
	`va_°¨t
(
≠
, 
cmd
);

305 
pArg
 = 
	`va_¨g
(
≠
, *);

306  
	`‹ig_f˙é
(
fd
, 
cmd
, 
pArg
);

307 
	}
}

312 
	$ts_ªad
(
fd
, *
aBuf
, 
size_t
 
nBuf
){

313 if–
	`tsIsFaûEºno
("read") ){

316  
	`‹ig_ªad
(
fd
, 
aBuf
, 
nBuf
);

317 
	}
}

322 
	$ts_¥ód
(
fd
, *
aBuf
, 
size_t
 
nBuf
, 
off_t
 
off
){

323 if–
	`tsIsFaûEºno
("pread") ){

326  
	`‹ig_¥ód
(
fd
, 
aBuf
, 
nBuf
, 
off
);

327 
	}
}

332 
	$ts_¥ód64
(
fd
, *
aBuf
, 
size_t
 
nBuf
, 
sqlôe3_uöt64
 
off
){

333 if–
	`tsIsFaûEºno
("pread64") ){

336  
	`‹ig_¥ód64
(
fd
, 
aBuf
, 
nBuf
, 
off
);

337 
	}
}

342 
	$ts_wrôe
(
fd
, c⁄° *
aBuf
, 
size_t
 
nBuf
){

343 if–
	`tsIsFaûEºno
("write") ){

344 if–
	`tsEºno
("wrôe")==
EINTR
 ) 
	`‹ig_wrôe
(
fd
, 
aBuf
, 
nBuf
/2);

347  
	`‹ig_wrôe
(
fd
, 
aBuf
, 
nBuf
);

348 
	}
}

353 
	$ts_pwrôe
(
fd
, c⁄° *
aBuf
, 
size_t
 
nBuf
, 
off_t
 
off
){

354 if–
	`tsIsFaûEºno
("pwrite") ){

357  
	`‹ig_pwrôe
(
fd
, 
aBuf
, 
nBuf
, 
off
);

358 
	}
}

363 
	$ts_pwrôe64
(
fd
, c⁄° *
aBuf
, 
size_t
 
nBuf
, 
sqlôe3_uöt64
 
off
){

364 if–
	`tsIsFaûEºno
("pwrite64") ){

367  
	`‹ig_pwrôe64
(
fd
, 
aBuf
, 
nBuf
, 
off
);

368 
	}
}

373 
	$ts_fchmod
(
fd
, 
mode_t
 
mode
){

374 if–
	`tsIsFaû
() ){

377  
	`‹ig_fchmod
(
fd
, 
mode
);

378 
	}
}

389 
	$ts_ÁŒoˇã
(
fd
, 
off_t
 
off
, off_à
Àn
){

390 if–
	`tsIsFaû
() ){

391  
	`tsEºno
("fallocate");

393  
	`‹ig_ÁŒoˇã
(
fd
, 
off
, 
Àn
);

394 
	}
}

396 *
	$ts_mm≠
(

397 *
pAddr
,

398 
size_t
 
nByã
,

399 
¥Ÿ
,

400 
Êags
,

401 
fd
,

402 
off_t
 
iOff


404 if–
	`tsIsFaûEºno
("mmap") ){

405  
MAP_FAILED
;

407  
	`‹ig_mm≠
(
pAddr
, 
nByã
, 
¥Ÿ
, 
Êags
, 
fd
, 
iOff
);

408 
	}
}

410 *
	$ts_mªm≠
(*
a
, 
size_t
 
b
, size_à
c
, 
d
, ...){

411 
va_li°
 
≠
;

412 *
pArg
;

413 if–
	`tsIsFaûEºno
("mremap") ){

414  
MAP_FAILED
;

416 
	`va_°¨t
(
≠
, 
d
);

417 
pArg
 = 
	`va_¨g
(
≠
, *);

418  
	`‹ig_mªm≠
(
a
, 
b
, 
c
, 
d
, 
pArg
);

419 
	}
}

421 
	$ã°_sysˇŒ_ö°Æl
(

422 * 
˛õ¡D©a
,

423 
T˛_I¡îp
 *
öãΩ
,

424 
objc
,

425 
T˛_Obj
 *
CONST
 
objv
[]

427 
sqlôe3_vfs
 *
pVfs
;

428 
nEÀm
;

429 
i
;

430 
T˛_Obj
 **
≠EÀm
;

432 if–
objc
!=3 ){

433 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "SYSCALL-LIST");

434  
TCL_ERROR
;

436 if–
	`T˛_Li°ObjGëEÀmíts
(
öãΩ
, 
objv
[2], &
nEÀm
, &
≠EÀm
) ){

437  
TCL_ERROR
;

439 
pVfs
 = 
	`sqlôe3_vfs_föd
(0);

441 
i
=0; i<
nEÀm
; i++){

442 
iCÆl
;

443 
rc
 = 
	`T˛_GëIndexFromObjSåu˘
(
öãΩ
,

444 
≠EÀm
[
i
], 
aSysˇŒ
, ◊SysˇŒ[0]), "sy°em-ˇŒ", 0, &
iCÆl


446 if–
rc
 ) Ñc;

447 if–
aSysˇŒ
[
iCÆl
].
xOrig
==0 ){

448 
aSysˇŒ
[
iCÆl
].
xOrig
 = 
pVfs
->
	`xGëSy°emCÆl
’Vfs,áSysˇŒ[iCÆl].
zName
);

449 
pVfs
->
	`xSëSy°emCÆl
’Vfs, 
aSysˇŒ
[
iCÆl
].
zName
,áSysˇŒ[iCÆl].
xTe°
);

451 
aSysˇŒ
[
iCÆl
].
cu°om_î∫o
 =áSysˇŒ[iCÆl].
deÁu…_î∫o
;

454  
TCL_OK
;

455 
	}
}

457 
	$ã°_sysˇŒ_unö°Æl
(

458 * 
˛õ¡D©a
,

459 
T˛_I¡îp
 *
öãΩ
,

460 
objc
,

461 
T˛_Obj
 *
CONST
 
objv
[]

463 
sqlôe3_vfs
 *
pVfs
;

464 
i
;

466 if–
objc
!=2 ){

467 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "");

468  
TCL_ERROR
;

471 
pVfs
 = 
	`sqlôe3_vfs_föd
(0);

472 
i
=0; 
aSysˇŒ
[i].
zName
; i++){

473 if–
aSysˇŒ
[
i
].
xOrig
 ){

474 
pVfs
->
	`xSëSy°emCÆl
’Vfs, 
aSysˇŒ
[
i
].
zName
, 0);

475 
aSysˇŒ
[
i
].
xOrig
 = 0;

478  
TCL_OK
;

479 
	}
}

481 
	$ã°_sysˇŒ_ª£t
(

482 * 
˛õ¡D©a
,

483 
T˛_I¡îp
 *
öãΩ
,

484 
objc
,

485 
T˛_Obj
 *
CONST
 
objv
[]

487 
sqlôe3_vfs
 *
pVfs
;

488 
i
;

489 
rc
;

491 if–
objc
!=2 && objc!=3 ){

492 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "");

493  
TCL_ERROR
;

496 
pVfs
 = 
	`sqlôe3_vfs_föd
(0);

497 if–
objc
==2 ){

498 
rc
 = 
pVfs
->
	`xSëSy°emCÆl
(pVfs, 0, 0);

499 
i
=0; 
aSysˇŒ
[i].
zName
; i++ËaSysˇŒ[i].
xOrig
 = 0;

501 
nFunc
;

502 *
zFunc
 = 
	`T˛_GëSåögFromObj
(
objv
[2], &
nFunc
);

503 
rc
 = 
pVfs
->
	`xSëSy°emCÆl
’Vfs, 
	`T˛_GëSåög
(
objv
[2]), 0);

504 
i
=0; 
rc
==
SQLITE_OK
 && 
aSysˇŒ
[i].
zName
; i++){

505 if–
	`°æí
(
aSysˇŒ
[
i
].
zName
)!=
nFunc
 ) ;

506 if–
	`memcmp
(
aSysˇŒ
[
i
].
zName
, 
zFunc
, 
nFunc
) ) ;

507 
aSysˇŒ
[
i
].
xOrig
 = 0;

510 if–
rc
!=
SQLITE_OK
 ){

511 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewSåögObj
(
	`sqlôe3EºName
(
rc
), -1));

512  
TCL_ERROR
;

515 
	`T˛_Re£tResu…
(
öãΩ
);

516  
TCL_OK
;

517 
	}
}

519 
	$ã°_sysˇŒ_exi°s
(

520 * 
˛õ¡D©a
,

521 
T˛_I¡îp
 *
öãΩ
,

522 
objc
,

523 
T˛_Obj
 *
CONST
 
objv
[]

525 
sqlôe3_vfs
 *
pVfs
;

526 
sqlôe3_sysˇŒ_±r
 
x
;

528 if–
objc
!=3 ){

529 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "");

530  
TCL_ERROR
;

533 
pVfs
 = 
	`sqlôe3_vfs_föd
(0);

534 
x
 = 
pVfs
->
	`xGëSy°emCÆl
’Vfs, 
	`T˛_GëSåög
(
objv
[2]));

536 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewBoﬁónObj
(
x
!=0));

537  
TCL_OK
;

538 
	}
}

540 
	$ã°_sysˇŒ_Áu…
(

541 * 
˛õ¡D©a
,

542 
T˛_I¡îp
 *
öãΩ
,

543 
objc
,

544 
T˛_Obj
 *
CONST
 
objv
[]

546 
nCou¡
 = 0;

547 
bPîsi°
 = 0;

549 if–
objc
!=2 && objc!=4 ){

550 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?COUNT PERSIST?");

551  
TCL_ERROR
;

554 if–
objc
==4 ){

555 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
nCou¡
)

556 || 
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[3], &
bPîsi°
)

558  
TCL_ERROR
;

562 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
gSysˇŒ
.
nFaû
));

563 
gSysˇŒ
.
nCou¡
 =ÇCount;

564 
gSysˇŒ
.
bPîsi°
 = bPersist;

565 
gSysˇŒ
.
nFaû
 = 0;

566  
TCL_OK
;

567 
	}
}

569 
	$ã°_sysˇŒ_î∫o
(

570 * 
˛õ¡D©a
,

571 
T˛_I¡îp
 *
öãΩ
,

572 
objc
,

573 
T˛_Obj
 *
CONST
 
objv
[]

575 
iCÆl
;

576 
iEºno
;

577 
rc
;

579 
	sEºno
 {

580 c⁄° *
z
;

581 
i
;

582 } 
aEºno
[] = {

583 { "EACCES", 
EACCES
 },

584 { "EINTR", 
EINTR
 },

585 { "EIO", 
EIO
 },

586 { "EOVERFLOW", 
EOVERFLOW
 },

587 { "ENOMEM", 
ENOMEM
 },

588 { "EAGAIN", 
EAGAIN
 },

589 { "ETIMEDOUT", 
ETIMEDOUT
 },

590 { "EBUSY", 
EBUSY
 },

591 { "EPERM", 
EPERM
 },

592 { "EDEADLK", 
EDEADLK
 },

593 { "ENOLCK", 
ENOLCK
 },

597 if–
objc
!=4 ){

598 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "SYSCALL ERRNO");

599  
TCL_ERROR
;

602 
rc
 = 
	`T˛_GëIndexFromObjSåu˘
(
öãΩ
,

603 
objv
[2], 
aSysˇŒ
, ◊SysˇŒ[0]), "sy°em-ˇŒ", 0, &
iCÆl


605 if–
rc
!=
TCL_OK
 ) Ñc;

606 
rc
 = 
	`T˛_GëIndexFromObjSåu˘
(
öãΩ
,

607 
objv
[3], 
aEºno
, ◊Eºno[0]), "î∫o", 0, &
iEºno


609 if–
rc
!=
TCL_OK
 ) Ñc;

611 
aSysˇŒ
[
iCÆl
].
cu°om_î∫o
 = 
aEºno
[
iEºno
].
i
;

612  
TCL_OK
;

613 
	}
}

615 
	$ã°_sysˇŒ_li°
(

616 * 
˛õ¡D©a
,

617 
T˛_I¡îp
 *
öãΩ
,

618 
objc
,

619 
T˛_Obj
 *
CONST
 
objv
[]

621 c⁄° *
zSys
;

622 
sqlôe3_vfs
 *
pVfs
;

623 
T˛_Obj
 *
pLi°
;

625 if–
objc
!=2 ){

626 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "");

627  
TCL_ERROR
;

630 
pVfs
 = 
	`sqlôe3_vfs_föd
(0);

631 
pLi°
 = 
	`T˛_NewObj
();

632 
	`T˛_In¸RefCou¡
(
pLi°
);

633 
zSys
 = 
pVfs
->
	`xNextSy°emCÆl
(pVfs, 0);

634 
zSys
!=0;

635 
zSys
 = 
pVfs
->
	`xNextSy°emCÆl
(pVfs, zSys)

637 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pLi°
, 
	`T˛_NewSåögObj
(
zSys
, -1));

640 
	`T˛_SëObjResu…
(
öãΩ
, 
pLi°
);

641 
	`T˛_De¸RefCou¡
(
pLi°
);

642  
TCL_OK
;

643 
	}
}

645 
	$ã°_sysˇŒ_deÁu…vfs
(

646 * 
˛õ¡D©a
,

647 
T˛_I¡îp
 *
öãΩ
,

648 
objc
,

649 
T˛_Obj
 *
CONST
 
objv
[]

651 
sqlôe3_vfs
 *
pVfs
;

653 if–
objc
!=2 ){

654 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "");

655  
TCL_ERROR
;

658 
pVfs
 = 
	`sqlôe3_vfs_föd
(0);

659 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewSåögObj
(
pVfs
->
zName
, -1));

660  
TCL_OK
;

661 
	}
}

663 
	$ts_gë∑gesize
(){

664  
gSysˇŒ
.
pgsz
;

665 
	}
}

667 
	$ã°_sysˇŒ_∑gesize
(

668 * 
˛õ¡D©a
,

669 
T˛_I¡îp
 *
öãΩ
,

670 
objc
,

671 
T˛_Obj
 *
CONST
 
objv
[]

673 
sqlôe3_vfs
 *
pVfs
 = 
	`sqlôe3_vfs_föd
(0);

674 
pgsz
;

675 if–
objc
!=3 ){

676 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "PGSZ");

677  
TCL_ERROR
;

679 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
pgsz
) ){

680  
TCL_ERROR
;

683 if–
pgsz
<0 ){

684 if–
gSysˇŒ
.
‹ig_gë∑gesize
 ){

685 
pVfs
->
	`xSëSy°emCÆl
’Vfs, "gë∑gesize", 
gSysˇŒ
.
‹ig_gë∑gesize
);

688 if–
pgsz
<512 || (pgsz & (pgsz-1)) ){

689 
	`T˛_AµídResu…
(
öãΩ
, "pgsz out ofÑange", 0);

690  
TCL_ERROR
;

692 
gSysˇŒ
.
‹ig_gë∑gesize
 = 
pVfs
->
	`xGëSy°emCÆl
(pVfs, "getpagesize");

693 
gSysˇŒ
.
pgsz
 =Ögsz;

694 
pVfs
->
	`xSëSy°emCÆl
(

695 
pVfs
, "gë∑gesize", (
sqlôe3_sysˇŒ_±r
)
ts_gë∑gesize


699  
TCL_OK
;

700 
	}
}

702 
	$ã°_sysˇŒ
(

703 * 
˛õ¡D©a
,

704 
T˛_I¡îp
 *
öãΩ
,

705 
objc
,

706 
T˛_Obj
 *
CONST
 
objv
[]

708 
	sSysˇŒCmd
 {

709 c⁄° *
zName
;

710 
T˛_ObjCmdProc
 *
xCmd
;

711 } 
aCmd
[] = {

712 { "Áu…", 
ã°_sysˇŒ_Áu…
 },

713 { "ö°Æl", 
ã°_sysˇŒ_ö°Æl
 },

714 { "unö°Æl", 
ã°_sysˇŒ_unö°Æl
 },

715 { "ª£t", 
ã°_sysˇŒ_ª£t
 },

716 { "î∫o", 
ã°_sysˇŒ_î∫o
 },

717 { "exi°s", 
ã°_sysˇŒ_exi°s
 },

718 { "li°", 
ã°_sysˇŒ_li°
 },

719 { "deÁu…vfs", 
ã°_sysˇŒ_deÁu…vfs
 },

720 { "∑gesize", 
ã°_sysˇŒ_∑gesize
 },

723 
iCmd
;

724 
rc
;

725 
sqlôe3_vfs
 *
pVfs
 = 
	`sqlôe3_vfs_föd
(0);

727 if–
objc
<2 ){

728 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "SUB-COMMAND ...");

729  
TCL_ERROR
;

731 if–
pVfs
->
iVîsi⁄
<3 ||ÖVfs->
xSëSy°emCÆl
==0 ){

732 
	`T˛_AµídResu…
(
öãΩ
, "VFS doesÇot support xSetSystemCall", 0);

733 
rc
 = 
TCL_ERROR
;

735 
rc
 = 
	`T˛_GëIndexFromObjSåu˘
(
öãΩ
,

736 
objv
[1], 
aCmd
, ◊Cmd[0]), "sub-comm™d", 0, &
iCmd


739 if–
rc
!=
TCL_OK
 ) Ñc;

740  
aCmd
[
iCmd
].
	`xCmd
(
˛õ¡D©a
, 
öãΩ
, 
objc
, 
objv
);

741 
	}
}

743 
	$Sqlôëe°SysˇŒ_Inô
(
T˛_I¡îp
 *
öãΩ
){

744 
	sSysˇŒCmd
 {

745 c⁄° *
zName
;

746 
T˛_ObjCmdProc
 *
xCmd
;

747 } 
aCmd
[] = {

748 { "ã°_sysˇŒ", 
ã°_sysˇŒ
},

750 
i
;

752 
i
=0; i<(
aCmd
)/(aCmd[0]); i++){

753 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
aCmd
[
i
].
zName
,áCmd[i].
xCmd
, 0, 0);

755  
TCL_OK
;

756 
	}
}

758 
	$Sqlôëe°SysˇŒ_Inô
(
T˛_I¡îp
 *
öãΩ
){

759  
TCL_OK
;

760 
	}
}

	@test_tclvar.c

19 
	~"sqlôeI¡.h
"

20 
	~"t˛.h
"

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

24 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


29 
	#TCLVAR_NAME_EQ
 'e'

	)

30 
	#TCLVAR_NAME_MATCH
 'm'

	)

31 
	#TCLVAR_VALUE_GLOB
 'g'

	)

32 
	#TCLVAR_VALUE_REGEXP
 'r'

	)

33 
	#TCLVAR_VALUE_LIKE
 'l'

	)

35 
t˛v¨_vèb
 
	tt˛v¨_vèb
;

36 
t˛v¨_curs‹
 
	tt˛v¨_curs‹
;

41 
	st˛v¨_vèb
 {

42 
sqlôe3_vèb
 
	mba£
;

43 
T˛_I¡îp
 *
	möãΩ
;

47 
	st˛v¨_curs‹
 {

48 
sqlôe3_vèb_curs‹
 
	mba£
;

50 
T˛_Obj
 *
	mpLi°1
;

51 
T˛_Obj
 *
	mpLi°2
;

52 
	mi1
;

53 
	mi2
;

57 
	$t˛v¨C⁄√˘
(

58 
sqlôe3
 *
db
,

59 *
pAux
,

60 
¨gc
, c⁄° *c⁄°*
¨gv
,

61 
sqlôe3_vèb
 **
µVèb
,

62 **
pzEº


64 
t˛v¨_vèb
 *
pVèb
;

65 c⁄° 
zSchema
[] =

67 
pVèb
 = 
	`sqlôe3MÆlocZîo
( (*pVtab) );

68 if–
pVèb
==0 )  
SQLITE_NOMEM
;

69 *
µVèb
 = &
pVèb
->
ba£
;

70 
pVèb
->
öãΩ
 = (
T˛_I¡îp
 *)
pAux
;

71 
	`sqlôe3_de˛¨e_vèb
(
db
, 
zSchema
);

72  
SQLITE_OK
;

73 
	}
}

77 
	$t˛v¨Disc⁄√˘
(
sqlôe3_vèb
 *
pVèb
){

78 
	`sqlôe3_‰ì
(
pVèb
);

79  
SQLITE_OK
;

80 
	}
}

86 
	$t˛v¨O≥n
(
sqlôe3_vèb
 *
pVTab
, 
sqlôe3_vèb_curs‹
 **
µCurs‹
){

87 
t˛v¨_curs‹
 *
pCur
;

88 
pCur
 = 
	`sqlôe3MÆlocZîo
((
t˛v¨_curs‹
));

89 *
µCurs‹
 = &
pCur
->
ba£
;

90  
SQLITE_OK
;

91 
	}
}

96 
	$t˛v¨Clo£
(
sqlôe3_vèb_curs‹
 *
cur
){

97 
t˛v¨_curs‹
 *
pCur
 = (t˛v¨_curs‹ *)
cur
;

98 if–
pCur
->
pLi°1
 ){

99 
	`T˛_De¸RefCou¡
(
pCur
->
pLi°1
);

101 if–
pCur
->
pLi°2
 ){

102 
	`T˛_De¸RefCou¡
(
pCur
->
pLi°2
);

104 
	`sqlôe3_‰ì
(
pCur
);

105  
SQLITE_OK
;

106 
	}
}

111 
	$√xt2
(
T˛_I¡îp
 *
öãΩ
, 
t˛v¨_curs‹
 *
pCur
, 
T˛_Obj
 *
pObj
){

112 
T˛_Obj
 *
p
;

114 if–
pObj
 ){

115 if–!
pCur
->
pLi°2
 ){

116 
p
 = 
	`T˛_NewSåögObj
("arrayÇames", -1);

117 
	`T˛_In¸RefCou¡
(
p
);

118 
	`T˛_Li°ObjAµídEÀmít
(0, 
p
, 
pObj
);

119 
	`T˛_EvÆObjEx
(
öãΩ
, 
p
, 
TCL_EVAL_GLOBAL
);

120 
	`T˛_De¸RefCou¡
(
p
);

121 
pCur
->
pLi°2
 = 
	`T˛_GëObjResu…
(
öãΩ
);

122 
	`T˛_In¸RefCou¡
(
pCur
->
pLi°2
);

123 
	`as£π
–
pCur
->
i2
==0 );

125 
n
 = 0;

126 
pCur
->
i2
++;

127 
	`T˛_Li°ObjLígth
(0, 
pCur
->
pLi°2
, &
n
);

128 if–
pCur
->
i2
>=
n
 ){

129 
	`T˛_De¸RefCou¡
(
pCur
->
pLi°2
);

130 
pCur
->
pLi°2
 = 0;

131 
pCur
->
i2
 = 0;

138 
	}
}

140 
	$t˛v¨Next
(
sqlôe3_vèb_curs‹
 *
cur
){

141 
T˛_Obj
 *
pObj
;

142 
n
 = 0;

143 
ok
 = 0;

145 
t˛v¨_curs‹
 *
pCur
 = (t˛v¨_curs‹ *)
cur
;

146 
T˛_I¡îp
 *
öãΩ
 = ((
t˛v¨_vèb
 *)(
cur
->
pVèb
))->interp;

148 
	`T˛_Li°ObjLígth
(0, 
pCur
->
pLi°1
, &
n
);

149  !
ok
 && 
pCur
->
i1
<
n
 ){

150 
	`T˛_Li°ObjIndex
(0, 
pCur
->
pLi°1
,ÖCur->
i1
, &
pObj
);

151 
ok
 = 
	`√xt2
(
öãΩ
, 
pCur
, 
pObj
);

152 if–!
ok
 ){

153 
pCur
->
i1
++;

158 
	}
}

160 
	$t˛v¨Fûãr
(

161 
sqlôe3_vèb_curs‹
 *
pVèbCurs‹
,

162 
idxNum
, c⁄° *
idxSå
,

163 
¨gc
, 
sqlôe3_vÆue
 **
¨gv


165 
t˛v¨_curs‹
 *
pCur
 = (t˛v¨_curs‹ *)
pVèbCurs‹
;

166 
T˛_I¡îp
 *
öãΩ
 = ((
t˛v¨_vèb
 *)(
pVèbCurs‹
->
pVèb
))->interp;

167 
T˛_Obj
 *
p
 = 
	`T˛_NewSåögObj
("tclvar_filter_cmd", -1);

169 c⁄° *
zEq
 = "";

170 c⁄° *
zM©ch
 = "";

171 c⁄° *
zGlob
 = "";

172 c⁄° *
zRegexp
 = "";

173 c⁄° *
zLike
 = "";

174 
i
;

176 
i
=0; 
idxSå
[i]; i++){

177  
idxSå
[
i
] ){

178 
TCLVAR_NAME_EQ
:

179 
zEq
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[
i
]);

181 
TCLVAR_NAME_MATCH
:

182 
zM©ch
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[
i
]);

184 
TCLVAR_VALUE_GLOB
:

185 
zGlob
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[
i
]);

187 
TCLVAR_VALUE_REGEXP
:

188 
zRegexp
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[
i
]);

190 
TCLVAR_VALUE_LIKE
:

191 
zLike
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[
i
]);

194 
	`as£π
( 0 );

198 
	`T˛_In¸RefCou¡
(
p
);

199 
	`T˛_Li°ObjAµídEÀmít
(0, 
p
, 
	`T˛_NewSåögObj
(
zEq
, -1));

200 
	`T˛_Li°ObjAµídEÀmít
(0, 
p
, 
	`T˛_NewSåögObj
(
zM©ch
, -1));

201 
	`T˛_Li°ObjAµídEÀmít
(0, 
p
, 
	`T˛_NewSåögObj
(
zGlob
, -1));

202 
	`T˛_Li°ObjAµídEÀmít
(0, 
p
, 
	`T˛_NewSåögObj
(
zRegexp
, -1));

203 
	`T˛_Li°ObjAµídEÀmít
(0, 
p
, 
	`T˛_NewSåögObj
(
zLike
, -1));

205 
	`T˛_EvÆObjEx
(
öãΩ
, 
p
, 
TCL_EVAL_GLOBAL
);

206 if–
pCur
->
pLi°1
 ){

207 
	`T˛_De¸RefCou¡
(
pCur
->
pLi°1
);

209 if–
pCur
->
pLi°2
 ){

210 
	`T˛_De¸RefCou¡
(
pCur
->
pLi°2
);

211 
pCur
->
pLi°2
 = 0;

213 
pCur
->
i1
 = 0;

214 
pCur
->
i2
 = 0;

215 
pCur
->
pLi°1
 = 
	`T˛_GëObjResu…
(
öãΩ
);

216 
	`T˛_In¸RefCou¡
(
pCur
->
pLi°1
);

218 
	`T˛_De¸RefCou¡
(
p
);

219  
	`t˛v¨Next
(
pVèbCurs‹
);

220 
	}
}

222 
	$t˛v¨Cﬁumn
(
sqlôe3_vèb_curs‹
 *
cur
, 
sqlôe3_c⁄ãxt
 *
˘x
, 
i
){

223 
T˛_Obj
 *
p1
;

224 
T˛_Obj
 *
p2
;

225 c⁄° *
z1
;

226 c⁄° *
z2
 = "";

227 
t˛v¨_curs‹
 *
pCur
 = (t˛v¨_curs‹*)
cur
;

228 
T˛_I¡îp
 *
öãΩ
 = ((
t˛v¨_vèb
 *)
cur
->
pVèb
)->interp;

230 
	`T˛_Li°ObjIndex
(
öãΩ
, 
pCur
->
pLi°1
,ÖCur->
i1
, &
p1
);

231 
	`T˛_Li°ObjIndex
(
öãΩ
, 
pCur
->
pLi°2
,ÖCur->
i2
, &
p2
);

232 
z1
 = 
	`T˛_GëSåög
(
p1
);

233 if–
p2
 ){

234 
z2
 = 
	`T˛_GëSåög
(
p2
);

236 
i
) {

238 
	`sqlôe3_ªsu…_ãxt
(
˘x
, 
z1
, -1, 
SQLITE_TRANSIENT
);

242 
	`sqlôe3_ªsu…_ãxt
(
˘x
, 
z2
, -1, 
SQLITE_TRANSIENT
);

246 
T˛_Obj
 *
pVÆ
 = 
	`T˛_GëV¨2Ex
(
öãΩ
, 
z1
, *
z2
?z2:0, 
TCL_GLOBAL_ONLY
);

247 
	`sqlôe3_ªsu…_ãxt
(
˘x
, 
	`T˛_GëSåög
(
pVÆ
), -1, 
SQLITE_TRANSIENT
);

251  
SQLITE_OK
;

252 
	}
}

254 
	$t˛v¨Rowid
(
sqlôe3_vèb_curs‹
 *
cur
, 
sqlôe_öt64
 *
pRowid
){

255 *
pRowid
 = 0;

256  
SQLITE_OK
;

257 
	}
}

259 
	$t˛v¨Eof
(
sqlôe3_vèb_curs‹
 *
cur
){

260 
t˛v¨_curs‹
 *
pCur
 = (t˛v¨_curs‹*)
cur
;

261  (
pCur
->
pLi°2
?0:1);

262 
	}
}

272 
	$t˛v¨AddToIdx°r
(*
zSå
, 
x
){

273 
i
;

274 
i
=0; 
zSå
[i]; i++){

275 if–
zSå
[
i
]==
x
 )  1;

277 
zSå
[
i
] = 
x
;

278 
zSå
[
i
+1] = '\0';

280 
	}
}

286 
	$t˛v¨SëOmô
(
T˛_I¡îp
 *
öãΩ
){

287 
rc
;

288 
ªs
 = 0;

289 
T˛_Obj
 *
pRes
;

290 
rc
 = 
	`T˛_EvÆ
(
öãΩ
,

293 if–
rc
==
TCL_OK
 ){

294 
pRes
 = 
	`T˛_GëObjResu…
(
öãΩ
);

295 
rc
 = 
	`T˛_GëBoﬁónFromObj
(0, 
pRes
, &
ªs
);

297  (
rc
==
TCL_OK
 && 
ªs
);

298 
	}
}

313 
	$t˛v¨Be°Index
(
sqlôe3_vèb
 *
èb
, 
sqlôe3_ödex_öfo
 *
pIdxInfo
){

314 
t˛v¨_vèb
 *
pTab
 = (t˛v¨_vèb*)
èb
;

315 
ii
;

316 *
zSå
 = 
	`sqlôe3_mÆloc
(32);

317 
iSå
 = 0;

319 if–
zSå
==0 )  
SQLITE_NOMEM
;

320 
zSå
[0] = '\0';

322 
ii
=0; ii<
pIdxInfo
->
nC⁄°øöt
; ii++){

323 
sqlôe3_ödex_c⁄°øöt
 c⁄° *
pC⁄s
 = &
pIdxInfo
->
aC⁄°øöt
[
ii
];

324 
sqlôe3_ödex_c⁄°øöt_ußge
 *
pUßge
;

326 
pUßge
 = &
pIdxInfo
->
aC⁄°øötUßge
[
ii
];

327 if–
pC⁄s
->
ußbÀ
 ){

329 if–
pC⁄s
->
›
==
SQLITE_INDEX_CONSTRAINT_EQ
 &&ÖC⁄s->
iCﬁumn
==0 ){

330 if–0==
	`t˛v¨AddToIdx°r
(
zSå
, 
TCLVAR_NAME_EQ
) ){

331 
pUßge
->
¨gvIndex
 = ++
iSå
;

332 
pUßge
->
omô
 = 0;

337 if–
pC⁄s
->
›
==
SQLITE_INDEX_CONSTRAINT_MATCH
 &&ÖC⁄s->
iCﬁumn
==0 ){

338 if–0==
	`t˛v¨AddToIdx°r
(
zSå
, 
TCLVAR_NAME_MATCH
) ){

339 
pUßge
->
¨gvIndex
 = ++
iSå
;

340 
pUßge
->
omô
 = 1;

345 if–
pC⁄s
->
›
==
SQLITE_INDEX_CONSTRAINT_GLOB
 &&ÖC⁄s->
iCﬁumn
==2 ){

346 if–0==
	`t˛v¨AddToIdx°r
(
zSå
, 
TCLVAR_VALUE_GLOB
) ){

347 
pUßge
->
¨gvIndex
 = ++
iSå
;

348 
pUßge
->
omô
 = 
	`t˛v¨SëOmô
(
pTab
->
öãΩ
);

353 if–
pC⁄s
->
›
==
SQLITE_INDEX_CONSTRAINT_REGEXP
 &&ÖC⁄s->
iCﬁumn
==2 ){

354 if–0==
	`t˛v¨AddToIdx°r
(
zSå
, 
TCLVAR_VALUE_REGEXP
) ){

355 
pUßge
->
¨gvIndex
 = ++
iSå
;

356 
pUßge
->
omô
 = 
	`t˛v¨SëOmô
(
pTab
->
öãΩ
);

361 if–
pC⁄s
->
›
==
SQLITE_INDEX_CONSTRAINT_LIKE
 &&ÖC⁄s->
iCﬁumn
==2 ){

362 if–0==
	`t˛v¨AddToIdx°r
(
zSå
, 
TCLVAR_VALUE_LIKE
) ){

363 
pUßge
->
¨gvIndex
 = ++
iSå
;

364 
pUßge
->
omô
 = 
	`t˛v¨SëOmô
(
pTab
->
öãΩ
);

369 
pIdxInfo
->
idxSå
 = 
zSå
;

370 
pIdxInfo
->
√edToFªeIdxSå
 = 1;

372  
SQLITE_OK
;

373 
	}
}

379 
sqlôe3_moduÀ
 
	gt˛v¨ModuÀ
 = {

381 
t˛v¨C⁄√˘
,

382 
t˛v¨C⁄√˘
,

383 
t˛v¨Be°Index
,

384 
t˛v¨Disc⁄√˘
,

385 
t˛v¨Disc⁄√˘
,

386 
t˛v¨O≥n
,

387 
t˛v¨Clo£
,

388 
t˛v¨Fûãr
,

389 
t˛v¨Next
,

390 
t˛v¨Eof
,

391 
t˛v¨Cﬁumn
,

392 
t˛v¨Rowid
,

405 
gëDbPoöãr
(
T˛_I¡îp
 *
öãΩ
, c⁄° *
zA
, 
sqlôe3
 **
µDb
);

410 
	$ªgi°î_t˛v¨_moduÀ
(

411 
Clõ¡D©a
 
˛õ¡D©a
,

412 
T˛_I¡îp
 *
öãΩ
,

413 
objc
,

414 
T˛_Obj
 *
CONST
 
objv
[]

416 
rc
 = 
TCL_OK
;

417 
sqlôe3
 *
db
;

418 if–
objc
!=2 ){

419 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB");

420  
TCL_ERROR
;

422 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

423 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


424 
	`sqlôe3_¸óã_moduÀ
(
db
, "t˛v¨", &
t˛v¨ModuÀ
, (*)
öãΩ
);

425 
rc
 = 
	`T˛_EvÆ
(
öãΩ
,

447  
rc
;

448 
	}
}

456 
	$Sqlôëe°t˛v¨_Inô
(
T˛_I¡îp
 *
öãΩ
){

457 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


459 *
zName
;

460 
T˛_ObjCmdProc
 *
xProc
;

461 *
˛õ¡D©a
;

462 } 
aObjCmd
[] = {

463 { "ªgi°î_t˛v¨_moduÀ", 
ªgi°î_t˛v¨_moduÀ
, 0 },

465 
i
;

466 
i
=0; i<(
aObjCmd
)/(aObjCmd[0]); i++){

467 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
aObjCmd
[
i
].
zName
,

468 
aObjCmd
[
i
].
xProc
,áObjCmd[i].
˛õ¡D©a
, 0);

471  
TCL_OK
;

472 
	}
}

	@test_thread.c

18 
	~"sqlôeI¡.h
"

19 
	~<t˛.h
>

21 #i‡
SQLITE_THREADSAFE


23 
	~<î∫o.h
>

25 #i‡!
deföed
(
_MSC_VER
)

26 
	~<uni°d.h
>

32 
SqlThªad
 
	tSqlThªad
;

33 
	sSqlThªad
 {

34 
T˛_ThªadId
 
	m∑ª¡
;

35 
T˛_I¡îp
 *
	möãΩ
;

36 *
	mzS¸ùt
;

37 *
	mzV¨«me
;

47 
EvÆEvít
 
	tEvÆEvít
;

48 
	sEvÆEvít
 {

49 
T˛_Evít
 
	mba£
;

50 *
	mzS¸ùt
;

51 
T˛_I¡îp
 *
	möãΩ
;

54 
T˛_ObjCmdProc
 
	gsq…hªad_¥oc
;

55 
T˛_ObjCmdProc
 
	g˛ock_£c⁄ds_¥oc
;

56 #i‡
SQLITE_OS_UNIX
 && 
deföed
(
SQLITE_ENABLE_UNLOCK_NOTIFY
)

57 
T˛_ObjCmdProc
 
	gblockög_°ï_¥oc
;

58 
T˛_ObjCmdProc
 
	gblockög_¥ï¨e_v2_¥oc
;

60 
Sqlôëe°1_Inô
(
T˛_I¡îp
 *);

61 
Sqlôe3_Inô
(
T˛_I¡îp
 *);

64 c⁄° *
sqlôe3EºName
();

67 *
sqlôe3Te°TextToPå
(const *);

68 
gëDbPoöãr
(
T˛_I¡îp
 *, c⁄° *, 
sqlôe3
 **);

69 
sqlôe3Te°MakePoöãrSå
(
T˛_I¡îp
 *, *, *);

70 
sqlôe3Te°EºCode
(
T˛_I¡îp
 *, 
sqlôe3
 *, );

75 
	$t˛S¸ùtEvít
(
T˛_Evít
 *
evPå
, 
Êags
){

76 
rc
;

77 
EvÆEvít
 *
p
 = (EvÆEvíà*)
evPå
;

78 
rc
 = 
	`T˛_EvÆ
(
p
->
öãΩ
,Ö->
zS¸ùt
);

79 if–
rc
!=
TCL_OK
 ){

80 
	`T˛_BackgroundEº‹
(
p
->
öãΩ
);

82 
	`UNUSED_PARAMETER
(
Êags
);

84 
	}
}

90 
	$po°ToP¨ít
(
SqlThªad
 *
p
, 
T˛_Obj
 *
pS¸ùt
){

91 
EvÆEvít
 *
pEvít
;

92 *
zMsg
;

93 
nMsg
;

95 
zMsg
 = 
	`T˛_GëSåögFromObj
(
pS¸ùt
, &
nMsg
);

96 
pEvít
 = (
EvÆEvít
 *)
	`ckÆloc
((EvÆEvít)+
nMsg
+1);

97 
pEvít
->
ba£
.
√xtPå
 = 0;

98 
pEvít
->
ba£
.
¥oc
 = 
t˛S¸ùtEvít
;

99 
pEvít
->
zS¸ùt
 = (*)&pEvent[1];

100 
	`mem˝y
(
pEvít
->
zS¸ùt
, 
zMsg
, 
nMsg
+1);

101 
pEvít
->
öãΩ
 = 
p
->interp;

103 
	`T˛_ThªadQueueEvít
(
p
->
∑ª¡
, (
T˛_Evít
 *)
pEvít
, 
TCL_QUEUE_TAIL
);

104 
	`T˛_ThªadAÀπ
(
p
->
∑ª¡
);

105 
	}
}

110 
T˛_ThªadCª©eTy≥
 
	$t˛S¸ùtThªad
(
Clõ¡D©a
 
pSqlThªad
){

111 
T˛_I¡îp
 *
öãΩ
;

112 
T˛_Obj
 *
pRes
;

113 
T˛_Obj
 *
pLi°
;

114 
rc
;

115 
SqlThªad
 *
p
 = (SqlThªad *)
pSqlThªad
;

116 
	`Sqlôëe°_muãx_Inô
(
T˛_I¡îp
*);

118 
öãΩ
 = 
	`T˛_Cª©eI¡îp
();

119 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "˛ock_£c⁄ds", 
˛ock_£c⁄ds_¥oc
, 0, 0);

120 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sq…hªad", 
sq…hªad_¥oc
, 
pSqlThªad
, 0);

121 #i‡
SQLITE_OS_UNIX
 && 
	`deföed
(
SQLITE_ENABLE_UNLOCK_NOTIFY
)

122 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlôe3_blockög_°ï", 
blockög_°ï_¥oc
,0,0);

123 
	`T˛_Cª©eObjComm™d
(
öãΩ
,

124 "sqlôe3_blockög_¥ï¨e_v2", 
blockög_¥ï¨e_v2_¥oc
, (*)1, 0);

125 
	`T˛_Cª©eObjComm™d
(
öãΩ
,

126 "sqlôe3_n⁄blockög_¥ï¨e_v2", 
blockög_¥ï¨e_v2_¥oc
, 0, 0);

128 
	`Sqlôëe°1_Inô
(
öãΩ
);

129 
	`Sqlôëe°_muãx_Inô
(
öãΩ
);

130 
	`Sqlôe3_Inô
(
öãΩ
);

132 
rc
 = 
	`T˛_EvÆ
(
öãΩ
, 
p
->
zS¸ùt
);

133 
pRes
 = 
	`T˛_GëObjResu…
(
öãΩ
);

134 
pLi°
 = 
	`T˛_NewObj
();

135 
	`T˛_In¸RefCou¡
(
pLi°
);

136 
	`T˛_In¸RefCou¡
(
pRes
);

138 if–
rc
!=
TCL_OK
 ){

139 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pLi°
, 
	`T˛_NewSåögObj
("error", -1));

140 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pLi°
, 
pRes
);

141 
	`po°ToP¨ít
(
p
, 
pLi°
);

142 
	`T˛_De¸RefCou¡
(
pLi°
);

143 
pLi°
 = 
	`T˛_NewObj
();

146 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pLi°
, 
	`T˛_NewSåögObj
("set", -1));

147 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pLi°
, 
	`T˛_NewSåögObj
(
p
->
zV¨«me
, -1));

148 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pLi°
, 
pRes
);

149 
	`po°ToP¨ít
(
p
, 
pLi°
);

151 
	`ck‰ì
((*)
p
);

152 
	`T˛_De¸RefCou¡
(
pLi°
);

153 
	`T˛_De¸RefCou¡
(
pRes
);

154 
	`T˛_DñëeI¡îp
(
öãΩ
);

155  
	`T˛_DoO√Evít
(
TCL_ALL_EVENTS
|
TCL_DONT_WAIT
) );

156 
	`T˛_ExôThªad
(0);

157 
TCL_THREAD_CREATE_RETURN
;

158 
	}
}

170 
	$sq…hªad_•awn
(

171 
Clõ¡D©a
 
˛õ¡D©a
,

172 
T˛_I¡îp
 *
öãΩ
,

173 
objc
,

174 
T˛_Obj
 *
CONST
 
objv
[]

176 
T˛_ThªadId
 
x
;

177 
SqlThªad
 *
pNew
;

178 
rc
;

180 
nV¨«me
; *
zV¨«me
;

181 
nS¸ùt
; *
zS¸ùt
;

184 c⁄° 
nSèck
 = 
TCL_THREAD_STACK_DEFAULT
;

185 c⁄° 
Êags
 = 
TCL_THREAD_NOFLAGS
;

187 
	`as£π
(
objc
==4);

188 
	`UNUSED_PARAMETER
(
˛õ¡D©a
);

189 
	`UNUSED_PARAMETER
(
objc
);

191 
zV¨«me
 = 
	`T˛_GëSåögFromObj
(
objv
[2], &
nV¨«me
);

192 
zS¸ùt
 = 
	`T˛_GëSåögFromObj
(
objv
[3], &
nS¸ùt
);

194 
pNew
 = (
SqlThªad
 *)
	`ckÆloc
((SqlThªad)+
nV¨«me
+
nS¸ùt
+2);

195 
pNew
->
zV¨«me
 = (*)&pNew[1];

196 
pNew
->
zS¸ùt
 = (*)&pNew->
zV¨«me
[
nV¨«me
+1];

197 
	`mem˝y
(
pNew
->
zV¨«me
, zV¨«me, 
nV¨«me
+1);

198 
	`mem˝y
(
pNew
->
zS¸ùt
, zS¸ùt, 
nS¸ùt
+1);

199 
pNew
->
∑ª¡
 = 
	`T˛_GëCuºítThªad
();

200 
pNew
->
öãΩ
 = interp;

202 
rc
 = 
	`T˛_Cª©eThªad
(&
x
, 
t˛S¸ùtThªad
, (*)
pNew
, 
nSèck
, 
Êags
);

203 if–
rc
!=
TCL_OK
 ){

204 
	`T˛_AµídResu…
(
öãΩ
, "Error in Tcl_CreateThread()", 0);

205 
	`ck‰ì
((*)
pNew
);

206  
TCL_ERROR
;

209  
TCL_OK
;

210 
	}
}

223 
	$sq…hªad_∑ª¡
(

224 
Clõ¡D©a
 
˛õ¡D©a
,

225 
T˛_I¡îp
 *
öãΩ
,

226 
objc
,

227 
T˛_Obj
 *
CONST
 
objv
[]

229 
EvÆEvít
 *
pEvít
;

230 *
zMsg
;

231 
nMsg
;

232 
SqlThªad
 *
p
 = (SqlThªad *)
˛õ¡D©a
;

234 
	`as£π
(
objc
==3);

235 
	`UNUSED_PARAMETER
(
objc
);

237 if–
p
==0 ){

238 
	`T˛_AµídResu…
(
öãΩ
, "noÖarentÅhread", 0);

239  
TCL_ERROR
;

242 
zMsg
 = 
	`T˛_GëSåögFromObj
(
objv
[2], &
nMsg
);

243 
pEvít
 = (
EvÆEvít
 *)
	`ckÆloc
((EvÆEvít)+
nMsg
+1);

244 
pEvít
->
ba£
.
√xtPå
 = 0;

245 
pEvít
->
ba£
.
¥oc
 = 
t˛S¸ùtEvít
;

246 
pEvít
->
zS¸ùt
 = (*)&pEvent[1];

247 
	`mem˝y
(
pEvít
->
zS¸ùt
, 
zMsg
, 
nMsg
+1);

248 
pEvít
->
öãΩ
 = 
p
->interp;

249 
	`T˛_ThªadQueueEvít
(
p
->
∑ª¡
, (
T˛_Evít
 *)
pEvít
, 
TCL_QUEUE_TAIL
);

250 
	`T˛_ThªadAÀπ
(
p
->
∑ª¡
);

252  
TCL_OK
;

253 
	}
}

255 
	$xBusy
(*
pArg
, 
nBusy
){

256 
	`UNUSED_PARAMETER
(
pArg
);

257 
	`UNUSED_PARAMETER
(
nBusy
);

258 
	`sqlôe3_¶ìp
(50);

260 
	}
}

268 
	$sq…hªad_›í
(

269 
Clõ¡D©a
 
˛õ¡D©a
,

270 
T˛_I¡îp
 *
öãΩ
,

271 
objc
,

272 
T˛_Obj
 *
CONST
 
objv
[]

274 
	`sqlôe3Te°MakePoöãrSå
(
T˛_I¡îp
 *
öãΩ
, *
zPå
, *
p
);

276 c⁄° *
zFûíame
;

277 
sqlôe3
 *
db
;

278 
zBuf
[100];

279 
	`Md5_Regi°î
(
sqlôe3
*);

281 
	`UNUSED_PARAMETER
(
˛õ¡D©a
);

282 
	`UNUSED_PARAMETER
(
objc
);

284 
zFûíame
 = 
	`T˛_GëSåög
(
objv
[2]);

285 
	`sqlôe3_›í
(
zFûíame
, &
db
);

286 #ifde‡
SQLITE_HAS_CODEC


287 if–
db
 && 
objc
>=4 ){

288 c⁄° *
zKey
;

289 
nKey
;

290 
rc
;

291 
zKey
 = 
	`T˛_GëSåögFromObj
(
objv
[3], &
nKey
);

292 
rc
 = 
	`sqlôe3_key
(
db
, 
zKey
, 
nKey
);

293 if–
rc
!=
SQLITE_OK
 ){

294 *
zEºMsg
 = 
	`sqlôe3_m¥ötf
("îr‹ %d: %s", 
rc
, 
	`sqlôe3_îrmsg
(
db
));

295 
	`sqlôe3_˛o£
(
db
);

296 
	`T˛_AµídResu…
(
öãΩ
, 
zEºMsg
, (*)0);

297 
	`sqlôe3_‰ì
(
zEºMsg
);

298  
TCL_ERROR
;

302 
	`Md5_Regi°î
(
db
);

303 
	`sqlôe3_busy_h™dÀr
(
db
, 
xBusy
, 0);

305 if–
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
db
ËË 
TCL_ERROR
;

306 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

308  
TCL_OK
;

309 
	}
}

318 
	$sq…hªad_id
(

319 
Clõ¡D©a
 
˛õ¡D©a
,

320 
T˛_I¡îp
 *
öãΩ
,

321 
objc
,

322 
T˛_Obj
 *
CONST
 
objv
[]

324 
T˛_ThªadId
 
id
 = 
	`T˛_GëCuºítThªad
();

325 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`SQLITE_PTR_TO_INT
(
id
)));

326 
	`UNUSED_PARAMETER
(
˛õ¡D©a
);

327 
	`UNUSED_PARAMETER
(
objc
);

328 
	`UNUSED_PARAMETER
(
objv
);

329  
TCL_OK
;

330 
	}
}

336 
	$sq…hªad_¥oc
(

337 
Clõ¡D©a
 
˛õ¡D©a
,

338 
T˛_I¡îp
 *
öãΩ
,

339 
objc
,

340 
T˛_Obj
 *
CONST
 
objv
[]

342 
	sSubComm™d
 {

343 *
zName
;

344 
T˛_ObjCmdProc
 *
xProc
;

345 
nArg
;

346 *
zUßge
;

347 } 
aSub
[] = {

348 {"∑ª¡", 
sq…hªad_∑ª¡
, 1, "SCRIPT"},

349 {"•awn", 
sq…hªad_•awn
, 2, "VARNAME SCRIPT"},

350 {"›í", 
sq…hªad_›í
, 1, "DBNAME"},

351 {"id", 
sq…hªad_id
, 0, ""},

354 
SubComm™d
 *
pSub
;

355 
rc
;

356 
iIndex
;

358 if–
objc
<2 ){

359 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "SUB-COMMAND");

360  
TCL_ERROR
;

363 
rc
 = 
	`T˛_GëIndexFromObjSåu˘
(

364 
öãΩ
, 
objv
[1], 
aSub
, ◊Sub[0]), "sub-comm™d", 0, &
iIndex


366 if–
rc
!=
TCL_OK
 ) Ñc;

367 
pSub
 = &
aSub
[
iIndex
];

369 if–
objc
<(
pSub
->
nArg
+2) ){

370 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, 
pSub
->
zUßge
);

371  
TCL_ERROR
;

374  
pSub
->
	`xProc
(
˛õ¡D©a
, 
öãΩ
, 
objc
, 
objv
);

375 
	}
}

384 
	$˛ock_£c⁄ds_¥oc
(

385 
Clõ¡D©a
 
˛õ¡D©a
,

386 
T˛_I¡îp
 *
öãΩ
,

387 
objc
,

388 
T˛_Obj
 *
CONST
 
objv
[]

390 
T˛_Time
 
now
;

391 
	`T˛_GëTime
(&
now
);

392 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
now
.
£c
));

393 
	`UNUSED_PARAMETER
(
˛õ¡D©a
);

394 
	`UNUSED_PARAMETER
(
objc
);

395 
	`UNUSED_PARAMETER
(
objv
);

396  
TCL_OK
;

397 
	}
}

412 #i‡
SQLITE_OS_UNIX
 && 
deföed
(
SQLITE_ENABLE_UNLOCK_NOTIFY
)

416 
	~<±hªad.h
>

422 
U∆ockNŸifiˇti⁄
 
	tU∆ockNŸifiˇti⁄
;

423 
	sU∆ockNŸifiˇti⁄
 {

424 
	mfúed
;

425 
±hªad_c⁄d_t
 
	mc⁄d
;

426 
±hªad_muãx_t
 
	mmuãx
;

432 
	$u∆ock_nŸify_cb
(**
≠Arg
, 
nArg
){

433 
i
;

434 
i
=0; i<
nArg
; i++){

435 
U∆ockNŸifiˇti⁄
 *
p
 = (U∆ockNŸifiˇti⁄ *)
≠Arg
[
i
];

436 
	`±hªad_muãx_lock
(&
p
->
muãx
);

437 
p
->
fúed
 = 1;

438 
	`±hªad_c⁄d_sig«l
(&
p
->
c⁄d
);

439 
	`±hªad_muãx_u∆ock
(&
p
->
muãx
);

441 
	}
}

457 
	$waô_f‹_u∆ock_nŸify
(
sqlôe3
 *
db
){

458 
rc
;

459 
U∆ockNŸifiˇti⁄
 
un
;

462 
un
.
fúed
 = 0;

463 
	`±hªad_muãx_öô
(&
un
.
muãx
, 0);

464 
	`±hªad_c⁄d_öô
(&
un
.
c⁄d
, 0);

467 
rc
 = 
	`sqlôe3_u∆ock_nŸify
(
db
, 
u∆ock_nŸify_cb
, (*)&
un
);

468 
	`as£π
–
rc
==
SQLITE_LOCKED
 ||Ñc==
SQLITE_OK
 );

478 if–
rc
==
SQLITE_OK
 ){

479 
	`±hªad_muãx_lock
(&
un
.
muãx
);

480 if–!
un
.
fúed
 ){

481 
	`±hªad_c⁄d_waô
(&
un
.
c⁄d
, &un.
muãx
);

483 
	`±hªad_muãx_u∆ock
(&
un
.
muãx
);

487 
	`±hªad_c⁄d_de°roy
(&
un
.
c⁄d
);

488 
	`±hªad_muãx_de°roy
(&
un
.
muãx
);

490  
rc
;

491 
	}
}

504 
	$sqlôe3_blockög_°ï
(
sqlôe3_°mt
 *
pStmt
){

505 
rc
;

506  
SQLITE_LOCKED
==(
rc
 = 
	`sqlôe3_°ï
(
pStmt
)) ){

507 
rc
 = 
	`waô_f‹_u∆ock_nŸify
(
	`sqlôe3_db_h™dÀ
(
pStmt
));

508 if–
rc
!=
SQLITE_OK
 ) ;

509 
	`sqlôe3_ª£t
(
pStmt
);

511  
rc
;

512 
	}
}

525 
	$sqlôe3_blockög_¥ï¨e_v2
(

526 
sqlôe3
 *
db
,

527 c⁄° *
zSql
,

528 
nSql
,

529 
sqlôe3_°mt
 **
µStmt
,

530 c⁄° **
pz


532 
rc
;

533  
SQLITE_LOCKED
==(
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
db
, 
zSql
, 
nSql
, 
µStmt
, 
pz
)) ){

534 
rc
 = 
	`waô_f‹_u∆ock_nŸify
(
db
);

535 if–
rc
!=
SQLITE_OK
 ) ;

537  
rc
;

538 
	}
}

546 
	$blockög_°ï_¥oc
(

547 * 
˛õ¡D©a
,

548 
T˛_I¡îp
 *
öãΩ
,

549 
objc
,

550 
T˛_Obj
 *
CONST
 
objv
[]

553 
sqlôe3_°mt
 *
pStmt
;

554 
rc
;

556 if–
objc
!=2 ){

557 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "STMT");

558  
TCL_ERROR
;

561 
pStmt
 = (
sqlôe3_°mt
*)
	`sqlôe3Te°TextToPå
(
	`T˛_GëSåög
(
objv
[1]));

562 
rc
 = 
	`sqlôe3_blockög_°ï
(
pStmt
);

564 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºName
(
rc
), 0);

565  
TCL_OK
;

566 
	}
}

572 
	$blockög_¥ï¨e_v2_¥oc
(

573 * 
˛õ¡D©a
,

574 
T˛_I¡îp
 *
öãΩ
,

575 
objc
,

576 
T˛_Obj
 *
CONST
 
objv
[]

578 
sqlôe3
 *
db
;

579 c⁄° *
zSql
;

580 
byãs
;

581 c⁄° *
zTaû
 = 0;

582 
sqlôe3_°mt
 *
pStmt
 = 0;

583 
zBuf
[50];

584 
rc
;

585 
isBlockög
 = !(
˛õ¡D©a
==0);

587 if–
objc
!=5 && objc!=4 ){

588 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

589 
	`T˛_GëSåög
(
objv
[0]), " DB sql bytesÅailvar", 0);

590  
TCL_ERROR
;

592 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

593 
zSql
 = 
	`T˛_GëSåög
(
objv
[2]);

594 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
byãs
ËË 
TCL_ERROR
;

596 if–
isBlockög
 ){

597 
rc
 = 
	`sqlôe3_blockög_¥ï¨e_v2
(
db
, 
zSql
, 
byãs
, &
pStmt
, &
zTaû
);

599 
rc
 = 
	`sqlôe3_¥ï¨e_v2
(
db
, 
zSql
, 
byãs
, &
pStmt
, &
zTaû
);

602 
	`as£π
(
rc
==
SQLITE_OK
 || 
pStmt
==0);

603 if–
zTaû
 && 
objc
>=5 ){

604 if–
byãs
>=0 ){

605 
byãs
 = byã†- (
zTaû
-
zSql
);

607 
	`T˛_ObjSëV¨2
(
öãΩ
, 
objv
[4], 0, 
	`T˛_NewSåögObj
(
zTaû
, 
byãs
), 0);

609 if–
rc
!=
SQLITE_OK
 ){

610 
	`as£π
–
pStmt
==0 );

611 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%†", (*)
	`sqlôe3EºName
(
rc
));

612 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 
	`sqlôe3_îrmsg
(
db
), 0);

613  
TCL_ERROR
;

616 if–
pStmt
 ){

617 if–
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
pStmt
ËË 
TCL_ERROR
;

618 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

620  
TCL_OK
;

621 
	}
}

631 
	$Sqlôëe°Thªad_Inô
(
T˛_I¡îp
 *
öãΩ
){

632 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sq…hªad", 
sq…hªad_¥oc
, 0, 0);

633 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "˛ock_£c⁄ds", 
˛ock_£c⁄ds_¥oc
, 0, 0);

634 #i‡
SQLITE_OS_UNIX
 && 
	`deföed
(
SQLITE_ENABLE_UNLOCK_NOTIFY
)

635 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlôe3_blockög_°ï", 
blockög_°ï_¥oc
,0,0);

636 
	`T˛_Cª©eObjComm™d
(
öãΩ
,

637 "sqlôe3_blockög_¥ï¨e_v2", 
blockög_¥ï¨e_v2_¥oc
, (*)1, 0);

638 
	`T˛_Cª©eObjComm™d
(
öãΩ
,

639 "sqlôe3_n⁄blockög_¥ï¨e_v2", 
blockög_¥ï¨e_v2_¥oc
, 0, 0);

641  
TCL_OK
;

642 
	}
}

644 
	$Sqlôëe°Thªad_Inô
(
T˛_I¡îp
 *
öãΩ
){

645  
TCL_OK
;

646 
	}
}

	@test_vfs.c

27 #i‡
SQLITE_TEST


29 
	~"sqlôe3.h
"

30 
	~"sqlôeI¡.h
"

31 
	~<t˛.h
>

33 
Te°vfs
 
	tTe°vfs
;

34 
Te°vfsShm
 
	tTe°vfsShm
;

35 
Te°vfsBuf„r
 
	tTe°vfsBuf„r
;

36 
Te°vfsFûe
 
	tTe°vfsFûe
;

37 
Te°vfsFd
 
	tTe°vfsFd
;

42 
	sTe°vfsFûe
 {

43 
sqlôe3_fûe
 
	mba£
;

44 
Te°vfsFd
 *
	mpFd
;

46 
	#tvfsGëFd
(
pFûe
Ë(((
Te°vfsFûe
 *ÌFûe)->
pFd
)

	)

48 
	sTe°vfsFd
 {

49 
sqlôe3_vfs
 *
	mpVfs
;

50 c⁄° *
	mzFûíame
;

51 
sqlôe3_fûe
 *
	mpRól
;

52 
T˛_Obj
 *
	mpShmId
;

54 
Te°vfsBuf„r
 *
	mpShm
;

55 
u32
 
	mex˛lock
;

56 
u32
 
	msh¨edlock
;

57 
Te°vfsFd
 *
	mpNext
;

61 
	#FAULT_INJECT_NONE
 0

	)

62 
	#FAULT_INJECT_TRANSIENT
 1

	)

63 
	#FAULT_INJECT_PERSISTENT
 2

	)

65 
Te°Fau…Inje˘
 
	tTe°Fau…Inje˘
;

66 
	sTe°Fau…Inje˘
 {

67 
	miC¡
;

68 
	meFau…
;

69 
	mnFaû
;

77 
	sTe°vfs
 {

78 *
	mzName
;

79 
sqlôe3_vfs
 *
	mpP¨ít
;

80 
sqlôe3_vfs
 *
	mpVfs
;

81 
T˛_I¡îp
 *
	möãΩ
;

82 
T˛_Obj
 *
	mpS¸ùt
;

83 
Te°vfsBuf„r
 *
	mpBuf„r
;

84 
	misNoshm
;

85 
	misFuŒshm
;

87 
	mmask
;

89 
Te°Fau…Inje˘
 
	mi€º_îr
;

90 
Te°Fau…Inje˘
 
	mfuŒ_îr
;

91 
Te°Fau…Inje˘
 
	mˇ¡›í_îr
;

94 
	miI€ºC¡
;

95 
	mi€º
;

96 
	mnI€ºFaû
;

97 
	miFuŒC¡
;

98 
	mfuŒîr
;

99 
	mnFuŒFaû
;

102 
	miDevch¨
;

103 
	miSe˘‹size
;

114 
	#TESTVFS_SHMOPEN_MASK
 0x00000001

	)

115 
	#TESTVFS_SHMLOCK_MASK
 0x00000010

	)

116 
	#TESTVFS_SHMMAP_MASK
 0x00000020

	)

117 
	#TESTVFS_SHMBARRIER_MASK
 0x00000040

	)

118 
	#TESTVFS_SHMCLOSE_MASK
 0x00000080

	)

120 
	#TESTVFS_OPEN_MASK
 0x00000100

	)

121 
	#TESTVFS_SYNC_MASK
 0x00000200

	)

122 
	#TESTVFS_DELETE_MASK
 0x00000400

	)

123 
	#TESTVFS_CLOSE_MASK
 0x00000800

	)

124 
	#TESTVFS_WRITE_MASK
 0x00001000

	)

125 
	#TESTVFS_TRUNCATE_MASK
 0x00002000

	)

126 
	#TESTVFS_ACCESS_MASK
 0x00004000

	)

127 
	#TESTVFS_FULLPATHNAME_MASK
 0x00008000

	)

128 
	#TESTVFS_READ_MASK
 0x00010000

	)

129 
	#TESTVFS_UNLOCK_MASK
 0x00020000

	)

130 
	#TESTVFS_LOCK_MASK
 0x00040000

	)

131 
	#TESTVFS_CKLOCK_MASK
 0x00080000

	)

133 
	#TESTVFS_ALL_MASK
 0x000FFFFF

	)

136 
	#TESTVFS_MAX_PAGES
 1024

	)

143 
	sTe°vfsBuf„r
 {

144 *
	mzFûe
;

145 
	mpgsz
;

146 
u8
 *
	maPage
[
TESTVFS_MAX_PAGES
];

147 
Te°vfsFd
 *
	mpFûe
;

148 
Te°vfsBuf„r
 *
	mpNext
;

152 
	#PARENTVFS
(
x
Ë(((
Te°vfs
 *)((x)->
pAµD©a
))->
pP¨ít
)

	)

154 
	#TESTVFS_MAX_ARGS
 12

	)

160 
tvfsClo£
(
sqlôe3_fûe
*);

161 
tvfsRód
(
sqlôe3_fûe
*, *, 
iAmt
, 
sqlôe3_öt64
 
iOf°
);

162 
tvfsWrôe
(
sqlôe3_fûe
*,c⁄° *,
iAmt
, 
sqlôe3_öt64
 
iOf°
);

163 
tvfsTrunˇã
(
sqlôe3_fûe
*, 
sqlôe3_öt64
 
size
);

164 
tvfsSync
(
sqlôe3_fûe
*, 
Êags
);

165 
tvfsFûeSize
(
sqlôe3_fûe
*, 
sqlôe3_öt64
 *
pSize
);

166 
tvfsLock
(
sqlôe3_fûe
*, );

167 
tvfsU∆ock
(
sqlôe3_fûe
*, );

168 
tvfsCheckRe£rvedLock
(
sqlôe3_fûe
*, *);

169 
tvfsFûeC⁄åﬁ
(
sqlôe3_fûe
*, 
›
, *
pArg
);

170 
tvfsSe˘‹Size
(
sqlôe3_fûe
*);

171 
tvfsDevi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
*);

176 
tvfsO≥n
(
sqlôe3_vfs
*, c⁄° *, 
sqlôe3_fûe
*, , *);

177 
tvfsDñëe
(
sqlôe3_vfs
*, c⁄° *
zName
, 
syncDú
);

178 
tvfsAc˚ss
(
sqlôe3_vfs
*, c⁄° *
zName
, 
Êags
, *);

179 
tvfsFuŒP©h«me
(
sqlôe3_vfs
*, c⁄° *
zName
, , *
zOut
);

180 #i‚de‡
SQLITE_OMIT_LOAD_EXTENSION


181 *
tvfsDlO≥n
(
sqlôe3_vfs
*, c⁄° *
zFûíame
);

182 
tvfsDlEº‹
(
sqlôe3_vfs
*, 
nByã
, *
zEºMsg
);

183 (*
	$tvfsDlSym
(
sqlôe3_vfs
*,*, c⁄° *
zSymbﬁ
))();

184 
	`tvfsDlClo£
(
sqlôe3_vfs
*, *);

186 
	`tvfsR™dom√ss
(
sqlôe3_vfs
*, 
nByã
, *
zOut
);

187 
	`tvfsSÀï
(
sqlôe3_vfs
*, 
mi¸o£c⁄ds
);

188 
	`tvfsCuºítTime
(
sqlôe3_vfs
*, *);

190 
	`tvfsShmO≥n
(
sqlôe3_fûe
*);

191 
	`tvfsShmLock
(
sqlôe3_fûe
*, , , );

192 
	`tvfsShmM≠
(
sqlôe3_fûe
*,,,, volatile **);

193 
	`tvfsShmB¨rõr
(
sqlôe3_fûe
*);

194 
	`tvfsShmUnm≠
(
sqlôe3_fûe
*, );

196 
	`tvfsFëch
(
sqlôe3_fûe
*, 
sqlôe3_öt64
, , **);

197 
	`tvfsUn„tch
(
sqlôe3_fûe
*, 
sqlôe3_öt64
, *);

199 
sqlôe3_io_mëhods
 
tvfs_io_mëhods
 = {

201 
tvfsClo£
,

202 
tvfsRód
,

203 
tvfsWrôe
,

204 
tvfsTrunˇã
,

205 
tvfsSync
,

206 
tvfsFûeSize
,

207 
tvfsLock
,

208 
tvfsU∆ock
,

209 
tvfsCheckRe£rvedLock
,

210 
tvfsFûeC⁄åﬁ
,

211 
tvfsSe˘‹Size
,

212 
tvfsDevi˚Ch¨a˘îi°ics
,

213 
tvfsShmM≠
,

214 
tvfsShmLock
,

215 
tvfsShmB¨rõr
,

216 
tvfsShmUnm≠
,

217 
tvfsFëch
,

218 
tvfsUn„tch


219 
	}
};

221 
	$tvfsResu…Code
(
Te°vfs
 *
p
, *
pRc
){

222 
	sîrcode
 {

223 
eCode
;

224 c⁄° *
zCode
;

225 } 
aCode
[] = {

226 { 
SQLITE_OK
, "SQLITE_OK" },

227 { 
SQLITE_ERROR
, "SQLITE_ERROR" },

228 { 
SQLITE_IOERR
, "SQLITE_IOERR" },

229 { 
SQLITE_LOCKED
, "SQLITE_LOCKED" },

230 { 
SQLITE_BUSY
, "SQLITE_BUSY" },

233 c⁄° *
z
;

234 
i
;

236 
z
 = 
	`T˛_GëSåögResu…
(
p
->
öãΩ
);

237 
i
=0; i<
	`AºaySize
(
aCode
); i++){

238 if–0==
	`°rcmp
(
z
, 
aCode
[
i
].
zCode
) ){

239 *
pRc
 = 
aCode
[
i
].
eCode
;

245 
	}
}

247 
	$tvfsInje˘Fau…
(
Te°Fau…Inje˘
 *
p
){

248 
ªt
 = 0;

249 if–
p
->
eFau…
 ){

250 
p
->
iC¡
--;

251 if–
p
->
iC¡
==0 || (p->iC¡<0 &&Ö->
eFau…
==
FAULT_INJECT_PERSISTENT
 ) ){

252 
ªt
 = 1;

253 
p
->
nFaû
++;

256  
ªt
;

257 
	}
}

260 
	$tvfsInje˘I€º
(
Te°vfs
 *
p
){

261  
	`tvfsInje˘Fau…
(&
p
->
i€º_îr
);

262 
	}
}

264 
	$tvfsInje˘FuŒîr
(
Te°vfs
 *
p
){

265  
	`tvfsInje˘Fau…
(&
p
->
fuŒ_îr
);

266 
	}
}

267 
	$tvfsInje˘C™t›íîr
(
Te°vfs
 *
p
){

268  
	`tvfsInje˘Fau…
(&
p
->
ˇ¡›í_îr
);

269 
	}
}

272 
	$tvfsExecT˛
(

273 
Te°vfs
 *
p
,

274 c⁄° *
zMëhod
,

275 
T˛_Obj
 *
¨g1
,

276 
T˛_Obj
 *
¨g2
,

277 
T˛_Obj
 *
¨g3
,

278 
T˛_Obj
 *
¨g4


280 
rc
;

281 
T˛_Obj
 *
pEvÆ
;

282 
	`as£π
–
p
->
pS¸ùt
 );

284 
	`as£π
–
zMëhod
 );

285 
	`as£π
–
p
 );

286 
	`as£π
–
¨g2
==0 || 
¨g1
!=0 );

287 
	`as£π
–
¨g3
==0 || 
¨g2
!=0 );

289 
pEvÆ
 = 
	`T˛_Du∂iˇãObj
(
p
->
pS¸ùt
);

290 
	`T˛_In¸RefCou¡
(
p
->
pS¸ùt
);

291 
	`T˛_Li°ObjAµídEÀmít
(
p
->
öãΩ
, 
pEvÆ
, 
	`T˛_NewSåögObj
(
zMëhod
, -1));

292 if–
¨g1
 ) 
	`T˛_Li°ObjAµídEÀmít
(
p
->
öãΩ
, 
pEvÆ
,árg1);

293 if–
¨g2
 ) 
	`T˛_Li°ObjAµídEÀmít
(
p
->
öãΩ
, 
pEvÆ
,árg2);

294 if–
¨g3
 ) 
	`T˛_Li°ObjAµídEÀmít
(
p
->
öãΩ
, 
pEvÆ
,árg3);

295 if–
¨g4
 ) 
	`T˛_Li°ObjAµídEÀmít
(
p
->
öãΩ
, 
pEvÆ
,árg4);

297 
rc
 = 
	`T˛_EvÆObjEx
(
p
->
öãΩ
, 
pEvÆ
, 
TCL_EVAL_GLOBAL
);

298 if–
rc
!=
TCL_OK
 ){

299 
	`T˛_BackgroundEº‹
(
p
->
öãΩ
);

300 
	`T˛_Re£tResu…
(
p
->
öãΩ
);

302 
	}
}

308 
	$tvfsClo£
(
sqlôe3_fûe
 *
pFûe
){

309 
Te°vfsFûe
 *
pTe°fûe
 = (Te°vfsFûê*)
pFûe
;

310 
Te°vfsFd
 *
pFd
 = 
pTe°fûe
->pFd;

311 
Te°vfs
 *
p
 = (Te°vf†*)
pFd
->
pVfs
->
pAµD©a
;

313 if–
p
->
pS¸ùt
 &&Ö->
mask
&
TESTVFS_CLOSE_MASK
 ){

314 
	`tvfsExecT˛
(
p
, "xClose",

315 
	`T˛_NewSåögObj
(
pFd
->
zFûíame
, -1),ÖFd->
pShmId
, 0, 0

319 if–
pFd
->
pShmId
 ){

320 
	`T˛_De¸RefCou¡
(
pFd
->
pShmId
);

321 
pFd
->
pShmId
 = 0;

323 if–
pFûe
->
pMëhods
 ){

324 
	`ck‰ì
((*)
pFûe
->
pMëhods
);

326 
	`sqlôe3OsClo£
(
pFd
->
pRól
);

327 
	`ck‰ì
((*)
pFd
);

328 
pTe°fûe
->
pFd
 = 0;

329  
SQLITE_OK
;

330 
	}
}

335 
	$tvfsRód
(

336 
sqlôe3_fûe
 *
pFûe
,

337 *
zBuf
,

338 
iAmt
,

339 
sqlôe_öt64
 
iOf°


341 
rc
 = 
SQLITE_OK
;

342 
Te°vfsFd
 *
pFd
 = 
	`tvfsGëFd
(
pFûe
);

343 
Te°vfs
 *
p
 = (Te°vf†*)
pFd
->
pVfs
->
pAµD©a
;

344 if–
p
->
pS¸ùt
 &&Ö->
mask
&
TESTVFS_READ_MASK
 ){

345 
	`tvfsExecT˛
(
p
, "xRead",

346 
	`T˛_NewSåögObj
(
pFd
->
zFûíame
, -1),ÖFd->
pShmId
, 0, 0

348 
	`tvfsResu…Code
(
p
, &
rc
);

350 if–
rc
==
SQLITE_OK
 && 
p
->
mask
&
TESTVFS_READ_MASK
 && 
	`tvfsInje˘I€º
(p) ){

351 
rc
 = 
SQLITE_IOERR
;

353 if–
rc
==
SQLITE_OK
 ){

354 
rc
 = 
	`sqlôe3OsRód
(
pFd
->
pRól
, 
zBuf
, 
iAmt
, 
iOf°
);

356  
rc
;

357 
	}
}

362 
	$tvfsWrôe
(

363 
sqlôe3_fûe
 *
pFûe
,

364 c⁄° *
zBuf
,

365 
iAmt
,

366 
sqlôe_öt64
 
iOf°


368 
rc
 = 
SQLITE_OK
;

369 
Te°vfsFd
 *
pFd
 = 
	`tvfsGëFd
(
pFûe
);

370 
Te°vfs
 *
p
 = (Te°vf†*)
pFd
->
pVfs
->
pAµD©a
;

372 if–
p
->
pS¸ùt
 &&Ö->
mask
&
TESTVFS_WRITE_MASK
 ){

373 
	`tvfsExecT˛
(
p
, "xWrite",

374 
	`T˛_NewSåögObj
(
pFd
->
zFûíame
, -1),ÖFd->
pShmId
,

375 
	`T˛_NewWideI¡Obj
(
iOf°
), 
	`T˛_NewI¡Obj
(
iAmt
)

377 
	`tvfsResu…Code
(
p
, &
rc
);

380 if–
rc
==
SQLITE_OK
 && 
	`tvfsInje˘FuŒîr
(
p
) ){

381 
rc
 = 
SQLITE_FULL
;

383 if–
rc
==
SQLITE_OK
 && 
p
->
mask
&
TESTVFS_WRITE_MASK
 && 
	`tvfsInje˘I€º
(p) ){

384 
rc
 = 
SQLITE_IOERR
;

387 if–
rc
==
SQLITE_OK
 ){

388 
rc
 = 
	`sqlôe3OsWrôe
(
pFd
->
pRól
, 
zBuf
, 
iAmt
, 
iOf°
);

390  
rc
;

391 
	}
}

396 
	$tvfsTrunˇã
(
sqlôe3_fûe
 *
pFûe
, 
sqlôe_öt64
 
size
){

397 
rc
 = 
SQLITE_OK
;

398 
Te°vfsFd
 *
pFd
 = 
	`tvfsGëFd
(
pFûe
);

399 
Te°vfs
 *
p
 = (Te°vf†*)
pFd
->
pVfs
->
pAµD©a
;

401 if–
p
->
pS¸ùt
 &&Ö->
mask
&
TESTVFS_TRUNCATE_MASK
 ){

402 
	`tvfsExecT˛
(
p
, "xTruncate",

403 
	`T˛_NewSåögObj
(
pFd
->
zFûíame
, -1),ÖFd->
pShmId
, 0, 0

405 
	`tvfsResu…Code
(
p
, &
rc
);

408 if–
rc
==
SQLITE_OK
 ){

409 
rc
 = 
	`sqlôe3OsTrunˇã
(
pFd
->
pRól
, 
size
);

411  
rc
;

412 
	}
}

417 
	$tvfsSync
(
sqlôe3_fûe
 *
pFûe
, 
Êags
){

418 
rc
 = 
SQLITE_OK
;

419 
Te°vfsFd
 *
pFd
 = 
	`tvfsGëFd
(
pFûe
);

420 
Te°vfs
 *
p
 = (Te°vf†*)
pFd
->
pVfs
->
pAµD©a
;

422 if–
p
->
pS¸ùt
 &&Ö->
mask
&
TESTVFS_SYNC_MASK
 ){

423 *
zFœgs
 = 0;

425  
Êags
 ){

426 
SQLITE_SYNC_NORMAL
:

427 
zFœgs
 = "normal";

429 
SQLITE_SYNC_FULL
:

430 
zFœgs
 = "full";

432 
SQLITE_SYNC_NORMAL
|
SQLITE_SYNC_DATAONLY
:

433 
zFœgs
 = "normal|dataonly";

435 
SQLITE_SYNC_FULL
|
SQLITE_SYNC_DATAONLY
:

436 
zFœgs
 = "full|dataonly";

439 
	`as£π
(0);

442 
	`tvfsExecT˛
(
p
, "xSync",

443 
	`T˛_NewSåögObj
(
pFd
->
zFûíame
, -1),ÖFd->
pShmId
,

444 
	`T˛_NewSåögObj
(
zFœgs
, -1), 0

446 
	`tvfsResu…Code
(
p
, &
rc
);

449 if–
rc
==
SQLITE_OK
 && 
	`tvfsInje˘FuŒîr
(
p
ËËr¯
SQLITE_FULL
;

451 if–
rc
==
SQLITE_OK
 ){

452 
rc
 = 
	`sqlôe3OsSync
(
pFd
->
pRól
, 
Êags
);

455  
rc
;

456 
	}
}

461 
	$tvfsFûeSize
(
sqlôe3_fûe
 *
pFûe
, 
sqlôe_öt64
 *
pSize
){

462 
Te°vfsFd
 *
p
 = 
	`tvfsGëFd
(
pFûe
);

463  
	`sqlôe3OsFûeSize
(
p
->
pRól
, 
pSize
);

464 
	}
}

469 
	$tvfsLock
(
sqlôe3_fûe
 *
pFûe
, 
eLock
){

470 
Te°vfsFd
 *
pFd
 = 
	`tvfsGëFd
(
pFûe
);

471 
Te°vfs
 *
p
 = (Te°vf†*)
pFd
->
pVfs
->
pAµD©a
;

472 if–
p
->
pS¸ùt
 &&Ö->
mask
&
TESTVFS_LOCK_MASK
 ){

473 
zLock
[30];

474 
	`sqlôe3_¢¥ötf
((
zLock
),zLock,"%d",
eLock
);

475 
	`tvfsExecT˛
(
p
, "xLock", 
	`T˛_NewSåögObj
(
pFd
->
zFûíame
, -1),

476 
	`T˛_NewSåögObj
(
zLock
, -1), 0, 0);

478  
	`sqlôe3OsLock
(
pFd
->
pRól
, 
eLock
);

479 
	}
}

484 
	$tvfsU∆ock
(
sqlôe3_fûe
 *
pFûe
, 
eLock
){

485 
Te°vfsFd
 *
pFd
 = 
	`tvfsGëFd
(
pFûe
);

486 
Te°vfs
 *
p
 = (Te°vf†*)
pFd
->
pVfs
->
pAµD©a
;

487 if–
p
->
pS¸ùt
 &&Ö->
mask
&
TESTVFS_UNLOCK_MASK
 ){

488 
zLock
[30];

489 
	`sqlôe3_¢¥ötf
((
zLock
),zLock,"%d",
eLock
);

490 
	`tvfsExecT˛
(
p
, "xU∆ock", 
	`T˛_NewSåögObj
(
pFd
->
zFûíame
, -1),

491 
	`T˛_NewSåögObj
(
zLock
, -1), 0, 0);

493 if–
p
->
mask
&
TESTVFS_WRITE_MASK
 && 
	`tvfsInje˘I€º
(p) ){

494  
SQLITE_IOERR_UNLOCK
;

496  
	`sqlôe3OsU∆ock
(
pFd
->
pRól
, 
eLock
);

497 
	}
}

502 
	$tvfsCheckRe£rvedLock
(
sqlôe3_fûe
 *
pFûe
, *
pResOut
){

503 
Te°vfsFd
 *
pFd
 = 
	`tvfsGëFd
(
pFûe
);

504 
Te°vfs
 *
p
 = (Te°vf†*)
pFd
->
pVfs
->
pAµD©a
;

505 if–
p
->
pS¸ùt
 &&Ö->
mask
&
TESTVFS_CKLOCK_MASK
 ){

506 
	`tvfsExecT˛
(
p
, "xCheckRe£rvedLock", 
	`T˛_NewSåögObj
(
pFd
->
zFûíame
, -1),

509  
	`sqlôe3OsCheckRe£rvedLock
(
pFd
->
pRól
, 
pResOut
);

510 
	}
}

515 
	$tvfsFûeC⁄åﬁ
(
sqlôe3_fûe
 *
pFûe
, 
›
, *
pArg
){

516 
Te°vfsFd
 *
p
 = 
	`tvfsGëFd
(
pFûe
);

517 if–
›
==
SQLITE_FCNTL_PRAGMA
 ){

518 **
¨gv
 = (**)
pArg
;

519 if–
	`sqlôe3_°ricmp
(
¨gv
[1],"error")==0 ){

520 
rc
 = 
SQLITE_ERROR
;

521 if–
¨gv
[2] ){

522 c⁄° *
z
 = 
¨gv
[2];

523 
x
 = 
	`©oi
(
z
);

524 if–
x
 ){

525 
rc
 = 
x
;

526  
	`sqlôe3Isdigô
(
z
[0]) ){ z++; }

527  
	`sqlôe3Is•a˚
(
z
[0]) ){ z++; }

529 if–
z
[0] ) 
¨gv
[0] = 
	`sqlôe3_m¥ötf
("%s", z);

531  
rc
;

533 if–
	`sqlôe3_°ricmp
(
¨gv
[1], "filename")==0 ){

534 
¨gv
[0] = 
	`sqlôe3_m¥ötf
("%s", 
p
->
zFûíame
);

535  
SQLITE_OK
;

538  
	`sqlôe3OsFûeC⁄åﬁ
(
p
->
pRól
, 
›
, 
pArg
);

539 
	}
}

544 
	$tvfsSe˘‹Size
(
sqlôe3_fûe
 *
pFûe
){

545 
Te°vfsFd
 *
pFd
 = 
	`tvfsGëFd
(
pFûe
);

546 
Te°vfs
 *
p
 = (Te°vf†*)
pFd
->
pVfs
->
pAµD©a
;

547 if–
p
->
iSe˘‹size
>=0 ){

548  
p
->
iSe˘‹size
;

550  
	`sqlôe3OsSe˘‹Size
(
pFd
->
pRól
);

551 
	}
}

556 
	$tvfsDevi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
 *
pFûe
){

557 
Te°vfsFd
 *
pFd
 = 
	`tvfsGëFd
(
pFûe
);

558 
Te°vfs
 *
p
 = (Te°vf†*)
pFd
->
pVfs
->
pAµD©a
;

559 if–
p
->
iDevch¨
>=0 ){

560  
p
->
iDevch¨
;

562  
	`sqlôe3OsDevi˚Ch¨a˘îi°ics
(
pFd
->
pRól
);

563 
	}
}

568 
	$tvfsO≥n
(

569 
sqlôe3_vfs
 *
pVfs
,

570 c⁄° *
zName
,

571 
sqlôe3_fûe
 *
pFûe
,

572 
Êags
,

573 *
pOutFœgs


575 
rc
;

576 
Te°vfsFûe
 *
pTe°fûe
 = (Te°vfsFûê*)
pFûe
;

577 
Te°vfsFd
 *
pFd
;

578 
T˛_Obj
 *
pId
 = 0;

579 
Te°vfs
 *
p
 = (Te°vf†*)
pVfs
->
pAµD©a
;

581 
pFd
 = (
Te°vfsFd
 *)
	`ckÆloc
((Te°vfsFdË+ 
	`PARENTVFS
(
pVfs
)->
szOsFûe
);

582 
	`mem£t
(
pFd
, 0, (
Te°vfsFd
Ë+ 
	`PARENTVFS
(
pVfs
)->
szOsFûe
);

583 
pFd
->
pShm
 = 0;

584 
pFd
->
pShmId
 = 0;

585 
pFd
->
zFûíame
 = 
zName
;

586 
pFd
->
pVfs
 =ÖVfs;

587 
pFd
->
pRól
 = (
sqlôe3_fûe
 *)&pFd[1];

588 
	`mem£t
(
pTe°fûe
, 0, (
Te°vfsFûe
));

589 
pTe°fûe
->
pFd
 =ÖFd;

600 
	`T˛_Re£tResu…
(
p
->
öãΩ
);

601 if–
p
->
pS¸ùt
 &&Ö->
mask
&
TESTVFS_OPEN_MASK
 ){

602 
T˛_Obj
 *
pArg
 = 
	`T˛_NewObj
();

603 
	`T˛_In¸RefCou¡
(
pArg
);

604 if–
Êags
&
SQLITE_OPEN_MAIN_DB
 ){

605 c⁄° *
z
 = &
zName
[
	`°æí
(zName)+1];

606  *
z
 ){

607 
	`T˛_Li°ObjAµídEÀmít
(0, 
pArg
, 
	`T˛_NewSåögObj
(
z
, -1));

608 
z
 +
	`°æí
(z) + 1;

609 
	`T˛_Li°ObjAµídEÀmít
(0, 
pArg
, 
	`T˛_NewSåögObj
(
z
, -1));

610 
z
 +
	`°æí
(z) + 1;

613 
	`tvfsExecT˛
(
p
, "xO≥n", 
	`T˛_NewSåögObj
(
pFd
->
zFûíame
, -1), 
pArg
, 0, 0);

614 
	`T˛_De¸RefCou¡
(
pArg
);

615 if–
	`tvfsResu…Code
(
p
, &
rc
) ){

616 if–
rc
!=
SQLITE_OK
 ) Ñc;

618 
pId
 = 
	`T˛_GëObjResu…
(
p
->
öãΩ
);

622 if–(
p
->
mask
&
TESTVFS_OPEN_MASK
Ë&& 
	`tvfsInje˘I€º
’ËË 
SQLITE_IOERR
;

623 if–
	`tvfsInje˘C™t›íîr
(
p
ËË 
SQLITE_CANTOPEN
;

624 if–
	`tvfsInje˘FuŒîr
(
p
ËË 
SQLITE_FULL
;

626 if–!
pId
 ){

627 
pId
 = 
	`T˛_NewSåögObj
("anon", -1);

629 
	`T˛_In¸RefCou¡
(
pId
);

630 
pFd
->
pShmId
 = 
pId
;

631 
	`T˛_Re£tResu…
(
p
->
öãΩ
);

633 
rc
 = 
	`sqlôe3OsO≥n
(
	`PARENTVFS
(
pVfs
), 
zName
, 
pFd
->
pRól
, 
Êags
, 
pOutFœgs
);

634 if–
pFd
->
pRól
->
pMëhods
 ){

635 
sqlôe3_io_mëhods
 *
pMëhods
;

636 
nByã
;

638 if–
pVfs
->
iVîsi⁄
>1 ){

639 
nByã
 = (
sqlôe3_io_mëhods
);

641 
nByã
 = 
	`off£tof
(
sqlôe3_io_mëhods
, 
xShmM≠
);

644 
pMëhods
 = (
sqlôe3_io_mëhods
 *)
	`ckÆloc
(
nByã
);

645 
	`mem˝y
(
pMëhods
, &
tvfs_io_mëhods
, 
nByã
);

646 
pMëhods
->
iVîsi⁄
 = 
pFd
->
pRól
->pMethods->iVersion;

647 if–
pMëhods
->
iVîsi⁄
>
pVfs
->iVersion ){

648 
pMëhods
->
iVîsi⁄
 = 
pVfs
->iVersion;

650 if–
pVfs
->
iVîsi⁄
>1 && ((
Te°vfs
 *ÌVfs->
pAµD©a
)->
isNoshm
 ){

651 
pMëhods
->
xShmUnm≠
 = 0;

652 
pMëhods
->
xShmLock
 = 0;

653 
pMëhods
->
xShmB¨rõr
 = 0;

654 
pMëhods
->
xShmM≠
 = 0;

656 
pFûe
->
pMëhods
 =ÖMethods;

659  
rc
;

660 
	}
}

667 
	$tvfsDñëe
(
sqlôe3_vfs
 *
pVfs
, c⁄° *
zP©h
, 
dúSync
){

668 
rc
 = 
SQLITE_OK
;

669 
Te°vfs
 *
p
 = (Te°vf†*)
pVfs
->
pAµD©a
;

671 if–
p
->
pS¸ùt
 &&Ö->
mask
&
TESTVFS_DELETE_MASK
 ){

672 
	`tvfsExecT˛
(
p
, "xDelete",

673 
	`T˛_NewSåögObj
(
zP©h
, -1), 
	`T˛_NewI¡Obj
(
dúSync
), 0, 0

675 
	`tvfsResu…Code
(
p
, &
rc
);

677 if–
rc
==
SQLITE_OK
 ){

678 
rc
 = 
	`sqlôe3OsDñëe
(
	`PARENTVFS
(
pVfs
), 
zP©h
, 
dúSync
);

680  
rc
;

681 
	}
}

687 
	$tvfsAc˚ss
(

688 
sqlôe3_vfs
 *
pVfs
,

689 c⁄° *
zP©h
,

690 
Êags
,

691 *
pResOut


693 
Te°vfs
 *
p
 = (Te°vf†*)
pVfs
->
pAµD©a
;

694 if–
p
->
pS¸ùt
 &&Ö->
mask
&
TESTVFS_ACCESS_MASK
 ){

695 
rc
;

696 *
zArg
 = 0;

697 if–
Êags
==
SQLITE_ACCESS_EXISTS
 ) 
zArg
 = "SQLITE_ACCESS_EXISTS";

698 if–
Êags
==
SQLITE_ACCESS_READWRITE
 ) 
zArg
 = "SQLITE_ACCESS_READWRITE";

699 if–
Êags
==
SQLITE_ACCESS_READ
 ) 
zArg
 = "SQLITE_ACCESS_READ";

700 
	`tvfsExecT˛
(
p
, "xAccess",

701 
	`T˛_NewSåögObj
(
zP©h
, -1), T˛_NewSåögObj(
zArg
, -1), 0, 0

703 if–
	`tvfsResu…Code
(
p
, &
rc
) ){

704 if–
rc
!=
SQLITE_OK
 ) Ñc;

706 
T˛_I¡îp
 *
öãΩ
 = 
p
->interp;

707 if–
TCL_OK
==
	`T˛_GëBoﬁónFromObj
(0, 
	`T˛_GëObjResu…
(
öãΩ
), 
pResOut
) ){

708  
SQLITE_OK
;

712  
	`sqlôe3OsAc˚ss
(
	`PARENTVFS
(
pVfs
), 
zP©h
, 
Êags
, 
pResOut
);

713 
	}
}

720 
	$tvfsFuŒP©h«me
(

721 
sqlôe3_vfs
 *
pVfs
,

722 c⁄° *
zP©h
,

723 
nOut
,

724 *
zOut


726 
Te°vfs
 *
p
 = (Te°vf†*)
pVfs
->
pAµD©a
;

727 if–
p
->
pS¸ùt
 &&Ö->
mask
&
TESTVFS_FULLPATHNAME_MASK
 ){

728 
rc
;

729 
	`tvfsExecT˛
(
p
, "xFuŒP©h«me", 
	`T˛_NewSåögObj
(
zP©h
, -1), 0, 0, 0);

730 if–
	`tvfsResu…Code
(
p
, &
rc
) ){

731 if–
rc
!=
SQLITE_OK
 ) Ñc;

734  
	`sqlôe3OsFuŒP©h«me
(
	`PARENTVFS
(
pVfs
), 
zP©h
, 
nOut
, 
zOut
);

735 
	}
}

737 #i‚de‡
SQLITE_OMIT_LOAD_EXTENSION


741 *
	$tvfsDlO≥n
(
sqlôe3_vfs
 *
pVfs
, c⁄° *
zP©h
){

742  
	`sqlôe3OsDlO≥n
(
	`PARENTVFS
(
pVfs
), 
zP©h
);

743 
	}
}

750 
	$tvfsDlEº‹
(
sqlôe3_vfs
 *
pVfs
, 
nByã
, *
zEºMsg
){

751 
	`sqlôe3OsDlEº‹
(
	`PARENTVFS
(
pVfs
), 
nByã
, 
zEºMsg
);

752 
	}
}

757 (*
	$tvfsDlSym
(
sqlôe3_vfs
 *
pVfs
, *
p
, c⁄° *
zSym
))(){

758  
	`sqlôe3OsDlSym
(
	`PARENTVFS
(
pVfs
), 
p
, 
zSym
);

759 
	}
}

764 
	$tvfsDlClo£
(
sqlôe3_vfs
 *
pVfs
, *
pH™dÀ
){

765 
	`sqlôe3OsDlClo£
(
	`PARENTVFS
(
pVfs
), 
pH™dÀ
);

766 
	}
}

773 
	$tvfsR™dom√ss
(
sqlôe3_vfs
 *
pVfs
, 
nByã
, *
zBufOut
){

774  
	`sqlôe3OsR™dom√ss
(
	`PARENTVFS
(
pVfs
), 
nByã
, 
zBufOut
);

775 
	}
}

781 
	$tvfsSÀï
(
sqlôe3_vfs
 *
pVfs
, 
nMi¸o
){

782  
	`sqlôe3OsSÀï
(
	`PARENTVFS
(
pVfs
), 
nMi¸o
);

783 
	}
}

788 
	$tvfsCuºítTime
(
sqlôe3_vfs
 *
pVfs
, *
pTimeOut
){

789  
	`PARENTVFS
(
pVfs
)->
	`xCuºítTime
(PARENTVFS’Vfs), 
pTimeOut
);

790 
	}
}

792 
	$tvfsShmO≥n
(
sqlôe3_fûe
 *
pFûe
){

793 
Te°vfs
 *
p
;

794 
rc
 = 
SQLITE_OK
;

795 
Te°vfsBuf„r
 *
pBuf„r
;

796 
Te°vfsFd
 *
pFd
;

798 
pFd
 = 
	`tvfsGëFd
(
pFûe
);

799 
p
 = (
Te°vfs
 *)
pFd
->
pVfs
->
pAµD©a
;

800 
	`as£π
–0==
p
->
isFuŒshm
 );

801 
	`as£π
–
pFd
->
pShmId
 &&ÖFd->
pShm
==0 &&ÖFd->
pNext
==0 );

807 
	`T˛_Re£tResu…
(
p
->
öãΩ
);

808 if–
p
->
pS¸ùt
 &&Ö->
mask
&
TESTVFS_SHMOPEN_MASK
 ){

809 
	`tvfsExecT˛
(
p
, "xShmO≥n", 
	`T˛_NewSåögObj
(
pFd
->
zFûíame
, -1), 0, 0, 0);

810 if–
	`tvfsResu…Code
(
p
, &
rc
) ){

811 if–
rc
!=
SQLITE_OK
 ) Ñc;

815 
	`as£π
–
rc
==
SQLITE_OK
 );

816 if–
p
->
mask
&
TESTVFS_SHMOPEN_MASK
 && 
	`tvfsInje˘I€º
(p) ){

817  
SQLITE_IOERR
;

821 
pBuf„r
=
p
->pBuf„r;ÖBuf„r;ÖBuf„rıBuf„r->
pNext
){

822 if–0==
	`°rcmp
(
pFd
->
zFûíame
, 
pBuf„r
->
zFûe
) ) ;

824 if–!
pBuf„r
 ){

825 
szName
 = ()
	`°æí
(
pFd
->
zFûíame
);

826 
nByã
 = (
Te°vfsBuf„r
Ë+ 
szName
 + 1;

827 
pBuf„r
 = (
Te°vfsBuf„r
 *)
	`ckÆloc
(
nByã
);

828 
	`mem£t
(
pBuf„r
, 0, 
nByã
);

829 
pBuf„r
->
zFûe
 = (*)&pBuffer[1];

830 
	`mem˝y
(
pBuf„r
->
zFûe
, 
pFd
->
zFûíame
, 
szName
+1);

831 
pBuf„r
->
pNext
 = 
p
->pBuffer;

832 
p
->
pBuf„r
 =ÖBuffer;

836 
pFd
->
pNext
 = 
pBuf„r
->
pFûe
;

837 
pBuf„r
->
pFûe
 = 
pFd
;

838 
pFd
->
pShm
 = 
pBuf„r
;

839  
SQLITE_OK
;

840 
	}
}

842 
	$tvfsAŒocPage
(
Te°vfsBuf„r
 *
p
, 
iPage
, 
pgsz
){

843 
	`as£π
–
iPage
<
TESTVFS_MAX_PAGES
 );

844 if–
p
->
aPage
[
iPage
]==0 ){

845 
p
->
aPage
[
iPage
] = (
u8
 *)
	`ckÆloc
(
pgsz
);

846 
	`mem£t
(
p
->
aPage
[
iPage
], 0, 
pgsz
);

847 
p
->
pgsz
 =Ögsz;

849 
	}
}

851 
	$tvfsShmM≠
(

852 
sqlôe3_fûe
 *
pFûe
,

853 
iPage
,

854 
pgsz
,

855 
isWrôe
,

856 vﬁ©ûê**
µ


858 
rc
 = 
SQLITE_OK
;

859 
Te°vfsFd
 *
pFd
 = 
	`tvfsGëFd
(
pFûe
);

860 
Te°vfs
 *
p
 = (Te°vf†*)(
pFd
->
pVfs
->
pAµD©a
);

862 if–
p
->
isFuŒshm
 ){

863  
	`sqlôe3OsShmM≠
(
pFd
->
pRól
, 
iPage
, 
pgsz
, 
isWrôe
, 
µ
);

866 if–0==
pFd
->
pShm
 ){

867 
rc
 = 
	`tvfsShmO≥n
(
pFûe
);

868 if–
rc
!=
SQLITE_OK
 ){

869  
rc
;

873 if–
p
->
pS¸ùt
 &&Ö->
mask
&
TESTVFS_SHMMAP_MASK
 ){

874 
T˛_Obj
 *
pArg
 = 
	`T˛_NewObj
();

875 
	`T˛_In¸RefCou¡
(
pArg
);

876 
	`T˛_Li°ObjAµídEÀmít
(
p
->
öãΩ
, 
pArg
, 
	`T˛_NewI¡Obj
(
iPage
));

877 
	`T˛_Li°ObjAµídEÀmít
(
p
->
öãΩ
, 
pArg
, 
	`T˛_NewI¡Obj
(
pgsz
));

878 
	`T˛_Li°ObjAµídEÀmít
(
p
->
öãΩ
, 
pArg
, 
	`T˛_NewI¡Obj
(
isWrôe
));

879 
	`tvfsExecT˛
(
p
, "xShmMap",

880 
	`T˛_NewSåögObj
(
pFd
->
pShm
->
zFûe
, -1),ÖFd->
pShmId
, 
pArg
, 0

882 
	`tvfsResu…Code
(
p
, &
rc
);

883 
	`T˛_De¸RefCou¡
(
pArg
);

885 if–
rc
==
SQLITE_OK
 && 
p
->
mask
&
TESTVFS_SHMMAP_MASK
 && 
	`tvfsInje˘I€º
(p) ){

886 
rc
 = 
SQLITE_IOERR
;

889 if–
rc
==
SQLITE_OK
 && 
isWrôe
 && !
pFd
->
pShm
->
aPage
[
iPage
] ){

890 
	`tvfsAŒocPage
(
pFd
->
pShm
, 
iPage
, 
pgsz
);

892 *
µ
 = (vﬁ©ûê*)
pFd
->
pShm
->
aPage
[
iPage
];

894  
rc
;

895 
	}
}

898 
	$tvfsShmLock
(

899 
sqlôe3_fûe
 *
pFûe
,

900 
of°
,

901 
n
,

902 
Êags


904 
rc
 = 
SQLITE_OK
;

905 
Te°vfsFd
 *
pFd
 = 
	`tvfsGëFd
(
pFûe
);

906 
Te°vfs
 *
p
 = (Te°vf†*)(
pFd
->
pVfs
->
pAµD©a
);

907 
nLock
;

908 
zLock
[80];

910 if–
p
->
isFuŒshm
 ){

911  
	`sqlôe3OsShmLock
(
pFd
->
pRól
, 
of°
, 
n
, 
Êags
);

914 if–
p
->
pS¸ùt
 &&Ö->
mask
&
TESTVFS_SHMLOCK_MASK
 ){

915 
	`sqlôe3_¢¥ötf
((
zLock
), zLock, "%d %d", 
of°
, 
n
);

916 
nLock
 = ()
	`°æí
(
zLock
);

917 if–
Êags
 & 
SQLITE_SHM_LOCK
 ){

918 
	`°r˝y
(&
zLock
[
nLock
], "Üock");

920 
	`°r˝y
(&
zLock
[
nLock
], " unlock");

922 
nLock
 +()
	`°æí
(&
zLock
[nLock]);

923 if–
Êags
 & 
SQLITE_SHM_SHARED
 ){

924 
	`°r˝y
(&
zLock
[
nLock
], " shared");

926 
	`°r˝y
(&
zLock
[
nLock
], "Éxclusive");

928 
	`tvfsExecT˛
(
p
, "xShmLock",

929 
	`T˛_NewSåögObj
(
pFd
->
pShm
->
zFûe
, -1),ÖFd->
pShmId
,

930 
	`T˛_NewSåögObj
(
zLock
, -1), 0

932 
	`tvfsResu…Code
(
p
, &
rc
);

935 if–
rc
==
SQLITE_OK
 && 
p
->
mask
&
TESTVFS_SHMLOCK_MASK
 && 
	`tvfsInje˘I€º
(p) ){

936 
rc
 = 
SQLITE_IOERR
;

939 if–
rc
==
SQLITE_OK
 ){

940 
isLock
 = (
Êags
 & 
SQLITE_SHM_LOCK
);

941 
isEx˛
 = (
Êags
 & 
SQLITE_SHM_EXCLUSIVE
);

942 
u32
 
mask
 = (((1<<
n
)-1Ë<< 
of°
);

943 if–
isLock
 ){

944 
Te°vfsFd
 *
p2
;

945 
p2
=
pFd
->
pShm
->
pFûe
;Ö2;Ö2ı2->
pNext
){

946 if–
p2
==
pFd
 ) ;

947 if–(
p2
->
ex˛lock
&
mask
Ë|| (
isEx˛
 &&Ö2->
sh¨edlock
&mask) ){

948 
rc
 = 
SQLITE_BUSY
;

952 if–
rc
==
SQLITE_OK
 ){

953 if–
isEx˛
 ) 
pFd
->
ex˛lock
 |
mask
;

954 if–!
isEx˛
 ) 
pFd
->
sh¨edlock
 |
mask
;

957 if–
isEx˛
 ) 
pFd
->
ex˛lock
 &(~
mask
);

958 if–!
isEx˛
 ) 
pFd
->
sh¨edlock
 &(~
mask
);

962  
rc
;

963 
	}
}

965 
	$tvfsShmB¨rõr
(
sqlôe3_fûe
 *
pFûe
){

966 
Te°vfsFd
 *
pFd
 = 
	`tvfsGëFd
(
pFûe
);

967 
Te°vfs
 *
p
 = (Te°vf†*)(
pFd
->
pVfs
->
pAµD©a
);

969 if–
p
->
pS¸ùt
 &&Ö->
mask
&
TESTVFS_SHMBARRIER_MASK
 ){

970 c⁄° *
z
 = 
pFd
->
pShm
 ?ÖFd->pShm->
zFûe
 : "";

971 
	`tvfsExecT˛
(
p
, "xShmB¨rõr", 
	`T˛_NewSåögObj
(
z
, -1), 
pFd
->
pShmId
, 0, 0);

974 if–
p
->
isFuŒshm
 ){

975 
	`sqlôe3OsShmB¨rõr
(
pFd
->
pRól
);

978 
	}
}

980 
	$tvfsShmUnm≠
(

981 
sqlôe3_fûe
 *
pFûe
,

982 
dñëeFœg


984 
rc
 = 
SQLITE_OK
;

985 
Te°vfsFd
 *
pFd
 = 
	`tvfsGëFd
(
pFûe
);

986 
Te°vfs
 *
p
 = (Te°vf†*)(
pFd
->
pVfs
->
pAµD©a
);

987 
Te°vfsBuf„r
 *
pBuf„r
 = 
pFd
->
pShm
;

988 
Te°vfsFd
 **
µFd
;

990 if–
p
->
isFuŒshm
 ){

991  
	`sqlôe3OsShmUnm≠
(
pFd
->
pRól
, 
dñëeFœg
);

994 if–!
pBuf„r
 )  
SQLITE_OK
;

995 
	`as£π
–
pFd
->
pShmId
 &&ÖFd->
pShm
 );

997 if–
p
->
pS¸ùt
 &&Ö->
mask
&
TESTVFS_SHMCLOSE_MASK
 ){

998 
	`tvfsExecT˛
(
p
, "xShmUnmap",

999 
	`T˛_NewSåögObj
(
pFd
->
pShm
->
zFûe
, -1),ÖFd->
pShmId
, 0, 0

1001 
	`tvfsResu…Code
(
p
, &
rc
);

1004 
µFd
=&
pBuf„r
->
pFûe
; *µFd!=
pFd
;ÖpFd=&((*µFd)->
pNext
));

1005 
	`as£π
–(*
µFd
)==
pFd
 );

1006 *
µFd
 = 
pFd
->
pNext
;

1007 
pFd
->
pNext
 = 0;

1009 if–
pBuf„r
->
pFûe
==0 ){

1010 
i
;

1011 
Te°vfsBuf„r
 **
µ
;

1012 
µ
=&
p
->
pBuf„r
; *µ!ıBuf„r;Öp=&((*µ)->
pNext
));

1013 *
µ
 = (*µ)->
pNext
;

1014 
i
=0; 
pBuf„r
->
aPage
[i]; i++){

1015 
	`ck‰ì
((*)
pBuf„r
->
aPage
[
i
]);

1017 
	`ck‰ì
((*)
pBuf„r
);

1019 
pFd
->
pShm
 = 0;

1021  
rc
;

1022 
	}
}

1024 
	$tvfsFëch
(

1025 
sqlôe3_fûe
 *
pFûe
,

1026 
sqlôe3_öt64
 
iOf°
,

1027 
iAmt
,

1028 **
µ


1030 
Te°vfsFd
 *
pFd
 = 
	`tvfsGëFd
(
pFûe
);

1031  
	`sqlôe3OsFëch
(
pFd
->
pRól
, 
iOf°
, 
iAmt
, 
µ
);

1032 
	}
}

1034 
	$tvfsUn„tch
(
sqlôe3_fûe
 *
pFûe
, 
sqlôe3_öt64
 
iOf°
, *
p
){

1035 
Te°vfsFd
 *
pFd
 = 
	`tvfsGëFd
(
pFûe
);

1036  
	`sqlôe3OsUn„tch
(
pFd
->
pRól
, 
iOf°
, 
p
);

1037 
	}
}

1039 
	$ã°vfs_obj_cmd
(

1040 
Clõ¡D©a
 
cd
,

1041 
T˛_I¡îp
 *
öãΩ
,

1042 
objc
,

1043 
T˛_Obj
 *
CONST
 
objv
[]

1045 
Te°vfs
 *
p
 = (Te°vf†*)
cd
;

1047 
	eDB_íum
 {

1048 
CMD_SHM
, 
CMD_DELETE
, 
CMD_FILTER
, 
CMD_IOERR
, 
CMD_SCRIPT
,

1049 
CMD_DEVCHAR
, 
CMD_SECTORSIZE
, 
CMD_FULLERR
, 
CMD_CANTOPENERR


1051 
	sTe°vfsSubcmd
 {

1052 *
zName
;

1053 
DB_íum
 
eCmd
;

1054 } 
aSubcmd
[] = {

1055 { "shm", 
CMD_SHM
 },

1056 { "dñëe", 
CMD_DELETE
 },

1057 { "fûãr", 
CMD_FILTER
 },

1058 { "i€º", 
CMD_IOERR
 },

1059 { "fuŒîr", 
CMD_FULLERR
 },

1060 { "ˇ¡›íîr", 
CMD_CANTOPENERR
 },

1061 { "s¸ùt", 
CMD_SCRIPT
 },

1062 { "devch¨", 
CMD_DEVCHAR
 },

1063 { "£˘‹size", 
CMD_SECTORSIZE
 },

1066 
i
;

1068 if–
objc
<2 ){

1069 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "SUBCOMMAND ...");

1070  
TCL_ERROR
;

1072 if–
	`T˛_GëIndexFromObjSåu˘
(

1073 
öãΩ
, 
objv
[1], 
aSubcmd
, ◊Subcmd[0]), "subcomm™d", 0, &
i
)

1075  
TCL_ERROR
;

1077 
	`T˛_Re£tResu…
(
öãΩ
);

1079  
aSubcmd
[
i
].
eCmd
 ){

1080 
CMD_SHM
: {

1081 
T˛_Obj
 *
pObj
;

1082 
rc
;

1083 
Te°vfsBuf„r
 *
pBuf„r
;

1084 *
zName
;

1085 if–
objc
!=3 && objc!=4 ){

1086 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "FILE ?VALUE?");

1087  
TCL_ERROR
;

1089 
zName
 = 
	`ckÆloc
(
p
->
pP¨ít
->
mxP©h«me
);

1090 
rc
 = 
p
->
pP¨ít
->
	`xFuŒP©h«me
(

1091 
p
->
pP¨ít
, 
	`T˛_GëSåög
(
objv
[2]),

1092 
p
->
pP¨ít
->
mxP©h«me
, 
zName


1094 if–
rc
!=
SQLITE_OK
 ){

1095 
	`T˛_AµídResu…
(
öãΩ
, "failedÅo get fullÖath: ",

1096 
	`T˛_GëSåög
(
objv
[2]), 0);

1097 
	`ck‰ì
(
zName
);

1098  
TCL_ERROR
;

1100 
pBuf„r
=
p
->pBuf„r;ÖBuf„r;ÖBuf„rıBuf„r->
pNext
){

1101 if–0==
	`°rcmp
(
pBuf„r
->
zFûe
, 
zName
) ) ;

1103 
	`ck‰ì
(
zName
);

1104 if–!
pBuf„r
 ){

1105 
	`T˛_AµídResu…
(
öãΩ
, "nÿsuch fûe: ", 
	`T˛_GëSåög
(
objv
[2]), 0);

1106  
TCL_ERROR
;

1108 if–
objc
==4 ){

1109 
n
;

1110 
u8
 *
a
 = 
	`T˛_GëByãAºayFromObj
(
objv
[3], &
n
);

1111 
pgsz
 = 
pBuf„r
->pgsz;

1112 if–
pgsz
==0 )Ögsz = 65536;

1113 
i
=0; i*
pgsz
<
n
; i++){

1114 
nByã
 = 
pgsz
;

1115 
	`tvfsAŒocPage
(
pBuf„r
, 
i
, 
pgsz
);

1116 if–
n
-
i
*
pgsz
<pgsz ){

1117 
nByã
 = 
n
;

1119 
	`mem˝y
(
pBuf„r
->
aPage
[
i
], &
a
[i*
pgsz
], 
nByã
);

1123 
pObj
 = 
	`T˛_NewObj
();

1124 
i
=0; 
pBuf„r
->
aPage
[i]; i++){

1125 
pgsz
 = 
pBuf„r
->pgsz;

1126 if–
pgsz
==0 )Ögsz = 65536;

1127 
	`T˛_AµídObjToObj
(
pObj
, 
	`T˛_NewByãAºayObj
(
pBuf„r
->
aPage
[
i
], 
pgsz
));

1129 
	`T˛_SëObjResu…
(
öãΩ
, 
pObj
);

1137 
CMD_FILTER
: {

1138 
	sVfsMëhod
 {

1139 *
zName
;

1140 
mask
;

1141 } 
vfsmëhod
 [] = {

1142 { "xShmO≥n", 
TESTVFS_SHMOPEN_MASK
 },

1143 { "xShmLock", 
TESTVFS_SHMLOCK_MASK
 },

1144 { "xShmB¨rõr", 
TESTVFS_SHMBARRIER_MASK
 },

1145 { "xShmUnm≠", 
TESTVFS_SHMCLOSE_MASK
 },

1146 { "xShmM≠", 
TESTVFS_SHMMAP_MASK
 },

1147 { "xSync", 
TESTVFS_SYNC_MASK
 },

1148 { "xDñëe", 
TESTVFS_DELETE_MASK
 },

1149 { "xWrôe", 
TESTVFS_WRITE_MASK
 },

1150 { "xRód", 
TESTVFS_READ_MASK
 },

1151 { "xTrunˇã", 
TESTVFS_TRUNCATE_MASK
 },

1152 { "xO≥n", 
TESTVFS_OPEN_MASK
 },

1153 { "xClo£", 
TESTVFS_CLOSE_MASK
 },

1154 { "xAc˚ss", 
TESTVFS_ACCESS_MASK
 },

1155 { "xFuŒP©h«me", 
TESTVFS_FULLPATHNAME_MASK
 },

1156 { "xU∆ock", 
TESTVFS_UNLOCK_MASK
 },

1157 { "xLock", 
TESTVFS_LOCK_MASK
 },

1158 { "xCheckRe£rvedLock", 
TESTVFS_CKLOCK_MASK
 },

1160 
T˛_Obj
 **
≠EÀm
 = 0;

1161 
nEÀm
 = 0;

1162 
mask
 = 0;

1163 if–
objc
!=3 ){

1164 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "LIST");

1165  
TCL_ERROR
;

1167 if–
	`T˛_Li°ObjGëEÀmíts
(
öãΩ
, 
objv
[2], &
nEÀm
, &
≠EÀm
) ){

1168  
TCL_ERROR
;

1170 
	`T˛_Re£tResu…
(
öãΩ
);

1171 
i
=0; i<
nEÀm
; i++){

1172 
iMëhod
;

1173 *
zEÀm
 = 
	`T˛_GëSåög
(
≠EÀm
[
i
]);

1174 
iMëhod
=0; iMëhod<
	`AºaySize
(
vfsmëhod
); iMethod++){

1175 if–
	`°rcmp
(
zEÀm
, 
vfsmëhod
[
iMëhod
].
zName
)==0 ){

1176 
mask
 |
vfsmëhod
[
iMëhod
].mask;

1180 if–
iMëhod
==
	`AºaySize
(
vfsmëhod
) ){

1181 
	`T˛_AµídResu…
(
öãΩ
, "unknow¿mëhod: ", 
zEÀm
, 0);

1182  
TCL_ERROR
;

1185 
p
->
mask
 = mask;

1195 
CMD_SCRIPT
: {

1196 if–
objc
==3 ){

1197 
nByã
;

1198 if–
p
->
pS¸ùt
 ){

1199 
	`T˛_De¸RefCou¡
(
p
->
pS¸ùt
);

1200 
p
->
pS¸ùt
 = 0;

1202 
	`T˛_GëSåögFromObj
(
objv
[2], &
nByã
);

1203 if–
nByã
>0 ){

1204 
p
->
pS¸ùt
 = 
	`T˛_Du∂iˇãObj
(
objv
[2]);

1205 
	`T˛_In¸RefCou¡
(
p
->
pS¸ùt
);

1207 }if–
objc
!=2 ){

1208 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?SCRIPT?");

1209  
TCL_ERROR
;

1212 
	`T˛_Re£tResu…
(
öãΩ
);

1213 if–
p
->
pS¸ùt
 ) 
	`T˛_SëObjResu…
(
öãΩ
,Ö->pScript);

1223 
CMD_CANTOPENERR
:

1224 
CMD_IOERR
:

1225 
CMD_FULLERR
: {

1226 
Te°Fau…Inje˘
 *
pTe°
 = 0;

1227 
iRë
;

1229  
aSubcmd
[
i
].
eCmd
 ){

1230 
CMD_IOERR
: 
pTe°
 = &
p
->
i€º_îr
; ;

1231 
CMD_FULLERR
: 
pTe°
 = &
p
->
fuŒ_îr
; ;

1232 
CMD_CANTOPENERR
: 
pTe°
 = &
p
->
ˇ¡›í_îr
; ;

1233 : 
	`as£π
(0);

1235 
iRë
 = 
pTe°
->
nFaû
;

1236 
pTe°
->
nFaû
 = 0;

1237 
pTe°
->
eFau…
 = 0;

1238 
pTe°
->
iC¡
 = 0;

1240 if–
objc
==4 ){

1241 
iC¡
, 
iPîsi°
;

1242 if–
TCL_OK
!=
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
iC¡
)

1243 || 
TCL_OK
!=
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[3], &
iPîsi°
)

1245  
TCL_ERROR
;

1247 
pTe°
->
eFau…
 = 
iPîsi°
?
FAULT_INJECT_PERSISTENT
:
FAULT_INJECT_TRANSIENT
;

1248 
pTe°
->
iC¡
 = iCnt;

1249 }if–
objc
!=2 ){

1250 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?CNT PERSIST?");

1251  
TCL_ERROR
;

1253 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
iRë
));

1257 
CMD_DELETE
: {

1258 
	`T˛_DñëeComm™d
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[0]));

1262 
CMD_DEVCHAR
: {

1263 
	sDevi˚Fœg
 {

1264 *
zName
;

1265 
iVÆue
;

1266 } 
aFœg
[] = {

1268 { "©omic", 
SQLITE_IOCAP_ATOMIC
 },

1269 { "©omic512", 
SQLITE_IOCAP_ATOMIC512
 },

1270 { "©omic1k", 
SQLITE_IOCAP_ATOMIC1K
 },

1271 { "©omic2k", 
SQLITE_IOCAP_ATOMIC2K
 },

1272 { "©omic4k", 
SQLITE_IOCAP_ATOMIC4K
 },

1273 { "©omic8k", 
SQLITE_IOCAP_ATOMIC8K
 },

1274 { "©omic16k", 
SQLITE_IOCAP_ATOMIC16K
 },

1275 { "©omic32k", 
SQLITE_IOCAP_ATOMIC32K
 },

1276 { "©omic64k", 
SQLITE_IOCAP_ATOMIC64K
 },

1277 { "£quítül", 
SQLITE_IOCAP_SEQUENTIAL
 },

1278 { "ß„_≠≥nd", 
SQLITE_IOCAP_SAFE_APPEND
 },

1279 { "undñëabÀ_whí_›í", 
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN
 },

1280 { "powîß„_ovîwrôe", 
SQLITE_IOCAP_POWERSAFE_OVERWRITE
 },

1281 { "immuèbÀ", 
SQLITE_IOCAP_IMMUTABLE
 },

1284 
T˛_Obj
 *
pRë
;

1285 
iFœg
;

1287 if–
objc
>3 ){

1288 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?ATTR-LIST?");

1289  
TCL_ERROR
;

1291 if–
objc
==3 ){

1292 
j
;

1293 
iNew
 = 0;

1294 
T˛_Obj
 **
Êags
 = 0;

1295 
nFœgs
 = 0;

1297 if–
	`T˛_Li°ObjGëEÀmíts
(
öãΩ
, 
objv
[2], &
nFœgs
, &
Êags
) ){

1298  
TCL_ERROR
;

1301 
j
=0; j<
nFœgs
; j++){

1302 
idx
 = 0;

1303 if–
	`T˛_GëIndexFromObjSåu˘
(
öãΩ
, 
Êags
[
j
], 
aFœg
,

1304 (
aFœg
[0]), "Êag", 0, &
idx
)

1306  
TCL_ERROR
;

1308 if–
aFœg
[
idx
].
iVÆue
<0 && 
nFœgs
>1 ){

1309 
	`T˛_AµídResu…
(
öãΩ
, "bad fœgs: ", 
	`T˛_GëSåög
(
objv
[2]), 0);

1310  
TCL_ERROR
;

1312 
iNew
 |
aFœg
[
idx
].
iVÆue
;

1315 
p
->
iDevch¨
 = 
iNew
| 0x10000000;

1318 
pRë
 = 
	`T˛_NewObj
();

1319 
iFœg
=0; iFœg<(
aFœg
)/(aFlag[0]); iFlag++){

1320 if–
p
->
iDevch¨
 & 
aFœg
[
iFœg
].
iVÆue
 ){

1321 
	`T˛_Li°ObjAµídEÀmít
(

1322 
öãΩ
, 
pRë
, 
	`T˛_NewSåögObj
(
aFœg
[
iFœg
].
zName
, -1)

1326 
	`T˛_SëObjResu…
(
öãΩ
, 
pRë
);

1331 
CMD_SECTORSIZE
: {

1332 if–
objc
>3 ){

1333 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?VALUE?");

1334  
TCL_ERROR
;

1336 if–
objc
==3 ){

1337 
iNew
 = 0;

1338 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
iNew
) ){

1339  
TCL_ERROR
;

1341 
p
->
iSe˘‹size
 = 
iNew
;

1343 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
p
->
iSe˘‹size
));

1348  
TCL_OK
;

1349 
	}
}

1351 
	$ã°vfs_obj_dñ
(
Clõ¡D©a
 
cd
){

1352 
Te°vfs
 *
p
 = (Te°vf†*)
cd
;

1353 if–
p
->
pS¸ùt
 ) 
	`T˛_De¸RefCou¡
(p->pScript);

1354 
	`sqlôe3_vfs_uƒegi°î
(
p
->
pVfs
);

1355 
	`ck‰ì
((*)
p
->
pVfs
);

1356 
	`ck‰ì
((*)
p
);

1357 
	}
}

1394 
	$ã°vfs_cmd
(

1395 
Clõ¡D©a
 
cd
,

1396 
T˛_I¡îp
 *
öãΩ
,

1397 
objc
,

1398 
T˛_Obj
 *
CONST
 
objv
[]

1400 
sqlôe3_vfs
 
tvfs_vfs
 = {

1407 
tvfsO≥n
,

1408 
tvfsDñëe
,

1409 
tvfsAc˚ss
,

1410 
tvfsFuŒP©h«me
,

1411 #i‚de‡
SQLITE_OMIT_LOAD_EXTENSION


1412 
tvfsDlO≥n
,

1413 
tvfsDlEº‹
,

1414 
tvfsDlSym
,

1415 
tvfsDlClo£
,

1422 
tvfsR™dom√ss
,

1423 
tvfsSÀï
,

1424 
tvfsCuºítTime
,

1432 
Te°vfs
 *
p
;

1433 
sqlôe3_vfs
 *
pVfs
;

1434 *
zVfs
;

1435 
nByã
;

1437 
i
;

1438 
isNoshm
 = 0;

1439 
isFuŒshm
 = 0;

1440 
isDeÁu…
 = 0;

1441 
szOsFûe
 = 0;

1442 
mxP©h«me
 = -1;

1443 
iVîsi⁄
 = 3;

1445 if–
objc
<2 || 0!=(objc%2ËË
bad_¨gs
;

1446 
i
=2; i<
objc
; i += 2){

1447 
nSwôch
;

1448 *
zSwôch
;

1449 
zSwôch
 = 
	`T˛_GëSåögFromObj
(
objv
[
i
], &
nSwôch
);

1451 if–
nSwôch
>2 && 0==
	`°∫cmp
("-noshm", 
zSwôch
,ÇSwitch) ){

1452 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[
i
+1], &
isNoshm
) ){

1453  
TCL_ERROR
;

1455 if–
isNoshm
 ) 
isFuŒshm
 = 0;

1457 if–
nSwôch
>2 && 0==
	`°∫cmp
("-deÁu…", 
zSwôch
,ÇSwitch) ){

1458 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[
i
+1], &
isDeÁu…
) ){

1459  
TCL_ERROR
;

1462 if–
nSwôch
>2 && 0==
	`°∫cmp
("-szosfûe", 
zSwôch
,ÇSwitch) ){

1463 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[
i
+1], &
szOsFûe
) ){

1464  
TCL_ERROR
;

1467 if–
nSwôch
>2 && 0==
	`°∫cmp
("-mx∑th«me", 
zSwôch
,ÇSwitch) ){

1468 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[
i
+1], &
mxP©h«me
) ){

1469  
TCL_ERROR
;

1472 if–
nSwôch
>2 && 0==
	`°∫cmp
("-ivîsi⁄", 
zSwôch
,ÇSwitch) ){

1473 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[
i
+1], &
iVîsi⁄
) ){

1474  
TCL_ERROR
;

1477 if–
nSwôch
>2 && 0==
	`°∫cmp
("-fuŒshm", 
zSwôch
,ÇSwitch) ){

1478 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[
i
+1], &
isFuŒshm
) ){

1479  
TCL_ERROR
;

1481 if–
isFuŒshm
 ) 
isNoshm
 = 0;

1484 
bad_¨gs
;

1488 if–
szOsFûe
<(
Te°vfsFûe
) ){

1489 
szOsFûe
 = (
Te°vfsFûe
);

1492 
zVfs
 = 
	`T˛_GëSåög
(
objv
[1]);

1493 
nByã
 = (
Te°vfs
Ë+ ()
	`°æí
(
zVfs
)+1;

1494 
p
 = (
Te°vfs
 *)
	`ckÆloc
(
nByã
);

1495 
	`mem£t
(
p
, 0, 
nByã
);

1496 
p
->
iDevch¨
 = -1;

1497 
p
->
iSe˘‹size
 = -1;

1505 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
zVfs
, 
ã°vfs_obj_cmd
, 
p
, 
ã°vfs_obj_dñ
);

1506 
p
->
pP¨ít
 = 
	`sqlôe3_vfs_föd
(0);

1507 
p
->
öãΩ
 = interp;

1509 
p
->
zName
 = (*)&p[1];

1510 
	`mem˝y
(
p
->
zName
, 
zVfs
, 
	`°æí
(zVfs)+1);

1512 
pVfs
 = (
sqlôe3_vfs
 *)
	`ckÆloc
((sqlite3_vfs));

1513 
	`mem˝y
(
pVfs
, &
tvfs_vfs
, (
sqlôe3_vfs
));

1514 
pVfs
->
pAµD©a
 = (*)
p
;

1515 
pVfs
->
iVîsi⁄
 = iVersion;

1516 
pVfs
->
zName
 = 
p
->zName;

1517 
pVfs
->
mxP©h«me
 = 
p
->
pP¨ít
->mxPathname;

1518 if–
mxP©h«me
>=0 && mxP©h«me<
pVfs
->mxPathname ){

1519 
pVfs
->
mxP©h«me
 = mxPathname;

1521 
pVfs
->
szOsFûe
 = szOsFile;

1522 
p
->
pVfs
 =ÖVfs;

1523 
p
->
isNoshm
 = isNoshm;

1524 
p
->
isFuŒshm
 = isFullshm;

1525 
p
->
mask
 = 
TESTVFS_ALL_MASK
;

1527 
	`sqlôe3_vfs_ªgi°î
(
pVfs
, 
isDeÁu…
);

1529  
TCL_OK
;

1531 
bad_¨gs
:

1532 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "VFSNAME ?-noshm BOOL? ?-fullshm BOOL? ?-default BOOL? ?-mxpathname INT? ?-szosfile INT? ?-iversion INT?");

1533  
TCL_ERROR
;

1534 
	}
}

1536 
	$Sqlôëe°vfs_Inô
(
T˛_I¡îp
 *
öãΩ
){

1537 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "ã°vfs", 
ã°vfs_cmd
, 0, 0);

1538  
TCL_OK
;

1539 
	}
}

	@test_vfstrace.c

110 
	~<°dlib.h
>

111 
	~<°rög.h
>

112 
	~"sqlôe3.h
"

118 
vf°ø˚_öfo
 
	tvf°ø˚_öfo
;

119 
	svf°ø˚_öfo
 {

120 
sqlôe3_vfs
 *
	mpRoŸVfs
;

121 (*
	mxOut
)(const *, *);

122 *
	mpOutArg
;

123 c⁄° *
	mzVfsName
;

124 
sqlôe3_vfs
 *
	mpTø˚Vfs
;

130 
vf°ø˚_fûe
 
	tvf°ø˚_fûe
;

131 
	svf°ø˚_fûe
 {

132 
sqlôe3_fûe
 
	mba£
;

133 
vf°ø˚_öfo
 *
	mpInfo
;

134 c⁄° *
	mzFName
;

135 
sqlôe3_fûe
 *
	mpRól
;

141 
vf°ø˚Clo£
(
sqlôe3_fûe
*);

142 
vf°ø˚Ród
(
sqlôe3_fûe
*, *, 
iAmt
, 
sqlôe3_öt64
 
iOf°
);

143 
vf°ø˚Wrôe
(
sqlôe3_fûe
*,c⁄° *,
iAmt
, 
sqlôe3_öt64
);

144 
vf°ø˚Trunˇã
(
sqlôe3_fûe
*, 
sqlôe3_öt64
 
size
);

145 
vf°ø˚Sync
(
sqlôe3_fûe
*, 
Êags
);

146 
vf°ø˚FûeSize
(
sqlôe3_fûe
*, 
sqlôe3_öt64
 *
pSize
);

147 
vf°ø˚Lock
(
sqlôe3_fûe
*, );

148 
vf°ø˚U∆ock
(
sqlôe3_fûe
*, );

149 
vf°ø˚CheckRe£rvedLock
(
sqlôe3_fûe
*, *);

150 
vf°ø˚FûeC⁄åﬁ
(
sqlôe3_fûe
*, 
›
, *
pArg
);

151 
vf°ø˚Se˘‹Size
(
sqlôe3_fûe
*);

152 
vf°ø˚Devi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
*);

153 
vf°ø˚ShmLock
(
sqlôe3_fûe
*,,,);

154 
vf°ø˚ShmM≠
(
sqlôe3_fûe
*,,,, volatile **);

155 
vf°ø˚ShmB¨rõr
(
sqlôe3_fûe
*);

156 
vf°ø˚ShmUnm≠
(
sqlôe3_fûe
*,);

161 
vf°ø˚O≥n
(
sqlôe3_vfs
*, c⁄° *, 
sqlôe3_fûe
*, , *);

162 
vf°ø˚Dñëe
(
sqlôe3_vfs
*, c⁄° *
zName
, 
syncDú
);

163 
vf°ø˚Ac˚ss
(
sqlôe3_vfs
*, c⁄° *
zName
, 
Êags
, *);

164 
vf°ø˚FuŒP©h«me
(
sqlôe3_vfs
*, c⁄° *
zName
, , *);

165 *
vf°ø˚DlO≥n
(
sqlôe3_vfs
*, c⁄° *
zFûíame
);

166 
vf°ø˚DlEº‹
(
sqlôe3_vfs
*, 
nByã
, *
zEºMsg
);

167 (*
	$vf°ø˚DlSym
(
sqlôe3_vfs
*,*, c⁄° *
zSymbﬁ
))();

168 
	`vf°ø˚DlClo£
(
sqlôe3_vfs
*, *);

169 
	`vf°ø˚R™dom√ss
(
sqlôe3_vfs
*, 
nByã
, *
zOut
);

170 
	`vf°ø˚SÀï
(
sqlôe3_vfs
*, 
mi¸o£c⁄ds
);

171 
	`vf°ø˚CuºítTime
(
sqlôe3_vfs
*, *);

172 
	`vf°ø˚GëLa°Eº‹
(
sqlôe3_vfs
*, , *);

173 
	`vf°ø˚CuºítTimeI¡64
(
sqlôe3_vfs
*, 
sqlôe3_öt64
*);

174 
	`vf°ø˚SëSy°emCÆl
(
sqlôe3_vfs
*,c⁄° *, 
sqlôe3_sysˇŒ_±r
);

175 
sqlôe3_sysˇŒ_±r
 
	`vf°ø˚GëSy°emCÆl
(
sqlôe3_vfs
*, const *);

176 c⁄° *
	`vf°ø˚NextSy°emCÆl
(
sqlôe3_vfs
*, c⁄° *
zName
);

184 c⁄° *
	$fûeTaû
(c⁄° *
z
){

185 
i
;

186 if–
z
==0 )  0;

187 
i
 = 
	`°æí
(
z
)-1;

188  
i
>0 && 
z
[i-1]!='/' ){ i--; }

189  &
z
[
i
];

190 
	}
}

195 
	$vf°ø˚_¥ötf
(

196 
vf°ø˚_öfo
 *
pInfo
,

197 c⁄° *
zF‹m©
,

200 
va_li°
 
≠
;

201 *
zMsg
;

202 
	`va_°¨t
(
≠
, 
zF‹m©
);

203 
zMsg
 = 
	`sqlôe3_vm¥ötf
(
zF‹m©
, 
≠
);

204 
	`va_íd
(
≠
);

205 
pInfo
->
	`xOut
(
zMsg
,ÖInfo->
pOutArg
);

206 
	`sqlôe3_‰ì
(
zMsg
);

207 
	}
}

213 
	$vf°ø˚_¥öt_îrcode
(

214 
vf°ø˚_öfo
 *
pInfo
,

215 c⁄° *
zF‹m©
,

216 
rc


218 
zBuf
[50];

219 *
zVÆ
;

220  
rc
 ){

221 
SQLITE_OK
: 
zVÆ
 = "SQLITE_OK"; ;

222 
SQLITE_ERROR
: 
zVÆ
 = "SQLITE_ERROR"; ;

223 
SQLITE_PERM
: 
zVÆ
 = "SQLITE_PERM"; ;

224 
SQLITE_ABORT
: 
zVÆ
 = "SQLITE_ABORT"; ;

225 
SQLITE_BUSY
: 
zVÆ
 = "SQLITE_BUSY"; ;

226 
SQLITE_NOMEM
: 
zVÆ
 = "SQLITE_NOMEM"; ;

227 
SQLITE_READONLY
: 
zVÆ
 = "SQLITE_READONLY"; ;

228 
SQLITE_INTERRUPT
: 
zVÆ
 = "SQLITE_INTERRUPT"; ;

229 
SQLITE_IOERR
: 
zVÆ
 = "SQLITE_IOERR"; ;

230 
SQLITE_CORRUPT
: 
zVÆ
 = "SQLITE_CORRUPT"; ;

231 
SQLITE_FULL
: 
zVÆ
 = "SQLITE_FULL"; ;

232 
SQLITE_CANTOPEN
: 
zVÆ
 = "SQLITE_CANTOPEN"; ;

233 
SQLITE_PROTOCOL
: 
zVÆ
 = "SQLITE_PROTOCOL"; ;

234 
SQLITE_EMPTY
: 
zVÆ
 = "SQLITE_EMPTY"; ;

235 
SQLITE_SCHEMA
: 
zVÆ
 = "SQLITE_SCHEMA"; ;

236 
SQLITE_CONSTRAINT
: 
zVÆ
 = "SQLITE_CONSTRAINT"; ;

237 
SQLITE_MISMATCH
: 
zVÆ
 = "SQLITE_MISMATCH"; ;

238 
SQLITE_MISUSE
: 
zVÆ
 = "SQLITE_MISUSE"; ;

239 
SQLITE_NOLFS
: 
zVÆ
 = "SQLITE_NOLFS"; ;

240 
SQLITE_IOERR_READ
: 
zVÆ
 = "SQLITE_IOERR_READ"; ;

241 
SQLITE_IOERR_SHORT_READ
: 
zVÆ
 = "SQLITE_IOERR_SHORT_READ"; ;

242 
SQLITE_IOERR_WRITE
: 
zVÆ
 = "SQLITE_IOERR_WRITE"; ;

243 
SQLITE_IOERR_FSYNC
: 
zVÆ
 = "SQLITE_IOERR_FSYNC"; ;

244 
SQLITE_IOERR_DIR_FSYNC
: 
zVÆ
 = "SQLITE_IOERR_DIR_FSYNC"; ;

245 
SQLITE_IOERR_TRUNCATE
: 
zVÆ
 = "SQLITE_IOERR_TRUNCATE"; ;

246 
SQLITE_IOERR_FSTAT
: 
zVÆ
 = "SQLITE_IOERR_FSTAT"; ;

247 
SQLITE_IOERR_UNLOCK
: 
zVÆ
 = "SQLITE_IOERR_UNLOCK"; ;

248 
SQLITE_IOERR_RDLOCK
: 
zVÆ
 = "SQLITE_IOERR_RDLOCK"; ;

249 
SQLITE_IOERR_DELETE
: 
zVÆ
 = "SQLITE_IOERR_DELETE"; ;

250 
SQLITE_IOERR_BLOCKED
: 
zVÆ
 = "SQLITE_IOERR_BLOCKED"; ;

251 
SQLITE_IOERR_NOMEM
: 
zVÆ
 = "SQLITE_IOERR_NOMEM"; ;

252 
SQLITE_IOERR_ACCESS
: 
zVÆ
 = "SQLITE_IOERR_ACCESS"; ;

253 
SQLITE_IOERR_CHECKRESERVEDLOCK
:

254 
zVÆ
 = "SQLITE_IOERR_CHECKRESERVEDLOCK"; ;

255 
SQLITE_IOERR_LOCK
: 
zVÆ
 = "SQLITE_IOERR_LOCK"; ;

256 
SQLITE_IOERR_CLOSE
: 
zVÆ
 = "SQLITE_IOERR_CLOSE"; ;

257 
SQLITE_IOERR_DIR_CLOSE
: 
zVÆ
 = "SQLITE_IOERR_DIR_CLOSE"; ;

258 
SQLITE_IOERR_SHMOPEN
: 
zVÆ
 = "SQLITE_IOERR_SHMOPEN"; ;

259 
SQLITE_IOERR_SHMSIZE
: 
zVÆ
 = "SQLITE_IOERR_SHMSIZE"; ;

260 
SQLITE_IOERR_SHMLOCK
: 
zVÆ
 = "SQLITE_IOERR_SHMLOCK"; ;

261 
SQLITE_IOERR_SHMMAP
: 
zVÆ
 = "SQLITE_IOERR_SHMMAP"; ;

262 
SQLITE_IOERR_SEEK
: 
zVÆ
 = "SQLITE_IOERR_SEEK"; ;

263 
SQLITE_IOERR_GETTEMPPATH
: 
zVÆ
 = "SQLITE_IOERR_GETTEMPPATH"; ;

264 
SQLITE_IOERR_CONVPATH
: 
zVÆ
 = "SQLITE_IOERR_CONVPATH"; ;

265 
SQLITE_READONLY_DBMOVED
: 
zVÆ
 = "SQLITE_READONLY_DBMOVED"; ;

266 
SQLITE_LOCKED_SHAREDCACHE
: 
zVÆ
 = "SQLITE_LOCKED_SHAREDCACHE"; ;

267 
SQLITE_BUSY_RECOVERY
: 
zVÆ
 = "SQLITE_BUSY_RECOVERY"; ;

268 
SQLITE_CANTOPEN_NOTEMPDIR
: 
zVÆ
 = "SQLITE_CANTOPEN_NOTEMPDIR"; ;

270 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%d", 
rc
);

271 
zVÆ
 = 
zBuf
;

275 
	`vf°ø˚_¥ötf
(
pInfo
, 
zF‹m©
, 
zVÆ
);

276 
	}
}

281 
	$°øµíd
(*
z
, *
pI
, c⁄° *
zAµíd
){

282 
i
 = *
pI
;

283  
zAµíd
[0] ){ 
z
[
i
++] = *(zAppend++); }

284 
z
[
i
] = 0;

285 *
pI
 = 
i
;

286 
	}
}

291 
	$vf°ø˚Clo£
(
sqlôe3_fûe
 *
pFûe
){

292 
vf°ø˚_fûe
 *
p
 = (vf°ø˚_fûê*)
pFûe
;

293 
vf°ø˚_öfo
 *
pInfo
 = 
p
->pInfo;

294 
rc
;

295 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xClo£(%s)",ÖInfo->
zVfsName
, 
p
->
zFName
);

296 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xClo£
(p->pReal);

297 
	`vf°ø˚_¥öt_îrcode
(
pInfo
, " -> %s\n", 
rc
);

298 if–
rc
==
SQLITE_OK
 ){

299 
	`sqlôe3_‰ì
((*)
p
->
ba£
.
pMëhods
);

300 
p
->
ba£
.
pMëhods
 = 0;

302  
rc
;

303 
	}
}

308 
	$vf°ø˚Ród
(

309 
sqlôe3_fûe
 *
pFûe
,

310 *
zBuf
,

311 
iAmt
,

312 
sqlôe_öt64
 
iOf°


314 
vf°ø˚_fûe
 *
p
 = (vf°ø˚_fûê*)
pFûe
;

315 
vf°ø˚_öfo
 *
pInfo
 = 
p
->pInfo;

316 
rc
;

317 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xRead(%s,n=%d,ofst=%lld)",

318 
pInfo
->
zVfsName
, 
p
->
zFName
, 
iAmt
, 
iOf°
);

319 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xRód
’->pRól, 
zBuf
, 
iAmt
, 
iOf°
);

320 
	`vf°ø˚_¥öt_îrcode
(
pInfo
, " -> %s\n", 
rc
);

321  
rc
;

322 
	}
}

327 
	$vf°ø˚Wrôe
(

328 
sqlôe3_fûe
 *
pFûe
,

329 c⁄° *
zBuf
,

330 
iAmt
,

331 
sqlôe_öt64
 
iOf°


333 
vf°ø˚_fûe
 *
p
 = (vf°ø˚_fûê*)
pFûe
;

334 
vf°ø˚_öfo
 *
pInfo
 = 
p
->pInfo;

335 
rc
;

336 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xWrite(%s,n=%d,ofst=%lld)",

337 
pInfo
->
zVfsName
, 
p
->
zFName
, 
iAmt
, 
iOf°
);

338 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xWrôe
’->pRól, 
zBuf
, 
iAmt
, 
iOf°
);

339 
	`vf°ø˚_¥öt_îrcode
(
pInfo
, " -> %s\n", 
rc
);

340  
rc
;

341 
	}
}

346 
	$vf°ø˚Trunˇã
(
sqlôe3_fûe
 *
pFûe
, 
sqlôe_öt64
 
size
){

347 
vf°ø˚_fûe
 *
p
 = (vf°ø˚_fûê*)
pFûe
;

348 
vf°ø˚_öfo
 *
pInfo
 = 
p
->pInfo;

349 
rc
;

350 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xTrunˇã(%s,%Œd)",ÖInfo->
zVfsName
, 
p
->
zFName
,

351 
size
);

352 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xTrunˇã
’->pRól, 
size
);

353 
	`vf°ø˚_¥ötf
(
pInfo
, " -> %d\n", 
rc
);

354  
rc
;

355 
	}
}

360 
	$vf°ø˚Sync
(
sqlôe3_fûe
 *
pFûe
, 
Êags
){

361 
vf°ø˚_fûe
 *
p
 = (vf°ø˚_fûê*)
pFûe
;

362 
vf°ø˚_öfo
 *
pInfo
 = 
p
->pInfo;

363 
rc
;

364 
i
;

365 
zBuf
[100];

366 
	`mem˝y
(
zBuf
, "|0", 3);

367 
i
 = 0;

368 if–
Êags
 & 
SQLITE_SYNC_FULL
 ) 
	`°øµíd
(
zBuf
, &
i
, "|FULL");

369 if–
Êags
 & 
SQLITE_SYNC_NORMAL
 ) 
	`°øµíd
(
zBuf
, &
i
, "|NORMAL");

370 if–
Êags
 & 
SQLITE_SYNC_DATAONLY
 ) 
	`°øµíd
(
zBuf
, &
i
, "|DATAONLY");

371 if–
Êags
 & ~(
SQLITE_SYNC_FULL
|
SQLITE_SYNC_DATAONLY
) ){

372 
	`sqlôe3_¢¥ötf
((
zBuf
)-
i
, &zBuf[i], "|0x%x", 
Êags
);

374 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xSync(%s,%s)",ÖInfo->
zVfsName
, 
p
->
zFName
,

375 &
zBuf
[1]);

376 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xSync
’->pRól, 
Êags
);

377 
	`vf°ø˚_¥ötf
(
pInfo
, " -> %d\n", 
rc
);

378  
rc
;

379 
	}
}

384 
	$vf°ø˚FûeSize
(
sqlôe3_fûe
 *
pFûe
, 
sqlôe_öt64
 *
pSize
){

385 
vf°ø˚_fûe
 *
p
 = (vf°ø˚_fûê*)
pFûe
;

386 
vf°ø˚_öfo
 *
pInfo
 = 
p
->pInfo;

387 
rc
;

388 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xFûeSize(%s)",ÖInfo->
zVfsName
, 
p
->
zFName
);

389 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xFûeSize
’->pRól, 
pSize
);

390 
	`vf°ø˚_¥öt_îrcode
(
pInfo
, " -> %s,", 
rc
);

391 
	`vf°ø˚_¥ötf
(
pInfo
, " size=%Œd\n", *
pSize
);

392  
rc
;

393 
	}
}

398 c⁄° *
	$lockName
(
eLock
){

399 c⁄° *
azLockNames
[] = {

402 if–
eLock
<0 ||ÉLock>=(
azLockNames
)/(azLockNames[0]) ){

405  
azLockNames
[
eLock
];

407 
	}
}

412 
	$vf°ø˚Lock
(
sqlôe3_fûe
 *
pFûe
, 
eLock
){

413 
vf°ø˚_fûe
 *
p
 = (vf°ø˚_fûê*)
pFûe
;

414 
vf°ø˚_öfo
 *
pInfo
 = 
p
->pInfo;

415 
rc
;

416 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xLock(%s,%s)",ÖInfo->
zVfsName
, 
p
->
zFName
,

417 
	`lockName
(
eLock
));

418 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xLock
’->pRól, 
eLock
);

419 
	`vf°ø˚_¥öt_îrcode
(
pInfo
, " -> %s\n", 
rc
);

420  
rc
;

421 
	}
}

426 
	$vf°ø˚U∆ock
(
sqlôe3_fûe
 *
pFûe
, 
eLock
){

427 
vf°ø˚_fûe
 *
p
 = (vf°ø˚_fûê*)
pFûe
;

428 
vf°ø˚_öfo
 *
pInfo
 = 
p
->pInfo;

429 
rc
;

430 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xU∆ock(%s,%s)",ÖInfo->
zVfsName
, 
p
->
zFName
,

431 
	`lockName
(
eLock
));

432 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xU∆ock
’->pRól, 
eLock
);

433 
	`vf°ø˚_¥öt_îrcode
(
pInfo
, " -> %s\n", 
rc
);

434  
rc
;

435 
	}
}

440 
	$vf°ø˚CheckRe£rvedLock
(
sqlôe3_fûe
 *
pFûe
, *
pResOut
){

441 
vf°ø˚_fûe
 *
p
 = (vf°ø˚_fûê*)
pFûe
;

442 
vf°ø˚_öfo
 *
pInfo
 = 
p
->pInfo;

443 
rc
;

444 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xCheckReservedLock(%s,%d)",

445 
pInfo
->
zVfsName
, 
p
->
zFName
);

446 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xCheckRe£rvedLock
’->pRól, 
pResOut
);

447 
	`vf°ø˚_¥öt_îrcode
(
pInfo
, " -> %s", 
rc
);

448 
	`vf°ø˚_¥ötf
(
pInfo
, ", out=%d\n", *
pResOut
);

449  
rc
;

450 
	}
}

455 
	$vf°ø˚FûeC⁄åﬁ
(
sqlôe3_fûe
 *
pFûe
, 
›
, *
pArg
){

456 
vf°ø˚_fûe
 *
p
 = (vf°ø˚_fûê*)
pFûe
;

457 
vf°ø˚_öfo
 *
pInfo
 = 
p
->pInfo;

458 
rc
;

459 
zBuf
[100];

460 *
zOp
;

461  
›
 ){

462 
SQLITE_FCNTL_LOCKSTATE
: 
zOp
 = "LOCKSTATE"; ;

463 
SQLITE_GET_LOCKPROXYFILE
: 
zOp
 = "GET_LOCKPROXYFILE"; ;

464 
SQLITE_SET_LOCKPROXYFILE
: 
zOp
 = "SET_LOCKPROXYFILE"; ;

465 
SQLITE_LAST_ERRNO
: 
zOp
 = "LAST_ERRNO"; ;

466 
SQLITE_FCNTL_SIZE_HINT
: {

467 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "SIZE_HINT,%lld",

468 *(
sqlôe3_öt64
*)
pArg
);

469 
zOp
 = 
zBuf
;

472 
SQLITE_FCNTL_CHUNK_SIZE
: {

473 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "CHUNK_SIZE,%d", *(*)
pArg
);

474 
zOp
 = 
zBuf
;

477 
SQLITE_FCNTL_FILE_POINTER
: 
zOp
 = "FILE_POINTER"; ;

478 
SQLITE_FCNTL_SYNC_OMITTED
: 
zOp
 = "SYNC_OMITTED"; ;

479 
SQLITE_FCNTL_WIN32_AV_RETRY
: 
zOp
 = "WIN32_AV_RETRY"; ;

480 
SQLITE_FCNTL_PERSIST_WAL
: 
zOp
 = "PERSIST_WAL"; ;

481 
SQLITE_FCNTL_OVERWRITE
: 
zOp
 = "OVERWRITE"; ;

482 
SQLITE_FCNTL_VFSNAME
: 
zOp
 = "VFSNAME"; ;

483 
SQLITE_FCNTL_TEMPFILENAME
: 
zOp
 = "TEMPFILENAME"; ;

484 0xˇ093Á0: 
zOp
 = "DB_UNCHANGED"; ;

485 
SQLITE_FCNTL_PRAGMA
: {

486 c⁄° *c⁄°* 
a
 = (c⁄° *c⁄°*)
pArg
;

487 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "PRAGMA,[%s,%s]",
a
[1],a[2]);

488 
zOp
 = 
zBuf
;

492 
	`sqlôe3_¢¥ötf
( 
zBuf
, zBuf, "%d", 
›
);

493 
zOp
 = 
zBuf
;

497 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xFileControl(%s,%s)",

498 
pInfo
->
zVfsName
, 
p
->
zFName
, 
zOp
);

499 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xFûeC⁄åﬁ
’->pRól, 
›
, 
pArg
);

500 
	`vf°ø˚_¥öt_îrcode
(
pInfo
, " -> %s\n", 
rc
);

501 if–
›
==
SQLITE_FCNTL_VFSNAME
 && 
rc
==
SQLITE_OK
 ){

502 *(**)
pArg
 = 
	`sqlôe3_m¥ötf
("vfstrace.%s/%z",

503 
pInfo
->
zVfsName
, *(**)
pArg
);

505 if–(
›
==
SQLITE_FCNTL_PRAGMA
 || op==
SQLITE_FCNTL_TEMPFILENAME
)

506 && 
rc
==
SQLITE_OK
 && *(**)
pArg
 ){

507 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xFileControl(%s,%s)Ñeturns %s",

508 
pInfo
->
zVfsName
, 
p
->
zFName
, 
zOp
, *(**)
pArg
);

510  
rc
;

511 
	}
}

516 
	$vf°ø˚Se˘‹Size
(
sqlôe3_fûe
 *
pFûe
){

517 
vf°ø˚_fûe
 *
p
 = (vf°ø˚_fûê*)
pFûe
;

518 
vf°ø˚_öfo
 *
pInfo
 = 
p
->pInfo;

519 
rc
;

520 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xSe˘‹Size(%s)",ÖInfo->
zVfsName
, 
p
->
zFName
);

521 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xSe˘‹Size
(p->pReal);

522 
	`vf°ø˚_¥ötf
(
pInfo
, " -> %d\n", 
rc
);

523  
rc
;

524 
	}
}

529 
	$vf°ø˚Devi˚Ch¨a˘îi°ics
(
sqlôe3_fûe
 *
pFûe
){

530 
vf°ø˚_fûe
 *
p
 = (vf°ø˚_fûê*)
pFûe
;

531 
vf°ø˚_öfo
 *
pInfo
 = 
p
->pInfo;

532 
rc
;

533 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xDeviceCharacteristics(%s)",

534 
pInfo
->
zVfsName
, 
p
->
zFName
);

535 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xDevi˚Ch¨a˘îi°ics
(p->pReal);

536 
	`vf°ø˚_¥ötf
(
pInfo
, " -> 0x%08x\n", 
rc
);

537  
rc
;

538 
	}
}

543 
	$vf°ø˚ShmLock
(
sqlôe3_fûe
 *
pFûe
, 
of°
, 
n
, 
Êags
){

544 
vf°ø˚_fûe
 *
p
 = (vf°ø˚_fûê*)
pFûe
;

545 
vf°ø˚_öfo
 *
pInfo
 = 
p
->pInfo;

546 
rc
;

547 
zLck
[100];

548 
i
 = 0;

549 
	`mem˝y
(
zLck
, "|0", 3);

550 if–
Êags
 & 
SQLITE_SHM_UNLOCK
 ) 
	`°øµíd
(
zLck
, &
i
, "|UNLOCK");

551 if–
Êags
 & 
SQLITE_SHM_LOCK
 ) 
	`°øµíd
(
zLck
, &
i
, "|LOCK");

552 if–
Êags
 & 
SQLITE_SHM_SHARED
 ) 
	`°øµíd
(
zLck
, &
i
, "|SHARED");

553 if–
Êags
 & 
SQLITE_SHM_EXCLUSIVE
 ) 
	`°øµíd
(
zLck
, &
i
, "|EXCLUSIVE");

554 if–
Êags
 & ~(0xf) ){

555 
	`sqlôe3_¢¥ötf
((
zLck
)-
i
, &zLck[i], "|0x%x", 
Êags
);

557 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xShmLock(%s,ofst=%d,n=%d,%s)",

558 
pInfo
->
zVfsName
, 
p
->
zFName
, 
of°
, 
n
, &
zLck
[1]);

559 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xShmLock
’->pRól, 
of°
, 
n
, 
Êags
);

560 
	`vf°ø˚_¥öt_îrcode
(
pInfo
, " -> %s\n", 
rc
);

561  
rc
;

562 
	}
}

563 
	$vf°ø˚ShmM≠
(

564 
sqlôe3_fûe
 *
pFûe
,

565 
iRegi⁄
,

566 
szRegi⁄
,

567 
isWrôe
,

568 vﬁ©ûê**
µ


570 
vf°ø˚_fûe
 *
p
 = (vf°ø˚_fûê*)
pFûe
;

571 
vf°ø˚_öfo
 *
pInfo
 = 
p
->pInfo;

572 
rc
;

573 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xShmMap(%s,iRegion=%d,szRegion=%d,isWrite=%d,*)",

574 
pInfo
->
zVfsName
, 
p
->
zFName
, 
iRegi⁄
, 
szRegi⁄
, 
isWrôe
);

575 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xShmM≠
’->pRól, 
iRegi⁄
, 
szRegi⁄
, 
isWrôe
, 
µ
);

576 
	`vf°ø˚_¥öt_îrcode
(
pInfo
, " -> %s\n", 
rc
);

577  
rc
;

578 
	}
}

579 
	$vf°ø˚ShmB¨rõr
(
sqlôe3_fûe
 *
pFûe
){

580 
vf°ø˚_fûe
 *
p
 = (vf°ø˚_fûê*)
pFûe
;

581 
vf°ø˚_öfo
 *
pInfo
 = 
p
->pInfo;

582 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xShmB¨rõr(%s)\n",ÖInfo->
zVfsName
, 
p
->
zFName
);

583 
p
->
pRól
->
pMëhods
->
	`xShmB¨rõr
(p->pReal);

584 
	}
}

585 
	$vf°ø˚ShmUnm≠
(
sqlôe3_fûe
 *
pFûe
, 
dñFœg
){

586 
vf°ø˚_fûe
 *
p
 = (vf°ø˚_fûê*)
pFûe
;

587 
vf°ø˚_öfo
 *
pInfo
 = 
p
->pInfo;

588 
rc
;

589 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xShmUnmap(%s,delFlag=%d)",

590 
pInfo
->
zVfsName
, 
p
->
zFName
, 
dñFœg
);

591 
rc
 = 
p
->
pRól
->
pMëhods
->
	`xShmUnm≠
’->pRól, 
dñFœg
);

592 
	`vf°ø˚_¥öt_îrcode
(
pInfo
, " -> %s\n", 
rc
);

593  
rc
;

594 
	}
}

601 
	$vf°ø˚O≥n
(

602 
sqlôe3_vfs
 *
pVfs
,

603 c⁄° *
zName
,

604 
sqlôe3_fûe
 *
pFûe
,

605 
Êags
,

606 *
pOutFœgs


608 
rc
;

609 
vf°ø˚_fûe
 *
p
 = (vf°ø˚_fûê*)
pFûe
;

610 
vf°ø˚_öfo
 *
pInfo
 = (vf°ø˚_öfo*)
pVfs
->
pAµD©a
;

611 
sqlôe3_vfs
 *
pRoŸ
 = 
pInfo
->
pRoŸVfs
;

612 
p
->
pInfo
 =ÖInfo;

613 
p
->
zFName
 = 
zName
 ? 
	`fûeTaû
(zName) : "<temp>";

614 
p
->
pRól
 = (
sqlôe3_fûe
 *)&p[1];

615 
rc
 = 
pRoŸ
->
	`xO≥n
’RoŸ, 
zName
, 
p
->
pRól
, 
Êags
, 
pOutFœgs
);

616 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xOpen(%s,flags=0x%x)",

617 
pInfo
->
zVfsName
, 
p
->
zFName
, 
Êags
);

618 if–
p
->
pRól
->
pMëhods
 ){

619 
sqlôe3_io_mëhods
 *
pNew
 = 
	`sqlôe3_mÆloc
( (*pNew) );

620 c⁄° 
sqlôe3_io_mëhods
 *
pSub
 = 
p
->
pRól
->
pMëhods
;

621 
	`mem£t
(
pNew
, 0, (*pNew));

622 
pNew
->
iVîsi⁄
 = 
pSub
->iVersion;

623 
pNew
->
xClo£
 = 
vf°ø˚Clo£
;

624 
pNew
->
xRód
 = 
vf°ø˚Ród
;

625 
pNew
->
xWrôe
 = 
vf°ø˚Wrôe
;

626 
pNew
->
xTrunˇã
 = 
vf°ø˚Trunˇã
;

627 
pNew
->
xSync
 = 
vf°ø˚Sync
;

628 
pNew
->
xFûeSize
 = 
vf°ø˚FûeSize
;

629 
pNew
->
xLock
 = 
vf°ø˚Lock
;

630 
pNew
->
xU∆ock
 = 
vf°ø˚U∆ock
;

631 
pNew
->
xCheckRe£rvedLock
 = 
vf°ø˚CheckRe£rvedLock
;

632 
pNew
->
xFûeC⁄åﬁ
 = 
vf°ø˚FûeC⁄åﬁ
;

633 
pNew
->
xSe˘‹Size
 = 
vf°ø˚Se˘‹Size
;

634 
pNew
->
xDevi˚Ch¨a˘îi°ics
 = 
vf°ø˚Devi˚Ch¨a˘îi°ics
;

635 if–
pNew
->
iVîsi⁄
>=2 ){

636 
pNew
->
xShmM≠
 = 
pSub
->xShmM≠ ? 
vf°ø˚ShmM≠
 : 0;

637 
pNew
->
xShmLock
 = 
pSub
->xShmLock ? 
vf°ø˚ShmLock
 : 0;

638 
pNew
->
xShmB¨rõr
 = 
pSub
->xShmB¨rõ∏? 
vf°ø˚ShmB¨rõr
 : 0;

639 
pNew
->
xShmUnm≠
 = 
pSub
->xShmUnm≠ ? 
vf°ø˚ShmUnm≠
 : 0;

641 
pFûe
->
pMëhods
 = 
pNew
;

643 
	`vf°ø˚_¥öt_îrcode
(
pInfo
, " -> %s", 
rc
);

644 if–
pOutFœgs
 ){

645 
	`vf°ø˚_¥ötf
(
pInfo
, ", outFœgs=0x%x\n", *
pOutFœgs
);

647 
	`vf°ø˚_¥ötf
(
pInfo
, "\n");

649  
rc
;

650 
	}
}

657 
	$vf°ø˚Dñëe
(
sqlôe3_vfs
 *
pVfs
, c⁄° *
zP©h
, 
dúSync
){

658 
vf°ø˚_öfo
 *
pInfo
 = (vf°ø˚_öfo*)
pVfs
->
pAµD©a
;

659 
sqlôe3_vfs
 *
pRoŸ
 = 
pInfo
->
pRoŸVfs
;

660 
rc
;

661 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xDelete(\"%s\",%d)",

662 
pInfo
->
zVfsName
, 
zP©h
, 
dúSync
);

663 
rc
 = 
pRoŸ
->
	`xDñëe
’RoŸ, 
zP©h
, 
dúSync
);

664 
	`vf°ø˚_¥öt_îrcode
(
pInfo
, " -> %s\n", 
rc
);

665  
rc
;

666 
	}
}

672 
	$vf°ø˚Ac˚ss
(

673 
sqlôe3_vfs
 *
pVfs
,

674 c⁄° *
zP©h
,

675 
Êags
,

676 *
pResOut


678 
vf°ø˚_öfo
 *
pInfo
 = (vf°ø˚_öfo*)
pVfs
->
pAµD©a
;

679 
sqlôe3_vfs
 *
pRoŸ
 = 
pInfo
->
pRoŸVfs
;

680 
rc
;

681 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xAccess(\"%s\",%d)",

682 
pInfo
->
zVfsName
, 
zP©h
, 
Êags
);

683 
rc
 = 
pRoŸ
->
	`xAc˚ss
’RoŸ, 
zP©h
, 
Êags
, 
pResOut
);

684 
	`vf°ø˚_¥öt_îrcode
(
pInfo
, " -> %s", 
rc
);

685 
	`vf°ø˚_¥ötf
(
pInfo
, ", out=%d\n", *
pResOut
);

686  
rc
;

687 
	}
}

694 
	$vf°ø˚FuŒP©h«me
(

695 
sqlôe3_vfs
 *
pVfs
,

696 c⁄° *
zP©h
,

697 
nOut
,

698 *
zOut


700 
vf°ø˚_öfo
 *
pInfo
 = (vf°ø˚_öfo*)
pVfs
->
pAµD©a
;

701 
sqlôe3_vfs
 *
pRoŸ
 = 
pInfo
->
pRoŸVfs
;

702 
rc
;

703 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xFullPathname(\"%s\")",

704 
pInfo
->
zVfsName
, 
zP©h
);

705 
rc
 = 
pRoŸ
->
	`xFuŒP©h«me
’RoŸ, 
zP©h
, 
nOut
, 
zOut
);

706 
	`vf°ø˚_¥öt_îrcode
(
pInfo
, " -> %s", 
rc
);

707 
	`vf°ø˚_¥ötf
(
pInfo
, ", out=\"%.*s\"\n", 
nOut
, 
zOut
);

708  
rc
;

709 
	}
}

714 *
	$vf°ø˚DlO≥n
(
sqlôe3_vfs
 *
pVfs
, c⁄° *
zP©h
){

715 
vf°ø˚_öfo
 *
pInfo
 = (vf°ø˚_öfo*)
pVfs
->
pAµD©a
;

716 
sqlôe3_vfs
 *
pRoŸ
 = 
pInfo
->
pRoŸVfs
;

717 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xDlO≥n(\"%s\")\n",ÖInfo->
zVfsName
, 
zP©h
);

718  
pRoŸ
->
	`xDlO≥n
’RoŸ, 
zP©h
);

719 
	}
}

726 
	$vf°ø˚DlEº‹
(
sqlôe3_vfs
 *
pVfs
, 
nByã
, *
zEºMsg
){

727 
vf°ø˚_öfo
 *
pInfo
 = (vf°ø˚_öfo*)
pVfs
->
pAµD©a
;

728 
sqlôe3_vfs
 *
pRoŸ
 = 
pInfo
->
pRoŸVfs
;

729 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xDlEº‹(%d)",ÖInfo->
zVfsName
, 
nByã
);

730 
pRoŸ
->
	`xDlEº‹
’RoŸ, 
nByã
, 
zEºMsg
);

731 
	`vf°ø˚_¥ötf
(
pInfo
, " -> \"%s\"", 
zEºMsg
);

732 
	}
}

737 (*
	$vf°ø˚DlSym
(
sqlôe3_vfs
 *
pVfs
,*
p
,c⁄° *
zSym
))(){

738 
vf°ø˚_öfo
 *
pInfo
 = (vf°ø˚_öfo*)
pVfs
->
pAµD©a
;

739 
sqlôe3_vfs
 *
pRoŸ
 = 
pInfo
->
pRoŸVfs
;

740 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xDlSym(\"%s\")\n",ÖInfo->
zVfsName
, 
zSym
);

741  
pRoŸ
->
	`xDlSym
’RoŸ, 
p
, 
zSym
);

742 
	}
}

747 
	$vf°ø˚DlClo£
(
sqlôe3_vfs
 *
pVfs
, *
pH™dÀ
){

748 
vf°ø˚_öfo
 *
pInfo
 = (vf°ø˚_öfo*)
pVfs
->
pAµD©a
;

749 
sqlôe3_vfs
 *
pRoŸ
 = 
pInfo
->
pRoŸVfs
;

750 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xDlO≥n()\n",ÖInfo->
zVfsName
);

751 
pRoŸ
->
	`xDlClo£
’RoŸ, 
pH™dÀ
);

752 
	}
}

758 
	$vf°ø˚R™dom√ss
(
sqlôe3_vfs
 *
pVfs
, 
nByã
, *
zBufOut
){

759 
vf°ø˚_öfo
 *
pInfo
 = (vf°ø˚_öfo*)
pVfs
->
pAµD©a
;

760 
sqlôe3_vfs
 *
pRoŸ
 = 
pInfo
->
pRoŸVfs
;

761 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.xR™dom√ss(%d)\n",ÖInfo->
zVfsName
, 
nByã
);

762  
pRoŸ
->
	`xR™dom√ss
’RoŸ, 
nByã
, 
zBufOut
);

763 
	}
}

769 
	$vf°ø˚SÀï
(
sqlôe3_vfs
 *
pVfs
, 
nMi¸o
){

770 
vf°ø˚_öfo
 *
pInfo
 = (vf°ø˚_öfo*)
pVfs
->
pAµD©a
;

771 
sqlôe3_vfs
 *
pRoŸ
 = 
pInfo
->
pRoŸVfs
;

772  
pRoŸ
->
	`xSÀï
’RoŸ, 
nMi¸o
);

773 
	}
}

778 
	$vf°ø˚CuºítTime
(
sqlôe3_vfs
 *
pVfs
, *
pTimeOut
){

779 
vf°ø˚_öfo
 *
pInfo
 = (vf°ø˚_öfo*)
pVfs
->
pAµD©a
;

780 
sqlôe3_vfs
 *
pRoŸ
 = 
pInfo
->
pRoŸVfs
;

781  
pRoŸ
->
	`xCuºítTime
’RoŸ, 
pTimeOut
);

782 
	}
}

783 
	$vf°ø˚CuºítTimeI¡64
(
sqlôe3_vfs
 *
pVfs
, 
sqlôe3_öt64
 *
pTimeOut
){

784 
vf°ø˚_öfo
 *
pInfo
 = (vf°ø˚_öfo*)
pVfs
->
pAµD©a
;

785 
sqlôe3_vfs
 *
pRoŸ
 = 
pInfo
->
pRoŸVfs
;

786  
pRoŸ
->
	`xCuºítTimeI¡64
’RoŸ, 
pTimeOut
);

787 
	}
}

792 
	$vf°ø˚GëLa°Eº‹
(
sqlôe3_vfs
 *
pVfs
, 
iEº
, *
zEº
){

793 
vf°ø˚_öfo
 *
pInfo
 = (vf°ø˚_öfo*)
pVfs
->
pAµD©a
;

794 
sqlôe3_vfs
 *
pRoŸ
 = 
pInfo
->
pRoŸVfs
;

795  
pRoŸ
->
	`xGëLa°Eº‹
’RoŸ, 
iEº
, 
zEº
);

796 
	}
}

801 
	$vf°ø˚SëSy°emCÆl
(

802 
sqlôe3_vfs
 *
pVfs
,

803 c⁄° *
zName
,

804 
sqlôe3_sysˇŒ_±r
 
pFunc


806 
vf°ø˚_öfo
 *
pInfo
 = (vf°ø˚_öfo*)
pVfs
->
pAµD©a
;

807 
sqlôe3_vfs
 *
pRoŸ
 = 
pInfo
->
pRoŸVfs
;

808  
pRoŸ
->
	`xSëSy°emCÆl
’RoŸ, 
zName
, 
pFunc
);

809 
	}
}

810 
sqlôe3_sysˇŒ_±r
 
	$vf°ø˚GëSy°emCÆl
(

811 
sqlôe3_vfs
 *
pVfs
,

812 c⁄° *
zName


814 
vf°ø˚_öfo
 *
pInfo
 = (vf°ø˚_öfo*)
pVfs
->
pAµD©a
;

815 
sqlôe3_vfs
 *
pRoŸ
 = 
pInfo
->
pRoŸVfs
;

816  
pRoŸ
->
	`xGëSy°emCÆl
’RoŸ, 
zName
);

817 
	}
}

818 c⁄° *
	$vf°ø˚NextSy°emCÆl
(
sqlôe3_vfs
 *
pVfs
, c⁄° *
zName
){

819 
vf°ø˚_öfo
 *
pInfo
 = (vf°ø˚_öfo*)
pVfs
->
pAµD©a
;

820 
sqlôe3_vfs
 *
pRoŸ
 = 
pInfo
->
pRoŸVfs
;

821  
pRoŸ
->
	`xNextSy°emCÆl
’RoŸ, 
zName
);

822 
	}
}

833 
vf°ø˚_ªgi°î
(

834 c⁄° *
zTø˚Name
,

835 c⁄° *
zOldVfsName
,

836 (*
xOut
)(const *,*),

837 *
pOutArg
,

838 
makeDeÁu…


840 
sqlôe3_vfs
 *
pNew
;

841 
sqlôe3_vfs
 *
pRoŸ
;

842 
vf°ø˚_öfo
 *
pInfo
;

843 
nName
;

844 
nByã
;

846 
pRoŸ
 = 
	`sqlôe3_vfs_föd
(
zOldVfsName
);

847 if–
pRoŸ
==0 )  
SQLITE_NOTFOUND
;

848 
nName
 = 
	`°æí
(
zTø˚Name
);

849 
nByã
 = (*
pNew
Ë+ (*
pInfo
Ë+ 
nName
 + 1;

850 
pNew
 = 
	`sqlôe3_mÆloc
–
nByã
 );

851 if–
pNew
==0 )  
SQLITE_NOMEM
;

852 
	`mem£t
(
pNew
, 0, 
nByã
);

853 
pInfo
 = (
vf°ø˚_öfo
*)&
pNew
[1];

854 
pNew
->
iVîsi⁄
 = 
pRoŸ
->iVersion;

855 
pNew
->
szOsFûe
 = 
pRoŸ
->szOsFûê+ (
vf°ø˚_fûe
);

856 
pNew
->
mxP©h«me
 = 
pRoŸ
->mxPathname;

857 
pNew
->
zName
 = (*)&
pInfo
[1];

858 
	`mem˝y
((*)&
pInfo
[1], 
zTø˚Name
, 
nName
+1);

859 
pNew
->
pAµD©a
 = 
pInfo
;

860 
pNew
->
xO≥n
 = 
vf°ø˚O≥n
;

861 
pNew
->
xDñëe
 = 
vf°ø˚Dñëe
;

862 
pNew
->
xAc˚ss
 = 
vf°ø˚Ac˚ss
;

863 
pNew
->
xFuŒP©h«me
 = 
vf°ø˚FuŒP©h«me
;

864 
pNew
->
xDlO≥n
 = 
pRoŸ
->xDlO≥n==0 ? 0 : 
vf°ø˚DlO≥n
;

865 
pNew
->
xDlEº‹
 = 
pRoŸ
->xDlEº‹==0 ? 0 : 
vf°ø˚DlEº‹
;

866 
pNew
->
xDlSym
 = 
pRoŸ
->xDlSym==0 ? 0 : 
vf°ø˚DlSym
;

867 
pNew
->
xDlClo£
 = 
pRoŸ
->xDlClo£==0 ? 0 : 
vf°ø˚DlClo£
;

868 
pNew
->
xR™dom√ss
 = 
vf°ø˚R™dom√ss
;

869 
pNew
->
xSÀï
 = 
vf°ø˚SÀï
;

870 
pNew
->
xCuºítTime
 = 
vf°ø˚CuºítTime
;

871 
pNew
->
xGëLa°Eº‹
 = 
pRoŸ
->xGëLa°Eº‹==0 ? 0 : 
vf°ø˚GëLa°Eº‹
;

872 if–
pNew
->
iVîsi⁄
>=2 ){

873 
pNew
->
xCuºítTimeI¡64
 = 
pRoŸ
->xCurrentTimeInt64==0 ? 0 :

874 
vf°ø˚CuºítTimeI¡64
;

875 if–
pNew
->
iVîsi⁄
>=3 ){

876 
pNew
->
xSëSy°emCÆl
 = 
pRoŸ
->xSetSystemCall==0 ? 0 :

877 
vf°ø˚SëSy°emCÆl
;

878 
pNew
->
xGëSy°emCÆl
 = 
pRoŸ
->xGetSystemCall==0 ? 0 :

879 
vf°ø˚GëSy°emCÆl
;

880 
pNew
->
xNextSy°emCÆl
 = 
pRoŸ
->xNextSystemCall==0 ? 0 :

881 
vf°ø˚NextSy°emCÆl
;

884 
pInfo
->
pRoŸVfs
 = 
pRoŸ
;

885 
pInfo
->
xOut
 = xOut;

886 
pInfo
->
pOutArg
 =ÖOutArg;

887 
pInfo
->
zVfsName
 = 
pNew
->
zName
;

888 
pInfo
->
pTø˚Vfs
 = 
pNew
;

889 
	`vf°ø˚_¥ötf
(
pInfo
, "%s.enabled_for(\"%s\")\n",

890 
pInfo
->
zVfsName
, 
pRoŸ
->
zName
);

891  
	`sqlôe3_vfs_ªgi°î
(
pNew
, 
makeDeÁu…
);

892 
	}
}

	@test_windirent.c

16 #i‡
deföed
(
_WIN32
Ë&& deföed(
_MSC_VER
)

18 
	~"ã°_wödúít.h
"

23 
LPDIR
 
	$›ídú
(

24 c⁄° *
dú«me


26 
_född©a_t
 
d©a
;

27 
LPDIR
 
dúp
 = (LPDIR)
	`sqlôe3_mÆloc
((
DIR
));

28 
SIZE_T
 
«mesize
 = (
d©a
.
«me
) / (data.name[0]);

30 if–
dúp
==
NULL
 )  NULL;

31 
	`mem£t
(
dúp
, 0, (
DIR
));

34 if–
	`sqlôe3_°ricmp
(
dú«me
, "/")==0 ){

35 
dú«me
 = 
	`gëív
("SystemDrive");

38 
	`_¢¥ötf
(
d©a
.
«me
, 
«mesize
, "%s\\*", 
dú«me
);

39 
dúp
->
d_h™dÀ
 = 
	`_födfú°
(
d©a
.
«me
, &data);

41 if–
dúp
->
d_h™dÀ
==
BAD_INTPTR_T
 ){

42 
	`˛o£dú
(
dúp
);

43  
NULL
;

47 if–
d©a
.
©åib
&
_A_HIDDEN
 || d©a.©åib&
_A_SYSTEM
 ){

48 if–
	`_föd√xt
(
dúp
->
d_h™dÀ
, &
d©a
)==-1 ){

49 
	`˛o£dú
(
dúp
);

50  
NULL
;

54 
dúp
->
d_fú°
.
d_©åibuãs
 = 
d©a
.
©åib
;

55 
	`°∫˝y
(
dúp
->
d_fú°
.
d_«me
, 
d©a
.
«me
, 
NAME_MAX
);

56 
dúp
->
d_fú°
.
d_«me
[
NAME_MAX
] = '\0';

58  
dúp
;

59 
	}
}

64 
LPDIRENT
 
	$ªaddú
(

65 
LPDIR
 
dúp


67 
_född©a_t
 
d©a
;

69 if–
dúp
==
NULL
 )  NULL;

71 if–
dúp
->
d_fú°
.
d_öo
==0 ){

72 
dúp
->
d_fú°
.
d_öo
++;

73 
dúp
->
d_√xt
.
d_öo
++;

75  &
dúp
->
d_fú°
;

78 
√xt
:

80 if–
	`_föd√xt
(
dúp
->
d_h™dÀ
, &
d©a
)==-1 )  
NULL
;

83 if–
d©a
.
©åib
&
_A_HIDDEN
 ) 
√xt
;

84 if–
d©a
.
©åib
&
_A_SYSTEM
 ) 
√xt
;

86 
dúp
->
d_√xt
.
d_öo
++;

87 
dúp
->
d_√xt
.
d_©åibuãs
 = 
d©a
.
©åib
;

88 
	`°∫˝y
(
dúp
->
d_√xt
.
d_«me
, 
d©a
.
«me
, 
NAME_MAX
);

89 
dúp
->
d_√xt
.
d_«me
[
NAME_MAX
] = '\0';

91  &
dúp
->
d_√xt
;

92 
	}
}

97 
INT
 
	$ªaddú_r
(

98 
LPDIR
 
dúp
,

99 
LPDIRENT
 
íåy
,

100 
LPDIRENT
 *
ªsu…


102 
_född©a_t
 
d©a
;

104 if–
dúp
==
NULL
 )  
EBADF
;

106 if–
dúp
->
d_fú°
.
d_öo
==0 ){

107 
dúp
->
d_fú°
.
d_öo
++;

108 
dúp
->
d_√xt
.
d_öo
++;

110 
íåy
->
d_öo
 = 
dúp
->
d_fú°
.d_ino;

111 
íåy
->
d_©åibuãs
 = 
dúp
->
d_fú°
.d_attributes;

112 
	`°∫˝y
(
íåy
->
d_«me
, 
dúp
->
d_fú°
.d_«me, 
NAME_MAX
);

113 
íåy
->
d_«me
[
NAME_MAX
] = '\0';

115 *
ªsu…
 = 
íåy
;

119 
√xt
:

121 if–
	`_föd√xt
(
dúp
->
d_h™dÀ
, &
d©a
)==-1 ){

122 *
ªsu…
 = 
NULL
;

123  
ENOENT
;

127 if–
d©a
.
©åib
&
_A_HIDDEN
 ) 
√xt
;

128 if–
d©a
.
©åib
&
_A_SYSTEM
 ) 
√xt
;

130 
íåy
->
d_öo
 = (
öo_t
)-1;

131 
íåy
->
d_©åibuãs
 = 
d©a
.
©åib
;

132 
	`°∫˝y
(
íåy
->
d_«me
, 
d©a
.
«me
, 
NAME_MAX
);

133 
íåy
->
d_«me
[
NAME_MAX
] = '\0';

135 *
ªsu…
 = 
íåy
;

137 
	}
}

142 
INT
 
	$˛o£dú
(

143 
LPDIR
 
dúp


145 
INT
 
ªsu…
 = 0;

147 if–
dúp
==
NULL
 )  
EINVAL
;

149 if–
dúp
->
d_h™dÀ
!=
NULL_INTPTR_T
 && dúp->d_h™dÀ!=
BAD_INTPTR_T
 ){

150 
ªsu…
 = 
	`_föd˛o£
(
dúp
->
d_h™dÀ
);

153 
	`sqlôe3_‰ì
(
dúp
);

154  
ªsu…
;

155 
	}
}

	@test_windirent.h

16 #i‡
deföed
(
_WIN32
Ë&& deföed(
_MSC_VER
)

22 
	#WIN32_LEAN_AND_MEAN


	)

23 
	~"wödows.h
"

29 
	~"sqlôe3.h
"

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<î∫o.h
>

38 
	~<io.h
>

39 
	~<limôs.h
>

45 #i‚de‡
INO_T_DEFINED


46 
	#INO_T_DEFINED


	)

47 
	töo_t
;

54 #i‚de‡
NAME_MAX


55 #ifde‡
FILENAME_MAX


56 
	#NAME_MAX
 (
FILENAME_MAX
)

	)

58 
	#NAME_MAX
 (260)

	)

66 #i‚de‡
NULL_INTPTR_T


67 
	#NULL_INTPTR_T
 ((
öçå_t
)(0))

	)

70 #i‚de‡
BAD_INTPTR_T


71 
	#BAD_INTPTR_T
 ((
öçå_t
)(-1))

	)

78 
DIRENT
 
	tDIRENT
;

79 
DIR
 
	tDIR
;

80 
DIRENT
 *
	tLPDIRENT
;

81 
DIR
 *
	tLPDIR
;

83 
	sDIRENT
 {

84 
öo_t
 
	md_öo
;

85 
	md_©åibuãs
;

86 
	md_«me
[
NAME_MAX
 + 1];

89 
	sDIR
 {

90 
öçå_t
 
	md_h™dÀ
;

91 
DIRENT
 
	md_fú°
;

92 
DIRENT
 
	md_√xt
;

100 
LPDIR
 
›ídú
(c⁄° *
dú«me
);

101 
LPDIRENT
 
ªaddú
(
LPDIR
 
dúp
);

102 
INT
 
ªaddú_r
(
LPDIR
 
dúp
, 
LPDIRENT
 
íåy
, LPDIRENT *
ªsu…
);

103 
INT
 
˛o£dú
(
LPDIR
 
dúp
);

	@test_wsd.c

18 #i‡
deföed
(
SQLITE_OMIT_WSD
Ë&& deföed(
SQLITE_TEST
)

20 
	~"sqlôeI¡.h
"

22 
	#PLS_HASHSIZE
 43

	)

24 
Pro˚ssLoˇlSt‹age
 
	tPro˚ssLoˇlSt‹age
;

25 
Pro˚ssLoˇlV¨
 
	tPro˚ssLoˇlV¨
;

27 
	sPro˚ssLoˇlSt‹age
 {

28 
Pro˚ssLoˇlV¨
 *
	maD©a
[
PLS_HASHSIZE
];

29 
	mnFªe
;

30 
u8
 *
	mpFªe
;

33 
	sPro˚ssLoˇlV¨
 {

34 *
	mpKey
;

35 
Pro˚ssLoˇlV¨
 *
	mpNext
;

38 
Pro˚ssLoˇlSt‹age
 *
	gpGlobÆ
 = 0;

40 
	$sqlôe3_wsd_öô
(
N
, 
J
){

41 if–!
pGlobÆ
 ){

42 
nMÆloc
 = 
N
 + (
Pro˚ssLoˇlSt‹age
Ë+ 
J
*(
Pro˚ssLoˇlV¨
);

43 
pGlobÆ
 = (
Pro˚ssLoˇlSt‹age
 *)
	`mÆloc
(
nMÆloc
);

44 if–
pGlobÆ
 ){

45 
	`mem£t
(
pGlobÆ
, 0, (
Pro˚ssLoˇlSt‹age
));

46 
pGlobÆ
->
nFªe
 = 
nMÆloc
 - (
Pro˚ssLoˇlSt‹age
);

47 
pGlobÆ
->
pFªe
 = (
u8
 *)&pGlobal[1];

51  
pGlobÆ
 ? 
SQLITE_OK
 : 
SQLITE_NOMEM
;

52 
	}
}

54 *
	$sqlôe3_wsd_föd
(*
K
, 
L
){

55 
i
;

56 
iHash
 = 0;

57 
Pro˚ssLoˇlV¨
 *
pV¨
;

60 
i
=0; i<(*); i++){

61 
iHash
 = (iHash<<3Ë+ ((*)&
K
)[
i
];

63 
iHash
 = iHash%
PLS_HASHSIZE
;

66 
pV¨
=
pGlobÆ
->
aD©a
[
iHash
];ÖV¨ &&ÖV¨->
pKey
!=
K
;ÖV¨ıV¨->
pNext
);

69 if–!
pV¨
 ){

70 
nByã
 = 
	`ROUND8
((
Pro˚ssLoˇlV¨
Ë+ 
L
);

71 
	`as£π
–
pGlobÆ
->
nFªe
>=
nByã
 );

72 
pV¨
 = (
Pro˚ssLoˇlV¨
 *)
pGlobÆ
->
pFªe
;

73 
pV¨
->
pKey
 = 
K
;

74 
pV¨
->
pNext
 = 
pGlobÆ
->
aD©a
[
iHash
];

75 
pGlobÆ
->
aD©a
[
iHash
] = 
pV¨
;

76 
pGlobÆ
->
nFªe
 -
nByã
;

77 
pGlobÆ
->
pFªe
 +
nByã
;

78 
	`mem˝y
(&
pV¨
[1], 
K
, 
L
);

81  (*)&
pV¨
[1];

82 
	}
}

	@threads.c

28 
	~"sqlôeI¡.h
"

29 #i‡
SQLITE_OS_WIN


30 
	~"os_wö.h
"

33 #i‡
SQLITE_MAX_WORKER_THREADS
>0

36 #i‡
SQLITE_OS_UNIX
 && 
deföed
(
SQLITE_MUTEX_PTHREADS
Ë&& 
SQLITE_THREADSAFE
>0

38 
	#SQLITE_THREADS_IMPLEMENTED
 1

	)

39 
	~<±hªad.h
>

42 
	sSQLôeThªad
 {

43 
±hªad_t
 
	mtid
;

44 
	md⁄e
;

45 *
	mpOut
;

46 *(*
	mxTask
)(*);

47 *
	mpIn
;

51 
sqlôe3ThªadCª©e
(

52 
SQLôeThªad
 **
µThªad
,

53 *(*
xTask
)(*),

54 *
pIn


56 
SQLôeThªad
 *
	gp
;

57 
	grc
;

59 
as£π
–
µThªad
!=0 );

60 
as£π
–
xTask
!=0 );

62 
as£π
–
sqlôe3GlobÆC⁄fig
.
bC‹eMuãx
!=0 );

64 *
	gµThªad
 = 0;

65 
	gp
 = 
sqlôe3MÆloc
((*
p
));

66 if–
	gp
==0 )  
SQLITE_NOMEM_BKPT
;

67 
mem£t
(
p
, 0, (*p));

68 
	gp
->
	gxTask
 = 
xTask
;

69 
	gp
->
	gpIn
 = 
pIn
;

74 if–
sqlôe3Fau…Sim
(200) ){

75 
	grc
 = 1;

77 
	grc
 = 
±hªad_¸óã
(&
p
->
tid
, 0, 
xTask
, 
pIn
);

79 if–
	grc
 ){

80 
	gp
->
	gd⁄e
 = 1;

81 
	gp
->
	gpOut
 = 
xTask
(
pIn
);

83 *
	gµThªad
 = 
p
;

84  
	gSQLITE_OK
;

88 
	$sqlôe3ThªadJoö
(
SQLôeThªad
 *
p
, **
µOut
){

89 
rc
;

91 
	`as£π
–
µOut
!=0 );

92 if–
	`NEVER
(
p
==0ËË 
SQLITE_NOMEM_BKPT
;

93 if–
p
->
d⁄e
 ){

94 *
µOut
 = 
p
->
pOut
;

95 
rc
 = 
SQLITE_OK
;

97 
rc
 = 
	`±hªad_joö
(
p
->
tid
, 
µOut
Ë? 
SQLITE_ERROR
 : 
SQLITE_OK
;

99 
	`sqlôe3_‰ì
(
p
);

100  
rc
;

101 
	}
}

108 #i‡
SQLITE_OS_WIN_THREADS


110 
	#SQLITE_THREADS_IMPLEMENTED
 1

	)

111 
	~<¥o˚ss.h
>

114 
	sSQLôeThªad
 {

115 *
	mtid
;

116 
	mid
;

117 *(*
	mxTask
)(*);

118 *
	mpIn
;

119 *
	mpResu…
;

123 
__°dˇŒ
 
	$sqlôe3ThªadProc
(

124 *
pArg


126 
SQLôeThªad
 *
p
 = (SQLôeThªad *)
pArg
;

128 
	`as£π
–
p
!=0 );

136 
	`as£π
–
p
->
id
==
	`GëCuºítThªadId
() );

138 
	`as£π
–
p
->
xTask
!=0 );

139 
p
->
pResu…
 =Ö->
	`xTask
’->
pIn
);

141 
	`_ídthªadex
(0);

143 
	}
}

146 
sqlôe3ThªadCª©e
(

147 
SQLôeThªad
 **
µThªad
,

148 *(*
xTask
)(*),

149 *
pIn


151 
SQLôeThªad
 *
	gp
;

153 
as£π
–
µThªad
!=0 );

154 
as£π
–
xTask
!=0 );

155 *
	gµThªad
 = 0;

156 
	gp
 = 
sqlôe3MÆloc
((*
p
));

157 if–
	gp
==0 )  
SQLITE_NOMEM_BKPT
;

163 if–
	gsqlôe3GlobÆC⁄fig
.
	gbC‹eMuãx
==0 || 
sqlôe3Fau…Sim
(200) ){

164 
mem£t
(
p
, 0, (*p));

166 
	gp
->
	gxTask
 = 
xTask
;

167 
	gp
->
	gpIn
 = 
pIn
;

168 
	gp
->
	gtid
 = (*)
_begöthªadex
(0, 0, 
sqlôe3ThªadProc
, 
p
, 0, &p->
id
);

169 if–
	gp
->
	gtid
==0 ){

170 
mem£t
(
p
, 0, (*p));

173 if–
	gp
->
	gxTask
==0 ){

174 
p
->
id
 = 
GëCuºítThªadId
();

175 
	gp
->
	gpResu…
 = 
xTask
(
pIn
);

177 *
	gµThªad
 = 
p
;

178  
	gSQLITE_OK
;

181 
DWORD
 
sqlôe3Wö32Waô
(
HANDLE
 
hObje˘
);

184 
	$sqlôe3ThªadJoö
(
SQLôeThªad
 *
p
, **
µOut
){

185 
DWORD
 
rc
;

186 
BOOL
 
bRc
;

188 
	`as£π
–
µOut
!=0 );

189 if–
	`NEVER
(
p
==0ËË 
SQLITE_NOMEM_BKPT
;

190 if–
p
->
xTask
==0 ){

192 
rc
 = 
WAIT_OBJECT_0
;

193 
	`as£π
–
p
->
tid
==0 );

195 
	`as£π
–
p
->
id
!=0 &&Ö->id!=
	`GëCuºítThªadId
() );

196 
rc
 = 
	`sqlôe3Wö32Waô
((
HANDLE
)
p
->
tid
);

197 
	`as£π
–
rc
!=
WAIT_IO_COMPLETION
 );

198 
bRc
 = 
	`Clo£H™dÀ
((
HANDLE
)
p
->
tid
);

199 
	`as£π
–
bRc
 );

201 if–
rc
==
WAIT_OBJECT_0
 ) *
µOut
 = 
p
->
pResu…
;

202 
	`sqlôe3_‰ì
(
p
);

203  (
rc
==
WAIT_OBJECT_0
Ë? 
SQLITE_OK
 : 
SQLITE_ERROR
;

204 
	}
}

211 #i‚de‡
SQLITE_THREADS_IMPLEMENTED


219 
	sSQLôeThªad
 {

220 *(*
	mxTask
)(*);

221 *
	mpIn
;

222 *
	mpResu…
;

226 
sqlôe3ThªadCª©e
(

227 
SQLôeThªad
 **
µThªad
,

228 *(*
xTask
)(*),

229 *
pIn


231 
SQLôeThªad
 *
	gp
;

233 
as£π
–
µThªad
!=0 );

234 
as£π
–
xTask
!=0 );

235 *
	gµThªad
 = 0;

236 
	gp
 = 
sqlôe3MÆloc
((*
p
));

237 if–
	gp
==0 )  
SQLITE_NOMEM_BKPT
;

238 if–(
SQLITE_PTR_TO_INT
(
p
)/17)&1 ){

239 
	gp
->
	gxTask
 = 
xTask
;

240 
	gp
->
	gpIn
 = 
pIn
;

242 
	gp
->
	gxTask
 = 0;

243 
	gp
->
	gpResu…
 = 
xTask
(
pIn
);

245 *
	gµThªad
 = 
p
;

246  
	gSQLITE_OK
;

250 
	$sqlôe3ThªadJoö
(
SQLôeThªad
 *
p
, **
µOut
){

252 
	`as£π
–
µOut
!=0 );

253 if–
	`NEVER
(
p
==0ËË 
SQLITE_NOMEM_BKPT
;

254 if–
p
->
xTask
 ){

255 *
µOut
 = 
p
->
	`xTask
’->
pIn
);

257 *
µOut
 = 
p
->
pResu…
;

259 
	`sqlôe3_‰ì
(
p
);

261 #i‡
	`deföed
(
SQLITE_TEST
)

263 *
pT°AŒoc
 = 
	`sqlôe3MÆloc
(10);

264 i‡(!
pT°AŒoc
Ë 
SQLITE_NOMEM_BKPT
;

265 
	`sqlôe3_‰ì
(
pT°AŒoc
);

269  
SQLITE_OK
;

270 
	}
}

	@tokenize.c

18 
	~"sqlôeI¡.h
"

19 
	~<°dlib.h
>

29 
	#CC_X
 0

	)

30 
	#CC_KYWD
 1

	)

31 
	#CC_ID
 2

	)

32 
	#CC_DIGIT
 3

	)

33 
	#CC_DOLLAR
 4

	)

34 
	#CC_VARALPHA
 5

	)

35 
	#CC_VARNUM
 6

	)

36 
	#CC_SPACE
 7

	)

37 
	#CC_QUOTE
 8

	)

38 
	#CC_QUOTE2
 9

	)

39 
	#CC_PIPE
 10

	)

40 
	#CC_MINUS
 11

	)

41 
	#CC_LT
 12

	)

42 
	#CC_GT
 13

	)

43 
	#CC_EQ
 14

	)

44 
	#CC_BANG
 15

	)

45 
	#CC_SLASH
 16

	)

46 
	#CC_LP
 17

	)

47 
	#CC_RP
 18

	)

48 
	#CC_SEMI
 19

	)

49 
	#CC_PLUS
 20

	)

50 
	#CC_STAR
 21

	)

51 
	#CC_PERCENT
 22

	)

52 
	#CC_COMMA
 23

	)

53 
	#CC_AND
 24

	)

54 
	#CC_TILDA
 25

	)

55 
	#CC_DOT
 26

	)

56 
	#CC_ILLEGAL
 27

	)

58 c⁄° 
	gaiCœss
[] = {

59 #ifde‡
SQLITE_ASCII


78 #ifde‡
SQLITE_EBCDIC


108 #ifde‡
SQLITE_ASCII


109 
	#ch¨M≠
(
X
Ë
sqlôe3UµîToLowî
[()X]

	)

111 #ifde‡
SQLITE_EBCDIC


112 
	#ch¨M≠
(
X
Ë
ebcdicToAscii
[()X]

	)

113 c⁄° 
	gebcdicToAscii
[] = {

145 
	~"keyw‹dhash.h
"

164 #ifde‡
SQLITE_ASCII


165 
	#IdCh¨
(
C
Ë((
sqlôe3Cty≥M≠
[()C]&0x46)!=0)

	)

167 #ifde‡
SQLITE_EBCDIC


168 c⁄° 
	gsqlôe3IsEbcdicIdCh¨
[] = {

183 
	#IdCh¨
(
C
Ë(((
c
=C)>=0x42 && 
sqlôe3IsEbcdicIdCh¨
[c-0x40]))

	)

187 #i‚de‡
SQLITE_OMIT_COMPILEOPTION_DIAGS


188 
	$sqlôe3IsIdCh¨
(
u8
 
c
){  
	`IdCh¨
(c); 
	}
}

196 
	$sqlôe3GëTokí
(c⁄° *
z
, *
tokíTy≥
){

197 
i
, 
c
;

198  
aiCœss
[*
z
] ){

201 
CC_SPACE
: {

202 
	`ã°ˇ£
–
z
[0]==' ' );

203 
	`ã°ˇ£
–
z
[0]=='\t' );

204 
	`ã°ˇ£
–
z
[0]=='\n' );

205 
	`ã°ˇ£
–
z
[0]=='\f' );

206 
	`ã°ˇ£
–
z
[0]=='\r' );

207 
i
=1; 
	`sqlôe3Is•a˚
(
z
[i]); i++){}

208 *
tokíTy≥
 = 
TK_SPACE
;

209  
i
;

211 
CC_MINUS
: {

212 if–
z
[1]=='-' ){

213 
i
=2; (
c
=
z
[i])!=0 && c!='\n'; i++){}

214 *
tokíTy≥
 = 
TK_SPACE
;

215  
i
;

217 *
tokíTy≥
 = 
TK_MINUS
;

220 
CC_LP
: {

221 *
tokíTy≥
 = 
TK_LP
;

224 
CC_RP
: {

225 *
tokíTy≥
 = 
TK_RP
;

228 
CC_SEMI
: {

229 *
tokíTy≥
 = 
TK_SEMI
;

232 
CC_PLUS
: {

233 *
tokíTy≥
 = 
TK_PLUS
;

236 
CC_STAR
: {

237 *
tokíTy≥
 = 
TK_STAR
;

240 
CC_SLASH
: {

241 if–
z
[1]!='*' || z[2]==0 ){

242 *
tokíTy≥
 = 
TK_SLASH
;

245 
i
=3, 
c
=
z
[2]; (c!='*' || z[i]!='/') && (c=z[i])!=0; i++){}

246 if–
c
 ) 
i
++;

247 *
tokíTy≥
 = 
TK_SPACE
;

248  
i
;

250 
CC_PERCENT
: {

251 *
tokíTy≥
 = 
TK_REM
;

254 
CC_EQ
: {

255 *
tokíTy≥
 = 
TK_EQ
;

256  1 + (
z
[1]=='=');

258 
CC_LT
: {

259 if–(
c
=
z
[1])=='=' ){

260 *
tokíTy≥
 = 
TK_LE
;

262 }if–
c
=='>' ){

263 *
tokíTy≥
 = 
TK_NE
;

265 }if–
c
=='<' ){

266 *
tokíTy≥
 = 
TK_LSHIFT
;

269 *
tokíTy≥
 = 
TK_LT
;

273 
CC_GT
: {

274 if–(
c
=
z
[1])=='=' ){

275 *
tokíTy≥
 = 
TK_GE
;

277 }if–
c
=='>' ){

278 *
tokíTy≥
 = 
TK_RSHIFT
;

281 *
tokíTy≥
 = 
TK_GT
;

285 
CC_BANG
: {

286 if–
z
[1]!='=' ){

287 *
tokíTy≥
 = 
TK_ILLEGAL
;

290 *
tokíTy≥
 = 
TK_NE
;

294 
CC_PIPE
: {

295 if–
z
[1]!='|' ){

296 *
tokíTy≥
 = 
TK_BITOR
;

299 *
tokíTy≥
 = 
TK_CONCAT
;

303 
CC_COMMA
: {

304 *
tokíTy≥
 = 
TK_COMMA
;

307 
CC_AND
: {

308 *
tokíTy≥
 = 
TK_BITAND
;

311 
CC_TILDA
: {

312 *
tokíTy≥
 = 
TK_BITNOT
;

315 
CC_QUOTE
: {

316 
dñim
 = 
z
[0];

317 
	`ã°ˇ£
–
dñim
=='`' );

318 
	`ã°ˇ£
–
dñim
=='\'' );

319 
	`ã°ˇ£
–
dñim
=='"' );

320 
i
=1; (
c
=
z
[i])!=0; i++){

321 if–
c
==
dñim
 ){

322 if–
z
[
i
+1]==
dñim
 ){

323 
i
++;

329 if–
c
=='\'' ){

330 *
tokíTy≥
 = 
TK_STRING
;

331  
i
+1;

332 }if–
c
!=0 ){

333 *
tokíTy≥
 = 
TK_ID
;

334  
i
+1;

336 *
tokíTy≥
 = 
TK_ILLEGAL
;

337  
i
;

340 
CC_DOT
: {

341 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


342 if–!
	`sqlôe3Isdigô
(
z
[1]) )

345 *
tokíTy≥
 = 
TK_DOT
;

351 
CC_DIGIT
: {

352 
	`ã°ˇ£
–
z
[0]=='0' );Åestcase( z[0]=='1' );Åestcase( z[0]=='2' );

353 
	`ã°ˇ£
–
z
[0]=='3' );Åestcase( z[0]=='4' );Åestcase( z[0]=='5' );

354 
	`ã°ˇ£
–
z
[0]=='6' );Åestcase( z[0]=='7' );Åestcase( z[0]=='8' );

355 
	`ã°ˇ£
–
z
[0]=='9' );

356 *
tokíTy≥
 = 
TK_INTEGER
;

357 #i‚de‡
SQLITE_OMIT_HEX_INTEGER


358 if–
z
[0]=='0' && (z[1]=='x' || z[1]=='X'Ë&& 
	`sqlôe3Isxdigô
(z[2]) ){

359 
i
=3; 
	`sqlôe3Isxdigô
(
z
[i]); i++){}

360  
i
;

363 
i
=0; 
	`sqlôe3Isdigô
(
z
[i]); i++){}

364 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


365 if–
z
[
i
]=='.' ){

366 
i
++;

367  
	`sqlôe3Isdigô
(
z
[
i
]) ){ i++; }

368 *
tokíTy≥
 = 
TK_FLOAT
;

370 if–(
z
[
i
]=='e' || z[i]=='E') &&

371 –
	`sqlôe3Isdigô
(
z
[
i
+1])

372 || ((
z
[
i
+1]=='+' || z[i+1]=='-'Ë&& 
	`sqlôe3Isdigô
(z[i+2]))

375 
i
 += 2;

376  
	`sqlôe3Isdigô
(
z
[
i
]) ){ i++; }

377 *
tokíTy≥
 = 
TK_FLOAT
;

380  
	`IdCh¨
(
z
[
i
]) ){

381 *
tokíTy≥
 = 
TK_ILLEGAL
;

382 
i
++;

384  
i
;

386 
CC_QUOTE2
: {

387 
i
=1, 
c
=
z
[0]; c!=']' && (c=z[i])!=0; i++){}

388 *
tokíTy≥
 = 
c
==']' ? 
TK_ID
 : 
TK_ILLEGAL
;

389  
i
;

391 
CC_VARNUM
: {

392 *
tokíTy≥
 = 
TK_VARIABLE
;

393 
i
=1; 
	`sqlôe3Isdigô
(
z
[i]); i++){}

394  
i
;

396 
CC_DOLLAR
:

397 
CC_VARALPHA
: {

398 
n
 = 0;

399 
	`ã°ˇ£
–
z
[0]=='$' );Åestcase( z[0]=='@' );

400 
	`ã°ˇ£
–
z
[0]==':' );Åestcase( z[0]=='#' );

401 *
tokíTy≥
 = 
TK_VARIABLE
;

402 
i
=1; (
c
=
z
[i])!=0; i++){

403 if–
	`IdCh¨
(
c
) ){

404 
n
++;

405 #i‚de‡
SQLITE_OMIT_TCL_VARIABLE


406 }if–
c
=='(' && 
n
>0 ){

408 
i
++;

409 } (
c
=
z
[
i
])!=0 && !
	`sqlôe3Is•a˚
(c) && c!=')' );

410 if–
c
==')' ){

411 
i
++;

413 *
tokíTy≥
 = 
TK_ILLEGAL
;

416 }if–
c
==':' && 
z
[
i
+1]==':' ){

417 
i
++;

423 if–
n
==0 ) *
tokíTy≥
 = 
TK_ILLEGAL
;

424  
i
;

426 
CC_KYWD
: {

427 
i
=1; 
aiCœss
[
z
[i]]<=
CC_KYWD
; i++){}

428 if–
	`IdCh¨
(
z
[
i
]) ){

432 
i
++;

435 *
tokíTy≥
 = 
TK_ID
;

436  
	`keyw‹dCode
((*)
z
, 
i
, 
tokíTy≥
);

438 
CC_X
: {

439 #i‚de‡
SQLITE_OMIT_BLOB_LITERAL


440 
	`ã°ˇ£
–
z
[0]=='x' );Åestcase( z[0]=='X' );

441 if–
z
[1]=='\'' ){

442 *
tokíTy≥
 = 
TK_BLOB
;

443 
i
=2; 
	`sqlôe3Isxdigô
(
z
[i]); i++){}

444 if–
z
[
i
]!='\'' || i%2 ){

445 *
tokíTy≥
 = 
TK_ILLEGAL
;

446  
z
[
i
] && z[i]!='\'' ){ i++; }

448 if–
z
[
i
] ) i++;

449  
i
;

455 
CC_ID
: {

456 
i
 = 1;

460 *
tokíTy≥
 = 
TK_ILLEGAL
;

464  
	`IdCh¨
(
z
[
i
]) ){ i++; }

465 *
tokíTy≥
 = 
TK_ID
;

466  
i
;

467 
	}
}

476 
	$sqlôe3RunP¨£r
(
P¨£
 *
pP¨£
, c⁄° *
zSql
, **
pzEºMsg
){

477 
nEº
 = 0;

478 
i
;

479 *
pEngöe
;

480 
tokíTy≥
;

481 
œ°TokíP¨£d
 = -1;

482 
sqlôe3
 *
db
 = 
pP¨£
->db;

483 
mxSqlLí
;

485 
	`as£π
–
zSql
!=0 );

486 
mxSqlLí
 = 
db
->
aLimô
[
SQLITE_LIMIT_SQL_LENGTH
];

487 if–
db
->
nVdbeA˘ive
==0 ){

488 
db
->
u1
.
isI¡îru±ed
 = 0;

490 
pP¨£
->
rc
 = 
SQLITE_OK
;

491 
pP¨£
->
zTaû
 = 
zSql
;

492 
i
 = 0;

493 
	`as£π
–
pzEºMsg
!=0 );

495 
pEngöe
 = 
	`sqlôe3P¨£rAŒoc
(
sqlôe3MÆloc
);

496 if–
pEngöe
==0 ){

497 
	`sqlôe3OomFau…
(
db
);

498  
SQLITE_NOMEM_BKPT
;

500 
	`as£π
–
pP¨£
->
pNewTabÀ
==0 );

501 
	`as£π
–
pP¨£
->
pNewTriggî
==0 );

502 
	`as£π
–
pP¨£
->
nV¨
==0 );

503 
	`as£π
–
pP¨£
->
nzV¨
==0 );

504 
	`as£π
–
pP¨£
->
azV¨
==0 );

505  
zSql
[
i
]!=0 ){

506 
	`as£π
–
i
>=0 );

507 
pP¨£
->
sLa°Tokí
.
z
 = &
zSql
[
i
];

508 
pP¨£
->
sLa°Tokí
.
n
 = 
	`sqlôe3GëTokí
((*)&
zSql
[
i
],&
tokíTy≥
);

509 
i
 +
pP¨£
->
sLa°Tokí
.
n
;

510 if–
i
>
mxSqlLí
 ){

511 
pP¨£
->
rc
 = 
SQLITE_TOOBIG
;

514 if–
tokíTy≥
>=
TK_SPACE
 ){

515 
	`as£π
–
tokíTy≥
==
TK_SPACE
 ||ÅokíTy≥==
TK_ILLEGAL
 );

516 if–
db
->
u1
.
isI¡îru±ed
 ){

517 
pP¨£
->
rc
 = 
SQLITE_INTERRUPT
;

520 if–
tokíTy≥
==
TK_ILLEGAL
 ){

521 
	`sqlôe3Eº‹Msg
(
pP¨£
, "unrecognizedÅoken: \"%T\"",

522 &
pP¨£
->
sLa°Tokí
);

526 
	`sqlôe3P¨£r
(
pEngöe
, 
tokíTy≥
, 
pP¨£
->
sLa°Tokí
,ÖParse);

527 
œ°TokíP¨£d
 = 
tokíTy≥
;

528 if–
pP¨£
->
rc
!=
SQLITE_OK
 || 
db
->
mÆlocFaûed
 ) ;

531 
	`as£π
–
nEº
==0 );

532 
pP¨£
->
zTaû
 = &
zSql
[
i
];

533 if–
pP¨£
->
rc
==
SQLITE_OK
 && 
db
->
mÆlocFaûed
==0 ){

534 
	`as£π
–
zSql
[
i
]==0 );

535 if–
œ°TokíP¨£d
!=
TK_SEMI
 ){

536 
	`sqlôe3P¨£r
(
pEngöe
, 
TK_SEMI
, 
pP¨£
->
sLa°Tokí
,ÖParse);

538 if–
pP¨£
->
rc
==
SQLITE_OK
 && 
db
->
mÆlocFaûed
==0 ){

539 
	`sqlôe3P¨£r
(
pEngöe
, 0, 
pP¨£
->
sLa°Tokí
,ÖParse);

542 #ifde‡
YYTRACKMAXSTACKDEPTH


543 
	`sqlôe3_muãx_íãr
(
	`sqlôe3MÆlocMuãx
());

544 
	`sqlôe3SètusHighw©î
(
SQLITE_STATUS_PARSER_STACK
,

545 
	`sqlôe3P¨£rSèckPók
(
pEngöe
)

547 
	`sqlôe3_muãx_Àave
(
	`sqlôe3MÆlocMuãx
());

549 
	`sqlôe3P¨£rFªe
(
pEngöe
, 
sqlôe3_‰ì
);

550 if–
db
->
mÆlocFaûed
 ){

551 
pP¨£
->
rc
 = 
SQLITE_NOMEM_BKPT
;

553 if–
pP¨£
->
rc
!=
SQLITE_OK
 &&ÖP¨£->rc!=
SQLITE_DONE
 &&ÖP¨£->
zEºMsg
==0 ){

554 
pP¨£
->
zEºMsg
 = 
	`sqlôe3MPrötf
(
db
, "%s", 
	`sqlôe3EºSå
’P¨£->
rc
));

556 
	`as£π
–
pzEºMsg
!=0 );

557 if–
pP¨£
->
zEºMsg
 ){

558 *
pzEºMsg
 = 
pP¨£
->
zEºMsg
;

559 
	`sqlôe3_log
(
pP¨£
->
rc
, "%s", *
pzEºMsg
);

560 
pP¨£
->
zEºMsg
 = 0;

561 
nEº
++;

563 if–
pP¨£
->
pVdbe
 &&ÖP¨£->
nEº
>0 &&ÖP¨£->
√°ed
==0 ){

564 
	`sqlôe3VdbeDñëe
(
pP¨£
->
pVdbe
);

565 
pP¨£
->
pVdbe
 = 0;

567 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


568 if–
pP¨£
->
√°ed
==0 ){

569 
	`sqlôe3DbFªe
(
db
, 
pP¨£
->
aTabÀLock
);

570 
pP¨£
->
aTabÀLock
 = 0;

571 
pP¨£
->
nTabÀLock
 = 0;

574 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


575 
	`sqlôe3_‰ì
(
pP¨£
->
≠VèbLock
);

578 if–!
IN_DECLARE_VTAB
 ){

583 
	`sqlôe3DñëeTabÀ
(
db
, 
pP¨£
->
pNewTabÀ
);

586 if–
pP¨£
->
pWôhToFªe
 ) 
	`sqlôe3WôhDñëe
(
db
,ÖParse->pWithToFree);

587 
	`sqlôe3DñëeTriggî
(
db
, 
pP¨£
->
pNewTriggî
);

588 
i
=
pP¨£
->
nzV¨
-1; i>=0; i--Ë
	`sqlôe3DbFªe
(
db
,ÖP¨£->
azV¨
[i]);

589 
	`sqlôe3DbFªe
(
db
, 
pP¨£
->
azV¨
);

590  
pP¨£
->
pAöc
 ){

591 
AutoöcInfo
 *
p
 = 
pP¨£
->
pAöc
;

592 
pP¨£
->
pAöc
 = 
p
->
pNext
;

593 
	`sqlôe3DbFªe
(
db
, 
p
);

595  
pP¨£
->
pZombõTab
 ){

596 
TabÀ
 *
p
 = 
pP¨£
->
pZombõTab
;

597 
pP¨£
->
pZombõTab
 = 
p
->
pNextZombõ
;

598 
	`sqlôe3DñëeTabÀ
(
db
, 
p
);

600 
	`as£π
–
nEº
==0 || 
pP¨£
->
rc
!=
SQLITE_OK
 );

601  
nEº
;

602 
	}
}

	@treeview.c

20 
	~"sqlôeI¡.h
"

21 #ifde‡
SQLITE_DEBUG


27 
TªeVõw
 *
	$sqlôe3TªeVõwPush
(
TªeVõw
 *
p
, 
u8
 
m‹eToFﬁlow
){

28 if–
p
==0 ){

29 
p
 = 
	`sqlôe3_mÆloc64
( (*p) );

30 if–
p
==0 )  0;

31 
	`mem£t
(
p
, 0, (*p));

33 
p
->
iLevñ
++;

35 
	`as£π
–
m‹eToFﬁlow
==0 || moreToFollow==1 );

36 if–
p
->
iLevñ
<’->
bLöe
ËËp->bLöe[p->iLevñ] = 
m‹eToFﬁlow
;

37  
p
;

38 
	}
}

43 
	$sqlôe3TªeVõwP›
(
TªeVõw
 *
p
){

44 if–
p
==0 ) ;

45 
p
->
iLevñ
--;

46 if–
p
->
iLevñ
<0 ) 
	`sqlôe3_‰ì
(p);

47 
	}
}

53 
	$sqlôe3TªeVõwLöe
(
TªeVõw
 *
p
, c⁄° *
zF‹m©
, ...){

54 
va_li°
 
≠
;

55 
i
;

56 
SåAccum
 
acc
;

57 
zBuf
[500];

58 
	`sqlôe3SåAccumInô
(&
acc
, 0, 
zBuf
, (zBuf), 0);

59 if–
p
 ){

60 
i
=0; i<
p
->
iLevñ
 && i<’->
bLöe
)-1; i++){

61 
	`sqlôe3SåAccumAµíd
(&
acc
, 
p
->
bLöe
[
i
] ? "| " : " ", 4);

63 
	`sqlôe3SåAccumAµíd
(&
acc
, 
p
->
bLöe
[
i
] ? "|-- " : "'-- ", 4);

65 
	`va_°¨t
(
≠
, 
zF‹m©
);

66 
	`sqlôe3VXPrötf
(&
acc
, 
zF‹m©
, 
≠
);

67 
	`va_íd
(
≠
);

68 if–
zBuf
[
acc
.
nCh¨
-1]!='\n' ) 
	`sqlôe3SåAccumAµíd
(&acc, "\n", 1);

69 
	`sqlôe3SåAccumFöish
(&
acc
);

70 
	`Ârötf
(
°dout
,"%s", 
zBuf
);

71 
	`fÊush
(
°dout
);

72 
	}
}

77 
	$sqlôe3TªeVõwIãm
(
TªeVõw
 *
p
, c⁄° *
zLabñ
,
u8
 
m‹eFﬁlows
){

78 
p
 = 
	`sqlôe3TªeVõwPush
’, 
m‹eFﬁlows
);

79 
	`sqlôe3TªeVõwLöe
(
p
, "%s", 
zLabñ
);

80 
	}
}

85 
	$sqlôe3TªeVõwWôh
(
TªeVõw
 *
pVõw
, c⁄° 
Wôh
 *
pWôh
, 
u8
 
m‹eToFﬁlow
){

86 
i
;

87 if–
pWôh
==0 ) ;

88 if–
pWôh
->
nCã
==0 ) ;

89 if–
pWôh
->
pOuãr
 ){

90 
	`sqlôe3TªeVõwLöe
(
pVõw
, "WITH (0x%p,ÖOuãr=0x%p)",
pWôh
,pWôh->
pOuãr
);

92 
	`sqlôe3TªeVõwLöe
(
pVõw
, "WITH (0x%p)", 
pWôh
);

94 if–
pWôh
->
nCã
>0 ){

95 
pVõw
 = 
	`sqlôe3TªeVõwPush
(pView, 1);

96 
i
=0; i<
pWôh
->
nCã
; i++){

97 
SåAccum
 
x
;

98 
zLöe
[1000];

99 c⁄° 
Cã
 *
pCã
 = &
pWôh
->
a
[
i
];

100 
	`sqlôe3SåAccumInô
(&
x
, 0, 
zLöe
, (zLine), 0);

101 
	`sqlôe3XPrötf
(&
x
, "%s", 
pCã
->
zName
);

102 if–
pCã
->
pCﬁs
 &&ÖCã->pCﬁs->
nEx¥
>0 ){

103 
cSï
 = '(';

104 
j
;

105 
j
=0; j<
pCã
->
pCﬁs
->
nEx¥
; j++){

106 
	`sqlôe3XPrötf
(&
x
, "%c%s", 
cSï
, 
pCã
->
pCﬁs
->
a
[
j
].
zName
);

107 
cSï
 = ',';

109 
	`sqlôe3XPrötf
(&
x
, ")");

111 
	`sqlôe3XPrötf
(&
x
, " AS");

112 
	`sqlôe3SåAccumFöish
(&
x
);

113 
	`sqlôe3TªeVõwIãm
(
pVõw
, 
zLöe
, 
i
<
pWôh
->
nCã
-1);

114 
	`sqlôe3TªeVõwSñe˘
(
pVõw
, 
pCã
->
pSñe˘
, 0);

115 
	`sqlôe3TªeVõwP›
(
pVõw
);

117 
	`sqlôe3TªeVõwP›
(
pVõw
);

119 
	}
}

125 
	$sqlôe3TªeVõwSñe˘
(
TªeVõw
 *
pVõw
, c⁄° 
Sñe˘
 *
p
, 
u8
 
m‹eToFﬁlow
){

126 
n
 = 0;

127 
˙t
 = 0;

128 
pVõw
 = 
	`sqlôe3TªeVõwPush
’Võw, 
m‹eToFﬁlow
);

129 if–
p
->
pWôh
 ){

130 
	`sqlôe3TªeVõwWôh
(
pVõw
, 
p
->
pWôh
, 1);

131 
˙t
 = 1;

132 
	`sqlôe3TªeVõwPush
(
pVõw
, 1);

135 
	`sqlôe3TªeVõwLöe
(
pVõw
, "SELECT%s%s (0x%p) selFlags=0x%xÇSelectRow=%d",

136 ((
p
->
£lFœgs
 & 
SF_Di°ö˘
) ? " DISTINCT" : ""),

137 ((
p
->
£lFœgs
 & 
SF_Aggªg©e
) ? "ágg_flag" : ""),Ö,Ö->selFlags,

138 ()
p
->
nSñe˘Row


140 if–
˙t
++ ) 
	`sqlôe3TªeVõwP›
(
pVõw
);

141 if–
p
->
pPri‹
 ){

142 
n
 = 1000;

144 
n
 = 0;

145 if–
p
->
pSrc
 &&Ö->pSrc->
nSrc
 ) 
n
++;

146 if–
p
->
pWhîe
 ) 
n
++;

147 if–
p
->
pGroupBy
 ) 
n
++;

148 if–
p
->
pHavög
 ) 
n
++;

149 if–
p
->
pOrdîBy
 ) 
n
++;

150 if–
p
->
pLimô
 ) 
n
++;

151 if–
p
->
pOff£t
 ) 
n
++;

153 
	`sqlôe3TªeVõwEx¥Li°
(
pVõw
, 
p
->
pELi°
, (
n
--)>0, "result-set");

154 if–
p
->
pSrc
 &&Ö->pSrc->
nSrc
 ){

155 
i
;

156 
pVõw
 = 
	`sqlôe3TªeVõwPush
’Võw, (
n
--)>0);

157 
	`sqlôe3TªeVõwLöe
(
pVõw
, "FROM");

158 
i
=0; i<
p
->
pSrc
->
nSrc
; i++){

159 
SrcLi°_ôem
 *
pIãm
 = &
p
->
pSrc
->
a
[
i
];

160 
SåAccum
 
x
;

161 
zLöe
[100];

162 
	`sqlôe3SåAccumInô
(&
x
, 0, 
zLöe
, (zLine), 0);

163 
	`sqlôe3XPrötf
(&
x
, "{%d,*}", 
pIãm
->
iCurs‹
);

164 if–
pIãm
->
zD©aba£
 ){

165 
	`sqlôe3XPrötf
(&
x
, " %s.%s", 
pIãm
->
zD©aba£
,ÖIãm->
zName
);

166 }if–
pIãm
->
zName
 ){

167 
	`sqlôe3XPrötf
(&
x
, " %s", 
pIãm
->
zName
);

169 if–
pIãm
->
pTab
 ){

170 
	`sqlôe3XPrötf
(&
x
, "Åab«me=%Q", 
pIãm
->
pTab
->
zName
);

172 if–
pIãm
->
zAlüs
 ){

173 
	`sqlôe3XPrötf
(&
x
, " (AS %s)", 
pIãm
->
zAlüs
);

175 if–
pIãm
->
fg
.
joöty≥
 & 
JT_LEFT
 ){

176 
	`sqlôe3XPrötf
(&
x
, " LEFT-JOIN");

178 
	`sqlôe3SåAccumFöish
(&
x
);

179 
	`sqlôe3TªeVõwIãm
(
pVõw
, 
zLöe
, 
i
<
p
->
pSrc
->
nSrc
-1);

180 if–
pIãm
->
pSñe˘
 ){

181 
	`sqlôe3TªeVõwSñe˘
(
pVõw
, 
pIãm
->
pSñe˘
, 0);

183 if–
pIãm
->
fg
.
isTabFunc
 ){

184 
	`sqlôe3TªeVõwEx¥Li°
(
pVõw
, 
pIãm
->
u1
.
pFuncArg
, 0, "func-args:");

186 
	`sqlôe3TªeVõwP›
(
pVõw
);

188 
	`sqlôe3TªeVõwP›
(
pVõw
);

190 if–
p
->
pWhîe
 ){

191 
	`sqlôe3TªeVõwIãm
(
pVõw
, "WHERE", (
n
--)>0);

192 
	`sqlôe3TªeVõwEx¥
(
pVõw
, 
p
->
pWhîe
, 0);

193 
	`sqlôe3TªeVõwP›
(
pVõw
);

195 if–
p
->
pGroupBy
 ){

196 
	`sqlôe3TªeVõwEx¥Li°
(
pVõw
, 
p
->
pGroupBy
, (
n
--)>0, "GROUPBY");

198 if–
p
->
pHavög
 ){

199 
	`sqlôe3TªeVõwIãm
(
pVõw
, "HAVING", (
n
--)>0);

200 
	`sqlôe3TªeVõwEx¥
(
pVõw
, 
p
->
pHavög
, 0);

201 
	`sqlôe3TªeVõwP›
(
pVõw
);

203 if–
p
->
pOrdîBy
 ){

204 
	`sqlôe3TªeVõwEx¥Li°
(
pVõw
, 
p
->
pOrdîBy
, (
n
--)>0, "ORDERBY");

206 if–
p
->
pLimô
 ){

207 
	`sqlôe3TªeVõwIãm
(
pVõw
, "LIMIT", (
n
--)>0);

208 
	`sqlôe3TªeVõwEx¥
(
pVõw
, 
p
->
pLimô
, 0);

209 
	`sqlôe3TªeVõwP›
(
pVõw
);

211 if–
p
->
pOff£t
 ){

212 
	`sqlôe3TªeVõwIãm
(
pVõw
, "OFFSET", (
n
--)>0);

213 
	`sqlôe3TªeVõwEx¥
(
pVõw
, 
p
->
pOff£t
, 0);

214 
	`sqlôe3TªeVõwP›
(
pVõw
);

216 if–
p
->
pPri‹
 ){

217 c⁄° *
zOp
 = "UNION";

218  
p
->
›
 ){

219 
TK_ALL
: 
zOp
 = "UNION ALL"; ;

220 
TK_INTERSECT
: 
zOp
 = "INTERSECT"; ;

221 
TK_EXCEPT
: 
zOp
 = "EXCEPT"; ;

223 
	`sqlôe3TªeVõwIãm
(
pVõw
, 
zOp
, 1);

225 
p
 =Ö->
pPri‹
;

226 } 
p
!=0 );

227 
	`sqlôe3TªeVõwP›
(
pVõw
);

228 
	}
}

233 
	$sqlôe3TªeVõwEx¥
(
TªeVõw
 *
pVõw
, c⁄° 
Ex¥
 *
pEx¥
, 
u8
 
m‹eToFﬁlow
){

234 c⁄° *
zBöOp
 = 0;

235 c⁄° *
zUniOp
 = 0;

236 
zFlgs
[30];

237 
pVõw
 = 
	`sqlôe3TªeVõwPush
’Võw, 
m‹eToFﬁlow
);

238 if–
pEx¥
==0 ){

239 
	`sqlôe3TªeVõwLöe
(
pVõw
, "nil");

240 
	`sqlôe3TªeVõwP›
(
pVõw
);

243 if–
pEx¥
->
Êags
 ){

244 
	`sqlôe3_¢¥ötf
((
zFlgs
),zFlgs," fœgs=0x%x",
pEx¥
->
Êags
);

246 
zFlgs
[0] = 0;

248  
pEx¥
->
›
 ){

249 
TK_AGG_COLUMN
: {

250 
	`sqlôe3TªeVõwLöe
(
pVõw
, "AGG{%d:%d}%s",

251 
pEx¥
->
iTabÀ
,ÖEx¥->
iCﬁumn
, 
zFlgs
);

254 
TK_COLUMN
: {

255 if–
pEx¥
->
iTabÀ
<0 ){

257 
	`sqlôe3TªeVõwLöe
(
pVõw
, "COLUMN(%d)%s", 
pEx¥
->
iCﬁumn
, 
zFlgs
);

259 
	`sqlôe3TªeVõwLöe
(
pVõw
, "{%d:%d}%s",

260 
pEx¥
->
iTabÀ
,ÖEx¥->
iCﬁumn
, 
zFlgs
);

264 
TK_INTEGER
: {

265 if–
pEx¥
->
Êags
 & 
EP_I¡VÆue
 ){

266 
	`sqlôe3TªeVõwLöe
(
pVõw
, "%d", 
pEx¥
->
u
.
iVÆue
);

268 
	`sqlôe3TªeVõwLöe
(
pVõw
, "%s", 
pEx¥
->
u
.
zTokí
);

272 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


273 
TK_FLOAT
: {

274 
	`sqlôe3TªeVõwLöe
(
pVõw
,"%s", 
pEx¥
->
u
.
zTokí
);

278 
TK_STRING
: {

279 
	`sqlôe3TªeVõwLöe
(
pVõw
,"%Q", 
pEx¥
->
u
.
zTokí
);

282 
TK_NULL
: {

283 
	`sqlôe3TªeVõwLöe
(
pVõw
,"NULL");

286 #i‚de‡
SQLITE_OMIT_BLOB_LITERAL


287 
TK_BLOB
: {

288 
	`sqlôe3TªeVõwLöe
(
pVõw
,"%s", 
pEx¥
->
u
.
zTokí
);

292 
TK_VARIABLE
: {

293 
	`sqlôe3TªeVõwLöe
(
pVõw
,"VARIABLE(%s,%d)",

294 
pEx¥
->
u
.
zTokí
,ÖEx¥->
iCﬁumn
);

297 
TK_REGISTER
: {

298 
	`sqlôe3TªeVõwLöe
(
pVõw
,"REGISTER(%d)", 
pEx¥
->
iTabÀ
);

301 
TK_ID
: {

302 
	`sqlôe3TªeVõwLöe
(
pVõw
,"ID \"%w\"", 
pEx¥
->
u
.
zTokí
);

305 #i‚de‡
SQLITE_OMIT_CAST


306 
TK_CAST
: {

308 
	`sqlôe3TªeVõwLöe
(
pVõw
,"CAST %Q", 
pEx¥
->
u
.
zTokí
);

309 
	`sqlôe3TªeVõwEx¥
(
pVõw
, 
pEx¥
->
pLe·
, 0);

313 
TK_LT
: 
zBöOp
 = "LT"; ;

314 
TK_LE
: 
zBöOp
 = "LE"; ;

315 
TK_GT
: 
zBöOp
 = "GT"; ;

316 
TK_GE
: 
zBöOp
 = "GE"; ;

317 
TK_NE
: 
zBöOp
 = "NE"; ;

318 
TK_EQ
: 
zBöOp
 = "EQ"; ;

319 
TK_IS
: 
zBöOp
 = "IS"; ;

320 
TK_ISNOT
: 
zBöOp
 = "ISNOT"; ;

321 
TK_AND
: 
zBöOp
 = "AND"; ;

322 
TK_OR
: 
zBöOp
 = "OR"; ;

323 
TK_PLUS
: 
zBöOp
 = "ADD"; ;

324 
TK_STAR
: 
zBöOp
 = "MUL"; ;

325 
TK_MINUS
: 
zBöOp
 = "SUB"; ;

326 
TK_REM
: 
zBöOp
 = "REM"; ;

327 
TK_BITAND
: 
zBöOp
 = "BITAND"; ;

328 
TK_BITOR
: 
zBöOp
 = "BITOR"; ;

329 
TK_SLASH
: 
zBöOp
 = "DIV"; ;

330 
TK_LSHIFT
: 
zBöOp
 = "LSHIFT"; ;

331 
TK_RSHIFT
: 
zBöOp
 = "RSHIFT"; ;

332 
TK_CONCAT
: 
zBöOp
 = "CONCAT"; ;

333 
TK_DOT
: 
zBöOp
 = "DOT"; ;

335 
TK_UMINUS
: 
zUniOp
 = "UMINUS"; ;

336 
TK_UPLUS
: 
zUniOp
 = "UPLUS"; ;

337 
TK_BITNOT
: 
zUniOp
 = "BITNOT"; ;

338 
TK_NOT
: 
zUniOp
 = "NOT"; ;

339 
TK_ISNULL
: 
zUniOp
 = "ISNULL"; ;

340 
TK_NOTNULL
: 
zUniOp
 = "NOTNULL"; ;

342 
TK_SPAN
: {

343 
	`sqlôe3TªeVõwLöe
(
pVõw
, "SPAN %Q", 
pEx¥
->
u
.
zTokí
);

344 
	`sqlôe3TªeVõwEx¥
(
pVõw
, 
pEx¥
->
pLe·
, 0);

348 
TK_COLLATE
: {

349 
	`sqlôe3TªeVõwLöe
(
pVõw
, "COLLATE %Q", 
pEx¥
->
u
.
zTokí
);

350 
	`sqlôe3TªeVõwEx¥
(
pVõw
, 
pEx¥
->
pLe·
, 0);

354 
TK_AGG_FUNCTION
:

355 
TK_FUNCTION
: {

356 
Ex¥Li°
 *
pF¨g
;

357 if–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_TokíO∆y
) ){

358 
pF¨g
 = 0;

360 
pF¨g
 = 
pEx¥
->
x
.
pLi°
;

362 if–
pEx¥
->
›
==
TK_AGG_FUNCTION
 ){

363 
	`sqlôe3TªeVõwLöe
(
pVõw
, "AGG_FUNCTION%d %Q",

364 
pEx¥
->
›2
,ÖEx¥->
u
.
zTokí
);

366 
	`sqlôe3TªeVõwLöe
(
pVõw
, "FUNCTION %Q", 
pEx¥
->
u
.
zTokí
);

368 if–
pF¨g
 ){

369 
	`sqlôe3TªeVõwEx¥Li°
(
pVõw
, 
pF¨g
, 0, 0);

373 #i‚de‡
SQLITE_OMIT_SUBQUERY


374 
TK_EXISTS
: {

375 
	`sqlôe3TªeVõwLöe
(
pVõw
, "EXISTS-expr");

376 
	`sqlôe3TªeVõwSñe˘
(
pVõw
, 
pEx¥
->
x
.
pSñe˘
, 0);

379 
TK_SELECT
: {

380 
	`sqlôe3TªeVõwLöe
(
pVõw
, "SELECT-expr");

381 
	`sqlôe3TªeVõwSñe˘
(
pVõw
, 
pEx¥
->
x
.
pSñe˘
, 0);

384 
TK_IN
: {

385 
	`sqlôe3TªeVõwLöe
(
pVõw
, "IN");

386 
	`sqlôe3TªeVõwEx¥
(
pVõw
, 
pEx¥
->
pLe·
, 1);

387 if–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_xIsSñe˘
) ){

388 
	`sqlôe3TªeVõwSñe˘
(
pVõw
, 
pEx¥
->
x
.
pSñe˘
, 0);

390 
	`sqlôe3TªeVõwEx¥Li°
(
pVõw
, 
pEx¥
->
x
.
pLi°
, 0, 0);

407 
TK_BETWEEN
: {

408 
Ex¥
 *
pX
 = 
pEx¥
->
pLe·
;

409 
Ex¥
 *
pY
 = 
pEx¥
->
x
.
pLi°
->
a
[0].pExpr;

410 
Ex¥
 *
pZ
 = 
pEx¥
->
x
.
pLi°
->
a
[1].pExpr;

411 
	`sqlôe3TªeVõwLöe
(
pVõw
, "BETWEEN");

412 
	`sqlôe3TªeVõwEx¥
(
pVõw
, 
pX
, 1);

413 
	`sqlôe3TªeVõwEx¥
(
pVõw
, 
pY
, 1);

414 
	`sqlôe3TªeVõwEx¥
(
pVõw
, 
pZ
, 0);

417 
TK_TRIGGER
: {

425 
	`sqlôe3TªeVõwLöe
(
pVõw
, "%s(%d)",

426 
pEx¥
->
iTabÀ
 ? "NEW" : "OLD",ÖEx¥->
iCﬁumn
);

429 
TK_CASE
: {

430 
	`sqlôe3TªeVõwLöe
(
pVõw
, "CASE");

431 
	`sqlôe3TªeVõwEx¥
(
pVõw
, 
pEx¥
->
pLe·
, 1);

432 
	`sqlôe3TªeVõwEx¥Li°
(
pVõw
, 
pEx¥
->
x
.
pLi°
, 0, 0);

435 #i‚de‡
SQLITE_OMIT_TRIGGER


436 
TK_RAISE
: {

437 c⁄° *
zTy≥
 = "unk";

438  
pEx¥
->
afföôy
 ){

439 
OE_Rﬁlback
: 
zTy≥
 = "rollback"; ;

440 
OE_Ab‹t
: 
zTy≥
 = "abort"; ;

441 
OE_Faû
: 
zTy≥
 = "fail"; ;

442 
OE_Ign‹e
: 
zTy≥
 = "ignore"; ;

444 
	`sqlôe3TªeVõwLöe
(
pVõw
, "RAISE %s(%Q)", 
zTy≥
, 
pEx¥
->
u
.
zTokí
);

449 
	`sqlôe3TªeVõwLöe
(
pVõw
, "›=%d", 
pEx¥
->
›
);

453 if–
zBöOp
 ){

454 
	`sqlôe3TªeVõwLöe
(
pVõw
, "%s%s", 
zBöOp
, 
zFlgs
);

455 
	`sqlôe3TªeVõwEx¥
(
pVõw
, 
pEx¥
->
pLe·
, 1);

456 
	`sqlôe3TªeVõwEx¥
(
pVõw
, 
pEx¥
->
pRight
, 0);

457 }if–
zUniOp
 ){

458 
	`sqlôe3TªeVõwLöe
(
pVõw
, "%s%s", 
zUniOp
, 
zFlgs
);

459 
	`sqlôe3TªeVõwEx¥
(
pVõw
, 
pEx¥
->
pLe·
, 0);

461 
	`sqlôe3TªeVõwP›
(
pVõw
);

462 
	}
}

467 
	$sqlôe3TªeVõwEx¥Li°
(

468 
TªeVõw
 *
pVõw
,

469 c⁄° 
Ex¥Li°
 *
pLi°
,

470 
u8
 
m‹eToFﬁlow
,

471 c⁄° *
zLabñ


473 
i
;

474 
pVõw
 = 
	`sqlôe3TªeVõwPush
’Võw, 
m‹eToFﬁlow
);

475 if–
zLabñ
==0 || zLabel[0]==0 ) zLabel = "LIST";

476 if–
pLi°
==0 ){

477 
	`sqlôe3TªeVõwLöe
(
pVõw
, "%†”m±y)", 
zLabñ
);

479 
	`sqlôe3TªeVõwLöe
(
pVõw
, "%s", 
zLabñ
);

480 
i
=0; i<
pLi°
->
nEx¥
; i++){

481 
j
 = 
pLi°
->
a
[
i
].
u
.
x
.
iOrdîByCﬁ
;

482 if–
j
 ){

483 
	`sqlôe3TªeVõwPush
(
pVõw
, 0);

484 
	`sqlôe3TªeVõwLöe
(
pVõw
, "iOrdîByCﬁ=%d", 
j
);

486 
	`sqlôe3TªeVõwEx¥
(
pVõw
, 
pLi°
->
a
[
i
].
pEx¥
, i<pLi°->
nEx¥
-1);

487 if–
j
 ) 
	`sqlôe3TªeVõwP›
(
pVõw
);

490 
	`sqlôe3TªeVõwP›
(
pVõw
);

491 
	}
}

	@trigger.c

13 
	~"sqlôeI¡.h
"

15 #i‚de‡
SQLITE_OMIT_TRIGGER


19 
	$sqlôe3DñëeTriggîSãp
(
sqlôe3
 *
db
, 
TriggîSãp
 *
pTriggîSãp
){

20  
pTriggîSãp
 ){

21 
TriggîSãp
 * 
pTmp
 = 
pTriggîSãp
;

22 
pTriggîSãp
 =ÖTriggîSãp->
pNext
;

24 
	`sqlôe3Ex¥Dñëe
(
db
, 
pTmp
->
pWhîe
);

25 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
pTmp
->
pEx¥Li°
);

26 
	`sqlôe3Sñe˘Dñëe
(
db
, 
pTmp
->
pSñe˘
);

27 
	`sqlôe3IdLi°Dñëe
(
db
, 
pTmp
->
pIdLi°
);

29 
	`sqlôe3DbFªe
(
db
, 
pTmp
);

31 
	}
}

47 
Triggî
 *
	$sqlôe3TriggîLi°
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTab
){

48 
Schema
 * c⁄° 
pTmpSchema
 = 
pP¨£
->
db
->
aDb
[1].
pSchema
;

49 
Triggî
 *
pLi°
 = 0;

51 if–
pP¨£
->
dißbÀTriggîs
 ){

55 if–
pTmpSchema
!=
pTab
->
pSchema
 ){

56 
HashEÀm
 *
p
;

57 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
pP¨£
->
db
, 0, 
pTmpSchema
) );

58 
p
=
	`sqlôeHashFú°
(&
pTmpSchema
->
åigHash
);Ö;Ö=
	`sqlôeHashNext
(p)){

59 
Triggî
 *
pTrig
 = (Triggî *)
	`sqlôeHashD©a
(
p
);

60 if–
pTrig
->
pTabSchema
==
pTab
->
pSchema


61 && 0==
	`sqlôe3SåICmp
(
pTrig
->
èbÀ
, 
pTab
->
zName
)

63 
pTrig
->
pNext
 = (
pLi°
 ?ÖLi° : 
pTab
->
pTriggî
);

64 
pLi°
 = 
pTrig
;

69  (
pLi°
 ?ÖLi° : 
pTab
->
pTriggî
);

70 
	}
}

80 
	$sqlôe3BegöTriggî
(

81 
P¨£
 *
pP¨£
,

82 
Tokí
 *
pName1
,

83 
Tokí
 *
pName2
,

84 
å_tm
,

85 
›
,

86 
IdLi°
 *
pCﬁumns
,

87 
SrcLi°
 *
pTabÀName
,

88 
Ex¥
 *
pWhí
,

89 
isTemp
,

90 
noEº


92 
Triggî
 *
pTriggî
 = 0;

93 
TabÀ
 *
pTab
;

94 *
zName
 = 0;

95 
sqlôe3
 *
db
 = 
pP¨£
->db;

96 
iDb
;

97 
Tokí
 *
pName
;

98 
DbFixî
 
sFix
;

99 
iTabDb
;

101 
	`as£π
–
pName1
!=0 );

102 
	`as£π
–
pName2
!=0 );

103 
	`as£π
–
›
==
TK_INSERT
 || op==
TK_UPDATE
 || op==
TK_DELETE
 );

104 
	`as£π
–
›
>0 && op<0xff );

105 if–
isTemp
 ){

107 if–
pName2
->
n
>0 ){

108 
	`sqlôe3Eº‹Msg
(
pP¨£
, "temporaryÅrigger mayÇot have qualifiedÇame");

109 
åiggî_˛ónup
;

111 
iDb
 = 1;

112 
pName
 = 
pName1
;

115 
iDb
 = 
	`sqlôe3TwoP¨tName
(
pP¨£
, 
pName1
, 
pName2
, &
pName
);

116 if–
iDb
<0 ){

117 
åiggî_˛ónup
;

120 if–!
pTabÀName
 || 
db
->
mÆlocFaûed
 ){

121 
åiggî_˛ónup
;

132 if–
db
->
öô
.
busy
 && 
iDb
!=1 ){

133 
	`sqlôe3DbFªe
(
db
, 
pTabÀName
->
a
[0].
zD©aba£
);

134 
pTabÀName
->
a
[0].
zD©aba£
 = 0;

142 
pTab
 = 
	`sqlôe3SrcLi°Lookup
(
pP¨£
, 
pTabÀName
);

143 if–
db
->
öô
.
busy
==0 && 
pName2
->
n
==0 && 
pTab


144 && 
pTab
->
pSchema
==
db
->
aDb
[1].pSchema ){

145 
iDb
 = 1;

149 if–
db
->
mÆlocFaûed
 ) 
åiggî_˛ónup
;

150 
	`as£π
–
pTabÀName
->
nSrc
==1 );

151 
	`sqlôe3FixInô
(&
sFix
, 
pP¨£
, 
iDb
, "åiggî", 
pName
);

152 if–
	`sqlôe3FixSrcLi°
(&
sFix
, 
pTabÀName
) ){

153 
åiggî_˛ónup
;

155 
pTab
 = 
	`sqlôe3SrcLi°Lookup
(
pP¨£
, 
pTabÀName
);

156 if–!
pTab
 ){

158 if–
db
->
öô
.
iDb
==1 ){

167 
db
->
öô
.
‹ph™Triggî
 = 1;

169 
åiggî_˛ónup
;

171 if–
	`IsVútuÆ
(
pTab
) ){

172 
	`sqlôe3Eº‹Msg
(
pP¨£
, "cannot createÅriggers on virtualÅables");

173 
åiggî_˛ónup
;

178 
zName
 = 
	`sqlôe3NameFromTokí
(
db
, 
pName
);

179 if–!
zName
 || 
SQLITE_OK
!=
	`sqlôe3CheckObje˘Name
(
pP¨£
, zName) ){

180 
åiggî_˛ónup
;

182 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

183 if–
	`sqlôe3HashFöd
(&(
db
->
aDb
[
iDb
].
pSchema
->
åigHash
),
zName
) ){

184 if–!
noEº
 ){

185 
	`sqlôe3Eº‹Msg
(
pP¨£
, "åiggî %TáÃódyÉxi°s", 
pName
);

187 
	`as£π
–!
db
->
öô
.
busy
 );

188 
	`sqlôe3CodeVîifySchema
(
pP¨£
, 
iDb
);

190 
åiggî_˛ónup
;

194 if–
	`sqlôe3SåNICmp
(
pTab
->
zName
, "sqlite_", 7)==0 ){

195 
	`sqlôe3Eº‹Msg
(
pP¨£
, "cannot createÅrigger on systemÅable");

196 
åiggî_˛ónup
;

202 if–
pTab
->
pSñe˘
 && 
å_tm
!=
TK_INSTEAD
 ){

203 
	`sqlôe3Eº‹Msg
(
pP¨£
, "cannot create %sÅrigger on view: %S",

204 (
å_tm
 =
TK_BEFORE
)?"BEFORE":"AFTER", 
pTabÀName
, 0);

205 
åiggî_˛ónup
;

207 if–!
pTab
->
pSñe˘
 && 
å_tm
==
TK_INSTEAD
 ){

208 
	`sqlôe3Eº‹Msg
(
pP¨£
, "cannot create INSTEAD OF"

209 "Åriggî o¿èbÀ: %S", 
pTabÀName
, 0);

210 
åiggî_˛ónup
;

212 
iTabDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pTab
->
pSchema
);

214 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


216 
code
 = 
SQLITE_CREATE_TRIGGER
;

217 c⁄° *
zDb
 = 
db
->
aDb
[
iTabDb
].
zName
;

218 c⁄° *
zDbTrig
 = 
isTemp
 ? 
db
->
aDb
[1].
zName
 : 
zDb
;

219 if–
iTabDb
==1 || 
isTemp
 ) 
code
 = 
SQLITE_CREATE_TEMP_TRIGGER
;

220 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
code
, 
zName
, 
pTab
->zName, 
zDbTrig
) ){

221 
åiggî_˛ónup
;

223 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_INSERT
, 
	`SCHEMA_TABLE
(
iTabDb
),0,
zDb
)){

224 
åiggî_˛ónup
;

234 i‡(
å_tm
 =
TK_INSTEAD
){

235 
å_tm
 = 
TK_BEFORE
;

239 
pTriggî
 = (
Triggî
*)
	`sqlôe3DbMÆlocZîo
(
db
, (Trigger));

240 if–
pTriggî
==0 ) 
åiggî_˛ónup
;

241 
pTriggî
->
zName
 = zName;

242 
zName
 = 0;

243 
pTriggî
->
èbÀ
 = 
	`sqlôe3DbSåDup
(
db
, 
pTabÀName
->
a
[0].
zName
);

244 
pTriggî
->
pSchema
 = 
db
->
aDb
[
iDb
].pSchema;

245 
pTriggî
->
pTabSchema
 = 
pTab
->
pSchema
;

246 
pTriggî
->
›
 = (
u8
)op;

247 
pTriggî
->
å_tm
 =År_tm==
TK_BEFORE
 ? 
TRIGGER_BEFORE
 : 
TRIGGER_AFTER
;

248 
pTriggî
->
pWhí
 = 
	`sqlôe3Ex¥Dup
(
db
,ÖWhí, 
EXPRDUP_REDUCE
);

249 
pTriggî
->
pCﬁumns
 = 
	`sqlôe3IdLi°Dup
(
db
,ÖColumns);

250 
	`as£π
–
pP¨£
->
pNewTriggî
==0 );

251 
pP¨£
->
pNewTriggî
 = 
pTriggî
;

253 
åiggî_˛ónup
:

254 
	`sqlôe3DbFªe
(
db
, 
zName
);

255 
	`sqlôe3SrcLi°Dñëe
(
db
, 
pTabÀName
);

256 
	`sqlôe3IdLi°Dñëe
(
db
, 
pCﬁumns
);

257 
	`sqlôe3Ex¥Dñëe
(
db
, 
pWhí
);

258 if–!
pP¨£
->
pNewTriggî
 ){

259 
	`sqlôe3DñëeTriggî
(
db
, 
pTriggî
);

261 
	`as£π
–
pP¨£
->
pNewTriggî
==
pTriggî
 );

263 
	}
}

269 
	$sqlôe3FöishTriggî
(

270 
P¨£
 *
pP¨£
,

271 
TriggîSãp
 *
pSãpLi°
,

272 
Tokí
 *
pAŒ


274 
Triggî
 *
pTrig
 = 
pP¨£
->
pNewTriggî
;

275 *
zName
;

276 
sqlôe3
 *
db
 = 
pP¨£
->db;

277 
DbFixî
 
sFix
;

278 
iDb
;

279 
Tokí
 
«meTokí
;

281 
pP¨£
->
pNewTriggî
 = 0;

282 if–
	`NEVER
(
pP¨£
->
nEº
Ë|| !
pTrig
 ) 
åiggîföish_˛ónup
;

283 
zName
 = 
pTrig
->zName;

284 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTrig
->
pSchema
);

285 
pTrig
->
°ï_li°
 = 
pSãpLi°
;

286  
pSãpLi°
 ){

287 
pSãpLi°
->
pTrig
 =ÖTrig;

288 
pSãpLi°
 =ÖSãpLi°->
pNext
;

290 
	`sqlôe3TokíInô
(&
«meTokí
, 
pTrig
->
zName
);

291 
	`sqlôe3FixInô
(&
sFix
, 
pP¨£
, 
iDb
, "åiggî", &
«meTokí
);

292 if–
	`sqlôe3FixTriggîSãp
(&
sFix
, 
pTrig
->
°ï_li°
)

293 || 
	`sqlôe3FixEx¥
(&
sFix
, 
pTrig
->
pWhí
)

295 
åiggîföish_˛ónup
;

301 if–!
db
->
öô
.
busy
 ){

302 
Vdbe
 *
v
;

303 *
z
;

306 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

307 if–
v
==0 ) 
åiggîföish_˛ónup
;

308 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 0, 
iDb
);

309 
z
 = 
	`sqlôe3DbSåNDup
(
db
, (*)
pAŒ
->z,ÖAŒ->
n
);

310 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

312 
db
->
aDb
[
iDb
].
zName
, 
	`SCHEMA_TABLE
(iDb), zName,

313 
pTrig
->
èbÀ
, 
z
);

314 
	`sqlôe3DbFªe
(
db
, 
z
);

315 
	`sqlôe3Ch™geCookõ
(
pP¨£
, 
iDb
);

316 
	`sqlôe3VdbeAddP¨£SchemaOp
(
v
, 
iDb
,

317 
	`sqlôe3MPrötf
(
db
, "ty≥='åiggî' ANDÇame='%q'", 
zName
));

320 if–
db
->
öô
.
busy
 ){

321 
Triggî
 *
pLök
 = 
pTrig
;

322 
Hash
 *
pHash
 = &
db
->
aDb
[
iDb
].
pSchema
->
åigHash
;

323 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

324 
pTrig
 = 
	`sqlôe3HashIn£π
(
pHash
, 
zName
,ÖTrig);

325 if–
pTrig
 ){

326 
	`sqlôe3OomFau…
(
db
);

327 }if–
pLök
->
pSchema
=ıLök->
pTabSchema
 ){

328 
TabÀ
 *
pTab
;

329 
pTab
 = 
	`sqlôe3HashFöd
(&
pLök
->
pTabSchema
->
tblHash
,ÖLök->
èbÀ
);

330 
	`as£π
–
pTab
!=0 );

331 
pLök
->
pNext
 = 
pTab
->
pTriggî
;

332 
pTab
->
pTriggî
 = 
pLök
;

336 
åiggîföish_˛ónup
:

337 
	`sqlôe3DñëeTriggî
(
db
, 
pTrig
);

338 
	`as£π
–!
pP¨£
->
pNewTriggî
 );

339 
	`sqlôe3DñëeTriggîSãp
(
db
, 
pSãpLi°
);

340 
	}
}

349 
TriggîSãp
 *
	$sqlôe3TriggîSñe˘Sãp
(
sqlôe3
 *
db
, 
Sñe˘
 *
pSñe˘
){

350 
TriggîSãp
 *
pTriggîSãp
 = 
	`sqlôe3DbMÆlocZîo
(
db
, (TriggerStep));

351 if–
pTriggîSãp
==0 ) {

352 
	`sqlôe3Sñe˘Dñëe
(
db
, 
pSñe˘
);

355 
pTriggîSãp
->
›
 = 
TK_SELECT
;

356 
pTriggîSãp
->
pSñe˘
 =ÖSelect;

357 
pTriggîSãp
->
‹c⁄f
 = 
OE_DeÁu…
;

358  
pTriggîSãp
;

359 
	}
}

367 
TriggîSãp
 *
	$åiggîSãpAŒoˇã
(

368 
sqlôe3
 *
db
,

369 
u8
 
›
,

370 
Tokí
 *
pName


372 
TriggîSãp
 *
pTriggîSãp
;

374 
pTriggîSãp
 = 
	`sqlôe3DbMÆlocZîo
(
db
, (
TriggîSãp
Ë+ 
pName
->
n
 + 1);

375 if–
pTriggîSãp
 ){

376 *
z
 = (*)&
pTriggîSãp
[1];

377 
	`mem˝y
(
z
, 
pName
->z,ÖName->
n
);

378 
	`sqlôe3DequŸe
(
z
);

379 
pTriggîSãp
->
zT¨gë
 = 
z
;

380 
pTriggîSãp
->
›
 = op;

382  
pTriggîSãp
;

383 
	}
}

392 
TriggîSãp
 *
	$sqlôe3TriggîIn£πSãp
(

393 
sqlôe3
 *
db
,

394 
Tokí
 *
pTabÀName
,

395 
IdLi°
 *
pCﬁumn
,

396 
Sñe˘
 *
pSñe˘
,

397 
u8
 
‹c⁄f


399 
TriggîSãp
 *
pTriggîSãp
;

401 
	`as£π
(
pSñe˘
 !0 || 
db
->
mÆlocFaûed
);

403 
pTriggîSãp
 = 
	`åiggîSãpAŒoˇã
(
db
, 
TK_INSERT
, 
pTabÀName
);

404 if–
pTriggîSãp
 ){

405 
pTriggîSãp
->
pSñe˘
 = 
	`sqlôe3Sñe˘Dup
(
db
,ÖSñe˘, 
EXPRDUP_REDUCE
);

406 
pTriggîSãp
->
pIdLi°
 = 
pCﬁumn
;

407 
pTriggîSãp
->
‹c⁄f
 = orconf;

409 
	`sqlôe3IdLi°Dñëe
(
db
, 
pCﬁumn
);

411 
	`sqlôe3Sñe˘Dñëe
(
db
, 
pSñe˘
);

413  
pTriggîSãp
;

414 
	}
}

421 
TriggîSãp
 *
	$sqlôe3TriggîUpd©eSãp
(

422 
sqlôe3
 *
db
,

423 
Tokí
 *
pTabÀName
,

424 
Ex¥Li°
 *
pELi°
,

425 
Ex¥
 *
pWhîe
,

426 
u8
 
‹c⁄f


428 
TriggîSãp
 *
pTriggîSãp
;

430 
pTriggîSãp
 = 
	`åiggîSãpAŒoˇã
(
db
, 
TK_UPDATE
, 
pTabÀName
);

431 if–
pTriggîSãp
 ){

432 
pTriggîSãp
->
pEx¥Li°
 = 
	`sqlôe3Ex¥Li°Dup
(
db
, 
pELi°
, 
EXPRDUP_REDUCE
);

433 
pTriggîSãp
->
pWhîe
 = 
	`sqlôe3Ex¥Dup
(
db
,ÖWhîe, 
EXPRDUP_REDUCE
);

434 
pTriggîSãp
->
‹c⁄f
 = orconf;

436 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
pELi°
);

437 
	`sqlôe3Ex¥Dñëe
(
db
, 
pWhîe
);

438  
pTriggîSãp
;

439 
	}
}

446 
TriggîSãp
 *
	$sqlôe3TriggîDñëeSãp
(

447 
sqlôe3
 *
db
,

448 
Tokí
 *
pTabÀName
,

449 
Ex¥
 *
pWhîe


451 
TriggîSãp
 *
pTriggîSãp
;

453 
pTriggîSãp
 = 
	`åiggîSãpAŒoˇã
(
db
, 
TK_DELETE
, 
pTabÀName
);

454 if–
pTriggîSãp
 ){

455 
pTriggîSãp
->
pWhîe
 = 
	`sqlôe3Ex¥Dup
(
db
,ÖWhîe, 
EXPRDUP_REDUCE
);

456 
pTriggîSãp
->
‹c⁄f
 = 
OE_DeÁu…
;

458 
	`sqlôe3Ex¥Dñëe
(
db
, 
pWhîe
);

459  
pTriggîSãp
;

460 
	}
}

465 
	$sqlôe3DñëeTriggî
(
sqlôe3
 *
db
, 
Triggî
 *
pTriggî
){

466 if–
pTriggî
==0 ) ;

467 
	`sqlôe3DñëeTriggîSãp
(
db
, 
pTriggî
->
°ï_li°
);

468 
	`sqlôe3DbFªe
(
db
, 
pTriggî
->
zName
);

469 
	`sqlôe3DbFªe
(
db
, 
pTriggî
->
èbÀ
);

470 
	`sqlôe3Ex¥Dñëe
(
db
, 
pTriggî
->
pWhí
);

471 
	`sqlôe3IdLi°Dñëe
(
db
, 
pTriggî
->
pCﬁumns
);

472 
	`sqlôe3DbFªe
(
db
, 
pTriggî
);

473 
	}
}

483 
	$sqlôe3Dr›Triggî
(
P¨£
 *
pP¨£
, 
SrcLi°
 *
pName
, 
noEº
){

484 
Triggî
 *
pTriggî
 = 0;

485 
i
;

486 c⁄° *
zDb
;

487 c⁄° *
zName
;

488 
sqlôe3
 *
db
 = 
pP¨£
->db;

490 if–
db
->
mÆlocFaûed
 ) 
dr›_åiggî_˛ónup
;

491 if–
SQLITE_OK
!=
	`sqlôe3RódSchema
(
pP¨£
) ){

492 
dr›_åiggî_˛ónup
;

495 
	`as£π
–
pName
->
nSrc
==1 );

496 
zDb
 = 
pName
->
a
[0].
zD©aba£
;

497 
zName
 = 
pName
->
a
[0].zName;

498 
	`as£π
–
zDb
!=0 || 
	`sqlôe3BåìHﬁdsAŒMuãxes
(
db
) );

499 
i
=
OMIT_TEMPDB
; i<
db
->
nDb
; i++){

500 
j
 = (
i
<2) ? i^1 : i;

501 if–
zDb
 && 
	`sqlôe3SåICmp
(
db
->
aDb
[
j
].
zName
, zDb) ) ;

502 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
j
, 0) );

503 
pTriggî
 = 
	`sqlôe3HashFöd
(&(
db
->
aDb
[
j
].
pSchema
->
åigHash
), 
zName
);

504 if–
pTriggî
 ) ;

506 if–!
pTriggî
 ){

507 if–!
noEº
 ){

508 
	`sqlôe3Eº‹Msg
(
pP¨£
, "nÿsuchÅriggî: %S", 
pName
, 0);

510 
	`sqlôe3CodeVîifyNamedSchema
(
pP¨£
, 
zDb
);

512 
pP¨£
->
checkSchema
 = 1;

513 
dr›_åiggî_˛ónup
;

515 
	`sqlôe3Dr›TriggîPå
(
pP¨£
, 
pTriggî
);

517 
dr›_åiggî_˛ónup
:

518 
	`sqlôe3SrcLi°Dñëe
(
db
, 
pName
);

519 
	}
}

525 
TabÀ
 *
	$èbÀOfTriggî
(
Triggî
 *
pTriggî
){

526  
	`sqlôe3HashFöd
(&
pTriggî
->
pTabSchema
->
tblHash
,ÖTriggî->
èbÀ
);

527 
	}
}

533 
	$sqlôe3Dr›TriggîPå
(
P¨£
 *
pP¨£
, 
Triggî
 *
pTriggî
){

534 
TabÀ
 *
pTabÀ
;

535 
Vdbe
 *
v
;

536 
sqlôe3
 *
db
 = 
pP¨£
->db;

537 
iDb
;

539 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTriggî
->
pSchema
);

540 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

541 
pTabÀ
 = 
	`èbÀOfTriggî
(
pTriggî
);

542 
	`as£π
–
pTabÀ
 );

543 
	`as£π
–
pTabÀ
->
pSchema
==
pTriggî
->pSchem®|| 
iDb
==1 );

544 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


546 
code
 = 
SQLITE_DROP_TRIGGER
;

547 c⁄° *
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

548 c⁄° *
zTab
 = 
	`SCHEMA_TABLE
(
iDb
);

549 if–
iDb
==1 ) 
code
 = 
SQLITE_DROP_TEMP_TRIGGER
;

550 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
code
, 
pTriggî
->
zName
, 
pTabÀ
->zName, 
zDb
) ||

551 
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_DELETE
, 
zTab
, 0, 
zDb
) ){

559 
	`as£π
–
pTabÀ
!=0 );

560 if–(
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
))!=0 ){

561 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

563 
db
->
aDb
[
iDb
].
zName
, 
	`SCHEMA_TABLE
(iDb), 
pTriggî
->zName

565 
	`sqlôe3Ch™geCookõ
(
pP¨£
, 
iDb
);

566 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Dr›Triggî
, 
iDb
, 0, 0, 
pTriggî
->
zName
, 0);

568 
	}
}

573 
	$sqlôe3U∆ökAndDñëeTriggî
(
sqlôe3
 *
db
, 
iDb
, c⁄° *
zName
){

574 
Triggî
 *
pTriggî
;

575 
Hash
 *
pHash
;

577 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

578 
pHash
 = &(
db
->
aDb
[
iDb
].
pSchema
->
åigHash
);

579 
pTriggî
 = 
	`sqlôe3HashIn£π
(
pHash
, 
zName
, 0);

580 if–
	`ALWAYS
(
pTriggî
) ){

581 if–
pTriggî
->
pSchema
=ıTriggî->
pTabSchema
 ){

582 
TabÀ
 *
pTab
 = 
	`èbÀOfTriggî
(
pTriggî
);

583 
Triggî
 **
µ
;

584 
µ
=&
pTab
->
pTriggî
; *µ!ıTriggî;Öp=&((*µ)->
pNext
));

585 *
µ
 = (*µ)->
pNext
;

587 
	`sqlôe3DñëeTriggî
(
db
, 
pTriggî
);

588 
db
->
Êags
 |
SQLITE_I¡înCh™ges
;

590 
	}
}

601 
	$checkCﬁumnOvîœp
(
IdLi°
 *
pIdLi°
, 
Ex¥Li°
 *
pELi°
){

602 
e
;

603 if–
pIdLi°
==0 || 
	`NEVER
(
pELi°
==0) )  1;

604 
e
=0;É<
pELi°
->
nEx¥
;É++){

605 if–
	`sqlôe3IdLi°Index
(
pIdLi°
, 
pELi°
->
a
[
e
].
zName
)>=0 )  1;

608 
	}
}

616 
Triggî
 *
	$sqlôe3TriggîsExi°
(

617 
P¨£
 *
pP¨£
,

618 
TabÀ
 *
pTab
,

619 
›
,

620 
Ex¥Li°
 *
pCh™ges
,

621 *
pMask


623 
mask
 = 0;

624 
Triggî
 *
pLi°
 = 0;

625 
Triggî
 *
p
;

627 if–(
pP¨£
->
db
->
Êags
 & 
SQLITE_E«bÀTriggî
)!=0 ){

628 
pLi°
 = 
	`sqlôe3TriggîLi°
(
pP¨£
, 
pTab
);

630 
	`as£π
–
pLi°
==0 || 
	`IsVútuÆ
(
pTab
)==0 );

631 
p
=
pLi°
;Ö;Öı->
pNext
){

632 if–
p
->
›
==› && 
	`checkCﬁumnOvîœp
’->
pCﬁumns
, 
pCh™ges
) ){

633 
mask
 |
p
->
å_tm
;

636 if–
pMask
 ){

637 *
pMask
 = 
mask
;

639  (
mask
 ? 
pLi°
 : 0);

640 
	}
}

652 
SrcLi°
 *
	$èrgëSrcLi°
(

653 
P¨£
 *
pP¨£
,

654 
TriggîSãp
 *
pSãp


656 
sqlôe3
 *
db
 = 
pP¨£
->db;

657 
iDb
;

658 
SrcLi°
 *
pSrc
;

660 
pSrc
 = 
	`sqlôe3SrcLi°Aµíd
(
db
, 0, 0, 0);

661 if–
pSrc
 ){

662 
	`as£π
–
pSrc
->
nSrc
>0 );

663 
pSrc
->
a
[pSrc->
nSrc
-1].
zName
 = 
	`sqlôe3DbSåDup
(
db
, 
pSãp
->
zT¨gë
);

664 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pSãp
->
pTrig
->
pSchema
);

665 if–
iDb
==0 || iDb>=2 ){

666 
	`as£π
–
iDb
<
db
->
nDb
 );

667 
pSrc
->
a
[pSrc->
nSrc
-1].
zD©aba£
 = 
	`sqlôe3DbSåDup
(
db
, db->
aDb
[
iDb
].
zName
);

670  
pSrc
;

671 
	}
}

677 
	$codeTriggîProgøm
(

678 
P¨£
 *
pP¨£
,

679 
TriggîSãp
 *
pSãpLi°
,

680 
‹c⁄f


682 
TriggîSãp
 *
pSãp
;

683 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

684 
sqlôe3
 *
db
 = 
pP¨£
->db;

686 
	`as£π
–
pP¨£
->
pTriggîTab
 &&ÖP¨£->
pT›Àvñ
 );

687 
	`as£π
–
pSãpLi°
 );

688 
	`as£π
–
v
!=0 );

689 
pSãp
=
pSãpLi°
;ÖSãp;ÖSãpıSãp->
pNext
){

703 
pP¨£
->
eOrc⁄f
 = (
‹c⁄f
==
OE_DeÁu…
)?
pSãp
->‹c⁄f:(
u8
)orconf;

704 
	`as£π
–
pP¨£
->
okC⁄°Fa˘‹
==0 );

706  
pSãp
->
›
 ){

707 
TK_UPDATE
: {

708 
	`sqlôe3Upd©e
(
pP¨£
,

709 
	`èrgëSrcLi°
(
pP¨£
, 
pSãp
),

710 
	`sqlôe3Ex¥Li°Dup
(
db
, 
pSãp
->
pEx¥Li°
, 0),

711 
	`sqlôe3Ex¥Dup
(
db
, 
pSãp
->
pWhîe
, 0),

712 
pP¨£
->
eOrc⁄f


716 
TK_INSERT
: {

717 
	`sqlôe3In£π
(
pP¨£
,

718 
	`èrgëSrcLi°
(
pP¨£
, 
pSãp
),

719 
	`sqlôe3Sñe˘Dup
(
db
, 
pSãp
->
pSñe˘
, 0),

720 
	`sqlôe3IdLi°Dup
(
db
, 
pSãp
->
pIdLi°
),

721 
pP¨£
->
eOrc⁄f


725 
TK_DELETE
: {

726 
	`sqlôe3DñëeFrom
(
pP¨£
,

727 
	`èrgëSrcLi°
(
pP¨£
, 
pSãp
),

728 
	`sqlôe3Ex¥Dup
(
db
, 
pSãp
->
pWhîe
, 0)

732 : 
	`as£π
–
pSãp
->
›
==
TK_SELECT
 ); {

733 
Sñe˘De°
 
sDe°
;

734 
Sñe˘
 *
pSñe˘
 = 
	`sqlôe3Sñe˘Dup
(
db
, 
pSãp
->pSelect, 0);

735 
	`sqlôe3Sñe˘De°Inô
(&
sDe°
, 
SRT_Disˇrd
, 0);

736 
	`sqlôe3Sñe˘
(
pP¨£
, 
pSñe˘
, &
sDe°
);

737 
	`sqlôe3Sñe˘Dñëe
(
db
, 
pSñe˘
);

741 if–
pSãp
->
›
!=
TK_SELECT
 ){

742 
	`sqlôe3VdbeAddOp0
(
v
, 
OP_Re£tCou¡
);

747 
	}
}

749 #ifde‡
SQLITE_ENABLE_EXPLAIN_COMMENTS


754 c⁄° *
	$⁄Eº‹Text
(
⁄Eº‹
){

755  
⁄Eº‹
 ){

756 
OE_Ab‹t
:  "abort";

757 
OE_Rﬁlback
:  "rollback";

758 
OE_Faû
:  "fail";

759 
OE_Rïœ˚
:  "replace";

760 
OE_Ign‹e
:  "ignore";

761 
OE_DeÁu…
:  "default";

764 
	}
}

772 
	$å™s„rP¨£Eº‹
(
P¨£
 *
pTo
, P¨£ *
pFrom
){

773 
	`as£π
–
pFrom
->
zEºMsg
==0 ||ÖFrom->
nEº
 );

774 
	`as£π
–
pTo
->
zEºMsg
==0 ||ÖTo->
nEº
 );

775 if–
pTo
->
nEº
==0 ){

776 
pTo
->
zEºMsg
 = 
pFrom
->zErrMsg;

777 
pTo
->
nEº
 = 
pFrom
->nErr;

778 
pTo
->
rc
 = 
pFrom
->rc;

780 
	`sqlôe3DbFªe
(
pFrom
->
db
,ÖFrom->
zEºMsg
);

782 
	}
}

788 
TriggîPrg
 *
	$codeRowTriggî
(

789 
P¨£
 *
pP¨£
,

790 
Triggî
 *
pTriggî
,

791 
TabÀ
 *
pTab
,

792 
‹c⁄f


794 
P¨£
 *
pT›
 = 
	`sqlôe3P¨£T›Àvñ
(
pP¨£
);

795 
sqlôe3
 *
db
 = 
pP¨£
->db;

796 
TriggîPrg
 *
pPrg
;

797 
Ex¥
 *
pWhí
 = 0;

798 
Vdbe
 *
v
;

799 
NameC⁄ãxt
 
sNC
;

800 
SubProgøm
 *
pProgøm
 = 0;

801 
P¨£
 *
pSubP¨£
;

802 
iEndTriggî
 = 0;

804 
	`as£π
–
pTriggî
->
zName
==0 || 
pTab
==
	`èbÀOfTriggî
(pTrigger) );

805 
	`as£π
–
pT›
->
pVdbe
 );

810 
pPrg
 = 
	`sqlôe3DbMÆlocZîo
(
db
, (
TriggîPrg
));

811 if–!
pPrg
 )  0;

812 
pPrg
->
pNext
 = 
pT›
->
pTriggîPrg
;

813 
pT›
->
pTriggîPrg
 = 
pPrg
;

814 
pPrg
->
pProgøm
 =ÖProgøm = 
	`sqlôe3DbMÆlocZîo
(
db
, (
SubProgøm
));

815 if–!
pProgøm
 )  0;

816 
	`sqlôe3VdbeLökSubProgøm
(
pT›
->
pVdbe
, 
pProgøm
);

817 
pPrg
->
pTriggî
 =ÖTrigger;

818 
pPrg
->
‹c⁄f
 = orconf;

819 
pPrg
->
aCﬁmask
[0] = 0xffffffff;

820 
pPrg
->
aCﬁmask
[1] = 0xffffffff;

824 
pSubP¨£
 = 
	`sqlôe3SèckAŒocZîo
(
db
, (
P¨£
));

825 if–!
pSubP¨£
 )  0;

826 
	`mem£t
(&
sNC
, 0, (sNC));

827 
sNC
.
pP¨£
 = 
pSubP¨£
;

828 
pSubP¨£
->
db
 = db;

829 
pSubP¨£
->
pTriggîTab
 = 
pTab
;

830 
pSubP¨£
->
pT›Àvñ
 = 
pT›
;

831 
pSubP¨£
->
zAuthC⁄ãxt
 = 
pTriggî
->
zName
;

832 
pSubP¨£
->
eTriggîOp
 = 
pTriggî
->
›
;

833 
pSubP¨£
->
nQuîyLo›
 = 
pP¨£
->nQueryLoop;

835 
v
 = 
	`sqlôe3GëVdbe
(
pSubP¨£
);

836 if–
v
 ){

837 
	`VdbeCommít
((
v
, "Start: %s.%s (%s %s%s%s ON %s)",

838 
pTriggî
->
zName
, 
	`⁄Eº‹Text
(
‹c⁄f
),

839 (
pTriggî
->
å_tm
==
TRIGGER_BEFORE
 ? "BEFORE" : "AFTER"),

840 (
pTriggî
->
›
==
TK_UPDATE
 ? "UPDATE" : ""),

841 (
pTriggî
->
›
==
TK_INSERT
 ? "INSERT" : ""),

842 (
pTriggî
->
›
==
TK_DELETE
 ? "DELETE" : ""),

843 
pTab
->
zName


845 #i‚de‡
SQLITE_OMIT_TRACE


846 
	`sqlôe3VdbeCh™geP4
(
v
, -1,

847 
	`sqlôe3MPrötf
(
db
, "-- TRIGGER %s", 
pTriggî
->
zName
), 
P4_DYNAMIC


854 if–
pTriggî
->
pWhí
 ){

855 
pWhí
 = 
	`sqlôe3Ex¥Dup
(
db
, 
pTriggî
->pWhen, 0);

856 if–
SQLITE_OK
==
	`sqlôe3ResﬁveEx¥Names
(&
sNC
, 
pWhí
)

857 && 
db
->
mÆlocFaûed
==0

859 
iEndTriggî
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

860 
	`sqlôe3Ex¥IfFÆ£
(
pSubP¨£
, 
pWhí
, 
iEndTriggî
, 
SQLITE_JUMPIFNULL
);

862 
	`sqlôe3Ex¥Dñëe
(
db
, 
pWhí
);

866 
	`codeTriggîProgøm
(
pSubP¨£
, 
pTriggî
->
°ï_li°
, 
‹c⁄f
);

869 if–
iEndTriggî
 ){

870 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iEndTriggî
);

872 
	`sqlôe3VdbeAddOp0
(
v
, 
OP_HÆt
);

873 
	`VdbeCommít
((
v
, "End: %s.%s", 
pTriggî
->
zName
, 
	`⁄Eº‹Text
(
‹c⁄f
)));

875 
	`å™s„rP¨£Eº‹
(
pP¨£
, 
pSubP¨£
);

876 if–
db
->
mÆlocFaûed
==0 ){

877 
pProgøm
->
aOp
 = 
	`sqlôe3VdbeTakeOpAºay
(
v
, &pProgøm->
nOp
, &
pT›
->
nMaxArg
);

879 
pProgøm
->
nMem
 = 
pSubP¨£
->nMem;

880 
pProgøm
->
nC§
 = 
pSubP¨£
->
nTab
;

881 
pProgøm
->
nOn˚
 = 
pSubP¨£
->nOnce;

882 
pProgøm
->
tokí
 = (*)
pTriggî
;

883 
pPrg
->
aCﬁmask
[0] = 
pSubP¨£
->
ﬁdmask
;

884 
pPrg
->
aCﬁmask
[1] = 
pSubP¨£
->
√wmask
;

885 
	`sqlôe3VdbeDñëe
(
v
);

888 
	`as£π
–!
pSubP¨£
->
pAöc
 && !pSubP¨£->
pZombõTab
 );

889 
	`as£π
–!
pSubP¨£
->
pTriggîPrg
 && !pSubP¨£->
nMaxArg
 );

890 
	`sqlôe3P¨£rRe£t
(
pSubP¨£
);

891 
	`sqlôe3SèckFªe
(
db
, 
pSubP¨£
);

893  
pPrg
;

894 
	}
}

902 
TriggîPrg
 *
	$gëRowTriggî
(

903 
P¨£
 *
pP¨£
,

904 
Triggî
 *
pTriggî
,

905 
TabÀ
 *
pTab
,

906 
‹c⁄f


908 
P¨£
 *
pRoŸ
 = 
	`sqlôe3P¨£T›Àvñ
(
pP¨£
);

909 
TriggîPrg
 *
pPrg
;

911 
	`as£π
–
pTriggî
->
zName
==0 || 
pTab
==
	`èbÀOfTriggî
(pTrigger) );

917 
pPrg
=
pRoŸ
->
pTriggîPrg
;

918 
pPrg
 && (pPrg->
pTriggî
!ıTriggî ||ÖPrg->
‹c⁄f
!=orconf);

919 
pPrg
ıPrg->
pNext


923 if–!
pPrg
 ){

924 
pPrg
 = 
	`codeRowTriggî
(
pP¨£
, 
pTriggî
, 
pTab
, 
‹c⁄f
);

927  
pPrg
;

928 
	}
}

936 
	$sqlôe3CodeRowTriggîDúe˘
(

937 
P¨£
 *
pP¨£
,

938 
Triggî
 *
p
,

939 
TabÀ
 *
pTab
,

940 
ªg
,

941 
‹c⁄f
,

942 
ign‹eJump


944 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

945 
TriggîPrg
 *
pPrg
;

946 
pPrg
 = 
	`gëRowTriggî
(
pP¨£
, 
p
, 
pTab
, 
‹c⁄f
);

947 
	`as£π
–
pPrg
 || 
pP¨£
->
nEº
 ||ÖP¨£->
db
->
mÆlocFaûed
 );

951 if–
pPrg
 ){

952 
bRecursive
 = (
p
->
zName
 && 0==(
pP¨£
->
db
->
Êags
&
SQLITE_RecTriggîs
));

954 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Progøm
, 
ªg
, 
ign‹eJump
, ++
pP¨£
->
nMem
,

955 (c⁄° *)
pPrg
->
pProgøm
, 
P4_SUBPROGRAM
);

956 
	`VdbeCommít
(

957 (
v
, "CÆl: %s.%s", (
p
->
zName
?p->zName:"fkey"), 
	`⁄Eº‹Text
(
‹c⁄f
)));

964 
	`sqlôe3VdbeCh™geP5
(
v
, (
u8
)
bRecursive
);

966 
	}
}

1008 
	$sqlôe3CodeRowTriggî
(

1009 
P¨£
 *
pP¨£
,

1010 
Triggî
 *
pTriggî
,

1011 
›
,

1012 
Ex¥Li°
 *
pCh™ges
,

1013 
å_tm
,

1014 
TabÀ
 *
pTab
,

1015 
ªg
,

1016 
‹c⁄f
,

1017 
ign‹eJump


1019 
Triggî
 *
p
;

1021 
	`as£π
–
›
==
TK_UPDATE
 || op==
TK_INSERT
 || op==
TK_DELETE
 );

1022 
	`as£π
–
å_tm
==
TRIGGER_BEFORE
 ||År_tm==
TRIGGER_AFTER
 );

1023 
	`as£π
–(
›
==
TK_UPDATE
)==(
pCh™ges
!=0) );

1025 
p
=
pTriggî
;Ö;Öı->
pNext
){

1030 
	`as£π
–
p
->
pSchema
!=0 );

1031 
	`as£π
–
p
->
pTabSchema
!=0 );

1032 
	`as£π
–
p
->
pSchema
=ı->
pTabSchema


1033 || 
p
->
pSchema
==
pP¨£
->
db
->
aDb
[1].pSchema );

1036 if–
p
->
›
==op

1037 && 
p
->
å_tm
==tr_tm

1038 && 
	`checkCﬁumnOvîœp
(
p
->
pCﬁumns
, 
pCh™ges
)

1040 
	`sqlôe3CodeRowTriggîDúe˘
(
pP¨£
, 
p
, 
pTab
, 
ªg
, 
‹c⁄f
, 
ign‹eJump
);

1043 
	}
}

1070 
u32
 
	$sqlôe3TriggîCﬁmask
(

1071 
P¨£
 *
pP¨£
,

1072 
Triggî
 *
pTriggî
,

1073 
Ex¥Li°
 *
pCh™ges
,

1074 
isNew
,

1075 
å_tm
,

1076 
TabÀ
 *
pTab
,

1077 
‹c⁄f


1079 c⁄° 
›
 = 
pCh™ges
 ? 
TK_UPDATE
 : 
TK_DELETE
;

1080 
u32
 
mask
 = 0;

1081 
Triggî
 *
p
;

1083 
	`as£π
–
isNew
==1 || isNew==0 );

1084 
p
=
pTriggî
;Ö;Öı->
pNext
){

1085 if–
p
->
›
==› && (
å_tm
&p->tr_tm)

1086 && 
	`checkCﬁumnOvîœp
(
p
->
pCﬁumns
,
pCh™ges
)

1088 
TriggîPrg
 *
pPrg
;

1089 
pPrg
 = 
	`gëRowTriggî
(
pP¨£
, 
p
, 
pTab
, 
‹c⁄f
);

1090 if–
pPrg
 ){

1091 
mask
 |
pPrg
->
aCﬁmask
[
isNew
];

1096  
mask
;

1097 
	}
}

	@update.c

15 
	~"sqlôeI¡.h
"

17 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


19 
upd©eVútuÆTabÀ
(

20 
P¨£
 *
pP¨£
,

21 
SrcLi°
 *
pSrc
,

22 
TabÀ
 *
pTab
,

23 
Ex¥Li°
 *
pCh™ges
,

24 
Ex¥
 *
pRowidEx¥
,

25 *
aXRef
,

26 
Ex¥
 *
pWhîe
,

27 
⁄Eº‹


61 
	$sqlôe3CﬁumnDeÁu…
(
Vdbe
 *
v
, 
TabÀ
 *
pTab
, 
i
, 
iReg
){

62 
	`as£π
–
pTab
!=0 );

63 if–!
pTab
->
pSñe˘
 ){

64 
sqlôe3_vÆue
 *
pVÆue
 = 0;

65 
u8
 
íc
 = 
	`ENC
(
	`sqlôe3VdbeDb
(
v
));

66 
Cﬁumn
 *
pCﬁ
 = &
pTab
->
aCﬁ
[
i
];

67 
	`VdbeCommít
((
v
, "%s.%s", 
pTab
->
zName
, 
pCﬁ
->zName));

68 
	`as£π
–
i
<
pTab
->
nCﬁ
 );

69 
	`sqlôe3VÆueFromEx¥
(
	`sqlôe3VdbeDb
(
v
), 
pCﬁ
->
pDÊt
, 
íc
,

70 
pCﬁ
->
afföôy
, &
pVÆue
);

71 if–
pVÆue
 ){

72 
	`sqlôe3VdbeCh™geP4
(
v
, -1, (c⁄° *)
pVÆue
, 
P4_MEM
);

74 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


75 if–
pTab
->
aCﬁ
[
i
].
afföôy
==
SQLITE_AFF_REAL
 ){

76 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_RólAfföôy
, 
iReg
);

80 
	}
}

89 
	$sqlôe3Upd©e
(

90 
P¨£
 *
pP¨£
,

91 
SrcLi°
 *
pTabLi°
,

92 
Ex¥Li°
 *
pCh™ges
,

93 
Ex¥
 *
pWhîe
,

94 
⁄Eº‹


96 
i
, 
j
;

97 
TabÀ
 *
pTab
;

98 
addrT›
 = 0;

99 
WhîeInfo
 *
pWInfo
;

100 
Vdbe
 *
v
;

101 
Index
 *
pIdx
;

102 
Index
 *
pPk
;

103 
nIdx
;

104 
iBa£Cur
;

105 
iD©aCur
;

106 
iIdxCur
;

107 
sqlôe3
 *
db
;

108 *
aRegIdx
 = 0;

109 *
aXRef
 = 0;

112 
u8
 *
aToO≥n
;

113 
u8
 
chngPk
;

114 
u8
 
chngRowid
;

115 
u8
 
chngKey
;

116 
Ex¥
 *
pRowidEx¥
 = 0;

117 
AuthC⁄ãxt
 
sC⁄ãxt
;

118 
NameC⁄ãxt
 
sNC
;

119 
iDb
;

120 
okO√Pass
;

121 
hasFK
;

122 
œbñBªak
;

123 
œbñC⁄töue
;

125 #i‚de‡
SQLITE_OMIT_TRIGGER


126 
isVõw
;

127 
Triggî
 *
pTriggî
;

128 
tmask
;

130 
√wmask
;

131 
iEph
 = 0;

132 
nKey
 = 0;

133 
aiCurO√Pass
[2];

136 
ªgRowCou¡
 = 0;

137 
ªgOldRowid
 = 0;

138 
ªgNewRowid
 = 0;

139 
ªgNew
 = 0;

140 
ªgOld
 = 0;

141 
ªgRowSë
 = 0;

142 
ªgKey
 = 0;

144 
	`mem£t
(&
sC⁄ãxt
, 0, (sContext));

145 
db
 = 
pP¨£
->db;

146 if–
pP¨£
->
nEº
 || 
db
->
mÆlocFaûed
 ){

147 
upd©e_˛ónup
;

149 
	`as£π
–
pTabLi°
->
nSrc
==1 );

153 
pTab
 = 
	`sqlôe3SrcLi°Lookup
(
pP¨£
, 
pTabLi°
);

154 if–
pTab
==0 ) 
upd©e_˛ónup
;

155 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTab
->
pSchema
);

160 #i‚de‡
SQLITE_OMIT_TRIGGER


161 
pTriggî
 = 
	`sqlôe3TriggîsExi°
(
pP¨£
, 
pTab
, 
TK_UPDATE
, 
pCh™ges
, &
tmask
);

162 
isVõw
 = 
pTab
->
pSñe˘
!=0;

163 
	`as£π
–
pTriggî
 || 
tmask
==0 );

165 
	#pTriggî
 0

	)

166 
	#isVõw
 0

	)

167 
	#tmask
 0

	)

169 #ifde‡
SQLITE_OMIT_VIEW


170 #unde‡
isVõw


171 
	#isVõw
 0

	)

174 if–
	`sqlôe3VõwGëCﬁumnNames
(
pP¨£
, 
pTab
) ){

175 
upd©e_˛ónup
;

177 if–
	`sqlôe3IsRódO∆y
(
pP¨£
, 
pTab
, 
tmask
) ){

178 
upd©e_˛ónup
;

186 
pTabLi°
->
a
[0].
iCurs‹
 = 
iBa£Cur
 = 
iD©aCur
 = 
pP¨£
->
nTab
++;

187 
iIdxCur
 = 
iD©aCur
+1;

188 
pPk
 = 
	`HasRowid
(
pTab
Ë? 0 : 
	`sqlôe3Prim¨yKeyIndex
(pTab);

189 
nIdx
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
,ÇIdx++){

190 if–
	`IsPrim¨yKeyIndex
(
pIdx
Ë&& 
pPk
!=0 ){

191 
iD©aCur
 = 
pP¨£
->
nTab
;

192 
pTabLi°
->
a
[0].
iCurs‹
 = 
iD©aCur
;

194 
pP¨£
->
nTab
++;

200 
aXRef
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, (Ë* (
pTab
->
nCﬁ
+
nIdx
) +ÇIdx+2 );

201 if–
aXRef
==0 ) 
upd©e_˛ónup
;

202 
aRegIdx
 = 
aXRef
+
pTab
->
nCﬁ
;

203 
aToO≥n
 = (
u8
*)(
aRegIdx
+
nIdx
);

204 
	`mem£t
(
aToO≥n
, 1, 
nIdx
+1);

205 
aToO≥n
[
nIdx
+1] = 0;

206 
i
=0; i<
pTab
->
nCﬁ
; i++Ë
aXRef
[i] = -1;

209 
	`mem£t
(&
sNC
, 0, (sNC));

210 
sNC
.
pP¨£
 =ÖParse;

211 
sNC
.
pSrcLi°
 = 
pTabLi°
;

219 
chngRowid
 = 
chngPk
 = 0;

220 
i
=0; i<
pCh™ges
->
nEx¥
; i++){

221 if–
	`sqlôe3ResﬁveEx¥Names
(&
sNC
, 
pCh™ges
->
a
[
i
].
pEx¥
) ){

222 
upd©e_˛ónup
;

224 
j
=0; j<
pTab
->
nCﬁ
; j++){

225 if–
	`sqlôe3SåICmp
(
pTab
->
aCﬁ
[
j
].
zName
, 
pCh™ges
->
a
[
i
].zName)==0 ){

226 if–
j
==
pTab
->
iPKey
 ){

227 
chngRowid
 = 1;

228 
pRowidEx¥
 = 
pCh™ges
->
a
[
i
].
pEx¥
;

229 }if–
pPk
 && (
pTab
->
aCﬁ
[
j
].
cﬁFœgs
 & 
COLFLAG_PRIMKEY
)!=0 ){

230 
chngPk
 = 1;

232 
aXRef
[
j
] = 
i
;

236 if–
j
>=
pTab
->
nCﬁ
 ){

237 if–
pPk
==0 && 
	`sqlôe3IsRowid
(
pCh™ges
->
a
[
i
].
zName
) ){

238 
j
 = -1;

239 
chngRowid
 = 1;

240 
pRowidEx¥
 = 
pCh™ges
->
a
[
i
].
pEx¥
;

242 
	`sqlôe3Eº‹Msg
(
pP¨£
, "nÿsuch cﬁumn: %s", 
pCh™ges
->
a
[
i
].
zName
);

243 
pP¨£
->
checkSchema
 = 1;

244 
upd©e_˛ónup
;

247 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


249 
rc
;

250 
rc
 = 
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_UPDATE
, 
pTab
->
zName
,

251 
j
<0 ? "ROWID" : 
pTab
->
aCﬁ
[j].
zName
,

252 
db
->
aDb
[
iDb
].
zName
);

253 if–
rc
==
SQLITE_DENY
 ){

254 
upd©e_˛ónup
;

255 }if–
rc
==
SQLITE_IGNORE
 ){

256 
aXRef
[
j
] = -1;

261 
	`as£π
–(
chngRowid
 & 
chngPk
)==0 );

262 
	`as£π
–
chngRowid
==0 || chngRowid==1 );

263 
	`as£π
–
chngPk
==0 || chngPk==1 );

264 
chngKey
 = 
chngRowid
 + 
chngPk
;

271 
pTabLi°
->
a
[0].
cﬁU£d
 = 
	`IsVútuÆ
(
pTab
Ë? 
ALLBITS
 : 0;

273 
hasFK
 = 
	`sqlôe3FkRequúed
(
pP¨£
, 
pTab
, 
aXRef
, 
chngKey
);

281 
j
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, j++){

282 
ªg
;

283 if–
chngKey
 || 
hasFK
 || 
pIdx
->
pP¨tIdxWhîe
 ||ÖIdx==
pPk
 ){

284 
ªg
 = ++
pP¨£
->
nMem
;

286 
ªg
 = 0;

287 
i
=0; i<
pIdx
->
nKeyCﬁ
; i++){

288 
i16
 
iIdxCﬁ
 = 
pIdx
->
aiCﬁumn
[
i
];

289 if–
iIdxCﬁ
<0 || 
aXRef
[iIdxCol]>=0 ){

290 
ªg
 = ++
pP¨£
->
nMem
;

295 if–
ªg
==0 ) 
aToO≥n
[
j
+1] = 0;

296 
aRegIdx
[
j
] = 
ªg
;

300 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

301 if–
v
==0 ) 
upd©e_˛ónup
;

302 if–
pP¨£
->
√°ed
==0 ) 
	`sqlôe3VdbeCou¡Ch™ges
(
v
);

303 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 1, 
iDb
);

306 if–!
	`IsVútuÆ
(
pTab
) ){

307 
ªgRowSë
 = ++
pP¨£
->
nMem
;

308 
ªgOldRowid
 = 
ªgNewRowid
 = ++
pP¨£
->
nMem
;

309 if–
chngPk
 || 
pTriggî
 || 
hasFK
 ){

310 
ªgOld
 = 
pP¨£
->
nMem
 + 1;

311 
pP¨£
->
nMem
 +
pTab
->
nCﬁ
;

313 if–
chngKey
 || 
pTriggî
 || 
hasFK
 ){

314 
ªgNewRowid
 = ++
pP¨£
->
nMem
;

316 
ªgNew
 = 
pP¨£
->
nMem
 + 1;

317 
pP¨£
->
nMem
 +
pTab
->
nCﬁ
;

321 if–
isVõw
 ){

322 
	`sqlôe3AuthC⁄ãxtPush
(
pP¨£
, &
sC⁄ãxt
, 
pTab
->
zName
);

328 #i‡!
	`deföed
(
SQLITE_OMIT_VIEW
Ë&& !deföed(
SQLITE_OMIT_TRIGGER
)

329 if–
isVõw
 ){

330 
	`sqlôe3M©îülizeVõw
(
pP¨£
, 
pTab
, 
pWhîe
, 
iD©aCur
);

337 if–
	`sqlôe3ResﬁveEx¥Names
(&
sNC
, 
pWhîe
) ){

338 
upd©e_˛ónup
;

341 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


343 if–
	`IsVútuÆ
(
pTab
) ){

344 
	`upd©eVútuÆTabÀ
(
pP¨£
, 
pTabLi°
, 
pTab
, 
pCh™ges
, 
pRowidEx¥
, 
aXRef
,

345 
pWhîe
, 
⁄Eº‹
);

346 
upd©e_˛ónup
;

352 if–
	`HasRowid
(
pTab
) ){

353 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_NuŒ
, 0, 
ªgRowSë
, 
ªgOldRowid
);

354 
pWInfo
 = 
	`sqlôe3WhîeBegö
(

355 
pP¨£
, 
pTabLi°
, 
pWhîe
, 0, 0,

356 
WHERE_ONEPASS_DESIRED
 | 
WHERE_SEEK_TABLE
, 
iIdxCur


358 if–
pWInfo
==0 ) 
upd©e_˛ónup
;

359 
okO√Pass
 = 
	`sqlôe3WhîeOkO√Pass
(
pWInfo
, 
aiCurO√Pass
);

363 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Rowid
, 
iD©aCur
, 
ªgOldRowid
);

364 if–!
okO√Pass
 ){

365 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_RowSëAdd
, 
ªgRowSë
, 
ªgOldRowid
);

370 
	`sqlôe3WhîeEnd
(
pWInfo
);

372 
iPk
;

373 
i16
 
nPk
;

374 
addrO≥n
;

376 
	`as£π
–
pPk
!=0 );

377 
nPk
 = 
pPk
->
nKeyCﬁ
;

378 
iPk
 = 
pP¨£
->
nMem
+1;

379 
pP¨£
->
nMem
 +
nPk
;

380 
ªgKey
 = ++
pP¨£
->
nMem
;

381 
iEph
 = 
pP¨£
->
nTab
++;

382 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NuŒ
, 0, 
iPk
);

383 
addrO≥n
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_O≥nEphemîÆ
, 
iEph
, 
nPk
);

384 
	`sqlôe3VdbeSëP4KeyInfo
(
pP¨£
, 
pPk
);

385 
pWInfo
 = 
	`sqlôe3WhîeBegö
(
pP¨£
, 
pTabLi°
, 
pWhîe
, 0, 0,

386 
WHERE_ONEPASS_DESIRED
, 
iIdxCur
);

387 if–
pWInfo
==0 ) 
upd©e_˛ónup
;

388 
okO√Pass
 = 
	`sqlôe3WhîeOkO√Pass
(
pWInfo
, 
aiCurO√Pass
);

389 
i
=0; i<
nPk
; i++){

390 
	`as£π
–
pPk
->
aiCﬁumn
[
i
]>=0 );

391 
	`sqlôe3Ex¥CodeGëCﬁumnOfTabÀ
(
v
, 
pTab
, 
iD©aCur
, 
pPk
->
aiCﬁumn
[
i
],

392 
iPk
+
i
);

394 if–
okO√Pass
 ){

395 
	`sqlôe3VdbeCh™geToNo›
(
v
, 
addrO≥n
);

396 
nKey
 = 
nPk
;

397 
ªgKey
 = 
iPk
;

399 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_MakeRec‹d
, 
iPk
, 
nPk
, 
ªgKey
,

400 
	`sqlôe3IndexAfföôySå
(
db
, 
pPk
), 
nPk
);

401 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IdxIn£π
, 
iEph
, 
ªgKey
);

403 
	`sqlôe3WhîeEnd
(
pWInfo
);

408 if–(
db
->
Êags
 & 
SQLITE_Cou¡Rows
Ë&& !
pP¨£
->
pTriggîTab
 ){

409 
ªgRowCou¡
 = ++
pP¨£
->
nMem
;

410 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 0, 
ªgRowCou¡
);

413 
œbñBªak
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

414 if–!
isVõw
 ){

421 if–
⁄Eº‹
==
OE_Rïœ˚
 ){

422 
	`mem£t
(
aToO≥n
, 1, 
nIdx
+1);

424 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

425 if–
pIdx
->
⁄Eº‹
==
OE_Rïœ˚
 ){

426 
	`mem£t
(
aToO≥n
, 1, 
nIdx
+1);

431 if–
okO√Pass
 ){

432 if–
aiCurO√Pass
[0]>=0 ) 
aToO≥n
[aiCurO√Pass[0]-
iBa£Cur
] = 0;

433 if–
aiCurO√Pass
[1]>=0 ) 
aToO≥n
[aiCurO√Pass[1]-
iBa£Cur
] = 0;

435 
	`sqlôe3O≥nTabÀAndIndi˚s
(
pP¨£
, 
pTab
, 
OP_O≥nWrôe
, 0, 
iBa£Cur
, 
aToO≥n
,

440 if–
okO√Pass
 ){

441 if–
aToO≥n
[
iD©aCur
-
iBa£Cur
] && !
isVõw
 ){

442 
	`as£π
–
pPk
 );

443 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_NŸFound
, 
iD©aCur
, 
œbñBªak
, 
ªgKey
, 
nKey
);

444 
	`VdbeCovîageNevîTakí
(
v
);

446 
œbñC⁄töue
 = 
œbñBªak
;

447 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IsNuŒ
, 
pPk
 ? 
ªgKey
 : 
ªgOldRowid
, 
œbñBªak
);

448 
	`VdbeCovîageIf
(
v
, 
pPk
==0);

449 
	`VdbeCovîageIf
(
v
, 
pPk
!=0);

450 }if–
pPk
 ){

451 
œbñC⁄töue
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

452 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Rewöd
, 
iEph
, 
œbñBªak
); 
	`VdbeCovîage
(v);

453 
addrT›
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_RowKey
, 
iEph
, 
ªgKey
);

454 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_NŸFound
, 
iD©aCur
, 
œbñC⁄töue
, 
ªgKey
, 0);

455 
	`VdbeCovîage
(
v
);

457 
œbñC⁄töue
 = 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_RowSëRód
, 
ªgRowSë
, 
œbñBªak
,

458 
ªgOldRowid
);

459 
	`VdbeCovîage
(
v
);

460 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_NŸExi°s
, 
iD©aCur
, 
œbñC⁄töue
, 
ªgOldRowid
);

461 
	`VdbeCovîage
(
v
);

468 
	`as£π
–
chngKey
 || 
pTriggî
 || 
hasFK
 || 
ªgOldRowid
==
ªgNewRowid
 );

469 if–
chngRowid
 ){

470 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pRowidEx¥
, 
ªgNewRowid
);

471 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Mu°BeI¡
, 
ªgNewRowid
); 
	`VdbeCovîage
(v);

476 if–
chngPk
 || 
hasFK
 || 
pTriggî
 ){

477 
u32
 
ﬁdmask
 = (
hasFK
 ? 
	`sqlôe3FkOldmask
(
pP¨£
, 
pTab
) : 0);

478 
ﬁdmask
 |
	`sqlôe3TriggîCﬁmask
(
pP¨£
,

479 
pTriggî
, 
pCh™ges
, 0, 
TRIGGER_BEFORE
|
TRIGGER_AFTER
, 
pTab
, 
⁄Eº‹


481 
i
=0; i<
pTab
->
nCﬁ
; i++){

482 if–
ﬁdmask
==0xffffffff

483 || (
i
<32 && (
ﬁdmask
 & 
	`MASKBIT32
(i))!=0)

484 || (
pTab
->
aCﬁ
[
i
].
cﬁFœgs
 & 
COLFLAG_PRIMKEY
)!=0

486 
	`ã°ˇ£
–
ﬁdmask
!=0xfffffff‡&& 
i
==31 );

487 
	`sqlôe3Ex¥CodeGëCﬁumnOfTabÀ
(
v
, 
pTab
, 
iD©aCur
, 
i
, 
ªgOld
+i);

489 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NuŒ
, 0, 
ªgOld
+
i
);

492 if–
chngRowid
==0 && 
pPk
==0 ){

493 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_C›y
, 
ªgOldRowid
, 
ªgNewRowid
);

510 
√wmask
 = 
	`sqlôe3TriggîCﬁmask
(

511 
pP¨£
, 
pTriggî
, 
pCh™ges
, 1, 
TRIGGER_BEFORE
, 
pTab
, 
⁄Eº‹


513 
i
=0; i<
pTab
->
nCﬁ
; i++){

514 if–
i
==
pTab
->
iPKey
 ){

515 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NuŒ
, 0, 
ªgNew
+
i
);

517 
j
 = 
aXRef
[
i
];

518 if–
j
>=0 ){

519 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pCh™ges
->
a
[
j
].
pEx¥
, 
ªgNew
+
i
);

520 }if–0==(
tmask
&
TRIGGER_BEFORE
Ë|| 
i
>31 || (
√wmask
 & 
	`MASKBIT32
(i)) ){

526 
	`ã°ˇ£
–
i
==31 );

527 
	`ã°ˇ£
–
i
==32 );

528 
	`sqlôe3Ex¥CodeGëCﬁumnToReg
(
pP¨£
, 
pTab
, 
i
, 
iD©aCur
, 
ªgNew
+i);

530 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NuŒ
, 0, 
ªgNew
+
i
);

538 if–
tmask
&
TRIGGER_BEFORE
 ){

539 
	`sqlôe3TabÀAfföôy
(
v
, 
pTab
, 
ªgNew
);

540 
	`sqlôe3CodeRowTriggî
(
pP¨£
, 
pTriggî
, 
TK_UPDATE
, 
pCh™ges
,

541 
TRIGGER_BEFORE
, 
pTab
, 
ªgOldRowid
, 
⁄Eº‹
, 
œbñC⁄töue
);

549 if–
pPk
 ){

550 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_NŸFound
, 
iD©aCur
, 
œbñC⁄töue
,
ªgKey
,
nKey
);

551 
	`VdbeCovîage
(
v
);

553 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_NŸExi°s
, 
iD©aCur
, 
œbñC⁄töue
, 
ªgOldRowid
);

554 
	`VdbeCovîage
(
v
);

562 
i
=0; i<
pTab
->
nCﬁ
; i++){

563 if–
aXRef
[
i
]<0 && i!=
pTab
->
iPKey
 ){

564 
	`sqlôe3Ex¥CodeGëCﬁumnOfTabÀ
(
v
, 
pTab
, 
iD©aCur
, 
i
, 
ªgNew
+i);

569 if–!
isVõw
 ){

570 
addr1
 = 0;

571 
bRïœ˚
 = 0;

574 
	`as£π
–
ªgOldRowid
>0 );

575 
	`sqlôe3Gíî©eC⁄°øötChecks
(
pP¨£
, 
pTab
, 
aRegIdx
, 
iD©aCur
, 
iIdxCur
,

576 
ªgNewRowid
, 
ªgOldRowid
, 
chngKey
, 
⁄Eº‹
, 
œbñC⁄töue
, &
bRïœ˚
,

577 
aXRef
);

580 if–
hasFK
 ){

581 
	`sqlôe3FkCheck
(
pP¨£
, 
pTab
, 
ªgOldRowid
, 0, 
aXRef
, 
chngKey
);

585 if–
bRïœ˚
 || 
chngKey
 ){

586 if–
pPk
 ){

587 
addr1
 = 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_NŸFound
, 
iD©aCur
, 0, 
ªgKey
, 
nKey
);

589 
addr1
 = 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_NŸExi°s
, 
iD©aCur
, 0, 
ªgOldRowid
);

591 
	`VdbeCovîageNevîTakí
(
v
);

593 
	`sqlôe3Gíî©eRowIndexDñëe
(
pP¨£
, 
pTab
, 
iD©aCur
, 
iIdxCur
, 
aRegIdx
, -1);

604 
	`as£π
–
ªgNew
==
ªgNewRowid
+1 );

605 #ifde‡
SQLITE_ENABLE_PREUPDATE_HOOK


606 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Dñëe
, 
iD©aCur
,

607 
OPFLAG_ISUPDATE
 | ((
hasFK
 || 
chngKey
 || 
pPk
!=0Ë? 0 : 
OPFLAG_ISNOOP
),

608 
ªgNewRowid


610 if–!
pP¨£
->
√°ed
 ){

611 
	`sqlôe3VdbeCh™geP4
(
v
, -1, (*)
pTab
, 
P4_TABLE
);

614 if–
hasFK
 || 
chngKey
 || 
pPk
!=0 ){

615 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Dñëe
, 
iD©aCur
, 0);

618 if–
bRïœ˚
 || 
chngKey
 ){

619 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr1
);

622 if–
hasFK
 ){

623 
	`sqlôe3FkCheck
(
pP¨£
, 
pTab
, 0, 
ªgNewRowid
, 
aXRef
, 
chngKey
);

627 
	`sqlôe3Com∂ëeIn£πi⁄
(
pP¨£
, 
pTab
, 
iD©aCur
, 
iIdxCur
,

628 
ªgNewRowid
, 
aRegIdx
, 1, 0, 0);

633 if–
hasFK
 ){

634 
	`sqlôe3FkA˘i⁄s
(
pP¨£
, 
pTab
, 
pCh™ges
, 
ªgOldRowid
, 
aXRef
, 
chngKey
);

640 if–(
db
->
Êags
 & 
SQLITE_Cou¡Rows
Ë&& !
pP¨£
->
pTriggîTab
){

641 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_AddImm
, 
ªgRowCou¡
, 1);

644 
	`sqlôe3CodeRowTriggî
(
pP¨£
, 
pTriggî
, 
TK_UPDATE
, 
pCh™ges
,

645 
TRIGGER_AFTER
, 
pTab
, 
ªgOldRowid
, 
⁄Eº‹
, 
œbñC⁄töue
);

650 if–
okO√Pass
 ){

652 }if–
pPk
 ){

653 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
œbñC⁄töue
);

654 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Next
, 
iEph
, 
addrT›
); 
	`VdbeCovîage
(v);

656 
	`sqlôe3VdbeGŸo
(
v
, 
œbñC⁄töue
);

658 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
œbñBªak
);

661 
i
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, i++){

662 
	`as£π
–
aRegIdx
 );

663 if–
aToO≥n
[
i
+1] ){

664 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Clo£
, 
iIdxCur
+
i
, 0);

667 if–
iD©aCur
<
iIdxCur
 ) 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Clo£
, iDataCur, 0);

673 if–
pP¨£
->
√°ed
==0 &&ÖP¨£->
pTriggîTab
==0 ){

674 
	`sqlôe3Autoö¸emítEnd
(
pP¨£
);

682 if–(
db
->
Êags
&
SQLITE_Cou¡Rows
Ë&& !
pP¨£
->
pTriggîTab
 && !pP¨£->
√°ed
 ){

683 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Resu…Row
, 
ªgRowCou¡
, 1);

684 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 1);

685 
	`sqlôe3VdbeSëCﬁName
(
v
, 0, 
COLNAME_NAME
, "row†upd©ed", 
SQLITE_STATIC
);

688 
upd©e_˛ónup
:

689 
	`sqlôe3AuthC⁄ãxtP›
(&
sC⁄ãxt
);

690 
	`sqlôe3DbFªe
(
db
, 
aXRef
);

691 
	`sqlôe3SrcLi°Dñëe
(
db
, 
pTabLi°
);

692 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
pCh™ges
);

693 
	`sqlôe3Ex¥Dñëe
(
db
, 
pWhîe
);

695 
	}
}

699 #ifde‡
isVõw


700 #unde‡
isVõw


702 #ifde‡
pTriggî


703 #unde‡
pTriggî


706 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


728 
	$upd©eVútuÆTabÀ
(

729 
P¨£
 *
pP¨£
,

730 
SrcLi°
 *
pSrc
,

731 
TabÀ
 *
pTab
,

732 
Ex¥Li°
 *
pCh™ges
,

733 
Ex¥
 *
pRowid
,

734 *
aXRef
,

735 
Ex¥
 *
pWhîe
,

736 
⁄Eº‹


738 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

739 
ïhemTab
;

740 
i
;

741 
sqlôe3
 *
db
 = 
pP¨£
->db;

742 c⁄° *
pVTab
 = (c⁄° *)
	`sqlôe3GëVTabÀ
(
db
, 
pTab
);

743 
WhîeInfo
 *
pWInfo
;

744 
nArg
 = 2 + 
pTab
->
nCﬁ
;

745 
ªgArg
;

746 
ªgRec
;

747 
ªgRowid
;

748 
iC§
 = 
pSrc
->
a
[0].
iCurs‹
;

749 
aDummy
[2];

750 
bO√Pass
;

751 
addr
;

756 
	`as£π
–
v
 );

757 
ïhemTab
 = 
pP¨£
->
nTab
++;

758 
addr

	`sqlôe3VdbeAddOp2
(
v
, 
OP_O≥nEphemîÆ
, 
ïhemTab
, 
nArg
);

759 
ªgArg
 = 
pP¨£
->
nMem
 + 1;

760 
pP¨£
->
nMem
 +
nArg
;

761 
ªgRec
 = ++
pP¨£
->
nMem
;

762 
ªgRowid
 = ++
pP¨£
->
nMem
;

765 
pWInfo
 = 
	`sqlôe3WhîeBegö
(
pP¨£
, 
pSrc
, 
pWhîe
, 0,0,
WHERE_ONEPASS_DESIRED
,0);

766 if–
pWInfo
==0 ) ;

769 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Rowid
, 
iC§
, 
ªgArg
);

770 if–
pRowid
 ){

771 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pRowid
, 
ªgArg
+1);

773 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Rowid
, 
iC§
, 
ªgArg
+1);

775 
i
=0; i<
pTab
->
nCﬁ
; i++){

776 if–
aXRef
[
i
]>=0 ){

777 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pCh™ges
->
a
[
aXRef
[
i
]].
pEx¥
, 
ªgArg
+2+i);

779 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_VCﬁumn
, 
iC§
, 
i
, 
ªgArg
+2+i);

783 
bO√Pass
 = 
	`sqlôe3WhîeOkO√Pass
(
pWInfo
, 
aDummy
);

785 if–
bO√Pass
 ){

789 
	`sqlôe3VdbeCh™geToNo›
(
v
, 
addr
);

790 if–
	`sqlôe3IsT›Àvñ
(
pP¨£
) ){

791 
pP¨£
->
isMu…iWrôe
 = 0;

796 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_MakeRec‹d
, 
ªgArg
, 
nArg
, 
ªgRec
);

797 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NewRowid
, 
ïhemTab
, 
ªgRowid
);

798 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_In£π
, 
ïhemTab
, 
ªgRec
, 
ªgRowid
);

802 if–
bO√Pass
==0 ){

804 
	`sqlôe3WhîeEnd
(
pWInfo
);

807 
addr
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Rewöd
, 
ïhemTab
); 
	`VdbeCovîage
(v);

811 
i
=0; i<
nArg
; i++){

812 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Cﬁumn
, 
ïhemTab
, 
i
, 
ªgArg
+i);

815 
	`sqlôe3VèbMakeWrôabÀ
(
pP¨£
, 
pTab
);

816 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_VUpd©e
, 0, 
nArg
, 
ªgArg
, 
pVTab
, 
P4_VTAB
);

817 
	`sqlôe3VdbeCh™geP5
(
v
, 
⁄Eº‹
==
OE_DeÁu…
 ? 
OE_Ab‹t
 : onError);

818 
	`sqlôe3MayAb‹t
(
pP¨£
);

822 if–
bO√Pass
==0 ){

823 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Next
, 
ïhemTab
, 
addr
+1); 
	`VdbeCovîage
(v);

824 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr
);

825 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Clo£
, 
ïhemTab
, 0);

827 
	`sqlôe3WhîeEnd
(
pWInfo
);

829 
	}
}

	@utf.c

36 
	~"sqlôeI¡.h
"

37 
	~<as£π.h
>

38 
	~"vdbeI¡.h
"

40 #i‡!
deföed
(
SQLITE_AMALGAMATION
Ë&& 
SQLITE_BYTEORDER
==0

45 c⁄° 
	gsqlôe3⁄e
 = 1;

52 c⁄° 
	gsqlôe3Utf8Tøns1
[] = {

64 
	#WRITE_UTF8
(
zOut
, 
c
) { \

65 if–
c
<0x00080 ){ \

66 *
zOut
++ = (
u8
)(
c
&0xFF); \

68 if–
c
<0x00800 ){ \

69 *
zOut
++ = 0xC0 + (
u8
)((
c
>>6)&0x1F); \

70 *
zOut
++ = 0x80 + (
u8
)(
c
 & 0x3F); \

72 if–
c
<0x10000 ){ \

73 *
zOut
++ = 0xE0 + (
u8
)((
c
>>12)&0x0F); \

74 *
zOut
++ = 0x80 + (
u8
)((
c
>>6) & 0x3F); \

75 *
zOut
++ = 0x80 + (
u8
)(
c
 & 0x3F); \

77 *
zOut
++ = 0xF0 + (
u8
)((
c
>>18) & 0x07); \

78 *
zOut
++ = 0x80 + (
u8
)((
c
>>12) & 0x3F); \

79 *
zOut
++ = 0x80 + (
u8
)((
c
>>6) & 0x3F); \

80 *
zOut
++ = 0x80 + (
u8
)(
c
 & 0x3F); \

82 }

	)

84 
	#WRITE_UTF16LE
(
zOut
, 
c
) { \

85 if–
c
<=0xFFFF ){ \

86 *
zOut
++ = (
u8
)(
c
&0x00FF); \

87 *
zOut
++ = (
u8
)((
c
>>8)&0x00FF); \

89 *
zOut
++ = (
u8
)(((
c
>>10)&0x003F) + (((c-0x10000)>>10)&0x00C0)); \

90 *
zOut
++ = (
u8
)(0x00D8 + (((
c
-0x10000)>>18)&0x03)); \

91 *
zOut
++ = (
u8
)(
c
&0x00FF); \

92 *
zOut
++ = (
u8
)(0x00DC + ((
c
>>8)&0x03)); \

94 }

	)

96 
	#WRITE_UTF16BE
(
zOut
, 
c
) { \

97 if–
c
<=0xFFFF ){ \

98 *
zOut
++ = (
u8
)((
c
>>8)&0x00FF); \

99 *
zOut
++ = (
u8
)(
c
&0x00FF); \

101 *
zOut
++ = (
u8
)(0x00D8 + (((
c
-0x10000)>>18)&0x03)); \

102 *
zOut
++ = (
u8
)(((
c
>>10)&0x003F) + (((c-0x10000)>>10)&0x00C0)); \

103 *
zOut
++ = (
u8
)(0x00DC + ((
c
>>8)&0x03)); \

104 *
zOut
++ = (
u8
)(
c
&0x00FF); \

106 }

	)

108 
	#READ_UTF16LE
(
zIn
, 
TERM
, 
c
){ \

109 
c
 = (*
zIn
++); \

110 
c
 +((*
zIn
++)<<8); \

111 if–
c
>=0xD800 && c<0xE000 && 
TERM
 ){ \

112 
c2
 = (*
zIn
++); \

113 
c2
 +((*
zIn
++)<<8); \

114 
c
 = (
c2
&0x03FF) + ((c&0x003F)<<10) + (((c&0x03C0)+0x0040)<<10); \

116 }

	)

118 
	#READ_UTF16BE
(
zIn
, 
TERM
, 
c
){ \

119 
c
 = ((*
zIn
++)<<8); \

120 
c
 +(*
zIn
++); \

121 if–
c
>=0xD800 && c<0xE000 && 
TERM
 ){ \

122 
c2
 = ((*
zIn
++)<<8); \

123 
c2
 +(*
zIn
++); \

124 
c
 = (
c2
&0x03FF) + ((c&0x003F)<<10) + (((c&0x03C0)+0x0040)<<10); \

126 }

	)

155 
	#READ_UTF8
(
zIn
, 
zTîm
, 
c
) \

156 
c
 = *(
zIn
++); \

157 if–
c
>=0xc0 ){ \

158 
c
 = 
sqlôe3Utf8Tøns1
[c-0xc0]; \

159  
zIn
!=
zTîm
 && (*zIn & 0xc0)==0x80 ){ \

160 
c
 = (c<<6Ë+ (0x3‡& *(
zIn
++)); \

162 if–
c
<0x80 \

163 || (
c
&0xFFFFF800)==0xD800 \

164 || (
c
&0xFFFFFFFE)==0xFFFE ){ c = 0xFFFD; } \

165 }

	)

166 
u32
 
	$sqlôe3Utf8Ród
(

167 c⁄° **
pz


169 
c
;

174 
c
 = *((*
pz
)++);

175 if–
c
>=0xc0 ){

176 
c
 = 
sqlôe3Utf8Tøns1
[c-0xc0];

177  (*(*
pz
) & 0xc0)==0x80 ){

178 
c
 = (c<<6Ë+ (0x3‡& *((*
pz
)++));

180 if–
c
<0x80

181 || (
c
&0xFFFFF800)==0xD800

182 || (
c
&0xFFFFFFFE)==0xFFFE ){ c = 0xFFFD; }

184  
c
;

185 
	}
}

196 #i‚de‡
SQLITE_OMIT_UTF16


202 
SQLITE_NOINLINE
 
	$sqlôe3VdbeMemTøn¶©e
(
Mem
 *
pMem
, 
u8
 
desúedEnc
){

203 
Àn
;

204 *
zOut
;

205 *
zIn
;

206 *
zTîm
;

207 *
z
;

208 
c
;

210 
	`as£π
–
pMem
->
db
==0 || 
	`sqlôe3_muãx_hñd
’Mem->db->
muãx
) );

211 
	`as£π
–
pMem
->
Êags
&
MEM_Så
 );

212 
	`as£π
–
pMem
->
íc
!=
desúedEnc
 );

213 
	`as£π
–
pMem
->
íc
!=0 );

214 
	`as£π
–
pMem
->
n
>=0 );

216 #i‡
	`deföed
(
TRANSLATE_TRACE
Ë&& deföed(
SQLITE_DEBUG
)

218 
zBuf
[100];

219 
	`sqlôe3VdbeMemPªâyPröt
(
pMem
, 
zBuf
);

220 
	`Ârötf
(
°dîr
, "INPUT: %s\n", 
zBuf
);

228 if–
pMem
->
íc
!=
SQLITE_UTF8
 && 
desúedEnc
!=SQLITE_UTF8 ){

229 
u8
 
ãmp
;

230 
rc
;

231 
rc
 = 
	`sqlôe3VdbeMemMakeWrôóbÀ
(
pMem
);

232 if–
rc
!=
SQLITE_OK
 ){

233 
	`as£π
–
rc
==
SQLITE_NOMEM
 );

234  
SQLITE_NOMEM_BKPT
;

236 
zIn
 = (
u8
*)
pMem
->
z
;

237 
zTîm
 = &
zIn
[
pMem
->
n
&~1];

238  
zIn
<
zTîm
 ){

239 
ãmp
 = *
zIn
;

240 *
zIn
 = *(zIn+1);

241 
zIn
++;

242 *
zIn
++ = 
ãmp
;

244 
pMem
->
íc
 = 
desúedEnc
;

245 
å™¶©e_out
;

249 if–
desúedEnc
==
SQLITE_UTF8
 ){

255 
pMem
->
n
 &= ~1;

256 
Àn
 = 
pMem
->
n
 * 2 + 1;

263 
Àn
 = 
pMem
->
n
 * 2 + 2;

272 
zIn
 = (
u8
*)
pMem
->
z
;

273 
zTîm
 = &
zIn
[
pMem
->
n
];

274 
zOut
 = 
	`sqlôe3DbMÆlocRaw
(
pMem
->
db
, 
Àn
);

275 if–!
zOut
 ){

276  
SQLITE_NOMEM_BKPT
;

278 
z
 = 
zOut
;

280 if–
pMem
->
íc
==
SQLITE_UTF8
 ){

281 if–
desúedEnc
==
SQLITE_UTF16LE
 ){

283  
zIn
<
zTîm
 ){

284 
	`READ_UTF8
(
zIn
, 
zTîm
, 
c
);

285 
	`WRITE_UTF16LE
(
z
, 
c
);

288 
	`as£π
–
desúedEnc
==
SQLITE_UTF16BE
 );

290  
zIn
<
zTîm
 ){

291 
	`READ_UTF8
(
zIn
, 
zTîm
, 
c
);

292 
	`WRITE_UTF16BE
(
z
, 
c
);

295 
pMem
->
n
 = ()(
z
 - 
zOut
);

296 *
z
++ = 0;

298 
	`as£π
–
desúedEnc
==
SQLITE_UTF8
 );

299 if–
pMem
->
íc
==
SQLITE_UTF16LE
 ){

301  
zIn
<
zTîm
 ){

302 
	`READ_UTF16LE
(
zIn
, zIn<
zTîm
, 
c
);

303 
	`WRITE_UTF8
(
z
, 
c
);

307  
zIn
<
zTîm
 ){

308 
	`READ_UTF16BE
(
zIn
, zIn<
zTîm
, 
c
);

309 
	`WRITE_UTF8
(
z
, 
c
);

312 
pMem
->
n
 = ()(
z
 - 
zOut
);

314 *
z
 = 0;

315 
	`as£π
–(
pMem
->
n
+(
desúedEnc
==
SQLITE_UTF8
?1:2))<=
Àn
 );

317 
c
 = 
pMem
->
Êags
;

318 
	`sqlôe3VdbeMemRñó£
(
pMem
);

319 
pMem
->
Êags
 = 
MEM_Så
|
MEM_Tîm
|(
c
&(
MEM_AffMask
|
MEM_Subty≥
));

320 
pMem
->
íc
 = 
desúedEnc
;

321 
pMem
->
z
 = (*)
zOut
;

322 
pMem
->
zMÆloc
 =ÖMem->
z
;

323 
pMem
->
szMÆloc
 = 
	`sqlôe3DbMÆlocSize
’Mem->
db
,ÖMem->
z
);

325 
å™¶©e_out
:

326 #i‡
	`deföed
(
TRANSLATE_TRACE
Ë&& deföed(
SQLITE_DEBUG
)

328 
zBuf
[100];

329 
	`sqlôe3VdbeMemPªâyPröt
(
pMem
, 
zBuf
);

330 
	`Ârötf
(
°dîr
, "OUTPUT: %s\n", 
zBuf
);

333  
SQLITE_OK
;

334 
	}
}

345 
	$sqlôe3VdbeMemH™dÀBom
(
Mem
 *
pMem
){

346 
rc
 = 
SQLITE_OK
;

347 
u8
 
bom
 = 0;

349 
	`as£π
–
pMem
->
n
>=0 );

350 if–
pMem
->
n
>1 ){

351 
u8
 
b1
 = *(u8 *)
pMem
->
z
;

352 
u8
 
b2
 = *(((u8 *)
pMem
->
z
) + 1);

353 if–
b1
==0xFE && 
b2
==0xFF ){

354 
bom
 = 
SQLITE_UTF16BE
;

356 if–
b1
==0xFF && 
b2
==0xFE ){

357 
bom
 = 
SQLITE_UTF16LE
;

361 if–
bom
 ){

362 
rc
 = 
	`sqlôe3VdbeMemMakeWrôóbÀ
(
pMem
);

363 if–
rc
==
SQLITE_OK
 ){

364 
pMem
->
n
 -= 2;

365 
	`memmove
(
pMem
->
z
, &pMem->z[2],ÖMem->
n
);

366 
pMem
->
z
[pMem->
n
] = '\0';

367 
pMem
->
z
[pMem->
n
+1] = '\0';

368 
pMem
->
Êags
 |
MEM_Tîm
;

369 
pMem
->
íc
 = 
bom
;

372  
rc
;

373 
	}
}

383 
	$sqlôe3Utf8Ch¨Lí
(c⁄° *
zIn
, 
nByã
){

384 
r
 = 0;

385 c⁄° 
u8
 *
z
 = (c⁄° u8*)
zIn
;

386 c⁄° 
u8
 *
zTîm
;

387 if–
nByã
>=0 ){

388 
zTîm
 = &
z
[
nByã
];

390 
zTîm
 = (c⁄° 
u8
*)(-1);

392 
	`as£π
–
z
<=
zTîm
 );

393  *
z
!=0 && z<
zTîm
 ){

394 
	`SQLITE_SKIP_UTF8
(
z
);

395 
r
++;

397  
r
;

398 
	}
}

403 #i‡
deföed
(
SQLITE_TEST
Ë&& deföed(
SQLITE_DEBUG
)

413 
	$sqlôe3Utf8To8
(*
zIn
){

414 *
zOut
 = 
zIn
;

415 *
zSèπ
 = 
zIn
;

416 
u32
 
c
;

418  
zIn
[0] && 
zOut
<=zIn ){

419 
c
 = 
	`sqlôe3Utf8Ród
((c⁄° 
u8
**)&
zIn
);

420 if–
c
!=0xfffd ){

421 
	`WRITE_UTF8
(
zOut
, 
c
);

424 *
zOut
 = 0;

425  ()(
zOut
 - 
zSèπ
);

426 
	}
}

429 #i‚de‡
SQLITE_OMIT_UTF16


437 *
	$sqlôe3Utf16to8
(
sqlôe3
 *
db
, c⁄° *
z
, 
nByã
, 
u8
 
íc
){

438 
Mem
 
m
;

439 
	`mem£t
(&
m
, 0, (m));

440 
m
.
db
 = db;

441 
	`sqlôe3VdbeMemSëSå
(&
m
, 
z
, 
nByã
, 
íc
, 
SQLITE_STATIC
);

442 
	`sqlôe3VdbeCh™geEncodög
(&
m
, 
SQLITE_UTF8
);

443 if–
db
->
mÆlocFaûed
 ){

444 
	`sqlôe3VdbeMemRñó£
(&
m
);

445 
m
.
z
 = 0;

447 
	`as£π
–(
m
.
Êags
 & 
MEM_Tîm
)!=0 || 
db
->
mÆlocFaûed
 );

448 
	`as£π
–(
m
.
Êags
 & 
MEM_Så
)!=0 || 
db
->
mÆlocFaûed
 );

449 
	`as£π
–
m
.
z
 || 
db
->
mÆlocFaûed
 );

450  
m
.
z
;

451 
	}
}

458 
	$sqlôe3Utf16ByãLí
(c⁄° *
zIn
, 
nCh¨
){

459 
c
;

460 c⁄° *
z
 = 
zIn
;

461 
n
 = 0;

463 if–
SQLITE_UTF16NATIVE
==
SQLITE_UTF16BE
 ){

464  
n
<
nCh¨
 ){

465 
	`READ_UTF16BE
(
z
, 1, 
c
);

466 
n
++;

469  
n
<
nCh¨
 ){

470 
	`READ_UTF16LE
(
z
, 1, 
c
);

471 
n
++;

474  ()(
z
-(c⁄° *)
zIn
);

475 
	}
}

477 #i‡
deföed
(
SQLITE_TEST
)

483 
	$sqlôe3UtfSñfTe°
(){

484 
i
, 
t
;

485 
zBuf
[20];

486 *
z
;

487 
n
;

488 
c
;

490 
i
=0; i<0x00110000; i++){

491 
z
 = 
zBuf
;

492 
	`WRITE_UTF8
(
z
, 
i
);

493 
n
 = ()(
z
-
zBuf
);

494 
	`as£π
–
n
>0 &&Ç<=4 );

495 
z
[0] = 0;

496 
z
 = 
zBuf
;

497 
c
 = 
	`sqlôe3Utf8Ród
((c⁄° 
u8
**)&
z
);

498 
t
 = 
i
;

499 if–
i
>=0xD800 && i<=0xDFFF ) 
t
 = 0xFFFD;

500 if–(
i
&0xFFFFFFFE)==0xFFFE ) 
t
 = 0xFFFD;

501 
	`as£π
–
c
==
t
 );

502 
	`as£π
–(
z
-
zBuf
)==
n
 );

504 
i
=0; i<0x00110000; i++){

505 if–
i
>=0xD800 && i<0xE000 ) ;

506 
z
 = 
zBuf
;

507 
	`WRITE_UTF16LE
(
z
, 
i
);

508 
n
 = ()(
z
-
zBuf
);

509 
	`as£π
–
n
>0 &&Ç<=4 );

510 
z
[0] = 0;

511 
z
 = 
zBuf
;

512 
	`READ_UTF16LE
(
z
, 1, 
c
);

513 
	`as£π
–
c
==
i
 );

514 
	`as£π
–(
z
-
zBuf
)==
n
 );

516 
i
=0; i<0x00110000; i++){

517 if–
i
>=0xD800 && i<0xE000 ) ;

518 
z
 = 
zBuf
;

519 
	`WRITE_UTF16BE
(
z
, 
i
);

520 
n
 = ()(
z
-
zBuf
);

521 
	`as£π
–
n
>0 &&Ç<=4 );

522 
z
[0] = 0;

523 
z
 = 
zBuf
;

524 
	`READ_UTF16BE
(
z
, 1, 
c
);

525 
	`as£π
–
c
==
i
 );

526 
	`as£π
–(
z
-
zBuf
)==
n
 );

528 
	}
}

	@util.c

18 
	~"sqlôeI¡.h
"

19 
	~<°d¨g.h
>

20 #i‡
HAVE_ISNAN
 || 
SQLITE_HAVE_ISNAN


21 
	~<m©h.h
>

27 #ifde‡
SQLITE_COVERAGE_TEST


28 
	$sqlôe3Covîage
(
x
){

29 
dummy
 = 0;

30 
dummy
 +()
x
;

31 
	}
}

45 #i‚de‡
SQLITE_OMIT_BUILTIN_TEST


46 
	$sqlôe3Fau…Sim
(
iTe°
){

47 (*
xCÆlback
)(Ë
sqlôe3GlobÆC⁄fig
.
xTe°CÆlback
;

48  
xCÆlback
 ? 
	`xCÆlback
(
iTe°
Ë: 
SQLITE_OK
;

49 
	}
}

52 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


59 
	$sqlôe3IsNaN
(
x
){

60 
rc
;

61 #i‡!
SQLITE_HAVE_ISNAN
 && !
HAVE_ISNAN


85 #ifde‡
__FAST_MATH__


86 #îr‹ 
SQLôe
 
wûl
 
nŸ
 
w‹k
 
c‹ª˘ly
 
wôh
 
the
 -
fÁ°
-
m©h
 
›ti⁄
 
of
 
GCC
.

88 vﬁ©ûê
y
 = 
x
;

89 vﬁ©ûê
z
 = 
y
;

90 
rc
 = (
y
!=
z
);

92 
rc
 = 
	`i¢™
(
x
);

94 
	`ã°ˇ£
–
rc
 );

95  
rc
;

96 
	}
}

107 
	$sqlôe3SåÀn30
(c⁄° *
z
){

108 if–
z
==0 )  0;

109  0x3ffffff‡& ()
	`°æí
(
z
);

110 
	}
}

119 *
	$sqlôe3CﬁumnTy≥
(
Cﬁumn
 *
pCﬁ
, *
zDÊt
){

120 if–(
pCﬁ
->
cﬁFœgs
 & 
COLFLAG_HASTYPE
)==0 )  
zDÊt
;

121  
pCﬁ
->
zName
 + 
	`°æí
(pCol->zName) + 1;

122 
	}
}

129 
SQLITE_NOINLINE
 
	$sqlôe3Eº‹Föish
(
sqlôe3
 *
db
, 
îr_code
){

130 if–
db
->
pEº
 ) 
	`sqlôe3VÆueSëNuŒ
(db->pErr);

131 
	`sqlôe3Sy°emEº‹
(
db
, 
îr_code
);

132 
	}
}

139 
	$sqlôe3Eº‹
(
sqlôe3
 *
db
, 
îr_code
){

140 
	`as£π
–
db
!=0 );

141 
db
->
îrCode
 = 
îr_code
;

142 if–
îr_code
 || 
db
->
pEº
 ) 
	`sqlôe3Eº‹Föish
(db,Érr_code);

143 
	}
}

149 
	$sqlôe3Sy°emEº‹
(
sqlôe3
 *
db
, 
rc
){

150 if–
rc
==
SQLITE_IOERR_NOMEM
 ) ;

151 
rc
 &= 0xff;

152 if–
rc
==
SQLITE_CANTOPEN
 ||Ñc==
SQLITE_IOERR
 ){

153 
db
->
iSysEºno
 = 
	`sqlôe3OsGëLa°Eº‹
(db->
pVfs
);

155 
	}
}

178 
	$sqlôe3Eº‹WôhMsg
(
sqlôe3
 *
db
, 
îr_code
, c⁄° *
zF‹m©
, ...){

179 
	`as£π
–
db
!=0 );

180 
db
->
îrCode
 = 
îr_code
;

181 
	`sqlôe3Sy°emEº‹
(
db
, 
îr_code
);

182 if–
zF‹m©
==0 ){

183 
	`sqlôe3Eº‹
(
db
, 
îr_code
);

184 }if–
db
->
pEº
 || (db->pEº = 
	`sqlôe3VÆueNew
(db))!=0 ){

185 *
z
;

186 
va_li°
 
≠
;

187 
	`va_°¨t
(
≠
, 
zF‹m©
);

188 
z
 = 
	`sqlôe3VMPrötf
(
db
, 
zF‹m©
, 
≠
);

189 
	`va_íd
(
≠
);

190 
	`sqlôe3VÆueSëSå
(
db
->
pEº
, -1, 
z
, 
SQLITE_UTF8
, 
SQLITE_DYNAMIC
);

192 
	}
}

211 
	$sqlôe3Eº‹Msg
(
P¨£
 *
pP¨£
, c⁄° *
zF‹m©
, ...){

212 *
zMsg
;

213 
va_li°
 
≠
;

214 
sqlôe3
 *
db
 = 
pP¨£
->db;

215 
	`va_°¨t
(
≠
, 
zF‹m©
);

216 
zMsg
 = 
	`sqlôe3VMPrötf
(
db
, 
zF‹m©
, 
≠
);

217 
	`va_íd
(
≠
);

218 if–
db
->
suµªssEº
 ){

219 
	`sqlôe3DbFªe
(
db
, 
zMsg
);

221 
pP¨£
->
nEº
++;

222 
	`sqlôe3DbFªe
(
db
, 
pP¨£
->
zEºMsg
);

223 
pP¨£
->
zEºMsg
 = 
zMsg
;

224 
pP¨£
->
rc
 = 
SQLITE_ERROR
;

226 
	}
}

245 
	$sqlôe3DequŸe
(*
z
){

246 
quŸe
;

247 
i
, 
j
;

248 if–
z
==0 ) ;

249 
quŸe
 = 
z
[0];

250 if–!
	`sqlôe3IsquŸe
(
quŸe
) ) ;

251 if–
quŸe
=='[' ) quote = ']';

252 
i
=1, 
j
=0;; i++){

253 
	`as£π
–
z
[
i
] );

254 if–
z
[
i
]==
quŸe
 ){

255 if–
z
[
i
+1]==
quŸe
 ){

256 
z
[
j
++] = 
quŸe
;

257 
i
++;

262 
z
[
j
++] = z[
i
];

265 
z
[
j
] = 0;

266 
	}
}

271 
	$sqlôe3TokíInô
(
Tokí
 *
p
, *
z
){

272 
p
->
z
 = z;

273 
p
->
n
 = 
	`sqlôe3SåÀn30
(
z
);

274 
	}
}

277 
	#UµîToLowî
 
sqlôe3UµîToLowî


	)

289 
	$sqlôe3_°ricmp
(c⁄° *
zLe·
, c⁄° *
zRight
){

290 if–
zLe·
==0 ){

291  
zRight
 ? -1 : 0;

292 }if–
zRight
==0 ){

295  
	`sqlôe3SåICmp
(
zLe·
, 
zRight
);

296 
	}
}

297 
	$sqlôe3SåICmp
(c⁄° *
zLe·
, c⁄° *
zRight
){

298 *
a
, *
b
;

299 
c
;

300 
a
 = (*)
zLe·
;

301 
b
 = (*)
zRight
;

303 
c
 = ()
UµîToLowî
[*
a
] - ()UµîToLowî[*
b
];

304 if–
c
 || *
a
==0 ) ;

305 
a
++;

306 
b
++;

308  
c
;

309 
	}
}

310 
	$sqlôe3_°∫icmp
(c⁄° *
zLe·
, c⁄° *
zRight
, 
N
){

311 *
a
, *
b
;

312 if–
zLe·
==0 ){

313  
zRight
 ? -1 : 0;

314 }if–
zRight
==0 ){

317 
a
 = (*)
zLe·
;

318 
b
 = (*)
zRight
;

319  
N
-- > 0 && *
a
!=0 && 
UµîToLowî
[*a]==UµîToLowî[*
b
]){á++; b++; }

320  
N
<0 ? 0 : 
UµîToLowî
[*
a
] - UµîToLowî[*
b
];

321 
	}
}

345 
	$sqlôe3AtoF
(c⁄° *
z
, *
pResu…
, 
Àngth
, 
u8
 
íc
){

346 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


347 
ö¸
;

348 c⁄° *
zEnd
 = 
z
 + 
Àngth
;

350 
sign
 = 1;

351 
i64
 
s
 = 0;

352 
d
 = 0;

353 
esign
 = 1;

354 
e
 = 0;

355 
eVÆid
 = 1;

356 
ªsu…
;

357 
nDigôs
 = 0;

358 
n⁄Num
 = 0;

360 
	`as£π
–
íc
==
SQLITE_UTF8
 ||Énc==
SQLITE_UTF16LE
 ||Énc==
SQLITE_UTF16BE
 );

361 *
pResu…
 = 0.0;

363 if–
íc
==
SQLITE_UTF8
 ){

364 
ö¸
 = 1;

366 
i
;

367 
ö¸
 = 2;

368 
	`as£π
–
SQLITE_UTF16LE
==2 && 
SQLITE_UTF16BE
==3 );

369 
i
=3-
íc
; i<
Àngth
 && 
z
[i]==0; i+=2){}

370 
n⁄Num
 = 
i
<
Àngth
;

371 
zEnd
 = &
z
[
i
^1];

372 
z
 +(
íc
&1);

376  
z
<
zEnd
 && 
	`sqlôe3Is•a˚
(*zËËz+=
ö¸
;

377 if–
z
>=
zEnd
 )  0;

380 if–*
z
=='-' ){

381 
sign
 = -1;

382 
z
+=
ö¸
;

383 }if–*
z
=='+' ){

384 
z
+=
ö¸
;

388  
z
<
zEnd
 && 
	`sqlôe3Isdigô
(*zË&& 
s
<((
LARGEST_INT64
-9)/10) ){

389 
s
 = s*10 + (*
z
 - '0');

390 
z
+=
ö¸
, 
nDigôs
++;

395  
z
<
zEnd
 && 
	`sqlôe3Isdigô
(*zËËz+=
ö¸
, 
nDigôs
++, 
d
++;

396 if–
z
>=
zEnd
 ) 
do_©of_ˇlc
;

399 if–*
z
=='.' ){

400 
z
+=
ö¸
;

403  
z
<
zEnd
 && 
	`sqlôe3Isdigô
(*z) ){

404 if–
s
<((
LARGEST_INT64
-9)/10) ){

405 
s
 = s*10 + (*
z
 - '0');

406 
d
--;

408 
z
+=
ö¸
, 
nDigôs
++;

411 if–
z
>=
zEnd
 ) 
do_©of_ˇlc
;

414 if–*
z
=='e' || *z=='E' ){

415 
z
+=
ö¸
;

416 
eVÆid
 = 0;

421 if–
z
>=
zEnd
 ) 
do_©of_ˇlc
;

424 if–*
z
=='-' ){

425 
esign
 = -1;

426 
z
+=
ö¸
;

427 }if–*
z
=='+' ){

428 
z
+=
ö¸
;

431  
z
<
zEnd
 && 
	`sqlôe3Isdigô
(*z) ){

432 
e
 =É<10000 ? (e*10 + (*
z
 - '0')) : 10000;

433 
z
+=
ö¸
;

434 
eVÆid
 = 1;

439  
z
<
zEnd
 && 
	`sqlôe3Is•a˚
(*zËËz+=
ö¸
;

441 
do_©of_ˇlc
:

443 
e
 = (e*
esign
Ë+ 
d
;

444 if–
e
<0 ) {

445 
esign
 = -1;

446 
e
 *= -1;

448 
esign
 = 1;

451 if–
s
==0 ) {

453 
ªsu…
 = 
sign
<0 ? -()0 : ()0;

461  
e
>0 ){

462 if–
esign
>0 ){

463 if–
s
>=(
LARGEST_INT64
/10) ) ;

464 
s
 *= 10;

466 if–
s
%10!=0 ) ;

467 
s
 /= 10;

469 
e
--;

473 
s
 = 
sign
<0 ? -s : s;

475 if–
e
==0 ){

476 
ªsu…
 = ()
s
;

478 
LONGDOUBLE_TYPE
 
sˇÀ
 = 1.0;

480 if–
e
>307 ){

481 if–
e
<342 ){

482  
e
%308 ) { 
sˇÀ
 *= 1.0e+1;É -= 1; }

483 if–
esign
<0 ){

484 
ªsu…
 = 
s
 / 
sˇÀ
;

485 
ªsu…
 /= 1.0e+308;

487 
ªsu…
 = 
s
 * 
sˇÀ
;

488 
ªsu…
 *= 1.0e+308;

490 }{ 
	`as£π
–
e
>=342 );

491 if–
esign
<0 ){

492 
ªsu…
 = 0.0*
s
;

494 
ªsu…
 = 1e308*1e308*
s
;

500  
e
%22 ) { 
sˇÀ
 *= 1.0e+1;É -= 1; }

501  
e
>0 ) { 
sˇÀ
 *= 1.0e+22;É -= 22; }

502 if–
esign
<0 ){

503 
ªsu…
 = 
s
 / 
sˇÀ
;

505 
ªsu…
 = 
s
 * 
sˇÀ
;

512 *
pResu…
 = 
ªsu…
;

515  
z
==
zEnd
 && 
nDigôs
>0 && 
eVÆid
 && 
n⁄Num
==0;

517  !
	`sqlôe3Atoi64
(
z
, 
pResu…
, 
Àngth
, 
íc
);

519 
	}
}

535 
	$com∑ª2pow63
(c⁄° *
zNum
, 
ö¸
){

536 
c
 = 0;

537 
i
;

539 c⁄° *
pow63
 = "922337203685477580";

540 
i
=0; 
c
==0 && i<18; i++){

541 
c
 = (
zNum
[
i
*
ö¸
]-
pow63
[i])*10;

543 if–
c
==0 ){

544 
c
 = 
zNum
[18*
ö¸
] - '8';

545 
	`ã°ˇ£
–
c
==(-1) );

546 
	`ã°ˇ£
–
c
==0 );

547 
	`ã°ˇ£
–
c
==(+1) );

549  
c
;

550 
	}
}

571 
	$sqlôe3Atoi64
(c⁄° *
zNum
, 
i64
 *
pNum
, 
Àngth
, 
u8
 
íc
){

572 
ö¸
;

573 
u64
 
u
 = 0;

574 
√g
 = 0;

575 
i
;

576 
c
 = 0;

577 
n⁄Num
 = 0;

578 c⁄° *
zSèπ
;

579 c⁄° *
zEnd
 = 
zNum
 + 
Àngth
;

580 
	`as£π
–
íc
==
SQLITE_UTF8
 ||Énc==
SQLITE_UTF16LE
 ||Énc==
SQLITE_UTF16BE
 );

581 if–
íc
==
SQLITE_UTF8
 ){

582 
ö¸
 = 1;

584 
ö¸
 = 2;

585 
	`as£π
–
SQLITE_UTF16LE
==2 && 
SQLITE_UTF16BE
==3 );

586 
i
=3-
íc
; i<
Àngth
 && 
zNum
[i]==0; i+=2){}

587 
n⁄Num
 = 
i
<
Àngth
;

588 
zEnd
 = &
zNum
[
i
^1];

589 
zNum
 +(
íc
&1);

591  
zNum
<
zEnd
 && 
	`sqlôe3Is•a˚
(*zNumËËzNum+=
ö¸
;

592 if–
zNum
<
zEnd
 ){

593 if–*
zNum
=='-' ){

594 
√g
 = 1;

595 
zNum
+=
ö¸
;

596 }if–*
zNum
=='+' ){

597 
zNum
+=
ö¸
;

600 
zSèπ
 = 
zNum
;

601  
zNum
<
zEnd
 && zNum[0]=='0' ){ zNum+=
ö¸
; }

602 
i
=0; &
zNum
[i]<
zEnd
 && (
c
=zNum[i])>='0' && c<='9'; i+=
ö¸
){

603 
u
 = u*10 + 
c
 - '0';

605 if–
u
>
LARGEST_INT64
 ){

606 *
pNum
 = 
√g
 ? 
SMALLEST_INT64
 : 
LARGEST_INT64
;

607 }if–
√g
 ){

608 *
pNum
 = -(
i64
)
u
;

610 *
pNum
 = (
i64
)
u
;

612 
	`ã°ˇ£
–
i
==18 );

613 
	`ã°ˇ£
–
i
==19 );

614 
	`ã°ˇ£
–
i
==20 );

615 if–&
zNum
[
i
]<
zEnd


616 || (
i
==0 && 
zSèπ
==
zNum
)

617 || 
i
>19*
ö¸


618 || 
n⁄Num


623 }if–
i
<19*
ö¸
 ){

625 
	`as£π
–
u
<=
LARGEST_INT64
 );

629 
c
 = 
	`com∑ª2pow63
(
zNum
, 
ö¸
);

630 if–
c
<0 ){

632 
	`as£π
–
u
<=
LARGEST_INT64
 );

634 }if–
c
>0 ){

640 
	`as£π
–
u
-1==
LARGEST_INT64
 );

641  
√g
 ? 0 : 2;

644 
	}
}

657 
	$sqlôe3DecOrHexToI64
(c⁄° *
z
, 
i64
 *
pOut
){

658 #i‚de‡
SQLITE_OMIT_HEX_INTEGER


659 if–
z
[0]=='0'

660 && (
z
[1]=='x' || z[1]=='X')

662 
u64
 
u
 = 0;

663 
i
, 
k
;

664 
i
=2; 
z
[i]=='0'; i++){}

665 
k
=
i
; 
	`sqlôe3Isxdigô
(
z
[k]); k++){

666 
u
 = u*16 + 
	`sqlôe3HexToI¡
(
z
[
k
]);

668 
	`mem˝y
(
pOut
, &
u
, 8);

669  (
z
[
k
]==0 && k-
i
<=16) ? 0 : 1;

673  
	`sqlôe3Atoi64
(
z
, 
pOut
, 
	`sqlôe3SåÀn30
(z), 
SQLITE_UTF8
);

675 
	}
}

687 
	$sqlôe3GëI¡32
(c⁄° *
zNum
, *
pVÆue
){

688 
sqlôe_öt64
 
v
 = 0;

689 
i
, 
c
;

690 
√g
 = 0;

691 if–
zNum
[0]=='-' ){

692 
√g
 = 1;

693 
zNum
++;

694 }if–
zNum
[0]=='+' ){

695 
zNum
++;

697 #i‚de‡
SQLITE_OMIT_HEX_INTEGER


698 if–
zNum
[0]=='0'

699 && (
zNum
[1]=='x' || zNum[1]=='X')

700 && 
	`sqlôe3Isxdigô
(
zNum
[2])

702 
u32
 
u
 = 0;

703 
zNum
 += 2;

704  
zNum
[0]=='0' ) zNum++;

705 
i
=0; 
	`sqlôe3Isxdigô
(
zNum
[i]) && i<8; i++){

706 
u
 = u*16 + 
	`sqlôe3HexToI¡
(
zNum
[
i
]);

708 if–(
u
&0x80000000)==0 && 
	`sqlôe3Isxdigô
(
zNum
[
i
])==0 ){

709 
	`mem˝y
(
pVÆue
, &
u
, 4);

716  
zNum
[0]=='0' ) zNum++;

717 
i
=0; i<11 && (
c
 = 
zNum
[i] - '0')>=0 && c<=9; i++){

718 
v
 = v*10 + 
c
;

726 
	`ã°ˇ£
–
i
==10 );

727 if–
i
>10 ){

730 
	`ã°ˇ£
–
v
-
√g
==2147483647 );

731 if–
v
-
√g
>2147483647 ){

734 if–
√g
 ){

735 
v
 = -v;

737 *
pVÆue
 = ()
v
;

739 
	}
}

745 
	$sqlôe3Atoi
(c⁄° *
z
){

746 
x
 = 0;

747 if–
z
 ) 
	`sqlôe3GëI¡32
(z, &
x
);

748  
x
;

749 
	}
}

780 
SQLITE_NOINLINE
 
	$putV¨öt64
(*
p
, 
u64
 
v
){

781 
i
, 
j
, 
n
;

782 
u8
 
buf
[10];

783 if–
v
 & (((
u64
)0xff000000)<<32) ){

784 
p
[8] = (
u8
)
v
;

785 
v
 >>= 8;

786 
i
=7; i>=0; i--){

787 
p
[
i
] = (
u8
)((
v
 & 0x7f) | 0x80);

788 
v
 >>= 7;

792 
n
 = 0;

794 
buf
[
n
++] = (
u8
)((
v
 & 0x7f) | 0x80);

795 
v
 >>= 7;

796 } 
v
!=0 );

797 
buf
[0] &= 0x7f;

798 
	`as£π
–
n
<=9 );

799 
i
=0, 
j
=
n
-1; j>=0; j--, i++){

800 
p
[
i
] = 
buf
[
j
];

802  
n
;

803 
	}
}

804 
	$sqlôe3PutV¨öt
(*
p
, 
u64
 
v
){

805 if–
v
<=0x7f ){

806 
p
[0] = 
v
&0x7f;

809 if–
v
<=0x3fff ){

810 
p
[0] = ((
v
>>7)&0x7f)|0x80;

811 
p
[1] = 
v
&0x7f;

814  
	`putV¨öt64
(
p
,
v
);

815 
	}
}

826 
	#SLOT_2_0
 0x001fc07f

	)

827 
	#SLOT_4_2_0
 0xf01fc07f

	)

834 
u8
 
	$sqlôe3GëV¨öt
(c⁄° *
p
, 
u64
 *
v
){

835 
u32
 
a
,
b
,
s
;

837 
a
 = *
p
;

839 i‡(!(
a
&0x80))

841 *
v
 = 
a
;

845 
p
++;

846 
b
 = *
p
;

848 i‡(!(
b
&0x80))

850 
a
 &= 0x7f;

851 
a
 =á<<7;

852 
a
 |
b
;

853 *
v
 = 
a
;

858 
	`as£π
–
SLOT_2_0
 == ((0x7f<<14) | (0x7f)) );

859 
	`as£π
–
SLOT_4_2_0
 == ((0xfU<<28) | (0x7f<<14) | (0x7f)) );

861 
p
++;

862 
a
 =á<<14;

863 
a
 |*
p
;

865 i‡(!(
a
&0x80))

867 
a
 &
SLOT_2_0
;

868 
b
 &= 0x7f;

869 
b
 = b<<7;

870 
a
 |
b
;

871 *
v
 = 
a
;

876 
a
 &
SLOT_2_0
;

877 
p
++;

878 
b
 = b<<14;

879 
b
 |*
p
;

881 i‡(!(
b
&0x80))

883 
b
 &
SLOT_2_0
;

886 
a
 =á<<7;

887 
a
 |
b
;

888 *
v
 = 
a
;

897 
b
 &
SLOT_2_0
;

898 
s
 = 
a
;

901 
p
++;

902 
a
 =á<<14;

903 
a
 |*
p
;

905 i‡(!(
a
&0x80))

911 
b
 = b<<7;

912 
a
 |
b
;

913 
s
 = s>>18;

914 *
v
 = ((
u64
)
s
)<<32 | 
a
;

919 
s
 = s<<7;

920 
s
 |
b
;

923 
p
++;

924 
b
 = b<<14;

925 
b
 |*
p
;

927 i‡(!(
b
&0x80))

931 
a
 &
SLOT_2_0
;

932 
a
 =á<<7;

933 
a
 |
b
;

934 
s
 = s>>18;

935 *
v
 = ((
u64
)
s
)<<32 | 
a
;

939 
p
++;

940 
a
 =á<<14;

941 
a
 |*
p
;

943 i‡(!(
a
&0x80))

945 
a
 &
SLOT_4_2_0
;

946 
b
 &
SLOT_2_0
;

947 
b
 = b<<7;

948 
a
 |
b
;

949 
s
 = s>>11;

950 *
v
 = ((
u64
)
s
)<<32 | 
a
;

955 
a
 &
SLOT_2_0
;

956 
p
++;

957 
b
 = b<<14;

958 
b
 |*
p
;

960 i‡(!(
b
&0x80))

962 
b
 &
SLOT_4_2_0
;

965 
a
 =á<<7;

966 
a
 |
b
;

967 
s
 = s>>4;

968 *
v
 = ((
u64
)
s
)<<32 | 
a
;

972 
p
++;

973 
a
 =á<<15;

974 
a
 |*
p
;

979 
b
 &
SLOT_2_0
;

980 
b
 = b<<8;

981 
a
 |
b
;

983 
s
 = s<<4;

984 
b
 = 
p
[-4];

985 
b
 &= 0x7f;

986 
b
 = b>>3;

987 
s
 |
b
;

989 *
v
 = ((
u64
)
s
)<<32 | 
a
;

992 
	}
}

1005 
u8
 
	$sqlôe3GëV¨öt32
(c⁄° *
p
, 
u32
 *
v
){

1006 
u32
 
a
,
b
;

1010 
a
 = *
p
;

1012 #i‚de‡
gëV¨öt32


1013 i‡(!(
a
&0x80))

1016 *
v
 = 
a
;

1022 
p
++;

1023 
b
 = *
p
;

1025 i‡(!(
b
&0x80))

1028 
a
 &= 0x7f;

1029 
a
 =á<<7;

1030 *
v
 = 
a
 | 
b
;

1035 
p
++;

1036 
a
 =á<<14;

1037 
a
 |*
p
;

1039 i‡(!(
a
&0x80))

1042 
a
 &= (0x7f<<14)|(0x7f);

1043 
b
 &= 0x7f;

1044 
b
 = b<<7;

1045 *
v
 = 
a
 | 
b
;

1060 
u64
 
v64
;

1061 
u8
 
n
;

1063 
p
 -= 2;

1064 
n
 = 
	`sqlôe3GëV¨öt
(
p
, &
v64
);

1065 
	`as£π
–
n
>3 &&Ç<=9 );

1066 if–(
v64
 & 
SQLITE_MAX_U32
)!=v64 ){

1067 *
v
 = 0xffffffff;

1069 *
v
 = (
u32
)
v64
;

1071  
n
;

1079 
p
++;

1080 
b
 = b<<14;

1081 
b
 |*
p
;

1083 i‡(!(
b
&0x80))

1086 
b
 &= (0x7f<<14)|(0x7f);

1087 
a
 &= (0x7f<<14)|(0x7f);

1088 
a
 =á<<7;

1089 *
v
 = 
a
 | 
b
;

1093 
p
++;

1094 
a
 =á<<14;

1095 
a
 |*
p
;

1097 i‡(!(
a
&0x80))

1100 
a
 &
SLOT_4_2_0
;

1101 
b
 &
SLOT_4_2_0
;

1102 
b
 = b<<7;

1103 *
v
 = 
a
 | 
b
;

1112 
u64
 
v64
;

1113 
u8
 
n
;

1115 
p
 -= 4;

1116 
n
 = 
	`sqlôe3GëV¨öt
(
p
, &
v64
);

1117 
	`as£π
–
n
>5 &&Ç<=9 );

1118 *
v
 = (
u32
)
v64
;

1119  
n
;

1122 
	}
}

1128 
	$sqlôe3V¨ötLí
(
u64
 
v
){

1129 
i
;

1130 
i
=1; (
v
 >>7)!=0; i++){ 
	`as£π
( i<10 ); }

1131  
i
;

1132 
	}
}

1138 
u32
 
	$sqlôe3Gë4byã
(c⁄° 
u8
 *
p
){

1139 #i‡
SQLITE_BYTEORDER
==4321

1140 
u32
 
x
;

1141 
	`mem˝y
(&
x
,
p
,4);

1142  
x
;

1143 #ñi‡
SQLITE_BYTEORDER
==1234 && !
	`deföed
(
SQLITE_DISABLE_INTRINSIC
) \

1144 && 
	`deföed
(
__GNUC__
Ë&& 
GCC_VERSION
>=4003000

1145 
u32
 
x
;

1146 
	`mem˝y
(&
x
,
p
,4);

1147  
	`__buûtö_bsw≠32
(
x
);

1148 #ñi‡
SQLITE_BYTEORDER
==1234 && !
	`deföed
(
SQLITE_DISABLE_INTRINSIC
) \

1149 && 
	`deföed
(
_MSC_VER
) && _MSC_VER>=1300

1150 
u32
 
x
;

1151 
	`mem˝y
(&
x
,
p
,4);

1152  
	`_byãsw≠_ul⁄g
(
x
);

1154 
	`ã°ˇ£
–
p
[0]&0x80 );

1155  (()
p
[0]<<24) | (p[1]<<16) | (p[2]<<8) |Ö[3];

1157 
	}
}

1158 
	$sqlôe3Put4byã
(*
p
, 
u32
 
v
){

1159 #i‡
SQLITE_BYTEORDER
==4321

1160 
	`mem˝y
(
p
,&
v
,4);

1161 #ñi‡
SQLITE_BYTEORDER
==1234 && !
	`deföed
(
SQLITE_DISABLE_INTRINSIC
) \

1162 && 
	`deföed
(
__GNUC__
Ë&& 
GCC_VERSION
>=4003000

1163 
u32
 
x
 = 
	`__buûtö_bsw≠32
(
v
);

1164 
	`mem˝y
(
p
,&
x
,4);

1165 #ñi‡
SQLITE_BYTEORDER
==1234 && !
	`deföed
(
SQLITE_DISABLE_INTRINSIC
) \

1166 && 
	`deföed
(
_MSC_VER
) && _MSC_VER>=1300

1167 
u32
 
x
 = 
	`_byãsw≠_ul⁄g
(
v
);

1168 
	`mem˝y
(
p
,&
x
,4);

1170 
p
[0] = (
u8
)(
v
>>24);

1171 
p
[1] = (
u8
)(
v
>>16);

1172 
p
[2] = (
u8
)(
v
>>8);

1173 
p
[3] = (
u8
)
v
;

1175 
	}
}

1184 
u8
 
	$sqlôe3HexToI¡
(
h
){

1185 
	`as£π
–(
h
>='0' && h<='9') || (h>='a' && h<='f') || (h>='A' && h<='F') );

1186 #ifde‡
SQLITE_ASCII


1187 
h
 += 9*(1&(h>>6));

1189 #ifde‡
SQLITE_EBCDIC


1190 
h
 += 9*(1&~(h>>4));

1192  (
u8
)(
h
 & 0xf);

1193 
	}
}

1195 #i‡!
deföed
(
SQLITE_OMIT_BLOB_LITERAL
Ë|| deföed(
SQLITE_HAS_CODEC
)

1202 *
	$sqlôe3HexToBlob
(
sqlôe3
 *
db
, c⁄° *
z
, 
n
){

1203 *
zBlob
;

1204 
i
;

1206 
zBlob
 = (*)
	`sqlôe3DbMÆlocRawNN
(
db
, 
n
/2 + 1);

1207 
n
--;

1208 if–
zBlob
 ){

1209 
i
=0; i<
n
; i+=2){

1210 
zBlob
[
i
/2] = (
	`sqlôe3HexToI¡
(
z
[i])<<4) | sqlite3HexToInt(z[i+1]);

1212 
zBlob
[
i
/2] = 0;

1214  
zBlob
;

1215 
	}
}

1223 
	$logBadC⁄√˘i⁄
(c⁄° *
zTy≥
){

1224 
	`sqlôe3_log
(
SQLITE_MISUSE
,

1226 
zTy≥


1228 
	}
}

1244 
	$sqlôe3Sa„tyCheckOk
(
sqlôe3
 *
db
){

1245 
u32
 
magic
;

1246 if–
db
==0 ){

1247 
	`logBadC⁄√˘i⁄
("NULL");

1250 
magic
 = 
db
->magic;

1251 if–
magic
!=
SQLITE_MAGIC_OPEN
 ){

1252 if–
	`sqlôe3Sa„tyCheckSickOrOk
(
db
) ){

1253 
	`ã°ˇ£
–
sqlôe3GlobÆC⁄fig
.
xLog
!=0 );

1254 
	`logBadC⁄√˘i⁄
("unopened");

1260 
	}
}

1261 
	$sqlôe3Sa„tyCheckSickOrOk
(
sqlôe3
 *
db
){

1262 
u32
 
magic
;

1263 
magic
 = 
db
->magic;

1264 if–
magic
!=
SQLITE_MAGIC_SICK
 &&

1265 
magic
!=
SQLITE_MAGIC_OPEN
 &&

1266 
magic
!=
SQLITE_MAGIC_BUSY
 ){

1267 
	`ã°ˇ£
–
sqlôe3GlobÆC⁄fig
.
xLog
!=0 );

1268 
	`logBadC⁄√˘i⁄
("invalid");

1273 
	}
}

1281 
	$sqlôe3AddI¡64
(
i64
 *
pA
, i64 
iB
){

1282 
i64
 
iA
 = *
pA
;

1283 
	`ã°ˇ£
–
iA
==0 );Åestcase( iA==1 );

1284 
	`ã°ˇ£
–
iB
==-1 );Åestcase( iB==0 );

1285 if–
iB
>=0 ){

1286 
	`ã°ˇ£
–
iA
>0 && 
LARGEST_INT64
 - iA =
iB
 );

1287 
	`ã°ˇ£
–
iA
>0 && 
LARGEST_INT64
 - iA =
iB
 - 1 );

1288 if–
iA
>0 && 
LARGEST_INT64
 - iA < 
iB
 )  1;

1290 
	`ã°ˇ£
–
iA
<0 && -(iA + 
LARGEST_INT64
Ë=
iB
 + 1 );

1291 
	`ã°ˇ£
–
iA
<0 && -(iA + 
LARGEST_INT64
Ë=
iB
 + 2 );

1292 if–
iA
<0 && -(iA + 
LARGEST_INT64
Ë> 
iB
 + 1 )  1;

1294 *
pA
 +
iB
;

1296 
	}
}

1297 
	$sqlôe3SubI¡64
(
i64
 *
pA
, i64 
iB
){

1298 
	`ã°ˇ£
–
iB
==
SMALLEST_INT64
+1 );

1299 if–
iB
==
SMALLEST_INT64
 ){

1300 
	`ã°ˇ£
–(*
pA
)==(-1) );Åestcase( (*pA)==0 );

1301 if–(*
pA
)>=0 )  1;

1302 *
pA
 -
iB
;

1305  
	`sqlôe3AddI¡64
(
pA
, -
iB
);

1307 
	}
}

1308 
	#TWOPOWER32
 (((
i64
)1)<<32)

	)

1309 
	#TWOPOWER31
 (((
i64
)1)<<31)

	)

1310 
	$sqlôe3MulI¡64
(
i64
 *
pA
, i64 
iB
){

1311 
i64
 
iA
 = *
pA
;

1312 
i64
 
iA1
, 
iA0
, 
iB1
, 
iB0
, 
r
;

1314 
iA1
 = 
iA
/
TWOPOWER32
;

1315 
iA0
 = 
iA
 % 
TWOPOWER32
;

1316 
iB1
 = 
iB
/
TWOPOWER32
;

1317 
iB0
 = 
iB
 % 
TWOPOWER32
;

1318 if–
iA1
==0 ){

1319 if–
iB1
==0 ){

1320 *
pA
 *
iB
;

1323 
r
 = 
iA0
*
iB1
;

1324 }if–
iB1
==0 ){

1325 
r
 = 
iA1
*
iB0
;

1330 
	`ã°ˇ£
–
r
==(-
TWOPOWER31
)-1 );

1331 
	`ã°ˇ£
–
r
==(-
TWOPOWER31
) );

1332 
	`ã°ˇ£
–
r
==
TWOPOWER31
 );

1333 
	`ã°ˇ£
–
r
==
TWOPOWER31
-1 );

1334 if–
r
<(-
TWOPOWER31
) ||Ñ>=TWOPOWER31 )  1;

1335 
r
 *
TWOPOWER32
;

1336 if–
	`sqlôe3AddI¡64
(&
r
, 
iA0
*
iB0
) )  1;

1337 *
pA
 = 
r
;

1339 
	}
}

1345 
	$sqlôe3AbsI¡32
(
x
){

1346 if–
x
>=0 )  x;

1347 if–
x
==()0x80000000 )  0x7fffffff;

1348  -
x
;

1349 
	}
}

1351 #ifde‡
SQLITE_ENABLE_8_3_NAMES


1369 
	$sqlôe3FûeSuffix3
(c⁄° *
zBa£Fûíame
, *
z
){

1370 #i‡
SQLITE_ENABLE_8_3_NAMES
<2

1371 if–
	`sqlôe3_uri_boﬁón
(
zBa£Fûíame
, "8_3_names", 0) )

1374 
i
, 
sz
;

1375 
sz
 = 
	`sqlôe3SåÀn30
(
z
);

1376 
i
=
sz
-1; i>0 && 
z
[i]!='/' && z[i]!='.'; i--){}

1377 if–
z
[
i
]=='.' && 
	`ALWAYS
(
sz
>i+4ËË
	`memmove
(&z[i+1], &z[sz-3], 4);

1379 
	}
}

1388 
LogE°
 
	$sqlôe3LogE°Add
(
LogE°
 
a
, LogE° 
b
){

1389 c⁄° 
x
[] = {

1400 if–
a
>=
b
 ){

1401 if–
a
>
b
+49 ) á;

1402 if–
a
>
b
+31 ) á+1;

1403  
a
+
x
[a-
b
];

1405 if–
b
>
a
+49 )  b;

1406 if–
b
>
a
+31 )  b+1;

1407  
b
+
x
[b-
a
];

1409 
	}
}

1415 
LogE°
 
	$sqlôe3LogE°
(
u64
 
x
){

1416 
LogE°
 
a
[] = { 0, 2, 3, 5, 6, 7, 8, 9 };

1417 
LogE°
 
y
 = 40;

1418 if–
x
<8 ){

1419 if–
x
<2 )  0;

1420  
x
<8 ){ 
y
 -= 10; x <<= 1; }

1422  
x
>255 ){ 
y
 += 40; x >>= 4; }

1423  
x
>15 ){ 
y
 += 10; x >>= 1; }

1425  
a
[
x
&7] + 
y
 - 10;

1426 
	}
}

1428 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


1433 
LogE°
 
	$sqlôe3LogE°FromDoubÀ
(
x
){

1434 
u64
 
a
;

1435 
LogE°
 
e
;

1436 
	`as£π
–(
x
)==8 && (
a
)==8 );

1437 if–
x
<=1 )  0;

1438 if–
x
<=2000000000 )  
	`sqlôe3LogE°
((
u64
)x);

1439 
	`mem˝y
(&
a
, &
x
, 8);

1440 
e
 = (
a
>>52) - 1022;

1441  
e
*10;

1442 
	}
}

1445 #i‡
deföed
(
SQLITE_ENABLE_STMT_SCANSTATUS
) || \

1446 
deföed
(
SQLITE_ENABLE_STAT3_OR_STAT4
) || \

1447 
	$deföed
(
SQLITE_EXPLAIN_ESTIMATED_ROWS
)

1454 
u64
 
	$sqlôe3LogE°ToI¡
(
LogE°
 
x
){

1455 
u64
 
n
;

1456 
n
 = 
x
%10;

1457 
x
 /= 10;

1458 if–
n
>=5 )Ç -= 2;

1459 if–
n
>=1 )Ç -= 1;

1460 #i‡
	`deföed
(
SQLITE_ENABLE_STMT_SCANSTATUS
) || \

1461 
	`deföed
(
SQLITE_EXPLAIN_ESTIMATED_ROWS
)

1462 if–
x
>60 )  (
u64
)
LARGEST_INT64
;

1466 
	`as£π
–
x
<=60 );

1468  
x
>=3 ? (
n
+8)<<(x-3) : (n+8)>>(3-x);

1469 
	}
}

	@vacuum.c

17 
	~"sqlôeI¡.h
"

18 
	~"vdbeI¡.h
"

20 #i‡!
deföed
(
SQLITE_OMIT_VACUUM
Ë&& !deföed(
SQLITE_OMIT_ATTACH
)

25 
	$vacuumFöÆize
(
sqlôe3
 *
db
, 
sqlôe3_°mt
 *
pStmt
, **
pzEºMsg
){

26 
rc
;

27 
rc
 = 
	`sqlôe3VdbeFöÆize
((
Vdbe
*)
pStmt
);

28 if–
rc
 ){

29 
	`sqlôe3SëSåög
(
pzEºMsg
, 
db
, 
	`sqlôe3_îrmsg
(db));

31  
rc
;

32 
	}
}

37 
	$execSql
(
sqlôe3
 *
db
, **
pzEºMsg
, c⁄° *
zSql
){

38 
sqlôe3_°mt
 *
pStmt
;

39 
	`VVA_ONLY
–
rc
; )

40 if–!
zSql
 ){

41  
SQLITE_NOMEM_BKPT
;

43 if–
SQLITE_OK
!=
	`sqlôe3_¥ï¨e
(
db
, 
zSql
, -1, &
pStmt
, 0) ){

44 
	`sqlôe3SëSåög
(
pzEºMsg
, 
db
, 
	`sqlôe3_îrmsg
(db));

45  
	`sqlôe3_îrcode
(
db
);

47 
	`VVA_ONLY
–
rc
 = ) 
	`sqlôe3_°ï
(
pStmt
);

48 
	`as£π
–
rc
!=
SQLITE_ROW
 || (
db
->
Êags
&
SQLITE_Cou¡Rows
) );

49  
	`vacuumFöÆize
(
db
, 
pStmt
, 
pzEºMsg
);

50 
	}
}

56 
	$execExecSql
(
sqlôe3
 *
db
, **
pzEºMsg
, c⁄° *
zSql
){

57 
sqlôe3_°mt
 *
pStmt
;

58 
rc
;

60 
rc
 = 
	`sqlôe3_¥ï¨e
(
db
, 
zSql
, -1, &
pStmt
, 0);

61 if–
rc
!=
SQLITE_OK
 ) Ñc;

63  
SQLITE_ROW
==
	`sqlôe3_°ï
(
pStmt
) ){

64 
rc
 = 
	`execSql
(
db
, 
pzEºMsg
, (*)
	`sqlôe3_cﬁumn_ãxt
(
pStmt
, 0));

65 if–
rc
!=
SQLITE_OK
 ){

66 
	`vacuumFöÆize
(
db
, 
pStmt
, 
pzEºMsg
);

67  
rc
;

71  
	`vacuumFöÆize
(
db
, 
pStmt
, 
pzEºMsg
);

72 
	}
}

104 
	$sqlôe3Vacuum
(
P¨£
 *
pP¨£
){

105 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

106 if–
v
 ){

107 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Vacuum
, 0, 0);

108 
	`sqlôe3VdbeU£sBåì
(
v
, 0);

111 
	}
}

116 
	$sqlôe3RunVacuum
(**
pzEºMsg
, 
sqlôe3
 *
db
){

117 
rc
 = 
SQLITE_OK
;

118 
Båì
 *
pMaö
;

119 
Båì
 *
pTemp
;

120 *
zSql
 = 0;

121 
ßved_Êags
;

122 
ßved_nCh™ge
;

123 
ßved_nTŸÆCh™ge
;

124 (*
ßved_xTø˚
)(*,const *);

125 
Db
 *
pDb
 = 0;

126 
isMemDb
;

127 
nRes
;

128 
nDb
;

130 if–!
db
->
autoCommô
 ){

131 
	`sqlôe3SëSåög
(
pzEºMsg
, 
db
, "cannot VACUUM from withináÅransaction");

132  
SQLITE_ERROR
;

134 if–
db
->
nVdbeA˘ive
>1 ){

135 
	`sqlôe3SëSåög
(
pzEºMsg
, 
db
,"cannot VACUUM - SQL statements inÖrogress");

136  
SQLITE_ERROR
;

142 
ßved_Êags
 = 
db
->
Êags
;

143 
ßved_nCh™ge
 = 
db
->
nCh™ge
;

144 
ßved_nTŸÆCh™ge
 = 
db
->
nTŸÆCh™ge
;

145 
ßved_xTø˚
 = 
db
->
xTø˚
;

146 
db
->
Êags
 |
SQLITE_WrôeSchema
 | 
SQLITE_Ign‹eChecks
 | 
SQLITE_Pª„rBuûtö
;

147 
db
->
Êags
 &~(
SQLITE_F‹eignKeys
 | 
SQLITE_Revî£Ordî
);

148 
db
->
xTø˚
 = 0;

150 
pMaö
 = 
db
->
aDb
[0].
pBt
;

151 
isMemDb
 = 
	`sqlôe3PagîIsMemdb
(
	`sqlôe3BåìPagî
(
pMaö
));

167 
nDb
 = 
db
->nDb;

168 if–
	`sqlôe3TempInMem‹y
(
db
) ){

169 
zSql
 = "ATTACH ':memory:' AS vacuum_db;";

171 
zSql
 = "ATTACH '' AS vacuum_db;";

173 
rc
 = 
	`execSql
(
db
, 
pzEºMsg
, 
zSql
);

174 if–
db
->
nDb
>nDb ){

175 
pDb
 = &
db
->
aDb
[db->
nDb
-1];

176 
	`as£π
–
	`°rcmp
(
pDb
->
zName
,"vacuum_db")==0 );

178 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

179 
pTemp
 = 
db
->
aDb
[db->
nDb
-1].
pBt
;

185 
	`sqlôe3BåìCommô
(
pTemp
);

187 
nRes
 = 
	`sqlôe3BåìGëO±imÆRe£rve
(
pMaö
);

190 #ifde‡
SQLITE_HAS_CODEC


191 if–
db
->
√xtPagesize
 ){

192 
	`sqlôe3CodecGëKey
(
sqlôe3
*, , **, *);

193 
nKey
;

194 *
zKey
;

195 
	`sqlôe3CodecGëKey
(
db
, 0, (**)&
zKey
, &
nKey
);

196 if–
nKey
 ) 
db
->
√xtPagesize
 = 0;

200 
rc
 = 
	`execSql
(
db
, 
pzEºMsg
, "PRAGMA vacuum_db.synchronous=OFF");

201 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

207 
rc
 = 
	`execSql
(
db
, 
pzEºMsg
, "BEGIN;");

208 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

209 
rc
 = 
	`sqlôe3BåìBegöTøns
(
pMaö
, 2);

210 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

213 if–
	`sqlôe3PagîGëJou∫ÆMode
(
	`sqlôe3BåìPagî
(
pMaö
))

214 ==
PAGER_JOURNALMODE_WAL
 ){

215 
db
->
√xtPagesize
 = 0;

218 if–
	`sqlôe3BåìSëPageSize
(
pTemp
, 
	`sqlôe3BåìGëPageSize
(
pMaö
), 
nRes
, 0)

219 || (!
isMemDb
 && 
	`sqlôe3BåìSëPageSize
(
pTemp
, 
db
->
√xtPagesize
, 
nRes
, 0))

220 || 
	`NEVER
(
db
->
mÆlocFaûed
)

222 
rc
 = 
SQLITE_NOMEM_BKPT
;

223 
íd_of_vacuum
;

226 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


227 
	`sqlôe3BåìSëAutoVacuum
(
pTemp
, 
db
->
√xtAutovac
>=0 ? db->nextAutovac :

228 
	`sqlôe3BåìGëAutoVacuum
(
pMaö
));

234 
rc
 = 
	`execExecSql
(
db
, 
pzEºMsg
,

239 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

240 
rc
 = 
	`execExecSql
(
db
, 
pzEºMsg
,

243 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

244 
rc
 = 
	`execExecSql
(
db
, 
pzEºMsg
,

247 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

253 
	`as£π
–(
db
->
Êags
 & 
SQLITE_Vacuum
)==0 );

254 
db
->
Êags
 |
SQLITE_Vacuum
;

255 
rc
 = 
	`execExecSql
(
db
, 
pzEºMsg
,

262 
	`as£π
–(
db
->
Êags
 & 
SQLITE_Vacuum
)!=0 );

263 
db
->
Êags
 &~
SQLITE_Vacuum
;

264 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

268 
rc
 = 
	`execExecSql
(
db
, 
pzEºMsg
,

272 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

273 
rc
 = 
	`execExecSql
(
db
, 
pzEºMsg
,

278 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

286 
rc
 = 
	`execSql
(
db
, 
pzEºMsg
,

293 if–
rc
 ) 
íd_of_vacuum
;

302 
u32
 
mëa
;

303 
i
;

311 c⁄° 
aC›y
[] = {

312 
BTREE_SCHEMA_VERSION
, 1,

313 
BTREE_DEFAULT_CACHE_SIZE
, 0,

314 
BTREE_TEXT_ENCODING
, 0,

315 
BTREE_USER_VERSION
, 0,

316 
BTREE_APPLICATION_ID
, 0,

319 
	`as£π
–1==
	`sqlôe3BåìIsInTøns
(
pTemp
) );

320 
	`as£π
–1==
	`sqlôe3BåìIsInTøns
(
pMaö
) );

323 
i
=0; i<
	`AºaySize
(
aC›y
); i+=2){

326 
	`sqlôe3BåìGëMëa
(
pMaö
, 
aC›y
[
i
], &
mëa
);

327 
rc
 = 
	`sqlôe3BåìUpd©eMëa
(
pTemp
, 
aC›y
[
i
], 
mëa
+aCopy[i+1]);

328 if–
	`NEVER
(
rc
!=
SQLITE_OK
ËË
íd_of_vacuum
;

331 
rc
 = 
	`sqlôe3BåìC›yFûe
(
pMaö
, 
pTemp
);

332 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

333 
rc
 = 
	`sqlôe3BåìCommô
(
pTemp
);

334 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

335 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


336 
	`sqlôe3BåìSëAutoVacuum
(
pMaö
, 
	`sqlôe3BåìGëAutoVacuum
(
pTemp
));

340 
	`as£π
–
rc
==
SQLITE_OK
 );

341 
rc
 = 
	`sqlôe3BåìSëPageSize
(
pMaö
, 
	`sqlôe3BåìGëPageSize
(
pTemp
), 
nRes
,1);

343 
íd_of_vacuum
:

345 
db
->
Êags
 = 
ßved_Êags
;

346 
db
->
nCh™ge
 = 
ßved_nCh™ge
;

347 
db
->
nTŸÆCh™ge
 = 
ßved_nTŸÆCh™ge
;

348 
db
->
xTø˚
 = 
ßved_xTø˚
;

349 
	`sqlôe3BåìSëPageSize
(
pMaö
, -1, -1, 1);

358 
db
->
autoCommô
 = 1;

360 if–
pDb
 ){

361 
	`sqlôe3BåìClo£
(
pDb
->
pBt
);

362 
pDb
->
pBt
 = 0;

363 
pDb
->
pSchema
 = 0;

368 
	`sqlôe3Re£tAŒSchemasOfC⁄√˘i⁄
(
db
);

370  
rc
;

371 
	}
}

	@vdbe.c

21 
	~"sqlôeI¡.h
"

22 
	~"vdbeI¡.h
"

33 #ifde‡
SQLITE_DEBUG


34 
	#memAboutToCh™ge
(
P
,
M
Ë
	`sqlôe3VdbeMemAboutToCh™ge
(P,M)

	)

36 
	#memAboutToCh™ge
(
P
,
M
)

	)

46 #ifde‡
SQLITE_TEST


47 
	gsqlôe3_£¨ch_cou¡
 = 0;

58 #ifde‡
SQLITE_TEST


59 
	gsqlôe3_öãºu±_cou¡
 = 0;

69 #ifde‡
SQLITE_TEST


70 
	gsqlôe3_s‹t_cou¡
 = 0;

80 #ifde‡
SQLITE_TEST


81 
	gsqlôe3_max_blobsize
 = 0;

82 
	$upd©eMaxBlobsize
(
Mem
 *
p
){

83 if–(
p
->
Êags
 & (
MEM_Så
|
MEM_Blob
))!=0 &&Ö->
n
>
sqlôe3_max_blobsize
 ){

84 
sqlôe3_max_blobsize
 = 
p
->
n
;

86 
	}
}

93 #ifde‡
SQLITE_ENABLE_PREUPDATE_HOOK


94 
	#HAS_UPDATE_HOOK
(
DB
Ë((DB)->
xPªUpd©eCÆlback
||(DB)->
xUpd©eCÆlback
)

	)

96 
	#HAS_UPDATE_HOOK
(
DB
Ë((DB)->
xUpd©eCÆlback
)

	)

106 #ifde‡
SQLITE_TEST


107 
	gsqlôe3_found_cou¡
 = 0;

114 #i‡
deföed
(
SQLITE_TEST
Ë&& !deföed(
SQLITE_OMIT_BUILTIN_TEST
)

115 
	#UPDATE_MAX_BLOBSIZE
(
P
Ë
	`upd©eMaxBlobsize
(P)

	)

117 
	#UPDATE_MAX_BLOBSIZE
(
P
)

	)

136 #i‡!
deföed
(
SQLITE_VDBE_COVERAGE
)

137 
	#VdbeBønchTakí
(
I
,
M
)

	)

139 
	#VdbeBønchTakí
(
I
,
M
Ë
	`vdbeTakeBønch
(
pOp
->
iSrcLöe
,I,M)

	)

140 
	$vdbeTakeBønch
(
iSrcLöe
, 
u8
 
I
, u8 
M
){

141 if–
iSrcLöe
<=2 && 
	`ALWAYS
(iSrcLine>0) ){

142 
M
 = 
iSrcLöe
;

145 
	`as£π
–(
M
 & 
I
)==I );

147 if–
sqlôe3GlobÆC⁄fig
.
xVdbeBønch
==0 ) ;

148 
sqlôe3GlobÆC⁄fig
.
	`xVdbeBønch
(sqlôe3GlobÆC⁄fig.
pVdbeBønchArg
,

149 
iSrcLöe
,
I
,
M
);

151 
	}
}

158 
	#Såögify
(
P
, 
íc
) \

159 if(((
P
)->
Êags
&(
MEM_Så
|
MEM_Blob
))==0 && 
	`sqlôe3VdbeMemSåögify
(P,
íc
,0)) \

160 { 
no_mem
; }

	)

173 
	#DìphemîÆize
(
P
) \

174 if–((
P
)->
Êags
&
MEM_Ephem
)!=0 \

175 && 
	`sqlôe3VdbeMemMakeWrôóbÀ
(
P
Ë){ 
no_mem
;}

	)

178 
	#isS‹ãr
(
x
Ë((x)->
eCurTy≥
==
CURTYPE_SORTER
)

	)

184 
VdbeCurs‹
 *
	$ÆloˇãCurs‹
(

185 
Vdbe
 *
p
,

186 
iCur
,

187 
nFõld
,

188 
iDb
,

189 
u8
 
eCurTy≥


209 
Mem
 *
pMem
 = 
iCur
>0 ? &
p
->
aMem
[p->
nMem
-iCur] :Ö->aMem;

211 
nByã
;

212 
VdbeCurs‹
 *
pCx
 = 0;

213 
nByã
 =

214 
	`ROUND8
((
VdbeCurs‹
)Ë+ 2*(
u32
)*
nFõld
 +

215 (
eCurTy≥
==
CURTYPE_BTREE
?
	`sqlôe3BåìCurs‹Size
():0);

217 
	`as£π
–
iCur
>=0 && iCur<
p
->
nCurs‹
 );

218 if–
p
->
≠C§
[
iCur
] ){

219 
	`sqlôe3VdbeFªeCurs‹
(
p
,Ö->
≠C§
[
iCur
]);

220 
p
->
≠C§
[
iCur
] = 0;

222 if–
SQLITE_OK
==
	`sqlôe3VdbeMemCÀ¨AndResize
(
pMem
, 
nByã
) ){

223 
p
->
≠C§
[
iCur
] = 
pCx
 = (
VdbeCurs‹
*)
pMem
->
z
;

224 
	`mem£t
(
pCx
, 0, (
VdbeCurs‹
));

225 
pCx
->
eCurTy≥
 =ÉCurType;

226 
pCx
->
iDb
 = iDb;

227 
pCx
->
nFõld
 =ÇField;

228 
pCx
->
aOff£t
 = &pCx->
aTy≥
[
nFõld
];

229 if–
eCurTy≥
==
CURTYPE_BTREE
 ){

230 
pCx
->
uc
.
pCurs‹
 = (
BtCurs‹
*)

231 &
pMem
->
z
[
	`ROUND8
((
VdbeCurs‹
))+2*(
u32
)*
nFõld
];

232 
	`sqlôe3BåìCurs‹Zîo
(
pCx
->
uc
.
pCurs‹
);

235  
pCx
;

236 
	}
}

253 
	$≠∂yNumîicAfföôy
(
Mem
 *
pRec
, 
bTryF‹I¡
){

254 
rVÆue
;

255 
i64
 
iVÆue
;

256 
u8
 
íc
 = 
pRec
->enc;

257 
	`as£π
–(
pRec
->
Êags
 & (
MEM_Så
|
MEM_I¡
|
MEM_Ról
))==MEM_Str );

258 if–
	`sqlôe3AtoF
(
pRec
->
z
, &
rVÆue
,ÖRec->
n
, 
íc
)==0 ) ;

259 if–0==
	`sqlôe3Atoi64
(
pRec
->
z
, &
iVÆue
,ÖRec->
n
, 
íc
) ){

260 
pRec
->
u
.
i
 = 
iVÆue
;

261 
pRec
->
Êags
 |
MEM_I¡
;

263 
pRec
->
u
.
r
 = 
rVÆue
;

264 
pRec
->
Êags
 |
MEM_Ról
;

265 if–
bTryF‹I¡
 ) 
	`sqlôe3VdbeI¡egîAfföôy
(
pRec
);

267 
	}
}

287 
	$≠∂yAfföôy
(

288 
Mem
 *
pRec
,

289 
afföôy
,

290 
u8
 
íc


292 if–
afföôy
>=
SQLITE_AFF_NUMERIC
 ){

293 
	`as£π
–
afföôy
==
SQLITE_AFF_INTEGER
 ||áfföôy==
SQLITE_AFF_REAL


294 || 
afföôy
==
SQLITE_AFF_NUMERIC
 );

295 if–(
pRec
->
Êags
 & 
MEM_I¡
)==0 ){

296 if–(
pRec
->
Êags
 & 
MEM_Ról
)==0 ){

297 if–
pRec
->
Êags
 & 
MEM_Så
 ) 
	`≠∂yNumîicAfföôy
(pRec,1);

299 
	`sqlôe3VdbeI¡egîAfföôy
(
pRec
);

302 }if–
afföôy
==
SQLITE_AFF_TEXT
 ){

308 if–0==(
pRec
->
Êags
&
MEM_Så
) ){

309 if–(
pRec
->
Êags
&(
MEM_Ról
|
MEM_I¡
)) ){

310 
	`sqlôe3VdbeMemSåögify
(
pRec
, 
íc
, 1);

313 
pRec
->
Êags
 &~(
MEM_Ról
|
MEM_I¡
);

315 
	}
}

323 
	$sqlôe3_vÆue_numîic_ty≥
(
sqlôe3_vÆue
 *
pVÆ
){

324 
eTy≥
 = 
	`sqlôe3_vÆue_ty≥
(
pVÆ
);

325 if–
eTy≥
==
SQLITE_TEXT
 ){

326 
Mem
 *
pMem
 = (Mem*)
pVÆ
;

327 
	`≠∂yNumîicAfföôy
(
pMem
, 0);

328 
eTy≥
 = 
	`sqlôe3_vÆue_ty≥
(
pVÆ
);

330  
eTy≥
;

331 
	}
}

337 
	$sqlôe3VÆueAµlyAfföôy
(

338 
sqlôe3_vÆue
 *
pVÆ
,

339 
u8
 
afföôy
,

340 
u8
 
íc


342 
	`≠∂yAfföôy
((
Mem
 *)
pVÆ
, 
afföôy
, 
íc
);

343 
	}
}

351 
u16
 
SQLITE_NOINLINE
 
	$compuãNumîicTy≥
(
Mem
 *
pMem
){

352 
	`as£π
–(
pMem
->
Êags
 & (
MEM_I¡
|
MEM_Ról
))==0 );

353 
	`as£π
–(
pMem
->
Êags
 & (
MEM_Så
|
MEM_Blob
))!=0 );

354 if–
	`sqlôe3AtoF
(
pMem
->
z
, &pMem->
u
.
r
,ÖMem->
n
,ÖMem->
íc
)==0 ){

357 if–
	`sqlôe3Atoi64
(
pMem
->
z
, &pMem->
u
.
i
,ÖMem->
n
,ÖMem->
íc
)==
SQLITE_OK
 ){

358  
MEM_I¡
;

360  
MEM_Ról
;

361 
	}
}

370 
u16
 
	$numîicTy≥
(
Mem
 *
pMem
){

371 if–
pMem
->
Êags
 & (
MEM_I¡
|
MEM_Ról
) ){

372  
pMem
->
Êags
 & (
MEM_I¡
|
MEM_Ról
);

374 if–
pMem
->
Êags
 & (
MEM_Så
|
MEM_Blob
) ){

375  
	`compuãNumîicTy≥
(
pMem
);

378 
	}
}

380 #ifde‡
SQLITE_DEBUG


385 
	$sqlôe3VdbeMemPªâyPröt
(
Mem
 *
pMem
, *
zBuf
){

386 *
zC§
 = 
zBuf
;

387 
f
 = 
pMem
->
Êags
;

389 c⁄° *c⁄° 
í˙ames
[] = {"(X)", "(8)", "(16LE)", "(16BE)"};

391 if–
f
&
MEM_Blob
 ){

392 
i
;

393 
c
;

394 if–
f
 & 
MEM_Dyn
 ){

395 
c
 = 'z';

396 
	`as£π
–(
f
 & (
MEM_Sètic
|
MEM_Ephem
))==0 );

397 }if–
f
 & 
MEM_Sètic
 ){

398 
c
 = 't';

399 
	`as£π
–(
f
 & (
MEM_Dyn
|
MEM_Ephem
))==0 );

400 }if–
f
 & 
MEM_Ephem
 ){

401 
c
 = 'e';

402 
	`as£π
–(
f
 & (
MEM_Sètic
|
MEM_Dyn
))==0 );

404 
c
 = 's';

407 
	`sqlôe3_¢¥ötf
(100, 
zC§
, "%c", 
c
);

408 
zC§
 +
	`sqlôe3SåÀn30
(zCsr);

409 
	`sqlôe3_¢¥ötf
(100, 
zC§
, "%d[", 
pMem
->
n
);

410 
zC§
 +
	`sqlôe3SåÀn30
(zCsr);

411 
i
=0; i<16 && i<
pMem
->
n
; i++){

412 
	`sqlôe3_¢¥ötf
(100, 
zC§
, "%02X", (()
pMem
->
z
[
i
] & 0xFF));

413 
zC§
 +
	`sqlôe3SåÀn30
(zCsr);

415 
i
=0; i<16 && i<
pMem
->
n
; i++){

416 
z
 = 
pMem
->z[
i
];

417 if–
z
<32 || z>126 ) *
zC§
++ = '.';

418 *
zC§
++ = 
z
;

421 
	`sqlôe3_¢¥ötf
(100, 
zC§
, "]%s", 
í˙ames
[
pMem
->
íc
]);

422 
zC§
 +
	`sqlôe3SåÀn30
(zCsr);

423 if–
f
 & 
MEM_Zîo
 ){

424 
	`sqlôe3_¢¥ötf
(100, 
zC§
,"+%dz",
pMem
->
u
.
nZîo
);

425 
zC§
 +
	`sqlôe3SåÀn30
(zCsr);

427 *
zC§
 = '\0';

428 }if–
f
 & 
MEM_Så
 ){

429 
j
, 
k
;

430 
zBuf
[0] = ' ';

431 if–
f
 & 
MEM_Dyn
 ){

432 
zBuf
[1] = 'z';

433 
	`as£π
–(
f
 & (
MEM_Sètic
|
MEM_Ephem
))==0 );

434 }if–
f
 & 
MEM_Sètic
 ){

435 
zBuf
[1] = 't';

436 
	`as£π
–(
f
 & (
MEM_Dyn
|
MEM_Ephem
))==0 );

437 }if–
f
 & 
MEM_Ephem
 ){

438 
zBuf
[1] = 'e';

439 
	`as£π
–(
f
 & (
MEM_Sètic
|
MEM_Dyn
))==0 );

441 
zBuf
[1] = 's';

443 
k
 = 2;

444 
	`sqlôe3_¢¥ötf
(100, &
zBuf
[
k
], "%d", 
pMem
->
n
);

445 
k
 +
	`sqlôe3SåÀn30
(&
zBuf
[k]);

446 
zBuf
[
k
++] = '[';

447 
j
=0; j<15 && j<
pMem
->
n
; j++){

448 
u8
 
c
 = 
pMem
->
z
[
j
];

449 if–
c
>=0x20 && c<0x7f ){

450 
zBuf
[
k
++] = 
c
;

452 
zBuf
[
k
++] = '.';

455 
zBuf
[
k
++] = ']';

456 
	`sqlôe3_¢¥ötf
(100,&
zBuf
[
k
], 
í˙ames
[
pMem
->
íc
]);

457 
k
 +
	`sqlôe3SåÀn30
(&
zBuf
[k]);

458 
zBuf
[
k
++] = 0;

460 
	}
}

463 #ifde‡
SQLITE_DEBUG


467 
	$memTø˚Pröt
(
Mem
 *
p
){

468 if–
p
->
Êags
 & 
MEM_Undeföed
 ){

469 
	`¥ötf
(" undefined");

470 }if–
p
->
Êags
 & 
MEM_NuŒ
 ){

471 
	`¥ötf
(" NULL");

472 }if–(
p
->
Êags
 & (
MEM_I¡
|
MEM_Så
))==(MEM_Int|MEM_Str) ){

473 
	`¥ötf
(" si:%Œd", 
p
->
u
.
i
);

474 }if–
p
->
Êags
 & 
MEM_I¡
 ){

475 
	`¥ötf
(" i:%Œd", 
p
->
u
.
i
);

476 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


477 }if–
p
->
Êags
 & 
MEM_Ról
 ){

478 
	`¥ötf
("Ñ:%g", 
p
->
u
.
r
);

480 }if–
p
->
Êags
 & 
MEM_RowSë
 ){

481 
	`¥ötf
(" (rowset)");

483 
zBuf
[200];

484 
	`sqlôe3VdbeMemPªâyPröt
(
p
, 
zBuf
);

485 
	`¥ötf
(" %s", 
zBuf
);

487 if–
p
->
Êags
 & 
MEM_Subty≥
 ) 
	`¥ötf
(" subty≥=0x%02x",Ö->
eSubty≥
);

488 
	}
}

489 
	$ªgi°îTø˚
(
iReg
, 
Mem
 *
p
){

490 
	`¥ötf
("REG[%d] = ", 
iReg
);

491 
	`memTø˚Pröt
(
p
);

492 
	`¥ötf
("\n");

493 
	}
}

496 #ifde‡
SQLITE_DEBUG


497 
	#REGISTER_TRACE
(
R
,
M
Ëif(
db
->
Êags
&
SQLITE_VdbeTø˚
)
	`ªgi°îTø˚
(R,M)

	)

499 
	#REGISTER_TRACE
(
R
,
M
)

	)

503 #ifde‡
VDBE_PROFILE


509 
	~"hwtime.h
"

513 #i‚de‡
NDEBUG


524 
	$checkSavïoötCou¡
(
sqlôe3
 *
db
){

525 
n
 = 0;

526 
Savïoöt
 *
p
;

527 
p
=
db
->
pSavïoöt
;Ö;Öı->
pNext
Ë
n
++;

528 
	`as£π
–
n
==(
db
->
nSavïoöt
 + db->
isTønß˘i⁄Savïoöt
) );

530 
	}
}

537 
SQLITE_NOINLINE
 
Mem
 *
	$out2PªªÀa£WôhCÀ¨
(
Mem
 *
pOut
){

538 
	`sqlôe3VdbeMemSëNuŒ
(
pOut
);

539 
pOut
->
Êags
 = 
MEM_I¡
;

540  
pOut
;

541 
	}
}

542 
Mem
 *
	$out2PªªÀa£
(
Vdbe
 *
p
, 
VdbeOp
 *
pOp
){

543 
Mem
 *
pOut
;

544 
	`as£π
–
pOp
->
p2
>0 );

545 
	`as£π
–
pOp
->
p2
<=(
p
->
nMem
+1 -Ö->
nCurs‹
) );

546 
pOut
 = &
p
->
aMem
[
pOp
->
p2
];

547 
	`memAboutToCh™ge
(
p
, 
pOut
);

548 if–
	`VdbeMemDy«mic
(
pOut
) ){

549  
	`out2PªªÀa£WôhCÀ¨
(
pOut
);

551 
pOut
->
Êags
 = 
MEM_I¡
;

552  
pOut
;

554 
	}
}

561 
	$sqlôe3VdbeExec
(

562 
Vdbe
 *
p


564 
Op
 *
aOp
 = 
p
->aOp;

565 
Op
 *
pOp
 = 
aOp
;

566 #i‡
	`deföed
(
SQLITE_DEBUG
Ë|| deföed(
VDBE_PROFILE
)

567 
Op
 *
pOrigOp
;

569 #ifde‡
SQLITE_DEBUG


570 
nExåaDñëe
 = 0;

572 
rc
 = 
SQLITE_OK
;

573 
sqlôe3
 *
db
 = 
p
->db;

574 
u8
 
ª£tSchemaOnFau…
 = 0;

575 
u8
 
ícodög
 = 
	`ENC
(
db
);

576 
iCom∑ª
 = 0;

577 
nVmSãp
 = 0;

578 #i‚de‡
SQLITE_OMIT_PROGRESS_CALLBACK


579 
nProgªssLimô
 = 0;

581 
Mem
 *
aMem
 = 
p
->aMem;

582 
Mem
 *
pIn1
 = 0;

583 
Mem
 *
pIn2
 = 0;

584 
Mem
 *
pIn3
 = 0;

585 
Mem
 *
pOut
 = 0;

586 *
aPîmuã
 = 0;

587 
i64
 
œ°Rowid
 = 
db
->lastRowid;

588 #ifde‡
VDBE_PROFILE


589 
u64
 
°¨t
;

593 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_RUN
 );

594 
	`sqlôe3VdbeE¡î
(
p
);

595 if–
p
->
rc
==
SQLITE_NOMEM
 ){

598 
no_mem
;

600 
	`as£π
–
p
->
rc
==
SQLITE_OK
 || (p->rc&0xff)==
SQLITE_BUSY
 );

601 
	`as£π
–
p
->
bIsRódî
 ||Ö->
ªadO∆y
!=0 );

602 
p
->
rc
 = 
SQLITE_OK
;

603 
p
->
iCuºítTime
 = 0;

604 
	`as£π
–
p
->
ex∂aö
==0 );

605 
p
->
pResu…Së
 = 0;

606 
db
->
busyH™dÀr
.
nBusy
 = 0;

607 if–
db
->
u1
.
isI¡îru±ed
 ) 
ab‹t_due_to_öãºu±
;

608 
	`sqlôe3VdbeIOTø˚Sql
(
p
);

609 #i‚de‡
SQLITE_OMIT_PROGRESS_CALLBACK


610 if–
db
->
xProgªss
 ){

611 
u32
 
iPri‹
 = 
p
->
aCou¡î
[
SQLITE_STMTSTATUS_VM_STEP
];

612 
	`as£π
–0 < 
db
->
nProgªssOps
 );

613 
nProgªssLimô
 = 
db
->
nProgªssOps
 - (
iPri‹
 % db->nProgressOps);

616 #ifde‡
SQLITE_DEBUG


617 
	`sqlôe3BegöBíignMÆloc
();

618 if–
p
->
pc
==0

619 && (
p
->
db
->
Êags
 & (
SQLITE_VdbeLi°ög
|
SQLITE_VdbeEQP
|
SQLITE_VdbeTø˚
))!=0

621 
i
;

622 
⁄˚
 = 1;

623 
	`sqlôe3VdbePrötSql
(
p
);

624 if–
p
->
db
->
Êags
 & 
SQLITE_VdbeLi°ög
 ){

625 
	`¥ötf
("VDBE Program Listing:\n");

626 
i
=0; i<
p
->
nOp
; i++){

627 
	`sqlôe3VdbePrötOp
(
°dout
, 
i
, &
aOp
[i]);

630 if–
p
->
db
->
Êags
 & 
SQLITE_VdbeEQP
 ){

631 
i
=0; i<
p
->
nOp
; i++){

632 if–
aOp
[
i
].
›code
==
OP_Ex∂aö
 ){

633 if–
⁄˚
 ) 
	`¥ötf
("VDBE Query Plan:\n");

634 
	`¥ötf
("%s\n", 
aOp
[
i
].
p4
.
z
);

635 
⁄˚
 = 0;

639 if–
p
->
db
->
Êags
 & 
SQLITE_VdbeTø˚
 ) 
	`¥ötf
("VDBE Trace:\n");

641 
	`sqlôe3EndBíignMÆloc
();

643 
pOp
=&
aOp
[
p
->
pc
]; 1;ÖOp++){

646 
	`as£π
–
rc
==
SQLITE_OK
 );

648 
	`as£π
–
pOp
>=
aOp
 &&ÖOp<&aOp[
p
->
nOp
]);

649 #ifde‡
VDBE_PROFILE


650 
°¨t
 = 
	`sqlôe3Hwtime
();

652 
nVmSãp
++;

653 #ifde‡
SQLITE_ENABLE_STMT_SCANSTATUS


654 if–
p
->
™Exec
 )Ö->™Exec[()(
pOp
-
aOp
)]++;

659 #ifde‡
SQLITE_DEBUG


660 if–
db
->
Êags
 & 
SQLITE_VdbeTø˚
 ){

661 
	`sqlôe3VdbePrötOp
(
°dout
, ()(
pOp
 - 
aOp
),ÖOp);

669 #ifde‡
SQLITE_TEST


670 if–
sqlôe3_öãºu±_cou¡
>0 ){

671 
sqlôe3_öãºu±_cou¡
--;

672 if–
sqlôe3_öãºu±_cou¡
==0 ){

673 
	`sqlôe3_öãºu±
(
db
);

679 #ifde‡
SQLITE_DEBUG


681 
u8
 
›Pr›îty
 = 
sqlôe3OpcodePr›îty
[
pOp
->
›code
];

682 if–(
›Pr›îty
 & 
OPFLG_IN1
)!=0 ){

683 
	`as£π
–
pOp
->
p1
>0 );

684 
	`as£π
–
pOp
->
p1
<=(
p
->
nMem
+1 -Ö->
nCurs‹
) );

685 
	`as£π
–
	`memIsVÆid
(&
aMem
[
pOp
->
p1
]) );

686 
	`as£π
–
	`sqlôe3VdbeCheckMemInv¨ü¡s
(&
aMem
[
pOp
->
p1
]) );

687 
	`REGISTER_TRACE
(
pOp
->
p1
, &
aMem
[pOp->p1]);

689 if–(
›Pr›îty
 & 
OPFLG_IN2
)!=0 ){

690 
	`as£π
–
pOp
->
p2
>0 );

691 
	`as£π
–
pOp
->
p2
<=(
p
->
nMem
+1 -Ö->
nCurs‹
) );

692 
	`as£π
–
	`memIsVÆid
(&
aMem
[
pOp
->
p2
]) );

693 
	`as£π
–
	`sqlôe3VdbeCheckMemInv¨ü¡s
(&
aMem
[
pOp
->
p2
]) );

694 
	`REGISTER_TRACE
(
pOp
->
p2
, &
aMem
[pOp->p2]);

696 if–(
›Pr›îty
 & 
OPFLG_IN3
)!=0 ){

697 
	`as£π
–
pOp
->
p3
>0 );

698 
	`as£π
–
pOp
->
p3
<=(
p
->
nMem
+1 -Ö->
nCurs‹
) );

699 
	`as£π
–
	`memIsVÆid
(&
aMem
[
pOp
->
p3
]) );

700 
	`as£π
–
	`sqlôe3VdbeCheckMemInv¨ü¡s
(&
aMem
[
pOp
->
p3
]) );

701 
	`REGISTER_TRACE
(
pOp
->
p3
, &
aMem
[pOp->p3]);

703 if–(
›Pr›îty
 & 
OPFLG_OUT2
)!=0 ){

704 
	`as£π
–
pOp
->
p2
>0 );

705 
	`as£π
–
pOp
->
p2
<=(
p
->
nMem
+1 -Ö->
nCurs‹
) );

706 
	`memAboutToCh™ge
(
p
, &
aMem
[
pOp
->
p2
]);

708 if–(
›Pr›îty
 & 
OPFLG_OUT3
)!=0 ){

709 
	`as£π
–
pOp
->
p3
>0 );

710 
	`as£π
–
pOp
->
p3
<=(
p
->
nMem
+1 -Ö->
nCurs‹
) );

711 
	`memAboutToCh™ge
(
p
, &
aMem
[
pOp
->
p3
]);

715 #i‡
	`deföed
(
SQLITE_DEBUG
Ë|| deföed(
VDBE_PROFILE
)

716 
pOrigOp
 = 
pOp
;

719  
pOp
->
›code
 ){

768 
OP_GŸo
: {

769 
jump_to_p2_™d_check_f‹_öãºu±
:

770 
pOp
 = &
aOp
[pOp->
p2
 - 1];

782 
check_f‹_öãºu±
:

783 if–
db
->
u1
.
isI¡îru±ed
 ) 
ab‹t_due_to_öãºu±
;

784 #i‚de‡
SQLITE_OMIT_PROGRESS_CALLBACK


791 if–
db
->
xProgªss
!=0 && 
nVmSãp
>=
nProgªssLimô
 ){

792 
	`as£π
–
db
->
nProgªssOps
!=0 );

793 
nProgªssLimô
 = 
nVmSãp
 + 
db
->
nProgªssOps
 - (nVmStep%db->nProgressOps);

794 if–
db
->
	`xProgªss
(db->
pProgªssArg
) ){

795 
rc
 = 
SQLITE_INTERRUPT
;

796 
ab‹t_due_to_îr‹
;

809 
OP_Gosub
: {

810 
	`as£π
–
pOp
->
p1
>0 &&ÖOp->p1<=(
p
->
nMem
+1 -Ö->
nCurs‹
) );

811 
pIn1
 = &
aMem
[
pOp
->
p1
];

812 
	`as£π
–
	`VdbeMemDy«mic
(
pIn1
)==0 );

813 
	`memAboutToCh™ge
(
p
, 
pIn1
);

814 
pIn1
->
Êags
 = 
MEM_I¡
;

815 
pIn1
->
u
.
i
 = ()(
pOp
-
aOp
);

816 
	`REGISTER_TRACE
(
pOp
->
p1
, 
pIn1
);

820 
jump_to_p2
:

821 
pOp
 = &
aOp
[pOp->
p2
 - 1];

830 
OP_Rëu∫
: {

831 
pIn1
 = &
aMem
[
pOp
->
p1
];

832 
	`as£π
–
pIn1
->
Êags
==
MEM_I¡
 );

833 
pOp
 = &
aOp
[
pIn1
->
u
.
i
];

834 
pIn1
->
Êags
 = 
MEM_Undeföed
;

849 
OP_InôC‹outöe
: {

850 
	`as£π
–
pOp
->
p1
>0 &&ÖOp->p1<=(
p
->
nMem
+1 -Ö->
nCurs‹
) );

851 
	`as£π
–
pOp
->
p2
>=0 &&ÖOp->p2<
p
->
nOp
 );

852 
	`as£π
–
pOp
->
p3
>=0 &&ÖOp->p3<
p
->
nOp
 );

853 
pOut
 = &
aMem
[
pOp
->
p1
];

854 
	`as£π
–!
	`VdbeMemDy«mic
(
pOut
) );

855 
pOut
->
u
.
i
 = 
pOp
->
p3
 - 1;

856 
pOut
->
Êags
 = 
MEM_I¡
;

857 if–
pOp
->
p2
 ) 
jump_to_p2
;

869 
OP_EndC‹outöe
: {

870 
VdbeOp
 *
pCÆÀr
;

871 
pIn1
 = &
aMem
[
pOp
->
p1
];

872 
	`as£π
–
pIn1
->
Êags
==
MEM_I¡
 );

873 
	`as£π
–
pIn1
->
u
.
i
>=0 &&ÖIn1->u.i<
p
->
nOp
 );

874 
pCÆÀr
 = &
aOp
[
pIn1
->
u
.
i
];

875 
	`as£π
–
pCÆÀr
->
›code
==
OP_Yõld
 );

876 
	`as£π
–
pCÆÀr
->
p2
>=0 &&ÖCÆÀr->p2<
p
->
nOp
 );

877 
pOp
 = &
aOp
[
pCÆÀr
->
p2
 - 1];

878 
pIn1
->
Êags
 = 
MEM_Undeföed
;

895 
OP_Yõld
: {

896 
pcDe°
;

897 
pIn1
 = &
aMem
[
pOp
->
p1
];

898 
	`as£π
–
	`VdbeMemDy«mic
(
pIn1
)==0 );

899 
pIn1
->
Êags
 = 
MEM_I¡
;

900 
pcDe°
 = ()
pIn1
->
u
.
i
;

901 
pIn1
->
u
.
i
 = ()(
pOp
 - 
aOp
);

902 
	`REGISTER_TRACE
(
pOp
->
p1
, 
pIn1
);

903 
pOp
 = &
aOp
[
pcDe°
];

915 
OP_HÆtIfNuŒ
: {

916 
pIn3
 = &
aMem
[
pOp
->
p3
];

917 if–(
pIn3
->
Êags
 & 
MEM_NuŒ
)==0 ) ;

951 
OP_HÆt
: {

952 
VdbeFøme
 *
pFøme
;

953 
pcx
;

955 
pcx
 = ()(
pOp
 - 
aOp
);

956 if–
pOp
->
p1
==
SQLITE_OK
 && 
p
->
pFøme
 ){

958 
pFøme
 = 
p
->pFrame;

959 
p
->
pFøme
 =ÖFøme->
pP¨ít
;

960 
p
->
nFøme
--;

961 
	`sqlôe3VdbeSëCh™ges
(
db
, 
p
->
nCh™ge
);

962 
pcx
 = 
	`sqlôe3VdbeFømeRe°‹e
(
pFøme
);

963 
œ°Rowid
 = 
db
->lastRowid;

964 if–
pOp
->
p2
==
OE_Ign‹e
 ){

970 
pcx
 = 
p
->
aOp
[pcx].
p2
-1;

972 
aOp
 = 
p
->aOp;

973 
aMem
 = 
p
->aMem;

974 
pOp
 = &
aOp
[
pcx
];

977 
p
->
rc
 = 
pOp
->
p1
;

978 
p
->
îr‹A˘i⁄
 = (
u8
)
pOp
->
p2
;

979 
p
->
pc
 = 
pcx
;

980 
	`as£π
–
pOp
->
p5
>=0 &&ÖOp->p5<=4 );

981 if–
p
->
rc
 ){

982 if–
pOp
->
p5
 ){

983 c⁄° * c⁄° 
azTy≥
[] = { "NOT NULL", "UNIQUE", "CHECK",

985 
	`ã°ˇ£
–
pOp
->
p5
==1 );

986 
	`ã°ˇ£
–
pOp
->
p5
==2 );

987 
	`ã°ˇ£
–
pOp
->
p5
==3 );

988 
	`ã°ˇ£
–
pOp
->
p5
==4 );

989 
	`sqlôe3VdbeEº‹
(
p
, "%†c⁄°øöàÁûed", 
azTy≥
[
pOp
->
p5
-1]);

990 if–
pOp
->
p4
.
z
 ){

991 
p
->
zEºMsg
 = 
	`sqlôe3MPrötf
(
db
, "%z: %s",Ö->zEºMsg, 
pOp
->
p4
.
z
);

994 
	`sqlôe3VdbeEº‹
(
p
, "%s", 
pOp
->
p4
.
z
);

996 
	`sqlôe3_log
(
pOp
->
p1
, "ab‹à© %d i¿[%s]: %s", 
pcx
, 
p
->
zSql
,Ö->
zEºMsg
);

998 
rc
 = 
	`sqlôe3VdbeHÆt
(
p
);

999 
	`as£π
–
rc
==
SQLITE_BUSY
 ||Ñc==
SQLITE_OK
 ||Ñc==
SQLITE_ERROR
 );

1000 if–
rc
==
SQLITE_BUSY
 ){

1001 
p
->
rc
 = 
SQLITE_BUSY
;

1003 
	`as£π
–
rc
==
SQLITE_OK
 || (
p
->rc&0xff)==
SQLITE_CONSTRAINT
 );

1004 
	`as£π
–
rc
==
SQLITE_OK
 || 
db
->
nDe„ºedC⁄s
>0 || db->
nDe„ºedImmC⁄s
>0 );

1005 
rc
 = 
p
->r¯? 
SQLITE_ERROR
 : 
SQLITE_DONE
;

1007 
vdbe_ªtu∫
;

1015 
OP_I¡egî
: {

1016 
pOut
 = 
	`out2PªªÀa£
(
p
, 
pOp
);

1017 
pOut
->
u
.
i
 = 
pOp
->
p1
;

1027 
OP_I¡64
: {

1028 
pOut
 = 
	`out2PªªÀa£
(
p
, 
pOp
);

1029 
	`as£π
–
pOp
->
p4
.
pI64
!=0 );

1030 
pOut
->
u
.
i
 = *
pOp
->
p4
.
pI64
;

1034 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


1041 
OP_Ról
: {

1042 
pOut
 = 
	`out2PªªÀa£
(
p
, 
pOp
);

1043 
pOut
->
Êags
 = 
MEM_Ról
;

1044 
	`as£π
–!
	`sqlôe3IsNaN
(*
pOp
->
p4
.
pRól
) );

1045 
pOut
->
u
.
r
 = *
pOp
->
p4
.
pRól
;

1058 
OP_Såög8
: {

1059 
	`as£π
–
pOp
->
p4
.
z
!=0 );

1060 
pOut
 = 
	`out2PªªÀa£
(
p
, 
pOp
);

1061 
pOp
->
›code
 = 
OP_Såög
;

1062 
pOp
->
p1
 = 
	`sqlôe3SåÀn30
’Op->
p4
.
z
);

1064 #i‚de‡
SQLITE_OMIT_UTF16


1065 if–
ícodög
!=
SQLITE_UTF8
 ){

1066 
rc
 = 
	`sqlôe3VdbeMemSëSå
(
pOut
, 
pOp
->
p4
.
z
, -1, 
SQLITE_UTF8
, 
SQLITE_STATIC
);

1067 
	`as£π
–
rc
==
SQLITE_OK
 ||Ñc==
SQLITE_TOOBIG
 );

1068 if–
SQLITE_OK
!=
	`sqlôe3VdbeCh™geEncodög
(
pOut
, 
ícodög
ËË
no_mem
;

1069 
	`as£π
–
pOut
->
szMÆloc
>0 &&ÖOut->
zMÆloc
=ıOut->
z
 );

1070 
	`as£π
–
	`VdbeMemDy«mic
(
pOut
)==0 );

1071 
pOut
->
szMÆloc
 = 0;

1072 
pOut
->
Êags
 |
MEM_Sètic
;

1073 if–
pOp
->
p4ty≥
==
P4_DYNAMIC
 ){

1074 
	`sqlôe3DbFªe
(
db
, 
pOp
->
p4
.
z
);

1076 
pOp
->
p4ty≥
 = 
P4_DYNAMIC
;

1077 
pOp
->
p4
.
z
 = 
pOut
->z;

1078 
pOp
->
p1
 = 
pOut
->
n
;

1080 
	`ã°ˇ£
–
rc
==
SQLITE_TOOBIG
 );

1082 if–
pOp
->
p1
>
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
] ){

1083 
too_big
;

1085 
	`as£π
–
rc
==
SQLITE_OK
 );

1101 
OP_Såög
: {

1102 
	`as£π
–
pOp
->
p4
.
z
!=0 );

1103 
pOut
 = 
	`out2PªªÀa£
(
p
, 
pOp
);

1104 
pOut
->
Êags
 = 
MEM_Så
|
MEM_Sètic
|
MEM_Tîm
;

1105 
pOut
->
z
 = 
pOp
->
p4
.z;

1106 
pOut
->
n
 = 
pOp
->
p1
;

1107 
pOut
->
íc
 = 
ícodög
;

1108 
	`UPDATE_MAX_BLOBSIZE
(
pOut
);

1109 #i‚de‡
SQLITE_LIKE_DOESNT_MATCH_BLOBS


1110 if–
pOp
->
p3
>0 ){

1111 
	`as£π
–
pOp
->
p3
<=(
p
->
nMem
+1 -Ö->
nCurs‹
) );

1112 
pIn3
 = &
aMem
[
pOp
->
p3
];

1113 
	`as£π
–
pIn3
->
Êags
 & 
MEM_I¡
 );

1114 if–
pIn3
->
u
.
i
==
pOp
->
p5
 ) 
pOut
->
Êags
 = 
MEM_Blob
|
MEM_Sètic
|
MEM_Tîm
;

1132 
OP_NuŒ
: {

1133 
˙t
;

1134 
u16
 
nuŒFœg
;

1135 
pOut
 = 
	`out2PªªÀa£
(
p
, 
pOp
);

1136 
˙t
 = 
pOp
->
p3
-pOp->
p2
;

1137 
	`as£π
–
pOp
->
p3
<=(
p
->
nMem
+1 -Ö->
nCurs‹
) );

1138 
pOut
->
Êags
 = 
nuŒFœg
 = 
pOp
->
p1
 ? (
MEM_NuŒ
|
MEM_CÀ¨ed
) : MEM_Null;

1139  
˙t
>0 ){

1140 
pOut
++;

1141 
	`memAboutToCh™ge
(
p
, 
pOut
);

1142 
	`sqlôe3VdbeMemSëNuŒ
(
pOut
);

1143 
pOut
->
Êags
 = 
nuŒFœg
;

1144 
˙t
--;

1157 
OP_So·NuŒ
: {

1158 
	`as£π
–
pOp
->
p1
>0 &&ÖOp->p1<=(
p
->
nMem
+1 -Ö->
nCurs‹
) );

1159 
pOut
 = &
aMem
[
pOp
->
p1
];

1160 
pOut
->
Êags
 = (pOut->Êags|
MEM_NuŒ
)&~
MEM_Undeföed
;

1170 
OP_Blob
: {

1171 
	`as£π
–
pOp
->
p1
 <
SQLITE_MAX_LENGTH
 );

1172 
pOut
 = 
	`out2PªªÀa£
(
p
, 
pOp
);

1173 
	`sqlôe3VdbeMemSëSå
(
pOut
, 
pOp
->
p4
.
z
,ÖOp->
p1
, 0, 0);

1174 
pOut
->
íc
 = 
ícodög
;

1175 
	`UPDATE_MAX_BLOBSIZE
(
pOut
);

1187 
OP_V¨übÀ
: {

1188 
Mem
 *
pV¨
;

1190 
	`as£π
–
pOp
->
p1
>0 &&ÖOp->p1<=
p
->
nV¨
 );

1191 
	`as£π
–
pOp
->
p4
.
z
==0 ||ÖOp->p4.z==
p
->
azV¨
[pOp->
p1
-1] );

1192 
pV¨
 = &
p
->
aV¨
[
pOp
->
p1
 - 1];

1193 if–
	`sqlôe3VdbeMemTooBig
(
pV¨
) ){

1194 
too_big
;

1196 
pOut
 = 
	`out2PªªÀa£
(
p
, 
pOp
);

1197 
	`sqlôe3VdbeMemShÆlowC›y
(
pOut
, 
pV¨
, 
MEM_Sètic
);

1198 
	`UPDATE_MAX_BLOBSIZE
(
pOut
);

1211 
OP_Move
: {

1212 
n
;

1213 
p1
;

1214 
p2
;

1216 
n
 = 
pOp
->
p3
;

1217 
p1
 = 
pOp
->p1;

1218 
p2
 = 
pOp
->p2;

1219 
	`as£π
–
n
>0 && 
p1
>0 && 
p2
>0 );

1220 
	`as£π
–
p1
+
n
<=
p2
 ||Ö2+n<=p1 );

1222 
pIn1
 = &
aMem
[
p1
];

1223 
pOut
 = &
aMem
[
p2
];

1225 
	`as£π
–
pOut
<=&
aMem
[(
p
->
nMem
+1 -Ö->
nCurs‹
)] );

1226 
	`as£π
–
pIn1
<=&
aMem
[(
p
->
nMem
+1 -Ö->
nCurs‹
)] );

1227 
	`as£π
–
	`memIsVÆid
(
pIn1
) );

1228 
	`memAboutToCh™ge
(
p
, 
pOut
);

1229 
	`sqlôe3VdbeMemMove
(
pOut
, 
pIn1
);

1230 #ifde‡
SQLITE_DEBUG


1231 if–
pOut
->
pSc›yFrom
>=&
aMem
[
p1
] &&ÖOut->pScopyFrom<pOut ){

1232 
pOut
->
pSc›yFrom
 +
pOp
->
p2
 - 
p1
;

1235 
	`DìphemîÆize
(
pOut
);

1236 
	`REGISTER_TRACE
(
p2
++, 
pOut
);

1237 
pIn1
++;

1238 
pOut
++;

1239 } --
n
 );

1251 
OP_C›y
: {

1252 
n
;

1254 
n
 = 
pOp
->
p3
;

1255 
pIn1
 = &
aMem
[
pOp
->
p1
];

1256 
pOut
 = &
aMem
[
pOp
->
p2
];

1257 
	`as£π
–
pOut
!=
pIn1
 );

1259 
	`sqlôe3VdbeMemShÆlowC›y
(
pOut
, 
pIn1
, 
MEM_Ephem
);

1260 
	`DìphemîÆize
(
pOut
);

1261 #ifde‡
SQLITE_DEBUG


1262 
pOut
->
pSc›yFrom
 = 0;

1264 
	`REGISTER_TRACE
(
pOp
->
p2
+pOp->
p3
-
n
, 
pOut
);

1265 if–(
n
--)==0 ) ;

1266 
pOut
++;

1267 
pIn1
++;

1285 
OP_SC›y
: {

1286 
pIn1
 = &
aMem
[
pOp
->
p1
];

1287 
pOut
 = &
aMem
[
pOp
->
p2
];

1288 
	`as£π
–
pOut
!=
pIn1
 );

1289 
	`sqlôe3VdbeMemShÆlowC›y
(
pOut
, 
pIn1
, 
MEM_Ephem
);

1290 #ifde‡
SQLITE_DEBUG


1291 if–
pOut
->
pSc›yFrom
==0 )ÖOut->pSc›yFrom = 
pIn1
;

1304 
OP_I¡C›y
: {

1305 
pIn1
 = &
aMem
[
pOp
->
p1
];

1306 
	`as£π
–(
pIn1
->
Êags
 & 
MEM_I¡
)!=0 );

1307 
pOut
 = &
aMem
[
pOp
->
p2
];

1308 
	`sqlôe3VdbeMemSëI¡64
(
pOut
, 
pIn1
->
u
.
i
);

1321 
OP_Resu…Row
: {

1322 
Mem
 *
pMem
;

1323 
i
;

1324 
	`as£π
–
p
->
nResCﬁumn
==
pOp
->
p2
 );

1325 
	`as£π
–
pOp
->
p1
>0 );

1326 
	`as£π
–
pOp
->
p1
+pOp->
p2
<=(
p
->
nMem
+1 -Ö->
nCurs‹
)+1 );

1328 #i‚de‡
SQLITE_OMIT_PROGRESS_CALLBACK


1331 if–
db
->
xProgªss
!=0

1332 && 
nVmSãp
>=
nProgªssLimô


1333 && 
db
->
	`xProgªss
(db->
pProgªssArg
)!=0

1335 
rc
 = 
SQLITE_INTERRUPT
;

1336 
ab‹t_due_to_îr‹
;

1343 if–
SQLITE_OK
!=(
rc
 = 
	`sqlôe3VdbeCheckFk
(
p
, 0)) ){

1344 
	`as£π
–
db
->
Êags
&
SQLITE_Cou¡Rows
 );

1345 
	`as£π
–
p
->
u£sStmtJou∫Æ
 );

1346 
ab‹t_due_to_îr‹
;

1364 
	`as£π
–
p
->
iSèãmít
==0 || 
db
->
Êags
&
SQLITE_Cou¡Rows
 );

1365 
rc
 = 
	`sqlôe3VdbeClo£Sèãmít
(
p
, 
SAVEPOINT_RELEASE
);

1366 
	`as£π
–
rc
==
SQLITE_OK
 );

1369 
p
->
ˇcheCå
 = (p->cacheCtr + 2)|1;

1375 
pMem
 = 
p
->
pResu…Së
 = &
aMem
[
pOp
->
p1
];

1376 
i
=0; i<
pOp
->
p2
; i++){

1377 
	`as£π
–
	`memIsVÆid
(&
pMem
[
i
]) );

1378 
	`DìphemîÆize
(&
pMem
[
i
]);

1379 
	`as£π
–(
pMem
[
i
].
Êags
 & 
MEM_Ephem
)==0

1380 || (
pMem
[
i
].
Êags
 & (
MEM_Så
|
MEM_Blob
))==0 );

1381 
	`sqlôe3VdbeMemNulTîmö©e
(&
pMem
[
i
]);

1382 
	`REGISTER_TRACE
(
pOp
->
p1
+
i
, &
pMem
[i]);

1384 if–
db
->
mÆlocFaûed
 ) 
no_mem
;

1388 
p
->
pc
 = ()(
pOp
 - 
aOp
) + 1;

1389 
rc
 = 
SQLITE_ROW
;

1390 
vdbe_ªtu∫
;

1406 
OP_C⁄ˇt
: {

1407 
i64
 
nByã
;

1409 
pIn1
 = &
aMem
[
pOp
->
p1
];

1410 
pIn2
 = &
aMem
[
pOp
->
p2
];

1411 
pOut
 = &
aMem
[
pOp
->
p3
];

1412 
	`as£π
–
pIn1
!=
pOut
 );

1413 if–(
pIn1
->
Êags
 | 
pIn2
->ÊagsË& 
MEM_NuŒ
 ){

1414 
	`sqlôe3VdbeMemSëNuŒ
(
pOut
);

1417 if–
	`Ex∑ndBlob
(
pIn1
Ë|| Ex∑ndBlob(
pIn2
ËË
no_mem
;

1418 
	`Såögify
(
pIn1
, 
ícodög
);

1419 
	`Såögify
(
pIn2
, 
ícodög
);

1420 
nByã
 = 
pIn1
->
n
 + 
pIn2
->n;

1421 if–
nByã
>
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
] ){

1422 
too_big
;

1424 if–
	`sqlôe3VdbeMemGrow
(
pOut
, ()
nByã
+2,ÖOut==
pIn2
) ){

1425 
no_mem
;

1427 
	`MemSëTy≥Fœg
(
pOut
, 
MEM_Så
);

1428 if–
pOut
!=
pIn2
 ){

1429 
	`mem˝y
(
pOut
->
z
, 
pIn2
->z,ÖIn2->
n
);

1431 
	`mem˝y
(&
pOut
->
z
[
pIn2
->
n
], 
pIn1
->z,ÖIn1->n);

1432 
pOut
->
z
[
nByã
]=0;

1433 
pOut
->
z
[
nByã
+1] = 0;

1434 
pOut
->
Êags
 |
MEM_Tîm
;

1435 
pOut
->
n
 = ()
nByã
;

1436 
pOut
->
íc
 = 
ícodög
;

1437 
	`UPDATE_MAX_BLOBSIZE
(
pOut
);

1479 
OP_Add
:

1480 
OP_Subåa˘
:

1481 
OP_Mu…ùly
:

1482 
OP_Divide
:

1483 
OP_Remaödî
: {

1484 
bI¡öt
;

1485 
u16
 
Êags
;

1486 
u16
 
ty≥1
;

1487 
u16
 
ty≥2
;

1488 
i64
 
iA
;

1489 
i64
 
iB
;

1490 
rA
;

1491 
rB
;

1493 
pIn1
 = &
aMem
[
pOp
->
p1
];

1494 
ty≥1
 = 
	`numîicTy≥
(
pIn1
);

1495 
pIn2
 = &
aMem
[
pOp
->
p2
];

1496 
ty≥2
 = 
	`numîicTy≥
(
pIn2
);

1497 
pOut
 = &
aMem
[
pOp
->
p3
];

1498 
Êags
 = 
pIn1
->Êag†| 
pIn2
->flags;

1499 if–(
Êags
 & 
MEM_NuŒ
)!=0 ) 
¨ôhmëic_ªsu…_is_nuŒ
;

1500 if–(
ty≥1
 & 
ty≥2
 & 
MEM_I¡
)!=0 ){

1501 
iA
 = 
pIn1
->
u
.
i
;

1502 
iB
 = 
pIn2
->
u
.
i
;

1503 
bI¡öt
 = 1;

1504  
pOp
->
›code
 ){

1505 
OP_Add
: if–
	`sqlôe3AddI¡64
(&
iB
,
iA
ËË
Â_m©h
; ;

1506 
OP_Subåa˘
: if–
	`sqlôe3SubI¡64
(&
iB
,
iA
ËË
Â_m©h
; ;

1507 
OP_Mu…ùly
: if–
	`sqlôe3MulI¡64
(&
iB
,
iA
ËË
Â_m©h
; ;

1508 
OP_Divide
: {

1509 if–
iA
==0 ) 
¨ôhmëic_ªsu…_is_nuŒ
;

1510 if–
iA
==-1 && 
iB
==
SMALLEST_INT64
 ) 
Â_m©h
;

1511 
iB
 /
iA
;

1515 if–
iA
==0 ) 
¨ôhmëic_ªsu…_is_nuŒ
;

1516 if–
iA
==-1 ) iA = 1;

1517 
iB
 %
iA
;

1521 
pOut
->
u
.
i
 = 
iB
;

1522 
	`MemSëTy≥Fœg
(
pOut
, 
MEM_I¡
);

1524 
bI¡öt
 = 0;

1525 
Â_m©h
:

1526 
rA
 = 
	`sqlôe3VdbeRólVÆue
(
pIn1
);

1527 
rB
 = 
	`sqlôe3VdbeRólVÆue
(
pIn2
);

1528  
pOp
->
›code
 ){

1529 
OP_Add
: 
rB
 +
rA
; ;

1530 
OP_Subåa˘
: 
rB
 -
rA
; ;

1531 
OP_Mu…ùly
: 
rB
 *
rA
; ;

1532 
OP_Divide
: {

1534 if–
rA
==()0 ) 
¨ôhmëic_ªsu…_is_nuŒ
;

1535 
rB
 /
rA
;

1539 
iA
 = (
i64
)
rA
;

1540 
iB
 = (
i64
)
rB
;

1541 if–
iA
==0 ) 
¨ôhmëic_ªsu…_is_nuŒ
;

1542 if–
iA
==-1 ) iA = 1;

1543 
rB
 = ()(
iB
 % 
iA
);

1547 #ifde‡
SQLITE_OMIT_FLOATING_POINT


1548 
pOut
->
u
.
i
 = 
rB
;

1549 
	`MemSëTy≥Fœg
(
pOut
, 
MEM_I¡
);

1551 if–
	`sqlôe3IsNaN
(
rB
) ){

1552 
¨ôhmëic_ªsu…_is_nuŒ
;

1554 
pOut
->
u
.
r
 = 
rB
;

1555 
	`MemSëTy≥Fœg
(
pOut
, 
MEM_Ról
);

1556 if–((
ty≥1
|
ty≥2
)&
MEM_Ról
)==0 && !
bI¡öt
 ){

1557 
	`sqlôe3VdbeI¡egîAfföôy
(
pOut
);

1563 
¨ôhmëic_ªsu…_is_nuŒ
:

1564 
	`sqlôe3VdbeMemSëNuŒ
(
pOut
);

1583 
OP_CﬁlSeq
: {

1584 
	`as£π
–
pOp
->
p4ty≥
==
P4_COLLSEQ
 );

1585 if–
pOp
->
p1
 ){

1586 
	`sqlôe3VdbeMemSëI¡64
(&
aMem
[
pOp
->
p1
], 0);

1632 
OP_Fun˘i⁄0
: {

1633 
n
;

1634 
sqlôe3_c⁄ãxt
 *
pCtx
;

1636 
	`as£π
–
pOp
->
p4ty≥
==
P4_FUNCDEF
 );

1637 
n
 = 
pOp
->
p5
;

1638 
	`as£π
–
pOp
->
p3
>0 &&ÖOp->p3<=(
p
->
nMem
+1 -Ö->
nCurs‹
) );

1639 
	`as£π
–
n
==0 || (
pOp
->
p2
>0 &&ÖOp->p2+n<=(
p
->
nMem
+1 -Ö->
nCurs‹
)+1) );

1640 
	`as£π
–
pOp
->
p3
<pOp->
p2
 ||ÖOp->p3>ıOp->p2+
n
 );

1641 
pCtx
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, (*pCtxË+ (
n
-1)*(
sqlôe3_vÆue
*));

1642 if–
pCtx
==0 ) 
no_mem
;

1643 
pCtx
->
pOut
 = 0;

1644 
pCtx
->
pFunc
 = 
pOp
->
p4
.pFunc;

1645 
pCtx
->
iOp
 = ()(
pOp
 - 
aOp
);

1646 
pCtx
->
pVdbe
 = 
p
;

1647 
pCtx
->
¨gc
 = 
n
;

1648 
pOp
->
p4ty≥
 = 
P4_FUNCCTX
;

1649 
pOp
->
p4
.
pCtx
 =ÖCtx;

1650 
pOp
->
›code
 = 
OP_Fun˘i⁄
;

1653 
OP_Fun˘i⁄
: {

1654 
i
;

1655 
sqlôe3_c⁄ãxt
 *
pCtx
;

1657 
	`as£π
–
pOp
->
p4ty≥
==
P4_FUNCCTX
 );

1658 
pCtx
 = 
pOp
->
p4
.pCtx;

1664 
pOut
 = &
aMem
[
pOp
->
p3
];

1665 if–
pCtx
->
pOut
 !=ÖOut ){

1666 
pCtx
->
pOut
 =ÖOut;

1667 
i
=
pCtx
->
¨gc
-1; i>=0; i--ËpCtx->
¨gv
[i] = &
aMem
[
pOp
->
p2
+i];

1670 
	`memAboutToCh™ge
(
p
, 
pCtx
->
pOut
);

1671 #ifde‡
SQLITE_DEBUG


1672 
i
=0; i<
pCtx
->
¨gc
; i++){

1673 
	`as£π
–
	`memIsVÆid
(
pCtx
->
¨gv
[
i
]) );

1674 
	`REGISTER_TRACE
(
pOp
->
p2
+
i
, 
pCtx
->
¨gv
[i]);

1677 
	`MemSëTy≥Fœg
(
pCtx
->
pOut
, 
MEM_NuŒ
);

1678 
pCtx
->
fEº‹OrAux
 = 0;

1679 
db
->
œ°Rowid
 =ÜastRowid;

1680 (*
pCtx
->
pFunc
->
xSFunc
)’Ctx,ÖCtx->
¨gc
,ÖCtx->
¨gv
);

1681 
œ°Rowid
 = 
db
->lastRowid;

1684 if–
pCtx
->
fEº‹OrAux
 ){

1685 if–
pCtx
->
isEº‹
 ){

1686 
	`sqlôe3VdbeEº‹
(
p
, "%s", 
	`sqlôe3_vÆue_ãxt
(
pCtx
->
pOut
));

1687 
rc
 = 
pCtx
->
isEº‹
;

1689 
	`sqlôe3VdbeDñëeAuxD©a
(
db
, &
p
->
pAuxD©a
, 
pCtx
->
iOp
, 
pOp
->
p1
);

1690 if–
rc
 ) 
ab‹t_due_to_îr‹
;

1694 if–
pOut
->
Êags
 & (
MEM_Så
|
MEM_Blob
) ){

1695 
	`sqlôe3VdbeCh™geEncodög
(
pCtx
->
pOut
, 
ícodög
);

1696 if–
	`sqlôe3VdbeMemTooBig
(
pCtx
->
pOut
ËË
too_big
;

1699 
	`REGISTER_TRACE
(
pOp
->
p3
, 
pCtx
->
pOut
);

1700 
	`UPDATE_MAX_BLOBSIZE
(
pCtx
->
pOut
);

1734 
OP_BôAnd
:

1735 
OP_BôOr
:

1736 
OP_Shi·Le·
:

1737 
OP_Shi·Right
: {

1738 
i64
 
iA
;

1739 
u64
 
uA
;

1740 
i64
 
iB
;

1741 
u8
 
›
;

1743 
pIn1
 = &
aMem
[
pOp
->
p1
];

1744 
pIn2
 = &
aMem
[
pOp
->
p2
];

1745 
pOut
 = &
aMem
[
pOp
->
p3
];

1746 if–(
pIn1
->
Êags
 | 
pIn2
->ÊagsË& 
MEM_NuŒ
 ){

1747 
	`sqlôe3VdbeMemSëNuŒ
(
pOut
);

1750 
iA
 = 
	`sqlôe3VdbeI¡VÆue
(
pIn2
);

1751 
iB
 = 
	`sqlôe3VdbeI¡VÆue
(
pIn1
);

1752 
›
 = 
pOp
->
›code
;

1753 if–
›
==
OP_BôAnd
 ){

1754 
iA
 &
iB
;

1755 }if–
›
==
OP_BôOr
 ){

1756 
iA
 |
iB
;

1757 }if–
iB
!=0 ){

1758 
	`as£π
–
›
==
OP_Shi·Right
 || op==
OP_Shi·Le·
 );

1761 if–
iB
<0 ){

1762 
	`as£π
–
OP_Shi·Right
==
OP_Shi·Le·
+1 );

1763 
›
 = 2*
OP_Shi·Le·
 + 1 - op;

1764 
iB
 = iB>(-64) ? -iB : 64;

1767 if–
iB
>=64 ){

1768 
iA
 = (iA>=0 || 
›
==
OP_Shi·Le·
) ? 0 : -1;

1770 
	`mem˝y
(&
uA
, &
iA
, (uA));

1771 if–
›
==
OP_Shi·Le·
 ){

1772 
uA
 <<
iB
;

1774 
uA
 >>
iB
;

1776 if–
iA
<0 ) 
uA
 |((((
u64
)0xffffffff)<<32)|0xffffffffË<< (64-
iB
);

1778 
	`mem˝y
(&
iA
, &
uA
, (iA));

1781 
pOut
->
u
.
i
 = 
iA
;

1782 
	`MemSëTy≥Fœg
(
pOut
, 
MEM_I¡
);

1794 
OP_AddImm
: {

1795 
pIn1
 = &
aMem
[
pOp
->
p1
];

1796 
	`memAboutToCh™ge
(
p
, 
pIn1
);

1797 
	`sqlôe3VdbeMemI¡egîify
(
pIn1
);

1798 
pIn1
->
u
.
i
 +
pOp
->
p2
;

1809 
OP_Mu°BeI¡
: {

1810 
pIn1
 = &
aMem
[
pOp
->
p1
];

1811 if–(
pIn1
->
Êags
 & 
MEM_I¡
)==0 ){

1812 
	`≠∂yAfföôy
(
pIn1
, 
SQLITE_AFF_NUMERIC
, 
ícodög
);

1813 
	`VdbeBønchTakí
((
pIn1
->
Êags
&
MEM_I¡
)==0, 2);

1814 if–(
pIn1
->
Êags
 & 
MEM_I¡
)==0 ){

1815 if–
pOp
->
p2
==0 ){

1816 
rc
 = 
SQLITE_MISMATCH
;

1817 
ab‹t_due_to_îr‹
;

1819 
jump_to_p2
;

1823 
	`MemSëTy≥Fœg
(
pIn1
, 
MEM_I¡
);

1827 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


1837 
OP_RólAfföôy
: {

1838 
pIn1
 = &
aMem
[
pOp
->
p1
];

1839 if–
pIn1
->
Êags
 & 
MEM_I¡
 ){

1840 
	`sqlôe3VdbeMemRólify
(
pIn1
);

1846 #i‚de‡
SQLITE_OMIT_CAST


1862 
OP_Ca°
: {

1863 
	`as£π
–
pOp
->
p2
>=
SQLITE_AFF_BLOB
 &&ÖOp->p2<=
SQLITE_AFF_REAL
 );

1864 
	`ã°ˇ£
–
pOp
->
p2
==
SQLITE_AFF_TEXT
 );

1865 
	`ã°ˇ£
–
pOp
->
p2
==
SQLITE_AFF_BLOB
 );

1866 
	`ã°ˇ£
–
pOp
->
p2
==
SQLITE_AFF_NUMERIC
 );

1867 
	`ã°ˇ£
–
pOp
->
p2
==
SQLITE_AFF_INTEGER
 );

1868 
	`ã°ˇ£
–
pOp
->
p2
==
SQLITE_AFF_REAL
 );

1869 
pIn1
 = &
aMem
[
pOp
->
p1
];

1870 
	`memAboutToCh™ge
(
p
, 
pIn1
);

1871 
rc
 = 
	`Ex∑ndBlob
(
pIn1
);

1872 
	`sqlôe3VdbeMemCa°
(
pIn1
, 
pOp
->
p2
, 
ícodög
);

1873 
	`UPDATE_MAX_BLOBSIZE
(
pIn1
);

1874 if–
rc
 ) 
ab‹t_due_to_îr‹
;

1961 
OP_Eq
:

1962 
OP_Ne
:

1963 
OP_Lt
:

1964 
OP_Le
:

1965 
OP_Gt
:

1966 
OP_Ge
: {

1967 
ªs
;

1968 
afföôy
;

1969 
u16
 
Êags1
;

1970 
u16
 
Êags3
;

1972 
pIn1
 = &
aMem
[
pOp
->
p1
];

1973 
pIn3
 = &
aMem
[
pOp
->
p3
];

1974 
Êags1
 = 
pIn1
->
Êags
;

1975 
Êags3
 = 
pIn3
->
Êags
;

1976 if–(
Êags1
 | 
Êags3
)&
MEM_NuŒ
 ){

1978 if–
pOp
->
p5
 & 
SQLITE_NULLEQ
 ){

1983 
	`as£π
–
pOp
->
›code
==
OP_Eq
 ||ÖOp->›code==
OP_Ne
 );

1984 
	`as£π
–(
Êags1
 & 
MEM_CÀ¨ed
)==0 );

1985 
	`as£π
–(
pOp
->
p5
 & 
SQLITE_JUMPIFNULL
)==0 );

1986 if–(
Êags1
&
MEM_NuŒ
)!=0

1987 && (
Êags3
&
MEM_NuŒ
)!=0

1988 && (
Êags3
&
MEM_CÀ¨ed
)==0

1990 
ªs
 = 0;

1992 
ªs
 = 1;

1999 if–
pOp
->
p5
 & 
SQLITE_STOREP2
 ){

2000 
pOut
 = &
aMem
[
pOp
->
p2
];

2001 
	`memAboutToCh™ge
(
p
, 
pOut
);

2002 
	`MemSëTy≥Fœg
(
pOut
, 
MEM_NuŒ
);

2003 
	`REGISTER_TRACE
(
pOp
->
p2
, 
pOut
);

2005 
	`VdbeBønchTakí
(2,3);

2006 if–
pOp
->
p5
 & 
SQLITE_JUMPIFNULL
 ){

2007 
jump_to_p2
;

2014 
afföôy
 = 
pOp
->
p5
 & 
SQLITE_AFF_MASK
;

2015 if–
afföôy
>=
SQLITE_AFF_NUMERIC
 ){

2016 if–(
Êags1
 | 
Êags3
)&
MEM_Så
 ){

2017 if–(
Êags1
 & (
MEM_I¡
|
MEM_Ról
|
MEM_Så
))==MEM_Str ){

2018 
	`≠∂yNumîicAfföôy
(
pIn1
,0);

2020 if–(
Êags3
 & (
MEM_I¡
|
MEM_Ról
|
MEM_Så
))==MEM_Str ){

2021 
	`≠∂yNumîicAfföôy
(
pIn3
,0);

2024 }if–
afföôy
==
SQLITE_AFF_TEXT
 ){

2025 if–(
Êags1
 & 
MEM_Så
)==0 && (Êags1 & (
MEM_I¡
|
MEM_Ról
))!=0 ){

2026 
	`ã°ˇ£
–
pIn1
->
Êags
 & 
MEM_I¡
 );

2027 
	`ã°ˇ£
–
pIn1
->
Êags
 & 
MEM_Ról
 );

2028 
	`sqlôe3VdbeMemSåögify
(
pIn1
, 
ícodög
, 1);

2029 
	`ã°ˇ£
–(
Êags1
&
MEM_Dyn
Ë!(
pIn1
->
Êags
&MEM_Dyn) );

2030 
Êags1
 = (
pIn1
->
Êags
 & ~
MEM_Ty≥Mask
) | (flags1 & MEM_TypeMask);

2032 if–(
Êags3
 & 
MEM_Så
)==0 && (Êags3 & (
MEM_I¡
|
MEM_Ról
))!=0 ){

2033 
	`ã°ˇ£
–
pIn3
->
Êags
 & 
MEM_I¡
 );

2034 
	`ã°ˇ£
–
pIn3
->
Êags
 & 
MEM_Ról
 );

2035 
	`sqlôe3VdbeMemSåögify
(
pIn3
, 
ícodög
, 1);

2036 
	`ã°ˇ£
–(
Êags3
&
MEM_Dyn
Ë!(
pIn3
->
Êags
&MEM_Dyn) );

2037 
Êags3
 = (
pIn3
->
Êags
 & ~
MEM_Ty≥Mask
) | (flags3 & MEM_TypeMask);

2040 
	`as£π
–
pOp
->
p4ty≥
==
P4_COLLSEQ
 ||ÖOp->
p4
.
pCﬁl
==0 );

2041 if–
Êags1
 & 
MEM_Zîo
 ){

2042 
	`sqlôe3VdbeMemEx∑ndBlob
(
pIn1
);

2043 
Êags1
 &~
MEM_Zîo
;

2045 if–
Êags3
 & 
MEM_Zîo
 ){

2046 
	`sqlôe3VdbeMemEx∑ndBlob
(
pIn3
);

2047 
Êags3
 &~
MEM_Zîo
;

2049 
ªs
 = 
	`sqlôe3MemCom∑ª
(
pIn3
, 
pIn1
, 
pOp
->
p4
.
pCﬁl
);

2051  
pOp
->
›code
 ){

2052 
OP_Eq
: 
ªs
 =Ñes==0; ;

2053 
OP_Ne
: 
ªs
 =Ñes!=0; ;

2054 
OP_Lt
: 
ªs
 =Ñes<0; ;

2055 
OP_Le
: 
ªs
 =Ñes<=0; ;

2056 
OP_Gt
: 
ªs
 =Ñes>0; ;

2057 : 
ªs
 =Ñes>=0; ;

2061 
	`as£π
–(
pIn1
->
Êags
 & 
MEM_Dyn
Ë=(
Êags1
 & MEM_Dyn) );

2062 
pIn1
->
Êags
 = 
Êags1
;

2063 
	`as£π
–(
pIn3
->
Êags
 & 
MEM_Dyn
Ë=(
Êags3
 & MEM_Dyn) );

2064 
pIn3
->
Êags
 = 
Êags3
;

2066 if–
pOp
->
p5
 & 
SQLITE_STOREP2
 ){

2067 
pOut
 = &
aMem
[
pOp
->
p2
];

2068 
	`memAboutToCh™ge
(
p
, 
pOut
);

2069 
	`MemSëTy≥Fœg
(
pOut
, 
MEM_I¡
);

2070 
pOut
->
u
.
i
 = 
ªs
;

2071 
	`REGISTER_TRACE
(
pOp
->
p2
, 
pOut
);

2073 
	`VdbeBønchTakí
(
ªs
!=0, (
pOp
->
p5
 & 
SQLITE_NULLEQ
)?2:3);

2074 if–
ªs
 ){

2075 
jump_to_p2
;

2093 
OP_Pîmuèti⁄
: {

2094 
	`as£π
–
pOp
->
p4ty≥
==
P4_INTARRAY
 );

2095 
	`as£π
–
pOp
->
p4
.
ai
 );

2096 
aPîmuã
 = 
pOp
->
p4
.
ai
 + 1;

2120 
OP_Com∑ª
: {

2121 
n
;

2122 
i
;

2123 
p1
;

2124 
p2
;

2125 c⁄° 
KeyInfo
 *
pKeyInfo
;

2126 
idx
;

2127 
CﬁlSeq
 *
pCﬁl
;

2128 
bRev
;

2130 if–(
pOp
->
p5
 & 
OPFLAG_PERMUTE
)==0 ) 
aPîmuã
 = 0;

2131 
n
 = 
pOp
->
p3
;

2132 
pKeyInfo
 = 
pOp
->
p4
.pKeyInfo;

2133 
	`as£π
–
n
>0 );

2134 
	`as£π
–
pKeyInfo
!=0 );

2135 
p1
 = 
pOp
->p1;

2136 
p2
 = 
pOp
->p2;

2137 #i‡
SQLITE_DEBUG


2138 if–
aPîmuã
 ){

2139 
k
, 
mx
 = 0;

2140 
k
=0; k<
n
; k++Ëif–
aPîmuã
[k]>
mx
 ) mx =áPermute[k];

2141 
	`as£π
–
p1
>0 &&Ö1+
mx
<=(
p
->
nMem
+1 -Ö->
nCurs‹
)+1 );

2142 
	`as£π
–
p2
>0 &&Ö2+
mx
<=(
p
->
nMem
+1 -Ö->
nCurs‹
)+1 );

2144 
	`as£π
–
p1
>0 &&Ö1+
n
<=(
p
->
nMem
+1 -Ö->
nCurs‹
)+1 );

2145 
	`as£π
–
p2
>0 &&Ö2+
n
<=(
p
->
nMem
+1 -Ö->
nCurs‹
)+1 );

2148 
i
=0; i<
n
; i++){

2149 
idx
 = 
aPîmuã
 ?áPîmuã[
i
] : i;

2150 
	`as£π
–
	`memIsVÆid
(&
aMem
[
p1
+
idx
]) );

2151 
	`as£π
–
	`memIsVÆid
(&
aMem
[
p2
+
idx
]) );

2152 
	`REGISTER_TRACE
(
p1
+
idx
, &
aMem
[p1+idx]);

2153 
	`REGISTER_TRACE
(
p2
+
idx
, &
aMem
[p2+idx]);

2154 
	`as£π
–
i
<
pKeyInfo
->
nFõld
 );

2155 
pCﬁl
 = 
pKeyInfo
->
aCﬁl
[
i
];

2156 
bRev
 = 
pKeyInfo
->
aS‹tOrdî
[
i
];

2157 
iCom∑ª
 = 
	`sqlôe3MemCom∑ª
(&
aMem
[
p1
+
idx
], &aMem[
p2
+idx], 
pCﬁl
);

2158 if–
iCom∑ª
 ){

2159 if–
bRev
 ) 
iCom∑ª
 = -iCompare;

2163 
aPîmuã
 = 0;

2173 
OP_Jump
: {

2174 if–
iCom∑ª
<0 ){

2175 
	`VdbeBønchTakí
(0,3); 
pOp
 = &
aOp
[pOp->
p1
 - 1];

2176 }if–
iCom∑ª
==0 ){

2177 
	`VdbeBønchTakí
(1,3); 
pOp
 = &
aOp
[pOp->
p2
 - 1];

2179 
	`VdbeBønchTakí
(2,3); 
pOp
 = &
aOp
[pOp->
p3
 - 1];

2204 
OP_And
:

2205 
OP_Or
: {

2206 
v1
;

2207 
v2
;

2209 
pIn1
 = &
aMem
[
pOp
->
p1
];

2210 if–
pIn1
->
Êags
 & 
MEM_NuŒ
 ){

2211 
v1
 = 2;

2213 
v1
 = 
	`sqlôe3VdbeI¡VÆue
(
pIn1
)!=0;

2215 
pIn2
 = &
aMem
[
pOp
->
p2
];

2216 if–
pIn2
->
Êags
 & 
MEM_NuŒ
 ){

2217 
v2
 = 2;

2219 
v2
 = 
	`sqlôe3VdbeI¡VÆue
(
pIn2
)!=0;

2221 if–
pOp
->
›code
==
OP_And
 ){

2222 c⁄° 
™d_logic
[] = { 0, 0, 0, 0, 1, 2, 0, 2, 2 };

2223 
v1
 = 
™d_logic
[v1*3+
v2
];

2225 c⁄° 
‹_logic
[] = { 0, 1, 2, 1, 1, 1, 2, 1, 2 };

2226 
v1
 = 
‹_logic
[v1*3+
v2
];

2228 
pOut
 = &
aMem
[
pOp
->
p3
];

2229 if–
v1
==2 ){

2230 
	`MemSëTy≥Fœg
(
pOut
, 
MEM_NuŒ
);

2232 
pOut
->
u
.
i
 = 
v1
;

2233 
	`MemSëTy≥Fœg
(
pOut
, 
MEM_I¡
);

2245 
OP_NŸ
: {

2246 
pIn1
 = &
aMem
[
pOp
->
p1
];

2247 
pOut
 = &
aMem
[
pOp
->
p2
];

2248 
	`sqlôe3VdbeMemSëNuŒ
(
pOut
);

2249 if–(
pIn1
->
Êags
 & 
MEM_NuŒ
)==0 ){

2250 
pOut
->
Êags
 = 
MEM_I¡
;

2251 
pOut
->
u
.
i
 = !
	`sqlôe3VdbeI¡VÆue
(
pIn1
);

2263 
OP_BôNŸ
: {

2264 
pIn1
 = &
aMem
[
pOp
->
p1
];

2265 
pOut
 = &
aMem
[
pOp
->
p2
];

2266 
	`sqlôe3VdbeMemSëNuŒ
(
pOut
);

2267 if–(
pIn1
->
Êags
 & 
MEM_NuŒ
)==0 ){

2268 
pOut
->
Êags
 = 
MEM_I¡
;

2269 
pOut
->
u
.
i
 = ~
	`sqlôe3VdbeI¡VÆue
(
pIn1
);

2285 
OP_On˚
: {

2286 
	`as£π
–
pOp
->
p1
<
p
->
nOn˚Fœg
 );

2287 
	`VdbeBønchTakí
(
p
->
aOn˚Fœg
[
pOp
->
p1
]!=0, 2);

2288 if–
p
->
aOn˚Fœg
[
pOp
->
p1
] ){

2289 
jump_to_p2
;

2291 
p
->
aOn˚Fœg
[
pOp
->
p1
] = 1;

2308 
OP_If
:

2309 
OP_IfNŸ
: {

2310 
c
;

2311 
pIn1
 = &
aMem
[
pOp
->
p1
];

2312 if–
pIn1
->
Êags
 & 
MEM_NuŒ
 ){

2313 
c
 = 
pOp
->
p3
;

2315 #ifde‡
SQLITE_OMIT_FLOATING_POINT


2316 
c
 = 
	`sqlôe3VdbeI¡VÆue
(
pIn1
)!=0;

2318 
c
 = 
	`sqlôe3VdbeRólVÆue
(
pIn1
)!=0.0;

2320 if–
pOp
->
›code
==
OP_IfNŸ
 ) 
c
 = !c;

2322 
	`VdbeBønchTakí
(
c
!=0, 2);

2323 if–
c
 ){

2324 
jump_to_p2
;

2334 
OP_IsNuŒ
: {

2335 
pIn1
 = &
aMem
[
pOp
->
p1
];

2336 
	`VdbeBønchTakí
–(
pIn1
->
Êags
 & 
MEM_NuŒ
)!=0, 2);

2337 if–(
pIn1
->
Êags
 & 
MEM_NuŒ
)!=0 ){

2338 
jump_to_p2
;

2348 
OP_NŸNuŒ
: {

2349 
pIn1
 = &
aMem
[
pOp
->
p1
];

2350 
	`VdbeBønchTakí
–(
pIn1
->
Êags
 & 
MEM_NuŒ
)==0, 2);

2351 if–(
pIn1
->
Êags
 & 
MEM_NuŒ
)==0 ){

2352 
jump_to_p2
;

2382 
OP_Cﬁumn
: {

2383 
i64
 
∑ylﬂdSize64
;

2384 
p2
;

2385 
VdbeCurs‹
 *
pC
;

2386 
BtCurs‹
 *
pCr§
;

2387 
u32
 *
aOff£t
;

2388 
Àn
;

2389 
i
;

2390 
Mem
 *
pDe°
;

2391 
Mem
 
sMem
;

2392 c⁄° 
u8
 *
zD©a
;

2393 c⁄° 
u8
 *
zHdr
;

2394 c⁄° 
u8
 *
zEndHdr
;

2395 
u32
 
off£t
;

2396 
u64
 
off£t64
;

2397 
u32
 
avaû
;

2398 
u32
 
t
;

2399 
Mem
 *
pReg
;

2401 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

2402 
p2
 = 
pOp
->p2;

2405 
rc
 = 
	`sqlôe3VdbeCurs‹Movëo
(&
pC
, &
p2
);

2407 
	`as£π
–
pOp
->
p3
>0 &&ÖOp->p3<=(
p
->
nMem
+1 -Ö->
nCurs‹
) );

2408 
pDe°
 = &
aMem
[
pOp
->
p3
];

2409 
	`memAboutToCh™ge
(
p
, 
pDe°
);

2410 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

2411 
	`as£π
–
pC
!=0 );

2412 
	`as£π
–
p2
<
pC
->
nFõld
 );

2413 
aOff£t
 = 
pC
->aOffset;

2414 
	`as£π
–
pC
->
eCurTy≥
!=
CURTYPE_VTAB
 );

2415 
	`as£π
–
pC
->
eCurTy≥
!=
CURTYPE_PSEUDO
 ||ÖC->
nuŒRow
 );

2416 
	`as£π
–
pC
->
eCurTy≥
!=
CURTYPE_SORTER
 );

2417 
pCr§
 = 
pC
->
uc
.
pCurs‹
;

2419 if–
rc
 ) 
ab‹t_due_to_îr‹
;

2420 if–
pC
->
ˇcheSètus
!=
p
->
ˇcheCå
 ){

2421 if–
pC
->
nuŒRow
 ){

2422 if–
pC
->
eCurTy≥
==
CURTYPE_PSEUDO
 ){

2423 
	`as£π
–
pC
->
uc
.
p£udoTabÀReg
>0 );

2424 
pReg
 = &
aMem
[
pC
->
uc
.
p£udoTabÀReg
];

2425 
	`as£π
–
pReg
->
Êags
 & 
MEM_Blob
 );

2426 
	`as£π
–
	`memIsVÆid
(
pReg
) );

2427 
pC
->
∑ylﬂdSize
 =ÖC->
szRow
 = 
avaû
 = 
pReg
->
n
;

2428 
pC
->
aRow
 = (
u8
*)
pReg
->
z
;

2430 
	`sqlôe3VdbeMemSëNuŒ
(
pDe°
);

2431 
›_cﬁumn_out
;

2434 
	`as£π
–
pC
->
eCurTy≥
==
CURTYPE_BTREE
 );

2435 
	`as£π
–
pCr§
 );

2436 if–
pC
->
isTabÀ
==0 ){

2437 
	`as£π
–
	`sqlôe3BåìCurs‹IsVÆid
(
pCr§
) );

2438 
	`VVA_ONLY
(
rc
 =Ë
	`sqlôe3BåìKeySize
(
pCr§
, &
∑ylﬂdSize64
);

2439 
	`as£π
–
rc
==
SQLITE_OK
 );

2443 
	`as£π
–(
∑ylﬂdSize64
 & 
SQLITE_MAX_U32
)==(
u64
)payloadSize64 );

2444 
pC
->
aRow
 = 
	`sqlôe3BåìKeyFëch
(
pCr§
, &
avaû
);

2445 
pC
->
∑ylﬂdSize
 = (
u32
)
∑ylﬂdSize64
;

2447 
	`as£π
–
	`sqlôe3BåìCurs‹IsVÆid
(
pCr§
) );

2448 
	`VVA_ONLY
(
rc
 =Ë
	`sqlôe3BåìD©aSize
(
pCr§
, &
pC
->
∑ylﬂdSize
);

2449 
	`as£π
–
rc
==
SQLITE_OK
 );

2450 
pC
->
aRow
 = 
	`sqlôe3BåìD©aFëch
(
pCr§
, &
avaû
);

2452 
	`as£π
–
avaû
<=65536 );

2453 if–
pC
->
∑ylﬂdSize
 <(
u32
)
avaû
 ){

2454 
pC
->
szRow
 =ÖC->
∑ylﬂdSize
;

2455 }if–
pC
->
∑ylﬂdSize
 > (
u32
)
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
] ){

2456 
too_big
;

2458 
pC
->
szRow
 = 
avaû
;

2461 
pC
->
ˇcheSètus
 = 
p
->
ˇcheCå
;

2462 
pC
->
iHdrOff£t
 = 
	`gëV¨öt32
’C->
aRow
, 
off£t
);

2463 
pC
->
nHdrP¨£d
 = 0;

2464 
aOff£t
[0] = 
off£t
;

2467 if–
avaû
<
off£t
 ){

2472 
pC
->
aRow
 = 0;

2473 
pC
->
szRow
 = 0;

2484 if–
off£t
 > 98307 || off£à> 
pC
->
∑ylﬂdSize
 ){

2485 
rc
 = 
SQLITE_CORRUPT_BKPT
;

2486 
ab‹t_due_to_îr‹
;

2494 
	`as£π
–
pC
->
nHdrP¨£d
<=
p2
 );

2495 
›_cﬁumn_ªad_hódî
;

2501 if–
pC
->
nHdrP¨£d
<=
p2
 ){

2505 
›_cﬁumn_ªad_hódî
:

2506 if–
pC
->
iHdrOff£t
<
aOff£t
[0] ){

2508 if–
pC
->
aRow
==0 ){

2509 
	`mem£t
(&
sMem
, 0, (sMem));

2510 
rc
 = 
	`sqlôe3VdbeMemFromBåì
(
pCr§
, 0, 
aOff£t
[0], !
pC
->
isTabÀ
, &
sMem
);

2511 if–
rc
!=
SQLITE_OK
 ) 
ab‹t_due_to_îr‹
;

2512 
zD©a
 = (
u8
*)
sMem
.
z
;

2514 
zD©a
 = 
pC
->
aRow
;

2518 
i
 = 
pC
->
nHdrP¨£d
;

2519 
off£t64
 = 
aOff£t
[
i
];

2520 
zHdr
 = 
zD©a
 + 
pC
->
iHdrOff£t
;

2521 
zEndHdr
 = 
zD©a
 + 
aOff£t
[0];

2522 
	`as£π
–
i
<=
p2
 && 
zHdr
<
zEndHdr
 );

2524 if–(
t
 = 
zHdr
[0])<0x80 ){

2525 
zHdr
++;

2526 
off£t64
 +
	`sqlôe3VdbeO√ByãSîülTy≥Lí
(
t
);

2528 
zHdr
 +
	`sqlôe3GëV¨öt32
(zHdr, &
t
);

2529 
off£t64
 +
	`sqlôe3VdbeSîülTy≥Lí
(
t
);

2531 
pC
->
aTy≥
[
i
++] = 
t
;

2532 
aOff£t
[
i
] = (
u32
)(
off£t64
 & 0xffffffff);

2533 } 
i
<=
p2
 && 
zHdr
<
zEndHdr
 );

2534 
pC
->
nHdrP¨£d
 = 
i
;

2535 
pC
->
iHdrOff£t
 = (
u32
)(
zHdr
 - 
zD©a
);

2542 if–(
zHdr
>=
zEndHdr
 && (zHdr>zEndHd∏|| 
off£t64
!=
pC
->
∑ylﬂdSize
))

2543 || (
off£t64
 > 
pC
->
∑ylﬂdSize
)

2545 if–
pC
->
aRow
==0 ) 
	`sqlôe3VdbeMemRñó£
(&
sMem
);

2546 
rc
 = 
SQLITE_CORRUPT_BKPT
;

2547 
ab‹t_due_to_îr‹
;

2549 if–
pC
->
aRow
==0 ) 
	`sqlôe3VdbeMemRñó£
(&
sMem
);

2552 
t
 = 0;

2559 if–
pC
->
nHdrP¨£d
<=
p2
 ){

2560 if–
pOp
->
p4ty≥
==
P4_MEM
 ){

2561 
	`sqlôe3VdbeMemShÆlowC›y
(
pDe°
, 
pOp
->
p4
.
pMem
, 
MEM_Sètic
);

2563 
	`sqlôe3VdbeMemSëNuŒ
(
pDe°
);

2565 
›_cﬁumn_out
;

2568 
t
 = 
pC
->
aTy≥
[
p2
];

2575 
	`as£π
–
p2
<
pC
->
nHdrP¨£d
 );

2576 
	`as£π
–
rc
==
SQLITE_OK
 );

2577 
	`as£π
–
	`sqlôe3VdbeCheckMemInv¨ü¡s
(
pDe°
) );

2578 if–
	`VdbeMemDy«mic
(
pDe°
ËË
	`sqlôe3VdbeMemSëNuŒ
(pDest);

2579 
	`as£π
–
t
==
pC
->
aTy≥
[
p2
] );

2580 
pDe°
->
íc
 = 
ícodög
;

2581 if–
pC
->
szRow
>=
aOff£t
[
p2
+1] ){

2584 
zD©a
 = 
pC
->
aRow
 + 
aOff£t
[
p2
];

2585 if–
t
<12 ){

2586 
	`sqlôe3VdbeSîülGë
(
zD©a
, 
t
, 
pDe°
);

2592 c⁄° 
u16
 
aFœg
[] = { 
MEM_Blob
, 
MEM_Så
|
MEM_Tîm
 };

2593 
pDe°
->
n
 = 
Àn
 = (
t
-12)/2;

2594 if–
pDe°
->
szMÆloc
 < 
Àn
+2 ){

2595 
pDe°
->
Êags
 = 
MEM_NuŒ
;

2596 if–
	`sqlôe3VdbeMemGrow
(
pDe°
, 
Àn
+2, 0ËË
no_mem
;

2598 
pDe°
->
z
 =ÖDe°->
zMÆloc
;

2600 
	`mem˝y
(
pDe°
->
z
, 
zD©a
, 
Àn
);

2601 
pDe°
->
z
[
Àn
] = 0;

2602 
pDe°
->
z
[
Àn
+1] = 0;

2603 
pDe°
->
Êags
 = 
aFœg
[
t
&1];

2607 if–((
pOp
->
p5
 & (
OPFLAG_LENGTHARG
|
OPFLAG_TYPEOFARG
))!=0

2608 && ((
t
>=12 && (t&1)==0Ë|| (
pOp
->
p5
 & 
OPFLAG_TYPEOFARG
)!=0))

2609 || (
Àn
 = 
	`sqlôe3VdbeSîülTy≥Lí
(
t
))==0

2617 
u8
 
aZîo
[8];

2618 
	`sqlôe3VdbeSîülGë
(
aZîo
, 
t
, 
pDe°
);

2620 
rc
 = 
	`sqlôe3VdbeMemFromBåì
(
pCr§
, 
aOff£t
[
p2
], 
Àn
, !
pC
->
isTabÀ
,

2621 
pDe°
);

2622 if–
rc
!=
SQLITE_OK
 ) 
ab‹t_due_to_îr‹
;

2623 
	`sqlôe3VdbeSîülGë
((c⁄° 
u8
*)
pDe°
->
z
, 
t
,ÖDest);

2624 
pDe°
->
Êags
 &~
MEM_Ephem
;

2628 
›_cﬁumn_out
:

2629 
	`UPDATE_MAX_BLOBSIZE
(
pDe°
);

2630 
	`REGISTER_TRACE
(
pOp
->
p3
, 
pDe°
);

2643 
OP_Afföôy
: {

2644 c⁄° *
zAfföôy
;

2645 
cAff
;

2647 
zAfföôy
 = 
pOp
->
p4
.
z
;

2648 
	`as£π
–
zAfföôy
!=0 );

2649 
	`as£π
–
zAfföôy
[
pOp
->
p2
]==0 );

2650 
pIn1
 = &
aMem
[
pOp
->
p1
];

2651  (
cAff
 = *(
zAfföôy
++))!=0 ){

2652 
	`as£π
–
pIn1
 <&
p
->
aMem
[’->
nMem
+1 -Ö->
nCurs‹
)] );

2653 
	`as£π
–
	`memIsVÆid
(
pIn1
) );

2654 
	`≠∂yAfföôy
(
pIn1
, 
cAff
, 
ícodög
);

2655 
pIn1
++;

2676 
OP_MakeRec‹d
: {

2677 
u8
 *
zNewRec‹d
;

2678 
Mem
 *
pRec
;

2679 
u64
 
nD©a
;

2680 
nHdr
;

2681 
i64
 
nByã
;

2682 
i64
 
nZîo
;

2683 
nV¨öt
;

2684 
u32
 
£rül_ty≥
;

2685 
Mem
 *
pD©a0
;

2686 
Mem
 *
pLa°
;

2687 
nFõld
;

2688 *
zAfföôy
;

2689 
fûe_f‹m©
;

2690 
i
;

2691 
j
;

2692 
u32
 
Àn
;

2709 
nD©a
 = 0;

2710 
nHdr
 = 0;

2711 
nZîo
 = 0;

2712 
nFõld
 = 
pOp
->
p1
;

2713 
zAfföôy
 = 
pOp
->
p4
.
z
;

2714 
	`as£π
–
nFõld
>0 && 
pOp
->
p2
>0 &&ÖOp->p2+nFõld<=(
p
->
nMem
+1 -Ö->
nCurs‹
)+1 );

2715 
pD©a0
 = &
aMem
[
nFõld
];

2716 
nFõld
 = 
pOp
->
p2
;

2717 
pLa°
 = &
pD©a0
[
nFõld
-1];

2718 
fûe_f‹m©
 = 
p
->
möWrôeFûeF‹m©
;

2721 
	`as£π
–
pOp
->
p3
<pOp->
p1
 ||ÖOp->p3>ıOp->p1+pOp->
p2
 );

2722 
pOut
 = &
aMem
[
pOp
->
p3
];

2723 
	`memAboutToCh™ge
(
p
, 
pOut
);

2727 
	`as£π
–
pD©a0
<=
pLa°
 );

2728 if–
zAfföôy
 ){

2729 
pRec
 = 
pD©a0
;

2731 
	`≠∂yAfföôy
(
pRec
++, *(
zAfföôy
++), 
ícodög
);

2732 
	`as£π
–
zAfföôy
[0]==0 || 
pRec
<=
pLa°
 );

2733 } 
zAfföôy
[0] );

2739 
pRec
 = 
pLa°
;

2741 
	`as£π
–
	`memIsVÆid
(
pRec
) );

2742 
pRec
->
uTemp
 = 
£rül_ty≥
 = 
	`sqlôe3VdbeSîülTy≥
’Rec, 
fûe_f‹m©
, &
Àn
);

2743 if–
pRec
->
Êags
 & 
MEM_Zîo
 ){

2744 if–
nD©a
 ){

2745 if–
	`sqlôe3VdbeMemEx∑ndBlob
(
pRec
ËË
no_mem
;

2747 
nZîo
 +
pRec
->
u
.nZero;

2748 
Àn
 -
pRec
->
u
.
nZîo
;

2751 
nD©a
 +
Àn
;

2752 
	`ã°ˇ£
–
£rül_ty≥
==127 );

2753 
	`ã°ˇ£
–
£rül_ty≥
==128 );

2754 
nHdr
 +
£rül_ty≥
<=127 ? 1 : 
	`sqlôe3V¨ötLí
(serial_type);

2755 if–
pRec
==
pD©a0
 ) ;

2756 
pRec
--;

2763 
	`ã°ˇ£
–
nHdr
==126 );

2764 
	`ã°ˇ£
–
nHdr
==127 );

2765 if–
nHdr
<=126 ){

2767 
nHdr
 += 1;

2770 
nV¨öt
 = 
	`sqlôe3V¨ötLí
(
nHdr
);

2771 
nHdr
 +
nV¨öt
;

2772 if–
nV¨öt
<
	`sqlôe3V¨ötLí
(
nHdr
) )ÇHdr++;

2774 
nByã
 = 
nHdr
+
nD©a
;

2775 if–
nByã
+
nZîo
>
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
] ){

2776 
too_big
;

2784 if–
	`sqlôe3VdbeMemCÀ¨AndResize
(
pOut
, ()
nByã
) ){

2785 
no_mem
;

2787 
zNewRec‹d
 = (
u8
 *)
pOut
->
z
;

2790 
i
 = 
	`putV¨öt32
(
zNewRec‹d
, 
nHdr
);

2791 
j
 = 
nHdr
;

2792 
	`as£π
–
pD©a0
<=
pLa°
 );

2793 
pRec
 = 
pD©a0
;

2795 
£rül_ty≥
 = 
pRec
->
uTemp
;

2798 
i
 +
	`putV¨öt32
(&
zNewRec‹d
[i], 
£rül_ty≥
);

2801 
j
 +
	`sqlôe3VdbeSîülPut
(&
zNewRec‹d
[j], 
pRec
, 
£rül_ty≥
);

2802 } (++
pRec
)<=
pLa°
 );

2803 
	`as£π
–
i
==
nHdr
 );

2804 
	`as£π
–
j
==
nByã
 );

2806 
	`as£π
–
pOp
->
p3
>0 &&ÖOp->p3<=(
p
->
nMem
+1 -Ö->
nCurs‹
) );

2807 
pOut
->
n
 = ()
nByã
;

2808 
pOut
->
Êags
 = 
MEM_Blob
;

2809 if–
nZîo
 ){

2810 
pOut
->
u
.
nZîo
 =ÇZero;

2811 
pOut
->
Êags
 |
MEM_Zîo
;

2813 
pOut
->
íc
 = 
SQLITE_UTF8
;

2814 
	`REGISTER_TRACE
(
pOp
->
p3
, 
pOut
);

2815 
	`UPDATE_MAX_BLOBSIZE
(
pOut
);

2825 #i‚de‡
SQLITE_OMIT_BTREECOUNT


2826 
OP_Cou¡
: {

2827 
i64
 
nE¡ry
;

2828 
BtCurs‹
 *
pCr§
;

2830 
	`as£π
–
p
->
≠C§
[
pOp
->
p1
]->
eCurTy≥
==
CURTYPE_BTREE
 );

2831 
pCr§
 = 
p
->
≠C§
[
pOp
->
p1
]->
uc
.
pCurs‹
;

2832 
	`as£π
–
pCr§
 );

2833 
nE¡ry
 = 0;

2834 
rc
 = 
	`sqlôe3BåìCou¡
(
pCr§
, &
nE¡ry
);

2835 if–
rc
 ) 
ab‹t_due_to_îr‹
;

2836 
pOut
 = 
	`out2PªªÀa£
(
p
, 
pOp
);

2837 
pOut
->
u
.
i
 = 
nE¡ry
;

2848 
OP_Savïoöt
: {

2849 
p1
;

2850 *
zName
;

2851 
nName
;

2852 
Savïoöt
 *
pNew
;

2853 
Savïoöt
 *
pSavïoöt
;

2854 
Savïoöt
 *
pTmp
;

2855 
iSavïoöt
;

2856 
ii
;

2858 
p1
 = 
pOp
->p1;

2859 
zName
 = 
pOp
->
p4
.
z
;

2864 
	`as£π
–
db
->
pSavïoöt
==0 || db->
autoCommô
==0 );

2865 
	`as£π
–
p1
==
SAVEPOINT_BEGIN
||p1==
SAVEPOINT_RELEASE
||p1==
SAVEPOINT_ROLLBACK
 );

2866 
	`as£π
–
db
->
pSavïoöt
 || db->
isTønß˘i⁄Savïoöt
==0 );

2867 
	`as£π
–
	`checkSavïoötCou¡
(
db
) );

2868 
	`as£π
–
p
->
bIsRódî
 );

2870 if–
p1
==
SAVEPOINT_BEGIN
 ){

2871 if–
db
->
nVdbeWrôe
>0 ){

2875 
	`sqlôe3VdbeEº‹
(
p
, "cannot open savepoint - SQL statements inÖrogress");

2876 
rc
 = 
SQLITE_BUSY
;

2878 
nName
 = 
	`sqlôe3SåÀn30
(
zName
);

2880 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


2885 
	`as£π
–
db
->
autoCommô
==0 || db->
nVTøns
==0 );

2886 
rc
 = 
	`sqlôe3VèbSavïoöt
(
db
, 
SAVEPOINT_BEGIN
,

2887 
db
->
nSèãmít
+db->
nSavïoöt
);

2888 if–
rc
!=
SQLITE_OK
 ) 
ab‹t_due_to_îr‹
;

2892 
pNew
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, (
Savïoöt
)+
nName
+1);

2893 if–
pNew
 ){

2894 
pNew
->
zName
 = (*)&pNew[1];

2895 
	`mem˝y
(
pNew
->
zName
, zName, 
nName
+1);

2899 if–
db
->
autoCommô
 ){

2900 
db
->
autoCommô
 = 0;

2901 
db
->
isTønß˘i⁄Savïoöt
 = 1;

2903 
db
->
nSavïoöt
++;

2907 
pNew
->
pNext
 = 
db
->
pSavïoöt
;

2908 
db
->
pSavïoöt
 = 
pNew
;

2909 
pNew
->
nDe„ºedC⁄s
 = 
db
->nDeferredCons;

2910 
pNew
->
nDe„ºedImmC⁄s
 = 
db
->nDeferredImmCons;

2914 
iSavïoöt
 = 0;

2919 
pSavïoöt
 = 
db
->pSavepoint;

2920 
pSavïoöt
 && 
	`sqlôe3SåICmp
’Savïoöt->
zName
, zName);

2921 
pSavïoöt
 =ÖSavïoöt->
pNext


2923 
iSavïoöt
++;

2925 if–!
pSavïoöt
 ){

2926 
	`sqlôe3VdbeEº‹
(
p
, "nÿsuch savïoöt: %s", 
zName
);

2927 
rc
 = 
SQLITE_ERROR
;

2928 }if–
db
->
nVdbeWrôe
>0 && 
p1
==
SAVEPOINT_RELEASE
 ){

2932 
	`sqlôe3VdbeEº‹
(
p
, "cannotÑelease savepoint - "

2934 
rc
 = 
SQLITE_BUSY
;

2941 
isTønß˘i⁄
 = 
pSavïoöt
->
pNext
==0 && 
db
->
isTønß˘i⁄Savïoöt
;

2942 if–
isTønß˘i⁄
 && 
p1
==
SAVEPOINT_RELEASE
 ){

2943 if–(
rc
 = 
	`sqlôe3VdbeCheckFk
(
p
, 1))!=
SQLITE_OK
 ){

2944 
vdbe_ªtu∫
;

2946 
db
->
autoCommô
 = 1;

2947 if–
	`sqlôe3VdbeHÆt
(
p
)==
SQLITE_BUSY
 ){

2948 
p
->
pc
 = ()(
pOp
 - 
aOp
);

2949 
db
->
autoCommô
 = 0;

2950 
p
->
rc
 =Ñ¯
SQLITE_BUSY
;

2951 
vdbe_ªtu∫
;

2953 
db
->
isTønß˘i⁄Savïoöt
 = 0;

2954 
rc
 = 
p
->rc;

2956 
isSchemaCh™ge
;

2957 
iSavïoöt
 = 
db
->
nSavïoöt
 - iSavepoint - 1;

2958 if–
p1
==
SAVEPOINT_ROLLBACK
 ){

2959 
isSchemaCh™ge
 = (
db
->
Êags
 & 
SQLITE_I¡înCh™ges
)!=0;

2960 
ii
=0; ii<
db
->
nDb
; ii++){

2961 
rc
 = 
	`sqlôe3BåìTrùAŒCurs‹s
(
db
->
aDb
[
ii
].
pBt
,

2962 
SQLITE_ABORT_ROLLBACK
,

2963 
isSchemaCh™ge
==0);

2964 if–
rc
!=
SQLITE_OK
 ) 
ab‹t_due_to_îr‹
;

2967 
isSchemaCh™ge
 = 0;

2969 
ii
=0; ii<
db
->
nDb
; ii++){

2970 
rc
 = 
	`sqlôe3BåìSavïoöt
(
db
->
aDb
[
ii
].
pBt
, 
p1
, 
iSavïoöt
);

2971 if–
rc
!=
SQLITE_OK
 ){

2972 
ab‹t_due_to_îr‹
;

2975 if–
isSchemaCh™ge
 ){

2976 
	`sqlôe3ExpúePª∑ªdSèãmíts
(
db
);

2977 
	`sqlôe3Re£tAŒSchemasOfC⁄√˘i⁄
(
db
);

2978 
db
->
Êags
 = (db->Êag†| 
SQLITE_I¡înCh™ges
);

2984  
db
->
pSavïoöt
!=pSavepoint ){

2985 
pTmp
 = 
db
->
pSavïoöt
;

2986 
db
->
pSavïoöt
 = 
pTmp
->
pNext
;

2987 
	`sqlôe3DbFªe
(
db
, 
pTmp
);

2988 
db
->
nSavïoöt
--;

2995 if–
p1
==
SAVEPOINT_RELEASE
 ){

2996 
	`as£π
–
pSavïoöt
==
db
->pSavepoint );

2997 
db
->
pSavïoöt
 =ÖSavïoöt->
pNext
;

2998 
	`sqlôe3DbFªe
(
db
, 
pSavïoöt
);

2999 if–!
isTønß˘i⁄
 ){

3000 
db
->
nSavïoöt
--;

3003 
db
->
nDe„ºedC⁄s
 = 
pSavïoöt
->nDeferredCons;

3004 
db
->
nDe„ºedImmC⁄s
 = 
pSavïoöt
->nDeferredImmCons;

3007 if–!
isTønß˘i⁄
 || 
p1
==
SAVEPOINT_ROLLBACK
 ){

3008 
rc
 = 
	`sqlôe3VèbSavïoöt
(
db
, 
p1
, 
iSavïoöt
);

3009 if–
rc
!=
SQLITE_OK
 ) 
ab‹t_due_to_îr‹
;

3013 if–
rc
 ) 
ab‹t_due_to_îr‹
;

3027 
OP_AutoCommô
: {

3028 
desúedAutoCommô
;

3029 
iRﬁlback
;

3031 
desúedAutoCommô
 = 
pOp
->
p1
;

3032 
iRﬁlback
 = 
pOp
->
p2
;

3033 
	`as£π
–
desúedAutoCommô
==1 || desiredAutoCommit==0 );

3034 
	`as£π
–
desúedAutoCommô
==1 || 
iRﬁlback
==0 );

3035 
	`as£π
–
db
->
nVdbeA˘ive
>0 );

3036 
	`as£π
–
p
->
bIsRódî
 );

3038 if–
desúedAutoCommô
!=
db
->
autoCommô
 ){

3039 if–
iRﬁlback
 ){

3040 
	`as£π
–
desúedAutoCommô
==1 );

3041 
	`sqlôe3RﬁlbackAŒ
(
db
, 
SQLITE_ABORT_ROLLBACK
);

3042 
db
->
autoCommô
 = 1;

3043 }if–
desúedAutoCommô
 && 
db
->
nVdbeWrôe
>0 ){

3047 
	`sqlôe3VdbeEº‹
(
p
, "cannot commitÅransaction - "

3049 
rc
 = 
SQLITE_BUSY
;

3050 
ab‹t_due_to_îr‹
;

3051 }if–(
rc
 = 
	`sqlôe3VdbeCheckFk
(
p
, 1))!=
SQLITE_OK
 ){

3052 
vdbe_ªtu∫
;

3054 
db
->
autoCommô
 = (
u8
)
desúedAutoCommô
;

3056 if–
	`sqlôe3VdbeHÆt
(
p
)==
SQLITE_BUSY
 ){

3057 
p
->
pc
 = ()(
pOp
 - 
aOp
);

3058 
db
->
autoCommô
 = (
u8
)(1-
desúedAutoCommô
);

3059 
p
->
rc
 =Ñ¯
SQLITE_BUSY
;

3060 
vdbe_ªtu∫
;

3062 
	`as£π
–
db
->
nSèãmít
==0 );

3063 
	`sqlôe3Clo£Savïoöts
(
db
);

3064 if–
p
->
rc
==
SQLITE_OK
 ){

3065 
rc
 = 
SQLITE_DONE
;

3067 
rc
 = 
SQLITE_ERROR
;

3069 
vdbe_ªtu∫
;

3071 
	`sqlôe3VdbeEº‹
(
p
,

3072 (!
desúedAutoCommô
)?"cannot startáÅransaction withináÅransaction":(

3073 (
iRﬁlback
)?"cannotÑollback -ÇoÅransaction isáctive":

3076 
rc
 = 
SQLITE_ERROR
;

3077 
ab‹t_due_to_îr‹
;

3116 
OP_Tønß˘i⁄
: {

3117 
Båì
 *
pBt
;

3118 
iMëa
;

3119 
iGí
;

3121 
	`as£π
–
p
->
bIsRódî
 );

3122 
	`as£π
–
p
->
ªadO∆y
==0 || 
pOp
->
p2
==0 );

3123 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
db
->
nDb
 );

3124 
	`as£π
–
	`DbMaskTe°
(
p
->
båìMask
, 
pOp
->
p1
) );

3125 if–
pOp
->
p2
 && (
db
->
Êags
 & 
SQLITE_QuîyO∆y
)!=0 ){

3126 
rc
 = 
SQLITE_READONLY
;

3127 
ab‹t_due_to_îr‹
;

3129 
pBt
 = 
db
->
aDb
[
pOp
->
p1
].pBt;

3131 if–
pBt
 ){

3132 
rc
 = 
	`sqlôe3BåìBegöTøns
(
pBt
, 
pOp
->
p2
);

3133 
	`ã°ˇ£
–
rc
==
SQLITE_BUSY_SNAPSHOT
 );

3134 
	`ã°ˇ£
–
rc
==
SQLITE_BUSY_RECOVERY
 );

3135 if–(
rc
&0xff)==
SQLITE_BUSY
 ){

3136 
p
->
pc
 = ()(
pOp
 - 
aOp
);

3137 
p
->
rc
 =Ñc;

3138 
vdbe_ªtu∫
;

3140 if–
rc
!=
SQLITE_OK
 ){

3141 
ab‹t_due_to_îr‹
;

3144 if–
pOp
->
p2
 && 
p
->
u£sStmtJou∫Æ


3145 && (
db
->
autoCommô
==0 || db->
nVdbeRód
>1)

3147 
	`as£π
–
	`sqlôe3BåìIsInTøns
(
pBt
) );

3148 if–
p
->
iSèãmít
==0 ){

3149 
	`as£π
–
db
->
nSèãmít
>=0 && db->
nSavïoöt
>=0 );

3150 
db
->
nSèãmít
++;

3151 
p
->
iSèãmít
 = 
db
->
nSavïoöt
 + db->
nSèãmít
;

3154 
rc
 = 
	`sqlôe3VèbSavïoöt
(
db
, 
SAVEPOINT_BEGIN
, 
p
->
iSèãmít
-1);

3155 if–
rc
==
SQLITE_OK
 ){

3156 
rc
 = 
	`sqlôe3BåìBegöStmt
(
pBt
, 
p
->
iSèãmít
);

3162 
p
->
nStmtDefC⁄s
 = 
db
->
nDe„ºedC⁄s
;

3163 
p
->
nStmtDefImmC⁄s
 = 
db
->
nDe„ºedImmC⁄s
;

3172 
	`sqlôe3BåìGëMëa
(
pBt
, 
BTREE_SCHEMA_VERSION
, (
u32
 *)&
iMëa
);

3173 
iGí
 = 
db
->
aDb
[
pOp
->
p1
].
pSchema
->
iGíî©i⁄
;

3175 
iGí
 = 
iMëa
 = 0;

3177 
	`as£π
–
pOp
->
p5
==0 ||ÖOp->
p4ty≥
==
P4_INT32
 );

3178 if–
pOp
->
p5
 && (
iMëa
!ıOp->
p3
 || 
iGí
!ıOp->
p4
.
i
) ){

3179 
	`sqlôe3DbFªe
(
db
, 
p
->
zEºMsg
);

3180 
p
->
zEºMsg
 = 
	`sqlôe3DbSåDup
(
db
, "database schema has changed");

3194 if–
db
->
aDb
[
pOp
->
p1
].
pSchema
->
schema_cookõ
!=
iMëa
 ){

3195 
	`sqlôe3Re£tO√Schema
(
db
, 
pOp
->
p1
);

3197 
p
->
expúed
 = 1;

3198 
rc
 = 
SQLITE_SCHEMA
;

3200 if–
rc
 ) 
ab‹t_due_to_îr‹
;

3216 
OP_RódCookõ
: {

3217 
iMëa
;

3218 
iDb
;

3219 
iCookõ
;

3221 
	`as£π
–
p
->
bIsRódî
 );

3222 
iDb
 = 
pOp
->
p1
;

3223 
iCookõ
 = 
pOp
->
p3
;

3224 
	`as£π
–
pOp
->
p3
<
SQLITE_N_BTREE_META
 );

3225 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

3226 
	`as£π
–
db
->
aDb
[
iDb
].
pBt
!=0 );

3227 
	`as£π
–
	`DbMaskTe°
(
p
->
båìMask
, 
iDb
) );

3229 
	`sqlôe3BåìGëMëa
(
db
->
aDb
[
iDb
].
pBt
, 
iCookõ
, (
u32
 *)&
iMëa
);

3230 
pOut
 = 
	`out2PªªÀa£
(
p
, 
pOp
);

3231 
pOut
->
u
.
i
 = 
iMëa
;

3245 
OP_SëCookõ
: {

3246 
Db
 *
pDb
;

3247 
	`as£π
–
pOp
->
p2
<
SQLITE_N_BTREE_META
 );

3248 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
db
->
nDb
 );

3249 
	`as£π
–
	`DbMaskTe°
(
p
->
båìMask
, 
pOp
->
p1
) );

3250 
	`as£π
–
p
->
ªadO∆y
==0 );

3251 
pDb
 = &
db
->
aDb
[
pOp
->
p1
];

3252 
	`as£π
–
pDb
->
pBt
!=0 );

3253 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
pOp
->
p1
, 0) );

3255 
rc
 = 
	`sqlôe3BåìUpd©eMëa
(
pDb
->
pBt
, 
pOp
->
p2
,ÖOp->
p3
);

3256 if–
pOp
->
p2
==
BTREE_SCHEMA_VERSION
 ){

3258 
pDb
->
pSchema
->
schema_cookõ
 = 
pOp
->
p3
;

3259 
db
->
Êags
 |
SQLITE_I¡înCh™ges
;

3260 }if–
pOp
->
p2
==
BTREE_FILE_FORMAT
 ){

3262 
pDb
->
pSchema
->
fûe_f‹m©
 = 
pOp
->
p3
;

3264 if–
pOp
->
p1
==1 ){

3267 
	`sqlôe3ExpúePª∑ªdSèãmíts
(
db
);

3268 
p
->
expúed
 = 0;

3270 if–
rc
 ) 
ab‹t_due_to_îr‹
;

3339 
OP_Re›íIdx
: {

3340 
nFõld
;

3341 
KeyInfo
 *
pKeyInfo
;

3342 
p2
;

3343 
iDb
;

3344 
wrFœg
;

3345 
Båì
 *
pX
;

3346 
VdbeCurs‹
 *
pCur
;

3347 
Db
 *
pDb
;

3349 
	`as£π
–
pOp
->
p5
==0 ||ÖOp->p5==
OPFLAG_SEEKEQ
 );

3350 
	`as£π
–
pOp
->
p4ty≥
==
P4_KEYINFO
 );

3351 
pCur
 = 
p
->
≠C§
[
pOp
->
p1
];

3352 if–
pCur
 &&ÖCur->
pgnoRoŸ
==(
u32
)
pOp
->
p2
 ){

3353 
	`as£π
–
pCur
->
iDb
==
pOp
->
p3
 );

3354 
›í_curs‹_£t_höts
;

3358 
OP_O≥nRód
:

3359 
OP_O≥nWrôe
:

3361 
	`as£π
–
pOp
->
›code
==
OP_O≥nWrôe
 ||ÖOp->
p5
==0 ||ÖOp->p5==
OPFLAG_SEEKEQ
 );

3362 
	`as£π
–
p
->
bIsRódî
 );

3363 
	`as£π
–
pOp
->
›code
==
OP_O≥nRód
 ||ÖOp->›code==
OP_Re›íIdx


3364 || 
p
->
ªadO∆y
==0 );

3366 if–
p
->
expúed
 ){

3367 
rc
 = 
SQLITE_ABORT_ROLLBACK
;

3368 
ab‹t_due_to_îr‹
;

3371 
nFõld
 = 0;

3372 
pKeyInfo
 = 0;

3373 
p2
 = 
pOp
->p2;

3374 
iDb
 = 
pOp
->
p3
;

3375 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

3376 
	`as£π
–
	`DbMaskTe°
(
p
->
båìMask
, 
iDb
) );

3377 
pDb
 = &
db
->
aDb
[
iDb
];

3378 
pX
 = 
pDb
->
pBt
;

3379 
	`as£π
–
pX
!=0 );

3380 if–
pOp
->
›code
==
OP_O≥nWrôe
 ){

3381 
	`as£π
–
OPFLAG_FORDELETE
==
BTREE_FORDELETE
 );

3382 
wrFœg
 = 
BTREE_WRCSR
 | (
pOp
->
p5
 & 
OPFLAG_FORDELETE
);

3383 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 
iDb
, 0) );

3384 if–
pDb
->
pSchema
->
fûe_f‹m©
 < 
p
->
möWrôeFûeF‹m©
 ){

3385 
p
->
möWrôeFûeF‹m©
 = 
pDb
->
pSchema
->
fûe_f‹m©
;

3388 
wrFœg
 = 0;

3390 if–
pOp
->
p5
 & 
OPFLAG_P2ISREG
 ){

3391 
	`as£π
–
p2
>0 );

3392 
	`as£π
–
p2
<=(
p
->
nMem
+1 -Ö->
nCurs‹
) );

3393 
pIn2
 = &
aMem
[
p2
];

3394 
	`as£π
–
	`memIsVÆid
(
pIn2
) );

3395 
	`as£π
–(
pIn2
->
Êags
 & 
MEM_I¡
)!=0 );

3396 
	`sqlôe3VdbeMemI¡egîify
(
pIn2
);

3397 
p2
 = ()
pIn2
->
u
.
i
;

3402 
	`as£π
–
p2
>=2 );

3404 if–
pOp
->
p4ty≥
==
P4_KEYINFO
 ){

3405 
pKeyInfo
 = 
pOp
->
p4
.pKeyInfo;

3406 
	`as£π
–
pKeyInfo
->
íc
==
	`ENC
(
db
) );

3407 
	`as£π
–
pKeyInfo
->
db
==db );

3408 
nFõld
 = 
pKeyInfo
->nFõld+pKeyInfo->
nXFõld
;

3409 }if–
pOp
->
p4ty≥
==
P4_INT32
 ){

3410 
nFõld
 = 
pOp
->
p4
.
i
;

3412 
	`as£π
–
pOp
->
p1
>=0 );

3413 
	`as£π
–
nFõld
>=0 );

3414 
	`ã°ˇ£
–
nFõld
==0 );

3415 
pCur
 = 
	`ÆloˇãCurs‹
(
p
, 
pOp
->
p1
, 
nFõld
, 
iDb
, 
CURTYPE_BTREE
);

3416 if–
pCur
==0 ) 
no_mem
;

3417 
pCur
->
nuŒRow
 = 1;

3418 
pCur
->
isOrdîed
 = 1;

3419 
pCur
->
pgnoRoŸ
 = 
p2
;

3420 #ifde‡
SQLITE_DEBUG


3421 
pCur
->
wrFœg
 = wrFlag;

3423 
rc
 = 
	`sqlôe3BåìCurs‹
(
pX
, 
p2
, 
wrFœg
, 
pKeyInfo
, 
pCur
->
uc
.
pCurs‹
);

3424 
pCur
->
pKeyInfo
 =ÖKeyInfo;

3429 
pCur
->
isTabÀ
 = 
pOp
->
p4ty≥
!=
P4_KEYINFO
;

3431 
›í_curs‹_£t_höts
:

3432 
	`as£π
–
OPFLAG_BULKCSR
==
BTREE_BULKLOAD
 );

3433 
	`as£π
–
OPFLAG_SEEKEQ
==
BTREE_SEEK_EQ
 );

3434 
	`ã°ˇ£
–
pOp
->
p5
 & 
OPFLAG_BULKCSR
 );

3435 #ifde‡
SQLITE_ENABLE_CURSOR_HINTS


3436 
	`ã°ˇ£
–
pOp
->
p2
 & 
OPFLAG_SEEKEQ
 );

3438 
	`sqlôe3BåìCurs‹HötFœgs
(
pCur
->
uc
.
pCurs‹
,

3439 (
pOp
->
p5
 & (
OPFLAG_BULKCSR
|
OPFLAG_SEEKEQ
)));

3440 if–
rc
 ) 
ab‹t_due_to_îr‹
;

3470 
OP_O≥nAutoödex
:

3471 
OP_O≥nEphemîÆ
: {

3472 
VdbeCurs‹
 *
pCx
;

3473 
KeyInfo
 *
pKeyInfo
;

3475 c⁄° 
vfsFœgs
 =

3476 
SQLITE_OPEN_READWRITE
 |

3477 
SQLITE_OPEN_CREATE
 |

3478 
SQLITE_OPEN_EXCLUSIVE
 |

3479 
SQLITE_OPEN_DELETEONCLOSE
 |

3480 
SQLITE_OPEN_TRANSIENT_DB
;

3481 
	`as£π
–
pOp
->
p1
>=0 );

3482 
	`as£π
–
pOp
->
p2
>=0 );

3483 
pCx
 = 
	`ÆloˇãCurs‹
(
p
, 
pOp
->
p1
,ÖOp->
p2
, -1, 
CURTYPE_BTREE
);

3484 if–
pCx
==0 ) 
no_mem
;

3485 
pCx
->
nuŒRow
 = 1;

3486 
pCx
->
isEphemîÆ
 = 1;

3487 
rc
 = 
	`sqlôe3BåìO≥n
(
db
->
pVfs
, 0, db, &
pCx
->
pBt
,

3488 
BTREE_OMIT_JOURNAL
 | 
BTREE_SINGLE
 | 
pOp
->
p5
, 
vfsFœgs
);

3489 if–
rc
==
SQLITE_OK
 ){

3490 
rc
 = 
	`sqlôe3BåìBegöTøns
(
pCx
->
pBt
, 1);

3492 if–
rc
==
SQLITE_OK
 ){

3498 if–(
pKeyInfo
 = 
pOp
->
p4
.pKeyInfo)!=0 ){

3499 
pgno
;

3500 
	`as£π
–
pOp
->
p4ty≥
==
P4_KEYINFO
 );

3501 
rc
 = 
	`sqlôe3BåìCª©eTabÀ
(
pCx
->
pBt
, &
pgno
, 
BTREE_BLOBKEY
 | 
pOp
->
p5
);

3502 if–
rc
==
SQLITE_OK
 ){

3503 
	`as£π
–
pgno
==
MASTER_ROOT
+1 );

3504 
	`as£π
–
pKeyInfo
->
db
==db );

3505 
	`as£π
–
pKeyInfo
->
íc
==
	`ENC
(
db
) );

3506 
pCx
->
pKeyInfo
 =ÖKeyInfo;

3507 
rc
 = 
	`sqlôe3BåìCurs‹
(
pCx
->
pBt
, 
pgno
, 
BTREE_WRCSR
,

3508 
pKeyInfo
, 
pCx
->
uc
.
pCurs‹
);

3510 
pCx
->
isTabÀ
 = 0;

3512 
rc
 = 
	`sqlôe3BåìCurs‹
(
pCx
->
pBt
, 
MASTER_ROOT
, 
BTREE_WRCSR
,

3513 0, 
pCx
->
uc
.
pCurs‹
);

3514 
pCx
->
isTabÀ
 = 1;

3517 if–
rc
 ) 
ab‹t_due_to_îr‹
;

3518 
pCx
->
isOrdîed
 = (
pOp
->
p5
!=
BTREE_UNORDERED
);

3532 
OP_S‹ãrO≥n
: {

3533 
VdbeCurs‹
 *
pCx
;

3535 
	`as£π
–
pOp
->
p1
>=0 );

3536 
	`as£π
–
pOp
->
p2
>=0 );

3537 
pCx
 = 
	`ÆloˇãCurs‹
(
p
, 
pOp
->
p1
,ÖOp->
p2
, -1, 
CURTYPE_SORTER
);

3538 if–
pCx
==0 ) 
no_mem
;

3539 
pCx
->
pKeyInfo
 = 
pOp
->
p4
.pKeyInfo;

3540 
	`as£π
–
pCx
->
pKeyInfo
->
db
==db );

3541 
	`as£π
–
pCx
->
pKeyInfo
->
íc
==
	`ENC
(
db
) );

3542 
rc
 = 
	`sqlôe3VdbeS‹ãrInô
(
db
, 
pOp
->
p3
, 
pCx
);

3543 if–
rc
 ) 
ab‹t_due_to_îr‹
;

3554 
OP_Sequí˚Te°
: {

3555 
VdbeCurs‹
 *
pC
;

3556 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

3557 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

3558 
	`as£π
–
	`isS‹ãr
(
pC
) );

3559 if–(
pC
->
£qCou¡
++)==0 ){

3560 
jump_to_p2
;

3581 
OP_O≥nP£udo
: {

3582 
VdbeCurs‹
 *
pCx
;

3584 
	`as£π
–
pOp
->
p1
>=0 );

3585 
	`as£π
–
pOp
->
p3
>=0 );

3586 
pCx
 = 
	`ÆloˇãCurs‹
(
p
, 
pOp
->
p1
,ÖOp->
p3
, -1, 
CURTYPE_PSEUDO
);

3587 if–
pCx
==0 ) 
no_mem
;

3588 
pCx
->
nuŒRow
 = 1;

3589 
pCx
->
uc
.
p£udoTabÀReg
 = 
pOp
->
p2
;

3590 
pCx
->
isTabÀ
 = 1;

3591 
	`as£π
–
pOp
->
p5
==0 );

3600 
OP_Clo£
: {

3601 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

3602 
	`sqlôe3VdbeFªeCurs‹
(
p
,Ö->
≠C§
[
pOp
->
p1
]);

3603 
p
->
≠C§
[
pOp
->
p1
] = 0;

3607 #ifde‡
SQLITE_ENABLE_COLUMN_USED_MASK


3618 
OP_CﬁumnsU£d
: {

3619 
VdbeCurs‹
 *
pC
;

3620 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

3621 
	`as£π
–
pC
->
eCurTy≥
==
CURTYPE_BTREE
 );

3622 
pC
->
maskU£d
 = *(
u64
*)
pOp
->
p4
.
pI64
;

3713 
OP_SìkLT
:

3714 
OP_SìkLE
:

3715 
OP_SìkGE
:

3716 
OP_SìkGT
: {

3717 
ªs
;

3718 
oc
;

3719 
VdbeCurs‹
 *
pC
;

3720 
U≈ackedRec‹d
 
r
;

3721 
nFõld
;

3722 
i64
 
iKey
;

3723 
eqO∆y
;

3725 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

3726 
	`as£π
–
pOp
->
p2
!=0 );

3727 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

3728 
	`as£π
–
pC
!=0 );

3729 
	`as£π
–
pC
->
eCurTy≥
==
CURTYPE_BTREE
 );

3730 
	`as£π
–
OP_SìkLE
 =
OP_SìkLT
+1 );

3731 
	`as£π
–
OP_SìkGE
 =
OP_SìkLT
+2 );

3732 
	`as£π
–
OP_SìkGT
 =
OP_SìkLT
+3 );

3733 
	`as£π
–
pC
->
isOrdîed
 );

3734 
	`as£π
–
pC
->
uc
.
pCurs‹
!=0 );

3735 
oc
 = 
pOp
->
›code
;

3736 
eqO∆y
 = 0;

3737 
pC
->
nuŒRow
 = 0;

3738 #ifde‡
SQLITE_DEBUG


3739 
pC
->
£ekOp
 = 
pOp
->
›code
;

3742 if–
pC
->
isTabÀ
 ){

3744 
	`as£π
–
	`sqlôe3BåìCurs‹HasHöt
(
pC
->
uc
.
pCurs‹
, 
BTREE_SEEK_EQ
)==0 );

3749 
pIn3
 = &
aMem
[
pOp
->
p3
];

3750 if–(
pIn3
->
Êags
 & (
MEM_I¡
|
MEM_Ról
|
MEM_Så
))==MEM_Str ){

3751 
	`≠∂yNumîicAfföôy
(
pIn3
, 0);

3753 
iKey
 = 
	`sqlôe3VdbeI¡VÆue
(
pIn3
);

3757 if–(
pIn3
->
Êags
 & 
MEM_I¡
)==0 ){

3758 if–(
pIn3
->
Êags
 & 
MEM_Ról
)==0 ){

3761 
	`VdbeBønchTakí
(1,2); 
jump_to_p2
;

3772 if–
pIn3
->
u
.
r
<()
iKey
 ){

3773 
	`as£π
–
OP_SìkGE
==(
OP_SìkGT
-1) );

3774 
	`as£π
–
OP_SìkLT
==(
OP_SìkLE
-1) );

3775 
	`as£π
–(
OP_SìkLE
 & 0x0001)==(
OP_SìkGT
 & 0x0001) );

3776 if–(
oc
 & 0x0001)==(
OP_SìkGT
 & 0x0001) ) oc--;

3781 if–
pIn3
->
u
.
r
>()
iKey
 ){

3782 
	`as£π
–
OP_SìkLE
==(
OP_SìkLT
+1) );

3783 
	`as£π
–
OP_SìkGT
==(
OP_SìkGE
+1) );

3784 
	`as£π
–(
OP_SìkLT
 & 0x0001)==(
OP_SìkGE
 & 0x0001) );

3785 if–(
oc
 & 0x0001)==(
OP_SìkLT
 & 0x0001) ) oc++;

3788 
rc
 = 
	`sqlôe3BåìMovëoU≈acked
(
pC
->
uc
.
pCurs‹
, 0, (
u64
)
iKey
, 0, &
ªs
);

3789 
pC
->
movëoT¨gë
 = 
iKey
;

3790 if–
rc
!=
SQLITE_OK
 ){

3791 
ab‹t_due_to_îr‹
;

3798 if–
	`sqlôe3BåìCurs‹HasHöt
(
pC
->
uc
.
pCurs‹
, 
BTREE_SEEK_EQ
) ){

3799 
eqO∆y
 = 1;

3800 
	`as£π
–
pOp
->
›code
==
OP_SìkGE
 ||ÖOp->›code==
OP_SìkLE
 );

3801 
	`as£π
–
pOp
[1].
›code
==
OP_IdxLT
 ||ÖOp[1].›code==
OP_IdxGT
 );

3802 
	`as£π
–
pOp
[1].
p1
==pOp[0].p1 );

3803 
	`as£π
–
pOp
[1].
p2
==pOp[0].p2 );

3804 
	`as£π
–
pOp
[1].
p3
==pOp[0].p3 );

3805 
	`as£π
–
pOp
[1].
p4
.
i
==pOp[0].p4.i );

3808 
nFõld
 = 
pOp
->
p4
.
i
;

3809 
	`as£π
–
pOp
->
p4ty≥
==
P4_INT32
 );

3810 
	`as£π
–
nFõld
>0 );

3811 
r
.
pKeyInfo
 = 
pC
->pKeyInfo;

3812 
r
.
nFõld
 = (
u16
)nField;

3821 
r
.
deÁu…_rc
 = ((1 & (
oc
 - 
OP_SìkLT
)) ? -1 : +1);

3822 
	`as£π
–
oc
!=
OP_SìkGT
 || 
r
.
deÁu…_rc
==-1 );

3823 
	`as£π
–
oc
!=
OP_SìkLE
 || 
r
.
deÁu…_rc
==-1 );

3824 
	`as£π
–
oc
!=
OP_SìkGE
 || 
r
.
deÁu…_rc
==+1 );

3825 
	`as£π
–
oc
!=
OP_SìkLT
 || 
r
.
deÁu…_rc
==+1 );

3827 
r
.
aMem
 = &aMem[
pOp
->
p3
];

3828 #ifde‡
SQLITE_DEBUG


3829 { 
i
; i=0; i<
r
.
nFõld
; i++Ë
	`as£π
–
	`memIsVÆid
(&r.
aMem
[i]) ); }

3831 
	`Ex∑ndBlob
(
r
.
aMem
);

3832 
r
.
eqSìn
 = 0;

3833 
rc
 = 
	`sqlôe3BåìMovëoU≈acked
(
pC
->
uc
.
pCurs‹
, &
r
, 0, 0, &
ªs
);

3834 if–
rc
!=
SQLITE_OK
 ){

3835 
ab‹t_due_to_îr‹
;

3837 if–
eqO∆y
 && 
r
.
eqSìn
==0 ){

3838 
	`as£π
–
ªs
!=0 );

3839 
£ek_nŸ_found
;

3842 
pC
->
de„ºedMovëo
 = 0;

3843 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

3844 #ifde‡
SQLITE_TEST


3845 
sqlôe3_£¨ch_cou¡
++;

3847 if–
oc
>=
OP_SìkGE
 ){ 
	`as£π
–oc==OP_SìkGE || oc==
OP_SìkGT
 );

3848 if–
ªs
<0 || (ªs==0 && 
oc
==
OP_SìkGT
) ){

3849 
ªs
 = 0;

3850 
rc
 = 
	`sqlôe3BåìNext
(
pC
->
uc
.
pCurs‹
, &
ªs
);

3851 if–
rc
!=
SQLITE_OK
 ) 
ab‹t_due_to_îr‹
;

3853 
ªs
 = 0;

3856 
	`as£π
–
oc
==
OP_SìkLT
 || oc==
OP_SìkLE
 );

3857 if–
ªs
>0 || (ªs==0 && 
oc
==
OP_SìkLT
) ){

3858 
ªs
 = 0;

3859 
rc
 = 
	`sqlôe3BåìPªvious
(
pC
->
uc
.
pCurs‹
, &
ªs
);

3860 if–
rc
!=
SQLITE_OK
 ) 
ab‹t_due_to_îr‹
;

3865 
ªs
 = 
	`sqlôe3BåìEof
(
pC
->
uc
.
pCurs‹
);

3868 
£ek_nŸ_found
:

3869 
	`as£π
–
pOp
->
p2
>0 );

3870 
	`VdbeBønchTakí
(
ªs
!=0,2);

3871 if–
ªs
 ){

3872 
jump_to_p2
;

3873 }if–
eqO∆y
 ){

3874 
	`as£π
–
pOp
[1].
›code
==
OP_IdxLT
 ||ÖOp[1].›code==
OP_IdxGT
 );

3875 
pOp
++;

3940 
OP_NoC⁄Êi˘
:

3941 
OP_NŸFound
:

3942 
OP_Found
: {

3943 
ÆªadyExi°s
;

3944 
èkeJump
;

3945 
ii
;

3946 
VdbeCurs‹
 *
pC
;

3947 
ªs
;

3948 *
pFªe
;

3949 
U≈ackedRec‹d
 *
pIdxKey
;

3950 
U≈ackedRec‹d
 
r
;

3951 
aTempRec
[
	`ROUND8
((
U≈ackedRec‹d
)Ë+ (
Mem
)*4 + 7];

3953 #ifde‡
SQLITE_TEST


3954 if–
pOp
->
›code
!=
OP_NoC⁄Êi˘
 ) 
sqlôe3_found_cou¡
++;

3957 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

3958 
	`as£π
–
pOp
->
p4ty≥
==
P4_INT32
 );

3959 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

3960 
	`as£π
–
pC
!=0 );

3961 #ifde‡
SQLITE_DEBUG


3962 
pC
->
£ekOp
 = 
pOp
->
›code
;

3964 
pIn3
 = &
aMem
[
pOp
->
p3
];

3965 
	`as£π
–
pC
->
eCurTy≥
==
CURTYPE_BTREE
 );

3966 
	`as£π
–
pC
->
uc
.
pCurs‹
!=0 );

3967 
	`as£π
–
pC
->
isTabÀ
==0 );

3968 
pFªe
 = 0;

3969 if–
pOp
->
p4
.
i
>0 ){

3970 
r
.
pKeyInfo
 = 
pC
->pKeyInfo;

3971 
r
.
nFõld
 = (
u16
)
pOp
->
p4
.
i
;

3972 
r
.
aMem
 = 
pIn3
;

3973 
ii
=0; ii<
r
.
nFõld
; ii++){

3974 
	`as£π
–
	`memIsVÆid
(&
r
.
aMem
[
ii
]) );

3975 
	`Ex∑ndBlob
(&
r
.
aMem
[
ii
]);

3976 #ifde‡
SQLITE_DEBUG


3977 if–
ii
 ) 
	`REGISTER_TRACE
(
pOp
->
p3
+ii, &
r
.
aMem
[ii]);

3980 
pIdxKey
 = &
r
;

3982 
pIdxKey
 = 
	`sqlôe3VdbeAŒocU≈ackedRec‹d
(

3983 
pC
->
pKeyInfo
, 
aTempRec
, ◊TempRec), &
pFªe


3985 if–
pIdxKey
==0 ) 
no_mem
;

3986 
	`as£π
–
pIn3
->
Êags
 & 
MEM_Blob
 );

3987 
	`Ex∑ndBlob
(
pIn3
);

3988 
	`sqlôe3VdbeRec‹dU≈ack
(
pC
->
pKeyInfo
, 
pIn3
->
n
,ÖIn3->
z
, 
pIdxKey
);

3990 
pIdxKey
->
deÁu…_rc
 = 0;

3991 
èkeJump
 = 0;

3992 if–
pOp
->
›code
==
OP_NoC⁄Êi˘
 ){

3996 
ii
=0; ii<
pIdxKey
->
nFõld
; ii++){

3997 if–
pIdxKey
->
aMem
[
ii
].
Êags
 & 
MEM_NuŒ
 ){

3998 
èkeJump
 = 1;

4003 
rc
 = 
	`sqlôe3BåìMovëoU≈acked
(
pC
->
uc
.
pCurs‹
, 
pIdxKey
, 0, 0, &
ªs
);

4004 
	`sqlôe3DbFªe
(
db
, 
pFªe
);

4005 if–
rc
!=
SQLITE_OK
 ){

4006 
ab‹t_due_to_îr‹
;

4008 
pC
->
£ekResu…
 = 
ªs
;

4009 
ÆªadyExi°s
 = (
ªs
==0);

4010 
pC
->
nuŒRow
 = 1-
ÆªadyExi°s
;

4011 
pC
->
de„ºedMovëo
 = 0;

4012 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

4013 if–
pOp
->
›code
==
OP_Found
 ){

4014 
	`VdbeBønchTakí
(
ÆªadyExi°s
!=0,2);

4015 if–
ÆªadyExi°s
 ) 
jump_to_p2
;

4017 
	`VdbeBønchTakí
(
èkeJump
||
ÆªadyExi°s
==0,2);

4018 if–
èkeJump
 || !
ÆªadyExi°s
 ) 
jump_to_p2
;

4042 
OP_NŸExi°s
: {

4043 
VdbeCurs‹
 *
pC
;

4044 
BtCurs‹
 *
pCr§
;

4045 
ªs
;

4046 
u64
 
iKey
;

4048 
pIn3
 = &
aMem
[
pOp
->
p3
];

4049 
	`as£π
–
pIn3
->
Êags
 & 
MEM_I¡
 );

4050 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

4051 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

4052 
	`as£π
–
pC
!=0 );

4053 #ifde‡
SQLITE_DEBUG


4054 
pC
->
£ekOp
 = 0;

4056 
	`as£π
–
pC
->
isTabÀ
 );

4057 
	`as£π
–
pC
->
eCurTy≥
==
CURTYPE_BTREE
 );

4058 
pCr§
 = 
pC
->
uc
.
pCurs‹
;

4059 
	`as£π
–
pCr§
!=0 );

4060 
ªs
 = 0;

4061 
iKey
 = 
pIn3
->
u
.
i
;

4062 
rc
 = 
	`sqlôe3BåìMovëoU≈acked
(
pCr§
, 0, 
iKey
, 0, &
ªs
);

4063 
	`as£π
–
rc
==
SQLITE_OK
 || 
ªs
==0 );

4064 
pC
->
movëoT¨gë
 = 
iKey
;

4065 
pC
->
nuŒRow
 = 0;

4066 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

4067 
pC
->
de„ºedMovëo
 = 0;

4068 
	`VdbeBønchTakí
(
ªs
!=0,2);

4069 
pC
->
£ekResu…
 = 
ªs
;

4070 if–
ªs
!=0 ){

4071 
	`as£π
–
rc
==
SQLITE_OK
 );

4072 if–
pOp
->
p2
==0 ){

4073 
rc
 = 
SQLITE_CORRUPT_BKPT
;

4075 
jump_to_p2
;

4078 if–
rc
 ) 
ab‹t_due_to_îr‹
;

4090 
OP_Sequí˚
: {

4091 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

4092 
	`as£π
–
p
->
≠C§
[
pOp
->
p1
]!=0 );

4093 
	`as£π
–
p
->
≠C§
[
pOp
->
p1
]->
eCurTy≥
!=
CURTYPE_VTAB
 );

4094 
pOut
 = 
	`out2PªªÀa£
(
p
, 
pOp
);

4095 
pOut
->
u
.
i
 = 
p
->
≠C§
[
pOp
->
p1
]->
£qCou¡
++;

4115 
OP_NewRowid
: {

4116 
i64
 
v
;

4117 
VdbeCurs‹
 *
pC
;

4118 
ªs
;

4119 
˙t
;

4120 
Mem
 *
pMem
;

4121 
VdbeFøme
 *
pFøme
;

4123 
v
 = 0;

4124 
ªs
 = 0;

4125 
pOut
 = 
	`out2PªªÀa£
(
p
, 
pOp
);

4126 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

4127 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

4128 
	`as£π
–
pC
!=0 );

4129 
	`as£π
–
pC
->
eCurTy≥
==
CURTYPE_BTREE
 );

4130 
	`as£π
–
pC
->
uc
.
pCurs‹
!=0 );

4145 
	`as£π
–
pC
->
isTabÀ
 );

4147 #ifde‡
SQLITE_32BIT_ROWID


4148 
	#MAX_ROWID
 0x7fffffff

	)

4154 
	#MAX_ROWID
 (
i64
)–(((
u64
)0x7fffffff)<<32Ë| (u64)0xfffffff‡)

	)

4157 if–!
pC
->
u£R™domRowid
 ){

4158 
rc
 = 
	`sqlôe3BåìLa°
(
pC
->
uc
.
pCurs‹
, &
ªs
);

4159 if–
rc
!=
SQLITE_OK
 ){

4160 
ab‹t_due_to_îr‹
;

4162 if–
ªs
 ){

4163 
v
 = 1;

4165 
	`as£π
–
	`sqlôe3BåìCurs‹IsVÆid
(
pC
->
uc
.
pCurs‹
) );

4166 
rc
 = 
	`sqlôe3BåìKeySize
(
pC
->
uc
.
pCurs‹
, &
v
);

4167 
	`as£π
–
rc
==
SQLITE_OK
 );

4168 if–
v
>=
MAX_ROWID
 ){

4169 
pC
->
u£R™domRowid
 = 1;

4171 
v
++;

4176 #i‚de‡
SQLITE_OMIT_AUTOINCREMENT


4177 if–
pOp
->
p3
 ){

4179 
	`as£π
–
pOp
->
p3
>0 );

4180 if–
p
->
pFøme
 ){

4181 
pFøme
=
p
->pFøme;ÖFøme->
pP¨ít
;ÖFrame=pFrame->pParent);

4183 
	`as£π
–
pOp
->
p3
<=
pFøme
->
nMem
 );

4184 
pMem
 = &
pFøme
->
aMem
[
pOp
->
p3
];

4187 
	`as£π
–
pOp
->
p3
<=(
p
->
nMem
+1 -Ö->
nCurs‹
) );

4188 
pMem
 = &
aMem
[
pOp
->
p3
];

4189 
	`memAboutToCh™ge
(
p
, 
pMem
);

4191 
	`as£π
–
	`memIsVÆid
(
pMem
) );

4193 
	`REGISTER_TRACE
(
pOp
->
p3
, 
pMem
);

4194 
	`sqlôe3VdbeMemI¡egîify
(
pMem
);

4195 
	`as£π
–(
pMem
->
Êags
 & 
MEM_I¡
)!=0 );

4196 if–
pMem
->
u
.
i
==
MAX_ROWID
 || 
pC
->
u£R™domRowid
 ){

4197 
rc
 = 
SQLITE_FULL
;

4198 
ab‹t_due_to_îr‹
;

4200 if–
v
<
pMem
->
u
.
i
+1 ){

4201 
v
 = 
pMem
->
u
.
i
 + 1;

4203 
pMem
->
u
.
i
 = 
v
;

4206 if–
pC
->
u£R™domRowid
 ){

4211 
	`as£π
–
pOp
->
p3
==0 );

4213 
˙t
 = 0;

4215 
	`sqlôe3_øndom√ss
((
v
), &v);

4216 
v
 &(
MAX_ROWID
>>1); v++;

4217 } ((
rc
 = 
	`sqlôe3BåìMovëoU≈acked
(
pC
->
uc
.
pCurs‹
, 0, (
u64
)
v
,

4218 0, &
ªs
))==
SQLITE_OK
)

4219 && (
ªs
==0)

4220 && (++
˙t
<100));

4221 if–
rc
 ) 
ab‹t_due_to_îr‹
;

4222 if–
ªs
==0 ){

4223 
rc
 = 
SQLITE_FULL
;

4224 
ab‹t_due_to_îr‹
;

4226 
	`as£π
–
v
>0 );

4228 
pC
->
de„ºedMovëo
 = 0;

4229 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

4231 
pOut
->
u
.
i
 = 
v
;

4281 
OP_In£π
:

4282 
OP_In£πI¡
: {

4283 
Mem
 *
pD©a
;

4284 
Mem
 *
pKey
;

4285 
i64
 
iKey
;

4286 
VdbeCurs‹
 *
pC
;

4287 
nZîo
;

4288 
£ekResu…
;

4289 c⁄° *
zDb
;

4290 
TabÀ
 *
pTab
;

4291 
›
;

4293 
›
 = 0;

4294 
pD©a
 = &
aMem
[
pOp
->
p2
];

4295 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

4296 
	`as£π
–
	`memIsVÆid
(
pD©a
) );

4297 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

4298 
	`as£π
–
pC
!=0 );

4299 
	`as£π
–
pC
->
eCurTy≥
==
CURTYPE_BTREE
 );

4300 
	`as£π
–
pC
->
uc
.
pCurs‹
!=0 );

4301 
	`as£π
–
pC
->
isTabÀ
 );

4302 
	`as£π
–
pOp
->
p4ty≥
==
P4_TABLE
 ||ÖOp->p4ty≥>=
P4_STATIC
 );

4303 
	`REGISTER_TRACE
(
pOp
->
p2
, 
pD©a
);

4305 if–
pOp
->
›code
==
OP_In£π
 ){

4306 
pKey
 = &
aMem
[
pOp
->
p3
];

4307 
	`as£π
–
pKey
->
Êags
 & 
MEM_I¡
 );

4308 
	`as£π
–
	`memIsVÆid
(
pKey
) );

4309 
	`REGISTER_TRACE
(
pOp
->
p3
, 
pKey
);

4310 
iKey
 = 
pKey
->
u
.
i
;

4312 
	`as£π
–
pOp
->
›code
==
OP_In£πI¡
 );

4313 
iKey
 = 
pOp
->
p3
;

4316 if–
pOp
->
p4ty≥
==
P4_TABLE
 && 
	`HAS_UPDATE_HOOK
(
db
) ){

4317 
	`as£π
–
pC
->
isTabÀ
 );

4318 
	`as£π
–
pC
->
iDb
>=0 );

4319 
zDb
 = 
db
->
aDb
[
pC
->
iDb
].
zName
;

4320 
pTab
 = 
pOp
->
p4
.pTab;

4321 
	`as£π
–
	`HasRowid
(
pTab
) );

4322 
›
 = ((
pOp
->
p5
 & 
OPFLAG_ISUPDATE
Ë? 
SQLITE_UPDATE
 : 
SQLITE_INSERT
);

4324 
pTab
 = 0;

4325 
zDb
 = 0;

4328 #ifde‡
SQLITE_ENABLE_PREUPDATE_HOOK


4330 if–
db
->
xPªUpd©eCÆlback


4331 && 
pOp
->
p4ty≥
==
P4_TABLE


4332 && !(
pOp
->
p5
 & 
OPFLAG_ISUPDATE
)

4334 
	`sqlôe3VdbePªUpd©eHook
(
p
, 
pC
, 
SQLITE_INSERT
, 
zDb
, 
pTab
, 
iKey
, 
pOp
->
p2
);

4338 if–
pOp
->
p5
 & 
OPFLAG_NCHANGE
 ) 
p
->
nCh™ge
++;

4339 if–
pOp
->
p5
 & 
OPFLAG_LASTROWID
 ) 
db
->
œ°Rowid
 =Üa°Rowid = 
iKey
;

4340 if–
pD©a
->
Êags
 & 
MEM_NuŒ
 ){

4341 
pD©a
->
z
 = 0;

4342 
pD©a
->
n
 = 0;

4344 
	`as£π
–
pD©a
->
Êags
 & (
MEM_Blob
|
MEM_Så
) );

4346 
£ekResu…
 = ((
pOp
->
p5
 & 
OPFLAG_USESEEKRESULT
Ë? 
pC
->seekResult : 0);

4347 if–
pD©a
->
Êags
 & 
MEM_Zîo
 ){

4348 
nZîo
 = 
pD©a
->
u
.nZero;

4350 
nZîo
 = 0;

4352 
rc
 = 
	`sqlôe3BåìIn£π
(
pC
->
uc
.
pCurs‹
, 0, 
iKey
,

4353 
pD©a
->
z
,ÖD©a->
n
, 
nZîo
,

4354 (
pOp
->
p5
 & 
OPFLAG_APPEND
)!=0, 
£ekResu…


4356 
pC
->
de„ºedMovëo
 = 0;

4357 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

4360 if–
rc
 ) 
ab‹t_due_to_îr‹
;

4361 if–
db
->
xUpd©eCÆlback
 && 
›
 ){

4362 
db
->
	`xUpd©eCÆlback
(db->
pUpd©eArg
, 
›
, 
zDb
, 
pTab
->
zName
, 
iKey
);

4402 
OP_Dñëe
: {

4403 
VdbeCurs‹
 *
pC
;

4404 c⁄° *
zDb
;

4405 
TabÀ
 *
pTab
;

4406 
›Êags
;

4408 
›Êags
 = 
pOp
->
p2
;

4409 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

4410 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

4411 
	`as£π
–
pC
!=0 );

4412 
	`as£π
–
pC
->
eCurTy≥
==
CURTYPE_BTREE
 );

4413 
	`as£π
–
pC
->
uc
.
pCurs‹
!=0 );

4414 
	`as£π
–
pC
->
de„ºedMovëo
==0 );

4416 #ifde‡
SQLITE_DEBUG


4417 if–
pOp
->
p4ty≥
==
P4_TABLE
 && 
	`HasRowid
’Op->
p4
.
pTab
Ë&&ÖOp->
p5
==0 ){

4421 
i64
 
iKey
 = 0;

4422 
	`sqlôe3BåìKeySize
(
pC
->
uc
.
pCurs‹
, &
iKey
);

4423 
	`as£π
–
pC
->
movëoT¨gë
==
iKey
 );

4432 if–
pOp
->
p4ty≥
==
P4_TABLE
 && 
	`HAS_UPDATE_HOOK
(
db
) ){

4433 
	`as£π
–
pC
->
iDb
>=0 );

4434 
	`as£π
–
pOp
->
p4
.
pTab
!=0 );

4435 
zDb
 = 
db
->
aDb
[
pC
->
iDb
].
zName
;

4436 
pTab
 = 
pOp
->
p4
.pTab;

4437 if–(
pOp
->
p5
 & 
OPFLAG_SAVEPOSITION
)!=0 && 
pC
->
isTabÀ
 ){

4438 
	`sqlôe3BåìKeySize
(
pC
->
uc
.
pCurs‹
, &pC->
movëoT¨gë
);

4441 
zDb
 = 0;

4442 
pTab
 = 0;

4445 #ifde‡
SQLITE_ENABLE_PREUPDATE_HOOK


4447 if–
db
->
xPªUpd©eCÆlback
 && 
pOp
->
p4
.
pTab
 && 
	`HasRowid
(pTab) ){

4448 
	`as£π
–!(
›Êags
 & 
OPFLAG_ISUPDATE
Ë|| (
aMem
[
pOp
->
p3
].
Êags
 & 
MEM_I¡
) );

4449 
	`sqlôe3VdbePªUpd©eHook
(
p
, 
pC
,

4450 (
›Êags
 & 
OPFLAG_ISUPDATE
Ë? 
SQLITE_UPDATE
 : 
SQLITE_DELETE
,

4451 
zDb
, 
pTab
, 
pC
->
movëoT¨gë
,

4452 
pOp
->
p3


4455 if–
›Êags
 & 
OPFLAG_ISNOOP
 ) ;

4459 
	`as£π
–(
pOp
->
p5
 & ~(
OPFLAG_SAVEPOSITION
|
OPFLAG_AUXDELETE
))==0 );

4460 
	`as£π
–
OPFLAG_SAVEPOSITION
==
BTREE_SAVEPOSITION
 );

4461 
	`as£π
–
OPFLAG_AUXDELETE
==
BTREE_AUXDELETE
 );

4463 #ifde‡
SQLITE_DEBUG


4464 if–
p
->
pFøme
==0 ){

4465 if–
pC
->
isEphemîÆ
==0

4466 && (
pOp
->
p5
 & 
OPFLAG_AUXDELETE
)==0

4467 && (
pC
->
wrFœg
 & 
OPFLAG_FORDELETE
)==0

4469 
nExåaDñëe
++;

4471 if–
pOp
->
p2
 & 
OPFLAG_NCHANGE
 ){

4472 
nExåaDñëe
--;

4477 
rc
 = 
	`sqlôe3BåìDñëe
(
pC
->
uc
.
pCurs‹
, 
pOp
->
p5
);

4478 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

4479 if–
rc
 ) 
ab‹t_due_to_îr‹
;

4482 if–
›Êags
 & 
OPFLAG_NCHANGE
 ){

4483 
p
->
nCh™ge
++;

4484 if–
db
->
xUpd©eCÆlback
 && 
	`HasRowid
(
pTab
) ){

4485 
db
->
	`xUpd©eCÆlback
(db->
pUpd©eArg
, 
SQLITE_DELETE
, 
zDb
, 
pTab
->
zName
,

4486 
pC
->
movëoT¨gë
);

4487 
	`as£π
–
pC
->
iDb
>=0 );

4500 
OP_Re£tCou¡
: {

4501 
	`sqlôe3VdbeSëCh™ges
(
db
, 
p
->
nCh™ge
);

4502 
p
->
nCh™ge
 = 0;

4521 
OP_S‹ãrCom∑ª
: {

4522 
VdbeCurs‹
 *
pC
;

4523 
ªs
;

4524 
nKeyCﬁ
;

4526 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

4527 
	`as£π
–
	`isS‹ãr
(
pC
) );

4528 
	`as£π
–
pOp
->
p4ty≥
==
P4_INT32
 );

4529 
pIn3
 = &
aMem
[
pOp
->
p3
];

4530 
nKeyCﬁ
 = 
pOp
->
p4
.
i
;

4531 
ªs
 = 0;

4532 
rc
 = 
	`sqlôe3VdbeS‹ãrCom∑ª
(
pC
, 
pIn3
, 
nKeyCﬁ
, &
ªs
);

4533 
	`VdbeBønchTakí
(
ªs
!=0,2);

4534 if–
rc
 ) 
ab‹t_due_to_îr‹
;

4535 if–
ªs
 ) 
jump_to_p2
;

4551 
OP_S‹ãrD©a
: {

4552 
VdbeCurs‹
 *
pC
;

4554 
pOut
 = &
aMem
[
pOp
->
p2
];

4555 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

4556 
	`as£π
–
	`isS‹ãr
(
pC
) );

4557 
rc
 = 
	`sqlôe3VdbeS‹ãrRowkey
(
pC
, 
pOut
);

4558 
	`as£π
–
rc
!=
SQLITE_OK
 || (
pOut
->
Êags
 & 
MEM_Blob
) );

4559 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

4560 if–
rc
 ) 
ab‹t_due_to_îr‹
;

4561 
p
->
≠C§
[
pOp
->
p3
]->
ˇcheSètus
 = 
CACHE_STALE
;

4587 
OP_RowKey
:

4588 
OP_RowD©a
: {

4589 
VdbeCurs‹
 *
pC
;

4590 
BtCurs‹
 *
pCr§
;

4591 
u32
 
n
;

4592 
i64
 
n64
;

4594 
pOut
 = &
aMem
[
pOp
->
p2
];

4595 
	`memAboutToCh™ge
(
p
, 
pOut
);

4598 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

4599 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

4600 
	`as£π
–
pC
!=0 );

4601 
	`as£π
–
pC
->
eCurTy≥
==
CURTYPE_BTREE
 );

4602 
	`as£π
–
	`isS‹ãr
(
pC
)==0 );

4603 
	`as£π
–
pC
->
isTabÀ
 || 
pOp
->
›code
!=
OP_RowD©a
 );

4604 
	`as£π
–
pC
->
isTabÀ
==0 || 
pOp
->
›code
==
OP_RowD©a
 );

4605 
	`as£π
–
pC
->
nuŒRow
==0 );

4606 
	`as£π
–
pC
->
uc
.
pCurs‹
!=0 );

4607 
pCr§
 = 
pC
->
uc
.
pCurs‹
;

4616 
	`as£π
–
pC
->
de„ºedMovëo
==0 );

4617 
	`as£π
–
	`sqlôe3BåìCurs‹IsVÆid
(
pCr§
) );

4619 
rc
 = 
	`sqlôe3VdbeCurs‹Movëo
(
pC
);

4620 if–
rc
!=
SQLITE_OK
 ) 
ab‹t_due_to_îr‹
;

4623 if–
pC
->
isTabÀ
==0 ){

4624 
	`as£π
–!
pC
->
isTabÀ
 );

4625 
	`VVA_ONLY
(
rc
 =Ë
	`sqlôe3BåìKeySize
(
pCr§
, &
n64
);

4626 
	`as£π
–
rc
==
SQLITE_OK
 );

4627 if–
n64
>
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
] ){

4628 
too_big
;

4630 
n
 = (
u32
)
n64
;

4632 
	`VVA_ONLY
(
rc
 =Ë
	`sqlôe3BåìD©aSize
(
pCr§
, &
n
);

4633 
	`as£π
–
rc
==
SQLITE_OK
 );

4634 if–
n
>(
u32
)
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
] ){

4635 
too_big
;

4638 
	`ã°ˇ£
–
n
==0 );

4639 if–
	`sqlôe3VdbeMemCÀ¨AndResize
(
pOut
, 
	`MAX
(
n
,32)) ){

4640 
no_mem
;

4642 
pOut
->
n
 =Ç;

4643 
	`MemSëTy≥Fœg
(
pOut
, 
MEM_Blob
);

4644 if–
pC
->
isTabÀ
==0 ){

4645 
rc
 = 
	`sqlôe3BåìKey
(
pCr§
, 0, 
n
, 
pOut
->
z
);

4647 
rc
 = 
	`sqlôe3BåìD©a
(
pCr§
, 0, 
n
, 
pOut
->
z
);

4649 if–
rc
 ) 
ab‹t_due_to_îr‹
;

4650 
pOut
->
íc
 = 
SQLITE_UTF8
;

4651 
	`UPDATE_MAX_BLOBSIZE
(
pOut
);

4652 
	`REGISTER_TRACE
(
pOp
->
p2
, 
pOut
);

4666 
OP_Rowid
: {

4667 
VdbeCurs‹
 *
pC
;

4668 
i64
 
v
;

4669 
sqlôe3_vèb
 *
pVèb
;

4670 c⁄° 
sqlôe3_moduÀ
 *
pModuÀ
;

4672 
pOut
 = 
	`out2PªªÀa£
(
p
, 
pOp
);

4673 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

4674 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

4675 
	`as£π
–
pC
!=0 );

4676 
	`as£π
–
pC
->
eCurTy≥
!=
CURTYPE_PSEUDO
 ||ÖC->
nuŒRow
 );

4677 if–
pC
->
nuŒRow
 ){

4678 
pOut
->
Êags
 = 
MEM_NuŒ
;

4680 }if–
pC
->
de„ºedMovëo
 ){

4681 
v
 = 
pC
->
movëoT¨gë
;

4682 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


4683 }if–
pC
->
eCurTy≥
==
CURTYPE_VTAB
 ){

4684 
	`as£π
–
pC
->
uc
.
pVCur
!=0 );

4685 
pVèb
 = 
pC
->
uc
.
pVCur
->pVtab;

4686 
pModuÀ
 = 
pVèb
->pModule;

4687 
	`as£π
–
pModuÀ
->
xRowid
 );

4688 
rc
 = 
pModuÀ
->
	`xRowid
(
pC
->
uc
.
pVCur
, &
v
);

4689 
	`sqlôe3VèbImp‹tEºmsg
(
p
, 
pVèb
);

4690 if–
rc
 ) 
ab‹t_due_to_îr‹
;

4693 
	`as£π
–
pC
->
eCurTy≥
==
CURTYPE_BTREE
 );

4694 
	`as£π
–
pC
->
uc
.
pCurs‹
!=0 );

4695 
rc
 = 
	`sqlôe3VdbeCurs‹Re°‹e
(
pC
);

4696 if–
rc
 ) 
ab‹t_due_to_îr‹
;

4697 if–
pC
->
nuŒRow
 ){

4698 
pOut
->
Êags
 = 
MEM_NuŒ
;

4701 
rc
 = 
	`sqlôe3BåìKeySize
(
pC
->
uc
.
pCurs‹
, &
v
);

4702 
	`as£π
–
rc
==
SQLITE_OK
 );

4704 
pOut
->
u
.
i
 = 
v
;

4714 
OP_NuŒRow
: {

4715 
VdbeCurs‹
 *
pC
;

4717 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

4718 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

4719 
	`as£π
–
pC
!=0 );

4720 
pC
->
nuŒRow
 = 1;

4721 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

4722 if–
pC
->
eCurTy≥
==
CURTYPE_BTREE
 ){

4723 
	`as£π
–
pC
->
uc
.
pCurs‹
!=0 );

4724 
	`sqlôe3BåìCÀ¨Curs‹
(
pC
->
uc
.
pCurs‹
);

4741 
OP_La°
: {

4742 
VdbeCurs‹
 *
pC
;

4743 
BtCurs‹
 *
pCr§
;

4744 
ªs
;

4746 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

4747 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

4748 
	`as£π
–
pC
!=0 );

4749 
	`as£π
–
pC
->
eCurTy≥
==
CURTYPE_BTREE
 );

4750 
pCr§
 = 
pC
->
uc
.
pCurs‹
;

4751 
ªs
 = 0;

4752 
	`as£π
–
pCr§
!=0 );

4753 
rc
 = 
	`sqlôe3BåìLa°
(
pCr§
, &
ªs
);

4754 
pC
->
nuŒRow
 = (
u8
)
ªs
;

4755 
pC
->
de„ºedMovëo
 = 0;

4756 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

4757 
pC
->
£ekResu…
 = 
pOp
->
p3
;

4758 #ifde‡
SQLITE_DEBUG


4759 
pC
->
£ekOp
 = 
OP_La°
;

4761 if–
rc
 ) 
ab‹t_due_to_îr‹
;

4762 if–
pOp
->
p2
>0 ){

4763 
	`VdbeBønchTakí
(
ªs
!=0,2);

4764 if–
ªs
 ) 
jump_to_p2
;

4782 
OP_S‹ãrS‹t
:

4783 
OP_S‹t
: {

4784 #ifde‡
SQLITE_TEST


4785 
sqlôe3_s‹t_cou¡
++;

4786 
sqlôe3_£¨ch_cou¡
--;

4788 
p
->
aCou¡î
[
SQLITE_STMTSTATUS_SORT
]++;

4803 
OP_Rewöd
: {

4804 
VdbeCurs‹
 *
pC
;

4805 
BtCurs‹
 *
pCr§
;

4806 
ªs
;

4808 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

4809 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

4810 
	`as£π
–
pC
!=0 );

4811 
	`as£π
–
	`isS‹ãr
(
pC
)==(
pOp
->
›code
==
OP_S‹ãrS‹t
) );

4812 
ªs
 = 1;

4813 #ifde‡
SQLITE_DEBUG


4814 
pC
->
£ekOp
 = 
OP_Rewöd
;

4816 if–
	`isS‹ãr
(
pC
) ){

4817 
rc
 = 
	`sqlôe3VdbeS‹ãrRewöd
(
pC
, &
ªs
);

4819 
	`as£π
–
pC
->
eCurTy≥
==
CURTYPE_BTREE
 );

4820 
pCr§
 = 
pC
->
uc
.
pCurs‹
;

4821 
	`as£π
–
pCr§
 );

4822 
rc
 = 
	`sqlôe3BåìFú°
(
pCr§
, &
ªs
);

4823 
pC
->
de„ºedMovëo
 = 0;

4824 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

4826 if–
rc
 ) 
ab‹t_due_to_îr‹
;

4827 
pC
->
nuŒRow
 = (
u8
)
ªs
;

4828 
	`as£π
–
pOp
->
p2
>0 &&ÖOp->p2<
p
->
nOp
 );

4829 
	`VdbeBønchTakí
(
ªs
!=0,2);

4830 if–
ªs
 ) 
jump_to_p2
;

4897 
OP_S‹ãrNext
: {

4898 
VdbeCurs‹
 *
pC
;

4899 
ªs
;

4901 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

4902 
	`as£π
–
	`isS‹ãr
(
pC
) );

4903 
ªs
 = 0;

4904 
rc
 = 
	`sqlôe3VdbeS‹ãrNext
(
db
, 
pC
, &
ªs
);

4905 
√xt_èû
;

4906 
OP_PªvIfO≥n
:

4907 
OP_NextIfO≥n
:

4908 if–
p
->
≠C§
[
pOp
->
p1
]==0 ) ;

4910 
OP_Pªv
:

4911 
OP_Next
:

4912 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

4913 
	`as£π
–
pOp
->
p5
<
	`AºaySize
(
p
->
aCou¡î
) );

4914 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

4915 
ªs
 = 
pOp
->
p3
;

4916 
	`as£π
–
pC
!=0 );

4917 
	`as£π
–
pC
->
de„ºedMovëo
==0 );

4918 
	`as£π
–
pC
->
eCurTy≥
==
CURTYPE_BTREE
 );

4919 
	`as£π
–
ªs
==0 || (ªs==1 && 
pC
->
isTabÀ
==0) );

4920 
	`ã°ˇ£
–
ªs
==1 );

4921 
	`as£π
–
pOp
->
›code
!=
OP_Next
 ||ÖOp->
p4
.
xAdv™˚
==
sqlôe3BåìNext
 );

4922 
	`as£π
–
pOp
->
›code
!=
OP_Pªv
 ||ÖOp->
p4
.
xAdv™˚
==
sqlôe3BåìPªvious
 );

4923 
	`as£π
–
pOp
->
›code
!=
OP_NextIfO≥n
 ||ÖOp->
p4
.
xAdv™˚
==
sqlôe3BåìNext
 );

4924 
	`as£π
–
pOp
->
›code
!=
OP_PªvIfO≥n
 ||ÖOp->
p4
.
xAdv™˚
==
sqlôe3BåìPªvious
);

4928 
	`as£π
–
pOp
->
›code
!=
OP_Next
 ||ÖOp->›code!=
OP_NextIfO≥n


4929 || 
pC
->
£ekOp
==
OP_SìkGT
 ||ÖC->£ekOp==
OP_SìkGE


4930 || 
pC
->
£ekOp
==
OP_Rewöd
 ||ÖC->£ekOp==
OP_Found
);

4931 
	`as£π
–
pOp
->
›code
!=
OP_Pªv
 ||ÖOp->›code!=
OP_PªvIfO≥n


4932 || 
pC
->
£ekOp
==
OP_SìkLT
 ||ÖC->£ekOp==
OP_SìkLE


4933 || 
pC
->
£ekOp
==
OP_La°
 );

4935 
rc
 = 
pOp
->
p4
.
	`xAdv™˚
(
pC
->
uc
.
pCurs‹
, &
ªs
);

4936 
√xt_èû
:

4937 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

4938 
	`VdbeBønchTakí
(
ªs
==0,2);

4939 if–
rc
 ) 
ab‹t_due_to_îr‹
;

4940 if–
ªs
==0 ){

4941 
pC
->
nuŒRow
 = 0;

4942 
p
->
aCou¡î
[
pOp
->
p5
]++;

4943 #ifde‡
SQLITE_TEST


4944 
sqlôe3_£¨ch_cou¡
++;

4946 
jump_to_p2_™d_check_f‹_öãºu±
;

4948 
pC
->
nuŒRow
 = 1;

4950 
check_f‹_öãºu±
;

4974 
OP_S‹ãrIn£π
:

4975 
OP_IdxIn£π
: {

4976 
VdbeCurs‹
 *
pC
;

4977 
nKey
;

4978 c⁄° *
zKey
;

4980 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

4981 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

4982 
	`as£π
–
pC
!=0 );

4983 
	`as£π
–
	`isS‹ãr
(
pC
)==(
pOp
->
›code
==
OP_S‹ãrIn£π
) );

4984 
pIn2
 = &
aMem
[
pOp
->
p2
];

4985 
	`as£π
–
pIn2
->
Êags
 & 
MEM_Blob
 );

4986 if–
pOp
->
p5
 & 
OPFLAG_NCHANGE
 ) 
p
->
nCh™ge
++;

4987 
	`as£π
–
pC
->
eCurTy≥
==
CURTYPE_BTREE
 || 
pOp
->
›code
==
OP_S‹ãrIn£π
 );

4988 
	`as£π
–
pC
->
isTabÀ
==0 );

4989 
rc
 = 
	`Ex∑ndBlob
(
pIn2
);

4990 if–
rc
 ) 
ab‹t_due_to_îr‹
;

4991 if–
pOp
->
›code
==
OP_S‹ãrIn£π
 ){

4992 
rc
 = 
	`sqlôe3VdbeS‹ãrWrôe
(
pC
, 
pIn2
);

4994 
nKey
 = 
pIn2
->
n
;

4995 
zKey
 = 
pIn2
->
z
;

4996 
rc
 = 
	`sqlôe3BåìIn£π
(
pC
->
uc
.
pCurs‹
, 
zKey
, 
nKey
, "", 0, 0, 
pOp
->
p3
,

4997 ((
pOp
->
p5
 & 
OPFLAG_USESEEKRESULT
Ë? 
pC
->
£ekResu…
 : 0)

4999 
	`as£π
–
pC
->
de„ºedMovëo
==0 );

5000 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

5002 if–
rc
Ë
ab‹t_due_to_îr‹
;

5013 
OP_IdxDñëe
: {

5014 
VdbeCurs‹
 *
pC
;

5015 
BtCurs‹
 *
pCr§
;

5016 
ªs
;

5017 
U≈ackedRec‹d
 
r
;

5019 
	`as£π
–
pOp
->
p3
>0 );

5020 
	`as£π
–
pOp
->
p2
>0 &&ÖOp->p2+pOp->
p3
<=(
p
->
nMem
+1 -Ö->
nCurs‹
)+1 );

5021 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

5022 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

5023 
	`as£π
–
pC
!=0 );

5024 
	`as£π
–
pC
->
eCurTy≥
==
CURTYPE_BTREE
 );

5025 
pCr§
 = 
pC
->
uc
.
pCurs‹
;

5026 
	`as£π
–
pCr§
!=0 );

5027 
	`as£π
–
pOp
->
p5
==0 );

5028 
r
.
pKeyInfo
 = 
pC
->pKeyInfo;

5029 
r
.
nFõld
 = (
u16
)
pOp
->
p3
;

5030 
r
.
deÁu…_rc
 = 0;

5031 
r
.
aMem
 = &aMem[
pOp
->
p2
];

5032 
rc
 = 
	`sqlôe3BåìMovëoU≈acked
(
pCr§
, &
r
, 0, 0, &
ªs
);

5033 if–
rc
 ) 
ab‹t_due_to_îr‹
;

5034 if–
ªs
==0 ){

5035 
rc
 = 
	`sqlôe3BåìDñëe
(
pCr§
, 
BTREE_AUXDELETE
);

5036 if–
rc
 ) 
ab‹t_due_to_îr‹
;

5038 
	`as£π
–
pC
->
de„ºedMovëo
==0 );

5039 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

5071 
OP_Sìk
:

5072 
OP_IdxRowid
: {

5073 
VdbeCurs‹
 *
pC
;

5074 
VdbeCurs‹
 *
pTabCur
;

5075 
i64
 
rowid
;

5077 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

5078 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

5079 
	`as£π
–
pC
!=0 );

5080 
	`as£π
–
pC
->
eCurTy≥
==
CURTYPE_BTREE
 );

5081 
	`as£π
–
pC
->
uc
.
pCurs‹
!=0 );

5082 
	`as£π
–
pC
->
isTabÀ
==0 );

5083 
	`as£π
–
pC
->
de„ºedMovëo
==0 );

5084 
	`as£π
–!
pC
->
nuŒRow
 || 
pOp
->
›code
==
OP_IdxRowid
 );

5088 
rc
 = 
	`sqlôe3VdbeCurs‹Re°‹e
(
pC
);

5093 if–
	`NEVER
(
rc
!=
SQLITE_OK
ËË
ab‹t_due_to_îr‹
;

5095 if–!
pC
->
nuŒRow
 ){

5096 
rowid
 = 0;

5097 
rc
 = 
	`sqlôe3VdbeIdxRowid
(
db
, 
pC
->
uc
.
pCurs‹
, &
rowid
);

5098 if–
rc
!=
SQLITE_OK
 ){

5099 
ab‹t_due_to_îr‹
;

5101 if–
pOp
->
›code
==
OP_Sìk
 ){

5102 
	`as£π
–
pOp
->
p3
>=0 &&ÖOp->p3<
p
->
nCurs‹
 );

5103 
pTabCur
 = 
p
->
≠C§
[
pOp
->
p3
];

5104 
	`as£π
–
pTabCur
!=0 );

5105 
	`as£π
–
pTabCur
->
eCurTy≥
==
CURTYPE_BTREE
 );

5106 
	`as£π
–
pTabCur
->
uc
.
pCurs‹
!=0 );

5107 
	`as£π
–
pTabCur
->
isTabÀ
 );

5108 
pTabCur
->
nuŒRow
 = 0;

5109 
pTabCur
->
movëoT¨gë
 = 
rowid
;

5110 
pTabCur
->
de„ºedMovëo
 = 1;

5111 
	`as£π
–
pOp
->
p4ty≥
==
P4_INTARRAY
 ||ÖOp->
p4
.
ai
==0 );

5112 
pTabCur
->
aA…M≠
 = 
pOp
->
p4
.
ai
;

5113 
pTabCur
->
pA…Curs‹
 = 
pC
;

5115 
pOut
 = 
	`out2PªªÀa£
(
p
, 
pOp
);

5116 
pOut
->
u
.
i
 = 
rowid
;

5117 
pOut
->
Êags
 = 
MEM_I¡
;

5120 
	`as£π
–
pOp
->
›code
==
OP_IdxRowid
 );

5121 
	`sqlôe3VdbeMemSëNuŒ
(&
aMem
[
pOp
->
p2
]);

5170 
OP_IdxLE
:

5171 
OP_IdxGT
:

5172 
OP_IdxLT
:

5173 
OP_IdxGE
: {

5174 
VdbeCurs‹
 *
pC
;

5175 
ªs
;

5176 
U≈ackedRec‹d
 
r
;

5178 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

5179 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

5180 
	`as£π
–
pC
!=0 );

5181 
	`as£π
–
pC
->
isOrdîed
 );

5182 
	`as£π
–
pC
->
eCurTy≥
==
CURTYPE_BTREE
 );

5183 
	`as£π
–
pC
->
uc
.
pCurs‹
!=0);

5184 
	`as£π
–
pC
->
de„ºedMovëo
==0 );

5185 
	`as£π
–
pOp
->
p5
==0 ||ÖOp->p5==1 );

5186 
	`as£π
–
pOp
->
p4ty≥
==
P4_INT32
 );

5187 
r
.
pKeyInfo
 = 
pC
->pKeyInfo;

5188 
r
.
nFõld
 = (
u16
)
pOp
->
p4
.
i
;

5189 if–
pOp
->
›code
<
OP_IdxLT
 ){

5190 
	`as£π
–
pOp
->
›code
==
OP_IdxLE
 ||ÖOp->›code==
OP_IdxGT
 );

5191 
r
.
deÁu…_rc
 = -1;

5193 
	`as£π
–
pOp
->
›code
==
OP_IdxGE
 ||ÖOp->›code==
OP_IdxLT
 );

5194 
r
.
deÁu…_rc
 = 0;

5196 
r
.
aMem
 = &aMem[
pOp
->
p3
];

5197 #ifde‡
SQLITE_DEBUG


5198 { 
i
; i=0; i<
r
.
nFõld
; i++Ë
	`as£π
–
	`memIsVÆid
(&r.
aMem
[i]) ); }

5200 
ªs
 = 0;

5201 
rc
 = 
	`sqlôe3VdbeIdxKeyCom∑ª
(
db
, 
pC
, &
r
, &
ªs
);

5202 
	`as£π
–(
OP_IdxLE
&1)==(
OP_IdxLT
&1Ë&& (
OP_IdxGE
&1)==(
OP_IdxGT
&1) );

5203 if–(
pOp
->
›code
&1)==(
OP_IdxLT
&1) ){

5204 
	`as£π
–
pOp
->
›code
==
OP_IdxLE
 ||ÖOp->›code==
OP_IdxLT
 );

5205 
ªs
 = -res;

5207 
	`as£π
–
pOp
->
›code
==
OP_IdxGE
 ||ÖOp->›code==
OP_IdxGT
 );

5208 
ªs
++;

5210 
	`VdbeBønchTakí
(
ªs
>0,2);

5211 if–
rc
 ) 
ab‹t_due_to_îr‹
;

5212 if–
ªs
>0 ) 
jump_to_p2
;

5236 
OP_De°roy
: {

5237 
iMoved
;

5238 
iDb
;

5240 
	`as£π
–
p
->
ªadO∆y
==0 );

5241 
	`as£π
–
pOp
->
p1
>1 );

5242 
pOut
 = 
	`out2PªªÀa£
(
p
, 
pOp
);

5243 
pOut
->
Êags
 = 
MEM_NuŒ
;

5244 if–
db
->
nVdbeRód
 > db->
nVDe°roy
+1 ){

5245 
rc
 = 
SQLITE_LOCKED
;

5246 
p
->
îr‹A˘i⁄
 = 
OE_Ab‹t
;

5247 
ab‹t_due_to_îr‹
;

5249 
iDb
 = 
pOp
->
p3
;

5250 
	`as£π
–
	`DbMaskTe°
(
p
->
båìMask
, 
iDb
) );

5251 
iMoved
 = 0;

5252 
rc
 = 
	`sqlôe3BåìDr›TabÀ
(
db
->
aDb
[
iDb
].
pBt
, 
pOp
->
p1
, &
iMoved
);

5253 
pOut
->
Êags
 = 
MEM_I¡
;

5254 
pOut
->
u
.
i
 = 
iMoved
;

5255 if–
rc
 ) 
ab‹t_due_to_îr‹
;

5256 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


5257 if–
iMoved
!=0 ){

5258 
	`sqlôe3RoŸPageMoved
(
db
, 
iDb
, 
iMoved
, 
pOp
->
p1
);

5260 
	`as£π
–
ª£tSchemaOnFau…
==0 ||Ñe£tSchemaOnFau…==
iDb
+1 );

5261 
ª£tSchemaOnFau…
 = 
iDb
+1;

5286 
OP_CÀ¨
: {

5287 
nCh™ge
;

5289 
nCh™ge
 = 0;

5290 
	`as£π
–
p
->
ªadO∆y
==0 );

5291 
	`as£π
–
	`DbMaskTe°
(
p
->
båìMask
, 
pOp
->
p2
) );

5292 
rc
 = 
	`sqlôe3BåìCÀ¨TabÀ
(

5293 
db
->
aDb
[
pOp
->
p2
].
pBt
,ÖOp->
p1
, (pOp->
p3
 ? &
nCh™ge
 : 0)

5295 if–
pOp
->
p3
 ){

5296 
p
->
nCh™ge
 +=ÇChange;

5297 if–
pOp
->
p3
>0 ){

5298 
	`as£π
–
	`memIsVÆid
(&
aMem
[
pOp
->
p3
]) );

5299 
	`memAboutToCh™ge
(
p
, &
aMem
[
pOp
->
p3
]);

5300 
aMem
[
pOp
->
p3
].
u
.
i
 +
nCh™ge
;

5303 if–
rc
 ) 
ab‹t_due_to_îr‹
;

5315 
OP_Re£tS‹ãr
: {

5316 
VdbeCurs‹
 *
pC
;

5318 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

5319 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

5320 
	`as£π
–
pC
!=0 );

5321 if–
	`isS‹ãr
(
pC
) ){

5322 
	`sqlôe3VdbeS‹ãrRe£t
(
db
, 
pC
->
uc
.
pS‹ãr
);

5324 
	`as£π
–
pC
->
eCurTy≥
==
CURTYPE_BTREE
 );

5325 
	`as£π
–
pC
->
isEphemîÆ
 );

5326 
rc
 = 
	`sqlôe3BåìCÀ¨TabÀOfCurs‹
(
pC
->
uc
.
pCurs‹
);

5327 if–
rc
 ) 
ab‹t_due_to_îr‹
;

5356 
OP_Cª©eIndex
:

5357 
OP_Cª©eTabÀ
: {

5358 
pgno
;

5359 
Êags
;

5360 
Db
 *
pDb
;

5362 
pOut
 = 
	`out2PªªÀa£
(
p
, 
pOp
);

5363 
pgno
 = 0;

5364 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
db
->
nDb
 );

5365 
	`as£π
–
	`DbMaskTe°
(
p
->
båìMask
, 
pOp
->
p1
) );

5366 
	`as£π
–
p
->
ªadO∆y
==0 );

5367 
pDb
 = &
db
->
aDb
[
pOp
->
p1
];

5368 
	`as£π
–
pDb
->
pBt
!=0 );

5369 if–
pOp
->
›code
==
OP_Cª©eTabÀ
 ){

5371 
Êags
 = 
BTREE_INTKEY
;

5373 
Êags
 = 
BTREE_BLOBKEY
;

5375 
rc
 = 
	`sqlôe3BåìCª©eTabÀ
(
pDb
->
pBt
, &
pgno
, 
Êags
);

5376 if–
rc
 ) 
ab‹t_due_to_îr‹
;

5377 
pOut
->
u
.
i
 = 
pgno
;

5389 
OP_P¨£Schema
: {

5390 
iDb
;

5391 c⁄° *
zMa°î
;

5392 *
zSql
;

5393 
InôD©a
 
öôD©a
;

5399 #ifde‡
SQLITE_DEBUG


5400 
iDb
=0; iDb<
db
->
nDb
; iDb++){

5401 
	`as£π
–
iDb
==1 || 
	`sqlôe3BåìHﬁdsMuãx
(
db
->
aDb
[iDb].
pBt
) );

5405 
iDb
 = 
pOp
->
p1
;

5406 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

5407 
	`as£π
–
	`DbHasPr›îty
(
db
, 
iDb
, 
DB_SchemaLﬂded
) );

5409 
zMa°î
 = 
	`SCHEMA_TABLE
(
iDb
);

5410 
öôD©a
.
db
 = db;

5411 
öôD©a
.
iDb
 = 
pOp
->
p1
;

5412 
öôD©a
.
pzEºMsg
 = &
p
->
zEºMsg
;

5413 
zSql
 = 
	`sqlôe3MPrötf
(
db
,

5415 
db
->
aDb
[
iDb
].
zName
, 
zMa°î
, 
pOp
->
p4
.
z
);

5416 if–
zSql
==0 ){

5417 
rc
 = 
SQLITE_NOMEM_BKPT
;

5419 
	`as£π
–
db
->
öô
.
busy
==0 );

5420 
db
->
öô
.
busy
 = 1;

5421 
öôD©a
.
rc
 = 
SQLITE_OK
;

5422 
	`as£π
–!
db
->
mÆlocFaûed
 );

5423 
rc
 = 
	`sqlôe3_exec
(
db
, 
zSql
, 
sqlôe3InôCÆlback
, &
öôD©a
, 0);

5424 if–
rc
==
SQLITE_OK
 )Ñ¯
öôD©a
.rc;

5425 
	`sqlôe3DbFªe
(
db
, 
zSql
);

5426 
db
->
öô
.
busy
 = 0;

5429 if–
rc
 ){

5430 
	`sqlôe3Re£tAŒSchemasOfC⁄√˘i⁄
(
db
);

5431 if–
rc
==
SQLITE_NOMEM
 ){

5432 
no_mem
;

5434 
ab‹t_due_to_îr‹
;

5439 #i‡!
	`deföed
(
SQLITE_OMIT_ANALYZE
)

5446 
OP_LﬂdA«lysis
: {

5447 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
db
->
nDb
 );

5448 
rc
 = 
	`sqlôe3A«lysisLﬂd
(
db
, 
pOp
->
p1
);

5449 if–
rc
 ) 
ab‹t_due_to_îr‹
;

5462 
OP_Dr›TabÀ
: {

5463 
	`sqlôe3U∆ökAndDñëeTabÀ
(
db
, 
pOp
->
p1
,ÖOp->
p4
.
z
);

5475 
OP_Dr›Index
: {

5476 
	`sqlôe3U∆ökAndDñëeIndex
(
db
, 
pOp
->
p1
,ÖOp->
p4
.
z
);

5488 
OP_Dr›Triggî
: {

5489 
	`sqlôe3U∆ökAndDñëeTriggî
(
db
, 
pOp
->
p1
,ÖOp->
p4
.
z
);

5494 #i‚de‡
SQLITE_OMIT_INTEGRITY_CHECK


5514 
OP_I¡egrôyCk
: {

5515 
nRoŸ
;

5516 *
aRoŸ
;

5517 
nEº
;

5518 *
z
;

5519 
Mem
 *
≤Eº
;

5521 
	`as£π
–
p
->
bIsRódî
 );

5522 
nRoŸ
 = 
pOp
->
p2
;

5523 
aRoŸ
 = 
pOp
->
p4
.
ai
;

5524 
	`as£π
–
nRoŸ
>0 );

5525 
	`as£π
–
aRoŸ
[
nRoŸ
]==0 );

5526 
	`as£π
–
pOp
->
p3
>0 &&ÖOp->p3<=(
p
->
nMem
+1 -Ö->
nCurs‹
) );

5527 
≤Eº
 = &
aMem
[
pOp
->
p3
];

5528 
	`as£π
–(
≤Eº
->
Êags
 & 
MEM_I¡
)!=0 );

5529 
	`as£π
–(
≤Eº
->
Êags
 & (
MEM_Så
|
MEM_Blob
))==0 );

5530 
pIn1
 = &
aMem
[
pOp
->
p1
];

5531 
	`as£π
–
pOp
->
p5
<
db
->
nDb
 );

5532 
	`as£π
–
	`DbMaskTe°
(
p
->
båìMask
, 
pOp
->
p5
) );

5533 
z
 = 
	`sqlôe3BåìI¡egrôyCheck
(
db
->
aDb
[
pOp
->
p5
].
pBt
, 
aRoŸ
, 
nRoŸ
,

5534 ()
≤Eº
->
u
.
i
, &
nEº
);

5535 
≤Eº
->
u
.
i
 -
nEº
;

5536 
	`sqlôe3VdbeMemSëNuŒ
(
pIn1
);

5537 if–
nEº
==0 ){

5538 
	`as£π
–
z
==0 );

5539 }if–
z
==0 ){

5540 
no_mem
;

5542 
	`sqlôe3VdbeMemSëSå
(
pIn1
, 
z
, -1, 
SQLITE_UTF8
, 
sqlôe3_‰ì
);

5544 
	`UPDATE_MAX_BLOBSIZE
(
pIn1
);

5545 
	`sqlôe3VdbeCh™geEncodög
(
pIn1
, 
ícodög
);

5558 
OP_RowSëAdd
: {

5559 
pIn1
 = &
aMem
[
pOp
->
p1
];

5560 
pIn2
 = &
aMem
[
pOp
->
p2
];

5561 
	`as£π
–(
pIn2
->
Êags
 & 
MEM_I¡
)!=0 );

5562 if–(
pIn1
->
Êags
 & 
MEM_RowSë
)==0 ){

5563 
	`sqlôe3VdbeMemSëRowSë
(
pIn1
);

5564 if–(
pIn1
->
Êags
 & 
MEM_RowSë
)==0 ) 
no_mem
;

5566 
	`sqlôe3RowSëIn£π
(
pIn1
->
u
.
pRowSë
, 
pIn2
->u.
i
);

5577 
OP_RowSëRód
: {

5578 
i64
 
vÆ
;

5580 
pIn1
 = &
aMem
[
pOp
->
p1
];

5581 if–(
pIn1
->
Êags
 & 
MEM_RowSë
)==0

5582 || 
	`sqlôe3RowSëNext
(
pIn1
->
u
.
pRowSë
, &
vÆ
)==0

5585 
	`sqlôe3VdbeMemSëNuŒ
(
pIn1
);

5586 
	`VdbeBønchTakí
(1,2);

5587 
jump_to_p2_™d_check_f‹_öãºu±
;

5590 
	`VdbeBønchTakí
(0,2);

5591 
	`sqlôe3VdbeMemSëI¡64
(&
aMem
[
pOp
->
p3
], 
vÆ
);

5593 
check_f‹_öãºu±
;

5620 
OP_RowSëTe°
: {

5621 
iSë
;

5622 
exi°s
;

5624 
pIn1
 = &
aMem
[
pOp
->
p1
];

5625 
pIn3
 = &
aMem
[
pOp
->
p3
];

5626 
iSë
 = 
pOp
->
p4
.
i
;

5627 
	`as£π
–
pIn3
->
Êags
&
MEM_I¡
 );

5632 if–(
pIn1
->
Êags
 & 
MEM_RowSë
)==0 ){

5633 
	`sqlôe3VdbeMemSëRowSë
(
pIn1
);

5634 if–(
pIn1
->
Êags
 & 
MEM_RowSë
)==0 ) 
no_mem
;

5637 
	`as£π
–
pOp
->
p4ty≥
==
P4_INT32
 );

5638 
	`as£π
–
iSë
==-1 || iSet>=0 );

5639 if–
iSë
 ){

5640 
exi°s
 = 
	`sqlôe3RowSëTe°
(
pIn1
->
u
.
pRowSë
, 
iSë
, 
pIn3
->u.
i
);

5641 
	`VdbeBønchTakí
(
exi°s
!=0,2);

5642 if–
exi°s
 ) 
jump_to_p2
;

5644 if–
iSë
>=0 ){

5645 
	`sqlôe3RowSëIn£π
(
pIn1
->
u
.
pRowSë
, 
pIn3
->u.
i
);

5651 #i‚de‡
SQLITE_OMIT_TRIGGER


5668 
OP_Progøm
: {

5669 
nMem
;

5670 
nByã
;

5671 
Mem
 *
pRt
;

5672 
Mem
 *
pMem
;

5673 
Mem
 *
pEnd
;

5674 
VdbeFøme
 *
pFøme
;

5675 
SubProgøm
 *
pProgøm
;

5676 *
t
;

5678 
pProgøm
 = 
pOp
->
p4
.pProgram;

5679 
pRt
 = &
aMem
[
pOp
->
p3
];

5680 
	`as£π
–
pProgøm
->
nOp
>0 );

5693 if–
pOp
->
p5
 ){

5694 
t
 = 
pProgøm
->
tokí
;

5695 
pFøme
=
p
->pFøme;ÖFømê&&ÖFøme->
tokí
!=
t
;ÖFømeıFøme->
pP¨ít
);

5696 if–
pFøme
 ) ;

5699 if–
p
->
nFøme
>=
db
->
aLimô
[
SQLITE_LIMIT_TRIGGER_DEPTH
] ){

5700 
rc
 = 
SQLITE_ERROR
;

5701 
	`sqlôe3VdbeEº‹
(
p
, "too manyÜevels ofÅriggerÑecursion");

5702 
ab‹t_due_to_îr‹
;

5709 if–(
pRt
->
Êags
&
MEM_Føme
)==0 ){

5715 
nMem
 = 
pProgøm
->nMem +ÖProgøm->
nC§
;

5716 
	`as£π
–
nMem
>0 );

5717 if–
pProgøm
->
nC§
==0 ) 
nMem
++;

5718 
nByã
 = 
	`ROUND8
((
VdbeFøme
))

5719 + 
nMem
 * (
Mem
)

5720 + 
pProgøm
->
nC§
 * (
VdbeCurs‹
 *)

5721 + 
pProgøm
->
nOn˚
 * (
u8
);

5722 
pFøme
 = 
	`sqlôe3DbMÆlocZîo
(
db
, 
nByã
);

5723 if–!
pFøme
 ){

5724 
no_mem
;

5726 
	`sqlôe3VdbeMemRñó£
(
pRt
);

5727 
pRt
->
Êags
 = 
MEM_Føme
;

5728 
pRt
->
u
.
pFøme
 =ÖFrame;

5730 
pFøme
->
v
 = 
p
;

5731 
pFøme
->
nChûdMem
 = 
nMem
;

5732 
pFøme
->
nChûdC§
 = 
pProgøm
->
nC§
;

5733 
pFøme
->
pc
 = ()(
pOp
 - 
aOp
);

5734 
pFøme
->
aMem
 = 
p
->aMem;

5735 
pFøme
->
nMem
 = 
p
->nMem;

5736 
pFøme
->
≠C§
 = 
p
->apCsr;

5737 
pFøme
->
nCurs‹
 = 
p
->nCursor;

5738 
pFøme
->
aOp
 = 
p
->aOp;

5739 
pFøme
->
nOp
 = 
p
->nOp;

5740 
pFøme
->
tokí
 = 
pProgøm
->token;

5741 
pFøme
->
aOn˚Fœg
 = 
p
->aOnceFlag;

5742 
pFøme
->
nOn˚Fœg
 = 
p
->nOnceFlag;

5743 #ifde‡
SQLITE_ENABLE_STMT_SCANSTATUS


5744 
pFøme
->
™Exec
 = 
p
->anExec;

5747 
pEnd
 = &
	`VdbeFømeMem
(
pFøme
)[pFøme->
nChûdMem
];

5748 
pMem
=
	`VdbeFømeMem
(
pFøme
);ÖMem!=
pEnd
;ÖMem++){

5749 
pMem
->
Êags
 = 
MEM_Undeföed
;

5750 
pMem
->
db
 = db;

5753 
pFøme
 = 
pRt
->
u
.pFrame;

5754 
	`as£π
–
pProgøm
->
nMem
+pProgøm->
nC§
==
pFøme
->
nChûdMem


5755 || (
pProgøm
->
nC§
==0 &&ÖProgøm->
nMem
+1==
pFøme
->
nChûdMem
) );

5756 
	`as£π
–
pProgøm
->
nC§
==
pFøme
->
nChûdC§
 );

5757 
	`as£π
–()(
pOp
 - 
aOp
)==
pFøme
->
pc
 );

5760 
p
->
nFøme
++;

5761 
pFøme
->
pP¨ít
 = 
p
->pFrame;

5762 
pFøme
->
œ°Rowid
 =ÜastRowid;

5763 
pFøme
->
nCh™ge
 = 
p
->nChange;

5764 
pFøme
->
nDbCh™ge
 = 
p
->
db
->
nCh™ge
;

5765 
	`as£π
–
pFøme
->
pAuxD©a
==0 );

5766 
pFøme
->
pAuxD©a
 = 
p
->pAuxData;

5767 
p
->
pAuxD©a
 = 0;

5768 
p
->
nCh™ge
 = 0;

5769 
p
->
pFøme
 =ÖFrame;

5770 
p
->
aMem
 =áMem = 
	`VdbeFømeMem
(
pFøme
);

5771 
p
->
nMem
 = 
pFøme
->
nChûdMem
;

5772 
p
->
nCurs‹
 = (
u16
)
pFøme
->
nChûdC§
;

5773 
p
->
≠C§
 = (
VdbeCurs‹
 **)&
aMem
[p->
nMem
];

5774 
p
->
aOp
 =áO∞
pProgøm
->aOp;

5775 
p
->
nOp
 = 
pProgøm
->nOp;

5776 
p
->
aOn˚Fœg
 = (
u8
 *)&p->
≠C§
[p->
nCurs‹
];

5777 
p
->
nOn˚Fœg
 = 
pProgøm
->
nOn˚
;

5778 #ifde‡
SQLITE_ENABLE_STMT_SCANSTATUS


5779 
p
->
™Exec
 = 0;

5781 
pOp
 = &
aOp
[-1];

5782 
	`mem£t
(
p
->
aOn˚Fœg
, 0,Ö->
nOn˚Fœg
);

5799 
OP_P¨am
: {

5800 
VdbeFøme
 *
pFøme
;

5801 
Mem
 *
pIn
;

5802 
pOut
 = 
	`out2PªªÀa£
(
p
, 
pOp
);

5803 
pFøme
 = 
p
->pFrame;

5804 
pIn
 = &
pFøme
->
aMem
[
pOp
->
p1
 +ÖFøme->
aOp
[pFøme->
pc
].p1];

5805 
	`sqlôe3VdbeMemShÆlowC›y
(
pOut
, 
pIn
, 
MEM_Ephem
);

5811 #i‚de‡
SQLITE_OMIT_FOREIGN_KEY


5820 
OP_FkCou¡î
: {

5821 if–
db
->
Êags
 & 
SQLITE_De„rFKs
 ){

5822 
db
->
nDe„ºedImmC⁄s
 +
pOp
->
p2
;

5823 }if–
pOp
->
p1
 ){

5824 
db
->
nDe„ºedC⁄s
 +
pOp
->
p2
;

5826 
p
->
nFkC⁄°øöt
 +
pOp
->
p2
;

5843 
OP_FkIfZîo
: {

5844 if–
pOp
->
p1
 ){

5845 
	`VdbeBønchTakí
(
db
->
nDe„ºedC⁄s
==0 && db->
nDe„ºedImmC⁄s
==0, 2);

5846 if–
db
->
nDe„ºedC⁄s
==0 && db->
nDe„ºedImmC⁄s
==0 ) 
jump_to_p2
;

5848 
	`VdbeBønchTakí
(
p
->
nFkC⁄°øöt
==0 && 
db
->
nDe„ºedImmC⁄s
==0, 2);

5849 if–
p
->
nFkC⁄°øöt
==0 && 
db
->
nDe„ºedImmC⁄s
==0 ) 
jump_to_p2
;

5855 #i‚de‡
SQLITE_OMIT_AUTOINCREMENT


5867 
OP_MemMax
: {

5868 
VdbeFøme
 *
pFøme
;

5869 if–
p
->
pFøme
 ){

5870 
pFøme
=
p
->pFøme;ÖFøme->
pP¨ít
;ÖFrame=pFrame->pParent);

5871 
pIn1
 = &
pFøme
->
aMem
[
pOp
->
p1
];

5873 
pIn1
 = &
aMem
[
pOp
->
p1
];

5875 
	`as£π
–
	`memIsVÆid
(
pIn1
) );

5876 
	`sqlôe3VdbeMemI¡egîify
(
pIn1
);

5877 
pIn2
 = &
aMem
[
pOp
->
p2
];

5878 
	`sqlôe3VdbeMemI¡egîify
(
pIn2
);

5879 if–
pIn1
->
u
.
i
<
pIn2
->u.i){

5880 
pIn1
->
u
.
i
 = 
pIn2
->u.i;

5896 
OP_IfPos
: {

5897 
pIn1
 = &
aMem
[
pOp
->
p1
];

5898 
	`as£π
–
pIn1
->
Êags
&
MEM_I¡
 );

5899 
	`VdbeBønchTakí
–
pIn1
->
u
.
i
>0, 2);

5900 if–
pIn1
->
u
.
i
>0 ){

5901 
pIn1
->
u
.
i
 -
pOp
->
p3
;

5902 
jump_to_p2
;

5925 
OP_Off£tLimô
: {

5926 
pIn1
 = &
aMem
[
pOp
->
p1
];

5927 
pIn3
 = &
aMem
[
pOp
->
p3
];

5928 
pOut
 = 
	`out2PªªÀa£
(
p
, 
pOp
);

5929 
	`as£π
–
pIn1
->
Êags
 & 
MEM_I¡
 );

5930 
	`as£π
–
pIn3
->
Êags
 & 
MEM_I¡
 );

5931 
pOut
->
u
.
i
 = 
pIn1
->u.i<=0 ? -1 :ÖIn1->u.i+(
pIn3
->u.i>0?pIn3->u.i:0);

5943 
OP_IfNŸZîo
: {

5944 
pIn1
 = &
aMem
[
pOp
->
p1
];

5945 
	`as£π
–
pIn1
->
Êags
&
MEM_I¡
 );

5946 
	`VdbeBønchTakí
(
pIn1
->
u
.
i
<0, 2);

5947 if–
pIn1
->
u
.
i
 ){

5948 
pIn1
->
u
.
i
 -
pOp
->
p3
;

5949 
jump_to_p2
;

5960 
OP_De¸JumpZîo
: {

5961 
pIn1
 = &
aMem
[
pOp
->
p1
];

5962 
	`as£π
–
pIn1
->
Êags
&
MEM_I¡
 );

5963 
pIn1
->
u
.
i
--;

5964 
	`VdbeBønchTakí
(
pIn1
->
u
.
i
==0, 2);

5965 if–
pIn1
->
u
.
i
==0 ) 
jump_to_p2
;

5998 
OP_AggSãp0
: {

5999 
n
;

6000 
sqlôe3_c⁄ãxt
 *
pCtx
;

6002 
	`as£π
–
pOp
->
p4ty≥
==
P4_FUNCDEF
 );

6003 
n
 = 
pOp
->
p5
;

6004 
	`as£π
–
pOp
->
p3
>0 &&ÖOp->p3<=(
p
->
nMem
+1 -Ö->
nCurs‹
) );

6005 
	`as£π
–
n
==0 || (
pOp
->
p2
>0 &&ÖOp->p2+n<=(
p
->
nMem
+1 -Ö->
nCurs‹
)+1) );

6006 
	`as£π
–
pOp
->
p3
<pOp->
p2
 ||ÖOp->p3>ıOp->p2+
n
 );

6007 
pCtx
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, (*pCtxË+ (
n
-1)*(
sqlôe3_vÆue
*));

6008 if–
pCtx
==0 ) 
no_mem
;

6009 
pCtx
->
pMem
 = 0;

6010 
pCtx
->
pFunc
 = 
pOp
->
p4
.pFunc;

6011 
pCtx
->
iOp
 = ()(
pOp
 - 
aOp
);

6012 
pCtx
->
pVdbe
 = 
p
;

6013 
pCtx
->
¨gc
 = 
n
;

6014 
pOp
->
p4ty≥
 = 
P4_FUNCCTX
;

6015 
pOp
->
p4
.
pCtx
 =ÖCtx;

6016 
pOp
->
›code
 = 
OP_AggSãp
;

6019 
OP_AggSãp
: {

6020 
i
;

6021 
sqlôe3_c⁄ãxt
 *
pCtx
;

6022 
Mem
 *
pMem
;

6023 
Mem
 
t
;

6025 
	`as£π
–
pOp
->
p4ty≥
==
P4_FUNCCTX
 );

6026 
pCtx
 = 
pOp
->
p4
.pCtx;

6027 
pMem
 = &
aMem
[
pOp
->
p3
];

6033 if–
pCtx
->
pMem
 !=ÖMem ){

6034 
pCtx
->
pMem
 =ÖMem;

6035 
i
=
pCtx
->
¨gc
-1; i>=0; i--ËpCtx->
¨gv
[i] = &
aMem
[
pOp
->
p2
+i];

6038 #ifde‡
SQLITE_DEBUG


6039 
i
=0; i<
pCtx
->
¨gc
; i++){

6040 
	`as£π
–
	`memIsVÆid
(
pCtx
->
¨gv
[
i
]) );

6041 
	`REGISTER_TRACE
(
pOp
->
p2
+
i
, 
pCtx
->
¨gv
[i]);

6045 
pMem
->
n
++;

6046 
	`sqlôe3VdbeMemInô
(&
t
, 
db
, 
MEM_NuŒ
);

6047 
pCtx
->
pOut
 = &
t
;

6048 
pCtx
->
fEº‹OrAux
 = 0;

6049 
pCtx
->
skùFœg
 = 0;

6050 (
pCtx
->
pFunc
->
xSFunc
)’Ctx,pCtx->
¨gc
,pCtx->
¨gv
);

6051 if–
pCtx
->
fEº‹OrAux
 ){

6052 if–
pCtx
->
isEº‹
 ){

6053 
	`sqlôe3VdbeEº‹
(
p
, "%s", 
	`sqlôe3_vÆue_ãxt
(&
t
));

6054 
rc
 = 
pCtx
->
isEº‹
;

6056 
	`sqlôe3VdbeMemRñó£
(&
t
);

6057 if–
rc
 ) 
ab‹t_due_to_îr‹
;

6059 
	`as£π
–
t
.
Êags
==
MEM_NuŒ
 );

6061 if–
pCtx
->
skùFœg
 ){

6062 
	`as£π
–
pOp
[-1].
›code
==
OP_CﬁlSeq
 );

6063 
i
 = 
pOp
[-1].
p1
;

6064 if–
i
 ) 
	`sqlôe3VdbeMemSëI¡64
(&
aMem
[i], 1);

6082 
OP_AggFöÆ
: {

6083 
Mem
 *
pMem
;

6084 
	`as£π
–
pOp
->
p1
>0 &&ÖOp->p1<=(
p
->
nMem
+1 -Ö->
nCurs‹
) );

6085 
pMem
 = &
aMem
[
pOp
->
p1
];

6086 
	`as£π
–(
pMem
->
Êags
 & ~(
MEM_NuŒ
|
MEM_Agg
))==0 );

6087 
rc
 = 
	`sqlôe3VdbeMemFöÆize
(
pMem
, 
pOp
->
p4
.
pFunc
);

6088 if–
rc
 ){

6089 
	`sqlôe3VdbeEº‹
(
p
, "%s", 
	`sqlôe3_vÆue_ãxt
(
pMem
));

6090 
ab‹t_due_to_îr‹
;

6092 
	`sqlôe3VdbeCh™geEncodög
(
pMem
, 
ícodög
);

6093 
	`UPDATE_MAX_BLOBSIZE
(
pMem
);

6094 if–
	`sqlôe3VdbeMemTooBig
(
pMem
) ){

6095 
too_big
;

6100 #i‚de‡
SQLITE_OMIT_WAL


6112 
OP_Checkpoöt
: {

6113 
i
;

6114 
aRes
[3];

6115 
Mem
 *
pMem
;

6117 
	`as£π
–
p
->
ªadO∆y
==0 );

6118 
aRes
[0] = 0;

6119 
aRes
[1] =áRes[2] = -1;

6120 
	`as£π
–
pOp
->
p2
==
SQLITE_CHECKPOINT_PASSIVE


6121 || 
pOp
->
p2
==
SQLITE_CHECKPOINT_FULL


6122 || 
pOp
->
p2
==
SQLITE_CHECKPOINT_RESTART


6123 || 
pOp
->
p2
==
SQLITE_CHECKPOINT_TRUNCATE


6125 
rc
 = 
	`sqlôe3Checkpoöt
(
db
, 
pOp
->
p1
,ÖOp->
p2
, &
aRes
[1], &aRes[2]);

6126 if–
rc
 ){

6127 if–
rc
!=
SQLITE_BUSY
 ) 
ab‹t_due_to_îr‹
;

6128 
rc
 = 
SQLITE_OK
;

6129 
aRes
[0] = 1;

6131 
i
=0, 
pMem
 = &
aMem
[
pOp
->
p3
]; i<3; i++,ÖMem++){

6132 
	`sqlôe3VdbeMemSëI¡64
(
pMem
, (
i64
)
aRes
[
i
]);

6138 #i‚de‡
SQLITE_OMIT_PRAGMA


6150 
OP_Jou∫ÆMode
: {

6151 
Båì
 *
pBt
;

6152 
Pagî
 *
pPagî
;

6153 
eNew
;

6154 
eOld
;

6155 #i‚de‡
SQLITE_OMIT_WAL


6156 c⁄° *
zFûíame
;

6159 
pOut
 = 
	`out2PªªÀa£
(
p
, 
pOp
);

6160 
eNew
 = 
pOp
->
p3
;

6161 
	`as£π
–
eNew
==
PAGER_JOURNALMODE_DELETE


6162 || 
eNew
==
PAGER_JOURNALMODE_TRUNCATE


6163 || 
eNew
==
PAGER_JOURNALMODE_PERSIST


6164 || 
eNew
==
PAGER_JOURNALMODE_OFF


6165 || 
eNew
==
PAGER_JOURNALMODE_MEMORY


6166 || 
eNew
==
PAGER_JOURNALMODE_WAL


6167 || 
eNew
==
PAGER_JOURNALMODE_QUERY


6169 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
db
->
nDb
 );

6170 
	`as£π
–
p
->
ªadO∆y
==0 );

6172 
pBt
 = 
db
->
aDb
[
pOp
->
p1
].pBt;

6173 
pPagî
 = 
	`sqlôe3BåìPagî
(
pBt
);

6174 
eOld
 = 
	`sqlôe3PagîGëJou∫ÆMode
(
pPagî
);

6175 if–
eNew
==
PAGER_JOURNALMODE_QUERY
 )ÉNew = 
eOld
;

6176 if–!
	`sqlôe3PagîOkToCh™geJou∫ÆMode
(
pPagî
ËË
eNew
 = 
eOld
;

6178 #i‚de‡
SQLITE_OMIT_WAL


6179 
zFûíame
 = 
	`sqlôe3PagîFûíame
(
pPagî
, 1);

6184 if–
eNew
==
PAGER_JOURNALMODE_WAL


6185 && (
	`sqlôe3SåÀn30
(
zFûíame
)==0

6186 || !
	`sqlôe3PagîWÆSuµ‹ãd
(
pPagî
))

6188 
eNew
 = 
eOld
;

6191 if–(
eNew
!=
eOld
)

6192 && (
eOld
==
PAGER_JOURNALMODE_WAL
 || 
eNew
==PAGER_JOURNALMODE_WAL)

6194 if–!
db
->
autoCommô
 || db->
nVdbeRód
>1 ){

6195 
rc
 = 
SQLITE_ERROR
;

6196 
	`sqlôe3VdbeEº‹
(
p
,

6198 (
eNew
==
PAGER_JOURNALMODE_WAL
 ? "into" : "out of")

6200 
ab‹t_due_to_îr‹
;

6203 if–
eOld
==
PAGER_JOURNALMODE_WAL
 ){

6209 
rc
 = 
	`sqlôe3PagîClo£WÆ
(
pPagî
);

6210 if–
rc
==
SQLITE_OK
 ){

6211 
	`sqlôe3PagîSëJou∫ÆMode
(
pPagî
, 
eNew
);

6213 }if–
eOld
==
PAGER_JOURNALMODE_MEMORY
 ){

6216 
	`sqlôe3PagîSëJou∫ÆMode
(
pPagî
, 
PAGER_JOURNALMODE_OFF
);

6222 
	`as£π
–
	`sqlôe3BåìIsInTøns
(
pBt
)==0 );

6223 if–
rc
==
SQLITE_OK
 ){

6224 
rc
 = 
	`sqlôe3BåìSëVîsi⁄
(
pBt
, (
eNew
==
PAGER_JOURNALMODE_WAL
 ? 2 : 1));

6230 if–
rc
 ) 
eNew
 = 
eOld
;

6231 
eNew
 = 
	`sqlôe3PagîSëJou∫ÆMode
(
pPagî
,ÉNew);

6233 
pOut
->
Êags
 = 
MEM_Så
|
MEM_Sètic
|
MEM_Tîm
;

6234 
pOut
->
z
 = (*)
	`sqlôe3Jou∫ÆModíame
(
eNew
);

6235 
pOut
->
n
 = 
	`sqlôe3SåÀn30
’Out->
z
);

6236 
pOut
->
íc
 = 
SQLITE_UTF8
;

6237 
	`sqlôe3VdbeCh™geEncodög
(
pOut
, 
ícodög
);

6238 if–
rc
 ) 
ab‹t_due_to_îr‹
;

6243 #i‡!
	`deföed
(
SQLITE_OMIT_VACUUM
Ë&& !deföed(
SQLITE_OMIT_ATTACH
)

6250 
OP_Vacuum
: {

6251 
	`as£π
–
p
->
ªadO∆y
==0 );

6252 
rc
 = 
	`sqlôe3RunVacuum
(&
p
->
zEºMsg
, 
db
);

6253 if–
rc
 ) 
ab‹t_due_to_îr‹
;

6258 #i‡!
	`deföed
(
SQLITE_OMIT_AUTOVACUUM
)

6265 
OP_In¸Vacuum
: {

6266 
Båì
 *
pBt
;

6268 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
db
->
nDb
 );

6269 
	`as£π
–
	`DbMaskTe°
(
p
->
båìMask
, 
pOp
->
p1
) );

6270 
	`as£π
–
p
->
ªadO∆y
==0 );

6271 
pBt
 = 
db
->
aDb
[
pOp
->
p1
].pBt;

6272 
rc
 = 
	`sqlôe3BåìIn¸Vacuum
(
pBt
);

6273 
	`VdbeBønchTakí
(
rc
==
SQLITE_DONE
,2);

6274 if–
rc
 ){

6275 if–
rc
!=
SQLITE_DONE
 ) 
ab‹t_due_to_îr‹
;

6276 
rc
 = 
SQLITE_OK
;

6277 
jump_to_p2
;

6293 
OP_Expúe
: {

6294 if–!
pOp
->
p1
 ){

6295 
	`sqlôe3ExpúePª∑ªdSèãmíts
(
db
);

6297 
p
->
expúed
 = 1;

6302 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


6318 
OP_TabÀLock
: {

6319 
u8
 
isWrôeLock
 = (u8)
pOp
->
p3
;

6320 if–
isWrôeLock
 || 0==(
db
->
Êags
&
SQLITE_RódUncommôãd
) ){

6321 
p1
 = 
pOp
->p1;

6322 
	`as£π
–
p1
>=0 &&Ö1<
db
->
nDb
 );

6323 
	`as£π
–
	`DbMaskTe°
(
p
->
båìMask
, 
p1
) );

6324 
	`as£π
–
isWrôeLock
==0 || isWriteLock==1 );

6325 
rc
 = 
	`sqlôe3BåìLockTabÀ
(
db
->
aDb
[
p1
].
pBt
, 
pOp
->
p2
, 
isWrôeLock
);

6326 if–
rc
 ){

6327 if–(
rc
&0xFF)==
SQLITE_LOCKED
 ){

6328 c⁄° *
z
 = 
pOp
->
p4
.z;

6329 
	`sqlôe3VdbeEº‹
(
p
, "d©aba£ÅabÀ i†locked: %s", 
z
);

6331 
ab‹t_due_to_îr‹
;

6338 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


6348 
OP_VBegö
: {

6349 
VTabÀ
 *
pVTab
;

6350 
pVTab
 = 
pOp
->
p4
.
pVèb
;

6351 
rc
 = 
	`sqlôe3VèbBegö
(
db
, 
pVTab
);

6352 if–
pVTab
 ) 
	`sqlôe3VèbImp‹tEºmsg
(
p
,ÖVTab->
pVèb
);

6353 if–
rc
 ) 
ab‹t_due_to_îr‹
;

6358 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


6364 
OP_VCª©e
: {

6365 
Mem
 
sMem
;

6366 c⁄° *
zTab
;

6368 
	`mem£t
(&
sMem
, 0, (sMem));

6369 
sMem
.
db
 = db;

6372 
	`as£π
–(
aMem
[
pOp
->
p2
].
Êags
 & 
MEM_Så
)!=0 );

6373 
	`as£π
–(
aMem
[
pOp
->
p2
].
Êags
 & 
MEM_Sètic
)!=0 );

6374 
rc
 = 
	`sqlôe3VdbeMemC›y
(&
sMem
, &
aMem
[
pOp
->
p2
]);

6375 
	`as£π
–
rc
==
SQLITE_OK
 );

6376 
zTab
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(&
sMem
);

6377 
	`as£π
–
zTab
 || 
db
->
mÆlocFaûed
 );

6378 if–
zTab
 ){

6379 
rc
 = 
	`sqlôe3VèbCÆlCª©e
(
db
, 
pOp
->
p1
, 
zTab
, &
p
->
zEºMsg
);

6381 
	`sqlôe3VdbeMemRñó£
(&
sMem
);

6382 if–
rc
 ) 
ab‹t_due_to_îr‹
;

6387 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


6393 
OP_VDe°roy
: {

6394 
db
->
nVDe°roy
++;

6395 
rc
 = 
	`sqlôe3VèbCÆlDe°roy
(
db
, 
pOp
->
p1
,ÖOp->
p4
.
z
);

6396 
db
->
nVDe°roy
--;

6397 if–
rc
 ) 
ab‹t_due_to_îr‹
;

6402 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


6409 
OP_VO≥n
: {

6410 
VdbeCurs‹
 *
pCur
;

6411 
sqlôe3_vèb_curs‹
 *
pVCur
;

6412 
sqlôe3_vèb
 *
pVèb
;

6413 c⁄° 
sqlôe3_moduÀ
 *
pModuÀ
;

6415 
	`as£π
–
p
->
bIsRódî
 );

6416 
pCur
 = 0;

6417 
pVCur
 = 0;

6418 
pVèb
 = 
pOp
->
p4
.pVtab->pVtab;

6419 if–
pVèb
==0 || 
	`NEVER
’Vèb->
pModuÀ
==0) ){

6420 
rc
 = 
SQLITE_LOCKED
;

6421 
ab‹t_due_to_îr‹
;

6423 
pModuÀ
 = 
pVèb
->pModule;

6424 
rc
 = 
pModuÀ
->
	`xO≥n
(
pVèb
, &
pVCur
);

6425 
	`sqlôe3VèbImp‹tEºmsg
(
p
, 
pVèb
);

6426 if–
rc
 ) 
ab‹t_due_to_îr‹
;

6429 
pVCur
->
pVèb
 =ÖVtab;

6432 
pCur
 = 
	`ÆloˇãCurs‹
(
p
, 
pOp
->
p1
, 0, -1, 
CURTYPE_VTAB
);

6433 if–
pCur
 ){

6434 
pCur
->
uc
.
pVCur
 =ÖVCur;

6435 
pVèb
->
nRef
++;

6437 
	`as£π
–
db
->
mÆlocFaûed
 );

6438 
pModuÀ
->
	`xClo£
(
pVCur
);

6439 
no_mem
;

6445 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


6465 
OP_VFûãr
: {

6466 
nArg
;

6467 
iQuîy
;

6468 c⁄° 
sqlôe3_moduÀ
 *
pModuÀ
;

6469 
Mem
 *
pQuîy
;

6470 
Mem
 *
pArgc
;

6471 
sqlôe3_vèb_curs‹
 *
pVCur
;

6472 
sqlôe3_vèb
 *
pVèb
;

6473 
VdbeCurs‹
 *
pCur
;

6474 
ªs
;

6475 
i
;

6476 
Mem
 **
≠Arg
;

6478 
pQuîy
 = &
aMem
[
pOp
->
p3
];

6479 
pArgc
 = &
pQuîy
[1];

6480 
pCur
 = 
p
->
≠C§
[
pOp
->
p1
];

6481 
	`as£π
–
	`memIsVÆid
(
pQuîy
) );

6482 
	`REGISTER_TRACE
(
pOp
->
p3
, 
pQuîy
);

6483 
	`as£π
–
pCur
->
eCurTy≥
==
CURTYPE_VTAB
 );

6484 
pVCur
 = 
pCur
->
uc
.pVCur;

6485 
pVèb
 = 
pVCur
->pVtab;

6486 
pModuÀ
 = 
pVèb
->pModule;

6489 
	`as£π
–(
pQuîy
->
Êags
&
MEM_I¡
)!=0 && 
pArgc
->flags==MEM_Int );

6490 
nArg
 = ()
pArgc
->
u
.
i
;

6491 
iQuîy
 = ()
pQuîy
->
u
.
i
;

6494 
ªs
 = 0;

6495 
≠Arg
 = 
p
->apArg;

6496 
i
 = 0; i<
nArg
; i++){

6497 
≠Arg
[
i
] = &
pArgc
[i+1];

6499 
rc
 = 
pModuÀ
->
	`xFûãr
(
pVCur
, 
iQuîy
, 
pOp
->
p4
.
z
, 
nArg
, 
≠Arg
);

6500 
	`sqlôe3VèbImp‹tEºmsg
(
p
, 
pVèb
);

6501 if–
rc
 ) 
ab‹t_due_to_îr‹
;

6502 
ªs
 = 
pModuÀ
->
	`xEof
(
pVCur
);

6503 
pCur
->
nuŒRow
 = 0;

6504 
	`VdbeBønchTakí
(
ªs
!=0,2);

6505 if–
ªs
 ) 
jump_to_p2
;

6510 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


6518 
OP_VCﬁumn
: {

6519 
sqlôe3_vèb
 *
pVèb
;

6520 c⁄° 
sqlôe3_moduÀ
 *
pModuÀ
;

6521 
Mem
 *
pDe°
;

6522 
sqlôe3_c⁄ãxt
 
sC⁄ãxt
;

6524 
VdbeCurs‹
 *
pCur
 = 
p
->
≠C§
[
pOp
->
p1
];

6525 
	`as£π
–
pCur
->
eCurTy≥
==
CURTYPE_VTAB
 );

6526 
	`as£π
–
pOp
->
p3
>0 &&ÖOp->p3<=(
p
->
nMem
+1 -Ö->
nCurs‹
) );

6527 
pDe°
 = &
aMem
[
pOp
->
p3
];

6528 
	`memAboutToCh™ge
(
p
, 
pDe°
);

6529 if–
pCur
->
nuŒRow
 ){

6530 
	`sqlôe3VdbeMemSëNuŒ
(
pDe°
);

6533 
pVèb
 = 
pCur
->
uc
.
pVCur
->pVtab;

6534 
pModuÀ
 = 
pVèb
->pModule;

6535 
	`as£π
–
pModuÀ
->
xCﬁumn
 );

6536 
	`mem£t
(&
sC⁄ãxt
, 0, (sContext));

6537 
sC⁄ãxt
.
pOut
 = 
pDe°
;

6538 
	`MemSëTy≥Fœg
(
pDe°
, 
MEM_NuŒ
);

6539 
rc
 = 
pModuÀ
->
	`xCﬁumn
(
pCur
->
uc
.
pVCur
, &
sC⁄ãxt
, 
pOp
->
p2
);

6540 
	`sqlôe3VèbImp‹tEºmsg
(
p
, 
pVèb
);

6541 if–
sC⁄ãxt
.
isEº‹
 ){

6542 
rc
 = 
sC⁄ãxt
.
isEº‹
;

6544 
	`sqlôe3VdbeCh™geEncodög
(
pDe°
, 
ícodög
);

6545 
	`REGISTER_TRACE
(
pOp
->
p3
, 
pDe°
);

6546 
	`UPDATE_MAX_BLOBSIZE
(
pDe°
);

6548 if–
	`sqlôe3VdbeMemTooBig
(
pDe°
) ){

6549 
too_big
;

6551 if–
rc
 ) 
ab‹t_due_to_îr‹
;

6556 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


6563 
OP_VNext
: {

6564 
sqlôe3_vèb
 *
pVèb
;

6565 c⁄° 
sqlôe3_moduÀ
 *
pModuÀ
;

6566 
ªs
;

6567 
VdbeCurs‹
 *
pCur
;

6569 
ªs
 = 0;

6570 
pCur
 = 
p
->
≠C§
[
pOp
->
p1
];

6571 
	`as£π
–
pCur
->
eCurTy≥
==
CURTYPE_VTAB
 );

6572 if–
pCur
->
nuŒRow
 ){

6575 
pVèb
 = 
pCur
->
uc
.
pVCur
->pVtab;

6576 
pModuÀ
 = 
pVèb
->pModule;

6577 
	`as£π
–
pModuÀ
->
xNext
 );

6585 
rc
 = 
pModuÀ
->
	`xNext
(
pCur
->
uc
.
pVCur
);

6586 
	`sqlôe3VèbImp‹tEºmsg
(
p
, 
pVèb
);

6587 if–
rc
 ) 
ab‹t_due_to_îr‹
;

6588 
ªs
 = 
pModuÀ
->
	`xEof
(
pCur
->
uc
.
pVCur
);

6589 
	`VdbeBønchTakí
(!
ªs
,2);

6590 if–!
ªs
 ){

6592 
jump_to_p2_™d_check_f‹_öãºu±
;

6594 
check_f‹_öãºu±
;

6598 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


6605 
OP_VRíame
: {

6606 
sqlôe3_vèb
 *
pVèb
;

6607 
Mem
 *
pName
;

6609 
pVèb
 = 
pOp
->
p4
.pVtab->pVtab;

6610 
pName
 = &
aMem
[
pOp
->
p1
];

6611 
	`as£π
–
pVèb
->
pModuÀ
->
xRíame
 );

6612 
	`as£π
–
	`memIsVÆid
(
pName
) );

6613 
	`as£π
–
p
->
ªadO∆y
==0 );

6614 
	`REGISTER_TRACE
(
pOp
->
p1
, 
pName
);

6615 
	`as£π
–
pName
->
Êags
 & 
MEM_Så
 );

6616 
	`ã°ˇ£
–
pName
->
íc
==
SQLITE_UTF8
 );

6617 
	`ã°ˇ£
–
pName
->
íc
==
SQLITE_UTF16BE
 );

6618 
	`ã°ˇ£
–
pName
->
íc
==
SQLITE_UTF16LE
 );

6619 
rc
 = 
	`sqlôe3VdbeCh™geEncodög
(
pName
, 
SQLITE_UTF8
);

6620 if–
rc
 ) 
ab‹t_due_to_îr‹
;

6621 
rc
 = 
pVèb
->
pModuÀ
->
	`xRíame
’Vèb, 
pName
->
z
);

6622 
	`sqlôe3VèbImp‹tEºmsg
(
p
, 
pVèb
);

6623 
p
->
expúed
 = 0;

6624 if–
rc
 ) 
ab‹t_due_to_îr‹
;

6629 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


6657 
OP_VUpd©e
: {

6658 
sqlôe3_vèb
 *
pVèb
;

6659 c⁄° 
sqlôe3_moduÀ
 *
pModuÀ
;

6660 
nArg
;

6661 
i
;

6662 
sqlôe_öt64
 
rowid
;

6663 
Mem
 **
≠Arg
;

6664 
Mem
 *
pX
;

6666 
	`as£π
–
pOp
->
p2
==1 ||ÖOp->
p5
==
OE_Faû
 ||ÖOp->p5==
OE_Rﬁlback


6667 || 
pOp
->
p5
==
OE_Ab‹t
 ||ÖOp->p5==
OE_Ign‹e
 ||ÖOp->p5==
OE_Rïœ˚


6669 
	`as£π
–
p
->
ªadO∆y
==0 );

6670 
pVèb
 = 
pOp
->
p4
.pVtab->pVtab;

6671 if–
pVèb
==0 || 
	`NEVER
’Vèb->
pModuÀ
==0) ){

6672 
rc
 = 
SQLITE_LOCKED
;

6673 
ab‹t_due_to_îr‹
;

6675 
pModuÀ
 = 
pVèb
->pModule;

6676 
nArg
 = 
pOp
->
p2
;

6677 
	`as£π
–
pOp
->
p4ty≥
==
P4_VTAB
 );

6678 if–
	`ALWAYS
(
pModuÀ
->
xUpd©e
) ){

6679 
u8
 
vèbOnC⁄Êi˘
 = 
db
->vtabOnConflict;

6680 
≠Arg
 = 
p
->apArg;

6681 
pX
 = &
aMem
[
pOp
->
p3
];

6682 
i
=0; i<
nArg
; i++){

6683 
	`as£π
–
	`memIsVÆid
(
pX
) );

6684 
	`memAboutToCh™ge
(
p
, 
pX
);

6685 
≠Arg
[
i
] = 
pX
;

6686 
pX
++;

6688 
db
->
vèbOnC⁄Êi˘
 = 
pOp
->
p5
;

6689 
rc
 = 
pModuÀ
->
	`xUpd©e
(
pVèb
, 
nArg
, 
≠Arg
, &
rowid
);

6690 
db
->
vèbOnC⁄Êi˘
 = vtabOnConflict;

6691 
	`sqlôe3VèbImp‹tEºmsg
(
p
, 
pVèb
);

6692 if–
rc
==
SQLITE_OK
 && 
pOp
->
p1
 ){

6693 
	`as£π
–
nArg
>1 && 
≠Arg
[0] && (≠Arg[0]->
Êags
&
MEM_NuŒ
) );

6694 
db
->
œ°Rowid
 =Üa°Rowid = 
rowid
;

6696 if–(
rc
&0xff)==
SQLITE_CONSTRAINT
 && 
pOp
->
p4
.
pVèb
->
bC⁄°øöt
 ){

6697 if–
pOp
->
p5
==
OE_Ign‹e
 ){

6698 
rc
 = 
SQLITE_OK
;

6700 
p
->
îr‹A˘i⁄
 = ((
pOp
->
p5
==
OE_Rïœ˚
Ë? 
OE_Ab‹t
 :ÖOp->p5);

6703 
p
->
nCh™ge
++;

6705 if–
rc
 ) 
ab‹t_due_to_îr‹
;

6711 #i‚de‡ 
SQLITE_OMIT_PAGER_PRAGMAS


6716 
OP_Pagecou¡
: {

6717 
pOut
 = 
	`out2PªªÀa£
(
p
, 
pOp
);

6718 
pOut
->
u
.
i
 = 
	`sqlôe3BåìLa°Page
(
db
->
aDb
[
pOp
->
p1
].
pBt
);

6724 #i‚de‡ 
SQLITE_OMIT_PAGER_PRAGMAS


6733 
OP_MaxPg˙t
: {

6734 
√wMax
;

6735 
Båì
 *
pBt
;

6737 
pOut
 = 
	`out2PªªÀa£
(
p
, 
pOp
);

6738 
pBt
 = 
db
->
aDb
[
pOp
->
p1
].pBt;

6739 
√wMax
 = 0;

6740 if–
pOp
->
p3
 ){

6741 
√wMax
 = 
	`sqlôe3BåìLa°Page
(
pBt
);

6742 if–
√wMax
 < ()
pOp
->
p3
 )ÇewMax = ()pOp->p3;

6744 
pOut
->
u
.
i
 = 
	`sqlôe3BåìMaxPageCou¡
(
pBt
, 
√wMax
);

6762 
OP_Inô
: {

6763 *
zTø˚
;

6764 *
z
;

6766 #i‚de‡
SQLITE_OMIT_TRACE


6767 if–
db
->
xTø˚


6768 && !
p
->
doögRîun


6769 && (
zTø˚
 = (
pOp
->
p4
.
z
 ?ÖOp->p4.z : 
p
->
zSql
))!=0

6771 
z
 = 
	`sqlôe3VdbeEx∑ndSql
(
p
, 
zTø˚
);

6772 
db
->
	`xTø˚
(db->
pTø˚Arg
, 
z
);

6773 
	`sqlôe3DbFªe
(
db
, 
z
);

6775 #ifde‡
SQLITE_USE_FCNTL_TRACE


6776 
zTø˚
 = (
pOp
->
p4
.
z
 ?ÖOp->p4.z : 
p
->
zSql
);

6777 if–
zTø˚
 ){

6778 
i
;

6779 
i
=0; i<
db
->
nDb
; i++){

6780 if–
	`DbMaskTe°
(
p
->
båìMask
, 
i
)==0 ) ;

6781 
	`sqlôe3_fûe_c⁄åﬁ
(
db
, db->
aDb
[
i
].
zName
, 
SQLITE_FCNTL_TRACE
, 
zTø˚
);

6785 #ifde‡
SQLITE_DEBUG


6786 if–(
db
->
Êags
 & 
SQLITE_SqlTø˚
)!=0

6787 && (
zTø˚
 = (
pOp
->
p4
.
z
 ?ÖOp->p4.z : 
p
->
zSql
))!=0

6789 
	`sqlôe3DebugPrötf
("SQL-åa˚: %s\n", 
zTø˚
);

6793 if–
pOp
->
p2
 ) 
jump_to_p2
;

6797 #ifde‡
SQLITE_ENABLE_CURSOR_HINTS


6805 
OP_Curs‹Höt
: {

6806 
VdbeCurs‹
 *
pC
;

6808 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

6809 
	`as£π
–
pOp
->
p4ty≥
==
P4_EXPR
 );

6810 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

6811 if–
pC
 ){

6812 
	`as£π
–
pC
->
eCurTy≥
==
CURTYPE_BTREE
 );

6813 
	`sqlôe3BåìCurs‹Höt
(
pC
->
uc
.
pCurs‹
, 
BTREE_HINT_RANGE
,

6814 
pOp
->
p4
.
pEx¥
, 
aMem
);

6832 
	`as£π
–
pOp
->
›code
==
OP_No›
 ||ÖOp->›code==
OP_Ex∂aö
 );

6844 #ifde‡
VDBE_PROFILE


6846 
u64
 
ídTime
 = 
	`sqlôe3Hwtime
();

6847 if–
ídTime
>
°¨t
 ) 
pOrigOp
->
cy˛es
 +=ÉndTime - start;

6848 
pOrigOp
->
˙t
++;

6857 #i‚de‡
NDEBUG


6858 
	`as£π
–
pOp
>=&
aOp
[-1] &&ÖOp<&aOp[
p
->
nOp
-1] );

6860 #ifde‡
SQLITE_DEBUG


6861 if–
db
->
Êags
 & 
SQLITE_VdbeTø˚
 ){

6862 
u8
 
›Pr›îty
 = 
sqlôe3OpcodePr›îty
[
pOrigOp
->
›code
];

6863 if–
rc
!=0 ) 
	`¥ötf
("rc=%d\n",rc);

6864 if–
›Pr›îty
 & (
OPFLG_OUT2
) ){

6865 
	`ªgi°îTø˚
(
pOrigOp
->
p2
, &
aMem
[pOrigOp->p2]);

6867 if–
›Pr›îty
 & 
OPFLG_OUT3
 ){

6868 
	`ªgi°îTø˚
(
pOrigOp
->
p3
, &
aMem
[pOrigOp->p3]);

6878 
ab‹t_due_to_îr‹
:

6879 if–
db
->
mÆlocFaûed
 ) 
rc
 = 
SQLITE_NOMEM_BKPT
;

6880 
	`as£π
–
rc
 );

6881 if–
p
->
zEºMsg
==0 && 
rc
!=
SQLITE_IOERR_NOMEM
 ){

6882 
	`sqlôe3VdbeEº‹
(
p
, "%s", 
	`sqlôe3EºSå
(
rc
));

6884 
p
->
rc
 =Ñc;

6885 
	`sqlôe3Sy°emEº‹
(
db
, 
rc
);

6886 
	`ã°ˇ£
–
sqlôe3GlobÆC⁄fig
.
xLog
!=0 );

6887 
	`sqlôe3_log
(
rc
, "statementábortsát %d: [%s] %s",

6888 ()(
pOp
 - 
aOp
), 
p
->
zSql
,Ö->
zEºMsg
);

6889 
	`sqlôe3VdbeHÆt
(
p
);

6890 if–
rc
==
SQLITE_IOERR_NOMEM
 ) 
	`sqlôe3OomFau…
(
db
);

6891 
rc
 = 
SQLITE_ERROR
;

6892 if–
ª£tSchemaOnFau…
>0 ){

6893 
	`sqlôe3Re£tO√Schema
(
db
, 
ª£tSchemaOnFau…
-1);

6899 
vdbe_ªtu∫
:

6900 
db
->
œ°Rowid
 =ÜastRowid;

6901 
	`ã°ˇ£
–
nVmSãp
>0 );

6902 
p
->
aCou¡î
[
SQLITE_STMTSTATUS_VM_STEP
] +()
nVmSãp
;

6903 
	`sqlôe3VdbeLóve
(
p
);

6904 
	`as£π
–
rc
!=
SQLITE_OK
 || 
nExåaDñëe
==0

6905 || 
	`sqlôe3_°æike
("DELETE%",
p
->
zSql
,0)!=0

6907  
rc
;

6912 
too_big
:

6913 
	`sqlôe3VdbeEº‹
(
p
, "string or blobÅoo big");

6914 
rc
 = 
SQLITE_TOOBIG
;

6915 
ab‹t_due_to_îr‹
;

6919 
no_mem
:

6920 
	`sqlôe3OomFau…
(
db
);

6921 
	`sqlôe3VdbeEº‹
(
p
, "out of memory");

6922 
rc
 = 
SQLITE_NOMEM_BKPT
;

6923 
ab‹t_due_to_îr‹
;

6928 
ab‹t_due_to_öãºu±
:

6929 
	`as£π
–
db
->
u1
.
isI¡îru±ed
 );

6930 
rc
 = 
db
->
mÆlocFaûed
 ? 
SQLITE_NOMEM_BKPT
 : 
SQLITE_INTERRUPT
;

6931 
p
->
rc
 =Ñc;

6932 
	`sqlôe3VdbeEº‹
(
p
, "%s", 
	`sqlôe3EºSå
(
rc
));

6933 
ab‹t_due_to_îr‹
;

6934 
	}
}

	@vdbe.h

18 #i‚de‡
_SQLITE_VDBE_H_


19 
	#_SQLITE_VDBE_H_


	)

20 
	~<°dio.h
>

27 
Vdbe
 
	tVdbe
;

33 
Mem
 
	tMem
;

34 
SubProgøm
 
	tSubProgøm
;

41 
	sVdbeOp
 {

42 
u8
 
	m›code
;

43 sig√d 
	mp4ty≥
;

44 
u8
 
	mnŸU£d1
;

45 
u8
 
	mp5
;

46 
	mp1
;

47 
	mp2
;

48 
	mp3
;

49 
	up4uni⁄
 {

50 
	mi
;

51 *
	mp
;

52 *
	mz
;

53 
i64
 *
	mpI64
;

54 *
	mpRól
;

55 
FuncDef
 *
	mpFunc
;

56 
sqlôe3_c⁄ãxt
 *
	mpCtx
;

57 
CﬁlSeq
 *
	mpCﬁl
;

58 
Mem
 *
	mpMem
;

59 
VTabÀ
 *
	mpVèb
;

60 
KeyInfo
 *
	mpKeyInfo
;

61 *
	mai
;

62 
SubProgøm
 *
	mpProgøm
;

63 
TabÀ
 *
	mpTab
;

64 #ifde‡
SQLITE_ENABLE_CURSOR_HINTS


65 
Ex¥
 *
	mpEx¥
;

67 (*
	mxAdv™˚
)(
	mBtCurs‹
 *, *);

68 } 
	mp4
;

69 #ifde‡
SQLITE_ENABLE_EXPLAIN_COMMENTS


70 *
	mzCommít
;

72 #ifde‡
VDBE_PROFILE


73 
u32
 
	m˙t
;

74 
u64
 
	mcy˛es
;

76 #ifde‡
SQLITE_VDBE_COVERAGE


77 
	miSrcLöe
;

80 
VdbeOp
 
	tVdbeOp
;

86 
	sSubProgøm
 {

87 
VdbeOp
 *
	maOp
;

88 
	mnOp
;

89 
	mnMem
;

90 
	mnC§
;

91 
	mnOn˚
;

92 *
	mtokí
;

93 
SubProgøm
 *
	mpNext
;

100 
	sVdbeOpLi°
 {

101 
u8
 
	m›code
;

102 sig√d 
	mp1
;

103 sig√d 
	mp2
;

104 sig√d 
	mp3
;

106 
VdbeOpLi°
 
	tVdbeOpLi°
;

111 
	#P4_NOTUSED
 0

	)

112 
	#P4_DYNAMIC
 (-1Ë

	)

113 
	#P4_STATIC
 (-2Ë

	)

114 
	#P4_COLLSEQ
 (-4Ë

	)

115 
	#P4_FUNCDEF
 (-5Ë

	)

116 
	#P4_KEYINFO
 (-6Ë

	)

117 
	#P4_EXPR
 (-7Ë

	)

118 
	#P4_MEM
 (-8Ë

	)

119 
	#P4_TRANSIENT
 0

	)

120 
	#P4_VTAB
 (-10Ë

	)

121 
	#P4_MPRINTF
 (-11Ë

	)

122 
	#P4_REAL
 (-12Ë

	)

123 
	#P4_INT64
 (-13Ë

	)

124 
	#P4_INT32
 (-14Ë

	)

125 
	#P4_INTARRAY
 (-15Ë

	)

126 
	#P4_SUBPROGRAM
 (-18Ë

	)

127 
	#P4_ADVANCE
 (-19Ë

	)

128 
	#P4_TABLE
 (-20Ë

	)

129 
	#P4_FUNCCTX
 (-21Ë

	)

132 
	#P5_C⁄°øötNŸNuŒ
 1

	)

133 
	#P5_C⁄°øötUnique
 2

	)

134 
	#P5_C⁄°øötCheck
 3

	)

135 
	#P5_C⁄°øötFK
 4

	)

141 
	#COLNAME_NAME
 0

	)

142 
	#COLNAME_DECLTYPE
 1

	)

143 
	#COLNAME_DATABASE
 2

	)

144 
	#COLNAME_TABLE
 3

	)

145 
	#COLNAME_COLUMN
 4

	)

146 #ifde‡
SQLITE_ENABLE_COLUMN_METADATA


147 
	#COLNAME_N
 5

	)

149 #ifde‡
SQLITE_OMIT_DECLTYPE


150 
	#COLNAME_N
 1

	)

152 
	#COLNAME_N
 2

	)

162 
	#ADDR
(
X
Ë(-1-(X))

	)

168 
	~"›codes.h
"

174 
Vdbe
 *
sqlôe3VdbeCª©e
(
P¨£
*);

175 
sqlôe3VdbeAddOp0
(
Vdbe
*,);

176 
sqlôe3VdbeAddOp1
(
Vdbe
*,,);

177 
sqlôe3VdbeAddOp2
(
Vdbe
*,,,);

178 
sqlôe3VdbeGŸo
(
Vdbe
*,);

179 
sqlôe3VdbeLﬂdSåög
(
Vdbe
*,,const *);

180 
sqlôe3VdbeMu…iLﬂd
(
Vdbe
*,,const *,...);

181 
sqlôe3VdbeAddOp3
(
Vdbe
*,,,,);

182 
sqlôe3VdbeAddOp4
(
Vdbe
*,,,,,c⁄° *
zP4
,);

183 
sqlôe3VdbeAddOp4Dup8
(
Vdbe
*,,,,,c⁄° 
u8
*,);

184 
sqlôe3VdbeAddOp4I¡
(
Vdbe
*,,,,,);

185 
sqlôe3VdbeEndC‹outöe
(
Vdbe
*,);

186 #i‡
deföed
(
SQLITE_DEBUG
Ë&& !deföed(
SQLITE_TEST_REALLOC_STRESS
)

187 
sqlôe3VdbeVîifyNoMÆlocRequúed
(
Vdbe
 *
p
, 
N
);

189 
	#sqlôe3VdbeVîifyNoMÆlocRequúed
(
A
,
B
)

	)

191 
VdbeOp
 *
sqlôe3VdbeAddOpLi°
(
Vdbe
*, 
nOp
, 
VdbeOpLi°
 c⁄° *
aOp
, 
iLöío
);

192 
sqlôe3VdbeAddP¨£SchemaOp
(
Vdbe
*,,*);

193 
sqlôe3VdbeCh™geOpcode
(
Vdbe
*, 
u32
 
addr
, 
u8
);

194 
sqlôe3VdbeCh™geP1
(
Vdbe
*, 
u32
 
addr
, 
P1
);

195 
sqlôe3VdbeCh™geP2
(
Vdbe
*, 
u32
 
addr
, 
P2
);

196 
sqlôe3VdbeCh™geP3
(
Vdbe
*, 
u32
 
addr
, 
P3
);

197 
sqlôe3VdbeCh™geP5
(
Vdbe
*, 
u8
 
P5
);

198 
sqlôe3VdbeJumpHîe
(
Vdbe
*, 
addr
);

199 
sqlôe3VdbeCh™geToNo›
(
Vdbe
*, 
addr
);

200 
sqlôe3VdbeDñëePri‹Opcode
(
Vdbe
*, 
u8
 
›
);

201 
sqlôe3VdbeCh™geP4
(
Vdbe
*, 
addr
, c⁄° *
zP4
, 
N
);

202 
sqlôe3VdbeSëP4KeyInfo
(
P¨£
*, 
Index
*);

203 
sqlôe3VdbeU£sBåì
(
Vdbe
*, );

204 
VdbeOp
 *
sqlôe3VdbeGëOp
(
Vdbe
*, );

205 
sqlôe3VdbeMakeLabñ
(
Vdbe
*);

206 
sqlôe3VdbeRunO∆yOn˚
(
Vdbe
*);

207 
sqlôe3VdbeReußbÀ
(
Vdbe
*);

208 
sqlôe3VdbeDñëe
(
Vdbe
*);

209 
sqlôe3VdbeCÀ¨Obje˘
(
sqlôe3
*,
Vdbe
*);

210 
sqlôe3VdbeMakeRódy
(
Vdbe
*,
P¨£
*);

211 
sqlôe3VdbeFöÆize
(
Vdbe
*);

212 
sqlôe3VdbeResﬁveLabñ
(
Vdbe
*, );

213 
sqlôe3VdbeCuºítAddr
(
Vdbe
*);

214 #ifde‡
SQLITE_DEBUG


215 
sqlôe3VdbeAs£πMayAb‹t
(
Vdbe
 *, );

217 
sqlôe3VdbeRe£tSãpResu…
(
Vdbe
*);

218 
sqlôe3VdbeRewöd
(
Vdbe
*);

219 
sqlôe3VdbeRe£t
(
Vdbe
*);

220 
sqlôe3VdbeSëNumCﬁs
(
Vdbe
*,);

221 
sqlôe3VdbeSëCﬁName
(
Vdbe
*, , , const *, (*)(*));

222 
	`sqlôe3VdbeCou¡Ch™ges
(
Vdbe
*);

223 
sqlôe3
 *
	`sqlôe3VdbeDb
(
Vdbe
*);

224 
	`sqlôe3VdbeSëSql
(
Vdbe
*, c⁄° *
z
, 
n
, );

225 
	`sqlôe3VdbeSw≠
(
Vdbe
*,Vdbe*);

226 
VdbeOp
 *
	`sqlôe3VdbeTakeOpAºay
(
Vdbe
*, *, *);

227 
sqlôe3_vÆue
 *
	`sqlôe3VdbeGëBoundVÆue
(
Vdbe
*, , 
u8
);

228 
	`sqlôe3VdbeSëV¨mask
(
Vdbe
*, );

229 #i‚de‡
SQLITE_OMIT_TRACE


230 *
	`sqlôe3VdbeEx∑ndSql
(
Vdbe
*, const *);

232 
	`sqlôe3MemCom∑ª
(c⁄° 
Mem
*, c⁄° Mem*, c⁄° 
CﬁlSeq
*);

234 
	`sqlôe3VdbeRec‹dU≈ack
(
KeyInfo
*,,c⁄° *,
U≈ackedRec‹d
*);

235 
	`sqlôe3VdbeRec‹dCom∑ª
(,c⁄° *,
U≈ackedRec‹d
*);

236 
	`sqlôe3VdbeRec‹dCom∑ªWôhSkù
(, c⁄° *, 
U≈ackedRec‹d
 *, );

237 
U≈ackedRec‹d
 *
	`sqlôe3VdbeAŒocU≈ackedRec‹d
(
KeyInfo
 *, *, , **);

239 (*
	tRec‹dCom∑ª
)(,c⁄° *,
	tU≈ackedRec‹d
*);

240 
Rec‹dCom∑ª
 
	`sqlôe3VdbeFödCom∑ª
(
U≈ackedRec‹d
*);

242 #i‚de‡
SQLITE_OMIT_TRIGGER


243 
	`sqlôe3VdbeLökSubProgøm
(
Vdbe
 *, 
SubProgøm
 *);

253 #ifde‡
SQLITE_ENABLE_EXPLAIN_COMMENTS


254 
	`sqlôe3VdbeCommít
(
Vdbe
*, const *, ...);

255 
	#VdbeCommít
(
X
Ë
sqlôe3VdbeCommít
 
	)
X

256 
	`sqlôe3VdbeNo›Commít
(
Vdbe
*, const *, ...);

257 
	#VdbeNo›Commít
(
X
Ë
sqlôe3VdbeNo›Commít
 
	)
X

258 #ifde‡
SQLITE_ENABLE_MODULE_COMMENTS


259 
	#VdbeModuÀCommít
(
X
Ë
sqlôe3VdbeNo›Commít
 
	)
X

261 
	#VdbeModuÀCommít
(
X
)

	)

264 
	#VdbeCommít
(
X
)

	)

265 
	#VdbeNo›Commít
(
X
)

	)

266 
	#VdbeModuÀCommít
(
X
)

	)

291 #ifde‡
SQLITE_VDBE_COVERAGE


292 
	`sqlôe3VdbeSëLöeNumbî
(
Vdbe
*,);

293 
	#VdbeCovîage
(
v
Ë
	`sqlôe3VdbeSëLöeNumbî
(v,
__LINE__
)

	)

294 
	#VdbeCovîageIf
(
v
,
x
Ëif(x)
	`sqlôe3VdbeSëLöeNumbî
(v,
__LINE__
)

	)

295 
	#VdbeCovîageAlwaysTakí
(
v
Ë
	`sqlôe3VdbeSëLöeNumbî
(v,2);

	)

296 
	#VdbeCovîageNevîTakí
(
v
Ë
	`sqlôe3VdbeSëLöeNumbî
(v,1);

	)

297 
	#VDBE_OFFSET_LINENO
(
x
Ë(
__LINE__
+x)

	)

299 
	#VdbeCovîage
(
v
)

	)

300 
	#VdbeCovîageIf
(
v
,
x
)

	)

301 
	#VdbeCovîageAlwaysTakí
(
v
)

	)

302 
	#VdbeCovîageNevîTakí
(
v
)

	)

303 
	#VDBE_OFFSET_LINENO
(
x
Ë0

	)

306 #ifde‡
SQLITE_ENABLE_STMT_SCANSTATUS


307 
	`sqlôe3VdbeSˇnSètus
(
Vdbe
*, , , , 
LogE°
, const *);

309 
	#sqlôe3VdbeSˇnSètus
(
a
,
b
,
c
,
d
,
e
)

	)

	@vdbeInt.h

18 #i‚de‡
_VDBEINT_H_


19 
	#_VDBEINT_H_


	)

25 #i‚de‡
SQLITE_MAX_SCHEMA_RETRY


26 
	#SQLITE_MAX_SCHEMA_RETRY
 50

	)

33 #i‡!
deföed
(
SQLITE_OMIT_EXPLAIN
Ë|| !deföed(
NDEBUG
) \

34 || 
deföed
(
VDBE_PROFILE
Ë|| 
	$deföed
(
SQLITE_DEBUG
)

35 
	#VDBE_DISPLAY_P4
 1

	)

37 
	#VDBE_DISPLAY_P4
 0

	)

45 
VdbeOp
 
	tOp
;

50 
	tBoﬁ
;

53 
VdbeS‹ãr
 
	tVdbeS‹ãr
;

56 
Ex∂aö
 
	tEx∂aö
;

59 
AuxD©a
 
	tAuxD©a
;

62 
	#CURTYPE_BTREE
 0

	)

63 
	#CURTYPE_SORTER
 1

	)

64 
	#CURTYPE_VTAB
 2

	)

65 
	#CURTYPE_PSEUDO
 3

	)

77 
VdbeCurs‹
 
	tVdbeCurs‹
;

78 
	sVdbeCurs‹
 {

79 
u8
 
eCurTy≥
;

80 
i8
 
iDb
;

81 
u8
 
nuŒRow
;

82 
u8
 
de„ºedMovëo
;

83 
u8
 
isTabÀ
;

84 #ifde‡
SQLITE_DEBUG


85 
u8
 
£ekOp
;

86 
u8
 
wrFœg
;

88 
Boﬁ
 
isEphemîÆ
:1;

89 
Boﬁ
 
u£R™domRowid
:1;

90 
Boﬁ
 
isOrdîed
:1;

91 
Pgno
 
pgnoRoŸ
;

92 
i16
 
nFõld
;

93 
u16
 
nHdrP¨£d
;

95 
BtCurs‹
 *
pCurs‹
;

96 
sqlôe3_vèb_curs‹
 *
pVCur
;

97 
p£udoTabÀReg
;

98 
VdbeS‹ãr
 *
pS‹ãr
;

99 } 
uc
;

100 
Båì
 *
pBt
;

101 
KeyInfo
 *
pKeyInfo
;

102 
£ekResu…
;

103 
i64
 
£qCou¡
;

104 
i64
 
movëoT¨gë
;

105 
VdbeCurs‹
 *
pA…Curs‹
;

106 *
aA…M≠
;

107 #ifde‡
SQLITE_ENABLE_COLUMN_USED_MASK


108 
u64
 
maskU£d
;

120 
u32
 
ˇcheSètus
;

121 
u32
 
∑ylﬂdSize
;

122 
u32
 
szRow
;

123 
u32
 
iHdrOff£t
;

124 c⁄° 
u8
 *
aRow
;

125 
u32
 *
aOff£t
;

126 
u32
 
aTy≥
[1];

153 
VdbeFøme
 
	tVdbeFøme
;

154 
	sVdbeFøme
 {

155 
Vdbe
 *
v
;

156 
VdbeFøme
 *
pP¨ít
;

157 
Op
 *
aOp
;

158 
i64
 *
™Exec
;

159 
Mem
 *
aMem
;

160 
u8
 *
aOn˚Fœg
;

161 
VdbeCurs‹
 **
≠C§
;

162 *
tokí
;

163 
i64
 
œ°Rowid
;

164 
AuxD©a
 *
pAuxD©a
;

165 
nCurs‹
;

166 
pc
;

167 
nOp
;

168 
nMem
;

169 
nOn˚Fœg
;

170 
nChûdMem
;

171 
nChûdC§
;

172 
nCh™ge
;

173 
nDbCh™ge
;

176 
	#VdbeFømeMem
(
p
Ë((
Mem
 *)&((
u8
 *Ì)[
	`ROUND8
((
VdbeFøme
))])

	)

181 
	#CACHE_STALE
 0

	)

188 
	sMem
 {

189 
	uMemVÆue
 {

190 
r
;

191 
i64
 
i
;

192 
nZîo
;

193 
FuncDef
 *
pDef
;

194 
RowSë
 *
pRowSë
;

195 
VdbeFøme
 *
pFøme
;

196 } 
u
;

197 
u16
 
Êags
;

198 
u8
 
íc
;

199 
u8
 
eSubty≥
;

200 
n
;

201 *
z
;

203 *
zMÆloc
;

204 
szMÆloc
;

205 
u32
 
uTemp
;

206 
sqlôe3
 *
db
;

207 (*
xDñ
)(*);

208 #ifde‡
SQLITE_DEBUG


209 
Mem
 *
pSc›yFrom
;

210 *
pFûÀr
;

218 
	#MEMCELLSIZE
 
	`off£tof
(
Mem
,
zMÆloc
)

	)

232 
	#MEM_NuŒ
 0x0001

	)

233 
	#MEM_Så
 0x0002

	)

234 
	#MEM_I¡
 0x0004

	)

235 
	#MEM_Ról
 0x0008

	)

236 
	#MEM_Blob
 0x0010

	)

237 
	#MEM_AffMask
 0x001‡

	)

238 
	#MEM_RowSë
 0x0020

	)

239 
	#MEM_Føme
 0x0040

	)

240 
	#MEM_Undeföed
 0x0080

	)

241 
	#MEM_CÀ¨ed
 0x0100

	)

242 
	#MEM_Ty≥Mask
 0x81f‡

	)

250 
	#MEM_Tîm
 0x0200

	)

251 
	#MEM_Dyn
 0x0400

	)

252 
	#MEM_Sètic
 0x0800

	)

253 
	#MEM_Ephem
 0x1000

	)

254 
	#MEM_Agg
 0x2000

	)

255 
	#MEM_Zîo
 0x4000

	)

256 
	#MEM_Subty≥
 0x8000

	)

257 #ifde‡
SQLITE_OMIT_INCRBLOB


258 #unde‡
MEM_Zîo


259 
	#MEM_Zîo
 0x0000

	)

265 
	#VdbeMemDy«mic
(
X
) \

266 (((
X
)->
Êags
&(
MEM_Agg
|
MEM_Dyn
|
MEM_RowSë
|
MEM_Føme
))!=0)

	)

271 
	#MemSëTy≥Fœg
(
p
, 
f
) \

272 ((
p
)->
Êags
 = (’)->Êags&~(
MEM_Ty≥Mask
|
MEM_Zîo
))|
f
)

	)

278 #ifde‡
SQLITE_DEBUG


279 
	#memIsVÆid
(
M
Ë((M)->
Êags
 & 
MEM_Undeföed
)==0

	)

289 
	sAuxD©a
 {

290 
iOp
;

291 
iArg
;

292 *
pAux
;

293 (*
xDñëe
)(*);

294 
AuxD©a
 *
pNext
;

310 
	ssqlôe3_c⁄ãxt
 {

311 
Mem
 *
pOut
;

312 
FuncDef
 *
pFunc
;

313 
Mem
 *
pMem
;

314 
Vdbe
 *
pVdbe
;

315 
iOp
;

316 
isEº‹
;

317 
u8
 
skùFœg
;

318 
u8
 
fEº‹OrAux
;

319 
u8
 
¨gc
;

320 
sqlôe3_vÆue
 *
¨gv
[1];

327 
	sEx∂aö
 {

328 
Vdbe
 *
pVdbe
;

329 
SåAccum
 
°r
;

330 
nIndít
;

331 
u16
 
aIndít
[100];

332 
zBa£
[100];

338 
	tb·
;

340 
SˇnSètus
 
	tSˇnSètus
;

341 
	sSˇnSètus
 {

342 
addrEx∂aö
;

343 
addrLo›
;

344 
addrVisô
;

345 
iSñe˘ID
;

346 
LogE°
 
nE°
;

347 *
zName
;

357 
	sVdbe
 {

358 
sqlôe3
 *
db
;

359 
Op
 *
aOp
;

360 
Mem
 *
aMem
;

361 
Mem
 **
≠Arg
;

362 
Mem
 *
aCﬁName
;

363 
Mem
 *
pResu…Së
;

364 
P¨£
 *
pP¨£
;

365 
nMem
;

366 
nOp
;

367 
nCurs‹
;

368 
u32
 
magic
;

369 *
zEºMsg
;

370 
Vdbe
 *
pPªv
,*
pNext
;

371 
VdbeCurs‹
 **
≠C§
;

372 
Mem
 *
aV¨
;

373 **
azV¨
;

374 
ynV¨
 
nV¨
;

375 
ynV¨
 
nzV¨
;

376 
u32
 
ˇcheCå
;

377 
pc
;

378 
rc
;

379 #ifde‡
SQLITE_DEBUG


380 
rcAµ
;

382 
u16
 
nResCﬁumn
;

383 
u8
 
îr‹A˘i⁄
;

384 
b·
 
expúed
:1;

385 
b·
 
doögRîun
:1;

386 
u8
 
möWrôeFûeF‹m©
;

387 
b·
 
ex∂aö
:2;

388 
b·
 
ch™geC¡On
:1;

389 
b·
 
runO∆yOn˚
:1;

390 
b·
 
u£sStmtJou∫Æ
:1;

391 
b·
 
ªadO∆y
:1;

392 
b·
 
bIsRódî
:1;

393 
b·
 
isPª∑ªV2
:1;

394 
nCh™ge
;

395 
yDbMask
 
båìMask
;

396 
yDbMask
 
lockMask
;

397 
iSèãmít
;

398 
u32
 
aCou¡î
[5];

399 #i‚de‡
SQLITE_OMIT_TRACE


400 
i64
 
°¨tTime
;

402 
i64
 
iCuºítTime
;

403 
i64
 
nFkC⁄°øöt
;

404 
i64
 
nStmtDefC⁄s
;

405 
i64
 
nStmtDefImmC⁄s
;

406 *
zSql
;

407 *
pFªe
;

408 
VdbeFøme
 *
pFøme
;

409 
VdbeFøme
 *
pDñFøme
;

410 
nFøme
;

411 
u32
 
expmask
;

412 
SubProgøm
 *
pProgøm
;

413 
nOn˚Fœg
;

414 
u8
 *
aOn˚Fœg
;

415 
AuxD©a
 *
pAuxD©a
;

416 #ifde‡
SQLITE_ENABLE_STMT_SCANSTATUS


417 
i64
 *
™Exec
;

418 
nSˇn
;

419 
SˇnSètus
 *
aSˇn
;

426 
	#VDBE_MAGIC_INIT
 0x26b˚Ø5

	)

427 
	#VDBE_MAGIC_RUN
 0xbdf20da3

	)

428 
	#VDBE_MAGIC_HALT
 0x519c2973

	)

429 
	#VDBE_MAGIC_DEAD
 0xb606c3c8

	)

435 
	sPªUpd©e
 {

436 
Vdbe
 *
v
;

437 
VdbeCurs‹
 *
pC§
;

438 
›
;

439 
u8
 *
aRec‹d
;

440 
KeyInfo
 
keyöfo
;

441 
U≈ackedRec‹d
 *
pU≈acked
;

442 
U≈ackedRec‹d
 *
pNewU≈acked
;

443 
iNewReg
;

444 
i64
 
iKey1
;

445 
i64
 
iKey2
;

446 
iPKey
;

447 
Mem
 *
aNew
;

453 
	`sqlôe3VdbeEº‹
(
Vdbe
*, const *, ...);

454 
	`sqlôe3VdbeFªeCurs‹
(
Vdbe
 *, 
VdbeCurs‹
*);

455 
	`sqlôeVdbeP›Sèck
(
Vdbe
*,);

456 
	`sqlôe3VdbeCurs‹Movëo
(
VdbeCurs‹
**, *);

457 
	`sqlôe3VdbeCurs‹Re°‹e
(
VdbeCurs‹
*);

458 #i‡
	`deföed
(
SQLITE_DEBUG
Ë|| deföed(
VDBE_PROFILE
)

459 
	`sqlôe3VdbePrötOp
(
FILE
*, , 
Op
*);

461 
u32
 
	`sqlôe3VdbeSîülTy≥Lí
(u32);

462 
u8
 
	`sqlôe3VdbeO√ByãSîülTy≥Lí
(u8);

463 
u32
 
	`sqlôe3VdbeSîülTy≥
(
Mem
*, , u32*);

464 
u32
 
	`sqlôe3VdbeSîülPut
(*, 
Mem
*, u32);

465 
u32
 
	`sqlôe3VdbeSîülGë
(c⁄° *, u32, 
Mem
*);

466 
	`sqlôe3VdbeDñëeAuxD©a
(
sqlôe3
*, 
AuxD©a
**, , );

468 
	`sqlôe2BåìKeyCom∑ª
(
BtCurs‹
 *, const *, , , *);

469 
	`sqlôe3VdbeIdxKeyCom∑ª
(
sqlôe3
*,
VdbeCurs‹
*,
U≈ackedRec‹d
*,*);

470 
	`sqlôe3VdbeIdxRowid
(
sqlôe3
*, 
BtCurs‹
*, 
i64
*);

471 
	`sqlôe3VdbeExec
(
Vdbe
*);

472 
	`sqlôe3VdbeLi°
(
Vdbe
*);

473 
	`sqlôe3VdbeHÆt
(
Vdbe
*);

474 
	`sqlôe3VdbeCh™geEncodög
(
Mem
 *, );

475 
	`sqlôe3VdbeMemTooBig
(
Mem
*);

476 
	`sqlôe3VdbeMemC›y
(
Mem
*, const Mem*);

477 
	`sqlôe3VdbeMemShÆlowC›y
(
Mem
*, const Mem*, );

478 
	`sqlôe3VdbeMemMove
(
Mem
*, Mem*);

479 
	`sqlôe3VdbeMemNulTîmö©e
(
Mem
*);

480 
	`sqlôe3VdbeMemSëSå
(
Mem
*, c⁄° *, , 
u8
, (*)(*));

481 
	`sqlôe3VdbeMemSëI¡64
(
Mem
*, 
i64
);

482 #ifde‡
SQLITE_OMIT_FLOATING_POINT


483 
	#sqlôe3VdbeMemSëDoubÀ
 
sqlôe3VdbeMemSëI¡64


	)

485 
	`sqlôe3VdbeMemSëDoubÀ
(
Mem
*, );

487 
	`sqlôe3VdbeMemInô
(
Mem
*,
sqlôe3
*,
u16
);

488 
	`sqlôe3VdbeMemSëNuŒ
(
Mem
*);

489 
	`sqlôe3VdbeMemSëZîoBlob
(
Mem
*,);

490 
	`sqlôe3VdbeMemSëRowSë
(
Mem
*);

491 
	`sqlôe3VdbeMemMakeWrôóbÀ
(
Mem
*);

492 
	`sqlôe3VdbeMemSåögify
(
Mem
*, 
u8
, u8);

493 
i64
 
	`sqlôe3VdbeI¡VÆue
(
Mem
*);

494 
	`sqlôe3VdbeMemI¡egîify
(
Mem
*);

495 
	`sqlôe3VdbeRólVÆue
(
Mem
*);

496 
	`sqlôe3VdbeI¡egîAfföôy
(
Mem
*);

497 
	`sqlôe3VdbeMemRólify
(
Mem
*);

498 
	`sqlôe3VdbeMemNumîify
(
Mem
*);

499 
	`sqlôe3VdbeMemCa°
(
Mem
*,
u8
,u8);

500 
	`sqlôe3VdbeMemFromBåì
(
BtCurs‹
*,
u32
,u32,,
Mem
*);

501 
	`sqlôe3VdbeMemRñó£
(
Mem
 *
p
);

502 
	`sqlôe3VdbeMemFöÆize
(
Mem
*, 
FuncDef
*);

503 c⁄° *
	`sqlôe3OpcodeName
();

504 
	`sqlôe3VdbeMemGrow
(
Mem
 *
pMem
, 
n
, 
¥e£rve
);

505 
	`sqlôe3VdbeMemCÀ¨AndResize
(
Mem
 *
pMem
, 
n
);

506 
	`sqlôe3VdbeClo£Sèãmít
(
Vdbe
 *, );

507 
	`sqlôe3VdbeFømeDñëe
(
VdbeFøme
*);

508 
	`sqlôe3VdbeFømeRe°‹e
(
VdbeFøme
 *);

509 #ifde‡
SQLITE_ENABLE_PREUPDATE_HOOK


510 
	`sqlôe3VdbePªUpd©eHook
(
Vdbe
*,
VdbeCurs‹
*,,c⁄° *,
TabÀ
*,
i64
,);

512 
	`sqlôe3VdbeTøns„rEº‹
(
Vdbe
 *
p
);

514 
	`sqlôe3VdbeS‹ãrInô
(
sqlôe3
 *, , 
VdbeCurs‹
 *);

515 
	`sqlôe3VdbeS‹ãrRe£t
(
sqlôe3
 *, 
VdbeS‹ãr
 *);

516 
	`sqlôe3VdbeS‹ãrClo£
(
sqlôe3
 *, 
VdbeCurs‹
 *);

517 
	`sqlôe3VdbeS‹ãrRowkey
(c⁄° 
VdbeCurs‹
 *, 
Mem
 *);

518 
	`sqlôe3VdbeS‹ãrNext
(
sqlôe3
 *, c⁄° 
VdbeCurs‹
 *, *);

519 
	`sqlôe3VdbeS‹ãrRewöd
(c⁄° 
VdbeCurs‹
 *, *);

520 
	`sqlôe3VdbeS‹ãrWrôe
(c⁄° 
VdbeCurs‹
 *, 
Mem
 *);

521 
	`sqlôe3VdbeS‹ãrCom∑ª
(c⁄° 
VdbeCurs‹
 *, 
Mem
 *, , *);

523 #i‡!
	`deföed
(
SQLITE_OMIT_SHARED_CACHE
)

524 
	`sqlôe3VdbeE¡î
(
Vdbe
*);

526 
	#sqlôe3VdbeE¡î
(
X
)

	)

529 #i‡!
	`deföed
(
SQLITE_OMIT_SHARED_CACHE
Ë&& 
SQLITE_THREADSAFE
>0

530 
	`sqlôe3VdbeLóve
(
Vdbe
*);

532 
	#sqlôe3VdbeLóve
(
X
)

	)

535 #ifde‡
SQLITE_DEBUG


536 
	`sqlôe3VdbeMemAboutToCh™ge
(
Vdbe
*,
Mem
*);

537 
	`sqlôe3VdbeCheckMemInv¨ü¡s
(
Mem
*);

540 #i‚de‡
SQLITE_OMIT_FOREIGN_KEY


541 
	`sqlôe3VdbeCheckFk
(
Vdbe
 *, );

543 
	#sqlôe3VdbeCheckFk
(
p
,
i
Ë0

	)

546 
	`sqlôe3VdbeMemTøn¶©e
(
Mem
*, 
u8
);

547 #ifde‡
SQLITE_DEBUG


548 
	`sqlôe3VdbePrötSql
(
Vdbe
*);

549 
	`sqlôe3VdbeMemPªâyPröt
(
Mem
 *
pMem
, *
zBuf
);

551 
	`sqlôe3VdbeMemH™dÀBom
(
Mem
 *
pMem
);

553 #i‚de‡
SQLITE_OMIT_INCRBLOB


554 
	`sqlôe3VdbeMemEx∑ndBlob
(
Mem
 *);

555 
	#Ex∑ndBlob
(
P
Ë(((P)->
Êags
&
MEM_Zîo
)?
	`sqlôe3VdbeMemEx∑ndBlob
(P):0)

	)

557 
	#sqlôe3VdbeMemEx∑ndBlob
(
x
Ë
SQLITE_OK


	)

558 
	#Ex∑ndBlob
(
P
Ë
SQLITE_OK


	)

	@vdbeapi.c

16 
	~"sqlôeI¡.h
"

17 
	~"vdbeI¡.h
"

19 #i‚de‡
SQLITE_OMIT_DEPRECATED


28 
	$sqlôe3_expúed
(
sqlôe3_°mt
 *
pStmt
){

29 
Vdbe
 *
p
 = (Vdbe*)
pStmt
;

30  
p
==0 ||Ö->
expúed
;

31 
	}
}

39 
	$vdbeSa„ty
(
Vdbe
 *
p
){

40 if–
p
->
db
==0 ){

41 
	`sqlôe3_log
(
SQLITE_MISUSE
, "API called with finalizedÖrepared statement");

46 
	}
}

47 
	$vdbeSa„tyNŸNuŒ
(
Vdbe
 *
p
){

48 if–
p
==0 ){

49 
	`sqlôe3_log
(
SQLITE_MISUSE
, "API called with NULLÖrepared statement");

52  
	`vdbeSa„ty
(
p
);

54 
	}
}

56 #i‚de‡
SQLITE_OMIT_TRACE


61 
SQLITE_NOINLINE
 
	$övokeProfûeCÆlback
(
sqlôe3
 *
db
, 
Vdbe
 *
p
){

62 
sqlôe3_öt64
 
iNow
;

63 
	`as£π
–
p
->
°¨tTime
>0 );

64 
	`as£π
–
db
->
xProfûe
!=0 );

65 
	`as£π
–
db
->
öô
.
busy
==0 );

66 
	`as£π
–
p
->
zSql
!=0 );

67 
	`sqlôe3OsCuºítTimeI¡64
(
db
->
pVfs
, &
iNow
);

68 
db
->
	`xProfûe
(db->
pProfûeArg
, 
p
->
zSql
, (
iNow
 -Ö->
°¨tTime
)*1000000);

69 
p
->
°¨tTime
 = 0;

70 
	}
}

75 
	#checkProfûeCÆlback
(
DB
,
P
) \

76 if–((
P
)->
°¨tTime
)>0 ){ 
	`övokeProfûeCÆlback
(
DB
,P); }

	)

78 
	#checkProfûeCÆlback
(
DB
,
P
Ë

	)

90 
	$sqlôe3_föÆize
(
sqlôe3_°mt
 *
pStmt
){

91 
rc
;

92 if–
pStmt
==0 ){

95 
rc
 = 
SQLITE_OK
;

97 
Vdbe
 *
v
 = (Vdbe*)
pStmt
;

98 
sqlôe3
 *
db
 = 
v
->db;

99 if–
	`vdbeSa„ty
(
v
ËË 
SQLITE_MISUSE_BKPT
;

100 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

101 
	`checkProfûeCÆlback
(
db
, 
v
);

102 
rc
 = 
	`sqlôe3VdbeFöÆize
(
v
);

103 
rc
 = 
	`sqlôe3ApiExô
(
db
,Ñc);

104 
	`sqlôe3LóveMuãxAndClo£Zombõ
(
db
);

106  
rc
;

107 
	}
}

117 
	$sqlôe3_ª£t
(
sqlôe3_°mt
 *
pStmt
){

118 
rc
;

119 if–
pStmt
==0 ){

120 
rc
 = 
SQLITE_OK
;

122 
Vdbe
 *
v
 = (Vdbe*)
pStmt
;

123 
sqlôe3
 *
db
 = 
v
->db;

124 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

125 
	`checkProfûeCÆlback
(
db
, 
v
);

126 
rc
 = 
	`sqlôe3VdbeRe£t
(
v
);

127 
	`sqlôe3VdbeRewöd
(
v
);

128 
	`as£π
–(
rc
 & (
db
->
îrMask
))==rc );

129 
rc
 = 
	`sqlôe3ApiExô
(
db
,Ñc);

130 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

132  
rc
;

133 
	}
}

138 
	$sqlôe3_˛ór_bödögs
(
sqlôe3_°mt
 *
pStmt
){

139 
i
;

140 
rc
 = 
SQLITE_OK
;

141 
Vdbe
 *
p
 = (Vdbe*)
pStmt
;

142 #i‡
SQLITE_THREADSAFE


143 
sqlôe3_muãx
 *
muãx
 = ((
Vdbe
*)
pStmt
)->
db
->mutex;

145 
	`sqlôe3_muãx_íãr
(
muãx
);

146 
i
=0; i<
p
->
nV¨
; i++){

147 
	`sqlôe3VdbeMemRñó£
(&
p
->
aV¨
[
i
]);

148 
p
->
aV¨
[
i
].
Êags
 = 
MEM_NuŒ
;

150 if–
p
->
isPª∑ªV2
 &&Ö->
expmask
 ){

151 
p
->
expúed
 = 1;

153 
	`sqlôe3_muãx_Àave
(
muãx
);

154  
rc
;

155 
	}
}

162 c⁄° *
	$sqlôe3_vÆue_blob
(
sqlôe3_vÆue
 *
pVÆ
){

163 
Mem
 *
p
 = (Mem*)
pVÆ
;

164 if–
p
->
Êags
 & (
MEM_Blob
|
MEM_Så
) ){

165 if–
	`sqlôe3VdbeMemEx∑ndBlob
(
p
)!=
SQLITE_OK
 ){

166 
	`as£π
–
p
->
Êags
==
MEM_NuŒ
 &&Ö->
z
==0 );

169 
p
->
Êags
 |
MEM_Blob
;

170  
p
->
n
 ?Ö->
z
 : 0;

172  
	`sqlôe3_vÆue_ãxt
(
pVÆ
);

174 
	}
}

175 
	$sqlôe3_vÆue_byãs
(
sqlôe3_vÆue
 *
pVÆ
){

176  
	`sqlôe3VÆueByãs
(
pVÆ
, 
SQLITE_UTF8
);

177 
	}
}

178 
	$sqlôe3_vÆue_byãs16
(
sqlôe3_vÆue
 *
pVÆ
){

179  
	`sqlôe3VÆueByãs
(
pVÆ
, 
SQLITE_UTF16NATIVE
);

180 
	}
}

181 
	$sqlôe3_vÆue_doubÀ
(
sqlôe3_vÆue
 *
pVÆ
){

182  
	`sqlôe3VdbeRólVÆue
((
Mem
*)
pVÆ
);

183 
	}
}

184 
	$sqlôe3_vÆue_öt
(
sqlôe3_vÆue
 *
pVÆ
){

185  ()
	`sqlôe3VdbeI¡VÆue
((
Mem
*)
pVÆ
);

186 
	}
}

187 
sqlôe_öt64
 
	$sqlôe3_vÆue_öt64
(
sqlôe3_vÆue
 *
pVÆ
){

188  
	`sqlôe3VdbeI¡VÆue
((
Mem
*)
pVÆ
);

189 
	}
}

190 
	$sqlôe3_vÆue_subty≥
(
sqlôe3_vÆue
 *
pVÆ
){

191 
Mem
 *
pMem
 = (Mem*)
pVÆ
;

192  ((
pMem
->
Êags
 & 
MEM_Subty≥
Ë?ÖMem->
eSubty≥
 : 0);

193 
	}
}

194 c⁄° *
	$sqlôe3_vÆue_ãxt
(
sqlôe3_vÆue
 *
pVÆ
){

195  (c⁄° *)
	`sqlôe3VÆueText
(
pVÆ
, 
SQLITE_UTF8
);

196 
	}
}

197 #i‚de‡
SQLITE_OMIT_UTF16


198 c⁄° *
	$sqlôe3_vÆue_ãxt16
(
sqlôe3_vÆue
* 
pVÆ
){

199  
	`sqlôe3VÆueText
(
pVÆ
, 
SQLITE_UTF16NATIVE
);

200 
	}
}

201 c⁄° *
	$sqlôe3_vÆue_ãxt16be
(
sqlôe3_vÆue
 *
pVÆ
){

202  
	`sqlôe3VÆueText
(
pVÆ
, 
SQLITE_UTF16BE
);

203 
	}
}

204 c⁄° *
	$sqlôe3_vÆue_ãxt16À
(
sqlôe3_vÆue
 *
pVÆ
){

205  
	`sqlôe3VÆueText
(
pVÆ
, 
SQLITE_UTF16LE
);

206 
	}
}

212 
	$sqlôe3_vÆue_ty≥
(
sqlôe3_vÆue
* 
pVÆ
){

213 c⁄° 
u8
 
aTy≥
[] = {

214 
SQLITE_BLOB
,

215 
SQLITE_NULL
,

216 
SQLITE_TEXT
,

217 
SQLITE_NULL
,

218 
SQLITE_INTEGER
,

219 
SQLITE_NULL
,

220 
SQLITE_INTEGER
,

221 
SQLITE_NULL
,

222 
SQLITE_FLOAT
,

223 
SQLITE_NULL
,

224 
SQLITE_FLOAT
,

225 
SQLITE_NULL
,

226 
SQLITE_INTEGER
,

227 
SQLITE_NULL
,

228 
SQLITE_INTEGER
,

229 
SQLITE_NULL
,

230 
SQLITE_BLOB
,

231 
SQLITE_NULL
,

232 
SQLITE_TEXT
,

233 
SQLITE_NULL
,

234 
SQLITE_INTEGER
,

235 
SQLITE_NULL
,

236 
SQLITE_INTEGER
,

237 
SQLITE_NULL
,

238 
SQLITE_FLOAT
,

239 
SQLITE_NULL
,

240 
SQLITE_FLOAT
,

241 
SQLITE_NULL
,

242 
SQLITE_INTEGER
,

243 
SQLITE_NULL
,

244 
SQLITE_INTEGER
,

245 
SQLITE_NULL
,

247  
aTy≥
[
pVÆ
->
Êags
&
MEM_AffMask
];

248 
	}
}

252 
sqlôe3_vÆue
 *
	$sqlôe3_vÆue_dup
(c⁄° 
sqlôe3_vÆue
 *
pOrig
){

253 
sqlôe3_vÆue
 *
pNew
;

254 if–
pOrig
==0 )  0;

255 
pNew
 = 
	`sqlôe3_mÆloc
( (*pNew) );

256 if–
pNew
==0 )  0;

257 
	`mem£t
(
pNew
, 0, (*pNew));

258 
	`mem˝y
(
pNew
, 
pOrig
, 
MEMCELLSIZE
);

259 
pNew
->
Êags
 &~
MEM_Dyn
;

260 
pNew
->
db
 = 0;

261 if–
pNew
->
Êags
&(
MEM_Så
|
MEM_Blob
) ){

262 
pNew
->
Êags
 &~(
MEM_Sètic
|
MEM_Dyn
);

263 
pNew
->
Êags
 |
MEM_Ephem
;

264 if–
	`sqlôe3VdbeMemMakeWrôóbÀ
(
pNew
)!=
SQLITE_OK
 ){

265 
	`sqlôe3VÆueFªe
(
pNew
);

266 
pNew
 = 0;

269  
pNew
;

270 
	}
}

275 
	$sqlôe3_vÆue_‰ì
(
sqlôe3_vÆue
 *
pOld
){

276 
	`sqlôe3VÆueFªe
(
pOld
);

277 
	}
}

291 
£tResu…SåOrEº‹
(

292 
sqlôe3_c⁄ãxt
 *
pCtx
,

293 c⁄° *
z
,

294 
n
,

295 
u8
 
íc
,

296 (*
xDñ
)(*)

298 if–
	`sqlôe3VdbeMemSëSå
(
pCtx
->
pOut
, 
z
, 
n
, 
íc
, 
xDñ
)==
SQLITE_TOOBIG
 ){

299 
	`sqlôe3_ªsu…_îr‹_toobig
(
pCtx
);

301 
	}
}

302 
övokeVÆueDe°ru˘‹
(

303 c⁄° *
p
,

304 (*
xDñ
)(*),

305 
sqlôe3_c⁄ãxt
 *
pCtx


307 
	`as£π
–
xDñ
!=
SQLITE_DYNAMIC
 );

308 if–
xDñ
==0 ){

310 }if–
xDñ
==
SQLITE_TRANSIENT
 ){

313 
	`xDñ
((*)
p
);

315 if–
pCtx
 ) 
	`sqlôe3_ªsu…_îr‹_toobig
(pCtx);

316  
SQLITE_TOOBIG
;

317 
	}
}

318 
sqlôe3_ªsu…_blob
(

319 
sqlôe3_c⁄ãxt
 *
pCtx
,

320 c⁄° *
z
,

321 
n
,

322 (*
xDñ
)(*)

324 
	`as£π
–
n
>=0 );

325 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCtx
->
pOut
->
db
->
muãx
) );

326 
	`£tResu…SåOrEº‹
(
pCtx
, 
z
, 
n
, 0, 
xDñ
);

327 
	}
}

328 
sqlôe3_ªsu…_blob64
(

329 
sqlôe3_c⁄ãxt
 *
pCtx
,

330 c⁄° *
z
,

331 
sqlôe3_uöt64
 
n
,

332 (*
xDñ
)(*)

334 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCtx
->
pOut
->
db
->
muãx
) );

335 
	`as£π
–
xDñ
!=
SQLITE_DYNAMIC
 );

336 if–
n
>0x7fffffff ){

337 ()
	`övokeVÆueDe°ru˘‹
(
z
, 
xDñ
, 
pCtx
);

339 
	`£tResu…SåOrEº‹
(
pCtx
, 
z
, ()
n
, 0, 
xDñ
);

341 
	}
}

342 
	$sqlôe3_ªsu…_doubÀ
(
sqlôe3_c⁄ãxt
 *
pCtx
, 
rVÆ
){

343 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCtx
->
pOut
->
db
->
muãx
) );

344 
	`sqlôe3VdbeMemSëDoubÀ
(
pCtx
->
pOut
, 
rVÆ
);

345 
	}
}

346 
	$sqlôe3_ªsu…_îr‹
(
sqlôe3_c⁄ãxt
 *
pCtx
, c⁄° *
z
, 
n
){

347 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCtx
->
pOut
->
db
->
muãx
) );

348 
pCtx
->
isEº‹
 = 
SQLITE_ERROR
;

349 
pCtx
->
fEº‹OrAux
 = 1;

350 
	`sqlôe3VdbeMemSëSå
(
pCtx
->
pOut
, 
z
, 
n
, 
SQLITE_UTF8
, 
SQLITE_TRANSIENT
);

351 
	}
}

352 #i‚de‡
SQLITE_OMIT_UTF16


353 
	$sqlôe3_ªsu…_îr‹16
(
sqlôe3_c⁄ãxt
 *
pCtx
, c⁄° *
z
, 
n
){

354 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCtx
->
pOut
->
db
->
muãx
) );

355 
pCtx
->
isEº‹
 = 
SQLITE_ERROR
;

356 
pCtx
->
fEº‹OrAux
 = 1;

357 
	`sqlôe3VdbeMemSëSå
(
pCtx
->
pOut
, 
z
, 
n
, 
SQLITE_UTF16NATIVE
, 
SQLITE_TRANSIENT
);

358 
	}
}

360 
	$sqlôe3_ªsu…_öt
(
sqlôe3_c⁄ãxt
 *
pCtx
, 
iVÆ
){

361 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCtx
->
pOut
->
db
->
muãx
) );

362 
	`sqlôe3VdbeMemSëI¡64
(
pCtx
->
pOut
, (
i64
)
iVÆ
);

363 
	}
}

364 
	$sqlôe3_ªsu…_öt64
(
sqlôe3_c⁄ãxt
 *
pCtx
, 
i64
 
iVÆ
){

365 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCtx
->
pOut
->
db
->
muãx
) );

366 
	`sqlôe3VdbeMemSëI¡64
(
pCtx
->
pOut
, 
iVÆ
);

367 
	}
}

368 
	$sqlôe3_ªsu…_nuŒ
(
sqlôe3_c⁄ãxt
 *
pCtx
){

369 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCtx
->
pOut
->
db
->
muãx
) );

370 
	`sqlôe3VdbeMemSëNuŒ
(
pCtx
->
pOut
);

371 
	}
}

372 
	$sqlôe3_ªsu…_subty≥
(
sqlôe3_c⁄ãxt
 *
pCtx
, 
eSubty≥
){

373 
Mem
 *
pOut
 = 
pCtx
->pOut;

374 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pOut
->
db
->
muãx
) );

375 
pOut
->
eSubty≥
 =ÉSubtype & 0xff;

376 
pOut
->
Êags
 |
MEM_Subty≥
;

377 
	}
}

378 
sqlôe3_ªsu…_ãxt
(

379 
sqlôe3_c⁄ãxt
 *
pCtx
,

380 c⁄° *
z
,

381 
n
,

382 (*
xDñ
)(*)

384 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCtx
->
pOut
->
db
->
muãx
) );

385 
	`£tResu…SåOrEº‹
(
pCtx
, 
z
, 
n
, 
SQLITE_UTF8
, 
xDñ
);

386 
	}
}

387 
sqlôe3_ªsu…_ãxt64
(

388 
sqlôe3_c⁄ãxt
 *
pCtx
,

389 c⁄° *
z
,

390 
sqlôe3_uöt64
 
n
,

391 (*
xDñ
)(*),

392 
íc


394 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCtx
->
pOut
->
db
->
muãx
) );

395 
	`as£π
–
xDñ
!=
SQLITE_DYNAMIC
 );

396 if–
íc
==
SQLITE_UTF16
 )Én¯
SQLITE_UTF16NATIVE
;

397 if–
n
>0x7fffffff ){

398 ()
	`övokeVÆueDe°ru˘‹
(
z
, 
xDñ
, 
pCtx
);

400 
	`£tResu…SåOrEº‹
(
pCtx
, 
z
, ()
n
, 
íc
, 
xDñ
);

402 
	}
}

403 #i‚de‡
SQLITE_OMIT_UTF16


404 
sqlôe3_ªsu…_ãxt16
(

405 
sqlôe3_c⁄ãxt
 *
pCtx
,

406 c⁄° *
z
,

407 
n
,

408 (*
xDñ
)(*)

410 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCtx
->
pOut
->
db
->
muãx
) );

411 
	`£tResu…SåOrEº‹
(
pCtx
, 
z
, 
n
, 
SQLITE_UTF16NATIVE
, 
xDñ
);

412 
	}
}

413 
sqlôe3_ªsu…_ãxt16be
(

414 
sqlôe3_c⁄ãxt
 *
pCtx
,

415 c⁄° *
z
,

416 
n
,

417 (*
xDñ
)(*)

419 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCtx
->
pOut
->
db
->
muãx
) );

420 
	`£tResu…SåOrEº‹
(
pCtx
, 
z
, 
n
, 
SQLITE_UTF16BE
, 
xDñ
);

421 
	}
}

422 
sqlôe3_ªsu…_ãxt16À
(

423 
sqlôe3_c⁄ãxt
 *
pCtx
,

424 c⁄° *
z
,

425 
n
,

426 (*
xDñ
)(*)

428 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCtx
->
pOut
->
db
->
muãx
) );

429 
	`£tResu…SåOrEº‹
(
pCtx
, 
z
, 
n
, 
SQLITE_UTF16LE
, 
xDñ
);

430 
	}
}

432 
	$sqlôe3_ªsu…_vÆue
(
sqlôe3_c⁄ãxt
 *
pCtx
, 
sqlôe3_vÆue
 *
pVÆue
){

433 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCtx
->
pOut
->
db
->
muãx
) );

434 
	`sqlôe3VdbeMemC›y
(
pCtx
->
pOut
, 
pVÆue
);

435 
	}
}

436 
	$sqlôe3_ªsu…_zîoblob
(
sqlôe3_c⁄ãxt
 *
pCtx
, 
n
){

437 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCtx
->
pOut
->
db
->
muãx
) );

438 
	`sqlôe3VdbeMemSëZîoBlob
(
pCtx
->
pOut
, 
n
);

439 
	}
}

440 
	$sqlôe3_ªsu…_zîoblob64
(
sqlôe3_c⁄ãxt
 *
pCtx
, 
u64
 
n
){

441 
Mem
 *
pOut
 = 
pCtx
->pOut;

442 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pOut
->
db
->
muãx
) );

443 if–
n
>(
u64
)
pOut
->
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
] ){

444  
SQLITE_TOOBIG
;

446 
	`sqlôe3VdbeMemSëZîoBlob
(
pCtx
->
pOut
, ()
n
);

447  
SQLITE_OK
;

448 
	}
}

449 
	$sqlôe3_ªsu…_îr‹_code
(
sqlôe3_c⁄ãxt
 *
pCtx
, 
îrCode
){

450 
pCtx
->
isEº‹
 = 
îrCode
;

451 
pCtx
->
fEº‹OrAux
 = 1;

452 #ifde‡
SQLITE_DEBUG


453 if–
pCtx
->
pVdbe
 )ÖCtx->pVdbe->
rcAµ
 = 
îrCode
;

455 if–
pCtx
->
pOut
->
Êags
 & 
MEM_NuŒ
 ){

456 
	`sqlôe3VdbeMemSëSå
(
pCtx
->
pOut
, 
	`sqlôe3EºSå
(
îrCode
), -1,

457 
SQLITE_UTF8
, 
SQLITE_STATIC
);

459 
	}
}

462 
	$sqlôe3_ªsu…_îr‹_toobig
(
sqlôe3_c⁄ãxt
 *
pCtx
){

463 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCtx
->
pOut
->
db
->
muãx
) );

464 
pCtx
->
isEº‹
 = 
SQLITE_TOOBIG
;

465 
pCtx
->
fEº‹OrAux
 = 1;

466 
	`sqlôe3VdbeMemSëSå
(
pCtx
->
pOut
, "string or blobÅoo big", -1,

467 
SQLITE_UTF8
, 
SQLITE_STATIC
);

468 
	}
}

471 
	$sqlôe3_ªsu…_îr‹_nomem
(
sqlôe3_c⁄ãxt
 *
pCtx
){

472 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCtx
->
pOut
->
db
->
muãx
) );

473 
	`sqlôe3VdbeMemSëNuŒ
(
pCtx
->
pOut
);

474 
pCtx
->
isEº‹
 = 
SQLITE_NOMEM_BKPT
;

475 
pCtx
->
fEº‹OrAux
 = 1;

476 
	`sqlôe3OomFau…
(
pCtx
->
pOut
->
db
);

477 
	}
}

483 
	$doWÆCÆlbacks
(
sqlôe3
 *
db
){

484 
rc
 = 
SQLITE_OK
;

485 #i‚de‡
SQLITE_OMIT_WAL


486 
i
;

487 
i
=0; i<
db
->
nDb
; i++){

488 
Båì
 *
pBt
 = 
db
->
aDb
[
i
].pBt;

489 if–
pBt
 ){

490 
nE¡ry
;

491 
	`sqlôe3BåìE¡î
(
pBt
);

492 
nE¡ry
 = 
	`sqlôe3PagîWÆCÆlback
(
	`sqlôe3BåìPagî
(
pBt
));

493 
	`sqlôe3BåìLóve
(
pBt
);

494 if–
db
->
xWÆCÆlback
 && 
nE¡ry
>0 && 
rc
==
SQLITE_OK
 ){

495 
rc
 = 
db
->
	`xWÆCÆlback
(db->
pWÆArg
, db, db->
aDb
[
i
].
zName
, 
nE¡ry
);

500  
rc
;

501 
	}
}

513 
	$sqlôe3Sãp
(
Vdbe
 *
p
){

514 
sqlôe3
 *
db
;

515 
rc
;

517 
	`as£π
(
p
);

518 if–
p
->
magic
!=
VDBE_MAGIC_RUN
 ){

535 #ifde‡
SQLITE_OMIT_AUTORESET


536 if–(
rc
 = 
p
->rc&0xff)==
SQLITE_BUSY
 ||Ñc==
SQLITE_LOCKED
 ){

537 
	`sqlôe3_ª£t
((
sqlôe3_°mt
*)
p
);

539  
SQLITE_MISUSE_BKPT
;

542 
	`sqlôe3_ª£t
((
sqlôe3_°mt
*)
p
);

547 
db
 = 
p
->db;

548 if–
db
->
mÆlocFaûed
 ){

549 
p
->
rc
 = 
SQLITE_NOMEM
;

550  
SQLITE_NOMEM_BKPT
;

553 if–
p
->
pc
<=0 &&Ö->
expúed
 ){

554 
p
->
rc
 = 
SQLITE_SCHEMA
;

555 
rc
 = 
SQLITE_ERROR
;

556 
íd_of_°ï
;

558 if–
p
->
pc
<0 ){

563 if–
db
->
nVdbeA˘ive
==0 ){

564 
db
->
u1
.
isI¡îru±ed
 = 0;

567 
	`as£π
–
db
->
nVdbeWrôe
>0 || db->
autoCommô
==0

568 || (
db
->
nDe„ºedC⁄s
==0 && db->
nDe„ºedImmC⁄s
==0)

571 #i‚de‡
SQLITE_OMIT_TRACE


572 if–
db
->
xProfûe
 && !db->
öô
.
busy
 && 
p
->
zSql
 ){

573 
	`sqlôe3OsCuºítTimeI¡64
(
db
->
pVfs
, &
p
->
°¨tTime
);

575 
	`as£π
–
p
->
°¨tTime
==0 );

579 
db
->
nVdbeA˘ive
++;

580 if–
p
->
ªadO∆y
==0 ) 
db
->
nVdbeWrôe
++;

581 if–
p
->
bIsRódî
 ) 
db
->
nVdbeRód
++;

582 
p
->
pc
 = 0;

584 #ifde‡
SQLITE_DEBUG


585 
p
->
rcAµ
 = 
SQLITE_OK
;

587 #i‚de‡
SQLITE_OMIT_EXPLAIN


588 if–
p
->
ex∂aö
 ){

589 
rc
 = 
	`sqlôe3VdbeLi°
(
p
);

593 
db
->
nVdbeExec
++;

594 
rc
 = 
	`sqlôe3VdbeExec
(
p
);

595 
db
->
nVdbeExec
--;

598 #i‚de‡
SQLITE_OMIT_TRACE


600 if–
rc
!=
SQLITE_ROW
 ) 
	`checkProfûeCÆlback
(
db
, 
p
);

603 if–
rc
==
SQLITE_DONE
 ){

604 
	`as£π
–
p
->
rc
==
SQLITE_OK
 );

605 
p
->
rc
 = 
	`doWÆCÆlbacks
(
db
);

606 if–
p
->
rc
!=
SQLITE_OK
 ){

607 
rc
 = 
SQLITE_ERROR
;

611 
db
->
îrCode
 = 
rc
;

612 if–
SQLITE_NOMEM
==
	`sqlôe3ApiExô
(
p
->
db
,Ö->
rc
) ){

613 
p
->
rc
 = 
SQLITE_NOMEM_BKPT
;

615 
íd_of_°ï
:

623 
	`as£π
–
rc
==
SQLITE_ROW
 ||Ñc==
SQLITE_DONE
 ||Ñc==
SQLITE_ERROR


624 || (
rc
&0xff)==
SQLITE_BUSY
 ||Ñc==
SQLITE_MISUSE


626 
	`as£π
–(
p
->
rc
!=
SQLITE_ROW
 &&Ö->rc!=
SQLITE_DONE
Ë||Ö->rc=ı->
rcAµ
 );

627 if–
p
->
isPª∑ªV2
 && 
rc
!=
SQLITE_ROW
 &&Ñc!=
SQLITE_DONE
 ){

632 
rc
 = 
	`sqlôe3VdbeTøns„rEº‹
(
p
);

634  (
rc
&
db
->
îrMask
);

635 
	}
}

642 
	$sqlôe3_°ï
(
sqlôe3_°mt
 *
pStmt
){

643 
rc
 = 
SQLITE_OK
;

644 
rc2
 = 
SQLITE_OK
;

645 
Vdbe
 *
v
 = (Vdbe*)
pStmt
;

646 
˙t
 = 0;

647 
sqlôe3
 *
db
;

649 if–
	`vdbeSa„tyNŸNuŒ
(
v
) ){

650  
SQLITE_MISUSE_BKPT
;

652 
db
 = 
v
->db;

653 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

654 
v
->
doögRîun
 = 0;

655  (
rc
 = 
	`sqlôe3Sãp
(
v
))==
SQLITE_SCHEMA


656 && 
˙t
++ < 
SQLITE_MAX_SCHEMA_RETRY
 ){

657 
ßvedPc
 = 
v
->
pc
;

658 
rc2
 = 
rc
 = 
	`sqlôe3Rïª∑ª
(
v
);

659 if–
rc
!=
SQLITE_OK
) ;

660 
	`sqlôe3_ª£t
(
pStmt
);

661 if–
ßvedPc
>=0 ) 
v
->
doögRîun
 = 1;

662 
	`as£π
–
v
->
expúed
==0 );

664 if–
rc2
!=
SQLITE_OK
 ){

673 c⁄° *
zEº
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
db
->
pEº
);

674 
	`sqlôe3DbFªe
(
db
, 
v
->
zEºMsg
);

675 if–!
db
->
mÆlocFaûed
 ){

676 
v
->
zEºMsg
 = 
	`sqlôe3DbSåDup
(
db
, 
zEº
);

677 
v
->
rc
 = 
rc2
;

679 
v
->
zEºMsg
 = 0;

680 
v
->
rc
 =Ñ¯
SQLITE_NOMEM_BKPT
;

683 
rc
 = 
	`sqlôe3ApiExô
(
db
,Ñc);

684 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

685  
rc
;

686 
	}
}

693 *
	$sqlôe3_u£r_d©a
(
sqlôe3_c⁄ãxt
 *
p
){

694 
	`as£π
–
p
 &&Ö->
pFunc
 );

695  
p
->
pFunc
->
pU£rD©a
;

696 
	}
}

708 
sqlôe3
 *
	$sqlôe3_c⁄ãxt_db_h™dÀ
(
sqlôe3_c⁄ãxt
 *
p
){

709 
	`as£π
–
p
 &&Ö->
pOut
 );

710  
p
->
pOut
->
db
;

711 
	}
}

720 
sqlôe3_öt64
 
	$sqlôe3StmtCuºítTime
(
sqlôe3_c⁄ãxt
 *
p
){

721 
rc
;

722 #i‚de‡
SQLITE_ENABLE_STAT3_OR_STAT4


723 
sqlôe3_öt64
 *
piTime
 = &
p
->
pVdbe
->
iCuºítTime
;

724 
	`as£π
–
p
->
pVdbe
!=0 );

726 
sqlôe3_öt64
 
iTime
 = 0;

727 
sqlôe3_öt64
 *
piTime
 = 
p
->
pVdbe
!=0 ? &p->pVdbe->
iCuºítTime
 : &
iTime
;

729 if–*
piTime
==0 ){

730 
rc
 = 
	`sqlôe3OsCuºítTimeI¡64
(
p
->
pOut
->
db
->
pVfs
, 
piTime
);

731 if–
rc
 ) *
piTime
 = 0;

733  *
piTime
;

734 
	}
}

744 
	$sqlôe3InvÆidFun˘i⁄
(

745 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

746 
NŸU£d
,

747 
sqlôe3_vÆue
 **
NŸU£d2


749 c⁄° *
zName
 = 
c⁄ãxt
->
pFunc
->zName;

750 *
zEº
;

751 
	`UNUSED_PARAMETER2
(
NŸU£d
, 
NŸU£d2
);

752 
zEº
 = 
	`sqlôe3_m¥ötf
(

753 "u«bÀÅÿu£ fun˘i⁄ %†öÅhêªque°ed c⁄ãxt", 
zName
);

754 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, 
zEº
, -1);

755 
	`sqlôe3_‰ì
(
zEº
);

756 
	}
}

762 
SQLITE_NOINLINE
 *
	$¸óãAggC⁄ãxt
(
sqlôe3_c⁄ãxt
 *
p
, 
nByã
){

763 
Mem
 *
pMem
 = 
p
->pMem;

764 
	`as£π
–(
pMem
->
Êags
 & 
MEM_Agg
)==0 );

765 if–
nByã
<=0 ){

766 
	`sqlôe3VdbeMemSëNuŒ
(
pMem
);

767 
pMem
->
z
 = 0;

769 
	`sqlôe3VdbeMemCÀ¨AndResize
(
pMem
, 
nByã
);

770 
pMem
->
Êags
 = 
MEM_Agg
;

771 
pMem
->
u
.
pDef
 = 
p
->
pFunc
;

772 if–
pMem
->
z
 ){

773 
	`mem£t
(
pMem
->
z
, 0, 
nByã
);

776  (*)
pMem
->
z
;

777 
	}
}

784 *
	$sqlôe3_aggªg©e_c⁄ãxt
(
sqlôe3_c⁄ãxt
 *
p
, 
nByã
){

785 
	`as£π
–
p
 &&Ö->
pFunc
 &&Ö->pFunc->
xFöÆize
 );

786 
	`as£π
–
	`sqlôe3_muãx_hñd
(
p
->
pOut
->
db
->
muãx
) );

787 
	`ã°ˇ£
–
nByã
<0 );

788 if–(
p
->
pMem
->
Êags
 & 
MEM_Agg
)==0 ){

789  
	`¸óãAggC⁄ãxt
(
p
, 
nByã
);

791  (*)
p
->
pMem
->
z
;

793 
	}
}

799 *
	$sqlôe3_gë_auxd©a
(
sqlôe3_c⁄ãxt
 *
pCtx
, 
iArg
){

800 
AuxD©a
 *
pAuxD©a
;

802 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCtx
->
pOut
->
db
->
muãx
) );

803 #i‡
SQLITE_ENABLE_STAT3_OR_STAT4


804 if–
pCtx
->
pVdbe
==0 )  0;

806 
	`as£π
–
pCtx
->
pVdbe
!=0 );

808 
pAuxD©a
=
pCtx
->
pVdbe
->pAuxD©a;ÖAuxD©a;ÖAuxD©aıAuxD©a->
pNext
){

809 if–
pAuxD©a
->
iOp
==
pCtx
->iO∞&&ÖAuxD©a->
iArg
==iArg ) ;

812  (
pAuxD©a
 ?ÖAuxD©a->
pAux
 : 0);

813 
	}
}

820 
sqlôe3_£t_auxd©a
(

821 
sqlôe3_c⁄ãxt
 *
pCtx
,

822 
iArg
,

823 *
pAux
,

824 (*
xDñëe
)(*)

826 
AuxD©a
 *
pAuxD©a
;

827 
Vdbe
 *
pVdbe
 = 
pCtx
->pVdbe;

829 
	`as£π
–
	`sqlôe3_muãx_hñd
(
pCtx
->
pOut
->
db
->
muãx
) );

830 if–
iArg
<0 ) 
Áûed
;

831 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


832 if–
pVdbe
==0 ) 
Áûed
;

834 
	`as£π
–
pVdbe
!=0 );

837 
pAuxD©a
=
pVdbe
->pAuxD©a;ÖAuxD©a;ÖAuxD©aıAuxD©a->
pNext
){

838 if–
pAuxD©a
->
iOp
==
pCtx
->iO∞&&ÖAuxD©a->
iArg
==iArg ) ;

840 if–
pAuxD©a
==0 ){

841 
pAuxD©a
 = 
	`sqlôe3DbMÆlocZîo
(
pVdbe
->
db
, (
AuxD©a
));

842 if–!
pAuxD©a
 ) 
Áûed
;

843 
pAuxD©a
->
iOp
 = 
pCtx
->iOp;

844 
pAuxD©a
->
iArg
 = iArg;

845 
pAuxD©a
->
pNext
 = 
pVdbe
->pAuxData;

846 
pVdbe
->
pAuxD©a
 =ÖAuxData;

847 if–
pCtx
->
fEº‹OrAux
==0 ){

848 
pCtx
->
isEº‹
 = 0;

849 
pCtx
->
fEº‹OrAux
 = 1;

851 }if–
pAuxD©a
->
xDñëe
 ){

852 
pAuxD©a
->
	`xDñëe
’AuxD©a->
pAux
);

855 
pAuxD©a
->
pAux
 =ÖAux;

856 
pAuxD©a
->
xDñëe
 = xDelete;

859 
Áûed
:

860 if–
xDñëe
 ){

861 
	`xDñëe
(
pAux
);

863 
	}
}

865 #i‚de‡
SQLITE_OMIT_DEPRECATED


875 
	$sqlôe3_aggªg©e_cou¡
(
sqlôe3_c⁄ãxt
 *
p
){

876 
	`as£π
–
p
 &&Ö->
pMem
 &&Ö->
pFunc
 &&Ö->pFunc->
xFöÆize
 );

877  
p
->
pMem
->
n
;

878 
	}
}

884 
	$sqlôe3_cﬁumn_cou¡
(
sqlôe3_°mt
 *
pStmt
){

885 
Vdbe
 *
pVm
 = (Vdbê*)
pStmt
;

886  
pVm
 ?ÖVm->
nResCﬁumn
 : 0;

887 
	}
}

893 
	$sqlôe3_d©a_cou¡
(
sqlôe3_°mt
 *
pStmt
){

894 
Vdbe
 *
pVm
 = (Vdbê*)
pStmt
;

895 if–
pVm
==0 ||ÖVm->
pResu…Së
==0 )  0;

896  
pVm
->
nResCﬁumn
;

897 
	}
}

902 c⁄° 
Mem
 *
	$cﬁumnNuŒVÆue
(){

912 c⁄° 
Mem
 
nuŒMem


913 #i‡
	`deföed
(
SQLITE_DEBUG
Ë&& deföed(
__GNUC__
)

914 
	`__©åibuã__
((
	`Æig√d
(8)))

918  (
u16
)
MEM_NuŒ
,

919  (
u8
)0,

920  (
u8
)0,

925  (
u32
)0,

926  (
sqlôe3
*)0,

928 #ifde‡
SQLITE_DEBUG


929  (
Mem
*)0,

933  &
nuŒMem
;

934 
	}
}

942 
Mem
 *
	$cﬁumnMem
(
sqlôe3_°mt
 *
pStmt
, 
i
){

943 
Vdbe
 *
pVm
;

944 
Mem
 *
pOut
;

946 
pVm
 = (
Vdbe
 *)
pStmt
;

947 if–
pVm
 &&ÖVm->
pResu…Së
!=0 && 
i
<pVm->
nResCﬁumn
 && i>=0 ){

948 
	`sqlôe3_muãx_íãr
(
pVm
->
db
->
muãx
);

949 
pOut
 = &
pVm
->
pResu…Së
[
i
];

951 if–
pVm
 && 
	`ALWAYS
’Vm->
db
) ){

952 
	`sqlôe3_muãx_íãr
(
pVm
->
db
->
muãx
);

953 
	`sqlôe3Eº‹
(
pVm
->
db
, 
SQLITE_RANGE
);

955 
pOut
 = (
Mem
*)
	`cﬁumnNuŒVÆue
();

957  
pOut
;

958 
	}
}

978 
	$cﬁumnMÆlocFaûuª
(
sqlôe3_°mt
 *
pStmt
)

985 
Vdbe
 *
p
 = (Vdbê*)
pStmt
;

986 if–
p
 ){

987 
p
->
rc
 = 
	`sqlôe3ApiExô
’->
db
,Ö->rc);

988 
	`sqlôe3_muãx_Àave
(
p
->
db
->
muãx
);

990 
	}
}

996 c⁄° *
	$sqlôe3_cﬁumn_blob
(
sqlôe3_°mt
 *
pStmt
, 
i
){

997 c⁄° *
vÆ
;

998 
vÆ
 = 
	`sqlôe3_vÆue_blob
–
	`cﬁumnMem
(
pStmt
,
i
) );

1003 
	`cﬁumnMÆlocFaûuª
(
pStmt
);

1004  
vÆ
;

1005 
	}
}

1006 
	$sqlôe3_cﬁumn_byãs
(
sqlôe3_°mt
 *
pStmt
, 
i
){

1007 
vÆ
 = 
	`sqlôe3_vÆue_byãs
–
	`cﬁumnMem
(
pStmt
,
i
) );

1008 
	`cﬁumnMÆlocFaûuª
(
pStmt
);

1009  
vÆ
;

1010 
	}
}

1011 
	$sqlôe3_cﬁumn_byãs16
(
sqlôe3_°mt
 *
pStmt
, 
i
){

1012 
vÆ
 = 
	`sqlôe3_vÆue_byãs16
–
	`cﬁumnMem
(
pStmt
,
i
) );

1013 
	`cﬁumnMÆlocFaûuª
(
pStmt
);

1014  
vÆ
;

1015 
	}
}

1016 
	$sqlôe3_cﬁumn_doubÀ
(
sqlôe3_°mt
 *
pStmt
, 
i
){

1017 
vÆ
 = 
	`sqlôe3_vÆue_doubÀ
–
	`cﬁumnMem
(
pStmt
,
i
) );

1018 
	`cﬁumnMÆlocFaûuª
(
pStmt
);

1019  
vÆ
;

1020 
	}
}

1021 
	$sqlôe3_cﬁumn_öt
(
sqlôe3_°mt
 *
pStmt
, 
i
){

1022 
vÆ
 = 
	`sqlôe3_vÆue_öt
–
	`cﬁumnMem
(
pStmt
,
i
) );

1023 
	`cﬁumnMÆlocFaûuª
(
pStmt
);

1024  
vÆ
;

1025 
	}
}

1026 
sqlôe_öt64
 
	$sqlôe3_cﬁumn_öt64
(
sqlôe3_°mt
 *
pStmt
, 
i
){

1027 
sqlôe_öt64
 
vÆ
 = 
	`sqlôe3_vÆue_öt64
–
	`cﬁumnMem
(
pStmt
,
i
) );

1028 
	`cﬁumnMÆlocFaûuª
(
pStmt
);

1029  
vÆ
;

1030 
	}
}

1031 c⁄° *
	$sqlôe3_cﬁumn_ãxt
(
sqlôe3_°mt
 *
pStmt
, 
i
){

1032 c⁄° *
vÆ
 = 
	`sqlôe3_vÆue_ãxt
–
	`cﬁumnMem
(
pStmt
,
i
) );

1033 
	`cﬁumnMÆlocFaûuª
(
pStmt
);

1034  
vÆ
;

1035 
	}
}

1036 
sqlôe3_vÆue
 *
	$sqlôe3_cﬁumn_vÆue
(
sqlôe3_°mt
 *
pStmt
, 
i
){

1037 
Mem
 *
pOut
 = 
	`cﬁumnMem
(
pStmt
, 
i
);

1038 if–
pOut
->
Êags
&
MEM_Sètic
 ){

1039 
pOut
->
Êags
 &~
MEM_Sètic
;

1040 
pOut
->
Êags
 |
MEM_Ephem
;

1042 
	`cﬁumnMÆlocFaûuª
(
pStmt
);

1043  (
sqlôe3_vÆue
 *)
pOut
;

1044 
	}
}

1045 #i‚de‡
SQLITE_OMIT_UTF16


1046 c⁄° *
	$sqlôe3_cﬁumn_ãxt16
(
sqlôe3_°mt
 *
pStmt
, 
i
){

1047 c⁄° *
vÆ
 = 
	`sqlôe3_vÆue_ãxt16
–
	`cﬁumnMem
(
pStmt
,
i
) );

1048 
	`cﬁumnMÆlocFaûuª
(
pStmt
);

1049  
vÆ
;

1050 
	}
}

1052 
	$sqlôe3_cﬁumn_ty≥
(
sqlôe3_°mt
 *
pStmt
, 
i
){

1053 
iTy≥
 = 
	`sqlôe3_vÆue_ty≥
–
	`cﬁumnMem
(
pStmt
,
i
) );

1054 
	`cﬁumnMÆlocFaûuª
(
pStmt
);

1055  
iTy≥
;

1056 
	}
}

1074 c⁄° *
cﬁumnName
(

1075 
sqlôe3_°mt
 *
pStmt
,

1076 
N
,

1077 c⁄° *(*
xFunc
)(
Mem
*),

1078 
u£Ty≥


1080 c⁄° *
	gªt
;

1081 
Vdbe
 *
	gp
;

1082 
	gn
;

1083 
sqlôe3
 *
	gdb
;

1084 #ifde‡
SQLITE_ENABLE_API_ARMOR


1085 if–
	gpStmt
==0 ){

1086 ()
SQLITE_MISUSE_BKPT
;

1090 
	gªt
 = 0;

1091 
	gp
 = (
Vdbe
 *)
pStmt
;

1092 
	gdb
 = 
p
->
db
;

1093 
as£π
–
db
!=0 );

1094 
	gn
 = 
sqlôe3_cﬁumn_cou¡
(
pStmt
);

1095 if–
	gN
<
	gn
 && N>=0 ){

1096 
N
 +
u£Ty≥
*
n
;

1097 
sqlôe3_muãx_íãr
(
db
->
muãx
);

1098 
as£π
–
db
->
mÆlocFaûed
==0 );

1099 
	gªt
 = 
xFunc
(&
p
->
aCﬁName
[
N
]);

1103 if–
	gdb
->
	gmÆlocFaûed
 ){

1104 
sqlôe3OomCÀ¨
(
db
);

1105 
	gªt
 = 0;

1107 
sqlôe3_muãx_Àave
(
db
->
muãx
);

1109  
	gªt
;

1116 c⁄° *
	$sqlôe3_cﬁumn_«me
(
sqlôe3_°mt
 *
pStmt
, 
N
){

1117  
	`cﬁumnName
(

1118 
pStmt
, 
N
, (c⁄° *(*)(
Mem
*))
sqlôe3_vÆue_ãxt
, 
COLNAME_NAME
);

1119 
	}
}

1120 #i‚de‡
SQLITE_OMIT_UTF16


1121 c⁄° *
	$sqlôe3_cﬁumn_«me16
(
sqlôe3_°mt
 *
pStmt
, 
N
){

1122  
	`cﬁumnName
(

1123 
pStmt
, 
N
, (c⁄° *(*)(
Mem
*))
sqlôe3_vÆue_ãxt16
, 
COLNAME_NAME
);

1124 
	}
}

1131 #i‡
deföed
(
SQLITE_OMIT_DECLTYPE
Ë&& deföed(
SQLITE_ENABLE_COLUMN_METADATA
)

1136 #i‚de‡
SQLITE_OMIT_DECLTYPE


1141 c⁄° *
	$sqlôe3_cﬁumn_de˛ty≥
(
sqlôe3_°mt
 *
pStmt
, 
N
){

1142  
	`cﬁumnName
(

1143 
pStmt
, 
N
, (c⁄° *(*)(
Mem
*))
sqlôe3_vÆue_ãxt
, 
COLNAME_DECLTYPE
);

1144 
	}
}

1145 #i‚de‡
SQLITE_OMIT_UTF16


1146 c⁄° *
	$sqlôe3_cﬁumn_de˛ty≥16
(
sqlôe3_°mt
 *
pStmt
, 
N
){

1147  
	`cﬁumnName
(

1148 
pStmt
, 
N
, (c⁄° *(*)(
Mem
*))
sqlôe3_vÆue_ãxt16
, 
COLNAME_DECLTYPE
);

1149 
	}
}

1153 #ifde‡
SQLITE_ENABLE_COLUMN_METADATA


1159 c⁄° *
	$sqlôe3_cﬁumn_d©aba£_«me
(
sqlôe3_°mt
 *
pStmt
, 
N
){

1160  
	`cﬁumnName
(

1161 
pStmt
, 
N
, (c⁄° *(*)(
Mem
*))
sqlôe3_vÆue_ãxt
, 
COLNAME_DATABASE
);

1162 
	}
}

1163 #i‚de‡
SQLITE_OMIT_UTF16


1164 c⁄° *
	$sqlôe3_cﬁumn_d©aba£_«me16
(
sqlôe3_°mt
 *
pStmt
, 
N
){

1165  
	`cﬁumnName
(

1166 
pStmt
, 
N
, (c⁄° *(*)(
Mem
*))
sqlôe3_vÆue_ãxt16
, 
COLNAME_DATABASE
);

1167 
	}
}

1175 c⁄° *
	$sqlôe3_cﬁumn_èbÀ_«me
(
sqlôe3_°mt
 *
pStmt
, 
N
){

1176  
	`cﬁumnName
(

1177 
pStmt
, 
N
, (c⁄° *(*)(
Mem
*))
sqlôe3_vÆue_ãxt
, 
COLNAME_TABLE
);

1178 
	}
}

1179 #i‚de‡
SQLITE_OMIT_UTF16


1180 c⁄° *
	$sqlôe3_cﬁumn_èbÀ_«me16
(
sqlôe3_°mt
 *
pStmt
, 
N
){

1181  
	`cﬁumnName
(

1182 
pStmt
, 
N
, (c⁄° *(*)(
Mem
*))
sqlôe3_vÆue_ãxt16
, 
COLNAME_TABLE
);

1183 
	}
}

1191 c⁄° *
	$sqlôe3_cﬁumn_‹igö_«me
(
sqlôe3_°mt
 *
pStmt
, 
N
){

1192  
	`cﬁumnName
(

1193 
pStmt
, 
N
, (c⁄° *(*)(
Mem
*))
sqlôe3_vÆue_ãxt
, 
COLNAME_COLUMN
);

1194 
	}
}

1195 #i‚de‡
SQLITE_OMIT_UTF16


1196 c⁄° *
	$sqlôe3_cﬁumn_‹igö_«me16
(
sqlôe3_°mt
 *
pStmt
, 
N
){

1197  
	`cﬁumnName
(

1198 
pStmt
, 
N
, (c⁄° *(*)(
Mem
*))
sqlôe3_vÆue_ãxt16
, 
COLNAME_COLUMN
);

1199 
	}
}

1219 
	$vdbeUnböd
(
Vdbe
 *
p
, 
i
){

1220 
Mem
 *
pV¨
;

1221 if–
	`vdbeSa„tyNŸNuŒ
(
p
) ){

1222  
SQLITE_MISUSE_BKPT
;

1224 
	`sqlôe3_muãx_íãr
(
p
->
db
->
muãx
);

1225 if–
p
->
magic
!=
VDBE_MAGIC_RUN
 ||Ö->
pc
>=0 ){

1226 
	`sqlôe3Eº‹
(
p
->
db
, 
SQLITE_MISUSE
);

1227 
	`sqlôe3_muãx_Àave
(
p
->
db
->
muãx
);

1228 
	`sqlôe3_log
(
SQLITE_MISUSE
,

1229 "böd o¿®busyÖª∑ªd sèãmít: [%s]", 
p
->
zSql
);

1230  
SQLITE_MISUSE_BKPT
;

1232 if–
i
<1 || i>
p
->
nV¨
 ){

1233 
	`sqlôe3Eº‹
(
p
->
db
, 
SQLITE_RANGE
);

1234 
	`sqlôe3_muãx_Àave
(
p
->
db
->
muãx
);

1235  
SQLITE_RANGE
;

1237 
i
--;

1238 
pV¨
 = &
p
->
aV¨
[
i
];

1239 
	`sqlôe3VdbeMemRñó£
(
pV¨
);

1240 
pV¨
->
Êags
 = 
MEM_NuŒ
;

1241 
	`sqlôe3Eº‹
(
p
->
db
, 
SQLITE_OK
);

1252 if–
p
->
isPª∑ªV2
 &&

1253 ((
i
<32 && 
p
->
expmask
 & ((
u32
)1 << i)) ||Ö->expmask==0xffffffff)

1255 
p
->
expúed
 = 1;

1257  
SQLITE_OK
;

1258 
	}
}

1263 
bödText
(

1264 
sqlôe3_°mt
 *
pStmt
,

1265 
i
,

1266 c⁄° *
zD©a
,

1267 
nD©a
,

1268 (*
xDñ
)(*),

1269 
u8
 
ícodög


1271 
Vdbe
 *
p
 = (Vdbê*)
pStmt
;

1272 
Mem
 *
pV¨
;

1273 
rc
;

1275 
rc
 = 
	`vdbeUnböd
(
p
, 
i
);

1276 if–
rc
==
SQLITE_OK
 ){

1277 if–
zD©a
!=0 ){

1278 
pV¨
 = &
p
->
aV¨
[
i
-1];

1279 
rc
 = 
	`sqlôe3VdbeMemSëSå
(
pV¨
, 
zD©a
, 
nD©a
, 
ícodög
, 
xDñ
);

1280 if–
rc
==
SQLITE_OK
 && 
ícodög
!=0 ){

1281 
rc
 = 
	`sqlôe3VdbeCh™geEncodög
(
pV¨
, 
	`ENC
(
p
->
db
));

1283 
	`sqlôe3Eº‹
(
p
->
db
, 
rc
);

1284 
rc
 = 
	`sqlôe3ApiExô
(
p
->
db
,Ñc);

1286 
	`sqlôe3_muãx_Àave
(
p
->
db
->
muãx
);

1287 }if–
xDñ
!=
SQLITE_STATIC
 && xDñ!=
SQLITE_TRANSIENT
 ){

1288 
	`xDñ
((*)
zD©a
);

1290  
rc
;

1291 
	}
}

1297 
sqlôe3_böd_blob
(

1298 
sqlôe3_°mt
 *
pStmt
,

1299 
i
,

1300 c⁄° *
zD©a
,

1301 
nD©a
,

1302 (*
xDñ
)(*)

1304 #ifde‡
SQLITE_ENABLE_API_ARMOR


1305 if–
nD©a
<0 )  
SQLITE_MISUSE_BKPT
;

1307  
	`bödText
(
pStmt
, 
i
, 
zD©a
, 
nD©a
, 
xDñ
, 0);

1308 
	}
}

1309 
sqlôe3_böd_blob64
(

1310 
sqlôe3_°mt
 *
pStmt
,

1311 
i
,

1312 c⁄° *
zD©a
,

1313 
sqlôe3_uöt64
 
nD©a
,

1314 (*
xDñ
)(*)

1316 
	`as£π
–
xDñ
!=
SQLITE_DYNAMIC
 );

1317 if–
nD©a
>0x7fffffff ){

1318  
	`övokeVÆueDe°ru˘‹
(
zD©a
, 
xDñ
, 0);

1320  
	`bödText
(
pStmt
, 
i
, 
zD©a
, ()
nD©a
, 
xDñ
, 0);

1322 
	}
}

1323 
	$sqlôe3_böd_doubÀ
(
sqlôe3_°mt
 *
pStmt
, 
i
, 
rVÆue
){

1324 
rc
;

1325 
Vdbe
 *
p
 = (Vdbê*)
pStmt
;

1326 
rc
 = 
	`vdbeUnböd
(
p
, 
i
);

1327 if–
rc
==
SQLITE_OK
 ){

1328 
	`sqlôe3VdbeMemSëDoubÀ
(&
p
->
aV¨
[
i
-1], 
rVÆue
);

1329 
	`sqlôe3_muãx_Àave
(
p
->
db
->
muãx
);

1331  
rc
;

1332 
	}
}

1333 
	$sqlôe3_böd_öt
(
sqlôe3_°mt
 *
p
, 
i
, 
iVÆue
){

1334  
	`sqlôe3_böd_öt64
(
p
, 
i
, (
i64
)
iVÆue
);

1335 
	}
}

1336 
	$sqlôe3_böd_öt64
(
sqlôe3_°mt
 *
pStmt
, 
i
, 
sqlôe_öt64
 
iVÆue
){

1337 
rc
;

1338 
Vdbe
 *
p
 = (Vdbê*)
pStmt
;

1339 
rc
 = 
	`vdbeUnböd
(
p
, 
i
);

1340 if–
rc
==
SQLITE_OK
 ){

1341 
	`sqlôe3VdbeMemSëI¡64
(&
p
->
aV¨
[
i
-1], 
iVÆue
);

1342 
	`sqlôe3_muãx_Àave
(
p
->
db
->
muãx
);

1344  
rc
;

1345 
	}
}

1346 
	$sqlôe3_böd_nuŒ
(
sqlôe3_°mt
 *
pStmt
, 
i
){

1347 
rc
;

1348 
Vdbe
 *
p
 = (Vdbe*)
pStmt
;

1349 
rc
 = 
	`vdbeUnböd
(
p
, 
i
);

1350 if–
rc
==
SQLITE_OK
 ){

1351 
	`sqlôe3_muãx_Àave
(
p
->
db
->
muãx
);

1353  
rc
;

1354 
	}
}

1355 
sqlôe3_böd_ãxt
(

1356 
sqlôe3_°mt
 *
pStmt
,

1357 
i
,

1358 c⁄° *
zD©a
,

1359 
nD©a
,

1360 (*
xDñ
)(*)

1362  
	`bödText
(
pStmt
, 
i
, 
zD©a
, 
nD©a
, 
xDñ
, 
SQLITE_UTF8
);

1363 
	}
}

1364 
sqlôe3_böd_ãxt64
(

1365 
sqlôe3_°mt
 *
pStmt
,

1366 
i
,

1367 c⁄° *
zD©a
,

1368 
sqlôe3_uöt64
 
nD©a
,

1369 (*
xDñ
)(*),

1370 
íc


1372 
	`as£π
–
xDñ
!=
SQLITE_DYNAMIC
 );

1373 if–
nD©a
>0x7fffffff ){

1374  
	`övokeVÆueDe°ru˘‹
(
zD©a
, 
xDñ
, 0);

1376 if–
íc
==
SQLITE_UTF16
 )Én¯
SQLITE_UTF16NATIVE
;

1377  
	`bödText
(
pStmt
, 
i
, 
zD©a
, ()
nD©a
, 
xDñ
, 
íc
);

1379 
	}
}

1380 #i‚de‡
SQLITE_OMIT_UTF16


1381 
sqlôe3_böd_ãxt16
(

1382 
sqlôe3_°mt
 *
pStmt
,

1383 
i
,

1384 c⁄° *
zD©a
,

1385 
nD©a
,

1386 (*
xDñ
)(*)

1388  
	`bödText
(
pStmt
, 
i
, 
zD©a
, 
nD©a
, 
xDñ
, 
SQLITE_UTF16NATIVE
);

1389 
	}
}

1391 
	$sqlôe3_böd_vÆue
(
sqlôe3_°mt
 *
pStmt
, 
i
, c⁄° 
sqlôe3_vÆue
 *
pVÆue
){

1392 
rc
;

1393  
	`sqlôe3_vÆue_ty≥
((
sqlôe3_vÆue
*)
pVÆue
) ){

1394 
SQLITE_INTEGER
: {

1395 
rc
 = 
	`sqlôe3_böd_öt64
(
pStmt
, 
i
, 
pVÆue
->
u
.i);

1398 
SQLITE_FLOAT
: {

1399 
rc
 = 
	`sqlôe3_böd_doubÀ
(
pStmt
, 
i
, 
pVÆue
->
u
.
r
);

1402 
SQLITE_BLOB
: {

1403 if–
pVÆue
->
Êags
 & 
MEM_Zîo
 ){

1404 
rc
 = 
	`sqlôe3_böd_zîoblob
(
pStmt
, 
i
, 
pVÆue
->
u
.
nZîo
);

1406 
rc
 = 
	`sqlôe3_böd_blob
(
pStmt
, 
i
, 
pVÆue
->
z
,ÖVÆue->
n
,
SQLITE_TRANSIENT
);

1410 
SQLITE_TEXT
: {

1411 
rc
 = 
	`bödText
(
pStmt
,
i
, 
pVÆue
->
z
,ÖVÆue->
n
, 
SQLITE_TRANSIENT
,

1412 
pVÆue
->
íc
);

1416 
rc
 = 
	`sqlôe3_böd_nuŒ
(
pStmt
, 
i
);

1420  
rc
;

1421 
	}
}

1422 
	$sqlôe3_böd_zîoblob
(
sqlôe3_°mt
 *
pStmt
, 
i
, 
n
){

1423 
rc
;

1424 
Vdbe
 *
p
 = (Vdbê*)
pStmt
;

1425 
rc
 = 
	`vdbeUnböd
(
p
, 
i
);

1426 if–
rc
==
SQLITE_OK
 ){

1427 
	`sqlôe3VdbeMemSëZîoBlob
(&
p
->
aV¨
[
i
-1], 
n
);

1428 
	`sqlôe3_muãx_Àave
(
p
->
db
->
muãx
);

1430  
rc
;

1431 
	}
}

1432 
	$sqlôe3_böd_zîoblob64
(
sqlôe3_°mt
 *
pStmt
, 
i
, 
sqlôe3_uöt64
 
n
){

1433 
rc
;

1434 
Vdbe
 *
p
 = (Vdbê*)
pStmt
;

1435 
	`sqlôe3_muãx_íãr
(
p
->
db
->
muãx
);

1436 if–
n
>(
u64
)
p
->
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
] ){

1437 
rc
 = 
SQLITE_TOOBIG
;

1439 
	`as£π
–(
n
 & 0x7FFFFFFF)==n );

1440 
rc
 = 
	`sqlôe3_böd_zîoblob
(
pStmt
, 
i
, 
n
);

1442 
rc
 = 
	`sqlôe3ApiExô
(
p
->
db
,Ñc);

1443 
	`sqlôe3_muãx_Àave
(
p
->
db
->
muãx
);

1444  
rc
;

1445 
	}
}

1451 
	$sqlôe3_böd_∑ømëî_cou¡
(
sqlôe3_°mt
 *
pStmt
){

1452 
Vdbe
 *
p
 = (Vdbe*)
pStmt
;

1453  
p
 ?Ö->
nV¨
 : 0;

1454 
	}
}

1462 c⁄° *
	$sqlôe3_böd_∑ømëî_«me
(
sqlôe3_°mt
 *
pStmt
, 
i
){

1463 
Vdbe
 *
p
 = (Vdbe*)
pStmt
;

1464 if–
p
==0 || 
i
<1 || i>p->
nzV¨
 ){

1467  
p
->
azV¨
[
i
-1];

1468 
	}
}

1475 
	$sqlôe3VdbeP¨amëîIndex
(
Vdbe
 *
p
, c⁄° *
zName
, 
nName
){

1476 
i
;

1477 if–
p
==0 ){

1480 if–
zName
 ){

1481 
i
=0; i<
p
->
nzV¨
; i++){

1482 c⁄° *
z
 = 
p
->
azV¨
[
i
];

1483 if–
z
 && 
	`°∫cmp
(z,
zName
,
nName
)==0 && z[nName]==0 ){

1484  
i
+1;

1489 
	}
}

1490 
	$sqlôe3_böd_∑ømëî_ödex
(
sqlôe3_°mt
 *
pStmt
, c⁄° *
zName
){

1491  
	`sqlôe3VdbeP¨amëîIndex
((
Vdbe
*)
pStmt
, 
zName
, 
	`sqlôe3SåÀn30
(zName));

1492 
	}
}

1497 
	$sqlôe3Tøns„rBödögs
(
sqlôe3_°mt
 *
pFromStmt
, sqlôe3_°mà*
pToStmt
){

1498 
Vdbe
 *
pFrom
 = (Vdbe*)
pFromStmt
;

1499 
Vdbe
 *
pTo
 = (Vdbe*)
pToStmt
;

1500 
i
;

1501 
	`as£π
–
pTo
->
db
==
pFrom
->db );

1502 
	`as£π
–
pTo
->
nV¨
==
pFrom
->nVar );

1503 
	`sqlôe3_muãx_íãr
(
pTo
->
db
->
muãx
);

1504 
i
=0; i<
pFrom
->
nV¨
; i++){

1505 
	`sqlôe3VdbeMemMove
(&
pTo
->
aV¨
[
i
], &
pFrom
->aVar[i]);

1507 
	`sqlôe3_muãx_Àave
(
pTo
->
db
->
muãx
);

1508  
SQLITE_OK
;

1509 
	}
}

1511 #i‚de‡
SQLITE_OMIT_DEPRECATED


1524 
	$sqlôe3_å™s„r_bödögs
(
sqlôe3_°mt
 *
pFromStmt
, sqlôe3_°mà*
pToStmt
){

1525 
Vdbe
 *
pFrom
 = (Vdbe*)
pFromStmt
;

1526 
Vdbe
 *
pTo
 = (Vdbe*)
pToStmt
;

1527 if–
pFrom
->
nV¨
!=
pTo
->nVar ){

1528  
SQLITE_ERROR
;

1530 if–
pTo
->
isPª∑ªV2
 &&ÖTo->
expmask
 ){

1531 
pTo
->
expúed
 = 1;

1533 if–
pFrom
->
isPª∑ªV2
 &&ÖFrom->
expmask
 ){

1534 
pFrom
->
expúed
 = 1;

1536  
	`sqlôe3Tøns„rBödögs
(
pFromStmt
, 
pToStmt
);

1537 
	}
}

1546 
sqlôe3
 *
	$sqlôe3_db_h™dÀ
(
sqlôe3_°mt
 *
pStmt
){

1547  
pStmt
 ? ((
Vdbe
*ÌStmt)->
db
 : 0;

1548 
	}
}

1554 
	$sqlôe3_°mt_ªad⁄ly
(
sqlôe3_°mt
 *
pStmt
){

1555  
pStmt
 ? ((
Vdbe
*ÌStmt)->
ªadO∆y
 : 1;

1556 
	}
}

1561 
	$sqlôe3_°mt_busy
(
sqlôe3_°mt
 *
pStmt
){

1562 
Vdbe
 *
v
 = (Vdbe*)
pStmt
;

1563  
v
!=0 && v->
pc
>=0 && v->
magic
==
VDBE_MAGIC_RUN
;

1564 
	}
}

1572 
sqlôe3_°mt
 *
	$sqlôe3_√xt_°mt
(
sqlôe3
 *
pDb
, 
sqlôe3_°mt
 *
pStmt
){

1573 
sqlôe3_°mt
 *
pNext
;

1574 #ifde‡
SQLITE_ENABLE_API_ARMOR


1575 if–!
	`sqlôe3Sa„tyCheckOk
(
pDb
) ){

1576 ()
SQLITE_MISUSE_BKPT
;

1580 
	`sqlôe3_muãx_íãr
(
pDb
->
muãx
);

1581 if–
pStmt
==0 ){

1582 
pNext
 = (
sqlôe3_°mt
*)
pDb
->
pVdbe
;

1584 
pNext
 = (
sqlôe3_°mt
*)((
Vdbe
*)
pStmt
)->pNext;

1586 
	`sqlôe3_muãx_Àave
(
pDb
->
muãx
);

1587  
pNext
;

1588 
	}
}

1593 
	$sqlôe3_°mt_°©us
(
sqlôe3_°mt
 *
pStmt
, 
›
, 
ª£tFœg
){

1594 
Vdbe
 *
pVdbe
 = (Vdbe*)
pStmt
;

1595 
u32
 
v
;

1596 #ifde‡
SQLITE_ENABLE_API_ARMOR


1597 if–!
pStmt
 ){

1598 ()
SQLITE_MISUSE_BKPT
;

1602 
v
 = 
pVdbe
->
aCou¡î
[
›
];

1603 if–
ª£tFœg
 ) 
pVdbe
->
aCou¡î
[
›
] = 0;

1604  ()
v
;

1605 
	}
}

1607 #ifde‡
SQLITE_ENABLE_PREUPDATE_HOOK


1613 
U≈ackedRec‹d
 *
	$vdbeU≈ackRec‹d
(

1614 
KeyInfo
 *
pKeyInfo
,

1615 
nKey
,

1616 c⁄° *
pKey


1618 *
dummy
;

1619 
U≈ackedRec‹d
 *
pRë
;

1621 
pRë
 = 
	`sqlôe3VdbeAŒocU≈ackedRec‹d
(
pKeyInfo
, 0, 0, &
dummy
);

1622 if–
pRë
 ){

1623 
	`mem£t
(
pRë
->
aMem
, 0, (
Mem
)*(
pKeyInfo
->
nFõld
+1));

1624 
	`sqlôe3VdbeRec‹dU≈ack
(
pKeyInfo
, 
nKey
, 
pKey
, 
pRë
);

1626  
pRë
;

1627 
	}
}

1633 
	$sqlôe3_¥eupd©e_ﬁd
(
sqlôe3
 *
db
, 
iIdx
, 
sqlôe3_vÆue
 **
µVÆue
){

1634 
PªUpd©e
 *
p
 = 
db
->
pPªUpd©e
;

1635 
rc
 = 
SQLITE_OK
;

1639 if–!
p
 ||Ö->
›
==
SQLITE_INSERT
 ){

1640 
rc
 = 
SQLITE_MISUSE_BKPT
;

1641 
¥eupd©e_ﬁd_out
;

1643 if–
iIdx
>=
p
->
pC§
->
nFõld
 || iIdx<0 ){

1644 
rc
 = 
SQLITE_RANGE
;

1645 
¥eupd©e_ﬁd_out
;

1649 if–
p
->
pU≈acked
==0 ){

1650 
u32
 
nRec
;

1651 
u8
 *
aRec
;

1653 
rc
 = 
	`sqlôe3BåìD©aSize
(
p
->
pC§
->
uc
.
pCurs‹
, &
nRec
);

1654 if–
rc
!=
SQLITE_OK
 ) 
¥eupd©e_ﬁd_out
;

1655 
aRec
 = 
	`sqlôe3DbMÆlocRaw
(
db
, 
nRec
);

1656 if–!
aRec
 ) 
¥eupd©e_ﬁd_out
;

1657 
rc
 = 
	`sqlôe3BåìD©a
(
p
->
pC§
->
uc
.
pCurs‹
, 0, 
nRec
, 
aRec
);

1658 if–
rc
==
SQLITE_OK
 ){

1659 
p
->
pU≈acked
 = 
	`vdbeU≈ackRec‹d
(&p->
keyöfo
, 
nRec
, 
aRec
);

1660 if–!
p
->
pU≈acked
 ) 
rc
 = 
SQLITE_NOMEM
;

1662 if–
rc
!=
SQLITE_OK
 ){

1663 
	`sqlôe3DbFªe
(
db
, 
aRec
);

1664 
¥eupd©e_ﬁd_out
;

1666 
p
->
aRec‹d
 = 
aRec
;

1669 if–
iIdx
>=
p
->
pU≈acked
->
nFõld
 ){

1670 *
µVÆue
 = (
sqlôe3_vÆue
 *)
	`cﬁumnNuŒVÆue
();

1672 *
µVÆue
 = &
p
->
pU≈acked
->
aMem
[
iIdx
];

1673 if–
iIdx
==
p
->
iPKey
 ){

1674 
	`sqlôe3VdbeMemSëI¡64
(*
µVÆue
, 
p
->
iKey1
);

1678 
¥eupd©e_ﬁd_out
:

1679 
	`sqlôe3Eº‹
(
db
, 
rc
);

1680  
	`sqlôe3ApiExô
(
db
, 
rc
);

1681 
	}
}

1684 #ifde‡
SQLITE_ENABLE_PREUPDATE_HOOK


1689 
	$sqlôe3_¥eupd©e_cou¡
(
sqlôe3
 *
db
){

1690 
PªUpd©e
 *
p
 = 
db
->
pPªUpd©e
;

1691  (
p
 ?Ö->
keyöfo
.
nFõld
 : 0);

1692 
	}
}

1695 #ifde‡
SQLITE_ENABLE_PREUPDATE_HOOK


1707 
	$sqlôe3_¥eupd©e_dïth
(
sqlôe3
 *
db
){

1708 
PªUpd©e
 *
p
 = 
db
->
pPªUpd©e
;

1709  (
p
 ?Ö->
v
->
nFøme
 : 0);

1710 
	}
}

1713 #ifde‡
SQLITE_ENABLE_PREUPDATE_HOOK


1718 
	$sqlôe3_¥eupd©e_√w
(
sqlôe3
 *
db
, 
iIdx
, 
sqlôe3_vÆue
 **
µVÆue
){

1719 
PªUpd©e
 *
p
 = 
db
->
pPªUpd©e
;

1720 
rc
 = 
SQLITE_OK
;

1721 
Mem
 *
pMem
;

1723 if–!
p
 ||Ö->
›
==
SQLITE_DELETE
 ){

1724 
rc
 = 
SQLITE_MISUSE_BKPT
;

1725 
¥eupd©e_√w_out
;

1727 if–
iIdx
>=
p
->
pC§
->
nFõld
 || iIdx<0 ){

1728 
rc
 = 
SQLITE_RANGE
;

1729 
¥eupd©e_√w_out
;

1732 if–
p
->
›
==
SQLITE_INSERT
 ){

1735 
U≈ackedRec‹d
 *
pU≈ack
 = 
p
->
pNewU≈acked
;

1736 if–!
pU≈ack
 ){

1737 
Mem
 *
pD©a
 = &
p
->
v
->
aMem
[p->
iNewReg
];

1738 
rc
 = 
	`sqlôe3VdbeMemEx∑ndBlob
(
pD©a
);

1739 if–
rc
!=
SQLITE_OK
 ) 
¥eupd©e_√w_out
;

1740 
pU≈ack
 = 
	`vdbeU≈ackRec‹d
(&
p
->
keyöfo
, 
pD©a
->
n
,ÖD©a->
z
);

1741 if–!
pU≈ack
 ){

1742 
rc
 = 
SQLITE_NOMEM
;

1743 
¥eupd©e_√w_out
;

1745 
p
->
pNewU≈acked
 = 
pU≈ack
;

1747 if–
iIdx
>=
pU≈ack
->
nFõld
 ){

1748 
pMem
 = (
sqlôe3_vÆue
 *)
	`cﬁumnNuŒVÆue
();

1750 
pMem
 = &
pU≈ack
->
aMem
[
iIdx
];

1751 if–
iIdx
==
p
->
iPKey
 ){

1752 
	`sqlôe3VdbeMemSëI¡64
(
pMem
, 
p
->
iKey2
);

1761 
	`as£π
–
p
->
›
==
SQLITE_UPDATE
 );

1762 if–!
p
->
aNew
 ){

1763 
p
->
aNew
 = (
Mem
 *)
	`sqlôe3DbMÆlocZîo
(
db
, (MemË*Ö->
pC§
->
nFõld
);

1764 if–!
p
->
aNew
 ){

1765 
rc
 = 
SQLITE_NOMEM
;

1766 
¥eupd©e_√w_out
;

1769 
	`as£π
–
iIdx
>=0 && iIdx<
p
->
pC§
->
nFõld
 );

1770 
pMem
 = &
p
->
aNew
[
iIdx
];

1771 if–
pMem
->
Êags
==0 ){

1772 if–
iIdx
==
p
->
iPKey
 ){

1773 
	`sqlôe3VdbeMemSëI¡64
(
pMem
, 
p
->
iKey2
);

1775 
rc
 = 
	`sqlôe3VdbeMemC›y
(
pMem
, &
p
->
v
->
aMem
[p->
iNewReg
+1+
iIdx
]);

1776 if–
rc
!=
SQLITE_OK
 ) 
¥eupd©e_√w_out
;

1780 *
µVÆue
 = 
pMem
;

1782 
¥eupd©e_√w_out
:

1783 
	`sqlôe3Eº‹
(
db
, 
rc
);

1784  
	`sqlôe3ApiExô
(
db
, 
rc
);

1785 
	}
}

1788 #ifde‡
SQLITE_ENABLE_STMT_SCANSTATUS


1792 
	$sqlôe3_°mt_sˇn°©us
(

1793 
sqlôe3_°mt
 *
pStmt
,

1794 
idx
,

1795 
iSˇnSètusOp
,

1796 *
pOut


1798 
Vdbe
 *
p
 = (Vdbe*)
pStmt
;

1799 
SˇnSètus
 *
pSˇn
;

1800 if–
idx
<0 || idx>=
p
->
nSˇn
 )  1;

1801 
pSˇn
 = &
p
->
aSˇn
[
idx
];

1802  
iSˇnSètusOp
 ){

1803 
SQLITE_SCANSTAT_NLOOP
: {

1804 *(
sqlôe3_öt64
*)
pOut
 = 
p
->
™Exec
[
pSˇn
->
addrLo›
];

1807 
SQLITE_SCANSTAT_NVISIT
: {

1808 *(
sqlôe3_öt64
*)
pOut
 = 
p
->
™Exec
[
pSˇn
->
addrVisô
];

1811 
SQLITE_SCANSTAT_EST
: {

1812 
r
 = 1.0;

1813 
LogE°
 
x
 = 
pSˇn
->
nE°
;

1814  
x
<100 ){

1815 
x
 += 10;

1816 
r
 *= 0.5;

1818 *(*)
pOut
 = 
r
*
	`sqlôe3LogE°ToI¡
(
x
);

1821 
SQLITE_SCANSTAT_NAME
: {

1822 *(c⁄° **)
pOut
 = 
pSˇn
->
zName
;

1825 
SQLITE_SCANSTAT_EXPLAIN
: {

1826 if–
pSˇn
->
addrEx∂aö
 ){

1827 *(c⁄° **)
pOut
 = 
p
->
aOp
[ 
pSˇn
->
addrEx∂aö
 ].
p4
.
z
;

1829 *(c⁄° **)
pOut
 = 0;

1833 
SQLITE_SCANSTAT_SELECTID
: {

1834 if–
pSˇn
->
addrEx∂aö
 ){

1835 *(*)
pOut
 = 
p
->
aOp
[ 
pSˇn
->
addrEx∂aö
 ].
p1
;

1837 *(*)
pOut
 = -1;

1846 
	}
}

1851 
	$sqlôe3_°mt_sˇn°©us_ª£t
(
sqlôe3_°mt
 *
pStmt
){

1852 
Vdbe
 *
p
 = (Vdbe*)
pStmt
;

1853 
	`mem£t
(
p
->
™Exec
, 0,Ö->
nOp
 * (
i64
));

1854 
	}
}

	@vdbeaux.c

15 
	~"sqlôeI¡.h
"

16 
	~"vdbeI¡.h
"

21 
Vdbe
 *
	$sqlôe3VdbeCª©e
(
P¨£
 *
pP¨£
){

22 
sqlôe3
 *
db
 = 
pP¨£
->db;

23 
Vdbe
 *
p
;

24 
p
 = 
	`sqlôe3DbMÆlocZîo
(
db
, (
Vdbe
) );

25 if–
p
==0 )  0;

26 
p
->
db
 = db;

27 if–
db
->
pVdbe
 ){

28 
db
->
pVdbe
->
pPªv
 = 
p
;

30 
p
->
pNext
 = 
db
->
pVdbe
;

31 
p
->
pPªv
 = 0;

32 
db
->
pVdbe
 = 
p
;

33 
p
->
magic
 = 
VDBE_MAGIC_INIT
;

34 
p
->
pP¨£
 =ÖParse;

35 
	`as£π
–
pP¨£
->
aLabñ
==0 );

36 
	`as£π
–
pP¨£
->
nLabñ
==0 );

37 
	`as£π
–
pP¨£
->
nOpAŒoc
==0 );

38 
	`as£π
–
pP¨£
->
szOpAŒoc
==0 );

39  
p
;

40 
	}
}

45 
	$sqlôe3VdbeEº‹
(
Vdbe
 *
p
, c⁄° *
zF‹m©
, ...){

46 
va_li°
 
≠
;

47 
	`sqlôe3DbFªe
(
p
->
db
,Ö->
zEºMsg
);

48 
	`va_°¨t
(
≠
, 
zF‹m©
);

49 
p
->
zEºMsg
 = 
	`sqlôe3VMPrötf
’->
db
, 
zF‹m©
, 
≠
);

50 
	`va_íd
(
≠
);

51 
	}
}

56 
	$sqlôe3VdbeSëSql
(
Vdbe
 *
p
, c⁄° *
z
, 
n
, 
isPª∑ªV2
){

57 
	`as£π
–
isPª∑ªV2
==1 || isPrepareV2==0 );

58 if–
p
==0 ) ;

59 #i‡
	`deföed
(
SQLITE_OMIT_TRACE
Ë&& !deföed(
SQLITE_ENABLE_SQLLOG
)

60 if–!
isPª∑ªV2
 ) ;

62 
	`as£π
–
p
->
zSql
==0 );

63 
p
->
zSql
 = 
	`sqlôe3DbSåNDup
’->
db
, 
z
, 
n
);

64 
p
->
isPª∑ªV2
 = (
u8
)isPrepareV2;

65 
	}
}

70 c⁄° *
	$sqlôe3_sql
(
sqlôe3_°mt
 *
pStmt
){

71 
Vdbe
 *
p
 = (Vdbê*)
pStmt
;

72  
p
 ?Ö->
zSql
 : 0;

73 
	}
}

78 
	$sqlôe3VdbeSw≠
(
Vdbe
 *
pA
, Vdbê*
pB
){

79 
Vdbe
 
tmp
, *
pTmp
;

80 *
zTmp
;

81 
	`as£π
–
pA
->
db
==
pB
->db );

82 
tmp
 = *
pA
;

83 *
pA
 = *
pB
;

84 *
pB
 = 
tmp
;

85 
pTmp
 = 
pA
->
pNext
;

86 
pA
->
pNext
 = 
pB
->pNext;

87 
pB
->
pNext
 = 
pTmp
;

88 
pTmp
 = 
pA
->
pPªv
;

89 
pA
->
pPªv
 = 
pB
->pPrev;

90 
pB
->
pPªv
 = 
pTmp
;

91 
zTmp
 = 
pA
->
zSql
;

92 
pA
->
zSql
 = 
pB
->zSql;

93 
pB
->
zSql
 = 
zTmp
;

94 
pB
->
isPª∑ªV2
 = 
pA
->isPrepareV2;

95 
	}
}

107 
	$growOpAºay
(
Vdbe
 *
v
, 
nOp
){

108 
VdbeOp
 *
pNew
;

109 
P¨£
 *
p
 = 
v
->
pP¨£
;

118 #ifde‡
SQLITE_TEST_REALLOC_STRESS


119 
nNew
 = (
p
->
nOpAŒoc
>=512 ?Ö->nOpAŒoc*2 :Ö->nOpAŒoc+
nOp
);

121 
nNew
 = (
p
->
nOpAŒoc
 ?Ö->nOpAŒoc*2 : ()(1024/(
Op
)));

122 
	`UNUSED_PARAMETER
(
nOp
);

125 
	`as£π
–
nOp
<=(1024/(
Op
)) );

126 
	`as£π
–
nNew
>=(
p
->
nOpAŒoc
+
nOp
) );

127 
pNew
 = 
	`sqlôe3DbRóŒoc
(
p
->
db
, 
v
->
aOp
, 
nNew
*(
Op
));

128 if–
pNew
 ){

129 
p
->
szOpAŒoc
 = 
	`sqlôe3DbMÆlocSize
’->
db
, 
pNew
);

130 
p
->
nOpAŒoc
 =Ö->
szOpAŒoc
/(
Op
);

131 
v
->
aOp
 = 
pNew
;

133  (
pNew
 ? 
SQLITE_OK
 : 
SQLITE_NOMEM_BKPT
);

134 
	}
}

136 #ifde‡
SQLITE_DEBUG


141 
	$ã°_add›_bªakpoöt
(){

142 
n
 = 0;

143 
n
++;

144 
	}
}

163 
SQLITE_NOINLINE
 
	$growOp3
(
Vdbe
 *
p
, 
›
, 
p1
, 
p2
, 
p3
){

164 
	`as£π
–
p
->
pP¨£
->
nOpAŒoc
<ı->
nOp
 );

165 if–
	`growOpAºay
(
p
, 1) )  1;

166 
	`as£π
–
p
->
pP¨£
->
nOpAŒoc
>p->
nOp
 );

167  
	`sqlôe3VdbeAddOp3
(
p
, 
›
, 
p1
, 
p2
, 
p3
);

168 
	}
}

169 
	$sqlôe3VdbeAddOp3
(
Vdbe
 *
p
, 
›
, 
p1
, 
p2
, 
p3
){

170 
i
;

171 
VdbeOp
 *
pOp
;

173 
i
 = 
p
->
nOp
;

174 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

175 
	`as£π
–
›
>=0 && op<0xff );

176 if–
p
->
pP¨£
->
nOpAŒoc
<=
i
 ){

177  
	`growOp3
(
p
, 
›
, 
p1
, 
p2
, 
p3
);

179 
p
->
nOp
++;

180 
pOp
 = &
p
->
aOp
[
i
];

181 
pOp
->
›code
 = (
u8
)
›
;

182 
pOp
->
p5
 = 0;

183 
pOp
->
p1
 =Ö1;

184 
pOp
->
p2
 =Ö2;

185 
pOp
->
p3
 =Ö3;

186 
pOp
->
p4
.
p
 = 0;

187 
pOp
->
p4ty≥
 = 
P4_NOTUSED
;

188 #ifde‡
SQLITE_ENABLE_EXPLAIN_COMMENTS


189 
pOp
->
zCommít
 = 0;

191 #ifde‡
SQLITE_DEBUG


192 if–
p
->
db
->
Êags
 & 
SQLITE_VdbeAdd›Tø˚
 ){

193 
jj
, 
kk
;

194 
P¨£
 *
pP¨£
 = 
p
->pParse;

195 
jj
=
kk
=0; jj<
SQLITE_N_COLCACHE
; jj++){

196 
yCﬁCache
 *
x
 = 
pP¨£
->
aCﬁCache
 + 
jj
;

197 if–
x
->
iLevñ
>
pP¨£
->
iCacheLevñ
 || x->
iReg
==0 ) ;

198 
	`¥ötf
("Ñ[%d]={%d:%d}", 
x
->
iReg
, x->
iTabÀ
, x->
iCﬁumn
);

199 
kk
++;

201 if–
kk
 ) 
	`¥ötf
("\n");

202 
	`sqlôe3VdbePrötOp
(0, 
i
, &
p
->
aOp
[i]);

203 
	`ã°_add›_bªakpoöt
();

206 #ifde‡
VDBE_PROFILE


207 
pOp
->
cy˛es
 = 0;

208 
pOp
->
˙t
 = 0;

210 #ifde‡
SQLITE_VDBE_COVERAGE


211 
pOp
->
iSrcLöe
 = 0;

213  
i
;

214 
	}
}

215 
	$sqlôe3VdbeAddOp0
(
Vdbe
 *
p
, 
›
){

216  
	`sqlôe3VdbeAddOp3
(
p
, 
›
, 0, 0, 0);

217 
	}
}

218 
	$sqlôe3VdbeAddOp1
(
Vdbe
 *
p
, 
›
, 
p1
){

219  
	`sqlôe3VdbeAddOp3
(
p
, 
›
, 
p1
, 0, 0);

220 
	}
}

221 
	$sqlôe3VdbeAddOp2
(
Vdbe
 *
p
, 
›
, 
p1
, 
p2
){

222  
	`sqlôe3VdbeAddOp3
(
p
, 
›
, 
p1
, 
p2
, 0);

223 
	}
}

227 
	$sqlôe3VdbeGŸo
(
Vdbe
 *
p
, 
iDe°
){

228  
	`sqlôe3VdbeAddOp3
(
p
, 
OP_GŸo
, 0, 
iDe°
, 0);

229 
	}
}

234 
	$sqlôe3VdbeLﬂdSåög
(
Vdbe
 *
p
, 
iDe°
, c⁄° *
zSå
){

235  
	`sqlôe3VdbeAddOp4
(
p
, 
OP_Såög8
, 0, 
iDe°
, 0, 
zSå
, 0);

236 
	}
}

246 
	$sqlôe3VdbeMu…iLﬂd
(
Vdbe
 *
p
, 
iDe°
, c⁄° *
zTy≥s
, ...){

247 
va_li°
 
≠
;

248 
i
;

249 
c
;

250 
	`va_°¨t
(
≠
, 
zTy≥s
);

251 
i
=0; (
c
 = 
zTy≥s
[i])!=0; i++){

252 if–
c
=='s' ){

253 c⁄° *
z
 = 
	`va_¨g
(
≠
, const *);

254 
	`sqlôe3VdbeAddOp4
(
p
, 
z
==0 ? 
OP_NuŒ
 : 
OP_Såög8
, 0, 
iDe°
++, 0, z, 0);

256 
	`as£π
–
c
=='i' );

257 
	`sqlôe3VdbeAddOp2
(
p
, 
OP_I¡egî
, 
	`va_¨g
(
≠
, ), 
iDe°
++);

260 
	`va_íd
(
≠
);

261 
	}
}

266 
	$sqlôe3VdbeAddOp4
(

267 
Vdbe
 *
p
,

268 
›
,

269 
p1
,

270 
p2
,

271 
p3
,

272 c⁄° *
zP4
,

273 
p4ty≥


275 
addr
 = 
	`sqlôe3VdbeAddOp3
(
p
, 
›
, 
p1
, 
p2
, 
p3
);

276 
	`sqlôe3VdbeCh™geP4
(
p
, 
addr
, 
zP4
, 
p4ty≥
);

277  
addr
;

278 
	}
}

284 
	$sqlôe3VdbeAddOp4Dup8
(

285 
Vdbe
 *
p
,

286 
›
,

287 
p1
,

288 
p2
,

289 
p3
,

290 c⁄° 
u8
 *
zP4
,

291 
p4ty≥


293 *
p4c›y
 = 
	`sqlôe3DbMÆlocRawNN
(
	`sqlôe3VdbeDb
(
p
), 8);

294 if–
p4c›y
 ) 
	`mem˝y
’4c›y, 
zP4
, 8);

295  
	`sqlôe3VdbeAddOp4
(
p
, 
›
, 
p1
, 
p2
, 
p3
, 
p4c›y
, 
p4ty≥
);

296 
	}
}

306 
	$sqlôe3VdbeAddP¨£SchemaOp
(
Vdbe
 *
p
, 
iDb
, *
zWhîe
){

307 
j
;

308 
	`sqlôe3VdbeAddOp4
(
p
, 
OP_P¨£Schema
, 
iDb
, 0, 0, 
zWhîe
, 
P4_DYNAMIC
);

309 
j
=0; j<
p
->
db
->
nDb
; j++Ë
	`sqlôe3VdbeU£sBåì
(p, j);

310 
	}
}

315 
	$sqlôe3VdbeAddOp4I¡
(

316 
Vdbe
 *
p
,

317 
›
,

318 
p1
,

319 
p2
,

320 
p3
,

321 
p4


323 
addr
 = 
	`sqlôe3VdbeAddOp3
(
p
, 
›
, 
p1
, 
p2
, 
p3
);

324 
	`sqlôe3VdbeCh™geP4
(
p
, 
addr
, 
	`SQLITE_INT_TO_PTR
(
p4
), 
P4_INT32
);

325  
addr
;

326 
	}
}

330 
	$sqlôe3VdbeEndC‹outöe
(
Vdbe
 *
v
, 
ªgYõld
){

331 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_EndC‹outöe
, 
ªgYõld
);

339 
v
->
pP¨£
->
nTempReg
 = 0;

340 
v
->
pP¨£
->
nR™geReg
 = 0;

341 
	}
}

357 
	$sqlôe3VdbeMakeLabñ
(
Vdbe
 *
v
){

358 
P¨£
 *
p
 = 
v
->
pP¨£
;

359 
i
 = 
p
->
nLabñ
++;

360 
	`as£π
–
v
->
magic
==
VDBE_MAGIC_INIT
 );

361 if–(
i
 & (i-1))==0 ){

362 
p
->
aLabñ
 = 
	`sqlôe3DbRóŒocOrFªe
’->
db
,Ö->aLabel,

363 (
i
*2+1)*(
p
->
aLabñ
[0]));

365 if–
p
->
aLabñ
 ){

366 
p
->
aLabñ
[
i
] = -1;

368  
	`ADDR
(
i
);

369 
	}
}

376 
	$sqlôe3VdbeResﬁveLabñ
(
Vdbe
 *
v
, 
x
){

377 
P¨£
 *
p
 = 
v
->
pP¨£
;

378 
j
 = 
	`ADDR
(
x
);

379 
	`as£π
–
v
->
magic
==
VDBE_MAGIC_INIT
 );

380 
	`as£π
–
j
<
p
->
nLabñ
 );

381 
	`as£π
–
j
>=0 );

382 if–
p
->
aLabñ
 ){

383 
p
->
aLabñ
[
j
] = 
v
->
nOp
;

385 
p
->
iFixedOp
 = 
v
->
nOp
 - 1;

386 
	}
}

391 
	$sqlôe3VdbeRunO∆yOn˚
(
Vdbe
 *
p
){

392 
p
->
runO∆yOn˚
 = 1;

393 
	}
}

398 
	$sqlôe3VdbeReußbÀ
(
Vdbe
 *
p
){

399 
p
->
runO∆yOn˚
 = 0;

400 
	}
}

402 #ifde‡
SQLITE_DEBUG


420 
VdbeOpIãr
 
	tVdbeOpIãr
;

421 
	sVdbeOpIãr
 {

422 
Vdbe
 *
	mv
;

423 
SubProgøm
 **
	m≠Sub
;

424 
	mnSub
;

425 
	miAddr
;

426 
	miSub
;

428 
Op
 *
	$›IãrNext
(
VdbeOpIãr
 *
p
){

429 
Vdbe
 *
v
 = 
p
->v;

430 
Op
 *
pRë
 = 0;

431 
Op
 *
aOp
;

432 
nOp
;

434 if–
p
->
iSub
<ı->
nSub
 ){

436 if–
p
->
iSub
==0 ){

437 
aOp
 = 
v
->aOp;

438 
nOp
 = 
v
->nOp;

440 
aOp
 = 
p
->
≠Sub
[p->
iSub
-1]->aOp;

441 
nOp
 = 
p
->
≠Sub
[p->
iSub
-1]->nOp;

443 
	`as£π
–
p
->
iAddr
<
nOp
 );

445 
pRë
 = &
aOp
[
p
->
iAddr
];

446 
p
->
iAddr
++;

447 if–
p
->
iAddr
==
nOp
 ){

448 
p
->
iSub
++;

449 
p
->
iAddr
 = 0;

452 if–
pRë
->
p4ty≥
==
P4_SUBPROGRAM
 ){

453 
nByã
 = (
p
->
nSub
+1)*(
SubProgøm
*);

454 
j
;

455 
j
=0; j<
p
->
nSub
; j++){

456 if–
p
->
≠Sub
[
j
]==
pRë
->
p4
.
pProgøm
 ) ;

458 if–
j
==
p
->
nSub
 ){

459 
p
->
≠Sub
 = 
	`sqlôe3DbRóŒocOrFªe
(
v
->
db
,Ö->≠Sub, 
nByã
);

460 if–!
p
->
≠Sub
 ){

461 
pRë
 = 0;

463 
p
->
≠Sub
[p->
nSub
++] = 
pRë
->
p4
.
pProgøm
;

469  
pRë
;

470 
	}
}

493 
	$sqlôe3VdbeAs£πMayAb‹t
(
Vdbe
 *
v
, 
mayAb‹t
){

494 
hasAb‹t
 = 0;

495 
hasFkCou¡î
 = 0;

496 
hasCª©eTabÀ
 = 0;

497 
hasInôC‹outöe
 = 0;

498 
Op
 *
pOp
;

499 
VdbeOpIãr
 
sIãr
;

500 
	`mem£t
(&
sIãr
, 0, (sIter));

501 
sIãr
.
v
 = v;

503  (
pOp
 = 
	`›IãrNext
(&
sIãr
))!=0 ){

504 
›code
 = 
pOp
->opcode;

505 if–
›code
==
OP_De°roy
 || opcode==
OP_VUpd©e
 || opcode==
OP_VRíame


506 || ((
›code
==
OP_HÆt
 || opcode==
OP_HÆtIfNuŒ
)

507 && ((
pOp
->
p1
&0xff)==
SQLITE_CONSTRAINT
 &&ÖOp->
p2
==
OE_Ab‹t
))

509 
hasAb‹t
 = 1;

512 if–
›code
==
OP_Cª©eTabÀ
 ) 
hasCª©eTabÀ
 = 1;

513 if–
›code
==
OP_InôC‹outöe
 ) 
hasInôC‹outöe
 = 1;

514 #i‚de‡
SQLITE_OMIT_FOREIGN_KEY


515 if–
›code
==
OP_FkCou¡î
 && 
pOp
->
p1
==0 &&ÖOp->
p2
==1 ){

516 
hasFkCou¡î
 = 1;

520 
	`sqlôe3DbFªe
(
v
->
db
, 
sIãr
.
≠Sub
);

527  ( 
v
->
db
->
mÆlocFaûed
 || 
hasAb‹t
==
mayAb‹t
 || 
hasFkCou¡î


528 || (
hasCª©eTabÀ
 && 
hasInôC‹outöe
) );

529 
	}
}

553 
	$ªsﬁveP2VÆues
(
Vdbe
 *
p
, *
pMaxFuncArgs
){

554 
nMaxArgs
 = *
pMaxFuncArgs
;

555 
Op
 *
pOp
;

556 
P¨£
 *
pP¨£
 = 
p
->pParse;

557 *
aLabñ
 = 
pP¨£
->aLabel;

558 
p
->
ªadO∆y
 = 1;

559 
p
->
bIsRódî
 = 0;

560 
pOp
 = &
p
->
aOp
[p->
nOp
-1];

569 if–
pOp
->
›code
<=
SQLITE_MX_JUMP_OPCODE
 ){

572  
pOp
->
›code
 ){

573 
OP_Tønß˘i⁄
: {

574 if–
pOp
->
p2
!=0 ) 
p
->
ªadO∆y
 = 0;

577 
OP_AutoCommô
:

578 
OP_Savïoöt
: {

579 
p
->
bIsRódî
 = 1;

582 #i‚de‡
SQLITE_OMIT_WAL


583 
OP_Checkpoöt
:

585 
OP_Vacuum
:

586 
OP_Jou∫ÆMode
: {

587 
p
->
ªadO∆y
 = 0;

588 
p
->
bIsRódî
 = 1;

591 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


592 
OP_VUpd©e
: {

593 if–
pOp
->
p2
>
nMaxArgs
 )ÇMaxArgs =ÖOp->p2;

596 
OP_VFûãr
: {

597 
n
;

598 
	`as£π
–(
pOp
 - 
p
->
aOp
) >= 3 );

599 
	`as£π
–
pOp
[-1].
›code
==
OP_I¡egî
 );

600 
n
 = 
pOp
[-1].
p1
;

601 if–
n
>
nMaxArgs
 )ÇMaxArgs =Ç;

605 
OP_Next
:

606 
OP_NextIfO≥n
:

607 
OP_S‹ãrNext
: {

608 
pOp
->
p4
.
xAdv™˚
 = 
sqlôe3BåìNext
;

609 
pOp
->
p4ty≥
 = 
P4_ADVANCE
;

612 
OP_Pªv
:

613 
OP_PªvIfO≥n
: {

614 
pOp
->
p4
.
xAdv™˚
 = 
sqlôe3BåìPªvious
;

615 
pOp
->
p4ty≥
 = 
P4_ADVANCE
;

619 if–(
sqlôe3OpcodePr›îty
[
pOp
->
›code
] & 
OPFLG_JUMP
)!=0 &&ÖOp->
p2
<0 ){

620 
	`as£π
–
	`ADDR
(
pOp
->
p2
)<
pP¨£
->
nLabñ
 );

621 
pOp
->
p2
 = 
aLabñ
[
	`ADDR
(pOp->p2)];

624 if–
pOp
==
p
->
aOp
 ) ;

625 
pOp
--;

627 
	`sqlôe3DbFªe
(
p
->
db
, 
pP¨£
->
aLabñ
);

628 
pP¨£
->
aLabñ
 = 0;

629 
pP¨£
->
nLabñ
 = 0;

630 *
pMaxFuncArgs
 = 
nMaxArgs
;

631 
	`as£π
–
p
->
bIsRódî
!=0 || 
	`DbMaskAŒZîo
’->
båìMask
) );

632 
	}
}

637 
	$sqlôe3VdbeCuºítAddr
(
Vdbe
 *
p
){

638 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

639  
p
->
nOp
;

640 
	}
}

650 #i‡
deföed
(
SQLITE_DEBUG
Ë&& !deföed(
SQLITE_TEST_REALLOC_STRESS
)

651 
	$sqlôe3VdbeVîifyNoMÆlocRequúed
(
Vdbe
 *
p
, 
N
){

652 
	`as£π
–
p
->
nOp
 + 
N
 <p->
pP¨£
->
nOpAŒoc
 );

653 
	}
}

667 
VdbeOp
 *
	$sqlôe3VdbeTakeOpAºay
(
Vdbe
 *
p
, *
≤Op
, *
≤MaxArg
){

668 
VdbeOp
 *
aOp
 = 
p
->aOp;

669 
	`as£π
–
aOp
 && !
p
->
db
->
mÆlocFaûed
 );

672 
	`as£π
–
	`DbMaskAŒZîo
(
p
->
båìMask
) );

674 
	`ªsﬁveP2VÆues
(
p
, 
≤MaxArg
);

675 *
≤Op
 = 
p
->
nOp
;

676 
p
->
aOp
 = 0;

677  
aOp
;

678 
	}
}

687 
VdbeOp
 *
	$sqlôe3VdbeAddOpLi°
(

688 
Vdbe
 *
p
,

689 
nOp
,

690 
VdbeOpLi°
 c⁄° *
aOp
,

691 
iLöío


693 
i
;

694 
VdbeOp
 *
pOut
, *
pFú°
;

695 
	`as£π
–
nOp
>0 );

696 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

697 if–
p
->
nOp
 +ÇO∞>Ö->
pP¨£
->
nOpAŒoc
 && 
	`growOpAºay
(p,ÇOp) ){

700 
pFú°
 = 
pOut
 = &
p
->
aOp
[p->
nOp
];

701 
i
=0; i<
nOp
; i++, 
aOp
++, 
pOut
++){

702 
pOut
->
›code
 = 
aOp
->opcode;

703 
pOut
->
p1
 = 
aOp
->p1;

704 
pOut
->
p2
 = 
aOp
->p2;

705 
	`as£π
–
aOp
->
p2
>=0 );

706 if–(
sqlôe3OpcodePr›îty
[
aOp
->
›code
] & 
OPFLG_JUMP
)!=0 &&áOp->
p2
>0 ){

707 
pOut
->
p2
 +
p
->
nOp
;

709 
pOut
->
p3
 = 
aOp
->p3;

710 
pOut
->
p4ty≥
 = 
P4_NOTUSED
;

711 
pOut
->
p4
.
p
 = 0;

712 
pOut
->
p5
 = 0;

713 #ifde‡
SQLITE_ENABLE_EXPLAIN_COMMENTS


714 
pOut
->
zCommít
 = 0;

716 #ifde‡
SQLITE_VDBE_COVERAGE


717 
pOut
->
iSrcLöe
 = 
iLöío
+
i
;

719 ()
iLöío
;

721 #ifde‡
SQLITE_DEBUG


722 if–
p
->
db
->
Êags
 & 
SQLITE_VdbeAdd›Tø˚
 ){

723 
	`sqlôe3VdbePrötOp
(0, 
i
+
p
->
nOp
, &p->
aOp
[i+p->nOp]);

727 
p
->
nOp
 +=ÇOp;

728  
pFú°
;

729 
	}
}

731 #i‡
deföed
(
SQLITE_ENABLE_STMT_SCANSTATUS
)

735 
	$sqlôe3VdbeSˇnSètus
(

736 
Vdbe
 *
p
,

737 
addrEx∂aö
,

738 
addrLo›
,

739 
addrVisô
,

740 
LogE°
 
nE°
,

741 c⁄° *
zName


743 
nByã
 = (
p
->
nSˇn
+1Ë* (
SˇnSètus
);

744 
SˇnSètus
 *
aNew
;

745 
aNew
 = (
SˇnSètus
*)
	`sqlôe3DbRóŒoc
(
p
->
db
,Ö->
aSˇn
, 
nByã
);

746 if–
aNew
 ){

747 
SˇnSètus
 *
pNew
 = &
aNew
[
p
->
nSˇn
++];

748 
pNew
->
addrEx∂aö
 =áddrExplain;

749 
pNew
->
addrLo›
 =áddrLoop;

750 
pNew
->
addrVisô
 =áddrVisit;

751 
pNew
->
nE°
 =ÇEst;

752 
pNew
->
zName
 = 
	`sqlôe3DbSåDup
(
p
->
db
, zName);

753 
p
->
aSˇn
 = 
aNew
;

755 
	}
}

763 
	$sqlôe3VdbeCh™geOpcode
(
Vdbe
 *
p
, 
u32
 
addr
, 
u8
 
iNewOpcode
){

764 
	`sqlôe3VdbeGëOp
(
p
,
addr
)->
›code
 = 
iNewOpcode
;

765 
	}
}

766 
	$sqlôe3VdbeCh™geP1
(
Vdbe
 *
p
, 
u32
 
addr
, 
vÆ
){

767 
	`sqlôe3VdbeGëOp
(
p
,
addr
)->
p1
 = 
vÆ
;

768 
	}
}

769 
	$sqlôe3VdbeCh™geP2
(
Vdbe
 *
p
, 
u32
 
addr
, 
vÆ
){

770 
	`sqlôe3VdbeGëOp
(
p
,
addr
)->
p2
 = 
vÆ
;

771 
	}
}

772 
	$sqlôe3VdbeCh™geP3
(
Vdbe
 *
p
, 
u32
 
addr
, 
vÆ
){

773 
	`sqlôe3VdbeGëOp
(
p
,
addr
)->
p3
 = 
vÆ
;

774 
	}
}

775 
	$sqlôe3VdbeCh™geP5
(
Vdbe
 *
p
, 
u8
 
p5
){

776 if–!
p
->
db
->
mÆlocFaûed
 )Ö->
aOp
[p->
nOp
-1].
p5
 =Ö5;

777 
	}
}

783 
	$sqlôe3VdbeJumpHîe
(
Vdbe
 *
p
, 
addr
){

784 
p
->
pP¨£
->
iFixedOp
 =Ö->
nOp
 - 1;

785 
	`sqlôe3VdbeCh™geP2
(
p
, 
addr
,Ö->
nOp
);

786 
	}
}

793 
	$‰ìEphemîÆFun˘i⁄
(
sqlôe3
 *
db
, 
FuncDef
 *
pDef
){

794 if–
	`ALWAYS
(
pDef
Ë&& (pDef->
funcFœgs
 & 
SQLITE_FUNC_EPHEM
)!=0 ){

795 
	`sqlôe3DbFªe
(
db
, 
pDef
);

797 
	}
}

799 
vdbeFªeOpAºay
(
sqlôe3
 *, 
Op
 *, );

804 
	$‰ìP4
(
sqlôe3
 *
db
, 
p4ty≥
, *
p4
){

805 
	`as£π
–
db
 );

806  
p4ty≥
 ){

807 
P4_FUNCCTX
: {

808 
	`‰ìEphemîÆFun˘i⁄
(
db
, ((
sqlôe3_c⁄ãxt
*)
p4
)->
pFunc
);

811 
P4_REAL
:

812 
P4_INT64
:

813 
P4_DYNAMIC
:

814 
P4_INTARRAY
: {

815 
	`sqlôe3DbFªe
(
db
, 
p4
);

818 
P4_KEYINFO
: {

819 if–
db
->
≤ByãsFªed
==0 ) 
	`sqlôe3KeyInfoUƒef
((
KeyInfo
*)
p4
);

822 #ifde‡
SQLITE_ENABLE_CURSOR_HINTS


823 
P4_EXPR
: {

824 
	`sqlôe3Ex¥Dñëe
(
db
, (
Ex¥
*)
p4
);

828 
P4_MPRINTF
: {

829 if–
db
->
≤ByãsFªed
==0 ) 
	`sqlôe3_‰ì
(
p4
);

832 
P4_FUNCDEF
: {

833 
	`‰ìEphemîÆFun˘i⁄
(
db
, (
FuncDef
*)
p4
);

836 
P4_MEM
: {

837 if–
db
->
≤ByãsFªed
==0 ){

838 
	`sqlôe3VÆueFªe
((
sqlôe3_vÆue
*)
p4
);

840 
Mem
 *
p
 = (Mem*)
p4
;

841 if–
p
->
szMÆloc
 ) 
	`sqlôe3DbFªe
(
db
,Ö->
zMÆloc
);

842 
	`sqlôe3DbFªe
(
db
, 
p
);

846 
P4_VTAB
 : {

847 if–
db
->
≤ByãsFªed
==0 ) 
	`sqlôe3VèbU∆ock
((
VTabÀ
 *)
p4
);

851 
	}
}

858 
	$vdbeFªeOpAºay
(
sqlôe3
 *
db
, 
Op
 *
aOp
, 
nOp
){

859 if–
aOp
 ){

860 
Op
 *
pOp
;

861 
pOp
=
aOp
;ÖOp<&aOp[
nOp
];ÖOp++){

862 if–
pOp
->
p4ty≥
 ) 
	`‰ìP4
(
db
,ÖOp->p4ty≥,ÖOp->
p4
.
p
);

863 #ifde‡
SQLITE_ENABLE_EXPLAIN_COMMENTS


864 
	`sqlôe3DbFªe
(
db
, 
pOp
->
zCommít
);

868 
	`sqlôe3DbFªe
(
db
, 
aOp
);

869 
	}
}

876 
	$sqlôe3VdbeLökSubProgøm
(
Vdbe
 *
pVdbe
, 
SubProgøm
 *
p
){

877 
p
->
pNext
 = 
pVdbe
->
pProgøm
;

878 
pVdbe
->
pProgøm
 = 
p
;

879 
	}
}

884 
	$sqlôe3VdbeCh™geToNo›
(
Vdbe
 *
p
, 
addr
){

885 
VdbeOp
 *
pOp
;

886 if–
p
->
db
->
mÆlocFaûed
 )  0;

887 
	`as£π
–
addr
>=0 &&áddr<
p
->
nOp
 );

888 
pOp
 = &
p
->
aOp
[
addr
];

889 
	`‰ìP4
(
p
->
db
, 
pOp
->
p4ty≥
,ÖOp->
p4
.p);

890 
pOp
->
p4ty≥
 = 
P4_NOTUSED
;

891 
pOp
->
p4
.
z
 = 0;

892 
pOp
->
›code
 = 
OP_No›
;

894 
	}
}

900 
	$sqlôe3VdbeDñëePri‹Opcode
(
Vdbe
 *
p
, 
u8
 
›
){

901 if–(
p
->
nOp
-1)>’->
pP¨£
->
iFixedOp
Ë&&Ö->
aOp
[p->nOp-1].
›code
==
›
 ){

902  
	`sqlôe3VdbeCh™geToNo›
(
p
,Ö->
nOp
-1);

906 
	}
}

925 
SQLITE_NOINLINE
 
	$vdbeCh™geP4FuŒ
(

926 
Vdbe
 *
p
,

927 
Op
 *
pOp
,

928 c⁄° *
zP4
,

929 
n


931 if–
pOp
->
p4ty≥
 ){

932 
	`‰ìP4
(
p
->
db
, 
pOp
->
p4ty≥
,ÖOp->
p4
.p);

933 
pOp
->
p4ty≥
 = 0;

934 
pOp
->
p4
.
p
 = 0;

936 if–
n
<0 ){

937 
	`sqlôe3VdbeCh™geP4
(
p
, ()(
pOp
 -Ö->
aOp
), 
zP4
, 
n
);

939 if–
n
==0 )Ç = 
	`sqlôe3SåÀn30
(
zP4
);

940 
pOp
->
p4
.
z
 = 
	`sqlôe3DbSåNDup
(
p
->
db
, 
zP4
, 
n
);

941 
pOp
->
p4ty≥
 = 
P4_DYNAMIC
;

943 
	}
}

944 
	$sqlôe3VdbeCh™geP4
(
Vdbe
 *
p
, 
addr
, c⁄° *
zP4
, 
n
){

945 
Op
 *
pOp
;

946 
sqlôe3
 *
db
;

947 
	`as£π
–
p
!=0 );

948 
db
 = 
p
->db;

949 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

950 
	`as£π
–
p
->
aOp
!=0 || 
db
->
mÆlocFaûed
 );

951 if–
db
->
mÆlocFaûed
 ){

952 if–
n
!=
P4_VTAB
 ) 
	`‰ìP4
(
db
,Ç, (*)*(**)&
zP4
);

955 
	`as£π
–
p
->
nOp
>0 );

956 
	`as£π
–
addr
<
p
->
nOp
 );

957 if–
addr
<0 ){

958 
addr
 = 
p
->
nOp
 - 1;

960 
pOp
 = &
p
->
aOp
[
addr
];

961 if–
n
>=0 || 
pOp
->
p4ty≥
 ){

962 
	`vdbeCh™geP4FuŒ
(
p
, 
pOp
, 
zP4
, 
n
);

965 if–
n
==
P4_INT32
 ){

968 
pOp
->
p4
.
i
 = 
	`SQLITE_PTR_TO_INT
(
zP4
);

969 
pOp
->
p4ty≥
 = 
P4_INT32
;

970 }if–
zP4
!=0 ){

971 
	`as£π
–
n
<0 );

972 
pOp
->
p4
.
p
 = (*)
zP4
;

973 
pOp
->
p4ty≥
 = (sig√d )
n
;

974 if–
n
==
P4_VTAB
 ) 
	`sqlôe3VèbLock
((
VTabÀ
*)
zP4
);

976 
	}
}

982 
	$sqlôe3VdbeSëP4KeyInfo
(
P¨£
 *
pP¨£
, 
Index
 *
pIdx
){

983 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

984 
	`as£π
–
v
!=0 );

985 
	`as£π
–
pIdx
!=0 );

986 
	`sqlôe3VdbeCh™geP4
(
v
, -1, (*)
	`sqlôe3KeyInfoOfIndex
(
pP¨£
, 
pIdx
),

987 
P4_KEYINFO
);

988 
	}
}

990 #ifde‡
SQLITE_ENABLE_EXPLAIN_COMMENTS


997 
	$vdbeVCommít
(
Vdbe
 *
p
, c⁄° *
zF‹m©
, 
va_li°
 
≠
){

998 
	`as£π
–
p
->
nOp
>0 ||Ö->
aOp
==0 );

999 
	`as£π
–
p
->
aOp
==0 ||Ö->aOp[p->
nOp
-1].
zCommít
==0 ||Ö->
db
->
mÆlocFaûed
 );

1000 if–
p
->
nOp
 ){

1001 
	`as£π
–
p
->
aOp
 );

1002 
	`sqlôe3DbFªe
(
p
->
db
,Ö->
aOp
[p->
nOp
-1].
zCommít
);

1003 
p
->
aOp
[p->
nOp
-1].
zCommít
 = 
	`sqlôe3VMPrötf
’->
db
, 
zF‹m©
, 
≠
);

1005 
	}
}

1006 
	$sqlôe3VdbeCommít
(
Vdbe
 *
p
, c⁄° *
zF‹m©
, ...){

1007 
va_li°
 
≠
;

1008 if–
p
 ){

1009 
	`va_°¨t
(
≠
, 
zF‹m©
);

1010 
	`vdbeVCommít
(
p
, 
zF‹m©
, 
≠
);

1011 
	`va_íd
(
≠
);

1013 
	}
}

1014 
	$sqlôe3VdbeNo›Commít
(
Vdbe
 *
p
, c⁄° *
zF‹m©
, ...){

1015 
va_li°
 
≠
;

1016 if–
p
 ){

1017 
	`sqlôe3VdbeAddOp0
(
p
, 
OP_No›
);

1018 
	`va_°¨t
(
≠
, 
zF‹m©
);

1019 
	`vdbeVCommít
(
p
, 
zF‹m©
, 
≠
);

1020 
	`va_íd
(
≠
);

1022 
	}
}

1025 #ifde‡
SQLITE_VDBE_COVERAGE


1029 
	$sqlôe3VdbeSëLöeNumbî
(
Vdbe
 *
v
, 
iLöe
){

1030 
	`sqlôe3VdbeGëOp
(
v
,-1)->
iSrcLöe
 = 
iLöe
;

1031 
	}
}

1047 
VdbeOp
 *
	$sqlôe3VdbeGëOp
(
Vdbe
 *
p
, 
addr
){

1050 
VdbeOp
 
dummy
;

1051 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

1052 if–
addr
<0 ){

1053 
addr
 = 
p
->
nOp
 - 1;

1055 
	`as£π
–(
addr
>=0 &&áddr<
p
->
nOp
Ë||Ö->
db
->
mÆlocFaûed
 );

1056 if–
p
->
db
->
mÆlocFaûed
 ){

1057  (
VdbeOp
*)&
dummy
;

1059  &
p
->
aOp
[
addr
];

1061 
	}
}

1063 #i‡
deföed
(
SQLITE_ENABLE_EXPLAIN_COMMENTS
)

1068 
	$å™¶©eP
(
c
, c⁄° 
Op
 *
pOp
){

1069 if–
c
=='1' )  
pOp
->
p1
;

1070 if–
c
=='2' )  
pOp
->
p2
;

1071 if–
c
=='3' )  
pOp
->
p3
;

1072 if–
c
=='4' )  
pOp
->
p4
.
i
;

1073  
pOp
->
p5
;

1074 
	}
}

1089 
	$di•œyCommít
(

1090 c⁄° 
Op
 *
pOp
,

1091 c⁄° *
zP4
,

1092 *
zTemp
,

1093 
nTemp


1095 c⁄° *
zOpName
;

1096 c⁄° *
zSyn›sis
;

1097 
nOpName
;

1098 
ii
, 
jj
;

1099 
zOpName
 = 
	`sqlôe3OpcodeName
(
pOp
->
›code
);

1100 
nOpName
 = 
	`sqlôe3SåÀn30
(
zOpName
);

1101 if–
zOpName
[
nOpName
+1] ){

1102 
£íCom
 = 0;

1103 
c
;

1104 
zSyn›sis
 = 
zOpName
 +
nOpName
 + 1;

1105 
ii
=
jj
=0; jj<
nTemp
-1 && (
c
 = 
zSyn›sis
[ii])!=0; ii++){

1106 if–
c
=='P' ){

1107 
c
 = 
zSyn›sis
[++
ii
];

1108 if–
c
=='4' ){

1109 
	`sqlôe3_¢¥ötf
(
nTemp
-
jj
, 
zTemp
+jj, "%s", 
zP4
);

1110 }if–
c
=='X' ){

1111 
	`sqlôe3_¢¥ötf
(
nTemp
-
jj
, 
zTemp
+jj, "%s", 
pOp
->
zCommít
);

1112 
£íCom
 = 1;

1114 
v1
 = 
	`å™¶©eP
(
c
, 
pOp
);

1115 
v2
;

1116 
	`sqlôe3_¢¥ötf
(
nTemp
-
jj
, 
zTemp
+jj, "%d", 
v1
);

1117 if–
	`°∫cmp
(
zSyn›sis
+
ii
+1, "@P", 2)==0 ){

1118 
ii
 += 3;

1119 
jj
 +
	`sqlôe3SåÀn30
(
zTemp
+jj);

1120 
v2
 = 
	`å™¶©eP
(
zSyn›sis
[
ii
], 
pOp
);

1121 if–
	`°∫cmp
(
zSyn›sis
+
ii
+1,"+1",2)==0 ){

1122 
ii
 += 2;

1123 
v2
++;

1125 if–
v2
>1 ){

1126 
	`sqlôe3_¢¥ötf
(
nTemp
-
jj
, 
zTemp
+jj, "..%d", 
v1
+
v2
-1);

1128 }if–
	`°∫cmp
(
zSyn›sis
+
ii
+1, "..P3", 4)==0 && 
pOp
->
p3
==0 ){

1129 
ii
 += 4;

1132 
jj
 +
	`sqlôe3SåÀn30
(
zTemp
+jj);

1134 
zTemp
[
jj
++] = 
c
;

1137 if–!
£íCom
 && 
jj
<
nTemp
-5 && 
pOp
->
zCommít
 ){

1138 
	`sqlôe3_¢¥ötf
(
nTemp
-
jj
, 
zTemp
+jj, "; %s", 
pOp
->
zCommít
);

1139 
jj
 +
	`sqlôe3SåÀn30
(
zTemp
+jj);

1141 if–
jj
<
nTemp
 ) 
zTemp
[jj] = 0;

1142 }if–
pOp
->
zCommít
 ){

1143 
	`sqlôe3_¢¥ötf
(
nTemp
, 
zTemp
, "%s", 
pOp
->
zCommít
);

1144 
jj
 = 
	`sqlôe3SåÀn30
(
zTemp
);

1146 
zTemp
[0] = 0;

1147 
jj
 = 0;

1149  
jj
;

1150 
	}
}

1153 #i‡
VDBE_DISPLAY_P4
 && 
deföed
(
SQLITE_ENABLE_CURSOR_HINTS
)

1158 
	$di•œyP4Ex¥
(
SåAccum
 *
p
, 
Ex¥
 *
pEx¥
){

1159 c⁄° *
zOp
 = 0;

1160  
pEx¥
->
›
 ){

1161 
TK_STRING
:

1162 
	`sqlôe3XPrötf
(
p
, "%Q", 
pEx¥
->
u
.
zTokí
);

1164 
TK_INTEGER
:

1165 
	`sqlôe3XPrötf
(
p
, "%d", 
pEx¥
->
u
.
iVÆue
);

1167 
TK_NULL
:

1168 
	`sqlôe3XPrötf
(
p
, "NULL");

1170 
TK_REGISTER
: {

1171 
	`sqlôe3XPrötf
(
p
, "r[%d]", 
pEx¥
->
iTabÀ
);

1174 
TK_COLUMN
: {

1175 if–
pEx¥
->
iCﬁumn
<0 ){

1176 
	`sqlôe3XPrötf
(
p
, "rowid");

1178 
	`sqlôe3XPrötf
(
p
, "c%d", ()
pEx¥
->
iCﬁumn
);

1182 
TK_LT
: 
zOp
 = "LT"; ;

1183 
TK_LE
: 
zOp
 = "LE"; ;

1184 
TK_GT
: 
zOp
 = "GT"; ;

1185 
TK_GE
: 
zOp
 = "GE"; ;

1186 
TK_NE
: 
zOp
 = "NE"; ;

1187 
TK_EQ
: 
zOp
 = "EQ"; ;

1188 
TK_IS
: 
zOp
 = "IS"; ;

1189 
TK_ISNOT
: 
zOp
 = "ISNOT"; ;

1190 
TK_AND
: 
zOp
 = "AND"; ;

1191 
TK_OR
: 
zOp
 = "OR"; ;

1192 
TK_PLUS
: 
zOp
 = "ADD"; ;

1193 
TK_STAR
: 
zOp
 = "MUL"; ;

1194 
TK_MINUS
: 
zOp
 = "SUB"; ;

1195 
TK_REM
: 
zOp
 = "REM"; ;

1196 
TK_BITAND
: 
zOp
 = "BITAND"; ;

1197 
TK_BITOR
: 
zOp
 = "BITOR"; ;

1198 
TK_SLASH
: 
zOp
 = "DIV"; ;

1199 
TK_LSHIFT
: 
zOp
 = "LSHIFT"; ;

1200 
TK_RSHIFT
: 
zOp
 = "RSHIFT"; ;

1201 
TK_CONCAT
: 
zOp
 = "CONCAT"; ;

1202 
TK_UMINUS
: 
zOp
 = "MINUS"; ;

1203 
TK_UPLUS
: 
zOp
 = "PLUS"; ;

1204 
TK_BITNOT
: 
zOp
 = "BITNOT"; ;

1205 
TK_NOT
: 
zOp
 = "NOT"; ;

1206 
TK_ISNULL
: 
zOp
 = "ISNULL"; ;

1207 
TK_NOTNULL
: 
zOp
 = "NOTNULL"; ;

1210 
	`sqlôe3XPrötf
(
p
, "%s", "expr");

1214 if–
zOp
 ){

1215 
	`sqlôe3XPrötf
(
p
, "%s(", 
zOp
);

1216 
	`di•œyP4Ex¥
(
p
, 
pEx¥
->
pLe·
);

1217 if–
pEx¥
->
pRight
 ){

1218 
	`sqlôe3SåAccumAµíd
(
p
, ",", 1);

1219 
	`di•œyP4Ex¥
(
p
, 
pEx¥
->
pRight
);

1221 
	`sqlôe3SåAccumAµíd
(
p
, ")", 1);

1223 
	}
}

1227 #i‡
VDBE_DISPLAY_P4


1232 *
	$di•œyP4
(
Op
 *
pOp
, *
zTemp
, 
nTemp
){

1233 *
zP4
 = 
zTemp
;

1234 
SåAccum
 
x
;

1235 
	`as£π
–
nTemp
>=20 );

1236 
	`sqlôe3SåAccumInô
(&
x
, 0, 
zTemp
, 
nTemp
, 0);

1237  
pOp
->
p4ty≥
 ){

1238 
P4_KEYINFO
: {

1239 
j
;

1240 
KeyInfo
 *
pKeyInfo
 = 
pOp
->
p4
.pKeyInfo;

1241 
	`as£π
–
pKeyInfo
->
aS‹tOrdî
!=0 );

1242 
	`sqlôe3XPrötf
(&
x
, "k(%d", 
pKeyInfo
->
nFõld
);

1243 
j
=0; j<
pKeyInfo
->
nFõld
; j++){

1244 
CﬁlSeq
 *
pCﬁl
 = 
pKeyInfo
->
aCﬁl
[
j
];

1245 c⁄° *
zCﬁl
 = 
pCﬁl
 ?ÖCﬁl->
zName
 : "";

1246 if–
	`°rcmp
(
zCﬁl
, "BINARY")==0 ) zColl = "B";

1247 
	`sqlôe3XPrötf
(&
x
, ",%s%s", 
pKeyInfo
->
aS‹tOrdî
[
j
] ? "-" : "", 
zCﬁl
);

1249 
	`sqlôe3SåAccumAµíd
(&
x
, ")", 1);

1252 #ifde‡
SQLITE_ENABLE_CURSOR_HINTS


1253 
P4_EXPR
: {

1254 
	`di•œyP4Ex¥
(&
x
, 
pOp
->
p4
.
pEx¥
);

1258 
P4_COLLSEQ
: {

1259 
CﬁlSeq
 *
pCﬁl
 = 
pOp
->
p4
.pColl;

1260 
	`sqlôe3XPrötf
(&
x
, "(%.20s)", 
pCﬁl
->
zName
);

1263 
P4_FUNCDEF
: {

1264 
FuncDef
 *
pDef
 = 
pOp
->
p4
.
pFunc
;

1265 
	`sqlôe3XPrötf
(&
x
, "%s(%d)", 
pDef
->
zName
,ÖDef->
nArg
);

1268 #ifde‡
SQLITE_DEBUG


1269 
P4_FUNCCTX
: {

1270 
FuncDef
 *
pDef
 = 
pOp
->
p4
.
pCtx
->
pFunc
;

1271 
	`sqlôe3XPrötf
(&
x
, "%s(%d)", 
pDef
->
zName
,ÖDef->
nArg
);

1275 
P4_INT64
: {

1276 
	`sqlôe3XPrötf
(&
x
, "%Œd", *
pOp
->
p4
.
pI64
);

1279 
P4_INT32
: {

1280 
	`sqlôe3XPrötf
(&
x
, "%d", 
pOp
->
p4
.
i
);

1283 
P4_REAL
: {

1284 
	`sqlôe3XPrötf
(&
x
, "%.16g", *
pOp
->
p4
.
pRól
);

1287 
P4_MEM
: {

1288 
Mem
 *
pMem
 = 
pOp
->
p4
.pMem;

1289 if–
pMem
->
Êags
 & 
MEM_Så
 ){

1290 
zP4
 = 
pMem
->
z
;

1291 }if–
pMem
->
Êags
 & 
MEM_I¡
 ){

1292 
	`sqlôe3XPrötf
(&
x
, "%Œd", 
pMem
->
u
.
i
);

1293 }if–
pMem
->
Êags
 & 
MEM_Ról
 ){

1294 
	`sqlôe3XPrötf
(&
x
, "%.16g", 
pMem
->
u
.
r
);

1295 }if–
pMem
->
Êags
 & 
MEM_NuŒ
 ){

1296 
zP4
 = "NULL";

1298 
	`as£π
–
pMem
->
Êags
 & 
MEM_Blob
 );

1299 
zP4
 = "(blob)";

1303 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


1304 
P4_VTAB
: {

1305 
sqlôe3_vèb
 *
pVèb
 = 
pOp
->
p4
.pVtab->pVtab;

1306 
	`sqlôe3XPrötf
(&
x
, "vèb:%p", 
pVèb
);

1310 
P4_INTARRAY
: {

1311 
i
;

1312 *
ai
 = 
pOp
->
p4
.ai;

1313 
n
 = 
ai
[0];

1315 
i
=1; i<
n
; i++){

1316 
	`sqlôe3XPrötf
(&
x
, ",%d", 
ai
[
i
]);

1318 
zTemp
[0] = '[';

1319 
	`sqlôe3SåAccumAµíd
(&
x
, "]", 1);

1322 
P4_SUBPROGRAM
: {

1323 
	`sqlôe3XPrötf
(&
x
, "program");

1326 
P4_ADVANCE
: {

1327 
zTemp
[0] = 0;

1330 
P4_TABLE
: {

1331 
	`sqlôe3XPrötf
(&
x
, "%s", 
pOp
->
p4
.
pTab
->
zName
);

1335 
zP4
 = 
pOp
->
p4
.
z
;

1336 if–
zP4
==0 ){

1337 
zP4
 = 
zTemp
;

1338 
zTemp
[0] = 0;

1342 
	`sqlôe3SåAccumFöish
(&
x
);

1343 
	`as£π
–
zP4
!=0 );

1344  
zP4
;

1345 
	}
}

1356 
	$sqlôe3VdbeU£sBåì
(
Vdbe
 *
p
, 
i
){

1357 
	`as£π
–
i
>=0 && i<
p
->
db
->
nDb
 && i<()(
yDbMask
)*8 );

1358 
	`as£π
–
i
<()(
p
->
båìMask
)*8 );

1359 
	`DbMaskSë
(
p
->
båìMask
, 
i
);

1360 if–
i
!=1 && 
	`sqlôe3BåìSh¨abÀ
(
p
->
db
->
aDb
[i].
pBt
) ){

1361 
	`DbMaskSë
(
p
->
lockMask
, 
i
);

1363 
	}
}

1365 #i‡!
deföed
(
SQLITE_OMIT_SHARED_CACHE
)

1387 
	$sqlôe3VdbeE¡î
(
Vdbe
 *
p
){

1388 
i
;

1389 
sqlôe3
 *
db
;

1390 
Db
 *
aDb
;

1391 
nDb
;

1392 if–
	`DbMaskAŒZîo
(
p
->
lockMask
) ) ;

1393 
db
 = 
p
->db;

1394 
aDb
 = 
db
->aDb;

1395 
nDb
 = 
db
->nDb;

1396 
i
=0; i<
nDb
; i++){

1397 if–
i
!=1 && 
	`DbMaskTe°
(
p
->
lockMask
,iË&& 
	`ALWAYS
(
aDb
[i].
pBt
!=0) ){

1398 
	`sqlôe3BåìE¡î
(
aDb
[
i
].
pBt
);

1401 
	}
}

1404 #i‡!
deföed
(
SQLITE_OMIT_SHARED_CACHE
Ë&& 
SQLITE_THREADSAFE
>0

1408 
SQLITE_NOINLINE
 
	$vdbeLóve
(
Vdbe
 *
p
){

1409 
i
;

1410 
sqlôe3
 *
db
;

1411 
Db
 *
aDb
;

1412 
nDb
;

1413 
db
 = 
p
->db;

1414 
aDb
 = 
db
->aDb;

1415 
nDb
 = 
db
->nDb;

1416 
i
=0; i<
nDb
; i++){

1417 if–
i
!=1 && 
	`DbMaskTe°
(
p
->
lockMask
,iË&& 
	`ALWAYS
(
aDb
[i].
pBt
!=0) ){

1418 
	`sqlôe3BåìLóve
(
aDb
[
i
].
pBt
);

1421 
	}
}

1422 
	$sqlôe3VdbeLóve
(
Vdbe
 *
p
){

1423 if–
	`DbMaskAŒZîo
(
p
->
lockMask
) ) ;

1424 
	`vdbeLóve
(
p
);

1425 
	}
}

1428 #i‡
deföed
(
VDBE_PROFILE
Ë|| deföed(
SQLITE_DEBUG
)

1432 
	$sqlôe3VdbePrötOp
(
FILE
 *
pOut
, 
pc
, 
Op
 *
pOp
){

1433 *
zP4
;

1434 
zPå
[50];

1435 
zCom
[100];

1436 c⁄° *
zF‹m©1
 = "%4d %-13s %4d %4d %4d %-13s %.2X %s\n";

1437 if–
pOut
==0 )ÖOuà
°dout
;

1438 
zP4
 = 
	`di•œyP4
(
pOp
, 
zPå
, (zPtr));

1439 #ifde‡
SQLITE_ENABLE_EXPLAIN_COMMENTS


1440 
	`di•œyCommít
(
pOp
, 
zP4
, 
zCom
, (zCom));

1442 
zCom
[0] = 0;

1447 
	`Ârötf
(
pOut
, 
zF‹m©1
, 
pc
,

1448 
	`sqlôe3OpcodeName
(
pOp
->
›code
),ÖOp->
p1
,ÖOp->
p2
,ÖOp->
p3
, 
zP4
,ÖOp->
p5
,

1449 
zCom


1451 
	`fÊush
(
pOut
);

1452 
	}
}

1458 
	$ªÀa£MemAºay
(
Mem
 *
p
, 
N
){

1459 if–
p
 && 
N
 ){

1460 
Mem
 *
pEnd
 = &
p
[
N
];

1461 
sqlôe3
 *
db
 = 
p
->db;

1462 if–
db
->
≤ByãsFªed
 ){

1464 if–
p
->
szMÆloc
 ) 
	`sqlôe3DbFªe
(
db
,Ö->
zMÆloc
);

1465 } (++
p
)<
pEnd
 );

1469 
	`as£π
–(&
p
[1])==
pEnd
 ||Ö[0].
db
==p[1].db );

1470 
	`as£π
–
	`sqlôe3VdbeCheckMemInv¨ü¡s
(
p
) );

1484 
	`ã°ˇ£
–
p
->
Êags
 & 
MEM_Agg
 );

1485 
	`ã°ˇ£
–
p
->
Êags
 & 
MEM_Dyn
 );

1486 
	`ã°ˇ£
–
p
->
Êags
 & 
MEM_Føme
 );

1487 
	`ã°ˇ£
–
p
->
Êags
 & 
MEM_RowSë
 );

1488 if–
p
->
Êags
&(
MEM_Agg
|
MEM_Dyn
|
MEM_Føme
|
MEM_RowSë
) ){

1489 
	`sqlôe3VdbeMemRñó£
(
p
);

1490 }if–
p
->
szMÆloc
 ){

1491 
	`sqlôe3DbFªe
(
db
, 
p
->
zMÆloc
);

1492 
p
->
szMÆloc
 = 0;

1495 
p
->
Êags
 = 
MEM_Undeföed
;

1496 } (++
p
)<
pEnd
 );

1498 
	}
}

1504 
	$sqlôe3VdbeFømeDñëe
(
VdbeFøme
 *
p
){

1505 
i
;

1506 
Mem
 *
aMem
 = 
	`VdbeFømeMem
(
p
);

1507 
VdbeCurs‹
 **
≠C§
 = (VdbeCurs‹ **)&
aMem
[
p
->
nChûdMem
];

1508 
i
=0; i<
p
->
nChûdC§
; i++){

1509 
	`sqlôe3VdbeFªeCurs‹
(
p
->
v
, 
≠C§
[
i
]);

1511 
	`ªÀa£MemAºay
(
aMem
, 
p
->
nChûdMem
);

1512 
	`sqlôe3VdbeDñëeAuxD©a
(
p
->
v
->
db
, &p->
pAuxD©a
, -1, 0);

1513 
	`sqlôe3DbFªe
(
p
->
v
->
db
,Ö);

1514 
	}
}

1516 #i‚de‡
SQLITE_OMIT_EXPLAIN


1532 
	$sqlôe3VdbeLi°
(

1533 
Vdbe
 *
p


1535 
nRow
;

1536 
nSub
 = 0;

1537 
SubProgøm
 **
≠Sub
 = 0;

1538 
Mem
 *
pSub
 = 0;

1539 
sqlôe3
 *
db
 = 
p
->db;

1540 
i
;

1541 
rc
 = 
SQLITE_OK
;

1542 
Mem
 *
pMem
 = &
p
->
aMem
[1];

1544 
	`as£π
–
p
->
ex∂aö
 );

1545 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_RUN
 );

1546 
	`as£π
–
p
->
rc
==
SQLITE_OK
 ||Ö->rc==
SQLITE_BUSY
 ||Ö->rc==
SQLITE_NOMEM
 );

1552 
	`ªÀa£MemAºay
(
pMem
, 8);

1553 
p
->
pResu…Së
 = 0;

1555 if–
p
->
rc
==
SQLITE_NOMEM_BKPT
 ){

1558 
	`sqlôe3OomFau…
(
db
);

1559  
SQLITE_ERROR
;

1569 
nRow
 = 
p
->
nOp
;

1570 if–
p
->
ex∂aö
==1 ){

1575 
	`as£π
–
p
->
nMem
>9 );

1576 
pSub
 = &
p
->
aMem
[9];

1577 if–
pSub
->
Êags
&
MEM_Blob
 ){

1580 
nSub
 = 
pSub
->
n
/(
Vdbe
*);

1581 
≠Sub
 = (
SubProgøm
 **)
pSub
->
z
;

1583 
i
=0; i<
nSub
; i++){

1584 
nRow
 +
≠Sub
[
i
]->
nOp
;

1589 
i
 = 
p
->
pc
++;

1590 } 
i
<
nRow
 && 
p
->
ex∂aö
==2 &&Ö->
aOp
[i].
›code
!=
OP_Ex∂aö
 );

1591 if–
i
>=
nRow
 ){

1592 
p
->
rc
 = 
SQLITE_OK
;

1593 
rc
 = 
SQLITE_DONE
;

1594 }if–
db
->
u1
.
isI¡îru±ed
 ){

1595 
p
->
rc
 = 
SQLITE_INTERRUPT
;

1596 
rc
 = 
SQLITE_ERROR
;

1597 
	`sqlôe3VdbeEº‹
(
p
, 
	`sqlôe3EºSå
’->
rc
));

1599 *
zP4
;

1600 
Op
 *
pOp
;

1601 if–
i
<
p
->
nOp
 ){

1604 
pOp
 = &
p
->
aOp
[
i
];

1608 
j
;

1609 
i
 -
p
->
nOp
;

1610 
j
=0; 
i
>=
≠Sub
[j]->
nOp
; j++){

1611 
i
 -
≠Sub
[
j
]->
nOp
;

1613 
pOp
 = &
≠Sub
[
j
]->
aOp
[
i
];

1615 if–
p
->
ex∂aö
==1 ){

1616 
pMem
->
Êags
 = 
MEM_I¡
;

1617 
pMem
->
u
.
i
 = i;

1618 
pMem
++;

1620 
pMem
->
Êags
 = 
MEM_Sètic
|
MEM_Så
|
MEM_Tîm
;

1621 
pMem
->
z
 = (*)
	`sqlôe3OpcodeName
(
pOp
->
›code
);

1622 
	`as£π
–
pMem
->
z
!=0 );

1623 
pMem
->
n
 = 
	`sqlôe3SåÀn30
’Mem->
z
);

1624 
pMem
->
íc
 = 
SQLITE_UTF8
;

1625 
pMem
++;

1632 if–
pOp
->
p4ty≥
==
P4_SUBPROGRAM
 ){

1633 
nByã
 = (
nSub
+1)*(
SubProgøm
*);

1634 
j
;

1635 
j
=0; j<
nSub
; j++){

1636 if–
≠Sub
[
j
]==
pOp
->
p4
.
pProgøm
 ) ;

1638 if–
j
==
nSub
 && 
SQLITE_OK
==
	`sqlôe3VdbeMemGrow
(
pSub
, 
nByã
,ÇSub!=0) ){

1639 
≠Sub
 = (
SubProgøm
 **)
pSub
->
z
;

1640 
≠Sub
[
nSub
++] = 
pOp
->
p4
.
pProgøm
;

1641 
pSub
->
Êags
 |
MEM_Blob
;

1642 
pSub
->
n
 = 
nSub
*(
SubProgøm
*);

1647 
pMem
->
Êags
 = 
MEM_I¡
;

1648 
pMem
->
u
.
i
 = 
pOp
->
p1
;

1649 
pMem
++;

1651 
pMem
->
Êags
 = 
MEM_I¡
;

1652 
pMem
->
u
.
i
 = 
pOp
->
p2
;

1653 
pMem
++;

1655 
pMem
->
Êags
 = 
MEM_I¡
;

1656 
pMem
->
u
.
i
 = 
pOp
->
p3
;

1657 
pMem
++;

1659 if–
	`sqlôe3VdbeMemCÀ¨AndResize
(
pMem
, 100) ){

1660 
	`as£π
–
p
->
db
->
mÆlocFaûed
 );

1661  
SQLITE_ERROR
;

1663 
pMem
->
Êags
 = 
MEM_Så
|
MEM_Tîm
;

1664 
zP4
 = 
	`di•œyP4
(
pOp
, 
pMem
->
z
,ÖMem->
szMÆloc
);

1665 if–
zP4
!=
pMem
->
z
 ){

1666 
	`sqlôe3VdbeMemSëSå
(
pMem
, 
zP4
, -1, 
SQLITE_UTF8
, 0);

1668 
	`as£π
–
pMem
->
z
!=0 );

1669 
pMem
->
n
 = 
	`sqlôe3SåÀn30
’Mem->
z
);

1670 
pMem
->
íc
 = 
SQLITE_UTF8
;

1672 
pMem
++;

1674 if–
p
->
ex∂aö
==1 ){

1675 if–
	`sqlôe3VdbeMemCÀ¨AndResize
(
pMem
, 4) ){

1676 
	`as£π
–
p
->
db
->
mÆlocFaûed
 );

1677  
SQLITE_ERROR
;

1679 
pMem
->
Êags
 = 
MEM_Så
|
MEM_Tîm
;

1680 
pMem
->
n
 = 2;

1681 
	`sqlôe3_¢¥ötf
(3, 
pMem
->
z
, "%.2x", 
pOp
->
p5
);

1682 
pMem
->
íc
 = 
SQLITE_UTF8
;

1683 
pMem
++;

1685 #ifde‡
SQLITE_ENABLE_EXPLAIN_COMMENTS


1686 if–
	`sqlôe3VdbeMemCÀ¨AndResize
(
pMem
, 500) ){

1687 
	`as£π
–
p
->
db
->
mÆlocFaûed
 );

1688  
SQLITE_ERROR
;

1690 
pMem
->
Êags
 = 
MEM_Så
|
MEM_Tîm
;

1691 
pMem
->
n
 = 
	`di•œyCommít
(
pOp
, 
zP4
,ÖMem->
z
, 500);

1692 
pMem
->
íc
 = 
SQLITE_UTF8
;

1694 
pMem
->
Êags
 = 
MEM_NuŒ
;

1698 
p
->
nResCﬁumn
 = 8 - 4*’->
ex∂aö
-1);

1699 
p
->
pResu…Së
 = &p->
aMem
[1];

1700 
p
->
rc
 = 
SQLITE_OK
;

1701 
rc
 = 
SQLITE_ROW
;

1703  
rc
;

1704 
	}
}

1707 #ifde‡
SQLITE_DEBUG


1711 
	$sqlôe3VdbePrötSql
(
Vdbe
 *
p
){

1712 c⁄° *
z
 = 0;

1713 if–
p
->
zSql
 ){

1714 
z
 = 
p
->
zSql
;

1715 }if–
p
->
nOp
>=1 ){

1716 c⁄° 
VdbeOp
 *
pOp
 = &
p
->
aOp
[0];

1717 if–
pOp
->
›code
==
OP_Inô
 &&ÖOp->
p4
.
z
!=0 ){

1718 
z
 = 
pOp
->
p4
.z;

1719  
	`sqlôe3Is•a˚
(*
z
) ) z++;

1722 if–
z
 ) 
	`¥ötf
("SQL: [%s]\n", z);

1723 
	}
}

1726 #i‡!
deföed
(
SQLITE_OMIT_TRACE
Ë&& deföed(
SQLITE_ENABLE_IOTRACE
)

1730 
	$sqlôe3VdbeIOTø˚Sql
(
Vdbe
 *
p
){

1731 
nOp
 = 
p
->nOp;

1732 
VdbeOp
 *
pOp
;

1733 if–
sqlôe3IoTø˚
==0 ) ;

1734 if–
nOp
<1 ) ;

1735 
pOp
 = &
p
->
aOp
[0];

1736 if–
pOp
->
›code
==
OP_Inô
 &&ÖOp->
p4
.
z
!=0 ){

1737 
i
, 
j
;

1738 
z
[1000];

1739 
	`sqlôe3_¢¥ötf
((
z
), z, "%s", 
pOp
->
p4
.z);

1740 
i
=0; 
	`sqlôe3Is•a˚
(
z
[i]); i++){}

1741 
j
=0; 
z
[
i
]; i++){

1742 if–
	`sqlôe3Is•a˚
(
z
[
i
]) ){

1743 if–
z
[
i
-1]!=' ' ){

1744 
z
[
j
++] = ' ';

1747 
z
[
j
++] = z[
i
];

1750 
z
[
j
] = 0;

1751 
	`sqlôe3IoTø˚
("SQL %s\n", 
z
);

1753 
	}
}

1760 
	sReußbÀS∑˚
 {

1761 
u8
 *
	mpS∑˚
;

1762 
	mnFªe
;

1763 
	mnNìded
;

1780 *
	$ÆlocS∑˚
(

1781 
ReußbÀS∑˚
 *
p
,

1782 *
pBuf
,

1783 
nByã


1785 
	`as£π
–
	`EIGHT_BYTE_ALIGNMENT
(
p
->
pS∑˚
) );

1786 if–
pBuf
==0 ){

1787 
nByã
 = 
	`ROUND8
(nByte);

1788 if–
nByã
 <
p
->
nFªe
 ){

1789 
p
->
nFªe
 -
nByã
;

1790 
pBuf
 = &
p
->
pS∑˚
[p->
nFªe
];

1792 
p
->
nNìded
 +
nByã
;

1795 
	`as£π
–
	`EIGHT_BYTE_ALIGNMENT
(
pBuf
) );

1796  
pBuf
;

1797 
	}
}

1803 
	$sqlôe3VdbeRewöd
(
Vdbe
 *
p
){

1804 #i‡
	`deföed
(
SQLITE_DEBUG
Ë|| deföed(
VDBE_PROFILE
)

1805 
i
;

1807 
	`as£π
–
p
!=0 );

1808 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

1812 
	`as£π
–
p
->
nOp
>0 );

1815 
p
->
magic
 = 
VDBE_MAGIC_RUN
;

1817 #ifde‡
SQLITE_DEBUG


1818 
i
=0; i<
p
->
nMem
; i++){

1819 
	`as£π
–
p
->
aMem
[
i
].
db
==p->db );

1822 
p
->
pc
 = -1;

1823 
p
->
rc
 = 
SQLITE_OK
;

1824 
p
->
îr‹A˘i⁄
 = 
OE_Ab‹t
;

1825 
p
->
nCh™ge
 = 0;

1826 
p
->
ˇcheCå
 = 1;

1827 
p
->
möWrôeFûeF‹m©
 = 255;

1828 
p
->
iSèãmít
 = 0;

1829 
p
->
nFkC⁄°øöt
 = 0;

1830 #ifde‡
VDBE_PROFILE


1831 
i
=0; i<
p
->
nOp
; i++){

1832 
p
->
aOp
[
i
].
˙t
 = 0;

1833 
p
->
aOp
[
i
].
cy˛es
 = 0;

1836 
	}
}

1856 
	$sqlôe3VdbeMakeRódy
(

1857 
Vdbe
 *
p
,

1858 
P¨£
 *
pP¨£


1860 
sqlôe3
 *
db
;

1861 
nV¨
;

1862 
nMem
;

1863 
nCurs‹
;

1864 
nArg
;

1865 
nOn˚
;

1866 
n
;

1867 
ReußbÀS∑˚
 
x
;

1869 
	`as£π
–
p
!=0 );

1870 
	`as£π
–
p
->
nOp
>0 );

1871 
	`as£π
–
pP¨£
!=0 );

1872 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

1873 
	`as£π
–
pP¨£
==
p
->pParse );

1874 
db
 = 
p
->db;

1875 
	`as£π
–
db
->
mÆlocFaûed
==0 );

1876 
nV¨
 = 
pP¨£
->nVar;

1877 
nMem
 = 
pP¨£
->nMem;

1878 
nCurs‹
 = 
pP¨£
->
nTab
;

1879 
nArg
 = 
pP¨£
->
nMaxArg
;

1880 
nOn˚
 = 
pP¨£
->nOnce;

1881 if–
nOn˚
==0 )ÇOnce = 1;

1888 
nMem
 +
nCurs‹
;

1889 if–
nCurs‹
==0 && 
nMem
>0 )ÇMem++;

1895 
n
 = 
	`ROUND8
((
Op
)*
p
->
nOp
);

1896 
x
.
pS∑˚
 = &((
u8
*)
p
->
aOp
)[
n
];

1897 
	`as£π
–
	`EIGHT_BYTE_ALIGNMENT
(
x
.
pS∑˚
) );

1898 
x
.
nFªe
 = 
	`ROUNDDOWN8
(
pP¨£
->
szOpAŒoc
 - 
n
);

1899 
	`as£π
–
x
.
nFªe
>=0 );

1900 if–
x
.
nFªe
>0 ){

1901 
	`mem£t
(
x
.
pS∑˚
, 0, x.
nFªe
);

1902 
	`as£π
–
	`EIGHT_BYTE_ALIGNMENT
(&
x
.
pS∑˚
[x.
nFªe
]) );

1905 
	`ªsﬁveP2VÆues
(
p
, &
nArg
);

1906 
p
->
u£sStmtJou∫Æ
 = (
u8
)(
pP¨£
->
isMu…iWrôe
 &&ÖP¨£->
mayAb‹t
);

1907 if–
pP¨£
->
ex∂aö
 && 
nMem
<10 ){

1908 
nMem
 = 10;

1910 
p
->
expúed
 = 0;

1923 
x
.
nNìded
 = 0;

1924 
p
->
aMem
 = 
	`ÆlocS∑˚
(&
x
,Ö->aMem, 
nMem
*(
Mem
));

1925 
p
->
aV¨
 = 
	`ÆlocS∑˚
(&
x
,Ö->aV¨, 
nV¨
*(
Mem
));

1926 
p
->
≠Arg
 = 
	`ÆlocS∑˚
(&
x
,Ö->≠Arg, 
nArg
*(
Mem
*));

1927 
p
->
≠C§
 = 
	`ÆlocS∑˚
(&
x
,Ö->≠C§, 
nCurs‹
*(
VdbeCurs‹
*));

1928 
p
->
aOn˚Fœg
 = 
	`ÆlocS∑˚
(&
x
,Ö->aOn˚Fœg, 
nOn˚
);

1929 #ifde‡
SQLITE_ENABLE_STMT_SCANSTATUS


1930 
p
->
™Exec
 = 
	`ÆlocS∑˚
(&
x
,Ö->™Exec,Ö->
nOp
*(
i64
));

1932 if–
x
.
nNìded
==0 ) ;

1933 
x
.
pS∑˚
 = 
p
->
pFªe
 = 
	`sqlôe3DbMÆlocZîo
(
db
, x.
nNìded
);

1934 
x
.
nFªe
 = x.
nNìded
;

1935 } !
db
->
mÆlocFaûed
 );

1937 
p
->
nCurs‹
 =ÇCursor;

1938 
p
->
nOn˚Fœg
 = 
nOn˚
;

1939 if–
p
->
aV¨
 ){

1940 
p
->
nV¨
 = (
ynV¨
)nVar;

1941 
n
=0;Ç<
nV¨
;Ç++){

1942 
p
->
aV¨
[
n
].
Êags
 = 
MEM_NuŒ
;

1943 
p
->
aV¨
[
n
].
db
 = db;

1946 
p
->
nzV¨
 = 
pP¨£
->nzVar;

1947 
p
->
azV¨
 = 
pP¨£
->azVar;

1948 
pP¨£
->
nzV¨
 = 0;

1949 
pP¨£
->
azV¨
 = 0;

1950 if–
p
->
aMem
 ){

1951 
p
->
nMem
 =ÇMem;

1952 
n
=0;Ç<
nMem
;Ç++){

1953 
p
->
aMem
[
n
].
Êags
 = 
MEM_Undeföed
;

1954 
p
->
aMem
[
n
].
db
 = db;

1957 
p
->
ex∂aö
 = 
pP¨£
->explain;

1958 
	`sqlôe3VdbeRewöd
(
p
);

1959 
	}
}

1965 
	$sqlôe3VdbeFªeCurs‹
(
Vdbe
 *
p
, 
VdbeCurs‹
 *
pCx
){

1966 if–
pCx
==0 ){

1969 
	`as£π
–
pCx
->
pBt
==0 ||ÖCx->
eCurTy≥
==
CURTYPE_BTREE
 );

1970  
pCx
->
eCurTy≥
 ){

1971 
CURTYPE_SORTER
: {

1972 
	`sqlôe3VdbeS‹ãrClo£
(
p
->
db
, 
pCx
);

1975 
CURTYPE_BTREE
: {

1976 if–
pCx
->
pBt
 ){

1977 
	`sqlôe3BåìClo£
(
pCx
->
pBt
);

1981 
	`as£π
–
pCx
->
uc
.
pCurs‹
!=0 );

1982 
	`sqlôe3BåìClo£Curs‹
(
pCx
->
uc
.
pCurs‹
);

1986 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


1987 
CURTYPE_VTAB
: {

1988 
sqlôe3_vèb_curs‹
 *
pVCur
 = 
pCx
->
uc
.pVCur;

1989 c⁄° 
sqlôe3_moduÀ
 *
pModuÀ
 = 
pVCur
->
pVèb
->pModule;

1990 
	`as£π
–
pVCur
->
pVèb
->
nRef
>0 );

1991 
pVCur
->
pVèb
->
nRef
--;

1992 
pModuÀ
->
	`xClo£
(
pVCur
);

1997 
	}
}

2002 
	$˛o£Curs‹sInFøme
(
Vdbe
 *
p
){

2003 if–
p
->
≠C§
 ){

2004 
i
;

2005 
i
=0; i<
p
->
nCurs‹
; i++){

2006 
VdbeCurs‹
 *
pC
 = 
p
->
≠C§
[
i
];

2007 if–
pC
 ){

2008 
	`sqlôe3VdbeFªeCurs‹
(
p
, 
pC
);

2009 
p
->
≠C§
[
i
] = 0;

2013 
	}
}

2020 
	$sqlôe3VdbeFømeRe°‹e
(
VdbeFøme
 *
pFøme
){

2021 
Vdbe
 *
v
 = 
pFøme
->v;

2022 
	`˛o£Curs‹sInFøme
(
v
);

2023 #ifde‡
SQLITE_ENABLE_STMT_SCANSTATUS


2024 
v
->
™Exec
 = 
pFøme
->anExec;

2026 
v
->
aOn˚Fœg
 = 
pFøme
->aOnceFlag;

2027 
v
->
nOn˚Fœg
 = 
pFøme
->nOnceFlag;

2028 
v
->
aOp
 = 
pFøme
->aOp;

2029 
v
->
nOp
 = 
pFøme
->nOp;

2030 
v
->
aMem
 = 
pFøme
->aMem;

2031 
v
->
nMem
 = 
pFøme
->nMem;

2032 
v
->
≠C§
 = 
pFøme
->apCsr;

2033 
v
->
nCurs‹
 = 
pFøme
->nCursor;

2034 
v
->
db
->
œ°Rowid
 = 
pFøme
->lastRowid;

2035 
v
->
nCh™ge
 = 
pFøme
->nChange;

2036 
v
->
db
->
nCh™ge
 = 
pFøme
->
nDbCh™ge
;

2037 
	`sqlôe3VdbeDñëeAuxD©a
(
v
->
db
, &v->
pAuxD©a
, -1, 0);

2038 
v
->
pAuxD©a
 = 
pFøme
->pAuxData;

2039 
pFøme
->
pAuxD©a
 = 0;

2040  
pFøme
->
pc
;

2041 
	}
}

2051 
	$˛o£AŒCurs‹s
(
Vdbe
 *
p
){

2052 if–
p
->
pFøme
 ){

2053 
VdbeFøme
 *
pFøme
;

2054 
pFøme
=
p
->pFøme;ÖFøme->
pP¨ít
;ÖFrame=pFrame->pParent);

2055 
	`sqlôe3VdbeFømeRe°‹e
(
pFøme
);

2056 
p
->
pFøme
 = 0;

2057 
p
->
nFøme
 = 0;

2059 
	`as£π
–
p
->
nFøme
==0 );

2060 
	`˛o£Curs‹sInFøme
(
p
);

2061 if–
p
->
aMem
 ){

2062 
	`ªÀa£MemAºay
(
p
->
aMem
,Ö->
nMem
);

2064  
p
->
pDñFøme
 ){

2065 
VdbeFøme
 *
pDñ
 = 
p
->
pDñFøme
;

2066 
p
->
pDñFøme
 = 
pDñ
->
pP¨ít
;

2067 
	`sqlôe3VdbeFømeDñëe
(
pDñ
);

2071 if–
p
->
pAuxD©a
 ) 
	`sqlôe3VdbeDñëeAuxD©a
’->
db
, &p->pAuxData, -1, 0);

2072 
	`as£π
–
p
->
pAuxD©a
==0 );

2073 
	}
}

2078 
	$CÀ™up
(
Vdbe
 *
p
){

2079 
sqlôe3
 *
db
 = 
p
->db;

2081 #ifde‡
SQLITE_DEBUG


2084 
i
;

2085 if–
p
->
≠C§
 ) 
i
=0; i<p->
nCurs‹
; i++Ë
	`as£π
(Ö->apCsr[i]==0 );

2086 if–
p
->
aMem
 ){

2087 
i
=0; i<
p
->
nMem
; i++Ë
	`as£π
–p->
aMem
[i].
Êags
==
MEM_Undeföed
 );

2091 
	`sqlôe3DbFªe
(
db
, 
p
->
zEºMsg
);

2092 
p
->
zEºMsg
 = 0;

2093 
p
->
pResu…Së
 = 0;

2094 
	}
}

2102 
	$sqlôe3VdbeSëNumCﬁs
(
Vdbe
 *
p
, 
nResCﬁumn
){

2103 
Mem
 *
pCﬁName
;

2104 
n
;

2105 
sqlôe3
 *
db
 = 
p
->db;

2107 
	`ªÀa£MemAºay
(
p
->
aCﬁName
,Ö->
nResCﬁumn
*
COLNAME_N
);

2108 
	`sqlôe3DbFªe
(
db
, 
p
->
aCﬁName
);

2109 
n
 = 
nResCﬁumn
*
COLNAME_N
;

2110 
p
->
nResCﬁumn
 = (
u16
)nResColumn;

2111 
p
->
aCﬁName
 = 
pCﬁName
 = (
Mem
*)
	`sqlôe3DbMÆlocZîo
(
db
, (Mem)*
n
 );

2112 if–
p
->
aCﬁName
==0 ) ;

2113  
n
-- > 0 ){

2114 
pCﬁName
->
Êags
 = 
MEM_NuŒ
;

2115 
pCﬁName
->
db
 = 
p
->db;

2116 
pCﬁName
++;

2118 
	}
}

2130 
sqlôe3VdbeSëCﬁName
(

2131 
Vdbe
 *
p
,

2132 
idx
,

2133 
v¨
,

2134 c⁄° *
zName
,

2135 (*
xDñ
)(*)

2137 
rc
;

2138 
Mem
 *
pCﬁName
;

2139 
	`as£π
–
idx
<
p
->
nResCﬁumn
 );

2140 
	`as£π
–
v¨
<
COLNAME_N
 );

2141 if–
p
->
db
->
mÆlocFaûed
 ){

2142 
	`as£π
–!
zName
 || 
xDñ
!=
SQLITE_DYNAMIC
 );

2143  
SQLITE_NOMEM_BKPT
;

2145 
	`as£π
–
p
->
aCﬁName
!=0 );

2146 
pCﬁName
 = &(
p
->
aCﬁName
[
idx
+
v¨
*p->
nResCﬁumn
]);

2147 
rc
 = 
	`sqlôe3VdbeMemSëSå
(
pCﬁName
, 
zName
, -1, 
SQLITE_UTF8
, 
xDñ
);

2148 
	`as£π
–
rc
!=0 || !
zName
 || (
pCﬁName
->
Êags
&
MEM_Tîm
)!=0 );

2149  
rc
;

2150 
	}
}

2158 
	$vdbeCommô
(
sqlôe3
 *
db
, 
Vdbe
 *
p
){

2159 
i
;

2160 
nTøns
 = 0;

2163 
rc
 = 
SQLITE_OK
;

2164 
√edXcommô
 = 0;

2166 #ifde‡
SQLITE_OMIT_VIRTUALTABLE


2170 
	`UNUSED_PARAMETER
(
p
);

2179 
rc
 = 
	`sqlôe3VèbSync
(
db
, 
p
);

2187 
i
=0; 
rc
==
SQLITE_OK
 && i<
db
->
nDb
; i++){

2188 
Båì
 *
pBt
 = 
db
->
aDb
[
i
].pBt;

2189 if–
	`sqlôe3BåìIsInTøns
(
pBt
) ){

2193 c⁄° 
u8
 
aMJNìded
[] = {

2201 
Pagî
 *
pPagî
;

2202 
√edXcommô
 = 1;

2203 
	`sqlôe3BåìE¡î
(
pBt
);

2204 
pPagî
 = 
	`sqlôe3BåìPagî
(
pBt
);

2205 if–
db
->
aDb
[
i
].
ß„ty_Àvñ
!=
PAGER_SYNCHRONOUS_OFF


2206 && 
aMJNìded
[
	`sqlôe3PagîGëJou∫ÆMode
(
pPagî
)]

2208 
	`as£π
–
i
!=1 );

2209 
nTøns
++;

2211 
rc
 = 
	`sqlôe3PagîEx˛usiveLock
(
pPagî
);

2212 
	`sqlôe3BåìLóve
(
pBt
);

2215 if–
rc
!=
SQLITE_OK
 ){

2216  
rc
;

2220 if–
√edXcommô
 && 
db
->
xCommôCÆlback
 ){

2221 
rc
 = 
db
->
	`xCommôCÆlback
(db->
pCommôArg
);

2222 if–
rc
 ){

2223  
SQLITE_CONSTRAINT_COMMITHOOK
;

2236 if–0==
	`sqlôe3SåÀn30
(
	`sqlôe3BåìGëFûíame
(
db
->
aDb
[0].
pBt
))

2237 || 
nTøns
<=1

2239 
i
=0; 
rc
==
SQLITE_OK
 && i<
db
->
nDb
; i++){

2240 
Båì
 *
pBt
 = 
db
->
aDb
[
i
].pBt;

2241 if–
pBt
 ){

2242 
rc
 = 
	`sqlôe3BåìCommôPha£O√
(
pBt
, 0);

2251 
i
=0; 
rc
==
SQLITE_OK
 && i<
db
->
nDb
; i++){

2252 
Båì
 *
pBt
 = 
db
->
aDb
[
i
].pBt;

2253 if–
pBt
 ){

2254 
rc
 = 
	`sqlôe3BåìCommôPha£Two
(
pBt
, 0);

2257 if–
rc
==
SQLITE_OK
 ){

2258 
	`sqlôe3VèbCommô
(
db
);

2266 #i‚de‡
SQLITE_OMIT_DISKIO


2268 
sqlôe3_vfs
 *
pVfs
 = 
db
->pVfs;

2269 *
zMa°î
 = 0;

2270 c⁄° *
zMaöFûe
 = 
	`sqlôe3BåìGëFûíame
(
db
->
aDb
[0].
pBt
);

2271 
sqlôe3_fûe
 *
pMa°î
 = 0;

2272 
i64
 
off£t
 = 0;

2273 
ªs
;

2274 
ªåyCou¡
 = 0;

2275 
nMaöFûe
;

2278 
nMaöFûe
 = 
	`sqlôe3SåÀn30
(
zMaöFûe
);

2279 
zMa°î
 = 
	`sqlôe3MPrötf
(
db
, "%s-mjXXXXXX9XXz", 
zMaöFûe
);

2280 if–
zMa°î
==0 )  
SQLITE_NOMEM_BKPT
;

2282 
u32
 
iR™dom
;

2283 if–
ªåyCou¡
 ){

2284 if–
ªåyCou¡
>100 ){

2285 
	`sqlôe3_log
(
SQLITE_FULL
, "MJ dñëe: %s", 
zMa°î
);

2286 
	`sqlôe3OsDñëe
(
pVfs
, 
zMa°î
, 0);

2288 }if–
ªåyCou¡
==1 ){

2289 
	`sqlôe3_log
(
SQLITE_FULL
, "MJ cﬁlide: %s", 
zMa°î
);

2292 
ªåyCou¡
++;

2293 
	`sqlôe3_øndom√ss
((
iR™dom
), &iRandom);

2294 
	`sqlôe3_¢¥ötf
(13, &
zMa°î
[
nMaöFûe
], "-mj%06X9%02X",

2295 (
iR™dom
>>8)&0xffffff, iRandom&0xff);

2298 
	`as£π
–
zMa°î
[
	`sqlôe3SåÀn30
(zMaster)-3]=='9' );

2299 
	`sqlôe3FûeSuffix3
(
zMaöFûe
, 
zMa°î
);

2300 
rc
 = 
	`sqlôe3OsAc˚ss
(
pVfs
, 
zMa°î
, 
SQLITE_ACCESS_EXISTS
, &
ªs
);

2301 } 
rc
==
SQLITE_OK
 && 
ªs
 );

2302 if–
rc
==
SQLITE_OK
 ){

2304 
rc
 = 
	`sqlôe3OsO≥nMÆloc
(
pVfs
, 
zMa°î
, &
pMa°î
,

2305 
SQLITE_OPEN_READWRITE
|
SQLITE_OPEN_CREATE
|

2306 
SQLITE_OPEN_EXCLUSIVE
|
SQLITE_OPEN_MASTER_JOURNAL
, 0

2309 if–
rc
!=
SQLITE_OK
 ){

2310 
	`sqlôe3DbFªe
(
db
, 
zMa°î
);

2311  
rc
;

2320 
i
=0; i<
db
->
nDb
; i++){

2321 
Båì
 *
pBt
 = 
db
->
aDb
[
i
].pBt;

2322 if–
	`sqlôe3BåìIsInTøns
(
pBt
) ){

2323 c⁄° *
zFûe
 = 
	`sqlôe3BåìGëJou∫Æ«me
(
pBt
);

2324 if–
zFûe
==0 ){

2327 
	`as£π
–
zFûe
[0]!=0 );

2328 
rc
 = 
	`sqlôe3OsWrôe
(
pMa°î
, 
zFûe
, 
	`sqlôe3SåÀn30
(zFûe)+1, 
off£t
);

2329 
off£t
 +
	`sqlôe3SåÀn30
(
zFûe
)+1;

2330 if–
rc
!=
SQLITE_OK
 ){

2331 
	`sqlôe3OsClo£Fªe
(
pMa°î
);

2332 
	`sqlôe3OsDñëe
(
pVfs
, 
zMa°î
, 0);

2333 
	`sqlôe3DbFªe
(
db
, 
zMa°î
);

2334  
rc
;

2342 if–0==(
	`sqlôe3OsDevi˚Ch¨a˘îi°ics
(
pMa°î
)&
SQLITE_IOCAP_SEQUENTIAL
)

2343 && 
SQLITE_OK
!=(
rc
 = 
	`sqlôe3OsSync
(
pMa°î
, 
SQLITE_SYNC_NORMAL
))

2345 
	`sqlôe3OsClo£Fªe
(
pMa°î
);

2346 
	`sqlôe3OsDñëe
(
pVfs
, 
zMa°î
, 0);

2347 
	`sqlôe3DbFªe
(
db
, 
zMa°î
);

2348  
rc
;

2361 
i
=0; 
rc
==
SQLITE_OK
 && i<
db
->
nDb
; i++){

2362 
Båì
 *
pBt
 = 
db
->
aDb
[
i
].pBt;

2363 if–
pBt
 ){

2364 
rc
 = 
	`sqlôe3BåìCommôPha£O√
(
pBt
, 
zMa°î
);

2367 
	`sqlôe3OsClo£Fªe
(
pMa°î
);

2368 
	`as£π
–
rc
!=
SQLITE_BUSY
 );

2369 if–
rc
!=
SQLITE_OK
 ){

2370 
	`sqlôe3DbFªe
(
db
, 
zMa°î
);

2371  
rc
;

2378 
rc
 = 
	`sqlôe3OsDñëe
(
pVfs
, 
zMa°î
, 1);

2379 
	`sqlôe3DbFªe
(
db
, 
zMa°î
);

2380 
zMa°î
 = 0;

2381 if–
rc
 ){

2382  
rc
;

2392 
	`dißbÀ_simuœãd_io_îr‹s
();

2393 
	`sqlôe3BegöBíignMÆloc
();

2394 
i
=0; i<
db
->
nDb
; i++){

2395 
Båì
 *
pBt
 = 
db
->
aDb
[
i
].pBt;

2396 if–
pBt
 ){

2397 
	`sqlôe3BåìCommôPha£Two
(
pBt
, 1);

2400 
	`sqlôe3EndBíignMÆloc
();

2401 
	`íabÀ_simuœãd_io_îr‹s
();

2403 
	`sqlôe3VèbCommô
(
db
);

2407  
rc
;

2408 
	}
}

2419 #i‚de‡
NDEBUG


2420 
	$checkA˘iveVdbeC¡
(
sqlôe3
 *
db
){

2421 
Vdbe
 *
p
;

2422 
˙t
 = 0;

2423 
nWrôe
 = 0;

2424 
nRód
 = 0;

2425 
p
 = 
db
->
pVdbe
;

2426  
p
 ){

2427 if–
	`sqlôe3_°mt_busy
((
sqlôe3_°mt
*)
p
) ){

2428 
˙t
++;

2429 if–
p
->
ªadO∆y
==0 ) 
nWrôe
++;

2430 if–
p
->
bIsRódî
 ) 
nRód
++;

2432 
p
 =Ö->
pNext
;

2434 
	`as£π
–
˙t
==
db
->
nVdbeA˘ive
 );

2435 
	`as£π
–
nWrôe
==
db
->
nVdbeWrôe
 );

2436 
	`as£π
–
nRód
==
db
->
nVdbeRód
 );

2437 
	}
}

2439 
	#checkA˘iveVdbeC¡
(
x
)

	)

2452 
	$sqlôe3VdbeClo£Sèãmít
(
Vdbe
 *
p
, 
eOp
){

2453 
sqlôe3
 *c⁄° 
db
 = 
p
->db;

2454 
rc
 = 
SQLITE_OK
;

2461 if–
db
->
nSèãmít
 && 
p
->
iSèãmít
 ){

2462 
i
;

2463 c⁄° 
iSavïoöt
 = 
p
->
iSèãmít
-1;

2465 
	`as£π
–
eOp
==
SAVEPOINT_ROLLBACK
 ||ÉOp==
SAVEPOINT_RELEASE
);

2466 
	`as£π
–
db
->
nSèãmít
>0 );

2467 
	`as£π
–
p
->
iSèãmít
==(
db
->
nSèãmít
+db->
nSavïoöt
) );

2469 
i
=0; i<
db
->
nDb
; i++){

2470 
rc2
 = 
SQLITE_OK
;

2471 
Båì
 *
pBt
 = 
db
->
aDb
[
i
].pBt;

2472 if–
pBt
 ){

2473 if–
eOp
==
SAVEPOINT_ROLLBACK
 ){

2474 
rc2
 = 
	`sqlôe3BåìSavïoöt
(
pBt
, 
SAVEPOINT_ROLLBACK
, 
iSavïoöt
);

2476 if–
rc2
==
SQLITE_OK
 ){

2477 
rc2
 = 
	`sqlôe3BåìSavïoöt
(
pBt
, 
SAVEPOINT_RELEASE
, 
iSavïoöt
);

2479 if–
rc
==
SQLITE_OK
 ){

2480 
rc
 = 
rc2
;

2484 
db
->
nSèãmít
--;

2485 
p
->
iSèãmít
 = 0;

2487 if–
rc
==
SQLITE_OK
 ){

2488 if–
eOp
==
SAVEPOINT_ROLLBACK
 ){

2489 
rc
 = 
	`sqlôe3VèbSavïoöt
(
db
, 
SAVEPOINT_ROLLBACK
, 
iSavïoöt
);

2491 if–
rc
==
SQLITE_OK
 ){

2492 
rc
 = 
	`sqlôe3VèbSavïoöt
(
db
, 
SAVEPOINT_RELEASE
, 
iSavïoöt
);

2499 if–
eOp
==
SAVEPOINT_ROLLBACK
 ){

2500 
db
->
nDe„ºedC⁄s
 = 
p
->
nStmtDefC⁄s
;

2501 
db
->
nDe„ºedImmC⁄s
 = 
p
->
nStmtDefImmC⁄s
;

2504  
rc
;

2505 
	}
}

2517 #i‚de‡
SQLITE_OMIT_FOREIGN_KEY


2518 
	$sqlôe3VdbeCheckFk
(
Vdbe
 *
p
, 
de„ºed
){

2519 
sqlôe3
 *
db
 = 
p
->db;

2520 if–(
de„ºed
 && (
db
->
nDe„ºedC⁄s
+db->
nDe„ºedImmC⁄s
)>0)

2521 || (!
de„ºed
 && 
p
->
nFkC⁄°øöt
>0)

2523 
p
->
rc
 = 
SQLITE_CONSTRAINT_FOREIGNKEY
;

2524 
p
->
îr‹A˘i⁄
 = 
OE_Ab‹t
;

2525 
	`sqlôe3VdbeEº‹
(
p
, "FOREIGN KEY constraint failed");

2526  
SQLITE_ERROR
;

2528  
SQLITE_OK
;

2529 
	}
}

2545 
	$sqlôe3VdbeHÆt
(
Vdbe
 *
p
){

2546 
rc
;

2547 
sqlôe3
 *
db
 = 
p
->db;

2565 if–
db
->
mÆlocFaûed
 ){

2566 
p
->
rc
 = 
SQLITE_NOMEM_BKPT
;

2568 if–
p
->
aOn˚Fœg
 ) 
	`mem£t
’->aOn˚Fœg, 0,Ö->
nOn˚Fœg
);

2569 
	`˛o£AŒCurs‹s
(
p
);

2570 if–
p
->
magic
!=
VDBE_MAGIC_RUN
 ){

2571  
SQLITE_OK
;

2573 
	`checkA˘iveVdbeC¡
(
db
);

2577 if–
p
->
pc
>=0 &&Ö->
bIsRódî
 ){

2578 
mrc
;

2579 
eSèãmítOp
 = 0;

2580 
isS≥cülEº‹
;

2583 
	`sqlôe3VdbeE¡î
(
p
);

2586 
mrc
 = 
p
->
rc
 & 0xff;

2587 
isS≥cülEº‹
 = 
mrc
==
SQLITE_NOMEM
 || mrc==
SQLITE_IOERR


2588 || 
mrc
==
SQLITE_INTERRUPT
 || mrc==
SQLITE_FULL
;

2589 if–
isS≥cülEº‹
 ){

2602 if–!
p
->
ªadO∆y
 || 
mrc
!=
SQLITE_INTERRUPT
 ){

2603 if–(
mrc
==
SQLITE_NOMEM
 || mrc==
SQLITE_FULL
Ë&& 
p
->
u£sStmtJou∫Æ
 ){

2604 
eSèãmítOp
 = 
SAVEPOINT_ROLLBACK
;

2609 
	`sqlôe3RﬁlbackAŒ
(
db
, 
SQLITE_ABORT_ROLLBACK
);

2610 
	`sqlôe3Clo£Savïoöts
(
db
);

2611 
db
->
autoCommô
 = 1;

2612 
p
->
nCh™ge
 = 0;

2618 if–
p
->
rc
==
SQLITE_OK
 ){

2619 
	`sqlôe3VdbeCheckFk
(
p
, 0);

2628 if–!
	`sqlôe3VèbInSync
(
db
)

2629 && 
db
->
autoCommô


2630 && 
db
->
nVdbeWrôe
==(
p
->
ªadO∆y
==0)

2632 if–
p
->
rc
==
SQLITE_OK
 || (p->
îr‹A˘i⁄
==
OE_Faû
 && !
isS≥cülEº‹
) ){

2633 
rc
 = 
	`sqlôe3VdbeCheckFk
(
p
, 1);

2634 if–
rc
!=
SQLITE_OK
 ){

2635 if–
	`NEVER
(
p
->
ªadO∆y
) ){

2636 
	`sqlôe3VdbeLóve
(
p
);

2637  
SQLITE_ERROR
;

2639 
rc
 = 
SQLITE_CONSTRAINT_FOREIGNKEY
;

2645 
rc
 = 
	`vdbeCommô
(
db
, 
p
);

2647 if–
rc
==
SQLITE_BUSY
 && 
p
->
ªadO∆y
 ){

2648 
	`sqlôe3VdbeLóve
(
p
);

2649  
SQLITE_BUSY
;

2650 }if–
rc
!=
SQLITE_OK
 ){

2651 
p
->
rc
 =Ñc;

2652 
	`sqlôe3RﬁlbackAŒ
(
db
, 
SQLITE_OK
);

2653 
p
->
nCh™ge
 = 0;

2655 
db
->
nDe„ºedC⁄s
 = 0;

2656 
db
->
nDe„ºedImmC⁄s
 = 0;

2657 
db
->
Êags
 &~
SQLITE_De„rFKs
;

2658 
	`sqlôe3CommôI¡î«lCh™ges
(
db
);

2661 
	`sqlôe3RﬁlbackAŒ
(
db
, 
SQLITE_OK
);

2662 
p
->
nCh™ge
 = 0;

2664 
db
->
nSèãmít
 = 0;

2665 }if–
eSèãmítOp
==0 ){

2666 if–
p
->
rc
==
SQLITE_OK
 ||Ö->
îr‹A˘i⁄
==
OE_Faû
 ){

2667 
eSèãmítOp
 = 
SAVEPOINT_RELEASE
;

2668 }if–
p
->
îr‹A˘i⁄
==
OE_Ab‹t
 ){

2669 
eSèãmítOp
 = 
SAVEPOINT_ROLLBACK
;

2671 
	`sqlôe3RﬁlbackAŒ
(
db
, 
SQLITE_ABORT_ROLLBACK
);

2672 
	`sqlôe3Clo£Savïoöts
(
db
);

2673 
db
->
autoCommô
 = 1;

2674 
p
->
nCh™ge
 = 0;

2684 if–
eSèãmítOp
 ){

2685 
rc
 = 
	`sqlôe3VdbeClo£Sèãmít
(
p
, 
eSèãmítOp
);

2686 if–
rc
 ){

2687 if–
p
->
rc
==
SQLITE_OK
 || (p->rc&0xff)==
SQLITE_CONSTRAINT
 ){

2688 
p
->
rc
 =Ñc;

2689 
	`sqlôe3DbFªe
(
db
, 
p
->
zEºMsg
);

2690 
p
->
zEºMsg
 = 0;

2692 
	`sqlôe3RﬁlbackAŒ
(
db
, 
SQLITE_ABORT_ROLLBACK
);

2693 
	`sqlôe3Clo£Savïoöts
(
db
);

2694 
db
->
autoCommô
 = 1;

2695 
p
->
nCh™ge
 = 0;

2702 if–
p
->
ch™geC¡On
 ){

2703 if–
eSèãmítOp
!=
SAVEPOINT_ROLLBACK
 ){

2704 
	`sqlôe3VdbeSëCh™ges
(
db
, 
p
->
nCh™ge
);

2706 
	`sqlôe3VdbeSëCh™ges
(
db
, 0);

2708 
p
->
nCh™ge
 = 0;

2712 
	`sqlôe3VdbeLóve
(
p
);

2716 if–
p
->
pc
>=0 ){

2717 
db
->
nVdbeA˘ive
--;

2718 if–!
p
->
ªadO∆y
 ) 
db
->
nVdbeWrôe
--;

2719 if–
p
->
bIsRódî
 ) 
db
->
nVdbeRód
--;

2720 
	`as£π
–
db
->
nVdbeA˘ive
>=db->
nVdbeRód
 );

2721 
	`as£π
–
db
->
nVdbeRód
>=db->
nVdbeWrôe
 );

2722 
	`as£π
–
db
->
nVdbeWrôe
>=0 );

2724 
p
->
magic
 = 
VDBE_MAGIC_HALT
;

2725 
	`checkA˘iveVdbeC¡
(
db
);

2726 if–
db
->
mÆlocFaûed
 ){

2727 
p
->
rc
 = 
SQLITE_NOMEM_BKPT
;

2734 if–
db
->
autoCommô
 ){

2735 
	`sqlôe3C⁄√˘i⁄U∆ocked
(
db
);

2738 
	`as£π
–
db
->
nVdbeA˘ive
>0 || db->
autoCommô
==0 || db->
nSèãmít
==0 );

2739  (
p
->
rc
==
SQLITE_BUSY
 ? SQLITE_BUSY : 
SQLITE_OK
);

2740 
	}
}

2747 
	$sqlôe3VdbeRe£tSãpResu…
(
Vdbe
 *
p
){

2748 
p
->
rc
 = 
SQLITE_OK
;

2749 
	}
}

2759 
	$sqlôe3VdbeTøns„rEº‹
(
Vdbe
 *
p
){

2760 
sqlôe3
 *
db
 = 
p
->db;

2761 
rc
 = 
p
->rc;

2762 if–
p
->
zEºMsg
 ){

2763 
db
->
bBíignMÆloc
++;

2764 
	`sqlôe3BegöBíignMÆloc
();

2765 if–
db
->
pEº
==0 ) db->pEº = 
	`sqlôe3VÆueNew
(db);

2766 
	`sqlôe3VÆueSëSå
(
db
->
pEº
, -1, 
p
->
zEºMsg
, 
SQLITE_UTF8
, 
SQLITE_TRANSIENT
);

2767 
	`sqlôe3EndBíignMÆloc
();

2768 
db
->
bBíignMÆloc
--;

2769 
db
->
îrCode
 = 
rc
;

2771 
	`sqlôe3Eº‹
(
db
, 
rc
);

2773  
rc
;

2774 
	}
}

2776 #ifde‡
SQLITE_ENABLE_SQLLOG


2781 
	$vdbeInvokeSqŒog
(
Vdbe
 *
v
){

2782 if–
sqlôe3GlobÆC⁄fig
.
xSqŒog
 && 
v
->
rc
==
SQLITE_OK
 && v->
zSql
 && v->
pc
>=0 ){

2783 *
zEx∑nded
 = 
	`sqlôe3VdbeEx∑ndSql
(
v
, v->
zSql
);

2784 
	`as£π
–
v
->
db
->
öô
.
busy
==0 );

2785 if–
zEx∑nded
 ){

2786 
sqlôe3GlobÆC⁄fig
.
	`xSqŒog
(

2787 
sqlôe3GlobÆC⁄fig
.
pSqŒogArg
, 
v
->
db
, 
zEx∑nded
, 1

2789 
	`sqlôe3DbFªe
(
v
->
db
, 
zEx∑nded
);

2792 
	}
}

2794 
	#vdbeInvokeSqŒog
(
x
)

	)

2808 
	$sqlôe3VdbeRe£t
(
Vdbe
 *
p
){

2809 
sqlôe3
 *
db
;

2810 
db
 = 
p
->db;

2816 
	`sqlôe3VdbeHÆt
(
p
);

2823 if–
p
->
pc
>=0 ){

2824 
	`vdbeInvokeSqŒog
(
p
);

2825 
	`sqlôe3VdbeTøns„rEº‹
(
p
);

2826 
	`sqlôe3DbFªe
(
db
, 
p
->
zEºMsg
);

2827 
p
->
zEºMsg
 = 0;

2828 if–
p
->
runO∆yOn˚
 )Ö->
expúed
 = 1;

2829 }if–
p
->
rc
 &&Ö->
expúed
 ){

2834 
	`sqlôe3Eº‹WôhMsg
(
db
, 
p
->
rc
,Ö->
zEºMsg
 ? "%s" : 0,Ö->zErrMsg);

2835 
	`sqlôe3DbFªe
(
db
, 
p
->
zEºMsg
);

2836 
p
->
zEºMsg
 = 0;

2841 
	`CÀ™up
(
p
);

2845 #ifde‡
VDBE_PROFILE


2847 
FILE
 *
out
 = 
	`f›í
("vdbe_profile.out", "a");

2848 if–
out
 ){

2849 
i
;

2850 
	`Ârötf
(
out
, "---- ");

2851 
i
=0; i<
p
->
nOp
; i++){

2852 
	`Ârötf
(
out
, "%02x", 
p
->
aOp
[
i
].
›code
);

2854 
	`Ârötf
(
out
, "\n");

2855 if–
p
->
zSql
 ){

2856 
c
, 
pc
 = 0;

2857 
	`Ârötf
(
out
, "-- ");

2858 
i
=0; (
c
 = 
p
->
zSql
[i])!=0; i++){

2859 if–
pc
=='\n' ) 
	`Ârötf
(
out
, "-- ");

2860 
	`putc
(
c
, 
out
);

2861 
pc
 = 
c
;

2863 if–
pc
!='\n' ) 
	`Ârötf
(
out
, "\n");

2865 
i
=0; i<
p
->
nOp
; i++){

2866 
zHdr
[100];

2867 
	`sqlôe3_¢¥ötf
((
zHdr
), zHdr, "%6u %12llu %8llu ",

2868 
p
->
aOp
[
i
].
˙t
,

2869 
p
->
aOp
[
i
].
cy˛es
,

2870 
p
->
aOp
[
i
].
˙t
>0 ?Ö->aOp[i].
cy˛es
/p->aOp[i].cnt : 0

2872 
	`Ârötf
(
out
, "%s", 
zHdr
);

2873 
	`sqlôe3VdbePrötOp
(
out
, 
i
, &
p
->
aOp
[i]);

2875 
	`f˛o£
(
out
);

2879 
p
->
iCuºítTime
 = 0;

2880 
p
->
magic
 = 
VDBE_MAGIC_INIT
;

2881  
p
->
rc
 & 
db
->
îrMask
;

2882 
	}
}

2888 
	$sqlôe3VdbeFöÆize
(
Vdbe
 *
p
){

2889 
rc
 = 
SQLITE_OK
;

2890 if–
p
->
magic
==
VDBE_MAGIC_RUN
 ||Ö->magic==
VDBE_MAGIC_HALT
 ){

2891 
rc
 = 
	`sqlôe3VdbeRe£t
(
p
);

2892 
	`as£π
–(
rc
 & 
p
->
db
->
îrMask
)==rc );

2894 
	`sqlôe3VdbeDñëe
(
p
);

2895  
rc
;

2896 
	}
}

2914 
	$sqlôe3VdbeDñëeAuxD©a
(
sqlôe3
 *
db
, 
AuxD©a
 **
µ
, 
iOp
, 
mask
){

2915  *
µ
 ){

2916 
AuxD©a
 *
pAux
 = *
µ
;

2917 if–(
iOp
<0)

2918 || (
pAux
->
iOp
==iO∞&& (pAux->
iArg
>31 || !(
mask
 & 
	`MASKBIT32
(pAux->iArg))))

2920 
	`ã°ˇ£
–
pAux
->
iArg
==31 );

2921 if–
pAux
->
xDñëe
 ){

2922 
pAux
->
	`xDñëe
(pAux->pAux);

2924 *
µ
 = 
pAux
->
pNext
;

2925 
	`sqlôe3DbFªe
(
db
, 
pAux
);

2927 
µ
&
pAux
->
pNext
;

2930 
	}
}

2940 
	$sqlôe3VdbeCÀ¨Obje˘
(
sqlôe3
 *
db
, 
Vdbe
 *
p
){

2941 
SubProgøm
 *
pSub
, *
pNext
;

2942 
i
;

2943 
	`as£π
–
p
->
db
==0 ||Ö->db==db );

2944 
	`ªÀa£MemAºay
(
p
->
aV¨
,Ö->
nV¨
);

2945 
	`ªÀa£MemAºay
(
p
->
aCﬁName
,Ö->
nResCﬁumn
*
COLNAME_N
);

2946 
pSub
=
p
->
pProgøm
;ÖSub;ÖSub=
pNext
){

2947 
pNext
 = 
pSub
->pNext;

2948 
	`vdbeFªeOpAºay
(
db
, 
pSub
->
aOp
,ÖSub->
nOp
);

2949 
	`sqlôe3DbFªe
(
db
, 
pSub
);

2951 
i
=
p
->
nzV¨
-1; i>=0; i--Ë
	`sqlôe3DbFªe
(
db
,Ö->
azV¨
[i]);

2952 
	`sqlôe3DbFªe
(
db
, 
p
->
azV¨
);

2953 
	`vdbeFªeOpAºay
(
db
, 
p
->
aOp
,Ö->
nOp
);

2954 
	`sqlôe3DbFªe
(
db
, 
p
->
aCﬁName
);

2955 
	`sqlôe3DbFªe
(
db
, 
p
->
zSql
);

2956 
	`sqlôe3DbFªe
(
db
, 
p
->
pFªe
);

2957 #ifde‡
SQLITE_ENABLE_STMT_SCANSTATUS


2958 
i
=0; i<
p
->
nSˇn
; i++){

2959 
	`sqlôe3DbFªe
(
db
, 
p
->
aSˇn
[
i
].
zName
);

2961 
	`sqlôe3DbFªe
(
db
, 
p
->
aSˇn
);

2963 
	}
}

2968 
	$sqlôe3VdbeDñëe
(
Vdbe
 *
p
){

2969 
sqlôe3
 *
db
;

2971 if–
	`NEVER
(
p
==0) ) ;

2972 
db
 = 
p
->db;

2973 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

2974 
	`sqlôe3VdbeCÀ¨Obje˘
(
db
, 
p
);

2975 if–
p
->
pPªv
 ){

2976 
p
->
pPªv
->
pNext
 =Ö->pNext;

2978 
	`as£π
–
db
->
pVdbe
==
p
 );

2979 
db
->
pVdbe
 = 
p
->
pNext
;

2981 if–
p
->
pNext
 ){

2982 
p
->
pNext
->
pPªv
 =Ö->pPrev;

2984 
p
->
magic
 = 
VDBE_MAGIC_DEAD
;

2985 
p
->
db
 = 0;

2986 
	`sqlôe3DbFªe
(
db
, 
p
);

2987 
	}
}

2994 
SQLITE_NOINLINE
 
	$h™dÀDe„ºedMovëo
(
VdbeCurs‹
 *
p
){

2995 
ªs
, 
rc
;

2996 #ifde‡
SQLITE_TEST


2997 
sqlôe3_£¨ch_cou¡
;

2999 
	`as£π
–
p
->
de„ºedMovëo
 );

3000 
	`as£π
–
p
->
isTabÀ
 );

3001 
	`as£π
–
p
->
eCurTy≥
==
CURTYPE_BTREE
 );

3002 
rc
 = 
	`sqlôe3BåìMovëoU≈acked
(
p
->
uc
.
pCurs‹
, 0,Ö->
movëoT¨gë
, 0, &
ªs
);

3003 if–
rc
 ) Ñc;

3004 if–
ªs
!=0 )  
SQLITE_CORRUPT_BKPT
;

3005 #ifde‡
SQLITE_TEST


3006 
sqlôe3_£¨ch_cou¡
++;

3008 
p
->
de„ºedMovëo
 = 0;

3009 
p
->
ˇcheSètus
 = 
CACHE_STALE
;

3010  
SQLITE_OK
;

3011 
	}
}

3020 
SQLITE_NOINLINE
 
	$h™dÀMovedCurs‹
(
VdbeCurs‹
 *
p
){

3021 
isDif„ª¡Row
, 
rc
;

3022 
	`as£π
–
p
->
eCurTy≥
==
CURTYPE_BTREE
 );

3023 
	`as£π
–
p
->
uc
.
pCurs‹
!=0 );

3024 
	`as£π
–
	`sqlôe3BåìCurs‹HasMoved
(
p
->
uc
.
pCurs‹
) );

3025 
rc
 = 
	`sqlôe3BåìCurs‹Re°‹e
(
p
->
uc
.
pCurs‹
, &
isDif„ª¡Row
);

3026 
p
->
ˇcheSètus
 = 
CACHE_STALE
;

3027 if–
isDif„ª¡Row
 ) 
p
->
nuŒRow
 = 1;

3028  
rc
;

3029 
	}
}

3035 
	$sqlôe3VdbeCurs‹Re°‹e
(
VdbeCurs‹
 *
p
){

3036 
	`as£π
–
p
->
eCurTy≥
==
CURTYPE_BTREE
 );

3037 if–
	`sqlôe3BåìCurs‹HasMoved
(
p
->
uc
.
pCurs‹
) ){

3038  
	`h™dÀMovedCurs‹
(
p
);

3040  
SQLITE_OK
;

3041 
	}
}

3056 
	$sqlôe3VdbeCurs‹Movëo
(
VdbeCurs‹
 **
µ
, *
piCﬁ
){

3057 
VdbeCurs‹
 *
p
 = *
µ
;

3058 if–
p
->
eCurTy≥
==
CURTYPE_BTREE
 ){

3059 if–
p
->
de„ºedMovëo
 ){

3060 
iM≠
;

3061 if–
p
->
aA…M≠
 && (
iM≠
 =Ö->aA…M≠[1+*
piCﬁ
])>0 ){

3062 *
µ
 = 
p
->
pA…Curs‹
;

3063 *
piCﬁ
 = 
iM≠
 - 1;

3064  
SQLITE_OK
;

3066  
	`h™dÀDe„ºedMovëo
(
p
);

3068 if–
	`sqlôe3BåìCurs‹HasMoved
(
p
->
uc
.
pCurs‹
) ){

3069  
	`h™dÀMovedCurs‹
(
p
);

3072  
SQLITE_OK
;

3073 
	}
}

3120 
u32
 
	$sqlôe3VdbeSîülTy≥
(
Mem
 *
pMem
, 
fûe_f‹m©
, 
u32
 *
pLí
){

3121 
Êags
 = 
pMem
->flags;

3122 
u32
 
n
;

3124 
	`as£π
–
pLí
!=0 );

3125 if–
Êags
&
MEM_NuŒ
 ){

3126 *
pLí
 = 0;

3129 if–
Êags
&
MEM_I¡
 ){

3131 
	#MAX_6BYTE
 ((((
i64
)0x00008000)<<32)-1)

	)

3132 
i64
 
i
 = 
pMem
->
u
.i;

3133 
u64
 
u
;

3134 if–
i
<0 ){

3135 
u
 = ~
i
;

3137 
u
 = 
i
;

3139 if–
u
<=127 ){

3140 if–(
i
&1)==ò&& 
fûe_f‹m©
>=4 ){

3141 *
pLí
 = 0;

3142  8+(
u32
)
u
;

3144 *
pLí
 = 1;

3148 if–
u
<=32767 ){ *
pLí
 = 2;  2; }

3149 if–
u
<=8388607 ){ *
pLí
 = 3;  3; }

3150 if–
u
<=2147483647 ){ *
pLí
 = 4;  4; }

3151 if–
u
<=
MAX_6BYTE
 ){ *
pLí
 = 6;  5; }

3152 *
pLí
 = 8;

3155 if–
Êags
&
MEM_Ról
 ){

3156 *
pLí
 = 8;

3159 
	`as£π
–
pMem
->
db
->
mÆlocFaûed
 || 
Êags
&(
MEM_Så
|
MEM_Blob
) );

3160 
	`as£π
–
pMem
->
n
>=0 );

3161 
n
 = (
u32
)
pMem
->n;

3162 if–
Êags
 & 
MEM_Zîo
 ){

3163 
n
 +
pMem
->
u
.
nZîo
;

3165 *
pLí
 = 
n
;

3166  ((
n
*2Ë+ 12 + ((
Êags
&
MEM_Så
)!=0));

3167 
	}
}

3172 c⁄° 
u8
 
	gsqlôe3SmÆlTy≥Sizes
[] = {

3192 
u32
 
	$sqlôe3VdbeSîülTy≥Lí
(
u32
 
£rül_ty≥
){

3193 if–
£rül_ty≥
>=128 ){

3194  (
£rül_ty≥
-12)/2;

3196 
	`as£π
–
£rül_ty≥
<12

3197 || 
sqlôe3SmÆlTy≥Sizes
[
£rül_ty≥
]==(serial_type - 12)/2 );

3198  
sqlôe3SmÆlTy≥Sizes
[
£rül_ty≥
];

3200 
	}
}

3201 
u8
 
	$sqlôe3VdbeO√ByãSîülTy≥Lí
(
u8
 
£rül_ty≥
){

3202 
	`as£π
–
£rül_ty≥
<128 );

3203  
sqlôe3SmÆlTy≥Sizes
[
£rül_ty≥
];

3204 
	}
}

3240 #ifde‡
SQLITE_MIXED_ENDIAN_64BIT_FLOAT


3241 
u64
 
	$ÊﬂtSw≠
(
u64
 
ö
){

3243 
u64
 
r
;

3244 
u32
 
i
[2];

3245 } 
u
;

3246 
u32
 
t
;

3248 
u
.
r
 = 
ö
;

3249 
t
 = 
u
.
i
[0];

3250 
u
.
i
[0] = u.i[1];

3251 
u
.
i
[1] = 
t
;

3252  
u
.
r
;

3253 
	}
}

3254 
	#sw≠MixedEndünFlﬂt
(
X
ËX = 
	`ÊﬂtSw≠
(X)

	)

3256 
	#sw≠MixedEndünFlﬂt
(
X
)

	)

3272 
u32
 
	$sqlôe3VdbeSîülPut
(
u8
 *
buf
, 
Mem
 *
pMem
, 
u32
 
£rül_ty≥
){

3273 
u32
 
Àn
;

3276 if–
£rül_ty≥
<=7 && serial_type>0 ){

3277 
u64
 
v
;

3278 
u32
 
i
;

3279 if–
£rül_ty≥
==7 ){

3280 
	`as£π
–(
v
)==(
pMem
->
u
.
r
) );

3281 
	`mem˝y
(&
v
, &
pMem
->
u
.
r
, (v));

3282 
	`sw≠MixedEndünFlﬂt
(
v
);

3284 
v
 = 
pMem
->
u
.
i
;

3286 
Àn
 = 
i
 = 
sqlôe3SmÆlTy≥Sizes
[
£rül_ty≥
];

3287 
	`as£π
–
i
>0 );

3289 
buf
[--
i
] = (
u8
)(
v
&0xFF);

3290 
v
 >>= 8;

3291 } 
i
 );

3292  
Àn
;

3296 if–
£rül_ty≥
>=12 ){

3297 
	`as£π
–
pMem
->
n
 + (’Mem->
Êags
 & 
MEM_Zîo
)?pMem->
u
.
nZîo
:0)

3298 =()
	`sqlôe3VdbeSîülTy≥Lí
(
£rül_ty≥
) );

3299 
Àn
 = 
pMem
->
n
;

3300 if–
Àn
>0 ) 
	`mem˝y
(
buf
, 
pMem
->
z
,Üen);

3301  
Àn
;

3306 
	}
}

3311 
	#ONE_BYTE_INT
(
x
Ë((
i8
)(x)[0])

	)

3312 
	#TWO_BYTE_INT
(
x
Ë(256*(
i8
)((x)[0])|(x)[1])

	)

3313 
	#THREE_BYTE_INT
(
x
Ë(65536*(
i8
)((x)[0])|((x)[1]<<8)|(x)[2])

	)

3314 
	#FOUR_BYTE_UINT
(
x
Ë(((
u32
)(x)[0]<<24)|((x)[1]<<16)|((x)[2]<<8)|(x)[3])

	)

3315 
	#FOUR_BYTE_INT
(
x
Ë(16777216*(
i8
)((x)[0])|((x)[1]<<16)|((x)[2]<<8)|(x)[3])

	)

3326 
u32
 
SQLITE_NOINLINE
 
	$£rülGë
(

3327 c⁄° *
buf
,

3328 
u32
 
£rül_ty≥
,

3329 
Mem
 *
pMem


3331 
u64
 
x
 = 
	`FOUR_BYTE_UINT
(
buf
);

3332 
u32
 
y
 = 
	`FOUR_BYTE_UINT
(
buf
+4);

3333 
x
 = (x<<32Ë+ 
y
;

3334 if–
£rül_ty≥
==6 ){

3337 
pMem
->
u
.
i
 = *(
i64
*)&
x
;

3338 
pMem
->
Êags
 = 
MEM_I¡
;

3339 
	`ã°ˇ£
–
pMem
->
u
.
i
<0 );

3343 #i‡!
	`deföed
(
NDEBUG
Ë&& !deföed(
SQLITE_OMIT_FLOATING_POINT
)

3349 c⁄° 
u64
 
t1
 = ((u64)0x3ff00000)<<32;

3350 c⁄° 
r1
 = 1.0;

3351 
u64
 
t2
 = 
t1
;

3352 
	`sw≠MixedEndünFlﬂt
(
t2
);

3353 
	`as£π
–(
r1
)==(
t2
Ë&& 
	`memcmp
(&r1, &t2, (r1))==0 );

3355 
	`as£π
–(
x
)==8 && (
pMem
->
u
.
r
)==8 );

3356 
	`sw≠MixedEndünFlﬂt
(
x
);

3357 
	`mem˝y
(&
pMem
->
u
.
r
, &
x
, (x));

3358 
pMem
->
Êags
 = 
	`sqlôe3IsNaN
’Mem->
u
.
r
Ë? 
MEM_NuŒ
 : 
MEM_Ról
;

3361 
	}
}

3362 
u32
 
	$sqlôe3VdbeSîülGë
(

3363 c⁄° *
buf
,

3364 
u32
 
£rül_ty≥
,

3365 
Mem
 *
pMem


3367  
£rül_ty≥
 ){

3372 
pMem
->
Êags
 = 
MEM_NuŒ
;

3378 
pMem
->
u
.
i
 = 
	`ONE_BYTE_INT
(
buf
);

3379 
pMem
->
Êags
 = 
MEM_I¡
;

3380 
	`ã°ˇ£
–
pMem
->
u
.
i
<0 );

3386 
pMem
->
u
.
i
 = 
	`TWO_BYTE_INT
(
buf
);

3387 
pMem
->
Êags
 = 
MEM_I¡
;

3388 
	`ã°ˇ£
–
pMem
->
u
.
i
<0 );

3394 
pMem
->
u
.
i
 = 
	`THREE_BYTE_INT
(
buf
);

3395 
pMem
->
Êags
 = 
MEM_I¡
;

3396 
	`ã°ˇ£
–
pMem
->
u
.
i
<0 );

3402 
pMem
->
u
.
i
 = 
	`FOUR_BYTE_INT
(
buf
);

3403 #ifde‡
__HP_cc


3405 if–
buf
[0]&0x80 ) 
pMem
->
u
.
i
 |= 0xffffffff80000000LL;

3407 
pMem
->
Êags
 = 
MEM_I¡
;

3408 
	`ã°ˇ£
–
pMem
->
u
.
i
<0 );

3414 
pMem
->
u
.
i
 = 
	`FOUR_BYTE_UINT
(
buf
+2Ë+ (((
i64
)1)<<32)*
	`TWO_BYTE_INT
(buf);

3415 
pMem
->
Êags
 = 
MEM_I¡
;

3416 
	`ã°ˇ£
–
pMem
->
u
.
i
<0 );

3423  
	`£rülGë
(
buf
,
£rül_ty≥
,
pMem
);

3429 
pMem
->
u
.
i
 = 
£rül_ty≥
-8;

3430 
pMem
->
Êags
 = 
MEM_I¡
;

3438 c⁄° 
u16
 
aFœg
[] = { 
MEM_Blob
|
MEM_Ephem
, 
MEM_Så
|MEM_Ephem };

3439 
pMem
->
z
 = (*)
buf
;

3440 
pMem
->
n
 = (
£rül_ty≥
-12)/2;

3441 
pMem
->
Êags
 = 
aFœg
[
£rül_ty≥
&1];

3442  
pMem
->
n
;

3446 
	}
}

3461 
U≈ackedRec‹d
 *
	$sqlôe3VdbeAŒocU≈ackedRec‹d
(

3462 
KeyInfo
 *
pKeyInfo
,

3463 *
pS∑˚
,

3464 
szS∑˚
,

3465 **
µFªe


3467 
U≈ackedRec‹d
 *
p
;

3468 
nOff
;

3469 
nByã
;

3475 
nOff
 = (8 - (
	`SQLITE_PTR_TO_INT
(
pS∑˚
) & 7)) & 7;

3476 
nByã
 = 
	`ROUND8
((
U≈ackedRec‹d
)Ë+ (
Mem
)*(
pKeyInfo
->
nFõld
+1);

3477 if–
nByã
>
szS∑˚
+
nOff
 ){

3478 
p
 = (
U≈ackedRec‹d
 *)
	`sqlôe3DbMÆlocRaw
(
pKeyInfo
->
db
, 
nByã
);

3479 *
µFªe
 = (*)
p
;

3480 if–!
p
 )  0;

3482 
p
 = (
U≈ackedRec‹d
*)&
pS∑˚
[
nOff
];

3483 *
µFªe
 = 0;

3486 
p
->
aMem
 = (
Mem
*)&((*Ì)[
	`ROUND8
((
U≈ackedRec‹d
))];

3487 
	`as£π
–
pKeyInfo
->
aS‹tOrdî
!=0 );

3488 
p
->
pKeyInfo
 =ÖKeyInfo;

3489 
p
->
nFõld
 = 
pKeyInfo
->nField + 1;

3490  
p
;

3491 
	}
}

3498 
	$sqlôe3VdbeRec‹dU≈ack
(

3499 
KeyInfo
 *
pKeyInfo
,

3500 
nKey
,

3501 c⁄° *
pKey
,

3502 
U≈ackedRec‹d
 *
p


3504 c⁄° *
aKey
 = (c⁄° *)
pKey
;

3505 
d
;

3506 
u32
 
idx
;

3507 
u16
 
u
;

3508 
u32
 
szHdr
;

3509 
Mem
 *
pMem
 = 
p
->
aMem
;

3511 
p
->
deÁu…_rc
 = 0;

3512 
	`as£π
–
	`EIGHT_BYTE_ALIGNMENT
(
pMem
) );

3513 
idx
 = 
	`gëV¨öt32
(
aKey
, 
szHdr
);

3514 
d
 = 
szHdr
;

3515 
u
 = 0;

3516  
idx
<
szHdr
 && 
d
<=
nKey
 ){

3517 
u32
 
£rül_ty≥
;

3519 
idx
 +
	`gëV¨öt32
(&
aKey
[idx], 
£rül_ty≥
);

3520 
pMem
->
íc
 = 
pKeyInfo
->enc;

3521 
pMem
->
db
 = 
pKeyInfo
->db;

3523 
pMem
->
szMÆloc
 = 0;

3524 
pMem
->
z
 = 0;

3525 
d
 +
	`sqlôe3VdbeSîülGë
(&
aKey
[d], 
£rül_ty≥
, 
pMem
);

3526 
pMem
++;

3527 if–(++
u
)>=
p
->
nFõld
 ) ;

3529 
	`as£π
–
u
<=
pKeyInfo
->
nFõld
 + 1 );

3530 
p
->
nFõld
 = 
u
;

3531 
	}
}

3533 #i‡
SQLITE_DEBUG


3545 
	$vdbeRec‹dCom∑ªDebug
(

3546 
nKey1
, c⁄° *
pKey1
,

3547 c⁄° 
U≈ackedRec‹d
 *
pPKey2
,

3548 
desúedResu…


3550 
u32
 
d1
;

3551 
u32
 
idx1
;

3552 
u32
 
szHdr1
;

3553 
i
 = 0;

3554 
rc
 = 0;

3555 c⁄° *
aKey1
 = (c⁄° *)
pKey1
;

3556 
KeyInfo
 *
pKeyInfo
;

3557 
Mem
 
mem1
;

3559 
pKeyInfo
 = 
pPKey2
->pKeyInfo;

3560 if–
pKeyInfo
->
db
==0 )  1;

3561 
mem1
.
íc
 = 
pKeyInfo
->enc;

3562 
mem1
.
db
 = 
pKeyInfo
->db;

3564 
	`VVA_ONLY
–
mem1
.
szMÆloc
 = 0; )

3575 
idx1
 = 
	`gëV¨öt32
(
aKey1
, 
szHdr1
);

3576 if–
szHdr1
>98307 )  
SQLITE_CORRUPT
;

3577 
d1
 = 
szHdr1
;

3578 
	`as£π
–
pKeyInfo
->
nFõld
+pKeyInfo->
nXFõld
>=
pPKey2
->nFõld || 
CORRUPT_DB
 );

3579 
	`as£π
–
pKeyInfo
->
aS‹tOrdî
!=0 );

3580 
	`as£π
–
pKeyInfo
->
nFõld
>0 );

3581 
	`as£π
–
idx1
<=
szHdr1
 || 
CORRUPT_DB
 );

3583 
u32
 
£rül_ty≥1
;

3586 
idx1
 +
	`gëV¨öt32
–
aKey1
+idx1, 
£rül_ty≥1
 );

3594 if–
d1
+
£rül_ty≥1
+2>(
u32
)
nKey1


3595 && 
d1
+
	`sqlôe3VdbeSîülTy≥Lí
(
£rül_ty≥1
)>(
u32
)
nKey1


3602 
d1
 +
	`sqlôe3VdbeSîülGë
(&
aKey1
[d1], 
£rül_ty≥1
, &
mem1
);

3606 
rc
 = 
	`sqlôe3MemCom∑ª
(&
mem1
, &
pPKey2
->
aMem
[
i
], 
pKeyInfo
->
aCﬁl
[i]);

3607 if–
rc
!=0 ){

3608 
	`as£π
–
mem1
.
szMÆloc
==0 );

3609 if–
pKeyInfo
->
aS‹tOrdî
[
i
] ){

3610 
rc
 = -rc;

3612 
debugCom∑ªEnd
;

3614 
i
++;

3615 } 
idx1
<
szHdr1
 && 
i
<
pPKey2
->
nFõld
 );

3621 
	`as£π
–
mem1
.
szMÆloc
==0 );

3626 
rc
 = 
pPKey2
->
deÁu…_rc
;

3628 
debugCom∑ªEnd
:

3629 if–
desúedResu…
==0 && 
rc
==0 )  1;

3630 if–
desúedResu…
<0 && 
rc
<0 )  1;

3631 if–
desúedResu…
>0 && 
rc
>0 )  1;

3632 if–
CORRUPT_DB
 )  1;

3633 if–
pKeyInfo
->
db
->
mÆlocFaûed
 )  1;

3635 
	}
}

3638 #i‡
SQLITE_DEBUG


3650 
	$vdbeAs£πFõldCou¡WôhöLimôs
(

3651 
nKey
, c⁄° *
pKey
,

3652 c⁄° 
KeyInfo
 *
pKeyInfo


3654 
nFõld
 = 0;

3655 
u32
 
szHdr
;

3656 
u32
 
idx
;

3657 
u32
 
nŸU£d
;

3658 c⁄° *
aKey
 = (c⁄° *)
pKey
;

3660 if–
CORRUPT_DB
 ) ;

3661 
idx
 = 
	`gëV¨öt32
(
aKey
, 
szHdr
);

3662 
	`as£π
–
nKey
>=0 );

3663 
	`as£π
–
szHdr
<=(
u32
)
nKey
 );

3664  
idx
<
szHdr
 ){

3665 
idx
 +
	`gëV¨öt32
(
aKey
+idx, 
nŸU£d
);

3666 
nFõld
++;

3668 
	`as£π
–
nFõld
 <
pKeyInfo
->nFõld+pKeyInfo->
nXFõld
 );

3669 
	}
}

3671 
	#vdbeAs£πFõldCou¡WôhöLimôs
(
A
,
B
,
C
)

	)

3680 
	$vdbeCom∑ªMemSåög
(

3681 c⁄° 
Mem
 *
pMem1
,

3682 c⁄° 
Mem
 *
pMem2
,

3683 c⁄° 
CﬁlSeq
 *
pCﬁl
,

3684 
u8
 *
¥cEº


3686 if–
pMem1
->
íc
==
pCﬁl
->enc ){

3689  
pCﬁl
->
	`xCmp
’Cﬁl->
pU£r
,
pMem1
->
n
,pMem1->
z
,
pMem2
->n,pMem2->z);

3691 
rc
;

3692 c⁄° *
v1
, *
v2
;

3693 
n1
, 
n2
;

3694 
Mem
 
c1
;

3695 
Mem
 
c2
;

3696 
	`sqlôe3VdbeMemInô
(&
c1
, 
pMem1
->
db
, 
MEM_NuŒ
);

3697 
	`sqlôe3VdbeMemInô
(&
c2
, 
pMem1
->
db
, 
MEM_NuŒ
);

3698 
	`sqlôe3VdbeMemShÆlowC›y
(&
c1
, 
pMem1
, 
MEM_Ephem
);

3699 
	`sqlôe3VdbeMemShÆlowC›y
(&
c2
, 
pMem2
, 
MEM_Ephem
);

3700 
v1
 = 
	`sqlôe3VÆueText
((
sqlôe3_vÆue
*)&
c1
, 
pCﬁl
->
íc
);

3701 
n1
 = 
v1
==0 ? 0 : 
c1
.
n
;

3702 
v2
 = 
	`sqlôe3VÆueText
((
sqlôe3_vÆue
*)&
c2
, 
pCﬁl
->
íc
);

3703 
n2
 = 
v2
==0 ? 0 : 
c2
.
n
;

3704 
rc
 = 
pCﬁl
->
	`xCmp
’Cﬁl->
pU£r
, 
n1
, 
v1
, 
n2
, 
v2
);

3705 if–(
v1
==0 || 
v2
==0Ë&& 
¥cEº
 ) *¥cEº = 
SQLITE_NOMEM_BKPT
;

3706 
	`sqlôe3VdbeMemRñó£
(&
c1
);

3707 
	`sqlôe3VdbeMemRñó£
(&
c2
);

3708  
rc
;

3710 
	}
}

3717 
SQLITE_NOINLINE
 
	$sqlôe3BlobCom∑ª
(c⁄° 
Mem
 *
pB1
, c⁄° Mem *
pB2
){

3718 
c
 = 
	`memcmp
(
pB1
->
z
, 
pB2
->z,ÖB1->
n
>pB2->n ?ÖB2->n :ÖB1->n);

3719 if–
c
 )  c;

3720  
pB1
->
n
 - 
pB2
->n;

3721 
	}
}

3728 
	$sqlôe3I¡FlﬂtCom∑ª
(
i64
 
i
, 
r
){

3729 if–(
LONGDOUBLE_TYPE
)>8 ){

3730 
LONGDOUBLE_TYPE
 
x
 = (LONGDOUBLE_TYPE)
i
;

3731 if–
x
<
r
 )  -1;

3732 if–
x
>
r
 )  +1;

3735 
i64
 
y
;

3736 
s
;

3737 if–
r
<-9223372036854775808.0 )  +1;

3738 if–
r
>9223372036854775807.0 )  -1;

3739 
y
 = (
i64
)
r
;

3740 if–
i
<
y
 )  -1;

3741 if–
i
>
y
 ){

3742 if–
y
==
SMALLEST_INT64
 && 
r
>0.0 )  -1;

3745 
s
 = ()
i
;

3746 if–
s
<
r
 )  -1;

3747 if–
s
>
r
 )  +1;

3750 
	}
}

3761 
	$sqlôe3MemCom∑ª
(c⁄° 
Mem
 *
pMem1
, c⁄° Mem *
pMem2
, c⁄° 
CﬁlSeq
 *
pCﬁl
){

3762 
f1
, 
f2
;

3763 
comböed_Êags
;

3765 
f1
 = 
pMem1
->
Êags
;

3766 
f2
 = 
pMem2
->
Êags
;

3767 
comböed_Êags
 = 
f1
|
f2
;

3768 
	`as£π
–(
comböed_Êags
 & 
MEM_RowSë
)==0 );

3773 if–
comböed_Êags
&
MEM_NuŒ
 ){

3774  (
f2
&
MEM_NuŒ
Ë- (
f1
&MEM_Null);

3779 if–
comböed_Êags
&(
MEM_I¡
|
MEM_Ról
) ){

3780 if–(
f1
 & 
f2
 & 
MEM_I¡
)!=0 ){

3781 if–
pMem1
->
u
.
i
 < 
pMem2
->u.i )  -1;

3782 if–
pMem1
->
u
.
i
 > 
pMem2
->u.i )  +1;

3785 if–(
f1
 & 
f2
 & 
MEM_Ról
)!=0 ){

3786 if–
pMem1
->
u
.
r
 < 
pMem2
->u.r )  -1;

3787 if–
pMem1
->
u
.
r
 > 
pMem2
->u.r )  +1;

3790 if–(
f1
&
MEM_I¡
)!=0 ){

3791 if–(
f2
&
MEM_Ról
)!=0 ){

3792  
	`sqlôe3I¡FlﬂtCom∑ª
(
pMem1
->
u
.
i
, 
pMem2
->u.
r
);

3797 if–(
f1
&
MEM_Ról
)!=0 ){

3798 if–(
f2
&
MEM_I¡
)!=0 ){

3799  -
	`sqlôe3I¡FlﬂtCom∑ª
(
pMem2
->
u
.
i
, 
pMem1
->u.
r
);

3810 if–
comböed_Êags
&
MEM_Så
 ){

3811 if–(
f1
 & 
MEM_Så
)==0 ){

3814 if–(
f2
 & 
MEM_Så
)==0 ){

3818 
	`as£π
–
pMem1
->
íc
==
pMem2
->í¯||ÖMem1->
db
->
mÆlocFaûed
 );

3819 
	`as£π
–
pMem1
->
íc
==
SQLITE_UTF8
 ||

3820 
pMem1
->
íc
==
SQLITE_UTF16LE
 ||ÖMem1->íc==
SQLITE_UTF16BE
 );

3826 
	`as£π
–!
pCﬁl
 ||ÖCﬁl->
xCmp
 );

3828 if–
pCﬁl
 ){

3829  
	`vdbeCom∑ªMemSåög
(
pMem1
, 
pMem2
, 
pCﬁl
, 0);

3836  
	`sqlôe3BlobCom∑ª
(
pMem1
, 
pMem2
);

3837 
	}
}

3847 
i64
 
	$vdbeRec‹dDecodeI¡
(
u32
 
£rül_ty≥
, c⁄° 
u8
 *
aKey
){

3848 
u32
 
y
;

3849 
	`as£π
–
CORRUPT_DB
 || (
£rül_ty≥
>=1 && serial_type<=9 && serial_type!=7) );

3850  
£rül_ty≥
 ){

3853 
	`ã°ˇ£
–
aKey
[0]&0x80 );

3854  
	`ONE_BYTE_INT
(
aKey
);

3856 
	`ã°ˇ£
–
aKey
[0]&0x80 );

3857  
	`TWO_BYTE_INT
(
aKey
);

3859 
	`ã°ˇ£
–
aKey
[0]&0x80 );

3860  
	`THREE_BYTE_INT
(
aKey
);

3862 
	`ã°ˇ£
–
aKey
[0]&0x80 );

3863 
y
 = 
	`FOUR_BYTE_UINT
(
aKey
);

3864  (
i64
)*(*)&
y
;

3867 
	`ã°ˇ£
–
aKey
[0]&0x80 );

3868  
	`FOUR_BYTE_UINT
(
aKey
+2Ë+ (((
i64
)1)<<32)*
	`TWO_BYTE_INT
(aKey);

3871 
u64
 
x
 = 
	`FOUR_BYTE_UINT
(
aKey
);

3872 
	`ã°ˇ£
–
aKey
[0]&0x80 );

3873 
x
 = (x<<32Ë| 
	`FOUR_BYTE_UINT
(
aKey
+4);

3874  (
i64
)*(i64*)&
x
;

3878  (
£rül_ty≥
 - 8);

3879 
	}
}

3902 
	$sqlôe3VdbeRec‹dCom∑ªWôhSkù
(

3903 
nKey1
, c⁄° *
pKey1
,

3904 
U≈ackedRec‹d
 *
pPKey2
,

3905 
bSkù


3907 
u32
 
d1
;

3908 
i
;

3909 
u32
 
szHdr1
;

3910 
u32
 
idx1
;

3911 
rc
 = 0;

3912 
Mem
 *
pRhs
 = 
pPKey2
->
aMem
;

3913 
KeyInfo
 *
pKeyInfo
 = 
pPKey2
->pKeyInfo;

3914 c⁄° *
aKey1
 = (c⁄° *)
pKey1
;

3915 
Mem
 
mem1
;

3920 if–
bSkù
 ){

3921 
u32
 
s1
;

3922 
idx1
 = 1 + 
	`gëV¨öt32
(&
aKey1
[1], 
s1
);

3923 
szHdr1
 = 
aKey1
[0];

3924 
d1
 = 
szHdr1
 + 
	`sqlôe3VdbeSîülTy≥Lí
(
s1
);

3925 
i
 = 1;

3926 
pRhs
++;

3928 
idx1
 = 
	`gëV¨öt32
(
aKey1
, 
szHdr1
);

3929 
d1
 = 
szHdr1
;

3930 if–
d1
>()
nKey1
 ){

3931 
pPKey2
->
îrCode
 = (
u8
)
SQLITE_CORRUPT_BKPT
;

3934 
i
 = 0;

3937 
	`VVA_ONLY
–
mem1
.
szMÆloc
 = 0; )

3938 
	`as£π
–
pPKey2
->
pKeyInfo
->
nFõld
+pPKey2->pKeyInfo->
nXFõld
>=pPKey2->nField

3939 || 
CORRUPT_DB
 );

3940 
	`as£π
–
pPKey2
->
pKeyInfo
->
aS‹tOrdî
!=0 );

3941 
	`as£π
–
pPKey2
->
pKeyInfo
->
nFõld
>0 );

3942 
	`as£π
–
idx1
<=
szHdr1
 || 
CORRUPT_DB
 );

3944 
u32
 
£rül_ty≥
;

3947 if–
pRhs
->
Êags
 & 
MEM_I¡
 ){

3948 
£rül_ty≥
 = 
aKey1
[
idx1
];

3949 
	`ã°ˇ£
–
£rül_ty≥
==12 );

3950 if–
£rül_ty≥
>=10 ){

3951 
rc
 = +1;

3952 }if–
£rül_ty≥
==0 ){

3953 
rc
 = -1;

3954 }if–
£rül_ty≥
==7 ){

3955 
	`sqlôe3VdbeSîülGë
(&
aKey1
[
d1
], 
£rül_ty≥
, &
mem1
);

3956 
rc
 = -
	`sqlôe3I¡FlﬂtCom∑ª
(
pRhs
->
u
.
i
, 
mem1
.u.
r
);

3958 
i64
 
lhs
 = 
	`vdbeRec‹dDecodeI¡
(
£rül_ty≥
, &
aKey1
[
d1
]);

3959 
i64
 
rhs
 = 
pRhs
->
u
.
i
;

3960 if–
lhs
<
rhs
 ){

3961 
rc
 = -1;

3962 }if–
lhs
>
rhs
 ){

3963 
rc
 = +1;

3969 if–
pRhs
->
Êags
 & 
MEM_Ról
 ){

3970 
£rül_ty≥
 = 
aKey1
[
idx1
];

3971 if–
£rül_ty≥
>=10 ){

3976 
rc
 = +1;

3977 }if–
£rül_ty≥
==0 ){

3978 
rc
 = -1;

3980 
	`sqlôe3VdbeSîülGë
(&
aKey1
[
d1
], 
£rül_ty≥
, &
mem1
);

3981 if–
£rül_ty≥
==7 ){

3982 if–
mem1
.
u
.
r
<
pRhs
->u.r ){

3983 
rc
 = -1;

3984 }if–
mem1
.
u
.
r
>
pRhs
->u.r ){

3985 
rc
 = +1;

3988 
rc
 = 
	`sqlôe3I¡FlﬂtCom∑ª
(
mem1
.
u
.
i
, 
pRhs
->u.
r
);

3994 if–
pRhs
->
Êags
 & 
MEM_Så
 ){

3995 
	`gëV¨öt32
(&
aKey1
[
idx1
], 
£rül_ty≥
);

3996 
	`ã°ˇ£
–
£rül_ty≥
==12 );

3997 if–
£rül_ty≥
<12 ){

3998 
rc
 = -1;

3999 }if–!(
£rül_ty≥
 & 0x01) ){

4000 
rc
 = +1;

4002 
mem1
.
n
 = (
£rül_ty≥
 - 12) / 2;

4003 
	`ã°ˇ£
–(
d1
+
mem1
.
n
)==()
nKey1
 );

4004 
	`ã°ˇ£
–(
d1
+
mem1
.
n
+1)==()
nKey1
 );

4005 if–(
d1
+
mem1
.
n
Ë> ()
nKey1
 ){

4006 
pPKey2
->
îrCode
 = (
u8
)
SQLITE_CORRUPT_BKPT
;

4008 }if–
pKeyInfo
->
aCﬁl
[
i
] ){

4009 
mem1
.
íc
 = 
pKeyInfo
->enc;

4010 
mem1
.
db
 = 
pKeyInfo
->db;

4011 
mem1
.
Êags
 = 
MEM_Så
;

4012 
mem1
.
z
 = (*)&
aKey1
[
d1
];

4013 
rc
 = 
	`vdbeCom∑ªMemSåög
(

4014 &
mem1
, 
pRhs
, 
pKeyInfo
->
aCﬁl
[
i
], &
pPKey2
->
îrCode


4017 
nCmp
 = 
	`MIN
(
mem1
.
n
, 
pRhs
->n);

4018 
rc
 = 
	`memcmp
(&
aKey1
[
d1
], 
pRhs
->
z
, 
nCmp
);

4019 if–
rc
==0 )Ñ¯
mem1
.
n
 - 
pRhs
->n;

4025 if–
pRhs
->
Êags
 & 
MEM_Blob
 ){

4026 
	`gëV¨öt32
(&
aKey1
[
idx1
], 
£rül_ty≥
);

4027 
	`ã°ˇ£
–
£rül_ty≥
==12 );

4028 if–
£rül_ty≥
<12 || (serial_type & 0x01) ){

4029 
rc
 = -1;

4031 
nSå
 = (
£rül_ty≥
 - 12) / 2;

4032 
	`ã°ˇ£
–(
d1
+
nSå
)==()
nKey1
 );

4033 
	`ã°ˇ£
–(
d1
+
nSå
+1)==()
nKey1
 );

4034 if–(
d1
+
nSå
Ë> ()
nKey1
 ){

4035 
pPKey2
->
îrCode
 = (
u8
)
SQLITE_CORRUPT_BKPT
;

4038 
nCmp
 = 
	`MIN
(
nSå
, 
pRhs
->
n
);

4039 
rc
 = 
	`memcmp
(&
aKey1
[
d1
], 
pRhs
->
z
, 
nCmp
);

4040 if–
rc
==0 )Ñ¯
nSå
 - 
pRhs
->
n
;

4047 
£rül_ty≥
 = 
aKey1
[
idx1
];

4048 
rc
 = (
£rül_ty≥
!=0);

4051 if–
rc
!=0 ){

4052 if–
pKeyInfo
->
aS‹tOrdî
[
i
] ){

4053 
rc
 = -rc;

4055 
	`as£π
–
	`vdbeRec‹dCom∑ªDebug
(
nKey1
, 
pKey1
, 
pPKey2
, 
rc
) );

4056 
	`as£π
–
mem1
.
szMÆloc
==0 );

4057  
rc
;

4060 
i
++;

4061 
pRhs
++;

4062 
d1
 +
	`sqlôe3VdbeSîülTy≥Lí
(
£rül_ty≥
);

4063 
idx1
 +
	`sqlôe3V¨ötLí
(
£rül_ty≥
);

4064 } 
idx1
<()
szHdr1
 && 
i
<
pPKey2
->
nFõld
 && 
d1
<=()
nKey1
 );

4069 
	`as£π
–
mem1
.
szMÆloc
==0 );

4074 
	`as£π
–
CORRUPT_DB


4075 || 
	`vdbeRec‹dCom∑ªDebug
(
nKey1
, 
pKey1
, 
pPKey2
,ÖPKey2->
deÁu…_rc
)

4076 || 
pKeyInfo
->
db
->
mÆlocFaûed


4078 
pPKey2
->
eqSìn
 = 1;

4079  
pPKey2
->
deÁu…_rc
;

4080 
	}
}

4081 
	$sqlôe3VdbeRec‹dCom∑ª
(

4082 
nKey1
, c⁄° *
pKey1
,

4083 
U≈ackedRec‹d
 *
pPKey2


4085  
	`sqlôe3VdbeRec‹dCom∑ªWôhSkù
(
nKey1
, 
pKey1
, 
pPKey2
, 0);

4086 
	}
}

4098 
	$vdbeRec‹dCom∑ªI¡
(

4099 
nKey1
, c⁄° *
pKey1
,

4100 
U≈ackedRec‹d
 *
pPKey2


4102 c⁄° 
u8
 *
aKey
 = &((c⁄° u8*)
pKey1
)[*(const u8*)pKey1 & 0x3F];

4103 
£rül_ty≥
 = ((c⁄° 
u8
*)
pKey1
)[1];

4104 
ªs
;

4105 
u32
 
y
;

4106 
u64
 
x
;

4107 
i64
 
v
 = 
pPKey2
->
aMem
[0].
u
.
i
;

4108 
i64
 
lhs
;

4110 
	`vdbeAs£πFõldCou¡WôhöLimôs
(
nKey1
, 
pKey1
, 
pPKey2
->
pKeyInfo
);

4111 
	`as£π
–(*(
u8
*)
pKey1
)<=0x3F || 
CORRUPT_DB
 );

4112  
£rül_ty≥
 ){

4114 
lhs
 = 
	`ONE_BYTE_INT
(
aKey
);

4115 
	`ã°ˇ£
–
lhs
<0 );

4119 
lhs
 = 
	`TWO_BYTE_INT
(
aKey
);

4120 
	`ã°ˇ£
–
lhs
<0 );

4124 
lhs
 = 
	`THREE_BYTE_INT
(
aKey
);

4125 
	`ã°ˇ£
–
lhs
<0 );

4129 
y
 = 
	`FOUR_BYTE_UINT
(
aKey
);

4130 
lhs
 = (
i64
)*(*)&
y
;

4131 
	`ã°ˇ£
–
lhs
<0 );

4135 
lhs
 = 
	`FOUR_BYTE_UINT
(
aKey
+2Ë+ (((
i64
)1)<<32)*
	`TWO_BYTE_INT
(aKey);

4136 
	`ã°ˇ£
–
lhs
<0 );

4140 
x
 = 
	`FOUR_BYTE_UINT
(
aKey
);

4141 
x
 = (x<<32Ë| 
	`FOUR_BYTE_UINT
(
aKey
+4);

4142 
lhs
 = *(
i64
*)&
x
;

4143 
	`ã°ˇ£
–
lhs
<0 );

4147 
lhs
 = 0;

4150 
lhs
 = 1;

4160  
	`sqlôe3VdbeRec‹dCom∑ª
(
nKey1
, 
pKey1
, 
pPKey2
);

4163  
	`sqlôe3VdbeRec‹dCom∑ª
(
nKey1
, 
pKey1
, 
pPKey2
);

4166 if–
v
>
lhs
 ){

4167 
ªs
 = 
pPKey2
->
r1
;

4168 }if–
v
<
lhs
 ){

4169 
ªs
 = 
pPKey2
->
r2
;

4170 }if–
pPKey2
->
nFõld
>1 ){

4173 
ªs
 = 
	`sqlôe3VdbeRec‹dCom∑ªWôhSkù
(
nKey1
, 
pKey1
, 
pPKey2
, 1);

4177 
ªs
 = 
pPKey2
->
deÁu…_rc
;

4178 
pPKey2
->
eqSìn
 = 1;

4181 
	`as£π
–
	`vdbeRec‹dCom∑ªDebug
(
nKey1
, 
pKey1
, 
pPKey2
, 
ªs
) );

4182  
ªs
;

4183 
	}
}

4191 
	$vdbeRec‹dCom∑ªSåög
(

4192 
nKey1
, c⁄° *
pKey1
,

4193 
U≈ackedRec‹d
 *
pPKey2


4195 c⁄° 
u8
 *
aKey1
 = (c⁄° u8*)
pKey1
;

4196 
£rül_ty≥
;

4197 
ªs
;

4199 
	`as£π
–
pPKey2
->
aMem
[0].
Êags
 & 
MEM_Så
 );

4200 
	`vdbeAs£πFõldCou¡WôhöLimôs
(
nKey1
, 
pKey1
, 
pPKey2
->
pKeyInfo
);

4201 
	`gëV¨öt32
(&
aKey1
[1], 
£rül_ty≥
);

4202 if–
£rül_ty≥
<12 ){

4203 
ªs
 = 
pPKey2
->
r1
;

4204 }if–!(
£rül_ty≥
 & 0x01) ){

4205 
ªs
 = 
pPKey2
->
r2
;

4207 
nCmp
;

4208 
nSå
;

4209 
szHdr
 = 
aKey1
[0];

4211 
nSå
 = (
£rül_ty≥
-12) / 2;

4212 if–(
szHdr
 + 
nSå
Ë> 
nKey1
 ){

4213 
pPKey2
->
îrCode
 = (
u8
)
SQLITE_CORRUPT_BKPT
;

4216 
nCmp
 = 
	`MIN
–
pPKey2
->
aMem
[0].
n
, 
nSå
 );

4217 
ªs
 = 
	`memcmp
(&
aKey1
[
szHdr
], 
pPKey2
->
aMem
[0].
z
, 
nCmp
);

4219 if–
ªs
==0 ){

4220 
ªs
 = 
nSå
 - 
pPKey2
->
aMem
[0].
n
;

4221 if–
ªs
==0 ){

4222 if–
pPKey2
->
nFõld
>1 ){

4223 
ªs
 = 
	`sqlôe3VdbeRec‹dCom∑ªWôhSkù
(
nKey1
, 
pKey1
, 
pPKey2
, 1);

4225 
ªs
 = 
pPKey2
->
deÁu…_rc
;

4226 
pPKey2
->
eqSìn
 = 1;

4228 }if–
ªs
>0 ){

4229 
ªs
 = 
pPKey2
->
r2
;

4231 
ªs
 = 
pPKey2
->
r1
;

4233 }if–
ªs
>0 ){

4234 
ªs
 = 
pPKey2
->
r2
;

4236 
ªs
 = 
pPKey2
->
r1
;

4240 
	`as£π
–
	`vdbeRec‹dCom∑ªDebug
(
nKey1
, 
pKey1
, 
pPKey2
, 
ªs
)

4241 || 
CORRUPT_DB


4242 || 
pPKey2
->
pKeyInfo
->
db
->
mÆlocFaûed


4244  
ªs
;

4245 
	}
}

4252 
Rec‹dCom∑ª
 
	$sqlôe3VdbeFödCom∑ª
(
U≈ackedRec‹d
 *
p
){

4266 if–(
p
->
pKeyInfo
->
nFõld
 +Ö->pKeyInfo->
nXFõld
)<=13 ){

4267 
Êags
 = 
p
->
aMem
[0].flags;

4268 if–
p
->
pKeyInfo
->
aS‹tOrdî
[0] ){

4269 
p
->
r1
 = 1;

4270 
p
->
r2
 = -1;

4272 
p
->
r1
 = -1;

4273 
p
->
r2
 = 1;

4275 if–(
Êags
 & 
MEM_I¡
) ){

4276  
vdbeRec‹dCom∑ªI¡
;

4278 
	`ã°ˇ£
–
Êags
 & 
MEM_Ról
 );

4279 
	`ã°ˇ£
–
Êags
 & 
MEM_NuŒ
 );

4280 
	`ã°ˇ£
–
Êags
 & 
MEM_Blob
 );

4281 if–(
Êags
 & (
MEM_Ról
|
MEM_NuŒ
|
MEM_Blob
))==0 && 
p
->
pKeyInfo
->
aCﬁl
[0]==0 ){

4282 
	`as£π
–
Êags
 & 
MEM_Så
 );

4283  
vdbeRec‹dCom∑ªSåög
;

4287  
sqlôe3VdbeRec‹dCom∑ª
;

4288 
	}
}

4298 
	$sqlôe3VdbeIdxRowid
(
sqlôe3
 *
db
, 
BtCurs‹
 *
pCur
, 
i64
 *
rowid
){

4299 
i64
 
nCñlKey
 = 0;

4300 
rc
;

4301 
u32
 
szHdr
;

4302 
u32
 
ty≥Rowid
;

4303 
u32
 
ÀnRowid
;

4304 
Mem
 
m
, 
v
;

4311 
	`as£π
–
	`sqlôe3BåìCurs‹IsVÆid
(
pCur
) );

4312 
	`VVA_ONLY
(
rc
 =Ë
	`sqlôe3BåìKeySize
(
pCur
, &
nCñlKey
);

4313 
	`as£π
–
rc
==
SQLITE_OK
 );

4314 
	`as£π
–(
nCñlKey
 & 
SQLITE_MAX_U32
)==(
u64
)nCellKey );

4317 
	`sqlôe3VdbeMemInô
(&
m
, 
db
, 0);

4318 
rc
 = 
	`sqlôe3VdbeMemFromBåì
(
pCur
, 0, (
u32
)
nCñlKey
, 1, &
m
);

4319 if–
rc
 ){

4320  
rc
;

4324 ()
	`gëV¨öt32
((
u8
*)
m
.
z
, 
szHdr
);

4325 
	`ã°ˇ£
–
szHdr
==3 );

4326 
	`ã°ˇ£
–
szHdr
==
m
.
n
 );

4327 if–
	`u∆ikñy
(
szHdr
<3 || ()szHdr>
m
.
n
) ){

4328 
idx_rowid_c‹ru±i⁄
;

4333 ()
	`gëV¨öt32
((
u8
*)&
m
.
z
[
szHdr
-1], 
ty≥Rowid
);

4334 
	`ã°ˇ£
–
ty≥Rowid
==1 );

4335 
	`ã°ˇ£
–
ty≥Rowid
==2 );

4336 
	`ã°ˇ£
–
ty≥Rowid
==3 );

4337 
	`ã°ˇ£
–
ty≥Rowid
==4 );

4338 
	`ã°ˇ£
–
ty≥Rowid
==5 );

4339 
	`ã°ˇ£
–
ty≥Rowid
==6 );

4340 
	`ã°ˇ£
–
ty≥Rowid
==8 );

4341 
	`ã°ˇ£
–
ty≥Rowid
==9 );

4342 if–
	`u∆ikñy
(
ty≥Rowid
<1 ||ÅypeRowid>9 ||ÅypeRowid==7) ){

4343 
idx_rowid_c‹ru±i⁄
;

4345 
ÀnRowid
 = 
sqlôe3SmÆlTy≥Sizes
[
ty≥Rowid
];

4346 
	`ã°ˇ£
–(
u32
)
m
.
n
==
szHdr
+
ÀnRowid
 );

4347 if–
	`u∆ikñy
((
u32
)
m
.
n
<
szHdr
+
ÀnRowid
) ){

4348 
idx_rowid_c‹ru±i⁄
;

4352 
	`sqlôe3VdbeSîülGë
((
u8
*)&
m
.
z
[m.
n
-
ÀnRowid
], 
ty≥Rowid
, &
v
);

4353 *
rowid
 = 
v
.
u
.
i
;

4354 
	`sqlôe3VdbeMemRñó£
(&
m
);

4355  
SQLITE_OK
;

4359 
idx_rowid_c‹ru±i⁄
:

4360 
	`ã°ˇ£
–
m
.
szMÆloc
!=0 );

4361 
	`sqlôe3VdbeMemRñó£
(&
m
);

4362  
SQLITE_CORRUPT_BKPT
;

4363 
	}
}

4376 
	$sqlôe3VdbeIdxKeyCom∑ª
(

4377 
sqlôe3
 *
db
,

4378 
VdbeCurs‹
 *
pC
,

4379 
U≈ackedRec‹d
 *
pU≈acked
,

4380 *
ªs


4382 
i64
 
nCñlKey
 = 0;

4383 
rc
;

4384 
BtCurs‹
 *
pCur
;

4385 
Mem
 
m
;

4387 
	`as£π
–
pC
->
eCurTy≥
==
CURTYPE_BTREE
 );

4388 
pCur
 = 
pC
->
uc
.
pCurs‹
;

4389 
	`as£π
–
	`sqlôe3BåìCurs‹IsVÆid
(
pCur
) );

4390 
	`VVA_ONLY
(
rc
 =Ë
	`sqlôe3BåìKeySize
(
pCur
, &
nCñlKey
);

4391 
	`as£π
–
rc
==
SQLITE_OK
 );

4394 if–
nCñlKey
<=0 ||ÇCellKey>0x7fffffff ){

4395 *
ªs
 = 0;

4396  
SQLITE_CORRUPT_BKPT
;

4398 
	`sqlôe3VdbeMemInô
(&
m
, 
db
, 0);

4399 
rc
 = 
	`sqlôe3VdbeMemFromBåì
(
pCur
, 0, (
u32
)
nCñlKey
, 1, &
m
);

4400 if–
rc
 ){

4401  
rc
;

4403 *
ªs
 = 
	`sqlôe3VdbeRec‹dCom∑ª
(
m
.
n
, m.
z
, 
pU≈acked
);

4404 
	`sqlôe3VdbeMemRñó£
(&
m
);

4405  
SQLITE_OK
;

4406 
	}
}

4412 
	$sqlôe3VdbeSëCh™ges
(
sqlôe3
 *
db
, 
nCh™ge
){

4413 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

4414 
db
->
nCh™ge
 =ÇChange;

4415 
db
->
nTŸÆCh™ge
 +
nCh™ge
;

4416 
	}
}

4422 
	$sqlôe3VdbeCou¡Ch™ges
(
Vdbe
 *
v
){

4423 
v
->
ch™geC¡On
 = 1;

4424 
	}
}

4436 
	$sqlôe3ExpúePª∑ªdSèãmíts
(
sqlôe3
 *
db
){

4437 
Vdbe
 *
p
;

4438 
p
 = 
db
->
pVdbe
;Ö;Öı->
pNext
){

4439 
p
->
expúed
 = 1;

4441 
	}
}

4446 
sqlôe3
 *
	$sqlôe3VdbeDb
(
Vdbe
 *
v
){

4447  
v
->
db
;

4448 
	}
}

4458 
sqlôe3_vÆue
 *
	$sqlôe3VdbeGëBoundVÆue
(
Vdbe
 *
v
, 
iV¨
, 
u8
 
aff
){

4459 
	`as£π
–
iV¨
>0 );

4460 if–
v
 ){

4461 
Mem
 *
pMem
 = &
v
->
aV¨
[
iV¨
-1];

4462 if–0==(
pMem
->
Êags
 & 
MEM_NuŒ
) ){

4463 
sqlôe3_vÆue
 *
pRë
 = 
	`sqlôe3VÆueNew
(
v
->
db
);

4464 if–
pRë
 ){

4465 
	`sqlôe3VdbeMemC›y
((
Mem
 *)
pRë
, 
pMem
);

4466 
	`sqlôe3VÆueAµlyAfföôy
(
pRë
, 
aff
, 
SQLITE_UTF8
);

4468  
pRë
;

4472 
	}
}

4479 
	$sqlôe3VdbeSëV¨mask
(
Vdbe
 *
v
, 
iV¨
){

4480 
	`as£π
–
iV¨
>0 );

4481 if–
iV¨
>32 ){

4482 
v
->
expmask
 = 0xffffffff;

4484 
v
->
expmask
 |((
u32
)1 << (
iV¨
-1));

4486 
	}
}

4488 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


4494 
	$sqlôe3VèbImp‹tEºmsg
(
Vdbe
 *
p
, 
sqlôe3_vèb
 *
pVèb
){

4495 if–
pVèb
->
zEºMsg
 ){

4496 
sqlôe3
 *
db
 = 
p
->db;

4497 
	`sqlôe3DbFªe
(
db
, 
p
->
zEºMsg
);

4498 
p
->
zEºMsg
 = 
	`sqlôe3DbSåDup
(
db
, 
pVèb
->zErrMsg);

4499 
	`sqlôe3_‰ì
(
pVèb
->
zEºMsg
);

4500 
pVèb
->
zEºMsg
 = 0;

4502 
	}
}

4505 #ifde‡
SQLITE_ENABLE_PREUPDATE_HOOK


4515 
	$vdbeFªeU≈acked
(
sqlôe3
 *
db
, 
U≈ackedRec‹d
 *
p
){

4516 if–
p
 ){

4517 
i
;

4518 
i
=0; i<
p
->
nFõld
; i++){

4519 
Mem
 *
pMem
 = &
p
->
aMem
[
i
];

4520 if–
pMem
->
zMÆloc
 ) 
	`sqlôe3VdbeMemRñó£
(pMem);

4522 
	`sqlôe3DbFªe
(
db
, 
p
);

4524 
	}
}

4527 #ifde‡
SQLITE_ENABLE_PREUPDATE_HOOK


4534 
	$sqlôe3VdbePªUpd©eHook
(

4535 
Vdbe
 *
v
,

4536 
VdbeCurs‹
 *
pC§
,

4537 
›
,

4538 c⁄° *
zDb
,

4539 
TabÀ
 *
pTab
,

4540 
i64
 
iKey1
,

4541 
iReg


4543 
sqlôe3
 *
db
 = 
v
->db;

4544 
i64
 
iKey2
;

4545 
PªUpd©e
 
¥eupd©e
;

4546 c⁄° *
zTbl
 = 
pTab
->
zName
;

4547 c⁄° 
u8
 
ÁkeS‹tOrdî
 = 0;

4549 
	`as£π
–
db
->
pPªUpd©e
==0 );

4550 
	`mem£t
(&
¥eupd©e
, 0, (
PªUpd©e
));

4551 if–
›
==
SQLITE_UPDATE
 ){

4552 
iKey2
 = 
v
->
aMem
[
iReg
].
u
.
i
;

4554 
iKey2
 = 
iKey1
;

4557 
	`as£π
–
pC§
->
nFõld
==
pTab
->
nCﬁ


4558 || (
pC§
->
nFõld
==
pTab
->
nCﬁ
+1 && 
›
==
SQLITE_DELETE
 && 
iReg
==-1)

4561 
¥eupd©e
.
v
 = v;

4562 
¥eupd©e
.
pC§
 =ÖCsr;

4563 
¥eupd©e
.
›
 = op;

4564 
¥eupd©e
.
iNewReg
 = 
iReg
;

4565 
¥eupd©e
.
keyöfo
.
db
 = db;

4566 
¥eupd©e
.
keyöfo
.
íc
 = 
	`ENC
(
db
);

4567 
¥eupd©e
.
keyöfo
.
nFõld
 = 
pTab
->
nCﬁ
;

4568 
¥eupd©e
.
keyöfo
.
aS‹tOrdî
 = (
u8
*)&
ÁkeS‹tOrdî
;

4569 
¥eupd©e
.
iKey1
 = iKey1;

4570 
¥eupd©e
.
iKey2
 = iKey2;

4571 
¥eupd©e
.
iPKey
 = 
pTab
->iPKey;

4573 
db
->
pPªUpd©e
 = &
¥eupd©e
;

4574 
db
->
	`xPªUpd©eCÆlback
(db->
pPªUpd©eArg
, db, 
›
, 
zDb
, 
zTbl
, 
iKey1
, 
iKey2
);

4575 
db
->
pPªUpd©e
 = 0;

4576 
	`sqlôe3DbFªe
(
db
, 
¥eupd©e
.
aRec‹d
);

4577 
	`vdbeFªeU≈acked
(
db
, 
¥eupd©e
.
pU≈acked
);

4578 
	`vdbeFªeU≈acked
(
db
, 
¥eupd©e
.
pNewU≈acked
);

4579 if–
¥eupd©e
.
aNew
 ){

4580 
i
;

4581 
i
=0; i<
pC§
->
nFõld
; i++){

4582 
	`sqlôe3VdbeMemRñó£
(&
¥eupd©e
.
aNew
[
i
]);

4584 
	`sqlôe3DbFªe
(
db
, 
¥eupd©e
.
aNew
);

4586 
	}
}

	@vdbeblob.c

16 
	~"sqlôeI¡.h
"

17 
	~"vdbeI¡.h
"

19 #i‚de‡
SQLITE_OMIT_INCRBLOB


24 
In¸blob
 
	tIn¸blob
;

25 
	sIn¸blob
 {

26 
	mÊags
;

27 
	mnByã
;

28 
	miOff£t
;

29 
	miCﬁ
;

30 
BtCurs‹
 *
	mpC§
;

31 
sqlôe3_°mt
 *
	mpStmt
;

32 
sqlôe3
 *
	mdb
;

33 *
	mzDb
;

34 
TabÀ
 *
	mpTab
;

55 
	$blobSìkToRow
(
In¸blob
 *
p
, 
sqlôe3_öt64
 
iRow
, **
pzEº
){

56 
rc
;

57 *
zEº
 = 0;

58 
Vdbe
 *
v
 = (Vdbê*)
p
->
pStmt
;

64 
	`as£π
–
v
->
aV¨
[0].
Êags
&
MEM_I¡
 );

65 
v
->
aV¨
[0].
u
.
i
 = 
iRow
;

67 
rc
 = 
	`sqlôe3_°ï
(
p
->
pStmt
);

68 if–
rc
==
SQLITE_ROW
 ){

69 
VdbeCurs‹
 *
pC
 = 
v
->
≠C§
[0];

70 
u32
 
ty≥
 = 
pC
->
aTy≥
[
p
->
iCﬁ
];

71 if–
ty≥
<12 ){

72 
zEº
 = 
	`sqlôe3MPrötf
(
p
->
db
, "cannot open value ofÅype %s",

73 
ty≥
==0?"null":Åype==7?"real": "integer"

75 
rc
 = 
SQLITE_ERROR
;

76 
	`sqlôe3_föÆize
(
p
->
pStmt
);

77 
p
->
pStmt
 = 0;

79 
p
->
iOff£t
 = 
pC
->
aTy≥
[p->
iCﬁ
 +ÖC->
nFõld
];

80 
p
->
nByã
 = 
	`sqlôe3VdbeSîülTy≥Lí
(
ty≥
);

81 
p
->
pC§
 = 
pC
->
uc
.
pCurs‹
;

82 
	`sqlôe3BåìIn¸blobCurs‹
(
p
->
pC§
);

86 if–
rc
==
SQLITE_ROW
 ){

87 
rc
 = 
SQLITE_OK
;

88 }if–
p
->
pStmt
 ){

89 
rc
 = 
	`sqlôe3_föÆize
(
p
->
pStmt
);

90 
p
->
pStmt
 = 0;

91 if–
rc
==
SQLITE_OK
 ){

92 
zEº
 = 
	`sqlôe3MPrötf
(
p
->
db
, "nÿsuchÑowid: %Œd", 
iRow
);

93 
rc
 = 
SQLITE_ERROR
;

95 
zEº
 = 
	`sqlôe3MPrötf
(
p
->
db
, "%s", 
	`sqlôe3_îrmsg
(p->db));

99 
	`as£π
–
rc
!=
SQLITE_OK
 || 
zEº
==0 );

100 
	`as£π
–
rc
!=
SQLITE_ROW
 &&Ñc!=
SQLITE_DONE
 );

102 *
pzEº
 = 
zEº
;

103  
rc
;

104 
	}
}

109 
	$sqlôe3_blob_›í
(

110 
sqlôe3
* 
db
,

111 c⁄° *
zDb
,

112 c⁄° *
zTabÀ
,

113 c⁄° *
zCﬁumn
,

114 
sqlôe_öt64
 
iRow
,

115 
Êags
,

116 
sqlôe3_blob
 **
µBlob


118 
nAâem±
 = 0;

119 
iCﬁ
;

120 
rc
 = 
SQLITE_OK
;

121 *
zEº
 = 0;

122 
TabÀ
 *
pTab
;

123 
P¨£
 *
pP¨£
 = 0;

124 
In¸blob
 *
pBlob
 = 0;

126 #ifde‡
SQLITE_ENABLE_API_ARMOR


127 if–
µBlob
==0 ){

128  
SQLITE_MISUSE_BKPT
;

131 *
µBlob
 = 0;

132 #ifde‡
SQLITE_ENABLE_API_ARMOR


133 if–!
	`sqlôe3Sa„tyCheckOk
(
db
Ë|| 
zTabÀ
==0 ){

134  
SQLITE_MISUSE_BKPT
;

137 
Êags
 = !!flags;

139 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

141 
pBlob
 = (
In¸blob
 *)
	`sqlôe3DbMÆlocZîo
(
db
, (Incrblob));

142 if–!
pBlob
 ) 
blob_›í_out
;

143 
pP¨£
 = 
	`sqlôe3SèckAŒocRaw
(
db
, (*pParse));

144 if–!
pP¨£
 ) 
blob_›í_out
;

147 
	`mem£t
(
pP¨£
, 0, (
P¨£
));

148 
pP¨£
->
db
 = db;

149 
	`sqlôe3DbFªe
(
db
, 
zEº
);

150 
zEº
 = 0;

152 
	`sqlôe3BåìE¡îAŒ
(
db
);

153 
pTab
 = 
	`sqlôe3LoˇãTabÀ
(
pP¨£
, 0, 
zTabÀ
, 
zDb
);

154 if–
pTab
 && 
	`IsVútuÆ
(pTab) ){

155 
pTab
 = 0;

156 
	`sqlôe3Eº‹Msg
(
pP¨£
, "ˇ¬Ÿ o≥¿vútuÆÅabÀ: %s", 
zTabÀ
);

158 if–
pTab
 && !
	`HasRowid
(pTab) ){

159 
pTab
 = 0;

160 
	`sqlôe3Eº‹Msg
(
pP¨£
, "ˇ¬Ÿ o≥¿èbÀ wôhouàrowid: %s", 
zTabÀ
);

162 #i‚de‡
SQLITE_OMIT_VIEW


163 if–
pTab
 &&ÖTab->
pSñe˘
 ){

164 
pTab
 = 0;

165 
	`sqlôe3Eº‹Msg
(
pP¨£
, "ˇ¬Ÿ o≥¿võw: %s", 
zTabÀ
);

168 if–!
pTab
 ){

169 if–
pP¨£
->
zEºMsg
 ){

170 
	`sqlôe3DbFªe
(
db
, 
zEº
);

171 
zEº
 = 
pP¨£
->
zEºMsg
;

172 
pP¨£
->
zEºMsg
 = 0;

174 
rc
 = 
SQLITE_ERROR
;

175 
	`sqlôe3BåìLóveAŒ
(
db
);

176 
blob_›í_out
;

178 
pBlob
->
pTab
 =ÖTab;

179 
pBlob
->
zDb
 = 
db
->
aDb
[
	`sqlôe3SchemaToIndex
(db, 
pTab
->
pSchema
)].
zName
;

182 
iCﬁ
=0; iCﬁ<
pTab
->
nCﬁ
; iCol++) {

183 if–
	`sqlôe3SåICmp
(
pTab
->
aCﬁ
[
iCﬁ
].
zName
, 
zCﬁumn
)==0 ){

187 if–
iCﬁ
==
pTab
->
nCﬁ
 ){

188 
	`sqlôe3DbFªe
(
db
, 
zEº
);

189 
zEº
 = 
	`sqlôe3MPrötf
(
db
, "nÿsuch cﬁumn: \"%s\"", 
zCﬁumn
);

190 
rc
 = 
SQLITE_ERROR
;

191 
	`sqlôe3BåìLóveAŒ
(
db
);

192 
blob_›í_out
;

199 if–
Êags
 ){

200 c⁄° *
zFau…
 = 0;

201 
Index
 *
pIdx
;

202 #i‚de‡
SQLITE_OMIT_FOREIGN_KEY


203 if–
db
->
Êags
&
SQLITE_F‹eignKeys
 ){

208 
FKey
 *
pFKey
;

209 
pFKey
=
pTab
->pFKey;ÖFKey;ÖFKeyıFKey->
pNextFrom
){

210 
j
;

211 
j
=0; j<
pFKey
->
nCﬁ
; j++){

212 if–
pFKey
->
aCﬁ
[
j
].
iFrom
==
iCﬁ
 ){

213 
zFau…
 = "foreign key";

219 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

220 
j
;

221 
j
=0; j<
pIdx
->
nKeyCﬁ
; j++){

223 if–
pIdx
->
aiCﬁumn
[
j
]==
iCﬁ
 ||ÖIdx->aiCﬁumn[j]==
XN_EXPR
 ){

224 
zFau…
 = "indexed";

228 if–
zFau…
 ){

229 
	`sqlôe3DbFªe
(
db
, 
zEº
);

230 
zEº
 = 
	`sqlôe3MPrötf
(
db
, "ˇ¬Ÿ o≥¿%†cﬁum¿f‹ wrôög", 
zFau…
);

231 
rc
 = 
SQLITE_ERROR
;

232 
	`sqlôe3BåìLóveAŒ
(
db
);

233 
blob_›í_out
;

237 
pBlob
->
pStmt
 = (
sqlôe3_°mt
 *)
	`sqlôe3VdbeCª©e
(
pP¨£
);

238 
	`as£π
–
pBlob
->
pStmt
 || 
db
->
mÆlocFaûed
 );

239 if–
pBlob
->
pStmt
 ){

256 c⁄° 
iLn
 = 
	`VDBE_OFFSET_LINENO
(2);

257 c⁄° 
VdbeOpLi°
 
›íBlob
[] = {

258 {
OP_TabÀLock
, 0, 0, 0},

259 {
OP_O≥nRód
, 0, 0, 0},

260 {
OP_V¨übÀ
, 1, 1, 0},

261 {
OP_NŸExi°s
, 0, 7, 1},

262 {
OP_Cﬁumn
, 0, 0, 1},

263 {
OP_Resu…Row
, 1, 0, 0},

264 {
OP_GŸo
, 0, 2, 0},

265 {
OP_Clo£
, 0, 0, 0},

266 {
OP_HÆt
, 0, 0, 0},

268 
Vdbe
 *
v
 = (Vdbê*)
pBlob
->
pStmt
;

269 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pTab
->
pSchema
);

270 
VdbeOp
 *
aOp
;

272 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_Tønß˘i⁄
, 
iDb
, 
Êags
,

273 
pTab
->
pSchema
->
schema_cookõ
,

274 
pTab
->
pSchema
->
iGíî©i⁄
);

275 
	`sqlôe3VdbeCh™geP5
(
v
, 1);

276 
aOp
 = 
	`sqlôe3VdbeAddOpLi°
(
v
, 
	`AºaySize
(
›íBlob
), o≥nBlob, 
iLn
);

279 
	`sqlôe3VdbeU£sBåì
(
v
, 
iDb
);

281 if–
db
->
mÆlocFaûed
==0 ){

282 
	`as£π
–
aOp
!=0 );

284 #ifde‡
SQLITE_OMIT_SHARED_CACHE


285 
aOp
[0].
›code
 = 
OP_No›
;

287 
aOp
[0].
p1
 = 
iDb
;

288 
aOp
[0].
p2
 = 
pTab
->
äum
;

289 
aOp
[0].
p3
 = 
Êags
;

290 
	`sqlôe3VdbeCh™geP4
(
v
, 1, 
pTab
->
zName
, 
P4_TRANSIENT
);

292 if–
db
->
mÆlocFaûed
==0 ){

297 if–
Êags
 ) 
aOp
[1].
›code
 = 
OP_O≥nWrôe
;

298 
aOp
[1].
p2
 = 
pTab
->
äum
;

299 
aOp
[1].
p3
 = 
iDb
;

308 
aOp
[1].
p4ty≥
 = 
P4_INT32
;

309 
aOp
[1].
p4
.
i
 = 
pTab
->
nCﬁ
+1;

310 
aOp
[4].
p2
 = 
pTab
->
nCﬁ
;

312 
pP¨£
->
nV¨
 = 1;

313 
pP¨£
->
nMem
 = 1;

314 
pP¨£
->
nTab
 = 1;

315 
	`sqlôe3VdbeMakeRódy
(
v
, 
pP¨£
);

319 
pBlob
->
Êags
 = flags;

320 
pBlob
->
iCﬁ
 = iCol;

321 
pBlob
->
db
 = db;

322 
	`sqlôe3BåìLóveAŒ
(
db
);

323 if–
db
->
mÆlocFaûed
 ){

324 
blob_›í_out
;

326 
	`sqlôe3_böd_öt64
(
pBlob
->
pStmt
, 1, 
iRow
);

327 
rc
 = 
	`blobSìkToRow
(
pBlob
, 
iRow
, &
zEº
);

328 }  (++
nAâem±
)<
SQLITE_MAX_SCHEMA_RETRY
 && 
rc
==
SQLITE_SCHEMA
 );

330 
blob_›í_out
:

331 if–
rc
==
SQLITE_OK
 && 
db
->
mÆlocFaûed
==0 ){

332 *
µBlob
 = (
sqlôe3_blob
 *)
pBlob
;

334 if–
pBlob
 &&ÖBlob->
pStmt
 ) 
	`sqlôe3VdbeFöÆize
((
Vdbe
 *)pBlob->pStmt);

335 
	`sqlôe3DbFªe
(
db
, 
pBlob
);

337 
	`sqlôe3Eº‹WôhMsg
(
db
, 
rc
, (
zEº
 ? "%s" : 0), zErr);

338 
	`sqlôe3DbFªe
(
db
, 
zEº
);

339 
	`sqlôe3P¨£rRe£t
(
pP¨£
);

340 
	`sqlôe3SèckFªe
(
db
, 
pP¨£
);

341 
rc
 = 
	`sqlôe3ApiExô
(
db
,Ñc);

342 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

343  
rc
;

344 
	}
}

350 
	$sqlôe3_blob_˛o£
(
sqlôe3_blob
 *
pBlob
){

351 
In¸blob
 *
p
 = (In¸blob *)
pBlob
;

352 
rc
;

353 
sqlôe3
 *
db
;

355 if–
p
 ){

356 
db
 = 
p
->db;

357 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

358 
rc
 = 
	`sqlôe3_föÆize
(
p
->
pStmt
);

359 
	`sqlôe3DbFªe
(
db
, 
p
);

360 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

362 
rc
 = 
SQLITE_OK
;

364  
rc
;

365 
	}
}

370 
blobRódWrôe
(

371 
sqlôe3_blob
 *
pBlob
,

372 *
z
,

373 
n
,

374 
iOff£t
,

375 (*
xCÆl
)(
BtCurs‹
*, 
u32
, u32, *)

377 
rc
;

378 
In¸blob
 *
p
 = (In¸blob *)
pBlob
;

379 
Vdbe
 *
v
;

380 
sqlôe3
 *
db
;

382 if–
p
==0 )  
SQLITE_MISUSE_BKPT
;

383 
db
 = 
p
->db;

384 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

385 
v
 = (
Vdbe
*)
p
->
pStmt
;

387 if–
n
<0 || 
iOff£t
<0 || ((
sqlôe3_öt64
)iOff£t+n)>
p
->
nByã
 ){

389 
rc
 = 
SQLITE_ERROR
;

390 }if–
v
==0 ){

394 
rc
 = 
SQLITE_ABORT
;

399 
	`as£π
–
db
 =
v
->db );

400 
	`sqlôe3BåìE¡îCurs‹
(
p
->
pC§
);

402 #ifde‡
SQLITE_ENABLE_PREUPDATE_HOOK


403 if–
xCÆl
==
sqlôe3BåìPutD©a
 && 
db
->
xPªUpd©eCÆlback
 ){

417 
sqlôe3_öt64
 
iKey
;

418 
	`sqlôe3BåìKeySize
(
p
->
pC§
, &
iKey
);

419 
	`sqlôe3VdbePªUpd©eHook
(

420 
v
, v->
≠C§
[0], 
SQLITE_DELETE
, 
p
->
zDb
,Ö->
pTab
, 
iKey
, -1

425 
rc
 = 
	`xCÆl
(
p
->
pC§
, 
iOff£t
+p->iOff£t, 
n
, 
z
);

426 
	`sqlôe3BåìLóveCurs‹
(
p
->
pC§
);

427 if–
rc
==
SQLITE_ABORT
 ){

428 
	`sqlôe3VdbeFöÆize
(
v
);

429 
p
->
pStmt
 = 0;

431 
v
->
rc
 =Ñc;

434 
	`sqlôe3Eº‹
(
db
, 
rc
);

435 
rc
 = 
	`sqlôe3ApiExô
(
db
,Ñc);

436 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

437  
rc
;

438 
	}
}

443 
	$sqlôe3_blob_ªad
(
sqlôe3_blob
 *
pBlob
, *
z
, 
n
, 
iOff£t
){

444  
	`blobRódWrôe
(
pBlob
, 
z
, 
n
, 
iOff£t
, 
sqlôe3BåìD©a
);

445 
	}
}

450 
	$sqlôe3_blob_wrôe
(
sqlôe3_blob
 *
pBlob
, c⁄° *
z
, 
n
, 
iOff£t
){

451  
	`blobRódWrôe
(
pBlob
, (*)
z
, 
n
, 
iOff£t
, 
sqlôe3BåìPutD©a
);

452 
	}
}

460 
	$sqlôe3_blob_byãs
(
sqlôe3_blob
 *
pBlob
){

461 
In¸blob
 *
p
 = (In¸blob *)
pBlob
;

462  (
p
 &&Ö->
pStmt
Ë?Ö->
nByã
 : 0;

463 
	}
}

475 
	$sqlôe3_blob_ª›í
(
sqlôe3_blob
 *
pBlob
, 
sqlôe3_öt64
 
iRow
){

476 
rc
;

477 
In¸blob
 *
p
 = (In¸blob *)
pBlob
;

478 
sqlôe3
 *
db
;

480 if–
p
==0 )  
SQLITE_MISUSE_BKPT
;

481 
db
 = 
p
->db;

482 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

484 if–
p
->
pStmt
==0 ){

488 
rc
 = 
SQLITE_ABORT
;

490 *
zEº
;

491 
rc
 = 
	`blobSìkToRow
(
p
, 
iRow
, &
zEº
);

492 if–
rc
!=
SQLITE_OK
 ){

493 
	`sqlôe3Eº‹WôhMsg
(
db
, 
rc
, (
zEº
 ? "%s" : 0), zErr);

494 
	`sqlôe3DbFªe
(
db
, 
zEº
);

496 
	`as£π
–
rc
!=
SQLITE_SCHEMA
 );

499 
rc
 = 
	`sqlôe3ApiExô
(
db
,Ñc);

500 
	`as£π
–
rc
==
SQLITE_OK
 || 
p
->
pStmt
==0 );

501 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

502  
rc
;

503 
	}
}

	@vdbemem.c

18 
	~"sqlôeI¡.h
"

19 
	~"vdbeI¡.h
"

21 #ifde‡
SQLITE_DEBUG


28 
	$sqlôe3VdbeCheckMemInv¨ü¡s
(
Mem
 *
p
){

32 
	`as£π
–(
p
->
Êags
 & 
MEM_Dyn
)==0 ||Ö->
xDñ
!=0 );

38 
	`as£π
–(
p
->
Êags
 & 
MEM_Dyn
)==0 ||Ö->
szMÆloc
==0 );

41 
	`as£π
–(
p
->
Êags
 & (
MEM_I¡
|
MEM_Ról
))!=(MEM_Int|MEM_Real) );

44 
	`as£π
–
p
->
szMÆloc
==0

45 || 
p
->
szMÆloc
==
	`sqlôe3DbMÆlocSize
’->
db
,p->
zMÆloc
) );

55 if–(
p
->
Êags
 & (
MEM_Så
|
MEM_Blob
)Ë&&Ö->
n
>0 ){

56 
	`as£π
(

57 ((
p
->
szMÆloc
>0 &&Ö->
z
=ı->
zMÆloc
)? 1 : 0) +

58 ((
p
->
Êags
&
MEM_Dyn
)!=0 ? 1 : 0) +

59 ((
p
->
Êags
&
MEM_Ephem
)!=0 ? 1 : 0) +

60 ((
p
->
Êags
&
MEM_Sètic
)!=0 ? 1 : 0) == 1

64 
	}
}

81 
	$sqlôe3VdbeCh™geEncodög
(
Mem
 *
pMem
, 
desúedEnc
){

82 #i‚de‡
SQLITE_OMIT_UTF16


83 
rc
;

85 
	`as£π
–(
pMem
->
Êags
&
MEM_RowSë
)==0 );

86 
	`as£π
–
desúedEnc
==
SQLITE_UTF8
 || desúedEnc==
SQLITE_UTF16LE


87 || 
desúedEnc
==
SQLITE_UTF16BE
 );

88 if–!(
pMem
->
Êags
&
MEM_Så
Ë||ÖMem->
íc
==
desúedEnc
 ){

89  
SQLITE_OK
;

91 
	`as£π
–
pMem
->
db
==0 || 
	`sqlôe3_muãx_hñd
’Mem->db->
muãx
) );

92 #ifde‡
SQLITE_OMIT_UTF16


93  
SQLITE_ERROR
;

99 
rc
 = 
	`sqlôe3VdbeMemTøn¶©e
(
pMem
, (
u8
)
desúedEnc
);

100 
	`as£π
(
rc
==
SQLITE_OK
 ||Ñc==
SQLITE_NOMEM
);

101 
	`as£π
(
rc
==
SQLITE_OK
 || 
pMem
->
íc
!=
desúedEnc
);

102 
	`as£π
(
rc
==
SQLITE_NOMEM
 || 
pMem
->
íc
==
desúedEnc
);

103  
rc
;

105 
	}
}

116 
SQLITE_NOINLINE
 
	$sqlôe3VdbeMemGrow
(
Mem
 *
pMem
, 
n
, 
bPª£rve
){

117 
	`as£π
–
	`sqlôe3VdbeCheckMemInv¨ü¡s
(
pMem
) );

118 
	`as£π
–(
pMem
->
Êags
&
MEM_RowSë
)==0 );

119 
	`ã°ˇ£
–
pMem
->
db
==0 );

123 
	`as£π
–
bPª£rve
==0 || 
pMem
->
Êags
&(
MEM_Blob
|
MEM_Så
) );

124 
	`ã°ˇ£
–
bPª£rve
 && 
pMem
->
z
==0 );

126 
	`as£π
–
pMem
->
szMÆloc
==0

127 || 
pMem
->
szMÆloc
==
	`sqlôe3DbMÆlocSize
’Mem->
db
,ÖMem->
zMÆloc
) );

128 if–
pMem
->
szMÆloc
<
n
 ){

129 if–
n
<32 )Ç = 32;

130 if–
bPª£rve
 && 
pMem
->
szMÆloc
>0 &&ÖMem->
z
=ıMem->
zMÆloc
 ){

131 
pMem
->
z
 =ÖMem->
zMÆloc
 = 
	`sqlôe3DbRóŒocOrFªe
’Mem->
db
,ÖMem->z, 
n
);

132 
bPª£rve
 = 0;

134 if–
pMem
->
szMÆloc
>0 ) 
	`sqlôe3DbFªe
’Mem->
db
,ÖMem->
zMÆloc
);

135 
pMem
->
zMÆloc
 = 
	`sqlôe3DbMÆlocRaw
’Mem->
db
, 
n
);

137 if–
pMem
->
zMÆloc
==0 ){

138 
	`sqlôe3VdbeMemSëNuŒ
(
pMem
);

139 
pMem
->
z
 = 0;

140 
pMem
->
szMÆloc
 = 0;

141  
SQLITE_NOMEM_BKPT
;

143 
pMem
->
szMÆloc
 = 
	`sqlôe3DbMÆlocSize
’Mem->
db
,ÖMem->
zMÆloc
);

147 if–
bPª£rve
 && 
pMem
->
z
 &&ÖMem->z!ıMem->
zMÆloc
 ){

148 
	`mem˝y
(
pMem
->
zMÆloc
,ÖMem->
z
,ÖMem->
n
);

150 if–(
pMem
->
Êags
&
MEM_Dyn
)!=0 ){

151 
	`as£π
–
pMem
->
xDñ
!=0 &&ÖMem->xDñ!=
SQLITE_DYNAMIC
 );

152 
pMem
->
	`xDñ
((*)’Mem->
z
));

155 
pMem
->
z
 =ÖMem->
zMÆloc
;

156 
pMem
->
Êags
 &~(
MEM_Dyn
|
MEM_Ephem
|
MEM_Sètic
);

157  
SQLITE_OK
;

158 
	}
}

173 
	$sqlôe3VdbeMemCÀ¨AndResize
(
Mem
 *
pMem
, 
szNew
){

174 
	`as£π
–
szNew
>0 );

175 
	`as£π
–(
pMem
->
Êags
 & 
MEM_Dyn
)==0 ||ÖMem->
szMÆloc
==0 );

176 if–
pMem
->
szMÆloc
<
szNew
 ){

177  
	`sqlôe3VdbeMemGrow
(
pMem
, 
szNew
, 0);

179 
	`as£π
–(
pMem
->
Êags
 & 
MEM_Dyn
)==0 );

180 
pMem
->
z
 =ÖMem->
zMÆloc
;

181 
pMem
->
Êags
 &(
MEM_NuŒ
|
MEM_I¡
|
MEM_Ról
);

182  
SQLITE_OK
;

183 
	}
}

191 
	$sqlôe3VdbeMemMakeWrôóbÀ
(
Mem
 *
pMem
){

192 
f
;

193 
	`as£π
–
pMem
->
db
==0 || 
	`sqlôe3_muãx_hñd
’Mem->db->
muãx
) );

194 
	`as£π
–(
pMem
->
Êags
&
MEM_RowSë
)==0 );

195 
	`Ex∑ndBlob
(
pMem
);

196 
f
 = 
pMem
->
Êags
;

197 if–(
f
&(
MEM_Så
|
MEM_Blob
)Ë&& (
pMem
->
szMÆloc
==0 ||ÖMem->
z
!ıMem->
zMÆloc
) ){

198 if–
	`sqlôe3VdbeMemGrow
(
pMem
,ÖMem->
n
 + 2, 1) ){

199  
SQLITE_NOMEM_BKPT
;

201 
pMem
->
z
[pMem->
n
] = 0;

202 
pMem
->
z
[pMem->
n
+1] = 0;

203 
pMem
->
Êags
 |
MEM_Tîm
;

205 
pMem
->
Êags
 &~
MEM_Ephem
;

206 #ifde‡
SQLITE_DEBUG


207 
pMem
->
pSc›yFrom
 = 0;

210  
SQLITE_OK
;

211 
	}
}

217 #i‚de‡
SQLITE_OMIT_INCRBLOB


218 
	$sqlôe3VdbeMemEx∑ndBlob
(
Mem
 *
pMem
){

219 if–
pMem
->
Êags
 & 
MEM_Zîo
 ){

220 
nByã
;

221 
	`as£π
–
pMem
->
Êags
&
MEM_Blob
 );

222 
	`as£π
–(
pMem
->
Êags
&
MEM_RowSë
)==0 );

223 
	`as£π
–
pMem
->
db
==0 || 
	`sqlôe3_muãx_hñd
’Mem->db->
muãx
) );

226 
nByã
 = 
pMem
->
n
 +ÖMem->
u
.
nZîo
;

227 if–
nByã
<=0 ){

228 
nByã
 = 1;

230 if–
	`sqlôe3VdbeMemGrow
(
pMem
, 
nByã
, 1) ){

231  
SQLITE_NOMEM_BKPT
;

234 
	`mem£t
(&
pMem
->
z
[pMem->
n
], 0,ÖMem->
u
.
nZîo
);

235 
pMem
->
n
 +pMem->
u
.
nZîo
;

236 
pMem
->
Êags
 &~(
MEM_Zîo
|
MEM_Tîm
);

238  
SQLITE_OK
;

239 
	}
}

246 
SQLITE_NOINLINE
 
	$vdbeMemAddTîmö©‹
(
Mem
 *
pMem
){

247 if–
	`sqlôe3VdbeMemGrow
(
pMem
,ÖMem->
n
+2, 1) ){

248  
SQLITE_NOMEM_BKPT
;

250 
pMem
->
z
[pMem->
n
] = 0;

251 
pMem
->
z
[pMem->
n
+1] = 0;

252 
pMem
->
Êags
 |
MEM_Tîm
;

253  
SQLITE_OK
;

254 
	}
}

259 
	$sqlôe3VdbeMemNulTîmö©e
(
Mem
 *
pMem
){

260 
	`as£π
–
pMem
->
db
==0 || 
	`sqlôe3_muãx_hñd
’Mem->db->
muãx
) );

261 
	`ã°ˇ£
–(
pMem
->
Êags
 & (
MEM_Tîm
|
MEM_Så
))==(MEM_Term|MEM_Str) );

262 
	`ã°ˇ£
–(
pMem
->
Êags
 & (
MEM_Tîm
|
MEM_Så
))==0 );

263 if–(
pMem
->
Êags
 & (
MEM_Tîm
|
MEM_Så
))!=MEM_Str ){

264  
SQLITE_OK
;

266  
	`vdbeMemAddTîmö©‹
(
pMem
);

268 
	}
}

284 
	$sqlôe3VdbeMemSåögify
(
Mem
 *
pMem
, 
u8
 
íc
, u8 
bF‹˚
){

285 
fg
 = 
pMem
->
Êags
;

286 c⁄° 
nByã
 = 32;

288 
	`as£π
–
pMem
->
db
==0 || 
	`sqlôe3_muãx_hñd
’Mem->db->
muãx
) );

289 
	`as£π
–!(
fg
&
MEM_Zîo
) );

290 
	`as£π
–!(
fg
&(
MEM_Så
|
MEM_Blob
)) );

291 
	`as£π
–
fg
&(
MEM_I¡
|
MEM_Ról
) );

292 
	`as£π
–(
pMem
->
Êags
&
MEM_RowSë
)==0 );

293 
	`as£π
–
	`EIGHT_BYTE_ALIGNMENT
(
pMem
) );

296 if–
	`sqlôe3VdbeMemCÀ¨AndResize
(
pMem
, 
nByã
) ){

297  
SQLITE_NOMEM_BKPT
;

306 if–
fg
 & 
MEM_I¡
 ){

307 
	`sqlôe3_¢¥ötf
(
nByã
, 
pMem
->
z
, "%Œd",ÖMem->
u
.
i
);

309 
	`as£π
–
fg
 & 
MEM_Ról
 );

310 
	`sqlôe3_¢¥ötf
(
nByã
, 
pMem
->
z
, "%!.15g",ÖMem->
u
.
r
);

312 
pMem
->
n
 = 
	`sqlôe3SåÀn30
’Mem->
z
);

313 
pMem
->
íc
 = 
SQLITE_UTF8
;

314 
pMem
->
Êags
 |
MEM_Så
|
MEM_Tîm
;

315 if–
bF‹˚
 ) 
pMem
->
Êags
 &~(
MEM_I¡
|
MEM_Ról
);

316 
	`sqlôe3VdbeCh™geEncodög
(
pMem
, 
íc
);

317  
SQLITE_OK
;

318 
	}
}

328 
	$sqlôe3VdbeMemFöÆize
(
Mem
 *
pMem
, 
FuncDef
 *
pFunc
){

329 
rc
 = 
SQLITE_OK
;

330 if–
	`ALWAYS
(
pFunc
 &&ÖFunc->
xFöÆize
) ){

331 
sqlôe3_c⁄ãxt
 
˘x
;

332 
Mem
 
t
;

333 
	`as£π
–(
pMem
->
Êags
 & 
MEM_NuŒ
)!=0 || 
pFunc
=ıMem->
u
.
pDef
 );

334 
	`as£π
–
pMem
->
db
==0 || 
	`sqlôe3_muãx_hñd
’Mem->db->
muãx
) );

335 
	`mem£t
(&
˘x
, 0, (ctx));

336 
	`mem£t
(&
t
, 0, (t));

337 
t
.
Êags
 = 
MEM_NuŒ
;

338 
t
.
db
 = 
pMem
->db;

339 
˘x
.
pOut
 = &
t
;

340 
˘x
.
pMem
 =ÖMem;

341 
˘x
.
pFunc
 =ÖFunc;

342 
pFunc
->
	`xFöÆize
(&
˘x
);

343 
	`as£π
–(
pMem
->
Êags
 & 
MEM_Dyn
)==0 );

344 if–
pMem
->
szMÆloc
>0 ) 
	`sqlôe3DbFªe
’Mem->
db
,ÖMem->
zMÆloc
);

345 
	`mem˝y
(
pMem
, &
t
, (t));

346 
rc
 = 
˘x
.
isEº‹
;

348  
rc
;

349 
	}
}

360 
SQLITE_NOINLINE
 
	$vdbeMemCÀ¨Exã∫AndSëNuŒ
(
Mem
 *
p
){

361 
	`as£π
–
p
->
db
==0 || 
	`sqlôe3_muãx_hñd
’->db->
muãx
) );

362 
	`as£π
–
	`VdbeMemDy«mic
(
p
) );

363 if–
p
->
Êags
&
MEM_Agg
 ){

364 
	`sqlôe3VdbeMemFöÆize
(
p
,Ö->
u
.
pDef
);

365 
	`as£π
–(
p
->
Êags
 & 
MEM_Agg
)==0 );

366 
	`ã°ˇ£
–
p
->
Êags
 & 
MEM_Dyn
 );

368 if–
p
->
Êags
&
MEM_Dyn
 ){

369 
	`as£π
–(
p
->
Êags
&
MEM_RowSë
)==0 );

370 
	`as£π
–
p
->
xDñ
!=
SQLITE_DYNAMIC
 &&Ö->xDel!=0 );

371 
p
->
	`xDñ
((*Ì->
z
);

372 }if–
p
->
Êags
&
MEM_RowSë
 ){

373 
	`sqlôe3RowSëCÀ¨
(
p
->
u
.
pRowSë
);

374 }if–
p
->
Êags
&
MEM_Føme
 ){

375 
VdbeFøme
 *
pFøme
 = 
p
->
u
.pFrame;

376 
pFøme
->
pP¨ít
 =ÖFøme->
v
->
pDñFøme
;

377 
pFøme
->
v
->
pDñFøme
 =ÖFrame;

379 
p
->
Êags
 = 
MEM_NuŒ
;

380 
	}
}

390 
SQLITE_NOINLINE
 
	$vdbeMemCÀ¨
(
Mem
 *
p
){

391 if–
	`VdbeMemDy«mic
(
p
) ){

392 
	`vdbeMemCÀ¨Exã∫AndSëNuŒ
(
p
);

394 if–
p
->
szMÆloc
 ){

395 
	`sqlôe3DbFªe
(
p
->
db
,Ö->
zMÆloc
);

396 
p
->
szMÆloc
 = 0;

398 
p
->
z
 = 0;

399 
	}
}

411 
	$sqlôe3VdbeMemRñó£
(
Mem
 *
p
){

412 
	`as£π
–
	`sqlôe3VdbeCheckMemInv¨ü¡s
(
p
) );

413 if–
	`VdbeMemDy«mic
(
p
Ë||Ö->
szMÆloc
 ){

414 
	`vdbeMemCÀ¨
(
p
);

416 
	}
}

423 
i64
 
	$doubÀToI¡64
(
r
){

424 #ifde‡
SQLITE_OMIT_FLOATING_POINT


426  
r
;

435 c⁄° 
i64
 
maxI¡
 = 
LARGEST_INT64
;

436 c⁄° 
i64
 
möI¡
 = 
SMALLEST_INT64
;

438 if–
r
<=()
möI¡
 ){

439  
möI¡
;

440 }if–
r
>=()
maxI¡
 ){

441  
maxI¡
;

443  (
i64
)
r
;

446 
	}
}

459 
i64
 
	$sqlôe3VdbeI¡VÆue
(
Mem
 *
pMem
){

460 
Êags
;

461 
	`as£π
–
pMem
->
db
==0 || 
	`sqlôe3_muãx_hñd
’Mem->db->
muãx
) );

462 
	`as£π
–
	`EIGHT_BYTE_ALIGNMENT
(
pMem
) );

463 
Êags
 = 
pMem
->flags;

464 if–
Êags
 & 
MEM_I¡
 ){

465  
pMem
->
u
.
i
;

466 }if–
Êags
 & 
MEM_Ról
 ){

467  
	`doubÀToI¡64
(
pMem
->
u
.
r
);

468 }if–
Êags
 & (
MEM_Så
|
MEM_Blob
) ){

469 
i64
 
vÆue
 = 0;

470 
	`as£π
–
pMem
->
z
 ||ÖMem->
n
==0 );

471 
	`sqlôe3Atoi64
(
pMem
->
z
, &
vÆue
,ÖMem->
n
,ÖMem->
íc
);

472  
vÆue
;

476 
	}
}

484 
	$sqlôe3VdbeRólVÆue
(
Mem
 *
pMem
){

485 
	`as£π
–
pMem
->
db
==0 || 
	`sqlôe3_muãx_hñd
’Mem->db->
muãx
) );

486 
	`as£π
–
	`EIGHT_BYTE_ALIGNMENT
(
pMem
) );

487 if–
pMem
->
Êags
 & 
MEM_Ról
 ){

488  
pMem
->
u
.
r
;

489 }if–
pMem
->
Êags
 & 
MEM_I¡
 ){

490  ()
pMem
->
u
.
i
;

491 }if–
pMem
->
Êags
 & (
MEM_Så
|
MEM_Blob
) ){

493 
vÆ
 = ()0;

494 
	`sqlôe3AtoF
(
pMem
->
z
, &
vÆ
,ÖMem->
n
,ÖMem->
íc
);

495  
vÆ
;

500 
	}
}

506 
	$sqlôe3VdbeI¡egîAfföôy
(
Mem
 *
pMem
){

507 
i64
 
ix
;

508 
	`as£π
–
pMem
->
Êags
 & 
MEM_Ról
 );

509 
	`as£π
–(
pMem
->
Êags
 & 
MEM_RowSë
)==0 );

510 
	`as£π
–
pMem
->
db
==0 || 
	`sqlôe3_muãx_hñd
’Mem->db->
muãx
) );

511 
	`as£π
–
	`EIGHT_BYTE_ALIGNMENT
(
pMem
) );

513 
ix
 = 
	`doubÀToI¡64
(
pMem
->
u
.
r
);

525 if–
pMem
->
u
.
r
==
ix
 && ix>
SMALLEST_INT64
 && ix<
LARGEST_INT64
 ){

526 
pMem
->
u
.
i
 = 
ix
;

527 
	`MemSëTy≥Fœg
(
pMem
, 
MEM_I¡
);

529 
	}
}

534 
	$sqlôe3VdbeMemI¡egîify
(
Mem
 *
pMem
){

535 
	`as£π
–
pMem
->
db
==0 || 
	`sqlôe3_muãx_hñd
’Mem->db->
muãx
) );

536 
	`as£π
–(
pMem
->
Êags
 & 
MEM_RowSë
)==0 );

537 
	`as£π
–
	`EIGHT_BYTE_ALIGNMENT
(
pMem
) );

539 
pMem
->
u
.
i
 = 
	`sqlôe3VdbeI¡VÆue
(pMem);

540 
	`MemSëTy≥Fœg
(
pMem
, 
MEM_I¡
);

541  
SQLITE_OK
;

542 
	}
}

548 
	$sqlôe3VdbeMemRólify
(
Mem
 *
pMem
){

549 
	`as£π
–
pMem
->
db
==0 || 
	`sqlôe3_muãx_hñd
’Mem->db->
muãx
) );

550 
	`as£π
–
	`EIGHT_BYTE_ALIGNMENT
(
pMem
) );

552 
pMem
->
u
.
r
 = 
	`sqlôe3VdbeRólVÆue
(pMem);

553 
	`MemSëTy≥Fœg
(
pMem
, 
MEM_Ról
);

554  
SQLITE_OK
;

555 
	}
}

565 
	$sqlôe3VdbeMemNumîify
(
Mem
 *
pMem
){

566 if–(
pMem
->
Êags
 & (
MEM_I¡
|
MEM_Ról
|
MEM_NuŒ
))==0 ){

567 
	`as£π
–(
pMem
->
Êags
 & (
MEM_Blob
|
MEM_Så
))!=0 );

568 
	`as£π
–
pMem
->
db
==0 || 
	`sqlôe3_muãx_hñd
’Mem->db->
muãx
) );

569 if–0==
	`sqlôe3Atoi64
(
pMem
->
z
, &pMem->
u
.
i
,ÖMem->
n
,ÖMem->
íc
) ){

570 
	`MemSëTy≥Fœg
(
pMem
, 
MEM_I¡
);

572 
pMem
->
u
.
r
 = 
	`sqlôe3VdbeRólVÆue
(pMem);

573 
	`MemSëTy≥Fœg
(
pMem
, 
MEM_Ról
);

574 
	`sqlôe3VdbeI¡egîAfföôy
(
pMem
);

577 
	`as£π
–(
pMem
->
Êags
 & (
MEM_I¡
|
MEM_Ról
|
MEM_NuŒ
))!=0 );

578 
pMem
->
Êags
 &~(
MEM_Så
|
MEM_Blob
);

579  
SQLITE_OK
;

580 
	}
}

589 
	$sqlôe3VdbeMemCa°
(
Mem
 *
pMem
, 
u8
 
aff
, u8 
ícodög
){

590 if–
pMem
->
Êags
 & 
MEM_NuŒ
 ) ;

591  
aff
 ){

592 
SQLITE_AFF_BLOB
: {

593 if–(
pMem
->
Êags
 & 
MEM_Blob
)==0 ){

594 
	`sqlôe3VÆueAµlyAfföôy
(
pMem
, 
SQLITE_AFF_TEXT
, 
ícodög
);

595 
	`as£π
–
pMem
->
Êags
 & 
MEM_Så
 ||ÖMem->
db
->
mÆlocFaûed
 );

596 
	`MemSëTy≥Fœg
(
pMem
, 
MEM_Blob
);

598 
pMem
->
Êags
 &~(
MEM_Ty≥Mask
&~
MEM_Blob
);

602 
SQLITE_AFF_NUMERIC
: {

603 
	`sqlôe3VdbeMemNumîify
(
pMem
);

606 
SQLITE_AFF_INTEGER
: {

607 
	`sqlôe3VdbeMemI¡egîify
(
pMem
);

610 
SQLITE_AFF_REAL
: {

611 
	`sqlôe3VdbeMemRólify
(
pMem
);

615 
	`as£π
–
aff
==
SQLITE_AFF_TEXT
 );

616 
	`as£π
–
MEM_Så
==(
MEM_Blob
>>3) );

617 
pMem
->
Êags
 |’Mem->Êags&
MEM_Blob
)>>3;

618 
	`sqlôe3VÆueAµlyAfföôy
(
pMem
, 
SQLITE_AFF_TEXT
, 
ícodög
);

619 
	`as£π
–
pMem
->
Êags
 & 
MEM_Så
 ||ÖMem->
db
->
mÆlocFaûed
 );

620 
pMem
->
Êags
 &~(
MEM_I¡
|
MEM_Ról
|
MEM_Blob
|
MEM_Zîo
);

624 
	}
}

631 
	$sqlôe3VdbeMemInô
(
Mem
 *
pMem
, 
sqlôe3
 *
db
, 
u16
 
Êags
){

632 
	`as£π
–(
Êags
 & ~
MEM_Ty≥Mask
)==0 );

633 
pMem
->
Êags
 = flags;

634 
pMem
->
db
 = db;

635 
pMem
->
szMÆloc
 = 0;

636 
	}
}

651 
	$sqlôe3VdbeMemSëNuŒ
(
Mem
 *
pMem
){

652 if–
	`VdbeMemDy«mic
(
pMem
) ){

653 
	`vdbeMemCÀ¨Exã∫AndSëNuŒ
(
pMem
);

655 
pMem
->
Êags
 = 
MEM_NuŒ
;

657 
	}
}

658 
	$sqlôe3VÆueSëNuŒ
(
sqlôe3_vÆue
 *
p
){

659 
	`sqlôe3VdbeMemSëNuŒ
((
Mem
*)
p
);

660 
	}
}

666 
	$sqlôe3VdbeMemSëZîoBlob
(
Mem
 *
pMem
, 
n
){

667 
	`sqlôe3VdbeMemRñó£
(
pMem
);

668 
pMem
->
Êags
 = 
MEM_Blob
|
MEM_Zîo
;

669 
pMem
->
n
 = 0;

670 if–
n
<0 )Ç = 0;

671 
pMem
->
u
.
nZîo
 = 
n
;

672 
pMem
->
íc
 = 
SQLITE_UTF8
;

673 
pMem
->
z
 = 0;

674 
	}
}

681 
SQLITE_NOINLINE
 
	$vdbeRñó£AndSëI¡64
(
Mem
 *
pMem
, 
i64
 
vÆ
){

682 
	`sqlôe3VdbeMemSëNuŒ
(
pMem
);

683 
pMem
->
u
.
i
 = 
vÆ
;

684 
pMem
->
Êags
 = 
MEM_I¡
;

685 
	}
}

691 
	$sqlôe3VdbeMemSëI¡64
(
Mem
 *
pMem
, 
i64
 
vÆ
){

692 if–
	`VdbeMemDy«mic
(
pMem
) ){

693 
	`vdbeRñó£AndSëI¡64
(
pMem
, 
vÆ
);

695 
pMem
->
u
.
i
 = 
vÆ
;

696 
pMem
->
Êags
 = 
MEM_I¡
;

698 
	}
}

700 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


705 
	$sqlôe3VdbeMemSëDoubÀ
(
Mem
 *
pMem
, 
vÆ
){

706 
	`sqlôe3VdbeMemSëNuŒ
(
pMem
);

707 if–!
	`sqlôe3IsNaN
(
vÆ
) ){

708 
pMem
->
u
.
r
 = 
vÆ
;

709 
pMem
->
Êags
 = 
MEM_Ról
;

711 
	}
}

718 
	$sqlôe3VdbeMemSëRowSë
(
Mem
 *
pMem
){

719 
sqlôe3
 *
db
 = 
pMem
->db;

720 
	`as£π
–
db
!=0 );

721 
	`as£π
–(
pMem
->
Êags
 & 
MEM_RowSë
)==0 );

722 
	`sqlôe3VdbeMemRñó£
(
pMem
);

723 
pMem
->
zMÆloc
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, 64);

724 if–
db
->
mÆlocFaûed
 ){

725 
pMem
->
Êags
 = 
MEM_NuŒ
;

726 
pMem
->
szMÆloc
 = 0;

728 
	`as£π
–
pMem
->
zMÆloc
 );

729 
pMem
->
szMÆloc
 = 
	`sqlôe3DbMÆlocSize
(
db
,ÖMem->
zMÆloc
);

730 
pMem
->
u
.
pRowSë
 = 
	`sqlôe3RowSëInô
(
db
,ÖMem->
zMÆloc
,ÖMem->
szMÆloc
);

731 
	`as£π
–
pMem
->
u
.
pRowSë
!=0 );

732 
pMem
->
Êags
 = 
MEM_RowSë
;

734 
	}
}

740 
	$sqlôe3VdbeMemTooBig
(
Mem
 *
p
){

741 
	`as£π
–
p
->
db
!=0 );

742 if–
p
->
Êags
 & (
MEM_Så
|
MEM_Blob
) ){

743 
n
 = 
p
->n;

744 if–
p
->
Êags
 & 
MEM_Zîo
 ){

745 
n
 +
p
->
u
.
nZîo
;

747  
n
>
p
->
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
];

750 
	}
}

752 #ifde‡
SQLITE_DEBUG


761 
	$sqlôe3VdbeMemAboutToCh™ge
(
Vdbe
 *
pVdbe
, 
Mem
 *
pMem
){

762 
i
;

763 
Mem
 *
pX
;

764 
i
=0, 
pX
=
pVdbe
->
aMem
; i<pVdbe->
nMem
; i++,ÖX++){

765 if–
pX
->
pSc›yFrom
==
pMem
 ){

766 
pX
->
Êags
 |
MEM_Undeföed
;

767 
pX
->
pSc›yFrom
 = 0;

770 
pMem
->
pSc›yFrom
 = 0;

771 
	}
}

781 
SQLITE_NOINLINE
 
	$vdbeCÃC›y
(
Mem
 *
pTo
, c⁄° Mem *
pFrom
, 
eTy≥
){

782 
	`vdbeMemCÀ¨Exã∫AndSëNuŒ
(
pTo
);

783 
	`as£π
–!
	`VdbeMemDy«mic
(
pTo
) );

784 
	`sqlôe3VdbeMemShÆlowC›y
(
pTo
, 
pFrom
, 
eTy≥
);

785 
	}
}

786 
	$sqlôe3VdbeMemShÆlowC›y
(
Mem
 *
pTo
, c⁄° Mem *
pFrom
, 
§cTy≥
){

787 
	`as£π
–(
pFrom
->
Êags
 & 
MEM_RowSë
)==0 );

788 
	`as£π
–
pTo
->
db
==
pFrom
->db );

789 if–
	`VdbeMemDy«mic
(
pTo
Ë){ 
	`vdbeCÃC›y
’To,
pFrom
,
§cTy≥
); ; }

790 
	`mem˝y
(
pTo
, 
pFrom
, 
MEMCELLSIZE
);

791 if–(
pFrom
->
Êags
&
MEM_Sètic
)==0 ){

792 
pTo
->
Êags
 &~(
MEM_Dyn
|
MEM_Sètic
|
MEM_Ephem
);

793 
	`as£π
–
§cTy≥
==
MEM_Ephem
 || srcTy≥==
MEM_Sètic
 );

794 
pTo
->
Êags
 |
§cTy≥
;

796 
	}
}

802 
	$sqlôe3VdbeMemC›y
(
Mem
 *
pTo
, c⁄° Mem *
pFrom
){

803 
rc
 = 
SQLITE_OK
;

805 
	`as£π
–(
pFrom
->
Êags
 & 
MEM_RowSë
)==0 );

806 if–
	`VdbeMemDy«mic
(
pTo
ËË
	`vdbeMemCÀ¨Exã∫AndSëNuŒ
(pTo);

807 
	`mem˝y
(
pTo
, 
pFrom
, 
MEMCELLSIZE
);

808 
pTo
->
Êags
 &~
MEM_Dyn
;

809 if–
pTo
->
Êags
&(
MEM_Så
|
MEM_Blob
) ){

810 if–0==(
pFrom
->
Êags
&
MEM_Sètic
) ){

811 
pTo
->
Êags
 |
MEM_Ephem
;

812 
rc
 = 
	`sqlôe3VdbeMemMakeWrôóbÀ
(
pTo
);

816  
rc
;

817 
	}
}

825 
	$sqlôe3VdbeMemMove
(
Mem
 *
pTo
, Mem *
pFrom
){

826 
	`as£π
–
pFrom
->
db
==0 || 
	`sqlôe3_muãx_hñd
’From->db->
muãx
) );

827 
	`as£π
–
pTo
->
db
==0 || 
	`sqlôe3_muãx_hñd
’To->db->
muãx
) );

828 
	`as£π
–
pFrom
->
db
==0 || 
pTo
->db==0 ||ÖFrom->db==pTo->db );

830 
	`sqlôe3VdbeMemRñó£
(
pTo
);

831 
	`mem˝y
(
pTo
, 
pFrom
, (
Mem
));

832 
pFrom
->
Êags
 = 
MEM_NuŒ
;

833 
pFrom
->
szMÆloc
 = 0;

834 
	}
}

851 
sqlôe3VdbeMemSëSå
(

852 
Mem
 *
pMem
,

853 c⁄° *
z
,

854 
n
,

855 
u8
 
íc
,

856 (*
xDñ
)(*)

858 
nByã
 = 
n
;

859 
iLimô
;

860 
u16
 
Êags
 = 0;

862 
	`as£π
–
pMem
->
db
==0 || 
	`sqlôe3_muãx_hñd
’Mem->db->
muãx
) );

863 
	`as£π
–(
pMem
->
Êags
 & 
MEM_RowSë
)==0 );

866 if–!
z
 ){

867 
	`sqlôe3VdbeMemSëNuŒ
(
pMem
);

868  
SQLITE_OK
;

871 if–
pMem
->
db
 ){

872 
iLimô
 = 
pMem
->
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
];

874 
iLimô
 = 
SQLITE_MAX_LENGTH
;

876 
Êags
 = (
íc
==0?
MEM_Blob
:
MEM_Så
);

877 if–
nByã
<0 ){

878 
	`as£π
–
íc
!=0 );

879 if–
íc
==
SQLITE_UTF8
 ){

880 
nByã
 = 
	`sqlôe3SåÀn30
(
z
);

881 if–
nByã
>
iLimô
 )ÇByte = iLimit+1;

883 
nByã
=0;ÇByã<=
iLimô
 && (
z
[nByte] | z[nByte+1]);ÇByte+=2){}

885 
Êags
 |
MEM_Tîm
;

892 if–
xDñ
==
SQLITE_TRANSIENT
 ){

893 
nAŒoc
 = 
nByã
;

894 if–
Êags
&
MEM_Tîm
 ){

895 
nAŒoc
 +(
íc
==
SQLITE_UTF8
?1:2);

897 if–
nByã
>
iLimô
 ){

898  
SQLITE_TOOBIG
;

900 
	`ã°ˇ£
–
nAŒoc
==0 );

901 
	`ã°ˇ£
–
nAŒoc
==31 );

902 
	`ã°ˇ£
–
nAŒoc
==32 );

903 if–
	`sqlôe3VdbeMemCÀ¨AndResize
(
pMem
, 
	`MAX
(
nAŒoc
,32)) ){

904  
SQLITE_NOMEM_BKPT
;

906 
	`mem˝y
(
pMem
->
z
, z, 
nAŒoc
);

907 }if–
xDñ
==
SQLITE_DYNAMIC
 ){

908 
	`sqlôe3VdbeMemRñó£
(
pMem
);

909 
pMem
->
zMÆloc
 =ÖMem->
z
 = (*)z;

910 
pMem
->
szMÆloc
 = 
	`sqlôe3DbMÆlocSize
’Mem->
db
,ÖMem->
zMÆloc
);

912 
	`sqlôe3VdbeMemRñó£
(
pMem
);

913 
pMem
->
z
 = (*)z;

914 
pMem
->
xDñ
 = xDel;

915 
Êags
 |((
xDñ
==
SQLITE_STATIC
)?
MEM_Sètic
:
MEM_Dyn
);

918 
pMem
->
n
 = 
nByã
;

919 
pMem
->
Êags
 = flags;

920 
pMem
->
íc
 = (íc==0 ? 
SQLITE_UTF8
 :Énc);

922 #i‚de‡
SQLITE_OMIT_UTF16


923 if–
pMem
->
íc
!=
SQLITE_UTF8
 && 
	`sqlôe3VdbeMemH™dÀBom
(pMem) ){

924  
SQLITE_NOMEM_BKPT
;

928 if–
nByã
>
iLimô
 ){

929  
SQLITE_TOOBIG
;

932  
SQLITE_OK
;

933 
	}
}

951 
SQLITE_NOINLINE
 
	$vdbeMemFromBåìResize
(

952 
BtCurs‹
 *
pCur
,

953 
u32
 
off£t
,

954 
u32
 
amt
,

955 
key
,

956 
Mem
 *
pMem


958 
rc
;

959 
pMem
->
Êags
 = 
MEM_NuŒ
;

960 if–
SQLITE_OK
==(
rc
 = 
	`sqlôe3VdbeMemCÀ¨AndResize
(
pMem
, 
amt
+2)) ){

961 if–
key
 ){

962 
rc
 = 
	`sqlôe3BåìKey
(
pCur
, 
off£t
, 
amt
, 
pMem
->
z
);

964 
rc
 = 
	`sqlôe3BåìD©a
(
pCur
, 
off£t
, 
amt
, 
pMem
->
z
);

966 if–
rc
==
SQLITE_OK
 ){

967 
pMem
->
z
[
amt
] = 0;

968 
pMem
->
z
[
amt
+1] = 0;

969 
pMem
->
Êags
 = 
MEM_Blob
|
MEM_Tîm
;

970 
pMem
->
n
 = ()
amt
;

972 
	`sqlôe3VdbeMemRñó£
(
pMem
);

975  
rc
;

976 
	}
}

977 
	$sqlôe3VdbeMemFromBåì
(

978 
BtCurs‹
 *
pCur
,

979 
u32
 
off£t
,

980 
u32
 
amt
,

981 
key
,

982 
Mem
 *
pMem


984 *
zD©a
;

985 
u32
 
avaûabÀ
 = 0;

986 
rc
 = 
SQLITE_OK
;

988 
	`as£π
–
	`sqlôe3BåìCurs‹IsVÆid
(
pCur
) );

989 
	`as£π
–!
	`VdbeMemDy«mic
(
pMem
) );

993 
	`as£π
–(
pMem
->
Êags
 & 
MEM_RowSë
)==0 );

994 if–
key
 ){

995 
zD©a
 = (*)
	`sqlôe3BåìKeyFëch
(
pCur
, &
avaûabÀ
);

997 
zD©a
 = (*)
	`sqlôe3BåìD©aFëch
(
pCur
, &
avaûabÀ
);

999 
	`as£π
–
zD©a
!=0 );

1001 if–
off£t
+
amt
<=
avaûabÀ
 ){

1002 
pMem
->
z
 = &
zD©a
[
off£t
];

1003 
pMem
->
Êags
 = 
MEM_Blob
|
MEM_Ephem
;

1004 
pMem
->
n
 = ()
amt
;

1006 
rc
 = 
	`vdbeMemFromBåìResize
(
pCur
, 
off£t
, 
amt
, 
key
, 
pMem
);

1009  
rc
;

1010 
	}
}

1017 
SQLITE_NOINLINE
 c⁄° *
	$vÆueToText
(
sqlôe3_vÆue
* 
pVÆ
, 
u8
 
íc
){

1018 
	`as£π
–
pVÆ
!=0 );

1019 
	`as£π
–
pVÆ
->
db
==0 || 
	`sqlôe3_muãx_hñd
’VÆ->db->
muãx
) );

1020 
	`as£π
–(
íc
&3)==”nc&~
SQLITE_UTF16_ALIGNED
) );

1021 
	`as£π
–(
pVÆ
->
Êags
 & 
MEM_RowSë
)==0 );

1022 
	`as£π
–(
pVÆ
->
Êags
 & (
MEM_NuŒ
))==0 );

1023 if–
pVÆ
->
Êags
 & (
MEM_Blob
|
MEM_Så
) ){

1024 
pVÆ
->
Êags
 |
MEM_Så
;

1025 if–
pVÆ
->
Êags
 & 
MEM_Zîo
 ){

1026 
	`sqlôe3VdbeMemEx∑ndBlob
(
pVÆ
);

1028 if–
pVÆ
->
íc
 !”n¯& ~
SQLITE_UTF16_ALIGNED
) ){

1029 
	`sqlôe3VdbeCh™geEncodög
(
pVÆ
, 
íc
 & ~
SQLITE_UTF16_ALIGNED
);

1031 if–(
íc
 & 
SQLITE_UTF16_ALIGNED
)!=0 && 1==(1&
	`SQLITE_PTR_TO_INT
(
pVÆ
->
z
)) ){

1032 
	`as£π
–(
pVÆ
->
Êags
 & (
MEM_Ephem
|
MEM_Sètic
))!=0 );

1033 if–
	`sqlôe3VdbeMemMakeWrôóbÀ
(
pVÆ
)!=
SQLITE_OK
 ){

1037 
	`sqlôe3VdbeMemNulTîmö©e
(
pVÆ
);

1039 
	`sqlôe3VdbeMemSåögify
(
pVÆ
, 
íc
, 0);

1040 
	`as£π
–0==(1&
	`SQLITE_PTR_TO_INT
(
pVÆ
->
z
)) );

1042 
	`as£π
(
pVÆ
->
íc
==”n¯& ~
SQLITE_UTF16_ALIGNED
Ë||ÖVÆ->
db
==0

1043 || 
pVÆ
->
db
->
mÆlocFaûed
 );

1044 if–
pVÆ
->
íc
==”n¯& ~
SQLITE_UTF16_ALIGNED
) ){

1045  
pVÆ
->
z
;

1049 
	}
}

1061 c⁄° *
	$sqlôe3VÆueText
(
sqlôe3_vÆue
* 
pVÆ
, 
u8
 
íc
){

1062 if–!
pVÆ
 )  0;

1063 
	`as£π
–
pVÆ
->
db
==0 || 
	`sqlôe3_muãx_hñd
’VÆ->db->
muãx
) );

1064 
	`as£π
–(
íc
&3)==”nc&~
SQLITE_UTF16_ALIGNED
) );

1065 
	`as£π
–(
pVÆ
->
Êags
 & 
MEM_RowSë
)==0 );

1066 if–(
pVÆ
->
Êags
&(
MEM_Så
|
MEM_Tîm
))==(MEM_Så|MEM_TîmË&&ÖVÆ->
íc
==enc ){

1067  
pVÆ
->
z
;

1069 if–
pVÆ
->
Êags
&
MEM_NuŒ
 ){

1072  
	`vÆueToText
(
pVÆ
, 
íc
);

1073 
	}
}

1078 
sqlôe3_vÆue
 *
	$sqlôe3VÆueNew
(
sqlôe3
 *
db
){

1079 
Mem
 *
p
 = 
	`sqlôe3DbMÆlocZîo
(
db
, (*p));

1080 if–
p
 ){

1081 
p
->
Êags
 = 
MEM_NuŒ
;

1082 
p
->
db
 = db;

1084  
p
;

1085 
	}
}

1091 
	sVÆueNewSèt4Ctx
 {

1092 
P¨£
 *
	mpP¨£
;

1093 
Index
 *
	mpIdx
;

1094 
U≈ackedRec‹d
 **
	mµRec
;

1095 
	miVÆ
;

1109 
sqlôe3_vÆue
 *
	$vÆueNew
(
sqlôe3
 *
db
, 
VÆueNewSèt4Ctx
 *
p
){

1110 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


1111 if–
p
 ){

1112 
U≈ackedRec‹d
 *
pRec
 = 
p
->
µRec
[0];

1114 if–
pRec
==0 ){

1115 
Index
 *
pIdx
 = 
p
->pIdx;

1116 
nByã
;

1117 
i
;

1118 
nCﬁ
 = 
pIdx
->
nCﬁumn
;

1120 
nByã
 = (
Mem
Ë* 
nCﬁ
 + 
	`ROUND8
((
U≈ackedRec‹d
));

1121 
pRec
 = (
U≈ackedRec‹d
*)
	`sqlôe3DbMÆlocZîo
(
db
, 
nByã
);

1122 if–
pRec
 ){

1123 
pRec
->
pKeyInfo
 = 
	`sqlôe3KeyInfoOfIndex
(
p
->
pP¨£
, 
pIdx
);

1124 if–
pRec
->
pKeyInfo
 ){

1125 
	`as£π
–
pRec
->
pKeyInfo
->
nFõld
+pRec->pKeyInfo->
nXFõld
==
nCﬁ
 );

1126 
	`as£π
–
pRec
->
pKeyInfo
->
íc
==
	`ENC
(
db
) );

1127 
pRec
->
aMem
 = (
Mem
 *)((
u8
*ÌRe¯+ 
	`ROUND8
((
U≈ackedRec‹d
)));

1128 
i
=0; i<
nCﬁ
; i++){

1129 
pRec
->
aMem
[
i
].
Êags
 = 
MEM_NuŒ
;

1130 
pRec
->
aMem
[
i
].
db
 = db;

1133 
	`sqlôe3DbFªe
(
db
, 
pRec
);

1134 
pRec
 = 0;

1137 if–
pRec
==0 )  0;

1138 
p
->
µRec
[0] = 
pRec
;

1141 
pRec
->
nFõld
 = 
p
->
iVÆ
+1;

1142  &
pRec
->
aMem
[
p
->
iVÆ
];

1145 
	`UNUSED_PARAMETER
(
p
);

1147  
	`sqlôe3VÆueNew
(
db
);

1148 
	}
}

1170 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


1171 
	$vÆueFromFun˘i⁄
(

1172 
sqlôe3
 *
db
,

1173 
Ex¥
 *
p
,

1174 
u8
 
íc
,

1175 
u8
 
aff
,

1176 
sqlôe3_vÆue
 **
µVÆ
,

1177 
VÆueNewSèt4Ctx
 *
pCtx


1179 
sqlôe3_c⁄ãxt
 
˘x
;

1180 
sqlôe3_vÆue
 **
≠VÆ
 = 0;

1181 
nVÆ
 = 0;

1182 
FuncDef
 *
pFunc
 = 0;

1183 
sqlôe3_vÆue
 *
pVÆ
 = 0;

1184 
rc
 = 
SQLITE_OK
;

1185 
Ex¥Li°
 *
pLi°
 = 0;

1186 
i
;

1188 
	`as£π
–
pCtx
!=0 );

1189 
	`as£π
–(
p
->
Êags
 & 
EP_TokíO∆y
)==0 );

1190 
pLi°
 = 
p
->
x
.pList;

1191 if–
pLi°
 ) 
nVÆ
 =ÖLi°->
nEx¥
;

1192 
pFunc
 = 
	`sqlôe3FödFun˘i⁄
(
db
, 
p
->
u
.
zTokí
, 
nVÆ
, 
íc
, 0);

1193 
	`as£π
–
pFunc
 );

1194 if–(
pFunc
->
funcFœgs
 & (
SQLITE_FUNC_CONSTANT
|
SQLITE_FUNC_SLOCHNG
))==0

1195 || (
pFunc
->
funcFœgs
 & 
SQLITE_FUNC_NEEDCOLL
)

1197  
SQLITE_OK
;

1200 if–
pLi°
 ){

1201 
≠VÆ
 = (
sqlôe3_vÆue
**)
	`sqlôe3DbMÆlocZîo
(
db
, ◊pVÆ[0]Ë* 
nVÆ
);

1202 if–
≠VÆ
==0 ){

1203 
rc
 = 
SQLITE_NOMEM_BKPT
;

1204 
vÆue_‰om_fun˘i⁄_out
;

1206 
i
=0; i<
nVÆ
; i++){

1207 
rc
 = 
	`sqlôe3VÆueFromEx¥
(
db
, 
pLi°
->
a
[
i
].
pEx¥
, 
íc
, 
aff
, &
≠VÆ
[i]);

1208 if–
≠VÆ
[
i
]==0 || 
rc
!=
SQLITE_OK
 ) 
vÆue_‰om_fun˘i⁄_out
;

1212 
pVÆ
 = 
	`vÆueNew
(
db
, 
pCtx
);

1213 if–
pVÆ
==0 ){

1214 
rc
 = 
SQLITE_NOMEM_BKPT
;

1215 
vÆue_‰om_fun˘i⁄_out
;

1218 
	`as£π
–
pCtx
->
pP¨£
->
rc
==
SQLITE_OK
 );

1219 
	`mem£t
(&
˘x
, 0, (ctx));

1220 
˘x
.
pOut
 = 
pVÆ
;

1221 
˘x
.
pFunc
 =ÖFunc;

1222 
pFunc
->
	`xSFunc
(&
˘x
, 
nVÆ
, 
≠VÆ
);

1223 if–
˘x
.
isEº‹
 ){

1224 
rc
 = 
˘x
.
isEº‹
;

1225 
	`sqlôe3Eº‹Msg
(
pCtx
->
pP¨£
, "%s", 
	`sqlôe3_vÆue_ãxt
(
pVÆ
));

1227 
	`sqlôe3VÆueAµlyAfföôy
(
pVÆ
, 
aff
, 
SQLITE_UTF8
);

1228 
	`as£π
–
rc
==
SQLITE_OK
 );

1229 
rc
 = 
	`sqlôe3VdbeCh™geEncodög
(
pVÆ
, 
íc
);

1230 if–
rc
==
SQLITE_OK
 && 
	`sqlôe3VdbeMemTooBig
(
pVÆ
) ){

1231 
rc
 = 
SQLITE_TOOBIG
;

1232 
pCtx
->
pP¨£
->
nEº
++;

1235 
pCtx
->
pP¨£
->
rc
 =Ñc;

1237 
vÆue_‰om_fun˘i⁄_out
:

1238 if–
rc
!=
SQLITE_OK
 ){

1239 
pVÆ
 = 0;

1241 if–
≠VÆ
 ){

1242 
i
=0; i<
nVÆ
; i++){

1243 
	`sqlôe3VÆueFªe
(
≠VÆ
[
i
]);

1245 
	`sqlôe3DbFªe
(
db
, 
≠VÆ
);

1248 *
µVÆ
 = 
pVÆ
;

1249  
rc
;

1250 
	}
}

1252 
	#vÆueFromFun˘i⁄
(
a
,
b
,
c
,
d
,
e
,
f
Ë
SQLITE_OK


	)

1265 
	$vÆueFromEx¥
(

1266 
sqlôe3
 *
db
,

1267 
Ex¥
 *
pEx¥
,

1268 
u8
 
íc
,

1269 
u8
 
afföôy
,

1270 
sqlôe3_vÆue
 **
µVÆ
,

1271 
VÆueNewSèt4Ctx
 *
pCtx


1273 
›
;

1274 *
zVÆ
 = 0;

1275 
sqlôe3_vÆue
 *
pVÆ
 = 0;

1276 
√gI¡
 = 1;

1277 c⁄° *
zNeg
 = "";

1278 
rc
 = 
SQLITE_OK
;

1280 if–!
pEx¥
 ){

1281 *
µVÆ
 = 0;

1282  
SQLITE_OK
;

1284  (
›
 = 
pEx¥
->›)==
TK_UPLUS
 || op==
TK_SPAN
 )ÖEx¥ =ÖEx¥->
pLe·
;

1285 if–
	`NEVER
(
›
==
TK_REGISTER
ËË› = 
pEx¥
->
›2
;

1291 
	`as£π
–(
pEx¥
->
Êags
 & 
EP_TokíO∆y
)==0 || 
pCtx
==0 );

1293 if–
›
==
TK_CAST
 ){

1294 
u8
 
aff
 = 
	`sqlôe3AfföôyTy≥
(
pEx¥
->
u
.
zTokí
,0);

1295 
rc
 = 
	`vÆueFromEx¥
(
db
, 
pEx¥
->
pLe·
, 
íc
, 
aff
, 
µVÆ
, 
pCtx
);

1296 
	`ã°ˇ£
–
rc
!=
SQLITE_OK
 );

1297 if–*
µVÆ
 ){

1298 
	`sqlôe3VdbeMemCa°
(*
µVÆ
, 
aff
, 
SQLITE_UTF8
);

1299 
	`sqlôe3VÆueAµlyAfföôy
(*
µVÆ
, 
afföôy
, 
SQLITE_UTF8
);

1301  
rc
;

1307 if–
›
==
TK_UMINUS


1308 && (
pEx¥
->
pLe·
->
›
==
TK_INTEGER
 ||ÖEx¥->pLe·->›==
TK_FLOAT
) ){

1309 
pEx¥
 =ÖEx¥->
pLe·
;

1310 
›
 = 
pEx¥
->op;

1311 
√gI¡
 = -1;

1312 
zNeg
 = "-";

1315 if–
›
==
TK_STRING
 || op==
TK_FLOAT
 || op==
TK_INTEGER
 ){

1316 
pVÆ
 = 
	`vÆueNew
(
db
, 
pCtx
);

1317 if–
pVÆ
==0 ) 
no_mem
;

1318 if–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_I¡VÆue
) ){

1319 
	`sqlôe3VdbeMemSëI¡64
(
pVÆ
, (
i64
)
pEx¥
->
u
.
iVÆue
*
√gI¡
);

1321 
zVÆ
 = 
	`sqlôe3MPrötf
(
db
, "%s%s", 
zNeg
, 
pEx¥
->
u
.
zTokí
);

1322 if–
zVÆ
==0 ) 
no_mem
;

1323 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, 
zVÆ
, 
SQLITE_UTF8
, 
SQLITE_DYNAMIC
);

1325 if–(
›
==
TK_INTEGER
 || op==
TK_FLOAT
 ) && 
afföôy
==
SQLITE_AFF_BLOB
 ){

1326 
	`sqlôe3VÆueAµlyAfföôy
(
pVÆ
, 
SQLITE_AFF_NUMERIC
, 
SQLITE_UTF8
);

1328 
	`sqlôe3VÆueAµlyAfföôy
(
pVÆ
, 
afföôy
, 
SQLITE_UTF8
);

1330 if–
pVÆ
->
Êags
 & (
MEM_I¡
|
MEM_Ról
ËËpVÆ->Êag†&~
MEM_Så
;

1331 if–
íc
!=
SQLITE_UTF8
 ){

1332 
rc
 = 
	`sqlôe3VdbeCh™geEncodög
(
pVÆ
, 
íc
);

1334 }if–
›
==
TK_UMINUS
 ) {

1336 if–
SQLITE_OK
==
	`sqlôe3VÆueFromEx¥
(
db
,
pEx¥
->
pLe·
,
íc
,
afföôy
,&
pVÆ
)

1337 && 
pVÆ
!=0

1339 
	`sqlôe3VdbeMemNumîify
(
pVÆ
);

1340 if–
pVÆ
->
Êags
 & 
MEM_Ról
 ){

1341 
pVÆ
->
u
.
r
 = -pVal->u.r;

1342 }if–
pVÆ
->
u
.
i
==
SMALLEST_INT64
 ){

1343 
pVÆ
->
u
.
r
 = -()
SMALLEST_INT64
;

1344 
	`MemSëTy≥Fœg
(
pVÆ
, 
MEM_Ról
);

1346 
pVÆ
->
u
.
i
 = -pVal->u.i;

1348 
	`sqlôe3VÆueAµlyAfföôy
(
pVÆ
, 
afföôy
, 
íc
);

1350 }if–
›
==
TK_NULL
 ){

1351 
pVÆ
 = 
	`vÆueNew
(
db
, 
pCtx
);

1352 if–
pVÆ
==0 ) 
no_mem
;

1354 #i‚de‡
SQLITE_OMIT_BLOB_LITERAL


1355 if–
›
==
TK_BLOB
 ){

1356 
nVÆ
;

1357 
	`as£π
–
pEx¥
->
u
.
zTokí
[0]=='x' ||ÖExpr->u.zToken[0]=='X' );

1358 
	`as£π
–
pEx¥
->
u
.
zTokí
[1]=='\'' );

1359 
pVÆ
 = 
	`vÆueNew
(
db
, 
pCtx
);

1360 if–!
pVÆ
 ) 
no_mem
;

1361 
zVÆ
 = &
pEx¥
->
u
.
zTokí
[2];

1362 
nVÆ
 = 
	`sqlôe3SåÀn30
(
zVÆ
)-1;

1363 
	`as£π
–
zVÆ
[
nVÆ
]=='\'' );

1364 
	`sqlôe3VdbeMemSëSå
(
pVÆ
, 
	`sqlôe3HexToBlob
(
db
, 
zVÆ
, 
nVÆ
),ÇVal/2,

1365 0, 
SQLITE_DYNAMIC
);

1369 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


1370 if–
›
==
TK_FUNCTION
 && 
pCtx
!=0 ){

1371 
rc
 = 
	`vÆueFromFun˘i⁄
(
db
, 
pEx¥
, 
íc
, 
afföôy
, &
pVÆ
, 
pCtx
);

1375 *
µVÆ
 = 
pVÆ
;

1376  
rc
;

1378 
no_mem
:

1379 
	`sqlôe3OomFau…
(
db
);

1380 
	`sqlôe3DbFªe
(
db
, 
zVÆ
);

1381 
	`as£π
–*
µVÆ
==0 );

1382 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


1383 if–
pCtx
==0 ) 
	`sqlôe3VÆueFªe
(
pVÆ
);

1385 
	`as£π
–
pCtx
==0 ); 
	`sqlôe3VÆueFªe
(
pVÆ
);

1387  
SQLITE_NOMEM_BKPT
;

1388 
	}
}

1400 
	$sqlôe3VÆueFromEx¥
(

1401 
sqlôe3
 *
db
,

1402 
Ex¥
 *
pEx¥
,

1403 
u8
 
íc
,

1404 
u8
 
afföôy
,

1405 
sqlôe3_vÆue
 **
µVÆ


1407  
	`vÆueFromEx¥
(
db
, 
pEx¥
, 
íc
, 
afföôy
, 
µVÆ
, 0);

1408 
	}
}

1410 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


1419 
	$ªc‹dFunc
(

1420 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

1421 
¨gc
,

1422 
sqlôe3_vÆue
 **
¨gv


1424 c⁄° 
fûe_f‹m©
 = 1;

1425 
u32
 
iSîül
;

1426 
nSîül
;

1427 
u32
 
nVÆ
;

1428 
nRë
;

1429 
sqlôe3
 *
db
;

1430 
u8
 *
aRë
;

1432 
	`UNUSED_PARAMETER
–
¨gc
 );

1433 
iSîül
 = 
	`sqlôe3VdbeSîülTy≥
(
¨gv
[0], 
fûe_f‹m©
, &
nVÆ
);

1434 
nSîül
 = 
	`sqlôe3V¨ötLí
(
iSîül
);

1435 
db
 = 
	`sqlôe3_c⁄ãxt_db_h™dÀ
(
c⁄ãxt
);

1437 
nRë
 = 1 + 
nSîül
 + 
nVÆ
;

1438 
aRë
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, 
nRë
);

1439 if–
aRë
==0 ){

1440 
	`sqlôe3_ªsu…_îr‹_nomem
(
c⁄ãxt
);

1442 
aRë
[0] = 
nSîül
+1;

1443 
	`putV¨öt32
(&
aRë
[1], 
iSîül
);

1444 
	`sqlôe3VdbeSîülPut
(&
aRë
[1+
nSîül
], 
¨gv
[0], 
iSîül
);

1445 
	`sqlôe3_ªsu…_blob
(
c⁄ãxt
, 
aRë
, 
nRë
, 
SQLITE_TRANSIENT
);

1446 
	`sqlôe3DbFªe
(
db
, 
aRë
);

1448 
	}
}

1453 
	$sqlôe3A«lyzeFun˘i⁄s
(){

1454 
FuncDef
 
aA«lyzeTabÀFuncs
[] = {

1455 
	`FUNCTION
(
sqlôe_ªc‹d
, 1, 0, 0, 
ªc‹dFunc
),

1457 
	`sqlôe3In£πBuûtöFuncs
(
aA«lyzeTabÀFuncs
, 
	`AºaySize
(aAnalyzeTableFuncs));

1458 
	}
}

1478 
	$°©4VÆueFromEx¥
(

1479 
P¨£
 *
pP¨£
,

1480 
Ex¥
 *
pEx¥
,

1481 
u8
 
afföôy
,

1482 
VÆueNewSèt4Ctx
 *
pAŒoc
,

1483 
sqlôe3_vÆue
 **
µVÆ


1485 
rc
 = 
SQLITE_OK
;

1486 
sqlôe3_vÆue
 *
pVÆ
 = 0;

1487 
sqlôe3
 *
db
 = 
pP¨£
->db;

1490 
pEx¥
 = 
	`sqlôe3Ex¥SkùCﬁœã
(pExpr);

1492 if–!
pEx¥
 ){

1493 
pVÆ
 = 
	`vÆueNew
(
db
, 
pAŒoc
);

1494 if–
pVÆ
 ){

1495 
	`sqlôe3VdbeMemSëNuŒ
((
Mem
*)
pVÆ
);

1497 }if–
pEx¥
->
›
==
TK_VARIABLE


1498 || 
	`NEVER
(
pEx¥
->
›
==
TK_REGISTER
 &&ÖEx¥->
›2
==
TK_VARIABLE
)

1500 
Vdbe
 *
v
;

1501 
iBödV¨
 = 
pEx¥
->
iCﬁumn
;

1502 
	`sqlôe3VdbeSëV¨mask
(
pP¨£
->
pVdbe
, 
iBödV¨
);

1503 if–(
v
 = 
pP¨£
->
pRïª∑ª
)!=0 ){

1504 
pVÆ
 = 
	`vÆueNew
(
db
, 
pAŒoc
);

1505 if–
pVÆ
 ){

1506 
rc
 = 
	`sqlôe3VdbeMemC›y
((
Mem
*)
pVÆ
, &
v
->
aV¨
[
iBödV¨
-1]);

1507 if–
rc
==
SQLITE_OK
 ){

1508 
	`sqlôe3VÆueAµlyAfföôy
(
pVÆ
, 
afföôy
, 
	`ENC
(
db
));

1510 
pVÆ
->
db
 = 
pP¨£
->db;

1514 
rc
 = 
	`vÆueFromEx¥
(
db
, 
pEx¥
, 
	`ENC
(db), 
afföôy
, &
pVÆ
, 
pAŒoc
);

1517 
	`as£π
–
pVÆ
==0 ||ÖVÆ->
db
==db );

1518 *
µVÆ
 = 
pVÆ
;

1519  
rc
;

1520 
	}
}

1552 
	$sqlôe3Sèt4ProbeSëVÆue
(

1553 
P¨£
 *
pP¨£
,

1554 
Index
 *
pIdx
,

1555 
U≈ackedRec‹d
 **
µRec
,

1556 
Ex¥
 *
pEx¥
,

1557 
u8
 
afföôy
,

1558 
iVÆ
,

1559 *
pbOk


1561 
rc
;

1562 
sqlôe3_vÆue
 *
pVÆ
 = 0;

1563 
VÆueNewSèt4Ctx
 
Æloc
;

1565 
Æloc
.
pP¨£
 =ÖParse;

1566 
Æloc
.
pIdx
 =ÖIdx;

1567 
Æloc
.
µRec
 =ÖpRec;

1568 
Æloc
.
iVÆ
 = iVal;

1570 
rc
 = 
	`°©4VÆueFromEx¥
(
pP¨£
, 
pEx¥
, 
afföôy
, &
Æloc
, &
pVÆ
);

1571 
	`as£π
–
pVÆ
==0 ||ÖVÆ->
db
==
pP¨£
->db );

1572 *
pbOk
 = (
pVÆ
!=0);

1573  
rc
;

1574 
	}
}

1586 
	$sqlôe3Sèt4VÆueFromEx¥
(

1587 
P¨£
 *
pP¨£
,

1588 
Ex¥
 *
pEx¥
,

1589 
u8
 
afföôy
,

1590 
sqlôe3_vÆue
 **
µVÆ


1592  
	`°©4VÆueFromEx¥
(
pP¨£
, 
pEx¥
, 
afföôy
, 0, 
µVÆ
);

1593 
	}
}

1603 
	$sqlôe3Sèt4Cﬁumn
(

1604 
sqlôe3
 *
db
,

1605 c⁄° *
pRec
,

1606 
nRec
,

1607 
iCﬁ
,

1608 
sqlôe3_vÆue
 **
µVÆ


1610 
u32
 
t
;

1611 
nHdr
;

1612 
iHdr
;

1613 
iFõld
;

1614 
szFõld
;

1615 
i
;

1616 
u8
 *
a
 = (u8*)
pRec
;

1617 
Mem
 *
pMem
 = *
µVÆ
;

1619 
	`as£π
–
iCﬁ
>0 );

1620 
iHdr
 = 
	`gëV¨öt32
(
a
, 
nHdr
);

1621 if–
nHdr
>
nRec
 || 
iHdr
>ÚHd∏Ë 
SQLITE_CORRUPT_BKPT
;

1622 
iFõld
 = 
nHdr
;

1623 
i
=0; i<=
iCﬁ
; i++){

1624 
iHdr
 +
	`gëV¨öt32
(&
a
[iHdr], 
t
);

1625 
	`ã°ˇ£
–
iHdr
==
nHdr
 );

1626 
	`ã°ˇ£
–
iHdr
==
nHdr
+1 );

1627 if–
iHdr
>
nHdr
 )  
SQLITE_CORRUPT_BKPT
;

1628 
szFõld
 = 
	`sqlôe3VdbeSîülTy≥Lí
(
t
);

1629 
iFõld
 +
szFõld
;

1631 
	`ã°ˇ£
–
iFõld
==
nRec
 );

1632 
	`ã°ˇ£
–
iFõld
==
nRec
+1 );

1633 if–
iFõld
>
nRec
 )  
SQLITE_CORRUPT_BKPT
;

1634 if–
pMem
==0 ){

1635 
pMem
 = *
µVÆ
 = 
	`sqlôe3VÆueNew
(
db
);

1636 if–
pMem
==0 )  
SQLITE_NOMEM_BKPT
;

1638 
	`sqlôe3VdbeSîülGë
(&
a
[
iFõld
-
szFõld
], 
t
, 
pMem
);

1639 
pMem
->
íc
 = 
	`ENC
(
db
);

1640  
SQLITE_OK
;

1641 
	}
}

1648 
	$sqlôe3Sèt4ProbeFªe
(
U≈ackedRec‹d
 *
pRec
){

1649 if–
pRec
 ){

1650 
i
;

1651 
nCﬁ
 = 
pRec
->
pKeyInfo
->
nFõld
+pRec->pKeyInfo->
nXFõld
;

1652 
Mem
 *
aMem
 = 
pRec
->aMem;

1653 
sqlôe3
 *
db
 = 
aMem
[0].db;

1654 
i
=0; i<
nCﬁ
; i++){

1655 
	`sqlôe3VdbeMemRñó£
(&
aMem
[
i
]);

1657 
	`sqlôe3KeyInfoUƒef
(
pRec
->
pKeyInfo
);

1658 
	`sqlôe3DbFªe
(
db
, 
pRec
);

1660 
	}
}

1666 
sqlôe3VÆueSëSå
(

1667 
sqlôe3_vÆue
 *
v
,

1668 
n
,

1669 c⁄° *
z
,

1670 
u8
 
íc
,

1671 (*
xDñ
)(*)

1673 if–
v
 ) 
	`sqlôe3VdbeMemSëSå
((
Mem
 *)v, 
z
, 
n
, 
íc
, 
xDñ
);

1674 
	}
}

1679 
	$sqlôe3VÆueFªe
(
sqlôe3_vÆue
 *
v
){

1680 if–!
v
 ) ;

1681 
	`sqlôe3VdbeMemRñó£
((
Mem
 *)
v
);

1682 
	`sqlôe3DbFªe
(((
Mem
*)
v
)->
db
, v);

1683 
	}
}

1690 
SQLITE_NOINLINE
 
	$vÆueByãs
(
sqlôe3_vÆue
 *
pVÆ
, 
u8
 
íc
){

1691  
	`vÆueToText
(
pVÆ
, 
íc
)!=0 ?ÖVÆ->
n
 : 0;

1692 
	}
}

1693 
	$sqlôe3VÆueByãs
(
sqlôe3_vÆue
 *
pVÆ
, 
u8
 
íc
){

1694 
Mem
 *
p
 = (Mem*)
pVÆ
;

1695 
	`as£π
–(
p
->
Êags
 & 
MEM_NuŒ
)==0 || (p->Êag†& (
MEM_Så
|
MEM_Blob
))==0 );

1696 if–(
p
->
Êags
 & 
MEM_Så
)!=0 && 
pVÆ
->
íc
==enc ){

1697  
p
->
n
;

1699 if–(
p
->
Êags
 & 
MEM_Blob
)!=0 ){

1700 if–
p
->
Êags
 & 
MEM_Zîo
 ){

1701  
p
->
n
 +Ö->
u
.
nZîo
;

1703  
p
->
n
;

1706 if–
p
->
Êags
 & 
MEM_NuŒ
 )  0;

1707  
	`vÆueByãs
(
pVÆ
, 
íc
);

1708 
	}
}

	@vdbesort.c

138 
	~"sqlôeI¡.h
"

139 
	~"vdbeI¡.h
"

147 
	#SQLITE_DEBUG_SORTER_THREADS
 1

	)

155 
	#SQLITE_MAX_PMASZ
 (1<<29)

	)

160 
MîgeEngöe
 
	tMîgeEngöe
;

161 
PmaRódî
 
	tPmaRódî
;

162 
PmaWrôî
 
	tPmaWrôî
;

163 
S‹ãrRec‹d
 
	tS‹ãrRec‹d
;

164 
S‹tSubèsk
 
	tS‹tSubèsk
;

165 
S‹ãrFûe
 
	tS‹ãrFûe
;

166 
S‹ãrLi°
 
	tS‹ãrLi°
;

167 
In¸Mîgî
 
	tIn¸Mîgî
;

173 
	sS‹ãrFûe
 {

174 
sqlôe3_fûe
 *
	mpFd
;

175 
i64
 
	miEof
;

186 
	sS‹ãrLi°
 {

187 
S‹ãrRec‹d
 *
	mpLi°
;

188 
u8
 *
	maMem‹y
;

189 
	mszPMA
;

256 
	sMîgeEngöe
 {

257 
	mnTªe
;

258 
S‹tSubèsk
 *
	mpTask
;

259 *
	maTªe
;

260 
PmaRódî
 *
	maRódr
;

294 (*
	tS‹ãrCom∑ª
)(
	tS‹tSubèsk
*,*,const *,,const *,);

295 
	sS‹tSubèsk
 {

296 
SQLôeThªad
 *
pThªad
;

297 
bD⁄e
;

298 
VdbeS‹ãr
 *
pS‹ãr
;

299 
U≈ackedRec‹d
 *
pU≈acked
;

300 
S‹ãrLi°
 
li°
;

301 
nPMA
;

302 
S‹ãrCom∑ª
 
xCom∑ª
;

303 
S‹ãrFûe
 
fûe
;

304 
S‹ãrFûe
 
fûe2
;

317 
	sVdbeS‹ãr
 {

318 
mnPmaSize
;

319 
mxPmaSize
;

320 
mxKeysize
;

321 
pgsz
;

322 
PmaRódî
 *
pRódî
;

323 
MîgeEngöe
 *
pMîgî
;

324 
sqlôe3
 *
db
;

325 
KeyInfo
 *
pKeyInfo
;

326 
U≈ackedRec‹d
 *
pU≈acked
;

327 
S‹ãrLi°
 
li°
;

328 
iMem‹y
;

329 
nMem‹y
;

330 
u8
 
bU£PMA
;

331 
u8
 
bU£Thªads
;

332 
u8
 
iPªv
;

333 
u8
 
nTask
;

334 
u8
 
ty≥Mask
;

335 
S‹tSubèsk
 
aTask
[1];

338 
	#SORTER_TYPE_INTEGER
 0x01

	)

339 
	#SORTER_TYPE_TEXT
 0x02

	)

350 
	sPmaRódî
 {

351 
i64
 
iRódOff
;

352 
i64
 
iEof
;

353 
nAŒoc
;

354 
nKey
;

355 
sqlôe3_fûe
 *
pFd
;

356 
u8
 *
aAŒoc
;

357 
u8
 *
aKey
;

358 
u8
 *
aBuf„r
;

359 
nBuf„r
;

360 
u8
 *
aM≠
;

361 
In¸Mîgî
 *
pIn¸
;

396 
	sIn¸Mîgî
 {

397 
S‹tSubèsk
 *
pTask
;

398 
MîgeEngöe
 *
pMîgî
;

399 
i64
 
iSèπOff
;

400 
mxSz
;

401 
bEof
;

402 
bU£Thªad
;

403 
S‹ãrFûe
 
aFûe
[2];

414 
	sPmaWrôî
 {

415 
eFWEº
;

416 
u8
 *
aBuf„r
;

417 
nBuf„r
;

418 
iBufSèπ
;

419 
iBufEnd
;

420 
i64
 
iWrôeOff
;

421 
sqlôe3_fûe
 *
pFd
;

442 
	sS‹ãrRec‹d
 {

443 
nVÆ
;

445 
S‹ãrRec‹d
 *
pNext
;

446 
iNext
;

447 } 
u
;

456 
	#SRVAL
(
p
Ë((*)((
S‹ãrRec‹d
*)’Ë+ 1))

	)

460 
	#SORTER_MAX_MERGE_COUNT
 16

	)

462 
	`vdbeIn¸Sw≠
(
In¸Mîgî
*);

463 
	`vdbeIn¸Fªe
(
In¸Mîgî
 *);

469 
	$vdbePmaRódîCÀ¨
(
PmaRódî
 *
pRódr
){

470 
	`sqlôe3_‰ì
(
pRódr
->
aAŒoc
);

471 
	`sqlôe3_‰ì
(
pRódr
->
aBuf„r
);

472 if–
pRódr
->
aM≠
 ) 
	`sqlôe3OsUn„tch
’Ródr->
pFd
, 0,ÖReadr->aMap);

473 
	`vdbeIn¸Fªe
(
pRódr
->
pIn¸
);

474 
	`mem£t
(
pRódr
, 0, (
PmaRódî
));

475 
	}
}

486 
	$vdbePmaRódBlob
(

487 
PmaRódî
 *
p
,

488 
nByã
,

489 
u8
 **
µOut


491 
iBuf
;

492 
nAvaû
;

494 if–
p
->
aM≠
 ){

495 *
µOut
 = &
p
->
aM≠
[p->
iRódOff
];

496 
p
->
iRódOff
 +
nByã
;

497  
SQLITE_OK
;

500 
	`as£π
–
p
->
aBuf„r
 );

505 
iBuf
 = 
p
->
iRódOff
 %Ö->
nBuf„r
;

506 if–
iBuf
==0 ){

507 
nRód
;

508 
rc
;

511 if–(
p
->
iEof
 -Ö->
iRódOff
Ë> (
i64
Ì->
nBuf„r
 ){

512 
nRód
 = 
p
->
nBuf„r
;

514 
nRód
 = ()(
p
->
iEof
 -Ö->
iRódOff
);

516 
	`as£π
–
nRód
>0 );

519 
rc
 = 
	`sqlôe3OsRód
(
p
->
pFd
,Ö->
aBuf„r
, 
nRód
,Ö->
iRódOff
);

520 
	`as£π
–
rc
!=
SQLITE_IOERR_SHORT_READ
 );

521 if–
rc
!=
SQLITE_OK
 ) Ñc;

523 
nAvaû
 = 
p
->
nBuf„r
 - 
iBuf
;

525 if–
nByã
<=
nAvaû
 ){

529 *
µOut
 = &
p
->
aBuf„r
[
iBuf
];

530 
p
->
iRódOff
 +
nByã
;

535 
nRem
;

538 if–
p
->
nAŒoc
<
nByã
 ){

539 
u8
 *
aNew
;

540 
nNew
 = 
	`MAX
(128, 
p
->
nAŒoc
*2);

541  
nByã
>
nNew
 )ÇNew =ÇNew*2;

542 
aNew
 = 
	`sqlôe3RóŒoc
(
p
->
aAŒoc
, 
nNew
);

543 if–!
aNew
 )  
SQLITE_NOMEM_BKPT
;

544 
p
->
nAŒoc
 = 
nNew
;

545 
p
->
aAŒoc
 = 
aNew
;

550 
	`mem˝y
(
p
->
aAŒoc
, &p->
aBuf„r
[
iBuf
], 
nAvaû
);

551 
p
->
iRódOff
 +
nAvaû
;

552 
nRem
 = 
nByã
 - 
nAvaû
;

556  
nRem
>0 ){

557 
rc
;

558 
nC›y
;

559 
u8
 *
aNext
;

561 
nC›y
 = 
nRem
;

562 if–
nRem
>
p
->
nBuf„r
 ) 
nC›y
 =Ö->nBuffer;

563 
rc
 = 
	`vdbePmaRódBlob
(
p
, 
nC›y
, &
aNext
);

564 if–
rc
!=
SQLITE_OK
 ) Ñc;

565 
	`as£π
–
aNext
!=
p
->
aAŒoc
 );

566 
	`mem˝y
(&
p
->
aAŒoc
[
nByã
 - 
nRem
], 
aNext
, 
nC›y
);

567 
nRem
 -
nC›y
;

570 *
µOut
 = 
p
->
aAŒoc
;

573  
SQLITE_OK
;

574 
	}
}

580 
	$vdbePmaRódV¨öt
(
PmaRódî
 *
p
, 
u64
 *
≤Out
){

581 
iBuf
;

583 if–
p
->
aM≠
 ){

584 
p
->
iRódOff
 +
	`sqlôe3GëV¨öt
(&p->
aM≠
[p->iRódOff], 
≤Out
);

586 
iBuf
 = 
p
->
iRódOff
 %Ö->
nBuf„r
;

587 if–
iBuf
 && (
p
->
nBuf„r
-iBuf)>=9 ){

588 
p
->
iRódOff
 +
	`sqlôe3GëV¨öt
(&p->
aBuf„r
[
iBuf
], 
≤Out
);

590 
u8
 
aV¨öt
[16], *
a
;

591 
i
 = 0, 
rc
;

593 
rc
 = 
	`vdbePmaRódBlob
(
p
, 1, &
a
);

594 if–
rc
 ) Ñc;

595 
aV¨öt
[(
i
++)&0xf] = 
a
[0];

596 } (
a
[0]&0x80)!=0 );

597 
	`sqlôe3GëV¨öt
(
aV¨öt
, 
≤Out
);

601  
SQLITE_OK
;

602 
	}
}

613 
	$vdbeS‹ãrM≠Fûe
(
S‹tSubèsk
 *
pTask
, 
S‹ãrFûe
 *
pFûe
, 
u8
 **
µ
){

614 
rc
 = 
SQLITE_OK
;

615 if–
pFûe
->
iEof
<=(
i64
)(
pTask
->
pS‹ãr
->
db
->
nMaxS‹ãrMm≠
) ){

616 
sqlôe3_fûe
 *
pFd
 = 
pFûe
->pFd;

617 if–
pFd
->
pMëhods
->
iVîsi⁄
>=3 ){

618 
rc
 = 
	`sqlôe3OsFëch
(
pFd
, 0, ()
pFûe
->
iEof
, (**)
µ
);

619 
	`ã°ˇ£
–
rc
!=
SQLITE_OK
 );

622  
rc
;

623 
	}
}

630 
	$vdbePmaRódîSìk
(

631 
S‹tSubèsk
 *
pTask
,

632 
PmaRódî
 *
pRódr
,

633 
S‹ãrFûe
 *
pFûe
,

634 
i64
 
iOff


636 
rc
 = 
SQLITE_OK
;

638 
	`as£π
–
pRódr
->
pIn¸
==0 ||ÖRódr->pIn¸->
bEof
==0 );

640 if–
	`sqlôe3Fau…Sim
(201ËË 
SQLITE_IOERR_READ
;

641 if–
pRódr
->
aM≠
 ){

642 
	`sqlôe3OsUn„tch
(
pRódr
->
pFd
, 0,ÖRódr->
aM≠
);

643 
pRódr
->
aM≠
 = 0;

645 
pRódr
->
iRódOff
 = 
iOff
;

646 
pRódr
->
iEof
 = 
pFûe
->iEof;

647 
pRódr
->
pFd
 = 
pFûe
->pFd;

649 
rc
 = 
	`vdbeS‹ãrM≠Fûe
(
pTask
, 
pFûe
, &
pRódr
->
aM≠
);

650 if–
rc
==
SQLITE_OK
 && 
pRódr
->
aM≠
==0 ){

651 
pgsz
 = 
pTask
->
pS‹ãr
->pgsz;

652 
iBuf
 = 
pRódr
->
iRódOff
 % 
pgsz
;

653 if–
pRódr
->
aBuf„r
==0 ){

654 
pRódr
->
aBuf„r
 = (
u8
*)
	`sqlôe3MÆloc
(
pgsz
);

655 if–
pRódr
->
aBuf„r
==0 ) 
rc
 = 
SQLITE_NOMEM_BKPT
;

656 
pRódr
->
nBuf„r
 = 
pgsz
;

658 if–
rc
==
SQLITE_OK
 && 
iBuf
 ){

659 
nRód
 = 
pgsz
 - 
iBuf
;

660 if–(
pRódr
->
iRódOff
 + 
nRód
Ë>ÖRódr->
iEof
 ){

661 
nRód
 = ()(
pRódr
->
iEof
 -ÖRódr->
iRódOff
);

663 
rc
 = 
	`sqlôe3OsRód
(

664 
pRódr
->
pFd
, &pRódr->
aBuf„r
[
iBuf
], 
nRód
,ÖRódr->
iRódOff


666 
	`ã°ˇ£
–
rc
!=
SQLITE_OK
 );

670  
rc
;

671 
	}
}

677 
	$vdbePmaRódîNext
(
PmaRódî
 *
pRódr
){

678 
rc
 = 
SQLITE_OK
;

679 
u64
 
nRec
 = 0;

682 if–
pRódr
->
iRódOff
>ıRódr->
iEof
 ){

683 
In¸Mîgî
 *
pIn¸
 = 
pRódr
->pIncr;

684 
bEof
 = 1;

685 if–
pIn¸
 ){

686 
rc
 = 
	`vdbeIn¸Sw≠
(
pIn¸
);

687 if–
rc
==
SQLITE_OK
 && 
pIn¸
->
bEof
==0 ){

688 
rc
 = 
	`vdbePmaRódîSìk
(

689 
pIn¸
->
pTask
, 
pRódr
, &pIn¸->
aFûe
[0],ÖIn¸->
iSèπOff


691 
bEof
 = 0;

695 if–
bEof
 ){

697 
	`vdbePmaRódîCÀ¨
(
pRódr
);

698 
	`ã°ˇ£
–
rc
!=
SQLITE_OK
 );

699  
rc
;

703 if–
rc
==
SQLITE_OK
 ){

704 
rc
 = 
	`vdbePmaRódV¨öt
(
pRódr
, &
nRec
);

706 if–
rc
==
SQLITE_OK
 ){

707 
pRódr
->
nKey
 = ()
nRec
;

708 
rc
 = 
	`vdbePmaRódBlob
(
pRódr
, ()
nRec
, &pRódr->
aKey
);

709 
	`ã°ˇ£
–
rc
!=
SQLITE_OK
 );

712  
rc
;

713 
	}
}

724 
	$vdbePmaRódîInô
(

725 
S‹tSubèsk
 *
pTask
,

726 
S‹ãrFûe
 *
pFûe
,

727 
i64
 
iSèπ
,

728 
PmaRódî
 *
pRódr
,

729 
i64
 *
≤Byã


731 
rc
;

733 
	`as£π
–
pFûe
->
iEof
>
iSèπ
 );

734 
	`as£π
–
pRódr
->
aAŒoc
==0 &&ÖRódr->
nAŒoc
==0 );

735 
	`as£π
–
pRódr
->
aBuf„r
==0 );

736 
	`as£π
–
pRódr
->
aM≠
==0 );

738 
rc
 = 
	`vdbePmaRódîSìk
(
pTask
, 
pRódr
, 
pFûe
, 
iSèπ
);

739 if–
rc
==
SQLITE_OK
 ){

740 
u64
 
nByã
 = 0;

741 
rc
 = 
	`vdbePmaRódV¨öt
(
pRódr
, &
nByã
);

742 
pRódr
->
iEof
 =ÖRódr->
iRódOff
 + 
nByã
;

743 *
≤Byã
 +
nByã
;

746 if–
rc
==
SQLITE_OK
 ){

747 
rc
 = 
	`vdbePmaRódîNext
(
pRódr
);

749  
rc
;

750 
	}
}

757 
	$vdbeS‹ãrCom∑ªTaû
(

758 
S‹tSubèsk
 *
pTask
,

759 *
pbKey2Cached
,

760 c⁄° *
pKey1
, 
nKey1
,

761 c⁄° *
pKey2
, 
nKey2


763 
U≈ackedRec‹d
 *
r2
 = 
pTask
->
pU≈acked
;

764 if–*
pbKey2Cached
==0 ){

765 
	`sqlôe3VdbeRec‹dU≈ack
(
pTask
->
pS‹ãr
->
pKeyInfo
, 
nKey2
, 
pKey2
, 
r2
);

766 *
pbKey2Cached
 = 1;

768  
	`sqlôe3VdbeRec‹dCom∑ªWôhSkù
(
nKey1
, 
pKey1
, 
r2
, 1);

769 
	}
}

784 
	$vdbeS‹ãrCom∑ª
(

785 
S‹tSubèsk
 *
pTask
,

786 *
pbKey2Cached
,

787 c⁄° *
pKey1
, 
nKey1
,

788 c⁄° *
pKey2
, 
nKey2


790 
U≈ackedRec‹d
 *
r2
 = 
pTask
->
pU≈acked
;

791 if–!*
pbKey2Cached
 ){

792 
	`sqlôe3VdbeRec‹dU≈ack
(
pTask
->
pS‹ãr
->
pKeyInfo
, 
nKey2
, 
pKey2
, 
r2
);

793 *
pbKey2Cached
 = 1;

795  
	`sqlôe3VdbeRec‹dCom∑ª
(
nKey1
, 
pKey1
, 
r2
);

796 
	}
}

803 
	$vdbeS‹ãrCom∑ªText
(

804 
S‹tSubèsk
 *
pTask
,

805 *
pbKey2Cached
,

806 c⁄° *
pKey1
, 
nKey1
,

807 c⁄° *
pKey2
, 
nKey2


809 c⁄° 
u8
 * c⁄° 
p1
 = (c⁄° u8 * c⁄°)
pKey1
;

810 c⁄° 
u8
 * c⁄° 
p2
 = (c⁄° u8 * c⁄°)
pKey2
;

811 c⁄° 
u8
 * c⁄° 
v1
 = &
p1
[Ö1[0] ];

812 c⁄° 
u8
 * c⁄° 
v2
 = &
p2
[Ö2[0] ];

814 
n1
;

815 
n2
;

816 
ªs
;

818 
	`gëV¨öt32
(&
p1
[1], 
n1
);Ç1 = (n1 - 13) / 2;

819 
	`gëV¨öt32
(&
p2
[1], 
n2
);Ç2 = (n2 - 13) / 2;

820 
ªs
 = 
	`memcmp
(
v1
, 
v2
, 
	`MIN
(
n1
, 
n2
));

821 if–
ªs
==0 ){

822 
ªs
 = 
n1
 - 
n2
;

825 if–
ªs
==0 ){

826 if–
pTask
->
pS‹ãr
->
pKeyInfo
->
nFõld
>1 ){

827 
ªs
 = 
	`vdbeS‹ãrCom∑ªTaû
(

828 
pTask
, 
pbKey2Cached
, 
pKey1
, 
nKey1
, 
pKey2
, 
nKey2


832 if–
pTask
->
pS‹ãr
->
pKeyInfo
->
aS‹tOrdî
[0] ){

833 
ªs
 =Ñes * -1;

837  
ªs
;

838 
	}
}

844 
	$vdbeS‹ãrCom∑ªI¡
(

845 
S‹tSubèsk
 *
pTask
,

846 *
pbKey2Cached
,

847 c⁄° *
pKey1
, 
nKey1
,

848 c⁄° *
pKey2
, 
nKey2


850 c⁄° 
u8
 * c⁄° 
p1
 = (c⁄° u8 * c⁄°)
pKey1
;

851 c⁄° 
u8
 * c⁄° 
p2
 = (c⁄° u8 * c⁄°)
pKey2
;

852 c⁄° 
s1
 = 
p1
[1];

853 c⁄° 
s2
 = 
p2
[1];

854 c⁄° 
u8
 * c⁄° 
v1
 = &
p1
[Ö1[0] ];

855 c⁄° 
u8
 * c⁄° 
v2
 = &
p2
[Ö2[0] ];

856 
ªs
;

858 
	`as£π
–(
s1
>0 && s1<7) || s1==8 || s1==9 );

859 
	`as£π
–(
s2
>0 && s2<7) || s2==8 || s2==9 );

861 if–
s1
>7 && 
s2
>7 ){

862 
ªs
 = 
s1
 - 
s2
;

864 if–
s1
==
s2
 ){

865 if–(*
v1
 ^ *
v2
) & 0x80 ){

867 
ªs
 = (*
v1
 & 0x80) ? -1 : +1;

870 c⁄° 
u8
 
aLí
[] = {0, 1, 2, 3, 4, 6, 8 };

871 
i
;

872 
ªs
 = 0;

873 
i
=0; i<
aLí
[
s1
]; i++){

874 if–(
ªs
 = 
v1
[
i
] - 
v2
[i]) ) ;

878 if–
s2
>7 ){

879 
ªs
 = +1;

880 }if–
s1
>7 ){

881 
ªs
 = -1;

883 
ªs
 = 
s1
 - 
s2
;

885 
	`as£π
–
ªs
!=0 );

887 if–
ªs
>0 ){

888 if–*
v1
 & 0x80 ) 
ªs
 = -1;

890 if–*
v2
 & 0x80 ) 
ªs
 = +1;

895 if–
ªs
==0 ){

896 if–
pTask
->
pS‹ãr
->
pKeyInfo
->
nFõld
>1 ){

897 
ªs
 = 
	`vdbeS‹ãrCom∑ªTaû
(

898 
pTask
, 
pbKey2Cached
, 
pKey1
, 
nKey1
, 
pKey2
, 
nKey2


901 }if–
pTask
->
pS‹ãr
->
pKeyInfo
->
aS‹tOrdî
[0] ){

902 
ªs
 =Ñes * -1;

905  
ªs
;

906 
	}
}

927 
	$sqlôe3VdbeS‹ãrInô
(

928 
sqlôe3
 *
db
,

929 
nFõld
,

930 
VdbeCurs‹
 *
pC§


932 
pgsz
;

933 
i
;

934 
VdbeS‹ãr
 *
pS‹ãr
;

935 
KeyInfo
 *
pKeyInfo
;

936 
szKeyInfo
;

937 
sz
;

938 
rc
 = 
SQLITE_OK
;

939 #i‡
SQLITE_MAX_WORKER_THREADS
==0

940 
	#nW‹kî
 0

	)

942 
nW‹kî
;

946 #i‡
SQLITE_MAX_WORKER_THREADS
>0

947 if–
	`sqlôe3TempInMem‹y
(
db
Ë|| 
sqlôe3GlobÆC⁄fig
.
bC‹eMuãx
==0 ){

948 
nW‹kî
 = 0;

950 
nW‹kî
 = 
db
->
aLimô
[
SQLITE_LIMIT_WORKER_THREADS
];

956 #i‡
SQLITE_MAX_WORKER_THREADS
>=
SORTER_MAX_MERGE_COUNT


957 if–
nW‹kî
>=
SORTER_MAX_MERGE_COUNT
 ){

958 
nW‹kî
 = 
SORTER_MAX_MERGE_COUNT
-1;

962 
	`as£π
–
pC§
->
pKeyInfo
 &&ÖC§->
pBt
==0 );

963 
	`as£π
–
pC§
->
eCurTy≥
==
CURTYPE_SORTER
 );

964 
szKeyInfo
 = (
KeyInfo
Ë+ (
pC§
->
pKeyInfo
->
nFõld
-1)*(
CﬁlSeq
*);

965 
sz
 = (
VdbeS‹ãr
Ë+ 
nW‹kî
 * (
S‹tSubèsk
);

967 
pS‹ãr
 = (
VdbeS‹ãr
*)
	`sqlôe3DbMÆlocZîo
(
db
, 
sz
 + 
szKeyInfo
);

968 
pC§
->
uc
.
pS‹ãr
 =ÖSorter;

969 if–
pS‹ãr
==0 ){

970 
rc
 = 
SQLITE_NOMEM_BKPT
;

972 
pS‹ãr
->
pKeyInfo
 =ÖKeyInfÿ(
KeyInfo
*)((
u8
*ÌS‹ã∏+ 
sz
);

973 
	`mem˝y
(
pKeyInfo
, 
pC§
->pKeyInfo, 
szKeyInfo
);

974 
pKeyInfo
->
db
 = 0;

975 if–
nFõld
 && 
nW‹kî
==0 ){

976 
pKeyInfo
->
nXFõld
 +’KeyInfo->
nFõld
 -ÇField);

977 
pKeyInfo
->
nFõld
 =ÇField;

979 
pS‹ãr
->
pgsz
 =Ögsz = 
	`sqlôe3BåìGëPageSize
(
db
->
aDb
[0].
pBt
);

980 
pS‹ãr
->
nTask
 = 
nW‹kî
 + 1;

981 
pS‹ãr
->
iPªv
 = (
u8
)(
nW‹kî
 - 1);

982 
pS‹ãr
->
bU£Thªads
 = (pS‹ãr->
nTask
>1);

983 
pS‹ãr
->
db
 = db;

984 
i
=0; i<
pS‹ãr
->
nTask
; i++){

985 
S‹tSubèsk
 *
pTask
 = &
pS‹ãr
->
aTask
[
i
];

986 
pTask
->
pS‹ãr
 =ÖSorter;

989 if–!
	`sqlôe3TempInMem‹y
(
db
) ){

990 
i64
 
mxCache
;

991 
u32
 
szPma
 = 
sqlôe3GlobÆC⁄fig
.szPma;

992 
pS‹ãr
->
mnPmaSize
 = 
szPma
 * 
pgsz
;

994 
mxCache
 = 
db
->
aDb
[0].
pSchema
->
ˇche_size
;

995 if–
mxCache
<0 ){

998 
mxCache
 = mxCache * -1024;

1000 
mxCache
 = mxCachê* 
pgsz
;

1002 
mxCache
 = 
	`MIN
(mxCache, 
SQLITE_MAX_PMASZ
);

1003 
pS‹ãr
->
mxPmaSize
 = 
	`MAX
’S‹ãr->
mnPmaSize
, ()
mxCache
);

1009 if–
sqlôe3GlobÆC⁄fig
.
pS¸©ch
==0 ){

1010 
	`as£π
–
pS‹ãr
->
iMem‹y
==0 );

1011 
pS‹ãr
->
nMem‹y
 = 
pgsz
;

1012 
pS‹ãr
->
li°
.
aMem‹y
 = (
u8
*)
	`sqlôe3MÆloc
(
pgsz
);

1013 if–!
pS‹ãr
->
li°
.
aMem‹y
 ) 
rc
 = 
SQLITE_NOMEM_BKPT
;

1017 if–(
pKeyInfo
->
nFõld
+pKeyInfo->
nXFõld
)<13

1018 && (
pKeyInfo
->
aCﬁl
[0]==0 ||ÖKeyInfo->aCﬁl[0]==
db
->
pDÊtCﬁl
)

1020 
pS‹ãr
->
ty≥Mask
 = 
SORTER_TYPE_INTEGER
 | 
SORTER_TYPE_TEXT
;

1024  
rc
;

1025 
	}
}

1026 #unde‡
nW‹kî


1031 
	$vdbeS‹ãrRec‹dFªe
(
sqlôe3
 *
db
, 
S‹ãrRec‹d
 *
pRec‹d
){

1032 
S‹ãrRec‹d
 *
p
;

1033 
S‹ãrRec‹d
 *
pNext
;

1034 
p
=
pRec‹d
;Ö;Ö=
pNext
){

1035 
pNext
 = 
p
->
u
.pNext;

1036 
	`sqlôe3DbFªe
(
db
, 
p
);

1038 
	}
}

1044 
	$vdbeS‹tSubèskCÀ™up
(
sqlôe3
 *
db
, 
S‹tSubèsk
 *
pTask
){

1045 
	`sqlôe3DbFªe
(
db
, 
pTask
->
pU≈acked
);

1046 #i‡
SQLITE_MAX_WORKER_THREADS
>0

1049 if–
pTask
->
li°
.
aMem‹y
 ){

1050 
	`sqlôe3_‰ì
(
pTask
->
li°
.
aMem‹y
);

1054 
	`as£π
–
pTask
->
li°
.
aMem‹y
==0 );

1055 
	`vdbeS‹ãrRec‹dFªe
(0, 
pTask
->
li°
.
pLi°
);

1057 if–
pTask
->
fûe
.
pFd
 ){

1058 
	`sqlôe3OsClo£Fªe
(
pTask
->
fûe
.
pFd
);

1060 if–
pTask
->
fûe2
.
pFd
 ){

1061 
	`sqlôe3OsClo£Fªe
(
pTask
->
fûe2
.
pFd
);

1063 
	`mem£t
(
pTask
, 0, (
S‹tSubèsk
));

1064 
	}
}

1066 #ifde‡
SQLITE_DEBUG_SORTER_THREADS


1067 
	$vdbeS‹ãrW‹kDebug
(
S‹tSubèsk
 *
pTask
, c⁄° *
zEvít
){

1068 
i64
 
t
;

1069 
iTask
 = (
pTask
 -ÖTask->
pS‹ãr
->
aTask
);

1070 
	`sqlôe3OsCuºítTimeI¡64
(
pTask
->
pS‹ãr
->
db
->
pVfs
, &
t
);

1071 
	`Ârötf
(
°dîr
, "%Œd:%d %s\n", 
t
, 
iTask
, 
zEvít
);

1072 
	}
}

1073 
	$vdbeS‹ãrRewödDebug
(c⁄° *
zEvít
){

1074 
i64
 
t
;

1075 
	`sqlôe3OsCuºítTimeI¡64
(
	`sqlôe3_vfs_föd
(0), &
t
);

1076 
	`Ârötf
(
°dîr
, "%Œd:X %s\n", 
t
, 
zEvít
);

1077 
	}
}

1078 
	$vdbeS‹ãrP›uœãDebug
(

1079 
S‹tSubèsk
 *
pTask
,

1080 c⁄° *
zEvít


1082 
i64
 
t
;

1083 
iTask
 = (
pTask
 -ÖTask->
pS‹ãr
->
aTask
);

1084 
	`sqlôe3OsCuºítTimeI¡64
(
pTask
->
pS‹ãr
->
db
->
pVfs
, &
t
);

1085 
	`Ârötf
(
°dîr
, "%Œd:bg%d %s\n", 
t
, 
iTask
, 
zEvít
);

1086 
	}
}

1087 
	$vdbeS‹ãrBlockDebug
(

1088 
S‹tSubèsk
 *
pTask
,

1089 
bBlocked
,

1090 c⁄° *
zEvít


1092 if–
bBlocked
 ){

1093 
i64
 
t
;

1094 
	`sqlôe3OsCuºítTimeI¡64
(
pTask
->
pS‹ãr
->
db
->
pVfs
, &
t
);

1095 
	`Ârötf
(
°dîr
, "%Œd:maö %s\n", 
t
, 
zEvít
);

1097 
	}
}

1099 
	#vdbeS‹ãrW‹kDebug
(
x
,
y
)

	)

1100 
	#vdbeS‹ãrRewödDebug
(
y
)

	)

1101 
	#vdbeS‹ãrP›uœãDebug
(
x
,
y
)

	)

1102 
	#vdbeS‹ãrBlockDebug
(
x
,
y
,
z
)

	)

1105 #i‡
SQLITE_MAX_WORKER_THREADS
>0

1109 
	$vdbeS‹ãrJoöThªad
(
S‹tSubèsk
 *
pTask
){

1110 
rc
 = 
SQLITE_OK
;

1111 if–
pTask
->
pThªad
 ){

1112 #ifde‡
SQLITE_DEBUG_SORTER_THREADS


1113 
bD⁄e
 = 
pTask
->bDone;

1115 *
pRë
 = 
	`SQLITE_INT_TO_PTR
(
SQLITE_ERROR
);

1116 
	`vdbeS‹ãrBlockDebug
(
pTask
, !
bD⁄e
, "enter");

1117 ()
	`sqlôe3ThªadJoö
(
pTask
->
pThªad
, &
pRë
);

1118 
	`vdbeS‹ãrBlockDebug
(
pTask
, !
bD⁄e
, "exit");

1119 
rc
 = 
	`SQLITE_PTR_TO_INT
(
pRë
);

1120 
	`as£π
–
pTask
->
bD⁄e
==1 );

1121 
pTask
->
bD⁄e
 = 0;

1122 
pTask
->
pThªad
 = 0;

1124  
rc
;

1125 
	}
}

1130 
vdbeS‹ãrCª©eThªad
(

1131 
S‹tSubèsk
 *
pTask
,

1132 *(*
xTask
)(*),

1133 *
pIn


1135 
as£π
–
pTask
->
pThªad
==0 &&ÖTask->
bD⁄e
==0 );

1136  
sqlôe3ThªadCª©e
(&
pTask
->
pThªad
, 
xTask
, 
pIn
);

1143 
	$vdbeS‹ãrJoöAŒ
(
VdbeS‹ãr
 *
pS‹ãr
, 
rcö
){

1144 
rc
 = 
rcö
;

1145 
i
;

1154 
i
=
pS‹ãr
->
nTask
-1; i>=0; i--){

1155 
S‹tSubèsk
 *
pTask
 = &
pS‹ãr
->
aTask
[
i
];

1156 
rc2
 = 
	`vdbeS‹ãrJoöThªad
(
pTask
);

1157 if–
rc
==
SQLITE_OK
 )Ñ¯
rc2
;

1159  
rc
;

1160 
	}
}

1162 
	#vdbeS‹ãrJoöAŒ
(
x
,
rcö
Ë‘cö)

	)

1163 
	#vdbeS‹ãrJoöThªad
(
pTask
Ë
SQLITE_OK


	)

1173 
MîgeEngöe
 *
	$vdbeMîgeEngöeNew
(
nRódî
){

1174 
N
 = 2;

1175 
nByã
;

1176 
MîgeEngöe
 *
pNew
;

1178 
	`as£π
–
nRódî
<=
SORTER_MAX_MERGE_COUNT
 );

1180  
N
<
nRódî
 ) N += N;

1181 
nByã
 = (
MîgeEngöe
Ë+ 
N
 * ((Ë+ (
PmaRódî
));

1183 
pNew
 = 
	`sqlôe3Fau…Sim
(100Ë? 0 : (
MîgeEngöe
*)
	`sqlôe3MÆlocZîo
(
nByã
);

1184 if–
pNew
 ){

1185 
pNew
->
nTªe
 = 
N
;

1186 
pNew
->
pTask
 = 0;

1187 
pNew
->
aRódr
 = (
PmaRódî
*)&pNew[1];

1188 
pNew
->
aTªe
 = (*)&pNew->
aRódr
[
N
];

1190  
pNew
;

1191 
	}
}

1196 
	$vdbeMîgeEngöeFªe
(
MîgeEngöe
 *
pMîgî
){

1197 
i
;

1198 if–
pMîgî
 ){

1199 
i
=0; i<
pMîgî
->
nTªe
; i++){

1200 
	`vdbePmaRódîCÀ¨
(&
pMîgî
->
aRódr
[
i
]);

1203 
	`sqlôe3_‰ì
(
pMîgî
);

1204 
	}
}

1210 
	$vdbeIn¸Fªe
(
In¸Mîgî
 *
pIn¸
){

1211 if–
pIn¸
 ){

1212 #i‡
SQLITE_MAX_WORKER_THREADS
>0

1213 if–
pIn¸
->
bU£Thªad
 ){

1214 
	`vdbeS‹ãrJoöThªad
(
pIn¸
->
pTask
);

1215 if–
pIn¸
->
aFûe
[0].
pFd
 ) 
	`sqlôe3OsClo£Fªe
(pIncr->aFile[0].pFd);

1216 if–
pIn¸
->
aFûe
[1].
pFd
 ) 
	`sqlôe3OsClo£Fªe
(pIncr->aFile[1].pFd);

1219 
	`vdbeMîgeEngöeFªe
(
pIn¸
->
pMîgî
);

1220 
	`sqlôe3_‰ì
(
pIn¸
);

1222 
	}
}

1227 
	$sqlôe3VdbeS‹ãrRe£t
(
sqlôe3
 *
db
, 
VdbeS‹ãr
 *
pS‹ãr
){

1228 
i
;

1229 ()
	`vdbeS‹ãrJoöAŒ
(
pS‹ãr
, 
SQLITE_OK
);

1230 
	`as£π
–
pS‹ãr
->
bU£Thªads
 ||ÖS‹ãr->
pRódî
==0 );

1231 #i‡
SQLITE_MAX_WORKER_THREADS
>0

1232 if–
pS‹ãr
->
pRódî
 ){

1233 
	`vdbePmaRódîCÀ¨
(
pS‹ãr
->
pRódî
);

1234 
	`sqlôe3DbFªe
(
db
, 
pS‹ãr
->
pRódî
);

1235 
pS‹ãr
->
pRódî
 = 0;

1238 
	`vdbeMîgeEngöeFªe
(
pS‹ãr
->
pMîgî
);

1239 
pS‹ãr
->
pMîgî
 = 0;

1240 
i
=0; i<
pS‹ãr
->
nTask
; i++){

1241 
S‹tSubèsk
 *
pTask
 = &
pS‹ãr
->
aTask
[
i
];

1242 
	`vdbeS‹tSubèskCÀ™up
(
db
, 
pTask
);

1243 
pTask
->
pS‹ãr
 =ÖSorter;

1245 if–
pS‹ãr
->
li°
.
aMem‹y
==0 ){

1246 
	`vdbeS‹ãrRec‹dFªe
(0, 
pS‹ãr
->
li°
.
pLi°
);

1248 
pS‹ãr
->
li°
.
pLi°
 = 0;

1249 
pS‹ãr
->
li°
.
szPMA
 = 0;

1250 
pS‹ãr
->
bU£PMA
 = 0;

1251 
pS‹ãr
->
iMem‹y
 = 0;

1252 
pS‹ãr
->
mxKeysize
 = 0;

1253 
	`sqlôe3DbFªe
(
db
, 
pS‹ãr
->
pU≈acked
);

1254 
pS‹ãr
->
pU≈acked
 = 0;

1255 
	}
}

1260 
	$sqlôe3VdbeS‹ãrClo£
(
sqlôe3
 *
db
, 
VdbeCurs‹
 *
pC§
){

1261 
VdbeS‹ãr
 *
pS‹ãr
;

1262 
	`as£π
–
pC§
->
eCurTy≥
==
CURTYPE_SORTER
 );

1263 
pS‹ãr
 = 
pC§
->
uc
.pSorter;

1264 if–
pS‹ãr
 ){

1265 
	`sqlôe3VdbeS‹ãrRe£t
(
db
, 
pS‹ãr
);

1266 
	`sqlôe3_‰ì
(
pS‹ãr
->
li°
.
aMem‹y
);

1267 
	`sqlôe3DbFªe
(
db
, 
pS‹ãr
);

1268 
pC§
->
uc
.
pS‹ãr
 = 0;

1270 
	}
}

1272 #i‡
SQLITE_MAX_MMAP_SIZE
>0

1282 
	$vdbeS‹ãrExãndFûe
(
sqlôe3
 *
db
, 
sqlôe3_fûe
 *
pFd
, 
i64
 
nByã
){

1283 if–
nByã
<=(
i64
)(
db
->
nMaxS‹ãrMm≠
Ë&& 
pFd
->
pMëhods
->
iVîsi⁄
>=3 ){

1284 *
p
 = 0;

1285 
chunksize
 = 4*1024;

1286 
	`sqlôe3OsFûeC⁄åﬁHöt
(
pFd
, 
SQLITE_FCNTL_CHUNK_SIZE
, &
chunksize
);

1287 
	`sqlôe3OsFûeC⁄åﬁHöt
(
pFd
, 
SQLITE_FCNTL_SIZE_HINT
, &
nByã
);

1288 
	`sqlôe3OsFëch
(
pFd
, 0, ()
nByã
, &
p
);

1289 
	`sqlôe3OsUn„tch
(
pFd
, 0, 
p
);

1291 
	}
}

1293 
	#vdbeS‹ãrExãndFûe
(
x
,
y
,
z
)

	)

1301 
	$vdbeS‹ãrO≥nTempFûe
(

1302 
sqlôe3
 *
db
,

1303 
i64
 
nExãnd
,

1304 
sqlôe3_fûe
 **
µFd


1306 
rc
;

1307 if–
	`sqlôe3Fau…Sim
(202ËË 
SQLITE_IOERR_ACCESS
;

1308 
rc
 = 
	`sqlôe3OsO≥nMÆloc
(
db
->
pVfs
, 0, 
µFd
,

1309 
SQLITE_OPEN_TEMP_JOURNAL
 |

1310 
SQLITE_OPEN_READWRITE
 | 
SQLITE_OPEN_CREATE
 |

1311 
SQLITE_OPEN_EXCLUSIVE
 | 
SQLITE_OPEN_DELETEONCLOSE
, &
rc


1313 if–
rc
==
SQLITE_OK
 ){

1314 
i64
 
max
 = 
SQLITE_MAX_MMAP_SIZE
;

1315 
	`sqlôe3OsFûeC⁄åﬁHöt
(*
µFd
, 
SQLITE_FCNTL_MMAP_SIZE
, (*)&
max
);

1316 if–
nExãnd
>0 ){

1317 
	`vdbeS‹ãrExãndFûe
(
db
, *
µFd
, 
nExãnd
);

1320  
rc
;

1321 
	}
}

1328 
	$vdbeS‹tAŒocU≈acked
(
S‹tSubèsk
 *
pTask
){

1329 if–
pTask
->
pU≈acked
==0 ){

1330 *
pFªe
;

1331 
pTask
->
pU≈acked
 = 
	`sqlôe3VdbeAŒocU≈ackedRec‹d
(

1332 
pTask
->
pS‹ãr
->
pKeyInfo
, 0, 0, &
pFªe


1334 
	`as£π
–
pTask
->
pU≈acked
==(
U≈ackedRec‹d
*)
pFªe
 );

1335 if–
pFªe
==0 )  
SQLITE_NOMEM_BKPT
;

1336 
pTask
->
pU≈acked
->
nFõld
 =ÖTask->
pS‹ãr
->
pKeyInfo
->nField;

1337 
pTask
->
pU≈acked
->
îrCode
 = 0;

1339  
SQLITE_OK
;

1340 
	}
}

1347 
	$vdbeS‹ãrMîge
(

1348 
S‹tSubèsk
 *
pTask
,

1349 
S‹ãrRec‹d
 *
p1
,

1350 
S‹ãrRec‹d
 *
p2
,

1351 
S‹ãrRec‹d
 **
µOut


1353 
S‹ãrRec‹d
 *
pFöÆ
 = 0;

1354 
S‹ãrRec‹d
 **
µ
 = &
pFöÆ
;

1355 
bCached
 = 0;

1357  
p1
 && 
p2
 ){

1358 
ªs
;

1359 
ªs
 = 
pTask
->
	`xCom∑ª
(

1360 
pTask
, &
bCached
, 
	`SRVAL
(
p1
),Ö1->
nVÆ
, SRVAL(
p2
),Ö2->nVal

1363 if–
ªs
<=0 ){

1364 *
µ
 = 
p1
;

1365 
µ
 = &
p1
->
u
.
pNext
;

1366 
p1
 =Ö1->
u
.
pNext
;

1368 *
µ
 = 
p2
;

1369 
µ
 = &
p2
->
u
.
pNext
;

1370 
p2
 =Ö2->
u
.
pNext
;

1371 
bCached
 = 0;

1374 *
µ
 = 
p1
 ?Ö1 : 
p2
;

1375 *
µOut
 = 
pFöÆ
;

1376 
	}
}

1382 
S‹ãrCom∑ª
 
	$vdbeS‹ãrGëCom∑ª
(
VdbeS‹ãr
 *
p
){

1383 if–
p
->
ty≥Mask
==
SORTER_TYPE_INTEGER
 ){

1384  
vdbeS‹ãrCom∑ªI¡
;

1385 }if–
p
->
ty≥Mask
==
SORTER_TYPE_TEXT
 ){

1386  
vdbeS‹ãrCom∑ªText
;

1388  
vdbeS‹ãrCom∑ª
;

1389 
	}
}

1396 
	$vdbeS‹ãrS‹t
(
S‹tSubèsk
 *
pTask
, 
S‹ãrLi°
 *
pLi°
){

1397 
i
;

1398 
S‹ãrRec‹d
 **
aSlŸ
;

1399 
S‹ãrRec‹d
 *
p
;

1400 
rc
;

1402 
rc
 = 
	`vdbeS‹tAŒocU≈acked
(
pTask
);

1403 if–
rc
!=
SQLITE_OK
 ) Ñc;

1405 
p
 = 
pLi°
->pList;

1406 
pTask
->
xCom∑ª
 = 
	`vdbeS‹ãrGëCom∑ª
’Task->
pS‹ãr
);

1408 
aSlŸ
 = (
S‹ãrRec‹d
 **)
	`sqlôe3MÆlocZîo
(64 * (SorterRecord *));

1409 if–!
aSlŸ
 ){

1410  
SQLITE_NOMEM_BKPT
;

1413  
p
 ){

1414 
S‹ãrRec‹d
 *
pNext
;

1415 if–
pLi°
->
aMem‹y
 ){

1416 if–(
u8
*)
p
==
pLi°
->
aMem‹y
 ){

1417 
pNext
 = 0;

1419 
	`as£π
–
p
->
u
.
iNext
<
	`sqlôe3MÆlocSize
(
pLi°
->
aMem‹y
) );

1420 
pNext
 = (
S‹ãrRec‹d
*)&
pLi°
->
aMem‹y
[
p
->
u
.
iNext
];

1423 
pNext
 = 
p
->
u
.pNext;

1426 
p
->
u
.
pNext
 = 0;

1427 
i
=0; 
aSlŸ
[i]; i++){

1428 
	`vdbeS‹ãrMîge
(
pTask
, 
p
, 
aSlŸ
[
i
], &p);

1429 
aSlŸ
[
i
] = 0;

1431 
aSlŸ
[
i
] = 
p
;

1432 
p
 = 
pNext
;

1435 
p
 = 0;

1436 
i
=0; i<64; i++){

1437 
	`vdbeS‹ãrMîge
(
pTask
, 
p
, 
aSlŸ
[
i
], &p);

1439 
pLi°
->pLi° = 
p
;

1441 
	`sqlôe3_‰ì
(
aSlŸ
);

1442 
	`as£π
–
pTask
->
pU≈acked
->
îrCode
==
SQLITE_OK


1443 || 
pTask
->
pU≈acked
->
îrCode
==
SQLITE_NOMEM


1445  
pTask
->
pU≈acked
->
îrCode
;

1446 
	}
}

1451 
	$vdbePmaWrôîInô
(

1452 
sqlôe3_fûe
 *
pFd
,

1453 
PmaWrôî
 *
p
,

1454 
nBuf
,

1455 
i64
 
iSèπ


1457 
	`mem£t
(
p
, 0, (
PmaWrôî
));

1458 
p
->
aBuf„r
 = (
u8
*)
	`sqlôe3MÆloc
(
nBuf
);

1459 if–!
p
->
aBuf„r
 ){

1460 
p
->
eFWEº
 = 
SQLITE_NOMEM_BKPT
;

1462 
p
->
iBufEnd
 =Ö->
iBufSèπ
 = (
iSèπ
 % 
nBuf
);

1463 
p
->
iWrôeOff
 = 
iSèπ
 -Ö->
iBufSèπ
;

1464 
p
->
nBuf„r
 = 
nBuf
;

1465 
p
->
pFd
 =ÖFd;

1467 
	}
}

1473 
	$vdbePmaWrôeBlob
(
PmaWrôî
 *
p
, 
u8
 *
pD©a
, 
nD©a
){

1474 
nRem
 = 
nD©a
;

1475  
nRem
>0 && 
p
->
eFWEº
==0 ){

1476 
nC›y
 = 
nRem
;

1477 if–
nC›y
>(
p
->
nBuf„r
 -Ö->
iBufEnd
) ){

1478 
nC›y
 = 
p
->
nBuf„r
 -Ö->
iBufEnd
;

1481 
	`mem˝y
(&
p
->
aBuf„r
[p->
iBufEnd
], &
pD©a
[
nD©a
-
nRem
], 
nC›y
);

1482 
p
->
iBufEnd
 +
nC›y
;

1483 if–
p
->
iBufEnd
=ı->
nBuf„r
 ){

1484 
p
->
eFWEº
 = 
	`sqlôe3OsWrôe
’->
pFd
,

1485 &
p
->
aBuf„r
[p->
iBufSèπ
],Ö->
iBufEnd
 -Ö->iBufStart,

1486 
p
->
iWrôeOff
 +Ö->
iBufSèπ


1488 
p
->
iBufSèπ
 =Ö->
iBufEnd
 = 0;

1489 
p
->
iWrôeOff
 +p->
nBuf„r
;

1491 
	`as£π
–
p
->
iBufEnd
<p->
nBuf„r
 );

1493 
nRem
 -
nC›y
;

1495 
	}
}

1506 
	$vdbePmaWrôîFöish
(
PmaWrôî
 *
p
, 
i64
 *
piEof
){

1507 
rc
;

1508 if–
p
->
eFWEº
==0 && 
	`ALWAYS
’->
aBuf„r
Ë&&Ö->
iBufEnd
>p->
iBufSèπ
 ){

1509 
p
->
eFWEº
 = 
	`sqlôe3OsWrôe
’->
pFd
,

1510 &
p
->
aBuf„r
[p->
iBufSèπ
],Ö->
iBufEnd
 -Ö->iBufStart,

1511 
p
->
iWrôeOff
 +Ö->
iBufSèπ


1514 *
piEof
 = (
p
->
iWrôeOff
 +Ö->
iBufEnd
);

1515 
	`sqlôe3_‰ì
(
p
->
aBuf„r
);

1516 
rc
 = 
p
->
eFWEº
;

1517 
	`mem£t
(
p
, 0, (
PmaWrôî
));

1518  
rc
;

1519 
	}
}

1525 
	$vdbePmaWrôeV¨öt
(
PmaWrôî
 *
p
, 
u64
 
iVÆ
){

1526 
nByã
;

1527 
u8
 
aByã
[10];

1528 
nByã
 = 
	`sqlôe3PutV¨öt
(
aByã
, 
iVÆ
);

1529 
	`vdbePmaWrôeBlob
(
p
, 
aByã
, 
nByã
);

1530 
	}
}

1546 
	$vdbeS‹ãrLi°ToPMA
(
S‹tSubèsk
 *
pTask
, 
S‹ãrLi°
 *
pLi°
){

1547 
sqlôe3
 *
db
 = 
pTask
->
pS‹ãr
->db;

1548 
rc
 = 
SQLITE_OK
;

1549 
PmaWrôî
 
wrôî
;

1551 #ifde‡
SQLITE_DEBUG


1554 
i64
 
iSz
 = 
pLi°
->
szPMA
 + 
	`sqlôe3V¨ötLí
’Li°->szPMAË+ 
pTask
->
fûe
.
iEof
;

1557 
	`vdbeS‹ãrW‹kDebug
(
pTask
, "enter");

1558 
	`mem£t
(&
wrôî
, 0, (
PmaWrôî
));

1559 
	`as£π
–
pLi°
->
szPMA
>0 );

1562 if–
pTask
->
fûe
.
pFd
==0 ){

1563 
rc
 = 
	`vdbeS‹ãrO≥nTempFûe
(
db
, 0, &
pTask
->
fûe
.
pFd
);

1564 
	`as£π
–
rc
!=
SQLITE_OK
 || 
pTask
->
fûe
.
pFd
 );

1565 
	`as£π
–
pTask
->
fûe
.
iEof
==0 );

1566 
	`as£π
–
pTask
->
nPMA
==0 );

1570 if–
rc
==
SQLITE_OK
 ){

1571 
	`vdbeS‹ãrExãndFûe
(
db
, 
pTask
->
fûe
.
pFd
,ÖTask->fûe.
iEof
+
pLi°
->
szPMA
+9);

1575 if–
rc
==
SQLITE_OK
 ){

1576 
rc
 = 
	`vdbeS‹ãrS‹t
(
pTask
, 
pLi°
);

1579 if–
rc
==
SQLITE_OK
 ){

1580 
S‹ãrRec‹d
 *
p
;

1581 
S‹ãrRec‹d
 *
pNext
 = 0;

1583 
	`vdbePmaWrôîInô
(
pTask
->
fûe
.
pFd
, &
wrôî
,ÖTask->
pS‹ãr
->
pgsz
,

1584 
pTask
->
fûe
.
iEof
);

1585 
pTask
->
nPMA
++;

1586 
	`vdbePmaWrôeV¨öt
(&
wrôî
, 
pLi°
->
szPMA
);

1587 
p
=
pLi°
->pLi°;Ö;Ö=
pNext
){

1588 
pNext
 = 
p
->
u
.pNext;

1589 
	`vdbePmaWrôeV¨öt
(&
wrôî
, 
p
->
nVÆ
);

1590 
	`vdbePmaWrôeBlob
(&
wrôî
, 
	`SRVAL
(
p
),Ö->
nVÆ
);

1591 if–
pLi°
->
aMem‹y
==0 ) 
	`sqlôe3_‰ì
(
p
);

1593 
pLi°
->pLi° = 
p
;

1594 
rc
 = 
	`vdbePmaWrôîFöish
(&
wrôî
, &
pTask
->
fûe
.
iEof
);

1597 
	`vdbeS‹ãrW‹kDebug
(
pTask
, "exit");

1598 
	`as£π
–
rc
!=
SQLITE_OK
 || 
pLi°
->pList==0 );

1599 
	`as£π
–
rc
!=
SQLITE_OK
 || 
pTask
->
fûe
.
iEof
==
iSz
 );

1600  
rc
;

1601 
	}
}

1610 
	$vdbeMîgeEngöeSãp
(

1611 
MîgeEngöe
 *
pMîgî
,

1612 *
pbEof


1614 
rc
;

1615 
iPªv
 = 
pMîgî
->
aTªe
[1];

1616 
S‹tSubèsk
 *
pTask
 = 
pMîgî
->pTask;

1619 
rc
 = 
	`vdbePmaRódîNext
(&
pMîgî
->
aRódr
[
iPªv
]);

1622 if–
rc
==
SQLITE_OK
 ){

1623 
i
;

1624 
PmaRódî
 *
pRódr1
;

1625 
PmaRódî
 *
pRódr2
;

1626 
bCached
 = 0;

1630 
pRódr1
 = &
pMîgî
->
aRódr
[(
iPªv
 & 0xFFFE)];

1631 
pRódr2
 = &
pMîgî
->
aRódr
[(
iPªv
 | 0x0001)];

1633 
i
=(
pMîgî
->
nTªe
+
iPªv
)/2; i>0; i=i/2){

1635 
iRes
;

1636 if–
pRódr1
->
pFd
==0 ){

1637 
iRes
 = +1;

1638 }if–
pRódr2
->
pFd
==0 ){

1639 
iRes
 = -1;

1641 
iRes
 = 
pTask
->
	`xCom∑ª
’Task, &
bCached
,

1642 
pRódr1
->
aKey
,ÖRódr1->
nKey
, 
pRódr2
->aKey,ÖReadr2->nKey

1661 if–
iRes
<0 || (iRes==0 && 
pRódr1
<
pRódr2
) ){

1662 
pMîgî
->
aTªe
[
i
] = ()(
pRódr1
 -ÖMîgî->
aRódr
);

1663 
pRódr2
 = &
pMîgî
->
aRódr
[ÖMîgî->
aTªe
[
i
 ^ 0x0001] ];

1664 
bCached
 = 0;

1666 if–
pRódr1
->
pFd
 ) 
bCached
 = 0;

1667 
pMîgî
->
aTªe
[
i
] = ()(
pRódr2
 -ÖMîgî->
aRódr
);

1668 
pRódr1
 = &
pMîgî
->
aRódr
[ÖMîgî->
aTªe
[
i
 ^ 0x0001] ];

1671 *
pbEof
 = (
pMîgî
->
aRódr
[pMîgî->
aTªe
[1]].
pFd
==0);

1674  (
rc
==
SQLITE_OK
 ? 
pTask
->
pU≈acked
->
îrCode
 :Ñc);

1675 
	}
}

1677 #i‡
SQLITE_MAX_WORKER_THREADS
>0

1681 *
	$vdbeS‹ãrFlushThªad
(*
pCtx
){

1682 
S‹tSubèsk
 *
pTask
 = (S‹tSubèsk*)
pCtx
;

1683 
rc
;

1684 
	`as£π
–
pTask
->
bD⁄e
==0 );

1685 
rc
 = 
	`vdbeS‹ãrLi°ToPMA
(
pTask
, &pTask->
li°
);

1686 
pTask
->
bD⁄e
 = 1;

1687  
	`SQLITE_INT_TO_PTR
(
rc
);

1688 
	}
}

1695 
	$vdbeS‹ãrFlushPMA
(
VdbeS‹ãr
 *
pS‹ãr
){

1696 #i‡
SQLITE_MAX_WORKER_THREADS
==0

1697 
pS‹ãr
->
bU£PMA
 = 1;

1698  
	`vdbeS‹ãrLi°ToPMA
(&
pS‹ãr
->
aTask
[0], &pS‹ãr->
li°
);

1700 
rc
 = 
SQLITE_OK
;

1701 
i
;

1702 
S‹tSubèsk
 *
pTask
 = 0;

1703 
nW‹kî
 = (
pS‹ãr
->
nTask
-1);

1707 
pS‹ãr
->
bU£PMA
 = 1;

1717 
i
=0; i<
nW‹kî
; i++){

1718 
iTe°
 = (
pS‹ãr
->
iPªv
 + 
i
 + 1Ë% 
nW‹kî
;

1719 
pTask
 = &
pS‹ãr
->
aTask
[
iTe°
];

1720 if–
pTask
->
bD⁄e
 ){

1721 
rc
 = 
	`vdbeS‹ãrJoöThªad
(
pTask
);

1723 if–
rc
!=
SQLITE_OK
 || 
pTask
->
pThªad
==0 ) ;

1726 if–
rc
==
SQLITE_OK
 ){

1727 if–
i
==
nW‹kî
 ){

1729 
rc
 = 
	`vdbeS‹ãrLi°ToPMA
(&
pS‹ãr
->
aTask
[
nW‹kî
], &pS‹ãr->
li°
);

1732 
u8
 *
aMem
 = 
pTask
->
li°
.
aMem‹y
;

1733 *
pCtx
 = (*)
pTask
;

1735 
	`as£π
–
pTask
->
pThªad
==0 &&ÖTask->
bD⁄e
==0 );

1736 
	`as£π
–
pTask
->
li°
.
pLi°
==0 );

1737 
	`as£π
–
pTask
->
li°
.
aMem‹y
==0 || 
pS‹ãr
->list.aMemory!=0 );

1739 
pS‹ãr
->
iPªv
 = (
u8
)(
pTask
 -ÖS‹ãr->
aTask
);

1740 
pTask
->
li°
 = 
pS‹ãr
->list;

1741 
pS‹ãr
->
li°
.
pLi°
 = 0;

1742 
pS‹ãr
->
li°
.
szPMA
 = 0;

1743 if–
aMem
 ){

1744 
pS‹ãr
->
li°
.
aMem‹y
 = 
aMem
;

1745 
pS‹ãr
->
nMem‹y
 = 
	`sqlôe3MÆlocSize
(
aMem
);

1746 }if–
pS‹ãr
->
li°
.
aMem‹y
 ){

1747 
pS‹ãr
->
li°
.
aMem‹y
 = 
	`sqlôe3MÆloc
’S‹ãr->
nMem‹y
);

1748 if–!
pS‹ãr
->
li°
.
aMem‹y
 )  
SQLITE_NOMEM_BKPT
;

1751 
rc
 = 
	`vdbeS‹ãrCª©eThªad
(
pTask
, 
vdbeS‹ãrFlushThªad
, 
pCtx
);

1755  
rc
;

1757 
	}
}

1762 
	$sqlôe3VdbeS‹ãrWrôe
(

1763 c⁄° 
VdbeCurs‹
 *
pC§
,

1764 
Mem
 *
pVÆ


1766 
VdbeS‹ãr
 *
pS‹ãr
;

1767 
rc
 = 
SQLITE_OK
;

1768 
S‹ãrRec‹d
 *
pNew
;

1769 
bFlush
;

1770 
nReq
;

1771 
nPMA
;

1772 
t
;

1774 
	`as£π
–
pC§
->
eCurTy≥
==
CURTYPE_SORTER
 );

1775 
pS‹ãr
 = 
pC§
->
uc
.pSorter;

1776 
	`gëV¨öt32
((c⁄° 
u8
*)&
pVÆ
->
z
[1], 
t
);

1777 if–
t
>0 &&Å<10 &&Å!=7 ){

1778 
pS‹ãr
->
ty≥Mask
 &
SORTER_TYPE_INTEGER
;

1779 }if–
t
>10 && (t & 0x01) ){

1780 
pS‹ãr
->
ty≥Mask
 &
SORTER_TYPE_TEXT
;

1782 
pS‹ãr
->
ty≥Mask
 = 0;

1785 
	`as£π
–
pS‹ãr
 );

1803 
nReq
 = 
pVÆ
->
n
 + (
S‹ãrRec‹d
);

1804 
nPMA
 = 
pVÆ
->
n
 + 
	`sqlôe3V¨ötLí
(pVal->n);

1805 if–
pS‹ãr
->
mxPmaSize
 ){

1806 if–
pS‹ãr
->
li°
.
aMem‹y
 ){

1807 
bFlush
 = 
pS‹ãr
->
iMem‹y
 && (pS‹ãr->iMem‹y+
nReq
Ë>ÖS‹ãr->
mxPmaSize
;

1809 
bFlush
 = (

1810 (
pS‹ãr
->
li°
.
szPMA
 >ÖS‹ãr->
mxPmaSize
)

1811 || (
pS‹ãr
->
li°
.
szPMA
 >ÖS‹ãr->
mnPmaSize
 && 
	`sqlôe3HópNóæyFuŒ
())

1814 if–
bFlush
 ){

1815 
rc
 = 
	`vdbeS‹ãrFlushPMA
(
pS‹ãr
);

1816 
pS‹ãr
->
li°
.
szPMA
 = 0;

1817 
pS‹ãr
->
iMem‹y
 = 0;

1818 
	`as£π
–
rc
!=
SQLITE_OK
 || 
pS‹ãr
->
li°
.
pLi°
==0 );

1822 
pS‹ãr
->
li°
.
szPMA
 +
nPMA
;

1823 if–
nPMA
>
pS‹ãr
->
mxKeysize
 ){

1824 
pS‹ãr
->
mxKeysize
 = 
nPMA
;

1827 if–
pS‹ãr
->
li°
.
aMem‹y
 ){

1828 
nMö
 = 
pS‹ãr
->
iMem‹y
 + 
nReq
;

1830 if–
nMö
>
pS‹ãr
->
nMem‹y
 ){

1831 
u8
 *
aNew
;

1832 
iLi°Off
 = (
u8
*)
pS‹ãr
->
li°
.
pLi°
 -ÖS‹ãr->li°.
aMem‹y
;

1833 
nNew
 = 
pS‹ãr
->
nMem‹y
 * 2;

1834  
nNew
 < 
nMö
 )ÇNew =ÇNew*2;

1835 if–
nNew
 > 
pS‹ãr
->
mxPmaSize
 )ÇNew =ÖSorter->mxPmaSize;

1836 if–
nNew
 < 
nMö
 )ÇNew =ÇMin;

1838 
aNew
 = 
	`sqlôe3RóŒoc
(
pS‹ãr
->
li°
.
aMem‹y
, 
nNew
);

1839 if–!
aNew
 )  
SQLITE_NOMEM_BKPT
;

1840 
pS‹ãr
->
li°
.
pLi°
 = (
S‹ãrRec‹d
*)&
aNew
[
iLi°Off
];

1841 
pS‹ãr
->
li°
.
aMem‹y
 = 
aNew
;

1842 
pS‹ãr
->
nMem‹y
 = 
nNew
;

1845 
pNew
 = (
S‹ãrRec‹d
*)&
pS‹ãr
->
li°
.
aMem‹y
[pS‹ãr->
iMem‹y
];

1846 
pS‹ãr
->
iMem‹y
 +
	`ROUND8
(
nReq
);

1847 if–
pS‹ãr
->
li°
.
pLi°
 ){

1848 
pNew
->
u
.
iNext
 = ()((
u8
*)(
pS‹ãr
->
li°
.
pLi°
Ë-ÖS‹ãr->li°.
aMem‹y
);

1851 
pNew
 = (
S‹ãrRec‹d
 *)
	`sqlôe3MÆloc
(
nReq
);

1852 if–
pNew
==0 ){

1853  
SQLITE_NOMEM_BKPT
;

1855 
pNew
->
u
.
pNext
 = 
pS‹ãr
->
li°
.
pLi°
;

1858 
	`mem˝y
(
	`SRVAL
(
pNew
), 
pVÆ
->
z
,ÖVÆ->
n
);

1859 
pNew
->
nVÆ
 = 
pVÆ
->
n
;

1860 
pS‹ãr
->
li°
.
pLi°
 = 
pNew
;

1862  
rc
;

1863 
	}
}

1870 
	$vdbeIn¸P›uœã
(
In¸Mîgî
 *
pIn¸
){

1871 
rc
 = 
SQLITE_OK
;

1872 
rc2
;

1873 
i64
 
iSèπ
 = 
pIn¸
->
iSèπOff
;

1874 
S‹ãrFûe
 *
pOut
 = &
pIn¸
->
aFûe
[1];

1875 
S‹tSubèsk
 *
pTask
 = 
pIn¸
->pTask;

1876 
MîgeEngöe
 *
pMîgî
 = 
pIn¸
->pMerger;

1877 
PmaWrôî
 
wrôî
;

1878 
	`as£π
–
pIn¸
->
bEof
==0 );

1880 
	`vdbeS‹ãrP›uœãDebug
(
pTask
, "enter");

1882 
	`vdbePmaWrôîInô
(
pOut
->
pFd
, &
wrôî
, 
pTask
->
pS‹ãr
->
pgsz
, 
iSèπ
);

1883  
rc
==
SQLITE_OK
 ){

1884 
dummy
;

1885 
PmaRódî
 *
pRódî
 = &
pMîgî
->
aRódr
[ÖMîgî->
aTªe
[1] ];

1886 
nKey
 = 
pRódî
->nKey;

1887 
i64
 
iEof
 = 
wrôî
.
iWrôeOff
 + wrôî.
iBufEnd
;

1891 if–
pRódî
->
pFd
==0 ) ;

1892 if–(
iEof
 + 
nKey
 + 
	`sqlôe3V¨ötLí
“Key))>(
iSèπ
 + 
pIn¸
->
mxSz
) ) ;

1895 
	`vdbePmaWrôeV¨öt
(&
wrôî
, 
nKey
);

1896 
	`vdbePmaWrôeBlob
(&
wrôî
, 
pRódî
->
aKey
, 
nKey
);

1897 
	`as£π
–
pIn¸
->
pMîgî
->
pTask
==pTask );

1898 
rc
 = 
	`vdbeMîgeEngöeSãp
(
pIn¸
->
pMîgî
, &
dummy
);

1901 
rc2
 = 
	`vdbePmaWrôîFöish
(&
wrôî
, &
pOut
->
iEof
);

1902 if–
rc
==
SQLITE_OK
 )Ñ¯
rc2
;

1903 
	`vdbeS‹ãrP›uœãDebug
(
pTask
, "exit");

1904  
rc
;

1905 
	}
}

1907 #i‡
SQLITE_MAX_WORKER_THREADS
>0

1912 *
	$vdbeIn¸P›uœãThªad
(*
pCtx
){

1913 
In¸Mîgî
 *
pIn¸
 = (In¸Mîgî*)
pCtx
;

1914 *
pRë
 = 
	`SQLITE_INT_TO_PTR
–
	`vdbeIn¸P›uœã
(
pIn¸
) );

1915 
pIn¸
->
pTask
->
bD⁄e
 = 1;

1916  
pRë
;

1917 
	}
}

1922 
	$vdbeIn¸BgP›uœã
(
In¸Mîgî
 *
pIn¸
){

1923 *
p
 = (*)
pIn¸
;

1924 
	`as£π
–
pIn¸
->
bU£Thªad
 );

1925  
	`vdbeS‹ãrCª©eThªad
(
pIn¸
->
pTask
, 
vdbeIn¸P›uœãThªad
, 
p
);

1926 
	}
}

1946 
	$vdbeIn¸Sw≠
(
In¸Mîgî
 *
pIn¸
){

1947 
rc
 = 
SQLITE_OK
;

1949 #i‡
SQLITE_MAX_WORKER_THREADS
>0

1950 if–
pIn¸
->
bU£Thªad
 ){

1951 
rc
 = 
	`vdbeS‹ãrJoöThªad
(
pIn¸
->
pTask
);

1953 if–
rc
==
SQLITE_OK
 ){

1954 
S‹ãrFûe
 
f0
 = 
pIn¸
->
aFûe
[0];

1955 
pIn¸
->
aFûe
[0] =ÖIncr->aFile[1];

1956 
pIn¸
->
aFûe
[1] = 
f0
;

1959 if–
rc
==
SQLITE_OK
 ){

1960 if–
pIn¸
->
aFûe
[0].
iEof
=ıIn¸->
iSèπOff
 ){

1961 
pIn¸
->
bEof
 = 1;

1963 
rc
 = 
	`vdbeIn¸BgP›uœã
(
pIn¸
);

1969 
rc
 = 
	`vdbeIn¸P›uœã
(
pIn¸
);

1970 
pIn¸
->
aFûe
[0] =ÖIncr->aFile[1];

1971 if–
pIn¸
->
aFûe
[0].
iEof
=ıIn¸->
iSèπOff
 ){

1972 
pIn¸
->
bEof
 = 1;

1976  
rc
;

1977 
	}
}

1985 
	$vdbeIn¸MîgîNew
(

1986 
S‹tSubèsk
 *
pTask
,

1987 
MîgeEngöe
 *
pMîgî
,

1988 
In¸Mîgî
 **
µOut


1990 
rc
 = 
SQLITE_OK
;

1991 
In¸Mîgî
 *
pIn¸
 = *
µOut
 = (IncrMerger*)

1992 (
	`sqlôe3Fau…Sim
(100Ë? 0 : 
	`sqlôe3MÆlocZîo
((*
pIn¸
)));

1993 if–
pIn¸
 ){

1994 
pIn¸
->
pMîgî
 =ÖMerger;

1995 
pIn¸
->
pTask
 =ÖTask;

1996 
pIn¸
->
mxSz
 = 
	`MAX
(
pTask
->
pS‹ãr
->
mxKeysize
+9,pTask->pS‹ãr->
mxPmaSize
/2);

1997 
pTask
->
fûe2
.
iEof
 +
pIn¸
->
mxSz
;

1999 
	`vdbeMîgeEngöeFªe
(
pMîgî
);

2000 
rc
 = 
SQLITE_NOMEM_BKPT
;

2002  
rc
;

2003 
	}
}

2005 #i‡
SQLITE_MAX_WORKER_THREADS
>0

2009 
	$vdbeIn¸MîgîSëThªads
(
In¸Mîgî
 *
pIn¸
){

2010 
pIn¸
->
bU£Thªad
 = 1;

2011 
pIn¸
->
pTask
->
fûe2
.
iEof
 -pIn¸->
mxSz
;

2012 
	}
}

2022 
	$vdbeMîgeEngöeCom∑ª
(

2023 
MîgeEngöe
 *
pMîgî
,

2024 
iOut


2026 
i1
;

2027 
i2
;

2028 
iRes
;

2029 
PmaRódî
 *
p1
;

2030 
PmaRódî
 *
p2
;

2032 
	`as£π
–
iOut
<
pMîgî
->
nTªe
 && iOut>0 );

2034 if–
iOut
>=(
pMîgî
->
nTªe
/2) ){

2035 
i1
 = (
iOut
 - 
pMîgî
->
nTªe
/2) * 2;

2036 
i2
 = 
i1
 + 1;

2038 
i1
 = 
pMîgî
->
aTªe
[
iOut
*2];

2039 
i2
 = 
pMîgî
->
aTªe
[
iOut
*2+1];

2042 
p1
 = &
pMîgî
->
aRódr
[
i1
];

2043 
p2
 = &
pMîgî
->
aRódr
[
i2
];

2045 if–
p1
->
pFd
==0 ){

2046 
iRes
 = 
i2
;

2047 }if–
p2
->
pFd
==0 ){

2048 
iRes
 = 
i1
;

2050 
S‹tSubèsk
 *
pTask
 = 
pMîgî
->pTask;

2051 
bCached
 = 0;

2052 
ªs
;

2053 
	`as£π
–
pTask
->
pU≈acked
!=0 );

2054 
ªs
 = 
pTask
->
	`xCom∑ª
(

2055 
pTask
, &
bCached
, 
p1
->
aKey
,Ö1->
nKey
, 
p2
->aKey,Ö2->nKey

2057 if–
ªs
<=0 ){

2058 
iRes
 = 
i1
;

2060 
iRes
 = 
i2
;

2064 
pMîgî
->
aTªe
[
iOut
] = 
iRes
;

2065 
	}
}

2075 
	#INCRINIT_NORMAL
 0

	)

2076 
	#INCRINIT_TASK
 1

	)

2077 
	#INCRINIT_ROOT
 2

	)

2084 
vdbePmaRódîIn¸Inô
(
PmaRódî
 *
pRódr
, 
eMode
);

2104 
	$vdbeMîgeEngöeInô
(

2105 
S‹tSubèsk
 *
pTask
,

2106 
MîgeEngöe
 *
pMîgî
,

2107 
eMode


2109 
rc
 = 
SQLITE_OK
;

2110 
i
;

2111 
nTªe
 = 
pMîgî
->nTree;

2114 
	`as£π
–
SQLITE_MAX_WORKER_THREADS
>0 || 
eMode
==
INCRINIT_NORMAL
 );

2117 
	`as£π
–
pMîgî
->
pTask
==0 );

2118 
pMîgî
->
pTask
 =ÖTask;

2120 
i
=0; i<
nTªe
; i++){

2121 if–
SQLITE_MAX_WORKER_THREADS
>0 && 
eMode
==
INCRINIT_ROOT
 ){

2129 
rc
 = 
	`vdbePmaRódîNext
(&
pMîgî
->
aRódr
[
nTªe
-
i
-1]);

2131 
rc
 = 
	`vdbePmaRódîIn¸Inô
(&
pMîgî
->
aRódr
[
i
], 
INCRINIT_NORMAL
);

2133 if–
rc
!=
SQLITE_OK
 ) Ñc;

2136 
i
=
pMîgî
->
nTªe
-1; i>0; i--){

2137 
	`vdbeMîgeEngöeCom∑ª
(
pMîgî
, 
i
);

2139  
pTask
->
pU≈acked
->
îrCode
;

2140 
	}
}

2175 
	$vdbePmaRódîIn¸MîgeInô
(
PmaRódî
 *
pRódr
, 
eMode
){

2176 
rc
 = 
SQLITE_OK
;

2177 
In¸Mîgî
 *
pIn¸
 = 
pRódr
->pIncr;

2178 
S‹tSubèsk
 *
pTask
 = 
pIn¸
->pTask;

2179 
sqlôe3
 *
db
 = 
pTask
->
pS‹ãr
->db;

2182 
	`as£π
–
SQLITE_MAX_WORKER_THREADS
>0 || 
eMode
==
INCRINIT_NORMAL
 );

2184 
rc
 = 
	`vdbeMîgeEngöeInô
(
pTask
, 
pIn¸
->
pMîgî
, 
eMode
);

2189 if–
rc
==
SQLITE_OK
 ){

2190 
mxSz
 = 
pIn¸
->mxSz;

2191 #i‡
SQLITE_MAX_WORKER_THREADS
>0

2192 if–
pIn¸
->
bU£Thªad
 ){

2193 
rc
 = 
	`vdbeS‹ãrO≥nTempFûe
(
db
, 
mxSz
, &
pIn¸
->
aFûe
[0].
pFd
);

2194 if–
rc
==
SQLITE_OK
 ){

2195 
rc
 = 
	`vdbeS‹ãrO≥nTempFûe
(
db
, 
mxSz
, &
pIn¸
->
aFûe
[1].
pFd
);

2200 if–
pTask
->
fûe2
.
pFd
==0 ){

2201 
	`as£π
–
pTask
->
fûe2
.
iEof
>0 );

2202 
rc
 = 
	`vdbeS‹ãrO≥nTempFûe
(
db
, 
pTask
->
fûe2
.
iEof
, &pTask->fûe2.
pFd
);

2203 
pTask
->
fûe2
.
iEof
 = 0;

2205 if–
rc
==
SQLITE_OK
 ){

2206 
pIn¸
->
aFûe
[1].
pFd
 = 
pTask
->
fûe2
.pFd;

2207 
pIn¸
->
iSèπOff
 = 
pTask
->
fûe2
.
iEof
;

2208 
pTask
->
fûe2
.
iEof
 +
mxSz
;

2213 #i‡
SQLITE_MAX_WORKER_THREADS
>0

2214 if–
rc
==
SQLITE_OK
 && 
pIn¸
->
bU£Thªad
 ){

2225 
	`as£π
–
eMode
==
INCRINIT_ROOT
 ||ÉMode==
INCRINIT_TASK
 );

2226 
rc
 = 
	`vdbeIn¸P›uœã
(
pIn¸
);

2230 if–
rc
==
SQLITE_OK
 && (
SQLITE_MAX_WORKER_THREADS
==0 || 
eMode
!=
INCRINIT_TASK
) ){

2231 
rc
 = 
	`vdbePmaRódîNext
(
pRódr
);

2234  
rc
;

2235 
	}
}

2237 #i‡
SQLITE_MAX_WORKER_THREADS
>0

2242 *
	$vdbePmaRódîBgIn¸Inô
(*
pCtx
){

2243 
PmaRódî
 *
pRódî
 = (PmaRódî*)
pCtx
;

2244 *
pRë
 = 
	`SQLITE_INT_TO_PTR
(

2245 
	`vdbePmaRódîIn¸MîgeInô
(
pRódî
,
INCRINIT_TASK
)

2247 
pRódî
->
pIn¸
->
pTask
->
bD⁄e
 = 1;

2248  
pRë
;

2249 
	}
}

2263 
	$vdbePmaRódîIn¸Inô
(
PmaRódî
 *
pRódr
, 
eMode
){

2264 
In¸Mîgî
 *
pIn¸
 = 
pRódr
->pIncr;

2265 
rc
 = 
SQLITE_OK
;

2266 if–
pIn¸
 ){

2267 #i‡
SQLITE_MAX_WORKER_THREADS
>0

2268 
	`as£π
–
pIn¸
->
bU£Thªad
==0 || 
eMode
==
INCRINIT_TASK
 );

2269 if–
pIn¸
->
bU£Thªad
 ){

2270 *
pCtx
 = (*)
pRódr
;

2271 
rc
 = 
	`vdbeS‹ãrCª©eThªad
(
pIn¸
->
pTask
, 
vdbePmaRódîBgIn¸Inô
, 
pCtx
);

2275 
rc
 = 
	`vdbePmaRódîIn¸MîgeInô
(
pRódr
, 
eMode
);

2278  
rc
;

2279 
	}
}

2293 
	$vdbeMîgeEngöeLevñ0
(

2294 
S‹tSubèsk
 *
pTask
,

2295 
nPMA
,

2296 
i64
 *
piOff£t
,

2297 
MîgeEngöe
 **
µOut


2299 
MîgeEngöe
 *
pNew
;

2300 
i64
 
iOff
 = *
piOff£t
;

2301 
i
;

2302 
rc
 = 
SQLITE_OK
;

2304 *
µOut
 = 
pNew
 = 
	`vdbeMîgeEngöeNew
(
nPMA
);

2305 if–
pNew
==0 ) 
rc
 = 
SQLITE_NOMEM_BKPT
;

2307 
i
=0; i<
nPMA
 && 
rc
==
SQLITE_OK
; i++){

2308 
i64
 
nDummy
 = 0;

2309 
PmaRódî
 *
pRódr
 = &
pNew
->
aRódr
[
i
];

2310 
rc
 = 
	`vdbePmaRódîInô
(
pTask
, &pTask->
fûe
, 
iOff
, 
pRódr
, &
nDummy
);

2311 
iOff
 = 
pRódr
->
iEof
;

2314 if–
rc
!=
SQLITE_OK
 ){

2315 
	`vdbeMîgeEngöeFªe
(
pNew
);

2316 *
µOut
 = 0;

2318 *
piOff£t
 = 
iOff
;

2319  
rc
;

2320 
	}
}

2332 
	$vdbeS‹ãrTªeDïth
(
nPMA
){

2333 
nDïth
 = 0;

2334 
i64
 
nDiv
 = 
SORTER_MAX_MERGE_COUNT
;

2335  
nDiv
 < (
i64
)
nPMA
 ){

2336 
nDiv
 =ÇDiv * 
SORTER_MAX_MERGE_COUNT
;

2337 
nDïth
++;

2339  
nDïth
;

2340 
	}
}

2350 
	$vdbeS‹ãrAddToTªe
(

2351 
S‹tSubèsk
 *
pTask
,

2352 
nDïth
,

2353 
iSeq
,

2354 
MîgeEngöe
 *
pRoŸ
,

2355 
MîgeEngöe
 *
pLóf


2357 
rc
 = 
SQLITE_OK
;

2358 
nDiv
 = 1;

2359 
i
;

2360 
MîgeEngöe
 *
p
 = 
pRoŸ
;

2361 
In¸Mîgî
 *
pIn¸
;

2363 
rc
 = 
	`vdbeIn¸MîgîNew
(
pTask
, 
pLóf
, &
pIn¸
);

2365 
i
=1; i<
nDïth
; i++){

2366 
nDiv
 =ÇDiv * 
SORTER_MAX_MERGE_COUNT
;

2369 
i
=1; i<
nDïth
 && 
rc
==
SQLITE_OK
; i++){

2370 
iIãr
 = (
iSeq
 / 
nDiv
Ë% 
SORTER_MAX_MERGE_COUNT
;

2371 
PmaRódî
 *
pRódr
 = &
p
->
aRódr
[
iIãr
];

2373 if–
pRódr
->
pIn¸
==0 ){

2374 
MîgeEngöe
 *
pNew
 = 
	`vdbeMîgeEngöeNew
(
SORTER_MAX_MERGE_COUNT
);

2375 if–
pNew
==0 ){

2376 
rc
 = 
SQLITE_NOMEM_BKPT
;

2378 
rc
 = 
	`vdbeIn¸MîgîNew
(
pTask
, 
pNew
, &
pRódr
->
pIn¸
);

2381 if–
rc
==
SQLITE_OK
 ){

2382 
p
 = 
pRódr
->
pIn¸
->
pMîgî
;

2383 
nDiv
 =ÇDiv / 
SORTER_MAX_MERGE_COUNT
;

2387 if–
rc
==
SQLITE_OK
 ){

2388 
p
->
aRódr
[
iSeq
 % 
SORTER_MAX_MERGE_COUNT
].
pIn¸
 =ÖIncr;

2390 
	`vdbeIn¸Fªe
(
pIn¸
);

2392  
rc
;

2393 
	}
}

2406 
	$vdbeS‹ãrMîgeTªeBuûd
(

2407 
VdbeS‹ãr
 *
pS‹ãr
,

2408 
MîgeEngöe
 **
µOut


2410 
MîgeEngöe
 *
pMaö
 = 0;

2411 
rc
 = 
SQLITE_OK
;

2412 
iTask
;

2414 #i‡
SQLITE_MAX_WORKER_THREADS
>0

2418 
	`as£π
–
pS‹ãr
->
bU£Thªads
 ||ÖS‹ãr->
nTask
==1 );

2419 if–
pS‹ãr
->
nTask
>1 ){

2420 
pMaö
 = 
	`vdbeMîgeEngöeNew
(
pS‹ãr
->
nTask
);

2421 if–
pMaö
==0 ) 
rc
 = 
SQLITE_NOMEM_BKPT
;

2425 
iTask
=0; 
rc
==
SQLITE_OK
 && iTask<
pS‹ãr
->
nTask
; iTask++){

2426 
S‹tSubèsk
 *
pTask
 = &
pS‹ãr
->
aTask
[
iTask
];

2427 
	`as£π
–
pTask
->
nPMA
>0 || 
SQLITE_MAX_WORKER_THREADS
>0 );

2428 if–
SQLITE_MAX_WORKER_THREADS
==0 || 
pTask
->
nPMA
 ){

2429 
MîgeEngöe
 *
pRoŸ
 = 0;

2430 
nDïth
 = 
	`vdbeS‹ãrTªeDïth
(
pTask
->
nPMA
);

2431 
i64
 
iRódOff
 = 0;

2433 if–
pTask
->
nPMA
<=
SORTER_MAX_MERGE_COUNT
 ){

2434 
rc
 = 
	`vdbeMîgeEngöeLevñ0
(
pTask
,ÖTask->
nPMA
, &
iRódOff
, &
pRoŸ
);

2436 
i
;

2437 
iSeq
 = 0;

2438 
pRoŸ
 = 
	`vdbeMîgeEngöeNew
(
SORTER_MAX_MERGE_COUNT
);

2439 if–
pRoŸ
==0 ) 
rc
 = 
SQLITE_NOMEM_BKPT
;

2440 
i
=0; i<
pTask
->
nPMA
 && 
rc
==
SQLITE_OK
; i +
SORTER_MAX_MERGE_COUNT
){

2441 
MîgeEngöe
 *
pMîgî
 = 0;

2442 
nRódî
;

2444 
nRódî
 = 
	`MIN
(
pTask
->
nPMA
 - 
i
, 
SORTER_MAX_MERGE_COUNT
);

2445 
rc
 = 
	`vdbeMîgeEngöeLevñ0
(
pTask
, 
nRódî
, &
iRódOff
, &
pMîgî
);

2446 if–
rc
==
SQLITE_OK
 ){

2447 
rc
 = 
	`vdbeS‹ãrAddToTªe
(
pTask
, 
nDïth
, 
iSeq
++, 
pRoŸ
, 
pMîgî
);

2452 if–
rc
==
SQLITE_OK
 ){

2453 #i‡
SQLITE_MAX_WORKER_THREADS
>0

2454 if–
pMaö
!=0 ){

2455 
rc
 = 
	`vdbeIn¸MîgîNew
(
pTask
, 
pRoŸ
, &
pMaö
->
aRódr
[
iTask
].
pIn¸
);

2459 
	`as£π
–
pMaö
==0 );

2460 
pMaö
 = 
pRoŸ
;

2463 
	`vdbeMîgeEngöeFªe
(
pRoŸ
);

2468 if–
rc
!=
SQLITE_OK
 ){

2469 
	`vdbeMîgeEngöeFªe
(
pMaö
);

2470 
pMaö
 = 0;

2472 *
µOut
 = 
pMaö
;

2473  
rc
;

2474 
	}
}

2485 
	$vdbeS‹ãrSëupMîge
(
VdbeS‹ãr
 *
pS‹ãr
){

2486 
rc
;

2487 
S‹tSubèsk
 *
pTask0
 = &
pS‹ãr
->
aTask
[0];

2488 
MîgeEngöe
 *
pMaö
 = 0;

2489 #i‡
SQLITE_MAX_WORKER_THREADS


2490 
sqlôe3
 *
db
 = 
pTask0
->
pS‹ãr
->db;

2491 
i
;

2492 
S‹ãrCom∑ª
 
xCom∑ª
 = 
	`vdbeS‹ãrGëCom∑ª
(
pS‹ãr
);

2493 
i
=0; i<
pS‹ãr
->
nTask
; i++){

2494 
pS‹ãr
->
aTask
[
i
].
xCom∑ª
 = xCompare;

2498 
rc
 = 
	`vdbeS‹ãrMîgeTªeBuûd
(
pS‹ãr
, &
pMaö
);

2499 if–
rc
==
SQLITE_OK
 ){

2500 #i‡
SQLITE_MAX_WORKER_THREADS


2501 
	`as£π
–
pS‹ãr
->
bU£Thªads
==0 ||ÖS‹ãr->
nTask
>1 );

2502 if–
pS‹ãr
->
bU£Thªads
 ){

2503 
iTask
;

2504 
PmaRódî
 *
pRódr
 = 0;

2505 
S‹tSubèsk
 *
pLa°
 = &
pS‹ãr
->
aTask
[pS‹ãr->
nTask
-1];

2506 
rc
 = 
	`vdbeS‹tAŒocU≈acked
(
pLa°
);

2507 if–
rc
==
SQLITE_OK
 ){

2508 
pRódr
 = (
PmaRódî
*)
	`sqlôe3DbMÆlocZîo
(
db
, (PmaReader));

2509 
pS‹ãr
->
pRódî
 = 
pRódr
;

2510 if–
pRódr
==0 ) 
rc
 = 
SQLITE_NOMEM_BKPT
;

2512 if–
rc
==
SQLITE_OK
 ){

2513 
rc
 = 
	`vdbeIn¸MîgîNew
(
pLa°
, 
pMaö
, &
pRódr
->
pIn¸
);

2514 if–
rc
==
SQLITE_OK
 ){

2515 
	`vdbeIn¸MîgîSëThªads
(
pRódr
->
pIn¸
);

2516 
iTask
=0; iTask<(
pS‹ãr
->
nTask
-1); iTask++){

2517 
In¸Mîgî
 *
pIn¸
;

2518 if–(
pIn¸
 = 
pMaö
->
aRódr
[
iTask
].pIncr) ){

2519 
	`vdbeIn¸MîgîSëThªads
(
pIn¸
);

2520 
	`as£π
–
pIn¸
->
pTask
!=
pLa°
 );

2523 
iTask
=0; 
rc
==
SQLITE_OK
 && iTask<
pS‹ãr
->
nTask
; iTask++){

2533 
PmaRódî
 *
p
 = &
pMaö
->
aRódr
[
iTask
];

2534 
	`as£π
–
p
->
pIn¸
==0 || (

2535 (
p
->
pIn¸
->
pTask
==&
pS‹ãr
->
aTask
[
iTask
])

2536 && (
iTask
!=
pS‹ãr
->
nTask
-1 || 
p
->
pIn¸
->
bU£Thªad
==0)

2538 
rc
 = 
	`vdbePmaRódîIn¸Inô
(
p
, 
INCRINIT_TASK
);

2541 
pMaö
 = 0;

2543 if–
rc
==
SQLITE_OK
 ){

2544 
rc
 = 
	`vdbePmaRódîIn¸MîgeInô
(
pRódr
, 
INCRINIT_ROOT
);

2549 
rc
 = 
	`vdbeMîgeEngöeInô
(
pTask0
, 
pMaö
, 
INCRINIT_NORMAL
);

2550 
pS‹ãr
->
pMîgî
 = 
pMaö
;

2551 
pMaö
 = 0;

2555 if–
rc
!=
SQLITE_OK
 ){

2556 
	`vdbeMîgeEngöeFªe
(
pMaö
);

2558  
rc
;

2559 
	}
}

2567 
	$sqlôe3VdbeS‹ãrRewöd
(c⁄° 
VdbeCurs‹
 *
pC§
, *
pbEof
){

2568 
VdbeS‹ãr
 *
pS‹ãr
;

2569 
rc
 = 
SQLITE_OK
;

2571 
	`as£π
–
pC§
->
eCurTy≥
==
CURTYPE_SORTER
 );

2572 
pS‹ãr
 = 
pC§
->
uc
.pSorter;

2573 
	`as£π
–
pS‹ãr
 );

2578 if–
pS‹ãr
->
bU£PMA
==0 ){

2579 if–
pS‹ãr
->
li°
.
pLi°
 ){

2580 *
pbEof
 = 0;

2581 
rc
 = 
	`vdbeS‹ãrS‹t
(&
pS‹ãr
->
aTask
[0], &pS‹ãr->
li°
);

2583 *
pbEof
 = 1;

2585  
rc
;

2592 
	`as£π
–
pS‹ãr
->
li°
.
pLi°
 );

2593 
rc
 = 
	`vdbeS‹ãrFlushPMA
(
pS‹ãr
);

2596 
rc
 = 
	`vdbeS‹ãrJoöAŒ
(
pS‹ãr
,Ñc);

2598 
	`vdbeS‹ãrRewödDebug
("rewind");

2602 
	`as£π
–
pS‹ãr
->
pRódî
==0 );

2603 if–
rc
==
SQLITE_OK
 ){

2604 
rc
 = 
	`vdbeS‹ãrSëupMîge
(
pS‹ãr
);

2605 *
pbEof
 = 0;

2608 
	`vdbeS‹ãrRewödDebug
("rewinddone");

2609  
rc
;

2610 
	}
}

2615 
	$sqlôe3VdbeS‹ãrNext
(
sqlôe3
 *
db
, c⁄° 
VdbeCurs‹
 *
pC§
, *
pbEof
){

2616 
VdbeS‹ãr
 *
pS‹ãr
;

2617 
rc
;

2619 
	`as£π
–
pC§
->
eCurTy≥
==
CURTYPE_SORTER
 );

2620 
pS‹ãr
 = 
pC§
->
uc
.pSorter;

2621 
	`as£π
–
pS‹ãr
->
bU£PMA
 || (pS‹ãr->
pRódî
==0 &&ÖS‹ãr->
pMîgî
==0) );

2622 if–
pS‹ãr
->
bU£PMA
 ){

2623 
	`as£π
–
pS‹ãr
->
pRódî
==0 ||ÖS‹ãr->
pMîgî
==0 );

2624 
	`as£π
–
pS‹ãr
->
bU£Thªads
==0 ||ÖS‹ãr->
pRódî
 );

2625 
	`as£π
–
pS‹ãr
->
bU£Thªads
==1 ||ÖS‹ãr->
pMîgî
 );

2626 #i‡
SQLITE_MAX_WORKER_THREADS
>0

2627 if–
pS‹ãr
->
bU£Thªads
 ){

2628 
rc
 = 
	`vdbePmaRódîNext
(
pS‹ãr
->
pRódî
);

2629 *
pbEof
 = (
pS‹ãr
->
pRódî
->
pFd
==0);

2633 
	`as£π
–
pS‹ãr
->
pMîgî
!=0 );

2634 
	`as£π
–
pS‹ãr
->
pMîgî
->
pTask
==(&pS‹ãr->
aTask
[0]) );

2635 
rc
 = 
	`vdbeMîgeEngöeSãp
(
pS‹ãr
->
pMîgî
, 
pbEof
);

2638 
S‹ãrRec‹d
 *
pFªe
 = 
pS‹ãr
->
li°
.
pLi°
;

2639 
pS‹ãr
->
li°
.
pLi°
 = 
pFªe
->
u
.
pNext
;

2640 
pFªe
->
u
.
pNext
 = 0;

2641 if–
pS‹ãr
->
li°
.
aMem‹y
==0 ) 
	`vdbeS‹ãrRec‹dFªe
(
db
, 
pFªe
);

2642 *
pbEof
 = !
pS‹ãr
->
li°
.
pLi°
;

2643 
rc
 = 
SQLITE_OK
;

2645  
rc
;

2646 
	}
}

2652 *
	$vdbeS‹ãrRowkey
(

2653 c⁄° 
VdbeS‹ãr
 *
pS‹ãr
,

2654 *
≤Key


2656 *
pKey
;

2657 if–
pS‹ãr
->
bU£PMA
 ){

2658 
PmaRódî
 *
pRódî
;

2659 #i‡
SQLITE_MAX_WORKER_THREADS
>0

2660 if–
pS‹ãr
->
bU£Thªads
 ){

2661 
pRódî
 = 
pS‹ãr
->pReader;

2665 
pRódî
 = &
pS‹ãr
->
pMîgî
->
aRódr
[pS‹ãr->pMîgî->
aTªe
[1]];

2667 *
≤Key
 = 
pRódî
->
nKey
;

2668 
pKey
 = 
pRódî
->
aKey
;

2670 *
≤Key
 = 
pS‹ãr
->
li°
.
pLi°
->
nVÆ
;

2671 
pKey
 = 
	`SRVAL
(
pS‹ãr
->
li°
.
pLi°
);

2673  
pKey
;

2674 
	}
}

2679 
	$sqlôe3VdbeS‹ãrRowkey
(c⁄° 
VdbeCurs‹
 *
pC§
, 
Mem
 *
pOut
){

2680 
VdbeS‹ãr
 *
pS‹ãr
;

2681 *
pKey
; 
nKey
;

2683 
	`as£π
–
pC§
->
eCurTy≥
==
CURTYPE_SORTER
 );

2684 
pS‹ãr
 = 
pC§
->
uc
.pSorter;

2685 
pKey
 = 
	`vdbeS‹ãrRowkey
(
pS‹ãr
, &
nKey
);

2686 if–
	`sqlôe3VdbeMemCÀ¨AndResize
(
pOut
, 
nKey
) ){

2687  
SQLITE_NOMEM_BKPT
;

2689 
pOut
->
n
 = 
nKey
;

2690 
	`MemSëTy≥Fœg
(
pOut
, 
MEM_Blob
);

2691 
	`mem˝y
(
pOut
->
z
, 
pKey
, 
nKey
);

2693  
SQLITE_OK
;

2694 
	}
}

2712 
	$sqlôe3VdbeS‹ãrCom∑ª
(

2713 c⁄° 
VdbeCurs‹
 *
pC§
,

2714 
Mem
 *
pVÆ
,

2715 
nKeyCﬁ
,

2716 *
pRes


2718 
VdbeS‹ãr
 *
pS‹ãr
;

2719 
U≈ackedRec‹d
 *
r2
;

2720 
KeyInfo
 *
pKeyInfo
;

2721 
i
;

2722 *
pKey
; 
nKey
;

2724 
	`as£π
–
pC§
->
eCurTy≥
==
CURTYPE_SORTER
 );

2725 
pS‹ãr
 = 
pC§
->
uc
.pSorter;

2726 
r2
 = 
pS‹ãr
->
pU≈acked
;

2727 
pKeyInfo
 = 
pC§
->pKeyInfo;

2728 if–
r2
==0 ){

2729 *
p
;

2730 
r2
 = 
pS‹ãr
->
pU≈acked
 = 
	`sqlôe3VdbeAŒocU≈ackedRec‹d
(
pKeyInfo
,0,0,&
p
);

2731 
	`as£π
–
pS‹ãr
->
pU≈acked
==(
U≈ackedRec‹d
*)
p
 );

2732 if–
r2
==0 )  
SQLITE_NOMEM_BKPT
;

2733 
r2
->
nFõld
 = 
nKeyCﬁ
;

2735 
	`as£π
–
r2
->
nFõld
==
nKeyCﬁ
 );

2737 
pKey
 = 
	`vdbeS‹ãrRowkey
(
pS‹ãr
, &
nKey
);

2738 
	`sqlôe3VdbeRec‹dU≈ack
(
pKeyInfo
, 
nKey
, 
pKey
, 
r2
);

2739 
i
=0; i<
nKeyCﬁ
; i++){

2740 if–
r2
->
aMem
[
i
].
Êags
 & 
MEM_NuŒ
 ){

2741 *
pRes
 = -1;

2742  
SQLITE_OK
;

2746 *
pRes
 = 
	`sqlôe3VdbeRec‹dCom∑ª
(
pVÆ
->
n
,ÖVÆ->
z
, 
r2
);

2747  
SQLITE_OK
;

2748 
	}
}

	@vdbetrace.c

18 
	~"sqlôeI¡.h
"

19 
	~"vdbeI¡.h
"

21 #i‚de‡
SQLITE_OMIT_TRACE


29 
	$födNextHo°P¨amëî
(c⁄° *
zSql
, *
≤Tokí
){

30 
tokíTy≥
;

31 
nTŸÆ
 = 0;

32 
n
;

34 *
≤Tokí
 = 0;

35  
zSql
[0] ){

36 
n
 = 
	`sqlôe3GëTokí
((
u8
*)
zSql
, &
tokíTy≥
);

37 
	`as£π
–
n
>0 && 
tokíTy≥
!=
TK_ILLEGAL
 );

38 if–
tokíTy≥
==
TK_VARIABLE
 ){

39 *
≤Tokí
 = 
n
;

42 
nTŸÆ
 +
n
;

43 
zSql
 +
n
;

45  
nTŸÆ
;

46 
	}
}

72 *
	$sqlôe3VdbeEx∑ndSql
(

73 
Vdbe
 *
p
,

74 c⁄° *
zRawSql


76 
sqlôe3
 *
db
;

77 
idx
 = 0;

78 
√xtIndex
 = 1;

79 
n
;

80 
nTokí
;

81 
i
;

82 
Mem
 *
pV¨
;

83 
SåAccum
 
out
;

84 
zBa£
[100];

86 
db
 = 
p
->db;

87 
	`sqlôe3SåAccumInô
(&
out
, 
db
, 
zBa£
, (zBase),

88 
db
->
aLimô
[
SQLITE_LIMIT_LENGTH
]);

89 if–
db
->
nVdbeExec
>1 ){

90  *
zRawSql
 ){

91 c⁄° *
zSèπ
 = 
zRawSql
;

92  *(
zRawSql
++)!='\n' && *zRawSql );

93 
	`sqlôe3SåAccumAµíd
(&
out
, "-- ", 3);

94 
	`as£π
–(
zRawSql
 - 
zSèπ
) > 0 );

95 
	`sqlôe3SåAccumAµíd
(&
out
, 
zSèπ
, ()(
zRawSql
-zStart));

97 }if–
p
->
nV¨
==0 ){

98 
	`sqlôe3SåAccumAµíd
(&
out
, 
zRawSql
, 
	`sqlôe3SåÀn30
(zRawSql));

100  
zRawSql
[0] ){

101 
n
 = 
	`födNextHo°P¨amëî
(
zRawSql
, &
nTokí
);

102 
	`as£π
–
n
>0 );

103 
	`sqlôe3SåAccumAµíd
(&
out
, 
zRawSql
, 
n
);

104 
zRawSql
 +
n
;

105 
	`as£π
–
zRawSql
[0] || 
nTokí
==0 );

106 if–
nTokí
==0 ) ;

107 if–
zRawSql
[0]=='?' ){

108 if–
nTokí
>1 ){

109 
	`as£π
–
	`sqlôe3Isdigô
(
zRawSql
[1]) );

110 
	`sqlôe3GëI¡32
(&
zRawSql
[1], &
idx
);

112 
idx
 = 
√xtIndex
;

115 
	`as£π
–
zRawSql
[0]==':' || zRawSql[0]=='$' ||

116 
zRawSql
[0]=='@' || zRawSql[0]=='#' );

117 
	`ã°ˇ£
–
zRawSql
[0]==':' );

118 
	`ã°ˇ£
–
zRawSql
[0]=='$' );

119 
	`ã°ˇ£
–
zRawSql
[0]=='@' );

120 
	`ã°ˇ£
–
zRawSql
[0]=='#' );

121 
idx
 = 
	`sqlôe3VdbeP¨amëîIndex
(
p
, 
zRawSql
, 
nTokí
);

122 
	`as£π
–
idx
>0 );

124 
zRawSql
 +
nTokí
;

125 
√xtIndex
 = 
idx
 + 1;

126 
	`as£π
–
idx
>0 && idx<=
p
->
nV¨
 );

127 
pV¨
 = &
p
->
aV¨
[
idx
-1];

128 if–
pV¨
->
Êags
 & 
MEM_NuŒ
 ){

129 
	`sqlôe3SåAccumAµíd
(&
out
, "NULL", 4);

130 }if–
pV¨
->
Êags
 & 
MEM_I¡
 ){

131 
	`sqlôe3XPrötf
(&
out
, "%Œd", 
pV¨
->
u
.
i
);

132 }if–
pV¨
->
Êags
 & 
MEM_Ról
 ){

133 
	`sqlôe3XPrötf
(&
out
, "%!.15g", 
pV¨
->
u
.
r
);

134 }if–
pV¨
->
Êags
 & 
MEM_Så
 ){

135 
nOut
;

136 #i‚de‡
SQLITE_OMIT_UTF16


137 
u8
 
íc
 = 
	`ENC
(
db
);

138 
Mem
 
utf8
;

139 if–
íc
!=
SQLITE_UTF8
 ){

140 
	`mem£t
(&
utf8
, 0, (utf8));

141 
utf8
.
db
 = db;

142 
	`sqlôe3VdbeMemSëSå
(&
utf8
, 
pV¨
->
z
,ÖV¨->
n
, 
íc
, 
SQLITE_STATIC
);

143 
	`sqlôe3VdbeCh™geEncodög
(&
utf8
, 
SQLITE_UTF8
);

144 
pV¨
 = &
utf8
;

147 
nOut
 = 
pV¨
->
n
;

148 #ifde‡
SQLITE_TRACE_SIZE_LIMIT


149 if–
nOut
>
SQLITE_TRACE_SIZE_LIMIT
 ){

150 
nOut
 = 
SQLITE_TRACE_SIZE_LIMIT
;

151  
nOut
<
pV¨
->
n
 && (pV¨->
z
[nOut]&0xc0)==0x80 ){ÇOut++; }

154 
	`sqlôe3XPrötf
(&
out
, "'%.*q'", 
nOut
, 
pV¨
->
z
);

155 #ifde‡
SQLITE_TRACE_SIZE_LIMIT


156 if–
nOut
<
pV¨
->
n
 ){

157 
	`sqlôe3XPrötf
(&
out
, "/*+%d byãs*/", 
pV¨
->
n
-
nOut
);

160 #i‚de‡
SQLITE_OMIT_UTF16


161 if–
íc
!=
SQLITE_UTF8
 ) 
	`sqlôe3VdbeMemRñó£
(&
utf8
);

163 }if–
pV¨
->
Êags
 & 
MEM_Zîo
 ){

164 
	`sqlôe3XPrötf
(&
out
, "zîoblob(%d)", 
pV¨
->
u
.
nZîo
);

166 
nOut
;

167 
	`as£π
–
pV¨
->
Êags
 & 
MEM_Blob
 );

168 
	`sqlôe3SåAccumAµíd
(&
out
, "x'", 2);

169 
nOut
 = 
pV¨
->
n
;

170 #ifde‡
SQLITE_TRACE_SIZE_LIMIT


171 if–
nOut
>
SQLITE_TRACE_SIZE_LIMIT
 )ÇOut = SQLITE_TRACE_SIZE_LIMIT;

173 
i
=0; i<
nOut
; i++){

174 
	`sqlôe3XPrötf
(&
out
, "%02x", 
pV¨
->
z
[
i
]&0xff);

176 
	`sqlôe3SåAccumAµíd
(&
out
, "'", 1);

177 #ifde‡
SQLITE_TRACE_SIZE_LIMIT


178 if–
nOut
<
pV¨
->
n
 ){

179 
	`sqlôe3XPrötf
(&
out
, "/*+%d byãs*/", 
pV¨
->
n
-
nOut
);

185  
	`sqlôe3SåAccumFöish
(&
out
);

186 
	}
}

	@vtab.c

14 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


15 
	~"sqlôeI¡.h
"

24 
	sVèbCtx
 {

25 
VTabÀ
 *
	mpVTabÀ
;

26 
TabÀ
 *
	mpTab
;

27 
VèbCtx
 *
	mpPri‹
;

28 
	mbDe˛¨ed
;

36 
¸óãModuÀ
(

37 
sqlôe3
 *
db
,

38 c⁄° *
zName
,

39 c⁄° 
sqlôe3_moduÀ
 *
pModuÀ
,

40 *
pAux
,

41 (*
xDe°roy
)(*)

43 
rc
 = 
SQLITE_OK
;

44 
nName
;

46 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

47 
nName
 = 
	`sqlôe3SåÀn30
(
zName
);

48 if–
	`sqlôe3HashFöd
(&
db
->
aModuÀ
, 
zName
) ){

49 
rc
 = 
SQLITE_MISUSE_BKPT
;

51 
ModuÀ
 *
pMod
;

52 
pMod
 = (
ModuÀ
 *)
	`sqlôe3DbMÆlocRawNN
(
db
, (ModuÀË+ 
nName
 + 1);

53 if–
pMod
 ){

54 
ModuÀ
 *
pDñ
;

55 *
zC›y
 = (*)(&
pMod
[1]);

56 
	`mem˝y
(
zC›y
, 
zName
, 
nName
+1);

57 
pMod
->
zName
 = 
zC›y
;

58 
pMod
->
pModuÀ
 =ÖModule;

59 
pMod
->
pAux
 =ÖAux;

60 
pMod
->
xDe°roy
 = xDestroy;

61 
pMod
->
pEpoTab
 = 0;

62 
pDñ
 = (
ModuÀ
 *)
	`sqlôe3HashIn£π
(&
db
->
aModuÀ
,
zC›y
,(*)
pMod
);

63 
	`as£π
–
pDñ
==0 ||ÖDñ==
pMod
 );

64 if–
pDñ
 ){

65 
	`sqlôe3OomFau…
(
db
);

66 
	`sqlôe3DbFªe
(
db
, 
pDñ
);

70 
rc
 = 
	`sqlôe3ApiExô
(
db
,Ñc);

71 if–
rc
!=
SQLITE_OK
 && 
xDe°roy
 ) 
	`xDe°roy
(
pAux
);

73 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

74  
rc
;

75 
	}
}

81 
	$sqlôe3_¸óã_moduÀ
(

82 
sqlôe3
 *
db
,

83 c⁄° *
zName
,

84 c⁄° 
sqlôe3_moduÀ
 *
pModuÀ
,

85 *
pAux


87 #ifde‡
SQLITE_ENABLE_API_ARMOR


88 if–!
	`sqlôe3Sa„tyCheckOk
(
db
Ë|| 
zName
==0 )  
SQLITE_MISUSE_BKPT
;

90  
	`¸óãModuÀ
(
db
, 
zName
, 
pModuÀ
, 
pAux
, 0);

91 
	}
}

96 
sqlôe3_¸óã_moduÀ_v2
(

97 
sqlôe3
 *
db
,

98 c⁄° *
zName
,

99 c⁄° 
sqlôe3_moduÀ
 *
pModuÀ
,

100 *
pAux
,

101 (*
xDe°roy
)(*)

103 #ifde‡
SQLITE_ENABLE_API_ARMOR


104 if–!
	`sqlôe3Sa„tyCheckOk
(
db
Ë|| 
zName
==0 )  
SQLITE_MISUSE_BKPT
;

106  
	`¸óãModuÀ
(
db
, 
zName
, 
pModuÀ
, 
pAux
, 
xDe°roy
);

107 
	}
}

117 
	$sqlôe3VèbLock
(
VTabÀ
 *
pVTab
){

118 
pVTab
->
nRef
++;

119 
	}
}

127 
VTabÀ
 *
	$sqlôe3GëVTabÀ
(
sqlôe3
 *
db
, 
TabÀ
 *
pTab
){

128 
VTabÀ
 *
pVèb
;

129 
	`as£π
–
	`IsVútuÆ
(
pTab
) );

130 
pVèb
=
pTab
->
pVTabÀ
;ÖVèb &&ÖVèb->
db
!=db;ÖVèbıVèb->
pNext
);

131  
pVèb
;

132 
	}
}

138 
	$sqlôe3VèbU∆ock
(
VTabÀ
 *
pVTab
){

139 
sqlôe3
 *
db
 = 
pVTab
->db;

141 
	`as£π
–
db
 );

142 
	`as£π
–
pVTab
->
nRef
>0 );

143 
	`as£π
–
db
->
magic
==
SQLITE_MAGIC_OPEN
 || db->magic==
SQLITE_MAGIC_ZOMBIE
 );

145 
pVTab
->
nRef
--;

146 if–
pVTab
->
nRef
==0 ){

147 
sqlôe3_vèb
 *
p
 = 
pVTab
->
pVèb
;

148 if–
p
 ){

149 
p
->
pModuÀ
->
	`xDisc⁄√˘
(p);

151 
	`sqlôe3DbFªe
(
db
, 
pVTab
);

153 
	}
}

162 
VTabÀ
 *
	$vèbDisc⁄√˘AŒ
(
sqlôe3
 *
db
, 
TabÀ
 *
p
){

163 
VTabÀ
 *
pRë
 = 0;

164 
VTabÀ
 *
pVTabÀ
 = 
p
->pVTable;

165 
p
->
pVTabÀ
 = 0;

173 
	`as£π
–
db
==0 || 
	`sqlôe3SchemaMuãxHñd
(db, 0, 
p
->
pSchema
) );

175  
pVTabÀ
 ){

176 
sqlôe3
 *
db2
 = 
pVTabÀ
->
db
;

177 
VTabÀ
 *
pNext
 = 
pVTabÀ
->pNext;

178 
	`as£π
–
db2
 );

179 if–
db2
==
db
 ){

180 
pRë
 = 
pVTabÀ
;

181 
p
->
pVTabÀ
 = 
pRë
;

182 
pRë
->
pNext
 = 0;

184 
pVTabÀ
->
pNext
 = 
db2
->
pDisc⁄√˘
;

185 
db2
->
pDisc⁄√˘
 = 
pVTabÀ
;

187 
pVTabÀ
 = 
pNext
;

190 
	`as£π
–!
db
 || 
pRë
 );

191  
pRë
;

192 
	}
}

202 
	$sqlôe3VèbDisc⁄√˘
(
sqlôe3
 *
db
, 
TabÀ
 *
p
){

203 
VTabÀ
 **
µVTab
;

205 
	`as£π
–
	`IsVútuÆ
(
p
) );

206 
	`as£π
–
	`sqlôe3BåìHﬁdsAŒMuãxes
(
db
) );

207 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

209 
µVTab
=&
p
->
pVTabÀ
; *µVTab;ÖpVTab=&(*µVTab)->
pNext
){

210 if–(*
µVTab
)->
db
==db ){

211 
VTabÀ
 *
pVTab
 = *
µVTab
;

212 *
µVTab
 = 
pVTab
->
pNext
;

213 
	`sqlôe3VèbU∆ock
(
pVTab
);

217 
	}
}

240 
	$sqlôe3VèbU∆ockLi°
(
sqlôe3
 *
db
){

241 
VTabÀ
 *
p
 = 
db
->
pDisc⁄√˘
;

242 
db
->
pDisc⁄√˘
 = 0;

244 
	`as£π
–
	`sqlôe3BåìHﬁdsAŒMuãxes
(
db
) );

245 
	`as£π
–
	`sqlôe3_muãx_hñd
(
db
->
muãx
) );

247 if–
p
 ){

248 
	`sqlôe3ExpúePª∑ªdSèãmíts
(
db
);

250 
VTabÀ
 *
pNext
 = 
p
->pNext;

251 
	`sqlôe3VèbU∆ock
(
p
);

252 
p
 = 
pNext
;

253 } 
p
 );

255 
	}
}

271 
	$sqlôe3VèbCÀ¨
(
sqlôe3
 *
db
, 
TabÀ
 *
p
){

272 if–!
db
 || db->
≤ByãsFªed
==0 ) 
	`vèbDisc⁄√˘AŒ
(0, 
p
);

273 if–
p
->
azModuÀArg
 ){

274 
i
;

275 
i
=0; i<
p
->
nModuÀArg
; i++){

276 if–
i
!=1 ) 
	`sqlôe3DbFªe
(
db
, 
p
->
azModuÀArg
[i]);

278 
	`sqlôe3DbFªe
(
db
, 
p
->
azModuÀArg
);

280 
	}
}

288 
	$addModuÀArgumít
(
sqlôe3
 *
db
, 
TabÀ
 *
pTabÀ
, *
zArg
){

289 
nByãs
 = (*)*(2+
pTabÀ
->
nModuÀArg
);

290 **
azModuÀArg
;

291 
azModuÀArg
 = 
	`sqlôe3DbRóŒoc
(
db
, 
pTabÀ
->azModuÀArg, 
nByãs
);

292 if–
azModuÀArg
==0 ){

293 
	`sqlôe3DbFªe
(
db
, 
zArg
);

295 
i
 = 
pTabÀ
->
nModuÀArg
++;

296 
azModuÀArg
[
i
] = 
zArg
;

297 
azModuÀArg
[
i
+1] = 0;

298 
pTabÀ
->
azModuÀArg
 =ázModuleArg;

300 
	}
}

307 
	$sqlôe3VèbBegöP¨£
(

308 
P¨£
 *
pP¨£
,

309 
Tokí
 *
pName1
,

310 
Tokí
 *
pName2
,

311 
Tokí
 *
pModuÀName
,

312 
ifNŸExi°s


314 
iDb
;

315 
TabÀ
 *
pTabÀ
;

316 
sqlôe3
 *
db
;

318 
	`sqlôe3SèπTabÀ
(
pP¨£
, 
pName1
, 
pName2
, 0, 0, 1, 
ifNŸExi°s
);

319 
pTabÀ
 = 
pP¨£
->
pNewTabÀ
;

320 if–
pTabÀ
==0 ) ;

321 
	`as£π
–0==
pTabÀ
->
pIndex
 );

323 
db
 = 
pP¨£
->db;

324 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pTabÀ
->
pSchema
);

325 
	`as£π
–
iDb
>=0 );

327 
pTabÀ
->
èbFœgs
 |
TF_VútuÆ
;

328 
pTabÀ
->
nModuÀArg
 = 0;

329 
	`addModuÀArgumít
(
db
, 
pTabÀ
, 
	`sqlôe3NameFromTokí
(db, 
pModuÀName
));

330 
	`addModuÀArgumít
(
db
, 
pTabÀ
, 0);

331 
	`addModuÀArgumít
(
db
, 
pTabÀ
, 
	`sqlôe3DbSåDup
(db,ÖTabÀ->
zName
));

332 
	`as£π
–(
pP¨£
->
sNameTokí
.
z
==
pName2
->z &&ÖName2->z!=0)

333 || (
pP¨£
->
sNameTokí
.
z
==
pName1
->z && 
pName2
->z==0)

335 
pP¨£
->
sNameTokí
.
n
 = ()(

336 &
pModuÀName
->
z
[pModuÀName->
n
] - 
pP¨£
->
sNameTokí
.z

339 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


345 if–
pTabÀ
->
azModuÀArg
 ){

346 
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_CREATE_VTABLE
, 
pTabÀ
->
zName
,

347 
pTabÀ
->
azModuÀArg
[0], 
pP¨£
->
db
->
aDb
[
iDb
].
zName
);

350 
	}
}

357 
	$addArgumítToVèb
(
P¨£
 *
pP¨£
){

358 if–
pP¨£
->
sArg
.
z
 &&ÖP¨£->
pNewTabÀ
 ){

359 c⁄° *
z
 = (c⁄° *)
pP¨£
->
sArg
.z;

360 
n
 = 
pP¨£
->
sArg
.n;

361 
sqlôe3
 *
db
 = 
pP¨£
->db;

362 
	`addModuÀArgumít
(
db
, 
pP¨£
->
pNewTabÀ
, 
	`sqlôe3DbSåNDup
(db, 
z
, 
n
));

364 
	}
}

370 
	$sqlôe3VèbFöishP¨£
(
P¨£
 *
pP¨£
, 
Tokí
 *
pEnd
){

371 
TabÀ
 *
pTab
 = 
pP¨£
->
pNewTabÀ
;

372 
sqlôe3
 *
db
 = 
pP¨£
->db;

374 if–
pTab
==0 ) ;

375 
	`addArgumítToVèb
(
pP¨£
);

376 
pP¨£
->
sArg
.
z
 = 0;

377 if–
pTab
->
nModuÀArg
<1 ) ;

385 if–!
db
->
öô
.
busy
 ){

386 *
zStmt
;

387 *
zWhîe
;

388 
iDb
;

389 
iReg
;

390 
Vdbe
 *
v
;

393 if–
pEnd
 ){

394 
pP¨£
->
sNameTokí
.
n
 = ()(
pEnd
->
z
 -ÖParse->sNameToken.z) +ÖEnd->n;

396 
zStmt
 = 
	`sqlôe3MPrötf
(
db
, "CREATE VIRTUAL TABLE %T", &
pP¨£
->
sNameTokí
);

406 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pTab
->
pSchema
);

407 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

411 
db
->
aDb
[
iDb
].
zName
, 
	`SCHEMA_TABLE
(iDb),

412 
pTab
->
zName
,

413 
pTab
->
zName
,

414 
zStmt
,

415 
pP¨£
->
ªgRowid


417 
	`sqlôe3DbFªe
(
db
, 
zStmt
);

418 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

419 
	`sqlôe3Ch™geCookõ
(
pP¨£
, 
iDb
);

421 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Expúe
, 0, 0);

422 
zWhîe
 = 
	`sqlôe3MPrötf
(
db
, "«me='%q' ANDÅy≥='èbÀ'", 
pTab
->
zName
);

423 
	`sqlôe3VdbeAddP¨£SchemaOp
(
v
, 
iDb
, 
zWhîe
);

425 
iReg
 = ++
pP¨£
->
nMem
;

426 
	`sqlôe3VdbeLﬂdSåög
(
v
, 
iReg
, 
pTab
->
zName
);

427 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_VCª©e
, 
iDb
, 
iReg
);

436 
TabÀ
 *
pOld
;

437 
Schema
 *
pSchema
 = 
pTab
->pSchema;

438 c⁄° *
zName
 = 
pTab
->zName;

439 
	`as£π
–
	`sqlôe3SchemaMuãxHñd
(
db
, 0, 
pSchema
) );

440 
pOld
 = 
	`sqlôe3HashIn£π
(&
pSchema
->
tblHash
, 
zName
, 
pTab
);

441 if–
pOld
 ){

442 
	`sqlôe3OomFau…
(
db
);

443 
	`as£π
–
pTab
==
pOld
 );

446 
pP¨£
->
pNewTabÀ
 = 0;

448 
	}
}

454 
	$sqlôe3VèbArgInô
(
P¨£
 *
pP¨£
){

455 
	`addArgumítToVèb
(
pP¨£
);

456 
pP¨£
->
sArg
.
z
 = 0;

457 
pP¨£
->
sArg
.
n
 = 0;

458 
	}
}

464 
	$sqlôe3VèbArgExãnd
(
P¨£
 *
pP¨£
, 
Tokí
 *
p
){

465 
Tokí
 *
pArg
 = &
pP¨£
->
sArg
;

466 if–
pArg
->
z
==0 ){

467 
pArg
->
z
 = 
p
->z;

468 
pArg
->
n
 = 
p
->n;

470 
	`as£π
(
pArg
->
z
 <
p
->z);

471 
pArg
->
n
 = ()(&
p
->
z
[p->n] -ÖArg->z);

473 
	}
}

480 
vèbCÆlC⁄°ru˘‹
(

481 
sqlôe3
 *
db
,

482 
TabÀ
 *
pTab
,

483 
ModuÀ
 *
pMod
,

484 (*
xC⁄°ru˘
)(
sqlôe3
*,*,,c⁄° *c⁄°*,
sqlôe3_vèb
**,**),

485 **
pzEº


487 
VèbCtx
 
sCtx
;

488 
VTabÀ
 *
pVTabÀ
;

489 
rc
;

490 c⁄° *c⁄°*
azArg
 = (c⁄° *c⁄°*)
pTab
->
azModuÀArg
;

491 
nArg
 = 
pTab
->
nModuÀArg
;

492 *
zEº
 = 0;

493 *
zModuÀName
;

494 
iDb
;

495 
VèbCtx
 *
pCtx
;

498 
pCtx
=
db
->
pVèbCtx
;ÖCtx;ÖCtxıCtx->
pPri‹
){

499 if–
pCtx
->
pTab
==pTab ){

500 *
pzEº
 = 
	`sqlôe3MPrötf
(
db
,

501 "vèbÀ c⁄°ru˘‹ cÆÀdÑecursivñy: %s", 
pTab
->
zName


503  
SQLITE_LOCKED
;

507 
zModuÀName
 = 
	`sqlôe3MPrötf
(
db
, "%s", 
pTab
->
zName
);

508 if–!
zModuÀName
 ){

509  
SQLITE_NOMEM_BKPT
;

512 
pVTabÀ
 = 
	`sqlôe3DbMÆlocZîo
(
db
, (
VTabÀ
));

513 if–!
pVTabÀ
 ){

514 
	`sqlôe3DbFªe
(
db
, 
zModuÀName
);

515  
SQLITE_NOMEM_BKPT
;

517 
pVTabÀ
->
db
 = db;

518 
pVTabÀ
->
pMod
 =ÖMod;

520 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pTab
->
pSchema
);

521 
pTab
->
azModuÀArg
[1] = 
db
->
aDb
[
iDb
].
zName
;

524 
	`as£π
–&
db
->
pVèbCtx
 );

525 
	`as£π
–
xC⁄°ru˘
 );

526 
sCtx
.
pTab
 =ÖTab;

527 
sCtx
.
pVTabÀ
 =ÖVTable;

528 
sCtx
.
pPri‹
 = 
db
->
pVèbCtx
;

529 
sCtx
.
bDe˛¨ed
 = 0;

530 
db
->
pVèbCtx
 = &
sCtx
;

531 
rc
 = 
	`xC⁄°ru˘
(
db
, 
pMod
->
pAux
, 
nArg
, 
azArg
, &
pVTabÀ
->
pVèb
, &
zEº
);

532 
db
->
pVèbCtx
 = 
sCtx
.
pPri‹
;

533 if–
rc
==
SQLITE_NOMEM
 ) 
	`sqlôe3OomFau…
(
db
);

534 
	`as£π
–
sCtx
.
pTab
==pTab );

536 if–
SQLITE_OK
!=
rc
 ){

537 if–
zEº
==0 ){

538 *
pzEº
 = 
	`sqlôe3MPrötf
(
db
, "vèbÀ c⁄°ru˘‹ faûed: %s", 
zModuÀName
);

540 *
pzEº
 = 
	`sqlôe3MPrötf
(
db
, "%s", 
zEº
);

541 
	`sqlôe3_‰ì
(
zEº
);

543 
	`sqlôe3DbFªe
(
db
, 
pVTabÀ
);

544 }if–
	`ALWAYS
(
pVTabÀ
->
pVèb
) ){

547 
	`mem£t
(
pVTabÀ
->
pVèb
, 0, (pVTable->pVtab[0]));

548 
pVTabÀ
->
pVèb
->
pModuÀ
 = 
pMod
->pModule;

549 
pVTabÀ
->
nRef
 = 1;

550 if–
sCtx
.
bDe˛¨ed
==0 ){

551 c⁄° *
zF‹m©
 = "vtable constructor didÇot declare schema: %s";

552 *
pzEº
 = 
	`sqlôe3MPrötf
(
db
, 
zF‹m©
, 
pTab
->
zName
);

553 
	`sqlôe3VèbU∆ock
(
pVTabÀ
);

554 
rc
 = 
SQLITE_ERROR
;

556 
iCﬁ
;

557 
u8
 
oooHiddí
 = 0;

563 
pVTabÀ
->
pNext
 = 
pTab
->pVTable;

564 
pTab
->
pVTabÀ
 =ÖVTable;

566 
iCﬁ
=0; iCﬁ<
pTab
->
nCﬁ
; iCol++){

567 *
zTy≥
 = 
	`sqlôe3CﬁumnTy≥
(&
pTab
->
aCﬁ
[
iCﬁ
], "");

568 
nTy≥
;

569 
i
 = 0;

570 
nTy≥
 = 
	`sqlôe3SåÀn30
(
zTy≥
);

571 
i
=0; i<
nTy≥
; i++){

572 if–0==
	`sqlôe3SåNICmp
("hiddí", &
zTy≥
[
i
], 6)

573 && (
i
==0 || 
zTy≥
[i-1]==' ')

574 && (
zTy≥
[
i
+6]=='\0' || zType[i+6]==' ')

579 if–
i
<
nTy≥
 ){

580 
j
;

581 
nDñ
 = 6 + (
zTy≥
[
i
+6] ? 1 : 0);

582 
j
=
i
; (j+
nDñ
)<=
nTy≥
; j++){

583 
zTy≥
[
j
] = zTy≥[j+
nDñ
];

585 if–
zTy≥
[
i
]=='\0' && i>0 ){

586 
	`as£π
(
zTy≥
[
i
-1]==' ');

587 
zTy≥
[
i
-1] = '\0';

589 
pTab
->
aCﬁ
[
iCﬁ
].
cﬁFœgs
 |
COLFLAG_HIDDEN
;

590 
oooHiddí
 = 
TF_OOOHiddí
;

592 
pTab
->
èbFœgs
 |
oooHiddí
;

598 
	`sqlôe3DbFªe
(
db
, 
zModuÀName
);

599  
rc
;

600 
	}
}

609 
	$sqlôe3VèbCÆlC⁄√˘
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTab
){

610 
sqlôe3
 *
db
 = 
pP¨£
->db;

611 c⁄° *
zMod
;

612 
ModuÀ
 *
pMod
;

613 
rc
;

615 
	`as£π
–
pTab
 );

616 if–(
pTab
->
èbFœgs
 & 
TF_VútuÆ
)==0 || 
	`sqlôe3GëVTabÀ
(
db
,ÖTab) ){

617  
SQLITE_OK
;

621 
zMod
 = 
pTab
->
azModuÀArg
[0];

622 
pMod
 = (
ModuÀ
*)
	`sqlôe3HashFöd
(&
db
->
aModuÀ
, 
zMod
);

624 if–!
pMod
 ){

625 c⁄° *
zModuÀ
 = 
pTab
->
azModuÀArg
[0];

626 
	`sqlôe3Eº‹Msg
(
pP¨£
, "nÿsuch moduÀ: %s", 
zModuÀ
);

627 
rc
 = 
SQLITE_ERROR
;

629 *
zEº
 = 0;

630 
rc
 = 
	`vèbCÆlC⁄°ru˘‹
(
db
, 
pTab
, 
pMod
,ÖMod->
pModuÀ
->
xC⁄√˘
, &
zEº
);

631 if–
rc
!=
SQLITE_OK
 ){

632 
	`sqlôe3Eº‹Msg
(
pP¨£
, "%s", 
zEº
);

634 
	`sqlôe3DbFªe
(
db
, 
zEº
);

637  
rc
;

638 
	}
}

643 
	$growVTøns
(
sqlôe3
 *
db
){

644 c⁄° 
ARRAY_INCR
 = 5;

647 if–(
db
->
nVTøns
%
ARRAY_INCR
)==0 ){

648 
VTabÀ
 **
aVTøns
;

649 
nByãs
 = (
sqlôe3_vèb
 *Ë* (
db
->
nVTøns
 + 
ARRAY_INCR
);

650 
aVTøns
 = 
	`sqlôe3DbRóŒoc
(
db
, (*)db->aVTøns, 
nByãs
);

651 if–!
aVTøns
 ){

652  
SQLITE_NOMEM_BKPT
;

654 
	`mem£t
(&
aVTøns
[
db
->
nVTøns
], 0, (
sqlôe3_vèb
 *)*
ARRAY_INCR
);

655 
db
->
aVTøns
 =áVTrans;

658  
SQLITE_OK
;

659 
	}
}

665 
	$addToVTøns
(
sqlôe3
 *
db
, 
VTabÀ
 *
pVTab
){

667 
db
->
aVTøns
[db->
nVTøns
++] = 
pVTab
;

668 
	`sqlôe3VèbLock
(
pVTab
);

669 
	}
}

679 
	$sqlôe3VèbCÆlCª©e
(
sqlôe3
 *
db
, 
iDb
, c⁄° *
zTab
, **
pzEº
){

680 
rc
 = 
SQLITE_OK
;

681 
TabÀ
 *
pTab
;

682 
ModuÀ
 *
pMod
;

683 c⁄° *
zMod
;

685 
pTab
 = 
	`sqlôe3FödTabÀ
(
db
, 
zTab
, db->
aDb
[
iDb
].
zName
);

686 
	`as£π
–
pTab
 && (pTab->
èbFœgs
 & 
TF_VútuÆ
)!=0 && !pTab->
pVTabÀ
 );

689 
zMod
 = 
pTab
->
azModuÀArg
[0];

690 
pMod
 = (
ModuÀ
*)
	`sqlôe3HashFöd
(&
db
->
aModuÀ
, 
zMod
);

696 if–
pMod
==0 ||ÖMod->
pModuÀ
->
xCª©e
==0 ||ÖMod->pModuÀ->
xDe°roy
==0 ){

697 *
pzEº
 = 
	`sqlôe3MPrötf
(
db
, "nÿsuch moduÀ: %s", 
zMod
);

698 
rc
 = 
SQLITE_ERROR
;

700 
rc
 = 
	`vèbCÆlC⁄°ru˘‹
(
db
, 
pTab
, 
pMod
,ÖMod->
pModuÀ
->
xCª©e
, 
pzEº
);

705 if–
rc
==
SQLITE_OK
 && 
	`ALWAYS
(
	`sqlôe3GëVTabÀ
(
db
, 
pTab
)) ){

706 
rc
 = 
	`growVTøns
(
db
);

707 if–
rc
==
SQLITE_OK
 ){

708 
	`addToVTøns
(
db
, 
	`sqlôe3GëVTabÀ
(db, 
pTab
));

712  
rc
;

713 
	}
}

720 
	$sqlôe3_de˛¨e_vèb
(
sqlôe3
 *
db
, c⁄° *
zCª©eTabÀ
){

721 
VèbCtx
 *
pCtx
;

722 
P¨£
 *
pP¨£
;

723 
rc
 = 
SQLITE_OK
;

724 
TabÀ
 *
pTab
;

725 *
zEº
 = 0;

727 #ifde‡
SQLITE_ENABLE_API_ARMOR


728 if–!
	`sqlôe3Sa„tyCheckOk
(
db
Ë|| 
zCª©eTabÀ
==0 ){

729  
SQLITE_MISUSE_BKPT
;

732 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

733 
pCtx
 = 
db
->
pVèbCtx
;

734 if–!
pCtx
 ||ÖCtx->
bDe˛¨ed
 ){

735 
	`sqlôe3Eº‹
(
db
, 
SQLITE_MISUSE
);

736 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

737  
SQLITE_MISUSE_BKPT
;

739 
pTab
 = 
pCtx
->pTab;

740 
	`as£π
–(
pTab
->
èbFœgs
 & 
TF_VútuÆ
)!=0 );

742 
pP¨£
 = 
	`sqlôe3SèckAŒocZîo
(
db
, (*pParse));

743 if–
pP¨£
==0 ){

744 
rc
 = 
SQLITE_NOMEM_BKPT
;

746 
pP¨£
->
de˛¨eVèb
 = 1;

747 
pP¨£
->
db
 = db;

748 
pP¨£
->
nQuîyLo›
 = 1;

750 if–
SQLITE_OK
==
	`sqlôe3RunP¨£r
(
pP¨£
, 
zCª©eTabÀ
, &
zEº
)

751 && 
pP¨£
->
pNewTabÀ


752 && !
db
->
mÆlocFaûed


753 && !
pP¨£
->
pNewTabÀ
->
pSñe˘


754 && (
pP¨£
->
pNewTabÀ
->
èbFœgs
 & 
TF_VútuÆ
)==0

756 if–!
pTab
->
aCﬁ
 ){

757 
pTab
->
aCﬁ
 = 
pP¨£
->
pNewTabÀ
->aCol;

758 
pTab
->
nCﬁ
 = 
pP¨£
->
pNewTabÀ
->nCol;

759 
pP¨£
->
pNewTabÀ
->
nCﬁ
 = 0;

760 
pP¨£
->
pNewTabÀ
->
aCﬁ
 = 0;

762 
pCtx
->
bDe˛¨ed
 = 1;

764 
	`sqlôe3Eº‹WôhMsg
(
db
, 
SQLITE_ERROR
, (
zEº
 ? "%s" : 0), zErr);

765 
	`sqlôe3DbFªe
(
db
, 
zEº
);

766 
rc
 = 
SQLITE_ERROR
;

768 
pP¨£
->
de˛¨eVèb
 = 0;

770 if–
pP¨£
->
pVdbe
 ){

771 
	`sqlôe3VdbeFöÆize
(
pP¨£
->
pVdbe
);

773 
	`sqlôe3DñëeTabÀ
(
db
, 
pP¨£
->
pNewTabÀ
);

774 
	`sqlôe3P¨£rRe£t
(
pP¨£
);

775 
	`sqlôe3SèckFªe
(
db
, 
pP¨£
);

778 
	`as£π
–(
rc
&0xff)==rc );

779 
rc
 = 
	`sqlôe3ApiExô
(
db
,Ñc);

780 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

781  
rc
;

782 
	}
}

791 
	$sqlôe3VèbCÆlDe°roy
(
sqlôe3
 *
db
, 
iDb
, c⁄° *
zTab
){

792 
rc
 = 
SQLITE_OK
;

793 
TabÀ
 *
pTab
;

795 
pTab
 = 
	`sqlôe3FödTabÀ
(
db
, 
zTab
, db->
aDb
[
iDb
].
zName
);

796 if–
	`ALWAYS
(
pTab
!=0 &&ÖTab->
pVTabÀ
!=0) ){

797 
VTabÀ
 *
p
;

798 (*
xDe°roy
)(
sqlôe3_vèb
 *);

799 
p
=
pTab
->
pVTabÀ
;Ö;Öı->
pNext
){

800 
	`as£π
–
p
->
pVèb
 );

801 if–
p
->
pVèb
->
nRef
>0 ){

802  
SQLITE_LOCKED
;

805 
p
 = 
	`vèbDisc⁄√˘AŒ
(
db
, 
pTab
);

806 
xDe°roy
 = 
p
->
pMod
->
pModuÀ
->xDestroy;

807 
	`as£π
–
xDe°roy
!=0 );

808 
rc
 = 
	`xDe°roy
(
p
->
pVèb
);

810 if–
rc
==
SQLITE_OK
 ){

811 
	`as£π
–
pTab
->
pVTabÀ
==
p
 &&Ö->
pNext
==0 );

812 
p
->
pVèb
 = 0;

813 
pTab
->
pVTabÀ
 = 0;

814 
	`sqlôe3VèbU∆ock
(
p
);

818  
rc
;

819 
	}
}

829 
	$ˇŒFöÆi£r
(
sqlôe3
 *
db
, 
off£t
){

830 
i
;

831 if–
db
->
aVTøns
 ){

832 
VTabÀ
 **
aVTøns
 = 
db
->aVTrans;

833 
db
->
aVTøns
 = 0;

834 
i
=0; i<
db
->
nVTøns
; i++){

835 
VTabÀ
 *
pVTab
 = 
aVTøns
[
i
];

836 
sqlôe3_vèb
 *
p
 = 
pVTab
->
pVèb
;

837 if–
p
 ){

838 (*
x
)(
sqlôe3_vèb
 *);

839 
x
 = *((**)(
sqlôe3_vèb
 *))((*)
p
->
pModuÀ
 + 
off£t
);

840 if–
x
 ) 
	`x
(
p
);

842 
pVTab
->
iSavïoöt
 = 0;

843 
	`sqlôe3VèbU∆ock
(
pVTab
);

845 
	`sqlôe3DbFªe
(
db
, 
aVTøns
);

846 
db
->
nVTøns
 = 0;

848 
	}
}

857 
	$sqlôe3VèbSync
(
sqlôe3
 *
db
, 
Vdbe
 *
p
){

858 
i
;

859 
rc
 = 
SQLITE_OK
;

860 
VTabÀ
 **
aVTøns
 = 
db
->aVTrans;

862 
db
->
aVTøns
 = 0;

863 
i
=0; 
rc
==
SQLITE_OK
 && i<
db
->
nVTøns
; i++){

864 (*
x
)(
sqlôe3_vèb
 *);

865 
sqlôe3_vèb
 *
pVèb
 = 
aVTøns
[
i
]->pVtab;

866 if–
pVèb
 && (
x
 =ÖVèb->
pModuÀ
->
xSync
)!=0 ){

867 
rc
 = 
	`x
(
pVèb
);

868 
	`sqlôe3VèbImp‹tEºmsg
(
p
, 
pVèb
);

871 
db
->
aVTøns
 =áVTrans;

872  
rc
;

873 
	}
}

879 
	$sqlôe3VèbRﬁlback
(
sqlôe3
 *
db
){

880 
	`ˇŒFöÆi£r
(
db
, 
	`off£tof
(
sqlôe3_moduÀ
,
xRﬁlback
));

881  
SQLITE_OK
;

882 
	}
}

888 
	$sqlôe3VèbCommô
(
sqlôe3
 *
db
){

889 
	`ˇŒFöÆi£r
(
db
, 
	`off£tof
(
sqlôe3_moduÀ
,
xCommô
));

890  
SQLITE_OK
;

891 
	}
}

901 
	$sqlôe3VèbBegö
(
sqlôe3
 *
db
, 
VTabÀ
 *
pVTab
){

902 
rc
 = 
SQLITE_OK
;

903 c⁄° 
sqlôe3_moduÀ
 *
pModuÀ
;

910 if–
	`sqlôe3VèbInSync
(
db
) ){

911  
SQLITE_LOCKED
;

913 if–!
pVTab
 ){

914  
SQLITE_OK
;

916 
pModuÀ
 = 
pVTab
->
pVèb
->pModule;

918 if–
pModuÀ
->
xBegö
 ){

919 
i
;

922 
i
=0; i<
db
->
nVTøns
; i++){

923 if–
db
->
aVTøns
[
i
]==
pVTab
 ){

924  
SQLITE_OK
;

930 
rc
 = 
	`growVTøns
(
db
);

931 if–
rc
==
SQLITE_OK
 ){

932 
rc
 = 
pModuÀ
->
	`xBegö
(
pVTab
->
pVèb
);

933 if–
rc
==
SQLITE_OK
 ){

934 
iSv±
 = 
db
->
nSèãmít
 + db->
nSavïoöt
;

935 
	`addToVTøns
(
db
, 
pVTab
);

936 if–
iSv±
 ) 
rc
 = 
	`sqlôe3VèbSavïoöt
(
db
, 
SAVEPOINT_BEGIN
, iSvpt-1);

940  
rc
;

941 
	}
}

958 
	$sqlôe3VèbSavïoöt
(
sqlôe3
 *
db
, 
›
, 
iSavïoöt
){

959 
rc
 = 
SQLITE_OK
;

961 
	`as£π
–
›
==
SAVEPOINT_RELEASE
||›==
SAVEPOINT_ROLLBACK
||›==
SAVEPOINT_BEGIN
 );

962 
	`as£π
–
iSavïoöt
>=-1 );

963 if–
db
->
aVTøns
 ){

964 
i
;

965 
i
=0; 
rc
==
SQLITE_OK
 && i<
db
->
nVTøns
; i++){

966 
VTabÀ
 *
pVTab
 = 
db
->
aVTøns
[
i
];

967 c⁄° 
sqlôe3_moduÀ
 *
pMod
 = 
pVTab
->pMod->
pModuÀ
;

968 if–
pVTab
->
pVèb
 && 
pMod
->
iVîsi⁄
>=2 ){

969 (*
xMëhod
)(
sqlôe3_vèb
 *, );

970  
›
 ){

971 
SAVEPOINT_BEGIN
:

972 
xMëhod
 = 
pMod
->
xSavïoöt
;

973 
pVTab
->
iSavïoöt
 = iSavepoint+1;

975 
SAVEPOINT_ROLLBACK
:

976 
xMëhod
 = 
pMod
->
xRﬁlbackTo
;

979 
xMëhod
 = 
pMod
->
xRñó£
;

982 if–
xMëhod
 && 
pVTab
->
iSavïoöt
>iSavepoint ){

983 
rc
 = 
	`xMëhod
(
pVTab
->
pVèb
, 
iSavïoöt
);

988  
rc
;

989 
	}
}

1004 
FuncDef
 *
	$sqlôe3VèbOvîlﬂdFun˘i⁄
(

1005 
sqlôe3
 *
db
,

1006 
FuncDef
 *
pDef
,

1007 
nArg
,

1008 
Ex¥
 *
pEx¥


1010 
TabÀ
 *
pTab
;

1011 
sqlôe3_vèb
 *
pVèb
;

1012 
sqlôe3_moduÀ
 *
pMod
;

1013 (*
xSFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**) = 0;

1014 *
pArg
 = 0;

1015 
FuncDef
 *
pNew
;

1016 
rc
 = 0;

1017 *
zLowîName
;

1018 *
z
;

1022 if–
	`NEVER
(
pEx¥
==0ËË 
pDef
;

1023 if–
pEx¥
->
›
!=
TK_COLUMN
 )  
pDef
;

1024 
pTab
 = 
pEx¥
->pTab;

1025 if–
	`NEVER
(
pTab
==0ËË 
pDef
;

1026 if–(
pTab
->
èbFœgs
 & 
TF_VútuÆ
)==0 )  
pDef
;

1027 
pVèb
 = 
	`sqlôe3GëVTabÀ
(
db
, 
pTab
)->pVtab;

1028 
	`as£π
–
pVèb
!=0 );

1029 
	`as£π
–
pVèb
->
pModuÀ
!=0 );

1030 
pMod
 = (
sqlôe3_moduÀ
 *)
pVèb
->
pModuÀ
;

1031 if–
pMod
->
xFödFun˘i⁄
==0 )  
pDef
;

1036 
zLowîName
 = 
	`sqlôe3DbSåDup
(
db
, 
pDef
->
zName
);

1037 if–
zLowîName
 ){

1038 
z
=(*)
zLowîName
; *z; z++){

1039 *
z
 = 
sqlôe3UµîToLowî
[*z];

1041 
rc
 = 
pMod
->
	`xFödFun˘i⁄
(
pVèb
, 
nArg
, 
zLowîName
, &
xSFunc
, &
pArg
);

1042 
	`sqlôe3DbFªe
(
db
, 
zLowîName
);

1044 if–
rc
==0 ){

1045  
pDef
;

1050 
pNew
 = 
	`sqlôe3DbMÆlocZîo
(
db
, (*pNew)

1051 + 
	`sqlôe3SåÀn30
(
pDef
->
zName
) + 1);

1052 if–
pNew
==0 ){

1053  
pDef
;

1055 *
pNew
 = *
pDef
;

1056 
pNew
->
zName
 = (const *)&pNew[1];

1057 
	`mem˝y
((*)&
pNew
[1], 
pDef
->
zName
, 
	`sqlôe3SåÀn30
(pDef->zName)+1);

1058 
pNew
->
xSFunc
 = xSFunc;

1059 
pNew
->
pU£rD©a
 = 
pArg
;

1060 
pNew
->
funcFœgs
 |
SQLITE_FUNC_EPHEM
;

1061  
pNew
;

1062 
	}
}

1070 
	$sqlôe3VèbMakeWrôabÀ
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTab
){

1071 
P¨£
 *
pT›Àvñ
 = 
	`sqlôe3P¨£T›Àvñ
(
pP¨£
);

1072 
i
, 
n
;

1073 
TabÀ
 **
≠VèbLock
;

1075 
	`as£π
–
	`IsVútuÆ
(
pTab
) );

1076 
i
=0; i<
pT›Àvñ
->
nVèbLock
; i++){

1077 if–
pTab
==
pT›Àvñ
->
≠VèbLock
[
i
] ) ;

1079 
n
 = (
pT›Àvñ
->
nVèbLock
+1)*’T›Àvñ->
≠VèbLock
[0]);

1080 
≠VèbLock
 = 
	`sqlôe3_ªÆloc64
(
pT›Àvñ
->≠VèbLock, 
n
);

1081 if–
≠VèbLock
 ){

1082 
pT›Àvñ
->
≠VèbLock
 =ápVtabLock;

1083 
pT›Àvñ
->
≠VèbLock
[pT›Àvñ->
nVèbLock
++] = 
pTab
;

1085 
	`sqlôe3OomFau…
(
pT›Àvñ
->
db
);

1087 
	}
}

1103 
	$sqlôe3VèbEp⁄ymousTabÀInô
(
P¨£
 *
pP¨£
, 
ModuÀ
 *
pMod
){

1104 c⁄° 
sqlôe3_moduÀ
 *
pModuÀ
 = 
pMod
->pModule;

1105 
TabÀ
 *
pTab
;

1106 *
zEº
 = 0;

1107 
nName
;

1108 
rc
;

1109 
sqlôe3
 *
db
 = 
pP¨£
->db;

1110 if–
pMod
->
pEpoTab
 )  1;

1111 if–
pModuÀ
->
xCª©e
!=0 &&ÖModuÀ->xCª©e!ıModuÀ->
xC⁄√˘
 )  0;

1112 
nName
 = 
	`sqlôe3SåÀn30
(
pMod
->
zName
) + 1;

1113 
pTab
 = 
	`sqlôe3DbMÆlocZîo
(
db
, (
TabÀ
Ë+ 
nName
);

1114 if–
pTab
==0 )  0;

1115 
pMod
->
pEpoTab
 = 
pTab
;

1116 
pTab
->
zName
 = (*)&pTab[1];

1117 
	`mem˝y
(
pTab
->
zName
, 
pMod
->zName, 
nName
);

1118 
pTab
->
nRef
 = 1;

1119 
pTab
->
pSchema
 = 
db
->
aDb
[0].pSchema;

1120 
pTab
->
èbFœgs
 |
TF_VútuÆ
;

1121 
pTab
->
nModuÀArg
 = 0;

1122 
pTab
->
iPKey
 = -1;

1123 
	`addModuÀArgumít
(
db
, 
pTab
, 
	`sqlôe3DbSåDup
(db,ÖTab->
zName
));

1124 
	`addModuÀArgumít
(
db
, 
pTab
, 0);

1125 
	`addModuÀArgumít
(
db
, 
pTab
, 
	`sqlôe3DbSåDup
(db,ÖTab->
zName
));

1126 
rc
 = 
	`vèbCÆlC⁄°ru˘‹
(
db
, 
pTab
, 
pMod
, 
pModuÀ
->
xC⁄√˘
, &
zEº
);

1127 if–
rc
 ){

1128 
	`sqlôe3Eº‹Msg
(
pP¨£
, "%s", 
zEº
);

1129 
	`sqlôe3DbFªe
(
db
, 
zEº
);

1130 
	`sqlôe3VèbEp⁄ymousTabÀCÀ¨
(
db
, 
pMod
);

1134 
	}
}

1140 
	$sqlôe3VèbEp⁄ymousTabÀCÀ¨
(
sqlôe3
 *
db
, 
ModuÀ
 *
pMod
){

1141 
TabÀ
 *
pTab
 = 
pMod
->
pEpoTab
;

1142 if–
pTab
!=0 ){

1143 
	`sqlôe3DñëeCﬁumnNames
(
db
, 
pTab
);

1144 
	`sqlôe3VèbCÀ¨
(
db
, 
pTab
);

1145 
	`sqlôe3DbFªe
(
db
, 
pTab
);

1146 
pMod
->
pEpoTab
 = 0;

1148 
	}
}

1157 
	$sqlôe3_vèb_⁄_c⁄Êi˘
(
sqlôe3
 *
db
){

1158 c⁄° 
aM≠
[] = {

1159 
SQLITE_ROLLBACK
, 
SQLITE_ABORT
, 
SQLITE_FAIL
, 
SQLITE_IGNORE
, 
SQLITE_REPLACE


1161 #ifde‡
SQLITE_ENABLE_API_ARMOR


1162 if–!
	`sqlôe3Sa„tyCheckOk
(
db
ËË 
SQLITE_MISUSE_BKPT
;

1164 
	`as£π
–
OE_Rﬁlback
==1 && 
OE_Ab‹t
==2 && 
OE_Faû
==3 );

1165 
	`as£π
–
OE_Ign‹e
==4 && 
OE_Rïœ˚
==5 );

1166 
	`as£π
–
db
->
vèbOnC⁄Êi˘
>=1 && db->vtabOnConflict<=5 );

1167  ()
aM≠
[
db
->
vèbOnC⁄Êi˘
-1];

1168 
	}
}

1175 
	$sqlôe3_vèb_c⁄fig
(
sqlôe3
 *
db
, 
›
, ...){

1176 
va_li°
 
≠
;

1177 
rc
 = 
SQLITE_OK
;

1179 #ifde‡
SQLITE_ENABLE_API_ARMOR


1180 if–!
	`sqlôe3Sa„tyCheckOk
(
db
ËË 
SQLITE_MISUSE_BKPT
;

1182 
	`sqlôe3_muãx_íãr
(
db
->
muãx
);

1183 
	`va_°¨t
(
≠
, 
›
);

1184  
›
 ){

1185 
SQLITE_VTAB_CONSTRAINT_SUPPORT
: {

1186 
VèbCtx
 *
p
 = 
db
->
pVèbCtx
;

1187 if–!
p
 ){

1188 
rc
 = 
SQLITE_MISUSE_BKPT
;

1190 
	`as£π
–
p
->
pTab
==0 || (p->pTab->
èbFœgs
 & 
TF_VútuÆ
)!=0 );

1191 
p
->
pVTabÀ
->
bC⁄°øöt
 = (
u8
)
	`va_¨g
(
≠
, );

1196 
rc
 = 
SQLITE_MISUSE_BKPT
;

1199 
	`va_íd
(
≠
);

1201 if–
rc
!=
SQLITE_OK
 ) 
	`sqlôe3Eº‹
(
db
,Ñc);

1202 
	`sqlôe3_muãx_Àave
(
db
->
muãx
);

1203  
rc
;

1204 
	}
}

	@vxworks.h

15 #i‡
deföed
(
__RTP__
Ë|| deföed(
_WRS_KERNEL
)

18 
	~<vxW‹ks.h
>

19 
	~<±hªad.h
>

20 
	#OS_VXWORKS
 1

	)

21 
	#SQLITE_OS_OTHER
 0

	)

22 
	#SQLITE_HOMEGROWN_RECURSIVE_MUTEX
 1

	)

23 
	#SQLITE_OMIT_LOAD_EXTENSION
 1

	)

24 
	#SQLITE_ENABLE_LOCKING_STYLE
 0

	)

25 
	#HAVE_UTIME
 1

	)

28 
	#OS_VXWORKS
 0

	)

29 
	#HAVE_FCHOWN
 1

	)

30 
	#HAVE_READLINK
 1

	)

31 
	#HAVE_LSTAT
 1

	)

	@wal.c

243 #i‚de‡
SQLITE_OMIT_WAL


245 
	~"wÆ.h
"

250 #i‡
deföed
(
SQLITE_TEST
Ë&& deföed(
SQLITE_DEBUG
)

251 
	gsqlôe3WÆTø˚
 = 0;

252 
	#WALTRACE
(
X
Ëif(
sqlôe3WÆTø˚
Ë
sqlôe3DebugPrötf
 
	)
X

254 
	#WALTRACE
(
X
)

	)

270 
	#WAL_MAX_VERSION
 3007000

	)

271 
	#WALINDEX_MAX_VERSION
 3007000

	)

278 
	#WAL_WRITE_LOCK
 0

	)

279 
	#WAL_ALL_BUT_WRITE
 1

	)

280 
	#WAL_CKPT_LOCK
 1

	)

281 
	#WAL_RECOVER_LOCK
 2

	)

282 
	#WAL_READ_LOCK
(
I
Ë(3+(I))

	)

283 
	#WAL_NREADER
 (
SQLITE_SHM_NLOCK
-3)

	)

287 
WÆIndexHdr
 
	tWÆIndexHdr
;

288 
WÆIãøt‹
 
	tWÆIãøt‹
;

289 
WÆCk±Info
 
	tWÆCk±Info
;

305 
	sWÆIndexHdr
 {

306 
u32
 
	miVîsi⁄
;

307 
u32
 
	munu£d
;

308 
u32
 
	miCh™ge
;

309 
u8
 
	misInô
;

310 
u8
 
	mbigEndCksum
;

311 
u16
 
	mszPage
;

312 
u32
 
	mmxFøme
;

313 
u32
 
	mnPage
;

314 
u32
 
	maFømeCksum
[2];

315 
u32
 
	maSÆt
[2];

316 
u32
 
	maCksum
[2];

378 
	sWÆCk±Info
 {

379 
u32
 
	mnBackfûl
;

380 
u32
 
	maRódM¨k
[
WAL_NREADER
];

381 
u8
 
	maLock
[
SQLITE_SHM_NLOCK
];

382 
u32
 
	mnBackfûlAâem±ed
;

383 
u32
 
	mnŸU£d0
;

385 
	#READMARK_NOT_USED
 0xffffffff

	)

393 
	#WALINDEX_LOCK_OFFSET
 ((
WÆIndexHdr
)*2+
	`off£tof
(
WÆCk±Info
,
aLock
))

	)

394 
	#WALINDEX_HDR_SIZE
 ((
WÆIndexHdr
)*2+(
WÆCk±Info
))

	)

397 
	#WAL_FRAME_HDRSIZE
 24

	)

401 
	#WAL_HDRSIZE
 32

	)

412 
	#WAL_MAGIC
 0x377f0682

	)

419 
	#wÆFømeOff£t
(
iFøme
, 
szPage
) ( \

420 
WAL_HDRSIZE
 + ((
iFøme
)-1)*(
i64
)((
szPage
)+
WAL_FRAME_HDRSIZE
) \

421 )

	)

427 
	sWÆ
 {

428 
sqlôe3_vfs
 *
	mpVfs
;

429 
sqlôe3_fûe
 *
	mpDbFd
;

430 
sqlôe3_fûe
 *
	mpWÆFd
;

431 
u32
 
	miCÆlback
;

432 
i64
 
	mmxWÆSize
;

433 
	mnWiD©a
;

434 
	mszFú°Block
;

435 vﬁ©ûê
u32
 **
	m≠WiD©a
;

436 
u32
 
	mszPage
;

437 
i16
 
	mªadLock
;

438 
u8
 
	msyncFœgs
;

439 
u8
 
	mex˛usiveMode
;

440 
u8
 
	mwrôeLock
;

441 
u8
 
	mck±Lock
;

442 
u8
 
	mªadO∆y
;

443 
u8
 
	måunˇãOnCommô
;

444 
u8
 
	msyncHódî
;

445 
u8
 
	m∑dToSe˘‹Bound¨y
;

446 
WÆIndexHdr
 
	mhdr
;

447 
u32
 
	mmöFøme
;

448 
u32
 
	miReCksum
;

449 c⁄° *
	mzWÆName
;

450 
u32
 
	mnCk±
;

451 #ifde‡
SQLITE_DEBUG


452 
u8
 
	mlockEº‹
;

454 #ifde‡
SQLITE_ENABLE_SNAPSHOT


455 
WÆIndexHdr
 *
	mpS«pshŸ
;

462 
	#WAL_NORMAL_MODE
 0

	)

463 
	#WAL_EXCLUSIVE_MODE
 1

	)

464 
	#WAL_HEAPMEMORY_MODE
 2

	)

469 
	#WAL_RDWR
 0

	)

470 
	#WAL_RDONLY
 1

	)

471 
	#WAL_SHM_RDONLY
 2

	)

477 
u16
 
	tht_¶Ÿ
;

494 
	sWÆIãøt‹
 {

495 
	miPri‹
;

496 
	mnSegmít
;

497 
	sWÆSegmít
 {

498 
	miNext
;

499 
ht_¶Ÿ
 *
	maIndex
;

500 
u32
 *
	maPgno
;

501 
	mnE¡ry
;

502 
	miZîo
;

503 } 
	maSegmít
[1];

514 
	#HASHTABLE_NPAGE
 4096

	)

515 
	#HASHTABLE_HASH_1
 383

	)

516 
	#HASHTABLE_NSLOT
 (
HASHTABLE_NPAGE
*2Ë

	)

523 
	#HASHTABLE_NPAGE_ONE
 (
HASHTABLE_NPAGE
 - (
WALINDEX_HDR_SIZE
/(
u32
)))

	)

526 
	#WALINDEX_PGSZ
 ( \

527 (
ht_¶Ÿ
)*
HASHTABLE_NSLOT
 + 
HASHTABLE_NPAGE
*(
u32
) \

528 )

	)

539 
	$wÆIndexPage
(
WÆ
 *
pWÆ
, 
iPage
, vﬁ©ûê
u32
 **
µPage
){

540 
rc
 = 
SQLITE_OK
;

543 if–
pWÆ
->
nWiD©a
<=
iPage
 ){

544 
nByã
 = (
u32
*)*(
iPage
+1);

545 vﬁ©ûê
u32
 **
≠New
;

546 
≠New
 = (vﬁ©ûê
u32
 **)
	`sqlôe3_ªÆloc64
((*)
pWÆ
->
≠WiD©a
, 
nByã
);

547 if–!
≠New
 ){

548 *
µPage
 = 0;

549  
SQLITE_NOMEM_BKPT
;

551 
	`mem£t
((*)&
≠New
[
pWÆ
->
nWiD©a
], 0,

552 (
u32
*)*(
iPage
+1-
pWÆ
->
nWiD©a
));

553 
pWÆ
->
≠WiD©a
 = 
≠New
;

554 
pWÆ
->
nWiD©a
 = 
iPage
+1;

558 if–
pWÆ
->
≠WiD©a
[
iPage
]==0 ){

559 if–
pWÆ
->
ex˛usiveMode
==
WAL_HEAPMEMORY_MODE
 ){

560 
pWÆ
->
≠WiD©a
[
iPage
] = (
u32
 vﬁ©ûê*)
	`sqlôe3MÆlocZîo
(
WALINDEX_PGSZ
);

561 if–!
pWÆ
->
≠WiD©a
[
iPage
] ) 
rc
 = 
SQLITE_NOMEM_BKPT
;

563 
rc
 = 
	`sqlôe3OsShmM≠
(
pWÆ
->
pDbFd
, 
iPage
, 
WALINDEX_PGSZ
,

564 
pWÆ
->
wrôeLock
, (vﬁ©ûê**)&pWÆ->
≠WiD©a
[
iPage
]

566 if–
rc
==
SQLITE_READONLY
 ){

567 
pWÆ
->
ªadO∆y
 |
WAL_SHM_RDONLY
;

568 
rc
 = 
SQLITE_OK
;

573 *
µPage
 = 
pWÆ
->
≠WiD©a
[
iPage
];

574 
	`as£π
–
iPage
==0 || *
µPage
 || 
rc
!=
SQLITE_OK
 );

575  
rc
;

576 
	}
}

581 vﬁ©ûê
WÆCk±Info
 *
	$wÆCk±Info
(
WÆ
 *
pWÆ
){

582 
	`as£π
–
pWÆ
->
nWiD©a
>0 &&ÖWÆ->
≠WiD©a
[0] );

583  (vﬁ©ûê
WÆCk±Info
*)&(
pWÆ
->
≠WiD©a
[0][(
WÆIndexHdr
)/2]);

584 
	}
}

589 vﬁ©ûê
WÆIndexHdr
 *
	$wÆIndexHdr
(
WÆ
 *
pWÆ
){

590 
	`as£π
–
pWÆ
->
nWiD©a
>0 &&ÖWÆ->
≠WiD©a
[0] );

591  (vﬁ©ûê
WÆIndexHdr
*)
pWÆ
->
≠WiD©a
[0];

592 
	}
}

601 
	#BYTESWAP32
(
x
) ( \

602 (((
x
)&0x000000FF)<<24) + (((x)&0x0000FF00)<<8) \

603 + (((
x
)&0x00FF0000)>>8) + (((x)&0xFF000000)>>24) \

604 )

	)

615 
	$wÆChecksumByãs
(

616 
«tiveCksum
,

617 
u8
 *
a
,

618 
nByã
,

619 c⁄° 
u32
 *
aIn
,

620 
u32
 *
aOut


622 
u32
 
s1
, 
s2
;

623 
u32
 *
aD©a
 = (u32 *)
a
;

624 
u32
 *
aEnd
 = (u32 *)&
a
[
nByã
];

626 if–
aIn
 ){

627 
s1
 = 
aIn
[0];

628 
s2
 = 
aIn
[1];

630 
s1
 = 
s2
 = 0;

633 
	`as£π
–
nByã
>=8 );

634 
	`as£π
–(
nByã
&0x00000007)==0 );

636 if–
«tiveCksum
 ){

638 
s1
 +*
aD©a
++ + 
s2
;

639 
s2
 +*
aD©a
++ + 
s1
;

640 } 
aD©a
<
aEnd
 );

643 
s1
 +
	`BYTESWAP32
(
aD©a
[0]Ë+ 
s2
;

644 
s2
 +
	`BYTESWAP32
(
aD©a
[1]Ë+ 
s1
;

645 
aD©a
 += 2;

646 } 
aD©a
<
aEnd
 );

649 
aOut
[0] = 
s1
;

650 
aOut
[1] = 
s2
;

651 
	}
}

653 
	$wÆShmB¨rõr
(
WÆ
 *
pWÆ
){

654 if–
pWÆ
->
ex˛usiveMode
!=
WAL_HEAPMEMORY_MODE
 ){

655 
	`sqlôe3OsShmB¨rõr
(
pWÆ
->
pDbFd
);

657 
	}
}

664 
	$wÆIndexWrôeHdr
(
WÆ
 *
pWÆ
){

665 vﬁ©ûê
WÆIndexHdr
 *
aHdr
 = 
	`wÆIndexHdr
(
pWÆ
);

666 c⁄° 
nCksum
 = 
	`off£tof
(
WÆIndexHdr
, 
aCksum
);

668 
	`as£π
–
pWÆ
->
wrôeLock
 );

669 
pWÆ
->
hdr
.
isInô
 = 1;

670 
pWÆ
->
hdr
.
iVîsi⁄
 = 
WALINDEX_MAX_VERSION
;

671 
	`wÆChecksumByãs
(1, (
u8
*)&
pWÆ
->
hdr
, 
nCksum
, 0,ÖWÆ->hdr.
aCksum
);

672 
	`mem˝y
((*)&
aHdr
[1], (c⁄° *)&
pWÆ
->
hdr
, (
WÆIndexHdr
));

673 
	`wÆShmB¨rõr
(
pWÆ
);

674 
	`mem˝y
((*)&
aHdr
[0], (c⁄° *)&
pWÆ
->
hdr
, (
WÆIndexHdr
));

675 
	}
}

690 
	$wÆEncodeFøme
(

691 
WÆ
 *
pWÆ
,

692 
u32
 
iPage
,

693 
u32
 
nTrunˇã
,

694 
u8
 *
aD©a
,

695 
u8
 *
aFøme


697 
«tiveCksum
;

698 
u32
 *
aCksum
 = 
pWÆ
->
hdr
.
aFømeCksum
;

699 
	`as£π
–
WAL_FRAME_HDRSIZE
==24 );

700 
	`sqlôe3Put4byã
(&
aFøme
[0], 
iPage
);

701 
	`sqlôe3Put4byã
(&
aFøme
[4], 
nTrunˇã
);

702 if–
pWÆ
->
iReCksum
==0 ){

703 
	`mem˝y
(&
aFøme
[8], 
pWÆ
->
hdr
.
aSÆt
, 8);

705 
«tiveCksum
 = (
pWÆ
->
hdr
.
bigEndCksum
==
SQLITE_BIGENDIAN
);

706 
	`wÆChecksumByãs
(
«tiveCksum
, 
aFøme
, 8, 
aCksum
,áCksum);

707 
	`wÆChecksumByãs
(
«tiveCksum
, 
aD©a
, 
pWÆ
->
szPage
, 
aCksum
,áCksum);

709 
	`sqlôe3Put4byã
(&
aFøme
[16], 
aCksum
[0]);

710 
	`sqlôe3Put4byã
(&
aFøme
[20], 
aCksum
[1]);

712 
	`mem£t
(&
aFøme
[8], 0, 16);

714 
	}
}

721 
	$wÆDecodeFøme
(

722 
WÆ
 *
pWÆ
,

723 
u32
 *
piPage
,

724 
u32
 *
≤Trunˇã
,

725 
u8
 *
aD©a
,

726 
u8
 *
aFøme


728 
«tiveCksum
;

729 
u32
 *
aCksum
 = 
pWÆ
->
hdr
.
aFømeCksum
;

730 
u32
 
pgno
;

731 
	`as£π
–
WAL_FRAME_HDRSIZE
==24 );

736 if–
	`memcmp
(&
pWÆ
->
hdr
.
aSÆt
, &
aFøme
[8], 8)!=0 ){

742 
pgno
 = 
	`sqlôe3Gë4byã
(&
aFøme
[0]);

743 if–
pgno
==0 ){

752 
«tiveCksum
 = (
pWÆ
->
hdr
.
bigEndCksum
==
SQLITE_BIGENDIAN
);

753 
	`wÆChecksumByãs
(
«tiveCksum
, 
aFøme
, 8, 
aCksum
,áCksum);

754 
	`wÆChecksumByãs
(
«tiveCksum
, 
aD©a
, 
pWÆ
->
szPage
, 
aCksum
,áCksum);

755 if–
aCksum
[0]!=
	`sqlôe3Gë4byã
(&
aFøme
[16])

756 || 
aCksum
[1]!=
	`sqlôe3Gë4byã
(&
aFøme
[20])

765 *
piPage
 = 
pgno
;

766 *
≤Trunˇã
 = 
	`sqlôe3Gë4byã
(&
aFøme
[4]);

768 
	}
}

771 #i‡
deföed
(
SQLITE_TEST
Ë&& deföed(
SQLITE_DEBUG
)

776 c⁄° *
	$wÆLockName
(
lockIdx
){

777 if–
lockIdx
==
WAL_WRITE_LOCK
 ){

779 }if–
lockIdx
==
WAL_CKPT_LOCK
 ){

781 }if–
lockIdx
==
WAL_RECOVER_LOCK
 ){

784 
zName
[15];

785 
	`sqlôe3_¢¥ötf
((
zName
), zName, "READ-LOCK[%d]",

786 
lockIdx
-
	`WAL_READ_LOCK
(0));

787  
zName
;

789 
	}
}

800 
	$wÆLockSh¨ed
(
WÆ
 *
pWÆ
, 
lockIdx
){

801 
rc
;

802 if–
pWÆ
->
ex˛usiveMode
 )  
SQLITE_OK
;

803 
rc
 = 
	`sqlôe3OsShmLock
(
pWÆ
->
pDbFd
, 
lockIdx
, 1,

804 
SQLITE_SHM_LOCK
 | 
SQLITE_SHM_SHARED
);

805 
	`WALTRACE
(("WAL%p:ácquúêSHARED-%†%s\n", 
pWÆ
,

806 
	`wÆLockName
(
lockIdx
), 
rc
 ? "failed" : "ok"));

807 
	`VVA_ONLY
–
pWÆ
->
lockEº‹
 = (
u8
)(
rc
!=
SQLITE_OK
 &&Ñc!=
SQLITE_BUSY
); )

808  
rc
;

809 
	}
}

810 
	$wÆU∆ockSh¨ed
(
WÆ
 *
pWÆ
, 
lockIdx
){

811 if–
pWÆ
->
ex˛usiveMode
 ) ;

812 ()
	`sqlôe3OsShmLock
(
pWÆ
->
pDbFd
, 
lockIdx
, 1,

813 
SQLITE_SHM_UNLOCK
 | 
SQLITE_SHM_SHARED
);

814 
	`WALTRACE
(("WAL%p:Ññó£ SHARED-%s\n", 
pWÆ
, 
	`wÆLockName
(
lockIdx
)));

815 
	}
}

816 
	$wÆLockEx˛usive
(
WÆ
 *
pWÆ
, 
lockIdx
, 
n
){

817 
rc
;

818 if–
pWÆ
->
ex˛usiveMode
 )  
SQLITE_OK
;

819 
rc
 = 
	`sqlôe3OsShmLock
(
pWÆ
->
pDbFd
, 
lockIdx
, 
n
,

820 
SQLITE_SHM_LOCK
 | 
SQLITE_SHM_EXCLUSIVE
);

821 
	`WALTRACE
(("WAL%p:ácquúêEXCLUSIVE-%†˙t=%d %s\n", 
pWÆ
,

822 
	`wÆLockName
(
lockIdx
), 
n
, 
rc
 ? "failed" : "ok"));

823 
	`VVA_ONLY
–
pWÆ
->
lockEº‹
 = (
u8
)(
rc
!=
SQLITE_OK
 &&Ñc!=
SQLITE_BUSY
); )

824  
rc
;

825 
	}
}

826 
	$wÆU∆ockEx˛usive
(
WÆ
 *
pWÆ
, 
lockIdx
, 
n
){

827 if–
pWÆ
->
ex˛usiveMode
 ) ;

828 ()
	`sqlôe3OsShmLock
(
pWÆ
->
pDbFd
, 
lockIdx
, 
n
,

829 
SQLITE_SHM_UNLOCK
 | 
SQLITE_SHM_EXCLUSIVE
);

830 
	`WALTRACE
(("WAL%p:Ññó£ EXCLUSIVE-%†˙t=%d\n", 
pWÆ
,

831 
	`wÆLockName
(
lockIdx
), 
n
));

832 
	}
}

839 
	$wÆHash
(
u32
 
iPage
){

840 
	`as£π
–
iPage
>0 );

841 
	`as£π
–(
HASHTABLE_NSLOT
 & (HASHTABLE_NSLOT-1))==0 );

842  (
iPage
*
HASHTABLE_HASH_1
Ë& (
HASHTABLE_NSLOT
-1);

843 
	}
}

844 
	$wÆNextHash
(
iPri‹Hash
){

845  (
iPri‹Hash
+1)&(
HASHTABLE_NSLOT
-1);

846 
	}
}

862 
	$wÆHashGë
(

863 
WÆ
 *
pWÆ
,

864 
iHash
,

865 vﬁ©ûê
ht_¶Ÿ
 **
∑Hash
,

866 vﬁ©ûê
u32
 **
∑Pgno
,

867 
u32
 *
piZîo


869 
rc
;

870 vﬁ©ûê
u32
 *
aPgno
;

872 
rc
 = 
	`wÆIndexPage
(
pWÆ
, 
iHash
, &
aPgno
);

873 
	`as£π
–
rc
==
SQLITE_OK
 || 
iHash
>0 );

875 if–
rc
==
SQLITE_OK
 ){

876 
u32
 
iZîo
;

877 vﬁ©ûê
ht_¶Ÿ
 *
aHash
;

879 
aHash
 = (vﬁ©ûê
ht_¶Ÿ
 *)&
aPgno
[
HASHTABLE_NPAGE
];

880 if–
iHash
==0 ){

881 
aPgno
 = &aPgno[
WALINDEX_HDR_SIZE
/(
u32
)];

882 
iZîo
 = 0;

884 
iZîo
 = 
HASHTABLE_NPAGE_ONE
 + (
iHash
-1)*
HASHTABLE_NPAGE
;

887 *
∑Pgno
 = &
aPgno
[-1];

888 *
∑Hash
 = 
aHash
;

889 *
piZîo
 = 
iZîo
;

891  
rc
;

892 
	}
}

900 
	$wÆFømePage
(
u32
 
iFøme
){

901 
iHash
 = (
iFøme
+
HASHTABLE_NPAGE
-
HASHTABLE_NPAGE_ONE
-1) / HASHTABLE_NPAGE;

902 
	`as£π
–(
iHash
==0 || 
iFøme
>
HASHTABLE_NPAGE_ONE
)

903 && (
iHash
>=1 || 
iFøme
<=
HASHTABLE_NPAGE_ONE
)

904 && (
iHash
<=1 || 
iFøme
>(
HASHTABLE_NPAGE_ONE
+
HASHTABLE_NPAGE
))

905 && (
iHash
>=2 || 
iFøme
<=
HASHTABLE_NPAGE_ONE
+
HASHTABLE_NPAGE
)

906 && (
iHash
<=2 || 
iFøme
>(
HASHTABLE_NPAGE_ONE
+2*
HASHTABLE_NPAGE
))

908  
iHash
;

909 
	}
}

914 
u32
 
	$wÆFømePgno
(
WÆ
 *
pWÆ
, 
u32
 
iFøme
){

915 
iHash
 = 
	`wÆFømePage
(
iFøme
);

916 if–
iHash
==0 ){

917  
pWÆ
->
≠WiD©a
[0][
WALINDEX_HDR_SIZE
/(
u32
Ë+ 
iFøme
 - 1];

919  
pWÆ
->
≠WiD©a
[
iHash
][(
iFøme
-1-
HASHTABLE_NPAGE_ONE
)%
HASHTABLE_NPAGE
];

920 
	}
}

934 
	$wÆCÀ™upHash
(
WÆ
 *
pWÆ
){

935 vﬁ©ûê
ht_¶Ÿ
 *
aHash
 = 0;

936 vﬁ©ûê
u32
 *
aPgno
 = 0;

937 
u32
 
iZîo
 = 0;

938 
iLimô
 = 0;

939 
nByã
;

940 
i
;

942 
	`as£π
–
pWÆ
->
wrôeLock
 );

943 
	`ã°ˇ£
–
pWÆ
->
hdr
.
mxFøme
==
HASHTABLE_NPAGE_ONE
-1 );

944 
	`ã°ˇ£
–
pWÆ
->
hdr
.
mxFøme
==
HASHTABLE_NPAGE_ONE
 );

945 
	`ã°ˇ£
–
pWÆ
->
hdr
.
mxFøme
==
HASHTABLE_NPAGE_ONE
+1 );

947 if–
pWÆ
->
hdr
.
mxFøme
==0 ) ;

953 
	`as£π
–
pWÆ
->
nWiD©a
>
	`wÆFømePage
’WÆ->
hdr
.
mxFøme
) );

954 
	`as£π
–
pWÆ
->
≠WiD©a
[
	`wÆFømePage
’WÆ->
hdr
.
mxFøme
)] );

955 
	`wÆHashGë
(
pWÆ
, 
	`wÆFømePage
’WÆ->
hdr
.
mxFøme
), &
aHash
, &
aPgno
, &
iZîo
);

960 
iLimô
 = 
pWÆ
->
hdr
.
mxFøme
 - 
iZîo
;

961 
	`as£π
–
iLimô
>0 );

962 
i
=0; i<
HASHTABLE_NSLOT
; i++){

963 if–
aHash
[
i
]>
iLimô
 ){

964 
aHash
[
i
] = 0;

971 
nByã
 = ()((*)
aHash
 - (*)&
aPgno
[
iLimô
+1]);

972 
	`mem£t
((*)&
aPgno
[
iLimô
+1], 0, 
nByã
);

974 #ifde‡
SQLITE_ENABLE_EXPENSIVE_ASSERT


978 if–
iLimô
 ){

979 
j
;

980 
iKey
;

981 
j
=1; j<=
iLimô
; j++){

982 
iKey
=
	`wÆHash
(
aPgno
[
j
]); 
aHash
[iKey]; iKey=
	`wÆNextHash
(iKey)){

983 if–
aHash
[
iKey
]==
j
 ) ;

985 
	`as£π
–
aHash
[
iKey
]==
j
 );

989 
	}
}

996 
	$wÆIndexAµíd
(
WÆ
 *
pWÆ
, 
u32
 
iFøme
, u32 
iPage
){

997 
rc
;

998 
u32
 
iZîo
 = 0;

999 vﬁ©ûê
u32
 *
aPgno
 = 0;

1000 vﬁ©ûê
ht_¶Ÿ
 *
aHash
 = 0;

1002 
rc
 = 
	`wÆHashGë
(
pWÆ
, 
	`wÆFømePage
(
iFøme
), &
aHash
, &
aPgno
, &
iZîo
);

1007 if–
rc
==
SQLITE_OK
 ){

1008 
iKey
;

1009 
idx
;

1010 
nCﬁlide
;

1012 
idx
 = 
iFøme
 - 
iZîo
;

1013 
	`as£π
–
idx
 <
HASHTABLE_NSLOT
/2 + 1 );

1018 if–
idx
==1 ){

1019 
nByã
 = ()((
u8
 *)&
aHash
[
HASHTABLE_NSLOT
] - (u8 *)&
aPgno
[1]);

1020 
	`mem£t
((*)&
aPgno
[1], 0, 
nByã
);

1029 if–
aPgno
[
idx
] ){

1030 
	`wÆCÀ™upHash
(
pWÆ
);

1031 
	`as£π
–!
aPgno
[
idx
] );

1035 
nCﬁlide
 = 
idx
;

1036 
iKey
=
	`wÆHash
(
iPage
); 
aHash
[iKey]; iKey=
	`wÆNextHash
(iKey)){

1037 if–(
nCﬁlide
--)==0 )  
SQLITE_CORRUPT_BKPT
;

1039 
aPgno
[
idx
] = 
iPage
;

1040 
aHash
[
iKey
] = (
ht_¶Ÿ
)
idx
;

1042 #ifde‡
SQLITE_ENABLE_EXPENSIVE_ASSERT


1047 
i
;

1048 
nE¡ry
 = 0;

1049 
i
=0; i<
HASHTABLE_NSLOT
; i++){ if–
aHash
[i] ) 
nE¡ry
++; }

1050 
	`as£π
–
nE¡ry
==
idx
 );

1058 if–(
idx
&0x3ff)==0 ){

1059 
i
;

1060 
i
=1; i<=
idx
; i++){

1061 
iKey
=
	`wÆHash
(
aPgno
[
i
]); 
aHash
[iKey]; iKey=
	`wÆNextHash
(iKey)){

1062 if–
aHash
[
iKey
]==
i
 ) ;

1064 
	`as£π
–
aHash
[
iKey
]==
i
 );

1071  
rc
;

1072 
	}
}

1085 
	$wÆIndexRecovî
(
WÆ
 *
pWÆ
){

1086 
rc
;

1087 
i64
 
nSize
;

1088 
u32
 
aFømeCksum
[2] = {0, 0};

1089 
iLock
;

1090 
nLock
;

1098 
	`as£π
–
pWÆ
->
ck±Lock
==1 ||ÖWal->ckptLock==0 );

1099 
	`as£π
–
WAL_ALL_BUT_WRITE
==
WAL_WRITE_LOCK
+1 );

1100 
	`as£π
–
WAL_CKPT_LOCK
==
WAL_ALL_BUT_WRITE
 );

1101 
	`as£π
–
pWÆ
->
wrôeLock
 );

1102 
iLock
 = 
WAL_ALL_BUT_WRITE
 + 
pWÆ
->
ck±Lock
;

1103 
nLock
 = 
SQLITE_SHM_NLOCK
 - 
iLock
;

1104 
rc
 = 
	`wÆLockEx˛usive
(
pWÆ
, 
iLock
, 
nLock
);

1105 if–
rc
 ){

1106  
rc
;

1108 
	`WALTRACE
(("WAL%p:Ñecovîy begö...\n", 
pWÆ
));

1110 
	`mem£t
(&
pWÆ
->
hdr
, 0, (
WÆIndexHdr
));

1112 
rc
 = 
	`sqlôe3OsFûeSize
(
pWÆ
->
pWÆFd
, &
nSize
);

1113 if–
rc
!=
SQLITE_OK
 ){

1114 
ªcovîy_îr‹
;

1117 if–
nSize
>
WAL_HDRSIZE
 ){

1118 
u8
 
aBuf
[
WAL_HDRSIZE
];

1119 
u8
 *
aFøme
 = 0;

1120 
szFøme
;

1121 
u8
 *
aD©a
;

1122 
iFøme
;

1123 
i64
 
iOff£t
;

1124 
szPage
;

1125 
u32
 
magic
;

1126 
u32
 
vîsi⁄
;

1127 
isVÆid
;

1130 
rc
 = 
	`sqlôe3OsRód
(
pWÆ
->
pWÆFd
, 
aBuf
, 
WAL_HDRSIZE
, 0);

1131 if–
rc
!=
SQLITE_OK
 ){

1132 
ªcovîy_îr‹
;

1140 
magic
 = 
	`sqlôe3Gë4byã
(&
aBuf
[0]);

1141 
szPage
 = 
	`sqlôe3Gë4byã
(&
aBuf
[8]);

1142 if–(
magic
&0xFFFFFFFE)!=
WAL_MAGIC


1143 || 
szPage
&(szPage-1)

1144 || 
szPage
>
SQLITE_MAX_PAGE_SIZE


1145 || 
szPage
<512

1147 
föished
;

1149 
pWÆ
->
hdr
.
bigEndCksum
 = (
u8
)(
magic
&0x00000001);

1150 
pWÆ
->
szPage
 = szPage;

1151 
pWÆ
->
nCk±
 = 
	`sqlôe3Gë4byã
(&
aBuf
[12]);

1152 
	`mem˝y
(&
pWÆ
->
hdr
.
aSÆt
, &
aBuf
[16], 8);

1155 
	`wÆChecksumByãs
(
pWÆ
->
hdr
.
bigEndCksum
==
SQLITE_BIGENDIAN
,

1156 
aBuf
, 
WAL_HDRSIZE
-2*4, 0, 
pWÆ
->
hdr
.
aFømeCksum


1158 if–
pWÆ
->
hdr
.
aFømeCksum
[0]!=
	`sqlôe3Gë4byã
(&
aBuf
[24])

1159 || 
pWÆ
->
hdr
.
aFømeCksum
[1]!=
	`sqlôe3Gë4byã
(&
aBuf
[28])

1161 
föished
;

1166 
vîsi⁄
 = 
	`sqlôe3Gë4byã
(&
aBuf
[4]);

1167 if–
vîsi⁄
!=
WAL_MAX_VERSION
 ){

1168 
rc
 = 
SQLITE_CANTOPEN_BKPT
;

1169 
föished
;

1173 
szFøme
 = 
szPage
 + 
WAL_FRAME_HDRSIZE
;

1174 
aFøme
 = (
u8
 *)
	`sqlôe3_mÆloc64
(
szFøme
);

1175 if–!
aFøme
 ){

1176 
rc
 = 
SQLITE_NOMEM_BKPT
;

1177 
ªcovîy_îr‹
;

1179 
aD©a
 = &
aFøme
[
WAL_FRAME_HDRSIZE
];

1182 
iFøme
 = 0;

1183 
iOff£t
=
WAL_HDRSIZE
; (iOff£t+
szFøme
)<=
nSize
; iOffset+=szFrame){

1184 
u32
 
pgno
;

1185 
u32
 
nTrunˇã
;

1188 
iFøme
++;

1189 
rc
 = 
	`sqlôe3OsRód
(
pWÆ
->
pWÆFd
, 
aFøme
, 
szFøme
, 
iOff£t
);

1190 if–
rc
!=
SQLITE_OK
 ) ;

1191 
isVÆid
 = 
	`wÆDecodeFøme
(
pWÆ
, &
pgno
, &
nTrunˇã
, 
aD©a
, 
aFøme
);

1192 if–!
isVÆid
 ) ;

1193 
rc
 = 
	`wÆIndexAµíd
(
pWÆ
, 
iFøme
, 
pgno
);

1194 if–
rc
!=
SQLITE_OK
 ) ;

1197 if–
nTrunˇã
 ){

1198 
pWÆ
->
hdr
.
mxFøme
 = 
iFøme
;

1199 
pWÆ
->
hdr
.
nPage
 = 
nTrunˇã
;

1200 
pWÆ
->
hdr
.
szPage
 = (
u16
)((szPage&0xff00) | (szPage>>16));

1201 
	`ã°ˇ£
–
szPage
<=32768 );

1202 
	`ã°ˇ£
–
szPage
>=65536 );

1203 
aFømeCksum
[0] = 
pWÆ
->
hdr
.aFrameCksum[0];

1204 
aFømeCksum
[1] = 
pWÆ
->
hdr
.aFrameCksum[1];

1208 
	`sqlôe3_‰ì
(
aFøme
);

1211 
föished
:

1212 if–
rc
==
SQLITE_OK
 ){

1213 vﬁ©ûê
WÆCk±Info
 *
pInfo
;

1214 
i
;

1215 
pWÆ
->
hdr
.
aFømeCksum
[0] =áFrameCksum[0];

1216 
pWÆ
->
hdr
.
aFømeCksum
[1] =áFrameCksum[1];

1217 
	`wÆIndexWrôeHdr
(
pWÆ
);

1223 
pInfo
 = 
	`wÆCk±Info
(
pWÆ
);

1224 
pInfo
->
nBackfûl
 = 0;

1225 
pInfo
->
nBackfûlAâem±ed
 = 
pWÆ
->
hdr
.
mxFøme
;

1226 
pInfo
->
aRódM¨k
[0] = 0;

1227 
i
=1; i<
WAL_NREADER
; i++Ë
pInfo
->
aRódM¨k
[i] = 
READMARK_NOT_USED
;

1228 if–
pWÆ
->
hdr
.
mxFøme
 ) 
pInfo
->
aRódM¨k
[1] =ÖWal->hdr.mxFrame;

1235 if–
pWÆ
->
hdr
.
nPage
 ){

1236 
	`sqlôe3_log
(
SQLITE_NOTICE_RECOVER_WAL
,

1238 
pWÆ
->
hdr
.
mxFøme
,ÖWÆ->
zWÆName


1243 
ªcovîy_îr‹
:

1244 
	`WALTRACE
(("WAL%p:Ñecovîy %s\n", 
pWÆ
, 
rc
 ? "failed" : "ok"));

1245 
	`wÆU∆ockEx˛usive
(
pWÆ
, 
iLock
, 
nLock
);

1246  
rc
;

1247 
	}
}

1252 
	$wÆIndexClo£
(
WÆ
 *
pWÆ
, 
isDñëe
){

1253 if–
pWÆ
->
ex˛usiveMode
==
WAL_HEAPMEMORY_MODE
 ){

1254 
i
;

1255 
i
=0; i<
pWÆ
->
nWiD©a
; i++){

1256 
	`sqlôe3_‰ì
((*)
pWÆ
->
≠WiD©a
[
i
]);

1257 
pWÆ
->
≠WiD©a
[
i
] = 0;

1260 
	`sqlôe3OsShmUnm≠
(
pWÆ
->
pDbFd
, 
isDñëe
);

1262 
	}
}

1279 
	$sqlôe3WÆO≥n
(

1280 
sqlôe3_vfs
 *
pVfs
,

1281 
sqlôe3_fûe
 *
pDbFd
,

1282 c⁄° *
zWÆName
,

1283 
bNoShm
,

1284 
i64
 
mxWÆSize
,

1285 
WÆ
 **
µWÆ


1287 
rc
;

1288 
WÆ
 *
pRë
;

1289 
Êags
;

1291 
	`as£π
–
zWÆName
 && zWalName[0] );

1292 
	`as£π
–
pDbFd
 );

1300 
	`as£π
–120==
WALINDEX_LOCK_OFFSET
 );

1301 
	`as£π
–136==
WALINDEX_HDR_SIZE
 );

1302 #ifde‡
WIN_SHM_BASE


1303 
	`as£π
–
WIN_SHM_BASE
==
WALINDEX_LOCK_OFFSET
 );

1305 #ifde‡
UNIX_SHM_BASE


1306 
	`as£π
–
UNIX_SHM_BASE
==
WALINDEX_LOCK_OFFSET
 );

1311 *
µWÆ
 = 0;

1312 
pRë
 = (
WÆ
*)
	`sqlôe3MÆlocZîo
((WÆË+ 
pVfs
->
szOsFûe
);

1313 if–!
pRë
 ){

1314  
SQLITE_NOMEM_BKPT
;

1317 
pRë
->
pVfs
 =ÖVfs;

1318 
pRë
->
pWÆFd
 = (
sqlôe3_fûe
 *)&pRet[1];

1319 
pRë
->
pDbFd
 =ÖDbFd;

1320 
pRë
->
ªadLock
 = -1;

1321 
pRë
->
mxWÆSize
 = mxWalSize;

1322 
pRë
->
zWÆName
 = zWalName;

1323 
pRë
->
syncHódî
 = 1;

1324 
pRë
->
∑dToSe˘‹Bound¨y
 = 1;

1325 
pRë
->
ex˛usiveMode
 = (
bNoShm
 ? 
WAL_HEAPMEMORY_MODE
: 
WAL_NORMAL_MODE
);

1328 
Êags
 = (
SQLITE_OPEN_READWRITE
|
SQLITE_OPEN_CREATE
|
SQLITE_OPEN_WAL
);

1329 
rc
 = 
	`sqlôe3OsO≥n
(
pVfs
, 
zWÆName
, 
pRë
->
pWÆFd
, 
Êags
, &flags);

1330 if–
rc
==
SQLITE_OK
 && 
Êags
&
SQLITE_OPEN_READONLY
 ){

1331 
pRë
->
ªadO∆y
 = 
WAL_RDONLY
;

1334 if–
rc
!=
SQLITE_OK
 ){

1335 
	`wÆIndexClo£
(
pRë
, 0);

1336 
	`sqlôe3OsClo£
(
pRë
->
pWÆFd
);

1337 
	`sqlôe3_‰ì
(
pRë
);

1339 
iDC
 = 
	`sqlôe3OsDevi˚Ch¨a˘îi°ics
(
pDbFd
);

1340 if–
iDC
 & 
SQLITE_IOCAP_SEQUENTIAL
 ){ 
pRë
->
syncHódî
 = 0; }

1341 if–
iDC
 & 
SQLITE_IOCAP_POWERSAFE_OVERWRITE
 ){

1342 
pRë
->
∑dToSe˘‹Bound¨y
 = 0;

1344 *
µWÆ
 = 
pRë
;

1345 
	`WALTRACE
(("WAL%d: o≥√d\n", 
pRë
));

1347  
rc
;

1348 
	}
}

1353 
	$sqlôe3WÆLimô
(
WÆ
 *
pWÆ
, 
i64
 
iLimô
){

1354 if–
pWÆ
 )ÖWÆ->
mxWÆSize
 = 
iLimô
;

1355 
	}
}

1367 
	$wÆIãøt‹Next
(

1368 
WÆIãøt‹
 *
p
,

1369 
u32
 *
piPage
,

1370 
u32
 *
piFøme


1372 
u32
 
iMö
;

1373 
u32
 
iRë
 = 0xFFFFFFFF;

1374 
i
;

1376 
iMö
 = 
p
->
iPri‹
;

1377 
	`as£π
–
iMö
<0xffffffff );

1378 
i
=
p
->
nSegmít
-1; i>=0; i--){

1379 
WÆSegmít
 *
pSegmít
 = &
p
->
aSegmít
[
i
];

1380  
pSegmít
->
iNext
<pSegmít->
nE¡ry
 ){

1381 
u32
 
iPg
 = 
pSegmít
->
aPgno
[pSegmít->
aIndex
[pSegmít->
iNext
]];

1382 if–
iPg
>
iMö
 ){

1383 if–
iPg
<
iRë
 ){

1384 
iRë
 = 
iPg
;

1385 *
piFøme
 = 
pSegmít
->
iZîo
 +ÖSegmít->
aIndex
[pSegmít->
iNext
];

1389 
pSegmít
->
iNext
++;

1393 *
piPage
 = 
p
->
iPri‹
 = 
iRë
;

1394  (
iRë
==0xFFFFFFFF);

1395 
	}
}

1420 
	$wÆMîge
(

1421 c⁄° 
u32
 *
aC⁄ã¡
,

1422 
ht_¶Ÿ
 *
aLe·
,

1423 
nLe·
,

1424 
ht_¶Ÿ
 **
∑Right
,

1425 *
≤Right
,

1426 
ht_¶Ÿ
 *
aTmp


1428 
iLe·
 = 0;

1429 
iRight
 = 0;

1430 
iOut
 = 0;

1431 
nRight
 = *
≤Right
;

1432 
ht_¶Ÿ
 *
aRight
 = *
∑Right
;

1434 
	`as£π
–
nLe·
>0 && 
nRight
>0 );

1435  
iRight
<
nRight
 || 
iLe·
<
nLe·
 ){

1436 
ht_¶Ÿ
 
log∑ge
;

1437 
Pgno
 
db∑ge
;

1439 if–(
iLe·
<
nLe·
)

1440 && (
iRight
>=
nRight
 || 
aC⁄ã¡
[
aLe·
[
iLe·
]]<aC⁄ã¡[
aRight
[iRight]])

1442 
log∑ge
 = 
aLe·
[
iLe·
++];

1444 
log∑ge
 = 
aRight
[
iRight
++];

1446 
db∑ge
 = 
aC⁄ã¡
[
log∑ge
];

1448 
aTmp
[
iOut
++] = 
log∑ge
;

1449 if–
iLe·
<
nLe·
 && 
aC⁄ã¡
[
aLe·
[iLe·]]==
db∑ge
 ) iLeft++;

1451 
	`as£π
–
iLe·
>=
nLe·
 || 
aC⁄ã¡
[
aLe·
[iLe·]]>
db∑ge
 );

1452 
	`as£π
–
iRight
>=
nRight
 || 
aC⁄ã¡
[
aRight
[iRight]]>
db∑ge
 );

1455 *
∑Right
 = 
aLe·
;

1456 *
≤Right
 = 
iOut
;

1457 
	`mem˝y
(
aLe·
, 
aTmp
, ◊Tmp[0])*
iOut
);

1458 
	}
}

1477 
	$wÆMîges‹t
(

1478 c⁄° 
u32
 *
aC⁄ã¡
,

1479 
ht_¶Ÿ
 *
aBuf„r
,

1480 
ht_¶Ÿ
 *
aLi°
,

1481 *
≤Li°


1483 
	sSubli°
 {

1484 
nLi°
;

1485 
ht_¶Ÿ
 *
aLi°
;

1488 c⁄° 
nLi°
 = *
≤Li°
;

1489 
nMîge
 = 0;

1490 
ht_¶Ÿ
 *
aMîge
 = 0;

1491 
iLi°
;

1492 
u32
 
iSub
 = 0;

1493 
Subli°
 
aSub
[13];

1495 
	`mem£t
(
aSub
, 0, (aSub));

1496 
	`as£π
–
nLi°
<=
HASHTABLE_NPAGE
 &&ÇList>0 );

1497 
	`as£π
–
HASHTABLE_NPAGE
==(1<<(
	`AºaySize
(
aSub
)-1)) );

1499 
iLi°
=0; iLi°<
nLi°
; iList++){

1500 
nMîge
 = 1;

1501 
aMîge
 = &
aLi°
[
iLi°
];

1502 
iSub
=0; 
iLi°
 & (1<<iSub); iSub++){

1503 
Subli°
 *
p
;

1504 
	`as£π
–
iSub
<
	`AºaySize
(
aSub
) );

1505 
p
 = &
aSub
[
iSub
];

1506 
	`as£π
–
p
->
aLi°
 &&Ö->
nLi°
<=(1<<
iSub
) );

1507 
	`as£π
–
p
->
aLi°
==&aLi°[
iLi°
&~((2<<
iSub
)-1)] );

1508 
	`wÆMîge
(
aC⁄ã¡
, 
p
->
aLi°
,Ö->
nLi°
, &
aMîge
, &
nMîge
, 
aBuf„r
);

1510 
aSub
[
iSub
].
aLi°
 = 
aMîge
;

1511 
aSub
[
iSub
].
nLi°
 = 
nMîge
;

1514 
iSub
++; iSub<
	`AºaySize
(
aSub
); iSub++){

1515 if–
nLi°
 & (1<<
iSub
) ){

1516 
Subli°
 *
p
;

1517 
	`as£π
–
iSub
<
	`AºaySize
(
aSub
) );

1518 
p
 = &
aSub
[
iSub
];

1519 
	`as£π
–
p
->
nLi°
<=(1<<
iSub
) );

1520 
	`as£π
–
p
->
aLi°
==&aLi°[
nLi°
&~((2<<
iSub
)-1)] );

1521 
	`wÆMîge
(
aC⁄ã¡
, 
p
->
aLi°
,Ö->
nLi°
, &
aMîge
, &
nMîge
, 
aBuf„r
);

1524 
	`as£π
–
aMîge
==
aLi°
 );

1525 *
≤Li°
 = 
nMîge
;

1527 #ifde‡
SQLITE_DEBUG


1529 
i
;

1530 
i
=1; i<*
≤Li°
; i++){

1531 
	`as£π
–
aC⁄ã¡
[
aLi°
[
i
]] >áContent[aList[i-1]] );

1535 
	}
}

1540 
	$wÆIãøt‹Fªe
(
WÆIãøt‹
 *
p
){

1541 
	`sqlôe3_‰ì
(
p
);

1542 
	}
}

1556 
	$wÆIãøt‹Inô
(
WÆ
 *
pWÆ
, 
WÆIãøt‹
 **
µ
){

1557 
WÆIãøt‹
 *
p
;

1558 
nSegmít
;

1559 
u32
 
iLa°
;

1560 
nByã
;

1561 
i
;

1562 
ht_¶Ÿ
 *
aTmp
;

1563 
rc
 = 
SQLITE_OK
;

1568 
	`as£π
–
pWÆ
->
ck±Lock
 &&ÖWÆ->
hdr
.
mxFøme
>0 );

1569 
iLa°
 = 
pWÆ
->
hdr
.
mxFøme
;

1572 
nSegmít
 = 
	`wÆFømePage
(
iLa°
) + 1;

1573 
nByã
 = (
WÆIãøt‹
)

1574 + (
nSegmít
-1)*(
WÆSegmít
)

1575 + 
iLa°
*(
ht_¶Ÿ
);

1576 
p
 = (
WÆIãøt‹
 *)
	`sqlôe3_mÆloc64
(
nByã
);

1577 if–!
p
 ){

1578  
SQLITE_NOMEM_BKPT
;

1580 
	`mem£t
(
p
, 0, 
nByã
);

1581 
p
->
nSegmít
 =ÇSegment;

1586 
aTmp
 = (
ht_¶Ÿ
 *)
	`sqlôe3_mÆloc64
(

1587 (
ht_¶Ÿ
Ë* (
iLa°
>
HASHTABLE_NPAGE
?HASHTABLE_NPAGE:iLast)

1589 if–!
aTmp
 ){

1590 
rc
 = 
SQLITE_NOMEM_BKPT
;

1593 
i
=0; 
rc
==
SQLITE_OK
 && i<
nSegmít
; i++){

1594 vﬁ©ûê
ht_¶Ÿ
 *
aHash
;

1595 
u32
 
iZîo
;

1596 vﬁ©ûê
u32
 *
aPgno
;

1598 
rc
 = 
	`wÆHashGë
(
pWÆ
, 
i
, &
aHash
, &
aPgno
, &
iZîo
);

1599 if–
rc
==
SQLITE_OK
 ){

1600 
j
;

1601 
nE¡ry
;

1602 
ht_¶Ÿ
 *
aIndex
;

1604 
aPgno
++;

1605 if–(
i
+1)==
nSegmít
 ){

1606 
nE¡ry
 = ()(
iLa°
 - 
iZîo
);

1608 
nE¡ry
 = ()((
u32
*)
aHash
 - (u32*)
aPgno
);

1610 
aIndex
 = &((
ht_¶Ÿ
 *)&
p
->
aSegmít
[p->
nSegmít
])[
iZîo
];

1611 
iZîo
++;

1613 
j
=0; j<
nE¡ry
; j++){

1614 
aIndex
[
j
] = (
ht_¶Ÿ
)j;

1616 
	`wÆMîges‹t
((
u32
 *)
aPgno
, 
aTmp
, 
aIndex
, &
nE¡ry
);

1617 
p
->
aSegmít
[
i
].
iZîo
 = iZero;

1618 
p
->
aSegmít
[
i
].
nE¡ry
 =ÇEntry;

1619 
p
->
aSegmít
[
i
].
aIndex
 =áIndex;

1620 
p
->
aSegmít
[
i
].
aPgno
 = (
u32
 *)aPgno;

1623 
	`sqlôe3_‰ì
(
aTmp
);

1625 if–
rc
!=
SQLITE_OK
 ){

1626 
	`wÆIãøt‹Fªe
(
p
);

1628 *
µ
 = 
p
;

1629  
rc
;

1630 
	}
}

1638 
wÆBusyLock
(

1639 
WÆ
 *
pWÆ
,

1640 (*
xBusy
)(*),

1641 *
pBusyArg
,

1642 
lockIdx
,

1643 
n


1645 
rc
;

1647 
rc
 = 
	`wÆLockEx˛usive
(
pWÆ
, 
lockIdx
, 
n
);

1648 } 
xBusy
 && 
rc
==
SQLITE_BUSY
 && 
	`xBusy
(
pBusyArg
) );

1649  
rc
;

1650 
	}
}

1656 
	$wÆPagesize
(
WÆ
 *
pWÆ
){

1657  (
pWÆ
->
hdr
.
szPage
&0xfe00) + ((pWal->hdr.szPage&0x0001)<<16);

1658 
	}
}

1677 
	$wÆRe°¨tHdr
(
WÆ
 *
pWÆ
, 
u32
 
ß…1
){

1678 vﬁ©ûê
WÆCk±Info
 *
pInfo
 = 
	`wÆCk±Info
(
pWÆ
);

1679 
i
;

1680 
u32
 *
aSÆt
 = 
pWÆ
->
hdr
.aSalt;

1681 
pWÆ
->
nCk±
++;

1682 
pWÆ
->
hdr
.
mxFøme
 = 0;

1683 
	`sqlôe3Put4byã
((
u8
*)&
aSÆt
[0], 1 + 
	`sqlôe3Gë4byã
((u8*)&aSalt[0]));

1684 
	`mem˝y
(&
pWÆ
->
hdr
.
aSÆt
[1], &
ß…1
, 4);

1685 
	`wÆIndexWrôeHdr
(
pWÆ
);

1686 
pInfo
->
nBackfûl
 = 0;

1687 
pInfo
->
nBackfûlAâem±ed
 = 0;

1688 
pInfo
->
aRódM¨k
[1] = 0;

1689 
i
=2; i<
WAL_NREADER
; i++Ë
pInfo
->
aRódM¨k
[i] = 
READMARK_NOT_USED
;

1690 
	`as£π
–
pInfo
->
aRódM¨k
[0]==0 );

1691 
	}
}

1724 
wÆCheckpoöt
(

1725 
WÆ
 *
pWÆ
,

1726 
eMode
,

1727 (*
xBusy
)(*),

1728 *
pBusyArg
,

1729 
sync_Êags
,

1730 
u8
 *
zBuf


1732 
rc
 = 
SQLITE_OK
;

1733 
szPage
;

1734 
WÆIãøt‹
 *
pIãr
 = 0;

1735 
u32
 
iDb∑ge
 = 0;

1736 
u32
 
iFøme
 = 0;

1737 
u32
 
mxSa„Føme
;

1738 
u32
 
mxPage
;

1739 
i
;

1740 vﬁ©ûê
WÆCk±Info
 *
pInfo
;

1742 
szPage
 = 
	`wÆPagesize
(
pWÆ
);

1743 
	`ã°ˇ£
–
szPage
<=32768 );

1744 
	`ã°ˇ£
–
szPage
>=65536 );

1745 
pInfo
 = 
	`wÆCk±Info
(
pWÆ
);

1746 if–
pInfo
->
nBackfûl
<
pWÆ
->
hdr
.
mxFøme
 ){

1749 
rc
 = 
	`wÆIãøt‹Inô
(
pWÆ
, &
pIãr
);

1750 if–
rc
!=
SQLITE_OK
 ){

1751  
rc
;

1753 
	`as£π
–
pIãr
 );

1757 
	`as£π
–
eMode
!=
SQLITE_CHECKPOINT_PASSIVE
 || 
xBusy
==0 );

1764 
mxSa„Føme
 = 
pWÆ
->
hdr
.
mxFøme
;

1765 
mxPage
 = 
pWÆ
->
hdr
.
nPage
;

1766 
i
=1; i<
WAL_NREADER
; i++){

1775 
u32
 
y
 = 
pInfo
->
aRódM¨k
[
i
];

1776 if–
mxSa„Føme
>
y
 ){

1777 
	`as£π
–
y
<=
pWÆ
->
hdr
.
mxFøme
 );

1778 
rc
 = 
	`wÆBusyLock
(
pWÆ
, 
xBusy
, 
pBusyArg
, 
	`WAL_READ_LOCK
(
i
), 1);

1779 if–
rc
==
SQLITE_OK
 ){

1780 
pInfo
->
aRódM¨k
[
i
] = (i==1 ? 
mxSa„Føme
 : 
READMARK_NOT_USED
);

1781 
	`wÆU∆ockEx˛usive
(
pWÆ
, 
	`WAL_READ_LOCK
(
i
), 1);

1782 }if–
rc
==
SQLITE_BUSY
 ){

1783 
mxSa„Føme
 = 
y
;

1784 
xBusy
 = 0;

1786 
wÆcheckpoöt_out
;

1791 if–
pInfo
->
nBackfûl
<
mxSa„Føme


1792 && (
rc
 = 
	`wÆBusyLock
(
pWÆ
, 
xBusy
, 
pBusyArg
, 
	`WAL_READ_LOCK
(0),1))==
SQLITE_OK


1794 
i64
 
nSize
;

1795 
u32
 
nBackfûl
 = 
pInfo
->nBackfill;

1797 
pInfo
->
nBackfûlAâem±ed
 = 
mxSa„Føme
;

1800 if–
sync_Êags
 ){

1801 
rc
 = 
	`sqlôe3OsSync
(
pWÆ
->
pWÆFd
, 
sync_Êags
);

1807 if–
rc
==
SQLITE_OK
 ){

1808 
i64
 
nReq
 = ((i64)
mxPage
 * 
szPage
);

1809 
rc
 = 
	`sqlôe3OsFûeSize
(
pWÆ
->
pDbFd
, &
nSize
);

1810 if–
rc
==
SQLITE_OK
 && 
nSize
<
nReq
 ){

1811 
	`sqlôe3OsFûeC⁄åﬁHöt
(
pWÆ
->
pDbFd
, 
SQLITE_FCNTL_SIZE_HINT
, &
nReq
);

1817  
rc
==
SQLITE_OK
 && 0==
	`wÆIãøt‹Next
(
pIãr
, &
iDb∑ge
, &
iFøme
) ){

1818 
i64
 
iOff£t
;

1819 
	`as£π
–
	`wÆFømePgno
(
pWÆ
, 
iFøme
)==
iDb∑ge
 );

1820 if–
iFøme
<=
nBackfûl
 || iFøme>
mxSa„Føme
 || 
iDb∑ge
>
mxPage
 ){

1823 
iOff£t
 = 
	`wÆFømeOff£t
(
iFøme
, 
szPage
Ë+ 
WAL_FRAME_HDRSIZE
;

1825 
rc
 = 
	`sqlôe3OsRód
(
pWÆ
->
pWÆFd
, 
zBuf
, 
szPage
, 
iOff£t
);

1826 if–
rc
!=
SQLITE_OK
 ) ;

1827 
iOff£t
 = (
iDb∑ge
-1)*(
i64
)
szPage
;

1828 
	`ã°ˇ£
–
	`IS_BIG_INT
(
iOff£t
) );

1829 
rc
 = 
	`sqlôe3OsWrôe
(
pWÆ
->
pDbFd
, 
zBuf
, 
szPage
, 
iOff£t
);

1830 if–
rc
!=
SQLITE_OK
 ) ;

1834 if–
rc
==
SQLITE_OK
 ){

1835 if–
mxSa„Føme
==
	`wÆIndexHdr
(
pWÆ
)->
mxFøme
 ){

1836 
i64
 
szDb
 = 
pWÆ
->
hdr
.
nPage
*(i64)
szPage
;

1837 
	`ã°ˇ£
–
	`IS_BIG_INT
(
szDb
) );

1838 
rc
 = 
	`sqlôe3OsTrunˇã
(
pWÆ
->
pDbFd
, 
szDb
);

1839 if–
rc
==
SQLITE_OK
 && 
sync_Êags
 ){

1840 
rc
 = 
	`sqlôe3OsSync
(
pWÆ
->
pDbFd
, 
sync_Êags
);

1843 if–
rc
==
SQLITE_OK
 ){

1844 
pInfo
->
nBackfûl
 = 
mxSa„Føme
;

1849 
	`wÆU∆ockEx˛usive
(
pWÆ
, 
	`WAL_READ_LOCK
(0), 1);

1852 if–
rc
==
SQLITE_BUSY
 ){

1855 
rc
 = 
SQLITE_OK
;

1864 if–
rc
==
SQLITE_OK
 && 
eMode
!=
SQLITE_CHECKPOINT_PASSIVE
 ){

1865 
	`as£π
–
pWÆ
->
wrôeLock
 );

1866 if–
pInfo
->
nBackfûl
<
pWÆ
->
hdr
.
mxFøme
 ){

1867 
rc
 = 
SQLITE_BUSY
;

1868 }if–
eMode
>=
SQLITE_CHECKPOINT_RESTART
 ){

1869 
u32
 
ß…1
;

1870 
	`sqlôe3_øndom√ss
(4, &
ß…1
);

1871 
	`as£π
–
pInfo
->
nBackfûl
==
pWÆ
->
hdr
.
mxFøme
 );

1872 
rc
 = 
	`wÆBusyLock
(
pWÆ
, 
xBusy
, 
pBusyArg
, 
	`WAL_READ_LOCK
(1), 
WAL_NREADER
-1);

1873 if–
rc
==
SQLITE_OK
 ){

1874 if–
eMode
==
SQLITE_CHECKPOINT_TRUNCATE
 ){

1888 
	`wÆRe°¨tHdr
(
pWÆ
, 
ß…1
);

1889 
rc
 = 
	`sqlôe3OsTrunˇã
(
pWÆ
->
pWÆFd
, 0);

1891 
	`wÆU∆ockEx˛usive
(
pWÆ
, 
	`WAL_READ_LOCK
(1), 
WAL_NREADER
-1);

1896 
wÆcheckpoöt_out
:

1897 
	`wÆIãøt‹Fªe
(
pIãr
);

1898  
rc
;

1899 
	}
}

1905 
	$wÆLimôSize
(
WÆ
 *
pWÆ
, 
i64
 
nMax
){

1906 
i64
 
sz
;

1907 
rx
;

1908 
	`sqlôe3BegöBíignMÆloc
();

1909 
rx
 = 
	`sqlôe3OsFûeSize
(
pWÆ
->
pWÆFd
, &
sz
);

1910 if–
rx
==
SQLITE_OK
 && (
sz
 > 
nMax
 ) ){

1911 
rx
 = 
	`sqlôe3OsTrunˇã
(
pWÆ
->
pWÆFd
, 
nMax
);

1913 
	`sqlôe3EndBíignMÆloc
();

1914 if–
rx
 ){

1915 
	`sqlôe3_log
(
rx
, "ˇ¬ŸÜimô WAL size: %s", 
pWÆ
->
zWÆName
);

1917 
	}
}

1922 
	$sqlôe3WÆClo£
(

1923 
WÆ
 *
pWÆ
,

1924 
sync_Êags
,

1925 
nBuf
,

1926 
u8
 *
zBuf


1928 
rc
 = 
SQLITE_OK
;

1929 if–
pWÆ
 ){

1930 
isDñëe
 = 0;

1940 
rc
 = 
	`sqlôe3OsLock
(
pWÆ
->
pDbFd
, 
SQLITE_LOCK_EXCLUSIVE
);

1941 if–
rc
==
SQLITE_OK
 ){

1942 if–
pWÆ
->
ex˛usiveMode
==
WAL_NORMAL_MODE
 ){

1943 
pWÆ
->
ex˛usiveMode
 = 
WAL_EXCLUSIVE_MODE
;

1945 
rc
 = 
	`sqlôe3WÆCheckpoöt
(

1946 
pWÆ
, 
SQLITE_CHECKPOINT_PASSIVE
, 0, 0, 
sync_Êags
, 
nBuf
, 
zBuf
, 0, 0

1948 if–
rc
==
SQLITE_OK
 ){

1949 
bPîsi°
 = -1;

1950 
	`sqlôe3OsFûeC⁄åﬁHöt
(

1951 
pWÆ
->
pDbFd
, 
SQLITE_FCNTL_PERSIST_WAL
, &
bPîsi°


1953 if–
bPîsi°
!=1 ){

1957 
isDñëe
 = 1;

1958 }if–
pWÆ
->
mxWÆSize
>=0 ){

1965 
	`wÆLimôSize
(
pWÆ
, 0);

1970 
	`wÆIndexClo£
(
pWÆ
, 
isDñëe
);

1971 
	`sqlôe3OsClo£
(
pWÆ
->
pWÆFd
);

1972 if–
isDñëe
 ){

1973 
	`sqlôe3BegöBíignMÆloc
();

1974 
	`sqlôe3OsDñëe
(
pWÆ
->
pVfs
,ÖWÆ->
zWÆName
, 0);

1975 
	`sqlôe3EndBíignMÆloc
();

1977 
	`WALTRACE
(("WAL%p: clo£d\n", 
pWÆ
));

1978 
	`sqlôe3_‰ì
((*)
pWÆ
->
≠WiD©a
);

1979 
	`sqlôe3_‰ì
(
pWÆ
);

1981  
rc
;

1982 
	}
}

2001 
	$wÆIndexTryHdr
(
WÆ
 *
pWÆ
, *
pCh™ged
){

2002 
u32
 
aCksum
[2];

2003 
WÆIndexHdr
 
h1
, 
h2
;

2004 
WÆIndexHdr
 vﬁ©ûê*
aHdr
;

2007 
	`as£π
–
pWÆ
->
nWiD©a
>0 &&ÖWÆ->
≠WiD©a
[0] );

2019 
aHdr
 = 
	`wÆIndexHdr
(
pWÆ
);

2020 
	`mem˝y
(&
h1
, (*)&
aHdr
[0], (h1));

2021 
	`wÆShmB¨rõr
(
pWÆ
);

2022 
	`mem˝y
(&
h2
, (*)&
aHdr
[1], (h2));

2024 if–
	`memcmp
(&
h1
, &
h2
, (h1))!=0 ){

2027 if–
h1
.
isInô
==0 ){

2030 
	`wÆChecksumByãs
(1, (
u8
*)&
h1
, (h1)-(h1.
aCksum
), 0,áCksum);

2031 if–
aCksum
[0]!=
h1
.aCksum[0] ||áCksum[1]!=h1.aCksum[1] ){

2035 if–
	`memcmp
(&
pWÆ
->
hdr
, &
h1
, (
WÆIndexHdr
)) ){

2036 *
pCh™ged
 = 1;

2037 
	`mem˝y
(&
pWÆ
->
hdr
, &
h1
, (
WÆIndexHdr
));

2038 
pWÆ
->
szPage
 = (pWÆ->
hdr
.szPage&0xfe00) + ((pWal->hdr.szPage&0x0001)<<16);

2039 
	`ã°ˇ£
–
pWÆ
->
szPage
<=32768 );

2040 
	`ã°ˇ£
–
pWÆ
->
szPage
>=65536 );

2045 
	}
}

2059 
	$wÆIndexRódHdr
(
WÆ
 *
pWÆ
, *
pCh™ged
){

2060 
rc
;

2061 
badHdr
;

2062 vﬁ©ûê
u32
 *
∑ge0
;

2067 
	`as£π
–
pCh™ged
 );

2068 
rc
 = 
	`wÆIndexPage
(
pWÆ
, 0, &
∑ge0
);

2069 if–
rc
!=
SQLITE_OK
 ){

2070  
rc
;

2072 
	`as£π
–
∑ge0
 || 
pWÆ
->
wrôeLock
==0 );

2079 
badHdr
 = (
∑ge0
 ? 
	`wÆIndexTryHdr
(
pWÆ
, 
pCh™ged
) : 1);

2084 
	`as£π
–
badHdr
==0 || 
pWÆ
->
wrôeLock
==0 );

2085 if–
badHdr
 ){

2086 if–
pWÆ
->
ªadO∆y
 & 
WAL_SHM_RDONLY
 ){

2087 if–
SQLITE_OK
==(
rc
 = 
	`wÆLockSh¨ed
(
pWÆ
, 
WAL_WRITE_LOCK
)) ){

2088 
	`wÆU∆ockSh¨ed
(
pWÆ
, 
WAL_WRITE_LOCK
);

2089 
rc
 = 
SQLITE_READONLY_RECOVERY
;

2091 }if–
SQLITE_OK
==(
rc
 = 
	`wÆLockEx˛usive
(
pWÆ
, 
WAL_WRITE_LOCK
, 1)) ){

2092 
pWÆ
->
wrôeLock
 = 1;

2093 if–
SQLITE_OK
==(
rc
 = 
	`wÆIndexPage
(
pWÆ
, 0, &
∑ge0
)) ){

2094 
badHdr
 = 
	`wÆIndexTryHdr
(
pWÆ
, 
pCh™ged
);

2095 if–
badHdr
 ){

2100 
rc
 = 
	`wÆIndexRecovî
(
pWÆ
);

2101 *
pCh™ged
 = 1;

2104 
pWÆ
->
wrôeLock
 = 0;

2105 
	`wÆU∆ockEx˛usive
(
pWÆ
, 
WAL_WRITE_LOCK
, 1);

2113 if–
badHdr
==0 && 
pWÆ
->
hdr
.
iVîsi⁄
!=
WALINDEX_MAX_VERSION
 ){

2114 
rc
 = 
SQLITE_CANTOPEN_BKPT
;

2117  
rc
;

2118 
	}
}

2124 
	#WAL_RETRY
 (-1)

	)

2176 
	$wÆTryBegöRód
(
WÆ
 *
pWÆ
, *
pCh™ged
, 
u£WÆ
, 
˙t
){

2177 vﬁ©ûê
WÆCk±Info
 *
pInfo
;

2178 
u32
 
mxRódM¨k
;

2179 
mxI
;

2180 
i
;

2181 
rc
 = 
SQLITE_OK
;

2182 
u32
 
mxFøme
;

2184 
	`as£π
–
pWÆ
->
ªadLock
<0 );

2203 if–
˙t
>5 ){

2204 
nDñay
 = 1;

2205 if–
˙t
>100 ){

2206 
	`VVA_ONLY
–
pWÆ
->
lockEº‹
 = 1; )

2207  
SQLITE_PROTOCOL
;

2209 if–
˙t
>=10 ) 
nDñay
 = (cnt-9)*(cnt-9)*39;

2210 
	`sqlôe3OsSÀï
(
pWÆ
->
pVfs
, 
nDñay
);

2213 if–!
u£WÆ
 ){

2214 
rc
 = 
	`wÆIndexRódHdr
(
pWÆ
, 
pCh™ged
);

2215 if–
rc
==
SQLITE_BUSY
 ){

2224 if–
pWÆ
->
≠WiD©a
[0]==0 ){

2232 
rc
 = 
WAL_RETRY
;

2233 }if–
SQLITE_OK
==(
rc
 = 
	`wÆLockSh¨ed
(
pWÆ
, 
WAL_RECOVER_LOCK
)) ){

2234 
	`wÆU∆ockSh¨ed
(
pWÆ
, 
WAL_RECOVER_LOCK
);

2235 
rc
 = 
WAL_RETRY
;

2236 }if–
rc
==
SQLITE_BUSY
 ){

2237 
rc
 = 
SQLITE_BUSY_RECOVERY
;

2240 if–
rc
!=
SQLITE_OK
 ){

2241  
rc
;

2245 
pInfo
 = 
	`wÆCk±Info
(
pWÆ
);

2246 if–!
u£WÆ
 && 
pInfo
->
nBackfûl
==
pWÆ
->
hdr
.
mxFøme


2247 #ifde‡
SQLITE_ENABLE_SNAPSHOT


2248 && (
pWÆ
->
pS«pshŸ
==0 ||ÖWÆ->
hdr
.
mxFøme
==0

2249 || 0==
	`memcmp
(&
pWÆ
->
hdr
,ÖWÆ->
pS«pshŸ
, (
WÆIndexHdr
)))

2255 
rc
 = 
	`wÆLockSh¨ed
(
pWÆ
, 
	`WAL_READ_LOCK
(0));

2256 
	`wÆShmB¨rõr
(
pWÆ
);

2257 if–
rc
==
SQLITE_OK
 ){

2258 if–
	`memcmp
((*)
	`wÆIndexHdr
(
pWÆ
), &pWÆ->
hdr
, (
WÆIndexHdr
)) ){

2272 
	`wÆU∆ockSh¨ed
(
pWÆ
, 
	`WAL_READ_LOCK
(0));

2273  
WAL_RETRY
;

2275 
pWÆ
->
ªadLock
 = 0;

2276  
SQLITE_OK
;

2277 }if–
rc
!=
SQLITE_BUSY
 ){

2278  
rc
;

2287 
mxRódM¨k
 = 0;

2288 
mxI
 = 0;

2289 
mxFøme
 = 
pWÆ
->
hdr
.mxFrame;

2290 #ifde‡
SQLITE_ENABLE_SNAPSHOT


2291 if–
pWÆ
->
pS«pshŸ
 &&ÖWÆ->pS«pshŸ->
mxFøme
<mxFrame ){

2292 
mxFøme
 = 
pWÆ
->
pS«pshŸ
->mxFrame;

2295 
i
=1; i<
WAL_NREADER
; i++){

2296 
u32
 
thisM¨k
 = 
pInfo
->
aRódM¨k
[
i
];

2297 if–
mxRódM¨k
<=
thisM¨k
 &&ÅhisM¨k<=
mxFøme
 ){

2298 
	`as£π
–
thisM¨k
!=
READMARK_NOT_USED
 );

2299 
mxRódM¨k
 = 
thisM¨k
;

2300 
mxI
 = 
i
;

2303 if–(
pWÆ
->
ªadO∆y
 & 
WAL_SHM_RDONLY
)==0

2304 && (
mxRódM¨k
<
mxFøme
 || 
mxI
==0)

2306 
i
=1; i<
WAL_NREADER
; i++){

2307 
rc
 = 
	`wÆLockEx˛usive
(
pWÆ
, 
	`WAL_READ_LOCK
(
i
), 1);

2308 if–
rc
==
SQLITE_OK
 ){

2309 
mxRódM¨k
 = 
pInfo
->
aRódM¨k
[
i
] = 
mxFøme
;

2310 
mxI
 = 
i
;

2311 
	`wÆU∆ockEx˛usive
(
pWÆ
, 
	`WAL_READ_LOCK
(
i
), 1);

2313 }if–
rc
!=
SQLITE_BUSY
 ){

2314  
rc
;

2318 if–
mxI
==0 ){

2319 
	`as£π
–
rc
==
SQLITE_BUSY
 || (
pWÆ
->
ªadO∆y
 & 
WAL_SHM_RDONLY
)!=0 );

2320  
rc
==
SQLITE_BUSY
 ? 
WAL_RETRY
 : 
SQLITE_READONLY_CANTLOCK
;

2323 
rc
 = 
	`wÆLockSh¨ed
(
pWÆ
, 
	`WAL_READ_LOCK
(
mxI
));

2324 if–
rc
 ){

2325  
rc
==
SQLITE_BUSY
 ? 
WAL_RETRY
 :Ñc;

2361 
pWÆ
->
möFøme
 = 
pInfo
->
nBackfûl
+1;

2362 
	`wÆShmB¨rõr
(
pWÆ
);

2363 if–
pInfo
->
aRódM¨k
[
mxI
]!=
mxRódM¨k


2364 || 
	`memcmp
((*)
	`wÆIndexHdr
(
pWÆ
), &pWÆ->
hdr
, (
WÆIndexHdr
))

2366 
	`wÆU∆ockSh¨ed
(
pWÆ
, 
	`WAL_READ_LOCK
(
mxI
));

2367  
WAL_RETRY
;

2369 
	`as£π
–
mxRódM¨k
<=
pWÆ
->
hdr
.
mxFøme
 );

2370 
pWÆ
->
ªadLock
 = (
i16
)
mxI
;

2372  
rc
;

2373 
	}
}

2389 
	$sqlôe3WÆBegöRódTønß˘i⁄
(
WÆ
 *
pWÆ
, *
pCh™ged
){

2390 
rc
;

2391 
˙t
 = 0;

2393 #ifde‡
SQLITE_ENABLE_SNAPSHOT


2394 
bCh™ged
 = 0;

2395 
WÆIndexHdr
 *
pS«pshŸ
 = 
pWÆ
->pSnapshot;

2396 if–
pS«pshŸ
 && 
	`memcmp
’S«pshŸ, &
pWÆ
->
hdr
, (
WÆIndexHdr
))!=0 ){

2397 
bCh™ged
 = 1;

2402 
rc
 = 
	`wÆTryBegöRód
(
pWÆ
, 
pCh™ged
, 0, ++
˙t
);

2403 } 
rc
==
WAL_RETRY
 );

2404 
	`ã°ˇ£
–(
rc
&0xff)==
SQLITE_BUSY
 );

2405 
	`ã°ˇ£
–(
rc
&0xff)==
SQLITE_IOERR
 );

2406 
	`ã°ˇ£
–
rc
==
SQLITE_PROTOCOL
 );

2407 
	`ã°ˇ£
–
rc
==
SQLITE_OK
 );

2409 #ifde‡
SQLITE_ENABLE_SNAPSHOT


2410 if–
rc
==
SQLITE_OK
 ){

2411 if–
pS«pshŸ
 && 
	`memcmp
’S«pshŸ, &
pWÆ
->
hdr
, (
WÆIndexHdr
))!=0 ){

2425 vﬁ©ûê
WÆCk±Info
 *
pInfo
 = 
	`wÆCk±Info
(
pWÆ
);

2427 
	`as£π
–
pWÆ
->
ªadLock
>0 ||ÖWÆ->
hdr
.
mxFøme
==0 );

2428 
	`as£π
–
pInfo
->
aRódM¨k
[
pWÆ
->
ªadLock
]<=
pS«pshŸ
->
mxFøme
 );

2438 
rc
 = 
	`wÆLockSh¨ed
(
pWÆ
, 
WAL_CKPT_LOCK
);

2440 if–
rc
==
SQLITE_OK
 ){

2447 if–!
	`memcmp
(
pS«pshŸ
->
aSÆt
, 
pWÆ
->
hdr
.aSalt, (pWal->hdr.aSalt))

2448 && 
pS«pshŸ
->
mxFøme
>=
pInfo
->
nBackfûlAâem±ed


2450 
	`as£π
–
pWÆ
->
ªadLock
>0 );

2451 
	`mem˝y
(&
pWÆ
->
hdr
, 
pS«pshŸ
, (
WÆIndexHdr
));

2452 *
pCh™ged
 = 
bCh™ged
;

2454 
rc
 = 
SQLITE_BUSY_SNAPSHOT
;

2458 
	`wÆU∆ockSh¨ed
(
pWÆ
, 
WAL_CKPT_LOCK
);

2462 if–
rc
!=
SQLITE_OK
 ){

2463 
	`sqlôe3WÆEndRódTønß˘i⁄
(
pWÆ
);

2468  
rc
;

2469 
	}
}

2475 
	$sqlôe3WÆEndRódTønß˘i⁄
(
WÆ
 *
pWÆ
){

2476 
	`sqlôe3WÆEndWrôeTønß˘i⁄
(
pWÆ
);

2477 if–
pWÆ
->
ªadLock
>=0 ){

2478 
	`wÆU∆ockSh¨ed
(
pWÆ
, 
	`WAL_READ_LOCK
’WÆ->
ªadLock
));

2479 
pWÆ
->
ªadLock
 = -1;

2481 
	}
}

2491 
	$sqlôe3WÆFödFøme
(

2492 
WÆ
 *
pWÆ
,

2493 
Pgno
 
pgno
,

2494 
u32
 *
piRód


2496 
u32
 
iRód
 = 0;

2497 
u32
 
iLa°
 = 
pWÆ
->
hdr
.
mxFøme
;

2498 
iHash
;

2499 
iMöHash
;

2502 
	`as£π
–
pWÆ
->
ªadLock
>=0 ||ÖWÆ->
lockEº‹
 );

2510 if–
iLa°
==0 || 
pWÆ
->
ªadLock
==0 ){

2511 *
piRód
 = 0;

2512  
SQLITE_OK
;

2540 
iMöHash
 = 
	`wÆFømePage
(
pWÆ
->
möFøme
);

2541 
iHash
=
	`wÆFømePage
(
iLa°
); iHash>=
iMöHash
 && 
iRód
==0; iHash--){

2542 vﬁ©ûê
ht_¶Ÿ
 *
aHash
;

2543 vﬁ©ûê
u32
 *
aPgno
;

2544 
u32
 
iZîo
;

2545 
iKey
;

2546 
nCﬁlide
;

2547 
rc
;

2549 
rc
 = 
	`wÆHashGë
(
pWÆ
, 
iHash
, &
aHash
, &
aPgno
, &
iZîo
);

2550 if–
rc
!=
SQLITE_OK
 ){

2551  
rc
;

2553 
nCﬁlide
 = 
HASHTABLE_NSLOT
;

2554 
iKey
=
	`wÆHash
(
pgno
); 
aHash
[iKey]; iKey=
	`wÆNextHash
(iKey)){

2555 
u32
 
iFøme
 = 
aHash
[
iKey
] + 
iZîo
;

2556 if–
iFøme
<=
iLa°
 && iFøme>=
pWÆ
->
möFøme
 && 
aPgno
[
aHash
[
iKey
]]==
pgno
 ){

2557 
	`as£π
–
iFøme
>
iRód
 || 
CORRUPT_DB
 );

2558 
iRód
 = 
iFøme
;

2560 if–(
nCﬁlide
--)==0 ){

2561  
SQLITE_CORRUPT_BKPT
;

2566 #ifde‡
SQLITE_ENABLE_EXPENSIVE_ASSERT


2571 
u32
 
iRód2
 = 0;

2572 
u32
 
iTe°
;

2573 
	`as£π
–
pWÆ
->
möFøme
>0 );

2574 
iTe°
=
iLa°
; iTe°>=
pWÆ
->
möFøme
; iTest--){

2575 if–
	`wÆFømePgno
(
pWÆ
, 
iTe°
)==
pgno
 ){

2576 
iRód2
 = 
iTe°
;

2580 
	`as£π
–
iRód
==
iRód2
 );

2584 *
piRód
 = 
iRód
;

2585  
SQLITE_OK
;

2586 
	}
}

2593 
	$sqlôe3WÆRódFøme
(

2594 
WÆ
 *
pWÆ
,

2595 
u32
 
iRód
,

2596 
nOut
,

2597 
u8
 *
pOut


2599 
sz
;

2600 
i64
 
iOff£t
;

2601 
sz
 = 
pWÆ
->
hdr
.
szPage
;

2602 
sz
 = (sz&0xfe00) + ((sz&0x0001)<<16);

2603 
	`ã°ˇ£
–
sz
<=32768 );

2604 
	`ã°ˇ£
–
sz
>=65536 );

2605 
iOff£t
 = 
	`wÆFømeOff£t
(
iRód
, 
sz
Ë+ 
WAL_FRAME_HDRSIZE
;

2607  
	`sqlôe3OsRód
(
pWÆ
->
pWÆFd
, 
pOut
, (
nOut
>
sz
 ? sz :ÇOut), 
iOff£t
);

2608 
	}
}

2613 
Pgno
 
	$sqlôe3WÆDbsize
(
WÆ
 *
pWÆ
){

2614 if–
pWÆ
 && 
	`ALWAYS
’WÆ->
ªadLock
>=0) ){

2615  
pWÆ
->
hdr
.
nPage
;

2618 
	}
}

2634 
	$sqlôe3WÆBegöWrôeTønß˘i⁄
(
WÆ
 *
pWÆ
){

2635 
rc
;

2639 
	`as£π
–
pWÆ
->
ªadLock
>=0 );

2640 
	`as£π
–
pWÆ
->
wrôeLock
==0 &&ÖWÆ->
iReCksum
==0 );

2642 if–
pWÆ
->
ªadO∆y
 ){

2643  
SQLITE_READONLY
;

2649 
rc
 = 
	`wÆLockEx˛usive
(
pWÆ
, 
WAL_WRITE_LOCK
, 1);

2650 if–
rc
 ){

2651  
rc
;

2653 
pWÆ
->
wrôeLock
 = 1;

2659 if–
	`memcmp
(&
pWÆ
->
hdr
, (*)
	`wÆIndexHdr
’WÆ), (
WÆIndexHdr
))!=0 ){

2660 
	`wÆU∆ockEx˛usive
(
pWÆ
, 
WAL_WRITE_LOCK
, 1);

2661 
pWÆ
->
wrôeLock
 = 0;

2662 
rc
 = 
SQLITE_BUSY_SNAPSHOT
;

2665  
rc
;

2666 
	}
}

2672 
	$sqlôe3WÆEndWrôeTønß˘i⁄
(
WÆ
 *
pWÆ
){

2673 if–
pWÆ
->
wrôeLock
 ){

2674 
	`wÆU∆ockEx˛usive
(
pWÆ
, 
WAL_WRITE_LOCK
, 1);

2675 
pWÆ
->
wrôeLock
 = 0;

2676 
pWÆ
->
iReCksum
 = 0;

2677 
pWÆ
->
åunˇãOnCommô
 = 0;

2679  
SQLITE_OK
;

2680 
	}
}

2694 
sqlôe3WÆUndo
(
WÆ
 *
pWÆ
, (*
xUndo
)(*, 
Pgno
), *
pUndoCtx
){

2695 
rc
 = 
SQLITE_OK
;

2696 if–
	`ALWAYS
(
pWÆ
->
wrôeLock
) ){

2697 
Pgno
 
iMax
 = 
pWÆ
->
hdr
.
mxFøme
;

2698 
Pgno
 
iFøme
;

2703 
	`mem˝y
(&
pWÆ
->
hdr
, (*)
	`wÆIndexHdr
’WÆ), (
WÆIndexHdr
));

2705 
iFøme
=
pWÆ
->
hdr
.
mxFøme
+1;

2706 
	`ALWAYS
(
rc
==
SQLITE_OK
Ë&& 
iFøme
<=
iMax
;

2707 
iFøme
++

2720 
	`as£π
–
	`wÆFømePgno
(
pWÆ
, 
iFøme
)!=1 );

2721 
rc
 = 
	`xUndo
(
pUndoCtx
, 
	`wÆFømePgno
(
pWÆ
, 
iFøme
));

2723 if–
iMax
!=
pWÆ
->
hdr
.
mxFøme
 ) 
	`wÆCÀ™upHash
(pWal);

2725  
rc
;

2726 
	}
}

2734 
	$sqlôe3WÆSavïoöt
(
WÆ
 *
pWÆ
, 
u32
 *
aWÆD©a
){

2735 
	`as£π
–
pWÆ
->
wrôeLock
 );

2736 
aWÆD©a
[0] = 
pWÆ
->
hdr
.
mxFøme
;

2737 
aWÆD©a
[1] = 
pWÆ
->
hdr
.
aFømeCksum
[0];

2738 
aWÆD©a
[2] = 
pWÆ
->
hdr
.
aFømeCksum
[1];

2739 
aWÆD©a
[3] = 
pWÆ
->
nCk±
;

2740 
	}
}

2748 
	$sqlôe3WÆSavïoötUndo
(
WÆ
 *
pWÆ
, 
u32
 *
aWÆD©a
){

2749 
rc
 = 
SQLITE_OK
;

2751 
	`as£π
–
pWÆ
->
wrôeLock
 );

2752 
	`as£π
–
aWÆD©a
[3]!=
pWÆ
->
nCk±
 ||áWÆD©a[0]<ıWÆ->
hdr
.
mxFøme
 );

2754 if–
aWÆD©a
[3]!=
pWÆ
->
nCk±
 ){

2759 
aWÆD©a
[0] = 0;

2760 
aWÆD©a
[3] = 
pWÆ
->
nCk±
;

2763 if–
aWÆD©a
[0]<
pWÆ
->
hdr
.
mxFøme
 ){

2764 
pWÆ
->
hdr
.
mxFøme
 = 
aWÆD©a
[0];

2765 
pWÆ
->
hdr
.
aFømeCksum
[0] = 
aWÆD©a
[1];

2766 
pWÆ
->
hdr
.
aFømeCksum
[1] = 
aWÆD©a
[2];

2767 
	`wÆCÀ™upHash
(
pWÆ
);

2770  
rc
;

2771 
	}
}

2785 
	$wÆRe°¨tLog
(
WÆ
 *
pWÆ
){

2786 
rc
 = 
SQLITE_OK
;

2787 
˙t
;

2789 if–
pWÆ
->
ªadLock
==0 ){

2790 vﬁ©ûê
WÆCk±Info
 *
pInfo
 = 
	`wÆCk±Info
(
pWÆ
);

2791 
	`as£π
–
pInfo
->
nBackfûl
==
pWÆ
->
hdr
.
mxFøme
 );

2792 if–
pInfo
->
nBackfûl
>0 ){

2793 
u32
 
ß…1
;

2794 
	`sqlôe3_øndom√ss
(4, &
ß…1
);

2795 
rc
 = 
	`wÆLockEx˛usive
(
pWÆ
, 
	`WAL_READ_LOCK
(1), 
WAL_NREADER
-1);

2796 if–
rc
==
SQLITE_OK
 ){

2806 
	`wÆRe°¨tHdr
(
pWÆ
, 
ß…1
);

2807 
	`wÆU∆ockEx˛usive
(
pWÆ
, 
	`WAL_READ_LOCK
(1), 
WAL_NREADER
-1);

2808 }if–
rc
!=
SQLITE_BUSY
 ){

2809  
rc
;

2812 
	`wÆU∆ockSh¨ed
(
pWÆ
, 
	`WAL_READ_LOCK
(0));

2813 
pWÆ
->
ªadLock
 = -1;

2814 
˙t
 = 0;

2816 
nŸU£d
;

2817 
rc
 = 
	`wÆTryBegöRód
(
pWÆ
, &
nŸU£d
, 1, ++
˙t
);

2818 } 
rc
==
WAL_RETRY
 );

2819 
	`as£π
–(
rc
&0xff)!=
SQLITE_BUSY
 );

2820 
	`ã°ˇ£
–(
rc
&0xff)==
SQLITE_IOERR
 );

2821 
	`ã°ˇ£
–
rc
==
SQLITE_PROTOCOL
 );

2822 
	`ã°ˇ£
–
rc
==
SQLITE_OK
 );

2824  
rc
;

2825 
	}
}

2832 
	sWÆWrôî
 {

2833 
WÆ
 *
	mpWÆ
;

2834 
sqlôe3_fûe
 *
	mpFd
;

2835 
sqlôe3_öt64
 
	miSyncPoöt
;

2836 
	msyncFœgs
;

2837 
	mszPage
;

2838 } 
	tWÆWrôî
;

2848 
	$wÆWrôeToLog
(

2849 
WÆWrôî
 *
p
,

2850 *
pC⁄ã¡
,

2851 
iAmt
,

2852 
sqlôe3_öt64
 
iOff£t


2854 
rc
;

2855 if–
iOff£t
<
p
->
iSyncPoöt
 && iOff£t+
iAmt
>=p->iSyncPoint ){

2856 
iFú°Amt
 = ()(
p
->
iSyncPoöt
 - 
iOff£t
);

2857 
rc
 = 
	`sqlôe3OsWrôe
(
p
->
pFd
, 
pC⁄ã¡
, 
iFú°Amt
, 
iOff£t
);

2858 if–
rc
 ) Ñc;

2859 
iOff£t
 +
iFú°Amt
;

2860 
iAmt
 -
iFú°Amt
;

2861 
pC⁄ã¡
 = (*)(
iFú°Amt
 + (*)pContent);

2862 
	`as£π
–
p
->
syncFœgs
 & (
SQLITE_SYNC_NORMAL
|
SQLITE_SYNC_FULL
) );

2863 
rc
 = 
	`sqlôe3OsSync
(
p
->
pFd
,Ö->
syncFœgs
 & 
SQLITE_SYNC_MASK
);

2864 if–
iAmt
==0 || 
rc
 ) Ñc;

2866 
rc
 = 
	`sqlôe3OsWrôe
(
p
->
pFd
, 
pC⁄ã¡
, 
iAmt
, 
iOff£t
);

2867  
rc
;

2868 
	}
}

2873 
	$wÆWrôeO√Føme
(

2874 
WÆWrôî
 *
p
,

2875 
PgHdr
 *
pPage
,

2876 
nTrunˇã
,

2877 
sqlôe3_öt64
 
iOff£t


2879 
rc
;

2880 *
pD©a
;

2881 
u8
 
aFøme
[
WAL_FRAME_HDRSIZE
];

2882 #i‡
	`deföed
(
SQLITE_HAS_CODEC
)

2883 if–(
pD©a
 = 
	`sqlôe3PagîCodec
(
pPage
))==0 )  
SQLITE_NOMEM_BKPT
;

2885 
pD©a
 = 
pPage
->pData;

2887 
	`wÆEncodeFøme
(
p
->
pWÆ
, 
pPage
->
pgno
, 
nTrunˇã
, 
pD©a
, 
aFøme
);

2888 
rc
 = 
	`wÆWrôeToLog
(
p
, 
aFøme
, ◊Føme), 
iOff£t
);

2889 if–
rc
 ) Ñc;

2891 
rc
 = 
	`wÆWrôeToLog
(
p
, 
pD©a
,Ö->
szPage
, 
iOff£t
+(
aFøme
));

2892  
rc
;

2893 
	}
}

2903 
	$wÆRewrôeChecksums
(
WÆ
 *
pWÆ
, 
u32
 
iLa°
){

2904 c⁄° 
szPage
 = 
pWÆ
->szPage;

2905 
rc
 = 
SQLITE_OK
;

2906 
u8
 *
aBuf
;

2907 
u8
 
aFøme
[
WAL_FRAME_HDRSIZE
];

2908 
u32
 
iRód
;

2909 
i64
 
iCksumOff
;

2911 
aBuf
 = 
	`sqlôe3_mÆloc
(
szPage
 + 
WAL_FRAME_HDRSIZE
);

2912 if–
aBuf
==0 )  
SQLITE_NOMEM_BKPT
;

2919 
	`as£π
–
pWÆ
->
iReCksum
>0 );

2920 if–
pWÆ
->
iReCksum
==1 ){

2921 
iCksumOff
 = 24;

2923 
iCksumOff
 = 
	`wÆFømeOff£t
(
pWÆ
->
iReCksum
-1, 
szPage
) + 16;

2925 
rc
 = 
	`sqlôe3OsRód
(
pWÆ
->
pWÆFd
, 
aBuf
, (
u32
)*2, 
iCksumOff
);

2926 
pWÆ
->
hdr
.
aFømeCksum
[0] = 
	`sqlôe3Gë4byã
(
aBuf
);

2927 
pWÆ
->
hdr
.
aFømeCksum
[1] = 
	`sqlôe3Gë4byã
(&
aBuf
[(
u32
)]);

2929 
iRód
 = 
pWÆ
->
iReCksum
;

2930 
pWÆ
->
iReCksum
 = 0;

2931 ; 
rc
==
SQLITE_OK
 && 
iRód
<=
iLa°
; iRead++){

2932 
i64
 
iOff
 = 
	`wÆFømeOff£t
(
iRód
, 
szPage
);

2933 
rc
 = 
	`sqlôe3OsRód
(
pWÆ
->
pWÆFd
, 
aBuf
, 
szPage
+
WAL_FRAME_HDRSIZE
, 
iOff
);

2934 if–
rc
==
SQLITE_OK
 ){

2935 
u32
 
iPgno
, 
nDbSize
;

2936 
iPgno
 = 
	`sqlôe3Gë4byã
(
aBuf
);

2937 
nDbSize
 = 
	`sqlôe3Gë4byã
(&
aBuf
[4]);

2939 
	`wÆEncodeFøme
(
pWÆ
, 
iPgno
, 
nDbSize
, &
aBuf
[
WAL_FRAME_HDRSIZE
], 
aFøme
);

2940 
rc
 = 
	`sqlôe3OsWrôe
(
pWÆ
->
pWÆFd
, 
aFøme
, ◊Føme), 
iOff
);

2944 
	`sqlôe3_‰ì
(
aBuf
);

2945  
rc
;

2946 
	}
}

2952 
	$sqlôe3WÆFømes
(

2953 
WÆ
 *
pWÆ
,

2954 
szPage
,

2955 
PgHdr
 *
pLi°
,

2956 
Pgno
 
nTrunˇã
,

2957 
isCommô
,

2958 
sync_Êags


2960 
rc
;

2961 
u32
 
iFøme
;

2962 
PgHdr
 *
p
;

2963 
PgHdr
 *
pLa°
 = 0;

2964 
nExåa
 = 0;

2965 
szFøme
;

2966 
i64
 
iOff£t
;

2967 
WÆWrôî
 
w
;

2968 
u32
 
iFú°
 = 0;

2969 
WÆIndexHdr
 *
pLive
;

2971 
	`as£π
–
pLi°
 );

2972 
	`as£π
–
pWÆ
->
wrôeLock
 );

2976 
	`as£π
–(
isCommô
!=0)==(
nTrunˇã
!=0) );

2978 #i‡
	`deföed
(
SQLITE_TEST
Ë&& deföed(
SQLITE_DEBUG
)

2979 { 
˙t
; ˙t=0, 
p
=
pLi°
;Ö;Öı->
pDúty
, cnt++){}

2980 
	`WALTRACE
(("WAL%p: frame write begin. %d frames. mxFrame=%d. %s\n",

2981 
pWÆ
, 
˙t
,ÖWÆ->
hdr
.
mxFøme
, 
isCommô
 ? "Commit" : "Spill"));

2985 
pLive
 = (
WÆIndexHdr
*)
	`wÆIndexHdr
(
pWÆ
);

2986 if–
	`memcmp
(&
pWÆ
->
hdr
, (*)
pLive
, (
WÆIndexHdr
))!=0 ){

2987 
iFú°
 = 
pLive
->
mxFøme
+1;

2993 if–
SQLITE_OK
!=(
rc
 = 
	`wÆRe°¨tLog
(
pWÆ
)) ){

2994  
rc
;

3001 
iFøme
 = 
pWÆ
->
hdr
.
mxFøme
;

3002 if–
iFøme
==0 ){

3003 
u8
 
aWÆHdr
[
WAL_HDRSIZE
];

3004 
u32
 
aCksum
[2];

3006 
	`sqlôe3Put4byã
(&
aWÆHdr
[0], (
WAL_MAGIC
 | 
SQLITE_BIGENDIAN
));

3007 
	`sqlôe3Put4byã
(&
aWÆHdr
[4], 
WAL_MAX_VERSION
);

3008 
	`sqlôe3Put4byã
(&
aWÆHdr
[8], 
szPage
);

3009 
	`sqlôe3Put4byã
(&
aWÆHdr
[12], 
pWÆ
->
nCk±
);

3010 if–
pWÆ
->
nCk±
==0 ) 
	`sqlôe3_øndom√ss
(8,ÖWÆ->
hdr
.
aSÆt
);

3011 
	`mem˝y
(&
aWÆHdr
[16], 
pWÆ
->
hdr
.
aSÆt
, 8);

3012 
	`wÆChecksumByãs
(1, 
aWÆHdr
, 
WAL_HDRSIZE
-2*4, 0, 
aCksum
);

3013 
	`sqlôe3Put4byã
(&
aWÆHdr
[24], 
aCksum
[0]);

3014 
	`sqlôe3Put4byã
(&
aWÆHdr
[28], 
aCksum
[1]);

3016 
pWÆ
->
szPage
 = szPage;

3017 
pWÆ
->
hdr
.
bigEndCksum
 = 
SQLITE_BIGENDIAN
;

3018 
pWÆ
->
hdr
.
aFømeCksum
[0] = 
aCksum
[0];

3019 
pWÆ
->
hdr
.
aFømeCksum
[1] = 
aCksum
[1];

3020 
pWÆ
->
åunˇãOnCommô
 = 1;

3022 
rc
 = 
	`sqlôe3OsWrôe
(
pWÆ
->
pWÆFd
, 
aWÆHdr
, (aWalHdr), 0);

3023 
	`WALTRACE
(("WAL%p: wÆ-hódî wrôê%s\n", 
pWÆ
, 
rc
 ? "failed" : "ok"));

3024 if–
rc
!=
SQLITE_OK
 ){

3025  
rc
;

3035 if–
pWÆ
->
syncHódî
 && 
sync_Êags
 ){

3036 
rc
 = 
	`sqlôe3OsSync
(
pWÆ
->
pWÆFd
, 
sync_Êags
 & 
SQLITE_SYNC_MASK
);

3037 if–
rc
 ) Ñc;

3040 
	`as£π
–()
pWÆ
->
szPage
==szPage );

3043 
w
.
pWÆ
 =ÖWal;

3044 
w
.
pFd
 = 
pWÆ
->
pWÆFd
;

3045 
w
.
iSyncPoöt
 = 0;

3046 
w
.
syncFœgs
 = 
sync_Êags
;

3047 
w
.
szPage
 = szPage;

3048 
iOff£t
 = 
	`wÆFømeOff£t
(
iFøme
+1, 
szPage
);

3049 
szFøme
 = 
szPage
 + 
WAL_FRAME_HDRSIZE
;

3052 
p
=
pLi°
;Ö;Öı->
pDúty
){

3053 
nDbSize
;

3059 if–
iFú°
 && (
p
->
pDúty
 || 
isCommô
==0) ){

3060 
u32
 
iWrôe
 = 0;

3061 
	`VVA_ONLY
(
rc
 =Ë
	`sqlôe3WÆFödFøme
(
pWÆ
, 
p
->
pgno
, &
iWrôe
);

3062 
	`as£π
–
rc
==
SQLITE_OK
 || 
iWrôe
==0 );

3063 if–
iWrôe
>=
iFú°
 ){

3064 
i64
 
iOff
 = 
	`wÆFømeOff£t
(
iWrôe
, 
szPage
Ë+ 
WAL_FRAME_HDRSIZE
;

3065 *
pD©a
;

3066 if–
pWÆ
->
iReCksum
==0 || 
iWrôe
<pWal->iReCksum ){

3067 
pWÆ
->
iReCksum
 = 
iWrôe
;

3069 #i‡
	`deföed
(
SQLITE_HAS_CODEC
)

3070 if–(
pD©a
 = 
	`sqlôe3PagîCodec
(
p
))==0 )  
SQLITE_NOMEM
;

3072 
pD©a
 = 
p
->pData;

3074 
rc
 = 
	`sqlôe3OsWrôe
(
pWÆ
->
pWÆFd
, 
pD©a
, 
szPage
, 
iOff
);

3075 if–
rc
 ) Ñc;

3076 
p
->
Êags
 &~
PGHDR_WAL_APPEND
;

3081 
iFøme
++;

3082 
	`as£π
–
iOff£t
==
	`wÆFømeOff£t
(
iFøme
, 
szPage
) );

3083 
nDbSize
 = (
isCommô
 && 
p
->
pDúty
==0Ë? 
nTrunˇã
 : 0;

3084 
rc
 = 
	`wÆWrôeO√Føme
(&
w
, 
p
, 
nDbSize
, 
iOff£t
);

3085 if–
rc
 ) Ñc;

3086 
pLa°
 = 
p
;

3087 
iOff£t
 +
szFøme
;

3088 
p
->
Êags
 |
PGHDR_WAL_APPEND
;

3092 if–
isCommô
 && 
pWÆ
->
iReCksum
 ){

3093 
rc
 = 
	`wÆRewrôeChecksums
(
pWÆ
, 
iFøme
);

3094 if–
rc
 ) Ñc;

3111 if–
isCommô
 && (
sync_Êags
 & 
WAL_SYNC_TRANSACTIONS
)!=0 ){

3112 if–
pWÆ
->
∑dToSe˘‹Bound¨y
 ){

3113 
£˘‹Size
 = 
	`sqlôe3Se˘‹Size
(
pWÆ
->
pWÆFd
);

3114 
w
.
iSyncPoöt
 = ((
iOff£t
+
£˘‹Size
-1)/sectorSize)*sectorSize;

3115  
iOff£t
<
w
.
iSyncPoöt
 ){

3116 
rc
 = 
	`wÆWrôeO√Føme
(&
w
, 
pLa°
, 
nTrunˇã
, 
iOff£t
);

3117 if–
rc
 ) Ñc;

3118 
iOff£t
 +
szFøme
;

3119 
nExåa
++;

3122 
rc
 = 
	`sqlôe3OsSync
(
w
.
pFd
, 
sync_Êags
 & 
SQLITE_SYNC_MASK
);

3130 if–
isCommô
 && 
pWÆ
->
åunˇãOnCommô
 &&ÖWÆ->
mxWÆSize
>=0 ){

3131 
i64
 
sz
 = 
pWÆ
->
mxWÆSize
;

3132 if–
	`wÆFømeOff£t
(
iFøme
+
nExåa
+1, 
szPage
)>
pWÆ
->
mxWÆSize
 ){

3133 
sz
 = 
	`wÆFømeOff£t
(
iFøme
+
nExåa
+1, 
szPage
);

3135 
	`wÆLimôSize
(
pWÆ
, 
sz
);

3136 
pWÆ
->
åunˇãOnCommô
 = 0;

3144 
iFøme
 = 
pWÆ
->
hdr
.
mxFøme
;

3145 
p
=
pLi°
;Ö && 
rc
==
SQLITE_OK
;Öı->
pDúty
){

3146 if–(
p
->
Êags
 & 
PGHDR_WAL_APPEND
)==0 ) ;

3147 
iFøme
++;

3148 
rc
 = 
	`wÆIndexAµíd
(
pWÆ
, 
iFøme
, 
p
->
pgno
);

3150  
rc
==
SQLITE_OK
 && 
nExåa
>0 ){

3151 
iFøme
++;

3152 
nExåa
--;

3153 
rc
 = 
	`wÆIndexAµíd
(
pWÆ
, 
iFøme
, 
pLa°
->
pgno
);

3156 if–
rc
==
SQLITE_OK
 ){

3158 
pWÆ
->
hdr
.
szPage
 = (
u16
)((szPage&0xff00) | (szPage>>16));

3159 
	`ã°ˇ£
–
szPage
<=32768 );

3160 
	`ã°ˇ£
–
szPage
>=65536 );

3161 
pWÆ
->
hdr
.
mxFøme
 = 
iFøme
;

3162 if–
isCommô
 ){

3163 
pWÆ
->
hdr
.
iCh™ge
++;

3164 
pWÆ
->
hdr
.
nPage
 = 
nTrunˇã
;

3167 if–
isCommô
 ){

3168 
	`wÆIndexWrôeHdr
(
pWÆ
);

3169 
pWÆ
->
iCÆlback
 = 
iFøme
;

3173 
	`WALTRACE
(("WAL%p: fømêwrôê%s\n", 
pWÆ
, 
rc
 ? "failed" : "ok"));

3174  
rc
;

3175 
	}
}

3187 
sqlôe3WÆCheckpoöt
(

3188 
WÆ
 *
pWÆ
,

3189 
eMode
,

3190 (*
xBusy
)(*),

3191 *
pBusyArg
,

3192 
sync_Êags
,

3193 
nBuf
,

3194 
u8
 *
zBuf
,

3195 *
≤Log
,

3196 *
≤Ck±


3198 
rc
;

3199 
isCh™ged
 = 0;

3200 
eMode2
 = 
eMode
;

3201 (*
xBusy2
)(*Ë
xBusy
;

3203 
	`as£π
–
pWÆ
->
ck±Lock
==0 );

3204 
	`as£π
–
pWÆ
->
wrôeLock
==0 );

3208 
	`as£π
–
eMode
!=
SQLITE_CHECKPOINT_PASSIVE
 || 
xBusy
==0 );

3210 if–
pWÆ
->
ªadO∆y
 )  
SQLITE_READONLY
;

3211 
	`WALTRACE
(("WAL%p: checkpoöàbegös\n", 
pWÆ
));

3215 
rc
 = 
	`wÆLockEx˛usive
(
pWÆ
, 
WAL_CKPT_LOCK
, 1);

3216 if–
rc
 ){

3223 
	`ã°ˇ£
–
rc
==
SQLITE_BUSY
 );

3224 
	`ã°ˇ£
–
xBusy
!=0 );

3225  
rc
;

3227 
pWÆ
->
ck±Lock
 = 1;

3238 if–
eMode
!=
SQLITE_CHECKPOINT_PASSIVE
 ){

3239 
rc
 = 
	`wÆBusyLock
(
pWÆ
, 
xBusy
, 
pBusyArg
, 
WAL_WRITE_LOCK
, 1);

3240 if–
rc
==
SQLITE_OK
 ){

3241 
pWÆ
->
wrôeLock
 = 1;

3242 }if–
rc
==
SQLITE_BUSY
 ){

3243 
eMode2
 = 
SQLITE_CHECKPOINT_PASSIVE
;

3244 
xBusy2
 = 0;

3245 
rc
 = 
SQLITE_OK
;

3250 if–
rc
==
SQLITE_OK
 ){

3251 
rc
 = 
	`wÆIndexRódHdr
(
pWÆ
, &
isCh™ged
);

3252 if–
isCh™ged
 && 
pWÆ
->
pDbFd
->
pMëhods
->
iVîsi⁄
>=3 ){

3253 
	`sqlôe3OsUn„tch
(
pWÆ
->
pDbFd
, 0, 0);

3258 if–
rc
==
SQLITE_OK
 ){

3260 if–
pWÆ
->
hdr
.
mxFøme
 && 
	`wÆPagesize
’WÆ)!=
nBuf
 ){

3261 
rc
 = 
SQLITE_CORRUPT_BKPT
;

3263 
rc
 = 
	`wÆCheckpoöt
(
pWÆ
, 
eMode2
, 
xBusy2
, 
pBusyArg
, 
sync_Êags
, 
zBuf
);

3267 if–
rc
==
SQLITE_OK
 ||Ñc==
SQLITE_BUSY
 ){

3268 if–
≤Log
 ) *≤Log = ()
pWÆ
->
hdr
.
mxFøme
;

3269 if–
≤Ck±
 ) *≤Ck± = ()(
	`wÆCk±Info
(
pWÆ
)->
nBackfûl
);

3273 if–
isCh™ged
 ){

3280 
	`mem£t
(&
pWÆ
->
hdr
, 0, (
WÆIndexHdr
));

3284 
	`sqlôe3WÆEndWrôeTønß˘i⁄
(
pWÆ
);

3285 
	`wÆU∆ockEx˛usive
(
pWÆ
, 
WAL_CKPT_LOCK
, 1);

3286 
pWÆ
->
ck±Lock
 = 0;

3287 
	`WALTRACE
(("WAL%p: checkpoöà%s\n", 
pWÆ
, 
rc
 ? "failed" : "ok"));

3288  (
rc
==
SQLITE_OK
 && 
eMode
!=
eMode2
 ? 
SQLITE_BUSY
 :Ñc);

3289 
	}
}

3296 
	$sqlôe3WÆCÆlback
(
WÆ
 *
pWÆ
){

3297 
u32
 
ªt
 = 0;

3298 if–
pWÆ
 ){

3299 
ªt
 = 
pWÆ
->
iCÆlback
;

3300 
pWÆ
->
iCÆlback
 = 0;

3302  ()
ªt
;

3303 
	}
}

3329 
	$sqlôe3WÆEx˛usiveMode
(
WÆ
 *
pWÆ
, 
›
){

3330 
rc
;

3331 
	`as£π
–
pWÆ
->
wrôeLock
==0 );

3332 
	`as£π
–
pWÆ
->
ex˛usiveMode
!=
WAL_HEAPMEMORY_MODE
 || 
›
==-1 );

3340 
	`as£π
–
pWÆ
->
ªadLock
>=0 ||ÖWÆ->
lockEº‹
 );

3341 
	`as£π
–
pWÆ
->
ªadLock
>=0 || (
›
<=0 &&ÖWÆ->
ex˛usiveMode
==0) );

3343 if–
›
==0 ){

3344 if–
pWÆ
->
ex˛usiveMode
 ){

3345 
pWÆ
->
ex˛usiveMode
 = 0;

3346 if–
	`wÆLockSh¨ed
(
pWÆ
, 
	`WAL_READ_LOCK
’WÆ->
ªadLock
))!=
SQLITE_OK
 ){

3347 
pWÆ
->
ex˛usiveMode
 = 1;

3349 
rc
 = 
pWÆ
->
ex˛usiveMode
==0;

3352 
rc
 = 0;

3354 }if–
›
>0 ){

3355 
	`as£π
–
pWÆ
->
ex˛usiveMode
==0 );

3356 
	`as£π
–
pWÆ
->
ªadLock
>=0 );

3357 
	`wÆU∆ockSh¨ed
(
pWÆ
, 
	`WAL_READ_LOCK
’WÆ->
ªadLock
));

3358 
pWÆ
->
ex˛usiveMode
 = 1;

3359 
rc
 = 1;

3361 
rc
 = 
pWÆ
->
ex˛usiveMode
==0;

3363  
rc
;

3364 
	}
}

3371 
	$sqlôe3WÆHópMem‹y
(
WÆ
 *
pWÆ
){

3372  (
pWÆ
 &&ÖWÆ->
ex˛usiveMode
==
WAL_HEAPMEMORY_MODE
 );

3373 
	}
}

3375 #ifde‡
SQLITE_ENABLE_SNAPSHOT


3380 
	$sqlôe3WÆS«pshŸGë
(
WÆ
 *
pWÆ
, 
sqlôe3_¢≠shŸ
 **
µS«pshŸ
){

3381 
rc
 = 
SQLITE_OK
;

3382 
WÆIndexHdr
 *
pRë
;

3384 
	`as£π
–
pWÆ
->
ªadLock
>=0 &&ÖWÆ->
wrôeLock
==0 );

3386 
pRë
 = (
WÆIndexHdr
*)
	`sqlôe3_mÆloc
((WalIndexHdr));

3387 if–
pRë
==0 ){

3388 
rc
 = 
SQLITE_NOMEM_BKPT
;

3390 
	`mem˝y
(
pRë
, &
pWÆ
->
hdr
, (
WÆIndexHdr
));

3391 *
µS«pshŸ
 = (
sqlôe3_¢≠shŸ
*)
pRë
;

3394  
rc
;

3395 
	}
}

3399 
	$sqlôe3WÆS«pshŸO≥n
(
WÆ
 *
pWÆ
, 
sqlôe3_¢≠shŸ
 *
pS«pshŸ
){

3400 
pWÆ
->
pS«pshŸ
 = (
WÆIndexHdr
*)pSnapshot;

3401 
	}
}

3407 
	$sqlôe3_¢≠shŸ_cmp
(
sqlôe3_¢≠shŸ
 *
p1
, sqlôe3_¢≠shŸ *
p2
){

3408 
WÆIndexHdr
 *
pHdr1
 = (WÆIndexHdr*)
p1
;

3409 
WÆIndexHdr
 *
pHdr2
 = (WÆIndexHdr*)
p2
;

3413 if–
pHdr1
->
aSÆt
[0]<
pHdr2
->aSalt[0] )  -1;

3414 if–
pHdr1
->
aSÆt
[0]>
pHdr2
->aSalt[0] )  +1;

3415 if–
pHdr1
->
mxFøme
<
pHdr2
->mxFrame )  -1;

3416 if–
pHdr1
->
mxFøme
>
pHdr2
->mxFrame )  +1;

3418 
	}
}

3421 #ifde‡
SQLITE_ENABLE_ZIPVFS


3427 
	$sqlôe3WÆFømesize
(
WÆ
 *
pWÆ
){

3428 
	`as£π
–
pWÆ
==0 ||ÖWÆ->
ªadLock
>=0 );

3429  (
pWÆ
 ?ÖWÆ->
szPage
 : 0);

3430 
	}
}

3435 
sqlôe3_fûe
 *
	$sqlôe3WÆFûe
(
WÆ
 *
pWÆ
){

3436  
pWÆ
->
pWÆFd
;

3437 
	}
}

	@wal.h

17 #i‚de‡
_WAL_H_


18 
	#_WAL_H_


	)

20 
	~"sqlôeI¡.h
"

25 
	#WAL_SYNC_TRANSACTIONS
 0x20

	)

26 
	#SQLITE_SYNC_MASK
 0x13

	)

28 #ifde‡
SQLITE_OMIT_WAL


29 
	#sqlôe3WÆO≥n
(
x
,
y
,
z
Ë0

	)

30 
	#sqlôe3WÆLimô
(
x
,
y
)

	)

31 
	#sqlôe3WÆClo£
(
w
,
x
,
y
,
z
Ë0

	)

32 
	#sqlôe3WÆBegöRódTønß˘i⁄
(
y
,
z
Ë0

	)

33 
	#sqlôe3WÆEndRódTønß˘i⁄
(
z
)

	)

34 
	#sqlôe3WÆDbsize
(
y
Ë0

	)

35 
	#sqlôe3WÆBegöWrôeTønß˘i⁄
(
y
Ë0

	)

36 
	#sqlôe3WÆEndWrôeTønß˘i⁄
(
x
Ë0

	)

37 
	#sqlôe3WÆUndo
(
x
,
y
,
z
Ë0

	)

38 
	#sqlôe3WÆSavïoöt
(
y
,
z
)

	)

39 
	#sqlôe3WÆSavïoötUndo
(
y
,
z
Ë0

	)

40 
	#sqlôe3WÆFømes
(
u
,
v
,
w
,
x
,
y
,
z
Ë0

	)

41 
	#sqlôe3WÆCheckpoöt
(
r
,
s
,
t
,
u
,
v
,
w
,
x
,
y
,
z
Ë0

	)

42 
	#sqlôe3WÆCÆlback
(
z
Ë0

	)

43 
	#sqlôe3WÆEx˛usiveMode
(
y
,
z
Ë0

	)

44 
	#sqlôe3WÆHópMem‹y
(
z
Ë0

	)

45 
	#sqlôe3WÆFømesize
(
z
Ë0

	)

46 
	#sqlôe3WÆFödFøme
(
x
,
y
,
z
Ë0

	)

47 
	#sqlôe3WÆFûe
(
x
Ë0

	)

50 
	#WAL_SAVEPOINT_NDATA
 4

	)

55 
WÆ
 
	tWÆ
;

58 
sqlôe3WÆO≥n
(
sqlôe3_vfs
*, 
sqlôe3_fûe
*, c⁄° *, , 
i64
, 
WÆ
**);

59 
sqlôe3WÆClo£
(
WÆ
 *
pWÆ
, 
sync_Êags
, , 
u8
 *);

62 
sqlôe3WÆLimô
(
WÆ
*, 
i64
);

71 
sqlôe3WÆBegöRódTønß˘i⁄
(
WÆ
 *
pWÆ
, *);

72 
sqlôe3WÆEndRódTønß˘i⁄
(
WÆ
 *
pWÆ
);

75 
sqlôe3WÆFödFøme
(
WÆ
 *, 
Pgno
, 
u32
 *);

76 
sqlôe3WÆRódFøme
(
WÆ
 *, 
u32
, , 
u8
 *);

79 
Pgno
 
sqlôe3WÆDbsize
(
WÆ
 *
pWÆ
);

82 
sqlôe3WÆBegöWrôeTønß˘i⁄
(
WÆ
 *
pWÆ
);

83 
sqlôe3WÆEndWrôeTønß˘i⁄
(
WÆ
 *
pWÆ
);

86 
sqlôe3WÆUndo
(
WÆ
 *
pWÆ
, (*
xUndo
)(*, 
Pgno
), *
pUndoCtx
);

90 
	`sqlôe3WÆSavïoöt
(
WÆ
 *
pWÆ
, 
u32
 *
aWÆD©a
);

94 
	`sqlôe3WÆSavïoötUndo
(
WÆ
 *
pWÆ
, 
u32
 *
aWÆD©a
);

97 
	`sqlôe3WÆFømes
(
WÆ
 *
pWÆ
, , 
PgHdr
 *, 
Pgno
, , );

100 
	`sqlôe3WÆCheckpoöt
(

101 
WÆ
 *
pWÆ
,

102 
eMode
,

103 (*
xBusy
)(*),

104 *
pBusyArg
,

105 
sync_Êags
,

106 
nBuf
,

107 
u8
 *
zBuf
,

108 *
≤Log
,

109 *
≤Ck±


117 
	`sqlôe3WÆCÆlback
(
WÆ
 *
pWÆ
);

122 
	`sqlôe3WÆEx˛usiveMode
(
WÆ
 *
pWÆ
, 
›
);

128 
	`sqlôe3WÆHópMem‹y
(
WÆ
 *
pWÆ
);

130 #ifde‡
SQLITE_ENABLE_SNAPSHOT


131 
	`sqlôe3WÆS«pshŸGë
(
WÆ
 *
pWÆ
, 
sqlôe3_¢≠shŸ
 **
µS«pshŸ
);

132 
	`sqlôe3WÆS«pshŸO≥n
(
WÆ
 *
pWÆ
, 
sqlôe3_¢≠shŸ
 *
pS«pshŸ
);

135 #ifde‡
SQLITE_ENABLE_ZIPVFS


139 
	`sqlôe3WÆFømesize
(
WÆ
 *
pWÆ
);

143 
sqlôe3_fûe
 *
	`sqlôe3WÆFûe
(
WÆ
 *
pWÆ
);

	@walker.c

15 
	~"sqlôeI¡.h
"

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

39 
SQLITE_NOINLINE
 
	$wÆkEx¥
(
WÆkî
 *
pWÆkî
, 
Ex¥
 *
pEx¥
){

40 
rc
;

41 
	`ã°ˇ£
–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_TokíO∆y
) );

42 
	`ã°ˇ£
–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_Redu˚d
) );

43 
rc
 = 
pWÆkî
->
	`xEx¥CÆlback
’WÆkî, 
pEx¥
);

44 if–
rc
==
WRC_C⁄töue


45 && !
	`Ex¥HasPr›îty
(
pEx¥
,
EP_TokíO∆y
) ){

46 if–
	`sqlôe3WÆkEx¥
(
pWÆkî
, 
pEx¥
->
pLe·
ËË 
WRC_Ab‹t
;

47 if–
	`sqlôe3WÆkEx¥
(
pWÆkî
, 
pEx¥
->
pRight
ËË 
WRC_Ab‹t
;

48 if–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_xIsSñe˘
) ){

49 if–
	`sqlôe3WÆkSñe˘
(
pWÆkî
, 
pEx¥
->
x
.
pSñe˘
ËË 
WRC_Ab‹t
;

51 if–
	`sqlôe3WÆkEx¥Li°
(
pWÆkî
, 
pEx¥
->
x
.
pLi°
ËË 
WRC_Ab‹t
;

54  
rc
 & 
WRC_Ab‹t
;

55 
	}
}

56 
	$sqlôe3WÆkEx¥
(
WÆkî
 *
pWÆkî
, 
Ex¥
 *
pEx¥
){

57  
pEx¥
 ? 
	`wÆkEx¥
(
pWÆkî
,pEx¥Ë: 
WRC_C⁄töue
;

58 
	}
}

64 
	$sqlôe3WÆkEx¥Li°
(
WÆkî
 *
pWÆkî
, 
Ex¥Li°
 *
p
){

65 
i
;

66 
Ex¥Li°_ôem
 *
pIãm
;

67 if–
p
 ){

68 
i
=
p
->
nEx¥
, 
pIãm
ı->
a
; i>0; i--,ÖItem++){

69 if–
	`sqlôe3WÆkEx¥
(
pWÆkî
, 
pIãm
->
pEx¥
ËË 
WRC_Ab‹t
;

72  
WRC_C⁄töue
;

73 
	}
}

81 
	$sqlôe3WÆkSñe˘Ex¥
(
WÆkî
 *
pWÆkî
, 
Sñe˘
 *
p
){

82 if–
	`sqlôe3WÆkEx¥Li°
(
pWÆkî
, 
p
->
pELi°
ËË 
WRC_Ab‹t
;

83 if–
	`sqlôe3WÆkEx¥
(
pWÆkî
, 
p
->
pWhîe
ËË 
WRC_Ab‹t
;

84 if–
	`sqlôe3WÆkEx¥Li°
(
pWÆkî
, 
p
->
pGroupBy
ËË 
WRC_Ab‹t
;

85 if–
	`sqlôe3WÆkEx¥
(
pWÆkî
, 
p
->
pHavög
ËË 
WRC_Ab‹t
;

86 if–
	`sqlôe3WÆkEx¥Li°
(
pWÆkî
, 
p
->
pOrdîBy
ËË 
WRC_Ab‹t
;

87 if–
	`sqlôe3WÆkEx¥
(
pWÆkî
, 
p
->
pLimô
ËË 
WRC_Ab‹t
;

88 if–
	`sqlôe3WÆkEx¥
(
pWÆkî
, 
p
->
pOff£t
ËË 
WRC_Ab‹t
;

89  
WRC_C⁄töue
;

90 
	}
}

99 
	$sqlôe3WÆkSñe˘From
(
WÆkî
 *
pWÆkî
, 
Sñe˘
 *
p
){

100 
SrcLi°
 *
pSrc
;

101 
i
;

102 
SrcLi°_ôem
 *
pIãm
;

104 
pSrc
 = 
p
->pSrc;

105 if–
	`ALWAYS
(
pSrc
) ){

106 
i
=
pSrc
->
nSrc
, 
pIãm
ıSrc->
a
; i>0; i--,ÖItem++){

107 if–
	`sqlôe3WÆkSñe˘
(
pWÆkî
, 
pIãm
->
pSñe˘
) ){

108  
WRC_Ab‹t
;

110 if–
pIãm
->
fg
.
isTabFunc


111 && 
	`sqlôe3WÆkEx¥Li°
(
pWÆkî
, 
pIãm
->
u1
.
pFuncArg
)

113  
WRC_Ab‹t
;

117  
WRC_C⁄töue
;

118 
	}
}

136 
	$sqlôe3WÆkSñe˘
(
WÆkî
 *
pWÆkî
, 
Sñe˘
 *
p
){

137 
rc
;

138 if–
p
==0 || (
pWÆkî
->
xSñe˘CÆlback
==0 &&ÖWÆkî->
xSñe˘CÆlback2
==0) ){

139  
WRC_C⁄töue
;

141 
rc
 = 
WRC_C⁄töue
;

142 
pWÆkî
->
wÆkîDïth
++;

143  
p
 ){

144 if–
pWÆkî
->
xSñe˘CÆlback
 ){

145 
rc
 = 
pWÆkî
->
	`xSñe˘CÆlback
’WÆkî, 
p
);

146 if–
rc
 ) ;

148 if–
	`sqlôe3WÆkSñe˘Ex¥
(
pWÆkî
, 
p
)

149 || 
	`sqlôe3WÆkSñe˘From
(
pWÆkî
, 
p
)

151 
pWÆkî
->
wÆkîDïth
--;

152  
WRC_Ab‹t
;

154 if–
pWÆkî
->
xSñe˘CÆlback2
 ){

155 
pWÆkî
->
	`xSñe˘CÆlback2
’WÆkî, 
p
);

157 
p
 =Ö->
pPri‹
;

159 
pWÆkî
->
wÆkîDïth
--;

160  
rc
 & 
WRC_Ab‹t
;

161 
	}
}

	@where.c

19 
	~"sqlôeI¡.h
"

20 
	~"whîeI¡.h
"

23 
whîeLo›Resize
(
sqlôe3
*, 
WhîeLo›
*, );

26 #i‡
deföed
(
SQLITE_TEST
Ë|| deföed(
SQLITE_DEBUG
)

27  
	gsqlôe3WhîeTø˚
 = 0;

34 
LogE°
 
	$sqlôe3WhîeOuçutRowCou¡
(
WhîeInfo
 *
pWInfo
){

35  
pWInfo
->
nRowOut
;

36 
	}
}

42 
	$sqlôe3WhîeIsDi°ö˘
(
WhîeInfo
 *
pWInfo
){

43  
pWInfo
->
eDi°ö˘
;

44 
	}
}

50 
	$sqlôe3WhîeIsOrdîed
(
WhîeInfo
 *
pWInfo
){

51  
pWInfo
->
nOBS©
;

52 
	}
}

58 
	$sqlôe3WhîeC⁄töueLabñ
(
WhîeInfo
 *
pWInfo
){

59 
	`as£π
–
pWInfo
->
iC⁄töue
!=0 );

60  
pWInfo
->
iC⁄töue
;

61 
	}
}

67 
	$sqlôe3WhîeBªakLabñ
(
WhîeInfo
 *
pWInfo
){

68  
pWInfo
->
iBªak
;

69 
	}
}

88 
	$sqlôe3WhîeOkO√Pass
(
WhîeInfo
 *
pWInfo
, *
aiCur
){

89 
	`mem˝y
(
aiCur
, 
pWInfo
->
aiCurO√Pass
, ()*2);

90 #ifde‡
WHERETRACE_ENABLED


91 if–
sqlôe3WhîeTø˚
 && 
pWInfo
->
eO√Pass
!=
ONEPASS_OFF
 ){

92 
	`sqlôe3DebugPrötf
("%s cursors: %d %d\n",

93 
pWInfo
->
eO√Pass
==
ONEPASS_SINGLE
 ? "ONEPASS_SINGLE" : "ONEPASS_MULTI",

94 
aiCur
[0],áiCur[1]);

97  
pWInfo
->
eO√Pass
;

98 
	}
}

103 
	$whîeOrMove
(
WhîeOrSë
 *
pDe°
, WhîeOrSë *
pSrc
){

104 
pDe°
->
n
 = 
pSrc
->n;

105 
	`mem˝y
(
pDe°
->
a
, 
pSrc
->a,ÖDe°->
n
*(pDest->a[0]));

106 
	}
}

115 
	$whîeOrIn£π
(

116 
WhîeOrSë
 *
pSë
,

117 
Bômask
 
¥îeq
,

118 
LogE°
 
rRun
,

119 
LogE°
 
nOut


121 
u16
 
i
;

122 
WhîeOrCo°
 *
p
;

123 
i
=
pSë
->
n
, 
p
ıSë->
a
; i>0; i--,Ö++){

124 if–
rRun
<=
p
->rRu¿&& (
¥îeq
 &Ö->prereq)==prereq ){

125 
whîeOrIn£π_d⁄e
;

127 if–
p
->
rRun
<ÙRu¿&& (p->
¥îeq
 &Örereq)==p->prereq ){

131 if–
pSë
->
n
<
N_OR_COST
 ){

132 
p
 = &
pSë
->
a
[pSë->
n
++];

133 
p
->
nOut
 =ÇOut;

135 
p
 = 
pSë
->
a
;

136 
i
=1; i<
pSë
->
n
; i++){

137 if–
p
->
rRun
>
pSë
->
a
[
i
].rRun )Ö =ÖSet->a + i;

139 if–
p
->
rRun
<=rRun )  0;

141 
whîeOrIn£π_d⁄e
:

142 
p
->
¥îeq
 =Örereq;

143 
p
->
rRun
 =ÑRun;

144 if–
p
->
nOut
>nOut )Ö->nOut =ÇOut;

146 
	}
}

152 
Bômask
 
	$sqlôe3WhîeGëMask
(
WhîeMaskSë
 *
pMaskSë
, 
iCurs‹
){

153 
i
;

154 
	`as£π
–
pMaskSë
->
n
<=()(
Bômask
)*8 );

155 
i
=0; i<
pMaskSë
->
n
; i++){

156 if–
pMaskSë
->
ix
[
i
]==
iCurs‹
 ){

157  
	`MASKBIT
(
i
);

161 
	}
}

171 
	$¸óãMask
(
WhîeMaskSë
 *
pMaskSë
, 
iCurs‹
){

172 
	`as£π
–
pMaskSë
->
n
 < 
	`AºaySize
’MaskSë->
ix
) );

173 
pMaskSë
->
ix
[pMaskSë->
n
++] = 
iCurs‹
;

174 
	}
}

181 
WhîeTîm
 *
	$whîeSˇnNext
(
WhîeSˇn
 *
pSˇn
){

182 
iCur
;

183 
i16
 
iCﬁumn
;

184 
Ex¥
 *
pX
;

185 
WhîeCœu£
 *
pWC
;

186 
WhîeTîm
 *
pTîm
;

187 
k
 = 
pSˇn
->k;

189  
pSˇn
->
iEquiv
<ıSˇn->
nEquiv
 ){

190 
iCur
 = 
pSˇn
->
aiCur
[pSˇn->
iEquiv
-1];

191 
iCﬁumn
 = 
pSˇn
->
aiCﬁumn
[pSˇn->
iEquiv
-1];

192 if–
iCﬁumn
==
XN_EXPR
 && 
pSˇn
->
pIdxEx¥
==0 )  0;

193  (
pWC
 = 
pSˇn
->pWC)!=0 ){

194 
pTîm
=
pWC
->
a
+
k
; k<pWC->
nTîm
; k++,ÖTerm++){

195 if–
pTîm
->
À·Curs‹
==
iCur


196 && 
pTîm
->
u
.
À·Cﬁumn
==
iCﬁumn


197 && (
iCﬁumn
!=
XN_EXPR


198 || 
	`sqlôe3Ex¥Com∑ª
(
pTîm
->
pEx¥
->
pLe·
,
pSˇn
->
pIdxEx¥
,
iCur
)==0)

199 && (
pSˇn
->
iEquiv
<=1 || !
	`Ex¥HasPr›îty
(
pTîm
->
pEx¥
, 
EP_FromJoö
))

201 if–(
pTîm
->
eO≥øt‹
 & 
WO_EQUIV
)!=0

202 && 
pSˇn
->
nEquiv
<
	`AºaySize
’Sˇn->
aiCur
)

203 && (
pX
 = 
	`sqlôe3Ex¥SkùCﬁœã
(
pTîm
->
pEx¥
->
pRight
))->
›
==
TK_COLUMN


205 
j
;

206 
j
=0; j<
pSˇn
->
nEquiv
; j++){

207 if–
pSˇn
->
aiCur
[
j
]==
pX
->
iTabÀ


208 && 
pSˇn
->
aiCﬁumn
[
j
]==
pX
->
iCﬁumn
 ){

212 if–
j
==
pSˇn
->
nEquiv
 ){

213 
pSˇn
->
aiCur
[
j
] = 
pX
->
iTabÀ
;

214 
pSˇn
->
aiCﬁumn
[
j
] = 
pX
->
iCﬁumn
;

215 
pSˇn
->
nEquiv
++;

218 if–(
pTîm
->
eO≥øt‹
 & 
pSˇn
->
›Mask
)!=0 ){

220 if–
pSˇn
->
zCﬁlName
 && (
pTîm
->
eO≥øt‹
 & 
WO_ISNULL
)==0 ){

221 
CﬁlSeq
 *
pCﬁl
;

222 
P¨£
 *
pP¨£
 = 
pWC
->
pWInfo
->pParse;

223 
pX
 = 
pTîm
->
pEx¥
;

224 if–!
	`sqlôe3IndexAfföôyOk
(
pX
, 
pSˇn
->
idxaff
) ){

227 
	`as£π
(
pX
->
pLe·
);

228 
pCﬁl
 = 
	`sqlôe3Bö¨yCom∑ªCﬁlSeq
(
pP¨£
,

229 
pX
->
pLe·
,ÖX->
pRight
);

230 if–
pCﬁl
==0 )ÖCﬁ»
pP¨£
->
db
->
pDÊtCﬁl
;

231 if–
	`sqlôe3SåICmp
(
pCﬁl
->
zName
, 
pSˇn
->
zCﬁlName
) ){

235 if–(
pTîm
->
eO≥øt‹
 & (
WO_EQ
|
WO_IS
))!=0

236 && (
pX
 = 
pTîm
->
pEx¥
->
pRight
)->
›
==
TK_COLUMN


237 && 
pX
->
iTabÀ
==
pSˇn
->
aiCur
[0]

238 && 
pX
->
iCﬁumn
==
pSˇn
->
aiCﬁumn
[0]

240 
	`ã°ˇ£
–
pTîm
->
eO≥øt‹
 & 
WO_IS
 );

243 
pSˇn
->
k
 = k+1;

244  
pTîm
;

248 
pSˇn
->
pWC
 =ÖSˇn->pWC->
pOuãr
;

249 
k
 = 0;

251 
pSˇn
->
pWC
 =ÖSˇn->
pOrigWC
;

252 
k
 = 0;

253 
pSˇn
->
iEquiv
++;

256 
	}
}

277 
WhîeTîm
 *
	$whîeSˇnInô
(

278 
WhîeSˇn
 *
pSˇn
,

279 
WhîeCœu£
 *
pWC
,

280 
iCur
,

281 
iCﬁumn
,

282 
u32
 
›Mask
,

283 
Index
 *
pIdx


285 
j
 = 0;

288 
pSˇn
->
pOrigWC
 = 
pWC
;

289 
pSˇn
->
pWC
 =ÖWC;

290 
pSˇn
->
pIdxEx¥
 = 0;

291 if–
pIdx
 ){

292 
j
 = 
iCﬁumn
;

293 
iCﬁumn
 = 
pIdx
->
aiCﬁumn
[
j
];

294 if–
iCﬁumn
==
XN_EXPR
 ) 
pSˇn
->
pIdxEx¥
 = 
pIdx
->
aCﬁEx¥
->
a
[
j
].
pEx¥
;

295 if–
iCﬁumn
==
pIdx
->
pTabÀ
->
iPKey
 ) iCﬁum¿
XN_ROWID
;

297 if–
pIdx
 && 
iCﬁumn
>=0 ){

298 
pSˇn
->
idxaff
 = 
pIdx
->
pTabÀ
->
aCﬁ
[
iCﬁumn
].
afföôy
;

299 
pSˇn
->
zCﬁlName
 = 
pIdx
->
azCﬁl
[
j
];

301 
pSˇn
->
idxaff
 = 0;

302 
pSˇn
->
zCﬁlName
 = 0;

304 
pSˇn
->
›Mask
 = opMask;

305 
pSˇn
->
k
 = 0;

306 
pSˇn
->
aiCur
[0] = 
iCur
;

307 
pSˇn
->
aiCﬁumn
[0] = 
iCﬁumn
;

308 
pSˇn
->
nEquiv
 = 1;

309 
pSˇn
->
iEquiv
 = 1;

310  
	`whîeSˇnNext
(
pSˇn
);

311 
	}
}

338 
WhîeTîm
 *
	$sqlôe3WhîeFödTîm
(

339 
WhîeCœu£
 *
pWC
,

340 
iCur
,

341 
iCﬁumn
,

342 
Bômask
 
nŸRódy
,

343 
u32
 
›
,

344 
Index
 *
pIdx


346 
WhîeTîm
 *
pResu…
 = 0;

347 
WhîeTîm
 *
p
;

348 
WhîeSˇn
 
sˇn
;

350 
p
 = 
	`whîeSˇnInô
(&
sˇn
, 
pWC
, 
iCur
, 
iCﬁumn
, 
›
, 
pIdx
);

351 
›
 &
WO_EQ
|
WO_IS
;

352  
p
 ){

353 if–(
p
->
¥îeqRight
 & 
nŸRódy
)==0 ){

354 if–
p
->
¥îeqRight
==0 && (p->
eO≥øt‹
&
›
)!=0 ){

355 
	`ã°ˇ£
–
p
->
eO≥øt‹
 & 
WO_IS
 );

356  
p
;

358 if–
pResu…
==0 )ÖResu… = 
p
;

360 
p
 = 
	`whîeSˇnNext
(&
sˇn
);

362  
pResu…
;

363 
	}
}

372 
	$födIndexCﬁ
(

373 
P¨£
 *
pP¨£
,

374 
Ex¥Li°
 *
pLi°
,

375 
iBa£
,

376 
Index
 *
pIdx
,

377 
iCﬁ


379 
i
;

380 c⁄° *
zCﬁl
 = 
pIdx
->
azCﬁl
[
iCﬁ
];

382 
i
=0; i<
pLi°
->
nEx¥
; i++){

383 
Ex¥
 *
p
 = 
	`sqlôe3Ex¥SkùCﬁœã
(
pLi°
->
a
[
i
].
pEx¥
);

384 if–
p
->
›
==
TK_COLUMN


385 && 
p
->
iCﬁumn
==
pIdx
->
aiCﬁumn
[
iCﬁ
]

386 && 
p
->
iTabÀ
==
iBa£


388 
CﬁlSeq
 *
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pLi°
->
a
[
i
].
pEx¥
);

389 if–
pCﬁl
 && 0==
	`sqlôe3SåICmp
’Cﬁl->
zName
, 
zCﬁl
) ){

390  
i
;

396 
	}
}

401 
	$ödexCﬁumnNŸNuŒ
(
Index
 *
pIdx
, 
iCﬁ
){

402 
j
;

403 
	`as£π
–
pIdx
!=0 );

404 
	`as£π
–
iCﬁ
>=0 && iCﬁ<
pIdx
->
nCﬁumn
 );

405 
j
 = 
pIdx
->
aiCﬁumn
[
iCﬁ
];

406 if–
j
>=0 ){

407  
pIdx
->
pTabÀ
->
aCﬁ
[
j
].
nŸNuŒ
;

408 }if–
j
==(-1) ){

411 
	`as£π
–
j
==(-2) );

415 
	}
}

424 
	$isDi°ö˘Redund™t
(

425 
P¨£
 *
pP¨£
,

426 
SrcLi°
 *
pTabLi°
,

427 
WhîeCœu£
 *
pWC
,

428 
Ex¥Li°
 *
pDi°ö˘


430 
TabÀ
 *
pTab
;

431 
Index
 *
pIdx
;

432 
i
;

433 
iBa£
;

438 if–
pTabLi°
->
nSrc
!=1 )  0;

439 
iBa£
 = 
pTabLi°
->
a
[0].
iCurs‹
;

440 
pTab
 = 
pTabLi°
->
a
[0].pTab;

446 
i
=0; i<
pDi°ö˘
->
nEx¥
; i++){

447 
Ex¥
 *
p
 = 
	`sqlôe3Ex¥SkùCﬁœã
(
pDi°ö˘
->
a
[
i
].
pEx¥
);

448 if–
p
->
›
==
TK_COLUMN
 &&Ö->
iTabÀ
==
iBa£
 &&Ö->
iCﬁumn
<0 )  1;

464 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

465 if–!
	`IsUniqueIndex
(
pIdx
) ) ;

466 
i
=0; i<
pIdx
->
nKeyCﬁ
; i++){

467 if–0==
	`sqlôe3WhîeFödTîm
(
pWC
, 
iBa£
, 
i
, ~(
Bômask
)0, 
WO_EQ
, 
pIdx
) ){

468 if–
	`födIndexCﬁ
(
pP¨£
, 
pDi°ö˘
, 
iBa£
, 
pIdx
, 
i
)<0 ) ;

469 if–
	`ödexCﬁumnNŸNuŒ
(
pIdx
, 
i
)==0 ) ;

472 if–
i
==
pIdx
->
nKeyCﬁ
 ){

479 
	}
}

485 
LogE°
 
	$e°Log
(
LogE°
 
N
){

486  
N
<=10 ? 0 : 
	`sqlôe3LogE°
(N) - 33;

487 
	}
}

501 
	$å™¶©eCﬁumnToC›y
(

502 
Vdbe
 *
v
,

503 
iSèπ
,

504 
iTabCur
,

505 
iRegi°î
,

506 
bIn¸Rowid


508 
VdbeOp
 *
pOp
 = 
	`sqlôe3VdbeGëOp
(
v
, 
iSèπ
);

509 
iEnd
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

510 ; 
iSèπ
<
iEnd
; iSèπ++, 
pOp
++){

511 if–
pOp
->
p1
!=
iTabCur
 ) ;

512 if–
pOp
->
›code
==
OP_Cﬁumn
 ){

513 
pOp
->
›code
 = 
OP_C›y
;

514 
pOp
->
p1
 =ÖOp->
p2
 + 
iRegi°î
;

515 
pOp
->
p2
 =ÖOp->
p3
;

516 
pOp
->
p3
 = 0;

517 }if–
pOp
->
›code
==
OP_Rowid
 ){

518 if–
bIn¸Rowid
 ){

520 
pOp
->
›code
 = 
OP_AddImm
;

521 
pOp
->
p1
 =ÖOp->
p2
;

522 
pOp
->
p2
 = 1;

524 
pOp
->
›code
 = 
OP_NuŒ
;

525 
pOp
->
p1
 = 0;

526 
pOp
->
p3
 = 0;

530 
	}
}

538 #i‡!
deföed
(
SQLITE_OMIT_VIRTUALTABLE
Ë&& deföed(
WHERETRACE_ENABLED
)

539 
	$TRACE_IDX_INPUTS
(
sqlôe3_ödex_öfo
 *
p
){

540 
i
;

541 if–!
sqlôe3WhîeTø˚
 ) ;

542 
i
=0; i<
p
->
nC⁄°øöt
; i++){

543 
	`sqlôe3DebugPrötf
(" constraint[%d]: col=%dÅermid=%d op=%d usabled=%d\n",

544 
i
,

545 
p
->
aC⁄°øöt
[
i
].
iCﬁumn
,

546 
p
->
aC⁄°øöt
[
i
].
iTîmOff£t
,

547 
p
->
aC⁄°øöt
[
i
].
›
,

548 
p
->
aC⁄°øöt
[
i
].
ußbÀ
);

550 
i
=0; i<
p
->
nOrdîBy
; i++){

551 
	`sqlôe3DebugPrötf
(" orderby[%d]: col=%d desc=%d\n",

552 
i
,

553 
p
->
aOrdîBy
[
i
].
iCﬁumn
,

554 
p
->
aOrdîBy
[
i
].
desc
);

556 
	}
}

557 
	$TRACE_IDX_OUTPUTS
(
sqlôe3_ödex_öfo
 *
p
){

558 
i
;

559 if–!
sqlôe3WhîeTø˚
 ) ;

560 
i
=0; i<
p
->
nC⁄°øöt
; i++){

561 
	`sqlôe3DebugPrötf
(" usage[%d]:árgvIdx=%d omit=%d\n",

562 
i
,

563 
p
->
aC⁄°øötUßge
[
i
].
¨gvIndex
,

564 
p
->
aC⁄°øötUßge
[
i
].
omô
);

566 
	`sqlôe3DebugPrötf
(" idxNum=%d\n", 
p
->
idxNum
);

567 
	`sqlôe3DebugPrötf
(" idxSå=%s\n", 
p
->
idxSå
);

568 
	`sqlôe3DebugPrötf
(" ordîByC⁄sumed=%d\n", 
p
->
‹dîByC⁄sumed
);

569 
	`sqlôe3DebugPrötf
("É°im©edCo°=%g\n", 
p
->
e°im©edCo°
);

570 
	`sqlôe3DebugPrötf
("É°im©edRows=%Œd\n", 
p
->
e°im©edRows
);

571 
	}
}

573 
	#TRACE_IDX_INPUTS
(
A
)

	)

574 
	#TRACE_IDX_OUTPUTS
(
A
)

	)

577 #i‚de‡
SQLITE_OMIT_AUTOMATIC_INDEX


583 
	$ãrmC™DriveIndex
(

584 
WhîeTîm
 *
pTîm
,

585 
SrcLi°_ôem
 *
pSrc
,

586 
Bômask
 
nŸRódy


588 
aff
;

589 if–
pTîm
->
À·Curs‹
!=
pSrc
->
iCurs‹
 )  0;

590 if–(
pTîm
->
eO≥øt‹
 & (
WO_EQ
|
WO_IS
))==0 )  0;

591 if–(
pTîm
->
¥îeqRight
 & 
nŸRódy
)!=0 )  0;

592 if–
pTîm
->
u
.
À·Cﬁumn
<0 )  0;

593 
aff
 = 
pSrc
->
pTab
->
aCﬁ
[
pTîm
->
u
.
À·Cﬁumn
].
afföôy
;

594 if–!
	`sqlôe3IndexAfföôyOk
(
pTîm
->
pEx¥
, 
aff
) )  0;

595 
	`ã°ˇ£
–
pTîm
->
pEx¥
->
›
==
TK_IS
 );

597 
	}
}

601 #i‚de‡
SQLITE_OMIT_AUTOMATIC_INDEX


607 
	$c⁄°ru˘Autom©icIndex
(

608 
P¨£
 *
pP¨£
,

609 
WhîeCœu£
 *
pWC
,

610 
SrcLi°_ôem
 *
pSrc
,

611 
Bômask
 
nŸRódy
,

612 
WhîeLevñ
 *
pLevñ


614 
nKeyCﬁ
;

615 
WhîeTîm
 *
pTîm
;

616 
WhîeTîm
 *
pWCEnd
;

617 
Index
 *
pIdx
;

618 
Vdbe
 *
v
;

619 
addrInô
;

620 
TabÀ
 *
pTabÀ
;

621 
addrT›
;

622 
ªgRec‹d
;

623 
n
;

624 
i
;

625 
mxBôCﬁ
;

626 
CﬁlSeq
 *
pCﬁl
;

627 
WhîeLo›
 *
pLo›
;

628 *
zNŸU£d
;

629 
Bômask
 
idxCﬁs
;

630 
Bômask
 
exåaCﬁs
;

631 
u8
 
£¡W¨nög
 = 0;

632 
Ex¥
 *
pP¨tül
 = 0;

633 
iC⁄töue
 = 0;

634 
SrcLi°_ôem
 *
pTabIãm
;

635 
addrCou¡î
 = 0;

636 
ªgBa£
;

640 
v
 = 
pP¨£
->
pVdbe
;

641 
	`as£π
–
v
!=0 );

642 
addrInô
 = 
	`sqlôe3CodeOn˚
(
pP¨£
); 
	`VdbeCovîage
(
v
);

646 
nKeyCﬁ
 = 0;

647 
pTabÀ
 = 
pSrc
->
pTab
;

648 
pWCEnd
 = &
pWC
->
a
[pWC->
nTîm
];

649 
pLo›
 = 
pLevñ
->
pWLo›
;

650 
idxCﬁs
 = 0;

651 
pTîm
=
pWC
->
a
;ÖTîm<
pWCEnd
;ÖTerm++){

652 
Ex¥
 *
pEx¥
 = 
pTîm
->pExpr;

653 
	`as£π
–!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_FromJoö
)

654 || 
pEx¥
->
iRightJoöTabÀ
!=
pSrc
->
iCurs‹


655 || 
pLo›
->
¥îeq
!=0 );

656 if–
pLo›
->
¥îeq
==0

657 && (
pTîm
->
wtFœgs
 & 
TERM_VIRTUAL
)==0

658 && !
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_FromJoö
)

659 && 
	`sqlôe3Ex¥IsTabÀC⁄°™t
(
pEx¥
, 
pSrc
->
iCurs‹
) ){

660 
pP¨tül
 = 
	`sqlôe3Ex¥And
(
pP¨£
->
db
,ÖPartial,

661 
	`sqlôe3Ex¥Dup
(
pP¨£
->
db
, 
pEx¥
, 0));

663 if–
	`ãrmC™DriveIndex
(
pTîm
, 
pSrc
, 
nŸRódy
) ){

664 
iCﬁ
 = 
pTîm
->
u
.
À·Cﬁumn
;

665 
Bômask
 
cMask
 = 
iCﬁ
>=
BMS
 ? 
	`MASKBIT
(BMS-1) : MASKBIT(iCol);

666 
	`ã°ˇ£
–
iCﬁ
==
BMS
 );

667 
	`ã°ˇ£
–
iCﬁ
==
BMS
-1 );

668 if–!
£¡W¨nög
 ){

669 
	`sqlôe3_log
(
SQLITE_WARNING_AUTOINDEX
,

670 "autom©i¯ödex o¿%s(%s)", 
pTabÀ
->
zName
,

671 
pTabÀ
->
aCﬁ
[
iCﬁ
].
zName
);

672 
£¡W¨nög
 = 1;

674 if–(
idxCﬁs
 & 
cMask
)==0 ){

675 if–
	`whîeLo›Resize
(
pP¨£
->
db
, 
pLo›
, 
nKeyCﬁ
+1) ){

676 
íd_auto_ödex_¸óã
;

678 
pLo›
->
aLTîm
[
nKeyCﬁ
++] = 
pTîm
;

679 
idxCﬁs
 |
cMask
;

683 
	`as£π
–
nKeyCﬁ
>0 );

684 
pLo›
->
u
.
båì
.
nEq
 =ÖLo›->
nLTîm
 = 
nKeyCﬁ
;

685 
pLo›
->
wsFœgs
 = 
WHERE_COLUMN_EQ
 | 
WHERE_IDX_ONLY
 | 
WHERE_INDEXED


686 | 
WHERE_AUTO_INDEX
;

696 
exåaCﬁs
 = 
pSrc
->
cﬁU£d
 & (~
idxCﬁs
 | 
	`MASKBIT
(
BMS
-1));

697 
mxBôCﬁ
 = 
	`MIN
(
BMS
-1,
pTabÀ
->
nCﬁ
);

698 
	`ã°ˇ£
–
pTabÀ
->
nCﬁ
==
BMS
-1 );

699 
	`ã°ˇ£
–
pTabÀ
->
nCﬁ
==
BMS
-2 );

700 
i
=0; i<
mxBôCﬁ
; i++){

701 if–
exåaCﬁs
 & 
	`MASKBIT
(
i
ËË
nKeyCﬁ
++;

703 if–
pSrc
->
cﬁU£d
 & 
	`MASKBIT
(
BMS
-1) ){

704 
nKeyCﬁ
 +
pTabÀ
->
nCﬁ
 - 
BMS
 + 1;

708 
pIdx
 = 
	`sqlôe3AŒoˇãIndexObje˘
(
pP¨£
->
db
, 
nKeyCﬁ
+1, 0, &
zNŸU£d
);

709 if–
pIdx
==0 ) 
íd_auto_ödex_¸óã
;

710 
pLo›
->
u
.
båì
.
pIndex
 = 
pIdx
;

711 
pIdx
->
zName
 = "auto-index";

712 
pIdx
->
pTabÀ
 =ÖTable;

713 
n
 = 0;

714 
idxCﬁs
 = 0;

715 
pTîm
=
pWC
->
a
;ÖTîm<
pWCEnd
;ÖTerm++){

716 if–
	`ãrmC™DriveIndex
(
pTîm
, 
pSrc
, 
nŸRódy
) ){

717 
iCﬁ
 = 
pTîm
->
u
.
À·Cﬁumn
;

718 
Bômask
 
cMask
 = 
iCﬁ
>=
BMS
 ? 
	`MASKBIT
(BMS-1) : MASKBIT(iCol);

719 
	`ã°ˇ£
–
iCﬁ
==
BMS
-1 );

720 
	`ã°ˇ£
–
iCﬁ
==
BMS
 );

721 if–(
idxCﬁs
 & 
cMask
)==0 ){

722 
Ex¥
 *
pX
 = 
pTîm
->
pEx¥
;

723 
idxCﬁs
 |
cMask
;

724 
pIdx
->
aiCﬁumn
[
n
] = 
pTîm
->
u
.
À·Cﬁumn
;

725 
pCﬁl
 = 
	`sqlôe3Bö¨yCom∑ªCﬁlSeq
(
pP¨£
, 
pX
->
pLe·
,ÖX->
pRight
);

726 
pIdx
->
azCﬁl
[
n
] = 
pCﬁl
 ?ÖCﬁl->
zName
 : 
sqlôe3SåBINARY
;

727 
n
++;

731 
	`as£π
–(
u32
)
n
==
pLo›
->
u
.
båì
.
nEq
 );

735 
i
=0; i<
mxBôCﬁ
; i++){

736 if–
exåaCﬁs
 & 
	`MASKBIT
(
i
) ){

737 
pIdx
->
aiCﬁumn
[
n
] = 
i
;

738 
pIdx
->
azCﬁl
[
n
] = 
sqlôe3SåBINARY
;

739 
n
++;

742 if–
pSrc
->
cﬁU£d
 & 
	`MASKBIT
(
BMS
-1) ){

743 
i
=
BMS
-1; i<
pTabÀ
->
nCﬁ
; i++){

744 
pIdx
->
aiCﬁumn
[
n
] = 
i
;

745 
pIdx
->
azCﬁl
[
n
] = 
sqlôe3SåBINARY
;

746 
n
++;

749 
	`as£π
–
n
==
nKeyCﬁ
 );

750 
pIdx
->
aiCﬁumn
[
n
] = 
XN_ROWID
;

751 
pIdx
->
azCﬁl
[
n
] = 
sqlôe3SåBINARY
;

754 
	`as£π
–
pLevñ
->
iIdxCur
>=0 );

755 
pLevñ
->
iIdxCur
 = 
pP¨£
->
nTab
++;

756 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_O≥nAutoödex
, 
pLevñ
->
iIdxCur
, 
nKeyCﬁ
+1);

757 
	`sqlôe3VdbeSëP4KeyInfo
(
pP¨£
, 
pIdx
);

758 
	`VdbeCommít
((
v
, "f‹ %s", 
pTabÀ
->
zName
));

761 
	`sqlôe3Ex¥CachePush
(
pP¨£
);

762 
pTabIãm
 = &
pWC
->
pWInfo
->
pTabLi°
->
a
[
pLevñ
->
iFrom
];

763 if–
pTabIãm
->
fg
.
vüC‹outöe
 ){

764 
ªgYõld
 = 
pTabIãm
->
ªgRëu∫
;

765 
addrCou¡î
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 0, 0);

766 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_InôC‹outöe
, 
ªgYõld
, 0, 
pTabIãm
->
addrFûlSub
);

767 
addrT›
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Yõld
, 
ªgYõld
);

768 
	`VdbeCovîage
(
v
);

769 
	`VdbeCommít
((
v
, "√xàrow o‡\"%s\"", 
pTabIãm
->
pTab
->
zName
));

771 
addrT›
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Rewöd
, 
pLevñ
->
iTabCur
); 
	`VdbeCovîage
(v);

773 if–
pP¨tül
 ){

774 
iC⁄töue
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

775 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pP¨tül
, 
iC⁄töue
, 
SQLITE_JUMPIFNULL
);

776 
pLo›
->
wsFœgs
 |
WHERE_PARTIALIDX
;

778 
ªgRec‹d
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

779 
ªgBa£
 = 
	`sqlôe3Gíî©eIndexKey
(

780 
pP¨£
, 
pIdx
, 
pLevñ
->
iTabCur
, 
ªgRec‹d
, 0, 0, 0, 0

782 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IdxIn£π
, 
pLevñ
->
iIdxCur
, 
ªgRec‹d
);

783 
	`sqlôe3VdbeCh™geP5
(
v
, 
OPFLAG_USESEEKRESULT
);

784 if–
pP¨tül
 ) 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iC⁄töue
);

785 if–
pTabIãm
->
fg
.
vüC‹outöe
 ){

786 
	`sqlôe3VdbeCh™geP2
(
v
, 
addrCou¡î
, 
ªgBa£
+
n
);

787 
	`å™¶©eCﬁumnToC›y
(
v
, 
addrT›
, 
pLevñ
->
iTabCur
, 
pTabIãm
->
ªgResu…
, 1);

788 
	`sqlôe3VdbeGŸo
(
v
, 
addrT›
);

789 
pTabIãm
->
fg
.
vüC‹outöe
 = 0;

791 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Next
, 
pLevñ
->
iTabCur
, 
addrT›
+1); 
	`VdbeCovîage
(v);

793 
	`sqlôe3VdbeCh™geP5
(
v
, 
SQLITE_STMTSTATUS_AUTOINDEX
);

794 
	`sqlôe3VdbeJumpHîe
(
v
, 
addrT›
);

795 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgRec‹d
);

796 
	`sqlôe3Ex¥CacheP›
(
pP¨£
);

799 
	`sqlôe3VdbeJumpHîe
(
v
, 
addrInô
);

801 
íd_auto_ödex_¸óã
:

802 
	`sqlôe3Ex¥Dñëe
(
pP¨£
->
db
, 
pP¨tül
);

803 
	}
}

806 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


812 
sqlôe3_ödex_öfo
 *
	$ÆloˇãIndexInfo
(

813 
P¨£
 *
pP¨£
,

814 
WhîeCœu£
 *
pWC
,

815 
Bômask
 
mUnußbÀ
,

816 
SrcLi°_ôem
 *
pSrc
,

817 
Ex¥Li°
 *
pOrdîBy


819 
i
, 
j
;

820 
nTîm
;

821 
sqlôe3_ödex_c⁄°øöt
 *
pIdxC⁄s
;

822 
sqlôe3_ödex_‹dîby
 *
pIdxOrdîBy
;

823 
sqlôe3_ödex_c⁄°øöt_ußge
 *
pUßge
;

824 
WhîeTîm
 *
pTîm
;

825 
nOrdîBy
;

826 
sqlôe3_ödex_öfo
 *
pIdxInfo
;

830 
i
=
nTîm
=0, 
pTîm
=
pWC
->
a
; i<pWC->nTerm; i++,ÖTerm++){

831 if–
pTîm
->
À·Curs‹
 !
pSrc
->
iCurs‹
 ) ;

832 if–
pTîm
->
¥îeqRight
 & 
mUnußbÀ
 ) ;

833 
	`as£π
–
	`IsPowîOfTwo
(
pTîm
->
eO≥øt‹
 & ~
WO_EQUIV
) );

834 
	`ã°ˇ£
–
pTîm
->
eO≥øt‹
 & 
WO_IN
 );

835 
	`ã°ˇ£
–
pTîm
->
eO≥øt‹
 & 
WO_ISNULL
 );

836 
	`ã°ˇ£
–
pTîm
->
eO≥øt‹
 & 
WO_IS
 );

837 
	`ã°ˇ£
–
pTîm
->
eO≥øt‹
 & 
WO_ALL
 );

838 if–(
pTîm
->
eO≥øt‹
 & ~(
WO_ISNULL
|
WO_EQUIV
|
WO_IS
))==0 ) ;

839 if–
pTîm
->
wtFœgs
 & 
TERM_VNULL
 ) ;

840 
	`as£π
–
pTîm
->
u
.
À·Cﬁumn
>=(-1) );

841 
nTîm
++;

848 
nOrdîBy
 = 0;

849 if–
pOrdîBy
 ){

850 
n
 = 
pOrdîBy
->
nEx¥
;

851 
i
=0; i<
n
; i++){

852 
Ex¥
 *
pEx¥
 = 
pOrdîBy
->
a
[
i
].pExpr;

853 if–
pEx¥
->
›
!=
TK_COLUMN
 ||ÖEx¥->
iTabÀ
!=
pSrc
->
iCurs‹
 ) ;

855 if–
i
==
n
){

856 
nOrdîBy
 = 
n
;

862 
pIdxInfo
 = 
	`sqlôe3DbMÆlocZîo
(
pP¨£
->
db
, (*pIdxInfo)

863 + ((*
pIdxC⁄s
Ë+ (*
pUßge
))*
nTîm


864 + (*
pIdxOrdîBy
)*
nOrdîBy
 );

865 if–
pIdxInfo
==0 ){

866 
	`sqlôe3Eº‹Msg
(
pP¨£
, "out of memory");

875 
pIdxC⁄s
 = (
sqlôe3_ödex_c⁄°øöt
*)&
pIdxInfo
[1];

876 
pIdxOrdîBy
 = (
sqlôe3_ödex_‹dîby
*)&
pIdxC⁄s
[
nTîm
];

877 
pUßge
 = (
sqlôe3_ödex_c⁄°øöt_ußge
*)&
pIdxOrdîBy
[
nOrdîBy
];

878 *(*)&
pIdxInfo
->
nC⁄°øöt
 = 
nTîm
;

879 *(*)&
pIdxInfo
->
nOrdîBy
 =ÇOrderBy;

880 *(
sqlôe3_ödex_c⁄°øöt
**)&
pIdxInfo
->
aC⁄°øöt
 = 
pIdxC⁄s
;

881 *(
sqlôe3_ödex_‹dîby
**)&
pIdxInfo
->
aOrdîBy
 = 
pIdxOrdîBy
;

882 *(
sqlôe3_ödex_c⁄°øöt_ußge
**)&
pIdxInfo
->
aC⁄°øötUßge
 =

883 
pUßge
;

885 
i
=
j
=0, 
pTîm
=
pWC
->
a
; i<pWC->
nTîm
; i++,ÖTerm++){

886 
u8
 
›
;

887 if–
pTîm
->
À·Curs‹
 !
pSrc
->
iCurs‹
 ) ;

888 if–
pTîm
->
¥îeqRight
 & 
mUnußbÀ
 ) ;

889 
	`as£π
–
	`IsPowîOfTwo
(
pTîm
->
eO≥øt‹
 & ~
WO_EQUIV
) );

890 
	`ã°ˇ£
–
pTîm
->
eO≥øt‹
 & 
WO_IN
 );

891 
	`ã°ˇ£
–
pTîm
->
eO≥øt‹
 & 
WO_IS
 );

892 
	`ã°ˇ£
–
pTîm
->
eO≥øt‹
 & 
WO_ISNULL
 );

893 
	`ã°ˇ£
–
pTîm
->
eO≥øt‹
 & 
WO_ALL
 );

894 if–(
pTîm
->
eO≥øt‹
 & ~(
WO_ISNULL
|
WO_EQUIV
|
WO_IS
))==0 ) ;

895 if–
pTîm
->
wtFœgs
 & 
TERM_VNULL
 ) ;

896 
	`as£π
–
pTîm
->
u
.
À·Cﬁumn
>=(-1) );

897 
pIdxC⁄s
[
j
].
iCﬁumn
 = 
pTîm
->
u
.
À·Cﬁumn
;

898 
pIdxC⁄s
[
j
].
iTîmOff£t
 = 
i
;

899 
›
 = (
u8
)
pTîm
->
eO≥øt‹
 & 
WO_ALL
;

900 if–
›
==
WO_IN
 ) o∞
WO_EQ
;

901 if–
›
==
WO_MATCH
 ){

902 
›
 = 
pTîm
->
eM©chOp
;

904 
pIdxC⁄s
[
j
].
›
 = op;

908 
	`as£π
–
WO_EQ
==
SQLITE_INDEX_CONSTRAINT_EQ
 );

909 
	`as£π
–
WO_LT
==
SQLITE_INDEX_CONSTRAINT_LT
 );

910 
	`as£π
–
WO_LE
==
SQLITE_INDEX_CONSTRAINT_LE
 );

911 
	`as£π
–
WO_GT
==
SQLITE_INDEX_CONSTRAINT_GT
 );

912 
	`as£π
–
WO_GE
==
SQLITE_INDEX_CONSTRAINT_GE
 );

913 
	`as£π
–
WO_MATCH
==
SQLITE_INDEX_CONSTRAINT_MATCH
 );

914 
	`as£π
–
pTîm
->
eO≥øt‹
 & (
WO_IN
|
WO_EQ
|
WO_LT
|
WO_LE
|
WO_GT
|
WO_GE
|
WO_MATCH
) );

915 
j
++;

917 
i
=0; i<
nOrdîBy
; i++){

918 
Ex¥
 *
pEx¥
 = 
pOrdîBy
->
a
[
i
].pExpr;

919 
pIdxOrdîBy
[
i
].
iCﬁumn
 = 
pEx¥
->iColumn;

920 
pIdxOrdîBy
[
i
].
desc
 = 
pOrdîBy
->
a
[i].
s‹tOrdî
;

923  
pIdxInfo
;

924 
	}
}

940 
	$vèbBe°Index
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTab
, 
sqlôe3_ödex_öfo
 *
p
){

941 
sqlôe3_vèb
 *
pVèb
 = 
	`sqlôe3GëVTabÀ
(
pP¨£
->
db
, 
pTab
)->pVtab;

942 
rc
;

944 
	`TRACE_IDX_INPUTS
(
p
);

945 
rc
 = 
pVèb
->
pModuÀ
->
	`xBe°Index
’Vèb, 
p
);

946 
	`TRACE_IDX_OUTPUTS
(
p
);

948 if–
rc
!=
SQLITE_OK
 ){

949 if–
rc
==
SQLITE_NOMEM
 ){

950 
	`sqlôe3OomFau…
(
pP¨£
->
db
);

951 }if–!
pVèb
->
zEºMsg
 ){

952 
	`sqlôe3Eº‹Msg
(
pP¨£
, "%s", 
	`sqlôe3EºSå
(
rc
));

954 
	`sqlôe3Eº‹Msg
(
pP¨£
, "%s", 
pVèb
->
zEºMsg
);

957 
	`sqlôe3_‰ì
(
pVèb
->
zEºMsg
);

958 
pVèb
->
zEºMsg
 = 0;

963 
i
=0; i<
p
->
nC⁄°øöt
; i++){

964 if–!
p
->
aC⁄°øöt
[
i
].
ußbÀ
 &&Ö->
aC⁄°øötUßge
[i].
¨gvIndex
>0 ){

965 
	`sqlôe3Eº‹Msg
(
pP¨£
,

966 "èbÀ %s: xBe°IndexÑëu∫edá¿övÆidÖœn", 
pTab
->
zName
);

971  
pP¨£
->
nEº
;

972 
	}
}

975 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


989 
	$whîeKeySèts
(

990 
P¨£
 *
pP¨£
,

991 
Index
 *
pIdx
,

992 
U≈ackedRec‹d
 *
pRec
,

993 
roundUp
,

994 
tRow˙t
 *
aSèt


996 
IndexSam∂e
 *
aSam∂e
 = 
pIdx
->aSample;

997 
iCﬁ
;

998 
i
;

999 
iSam∂e
;

1000 
iMö
 = 0;

1001 
iTe°
;

1002 
ªs
;

1003 
nFõld
;

1004 
tRow˙t
 
iLowî
 = 0;

1006 #i‚de‡
SQLITE_DEBUG


1007 
	`UNUSED_PARAMETER
–
pP¨£
 );

1009 
	`as£π
–
pRec
!=0 );

1010 
	`as£π
–
pIdx
->
nSam∂e
>0 );

1011 
	`as£π
–
pRec
->
nFõld
>0 &&ÖRec->nFõld<=
pIdx
->
nSam∂eCﬁ
 );

1057 
nFõld
 = 
pRec
->nField;

1058 
iCﬁ
 = 0;

1059 
iSam∂e
 = 
pIdx
->
nSam∂e
 * 
nFõld
;

1061 
iSamp
;

1062 
n
;

1064 
iTe°
 = (
iMö
+
iSam∂e
)/2;

1065 
iSamp
 = 
iTe°
 / 
nFõld
;

1066 if–
iSamp
>0 ){

1070 
n
=(
iTe°
 % 
nFõld
) + 1;Ç<nField;Ç++){

1071 if–
aSam∂e
[
iSamp
-1].
™Lt
[
n
-1]!=aSample[iSamp].anLt[n-1] ) ;

1074 
n
 = 
iTe°
 + 1;

1077 
pRec
->
nFõld
 = 
n
;

1078 
ªs
 = 
	`sqlôe3VdbeRec‹dCom∑ª
(
aSam∂e
[
iSamp
].
n
,áSam∂e[iSamp].
p
, 
pRec
);

1079 if–
ªs
<0 ){

1080 
iLowî
 = 
aSam∂e
[
iSamp
].
™Lt
[
n
-1] +áSam∂e[iSamp].
™Eq
[n-1];

1081 
iMö
 = 
iTe°
+1;

1082 }if–
ªs
==0 && 
n
<
nFõld
 ){

1083 
iLowî
 = 
aSam∂e
[
iSamp
].
™Lt
[
n
-1];

1084 
iMö
 = 
iTe°
+1;

1085 
ªs
 = -1;

1087 
iSam∂e
 = 
iTe°
;

1088 
iCﬁ
 = 
n
-1;

1090 } 
ªs
 && 
iMö
<
iSam∂e
 );

1091 
i
 = 
iSam∂e
 / 
nFõld
;

1093 #ifde‡
SQLITE_DEBUG


1097 if–
pP¨£
->
db
->
mÆlocFaûed
==0 ){

1098 if–
ªs
==0 ){

1100 
	`as£π
–
i
<
pIdx
->
nSam∂e
 );

1101 
	`as£π
–
iCﬁ
==
nFõld
-1 );

1102 
pRec
->
nFõld
 =ÇField;

1103 
	`as£π
–0==
	`sqlôe3VdbeRec‹dCom∑ª
(
aSam∂e
[
i
].
n
,áSam∂e[i].
p
, 
pRec
)

1104 || 
pP¨£
->
db
->
mÆlocFaûed


1110 
	`as£π
–
i
<=
pIdx
->
nSam∂e
 && i>=0 );

1111 
pRec
->
nFõld
 = 
iCﬁ
+1;

1112 
	`as£π
–
i
==
pIdx
->
nSam∂e


1113 || 
	`sqlôe3VdbeRec‹dCom∑ª
(
aSam∂e
[
i
].
n
,áSam∂e[i].
p
, 
pRec
)>0

1114 || 
pP¨£
->
db
->
mÆlocFaûed
 );

1120 if–
iCﬁ
>0 ){

1121 
pRec
->
nFõld
 = 
iCﬁ
;

1122 
	`as£π
–
	`sqlôe3VdbeRec‹dCom∑ª
(
aSam∂e
[
i
].
n
,áSam∂e[i].
p
, 
pRec
)<=0

1123 || 
pP¨£
->
db
->
mÆlocFaûed
 );

1125 if–
i
>0 ){

1126 
pRec
->
nFõld
 =ÇField;

1127 
	`as£π
–
	`sqlôe3VdbeRec‹dCom∑ª
(
aSam∂e
[
i
-1].
n
,áSam∂e[i-1].
p
, 
pRec
)<0

1128 || 
pP¨£
->
db
->
mÆlocFaûed
 );

1134 if–
ªs
==0 ){

1136 
	`as£π
–
iCﬁ
==
nFõld
-1 );

1137 
aSèt
[0] = 
aSam∂e
[
i
].
™Lt
[
iCﬁ
];

1138 
aSèt
[1] = 
aSam∂e
[
i
].
™Eq
[
iCﬁ
];

1143 
tRow˙t
 
iUµî
, 
iG≠
;

1144 if–
i
>=
pIdx
->
nSam∂e
 ){

1145 
iUµî
 = 
	`sqlôe3LogE°ToI¡
(
pIdx
->
aiRowLogE°
[0]);

1147 
iUµî
 = 
aSam∂e
[
i
].
™Lt
[
iCﬁ
];

1150 if–
iLowî
>=
iUµî
 ){

1151 
iG≠
 = 0;

1153 
iG≠
 = 
iUµî
 - 
iLowî
;

1155 if–
roundUp
 ){

1156 
iG≠
 = (iGap*2)/3;

1158 
iG≠
 = iGap/3;

1160 
aSèt
[0] = 
iLowî
 + 
iG≠
;

1161 
aSèt
[1] = 
pIdx
->
aAvgEq
[
iCﬁ
];

1165 
pRec
->
nFõld
 =ÇField;

1166  
i
;

1167 
	}
}

1181 
LogE°
 
	$whîeR™geAdju°
(
WhîeTîm
 *
pTîm
, 
LogE°
 
nNew
){

1182 
LogE°
 
nRë
 = 
nNew
;

1183 if–
pTîm
 ){

1184 if–
pTîm
->
åuthProb
<=0 ){

1185 
nRë
 +
pTîm
->
åuthProb
;

1186 }if–(
pTîm
->
wtFœgs
 & 
TERM_VNULL
)==0 ){

1187 
nRë
 -20; 
	`as£π
–20==
	`sqlôe3LogE°
(4) );

1190  
nRë
;

1191 
	}
}

1194 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


1198 
	$sqlôe3IndexCﬁumnAfföôy
(
sqlôe3
 *
db
, 
Index
 *
pIdx
, 
iCﬁ
){

1199 
	`as£π
–
iCﬁ
>=0 && iCﬁ<
pIdx
->
nCﬁumn
 );

1200 if–!
pIdx
->
zCﬁAff
 ){

1201 if–
	`sqlôe3IndexAfföôySå
(
db
, 
pIdx
)==0 )  
SQLITE_AFF_BLOB
;

1203  
pIdx
->
zCﬁAff
[
iCﬁ
];

1204 
	}
}

1208 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


1244 
	$whîeR™geSkùSˇnE°
(

1245 
P¨£
 *
pP¨£
,

1246 
WhîeTîm
 *
pLowî
,

1247 
WhîeTîm
 *
pUµî
,

1248 
WhîeLo›
 *
pLo›
,

1249 *
pbD⁄e


1251 
Index
 *
p
 = 
pLo›
->
u
.
båì
.
pIndex
;

1252 
nEq
 = 
pLo›
->
u
.
båì
.nEq;

1253 
sqlôe3
 *
db
 = 
pP¨£
->db;

1254 
nLowî
 = -1;

1255 
nUµî
 = 
p
->
nSam∂e
+1;

1256 
rc
 = 
SQLITE_OK
;

1257 
u8
 
aff
 = 
	`sqlôe3IndexCﬁumnAfföôy
(
db
, 
p
, 
nEq
);

1258 
CﬁlSeq
 *
pCﬁl
;

1260 
sqlôe3_vÆue
 *
p1
 = 0;

1261 
sqlôe3_vÆue
 *
p2
 = 0;

1262 
sqlôe3_vÆue
 *
pVÆ
 = 0;

1264 
pCﬁl
 = 
	`sqlôe3LoˇãCﬁlSeq
(
pP¨£
, 
p
->
azCﬁl
[
nEq
]);

1265 if–
pLowî
 ){

1266 
rc
 = 
	`sqlôe3Sèt4VÆueFromEx¥
(
pP¨£
, 
pLowî
->
pEx¥
->
pRight
, 
aff
, &
p1
);

1267 
nLowî
 = 0;

1269 if–
pUµî
 && 
rc
==
SQLITE_OK
 ){

1270 
rc
 = 
	`sqlôe3Sèt4VÆueFromEx¥
(
pP¨£
, 
pUµî
->
pEx¥
->
pRight
, 
aff
, &
p2
);

1271 
nUµî
 = 
p2
 ? 0 : 
p
->
nSam∂e
;

1274 if–
p1
 || 
p2
 ){

1275 
i
;

1276 
nDiff
;

1277 
i
=0; 
rc
==
SQLITE_OK
 && i<
p
->
nSam∂e
; i++){

1278 
rc
 = 
	`sqlôe3Sèt4Cﬁumn
(
db
, 
p
->
aSam∂e
[
i
].p,Ö->aSam∂e[i].
n
, 
nEq
, &
pVÆ
);

1279 if–
rc
==
SQLITE_OK
 && 
p1
 ){

1280 
ªs
 = 
	`sqlôe3MemCom∑ª
(
p1
, 
pVÆ
, 
pCﬁl
);

1281 if–
ªs
>=0 ) 
nLowî
++;

1283 if–
rc
==
SQLITE_OK
 && 
p2
 ){

1284 
ªs
 = 
	`sqlôe3MemCom∑ª
(
p2
, 
pVÆ
, 
pCﬁl
);

1285 if–
ªs
>=0 ) 
nUµî
++;

1288 
nDiff
 = (
nUµî
 - 
nLowî
);

1289 if–
nDiff
<=0 )ÇDiff = 1;

1296 if–
nDiff
!=1 || 
pUµî
==0 || 
pLowî
==0 ){

1297 
nAdju°
 = (
	`sqlôe3LogE°
(
p
->
nSam∂e
Ë- sqlôe3LogE°(
nDiff
));

1298 
pLo›
->
nOut
 -
nAdju°
;

1299 *
pbD⁄e
 = 1;

1300 
	`WHERETRACE
(0x10, ("range skip-scanÑegions: %u..%uádjust=%dÉst=%d\n",

1301 
nLowî
, 
nUµî
, 
nAdju°
*-1, 
pLo›
->
nOut
));

1305 
	`as£π
–*
pbD⁄e
==0 );

1308 
	`sqlôe3VÆueFªe
(
p1
);

1309 
	`sqlôe3VÆueFªe
(
p2
);

1310 
	`sqlôe3VÆueFªe
(
pVÆ
);

1312  
rc
;

1313 
	}
}

1356 
	$whîeR™geSˇnE°
(

1357 
P¨£
 *
pP¨£
,

1358 
WhîeLo›Buûdî
 *
pBuûdî
,

1359 
WhîeTîm
 *
pLowî
,

1360 
WhîeTîm
 *
pUµî
,

1361 
WhîeLo›
 *
pLo›


1363 
rc
 = 
SQLITE_OK
;

1364 
nOut
 = 
pLo›
->nOut;

1365 
LogE°
 
nNew
;

1367 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


1368 
Index
 *
p
 = 
pLo›
->
u
.
båì
.
pIndex
;

1369 
nEq
 = 
pLo›
->
u
.
båì
.nEq;

1371 if–
p
->
nSam∂e
>0 && 
nEq
<p->
nSam∂eCﬁ
 ){

1372 if–
nEq
==
pBuûdî
->
nRecVÆid
 ){

1373 
U≈ackedRec‹d
 *
pRec
 = 
pBuûdî
->pRec;

1374 
tRow˙t
 
a
[2];

1375 
u8
 
aff
;

1396 
tRow˙t
 
iLowî
;

1397 
tRow˙t
 
iUµî
;

1398 
iLwrIdx
 = -2;

1399 
iU¥Idx
 = -1;

1401 if–
pRec
 ){

1402 
	`ã°ˇ£
–
pRec
->
nFõld
!=
pBuûdî
->
nRecVÆid
 );

1403 
pRec
->
nFõld
 = 
pBuûdî
->
nRecVÆid
;

1405 
aff
 = 
	`sqlôe3IndexCﬁumnAfföôy
(
pP¨£
->
db
, 
p
, 
nEq
);

1406 
	`as£π
–
nEq
!=
p
->
nKeyCﬁ
 || 
aff
==
SQLITE_AFF_INTEGER
 );

1408 if–
nEq
==0 ){

1409 
iLowî
 = 0;

1410 
iUµî
 = 
p
->
nRowE°0
;

1414 
	`whîeKeySèts
(
pP¨£
, 
p
, 
pRec
, 0, 
a
);

1415 
iLowî
 = 
a
[0];

1416 
iUµî
 = 
a
[0] +á[1];

1419 
	`as£π
–
pLowî
==0 || (pLowî->
eO≥øt‹
 & (
WO_GT
|
WO_GE
))!=0 );

1420 
	`as£π
–
pUµî
==0 || (pUµî->
eO≥øt‹
 & (
WO_LT
|
WO_LE
))!=0 );

1421 
	`as£π
–
p
->
aS‹tOrdî
!=0 );

1422 if–
p
->
aS‹tOrdî
[
nEq
] ){

1424 
	`SWAP
(
WhîeTîm
*, 
pLowî
, 
pUµî
);

1428 if–
pLowî
 ){

1429 
bOk
;

1430 
Ex¥
 *
pEx¥
 = 
pLowî
->pEx¥->
pRight
;

1431 
rc
 = 
	`sqlôe3Sèt4ProbeSëVÆue
(
pP¨£
, 
p
, &
pRec
, 
pEx¥
, 
aff
, 
nEq
, &
bOk
);

1432 if–
rc
==
SQLITE_OK
 && 
bOk
 ){

1433 
tRow˙t
 
iNew
;

1434 
iLwrIdx
 = 
	`whîeKeySèts
(
pP¨£
, 
p
, 
pRec
, 0, 
a
);

1435 
iNew
 = 
a
[0] + ((
pLowî
->
eO≥øt‹
 & (
WO_GT
|
WO_LE
)) ?á[1] : 0);

1436 if–
iNew
>
iLowî
 ) iLower = iNew;

1437 
nOut
--;

1438 
pLowî
 = 0;

1443 if–
pUµî
 ){

1444 
bOk
;

1445 
Ex¥
 *
pEx¥
 = 
pUµî
->pEx¥->
pRight
;

1446 
rc
 = 
	`sqlôe3Sèt4ProbeSëVÆue
(
pP¨£
, 
p
, &
pRec
, 
pEx¥
, 
aff
, 
nEq
, &
bOk
);

1447 if–
rc
==
SQLITE_OK
 && 
bOk
 ){

1448 
tRow˙t
 
iNew
;

1449 
iU¥Idx
 = 
	`whîeKeySèts
(
pP¨£
, 
p
, 
pRec
, 1, 
a
);

1450 
iNew
 = 
a
[0] + ((
pUµî
->
eO≥øt‹
 & (
WO_GT
|
WO_LE
)) ?á[1] : 0);

1451 if–
iNew
<
iUµî
 ) iUpper = iNew;

1452 
nOut
--;

1453 
pUµî
 = 0;

1457 
pBuûdî
->
pRec
 =ÖRec;

1458 if–
rc
==
SQLITE_OK
 ){

1459 if–
iUµî
>
iLowî
 ){

1460 
nNew
 = 
	`sqlôe3LogE°
(
iUµî
 - 
iLowî
);

1465 if–
iLwrIdx
==
iU¥Idx
 ) 
nNew
 -20; 
	`as£π
–20==
	`sqlôe3LogE°
(4) );

1467 
nNew
 = 10; 
	`as£π
–10==
	`sqlôe3LogE°
(2) );

1469 if–
nNew
<
nOut
 ){

1470 
nOut
 = 
nNew
;

1472 
	`WHERETRACE
(0x10, ("STAT4Ñange scan: %u..%uÉst=%d\n",

1473 (
u32
)
iLowî
, (u32)
iUµî
, 
nOut
));

1476 
bD⁄e
 = 0;

1477 
rc
 = 
	`whîeR™geSkùSˇnE°
(
pP¨£
, 
pLowî
, 
pUµî
, 
pLo›
, &
bD⁄e
);

1478 if–
bD⁄e
 )  
rc
;

1482 
	`UNUSED_PARAMETER
(
pP¨£
);

1483 
	`UNUSED_PARAMETER
(
pBuûdî
);

1484 
	`as£π
–
pLowî
 || 
pUµî
 );

1486 
	`as£π
–
pUµî
==0 || (pUµî->
wtFœgs
 & 
TERM_VNULL
)==0 );

1487 
nNew
 = 
	`whîeR™geAdju°
(
pLowî
, 
nOut
);

1488 
nNew
 = 
	`whîeR™geAdju°
(
pUµî
,ÇNew);

1496 if–
pLowî
 &&ÖLowî->
åuthProb
>0 && 
pUµî
 &&ÖUpper->truthProb>0 ){

1497 
nNew
 -= 20;

1500 
nOut
 -(
pLowî
!=0Ë+ (
pUµî
!=0);

1501 if–
nNew
<10 )ÇNew = 10;

1502 if–
nNew
<
nOut
 )ÇOut =ÇNew;

1503 #i‡
	`deföed
(
WHERETRACE_ENABLED
)

1504 if–
pLo›
->
nOut
>nOut ){

1505 
	`WHERETRACE
(0x10,("Range scanÜowersÇOut from %dÅo %d\n",

1506 
pLo›
->
nOut
,ÇOut));

1509 
pLo›
->
nOut
 = (
LogE°
)nOut;

1510  
rc
;

1511 
	}
}

1513 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


1531 
	$whîeEquÆSˇnE°
(

1532 
P¨£
 *
pP¨£
,

1533 
WhîeLo›Buûdî
 *
pBuûdî
,

1534 
Ex¥
 *
pEx¥
,

1535 
tRow˙t
 *
≤Row


1537 
Index
 *
p
 = 
pBuûdî
->
pNew
->
u
.
båì
.
pIndex
;

1538 
nEq
 = 
pBuûdî
->
pNew
->
u
.
båì
.nEq;

1539 
U≈ackedRec‹d
 *
pRec
 = 
pBuûdî
->pRec;

1540 
u8
 
aff
;

1541 
rc
;

1542 
tRow˙t
 
a
[2];

1543 
bOk
;

1545 
	`as£π
–
nEq
>=1 );

1546 
	`as£π
–
nEq
<=
p
->
nCﬁumn
 );

1547 
	`as£π
–
p
->
aSam∂e
!=0 );

1548 
	`as£π
–
p
->
nSam∂e
>0 );

1549 
	`as£π
–
pBuûdî
->
nRecVÆid
<
nEq
 );

1553 if–
pBuûdî
->
nRecVÆid
<(
nEq
-1) ){

1554  
SQLITE_NOTFOUND
;

1559 if–
nEq
>=
p
->
nCﬁumn
 ){

1560 *
≤Row
 = 1;

1561  
SQLITE_OK
;

1564 
aff
 = 
	`sqlôe3IndexCﬁumnAfföôy
(
pP¨£
->
db
, 
p
, 
nEq
-1);

1565 
rc
 = 
	`sqlôe3Sèt4ProbeSëVÆue
(
pP¨£
, 
p
, &
pRec
, 
pEx¥
, 
aff
, 
nEq
-1, &
bOk
);

1566 
pBuûdî
->
pRec
 =ÖRec;

1567 if–
rc
!=
SQLITE_OK
 ) Ñc;

1568 if–
bOk
==0 )  
SQLITE_NOTFOUND
;

1569 
pBuûdî
->
nRecVÆid
 = 
nEq
;

1571 
	`whîeKeySèts
(
pP¨£
, 
p
, 
pRec
, 0, 
a
);

1572 
	`WHERETRACE
(0x10,("equality scanÑegions %s(%d): %d\n",

1573 
p
->
zName
, 
nEq
-1, ()
a
[1]));

1574 *
≤Row
 = 
a
[1];

1576  
rc
;

1577 
	}
}

1580 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


1597 
	$whîeInSˇnE°
(

1598 
P¨£
 *
pP¨£
,

1599 
WhîeLo›Buûdî
 *
pBuûdî
,

1600 
Ex¥Li°
 *
pLi°
,

1601 
tRow˙t
 *
≤Row


1603 
Index
 *
p
 = 
pBuûdî
->
pNew
->
u
.
båì
.
pIndex
;

1604 
i64
 
nRow0
 = 
	`sqlôe3LogE°ToI¡
(
p
->
aiRowLogE°
[0]);

1605 
nRecVÆid
 = 
pBuûdî
->nRecValid;

1606 
rc
 = 
SQLITE_OK
;

1607 
tRow˙t
 
nE°
;

1608 
tRow˙t
 
nRowE°
 = 0;

1609 
i
;

1611 
	`as£π
–
p
->
aSam∂e
!=0 );

1612 
i
=0; 
rc
==
SQLITE_OK
 && i<
pLi°
->
nEx¥
; i++){

1613 
nE°
 = 
nRow0
;

1614 
rc
 = 
	`whîeEquÆSˇnE°
(
pP¨£
, 
pBuûdî
, 
pLi°
->
a
[
i
].
pEx¥
, &
nE°
);

1615 
nRowE°
 +
nE°
;

1616 
pBuûdî
->
nRecVÆid
 =ÇRecValid;

1619 if–
rc
==
SQLITE_OK
 ){

1620 if–
nRowE°
 > 
nRow0
 )ÇRowEst =ÇRow0;

1621 *
≤Row
 = 
nRowE°
;

1622 
	`WHERETRACE
(0x10,("INÑowÉ°im©e:É°=%d\n", 
nRowE°
));

1624 
	`as£π
–
pBuûdî
->
nRecVÆid
==nRecValid );

1625  
rc
;

1626 
	}
}

1630 #ifde‡
WHERETRACE_ENABLED


1634 
	$whîeTîmPröt
(
WhîeTîm
 *
pTîm
, 
iTîm
){

1635 if–
pTîm
==0 ){

1636 
	`sqlôe3DebugPrötf
("TERM-%-3d NULL\n", 
iTîm
);

1638 
zTy≥
[4];

1639 
	`mem˝y
(
zTy≥
, "...", 4);

1640 if–
pTîm
->
wtFœgs
 & 
TERM_VIRTUAL
 ) 
zTy≥
[0] = 'V';

1641 if–
pTîm
->
eO≥øt‹
 & 
WO_EQUIV
 ) 
zTy≥
[1] = 'E';

1642 if–
	`Ex¥HasPr›îty
(
pTîm
->
pEx¥
, 
EP_FromJoö
ËË
zTy≥
[2] = 'L';

1643 
	`sqlôe3DebugPrötf
(

1645 
iTîm
, 
pTîm
, 
zTy≥
,ÖTîm->
À·Curs‹
,ÖTîm->
åuthProb
,

1646 
pTîm
->
eO≥øt‹
,ÖTîm->
wtFœgs
);

1647 
	`sqlôe3TªeVõwEx¥
(0, 
pTîm
->
pEx¥
, 0);

1649 
	}
}

1652 #ifde‡
WHERETRACE_ENABLED


1656 
	$whîeLo›Pröt
(
WhîeLo›
 *
p
, 
WhîeCœu£
 *
pWC
){

1657 
WhîeInfo
 *
pWInfo
 = 
pWC
->pWInfo;

1658 
nb
 = 1+(
pWInfo
->
pTabLi°
->
nSrc
+3)/4;

1659 
SrcLi°_ôem
 *
pIãm
 = 
pWInfo
->
pTabLi°
->
a
 + 
p
->
iTab
;

1660 
TabÀ
 *
pTab
 = 
pIãm
->pTab;

1661 
Bômask
 
mAŒ
 = (((Bômask)1)<<(
nb
*4)) - 1;

1662 
	`sqlôe3DebugPrötf
("%c%2d.%0*Œx.%0*Œx", 
p
->
cId
,

1663 
p
->
iTab
, 
nb
,Ö->
maskSñf
,Çb,Ö->
¥îeq
 & 
mAŒ
);

1664 
	`sqlôe3DebugPrötf
(" %12s",

1665 
pIãm
->
zAlüs
 ?ÖIãm->zAlü†: 
pTab
->
zName
);

1666 if–(
p
->
wsFœgs
 & 
WHERE_VIRTUALTABLE
)==0 ){

1667 c⁄° *
zName
;

1668 if–
p
->
u
.
båì
.
pIndex
 && (
zName
 =Ö->u.btree.pIndex->zName)!=0 ){

1669 if–
	`°∫cmp
(
zName
, "sqlite_autoindex_", 17)==0 ){

1670 
i
 = 
	`sqlôe3SåÀn30
(
zName
) - 1;

1671  
zName
[
i
]!='_' ) i--;

1672 
zName
 +
i
;

1674 
	`sqlôe3DebugPrötf
(".%-16†%2d", 
zName
, 
p
->
u
.
båì
.
nEq
);

1676 
	`sqlôe3DebugPrötf
("%20s","");

1679 *
z
;

1680 if–
p
->
u
.
vèb
.
idxSå
 ){

1681 
z
 = 
	`sqlôe3_m¥ötf
("(%d,\"%s\",%x)",

1682 
p
->
u
.
vèb
.
idxNum
,Ö->u.vèb.
idxSå
,Ö->u.vèb.
omôMask
);

1684 
z
 = 
	`sqlôe3_m¥ötf
("(%d,%x)", 
p
->
u
.
vèb
.
idxNum
,Ö->u.vèb.
omôMask
);

1686 
	`sqlôe3DebugPrötf
(" %-19s", 
z
);

1687 
	`sqlôe3_‰ì
(
z
);

1689 if–
p
->
wsFœgs
 & 
WHERE_SKIPSCAN
 ){

1690 
	`sqlôe3DebugPrötf
(" f %05x %d-%d", 
p
->
wsFœgs
,Ö->
nLTîm
,p->
nSkù
);

1692 
	`sqlôe3DebugPrötf
(" f %05x N %d", 
p
->
wsFœgs
,Ö->
nLTîm
);

1694 
	`sqlôe3DebugPrötf
(" co° %d,%d,%d\n", 
p
->
rSëup
,Ö->
rRun
,Ö->
nOut
);

1695 if–
p
->
nLTîm
 && (
sqlôe3WhîeTø˚
 & 0x100)!=0 ){

1696 
i
;

1697 
i
=0; i<
p
->
nLTîm
; i++){

1698 
	`whîeTîmPröt
(
p
->
aLTîm
[
i
], i);

1701 
	}
}

1708 
	$whîeLo›Inô
(
WhîeLo›
 *
p
){

1709 
p
->
aLTîm
 =Ö->
aLTîmS∑˚
;

1710 
p
->
nLTîm
 = 0;

1711 
p
->
nLSlŸ
 = 
	`AºaySize
’->
aLTîmS∑˚
);

1712 
p
->
wsFœgs
 = 0;

1713 
	}
}

1718 
	$whîeLo›CÀ¨Uni⁄
(
sqlôe3
 *
db
, 
WhîeLo›
 *
p
){

1719 if–
p
->
wsFœgs
 & (
WHERE_VIRTUALTABLE
|
WHERE_AUTO_INDEX
) ){

1720 if–(
p
->
wsFœgs
 & 
WHERE_VIRTUALTABLE
)!=0 &&Ö->
u
.
vèb
.
√edFªe
 ){

1721 
	`sqlôe3_‰ì
(
p
->
u
.
vèb
.
idxSå
);

1722 
p
->
u
.
vèb
.
√edFªe
 = 0;

1723 
p
->
u
.
vèb
.
idxSå
 = 0;

1724 }if–(
p
->
wsFœgs
 & 
WHERE_AUTO_INDEX
)!=0 &&Ö->
u
.
båì
.
pIndex
!=0 ){

1725 
	`sqlôe3DbFªe
(
db
, 
p
->
u
.
båì
.
pIndex
->
zCﬁAff
);

1726 
	`sqlôe3DbFªe
(
db
, 
p
->
u
.
båì
.
pIndex
);

1727 
p
->
u
.
båì
.
pIndex
 = 0;

1730 
	}
}

1735 
	$whîeLo›CÀ¨
(
sqlôe3
 *
db
, 
WhîeLo›
 *
p
){

1736 if–
p
->
aLTîm
!ı->
aLTîmS∑˚
 ) 
	`sqlôe3DbFªe
(
db
,Ö->aLTerm);

1737 
	`whîeLo›CÀ¨Uni⁄
(
db
, 
p
);

1738 
	`whîeLo›Inô
(
p
);

1739 
	}
}

1744 
	$whîeLo›Resize
(
sqlôe3
 *
db
, 
WhîeLo›
 *
p
, 
n
){

1745 
WhîeTîm
 **
∑New
;

1746 if–
p
->
nLSlŸ
>=
n
 )  
SQLITE_OK
;

1747 
n
 = (n+7)&~7;

1748 
∑New
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, (
p
->
aLTîm
[0])*
n
);

1749 if–
∑New
==0 )  
SQLITE_NOMEM_BKPT
;

1750 
	`mem˝y
(
∑New
, 
p
->
aLTîm
, ’->aLTîm[0])*p->
nLSlŸ
);

1751 if–
p
->
aLTîm
!ı->
aLTîmS∑˚
 ) 
	`sqlôe3DbFªe
(
db
,Ö->aLTerm);

1752 
p
->
aLTîm
 = 
∑New
;

1753 
p
->
nLSlŸ
 = 
n
;

1754  
SQLITE_OK
;

1755 
	}
}

1760 
	$whîeLo›X„r
(
sqlôe3
 *
db
, 
WhîeLo›
 *
pTo
, WhîeLo› *
pFrom
){

1761 
	`whîeLo›CÀ¨Uni⁄
(
db
, 
pTo
);

1762 if–
	`whîeLo›Resize
(
db
, 
pTo
, 
pFrom
->
nLTîm
) ){

1763 
	`mem£t
(&
pTo
->
u
, 0, (pTo->u));

1764  
SQLITE_NOMEM_BKPT
;

1766 
	`mem˝y
(
pTo
, 
pFrom
, 
WHERE_LOOP_XFER_SZ
);

1767 
	`mem˝y
(
pTo
->
aLTîm
, 
pFrom
->aLTîm,ÖTo->
nLTîm
*(pTo->aLTerm[0]));

1768 if–
pFrom
->
wsFœgs
 & 
WHERE_VIRTUALTABLE
 ){

1769 
pFrom
->
u
.
vèb
.
√edFªe
 = 0;

1770 }if–(
pFrom
->
wsFœgs
 & 
WHERE_AUTO_INDEX
)!=0 ){

1771 
pFrom
->
u
.
båì
.
pIndex
 = 0;

1773  
SQLITE_OK
;

1774 
	}
}

1779 
	$whîeLo›Dñëe
(
sqlôe3
 *
db
, 
WhîeLo›
 *
p
){

1780 
	`whîeLo›CÀ¨
(
db
, 
p
);

1781 
	`sqlôe3DbFªe
(
db
, 
p
);

1782 
	}
}

1787 
	$whîeInfoFªe
(
sqlôe3
 *
db
, 
WhîeInfo
 *
pWInfo
){

1788 if–
	`ALWAYS
(
pWInfo
) ){

1789 
i
;

1790 
i
=0; i<
pWInfo
->
nLevñ
; i++){

1791 
WhîeLevñ
 *
pLevñ
 = &
pWInfo
->
a
[
i
];

1792 if–
pLevñ
->
pWLo›
 && (pLevñ->pWLo›->
wsFœgs
 & 
WHERE_IN_ABLE
) ){

1793 
	`sqlôe3DbFªe
(
db
, 
pLevñ
->
u
.
ö
.
aInLo›
);

1796 
	`sqlôe3WhîeCœu£CÀ¨
(&
pWInfo
->
sWC
);

1797  
pWInfo
->
pLo›s
 ){

1798 
WhîeLo›
 *
p
 = 
pWInfo
->
pLo›s
;

1799 
pWInfo
->
pLo›s
 = 
p
->
pNextLo›
;

1800 
	`whîeLo›Dñëe
(
db
, 
p
);

1802 
	`sqlôe3DbFªe
(
db
, 
pWInfo
);

1804 
	}
}

1823 
	$whîeLo›Chó≥rPr›îSub£t
(

1824 c⁄° 
WhîeLo›
 *
pX
,

1825 c⁄° 
WhîeLo›
 *
pY


1827 
i
, 
j
;

1828 if–
pX
->
nLTîm
-pX->
nSkù
 >
pY
->nLTerm-pY->nSkip ){

1831 if–
pY
->
nSkù
 > 
pX
->nSkip )  0;

1832 if–
pX
->
rRun
 >
pY
->rRun ){

1833 if–
pX
->
rRun
 > 
pY
->rRun )  0;

1834 if–
pX
->
nOut
 > 
pY
->nOut )  0;

1836 
i
=
pX
->
nLTîm
-1; i>=0; i--){

1837 if–
pX
->
aLTîm
[
i
]==0 ) ;

1838 
j
=
pY
->
nLTîm
-1; j>=0; j--){

1839 if–
pY
->
aLTîm
[
j
]==
pX
->aLTîm[
i
] ) ;

1841 if–
j
<0 )  0;

1844 
	}
}

1860 
	$whîeLo›Adju°Co°
(c⁄° 
WhîeLo›
 *
p
, WhîeLo› *
pTem∂©e
){

1861 if–(
pTem∂©e
->
wsFœgs
 & 
WHERE_INDEXED
)==0 ) ;

1862 ; 
p
;Öı->
pNextLo›
){

1863 if–
p
->
iTab
!=
pTem∂©e
->iTab ) ;

1864 if–(
p
->
wsFœgs
 & 
WHERE_INDEXED
)==0 ) ;

1865 if–
	`whîeLo›Chó≥rPr›îSub£t
(
p
, 
pTem∂©e
) ){

1868 
	`WHERETRACE
(0x80,("subset costádjustment %d,%dÅo %d,%d\n",

1869 
pTem∂©e
->
rRun
,ÖTem∂©e->
nOut
, 
p
->rRun,Ö->nOut-1));

1870 
pTem∂©e
->
rRun
 = 
p
->rRun;

1871 
pTem∂©e
->
nOut
 = 
p
->nOut - 1;

1872 }if–
	`whîeLo›Chó≥rPr›îSub£t
(
pTem∂©e
, 
p
) ){

1875 
	`WHERETRACE
(0x80,("subset costádjustment %d,%dÅo %d,%d\n",

1876 
pTem∂©e
->
rRun
,ÖTem∂©e->
nOut
, 
p
->rRun,Ö->nOut+1));

1877 
pTem∂©e
->
rRun
 = 
p
->rRun;

1878 
pTem∂©e
->
nOut
 = 
p
->nOut + 1;

1881 
	}
}

1896 
WhîeLo›
 **
	$whîeLo›FödLes£r
(

1897 
WhîeLo›
 **
µPªv
,

1898 c⁄° 
WhîeLo›
 *
pTem∂©e


1900 
WhîeLo›
 *
p
;

1901 
p
=(*
µPªv
);Ö;ÖpPªv=&p->
pNextLo›
,Ö=*ppPrev){

1902 if–
p
->
iTab
!=
pTem∂©e
->iTab ||Ö->
iS‹tIdx
!=pTemplate->iSortIdx ){

1911 
	`as£π
–
p
->
rSëup
==0 || 
pTem∂©e
->rSetup==0

1912 || 
p
->
rSëup
==
pTem∂©e
->rSetup );

1917 
	`as£π
–
p
->
rSëup
>=
pTem∂©e
->rSetup );

1922 if–(
p
->
wsFœgs
 & 
WHERE_AUTO_INDEX
)!=0

1923 && (
pTem∂©e
->
nSkù
)==0

1924 && (
pTem∂©e
->
wsFœgs
 & 
WHERE_INDEXED
)!=0

1925 && (
pTem∂©e
->
wsFœgs
 & 
WHERE_COLUMN_EQ
)!=0

1926 && (
p
->
¥îeq
 & 
pTem∂©e
->prereq)==pTemplate->prereq

1936 if–(
p
->
¥îeq
 & 
pTem∂©e
->prereq)==p->prereq

1937 && 
p
->
rSëup
<=
pTem∂©e
->rSetup

1938 && 
p
->
rRun
<=
pTem∂©e
->rRun

1939 && 
p
->
nOut
<=
pTem∂©e
->nOut

1949 if–(
p
->
¥îeq
 & 
pTem∂©e
->prereq)==pTemplate->prereq

1950 && 
p
->
rRun
>=
pTem∂©e
->rRun

1951 && 
p
->
nOut
>=
pTem∂©e
->nOut

1953 
	`as£π
–
p
->
rSëup
>=
pTem∂©e
->rSetup );

1957  
µPªv
;

1958 
	}
}

1984 
	$whîeLo›In£π
(
WhîeLo›Buûdî
 *
pBuûdî
, 
WhîeLo›
 *
pTem∂©e
){

1985 
WhîeLo›
 **
µPªv
, *
p
;

1986 
WhîeInfo
 *
pWInfo
 = 
pBuûdî
->pWInfo;

1987 
sqlôe3
 *
db
 = 
pWInfo
->
pP¨£
->db;

1988 
rc
;

1993 if–
pBuûdî
->
pOrSë
!=0 ){

1994 if–
pTem∂©e
->
nLTîm
 ){

1995 #i‡
WHERETRACE_ENABLED


1996 
u16
 
n
 = 
pBuûdî
->
pOrSë
->n;

1997 
x
 =

1999 
	`whîeOrIn£π
(
pBuûdî
->
pOrSë
, 
pTem∂©e
->
¥îeq
,ÖTem∂©e->
rRun
,

2000 
pTem∂©e
->
nOut
);

2001 #i‡
WHERETRACE_ENABLED


2002 if–
sqlôe3WhîeTø˚
 & 0x8 ){

2003 
	`sqlôe3DebugPrötf
(
x
?" or-%d: ":" or-X: ", 
n
);

2004 
	`whîeLo›Pröt
(
pTem∂©e
, 
pBuûdî
->
pWC
);

2008  
SQLITE_OK
;

2013 
	`whîeLo›Adju°Co°
(
pWInfo
->
pLo›s
, 
pTem∂©e
);

2014 
µPªv
 = 
	`whîeLo›FödLes£r
(&
pWInfo
->
pLo›s
, 
pTem∂©e
);

2016 if–
µPªv
==0 ){

2019 #i‡
WHERETRACE_ENABLED


2020 if–
sqlôe3WhîeTø˚
 & 0x8 ){

2021 
	`sqlôe3DebugPrötf
(" skip: ");

2022 
	`whîeLo›Pröt
(
pTem∂©e
, 
pBuûdî
->
pWC
);

2025  
SQLITE_OK
;

2027 
p
 = *
µPªv
;

2034 #i‡
WHERETRACE_ENABLED


2035 if–
sqlôe3WhîeTø˚
 & 0x8 ){

2036 if–
p
!=0 ){

2037 
	`sqlôe3DebugPrötf
("replace: ");

2038 
	`whîeLo›Pröt
(
p
, 
pBuûdî
->
pWC
);

2040 
	`sqlôe3DebugPrötf
("ádd: ");

2041 
	`whîeLo›Pröt
(
pTem∂©e
, 
pBuûdî
->
pWC
);

2044 if–
p
==0 ){

2046 *
µPªv
 = 
p
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, (
WhîeLo›
));

2047 if–
p
==0 )  
SQLITE_NOMEM_BKPT
;

2048 
	`whîeLo›Inô
(
p
);

2049 
p
->
pNextLo›
 = 0;

2054 
WhîeLo›
 **
µTaû
 = &
p
->
pNextLo›
;

2055 
WhîeLo›
 *
pToDñ
;

2056  *
µTaû
 ){

2057 
µTaû
 = 
	`whîeLo›FödLes£r
’pTaû, 
pTem∂©e
);

2058 if–
µTaû
==0 ) ;

2059 
pToDñ
 = *
µTaû
;

2060 if–
pToDñ
==0 ) ;

2061 *
µTaû
 = 
pToDñ
->
pNextLo›
;

2062 #i‡
WHERETRACE_ENABLED


2063 if–
sqlôe3WhîeTø˚
 & 0x8 ){

2064 
	`sqlôe3DebugPrötf
(" delete: ");

2065 
	`whîeLo›Pröt
(
pToDñ
, 
pBuûdî
->
pWC
);

2068 
	`whîeLo›Dñëe
(
db
, 
pToDñ
);

2071 
rc
 = 
	`whîeLo›X„r
(
db
, 
p
, 
pTem∂©e
);

2072 if–(
p
->
wsFœgs
 & 
WHERE_VIRTUALTABLE
)==0 ){

2073 
Index
 *
pIndex
 = 
p
->
u
.
båì
.pIndex;

2074 if–
pIndex
 &&ÖIndex->
äum
==0 ){

2075 
p
->
u
.
båì
.
pIndex
 = 0;

2078  
rc
;

2079 
	}
}

2110 
	$whîeLo›OuçutAdju°
(

2111 
WhîeCœu£
 *
pWC
,

2112 
WhîeLo›
 *
pLo›
,

2113 
LogE°
 
nRow


2115 
WhîeTîm
 *
pTîm
, *
pX
;

2116 
Bômask
 
nŸAŒowed
 = ~(
pLo›
->
¥îeq
|pLo›->
maskSñf
);

2117 
i
, 
j
, 
k
;

2118 
LogE°
 
iRedu˚
 = 0;

2120 
	`as£π
–(
pLo›
->
wsFœgs
 & 
WHERE_AUTO_INDEX
)==0 );

2121 
i
=
pWC
->
nTîm
, 
pTîm
ıWC->
a
; i>0; i--,ÖTerm++){

2122 if–(
pTîm
->
wtFœgs
 & 
TERM_VIRTUAL
)!=0 ) ;

2123 if–(
pTîm
->
¥îeqAŒ
 & 
pLo›
->
maskSñf
)==0 ) ;

2124 if–(
pTîm
->
¥îeqAŒ
 & 
nŸAŒowed
)!=0 ) ;

2125 
j
=
pLo›
->
nLTîm
-1; j>=0; j--){

2126 
pX
 = 
pLo›
->
aLTîm
[
j
];

2127 if–
pX
==0 ) ;

2128 if–
pX
==
pTîm
 ) ;

2129 if–
pX
->
iP¨ít
>=0 && (&
pWC
->
a
[pX->iP¨ít])==
pTîm
 ) ;

2131 if–
j
<0 ){

2132 if–
pTîm
->
åuthProb
<=0 ){

2135 
pLo›
->
nOut
 +
pTîm
->
åuthProb
;

2139 
pLo›
->
nOut
--;

2140 if–
pTîm
->
eO≥øt‹
&(
WO_EQ
|
WO_IS
) ){

2141 
Ex¥
 *
pRight
 = 
pTîm
->
pEx¥
->pRight;

2142 
	`ã°ˇ£
–
pTîm
->
pEx¥
->
›
==
TK_IS
 );

2143 if–
	`sqlôe3Ex¥IsI¡egî
(
pRight
, &
k
) && k>=(-1) && k<=1 ){

2144 
k
 = 10;

2146 
k
 = 20;

2148 if–
iRedu˚
<
k
 ) iReduce = k;

2153 if–
pLo›
->
nOut
 > 
nRow
-
iRedu˚
 )ÖLoop->nOut =ÇRow - iReduce;

2154 
	}
}

2160 #ifde‡
SQLITE_ENABLE_COSTMULT


2161 
	#AµlyCo°Mu…ùlõr
(
C
,
T
ËC +
	)
T

2163 
	#AµlyCo°Mu…ùlõr
(
C
,
T
)

	)

2178 
	$whîeLo›AddBåìIndex
(

2179 
WhîeLo›Buûdî
 *
pBuûdî
,

2180 
SrcLi°_ôem
 *
pSrc
,

2181 
Index
 *
pProbe
,

2182 
LogE°
 
nInMul


2184 
WhîeInfo
 *
pWInfo
 = 
pBuûdî
->pWInfo;

2185 
P¨£
 *
pP¨£
 = 
pWInfo
->pParse;

2186 
sqlôe3
 *
db
 = 
pP¨£
->db;

2187 
WhîeLo›
 *
pNew
;

2188 
WhîeTîm
 *
pTîm
;

2189 
›Mask
;

2190 
WhîeSˇn
 
sˇn
;

2191 
Bômask
 
ßved_¥îeq
;

2192 
u16
 
ßved_nLTîm
;

2193 
u16
 
ßved_nEq
;

2194 
u16
 
ßved_nSkù
;

2195 
u32
 
ßved_wsFœgs
;

2196 
LogE°
 
ßved_nOut
;

2197 
rc
 = 
SQLITE_OK
;

2198 
LogE°
 
rSize
;

2199 
LogE°
 
rLogSize
;

2200 
WhîeTîm
 *
pT›
 = 0, *
pBtm
 = 0;

2202 
pNew
 = 
pBuûdî
->pNew;

2203 if–
db
->
mÆlocFaûed
 )  
SQLITE_NOMEM_BKPT
;

2205 
	`as£π
–(
pNew
->
wsFœgs
 & 
WHERE_VIRTUALTABLE
)==0 );

2206 
	`as£π
–(
pNew
->
wsFœgs
 & 
WHERE_TOP_LIMIT
)==0 );

2207 if–
pNew
->
wsFœgs
 & 
WHERE_BTM_LIMIT
 ){

2208 
›Mask
 = 
WO_LT
|
WO_LE
;

2210 
›Mask
 = 
WO_EQ
|
WO_IN
|
WO_GT
|
WO_GE
|
WO_LT
|
WO_LE
|
WO_ISNULL
|
WO_IS
;

2212 if–
pProbe
->
bUn‹dîed
 ) 
›Mask
 &~(
WO_GT
|
WO_GE
|
WO_LT
|
WO_LE
);

2214 
	`as£π
–
pNew
->
u
.
båì
.
nEq
<
pProbe
->
nCﬁumn
 );

2216 
ßved_nEq
 = 
pNew
->
u
.
båì
.
nEq
;

2217 
ßved_nSkù
 = 
pNew
->
nSkù
;

2218 
ßved_nLTîm
 = 
pNew
->
nLTîm
;

2219 
ßved_wsFœgs
 = 
pNew
->
wsFœgs
;

2220 
ßved_¥îeq
 = 
pNew
->
¥îeq
;

2221 
ßved_nOut
 = 
pNew
->
nOut
;

2222 
pTîm
 = 
	`whîeSˇnInô
(&
sˇn
, 
pBuûdî
->
pWC
, 
pSrc
->
iCurs‹
, 
ßved_nEq
,

2223 
›Mask
, 
pProbe
);

2224 
pNew
->
rSëup
 = 0;

2225 
rSize
 = 
pProbe
->
aiRowLogE°
[0];

2226 
rLogSize
 = 
	`e°Log
(
rSize
);

2227 ; 
rc
==
SQLITE_OK
 && 
pTîm
!=0;ÖTîm = 
	`whîeSˇnNext
(&
sˇn
)){

2228 
u16
 
eOp
 = 
pTîm
->
eO≥øt‹
;

2229 
LogE°
 
rCo°Idx
;

2230 
LogE°
 
nOutU«dju°ed
;

2231 
nIn
 = 0;

2232 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


2233 
nRecVÆid
 = 
pBuûdî
->nRecValid;

2235 if–(
eOp
==
WO_ISNULL
 || (
pTîm
->
wtFœgs
&
TERM_VNULL
)!=0)

2236 && 
	`ödexCﬁumnNŸNuŒ
(
pProbe
, 
ßved_nEq
)

2240 if–
pTîm
->
¥îeqRight
 & 
pNew
->
maskSñf
 ) ;

2244 if–
pTîm
->
wtFœgs
 & 
TERM_LIKEOPT
 &&ÖTîm->
eO≥øt‹
==
WO_LT
 ) ;

2249 if–(
pSrc
->
fg
.
joöty≥
 & 
JT_LEFT
)!=0

2250 && !
	`Ex¥HasPr›îty
(
pTîm
->
pEx¥
, 
EP_FromJoö
)

2251 && (
eOp
 & (
WO_IS
|
WO_ISNULL
))!=0

2253 
	`ã°ˇ£
–
eOp
 & 
WO_IS
 );

2254 
	`ã°ˇ£
–
eOp
 & 
WO_ISNULL
 );

2258 
pNew
->
wsFœgs
 = 
ßved_wsFœgs
;

2259 
pNew
->
u
.
båì
.
nEq
 = 
ßved_nEq
;

2260 
pNew
->
nLTîm
 = 
ßved_nLTîm
;

2261 if–
	`whîeLo›Resize
(
db
, 
pNew
,ÖNew->
nLTîm
+1) ) ;

2262 
pNew
->
aLTîm
[pNew->
nLTîm
++] = 
pTîm
;

2263 
pNew
->
¥îeq
 = (
ßved_¥îeq
 | 
pTîm
->
¥îeqRight
Ë& ~pNew->
maskSñf
;

2265 
	`as£π
–
nInMul
==0

2266 || (
pNew
->
wsFœgs
 & 
WHERE_COLUMN_NULL
)!=0

2267 || (
pNew
->
wsFœgs
 & 
WHERE_COLUMN_IN
)!=0

2268 || (
pNew
->
wsFœgs
 & 
WHERE_SKIPSCAN
)!=0

2271 if–
eOp
 & 
WO_IN
 ){

2272 
Ex¥
 *
pEx¥
 = 
pTîm
->pExpr;

2273 
pNew
->
wsFœgs
 |
WHERE_COLUMN_IN
;

2274 if–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_xIsSñe˘
) ){

2276 
nIn
 = 46; 
	`as£π
–46==
	`sqlôe3LogE°
(25) );

2277 }if–
	`ALWAYS
(
pEx¥
->
x
.
pLi°
 &&ÖEx¥->x.pLi°->
nEx¥
) ){

2279 
nIn
 = 
	`sqlôe3LogE°
(
pEx¥
->
x
.
pLi°
->
nEx¥
);

2281 
	`as£π
–
nIn
>0 );

2284 }if–
eOp
 & (
WO_EQ
|
WO_IS
) ){

2285 
iCﬁ
 = 
pProbe
->
aiCﬁumn
[
ßved_nEq
];

2286 
pNew
->
wsFœgs
 |
WHERE_COLUMN_EQ
;

2287 
	`as£π
–
ßved_nEq
==
pNew
->
u
.
båì
.
nEq
 );

2288 if–
iCﬁ
==
XN_ROWID


2289 || (
iCﬁ
>0 && 
nInMul
==0 && 
ßved_nEq
==
pProbe
->
nKeyCﬁ
-1)

2291 if–
iCﬁ
>=0 && 
pProbe
->
uniqNŸNuŒ
==0 ){

2292 
pNew
->
wsFœgs
 |
WHERE_UNQ_WANTED
;

2294 
pNew
->
wsFœgs
 |
WHERE_ONEROW
;

2297 }if–
eOp
 & 
WO_ISNULL
 ){

2298 
pNew
->
wsFœgs
 |
WHERE_COLUMN_NULL
;

2299 }if–
eOp
 & (
WO_GT
|
WO_GE
) ){

2300 
	`ã°ˇ£
–
eOp
 & 
WO_GT
 );

2301 
	`ã°ˇ£
–
eOp
 & 
WO_GE
 );

2302 
pNew
->
wsFœgs
 |
WHERE_COLUMN_RANGE
|
WHERE_BTM_LIMIT
;

2303 
pBtm
 = 
pTîm
;

2304 
pT›
 = 0;

2305 if–
pTîm
->
wtFœgs
 & 
TERM_LIKEOPT
 ){

2308 
pT›
 = &
pTîm
[1];

2309 
	`as£π
–(
pT›
-(
pTîm
->
pWC
->
a
))<pTîm->pWC->
nTîm
 );

2310 
	`as£π
–
pT›
->
wtFœgs
 & 
TERM_LIKEOPT
 );

2311 
	`as£π
–
pT›
->
eO≥øt‹
==
WO_LT
 );

2312 if–
	`whîeLo›Resize
(
db
, 
pNew
,ÖNew->
nLTîm
+1) ) ;

2313 
pNew
->
aLTîm
[pNew->
nLTîm
++] = 
pT›
;

2314 
pNew
->
wsFœgs
 |
WHERE_TOP_LIMIT
;

2317 
	`as£π
–
eOp
 & (
WO_LT
|
WO_LE
) );

2318 
	`ã°ˇ£
–
eOp
 & 
WO_LT
 );

2319 
	`ã°ˇ£
–
eOp
 & 
WO_LE
 );

2320 
pNew
->
wsFœgs
 |
WHERE_COLUMN_RANGE
|
WHERE_TOP_LIMIT
;

2321 
pT›
 = 
pTîm
;

2322 
pBtm
 = (
pNew
->
wsFœgs
 & 
WHERE_BTM_LIMIT
)!=0 ?

2323 
pNew
->
aLTîm
[pNew->
nLTîm
-2] : 0;

2331 
	`as£π
–
pNew
->
nOut
==
ßved_nOut
 );

2332 if–
pNew
->
wsFœgs
 & 
WHERE_COLUMN_RANGE
 ){

2335 
	`whîeR™geSˇnE°
(
pP¨£
, 
pBuûdî
, 
pBtm
, 
pT›
, 
pNew
);

2337 
nEq
 = ++
pNew
->
u
.
båì
.nEq;

2338 
	`as£π
–
eOp
 & (
WO_ISNULL
|
WO_EQ
|
WO_IN
|
WO_IS
) );

2340 
	`as£π
–
pNew
->
nOut
==
ßved_nOut
 );

2341 if–
pTîm
->
åuthProb
<=0 && 
pProbe
->
aiCﬁumn
[
ßved_nEq
]>=0 ){

2342 
	`as£π
–(
eOp
 & 
WO_IN
Ë|| 
nIn
==0 );

2343 
	`ã°ˇ£
–
eOp
 & 
WO_IN
 );

2344 
pNew
->
nOut
 +
pTîm
->
åuthProb
;

2345 
pNew
->
nOut
 -
nIn
;

2347 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


2348 
tRow˙t
 
nOut
 = 0;

2349 if–
nInMul
==0

2350 && 
pProbe
->
nSam∂e


2351 && 
pNew
->
u
.
båì
.
nEq
<=
pProbe
->
nSam∂eCﬁ


2352 && ((
eOp
 & 
WO_IN
)==0 || !
	`Ex¥HasPr›îty
(
pTîm
->
pEx¥
, 
EP_xIsSñe˘
))

2354 
Ex¥
 *
pEx¥
 = 
pTîm
->pExpr;

2355 if–(
eOp
 & (
WO_EQ
|
WO_ISNULL
|
WO_IS
))!=0 ){

2356 
	`ã°ˇ£
–
eOp
 & 
WO_EQ
 );

2357 
	`ã°ˇ£
–
eOp
 & 
WO_IS
 );

2358 
	`ã°ˇ£
–
eOp
 & 
WO_ISNULL
 );

2359 
rc
 = 
	`whîeEquÆSˇnE°
(
pP¨£
, 
pBuûdî
, 
pEx¥
->
pRight
, &
nOut
);

2361 
rc
 = 
	`whîeInSˇnE°
(
pP¨£
, 
pBuûdî
, 
pEx¥
->
x
.
pLi°
, &
nOut
);

2363 if–
rc
==
SQLITE_NOTFOUND
 )Ñ¯
SQLITE_OK
;

2364 if–
rc
!=
SQLITE_OK
 ) ;

2365 if–
nOut
 ){

2366 
pNew
->
nOut
 = 
	`sqlôe3LogE°
(nOut);

2367 if–
pNew
->
nOut
>
ßved_nOut
 )ÖNew->nOut = saved_nOut;

2368 
pNew
->
nOut
 -
nIn
;

2371 if–
nOut
==0 )

2374 
pNew
->
nOut
 +(
pProbe
->
aiRowLogE°
[
nEq
] -ÖProbe->aiRowLogEst[nEq-1]);

2375 if–
eOp
 & 
WO_ISNULL
 ){

2379 
pNew
->
nOut
 += 10;

2389 
rCo°Idx
 = 
pNew
->
nOut
 + 1 + (15*
pProbe
->
szIdxRow
)/
pSrc
->
pTab
->
szTabRow
;

2390 
pNew
->
rRun
 = 
	`sqlôe3LogE°Add
(
rLogSize
, 
rCo°Idx
);

2391 if–(
pNew
->
wsFœgs
 & (
WHERE_IDX_ONLY
|
WHERE_IPK
))==0 ){

2392 
pNew
->
rRun
 = 
	`sqlôe3LogE°Add
’New->rRun,ÖNew->
nOut
 + 16);

2394 
	`AµlyCo°Mu…ùlõr
(
pNew
->
rRun
, 
pProbe
->
pTabÀ
->
co°Mu…
);

2396 
nOutU«dju°ed
 = 
pNew
->
nOut
;

2397 
pNew
->
rRun
 +
nInMul
 + 
nIn
;

2398 
pNew
->
nOut
 +
nInMul
 + 
nIn
;

2399 
	`whîeLo›OuçutAdju°
(
pBuûdî
->
pWC
, 
pNew
, 
rSize
);

2400 
rc
 = 
	`whîeLo›In£π
(
pBuûdî
, 
pNew
);

2402 if–
pNew
->
wsFœgs
 & 
WHERE_COLUMN_RANGE
 ){

2403 
pNew
->
nOut
 = 
ßved_nOut
;

2405 
pNew
->
nOut
 = 
nOutU«dju°ed
;

2408 if–(
pNew
->
wsFœgs
 & 
WHERE_TOP_LIMIT
)==0

2409 && 
pNew
->
u
.
båì
.
nEq
<
pProbe
->
nCﬁumn


2411 
	`whîeLo›AddBåìIndex
(
pBuûdî
, 
pSrc
, 
pProbe
, 
nInMul
+
nIn
);

2413 
pNew
->
nOut
 = 
ßved_nOut
;

2414 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


2415 
pBuûdî
->
nRecVÆid
 =ÇRecValid;

2418 
pNew
->
¥îeq
 = 
ßved_¥îeq
;

2419 
pNew
->
u
.
båì
.
nEq
 = 
ßved_nEq
;

2420 
pNew
->
nSkù
 = 
ßved_nSkù
;

2421 
pNew
->
wsFœgs
 = 
ßved_wsFœgs
;

2422 
pNew
->
nOut
 = 
ßved_nOut
;

2423 
pNew
->
nLTîm
 = 
ßved_nLTîm
;

2435 
	`as£π
–42==
	`sqlôe3LogE°
(18) );

2436 if–
ßved_nEq
==
ßved_nSkù


2437 && 
ßved_nEq
+1<
pProbe
->
nKeyCﬁ


2438 && 
pProbe
->
noSkùSˇn
==0

2439 && 
pProbe
->
aiRowLogE°
[
ßved_nEq
+1]>=42

2440 && (
rc
 = 
	`whîeLo›Resize
(
db
, 
pNew
,ÖNew->
nLTîm
+1))==
SQLITE_OK


2442 
LogE°
 
nIãr
;

2443 
pNew
->
u
.
båì
.
nEq
++;

2444 
pNew
->
nSkù
++;

2445 
pNew
->
aLTîm
[pNew->
nLTîm
++] = 0;

2446 
pNew
->
wsFœgs
 |
WHERE_SKIPSCAN
;

2447 
nIãr
 = 
pProbe
->
aiRowLogE°
[
ßved_nEq
] -ÖProbe->aiRowLogEst[saved_nEq+1];

2448 
pNew
->
nOut
 -
nIãr
;

2451 
nIãr
 += 5;

2452 
	`whîeLo›AddBåìIndex
(
pBuûdî
, 
pSrc
, 
pProbe
, 
nIãr
 + 
nInMul
);

2453 
pNew
->
nOut
 = 
ßved_nOut
;

2454 
pNew
->
u
.
båì
.
nEq
 = 
ßved_nEq
;

2455 
pNew
->
nSkù
 = 
ßved_nSkù
;

2456 
pNew
->
wsFœgs
 = 
ßved_wsFœgs
;

2459  
rc
;

2460 
	}
}

2470 
	$ödexMightHñpWôhOrdîBy
(

2471 
WhîeLo›Buûdî
 *
pBuûdî
,

2472 
Index
 *
pIndex
,

2473 
iCurs‹


2475 
Ex¥Li°
 *
pOB
;

2476 
Ex¥Li°
 *
aCﬁEx¥
;

2477 
ii
, 
jj
;

2479 if–
pIndex
->
bUn‹dîed
 )  0;

2480 if–(
pOB
 = 
pBuûdî
->
pWInfo
->
pOrdîBy
)==0 )  0;

2481 
ii
=0; ii<
pOB
->
nEx¥
; ii++){

2482 
Ex¥
 *
pEx¥
 = 
	`sqlôe3Ex¥SkùCﬁœã
(
pOB
->
a
[
ii
].pExpr);

2483 if–
pEx¥
->
›
==
TK_COLUMN
 &&ÖEx¥->
iTabÀ
==
iCurs‹
 ){

2484 if–
pEx¥
->
iCﬁumn
<0 )  1;

2485 
jj
=0; jj<
pIndex
->
nKeyCﬁ
; jj++){

2486 if–
pEx¥
->
iCﬁumn
==
pIndex
->
aiCﬁumn
[
jj
] )  1;

2488 }if–(
aCﬁEx¥
 = 
pIndex
->aColExpr)!=0 ){

2489 
jj
=0; jj<
pIndex
->
nKeyCﬁ
; jj++){

2490 if–
pIndex
->
aiCﬁumn
[
jj
]!=
XN_EXPR
 ) ;

2491 if–
	`sqlôe3Ex¥Com∑ª
(
pEx¥
,
aCﬁEx¥
->
a
[
jj
].pEx¥,
iCurs‹
)==0 ){

2498 
	}
}

2504 
Bômask
 
	$cﬁumnsInIndex
(
Index
 *
pIdx
){

2505 
Bômask
 
m
 = 0;

2506 
j
;

2507 
j
=
pIdx
->
nCﬁumn
-1; j>=0; j--){

2508 
x
 = 
pIdx
->
aiCﬁumn
[
j
];

2509 if–
x
>=0 ){

2510 
	`ã°ˇ£
–
x
==
BMS
-1 );

2511 
	`ã°ˇ£
–
x
==
BMS
-2 );

2512 if–
x
<
BMS
-1 ) 
m
 |
	`MASKBIT
(x);

2515  
m
;

2516 
	}
}

2521 
	$whîeUßbÀP¨tülIndex
(
iTab
, 
WhîeCœu£
 *
pWC
, 
Ex¥
 *
pWhîe
){

2522 
i
;

2523 
WhîeTîm
 *
pTîm
;

2524  
pWhîe
->
›
==
TK_AND
 ){

2525 if–!
	`whîeUßbÀP¨tülIndex
(
iTab
,
pWC
,
pWhîe
->
pLe·
) )  0;

2526 
pWhîe
 =ÖWhîe->
pRight
;

2528 
i
=0, 
pTîm
=
pWC
->
a
; i<pWC->
nTîm
; i++,ÖTerm++){

2529 
Ex¥
 *
pEx¥
 = 
pTîm
->pExpr;

2530 if–
	`sqlôe3Ex¥Im∂õsEx¥
(
pEx¥
, 
pWhîe
, 
iTab
)

2531 && (!
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_FromJoö
Ë||ÖEx¥->
iRightJoöTabÀ
==
iTab
)

2537 
	}
}

2575 
	$whîeLo›AddBåì
(

2576 
WhîeLo›Buûdî
 *
pBuûdî
,

2577 
Bômask
 
mPªªq


2579 
WhîeInfo
 *
pWInfo
;

2580 
Index
 *
pProbe
;

2581 
Index
 
sPk
;

2582 
LogE°
 
aiRowE°Pk
[2];

2583 
i16
 
aiCﬁumnPk
 = -1;

2584 
SrcLi°
 *
pTabLi°
;

2585 
SrcLi°_ôem
 *
pSrc
;

2586 
WhîeLo›
 *
pNew
;

2587 
rc
 = 
SQLITE_OK
;

2588 
iS‹tIdx
 = 1;

2589 
b
;

2590 
LogE°
 
rSize
;

2591 
LogE°
 
rLogSize
;

2592 
WhîeCœu£
 *
pWC
;

2593 
TabÀ
 *
pTab
;

2595 
pNew
 = 
pBuûdî
->pNew;

2596 
pWInfo
 = 
pBuûdî
->pWInfo;

2597 
pTabLi°
 = 
pWInfo
->pTabList;

2598 
pSrc
 = 
pTabLi°
->
a
 + 
pNew
->
iTab
;

2599 
pTab
 = 
pSrc
->pTab;

2600 
pWC
 = 
pBuûdî
->pWC;

2601 
	`as£π
–!
	`IsVútuÆ
(
pSrc
->
pTab
) );

2603 if–
pSrc
->
pIBIndex
 ){

2605 
pProbe
 = 
pSrc
->
pIBIndex
;

2606 }if–!
	`HasRowid
(
pTab
) ){

2607 
pProbe
 = 
pTab
->
pIndex
;

2613 
Index
 *
pFú°
;

2614 
	`mem£t
(&
sPk
, 0, (
Index
));

2615 
sPk
.
nKeyCﬁ
 = 1;

2616 
sPk
.
nCﬁumn
 = 1;

2617 
sPk
.
aiCﬁumn
 = &
aiCﬁumnPk
;

2618 
sPk
.
aiRowLogE°
 = 
aiRowE°Pk
;

2619 
sPk
.
⁄Eº‹
 = 
OE_Rïœ˚
;

2620 
sPk
.
pTabÀ
 = 
pTab
;

2621 
sPk
.
szIdxRow
 = 
pTab
->
szTabRow
;

2622 
aiRowE°Pk
[0] = 
pTab
->
nRowLogE°
;

2623 
aiRowE°Pk
[1] = 0;

2624 
pFú°
 = 
pSrc
->
pTab
->
pIndex
;

2625 if–
pSrc
->
fg
.
nŸIndexed
==0 ){

2628 
sPk
.
pNext
 = 
pFú°
;

2630 
pProbe
 = &
sPk
;

2632 
rSize
 = 
pTab
->
nRowLogE°
;

2633 
rLogSize
 = 
	`e°Log
(
rSize
);

2635 #i‚de‡
SQLITE_OMIT_AUTOMATIC_INDEX


2637 if–!
pBuûdî
->
pOrSë


2638 && (
pWInfo
->
w˘æFœgs
 & 
WHERE_NO_AUTOINDEX
)==0

2639 && (
pWInfo
->
pP¨£
->
db
->
Êags
 & 
SQLITE_AutoIndex
)!=0

2640 && 
pSrc
->
pIBIndex
==0

2641 && !
pSrc
->
fg
.
nŸIndexed


2642 && 
	`HasRowid
(
pTab
)

2643 && !
pSrc
->
fg
.
isC‹ªœãd


2644 && !
pSrc
->
fg
.
isRecursive


2647 
WhîeTîm
 *
pTîm
;

2648 
WhîeTîm
 *
pWCEnd
 = 
pWC
->
a
 +ÖWC->
nTîm
;

2649 
pTîm
=
pWC
->
a
; 
rc
==
SQLITE_OK
 &&ÖTîm<
pWCEnd
;ÖTerm++){

2650 if–
pTîm
->
¥îeqRight
 & 
pNew
->
maskSñf
 ) ;

2651 if–
	`ãrmC™DriveIndex
(
pTîm
, 
pSrc
, 0) ){

2652 
pNew
->
u
.
båì
.
nEq
 = 1;

2653 
pNew
->
nSkù
 = 0;

2654 
pNew
->
u
.
båì
.
pIndex
 = 0;

2655 
pNew
->
nLTîm
 = 1;

2656 
pNew
->
aLTîm
[0] = 
pTîm
;

2665 
pNew
->
rSëup
 = 
rLogSize
 + 
rSize
 + 4;

2666 if–
pTab
->
pSñe˘
==0 && (pTab->
èbFœgs
 & 
TF_EphemîÆ
)==0 ){

2667 
pNew
->
rSëup
 += 24;

2669 
	`AµlyCo°Mu…ùlõr
(
pNew
->
rSëup
, 
pTab
->
co°Mu…
);

2674 
pNew
->
nOut
 = 43; 
	`as£π
–43==
	`sqlôe3LogE°
(20) );

2675 
pNew
->
rRun
 = 
	`sqlôe3LogE°Add
(
rLogSize
,pNew->
nOut
);

2676 
pNew
->
wsFœgs
 = 
WHERE_AUTO_INDEX
;

2677 
pNew
->
¥îeq
 = 
mPªªq
 | 
pTîm
->
¥îeqRight
;

2678 
rc
 = 
	`whîeLo›In£π
(
pBuûdî
, 
pNew
);

2686 ; 
rc
==
SQLITE_OK
 && 
pProbe
;ÖProbeıProbe->
pNext
, 
iS‹tIdx
++){

2687 if–
pProbe
->
pP¨tIdxWhîe
!=0

2688 && !
	`whîeUßbÀP¨tülIndex
(
pSrc
->
iCurs‹
, 
pWC
, 
pProbe
->
pP¨tIdxWhîe
) ){

2689 
	`ã°ˇ£
–
pNew
->
iTab
!=
pSrc
->
iCurs‹
 );

2692 
rSize
 = 
pProbe
->
aiRowLogE°
[0];

2693 
pNew
->
u
.
båì
.
nEq
 = 0;

2694 
pNew
->
nSkù
 = 0;

2695 
pNew
->
nLTîm
 = 0;

2696 
pNew
->
iS‹tIdx
 = 0;

2697 
pNew
->
rSëup
 = 0;

2698 
pNew
->
¥îeq
 = 
mPªªq
;

2699 
pNew
->
nOut
 = 
rSize
;

2700 
pNew
->
u
.
båì
.
pIndex
 = 
pProbe
;

2701 
b
 = 
	`ödexMightHñpWôhOrdîBy
(
pBuûdî
, 
pProbe
, 
pSrc
->
iCurs‹
);

2703 
	`as£π
–(
pWInfo
->
w˘æFœgs
 & 
WHERE_ONEPASS_DESIRED
)==0 || 
b
==0 );

2704 if–
pProbe
->
äum
<=0 ){

2706 
pNew
->
wsFœgs
 = 
WHERE_IPK
;

2709 
pNew
->
iS‹tIdx
 = 
b
 ? iSortIdx : 0;

2711 
pNew
->
rRun
 = 
rSize
 + 16;

2712 
	`AµlyCo°Mu…ùlõr
(
pNew
->
rRun
, 
pTab
->
co°Mu…
);

2713 
	`whîeLo›OuçutAdju°
(
pWC
, 
pNew
, 
rSize
);

2714 
rc
 = 
	`whîeLo›In£π
(
pBuûdî
, 
pNew
);

2715 
pNew
->
nOut
 = 
rSize
;

2716 if–
rc
 ) ;

2718 
Bômask
 
m
;

2719 if–
pProbe
->
isCovîög
 ){

2720 
pNew
->
wsFœgs
 = 
WHERE_IDX_ONLY
 | 
WHERE_INDEXED
;

2721 
m
 = 0;

2723 
m
 = 
pSrc
->
cﬁU£d
 & ~
	`cﬁumnsInIndex
(
pProbe
);

2724 
pNew
->
wsFœgs
 = (
m
==0Ë? (
WHERE_IDX_ONLY
|
WHERE_INDEXED
) : WHERE_INDEXED;

2728 if–
b


2729 || !
	`HasRowid
(
pTab
)

2730 || ( 
m
==0

2731 && 
pProbe
->
bUn‹dîed
==0

2732 && (
pProbe
->
szIdxRow
<
pTab
->
szTabRow
)

2733 && (
pWInfo
->
w˘æFœgs
 & 
WHERE_ONEPASS_DESIRED
)==0

2734 && 
sqlôe3GlobÆC⁄fig
.
bU£Cis


2735 && 
	`O±imiz©i⁄E«bÀd
(
pWInfo
->
pP¨£
->
db
, 
SQLITE_CovîIdxSˇn
)

2738 
pNew
->
iS‹tIdx
 = 
b
 ? iSortIdx : 0;

2744 
pNew
->
rRun
 = 
rSize
 + 1 + (15*
pProbe
->
szIdxRow
)/
pTab
->
szTabRow
;

2745 if–
m
!=0 ){

2746 
pNew
->
rRun
 = 
	`sqlôe3LogE°Add
’New->rRun, 
rSize
+16);

2748 
	`AµlyCo°Mu…ùlõr
(
pNew
->
rRun
, 
pTab
->
co°Mu…
);

2749 
	`whîeLo›OuçutAdju°
(
pWC
, 
pNew
, 
rSize
);

2750 
rc
 = 
	`whîeLo›In£π
(
pBuûdî
, 
pNew
);

2751 
pNew
->
nOut
 = 
rSize
;

2752 if–
rc
 ) ;

2756 
rc
 = 
	`whîeLo›AddBåìIndex
(
pBuûdî
, 
pSrc
, 
pProbe
, 0);

2757 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


2758 
	`sqlôe3Sèt4ProbeFªe
(
pBuûdî
->
pRec
);

2759 
pBuûdî
->
nRecVÆid
 = 0;

2760 
pBuûdî
->
pRec
 = 0;

2765 if–
pSrc
->
pIBIndex
 ) ;

2767  
rc
;

2768 
	}
}

2770 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


2792 
	$whîeLo›AddVútuÆO√
(

2793 
WhîeLo›Buûdî
 *
pBuûdî
,

2794 
Bômask
 
mPªªq
,

2795 
Bômask
 
mUßbÀ
,

2796 
u16
 
mEx˛ude
,

2797 
sqlôe3_ödex_öfo
 *
pIdxInfo
,

2798 *
pbIn


2800 
WhîeCœu£
 *
pWC
 = 
pBuûdî
->pWC;

2801 
sqlôe3_ödex_c⁄°øöt
 *
pIdxC⁄s
;

2802 
sqlôe3_ödex_c⁄°øöt_ußge
 *
pUßge
 = 
pIdxInfo
->
aC⁄°øötUßge
;

2803 
i
;

2804 
mxTîm
;

2805 
rc
 = 
SQLITE_OK
;

2806 
WhîeLo›
 *
pNew
 = 
pBuûdî
->pNew;

2807 
P¨£
 *
pP¨£
 = 
pBuûdî
->
pWInfo
->pParse;

2808 
SrcLi°_ôem
 *
pSrc
 = &
pBuûdî
->
pWInfo
->
pTabLi°
->
a
[
pNew
->
iTab
];

2809 
nC⁄°øöt
 = 
pIdxInfo
->nConstraint;

2811 
	`as£π
–(
mUßbÀ
 & 
mPªªq
)==mPrereq );

2812 *
pbIn
 = 0;

2813 
pNew
->
¥îeq
 = 
mPªªq
;

2817 
pIdxC⁄s
 = *(
sqlôe3_ödex_c⁄°øöt
**)&
pIdxInfo
->
aC⁄°øöt
;

2818 
i
=0; i<
nC⁄°øöt
; i++, 
pIdxC⁄s
++){

2819 
WhîeTîm
 *
pTîm
 = &
pWC
->
a
[
pIdxC⁄s
->
iTîmOff£t
];

2820 
pIdxC⁄s
->
ußbÀ
 = 0;

2821 if–(
pTîm
->
¥îeqRight
 & 
mUßbÀ
)==pTerm->prereqRight

2822 && (
pTîm
->
eO≥øt‹
 & 
mEx˛ude
)==0

2824 
pIdxC⁄s
->
ußbÀ
 = 1;

2829 
	`mem£t
(
pUßge
, 0, ’Ußge[0])*
nC⁄°øöt
);

2830 
	`as£π
–
pIdxInfo
->
√edToFªeIdxSå
==0 );

2831 
pIdxInfo
->
idxSå
 = 0;

2832 
pIdxInfo
->
idxNum
 = 0;

2833 
pIdxInfo
->
‹dîByC⁄sumed
 = 0;

2834 
pIdxInfo
->
e°im©edCo°
 = 
SQLITE_BIG_DBL
 / ()2;

2835 
pIdxInfo
->
e°im©edRows
 = 25;

2836 
pIdxInfo
->
idxFœgs
 = 0;

2837 
pIdxInfo
->
cﬁU£d
 = (
sqlôe3_öt64
)
pSrc
->colUsed;

2840 
rc
 = 
	`vèbBe°Index
(
pP¨£
, 
pSrc
->
pTab
, 
pIdxInfo
);

2841 if–
rc
 ) Ñc;

2843 
mxTîm
 = -1;

2844 
	`as£π
–
pNew
->
nLSlŸ
>=
nC⁄°øöt
 );

2845 
i
=0; i<
nC⁄°øöt
; i++Ë
pNew
->
aLTîm
[i] = 0;

2846 
pNew
->
u
.
vèb
.
omôMask
 = 0;

2847 
pIdxC⁄s
 = *(
sqlôe3_ödex_c⁄°øöt
**)&
pIdxInfo
->
aC⁄°øöt
;

2848 
i
=0; i<
nC⁄°øöt
; i++, 
pIdxC⁄s
++){

2849 
iTîm
;

2850 if–(
iTîm
 = 
pUßge
[
i
].
¨gvIndex
 - 1)>=0 ){

2851 
WhîeTîm
 *
pTîm
;

2852 
j
 = 
pIdxC⁄s
->
iTîmOff£t
;

2853 if–
iTîm
>=
nC⁄°øöt


2854 || 
j
<0

2855 || 
j
>=
pWC
->
nTîm


2856 || 
pNew
->
aLTîm
[
iTîm
]!=0

2857 || 
pIdxC⁄s
->
ußbÀ
==0

2859 
rc
 = 
SQLITE_ERROR
;

2860 
	`sqlôe3Eº‹Msg
(
pP¨£
,"%s.xBe°Index mÆfun˘i⁄",
pSrc
->
pTab
->
zName
);

2861  
rc
;

2863 
	`ã°ˇ£
–
iTîm
==
nC⁄°øöt
-1 );

2864 
	`ã°ˇ£
–
j
==0 );

2865 
	`ã°ˇ£
–
j
==
pWC
->
nTîm
-1 );

2866 
pTîm
 = &
pWC
->
a
[
j
];

2867 
pNew
->
¥îeq
 |
pTîm
->
¥îeqRight
;

2868 
	`as£π
–
iTîm
<
pNew
->
nLSlŸ
 );

2869 
pNew
->
aLTîm
[
iTîm
] = 
pTîm
;

2870 if–
iTîm
>
mxTîm
 ) mxTerm = iTerm;

2871 
	`ã°ˇ£
–
iTîm
==15 );

2872 
	`ã°ˇ£
–
iTîm
==16 );

2873 if–
iTîm
<16 && 
pUßge
[
i
].
omô
 ) 
pNew
->
u
.
vèb
.
omôMask
 |= 1<<iTerm;

2874 if–(
pTîm
->
eO≥øt‹
 & 
WO_IN
)!=0 ){

2880 
pIdxInfo
->
‹dîByC⁄sumed
 = 0;

2881 
pIdxInfo
->
idxFœgs
 &~
SQLITE_INDEX_SCAN_UNIQUE
;

2882 *
pbIn
 = 1; 
	`as£π
–(
mEx˛ude
 & 
WO_IN
)==0 );

2887 
pNew
->
nLTîm
 = 
mxTîm
+1;

2888 
	`as£π
–
pNew
->
nLTîm
<ıNew->
nLSlŸ
 );

2889 
pNew
->
u
.
vèb
.
idxNum
 = 
pIdxInfo
->idxNum;

2890 
pNew
->
u
.
vèb
.
√edFªe
 = 
pIdxInfo
->
√edToFªeIdxSå
;

2891 
pIdxInfo
->
√edToFªeIdxSå
 = 0;

2892 
pNew
->
u
.
vèb
.
idxSå
 = 
pIdxInfo
->idxStr;

2893 
pNew
->
u
.
vèb
.
isOrdîed
 = (
i8
)(
pIdxInfo
->
‹dîByC⁄sumed
 ?

2894 
pIdxInfo
->
nOrdîBy
 : 0);

2895 
pNew
->
rSëup
 = 0;

2896 
pNew
->
rRun
 = 
	`sqlôe3LogE°FromDoubÀ
(
pIdxInfo
->
e°im©edCo°
);

2897 
pNew
->
nOut
 = 
	`sqlôe3LogE°
(
pIdxInfo
->
e°im©edRows
);

2901 if–
pIdxInfo
->
idxFœgs
 & 
SQLITE_INDEX_SCAN_UNIQUE
 ){

2902 
pNew
->
wsFœgs
 |
WHERE_ONEROW
;

2904 
pNew
->
wsFœgs
 &~
WHERE_ONEROW
;

2906 
rc
 = 
	`whîeLo›In£π
(
pBuûdî
, 
pNew
);

2907 if–
pNew
->
u
.
vèb
.
√edFªe
 ){

2908 
	`sqlôe3_‰ì
(
pNew
->
u
.
vèb
.
idxSå
);

2909 
pNew
->
u
.
vèb
.
√edFªe
 = 0;

2911 
	`WHERETRACE
(0xffff, (" bIn=%dÖrereqIn=%04llxÖrereqOut=%04llx\n",

2912 *
pbIn
, (
sqlôe3_uöt64
)
mPªªq
,

2913 (
sqlôe3_uöt64
)(
pNew
->
¥îeq
 & ~
mPªªq
)));

2915  
rc
;

2916 
	}
}

2944 
	$whîeLo›AddVútuÆ
(

2945 
WhîeLo›Buûdî
 *
pBuûdî
,

2946 
Bômask
 
mPªªq
,

2947 
Bômask
 
mUnußbÀ


2949 
rc
 = 
SQLITE_OK
;

2950 
WhîeInfo
 *
pWInfo
;

2951 
P¨£
 *
pP¨£
;

2952 
WhîeCœu£
 *
pWC
;

2953 
SrcLi°_ôem
 *
pSrc
;

2954 
sqlôe3_ödex_öfo
 *
p
;

2955 
nC⁄°øöt
;

2956 
bIn
;

2957 
WhîeLo›
 *
pNew
;

2958 
Bômask
 
mBe°
;

2960 
	`as£π
–(
mPªªq
 & 
mUnußbÀ
)==0 );

2961 
pWInfo
 = 
pBuûdî
->pWInfo;

2962 
pP¨£
 = 
pWInfo
->pParse;

2963 
pWC
 = 
pBuûdî
->pWC;

2964 
pNew
 = 
pBuûdî
->pNew;

2965 
pSrc
 = &
pWInfo
->
pTabLi°
->
a
[
pNew
->
iTab
];

2966 
	`as£π
–
	`IsVútuÆ
(
pSrc
->
pTab
) );

2967 
p
 = 
	`ÆloˇãIndexInfo
(
pP¨£
, 
pWC
, 
mUnußbÀ
, 
pSrc
, 
pBuûdî
->
pOrdîBy
);

2968 if–
p
==0 )  
SQLITE_NOMEM_BKPT
;

2969 
pNew
->
rSëup
 = 0;

2970 
pNew
->
wsFœgs
 = 
WHERE_VIRTUALTABLE
;

2971 
pNew
->
nLTîm
 = 0;

2972 
pNew
->
u
.
vèb
.
√edFªe
 = 0;

2973 
nC⁄°øöt
 = 
p
->nConstraint;

2974 if–
	`whîeLo›Resize
(
pP¨£
->
db
, 
pNew
, 
nC⁄°øöt
) ){

2975 
	`sqlôe3DbFªe
(
pP¨£
->
db
, 
p
);

2976  
SQLITE_NOMEM_BKPT
;

2980 
	`WHERETRACE
(0x40, (" VirtualOne:áll usable\n"));

2981 
rc
 = 
	`whîeLo›AddVútuÆO√
(
pBuûdî
, 
mPªªq
, 
ALLBITS
, 0, 
p
, &
bIn
);

2988 if–
rc
==
SQLITE_OK
 && (
mBe°
 = (
pNew
->
¥îeq
 & ~
mPªªq
))!=0 ){

2989 
£íZîo
 = 0;

2990 
£íZîoNoIN
 = 0;

2991 
Bômask
 
mPªv
 = 0;

2992 
Bômask
 
mBe°NoIn
 = 0;

2996 if–
bIn
 ){

2997 
	`WHERETRACE
(0x40, (" VirtualOne:áll usable w/o IN\n"));

2998 
rc
 = 
	`whîeLo›AddVútuÆO√
(
pBuûdî
, 
mPªªq
, 
ALLBITS
, 
WO_IN
, 
p
, &
bIn
);

2999 
	`as£π
–
bIn
==0 );

3000 
mBe°NoIn
 = 
pNew
->
¥îeq
 & ~
mPªªq
;

3001 if–
mBe°NoIn
==0 ){

3002 
£íZîo
 = 1;

3003 
£íZîoNoIN
 = 1;

3009  
rc
==
SQLITE_OK
 ){

3010 
i
;

3011 
Bômask
 
mNext
 = 
ALLBITS
;

3012 
	`as£π
–
mNext
>0 );

3013 
i
=0; i<
nC⁄°øöt
; i++){

3014 
Bômask
 
mThis
 = (

3015 
pWC
->
a
[
p
->
aC⁄°øöt
[
i
].
iTîmOff£t
].
¥îeqRight
 & ~
mPªªq


3017 if–
mThis
>
mPªv
 && mThis<
mNext
 ) mNext = mThis;

3019 
mPªv
 = 
mNext
;

3020 if–
mNext
==
ALLBITS
 ) ;

3021 if–
mNext
==
mBe°
 || mNext==
mBe°NoIn
 ) ;

3022 
	`WHERETRACE
(0x40, (" VirtualOne: mPrev=%04llx mNext=%04llx\n",

3023 (
sqlôe3_uöt64
)
mPªv
, (sqlôe3_uöt64)
mNext
));

3024 
rc
 = 
	`whîeLo›AddVútuÆO√
(
pBuûdî
, 
mPªªq
, 
mNext
|mPªªq, 0, 
p
, &
bIn
);

3025 if–
pNew
->
¥îeq
==
mPªªq
 ){

3026 
£íZîo
 = 1;

3027 if–
bIn
==0 ) 
£íZîoNoIN
 = 1;

3034 if–
rc
==
SQLITE_OK
 && 
£íZîo
==0 ){

3035 
	`WHERETRACE
(0x40, (" VirtualOne:áll disabled\n"));

3036 
rc
 = 
	`whîeLo›AddVútuÆO√
(
pBuûdî
, 
mPªªq
, mPªªq, 0, 
p
, &
bIn
);

3037 if–
bIn
==0 ) 
£íZîoNoIN
 = 1;

3043 if–
rc
==
SQLITE_OK
 && 
£íZîoNoIN
==0 ){

3044 
	`WHERETRACE
(0x40, (" VirtualOne:áll disabledánd w/o IN\n"));

3045 
rc
 = 
	`whîeLo›AddVútuÆO√
(
pBuûdî
, 
mPªªq
, mPªªq, 
WO_IN
, 
p
, &
bIn
);

3049 if–
p
->
√edToFªeIdxSå
 ) 
	`sqlôe3_‰ì
’->
idxSå
);

3050 
	`sqlôe3DbFªe
(
pP¨£
->
db
, 
p
);

3051  
rc
;

3052 
	}
}

3059 
	$whîeLo›AddOr
(

3060 
WhîeLo›Buûdî
 *
pBuûdî
,

3061 
Bômask
 
mPªªq
,

3062 
Bômask
 
mUnußbÀ


3064 
WhîeInfo
 *
pWInfo
 = 
pBuûdî
->pWInfo;

3065 
WhîeCœu£
 *
pWC
;

3066 
WhîeLo›
 *
pNew
;

3067 
WhîeTîm
 *
pTîm
, *
pWCEnd
;

3068 
rc
 = 
SQLITE_OK
;

3069 
iCur
;

3070 
WhîeCœu£
 
ãmpWC
;

3071 
WhîeLo›Buûdî
 
sSubBuûd
;

3072 
WhîeOrSë
 
sSum
, 
sCur
;

3073 
SrcLi°_ôem
 *
pIãm
;

3075 
pWC
 = 
pBuûdî
->pWC;

3076 
pWCEnd
 = 
pWC
->
a
 +ÖWC->
nTîm
;

3077 
pNew
 = 
pBuûdî
->pNew;

3078 
	`mem£t
(&
sSum
, 0, (sSum));

3079 
pIãm
 = 
pWInfo
->
pTabLi°
->
a
 + 
pNew
->
iTab
;

3080 
iCur
 = 
pIãm
->
iCurs‹
;

3082 
pTîm
=
pWC
->
a
;ÖTîm<
pWCEnd
 && 
rc
==
SQLITE_OK
;ÖTerm++){

3083 if–(
pTîm
->
eO≥øt‹
 & 
WO_OR
)!=0

3084 && (
pTîm
->
u
.
pOrInfo
->
ödexabÀ
 & 
pNew
->
maskSñf
)!=0

3086 
WhîeCœu£
 * c⁄° 
pOrWC
 = &
pTîm
->
u
.
pOrInfo
->
wc
;

3087 
WhîeTîm
 * c⁄° 
pOrWCEnd
 = &
pOrWC
->
a
[pOrWC->
nTîm
];

3088 
WhîeTîm
 *
pOrTîm
;

3089 
⁄˚
 = 1;

3090 
i
, 
j
;

3092 
sSubBuûd
 = *
pBuûdî
;

3093 
sSubBuûd
.
pOrdîBy
 = 0;

3094 
sSubBuûd
.
pOrSë
 = &
sCur
;

3096 
	`WHERETRACE
(0x200, ("BegöÖro˚ssög OR-˛au£ %p\n", 
pTîm
));

3097 
pOrTîm
=
pOrWC
->
a
;ÖOrTîm<
pOrWCEnd
;ÖOrTerm++){

3098 if–(
pOrTîm
->
eO≥øt‹
 & 
WO_AND
)!=0 ){

3099 
sSubBuûd
.
pWC
 = &
pOrTîm
->
u
.
pAndInfo
->
wc
;

3100 }if–
pOrTîm
->
À·Curs‹
==
iCur
 ){

3101 
ãmpWC
.
pWInfo
 = 
pWC
->pWInfo;

3102 
ãmpWC
.
pOuãr
 = 
pWC
;

3103 
ãmpWC
.
›
 = 
TK_AND
;

3104 
ãmpWC
.
nTîm
 = 1;

3105 
ãmpWC
.
a
 = 
pOrTîm
;

3106 
sSubBuûd
.
pWC
 = &
ãmpWC
;

3110 
sCur
.
n
 = 0;

3111 #ifde‡
WHERETRACE_ENABLED


3112 
	`WHERETRACE
(0x200, ("OR-term %d of %p has %d subterms:\n",

3113 ()(
pOrTîm
-
pOrWC
->
a
), 
pTîm
, 
sSubBuûd
.
pWC
->
nTîm
));

3114 if–
sqlôe3WhîeTø˚
 & 0x400 ){

3115 
i
=0; i<
sSubBuûd
.
pWC
->
nTîm
; i++){

3116 
	`whîeTîmPröt
(&
sSubBuûd
.
pWC
->
a
[
i
], i);

3120 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


3121 if–
	`IsVútuÆ
(
pIãm
->
pTab
) ){

3122 
rc
 = 
	`whîeLo›AddVútuÆ
(&
sSubBuûd
, 
mPªªq
, 
mUnußbÀ
);

3126 
rc
 = 
	`whîeLo›AddBåì
(&
sSubBuûd
, 
mPªªq
);

3128 if–
rc
==
SQLITE_OK
 ){

3129 
rc
 = 
	`whîeLo›AddOr
(&
sSubBuûd
, 
mPªªq
, 
mUnußbÀ
);

3131 
	`as£π
–
rc
==
SQLITE_OK
 || 
sCur
.
n
==0 );

3132 if–
sCur
.
n
==0 ){

3133 
sSum
.
n
 = 0;

3135 }if–
⁄˚
 ){

3136 
	`whîeOrMove
(&
sSum
, &
sCur
);

3137 
⁄˚
 = 0;

3139 
WhîeOrSë
 
sPªv
;

3140 
	`whîeOrMove
(&
sPªv
, &
sSum
);

3141 
sSum
.
n
 = 0;

3142 
i
=0; i<
sPªv
.
n
; i++){

3143 
j
=0; j<
sCur
.
n
; j++){

3144 
	`whîeOrIn£π
(&
sSum
, 
sPªv
.
a
[
i
].
¥îeq
 | 
sCur
.a[
j
].prereq,

3145 
	`sqlôe3LogE°Add
(
sPªv
.
a
[
i
].
rRun
, 
sCur
.a[
j
].rRun),

3146 
	`sqlôe3LogE°Add
(
sPªv
.
a
[
i
].
nOut
, 
sCur
.a[
j
].nOut));

3151 
pNew
->
nLTîm
 = 1;

3152 
pNew
->
aLTîm
[0] = 
pTîm
;

3153 
pNew
->
wsFœgs
 = 
WHERE_MULTI_OR
;

3154 
pNew
->
rSëup
 = 0;

3155 
pNew
->
iS‹tIdx
 = 0;

3156 
	`mem£t
(&
pNew
->
u
, 0, (pNew->u));

3157 
i
=0; 
rc
==
SQLITE_OK
 && i<
sSum
.
n
; i++){

3170 
pNew
->
rRun
 = 
sSum
.
a
[
i
].rRun + 1;

3171 
pNew
->
nOut
 = 
sSum
.
a
[
i
].nOut;

3172 
pNew
->
¥îeq
 = 
sSum
.
a
[
i
].prereq;

3173 
rc
 = 
	`whîeLo›In£π
(
pBuûdî
, 
pNew
);

3175 
	`WHERETRACE
(0x200, ("EndÖro˚ssög OR-˛au£ %p\n", 
pTîm
));

3178  
rc
;

3179 
	}
}

3184 
	$whîeLo›AddAŒ
(
WhîeLo›Buûdî
 *
pBuûdî
){

3185 
WhîeInfo
 *
pWInfo
 = 
pBuûdî
->pWInfo;

3186 
Bômask
 
mPªªq
 = 0;

3187 
Bômask
 
mPri‹
 = 0;

3188 
iTab
;

3189 
SrcLi°
 *
pTabLi°
 = 
pWInfo
->pTabList;

3190 
SrcLi°_ôem
 *
pIãm
;

3191 
SrcLi°_ôem
 *
pEnd
 = &
pTabLi°
->
a
[
pWInfo
->
nLevñ
];

3192 
sqlôe3
 *
db
 = 
pWInfo
->
pP¨£
->db;

3193 
rc
 = 
SQLITE_OK
;

3194 
WhîeLo›
 *
pNew
;

3195 
u8
 
¥i‹Joöty≥
 = 0;

3198 
pNew
 = 
pBuûdî
->pNew;

3199 
	`whîeLo›Inô
(
pNew
);

3200 
iTab
=0, 
pIãm
=
pTabLi°
->
a
;ÖIãm<
pEnd
; iTab++,ÖItem++){

3201 
Bômask
 
mUnußbÀ
 = 0;

3202 
pNew
->
iTab
 = iTab;

3203 
pNew
->
maskSñf
 = 
	`sqlôe3WhîeGëMask
(&
pWInfo
->
sMaskSë
, 
pIãm
->
iCurs‹
);

3204 if–((
pIãm
->
fg
.
joöty≥
|
¥i‹Joöty≥
Ë& (
JT_LEFT
|
JT_CROSS
))!=0 ){

3207 
mPªªq
 = 
mPri‹
;

3209 
¥i‹Joöty≥
 = 
pIãm
->
fg
.
joöty≥
;

3210 if–
	`IsVútuÆ
(
pIãm
->
pTab
) ){

3211 
SrcLi°_ôem
 *
p
;

3212 
p
=&
pIãm
[1];Ö<
pEnd
;Ö++){

3213 if–
mUnußbÀ
 || (
p
->
fg
.
joöty≥
 & (
JT_LEFT
|
JT_CROSS
)) ){

3214 
mUnußbÀ
 |
	`sqlôe3WhîeGëMask
(&
pWInfo
->
sMaskSë
, 
p
->
iCurs‹
);

3217 
rc
 = 
	`whîeLo›AddVútuÆ
(
pBuûdî
, 
mPªªq
, 
mUnußbÀ
);

3219 
rc
 = 
	`whîeLo›AddBåì
(
pBuûdî
, 
mPªªq
);

3221 if–
rc
==
SQLITE_OK
 ){

3222 
rc
 = 
	`whîeLo›AddOr
(
pBuûdî
, 
mPªªq
, 
mUnußbÀ
);

3224 
mPri‹
 |
pNew
->
maskSñf
;

3225 if–
rc
 || 
db
->
mÆlocFaûed
 ) ;

3228 
	`whîeLo›CÀ¨
(
db
, 
pNew
);

3229  
rc
;

3230 
	}
}

3249 
i8
 
	$whîeP©hS©isfõsOrdîBy
(

3250 
WhîeInfo
 *
pWInfo
,

3251 
Ex¥Li°
 *
pOrdîBy
,

3252 
WhîeP©h
 *
pP©h
,

3253 
u16
 
w˘æFœgs
,

3254 
u16
 
nLo›
,

3255 
WhîeLo›
 *
pLa°
,

3256 
Bômask
 *
pRevMask


3258 
u8
 
ªvSë
;

3259 
u8
 
ªv
;

3260 
u8
 
ªvIdx
;

3261 
u8
 
isOrdîDi°ö˘
;

3262 
u8
 
di°ö˘Cﬁumns
;

3263 
u8
 
isM©ch
;

3264 
u16
 
nKeyCﬁ
;

3265 
u16
 
nCﬁumn
;

3266 
u16
 
nOrdîBy
;

3267 
iLo›
;

3268 
i
, 
j
;

3269 
iCur
;

3270 
iCﬁumn
;

3271 
WhîeLo›
 *
pLo›
 = 0;

3272 
WhîeTîm
 *
pTîm
;

3273 
Ex¥
 *
pOBEx¥
;

3274 
CﬁlSeq
 *
pCﬁl
;

3275 
Index
 *
pIndex
;

3276 
sqlôe3
 *
db
 = 
pWInfo
->
pP¨£
->db;

3277 
Bômask
 
obS©
 = 0;

3278 
Bômask
 
obD⁄e
;

3279 
Bômask
 
‹dîDi°ö˘Mask
;

3280 
Bômask
 
ªady
;

3304 
	`as£π
–
pOrdîBy
!=0 );

3305 if–
nLo›
 && 
	`O±imiz©i⁄DißbÀd
(
db
, 
SQLITE_OrdîByIdxJoö
) )  0;

3307 
nOrdîBy
 = 
pOrdîBy
->
nEx¥
;

3308 
	`ã°ˇ£
–
nOrdîBy
==
BMS
-1 );

3309 if–
nOrdîBy
>
BMS
-1 )  0;

3310 
isOrdîDi°ö˘
 = 1;

3311 
obD⁄e
 = 
	`MASKBIT
(
nOrdîBy
)-1;

3312 
‹dîDi°ö˘Mask
 = 0;

3313 
ªady
 = 0;

3314 
iLo›
=0; 
isOrdîDi°ö˘
 && 
obS©
<
obD⁄e
 && iLo›<=
nLo›
; iLoop++){

3315 if–
iLo›
>0 ) 
ªady
 |
pLo›
->
maskSñf
;

3316 
pLo›
 = 
iLo›
<
nLo›
 ? 
pP©h
->
aLo›
[iLo›] : 
pLa°
;

3317 if–
pLo›
->
wsFœgs
 & 
WHERE_VIRTUALTABLE
 ){

3318 if–
pLo›
->
u
.
vèb
.
isOrdîed
 ) 
obS©
 = 
obD⁄e
;

3321 
iCur
 = 
pWInfo
->
pTabLi°
->
a
[
pLo›
->
iTab
].
iCurs‹
;

3328 
i
=0; i<
nOrdîBy
; i++){

3329 if–
	`MASKBIT
(
i
Ë& 
obS©
 ) ;

3330 
pOBEx¥
 = 
	`sqlôe3Ex¥SkùCﬁœã
(
pOrdîBy
->
a
[
i
].
pEx¥
);

3331 if–
pOBEx¥
->
›
!=
TK_COLUMN
 ) ;

3332 if–
pOBEx¥
->
iTabÀ
!=
iCur
 ) ;

3333 
pTîm
 = 
	`sqlôe3WhîeFödTîm
(&
pWInfo
->
sWC
, 
iCur
, 
pOBEx¥
->
iCﬁumn
,

3334 ~
ªady
, 
WO_EQ
|
WO_ISNULL
|
WO_IS
, 0);

3335 if–
pTîm
==0 ) ;

3336 if–(
pTîm
->
eO≥øt‹
&(
WO_EQ
|
WO_IS
))!=0 && 
pOBEx¥
->
iCﬁumn
>=0 ){

3337 c⁄° *
z1
, *
z2
;

3338 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pWInfo
->
pP¨£
, 
pOrdîBy
->
a
[
i
].
pEx¥
);

3339 if–!
pCﬁl
 )ÖCﬁ»
db
->
pDÊtCﬁl
;

3340 
z1
 = 
pCﬁl
->
zName
;

3341 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pWInfo
->
pP¨£
, 
pTîm
->
pEx¥
);

3342 if–!
pCﬁl
 )ÖCﬁ»
db
->
pDÊtCﬁl
;

3343 
z2
 = 
pCﬁl
->
zName
;

3344 if–
	`sqlôe3SåICmp
(
z1
, 
z2
)!=0 ) ;

3345 
	`ã°ˇ£
–
pTîm
->
pEx¥
->
›
==
TK_IS
 );

3347 
obS©
 |
	`MASKBIT
(
i
);

3350 if–(
pLo›
->
wsFœgs
 & 
WHERE_ONEROW
)==0 ){

3351 if–
pLo›
->
wsFœgs
 & 
WHERE_IPK
 ){

3352 
pIndex
 = 0;

3353 
nKeyCﬁ
 = 0;

3354 
nCﬁumn
 = 1;

3355 }if–(
pIndex
 = 
pLo›
->
u
.
båì
.pIndex)==0 ||ÖIndex->
bUn‹dîed
 ){

3358 
nKeyCﬁ
 = 
pIndex
->nKeyCol;

3359 
nCﬁumn
 = 
pIndex
->nColumn;

3360 
	`as£π
–
nCﬁumn
==
nKeyCﬁ
+1 || !
	`HasRowid
(
pIndex
->
pTabÀ
) );

3361 
	`as£π
–
pIndex
->
aiCﬁumn
[
nCﬁumn
-1]==
XN_ROWID


3362 || !
	`HasRowid
(
pIndex
->
pTabÀ
));

3363 
isOrdîDi°ö˘
 = 
	`IsUniqueIndex
(
pIndex
);

3369 
ªv
 = 
ªvSë
 = 0;

3370 
di°ö˘Cﬁumns
 = 0;

3371 
j
=0; j<
nCﬁumn
; j++){

3372 
u8
 
bOn˚
;

3375 if–
j
<
pLo›
->
u
.
båì
.
nEq


3376 && 
pLo›
->
nSkù
==0

3377 && ((
i
 = 
pLo›
->
aLTîm
[
j
]->
eO≥øt‹
Ë& (
WO_EQ
|
WO_ISNULL
|
WO_IS
))!=0

3379 if–
i
 & 
WO_ISNULL
 ){

3380 
	`ã°ˇ£
–
isOrdîDi°ö˘
 );

3381 
isOrdîDi°ö˘
 = 0;

3389 if–
pIndex
 ){

3390 
iCﬁumn
 = 
pIndex
->
aiCﬁumn
[
j
];

3391 
ªvIdx
 = 
pIndex
->
aS‹tOrdî
[
j
];

3392 if–
iCﬁumn
==
pIndex
->
pTabÀ
->
iPKey
 ) iColumn = -1;

3394 
iCﬁumn
 = 
XN_ROWID
;

3395 
ªvIdx
 = 0;

3401 if–
isOrdîDi°ö˘


3402 && 
iCﬁumn
>=0

3403 && 
j
>=
pLo›
->
u
.
båì
.
nEq


3404 && 
pIndex
->
pTabÀ
->
aCﬁ
[
iCﬁumn
].
nŸNuŒ
==0

3406 
isOrdîDi°ö˘
 = 0;

3412 
bOn˚
 = 1;

3413 
isM©ch
 = 0;

3414 
i
=0; 
bOn˚
 && i<
nOrdîBy
; i++){

3415 if–
	`MASKBIT
(
i
Ë& 
obS©
 ) ;

3416 
pOBEx¥
 = 
	`sqlôe3Ex¥SkùCﬁœã
(
pOrdîBy
->
a
[
i
].
pEx¥
);

3417 
	`ã°ˇ£
–
w˘æFœgs
 & 
WHERE_GROUPBY
 );

3418 
	`ã°ˇ£
–
w˘æFœgs
 & 
WHERE_DISTINCTBY
 );

3419 if–(
w˘æFœgs
 & (
WHERE_GROUPBY
|
WHERE_DISTINCTBY
))==0 ) 
bOn˚
 = 0;

3420 if–
iCﬁumn
>=(-1) ){

3421 if–
pOBEx¥
->
›
!=
TK_COLUMN
 ) ;

3422 if–
pOBEx¥
->
iTabÀ
!=
iCur
 ) ;

3423 if–
pOBEx¥
->
iCﬁumn
!=iColumn ) ;

3425 if–
	`sqlôe3Ex¥Com∑ª
(
pOBEx¥
,
pIndex
->
aCﬁEx¥
->
a
[
j
].
pEx¥
,
iCur
) ){

3429 if–
iCﬁumn
>=0 ){

3430 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pWInfo
->
pP¨£
, 
pOrdîBy
->
a
[
i
].
pEx¥
);

3431 if–!
pCﬁl
 )ÖCﬁ»
db
->
pDÊtCﬁl
;

3432 if–
	`sqlôe3SåICmp
(
pCﬁl
->
zName
, 
pIndex
->
azCﬁl
[
j
])!=0 ) ;

3434 
isM©ch
 = 1;

3437 if–
isM©ch
 && (
w˘æFœgs
 & 
WHERE_GROUPBY
)==0 ){

3440 if–
ªvSë
 ){

3441 if–(
ªv
 ^ 
ªvIdx
)!=
pOrdîBy
->
a
[
i
].
s‹tOrdî
 ) 
isM©ch
 = 0;

3443 
ªv
 = 
ªvIdx
 ^ 
pOrdîBy
->
a
[
i
].
s‹tOrdî
;

3444 if–
ªv
 ) *
pRevMask
 |
	`MASKBIT
(
iLo›
);

3445 
ªvSë
 = 1;

3448 if–
isM©ch
 ){

3449 if–
iCﬁumn
<0 ){

3450 
	`ã°ˇ£
–
di°ö˘Cﬁumns
==0 );

3451 
di°ö˘Cﬁumns
 = 1;

3453 
obS©
 |
	`MASKBIT
(
i
);

3456 if–
j
==0 || j<
nKeyCﬁ
 ){

3457 
	`ã°ˇ£
–
isOrdîDi°ö˘
!=0 );

3458 
isOrdîDi°ö˘
 = 0;

3463 if–
di°ö˘Cﬁumns
 ){

3464 
	`ã°ˇ£
–
isOrdîDi°ö˘
==0 );

3465 
isOrdîDi°ö˘
 = 1;

3470 if–
isOrdîDi°ö˘
 ){

3471 
‹dîDi°ö˘Mask
 |
pLo›
->
maskSñf
;

3472 
i
=0; i<
nOrdîBy
; i++){

3473 
Ex¥
 *
p
;

3474 
Bômask
 
mTîm
;

3475 if–
	`MASKBIT
(
i
Ë& 
obS©
 ) ;

3476 
p
 = 
pOrdîBy
->
a
[
i
].
pEx¥
;

3477 
mTîm
 = 
	`sqlôe3WhîeEx¥Ußge
(&
pWInfo
->
sMaskSë
,
p
);

3478 if–
mTîm
==0 && !
	`sqlôe3Ex¥IsC⁄°™t
(
p
) ) ;

3479 if–(
mTîm
&~
‹dîDi°ö˘Mask
)==0 ){

3480 
obS©
 |
	`MASKBIT
(
i
);

3485 if–
obS©
==
obD⁄e
 )  (
i8
)
nOrdîBy
;

3486 if–!
isOrdîDi°ö˘
 ){

3487 
i
=
nOrdîBy
-1; i>0; i--){

3488 
Bômask
 
m
 = 
	`MASKBIT
(
i
) - 1;

3489 if–(
obS©
&
m
)==m )  
i
;

3494 
	}
}

3520 
	$sqlôe3WhîeIsS‹ãd
(
WhîeInfo
 *
pWInfo
){

3521 
	`as£π
–
pWInfo
->
w˘æFœgs
 & 
WHERE_GROUPBY
 );

3522 
	`as£π
–
pWInfo
->
w˘æFœgs
 & 
WHERE_SORTBYGROUP
 );

3523  
pWInfo
->
s‹ãd
;

3524 
	}
}

3526 #ifde‡
WHERETRACE_ENABLED


3528 c⁄° *
	$whîeP©hName
(
WhîeP©h
 *
pP©h
, 
nLo›
, 
WhîeLo›
 *
pLa°
){

3529 
zName
[65];

3530 
i
;

3531 
i
=0; i<
nLo›
; i++){ 
zName
[i] = 
pP©h
->
aLo›
[i]->
cId
; }

3532 if–
pLa°
 ) 
zName
[
i
++] =ÖLa°->
cId
;

3533 
zName
[
i
] = 0;

3534  
zName
;

3535 
	}
}

3543 
LogE°
 
	$whîeS‹tögCo°
(

3544 
WhîeInfo
 *
pWInfo
,

3545 
LogE°
 
nRow
,

3546 
nOrdîBy
,

3547 
nS‹ãd


3562 
LogE°
 
rSˇÀ
, 
rS‹tCo°
;

3563 
	`as£π
–
nOrdîBy
>0 && 66==
	`sqlôe3LogE°
(100) );

3564 
rSˇÀ
 = 
	`sqlôe3LogE°
((
nOrdîBy
-
nS‹ãd
)*100/nOrderBy) - 66;

3565 
rS‹tCo°
 = 
nRow
 + 
rSˇÀ
 + 16;

3569 if–(
pWInfo
->
w˘æFœgs
 & 
WHERE_USE_LIMIT
)!=0 &&ÖWInfo->
iLimô
<
nRow
 ){

3570 
nRow
 = 
pWInfo
->
iLimô
;

3572 
rS‹tCo°
 +
	`e°Log
(
nRow
);

3573  
rS‹tCo°
;

3574 
	}
}

3588 
	$whîeP©hSﬁvî
(
WhîeInfo
 *
pWInfo
, 
LogE°
 
nRowE°
){

3589 
mxChoi˚
;

3590 
nLo›
;

3591 
P¨£
 *
pP¨£
;

3592 
sqlôe3
 *
db
;

3593 
iLo›
;

3594 
ii
, 
jj
;

3595 
mxI
 = 0;

3596 
nOrdîBy
;

3597 
LogE°
 
mxCo°
 = 0;

3598 
LogE°
 
mxUns‹ãd
 = 0;

3599 
nTo
, 
nFrom
;

3600 
WhîeP©h
 *
aFrom
;

3601 
WhîeP©h
 *
aTo
;

3602 
WhîeP©h
 *
pFrom
;

3603 
WhîeP©h
 *
pTo
;

3604 
WhîeLo›
 *
pWLo›
;

3605 
WhîeLo›
 **
pX
;

3606 
LogE°
 *
aS‹tCo°
 = 0;

3607 *
pS∑˚
;

3608 
nS∑˚
;

3610 
pP¨£
 = 
pWInfo
->pParse;

3611 
db
 = 
pP¨£
->db;

3612 
nLo›
 = 
pWInfo
->
nLevñ
;

3616 
mxChoi˚
 = (
nLo›
<=1) ? 1 : (nLoop==2 ? 5 : 10);

3617 
	`as£π
–
nLo›
<=
pWInfo
->
pTabLi°
->
nSrc
 );

3618 
	`WHERETRACE
(0x002, ("---- begö sﬁvî. (nRowE°=%d)\n", 
nRowE°
));

3625 if–
pWInfo
->
pOrdîBy
==0 || 
nRowE°
==0 ){

3626 
nOrdîBy
 = 0;

3628 
nOrdîBy
 = 
pWInfo
->
pOrdîBy
->
nEx¥
;

3632 
nS∑˚
 = ((
WhîeP©h
)+(
WhîeLo›
*)*
nLo›
)*
mxChoi˚
*2;

3633 
nS∑˚
 +(
LogE°
Ë* 
nOrdîBy
;

3634 
pS∑˚
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, 
nS∑˚
);

3635 if–
pS∑˚
==0 )  
SQLITE_NOMEM_BKPT
;

3636 
aTo
 = (
WhîeP©h
*)
pS∑˚
;

3637 
aFrom
 = 
aTo
+
mxChoi˚
;

3638 
	`mem£t
(
aFrom
, 0, (aFrom[0]));

3639 
pX
 = (
WhîeLo›
**)(
aFrom
+
mxChoi˚
);

3640 
ii
=
mxChoi˚
*2, 
pFrom
=
aTo
; ii>0; ii--,ÖFrom++, 
pX
 +
nLo›
){

3641 
pFrom
->
aLo›
 = 
pX
;

3643 if–
nOrdîBy
 ){

3650 
aS‹tCo°
 = (
LogE°
*)
pX
;

3651 
	`mem£t
(
aS‹tCo°
, 0, (
LogE°
Ë* 
nOrdîBy
);

3653 
	`as£π
–
aS‹tCo°
==0 || &
pS∑˚
[
nS∑˚
]==(*)&aS‹tCo°[
nOrdîBy
] );

3654 
	`as£π
–
aS‹tCo°
!=0 || &
pS∑˚
[
nS∑˚
]==(*)
pX
 );

3661 
aFrom
[0].
nRow
 = 
	`MIN
(
pP¨£
->
nQuîyLo›
, 48); 
	`as£π
–48==
	`sqlôe3LogE°
(28) );

3662 
nFrom
 = 1;

3663 
	`as£π
–
aFrom
[0].
isOrdîed
==0 );

3664 if–
nOrdîBy
 ){

3671 
aFrom
[0].
isOrdîed
 = 
nLo›
>0 ? -1 : 
nOrdîBy
;

3677 
iLo›
=0; iLo›<
nLo›
; iLoop++){

3678 
nTo
 = 0;

3679 
ii
=0, 
pFrom
=
aFrom
; ii<
nFrom
; ii++,ÖFrom++){

3680 
pWLo›
=
pWInfo
->
pLo›s
;ÖWLo›;ÖWLo›ıWLo›->
pNextLo›
){

3681 
LogE°
 
nOut
;

3682 
LogE°
 
rCo°
;

3683 
LogE°
 
rUns‹ãd
;

3684 
i8
 
isOrdîed
 = 
pFrom
->isOrdered;

3685 
Bômask
 
maskNew
;

3686 
Bômask
 
ªvMask
 = 0;

3688 if–(
pWLo›
->
¥îeq
 & ~
pFrom
->
maskLo›
)!=0 ) ;

3689 if–(
pWLo›
->
maskSñf
 & 
pFrom
->
maskLo›
)!=0 ) ;

3690 if–(
pWLo›
->
wsFœgs
 & 
WHERE_AUTO_INDEX
)!=0 && 
pFrom
->
nRow
<10 ){

3693 
	`as£π
–10==
	`sqlôe3LogE°
(2) );

3698 
rUns‹ãd
 = 
	`sqlôe3LogE°Add
(
pWLo›
->
rSëup
,pWLo›->
rRun
 + 
pFrom
->
nRow
);

3699 
rUns‹ãd
 = 
	`sqlôe3LogE°Add
‘Uns‹ãd, 
pFrom
->rUnsorted);

3700 
nOut
 = 
pFrom
->
nRow
 + 
pWLo›
->nOut;

3701 
maskNew
 = 
pFrom
->
maskLo›
 | 
pWLo›
->
maskSñf
;

3702 if–
isOrdîed
<0 ){

3703 
isOrdîed
 = 
	`whîeP©hS©isfõsOrdîBy
(
pWInfo
,

3704 
pWInfo
->
pOrdîBy
, 
pFrom
,ÖWInfo->
w˘æFœgs
,

3705 
iLo›
, 
pWLo›
, &
ªvMask
);

3707 
ªvMask
 = 
pFrom
->
ªvLo›
;

3709 if–
isOrdîed
>=0 && isOrdîed<
nOrdîBy
 ){

3710 if–
aS‹tCo°
[
isOrdîed
]==0 ){

3711 
aS‹tCo°
[
isOrdîed
] = 
	`whîeS‹tögCo°
(

3712 
pWInfo
, 
nRowE°
, 
nOrdîBy
, 
isOrdîed


3715 
rCo°
 = 
	`sqlôe3LogE°Add
(
rUns‹ãd
, 
aS‹tCo°
[
isOrdîed
]);

3717 
	`WHERETRACE
(0x002,

3719 
aS‹tCo°
[
isOrdîed
], (
nOrdîBy
-isOrdered),ÇOrderBy,

3720 
rUns‹ãd
, 
rCo°
));

3722 
rCo°
 = 
rUns‹ãd
;

3736 
jj
=0, 
pTo
=
aTo
; jj<
nTo
; jj++,ÖTo++){

3737 if–
pTo
->
maskLo›
==
maskNew


3738 && ((
pTo
->
isOrdîed
^isOrdered)&0x80)==0

3740 
	`ã°ˇ£
–
jj
==
nTo
-1 );

3744 if–
jj
>=
nTo
 ){

3746 if–
nTo
>=
mxChoi˚


3747 && (
rCo°
>
mxCo°
 || (rCo°==mxCo° && 
rUns‹ãd
>=
mxUns‹ãd
))

3752 #ifde‡
WHERETRACE_ENABLED


3753 if–
sqlôe3WhîeTø˚
&0x4 ){

3754 
	`sqlôe3DebugPrötf
("Skip %s cost=%-3d,%3d order=%c\n",

3755 
	`whîeP©hName
(
pFrom
, 
iLo›
, 
pWLo›
), 
rCo°
, 
nOut
,

3756 
isOrdîed
>=0 ? isOrdered+'0' : '?');

3763 if–
nTo
<
mxChoi˚
 ){

3765 
jj
 = 
nTo
++;

3768 
jj
 = 
mxI
;

3770 
pTo
 = &
aTo
[
jj
];

3771 #ifde‡
WHERETRACE_ENABLED


3772 if–
sqlôe3WhîeTø˚
&0x4 ){

3773 
	`sqlôe3DebugPrötf
("New %s cost=%-3d,%3d order=%c\n",

3774 
	`whîeP©hName
(
pFrom
, 
iLo›
, 
pWLo›
), 
rCo°
, 
nOut
,

3775 
isOrdîed
>=0 ? isOrdered+'0' : '?');

3783 if–
pTo
->
rCo°
<rCo° || (pTo->rCo°=ÙCo° &&ÖTo->
nRow
<=
nOut
) ){

3784 #ifde‡
WHERETRACE_ENABLED


3785 if–
sqlôe3WhîeTø˚
&0x4 ){

3786 
	`sqlôe3DebugPrötf
(

3788 
	`whîeP©hName
(
pFrom
, 
iLo›
, 
pWLo›
), 
rCo°
, 
nOut
,

3789 
isOrdîed
>=0 ? isOrdered+'0' : '?');

3790 
	`sqlôe3DebugPrötf
(" vs %s cost=%-3d,%d order=%c\n",

3791 
	`whîeP©hName
(
pTo
, 
iLo›
+1, 0),ÖTo->
rCo°
,ÖTo->
nRow
,

3792 
pTo
->
isOrdîed
>=0 ?ÖTo->isOrdered+'0' : '?');

3796 
	`ã°ˇ£
–
pTo
->
rCo°
==rCost );

3799 
	`ã°ˇ£
–
pTo
->
rCo°
==rCost+1 );

3802 #ifde‡
WHERETRACE_ENABLED


3803 if–
sqlôe3WhîeTø˚
&0x4 ){

3804 
	`sqlôe3DebugPrötf
(

3806 
	`whîeP©hName
(
pFrom
, 
iLo›
, 
pWLo›
), 
rCo°
, 
nOut
,

3807 
isOrdîed
>=0 ? isOrdered+'0' : '?');

3808 
	`sqlôe3DebugPrötf
(" was %s cost=%-3d,%3d order=%c\n",

3809 
	`whîeP©hName
(
pTo
, 
iLo›
+1, 0),ÖTo->
rCo°
,ÖTo->
nRow
,

3810 
pTo
->
isOrdîed
>=0 ?ÖTo->isOrdered+'0' : '?');

3815 
pTo
->
maskLo›
 = 
pFrom
->maskLo› | 
pWLo›
->
maskSñf
;

3816 
pTo
->
ªvLo›
 = 
ªvMask
;

3817 
pTo
->
nRow
 = 
nOut
;

3818 
pTo
->
rCo°
 =ÑCost;

3819 
pTo
->
rUns‹ãd
 =ÑUnsorted;

3820 
pTo
->
isOrdîed
 = isOrdered;

3821 
	`mem˝y
(
pTo
->
aLo›
, 
pFrom
->aLo›, (
WhîeLo›
*)*
iLo›
);

3822 
pTo
->
aLo›
[
iLo›
] = 
pWLo›
;

3823 if–
nTo
>=
mxChoi˚
 ){

3824 
mxI
 = 0;

3825 
mxCo°
 = 
aTo
[0].
rCo°
;

3826 
mxUns‹ãd
 = 
aTo
[0].
nRow
;

3827 
jj
=1, 
pTo
=&
aTo
[1]; jj<
mxChoi˚
; jj++,ÖTo++){

3828 if–
pTo
->
rCo°
>
mxCo°


3829 || (
pTo
->
rCo°
==
mxCo°
 &&ÖTo->
rUns‹ãd
>
mxUns‹ãd
)

3831 
mxCo°
 = 
pTo
->
rCo°
;

3832 
mxUns‹ãd
 = 
pTo
->
rUns‹ãd
;

3833 
mxI
 = 
jj
;

3840 #ifde‡
WHERETRACE_ENABLED


3841 if–
sqlôe3WhîeTø˚
 & 0x02 ){

3842 
	`sqlôe3DebugPrötf
("----á·îÑound %d ----\n", 
iLo›
);

3843 
ii
=0, 
pTo
=
aTo
; ii<
nTo
; ii++,ÖTo++){

3844 
	`sqlôe3DebugPrötf
(" %s cost=%-3dÇrow=%-3d order=%c",

3845 
	`whîeP©hName
(
pTo
, 
iLo›
+1, 0),ÖTo->
rCo°
,ÖTo->
nRow
,

3846 
pTo
->
isOrdîed
>=0 ? (pTo->isOrdered+'0') : '?');

3847 if–
pTo
->
isOrdîed
>0 ){

3848 
	`sqlôe3DebugPrötf
("Ñev=0x%Œx\n", 
pTo
->
ªvLo›
);

3850 
	`sqlôe3DebugPrötf
("\n");

3857 
pFrom
 = 
aTo
;

3858 
aTo
 = 
aFrom
;

3859 
aFrom
 = 
pFrom
;

3860 
nFrom
 = 
nTo
;

3863 if–
nFrom
==0 ){

3864 
	`sqlôe3Eº‹Msg
(
pP¨£
, "no query solution");

3865 
	`sqlôe3DbFªe
(
db
, 
pS∑˚
);

3866  
SQLITE_ERROR
;

3870 
pFrom
 = 
aFrom
;

3871 
ii
=1; ii<
nFrom
; ii++){

3872 if–
pFrom
->
rCo°
>
aFrom
[
ii
].rCost )ÖFrom = &aFrom[ii];

3874 
	`as£π
–
pWInfo
->
nLevñ
==
nLo›
 );

3876 
iLo›
=0; iLo›<
nLo›
; iLoop++){

3877 
WhîeLevñ
 *
pLevñ
 = 
pWInfo
->
a
 + 
iLo›
;

3878 
pLevñ
->
pWLo›
 =ÖWLo› = 
pFrom
->
aLo›
[
iLo›
];

3879 
pLevñ
->
iFrom
 = 
pWLo›
->
iTab
;

3880 
pLevñ
->
iTabCur
 = 
pWInfo
->
pTabLi°
->
a
[pLevñ->
iFrom
].
iCurs‹
;

3882 if–(
pWInfo
->
w˘æFœgs
 & 
WHERE_WANT_DISTINCT
)!=0

3883 && (
pWInfo
->
w˘æFœgs
 & 
WHERE_DISTINCTBY
)==0

3884 && 
pWInfo
->
eDi°ö˘
==
WHERE_DISTINCT_NOOP


3885 && 
nRowE°


3887 
Bômask
 
nŸU£d
;

3888 
rc
 = 
	`whîeP©hS©isfõsOrdîBy
(
pWInfo
,ÖWInfo->
pDi°ö˘Së
, 
pFrom
,

3889 
WHERE_DISTINCTBY
, 
nLo›
-1, 
pFrom
->
aLo›
[nLo›-1], &
nŸU£d
);

3890 if–
rc
==
pWInfo
->
pDi°ö˘Së
->
nEx¥
 ){

3891 
pWInfo
->
eDi°ö˘
 = 
WHERE_DISTINCT_ORDERED
;

3894 if–
pWInfo
->
pOrdîBy
 ){

3895 if–
pWInfo
->
w˘æFœgs
 & 
WHERE_DISTINCTBY
 ){

3896 if–
pFrom
->
isOrdîed
==
pWInfo
->
pOrdîBy
->
nEx¥
 ){

3897 
pWInfo
->
eDi°ö˘
 = 
WHERE_DISTINCT_ORDERED
;

3900 
pWInfo
->
nOBS©
 = 
pFrom
->
isOrdîed
;

3901 if–
pWInfo
->
nOBS©
<0 )ÖWInfo->nOBSat = 0;

3902 
pWInfo
->
ªvMask
 = 
pFrom
->
ªvLo›
;

3904 if–(
pWInfo
->
w˘æFœgs
 & 
WHERE_SORTBYGROUP
)

3905 && 
pWInfo
->
nOBS©
=ıWInfo->
pOrdîBy
->
nEx¥
 && 
nLo›
>0

3907 
Bômask
 
ªvMask
 = 0;

3908 
nOrdî
 = 
	`whîeP©hS©isfõsOrdîBy
(
pWInfo
,ÖWInfo->
pOrdîBy
,

3909 
pFrom
, 0, 
nLo›
-1,ÖFrom->
aLo›
[nLo›-1], &
ªvMask


3911 
	`as£π
–
pWInfo
->
s‹ãd
==0 );

3912 if–
nOrdî
==
pWInfo
->
pOrdîBy
->
nEx¥
 ){

3913 
pWInfo
->
s‹ãd
 = 1;

3914 
pWInfo
->
ªvMask
 =ÑevMask;

3920 
pWInfo
->
nRowOut
 = 
pFrom
->
nRow
;

3923 
	`sqlôe3DbFªe
(
db
, 
pS∑˚
);

3924  
SQLITE_OK
;

3925 
	}
}

3938 
	$whîeSh‹tCut
(
WhîeLo›Buûdî
 *
pBuûdî
){

3939 
WhîeInfo
 *
pWInfo
;

3940 
SrcLi°_ôem
 *
pIãm
;

3941 
WhîeCœu£
 *
pWC
;

3942 
WhîeTîm
 *
pTîm
;

3943 
WhîeLo›
 *
pLo›
;

3944 
iCur
;

3945 
j
;

3946 
TabÀ
 *
pTab
;

3947 
Index
 *
pIdx
;

3949 
pWInfo
 = 
pBuûdî
->pWInfo;

3950 if–
pWInfo
->
w˘æFœgs
 & 
WHERE_FORCE_TABLE
 )  0;

3951 
	`as£π
–
pWInfo
->
pTabLi°
->
nSrc
>=1 );

3952 
pIãm
 = 
pWInfo
->
pTabLi°
->
a
;

3953 
pTab
 = 
pIãm
->pTab;

3954 if–
	`IsVútuÆ
(
pTab
) )  0;

3955 if–
pIãm
->
fg
.
isIndexedBy
 )  0;

3956 
iCur
 = 
pIãm
->
iCurs‹
;

3957 
pWC
 = &
pWInfo
->
sWC
;

3958 
pLo›
 = 
pBuûdî
->
pNew
;

3959 
pLo›
->
wsFœgs
 = 0;

3960 
pLo›
->
nSkù
 = 0;

3961 
pTîm
 = 
	`sqlôe3WhîeFödTîm
(
pWC
, 
iCur
, -1, 0, 
WO_EQ
|
WO_IS
, 0);

3962 if–
pTîm
 ){

3963 
	`ã°ˇ£
–
pTîm
->
eO≥øt‹
 & 
WO_IS
 );

3964 
pLo›
->
wsFœgs
 = 
WHERE_COLUMN_EQ
|
WHERE_IPK
|
WHERE_ONEROW
;

3965 
pLo›
->
aLTîm
[0] = 
pTîm
;

3966 
pLo›
->
nLTîm
 = 1;

3967 
pLo›
->
u
.
båì
.
nEq
 = 1;

3969 
pLo›
->
rRun
 = 33;

3971 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

3972 
›Mask
;

3973 
	`as£π
–
pLo›
->
aLTîmS∑˚
=ıLo›->
aLTîm
 );

3974 if–!
	`IsUniqueIndex
(
pIdx
)

3975 || 
pIdx
->
pP¨tIdxWhîe
!=0

3976 || 
pIdx
->
nKeyCﬁ
>
	`AºaySize
(
pLo›
->
aLTîmS∑˚
)

3978 
›Mask
 = 
pIdx
->
uniqNŸNuŒ
 ? (
WO_EQ
|
WO_IS
) : WO_EQ;

3979 
j
=0; j<
pIdx
->
nKeyCﬁ
; j++){

3980 
pTîm
 = 
	`sqlôe3WhîeFödTîm
(
pWC
, 
iCur
, 
j
, 0, 
›Mask
, 
pIdx
);

3981 if–
pTîm
==0 ) ;

3982 
	`ã°ˇ£
–
pTîm
->
eO≥øt‹
 & 
WO_IS
 );

3983 
pLo›
->
aLTîm
[
j
] = 
pTîm
;

3985 if–
j
!=
pIdx
->
nKeyCﬁ
 ) ;

3986 
pLo›
->
wsFœgs
 = 
WHERE_COLUMN_EQ
|
WHERE_ONEROW
|
WHERE_INDEXED
;

3987 if–
pIdx
->
isCovîög
 || (
pIãm
->
cﬁU£d
 & ~
	`cﬁumnsInIndex
(pIdx))==0 ){

3988 
pLo›
->
wsFœgs
 |
WHERE_IDX_ONLY
;

3990 
pLo›
->
nLTîm
 = 
j
;

3991 
pLo›
->
u
.
båì
.
nEq
 = 
j
;

3992 
pLo›
->
u
.
båì
.
pIndex
 = 
pIdx
;

3994 
pLo›
->
rRun
 = 39;

3998 if–
pLo›
->
wsFœgs
 ){

3999 
pLo›
->
nOut
 = (
LogE°
)1;

4000 
pWInfo
->
a
[0].
pWLo›
 = 
pLo›
;

4001 
pLo›
->
maskSñf
 = 
	`sqlôe3WhîeGëMask
(&
pWInfo
->
sMaskSë
, 
iCur
);

4002 
pWInfo
->
a
[0].
iTabCur
 = 
iCur
;

4003 
pWInfo
->
nRowOut
 = 1;

4004 if–
pWInfo
->
pOrdîBy
 )ÖWInfo->
nOBS©
 =ÖWInfo->pOrdîBy->
nEx¥
;

4005 if–
pWInfo
->
w˘æFœgs
 & 
WHERE_WANT_DISTINCT
 ){

4006 
pWInfo
->
eDi°ö˘
 = 
WHERE_DISTINCT_UNIQUE
;

4008 #ifde‡
SQLITE_DEBUG


4009 
pLo›
->
cId
 = '0';

4014 
	}
}

4104 
WhîeInfo
 *
	$sqlôe3WhîeBegö
(

4105 
P¨£
 *
pP¨£
,

4106 
SrcLi°
 *
pTabLi°
,

4107 
Ex¥
 *
pWhîe
,

4108 
Ex¥Li°
 *
pOrdîBy
,

4109 
Ex¥Li°
 *
pDi°ö˘Së
,

4110 
u16
 
w˘æFœgs
,

4111 
iAuxArg


4114 
nByãWInfo
;

4115 
nTabLi°
;

4116 
WhîeInfo
 *
pWInfo
;

4117 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

4118 
Bômask
 
nŸRódy
;

4119 
WhîeLo›Buûdî
 
sWLB
;

4120 
WhîeMaskSë
 *
pMaskSë
;

4121 
WhîeLevñ
 *
pLevñ
;

4122 
WhîeLo›
 *
pLo›
;

4123 
ii
;

4124 
sqlôe3
 *
db
;

4125 
rc
;

4126 
u8
 
bF‹dñëe
 = 0;

4128 
	`as£π
–(
w˘æFœgs
 & 
WHERE_ONEPASS_MULTIROW
)==0 || (

4129 (
w˘æFœgs
 & 
WHERE_ONEPASS_DESIRED
)!=0

4130 && (
w˘æFœgs
 & 
WHERE_OMIT_OPEN_CLOSE
)==0

4134 
	`as£π
–(
w˘æFœgs
 & 
WHERE_ONETABLE_ONLY
)==0

4135 || (
w˘æFœgs
 & 
WHERE_USE_LIMIT
)==0 );

4138 
db
 = 
pP¨£
->db;

4139 
	`mem£t
(&
sWLB
, 0, (sWLB));

4142 
	`ã°ˇ£
–
pOrdîBy
 &&ÖOrdîBy->
nEx¥
==
BMS
-1 );

4143 if–
pOrdîBy
 &&ÖOrdîBy->
nEx¥
>=
BMS
 )ÖOrderBy = 0;

4144 
sWLB
.
pOrdîBy
 =ÖOrderBy;

4148 if–
	`O±imiz©i⁄DißbÀd
(
db
, 
SQLITE_Di°ö˘O±
) ){

4149 
w˘æFœgs
 &~
WHERE_WANT_DISTINCT
;

4155 
	`ã°ˇ£
–
pTabLi°
->
nSrc
==
BMS
 );

4156 if–
pTabLi°
->
nSrc
>
BMS
 ){

4157 
	`sqlôe3Eº‹Msg
(
pP¨£
, "© mo° %dÅabÀ†öá joö", 
BMS
);

4166 
nTabLi°
 = (
w˘æFœgs
 & 
WHERE_ONETABLE_ONLY
Ë? 1 : 
pTabLi°
->
nSrc
;

4175 
nByãWInfo
 = 
	`ROUND8
((
WhîeInfo
)+(
nTabLi°
-1)*(
WhîeLevñ
));

4176 
pWInfo
 = 
	`sqlôe3DbMÆlocZîo
(
db
, 
nByãWInfo
 + (
WhîeLo›
));

4177 if–
db
->
mÆlocFaûed
 ){

4178 
	`sqlôe3DbFªe
(
db
, 
pWInfo
);

4179 
pWInfo
 = 0;

4180 
whîeBegöEº‹
;

4182 
pWInfo
->
aiCurO√Pass
[0] =ÖWInfo->aiCurOnePass[1] = -1;

4183 
pWInfo
->
nLevñ
 = 
nTabLi°
;

4184 
pWInfo
->
pP¨£
 =ÖParse;

4185 
pWInfo
->
pTabLi°
 =ÖTabList;

4186 
pWInfo
->
pOrdîBy
 =ÖOrderBy;

4187 
pWInfo
->
pDi°ö˘Së
 =ÖDistinctSet;

4188 
pWInfo
->
iBªak
 =ÖWInfo->
iC⁄töue
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

4189 
pWInfo
->
w˘æFœgs
 = wctrlFlags;

4190 
pWInfo
->
iLimô
 = 
iAuxArg
;

4191 
pWInfo
->
ßvedNQuîyLo›
 = 
pP¨£
->
nQuîyLo›
;

4192 
	`as£π
–
pWInfo
->
eO√Pass
==
ONEPASS_OFF
 );

4193 
pMaskSë
 = &
pWInfo
->
sMaskSë
;

4194 
sWLB
.
pWInfo
 =ÖWInfo;

4195 
sWLB
.
pWC
 = &
pWInfo
->
sWC
;

4196 
sWLB
.
pNew
 = (
WhîeLo›
*)(((*)
pWInfo
)+
nByãWInfo
);

4197 
	`as£π
–
	`EIGHT_BYTE_ALIGNMENT
(
sWLB
.
pNew
) );

4198 
	`whîeLo›Inô
(
sWLB
.
pNew
);

4199 #ifde‡
SQLITE_DEBUG


4200 
sWLB
.
pNew
->
cId
 = '*';

4206 
	`öôMaskSë
(
pMaskSë
);

4207 
	`sqlôe3WhîeCœu£Inô
(&
pWInfo
->
sWC
,ÖWInfo);

4208 
	`sqlôe3WhîeS∂ô
(&
pWInfo
->
sWC
, 
pWhîe
, 
TK_AND
);

4213 
ii
=0; ii<
sWLB
.
pWC
->
nTîm
; ii++){

4214 if–
nTabLi°
==0 || 
	`sqlôe3Ex¥IsC⁄°™tNŸJoö
(
sWLB
.
pWC
->
a
[
ii
].
pEx¥
) ){

4215 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
sWLB
.
pWC
->
a
[
ii
].
pEx¥
, 
pWInfo
->
iBªak
,

4216 
SQLITE_JUMPIFNULL
);

4217 
sWLB
.
pWC
->
a
[
ii
].
wtFœgs
 |
TERM_CODED
;

4223 if–
nTabLi°
==0 ){

4224 if–
pOrdîBy
 ) 
pWInfo
->
nOBS©
 =ÖOrdîBy->
nEx¥
;

4225 if–
w˘æFœgs
 & 
WHERE_WANT_DISTINCT
 ){

4226 
pWInfo
->
eDi°ö˘
 = 
WHERE_DISTINCT_UNIQUE
;

4244 
ii
=0; ii<
pTabLi°
->
nSrc
; ii++){

4245 
	`¸óãMask
(
pMaskSë
, 
pTabLi°
->
a
[
ii
].
iCurs‹
);

4246 
	`sqlôe3WhîeTabFuncArgs
(
pP¨£
, &
pTabLi°
->
a
[
ii
], &
pWInfo
->
sWC
);

4248 #ifde‡
SQLITE_DEBUG


4249 
ii
=0; ii<
pTabLi°
->
nSrc
; ii++){

4250 
Bômask
 
m
 = 
	`sqlôe3WhîeGëMask
(
pMaskSë
, 
pTabLi°
->
a
[
ii
].
iCurs‹
);

4251 
	`as£π
–
m
==
	`MASKBIT
(
ii
) );

4256 
	`sqlôe3WhîeEx¥A«lyze
(
pTabLi°
, &
pWInfo
->
sWC
);

4257 if–
db
->
mÆlocFaûed
 ) 
whîeBegöEº‹
;

4259 if–
w˘æFœgs
 & 
WHERE_WANT_DISTINCT
 ){

4260 if–
	`isDi°ö˘Redund™t
(
pP¨£
, 
pTabLi°
, &
pWInfo
->
sWC
, 
pDi°ö˘Së
) ){

4262 
pWInfo
->
eDi°ö˘
 = 
WHERE_DISTINCT_UNIQUE
;

4263 }if–
pOrdîBy
==0 ){

4265 
pWInfo
->
w˘æFœgs
 |
WHERE_DISTINCTBY
;

4266 
pWInfo
->
pOrdîBy
 = 
pDi°ö˘Së
;

4271 #i‡
	`deföed
(
WHERETRACE_ENABLED
)

4272 if–
sqlôe3WhîeTø˚
 & 0xffff ){

4273 
	`sqlôe3DebugPrötf
("*** O±imizî Sèπ *** (w˘æFœgs: 0x%x",
w˘æFœgs
);

4274 if–
w˘æFœgs
 & 
WHERE_USE_LIMIT
 ){

4275 
	`sqlôe3DebugPrötf
(",Üimô: %d", 
iAuxArg
);

4277 
	`sqlôe3DebugPrötf
(")\n");

4279 if–
sqlôe3WhîeTø˚
 & 0x100 ){

4280 
i
;

4281 
i
=0; i<
sWLB
.
pWC
->
nTîm
; i++){

4282 
	`whîeTîmPröt
(&
sWLB
.
pWC
->
a
[
i
], i);

4287 if–
nTabLi°
!=1 || 
	`whîeSh‹tCut
(&
sWLB
)==0 ){

4288 
rc
 = 
	`whîeLo›AddAŒ
(&
sWLB
);

4289 if–
rc
 ) 
whîeBegöEº‹
;

4291 #ifde‡
WHERETRACE_ENABLED


4292 if–
sqlôe3WhîeTø˚
 ){

4293 
WhîeLo›
 *
p
;

4294 
i
;

4295 c⁄° 
zLabñ
[] = "0123456789abcdefghijklmnopqrstuvwyxz"

4297 
p
=
pWInfo
->
pLo›s
, 
i
=0;Ö;Öı->
pNextLo›
, i++){

4298 
p
->
cId
 = 
zLabñ
[
i
%(zLabel)];

4299 
	`whîeLo›Pröt
(
p
, 
sWLB
.
pWC
);

4304 
	`whîeP©hSﬁvî
(
pWInfo
, 0);

4305 if–
db
->
mÆlocFaûed
 ) 
whîeBegöEº‹
;

4306 if–
pWInfo
->
pOrdîBy
 ){

4307 
	`whîeP©hSﬁvî
(
pWInfo
,ÖWInfo->
nRowOut
+1);

4308 if–
db
->
mÆlocFaûed
 ) 
whîeBegöEº‹
;

4311 if–
pWInfo
->
pOrdîBy
==0 && (
db
->
Êags
 & 
SQLITE_Revî£Ordî
)!=0 ){

4312 
pWInfo
->
ªvMask
 = 
ALLBITS
;

4314 if–
pP¨£
->
nEº
 || 
	`NEVER
(
db
->
mÆlocFaûed
) ){

4315 
whîeBegöEº‹
;

4317 #ifde‡
WHERETRACE_ENABLED


4318 if–
sqlôe3WhîeTø˚
 ){

4319 
	`sqlôe3DebugPrötf
("---- Sﬁuti⁄ÇRow=%d", 
pWInfo
->
nRowOut
);

4320 if–
pWInfo
->
nOBS©
>0 ){

4321 
	`sqlôe3DebugPrötf
(" ORDERBY=%d,0x%Œx", 
pWInfo
->
nOBS©
,ÖWInfo->
ªvMask
);

4323  
pWInfo
->
eDi°ö˘
 ){

4324 
WHERE_DISTINCT_UNIQUE
: {

4325 
	`sqlôe3DebugPrötf
(" DISTINCT=unique");

4328 
WHERE_DISTINCT_ORDERED
: {

4329 
	`sqlôe3DebugPrötf
(" DISTINCT=ordered");

4332 
WHERE_DISTINCT_UNORDERED
: {

4333 
	`sqlôe3DebugPrötf
(" DISTINCT=unordered");

4337 
	`sqlôe3DebugPrötf
("\n");

4338 
ii
=0; ii<
pWInfo
->
nLevñ
; ii++){

4339 
	`whîeLo›Pröt
(
pWInfo
->
a
[
ii
].
pWLo›
, 
sWLB
.
pWC
);

4344 if–
pWInfo
->
nLevñ
>=2

4345 && 
pDi°ö˘Së
!=0

4346 && 
	`O±imiz©i⁄E«bÀd
(
db
, 
SQLITE_OmôNo›Joö
)

4348 
Bômask
 
èbU£d
 = 
	`sqlôe3WhîeEx¥Li°Ußge
(
pMaskSë
, 
pDi°ö˘Së
);

4349 if–
sWLB
.
pOrdîBy
 ){

4350 
èbU£d
 |
	`sqlôe3WhîeEx¥Li°Ußge
(
pMaskSë
, 
sWLB
.
pOrdîBy
);

4352  
pWInfo
->
nLevñ
>=2 ){

4353 
WhîeTîm
 *
pTîm
, *
pEnd
;

4354 
pLo›
 = 
pWInfo
->
a
[pWInfo->
nLevñ
-1].
pWLo›
;

4355 if–(
pWInfo
->
pTabLi°
->
a
[
pLo›
->
iTab
].
fg
.
joöty≥
 & 
JT_LEFT
)==0 ) ;

4356 if–(
w˘æFœgs
 & 
WHERE_WANT_DISTINCT
)==0

4357 && (
pLo›
->
wsFœgs
 & 
WHERE_ONEROW
)==0

4361 if–(
èbU£d
 & 
pLo›
->
maskSñf
)!=0 ) ;

4362 
pEnd
 = 
sWLB
.
pWC
->
a
 + sWLB.pWC->
nTîm
;

4363 
pTîm
=
sWLB
.
pWC
->
a
;ÖTîm<
pEnd
;ÖTerm++){

4364 if–(
pTîm
->
¥îeqAŒ
 & 
pLo›
->
maskSñf
)!=0

4365 && !
	`Ex¥HasPr›îty
(
pTîm
->
pEx¥
, 
EP_FromJoö
)

4370 if–
pTîm
<
pEnd
 ) ;

4371 
	`WHERETRACE
(0xffff, ("-> dr›Üo› %¯nŸ u£d\n", 
pLo›
->
cId
));

4372 
pWInfo
->
nLevñ
--;

4373 
nTabLi°
--;

4376 
	`WHERETRACE
(0xffff,("*** Optimizer Finished ***\n"));

4377 
pWInfo
->
pP¨£
->
nQuîyLo›
 +pWInfo->
nRowOut
;

4382 
	`as£π
–(
w˘æFœgs
 & 
WHERE_ONEPASS_DESIRED
)==0 || 
pWInfo
->
nLevñ
==1 );

4383 if–(
w˘æFœgs
 & 
WHERE_ONEPASS_DESIRED
)!=0 ){

4384 
wsFœgs
 = 
pWInfo
->
a
[0].
pWLo›
->wsFlags;

4385 
bO√row
 = (
wsFœgs
 & 
WHERE_ONEROW
)!=0;

4386 if–
bO√row


4387 || ((
w˘æFœgs
 & 
WHERE_ONEPASS_MULTIROW
)!=0

4388 && 0==(
wsFœgs
 & 
WHERE_VIRTUALTABLE
))

4390 
pWInfo
->
eO√Pass
 = 
bO√row
 ? 
ONEPASS_SINGLE
 : 
ONEPASS_MULTI
;

4391 if–
	`HasRowid
(
pTabLi°
->
a
[0].
pTab
Ë&& (
wsFœgs
 & 
WHERE_IDX_ONLY
) ){

4392 if–
w˘æFœgs
 & 
WHERE_ONEPASS_MULTIROW
 ){

4393 
bF‹dñëe
 = 
OPFLAG_FORDELETE
;

4395 
pWInfo
->
a
[0].
pWLo›
->
wsFœgs
 = (wsFœg†& ~
WHERE_IDX_ONLY
);

4403 
ii
=0, 
pLevñ
=
pWInfo
->
a
; ii<
nTabLi°
; ii++,ÖLevel++){

4404 
TabÀ
 *
pTab
;

4405 
iDb
;

4406 
SrcLi°_ôem
 *
pTabIãm
;

4408 
pTabIãm
 = &
pTabLi°
->
a
[
pLevñ
->
iFrom
];

4409 
pTab
 = 
pTabIãm
->pTab;

4410 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pTab
->
pSchema
);

4411 
pLo›
 = 
pLevñ
->
pWLo›
;

4412 if–(
pTab
->
èbFœgs
 & 
TF_EphemîÆ
)!=0 ||ÖTab->
pSñe˘
 ){

4415 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


4416 if–(
pLo›
->
wsFœgs
 & 
WHERE_VIRTUALTABLE
)!=0 ){

4417 c⁄° *
pVTab
 = (c⁄° *)
	`sqlôe3GëVTabÀ
(
db
, 
pTab
);

4418 
iCur
 = 
pTabIãm
->
iCurs‹
;

4419 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_VO≥n
, 
iCur
, 0, 0, 
pVTab
, 
P4_VTAB
);

4420 }if–
	`IsVútuÆ
(
pTab
) ){

4424 if–(
pLo›
->
wsFœgs
 & 
WHERE_IDX_ONLY
)==0

4425 && (
w˘æFœgs
 & 
WHERE_OMIT_OPEN_CLOSE
)==0 ){

4426 
›
 = 
OP_O≥nRód
;

4427 if–
pWInfo
->
eO√Pass
!=
ONEPASS_OFF
 ){

4428 
›
 = 
OP_O≥nWrôe
;

4429 
pWInfo
->
aiCurO√Pass
[0] = 
pTabIãm
->
iCurs‹
;

4431 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 
pTabIãm
->
iCurs‹
, 
iDb
, 
pTab
, 
›
);

4432 
	`as£π
–
pTabIãm
->
iCurs‹
==
pLevñ
->
iTabCur
 );

4433 
	`ã°ˇ£
–
pWInfo
->
eO√Pass
==
ONEPASS_OFF
 && 
pTab
->
nCﬁ
==
BMS
-1 );

4434 
	`ã°ˇ£
–
pWInfo
->
eO√Pass
==
ONEPASS_OFF
 && 
pTab
->
nCﬁ
==
BMS
 );

4435 if–
pWInfo
->
eO√Pass
==
ONEPASS_OFF
 && 
pTab
->
nCﬁ
<
BMS
 && 
	`HasRowid
(pTab) ){

4436 
Bômask
 
b
 = 
pTabIãm
->
cﬁU£d
;

4437 
n
 = 0;

4438 ; 
b
; b=b>>1, 
n
++){}

4439 
	`sqlôe3VdbeCh™geP4
(
v
, -1, 
	`SQLITE_INT_TO_PTR
(
n
), 
P4_INT32
);

4440 
	`as£π
–
n
<=
pTab
->
nCﬁ
 );

4442 #ifde‡
SQLITE_ENABLE_CURSOR_HINTS


4443 if–
pLo›
->
u
.
båì
.
pIndex
!=0 ){

4444 
	`sqlôe3VdbeCh™geP5
(
v
, 
OPFLAG_SEEKEQ
|
bF‹dñëe
);

4448 
	`sqlôe3VdbeCh™geP5
(
v
, 
bF‹dñëe
);

4450 #ifde‡
SQLITE_ENABLE_COLUMN_USED_MASK


4451 
	`sqlôe3VdbeAddOp4Dup8
(
v
, 
OP_CﬁumnsU£d
, 
pTabIãm
->
iCurs‹
, 0, 0,

4452 (c⁄° 
u8
*)&
pTabIãm
->
cﬁU£d
, 
P4_INT64
);

4455 
	`sqlôe3TabÀLock
(
pP¨£
, 
iDb
, 
pTab
->
äum
, 0,ÖTab->
zName
);

4457 if–
pLo›
->
wsFœgs
 & 
WHERE_INDEXED
 ){

4458 
Index
 *
pIx
 = 
pLo›
->
u
.
båì
.
pIndex
;

4459 
iIndexCur
;

4460 
›
 = 
OP_O≥nRód
;

4462 
	`as£π
–
iAuxArg
!=0 || (
pWInfo
->
w˘æFœgs
 & 
WHERE_ONEPASS_DESIRED
)==0 );

4463 if–!
	`HasRowid
(
pTab
Ë&& 
	`IsPrim¨yKeyIndex
(
pIx
)

4464 && (
w˘æFœgs
 & 
WHERE_ONETABLE_ONLY
)!=0

4468 
iIndexCur
 = 
pLevñ
->
iTabCur
;

4469 
›
 = 0;

4470 }if–
pWInfo
->
eO√Pass
!=
ONEPASS_OFF
 ){

4471 
Index
 *
pJ
 = 
pTabIãm
->
pTab
->
pIndex
;

4472 
iIndexCur
 = 
iAuxArg
;

4473 
	`as£π
–
w˘æFœgs
 & 
WHERE_ONEPASS_DESIRED
 );

4474  
	`ALWAYS
(
pJ
Ë&&ÖJ!=
pIx
 ){

4475 
iIndexCur
++;

4476 
pJ
 =ÖJ->
pNext
;

4478 
›
 = 
OP_O≥nWrôe
;

4479 
pWInfo
->
aiCurO√Pass
[1] = 
iIndexCur
;

4480 }if–
iAuxArg
 && (
w˘æFœgs
 & 
WHERE_ONETABLE_ONLY
)!=0 ){

4481 
iIndexCur
 = 
iAuxArg
;

4482 if–
w˘æFœgs
 & 
WHERE_REOPEN_IDX
 ) 
›
 = 
OP_Re›íIdx
;

4484 
iIndexCur
 = 
pP¨£
->
nTab
++;

4486 
pLevñ
->
iIdxCur
 = 
iIndexCur
;

4487 
	`as£π
–
pIx
->
pSchema
==
pTab
->pSchema );

4488 
	`as£π
–
iIndexCur
>=0 );

4489 if–
›
 ){

4490 
	`sqlôe3VdbeAddOp3
(
v
, 
›
, 
iIndexCur
, 
pIx
->
äum
, 
iDb
);

4491 
	`sqlôe3VdbeSëP4KeyInfo
(
pP¨£
, 
pIx
);

4492 if–(
pLo›
->
wsFœgs
 & 
WHERE_CONSTRAINT
)!=0

4493 && (
pLo›
->
wsFœgs
 & (
WHERE_COLUMN_RANGE
|
WHERE_SKIPSCAN
))==0

4494 && (
pWInfo
->
w˘æFœgs
&
WHERE_ORDERBY_MIN
)==0

4496 
	`sqlôe3VdbeCh™geP5
(
v
, 
OPFLAG_SEEKEQ
);

4498 
	`VdbeCommít
((
v
, "%s", 
pIx
->
zName
));

4499 #ifde‡
SQLITE_ENABLE_COLUMN_USED_MASK


4501 
u64
 
cﬁU£d
 = 0;

4502 
ii
, 
jj
;

4503 
ii
=0; ii<
pIx
->
nCﬁumn
; ii++){

4504 
jj
 = 
pIx
->
aiCﬁumn
[
ii
];

4505 if–
jj
<0 ) ;

4506 if–
jj
>63 ) jj = 63;

4507 if–(
pTabIãm
->
cﬁU£d
 & 
	`MASKBIT
(
jj
))==0 ) ;

4508 
cﬁU£d
 |((
u64
)1)<<(
ii
<63 ? ii : 63);

4510 
	`sqlôe3VdbeAddOp4Dup8
(
v
, 
OP_CﬁumnsU£d
, 
iIndexCur
, 0, 0,

4511 (
u8
*)&
cﬁU£d
, 
P4_INT64
);

4516 if–
iDb
>=0 ) 
	`sqlôe3CodeVîifySchema
(
pP¨£
, iDb);

4518 
pWInfo
->
iT›
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

4519 if–
db
->
mÆlocFaûed
 ) 
whîeBegöEº‹
;

4525 
nŸRódy
 = ~(
Bômask
)0;

4526 
ii
=0; ii<
nTabLi°
; ii++){

4527 
addrEx∂aö
;

4528 
wsFœgs
;

4529 
pLevñ
 = &
pWInfo
->
a
[
ii
];

4530 
wsFœgs
 = 
pLevñ
->
pWLo›
->wsFlags;

4531 #i‚de‡
SQLITE_OMIT_AUTOMATIC_INDEX


4532 if–(
pLevñ
->
pWLo›
->
wsFœgs
 & 
WHERE_AUTO_INDEX
)!=0 ){

4533 
	`c⁄°ru˘Autom©icIndex
(
pP¨£
, &
pWInfo
->
sWC
,

4534 &
pTabLi°
->
a
[
pLevñ
->
iFrom
], 
nŸRódy
,ÖLevel);

4535 if–
db
->
mÆlocFaûed
 ) 
whîeBegöEº‹
;

4538 
addrEx∂aö
 = 
	`sqlôe3WhîeEx∂aöO√Sˇn
(

4539 
pP¨£
, 
pTabLi°
, 
pLevñ
, 
ii
,ÖLevñ->
iFrom
, 
w˘æFœgs


4541 
pLevñ
->
addrBody
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

4542 
nŸRódy
 = 
	`sqlôe3WhîeCodeO√Lo›Sèπ
(
pWInfo
, 
ii
,ÇotReady);

4543 
pWInfo
->
iC⁄töue
 = 
pLevñ
->
addrC⁄t
;

4544 if–(
wsFœgs
&
WHERE_MULTI_OR
)==0 && (
w˘æFœgs
&
WHERE_ONETABLE_ONLY
)==0 ){

4545 
	`sqlôe3WhîeAddSˇnSètus
(
v
, 
pTabLi°
, 
pLevñ
, 
addrEx∂aö
);

4550 
	`VdbeModuÀCommít
((
v
, "Begin WHERE-core"));

4551  
pWInfo
;

4554 
whîeBegöEº‹
:

4555 if–
pWInfo
 ){

4556 
pP¨£
->
nQuîyLo›
 = 
pWInfo
->
ßvedNQuîyLo›
;

4557 
	`whîeInfoFªe
(
db
, 
pWInfo
);

4560 
	}
}

4566 
	$sqlôe3WhîeEnd
(
WhîeInfo
 *
pWInfo
){

4567 
P¨£
 *
pP¨£
 = 
pWInfo
->pParse;

4568 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

4569 
i
;

4570 
WhîeLevñ
 *
pLevñ
;

4571 
WhîeLo›
 *
pLo›
;

4572 
SrcLi°
 *
pTabLi°
 = 
pWInfo
->pTabList;

4573 
sqlôe3
 *
db
 = 
pP¨£
->db;

4577 
	`VdbeModuÀCommít
((
v
, "End WHERE-core"));

4578 
	`sqlôe3Ex¥CacheCÀ¨
(
pP¨£
);

4579 
i
=
pWInfo
->
nLevñ
-1; i>=0; i--){

4580 
addr
;

4581 
pLevñ
 = &
pWInfo
->
a
[
i
];

4582 
pLo›
 = 
pLevñ
->
pWLo›
;

4583 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
pLevñ
->
addrC⁄t
);

4584 if–
pLevñ
->
›
!=
OP_No›
 ){

4585 
	`sqlôe3VdbeAddOp3
(
v
, 
pLevñ
->
›
,ÖLevñ->
p1
,ÖLevñ->
p2
,ÖLevñ->
p3
);

4586 
	`sqlôe3VdbeCh™geP5
(
v
, 
pLevñ
->
p5
);

4587 
	`VdbeCovîage
(
v
);

4588 
	`VdbeCovîageIf
(
v
, 
pLevñ
->
›
==
OP_Next
);

4589 
	`VdbeCovîageIf
(
v
, 
pLevñ
->
›
==
OP_Pªv
);

4590 
	`VdbeCovîageIf
(
v
, 
pLevñ
->
›
==
OP_VNext
);

4592 if–
pLo›
->
wsFœgs
 & 
WHERE_IN_ABLE
 && 
pLevñ
->
u
.
ö
.
nIn
>0 ){

4593 
InLo›
 *
pIn
;

4594 
j
;

4595 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
pLevñ
->
addrNxt
);

4596 
j
=
pLevñ
->
u
.
ö
.
nIn
, 
pIn
=&pLevñ->u.ö.
aInLo›
[j-1]; j>0; j--,ÖIn--){

4597 
	`sqlôe3VdbeJumpHîe
(
v
, 
pIn
->
addrInT›
+1);

4598 
	`sqlôe3VdbeAddOp2
(
v
, 
pIn
->
eEndLo›Op
,ÖIn->
iCur
,ÖIn->
addrInT›
);

4599 
	`VdbeCovîage
(
v
);

4600 
	`VdbeCovîageIf
(
v
, 
pIn
->
eEndLo›Op
==
OP_PªvIfO≥n
);

4601 
	`VdbeCovîageIf
(
v
, 
pIn
->
eEndLo›Op
==
OP_NextIfO≥n
);

4602 
	`sqlôe3VdbeJumpHîe
(
v
, 
pIn
->
addrInT›
-1);

4605 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
pLevñ
->
addrBrk
);

4606 if–
pLevñ
->
addrSkù
 ){

4607 
	`sqlôe3VdbeGŸo
(
v
, 
pLevñ
->
addrSkù
);

4608 
	`VdbeCommít
((
v
, "√xàskù-sˇ¿⁄ %s", 
pLo›
->
u
.
båì
.
pIndex
->
zName
));

4609 
	`sqlôe3VdbeJumpHîe
(
v
, 
pLevñ
->
addrSkù
);

4610 
	`sqlôe3VdbeJumpHîe
(
v
, 
pLevñ
->
addrSkù
-2);

4612 #i‚de‡
SQLITE_LIKE_DOESNT_MATCH_BLOBS


4613 if–
pLevñ
->
addrLikeRï
 ){

4614 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_De¸JumpZîo
, ()(
pLevñ
->
iLikeRïC¡r
>>1),

4615 
pLevñ
->
addrLikeRï
);

4616 
	`VdbeCovîage
(
v
);

4619 if–
pLevñ
->
iLe·Joö
 ){

4620 
addr
 = 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_IfPos
, 
pLevñ
->
iLe·Joö
); 
	`VdbeCovîage
(v);

4621 
	`as£π
–(
pLo›
->
wsFœgs
 & 
WHERE_IDX_ONLY
)==0

4622 || (
pLo›
->
wsFœgs
 & 
WHERE_INDEXED
)!=0 );

4623 if–(
pLo›
->
wsFœgs
 & 
WHERE_IDX_ONLY
)==0 ){

4624 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_NuŒRow
, 
pTabLi°
->
a
[
i
].
iCurs‹
);

4626 if–
pLo›
->
wsFœgs
 & 
WHERE_INDEXED
 ){

4627 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_NuŒRow
, 
pLevñ
->
iIdxCur
);

4629 if–
pLevñ
->
›
==
OP_Rëu∫
 ){

4630 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Gosub
, 
pLevñ
->
p1
,ÖLevñ->
addrFú°
);

4632 
	`sqlôe3VdbeGŸo
(
v
, 
pLevñ
->
addrFú°
);

4634 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr
);

4636 
	`VdbeModuÀCommít
((
v
, "End WHERE-lo›%d: %s", 
i
,

4637 
pWInfo
->
pTabLi°
->
a
[
pLevñ
->
iFrom
].
pTab
->
zName
));

4643 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
pWInfo
->
iBªak
);

4645 
	`as£π
–
pWInfo
->
nLevñ
<=
pTabLi°
->
nSrc
 );

4646 
i
=0, 
pLevñ
=
pWInfo
->
a
; i<pWInfo->
nLevñ
; i++,ÖLevel++){

4647 
k
, 
œ°
;

4648 
VdbeOp
 *
pOp
;

4649 
Index
 *
pIdx
 = 0;

4650 
SrcLi°_ôem
 *
pTabIãm
 = &
pTabLi°
->
a
[
pLevñ
->
iFrom
];

4651 
TabÀ
 *
pTab
 = 
pTabIãm
->pTab;

4652 
	`as£π
–
pTab
!=0 );

4653 
pLo›
 = 
pLevñ
->
pWLo›
;

4659 if–
pTabIãm
->
fg
.
vüC‹outöe
 && !
db
->
mÆlocFaûed
 ){

4660 
	`å™¶©eCﬁumnToC›y
(
v
, 
pLevñ
->
addrBody
,ÖLevñ->
iTabCur
,

4661 
pTabIãm
->
ªgResu…
, 0);

4670 if–(
pTab
->
èbFœgs
 & 
TF_EphemîÆ
)==0

4671 && 
pTab
->
pSñe˘
==0

4672 && (
pWInfo
->
w˘æFœgs
 & 
WHERE_OMIT_OPEN_CLOSE
)==0

4674 
ws
 = 
pLo›
->
wsFœgs
;

4675 if–
pWInfo
->
eO√Pass
==
ONEPASS_OFF
 && (
ws
 & 
WHERE_IDX_ONLY
)==0 ){

4676 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Clo£
, 
pTabIãm
->
iCurs‹
);

4678 if–(
ws
 & 
WHERE_INDEXED
)!=0

4679 && (
ws
 & (
WHERE_IPK
|
WHERE_AUTO_INDEX
))==0

4680 && 
pLevñ
->
iIdxCur
!=
pWInfo
->
aiCurO√Pass
[1]

4682 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_Clo£
, 
pLevñ
->
iIdxCur
);

4697 if–
pLo›
->
wsFœgs
 & (
WHERE_INDEXED
|
WHERE_IDX_ONLY
) ){

4698 
pIdx
 = 
pLo›
->
u
.
båì
.
pIndex
;

4699 }if–
pLo›
->
wsFœgs
 & 
WHERE_MULTI_OR
 ){

4700 
pIdx
 = 
pLevñ
->
u
.
pCovidx
;

4702 if–
pIdx


4703 && (
pWInfo
->
eO√Pass
==
ONEPASS_OFF
 || !
	`HasRowid
(
pIdx
->
pTabÀ
))

4704 && !
db
->
mÆlocFaûed


4706 
œ°
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

4707 
k
 = 
pLevñ
->
addrBody
;

4708 
pOp
 = 
	`sqlôe3VdbeGëOp
(
v
, 
k
);

4709 ; 
k
<
œ°
; k++, 
pOp
++){

4710 if–
pOp
->
p1
!=
pLevñ
->
iTabCur
 ) ;

4711 if–
pOp
->
›code
==
OP_Cﬁumn
 ){

4712 
x
 = 
pOp
->
p2
;

4713 
	`as£π
–
pIdx
->
pTabÀ
==
pTab
 );

4714 if–!
	`HasRowid
(
pTab
) ){

4715 
Index
 *
pPk
 = 
	`sqlôe3Prim¨yKeyIndex
(
pTab
);

4716 
x
 = 
pPk
->
aiCﬁumn
[x];

4717 
	`as£π
–
x
>=0 );

4719 
x
 = 
	`sqlôe3CﬁumnOfIndex
(
pIdx
, x);

4720 if–
x
>=0 ){

4721 
pOp
->
p2
 = 
x
;

4722 
pOp
->
p1
 = 
pLevñ
->
iIdxCur
;

4724 
	`as£π
–(
pLo›
->
wsFœgs
 & 
WHERE_IDX_ONLY
)==0 || 
x
>=0 );

4725 }if–
pOp
->
›code
==
OP_Rowid
 ){

4726 
pOp
->
p1
 = 
pLevñ
->
iIdxCur
;

4727 
pOp
->
›code
 = 
OP_IdxRowid
;

4735 
pP¨£
->
nQuîyLo›
 = 
pWInfo
->
ßvedNQuîyLo›
;

4736 
	`whîeInfoFªe
(
db
, 
pWInfo
);

4738 
	}
}

	@whereInt.h

21 #i‡
deföed
(
SQLITE_TEST
Ë|| deföed(
SQLITE_DEBUG
)

22  
	gsqlôe3WhîeTø˚
;

24 #i‡
deföed
(
SQLITE_DEBUG
) \

25 && (
deföed
(
SQLITE_TEST
Ë|| 
	$deföed
(
SQLITE_ENABLE_WHERETRACE
))

26 
	#WHERETRACE
(
K
,
X
Ëif(
sqlôe3WhîeTø˚
&(K)Ë
sqlôe3DebugPrötf
 
	)
X

27 
	#WHERETRACE_ENABLED
 1

	)

29 
	#WHERETRACE
(
K
,
X
)

	)

34 
WhîeCœu£
 
	tWhîeCœu£
;

35 
WhîeMaskSë
 
	tWhîeMaskSë
;

36 
WhîeOrInfo
 
	tWhîeOrInfo
;

37 
WhîeAndInfo
 
	tWhîeAndInfo
;

38 
WhîeLevñ
 
	tWhîeLevñ
;

39 
WhîeLo›
 
	tWhîeLo›
;

40 
WhîeP©h
 
	tWhîeP©h
;

41 
WhîeTîm
 
	tWhîeTîm
;

42 
WhîeLo›Buûdî
 
	tWhîeLo›Buûdî
;

43 
WhîeSˇn
 
	tWhîeSˇn
;

44 
WhîeOrCo°
 
	tWhîeOrCo°
;

45 
WhîeOrSë
 
	tWhîeOrSë
;

62 
	sWhîeLevñ
 {

63 
iLe·Joö
;

64 
iTabCur
;

65 
iIdxCur
;

66 
addrBrk
;

67 
addrNxt
;

68 
addrSkù
;

69 
addrC⁄t
;

70 
addrFú°
;

71 
addrBody
;

72 #i‚de‡
SQLITE_LIKE_DOESNT_MATCH_BLOBS


73 
u32
 
iLikeRïC¡r
;

74 
addrLikeRï
;

76 
u8
 
iFrom
;

77 
u8
 
›
, 
p3
, 
p5
;

78 
p1
, 
p2
;

81 
nIn
;

82 
	sInLo›
 {

83 
iCur
;

84 
addrInT›
;

85 
u8
 
eEndLo›Op
;

86 } *
aInLo›
;

87 } 
ö
;

88 
Index
 *
pCovidx
;

89 } 
u
;

90 
WhîeLo›
 *
pWLo›
;

91 
Bômask
 
nŸRódy
;

92 #ifde‡
SQLITE_ENABLE_STMT_SCANSTATUS


93 
addrVisô
;

111 
	sWhîeLo›
 {

112 
Bômask
 
¥îeq
;

113 
Bômask
 
maskSñf
;

114 #ifde‡
SQLITE_DEBUG


115 
cId
;

117 
u8
 
iTab
;

118 
u8
 
iS‹tIdx
;

119 
LogE°
 
rSëup
;

120 
LogE°
 
rRun
;

121 
LogE°
 
nOut
;

124 
u16
 
nEq
;

125 
Index
 *
pIndex
;

126 } 
båì
;

128 
idxNum
;

129 
u8
 
√edFªe
;

130 
i8
 
isOrdîed
;

131 
u16
 
omôMask
;

132 *
idxSå
;

133 } 
vèb
;

134 } 
u
;

135 
u32
 
wsFœgs
;

136 
u16
 
nLTîm
;

137 
u16
 
nSkù
;

139 
	#WHERE_LOOP_XFER_SZ
 
	`off£tof
(
WhîeLo›
,
nLSlŸ
)

	)

140 
u16
 
nLSlŸ
;

141 
WhîeTîm
 **
aLTîm
;

142 
WhîeLo›
 *
pNextLo›
;

143 
WhîeTîm
 *
aLTîmS∑˚
[3];

150 
	sWhîeOrCo°
 {

151 
Bômask
 
¥îeq
;

152 
LogE°
 
rRun
;

153 
LogE°
 
nOut
;

160 
	#N_OR_COST
 3

	)

161 
	sWhîeOrSë
 {

162 
u16
 
n
;

163 
WhîeOrCo°
 
a
[
N_OR_COST
];

184 
	sWhîeP©h
 {

185 
Bômask
 
maskLo›
;

186 
Bômask
 
ªvLo›
;

187 
LogE°
 
nRow
;

188 
LogE°
 
rCo°
;

189 
LogE°
 
rUns‹ãd
;

190 
i8
 
isOrdîed
;

191 
WhîeLo›
 **
aLo›
;

245 
	sWhîeTîm
 {

246 
Ex¥
 *
pEx¥
;

247 
iP¨ít
;

248 
À·Curs‹
;

250 
À·Cﬁumn
;

251 
WhîeOrInfo
 *
pOrInfo
;

252 
WhîeAndInfo
 *
pAndInfo
;

253 } 
u
;

254 
LogE°
 
åuthProb
;

255 
u16
 
eO≥øt‹
;

256 
u16
 
wtFœgs
;

257 
u8
 
nChûd
;

258 
u8
 
eM©chOp
;

259 
WhîeCœu£
 *
pWC
;

260 
Bômask
 
¥îeqRight
;

261 
Bômask
 
¥îeqAŒ
;

267 
	#TERM_DYNAMIC
 0x01

	)

268 
	#TERM_VIRTUAL
 0x02

	)

269 
	#TERM_CODED
 0x04

	)

270 
	#TERM_COPIED
 0x08

	)

271 
	#TERM_ORINFO
 0x10

	)

272 
	#TERM_ANDINFO
 0x20

	)

273 
	#TERM_OR_OK
 0x40

	)

274 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


275 
	#TERM_VNULL
 0x80

	)

277 
	#TERM_VNULL
 0x00

	)

279 
	#TERM_LIKEOPT
 0x100

	)

280 
	#TERM_LIKECOND
 0x200

	)

281 
	#TERM_LIKE
 0x400

	)

282 
	#TERM_IS
 0x800

	)

288 
	sWhîeSˇn
 {

289 
WhîeCœu£
 *
pOrigWC
;

290 
WhîeCœu£
 *
pWC
;

291 c⁄° *
zCﬁlName
;

292 
Ex¥
 *
pIdxEx¥
;

293 
idxaff
;

294 
nEquiv
;

295 
iEquiv
;

296 
u32
 
›Mask
;

297 
k
;

298 
aiCur
[11];

299 
i16
 
aiCﬁumn
[11];

314 
	sWhîeCœu£
 {

315 
WhîeInfo
 *
pWInfo
;

316 
WhîeCœu£
 *
pOuãr
;

317 
u8
 
›
;

318 
nTîm
;

319 
nSlŸ
;

320 
WhîeTîm
 *
a
;

321 #i‡
	`deföed
(
SQLITE_SMALL_STACK
)

322 
WhîeTîm
 
aSètic
[1];

324 
WhîeTîm
 
aSètic
[8];

332 
	sWhîeOrInfo
 {

333 
WhîeCœu£
 
wc
;

334 
Bômask
 
ödexabÀ
;

341 
	sWhîeAndInfo
 {

342 
WhîeCœu£
 
wc
;

371 
	sWhîeMaskSë
 {

372 
n
;

373 
ix
[
BMS
];

379 
	#öôMaskSë
(
P
Ë(P)->
n
=0

	)

385 
	sWhîeLo›Buûdî
 {

386 
WhîeInfo
 *
pWInfo
;

387 
WhîeCœu£
 *
pWC
;

388 
Ex¥Li°
 *
pOrdîBy
;

389 
WhîeLo›
 *
pNew
;

390 
WhîeOrSë
 *
pOrSë
;

391 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


392 
U≈ackedRec‹d
 *
pRec
;

393 
nRecVÆid
;

407 
	sWhîeInfo
 {

408 
P¨£
 *
pP¨£
;

409 
SrcLi°
 *
pTabLi°
;

410 
Ex¥Li°
 *
pOrdîBy
;

411 
Ex¥Li°
 *
pDi°ö˘Së
;

412 
WhîeLo›
 *
pLo›s
;

413 
Bômask
 
ªvMask
;

414 
LogE°
 
nRowOut
;

415 
LogE°
 
iLimô
;

416 
u16
 
w˘æFœgs
;

417 
i8
 
nOBS©
;

418 
u8
 
s‹ãd
;

419 
u8
 
eO√Pass
;

420 
u8
 
u¡e°edTîms
;

421 
u8
 
eDi°ö˘
;

422 
u8
 
nLevñ
;

423 
iT›
;

424 
iC⁄töue
;

425 
iBªak
;

426 
ßvedNQuîyLo›
;

427 
aiCurO√Pass
[2];

428 
WhîeMaskSë
 
sMaskSë
;

429 
WhîeCœu£
 
sWC
;

430 
WhîeLevñ
 
a
[1];

438 
Bômask
 
	`sqlôe3WhîeGëMask
(
WhîeMaskSë
*,);

439 
WhîeTîm
 *
	`sqlôe3WhîeFödTîm
(

440 
WhîeCœu£
 *
pWC
,

441 
iCur
,

442 
iCﬁumn
,

443 
Bômask
 
nŸRódy
,

444 
u32
 
›
,

445 
Index
 *
pIdx


449 #i‚de‡
SQLITE_OMIT_EXPLAIN


450 
	`sqlôe3WhîeEx∂aöO√Sˇn
(

451 
P¨£
 *
pP¨£
,

452 
SrcLi°
 *
pTabLi°
,

453 
WhîeLevñ
 *
pLevñ
,

454 
iLevñ
,

455 
iFrom
,

456 
u16
 
w˘æFœgs


459 
	#sqlôe3WhîeEx∂aöO√Sˇn
(
u
,
v
,
w
,
x
,
y
,
z
Ë0

	)

461 #ifde‡
SQLITE_ENABLE_STMT_SCANSTATUS


462 
	`sqlôe3WhîeAddSˇnSètus
(

463 
Vdbe
 *
v
,

464 
SrcLi°
 *
pSr˛i°
,

465 
WhîeLevñ
 *
pLvl
,

466 
addrEx∂aö


469 
	#sqlôe3WhîeAddSˇnSètus
(
a
, 
b
, 
c
, 
d
Ë(()d)

	)

471 
Bômask
 
	`sqlôe3WhîeCodeO√Lo›Sèπ
(

472 
WhîeInfo
 *
pWInfo
,

473 
iLevñ
,

474 
Bômask
 
nŸRódy


478 
	`sqlôe3WhîeCœu£Inô
(
WhîeCœu£
*,
WhîeInfo
*);

479 
	`sqlôe3WhîeCœu£CÀ¨
(
WhîeCœu£
*);

480 
	`sqlôe3WhîeS∂ô
(
WhîeCœu£
*,
Ex¥
*,
u8
);

481 
Bômask
 
	`sqlôe3WhîeEx¥Ußge
(
WhîeMaskSë
*, 
Ex¥
*);

482 
Bômask
 
	`sqlôe3WhîeEx¥Li°Ußge
(
WhîeMaskSë
*, 
Ex¥Li°
*);

483 
	`sqlôe3WhîeEx¥A«lyze
(
SrcLi°
*, 
WhîeCœu£
*);

484 
	`sqlôe3WhîeTabFuncArgs
(
P¨£
*, 
SrcLi°_ôem
*, 
WhîeCœu£
*);

504 
	#WO_IN
 0x0001

	)

505 
	#WO_EQ
 0x0002

	)

506 
	#WO_LT
 (
WO_EQ
<<(
TK_LT
-
TK_EQ
))

	)

507 
	#WO_LE
 (
WO_EQ
<<(
TK_LE
-
TK_EQ
))

	)

508 
	#WO_GT
 (
WO_EQ
<<(
TK_GT
-
TK_EQ
))

	)

509 
	#WO_GE
 (
WO_EQ
<<(
TK_GE
-
TK_EQ
))

	)

510 
	#WO_MATCH
 0x0040

	)

511 
	#WO_IS
 0x0080

	)

512 
	#WO_ISNULL
 0x0100

	)

513 
	#WO_OR
 0x0200

	)

514 
	#WO_AND
 0x0400

	)

515 
	#WO_EQUIV
 0x0800

	)

516 
	#WO_NOOP
 0x1000

	)

518 
	#WO_ALL
 0x1ff‡

	)

519 
	#WO_SINGLE
 0x01f‡

	)

526 
	#WHERE_COLUMN_EQ
 0x00000001

	)

527 
	#WHERE_COLUMN_RANGE
 0x00000002

	)

528 
	#WHERE_COLUMN_IN
 0x00000004

	)

529 
	#WHERE_COLUMN_NULL
 0x00000008

	)

530 
	#WHERE_CONSTRAINT
 0x0000000‡

	)

531 
	#WHERE_TOP_LIMIT
 0x00000010

	)

532 
	#WHERE_BTM_LIMIT
 0x00000020

	)

533 
	#WHERE_BOTH_LIMIT
 0x00000030

	)

534 
	#WHERE_IDX_ONLY
 0x00000040

	)

535 
	#WHERE_IPK
 0x00000100

	)

536 
	#WHERE_INDEXED
 0x00000200

	)

537 
	#WHERE_VIRTUALTABLE
 0x00000400

	)

538 
	#WHERE_IN_ABLE
 0x00000800

	)

539 
	#WHERE_ONEROW
 0x00001000

	)

540 
	#WHERE_MULTI_OR
 0x00002000

	)

541 
	#WHERE_AUTO_INDEX
 0x00004000

	)

542 
	#WHERE_SKIPSCAN
 0x00008000

	)

543 
	#WHERE_UNQ_WANTED
 0x00010000

	)

544 
	#WHERE_PARTIALIDX
 0x00020000

	)

	@wherecode.c

20 
	~"sqlôeI¡.h
"

21 
	~"whîeI¡.h
"

23 #i‚de‡
SQLITE_OMIT_EXPLAIN


32 
	$ex∂aöAµídTîm
(

33 
SåAccum
 *
pSå
,

34 
iTîm
,

35 c⁄° *
zCﬁumn
,

36 c⁄° *
zOp


38 if–
iTîm
 ) 
	`sqlôe3SåAccumAµíd
(
pSå
, " AND ", 5);

39 
	`sqlôe3SåAccumAµídAŒ
(
pSå
, 
zCﬁumn
);

40 
	`sqlôe3SåAccumAµíd
(
pSå
, 
zOp
, 1);

41 
	`sqlôe3SåAccumAµíd
(
pSå
, "?", 1);

42 
	}
}

47 c⁄° *
	$ex∂aöIndexCﬁumnName
(
Index
 *
pIdx
, 
i
){

48 
i
 = 
pIdx
->
aiCﬁumn
[i];

49 if–
i
==
XN_EXPR
 )  "<expr>";

50 if–
i
==
XN_ROWID
 )  "rowid";

51  
pIdx
->
pTabÀ
->
aCﬁ
[
i
].
zName
;

52 
	}
}

68 
	$ex∂aöIndexR™ge
(
SåAccum
 *
pSå
, 
WhîeLo›
 *
pLo›
){

69 
Index
 *
pIndex
 = 
pLo›
->
u
.
båì
.pIndex;

70 
u16
 
nEq
 = 
pLo›
->
u
.
båì
.nEq;

71 
u16
 
nSkù
 = 
pLo›
->nSkip;

72 
i
, 
j
;

74 if–
nEq
==0 && (
pLo›
->
wsFœgs
&(
WHERE_BTM_LIMIT
|
WHERE_TOP_LIMIT
))==0 ) ;

75 
	`sqlôe3SåAccumAµíd
(
pSå
, " (", 2);

76 
i
=0; i<
nEq
; i++){

77 c⁄° *
z
 = 
	`ex∂aöIndexCﬁumnName
(
pIndex
, 
i
);

78 if–
i
 ) 
	`sqlôe3SåAccumAµíd
(
pSå
, " AND ", 5);

79 
	`sqlôe3XPrötf
(
pSå
, 
i
>=
nSkù
 ? "%s=?" : "ANY(%s)", 
z
);

82 
j
 = 
i
;

83 if–
pLo›
->
wsFœgs
&
WHERE_BTM_LIMIT
 ){

84 c⁄° *
z
 = 
	`ex∂aöIndexCﬁumnName
(
pIndex
, 
i
);

85 
	`ex∂aöAµídTîm
(
pSå
, 
i
++, 
z
, ">");

87 if–
pLo›
->
wsFœgs
&
WHERE_TOP_LIMIT
 ){

88 c⁄° *
z
 = 
	`ex∂aöIndexCﬁumnName
(
pIndex
, 
j
);

89 
	`ex∂aöAµídTîm
(
pSå
, 
i
, 
z
, "<");

91 
	`sqlôe3SåAccumAµíd
(
pSå
, ")", 1);

92 
	}
}

103 
	$sqlôe3WhîeEx∂aöO√Sˇn
(

104 
P¨£
 *
pP¨£
,

105 
SrcLi°
 *
pTabLi°
,

106 
WhîeLevñ
 *
pLevñ
,

107 
iLevñ
,

108 
iFrom
,

109 
u16
 
w˘æFœgs


111 
ªt
 = 0;

112 #i‡!
	`deföed
(
SQLITE_DEBUG
Ë&& !deföed(
SQLITE_ENABLE_STMT_SCANSTATUS
)

113 if–
pP¨£
->
ex∂aö
==2 )

116 
SrcLi°_ôem
 *
pIãm
 = &
pTabLi°
->
a
[
pLevñ
->
iFrom
];

117 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

118 
sqlôe3
 *
db
 = 
pP¨£
->db;

119 
iId
 = 
pP¨£
->
iSñe˘Id
;

120 
isSórch
;

121 
WhîeLo›
 *
pLo›
;

122 
u32
 
Êags
;

123 *
zMsg
;

124 
SåAccum
 
°r
;

125 
zBuf
[100];

127 
pLo›
 = 
pLevñ
->
pWLo›
;

128 
Êags
 = 
pLo›
->
wsFœgs
;

129 if–(
Êags
&
WHERE_MULTI_OR
Ë|| (
w˘æFœgs
&
WHERE_ONETABLE_ONLY
) )  0;

131 
isSórch
 = (
Êags
&(
WHERE_BTM_LIMIT
|
WHERE_TOP_LIMIT
))!=0

132 || ((
Êags
&
WHERE_VIRTUALTABLE
)==0 && (
pLo›
->
u
.
båì
.
nEq
>0))

133 || (
w˘æFœgs
&(
WHERE_ORDERBY_MIN
|
WHERE_ORDERBY_MAX
));

135 
	`sqlôe3SåAccumInô
(&
°r
, 
db
, 
zBuf
, (zBuf), 
SQLITE_MAX_LENGTH
);

136 
	`sqlôe3SåAccumAµídAŒ
(&
°r
, 
isSórch
 ? "SEARCH" : "SCAN");

137 if–
pIãm
->
pSñe˘
 ){

138 
	`sqlôe3XPrötf
(&
°r
, " SUBQUERY %d", 
pIãm
->
iSñe˘Id
);

140 
	`sqlôe3XPrötf
(&
°r
, " TABLE %s", 
pIãm
->
zName
);

143 if–
pIãm
->
zAlüs
 ){

144 
	`sqlôe3XPrötf
(&
°r
, " AS %s", 
pIãm
->
zAlüs
);

146 if–(
Êags
 & (
WHERE_IPK
|
WHERE_VIRTUALTABLE
))==0 ){

147 c⁄° *
zFmt
 = 0;

148 
Index
 *
pIdx
;

150 
	`as£π
–
pLo›
->
u
.
båì
.
pIndex
!=0 );

151 
pIdx
 = 
pLo›
->
u
.
båì
.
pIndex
;

152 
	`as£π
–!(
Êags
&
WHERE_AUTO_INDEX
Ë|| (Êags&
WHERE_IDX_ONLY
) );

153 if–!
	`HasRowid
(
pIãm
->
pTab
Ë&& 
	`IsPrim¨yKeyIndex
(
pIdx
) ){

154 if–
isSórch
 ){

155 
zFmt
 = "PRIMARY KEY";

157 }if–
Êags
 & 
WHERE_PARTIALIDX
 ){

158 
zFmt
 = "AUTOMATIC PARTIAL COVERING INDEX";

159 }if–
Êags
 & 
WHERE_AUTO_INDEX
 ){

160 
zFmt
 = "AUTOMATIC COVERING INDEX";

161 }if–
Êags
 & 
WHERE_IDX_ONLY
 ){

162 
zFmt
 = "COVERING INDEX %s";

164 
zFmt
 = "INDEX %s";

166 if–
zFmt
 ){

167 
	`sqlôe3SåAccumAµíd
(&
°r
, " USING ", 7);

168 
	`sqlôe3XPrötf
(&
°r
, 
zFmt
, 
pIdx
->
zName
);

169 
	`ex∂aöIndexR™ge
(&
°r
, 
pLo›
);

171 }if–(
Êags
 & 
WHERE_IPK
)!=0 && (Êag†& 
WHERE_CONSTRAINT
)!=0 ){

172 c⁄° *
zR™geOp
;

173 if–
Êags
&(
WHERE_COLUMN_EQ
|
WHERE_COLUMN_IN
) ){

174 
zR™geOp
 = "=";

175 }if–(
Êags
&
WHERE_BOTH_LIMIT
)==WHERE_BOTH_LIMIT ){

176 
zR™geOp
 = ">? ANDÑowid<";

177 }if–
Êags
&
WHERE_BTM_LIMIT
 ){

178 
zR™geOp
 = ">";

180 
	`as£π
–
Êags
&
WHERE_TOP_LIMIT
);

181 
zR™geOp
 = "<";

183 
	`sqlôe3XPrötf
(&
°r
, " USING INTEGER PRIMARY KEY (rowid%s?)",
zR™geOp
);

185 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


186 if–(
Êags
 & 
WHERE_VIRTUALTABLE
)!=0 ){

187 
	`sqlôe3XPrötf
(&
°r
, " VIRTUAL TABLE INDEX %d:%s",

188 
pLo›
->
u
.
vèb
.
idxNum
,ÖLo›->u.vèb.
idxSå
);

191 #ifde‡
SQLITE_EXPLAIN_ESTIMATED_ROWS


192 if–
pLo›
->
nOut
>=10 ){

193 
	`sqlôe3XPrötf
(&
°r
, " (~%ŒuÑows)", 
	`sqlôe3LogE°ToI¡
(
pLo›
->
nOut
));

195 
	`sqlôe3SåAccumAµíd
(&
°r
, " (~1Ñow)", 9);

198 
zMsg
 = 
	`sqlôe3SåAccumFöish
(&
°r
);

199 
ªt
 = 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Ex∂aö
, 
iId
, 
iLevñ
, 
iFrom
, 
zMsg
,
P4_DYNAMIC
);

201  
ªt
;

202 
	}
}

205 #ifde‡
SQLITE_ENABLE_STMT_SCANSTATUS


215 
	$sqlôe3WhîeAddSˇnSètus
(

216 
Vdbe
 *
v
,

217 
SrcLi°
 *
pSr˛i°
,

218 
WhîeLevñ
 *
pLvl
,

219 
addrEx∂aö


221 c⁄° *
zObj
 = 0;

222 
WhîeLo›
 *
pLo›
 = 
pLvl
->
pWLo›
;

223 if–(
pLo›
->
wsFœgs
 & 
WHERE_VIRTUALTABLE
)==0 &&ÖLo›->
u
.
båì
.
pIndex
!=0 ){

224 
zObj
 = 
pLo›
->
u
.
båì
.
pIndex
->
zName
;

226 
zObj
 = 
pSr˛i°
->
a
[
pLvl
->
iFrom
].
zName
;

228 
	`sqlôe3VdbeSˇnSètus
(

229 
v
, 
addrEx∂aö
, 
pLvl
->
addrBody
,ÖLvl->
addrVisô
, 
pLo›
->
nOut
, 
zObj


231 
	}
}

277 
	$dißbÀTîm
(
WhîeLevñ
 *
pLevñ
, 
WhîeTîm
 *
pTîm
){

278 
nLo›
 = 0;

279  
pTîm


280 && (
pTîm
->
wtFœgs
 & 
TERM_CODED
)==0

281 && (
pLevñ
->
iLe·Joö
==0 || 
	`Ex¥HasPr›îty
(
pTîm
->
pEx¥
, 
EP_FromJoö
))

282 && (
pLevñ
->
nŸRódy
 & 
pTîm
->
¥îeqAŒ
)==0

284 if–
nLo›
 && (
pTîm
->
wtFœgs
 & 
TERM_LIKE
)!=0 ){

285 
pTîm
->
wtFœgs
 |
TERM_LIKECOND
;

287 
pTîm
->
wtFœgs
 |
TERM_CODED
;

289 if–
pTîm
->
iP¨ít
<0 ) ;

290 
pTîm
 = &pTîm->
pWC
->
a
[pTîm->
iP¨ít
];

291 
pTîm
->
nChûd
--;

292 if–
pTîm
->
nChûd
!=0 ) ;

293 
nLo›
++;

295 
	}
}

308 
	$codeAµlyAfföôy
(
P¨£
 *
pP¨£
, 
ba£
, 
n
, *
zAff
){

309 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

310 if–
zAff
==0 ){

311 
	`as£π
–
pP¨£
->
db
->
mÆlocFaûed
 );

314 
	`as£π
–
v
!=0 );

319  
n
>0 && 
zAff
[0]==
SQLITE_AFF_BLOB
 ){

320 
n
--;

321 
ba£
++;

322 
zAff
++;

324  
n
>1 && 
zAff
[n-1]==
SQLITE_AFF_BLOB
 ){

325 
n
--;

329 if–
n
>0 ){

330 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Afföôy
, 
ba£
, 
n
, 0, 
zAff
,Ç);

331 
	`sqlôe3Ex¥CacheAfföôyCh™ge
(
pP¨£
, 
ba£
, 
n
);

333 
	}
}

347 
	$codeEquÆôyTîm
(

348 
P¨£
 *
pP¨£
,

349 
WhîeTîm
 *
pTîm
,

350 
WhîeLevñ
 *
pLevñ
,

351 
iEq
,

352 
bRev
,

353 
iT¨gë


355 
Ex¥
 *
pX
 = 
pTîm
->
pEx¥
;

356 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

357 
iReg
;

359 
	`as£π
–
iT¨gë
>0 );

360 if–
pX
->
›
==
TK_EQ
 ||ÖX->›==
TK_IS
 ){

361 
iReg
 = 
	`sqlôe3Ex¥CodeT¨gë
(
pP¨£
, 
pX
->
pRight
, 
iT¨gë
);

362 }if–
pX
->
›
==
TK_ISNULL
 ){

363 
iReg
 = 
iT¨gë
;

364 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NuŒ
, 0, 
iReg
);

365 #i‚de‡
SQLITE_OMIT_SUBQUERY


367 
eTy≥
;

368 
iTab
;

369 
InLo›
 *
pIn
;

370 
WhîeLo›
 *
pLo›
 = 
pLevñ
->
pWLo›
;

372 if–(
pLo›
->
wsFœgs
 & 
WHERE_VIRTUALTABLE
)==0

373 && 
pLo›
->
u
.
båì
.
pIndex
!=0

374 && 
pLo›
->
u
.
båì
.
pIndex
->
aS‹tOrdî
[
iEq
]

376 
	`ã°ˇ£
–
iEq
==0 );

377 
	`ã°ˇ£
–
bRev
 );

378 
bRev
 = !bRev;

380 
	`as£π
–
pX
->
›
==
TK_IN
 );

381 
iReg
 = 
iT¨gë
;

382 
eTy≥
 = 
	`sqlôe3FödInIndex
(
pP¨£
, 
pX
, 
IN_INDEX_LOOP
, 0);

383 if–
eTy≥
==
IN_INDEX_INDEX_DESC
 ){

384 
	`ã°ˇ£
–
bRev
 );

385 
bRev
 = !bRev;

387 
iTab
 = 
pX
->
iTabÀ
;

388 
	`sqlôe3VdbeAddOp2
(
v
, 
bRev
 ? 
OP_La°
 : 
OP_Rewöd
, 
iTab
, 0);

389 
	`VdbeCovîageIf
(
v
, 
bRev
);

390 
	`VdbeCovîageIf
(
v
, !
bRev
);

391 
	`as£π
–(
pLo›
->
wsFœgs
 & 
WHERE_MULTI_OR
)==0 );

392 
pLo›
->
wsFœgs
 |
WHERE_IN_ABLE
;

393 if–
pLevñ
->
u
.
ö
.
nIn
==0 ){

394 
pLevñ
->
addrNxt
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

396 
pLevñ
->
u
.
ö
.
nIn
++;

397 
pLevñ
->
u
.
ö
.
aInLo›
 =

398 
	`sqlôe3DbRóŒocOrFªe
(
pP¨£
->
db
, 
pLevñ
->
u
.
ö
.
aInLo›
,

399 (
pLevñ
->
u
.
ö
.
aInLo›
[0])*pLevñ->u.ö.
nIn
);

400 
pIn
 = 
pLevñ
->
u
.
ö
.
aInLo›
;

401 if–
pIn
 ){

402 
pIn
 +
pLevñ
->
u
.
ö
.
nIn
 - 1;

403 
pIn
->
iCur
 = 
iTab
;

404 if–
eTy≥
==
IN_INDEX_ROWID
 ){

405 
pIn
->
addrInT›
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Rowid
, 
iTab
, 
iReg
);

407 
pIn
->
addrInT›
 = 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Cﬁumn
, 
iTab
, 0, 
iReg
);

409 
pIn
->
eEndLo›Op
 = 
bRev
 ? 
OP_PªvIfO≥n
 : 
OP_NextIfO≥n
;

410 
	`sqlôe3VdbeAddOp1
(
v
, 
OP_IsNuŒ
, 
iReg
); 
	`VdbeCovîage
(v);

412 
pLevñ
->
u
.
ö
.
nIn
 = 0;

416 
	`dißbÀTîm
(
pLevñ
, 
pTîm
);

417  
iReg
;

418 
	}
}

465 
	$codeAŒEquÆôyTîms
(

466 
P¨£
 *
pP¨£
,

467 
WhîeLevñ
 *
pLevñ
,

468 
bRev
,

469 
nExåaReg
,

470 **
pzAff


472 
u16
 
nEq
;

473 
u16
 
nSkù
;

474 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

475 
Index
 *
pIdx
;

476 
WhîeTîm
 *
pTîm
;

477 
WhîeLo›
 *
pLo›
;

478 
j
;

479 
ªgBa£
;

480 
nReg
;

481 *
zAff
;

484 
pLo›
 = 
pLevñ
->
pWLo›
;

485 
	`as£π
–(
pLo›
->
wsFœgs
 & 
WHERE_VIRTUALTABLE
)==0 );

486 
nEq
 = 
pLo›
->
u
.
båì
.nEq;

487 
nSkù
 = 
pLo›
->nSkip;

488 
pIdx
 = 
pLo›
->
u
.
båì
.
pIndex
;

489 
	`as£π
–
pIdx
!=0 );

493 
ªgBa£
 = 
pP¨£
->
nMem
 + 1;

494 
nReg
 = 
pLo›
->
u
.
båì
.
nEq
 + 
nExåaReg
;

495 
pP¨£
->
nMem
 +
nReg
;

497 
zAff
 = 
	`sqlôe3DbSåDup
(
pP¨£
->
db
,
	`sqlôe3IndexAfföôySå
’P¨£->db,
pIdx
));

498 
	`as£π
–
zAff
!=0 || 
pP¨£
->
db
->
mÆlocFaûed
 );

500 if–
nSkù
 ){

501 
iIdxCur
 = 
pLevñ
->iIdxCur;

502 
	`sqlôe3VdbeAddOp1
(
v
, (
bRev
?
OP_La°
:
OP_Rewöd
), 
iIdxCur
);

503 
	`VdbeCovîageIf
(
v
, 
bRev
==0);

504 
	`VdbeCovîageIf
(
v
, 
bRev
!=0);

505 
	`VdbeCommít
((
v
, "begö skù-sˇ¿⁄ %s", 
pIdx
->
zName
));

506 
j
 = 
	`sqlôe3VdbeAddOp0
(
v
, 
OP_GŸo
);

507 
pLevñ
->
addrSkù
 = 
	`sqlôe3VdbeAddOp4I¡
(
v
, (
bRev
?
OP_SìkLT
:
OP_SìkGT
),

508 
iIdxCur
, 0, 
ªgBa£
, 
nSkù
);

509 
	`VdbeCovîageIf
(
v
, 
bRev
==0);

510 
	`VdbeCovîageIf
(
v
, 
bRev
!=0);

511 
	`sqlôe3VdbeJumpHîe
(
v
, 
j
);

512 
j
=0; j<
nSkù
; j++){

513 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Cﬁumn
, 
iIdxCur
, 
j
, 
ªgBa£
+j);

514 
	`ã°ˇ£
–
pIdx
->
aiCﬁumn
[
j
]==
XN_EXPR
 );

515 
	`VdbeCommít
((
v
, "%s", 
	`ex∂aöIndexCﬁumnName
(
pIdx
, 
j
)));

521 
	`as£π
–
zAff
==0 || ()
	`°æí
(zAff)>=
nEq
 );

522 
j
=
nSkù
; j<
nEq
; j++){

523 
r1
;

524 
pTîm
 = 
pLo›
->
aLTîm
[
j
];

525 
	`as£π
–
pTîm
!=0 );

528 
	`ã°ˇ£
–(
pTîm
->
wtFœgs
 & 
TERM_CODED
)!=0 );

529 
	`ã°ˇ£
–
pTîm
->
wtFœgs
 & 
TERM_VIRTUAL
 );

530 
r1
 = 
	`codeEquÆôyTîm
(
pP¨£
, 
pTîm
, 
pLevñ
, 
j
, 
bRev
, 
ªgBa£
+j);

531 if–
r1
!=
ªgBa£
+
j
 ){

532 if–
nReg
==1 ){

533 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
ªgBa£
);

534 
ªgBa£
 = 
r1
;

536 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_SC›y
, 
r1
, 
ªgBa£
+
j
);

539 
	`ã°ˇ£
–
pTîm
->
eO≥øt‹
 & 
WO_ISNULL
 );

540 
	`ã°ˇ£
–
pTîm
->
eO≥øt‹
 & 
WO_IN
 );

541 if–(
pTîm
->
eO≥øt‹
 & (
WO_ISNULL
|
WO_IN
))==0 ){

542 
Ex¥
 *
pRight
 = 
pTîm
->
pEx¥
->pRight;

543 if–(
pTîm
->
wtFœgs
 & 
TERM_IS
)==0 && 
	`sqlôe3Ex¥C™BeNuŒ
(
pRight
) ){

544 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IsNuŒ
, 
ªgBa£
+
j
, 
pLevñ
->
addrBrk
);

545 
	`VdbeCovîage
(
v
);

547 if–
zAff
 ){

548 if–
	`sqlôe3Com∑ªAfföôy
(
pRight
, 
zAff
[
j
])==
SQLITE_AFF_BLOB
 ){

549 
zAff
[
j
] = 
SQLITE_AFF_BLOB
;

551 if–
	`sqlôe3Ex¥NìdsNoAfföôyCh™ge
(
pRight
, 
zAff
[
j
]) ){

552 
zAff
[
j
] = 
SQLITE_AFF_BLOB
;

557 *
pzAff
 = 
zAff
;

558  
ªgBa£
;

559 
	}
}

561 #i‚de‡
SQLITE_LIKE_DOESNT_MATCH_BLOBS


579 
	$whîeLikeO±imiz©i⁄SåögFixup
(

580 
Vdbe
 *
v
,

581 
WhîeLevñ
 *
pLevñ
,

582 
WhîeTîm
 *
pTîm


584 if–
pTîm
->
wtFœgs
 & 
TERM_LIKEOPT
 ){

585 
VdbeOp
 *
pOp
;

586 
	`as£π
–
pLevñ
->
iLikeRïC¡r
>0 );

587 
pOp
 = 
	`sqlôe3VdbeGëOp
(
v
, -1);

588 
	`as£π
–
pOp
!=0 );

589 
	`as£π
–
pOp
->
›code
==
OP_Såög8


590 || 
pTîm
->
pWC
->
pWInfo
->
pP¨£
->
db
->
mÆlocFaûed
 );

591 
pOp
->
p3
 = ()(
pLevñ
->
iLikeRïC¡r
>>1);

592 
pOp
->
p5
 = (
u8
)(
pLevñ
->
iLikeRïC¡r
&1);

594 
	}
}

596 
	#whîeLikeO±imiz©i⁄SåögFixup
(
A
,
B
,
C
)

	)

599 #ifde‡
SQLITE_ENABLE_CURSOR_HINTS


605 
	sCCurHöt
 {

606 
	miTabCur
;

607 
	miIdxCur
;

608 
Index
 *
	mpIdx
;

617 
	$codeCurs‹HötCheckEx¥
(
WÆkî
 *
pWÆkî
, 
Ex¥
 *
pEx¥
){

618 
CCurHöt
 *
pHöt
 = 
pWÆkî
->
u
.
pCCurHöt
;

619 
	`as£π
–
pHöt
->
pIdx
!=0 );

620 if–
pEx¥
->
›
==
TK_COLUMN


621 && 
pEx¥
->
iTabÀ
==
pHöt
->
iTabCur


622 && 
	`sqlôe3CﬁumnOfIndex
(
pHöt
->
pIdx
, 
pEx¥
->
iCﬁumn
)<0

624 
pWÆkî
->
eCode
 = 1;

626  
WRC_C⁄töue
;

627 
	}
}

647 
	$codeCurs‹HötFixEx¥
(
WÆkî
 *
pWÆkî
, 
Ex¥
 *
pEx¥
){

648 
rc
 = 
WRC_C⁄töue
;

649 
CCurHöt
 *
pHöt
 = 
pWÆkî
->
u
.
pCCurHöt
;

650 if–
pEx¥
->
›
==
TK_COLUMN
 ){

651 if–
pEx¥
->
iTabÀ
!=
pHöt
->
iTabCur
 ){

652 
Vdbe
 *
v
 = 
pWÆkî
->
pP¨£
->
pVdbe
;

653 
ªg
 = ++
pWÆkî
->
pP¨£
->
nMem
;

654 
	`sqlôe3Ex¥CodeGëCﬁumnOfTabÀ
(

655 
v
, 
pEx¥
->
pTab
,ÖEx¥->
iTabÀ
,ÖEx¥->
iCﬁumn
, 
ªg


657 
pEx¥
->
›
 = 
TK_REGISTER
;

658 
pEx¥
->
iTabÀ
 = 
ªg
;

659 }if–
pHöt
->
pIdx
!=0 ){

660 
pEx¥
->
iTabÀ
 = 
pHöt
->
iIdxCur
;

661 
pEx¥
->
iCﬁumn
 = 
	`sqlôe3CﬁumnOfIndex
(
pHöt
->
pIdx
,ÖExpr->iColumn);

662 
	`as£π
–
pEx¥
->
iCﬁumn
>=0 );

664 }if–
pEx¥
->
›
==
TK_AGG_FUNCTION
 ){

672 
rc
 = 
WRC_Pru√
;

674  
rc
;

675 
	}
}

680 
	$codeCurs‹Höt
(

681 
WhîeInfo
 *
pWInfo
,

682 
WhîeLevñ
 *
pLevñ
,

683 
WhîeTîm
 *
pEndR™ge


685 
P¨£
 *
pP¨£
 = 
pWInfo
->pParse;

686 
sqlôe3
 *
db
 = 
pP¨£
->db;

687 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

688 
Ex¥
 *
pEx¥
 = 0;

689 
WhîeLo›
 *
pLo›
 = 
pLevñ
->
pWLo›
;

690 
iCur
;

691 
WhîeCœu£
 *
pWC
;

692 
WhîeTîm
 *
pTîm
;

693 
i
, 
j
;

694 
CCurHöt
 
sHöt
;

695 
WÆkî
 
sWÆkî
;

697 if–
	`O±imiz©i⁄DißbÀd
(
db
, 
SQLITE_Curs‹Höts
) ) ;

698 
iCur
 = 
pLevñ
->
iTabCur
;

699 
	`as£π
–
iCur
==
pWInfo
->
pTabLi°
->
a
[
pLevñ
->
iFrom
].
iCurs‹
 );

700 
sHöt
.
iTabCur
 = 
iCur
;

701 
sHöt
.
iIdxCur
 = 
pLevñ
->iIdxCur;

702 
sHöt
.
pIdx
 = 
pLo›
->
u
.
båì
.
pIndex
;

703 
	`mem£t
(&
sWÆkî
, 0, (sWalker));

704 
sWÆkî
.
pP¨£
 =ÖParse;

705 
sWÆkî
.
u
.
pCCurHöt
 = &
sHöt
;

706 
pWC
 = &
pWInfo
->
sWC
;

707 
i
=0; i<
pWC
->
nTîm
; i++){

708 
pTîm
 = &
pWC
->
a
[
i
];

709 if–
pTîm
->
wtFœgs
 & (
TERM_VIRTUAL
|
TERM_CODED
) ) ;

710 if–
pTîm
->
¥îeqAŒ
 & 
pLevñ
->
nŸRódy
 ) ;

711 if–
	`Ex¥HasPr›îty
(
pTîm
->
pEx¥
, 
EP_FromJoö
) ) ;

716 if–
pLo›
->
u
.
båì
.
nEq
==0 && 
pTîm
!=
pEndR™ge
 ){

717 
j
=0; j<
pLo›
->
nLTîm
 &&ÖLo›->
aLTîm
[j]!=
pTîm
; j++){}

718 if–
j
<
pLo›
->
nLTîm
 ) ;

722 if–
	`sqlôe3Ex¥C⁄èösSubquîy
(
pTîm
->
pEx¥
) ) ;

726 if–
sHöt
.
pIdx
!=0 ){

727 
sWÆkî
.
eCode
 = 0;

728 
sWÆkî
.
xEx¥CÆlback
 = 
codeCurs‹HötCheckEx¥
;

729 
	`sqlôe3WÆkEx¥
(&
sWÆkî
, 
pTîm
->
pEx¥
);

730 if–
sWÆkî
.
eCode
 ) ;

734 
pEx¥
 = 
	`sqlôe3Ex¥And
(
db
,ÖEx¥, 
	`sqlôe3Ex¥Dup
(db, 
pTîm
->pExpr, 0));

736 if–
pEx¥
!=0 ){

737 
sWÆkî
.
xEx¥CÆlback
 = 
codeCurs‹HötFixEx¥
;

738 
	`sqlôe3WÆkEx¥
(&
sWÆkî
, 
pEx¥
);

739 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_Curs‹Höt
,

740 (
sHöt
.
pIdx
 ? sHöt.
iIdxCur
 : sHöt.
iTabCur
), 0, 0,

741 (c⁄° *)
pEx¥
, 
P4_EXPR
);

743 
	}
}

745 
	#codeCurs‹Höt
(
A
,
B
,
C
Ë

	)

766 
	$codeDe„ºedSìk
(

767 
WhîeInfo
 *
pWInfo
,

768 
Index
 *
pIdx
,

769 
iCur
,

770 
iIdxCur


772 
P¨£
 *
pP¨£
 = 
pWInfo
->pParse;

773 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

775 
	`as£π
–
iIdxCur
>0 );

776 
	`as£π
–
pIdx
->
aiCﬁumn
[pIdx->
nCﬁumn
-1]==-1 );

778 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Sìk
, 
iIdxCur
, 0, 
iCur
);

779 if–(
pWInfo
->
w˘æFœgs
 & 
WHERE_FORCE_TABLE
)

780 && 
	`DbMaskAŒZîo
(
	`sqlôe3P¨£T›Àvñ
(
pP¨£
)->
wrôeMask
)

782 
i
;

783 
TabÀ
 *
pTab
 = 
pIdx
->
pTabÀ
;

784 *
ai
 = (*)
	`sqlôe3DbMÆlocZîo
(
pP¨£
->
db
, ()*(
pTab
->
nCﬁ
+1));

785 if–
ai
 ){

786 
ai
[0] = 
pTab
->
nCﬁ
;

787 
i
=0; i<
pIdx
->
nCﬁumn
-1; i++){

788 
	`as£π
–
pIdx
->
aiCﬁumn
[
i
]<
pTab
->
nCﬁ
 );

789 if–
pIdx
->
aiCﬁumn
[
i
]>=0 ) 
ai
[pIdx->aiColumn[i]+1] = i+1;

791 
	`sqlôe3VdbeCh™geP4
(
v
, -1, (*)
ai
, 
P4_INTARRAY
);

794 
	}
}

800 
Bômask
 
	$sqlôe3WhîeCodeO√Lo›Sèπ
(

801 
WhîeInfo
 *
pWInfo
,

802 
iLevñ
,

803 
Bômask
 
nŸRódy


805 
j
, 
k
;

806 
iCur
;

807 
addrNxt
;

808 
omôTabÀ
;

809 
bRev
;

810 
WhîeLevñ
 *
pLevñ
;

811 
WhîeLo›
 *
pLo›
;

812 
WhîeCœu£
 *
pWC
;

813 
WhîeTîm
 *
pTîm
;

814 
P¨£
 *
pP¨£
;

815 
sqlôe3
 *
db
;

816 
Vdbe
 *
v
;

817 
SrcLi°_ôem
 *
pTabIãm
;

818 
addrBrk
;

819 
addrC⁄t
;

820 
iRowidReg
 = 0;

821 
iRñó£Reg
 = 0;

823 
pP¨£
 = 
pWInfo
->pParse;

824 
v
 = 
pP¨£
->
pVdbe
;

825 
pWC
 = &
pWInfo
->
sWC
;

826 
db
 = 
pP¨£
->db;

827 
pLevñ
 = &
pWInfo
->
a
[
iLevñ
];

828 
pLo›
 = 
pLevñ
->
pWLo›
;

829 
pTabIãm
 = &
pWInfo
->
pTabLi°
->
a
[
pLevñ
->
iFrom
];

830 
iCur
 = 
pTabIãm
->
iCurs‹
;

831 
pLevñ
->
nŸRódy
 =ÇŸRódy & ~
	`sqlôe3WhîeGëMask
(&
pWInfo
->
sMaskSë
, 
iCur
);

832 
bRev
 = (
pWInfo
->
ªvMask
>>
iLevñ
)&1;

833 
omôTabÀ
 = (
pLo›
->
wsFœgs
 & 
WHERE_IDX_ONLY
)!=0

834 && (
pWInfo
->
w˘æFœgs
 & 
WHERE_FORCE_TABLE
)==0;

835 
	`VdbeModuÀCommít
((
v
, "Begö WHERE-lo›%d: %s",
iLevñ
,
pTabIãm
->
pTab
->
zName
));

847 
addrBrk
 = 
pLevñ
->addrBrk =ÖLevñ->
addrNxt
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

848 
addrC⁄t
 = 
pLevñ
->addrC⁄à
	`sqlôe3VdbeMakeLabñ
(
v
);

854 if–
pLevñ
->
iFrom
>0 && (
pTabIãm
[0].
fg
.
joöty≥
 & 
JT_LEFT
)!=0 ){

855 
pLevñ
->
iLe·Joö
 = ++
pP¨£
->
nMem
;

856 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 0, 
pLevñ
->
iLe·Joö
);

857 
	`VdbeCommít
((
v
, "init LEFT JOINÇo-match flag"));

861 if–
pTabIãm
->
fg
.
vüC‹outöe
 ){

862 
ªgYõld
 = 
pTabIãm
->
ªgRëu∫
;

863 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_InôC‹outöe
, 
ªgYõld
, 0, 
pTabIãm
->
addrFûlSub
);

864 
pLevñ
->
p2
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Yõld
, 
ªgYõld
, 
addrBrk
);

865 
	`VdbeCovîage
(
v
);

866 
	`VdbeCommít
((
v
, "√xàrow o‡\"%s\"", 
pTabIãm
->
pTab
->
zName
));

867 
pLevñ
->
›
 = 
OP_GŸo
;

870 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


871 if–(
pLo›
->
wsFœgs
 & 
WHERE_VIRTUALTABLE
)!=0 ){

875 
iReg
;

876 
addrNŸFound
;

877 
nC⁄°øöt
 = 
pLo›
->
nLTîm
;

878 
iIn
;

880 
	`sqlôe3Ex¥CachePush
(
pP¨£
);

881 
iReg
 = 
	`sqlôe3GëTempR™ge
(
pP¨£
, 
nC⁄°øöt
+2);

882 
addrNŸFound
 = 
pLevñ
->
addrBrk
;

883 
j
=0; j<
nC⁄°øöt
; j++){

884 
iT¨gë
 = 
iReg
+
j
+2;

885 
pTîm
 = 
pLo›
->
aLTîm
[
j
];

886 if–
	`NEVER
(
pTîm
==0) ) ;

887 if–
pTîm
->
eO≥øt‹
 & 
WO_IN
 ){

888 
	`codeEquÆôyTîm
(
pP¨£
, 
pTîm
, 
pLevñ
, 
j
, 
bRev
, 
iT¨gë
);

889 
addrNŸFound
 = 
pLevñ
->
addrNxt
;

891 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pTîm
->
pEx¥
->
pRight
, 
iT¨gë
);

894 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 
pLo›
->
u
.
vèb
.
idxNum
, 
iReg
);

895 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 
nC⁄°øöt
, 
iReg
+1);

896 
	`sqlôe3VdbeAddOp4
(
v
, 
OP_VFûãr
, 
iCur
, 
addrNŸFound
, 
iReg
,

897 
pLo›
->
u
.
vèb
.
idxSå
,

898 
pLo›
->
u
.
vèb
.
√edFªe
 ? 
P4_MPRINTF
 : 
P4_STATIC
);

899 
	`VdbeCovîage
(
v
);

900 
pLo›
->
u
.
vèb
.
√edFªe
 = 0;

901 
pLevñ
->
p1
 = 
iCur
;

902 
pLevñ
->
›
 = 
pWInfo
->
eO√Pass
 ? 
OP_No›
 : 
OP_VNext
;

903 
pLevñ
->
p2
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

904 
iIn
 = 
pLevñ
->
u
.
ö
.
nIn
;

905 
j
=
nC⁄°øöt
-1; j>=0; j--){

906 
pTîm
 = 
pLo›
->
aLTîm
[
j
];

907 if–
j
<16 && (
pLo›
->
u
.
vèb
.
omôMask
>>j)&1 ){

908 
	`dißbÀTîm
(
pLevñ
, 
pTîm
);

909 }if–(
pTîm
->
eO≥øt‹
 & 
WO_IN
)!=0 ){

910 
Ex¥
 *
pCom∑ª
;

911 
Ex¥
 *
pRight
;

912 
VdbeOp
 *
pOp
;

918 
	`as£π
–
pLevñ
->
u
.
ö
.
aInLo›
!=0 || 
db
->
mÆlocFaûed
 );

919 if–!
db
->
mÆlocFaûed
 ){

920 
	`as£π
–
iIn
>0 );

921 
pOp
 = 
	`sqlôe3VdbeGëOp
(
v
, 
pLevñ
->
u
.
ö
.
aInLo›
[--
iIn
].
addrInT›
);

922 
	`as£π
–
pOp
->
›code
==
OP_Cﬁumn
 ||ÖOp->›code==
OP_Rowid
 );

923 
	`as£π
–
pOp
->
›code
!=
OP_Cﬁumn
 ||ÖOp->
p3
==
iReg
+
j
+2 );

924 
	`as£π
–
pOp
->
›code
!=
OP_Rowid
 ||ÖOp->
p2
==
iReg
+
j
+2 );

925 
	`ã°ˇ£
–
pOp
->
›code
==
OP_Rowid
 );

926 
	`sqlôe3VdbeAddOp3
(
v
, 
pOp
->
›code
,ÖOp->
p1
,ÖOp->
p2
,ÖOp->
p3
);

931 
pCom∑ª
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_EQ
, 0, 0, 0);

932 
	`as£π
–
pCom∑ª
!=0 || 
db
->
mÆlocFaûed
 );

933 if–
pCom∑ª
 ){

934 
pCom∑ª
->
pLe·
 = 
pTîm
->
pEx¥
->pLeft;

935 
pCom∑ª
->
pRight
 =ÖRighà
	`sqlôe3Ex¥
(
db
, 
TK_REGISTER
, 0);

936 if–
pRight
 ){

937 
pRight
->
iTabÀ
 = 
iReg
+
j
+2;

938 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pCom∑ª
, 
pLevñ
->
addrC⁄t
, 0);

940 
pCom∑ª
->
pLe·
 = 0;

941 
	`sqlôe3Ex¥Dñëe
(
db
, 
pCom∑ª
);

952 
	`sqlôe3Ex¥CacheP›
(
pP¨£
);

956 if–(
pLo›
->
wsFœgs
 & 
WHERE_IPK
)!=0

957 && (
pLo›
->
wsFœgs
 & (
WHERE_COLUMN_IN
|
WHERE_COLUMN_EQ
))!=0

964 
	`as£π
–
pLo›
->
u
.
båì
.
nEq
==1 );

965 
pTîm
 = 
pLo›
->
aLTîm
[0];

966 
	`as£π
–
pTîm
!=0 );

967 
	`as£π
–
pTîm
->
pEx¥
!=0 );

968 
	`as£π
–
omôTabÀ
==0 );

969 
	`ã°ˇ£
–
pTîm
->
wtFœgs
 & 
TERM_VIRTUAL
 );

970 
iRñó£Reg
 = ++
pP¨£
->
nMem
;

971 
iRowidReg
 = 
	`codeEquÆôyTîm
(
pP¨£
, 
pTîm
, 
pLevñ
, 0, 
bRev
, 
iRñó£Reg
);

972 if–
iRowidReg
!=
iRñó£Reg
 ) 
	`sqlôe3Rñó£TempReg
(
pP¨£
, iReleaseReg);

973 
addrNxt
 = 
pLevñ
->addrNxt;

974 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Mu°BeI¡
, 
iRowidReg
, 
addrNxt
); 
	`VdbeCovîage
(v);

975 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_NŸExi°s
, 
iCur
, 
addrNxt
, 
iRowidReg
);

976 
	`VdbeCovîage
(
v
);

977 
	`sqlôe3Ex¥CacheAfföôyCh™ge
(
pP¨£
, 
iRowidReg
, 1);

978 
	`sqlôe3Ex¥CacheSt‹e
(
pP¨£
, 
iCur
, -1, 
iRowidReg
);

979 
	`VdbeCommít
((
v
, "pk"));

980 
pLevñ
->
›
 = 
OP_No›
;

981 }if–(
pLo›
->
wsFœgs
 & 
WHERE_IPK
)!=0

982 && (
pLo›
->
wsFœgs
 & 
WHERE_COLUMN_RANGE
)!=0

986 
ã°Op
 = 
OP_No›
;

987 
°¨t
;

988 
memEndVÆue
 = 0;

989 
WhîeTîm
 *
pSèπ
, *
pEnd
;

991 
	`as£π
–
omôTabÀ
==0 );

992 
j
 = 0;

993 
pSèπ
 = 
pEnd
 = 0;

994 if–
pLo›
->
wsFœgs
 & 
WHERE_BTM_LIMIT
 ) 
pSèπ
 =ÖLo›->
aLTîm
[
j
++];

995 if–
pLo›
->
wsFœgs
 & 
WHERE_TOP_LIMIT
 ) 
pEnd
 =ÖLo›->
aLTîm
[
j
++];

996 
	`as£π
–
pSèπ
!=0 || 
pEnd
!=0 );

997 if–
bRev
 ){

998 
pTîm
 = 
pSèπ
;

999 
pSèπ
 = 
pEnd
;

1000 
pEnd
 = 
pTîm
;

1002 
	`codeCurs‹Höt
(
pWInfo
, 
pLevñ
, 
pEnd
);

1003 if–
pSèπ
 ){

1004 
Ex¥
 *
pX
;

1005 
r1
, 
rTemp
;

1010 c⁄° 
u8
 
aMoveOp
[] = {

1011  
OP_SìkGT
,

1012  
OP_SìkLE
,

1013  
OP_SìkLT
,

1014  
OP_SìkGE


1016 
	`as£π
–
TK_LE
==
TK_GT
+1 );

1017 
	`as£π
–
TK_LT
==
TK_GT
+2 );

1018 
	`as£π
–
TK_GE
==
TK_GT
+3 );

1020 
	`as£π
–(
pSèπ
->
wtFœgs
 & 
TERM_VNULL
)==0 );

1021 
	`ã°ˇ£
–
pSèπ
->
wtFœgs
 & 
TERM_VIRTUAL
 );

1022 
pX
 = 
pSèπ
->
pEx¥
;

1023 
	`as£π
–
pX
!=0 );

1024 
	`ã°ˇ£
–
pSèπ
->
À·Curs‹
!=
iCur
 );

1025 
r1
 = 
	`sqlôe3Ex¥CodeTemp
(
pP¨£
, 
pX
->
pRight
, &
rTemp
);

1026 
	`sqlôe3VdbeAddOp3
(
v
, 
aMoveOp
[
pX
->
›
-
TK_GT
], 
iCur
, 
addrBrk
, 
r1
);

1027 
	`VdbeCommít
((
v
, "pk"));

1028 
	`VdbeCovîageIf
(
v
, 
pX
->
›
==
TK_GT
);

1029 
	`VdbeCovîageIf
(
v
, 
pX
->
›
==
TK_LE
);

1030 
	`VdbeCovîageIf
(
v
, 
pX
->
›
==
TK_LT
);

1031 
	`VdbeCovîageIf
(
v
, 
pX
->
›
==
TK_GE
);

1032 
	`sqlôe3Ex¥CacheAfföôyCh™ge
(
pP¨£
, 
r1
, 1);

1033 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
rTemp
);

1034 
	`dißbÀTîm
(
pLevñ
, 
pSèπ
);

1036 
	`sqlôe3VdbeAddOp2
(
v
, 
bRev
 ? 
OP_La°
 : 
OP_Rewöd
, 
iCur
, 
addrBrk
);

1037 
	`VdbeCovîageIf
(
v
, 
bRev
==0);

1038 
	`VdbeCovîageIf
(
v
, 
bRev
!=0);

1040 if–
pEnd
 ){

1041 
Ex¥
 *
pX
;

1042 
pX
 = 
pEnd
->
pEx¥
;

1043 
	`as£π
–
pX
!=0 );

1044 
	`as£π
–(
pEnd
->
wtFœgs
 & 
TERM_VNULL
)==0 );

1045 
	`ã°ˇ£
–
pEnd
->
À·Curs‹
!=
iCur
 );

1046 
	`ã°ˇ£
–
pEnd
->
wtFœgs
 & 
TERM_VIRTUAL
 );

1047 
memEndVÆue
 = ++
pP¨£
->
nMem
;

1048 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pX
->
pRight
, 
memEndVÆue
);

1049 if–
pX
->
›
==
TK_LT
 ||ÖX->›==
TK_GT
 ){

1050 
ã°Op
 = 
bRev
 ? 
OP_Le
 : 
OP_Ge
;

1052 
ã°Op
 = 
bRev
 ? 
OP_Lt
 : 
OP_Gt
;

1054 
	`dißbÀTîm
(
pLevñ
, 
pEnd
);

1056 
°¨t
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

1057 
pLevñ
->
›
 = 
bRev
 ? 
OP_Pªv
 : 
OP_Next
;

1058 
pLevñ
->
p1
 = 
iCur
;

1059 
pLevñ
->
p2
 = 
°¨t
;

1060 
	`as£π
–
pLevñ
->
p5
==0 );

1061 if–
ã°Op
!=
OP_No›
 ){

1062 
iRowidReg
 = ++
pP¨£
->
nMem
;

1063 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Rowid
, 
iCur
, 
iRowidReg
);

1064 
	`sqlôe3Ex¥CacheSt‹e
(
pP¨£
, 
iCur
, -1, 
iRowidReg
);

1065 
	`sqlôe3VdbeAddOp3
(
v
, 
ã°Op
, 
memEndVÆue
, 
addrBrk
, 
iRowidReg
);

1066 
	`VdbeCovîageIf
(
v
, 
ã°Op
==
OP_Le
);

1067 
	`VdbeCovîageIf
(
v
, 
ã°Op
==
OP_Lt
);

1068 
	`VdbeCovîageIf
(
v
, 
ã°Op
==
OP_Ge
);

1069 
	`VdbeCovîageIf
(
v
, 
ã°Op
==
OP_Gt
);

1070 
	`sqlôe3VdbeCh™geP5
(
v
, 
SQLITE_AFF_NUMERIC
 | 
SQLITE_JUMPIFNULL
);

1072 }if–
pLo›
->
wsFœgs
 & 
WHERE_INDEXED
 ){

1104 c⁄° 
u8
 
aSèπOp
[] = {

1107 
OP_Rewöd
,

1108 
OP_La°
,

1109 
OP_SìkGT
,

1110 
OP_SìkLT
,

1111 
OP_SìkGE
,

1112 
OP_SìkLE


1114 c⁄° 
u8
 
aEndOp
[] = {

1115 
OP_IdxGE
,

1116 
OP_IdxGT
,

1117 
OP_IdxLE
,

1118 
OP_IdxLT
,

1120 
u16
 
nEq
 = 
pLo›
->
u
.
båì
.nEq;

1121 
ªgBa£
;

1122 
WhîeTîm
 *
pR™geSèπ
 = 0;

1123 
WhîeTîm
 *
pR™geEnd
 = 0;

1124 
°¨tEq
;

1125 
ídEq
;

1126 
°¨t_c⁄°øöts
;

1127 
nC⁄°øöt
;

1128 
Index
 *
pIdx
;

1129 
iIdxCur
;

1130 
nExåaReg
 = 0;

1131 
›
;

1132 *
zSèπAff
;

1133 
cEndAff
 = 0;

1134 
u8
 
bSìkPa°NuŒ
 = 0;

1135 
u8
 
bSt›AtNuŒ
 = 0;

1137 
pIdx
 = 
pLo›
->
u
.
båì
.
pIndex
;

1138 
iIdxCur
 = 
pLevñ
->iIdxCur;

1139 
	`as£π
–
nEq
>=
pLo›
->
nSkù
 );

1149 
	`as£π
–
pWInfo
->
pOrdîBy
==0

1150 || 
pWInfo
->
pOrdîBy
->
nEx¥
==1

1151 || (
pWInfo
->
w˘æFœgs
&
WHERE_ORDERBY_MIN
)==0 );

1152 if–(
pWInfo
->
w˘æFœgs
&
WHERE_ORDERBY_MIN
)!=0

1153 && 
pWInfo
->
nOBS©
>0

1154 && (
pIdx
->
nKeyCﬁ
>
nEq
)

1156 
	`as£π
–
pLo›
->
nSkù
==0 );

1157 
bSìkPa°NuŒ
 = 1;

1158 
nExåaReg
 = 1;

1164 
j
 = 
nEq
;

1165 if–
pLo›
->
wsFœgs
 & 
WHERE_BTM_LIMIT
 ){

1166 
pR™geSèπ
 = 
pLo›
->
aLTîm
[
j
++];

1167 
nExåaReg
 = 1;

1169 
	`as£π
–(
pR™geSèπ
->
wtFœgs
 & 
TERM_LIKEOPT
)==0 ||

1170 (
pLo›
->
wsFœgs
 & 
WHERE_TOP_LIMIT
)!=0 );

1172 if–
pLo›
->
wsFœgs
 & 
WHERE_TOP_LIMIT
 ){

1173 
pR™geEnd
 = 
pLo›
->
aLTîm
[
j
++];

1174 
nExåaReg
 = 1;

1175 #i‚de‡
SQLITE_LIKE_DOESNT_MATCH_BLOBS


1176 if–(
pR™geEnd
->
wtFœgs
 & 
TERM_LIKEOPT
)!=0 ){

1177 
	`as£π
–
pR™geSèπ
!=0 );

1178 
	`as£π
–
pR™geSèπ
->
wtFœgs
 & 
TERM_LIKEOPT
 );

1179 
pLevñ
->
iLikeRïC¡r
 = (
u32
)++
pP¨£
->
nMem
;

1180 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 1, ()
pLevñ
->
iLikeRïC¡r
);

1181 
	`VdbeCommít
((
v
, "LIKEÜoop counter"));

1182 
pLevñ
->
addrLikeRï
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

1185 
	`ã°ˇ£
–
bRev
 );

1186 
	`ã°ˇ£
–
pIdx
->
aS‹tOrdî
[
nEq
]==
SQLITE_SO_DESC
 );

1187 
	`as£π
–(
bRev
 & ~1)==0 );

1188 
pLevñ
->
iLikeRïC¡r
 <<=1;

1189 
pLevñ
->
iLikeRïC¡r
 |
bRev
 ^ (
pIdx
->
aS‹tOrdî
[
nEq
]==
SQLITE_SO_DESC
);

1192 if–
pR™geSèπ
==0

1193 && (
j
 = 
pIdx
->
aiCﬁumn
[
nEq
])>=0

1194 && 
pIdx
->
pTabÀ
->
aCﬁ
[
j
].
nŸNuŒ
==0

1196 
bSìkPa°NuŒ
 = 1;

1199 
	`as£π
–
pR™geEnd
==0 || (pR™geEnd->
wtFœgs
 & 
TERM_VNULL
)==0 );

1205 if–(
nEq
<
pIdx
->
nKeyCﬁ
 && 
bRev
==’Idx->
aS‹tOrdî
[nEq]==
SQLITE_SO_ASC
))

1206 || (
bRev
 && 
pIdx
->
nKeyCﬁ
==
nEq
)

1208 
	`SWAP
(
WhîeTîm
 *, 
pR™geEnd
, 
pR™geSèπ
);

1209 
	`SWAP
(
u8
, 
bSìkPa°NuŒ
, 
bSt›AtNuŒ
);

1216 
	`codeCurs‹Höt
(
pWInfo
, 
pLevñ
, 
pR™geEnd
);

1217 
ªgBa£
 = 
	`codeAŒEquÆôyTîms
(
pP¨£
,
pLevñ
,
bRev
,
nExåaReg
,&
zSèπAff
);

1218 
	`as£π
–
zSèπAff
==0 || 
	`sqlôe3SåÀn30
(zSèπAff)>=
nEq
 );

1219 if–
zSèπAff
 ) 
cEndAff
 = zSèπAff[
nEq
];

1220 
addrNxt
 = 
pLevñ
->addrNxt;

1222 
	`ã°ˇ£
–
pR™geSèπ
 && (pR™geSèπ->
eO≥øt‹
 & 
WO_LE
)!=0 );

1223 
	`ã°ˇ£
–
pR™geSèπ
 && (pR™geSèπ->
eO≥øt‹
 & 
WO_GE
)!=0 );

1224 
	`ã°ˇ£
–
pR™geEnd
 && (pR™geEnd->
eO≥øt‹
 & 
WO_LE
)!=0 );

1225 
	`ã°ˇ£
–
pR™geEnd
 && (pR™geEnd->
eO≥øt‹
 & 
WO_GE
)!=0 );

1226 
°¨tEq
 = !
pR™geSèπ
 ||ÖR™geSèπ->
eO≥øt‹
 & (
WO_LE
|
WO_GE
);

1227 
ídEq
 = !
pR™geEnd
 ||ÖR™geEnd->
eO≥øt‹
 & (
WO_LE
|
WO_GE
);

1228 
°¨t_c⁄°øöts
 = 
pR™geSèπ
 || 
nEq
>0;

1231 
nC⁄°øöt
 = 
nEq
;

1232 if–
pR™geSèπ
 ){

1233 
Ex¥
 *
pRight
 = 
pR™geSèπ
->
pEx¥
->pRight;

1234 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pRight
, 
ªgBa£
+
nEq
);

1235 
	`whîeLikeO±imiz©i⁄SåögFixup
(
v
, 
pLevñ
, 
pR™geSèπ
);

1236 if–(
pR™geSèπ
->
wtFœgs
 & 
TERM_VNULL
)==0

1237 && 
	`sqlôe3Ex¥C™BeNuŒ
(
pRight
)

1239 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IsNuŒ
, 
ªgBa£
+
nEq
, 
addrNxt
);

1240 
	`VdbeCovîage
(
v
);

1242 if–
zSèπAff
 ){

1243 if–
	`sqlôe3Com∑ªAfföôy
(
pRight
, 
zSèπAff
[
nEq
])==
SQLITE_AFF_BLOB
){

1247 
zSèπAff
[
nEq
] = 
SQLITE_AFF_BLOB
;

1249 if–
	`sqlôe3Ex¥NìdsNoAfföôyCh™ge
(
pRight
, 
zSèπAff
[
nEq
]) ){

1250 
zSèπAff
[
nEq
] = 
SQLITE_AFF_BLOB
;

1253 
nC⁄°øöt
++;

1254 
	`ã°ˇ£
–
pR™geSèπ
->
wtFœgs
 & 
TERM_VIRTUAL
 );

1255 }if–
bSìkPa°NuŒ
 ){

1256 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NuŒ
, 0, 
ªgBa£
+
nEq
);

1257 
nC⁄°øöt
++;

1258 
°¨tEq
 = 0;

1259 
°¨t_c⁄°øöts
 = 1;

1261 
	`codeAµlyAfföôy
(
pP¨£
, 
ªgBa£
, 
nC⁄°øöt
 - 
bSìkPa°NuŒ
, 
zSèπAff
);

1262 if–
pLo›
->
nSkù
>0 && 
nC⁄°øöt
==pLoop->nSkip ){

1267 
›
 = 
aSèπOp
[(
°¨t_c⁄°øöts
<<2Ë+ (
°¨tEq
<<1Ë+ 
bRev
];

1268 
	`as£π
–
›
!=0 );

1269 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
›
, 
iIdxCur
, 
addrNxt
, 
ªgBa£
, 
nC⁄°øöt
);

1270 
	`VdbeCovîage
(
v
);

1271 
	`VdbeCovîageIf
(
v
, 
›
==
OP_Rewöd
); 
	`ã°ˇ£
( op==OP_Rewind );

1272 
	`VdbeCovîageIf
(
v
, 
›
==
OP_La°
); 
	`ã°ˇ£
( op==OP_Last );

1273 
	`VdbeCovîageIf
(
v
, 
›
==
OP_SìkGT
); 
	`ã°ˇ£
( op==OP_SeekGT );

1274 
	`VdbeCovîageIf
(
v
, 
›
==
OP_SìkGE
); 
	`ã°ˇ£
( op==OP_SeekGE );

1275 
	`VdbeCovîageIf
(
v
, 
›
==
OP_SìkLE
); 
	`ã°ˇ£
( op==OP_SeekLE );

1276 
	`VdbeCovîageIf
(
v
, 
›
==
OP_SìkLT
); 
	`ã°ˇ£
( op==OP_SeekLT );

1282 
nC⁄°øöt
 = 
nEq
;

1283 if–
pR™geEnd
 ){

1284 
Ex¥
 *
pRight
 = 
pR™geEnd
->
pEx¥
->pRight;

1285 
	`sqlôe3Ex¥CacheRemove
(
pP¨£
, 
ªgBa£
+
nEq
, 1);

1286 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pRight
, 
ªgBa£
+
nEq
);

1287 
	`whîeLikeO±imiz©i⁄SåögFixup
(
v
, 
pLevñ
, 
pR™geEnd
);

1288 if–(
pR™geEnd
->
wtFœgs
 & 
TERM_VNULL
)==0

1289 && 
	`sqlôe3Ex¥C™BeNuŒ
(
pRight
)

1291 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IsNuŒ
, 
ªgBa£
+
nEq
, 
addrNxt
);

1292 
	`VdbeCovîage
(
v
);

1294 if–
	`sqlôe3Com∑ªAfföôy
(
pRight
, 
cEndAff
)!=
SQLITE_AFF_BLOB


1295 && !
	`sqlôe3Ex¥NìdsNoAfföôyCh™ge
(
pRight
, 
cEndAff
)

1297 
	`codeAµlyAfföôy
(
pP¨£
, 
ªgBa£
+
nEq
, 1, &
cEndAff
);

1299 
nC⁄°øöt
++;

1300 
	`ã°ˇ£
–
pR™geEnd
->
wtFœgs
 & 
TERM_VIRTUAL
 );

1301 }if–
bSt›AtNuŒ
 ){

1302 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NuŒ
, 0, 
ªgBa£
+
nEq
);

1303 
ídEq
 = 0;

1304 
nC⁄°øöt
++;

1306 
	`sqlôe3DbFªe
(
db
, 
zSèπAff
);

1309 
pLevñ
->
p2
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

1312 if–
nC⁄°øöt
 ){

1313 
›
 = 
aEndOp
[
bRev
*2 + 
ídEq
];

1314 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
›
, 
iIdxCur
, 
addrNxt
, 
ªgBa£
, 
nC⁄°øöt
);

1315 
	`ã°ˇ£
–
›
==
OP_IdxGT
 ); 
	`VdbeCovîageIf
(
v
, op==OP_IdxGT );

1316 
	`ã°ˇ£
–
›
==
OP_IdxGE
 ); 
	`VdbeCovîageIf
(
v
, op==OP_IdxGE );

1317 
	`ã°ˇ£
–
›
==
OP_IdxLT
 ); 
	`VdbeCovîageIf
(
v
, op==OP_IdxLT );

1318 
	`ã°ˇ£
–
›
==
OP_IdxLE
 ); 
	`VdbeCovîageIf
(
v
, op==OP_IdxLE );

1322 
	`dißbÀTîm
(
pLevñ
, 
pR™geSèπ
);

1323 
	`dißbÀTîm
(
pLevñ
, 
pR™geEnd
);

1324 if–
omôTabÀ
 ){

1326 }if–
	`HasRowid
(
pIdx
->
pTabÀ
) ){

1327 if–(
pWInfo
->
w˘æFœgs
 & 
WHERE_SEEK_TABLE
)!=0 ){

1328 
iRowidReg
 = ++
pP¨£
->
nMem
;

1329 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_IdxRowid
, 
iIdxCur
, 
iRowidReg
);

1330 
	`sqlôe3Ex¥CacheSt‹e
(
pP¨£
, 
iCur
, -1, 
iRowidReg
);

1331 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_NŸExi°s
, 
iCur
, 0, 
iRowidReg
);

1332 
	`VdbeCovîage
(
v
);

1334 
	`codeDe„ºedSìk
(
pWInfo
, 
pIdx
, 
iCur
, 
iIdxCur
);

1336 }if–
iCur
!=
iIdxCur
 ){

1337 
Index
 *
pPk
 = 
	`sqlôe3Prim¨yKeyIndex
(
pIdx
->
pTabÀ
);

1338 
iRowidReg
 = 
	`sqlôe3GëTempR™ge
(
pP¨£
, 
pPk
->
nKeyCﬁ
);

1339 
j
=0; j<
pPk
->
nKeyCﬁ
; j++){

1340 
k
 = 
	`sqlôe3CﬁumnOfIndex
(
pIdx
, 
pPk
->
aiCﬁumn
[
j
]);

1341 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_Cﬁumn
, 
iIdxCur
, 
k
, 
iRowidReg
+
j
);

1343 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_NŸFound
, 
iCur
, 
addrC⁄t
,

1344 
iRowidReg
, 
pPk
->
nKeyCﬁ
); 
	`VdbeCovîage
(
v
);

1350 if–
pLo›
->
wsFœgs
 & 
WHERE_ONEROW
 ){

1351 
pLevñ
->
›
 = 
OP_No›
;

1352 }if–
bRev
 ){

1353 
pLevñ
->
›
 = 
OP_Pªv
;

1355 
pLevñ
->
›
 = 
OP_Next
;

1357 
pLevñ
->
p1
 = 
iIdxCur
;

1358 
pLevñ
->
p3
 = (
pLo›
->
wsFœgs
&
WHERE_UNQ_WANTED
)!=0 ? 1:0;

1359 if–(
pLo›
->
wsFœgs
 & 
WHERE_CONSTRAINT
)==0 ){

1360 
pLevñ
->
p5
 = 
SQLITE_STMTSTATUS_FULLSCAN_STEP
;

1362 
	`as£π
–
pLevñ
->
p5
==0 );

1366 #i‚de‡
SQLITE_OMIT_OR_OPTIMIZATION


1367 if–
pLo›
->
wsFœgs
 & 
WHERE_MULTI_OR
 ){

1411 
WhîeCœu£
 *
pOrWc
;

1412 
SrcLi°
 *
pOrTab
;

1413 
Index
 *
pCov
 = 0;

1414 
iCovCur
 = 
pP¨£
->
nTab
++;

1416 
ªgRëu∫
 = ++
pP¨£
->
nMem
;

1417 
ªgRow£t
 = 0;

1418 
ªgRowid
 = 0;

1419 
iLo›Body
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

1420 
iRëInô
;

1421 
u¡e°edTîms
 = 0;

1422 
ii
;

1423 
u16
 
w˘æFœgs
;

1424 
Ex¥
 *
pAndEx¥
 = 0;

1425 
TabÀ
 *
pTab
 = 
pTabIãm
->pTab;

1427 
pTîm
 = 
pLo›
->
aLTîm
[0];

1428 
	`as£π
–
pTîm
!=0 );

1429 
	`as£π
–
pTîm
->
eO≥øt‹
 & 
WO_OR
 );

1430 
	`as£π
–(
pTîm
->
wtFœgs
 & 
TERM_ORINFO
)!=0 );

1431 
pOrWc
 = &
pTîm
->
u
.
pOrInfo
->
wc
;

1432 
pLevñ
->
›
 = 
OP_Rëu∫
;

1433 
pLevñ
->
p1
 = 
ªgRëu∫
;

1439 if–
pWInfo
->
nLevñ
>1 ){

1440 
nNŸRódy
;

1441 
SrcLi°_ôem
 *
‹igSrc
;

1442 
nNŸRódy
 = 
pWInfo
->
nLevñ
 - 
iLevñ
 - 1;

1443 
pOrTab
 = 
	`sqlôe3SèckAŒocRaw
(
db
,

1444 (*
pOrTab
)+ 
nNŸRódy
*’OrTab->
a
[0]));

1445 if–
pOrTab
==0 )  
nŸRódy
;

1446 
pOrTab
->
nAŒoc
 = (
u8
)(
nNŸRódy
 + 1);

1447 
pOrTab
->
nSrc
 =ÖOrTab->
nAŒoc
;

1448 
	`mem˝y
(
pOrTab
->
a
, 
pTabIãm
, (*pTabItem));

1449 
‹igSrc
 = 
pWInfo
->
pTabLi°
->
a
;

1450 
k
=1; k<=
nNŸRódy
; k++){

1451 
	`mem˝y
(&
pOrTab
->
a
[
k
], &
‹igSrc
[
pLevñ
[k].
iFrom
], (pOrTab->a[k]));

1454 
pOrTab
 = 
pWInfo
->
pTabLi°
;

1469 if–(
pWInfo
->
w˘æFœgs
 & 
WHERE_DUPLICATES_OK
)==0 ){

1470 if–
	`HasRowid
(
pTab
) ){

1471 
ªgRow£t
 = ++
pP¨£
->
nMem
;

1472 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_NuŒ
, 0, 
ªgRow£t
);

1474 
Index
 *
pPk
 = 
	`sqlôe3Prim¨yKeyIndex
(
pTab
);

1475 
ªgRow£t
 = 
pP¨£
->
nTab
++;

1476 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_O≥nEphemîÆ
, 
ªgRow£t
, 
pPk
->
nKeyCﬁ
);

1477 
	`sqlôe3VdbeSëP4KeyInfo
(
pP¨£
, 
pPk
);

1479 
ªgRowid
 = ++
pP¨£
->
nMem
;

1481 
iRëInô
 = 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 0, 
ªgRëu∫
);

1497 if–
pWC
->
nTîm
>1 ){

1498 
iTîm
;

1499 
iTîm
=0; iTîm<
pWC
->
nTîm
; iTerm++){

1500 
Ex¥
 *
pEx¥
 = 
pWC
->
a
[
iTîm
].pExpr;

1501 if–&
pWC
->
a
[
iTîm
] =
pTîm
 ) ;

1502 if–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_FromJoö
) ) ;

1503 
	`ã°ˇ£
–
pWC
->
a
[
iTîm
].
wtFœgs
 & 
TERM_VIRTUAL
 );

1504 
	`ã°ˇ£
–
pWC
->
a
[
iTîm
].
wtFœgs
 & 
TERM_CODED
 );

1505 if–(
pWC
->
a
[
iTîm
].
wtFœgs
 & (
TERM_VIRTUAL
|
TERM_CODED
))!=0 ) ;

1506 if–(
pWC
->
a
[
iTîm
].
eO≥øt‹
 & 
WO_ALL
)==0 ) ;

1507 
	`ã°ˇ£
–
pWC
->
a
[
iTîm
].
wtFœgs
 & 
TERM_ORINFO
 );

1508 
pEx¥
 = 
	`sqlôe3Ex¥Dup
(
db
,ÖExpr, 0);

1509 
pAndEx¥
 = 
	`sqlôe3Ex¥And
(
db
,ÖAndEx¥, 
pEx¥
);

1511 if–
pAndEx¥
 ){

1512 
pAndEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_AND
|
TKFLG_DONTFOLD
, 0,ÖAndExpr, 0);

1520 
w˘æFœgs
 = 
WHERE_OMIT_OPEN_CLOSE


1521 | 
WHERE_FORCE_TABLE


1522 | 
WHERE_ONETABLE_ONLY


1523 | 
WHERE_NO_AUTOINDEX


1524 | (
pWInfo
->
w˘æFœgs
 & 
WHERE_SEEK_TABLE
);

1525 
ii
=0; ii<
pOrWc
->
nTîm
; ii++){

1526 
WhîeTîm
 *
pOrTîm
 = &
pOrWc
->
a
[
ii
];

1527 if–
pOrTîm
->
À·Curs‹
==
iCur
 || (pOrTîm->
eO≥øt‹
 & 
WO_AND
)!=0 ){

1528 
WhîeInfo
 *
pSubWInfo
;

1529 
Ex¥
 *
pOrEx¥
 = 
pOrTîm
->
pEx¥
;

1530 
jmp1
 = 0;

1531 if–
pAndEx¥
 && !
	`Ex¥HasPr›îty
(
pOrEx¥
, 
EP_FromJoö
) ){

1532 
pAndEx¥
->
pLe·
 = 
pOrEx¥
;

1533 
pOrEx¥
 = 
pAndEx¥
;

1536 
	`WHERETRACE
(0xffff, ("Subplan for OR-clause:\n"));

1537 
pSubWInfo
 = 
	`sqlôe3WhîeBegö
(
pP¨£
, 
pOrTab
, 
pOrEx¥
, 0, 0,

1538 
w˘æFœgs
, 
iCovCur
);

1539 
	`as£π
–
pSubWInfo
 || 
pP¨£
->
nEº
 || 
db
->
mÆlocFaûed
 );

1540 if–
pSubWInfo
 ){

1541 
WhîeLo›
 *
pSubLo›
;

1542 
addrEx∂aö
 = 
	`sqlôe3WhîeEx∂aöO√Sˇn
(

1543 
pP¨£
, 
pOrTab
, &
pSubWInfo
->
a
[0], 
iLevñ
, 
pLevñ
->
iFrom
, 0

1545 
	`sqlôe3WhîeAddSˇnSètus
(
v
, 
pOrTab
, &
pSubWInfo
->
a
[0], 
addrEx∂aö
);

1552 if–(
pWInfo
->
w˘æFœgs
 & 
WHERE_DUPLICATES_OK
)==0 ){

1553 
r
;

1554 
iSë
 = ((
ii
==
pOrWc
->
nTîm
-1)?-1:ii);

1555 if–
	`HasRowid
(
pTab
) ){

1556 
r
 = 
	`sqlôe3Ex¥CodeGëCﬁumn
(
pP¨£
, 
pTab
, -1, 
iCur
, 
ªgRowid
, 0);

1557 
jmp1
 = 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_RowSëTe°
, 
ªgRow£t
, 0,

1558 
r
,
iSë
);

1559 
	`VdbeCovîage
(
v
);

1561 
Index
 *
pPk
 = 
	`sqlôe3Prim¨yKeyIndex
(
pTab
);

1562 
nPk
 = 
pPk
->
nKeyCﬁ
;

1563 
iPk
;

1566 
r
 = 
	`sqlôe3GëTempR™ge
(
pP¨£
, 
nPk
);

1567 
iPk
=0; iPk<
nPk
; iPk++){

1568 
iCﬁ
 = 
pPk
->
aiCﬁumn
[
iPk
];

1569 
	`sqlôe3Ex¥CodeGëCﬁumnToReg
(
pP¨£
, 
pTab
, 
iCﬁ
, 
iCur
, 
r
+
iPk
);

1583 if–
iSë
 ){

1584 
jmp1
 = 
	`sqlôe3VdbeAddOp4I¡
(
v
, 
OP_Found
, 
ªgRow£t
, 0, 
r
, 
nPk
);

1585 
	`VdbeCovîage
(
v
);

1587 if–
iSë
>=0 ){

1588 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_MakeRec‹d
, 
r
, 
nPk
, 
ªgRowid
);

1589 
	`sqlôe3VdbeAddOp3
(
v
, 
OP_IdxIn£π
, 
ªgRow£t
, 
ªgRowid
, 0);

1590 if–
iSë
 ) 
	`sqlôe3VdbeCh™geP5
(
v
, 
OPFLAG_USESEEKRESULT
);

1594 
	`sqlôe3Rñó£TempR™ge
(
pP¨£
, 
r
, 
nPk
);

1599 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_Gosub
, 
ªgRëu∫
, 
iLo›Body
);

1603 if–
jmp1
 ) 
	`sqlôe3VdbeJumpHîe
(
v
, jmp1);

1610 if–
pSubWInfo
->
u¡e°edTîms
 ) untestedTerms = 1;

1624 
pSubLo›
 = 
pSubWInfo
->
a
[0].
pWLo›
;

1625 
	`as£π
–(
pSubLo›
->
wsFœgs
 & 
WHERE_AUTO_INDEX
)==0 );

1626 if–(
pSubLo›
->
wsFœgs
 & 
WHERE_INDEXED
)!=0

1627 && (
ii
==0 || 
pSubLo›
->
u
.
båì
.
pIndex
==
pCov
)

1628 && (
	`HasRowid
(
pTab
Ë|| !
	`IsPrim¨yKeyIndex
(
pSubLo›
->
u
.
båì
.
pIndex
))

1630 
	`as£π
–
pSubWInfo
->
a
[0].
iIdxCur
==
iCovCur
 );

1631 
pCov
 = 
pSubLo›
->
u
.
båì
.
pIndex
;

1632 
w˘æFœgs
 |
WHERE_REOPEN_IDX
;

1634 
pCov
 = 0;

1638 
	`sqlôe3WhîeEnd
(
pSubWInfo
);

1642 
pLevñ
->
u
.
pCovidx
 = 
pCov
;

1643 if–
pCov
 ) 
pLevñ
->
iIdxCur
 = 
iCovCur
;

1644 if–
pAndEx¥
 ){

1645 
pAndEx¥
->
pLe·
 = 0;

1646 
	`sqlôe3Ex¥Dñëe
(
db
, 
pAndEx¥
);

1648 
	`sqlôe3VdbeCh™geP1
(
v
, 
iRëInô
, 
	`sqlôe3VdbeCuºítAddr
(v));

1649 
	`sqlôe3VdbeGŸo
(
v
, 
pLevñ
->
addrBrk
);

1650 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iLo›Body
);

1652 if–
pWInfo
->
nLevñ
>1 ) 
	`sqlôe3SèckFªe
(
db
, 
pOrTab
);

1653 if–!
u¡e°edTîms
 ) 
	`dißbÀTîm
(
pLevñ
, 
pTîm
);

1661 c⁄° 
u8
 
aSãp
[] = { 
OP_Next
, 
OP_Pªv
 };

1662 c⁄° 
u8
 
aSèπ
[] = { 
OP_Rewöd
, 
OP_La°
 };

1663 
	`as£π
–
bRev
==0 || bRev==1 );

1664 if–
pTabIãm
->
fg
.
isRecursive
 ){

1667 
pLevñ
->
›
 = 
OP_No›
;

1669 
	`codeCurs‹Höt
(
pWInfo
, 
pLevñ
, 0);

1670 
pLevñ
->
›
 = 
aSãp
[
bRev
];

1671 
pLevñ
->
p1
 = 
iCur
;

1672 
pLevñ
->
p2
 = 1 + 
	`sqlôe3VdbeAddOp2
(
v
, 
aSèπ
[
bRev
], 
iCur
, 
addrBrk
);

1673 
	`VdbeCovîageIf
(
v
, 
bRev
==0);

1674 
	`VdbeCovîageIf
(
v
, 
bRev
!=0);

1675 
pLevñ
->
p5
 = 
SQLITE_STMTSTATUS_FULLSCAN_STEP
;

1679 #ifde‡
SQLITE_ENABLE_STMT_SCANSTATUS


1680 
pLevñ
->
addrVisô
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

1686 
pTîm
=
pWC
->
a
, 
j
ıWC->
nTîm
; j>0; j--,ÖTerm++){

1687 
Ex¥
 *
pE
;

1688 
skùLikeAddr
 = 0;

1689 
	`ã°ˇ£
–
pTîm
->
wtFœgs
 & 
TERM_VIRTUAL
 );

1690 
	`ã°ˇ£
–
pTîm
->
wtFœgs
 & 
TERM_CODED
 );

1691 if–
pTîm
->
wtFœgs
 & (
TERM_VIRTUAL
|
TERM_CODED
) ) ;

1692 if–(
pTîm
->
¥îeqAŒ
 & 
pLevñ
->
nŸRódy
)!=0 ){

1693 
	`ã°ˇ£
–
pWInfo
->
u¡e°edTîms
==0

1694 && (
pWInfo
->
w˘æFœgs
 & 
WHERE_ONETABLE_ONLY
)!=0 );

1695 
pWInfo
->
u¡e°edTîms
 = 1;

1698 
pE
 = 
pTîm
->
pEx¥
;

1699 
	`as£π
–
pE
!=0 );

1700 if–
pLevñ
->
iLe·Joö
 && !
	`Ex¥HasPr›îty
(
pE
, 
EP_FromJoö
) ){

1703 if–
pTîm
->
wtFœgs
 & 
TERM_LIKECOND
 ){

1709 #ifde‡
SQLITE_LIKE_DOESNT_MATCH_BLOBS


1712 
u32
 
x
 = 
pLevñ
->
iLikeRïC¡r
;

1713 
	`as£π
–
x
>0 );

1714 
skùLikeAddr
 = 
	`sqlôe3VdbeAddOp1
(
v
, (
x
&1)? 
OP_IfNŸ
 : 
OP_If
, ()(x>>1));

1715 
	`VdbeCovîage
(
v
);

1718 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pE
, 
addrC⁄t
, 
SQLITE_JUMPIFNULL
);

1719 if–
skùLikeAddr
 ) 
	`sqlôe3VdbeJumpHîe
(
v
, skipLikeAddr);

1720 
pTîm
->
wtFœgs
 |
TERM_CODED
;

1731 
pTîm
=
pWC
->
a
, 
j
ıWC->
nTîm
; j>0; j--,ÖTerm++){

1732 
Ex¥
 *
pE
, *
pEA…
;

1733 
WhîeTîm
 *
pA…
;

1734 if–
pTîm
->
wtFœgs
 & (
TERM_VIRTUAL
|
TERM_CODED
) ) ;

1735 if–(
pTîm
->
eO≥øt‹
 & (
WO_EQ
|
WO_IS
))==0 ) ;

1736 if–(
pTîm
->
eO≥øt‹
 & 
WO_EQUIV
)==0 ) ;

1737 if–
pTîm
->
À·Curs‹
!=
iCur
 ) ;

1738 if–
pLevñ
->
iLe·Joö
 ) ;

1739 
pE
 = 
pTîm
->
pEx¥
;

1740 
	`as£π
–!
	`Ex¥HasPr›îty
(
pE
, 
EP_FromJoö
) );

1741 
	`as£π
–(
pTîm
->
¥îeqRight
 & 
pLevñ
->
nŸRódy
)!=0 );

1742 
pA…
 = 
	`sqlôe3WhîeFödTîm
(
pWC
, 
iCur
, 
pTîm
->
u
.
À·Cﬁumn
, 
nŸRódy
,

1743 
WO_EQ
|
WO_IN
|
WO_IS
, 0);

1744 if–
pA…
==0 ) ;

1745 if–
pA…
->
wtFœgs
 & (
TERM_CODED
) ) ;

1746 
	`ã°ˇ£
–
pA…
->
eO≥øt‹
 & 
WO_EQ
 );

1747 
	`ã°ˇ£
–
pA…
->
eO≥øt‹
 & 
WO_IS
 );

1748 
	`ã°ˇ£
–
pA…
->
eO≥øt‹
 & 
WO_IN
 );

1749 
	`VdbeModuÀCommít
((
v
, "beginÅransitive constraint"));

1750 
pEA…
 = 
	`sqlôe3SèckAŒocRaw
(
db
, (*pEAlt));

1751 if–
pEA…
 ){

1752 *
pEA…
 = *
pA…
->
pEx¥
;

1753 
pEA…
->
pLe·
 = 
pE
->pLeft;

1754 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pEA…
, 
addrC⁄t
, 
SQLITE_JUMPIFNULL
);

1755 
	`sqlôe3SèckFªe
(
db
, 
pEA…
);

1762 if–
pLevñ
->
iLe·Joö
 ){

1763 
pLevñ
->
addrFú°
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

1764 
	`sqlôe3VdbeAddOp2
(
v
, 
OP_I¡egî
, 1, 
pLevñ
->
iLe·Joö
);

1765 
	`VdbeCommít
((
v
, "record LEFT JOIN hit"));

1766 
	`sqlôe3Ex¥CacheCÀ¨
(
pP¨£
);

1767 
pTîm
=
pWC
->
a
, 
j
=0; j<pWC->
nTîm
; j++,ÖTerm++){

1768 
	`ã°ˇ£
–
pTîm
->
wtFœgs
 & 
TERM_VIRTUAL
 );

1769 
	`ã°ˇ£
–
pTîm
->
wtFœgs
 & 
TERM_CODED
 );

1770 if–
pTîm
->
wtFœgs
 & (
TERM_VIRTUAL
|
TERM_CODED
) ) ;

1771 if–(
pTîm
->
¥îeqAŒ
 & 
pLevñ
->
nŸRódy
)!=0 ){

1772 
	`as£π
–
pWInfo
->
u¡e°edTîms
 );

1775 
	`as£π
–
pTîm
->
pEx¥
 );

1776 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pTîm
->
pEx¥
, 
addrC⁄t
, 
SQLITE_JUMPIFNULL
);

1777 
pTîm
->
wtFœgs
 |
TERM_CODED
;

1781  
pLevñ
->
nŸRódy
;

1782 
	}
}

	@whereexpr.c

19 
	~"sqlôeI¡.h
"

20 
	~"whîeI¡.h
"

23 
ex¥A«lyze
(
SrcLi°
*, 
WhîeCœu£
*, );

28 
	$whîeOrInfoDñëe
(
sqlôe3
 *
db
, 
WhîeOrInfo
 *
p
){

29 
	`sqlôe3WhîeCœu£CÀ¨
(&
p
->
wc
);

30 
	`sqlôe3DbFªe
(
db
, 
p
);

31 
	}
}

36 
	$whîeAndInfoDñëe
(
sqlôe3
 *
db
, 
WhîeAndInfo
 *
p
){

37 
	`sqlôe3WhîeCœu£CÀ¨
(&
p
->
wc
);

38 
	`sqlôe3DbFªe
(
db
, 
p
);

39 
	}
}

60 
	$whîeCœu£In£π
(
WhîeCœu£
 *
pWC
, 
Ex¥
 *
p
, 
u16
 
wtFœgs
){

61 
WhîeTîm
 *
pTîm
;

62 
idx
;

63 
	`ã°ˇ£
–
wtFœgs
 & 
TERM_VIRTUAL
 );

64 if–
pWC
->
nTîm
>ıWC->
nSlŸ
 ){

65 
WhîeTîm
 *
pOld
 = 
pWC
->
a
;

66 
sqlôe3
 *
db
 = 
pWC
->
pWInfo
->
pP¨£
->db;

67 
pWC
->
a
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, ’WC->a[0])*pWC->
nSlŸ
*2 );

68 if–
pWC
->
a
==0 ){

69 if–
wtFœgs
 & 
TERM_DYNAMIC
 ){

70 
	`sqlôe3Ex¥Dñëe
(
db
, 
p
);

72 
pWC
->
a
 = 
pOld
;

75 
	`mem˝y
(
pWC
->
a
, 
pOld
, ’WC->a[0])*pWC->
nTîm
);

76 if–
pOld
!=
pWC
->
aSètic
 ){

77 
	`sqlôe3DbFªe
(
db
, 
pOld
);

79 
pWC
->
nSlŸ
 = 
	`sqlôe3DbMÆlocSize
(
db
,ÖWC->
a
)/(pWC->a[0]);

80 
	`mem£t
(&
pWC
->
a
[pWC->
nTîm
], 0, ’WC->a[0])*’WC->
nSlŸ
-pWC->nTerm));

82 
pTîm
 = &
pWC
->
a
[
idx
 =ÖWC->
nTîm
++];

83 if–
p
 && 
	`Ex¥HasPr›îty
’, 
EP_U∆ikñy
) ){

84 
pTîm
->
åuthProb
 = 
	`sqlôe3LogE°
(
p
->
iTabÀ
) - 270;

86 
pTîm
->
åuthProb
 = 1;

88 
pTîm
->
pEx¥
 = 
	`sqlôe3Ex¥SkùCﬁœã
(
p
);

89 
pTîm
->
wtFœgs
 = wtFlags;

90 
pTîm
->
pWC
 =ÖWC;

91 
pTîm
->
iP¨ít
 = -1;

92  
idx
;

93 
	}
}

100 
	$ÆlowedOp
(
›
){

101 
	`as£π
–
TK_GT
>
TK_EQ
 && TK_GT<
TK_GE
 );

102 
	`as£π
–
TK_LT
>
TK_EQ
 && TK_LT<
TK_GE
 );

103 
	`as£π
–
TK_LE
>
TK_EQ
 && TK_LE<
TK_GE
 );

104 
	`as£π
–
TK_GE
==
TK_EQ
+4 );

105  
›
==
TK_IN
 || (›>=
TK_EQ
 && op<=
TK_GE
Ë|| op==
TK_ISNULL
 || op==
TK_IS
;

106 
	}
}

120 
	$ex¥Commuã
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
){

121 
u16
 
expRight
 = (
pEx¥
->
pRight
->
Êags
 & 
EP_Cﬁœã
);

122 
u16
 
expLe·
 = (
pEx¥
->
pLe·
->
Êags
 & 
EP_Cﬁœã
);

123 
	`as£π
–
	`ÆlowedOp
(
pEx¥
->
›
Ë&&ÖEx¥->›!=
TK_IN
 );

124 if–
expRight
==
expLe·
 ){

126 if–
expRight
 ){

129 
pEx¥
->
pRight
->
Êags
 &~
EP_Cﬁœã
;

130 }if–
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pEx¥
->
pLe·
)!=0 ){

134 
pEx¥
->
pLe·
->
Êags
 |
EP_Cﬁœã
;

137 
	`SWAP
(
Ex¥
*,
pEx¥
->
pRight
,pEx¥->
pLe·
);

138 if–
pEx¥
->
›
>=
TK_GT
 ){

139 
	`as£π
–
TK_LT
==
TK_GT
+2 );

140 
	`as£π
–
TK_GE
==
TK_LE
+2 );

141 
	`as£π
–
TK_GT
>
TK_EQ
 );

142 
	`as£π
–
TK_GT
<
TK_LE
 );

143 
	`as£π
–
pEx¥
->
›
>=
TK_GT
 &&ÖEx¥->›<=
TK_GE
 );

144 
pEx¥
->
›
 = (’Ex¥->›-
TK_GT
)^2)+TK_GT;

146 
	}
}

151 
u16
 
	$›î©‹Mask
(
›
){

152 
u16
 
c
;

153 
	`as£π
–
	`ÆlowedOp
(
›
) );

154 if–
›
==
TK_IN
 ){

155 
c
 = 
WO_IN
;

156 }if–
›
==
TK_ISNULL
 ){

157 
c
 = 
WO_ISNULL
;

158 }if–
›
==
TK_IS
 ){

159 
c
 = 
WO_IS
;

161 
	`as£π
–(
WO_EQ
<<(
›
-
TK_EQ
)) < 0x7fff );

162 
c
 = (
u16
)(
WO_EQ
<<(
›
-
TK_EQ
));

164 
	`as£π
–
›
!=
TK_ISNULL
 || 
c
==
WO_ISNULL
 );

165 
	`as£π
–
›
!=
TK_IN
 || 
c
==
WO_IN
 );

166 
	`as£π
–
›
!=
TK_EQ
 || 
c
==
WO_EQ
 );

167 
	`as£π
–
›
!=
TK_LT
 || 
c
==
WO_LT
 );

168 
	`as£π
–
›
!=
TK_LE
 || 
c
==
WO_LE
 );

169 
	`as£π
–
›
!=
TK_GT
 || 
c
==
WO_GT
 );

170 
	`as£π
–
›
!=
TK_GE
 || 
c
==
WO_GE
 );

171 
	`as£π
–
›
!=
TK_IS
 || 
c
==
WO_IS
 );

172  
c
;

173 
	}
}

176 #i‚de‡
SQLITE_OMIT_LIKE_OPTIMIZATION


189 
	$isLikeOrGlob
(

190 
P¨£
 *
pP¨£
,

191 
Ex¥
 *
pEx¥
,

192 
Ex¥
 **
µPªfix
,

193 *
pisCom∂ëe
,

194 *
≤oCa£


196 c⁄° *
z
 = 0;

197 
Ex¥
 *
pRight
, *
pLe·
;

198 
Ex¥Li°
 *
pLi°
;

199 
c
;

200 
˙t
;

201 
wc
[3];

202 
sqlôe3
 *
db
 = 
pP¨£
->db;

203 
sqlôe3_vÆue
 *
pVÆ
 = 0;

204 
›
;

205 
rc
;

207 if–!
	`sqlôe3IsLikeFun˘i⁄
(
db
, 
pEx¥
, 
≤oCa£
, 
wc
) ){

210 #ifde‡
SQLITE_EBCDIC


211 if–*
≤oCa£
 )  0;

213 
pLi°
 = 
pEx¥
->
x
.pList;

214 
pLe·
 = 
pLi°
->
a
[1].
pEx¥
;

215 if–
pLe·
->
›
!=
TK_COLUMN


216 || 
	`sqlôe3Ex¥Afföôy
(
pLe·
)!=
SQLITE_AFF_TEXT


217 || 
	`IsVútuÆ
(
pLe·
->
pTab
)

223 
	`as£π
–
pLe·
->
iCﬁumn
!=(-1) );

225 
pRight
 = 
	`sqlôe3Ex¥SkùCﬁœã
(
pLi°
->
a
[0].
pEx¥
);

226 
›
 = 
pRight
->op;

227 if–
›
==
TK_VARIABLE
 ){

228 
Vdbe
 *
pRïª∑ª
 = 
pP¨£
->pReprepare;

229 
iCﬁ
 = 
pRight
->
iCﬁumn
;

230 
pVÆ
 = 
	`sqlôe3VdbeGëBoundVÆue
(
pRïª∑ª
, 
iCﬁ
, 
SQLITE_AFF_BLOB
);

231 if–
pVÆ
 && 
	`sqlôe3_vÆue_ty≥
’VÆ)==
SQLITE_TEXT
 ){

232 
z
 = (*)
	`sqlôe3_vÆue_ãxt
(
pVÆ
);

234 
	`sqlôe3VdbeSëV¨mask
(
pP¨£
->
pVdbe
, 
iCﬁ
);

235 
	`as£π
–
pRight
->
›
==
TK_VARIABLE
 ||ÖRight->›==
TK_REGISTER
 );

236 }if–
›
==
TK_STRING
 ){

237 
z
 = 
pRight
->
u
.
zTokí
;

239 if–
z
 ){

240 
˙t
 = 0;

241  (
c
=
z
[
˙t
])!=0 && c!=
wc
[0] && c!=wc[1] && c!=wc[2] ){

242 
˙t
++;

244 if–
˙t
!=0 && 255!=(
u8
)
z
[cnt-1] ){

245 
Ex¥
 *
pPªfix
;

246 *
pisCom∂ëe
 = 
c
==
wc
[0] && 
z
[
˙t
+1]==0;

247 
pPªfix
 = 
	`sqlôe3Ex¥
(
db
, 
TK_STRING
, 
z
);

248 if–
pPªfix
 )ÖPªfix->
u
.
zTokí
[
˙t
] = 0;

249 *
µPªfix
 = 
pPªfix
;

250 if–
›
==
TK_VARIABLE
 ){

251 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

252 
	`sqlôe3VdbeSëV¨mask
(
v
, 
pRight
->
iCﬁumn
);

253 if–*
pisCom∂ëe
 && 
pRight
->
u
.
zTokí
[1] ){

260 
r1
 = 
	`sqlôe3GëTempReg
(
pP¨£
);

261 
	`sqlôe3Ex¥CodeT¨gë
(
pP¨£
, 
pRight
, 
r1
);

262 
	`sqlôe3VdbeCh™geP3
(
v
, 
	`sqlôe3VdbeCuºítAddr
(v)-1, 0);

263 
	`sqlôe3Rñó£TempReg
(
pP¨£
, 
r1
);

267 
z
 = 0;

271 
rc
 = (
z
!=0);

272 
	`sqlôe3VÆueFªe
(
pVÆ
);

273  
rc
;

274 
	}
}

278 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


289 
	$isM©chOfCﬁumn
(

290 
Ex¥
 *
pEx¥
,

291 *
≥Op2


293 
	sOp2
 {

294 c⁄° *
zOp
;

295 
eOp2
;

296 } 
aOp
[] = {

297 { "m©ch", 
SQLITE_INDEX_CONSTRAINT_MATCH
 },

298 { "glob", 
SQLITE_INDEX_CONSTRAINT_GLOB
 },

299 { "like", 
SQLITE_INDEX_CONSTRAINT_LIKE
 },

300 { "ªgexp", 
SQLITE_INDEX_CONSTRAINT_REGEXP
 }

302 
Ex¥Li°
 *
pLi°
;

303 
Ex¥
 *
pCﬁ
;

304 
i
;

306 if–
pEx¥
->
›
!=
TK_FUNCTION
 ){

309 
pLi°
 = 
pEx¥
->
x
.pList;

310 if–
pLi°
==0 ||ÖLi°->
nEx¥
!=2 ){

313 
pCﬁ
 = 
pLi°
->
a
[1].
pEx¥
;

314 if–
pCﬁ
->
›
!=
TK_COLUMN
 || !
	`IsVútuÆ
’Cﬁ->
pTab
) ){

317 
i
=0; i<
	`AºaySize
(
aOp
); i++){

318 if–
	`sqlôe3SåICmp
(
pEx¥
->
u
.
zTokí
, 
aOp
[
i
].
zOp
)==0 ){

319 *
≥Op2
 = 
aOp
[
i
].
eOp2
;

324 
	}
}

331 
	$å™s„rJoöM¨kögs
(
Ex¥
 *
pDîived
, Ex¥ *
pBa£
){

332 if–
pDîived
 ){

333 
pDîived
->
Êags
 |
pBa£
->Êag†& 
EP_FromJoö
;

334 
pDîived
->
iRightJoöTabÀ
 = 
pBa£
->iRightJoinTable;

336 
	}
}

341 
	$m¨kTîmAsChûd
(
WhîeCœu£
 *
pWC
, 
iChûd
, 
iP¨ít
){

342 
pWC
->
a
[
iChûd
].
iP¨ít
 = iParent;

343 
pWC
->
a
[
iChûd
].
åuthProb
 =ÖWC->a[
iP¨ít
].truthProb;

344 
pWC
->
a
[
iP¨ít
].
nChûd
++;

345 
	}
}

352 
WhîeTîm
 *
	$whîeNthSubãrm
(
WhîeTîm
 *
pTîm
, 
N
){

353 if–
pTîm
->
eO≥øt‹
!=
WO_AND
 ){

354  
N
==0 ? 
pTîm
 : 0;

356 if–
N
<
pTîm
->
u
.
pAndInfo
->
wc
.
nTîm
 ){

357  &
pTîm
->
u
.
pAndInfo
->
wc
.
a
[
N
];

360 
	}
}

382 
	$whîeComböeDisjun˘s
(

383 
SrcLi°
 *
pSrc
,

384 
WhîeCœu£
 *
pWC
,

385 
WhîeTîm
 *
pO√
,

386 
WhîeTîm
 *
pTwo


388 
u16
 
eOp
 = 
pO√
->
eO≥øt‹
 | 
pTwo
->eOperator;

389 
sqlôe3
 *
db
;

390 
Ex¥
 *
pNew
;

391 
›
;

392 
idxNew
;

394 if–(
pO√
->
eO≥øt‹
 & (
WO_EQ
|
WO_LT
|
WO_LE
|
WO_GT
|
WO_GE
))==0 ) ;

395 if–(
pTwo
->
eO≥øt‹
 & (
WO_EQ
|
WO_LT
|
WO_LE
|
WO_GT
|
WO_GE
))==0 ) ;

396 if–(
eOp
 & (
WO_EQ
|
WO_LT
|
WO_LE
))!=eOp

397 && (
eOp
 & (
WO_EQ
|
WO_GT
|
WO_GE
))!=eOp ) ;

398 
	`as£π
–
pO√
->
pEx¥
->
pLe·
!=0 &&ÖO√->pEx¥->
pRight
!=0 );

399 
	`as£π
–
pTwo
->
pEx¥
->
pLe·
!=0 &&ÖTwo->pEx¥->
pRight
!=0 );

400 if–
	`sqlôe3Ex¥Com∑ª
(
pO√
->
pEx¥
->
pLe·
, 
pTwo
->pExpr->pLeft, -1) ) ;

401 if–
	`sqlôe3Ex¥Com∑ª
(
pO√
->
pEx¥
->
pRight
, 
pTwo
->pExpr->pRight, -1) );

403 if–(
eOp
 & (eOp-1))!=0 ){

404 if–
eOp
 & (
WO_LT
|
WO_LE
) ){

405 
eOp
 = 
WO_LE
;

407 
	`as£π
–
eOp
 & (
WO_GT
|
WO_GE
) );

408 
eOp
 = 
WO_GE
;

411 
db
 = 
pWC
->
pWInfo
->
pP¨£
->db;

412 
pNew
 = 
	`sqlôe3Ex¥Dup
(
db
, 
pO√
->
pEx¥
, 0);

413 if–
pNew
==0 ) ;

414 
›
=
TK_EQ
; 
eOp
!=(
WO_EQ
<<(›-TK_EQ)); op++){ 
	`as£π
–›<
TK_GE
 ); }

415 
pNew
->
›
 = op;

416 
idxNew
 = 
	`whîeCœu£In£π
(
pWC
, 
pNew
, 
TERM_VIRTUAL
|
TERM_DYNAMIC
);

417 
	`ex¥A«lyze
(
pSrc
, 
pWC
, 
idxNew
);

418 
	}
}

420 #i‡!
deföed
(
SQLITE_OMIT_OR_OPTIMIZATION
Ë&& !deföed(
SQLITE_OMIT_SUBQUERY
)

508 
	$ex¥A«lyzeOrTîm
(

509 
SrcLi°
 *
pSrc
,

510 
WhîeCœu£
 *
pWC
,

511 
idxTîm


513 
WhîeInfo
 *
pWInfo
 = 
pWC
->pWInfo;

514 
P¨£
 *
pP¨£
 = 
pWInfo
->pParse;

515 
sqlôe3
 *
db
 = 
pP¨£
->db;

516 
WhîeTîm
 *
pTîm
 = &
pWC
->
a
[
idxTîm
];

517 
Ex¥
 *
pEx¥
 = 
pTîm
->pExpr;

518 
i
;

519 
WhîeCœu£
 *
pOrWc
;

520 
WhîeTîm
 *
pOrTîm
;

521 
WhîeOrInfo
 *
pOrInfo
;

522 
Bômask
 
chngToIN
;

523 
Bômask
 
ödexabÀ
;

530 
	`as£π
–(
pTîm
->
wtFœgs
 & (
TERM_DYNAMIC
|
TERM_ORINFO
|
TERM_ANDINFO
))==0 );

531 
	`as£π
–
pEx¥
->
›
==
TK_OR
 );

532 
pTîm
->
u
.
pOrInfo
 =ÖOrInfÿ
	`sqlôe3DbMÆlocZîo
(
db
, (*pOrInfo));

533 if–
pOrInfo
==0 ) ;

534 
pTîm
->
wtFœgs
 |
TERM_ORINFO
;

535 
pOrWc
 = &
pOrInfo
->
wc
;

536 
	`mem£t
(
pOrWc
->
aSètic
, 0, (pOrWc->aStatic));

537 
	`sqlôe3WhîeCœu£Inô
(
pOrWc
, 
pWInfo
);

538 
	`sqlôe3WhîeS∂ô
(
pOrWc
, 
pEx¥
, 
TK_OR
);

539 
	`sqlôe3WhîeEx¥A«lyze
(
pSrc
, 
pOrWc
);

540 if–
db
->
mÆlocFaûed
 ) ;

541 
	`as£π
–
pOrWc
->
nTîm
>=2 );

546 
ödexabÀ
 = ~(
Bômask
)0;

547 
chngToIN
 = ~(
Bômask
)0;

548 
i
=
pOrWc
->
nTîm
-1, 
pOrTîm
ıOrWc->
a
; i>=0 && 
ödexabÀ
; i--,ÖOrTerm++){

549 if–(
pOrTîm
->
eO≥øt‹
 & 
WO_SINGLE
)==0 ){

550 
WhîeAndInfo
 *
pAndInfo
;

551 
	`as£π
–(
pOrTîm
->
wtFœgs
 & (
TERM_ANDINFO
|
TERM_ORINFO
))==0 );

552 
chngToIN
 = 0;

553 
pAndInfo
 = 
	`sqlôe3DbMÆlocRawNN
(
db
, (*pAndInfo));

554 if–
pAndInfo
 ){

555 
WhîeCœu£
 *
pAndWC
;

556 
WhîeTîm
 *
pAndTîm
;

557 
j
;

558 
Bômask
 
b
 = 0;

559 
pOrTîm
->
u
.
pAndInfo
 =ÖAndInfo;

560 
pOrTîm
->
wtFœgs
 |
TERM_ANDINFO
;

561 
pOrTîm
->
eO≥øt‹
 = 
WO_AND
;

562 
pAndWC
 = &
pAndInfo
->
wc
;

563 
	`mem£t
(
pAndWC
->
aSètic
, 0, (pAndWC->aStatic));

564 
	`sqlôe3WhîeCœu£Inô
(
pAndWC
, 
pWC
->
pWInfo
);

565 
	`sqlôe3WhîeS∂ô
(
pAndWC
, 
pOrTîm
->
pEx¥
, 
TK_AND
);

566 
	`sqlôe3WhîeEx¥A«lyze
(
pSrc
, 
pAndWC
);

567 
pAndWC
->
pOuãr
 = 
pWC
;

568 if–!
db
->
mÆlocFaûed
 ){

569 
j
=0, 
pAndTîm
=
pAndWC
->
a
; j<pAndWC->
nTîm
; j++,ÖAndTerm++){

570 
	`as£π
–
pAndTîm
->
pEx¥
 );

571 if–
	`ÆlowedOp
(
pAndTîm
->
pEx¥
->
›
) ){

572 
b
 |
	`sqlôe3WhîeGëMask
(&
pWInfo
->
sMaskSë
, 
pAndTîm
->
À·Curs‹
);

576 
ödexabÀ
 &
b
;

578 }if–
pOrTîm
->
wtFœgs
 & 
TERM_COPIED
 ){

582 
Bômask
 
b
;

583 
b
 = 
	`sqlôe3WhîeGëMask
(&
pWInfo
->
sMaskSë
, 
pOrTîm
->
À·Curs‹
);

584 if–
pOrTîm
->
wtFœgs
 & 
TERM_VIRTUAL
 ){

585 
WhîeTîm
 *
pOthî
 = &
pOrWc
->
a
[
pOrTîm
->
iP¨ít
];

586 
b
 |
	`sqlôe3WhîeGëMask
(&
pWInfo
->
sMaskSë
, 
pOthî
->
À·Curs‹
);

588 
ödexabÀ
 &
b
;

589 if–(
pOrTîm
->
eO≥øt‹
 & 
WO_EQ
)==0 ){

590 
chngToIN
 = 0;

592 
chngToIN
 &
b
;

601 
pOrInfo
->
ödexabÀ
 = indexable;

602 
pTîm
->
eO≥øt‹
 = 
ödexabÀ
==0 ? 0 : 
WO_OR
;

606 if–
ödexabÀ
 && 
pOrWc
->
nTîm
==2 ){

607 
iO√
 = 0;

608 
WhîeTîm
 *
pO√
;

609  (
pO√
 = 
	`whîeNthSubãrm
(&
pOrWc
->
a
[0],
iO√
++))!=0 ){

610 
iTwo
 = 0;

611 
WhîeTîm
 *
pTwo
;

612  (
pTwo
 = 
	`whîeNthSubãrm
(&
pOrWc
->
a
[1],
iTwo
++))!=0 ){

613 
	`whîeComböeDisjun˘s
(
pSrc
, 
pWC
, 
pO√
, 
pTwo
);

639 if–
chngToIN
 ){

640 
okToChngToIN
 = 0;

641 
iCﬁumn
 = -1;

642 
iCurs‹
 = -1;

643 
j
 = 0;

651 
j
=0; j<2 && !
okToChngToIN
; j++){

652 
pOrTîm
 = 
pOrWc
->
a
;

653 
i
=
pOrWc
->
nTîm
-1; i>=0; i--, 
pOrTîm
++){

654 
	`as£π
–
pOrTîm
->
eO≥øt‹
 & 
WO_EQ
 );

655 
pOrTîm
->
wtFœgs
 &~
TERM_OR_OK
;

656 if–
pOrTîm
->
À·Curs‹
==
iCurs‹
 ){

659 
	`as£π
–
j
==1 );

662 if–(
chngToIN
 & 
	`sqlôe3WhîeGëMask
(&
pWInfo
->
sMaskSë
,

663 
pOrTîm
->
À·Curs‹
))==0 ){

668 
	`ã°ˇ£
–
pOrTîm
->
wtFœgs
 & 
TERM_COPIED
 );

669 
	`ã°ˇ£
–
pOrTîm
->
wtFœgs
 & 
TERM_VIRTUAL
 );

670 
	`as£π
–
pOrTîm
->
wtFœgs
 & (
TERM_COPIED
|
TERM_VIRTUAL
) );

673 
iCﬁumn
 = 
pOrTîm
->
u
.
À·Cﬁumn
;

674 
iCurs‹
 = 
pOrTîm
->
À·Curs‹
;

677 if–
i
<0 ){

680 
	`as£π
–
j
==1 );

681 
	`as£π
–
	`IsPowîOfTwo
(
chngToIN
) );

682 
	`as£π
–
chngToIN
==
	`sqlôe3WhîeGëMask
(&
pWInfo
->
sMaskSë
, 
iCurs‹
) );

685 
	`ã°ˇ£
–
j
==1 );

689 
okToChngToIN
 = 1;

690 ; 
i
>=0 && 
okToChngToIN
; i--, 
pOrTîm
++){

691 
	`as£π
–
pOrTîm
->
eO≥øt‹
 & 
WO_EQ
 );

692 if–
pOrTîm
->
À·Curs‹
!=
iCurs‹
 ){

693 
pOrTîm
->
wtFœgs
 &~
TERM_OR_OK
;

694 }if–
pOrTîm
->
u
.
À·Cﬁumn
!=
iCﬁumn
 ){

695 
okToChngToIN
 = 0;

697 
affLe·
, 
affRight
;

702 
affRight
 = 
	`sqlôe3Ex¥Afföôy
(
pOrTîm
->
pEx¥
->
pRight
);

703 
affLe·
 = 
	`sqlôe3Ex¥Afföôy
(
pOrTîm
->
pEx¥
->
pLe·
);

704 if–
affRight
!=0 &&áffRight!=
affLe·
 ){

705 
okToChngToIN
 = 0;

707 
pOrTîm
->
wtFœgs
 |
TERM_OR_OK
;

717 if–
okToChngToIN
 ){

718 
Ex¥
 *
pDup
;

719 
Ex¥Li°
 *
pLi°
 = 0;

720 
Ex¥
 *
pLe·
 = 0;

721 
Ex¥
 *
pNew
;

723 
i
=
pOrWc
->
nTîm
-1, 
pOrTîm
ıOrWc->
a
; i>=0; i--,ÖOrTerm++){

724 if–(
pOrTîm
->
wtFœgs
 & 
TERM_OR_OK
)==0 ) ;

725 
	`as£π
–
pOrTîm
->
eO≥øt‹
 & 
WO_EQ
 );

726 
	`as£π
–
pOrTîm
->
À·Curs‹
==
iCurs‹
 );

727 
	`as£π
–
pOrTîm
->
u
.
À·Cﬁumn
==
iCﬁumn
 );

728 
pDup
 = 
	`sqlôe3Ex¥Dup
(
db
, 
pOrTîm
->
pEx¥
->
pRight
, 0);

729 
pLi°
 = 
	`sqlôe3Ex¥Li°Aµíd
(
pWInfo
->
pP¨£
,ÖLi°, 
pDup
);

730 
pLe·
 = 
pOrTîm
->
pEx¥
->pLeft;

732 
	`as£π
–
pLe·
!=0 );

733 
pDup
 = 
	`sqlôe3Ex¥Dup
(
db
, 
pLe·
, 0);

734 
pNew
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_IN
, 
pDup
, 0, 0);

735 if–
pNew
 ){

736 
idxNew
;

737 
	`å™s„rJoöM¨kögs
(
pNew
, 
pEx¥
);

738 
	`as£π
–!
	`Ex¥HasPr›îty
(
pNew
, 
EP_xIsSñe˘
) );

739 
pNew
->
x
.
pLi°
 =ÖList;

740 
idxNew
 = 
	`whîeCœu£In£π
(
pWC
, 
pNew
, 
TERM_VIRTUAL
|
TERM_DYNAMIC
);

741 
	`ã°ˇ£
–
idxNew
==0 );

742 
	`ex¥A«lyze
(
pSrc
, 
pWC
, 
idxNew
);

743 
pTîm
 = &
pWC
->
a
[
idxTîm
];

744 
	`m¨kTîmAsChûd
(
pWC
, 
idxNew
, 
idxTîm
);

746 
	`sqlôe3Ex¥Li°Dñëe
(
db
, 
pLi°
);

748 
pTîm
->
eO≥øt‹
 = 
WO_NOOP
;

751 
	}
}

769 
	$ãrmIsEquivÆí˚
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
){

770 
aff1
, 
aff2
;

771 
CﬁlSeq
 *
pCﬁl
;

772 c⁄° *
zCﬁl1
, *
zCﬁl2
;

773 if–!
	`O±imiz©i⁄E«bÀd
(
pP¨£
->
db
, 
SQLITE_Tønsôive
) )  0;

774 if–
pEx¥
->
›
!=
TK_EQ
 &&ÖEx¥->›!=
TK_IS
 )  0;

775 if–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_FromJoö
) )  0;

776 
aff1
 = 
	`sqlôe3Ex¥Afföôy
(
pEx¥
->
pLe·
);

777 
aff2
 = 
	`sqlôe3Ex¥Afföôy
(
pEx¥
->
pRight
);

778 if–
aff1
!=
aff2


779 && (!
	`sqlôe3IsNumîicAfföôy
(
aff1
Ë|| !sqlôe3IsNumîicAfföôy(
aff2
))

783 
pCﬁl
 = 
	`sqlôe3Bö¨yCom∑ªCﬁlSeq
(
pP¨£
, 
pEx¥
->
pLe·
,ÖEx¥->
pRight
);

784 if–
pCﬁl
==0 || 
	`sqlôe3SåICmp
’Cﬁl->
zName
, "BINARY")==0 )  1;

785 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pEx¥
->
pLe·
);

788 
zCﬁl1
 = 
	`ALWAYS
(
pCﬁl
Ë?ÖCﬁl->
zName
 : 0;

789 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pEx¥
->
pRight
);

790 
zCﬁl2
 = 
	`ALWAYS
(
pCﬁl
Ë?ÖCﬁl->
zName
 : 0;

791  
	`sqlôe3SåICmp
(
zCﬁl1
, 
zCﬁl2
)==0;

792 
	}
}

799 
Bômask
 
	$ex¥Sñe˘Ußge
(
WhîeMaskSë
 *
pMaskSë
, 
Sñe˘
 *
pS
){

800 
Bômask
 
mask
 = 0;

801  
pS
 ){

802 
SrcLi°
 *
pSrc
 = 
pS
->pSrc;

803 
mask
 |
	`sqlôe3WhîeEx¥Li°Ußge
(
pMaskSë
, 
pS
->
pELi°
);

804 
mask
 |
	`sqlôe3WhîeEx¥Li°Ußge
(
pMaskSë
, 
pS
->
pGroupBy
);

805 
mask
 |
	`sqlôe3WhîeEx¥Li°Ußge
(
pMaskSë
, 
pS
->
pOrdîBy
);

806 
mask
 |
	`sqlôe3WhîeEx¥Ußge
(
pMaskSë
, 
pS
->
pWhîe
);

807 
mask
 |
	`sqlôe3WhîeEx¥Ußge
(
pMaskSë
, 
pS
->
pHavög
);

808 if–
	`ALWAYS
(
pSrc
!=0) ){

809 
i
;

810 
i
=0; i<
pSrc
->
nSrc
; i++){

811 
mask
 |
	`ex¥Sñe˘Ußge
(
pMaskSë
, 
pSrc
->
a
[
i
].
pSñe˘
);

812 
mask
 |
	`sqlôe3WhîeEx¥Ußge
(
pMaskSë
, 
pSrc
->
a
[
i
].
pOn
);

815 
pS
 =ÖS->
pPri‹
;

817  
mask
;

818 
	}
}

832 
	$ex¥MightBeIndexed
(

833 
SrcLi°
 *
pFrom
,

834 
Bômask
 
mPªªq
,

835 
Ex¥
 *
pEx¥
,

836 *
piCur
,

837 *
piCﬁumn


839 
Index
 *
pIdx
;

840 
i
;

841 
iCur
;

842 if–
pEx¥
->
›
==
TK_COLUMN
 ){

843 *
piCur
 = 
pEx¥
->
iTabÀ
;

844 *
piCﬁumn
 = 
pEx¥
->
iCﬁumn
;

847 if–
mPªªq
==0 )  0;

848 if–(
mPªªq
&(mPrereq-1))!=0 )  0;

849 
i
=0; 
mPªªq
>1; i++, mPrereq>>=1){}

850 
iCur
 = 
pFrom
->
a
[
i
].
iCurs‹
;

851 
pIdx
=
pFrom
->
a
[
i
].
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

852 if–
pIdx
->
aCﬁEx¥
==0 ) ;

853 
i
=0; i<
pIdx
->
nKeyCﬁ
; i++){

854 if–
pIdx
->
aiCﬁumn
[
i
]!=(-2) ) ;

855 if–
	`sqlôe3Ex¥Com∑ª
(
pEx¥
, 
pIdx
->
aCﬁEx¥
->
a
[
i
].pEx¥, 
iCur
)==0 ){

856 *
piCur
 = 
iCur
;

857 *
piCﬁumn
 = -2;

863 
	}
}

883 
	$ex¥A«lyze
(

884 
SrcLi°
 *
pSrc
,

885 
WhîeCœu£
 *
pWC
,

886 
idxTîm


888 
WhîeInfo
 *
pWInfo
 = 
pWC
->pWInfo;

889 
WhîeTîm
 *
pTîm
;

890 
WhîeMaskSë
 *
pMaskSë
;

891 
Ex¥
 *
pEx¥
;

892 
Bômask
 
¥îeqLe·
;

893 
Bômask
 
¥îeqAŒ
;

894 
Bômask
 
exåaRight
 = 0;

895 
Ex¥
 *
pSå1
 = 0;

896 
isCom∂ëe
 = 0;

897 
noCa£
 = 0;

898 
›
;

899 
P¨£
 *
pP¨£
 = 
pWInfo
->pParse;

900 
sqlôe3
 *
db
 = 
pP¨£
->db;

901 
eOp2
;

903 if–
db
->
mÆlocFaûed
 ){

906 
pTîm
 = &
pWC
->
a
[
idxTîm
];

907 
pMaskSë
 = &
pWInfo
->
sMaskSë
;

908 
pEx¥
 = 
pTîm
->pExpr;

909 
	`as£π
–
pEx¥
->
›
!=
TK_AS
 &&ÖEx¥->›!=
TK_COLLATE
 );

910 
¥îeqLe·
 = 
	`sqlôe3WhîeEx¥Ußge
(
pMaskSë
, 
pEx¥
->
pLe·
);

911 
›
 = 
pEx¥
->op;

912 if–
›
==
TK_IN
 ){

913 
	`as£π
–
pEx¥
->
pRight
==0 );

914 if–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_xIsSñe˘
) ){

915 
pTîm
->
¥îeqRight
 = 
	`ex¥Sñe˘Ußge
(
pMaskSë
, 
pEx¥
->
x
.
pSñe˘
);

917 
pTîm
->
¥îeqRight
 = 
	`sqlôe3WhîeEx¥Li°Ußge
(
pMaskSë
, 
pEx¥
->
x
.
pLi°
);

919 }if–
›
==
TK_ISNULL
 ){

920 
pTîm
->
¥îeqRight
 = 0;

922 
pTîm
->
¥îeqRight
 = 
	`sqlôe3WhîeEx¥Ußge
(
pMaskSë
, 
pEx¥
->
pRight
);

924 
¥îeqAŒ
 = 
	`sqlôe3WhîeEx¥Ußge
(
pMaskSë
, 
pEx¥
);

925 if–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_FromJoö
) ){

926 
Bômask
 
x
 = 
	`sqlôe3WhîeGëMask
(
pMaskSë
, 
pEx¥
->
iRightJoöTabÀ
);

927 
¥îeqAŒ
 |
x
;

928 
exåaRight
 = 
x
-1;

931 
pTîm
->
¥îeqAŒ
 =ÖrereqAll;

932 
pTîm
->
À·Curs‹
 = -1;

933 
pTîm
->
iP¨ít
 = -1;

934 
pTîm
->
eO≥øt‹
 = 0;

935 if–
	`ÆlowedOp
(
›
) ){

936 
iCur
, 
iCﬁumn
;

937 
Ex¥
 *
pLe·
 = 
	`sqlôe3Ex¥SkùCﬁœã
(
pEx¥
->pLeft);

938 
Ex¥
 *
pRight
 = 
	`sqlôe3Ex¥SkùCﬁœã
(
pEx¥
->pRight);

939 
u16
 
›Mask
 = (
pTîm
->
¥îeqRight
 & 
¥îeqLe·
)==0 ? 
WO_ALL
 : 
WO_EQUIV
;

940 if–
	`ex¥MightBeIndexed
(
pSrc
, 
¥îeqLe·
, 
pLe·
, &
iCur
, &
iCﬁumn
) ){

941 
pTîm
->
À·Curs‹
 = 
iCur
;

942 
pTîm
->
u
.
À·Cﬁumn
 = 
iCﬁumn
;

943 
pTîm
->
eO≥øt‹
 = 
	`›î©‹Mask
(
›
Ë& 
›Mask
;

945 if–
›
==
TK_IS
 ) 
pTîm
->
wtFœgs
 |
TERM_IS
;

946 if–
pRight


947 && 
	`ex¥MightBeIndexed
(
pSrc
, 
pTîm
->
¥îeqRight
, 
pRight
, &
iCur
, &
iCﬁumn
)

949 
WhîeTîm
 *
pNew
;

950 
Ex¥
 *
pDup
;

951 
u16
 
eExåaOp
 = 0;

952 if–
pTîm
->
À·Curs‹
>=0 ){

953 
idxNew
;

954 
pDup
 = 
	`sqlôe3Ex¥Dup
(
db
, 
pEx¥
, 0);

955 if–
db
->
mÆlocFaûed
 ){

956 
	`sqlôe3Ex¥Dñëe
(
db
, 
pDup
);

959 
idxNew
 = 
	`whîeCœu£In£π
(
pWC
, 
pDup
, 
TERM_VIRTUAL
|
TERM_DYNAMIC
);

960 if–
idxNew
==0 ) ;

961 
pNew
 = &
pWC
->
a
[
idxNew
];

962 
	`m¨kTîmAsChûd
(
pWC
, 
idxNew
, 
idxTîm
);

963 if–
›
==
TK_IS
 ) 
pNew
->
wtFœgs
 |
TERM_IS
;

964 
pTîm
 = &
pWC
->
a
[
idxTîm
];

965 
pTîm
->
wtFœgs
 |
TERM_COPIED
;

967 if–
	`ãrmIsEquivÆí˚
(
pP¨£
, 
pDup
) ){

968 
pTîm
->
eO≥øt‹
 |
WO_EQUIV
;

969 
eExåaOp
 = 
WO_EQUIV
;

972 
pDup
 = 
pEx¥
;

973 
pNew
 = 
pTîm
;

975 
	`ex¥Commuã
(
pP¨£
, 
pDup
);

976 
pNew
->
À·Curs‹
 = 
iCur
;

977 
pNew
->
u
.
À·Cﬁumn
 = 
iCﬁumn
;

978 
	`ã°ˇ£
–(
¥îeqLe·
 | 
exåaRight
) !=ÖrereqLeft );

979 
pNew
->
¥îeqRight
 = 
¥îeqLe·
 | 
exåaRight
;

980 
pNew
->
¥îeqAŒ
 =ÖrereqAll;

981 
pNew
->
eO≥øt‹
 = (
	`›î©‹Mask
(
pDup
->
›
Ë+ 
eExåaOp
Ë& 
›Mask
;

985 #i‚de‡
SQLITE_OMIT_BETWEEN_OPTIMIZATION


1001 if–
pEx¥
->
›
==
TK_BETWEEN
 && 
pWC
->›==
TK_AND
 ){

1002 
Ex¥Li°
 *
pLi°
 = 
pEx¥
->
x
.pList;

1003 
i
;

1004 c⁄° 
u8
 
›s
[] = {
TK_GE
, 
TK_LE
};

1005 
	`as£π
–
pLi°
!=0 );

1006 
	`as£π
–
pLi°
->
nEx¥
==2 );

1007 
i
=0; i<2; i++){

1008 
Ex¥
 *
pNewEx¥
;

1009 
idxNew
;

1010 
pNewEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
›s
[
i
],

1011 
	`sqlôe3Ex¥Dup
(
db
, 
pEx¥
->
pLe·
, 0),

1012 
	`sqlôe3Ex¥Dup
(
db
, 
pLi°
->
a
[
i
].
pEx¥
, 0), 0);

1013 
	`å™s„rJoöM¨kögs
(
pNewEx¥
, 
pEx¥
);

1014 
idxNew
 = 
	`whîeCœu£In£π
(
pWC
, 
pNewEx¥
, 
TERM_VIRTUAL
|
TERM_DYNAMIC
);

1015 
	`ã°ˇ£
–
idxNew
==0 );

1016 
	`ex¥A«lyze
(
pSrc
, 
pWC
, 
idxNew
);

1017 
pTîm
 = &
pWC
->
a
[
idxTîm
];

1018 
	`m¨kTîmAsChûd
(
pWC
, 
idxNew
, 
idxTîm
);

1023 #i‡!
	`deföed
(
SQLITE_OMIT_OR_OPTIMIZATION
Ë&& !deföed(
SQLITE_OMIT_SUBQUERY
)

1027 if–
pEx¥
->
›
==
TK_OR
 ){

1028 
	`as£π
–
pWC
->
›
==
TK_AND
 );

1029 
	`ex¥A«lyzeOrTîm
(
pSrc
, 
pWC
, 
idxTîm
);

1030 
pTîm
 = &
pWC
->
a
[
idxTîm
];

1034 #i‚de‡
SQLITE_OMIT_LIKE_OPTIMIZATION


1048 if–
pWC
->
›
==
TK_AND


1049 && 
	`isLikeOrGlob
(
pP¨£
, 
pEx¥
, &
pSå1
, &
isCom∂ëe
, &
noCa£
)

1051 
Ex¥
 *
pLe·
;

1052 
Ex¥
 *
pSå2
;

1053 
Ex¥
 *
pNewEx¥1
;

1054 
Ex¥
 *
pNewEx¥2
;

1055 
idxNew1
;

1056 
idxNew2
;

1057 c⁄° *
zCﬁlSeqName
;

1058 c⁄° 
u16
 
wtFœgs
 = 
TERM_LIKEOPT
 | 
TERM_VIRTUAL
 | 
TERM_DYNAMIC
;

1060 
pLe·
 = 
pEx¥
->
x
.
pLi°
->
a
[1].pExpr;

1061 
pSå2
 = 
	`sqlôe3Ex¥Dup
(
db
, 
pSå1
, 0);

1067 if–
noCa£
 && !
pP¨£
->
db
->
mÆlocFaûed
 ){

1068 
i
;

1069 
c
;

1070 
pTîm
->
wtFœgs
 |
TERM_LIKE
;

1071 
i
=0; (
c
 = 
pSå1
->
u
.
zTokí
[i])!=0; i++){

1072 
pSå1
->
u
.
zTokí
[
i
] = 
	`sqlôe3Touµî
(
c
);

1073 
pSå2
->
u
.
zTokí
[
i
] = 
	`sqlôe3Tﬁowî
(
c
);

1077 if–!
db
->
mÆlocFaûed
 ){

1078 
u8
 
c
, *
pC
;

1079 
pC
 = (
u8
*)&
pSå2
->
u
.
zTokí
[
	`sqlôe3SåÀn30
(pStr2->u.zToken)-1];

1080 
c
 = *
pC
;

1081 if–
noCa£
 ){

1088 if–
c
=='A'-1 ) 
isCom∂ëe
 = 0;

1089 
c
 = 
sqlôe3UµîToLowî
[c];

1091 *
pC
 = 
c
 + 1;

1093 
zCﬁlSeqName
 = 
noCa£
 ? "NOCASE" : "BINARY";

1094 
pNewEx¥1
 = 
	`sqlôe3Ex¥Dup
(
db
, 
pLe·
, 0);

1095 
pNewEx¥1
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_GE
,

1096 
	`sqlôe3Ex¥AddCﬁœãSåög
(
pP¨£
,
pNewEx¥1
,
zCﬁlSeqName
),

1097 
pSå1
, 0);

1098 
	`å™s„rJoöM¨kögs
(
pNewEx¥1
, 
pEx¥
);

1099 
idxNew1
 = 
	`whîeCœu£In£π
(
pWC
, 
pNewEx¥1
, 
wtFœgs
);

1100 
	`ã°ˇ£
–
idxNew1
==0 );

1101 
	`ex¥A«lyze
(
pSrc
, 
pWC
, 
idxNew1
);

1102 
pNewEx¥2
 = 
	`sqlôe3Ex¥Dup
(
db
, 
pLe·
, 0);

1103 
pNewEx¥2
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_LT
,

1104 
	`sqlôe3Ex¥AddCﬁœãSåög
(
pP¨£
,
pNewEx¥2
,
zCﬁlSeqName
),

1105 
pSå2
, 0);

1106 
	`å™s„rJoöM¨kögs
(
pNewEx¥2
, 
pEx¥
);

1107 
idxNew2
 = 
	`whîeCœu£In£π
(
pWC
, 
pNewEx¥2
, 
wtFœgs
);

1108 
	`ã°ˇ£
–
idxNew2
==0 );

1109 
	`ex¥A«lyze
(
pSrc
, 
pWC
, 
idxNew2
);

1110 
pTîm
 = &
pWC
->
a
[
idxTîm
];

1111 if–
isCom∂ëe
 ){

1112 
	`m¨kTîmAsChûd
(
pWC
, 
idxNew1
, 
idxTîm
);

1113 
	`m¨kTîmAsChûd
(
pWC
, 
idxNew2
, 
idxTîm
);

1118 #i‚de‡
SQLITE_OMIT_VIRTUALTABLE


1125 if–
	`isM©chOfCﬁumn
(
pEx¥
, &
eOp2
) ){

1126 
idxNew
;

1127 
Ex¥
 *
pRight
, *
pLe·
;

1128 
WhîeTîm
 *
pNewTîm
;

1129 
Bômask
 
¥îeqCﬁumn
, 
¥îeqEx¥
;

1131 
pRight
 = 
pEx¥
->
x
.
pLi°
->
a
[0].pExpr;

1132 
pLe·
 = 
pEx¥
->
x
.
pLi°
->
a
[1].pExpr;

1133 
¥îeqEx¥
 = 
	`sqlôe3WhîeEx¥Ußge
(
pMaskSë
, 
pRight
);

1134 
¥îeqCﬁumn
 = 
	`sqlôe3WhîeEx¥Ußge
(
pMaskSë
, 
pLe·
);

1135 if–(
¥îeqEx¥
 & 
¥îeqCﬁumn
)==0 ){

1136 
Ex¥
 *
pNewEx¥
;

1137 
pNewEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_MATCH
,

1138 0, 
	`sqlôe3Ex¥Dup
(
db
, 
pRight
, 0), 0);

1139 
idxNew
 = 
	`whîeCœu£In£π
(
pWC
, 
pNewEx¥
, 
TERM_VIRTUAL
|
TERM_DYNAMIC
);

1140 
	`ã°ˇ£
–
idxNew
==0 );

1141 
pNewTîm
 = &
pWC
->
a
[
idxNew
];

1142 
pNewTîm
->
¥îeqRight
 = 
¥îeqEx¥
;

1143 
pNewTîm
->
À·Curs‹
 = 
pLe·
->
iTabÀ
;

1144 
pNewTîm
->
u
.
À·Cﬁumn
 = 
pLe·
->
iCﬁumn
;

1145 
pNewTîm
->
eO≥øt‹
 = 
WO_MATCH
;

1146 
pNewTîm
->
eM©chOp
 = 
eOp2
;

1147 
	`m¨kTîmAsChûd
(
pWC
, 
idxNew
, 
idxTîm
);

1148 
pTîm
 = &
pWC
->
a
[
idxTîm
];

1149 
pTîm
->
wtFœgs
 |
TERM_COPIED
;

1150 
pNewTîm
->
¥îeqAŒ
 = 
pTîm
->prereqAll;

1155 #ifde‡
SQLITE_ENABLE_STAT3_OR_STAT4


1163 if–
pEx¥
->
›
==
TK_NOTNULL


1164 && 
pEx¥
->
pLe·
->
›
==
TK_COLUMN


1165 && 
pEx¥
->
pLe·
->
iCﬁumn
>=0

1166 && 
	`O±imiz©i⁄E«bÀd
(
db
, 
SQLITE_Sèt34
)

1168 
Ex¥
 *
pNewEx¥
;

1169 
Ex¥
 *
pLe·
 = 
pEx¥
->pLeft;

1170 
idxNew
;

1171 
WhîeTîm
 *
pNewTîm
;

1173 
pNewEx¥
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_GT
,

1174 
	`sqlôe3Ex¥Dup
(
db
, 
pLe·
, 0),

1175 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_NULL
, 0, 0, 0), 0);

1177 
idxNew
 = 
	`whîeCœu£In£π
(
pWC
, 
pNewEx¥
,

1178 
TERM_VIRTUAL
|
TERM_DYNAMIC
|
TERM_VNULL
);

1179 if–
idxNew
 ){

1180 
pNewTîm
 = &
pWC
->
a
[
idxNew
];

1181 
pNewTîm
->
¥îeqRight
 = 0;

1182 
pNewTîm
->
À·Curs‹
 = 
pLe·
->
iTabÀ
;

1183 
pNewTîm
->
u
.
À·Cﬁumn
 = 
pLe·
->
iCﬁumn
;

1184 
pNewTîm
->
eO≥øt‹
 = 
WO_GT
;

1185 
	`m¨kTîmAsChûd
(
pWC
, 
idxNew
, 
idxTîm
);

1186 
pTîm
 = &
pWC
->
a
[
idxTîm
];

1187 
pTîm
->
wtFœgs
 |
TERM_COPIED
;

1188 
pNewTîm
->
¥îeqAŒ
 = 
pTîm
->prereqAll;

1196 
pTîm
->
¥îeqRight
 |
exåaRight
;

1197 
	}
}

1221 
	$sqlôe3WhîeS∂ô
(
WhîeCœu£
 *
pWC
, 
Ex¥
 *
pEx¥
, 
u8
 
›
){

1222 
Ex¥
 *
pE2
 = 
	`sqlôe3Ex¥SkùCﬁœã
(
pEx¥
);

1223 
pWC
->
›
 = op;

1224 if–
pE2
==0 ) ;

1225 if–
pE2
->
›
!=op ){

1226 
	`whîeCœu£In£π
(
pWC
, 
pEx¥
, 0);

1228 
	`sqlôe3WhîeS∂ô
(
pWC
, 
pE2
->
pLe·
, 
›
);

1229 
	`sqlôe3WhîeS∂ô
(
pWC
, 
pE2
->
pRight
, 
›
);

1231 
	}
}

1236 
	$sqlôe3WhîeCœu£Inô
(

1237 
WhîeCœu£
 *
pWC
,

1238 
WhîeInfo
 *
pWInfo


1240 
pWC
->
pWInfo
 =ÖWInfo;

1241 
pWC
->
pOuãr
 = 0;

1242 
pWC
->
nTîm
 = 0;

1243 
pWC
->
nSlŸ
 = 
	`AºaySize
’WC->
aSètic
);

1244 
pWC
->
a
 =ÖWC->
aSètic
;

1245 
	}
}

1252 
	$sqlôe3WhîeCœu£CÀ¨
(
WhîeCœu£
 *
pWC
){

1253 
i
;

1254 
WhîeTîm
 *
a
;

1255 
sqlôe3
 *
db
 = 
pWC
->
pWInfo
->
pP¨£
->db;

1256 
i
=
pWC
->
nTîm
-1, 
a
=pWC->a; i>=0; i--,á++){

1257 if–
a
->
wtFœgs
 & 
TERM_DYNAMIC
 ){

1258 
	`sqlôe3Ex¥Dñëe
(
db
, 
a
->
pEx¥
);

1260 if–
a
->
wtFœgs
 & 
TERM_ORINFO
 ){

1261 
	`whîeOrInfoDñëe
(
db
, 
a
->
u
.
pOrInfo
);

1262 }if–
a
->
wtFœgs
 & 
TERM_ANDINFO
 ){

1263 
	`whîeAndInfoDñëe
(
db
, 
a
->
u
.
pAndInfo
);

1266 if–
pWC
->
a
!ıWC->
aSètic
 ){

1267 
	`sqlôe3DbFªe
(
db
, 
pWC
->
a
);

1269 
	}
}

1277 
Bômask
 
	$sqlôe3WhîeEx¥Ußge
(
WhîeMaskSë
 *
pMaskSë
, 
Ex¥
 *
p
){

1278 
Bômask
 
mask
 = 0;

1279 if–
p
==0 )  0;

1280 if–
p
->
›
==
TK_COLUMN
 ){

1281 
mask
 = 
	`sqlôe3WhîeGëMask
(
pMaskSë
, 
p
->
iTabÀ
);

1282  
mask
;

1284 
mask
 = 
	`sqlôe3WhîeEx¥Ußge
(
pMaskSë
, 
p
->
pRight
);

1285 if–
p
->
pLe·
 ) 
mask
 |
	`sqlôe3WhîeEx¥Ußge
(
pMaskSë
,Ö->pLeft);

1286 if–
	`Ex¥HasPr›îty
(
p
, 
EP_xIsSñe˘
) ){

1287 
mask
 |
	`ex¥Sñe˘Ußge
(
pMaskSë
, 
p
->
x
.
pSñe˘
);

1288 }if–
p
->
x
.
pLi°
 ){

1289 
mask
 |
	`sqlôe3WhîeEx¥Li°Ußge
(
pMaskSë
, 
p
->
x
.
pLi°
);

1291  
mask
;

1292 
	}
}

1293 
Bômask
 
	$sqlôe3WhîeEx¥Li°Ußge
(
WhîeMaskSë
 *
pMaskSë
, 
Ex¥Li°
 *
pLi°
){

1294 
i
;

1295 
Bômask
 
mask
 = 0;

1296 if–
pLi°
 ){

1297 
i
=0; i<
pLi°
->
nEx¥
; i++){

1298 
mask
 |
	`sqlôe3WhîeEx¥Ußge
(
pMaskSë
, 
pLi°
->
a
[
i
].
pEx¥
);

1301  
mask
;

1302 
	}
}

1313 
	$sqlôe3WhîeEx¥A«lyze
(

1314 
SrcLi°
 *
pTabLi°
,

1315 
WhîeCœu£
 *
pWC


1317 
i
;

1318 
i
=
pWC
->
nTîm
-1; i>=0; i--){

1319 
	`ex¥A«lyze
(
pTabLi°
, 
pWC
, 
i
);

1321 
	}
}

1330 
	$sqlôe3WhîeTabFuncArgs
(

1331 
P¨£
 *
pP¨£
,

1332 
SrcLi°_ôem
 *
pIãm
,

1333 
WhîeCœu£
 *
pWC


1335 
TabÀ
 *
pTab
;

1336 
j
, 
k
;

1337 
Ex¥Li°
 *
pArgs
;

1338 
Ex¥
 *
pCﬁRef
;

1339 
Ex¥
 *
pTîm
;

1340 if–
pIãm
->
fg
.
isTabFunc
==0 ) ;

1341 
pTab
 = 
pIãm
->pTab;

1342 
	`as£π
–
pTab
!=0 );

1343 
pArgs
 = 
pIãm
->
u1
.
pFuncArg
;

1344 if–
pArgs
==0 ) ;

1345 
j
=
k
=0; j<
pArgs
->
nEx¥
; j++){

1346  
k
<
pTab
->
nCﬁ
 && (pTab->
aCﬁ
[k].
cﬁFœgs
 & 
COLFLAG_HIDDEN
)==0 ){k++;}

1347 if–
k
>=
pTab
->
nCﬁ
 ){

1348 
	`sqlôe3Eº‹Msg
(
pP¨£
, "too manyárguments on %s() - max %d",

1349 
pTab
->
zName
, 
j
);

1352 
pCﬁRef
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_COLUMN
, 0, 0, 0);

1353 if–
pCﬁRef
==0 ) ;

1354 
pCﬁRef
->
iTabÀ
 = 
pIãm
->
iCurs‹
;

1355 
pCﬁRef
->
iCﬁumn
 = 
k
++;

1356 
pCﬁRef
->
pTab
 =ÖTab;

1357 
pTîm
 = 
	`sqlôe3PEx¥
(
pP¨£
, 
TK_EQ
, 
pCﬁRef
,

1358 
	`sqlôe3Ex¥Dup
(
pP¨£
->
db
, 
pArgs
->
a
[
j
].
pEx¥
, 0), 0);

1359 
	`whîeCœu£In£π
(
pWC
, 
pTîm
, 
TERM_DYNAMIC
);

1361 
	}
}

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


120 #unde‡
°©ic_as£π


121 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

90 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_BSD


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3));

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

195 
	#ªaddú_r
 
ªaddú64_r


	)

199 #ifde‡
__USE_LARGEFILE64


200 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

201 
dúít64
 *
__ª°ri˘
 
__íåy
,

202 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

203 
	`__n⁄nuŒ
 ((1, 2, 3));

208 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

210 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


211 
	~<bôs/ty≥s.h
>

214 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

220 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


223 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


226 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

229 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


230 #i‚de‡
MAXNAMLEN


232 
	~<bôs/posix1_lim.h
>

235 #ifde‡
NAME_MAX


236 
	#MAXNAMLEN
 
NAME_MAX


	)

238 
	#MAXNAMLEN
 255

	)

243 
	#__√ed_size_t


	)

244 
	~<°ddef.h
>

253 #i‚de‡
__USE_FILE_OFFSET64


254 
	`sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

255 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

256 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

257 (*
__cmp
Ë(c⁄° 
dúít
 **,

258 c⁄° 
dúít
 **))

259 
	`__n⁄nuŒ
 ((1, 2));

261 #ifde‡
__REDIRECT


262 
	`__REDIRECT
 (
sˇndú
,

263 (c⁄° *
__ª°ri˘
 
__dú
,

264 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

265 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

266 (*
__cmp
Ë(c⁄° 
dúít
 **,

267 c⁄° 
dúít
 **)),

268 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

270 
	#sˇndú
 
sˇndú64


	)

274 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


277 
	`sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

278 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

279 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

280 (*
__cmp
Ë(c⁄° 
dúít64
 **,

281 c⁄° 
dúít64
 **))

282 
	`__n⁄nuŒ
 ((1, 2));

285 #ifde‡
__USE_GNU


291 #i‚de‡
__USE_FILE_OFFSET64


292 
	`sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

293 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

294 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

295 (*
__cmp
Ë(c⁄° 
dúít
 **,

296 c⁄° 
dúít
 **))

297 
	`__n⁄nuŒ
 ((2, 3));

299 #ifde‡
__REDIRECT


300 
	`__REDIRECT
 (
sˇndú©
,

301 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

302 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

303 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

304 (*
__cmp
Ë(c⁄° 
dúít
 **,

305 c⁄° 
dúít
 **)),

306 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

308 
	#sˇndú©
 
sˇndú©64


	)

314 
	`sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

315 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

316 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

317 (*
__cmp
Ë(c⁄° 
dúít64
 **,

318 c⁄° 
dúít64
 **))

319 
	`__n⁄nuŒ
 ((2, 3));

323 #i‚de‡
__USE_FILE_OFFSET64


324 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

325 c⁄° 
dúít
 **
__e2
)

326 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

328 #ifde‡
__REDIRECT


329 
	`__REDIRECT_NTH
 (
Æphas‹t
,

330 (c⁄° 
dúít
 **
__e1
,

331 c⁄° 
dúít
 **
__e2
),

332 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

334 
	#Æphas‹t
 
Æphas‹t64


	)

338 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


339 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

340 c⁄° 
dúít64
 **
__e2
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


351 #i‚de‡
__USE_FILE_OFFSET64


352 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

353 
size_t
 
__nbyãs
,

354 
__off_t
 *
__ª°ri˘
 
__ba£p
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

357 #ifde‡
__REDIRECT


358 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

359 (
__fd
, *
__ª°ri˘
 
__buf
,

360 
size_t
 
__nbyãs
,

361 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

362 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

364 
	#gëdúíåõs
 
gëdúíåõs64


	)

368 #ifde‡
__USE_LARGEFILE64


369 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

370 
size_t
 
__nbyãs
,

371 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

372 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

376 #ifde‡
__USE_GNU


378 #i‚de‡
__USE_FILE_OFFSET64


379 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

380 c⁄° 
dúít
 **
__e2
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

383 #ifde‡
__REDIRECT


384 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

385 (c⁄° 
dúít
 **
__e1
,

386 c⁄° 
dúít
 **
__e2
),

387 
vîsi⁄s‹t64
)

388 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

390 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

394 #ifde‡
__USE_LARGEFILE64


395 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

396 c⁄° 
dúít64
 **
__e2
)

397 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

401 
__END_DECLS


	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 
Dl_£Ω©h
 
dls_£Ω©h
[1];

184 } 
	tDl_£röfo
;

188 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

137 
f˙é
 (
__fd
, 
__cmd
, ...);

145 #i‚de‡
__USE_FILE_OFFSET64


146 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

148 #ifde‡
__REDIRECT


149 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

150 
	`__n⁄nuŒ
 ((1));

152 
	#›í
 
›í64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__USE_ATFILE


169 #i‚de‡
__USE_FILE_OFFSET64


170 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

171 
	`__n⁄nuŒ
 ((2));

173 #ifde‡
__REDIRECT


174 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

175 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

177 
	#›í©
 
›í©64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__REDIRECT


195 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

196 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

198 
	#¸ót
 
¸ót64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

206 && !
deföed
 
__USE_POSIX
))

215 
	#F_ULOCK
 0

	)

216 
	#F_LOCK
 1

	)

217 
	#F_TLOCK
 2

	)

218 
	#F_TEST
 3

	)

220 #i‚de‡
__USE_FILE_OFFSET64


221 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

223 #ifde‡
__REDIRECT


224 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

226 
	#lockf
 
lockf64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

234 #ifde‡
__USE_XOPEN2K


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

239 
__advi£
Ë
__THROW
;

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

243 
__off64_t
 
__Àn
, 
__advi£
),

244 
posix_Ádvi£64
);

246 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

249 #ifde‡
__USE_LARGEFILE64


250 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

251 
__advi£
Ë
__THROW
;

259 #i‚de‡
__USE_FILE_OFFSET64


260 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

264 
__off64_t
 
__Àn
),

265 
posix_ÁŒoˇã64
);

267 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

270 #ifde‡
__USE_LARGEFILE64


271 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

277 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

278 && 
deföed
 
__va_¨g_∑ck_Àn


279 
	~<bôs/f˙é2.h
>

282 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

147 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

148 
__MALLOC_DEPRECATED
;

150 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

155 
__MALLOC_DEPRECATED
;

156 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

157 
size_t
 
__size
,

159 
__MALLOC_DEPRECATED
;

160 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

161 
size_t
 
__size
,

163 
__MALLOC_DEPRECATED
;

164 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

167 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

170 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


32 
	~<bôs/huge_vÆ.h
>

33 #ifde‡
__USE_ISOC99


34 
	~<bôs/huge_vÆf.h
>

35 
	~<bôs/huge_vÆl.h
>

38 
	~<bôs/öf.h
>

41 
	~<bôs/«n.h
>

45 
	~<bôs/m©hdef.h
>

52 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

53 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

54 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

56 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

57 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

58 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

59 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

61 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

62 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

63 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

65 
	#_MdoubÀ_
 

	)

66 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

67 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

68 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

69 
	~<bôs/m©hˇŒs.h
>

70 #unde‡
_MdoubÀ_


71 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


72 #unde‡
_MdoubÀ_END_NAMESPACE


73 #unde‡
__MATH_PRECNAME


75 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


81 #i‚de‡
_MÊﬂt_


82 
	#_MÊﬂt_
 

	)

84 
	#_MdoubÀ_
 
_MÊﬂt_


	)

85 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

86 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

87 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

88 
	~<bôs/m©hˇŒs.h
>

89 #unde‡
_MdoubÀ_


90 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


91 #unde‡
_MdoubÀ_END_NAMESPACE


92 #unde‡
__MATH_PRECNAME


94 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

95 || 
deföed
 
__LDBL_COMPAT


96 #ifde‡
__LDBL_COMPAT


98 #ifde‡
__USE_ISOC99


99 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

100 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

101 #ifde‡
__REDIRECT_NTH


102 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

103 
__∆dbl_√xâow¨df
)

104 
	`__©åibuã__
 ((
__c⁄°__
));

105 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

106 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

107 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

108 (
__x
, 
__y
),

109 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

113 #unde‡
__MATHDECL_1


114 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

115 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

116 
¨gs
, 
Æüs
)

	)

117 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

118 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

124 #i‚de‡
_Ml⁄g_doubÀ_


125 
	#_Ml⁄g_doubÀ_
 

	)

127 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

128 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

129 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

130 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

131 
	#__MATH_DECLARE_LDOUBLE
 1

	)

132 
	~<bôs/m©hˇŒs.h
>

133 #unde‡
_MdoubÀ_


134 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


135 #unde‡
_MdoubÀ_END_NAMESPACE


136 #unde‡
__MATH_PRECNAME


141 #unde‡
__MATHDECL_1


142 #unde‡
__MATHDECL


143 #unde‡
__MATHCALL


146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


148 
signgam
;

153 #ifde‡
__USE_ISOC99


191 
FP_NAN
 =

192 
	#FP_NAN
 0

	)

193 
FP_NAN
,

194 
FP_INFINITE
 =

195 
	#FP_INFINITE
 1

	)

196 
FP_INFINITE
,

197 
FP_ZERO
 =

198 
	#FP_ZERO
 2

	)

199 
FP_ZERO
,

200 
FP_SUBNORMAL
 =

201 
	#FP_SUBNORMAL
 3

	)

202 
FP_SUBNORMAL
,

203 
FP_NORMAL
 =

204 
	#FP_NORMAL
 4

	)

205 
FP_NORMAL


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
	#Â˛assify
(
x
) \

211 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

213 
	#Â˛assify
(
x
) \

214 ( (
x
) ==  () \

215 ? 
	`__Â˛assifyf
 (
x
) \

216 :  (
x
) ==  () \

217 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

221 #ifde‡
__NO_LONG_DOUBLE_MATH


222 
	#signbô
(
x
) \

223 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

225 
	#signbô
(
x
) \

226 ( (
x
) ==  () \

227 ? 
	`__signbôf
 (
x
) \

228 :  (
x
) ==  () \

229 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

233 #ifde‡
__NO_LONG_DOUBLE_MATH


234 
	#isföôe
(
x
) \

235 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

237 
	#isföôe
(
x
) \

238 ( (
x
) ==  () \

239 ? 
	`__föôef
 (
x
) \

240 :  (
x
) ==  () \

241 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

245 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

249 #ifde‡
__NO_LONG_DOUBLE_MATH


250 
	#i¢™
(
x
) \

251 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

253 
	#i¢™
(
x
) \

254 ( (
x
) ==  () \

255 ? 
	`__i¢™f
 (
x
) \

256 :  (
x
) ==  () \

257 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

261 #ifde‡
__NO_LONG_DOUBLE_MATH


262 
	#isöf
(
x
) \

263 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

265 
	#isöf
(
x
) \

266 ( (
x
) ==  () \

267 ? 
	`__isöff
 (
x
) \

268 :  (
x
) ==  () \

269 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

273 
	#MATH_ERRNO
 1

	)

274 
	#MATH_ERREXCEPT
 2

	)

279 #i‚de‡
__FAST_MATH__


280 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

285 #ifde‡
__USE_GNU


287 #ifde‡
__NO_LONG_DOUBLE_MATH


288 
	#issig«lög
(
x
) \

289 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

291 
	#issig«lög
(
x
) \

292 ( (
x
) ==  () \

293 ? 
	`__issig«lögf
 (
x
) \

294 :  (
x
) ==  () \

295 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

299 #ifdef 
__USE_MISC


303 
_IEEE_
 = -1,

304 
_SVID_
,

305 
_XOPEN_
,

306 
_POSIX_
,

307 
_ISOC_


308 } 
	t_LIB_VERSION_TYPE
;

313 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

317 #ifde‡
__USE_SVID


323 #ifde‡
__˝lu•lus


324 
__ex˚±i⁄


326 
ex˚±i⁄


329 
ty≥
;

330 *
«me
;

331 
¨g1
;

332 
¨g2
;

333 
ªtvÆ
;

334 
	}
};

336 #ifde‡
__˝lu•lus


337 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

339 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

342 
	#X_TLOSS
 1.41484755040568800000e+16

	)

345 
	#DOMAIN
 1

	)

346 
	#SING
 2

	)

347 
	#OVERFLOW
 3

	)

348 
	#UNDERFLOW
 4

	)

349 
	#TLOSS
 5

	)

350 
	#PLOSS
 6

	)

353 
	#HUGE
 3.40282347e+38F

	)

357 #ifde‡
__USE_XOPEN


359 
	#MAXFLOAT
 3.40282347e+38F

	)

366 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


367 
	#M_E
 2.7182818284590452354

	)

368 
	#M_LOG2E
 1.4426950408889634074

	)

369 
	#M_LOG10E
 0.43429448190325182765

	)

370 
	#M_LN2
 0.69314718055994530942

	)

371 
	#M_LN10
 2.30258509299404568402

	)

372 
	#M_PI
 3.14159265358979323846

	)

373 
	#M_PI_2
 1.57079632679489661923

	)

374 
	#M_PI_4
 0.78539816339744830962

	)

375 
	#M_1_PI
 0.31830988618379067154

	)

376 
	#M_2_PI
 0.63661977236758134308

	)

377 
	#M_2_SQRTPI
 1.12837916709551257390

	)

378 
	#M_SQRT2
 1.41421356237309504880

	)

379 
	#M_SQRT1_2
 0.70710678118654752440

	)

385 #ifde‡
__USE_GNU


386 
	#M_El
 2.718281828459045235360287471352662498L

	)

387 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

388 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

389 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

390 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

391 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

392 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

393 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

394 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

395 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

396 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

397 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

398 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

405 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


406 
	#__NO_MATH_INLINES
 1

	)

409 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

416 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

417 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

418 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

419 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

420 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

421 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

425 #ifde‡
__USE_EXTERN_INLINES


426 
	~<bôs/m©hölöe.h
>

431 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

432 
	~<bôs/m©h-föôe.h
>

435 #ifde‡
__USE_ISOC99


439 #i‚de‡
isgª©î


440 
	#isgª©î
(
x
, 
y
) \

441 (
__exãnsi⁄__
 \

442 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

443 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

447 #i‚de‡
isgª©îequÆ


448 
	#isgª©îequÆ
(
x
, 
y
) \

449 (
__exãnsi⁄__
 \

450 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

451 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

455 #i‚de‡
i¶ess


456 
	#i¶ess
(
x
, 
y
) \

457 (
__exãnsi⁄__
 \

458 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

459 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

463 #i‚de‡
i¶es£quÆ


464 
	#i¶es£quÆ
(
x
, 
y
) \

465 (
__exãnsi⁄__
 \

466 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

467 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

471 #i‚de‡
i¶essgª©î


472 
	#i¶essgª©î
(
x
, 
y
) \

473 (
__exãnsi⁄__
 \

474 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

475 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

479 #i‚de‡
isun‹dîed


480 
	#isun‹dîed
(
u
, 
v
) \

481 (
__exãnsi⁄__
 \

482 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

483 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

488 
	g__END_DECLS


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 1

87 
	#__PTHREAD_SPINS
 0, 0

	)

88 #ñi‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 2

89 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

91 
	#__PTHREAD_SPINS
 0

	)

94 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


95 
	#PTHREAD_MUTEX_INITIALIZER
 \

96 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

97 #ifde‡
__USE_GNU


98 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

101 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

102 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

104 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

109 
	#PTHREAD_MUTEX_INITIALIZER
 \

110 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

111 #ifde‡
__USE_GNU


112 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

113 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

115 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

116 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

117 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

124 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


127 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

128 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

129 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

130 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


136 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 #i‡
__WORDSIZE
 == 64

138 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

143 
	#PTHREAD_RWLOCK_INITIALIZER
 \

144 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

145 #ifde‡
__USE_GNU


146 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

149 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

151 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


152 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

153 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

154 0, 0, 0, 0 } }

	)

156 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

157 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

158 0 } }

	)

168 
	mPTHREAD_INHERIT_SCHED
,

169 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

170 
	mPTHREAD_EXPLICIT_SCHED


171 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

178 
	mPTHREAD_SCOPE_SYSTEM
,

179 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

180 
	mPTHREAD_SCOPE_PROCESS


181 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

188 
	mPTHREAD_PROCESS_PRIVATE
,

189 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

190 
	mPTHREAD_PROCESS_SHARED


191 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

197 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

201 
	s_±hªad_˛ónup_buf„r


203 (*
	m__routöe
) (*);

204 *
	m__¨g
;

205 
	m__ˇn˚…y≥
;

206 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

212 
	mPTHREAD_CANCEL_ENABLE
,

213 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

214 
	mPTHREAD_CANCEL_DISABLE


215 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

219 
	mPTHREAD_CANCEL_DEFERRED
,

220 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

221 
	mPTHREAD_CANCEL_ASYNCHRONOUS


222 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

224 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

228 
	#PTHREAD_ONCE_INIT
 0

	)

231 #ifde‡
__USE_XOPEN2K


235 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

239 
__BEGIN_DECLS


244 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

245 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

246 *(*
__°¨t_routöe
) (*),

247 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

253 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

261 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

263 #ifde‡
__USE_GNU


266 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

274 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

275 c⁄° 
time•ec
 *
__ab°ime
);

282 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

286 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

290 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

298 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

301 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 *
__dëach°©e
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

311 
__dëach°©e
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

317 
size_t
 *
__gu¨dsize
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

322 
size_t
 
__gu¨dsize
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

328 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

333 c⁄° 
sched_∑øm
 *
__ª°ri˘


334 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

337 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


347 
__©å
, *
__ª°ri˘
 
__öhîô
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

352 
__öhîô
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 *
__ª°ri˘
 
__sc›e
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

362 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1));

366 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

374 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

375 *
__°ackaddr
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

379 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


380 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

387 
size_t
 
__°acksize
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 #ifde‡
__USE_XOPEN2K


392 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

393 **
__ª°ri˘
 
__°ackaddr
,

394 
size_t
 *
__ª°ri˘
 
__°acksize
)

395 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

400 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

401 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

404 #ifde‡
__USE_GNU


407 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

408 
size_t
 
__˝u£tsize
,

409 c⁄° 
˝u_£t_t
 *
__˝u£t
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

414 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

415 
size_t
 
__˝u£tsize
,

416 
˝u_£t_t
 *
__˝u£t
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

420 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((1));

425 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

426 
__THROW
 
	`__n⁄nuŒ
 ((1));

431 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

441 c⁄° 
sched_∑øm
 *
__∑øm
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3));

445 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

446 *
__ª°ri˘
 
__pﬁicy
,

447 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

451 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

452 
__THROW
;

455 #ifde‡
__USE_GNU


457 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

458 
size_t
 
__buÊí
)

459 
__THROW
 
	`__n⁄nuŒ
 ((2));

462 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

463 
__THROW
 
	`__n⁄nuŒ
 ((2));

467 #ifde‡
__USE_UNIX98


469 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

472 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

475 #ifde‡
__USE_GNU


480 
	$±hªad_yõld
 (Ë
__THROW
;

485 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

486 c⁄° 
˝u_£t_t
 *
__˝u£t
)

487 
__THROW
 
	`__n⁄nuŒ
 ((3));

490 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

491 
˝u_£t_t
 *
__˝u£t
)

492 
__THROW
 
	`__n⁄nuŒ
 ((3));

505 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

506 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

517 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

521 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

524 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

529 
	`±hªad_ã°ˇn˚l
 ();

538 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

539 
__mask_was_ßved
;

540 } 
__ˇn˚l_jmp_buf
[1];

541 *
__∑d
[4];

542 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

545 #i‚de‡
__˛ónup_f˘_©åibuã


546 
	#__˛ónup_f˘_©åibuã


	)

551 
	s__±hªad_˛ónup_‰ame


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

559 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


560 #ifde‡
__˝lu•lus


562 ˛as†
	c__±hªad_˛ónup_˛ass


564 (*
__ˇn˚l_routöe
) (*);

565 *
__ˇn˚l_¨g
;

566 
__do_ô
;

567 
__ˇn˚l_ty≥
;

569 
public
:

570 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

571 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

572 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

573 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

574 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

575 &
__ˇn˚l_ty≥
); 
	}
}

576 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

586 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

588 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

592 
	#±hªad_˛ónup_p›
(
execuã
) \

593 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

594 } 0)

	)

596 #ifde‡
__USE_GNU


600 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

602 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

603 
__˛‰ame
.
	`__de„r
 ()

	)

608 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

609 
__˛‰ame
.
	`__ª°‹e
 (); \

610 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

611 } 0)

	)

618 
__exã∫_ölöe
 

619 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

621 i‡(
__‰ame
->
__do_ô
)

622 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

623 
	}
}

632 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

634 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

635 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

636 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

637 .
__do_ô
 = 1 };

	)

641 
	#±hªad_˛ónup_p›
(
execuã
) \

642 
__˛‰ame
.
__do_ô
 = (
execuã
); \

643 } 0)

	)

645 #ifde‡
__USE_GNU


649 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

651 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

652 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

653 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

654 .
__do_ô
 = 1 }; \

655 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

656 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

661 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

662 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

663 
__˛‰ame
.
__do_ô
 = (
execuã
); \

664 } 0)

	)

675 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

696 
	#±hªad_˛ónup_p›
(
execuã
) \

699 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

700 i‡(
execuã
) \

701 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

702 } 0)

	)

703 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

704 
__˛ónup_f˘_©åibuã
;

706 #ifde‡
__USE_GNU


710 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

712 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

713 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

714 *
__ˇn˚l_¨g
 = (
¨g
); \

715 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

716 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

717 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

719 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

720 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

724 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

725 dÿ{

	)

726 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

727 
__˛ónup_f˘_©åibuã
;

732 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

735 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

736 i‡(
execuã
) \

737 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

738 
	}
} 0)

	)

739 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

740 
__˛ónup_f˘_©åibuã
;

744 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

745 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

746 #i‚de‡
SHARED


747 
	`__©åibuã__
 ((
__wók__
))

753 
__jmp_buf_èg
;

754 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

760 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

761 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

762 
__THROW
 
	`__n⁄nuŒ
 ((1));

765 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

766 
__THROW
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

773 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

776 #ifde‡
__USE_XOPEN2K


778 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

779 c⁄° 
time•ec
 *
__ª°ri˘


780 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

784 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

790 
__ª°ri˘
 
__muãx
,

791 *
__ª°ri˘
 
__¥io˚ûög
)

792 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

797 
__¥io˚ûög
,

798 *
__ª°ri˘
 
__ﬁd_˚ûög
)

799 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

802 #ifde‡
__USE_XOPEN2K8


804 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 #ifde‡
__USE_GNU


807 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

817 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__psh¨ed
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__psh¨ed
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

835 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


837 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


838 
__©å
, *
__ª°ri˘
 
__köd
)

839 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

844 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

845 
__THROW
 
	`__n⁄nuŒ
 ((1));

849 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

850 
__ª°ri˘
 
__©å
,

851 *
__ª°ri˘
 
__¥Ÿocﬁ
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥Ÿocﬁ
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

862 
__ª°ri˘
 
__©å
,

863 *
__ª°ri˘
 
__¥io˚ûög
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

867 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__¥io˚ûög
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

871 #ifde‡
__USE_XOPEN2K


873 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

874 *
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

878 *
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

883 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

884 
__robu°√ss
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #ifde‡
__USE_GNU


887 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

888 
__robu°√ss
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

894 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


899 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

900 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


901 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

904 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1));

908 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

909 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

912 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

915 #ifde‡
__USE_XOPEN2K


917 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 c⁄° 
time•ec
 *
__ª°ri˘


919 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

923 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

924 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

927 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

930 #ifde‡
__USE_XOPEN2K


932 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

933 c⁄° 
time•ec
 *
__ª°ri˘


934 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

938 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

939 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

945 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__psh¨ed
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__psh¨ed
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

965 
__ª°ri˘
 
__©å
,

966 *
__ª°ri˘
 
__¥ef
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

970 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

971 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

979 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

980 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

981 
__THROW
 
	`__n⁄nuŒ
 ((1));

984 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

989 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

993 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

1002 
	`__n⁄nuŒ
 ((1, 2));

1011 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1012 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 3));

1019 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1024 
__THROW
 
	`__n⁄nuŒ
 ((1));

1027 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 *
__ª°ri˘
 
__psh¨ed
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 #ifde‡
__USE_XOPEN2K


1038 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1039 
__ª°ri˘
 
__©å
,

1040 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1044 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1045 
__˛ockid_t
 
__˛ock_id
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 #ifde‡
__USE_XOPEN2K


1055 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1056 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1064 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1068 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1072 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1080 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1081 
__©å
, 
__cou¡
)

1082 
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1086 
__THROW
 
	`__n⁄nuŒ
 ((1));

1089 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1090 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1094 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1));

1098 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1103 
__ª°ri˘
 
__©å
,

1104 *
__ª°ri˘
 
__psh¨ed
)

1105 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1108 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1109 
__psh¨ed
)

1110 
__THROW
 
	`__n⁄nuŒ
 ((1));

1122 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1123 (*
__de°r_fun˘i⁄
) (*))

1124 
__THROW
 
	`__n⁄nuŒ
 ((1));

1127 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1130 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1133 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1134 c⁄° *
__poöãr
Ë
__THROW
 ;

1137 #ifde‡
__USE_XOPEN2K


1139 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1140 
__˛ockid_t
 *
__˛ock_id
)

1141 
__THROW
 
	`__n⁄nuŒ
 ((2));

1156 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1157 (*
__∑ª¡
) (),

1158 (*
__chûd
Ë()Ë
__THROW
;

1161 #ifde‡
__USE_EXTERN_INLINES


1163 
__exã∫_ölöe
 

1164 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1166  
__thªad1
 =
__thªad2
;

1167 
	}
}

1170 
	g__END_DECLS


	@/usr/include/pwd.h

22 #i‚def 
_PWD_H


23 
	#_PWD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

34 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 #i‚de‡
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

42 #i‚de‡
__uid_t_deföed


43 
__uid_t
 
	tuid_t
;

44 
	#__uid_t_deföed


	)

49 
	s∑sswd


51 *
	mpw_«me
;

52 *
	mpw_∑sswd
;

53 
__uid_t
 
	mpw_uid
;

54 
__gid_t
 
	mpw_gid
;

55 *
	mpw_gecos
;

56 *
	mpw_dú
;

57 *
	mpw_shñl
;

61 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


62 
	#__√ed_FILE


	)

63 
	~<°dio.h
>

67 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


72 
£çwít
 ();

78 
ídpwít
 ();

84 
∑sswd
 *
gëpwít
 ();

87 #ifdef 
__USE_SVID


94 
∑sswd
 *
fgëpwít
 (
FILE
 *
__°ªam
);

102 
puçwít
 (c⁄° 
∑sswd
 *
__ª°ri˘
 
__p
,

103 
FILE
 *
__ª°ri˘
 
__f
);

110 
∑sswd
 *
gëpwuid
 (
__uid_t
 
__uid
);

116 
∑sswd
 *
gëpw«m
 (c⁄° *
__«me
);

118 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


120 #ifde‡
__USE_MISC


123 
	#NSS_BUFLEN_PASSWD
 1024

	)

134 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


139 
gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

140 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

141 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

144 
gëpwuid_r
 (
__uid_t
 
__uid
,

145 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

146 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

147 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

149 
gëpw«m_r
 (c⁄° *
__ª°ri˘
 
__«me
,

150 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

151 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

152 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

155 #ifdef 
__USE_SVID


163 
fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

164 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

165 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

166 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

171 #ifde‡
__USE_GNU


180 
gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

183 
	g__END_DECLS


	@/usr/include/readline/history.h

22 #i‚de‡
_HISTORY_H_


23 
	#_HISTORY_H_


	)

25 #ifde‡
__˝lu•lus


29 
	~<time.h
>

31 #i‡
deföed
 
READLINE_LIBRARY


32 
	~"æ°dc.h
"

33 
	~"æty≥defs.h
"

35 
	~<°dio.h
>

36 
	~<ªadlöe/æ°dc.h
>

37 
	~<ªadlöe/æty≥defs.h
>

40 #ifde‡
__STDC__


41 *
	thi°d©a_t
;

43 *
	thi°d©a_t
;

47 
	s_hi°_íåy
 {

48 *
löe
;

49 *
time°amp
;

50 
hi°d©a_t
 
d©a
;

51 } 
	tHIST_ENTRY
;

54 
	#HISTENT_BYTES
(
hs
Ë(
	`°æí
 ((hs)->
löe
Ë+ såÀ¿((hs)->
time°amp
))

	)

57 
	s_hi°_°©e
 {

58 
HIST_ENTRY
 **
íåõs
;

59 
off£t
;

60 
Àngth
;

61 
size
;

62 
Êags
;

63 } 
	tHISTORY_STATE
;

66 
	#HS_STIFLED
 0x01

	)

72 
usög_hi°‹y
 
PARAMS
(());

75 
HISTORY_STATE
 *
hi°‹y_gë_hi°‹y_°©e
 
PARAMS
(());

78 
hi°‹y_£t_hi°‹y_°©e
 
PARAMS
((
HISTORY_STATE
 *));

84 
add_hi°‹y
 
PARAMS
((const *));

88 
add_hi°‹y_time
 
PARAMS
((const *));

93 
HIST_ENTRY
 *
ªmove_hi°‹y
 
PARAMS
(());

97 
hi°d©a_t
 
‰ì_hi°‹y_íåy
 
PARAMS
((
HIST_ENTRY
 *));

102 
HIST_ENTRY
 *
ª∂a˚_hi°‹y_íåy
 
PARAMS
((, c⁄° *, 
hi°d©a_t
));

105 
˛ór_hi°‹y
 
PARAMS
(());

108 
°iÊe_hi°‹y
 
PARAMS
(());

113 
un°iÊe_hi°‹y
 
PARAMS
(());

116 
hi°‹y_is_°iÊed
 
PARAMS
(());

123 
HIST_ENTRY
 **
hi°‹y_li°
 
PARAMS
(());

127 
whîe_hi°‹y
 
PARAMS
(());

131 
HIST_ENTRY
 *
cuºít_hi°‹y
 
PARAMS
(());

135 
HIST_ENTRY
 *
hi°‹y_gë
 
PARAMS
(());

139 
time_t
 
hi°‹y_gë_time
 
PARAMS
((
HIST_ENTRY
 *));

143 
hi°‹y_tŸÆ_byãs
 
PARAMS
(());

148 
hi°‹y_£t_pos
 
PARAMS
(());

153 
HIST_ENTRY
 *
¥evious_hi°‹y
 
PARAMS
(());

158 
HIST_ENTRY
 *
√xt_hi°‹y
 
PARAMS
(());

168 
hi°‹y_£¨ch
 
PARAMS
((const *, ));

173 
hi°‹y_£¨ch_¥efix
 
PARAMS
((const *, ));

180 
hi°‹y_£¨ch_pos
 
PARAMS
((const *, , ));

187 
ªad_hi°‹y
 
PARAMS
((const *));

194 
ªad_hi°‹y_ønge
 
PARAMS
((const *, , ));

199 
wrôe_hi°‹y
 
PARAMS
((const *));

203 
≠≥nd_hi°‹y
 
PARAMS
((, const *));

206 
hi°‹y_åunˇã_fûe
 
PARAMS
((const *, ));

222 
hi°‹y_ex∑nd
 
PARAMS
((*, **));

227 *
hi°‹y_¨g_exåa˘
 
PARAMS
((, , const *));

235 *
gë_hi°‹y_evít
 
PARAMS
((const *, *, ));

239 **
hi°‹y_tokíize
 
PARAMS
((const *));

242 
hi°‹y_ba£
;

243 
hi°‹y_Àngth
;

244 
hi°‹y_max_íåõs
;

245 
hi°‹y_ex∑nsi⁄_ch¨
;

246 
hi°‹y_sub°_ch¨
;

247 *
hi°‹y_w‹d_dñimôîs
;

248 
hi°‹y_commít_ch¨
;

249 *
hi°‹y_no_ex∑nd_ch¨s
;

250 *
hi°‹y_£¨ch_dñimôî_ch¨s
;

251 
hi°‹y_quŸes_öhibô_ex∑nsi⁄
;

253 
hi°‹y_wrôe_time°amps
;

256 
max_öput_hi°‹y
;

261 
æ_löebuf_func_t
 *
hi°‹y_öhibô_ex∑nsi⁄_fun˘i⁄
;

263 #ifde‡
__˝lu•lus


	@/usr/include/readline/readline.h

22 #i‡!
deföed
 (
_READLINE_H_
)

23 
	#_READLINE_H_


	)

25 #ifde‡
__˝lu•lus


29 #i‡
deföed
 (
READLINE_LIBRARY
)

30 
	~"æ°dc.h
"

31 
	~"æty≥defs.h
"

32 
	~"keym≠s.h
"

33 
	~"tûde.h
"

35 
	~<°dio.h
>

36 
	~<ªadlöe/æ°dc.h
>

37 
	~<ªadlöe/æty≥defs.h
>

38 
	~<ªadlöe/keym≠s.h
>

39 
	~<ªadlöe/tûde.h
>

43 
	#RL_READLINE_VERSION
 0x0603

	)

44 
	#RL_VERSION_MAJOR
 6

	)

45 
	#RL_VERSION_MINOR
 3

	)

55 
	eundo_code
 { 
UNDO_DELETE
, 
UNDO_INSERT
, 
UNDO_BEGIN
, 
UNDO_END
 };

58 
	sundo_li°
 {

59 
undo_li°
 *
√xt
;

60 
°¨t
, 
íd
;

61 *
ãxt
;

62 
undo_code
 
wh©
;

63 } 
	tUNDO_LIST
;

66 
UNDO_LIST
 *
æ_undo_li°
;

69 
	s_funm≠
 {

70 c⁄° *
	g«me
;

71 
æ_comm™d_func_t
 *
	gfun˘i⁄
;

72 } 
	tFUNMAP
;

74 
FUNMAP
 **
funm≠
;

83 
æ_digô_¨gumít
 
PARAMS
((, ));

84 
æ_univîßl_¨gumít
 
PARAMS
((, ));

87 
æ_f‹w¨d_byã
 
PARAMS
((, ));

88 
æ_f‹w¨d_ch¨
 
PARAMS
((, ));

89 
æ_f‹w¨d
 
PARAMS
((, ));

90 
æ_backw¨d_byã
 
PARAMS
((, ));

91 
æ_backw¨d_ch¨
 
PARAMS
((, ));

92 
æ_backw¨d
 
PARAMS
((, ));

93 
æ_beg_of_löe
 
PARAMS
((, ));

94 
æ_íd_of_löe
 
PARAMS
((, ));

95 
æ_f‹w¨d_w‹d
 
PARAMS
((, ));

96 
æ_backw¨d_w‹d
 
PARAMS
((, ));

97 
æ_ª‰esh_löe
 
PARAMS
((, ));

98 
æ_˛ór_s¸ìn
 
PARAMS
((, ));

99 
æ_skù_csi_£quí˚
 
PARAMS
((, ));

100 
æ_¨row_keys
 
PARAMS
((, ));

103 
æ_ö£π
 
PARAMS
((, ));

104 
æ_quŸed_ö£π
 
PARAMS
((, ));

105 
æ_èb_ö£π
 
PARAMS
((, ));

106 
æ_√wlöe
 
PARAMS
((, ));

107 
æ_do_lowîˇ£_vîsi⁄
 
PARAMS
((, ));

108 
æ_rubout
 
PARAMS
((, ));

109 
æ_dñëe
 
PARAMS
((, ));

110 
æ_rubout_‹_dñëe
 
PARAMS
((, ));

111 
æ_dñëe_h‹iz⁄èl_•a˚
 
PARAMS
((, ));

112 
æ_dñëe_‹_show_com∂ëi⁄s
 
PARAMS
((, ));

113 
æ_ö£π_commít
 
PARAMS
((, ));

116 
æ_upˇ£_w‹d
 
PARAMS
((, ));

117 
æ_downˇ£_w‹d
 
PARAMS
((, ));

118 
æ_ˇpôÆize_w‹d
 
PARAMS
((, ));

121 
æ_å™•o£_w‹ds
 
PARAMS
((, ));

122 
æ_å™•o£_ch¨s
 
PARAMS
((, ));

125 
æ_ch¨_£¨ch
 
PARAMS
((, ));

126 
æ_backw¨d_ch¨_£¨ch
 
PARAMS
((, ));

129 
æ_begönög_of_hi°‹y
 
PARAMS
((, ));

130 
æ_íd_of_hi°‹y
 
PARAMS
((, ));

131 
æ_gë_√xt_hi°‹y
 
PARAMS
((, ));

132 
æ_gë_¥evious_hi°‹y
 
PARAMS
((, ));

135 
æ_£t_m¨k
 
PARAMS
((, ));

136 
æ_exch™ge_poöt_™d_m¨k
 
PARAMS
((, ));

139 
æ_vi_edôög_mode
 
PARAMS
((, ));

140 
æ_emacs_edôög_mode
 
PARAMS
((, ));

143 
æ_ovîwrôe_mode
 
PARAMS
((, ));

146 
æ_ª_ªad_öô_fûe
 
PARAMS
((, ));

147 
æ_dump_fun˘i⁄s
 
PARAMS
((, ));

148 
æ_dump_ma¸os
 
PARAMS
((, ));

149 
æ_dump_v¨übÀs
 
PARAMS
((, ));

152 
æ_com∂ëe
 
PARAMS
((, ));

153 
æ_possibÀ_com∂ëi⁄s
 
PARAMS
((, ));

154 
æ_ö£π_com∂ëi⁄s
 
PARAMS
((, ));

155 
æ_ﬁd_míu_com∂ëe
 
PARAMS
((, ));

156 
æ_míu_com∂ëe
 
PARAMS
((, ));

157 
æ_backw¨d_míu_com∂ëe
 
PARAMS
((, ));

160 
æ_kûl_w‹d
 
PARAMS
((, ));

161 
æ_backw¨d_kûl_w‹d
 
PARAMS
((, ));

162 
æ_kûl_löe
 
PARAMS
((, ));

163 
æ_backw¨d_kûl_löe
 
PARAMS
((, ));

164 
æ_kûl_fuŒ_löe
 
PARAMS
((, ));

165 
æ_unix_w‹d_rubout
 
PARAMS
((, ));

166 
æ_unix_fûíame_rubout
 
PARAMS
((, ));

167 
æ_unix_löe_disˇrd
 
PARAMS
((, ));

168 
æ_c›y_ªgi⁄_to_kûl
 
PARAMS
((, ));

169 
æ_kûl_ªgi⁄
 
PARAMS
((, ));

170 
æ_c›y_f‹w¨d_w‹d
 
PARAMS
((, ));

171 
æ_c›y_backw¨d_w‹d
 
PARAMS
((, ));

172 
æ_y™k
 
PARAMS
((, ));

173 
æ_y™k_p›
 
PARAMS
((, ));

174 
æ_y™k_¡h_¨g
 
PARAMS
((, ));

175 
æ_y™k_œ°_¨g
 
PARAMS
((, ));

177 #ifde‡
__CYGWIN__


178 
æ_∑°e_‰om_˛ùbﬂrd
 
PARAMS
((, ));

182 
æ_ªvî£_£¨ch_hi°‹y
 
PARAMS
((, ));

183 
æ_f‹w¨d_£¨ch_hi°‹y
 
PARAMS
((, ));

186 
æ_°¨t_kbd_ma¸o
 
PARAMS
((, ));

187 
æ_íd_kbd_ma¸o
 
PARAMS
((, ));

188 
æ_ˇŒ_œ°_kbd_ma¸o
 
PARAMS
((, ));

189 
æ_¥öt_œ°_kbd_ma¸o
 
PARAMS
((, ));

192 
æ_ªvît_löe
 
PARAMS
((, ));

193 
æ_undo_comm™d
 
PARAMS
((, ));

196 
æ_tûde_ex∑nd
 
PARAMS
((, ));

199 
æ_ª°¨t_ouçut
 
PARAMS
((, ));

200 
æ_°›_ouçut
 
PARAMS
((, ));

203 
æ_ab‹t
 
PARAMS
((, ));

204 
æ_ây_°©us
 
PARAMS
((, ));

207 
æ_hi°‹y_£¨ch_f‹w¨d
 
PARAMS
((, ));

208 
æ_hi°‹y_£¨ch_backw¨d
 
PARAMS
((, ));

209 
æ_hi°‹y_sub°r_£¨ch_f‹w¨d
 
PARAMS
((, ));

210 
æ_hi°‹y_sub°r_£¨ch_backw¨d
 
PARAMS
((, ));

211 
æ_n⁄öc_f‹w¨d_£¨ch
 
PARAMS
((, ));

212 
æ_n⁄öc_ªvî£_£¨ch
 
PARAMS
((, ));

213 
æ_n⁄öc_f‹w¨d_£¨ch_agaö
 
PARAMS
((, ));

214 
æ_n⁄öc_ªvî£_£¨ch_agaö
 
PARAMS
((, ));

217 
æ_ö£π_˛o£
 
PARAMS
((, ));

220 
æ_ˇŒback_h™dÀr_ö°Æl
 
PARAMS
((c⁄° *, 
æ_v˝func_t
 *));

221 
æ_ˇŒback_ªad_ch¨
 
PARAMS
(());

222 
æ_ˇŒback_h™dÀr_ªmove
 
PARAMS
(());

226 
æ_vi_ªdo
 
PARAMS
((, ));

227 
æ_vi_undo
 
PARAMS
((, ));

228 
æ_vi_y™k_¨g
 
PARAMS
((, ));

229 
æ_vi_„tch_hi°‹y
 
PARAMS
((, ));

230 
æ_vi_£¨ch_agaö
 
PARAMS
((, ));

231 
æ_vi_£¨ch
 
PARAMS
((, ));

232 
æ_vi_com∂ëe
 
PARAMS
((, ));

233 
æ_vi_tûde_ex∑nd
 
PARAMS
((, ));

234 
æ_vi_¥ev_w‹d
 
PARAMS
((, ));

235 
æ_vi_√xt_w‹d
 
PARAMS
((, ));

236 
æ_vi_íd_w‹d
 
PARAMS
((, ));

237 
æ_vi_ö£π_beg
 
PARAMS
((, ));

238 
æ_vi_≠≥nd_mode
 
PARAMS
((, ));

239 
æ_vi_≠≥nd_eﬁ
 
PARAMS
((, ));

240 
æ_vi_eof_maybe
 
PARAMS
((, ));

241 
æ_vi_ö£πi⁄_mode
 
PARAMS
((, ));

242 
æ_vi_ö£π_mode
 
PARAMS
((, ));

243 
æ_vi_movemít_mode
 
PARAMS
((, ));

244 
æ_vi_¨g_digô
 
PARAMS
((, ));

245 
æ_vi_ch™ge_ˇ£
 
PARAMS
((, ));

246 
æ_vi_put
 
PARAMS
((, ));

247 
æ_vi_cﬁumn
 
PARAMS
((, ));

248 
æ_vi_dñëe_to
 
PARAMS
((, ));

249 
æ_vi_ch™ge_to
 
PARAMS
((, ));

250 
æ_vi_y™k_to
 
PARAMS
((, ));

251 
æ_vi_rubout
 
PARAMS
((, ));

252 
æ_vi_dñëe
 
PARAMS
((, ));

253 
æ_vi_back_to_ödít
 
PARAMS
((, ));

254 
æ_vi_fú°_¥öt
 
PARAMS
((, ));

255 
æ_vi_ch¨_£¨ch
 
PARAMS
((, ));

256 
æ_vi_m©ch
 
PARAMS
((, ));

257 
æ_vi_ch™ge_ch¨
 
PARAMS
((, ));

258 
æ_vi_sub°
 
PARAMS
((, ));

259 
æ_vi_ovî°rike
 
PARAMS
((, ));

260 
æ_vi_ovî°rike_dñëe
 
PARAMS
((, ));

261 
æ_vi_ª∂a˚
 
PARAMS
((, ));

262 
æ_vi_£t_m¨k
 
PARAMS
((, ));

263 
æ_vi_gŸo_m¨k
 
PARAMS
((, ));

266 
æ_vi_check
 
PARAMS
(());

267 
æ_vi_domove
 
PARAMS
((, *));

268 
æ_vi_bøckty≥
 
PARAMS
(());

270 
æ_vi_°¨t_ö£πög
 
PARAMS
((, , ));

273 
æ_vi_fW‹d
 
PARAMS
((, ));

274 
æ_vi_bW‹d
 
PARAMS
((, ));

275 
æ_vi_eW‹d
 
PARAMS
((, ));

276 
æ_vi_fw‹d
 
PARAMS
((, ));

277 
æ_vi_bw‹d
 
PARAMS
((, ));

278 
æ_vi_ew‹d
 
PARAMS
((, ));

288 *
ªadlöe
 
PARAMS
((const *));

290 
æ_£t_¥om±
 
PARAMS
((const *));

291 
æ_ex∑nd_¥om±
 
PARAMS
((*));

293 
æ_öôülize
 
PARAMS
(());

296 
æ_disˇrd_¨gumít
 
PARAMS
(());

299 
æ_add_defun
 
PARAMS
((c⁄° *, 
æ_comm™d_func_t
 *, ));

300 
æ_böd_key
 
PARAMS
((, 
æ_comm™d_func_t
 *));

301 
æ_böd_key_ö_m≠
 
PARAMS
((, 
æ_comm™d_func_t
 *, 
Keym≠
));

302 
æ_unböd_key
 
PARAMS
(());

303 
æ_unböd_key_ö_m≠
 
PARAMS
((, 
Keym≠
));

304 
æ_böd_key_if_unbound
 
PARAMS
((, 
æ_comm™d_func_t
 *));

305 
æ_böd_key_if_unbound_ö_m≠
 
PARAMS
((, 
æ_comm™d_func_t
 *, 
Keym≠
));

306 
æ_unböd_fun˘i⁄_ö_m≠
 
PARAMS
((
æ_comm™d_func_t
 *, 
Keym≠
));

307 
æ_unböd_comm™d_ö_m≠
 
PARAMS
((c⁄° *, 
Keym≠
));

308 
æ_böd_key£q
 
PARAMS
((c⁄° *, 
æ_comm™d_func_t
 *));

309 
æ_böd_key£q_ö_m≠
 
PARAMS
((c⁄° *, 
æ_comm™d_func_t
 *, 
Keym≠
));

310 
æ_böd_key£q_if_unbound
 
PARAMS
((c⁄° *, 
æ_comm™d_func_t
 *));

311 
æ_böd_key£q_if_unbound_ö_m≠
 
PARAMS
((c⁄° *, 
æ_comm™d_func_t
 *, 
Keym≠
));

312 
æ_gíîic_böd
 
PARAMS
((, c⁄° *, *, 
Keym≠
));

314 *
æ_v¨übÀ_vÆue
 
PARAMS
((const *));

315 
æ_v¨übÀ_böd
 
PARAMS
((const *, const *));

318 
æ_£t_key
 
PARAMS
((c⁄° *, 
æ_comm™d_func_t
 *, 
Keym≠
));

321 
æ_ma¸o_böd
 
PARAMS
((c⁄° *, c⁄° *, 
Keym≠
));

324 
æ_å™¶©e_key£q
 
PARAMS
((const *, *, *));

325 *
æ_u¡øn¶©e_key£q
 
PARAMS
(());

327 
æ_comm™d_func_t
 *
æ_«med_fun˘i⁄
 
PARAMS
((const *));

328 
æ_comm™d_func_t
 *
æ_fun˘i⁄_of_key£q
 
PARAMS
((c⁄° *, 
Keym≠
, *));

330 
æ_li°_funm≠_«mes
 
PARAMS
(());

331 **
æ_övokög_key£qs_ö_m≠
 
PARAMS
((
æ_comm™d_func_t
 *, 
Keym≠
));

332 **
æ_övokög_key£qs
 
PARAMS
((
æ_comm™d_func_t
 *));

334 
æ_fun˘i⁄_dum≥r
 
PARAMS
(());

335 
æ_ma¸o_dum≥r
 
PARAMS
(());

336 
æ_v¨übÀ_dum≥r
 
PARAMS
(());

338 
æ_ªad_öô_fûe
 
PARAMS
((const *));

339 
æ_∑r£_™d_böd
 
PARAMS
((*));

342 
Keym≠
 
æ_make_b¨e_keym≠
 
PARAMS
(());

343 
Keym≠
 
æ_c›y_keym≠
 
PARAMS
((Keymap));

344 
Keym≠
 
æ_make_keym≠
 
PARAMS
(());

345 
æ_disˇrd_keym≠
 
PARAMS
((
Keym≠
));

346 
æ_‰ì_keym≠
 
PARAMS
((
Keym≠
));

348 
Keym≠
 
æ_gë_keym≠_by_«me
 
PARAMS
((const *));

349 *
æ_gë_keym≠_«me
 
PARAMS
((
Keym≠
));

350 
æ_£t_keym≠
 
PARAMS
((
Keym≠
));

351 
Keym≠
 
æ_gë_keym≠
 
PARAMS
(());

353 
æ_£t_keym≠_‰om_edô_mode
 
PARAMS
(());

354 *
æ_gë_keym≠_«me_‰om_edô_mode
 
PARAMS
(());

357 
æ_add_funm≠_íåy
 
PARAMS
((c⁄° *, 
æ_comm™d_func_t
 *));

358 c⁄° **
æ_funm≠_«mes
 
PARAMS
(());

361 
æ_öôülize_funm≠
 
PARAMS
(());

364 
æ_push_ma¸o_öput
 
PARAMS
((*));

367 
æ_add_undo
 
PARAMS
((
undo_code
, , , *));

368 
æ_‰ì_undo_li°
 
PARAMS
(());

369 
æ_do_undo
 
PARAMS
(());

370 
æ_begö_undo_group
 
PARAMS
(());

371 
æ_íd_undo_group
 
PARAMS
(());

372 
æ_modifyög
 
PARAMS
((, ));

375 
æ_ªdi•œy
 
PARAMS
(());

376 
æ_⁄_√w_löe
 
PARAMS
(());

377 
æ_⁄_√w_löe_wôh_¥om±
 
PARAMS
(());

378 
æ_f‹˚d_upd©e_di•œy
 
PARAMS
(());

379 
æ_˛ór_mesßge
 
PARAMS
(());

380 
æ_ª£t_löe_°©e
 
PARAMS
(());

381 
æ_¸lf
 
PARAMS
(());

383 #i‡
deföed
 (
USE_VARARGS
Ë&& deföed (
PREFER_STDARG
)

384 
æ_mesßge
 (c⁄° *, ...Ë
__æ_©åibuã__
((
__f‹m©__
 (
¥ötf
, 1, 2)));

386 
æ_mesßge
 ();

389 
æ_show_ch¨
 
PARAMS
(());

392 
æ_ch¨a˘î_Àn
 
PARAMS
((, ));

395 
æ_ßve_¥om±
 
PARAMS
(());

396 
æ_ª°‹e_¥om±
 
PARAMS
(());

399 
æ_ª∂a˚_löe
 
PARAMS
((const *, ));

400 
æ_ö£π_ãxt
 
PARAMS
((const *));

401 
æ_dñëe_ãxt
 
PARAMS
((, ));

402 
æ_kûl_ãxt
 
PARAMS
((, ));

403 *
æ_c›y_ãxt
 
PARAMS
((, ));

406 
æ_¥ï_ãrmöÆ
 
PARAMS
(());

407 
æ_dïªp_ãrmöÆ
 
PARAMS
(());

408 
æ_ây_£t_deÁu…_bödögs
 
PARAMS
((
Keym≠
));

409 
æ_ây_un£t_deÁu…_bödögs
 
PARAMS
((
Keym≠
));

411 
æ_ª£t_ãrmöÆ
 
PARAMS
((const *));

412 
æ_ªsize_ãrmöÆ
 
PARAMS
(());

413 
æ_£t_s¸ìn_size
 
PARAMS
((, ));

414 
æ_gë_s¸ìn_size
 
PARAMS
((*, *));

415 
æ_ª£t_s¸ìn_size
 
PARAMS
(());

417 *
æ_gë_ãrmˇp
 
PARAMS
((const *));

420 
æ_°uff_ch¨
 
PARAMS
(());

421 
æ_execuã_√xt
 
PARAMS
(());

422 
æ_˛ór_≥ndög_öput
 
PARAMS
(());

423 
æ_ªad_key
 
PARAMS
(());

424 
æ_gëc
 
PARAMS
((
FILE
 *));

425 
æ_£t_keybﬂrd_öput_timeout
 
PARAMS
(());

428 
æ_exãnd_löe_buf„r
 
PARAMS
(());

429 
æ_dög
 
PARAMS
(());

430 
æ_Æphabëic
 
PARAMS
(());

431 
æ_‰ì
 
PARAMS
((*));

434 
æ_£t_sig«ls
 
PARAMS
(());

435 
æ_˛ór_sig«ls
 
PARAMS
(());

436 
æ_˛ónup_a·î_sig«l
 
PARAMS
(());

437 
æ_ª£t_a·î_sig«l
 
PARAMS
(());

438 
æ_‰ì_löe_°©e
 
PARAMS
(());

440 
æ_echo_sig«l_ch¨
 
PARAMS
(());

442 
æ_£t_∑ªn_blök_timeout
 
PARAMS
(());

446 
æ_˛ór_hi°‹y
 
PARAMS
(());

449 
æ_maybe_ßve_löe
 
PARAMS
(());

450 
æ_maybe_unßve_löe
 
PARAMS
(());

451 
æ_maybe_ª∂a˚_löe
 
PARAMS
(());

454 
æ_com∂ëe_öã∫Æ
 
PARAMS
(());

455 
æ_di•œy_m©ch_li°
 
PARAMS
((**, , ));

457 **
æ_com∂ëi⁄_m©ches
 
PARAMS
((c⁄° *, 
æ_com≥¡ry_func_t
 *));

458 *
æ_u£∫ame_com∂ëi⁄_fun˘i⁄
 
PARAMS
((const *, ));

459 *
æ_fûíame_com∂ëi⁄_fun˘i⁄
 
PARAMS
((const *, ));

461 
æ_com∂ëi⁄_mode
 
PARAMS
((
æ_comm™d_func_t
 *));

465 
‰ì_undo_li°
 
PARAMS
(());

466 
maybe_ßve_löe
 
PARAMS
(());

467 
maybe_unßve_löe
 
PARAMS
(());

468 
maybe_ª∂a˚_löe
 
PARAMS
(());

470 
dög
 
PARAMS
(());

471 
Æphabëic
 
PARAMS
(());

472 
¸lf
 
PARAMS
(());

474 **
com∂ëi⁄_m©ches
 
PARAMS
((*, 
æ_com≥¡ry_func_t
 *));

475 *
u£∫ame_com∂ëi⁄_fun˘i⁄
 
PARAMS
((const *, ));

476 *
fûíame_com∂ëi⁄_fun˘i⁄
 
PARAMS
((const *, ));

486 c⁄° *
æ_libøry_vîsi⁄
;

487 
æ_ªadlöe_vîsi⁄
;

490 
æ_gnu_ªadlöe_p
;

493 
æ_ªadlöe_°©e
;

497 
æ_edôög_mode
;

501 
æ_ö£π_mode
;

505 c⁄° *
æ_ªadlöe_«me
;

509 *
æ_¥om±
;

513 *
æ_di•œy_¥om±
;

516 *
æ_löe_buf„r
;

519 
æ_poöt
;

520 
æ_íd
;

523 
æ_m¨k
;

527 
æ_d⁄e
;

530 
æ_≥ndög_öput
;

535 
æ_di•©chög
;

539 
æ_ex∂icô_¨g
;

542 
æ_numîic_¨g
;

545 
æ_comm™d_func_t
 *
æ_œ°_func
;

548 c⁄° *
æ_ãrmöÆ_«me
;

551 
FILE
 *
æ_ö°ªam
;

552 
FILE
 *
æ_out°ªam
;

557 
æ_¥e„r_ív_wösize
;

561 
æ_hook_func_t
 *
æ_°¨tup_hook
;

566 
æ_hook_func_t
 *
æ_¥e_öput_hook
;

570 
æ_hook_func_t
 *
æ_evít_hook
;

573 
æ_hook_func_t
 *
æ_sig«l_evít_hook
;

577 
æ_hook_func_t
 *
æ_öput_avaûabÀ_hook
;

581 
æ_gëc_func_t
 *
æ_gëc_fun˘i⁄
;

583 
æ_voidfunc_t
 *
æ_ªdi•œy_fun˘i⁄
;

585 
æ_vötfunc_t
 *
æ_¥ï_ãrm_fun˘i⁄
;

586 
æ_voidfunc_t
 *
æ_dïªp_ãrm_fun˘i⁄
;

589 
Keym≠
 
æ_executög_keym≠
;

590 
Keym≠
 
æ_bödög_keym≠
;

592 
æ_executög_key
;

593 *
æ_executög_key£q
;

594 
æ_key_£quí˚_Àngth
;

600 
æ_îa£_em±y_löe
;

605 
æ_Æªady_¥om±ed
;

609 
æ_num_ch¨s_to_ªad
;

612 *
æ_executög_ma¸o
;

617 
æ_ˇtch_sig«ls
;

624 
æ_ˇtch_sigwöch
;

628 
æ_ch™ge_ívú⁄mít
;

634 
æ_com≥¡ry_func_t
 *
æ_com∂ëi⁄_íåy_fun˘i⁄
;

638 
æ_com≥¡ry_func_t
 *
æ_míu_com∂ëi⁄_íåy_fun˘i⁄
;

646 
æ_compign‹e_func_t
 *
æ_ign‹e_some_com∂ëi⁄s_fun˘i⁄
;

655 
æ_com∂ëi⁄_func_t
 *
æ_©ãm±ed_com∂ëi⁄_fun˘i⁄
;

660 c⁄° *
æ_basic_w‹d_bªak_ch¨a˘îs
;

665 *
æ_com∂ëî_w‹d_bªak_ch¨a˘îs
;

670 
æ_˝vfunc_t
 *
æ_com∂ëi⁄_w‹d_bªak_hook
;

676 c⁄° *
æ_com∂ëî_quŸe_ch¨a˘îs
;

679 c⁄° *
æ_basic_quŸe_ch¨a˘îs
;

682 c⁄° *
æ_fûíame_quŸe_ch¨a˘îs
;

687 c⁄° *
æ_•ecül_¥efixes
;

698 
æ_i˝pfunc_t
 *
æ_dúe˘‹y_com∂ëi⁄_hook
;

711 
æ_i˝pfunc_t
 *
æ_dúe˘‹y_ªwrôe_hook
;

718 
æ_i˝pfunc_t
 *
æ_fûíame_°©_hook
;

729 
æ_dequŸe_func_t
 *
æ_fûíame_ªwrôe_hook
;

732 
	#æ_symbﬁic_lök_hook
 
æ_dúe˘‹y_com∂ëi⁄_hook


	)

741 
æ_compdi•_func_t
 *
æ_com∂ëi⁄_di•œy_m©ches_hook
;

746 
æ_fûíame_com∂ëi⁄_desúed
;

753 
æ_fûíame_quŸög_desúed
;

759 
æ_quŸe_func_t
 *
æ_fûíame_quŸög_fun˘i⁄
;

764 
æ_dequŸe_func_t
 *
æ_fûíame_dequŸög_fun˘i⁄
;

769 
æ_löebuf_func_t
 *
æ_ch¨_is_quŸed_p
;

773 
æ_©ãm±ed_com∂ëi⁄_ovî
;

778 
æ_com∂ëi⁄_ty≥
;

781 
æ_com∂ëi⁄_övokög_key
;

786 
æ_com∂ëi⁄_quîy_ôems
;

790 
æ_com∂ëi⁄_≠≥nd_ch¨a˘î
;

794 
æ_com∂ëi⁄_suµªss_≠≥nd
;

798 
æ_com∂ëi⁄_quŸe_ch¨a˘î
;

802 
æ_com∂ëi⁄_found_quŸe
;

807 
æ_com∂ëi⁄_suµªss_quŸe
;

810 
æ_s‹t_com∂ëi⁄_m©ches
;

821 
æ_com∂ëi⁄_m¨k_symlök_dús
;

824 
æ_ign‹e_com∂ëi⁄_du∂iˇãs
;

828 
æ_öhibô_com∂ëi⁄
;

832 
	#READERR
 (-2)

	)

835 
	#RL_PROMPT_START_IGNORE
 '\001'

	)

836 
	#RL_PROMPT_END_IGNORE
 '\002'

	)

840 
	#NO_MATCH
 0

	)

841 
	#SINGLE_MATCH
 1

	)

842 
	#MULT_MATCH
 2

	)

845 
	#RL_STATE_NONE
 0x000000

	)

847 
	#RL_STATE_INITIALIZING
 0x0000001

	)

848 
	#RL_STATE_INITIALIZED
 0x0000002

	)

849 
	#RL_STATE_TERMPREPPED
 0x0000004

	)

850 
	#RL_STATE_READCMD
 0x0000008

	)

851 
	#RL_STATE_METANEXT
 0x0000010

	)

852 
	#RL_STATE_DISPATCHING
 0x0000020

	)

853 
	#RL_STATE_MOREINPUT
 0x0000040

	)

854 
	#RL_STATE_ISEARCH
 0x0000080

	)

855 
	#RL_STATE_NSEARCH
 0x0000100

	)

856 
	#RL_STATE_SEARCH
 0x0000200

	)

857 
	#RL_STATE_NUMERICARG
 0x0000400

	)

858 
	#RL_STATE_MACROINPUT
 0x0000800

	)

859 
	#RL_STATE_MACRODEF
 0x0001000

	)

860 
	#RL_STATE_OVERWRITE
 0x0002000

	)

861 
	#RL_STATE_COMPLETING
 0x0004000

	)

862 
	#RL_STATE_SIGHANDLER
 0x0008000

	)

863 
	#RL_STATE_UNDOING
 0x0010000

	)

864 
	#RL_STATE_INPUTPENDING
 0x0020000

	)

865 
	#RL_STATE_TTYCSAVED
 0x0040000

	)

866 
	#RL_STATE_CALLBACK
 0x0080000

	)

867 
	#RL_STATE_VIMOTION
 0x0100000

	)

868 
	#RL_STATE_MULTIKEY
 0x0200000

	)

869 
	#RL_STATE_VICMDONCE
 0x0400000

	)

870 
	#RL_STATE_REDISPLAYING
 0x0800000

	)

872 
	#RL_STATE_DONE
 0x1000000

	)

874 
	#RL_SETSTATE
(
x
Ë(
æ_ªadlöe_°©e
 |(x))

	)

875 
	#RL_UNSETSTATE
(
x
Ë(
æ_ªadlöe_°©e
 &~(x))

	)

876 
	#RL_ISSTATE
(
x
Ë(
æ_ªadlöe_°©e
 & (x))

	)

878 
	sªadlöe_°©e
 {

880 
	gpoöt
;

881 
	gíd
;

882 
	gm¨k
;

883 *
	gbuf„r
;

884 
	gbuÊí
;

885 
UNDO_LIST
 *
	gul
;

886 *
	g¥om±
;

889 
	gæ°©e
;

890 
	gd⁄e
;

891 
Keym≠
 
	gkm≠
;

894 
æ_comm™d_func_t
 *
	gœ°func
;

895 
	gösmode
;

896 
	gedmode
;

897 
	gk£qÀn
;

898 
FILE
 *
	göf
;

899 
FILE
 *
	goutf
;

900 
	g≥ndögö
;

901 *
	gma¸o
;

904 
	gˇtchsigs
;

905 
	gˇtchsigwöch
;

914 
	gª£rved
[64];

917 
æ_ßve_°©e
 
PARAMS
((
ªadlöe_°©e
 *));

918 
æ_ª°‹e_°©e
 
PARAMS
((
ªadlöe_°©e
 *));

920 #ifde‡
__˝lu•lus


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 
	#__√ed_time_t


	)

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

34 #i‚de‡
__pid_t_deföed


35 
__pid_t
 
	tpid_t
;

36 
	#__pid_t_deföed


	)

41 
	~<bôs/sched.h
>

43 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

46 
__BEGIN_DECLS


49 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

50 
__THROW
;

53 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

56 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

57 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

60 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

63 
	$sched_yõld
 (Ë
__THROW
;

66 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

69 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

72 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

75 #ifde‡
__USE_GNU


77 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

78 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

81 
˝u£ç
)

	)

82 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

83 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

86 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

88 
˝u£ç
)

	)

89 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

90 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

93 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

94 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

97 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

103 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

105 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

107 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

110 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

111 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

112 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

116 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

117 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

120 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

121 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

124 
__END_DECLS


	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	#__√ed_time•ec


	)

25 
	~<time.h
>

29 
	~<bôs/£m≠h‹e.h
>

32 
__BEGIN_DECLS


36 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

37 
__THROW
;

39 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

42 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...Ë
__THROW
;

45 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

48 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
;

54 
	`£m_waô
 (
£m_t
 *
__£m
);

56 #ifde‡
__USE_XOPEN2K


61 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

62 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

66 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

69 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

72 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

73 
__THROW
;

76 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

167 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

169 #ifde‡
__USE_XOPEN


170 #ifde‡
__GNUC__


171 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

174 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

179 #ifde‡
__USE_BSD


186 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

189 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

192 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

195 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 #ifde‡
__USE_MISC


200 
	#NSIG
 
_NSIG


	)

203 #ifde‡
__USE_GNU


204 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

208 #ifde‡
__USE_BSD


209 
__sigh™dÀr_t
 
	tsig_t
;

212 #ifde‡
__USE_POSIX


215 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

228 
__THROW
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__USE_GNU


232 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

236 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

239 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

240 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

245 
	~<bôs/siga˘i⁄.h
>

248 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

249 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

256 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

259 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

260 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

263 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 #ifde‡
__USE_POSIX199309


278 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

279 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

286 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

288 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

289 
	`__n⁄nuŒ
 ((1));

293 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

294 
__THROW
;

299 #ifde‡
__USE_BSD


303 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

304 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

307 
	ssigvec


309 
__sigh™dÀr_t
 
sv_h™dÀr
;

310 
sv_mask
;

312 
sv_Êags
;

313 
	#sv_⁄°ack
 
sv_Êags


	)

317 
	#SV_ONSTACK
 (1 << 0)

	)

318 
	#SV_INTERRUPT
 (1 << 1)

	)

319 
	#SV_RESETHAND
 (1 << 2)

	)

327 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

328 
sigvec
 *
__ovec
Ë
__THROW
;

332 
	~<bôs/sigc⁄ãxt.h
>

335 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

340 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


341 
	#__√ed_size_t


	)

342 
	~<°ddef.h
>

347 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

349 
	~<bôs/sig°ack.h
>

350 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


352 
	~<sys/uc⁄ãxt.h
>

358 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

359 
__THROW
 
__©åibuã_dïªˇãd__
;

363 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

364 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

368 #ifde‡
__USE_XOPEN_EXTENDED


372 
	$sighﬁd
 (
__sig
Ë
__THROW
;

375 
	$sigªl£
 (
__sig
Ë
__THROW
;

378 
	$sigign‹e
 (
__sig
Ë
__THROW
;

381 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

384 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


387 
	~<bôs/±hªadty≥s.h
>

388 
	~<bôs/sigthªad.h
>

395 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

397 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

401 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #i‚de‡
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
Ë
	)
c

279 
	#INT16_C
(
c
Ë
	)
c

280 
	#INT32_C
(
c
Ë
	)
c

281 #i‡
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
Ë¯## 
L


	)

284 
	#INT64_C
(
c
Ë¯## 
LL


	)

288 
	#UINT8_C
(
c
Ë
	)
c

289 
	#UINT16_C
(
c
Ë
	)
c

290 
	#UINT32_C
(
c
Ë¯## 
U


	)

291 #i‡
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
Ë¯## 
UL


	)

294 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

298 #i‡
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
Ë¯## 
L


	)

300 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

302 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

303 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/sys/file.h

18 #i‚def 
_SYS_FILE_H


19 
	#_SYS_FILE_H
 1

	)

21 
	~<„©uªs.h
>

23 #i‚def 
_FCNTL_H


24 
	~<f˙é.h
>

27 
	g__BEGIN_DECLS


32 #i‚de‡
L_SET


33 
	#L_SET
 0

	)

34 
	#L_INCR
 1

	)

35 
	#L_XTND
 2

	)

40 
	#LOCK_SH
 1

	)

41 
	#LOCK_EX
 2

	)

42 
	#LOCK_UN
 8

	)

45 
	#LOCK_NB
 4

	)

50 
	$Êock
 (
__fd
, 
__›î©i⁄
Ë
__THROW
;

53 
__END_DECLS


	@/usr/include/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_BSD


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/mount.h

21 #i‚de‡
_SYS_MOUNT_H


22 
	#_SYS_MOUNT_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<sys/io˘l.h
>

27 
	#BLOCK_SIZE
 1024

	)

28 
	#BLOCK_SIZE_BITS
 10

	)

35 
	mMS_RDONLY
 = 1,

36 
	#MS_RDONLY
 
MS_RDONLY


	)

37 
	mMS_NOSUID
 = 2,

38 
	#MS_NOSUID
 
MS_NOSUID


	)

39 
	mMS_NODEV
 = 4,

40 
	#MS_NODEV
 
MS_NODEV


	)

41 
	mMS_NOEXEC
 = 8,

42 
	#MS_NOEXEC
 
MS_NOEXEC


	)

43 
	mMS_SYNCHRONOUS
 = 16,

44 
	#MS_SYNCHRONOUS
 
MS_SYNCHRONOUS


	)

45 
	mMS_REMOUNT
 = 32,

46 
	#MS_REMOUNT
 
MS_REMOUNT


	)

47 
	mMS_MANDLOCK
 = 64,

48 
	#MS_MANDLOCK
 
MS_MANDLOCK


	)

49 
	mMS_DIRSYNC
 = 128,

50 
	#MS_DIRSYNC
 
MS_DIRSYNC


	)

51 
	mMS_NOATIME
 = 1024,

52 
	#MS_NOATIME
 
MS_NOATIME


	)

53 
	mMS_NODIRATIME
 = 2048,

54 
	#MS_NODIRATIME
 
MS_NODIRATIME


	)

55 
	mMS_BIND
 = 4096,

56 
	#MS_BIND
 
MS_BIND


	)

57 
	mMS_MOVE
 = 8192,

58 
	#MS_MOVE
 
MS_MOVE


	)

59 
	mMS_REC
 = 16384,

60 
	#MS_REC
 
MS_REC


	)

61 
	mMS_SILENT
 = 32768,

62 
	#MS_SILENT
 
MS_SILENT


	)

63 
	mMS_POSIXACL
 = 1 << 16,

64 
	#MS_POSIXACL
 
MS_POSIXACL


	)

65 
	mMS_UNBINDABLE
 = 1 << 17,

66 
	#MS_UNBINDABLE
 
MS_UNBINDABLE


	)

67 
	mMS_PRIVATE
 = 1 << 18,

68 
	#MS_PRIVATE
 
MS_PRIVATE


	)

69 
	mMS_SLAVE
 = 1 << 19,

70 
	#MS_SLAVE
 
MS_SLAVE


	)

71 
	mMS_SHARED
 = 1 << 20,

72 
	#MS_SHARED
 
MS_SHARED


	)

73 
	mMS_RELATIME
 = 1 << 21,

74 
	#MS_RELATIME
 
MS_RELATIME


	)

75 
	mMS_KERNMOUNT
 = 1 << 22,

76 
	#MS_KERNMOUNT
 
MS_KERNMOUNT


	)

77 
	mMS_I_VERSION
 = 1 << 23,

78 
	#MS_I_VERSION
 
MS_I_VERSION


	)

79 
	mMS_STRICTATIME
 = 1 << 24,

80 
	#MS_STRICTATIME
 
MS_STRICTATIME


	)

81 
	mMS_ACTIVE
 = 1 << 30,

82 
	#MS_ACTIVE
 
MS_ACTIVE


	)

83 
	mMS_NOUSER
 = 1 << 31

84 
	#MS_NOUSER
 
MS_NOUSER


	)

88 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
)

	)

93 
	#MS_MGC_VAL
 0xc0ed0000

	)

94 
	#MS_MGC_MSK
 0xffff0000

	)

101 
	#BLKROSET
 
	`_IO
(0x12, 93Ë

	)

102 
	#BLKROGET
 
	`_IO
(0x12, 94Ë

	)

103 
	#BLKRRPART
 
	`_IO
(0x12, 95Ë

	)

104 
	#BLKGETSIZE
 
	`_IO
(0x12, 96Ë

	)

105 
	#BLKFLSBUF
 
	`_IO
(0x12, 97Ë

	)

106 
	#BLKRASET
 
	`_IO
(0x12, 98Ë

	)

107 
	#BLKRAGET
 
	`_IO
(0x12, 99Ë

	)

108 
	#BLKFRASET
 
	`_IO
(0x12,100Ë

	)

109 
	#BLKFRAGET
 
	`_IO
(0x12,101Ë

	)

110 
	#BLKSECTSET
 
	`_IO
(0x12,102Ë

	)

111 
	#BLKSECTGET
 
	`_IO
(0x12,103Ë

	)

112 
	#BLKSSZGET
 
	`_IO
(0x12,104Ë

	)

113 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

114 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

115 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

121 
	mMNT_FORCE
 = 1,

122 
	#MNT_FORCE
 
MNT_FORCE


	)

123 
	mMNT_DETACH
 = 2,

124 
	#MNT_DETACH
 
MNT_DETACH


	)

125 
	mMNT_EXPIRE
 = 4,

126 
	#MNT_EXPIRE
 
MNT_EXPIRE


	)

127 
	mUMOUNT_NOFOLLOW
 = 8

128 
	#UMOUNT_NOFOLLOW
 
UMOUNT_NOFOLLOW


	)

132 
__BEGIN_DECLS


135 
	$mou¡
 (c⁄° *
__•ecül_fûe
, c⁄° *
__dú
,

136 c⁄° *
__f°y≥
, 
__rwÊag
,

137 c⁄° *
__d©a
Ë
__THROW
;

140 
	$umou¡
 (c⁄° *
__•ecül_fûe
Ë
__THROW
;

143 
	$umou¡2
 (c⁄° *
__•ecül_fûe
, 
__Êags
Ë
__THROW
;

145 
__END_DECLS


	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 
	#__√ed_NULL


	)

23 
	~<°ddef.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<limôs.h
>

27 
	~<ídün.h
>

28 
	~<sig«l.h
>

31 
	~<bôs/∑øm.h
>

36 
	#NBBY
 
CHAR_BIT


	)

38 #i‡!
deföed
 
NGROUPS
 && deföed 
NGROUPS_MAX


39 
	#NGROUPS
 
NGROUPS_MAX


	)

41 #i‡!
deföed
 
MAXSYMLINKS
 && deföed 
SYMLOOP_MAX


42 
	#MAXSYMLINKS
 
SYMLOOP_MAX


	)

44 #i‡!
deföed
 
CANBSIZ
 && deföed 
MAX_CANON


45 
	#CANBSIZ
 
MAX_CANON


	)

47 #i‡!
deföed
 
MAXPATHLEN
 && deföed 
PATH_MAX


48 
	#MAXPATHLEN
 
PATH_MAX


	)

50 #i‡!
deföed
 
NOFILE
 && deföed 
OPEN_MAX


51 
	#NOFILE
 
OPEN_MAX


	)

53 #i‚de‡
NCARGS


54 #ifde‡
ARG_MAX


55 
	#NCARGS
 
ARG_MAX


	)

59 
	#NCARGS
 
INT_MAX


	)

65 #i‚de‡
NOGROUP


66 
	#NOGROUP
 65535

	)

68 #i‚de‡
NODEV


69 
	#NODEV
 ((
dev_t
Ë-1Ë

	)

74 #i‚de‡
DEV_BSIZE


75 
	#DEV_BSIZE
 512

	)

80 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

81 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

82 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

83 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

86 #i‚de‡
howm™y


87 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

89 #ifde‡
__GNUC__


90 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

91 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

92 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

94 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

96 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

99 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

100 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

	@/usr/include/sys/resource.h

18 #i‚def 
_SYS_RESOURCE_H


19 
	#_SYS_RESOURCE_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ªsour˚.h
>

26 #i‚de‡
__id_t_deföed


27 
__id_t
 
	tid_t
;

28 
	#__id_t_deföed


	)

31 
	g__BEGIN_DECLS


37 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


38 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

39 
__rußge_who
 
	t__rußge_who_t
;

40 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

42 
	t__æimô_ªsour˚_t
;

43 
	t__rußge_who_t
;

44 
	t__¥i‹ôy_which_t
;

49 #i‚de‡
__USE_FILE_OFFSET64


50 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

51 
æimô
 *
__æimôs
Ë
__THROW
;

53 #ifde‡
__REDIRECT_NTH


54 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

55 
æimô
 *
__æimôs
), 
gëæimô64
);

57 
	#gëæimô
 
gëæimô64


	)

60 #ifde‡
__USE_LARGEFILE64


61 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

62 
æimô64
 *
__æimôs
Ë
__THROW
;

68 #i‚de‡
__USE_FILE_OFFSET64


69 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

70 c⁄° 
æimô
 *
__æimôs
Ë
__THROW
;

72 #ifde‡
__REDIRECT_NTH


73 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

74 c⁄° 
æimô
 *
__æimôs
),

75 
£ålimô64
);

77 
	#£ålimô
 
£ålimô64


	)

80 #ifde‡
__USE_LARGEFILE64


81 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

82 c⁄° 
æimô64
 *
__æimôs
Ë
__THROW
;

87 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

93 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

97 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

98 
__THROW
;

100 
__END_DECLS


	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

30 || 
deföed
 
	g__USE_ATFILE


31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


32 
	#__√ed_time_t


	)

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


35 
	#__√ed_time•ec


	)

37 
	~<time.h
>

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


43 #i‚de‡
__dev_t_deföed


44 
__dev_t
 
	tdev_t
;

45 
	#__dev_t_deföed


	)

48 #i‚de‡
__gid_t_deföed


49 
__gid_t
 
	tgid_t
;

50 
	#__gid_t_deföed


	)

53 #i‚de‡
__öo_t_deföed


54 #i‚de‡
__USE_FILE_OFFSET64


55 
__öo_t
 
	töo_t
;

57 
__öo64_t
 
	töo_t
;

59 
	#__öo_t_deföed


	)

62 #i‚de‡
__mode_t_deföed


63 
__mode_t
 
	tmode_t
;

64 
	#__mode_t_deföed


	)

67 #i‚de‡
__∆ök_t_deföed


68 
__∆ök_t
 
	t∆ök_t
;

69 
	#__∆ök_t_deföed


	)

72 #i‚de‡
__off_t_deföed


73 #i‚de‡
__USE_FILE_OFFSET64


74 
__off_t
 
	toff_t
;

76 
__off64_t
 
	toff_t
;

78 
	#__off_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

87 #ifde‡
__USE_UNIX98


88 #i‚de‡
__blk˙t_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__blk˙t_t
 
	tblk˙t_t
;

92 
__blk˙t64_t
 
	tblk˙t_t
;

94 
	#__blk˙t_t_deföed


	)

97 #i‚de‡
__blksize_t_deföed


98 
__blksize_t
 
	tblksize_t
;

99 
	#__blksize_t_deföed


	)

103 
	g__BEGIN_DECLS


105 
	~<bôs/°©.h
>

107 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


108 
	#S_IFMT
 
__S_IFMT


	)

109 
	#S_IFDIR
 
__S_IFDIR


	)

110 
	#S_IFCHR
 
__S_IFCHR


	)

111 
	#S_IFBLK
 
__S_IFBLK


	)

112 
	#S_IFREG
 
__S_IFREG


	)

113 #ifde‡
__S_IFIFO


114 
	#S_IFIFO
 
__S_IFIFO


	)

116 #ifde‡
__S_IFLNK


117 
	#S_IFLNK
 
__S_IFLNK


	)

119 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

120 && 
deföed
 
	g__S_IFSOCK


121 
	#S_IFSOCK
 
__S_IFSOCK


	)

127 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

129 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

130 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

131 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

132 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

133 #ifde‡
__S_IFIFO


134 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

136 #ifde‡
__S_IFLNK


137 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

140 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


141 
	#S_ISLNK
(
mode
Ë0

	)

144 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

145 && 
deföed
 
	g__S_IFSOCK


146 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

147 #ñi‡
deföed
 
__USE_XOPEN2K


148 
	#S_ISSOCK
(
mode
Ë0

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #i‚de‡
__USE_FILE_OFFSET64


209 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

210 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

216 #ifde‡
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

218 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

219 
	`__n⁄nuŒ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__n⁄nuŒ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

229 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

233 #ifde‡
__USE_ATFILE


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

239 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

242 #ifde‡
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

244 
°©
 *
__ª°ri˘
 
__buf
,

245 
__Êag
),

246 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 #ifde‡
__USE_LARGEFILE64


253 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

254 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

255 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

259 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


260 #i‚de‡
__USE_FILE_OFFSET64


263 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

264 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

266 #ifde‡
__REDIRECT_NTH


267 
	`__REDIRECT_NTH
 (
l°©
,

268 (c⁄° *
__ª°ri˘
 
__fûe
,

269 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

270 
	`__n⁄nuŒ
 ((1, 2));

272 
	#l°©
 
l°©64


	)

275 #ifde‡
__USE_LARGEFILE64


276 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

277 
°©64
 *
__ª°ri˘
 
__buf
)

278 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

284 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

285 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 #ifde‡
__USE_BSD


291 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX


297 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

300 #ifde‡
__USE_ATFILE


303 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

304 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

312 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

314 #ifdef 
__USE_GNU


317 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

321 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1));

324 #ifde‡
__USE_ATFILE


328 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

329 
__THROW
 
	`__n⁄nuŒ
 ((2));

335 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


336 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1));

339 #ifde‡
__USE_ATFILE


343 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

344 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

353 #ifde‡
__USE_ATFILE


357 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 #ifde‡
__USE_ATFILE


364 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

365 c⁄° 
time•ec
 
__times
[2],

366 
__Êags
)

367 
__THROW
 
	`__n⁄nuŒ
 ((2));

370 #ifde‡
__USE_XOPEN2K8


372 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

390 #i‚de‡
_STAT_VER


391 
	#_STAT_VER
 0

	)

393 #i‚de‡
_MKNOD_VER


394 
	#_MKNOD_VER
 0

	)

398 #i‚de‡
__USE_FILE_OFFSET64


399 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

400 
__THROW
 
	`__n⁄nuŒ
 ((3));

401 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

402 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

403 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

406 
°©
 *
__°©_buf
, 
__Êag
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

411 
°©
 *
__°©_buf
), 
__fx°©64
)

412 
	`__n⁄nuŒ
 ((3));

413 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

414 
°©
 *
__°©_buf
), 
__x°©64
)

415 
	`__n⁄nuŒ
 ((2, 3));

416 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

417 
°©
 *
__°©_buf
), 
__lx°©64
)

418 
	`__n⁄nuŒ
 ((2, 3));

419 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

420 c⁄° *
__fûíame
,

421 
°©
 *
__°©_buf
, 
__Êag
),

422 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

425 
	#__fx°©
 
__fx°©64


	)

426 
	#__x°©
 
__x°©64


	)

427 
	#__lx°©
 
__lx°©64


	)

431 #ifde‡
__USE_LARGEFILE64


432 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

433 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

435 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

436 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

439 
°©64
 *
__°©_buf
, 
__Êag
)

440 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

442 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

443 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

446 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

447 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

449 #ifde‡
__USE_EXTERN_INLINES


452 
__exã∫_ölöe
 

453 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

455  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

456 
	}
}

458 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


459 
__exã∫_ölöe
 

460 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

462  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

463 
	}
}

466 
__exã∫_ölöe
 

467 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

469  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

470 
	}
}

472 #ifde‡
__USE_ATFILE


473 
__exã∫_ölöe
 

474 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

475 
__Êag
))

477  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

478 
	}
}

481 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


482 
__exã∫_ölöe
 

483 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

485  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

486 
	}
}

489 #ifde‡
__USE_ATFILE


490 
__exã∫_ölöe
 

491 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

492 
__dev_t
 
__dev
))

494  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

495 
	}
}

498 #i‡
deföed
 
__USE_LARGEFILE64
 \

499 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

500 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

501 
__exã∫_ölöe
 

502 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

504  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

505 
	}
}

507 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


508 
__exã∫_ölöe
 

509 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

511  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

512 
	}
}

515 
__exã∫_ölöe
 

516 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

518  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

519 
	}
}

521 #ifde‡
__USE_ATFILE


522 
__exã∫_ölöe
 

523 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

524 
__Êag
))

526  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

527 
	}
}

534 
	g__END_DECLS


	@/usr/include/sys/statvfs.h

19 #i‚def 
_SYS_STATVFS_H


20 
	#_SYS_STATVFS_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/°©vfs.h
>

27 #i‚de‡
__USE_FILE_OFFSET64


28 #i‚de‡
__fsblk˙t_t_deföed


29 
__fsblk˙t_t
 
	tfsblk˙t_t
;

30 
	#__fsblk˙t_t_deföed


	)

32 #i‚de‡
__fsfû˙t_t_deföed


33 
__fsfû˙t_t
 
	tfsfû˙t_t
;

34 
	#__fsfû˙t_t_deföed


	)

37 #i‚de‡
__fsblk˙t_t_deföed


38 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

39 
	#__fsblk˙t_t_deföed


	)

41 #i‚de‡
__fsfû˙t_t_deföed


42 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

43 
	#__fsfû˙t_t_deföed


	)

47 
	g__BEGIN_DECLS


50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$°©vfs
 (c⁄° *
__ª°ri˘
 
__fûe
,

52 
°©vfs
 *
__ª°ri˘
 
__buf
)

53 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

55 #ifde‡
__REDIRECT_NTH


56 
	`__REDIRECT_NTH
 (
°©vfs
,

57 (c⁄° *
__ª°ri˘
 
__fûe
,

58 
°©vfs
 *
__ª°ri˘
 
__buf
), 
°©vfs64
)

59 
	`__n⁄nuŒ
 ((1, 2));

61 
	#°©vfs
 
°©vfs64


	)

64 #ifde‡
__USE_LARGEFILE64


65 
	$°©vfs64
 (c⁄° *
__ª°ri˘
 
__fûe
,

66 
°©vfs64
 *
__ª°ri˘
 
__buf
)

67 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

72 #i‚de‡
__USE_FILE_OFFSET64


73 
	$f°©vfs
 (
__fûdes
, 
°©vfs
 *
__buf
)

74 
__THROW
 
	`__n⁄nuŒ
 ((2));

76 #ifde‡
__REDIRECT_NTH


77 
	`__REDIRECT_NTH
 (
f°©vfs
, (
__fûdes
, 
°©vfs
 *
__buf
),

78 
f°©vfs64
Ë
	`__n⁄nuŒ
 ((2));

80 
	#f°©vfs
 
f°©vfs64


	)

83 #ifde‡
__USE_LARGEFILE64


84 
	$f°©vfs64
 (
__fûdes
, 
°©vfs64
 *
__buf
)

85 
__THROW
 
	`__n⁄nuŒ
 ((2));

88 
__END_DECLS


	@/usr/include/sys/sysctl.h

18 #i‚def 
_SYS_SYSCTL_H


19 
	#_SYS_SYSCTL_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

25 #i‚de‡
_LINUX_KERNEL_H


26 
	#_LINUX_KERNEL_H
 1

	)

27 
	#__undef_LINUX_KERNEL_H


	)

29 #i‚de‡
_LINUX_TYPES_H


30 
	#_LINUX_TYPES_H
 1

	)

31 
	#__undef_LINUX_TYPES_H


	)

33 #i‚de‡
_LINUX_LIST_H


34 
	#_LINUX_LIST_H
 1

	)

35 
	#__undef_LINUX_LIST_H


	)

37 #i‚de‡
__LINUX_COMPILER_H


38 
	#__LINUX_COMPILER_H
 1

	)

39 
	#__u£r


	)

40 
	#__undef__LINUX_COMPILER_H


	)

43 
	~<löux/sys˘l.h
>

45 #ifde‡
__undef_LINUX_KERNEL_H


46 #unde‡
_LINUX_KERNEL_H


47 #unde‡
__undef_LINUX_KERNEL_H


49 #ifde‡
__undef_LINUX_TYPES_H


50 #unde‡
_LINUX_TYPES_H


51 #unde‡
__undef_LINUX_TYPES_H


53 #ifde‡
__undef_LINUX_LIST_H


54 #unde‡
_LINUX_LIST_H


55 #unde‡
__undef_LINUX_LIST_H


57 #ifde‡
__undef__LINUX_COMPILER_H


58 #unde‡
__LINUX_COMPILER_H


59 #unde‡
__u£r


60 #unde‡
__undef__LINUX_COMPILER_H


63 
	~<bôs/sys˘l.h
>

65 
__BEGIN_DECLS


68 
	$sys˘l
 (*
__«me
, 
__∆í
, *
__ﬁdvÆ
,

69 
size_t
 *
__ﬁdÀ≈
, *
__√wvÆ
, size_à
__√wÀn
Ë
__THROW
;

71 
__END_DECLS


	@/usr/include/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

26 
	#__√ed_timevÆ


	)

27 
	~<bôs/time.h
>

29 
	~<sys/£À˘.h
>

31 #i‚de‡
__su£c⁄ds_t_deföed


32 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

33 
	#__su£c⁄ds_t_deföed


	)

37 
	g__BEGIN_DECLS


39 #ifde‡
__USE_GNU


41 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

42 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

43 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

44 }

	)

45 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

46 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

47 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

48 }

	)

52 #ifde‡
__USE_BSD


55 
	stimez⁄e


57 
	mtz_möuãswe°
;

58 
	mtz_d°time
;

61 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

63 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

71 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

72 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

74 #ifde‡
__USE_BSD


77 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

78 c⁄° 
timez⁄e
 *
__tz
)

79 
__THROW
;

85 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

86 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

91 
	e__ôimî_which


94 
ITIMER_REAL
 = 0,

95 
	#ITIMER_REAL
 
ITIMER_REAL


	)

97 
ITIMER_VIRTUAL
 = 1,

98 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

101 
ITIMER_PROF
 = 2

102 
	#ITIMER_PROF
 
ITIMER_PROF


	)

107 
	sôimîvÆ


110 
timevÆ
 
ô_öãrvÆ
;

112 
timevÆ
 
ô_vÆue
;

115 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


118 
__ôimî_which
 
	t__ôimî_which_t
;

120 
	t__ôimî_which_t
;

125 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

126 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

131 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

132 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

133 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

138 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

139 
__THROW
 
	`__n⁄nuŒ
 ((1));

141 #ifde‡
__USE_BSD


143 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

144 
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

150 #ifde‡
__USE_GNU


154 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

155 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

159 #ifde‡
__USE_BSD


162 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

163 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

164 
	#timîcmp
(
a
, 
b
, 
CMP
) \

165 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

166 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

167 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

168 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

170 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

171 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

172 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

174 ++(
ªsu…
)->
tv_£c
; \

175 (
ªsu…
)->
tv_u£c
 -= 1000000; \

177 
	}
} 0)

	)

178 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

180 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

181 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

182 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

183 --(
ªsu…
)->
tv_£c
; \

184 (
ªsu…
)->
tv_u£c
 += 1000000; \

186 } 0)

	)

189 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_BSD


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #i‡
deföed
 
__USE_BSD
 \

782 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

785 
	$ây¶Ÿ
 (Ë
__THROW
;

790 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

793 #ifde‡
__USE_ATFILE


796 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

797 c⁄° *
__to
, 
__Êags
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

801 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


803 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

810 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

814 #ifde‡
__USE_ATFILE


816 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

817 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

820 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

821 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

822 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

826 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_ATFILE


830 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

831 
__THROW
 
	`__n⁄nuŒ
 ((2));

835 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

842 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

849 *
	`gëlogö
 ();

850 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


857 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

860 #ifdef 
__USE_BSD


862 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__√ed_gë›t


	)

871 
	~<gë›t.h
>

875 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

886 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

887 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

897 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

899 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

906 
	$vh™gup
 (Ë
__THROW
;

909 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

917 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sˇÀ
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

929 *
	$gëu£rshñl
 (Ë
__THROW
;

930 
	$ídu£rshñl
 (Ë
__THROW
;

931 
	$£tu£rshñl
 (Ë
__THROW
;

937 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

941 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

944 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

948 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifde‡
__USE_GNU


962 
	$syncfs
 (
__fd
Ë
__THROW
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


969 
	`gëho°id
 ();

972 
	$sync
 (Ë
__THROW
;

975 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


978 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

983 
	$gëdèbÀsize
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


992 #i‚de‡
__USE_FILE_OFFSET64


993 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

994 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

996 #ifde‡
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
åunˇã
,

998 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

999 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 
	#åunˇã
 
åunˇã64


	)

1004 #ifde‡
__USE_LARGEFILE64


1005 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1012 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1015 #i‚de‡
__USE_FILE_OFFSET64


1016 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1020 
·runˇã64
Ë
__wur
;

1022 
	#·runˇã
 
·runˇã64


	)

1025 #ifde‡
__USE_LARGEFILE64


1026 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1032 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1033 || 
deföed
 
__USE_MISC


1037 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1043 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1047 #ifde‡
__USE_MISC


1058 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1063 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #i‚de‡
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1083 #ifde‡
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1085 
lockf64
Ë
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifde‡
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1102 (
__exãnsi⁄__
 \

1103 ({ 
__ªsu…
; \

1104 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1105 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1106 
__ªsu…
; 
	}
}))

	)

1109 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1112 
fd©async
 (
__fûdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1125 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1126 
__THROW
 
	`__n⁄nuŒ
 ((1));

1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1140 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1142 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1148 
	~<bôs/uni°d.h
>

1151 
__END_DECLS


	@/usr/include/utime.h

22 #i‚def 
_UTIME_H


23 
	#_UTIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


32 
	#__√ed_time_t


	)

33 
	~<time.h
>

37 
	sutimbuf


39 
__time_t
 
	ma˘ime
;

40 
__time_t
 
	mmodtime
;

45 
	$utime
 (c⁄° *
__fûe
,

46 c⁄° 
utimbuf
 *
__fûe_times
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1));

49 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/dirent.h

18 #i‚de‡
_DIRENT_H


22 
	sdúít


24 #i‚de‡
__USE_FILE_OFFSET64


25 
__öo_t
 
	md_öo
;

26 
__off_t
 
	md_off
;

28 
__öo64_t
 
	md_öo
;

29 
__off64_t
 
	md_off
;

31 
	md_ª˛í
;

32 
	md_ty≥
;

33 
	md_«me
[256];

36 #ifde‡
__USE_LARGEFILE64


37 
	sdúít64


39 
__öo64_t
 
	md_öo
;

40 
__off64_t
 
	md_off
;

41 
	md_ª˛í
;

42 
	md_ty≥
;

43 
	md_«me
[256];

47 
	#d_fûío
 
d_öo


	)

49 #unde‡
_DIRENT_HAVE_D_NAMLEN


50 
	#_DIRENT_HAVE_D_RECLEN


	)

51 
	#_DIRENT_HAVE_D_OFF


	)

52 
	#_DIRENT_HAVE_D_TYPE


	)

54 #i‡
deföed
 
__OFF_T_MATCHES_OFF64_T
 && deföed 
__INO_T_MATCHES_INO64_T


56 
	#_DIRENT_MATCHES_DIRENT64
 1

	)

	@/usr/include/bits/dlfcn.h

19 #i‚de‡
_DLFCN_H


24 
	#RTLD_LAZY
 0x00001

	)

25 
	#RTLD_NOW
 0x00002

	)

26 
	#RTLD_BINDING_MASK
 0x3

	)

27 
	#RTLD_NOLOAD
 0x00004

	)

28 
	#RTLD_DEEPBIND
 0x00008

	)

33 
	#RTLD_GLOBAL
 0x00100

	)

38 
	#RTLD_LOCAL
 0

	)

41 
	#RTLD_NODELETE
 0x01000

	)

43 #ifde‡
__USE_GNU


54 
	#DL_CALL_FCT
(
f˘p
, 
¨gs
) \

55 (
	`_dl_mcou¡_wøµî_check
 ((*Ë(
f˘p
)), (*(f˘p)Ë
¨gs
)

	)

57 
__BEGIN_DECLS


60 
	$_dl_mcou¡_wøµî_check
 (*
__£lÂc
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/huge_val.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VAL
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

35 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

39 
	~<ídün.h
>

41 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

50 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

51 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VALF
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7f800000UL }).
__d
)

	)

39 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

48 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

49 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

20 #i‚de‡
_MATH_H


24 #i‡
__GNUC_PREREQ
(3,3)

25 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

26 #ñi‡
__GNUC_PREREQ
(2,96)

27 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

30 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

32 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

33 #ifde‡
__GNUC__


34 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

35 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

37 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

38 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

26 #ifde‡
__MATH_DECLARE_LDOUBLE


27 #ifde‡
__NO_LONG_DOUBLE_MATH


28 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

30 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


36 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

37 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

38 #ifde‡
__MATH_DECLARE_LDOUBLE


39 #ifde‡
__NO_LONG_DOUBLE_MATH


40 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

42 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

48 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

49 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

50 #ifde‡
__MATH_DECLARE_LDOUBLE


51 #ifde‡
__NO_LONG_DOUBLE_MATH


52 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

54 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

59 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

60 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

61 #ifde‡
__MATH_DECLARE_LDOUBLE


62 #ifde‡
__NO_LONG_DOUBLE_MATH


63 
__REDIRECT_NTH
 (
©™2l
, (, ),

64 
__©™2_föôe
);

66 
__REDIRECT_NTH
 (
©™2l
, (, ),

67 
__©™2l_föôe
);

71 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


73 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

74 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

75 #ifde‡
__MATH_DECLARE_LDOUBLE


76 #ifde‡
__NO_LONG_DOUBLE_MATH


77 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

79 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

85 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

86 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

87 #ifde‡
__MATH_DECLARE_LDOUBLE


88 #ifde‡
__NO_LONG_DOUBLE_MATH


89 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

91 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

96 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

97 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

102 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

106 #ifde‡
__USE_GNU


108 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

109 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

110 #ifde‡
__MATH_DECLARE_LDOUBLE


111 #ifde‡
__NO_LONG_DOUBLE_MATH


112 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

114 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

119 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

120 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

121 #ifde‡
__MATH_DECLARE_LDOUBLE


122 #ifde‡
__NO_LONG_DOUBLE_MATH


123 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

125 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

130 #ifde‡
__USE_ISOC99


132 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

133 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

134 #ifde‡
__MATH_DECLARE_LDOUBLE


135 #ifde‡
__NO_LONG_DOUBLE_MATH


136 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

138 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

144 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

145 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

146 #ifde‡
__MATH_DECLARE_LDOUBLE


147 #ifde‡
__NO_LONG_DOUBLE_MATH


148 
__REDIRECT_NTH
 (
fmodl
, (, ),

149 
__fmod_föôe
);

151 
__REDIRECT_NTH
 (
fmodl
, (, ),

152 
__fmodl_föôe
);

156 #ifde‡
__USE_ISOC99


158 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

159 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

160 #ifde‡
__MATH_DECLARE_LDOUBLE


161 #ifde‡
__NO_LONG_DOUBLE_MATH


162 
__REDIRECT_NTH
 (
hypŸl
, (, ),

163 
__hypŸ_föôe
);

165 
__REDIRECT_NTH
 (
hypŸl
, (, ),

166 
__hypŸl_föôe
);

171 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


173 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

174 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

175 #ifde‡
__MATH_DECLARE_LDOUBLE


176 #ifde‡
__NO_LONG_DOUBLE_MATH


177 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

179 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

184 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

185 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

186 #ifde‡
__MATH_DECLARE_LDOUBLE


187 #ifde‡
__NO_LONG_DOUBLE_MATH


188 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

190 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

195 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

196 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

197 #ifde‡
__MATH_DECLARE_LDOUBLE


198 #ifde‡
__NO_LONG_DOUBLE_MATH


199 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

201 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

206 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

207 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

208 #ifde‡
__MATH_DECLARE_LDOUBLE


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

212 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

217 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

218 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

219 #ifde‡
__MATH_DECLARE_LDOUBLE


220 #ifde‡
__NO_LONG_DOUBLE_MATH


221 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

223 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

228 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

229 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

230 #ifde‡
__MATH_DECLARE_LDOUBLE


231 #ifde‡
__NO_LONG_DOUBLE_MATH


232 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

234 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

239 #ifde‡
__USE_MISC


241 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

242 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

243 #ifde‡
__MATH_DECLARE_LDOUBLE


244 #ifde‡
__NO_LONG_DOUBLE_MATH


245 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

246 
__lgamma_r_föôe
);

248 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

249 
__lgammÆ_r_föôe
);

254 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


256 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

258 #ifde‡
__USE_ISOC99


259 
__loˇl_signgam
 = 0;

260  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

262  
	`lgamma_r
 (
__d
, &
signgam
);

264 
	}
}

265 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

267 #ifde‡
__USE_ISOC99


268 
__loˇl_signgam
 = 0;

269  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

271  
	`lgammaf_r
 (
__d
, &
signgam
);

273 
	}
}

274 #ifde‡
__MATH_DECLARE_LDOUBLE


275 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

277 #ifde‡
__USE_ISOC99


278 
__loˇl_signgam
 = 0;

279  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

281  
	`lgammÆ_r
 (
__d
, &
signgam
);

283 
	}
}

287 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


289 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

291 #ifde‡
__USE_ISOC99


292 
__loˇl_signgam
 = 0;

293  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

295  
	`lgamma_r
 (
__d
, &
signgam
);

297 
	}
}

298 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

300 #ifde‡
__USE_ISOC99


301 
__loˇl_signgam
 = 0;

302  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

304  
	`lgammaf_r
 (
__d
, &
signgam
);

306 
	}
}

307 #ifde‡
__MATH_DECLARE_LDOUBLE


308 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

310 #ifde‡
__USE_ISOC99


311 
__loˇl_signgam
 = 0;

312  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

314  
	`lgammÆ_r
 (
__d
, &
signgam
);

316 
	}
}

321 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

322 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

323 #ifde‡
__MATH_DECLARE_LDOUBLE


324 #ifde‡
__NO_LONG_DOUBLE_MATH


325 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

327 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

332 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

333 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

334 #ifde‡
__MATH_DECLARE_LDOUBLE


335 #ifde‡
__NO_LONG_DOUBLE_MATH


336 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

338 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

342 #ifde‡
__USE_ISOC99


344 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

345 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

346 #ifde‡
__MATH_DECLARE_LDOUBLE


347 #ifde‡
__NO_LONG_DOUBLE_MATH


348 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

350 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

356 
__REDIRECT_NTH
 (
ldexp
, (, ), 
sˇlbn
);

357 
__REDIRECT_NTH
 (
ldexpf
, (, ), 
sˇlbnf
);

358 #ifde‡
__MATH_DECLARE_LDOUBLE


359 
__REDIRECT_NTH
 (
ldex∂
, (, ), 
sˇlb∆
);

363 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

364 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

365 #ifde‡
__MATH_DECLARE_LDOUBLE


366 #ifde‡
__NO_LONG_DOUBLE_MATH


367 
__REDIRECT_NTH
 (
powl
, (, ),

368 
__pow_föôe
);

370 
__REDIRECT_NTH
 (
powl
, (, ),

371 
__powl_föôe
);

376 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

377 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

378 #ifde‡
__MATH_DECLARE_LDOUBLE


379 #ifde‡
__NO_LONG_DOUBLE_MATH


380 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

381 
__ªmaödî_föôe
);

383 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

384 
__ªmaödîl_föôe
);

388 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


390 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

391 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

392 #ifde‡
__MATH_DECLARE_LDOUBLE


393 #ifde‡
__NO_LONG_DOUBLE_MATH


394 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

395 
__sˇlb_föôe
);

397 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

398 
__sˇlbl_föôe
);

404 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

405 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

406 #ifde‡
__MATH_DECLARE_LDOUBLE


407 #ifde‡
__NO_LONG_DOUBLE_MATH


408 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

410 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

415 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

416 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

417 #ifde‡
__MATH_DECLARE_LDOUBLE


418 #ifde‡
__NO_LONG_DOUBLE_MATH


419 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

421 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

425 #ifde‡
__USE_ISOC99


427 
__gamma_r_föôe
 (, *);

428 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

430 
__loˇl_signgam
 = 0;

431 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

432  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

433 
	}
}

434 
__gammaf_r_föôe
 (, *);

435 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

437 
__loˇl_signgam
 = 0;

438 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

439  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

440 
	}
}

441 #ifde‡
__MATH_DECLARE_LDOUBLE


442 
__gammÆ_r_föôe
 (, *);

443 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

445 
__loˇl_signgam
 = 0;

446 #ifde‡
__NO_LONG_DOUBLE_MATH


447 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

449 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

451  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

452 
	}
}

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
)Ë
__n⁄nuŒ
 ((2));

116 
	g_MdoubÀ_END_NAMESPACE


118 #ifde‡
__USE_GNU


120 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

122 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

125 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

131 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

134 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

135 
	g__END_NAMESPACE_C99


138 #ifde‡
__USE_ISOC99


139 
__BEGIN_NAMESPACE_C99


141 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

144 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

145 
	g__END_NAMESPACE_C99


151 
_MdoubÀ_BEGIN_NAMESPACE


153 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

156 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

157 
	g_MdoubÀ_END_NAMESPACE


159 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


160 
__BEGIN_NAMESPACE_C99


162 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

163 
	g__END_NAMESPACE_C99


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

170 
	g__END_NAMESPACE_C99


176 
_MdoubÀ_BEGIN_NAMESPACE


178 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

181 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

184 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

187 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

192 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

195 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
	g_MdoubÀ_END_NAMESPACE


198 #ifde‡
__USE_MISC


201 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

204 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

207 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

211 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


215 
__BEGIN_NAMESPACE_C99


217 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

218 
	g__END_NAMESPACE_C99


221 #ifde‡
__USE_ISOC99


222 
__BEGIN_NAMESPACE_C99


224 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

225 
	g__END_NAMESPACE_C99


230 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


234 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

237 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

238 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

240 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

241 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

246 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


247 
__BEGIN_NAMESPACE_C99


249 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

250 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

252 
	g__END_NAMESPACE_C99


255 #ifde‡
__USE_ISOC99


256 
__BEGIN_NAMESPACE_C99


258 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

259 
	g__END_NAMESPACE_C99


262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


264 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

267 #ifde‡
__USE_MISC


271 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


276 
__BEGIN_NAMESPACE_C99


279 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

282 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

283 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


284 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

288 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

290 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


292 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

296 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

299 #ifde‡
__USE_ISOC99


301 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

305 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

309 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

313 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

318 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

325 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

326 
__exãnsi⁄__


327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__exãnsi⁄__


333 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

337 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

340 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

343 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

347 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

348 
__©åibuã__
 ((
__c⁄°__
));

351 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

352 
__©åibuã__
 ((
__c⁄°__
));

356 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

359 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


360 
	g__END_NAMESPACE_C99


363 #ifde‡
__USE_GNU


365 
__MATHDECL_1
 (, 
__issig«lög
,, (
_MdoubÀ_
 
__vÆue
))

366 
__©åibuã__
 ((
__c⁄°__
));

369 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


371 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #i‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #i‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #i‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__exãnsi⁄__


202 
__MATH_INLINE
 

203 
__NTH
 (
	$Œrötf
 (
__x
))

205 
__ªs
;

210 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

211  
__ªs
;

212 
	}
}

213 
__exãnsi⁄__


214 
__MATH_INLINE
 

215 
__NTH
 (
	$Œröt
 (
__x
))

217 
__ªs
;

222 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

223  
__ªs
;

224 
	}
}

227 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

228 && 
deföed
 
__SSE2_MATH__


230 
__MATH_INLINE
 

231 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

233 #ifde‡
__AVX__


234 
__ªs
;

235 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

236  
__ªs
;

238 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

239  
__x
;

241 
	}
}

242 
__MATH_INLINE
 

243 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

245 #ifde‡
__AVX__


246 
__ªs
;

247 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

248  
__ªs
;

250 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

251  
__x
;

253 
	}
}

256 
__MATH_INLINE
 

257 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

259 #ifde‡
__AVX__


260 
__ªs
;

261 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

262  
__ªs
;

264 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

265  
__x
;

267 
	}
}

268 
__MATH_INLINE
 

269 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

271 #ifde‡
__AVX__


272 
__ªs
;

273 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

274  
__ªs
;

276 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

277  
__x
;

279 
	}
}

282 
	g__END_NAMESPACE_C99


285 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


286 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


287 
__BEGIN_NAMESPACE_C99


290 
__MATH_INLINE
 

291 
__NTH
 (
	$röt
 (
__x
))

293 
__ªs
;

298 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

299  
__ªs
;

300 
	}
}

301 
__MATH_INLINE
 

302 
__NTH
 (
	$rötf
 (
__x
))

304 
__ªs
;

309 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

310  
__ªs
;

311 
	}
}

313 #ifde‡
__USE_ISOC99


315 
__MATH_INLINE
 

316 
__NTH
 (
	$√¨byöt
 (
__x
))

318 
__ªs
;

323 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

324  
__ªs
;

325 
	}
}

326 
__MATH_INLINE
 

327 
__NTH
 (
	$√¨byötf
 (
__x
))

329 
__ªs
;

334 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

335  
__ªs
;

336 
	}
}

339 
	g__END_NAMESPACE_C99


342 
__BEGIN_NAMESPACE_STD


344 
__MATH_INLINE
 

345 
__NTH
 (
	$˚û
 (
__x
))

347 
__ªs
;

348 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

349  
__ªs
;

350 
	}
}

351 
__END_NAMESPACE_STD


353 
__BEGIN_NAMESPACE_C99


354 
__MATH_INLINE
 

355 
__NTH
 (
	$˚ûf
 (
__x
))

357 
__ªs
;

358 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

359  
__ªs
;

360 
	}
}

361 
__END_NAMESPACE_C99


363 
__BEGIN_NAMESPACE_STD


365 
__MATH_INLINE
 

366 
__NTH
 (
	$Êo‹
 (
__x
))

368 
__ªs
;

369 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

370  
__ªs
;

371 
	}
}

372 
__END_NAMESPACE_STD


374 
__BEGIN_NAMESPACE_C99


375 
__MATH_INLINE
 

376 
__NTH
 (
	$Êo‹f
 (
__x
))

378 
__ªs
;

379 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

380  
__ªs
;

381 
	}
}

382 
	g__END_NAMESPACE_C99


387 #i‚de‡
__SSE2_MATH__


388 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

389 && 
deföed
 
	g__OPTIMIZE__
)

393 #unde‡
m©h_îrh™dlög


402 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


403 
	#__ölöe_m©h›
(
func
, 
›
) \

404 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

405 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

406 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

407 
	#__ölöe_m©h›NP
(
func
, 
›
) \

408 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

409 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

410 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

412 
	#__ölöe_m©h›
(
func
, 
›
) \

413 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

414 
	#__ölöe_m©h›NP
(
func
, 
›
) \

415 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

418 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

419 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

420 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

421 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

424 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


425 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

426 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

427 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

428 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

429 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

430 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

431 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

432 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

434 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

435 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

436 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

437 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

440 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

441 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

442 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

444 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

445 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

447 
Êﬂt_ty≥
 
__ªsu…
; \

448 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

449  
__ªsu…
; \

450 }

	)

453 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


454 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

455 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

456 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

457 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

458 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

459 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

460 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

461 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

462 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

463 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

464 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

465 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

466 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

468 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

469 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

470 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

471 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

472 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

473 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

474 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

476 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

477 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

479 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

480 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

481 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

482 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

483 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

484 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

485 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

486 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

487 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

488 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

489 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

490 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

493 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

494 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

495 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

497 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

498 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

500 
code
; \

501 }

	)

504 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

505 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

506 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

508 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

509 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

511 
code
; \

512 }

	)

514 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

515 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

516 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

518 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

519 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

520 
Êﬂt_ty≥
 
¨g3
)) \

522 
code
; \

523 }

	)

527 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


531 #ifde‡
__FAST_MATH__


532 #ifde‡
__USE_GNU


533 
	#__söcos_code
 \

534 
__co§
; \

535 
__sör
; \

536 
__swtmp
; \

537 
__asm
 
__vﬁ©ûe__
 \

552 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

553 *
__söx
 = 
__sör
; \

554 *
__cosx
 = 
__co§


	)

556 
__MATH_INLINE
 

557 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

559 
__söcos_code
;

560 
	}
}

562 
__MATH_INLINE
 

563 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

565 
__söcos_code
;

566 
	}
}

568 
__MATH_INLINE
 

569 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

571 
__söcos_code
;

572 
	}
}

579 #i‡
__GNUC_PREREQ
 (3, 5)

580 
	#__expm1_code
 \

581 
__ãmp
; \

582 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

583  
__ãmp
 ? __ãm∞: 
__x


	)

585 
	#__expm1_code
 \

586 
__vÆue
; \

587 
__exp⁄ít
; \

588 
__ãmp
; \

589 
__asm
 
__vﬁ©ûe__
 \

598 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

599 
__asm
 
__vﬁ©ûe__
 \

601 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

602 
__ãmp
 -= 1.0; \

603 
__ãmp
 +
__vÆue
; \

604  
__ãmp
 ? __ãm∞: 
__x


	)

606 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

608 #i‡
	`__GNUC_PREREQ
 (3, 4)

609 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

611 
	#__exp_code
 \

612 
__vÆue
; \

613 
__exp⁄ít
; \

614 
__asm
 
__vﬁ©ûe__
 \

622 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

623 
__vÆue
 += 1.0; \

624 
__asm
 
__vﬁ©ûe__
 \

626 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

627  
__vÆue


	)

628 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

629 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

633 #i‡!
	`__GNUC_PREREQ
 (3, 5)

634 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

635 
__vÆue
; \

636 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

637 
__asm
 
__vﬁ©ûe__
 \

639 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

640  
__vÆue
)

645 #i‡
	`__GNUC_PREREQ
 (3, 4)

646 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

647  
	$__buûtö_©™2l
 (
__y
, 
__x
))

649 
	#__©™2_code
 \

650 
__vÆue
; \

651 
__asm
 
__vﬁ©ûe__
 \

653 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

654  
__vÆue


	)

655 #ifde‡
__FAST_MATH__


656 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

658 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

662 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

663 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

664 
__vÆue
; \

665 
__asm
 
__vﬁ©ûe__
 \

670 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

671  
__vÆue
)

675 #ifde‡
__FAST_MATH__


676 #i‡!
	`__GNUC_PREREQ
 (3,3)

677 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

678 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

679 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

681 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

685 #i‡
	`__GNUC_PREREQ
 (2, 8)

686 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

687 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


688 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

689 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

691 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

693 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

694 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

697 #ifde‡
__FAST_MATH__


698 #i‡!
	`__GNUC_PREREQ
 (3, 4)

700 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

702 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

704 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

707 #i‡!
	`__GNUC_PREREQ
 (3, 5)

708 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

710 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

711 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

714 #i‡!
	`__GNUC_PREREQ
 (3, 4)

715 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

719 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

720 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

721 { 
__xld
: 
__x
 
	}
}; \

722 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

723 
	g__n
.
	g__xi
[1] = 0x80000000; \

724 
	g__n
.
	g__xi
[0] = 0; \

725  
	g__n
.
	g__xld
)

728 #ifde‡
__FAST_MATH__


730 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

731 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

732  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

734 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

735 
__ex
 = 
	`__ex∂
 (
__x
); \

736  0.5 * (
__ex
 + 1.0 / __ex))

738 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

739 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

740  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

743 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

744 
__vÆue
; \

745 
__ign‹e
; \

746 
__cw
; \

747 
__cwtmp
; \

748 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

756 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

757 "=m" (
__cw
) \

758 : "0" (
__x
)); \

759  
__vÆue
)

761 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

762 
__vÆue
; \

763 
__ign‹e
; \

764 
__cw
; \

765 
__cwtmp
; \

766 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

774 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

775 "=m" (
__cw
) \

776 : "0" (
__x
)); \

777  
__vÆue
)

779 #ifde‡
__FAST_MATH__


780 
	#__ldexp_code
 \

781 
__vÆue
; \

782 
__asm
 
__vﬁ©ûe__
 \

784 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

785  
__vÆue


	)

787 
__MATH_INLINE
 

788 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

790 
__ldexp_code
;

791 
	}
}

796 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


798 #ifde‡
__FAST_MATH__


799 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

803 
	#__M_SQRT2
 1.41421356237309504880L

	)

805 #i‡!
	`__GNUC_PREREQ
 (3, 5)

806 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

807 
__vÆue
; \

808 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

809 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

811 
__asm
 
__vﬁ©ûe__
 \

815 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

816  
__vÆue
)

821 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

822 
__y
 = 
	`__Áb¶
 (
__x
); \

823  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

824 * 
	$__sgn1l
 (
__x
)))

826 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

827  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

829 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

830 
__y
 = 
	`__Áb¶
 (
__x
); \

831  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

834 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

835  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

837 #i‡!
	`__GNUC_PREREQ
 (3, 5)

838 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

839 
__vÆue
; \

840 
__junk
; \

841 
__asm
 
__vﬁ©ûe__
 \

843 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

844  
__vÆue
)

850 #ifde‡
__USE_ISOC99


851 #ifde‡
__FAST_MATH__


853 #i‡!
	`__GNUC_PREREQ
 (3, 5)

854 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

857 
__MATH_INLINE
 

858 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

860 
__ldexp_code
;

861 
	}
}

863 
__MATH_INLINE
 

864 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

866 
__ldexp_code
;

867 
	}
}

869 
__ölöe_m©h›NP
 (
röt
, "frndint")

872 
	#__Ãöt_code
 \

873 
__Ãöåes
; \

874 
__asm__
 
__vﬁ©ûe__
 \

876 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

877  
__Ãöåes


	)

878 
__MATH_INLINE
 

879 
__NTH
 (
	$Ãötf
 (
__x
))

881 
__Ãöt_code
;

882 
	}
}

883 
__MATH_INLINE
 

884 
__NTH
 (
	$Ãöt
 (
__x
))

886 
__Ãöt_code
;

887 
	}
}

888 
__MATH_INLINE
 

889 
__NTH
 (
	$Ãöé
 (
__x
))

891 
__Ãöt_code
;

892 
	}
}

893 #unde‡
__Ãöt_code


895 
	#__Œröt_code
 \

896 
__Œröåes
; \

897 
__asm__
 
__vﬁ©ûe__
 \

899 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

900  
__Œröåes


	)

901 
__exãnsi⁄__


902 
__MATH_INLINE
 

903 
__NTH
 (
	$Œrötf
 (
__x
))

905 
__Œröt_code
;

906 
	}
}

907 
__exãnsi⁄__


908 
__MATH_INLINE
 

909 
__NTH
 (
	$Œröt
 (
__x
))

911 
__Œröt_code
;

912 
	}
}

913 
__exãnsi⁄__


914 
__MATH_INLINE
 

915 
__NTH
 (
	$Œröé
 (
__x
))

917 
__Œröt_code
;

918 
	}
}

919 #unde‡
__Œröt_code


924 #ifde‡
__USE_MISC


926 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

927 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

928 
__vÆue
; \

929 
__˛obbîed
; \

930 
__asm
 
__vﬁ©ûe__
 \

935 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

936  
__vÆue
)

941 
__MATH_INLINE
 

942 
__NTH
 (
	$__föôe
 (
__x
))

944  (
__exãnsi⁄__


945 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

947 
	}
}

952 #unde‡
__©™2_code


953 #ifde‡
__FAST_MATH__


954 #unde‡
__expm1_code


955 #unde‡
__exp_code


956 #unde‡
__söcos_code


963 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


964 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

965 
__ölöe_m©hcode2
 (
__õì754_©™2
, 
__y
, 
__x
,

966 
__vÆue
;

967 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

968 : "Ò" (
__vÆue
)

969 : "0" (
__x
), "u" (
__y
) : "st(1)");

970  
__vÆue
;)

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


27 #ifde‡
__USE_MISC


28 
	#MAP_32BIT
 0x40

	)

32 #ifde‡
__USE_MISC


33 
	#MAP_GROWSDOWN
 0x00100

	)

34 
	#MAP_DENYWRITE
 0x00800

	)

35 
	#MAP_EXECUTABLE
 0x01000

	)

36 
	#MAP_LOCKED
 0x02000

	)

37 
	#MAP_NORESERVE
 0x04000

	)

38 
	#MAP_POPULATE
 0x08000

	)

39 
	#MAP_NONBLOCK
 0x10000

	)

40 
	#MAP_STACK
 0x20000

	)

41 
	#MAP_HUGETLB
 0x40000

	)

45 
	~<bôs/mm™-löux.h
>

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__q«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__q«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__q«n_uni⁄


49 
__©åibuã__
 ((
__unu£d__
)Ë{ 
__q«n_byãs
 };

50 
	#NAN
 (
__q«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/param.h

19 #i‚de‡
_SYS_PARAM_H


23 #i‚de‡
ARG_MAX


24 
	#__undef_ARG_MAX


	)

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #ifde‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


36 
	#MAXSYMLINKS
 20

	)

41 
	#NOFILE
 256

	)

42 
	#NCARGS
 131072

	)

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 
	#__PTHREAD_MUTEX_HAVE_ELISION
 1

	)

110 
	m__nu£rs
;

111 
__exãnsi⁄__
 union

115 
	m__e•ös
;

116 
	m__ñisi⁄
;

117 
	#__•ös
 
d
.
__e•ös


	)

118 
	#__ñisi⁄
 
d
.
__ñisi⁄


	)

119 
	#__PTHREAD_MUTEX_HAVE_ELISION
 2

	)

120 } 
	md
;

121 
__±hªad_¶i°_t
 
	m__li°
;

124 } 
	m__d©a
;

125 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

126 
	m__Æign
;

127 } 
	t±hªad_muãx_t
;

131 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

132 
	m__Æign
;

133 } 
	t±hªad_muãx©å_t
;

142 
	m__lock
;

143 
	m__fuãx
;

144 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

145 
__exãnsi⁄__
 
	m__wakeup_£q
;

146 
__exãnsi⁄__
 
	m__wokí_£q
;

147 *
	m__muãx
;

148 
	m__nwaôîs
;

149 
	m__brﬂdˇ°_£q
;

150 } 
	m__d©a
;

151 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

152 
__exãnsi⁄__
 
	m__Æign
;

153 } 
	t±hªad_c⁄d_t
;

157 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

158 
	m__Æign
;

159 } 
	t±hªad_c⁄d©å_t
;

163 
	t±hªad_key_t
;

167 
	t±hªad_⁄˚_t
;

170 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


175 #ifde‡
__x86_64__


178 
	m__lock
;

179 
	m__ƒ_ªadîs
;

180 
	m__ªadîs_wakeup
;

181 
	m__wrôî_wakeup
;

182 
	m__ƒ_ªadîs_queued
;

183 
	m__ƒ_wrôîs_queued
;

184 
	m__wrôî
;

185 
	m__sh¨ed
;

186 
	m__∑d1
;

187 
	m__∑d2
;

190 
	m__Êags
;

191 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

192 } 
	m__d©a
;

196 
	m__lock
;

197 
	m__ƒ_ªadîs
;

198 
	m__ªadîs_wakeup
;

199 
	m__wrôî_wakeup
;

200 
	m__ƒ_ªadîs_queued
;

201 
	m__ƒ_wrôîs_queued
;

204 
	m__Êags
;

205 
	m__sh¨ed
;

206 
	m__∑d1
;

207 
	m__∑d2
;

208 
	m__wrôî
;

209 } 
	m__d©a
;

211 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

212 
	m__Æign
;

213 } 
	t±hªad_rwlock_t
;

217 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

218 
	m__Æign
;

219 } 
	t±hªad_rwlock©å_t
;

223 #ifde‡
__USE_XOPEN2K


225 vﬁ©ûê
	t±hªad_•ölock_t
;

232 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

233 
	m__Æign
;

234 } 
	t±hªad_b¨rõr_t
;

238 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

239 
	m__Æign
;

240 } 
	t±hªad_b¨rõøâr_t
;

244 #i‚de‡
__x86_64__


246 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/resource.h

19 #i‚de‡
_SYS_RESOURCE_H


23 
	~<bôs/ty≥s.h
>

31 
	e__æimô_ªsour˚


34 
	mRLIMIT_CPU
 = 0,

35 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

38 
	mRLIMIT_FSIZE
 = 1,

39 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

42 
	mRLIMIT_DATA
 = 2,

43 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

46 
	mRLIMIT_STACK
 = 3,

47 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

50 
	mRLIMIT_CORE
 = 4,

51 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

57 
	m__RLIMIT_RSS
 = 5,

58 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

61 
	mRLIMIT_NOFILE
 = 7,

62 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

63 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

64 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

67 
	mRLIMIT_AS
 = 9,

68 
	#RLIMIT_AS
 
RLIMIT_AS


	)

71 
	m__RLIMIT_NPROC
 = 6,

72 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

75 
	m__RLIMIT_MEMLOCK
 = 8,

76 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

79 
	m__RLIMIT_LOCKS
 = 10,

80 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

83 
	m__RLIMIT_SIGPENDING
 = 11,

84 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

87 
	m__RLIMIT_MSGQUEUE
 = 12,

88 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

93 
	m__RLIMIT_NICE
 = 13,

94 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

98 
	m__RLIMIT_RTPRIO
 = 14,

99 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

104 
	m__RLIMIT_RTTIME
 = 15,

105 
	#RLIMIT_RTTIME
 
__RLIMIT_RTTIME


	)

107 
	m__RLIMIT_NLIMITS
 = 16,

108 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


109 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

110 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

114 #i‚de‡
__USE_FILE_OFFSET64


115 
	#RLIM_INFINITY
 ((
__æim_t
Ë-1)

	)

117 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

125 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

126 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

130 #i‚de‡
__USE_FILE_OFFSET64


131 
__æim_t
 
	tæim_t
;

133 
__æim64_t
 
	tæim_t
;

135 #ifde‡
__USE_LARGEFILE64


136 
__æim64_t
 
	tæim64_t
;

139 
	sæimô


142 
æim_t
 
	mæim_cur
;

144 
æim_t
 
	mæim_max
;

147 #ifde‡
__USE_LARGEFILE64


148 
	sæimô64


151 
æim64_t
 
	mæim_cur
;

153 
æim64_t
 
	mæim_max
;

158 
	e__rußge_who


161 
	mRUSAGE_SELF
 = 0,

162 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

165 
	mRUSAGE_CHILDREN
 = -1

166 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

168 #ifde‡
__USE_GNU


171 
	mRUSAGE_THREAD
 = 1

172 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

174 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

178 
	#__√ed_timevÆ


	)

179 
	~<bôs/time.h
>

187 
	srußge


190 
timevÆ
 
	mru_utime
;

192 
timevÆ
 
	mru_°ime
;

194 
__exãnsi⁄__
 union

196 
	mru_maxrss
;

197 
__sysˇŒ_¶⁄g_t
 
	m__ru_maxrss_w‹d
;

202 
__exãnsi⁄__
 union

204 
	mru_ixrss
;

205 
__sysˇŒ_¶⁄g_t
 
	m__ru_ixrss_w‹d
;

208 
__exãnsi⁄__
 union

210 
	mru_idrss
;

211 
__sysˇŒ_¶⁄g_t
 
	m__ru_idrss_w‹d
;

214 
__exãnsi⁄__
 union

216 
	mru_i§ss
;

217 
__sysˇŒ_¶⁄g_t
 
	m__ru_i§ss_w‹d
;

221 
__exãnsi⁄__
 union

223 
	mru_möÊt
;

224 
__sysˇŒ_¶⁄g_t
 
	m__ru_möÊt_w‹d
;

227 
__exãnsi⁄__
 union

229 
	mru_majÊt
;

230 
__sysˇŒ_¶⁄g_t
 
	m__ru_majÊt_w‹d
;

233 
__exãnsi⁄__
 union

235 
	mru_nsw≠
;

236 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsw≠_w‹d
;

240 
__exãnsi⁄__
 union

242 
	mru_öblock
;

243 
__sysˇŒ_¶⁄g_t
 
	m__ru_öblock_w‹d
;

246 
__exãnsi⁄__
 union

248 
	mru_oublock
;

249 
__sysˇŒ_¶⁄g_t
 
	m__ru_oublock_w‹d
;

252 
__exãnsi⁄__
 union

254 
	mru_msg¢d
;

255 
__sysˇŒ_¶⁄g_t
 
	m__ru_msg¢d_w‹d
;

258 
__exãnsi⁄__
 union

260 
	mru_msgrcv
;

261 
__sysˇŒ_¶⁄g_t
 
	m__ru_msgrcv_w‹d
;

264 
__exãnsi⁄__
 union

266 
	mru_nsig«ls
;

267 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsig«ls_w‹d
;

272 
__exãnsi⁄__
 union

274 
	mru_nvcsw
;

275 
__sysˇŒ_¶⁄g_t
 
	m__ru_nvcsw_w‹d
;

279 
__exãnsi⁄__
 union

281 
	mru_nivcsw
;

282 
__sysˇŒ_¶⁄g_t
 
	m__ru_nivcsw_w‹d
;

287 
	#PRIO_MIN
 -20

	)

288 
	#PRIO_MAX
 20

	)

292 
	e__¥i‹ôy_which


294 
	mPRIO_PROCESS
 = 0,

295 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

296 
	mPRIO_PGRP
 = 1,

297 
	#PRIO_PGRP
 
PRIO_PGRP


	)

298 
	mPRIO_USER
 = 2

299 
	#PRIO_USER
 
PRIO_USER


	)

303 
	g__BEGIN_DECLS


305 #ifde‡
__USE_GNU


307 #i‚de‡
__USE_FILE_OFFSET64


308 
	$¥limô
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

309 c⁄° 
æimô
 *
__√w_limô
,

310 
æimô
 *
__ﬁd_limô
Ë
__THROW
;

312 #ifde‡
__REDIRECT_NTH


313 
	`__REDIRECT_NTH
 (
¥limô
, (
__pid_t
 
__pid
,

314 
__æimô_ªsour˚
 
__ªsour˚
,

315 c⁄° 
æimô
 *
__√w_limô
,

316 
æimô
 *
__ﬁd_limô
), 
¥limô64
);

318 
	#¥limô
 
¥limô64


	)

321 #ifde‡
__USE_LARGEFILE64


322 
	$¥limô64
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

323 c⁄° 
æimô64
 *
__√w_limô
,

324 
æimô64
 *
__ﬁd_limô
Ë
__THROW
;

328 
__END_DECLS


	@/usr/include/bits/sched.h

20 #i‚de‡
__√ed_sched∑øm


22 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifde‡
__USE_GNU


40 
	#CSIGNAL
 0x000000f‡

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWUTS
 0x04000000

	)

64 
	#CLONE_NEWIPC
 0x08000000

	)

65 
	#CLONE_NEWUSER
 0x10000000

	)

66 
	#CLONE_NEWPID
 0x20000000

	)

67 
	#CLONE_NEWNET
 0x40000000

	)

68 
	#CLONE_IO
 0x80000000

	)

72 
	ssched_∑øm


74 
	m__sched_¥i‹ôy
;

77 
	g__BEGIN_DECLS


79 #ifde‡
__USE_GNU


81 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

82 
__Êags
, *
__¨g
, ...Ë
__THROW
;

85 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

88 
	$sched_gë˝u
 (Ë
__THROW
;

91 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

95 
__END_DECLS


99 #i‡!
deföed
 
__deföed_sched∑øm
 \

100 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

101 
	#__deföed_sched∑øm
 1

	)

103 
	s__sched_∑øm


105 
__sched_¥i‹ôy
;

107 #unde‡
__√ed_sched∑øm


111 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


112 
	#__˝u_£t_t_deföed


	)

114 
	#__CPU_SETSIZE
 1024

	)

115 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

118 
	t__˝u_mask
;

121 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

122 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

127 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

128 } 
	t˝u_£t_t
;

131 #i‡
	`__GNUC_PREREQ
 (2, 91)

132 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

133 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

135 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

137 
size_t
 
__i
; \

138 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

139 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

140 
__i
 = 0; __ò< 
__imax
; ++__i) \

141 
__bôs
[
__i
] = 0; \

142 
	}
} 0)

	)

144 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 / 8 < (
£tsize
) \

148 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

149 |
	`__CPUMASK
 (
__˝u
)) \

150 : 0; }))

	)

151 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

152 (
__exãnsi⁄__
 \

153 ({ 
size_t
 
__˝u
 = (
˝u
); \

154 
__˝u
 / 8 < (
£tsize
) \

155 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

156 &~
	`__CPUMASK
 (
__˝u
)) \

157 : 0; }))

	)

158 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

159 (
__exãnsi⁄__
 \

160 ({ 
size_t
 
__˝u
 = (
˝u
); \

161 
__˝u
 / 8 < (
£tsize
) \

162 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

163 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

164 : 0; }))

	)

166 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

167 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

169 #i‡
__GNUC_PREREQ
 (2, 91)

170 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

171 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

173 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

174 (
__exãnsi⁄__
 \

175 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

176 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

177 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

178 
size_t
 
__i
; \

179 
__i
 = 0; __ò< 
__imax
; ++__i) \

180 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

182 
__i
 =
__imax
; }))

	)

185 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

186 (
__exãnsi⁄__
 \

187 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

188 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

189 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

190 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

191 
size_t
 
__i
; \

192 
__i
 = 0; __ò< 
__imax
; ++__i) \

193 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

194 
__de°
; }))

	)

196 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

197 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

198 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

199 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

201 
__BEGIN_DECLS


203 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

204 
__THROW
;

205 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

206 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

208 
__END_DECLS


	@/usr/include/bits/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_SEM_T
 32

	)

28 
	#__SIZEOF_SEM_T
 16

	)

33 
	#SEM_FAILED
 ((
£m_t
 *Ë0)

	)

38 
	m__size
[
__SIZEOF_SEM_T
];

39 
	m__Æign
;

40 } 
	t£m_t
;

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

111 } 
_sigÁu…
;

116 
si_b™d
;

117 
si_fd
;

118 } 
_sigpﬁl
;

123 *
_ˇŒ_addr
;

124 
_sysˇŒ
;

125 
_¨ch
;

126 } 
_sigsys
;

127 } 
_sifõlds
;

128 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

132 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

133 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

134 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

135 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

136 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

137 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

138 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

139 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

140 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

141 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

142 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

143 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

144 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

145 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

146 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

147 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

148 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

155 
SI_ASYNCNL
 = -60,

156 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

157 
SI_TKILL
 = -6,

158 
	#SI_TKILL
 
SI_TKILL


	)

159 
SI_SIGIO
,

160 
	#SI_SIGIO
 
SI_SIGIO


	)

161 
SI_ASYNCIO
,

162 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

163 
SI_MESGQ
,

164 
	#SI_MESGQ
 
SI_MESGQ


	)

165 
SI_TIMER
,

166 
	#SI_TIMER
 
SI_TIMER


	)

167 
SI_QUEUE
,

168 
	#SI_QUEUE
 
SI_QUEUE


	)

169 
SI_USER
,

170 
	#SI_USER
 
SI_USER


	)

171 
SI_KERNEL
 = 0x80

172 
	#SI_KERNEL
 
SI_KERNEL


	)

179 
ILL_ILLOPC
 = 1,

180 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

181 
ILL_ILLOPN
,

182 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

183 
ILL_ILLADR
,

184 
	#ILL_ILLADR
 
ILL_ILLADR


	)

185 
ILL_ILLTRP
,

186 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

187 
ILL_PRVOPC
,

188 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

189 
ILL_PRVREG
,

190 
	#ILL_PRVREG
 
ILL_PRVREG


	)

191 
ILL_COPROC
,

192 
	#ILL_COPROC
 
ILL_COPROC


	)

193 
ILL_BADSTK


194 
	#ILL_BADSTK
 
ILL_BADSTK


	)

200 
FPE_INTDIV
 = 1,

201 
	#FPE_INTDIV
 
FPE_INTDIV


	)

202 
FPE_INTOVF
,

203 
	#FPE_INTOVF
 
FPE_INTOVF


	)

204 
FPE_FLTDIV
,

205 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

206 
FPE_FLTOVF
,

207 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

208 
FPE_FLTUND
,

209 
	#FPE_FLTUND
 
FPE_FLTUND


	)

210 
FPE_FLTRES
,

211 
	#FPE_FLTRES
 
FPE_FLTRES


	)

212 
FPE_FLTINV
,

213 
	#FPE_FLTINV
 
FPE_FLTINV


	)

214 
FPE_FLTSUB


215 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

221 
SEGV_MAPERR
 = 1,

222 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

223 
SEGV_ACCERR


224 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

230 
BUS_ADRALN
 = 1,

231 
	#BUS_ADRALN
 
BUS_ADRALN


	)

232 
BUS_ADRERR
,

233 
	#BUS_ADRERR
 
BUS_ADRERR


	)

234 
BUS_OBJERR
,

235 
	#BUS_OBJERR
 
BUS_OBJERR


	)

236 
BUS_MCEERR_AR
,

237 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

238 
BUS_MCEERR_AO


239 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

245 
TRAP_BRKPT
 = 1,

246 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

247 
TRAP_TRACE


248 
	#TRAP_TRACE
 
TRAP_TRACE


	)

254 
CLD_EXITED
 = 1,

255 
	#CLD_EXITED
 
CLD_EXITED


	)

256 
CLD_KILLED
,

257 
	#CLD_KILLED
 
CLD_KILLED


	)

258 
CLD_DUMPED
,

259 
	#CLD_DUMPED
 
CLD_DUMPED


	)

260 
CLD_TRAPPED
,

261 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

262 
CLD_STOPPED
,

263 
	#CLD_STOPPED
 
CLD_STOPPED


	)

264 
CLD_CONTINUED


265 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

271 
POLL_IN
 = 1,

272 
	#POLL_IN
 
POLL_IN


	)

273 
POLL_OUT
,

274 
	#POLL_OUT
 
POLL_OUT


	)

275 
POLL_MSG
,

276 
	#POLL_MSG
 
POLL_MSG


	)

277 
POLL_ERR
,

278 
	#POLL_ERR
 
POLL_ERR


	)

279 
POLL_PRI
,

280 
	#POLL_PRI
 
POLL_PRI


	)

281 
POLL_HUP


282 
	#POLL_HUP
 
POLL_HUP


	)

285 #unde‡
__√ed_sigöfo_t


289 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

290 && !
deföed
 
__have_sigevít_t


291 
	#__have_sigevít_t
 1

	)

294 
	#__SIGEV_MAX_SIZE
 64

	)

295 #i‡
__WORDSIZE
 == 64

296 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

298 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

302 #i‚de‡
__have_±hªad_©å_t


303 
±hªad_©å_t
 
	t±hªad_©å_t
;

304 
	#__have_±hªad_©å_t
 1

	)

307 
	ssigevít


309 
sigvÆ_t
 
sigev_vÆue
;

310 
sigev_signo
;

311 
sigev_nŸify
;

315 
_∑d
[
__SIGEV_PAD_SIZE
];

319 
__pid_t
 
_tid
;

323 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

324 
±hªad_©å_t
 *
_©åibuã
;

325 } 
_sigev_thªad
;

326 } 
_sigev_un
;

327 } 
	tsigevít_t
;

330 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

331 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

336 
SIGEV_SIGNAL
 = 0,

337 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

338 
SIGEV_NONE
,

339 
	#SIGEV_NONE
 
SIGEV_NONE


	)

340 
SIGEV_THREAD
,

341 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

343 
SIGEV_THREAD_ID
 = 4

344 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/statvfs.h

18 #i‚de‡
_SYS_STATVFS_H


22 
	~<bôs/ty≥s.h
>

24 #i‡(
__WORDSIZE
 == 32 \

25 && (!
deföed
 
	g__SYSCALL_WORDSIZE
 || __SYSCALL_WORDSIZE == 32))

26 
	#_STATVFSBUF_F_UNUSED


	)

29 
	s°©vfs


31 
f_bsize
;

32 
	mf_‰size
;

33 #i‚de‡
__USE_FILE_OFFSET64


34 
__fsblk˙t_t
 
	mf_blocks
;

35 
__fsblk˙t_t
 
	mf_b‰ì
;

36 
__fsblk˙t_t
 
	mf_bavaû
;

37 
__fsfû˙t_t
 
	mf_fûes
;

38 
__fsfû˙t_t
 
	mf_f‰ì
;

39 
__fsfû˙t_t
 
	mf_Ávaû
;

41 
__fsblk˙t64_t
 
	mf_blocks
;

42 
__fsblk˙t64_t
 
	mf_b‰ì
;

43 
__fsblk˙t64_t
 
	mf_bavaû
;

44 
__fsfû˙t64_t
 
	mf_fûes
;

45 
__fsfû˙t64_t
 
	mf_f‰ì
;

46 
__fsfû˙t64_t
 
	mf_Ávaû
;

48 
	mf_fsid
;

49 #ifde‡
_STATVFSBUF_F_UNUSED


50 
	m__f_unu£d
;

52 
	mf_Êag
;

53 
	mf_«memax
;

54 
	m__f_•¨e
[6];

57 #ifde‡
__USE_LARGEFILE64


58 
	s°©vfs64


60 
	mf_bsize
;

61 
	mf_‰size
;

62 
__fsblk˙t64_t
 
	mf_blocks
;

63 
__fsblk˙t64_t
 
	mf_b‰ì
;

64 
__fsblk˙t64_t
 
	mf_bavaû
;

65 
__fsfû˙t64_t
 
	mf_fûes
;

66 
__fsfû˙t64_t
 
	mf_f‰ì
;

67 
__fsfû˙t64_t
 
	mf_Ávaû
;

68 
	mf_fsid
;

69 #ifde‡
_STATVFSBUF_F_UNUSED


70 
	m__f_unu£d
;

72 
	mf_Êag
;

73 
	mf_«memax
;

74 
	m__f_•¨e
[6];

82 
	mST_RDONLY
 = 1,

83 
	#ST_RDONLY
 
ST_RDONLY


	)

84 
	mST_NOSUID
 = 2

85 
	#ST_NOSUID
 
ST_NOSUID


	)

86 #ifde‡
__USE_GNU


88 
	mST_NODEV
 = 4,

89 
	#ST_NODEV
 
ST_NODEV


	)

90 
	mST_NOEXEC
 = 8,

91 
	#ST_NOEXEC
 
ST_NOEXEC


	)

92 
	mST_SYNCHRONOUS
 = 16,

93 
	#ST_SYNCHRONOUS
 
ST_SYNCHRONOUS


	)

94 
	mST_MANDLOCK
 = 64,

95 
	#ST_MANDLOCK
 
ST_MANDLOCK


	)

96 
	mST_WRITE
 = 128,

97 
	#ST_WRITE
 
ST_WRITE


	)

98 
	mST_APPEND
 = 256,

99 
	#ST_APPEND
 
ST_APPEND


	)

100 
	mST_IMMUTABLE
 = 512,

101 
	#ST_IMMUTABLE
 
ST_IMMUTABLE


	)

102 
	mST_NOATIME
 = 1024,

103 
	#ST_NOATIME
 
ST_NOATIME


	)

104 
	mST_NODIRATIME
 = 2048,

105 
	#ST_NODIRATIME
 
ST_NODIRATIME


	)

106 
	mST_RELATIME
 = 4096

107 
	#ST_RELATIME
 
ST_RELATIME


	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_BSD


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_GNU


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_BSD


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/sysctl.h

18 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifde‡
INT_MAX


94 #i‡
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #i‡
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ñi‡
deföed
 
__INT_MAX__


105 #i‡
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #i‡
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifde‡
LONG_MAX


121 #i‡
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ñi‡
deföed
 
__LONG_MAX__


128 #i‡
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bôs/w‹dsize.h
>

136 #i‡
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/linux/sysctl.h

22 #i‚de‡
_LINUX_SYSCTL_H


23 
	#_LINUX_SYSCTL_H


	)

25 
	~<löux/kî√l.h
>

26 
	~<löux/ty≥s.h
>

29 
	gcom∂ëi⁄
;

31 
	#CTL_MAXNAME
 10

	)

36 
	s__sys˘l_¨gs
 {

37 *
	m«me
;

38 
	m∆í
;

39 *
	mﬁdvÆ
;

40 
size_t
 *
	mﬁdÀ≈
;

41 *
	m√wvÆ
;

42 
size_t
 
	m√wÀn
;

43 
	m__unu£d
[4];

52 
	mCTL_KERN
=1,

53 
	mCTL_VM
=2,

54 
	mCTL_NET
=3,

55 
	mCTL_PROC
=4,

56 
	mCTL_FS
=5,

57 
	mCTL_DEBUG
=6,

58 
	mCTL_DEV
=7,

59 
	mCTL_BUS
=8,

60 
	mCTL_ABI
=9,

61 
	mCTL_CPU
=10,

62 
	mCTL_ARLAN
=254,

63 
	mCTL_S390DBF
=5677,

64 
	mCTL_SUNRPC
=7249,

65 
	mCTL_PM
=9899,

66 
	mCTL_FRV
=9898,

72 
	mCTL_BUS_ISA
=1

78 
	mINOTIFY_MAX_USER_INSTANCES
=1,

79 
	mINOTIFY_MAX_USER_WATCHES
=2,

80 
	mINOTIFY_MAX_QUEUED_EVENTS
=3

86 
	mKERN_OSTYPE
=1,

87 
	mKERN_OSRELEASE
=2,

88 
	mKERN_OSREV
=3,

89 
	mKERN_VERSION
=4,

90 
	mKERN_SECUREMASK
=5,

91 
	mKERN_PROF
=6,

92 
	mKERN_NODENAME
=7,

93 
	mKERN_DOMAINNAME
=8,

95 
	mKERN_PANIC
=15,

96 
	mKERN_REALROOTDEV
=16,

98 
	mKERN_SPARC_REBOOT
=21,

99 
	mKERN_CTLALTDEL
=22,

100 
	mKERN_PRINTK
=23,

101 
	mKERN_NAMETRANS
=24,

102 
	mKERN_PPC_HTABRECLAIM
=25,

103 
	mKERN_PPC_ZEROPAGED
=26,

104 
	mKERN_PPC_POWERSAVE_NAP
=27,

105 
	mKERN_MODPROBE
=28,

106 
	mKERN_SG_BIG_BUFF
=29,

107 
	mKERN_ACCT
=30,

108 
	mKERN_PPC_L2CR
=31,

110 
	mKERN_RTSIGNR
=32,

111 
	mKERN_RTSIGMAX
=33,

113 
	mKERN_SHMMAX
=34,

114 
	mKERN_MSGMAX
=35,

115 
	mKERN_MSGMNB
=36,

116 
	mKERN_MSGPOOL
=37,

117 
	mKERN_SYSRQ
=38,

118 
	mKERN_MAX_THREADS
=39,

119 
	mKERN_RANDOM
=40,

120 
	mKERN_SHMALL
=41,

121 
	mKERN_MSGMNI
=42,

122 
	mKERN_SEM
=43,

123 
	mKERN_SPARC_STOP_A
=44,

124 
	mKERN_SHMMNI
=45,

125 
	mKERN_OVERFLOWUID
=46,

126 
	mKERN_OVERFLOWGID
=47,

127 
	mKERN_SHMPATH
=48,

128 
	mKERN_HOTPLUG
=49,

129 
	mKERN_IEEE_EMULATION_WARNINGS
=50,

130 
	mKERN_S390_USER_DEBUG_LOGGING
=51,

131 
	mKERN_CORE_USES_PID
=52,

132 
	mKERN_TAINTED
=53,

133 
	mKERN_CADPID
=54,

134 
	mKERN_PIDMAX
=55,

135 
	mKERN_CORE_PATTERN
=56,

136 
	mKERN_PANIC_ON_OOPS
=57,

137 
	mKERN_HPPA_PWRSW
=58,

138 
	mKERN_HPPA_UNALIGNED
=59,

139 
	mKERN_PRINTK_RATELIMIT
=60,

140 
	mKERN_PRINTK_RATELIMIT_BURST
=61,

141 
	mKERN_PTY
=62,

142 
	mKERN_NGROUPS_MAX
=63,

143 
	mKERN_SPARC_SCONS_PWROFF
=64,

144 
	mKERN_HZ_TIMER
=65,

145 
	mKERN_UNKNOWN_NMI_PANIC
=66,

146 
	mKERN_BOOTLOADER_TYPE
=67,

147 
	mKERN_RANDOMIZE
=68,

148 
	mKERN_SETUID_DUMPABLE
=69,

149 
	mKERN_SPIN_RETRY
=70,

150 
	mKERN_ACPI_VIDEO_FLAGS
=71,

151 
	mKERN_IA64_UNALIGNED
=72,

152 
	mKERN_COMPAT_LOG
=73,

153 
	mKERN_MAX_LOCK_DEPTH
=74,

154 
	mKERN_NMI_WATCHDOG
=75,

155 
	mKERN_PANIC_ON_NMI
=76,

163 
	mVM_UNUSED1
=1,

164 
	mVM_UNUSED2
=2,

165 
	mVM_UNUSED3
=3,

166 
	mVM_UNUSED4
=4,

167 
	mVM_OVERCOMMIT_MEMORY
=5,

168 
	mVM_UNUSED5
=6,

169 
	mVM_UNUSED7
=7,

170 
	mVM_UNUSED8
=8,

171 
	mVM_UNUSED9
=9,

172 
	mVM_PAGE_CLUSTER
=10,

173 
	mVM_DIRTY_BACKGROUND
=11,

174 
	mVM_DIRTY_RATIO
=12,

175 
	mVM_DIRTY_WB_CS
=13,

176 
	mVM_DIRTY_EXPIRE_CS
=14,

177 
	mVM_NR_PDFLUSH_THREADS
=15,

178 
	mVM_OVERCOMMIT_RATIO
=16,

179 
	mVM_PAGEBUF
=17,

180 
	mVM_HUGETLB_PAGES
=18,

181 
	mVM_SWAPPINESS
=19,

182 
	mVM_LOWMEM_RESERVE_RATIO
=20,

183 
	mVM_MIN_FREE_KBYTES
=21,

184 
	mVM_MAX_MAP_COUNT
=22,

185 
	mVM_LAPTOP_MODE
=23,

186 
	mVM_BLOCK_DUMP
=24,

187 
	mVM_HUGETLB_GROUP
=25,

188 
	mVM_VFS_CACHE_PRESSURE
=26,

189 
	mVM_LEGACY_VA_LAYOUT
=27,

190 
	mVM_SWAP_TOKEN_TIMEOUT
=28,

191 
	mVM_DROP_PAGECACHE
=29,

192 
	mVM_PERCPU_PAGELIST_FRACTION
=30,

193 
	mVM_ZONE_RECLAIM_MODE
=31,

194 
	mVM_MIN_UNMAPPED
=32,

195 
	mVM_PANIC_ON_OOM
=33,

196 
	mVM_VDSO_ENABLED
=34,

197 
	mVM_MIN_SLAB
=35,

204 
	mNET_CORE
=1,

205 
	mNET_ETHER
=2,

206 
	mNET_802
=3,

207 
	mNET_UNIX
=4,

208 
	mNET_IPV4
=5,

209 
	mNET_IPX
=6,

210 
	mNET_ATALK
=7,

211 
	mNET_NETROM
=8,

212 
	mNET_AX25
=9,

213 
	mNET_BRIDGE
=10,

214 
	mNET_ROSE
=11,

215 
	mNET_IPV6
=12,

216 
	mNET_X25
=13,

217 
	mNET_TR
=14,

218 
	mNET_DECNET
=15,

219 
	mNET_ECONET
=16,

220 
	mNET_SCTP
=17,

221 
	mNET_LLC
=18,

222 
	mNET_NETFILTER
=19,

223 
	mNET_DCCP
=20,

224 
	mNET_IRDA
=412,

230 
	mRANDOM_POOLSIZE
=1,

231 
	mRANDOM_ENTROPY_COUNT
=2,

232 
	mRANDOM_READ_THRESH
=3,

233 
	mRANDOM_WRITE_THRESH
=4,

234 
	mRANDOM_BOOT_ID
=5,

235 
	mRANDOM_UUID
=6

241 
	mPTY_MAX
=1,

242 
	mPTY_NR
=2

248 
	mBUS_ISA_MEM_BASE
=1,

249 
	mBUS_ISA_PORT_BASE
=2,

250 
	mBUS_ISA_PORT_SHIFT
=3

256 
	mNET_CORE_WMEM_MAX
=1,

257 
	mNET_CORE_RMEM_MAX
=2,

258 
	mNET_CORE_WMEM_DEFAULT
=3,

259 
	mNET_CORE_RMEM_DEFAULT
=4,

261 
	mNET_CORE_MAX_BACKLOG
=6,

262 
	mNET_CORE_FASTROUTE
=7,

263 
	mNET_CORE_MSG_COST
=8,

264 
	mNET_CORE_MSG_BURST
=9,

265 
	mNET_CORE_OPTMEM_MAX
=10,

266 
	mNET_CORE_HOT_LIST_LENGTH
=11,

267 
	mNET_CORE_DIVERT_VERSION
=12,

268 
	mNET_CORE_NO_CONG_THRESH
=13,

269 
	mNET_CORE_NO_CONG
=14,

270 
	mNET_CORE_LO_CONG
=15,

271 
	mNET_CORE_MOD_CONG
=16,

272 
	mNET_CORE_DEV_WEIGHT
=17,

273 
	mNET_CORE_SOMAXCONN
=18,

274 
	mNET_CORE_BUDGET
=19,

275 
	mNET_CORE_AEVENT_ETIME
=20,

276 
	mNET_CORE_AEVENT_RSEQTH
=21,

277 
	mNET_CORE_WARNINGS
=22,

288 
	mNET_UNIX_DESTROY_DELAY
=1,

289 
	mNET_UNIX_DELETE_DELAY
=2,

290 
	mNET_UNIX_MAX_DGRAM_QLEN
=3,

296 
	mNET_NF_CONNTRACK_MAX
=1,

297 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

298 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

299 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

300 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

301 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

302 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

303 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

304 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

305 
	mNET_NF_CONNTRACK_UDP_TIMEOUT
=10,

306 
	mNET_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

307 
	mNET_NF_CONNTRACK_ICMP_TIMEOUT
=12,

308 
	mNET_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

309 
	mNET_NF_CONNTRACK_BUCKETS
=14,

310 
	mNET_NF_CONNTRACK_LOG_INVALID
=15,

311 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

312 
	mNET_NF_CONNTRACK_TCP_LOOSE
=17,

313 
	mNET_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

314 
	mNET_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

315 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

316 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

317 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

318 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

319 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

320 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

321 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

322 
	mNET_NF_CONNTRACK_COUNT
=27,

323 
	mNET_NF_CONNTRACK_ICMPV6_TIMEOUT
=28,

324 
	mNET_NF_CONNTRACK_FRAG6_TIMEOUT
=29,

325 
	mNET_NF_CONNTRACK_FRAG6_LOW_THRESH
=30,

326 
	mNET_NF_CONNTRACK_FRAG6_HIGH_THRESH
=31,

327 
	mNET_NF_CONNTRACK_CHECKSUM
=32,

334 
	mNET_IPV4_FORWARD
=8,

335 
	mNET_IPV4_DYNADDR
=9,

337 
	mNET_IPV4_CONF
=16,

338 
	mNET_IPV4_NEIGH
=17,

339 
	mNET_IPV4_ROUTE
=18,

340 
	mNET_IPV4_FIB_HASH
=19,

341 
	mNET_IPV4_NETFILTER
=20,

343 
	mNET_IPV4_TCP_TIMESTAMPS
=33,

344 
	mNET_IPV4_TCP_WINDOW_SCALING
=34,

345 
	mNET_IPV4_TCP_SACK
=35,

346 
	mNET_IPV4_TCP_RETRANS_COLLAPSE
=36,

347 
	mNET_IPV4_DEFAULT_TTL
=37,

348 
	mNET_IPV4_AUTOCONFIG
=38,

349 
	mNET_IPV4_NO_PMTU_DISC
=39,

350 
	mNET_IPV4_TCP_SYN_RETRIES
=40,

351 
	mNET_IPV4_IPFRAG_HIGH_THRESH
=41,

352 
	mNET_IPV4_IPFRAG_LOW_THRESH
=42,

353 
	mNET_IPV4_IPFRAG_TIME
=43,

354 
	mNET_IPV4_TCP_MAX_KA_PROBES
=44,

355 
	mNET_IPV4_TCP_KEEPALIVE_TIME
=45,

356 
	mNET_IPV4_TCP_KEEPALIVE_PROBES
=46,

357 
	mNET_IPV4_TCP_RETRIES1
=47,

358 
	mNET_IPV4_TCP_RETRIES2
=48,

359 
	mNET_IPV4_TCP_FIN_TIMEOUT
=49,

360 
	mNET_IPV4_IP_MASQ_DEBUG
=50,

361 
	mNET_TCP_SYNCOOKIES
=51,

362 
	mNET_TCP_STDURG
=52,

363 
	mNET_TCP_RFC1337
=53,

364 
	mNET_TCP_SYN_TAILDROP
=54,

365 
	mNET_TCP_MAX_SYN_BACKLOG
=55,

366 
	mNET_IPV4_LOCAL_PORT_RANGE
=56,

367 
	mNET_IPV4_ICMP_ECHO_IGNORE_ALL
=57,

368 
	mNET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS
=58,

369 
	mNET_IPV4_ICMP_SOURCEQUENCH_RATE
=59,

370 
	mNET_IPV4_ICMP_DESTUNREACH_RATE
=60,

371 
	mNET_IPV4_ICMP_TIMEEXCEED_RATE
=61,

372 
	mNET_IPV4_ICMP_PARAMPROB_RATE
=62,

373 
	mNET_IPV4_ICMP_ECHOREPLY_RATE
=63,

374 
	mNET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES
=64,

375 
	mNET_IPV4_IGMP_MAX_MEMBERSHIPS
=65,

376 
	mNET_TCP_TW_RECYCLE
=66,

377 
	mNET_IPV4_ALWAYS_DEFRAG
=67,

378 
	mNET_IPV4_TCP_KEEPALIVE_INTVL
=68,

379 
	mNET_IPV4_INET_PEER_THRESHOLD
=69,

380 
	mNET_IPV4_INET_PEER_MINTTL
=70,

381 
	mNET_IPV4_INET_PEER_MAXTTL
=71,

382 
	mNET_IPV4_INET_PEER_GC_MINTIME
=72,

383 
	mNET_IPV4_INET_PEER_GC_MAXTIME
=73,

384 
	mNET_TCP_ORPHAN_RETRIES
=74,

385 
	mNET_TCP_ABORT_ON_OVERFLOW
=75,

386 
	mNET_TCP_SYNACK_RETRIES
=76,

387 
	mNET_TCP_MAX_ORPHANS
=77,

388 
	mNET_TCP_MAX_TW_BUCKETS
=78,

389 
	mNET_TCP_FACK
=79,

390 
	mNET_TCP_REORDERING
=80,

391 
	mNET_TCP_ECN
=81,

392 
	mNET_TCP_DSACK
=82,

393 
	mNET_TCP_MEM
=83,

394 
	mNET_TCP_WMEM
=84,

395 
	mNET_TCP_RMEM
=85,

396 
	mNET_TCP_APP_WIN
=86,

397 
	mNET_TCP_ADV_WIN_SCALE
=87,

398 
	mNET_IPV4_NONLOCAL_BIND
=88,

399 
	mNET_IPV4_ICMP_RATELIMIT
=89,

400 
	mNET_IPV4_ICMP_RATEMASK
=90,

401 
	mNET_TCP_TW_REUSE
=91,

402 
	mNET_TCP_FRTO
=92,

403 
	mNET_TCP_LOW_LATENCY
=93,

404 
	mNET_IPV4_IPFRAG_SECRET_INTERVAL
=94,

405 
	mNET_IPV4_IGMP_MAX_MSF
=96,

406 
	mNET_TCP_NO_METRICS_SAVE
=97,

407 
	mNET_TCP_DEFAULT_WIN_SCALE
=105,

408 
	mNET_TCP_MODERATE_RCVBUF
=106,

409 
	mNET_TCP_TSO_WIN_DIVISOR
=107,

410 
	mNET_TCP_BIC_BETA
=108,

411 
	mNET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR
=109,

412 
	mNET_TCP_CONG_CONTROL
=110,

413 
	mNET_TCP_ABC
=111,

414 
	mNET_IPV4_IPFRAG_MAX_DIST
=112,

415 
	mNET_TCP_MTU_PROBING
=113,

416 
	mNET_TCP_BASE_MSS
=114,

417 
	mNET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS
=115,

418 
	mNET_TCP_DMA_COPYBREAK
=116,

419 
	mNET_TCP_SLOW_START_AFTER_IDLE
=117,

420 
	mNET_CIPSOV4_CACHE_ENABLE
=118,

421 
	mNET_CIPSOV4_CACHE_BUCKET_SIZE
=119,

422 
	mNET_CIPSOV4_RBM_OPTFMT
=120,

423 
	mNET_CIPSOV4_RBM_STRICTVALID
=121,

424 
	mNET_TCP_AVAIL_CONG_CONTROL
=122,

425 
	mNET_TCP_ALLOWED_CONG_CONTROL
=123,

426 
	mNET_TCP_MAX_SSTHRESH
=124,

427 
	mNET_TCP_FRTO_RESPONSE
=125,

431 
	mNET_IPV4_ROUTE_FLUSH
=1,

432 
	mNET_IPV4_ROUTE_MIN_DELAY
=2,

433 
	mNET_IPV4_ROUTE_MAX_DELAY
=3,

434 
	mNET_IPV4_ROUTE_GC_THRESH
=4,

435 
	mNET_IPV4_ROUTE_MAX_SIZE
=5,

436 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL
=6,

437 
	mNET_IPV4_ROUTE_GC_TIMEOUT
=7,

438 
	mNET_IPV4_ROUTE_GC_INTERVAL
=8,

439 
	mNET_IPV4_ROUTE_REDIRECT_LOAD
=9,

440 
	mNET_IPV4_ROUTE_REDIRECT_NUMBER
=10,

441 
	mNET_IPV4_ROUTE_REDIRECT_SILENCE
=11,

442 
	mNET_IPV4_ROUTE_ERROR_COST
=12,

443 
	mNET_IPV4_ROUTE_ERROR_BURST
=13,

444 
	mNET_IPV4_ROUTE_GC_ELASTICITY
=14,

445 
	mNET_IPV4_ROUTE_MTU_EXPIRES
=15,

446 
	mNET_IPV4_ROUTE_MIN_PMTU
=16,

447 
	mNET_IPV4_ROUTE_MIN_ADVMSS
=17,

448 
	mNET_IPV4_ROUTE_SECRET_INTERVAL
=18,

449 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL_MS
=19,

454 
	mNET_PROTO_CONF_ALL
=-2,

455 
	mNET_PROTO_CONF_DEFAULT
=-3

462 
	mNET_IPV4_CONF_FORWARDING
=1,

463 
	mNET_IPV4_CONF_MC_FORWARDING
=2,

464 
	mNET_IPV4_CONF_PROXY_ARP
=3,

465 
	mNET_IPV4_CONF_ACCEPT_REDIRECTS
=4,

466 
	mNET_IPV4_CONF_SECURE_REDIRECTS
=5,

467 
	mNET_IPV4_CONF_SEND_REDIRECTS
=6,

468 
	mNET_IPV4_CONF_SHARED_MEDIA
=7,

469 
	mNET_IPV4_CONF_RP_FILTER
=8,

470 
	mNET_IPV4_CONF_ACCEPT_SOURCE_ROUTE
=9,

471 
	mNET_IPV4_CONF_BOOTP_RELAY
=10,

472 
	mNET_IPV4_CONF_LOG_MARTIANS
=11,

473 
	mNET_IPV4_CONF_TAG
=12,

474 
	mNET_IPV4_CONF_ARPFILTER
=13,

475 
	mNET_IPV4_CONF_MEDIUM_ID
=14,

476 
	mNET_IPV4_CONF_NOXFRM
=15,

477 
	mNET_IPV4_CONF_NOPOLICY
=16,

478 
	mNET_IPV4_CONF_FORCE_IGMP_VERSION
=17,

479 
	mNET_IPV4_CONF_ARP_ANNOUNCE
=18,

480 
	mNET_IPV4_CONF_ARP_IGNORE
=19,

481 
	mNET_IPV4_CONF_PROMOTE_SECONDARIES
=20,

482 
	mNET_IPV4_CONF_ARP_ACCEPT
=21,

483 
	mNET_IPV4_CONF_ARP_NOTIFY
=22,

489 
	mNET_IPV4_NF_CONNTRACK_MAX
=1,

490 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

491 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

492 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

493 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

494 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

495 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

496 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

497 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

498 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT
=10,

499 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

500 
	mNET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT
=12,

501 
	mNET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

502 
	mNET_IPV4_NF_CONNTRACK_BUCKETS
=14,

503 
	mNET_IPV4_NF_CONNTRACK_LOG_INVALID
=15,

504 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

505 
	mNET_IPV4_NF_CONNTRACK_TCP_LOOSE
=17,

506 
	mNET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

507 
	mNET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

508 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

509 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

510 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

511 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

512 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

513 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

514 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

515 
	mNET_IPV4_NF_CONNTRACK_COUNT
=27,

516 
	mNET_IPV4_NF_CONNTRACK_CHECKSUM
=28,

521 
	mNET_IPV6_CONF
=16,

522 
	mNET_IPV6_NEIGH
=17,

523 
	mNET_IPV6_ROUTE
=18,

524 
	mNET_IPV6_ICMP
=19,

525 
	mNET_IPV6_BINDV6ONLY
=20,

526 
	mNET_IPV6_IP6FRAG_HIGH_THRESH
=21,

527 
	mNET_IPV6_IP6FRAG_LOW_THRESH
=22,

528 
	mNET_IPV6_IP6FRAG_TIME
=23,

529 
	mNET_IPV6_IP6FRAG_SECRET_INTERVAL
=24,

530 
	mNET_IPV6_MLD_MAX_MSF
=25,

534 
	mNET_IPV6_ROUTE_FLUSH
=1,

535 
	mNET_IPV6_ROUTE_GC_THRESH
=2,

536 
	mNET_IPV6_ROUTE_MAX_SIZE
=3,

537 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL
=4,

538 
	mNET_IPV6_ROUTE_GC_TIMEOUT
=5,

539 
	mNET_IPV6_ROUTE_GC_INTERVAL
=6,

540 
	mNET_IPV6_ROUTE_GC_ELASTICITY
=7,

541 
	mNET_IPV6_ROUTE_MTU_EXPIRES
=8,

542 
	mNET_IPV6_ROUTE_MIN_ADVMSS
=9,

543 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL_MS
=10

547 
	mNET_IPV6_FORWARDING
=1,

548 
	mNET_IPV6_HOP_LIMIT
=2,

549 
	mNET_IPV6_MTU
=3,

550 
	mNET_IPV6_ACCEPT_RA
=4,

551 
	mNET_IPV6_ACCEPT_REDIRECTS
=5,

552 
	mNET_IPV6_AUTOCONF
=6,

553 
	mNET_IPV6_DAD_TRANSMITS
=7,

554 
	mNET_IPV6_RTR_SOLICITS
=8,

555 
	mNET_IPV6_RTR_SOLICIT_INTERVAL
=9,

556 
	mNET_IPV6_RTR_SOLICIT_DELAY
=10,

557 
	mNET_IPV6_USE_TEMPADDR
=11,

558 
	mNET_IPV6_TEMP_VALID_LFT
=12,

559 
	mNET_IPV6_TEMP_PREFERED_LFT
=13,

560 
	mNET_IPV6_REGEN_MAX_RETRY
=14,

561 
	mNET_IPV6_MAX_DESYNC_FACTOR
=15,

562 
	mNET_IPV6_MAX_ADDRESSES
=16,

563 
	mNET_IPV6_FORCE_MLD_VERSION
=17,

564 
	mNET_IPV6_ACCEPT_RA_DEFRTR
=18,

565 
	mNET_IPV6_ACCEPT_RA_PINFO
=19,

566 
	mNET_IPV6_ACCEPT_RA_RTR_PREF
=20,

567 
	mNET_IPV6_RTR_PROBE_INTERVAL
=21,

568 
	mNET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN
=22,

569 
	mNET_IPV6_PROXY_NDP
=23,

570 
	mNET_IPV6_ACCEPT_SOURCE_ROUTE
=25,

571 
	m__NET_IPV6_MAX


576 
	mNET_IPV6_ICMP_RATELIMIT
=1

581 
	mNET_NEIGH_MCAST_SOLICIT
=1,

582 
	mNET_NEIGH_UCAST_SOLICIT
=2,

583 
	mNET_NEIGH_APP_SOLICIT
=3,

584 
	mNET_NEIGH_RETRANS_TIME
=4,

585 
	mNET_NEIGH_REACHABLE_TIME
=5,

586 
	mNET_NEIGH_DELAY_PROBE_TIME
=6,

587 
	mNET_NEIGH_GC_STALE_TIME
=7,

588 
	mNET_NEIGH_UNRES_QLEN
=8,

589 
	mNET_NEIGH_PROXY_QLEN
=9,

590 
	mNET_NEIGH_ANYCAST_DELAY
=10,

591 
	mNET_NEIGH_PROXY_DELAY
=11,

592 
	mNET_NEIGH_LOCKTIME
=12,

593 
	mNET_NEIGH_GC_INTERVAL
=13,

594 
	mNET_NEIGH_GC_THRESH1
=14,

595 
	mNET_NEIGH_GC_THRESH2
=15,

596 
	mNET_NEIGH_GC_THRESH3
=16,

597 
	mNET_NEIGH_RETRANS_TIME_MS
=17,

598 
	mNET_NEIGH_REACHABLE_TIME_MS
=18,

603 
	mNET_DCCP_DEFAULT
=1,

608 
	mNET_IPX_PPROP_BROADCASTING
=1,

609 
	mNET_IPX_FORWARDING
=2

614 
	mNET_LLC2
=1,

615 
	mNET_LLC_STATION
=2,

620 
	mNET_LLC2_TIMEOUT
=1,

625 
	mNET_LLC_STATION_ACK_TIMEOUT
=1,

630 
	mNET_LLC2_ACK_TIMEOUT
=1,

631 
	mNET_LLC2_P_TIMEOUT
=2,

632 
	mNET_LLC2_REJ_TIMEOUT
=3,

633 
	mNET_LLC2_BUSY_TIMEOUT
=4,

638 
	mNET_ATALK_AARP_EXPIRY_TIME
=1,

639 
	mNET_ATALK_AARP_TICK_TIME
=2,

640 
	mNET_ATALK_AARP_RETRANSMIT_LIMIT
=3,

641 
	mNET_ATALK_AARP_RESOLVE_TIME
=4

647 
	mNET_NETROM_DEFAULT_PATH_QUALITY
=1,

648 
	mNET_NETROM_OBSOLESCENCE_COUNT_INITIALISER
=2,

649 
	mNET_NETROM_NETWORK_TTL_INITIALISER
=3,

650 
	mNET_NETROM_TRANSPORT_TIMEOUT
=4,

651 
	mNET_NETROM_TRANSPORT_MAXIMUM_TRIES
=5,

652 
	mNET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY
=6,

653 
	mNET_NETROM_TRANSPORT_BUSY_DELAY
=7,

654 
	mNET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE
=8,

655 
	mNET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT
=9,

656 
	mNET_NETROM_ROUTING_CONTROL
=10,

657 
	mNET_NETROM_LINK_FAILS_COUNT
=11,

658 
	mNET_NETROM_RESET
=12

663 
	mNET_AX25_IP_DEFAULT_MODE
=1,

664 
	mNET_AX25_DEFAULT_MODE
=2,

665 
	mNET_AX25_BACKOFF_TYPE
=3,

666 
	mNET_AX25_CONNECT_MODE
=4,

667 
	mNET_AX25_STANDARD_WINDOW
=5,

668 
	mNET_AX25_EXTENDED_WINDOW
=6,

669 
	mNET_AX25_T1_TIMEOUT
=7,

670 
	mNET_AX25_T2_TIMEOUT
=8,

671 
	mNET_AX25_T3_TIMEOUT
=9,

672 
	mNET_AX25_IDLE_TIMEOUT
=10,

673 
	mNET_AX25_N2
=11,

674 
	mNET_AX25_PACLEN
=12,

675 
	mNET_AX25_PROTOCOL
=13,

676 
	mNET_AX25_DAMA_SLAVE_TIMEOUT
=14

681 
	mNET_ROSE_RESTART_REQUEST_TIMEOUT
=1,

682 
	mNET_ROSE_CALL_REQUEST_TIMEOUT
=2,

683 
	mNET_ROSE_RESET_REQUEST_TIMEOUT
=3,

684 
	mNET_ROSE_CLEAR_REQUEST_TIMEOUT
=4,

685 
	mNET_ROSE_ACK_HOLD_BACK_TIMEOUT
=5,

686 
	mNET_ROSE_ROUTING_CONTROL
=6,

687 
	mNET_ROSE_LINK_FAIL_TIMEOUT
=7,

688 
	mNET_ROSE_MAX_VCS
=8,

689 
	mNET_ROSE_WINDOW_SIZE
=9,

690 
	mNET_ROSE_NO_ACTIVITY_TIMEOUT
=10

695 
	mNET_X25_RESTART_REQUEST_TIMEOUT
=1,

696 
	mNET_X25_CALL_REQUEST_TIMEOUT
=2,

697 
	mNET_X25_RESET_REQUEST_TIMEOUT
=3,

698 
	mNET_X25_CLEAR_REQUEST_TIMEOUT
=4,

699 
	mNET_X25_ACK_HOLD_BACK_TIMEOUT
=5,

700 
	mNET_X25_FORWARD
=6

706 
	mNET_TR_RIF_TIMEOUT
=1

711 
	mNET_DECNET_NODE_TYPE
 = 1,

712 
	mNET_DECNET_NODE_ADDRESS
 = 2,

713 
	mNET_DECNET_NODE_NAME
 = 3,

714 
	mNET_DECNET_DEFAULT_DEVICE
 = 4,

715 
	mNET_DECNET_TIME_WAIT
 = 5,

716 
	mNET_DECNET_DN_COUNT
 = 6,

717 
	mNET_DECNET_DI_COUNT
 = 7,

718 
	mNET_DECNET_DR_COUNT
 = 8,

719 
	mNET_DECNET_DST_GC_INTERVAL
 = 9,

720 
	mNET_DECNET_CONF
 = 10,

721 
	mNET_DECNET_NO_FC_MAX_CWND
 = 11,

722 
	mNET_DECNET_MEM
 = 12,

723 
	mNET_DECNET_RMEM
 = 13,

724 
	mNET_DECNET_WMEM
 = 14,

725 
	mNET_DECNET_DEBUG_LEVEL
 = 255

730 
	mNET_DECNET_CONF_LOOPBACK
 = -2,

731 
	mNET_DECNET_CONF_DDCMP
 = -3,

732 
	mNET_DECNET_CONF_PPP
 = -4,

733 
	mNET_DECNET_CONF_X25
 = -5,

734 
	mNET_DECNET_CONF_GRE
 = -6,

735 
	mNET_DECNET_CONF_ETHER
 = -7

742 
	mNET_DECNET_CONF_DEV_PRIORITY
 = 1,

743 
	mNET_DECNET_CONF_DEV_T1
 = 2,

744 
	mNET_DECNET_CONF_DEV_T2
 = 3,

745 
	mNET_DECNET_CONF_DEV_T3
 = 4,

746 
	mNET_DECNET_CONF_DEV_FORWARDING
 = 5,

747 
	mNET_DECNET_CONF_DEV_BLKSIZE
 = 6,

748 
	mNET_DECNET_CONF_DEV_STATE
 = 7

753 
	mNET_SCTP_RTO_INITIAL
 = 1,

754 
	mNET_SCTP_RTO_MIN
 = 2,

755 
	mNET_SCTP_RTO_MAX
 = 3,

756 
	mNET_SCTP_RTO_ALPHA
 = 4,

757 
	mNET_SCTP_RTO_BETA
 = 5,

758 
	mNET_SCTP_VALID_COOKIE_LIFE
 = 6,

759 
	mNET_SCTP_ASSOCIATION_MAX_RETRANS
 = 7,

760 
	mNET_SCTP_PATH_MAX_RETRANS
 = 8,

761 
	mNET_SCTP_MAX_INIT_RETRANSMITS
 = 9,

762 
	mNET_SCTP_HB_INTERVAL
 = 10,

763 
	mNET_SCTP_PRESERVE_ENABLE
 = 11,

764 
	mNET_SCTP_MAX_BURST
 = 12,

765 
	mNET_SCTP_ADDIP_ENABLE
 = 13,

766 
	mNET_SCTP_PRSCTP_ENABLE
 = 14,

767 
	mNET_SCTP_SNDBUF_POLICY
 = 15,

768 
	mNET_SCTP_SACK_TIMEOUT
 = 16,

769 
	mNET_SCTP_RCVBUF_POLICY
 = 17,

774 
	mNET_BRIDGE_NF_CALL_ARPTABLES
 = 1,

775 
	mNET_BRIDGE_NF_CALL_IPTABLES
 = 2,

776 
	mNET_BRIDGE_NF_CALL_IP6TABLES
 = 3,

777 
	mNET_BRIDGE_NF_FILTER_VLAN_TAGGED
 = 4,

778 
	mNET_BRIDGE_NF_FILTER_PPPOE_TAGGED
 = 5,

783 
	mNET_IRDA_DISCOVERY
=1,

784 
	mNET_IRDA_DEVNAME
=2,

785 
	mNET_IRDA_DEBUG
=3,

786 
	mNET_IRDA_FAST_POLL
=4,

787 
	mNET_IRDA_DISCOVERY_SLOTS
=5,

788 
	mNET_IRDA_DISCOVERY_TIMEOUT
=6,

789 
	mNET_IRDA_SLOT_TIMEOUT
=7,

790 
	mNET_IRDA_MAX_BAUD_RATE
=8,

791 
	mNET_IRDA_MIN_TX_TURN_TIME
=9,

792 
	mNET_IRDA_MAX_TX_DATA_SIZE
=10,

793 
	mNET_IRDA_MAX_TX_WINDOW
=11,

794 
	mNET_IRDA_MAX_NOREPLY_TIME
=12,

795 
	mNET_IRDA_WARN_NOREPLY_TIME
=13,

796 
	mNET_IRDA_LAP_KEEPALIVE_TIME
=14,

803 
	mFS_NRINODE
=1,

804 
	mFS_STATINODE
=2,

805 
	mFS_MAXINODE
=3,

806 
	mFS_NRDQUOT
=4,

807 
	mFS_MAXDQUOT
=5,

808 
	mFS_NRFILE
=6,

809 
	mFS_MAXFILE
=7,

810 
	mFS_DENTRY
=8,

811 
	mFS_NRSUPER
=9,

812 
	mFS_MAXSUPER
=10,

813 
	mFS_OVERFLOWUID
=11,

814 
	mFS_OVERFLOWGID
=12,

815 
	mFS_LEASES
=13,

816 
	mFS_DIR_NOTIFY
=14,

817 
	mFS_LEASE_TIME
=15,

818 
	mFS_DQSTATS
=16,

819 
	mFS_XFS
=17,

820 
	mFS_AIO_NR
=18,

821 
	mFS_AIO_MAX_NR
=19,

822 
	mFS_INOTIFY
=20,

823 
	mFS_OCFS2
=988,

828 
	mFS_DQ_LOOKUPS
 = 1,

829 
	mFS_DQ_DROPS
 = 2,

830 
	mFS_DQ_READS
 = 3,

831 
	mFS_DQ_WRITES
 = 4,

832 
	mFS_DQ_CACHE_HITS
 = 5,

833 
	mFS_DQ_ALLOCATED
 = 6,

834 
	mFS_DQ_FREE
 = 7,

835 
	mFS_DQ_SYNCS
 = 8,

836 
	mFS_DQ_WARNINGS
 = 9,

843 
	mDEV_CDROM
=1,

844 
	mDEV_HWMON
=2,

845 
	mDEV_PARPORT
=3,

846 
	mDEV_RAID
=4,

847 
	mDEV_MAC_HID
=5,

848 
	mDEV_SCSI
=6,

849 
	mDEV_IPMI
=7,

854 
	mDEV_CDROM_INFO
=1,

855 
	mDEV_CDROM_AUTOCLOSE
=2,

856 
	mDEV_CDROM_AUTOEJECT
=3,

857 
	mDEV_CDROM_DEBUG
=4,

858 
	mDEV_CDROM_LOCK
=5,

859 
	mDEV_CDROM_CHECK_MEDIA
=6

864 
	mDEV_PARPORT_DEFAULT
=-3

869 
	mDEV_RAID_SPEED_LIMIT_MIN
=1,

870 
	mDEV_RAID_SPEED_LIMIT_MAX
=2

875 
	mDEV_PARPORT_DEFAULT_TIMESLICE
=1,

876 
	mDEV_PARPORT_DEFAULT_SPINTIME
=2

881 
	mDEV_PARPORT_SPINTIME
=1,

882 
	mDEV_PARPORT_BASE_ADDR
=2,

883 
	mDEV_PARPORT_IRQ
=3,

884 
	mDEV_PARPORT_DMA
=4,

885 
	mDEV_PARPORT_MODES
=5,

886 
	mDEV_PARPORT_DEVICES
=6,

887 
	mDEV_PARPORT_AUTOPROBE
=16

892 
	mDEV_PARPORT_DEVICES_ACTIVE
=-3,

897 
	mDEV_PARPORT_DEVICE_TIMESLICE
=1,

902 
	mDEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES
=1,

903 
	mDEV_MAC_HID_KEYBOARD_LOCK_KEYCODES
=2,

904 
	mDEV_MAC_HID_MOUSE_BUTTON_EMULATION
=3,

905 
	mDEV_MAC_HID_MOUSE_BUTTON2_KEYCODE
=4,

906 
	mDEV_MAC_HID_MOUSE_BUTTON3_KEYCODE
=5,

907 
	mDEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES
=6

912 
	mDEV_SCSI_LOGGING_LEVEL
=1,

917 
	mDEV_IPMI_POWEROFF_POWERCYCLE
=1,

923 
	mABI_DEFHANDLER_COFF
=1,

924 
	mABI_DEFHANDLER_ELF
=2,

925 
	mABI_DEFHANDLER_LCALL7
=3,

926 
	mABI_DEFHANDLER_LIBCSO
=4,

927 
	mABI_TRACE
=5,

928 
	mABI_FAKE_UTSNAME
=6,

	@/usr/include/readline/keymaps.h

22 #i‚de‡
_KEYMAPS_H_


23 
	#_KEYMAPS_H_


	)

25 #ifde‡
__˝lu•lus


29 #i‡
deföed
 (
READLINE_LIBRARY
)

30 
	~"æ°dc.h
"

31 
	~"ch¨defs.h
"

32 
	~"æty≥defs.h
"

34 
	~<ªadlöe/æ°dc.h
>

35 
	~<ªadlöe/ch¨defs.h
>

36 
	~<ªadlöe/æty≥defs.h
>

44 
	s_keym≠_íåy
 {

45 
ty≥
;

46 
æ_comm™d_func_t
 *
fun˘i⁄
;

47 } 
	tKEYMAP_ENTRY
;

52 
	#KEYMAP_SIZE
 257

	)

53 
	#ANYOTHERKEY
 
KEYMAP_SIZE
-1

	)

55 
KEYMAP_ENTRY
 
	tKEYMAP_ENTRY_ARRAY
[
KEYMAP_SIZE
];

56 
KEYMAP_ENTRY
 *
	tKeym≠
;

59 
	#ISFUNC
 0

	)

60 
	#ISKMAP
 1

	)

61 
	#ISMACR
 2

	)

63 
KEYMAP_ENTRY_ARRAY
 
emacs_°™d¨d_keym≠
, 
emacs_mëa_keym≠
, 
emacs_˘lx_keym≠
;

64 
KEYMAP_ENTRY_ARRAY
 
vi_ö£πi⁄_keym≠
, 
vi_movemít_keym≠
;

68 
Keym≠
 
æ_make_b¨e_keym≠
 
PARAMS
(());

71 
Keym≠
 
æ_c›y_keym≠
 
PARAMS
((Keymap));

76 
Keym≠
 
æ_make_keym≠
 
PARAMS
(());

79 
æ_disˇrd_keym≠
 
PARAMS
((
Keym≠
));

85 
Keym≠
 
æ_gë_keym≠_by_«me
 
PARAMS
((const *));

88 
Keym≠
 
æ_gë_keym≠
 
PARAMS
(());

91 
æ_£t_keym≠
 
PARAMS
((
Keym≠
));

93 #ifde‡
__˝lu•lus


	@/usr/include/readline/rlstdc.h

22 #i‡!
deföed
 (
_RL_STDC_H_
)

23 
	#_RL_STDC_H_


	)

31 #i‡!
deföed
 (
PARAMS
)

32 #i‡
deföed
 (
__STDC__
Ë|| deföed (
__GNUC__
Ë|| deföed (
__˝lu•lus
)

33 
	#PARAMS
(
¥Ÿos
Ë
	)
protos

35 
	#PARAMS
(
¥Ÿos
Ë()

	)

39 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 2

40 
	#__æ_©åibuã__
(
x
Ë
	`__©åibuã__
(x)

	)

42 
	#__æ_©åibuã__
(
x
)

	)

47 #i‡
deföed
 (
__STDC__
Ë&& deföed (
HAVE_STDARG_H
)

48 
	#PREFER_STDARG


	)

49 
	#USE_VARARGS


	)

51 #i‡
deföed
 (
HAVE_VARARGS_H
)

52 
	#PREFER_VARARGS


	)

53 
	#USE_VARARGS


	)

	@/usr/include/readline/rltypedefs.h

22 #i‚de‡
_RL_TYPEDEFS_H_


23 
	#_RL_TYPEDEFS_H_


	)

25 #ifde‡
__˝lu•lus


31 #i‡!
deföed
 (
_RL_FUNCTION_TYPEDEF
)

32 
	#_RL_FUNCTION_TYPEDEF


	)

35 
	tæ_comm™d_func_t
 
	tPARAMS
((, ));

38 *
	tæ_com≥¡ry_func_t
 
	tPARAMS
((const *, ));

39 **
	tæ_com∂ëi⁄_func_t
 
	tPARAMS
((const *, , ));

41 *
	tæ_quŸe_func_t
 
	tPARAMS
((*, , *));

42 *
	tæ_dequŸe_func_t
 
	tPARAMS
((*, ));

44 
	tæ_compign‹e_func_t
 
	tPARAMS
((**));

46 
	tæ_compdi•_func_t
 
	tPARAMS
((**, , ));

49 
	tæ_hook_func_t
 
	tPARAMS
(());

52 
	tæ_gëc_func_t
 
	tPARAMS
((
	tFILE
 *));

57 
	tæ_löebuf_func_t
 
	tPARAMS
((*, ));

60 
	tæ_ötfunc_t
 
	tPARAMS
(());

61 
	#æ_ivoidfunc_t
 
æ_hook_func_t


	)

62 
	tæ_i˝func_t
 
	tPARAMS
((*));

63 
	tæ_i˝pfunc_t
 
	tPARAMS
((**));

65 
	tæ_voidfunc_t
 
	tPARAMS
(());

66 
	tæ_vötfunc_t
 
	tPARAMS
(());

67 
	tæ_v˝func_t
 
	tPARAMS
((*));

68 
	tæ_v˝pfunc_t
 
	tPARAMS
((**));

70 *
	tæ_˝vfunc_t
 
	tPARAMS
(());

71 *
	tæ_˝ifunc_t
 
	tPARAMS
(());

72 *
	tæ_˝˝func_t
 
	tPARAMS
((*));

73 *
	tæ_˝˝pfunc_t
 
	tPARAMS
((**));

77 #ifde‡
__˝lu•lus


	@/usr/include/readline/tilde.h

23 #i‡!
deföed
 (
_TILDE_H_
)

24 
	#_TILDE_H_


	)

26 #ifde‡
__˝lu•lus


34 #i‡!
deföed
 (
PARAMS
)

35 #i‡
deföed
 (
__STDC__
Ë|| deföed (
__GNUC__
Ë|| deföed (
__˝lu•lus
)

36 
	#PARAMS
(
¥Ÿos
Ë
	)
protos

38 
	#PARAMS
(
¥Ÿos
Ë()

	)

42 *
	ttûde_hook_func_t
 
	tPARAMS
((*));

48 
tûde_hook_func_t
 *
tûde_ex∑nsi⁄_¥ìx∑nsi⁄_hook
;

54 
tûde_hook_func_t
 *
tûde_ex∑nsi⁄_Áûuª_hook
;

59 **
tûde_addôi⁄Æ_¥efixes
;

64 **
tûde_addôi⁄Æ_suffixes
;

67 *
tûde_ex∑nd
 
PARAMS
((const *));

71 *
tûde_ex∑nd_w‹d
 
PARAMS
((const *));

74 *
tûde_föd_w‹d
 
PARAMS
((const *, , *));

76 #ifde‡
__˝lu•lus


	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 020200000

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

124 #ifde‡
__USE_XOPEN2K8


125 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

126 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

127 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

130 #ifde‡
__USE_GNU


131 
	#O_DIRECT
 
__O_DIRECT


	)

132 
	#O_NOATIME
 
__O_NOATIME


	)

133 
	#O_PATH
 
__O_PATH


	)

134 
	#O_TMPFILE
 
__O_TMPFILE


	)

140 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


141 
	#O_DSYNC
 
__O_DSYNC


	)

142 #i‡
deföed
 
__O_RSYNC


143 
	#O_RSYNC
 
__O_RSYNC


	)

145 
	#O_RSYNC
 
O_SYNC


	)

150 
	#F_DUPFD
 0

	)

151 
	#F_GETFD
 1

	)

152 
	#F_SETFD
 2

	)

153 
	#F_GETFL
 3

	)

154 
	#F_SETFL
 4

	)

156 #i‚de‡
__F_SETOWN


157 
	#__F_SETOWN
 8

	)

158 
	#__F_GETOWN
 9

	)

161 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


162 
	#F_SETOWN
 
__F_SETOWN


	)

163 
	#F_GETOWN
 
__F_GETOWN


	)

166 #i‚de‡
__F_SETSIG


167 
	#__F_SETSIG
 10

	)

168 
	#__F_GETSIG
 11

	)

170 #i‚de‡
__F_SETOWN_EX


171 
	#__F_SETOWN_EX
 15

	)

172 
	#__F_GETOWN_EX
 16

	)

175 #ifde‡
__USE_GNU


176 
	#F_SETSIG
 
__F_SETSIG


	)

177 
	#F_GETSIG
 
__F_GETSIG


	)

178 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

179 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

182 #ifde‡
__USE_GNU


183 
	#F_SETLEASE
 1024

	)

184 
	#F_GETLEASE
 1025

	)

185 
	#F_NOTIFY
 1026

	)

186 
	#F_SETPIPE_SZ
 1031

	)

187 
	#F_GETPIPE_SZ
 1032

	)

189 #ifde‡
__USE_XOPEN2K8


190 
	#F_DUPFD_CLOEXEC
 1030

	)

195 
	#FD_CLOEXEC
 1

	)

197 #i‚de‡
F_RDLCK


199 
	#F_RDLCK
 0

	)

200 
	#F_WRLCK
 1

	)

201 
	#F_UNLCK
 2

	)

206 #i‚de‡
F_EXLCK


207 
	#F_EXLCK
 4

	)

208 
	#F_SHLCK
 8

	)

211 #ifde‡
__USE_BSD


213 
	#LOCK_SH
 1

	)

214 
	#LOCK_EX
 2

	)

215 
	#LOCK_NB
 4

	)

217 
	#LOCK_UN
 8

	)

220 #ifde‡
__USE_GNU


221 
	#LOCK_MAND
 32

	)

222 
	#LOCK_READ
 64

	)

223 
	#LOCK_WRITE
 128

	)

224 
	#LOCK_RW
 192

	)

227 #ifde‡
__USE_GNU


229 
	#DN_ACCESS
 0x00000001

	)

230 
	#DN_MODIFY
 0x00000002

	)

231 
	#DN_CREATE
 0x00000004

	)

232 
	#DN_DELETE
 0x00000008

	)

233 
	#DN_RENAME
 0x00000010

	)

234 
	#DN_ATTRIB
 0x00000020

	)

235 
	#DN_MULTISHOT
 0x80000000

	)

239 #ifde‡
__USE_GNU


241 
	e__pid_ty≥


243 
	mF_OWNER_TID
 = 0,

244 
	mF_OWNER_PID
,

245 
	mF_OWNER_PGRP
,

246 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


250 
	sf_ow√r_ex


252 
__pid_ty≥
 
	mty≥
;

253 
__pid_t
 
	mpid
;

259 #ifdef 
__USE_BSD


260 
	#FAPPEND
 
O_APPEND


	)

261 
	#FFSYNC
 
O_FSYNC


	)

262 
	#FASYNC
 
O_ASYNC


	)

263 
	#FNONBLOCK
 
O_NONBLOCK


	)

264 
	#FNDELAY
 
O_NDELAY


	)

267 #i‚de‡
__POSIX_FADV_DONTNEED


268 
	#__POSIX_FADV_DONTNEED
 4

	)

269 
	#__POSIX_FADV_NOREUSE
 5

	)

272 #ifde‡
__USE_XOPEN2K


273 
	#POSIX_FADV_NORMAL
 0

	)

274 
	#POSIX_FADV_RANDOM
 1

	)

275 
	#POSIX_FADV_SEQUENTIAL
 2

	)

276 
	#POSIX_FADV_WILLNEED
 3

	)

277 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

278 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

282 #ifde‡
__USE_GNU


284 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

287 
	#SYNC_FILE_RANGE_WRITE
 2

	)

290 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

295 
	#SPLICE_F_MOVE
 1

	)

296 
	#SPLICE_F_NONBLOCK
 2

	)

299 
	#SPLICE_F_MORE
 4

	)

300 
	#SPLICE_F_GIFT
 8

	)

304 
	#FALLOC_FL_KEEP_SIZE
 1

	)

307 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

311 
	sfûe_h™dÀ


313 
	mh™dÀ_byãs
;

314 
	mh™dÀ_ty≥
;

316 
	mf_h™dÀ
[0];

320 
	#MAX_HANDLE_SZ
 128

	)

324 #ifde‡
__USE_ATFILE


325 
	#AT_FDCWD
 -100

	)

328 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

329 
	#AT_REMOVEDIR
 0x200

	)

331 
	#AT_SYMLINK_FOLLOW
 0x400

	)

332 #ifde‡
__USE_GNU


333 
	#AT_NO_AUTOMOUNT
 0x800

	)

335 
	#AT_EMPTY_PATH
 0x1000

	)

337 
	#AT_EACCESS
 0x200

	)

341 
	g__BEGIN_DECLS


343 #ifde‡
__USE_GNU


346 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

347 
__THROW
;

354 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

355 
__Êags
);

362 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

363 
size_t
 
__cou¡
, 
__Êags
);

369 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

370 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

371 
__Êags
);

377 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

378 
__Êags
);

384 #i‚de‡
__USE_FILE_OFFSET64


385 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

387 #ifde‡
__REDIRECT


388 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

389 
__off64_t
 
__Àn
),

390 
ÁŒoˇã64
);

392 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

395 #ifde‡
__USE_LARGEFILE64


396 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

397 
__off64_t
 
__Àn
);

402 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

403 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

404 
__Êags
Ë
__THROW
;

410 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

411 
__Êags
);

415 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/mman-linux.h

19 #i‚de‡
_SYS_MMAN_H


32 
	#PROT_READ
 0x1

	)

33 
	#PROT_WRITE
 0x2

	)

34 
	#PROT_EXEC
 0x4

	)

35 
	#PROT_NONE
 0x0

	)

36 
	#PROT_GROWSDOWN
 0x01000000

	)

38 
	#PROT_GROWSUP
 0x02000000

	)

42 
	#MAP_SHARED
 0x01

	)

43 
	#MAP_PRIVATE
 0x02

	)

44 #ifde‡
__USE_MISC


45 
	#MAP_TYPE
 0x0‡

	)

49 
	#MAP_FIXED
 0x10

	)

50 #ifde‡
__USE_MISC


51 
	#MAP_FILE
 0

	)

52 #ifde‡
__MAP_ANONYMOUS


53 
	#MAP_ANONYMOUS
 
__MAP_ANONYMOUS


	)

55 
	#MAP_ANONYMOUS
 0x20

	)

57 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

59 
	#MAP_HUGE_SHIFT
 26

	)

60 
	#MAP_HUGE_MASK
 0x3f

	)

64 
	#MS_ASYNC
 1

	)

65 
	#MS_SYNC
 4

	)

66 
	#MS_INVALIDATE
 2

	)

69 #ifde‡
__USE_GNU


70 
	#MREMAP_MAYMOVE
 1

	)

71 
	#MREMAP_FIXED
 2

	)

75 #ifde‡
__USE_BSD


76 
	#MADV_NORMAL
 0

	)

77 
	#MADV_RANDOM
 1

	)

78 
	#MADV_SEQUENTIAL
 2

	)

79 
	#MADV_WILLNEED
 3

	)

80 
	#MADV_DONTNEED
 4

	)

81 
	#MADV_REMOVE
 9

	)

82 
	#MADV_DONTFORK
 10

	)

83 
	#MADV_DOFORK
 11

	)

84 
	#MADV_MERGEABLE
 12

	)

85 
	#MADV_UNMERGEABLE
 13

	)

86 
	#MADV_HUGEPAGE
 14

	)

87 
	#MADV_NOHUGEPAGE
 15

	)

88 
	#MADV_DONTDUMP
 16

	)

90 
	#MADV_DODUMP
 17

	)

91 
	#MADV_HWPOISON
 100

	)

95 #ifde‡
__USE_XOPEN2K


96 
	#POSIX_MADV_NORMAL
 0

	)

97 
	#POSIX_MADV_RANDOM
 1

	)

98 
	#POSIX_MADV_SEQUENTIAL
 2

	)

99 
	#POSIX_MADV_WILLNEED
 3

	)

100 
	#POSIX_MADV_DONTNEED
 4

	)

104 #i‚de‡
MCL_CURRENT


105 
	#MCL_CURRENT
 1

	)

106 
	#MCL_FUTURE
 2

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

23 
	~<lowÀvñlock.h
>

27 
	#_IO_lock_öex≥nsive
 1

	)

29 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

31 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

33 
	#_IO_lock_öô
(
_«me
) \

34 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

36 
	#_IO_lock_föi
(
_«me
) \

37 ((Ë0)

	)

39 
	#_IO_lock_lock
(
_«me
) \

41 *
__£lf
 = 
THREAD_SELF
; \

42 i‡((
_«me
).
ow√r
 !
__£lf
) \

44 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

45 (
_«me
).
ow√r
 = 
__£lf
; \

47 ++(
_«me
).
˙t
; \

48 } 0)

	)

50 
	#_IO_lock_åylock
(
_«me
) \

52 
__ªsu…
 = 0; \

53 *
__£lf
 = 
THREAD_SELF
; \

54 i‡((
_«me
).
ow√r
 !
__£lf
) \

56 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

58 (
_«me
).
ow√r
 = 
__£lf
; \

59 (
_«me
).
˙t
 = 1; \

62 
__ªsu…
 = 
EBUSY
; \

65 ++(
_«me
).
˙t
; \

66 
__ªsu…
; \

67 })

	)

69 
	#_IO_lock_u∆ock
(
_«me
) \

71 i‡(--(
_«me
).
˙t
 == 0) \

73 (
_«me
).
ow√r
 = 
NULL
; \

74 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

76 } 0)

	)

80 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

81 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

82 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

83 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

84 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

85 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

87 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


89 #ifde‡
__EXCEPTIONS


90 
	#_IO_acquúe_lock
(
_Â
) \

92 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

93 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

94 (
_Â
); \

95 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

96 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

98 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

99 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

100 (
_Â
); \

101 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

103 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

104 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

106 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/readline/chardefs.h

22 #i‚de‡
_CHARDEFS_H_


23 
	#_CHARDEFS_H_


	)

25 
	~<˘y≥.h
>

27 
	~<°rög.h
>

29 #i‚de‡
whôe•a˚


30 
	#whôe•a˚
(
c
Ë(((cË=' 'Ë|| ((cË='\t'))

	)

33 #ifde‡
CTRL


34 #unde‡
CTRL


36 #ifde‡
UNCTRL


37 #unde‡
UNCTRL


41 
	#c⁄åﬁ_ch¨a˘î_thªshﬁd
 0x020

	)

42 
	#c⁄åﬁ_ch¨a˘î_mask
 0x1‡

	)

43 
	#mëa_ch¨a˘î_thªshﬁd
 0x07‡

	)

44 
	#c⁄åﬁ_ch¨a˘î_bô
 0x40

	)

45 
	#mëa_ch¨a˘î_bô
 0x080

	)

46 
	#œrge°_ch¨
 255

	)

48 
	#CTRL_CHAR
(
c
Ë((cË< 
c⁄åﬁ_ch¨a˘î_thªshﬁd
 && (((cË& 0x80Ë=0))

	)

49 
	#META_CHAR
(
c
Ë((cË> 
mëa_ch¨a˘î_thªshﬁd
 && (cË<
œrge°_ch¨
)

	)

51 
	#CTRL
(
c
Ë((cË& 
c⁄åﬁ_ch¨a˘î_mask
)

	)

52 
	#META
(
c
Ë((cË| 
mëa_ch¨a˘î_bô
)

	)

54 
	#UNMETA
(
c
Ë((cË& (~
mëa_ch¨a˘î_bô
))

	)

55 
	#UNCTRL
(
c
Ë
	`_æ_to_uµî
(((c)|
c⁄åﬁ_ch¨a˘î_bô
))

	)

57 #i‡
deföed
 
STDC_HEADERS
 || (!deföed (
ißscii
Ë&& !deföed (
HAVE_ISASCII
))

58 
	#IN_CTYPE_DOMAIN
(
c
Ë1

	)

60 
	#IN_CTYPE_DOMAIN
(
c
Ë
	`ißscii
(c)

	)

63 #i‡!
deföed
 (
isxdigô
Ë&& !deföed (
HAVE_ISXDIGIT
Ë&& !deföed (
__˝lu•lus
)

64 
	#isxdigô
(
c
Ë(
	`isdigô
((c)Ë|| ((cË>'a' && (cË<'f'Ë|| ((cË>'A' && (cË<'F'))

	)

67 #i‡
deföed
 (
CTYPE_NON_ASCII
)

68 
	#NON_NEGATIVE
(
c
Ë1

	)

70 
	#NON_NEGATIVE
(
c
Ë(()(cË=(c))

	)

74 #unde‡
ISPRINT


78 
	#ISALNUM
(
c
Ë(
	`IN_CTYPE_DOMAIN
 (cË&& 
	`iß um
 (c))

	)

79 
	#ISALPHA
(
c
Ë(
	`IN_CTYPE_DOMAIN
 (cË&& 
	`ißÕha
 (c))

	)

80 
	#ISDIGIT
(
c
Ë(
	`IN_CTYPE_DOMAIN
 (cË&& 
	`isdigô
 (c))

	)

81 
	#ISLOWER
(
c
Ë(
	`IN_CTYPE_DOMAIN
 (cË&& 
	`i¶owî
 (c))

	)

82 
	#ISPRINT
(
c
Ë(
	`IN_CTYPE_DOMAIN
 (cË&& 
	`i•röt
 (c))

	)

83 
	#ISUPPER
(
c
Ë(
	`IN_CTYPE_DOMAIN
 (cË&& 
	`isuµî
 (c))

	)

84 
	#ISXDIGIT
(
c
Ë(
	`IN_CTYPE_DOMAIN
 (cË&& 
	`isxdigô
 (c))

	)

86 
	#_æ_lowîˇ£_p
(
c
Ë(
	`NON_NEGATIVE
(cË&& 
	`ISLOWER
(c))

	)

87 
	#_æ_uµîˇ£_p
(
c
Ë(
	`NON_NEGATIVE
(cË&& 
	`ISUPPER
(c))

	)

88 
	#_æ_digô_p
(
c
Ë((cË>'0' && (cË<'9')

	)

90 
	#_æ_puª_Æphabëic
(
c
Ë(
	`NON_NEGATIVE
(cË&& 
	`ISALPHA
(c))

	)

91 
	#ALPHABETIC
(
c
Ë(
	`NON_NEGATIVE
(cË&& 
	`ISALNUM
(c))

	)

93 #i‚de‡
_æ_to_uµî


94 
	#_æ_to_uµî
(
c
Ë(
	`_æ_lowîˇ£_p
(cË? 
	`touµî
(()cË: (c))

	)

95 
	#_æ_to_lowî
(
c
Ë(
	`_æ_uµîˇ£_p
(cË? 
	`tﬁowî
(()cË: (c))

	)

98 #i‚de‡
_æ_digô_vÆue


99 
	#_æ_digô_vÆue
(
x
Ë((xË- '0')

	)

102 #i‚de‡
_æ_isidít


103 
	#_æ_isidít
(
c
Ë(
	`ISALNUM
(cË|| (cË='_')

	)

106 #i‚de‡
ISOCTAL


107 
	#ISOCTAL
(
c
Ë((cË>'0' && (cË<'7')

	)

109 
	#OCTVALUE
(
c
Ë((cË- '0')

	)

111 
	#HEXVALUE
(
c
) \

112 (((
c
) >= 'a' && (c) <= 'f') \

113 ? (
c
)-'a'+10 \

114 : (
c
Ë>'A' && (cË<'F' ? (c)-'A'+10 : (c)-'0')

	)

116 #i‚de‡
NEWLINE


117 
	#NEWLINE
 '\n'

	)

120 #i‚de‡
RETURN


121 
	#RETURN
 
	`CTRL
('M')

	)

124 #i‚de‡
RUBOUT


125 
	#RUBOUT
 0x7f

	)

128 #i‚de‡
TAB


129 
	#TAB
 '\t'

	)

132 #ifde‡
ABORT_CHAR


133 #unde‡
ABORT_CHAR


135 
	#ABORT_CHAR
 
	`CTRL
('G')

	)

137 #ifde‡
PAGE


138 #unde‡
PAGE


140 
	#PAGE
 
	`CTRL
('L')

	)

142 #ifde‡
SPACE


143 #unde‡
SPACE


145 
	#SPACE
 ' '

	)

147 #ifde‡
ESC


148 #unde‡
ESC


150 
	#ESC
 
	`CTRL
('[')

	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

134 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

136 #i‡
__GNUC_PREREQ
 (4,3)

137 
	#__w¨nde˛
(
«me
, 
msg
) \

138 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

139 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

140 
	#__îr‹de˛
(
«me
, 
msg
) \

141 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

143 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

144 
	#__w¨«âr
(
msg
)

	)

145 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

149 #i‡
__GNUC_PREREQ
 (2,97)

151 
	#__Êex¨r
 []

	)

153 #ifde‡
__GNUC__


154 
	#__Êex¨r
 [0]

	)

156 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

157 
	#__Êex¨r
 []

	)

160 
	#__Êex¨r
 [1]

	)

176 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

178 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

179 #ifde‡
__˝lu•lus


180 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

181 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

187 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

188 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

190 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

191 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

204 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

205 
	#__©åibuã__
(
xyz
Ë

	)

211 #i‡
__GNUC_PREREQ
 (2,96)

212 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

214 
	#__©åibuã_mÆloc__


	)

219 #i‡
__GNUC_PREREQ
 (4, 3)

220 
	#__©åibuã_Æloc_size__
(
∑øms
) \

221 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

223 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

229 #i‡
__GNUC_PREREQ
 (2,96)

230 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

232 
	#__©åibuã_puª__


	)

236 #i‡
__GNUC_PREREQ
 (2,5)

237 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

239 
	#__©åibuã_c⁄°__


	)

245 #i‡
__GNUC_PREREQ
 (3,1)

246 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

247 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

249 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

250 
	#__©åibuã_noölöe__


	)

254 #i‡
__GNUC_PREREQ
 (3,2)

255 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

257 
	#__©åibuã_dïªˇãd__


	)

266 #i‡
__GNUC_PREREQ
 (2,8)

267 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

269 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

276 #i‡
__GNUC_PREREQ
 (2,97)

277 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

278 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

280 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

285 #i‡
__GNUC_PREREQ
 (3,3)

286 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

288 
	#__n⁄nuŒ
(
∑øms
)

	)

293 #i‡
__GNUC_PREREQ
 (3,4)

294 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

295 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

296 #i‡
__USE_FORTIFY_LEVEL
 > 0

297 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

300 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

302 #i‚de‡
__wur


303 
	#__wur


	)

307 #i‡
__GNUC_PREREQ
 (3,2)

308 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

310 
	#__Æways_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

318 
	#__©åibuã_¨tificül__


	)

321 #ifde‡
__GNUC__


326 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__GNUC_GNU_INLINE__


327 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

328 
	#__exã∫_Æways_ölöe
 \

329 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

331 
	#__exã∫_ölöe
 
__ölöe


	)

332 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

335 
	#__exã∫_ölöe


	)

336 
	#__exã∫_Æways_ölöe


	)

341 #i‡
__GNUC_PREREQ
 (4,3)

342 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

343 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

350 #i‡!
__GNUC_PREREQ
 (2,8)

351 
	#__exãnsi⁄__


	)

355 #i‡!
__GNUC_PREREQ
 (2,92)

356 
	#__ª°ri˘


	)

362 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


363 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

365 #ifde‡
__GNUC__


366 
	#__ª°ri˘_¨r


	)

368 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

369 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

372 
	#__ª°ri˘_¨r


	)

377 #i‡
__GNUC__
 >= 3

378 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

379 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

381 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

382 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

385 
	~<bôs/w‹dsize.h
>

387 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


388 
	#__LDBL_COMPAT
 1

	)

389 #ifde‡
__REDIRECT


390 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

391 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

392 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

393 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

394 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

395 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

396 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

397 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

398 
	#__LDBL_REDIR_DECL
(
«me
) \

399 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

400 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

401 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

402 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

403 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

406 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


407 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

408 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

409 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

410 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

411 
	#__LDBL_REDIR_DECL
(
«me
)

	)

412 #ifde‡
__REDIRECT


413 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

414 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

415 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

77 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, Ë

	)

78 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, Ë

	)

79 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, Ë

	)

81 
	#FIONCLEX
 0x5450

	)

82 
	#FIOCLEX
 0x5451

	)

83 
	#FIOASYNC
 0x5452

	)

84 
	#TIOCSERCONFIG
 0x5453

	)

85 
	#TIOCSERGWILD
 0x5454

	)

86 
	#TIOCSERSWILD
 0x5455

	)

87 
	#TIOCGLCKTRMIOS
 0x5456

	)

88 
	#TIOCSLCKTRMIOS
 0x5457

	)

89 
	#TIOCSERGSTRUCT
 0x5458

	)

90 
	#TIOCSERGETLSR
 0x5459

	)

91 
	#TIOCSERGETMULTI
 0x545A

	)

92 
	#TIOCSERSETMULTI
 0x545B

	)

94 
	#TIOCMIWAIT
 0x545C

	)

95 
	#TIOCGICOUNT
 0x545D

	)

101 #i‚de‡
FIOQSIZE


102 
	#FIOQSIZE
 0x5460

	)

106 
	#TIOCPKT_DATA
 0

	)

107 
	#TIOCPKT_FLUSHREAD
 1

	)

108 
	#TIOCPKT_FLUSHWRITE
 2

	)

109 
	#TIOCPKT_STOP
 4

	)

110 
	#TIOCPKT_START
 8

	)

111 
	#TIOCPKT_NOSTOP
 16

	)

112 
	#TIOCPKT_DOSTOP
 32

	)

113 
	#TIOCPKT_IOCTL
 64

	)

115 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/libc-lock.h

19 #i‚de‡
_BITS_LIBC_LOCK_H


20 
	#_BITS_LIBC_LOCK_H
 1

	)

22 
	~<±hªad.h
>

23 
	#__√ed_NULL


	)

24 
	~<°ddef.h
>

27 #ifde‡
_LIBC


28 
	~<lowÀvñlock.h
>

29 
	~<és.h
>

30 
	~<±hªad-fun˘i⁄s.h
>

31 
	~<î∫o.h
>

32 
	~<gnu/›ti⁄-groups.h
>

36 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


37 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


38 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

40 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

43 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

53 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

54 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

59 #i‡
LLL_LOCK_INITIALIZER
 == 0

60 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

61 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

63 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

64 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

66 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

67 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

69 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

70 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

71 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

72 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

76 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

77 
	#__libc_lock_öô_ªcursive
(
NAME
) \

78 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

80 
	#__libc_lock_öô_ªcursive
(
NAME
) \

82 i‡(
__±hªad_muãx_öô
 !
NULL
) \

84 
±hªad_muãx©å_t
 
__©å
; \

85 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

86 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

87 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

88 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

90 } 0)

	)

94 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

95 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

97 
	#__libc_lock_föi_ªcursive
(
NAME
) \

98 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
).
muãx
), 0)

	)

102 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

103 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

107 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

108 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

110 #i‡
__OPTION_EGLIBC_BIG_MACROS


111 
	#__libc_lock_lock_ªcursive
(
NAME
) \

113 *
£lf
 = 
THREAD_SELF
; \

114 i‡((
NAME
).
ow√r
 !
£lf
) \

116 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

117 (
NAME
).
ow√r
 = 
£lf
; \

119 ++(
NAME
).
˙t
; \

120 } 0)

	)

122 
	#__libc_lock_lock_ªcursive
(
NAME
) \

123 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

126 
	#__libc_lock_lock_ªcursive
(
NAME
) \

127 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

131 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

132 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

136 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

137 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

139 #i‡
__OPTION_EGLIBC_BIG_MACROS


140 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

142 
ªsu…
 = 0; \

143 *
£lf
 = 
THREAD_SELF
; \

144 i‡((
NAME
).
ow√r
 !
£lf
) \

146 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

148 (
NAME
).
ow√r
 = 
£lf
; \

149 (
NAME
).
˙t
 = 1; \

152 
ªsu…
 = 
EBUSY
; \

155 ++(
NAME
).
˙t
; \

156 
ªsu…
; \

157 })

	)

159 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

160 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

163 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

164 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

168 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

169 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

173 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

174 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

176 #i‡
__OPTION_EGLIBC_BIG_MACROS


178 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

180 i‡(--(
NAME
).
˙t
 == 0) \

182 (
NAME
).
ow√r
 = 
NULL
; \

183 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

185 } 0)

	)

187 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

188 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

191 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

192 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

199 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

200 (*
routöe
Ë(*), *
¨g
);

201 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

202 
execuã
);

205 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

206 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

207 
_avaû
; \

208 i‡(
DOIT
) { \

209 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

210 i‡(
_avaû
) { \

211 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

212 
ARG
)); \

214 
_buf„r
.
__routöe
 = (
FCT
); \

215 
_buf„r
.
__¨g
 = (
ARG
); \

218 
_avaû
 = 0; \

219 }

	)

222 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

223 i‡(
_avaû
) { \

224 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

225 } i‡(
DOIT
) \

226 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

227 
	}

	)
}

232 #ifde‡
_LIBC


233 
	~"libc-lockP.h
"

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_¸óã_moduÀ


	)

13 
	#__°ub_Áâach


	)

14 
	#__°ub_fchÊags


	)

15 
	#__°ub_fdëach


	)

16 
	#__°ub_gë_kî√l_syms


	)

17 
	#__°ub_gëmsg


	)

18 
	#__°ub_gây


	)

19 
	#__°ub_lchmod


	)

20 
	#__°ub_nfs£rv˘l


	)

21 
	#__°ub_putmsg


	)

22 
	#__°ub_quîy_moduÀ


	)

23 
	#__°ub_ªvoke


	)

24 
	#__°ub_£éogö


	)

25 
	#__°ub_sigªtu∫


	)

26 
	#__°ub_s°k


	)

27 
	#__°ub_°ty


	)

28 
	#__°ub_u£lib


	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

4 #i‚de‡
HZ


5 
	#HZ
 100

	)

8 #i‚de‡
EXEC_PAGESIZE


9 
	#EXEC_PAGESIZE
 4096

	)

12 #i‚de‡
NOGROUP


13 
	#NOGROUP
 (-1)

	)

16 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

3 #ñi‡
deföed
(
__ILP32__
)

4 
	~<asm/posix_ty≥s_x32.h
>

6 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CRYPT
 1

	)

20 
	#__OPTION_EGLIBC_CRYPT_UFC
 1

	)

21 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

22 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

23 
	#__OPTION_EGLIBC_ENVZ
 1

	)

24 
	#__OPTION_EGLIBC_FCVT
 1

	)

25 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

26 
	#__OPTION_EGLIBC_FSTAB
 1

	)

27 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

28 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

29 
	#__OPTION_EGLIBC_IDN
 1

	)

30 
	#__OPTION_EGLIBC_INET
 1

	)

31 
	#__OPTION_EGLIBC_INET_ANL
 1

	)

32 
	#__OPTION_EGLIBC_LIBM
 1

	)

33 
	#__OPTION_EGLIBC_LOCALES
 1

	)

34 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

35 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

36 
	#__OPTION_EGLIBC_NIS
 1

	)

37 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

38 
	#__OPTION_EGLIBC_RCMD
 1

	)

39 
	#__OPTION_EGLIBC_RTLD_DEBUG
 1

	)

40 
	#__OPTION_EGLIBC_SPAWN
 1

	)

41 
	#__OPTION_EGLIBC_STREAMS
 1

	)

42 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

43 
	#__OPTION_EGLIBC_UTMP
 1

	)

44 
	#__OPTION_EGLIBC_UTMPX
 1

	)

45 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

46 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

47 
	#__OPTION_POSIX_REGEXP
 1

	)

48 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

49 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/stddef.h

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_mode_t
;

11 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

13 
	t__kî√l_ùc_pid_t
;

14 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

20 
	t__kî√l_ﬁd_dev_t
;

21 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

23 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_ﬁd_uid_t
;

11 
	t__kî√l_ﬁd_gid_t
;

12 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

14 
	t__kî√l_ﬁd_dev_t
;

15 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

17 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


2 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

13 
	t__kî√l_l⁄g_t
;

14 
	t__kî√l_ul⁄g_t
;

15 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

17 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/posix_types.h

1 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__kî√l_l⁄g_t


14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

18 #i‚de‡
__kî√l_öo_t


19 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

22 #i‚de‡
__kî√l_mode_t


23 
	t__kî√l_mode_t
;

26 #i‚de‡
__kî√l_pid_t


27 
	t__kî√l_pid_t
;

30 #i‚de‡
__kî√l_ùc_pid_t


31 
	t__kî√l_ùc_pid_t
;

34 #i‚de‡
__kî√l_uid_t


35 
	t__kî√l_uid_t
;

36 
	t__kî√l_gid_t
;

39 #i‚de‡
__kî√l_su£c⁄ds_t


40 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

43 #i‚de‡
__kî√l_daddr_t


44 
	t__kî√l_daddr_t
;

47 #i‚de‡
__kî√l_uid32_t


48 
	t__kî√l_uid32_t
;

49 
	t__kî√l_gid32_t
;

52 #i‚de‡
__kî√l_ﬁd_uid_t


53 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

54 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

57 #i‚de‡
__kî√l_ﬁd_dev_t


58 
	t__kî√l_ﬁd_dev_t
;

65 #i‚de‡
__kî√l_size_t


66 #i‡
__BITS_PER_LONG
 != 64

67 
	t__kî√l_size_t
;

68 
	t__kî√l_ssize_t
;

69 
	t__kî√l_±rdiff_t
;

71 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

72 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

77 #i‚de‡
__kî√l_fsid_t


79 
	mvÆ
[2];

80 } 
	t__kî√l_fsid_t
;

86 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

87 
	t__kî√l_loff_t
;

88 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

90 
	t__kî√l_timî_t
;

91 
	t__kî√l_˛ockid_t
;

92 * 
	t__kî√l_ˇddr_t
;

93 
	t__kî√l_uid16_t
;

94 
	t__kî√l_gid16_t
;

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@
1
.
1
/usr/include
309
6034
alter.c
analyze.c
attach.c
auth.c
backup.c
bitvec.c
btmutex.c
btree.c
btree.h
btreeInt.h
build.c
callback.c
complete.c
ctime.c
date.c
dbstat.c
delete.c
expr.c
fault.c
fkey.c
func.c
global.c
hash.c
hash.h
hwtime.h
insert.c
legacy.c
loadext.c
main.c
malloc.c
mem0.c
mem1.c
mem2.c
mem3.c
mem5.c
memjournal.c
msvc.h
mutex.c
mutex.h
mutex_noop.c
mutex_unix.c
mutex_w32.c
notify.c
os.c
os.h
os_common.h
os_setup.h
os_unix.c
os_win.c
os_win.h
pager.c
pager.h
parse.y
pcache.c
pcache.h
pcache1.c
pragma.c
pragma.h
prepare.c
printf.c
random.c
resolve.c
rowset.c
select.c
shell.c
sqlite3ext.h
sqliteInt.h
sqliteLimit.h
status.c
table.c
tclsqlite.c
test1.c
test2.c
test3.c
test4.c
test5.c
test6.c
test7.c
test8.c
test9.c
test_async.c
test_autoext.c
test_backup.c
test_bestindex.c
test_blob.c
test_btree.c
test_config.c
test_demovfs.c
test_devsym.c
test_fs.c
test_func.c
test_hexio.c
test_init.c
test_intarray.c
test_intarray.h
test_journal.c
test_loadext.c
test_malloc.c
test_multiplex.c
test_multiplex.h
test_mutex.c
test_onefile.c
test_osinst.c
test_pcache.c
test_quota.c
test_quota.h
test_rtree.c
test_schema.c
test_server.c
test_sqllog.c
test_superlock.c
test_syscall.c
test_tclvar.c
test_thread.c
test_vfs.c
test_vfstrace.c
test_windirent.c
test_windirent.h
test_wsd.c
threads.c
tokenize.c
treeview.c
trigger.c
update.c
utf.c
util.c
vacuum.c
vdbe.c
vdbe.h
vdbeInt.h
vdbeapi.c
vdbeaux.c
vdbeblob.c
vdbemem.c
vdbesort.c
vdbetrace.c
vtab.c
vxworks.h
wal.c
wal.h
walker.c
where.c
whereInt.h
wherecode.c
whereexpr.c
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/pthread.h
/usr/include/pwd.h
/usr/include/readline/history.h
/usr/include/readline/readline.h
/usr/include/sched.h
/usr/include/semaphore.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/file.h
/usr/include/sys/ioctl.h
/usr/include/sys/mman.h
/usr/include/sys/mount.h
/usr/include/sys/param.h
/usr/include/sys/resource.h
/usr/include/sys/stat.h
/usr/include/sys/statvfs.h
/usr/include/sys/sysctl.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/utime.h
/usr/include/alloca.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/dlfcn.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/math-finite.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/mman.h
/usr/include/bits/nan.h
/usr/include/bits/param.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/sched.h
/usr/include/bits/semaphore.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stat.h
/usr/include/bits/statvfs.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/sysctl.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/sysctl.h
/usr/include/readline/keymaps.h
/usr/include/readline/rlstdc.h
/usr/include/readline/rltypedefs.h
/usr/include/readline/tilde.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/ioctls.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/mman-linux.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/linux/kernel.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/linux/types.h
/usr/include/readline/chardefs.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm/errno.h
/usr/include/asm/param.h
/usr/include/asm/types.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/libc-lock.h
/usr/include/bits/uio.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/linux/posix_types.h
/usr/include/linux/sysinfo.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/param.h
/usr/include/asm-generic/types.h
/usr/include/asm/posix_types.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/gnu/option-groups.h
/usr/include/linux/ioctl.h
/usr/include/linux/stddef.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm/ioctl.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm/bitsperlong.h
/usr/include/asm-generic/bitsperlong.h
