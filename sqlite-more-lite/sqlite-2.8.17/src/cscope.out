cscope 15 $HOME/SaS/sqlite-more-lite/sqlite-2.8.17/src               0001300532
	@btree.c

52 
	~"sqlôeI¡.h
"

53 
	~"∑gî.h
"

54 
	~"båì.h
"

55 
	~<as£π.h
>

58 
BtOps
 
	gsqlôeBåìOps
;

59 
BtCurs‹Ops
 
	gsqlôeBåìCurs‹Ops
;

68 
	#SWAB16
(
B
,
X
Ë((B)->
√edSwab
? 
	`swab16
((
u16
)XË: ((u16)X))

	)

69 
	#SWAB32
(
B
,
X
Ë((B)->
√edSwab
? 
	`swab32
(XË: (X))

	)

70 
	#SWAB_ADD
(
B
,
X
,
A
) \

71 if((
B
)->
√edSwab
){ 
X
=
	`swab32
(swab32(X)+
A
); }{ X +(A); }

	)

81 #ifde‡
SQLITE_TEST


82 
	gbåì_«tive_byã_‹dî
 = 1;

84 
	#båì_«tive_byã_‹dî
 1

	)

90 
PageO√
 
	tPageO√
;

91 
MemPage
 
	tMemPage
;

92 
PageHdr
 
	tPageHdr
;

93 
Cñl
 
	tCñl
;

94 
CñlHdr
 
	tCñlHdr
;

95 
FªeBlk
 
	tFªeBlk
;

96 
OvîÊowPage
 
	tOvîÊowPage
;

97 
Fªñi°Info
 
	tFªñi°Info
;

106 
	#ROUNDUP
(
X
Ë((X+3Ë& ~3)

	)

112 c⁄° 
	gzMagicHódî
[] =

114 
	#MAGIC_SIZE
 ((
zMagicHódî
))

	)

127 
	#MAGIC
 0xd´37528

	)

143 
	sPageO√
 {

144 
	mzMagic
[
MAGIC_SIZE
];

145 
	miMagic
;

146 
Pgno
 
	m‰ìLi°
;

147 
	mnFªe
;

148 
	maMëa
[
SQLITE_N_BTREE_META
-1];

169 
	sPageHdr
 {

170 
Pgno
 
	mrightChûd
;

171 
u16
 
	mfú°Cñl
;

172 
u16
 
	mfú°Fªe
;

185 
	sCñlHdr
 {

186 
Pgno
 
	mÀ·Chûd
;

187 
u16
 
	mnKey
;

188 
u16
 
	miNext
;

189 
u8
 
	mnKeyHi
;

190 
u8
 
	mnD©aHi
;

191 
u16
 
	mnD©a
;

200 
	#NKEY
(
b
,
h
Ë(
	`SWAB16
(b,h.
nKey
Ë+ h.
nKeyHi
*65536)

	)

201 
	#NDATA
(
b
,
h
Ë(
	`SWAB16
(b,h.
nD©a
Ë+ h.
nD©aHi
*65536)

	)

207 
	#MIN_CELL_SIZE
 ((
CñlHdr
)+4)

	)

213 
	#MX_CELL
 ((
SQLITE_USABLE_SIZE
-(
PageHdr
))/
MIN_CELL_SIZE
)

	)

219 
	#USABLE_SPACE
 (
SQLITE_USABLE_SIZE
 - (
PageHdr
))

	)

228 
	#MX_LOCAL_PAYLOAD
 ((
USABLE_SPACE
/4-((
CñlHdr
)+(
Pgno
)))&~3)

	)

244 
	sCñl
 {

245 
CñlHdr
 
	mh
;

246 
	maPaylﬂd
[
MX_LOCAL_PAYLOAD
];

247 
Pgno
 
	movÊ
;

256 
	sFªeBlk
 {

257 
u16
 
	miSize
;

258 
u16
 
	miNext
;

264 
	#OVERFLOW_SIZE
 (
SQLITE_USABLE_SIZE
-(
Pgno
))

	)

277 
	sOvîÊowPage
 {

278 
Pgno
 
	miNext
;

279 
	maPaylﬂd
[
OVERFLOW_SIZE
];

289 
	sFªñi°Info
 {

290 
	mnFªe
;

291 
Pgno
 
	maFªe
[(
OVERFLOW_SIZE
-())/(Pgno)];

321 
	sMemPage
 {

322 
	uu_∑ge_d©a
 {

323 
	maDisk
[
SQLITE_PAGE_SIZE
];

324 
PageHdr
 
	mhdr
;

325 } 
	mu
;

326 
u8
 
	misInô
;

327 
u8
 
	midxShi·
;

328 
u8
 
	misOvîfuŒ
;

329 
MemPage
 *
	mpP¨ít
;

330 
	midxP¨ít
;

331 
	mnFªe
;

332 
	mnCñl
;

333 
Cñl
 *
	m≠Cñl
[
MX_CELL
+2];

341 
	#EXTRA_SIZE
 ((
MemPage
)-(
u_∑ge_d©a
))

	)

346 
	sBåì
 {

347 
BtOps
 *
	mpOps
;

348 
Pagî
 *
	mpPagî
;

349 
BtCurs‹
 *
	mpCurs‹
;

350 
PageO√
 *
	m∑ge1
;

351 
u8
 
	möTøns
;

352 
u8
 
	möCk±
;

353 
u8
 
	mªadO∆y
;

354 
u8
 
	m√edSwab
;

356 
Båì
 
	tBt
;

363 
	sBtCurs‹
 {

364 
BtCurs‹Ops
 *
	mpOps
;

365 
Båì
 *
	mpBt
;

366 
BtCurs‹
 *
	mpNext
, *
	mpPªv
;

367 
BtCurs‹
 *
	mpSh¨ed
;

368 
Pgno
 
	mpgnoRoŸ
;

369 
MemPage
 *
	mpPage
;

370 
	midx
;

371 
u8
 
	mwrFœg
;

372 
u8
 
	meSkù
;

373 
u8
 
	miM©ch
;

379 
	#SKIP_NONE
 0

	)

380 
	#SKIP_NEXT
 1

	)

381 
	#SKIP_PREV
 2

	)

382 
	#SKIP_INVALID
 3

	)

385 
fûeBåìClo£Curs‹
(
BtCurs‹
 *
pCur
);

390 
u16
 
	$swab16
(
u16
 
x
){

391  ((
x
 & 0xff)<<8) | ((x>>8)&0xff);

392 
	}
}

393 
u32
 
	$swab32
(
u32
 
x
){

394  ((
x
 & 0xff)<<24) | ((x & 0xff00)<<8) |

395 ((
x
>>8) & 0xff00) | ((x>>24)&0xff);

396 
	}
}

405 
	$˚ŒSize
(
Båì
 *
pBt
, 
Cñl
 *
pCñl
){

406 
n
 = 
	`NKEY
(
pBt
, 
pCñl
->
h
Ë+ 
	`NDATA
(pBt,ÖCell->h);

407 if–
n
>
MX_LOCAL_PAYLOAD
 ){

408 
n
 = 
MX_LOCAL_PAYLOAD
 + (
Pgno
);

410 
n
 = 
	`ROUNDUP
(n);

412 
n
 +(
CñlHdr
);

413  
n
;

414 
	}
}

421 
	$de‰agmítPage
(
Båì
 *
pBt
, 
MemPage
 *
pPage
){

422 
pc
, 
i
, 
n
;

423 
FªeBlk
 *
pFBlk
;

424 
√wPage
[
SQLITE_USABLE_SIZE
];

426 
	`as£π
–
	`sqlôïagî_iswrôóbÀ
(
pPage
) );

427 
	`as£π
–
pPage
->
isInô
 );

428 
pc
 = (
PageHdr
);

429 
pPage
->
u
.
hdr
.
fú°Cñl
 = 
	`SWAB16
(
pBt
, 
pc
);

430 
	`mem˝y
(
√wPage
, 
pPage
->
u
.
aDisk
, 
pc
);

431 
i
=0; i<
pPage
->
nCñl
; i++){

432 
Cñl
 *
pCñl
 = 
pPage
->
≠Cñl
[
i
];

436 
	`as£π
–
	`Addr
(
pCñl
Ë> Addr(
pPage
) );

437 
	`as£π
–
	`Addr
(
pCñl
Ë< Addr(
pPage
Ë+ 
SQLITE_USABLE_SIZE
 );

439 
n
 = 
	`˚ŒSize
(
pBt
, 
pCñl
);

440 
pCñl
->
h
.
iNext
 = 
	`SWAB16
(
pBt
, 
pc
 + 
n
);

441 
	`mem˝y
(&
√wPage
[
pc
], 
pCñl
, 
n
);

442 
pPage
->
≠Cñl
[
i
] = (
Cñl
*)&pPage->
u
.
aDisk
[
pc
];

443 
pc
 +
n
;

445 
	`as£π
–
pPage
->
nFªe
==
SQLITE_USABLE_SIZE
-
pc
 );

446 
	`mem˝y
(
pPage
->
u
.
aDisk
, 
√wPage
, 
pc
);

447 if–
pPage
->
nCñl
>0 ){

448 
pPage
->
≠Cñl
[pPage->
nCñl
-1]->
h
.
iNext
 = 0;

450 
pFBlk
 = (
FªeBlk
*)&
pPage
->
u
.
aDisk
[
pc
];

451 
pFBlk
->
iSize
 = 
	`SWAB16
(
pBt
, 
SQLITE_USABLE_SIZE
 - 
pc
);

452 
pFBlk
->
iNext
 = 0;

453 
pPage
->
u
.
hdr
.
fú°Fªe
 = 
	`SWAB16
(
pBt
, 
pc
);

454 
	`mem£t
(&
pFBlk
[1], 0, 
SQLITE_USABLE_SIZE
 - 
pc
 - (
FªeBlk
));

455 
	}
}

470 
	$ÆloˇãS∑˚
(
Båì
 *
pBt
, 
MemPage
 *
pPage
, 
nByã
){

471 
FªeBlk
 *
p
;

472 
u16
 *
pIdx
;

473 
°¨t
;

474 
iSize
;

475 #i‚de‡
NDEBUG


476 
˙t
 = 0;

479 
	`as£π
–
	`sqlôïagî_iswrôóbÀ
(
pPage
) );

480 
	`as£π
–
nByã
==
	`ROUNDUP
(nByte) );

481 
	`as£π
–
pPage
->
isInô
 );

482 if–
pPage
->
nFªe
<
nByã
 ||ÖPage->
isOvîfuŒ
 )  0;

483 
pIdx
 = &
pPage
->
u
.
hdr
.
fú°Fªe
;

484 
p
 = (
FªeBlk
*)&
pPage
->
u
.
aDisk
[
	`SWAB16
(
pBt
, *
pIdx
)];

485  (
iSize
 = 
	`SWAB16
(
pBt
, 
p
->iSize))<
nByã
 ){

486 
	`as£π
–
˙t
++ < 
SQLITE_USABLE_SIZE
/4 );

487 if–
p
->
iNext
==0 ){

488 
	`de‰agmítPage
(
pBt
, 
pPage
);

489 
pIdx
 = &
pPage
->
u
.
hdr
.
fú°Fªe
;

491 
pIdx
 = &
p
->
iNext
;

493 
p
 = (
FªeBlk
*)&
pPage
->
u
.
aDisk
[
	`SWAB16
(
pBt
, *
pIdx
)];

495 if–
iSize
==
nByã
 ){

496 
°¨t
 = 
	`SWAB16
(
pBt
, *
pIdx
);

497 *
pIdx
 = 
p
->
iNext
;

499 
FªeBlk
 *
pNew
;

500 
°¨t
 = 
	`SWAB16
(
pBt
, *
pIdx
);

501 
pNew
 = (
FªeBlk
*)&
pPage
->
u
.
aDisk
[
°¨t
 + 
nByã
];

502 
pNew
->
iNext
 = 
p
->iNext;

503 
pNew
->
iSize
 = 
	`SWAB16
(
pBt
, iSizê- 
nByã
);

504 *
pIdx
 = 
	`SWAB16
(
pBt
, 
°¨t
 + 
nByã
);

506 
pPage
->
nFªe
 -
nByã
;

507  
°¨t
;

508 
	}
}

519 
	$‰ìS∑˚
(
Båì
 *
pBt
, 
MemPage
 *
pPage
, 
°¨t
, 
size
){

520 
íd
 = 
°¨t
 + 
size
;

521 
u16
 *
pIdx
, 
idx
;

522 
FªeBlk
 *
pFBlk
;

523 
FªeBlk
 *
pNew
;

524 
FªeBlk
 *
pNext
;

525 
iSize
;

527 
	`as£π
–
	`sqlôïagî_iswrôóbÀ
(
pPage
) );

528 
	`as£π
–
size
 =
	`ROUNDUP
(size) );

529 
	`as£π
–
°¨t
 =
	`ROUNDUP
(start) );

530 
	`as£π
–
pPage
->
isInô
 );

531 
pIdx
 = &
pPage
->
u
.
hdr
.
fú°Fªe
;

532 
idx
 = 
	`SWAB16
(
pBt
, *
pIdx
);

533  
idx
!=0 && idx<
°¨t
 ){

534 
pFBlk
 = (
FªeBlk
*)&
pPage
->
u
.
aDisk
[
idx
];

535 
iSize
 = 
	`SWAB16
(
pBt
, 
pFBlk
->iSize);

536 if–
idx
 + 
iSize
 =
°¨t
 ){

537 
pFBlk
->
iSize
 = 
	`SWAB16
(
pBt
, iSizê+ 
size
);

538 if–
idx
 + 
iSize
 + 
size
 =
	`SWAB16
(
pBt
, 
pFBlk
->
iNext
) ){

539 
pNext
 = (
FªeBlk
*)&
pPage
->
u
.
aDisk
[
idx
 + 
iSize
 + 
size
];

540 if–
pBt
->
√edSwab
 ){

541 
pFBlk
->
iSize
 = 
	`swab16
((
u16
)swab16(
pNext
->iSize)+iSize+
size
);

543 
pFBlk
->
iSize
 +
pNext
->iSize;

545 
pFBlk
->
iNext
 = 
pNext
->iNext;

547 
pPage
->
nFªe
 +
size
;

550 
pIdx
 = &
pFBlk
->
iNext
;

551 
idx
 = 
	`SWAB16
(
pBt
, *
pIdx
);

553 
pNew
 = (
FªeBlk
*)&
pPage
->
u
.
aDisk
[
°¨t
];

554 if–
idx
 !
íd
 ){

555 
pNew
->
iSize
 = 
	`SWAB16
(
pBt
, 
size
);

556 
pNew
->
iNext
 = 
	`SWAB16
(
pBt
, 
idx
);

558 
pNext
 = (
FªeBlk
*)&
pPage
->
u
.
aDisk
[
idx
];

559 
pNew
->
iSize
 = 
	`SWAB16
(
pBt
, 
size
 + SWAB16’Bt, 
pNext
->iSize));

560 
pNew
->
iNext
 = 
pNext
->iNext;

562 *
pIdx
 = 
	`SWAB16
(
pBt
, 
°¨t
);

563 
pPage
->
nFªe
 +
size
;

564 
	}
}

580 
	$öôPage
(
Bt
 *
pBt
, 
MemPage
 *
pPage
, 
Pgno
 
pgnoThis
, MemPagê*
pP¨ít
){

581 
idx
;

582 
Cñl
 *
pCñl
;

583 
FªeBlk
 *
pFBlk
;

584 
sz
;

585 
‰ìS∑˚
;

587 if–
pPage
->
pP¨ít
 ){

588 
	`as£π
–
pPage
->
pP¨ít
==pParent );

589  
SQLITE_OK
;

591 if–
pP¨ít
 ){

592 
pPage
->
pP¨ít
 =ÖParent;

593 
	`sqlôïagî_ªf
(
pP¨ít
);

595 if–
pPage
->
isInô
 )  
SQLITE_OK
;

596 
pPage
->
isInô
 = 1;

597 
pPage
->
nCñl
 = 0;

598 
‰ìS∑˚
 = 
USABLE_SPACE
;

599 
idx
 = 
	`SWAB16
(
pBt
, 
pPage
->
u
.
hdr
.
fú°Cñl
);

600  
idx
!=0 ){

601 if–
idx
>
SQLITE_USABLE_SIZE
-
MIN_CELL_SIZE
 ) 
∑ge_f‹m©_îr‹
;

602 if–
idx
<(
PageHdr
ËË
∑ge_f‹m©_îr‹
;

603 if–
idx
!=
	`ROUNDUP
(idxËË
∑ge_f‹m©_îr‹
;

604 
pCñl
 = (
Cñl
*)&
pPage
->
u
.
aDisk
[
idx
];

605 
sz
 = 
	`˚ŒSize
(
pBt
, 
pCñl
);

606 if–
idx
+
sz
 > 
SQLITE_USABLE_SIZE
 ) 
∑ge_f‹m©_îr‹
;

607 
‰ìS∑˚
 -
sz
;

608 
pPage
->
≠Cñl
[pPage->
nCñl
++] = 
pCñl
;

609 
idx
 = 
	`SWAB16
(
pBt
, 
pCñl
->
h
.
iNext
);

611 
pPage
->
nFªe
 = 0;

612 
idx
 = 
	`SWAB16
(
pBt
, 
pPage
->
u
.
hdr
.
fú°Fªe
);

613  
idx
!=0 ){

614 
iNext
;

615 if–
idx
>
SQLITE_USABLE_SIZE
-(
FªeBlk
ËË
∑ge_f‹m©_îr‹
;

616 if–
idx
<(
PageHdr
ËË
∑ge_f‹m©_îr‹
;

617 
pFBlk
 = (
FªeBlk
*)&
pPage
->
u
.
aDisk
[
idx
];

618 
pPage
->
nFªe
 +
	`SWAB16
(
pBt
, 
pFBlk
->
iSize
);

619 
iNext
 = 
	`SWAB16
(
pBt
, 
pFBlk
->iNext);

620 if–
iNext
>0 && iNexà<
idx
 ) 
∑ge_f‹m©_îr‹
;

621 
idx
 = 
iNext
;

623 if–
pPage
->
nCñl
==0 &&ÖPage->
nFªe
==0 ){

626  
SQLITE_OK
;

628 if–
pPage
->
nFªe
!=
‰ìS∑˚
 ) 
∑ge_f‹m©_îr‹
;

629  
SQLITE_OK
;

631 
∑ge_f‹m©_îr‹
:

632  
SQLITE_CORRUPT
;

633 
	}
}

639 
	$zîoPage
(
Båì
 *
pBt
, 
MemPage
 *
pPage
){

640 
PageHdr
 *
pHdr
;

641 
FªeBlk
 *
pFBlk
;

642 
	`as£π
–
	`sqlôïagî_iswrôóbÀ
(
pPage
) );

643 
	`mem£t
(
pPage
, 0, 
SQLITE_USABLE_SIZE
);

644 
pHdr
 = &
pPage
->
u
.
hdr
;

645 
pHdr
->
fú°Cñl
 = 0;

646 
pHdr
->
fú°Fªe
 = 
	`SWAB16
(
pBt
, (*pHdr));

647 
pFBlk
 = (
FªeBlk
*)&
pHdr
[1];

648 
pFBlk
->
iNext
 = 0;

649 
pPage
->
nFªe
 = 
SQLITE_USABLE_SIZE
 - (*
pHdr
);

650 
pFBlk
->
iSize
 = 
	`SWAB16
(
pBt
, 
pPage
->
nFªe
);

651 
pPage
->
nCñl
 = 0;

652 
pPage
->
isOvîfuŒ
 = 0;

653 
	}
}

660 
	$∑geDe°ru˘‹
(*
pD©a
){

661 
MemPage
 *
pPage
 = (MemPage*)
pD©a
;

662 if–
pPage
->
pP¨ít
 ){

663 
MemPage
 *
pP¨ít
 = 
pPage
->pParent;

664 
pPage
->
pP¨ít
 = 0;

665 
	`sqlôïagî_uƒef
(
pP¨ít
);

667 
	}
}

680 
	$sqlôeBåìO≥n
(

681 c⁄° *
zFûíame
,

682 
omôJou∫Æ
,

683 
nCache
,

684 
Båì
 **
µBåì


686 
Båì
 *
pBt
;

687 
rc
;

694 
	`as£π
–(
u32
)==4 );

695 
	`as£π
–(
u16
)==2 );

696 
	`as£π
–(
Pgno
)==4 );

697 
	`as£π
–(
PageHdr
)==8 );

698 
	`as£π
–(
CñlHdr
)==12 );

699 
	`as£π
–(
FªeBlk
)==4 );

700 
	`as£π
–(
OvîÊowPage
)==
SQLITE_USABLE_SIZE
 );

701 
	`as£π
–(
Fªñi°Info
)==
OVERFLOW_SIZE
 );

702 
	`as£π
–(
±r
)==(*) );

703 
	`as£π
–(
u±r
)==(
±r
) );

705 
pBt
 = 
	`sqlôeMÆloc
( (*pBt) );

706 if–
pBt
==0 ){

707 *
µBåì
 = 0;

708  
SQLITE_NOMEM
;

710 if–
nCache
<10 )ÇCache = 10;

711 
rc
 = 
	`sqlôïagî_›í
(&
pBt
->
pPagî
, 
zFûíame
, 
nCache
, 
EXTRA_SIZE
,

712 !
omôJou∫Æ
);

713 if–
rc
!=
SQLITE_OK
 ){

714 if–
pBt
->
pPagî
 ) 
	`sqlôïagî_˛o£
(pBt->pPager);

715 
	`sqlôeFªe
(
pBt
);

716 *
µBåì
 = 0;

717  
rc
;

719 
	`sqlôïagî_£t_de°ru˘‹
(
pBt
->
pPagî
, 
∑geDe°ru˘‹
);

720 
pBt
->
pCurs‹
 = 0;

721 
pBt
->
∑ge1
 = 0;

722 
pBt
->
ªadO∆y
 = 
	`sqlôïagî_i§ód⁄ly
’Bt->
pPagî
);

723 
pBt
->
pOps
 = &
sqlôeBåìOps
;

724 *
µBåì
 = 
pBt
;

725  
SQLITE_OK
;

726 
	}
}

731 
	$fûeBåìClo£
(
Båì
 *
pBt
){

732  
pBt
->
pCurs‹
 ){

733 
	`fûeBåìClo£Curs‹
(
pBt
->
pCurs‹
);

735 
	`sqlôïagî_˛o£
(
pBt
->
pPagî
);

736 
	`sqlôeFªe
(
pBt
);

737  
SQLITE_OK
;

738 
	}
}

755 
	$fûeBåìSëCacheSize
(
Båì
 *
pBt
, 
mxPage
){

756 
	`sqlôïagî_£t_ˇchesize
(
pBt
->
pPagî
, 
mxPage
);

757  
SQLITE_OK
;

758 
	}
}

768 
	$fûeBåìSëSa„tyLevñ
(
Båì
 *
pBt
, 
Àvñ
){

769 
	`sqlôïagî_£t_ß„ty_Àvñ
(
pBt
->
pPagî
, 
Àvñ
);

770  
SQLITE_OK
;

771 
	}
}

783 
	$lockBåì
(
Båì
 *
pBt
){

784 
rc
;

785 if–
pBt
->
∑ge1
 )  
SQLITE_OK
;

786 
rc
 = 
	`sqlôïagî_gë
(
pBt
->
pPagî
, 1, (**)&pBt->
∑ge1
);

787 if–
rc
!=
SQLITE_OK
 ) Ñc;

792 if–
	`sqlôïagî_∑gecou¡
(
pBt
->
pPagî
)>0 ){

793 
PageO√
 *
pP1
 = 
pBt
->
∑ge1
;

794 if–
	`°rcmp
(
pP1
->
zMagic
,
zMagicHódî
)!=0 ||

795 (
pP1
->
iMagic
!=
MAGIC
 && 
	`swab32
(pP1->iMagic)!=MAGIC) ){

796 
rc
 = 
SQLITE_NOTADB
;

797 
∑ge1_öô_Áûed
;

799 
pBt
->
√edSwab
 = 
pP1
->
iMagic
!=
MAGIC
;

801  
rc
;

803 
∑ge1_öô_Áûed
:

804 
	`sqlôïagî_uƒef
(
pBt
->
∑ge1
);

805 
pBt
->
∑ge1
 = 0;

806  
rc
;

807 
	}
}

819 
	$u∆ockBåìIfUnu£d
(
Båì
 *
pBt
){

820 if–
pBt
->
öTøns
==0 &&ÖBt->
pCurs‹
==0 &&ÖBt->
∑ge1
!=0 ){

821 
	`sqlôïagî_uƒef
(
pBt
->
∑ge1
);

822 
pBt
->
∑ge1
 = 0;

823 
pBt
->
öTøns
 = 0;

824 
pBt
->
öCk±
 = 0;

826 
	}
}

832 
	$√wD©aba£
(
Båì
 *
pBt
){

833 
MemPage
 *
pRoŸ
;

834 
PageO√
 *
pP1
;

835 
rc
;

836 if–
	`sqlôïagî_∑gecou¡
(
pBt
->
pPagî
)>1 )  
SQLITE_OK
;

837 
pP1
 = 
pBt
->
∑ge1
;

838 
rc
 = 
	`sqlôïagî_wrôe
(
pBt
->
∑ge1
);

839 if–
rc
 ) Ñc;

840 
rc
 = 
	`sqlôïagî_gë
(
pBt
->
pPagî
, 2, (**)&
pRoŸ
);

841 if–
rc
 ) Ñc;

842 
rc
 = 
	`sqlôïagî_wrôe
(
pRoŸ
);

843 if–
rc
 ){

844 
	`sqlôïagî_uƒef
(
pRoŸ
);

845  
rc
;

847 
	`°r˝y
(
pP1
->
zMagic
, 
zMagicHódî
);

848 if–
båì_«tive_byã_‹dî
 ){

849 
pP1
->
iMagic
 = 
MAGIC
;

850 
pBt
->
√edSwab
 = 0;

852 
pP1
->
iMagic
 = 
	`swab32
(
MAGIC
);

853 
pBt
->
√edSwab
 = 1;

855 
	`zîoPage
(
pBt
, 
pRoŸ
);

856 
	`sqlôïagî_uƒef
(
pRoŸ
);

857  
SQLITE_OK
;

858 
	}
}

875 
	$fûeBåìBegöTøns
(
Båì
 *
pBt
){

876 
rc
;

877 if–
pBt
->
öTøns
 )  
SQLITE_ERROR
;

878 if–
pBt
->
ªadO∆y
 )  
SQLITE_READONLY
;

879 if–
pBt
->
∑ge1
==0 ){

880 
rc
 = 
	`lockBåì
(
pBt
);

881 if–
rc
!=
SQLITE_OK
 ){

882  
rc
;

885 
rc
 = 
	`sqlôïagî_begö
(
pBt
->
∑ge1
);

886 if–
rc
==
SQLITE_OK
 ){

887 
rc
 = 
	`√wD©aba£
(
pBt
);

889 if–
rc
==
SQLITE_OK
 ){

890 
pBt
->
öTøns
 = 1;

891 
pBt
->
öCk±
 = 0;

893 
	`u∆ockBåìIfUnu£d
(
pBt
);

895  
rc
;

896 
	}
}

904 
	$fûeBåìCommô
(
Båì
 *
pBt
){

905 
rc
;

906 
rc
 = 
pBt
->
ªadO∆y
 ? 
SQLITE_OK
 : 
	`sqlôïagî_commô
’Bt->
pPagî
);

907 
pBt
->
öTøns
 = 0;

908 
pBt
->
öCk±
 = 0;

909 
	`u∆ockBåìIfUnu£d
(
pBt
);

910  
rc
;

911 
	}
}

922 
	$fûeBåìRﬁlback
(
Båì
 *
pBt
){

923 
rc
;

924 
BtCurs‹
 *
pCur
;

925 if–
pBt
->
öTøns
==0 )  
SQLITE_OK
;

926 
pBt
->
öTøns
 = 0;

927 
pBt
->
öCk±
 = 0;

928 
rc
 = 
pBt
->
ªadO∆y
 ? 
SQLITE_OK
 : 
	`sqlôïagî_rﬁlback
’Bt->
pPagî
);

929 
pCur
=
pBt
->
pCurs‹
;ÖCur;ÖCurıCur->
pNext
){

930 if–
pCur
->
pPage
 &&ÖCur->pPage->
isInô
==0 ){

931 
	`sqlôïagî_uƒef
(
pCur
->
pPage
);

932 
pCur
->
pPage
 = 0;

935 
	`u∆ockBåìIfUnu£d
(
pBt
);

936  
rc
;

937 
	}
}

949 
	$fûeBåìBegöCk±
(
Båì
 *
pBt
){

950 
rc
;

951 if–!
pBt
->
öTøns
 ||ÖBt->
öCk±
 ){

952  
pBt
->
ªadO∆y
 ? 
SQLITE_READONLY
 : 
SQLITE_ERROR
;

954 
rc
 = 
pBt
->
ªadO∆y
 ? 
SQLITE_OK
 : 
	`sqlôïagî_ck±_begö
’Bt->
pPagî
);

955 
pBt
->
öCk±
 = 1;

956  
rc
;

957 
	}
}

964 
	$fûeBåìCommôCk±
(
Båì
 *
pBt
){

965 
rc
;

966 if–
pBt
->
öCk±
 && !pBt->
ªadO∆y
 ){

967 
rc
 = 
	`sqlôïagî_ck±_commô
(
pBt
->
pPagî
);

969 
rc
 = 
SQLITE_OK
;

971 
pBt
->
öCk±
 = 0;

972  
rc
;

973 
	}
}

983 
	$fûeBåìRﬁlbackCk±
(
Båì
 *
pBt
){

984 
rc
;

985 
BtCurs‹
 *
pCur
;

986 if–
pBt
->
öCk±
==0 ||ÖBt->
ªadO∆y
 )  
SQLITE_OK
;

987 
rc
 = 
	`sqlôïagî_ck±_rﬁlback
(
pBt
->
pPagî
);

988 
pCur
=
pBt
->
pCurs‹
;ÖCur;ÖCurıCur->
pNext
){

989 if–
pCur
->
pPage
 &&ÖCur->pPage->
isInô
==0 ){

990 
	`sqlôïagî_uƒef
(
pCur
->
pPage
);

991 
pCur
->
pPage
 = 0;

994 
pBt
->
öCk±
 = 0;

995  
rc
;

996 
	}
}

1035 
	$fûeBåìCurs‹
(
Båì
 *
pBt
, 
iTabÀ
, 
wrFœg
, 
BtCurs‹
 **
µCur
){

1036 
rc
;

1037 
BtCurs‹
 *
pCur
, *
pRög
;

1039 if–
pBt
->
ªadO∆y
 && 
wrFœg
 ){

1040 *
µCur
 = 0;

1041  
SQLITE_READONLY
;

1043 if–
pBt
->
∑ge1
==0 ){

1044 
rc
 = 
	`lockBåì
(
pBt
);

1045 if–
rc
!=
SQLITE_OK
 ){

1046 *
µCur
 = 0;

1047  
rc
;

1050 
pCur
 = 
	`sqlôeMÆloc
( (*pCur) );

1051 if–
pCur
==0 ){

1052 
rc
 = 
SQLITE_NOMEM
;

1053 
¸óã_curs‹_ex˚±i⁄
;

1055 
pCur
->
pgnoRoŸ
 = (
Pgno
)
iTabÀ
;

1056 
rc
 = 
	`sqlôïagî_gë
(
pBt
->
pPagî
, 
pCur
->
pgnoRoŸ
, (**)&pCur->
pPage
);

1057 if–
rc
!=
SQLITE_OK
 ){

1058 
¸óã_curs‹_ex˚±i⁄
;

1060 
rc
 = 
	`öôPage
(
pBt
, 
pCur
->
pPage
,ÖCur->
pgnoRoŸ
, 0);

1061 if–
rc
!=
SQLITE_OK
 ){

1062 
¸óã_curs‹_ex˚±i⁄
;

1064 
pCur
->
pOps
 = &
sqlôeBåìCurs‹Ops
;

1065 
pCur
->
pBt
 =ÖBt;

1066 
pCur
->
wrFœg
 = wrFlag;

1067 
pCur
->
idx
 = 0;

1068 
pCur
->
eSkù
 = 
SKIP_INVALID
;

1069 
pCur
->
pNext
 = 
pBt
->
pCurs‹
;

1070 if–
pCur
->
pNext
 ){

1071 
pCur
->
pNext
->
pPªv
 =ÖCur;

1073 
pCur
->
pPªv
 = 0;

1074 
pRög
 = 
pBt
->
pCurs‹
;

1075  
pRög
 &&ÖRög->
pgnoRoŸ
!=
pCur
->pgnoRoŸ ){ÖRög =ÖRög->
pNext
; }

1076 if–
pRög
 ){

1077 
pCur
->
pSh¨ed
 = 
pRög
->pShared;

1078 
pRög
->
pSh¨ed
 = 
pCur
;

1080 
pCur
->
pSh¨ed
 =ÖCur;

1082 
pBt
->
pCurs‹
 = 
pCur
;

1083 *
µCur
 = 
pCur
;

1084  
SQLITE_OK
;

1086 
¸óã_curs‹_ex˚±i⁄
:

1087 *
µCur
 = 0;

1088 if–
pCur
 ){

1089 if–
pCur
->
pPage
 ) 
	`sqlôïagî_uƒef
(pCur->pPage);

1090 
	`sqlôeFªe
(
pCur
);

1092 
	`u∆ockBåìIfUnu£d
(
pBt
);

1093  
rc
;

1094 
	}
}

1100 
	$fûeBåìClo£Curs‹
(
BtCurs‹
 *
pCur
){

1101 
Båì
 *
pBt
 = 
pCur
->pBt;

1102 if–
pCur
->
pPªv
 ){

1103 
pCur
->
pPªv
->
pNext
 =ÖCur->pNext;

1105 
pBt
->
pCurs‹
 = 
pCur
->
pNext
;

1107 if–
pCur
->
pNext
 ){

1108 
pCur
->
pNext
->
pPªv
 =ÖCur->pPrev;

1110 if–
pCur
->
pPage
 ){

1111 
	`sqlôïagî_uƒef
(
pCur
->
pPage
);

1113 if–
pCur
->
pSh¨ed
!=pCur ){

1114 
BtCurs‹
 *
pRög
 = 
pCur
->
pSh¨ed
;

1115  
pRög
->
pSh¨ed
!=
pCur
 ){ÖRing =ÖRing->pShared; }

1116 
pRög
->
pSh¨ed
 = 
pCur
->pShared;

1118 
	`u∆ockBåìIfUnu£d
(
pBt
);

1119 
	`sqlôeFªe
(
pCur
);

1120  
SQLITE_OK
;

1121 
	}
}

1127 
	$gëTempCurs‹
(
BtCurs‹
 *
pCur
, BtCurs‹ *
pTempCur
){

1128 
	`mem˝y
(
pTempCur
, 
pCur
, (*pCur));

1129 
pTempCur
->
pNext
 = 0;

1130 
pTempCur
->
pPªv
 = 0;

1131 if–
pTempCur
->
pPage
 ){

1132 
	`sqlôïagî_ªf
(
pTempCur
->
pPage
);

1134 
	}
}

1140 
	$ªÀa£TempCurs‹
(
BtCurs‹
 *
pCur
){

1141 if–
pCur
->
pPage
 ){

1142 
	`sqlôïagî_uƒef
(
pCur
->
pPage
);

1144 
	}
}

1153 
	$fûeBåìKeySize
(
BtCurs‹
 *
pCur
, *
pSize
){

1154 
Cñl
 *
pCñl
;

1155 
MemPage
 *
pPage
;

1157 
pPage
 = 
pCur
->pPage;

1158 
	`as£π
–
pPage
!=0 );

1159 if–
pCur
->
idx
 >
pPage
->
nCñl
 ){

1160 *
pSize
 = 0;

1162 
pCñl
 = 
pPage
->
≠Cñl
[
pCur
->
idx
];

1163 *
pSize
 = 
	`NKEY
(
pCur
->
pBt
, 
pCñl
->
h
);

1165  
SQLITE_OK
;

1166 
	}
}

1176 
	$gëPaylﬂd
(
BtCurs‹
 *
pCur
, 
off£t
, 
amt
, *
zBuf
){

1177 *
aPaylﬂd
;

1178 
Pgno
 
√xtPage
;

1179 
rc
;

1180 
Båì
 *
pBt
 = 
pCur
->pBt;

1181 
	`as£π
–
pCur
!=0 &&ÖCur->
pPage
!=0 );

1182 
	`as£π
–
pCur
->
idx
>=0 &&ÖCur->idx<pCur->
pPage
->
nCñl
 );

1183 
aPaylﬂd
 = 
pCur
->
pPage
->
≠Cñl
[pCur->
idx
]->aPayload;

1184 if–
off£t
<
MX_LOCAL_PAYLOAD
 ){

1185 
a
 = 
amt
;

1186 if–
a
+
off£t
>
MX_LOCAL_PAYLOAD
 ){

1187 
a
 = 
MX_LOCAL_PAYLOAD
 - 
off£t
;

1189 
	`mem˝y
(
zBuf
, &
aPaylﬂd
[
off£t
], 
a
);

1190 if–
a
==
amt
 ){

1191  
SQLITE_OK
;

1193 
off£t
 = 0;

1194 
zBuf
 +
a
;

1195 
amt
 -
a
;

1197 
off£t
 -
MX_LOCAL_PAYLOAD
;

1199 if–
amt
>0 ){

1200 
√xtPage
 = 
	`SWAB32
(
pBt
, 
pCur
->
pPage
->
≠Cñl
[pCur->
idx
]->
ovÊ
);

1202  
amt
>0 && 
√xtPage
 ){

1203 
OvîÊowPage
 *
pOvÊ
;

1204 
rc
 = 
	`sqlôïagî_gë
(
pBt
->
pPagî
, 
√xtPage
, (**)&
pOvÊ
);

1205 if–
rc
!=0 ){

1206  
rc
;

1208 
√xtPage
 = 
	`SWAB32
(
pBt
, 
pOvÊ
->
iNext
);

1209 if–
off£t
<
OVERFLOW_SIZE
 ){

1210 
a
 = 
amt
;

1211 if–
a
 + 
off£t
 > 
OVERFLOW_SIZE
 ){

1212 
a
 = 
OVERFLOW_SIZE
 - 
off£t
;

1214 
	`mem˝y
(
zBuf
, &
pOvÊ
->
aPaylﬂd
[
off£t
], 
a
);

1215 
off£t
 = 0;

1216 
amt
 -
a
;

1217 
zBuf
 +
a
;

1219 
off£t
 -
OVERFLOW_SIZE
;

1221 
	`sqlôïagî_uƒef
(
pOvÊ
);

1223 if–
amt
>0 ){

1224  
SQLITE_CORRUPT
;

1226  
SQLITE_OK
;

1227 
	}
}

1242 
	$fûeBåìKey
(
BtCurs‹
 *
pCur
, 
off£t
, 
amt
, *
zBuf
){

1243 
MemPage
 *
pPage
;

1245 
	`as£π
–
amt
>=0 );

1246 
	`as£π
–
off£t
>=0 );

1247 
	`as£π
–
pCur
->
pPage
!=0 );

1248 
pPage
 = 
pCur
->pPage;

1249 if–
pCur
->
idx
 >
pPage
->
nCñl
 ){

1252 
	`as£π
–
amt
+
off£t
 <
	`NKEY
(
pCur
->
pBt
, 
pPage
->
≠Cñl
[pCur->
idx
]->
h
) );

1253 
	`gëPaylﬂd
(
pCur
, 
off£t
, 
amt
, 
zBuf
);

1254  
amt
;

1255 
	}
}

1264 
	$fûeBåìD©aSize
(
BtCurs‹
 *
pCur
, *
pSize
){

1265 
Cñl
 *
pCñl
;

1266 
MemPage
 *
pPage
;

1268 
pPage
 = 
pCur
->pPage;

1269 
	`as£π
–
pPage
!=0 );

1270 if–
pCur
->
idx
 >
pPage
->
nCñl
 ){

1271 *
pSize
 = 0;

1273 
pCñl
 = 
pPage
->
≠Cñl
[
pCur
->
idx
];

1274 *
pSize
 = 
	`NDATA
(
pCur
->
pBt
, 
pCñl
->
h
);

1276  
SQLITE_OK
;

1277 
	}
}

1287 
	$fûeBåìD©a
(
BtCurs‹
 *
pCur
, 
off£t
, 
amt
, *
zBuf
){

1288 
Cñl
 *
pCñl
;

1289 
MemPage
 *
pPage
;

1291 
	`as£π
–
amt
>=0 );

1292 
	`as£π
–
off£t
>=0 );

1293 
	`as£π
–
pCur
->
pPage
!=0 );

1294 
pPage
 = 
pCur
->pPage;

1295 if–
pCur
->
idx
 >
pPage
->
nCñl
 ){

1298 
pCñl
 = 
pPage
->
≠Cñl
[
pCur
->
idx
];

1299 
	`as£π
–
amt
+
off£t
 <
	`NDATA
(
pCur
->
pBt
, 
pCñl
->
h
) );

1300 
	`gëPaylﬂd
(
pCur
, 
off£t
 + 
	`NKEY
’Cur->
pBt
, 
pCñl
->
h
), 
amt
, 
zBuf
);

1301  
amt
;

1302 
	}
}

1325 
	$fûeBåìKeyCom∑ª
(

1326 
BtCurs‹
 *
pCur
,

1327 c⁄° *
pKey
,

1328 
nKey
,

1329 
nIgn‹e
,

1330 *
pResu…


1332 
Pgno
 
√xtPage
;

1333 
n
, 
c
, 
rc
, 
nLoˇl
;

1334 
Cñl
 *
pCñl
;

1335 
Båì
 *
pBt
 = 
pCur
->pBt;

1336 c⁄° *
zKey
 = (c⁄° *)
pKey
;

1338 
	`as£π
–
pCur
->
pPage
 );

1339 
	`as£π
–
pCur
->
idx
>=0 &&ÖCur->idx<pCur->
pPage
->
nCñl
 );

1340 
pCñl
 = 
pCur
->
pPage
->
≠Cñl
[pCur->
idx
];

1341 
nLoˇl
 = 
	`NKEY
(
pBt
, 
pCñl
->
h
Ë- 
nIgn‹e
;

1342 if–
nLoˇl
<0 )ÇLocal = 0;

1343 
n
 = 
nKey
<
nLoˇl
 ?ÇKey :ÇLocal;

1344 if–
n
>
MX_LOCAL_PAYLOAD
 ){

1345 
n
 = 
MX_LOCAL_PAYLOAD
;

1347 
c
 = 
	`memcmp
(
pCñl
->
aPaylﬂd
, 
zKey
, 
n
);

1348 if–
c
!=0 ){

1349 *
pResu…
 = 
c
;

1350  
SQLITE_OK
;

1352 
zKey
 +
n
;

1353 
nKey
 -
n
;

1354 
nLoˇl
 -
n
;

1355 
√xtPage
 = 
	`SWAB32
(
pBt
, 
pCñl
->
ovÊ
);

1356  
nKey
>0 && 
nLoˇl
>0 ){

1357 
OvîÊowPage
 *
pOvÊ
;

1358 if–
√xtPage
==0 ){

1359  
SQLITE_CORRUPT
;

1361 
rc
 = 
	`sqlôïagî_gë
(
pBt
->
pPagî
, 
√xtPage
, (**)&
pOvÊ
);

1362 if–
rc
 ){

1363  
rc
;

1365 
√xtPage
 = 
	`SWAB32
(
pBt
, 
pOvÊ
->
iNext
);

1366 
n
 = 
nKey
<
nLoˇl
 ?ÇKey :ÇLocal;

1367 if–
n
>
OVERFLOW_SIZE
 ){

1368 
n
 = 
OVERFLOW_SIZE
;

1370 
c
 = 
	`memcmp
(
pOvÊ
->
aPaylﬂd
, 
zKey
, 
n
);

1371 
	`sqlôïagî_uƒef
(
pOvÊ
);

1372 if–
c
!=0 ){

1373 *
pResu…
 = 
c
;

1374  
SQLITE_OK
;

1376 
nKey
 -
n
;

1377 
nLoˇl
 -
n
;

1378 
zKey
 +
n
;

1380 if–
c
==0 ){

1381 
c
 = 
nLoˇl
 - 
nKey
;

1383 *
pResu…
 = 
c
;

1384  
SQLITE_OK
;

1385 
	}
}

1391 
	$moveToChûd
(
BtCurs‹
 *
pCur
, 
√wPgno
){

1392 
rc
;

1393 
MemPage
 *
pNewPage
;

1394 
Båì
 *
pBt
 = 
pCur
->pBt;

1396 
√wPgno
 = 
	`SWAB32
(
pBt
,ÇewPgno);

1397 
rc
 = 
	`sqlôïagî_gë
(
pBt
->
pPagî
, 
√wPgno
, (**)&
pNewPage
);

1398 if–
rc
 ) Ñc;

1399 
rc
 = 
	`öôPage
(
pBt
, 
pNewPage
, 
√wPgno
, 
pCur
->
pPage
);

1400 if–
rc
 ) Ñc;

1401 
	`as£π
–
pCur
->
idx
>ıCur->
pPage
->
nCñl


1402 || 
pCur
->
pPage
->
≠Cñl
[pCur->
idx
]->
h
.
À·Chûd
==
	`SWAB32
(
pBt
,
√wPgno
) );

1403 
	`as£π
–
pCur
->
idx
<pCur->
pPage
->
nCñl


1404 || 
pCur
->
pPage
->
u
.
hdr
.
rightChûd
==
	`SWAB32
(
pBt
,
√wPgno
) );

1405 
pNewPage
->
idxP¨ít
 = 
pCur
->
idx
;

1406 
pCur
->
pPage
->
idxShi·
 = 0;

1407 
	`sqlôïagî_uƒef
(
pCur
->
pPage
);

1408 
pCur
->
pPage
 = 
pNewPage
;

1409 
pCur
->
idx
 = 0;

1410 if–
pNewPage
->
nCñl
<1 ){

1411  
SQLITE_CORRUPT
;

1413  
SQLITE_OK
;

1414 
	}
}

1424 
	$moveToP¨ít
(
BtCurs‹
 *
pCur
){

1425 
Pgno
 
ﬁdPgno
;

1426 
MemPage
 *
pP¨ít
;

1427 
MemPage
 *
pPage
;

1428 
idxP¨ít
;

1429 
pPage
 = 
pCur
->pPage;

1430 
	`as£π
–
pPage
!=0 );

1431 
pP¨ít
 = 
pPage
->pParent;

1432 
	`as£π
–
pP¨ít
!=0 );

1433 
idxP¨ít
 = 
pPage
->idxParent;

1434 
	`sqlôïagî_ªf
(
pP¨ít
);

1435 
	`sqlôïagî_uƒef
(
pPage
);

1436 
pCur
->
pPage
 = 
pP¨ít
;

1437 
	`as£π
–
pP¨ít
->
idxShi·
==0 );

1438 if–
pP¨ít
->
idxShi·
==0 ){

1439 
pCur
->
idx
 = 
idxP¨ít
;

1440 #i‚de‡
NDEBUG


1444 
ﬁdPgno
 = 
	`SWAB32
(
pCur
->
pBt
, 
	`sqlôïagî_∑gíumbî
(
pPage
));

1445 if–
pCur
->
idx
<
pP¨ít
->
nCñl
 ){

1446 
	`as£π
–
pP¨ít
->
≠Cñl
[
idxP¨ít
]->
h
.
À·Chûd
==
ﬁdPgno
 );

1448 
	`as£π
–
pP¨ít
->
u
.
hdr
.
rightChûd
==
ﬁdPgno
 );

1457 
i
;

1458 
pCur
->
idx
 = 
pP¨ít
->
nCñl
;

1459 
ﬁdPgno
 = 
	`SWAB32
(
pCur
->
pBt
, 
	`sqlôïagî_∑gíumbî
(
pPage
));

1460 
i
=0; i<
pP¨ít
->
nCñl
; i++){

1461 if–
pP¨ít
->
≠Cñl
[
i
]->
h
.
À·Chûd
==
ﬁdPgno
 ){

1462 
pCur
->
idx
 = 
i
;

1467 
	}
}

1472 
	$moveToRoŸ
(
BtCurs‹
 *
pCur
){

1473 
MemPage
 *
pNew
;

1474 
rc
;

1475 
Båì
 *
pBt
 = 
pCur
->pBt;

1477 
rc
 = 
	`sqlôïagî_gë
(
pBt
->
pPagî
, 
pCur
->
pgnoRoŸ
, (**)&
pNew
);

1478 if–
rc
 ) Ñc;

1479 
rc
 = 
	`öôPage
(
pBt
, 
pNew
, 
pCur
->
pgnoRoŸ
, 0);

1480 if–
rc
 ) Ñc;

1481 
	`sqlôïagî_uƒef
(
pCur
->
pPage
);

1482 
pCur
->
pPage
 = 
pNew
;

1483 
pCur
->
idx
 = 0;

1484  
SQLITE_OK
;

1485 
	}
}

1491 
	$moveToLe·mo°
(
BtCurs‹
 *
pCur
){

1492 
Pgno
 
pgno
;

1493 
rc
;

1495  (
pgno
 = 
pCur
->
pPage
->
≠Cñl
[pCur->
idx
]->
h
.
À·Chûd
)!=0 ){

1496 
rc
 = 
	`moveToChûd
(
pCur
, 
pgno
);

1497 if–
rc
 ) Ñc;

1499  
SQLITE_OK
;

1500 
	}
}

1509 
	$moveToRightmo°
(
BtCurs‹
 *
pCur
){

1510 
Pgno
 
pgno
;

1511 
rc
;

1513  (
pgno
 = 
pCur
->
pPage
->
u
.
hdr
.
rightChûd
)!=0 ){

1514 
pCur
->
idx
 =ÖCur->
pPage
->
nCñl
;

1515 
rc
 = 
	`moveToChûd
(
pCur
, 
pgno
);

1516 if–
rc
 ) Ñc;

1518 
pCur
->
idx
 =ÖCur->
pPage
->
nCñl
 - 1;

1519  
SQLITE_OK
;

1520 
	}
}

1526 
	$fûeBåìFú°
(
BtCurs‹
 *
pCur
, *
pRes
){

1527 
rc
;

1528 if–
pCur
->
pPage
==0 )  
SQLITE_ABORT
;

1529 
rc
 = 
	`moveToRoŸ
(
pCur
);

1530 if–
rc
 ) Ñc;

1531 if–
pCur
->
pPage
->
nCñl
==0 ){

1532 *
pRes
 = 1;

1533  
SQLITE_OK
;

1535 *
pRes
 = 0;

1536 
rc
 = 
	`moveToLe·mo°
(
pCur
);

1537 
pCur
->
eSkù
 = 
SKIP_NONE
;

1538  
rc
;

1539 
	}
}

1545 
	$fûeBåìLa°
(
BtCurs‹
 *
pCur
, *
pRes
){

1546 
rc
;

1547 if–
pCur
->
pPage
==0 )  
SQLITE_ABORT
;

1548 
rc
 = 
	`moveToRoŸ
(
pCur
);

1549 if–
rc
 ) Ñc;

1550 
	`as£π
–
pCur
->
pPage
->
isInô
 );

1551 if–
pCur
->
pPage
->
nCñl
==0 ){

1552 *
pRes
 = 1;

1553  
SQLITE_OK
;

1555 *
pRes
 = 0;

1556 
rc
 = 
	`moveToRightmo°
(
pCur
);

1557 
pCur
->
eSkù
 = 
SKIP_NONE
;

1558  
rc
;

1559 
	}
}

1585 
	$fûeBåìMovëo
(
BtCurs‹
 *
pCur
, c⁄° *
pKey
, 
nKey
, *
pRes
){

1586 
rc
;

1587 if–
pCur
->
pPage
==0 )  
SQLITE_ABORT
;

1588 
pCur
->
eSkù
 = 
SKIP_NONE
;

1589 
rc
 = 
	`moveToRoŸ
(
pCur
);

1590 if–
rc
 ) Ñc;

1592 
lwr
, 
u¥
;

1593 
Pgno
 
chldPg
;

1594 
MemPage
 *
pPage
 = 
pCur
->pPage;

1595 
c
 = -1;

1596 
lwr
 = 0;

1597 
u¥
 = 
pPage
->
nCñl
-1;

1598  
lwr
<=
u¥
 ){

1599 
pCur
->
idx
 = (
lwr
+
u¥
)/2;

1600 
rc
 = 
	`fûeBåìKeyCom∑ª
(
pCur
, 
pKey
, 
nKey
, 0, &
c
);

1601 if–
rc
 ) Ñc;

1602 if–
c
==0 ){

1603 
pCur
->
iM©ch
 = 
c
;

1604 if–
pRes
 ) *pRes = 0;

1605  
SQLITE_OK
;

1607 if–
c
<0 ){

1608 
lwr
 = 
pCur
->
idx
+1;

1610 
u¥
 = 
pCur
->
idx
-1;

1613 
	`as£π
–
lwr
==
u¥
+1 );

1614 
	`as£π
–
pPage
->
isInô
 );

1615 if–
lwr
>=
pPage
->
nCñl
 ){

1616 
chldPg
 = 
pPage
->
u
.
hdr
.
rightChûd
;

1618 
chldPg
 = 
pPage
->
≠Cñl
[
lwr
]->
h
.
À·Chûd
;

1620 if–
chldPg
==0 ){

1621 
pCur
->
iM©ch
 = 
c
;

1622 if–
pRes
 ) *pRe†
c
;

1623  
SQLITE_OK
;

1625 
pCur
->
idx
 = 
lwr
;

1626 
rc
 = 
	`moveToChûd
(
pCur
, 
chldPg
);

1627 if–
rc
 ) Ñc;

1630 
	}
}

1638 
	$fûeBåìNext
(
BtCurs‹
 *
pCur
, *
pRes
){

1639 
rc
;

1640 
MemPage
 *
pPage
 = 
pCur
->pPage;

1641 
	`as£π
–
pRes
!=0 );

1642 if–
pPage
==0 ){

1643 *
pRes
 = 1;

1644  
SQLITE_ABORT
;

1646 
	`as£π
–
pPage
->
isInô
 );

1647 
	`as£π
–
pCur
->
eSkù
!=
SKIP_INVALID
 );

1648 if–
pPage
->
nCñl
==0 ){

1649 *
pRes
 = 1;

1650  
SQLITE_OK
;

1652 
	`as£π
–
pCur
->
idx
<
pPage
->
nCñl
 );

1653 if–
pCur
->
eSkù
==
SKIP_NEXT
 ){

1654 
pCur
->
eSkù
 = 
SKIP_NONE
;

1655 *
pRes
 = 0;

1656  
SQLITE_OK
;

1658 
pCur
->
eSkù
 = 
SKIP_NONE
;

1659 
pCur
->
idx
++;

1660 if–
pCur
->
idx
>=
pPage
->
nCñl
 ){

1661 if–
pPage
->
u
.
hdr
.
rightChûd
 ){

1662 
rc
 = 
	`moveToChûd
(
pCur
, 
pPage
->
u
.
hdr
.
rightChûd
);

1663 if–
rc
 ) Ñc;

1664 
rc
 = 
	`moveToLe·mo°
(
pCur
);

1665 *
pRes
 = 0;

1666  
rc
;

1669 if–
pPage
->
pP¨ít
==0 ){

1670 *
pRes
 = 1;

1671  
SQLITE_OK
;

1673 
	`moveToP¨ít
(
pCur
);

1674 
pPage
 = 
pCur
->pPage;

1675 } 
pCur
->
idx
>=
pPage
->
nCñl
 );

1676 *
pRes
 = 0;

1677  
SQLITE_OK
;

1679 *
pRes
 = 0;

1680 if–
pPage
->
u
.
hdr
.
rightChûd
==0 ){

1681  
SQLITE_OK
;

1683 
rc
 = 
	`moveToLe·mo°
(
pCur
);

1684  
rc
;

1685 
	}
}

1693 
	$fûeBåìPªvious
(
BtCurs‹
 *
pCur
, *
pRes
){

1694 
rc
;

1695 
Pgno
 
pgno
;

1696 
MemPage
 *
pPage
;

1697 
pPage
 = 
pCur
->pPage;

1698 if–
pPage
==0 ){

1699 *
pRes
 = 1;

1700  
SQLITE_ABORT
;

1702 
	`as£π
–
pPage
->
isInô
 );

1703 
	`as£π
–
pCur
->
eSkù
!=
SKIP_INVALID
 );

1704 if–
pPage
->
nCñl
==0 ){

1705 *
pRes
 = 1;

1706  
SQLITE_OK
;

1708 if–
pCur
->
eSkù
==
SKIP_PREV
 ){

1709 
pCur
->
eSkù
 = 
SKIP_NONE
;

1710 *
pRes
 = 0;

1711  
SQLITE_OK
;

1713 
pCur
->
eSkù
 = 
SKIP_NONE
;

1714 
	`as£π
–
pCur
->
idx
>=0 );

1715 if–(
pgno
 = 
pPage
->
≠Cñl
[
pCur
->
idx
]->
h
.
À·Chûd
)!=0 ){

1716 
rc
 = 
	`moveToChûd
(
pCur
, 
pgno
);

1717 if–
rc
 ) Ñc;

1718 
rc
 = 
	`moveToRightmo°
(
pCur
);

1720  
pCur
->
idx
==0 ){

1721 if–
pPage
->
pP¨ít
==0 ){

1722 if–
pRes
 ) *pRes = 1;

1723  
SQLITE_OK
;

1725 
	`moveToP¨ít
(
pCur
);

1726 
pPage
 = 
pCur
->pPage;

1728 
pCur
->
idx
--;

1729 
rc
 = 
SQLITE_OK
;

1731 *
pRes
 = 0;

1732  
rc
;

1733 
	}
}

1752 
	$ÆloˇãPage
(
Båì
 *
pBt
, 
MemPage
 **
µPage
, 
Pgno
 *
pPgno
, Pgnÿ
√¨by
){

1753 
PageO√
 *
pPage1
 = 
pBt
->
∑ge1
;

1754 
rc
;

1755 if–
pPage1
->
‰ìLi°
 ){

1756 
OvîÊowPage
 *
pOvÊ
;

1757 
Fªñi°Info
 *
pInfo
;

1759 
rc
 = 
	`sqlôïagî_wrôe
(
pPage1
);

1760 if–
rc
 ) Ñc;

1761 
	`SWAB_ADD
(
pBt
, 
pPage1
->
nFªe
, -1);

1762 
rc
 = 
	`sqlôïagî_gë
(
pBt
->
pPagî
, 
	`SWAB32
’Bt, 
pPage1
->
‰ìLi°
),

1763 (**)&
pOvÊ
);

1764 if–
rc
 ) Ñc;

1765 
rc
 = 
	`sqlôïagî_wrôe
(
pOvÊ
);

1766 if–
rc
 ){

1767 
	`sqlôïagî_uƒef
(
pOvÊ
);

1768  
rc
;

1770 
pInfo
 = (
Fªñi°Info
*)
pOvÊ
->
aPaylﬂd
;

1771 if–
pInfo
->
nFªe
==0 ){

1772 *
pPgno
 = 
	`SWAB32
(
pBt
, 
pPage1
->
‰ìLi°
);

1773 
pPage1
->
‰ìLi°
 = 
pOvÊ
->
iNext
;

1774 *
µPage
 = (
MemPage
*)
pOvÊ
;

1776 
˛o£°
, 
n
;

1777 
n
 = 
	`SWAB32
(
pBt
, 
pInfo
->
nFªe
);

1778 if–
n
>1 && 
√¨by
>0 ){

1779 
i
, 
di°
;

1780 
˛o£°
 = 0;

1781 
di°
 = 
	`SWAB32
(
pBt
, 
pInfo
->
aFªe
[0]Ë- 
√¨by
;

1782 if–
di°
<0 ) dist = -dist;

1783 
i
=1; i<
n
; i++){

1784 
d2
 = 
	`SWAB32
(
pBt
, 
pInfo
->
aFªe
[
i
]Ë- 
√¨by
;

1785 if–
d2
<0 ) d2 = -d2;

1786 if–
d2
<
di°
 ) 
˛o£°
 = 
i
;

1789 
˛o£°
 = 0;

1791 
	`SWAB_ADD
(
pBt
, 
pInfo
->
nFªe
, -1);

1792 *
pPgno
 = 
	`SWAB32
(
pBt
, 
pInfo
->
aFªe
[
˛o£°
]);

1793 
pInfo
->
aFªe
[
˛o£°
] =ÖInfo->aFªe[
n
-1];

1794 
rc
 = 
	`sqlôïagî_gë
(
pBt
->
pPagî
, *
pPgno
, (**)
µPage
);

1795 
	`sqlôïagî_uƒef
(
pOvÊ
);

1796 if–
rc
==
SQLITE_OK
 ){

1797 
	`sqlôïagî_d⁄t_rﬁlback
(*
µPage
);

1798 
rc
 = 
	`sqlôïagî_wrôe
(*
µPage
);

1802 *
pPgno
 = 
	`sqlôïagî_∑gecou¡
(
pBt
->
pPagî
) + 1;

1803 
rc
 = 
	`sqlôïagî_gë
(
pBt
->
pPagî
, *
pPgno
, (**)
µPage
);

1804 if–
rc
 ) Ñc;

1805 
rc
 = 
	`sqlôïagî_wrôe
(*
µPage
);

1807  
rc
;

1808 
	}
}

1816 
	$‰ìPage
(
Båì
 *
pBt
, *
pPage
, 
Pgno
 
pgno
){

1817 
PageO√
 *
pPage1
 = 
pBt
->
∑ge1
;

1818 
OvîÊowPage
 *
pOvÊ
 = (OvîÊowPage*)
pPage
;

1819 
rc
;

1820 
√edUƒef
 = 0;

1821 
MemPage
 *
pMemPage
;

1823 if–
pgno
==0 ){

1824 
	`as£π
–
pOvÊ
!=0 );

1825 
pgno
 = 
	`sqlôïagî_∑gíumbî
(
pOvÊ
);

1827 
	`as£π
–
pgno
>2 );

1828 
	`as£π
–
	`sqlôïagî_∑gíumbî
(
pOvÊ
)==
pgno
 );

1829 
pMemPage
 = (
MemPage
*)
pPage
;

1830 
pMemPage
->
isInô
 = 0;

1831 if–
pMemPage
->
pP¨ít
 ){

1832 
	`sqlôïagî_uƒef
(
pMemPage
->
pP¨ít
);

1833 
pMemPage
->
pP¨ít
 = 0;

1835 
rc
 = 
	`sqlôïagî_wrôe
(
pPage1
);

1836 if–
rc
 ){

1837  
rc
;

1839 
	`SWAB_ADD
(
pBt
, 
pPage1
->
nFªe
, 1);

1840 if–
pPage1
->
nFªe
!=0 &&ÖPage1->
‰ìLi°
!=0 ){

1841 
OvîÊowPage
 *
pFªeIdx
;

1842 
rc
 = 
	`sqlôïagî_gë
(
pBt
->
pPagî
, 
	`SWAB32
’Bt, 
pPage1
->
‰ìLi°
),

1843 (**)&
pFªeIdx
);

1844 if–
rc
==
SQLITE_OK
 ){

1845 
Fªñi°Info
 *
pInfo
 = (Fªñi°Info*)
pFªeIdx
->
aPaylﬂd
;

1846 
n
 = 
	`SWAB32
(
pBt
, 
pInfo
->
nFªe
);

1847 if–
n
<((
pInfo
->
aFªe
)/(pInfo->aFree[0])) ){

1848 
rc
 = 
	`sqlôïagî_wrôe
(
pFªeIdx
);

1849 if–
rc
==
SQLITE_OK
 ){

1850 
pInfo
->
aFªe
[
n
] = 
	`SWAB32
(
pBt
, 
pgno
);

1851 
	`SWAB_ADD
(
pBt
, 
pInfo
->
nFªe
, 1);

1852 
	`sqlôïagî_uƒef
(
pFªeIdx
);

1853 
	`sqlôïagî_d⁄t_wrôe
(
pBt
->
pPagî
, 
pgno
);

1854  
rc
;

1857 
	`sqlôïagî_uƒef
(
pFªeIdx
);

1860 if–
pOvÊ
==0 ){

1861 
	`as£π
–
pgno
>0 );

1862 
rc
 = 
	`sqlôïagî_gë
(
pBt
->
pPagî
, 
pgno
, (**)&
pOvÊ
);

1863 if–
rc
 ) Ñc;

1864 
√edUƒef
 = 1;

1866 
rc
 = 
	`sqlôïagî_wrôe
(
pOvÊ
);

1867 if–
rc
 ){

1868 if–
√edUƒef
 ) 
	`sqlôïagî_uƒef
(
pOvÊ
);

1869  
rc
;

1871 
pOvÊ
->
iNext
 = 
pPage1
->
‰ìLi°
;

1872 
pPage1
->
‰ìLi°
 = 
	`SWAB32
(
pBt
, 
pgno
);

1873 
	`mem£t
(
pOvÊ
->
aPaylﬂd
, 0, 
OVERFLOW_SIZE
);

1874 if–
√edUƒef
 ) 
rc
 = 
	`sqlôïagî_uƒef
(
pOvÊ
);

1875  
rc
;

1876 
	}
}

1882 
	$˛órCñl
(
Båì
 *
pBt
, 
Cñl
 *
pCñl
){

1883 
Pagî
 *
pPagî
 = 
pBt
->pPager;

1884 
OvîÊowPage
 *
pOvÊ
;

1885 
Pgno
 
ovÊ
, 
√xtOvÊ
;

1886 
rc
;

1888 if–
	`NKEY
(
pBt
, 
pCñl
->
h
Ë+ 
	`NDATA
’Bt,ÖCñl->hË<
MX_LOCAL_PAYLOAD
 ){

1889  
SQLITE_OK
;

1891 
ovÊ
 = 
	`SWAB32
(
pBt
, 
pCñl
->ovfl);

1892 
pCñl
->
ovÊ
 = 0;

1893  
ovÊ
 ){

1894 
rc
 = 
	`sqlôïagî_gë
(
pPagî
, 
ovÊ
, (**)&
pOvÊ
);

1895 if–
rc
 ) Ñc;

1896 
√xtOvÊ
 = 
	`SWAB32
(
pBt
, 
pOvÊ
->
iNext
);

1897 
rc
 = 
	`‰ìPage
(
pBt
, 
pOvÊ
, 
ovÊ
);

1898 if–
rc
 ) Ñc;

1899 
	`sqlôïagî_uƒef
(
pOvÊ
);

1900 
ovÊ
 = 
√xtOvÊ
;

1902  
SQLITE_OK
;

1903 
	}
}

1909 
	$fûlInCñl
(

1910 
Båì
 *
pBt
,

1911 
Cñl
 *
pCñl
,

1912 c⁄° *
pKey
, 
nKey
,

1913 c⁄° *
pD©a
,
nD©a


1915 
OvîÊowPage
 *
pOvÊ
, *
pPri‹
;

1916 
Pgno
 *
pNext
;

1917 
•a˚Le·
;

1918 
n
, 
rc
;

1919 
nPaylﬂd
;

1920 c⁄° *
pPaylﬂd
;

1921 *
pS∑˚
;

1922 
Pgno
 
√¨by
 = 0;

1924 
pCñl
->
h
.
À·Chûd
 = 0;

1925 
pCñl
->
h
.
nKey
 = 
	`SWAB16
(
pBt
,ÇKey & 0xffff);

1926 
pCñl
->
h
.
nKeyHi
 = 
nKey
 >> 16;

1927 
pCñl
->
h
.
nD©a
 = 
	`SWAB16
(
pBt
,ÇData & 0xffff);

1928 
pCñl
->
h
.
nD©aHi
 = 
nD©a
 >> 16;

1929 
pCñl
->
h
.
iNext
 = 0;

1931 
pNext
 = &
pCñl
->
ovÊ
;

1932 
pS∑˚
 = 
pCñl
->
aPaylﬂd
;

1933 
•a˚Le·
 = 
MX_LOCAL_PAYLOAD
;

1934 
pPaylﬂd
 = 
pKey
;

1935 
pKey
 = 0;

1936 
nPaylﬂd
 = 
nKey
;

1937 
pPri‹
 = 0;

1938  
nPaylﬂd
>0 ){

1939 if–
•a˚Le·
==0 ){

1940 
rc
 = 
	`ÆloˇãPage
(
pBt
, (
MemPage
**)&
pOvÊ
, 
pNext
, 
√¨by
);

1941 if–
rc
 ){

1942 *
pNext
 = 0;

1944 
√¨by
 = *
pNext
;

1946 if–
pPri‹
 ) 
	`sqlôïagî_uƒef
(pPrior);

1947 if–
rc
 ){

1948 
	`˛órCñl
(
pBt
, 
pCñl
);

1949  
rc
;

1951 if–
pBt
->
√edSwab
 ) *
pNext
 = 
	`swab32
(*pNext);

1952 
pPri‹
 = 
pOvÊ
;

1953 
•a˚Le·
 = 
OVERFLOW_SIZE
;

1954 
pS∑˚
 = 
pOvÊ
->
aPaylﬂd
;

1955 
pNext
 = &
pOvÊ
->
iNext
;

1957 
n
 = 
nPaylﬂd
;

1958 if–
n
>
•a˚Le·
 )Ç = spaceLeft;

1959 
	`mem˝y
(
pS∑˚
, 
pPaylﬂd
, 
n
);

1960 
nPaylﬂd
 -
n
;

1961 if–
nPaylﬂd
==0 && 
pD©a
 ){

1962 
pPaylﬂd
 = 
pD©a
;

1963 
nPaylﬂd
 = 
nD©a
;

1964 
pD©a
 = 0;

1966 
pPaylﬂd
 +
n
;

1968 
•a˚Le·
 -
n
;

1969 
pS∑˚
 +
n
;

1971 *
pNext
 = 0;

1972 if–
pPri‹
 ){

1973 
	`sqlôïagî_uƒef
(
pPri‹
);

1975  
SQLITE_OK
;

1976 
	}
}

1983 
	$ª∑ª¡Page
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
, 
MemPage
 *
pNewP¨ít
,
idx
){

1984 
MemPage
 *
pThis
;

1986 if–
pgno
==0 ) ;

1987 
	`as£π
–
pPagî
!=0 );

1988 
pThis
 = 
	`sqlôïagî_lookup
(
pPagî
, 
pgno
);

1989 if–
pThis
 &&ÖThis->
isInô
 ){

1990 if–
pThis
->
pP¨ít
!=
pNewP¨ít
 ){

1991 if–
pThis
->
pP¨ít
 ) 
	`sqlôïagî_uƒef
(pThis->pParent);

1992 
pThis
->
pP¨ít
 = 
pNewP¨ít
;

1993 if–
pNewP¨ít
 ) 
	`sqlôïagî_ªf
(pNewParent);

1995 
pThis
->
idxP¨ít
 = 
idx
;

1996 
	`sqlôïagî_uƒef
(
pThis
);

1998 
	}
}

2008 
	$ª∑ª¡ChûdPages
(
Båì
 *
pBt
, 
MemPage
 *
pPage
){

2009 
i
;

2010 
Pagî
 *
pPagî
 = 
pBt
->pPager;

2011 
i
=0; i<
pPage
->
nCñl
; i++){

2012 
	`ª∑ª¡Page
(
pPagî
, 
	`SWAB32
(
pBt
, 
pPage
->
≠Cñl
[
i
]->
h
.
À·Chûd
),ÖPage, i);

2014 
	`ª∑ª¡Page
(
pPagî
, 
	`SWAB32
(
pBt
, 
pPage
->
u
.
hdr
.
rightChûd
),ÖPage, 
i
);

2015 
pPage
->
idxShi·
 = 0;

2016 
	}
}

2031 
	$dr›Cñl
(
Båì
 *
pBt
, 
MemPage
 *
pPage
, 
idx
, 
sz
){

2032 
j
;

2033 
	`as£π
–
idx
>=0 && idx<
pPage
->
nCñl
 );

2034 
	`as£π
–
sz
==
	`˚ŒSize
(
pBt
, 
pPage
->
≠Cñl
[
idx
]) );

2035 
	`as£π
–
	`sqlôïagî_iswrôóbÀ
(
pPage
) );

2036 
	`‰ìS∑˚
(
pBt
, 
pPage
, 
	`Addr
’Page->
≠Cñl
[
idx
]Ë- Addr’Page), 
sz
);

2037 
j
=
idx
; j<
pPage
->
nCñl
-1; j++){

2038 
pPage
->
≠Cñl
[
j
] =ÖPage->apCell[j+1];

2040 
pPage
->
nCñl
--;

2041 
pPage
->
idxShi·
 = 1;

2042 
	}
}

2057 
	$ö£πCñl
(
Båì
 *
pBt
, 
MemPage
 *
pPage
, 
i
, 
Cñl
 *
pCñl
, 
sz
){

2058 
idx
, 
j
;

2059 
	`as£π
–
i
>=0 && i<=
pPage
->
nCñl
 );

2060 
	`as£π
–
sz
==
	`˚ŒSize
(
pBt
, 
pCñl
) );

2061 
	`as£π
–
	`sqlôïagî_iswrôóbÀ
(
pPage
) );

2062 
idx
 = 
	`ÆloˇãS∑˚
(
pBt
, 
pPage
, 
sz
);

2063 
j
=
pPage
->
nCñl
; j>
i
; j--){

2064 
pPage
->
≠Cñl
[
j
] =ÖPage->apCell[j-1];

2066 
pPage
->
nCñl
++;

2067 if–
idx
<=0 ){

2068 
pPage
->
isOvîfuŒ
 = 1;

2069 
pPage
->
≠Cñl
[
i
] = 
pCñl
;

2071 
	`mem˝y
(&
pPage
->
u
.
aDisk
[
idx
], 
pCñl
, 
sz
);

2072 
pPage
->
≠Cñl
[
i
] = (
Cñl
*)&pPage->
u
.
aDisk
[
idx
];

2074 
pPage
->
idxShi·
 = 1;

2075 
	}
}

2083 
	$ªlökCñlLi°
(
Båì
 *
pBt
, 
MemPage
 *
pPage
){

2084 
i
;

2085 
u16
 *
pIdx
;

2086 
	`as£π
–
	`sqlôïagî_iswrôóbÀ
(
pPage
) );

2087 
pIdx
 = &
pPage
->
u
.
hdr
.
fú°Cñl
;

2088 
i
=0; i<
pPage
->
nCñl
; i++){

2089 
idx
 = 
	`Addr
(
pPage
->
≠Cñl
[
i
]) - Addr(pPage);

2090 
	`as£π
–
idx
>0 && idx<
SQLITE_USABLE_SIZE
 );

2091 *
pIdx
 = 
	`SWAB16
(
pBt
, 
idx
);

2092 
pIdx
 = &
pPage
->
≠Cñl
[
i
]->
h
.
iNext
;

2094 *
pIdx
 = 0;

2095 
	}
}

2103 
	$c›yPage
(
MemPage
 *
pTo
, MemPagê*
pFrom
){

2104 
u±r
 
‰om
, 
to
;

2105 
i
;

2106 
	`mem˝y
(
pTo
->
u
.
aDisk
, 
pFrom
->u.aDisk, 
SQLITE_USABLE_SIZE
);

2107 
pTo
->
pP¨ít
 = 0;

2108 
pTo
->
isInô
 = 1;

2109 
pTo
->
nCñl
 = 
pFrom
->nCell;

2110 
pTo
->
nFªe
 = 
pFrom
->nFree;

2111 
pTo
->
isOvîfuŒ
 = 
pFrom
->isOverfull;

2112 
to
 = 
	`Addr
(
pTo
);

2113 
‰om
 = 
	`Addr
(
pFrom
);

2114 
i
=0; i<
pTo
->
nCñl
; i++){

2115 
u±r
 
x
 = 
	`Addr
(
pFrom
->
≠Cñl
[
i
]);

2116 if–
x
>
‰om
 && x<‰om+
SQLITE_USABLE_SIZE
 ){

2117 *((
u±r
*)&
pTo
->
≠Cñl
[
i
]Ë
x
 + 
to
 - 
‰om
;

2119 
pTo
->
≠Cñl
[
i
] = 
pFrom
->apCell[i];

2122 
	}
}

2136 
	#NN
 1

	)

2137 
	#NB
 (
NN
*2+1Ë

	)

2179 
	$bÆ™˚
(
Båì
 *
pBt
, 
MemPage
 *
pPage
, 
BtCurs‹
 *
pCur
){

2180 
MemPage
 *
pP¨ít
;

2181 
nCñl
;

2182 
nOld
;

2183 
nNew
;

2184 
nDiv
;

2185 
i
, 
j
, 
k
;

2186 
idx
;

2187 
nxDiv
;

2188 
rc
;

2189 
iCur
;

2190 
MemPage
 *
pOldCurPage
;

2191 
subtŸÆ
;

2192 
MemPage
 *
exåaUƒef
 = 0;

2193 
MemPage
 *
≠Old
[
NB
];

2194 
Pgno
 
pgnoOld
[
NB
];

2195 
MemPage
 *
≠New
[
NB
+1];

2196 
Pgno
 
pgnoNew
[
NB
+1];

2197 
idxDiv
[
NB
];

2198 
Cñl
 *
≠Div
[
NB
];

2199 
Cñl
 
aTemp
[
NB
];

2200 
˙tNew
[
NB
+1];

2201 
szNew
[
NB
+1];

2202 
MemPage
 
aOld
[
NB
];

2203 
Cñl
 *
≠Cñl
[(
MX_CELL
+2)*
NB
];

2204 
szCñl
[(
MX_CELL
+2)*
NB
];

2210 
	`as£π
–
	`sqlôïagî_iswrôóbÀ
(
pPage
) );

2211 if–!
pPage
->
isOvîfuŒ
 &&ÖPage->
nFªe
<
SQLITE_USABLE_SIZE
/2

2212 && 
pPage
->
nCñl
>=2){

2213 
	`ªlökCñlLi°
(
pBt
, 
pPage
);

2214  
SQLITE_OK
;

2222 
pP¨ít
 = 
pPage
->pParent;

2223 if–
pP¨ít
==0 ){

2224 
Pgno
 
pgnoChûd
;

2225 
MemPage
 *
pChûd
;

2226 
	`as£π
–
pPage
->
isInô
 );

2227 if–
pPage
->
nCñl
==0 ){

2228 if–
pPage
->
u
.
hdr
.
rightChûd
 ){

2234 
pgnoChûd
 = 
	`SWAB32
(
pBt
, 
pPage
->
u
.
hdr
.
rightChûd
);

2235 
rc
 = 
	`sqlôïagî_gë
(
pBt
->
pPagî
, 
pgnoChûd
, (**)&
pChûd
);

2236 if–
rc
 ) Ñc;

2237 
	`mem˝y
(
pPage
, 
pChûd
, 
SQLITE_USABLE_SIZE
);

2238 
pPage
->
isInô
 = 0;

2239 
rc
 = 
	`öôPage
(
pBt
, 
pPage
, 
	`sqlôïagî_∑gíumbî
(pPage), 0);

2240 
	`as£π
–
rc
==
SQLITE_OK
 );

2241 
	`ª∑ª¡ChûdPages
(
pBt
, 
pPage
);

2242 if–
pCur
 &&ÖCur->
pPage
==
pChûd
 ){

2243 
	`sqlôïagî_uƒef
(
pChûd
);

2244 
pCur
->
pPage
 =ÖPage;

2245 
	`sqlôïagî_ªf
(
pPage
);

2247 
	`‰ìPage
(
pBt
, 
pChûd
, 
pgnoChûd
);

2248 
	`sqlôïagî_uƒef
(
pChûd
);

2250 
	`ªlökCñlLi°
(
pBt
, 
pPage
);

2252  
SQLITE_OK
;

2254 if–!
pPage
->
isOvîfuŒ
 ){

2257 
	`ªlökCñlLi°
(
pBt
, 
pPage
);

2258  
SQLITE_OK
;

2268 
rc
 = 
	`sqlôïagî_wrôe
(
pPage
);

2269 if–
rc
 ) Ñc;

2270 
rc
 = 
	`ÆloˇãPage
(
pBt
, &
pChûd
, &
pgnoChûd
, 
	`sqlôïagî_∑gíumbî
(
pPage
));

2271 if–
rc
 ) Ñc;

2272 
	`as£π
–
	`sqlôïagî_iswrôóbÀ
(
pChûd
) );

2273 
	`c›yPage
(
pChûd
, 
pPage
);

2274 
pChûd
->
pP¨ít
 = 
pPage
;

2275 
pChûd
->
idxP¨ít
 = 0;

2276 
	`sqlôïagî_ªf
(
pPage
);

2277 
pChûd
->
isOvîfuŒ
 = 1;

2278 if–
pCur
 &&ÖCur->
pPage
==pPage ){

2279 
	`sqlôïagî_uƒef
(
pPage
);

2280 
pCur
->
pPage
 = 
pChûd
;

2282 
exåaUƒef
 = 
pChûd
;

2284 
	`zîoPage
(
pBt
, 
pPage
);

2285 
pPage
->
u
.
hdr
.
rightChûd
 = 
	`SWAB32
(
pBt
, 
pgnoChûd
);

2286 
pP¨ít
 = 
pPage
;

2287 
pPage
 = 
pChûd
;

2289 
rc
 = 
	`sqlôïagî_wrôe
(
pP¨ít
);

2290 if–
rc
 ) Ñc;

2291 
	`as£π
–
pP¨ít
->
isInô
 );

2298 if–
pP¨ít
->
idxShi·
 ){

2299 
Pgno
 
pgno
, 
swabPgno
;

2300 
pgno
 = 
	`sqlôïagî_∑gíumbî
(
pPage
);

2301 
swabPgno
 = 
	`SWAB32
(
pBt
, 
pgno
);

2302 
idx
=0; idx<
pP¨ít
->
nCñl
; idx++){

2303 if–
pP¨ít
->
≠Cñl
[
idx
]->
h
.
À·Chûd
==
swabPgno
 ){

2307 
	`as£π
–
idx
<
pP¨ít
->
nCñl
 ||ÖP¨ít->
u
.
hdr
.
rightChûd
==
swabPgno
 );

2309 
idx
 = 
pPage
->
idxP¨ít
;

2316 
nOld
 = 
nNew
 = 0;

2317 
	`sqlôïagî_ªf
(
pP¨ít
);

2326 
nxDiv
 = 
idx
 - 
NN
;

2327 if–
nxDiv
 + 
NB
 > 
pP¨ít
->
nCñl
 ){

2328 
nxDiv
 = 
pP¨ít
->
nCñl
 - 
NB
 + 1;

2330 if–
nxDiv
<0 ){

2331 
nxDiv
 = 0;

2333 
nDiv
 = 0;

2334 
i
=0, 
k
=
nxDiv
; i<
NB
; i++, k++){

2335 if–
k
<
pP¨ít
->
nCñl
 ){

2336 
idxDiv
[
i
] = 
k
;

2337 
≠Div
[
i
] = 
pP¨ít
->
≠Cñl
[
k
];

2338 
nDiv
++;

2339 
pgnoOld
[
i
] = 
	`SWAB32
(
pBt
, 
≠Div
[i]->
h
.
À·Chûd
);

2340 }if–
k
==
pP¨ít
->
nCñl
 ){

2341 
pgnoOld
[
i
] = 
	`SWAB32
(
pBt
, 
pP¨ít
->
u
.
hdr
.
rightChûd
);

2345 
rc
 = 
	`sqlôïagî_gë
(
pBt
->
pPagî
, 
pgnoOld
[
i
], (**)&
≠Old
[i]);

2346 if–
rc
 ) 
bÆ™˚_˛ónup
;

2347 
rc
 = 
	`öôPage
(
pBt
, 
≠Old
[
i
], 
pgnoOld
[i], 
pP¨ít
);

2348 if–
rc
 ) 
bÆ™˚_˛ónup
;

2349 
≠Old
[
i
]->
idxP¨ít
 = 
k
;

2350 
nOld
++;

2361 if–
pCur
 ){

2362 
iCur
 = 0;

2363 
i
=0; i<
nOld
; i++){

2364 if–
pCur
->
pPage
==
≠Old
[
i
] ){

2365 
iCur
 +
pCur
->
idx
;

2368 
iCur
 +
≠Old
[
i
]->
nCñl
;

2369 if–
i
<
nOld
-1 && 
pCur
->
pPage
==
pP¨ít
 &&ÖCur->
idx
==
idxDiv
[i] ){

2372 
iCur
++;

2374 
pOldCurPage
 = 
pCur
->
pPage
;

2383 
i
=0; i<
nOld
; i++){

2384 
	`c›yPage
(&
aOld
[
i
], 
≠Old
[i]);

2392 
nCñl
 = 0;

2393 
i
=0; i<
nOld
; i++){

2394 
MemPage
 *
pOld
 = &
aOld
[
i
];

2395 
j
=0; j<
pOld
->
nCñl
; j++){

2396 
≠Cñl
[
nCñl
] = 
pOld
->≠Cñl[
j
];

2397 
szCñl
[
nCñl
] = 
	`˚ŒSize
(
pBt
, 
≠Cñl
[nCell]);

2398 
nCñl
++;

2400 if–
i
<
nOld
-1 ){

2401 
szCñl
[
nCñl
] = 
	`˚ŒSize
(
pBt
, 
≠Div
[
i
]);

2402 
	`mem˝y
(&
aTemp
[
i
], 
≠Div
[i], 
szCñl
[
nCñl
]);

2403 
≠Cñl
[
nCñl
] = &
aTemp
[
i
];

2404 
	`dr›Cñl
(
pBt
, 
pP¨ít
, 
nxDiv
, 
szCñl
[
nCñl
]);

2405 
	`as£π
–
	`SWAB32
(
pBt
, 
≠Cñl
[
nCñl
]->
h
.
À·Chûd
)==
pgnoOld
[
i
] );

2406 
≠Cñl
[
nCñl
]->
h
.
À·Chûd
 = 
pOld
->
u
.
hdr
.
rightChûd
;

2407 
nCñl
++;

2421 
subtŸÆ
=
k
=
i
=0; i<
nCñl
; i++){

2422 
subtŸÆ
 +
szCñl
[
i
];

2423 if–
subtŸÆ
 > 
USABLE_SPACE
 ){

2424 
szNew
[
k
] = 
subtŸÆ
 - 
szCñl
[
i
];

2425 
˙tNew
[
k
] = 
i
;

2426 
subtŸÆ
 = 0;

2427 
k
++;

2430 
szNew
[
k
] = 
subtŸÆ
;

2431 
˙tNew
[
k
] = 
nCñl
;

2432 
k
++;

2433 
i
=
k
-1; i>0; i--){

2434  
szNew
[
i
]<
USABLE_SPACE
/2 ){

2435 
˙tNew
[
i
-1]--;

2436 
	`as£π
–
˙tNew
[
i
-1]>0 );

2437 
szNew
[
i
] +
szCñl
[
˙tNew
[i-1]];

2438 
szNew
[
i
-1] -
szCñl
[
˙tNew
[i-1]-1];

2441 
	`as£π
–
˙tNew
[0]>0 );

2446 
i
=0; i<
k
; i++){

2447 if–
i
<
nOld
 ){

2448 
≠New
[
i
] = 
≠Old
[i];

2449 
pgnoNew
[
i
] = 
pgnoOld
[i];

2450 
≠Old
[
i
] = 0;

2451 
	`sqlôïagî_wrôe
(
≠New
[
i
]);

2453 
rc
 = 
	`ÆloˇãPage
(
pBt
, &
≠New
[
i
], &
pgnoNew
[i],ÖgnoNew[i-1]);

2454 if–
rc
 ) 
bÆ™˚_˛ónup
;

2456 
nNew
++;

2457 
	`zîoPage
(
pBt
, 
≠New
[
i
]);

2458 
≠New
[
i
]->
isInô
 = 1;

2463  
i
<
nOld
 ){

2464 
rc
 = 
	`‰ìPage
(
pBt
, 
≠Old
[
i
], 
pgnoOld
[i]);

2465 if–
rc
 ) 
bÆ™˚_˛ónup
;

2466 
	`sqlôïagî_uƒef
(
≠Old
[
i
]);

2467 
≠Old
[
i
] = 0;

2468 
i
++;

2485 
i
=0; i<
k
-1; i++){

2486 
möV
 = 
pgnoNew
[
i
];

2487 
möI
 = 
i
;

2488 
j
=
i
+1; j<
k
; j++){

2489 if–
pgnoNew
[
j
]<()
möV
 ){

2490 
möI
 = 
j
;

2491 
möV
 = 
pgnoNew
[
j
];

2494 if–
möI
>
i
 ){

2495 
t
;

2496 
MemPage
 *
pT
;

2497 
t
 = 
pgnoNew
[
i
];

2498 
pT
 = 
≠New
[
i
];

2499 
pgnoNew
[
i
] =ÖgnoNew[
möI
];

2500 
≠New
[
i
] =ápNew[
möI
];

2501 
pgnoNew
[
möI
] = 
t
;

2502 
≠New
[
möI
] = 
pT
;

2510 
j
 = 0;

2511 
i
=0; i<
nNew
; i++){

2512 
MemPage
 *
pNew
 = 
≠New
[
i
];

2513  
j
<
˙tNew
[
i
] ){

2514 
	`as£π
–
pNew
->
nFªe
>=
szCñl
[
j
] );

2515 if–
pCur
 && 
iCur
==
j
 ){ÖCur->
pPage
 = 
pNew
;ÖCur->
idx
 =ÖNew->
nCñl
; }

2516 
	`ö£πCñl
(
pBt
, 
pNew
,ÖNew->
nCñl
, 
≠Cñl
[
j
], 
szCñl
[j]);

2517 
j
++;

2519 
	`as£π
–
pNew
->
nCñl
>0 );

2520 
	`as£π
–!
pNew
->
isOvîfuŒ
 );

2521 
	`ªlökCñlLi°
(
pBt
, 
pNew
);

2522 if–
i
<
nNew
-1 && 
j
<
nCñl
 ){

2523 
pNew
->
u
.
hdr
.
rightChûd
 = 
≠Cñl
[
j
]->
h
.
À·Chûd
;

2524 
≠Cñl
[
j
]->
h
.
À·Chûd
 = 
	`SWAB32
(
pBt
, 
pgnoNew
[
i
]);

2525 if–
pCur
 && 
iCur
==
j
 ){ÖCur->
pPage
 = 
pP¨ít
;ÖCur->
idx
 = 
nxDiv
; }

2526 
	`ö£πCñl
(
pBt
, 
pP¨ít
, 
nxDiv
, 
≠Cñl
[
j
], 
szCñl
[j]);

2527 
j
++;

2528 
nxDiv
++;

2531 
	`as£π
–
j
==
nCñl
 );

2532 
≠New
[
nNew
-1]->
u
.
hdr
.
rightChûd
 = 
aOld
[
nOld
-1].u.hdr.rightChild;

2533 if–
nxDiv
==
pP¨ít
->
nCñl
 ){

2534 
pP¨ít
->
u
.
hdr
.
rightChûd
 = 
	`SWAB32
(
pBt
, 
pgnoNew
[
nNew
-1]);

2536 
pP¨ít
->
≠Cñl
[
nxDiv
]->
h
.
À·Chûd
 = 
	`SWAB32
(
pBt
, 
pgnoNew
[
nNew
-1]);

2538 if–
pCur
 ){

2539 if–
j
<=
iCur
 && 
pCur
->
pPage
==
pP¨ít
 &&ÖCur->
idx
>
idxDiv
[
nOld
-1] ){

2540 
	`as£π
–
pCur
->
pPage
==
pOldCurPage
 );

2541 
pCur
->
idx
 +
nNew
 - 
nOld
;

2543 
	`as£π
–
pOldCurPage
!=0 );

2544 
	`sqlôïagî_ªf
(
pCur
->
pPage
);

2545 
	`sqlôïagî_uƒef
(
pOldCurPage
);

2552 
i
=0; i<
nNew
; i++){

2553 
	`ª∑ª¡ChûdPages
(
pBt
, 
≠New
[
i
]);

2555 
	`ª∑ª¡ChûdPages
(
pBt
, 
pP¨ít
);

2560 
rc
 = 
	`bÆ™˚
(
pBt
, 
pP¨ít
, 
pCur
);

2565 
bÆ™˚_˛ónup
:

2566 if–
exåaUƒef
 ){

2567 
	`sqlôïagî_uƒef
(
exåaUƒef
);

2569 
i
=0; i<
nOld
; i++){

2570 if–
≠Old
[
i
]!=0 &&ápOld[i]!=&
aOld
[i] ) 
	`sqlôïagî_uƒef
(apOld[i]);

2572 
i
=0; i<
nNew
; i++){

2573 
	`sqlôïagî_uƒef
(
≠New
[
i
]);

2575 if–
pCur
 &&ÖCur->
pPage
==0 ){

2576 
pCur
->
pPage
 = 
pP¨ít
;

2577 
pCur
->
idx
 = 0;

2579 
	`sqlôïagî_uƒef
(
pP¨ít
);

2581  
rc
;

2582 
	}
}

2599 
	$checkRódLocks
(
BtCurs‹
 *
pCur
){

2600 
BtCurs‹
 *
p
;

2601 
	`as£π
–
pCur
->
wrFœg
 );

2602 
p
=
pCur
->
pSh¨ed
;Ö!=pCur;Ö=p->pShared){

2603 
	`as£π
–
p
 );

2604 
	`as£π
–
p
->
pgnoRoŸ
==
pCur
->pgnoRoot );

2605 if–
p
->
wrFœg
==0 )  
SQLITE_LOCKED
;

2606 if–
	`sqlôïagî_∑gíumbî
(
p
->
pPage
)!ı->
pgnoRoŸ
 ){

2607 
	`moveToRoŸ
(
p
);

2610  
SQLITE_OK
;

2611 
	}
}

2619 
	$fûeBåìIn£π
(

2620 
BtCurs‹
 *
pCur
,

2621 c⁄° *
pKey
, 
nKey
,

2622 c⁄° *
pD©a
, 
nD©a


2624 
Cñl
 
√wCñl
;

2625 
rc
;

2626 
loc
;

2627 
szNew
;

2628 
MemPage
 *
pPage
;

2629 
Båì
 *
pBt
 = 
pCur
->pBt;

2631 if–
pCur
->
pPage
==0 ){

2632  
SQLITE_ABORT
;

2634 if–!
pBt
->
öTøns
 || 
nKey
+
nD©a
==0 ){

2636  
pBt
->
ªadO∆y
 ? 
SQLITE_READONLY
 : 
SQLITE_ERROR
;

2638 
	`as£π
–!
pBt
->
ªadO∆y
 );

2639 if–!
pCur
->
wrFœg
 ){

2640  
SQLITE_PERM
;

2642 if–
	`checkRódLocks
(
pCur
) ){

2643  
SQLITE_LOCKED
;

2645 
rc
 = 
	`fûeBåìMovëo
(
pCur
, 
pKey
, 
nKey
, &
loc
);

2646 if–
rc
 ) Ñc;

2647 
pPage
 = 
pCur
->pPage;

2648 
	`as£π
–
pPage
->
isInô
 );

2649 
rc
 = 
	`sqlôïagî_wrôe
(
pPage
);

2650 if–
rc
 ) Ñc;

2651 
rc
 = 
	`fûlInCñl
(
pBt
, &
√wCñl
, 
pKey
, 
nKey
, 
pD©a
, 
nD©a
);

2652 if–
rc
 ) Ñc;

2653 
szNew
 = 
	`˚ŒSize
(
pBt
, &
√wCñl
);

2654 if–
loc
==0 ){

2655 
√wCñl
.
h
.
À·Chûd
 = 
pPage
->
≠Cñl
[
pCur
->
idx
]->h.leftChild;

2656 
rc
 = 
	`˛órCñl
(
pBt
, 
pPage
->
≠Cñl
[
pCur
->
idx
]);

2657 if–
rc
 ) Ñc;

2658 
	`dr›Cñl
(
pBt
, 
pPage
, 
pCur
->
idx
, 
	`˚ŒSize
’Bt,ÖPage->
≠Cñl
[pCur->idx]));

2659 }if–
loc
<0 && 
pPage
->
nCñl
>0 ){

2660 
	`as£π
–
pPage
->
u
.
hdr
.
rightChûd
==0 );

2661 
pCur
->
idx
++;

2663 
	`as£π
–
pPage
->
u
.
hdr
.
rightChûd
==0 );

2665 
	`ö£πCñl
(
pBt
, 
pPage
, 
pCur
->
idx
, &
√wCñl
, 
szNew
);

2666 
rc
 = 
	`bÆ™˚
(
pCur
->
pBt
, 
pPage
,ÖCur);

2669 
pCur
->
eSkù
 = 
SKIP_INVALID
;

2670  
rc
;

2671 
	}
}

2687 
	$fûeBåìDñëe
(
BtCurs‹
 *
pCur
){

2688 
MemPage
 *
pPage
 = 
pCur
->pPage;

2689 
Cñl
 *
pCñl
;

2690 
rc
;

2691 
Pgno
 
pgnoChûd
;

2692 
Båì
 *
pBt
 = 
pCur
->pBt;

2694 
	`as£π
–
pPage
->
isInô
 );

2695 if–
pCur
->
pPage
==0 ){

2696  
SQLITE_ABORT
;

2698 if–!
pBt
->
öTøns
 ){

2700  
pBt
->
ªadO∆y
 ? 
SQLITE_READONLY
 : 
SQLITE_ERROR
;

2702 
	`as£π
–!
pBt
->
ªadO∆y
 );

2703 if–
pCur
->
idx
 >
pPage
->
nCñl
 ){

2704  
SQLITE_ERROR
;

2706 if–!
pCur
->
wrFœg
 ){

2707  
SQLITE_PERM
;

2709 if–
	`checkRódLocks
(
pCur
) ){

2710  
SQLITE_LOCKED
;

2712 
rc
 = 
	`sqlôïagî_wrôe
(
pPage
);

2713 if–
rc
 ) Ñc;

2714 
pCñl
 = 
pPage
->
≠Cñl
[
pCur
->
idx
];

2715 
pgnoChûd
 = 
	`SWAB32
(
pBt
, 
pCñl
->
h
.
À·Chûd
);

2716 
	`˛órCñl
(
pBt
, 
pCñl
);

2717 if–
pgnoChûd
 ){

2725 
BtCurs‹
 
ÀafCur
;

2726 
Cñl
 *
pNext
;

2727 
szNext
;

2728 
nŸU£d
;

2729 
	`gëTempCurs‹
(
pCur
, &
ÀafCur
);

2730 
rc
 = 
	`fûeBåìNext
(&
ÀafCur
, &
nŸU£d
);

2731 if–
rc
!=
SQLITE_OK
 ){

2732 if–
rc
!=
SQLITE_NOMEM
 )Ñ¯
SQLITE_CORRUPT
;

2733  
rc
;

2735 
rc
 = 
	`sqlôïagî_wrôe
(
ÀafCur
.
pPage
);

2736 if–
rc
 ) Ñc;

2737 
	`dr›Cñl
(
pBt
, 
pPage
, 
pCur
->
idx
, 
	`˚ŒSize
’Bt, 
pCñl
));

2738 
pNext
 = 
ÀafCur
.
pPage
->
≠Cñl
[ÀafCur.
idx
];

2739 
szNext
 = 
	`˚ŒSize
(
pBt
, 
pNext
);

2740 
pNext
->
h
.
À·Chûd
 = 
	`SWAB32
(
pBt
, 
pgnoChûd
);

2741 
	`ö£πCñl
(
pBt
, 
pPage
, 
pCur
->
idx
, 
pNext
, 
szNext
);

2742 
rc
 = 
	`bÆ™˚
(
pBt
, 
pPage
, 
pCur
);

2743 if–
rc
 ) Ñc;

2744 
pCur
->
eSkù
 = 
SKIP_NEXT
;

2745 
	`dr›Cñl
(
pBt
, 
ÀafCur
.
pPage
,ÜófCur.
idx
, 
szNext
);

2746 
rc
 = 
	`bÆ™˚
(
pBt
, 
ÀafCur
.
pPage
, 
pCur
);

2747 
	`ªÀa£TempCurs‹
(&
ÀafCur
);

2749 
	`dr›Cñl
(
pBt
, 
pPage
, 
pCur
->
idx
, 
	`˚ŒSize
’Bt, 
pCñl
));

2750 if–
pCur
->
idx
>=
pPage
->
nCñl
 ){

2751 
pCur
->
idx
 = 
pPage
->
nCñl
-1;

2752 if–
pCur
->
idx
<0 ){

2753 
pCur
->
idx
 = 0;

2754 
pCur
->
eSkù
 = 
SKIP_NEXT
;

2756 
pCur
->
eSkù
 = 
SKIP_PREV
;

2759 
pCur
->
eSkù
 = 
SKIP_NEXT
;

2761 
rc
 = 
	`bÆ™˚
(
pBt
, 
pPage
, 
pCur
);

2763  
rc
;

2764 
	}
}

2776 
	$fûeBåìCª©eTabÀ
(
Båì
 *
pBt
, *
piTabÀ
){

2777 
MemPage
 *
pRoŸ
;

2778 
Pgno
 
pgnoRoŸ
;

2779 
rc
;

2780 if–!
pBt
->
öTøns
 ){

2782  
pBt
->
ªadO∆y
 ? 
SQLITE_READONLY
 : 
SQLITE_ERROR
;

2784 if–
pBt
->
ªadO∆y
 ){

2785  
SQLITE_READONLY
;

2787 
rc
 = 
	`ÆloˇãPage
(
pBt
, &
pRoŸ
, &
pgnoRoŸ
, 0);

2788 if–
rc
 ) Ñc;

2789 
	`as£π
–
	`sqlôïagî_iswrôóbÀ
(
pRoŸ
) );

2790 
	`zîoPage
(
pBt
, 
pRoŸ
);

2791 
	`sqlôïagî_uƒef
(
pRoŸ
);

2792 *
piTabÀ
 = ()
pgnoRoŸ
;

2793  
SQLITE_OK
;

2794 
	}
}

2800 
	$˛órD©aba£Page
(
Båì
 *
pBt
, 
Pgno
 
pgno
, 
‰ìPageFœg
){

2801 
MemPage
 *
pPage
;

2802 
rc
;

2803 
Cñl
 *
pCñl
;

2804 
idx
;

2806 
rc
 = 
	`sqlôïagî_gë
(
pBt
->
pPagî
, 
pgno
, (**)&
pPage
);

2807 if–
rc
 ) Ñc;

2808 
rc
 = 
	`sqlôïagî_wrôe
(
pPage
);

2809 if–
rc
 ) Ñc;

2810 
rc
 = 
	`öôPage
(
pBt
, 
pPage
, 
pgno
, 0);

2811 if–
rc
 ) Ñc;

2812 
idx
 = 
	`SWAB16
(
pBt
, 
pPage
->
u
.
hdr
.
fú°Cñl
);

2813  
idx
>0 ){

2814 
pCñl
 = (
Cñl
*)&
pPage
->
u
.
aDisk
[
idx
];

2815 
idx
 = 
	`SWAB16
(
pBt
, 
pCñl
->
h
.
iNext
);

2816 if–
pCñl
->
h
.
À·Chûd
 ){

2817 
rc
 = 
	`˛órD©aba£Page
(
pBt
, 
	`SWAB32
’Bt, 
pCñl
->
h
.
À·Chûd
), 1);

2818 if–
rc
 ) Ñc;

2820 
rc
 = 
	`˛órCñl
(
pBt
, 
pCñl
);

2821 if–
rc
 ) Ñc;

2823 if–
pPage
->
u
.
hdr
.
rightChûd
 ){

2824 
rc
 = 
	`˛órD©aba£Page
(
pBt
, 
	`SWAB32
’Bt, 
pPage
->
u
.
hdr
.
rightChûd
), 1);

2825 if–
rc
 ) Ñc;

2827 if–
‰ìPageFœg
 ){

2828 
rc
 = 
	`‰ìPage
(
pBt
, 
pPage
, 
pgno
);

2830 
	`zîoPage
(
pBt
, 
pPage
);

2832 
	`sqlôïagî_uƒef
(
pPage
);

2833  
rc
;

2834 
	}
}

2839 
	$fûeBåìCÀ¨TabÀ
(
Båì
 *
pBt
, 
iTabÀ
){

2840 
rc
;

2841 
BtCurs‹
 *
pCur
;

2842 if–!
pBt
->
öTøns
 ){

2843  
pBt
->
ªadO∆y
 ? 
SQLITE_READONLY
 : 
SQLITE_ERROR
;

2845 
pCur
=
pBt
->
pCurs‹
;ÖCur;ÖCurıCur->
pNext
){

2846 if–
pCur
->
pgnoRoŸ
==(
Pgno
)
iTabÀ
 ){

2847 if–
pCur
->
wrFœg
==0 )  
SQLITE_LOCKED
;

2848 
	`moveToRoŸ
(
pCur
);

2851 
rc
 = 
	`˛órD©aba£Page
(
pBt
, (
Pgno
)
iTabÀ
, 0);

2852 if–
rc
 ){

2853 
	`fûeBåìRﬁlback
(
pBt
);

2855  
rc
;

2856 
	}
}

2863 
	$fûeBåìDr›TabÀ
(
Båì
 *
pBt
, 
iTabÀ
){

2864 
rc
;

2865 
MemPage
 *
pPage
;

2866 
BtCurs‹
 *
pCur
;

2867 if–!
pBt
->
öTøns
 ){

2868  
pBt
->
ªadO∆y
 ? 
SQLITE_READONLY
 : 
SQLITE_ERROR
;

2870 
pCur
=
pBt
->
pCurs‹
;ÖCur;ÖCurıCur->
pNext
){

2871 if–
pCur
->
pgnoRoŸ
==(
Pgno
)
iTabÀ
 ){

2872  
SQLITE_LOCKED
;

2875 
rc
 = 
	`sqlôïagî_gë
(
pBt
->
pPagî
, (
Pgno
)
iTabÀ
, (**)&
pPage
);

2876 if–
rc
 ) Ñc;

2877 
rc
 = 
	`fûeBåìCÀ¨TabÀ
(
pBt
, 
iTabÀ
);

2878 if–
rc
 ) Ñc;

2879 if–
iTabÀ
>2 ){

2880 
rc
 = 
	`‰ìPage
(
pBt
, 
pPage
, 
iTabÀ
);

2882 
	`zîoPage
(
pBt
, 
pPage
);

2884 
	`sqlôïagî_uƒef
(
pPage
);

2885  
rc
;

2886 
	}
}

2893 
	$c›yCñl
(
Båì
 *
pBtFrom
, 
BTªe
 *
pBtTo
, 
Cñl
 *
pCñl
){

2894 
Pagî
 *
pFromPagî
 = 
pBtFrom
->
pPagî
;

2895 
OvîÊowPage
 *
pOvÊ
;

2896 
Pgno
 
ovÊ
, 
√xtOvÊ
;

2897 
Pgno
 *
pPªv
;

2898 
rc
 = 
SQLITE_OK
;

2899 
MemPage
 *
pNew
, *
pPªvPg
;

2900 
Pgno
 
√w
;

2902 if–
	`NKEY
(
pBtTo
, 
pCñl
->
h
Ë+ 
	`NDATA
’BtTo,ÖCñl->hË<
MX_LOCAL_PAYLOAD
 ){

2903  
SQLITE_OK
;

2905 
pPªv
 = &
pCñl
->
ovÊ
;

2906 
pPªvPg
 = 0;

2907 
ovÊ
 = 
	`SWAB32
(
pBtTo
, 
pCñl
->ovfl);

2908  
ovÊ
 && 
rc
==
SQLITE_OK
 ){

2909 
rc
 = 
	`sqlôïagî_gë
(
pFromPagî
, 
ovÊ
, (**)&
pOvÊ
);

2910 if–
rc
 ) Ñc;

2911 
√xtOvÊ
 = 
	`SWAB32
(
pBtFrom
, 
pOvÊ
->
iNext
);

2912 
rc
 = 
	`ÆloˇãPage
(
pBtTo
, &
pNew
, &
√w
, 0);

2913 if–
rc
==
SQLITE_OK
 ){

2914 
rc
 = 
	`sqlôïagî_wrôe
(
pNew
);

2915 if–
rc
==
SQLITE_OK
 ){

2916 
	`mem˝y
(
pNew
, 
pOvÊ
, 
SQLITE_USABLE_SIZE
);

2917 *
pPªv
 = 
	`SWAB32
(
pBtTo
, 
√w
);

2918 if–
pPªvPg
 ){

2919 
	`sqlôïagî_uƒef
(
pPªvPg
);

2921 
pPªv
 = &
pOvÊ
->
iNext
;

2922 
pPªvPg
 = 
pNew
;

2925 
	`sqlôïagî_uƒef
(
pOvÊ
);

2926 
ovÊ
 = 
√xtOvÊ
;

2928 if–
pPªvPg
 ){

2929 
	`sqlôïagî_uƒef
(
pPªvPg
);

2931  
rc
;

2932 
	}
}

2940 
	$c›yD©aba£Page
(

2941 
Båì
 *
pBtFrom
,

2942 
Pgno
 
pgnoFrom
,

2943 
Båì
 *
pBtTo
,

2944 
Pgno
 *
pTo


2946 
MemPage
 *
pPageFrom
, *
pPage
;

2947 
Pgno
 
to
;

2948 
rc
;

2949 
Cñl
 *
pCñl
;

2950 
idx
;

2952 
rc
 = 
	`sqlôïagî_gë
(
pBtFrom
->
pPagî
, 
pgno
, (**)&
pPageFrom
);

2953 if–
rc
 ) Ñc;

2954 
rc
 = 
	`ÆloˇãPage
(
pBt
, &
pPage
, 
pTo
, 0);

2955 if–
rc
==
SQLITE_OK
 ){

2956 
rc
 = 
	`sqlôïagî_wrôe
(
pPage
);

2958 if–
rc
==
SQLITE_OK
 ){

2959 
	`mem˝y
(
pPage
, 
pPageFrom
, 
SQLITE_USABLE_SIZE
);

2960 
idx
 = 
	`SWAB16
(
pBt
, 
pPage
->
u
.
hdr
.
fú°Cñl
);

2961  
idx
>0 ){

2962 
pCñl
 = (
Cñl
*)&
pPage
->
u
.
aDisk
[
idx
];

2963 
idx
 = 
	`SWAB16
(
pBt
, 
pCñl
->
h
.
iNext
);

2964 if–
pCñl
->
h
.
À·Chûd
 ){

2965 
Pgno
 
√wChld
;

2966 
rc
 = 
	`c›yD©aba£Page
(
pBtFrom
, 
	`SWAB32
’BtFrom, 
pCñl
->
h
.
À·Chûd
),

2967 
pBtTo
, &
√wChld
);

2968 if–
rc
 ) Ñc;

2969 
pCñl
->
h
.
À·Chûd
 = 
	`SWAB32
(
pBtFrom
, 
√wChld
);

2971 
rc
 = 
	`c›yCñl
(
pBtFrom
, 
pBtTo
, 
pCñl
);

2972 if–
rc
 ) Ñc;

2974 if–
pPage
->
u
.
hdr
.
rightChûd
 ){

2975 
Pgno
 
√wChld
;

2976 
rc
 = 
	`c›yD©aba£Page
(
pBtFrom
, 
	`SWAB32
’BtFrom, 
pPage
->
u
.
hdr
.
rightChûd
),

2977 
pBtTo
, &
√wChld
);

2978 if–
rc
 ) Ñc;

2979 
pPage
->
u
.
hdr
.
rightChûd
 = 
	`SWAB32
(
pBtTo
, 
√wChûd
);

2982 
	`sqlôïagî_uƒef
(
pPage
);

2983  
rc
;

2984 
	}
}

2990 
	$fûeBåìGëMëa
(
Båì
 *
pBt
, *
aMëa
){

2991 
PageO√
 *
pP1
;

2992 
rc
;

2993 
i
;

2995 
rc
 = 
	`sqlôïagî_gë
(
pBt
->
pPagî
, 1, (**)&
pP1
);

2996 if–
rc
 ) Ñc;

2997 
aMëa
[0] = 
	`SWAB32
(
pBt
, 
pP1
->
nFªe
);

2998 
i
=0; i<(
pP1
->
aMëa
)/(pP1->aMeta[0]); i++){

2999 
aMëa
[
i
+1] = 
	`SWAB32
(
pBt
, 
pP1
->aMeta[i]);

3001 
	`sqlôïagî_uƒef
(
pP1
);

3002  
SQLITE_OK
;

3003 
	}
}

3008 
	$fûeBåìUpd©eMëa
(
Båì
 *
pBt
, *
aMëa
){

3009 
PageO√
 *
pP1
;

3010 
rc
, 
i
;

3011 if–!
pBt
->
öTøns
 ){

3012  
pBt
->
ªadO∆y
 ? 
SQLITE_READONLY
 : 
SQLITE_ERROR
;

3014 
pP1
 = 
pBt
->
∑ge1
;

3015 
rc
 = 
	`sqlôïagî_wrôe
(
pP1
);

3016 if–
rc
 ) Ñc;

3017 
i
=0; i<(
pP1
->
aMëa
)/(pP1->aMeta[0]); i++){

3018 
pP1
->
aMëa
[
i
] = 
	`SWAB32
(
pBt
,áMeta[i+1]);

3020  
SQLITE_OK
;

3021 
	}
}

3033 #ifde‡
SQLITE_TEST


3034 
	$fûeBåìPageDump
(
Båì
 *
pBt
, 
pgno
, 
ªcursive
){

3035 
rc
;

3036 
MemPage
 *
pPage
;

3037 
i
, 
j
;

3038 
nFªe
;

3039 
u16
 
idx
;

3040 
ønge
[20];

3041 
∑ylﬂd
[20];

3042 
rc
 = 
	`sqlôïagî_gë
(
pBt
->
pPagî
, (
Pgno
)
pgno
, (**)&
pPage
);

3043 if–
rc
 ){

3044  
rc
;

3046 if–
ªcursive
 ) 
	`¥ötf
("PAGE %d:\n", 
pgno
);

3047 
i
 = 0;

3048 
idx
 = 
	`SWAB16
(
pBt
, 
pPage
->
u
.
hdr
.
fú°Cñl
);

3049  
idx
>0 && idx<=
SQLITE_USABLE_SIZE
-
MIN_CELL_SIZE
 ){

3050 
Cñl
 *
pCñl
 = (Cñl*)&
pPage
->
u
.
aDisk
[
idx
];

3051 
sz
 = 
	`˚ŒSize
(
pBt
, 
pCñl
);

3052 
	`•rötf
(
ønge
,"%d..%d", 
idx
, idx+
sz
-1);

3053 
sz
 = 
	`NKEY
(
pBt
, 
pCñl
->
h
Ë+ 
	`NDATA
(pBt,ÖCell->h);

3054 if–
sz
>(
∑ylﬂd
)-1 ) sz = (payload)-1;

3055 
	`mem˝y
(
∑ylﬂd
, 
pCñl
->
aPaylﬂd
, 
sz
);

3056 
j
=0; j<
sz
; j++){

3057 if–
∑ylﬂd
[
j
]<0x20 ||Öayload[j]>0x7f )Öayload[j] = '.';

3059 
∑ylﬂd
[
sz
] = 0;

3060 
	`¥ötf
(

3062 
i
, 
ønge
, ()
pCñl
->
h
.
À·Chûd
,

3063 
	`NKEY
(
pBt
, 
pCñl
->
h
), 
	`NDATA
(pBt,ÖCell->h),

3064 
∑ylﬂd


3066 if–
pPage
->
isInô
 &&ÖPage->
≠Cñl
[
i
]!=
pCñl
 ){

3067 
	`¥ötf
("****ápCñl[%d] d€†nŸ m©ch o¿¥i‹É¡ry ****\n", 
i
);

3069 
i
++;

3070 
idx
 = 
	`SWAB16
(
pBt
, 
pCñl
->
h
.
iNext
);

3072 if–
idx
!=0 ){

3073 
	`¥ötf
("ERROR:Çexà˚Œ index ouào‡ønge: %d\n", 
idx
);

3075 
	`¥ötf
("right_chûd: %d\n", 
	`SWAB32
(
pBt
, 
pPage
->
u
.
hdr
.
rightChûd
));

3076 
nFªe
 = 0;

3077 
i
 = 0;

3078 
idx
 = 
	`SWAB16
(
pBt
, 
pPage
->
u
.
hdr
.
fú°Fªe
);

3079  
idx
>0 && idx<
SQLITE_USABLE_SIZE
 ){

3080 
FªeBlk
 *
p
 = (FªeBlk*)&
pPage
->
u
.
aDisk
[
idx
];

3081 
	`•rötf
(
ønge
,"%d..%d", 
idx
, idx+
p
->
iSize
-1);

3082 
nFªe
 +
	`SWAB16
(
pBt
, 
p
->
iSize
);

3083 
	`¥ötf
("freeblock %2d: i=%-10s size=%-4dÅotal=%d\n",

3084 
i
, 
ønge
, 
	`SWAB16
(
pBt
, 
p
->
iSize
), 
nFªe
);

3085 
idx
 = 
	`SWAB16
(
pBt
, 
p
->
iNext
);

3086 
i
++;

3088 if–
idx
!=0 ){

3089 
	`¥ötf
("ERROR:Çexà‰ìblock index ouào‡ønge: %d\n", 
idx
);

3091 if–
ªcursive
 && 
pPage
->
u
.
hdr
.
rightChûd
!=0 ){

3092 
idx
 = 
	`SWAB16
(
pBt
, 
pPage
->
u
.
hdr
.
fú°Cñl
);

3093  
idx
>0 && idx<
SQLITE_USABLE_SIZE
-
MIN_CELL_SIZE
 ){

3094 
Cñl
 *
pCñl
 = (Cñl*)&
pPage
->
u
.
aDisk
[
idx
];

3095 
	`fûeBåìPageDump
(
pBt
, 
	`SWAB32
’Bt, 
pCñl
->
h
.
À·Chûd
), 1);

3096 
idx
 = 
	`SWAB16
(
pBt
, 
pCñl
->
h
.
iNext
);

3098 
	`fûeBåìPageDump
(
pBt
, 
	`SWAB32
’Bt, 
pPage
->
u
.
hdr
.
rightChûd
), 1);

3100 
	`sqlôïagî_uƒef
(
pPage
);

3101  
SQLITE_OK
;

3102 
	}
}

3105 #ifde‡
SQLITE_TEST


3121 
	$fûeBåìCurs‹Dump
(
BtCurs‹
 *
pCur
, *
aResu…
){

3122 
˙t
, 
idx
;

3123 
MemPage
 *
pPage
 = 
pCur
->pPage;

3124 
Båì
 *
pBt
 = 
pCur
->pBt;

3125 
aResu…
[0] = 
	`sqlôïagî_∑gíumbî
(
pPage
);

3126 
aResu…
[1] = 
pCur
->
idx
;

3127 
aResu…
[2] = 
pPage
->
nCñl
;

3128 if–
pCur
->
idx
>=0 &&ÖCur->idx<
pPage
->
nCñl
 ){

3129 
aResu…
[3] = 
	`˚ŒSize
(
pBt
, 
pPage
->
≠Cñl
[
pCur
->
idx
]);

3130 
aResu…
[6] = 
	`SWAB32
(
pBt
, 
pPage
->
≠Cñl
[
pCur
->
idx
]->
h
.
À·Chûd
);

3132 
aResu…
[3] = 0;

3133 
aResu…
[6] = 0;

3135 
aResu…
[4] = 
pPage
->
nFªe
;

3136 
˙t
 = 0;

3137 
idx
 = 
	`SWAB16
(
pBt
, 
pPage
->
u
.
hdr
.
fú°Fªe
);

3138  
idx
>0 && idx<
SQLITE_USABLE_SIZE
 ){

3139 
˙t
++;

3140 
idx
 = 
	`SWAB16
(
pBt
, ((
FªeBlk
*)&
pPage
->
u
.
aDisk
[idx])->
iNext
);

3142 
aResu…
[5] = 
˙t
;

3143 
aResu…
[7] = 
	`SWAB32
(
pBt
, 
pPage
->
u
.
hdr
.
rightChûd
);

3144  
SQLITE_OK
;

3145 
	}
}

3152 
Pagî
 *
	$fûeBåìPagî
(
Båì
 *
pBt
){

3153  
pBt
->
pPagî
;

3154 
	}
}

3160 
I¡egrôyCk
 
	tI¡egrôyCk
;

3161 
	sI¡egrôyCk
 {

3162 
Båì
 *
	mpBt
;

3163 
Pagî
 *
	mpPagî
;

3164 
	mnPage
;

3165 *
	m™Ref
;

3166 *
	mzEºMsg
;

3172 
	$checkAµídMsg
(
I¡egrôyCk
 *
pCheck
, *
zMsg1
, *
zMsg2
){

3173 if–
pCheck
->
zEºMsg
 ){

3174 *
zOld
 = 
pCheck
->
zEºMsg
;

3175 
pCheck
->
zEºMsg
 = 0;

3176 
	`sqlôeSëSåög
(&
pCheck
->
zEºMsg
, 
zOld
, "\n", 
zMsg1
, 
zMsg2
, (*)0);

3177 
	`sqlôeFªe
(
zOld
);

3179 
	`sqlôeSëSåög
(&
pCheck
->
zEºMsg
, 
zMsg1
, 
zMsg2
, (*)0);

3181 
	}
}

3191 
	$checkRef
(
I¡egrôyCk
 *
pCheck
, 
iPage
, *
zC⁄ãxt
){

3192 if–
iPage
==0 )  1;

3193 if–
iPage
>
pCheck
->
nPage
 || iPage<0 ){

3194 
zBuf
[100];

3195 
	`•rötf
(
zBuf
, "övÆidÖagênumbî %d", 
iPage
);

3196 
	`checkAµídMsg
(
pCheck
, 
zC⁄ãxt
, 
zBuf
);

3199 if–
pCheck
->
™Ref
[
iPage
]==1 ){

3200 
zBuf
[100];

3201 
	`•rötf
(
zBuf
, "2ndÑe„ªn˚Åÿ∑gê%d", 
iPage
);

3202 
	`checkAµídMsg
(
pCheck
, 
zC⁄ãxt
, 
zBuf
);

3205  (
pCheck
->
™Ref
[
iPage
]++)>1;

3206 
	}
}

3212 
	$checkLi°
(

3213 
I¡egrôyCk
 *
pCheck
,

3214 
isFªeLi°
,

3215 
iPage
,

3216 
N
,

3217 *
zC⁄ãxt


3219 
i
;

3220 
zMsg
[100];

3221  
N
-- > 0 ){

3222 
OvîÊowPage
 *
pOvÊ
;

3223 if–
iPage
<1 ){

3224 
	`•rötf
(
zMsg
, "%dÖage†missög from ovîÊowÜi°", 
N
+1);

3225 
	`checkAµídMsg
(
pCheck
, 
zC⁄ãxt
, 
zMsg
);

3228 if–
	`checkRef
(
pCheck
, 
iPage
, 
zC⁄ãxt
) ) ;

3229 if–
	`sqlôïagî_gë
(
pCheck
->
pPagî
, (
Pgno
)
iPage
, (**)&
pOvÊ
) ){

3230 
	`•rötf
(
zMsg
, "ÁûedÅÿgëÖagê%d", 
iPage
);

3231 
	`checkAµídMsg
(
pCheck
, 
zC⁄ãxt
, 
zMsg
);

3234 if–
isFªeLi°
 ){

3235 
Fªñi°Info
 *
pInfo
 = (Fªñi°Info*)
pOvÊ
->
aPaylﬂd
;

3236 
n
 = 
	`SWAB32
(
pCheck
->
pBt
, 
pInfo
->
nFªe
);

3237 
i
=0; i<
n
; i++){

3238 
	`checkRef
(
pCheck
, 
	`SWAB32
’Check->
pBt
, 
pInfo
->
aFªe
[
i
]), 
zC⁄ãxt
);

3240 
N
 -
n
;

3242 
iPage
 = 
	`SWAB32
(
pCheck
->
pBt
, 
pOvÊ
->
iNext
);

3243 
	`sqlôïagî_uƒef
(
pOvÊ
);

3245 
	}
}

3252 
	$keyCom∑ª
(

3253 c⁄° *
zKey1
, 
nKey1
,

3254 c⁄° *
zKey2
, 
nKey2


3256 
mö
 = 
nKey1
>
nKey2
 ?ÇKey2 :ÇKey1;

3257 
c
 = 
	`memcmp
(
zKey1
, 
zKey2
, 
mö
);

3258 if–
c
==0 ){

3259 
c
 = 
nKey1
 - 
nKey2
;

3261  
c
;

3262 
	}
}

3282 
	$checkTªePage
(

3283 
I¡egrôyCk
 *
pCheck
,

3284 
iPage
,

3285 
MemPage
 *
pP¨ít
,

3286 *
zP¨ítC⁄ãxt
,

3287 *
zLowîBound
,

3288 
nLowî
,

3289 *
zUµîBound
,

3290 
nUµî


3292 
MemPage
 *
pPage
;

3293 
i
, 
rc
, 
dïth
, 
d2
, 
pgno
;

3294 *
zKey1
, *
zKey2
;

3295 
nKey1
, 
nKey2
;

3296 
BtCurs‹
 
cur
;

3297 
Båì
 *
pBt
;

3298 
zMsg
[100];

3299 
zC⁄ãxt
[100];

3300 
hô
[
SQLITE_USABLE_SIZE
];

3304 
cur
.
pBt
 =ÖBà
pCheck
->pBt;

3305 if–
iPage
==0 )  0;

3306 if–
	`checkRef
(
pCheck
, 
iPage
, 
zP¨ítC⁄ãxt
) )  0;

3307 
	`•rötf
(
zC⁄ãxt
, "O¿åìÖagê%d: ", 
iPage
);

3308 if–(
rc
 = 
	`sqlôïagî_gë
(
pCheck
->
pPagî
, (
Pgno
)
iPage
, (**)&
pPage
))!=0 ){

3309 
	`•rötf
(
zMsg
, "u«bÀÅÿgëÅhê∑ge.Éº‹ code=%d", 
rc
);

3310 
	`checkAµídMsg
(
pCheck
, 
zC⁄ãxt
, 
zMsg
);

3313 if–(
rc
 = 
	`öôPage
(
pBt
, 
pPage
, (
Pgno
)
iPage
, 
pP¨ít
))!=0 ){

3314 
	`•rötf
(
zMsg
, "öôPage(Ëªtu∫†îr‹ codê%d", 
rc
);

3315 
	`checkAµídMsg
(
pCheck
, 
zC⁄ãxt
, 
zMsg
);

3316 
	`sqlôïagî_uƒef
(
pPage
);

3322 
dïth
 = 0;

3323 if–
zLowîBound
 ){

3324 
zKey1
 = 
	`sqlôeMÆloc
–
nLowî
+1 );

3325 
	`mem˝y
(
zKey1
, 
zLowîBound
, 
nLowî
);

3326 
zKey1
[
nLowî
] = 0;

3328 
zKey1
 = 0;

3330 
nKey1
 = 
nLowî
;

3331 
cur
.
pPage
 =ÖPage;

3332 
i
=0; i<
pPage
->
nCñl
; i++){

3333 
Cñl
 *
pCñl
 = 
pPage
->
≠Cñl
[
i
];

3334 
sz
;

3338 
nKey2
 = 
	`NKEY
(
pBt
, 
pCñl
->
h
);

3339 
sz
 = 
nKey2
 + 
	`NDATA
(
pBt
, 
pCñl
->
h
);

3340 
	`•rötf
(
zC⁄ãxt
, "O¿∑gê%d cñ»%d: ", 
iPage
, 
i
);

3341 if–
sz
>
MX_LOCAL_PAYLOAD
 ){

3342 
nPage
 = (
sz
 - 
MX_LOCAL_PAYLOAD
 + 
OVERFLOW_SIZE
 - 1)/OVERFLOW_SIZE;

3343 
	`checkLi°
(
pCheck
, 0, 
	`SWAB32
(
pBt
, 
pCñl
->
ovÊ
), 
nPage
, 
zC⁄ãxt
);

3348 
cur
.
idx
 = 
i
;

3349 
zKey2
 = 
	`sqlôeMÆlocRaw
–
nKey2
+1 );

3350 
	`gëPaylﬂd
(&
cur
, 0, 
nKey2
, 
zKey2
);

3351 if–
zKey1
 && 
	`keyCom∑ª
(zKey1, 
nKey1
, 
zKey2
, 
nKey2
)>=0 ){

3352 
	`checkAµídMsg
(
pCheck
, 
zC⁄ãxt
, "Key is out of order");

3357 
pgno
 = 
	`SWAB32
(
pBt
, 
pCñl
->
h
.
À·Chûd
);

3358 
d2
 = 
	`checkTªePage
(
pCheck
, 
pgno
, 
pPage
, 
zC⁄ãxt
, 
zKey1
,
nKey1
,
zKey2
,
nKey2
);

3359 if–
i
>0 && 
d2
!=
dïth
 ){

3360 
	`checkAµídMsg
(
pCheck
, 
zC⁄ãxt
, "ChildÖage depth differs");

3362 
dïth
 = 
d2
;

3363 
	`sqlôeFªe
(
zKey1
);

3364 
zKey1
 = 
zKey2
;

3365 
nKey1
 = 
nKey2
;

3367 
pgno
 = 
	`SWAB32
(
pBt
, 
pPage
->
u
.
hdr
.
rightChûd
);

3368 
	`•rötf
(
zC⁄ãxt
, "O¿∑gê%dáàrighàchûd: ", 
iPage
);

3369 
	`checkTªePage
(
pCheck
, 
pgno
, 
pPage
, 
zC⁄ãxt
, 
zKey1
,
nKey1
,
zUµîBound
,
nUµî
);

3370 
	`sqlôeFªe
(
zKey1
);

3374 
	`mem£t
(
hô
, 0, (hit));

3375 
	`mem£t
(
hô
, 1, (
PageHdr
));

3376 
i
=
	`SWAB16
(
pBt
, 
pPage
->
u
.
hdr
.
fú°Cñl
); i>0 && i<
SQLITE_USABLE_SIZE
; ){

3377 
Cñl
 *
pCñl
 = (Cñl*)&
pPage
->
u
.
aDisk
[
i
];

3378 
j
;

3379 
j
=
i
+
	`˚ŒSize
(
pBt
, 
pCñl
)-1; j>=i; j--Ë
hô
[j]++;

3380 
i
 = 
	`SWAB16
(
pBt
, 
pCñl
->
h
.
iNext
);

3382 
i
=
	`SWAB16
(
pBt
,
pPage
->
u
.
hdr
.
fú°Fªe
); i>0 && i<
SQLITE_USABLE_SIZE
; ){

3383 
FªeBlk
 *
pFBlk
 = (FªeBlk*)&
pPage
->
u
.
aDisk
[
i
];

3384 
j
;

3385 
j
=
i
+
	`SWAB16
(
pBt
,
pFBlk
->
iSize
)-1; j>=i; j--Ë
hô
[j]++;

3386 
i
 = 
	`SWAB16
(
pBt
,
pFBlk
->
iNext
);

3388 
i
=0; i<
SQLITE_USABLE_SIZE
; i++){

3389 if–
hô
[
i
]==0 ){

3390 
	`•rötf
(
zMsg
, "Unu£d s∑˚áàbyã %d o‡∑gê%d", 
i
, 
iPage
);

3391 
	`checkAµídMsg
(
pCheck
, 
zMsg
, 0);

3393 }if–
hô
[
i
]>1 ){

3394 
	`•rötf
(
zMsg
, "Mu…ùÀ u£†f‹ byã %d o‡∑gê%d", 
i
, 
iPage
);

3395 
	`checkAµídMsg
(
pCheck
, 
zMsg
, 0);

3403 if–
pP¨ít
 &&ÖP¨ít->
nCñl
>2 && 
pPage
->
nFªe
>3*
SQLITE_USABLE_SIZE
/4 ){

3404 
	`•rötf
(
zMsg
, "‰ì s∑˚ (%dËgª©îÅh™ max (%d)", 
pPage
->
nFªe
,

3405 
SQLITE_USABLE_SIZE
/3);

3406 
	`checkAµídMsg
(
pCheck
, 
zC⁄ãxt
, 
zMsg
);

3410 
	`sqlôïagî_uƒef
(
pPage
);

3411  
dïth
;

3412 
	}
}

3424 *
	$fûeBåìI¡egrôyCheck
(
Båì
 *
pBt
, *
aRoŸ
, 
nRoŸ
){

3425 
i
;

3426 
nRef
;

3427 
I¡egrôyCk
 
sCheck
;

3429 
nRef
 = *
	`sqlôïagî_°©s
(
pBt
->
pPagî
);

3430 if–
	`lockBåì
(
pBt
)!=
SQLITE_OK
 ){

3431  
	`sqlôeSåDup
("UnableÅoácquireáÑeadÜock onÅhe database");

3433 
sCheck
.
pBt
 =ÖBt;

3434 
sCheck
.
pPagî
 = 
pBt
->pPager;

3435 
sCheck
.
nPage
 = 
	`sqlôïagî_∑gecou¡
(sCheck.
pPagî
);

3436 if–
sCheck
.
nPage
==0 ){

3437 
	`u∆ockBåìIfUnu£d
(
pBt
);

3440 
sCheck
.
™Ref
 = 
	`sqlôeMÆlocRaw
–(sCheck.
nPage
+1)*(sCheck.anRef[0]) );

3441 
sCheck
.
™Ref
[1] = 1;

3442 
i
=2; i<=
sCheck
.
nPage
; i++){ sCheck.
™Ref
[i] = 0; }

3443 
sCheck
.
zEºMsg
 = 0;

3447 
	`checkLi°
(&
sCheck
, 1, 
	`SWAB32
(
pBt
,ÖBt->
∑ge1
->
‰ìLi°
),

3448 
	`SWAB32
(
pBt
,ÖBt->
∑ge1
->
nFªe
), "Main freelist: ");

3452 
i
=0; i<
nRoŸ
; i++){

3453 if–
aRoŸ
[
i
]==0 ) ;

3454 
	`checkTªePage
(&
sCheck
, 
aRoŸ
[
i
], 0, "List ofÅreeÑoots: ", 0,0,0,0);

3459 
i
=1; i<=
sCheck
.
nPage
; i++){

3460 if–
sCheck
.
™Ref
[
i
]==0 ){

3461 
zBuf
[100];

3462 
	`•rötf
(
zBuf
, "Pagê%d i†√vî u£d", 
i
);

3463 
	`checkAµídMsg
(&
sCheck
, 
zBuf
, 0);

3469 
	`u∆ockBåìIfUnu£d
(
pBt
);

3470 if–
nRef
 !*
	`sqlôïagî_°©s
(
pBt
->
pPagî
) ){

3471 
zBuf
[100];

3472 
	`•rötf
(
zBuf
,

3474 
nRef
, *
	`sqlôïagî_°©s
(
pBt
->
pPagî
)

3476 
	`checkAµídMsg
(&
sCheck
, 
zBuf
, 0);

3481 
	`sqlôeFªe
(
sCheck
.
™Ref
);

3482  
sCheck
.
zEºMsg
;

3483 
	}
}

3488 c⁄° *
	$fûeBåìGëFûíame
(
Båì
 *
pBt
){

3489 
	`as£π
–
pBt
->
pPagî
!=0 );

3490  
	`sqlôïagî_fûíame
(
pBt
->
pPagî
);

3491 
	}
}

3500 
	$fûeBåìC›yFûe
(
Båì
 *
pBtTo
, Båì *
pBtFrom
){

3501 
rc
 = 
SQLITE_OK
;

3502 
Pgno
 
i
, 
nPage
, 
nToPage
;

3504 if–!
pBtTo
->
öTøns
 || !
pBtFrom
->öTøn†Ë 
SQLITE_ERROR
;

3505 if–
pBtTo
->
√edSwab
!=
pBtFrom
->√edSwab )  
SQLITE_ERROR
;

3506 if–
pBtTo
->
pCurs‹
 )  
SQLITE_BUSY
;

3507 
	`mem˝y
(
pBtTo
->
∑ge1
, 
pBtFrom
->∑ge1, 
SQLITE_USABLE_SIZE
);

3508 
rc
 = 
	`sqlôïagî_ovîwrôe
(
pBtTo
->
pPagî
, 1, 
pBtFrom
->
∑ge1
);

3509 
nToPage
 = 
	`sqlôïagî_∑gecou¡
(
pBtTo
->
pPagî
);

3510 
nPage
 = 
	`sqlôïagî_∑gecou¡
(
pBtFrom
->
pPagî
);

3511 
i
=2; 
rc
==
SQLITE_OK
 && i<=
nPage
; i++){

3512 *
pPage
;

3513 
rc
 = 
	`sqlôïagî_gë
(
pBtFrom
->
pPagî
, 
i
, &
pPage
);

3514 if–
rc
 ) ;

3515 
rc
 = 
	`sqlôïagî_ovîwrôe
(
pBtTo
->
pPagî
, 
i
, 
pPage
);

3516 if–
rc
 ) ;

3517 
	`sqlôïagî_uƒef
(
pPage
);

3519 
i
=
nPage
+1; 
rc
==
SQLITE_OK
 && i<=
nToPage
; i++){

3520 *
pPage
;

3521 
rc
 = 
	`sqlôïagî_gë
(
pBtTo
->
pPagî
, 
i
, &
pPage
);

3522 if–
rc
 ) ;

3523 
rc
 = 
	`sqlôïagî_wrôe
(
pPage
);

3524 
	`sqlôïagî_uƒef
(
pPage
);

3525 
	`sqlôïagî_d⁄t_wrôe
(
pBtTo
->
pPagî
, 
i
);

3527 if–!
rc
 && 
nPage
<
nToPage
 ){

3528 
rc
 = 
	`sqlôïagî_åunˇã
(
pBtTo
->
pPagî
, 
nPage
);

3530 if–
rc
 ){

3531 
	`fûeBåìRﬁlback
(
pBtTo
);

3533  
rc
;

3534 
	}
}

3542 
BtOps
 
	gsqlôeBåìOps
 = {

3543 
fûeBåìClo£
,

3544 
fûeBåìSëCacheSize
,

3545 
fûeBåìSëSa„tyLevñ
,

3546 
fûeBåìBegöTøns
,

3547 
fûeBåìCommô
,

3548 
fûeBåìRﬁlback
,

3549 
fûeBåìBegöCk±
,

3550 
fûeBåìCommôCk±
,

3551 
fûeBåìRﬁlbackCk±
,

3552 
fûeBåìCª©eTabÀ
,

3553 
fûeBåìCª©eTabÀ
,

3554 
fûeBåìDr›TabÀ
,

3555 
fûeBåìCÀ¨TabÀ
,

3556 
fûeBåìCurs‹
,

3557 
fûeBåìGëMëa
,

3558 
fûeBåìUpd©eMëa
,

3559 
fûeBåìI¡egrôyCheck
,

3560 
fûeBåìGëFûíame
,

3561 
fûeBåìC›yFûe
,

3562 
fûeBåìPagî
,

3563 #ifde‡
SQLITE_TEST


3564 
fûeBåìPageDump
,

3567 
BtCurs‹Ops
 
	gsqlôeBåìCurs‹Ops
 = {

3568 
fûeBåìMovëo
,

3569 
fûeBåìDñëe
,

3570 
fûeBåìIn£π
,

3571 
fûeBåìFú°
,

3572 
fûeBåìLa°
,

3573 
fûeBåìNext
,

3574 
fûeBåìPªvious
,

3575 
fûeBåìKeySize
,

3576 
fûeBåìKey
,

3577 
fûeBåìKeyCom∑ª
,

3578 
fûeBåìD©aSize
,

3579 
fûeBåìD©a
,

3580 
fûeBåìClo£Curs‹
,

3581 #ifde‡
SQLITE_TEST


3582 
fûeBåìCurs‹Dump
,

	@btree.h

18 #i‚de‡
_BTREE_H_


19 
	#_BTREE_H_


	)

24 
Båì
 
	tBåì
;

25 
BtCurs‹
 
	tBtCurs‹
;

26 
BtOps
 
	tBtOps
;

27 
BtCurs‹Ops
 
	tBtCurs‹Ops
;

40 
	sBtOps
 {

41 (*
	mClo£
)(
	mBåì
*);

42 (*
	mSëCacheSize
)(
	mBåì
*, );

43 (*
	mSëSa„tyLevñ
)(
	mBåì
*, );

44 (*
	mBegöTøns
)(
	mBåì
*);

45 (*
	mCommô
)(
	mBåì
*);

46 (*
	mRﬁlback
)(
	mBåì
*);

47 (*
	mBegöCk±
)(
	mBåì
*);

48 (*
	mCommôCk±
)(
	mBåì
*);

49 (*
	mRﬁlbackCk±
)(
	mBåì
*);

50 (*
	mCª©eTabÀ
)(
	mBåì
*, *);

51 (*
	mCª©eIndex
)(
	mBåì
*, *);

52 (*
	mDr›TabÀ
)(
	mBåì
*, );

53 (*
	mCÀ¨TabÀ
)(
	mBåì
*, );

54 (*
	mCurs‹
)(
	mBåì
*, 
	miTabÀ
, 
	mwrFœg
, 
BtCurs‹
 **
	mµCur
);

55 (*
	mGëMëa
)(
	mBåì
*, *);

56 (*
	mUpd©eMëa
)(
	mBåì
*, *);

57 *(*
	mI¡egrôyCheck
)(
	mBåì
*, *, );

58 c⁄° *(*
	mGëFûíame
)(
	mBåì
*);

59 (*
	mC›yfûe
)(
	mBåì
*,Btree*);

60 
	mPagî
 *(*Pagî)(
	mBåì
*);

61 #ifde‡
SQLITE_TEST


62 (*
	mPageDump
)(
	mBåì
*, , );

70 
	sBtCurs‹Ops
 {

71 (*
	mMovëo
)(
	mBtCurs‹
*, c⁄° *
	mpKey
, 
	mnKey
, *
	mpRes
);

72 (*
	mDñëe
)(
	mBtCurs‹
*);

73 (*
	mIn£π
)(
	mBtCurs‹
*, c⁄° *
	mpKey
, 
	mnKey
,

74 c⁄° *
	mpD©a
, 
	mnD©a
);

75 (*
	mFú°
)(
	mBtCurs‹
*, *
	mpRes
);

76 (*
	mLa°
)(
	mBtCurs‹
*, *
	mpRes
);

77 (*
	mNext
)(
	mBtCurs‹
*, *
	mpRes
);

78 (*
	mPªvious
)(
	mBtCurs‹
*, *
	mpRes
);

79 (*
	mKeySize
)(
	mBtCurs‹
*, *
	mpSize
);

80 (*
	mKey
)(
	mBtCurs‹
*, 
	moff£t
, 
	mamt
, *
	mzBuf
);

81 (*
	mKeyCom∑ª
)(
	mBtCurs‹
*, c⁄° *
	mpKey
, 
	mnKey
,

82 
	mnIgn‹e
, *
	mpRes
);

83 (*
	mD©aSize
)(
	mBtCurs‹
*, *
	mpSize
);

84 (*
	mD©a
)(
	mBtCurs‹
*, 
	moff£t
, 
	mamt
, *
	mzBuf
);

85 (*
	mClo£Curs‹
)(
	mBtCurs‹
*);

86 #ifde‡
SQLITE_TEST


87 (*
	mCurs‹Dump
)(
	mBtCurs‹
*, *);

95 
	#SQLITE_N_BTREE_META
 10

	)

97 
sqlôeBåìO≥n
(c⁄° *
zFûíame
, 
mode
, 
nPg
, 
Båì
 **
µBåì
);

98 
sqlôeRbåìO≥n
(c⁄° *
zFûíame
, 
mode
, 
nPg
, 
Båì
 **
µBåì
);

100 
	#btOps
(
pBt
Ë(*((
BtOps
 **)’Bt)))

	)

101 
	#btCOps
(
pCur
Ë(*((
BtCurs‹Ops
 **)’Cur)))

	)

103 
	#sqlôeBåìClo£
(
pBt
Ë(
	`btOps
’Bt)->
	`Clo£
’Bt))

	)

104 
	#sqlôeBåìSëCacheSize
(
pBt
, 
sz
Ë(
	`btOps
’Bt)->
	`SëCacheSize
’Bt, sz))

	)

105 
	#sqlôeBåìSëSa„tyLevñ
(
pBt
, 
¶
Ë(
	`btOps
’Bt)->
	`SëSa„tyLevñ
’Bt, sl))

	)

106 
	#sqlôeBåìBegöTøns
(
pBt
Ë(
	`btOps
’Bt)->
	`BegöTøns
’Bt))

	)

107 
	#sqlôeBåìCommô
(
pBt
Ë(
	`btOps
’Bt)->
	`Commô
’Bt))

	)

108 
	#sqlôeBåìRﬁlback
(
pBt
Ë(
	`btOps
’Bt)->
	`Rﬁlback
’Bt))

	)

109 
	#sqlôeBåìBegöCk±
(
pBt
Ë(
	`btOps
’Bt)->
	`BegöCk±
’Bt))

	)

110 
	#sqlôeBåìCommôCk±
(
pBt
Ë(
	`btOps
’Bt)->
	`CommôCk±
’Bt))

	)

111 
	#sqlôeBåìRﬁlbackCk±
(
pBt
Ë(
	`btOps
’Bt)->
	`RﬁlbackCk±
’Bt))

	)

112 
	#sqlôeBåìCª©eTabÀ
(
pBt
,
piTabÀ
)\

113 (
	`btOps
(
pBt
)->
	`Cª©eTabÀ
’Bt,
piTabÀ
))

	)

114 
	#sqlôeBåìCª©eIndex
(
pBt
, 
piIndex
)\

115 (
	`btOps
(
pBt
)->
	`Cª©eIndex
’Bt, 
piIndex
))

	)

116 
	#sqlôeBåìDr›TabÀ
(
pBt
, 
iTabÀ
Ë(
	`btOps
’Bt)->
	`Dr›TabÀ
’Bt, iTabÀ))

	)

117 
	#sqlôeBåìCÀ¨TabÀ
(
pBt
, 
iTabÀ
)\

118 (
	`btOps
(
pBt
)->
	`CÀ¨TabÀ
’Bt, 
iTabÀ
))

	)

119 
	#sqlôeBåìCurs‹
(
pBt
, 
iTabÀ
, 
wrFœg
, 
µCur
)\

120 (
	`btOps
(
pBt
)->
	`Curs‹
’Bt, 
iTabÀ
, 
wrFœg
, 
µCur
))

	)

121 
	#sqlôeBåìMovëo
(
pCur
, 
pKey
, 
nKey
, 
pRes
)\

122 (
	`btCOps
(
pCur
)->
	`Movëo
’Cur, 
pKey
, 
nKey
, 
pRes
))

	)

123 
	#sqlôeBåìDñëe
(
pCur
Ë(
	`btCOps
’Cur)->
	`Dñëe
’Cur))

	)

124 
	#sqlôeBåìIn£π
(
pCur
, 
pKey
, 
nKey
, 
pD©a
, 
nD©a
) \

125 (
	`btCOps
(
pCur
)->
	`In£π
’Cur, 
pKey
, 
nKey
, 
pD©a
, 
nD©a
))

	)

126 
	#sqlôeBåìFú°
(
pCur
, 
pRes
Ë(
	`btCOps
’Cur)->
	`Fú°
’Cur,ÖRes))

	)

127 
	#sqlôeBåìLa°
(
pCur
, 
pRes
Ë(
	`btCOps
’Cur)->
	`La°
’Cur,ÖRes))

	)

128 
	#sqlôeBåìNext
(
pCur
, 
pRes
Ë(
	`btCOps
’Cur)->
	`Next
’Cur,ÖRes))

	)

129 
	#sqlôeBåìPªvious
(
pCur
, 
pRes
Ë(
	`btCOps
’Cur)->
	`Pªvious
’Cur,ÖRes))

	)

130 
	#sqlôeBåìKeySize
(
pCur
, 
pSize
Ë(
	`btCOps
’Cur)->
	`KeySize
’Cur,ÖSizeË)

	)

131 
	#sqlôeBåìKey
(
pCur
, 
off£t
, 
amt
, 
zBuf
)\

132 (
	`btCOps
(
pCur
)->
	`Key
’Cur, 
off£t
, 
amt
, 
zBuf
))

	)

133 
	#sqlôeBåìKeyCom∑ª
(
pCur
, 
pKey
, 
nKey
, 
nIgn‹e
, 
pRes
)\

134 (
	`btCOps
(
pCur
)->
	`KeyCom∑ª
’Cur, 
pKey
, 
nKey
, 
nIgn‹e
, 
pRes
))

	)

135 
	#sqlôeBåìD©aSize
(
pCur
, 
pSize
Ë(
	`btCOps
’Cur)->
	`D©aSize
’Cur,ÖSize))

	)

136 
	#sqlôeBåìD©a
(
pCur
, 
off£t
, 
amt
, 
zBuf
)\

137 (
	`btCOps
(
pCur
)->
	`D©a
’Cur, 
off£t
, 
amt
, 
zBuf
))

	)

138 
	#sqlôeBåìClo£Curs‹
(
pCur
Ë(
	`btCOps
’Cur)->
	`Clo£Curs‹
’Cur))

	)

139 
	#sqlôeBåìGëMëa
(
pBt
, 
aMëa
Ë(
	`btOps
’Bt)->
	`GëMëa
’Bt,áMëa))

	)

140 
	#sqlôeBåìUpd©eMëa
(
pBt
, 
aMëa
Ë(
	`btOps
’Bt)->
	`Upd©eMëa
’Bt,áMëa))

	)

141 
	#sqlôeBåìI¡egrôyCheck
(
pBt
, 
aRoŸ
, 
nRoŸ
)\

142 (
	`btOps
(
pBt
)->
	`I¡egrôyCheck
’Bt, 
aRoŸ
, 
nRoŸ
))

	)

143 
	#sqlôeBåìGëFûíame
(
pBt
Ë(
	`btOps
’Bt)->
	`GëFûíame
’Bt))

	)

144 
	#sqlôeBåìC›yFûe
(
pBt1
, 
pBt2
Ë(
	`btOps
’Bt1)->
	`C›yfûe
’Bt1,ÖBt2))

	)

145 
	#sqlôeBåìPagî
(
pBt
Ë(
	`btOps
’Bt)->
	`Pagî
’Bt))

	)

147 #ifde‡
SQLITE_TEST


148 
	#sqlôeBåìPageDump
(
pBt
, 
pgno
, 
ªcursive
)\

149 (
	`btOps
(
pBt
)->
	`PageDump
’Bt, 
pgno
, 
ªcursive
))

	)

150 
	#sqlôeBåìCurs‹Dump
(
pCur
, 
aResu…
)\

151 (
	`btCOps
(
pCur
)->
	`Curs‹Dump
’Cur, 
aResu…
))

	)

152 
	gbåì_«tive_byã_‹dî
;

	@btree_rb.c

19 
	~"båì.h
"

20 
	~"sqlôeI¡.h
"

21 
	~<as£π.h
>

28 #i‚de‡
SQLITE_OMIT_INMEMORYDB


31 
BtRbTªe
 
	tBtRbTªe
;

32 
BtRbNode
 
	tBtRbNode
;

33 
BtRﬁlbackOp
 
	tBtRﬁlbackOp
;

34 
Rbåì
 
	tRbåì
;

35 
RbtCurs‹
 
	tRbtCurs‹
;

38 
BtOps
 
	gsqlôeRbåìOps
;

39 
BtCurs‹Ops
 
	gsqlôeRbåìCurs‹Ops
;

55 
	sBtRﬁlbackOp
 {

56 
u8
 
	meOp
;

57 
	miTab
;

58 
	mnKey
;

59 *
	mpKey
;

60 
	mnD©a
;

61 *
	mpD©a
;

62 
BtRﬁlbackOp
 *
	mpNext
;

68 
	#ROLLBACK_INSERT
 1

	)

69 
	#ROLLBACK_DELETE
 2

	)

70 
	#ROLLBACK_CREATE
 3

	)

71 
	#ROLLBACK_DROP
 4

	)

73 
	sRbåì
 {

74 
BtOps
 *
	mpOps
;

75 
	maMëaD©a
[
SQLITE_N_BTREE_META
];

77 
	m√xt_idx
;

78 
Hash
 
	mtblHash
;

79 
u8
 
	misAn⁄ymous
;

80 
u8
 
	meTønsSèã
;

82 
BtRﬁlbackOp
 *
	mpTønsRﬁlback
;

83 
BtRﬁlbackOp
 *
	mpCheckRﬁlback
;

84 
BtRﬁlbackOp
 *
	mpCheckRﬁlbackTaû
;

90 
	#TRANS_NONE
 0

	)

91 
	#TRANS_INTRANSACTION
 1

	)

92 
	#TRANS_INCHECKPOINT
 2

	)

93 
	#TRANS_ROLLBACK
 3

	)

96 
	sRbtCurs‹
 {

97 
BtCurs‹Ops
 *
	mpOps
;

98 
Rbåì
 *
	mpRbåì
;

99 
BtRbTªe
 *
	mpTªe
;

100 
	miTªe
;

101 
BtRbNode
 *
	mpNode
;

102 
RbtCurs‹
 *
	mpSh¨ed
;

103 
u8
 
	meSkù
;

104 
u8
 
	mwrFœg
;

110 
	#SKIP_NONE
 0

	)

111 
	#SKIP_NEXT
 1

	)

112 
	#SKIP_PREV
 2

	)

113 
	#SKIP_INVALID
 3

	)

115 
	sBtRbTªe
 {

116 
RbtCurs‹
 *
	mpCurs‹s
;

117 
BtRbNode
 *
	mpHód
;

120 
	sBtRbNode
 {

121 
	mnKey
;

122 *
	mpKey
;

123 
	mnD©a
;

124 *
	mpD©a
;

125 
u8
 
	misBœck
;

126 
BtRbNode
 *
	mpP¨ít
;

127 
BtRbNode
 *
	mpLe·
;

128 
BtRbNode
 *
	mpRight
;

130 
	mnBœckHeight
;

134 
memRbåìMovëo
(

135 
RbtCurs‹
* 
pCur
,

136 c⁄° *
pKey
,

137 
nKey
,

138 *
pRes


140 
memRbåìCÀ¨TabÀ
(
Rbåì
* 
åì
, 
n
);

141 
memRbåìNext
(
RbtCurs‹
* 
pCur
, *
pRes
);

142 
memRbåìLa°
(
RbtCurs‹
* 
pCur
, *
pRes
);

143 
memRbåìPªvious
(
RbtCurs‹
* 
pCur
, *
pRes
);

160 
	$checkRódLocks
(
RbtCurs‹
 *
pCur
){

161 
RbtCurs‹
 *
p
;

162 
	`as£π
–
pCur
->
wrFœg
 );

163 
p
=
pCur
->
pTªe
->
pCurs‹s
;Ö;Öı->
pSh¨ed
){

164 if–
p
!=
pCur
 ){

165 if–
p
->
wrFœg
==0 )  
SQLITE_LOCKED
;

166 
p
->
pNode
 = 0;

169  
SQLITE_OK
;

170 
	}
}

182 
	$key_com∑ª
(c⁄°*
pKey1
, 
nKey1
, c⁄°*
pKey2
, 
nKey2
)

184 
mcmp
 = 
	`memcmp
(
pKey1
, 
pKey2
, (
nKey1
 <
nKey2
)?nKey1:nKey2);

185 if–
mcmp
 == 0){

186 if–
nKey1
 =
nKey2
 )  0;

187  ((
nKey1
 < 
nKey2
)?-1:1);

189  ((
mcmp
>0)?1:-1);

190 
	}
}

205 
	$À·RŸ©e
(
BtRbTªe
 *
pTªe
, 
BtRbNode
 *
pX
)

207 
BtRbNode
 *
pY
;

208 
BtRbNode
 *
pb
;

209 
pY
 = 
pX
->
pRight
;

210 
pb
 = 
pY
->
pLe·
;

212 
pY
->
pP¨ít
 = 
pX
->pParent;

213 if–
pX
->
pP¨ít
 ){

214 if–
pX
->
pP¨ít
->
pLe·
 =pX )ÖX->pP¨ít->pLe· = 
pY
;

215 
pX
->
pP¨ít
->
pRight
 = 
pY
;

217 
pY
->
pLe·
 = 
pX
;

218 
pX
->
pP¨ít
 = 
pY
;

219 
pX
->
pRight
 = 
pb
;

220 if–
pb
 )Öb->
pP¨ít
 = 
pX
;

221 if–
pTªe
->
pHód
 =
pX
 )ÖTªe->pHód = 
pY
;

222 
	}
}

237 
	$rightRŸ©e
(
BtRbTªe
 *
pTªe
, 
BtRbNode
 *
pX
)

239 
BtRbNode
 *
pY
;

240 
BtRbNode
 *
pb
;

241 
pY
 = 
pX
->
pLe·
;

242 
pb
 = 
pY
->
pRight
;

244 
pY
->
pP¨ít
 = 
pX
->pParent;

245 if–
pX
->
pP¨ít
 ){

246 if–
pX
->
pP¨ít
->
pLe·
 =pX )ÖX->pP¨ít->pLe· = 
pY
;

247 
pX
->
pP¨ít
->
pRight
 = 
pY
;

249 
pY
->
pRight
 = 
pX
;

250 
pX
->
pP¨ít
 = 
pY
;

251 
pX
->
pLe·
 = 
pb
;

252 if–
pb
 )Öb->
pP¨ít
 = 
pX
;

253 if–
pTªe
->
pHód
 =
pX
 )ÖTªe->pHód = 
pY
;

254 
	}
}

262 *
	$≠≥nd_vÆ
(* 
‹ig
, c⁄° * 
vÆ
){

263 *
z
;

264 if–!
‹ig
 ){

265 
z
 = 
	`sqlôeSåDup
–
vÆ
 );

267 
z
 = 0;

268 
	`sqlôeSëSåög
(&
z
, 
‹ig
, 
vÆ
, (*)0);

269 
	`sqlôeFªe
–
‹ig
 );

271  
z
;

272 
	}
}

279 *
	$≠≥nd_node
(* 
‹ig
, 
BtRbNode
 *
pNode
, 
ödít
)

281 
buf
[128];

282 
i
;

284  
i
=0; i<
ödít
; i++ ){

285 
‹ig
 = 
	`≠≥nd_vÆ
(orig, " ");

288 
	`•rötf
(
buf
, "%p", 
pNode
);

289 
‹ig
 = 
	`≠≥nd_vÆ
(‹ig, 
buf
);

291 if–
pNode
 ){

292 
ödít
 += 3;

293 if–
pNode
->
isBœck
 ){

294 
‹ig
 = 
	`≠≥nd_vÆ
(orig, " B \n");

296 
‹ig
 = 
	`≠≥nd_vÆ
(orig, " R \n");

298 
‹ig
 = 
	`≠≥nd_node
–‹ig, 
pNode
->
pLe·
, 
ödít
 );

299 
‹ig
 = 
	`≠≥nd_node
–‹ig, 
pNode
->
pRight
, 
ödít
 );

301 
‹ig
 = 
	`≠≥nd_vÆ
(orig, "\n");

303  
‹ig
;

304 
	}
}

311 
	$¥öt_node
(
BtRbNode
 *
pNode
)

313 * 
°r
 = 
	`≠≥nd_node
(0, 
pNode
, 0);

314 
	`¥ötf
("%s", 
°r
);

317 ()
¥öt_node
;

318 
	}
}

328 
	$check_ªdbœck_åì
(
BtRbTªe
 * 
åì
, ** 
msg
)

330 
BtRbNode
 *
pNode
;

335 
¥ev_°ï
 = 0;

337 
pNode
 = 
åì
->
pHód
;

338  
pNode
 ){

339  
¥ev_°ï
 ){

341 if–
pNode
->
pLe·
 ){

342 
pNode
 =ÖNode->
pLe·
;

344 
¥ev_°ï
 = 1;

348 if–
pNode
->
pRight
 ){

349 
pNode
 =ÖNode->
pRight
;

350 
¥ev_°ï
 = 0;

352 
¥ev_°ï
 = 2;

357 if–!
pNode
->
isBœck
 &&

358 –(
pNode
->
pLe·
 && !pNode->pLe·->
isBœck
) ||

359 (
pNode
->
pRight
 && !pNode->pRight->
isBœck
) )

361 
buf
[128];

362 
	`•rötf
(
buf
, "RedÇodêwôhÑed chûdáà%p\n", 
pNode
);

363 *
msg
 = 
	`≠≥nd_vÆ
(*msg, 
buf
);

364 *
msg
 = 
	`≠≥nd_node
(*msg, 
åì
->
pHód
, 0);

365 *
msg
 = 
	`≠≥nd_vÆ
(*msg, "\n");

370 
À·Height
 = 0;

371 
rightHeight
 = 0;

372 if–
pNode
->
pLe·
 ){

373 
À·Height
 +
pNode
->
pLe·
->
nBœckHeight
;

374 
À·Height
 +(
pNode
->
pLe·
->
isBœck
?1:0);

376 if–
pNode
->
pRight
 ){

377 
rightHeight
 +
pNode
->
pRight
->
nBœckHeight
;

378 
rightHeight
 +(
pNode
->
pRight
->
isBœck
?1:0);

380 if–
À·Height
 !
rightHeight
 ){

381 
buf
[128];

382 
	`•rötf
(
buf
, "Dif„ª¡ bœck-height†© %p\n", 
pNode
);

383 *
msg
 = 
	`≠≥nd_vÆ
(*msg, 
buf
);

384 *
msg
 = 
	`≠≥nd_node
(*msg, 
åì
->
pHód
, 0);

385 *
msg
 = 
	`≠≥nd_vÆ
(*msg, "\n");

387 
pNode
->
nBœckHeight
 = 
À·Height
;

390 if–
pNode
->
pP¨ít
 ){

391 if–
pNode
 =pNode->
pP¨ít
->
pLe·
 ) 
¥ev_°ï
 = 1;

392 
¥ev_°ï
 = 2;

394 
pNode
 =ÖNode->
pP¨ít
;

396 : 
	`as£π
(0);

399 
	}
}

407 
	$do_ö£π_bÆ™cög
(
BtRbTªe
 *
pTªe
, 
BtRbNode
 *
pX
)

417  
pX
 !
pTªe
->
pHód
 && !pX->
pP¨ít
->
isBœck
 ){

418 
BtRbNode
 *
pUn˛e
;

419 
BtRbNode
 *
pGønd∑ª¡
;

422 
pGønd∑ª¡
 = 
pX
->
pP¨ít
->pParent;

423 
	`as£π
–
pGønd∑ª¡
 );

424 
	`as£π
–
pGønd∑ª¡
->
isBœck
 );

427 if–
pX
->
pP¨ít
 =
pGønd∑ª¡
->
pLe·
 )

428 
pUn˛e
 = 
pGønd∑ª¡
->
pRight
;

430 
pUn˛e
 = 
pGønd∑ª¡
->
pLe·
;

443 if–
pUn˛e
 && !pUn˛e->
isBœck
 ){

444 
pGønd∑ª¡
->
isBœck
 = 0;

445 
pUn˛e
->
isBœck
 = 1;

446 
pX
->
pP¨ít
->
isBœck
 = 1;

447 
pX
 = 
pGønd∑ª¡
;

450 if–
pX
->
pP¨ít
 =
pGønd∑ª¡
->
pLe·
 ){

451 if–
pX
 =pX->
pP¨ít
->
pRight
 ){

463 
pX
 =ÖX->
pP¨ít
;

464 
	`À·RŸ©e
(
pTªe
, 
pX
);

477 
	`as£π
–
pGønd∑ª¡
 =
pX
->
pP¨ít
->pParent );

478 
pGønd∑ª¡
->
isBœck
 = 0;

479 
pX
->
pP¨ít
->
isBœck
 = 1;

480 
	`rightRŸ©e
–
pTªe
, 
pGønd∑ª¡
 );

484 if–
pX
 =pX->
pP¨ít
->
pLe·
 ){

485 
pX
 =ÖX->
pP¨ít
;

486 
	`rightRŸ©e
(
pTªe
, 
pX
);

488 
	`as£π
–
pGønd∑ª¡
 =
pX
->
pP¨ít
->pParent );

489 
pGønd∑ª¡
->
isBœck
 = 0;

490 
pX
->
pP¨ít
->
isBœck
 = 1;

491 
	`À·RŸ©e
–
pTªe
, 
pGønd∑ª¡
 );

495 
pTªe
->
pHód
->
isBœck
 = 1;

496 
	}
}

514 
	$do_dñëe_bÆ™cög
(
BtRbTªe
 *
pTªe
, 
BtRbNode
 *
pX
, BtRbNodê*
pP¨ít
)

516 
BtRbNode
 *
pSib
;

519  
pX
 !
pTªe
->
pHód
 && (!pX ||ÖX->
isBœck
) ){

520 if–
pX
 =
pP¨ít
->
pLe·
 ){

521 
pSib
 = 
pP¨ít
->
pRight
;

522 if–
pSib
 && !’Sib->
isBœck
) ){

523 
pSib
->
isBœck
 = 1;

524 
pP¨ít
->
isBœck
 = 0;

525 
	`À·RŸ©e
(
pTªe
, 
pP¨ít
);

526 
pSib
 = 
pP¨ít
->
pRight
;

528 if–!
pSib
 ){

529 
pX
 = 
pP¨ít
;

531 (!
pSib
->
pLe·
 ||ÖSib->pLe·->
isBœck
) &&

532 (!
pSib
->
pRight
 ||ÖSib->pRight->
isBœck
) ) {

533 
pSib
->
isBœck
 = 0;

534 
pX
 = 
pP¨ít
;

536 if–(!
pSib
->
pRight
 ||ÖSib->pRight->
isBœck
) ){

537 if–
pSib
->
pLe·
 )ÖSib->pLe·->
isBœck
 = 1;

538 
pSib
->
isBœck
 = 0;

539 
	`rightRŸ©e
–
pTªe
, 
pSib
 );

540 
pSib
 = 
pP¨ít
->
pRight
;

542 
pSib
->
isBœck
 = 
pP¨ít
->isBlack;

543 
pP¨ít
->
isBœck
 = 1;

544 if–
pSib
->
pRight
 )ÖSib->pRight->
isBœck
 = 1;

545 
	`À·RŸ©e
(
pTªe
, 
pP¨ít
);

546 
pX
 = 
pTªe
->
pHód
;

549 
pSib
 = 
pP¨ít
->
pLe·
;

550 if–
pSib
 && !’Sib->
isBœck
) ){

551 
pSib
->
isBœck
 = 1;

552 
pP¨ít
->
isBœck
 = 0;

553 
	`rightRŸ©e
(
pTªe
, 
pP¨ít
);

554 
pSib
 = 
pP¨ít
->
pLe·
;

556 if–!
pSib
 ){

557 
pX
 = 
pP¨ít
;

559 (!
pSib
->
pLe·
 ||ÖSib->pLe·->
isBœck
) &&

560 (!
pSib
->
pRight
 ||ÖSib->pRight->
isBœck
) ){

561 
pSib
->
isBœck
 = 0;

562 
pX
 = 
pP¨ít
;

564 if–(!
pSib
->
pLe·
 ||ÖSib->pLe·->
isBœck
) ){

565 if–
pSib
->
pRight
 )ÖSib->pRight->
isBœck
 = 1;

566 
pSib
->
isBœck
 = 0;

567 
	`À·RŸ©e
–
pTªe
, 
pSib
 );

568 
pSib
 = 
pP¨ít
->
pLe·
;

570 
pSib
->
isBœck
 = 
pP¨ít
->isBlack;

571 
pP¨ít
->
isBœck
 = 1;

572 if–
pSib
->
pLe·
 )ÖSib->pLe·->
isBœck
 = 1;

573 
	`rightRŸ©e
(
pTªe
, 
pP¨ít
);

574 
pX
 = 
pTªe
->
pHód
;

577 
pP¨ít
 = 
pX
->pParent;

579 if–
pX
 )ÖX->
isBœck
 = 1;

580 
	}
}

585 
	$båìCª©eTabÀ
(
Rbåì
* 
pRbåì
, 
n
)

587 
BtRbTªe
 *
pNewTbl
 = 
	`sqlôeMÆloc
((BtRbTree));

588 
	`sqlôeHashIn£π
(&
pRbåì
->
tblHash
, 0, 
n
, 
pNewTbl
);

589 
	}
}

595 
	$båìLogRﬁlbackOp
(
Rbåì
* 
pRbåì
, 
BtRﬁlbackOp
 *
pRﬁlbackOp
)

597 
	`as£π
–
pRbåì
->
eTønsSèã
 =
TRANS_INCHECKPOINT
 ||

598 
pRbåì
->
eTønsSèã
 =
TRANS_INTRANSACTION
 );

599 if–
pRbåì
->
eTønsSèã
 =
TRANS_INTRANSACTION
 ){

600 
pRﬁlbackOp
->
pNext
 = 
pRbåì
->
pTønsRﬁlback
;

601 
pRbåì
->
pTønsRﬁlback
 = 
pRﬁlbackOp
;

603 if–
pRbåì
->
eTønsSèã
 =
TRANS_INCHECKPOINT
 ){

604 if–!
pRbåì
->
pCheckRﬁlback
 ){

605 
pRbåì
->
pCheckRﬁlbackTaû
 = 
pRﬁlbackOp
;

607 
pRﬁlbackOp
->
pNext
 = 
pRbåì
->
pCheckRﬁlback
;

608 
pRbåì
->
pCheckRﬁlback
 = 
pRﬁlbackOp
;

610 
	}
}

612 
	$sqlôeRbåìO≥n
(

613 c⁄° *
zFûíame
,

614 
mode
,

615 
nPg
,

616 
Båì
 **
µBåì


618 
Rbåì
 **
µRbåì
 = (Rbåì**)
µBåì
;

619 *
µRbåì
 = (
Rbåì
 *)
	`sqlôeMÆloc
((Rbtree));

620 if–
sqlôe_mÆloc_Áûed
 ) 
›í_no_mem
;

621 
	`sqlôeHashInô
(&(*
µRbåì
)->
tblHash
, 
SQLITE_HASH_INT
, 0);

624 
	`båìCª©eTabÀ
(*
µRbåì
, 2);

625 if–
sqlôe_mÆloc_Áûed
 ) 
›í_no_mem
;

626 (*
µRbåì
)->
√xt_idx
 = 3;

627 (*
µRbåì
)->
pOps
 = &
sqlôeRbåìOps
;

631 (*
µRbåì
)->
aMëaD©a
[2] = 4;

633  
SQLITE_OK
;

635 
›í_no_mem
:

636 *
µBåì
 = 0;

637  
SQLITE_NOMEM
;

638 
	}
}

644 
	$memRbåìCª©eTabÀ
(
Rbåì
* 
åì
, * 
n
)

646 
	`as£π
–
åì
->
eTønsSèã
 !
TRANS_NONE
 );

648 *
n
 = 
åì
->
√xt_idx
++;

649 
	`båìCª©eTabÀ
(
åì
, *
n
);

650 if–
sqlôe_mÆloc_Áûed
 )  
SQLITE_NOMEM
;

654 if–
åì
->
eTønsSèã
 !
TRANS_ROLLBACK
 ){

655 
BtRﬁlbackOp
 *
pRﬁlbackOp
 = 
	`sqlôeMÆloc
((BtRollbackOp));

656 if–
pRﬁlbackOp
==0 )  
SQLITE_NOMEM
;

657 
pRﬁlbackOp
->
eOp
 = 
ROLLBACK_DROP
;

658 
pRﬁlbackOp
->
iTab
 = *
n
;

659 
	`båìLogRﬁlbackOp
(
åì
, 
pRﬁlbackOp
);

662  
SQLITE_OK
;

663 
	}
}

668 
	$memRbåìDr›TabÀ
(
Rbåì
* 
åì
, 
n
)

670 
BtRbTªe
 *
pTªe
;

671 
	`as£π
–
åì
->
eTønsSèã
 !
TRANS_NONE
 );

673 
	`memRbåìCÀ¨TabÀ
(
åì
, 
n
);

674 
pTªe
 = 
	`sqlôeHashIn£π
(&
åì
->
tblHash
, 0, 
n
, 0);

675 
	`as£π
(
pTªe
);

676 
	`as£π
–
pTªe
->
pCurs‹s
==0 );

677 
	`sqlôeFªe
(
pTªe
);

679 if–
åì
->
eTønsSèã
 !
TRANS_ROLLBACK
 ){

680 
BtRﬁlbackOp
 *
pRﬁlbackOp
 = 
	`sqlôeMÆloc
((BtRollbackOp));

681 if–
pRﬁlbackOp
==0 )  
SQLITE_NOMEM
;

682 
pRﬁlbackOp
->
eOp
 = 
ROLLBACK_CREATE
;

683 
pRﬁlbackOp
->
iTab
 = 
n
;

684 
	`båìLogRﬁlbackOp
(
åì
, 
pRﬁlbackOp
);

687  
SQLITE_OK
;

688 
	}
}

690 
	$memRbåìKeyCom∑ª
(
RbtCurs‹
* 
pCur
, c⁄° *
pKey
, 
nKey
,

691 
nIgn‹e
, *
pRes
)

693 
	`as£π
(
pCur
);

695 if–!
pCur
->
pNode
 ) {

696 *
pRes
 = -1;

698 if–(
pCur
->
pNode
->
nKey
 - 
nIgn‹e
) < 0 ){

699 *
pRes
 = -1;

701 *
pRes
 = 
	`key_com∑ª
(
pCur
->
pNode
->
pKey
,ÖCur->pNode->
nKey
-
nIgn‹e
,

702 
pKey
, 
nKey
);

705  
SQLITE_OK
;

706 
	}
}

714 
	$memRbåìCurs‹
(

715 
Rbåì
* 
åì
,

716 
iTabÀ
,

717 
wrFœg
,

718 
RbtCurs‹
 **
µCur


720 
RbtCurs‹
 *
pCur
;

721 
	`as£π
(
åì
);

722 
pCur
 = *
µCur
 = 
	`sqlôeMÆloc
((
RbtCurs‹
));

723 if–
sqlôe_mÆloc_Áûed
 )  
SQLITE_NOMEM
;

724 
pCur
->
pTªe
 = 
	`sqlôeHashFöd
(&
åì
->
tblHash
, 0, 
iTabÀ
);

725 
	`as£π
–
pCur
->
pTªe
 );

726 
pCur
->
pRbåì
 = 
åì
;

727 
pCur
->
iTªe
 = 
iTabÀ
;

728 
pCur
->
pOps
 = &
sqlôeRbåìCurs‹Ops
;

729 
pCur
->
wrFœg
 = wrFlag;

730 
pCur
->
pSh¨ed
 =ÖCur->
pTªe
->
pCurs‹s
;

731 
pCur
->
pTªe
->
pCurs‹s
 =ÖCur;

733 
	`as£π
–(*
µCur
)->
pTªe
 );

734  
SQLITE_OK
;

735 
	}
}

745 
	$memRbåìIn£π
(

746 
RbtCurs‹
* 
pCur
,

747 c⁄° *
pKey
,

748 
nKey
,

749 c⁄° *
pD©aI≈ut
,

750 
nD©a


752 * 
pD©a
;

753 
m©ch
;

757 
	`as£π
–
pCur
->
pRbåì
->
eTønsSèã
 !
TRANS_NONE
 );

760 if–
	`checkRódLocks
(
pCur
) ){

761  
SQLITE_LOCKED
;

766 
pD©a
 = 
	`sqlôeMÆlocRaw
(
nD©a
);

767 if–
sqlôe_mÆloc_Áûed
 )  
SQLITE_NOMEM
;

768 
	`mem˝y
(
pD©a
, 
pD©aI≈ut
, 
nD©a
);

781 
	`memRbåìMovëo
–
pCur
, 
pKey
, 
nKey
, &
m©ch
);

782 if–
m©ch
 ){

783 
BtRbNode
 *
pNode
 = 
	`sqlôeMÆloc
((BtRbNode));

784 if–
pNode
==0 )  
SQLITE_NOMEM
;

785 
pNode
->
nKey
 =ÇKey;

786 
pNode
->
pKey
 = 
	`sqlôeMÆlocRaw
(
nKey
);

787 if–
sqlôe_mÆloc_Áûed
 )  
SQLITE_NOMEM
;

788 
	`mem˝y
(
pNode
->
pKey
,ÖKey, 
nKey
);

789 
pNode
->
nD©a
 =ÇData;

790 
pNode
->
pD©a
 =ÖData;

791 if–
pCur
->
pNode
 ){

792  
m©ch
 ){

794 
	`as£π
–!
pCur
->
pNode
->
pRight
 );

795 
pNode
->
pP¨ít
 = 
pCur
->pNode;

796 
pCur
->
pNode
->
pRight
 =ÖNode;

799 
	`as£π
–!
pCur
->
pNode
->
pLe·
 );

800 
pNode
->
pP¨ít
 = 
pCur
->pNode;

801 
pCur
->
pNode
->
pLe·
 =ÖNode;

804 
	`as£π
(0);

807 
pCur
->
pTªe
->
pHód
 = 
pNode
;

811 
pCur
->
pNode
 =ÖNode;

814 
	`do_ö£π_bÆ™cög
(
pCur
->
pTªe
, 
pNode
);

817 if–
pCur
->
pRbåì
->
eTønsSèã
 !
TRANS_ROLLBACK
 ){

818 
BtRﬁlbackOp
 *
pOp
 = 
	`sqlôeMÆloc
( (BtRollbackOp) );

819 if–
pOp
==0 )  
SQLITE_NOMEM
;

820 
pOp
->
eOp
 = 
ROLLBACK_DELETE
;

821 
pOp
->
iTab
 = 
pCur
->
iTªe
;

822 
pOp
->
nKey
 = 
pNode
->nKey;

823 
pOp
->
pKey
 = 
	`sqlôeMÆlocRaw
–pOp->
nKey
 );

824 if–
sqlôe_mÆloc_Áûed
 )  
SQLITE_NOMEM
;

825 
	`mem˝y
–
pOp
->
pKey
, 
pNode
->pKey,ÖOp->
nKey
 );

826 
	`båìLogRﬁlbackOp
(
pCur
->
pRbåì
, 
pOp
);

834 if–
pCur
->
pRbåì
->
eTønsSèã
 !
TRANS_ROLLBACK
 ){

835 
BtRﬁlbackOp
 *
pOp
 = 
	`sqlôeMÆloc
( (BtRollbackOp) );

836 if–
pOp
==0 )  
SQLITE_NOMEM
;

837 
pOp
->
iTab
 = 
pCur
->
iTªe
;

838 
pOp
->
nKey
 = 
pCur
->
pNode
->nKey;

839 
pOp
->
pKey
 = 
	`sqlôeMÆlocRaw
–pOp->
nKey
 );

840 if–
sqlôe_mÆloc_Áûed
 )  
SQLITE_NOMEM
;

841 
	`mem˝y
–
pOp
->
pKey
, 
pCur
->
pNode
->pKey,ÖOp->
nKey
 );

842 
pOp
->
nD©a
 = 
pCur
->
pNode
->nData;

843 
pOp
->
pD©a
 = 
pCur
->
pNode
->pData;

844 
pOp
->
eOp
 = 
ROLLBACK_INSERT
;

845 
	`båìLogRﬁlbackOp
(
pCur
->
pRbåì
, 
pOp
);

847 
	`sqlôeFªe
–
pCur
->
pNode
->
pD©a
 );

851 
pCur
->
pNode
->
pD©a
 =ÖData;

852 
pCur
->
pNode
->
nD©a
 =ÇData;

855  
SQLITE_OK
;

856 
	}
}

871 
	$memRbåìMovëo
(

872 
RbtCurs‹
* 
pCur
,

873 c⁄° *
pKey
,

874 
nKey
,

875 *
pRes


877 
BtRbNode
 *
pTmp
 = 0;

879 
pCur
->
pNode
 =ÖCur->
pTªe
->
pHód
;

880 *
pRes
 = -1;

881  
pCur
->
pNode
 && *
pRes
 ) {

882 *
pRes
 = 
	`key_com∑ª
(
pCur
->
pNode
->
pKey
,ÖCur->pNode->
nKey
,ÖKey,ÇKey);

883 
pTmp
 = 
pCur
->
pNode
;

884  *
pRes
 ){

886 
pCur
->
pNode
 =ÖCur->pNode->
pLe·
;

889 
pCur
->
pNode
 =ÖCur->pNode->
pRight
;

899 if–!
pCur
->
pNode
 )ÖCur->pNodê
pTmp
;

900 
pCur
->
eSkù
 = 
SKIP_NONE
;

902  
SQLITE_OK
;

903 
	}
}

920 
	$memRbåìDñëe
(
RbtCurs‹
* 
pCur
)

922 
BtRbNode
 *
pZ
;

923 
BtRbNode
 *
pChûd
;

927 
	`as£π
–
pCur
->
pRbåì
->
eTønsSèã
 !
TRANS_NONE
 );

930 if–
	`checkRódLocks
(
pCur
) ){

931  
SQLITE_LOCKED
;

934 
pZ
 = 
pCur
->
pNode
;

935 if–!
pZ
 ){

936  
SQLITE_OK
;

941 if–
pCur
->
pRbåì
->
eTønsSèã
 !
TRANS_ROLLBACK
 ){

942 
BtRﬁlbackOp
 *
pOp
 = 
	`sqlôeMÆloc
( (BtRollbackOp) );

943 if–
pOp
==0 )  
SQLITE_NOMEM
;

944 
pOp
->
iTab
 = 
pCur
->
iTªe
;

945 
pOp
->
nKey
 = 
pZ
->nKey;

946 
pOp
->
pKey
 = 
pZ
->pKey;

947 
pOp
->
nD©a
 = 
pZ
->nData;

948 
pOp
->
pD©a
 = 
pZ
->pData;

949 
pOp
->
eOp
 = 
ROLLBACK_INSERT
;

950 
	`båìLogRﬁlbackOp
(
pCur
->
pRbåì
, 
pOp
);

959 if–
pZ
->
pLe·
 &&ÖZ->
pRight
 ){

960 
BtRbNode
 *
pTmp
;

961 
dummy
;

962 
pCur
->
eSkù
 = 
SKIP_NONE
;

963 
	`memRbåìNext
(
pCur
, &
dummy
);

964 
	`as£π
–
dummy
 == 0 );

965 if–
pCur
->
pRbåì
->
eTønsSèã
 =
TRANS_ROLLBACK
 ){

966 
	`sqlôeFªe
(
pZ
->
pKey
);

967 
	`sqlôeFªe
(
pZ
->
pD©a
);

969 
pZ
->
pD©a
 = 
pCur
->
pNode
->pData;

970 
pZ
->
nD©a
 = 
pCur
->
pNode
->nData;

971 
pZ
->
pKey
 = 
pCur
->
pNode
->pKey;

972 
pZ
->
nKey
 = 
pCur
->
pNode
->nKey;

973 
pTmp
 = 
pZ
;

974 
pZ
 = 
pCur
->
pNode
;

975 
pCur
->
pNode
 = 
pTmp
;

976 
pCur
->
eSkù
 = 
SKIP_NEXT
;

978 
ªs
;

979 
pCur
->
eSkù
 = 
SKIP_NONE
;

980 
	`memRbåìNext
(
pCur
, &
ªs
);

981 
pCur
->
eSkù
 = 
SKIP_NEXT
;

982 if–
ªs
 ){

983 
	`memRbåìLa°
(
pCur
, &
ªs
);

984 
	`memRbåìPªvious
(
pCur
, &
ªs
);

985 
pCur
->
eSkù
 = 
SKIP_PREV
;

987 if–
pCur
->
pRbåì
->
eTønsSèã
 =
TRANS_ROLLBACK
 ){

988 
	`sqlôeFªe
(
pZ
->
pKey
);

989 
	`sqlôeFªe
(
pZ
->
pD©a
);

996 
BtRbNode
 **
µP¨ítSlŸ
 = 0;

997 
	`as£π
–!
pZ
->
pLe·
 || !pZ->
pRight
 );

998 
pChûd
 = ((
pZ
->
pLe·
)?pZ->pLe·:pZ->
pRight
);

999 if–
pZ
->
pP¨ít
 ){

1000 
	`as£π
–
pZ
 =pZ->
pP¨ít
->
pLe·
 ||ÖZ =pZ->pP¨ít->
pRight
 );

1001 
µP¨ítSlŸ
 = ((
pZ
 =pZ->
pP¨ít
->
pLe·
)

1002 ?&
pZ
->
pP¨ít
->
pLe·
:&pZ->pP¨ít->
pRight
);

1003 *
µP¨ítSlŸ
 = 
pChûd
;

1005 
pCur
->
pTªe
->
pHód
 = 
pChûd
;

1007 if–
pChûd
 )ÖChûd->
pP¨ít
 = 
pZ
->pParent;

1015 if–
pZ
->
isBœck
 ){

1016 
	`do_dñëe_bÆ™cög
(
pCur
->
pTªe
, 
pChûd
, 
pZ
->
pP¨ít
);

1019 
	`sqlôeFªe
(
pZ
);

1020  
SQLITE_OK
;

1021 
	}
}

1026 
	$memRbåìCÀ¨TabÀ
(
Rbåì
* 
åì
, 
n
)

1028 
BtRbTªe
 *
pTªe
;

1029 
BtRbNode
 *
pNode
;

1031 
pTªe
 = 
	`sqlôeHashFöd
(&
åì
->
tblHash
, 0, 
n
);

1032 
	`as£π
(
pTªe
);

1034 
pNode
 = 
pTªe
->
pHód
;

1035  
pNode
 ){

1036 if–
pNode
->
pLe·
 ){

1037 
pNode
 =ÖNode->
pLe·
;

1039 if–
pNode
->
pRight
 ){

1040 
pNode
 =ÖNode->
pRight
;

1043 
BtRbNode
 *
pTmp
 = 
pNode
->
pP¨ít
;

1044 if–
åì
->
eTønsSèã
 =
TRANS_ROLLBACK
 ){

1045 
	`sqlôeFªe
–
pNode
->
pKey
 );

1046 
	`sqlôeFªe
–
pNode
->
pD©a
 );

1048 
BtRﬁlbackOp
 *
pRﬁlbackOp
 = 
	`sqlôeMÆlocRaw
((BtRollbackOp));

1049 if–
pRﬁlbackOp
==0 )  
SQLITE_NOMEM
;

1050 
pRﬁlbackOp
->
eOp
 = 
ROLLBACK_INSERT
;

1051 
pRﬁlbackOp
->
iTab
 = 
n
;

1052 
pRﬁlbackOp
->
nKey
 = 
pNode
->nKey;

1053 
pRﬁlbackOp
->
pKey
 = 
pNode
->pKey;

1054 
pRﬁlbackOp
->
nD©a
 = 
pNode
->nData;

1055 
pRﬁlbackOp
->
pD©a
 = 
pNode
->pData;

1056 
	`båìLogRﬁlbackOp
(
åì
, 
pRﬁlbackOp
);

1058 
	`sqlôeFªe
–
pNode
 );

1059 if–
pTmp
 ){

1060 if–
pTmp
->
pLe·
 =
pNode
 )ÖTmp->pLeft = 0;

1061 if–
pTmp
->
pRight
 =
pNode
 )ÖTmp->pRight = 0;

1063 
pNode
 = 
pTmp
;

1067 
pTªe
->
pHód
 = 0;

1068  
SQLITE_OK
;

1069 
	}
}

1071 
	$memRbåìFú°
(
RbtCurs‹
* 
pCur
, *
pRes
)

1073 if–
pCur
->
pTªe
->
pHód
 ){

1074 
pCur
->
pNode
 =ÖCur->
pTªe
->
pHód
;

1075  
pCur
->
pNode
->
pLe·
 ){

1076 
pCur
->
pNode
 =ÖCur->pNode->
pLe·
;

1079 if–
pCur
->
pNode
 ){

1080 *
pRes
 = 0;

1082 *
pRes
 = 1;

1084 
pCur
->
eSkù
 = 
SKIP_NONE
;

1085  
SQLITE_OK
;

1086 
	}
}

1088 
	$memRbåìLa°
(
RbtCurs‹
* 
pCur
, *
pRes
)

1090 if–
pCur
->
pTªe
->
pHód
 ){

1091 
pCur
->
pNode
 =ÖCur->
pTªe
->
pHód
;

1092  
pCur
->
pNode
->
pRight
 ){

1093 
pCur
->
pNode
 =ÖCur->pNode->
pRight
;

1096 if–
pCur
->
pNode
 ){

1097 *
pRes
 = 0;

1099 *
pRes
 = 1;

1101 
pCur
->
eSkù
 = 
SKIP_NONE
;

1102  
SQLITE_OK
;

1103 
	}
}

1111 
	$memRbåìNext
(
RbtCurs‹
* 
pCur
, *
pRes
)

1113 if–
pCur
->
pNode
 &&ÖCur->
eSkù
 !
SKIP_NEXT
 ){

1114 if–
pCur
->
pNode
->
pRight
 ){

1115 
pCur
->
pNode
 =ÖCur->pNode->
pRight
;

1116  
pCur
->
pNode
->
pLe·
 )

1117 
pCur
->
pNode
 =ÖCur->pNode->
pLe·
;

1119 
BtRbNode
 * 
pX
 = 
pCur
->
pNode
;

1120 
pCur
->
pNode
 = 
pX
->
pP¨ít
;

1121  
pCur
->
pNode
 && (pCur->pNode->
pRight
 =
pX
) ){

1122 
pX
 = 
pCur
->
pNode
;

1123 
pCur
->
pNode
 = 
pX
->
pP¨ít
;

1127 
pCur
->
eSkù
 = 
SKIP_NONE
;

1129 if–!
pCur
->
pNode
 ){

1130 *
pRes
 = 1;

1132 *
pRes
 = 0;

1135  
SQLITE_OK
;

1136 
	}
}

1138 
	$memRbåìPªvious
(
RbtCurs‹
* 
pCur
, *
pRes
)

1140 if–
pCur
->
pNode
 &&ÖCur->
eSkù
 !
SKIP_PREV
 ){

1141 if–
pCur
->
pNode
->
pLe·
 ){

1142 
pCur
->
pNode
 =ÖCur->pNode->
pLe·
;

1143  
pCur
->
pNode
->
pRight
 )

1144 
pCur
->
pNode
 =ÖCur->pNode->
pRight
;

1146 
BtRbNode
 * 
pX
 = 
pCur
->
pNode
;

1147 
pCur
->
pNode
 = 
pX
->
pP¨ít
;

1148  
pCur
->
pNode
 && (pCur->pNode->
pLe·
 =
pX
) ){

1149 
pX
 = 
pCur
->
pNode
;

1150 
pCur
->
pNode
 = 
pX
->
pP¨ít
;

1154 
pCur
->
eSkù
 = 
SKIP_NONE
;

1156 if–!
pCur
->
pNode
 ){

1157 *
pRes
 = 1;

1159 *
pRes
 = 0;

1162  
SQLITE_OK
;

1163 
	}
}

1165 
	$memRbåìKeySize
(
RbtCurs‹
* 
pCur
, *
pSize
)

1167 if–
pCur
->
pNode
 ){

1168 *
pSize
 = 
pCur
->
pNode
->
nKey
;

1170 *
pSize
 = 0;

1172  
SQLITE_OK
;

1173 
	}
}

1175 
	$memRbåìKey
(
RbtCurs‹
* 
pCur
, 
off£t
, 
amt
, *
zBuf
)

1177 if–!
pCur
->
pNode
 )  0;

1178 if–!
pCur
->
pNode
->
pKey
 || ((
amt
 + 
off£t
Ë<pCur->pNode->
nKey
) ){

1179 
	`mem˝y
(
zBuf
, ((*)
pCur
->
pNode
->
pKey
)+
off£t
, 
amt
);

1181 
	`mem˝y
(
zBuf
, ((*)
pCur
->
pNode
->
pKey
)+
off£t
,ÖCur->pNode->
nKey
-offset);

1182 
amt
 = 
pCur
->
pNode
->
nKey
-
off£t
;

1184  
amt
;

1185 
	}
}

1187 
	$memRbåìD©aSize
(
RbtCurs‹
* 
pCur
, *
pSize
)

1189 if–
pCur
->
pNode
 ){

1190 *
pSize
 = 
pCur
->
pNode
->
nD©a
;

1192 *
pSize
 = 0;

1194  
SQLITE_OK
;

1195 
	}
}

1197 
	$memRbåìD©a
(
RbtCurs‹
 *
pCur
, 
off£t
, 
amt
, *
zBuf
)

1199 if–!
pCur
->
pNode
 )  0;

1200 if–(
amt
 + 
off£t
Ë<
pCur
->
pNode
->
nD©a
 ){

1201 
	`mem˝y
(
zBuf
, ((*)
pCur
->
pNode
->
pD©a
)+
off£t
, 
amt
);

1203 
	`mem˝y
(
zBuf
, ((*)
pCur
->
pNode
->
pD©a
)+
off£t
 ,pCur->pNode->
nD©a
-offset);

1204 
amt
 = 
pCur
->
pNode
->
nD©a
-
off£t
;

1206  
amt
;

1207 
	}
}

1209 
	$memRbåìClo£Curs‹
(
RbtCurs‹
* 
pCur
)

1211 if–
pCur
->
pTªe
->
pCurs‹s
==pCur ){

1212 
pCur
->
pTªe
->
pCurs‹s
 =ÖCur->
pSh¨ed
;

1214 
RbtCurs‹
 *
p
 = 
pCur
->
pTªe
->
pCurs‹s
;

1215  
p
 &&Ö->
pSh¨ed
!=
pCur
 ){Ö =Ö->pShared; }

1216 
	`as£π
–
p
!=0 );

1217 if–
p
 ){

1218 
p
->
pSh¨ed
 = 
pCur
->pShared;

1221 
	`sqlôeFªe
(
pCur
);

1222  
SQLITE_OK
;

1223 
	}
}

1225 
	$memRbåìGëMëa
(
Rbåì
* 
åì
, * 
aMëa
)

1227 
	`mem˝y
–
aMëa
, 
åì
->
aMëaD©a
, (Ë* 
SQLITE_N_BTREE_META
 );

1228  
SQLITE_OK
;

1229 
	}
}

1231 
	$memRbåìUpd©eMëa
(
Rbåì
* 
åì
, * 
aMëa
)

1233 
	`mem˝y
–
åì
->
aMëaD©a
, 
aMëa
, (Ë* 
SQLITE_N_BTREE_META
 );

1234  
SQLITE_OK
;

1235 
	}
}

1242 *
	$memRbåìI¡egrôyCheck
(
Rbåì
* 
åì
, * 
aRoŸ
, 
nRoŸ
)

1244 * 
msg
 = 0;

1245 
HashEÀm
 *
p
;

1247 
p
=
	`sqlôeHashFú°
(&
åì
->
tblHash
);Ö;Ö=
	`sqlôeHashNext
(p)){

1248 
BtRbTªe
 *
pTªe
 = 
	`sqlôeHashD©a
(
p
);

1249 
	`check_ªdbœck_åì
(
pTªe
, &
msg
);

1252  
msg
;

1253 
	}
}

1255 
	$memRbåìSëCacheSize
(
Rbåì
* 
åì
, 
sz
)

1257  
SQLITE_OK
;

1258 
	}
}

1260 
	$memRbåìSëSa„tyLevñ
(
Rbåì
 *
pBt
, 
Àvñ
){

1261  
SQLITE_OK
;

1262 
	}
}

1264 
	$memRbåìBegöTøns
(
Rbåì
* 
åì
)

1266 if–
åì
->
eTønsSèã
 !
TRANS_NONE
 )

1267  
SQLITE_ERROR
;

1269 
	`as£π
–
åì
->
pTønsRﬁlback
 == 0 );

1270 
åì
->
eTønsSèã
 = 
TRANS_INTRANSACTION
;

1271  
SQLITE_OK
;

1272 
	}
}

1277 
	$dñëeRﬁlbackLi°
(
BtRﬁlbackOp
 *
pOp
){

1278  
pOp
 ){

1279 
BtRﬁlbackOp
 *
pTmp
 = 
pOp
->
pNext
;

1280 
	`sqlôeFªe
(
pOp
->
pD©a
);

1281 
	`sqlôeFªe
(
pOp
->
pKey
);

1282 
	`sqlôeFªe
(
pOp
);

1283 
pOp
 = 
pTmp
;

1285 
	}
}

1287 
	$memRbåìCommô
(
Rbåì
* 
åì
){

1289 
	`dñëeRﬁlbackLi°
(
åì
->
pCheckRﬁlback
);

1290 
	`dñëeRﬁlbackLi°
(
åì
->
pTønsRﬁlback
);

1291 
åì
->
pTønsRﬁlback
 = 0;

1292 
åì
->
pCheckRﬁlback
 = 0;

1293 
åì
->
pCheckRﬁlbackTaû
 = 0;

1294 
åì
->
eTønsSèã
 = 
TRANS_NONE
;

1295  
SQLITE_OK
;

1296 
	}
}

1301 
	$memRbåìClo£
(
Rbåì
* 
åì
)

1303 
HashEÀm
 *
p
;

1304 
	`memRbåìCommô
(
åì
);

1305  (
p
=
	`sqlôeHashFú°
(&
åì
->
tblHash
))!=0 ){

1306 
åì
->
eTønsSèã
 = 
TRANS_ROLLBACK
;

1307 
	`memRbåìDr›TabÀ
(
åì
, 
	`sqlôeHashKeysize
(
p
));

1309 
	`sqlôeHashCÀ¨
(&
åì
->
tblHash
);

1310 
	`sqlôeFªe
(
åì
);

1311  
SQLITE_OK
;

1312 
	}
}

1317 
	$execuã_rﬁlback_li°
(
Rbåì
 *
pRbåì
, 
BtRﬁlbackOp
 *
pLi°
)

1319 
BtRﬁlbackOp
 *
pTmp
;

1320 
RbtCurs‹
 
cur
;

1321 
ªs
;

1323 
cur
.
pRbåì
 =ÖRbtree;

1324 
cur
.
wrFœg
 = 1;

1325  
pLi°
 ){

1326  
pLi°
->
eOp
 ){

1327 
ROLLBACK_INSERT
:

1328 
cur
.
pTªe
 = 
	`sqlôeHashFöd
–&
pRbåì
->
tblHash
, 0, 
pLi°
->
iTab
 );

1329 
	`as£π
(
cur
.
pTªe
);

1330 
cur
.
iTªe
 = 
pLi°
->
iTab
;

1331 
cur
.
eSkù
 = 
SKIP_NONE
;

1332 
	`memRbåìIn£π
–&
cur
, 
pLi°
->
pKey
,

1333 
pLi°
->
nKey
,ÖLi°->
pD©a
,ÖLi°->
nD©a
 );

1335 
ROLLBACK_DELETE
:

1336 
cur
.
pTªe
 = 
	`sqlôeHashFöd
–&
pRbåì
->
tblHash
, 0, 
pLi°
->
iTab
 );

1337 
	`as£π
(
cur
.
pTªe
);

1338 
cur
.
iTªe
 = 
pLi°
->
iTab
;

1339 
cur
.
eSkù
 = 
SKIP_NONE
;

1340 
	`memRbåìMovëo
(&
cur
, 
pLi°
->
pKey
,ÖLi°->
nKey
, &
ªs
);

1341 
	`as£π
(
ªs
 == 0);

1342 
	`memRbåìDñëe
–&
cur
 );

1344 
ROLLBACK_CREATE
:

1345 
	`båìCª©eTabÀ
(
pRbåì
, 
pLi°
->
iTab
);

1347 
ROLLBACK_DROP
:

1348 
	`memRbåìDr›TabÀ
(
pRbåì
, 
pLi°
->
iTab
);

1351 
	`as£π
(0);

1353 
	`sqlôeFªe
(
pLi°
->
pKey
);

1354 
	`sqlôeFªe
(
pLi°
->
pD©a
);

1355 
pTmp
 = 
pLi°
->
pNext
;

1356 
	`sqlôeFªe
(
pLi°
);

1357 
pLi°
 = 
pTmp
;

1359 
	}
}

1361 
	$memRbåìRﬁlback
(
Rbåì
* 
åì
)

1363 
åì
->
eTønsSèã
 = 
TRANS_ROLLBACK
;

1364 
	`execuã_rﬁlback_li°
(
åì
,Åªe->
pCheckRﬁlback
);

1365 
	`execuã_rﬁlback_li°
(
åì
,Åªe->
pTønsRﬁlback
);

1366 
åì
->
pTønsRﬁlback
 = 0;

1367 
åì
->
pCheckRﬁlback
 = 0;

1368 
åì
->
pCheckRﬁlbackTaû
 = 0;

1369 
åì
->
eTønsSèã
 = 
TRANS_NONE
;

1370  
SQLITE_OK
;

1371 
	}
}

1373 
	$memRbåìBegöCk±
(
Rbåì
* 
åì
)

1375 if–
åì
->
eTønsSèã
 !
TRANS_INTRANSACTION
 )

1376  
SQLITE_ERROR
;

1378 
	`as£π
–
åì
->
pCheckRﬁlback
 == 0 );

1379 
	`as£π
–
åì
->
pCheckRﬁlbackTaû
 == 0 );

1380 
åì
->
eTønsSèã
 = 
TRANS_INCHECKPOINT
;

1381  
SQLITE_OK
;

1382 
	}
}

1384 
	$memRbåìCommôCk±
(
Rbåì
* 
åì
)

1386 if–
åì
->
eTønsSèã
 =
TRANS_INCHECKPOINT
 ){

1387 if–
åì
->
pCheckRﬁlback
 ){

1388 
åì
->
pCheckRﬁlbackTaû
->
pNext
 =Åªe->
pTønsRﬁlback
;

1389 
åì
->
pTønsRﬁlback
 =Åªe->
pCheckRﬁlback
;

1390 
åì
->
pCheckRﬁlback
 = 0;

1391 
åì
->
pCheckRﬁlbackTaû
 = 0;

1393 
åì
->
eTønsSèã
 = 
TRANS_INTRANSACTION
;

1395  
SQLITE_OK
;

1396 
	}
}

1398 
	$memRbåìRﬁlbackCk±
(
Rbåì
* 
åì
)

1400 if–
åì
->
eTønsSèã
 !
TRANS_INCHECKPOINT
 )  
SQLITE_OK
;

1401 
åì
->
eTønsSèã
 = 
TRANS_ROLLBACK
;

1402 
	`execuã_rﬁlback_li°
(
åì
,Åªe->
pCheckRﬁlback
);

1403 
åì
->
pCheckRﬁlback
 = 0;

1404 
åì
->
pCheckRﬁlbackTaû
 = 0;

1405 
åì
->
eTønsSèã
 = 
TRANS_INTRANSACTION
;

1406  
SQLITE_OK
;

1407 
	}
}

1409 #ifde‡
SQLITE_TEST


1410 
	$memRbåìPageDump
(
Rbåì
* 
åì
, 
pgno
, 
ªc
)

1412 
	`as£π
(!"Cannot call sqliteRbtreePageDump");

1413  
SQLITE_OK
;

1414 
	}
}

1416 
	$memRbåìCurs‹Dump
(
RbtCurs‹
* 
pCur
, * 
aRes
)

1418 
	`as£π
(!"Cannot call sqliteRbtreeCursorDump");

1419  
SQLITE_OK
;

1420 
	}
}

1423 
Pagî
 *
	$memRbåìPagî
(
Rbåì
* 
åì
)

1426 
	}
}

1431 c⁄° *
	$memRbåìGëFûíame
(
Rbåì
 *
pBt
){

1433 
	}
}

1438 
	$memRbåìC›yFûe
(
Rbåì
 *
pBt
, Rbåì *
pBt2
){

1439  
SQLITE_INTERNAL
;

1440 
	}
}

1442 
BtOps
 
	gsqlôeRbåìOps
 = {

1443 ((*)(
Båì
*)Ë
memRbåìClo£
,

1444 ((*)(
Båì
*,)Ë
memRbåìSëCacheSize
,

1445 ((*)(
Båì
*,)Ë
memRbåìSëSa„tyLevñ
,

1446 ((*)(
Båì
*)Ë
memRbåìBegöTøns
,

1447 ((*)(
Båì
*)Ë
memRbåìCommô
,

1448 ((*)(
Båì
*)Ë
memRbåìRﬁlback
,

1449 ((*)(
Båì
*)Ë
memRbåìBegöCk±
,

1450 ((*)(
Båì
*)Ë
memRbåìCommôCk±
,

1451 ((*)(
Båì
*)Ë
memRbåìRﬁlbackCk±
,

1452 ((*)(
Båì
*,*)Ë
memRbåìCª©eTabÀ
,

1453 ((*)(
Båì
*,*)Ë
memRbåìCª©eTabÀ
,

1454 ((*)(
Båì
*,)Ë
memRbåìDr›TabÀ
,

1455 ((*)(
Båì
*,)Ë
memRbåìCÀ¨TabÀ
,

1456 ((*)(
Båì
*,,,
BtCurs‹
**)Ë
memRbåìCurs‹
,

1457 ((*)(
Båì
*,*)Ë
memRbåìGëMëa
,

1458 ((*)(
Båì
*,*)Ë
memRbåìUpd©eMëa
,

1459 (*(*)(
Båì
*,*,)Ë
memRbåìI¡egrôyCheck
,

1460 (c⁄° *(*)(
Båì
*)Ë
memRbåìGëFûíame
,

1461 ((*)(
Båì
*,Båì*)Ë
memRbåìC›yFûe
,

1462 (
Pagî
*(*)(
Båì
*)Ë
memRbåìPagî
,

1463 #ifde‡
SQLITE_TEST


1464 ((*)(
Båì
*,,)Ë
memRbåìPageDump
,

1468 
BtCurs‹Ops
 
	gsqlôeRbåìCurs‹Ops
 = {

1469 ((*)(
BtCurs‹
*,c⁄° *,,*)Ë
memRbåìMovëo
,

1470 ((*)(
BtCurs‹
*)Ë
memRbåìDñëe
,

1471 ((*)(
BtCurs‹
*,c⁄° *,,c⁄° *,)Ë
memRbåìIn£π
,

1472 ((*)(
BtCurs‹
*,*)Ë
memRbåìFú°
,

1473 ((*)(
BtCurs‹
*,*)Ë
memRbåìLa°
,

1474 ((*)(
BtCurs‹
*,*)Ë
memRbåìNext
,

1475 ((*)(
BtCurs‹
*,*)Ë
memRbåìPªvious
,

1476 ((*)(
BtCurs‹
*,*)Ë
memRbåìKeySize
,

1477 ((*)(
BtCurs‹
*,,,*)Ë
memRbåìKey
,

1478 ((*)(
BtCurs‹
*,c⁄° *,,,*)Ë
memRbåìKeyCom∑ª
,

1479 ((*)(
BtCurs‹
*,*)Ë
memRbåìD©aSize
,

1480 ((*)(
BtCurs‹
*,,,*)Ë
memRbåìD©a
,

1481 ((*)(
BtCurs‹
*)Ë
memRbåìClo£Curs‹
,

1482 #ifde‡
SQLITE_TEST


1483 ((*)(
BtCurs‹
*,*)Ë
memRbåìCurs‹Dump
,

	@build.c

28 
	~"sqlôeI¡.h
"

29 
	~<˘y≥.h
>

37 
	$sqlôeBegöP¨£
(
P¨£
 *
pP¨£
, 
ex∂aöFœg
){

38 
sqlôe
 *
db
 = 
pP¨£
->db;

39 
i
;

40 
pP¨£
->
ex∂aö
 = 
ex∂aöFœg
;

41 if((
db
->
Êags
 & 
SQLITE_Inôülized
)==0 && db->
öô
.
busy
==0 ){

42 
rc
 = 
	`sqlôeInô
(
db
, &
pP¨£
->
zEºMsg
);

43 if–
rc
!=
SQLITE_OK
 ){

44 
pP¨£
->
rc
 =Ñc;

45 
pP¨£
->
nEº
++;

48 
i
=0; i<
db
->
nDb
; i++){

49 
	`DbCÀ¨Pr›îty
(
db
, 
i
, 
DB_Locked
);

50 if–!
db
->
aDb
[
i
].
öTøns
 ){

51 
	`DbCÀ¨Pr›îty
(
db
, 
i
, 
DB_Cookõ
);

54 
pP¨£
->
nV¨
 = 0;

55 
	}
}

67 
	$sqlôeExec
(
P¨£
 *
pP¨£
){

68 
sqlôe
 *
db
 = 
pP¨£
->db;

69 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

71 if–
v
==0 && (v = 
	`sqlôeGëVdbe
(
pP¨£
))!=0 ){

72 
	`sqlôeVdbeAddOp
(
v
, 
OP_HÆt
, 0, 0);

74 if–
sqlôe_mÆloc_Áûed
 ) ;

75 if–
v
 && 
pP¨£
->
nEº
==0 ){

76 
FILE
 *
åa˚
 = (
db
->
Êags
 & 
SQLITE_VdbeTø˚
)!=0 ? 
°dout
 : 0;

77 
	`sqlôeVdbeTø˚
(
v
, 
åa˚
);

78 
	`sqlôeVdbeMakeRódy
(
v
, 
pP¨£
->
nV¨
,ÖP¨£->
ex∂aö
);

79 
pP¨£
->
rc
 =ÖP¨£->
nEº
 ? 
SQLITE_ERROR
 : 
SQLITE_DONE
;

80 
pP¨£
->
cﬁNamesSë
 = 0;

81 }if–
pP¨£
->
rc
==
SQLITE_OK
 ){

82 
pP¨£
->
rc
 = 
SQLITE_ERROR
;

84 
pP¨£
->
nTab
 = 0;

85 
pP¨£
->
nMem
 = 0;

86 
pP¨£
->
nSë
 = 0;

87 
pP¨£
->
nAgg
 = 0;

88 
pP¨£
->
nV¨
 = 0;

89 
	}
}

105 
TabÀ
 *
	$sqlôeFödTabÀ
(
sqlôe
 *
db
, c⁄° *
zName
, c⁄° *
zD©aba£
){

106 
TabÀ
 *
p
 = 0;

107 
i
;

108 
i
=0; i<
db
->
nDb
; i++){

109 
j
 = (
i
<2) ? i^1 : i;

110 if–
zD©aba£
!=0 && 
	`sqlôeSåICmp
(zD©aba£, 
db
->
aDb
[
j
].
zName
) ) ;

111 
p
 = 
	`sqlôeHashFöd
(&
db
->
aDb
[
j
].
tblHash
, 
zName
, 
	`°æí
(zName)+1);

112 if–
p
 ) ;

114  
p
;

115 
	}
}

128 
TabÀ
 *
	$sqlôeLoˇãTabÀ
(
P¨£
 *
pP¨£
, c⁄° *
zName
, c⁄° *
zDba£
){

129 
TabÀ
 *
p
;

131 
p
 = 
	`sqlôeFödTabÀ
(
pP¨£
->
db
, 
zName
, 
zDba£
);

132 if–
p
==0 ){

133 if–
zDba£
 ){

134 
	`sqlôeEº‹Msg
(
pP¨£
, "nÿsuchÅabÀ: %s.%s", 
zDba£
, 
zName
);

135 }if–
	`sqlôeFödTabÀ
(
pP¨£
->
db
, 
zName
, 0)!=0 ){

136 
	`sqlôeEº‹Msg
(
pP¨£
, "table \"%s\" isÇot in database \"%s\"",

137 
zName
, 
zDba£
);

139 
	`sqlôeEº‹Msg
(
pP¨£
, "nÿsuchÅabÀ: %s", 
zName
);

142  
p
;

143 
	}
}

157 
Index
 *
	$sqlôeFödIndex
(
sqlôe
 *
db
, c⁄° *
zName
, c⁄° *
zDb
){

158 
Index
 *
p
 = 0;

159 
i
;

160 
i
=0; i<
db
->
nDb
; i++){

161 
j
 = (
i
<2) ? i^1 : i;

162 if–
zDb
 && 
	`sqlôeSåICmp
(zDb, 
db
->
aDb
[
j
].
zName
) ) ;

163 
p
 = 
	`sqlôeHashFöd
(&
db
->
aDb
[
j
].
idxHash
, 
zName
, 
	`°æí
(zName)+1);

164 if–
p
 ) ;

166  
p
;

167 
	}
}

177 
	$sqlôeDñëeIndex
(
sqlôe
 *
db
, 
Index
 *
p
){

178 
Index
 *
pOld
;

180 
	`as£π
–
db
!=0 && 
p
->
zName
!=0 );

181 
pOld
 = 
	`sqlôeHashIn£π
(&
db
->
aDb
[
p
->
iDb
].
idxHash
,Ö->
zName
,

182 
	`°æí
(
p
->
zName
)+1, 0);

183 if–
pOld
!=0 &&ÖOld!=
p
 ){

184 
	`sqlôeHashIn£π
(&
db
->
aDb
[
p
->
iDb
].
idxHash
, 
pOld
->
zName
,

185 
	`°æí
(
pOld
->
zName
)+1,ÖOld);

187 
	`sqlôeFªe
(
p
);

188 
	}
}

195 
	$sqlôeU∆ökAndDñëeIndex
(
sqlôe
 *
db
, 
Index
 *
pIndex
){

196 if–
pIndex
->
pTabÀ
->pIndex==pIndex ){

197 
pIndex
->
pTabÀ
->pIndex =ÖIndex->
pNext
;

199 
Index
 *
p
;

200 
p
=
pIndex
->
pTabÀ
->pIndex;Ö &&Ö->
pNext
!=pIndex;Ö=p->pNext){}

201 if–
p
 &&Ö->
pNext
==
pIndex
 ){

202 
p
->
pNext
 = 
pIndex
->pNext;

205 
	`sqlôeDñëeIndex
(
db
, 
pIndex
);

206 
	}
}

218 
	$sqlôeRe£tI¡î«lSchema
(
sqlôe
 *
db
, 
iDb
){

219 
HashEÀm
 *
pEÀm
;

220 
Hash
 
ãmp1
;

221 
Hash
 
ãmp2
;

222 
i
, 
j
;

224 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

225 
db
->
Êags
 &~
SQLITE_Inôülized
;

226 
i
=
iDb
; i<
db
->
nDb
; i++){

227 
Db
 *
pDb
 = &
db
->
aDb
[
i
];

228 
ãmp1
 = 
pDb
->
tblHash
;

229 
ãmp2
 = 
pDb
->
åigHash
;

230 
	`sqlôeHashInô
(&
pDb
->
åigHash
, 
SQLITE_HASH_STRING
, 0);

231 
	`sqlôeHashCÀ¨
(&
pDb
->
aFKey
);

232 
	`sqlôeHashCÀ¨
(&
pDb
->
idxHash
);

233 
pEÀm
=
	`sqlôeHashFú°
(&
ãmp2
);ÖEÀm;ÖEÀm=
	`sqlôeHashNext
(pElem)){

234 
Triggî
 *
pTriggî
 = 
	`sqlôeHashD©a
(
pEÀm
);

235 
	`sqlôeDñëeTriggî
(
pTriggî
);

237 
	`sqlôeHashCÀ¨
(&
ãmp2
);

238 
	`sqlôeHashInô
(&
pDb
->
tblHash
, 
SQLITE_HASH_STRING
, 0);

239 
pEÀm
=
	`sqlôeHashFú°
(&
ãmp1
);ÖEÀm;ÖEÀm=
	`sqlôeHashNext
(pElem)){

240 
TabÀ
 *
pTab
 = 
	`sqlôeHashD©a
(
pEÀm
);

241 
	`sqlôeDñëeTabÀ
(
db
, 
pTab
);

243 
	`sqlôeHashCÀ¨
(&
ãmp1
);

244 
	`DbCÀ¨Pr›îty
(
db
, 
i
, 
DB_SchemaLﬂded
);

245 if–
iDb
>0 ) ;

247 
	`as£π
–
iDb
==0 );

248 
db
->
Êags
 &~
SQLITE_I¡înCh™ges
;

256 
i
=0; i<
db
->
nDb
; i++){

257 
Db
 *
pDb
 = &
db
->
aDb
[
i
];

258 if–
pDb
->
pBt
==0 ){

259 if–
pDb
->
pAux
 &&ÖDb->
xFªeAux
 )ÖDb->
	`xFªeAux
(pDb->pAux);

260 
pDb
->
pAux
 = 0;

263 
i
=
j
=2; i<
db
->
nDb
; i++){

264 
Db
 *
pDb
 = &
db
->
aDb
[
i
];

265 if–
pDb
->
pBt
==0 ){

266 
	`sqlôeFªe
(
pDb
->
zName
);

267 
pDb
->
zName
 = 0;

270 if–
j
<
i
 ){

271 
db
->
aDb
[
j
] = db->aDb[
i
];

273 
j
++;

275 
	`mem£t
(&
db
->
aDb
[
j
], 0, (db->
nDb
-j)*(db->aDb[j]));

276 
db
->
nDb
 = 
j
;

277 if–
db
->
nDb
<=2 && db->
aDb
!=db->
aDbSètic
 ){

278 
	`mem˝y
(
db
->
aDbSètic
, db->
aDb
, 2*(db->aDb[0]));

279 
	`sqlôeFªe
(
db
->
aDb
);

280 
db
->
aDb
 = db->
aDbSètic
;

282 
	}
}

289 
	$sqlôeRﬁlbackI¡î«lCh™ges
(
sqlôe
 *
db
){

290 if–
db
->
Êags
 & 
SQLITE_I¡înCh™ges
 ){

291 
	`sqlôeRe£tI¡î«lSchema
(
db
, 0);

293 
	}
}

298 
	$sqlôeCommôI¡î«lCh™ges
(
sqlôe
 *
db
){

299 
db
->
aDb
[0].
schema_cookõ
 = db->
√xt_cookõ
;

300 
db
->
Êags
 &~
SQLITE_I¡înCh™ges
;

301 
	}
}

318 
	$sqlôeDñëeTabÀ
(
sqlôe
 *
db
, 
TabÀ
 *
pTabÀ
){

319 
i
;

320 
Index
 *
pIndex
, *
pNext
;

321 
FKey
 *
pFKey
, *
pNextFKey
;

323 if–
pTabÀ
==0 ) ;

327 
pIndex
 = 
pTabÀ
->pIndex;ÖIndex;ÖIndex=
pNext
){

328 
pNext
 = 
pIndex
->pNext;

329 
	`as£π
–
pIndex
->
iDb
==
pTabÀ
->iDb || (pTable->iDb==0 &&ÖIndex->iDb==1) );

330 
	`sqlôeDñëeIndex
(
db
, 
pIndex
);

336 
pFKey
=
pTabÀ
->pFKey;ÖFKey;ÖFKey=
pNextFKey
){

337 
pNextFKey
 = 
pFKey
->
pNextFrom
;

338 
	`as£π
–
pTabÀ
->
iDb
<
db
->
nDb
 );

339 
	`as£π
–
	`sqlôeHashFöd
(&
db
->
aDb
[
pTabÀ
->
iDb
].
aFKey
,

340 
pFKey
->
zTo
, 
	`°æí
(pFKey->zTo)+1)!=pFKey );

341 
	`sqlôeFªe
(
pFKey
);

346 
i
=0; i<
pTabÀ
->
nCﬁ
; i++){

347 
	`sqlôeFªe
(
pTabÀ
->
aCﬁ
[
i
].
zName
);

348 
	`sqlôeFªe
(
pTabÀ
->
aCﬁ
[
i
].
zDÊt
);

349 
	`sqlôeFªe
(
pTabÀ
->
aCﬁ
[
i
].
zTy≥
);

351 
	`sqlôeFªe
(
pTabÀ
->
zName
);

352 
	`sqlôeFªe
(
pTabÀ
->
aCﬁ
);

353 
	`sqlôeSñe˘Dñëe
(
pTabÀ
->
pSñe˘
);

354 
	`sqlôeFªe
(
pTabÀ
);

355 
	}
}

361 
	$sqlôeU∆ökAndDñëeTabÀ
(
sqlôe
 *
db
, 
TabÀ
 *
p
){

362 
TabÀ
 *
pOld
;

363 
FKey
 *
pF1
, *
pF2
;

364 
i
 = 
p
->
iDb
;

365 
	`as£π
–
db
!=0 );

366 
pOld
 = 
	`sqlôeHashIn£π
(&
db
->
aDb
[
i
].
tblHash
, 
p
->
zName
, 
	`°æí
(p->zName)+1, 0);

367 
	`as£π
–
pOld
==0 ||ÖOld==
p
 );

368 
pF1
=
p
->
pFKey
;ÖF1;ÖF1ıF1->
pNextFrom
){

369 
nTo
 = 
	`°æí
(
pF1
->
zTo
) + 1;

370 
pF2
 = 
	`sqlôeHashFöd
(&
db
->
aDb
[
i
].
aFKey
, 
pF1
->
zTo
, 
nTo
);

371 if–
pF2
==
pF1
 ){

372 
	`sqlôeHashIn£π
(&
db
->
aDb
[
i
].
aFKey
, 
pF1
->
zTo
, 
nTo
,ÖF1->
pNextTo
);

374  
pF2
 &&ÖF2->
pNextTo
!=
pF1
 ){ÖF2=pF2->pNextTo; }

375 if–
pF2
 ){

376 
pF2
->
pNextTo
 = 
pF1
->pNextTo;

380 
	`sqlôeDñëeTabÀ
(
db
, 
p
);

381 
	}
}

389 *
	$sqlôeTabÀNameFromTokí
(
Tokí
 *
pName
){

390 *
zName
 = 
	`sqlôeSåNDup
(
pName
->
z
,ÖName->
n
);

391 
	`sqlôeDequŸe
(
zName
);

392  
zName
;

393 
	}
}

401 
	$sqlôeO≥nMa°îTabÀ
(
Vdbe
 *
v
, 
isTemp
){

402 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
isTemp
, 0);

403 
	`sqlôeVdbeAddOp
(
v
, 
OP_O≥nWrôe
, 0, 2);

404 
	}
}

423 
	$sqlôeSèπTabÀ
(

424 
P¨£
 *
pP¨£
,

425 
Tokí
 *
pSèπ
,

426 
Tokí
 *
pName
,

427 
isTemp
,

428 
isVõw


430 
TabÀ
 *
pTabÀ
;

431 
Index
 *
pIdx
;

432 *
zName
;

433 
sqlôe
 *
db
 = 
pP¨£
->db;

434 
Vdbe
 *
v
;

435 
iDb
;

437 
pP¨£
->
sFú°Tokí
 = *
pSèπ
;

438 
zName
 = 
	`sqlôeTabÀNameFromTokí
(
pName
);

439 if–
zName
==0 ) ;

440 if–
db
->
öô
.
iDb
==1 ) 
isTemp
 = 1;

441 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


442 
	`as£π
–(
isTemp
 & 1)==isTemp );

444 
code
;

445 *
zDb
 = 
isTemp
 ? "temp" : "main";

451 if–
isVõw
 ){

452 if–
isTemp
 ){

453 
code
 = 
SQLITE_CREATE_TEMP_VIEW
;

455 
code
 = 
SQLITE_CREATE_VIEW
;

458 if–
isTemp
 ){

459 
code
 = 
SQLITE_CREATE_TEMP_TABLE
;

461 
code
 = 
SQLITE_CREATE_TABLE
;

476 if–
isTemp
 && 
db
->
aDb
[1].
pBt
==0 && !
pP¨£
->
ex∂aö
 ){

477 
rc
 = 
	`sqlôeBåìFa˘‹y
(
db
, 0, 0, 
MAX_PAGES
, &db->
aDb
[1].
pBt
);

478 if–
rc
!=
SQLITE_OK
 ){

479 
	`sqlôeEº‹Msg
(
pP¨£
, "unableÅo openáÅemporary database "

481 
pP¨£
->
nEº
++;

484 if–
db
->
Êags
 & 
SQLITE_InTøns
 ){

485 
rc
 = 
	`sqlôeBåìBegöTøns
(
db
->
aDb
[1].
pBt
);

486 if–
rc
!=
SQLITE_OK
 ){

487 
	`sqlôeEº‹Msg
(
pP¨£
, "unableÅo getá writeÜock on "

501 
pTabÀ
 = 
	`sqlôeFödTabÀ
(
db
, 
zName
, 0);

502 
iDb
 = 
isTemp
 ? 1 : 
db
->
öô
.iDb;

503 if–
pTabÀ
!=0 && (pTabÀ->
iDb
==iDb || !
db
->
öô
.
busy
) ){

504 
	`sqlôeEº‹Msg
(
pP¨£
, "èbÀ %TáÃódyÉxi°s", 
pName
);

505 
	`sqlôeFªe
(
zName
);

508 if–(
pIdx
 = 
	`sqlôeFödIndex
(
db
, 
zName
, 0))!=0 &&

509 (
pIdx
->
iDb
==0 || !
db
->
öô
.
busy
) ){

510 
	`sqlôeEº‹Msg
(
pP¨£
, "thîêi†Æªadyá¿ödexÇamed %s", 
zName
);

511 
	`sqlôeFªe
(
zName
);

514 
pTabÀ
 = 
	`sqlôeMÆloc
–(
TabÀ
) );

515 if–
pTabÀ
==0 ){

516 
	`sqlôeFªe
(
zName
);

519 
pTabÀ
->
zName
 = zName;

520 
pTabÀ
->
nCﬁ
 = 0;

521 
pTabÀ
->
aCﬁ
 = 0;

522 
pTabÀ
->
iPKey
 = -1;

523 
pTabÀ
->
pIndex
 = 0;

524 
pTabÀ
->
iDb
 = iDb;

525 if–
pP¨£
->
pNewTabÀ
 ) 
	`sqlôeDñëeTabÀ
(
db
,ÖParse->pNewTable);

526 
pP¨£
->
pNewTabÀ
 = 
pTabÀ
;

536 if–!
db
->
öô
.
busy
 && (
v
 = 
	`sqlôeGëVdbe
(
pP¨£
))!=0 ){

537 
	`sqlôeBegöWrôeO≥øti⁄
(
pP¨£
, 0, 
isTemp
);

538 if–!
isTemp
 ){

539 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
db
->
fûe_f‹m©
, 0);

540 
	`sqlôeVdbeAddOp
(
v
, 
OP_SëCookõ
, 0, 1);

542 
	`sqlôeO≥nMa°îTabÀ
(
v
, 
isTemp
);

543 
	`sqlôeVdbeAddOp
(
v
, 
OP_NewRe˙o
, 0, 0);

544 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 0, 0);

545 
	`sqlôeVdbeAddOp
(
v
, 
OP_Såög
, 0, 0);

546 
	`sqlôeVdbeAddOp
(
v
, 
OP_PutI¡Key
, 0, 0);

548 
	}
}

558 
	$sqlôeAddCﬁumn
(
P¨£
 *
pP¨£
, 
Tokí
 *
pName
){

559 
TabÀ
 *
p
;

560 
i
;

561 *
z
 = 0;

562 
Cﬁumn
 *
pCﬁ
;

563 if–(
p
 = 
pP¨£
->
pNewTabÀ
)==0 ) ;

564 
	`sqlôeSëNSåög
(&
z
, 
pName
->z,ÖName->
n
, 0);

565 if–
z
==0 ) ;

566 
	`sqlôeDequŸe
(
z
);

567 
i
=0; i<
p
->
nCﬁ
; i++){

568 if–
	`sqlôeSåICmp
(
z
, 
p
->
aCﬁ
[
i
].
zName
)==0 ){

569 
	`sqlôeEº‹Msg
(
pP¨£
, "du∂iˇã cﬁum¿«me: %s", 
z
);

570 
	`sqlôeFªe
(
z
);

574 if–(
p
->
nCﬁ
 & 0x7)==0 ){

575 
Cﬁumn
 *
aNew
;

576 
aNew
 = 
	`sqlôeRóŒoc
–
p
->
aCﬁ
, (p->
nCﬁ
+8)*(p->aCol[0]));

577 if–
aNew
==0 ) ;

578 
p
->
aCﬁ
 = 
aNew
;

580 
pCﬁ
 = &
p
->
aCﬁ
[p->
nCﬁ
];

581 
	`mem£t
(
pCﬁ
, 0, (
p
->
aCﬁ
[0]));

582 
pCﬁ
->
zName
 = 
z
;

583 
pCﬁ
->
s‹tOrdî
 = 
SQLITE_SO_NUM
;

584 
p
->
nCﬁ
++;

585 
	}
}

593 
	$sqlôeAddNŸNuŒ
(
P¨£
 *
pP¨£
, 
⁄Eº‹
){

594 
TabÀ
 *
p
;

595 
i
;

596 if–(
p
 = 
pP¨£
->
pNewTabÀ
)==0 ) ;

597 
i
 = 
p
->
nCﬁ
-1;

598 if–
i
>=0 ) 
p
->
aCﬁ
[i].
nŸNuŒ
 = 
⁄Eº‹
;

599 
	}
}

610 
	$sqlôeAddCﬁumnTy≥
(
P¨£
 *
pP¨£
, 
Tokí
 *
pFú°
, Tokí *
pLa°
){

611 
TabÀ
 *
p
;

612 
i
, 
j
;

613 
n
;

614 *
z
, **
pz
;

615 
Cﬁumn
 *
pCﬁ
;

616 if–(
p
 = 
pP¨£
->
pNewTabÀ
)==0 ) ;

617 
i
 = 
p
->
nCﬁ
-1;

618 if–
i
<0 ) ;

619 
pCﬁ
 = &
p
->
aCﬁ
[
i
];

620 
pz
 = &
pCﬁ
->
zTy≥
;

621 
n
 = 
pLa°
->¿+ 
	`Addr
’La°->
z
Ë- Addr(
pFú°
->z);

622 
	`sqlôeSëNSåög
(
pz
, 
pFú°
->
z
, 
n
, 0);

623 
z
 = *
pz
;

624 if–
z
==0 ) ;

625 
i
=
j
=0; 
z
[i]; i++){

626 
c
 = 
z
[
i
];

627 if–
	`is•a˚
(
c
) ) ;

628 
z
[
j
++] = 
c
;

630 
z
[
j
] = 0;

631 if–
pP¨£
->
db
->
fûe_f‹m©
>=4 ){

632 
pCﬁ
->
s‹tOrdî
 = 
	`sqlôeCﬁœãTy≥
(
z
, 
n
);

634 
pCﬁ
->
s‹tOrdî
 = 
SQLITE_SO_NUM
;

636 
	}
}

646 
	$sqlôeAddDeÁu…VÆue
(
P¨£
 *
pP¨£
, 
Tokí
 *
pVÆ
, 
möusFœg
){

647 
TabÀ
 *
p
;

648 
i
;

649 **
pz
;

650 if–(
p
 = 
pP¨£
->
pNewTabÀ
)==0 ) ;

651 
i
 = 
p
->
nCﬁ
-1;

652 if–
i
<0 ) ;

653 
pz
 = &
p
->
aCﬁ
[
i
].
zDÊt
;

654 if–
möusFœg
 ){

655 
	`sqlôeSëNSåög
(
pz
, "-", 1, 
pVÆ
->
z
,ÖVÆ->
n
, 0);

657 
	`sqlôeSëNSåög
(
pz
, 
pVÆ
->
z
,ÖVÆ->
n
, 0);

659 
	`sqlôeDequŸe
(*
pz
);

660 
	}
}

682 
	$sqlôeAddPrim¨yKey
(
P¨£
 *
pP¨£
, 
IdLi°
 *
pLi°
, 
⁄Eº‹
){

683 
TabÀ
 *
pTab
 = 
pP¨£
->
pNewTabÀ
;

684 *
zTy≥
 = 0;

685 
iCﬁ
 = -1, 
i
;

686 if–
pTab
==0 ) 
¥im¨y_key_exô
;

687 if–
pTab
->
hasPrimKey
 ){

688 
	`sqlôeEº‹Msg
(
pP¨£
,

689 "èbÀ \"%s\" ha†m‹êth™ o√Örim¨y key", 
pTab
->
zName
);

690 
¥im¨y_key_exô
;

692 
pTab
->
hasPrimKey
 = 1;

693 if–
pLi°
==0 ){

694 
iCﬁ
 = 
pTab
->
nCﬁ
 - 1;

695 
pTab
->
aCﬁ
[
iCﬁ
].
isPrimKey
 = 1;

697 
i
=0; i<
pLi°
->
nId
; i++){

698 
iCﬁ
=0; iCﬁ<
pTab
->
nCﬁ
; iCol++){

699 if–
	`sqlôeSåICmp
(
pLi°
->
a
[
i
].
zName
, 
pTab
->
aCﬁ
[
iCﬁ
].zName)==0 ) ;

701 if–
iCﬁ
<
pTab
->
nCﬁ
 )ÖTab->
aCﬁ
[iCﬁ].
isPrimKey
 = 1;

703 if–
pLi°
->
nId
>1 ) 
iCﬁ
 = -1;

705 if–
iCﬁ
>=0 && iCﬁ<
pTab
->
nCﬁ
 ){

706 
zTy≥
 = 
pTab
->
aCﬁ
[
iCﬁ
].zType;

708 if–
pP¨£
->
db
->
fûe_f‹m©
>=1 &&

709 
zTy≥
 && 
	`sqlôeSåICmp
(zType, "INTEGER")==0 ){

710 
pTab
->
iPKey
 = 
iCﬁ
;

711 
pTab
->
keyC⁄f
 = 
⁄Eº‹
;

713 
	`sqlôeCª©eIndex
(
pP¨£
, 0, 0, 
pLi°
, 
⁄Eº‹
, 0, 0);

714 
pLi°
 = 0;

717 
¥im¨y_key_exô
:

718 
	`sqlôeIdLi°Dñëe
(
pLi°
);

720 
	}
}

730 
	$sqlôeCﬁœãTy≥
(c⁄° *
zTy≥
, 
nTy≥
){

731 
i
;

732 
i
=0; i<
nTy≥
-3; i++){

733 
c
 = *(
zTy≥
++) | 0x60;

734 if–(
c
=='b' || c=='c'Ë&& 
	`sqlôeSåNICmp
(
zTy≥
, "lob", 3)==0 ){

735  
SQLITE_SO_TEXT
;

737 if–
c
=='c' && 
	`sqlôeSåNICmp
(
zTy≥
, "har", 3)==0 ){

738  
SQLITE_SO_TEXT
;

740 if–
c
=='t' && 
	`sqlôeSåNICmp
(
zTy≥
, "ext", 3)==0 ){

741  
SQLITE_SO_TEXT
;

744  
SQLITE_SO_NUM
;

745 
	}
}

753 
	$sqlôeAddCﬁœãTy≥
(
P¨£
 *
pP¨£
, 
cﬁlTy≥
){

754 
TabÀ
 *
p
;

755 
i
;

756 if–(
p
 = 
pP¨£
->
pNewTabÀ
)==0 ) ;

757 
i
 = 
p
->
nCﬁ
-1;

758 if–
i
>=0 ) 
p
->
aCﬁ
[i].
s‹tOrdî
 = 
cﬁlTy≥
;

759 
	}
}

778 
	$sqlôeCh™geCookõ
(
sqlôe
 *
db
, 
Vdbe
 *
v
){

779 if–
db
->
√xt_cookõ
==db->
aDb
[0].
schema_cookõ
 ){

780 
r
;

781 
	`sqlôeR™dom√ss
(1, &
r
);

782 
db
->
√xt_cookõ
 = db->
aDb
[0].
schema_cookõ
 + 
r
 + 1;

783 
db
->
Êags
 |
SQLITE_I¡înCh™ges
;

784 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
db
->
√xt_cookõ
, 0);

785 
	`sqlôeVdbeAddOp
(
v
, 
OP_SëCookõ
, 0, 0);

787 
	}
}

794 
	$idítLígth
(c⁄° *
z
){

795 
n
;

796 
√edQuŸe
 = 0;

797 
n
=0; *
z
;Ç++, z++){

798 if–*
z
=='\'' ){ 
n
++; 
√edQuŸe
=1; }

800  
n
 + 
√edQuŸe
*2;

801 
	}
}

807 
	$idítPut
(*
z
, *
pIdx
, *
zIdít
){

808 
i
, 
j
, 
√edQuŸe
;

809 
i
 = *
pIdx
;

810 
j
=0; 
zIdít
[j]; j++){

811 if–!
	`iß um
(
zIdít
[
j
]) && zIdent[j]!='_' ) ;

813 
√edQuŸe
 = 
zIdít
[
j
]!=0 || 
	`isdigô
(zIdent[0])

814 || 
	`sqlôeKeyw‹dCode
(
zIdít
, 
j
)!=
TK_ID
;

815 if–
√edQuŸe
 ) 
z
[
i
++] = '\'';

816 
j
=0; 
zIdít
[j]; j++){

817 
z
[
i
++] = 
zIdít
[
j
];

818 if–
zIdít
[
j
]=='\'' ) 
z
[
i
++] = '\'';

820 if–
√edQuŸe
 ) 
z
[
i
++] = '\'';

821 
z
[
i
] = 0;

822 *
pIdx
 = 
i
;

823 
	}
}

830 *
	$¸óãTabÀStmt
(
TabÀ
 *
p
){

831 
i
, 
k
, 
n
;

832 *
zStmt
;

833 *
zSï
, *
zSï2
, *
zEnd
;

834 
n
 = 0;

835 
i
=0; i<
p
->
nCﬁ
; i++){

836 
n
 +
	`idítLígth
(
p
->
aCﬁ
[
i
].
zName
);

838 
n
 +
	`idítLígth
(
p
->
zName
);

839 if–
n
<40 ){

840 
zSï
 = "";

841 
zSï2
 = ",";

842 
zEnd
 = ")";

844 
zSï
 = "\n ";

845 
zSï2
 = ",\n ";

846 
zEnd
 = "\n)";

848 
n
 +35 + 6*
p
->
nCﬁ
;

849 
zStmt
 = 
	`sqlôeMÆlocRaw
–
n
 );

850 if–
zStmt
==0 )  0;

851 
	`°r˝y
(
zStmt
, 
p
->
iDb
==1 ? "CREATE TEMP TABLE " : "CREATE TABLE ");

852 
k
 = 
	`°æí
(
zStmt
);

853 
	`idítPut
(
zStmt
, &
k
, 
p
->
zName
);

854 
zStmt
[
k
++] = '(';

855 
i
=0; i<
p
->
nCﬁ
; i++){

856 
	`°r˝y
(&
zStmt
[
k
], 
zSï
);

857 
k
 +
	`°æí
(&
zStmt
[k]);

858 
zSï
 = 
zSï2
;

859 
	`idítPut
(
zStmt
, &
k
, 
p
->
aCﬁ
[
i
].
zName
);

861 
	`°r˝y
(&
zStmt
[
k
], 
zEnd
);

862  
zStmt
;

863 
	}
}

885 
	$sqlôeEndTabÀ
(
P¨£
 *
pP¨£
, 
Tokí
 *
pEnd
, 
Sñe˘
 *
pSñe˘
){

886 
TabÀ
 *
p
;

887 
sqlôe
 *
db
 = 
pP¨£
->db;

889 if–(
pEnd
==0 && 
pSñe˘
==0Ë|| 
pP¨£
->
nEº
 || 
sqlôe_mÆloc_Áûed
 ) ;

890 
p
 = 
pP¨£
->
pNewTabÀ
;

891 if–
p
==0 ) ;

896 if–
pSñe˘
 ){

897 
TabÀ
 *
pSñTab
 = 
	`sqlôeResu…SëOfSñe˘
(
pP¨£
, 0, 
pSñe˘
);

898 if–
pSñTab
==0 ) ;

899 
	`as£π
–
p
->
aCﬁ
==0 );

900 
p
->
nCﬁ
 = 
pSñTab
->nCol;

901 
p
->
aCﬁ
 = 
pSñTab
->aCol;

902 
pSñTab
->
nCﬁ
 = 0;

903 
pSñTab
->
aCﬁ
 = 0;

904 
	`sqlôeDñëeTabÀ
(0, 
pSñTab
);

913 if–
db
->
öô
.
busy
 ){

914 
p
->
äum
 = 
db
->
öô
.
√wTnum
;

924 if–!
db
->
öô
.
busy
 ){

925 
n
;

926 
Vdbe
 *
v
;

928 
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

929 if–
v
==0 ) ;

930 if–
p
->
pSñe˘
==0 ){

932 
	`sqlôeVdbeOp3
(
v
, 
OP_Cª©eTabÀ
, 0, 
p
->
iDb
, (*)&p->
äum
, 
P3_POINTER
);

935 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 0, 0);

937 
p
->
äum
 = 0;

938 
	`sqlôeVdbeAddOp
(
v
, 
OP_PuŒ
, 1, 0);

939 
	`sqlôeVdbeOp3
(
v
, 
OP_Såög
, 0, 0, 
p
->
pSñe˘
==0?"èbÀ":"võw", 
P3_STATIC
);

940 
	`sqlôeVdbeOp3
(
v
, 
OP_Såög
, 0, 0, 
p
->
zName
, 0);

941 
	`sqlôeVdbeOp3
(
v
, 
OP_Såög
, 0, 0, 
p
->
zName
, 0);

942 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 4, 0);

943 
	`sqlôeVdbeAddOp
(
v
, 
OP_Såög
, 0, 0);

944 if–
pSñe˘
 ){

945 *
z
 = 
	`¸óãTabÀStmt
(
p
);

946 
n
 = 
z
 ? 
	`°æí
(z) : 0;

947 
	`sqlôeVdbeCh™geP3
(
v
, -1, 
z
, 
n
);

948 
	`sqlôeFªe
(
z
);

950 
	`as£π
–
pEnd
!=0 );

951 
n
 = 
	`Addr
(
pEnd
->
z
Ë- Addr(
pP¨£
->
sFú°Tokí
.z) + 1;

952 
	`sqlôeVdbeCh™geP3
(
v
, -1, 
pP¨£
->
sFú°Tokí
.
z
, 
n
);

954 
	`sqlôeVdbeAddOp
(
v
, 
OP_MakeRec‹d
, 5, 0);

955 
	`sqlôeVdbeAddOp
(
v
, 
OP_PutI¡Key
, 0, 0);

956 if–!
p
->
iDb
 ){

957 
	`sqlôeCh™geCookõ
(
db
, 
v
);

959 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 0, 0);

960 if–
pSñe˘
 ){

961 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
p
->
iDb
, 0);

962 
	`sqlôeVdbeAddOp
(
v
, 
OP_O≥nWrôe
, 1, 0);

963 
pP¨£
->
nTab
 = 2;

964 
	`sqlôeSñe˘
(
pP¨£
, 
pSñe˘
, 
SRT_TabÀ
, 1, 0, 0, 0);

966 
	`sqlôeEndWrôeO≥øti⁄
(
pP¨£
);

971 if–
pP¨£
->
ex∂aö
==0 &&ÖP¨£->
nEº
==0 ){

972 
TabÀ
 *
pOld
;

973 
FKey
 *
pFKey
;

974 
pOld
 = 
	`sqlôeHashIn£π
(&
db
->
aDb
[
p
->
iDb
].
tblHash
,

975 
p
->
zName
, 
	`°æí
(p->zName)+1,Ö);

976 if–
pOld
 ){

977 
	`as£π
–
p
==
pOld
 );

980 
pFKey
=
p
->pFKey;ÖFKey;ÖFKeyıFKey->
pNextFrom
){

981 
nTo
 = 
	`°æí
(
pFKey
->
zTo
) + 1;

982 
pFKey
->
pNextTo
 = 
	`sqlôeHashFöd
(&
db
->
aDb
[
p
->
iDb
].
aFKey
,ÖFKey->
zTo
, 
nTo
);

983 
	`sqlôeHashIn£π
(&
db
->
aDb
[
p
->
iDb
].
aFKey
, 
pFKey
->
zTo
, 
nTo
,ÖFKey);

985 
pP¨£
->
pNewTabÀ
 = 0;

986 
db
->
nTabÀ
++;

987 
db
->
Êags
 |
SQLITE_I¡înCh™ges
;

989 
	}
}

994 
	$sqlôeCª©eVõw
(

995 
P¨£
 *
pP¨£
,

996 
Tokí
 *
pBegö
,

997 
Tokí
 *
pName
,

998 
Sñe˘
 *
pSñe˘
,

999 
isTemp


1001 
TabÀ
 *
p
;

1002 
n
;

1003 c⁄° *
z
;

1004 
Tokí
 
sEnd
;

1005 
DbFixî
 
sFix
;

1007 
	`sqlôeSèπTabÀ
(
pP¨£
, 
pBegö
, 
pName
, 
isTemp
, 1);

1008 
p
 = 
pP¨£
->
pNewTabÀ
;

1009 if–
p
==0 || 
pP¨£
->
nEº
 ){

1010 
	`sqlôeSñe˘Dñëe
(
pSñe˘
);

1025 
p
->
pSñe˘
 = 
	`sqlôeSñe˘Dup
(pSelect);

1026 
	`sqlôeSñe˘Dñëe
(
pSñe˘
);

1027 if–!
pP¨£
->
db
->
öô
.
busy
 ){

1028 
	`sqlôeVõwGëCﬁumnNames
(
pP¨£
, 
p
);

1034 
sEnd
 = 
pP¨£
->
sLa°Tokí
;

1035 if–
sEnd
.
z
[0]!=0 && sEnd.z[0]!=';' ){

1036 
sEnd
.
z
 +sEnd.
n
;

1038 
sEnd
.
n
 = 0;

1039 
n
 = 
sEnd
.
z
 - 
pBegö
->z;

1040 
z
 = 
pBegö
->z;

1041  
n
>0 && (
z
[n-1]==';' || 
	`is•a˚
(z[n-1])) ){Ç--; }

1042 
sEnd
.
z
 = &z[
n
-1];

1043 
sEnd
.
n
 = 1;

1046 
	`sqlôeEndTabÀ
(
pP¨£
, &
sEnd
, 0);

1048 
	}
}

1055 
	$sqlôeVõwGëCﬁumnNames
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTabÀ
){

1056 
Ex¥Li°
 *
pELi°
;

1057 
Sñe˘
 *
pSñ
;

1058 
TabÀ
 *
pSñTab
;

1059 
nEº
 = 0;

1061 
	`as£π
–
pTabÀ
 );

1066 if–
pTabÀ
->
nCﬁ
>0 )  0;

1078 if–
pTabÀ
->
nCﬁ
<0 ){

1079 
	`sqlôeEº‹Msg
(
pP¨£
, "võw %†i†cúcuœæy deföed", 
pTabÀ
->
zName
);

1085 
	`as£π
–
pTabÀ
->
pSñe˘
 );

1086 
pSñ
 = 
pTabÀ
->
pSñe˘
;

1093 
pELi°
 = 
pSñ
->pEList;

1094 
pSñ
->
pELi°
 = 
	`sqlôeEx¥Li°Dup
(pEList);

1095 if–
pSñ
->
pELi°
==0 ){

1096 
pSñ
->
pELi°
 =ÖEList;

1099 
pTabÀ
->
nCﬁ
 = -1;

1100 
pSñTab
 = 
	`sqlôeResu…SëOfSñe˘
(
pP¨£
, 0, 
pSñ
);

1101 if–
pSñTab
 ){

1102 
	`as£π
–
pTabÀ
->
aCﬁ
==0 );

1103 
pTabÀ
->
nCﬁ
 = 
pSñTab
->nCol;

1104 
pTabÀ
->
aCﬁ
 = 
pSñTab
->aCol;

1105 
pSñTab
->
nCﬁ
 = 0;

1106 
pSñTab
->
aCﬁ
 = 0;

1107 
	`sqlôeDñëeTabÀ
(0, 
pSñTab
);

1108 
	`DbSëPr›îty
(
pP¨£
->
db
, 
pTabÀ
->
iDb
, 
DB_Uƒe£tVõws
);

1110 
pTabÀ
->
nCﬁ
 = 0;

1111 
nEº
++;

1113 
	`sqlôeSñe˘Unböd
(
pSñ
);

1114 
	`sqlôeEx¥Li°Dñëe
(
pSñ
->
pELi°
);

1115 
pSñ
->
pELi°
 =ÖEList;

1116  
nEº
;

1117 
	}
}

1127 
	$sqlôeVõwRe£tCﬁumnNames
(
TabÀ
 *
pTabÀ
){

1128 
i
;

1129 
Cﬁumn
 *
pCﬁ
;

1130 
	`as£π
–
pTabÀ
!=0 &&ÖTabÀ->
pSñe˘
!=0 );

1131 
i
=0, 
pCﬁ
=
pTabÀ
->
aCﬁ
; i<pTabÀ->
nCﬁ
; i++,ÖCol++){

1132 
	`sqlôeFªe
(
pCﬁ
->
zName
);

1133 
	`sqlôeFªe
(
pCﬁ
->
zDÊt
);

1134 
	`sqlôeFªe
(
pCﬁ
->
zTy≥
);

1136 
	`sqlôeFªe
(
pTabÀ
->
aCﬁ
);

1137 
pTabÀ
->
aCﬁ
 = 0;

1138 
pTabÀ
->
nCﬁ
 = 0;

1139 
	}
}

1144 
	$sqlôeVõwRe£tAŒ
(
sqlôe
 *
db
, 
idx
){

1145 
HashEÀm
 *
i
;

1146 if–!
	`DbHasPr›îty
(
db
, 
idx
, 
DB_Uƒe£tVõws
) ) ;

1147 
i
=
	`sqlôeHashFú°
(&
db
->
aDb
[
idx
].
tblHash
); i; i=
	`sqlôeHashNext
(i)){

1148 
TabÀ
 *
pTab
 = 
	`sqlôeHashD©a
(
i
);

1149 if–
pTab
->
pSñe˘
 ){

1150 
	`sqlôeVõwRe£tCﬁumnNames
(
pTab
);

1153 
	`DbCÀ¨Pr›îty
(
db
, 
idx
, 
DB_Uƒe£tVõws
);

1154 
	}
}

1160 
TabÀ
 *
	$sqlôeTabÀFromTokí
(
P¨£
 *
pP¨£
, 
Tokí
 *
pTok
){

1161 *
zName
;

1162 
TabÀ
 *
pTab
;

1163 
zName
 = 
	`sqlôeTabÀNameFromTokí
(
pTok
);

1164 if–
zName
==0 )  0;

1165 
pTab
 = 
	`sqlôeFödTabÀ
(
pP¨£
->
db
, 
zName
, 0);

1166 
	`sqlôeFªe
(
zName
);

1167 if–
pTab
==0 ){

1168 
	`sqlôeEº‹Msg
(
pP¨£
, "nÿsuchÅabÀ: %T", 
pTok
);

1170  
pTab
;

1171 
	}
}

1177 
	$sqlôeDr›TabÀ
(
P¨£
 *
pP¨£
, 
Tokí
 *
pName
, 
isVõw
){

1178 
TabÀ
 *
pTabÀ
;

1179 
Vdbe
 *
v
;

1180 
ba£
;

1181 
sqlôe
 *
db
 = 
pP¨£
->db;

1182 
iDb
;

1184 if–
pP¨£
->
nEº
 || 
sqlôe_mÆloc_Áûed
 ) ;

1185 
pTabÀ
 = 
	`sqlôeTabÀFromTokí
(
pP¨£
, 
pName
);

1186 if–
pTabÀ
==0 ) ;

1187 
iDb
 = 
pTabÀ
->iDb;

1188 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

1189 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


1191 
code
;

1192 c⁄° *
zTab
 = 
	`SCHEMA_TABLE
(
pTabÀ
->
iDb
);

1193 c⁄° *
zDb
 = 
db
->
aDb
[
pTabÀ
->
iDb
].
zName
;

1198 if–
isVõw
 ){

1199 if–
iDb
==1 ){

1200 
code
 = 
SQLITE_DROP_TEMP_VIEW
;

1202 
code
 = 
SQLITE_DROP_VIEW
;

1205 if–
iDb
==1 ){

1206 
code
 = 
SQLITE_DROP_TEMP_TABLE
;

1208 
code
 = 
SQLITE_DROP_TABLE
;

1222 if–
pTabÀ
->
ªadO∆y
 ){

1223 
	`sqlôeEº‹Msg
(
pP¨£
, "èbÀ %†mayÇŸ bêdr›≥d", 
pTabÀ
->
zName
);

1224 
pP¨£
->
nEº
++;

1227 if–
isVõw
 && 
pTabÀ
->
pSñe˘
==0 ){

1228 
	`sqlôeEº‹Msg
(
pP¨£
, "u£ DROP TABLEÅÿdñëêèbÀ %s", 
pTabÀ
->
zName
);

1231 if–!
isVõw
 && 
pTabÀ
->
pSñe˘
 ){

1232 
	`sqlôeEº‹Msg
(
pP¨£
, "u£ DROP VIEWÅÿdñëêvõw %s", 
pTabÀ
->
zName
);

1239 
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

1240 if–
v
 ){

1241 
VdbeOpLi°
 
dr›TabÀ
[] = {

1242 { 
OP_Rewöd
, 0, 
	`ADDR
(8), 0},

1243 { 
OP_Såög
, 0, 0, 0},

1244 { 
OP_MemSt‹e
, 1, 1, 0},

1245 { 
OP_MemLﬂd
, 1, 0, 0},

1246 { 
OP_Cﬁumn
, 0, 2, 0},

1247 { 
OP_Ne
, 0, 
	`ADDR
(7), 0},

1248 { 
OP_Dñëe
, 0, 0, 0},

1249 { 
OP_Next
, 0, 
	`ADDR
(3), 0},

1251 
Index
 *
pIdx
;

1252 
Triggî
 *
pTriggî
;

1253 
	`sqlôeBegöWrôeO≥øti⁄
(
pP¨£
, 0, 
pTabÀ
->
iDb
);

1256 
pTriggî
 = 
pTabÀ
->pTrigger;

1257  
pTriggî
 ){

1258 
	`as£π
–
pTriggî
->
iDb
==
pTabÀ
->iDb ||ÖTrigger->iDb==1 );

1259 
	`sqlôeDr›TriggîPå
(
pP¨£
, 
pTriggî
, 1);

1260 if–
pP¨£
->
ex∂aö
 ){

1261 
pTriggî
 =ÖTriggî->
pNext
;

1263 
pTriggî
 = 
pTabÀ
->pTrigger;

1268 
	`sqlôeO≥nMa°îTabÀ
(
v
, 
pTabÀ
->
iDb
);

1269 
ba£
 = 
	`sqlôeVdbeAddOpLi°
(
v
, 
	`AºaySize
(
dr›TabÀ
), dropTable);

1270 
	`sqlôeVdbeCh™geP3
(
v
, 
ba£
+1, 
pTabÀ
->
zName
, 0);

1273 if–
pTabÀ
->
iDb
!=1 ){

1274 
	`sqlôeO≥nMa°îTabÀ
(
v
, 1);

1275 
ba£
 = 
	`sqlôeVdbeAddOpLi°
(
v
, 
	`AºaySize
(
dr›TabÀ
), dropTable);

1276 
	`sqlôeVdbeCh™geP3
(
v
, 
ba£
+1, 
pTabÀ
->
zName
, 0);

1279 if–
pTabÀ
->
iDb
==0 ){

1280 
	`sqlôeCh™geCookõ
(
db
, 
v
);

1282 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 0, 0);

1283 if–!
isVõw
 ){

1284 
	`sqlôeVdbeAddOp
(
v
, 
OP_De°roy
, 
pTabÀ
->
äum
,ÖTabÀ->
iDb
);

1285 
pIdx
=
pTabÀ
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

1286 
	`sqlôeVdbeAddOp
(
v
, 
OP_De°roy
, 
pIdx
->
äum
,ÖIdx->
iDb
);

1289 
	`sqlôeEndWrôeO≥øti⁄
(
pP¨£
);

1297 if–!
pP¨£
->
ex∂aö
 ){

1298 
	`sqlôeU∆ökAndDñëeTabÀ
(
db
, 
pTabÀ
);

1299 
db
->
Êags
 |
SQLITE_I¡înCh™ges
;

1301 
	`sqlôeVõwRe£tAŒ
(
db
, 
iDb
);

1302 
	}
}

1314 
	$sqlôeAddIdxKeyTy≥
(
Vdbe
 *
v
, 
Index
 *
pIdx
){

1315 *
zTy≥
;

1316 
TabÀ
 *
pTab
;

1317 
i
, 
n
;

1318 
	`as£π
–
pIdx
!=0 &&ÖIdx->
pTabÀ
!=0 );

1319 
pTab
 = 
pIdx
->
pTabÀ
;

1320 
n
 = 
pIdx
->
nCﬁumn
;

1321 
zTy≥
 = 
	`sqlôeMÆlocRaw
–
n
+1 );

1322 if–
zTy≥
==0 ) ;

1323 
i
=0; i<
n
; i++){

1324 
iCﬁ
 = 
pIdx
->
aiCﬁumn
[
i
];

1325 
	`as£π
–
iCﬁ
>=0 && iCﬁ<
pTab
->
nCﬁ
 );

1326 if–(
pTab
->
aCﬁ
[
iCﬁ
].
s‹tOrdî
 & 
SQLITE_SO_TYPEMASK
)==
SQLITE_SO_TEXT
 ){

1327 
zTy≥
[
i
] = 't';

1329 
zTy≥
[
i
] = 'n';

1332 
zTy≥
[
n
] = 0;

1333 
	`sqlôeVdbeCh™geP3
(
v
, -1, 
zTy≥
, 
n
);

1334 
	`sqlôeFªe
(
zTy≥
);

1335 
	}
}

1355 
	$sqlôeCª©eF‹eignKey
(

1356 
P¨£
 *
pP¨£
,

1357 
IdLi°
 *
pFromCﬁ
,

1358 
Tokí
 *
pTo
,

1359 
IdLi°
 *
pToCﬁ
,

1360 
Êags


1362 
TabÀ
 *
p
 = 
pP¨£
->
pNewTabÀ
;

1363 
nByã
;

1364 
i
;

1365 
nCﬁ
;

1366 *
z
;

1367 
FKey
 *
pFKey
 = 0;

1369 
	`as£π
–
pTo
!=0 );

1370 if–
p
==0 || 
pP¨£
->
nEº
 ) 
fk_íd
;

1371 if–
pFromCﬁ
==0 ){

1372 
iCﬁ
 = 
p
->
nCﬁ
-1;

1373 if–
iCﬁ
<0 ) 
fk_íd
;

1374 if–
pToCﬁ
 &&ÖToCﬁ->
nId
!=1 ){

1375 
	`sqlôeEº‹Msg
(
pP¨£
, "foreign key on %s"

1377 
p
->
aCﬁ
[
iCﬁ
].
zName
, 
pTo
);

1378 
fk_íd
;

1380 
nCﬁ
 = 1;

1381 }if–
pToCﬁ
 &&ÖToCﬁ->
nId
!=
pFromCﬁ
->nId ){

1382 
	`sqlôeEº‹Msg
(
pP¨£
,

1385 
fk_íd
;

1387 
nCﬁ
 = 
pFromCﬁ
->
nId
;

1389 
nByã
 = (*
pFKey
Ë+ 
nCﬁ
*’FKey->
aCﬁ
[0]Ë+ 
pTo
->
n
 + 1;

1390 if–
pToCﬁ
 ){

1391 
i
=0; i<
pToCﬁ
->
nId
; i++){

1392 
nByã
 +
	`°æí
(
pToCﬁ
->
a
[
i
].
zName
) + 1;

1395 
pFKey
 = 
	`sqlôeMÆloc
–
nByã
 );

1396 if–
pFKey
==0 ) 
fk_íd
;

1397 
pFKey
->
pFrom
 = 
p
;

1398 
pFKey
->
pNextFrom
 = 
p
->pFKey;

1399 
z
 = (*)&
pFKey
[1];

1400 
pFKey
->
aCﬁ
 = (
sCﬁM≠
*)
z
;

1401 
z
 +(
sCﬁM≠
)*
nCﬁ
;

1402 
pFKey
->
zTo
 = 
z
;

1403 
	`mem˝y
(
z
, 
pTo
->z,ÖTo->
n
);

1404 
z
[
pTo
->
n
] = 0;

1405 
z
 +
pTo
->
n
+1;

1406 
pFKey
->
pNextTo
 = 0;

1407 
pFKey
->
nCﬁ
 =ÇCol;

1408 if–
pFromCﬁ
==0 ){

1409 
pFKey
->
aCﬁ
[0].
iFrom
 = 
p
->
nCﬁ
-1;

1411 
i
=0; i<
nCﬁ
; i++){

1412 
j
;

1413 
j
=0; j<
p
->
nCﬁ
; j++){

1414 if–
	`sqlôeSåICmp
(
p
->
aCﬁ
[
j
].
zName
, 
pFromCﬁ
->
a
[
i
].zName)==0 ){

1415 
pFKey
->
aCﬁ
[
i
].
iFrom
 = 
j
;

1419 if–
j
>=
p
->
nCﬁ
 ){

1420 
	`sqlôeEº‹Msg
(
pP¨£
,

1422 
pFromCﬁ
->
a
[
i
].
zName
);

1423 
fk_íd
;

1427 if–
pToCﬁ
 ){

1428 
i
=0; i<
nCﬁ
; i++){

1429 
n
 = 
	`°æí
(
pToCﬁ
->
a
[
i
].
zName
);

1430 
pFKey
->
aCﬁ
[
i
].
zCﬁ
 = 
z
;

1431 
	`mem˝y
(
z
, 
pToCﬁ
->
a
[
i
].
zName
, 
n
);

1432 
z
[
n
] = 0;

1433 
z
 +
n
+1;

1436 
pFKey
->
isDe„ºed
 = 0;

1437 
pFKey
->
dñëeC⁄f
 = 
Êags
 & 0xff;

1438 
pFKey
->
upd©eC⁄f
 = (
Êags
 >> 8 ) & 0xff;

1439 
pFKey
->
ö£πC⁄f
 = (
Êags
 >> 16 ) & 0xff;

1443 
p
->
pFKey
 =ÖFKey;

1444 
pFKey
 = 0;

1446 
fk_íd
:

1447 
	`sqlôeFªe
(
pFKey
);

1448 
	`sqlôeIdLi°Dñëe
(
pFromCﬁ
);

1449 
	`sqlôeIdLi°Dñëe
(
pToCﬁ
);

1450 
	}
}

1459 
	$sqlôeDe„rF‹eignKey
(
P¨£
 *
pP¨£
, 
isDe„ºed
){

1460 
TabÀ
 *
pTab
;

1461 
FKey
 *
pFKey
;

1462 if–(
pTab
 = 
pP¨£
->
pNewTabÀ
)==0 || (
pFKey
 =ÖTab->pFKey)==0 ) ;

1463 
pFKey
->
isDe„ºed
 = isDeferred;

1464 
	}
}

1478 
	$sqlôeCª©eIndex
(

1479 
P¨£
 *
pP¨£
,

1480 
Tokí
 *
pName
,

1481 
SrcLi°
 *
pTabÀ
,

1482 
IdLi°
 *
pLi°
,

1483 
⁄Eº‹
,

1484 
Tokí
 *
pSèπ
,

1485 
Tokí
 *
pEnd


1487 
TabÀ
 *
pTab
;

1488 
Index
 *
pIndex
;

1489 *
zName
 = 0;

1490 
i
, 
j
;

1491 
Tokí
 
nuŒId
;

1492 
DbFixî
 
sFix
;

1493 
isTemp
;

1494 
sqlôe
 *
db
 = 
pP¨£
->db;

1496 if–
pP¨£
->
nEº
 || 
sqlôe_mÆloc_Áûed
 ) 
exô_¸óã_ödex
;

1497 if–
db
->
öô
.
busy


1501 
exô_¸óã_ödex
;

1507 if–
pTabÀ
!=0 ){

1508 
	`as£π
–
pName
!=0 );

1509 
	`as£π
–
pTabÀ
->
nSrc
==1 );

1510 
pTab
 = 
	`sqlôeSrcLi°Lookup
(
pP¨£
, 
pTabÀ
);

1512 
	`as£π
–
pName
==0 );

1513 
pTab
 = 
pP¨£
->
pNewTabÀ
;

1515 if–
pTab
==0 || 
pP¨£
->
nEº
 ) 
exô_¸óã_ödex
;

1516 if–
pTab
->
ªadO∆y
 ){

1517 
	`sqlôeEº‹Msg
(
pP¨£
, "èbÀ %†mayÇŸ bêödexed", 
pTab
->
zName
);

1518 
exô_¸óã_ödex
;

1520 if–
pTab
->
iDb
>=2 && 
db
->
öô
.
busy
==0 ){

1521 
	`sqlôeEº‹Msg
(
pP¨£
, "èbÀ %†mayÇŸ havêödi˚†added", 
pTab
->
zName
);

1522 
exô_¸óã_ödex
;

1524 if–
pTab
->
pSñe˘
 ){

1525 
	`sqlôeEº‹Msg
(
pP¨£
, "views mayÇot be indexed");

1526 
exô_¸óã_ödex
;

1528 
isTemp
 = 
pTab
->
iDb
==1;

1543 if–
pName
 && !
db
->
öô
.
busy
 ){

1544 
Index
 *
pISameName
;

1545 
TabÀ
 *
pTSameName
;

1546 
zName
 = 
	`sqlôeTabÀNameFromTokí
(
pName
);

1547 if–
zName
==0 ) 
exô_¸óã_ödex
;

1548 if–(
pISameName
 = 
	`sqlôeFödIndex
(
db
, 
zName
, 0))!=0 ){

1549 
	`sqlôeEº‹Msg
(
pP¨£
, "ödex %†ÆªadyÉxi°s", 
zName
);

1550 
exô_¸óã_ödex
;

1552 if–(
pTSameName
 = 
	`sqlôeFödTabÀ
(
db
, 
zName
, 0))!=0 ){

1553 
	`sqlôeEº‹Msg
(
pP¨£
, "thîêi†ÆªadyáÅabÀÇamed %s", 
zName
);

1554 
exô_¸óã_ödex
;

1556 }if–
pName
==0 ){

1557 
zBuf
[30];

1558 
n
;

1559 
Index
 *
pLo›
;

1560 
pLo›
=
pTab
->
pIndex
, 
n
=1;ÖLo›;ÖLo›ıLo›->
pNext
,Ç++){}

1561 
	`•rötf
(
zBuf
,"%d)",
n
);

1562 
zName
 = 0;

1563 
	`sqlôeSëSåög
(&
zName
, "(", 
pTab
->zName, "áutoödex ", 
zBuf
, (*)0);

1564 if–
zName
==0 ) 
exô_¸óã_ödex
;

1566 
zName
 = 
	`sqlôeTabÀNameFromTokí
(
pName
);

1571 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


1573 c⁄° *
zDb
 = 
db
->
aDb
[
pTab
->
iDb
].
zName
;

1575 
	`as£π
–
pTab
->
iDb
==
db
->
öô
.iDb || 
isTemp
 );

1581 
i
 = 
SQLITE_CREATE_INDEX
;

1582 if–
isTemp
 ) 
i
 = 
SQLITE_CREATE_TEMP_INDEX
;

1596 if–
pLi°
==0 ){

1597 
nuŒId
.
z
 = 
pTab
->
aCﬁ
[pTab->
nCﬁ
-1].
zName
;

1598 
nuŒId
.
n
 = 
	`°æí
“uŒId.
z
);

1599 
pLi°
 = 
	`sqlôeIdLi°Aµíd
(0, &
nuŒId
);

1600 if–
pLi°
==0 ) 
exô_¸óã_ödex
;

1606 
pIndex
 = 
	`sqlôeMÆloc
–(
Index
Ë+ 
	`°æí
(
zName
) + 1 +

1607 ()*
pLi°
->
nId
 );

1608 if–
pIndex
==0 ) 
exô_¸óã_ödex
;

1609 
pIndex
->
aiCﬁumn
 = (*)&pIndex[1];

1610 
pIndex
->
zName
 = (*)&pIndex->
aiCﬁumn
[
pLi°
->
nId
];

1611 
	`°r˝y
(
pIndex
->
zName
, zName);

1612 
pIndex
->
pTabÀ
 = 
pTab
;

1613 
pIndex
->
nCﬁumn
 = 
pLi°
->
nId
;

1614 
pIndex
->
⁄Eº‹
 = onError;

1615 
pIndex
->
autoIndex
 = 
pName
==0;

1616 
pIndex
->
iDb
 = 
isTemp
 ? 1 : 
db
->
öô
.iDb;

1622 
i
=0; i<
pLi°
->
nId
; i++){

1623 
j
=0; j<
pTab
->
nCﬁ
; j++){

1624 if–
	`sqlôeSåICmp
(
pLi°
->
a
[
i
].
zName
, 
pTab
->
aCﬁ
[
j
].zName)==0 ) ;

1626 if–
j
>=
pTab
->
nCﬁ
 ){

1627 
	`sqlôeEº‹Msg
(
pP¨£
, "table %s hasÇo columnÇamed %s",

1628 
pTab
->
zName
, 
pLi°
->
a
[
i
].zName);

1629 
	`sqlôeFªe
(
pIndex
);

1630 
exô_¸óã_ödex
;

1632 
pIndex
->
aiCﬁumn
[
i
] = 
j
;

1638 if–!
pP¨£
->
ex∂aö
 ){

1639 
Index
 *
p
;

1640 
p
 = 
	`sqlôeHashIn£π
(&
db
->
aDb
[
pIndex
->
iDb
].
idxHash
,

1641 
pIndex
->
zName
, 
	`°æí
(pIndex->zName)+1,ÖIndex);

1642 if–
p
 ){

1643 
	`as£π
–
p
==
pIndex
 );

1644 
	`sqlôeFªe
(
pIndex
);

1645 
exô_¸óã_ödex
;

1647 
db
->
Êags
 |
SQLITE_I¡înCh™ges
;

1655 if–
⁄Eº‹
!=
OE_Rïœ˚
 || 
pTab
->
pIndex
==0

1656 || 
pTab
->
pIndex
->
⁄Eº‹
==
OE_Rïœ˚
){

1657 
pIndex
->
pNext
 = 
pTab
->pIndex;

1658 
pTab
->
pIndex
 =ÖIndex;

1660 
Index
 *
pOthî
 = 
pTab
->
pIndex
;

1661  
pOthî
->
pNext
 &&ÖOthî->pNext->
⁄Eº‹
!=
OE_Rïœ˚
 ){

1662 
pOthî
 =ÖOthî->
pNext
;

1664 
pIndex
->
pNext
 = 
pOthî
->pNext;

1665 
pOthî
->
pNext
 = 
pIndex
;

1672 if–
db
->
öô
.
busy
 && 
pTabÀ
!=0 ){

1673 
pIndex
->
äum
 = 
db
->
öô
.
√wTnum
;

1691 if–
db
->
öô
.
busy
==0 ){

1692 
n
;

1693 
Vdbe
 *
v
;

1694 
lbl1
, 
lbl2
;

1695 
i
;

1696 
addr
;

1698 
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

1699 if–
v
==0 ) 
exô_¸óã_ödex
;

1700 if–
pTabÀ
!=0 ){

1701 
	`sqlôeBegöWrôeO≥øti⁄
(
pP¨£
, 0, 
isTemp
);

1702 
	`sqlôeO≥nMa°îTabÀ
(
v
, 
isTemp
);

1704 
	`sqlôeVdbeAddOp
(
v
, 
OP_NewRe˙o
, 0, 0);

1705 
	`sqlôeVdbeOp3
(
v
, 
OP_Såög
, 0, 0, "ödex", 
P3_STATIC
);

1706 
	`sqlôeVdbeOp3
(
v
, 
OP_Såög
, 0, 0, 
pIndex
->
zName
, 0);

1707 
	`sqlôeVdbeOp3
(
v
, 
OP_Såög
, 0, 0, 
pTab
->
zName
, 0);

1708 
	`sqlôeVdbeOp3
(
v
, 
OP_Cª©eIndex
, 0, 
isTemp
,(*)&
pIndex
->
äum
,
P3_POINTER
);

1709 
pIndex
->
äum
 = 0;

1710 if–
pTabÀ
 ){

1711 
	`sqlôeVdbeCode
(
v
,

1712 
OP_Dup
, 0, 0,

1713 
OP_I¡egî
, 
isTemp
, 0,

1714 
OP_O≥nWrôe
, 1, 0,

1717 
addr
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_Såög
, 0, 0);

1718 if–
pSèπ
 && 
pEnd
 ){

1719 
n
 = 
	`Addr
(
pEnd
->
z
Ë- Addr(
pSèπ
->z) + 1;

1720 
	`sqlôeVdbeCh™geP3
(
v
, 
addr
, 
pSèπ
->
z
, 
n
);

1722 
	`sqlôeVdbeAddOp
(
v
, 
OP_MakeRec‹d
, 5, 0);

1723 
	`sqlôeVdbeAddOp
(
v
, 
OP_PutI¡Key
, 0, 0);

1724 if–
pTabÀ
 ){

1725 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
pTab
->
iDb
, 0);

1726 
	`sqlôeVdbeOp3
(
v
, 
OP_O≥nRód
, 2, 
pTab
->
äum
,ÖTab->
zName
, 0);

1727 
lbl2
 = 
	`sqlôeVdbeMakeLabñ
(
v
);

1728 
	`sqlôeVdbeAddOp
(
v
, 
OP_Rewöd
, 2, 
lbl2
);

1729 
lbl1
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_Re˙o
, 2, 0);

1730 
i
=0; i<
pIndex
->
nCﬁumn
; i++){

1731 
iCﬁ
 = 
pIndex
->
aiCﬁumn
[
i
];

1732 if–
pTab
->
iPKey
==
iCﬁ
 ){

1733 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 
i
, 0);

1735 
	`sqlôeVdbeAddOp
(
v
, 
OP_Cﬁumn
, 2, 
iCﬁ
);

1738 
	`sqlôeVdbeAddOp
(
v
, 
OP_MakeIdxKey
, 
pIndex
->
nCﬁumn
, 0);

1739 if–
db
->
fûe_f‹m©
>=4 ) 
	`sqlôeAddIdxKeyTy≥
(
v
, 
pIndex
);

1740 
	`sqlôeVdbeOp3
(
v
, 
OP_IdxPut
, 1, 
pIndex
->
⁄Eº‹
!=
OE_N⁄e
,

1741 "ödexed cﬁumn†¨ênŸ unique", 
P3_STATIC
);

1742 
	`sqlôeVdbeAddOp
(
v
, 
OP_Next
, 2, 
lbl1
);

1743 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
lbl2
);

1744 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 2, 0);

1745 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 1, 0);

1747 if–
pTabÀ
!=0 ){

1748 if–!
isTemp
 ){

1749 
	`sqlôeCh™geCookõ
(
db
, 
v
);

1751 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 0, 0);

1752 
	`sqlôeEndWrôeO≥øti⁄
(
pP¨£
);

1757 
exô_¸óã_ödex
:

1758 
	`sqlôeIdLi°Dñëe
(
pLi°
);

1759 
	`sqlôeSrcLi°Dñëe
(
pTabÀ
);

1760 
	`sqlôeFªe
(
zName
);

1762 
	}
}

1768 
	$sqlôeDr›Index
(
P¨£
 *
pP¨£
, 
SrcLi°
 *
pName
){

1769 
Index
 *
pIndex
;

1770 
Vdbe
 *
v
;

1771 
sqlôe
 *
db
 = 
pP¨£
->db;

1773 if–
pP¨£
->
nEº
 || 
sqlôe_mÆloc_Áûed
 ) ;

1774 
	`as£π
–
pName
->
nSrc
==1 );

1775 
pIndex
 = 
	`sqlôeFödIndex
(
db
, 
pName
->
a
[0].
zName
,ÖName->a[0].
zD©aba£
);

1776 if–
pIndex
==0 ){

1777 
	`sqlôeEº‹Msg
(
pP¨£
, "nÿsuch index: %S", 
pName
, 0);

1778 
exô_dr›_ödex
;

1780 if–
pIndex
->
autoIndex
 ){

1781 
	`sqlôeEº‹Msg
(
pP¨£
, "indexássociated with UNIQUE "

1783 
exô_dr›_ödex
;

1785 if–
pIndex
->
iDb
>1 ){

1786 
	`sqlôeEº‹Msg
(
pP¨£
, "cannotálter schema ofáttached "

1788 
exô_dr›_ödex
;

1790 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


1792 
code
 = 
SQLITE_DROP_INDEX
;

1793 
TabÀ
 *
pTab
 = 
pIndex
->
pTabÀ
;

1794 c⁄° *
zDb
 = 
db
->
aDb
[
pIndex
->
iDb
].
zName
;

1795 c⁄° *
zTab
 = 
	`SCHEMA_TABLE
(
pIndex
->
iDb
);

1801 if–
pIndex
->
iDb
 ) 
code
 = 
SQLITE_DROP_TEMP_INDEX
;

1811 
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

1812 if–
v
 ){

1813 
VdbeOpLi°
 
dr›Index
[] = {

1814 { 
OP_Rewöd
, 0, 
	`ADDR
(9), 0},

1815 { 
OP_Såög
, 0, 0, 0},

1816 { 
OP_MemSt‹e
, 1, 1, 0},

1817 { 
OP_MemLﬂd
, 1, 0, 0},

1818 { 
OP_Cﬁumn
, 0, 1, 0},

1819 { 
OP_Eq
, 0, 
	`ADDR
(8), 0},

1820 { 
OP_Next
, 0, 
	`ADDR
(3), 0},

1821 { 
OP_GŸo
, 0, 
	`ADDR
(9), 0},

1822 { 
OP_Dñëe
, 0, 0, 0},

1824 
ba£
;

1826 
	`sqlôeBegöWrôeO≥øti⁄
(
pP¨£
, 0, 
pIndex
->
iDb
);

1827 
	`sqlôeO≥nMa°îTabÀ
(
v
, 
pIndex
->
iDb
);

1828 
ba£
 = 
	`sqlôeVdbeAddOpLi°
(
v
, 
	`AºaySize
(
dr›Index
), dropIndex);

1829 
	`sqlôeVdbeCh™geP3
(
v
, 
ba£
+1, 
pIndex
->
zName
, 0);

1830 if–
pIndex
->
iDb
==0 ){

1831 
	`sqlôeCh™geCookõ
(
db
, 
v
);

1833 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 0, 0);

1834 
	`sqlôeVdbeAddOp
(
v
, 
OP_De°roy
, 
pIndex
->
äum
,ÖIndex->
iDb
);

1835 
	`sqlôeEndWrôeO≥øti⁄
(
pP¨£
);

1840 if–!
pP¨£
->
ex∂aö
 ){

1841 
	`sqlôeU∆ökAndDñëeIndex
(
db
, 
pIndex
);

1842 
db
->
Êags
 |
SQLITE_I¡înCh™ges
;

1845 
exô_dr›_ödex
:

1846 
	`sqlôeSrcLi°Dñëe
(
pName
);

1847 
	}
}

1855 
IdLi°
 *
	$sqlôeIdLi°Aµíd
(
IdLi°
 *
pLi°
, 
Tokí
 *
pTokí
){

1856 if–
pLi°
==0 ){

1857 
pLi°
 = 
	`sqlôeMÆloc
–(
IdLi°
) );

1858 if–
pLi°
==0 )  0;

1859 
pLi°
->
nAŒoc
 = 0;

1861 if–
pLi°
->
nId
>ıLi°->
nAŒoc
 ){

1862 
IdLi°_ôem
 *
a
;

1863 
pLi°
->
nAŒoc
 =ÖList->nAlloc*2 + 5;

1864 
a
 = 
	`sqlôeRóŒoc
(
pLi°
->a,ÖLi°->
nAŒoc
*(pList->a[0]) );

1865 if–
a
==0 ){

1866 
	`sqlôeIdLi°Dñëe
(
pLi°
);

1869 
pLi°
->
a
 =á;

1871 
	`mem£t
(&
pLi°
->
a
[pLi°->
nId
], 0, (pList->a[0]));

1872 if–
pTokí
 ){

1873 **
pz
 = &
pLi°
->
a
[pLi°->
nId
].
zName
;

1874 
	`sqlôeSëNSåög
(
pz
, 
pTokí
->
z
,ÖTokí->
n
, 0);

1875 if–*
pz
==0 ){

1876 
	`sqlôeIdLi°Dñëe
(
pLi°
);

1879 
	`sqlôeDequŸe
(*
pz
);

1882 
pLi°
->
nId
++;

1883  
pLi°
;

1884 
	}
}

1911 
SrcLi°
 *
	$sqlôeSrcLi°Aµíd
(
SrcLi°
 *
pLi°
, 
Tokí
 *
pTabÀ
, Tokí *
pD©aba£
){

1912 if–
pLi°
==0 ){

1913 
pLi°
 = 
	`sqlôeMÆloc
–(
SrcLi°
) );

1914 if–
pLi°
==0 )  0;

1915 
pLi°
->
nAŒoc
 = 1;

1917 if–
pLi°
->
nSrc
>ıLi°->
nAŒoc
 ){

1918 
SrcLi°
 *
pNew
;

1919 
pLi°
->
nAŒoc
 *= 2;

1920 
pNew
 = 
	`sqlôeRóŒoc
(
pLi°
,

1921 (*
pLi°
Ë+ (pLi°->
nAŒoc
-1)*’Li°->
a
[0]) );

1922 if–
pNew
==0 ){

1923 
	`sqlôeSrcLi°Dñëe
(
pLi°
);

1926 
pLi°
 = 
pNew
;

1928 
	`mem£t
(&
pLi°
->
a
[pLi°->
nSrc
], 0, (pList->a[0]));

1929 if–
pD©aba£
 &&ÖD©aba£->
z
==0 ){

1930 
pD©aba£
 = 0;

1932 if–
pD©aba£
 && 
pTabÀ
 ){

1933 
Tokí
 *
pTemp
 = 
pD©aba£
;

1934 
pD©aba£
 = 
pTabÀ
;

1935 
pTabÀ
 = 
pTemp
;

1937 if–
pTabÀ
 ){

1938 **
pz
 = &
pLi°
->
a
[pLi°->
nSrc
].
zName
;

1939 
	`sqlôeSëNSåög
(
pz
, 
pTabÀ
->
z
,ÖTabÀ->
n
, 0);

1940 if–*
pz
==0 ){

1941 
	`sqlôeSrcLi°Dñëe
(
pLi°
);

1944 
	`sqlôeDequŸe
(*
pz
);

1947 if–
pD©aba£
 ){

1948 **
pz
 = &
pLi°
->
a
[pLi°->
nSrc
].
zD©aba£
;

1949 
	`sqlôeSëNSåög
(
pz
, 
pD©aba£
->
z
,ÖD©aba£->
n
, 0);

1950 if–*
pz
==0 ){

1951 
	`sqlôeSrcLi°Dñëe
(
pLi°
);

1954 
	`sqlôeDequŸe
(*
pz
);

1957 
pLi°
->
a
[pLi°->
nSrc
].
iCurs‹
 = -1;

1958 
pLi°
->
nSrc
++;

1959  
pLi°
;

1960 
	}
}

1965 
	$sqlôeSrcLi°AssignCurs‹s
(
P¨£
 *
pP¨£
, 
SrcLi°
 *
pLi°
){

1966 
i
;

1967 
i
=0; i<
pLi°
->
nSrc
; i++){

1968 if–
pLi°
->
a
[
i
].
iCurs‹
<0 ){

1969 
pLi°
->
a
[
i
].
iCurs‹
 = 
pP¨£
->
nTab
++;

1972 
	}
}

1977 
	$sqlôeSrcLi°AddAlüs
(
SrcLi°
 *
pLi°
, 
Tokí
 *
pTokí
){

1978 if–
pLi°
 &&ÖLi°->
nSrc
>0 ){

1979 
i
 = 
pLi°
->
nSrc
 - 1;

1980 
	`sqlôeSëNSåög
(&
pLi°
->
a
[
i
].
zAlüs
, 
pTokí
->
z
,ÖTokí->
n
, 0);

1981 
	`sqlôeDequŸe
(
pLi°
->
a
[
i
].
zAlüs
);

1983 
	}
}

1988 
	$sqlôeIdLi°Dñëe
(
IdLi°
 *
pLi°
){

1989 
i
;

1990 if–
pLi°
==0 ) ;

1991 
i
=0; i<
pLi°
->
nId
; i++){

1992 
	`sqlôeFªe
(
pLi°
->
a
[
i
].
zName
);

1994 
	`sqlôeFªe
(
pLi°
->
a
);

1995 
	`sqlôeFªe
(
pLi°
);

1996 
	}
}

2002 
	$sqlôeIdLi°Index
(
IdLi°
 *
pLi°
, c⁄° *
zName
){

2003 
i
;

2004 if–
pLi°
==0 )  -1;

2005 
i
=0; i<
pLi°
->
nId
; i++){

2006 if–
	`sqlôeSåICmp
(
pLi°
->
a
[
i
].
zName
, zName)==0 )  i;

2009 
	}
}

2014 
	$sqlôeSrcLi°Dñëe
(
SrcLi°
 *
pLi°
){

2015 
i
;

2016 if–
pLi°
==0 ) ;

2017 
i
=0; i<
pLi°
->
nSrc
; i++){

2018 
	`sqlôeFªe
(
pLi°
->
a
[
i
].
zD©aba£
);

2019 
	`sqlôeFªe
(
pLi°
->
a
[
i
].
zName
);

2020 
	`sqlôeFªe
(
pLi°
->
a
[
i
].
zAlüs
);

2021 if–
pLi°
->
a
[
i
].
pTab
 &&ÖLi°->a[i].pTab->
isTønsõ¡
 ){

2022 
	`sqlôeDñëeTabÀ
(0, 
pLi°
->
a
[
i
].
pTab
);

2024 
	`sqlôeSñe˘Dñëe
(
pLi°
->
a
[
i
].
pSñe˘
);

2025 
	`sqlôeEx¥Dñëe
(
pLi°
->
a
[
i
].
pOn
);

2026 
	`sqlôeIdLi°Dñëe
(
pLi°
->
a
[
i
].
pUsög
);

2028 
	`sqlôeFªe
(
pLi°
);

2029 
	}
}

2034 
	$sqlôeBegöTønß˘i⁄
(
P¨£
 *
pP¨£
, 
⁄Eº‹
){

2035 
sqlôe
 *
db
;

2037 if–
pP¨£
==0 || (
db
ıP¨£->db)==0 || db->
aDb
[0].
pBt
==0 ) ;

2038 if–
pP¨£
->
nEº
 || 
sqlôe_mÆloc_Áûed
 ) ;

2040 if–
db
->
Êags
 & 
SQLITE_InTøns
 ){

2041 
	`sqlôeEº‹Msg
(
pP¨£
, "cannot startáÅransaction withináÅransaction");

2044 
	`sqlôeBegöWrôeO≥øti⁄
(
pP¨£
, 0, 0);

2045 if–!
pP¨£
->
ex∂aö
 ){

2046 
db
->
Êags
 |
SQLITE_InTøns
;

2047 
db
->
⁄Eº‹
 = onError;

2049 
	}
}

2054 
	$sqlôeCommôTønß˘i⁄
(
P¨£
 *
pP¨£
){

2055 
sqlôe
 *
db
;

2057 if–
pP¨£
==0 || (
db
ıP¨£->db)==0 || db->
aDb
[0].
pBt
==0 ) ;

2058 if–
pP¨£
->
nEº
 || 
sqlôe_mÆloc_Áûed
 ) ;

2060 if–(
db
->
Êags
 & 
SQLITE_InTøns
)==0 ){

2061 
	`sqlôeEº‹Msg
(
pP¨£
, "cannot commit -ÇoÅransaction isáctive");

2064 if–!
pP¨£
->
ex∂aö
 ){

2065 
db
->
Êags
 &~
SQLITE_InTøns
;

2067 
	`sqlôeEndWrôeO≥øti⁄
(
pP¨£
);

2068 if–!
pP¨£
->
ex∂aö
 ){

2069 
db
->
⁄Eº‹
 = 
OE_DeÁu…
;

2071 
	}
}

2076 
	$sqlôeRﬁlbackTønß˘i⁄
(
P¨£
 *
pP¨£
){

2077 
sqlôe
 *
db
;

2078 
Vdbe
 *
v
;

2080 if–
pP¨£
==0 || (
db
ıP¨£->db)==0 || db->
aDb
[0].
pBt
==0 ) ;

2081 if–
pP¨£
->
nEº
 || 
sqlôe_mÆloc_Áûed
 ) ;

2083 if–(
db
->
Êags
 & 
SQLITE_InTøns
)==0 ){

2084 
	`sqlôeEº‹Msg
(
pP¨£
, "cannotÑollback -ÇoÅransaction isáctive");

2087 
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

2088 if–
v
 ){

2089 
	`sqlôeVdbeAddOp
(
v
, 
OP_Rﬁlback
, 0, 0);

2091 if–!
pP¨£
->
ex∂aö
 ){

2092 
db
->
Êags
 &~
SQLITE_InTøns
;

2093 
db
->
⁄Eº‹
 = 
OE_DeÁu…
;

2095 
	}
}

2101 
	$sqlôeCodeVîifySchema
(
P¨£
 *
pP¨£
, 
iDb
){

2102 
sqlôe
 *
db
 = 
pP¨£
->db;

2103 
Vdbe
 *
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

2104 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

2105 
	`as£π
–
db
->
aDb
[
iDb
].
pBt
!=0 );

2106 if–
iDb
!=1 && !
	`DbHasPr›îty
(
db
, iDb, 
DB_Cookõ
) ){

2107 
	`sqlôeVdbeAddOp
(
v
, 
OP_VîifyCookõ
, 
iDb
, 
db
->
aDb
[iDb].
schema_cookõ
);

2108 
	`DbSëPr›îty
(
db
, 
iDb
, 
DB_Cookõ
);

2110 
	}
}

2130 
	$sqlôeBegöWrôeO≥øti⁄
(
P¨£
 *
pP¨£
, 
£tCheckpoöt
, 
iDb
){

2131 
Vdbe
 *
v
;

2132 
sqlôe
 *
db
 = 
pP¨£
->db;

2133 if–
	`DbHasPr›îty
(
db
, 
iDb
, 
DB_Locked
) ) ;

2134 
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

2135 if–
v
==0 ) ;

2136 if–!
db
->
aDb
[
iDb
].
öTøns
 ){

2137 
	`sqlôeVdbeAddOp
(
v
, 
OP_Tønß˘i⁄
, 
iDb
, 0);

2138 
	`DbSëPr›îty
(
db
, 
iDb
, 
DB_Locked
);

2139 
	`sqlôeCodeVîifySchema
(
pP¨£
, 
iDb
);

2140 if–
iDb
!=1 ){

2141 
	`sqlôeBegöWrôeO≥øti⁄
(
pP¨£
, 
£tCheckpoöt
, 1);

2143 }if–
£tCheckpoöt
 ){

2144 
	`sqlôeVdbeAddOp
(
v
, 
OP_Checkpoöt
, 
iDb
, 0);

2145 
	`DbSëPr›îty
(
db
, 
iDb
, 
DB_Locked
);

2147 
	}
}

2159 
	$sqlôeEndWrôeO≥øti⁄
(
P¨£
 *
pP¨£
){

2160 
Vdbe
 *
v
;

2161 
sqlôe
 *
db
 = 
pP¨£
->db;

2162 if–
pP¨£
->
åigSèck
 ) ;

2163 
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

2164 if–
v
==0 ) ;

2165 if–
db
->
Êags
 & 
SQLITE_InTøns
 ){

2169 
	`sqlôeVdbeAddOp
(
v
, 
OP_Commô
, 0, 0);

2171 
	}
}

	@date.c

50 
	~"os.h
"

51 
	~"sqlôeI¡.h
"

52 
	~<˘y≥.h
>

53 
	~<°dlib.h
>

54 
	~<as£π.h
>

55 
	~<time.h
>

57 #i‚de‡
SQLITE_OMIT_DATETIME_FUNCS


62 
D©eTime
 
	tD©eTime
;

63 
	sD©eTime
 {

64 
	mrJD
;

65 
	mY
, 
	mM
, 
	mD
;

66 
	mh
, 
	mm
;

67 
	mtz
;

68 
	ms
;

69 
	mvÆidYMD
;

70 
	mvÆidHMS
;

71 
	mvÆidJD
;

72 
	mvÆidTZ
;

89 
	$gëDigôs
(c⁄° *
zD©e
, ...){

90 
va_li°
 
≠
;

91 
vÆ
;

92 
N
;

93 
mö
;

94 
max
;

95 
√xtC
;

96 *
pVÆ
;

97 
˙t
 = 0;

98 
	`va_°¨t
(
≠
, 
zD©e
);

100 
N
 = 
	`va_¨g
(
≠
, );

101 
mö
 = 
	`va_¨g
(
≠
, );

102 
max
 = 
	`va_¨g
(
≠
, );

103 
√xtC
 = 
	`va_¨g
(
≠
, );

104 
pVÆ
 = 
	`va_¨g
(
≠
, *);

105 
vÆ
 = 0;

106  
N
-- ){

107 if–!
	`isdigô
(*
zD©e
) ){

108  
˙t
;

110 
vÆ
 = vÆ*10 + *
zD©e
 - '0';

111 
zD©e
++;

113 if–
vÆ
<
mö
 || vÆ>
max
 || (
√xtC
!=0 &&ÇextC!=*
zD©e
) ){

114  
˙t
;

116 *
pVÆ
 = 
vÆ
;

117 
zD©e
++;

118 
˙t
++;

119 } 
√xtC
 );

120  
˙t
;

121 
	}
}

127 
	$gëVÆue
(c⁄° *
z
, *
pR
){

128 c⁄° *
zEnd
;

129 *
pR
 = 
	`sqlôeAtoF
(
z
, &
zEnd
);

130  
zEnd
 - 
z
;

131 
	}
}

145 
	$∑r£Timez⁄e
(c⁄° *
zD©e
, 
D©eTime
 *
p
){

146 
sgn
 = 0;

147 
nHr
, 
nMn
;

148  
	`is•a˚
(*
zD©e
) ){ zDate++; }

149 
p
->
tz
 = 0;

150 if–*
zD©e
=='-' ){

151 
sgn
 = -1;

152 }if–*
zD©e
=='+' ){

153 
sgn
 = +1;

155  *
zD©e
!=0;

157 
zD©e
++;

158 if–
	`gëDigôs
(
zD©e
, 2, 0, 14, ':', &
nHr
, 2, 0, 59, 0, &
nMn
)!=2 ){

161 
zD©e
 += 5;

162 
p
->
tz
 = 
sgn
*(
nMn
 + 
nHr
*60);

163  
	`is•a˚
(*
zD©e
) ){ zDate++; }

164  *
zD©e
!=0;

165 
	}
}

174 
	$∑r£HhMmSs
(c⁄° *
zD©e
, 
D©eTime
 *
p
){

175 
h
, 
m
, 
s
;

176 
ms
 = 0.0;

177 if–
	`gëDigôs
(
zD©e
, 2, 0, 24, ':', &
h
, 2, 0, 59, 0, &
m
)!=2 ){

180 
zD©e
 += 5;

181 if–*
zD©e
==':' ){

182 
zD©e
++;

183 if–
	`gëDigôs
(
zD©e
, 2, 0, 59, 0, &
s
)!=1 ){

186 
zD©e
 += 2;

187 if–*
zD©e
=='.' && 
	`isdigô
(zDate[1]) ){

188 
rSˇÀ
 = 1.0;

189 
zD©e
++;

190  
	`isdigô
(*
zD©e
) ){

191 
ms
 = ms*10.0 + *
zD©e
 - '0';

192 
rSˇÀ
 *= 10.0;

193 
zD©e
++;

195 
ms
 /
rSˇÀ
;

198 
s
 = 0;

200 
p
->
vÆidJD
 = 0;

201 
p
->
vÆidHMS
 = 1;

202 
p
->
h
 = h;

203 
p
->
m
 = m;

204 
p
->
s
 = s + 
ms
;

205 if–
	`∑r£Timez⁄e
(
zD©e
, 
p
) )  1;

206 
p
->
vÆidTZ
 =Ö->
tz
!=0;

208 
	}
}

216 
	$compuãJD
(
D©eTime
 *
p
){

217 
Y
, 
M
, 
D
, 
A
, 
B
, 
X1
, 
X2
;

219 if–
p
->
vÆidJD
 ) ;

220 if–
p
->
vÆidYMD
 ){

221 
Y
 = 
p
->Y;

222 
M
 = 
p
->M;

223 
D
 = 
p
->D;

225 
Y
 = 2000;

226 
M
 = 1;

227 
D
 = 1;

229 if–
M
<=2 ){

230 
Y
--;

231 
M
 += 12;

233 
A
 = 
Y
/100;

234 
B
 = 2 - 
A
 + (A/4);

235 
X1
 = 365.25*(
Y
+4716);

236 
X2
 = 30.6001*(
M
+1);

237 
p
->
rJD
 = 
X1
 + 
X2
 + 
D
 + 
B
 - 1524.5;

238 
p
->
vÆidJD
 = 1;

239 
p
->
vÆidYMD
 = 0;

240 if–
p
->
vÆidHMS
 ){

241 
p
->
rJD
 +’->
h
*3600.0 +Ö->
m
*60.0 +Ö->
s
)/86400.0;

242 if–
p
->
vÆidTZ
 ){

243 
p
->
rJD
 +p->
tz
*60/86400.0;

244 
p
->
vÆidHMS
 = 0;

245 
p
->
vÆidTZ
 = 0;

248 
	}
}

262 
	$∑r£YyyyMmDd
(c⁄° *
zD©e
, 
D©eTime
 *
p
){

263 
Y
, 
M
, 
D
, 
√g
;

265 if–
zD©e
[0]=='-' ){

266 
zD©e
++;

267 
√g
 = 1;

269 
√g
 = 0;

271 if–
	`gëDigôs
(
zD©e
,4,0,9999,'-',&
Y
,2,1,12,'-',&
M
,2,1,31,0,&
D
)!=3 ){

274 
zD©e
 += 10;

275  
	`is•a˚
(*
zD©e
) ){ zDate++; }

276 if–
	`∑r£HhMmSs
(
zD©e
, 
p
)==0 ){

278 }if–*
zD©e
==0 ){

279 
p
->
vÆidHMS
 = 0;

283 
p
->
vÆidJD
 = 0;

284 
p
->
vÆidYMD
 = 1;

285 
p
->
Y
 = 
√g
 ? -Y : Y;

286 
p
->
M
 = M;

287 
p
->
D
 = D;

288 if–
p
->
vÆidTZ
 ){

289 
	`compuãJD
(
p
);

292 
	}
}

310 
	$∑r£D©eOrTime
(c⁄° *
zD©e
, 
D©eTime
 *
p
){

311 
	`mem£t
(
p
, 0, (*p));

312 if–
	`∑r£YyyyMmDd
(
zD©e
,
p
)==0 ){

314 }if–
	`∑r£HhMmSs
(
zD©e
, 
p
)==0 ){

316 }if–
	`sqlôeSåICmp
(
zD©e
,"now")==0){

317 
r
;

318 if–
	`sqlôeOsCuºítTime
(&
r
)==0 ){

319 
p
->
rJD
 = 
r
;

320 
p
->
vÆidJD
 = 1;

324 }if–
	`sqlôeIsNumbî
(
zD©e
) ){

325 
p
->
rJD
 = 
	`sqlôeAtoF
(
zD©e
, 0);

326 
p
->
vÆidJD
 = 1;

330 
	}
}

335 
	$compuãYMD
(
D©eTime
 *
p
){

336 
Z
, 
A
, 
B
, 
C
, 
D
, 
E
, 
X1
;

337 if–
p
->
vÆidYMD
 ) ;

338 if–!
p
->
vÆidJD
 ){

339 
p
->
Y
 = 2000;

340 
p
->
M
 = 1;

341 
p
->
D
 = 1;

343 
Z
 = 
p
->
rJD
 + 0.5;

344 
A
 = (
Z
 - 1867216.25)/36524.25;

345 
A
 = 
Z
 + 1 + A - (A/4);

346 
B
 = 
A
 + 1524;

347 
C
 = (
B
 - 122.1)/365.25;

348 
D
 = 365.25*
C
;

349 
E
 = (
B
-
D
)/30.6001;

350 
X1
 = 30.6001*
E
;

351 
p
->
D
 = 
B
 - D - 
X1
;

352 
p
->
M
 = 
E
<14 ? E-1 : E-13;

353 
p
->
Y
 =Ö->
M
>2 ? 
C
 - 4716 : C - 4715;

355 
p
->
vÆidYMD
 = 1;

356 
	}
}

361 
	$compuãHMS
(
D©eTime
 *
p
){

362 
Z
, 
s
;

363 if–
p
->
vÆidHMS
 ) ;

364 
Z
 = 
p
->
rJD
 + 0.5;

365 
s
 = (
p
->
rJD
 + 0.5 - 
Z
)*86400000.0 + 0.5;

366 
p
->
s
 = 0.001*s;

367 
s
 = 
p
->s;

368 
p
->
s
 -= s;

369 
p
->
h
 = 
s
/3600;

370 
s
 -
p
->
h
*3600;

371 
p
->
m
 = 
s
/60;

372 
p
->
s
 +†-Ö->
m
*60;

373 
p
->
vÆidHMS
 = 1;

374 
	}
}

379 
	$compuãYMD_HMS
(
D©eTime
 *
p
){

380 
	`compuãYMD
(
p
);

381 
	`compuãHMS
(
p
);

382 
	}
}

387 
	$˛órYMD_HMS_TZ
(
D©eTime
 *
p
){

388 
p
->
vÆidYMD
 = 0;

389 
p
->
vÆidHMS
 = 0;

390 
p
->
vÆidTZ
 = 0;

391 
	}
}

397 
	$loˇ…imeOff£t
(
D©eTime
 *
p
){

398 
D©eTime
 
x
, 
y
;

399 
time_t
 
t
;

400 
tm
 *
pTm
;

401 
x
 = *
p
;

402 
	`compuãYMD_HMS
(&
x
);

403 if–
x
.
Y
<1971 || x.Y>=2038 ){

404 
x
.
Y
 = 2000;

405 
x
.
M
 = 1;

406 
x
.
D
 = 1;

407 
x
.
h
 = 0;

408 
x
.
m
 = 0;

409 
x
.
s
 = 0.0;

411 
s
 = 
x
.s + 0.5;

412 
x
.
s
 = s;

414 
x
.
tz
 = 0;

415 
x
.
vÆidJD
 = 0;

416 
	`compuãJD
(&
x
);

417 
t
 = (
x
.
rJD
-2440587.5)*86400.0 + 0.5;

418 
	`sqlôeOsE¡îMuãx
();

419 
pTm
 = 
	`loˇ…ime
(&
t
);

420 
y
.
Y
 = 
pTm
->
tm_yór
 + 1900;

421 
y
.
M
 = 
pTm
->
tm_m⁄
 + 1;

422 
y
.
D
 = 
pTm
->
tm_mday
;

423 
y
.
h
 = 
pTm
->
tm_hour
;

424 
y
.
m
 = 
pTm
->
tm_mö
;

425 
y
.
s
 = 
pTm
->
tm_£c
;

426 
	`sqlôeOsLóveMuãx
();

427 
y
.
vÆidYMD
 = 1;

428 
y
.
vÆidHMS
 = 1;

429 
y
.
vÆidJD
 = 0;

430 
y
.
vÆidTZ
 = 0;

431 
	`compuãJD
(&
y
);

432  
y
.
rJD
 - 
x
.rJD;

433 
	}
}

456 
	$∑r£Modifõr
(c⁄° *
zMod
, 
D©eTime
 *
p
){

457 
rc
 = 1;

458 
n
;

459 
r
;

460 *
z
, 
zBuf
[30];

461 
z
 = 
zBuf
;

462 
n
=0;Ç<(
zBuf
)-1 && 
zMod
[n];Ç++){

463 
z
[
n
] = 
	`tﬁowî
(
zMod
[n]);

465 
z
[
n
] = 0;

466  
z
[0] ){

473 if–
	`°rcmp
(
z
, "localtime")==0 ){

474 
	`compuãJD
(
p
);

475 
p
->
rJD
 +
	`loˇ…imeOff£t
(p);

476 
	`˛órYMD_HMS_TZ
(
p
);

477 
rc
 = 0;

488 if–
	`°rcmp
(
z
, "unixïoch")==0 && 
p
->
vÆidJD
 ){

489 
p
->
rJD
 =Ö->rJD/86400.0 + 2440587.5;

490 
	`˛órYMD_HMS_TZ
(
p
);

491 
rc
 = 0;

492 }if–
	`°rcmp
(
z
, "utc")==0 ){

493 
c1
;

494 
	`compuãJD
(
p
);

495 
c1
 = 
	`loˇ…imeOff£t
(
p
);

496 
p
->
rJD
 -
c1
;

497 
	`˛órYMD_HMS_TZ
(
p
);

498 
p
->
rJD
 +
c1
 - 
	`loˇ…imeOff£t
(p);

499 
rc
 = 0;

511 if–
	`°∫cmp
(
z
, "wìkday ", 8)==0 && 
	`gëVÆue
(&z[8],&
r
)>0

512 && (
n
=
r
)==r &&Ç>=0 &&Ñ<7 ){

513 
Z
;

514 
	`compuãYMD_HMS
(
p
);

515 
p
->
vÆidTZ
 = 0;

516 
p
->
vÆidJD
 = 0;

517 
	`compuãJD
(
p
);

518 
Z
 = 
p
->
rJD
 + 1.5;

519 
Z
 %= 7;

520 if–
Z
>
n
 ) Z -= 7;

521 
p
->
rJD
 +
n
 - 
Z
;

522 
	`˛órYMD_HMS_TZ
(
p
);

523 
rc
 = 0;

534 if–
	`°∫cmp
(
z
, "start of ", 9)!=0 ) ;

535 
z
 += 9;

536 
	`compuãYMD
(
p
);

537 
p
->
vÆidHMS
 = 1;

538 
p
->
h
 =Ö->
m
 = 0;

539 
p
->
s
 = 0.0;

540 
p
->
vÆidTZ
 = 0;

541 
p
->
vÆidJD
 = 0;

542 if–
	`°rcmp
(
z
,"month")==0 ){

543 
p
->
D
 = 1;

544 
rc
 = 0;

545 }if–
	`°rcmp
(
z
,"year")==0 ){

546 
	`compuãYMD
(
p
);

547 
p
->
M
 = 1;

548 
p
->
D
 = 1;

549 
rc
 = 0;

550 }if–
	`°rcmp
(
z
,"day")==0 ){

551 
rc
 = 0;

567 
n
 = 
	`gëVÆue
(
z
, &
r
);

568 if–
n
<=0 ) ;

569 if–
z
[
n
]==':' ){

575 c⁄° *
z2
 = 
z
;

576 
D©eTime
 
tx
;

577 
day
;

578 if–!
	`isdigô
(*
z2
) ) z2++;

579 
	`mem£t
(&
tx
, 0, (tx));

580 if–
	`∑r£HhMmSs
(
z2
, &
tx
) ) ;

581 
	`compuãJD
(&
tx
);

582 
tx
.
rJD
 -= 0.5;

583 
day
 = ()
tx
.
rJD
;

584 
tx
.
rJD
 -
day
;

585 if–
z
[0]=='-' ) 
tx
.
rJD
 = -tx.rJD;

586 
	`compuãJD
(
p
);

587 
	`˛órYMD_HMS_TZ
(
p
);

588 
p
->
rJD
 +
tx
.rJD;

589 
rc
 = 0;

592 
z
 +
n
;

593  
	`is•a˚
(
z
[0]) ) z++;

594 
n
 = 
	`°æí
(
z
);

595 if–
n
>10 ||Ç<3 ) ;

596 if–
z
[
n
-1]=='s' ){ z[n-1] = 0;Ç--; }

597 
	`compuãJD
(
p
);

598 
rc
 = 0;

599 if–
n
==3 && 
	`°rcmp
(
z
,"day")==0 ){

600 
p
->
rJD
 +
r
;

601 }if–
n
==4 && 
	`°rcmp
(
z
,"hour")==0 ){

602 
p
->
rJD
 +
r
/24.0;

603 }if–
n
==6 && 
	`°rcmp
(
z
,"minute")==0 ){

604 
p
->
rJD
 +
r
/(24.0*60.0);

605 }if–
n
==6 && 
	`°rcmp
(
z
,"second")==0 ){

606 
p
->
rJD
 +
r
/(24.0*60.0*60.0);

607 }if–
n
==5 && 
	`°rcmp
(
z
,"month")==0 ){

608 
x
, 
y
;

609 
	`compuãYMD_HMS
(
p
);

610 
p
->
M
 +
r
;

611 
x
 = 
p
->
M
>0 ? (p->M-1)/12 : (p->M-12)/12;

612 
p
->
Y
 +
x
;

613 
p
->
M
 -
x
*12;

614 
p
->
vÆidJD
 = 0;

615 
	`compuãJD
(
p
);

616 
y
 = 
r
;

617 if–
y
!=
r
 ){

618 
p
->
rJD
 +(
r
 - 
y
)*30.0;

620 }if–
n
==4 && 
	`°rcmp
(
z
,"year")==0 ){

621 
	`compuãYMD_HMS
(
p
);

622 
p
->
Y
 +
r
;

623 
p
->
vÆidJD
 = 0;

624 
	`compuãJD
(
p
);

626 
rc
 = 1;

628 
	`˛órYMD_HMS_TZ
(
p
);

635  
rc
;

636 
	}
}

644 
	$isD©e
(
¨gc
, c⁄° **
¨gv
, 
D©eTime
 *
p
){

645 
i
;

646 if–
¨gc
==0 )  1;

647 if–
¨gv
[0]==0 || 
	`∑r£D©eOrTime
◊rgv[0], 
p
) )  1;

648 
i
=1; i<
¨gc
; i++){

649 if–
¨gv
[
i
]==0 || 
	`∑r£Modifõr
◊rgv[i], 
p
) )  1;

652 
	}
}

665 
	$julündayFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

666 
D©eTime
 
x
;

667 if–
	`isD©e
(
¨gc
, 
¨gv
, &
x
)==0 ){

668 
	`compuãJD
(&
x
);

669 
	`sqlôe_£t_ªsu…_doubÀ
(
c⁄ãxt
, 
x
.
rJD
);

671 
	}
}

678 
	$d©ëimeFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

679 
D©eTime
 
x
;

680 if–
	`isD©e
(
¨gc
, 
¨gv
, &
x
)==0 ){

681 
zBuf
[100];

682 
	`compuãYMD_HMS
(&
x
);

683 
	`•rötf
(
zBuf
, "%04d-%02d-%02d %02d:%02d:%02d",
x
.
Y
, x.
M
, x.
D
, x.
h
, x.
m
,

684 ()(
x
.
s
));

685 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
zBuf
, -1);

687 
	}
}

694 
	$timeFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

695 
D©eTime
 
x
;

696 if–
	`isD©e
(
¨gc
, 
¨gv
, &
x
)==0 ){

697 
zBuf
[100];

698 
	`compuãHMS
(&
x
);

699 
	`•rötf
(
zBuf
, "%02d:%02d:%02d", 
x
.
h
, x.
m
, ()x.
s
);

700 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
zBuf
, -1);

702 
	}
}

709 
	$d©eFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

710 
D©eTime
 
x
;

711 if–
	`isD©e
(
¨gc
, 
¨gv
, &
x
)==0 ){

712 
zBuf
[100];

713 
	`compuãYMD
(&
x
);

714 
	`•rötf
(
zBuf
, "%04d-%02d-%02d", 
x
.
Y
, x.
M
, x.
D
);

715 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
zBuf
, -1);

717 
	}
}

738 
	$°r·imeFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

739 
D©eTime
 
x
;

740 
n
, 
i
, 
j
;

741 *
z
;

742 c⁄° *
zFmt
 = 
¨gv
[0];

743 
zBuf
[100];

744 if–
¨gv
[0]==0 || 
	`isD©e
(
¨gc
-1,árgv+1, &
x
) ) ;

745 
i
=0, 
n
=1; 
zFmt
[i]; i++,Ç++){

746 if–
zFmt
[
i
]=='%' ){

747  
zFmt
[
i
+1] ){

754 
n
++;

760 
n
 += 8;

763 
n
 += 3;

766 
n
 += 8;

770 
n
 += 50;

775 
i
++;

778 if–
n
<(
zBuf
) ){

779 
z
 = 
zBuf
;

781 
z
 = 
	`sqlôeMÆloc
–
n
 );

782 if–
z
==0 ) ;

784 
	`compuãJD
(&
x
);

785 
	`compuãYMD_HMS
(&
x
);

786 
i
=
j
=0; 
zFmt
[i]; i++){

787 if–
zFmt
[
i
]!='%' ){

788 
z
[
j
++] = 
zFmt
[
i
];

790 
i
++;

791  
zFmt
[
i
] ){

792 'd': 
	`•rötf
(&
z
[
j
],"%02d",
x
.
D
); j+=2; ;

794 
s
 = 
x
.s;

795 
ms
 = (
x
.
s
 - s)*1000.0;

796 
	`•rötf
(&
z
[
j
],"%02d.%03d",
s
,
ms
);

797 
j
 +
	`°æí
(&
z
[j]);

800 'H': 
	`•rötf
(&
z
[
j
],"%02d",
x
.
h
); j+=2; ;

803 
n
;

804 
D©eTime
 
y
 = 
x
;

805 
y
.
vÆidJD
 = 0;

806 
y
.
M
 = 1;

807 
y
.
D
 = 1;

808 
	`compuãJD
(&
y
);

809 
n
 = 
x
.
rJD
 - 
y
.rJD;

810 if–
zFmt
[
i
]=='W' ){

811 
wd
;

812 
wd
 = (()(
x
.
rJD
+0.5)) % 7;

813 
	`•rötf
(&
z
[
j
],"%02d",(
n
+7-
wd
)/7);

814 
j
 += 2;

816 
	`•rötf
(&
z
[
j
],"%03d",
n
+1);

817 
j
 += 3;

821 'J': 
	`•rötf
(&
z
[
j
],"%.16g",
x
.
rJD
); j+=
	`°æí
(&z[j]); ;

822 'm': 
	`•rötf
(&
z
[
j
],"%02d",
x
.
M
); j+=2; ;

823 'M': 
	`•rötf
(&
z
[
j
],"%02d",
x
.
m
); j+=2; ;

825 
	`•rötf
(&
z
[
j
],"%d",()((
x
.
rJD
-2440587.5)*86400.0 + 0.5));

826 
j
 +
	`°æí
(&
z
[j]);

829 'S': 
	`•rötf
(&
z
[
j
],"%02d",()(
x
.
s
+0.5)); j+=2; ;

830 'w': 
z
[
j
++] = ((()(
x
.
rJD
+1.5)) % 7) + '0'; ;

831 'Y': 
	`•rötf
(&
z
[
j
],"%04d",
x
.
Y
); j+=
	`°æí
(&z[j]); ;

832 '%': 
z
[
j
++] = '%'; ;

836 
z
[
j
] = 0;

837 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
z
, -1);

838 if–
z
!=
zBuf
 ){

839 
	`sqlôeFªe
(
z
);

841 
	}
}

851 
	$sqlôeRegi°îD©eTimeFun˘i⁄s
(
sqlôe
 *
db
){

852 #i‚de‡
SQLITE_OMIT_DATETIME_FUNCS


854 *
zName
;

855 
nArg
;

856 
d©aTy≥
;

857 (*
xFunc
)(
sqlôe_func
*,,const **);

858 } 
aFuncs
[] = {

859 { "julünday", -1, 
SQLITE_NUMERIC
, 
julündayFunc
 },

860 { "d©e", -1, 
SQLITE_TEXT
, 
d©eFunc
 },

861 { "time", -1, 
SQLITE_TEXT
, 
timeFunc
 },

862 { "d©ëime", -1, 
SQLITE_TEXT
, 
d©ëimeFunc
 },

863 { "°r·ime", -1, 
SQLITE_TEXT
, 
°r·imeFunc
 },

865 
i
;

867 
i
=0; i<(
aFuncs
)/(aFuncs[0]); i++){

868 
	`sqlôe_¸óã_fun˘i⁄
(
db
, 
aFuncs
[
i
].
zName
,

869 
aFuncs
[
i
].
nArg
,áFuncs[i].
xFunc
, 0);

870 if–
aFuncs
[
i
].
xFunc
 ){

871 
	`sqlôe_fun˘i⁄_ty≥
(
db
, 
aFuncs
[
i
].
zName
,áFuncs[i].
d©aTy≥
);

875 
	}
}

	@delete.c

17 
	~"sqlôeI¡.h
"

24 
TabÀ
 *
	$sqlôeSrcLi°Lookup
(
P¨£
 *
pP¨£
, 
SrcLi°
 *
pSrc
){

25 
TabÀ
 *
pTab
 = 0;

26 
i
;

27 
i
=0; i<
pSrc
->
nSrc
; i++){

28 c⁄° *
zTab
 = 
pSrc
->
a
[
i
].
zName
;

29 c⁄° *
zDb
 = 
pSrc
->
a
[
i
].
zD©aba£
;

30 
pTab
 = 
	`sqlôeLoˇãTabÀ
(
pP¨£
, 
zTab
, 
zDb
);

31 
pSrc
->
a
[
i
].
pTab
 =ÖTab;

33  
pTab
;

34 
	}
}

41 
	$sqlôeIsRódO∆y
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTab
, 
võwOk
){

42 if–
pTab
->
ªadO∆y
 ){

43 
	`sqlôeEº‹Msg
(
pP¨£
, "èbÀ %†mayÇŸ bêmodifõd", 
pTab
->
zName
);

46 if–!
võwOk
 && 
pTab
->
pSñe˘
 ){

47 
	`sqlôeEº‹Msg
(
pP¨£
, "ˇ¬Ÿ modify %†beˇu£ iài†®võw",
pTab
->
zName
);

51 
	}
}

56 
	$sqlôeDñëeFrom
(

57 
P¨£
 *
pP¨£
,

58 
SrcLi°
 *
pTabLi°
,

59 
Ex¥
 *
pWhîe


61 
Vdbe
 *
v
;

62 
TabÀ
 *
pTab
;

63 c⁄° *
zDb
;

64 
íd
, 
addr
;

65 
i
;

66 
WhîeInfo
 *
pWInfo
;

67 
Index
 *
pIdx
;

68 
iCur
;

69 
sqlôe
 *
db
;

70 
isVõw
;

71 
AuthC⁄ãxt
 
sC⁄ãxt
;

73 
row_åiggîs_exi°
 = 0;

74 
bef‹e_åiggîs
;

75 
a·î_åiggîs
;

76 
ﬁdIdx
 = -1;

78 
sC⁄ãxt
.
pP¨£
 = 0;

79 if–
pP¨£
->
nEº
 || 
sqlôe_mÆloc_Áûed
 ){

80 
pTabLi°
 = 0;

81 
dñëe_‰om_˛ónup
;

83 
db
 = 
pP¨£
->db;

84 
	`as£π
–
pTabLi°
->
nSrc
==1 );

91 
pTab
 = 
	`sqlôeSrcLi°Lookup
(
pP¨£
, 
pTabLi°
);

92 if–
pTab
==0 ) 
dñëe_‰om_˛ónup
;

93 
bef‹e_åiggîs
 = 
	`sqlôeTriggîsExi°
(
pP¨£
, 
pTab
->
pTriggî
,

94 
TK_DELETE
, 
TK_BEFORE
, 
TK_ROW
, 0);

95 
a·î_åiggîs
 = 
	`sqlôeTriggîsExi°
(
pP¨£
, 
pTab
->
pTriggî
,

96 
TK_DELETE
, 
TK_AFTER
, 
TK_ROW
, 0);

97 
row_åiggîs_exi°
 = 
bef‹e_åiggîs
 || 
a·î_åiggîs
;

98 
isVõw
 = 
pTab
->
pSñe˘
!=0;

99 if–
	`sqlôeIsRódO∆y
(
pP¨£
, 
pTab
, 
bef‹e_åiggîs
) ){

100 
dñëe_‰om_˛ónup
;

102 
	`as£π
–
pTab
->
iDb
<
db
->
nDb
 );

103 
zDb
 = 
db
->
aDb
[
pTab
->
iDb
].
zName
;

112 if–
isVõw
 && 
	`sqlôeVõwGëCﬁumnNames
(
pP¨£
, 
pTab
) ){

113 
dñëe_‰om_˛ónup
;

118 if–
row_åiggîs_exi°
 ){

119 
ﬁdIdx
 = 
pP¨£
->
nTab
++;

124 
	`as£π
–
pTabLi°
->
nSrc
==1 );

125 
iCur
 = 
pTabLi°
->
a
[0].
iCurs‹
 = 
pP¨£
->
nTab
++;

126 if–
pWhîe
 ){

127 if–
	`sqlôeEx¥ResﬁveIds
(
pP¨£
, 
pTabLi°
, 0, 
pWhîe
) ){

128 
dñëe_‰om_˛ónup
;

130 if–
	`sqlôeEx¥Check
(
pP¨£
, 
pWhîe
, 0, 0) ){

131 
dñëe_‰om_˛ónup
;

137 if–
isVõw
 ){

143 
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

144 if–
v
==0 ){

145 
dñëe_‰om_˛ónup
;

147 
	`sqlôeBegöWrôeO≥øti⁄
(
pP¨£
, 
row_åiggîs_exi°
, 
pTab
->
iDb
);

152 if–
isVõw
 ){

153 
Sñe˘
 *
pVõw
 = 
	`sqlôeSñe˘Dup
(
pTab
->
pSñe˘
);

154 
	`sqlôeSñe˘
(
pP¨£
, 
pVõw
, 
SRT_TempTabÀ
, 
iCur
, 0, 0, 0);

155 
	`sqlôeSñe˘Dñëe
(
pVõw
);

161 if–
db
->
Êags
 & 
SQLITE_Cou¡Rows
 ){

162 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 0, 0);

169 if–
pWhîe
==0 && !
row_åiggîs_exi°
 ){

170 if–
db
->
Êags
 & 
SQLITE_Cou¡Rows
 ){

173 
ídOfLo›
 = 
	`sqlôeVdbeMakeLabñ
(
v
);

174 
addr
;

175 if–!
isVõw
 ){

176 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
pTab
->
iDb
, 0);

177 
	`sqlôeVdbeAddOp
(
v
, 
OP_O≥nRód
, 
iCur
, 
pTab
->
äum
);

179 
	`sqlôeVdbeAddOp
(
v
, 
OP_Rewöd
, 
iCur
, 
	`sqlôeVdbeCuºítAddr
(v)+2);

180 
addr
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_AddImm
, 1, 0);

181 
	`sqlôeVdbeAddOp
(
v
, 
OP_Next
, 
iCur
, 
addr
);

182 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
ídOfLo›
);

183 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
, 0);

185 if–!
isVõw
 ){

186 
	`sqlôeVdbeAddOp
(
v
, 
OP_CÀ¨
, 
pTab
->
äum
,ÖTab->
iDb
);

187 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

188 
	`sqlôeVdbeAddOp
(
v
, 
OP_CÀ¨
, 
pIdx
->
äum
,ÖIdx->
iDb
);

199 
pWInfo
 = 
	`sqlôeWhîeBegö
(
pP¨£
, 
pTabLi°
, 
pWhîe
, 1, 0);

200 if–
pWInfo
==0 ) 
dñëe_‰om_˛ónup
;

204 
	`sqlôeVdbeAddOp
(
v
, 
OP_Li°Wrôe
, 0, 0);

205 if–
db
->
Êags
 & 
SQLITE_Cou¡Rows
 ){

206 
	`sqlôeVdbeAddOp
(
v
, 
OP_AddImm
, 1, 0);

211 
	`sqlôeWhîeEnd
(
pWInfo
);

215 if–
row_åiggîs_exi°
 ){

216 
	`sqlôeVdbeAddOp
(
v
, 
OP_O≥nP£udo
, 
ﬁdIdx
, 0);

223 
	`sqlôeVdbeAddOp
(
v
, 
OP_Li°Rewöd
, 0, 0);

224 
íd
 = 
	`sqlôeVdbeMakeLabñ
(
v
);

229 if–
row_åiggîs_exi°
 ){

230 
addr
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_Li°Ród
, 0, 
íd
);

231 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 0, 0);

232 if–!
isVõw
 ){

233 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
pTab
->
iDb
, 0);

234 
	`sqlôeVdbeAddOp
(
v
, 
OP_O≥nRód
, 
iCur
, 
pTab
->
äum
);

236 
	`sqlôeVdbeAddOp
(
v
, 
OP_MoveTo
, 
iCur
, 0);

238 
	`sqlôeVdbeAddOp
(
v
, 
OP_Re˙o
, 
iCur
, 0);

239 
	`sqlôeVdbeAddOp
(
v
, 
OP_RowD©a
, 
iCur
, 0);

240 
	`sqlôeVdbeAddOp
(
v
, 
OP_PutI¡Key
, 
ﬁdIdx
, 0);

241 if–!
isVõw
 ){

242 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
, 0);

245 
	`sqlôeCodeRowTriggî
(
pP¨£
, 
TK_DELETE
, 0, 
TK_BEFORE
, 
pTab
, -1,

246 
ﬁdIdx
, (
pP¨£
->
åigSèck
)?pP¨£->åigSèck->
‹c⁄f
:
OE_DeÁu…
,

247 
addr
);

250 if–!
isVõw
 ){

257 
pP¨£
->
nTab
 = 
iCur
 + 1;

258 
	`sqlôeO≥nTabÀAndIndi˚s
(
pP¨£
, 
pTab
, 
iCur
);

262 if–!
row_åiggîs_exi°
 ){

263 
addr
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_Li°Ród
, 0, 
íd
);

267 
	`sqlôeGíî©eRowDñëe
(
db
, 
v
, 
pTab
, 
iCur
, 
pP¨£
->
åigSèck
==0);

273 if–
row_åiggîs_exi°
 ){

274 if–!
isVõw
 ){

275 
i
=1, 
pIdx
=
pTab
->
pIndex
;ÖIdx; i++,ÖIdxıIdx->
pNext
){

276 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
 + 
i
, 
pIdx
->
äum
);

278 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
, 0);

280 
	`sqlôeCodeRowTriggî
(
pP¨£
, 
TK_DELETE
, 0, 
TK_AFTER
, 
pTab
, -1,

281 
ﬁdIdx
, (
pP¨£
->
åigSèck
)?pP¨£->åigSèck->
‹c⁄f
:
OE_DeÁu…
,

282 
addr
);

286 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
addr
);

287 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
íd
);

288 
	`sqlôeVdbeAddOp
(
v
, 
OP_Li°Re£t
, 0, 0);

291 if–!
row_åiggîs_exi°
 ){

292 
i
=1, 
pIdx
=
pTab
->
pIndex
;ÖIdx; i++,ÖIdxıIdx->
pNext
){

293 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
 + 
i
, 
pIdx
->
äum
);

295 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
, 0);

296 
pP¨£
->
nTab
 = 
iCur
;

299 
	`sqlôeVdbeAddOp
(
v
, 
OP_SëCou¡s
, 0, 0);

300 
	`sqlôeEndWrôeO≥øti⁄
(
pP¨£
);

305 if–
db
->
Êags
 & 
SQLITE_Cou¡Rows
 ){

306 
	`sqlôeVdbeAddOp
(
v
, 
OP_CﬁumnName
, 0, 1);

307 
	`sqlôeVdbeCh™geP3
(
v
, -1, "row†dñëed", 
P3_STATIC
);

308 
	`sqlôeVdbeAddOp
(
v
, 
OP_CÆlback
, 1, 0);

311 
dñëe_‰om_˛ónup
:

313 
	`sqlôeSrcLi°Dñëe
(
pTabLi°
);

314 
	`sqlôeEx¥Dñëe
(
pWhîe
);

316 
	}
}

338 
	$sqlôeGíî©eRowDñëe
(

339 
sqlôe
 *
db
,

340 
Vdbe
 *
v
,

341 
TabÀ
 *
pTab
,

342 
iCur
,

343 
cou¡


345 
addr
;

346 
addr
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_NŸExi°s
, 
iCur
, 0);

347 
	`sqlôeGíî©eRowIndexDñëe
(
db
, 
v
, 
pTab
, 
iCur
, 0);

348 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dñëe
, 
iCur
,

349 (
cou¡
?
OPFLAG_NCHANGE
:0Ë| 
OPFLAG_CSCHANGE
);

350 
	`sqlôeVdbeCh™geP2
(
v
, 
addr
, 
	`sqlôeVdbeCuºítAddr
(v));

351 
	}
}

369 
	$sqlôeGíî©eRowIndexDñëe
(

370 
sqlôe
 *
db
,

371 
Vdbe
 *
v
,

372 
TabÀ
 *
pTab
,

373 
iCur
,

374 *
aIdxU£d


376 
i
;

377 
Index
 *
pIdx
;

379 
i
=1, 
pIdx
=
pTab
->
pIndex
;ÖIdx; i++,ÖIdxıIdx->
pNext
){

380 
j
;

381 if–
aIdxU£d
!=0 &&áIdxU£d[
i
-1]==0 ) ;

382 
	`sqlôeVdbeAddOp
(
v
, 
OP_Re˙o
, 
iCur
, 0);

383 
j
=0; j<
pIdx
->
nCﬁumn
; j++){

384 
idx
 = 
pIdx
->
aiCﬁumn
[
j
];

385 if–
idx
==
pTab
->
iPKey
 ){

386 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 
j
, 0);

388 
	`sqlôeVdbeAddOp
(
v
, 
OP_Cﬁumn
, 
iCur
, 
idx
);

391 
	`sqlôeVdbeAddOp
(
v
, 
OP_MakeIdxKey
, 
pIdx
->
nCﬁumn
, 0);

392 if–
db
->
fûe_f‹m©
>=4 ) 
	`sqlôeAddIdxKeyTy≥
(
v
, 
pIdx
);

393 
	`sqlôeVdbeAddOp
(
v
, 
OP_IdxDñëe
, 
iCur
+
i
, 0);

395 
	}
}

	@encode.c

20 
	~<°rög.h
>

21 
	~<as£π.h
>

123 
	$sqlôe_ícode_bö¨y
(c⁄° *
ö
, 
n
, *
out
){

124 
i
, 
j
, 
e
, 
m
;

125 
x
;

126 
˙t
[256];

127 if–
n
<=0 ){

128 if–
out
 ){

129 
out
[0] = 'x';

130 
out
[1] = 0;

134 
	`mem£t
(
˙t
, 0, (cnt));

135 
i
=
n
-1; i>=0; i--){ 
˙t
[
ö
[i]]++; }

136 
m
 = 
n
;

137 
i
=1; i<256; i++){

138 
sum
;

139 if–
i
=='\'' ) ;

140 
sum
 = 
˙t
[
i
] + cnt[(i+1)&0xff] + cnt[(i+'\'')&0xff];

141 if–
sum
<
m
 ){

142 
m
 = 
sum
;

143 
e
 = 
i
;

144 if–
m
==0 ) ;

147 if–
out
==0 ){

148  
n
+
m
+1;

150 
out
[0] = 
e
;

151 
j
 = 1;

152 
i
=0; i<
n
; i++){

153 
x
 = 
ö
[
i
] - 
e
;

154 if–
x
==0 || x==1 || x=='\''){

155 
out
[
j
++] = 1;

156 
x
++;

158 
out
[
j
++] = 
x
;

160 
out
[
j
] = 0;

161 
	`as£π
–
j
==
n
+
m
+1 );

162  
j
;

163 
	}
}

175 
	$sqlôe_decode_bö¨y
(c⁄° *
ö
, *
out
){

176 
i
, 
e
;

177 
c
;

178 
e
 = *(
ö
++);

179 
i
 = 0;

180  (
c
 = *(
ö
++))!=0 ){

181 if–
c
==1 ){

182 
c
 = *(
ö
++) - 1;

184 
out
[
i
++] = 
c
 + 
e
;

186  
i
;

187 
	}
}

189 #ifde‡
ENCODER_TEST


190 
	~<°dio.h
>

196 
	$maö
(
¨gc
, **
¨gv
){

197 
i
, 
j
, 
n
, 
m
, 
nOut
, 
nByãIn
, 
nByãOut
;

198 
ö
[30000];

199 
out
[33000];

201 
nByãIn
 = 
nByãOut
 = 0;

202 
i
=0; i<(
ö
); i++){

203 
	`¥ötf
("Te° %d: ", 
i
+1);

204 
n
 = 
	`ønd
(Ë% (
i
+1);

205 if–
i
%100==0 ){

206 
k
;

207 
j
=
k
=0; j<
n
; j++){

209 
ö
[
j
] = 
k
;

210 
k
 = (k+1)&0xff;

213 
j
=0; j<
n
; j++Ë
ö
[j] = 
	`ønd
() & 0xff;

215 
nByãIn
 +
n
;

216 
nOut
 = 
	`sqlôe_ícode_bö¨y
(
ö
, 
n
, 
out
);

217 
nByãOut
 +
nOut
;

218 if–
nOut
!=
	`°æí
(
out
) ){

219 
	`¥ötf
(" ERRORÑëu∫ vÆuêi†%d in°ód o‡%d\n", 
nOut
, 
	`°æí
(
out
));

220 
	`exô
(1);

222 if–
nOut
!=
	`sqlôe_ícode_bö¨y
(
ö
, 
n
, 0) ){

223 
	`¥ötf
(" ERRORáctual output size disagrees withÖredicted size\n");

224 
	`exô
(1);

226 
m
 = (256*
n
 + 1262)/253;

227 
	`¥ötf
("sizê%d->%d (max %d)", 
n
, 
	`°æí
(
out
)+1, 
m
);

228 if–
	`°æí
(
out
)+1>
m
 ){

229 
	`¥ötf
(" ERROR outputÅoo big\n");

230 
	`exô
(1);

232 
j
=0; 
out
[j]; j++){

233 if–
out
[
j
]=='\'' ){

234 
	`¥ötf
(" ERROR contains (')\n");

235 
	`exô
(1);

238 
j
 = 
	`sqlôe_decode_bö¨y
(
out
, out);

239 if–
j
!=
n
 ){

240 
	`¥ötf
(" ERROR decodêsizê%d\n", 
j
);

241 
	`exô
(1);

243 if–
	`memcmp
(
ö
, 
out
, 
n
)!=0 ){

244 
	`¥ötf
(" ERROR decode mismatch\n");

245 
	`exô
(1);

247 
	`¥ötf
(" OK\n");

249 
	`Ârötf
(
°dîr
,"Finished. TotalÉncoding: %d->%d bytes\n",

250 
nByãIn
, 
nByãOut
);

251 
	`Ârötf
(
°dîr
,"Avg size increase: %.3f%%\n",

252 (
nByãOut
-
nByãIn
)*100.0/()nByteIn);

253 
	}
}

	@expr.c

17 
	~"sqlôeI¡.h
"

18 
	~<˘y≥.h
>

25 
Ex¥
 *
	$sqlôeEx¥
(
›
, 
Ex¥
 *
pLe·
, Ex¥ *
pRight
, 
Tokí
 *
pTokí
){

26 
Ex¥
 *
pNew
;

27 
pNew
 = 
	`sqlôeMÆloc
–(
Ex¥
) );

28 if–
pNew
==0 ){

32 
pNew
->
›
 = op;

33 
pNew
->
pLe·
 =ÖLeft;

34 
pNew
->
pRight
 =ÖRight;

35 if–
pTokí
 ){

36 
	`as£π
–
pTokí
->
dyn
==0 );

37 
pNew
->
tokí
 = *
pTokí
;

38 
pNew
->
•™
 = *
pTokí
;

40 
	`as£π
–
pNew
->
tokí
.
dyn
==0 );

41 
	`as£π
–
pNew
->
tokí
.
z
==0 );

42 
	`as£π
–
pNew
->
tokí
.
n
==0 );

43 if–
pLe·
 && 
pRight
 ){

44 
	`sqlôeEx¥S∑n
(
pNew
, &
pLe·
->
•™
, &
pRight
->span);

46 
pNew
->
•™
 =ÖNew->
tokí
;

49  
pNew
;

50 
	}
}

56 
	$sqlôeEx¥S∑n
(
Ex¥
 *
pEx¥
, 
Tokí
 *
pLe·
, Tokí *
pRight
){

57 
	`as£π
–
pRight
!=0 );

58 
	`as£π
–
pLe·
!=0 );

60 if–
pEx¥
 && 
pRight
->
z
 && 
pLe·
->z ){

61 if–
pLe·
->
dyn
==0 && 
pRight
->dyn==0 ){

62 
pEx¥
->
•™
.
z
 = 
pLe·
->z;

63 
pEx¥
->
•™
.
n
 = 
pRight
->¿+ 
	`Addr
’Right->
z
Ë- Addr(
pLe·
->z);

65 
pEx¥
->
•™
.
z
 = 0;

68 
	}
}

74 
Ex¥
 *
	$sqlôeEx¥Fun˘i⁄
(
Ex¥Li°
 *
pLi°
, 
Tokí
 *
pTokí
){

75 
Ex¥
 *
pNew
;

76 
pNew
 = 
	`sqlôeMÆloc
–(
Ex¥
) );

77 if–
pNew
==0 ){

81 
pNew
->
›
 = 
TK_FUNCTION
;

82 
pNew
->
pLi°
 =ÖList;

83 if–
pTokí
 ){

84 
	`as£π
–
pTokí
->
dyn
==0 );

85 
pNew
->
tokí
 = *
pTokí
;

87 
pNew
->
tokí
.
z
 = 0;

89 
pNew
->
•™
 =ÖNew->
tokí
;

90  
pNew
;

91 
	}
}

96 
	$sqlôeEx¥Dñëe
(
Ex¥
 *
p
){

97 if–
p
==0 ) ;

98 if–
p
->
•™
.
dyn
 ) 
	`sqlôeFªe
((*Ì->•™.
z
);

99 if–
p
->
tokí
.
dyn
 ) 
	`sqlôeFªe
((*Ì->tokí.
z
);

100 
	`sqlôeEx¥Dñëe
(
p
->
pLe·
);

101 
	`sqlôeEx¥Dñëe
(
p
->
pRight
);

102 
	`sqlôeEx¥Li°Dñëe
(
p
->
pLi°
);

103 
	`sqlôeSñe˘Dñëe
(
p
->
pSñe˘
);

104 
	`sqlôeFªe
(
p
);

105 
	}
}

120 
Ex¥
 *
	$sqlôeEx¥Dup
(
Ex¥
 *
p
){

121 
Ex¥
 *
pNew
;

122 if–
p
==0 )  0;

123 
pNew
 = 
	`sqlôeMÆlocRaw
–(*
p
) );

124 if–
pNew
==0 )  0;

125 
	`mem˝y
(
pNew
, 
p
, (*pNew));

126 if–
p
->
tokí
.
z
!=0 ){

127 
pNew
->
tokí
.
z
 = 
	`sqlôeSåNDup
(
p
->tokí.z,Ö->tokí.
n
);

128 
pNew
->
tokí
.
dyn
 = 1;

130 
	`as£π
–
pNew
->
tokí
.
z
==0 );

132 
pNew
->
•™
.
z
 = 0;

133 
pNew
->
pLe·
 = 
	`sqlôeEx¥Dup
(
p
->pLeft);

134 
pNew
->
pRight
 = 
	`sqlôeEx¥Dup
(
p
->pRight);

135 
pNew
->
pLi°
 = 
	`sqlôeEx¥Li°Dup
(
p
->pList);

136 
pNew
->
pSñe˘
 = 
	`sqlôeSñe˘Dup
(
p
->pSelect);

137  
pNew
;

138 
	}
}

139 
	$sqlôeTokíC›y
(
Tokí
 *
pTo
, Tokí *
pFrom
){

140 if–
pTo
->
dyn
 ) 
	`sqlôeFªe
((*ÌTo->
z
);

141 if–
pFrom
->
z
 ){

142 
pTo
->
n
 = 
pFrom
->n;

143 
pTo
->
z
 = 
	`sqlôeSåNDup
(
pFrom
->z,ÖFrom->
n
);

144 
pTo
->
dyn
 = 1;

146 
pTo
->
z
 = 0;

148 
	}
}

149 
Ex¥Li°
 *
	$sqlôeEx¥Li°Dup
(
Ex¥Li°
 *
p
){

150 
Ex¥Li°
 *
pNew
;

151 
Ex¥Li°_ôem
 *
pIãm
;

152 
i
;

153 if–
p
==0 )  0;

154 
pNew
 = 
	`sqlôeMÆloc
( (*pNew) );

155 if–
pNew
==0 )  0;

156 
pNew
->
nEx¥
 =ÖNew->
nAŒoc
 = 
p
->nExpr;

157 
pNew
->
a
 = 
pIãm
 = 
	`sqlôeMÆloc
–
p
->
nEx¥
*(p->a[0]) );

158 if–
pIãm
==0 ){

159 
	`sqlôeFªe
(
pNew
);

162 
i
=0; i<
p
->
nEx¥
; i++, 
pIãm
++){

163 
Ex¥
 *
pNewEx¥
, *
pOldEx¥
;

164 
pIãm
->
pEx¥
 = 
pNewEx¥
 = 
	`sqlôeEx¥Dup
(
pOldEx¥
 = 
p
->
a
[
i
].pExpr);

165 if–
pOldEx¥
->
•™
.
z
!=0 && 
pNewEx¥
 ){

169 
	`sqlôeTokíC›y
(&
pNewEx¥
->
•™
, &
pOldEx¥
->span);

171 
	`as£π
–
pNewEx¥
==0 ||ÖNewEx¥->
•™
.
z
!=0

172 || 
pOldEx¥
->
•™
.
z
==0 || 
sqlôe_mÆloc_Áûed
 );

173 
pIãm
->
zName
 = 
	`sqlôeSåDup
(
p
->
a
[
i
].zName);

174 
pIãm
->
s‹tOrdî
 = 
p
->
a
[
i
].sortOrder;

175 
pIãm
->
isAgg
 = 
p
->
a
[
i
].isAgg;

176 
pIãm
->
d⁄e
 = 0;

178  
pNew
;

179 
	}
}

180 
SrcLi°
 *
	$sqlôeSrcLi°Dup
(
SrcLi°
 *
p
){

181 
SrcLi°
 *
pNew
;

182 
i
;

183 
nByã
;

184 if–
p
==0 )  0;

185 
nByã
 = (*
p
Ë+ (p->
nSrc
>0 ? ’->
a
[0]) * (p->nSrc-1) : 0);

186 
pNew
 = 
	`sqlôeMÆlocRaw
–
nByã
 );

187 if–
pNew
==0 )  0;

188 
pNew
->
nSrc
 =ÖNew->
nAŒoc
 = 
p
->nSrc;

189 
i
=0; i<
p
->
nSrc
; i++){

190 
SrcLi°_ôem
 *
pNewIãm
 = &
pNew
->
a
[
i
];

191 
SrcLi°_ôem
 *
pOldIãm
 = &
p
->
a
[
i
];

192 
pNewIãm
->
zD©aba£
 = 
	`sqlôeSåDup
(
pOldIãm
->zDatabase);

193 
pNewIãm
->
zName
 = 
	`sqlôeSåDup
(
pOldIãm
->zName);

194 
pNewIãm
->
zAlüs
 = 
	`sqlôeSåDup
(
pOldIãm
->zAlias);

195 
pNewIãm
->
joöty≥
 = 
pOldIãm
->jointype;

196 
pNewIãm
->
iCurs‹
 = 
pOldIãm
->iCursor;

197 
pNewIãm
->
pTab
 = 0;

198 
pNewIãm
->
pSñe˘
 = 
	`sqlôeSñe˘Dup
(
pOldIãm
->pSelect);

199 
pNewIãm
->
pOn
 = 
	`sqlôeEx¥Dup
(
pOldIãm
->pOn);

200 
pNewIãm
->
pUsög
 = 
	`sqlôeIdLi°Dup
(
pOldIãm
->pUsing);

202  
pNew
;

203 
	}
}

204 
IdLi°
 *
	$sqlôeIdLi°Dup
(
IdLi°
 *
p
){

205 
IdLi°
 *
pNew
;

206 
i
;

207 if–
p
==0 )  0;

208 
pNew
 = 
	`sqlôeMÆlocRaw
( (*pNew) );

209 if–
pNew
==0 )  0;

210 
pNew
->
nId
 =ÖNew->
nAŒoc
 = 
p
->nId;

211 
pNew
->
a
 = 
	`sqlôeMÆlocRaw
–
p
->
nId
*(p->a[0]) );

212 if–
pNew
->
a
==0 )  0;

213 
i
=0; i<
p
->
nId
; i++){

214 
IdLi°_ôem
 *
pNewIãm
 = &
pNew
->
a
[
i
];

215 
IdLi°_ôem
 *
pOldIãm
 = &
p
->
a
[
i
];

216 
pNewIãm
->
zName
 = 
	`sqlôeSåDup
(
pOldIãm
->zName);

217 
pNewIãm
->
idx
 = 
pOldIãm
->idx;

219  
pNew
;

220 
	}
}

221 
Sñe˘
 *
	$sqlôeSñe˘Dup
(
Sñe˘
 *
p
){

222 
Sñe˘
 *
pNew
;

223 if–
p
==0 )  0;

224 
pNew
 = 
	`sqlôeMÆlocRaw
–(*
p
) );

225 if–
pNew
==0 )  0;

226 
pNew
->
isDi°ö˘
 = 
p
->isDistinct;

227 
pNew
->
pELi°
 = 
	`sqlôeEx¥Li°Dup
(
p
->pEList);

228 
pNew
->
pSrc
 = 
	`sqlôeSrcLi°Dup
(
p
->pSrc);

229 
pNew
->
pWhîe
 = 
	`sqlôeEx¥Dup
(
p
->pWhere);

230 
pNew
->
pGroupBy
 = 
	`sqlôeEx¥Li°Dup
(
p
->pGroupBy);

231 
pNew
->
pHavög
 = 
	`sqlôeEx¥Dup
(
p
->pHaving);

232 
pNew
->
pOrdîBy
 = 
	`sqlôeEx¥Li°Dup
(
p
->pOrderBy);

233 
pNew
->
›
 = 
p
->op;

234 
pNew
->
pPri‹
 = 
	`sqlôeSñe˘Dup
(
p
->pPrior);

235 
pNew
->
nLimô
 = 
p
->nLimit;

236 
pNew
->
nOff£t
 = 
p
->nOffset;

237 
pNew
->
zSñe˘
 = 0;

238 
pNew
->
iLimô
 = -1;

239 
pNew
->
iOff£t
 = -1;

240  
pNew
;

241 
	}
}

248 
Ex¥Li°
 *
	$sqlôeEx¥Li°Aµíd
(
Ex¥Li°
 *
pLi°
, 
Ex¥
 *
pEx¥
, 
Tokí
 *
pName
){

249 if–
pLi°
==0 ){

250 
pLi°
 = 
	`sqlôeMÆloc
–(
Ex¥Li°
) );

251 if–
pLi°
==0 ){

255 
	`as£π
–
pLi°
->
nAŒoc
==0 );

257 if–
pLi°
->
nAŒoc
<ıLi°->
nEx¥
 ){

258 
pLi°
->
nAŒoc
 =ÖList->nAlloc*2 + 4;

259 
pLi°
->
a
 = 
	`sqlôeRóŒoc
’Li°->a,ÖLi°->
nAŒoc
*(pList->a[0]));

260 if–
pLi°
->
a
==0 ){

262 
pLi°
->
nEx¥
 =ÖLi°->
nAŒoc
 = 0;

263  
pLi°
;

266 
	`as£π
–
pLi°
->
a
!=0 );

267 if–
pEx¥
 || 
pName
 ){

268 
Ex¥Li°_ôem
 *
pIãm
 = &
pLi°
->
a
[pLi°->
nEx¥
++];

269 
	`mem£t
(
pIãm
, 0, (*pItem));

270 
pIãm
->
pEx¥
 =ÖExpr;

271 if–
pName
 ){

272 
	`sqlôeSëNSåög
(&
pIãm
->
zName
, 
pName
->
z
,ÖName->
n
, 0);

273 
	`sqlôeDequŸe
(
pIãm
->
zName
);

276  
pLi°
;

277 
	}
}

282 
	$sqlôeEx¥Li°Dñëe
(
Ex¥Li°
 *
pLi°
){

283 
i
;

284 if–
pLi°
==0 ) ;

285 
	`as£π
–
pLi°
->
a
!=0 || (pLi°->
nEx¥
==0 &&ÖLi°->
nAŒoc
==0) );

286 
	`as£π
–
pLi°
->
nEx¥
<ıLi°->
nAŒoc
 );

287 
i
=0; i<
pLi°
->
nEx¥
; i++){

288 
	`sqlôeEx¥Dñëe
(
pLi°
->
a
[
i
].
pEx¥
);

289 
	`sqlôeFªe
(
pLi°
->
a
[
i
].
zName
);

291 
	`sqlôeFªe
(
pLi°
->
a
);

292 
	`sqlôeFªe
(
pLi°
);

293 
	}
}

303 
	$sqlôeEx¥IsC⁄°™t
(
Ex¥
 *
p
){

304  
p
->
›
 ){

305 
TK_ID
:

306 
TK_COLUMN
:

307 
TK_DOT
:

308 
TK_FUNCTION
:

310 
TK_NULL
:

311 
TK_STRING
:

312 
TK_INTEGER
:

313 
TK_FLOAT
:

314 
TK_VARIABLE
:

317 if–
p
->
pLe·
 && !
	`sqlôeEx¥IsC⁄°™t
(p->pLeft) )  0;

318 if–
p
->
pRight
 && !
	`sqlôeEx¥IsC⁄°™t
(p->pRight) )  0;

319 if–
p
->
pLi°
 ){

320 
i
;

321 
i
=0; i<
p
->
pLi°
->
nEx¥
; i++){

322 if–!
	`sqlôeEx¥IsC⁄°™t
(
p
->
pLi°
->
a
[
i
].
pEx¥
) )  0;

325  
p
->
pLe·
!=0 ||Ö->
pRight
!=0 || (p->
pLi°
 &&Ö->pLi°->
nEx¥
>0);

329 
	}
}

337 
	$sqlôeEx¥IsI¡egî
(
Ex¥
 *
p
, *
pVÆue
){

338  
p
->
›
 ){

339 
TK_INTEGER
: {

340 if–
	`sqlôeFôsIn32Bôs
(
p
->
tokí
.
z
) ){

341 *
pVÆue
 = 
	`©oi
(
p
->
tokí
.
z
);

346 
TK_STRING
: {

347 c⁄° *
z
 = 
p
->
tokí
.z;

348 
n
 = 
p
->
tokí
.n;

349 if–
n
>0 && 
z
[0]=='-' ){ z++;Ç--; }

350  
n
>0 && *
z
 && 
	`isdigô
(*z) ){ z++;Ç--; }

351 if–
n
==0 && 
	`sqlôeFôsIn32Bôs
(
p
->
tokí
.
z
) ){

352 *
pVÆue
 = 
	`©oi
(
p
->
tokí
.
z
);

357 
TK_UPLUS
: {

358  
	`sqlôeEx¥IsI¡egî
(
p
->
pLe·
, 
pVÆue
);

360 
TK_UMINUS
: {

361 
v
;

362 if–
	`sqlôeEx¥IsI¡egî
(
p
->
pLe·
, &
v
) ){

363 *
pVÆue
 = -
v
;

371 
	}
}

376 
	$sqlôeIsRowid
(c⁄° *
z
){

377 if–
	`sqlôeSåICmp
(
z
, "_ROWID_")==0 )  1;

378 if–
	`sqlôeSåICmp
(
z
, "ROWID")==0 )  1;

379 if–
	`sqlôeSåICmp
(
z
, "OID")==0 )  1;

381 
	}
}

409 
	$lookupName
(

410 
P¨£
 *
pP¨£
,

411 
Tokí
 *
pDbTokí
,

412 
Tokí
 *
pTabÀTokí
,

413 
Tokí
 *
pCﬁumnTokí
,

414 
SrcLi°
 *
pSrcLi°
,

415 
Ex¥Li°
 *
pELi°
,

416 
Ex¥
 *
pEx¥


418 *
zDb
 = 0;

419 *
zTab
 = 0;

420 *
zCﬁ
 = 0;

421 
i
, 
j
;

422 
˙t
 = 0;

423 
˙tTab
 = 0;

424 
sqlôe
 *
db
 = 
pP¨£
->db;

426 
	`as£π
–
pCﬁumnTokí
 &&ÖCﬁumnTokí->
z
 );

427 if–
pDbTokí
 &&ÖDbTokí->
z
 ){

428 
zDb
 = 
	`sqlôeSåNDup
(
pDbTokí
->
z
,ÖDbTokí->
n
);

429 
	`sqlôeDequŸe
(
zDb
);

431 
zDb
 = 0;

433 if–
pTabÀTokí
 &&ÖTabÀTokí->
z
 ){

434 
zTab
 = 
	`sqlôeSåNDup
(
pTabÀTokí
->
z
,ÖTabÀTokí->
n
);

435 
	`sqlôeDequŸe
(
zTab
);

437 
	`as£π
–
zDb
==0 );

438 
zTab
 = 0;

440 
zCﬁ
 = 
	`sqlôeSåNDup
(
pCﬁumnTokí
->
z
,ÖCﬁumnTokí->
n
);

441 
	`sqlôeDequŸe
(
zCﬁ
);

442 if–
sqlôe_mÆloc_Áûed
 ){

445 
	`as£π
–
zTab
==0 || 
pELi°
==0 );

447 
pEx¥
->
iTabÀ
 = -1;

448 
i
=0; i<
pSrcLi°
->
nSrc
; i++){

449 
SrcLi°_ôem
 *
pIãm
 = &
pSrcLi°
->
a
[
i
];

450 
TabÀ
 *
pTab
 = 
pIãm
->pTab;

451 
Cﬁumn
 *
pCﬁ
;

453 if–
pTab
==0 ) ;

454 
	`as£π
–
pTab
->
nCﬁ
>0 );

455 if–
zTab
 ){

456 if–
pIãm
->
zAlüs
 ){

457 *
zTabName
 = 
pIãm
->
zAlüs
;

458 if–
	`sqlôeSåICmp
(
zTabName
, 
zTab
)!=0 ) ;

460 *
zTabName
 = 
pTab
->
zName
;

461 if–
zTabName
==0 || 
	`sqlôeSåICmp
(zTabName, 
zTab
)!=0 ) ;

462 if–
zDb
!=0 && 
	`sqlôeSåICmp
(
db
->
aDb
[
pTab
->
iDb
].
zName
, zDb)!=0 ){

467 if–0==(
˙tTab
++) ){

468 
pEx¥
->
iTabÀ
 = 
pIãm
->
iCurs‹
;

469 
pEx¥
->
iDb
 = 
pTab
->iDb;

471 
j
=0, 
pCﬁ
=
pTab
->
aCﬁ
; j<pTab->
nCﬁ
; j++,ÖCol++){

472 if–
	`sqlôeSåICmp
(
pCﬁ
->
zName
, 
zCﬁ
)==0 ){

473 
˙t
++;

474 
pEx¥
->
iTabÀ
 = 
pIãm
->
iCurs‹
;

475 
pEx¥
->
iDb
 = 
pTab
->iDb;

477 
pEx¥
->
iCﬁumn
 = 
j
==
pTab
->
iPKey
 ? -1 : j;

478 
pEx¥
->
d©aTy≥
 = 
pCﬁ
->
s‹tOrdî
 & 
SQLITE_SO_TYPEMASK
;

487 if–
zDb
==0 && 
zTab
!=0 && 
˙t
==0 && 
pP¨£
->
åigSèck
!=0 ){

488 
TriggîSèck
 *
pTriggîSèck
 = 
pP¨£
->
åigSèck
;

489 
TabÀ
 *
pTab
 = 0;

490 if–
pTriggîSèck
->
√wIdx
 !-1 && 
	`sqlôeSåICmp
("√w", 
zTab
) == 0 ){

491 
pEx¥
->
iTabÀ
 = 
pTriggîSèck
->
√wIdx
;

492 
	`as£π
–
pTriggîSèck
->
pTab
 );

493 
pTab
 = 
pTriggîSèck
->pTab;

494 }if–
pTriggîSèck
->
ﬁdIdx
 !-1 && 
	`sqlôeSåICmp
("ﬁd", 
zTab
) == 0 ){

495 
pEx¥
->
iTabÀ
 = 
pTriggîSèck
->
ﬁdIdx
;

496 
	`as£π
–
pTriggîSèck
->
pTab
 );

497 
pTab
 = 
pTriggîSèck
->pTab;

500 if–
pTab
 ){

501 
j
;

502 
Cﬁumn
 *
pCﬁ
 = 
pTab
->
aCﬁ
;

504 
pEx¥
->
iDb
 = 
pTab
->iDb;

505 
˙tTab
++;

506 
j
=0; j < 
pTab
->
nCﬁ
; j++, 
pCﬁ
++) {

507 if–
	`sqlôeSåICmp
(
pCﬁ
->
zName
, 
zCﬁ
)==0 ){

508 
˙t
++;

509 
pEx¥
->
iCﬁumn
 = 
j
==
pTab
->
iPKey
 ? -1 : j;

510 
pEx¥
->
d©aTy≥
 = 
pCﬁ
->
s‹tOrdî
 & 
SQLITE_SO_TYPEMASK
;

520 if–
˙t
==0 && 
˙tTab
==1 && 
	`sqlôeIsRowid
(
zCﬁ
) ){

521 
˙t
 = 1;

522 
pEx¥
->
iCﬁumn
 = -1;

523 
pEx¥
->
d©aTy≥
 = 
SQLITE_SO_NUM
;

538 if–
˙t
==0 && 
pELi°
!=0 ){

539 
j
=0; j<
pELi°
->
nEx¥
; j++){

540 *
zAs
 = 
pELi°
->
a
[
j
].
zName
;

541 if–
zAs
!=0 && 
	`sqlôeSåICmp
(zAs, 
zCﬁ
)==0 ){

542 
	`as£π
–
pEx¥
->
pLe·
==0 &&ÖEx¥->
pRight
==0 );

543 
pEx¥
->
›
 = 
TK_AS
;

544 
pEx¥
->
iCﬁumn
 = 
j
;

545 
pEx¥
->
pLe·
 = 
	`sqlôeEx¥Dup
(
pELi°
->
a
[
j
].pExpr);

546 
	`sqlôeFªe
(
zCﬁ
);

547 
	`as£π
–
zTab
==0 && 
zDb
==0 );

560 if–
˙t
==0 && 
zTab
==0 && 
pCﬁumnTokí
->
z
[0]=='"' ){

561 
	`sqlôeFªe
(
zCﬁ
);

569 if–
˙t
!=1 ){

570 *
z
 = 0;

571 *
zEº
;

572 
zEº
 = 
˙t
==0 ? "no such column: %s" : "ambiguous columnÇame: %s";

573 if–
zDb
 ){

574 
	`sqlôeSëSåög
(&
z
, 
zDb
, ".", 
zTab
, ".", 
zCﬁ
, 0);

575 }if–
zTab
 ){

576 
	`sqlôeSëSåög
(&
z
, 
zTab
, ".", 
zCﬁ
, 0);

578 
z
 = 
	`sqlôeSåDup
(
zCﬁ
);

580 
	`sqlôeEº‹Msg
(
pP¨£
, 
zEº
, 
z
);

581 
	`sqlôeFªe
(
z
);

586 
	`sqlôeFªe
(
zDb
);

587 
	`sqlôeFªe
(
zTab
);

588 
	`sqlôeFªe
(
zCﬁ
);

589 
	`sqlôeEx¥Dñëe
(
pEx¥
->
pLe·
);

590 
pEx¥
->
pLe·
 = 0;

591 
	`sqlôeEx¥Dñëe
(
pEx¥
->
pRight
);

592 
pEx¥
->
pRight
 = 0;

593 
pEx¥
->
›
 = 
TK_COLUMN
;

595  
˙t
!=1;

596 
	}
}

629 
	$sqlôeEx¥ResﬁveIds
(

630 
P¨£
 *
pP¨£
,

631 
SrcLi°
 *
pSrcLi°
,

632 
Ex¥Li°
 *
pELi°
,

633 
Ex¥
 *
pEx¥


635 
i
;

637 if–
pEx¥
==0 || 
pSrcLi°
==0 )  0;

638 
i
=0; i<
pSrcLi°
->
nSrc
; i++){

639 
	`as£π
–
pSrcLi°
->
a
[
i
].
iCurs‹
>=0 &&ÖSrcLi°->a[i].iCurs‹<
pP¨£
->
nTab
 );

641  
pEx¥
->
›
 ){

646 
TK_STRING
: {

647 if–
pEx¥
->
tokí
.
z
[0]=='\'' ) ;

652 
TK_ID
: {

653 if–
	`lookupName
(
pP¨£
, 0, 0, &
pEx¥
->
tokí
, 
pSrcLi°
, 
pELi°
,ÖExpr) ){

662 
TK_DOT
: {

663 
Tokí
 *
pCﬁumn
;

664 
Tokí
 *
pTabÀ
;

665 
Tokí
 *
pDb
;

666 
Ex¥
 *
pRight
;

668 
pRight
 = 
pEx¥
->pRight;

669 if–
pRight
->
›
==
TK_ID
 ){

670 
pDb
 = 0;

671 
pTabÀ
 = &
pEx¥
->
pLe·
->
tokí
;

672 
pCﬁumn
 = &
pRight
->
tokí
;

674 
	`as£π
–
pRight
->
›
==
TK_DOT
 );

675 
pDb
 = &
pEx¥
->
pLe·
->
tokí
;

676 
pTabÀ
 = &
pRight
->
pLe·
->
tokí
;

677 
pCﬁumn
 = &
pRight
->pRight->
tokí
;

679 if–
	`lookupName
(
pP¨£
, 
pDb
, 
pTabÀ
, 
pCﬁumn
, 
pSrcLi°
, 0, 
pEx¥
) ){

685 
TK_IN
: {

686 
Vdbe
 *
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

687 if–
v
==0 )  1;

688 if–
	`sqlôeEx¥ResﬁveIds
(
pP¨£
, 
pSrcLi°
, 
pELi°
, 
pEx¥
->
pLe·
) ){

691 if–
pEx¥
->
pSñe˘
 ){

698 
pEx¥
->
iTabÀ
 = 
pP¨£
->
nTab
++;

699 
	`sqlôeVdbeAddOp
(
v
, 
OP_O≥nTemp
, 
pEx¥
->
iTabÀ
, 1);

700 
	`sqlôeSñe˘
(
pP¨£
, 
pEx¥
->
pSñe˘
, 
SRT_Së
,ÖEx¥->
iTabÀ
, 0,0,0);

701 }if–
pEx¥
->
pLi°
 ){

707 
i
, 
iSë
;

708 
i
=0; i<
pEx¥
->
pLi°
->
nEx¥
; i++){

709 
Ex¥
 *
pE2
 = 
pEx¥
->
pLi°
->
a
[
i
].pExpr;

710 if–!
	`sqlôeEx¥IsC⁄°™t
(
pE2
) ){

711 
	`sqlôeEº‹Msg
(
pP¨£
,

715 if–
	`sqlôeEx¥Check
(
pP¨£
, 
pE2
, 0, 0) ){

719 
iSë
 = 
pEx¥
->
iTabÀ
 = 
pP¨£
->
nSë
++;

720 
i
=0; i<
pEx¥
->
pLi°
->
nEx¥
; i++){

721 
Ex¥
 *
pE2
 = 
pEx¥
->
pLi°
->
a
[
i
].pExpr;

722  
pE2
->
›
 ){

723 
TK_FLOAT
:

724 
TK_INTEGER
:

725 
TK_STRING
: {

726 
addr
;

727 
	`as£π
–
pE2
->
tokí
.
z
 );

728 
addr
 = 
	`sqlôeVdbeOp3
(
v
, 
OP_SëIn£π
, 
iSë
, 0,

729 
pE2
->
tokí
.
z
,ÖE2->tokí.
n
);

730 
	`sqlôeVdbeDequŸeP3
(
v
, 
addr
);

734 
	`sqlôeEx¥Code
(
pP¨£
, 
pE2
);

735 
	`sqlôeVdbeAddOp
(
v
, 
OP_SëIn£π
, 
iSë
, 0);

744 
TK_SELECT
: {

749 
pEx¥
->
iCﬁumn
 = 
pP¨£
->
nMem
++;

750 if–
	`sqlôeSñe˘
(
pP¨£
, 
pEx¥
->
pSñe˘
, 
SRT_Mem
,ÖEx¥->
iCﬁumn
,0,0,0) ){

758 if–
pEx¥
->
pLe·


759 && 
	`sqlôeEx¥ResﬁveIds
(
pP¨£
, 
pSrcLi°
, 
pELi°
, 
pEx¥
->
pLe·
) ){

762 if–
pEx¥
->
pRight


763 && 
	`sqlôeEx¥ResﬁveIds
(
pP¨£
, 
pSrcLi°
, 
pELi°
, 
pEx¥
->
pRight
) ){

766 if–
pEx¥
->
pLi°
 ){

767 
i
;

768 
Ex¥Li°
 *
pLi°
 = 
pEx¥
->pList;

769 
i
=0; i<
pLi°
->
nEx¥
; i++){

770 
Ex¥
 *
pArg
 = 
pLi°
->
a
[
i
].
pEx¥
;

771 if–
	`sqlôeEx¥ResﬁveIds
(
pP¨£
, 
pSrcLi°
, 
pELi°
, 
pArg
) ){

779 
	}
}

789 
	$gëFun˘i⁄Name
(
Ex¥
 *
pEx¥
, c⁄° **
pzName
, *
≤Name
){

790  
pEx¥
->
›
 ){

791 
TK_FUNCTION
: {

792 *
pzName
 = 
pEx¥
->
tokí
.
z
;

793 *
≤Name
 = 
pEx¥
->
tokí
.
n
;

796 
TK_LIKE
: {

797 *
pzName
 = "like";

798 *
≤Name
 = 4;

801 
TK_GLOB
: {

802 *
pzName
 = "glob";

803 *
≤Name
 = 4;

807 *
pzName
 = "can't happen";

808 *
≤Name
 = 12;

812 
	}
}

823 
	$sqlôeEx¥Check
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
, 
ÆlowAgg
, *
pIsAgg
){

824 
nEº
 = 0;

825 if–
pEx¥
==0 )  0;

826  
pEx¥
->
›
 ){

827 
TK_GLOB
:

828 
TK_LIKE
:

829 
TK_FUNCTION
: {

830 
n
 = 
pEx¥
->
pLi°
 ?ÖEx¥->pLi°->
nEx¥
 : 0;

831 
no_such_func
 = 0;

832 
wr⁄g_num_¨gs
 = 0;

833 
is_agg
 = 0;

834 
i
;

835 
nId
;

836 c⁄° *
zId
;

837 
FuncDef
 *
pDef
;

839 
	`gëFun˘i⁄Name
(
pEx¥
, &
zId
, &
nId
);

840 
pDef
 = 
	`sqlôeFödFun˘i⁄
(
pP¨£
->
db
, 
zId
, 
nId
, 
n
, 0);

841 if–
pDef
==0 ){

842 
pDef
 = 
	`sqlôeFödFun˘i⁄
(
pP¨£
->
db
, 
zId
, 
nId
, -1, 0);

843 if–
pDef
==0 ){

844 
no_such_func
 = 1;

846 
wr⁄g_num_¨gs
 = 1;

849 
is_agg
 = 
pDef
->
xFunc
==0;

851 if–
is_agg
 && !
ÆlowAgg
 ){

852 
	`sqlôeEº‹Msg
(
pP¨£
, "misu£ o‡aggªg©êfun˘i⁄ %.*s()", 
nId
, 
zId
);

853 
nEº
++;

854 
is_agg
 = 0;

855 }if–
no_such_func
 ){

856 
	`sqlôeEº‹Msg
(
pP¨£
, "nÿsuch fun˘i⁄: %.*s", 
nId
, 
zId
);

857 
nEº
++;

858 }if–
wr⁄g_num_¨gs
 ){

859 
	`sqlôeEº‹Msg
(
pP¨£
,"wrongÇumber ofárgumentsÅo function %.*s()",

860 
nId
, 
zId
);

861 
nEº
++;

863 if–
is_agg
 ){

864 
pEx¥
->
›
 = 
TK_AGG_FUNCTION
;

865 if–
pIsAgg
 ) *pIsAgg = 1;

867 
i
=0; 
nEº
==0 && i<
n
; i++){

868 
nEº
 = 
	`sqlôeEx¥Check
(
pP¨£
, 
pEx¥
->
pLi°
->
a
[
i
].pExpr,

869 
ÆlowAgg
 && !
is_agg
, 
pIsAgg
);

871 if–
pDef
==0 ){

873 }if–
pDef
->
d©aTy≥
>=0 ){

874 if–
pDef
->
d©aTy≥
<
n
 ){

875 
pEx¥
->
d©aTy≥
 =

876 
	`sqlôeEx¥Ty≥
(
pEx¥
->
pLi°
->
a
[
pDef
->
d©aTy≥
].pExpr);

878 
pEx¥
->
d©aTy≥
 = 
SQLITE_SO_NUM
;

880 }if–
pDef
->
d©aTy≥
==
SQLITE_ARGS
 ){

881 
pDef
->
d©aTy≥
 = 
SQLITE_SO_TEXT
;

882 
i
=0; i<
n
; i++){

883 if–
	`sqlôeEx¥Ty≥
(
pEx¥
->
pLi°
->
a
[
i
].pEx¥)==
SQLITE_SO_NUM
 ){

884 
pEx¥
->
d©aTy≥
 = 
SQLITE_SO_NUM
;

888 }if–
pDef
->
d©aTy≥
==
SQLITE_NUMERIC
 ){

889 
pEx¥
->
d©aTy≥
 = 
SQLITE_SO_NUM
;

891 
pEx¥
->
d©aTy≥
 = 
SQLITE_SO_TEXT
;

895 if–
pEx¥
->
pLe·
 ){

896 
nEº
 = 
	`sqlôeEx¥Check
(
pP¨£
, 
pEx¥
->
pLe·
, 
ÆlowAgg
, 
pIsAgg
);

898 if–
nEº
==0 && 
pEx¥
->
pRight
 ){

899 
nEº
 = 
	`sqlôeEx¥Check
(
pP¨£
, 
pEx¥
->
pRight
, 
ÆlowAgg
, 
pIsAgg
);

901 if–
nEº
==0 && 
pEx¥
->
pLi°
 ){

902 
n
 = 
pEx¥
->
pLi°
->
nEx¥
;

903 
i
;

904 
i
=0; 
nEº
==0 && i<
n
; i++){

905 
Ex¥
 *
pE2
 = 
pEx¥
->
pLi°
->
a
[
i
].pExpr;

906 
nEº
 = 
	`sqlôeEx¥Check
(
pP¨£
, 
pE2
, 
ÆlowAgg
, 
pIsAgg
);

912  
nEº
;

913 
	}
}

922 
	$sqlôeEx¥Ty≥
(
Ex¥
 *
p
){

923 if–
p
==0 )  
SQLITE_SO_NUM
;

924  
p
 ) Ö->
›
 ){

925 
TK_PLUS
:

926 
TK_MINUS
:

927 
TK_STAR
:

928 
TK_SLASH
:

929 
TK_AND
:

930 
TK_OR
:

931 
TK_ISNULL
:

932 
TK_NOTNULL
:

933 
TK_NOT
:

934 
TK_UMINUS
:

935 
TK_UPLUS
:

936 
TK_BITAND
:

937 
TK_BITOR
:

938 
TK_BITNOT
:

939 
TK_LSHIFT
:

940 
TK_RSHIFT
:

941 
TK_REM
:

942 
TK_INTEGER
:

943 
TK_FLOAT
:

944 
TK_IN
:

945 
TK_BETWEEN
:

946 
TK_GLOB
:

947 
TK_LIKE
:

948  
SQLITE_SO_NUM
;

950 
TK_STRING
:

951 
TK_NULL
:

952 
TK_CONCAT
:

953 
TK_VARIABLE
:

954  
SQLITE_SO_TEXT
;

956 
TK_LT
:

957 
TK_LE
:

958 
TK_GT
:

959 
TK_GE
:

960 
TK_NE
:

961 
TK_EQ
:

962 if–
	`sqlôeEx¥Ty≥
(
p
->
pLe·
)==
SQLITE_SO_NUM
 ){

963  
SQLITE_SO_NUM
;

965 
p
 =Ö->
pRight
;

968 
TK_AS
:

969 
p
 =Ö->
pLe·
;

972 
TK_COLUMN
:

973 
TK_FUNCTION
:

974 
TK_AGG_FUNCTION
:

975  
p
->
d©aTy≥
;

977 
TK_SELECT
:

978 
	`as£π
–
p
->
pSñe˘
 );

979 
	`as£π
–
p
->
pSñe˘
->
pELi°
 );

980 
	`as£π
–
p
->
pSñe˘
->
pELi°
->
nEx¥
>0 );

981 
p
 =Ö->
pSñe˘
->
pELi°
->
a
[0].
pEx¥
;

984 
TK_CASE
: {

985 if–
p
->
pRight
 && 
	`sqlôeEx¥Ty≥
’->pRight)==
SQLITE_SO_NUM
 ){

986  
SQLITE_SO_NUM
;

988 if–
p
->
pLi°
 ){

989 
i
;

990 
Ex¥Li°
 *
pLi°
 = 
p
->pList;

991 
i
=1; i<
pLi°
->
nEx¥
; i+=2){

992 if–
	`sqlôeEx¥Ty≥
(
pLi°
->
a
[
i
].
pEx¥
)==
SQLITE_SO_NUM
 ){

993  
SQLITE_SO_NUM
;

997  
SQLITE_SO_TEXT
;

1001 
	`as£π
–
p
->
›
==
TK_ABORT
 );

1004  
SQLITE_SO_NUM
;

1005 
	}
}

1011 
	$sqlôeEx¥Code
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
){

1012 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1013 
›
;

1014 if–
v
==0 || 
pEx¥
==0 ) ;

1015  
pEx¥
->
›
 ){

1016 
TK_PLUS
: 
›
 = 
OP_Add
; ;

1017 
TK_MINUS
: 
›
 = 
OP_Subåa˘
; ;

1018 
TK_STAR
: 
›
 = 
OP_Mu…ùly
; ;

1019 
TK_SLASH
: 
›
 = 
OP_Divide
; ;

1020 
TK_AND
: 
›
 = 
OP_And
; ;

1021 
TK_OR
: 
›
 = 
OP_Or
; ;

1022 
TK_LT
: 
›
 = 
OP_Lt
; ;

1023 
TK_LE
: 
›
 = 
OP_Le
; ;

1024 
TK_GT
: 
›
 = 
OP_Gt
; ;

1025 
TK_GE
: 
›
 = 
OP_Ge
; ;

1026 
TK_NE
: 
›
 = 
OP_Ne
; ;

1027 
TK_EQ
: 
›
 = 
OP_Eq
; ;

1028 
TK_ISNULL
: 
›
 = 
OP_IsNuŒ
; ;

1029 
TK_NOTNULL
: 
›
 = 
OP_NŸNuŒ
; ;

1030 
TK_NOT
: 
›
 = 
OP_NŸ
; ;

1031 
TK_UMINUS
: 
›
 = 
OP_Neg©ive
; ;

1032 
TK_BITAND
: 
›
 = 
OP_BôAnd
; ;

1033 
TK_BITOR
: 
›
 = 
OP_BôOr
; ;

1034 
TK_BITNOT
: 
›
 = 
OP_BôNŸ
; ;

1035 
TK_LSHIFT
: 
›
 = 
OP_Shi·Le·
; ;

1036 
TK_RSHIFT
: 
›
 = 
OP_Shi·Right
; ;

1037 
TK_REM
: 
›
 = 
OP_Remaödî
; ;

1040  
pEx¥
->
›
 ){

1041 
TK_COLUMN
: {

1042 if–
pP¨£
->
u£Agg
 ){

1043 
	`sqlôeVdbeAddOp
(
v
, 
OP_AggGë
, 0, 
pEx¥
->
iAgg
);

1044 }if–
pEx¥
->
iCﬁumn
>=0 ){

1045 
	`sqlôeVdbeAddOp
(
v
, 
OP_Cﬁumn
, 
pEx¥
->
iTabÀ
,ÖEx¥->
iCﬁumn
);

1047 
	`sqlôeVdbeAddOp
(
v
, 
OP_Re˙o
, 
pEx¥
->
iTabÀ
, 0);

1051 
TK_STRING
:

1052 
TK_FLOAT
:

1053 
TK_INTEGER
: {

1054 if–
pEx¥
->
›
==
TK_INTEGER
 && 
	`sqlôeFôsIn32Bôs
’Ex¥->
tokí
.
z
) ){

1055 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
	`©oi
(
pEx¥
->
tokí
.
z
), 0);

1057 
	`sqlôeVdbeAddOp
(
v
, 
OP_Såög
, 0, 0);

1059 
	`as£π
–
pEx¥
->
tokí
.
z
 );

1060 
	`sqlôeVdbeCh™geP3
(
v
, -1, 
pEx¥
->
tokí
.
z
,ÖEx¥->tokí.
n
);

1061 
	`sqlôeVdbeDequŸeP3
(
v
, -1);

1064 
TK_NULL
: {

1065 
	`sqlôeVdbeAddOp
(
v
, 
OP_Såög
, 0, 0);

1068 
TK_VARIABLE
: {

1069 
	`sqlôeVdbeAddOp
(
v
, 
OP_V¨übÀ
, 
pEx¥
->
iTabÀ
, 0);

1072 
TK_LT
:

1073 
TK_LE
:

1074 
TK_GT
:

1075 
TK_GE
:

1076 
TK_NE
:

1077 
TK_EQ
: {

1078 if–
pP¨£
->
db
->
fûe_f‹m©
>=4 && 
	`sqlôeEx¥Ty≥
(
pEx¥
)==
SQLITE_SO_TEXT
 ){

1079 
›
 += 6;

1083 
TK_AND
:

1084 
TK_OR
:

1085 
TK_PLUS
:

1086 
TK_STAR
:

1087 
TK_MINUS
:

1088 
TK_REM
:

1089 
TK_BITAND
:

1090 
TK_BITOR
:

1091 
TK_SLASH
: {

1092 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1093 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pRight
);

1094 
	`sqlôeVdbeAddOp
(
v
, 
›
, 0, 0);

1097 
TK_LSHIFT
:

1098 
TK_RSHIFT
: {

1099 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pRight
);

1100 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1101 
	`sqlôeVdbeAddOp
(
v
, 
›
, 0, 0);

1104 
TK_CONCAT
: {

1105 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1106 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pRight
);

1107 
	`sqlôeVdbeAddOp
(
v
, 
OP_C⁄ˇt
, 2, 0);

1110 
TK_UMINUS
: {

1111 
	`as£π
–
pEx¥
->
pLe·
 );

1112 if–
pEx¥
->
pLe·
->
›
==
TK_FLOAT
 ||ÖEx¥->pLe·->›==
TK_INTEGER
 ){

1113 
Tokí
 *
p
 = &
pEx¥
->
pLe·
->
tokí
;

1114 *
z
 = 
	`sqlôeMÆloc
–
p
->
n
 + 2 );

1115 
	`•rötf
(
z
, "-%.*s", 
p
->
n
,Ö->z);

1116 if–
pEx¥
->
pLe·
->
›
==
TK_INTEGER
 && 
	`sqlôeFôsIn32Bôs
(
z
) ){

1117 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
	`©oi
(
z
), 0);

1119 
	`sqlôeVdbeAddOp
(
v
, 
OP_Såög
, 0, 0);

1121 
	`sqlôeVdbeCh™geP3
(
v
, -1, 
z
, 
p
->
n
+1);

1122 
	`sqlôeFªe
(
z
);

1127 
TK_BITNOT
:

1128 
TK_NOT
: {

1129 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1130 
	`sqlôeVdbeAddOp
(
v
, 
›
, 0, 0);

1133 
TK_ISNULL
:

1134 
TK_NOTNULL
: {

1135 
de°
;

1136 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 1, 0);

1137 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1138 
de°
 = 
	`sqlôeVdbeCuºítAddr
(
v
) + 2;

1139 
	`sqlôeVdbeAddOp
(
v
, 
›
, 1, 
de°
);

1140 
	`sqlôeVdbeAddOp
(
v
, 
OP_AddImm
, -1, 0);

1143 
TK_AGG_FUNCTION
: {

1144 
	`sqlôeVdbeAddOp
(
v
, 
OP_AggGë
, 0, 
pEx¥
->
iAgg
);

1147 
TK_GLOB
:

1148 
TK_LIKE
:

1149 
TK_FUNCTION
: {

1150 
Ex¥Li°
 *
pLi°
 = 
pEx¥
->pList;

1151 
nEx¥
 = 
pLi°
 ?ÖList->nExpr : 0;

1152 
FuncDef
 *
pDef
;

1153 
nId
;

1154 c⁄° *
zId
;

1155 
	`gëFun˘i⁄Name
(
pEx¥
, &
zId
, &
nId
);

1156 
pDef
 = 
	`sqlôeFödFun˘i⁄
(
pP¨£
->
db
, 
zId
, 
nId
, 
nEx¥
, 0);

1157 
	`as£π
–
pDef
!=0 );

1158 
nEx¥
 = 
	`sqlôeEx¥CodeEx¥Li°
(
pP¨£
, 
pLi°
, 
pDef
->
ö˛udeTy≥s
);

1159 
	`sqlôeVdbeOp3
(
v
, 
OP_Fun˘i⁄
, 
nEx¥
, 0, (*)
pDef
, 
P3_POINTER
);

1162 
TK_SELECT
: {

1163 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemLﬂd
, 
pEx¥
->
iCﬁumn
, 0);

1166 
TK_IN
: {

1167 
addr
;

1168 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 1, 0);

1169 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1170 
addr
 = 
	`sqlôeVdbeCuºítAddr
(
v
);

1171 
	`sqlôeVdbeAddOp
(
v
, 
OP_NŸNuŒ
, -1, 
addr
+4);

1172 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 2, 0);

1173 
	`sqlôeVdbeAddOp
(
v
, 
OP_Såög
, 0, 0);

1174 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
addr
+6);

1175 if–
pEx¥
->
pSñe˘
 ){

1176 
	`sqlôeVdbeAddOp
(
v
, 
OP_Found
, 
pEx¥
->
iTabÀ
, 
addr
+6);

1178 
	`sqlôeVdbeAddOp
(
v
, 
OP_SëFound
, 
pEx¥
->
iTabÀ
, 
addr
+6);

1180 
	`sqlôeVdbeAddOp
(
v
, 
OP_AddImm
, -1, 0);

1183 
TK_BETWEEN
: {

1184 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1185 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 0, 0);

1186 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLi°
->
a
[0].pExpr);

1187 
	`sqlôeVdbeAddOp
(
v
, 
OP_Ge
, 0, 0);

1188 
	`sqlôeVdbeAddOp
(
v
, 
OP_PuŒ
, 1, 0);

1189 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLi°
->
a
[1].pExpr);

1190 
	`sqlôeVdbeAddOp
(
v
, 
OP_Le
, 0, 0);

1191 
	`sqlôeVdbeAddOp
(
v
, 
OP_And
, 0, 0);

1194 
TK_UPLUS
:

1195 
TK_AS
: {

1196 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1199 
TK_CASE
: {

1200 
ex¥_íd_œbñ
;

1201 
jumpIn°
;

1202 
addr
;

1203 
nEx¥
;

1204 
i
;

1206 
	`as£π
(
pEx¥
->
pLi°
);

1207 
	`as£π
((
pEx¥
->
pLi°
->
nEx¥
 % 2) == 0);

1208 
	`as£π
(
pEx¥
->
pLi°
->
nEx¥
 > 0);

1209 
nEx¥
 = 
pEx¥
->
pLi°
->nExpr;

1210 
ex¥_íd_œbñ
 = 
	`sqlôeVdbeMakeLabñ
(
v
);

1211 if–
pEx¥
->
pLe·
 ){

1212 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1214 
i
=0; i<
nEx¥
; i=i+2){

1215 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLi°
->
a
[
i
].pExpr);

1216 if–
pEx¥
->
pLe·
 ){

1217 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 1, 1);

1218 
jumpIn°
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_Ne
, 1, 0);

1219 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 1, 0);

1221 
jumpIn°
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_IfNŸ
, 1, 0);

1223 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLi°
->
a
[
i
+1].pExpr);

1224 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
ex¥_íd_œbñ
);

1225 
addr
 = 
	`sqlôeVdbeCuºítAddr
(
v
);

1226 
	`sqlôeVdbeCh™geP2
(
v
, 
jumpIn°
, 
addr
);

1228 if–
pEx¥
->
pLe·
 ){

1229 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 1, 0);

1231 if–
pEx¥
->
pRight
 ){

1232 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pRight
);

1234 
	`sqlôeVdbeAddOp
(
v
, 
OP_Såög
, 0, 0);

1236 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
ex¥_íd_œbñ
);

1239 
TK_RAISE
: {

1240 if–!
pP¨£
->
åigSèck
 ){

1241 
	`sqlôeEº‹Msg
(
pP¨£
,

1243 
pP¨£
->
nEº
++;

1246 if–
pEx¥
->
iCﬁumn
 =
OE_Rﬁlback
 ||

1247 
pEx¥
->
iCﬁumn
 =
OE_Ab‹t
 ||

1248 
pEx¥
->
iCﬁumn
 =
OE_Faû
 ){

1249 
	`sqlôeVdbeOp3
(
v
, 
OP_HÆt
, 
SQLITE_CONSTRAINT
, 
pEx¥
->
iCﬁumn
,

1250 
pEx¥
->
tokí
.
z
,ÖEx¥->tokí.
n
);

1251 
	`sqlôeVdbeDequŸeP3
(
v
, -1);

1253 
	`as£π
–
pEx¥
->
iCﬁumn
 =
OE_Ign‹e
 );

1254 
	`sqlôeVdbeOp3
(
v
, 
OP_GŸo
, 0, 
pP¨£
->
åigSèck
->
ign‹eJump
,

1260 
	}
}

1270 
	$sqlôeEx¥CodeEx¥Li°
(

1271 
P¨£
 *
pP¨£
,

1272 
Ex¥Li°
 *
pLi°
,

1273 
ö˛udeTy≥s


1275 
Ex¥Li°_ôem
 *
pIãm
;

1276 
i
, 
n
;

1277 
Vdbe
 *
v
;

1278 if–
pLi°
==0 )  0;

1279 
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

1280 
n
 = 
pLi°
->
nEx¥
;

1281 
pIãm
=
pLi°
->
a
, 
i
=0; i<
n
; i++,ÖItem++){

1282 
	`sqlôeEx¥Code
(
pP¨£
, 
pIãm
->
pEx¥
);

1283 if–
ö˛udeTy≥s
 ){

1284 
	`sqlôeVdbeOp3
(
v
, 
OP_Såög
, 0, 0,

1285 
	`sqlôeEx¥Ty≥
(
pIãm
->
pEx¥
)==
SQLITE_SO_NUM
 ? "numeric" : "text",

1286 
P3_STATIC
);

1289  
ö˛udeTy≥s
 ? 
n
*2 :Ç;

1290 
	}
}

1300 
	$sqlôeEx¥IfTrue
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
, 
de°
, 
jumpIfNuŒ
){

1301 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1302 
›
 = 0;

1303 if–
v
==0 || 
pEx¥
==0 ) ;

1304  
pEx¥
->
›
 ){

1305 
TK_LT
: 
›
 = 
OP_Lt
; ;

1306 
TK_LE
: 
›
 = 
OP_Le
; ;

1307 
TK_GT
: 
›
 = 
OP_Gt
; ;

1308 
TK_GE
: 
›
 = 
OP_Ge
; ;

1309 
TK_NE
: 
›
 = 
OP_Ne
; ;

1310 
TK_EQ
: 
›
 = 
OP_Eq
; ;

1311 
TK_ISNULL
: 
›
 = 
OP_IsNuŒ
; ;

1312 
TK_NOTNULL
: 
›
 = 
OP_NŸNuŒ
; ;

1315  
pEx¥
->
›
 ){

1316 
TK_AND
: {

1317 
d2
 = 
	`sqlôeVdbeMakeLabñ
(
v
);

1318 
	`sqlôeEx¥IfFÆ£
(
pP¨£
, 
pEx¥
->
pLe·
, 
d2
, !
jumpIfNuŒ
);

1319 
	`sqlôeEx¥IfTrue
(
pP¨£
, 
pEx¥
->
pRight
, 
de°
, 
jumpIfNuŒ
);

1320 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
d2
);

1323 
TK_OR
: {

1324 
	`sqlôeEx¥IfTrue
(
pP¨£
, 
pEx¥
->
pLe·
, 
de°
, 
jumpIfNuŒ
);

1325 
	`sqlôeEx¥IfTrue
(
pP¨£
, 
pEx¥
->
pRight
, 
de°
, 
jumpIfNuŒ
);

1328 
TK_NOT
: {

1329 
	`sqlôeEx¥IfFÆ£
(
pP¨£
, 
pEx¥
->
pLe·
, 
de°
, 
jumpIfNuŒ
);

1332 
TK_LT
:

1333 
TK_LE
:

1334 
TK_GT
:

1335 
TK_GE
:

1336 
TK_NE
:

1337 
TK_EQ
: {

1338 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1339 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pRight
);

1340 if–
pP¨£
->
db
->
fûe_f‹m©
>=4 && 
	`sqlôeEx¥Ty≥
(
pEx¥
)==
SQLITE_SO_TEXT
 ){

1341 
›
 += 6;

1343 
	`sqlôeVdbeAddOp
(
v
, 
›
, 
jumpIfNuŒ
, 
de°
);

1346 
TK_ISNULL
:

1347 
TK_NOTNULL
: {

1348 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1349 
	`sqlôeVdbeAddOp
(
v
, 
›
, 1, 
de°
);

1352 
TK_IN
: {

1353 
addr
;

1354 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1355 
addr
 = 
	`sqlôeVdbeCuºítAddr
(
v
);

1356 
	`sqlôeVdbeAddOp
(
v
, 
OP_NŸNuŒ
, -1, 
addr
+3);

1357 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 1, 0);

1358 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
jumpIfNuŒ
 ? 
de°
 : 
addr
+4);

1359 if–
pEx¥
->
pSñe˘
 ){

1360 
	`sqlôeVdbeAddOp
(
v
, 
OP_Found
, 
pEx¥
->
iTabÀ
, 
de°
);

1362 
	`sqlôeVdbeAddOp
(
v
, 
OP_SëFound
, 
pEx¥
->
iTabÀ
, 
de°
);

1366 
TK_BETWEEN
: {

1367 
addr
;

1368 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1369 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 0, 0);

1370 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLi°
->
a
[0].pExpr);

1371 
addr
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_Lt
, !
jumpIfNuŒ
, 0);

1372 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLi°
->
a
[1].pExpr);

1373 
	`sqlôeVdbeAddOp
(
v
, 
OP_Le
, 
jumpIfNuŒ
, 
de°
);

1374 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 0, 0);

1375 
	`sqlôeVdbeCh™geP2
(
v
, 
addr
, 
	`sqlôeVdbeCuºítAddr
(v));

1376 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 1, 0);

1380 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
);

1381 
	`sqlôeVdbeAddOp
(
v
, 
OP_If
, 
jumpIfNuŒ
, 
de°
);

1385 
	}
}

1395 
	$sqlôeEx¥IfFÆ£
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
, 
de°
, 
jumpIfNuŒ
){

1396 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1397 
›
 = 0;

1398 if–
v
==0 || 
pEx¥
==0 ) ;

1399  
pEx¥
->
›
 ){

1400 
TK_LT
: 
›
 = 
OP_Ge
; ;

1401 
TK_LE
: 
›
 = 
OP_Gt
; ;

1402 
TK_GT
: 
›
 = 
OP_Le
; ;

1403 
TK_GE
: 
›
 = 
OP_Lt
; ;

1404 
TK_NE
: 
›
 = 
OP_Eq
; ;

1405 
TK_EQ
: 
›
 = 
OP_Ne
; ;

1406 
TK_ISNULL
: 
›
 = 
OP_NŸNuŒ
; ;

1407 
TK_NOTNULL
: 
›
 = 
OP_IsNuŒ
; ;

1410  
pEx¥
->
›
 ){

1411 
TK_AND
: {

1412 
	`sqlôeEx¥IfFÆ£
(
pP¨£
, 
pEx¥
->
pLe·
, 
de°
, 
jumpIfNuŒ
);

1413 
	`sqlôeEx¥IfFÆ£
(
pP¨£
, 
pEx¥
->
pRight
, 
de°
, 
jumpIfNuŒ
);

1416 
TK_OR
: {

1417 
d2
 = 
	`sqlôeVdbeMakeLabñ
(
v
);

1418 
	`sqlôeEx¥IfTrue
(
pP¨£
, 
pEx¥
->
pLe·
, 
d2
, !
jumpIfNuŒ
);

1419 
	`sqlôeEx¥IfFÆ£
(
pP¨£
, 
pEx¥
->
pRight
, 
de°
, 
jumpIfNuŒ
);

1420 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
d2
);

1423 
TK_NOT
: {

1424 
	`sqlôeEx¥IfTrue
(
pP¨£
, 
pEx¥
->
pLe·
, 
de°
, 
jumpIfNuŒ
);

1427 
TK_LT
:

1428 
TK_LE
:

1429 
TK_GT
:

1430 
TK_GE
:

1431 
TK_NE
:

1432 
TK_EQ
: {

1433 if–
pP¨£
->
db
->
fûe_f‹m©
>=4 && 
	`sqlôeEx¥Ty≥
(
pEx¥
)==
SQLITE_SO_TEXT
 ){

1439 
	`as£π
–
OP_Eq
+6 =
OP_SåEq
 );

1440 
›
 += 6;

1442 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1443 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pRight
);

1444 
	`sqlôeVdbeAddOp
(
v
, 
›
, 
jumpIfNuŒ
, 
de°
);

1447 
TK_ISNULL
:

1448 
TK_NOTNULL
: {

1449 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1450 
	`sqlôeVdbeAddOp
(
v
, 
›
, 1, 
de°
);

1453 
TK_IN
: {

1454 
addr
;

1455 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1456 
addr
 = 
	`sqlôeVdbeCuºítAddr
(
v
);

1457 
	`sqlôeVdbeAddOp
(
v
, 
OP_NŸNuŒ
, -1, 
addr
+3);

1458 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 1, 0);

1459 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
jumpIfNuŒ
 ? 
de°
 : 
addr
+4);

1460 if–
pEx¥
->
pSñe˘
 ){

1461 
	`sqlôeVdbeAddOp
(
v
, 
OP_NŸFound
, 
pEx¥
->
iTabÀ
, 
de°
);

1463 
	`sqlôeVdbeAddOp
(
v
, 
OP_SëNŸFound
, 
pEx¥
->
iTabÀ
, 
de°
);

1467 
TK_BETWEEN
: {

1468 
addr
;

1469 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1470 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 0, 0);

1471 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLi°
->
a
[0].pExpr);

1472 
addr
 = 
	`sqlôeVdbeCuºítAddr
(
v
);

1473 
	`sqlôeVdbeAddOp
(
v
, 
OP_Ge
, !
jumpIfNuŒ
, 
addr
+3);

1474 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 1, 0);

1475 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
de°
);

1476 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLi°
->
a
[1].pExpr);

1477 
	`sqlôeVdbeAddOp
(
v
, 
OP_Gt
, 
jumpIfNuŒ
, 
de°
);

1481 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
);

1482 
	`sqlôeVdbeAddOp
(
v
, 
OP_IfNŸ
, 
jumpIfNuŒ
, 
de°
);

1486 
	}
}

1492 
	$sqlôeEx¥Com∑ª
(
Ex¥
 *
pA
, Ex¥ *
pB
){

1493 
i
;

1494 if–
pA
==0 ){

1495  
pB
==0;

1496 }if–
pB
==0 ){

1499 if–
pA
->
›
!=
pB
->op )  0;

1500 if–!
	`sqlôeEx¥Com∑ª
(
pA
->
pLe·
, 
pB
->pLeft) )  0;

1501 if–!
	`sqlôeEx¥Com∑ª
(
pA
->
pRight
, 
pB
->pRight) )  0;

1502 if–
pA
->
pLi°
 ){

1503 if–
pB
->
pLi°
==0 )  0;

1504 if–
pA
->
pLi°
->
nEx¥
!=
pB
->pList->nExpr )  0;

1505 
i
=0; i<
pA
->
pLi°
->
nEx¥
; i++){

1506 if–!
	`sqlôeEx¥Com∑ª
(
pA
->
pLi°
->
a
[
i
].
pEx¥
, 
pB
->pList->a[i].pExpr) ){

1510 }if–
pB
->
pLi°
 ){

1513 if–
pA
->
pSñe˘
 || 
pB
->pSelect )  0;

1514 if–
pA
->
iTabÀ
!=
pB
->iTabÀ ||ÖA->
iCﬁumn
!=pB->iColumn )  0;

1515 if–
pA
->
tokí
.
z
 ){

1516 if–
pB
->
tokí
.
z
==0 )  0;

1517 if–
pB
->
tokí
.
n
!=
pA
->token.n )  0;

1518 if–
	`sqlôeSåNICmp
(
pA
->
tokí
.
z
, 
pB
->tokí.z,ÖB->tokí.
n
)!=0 )  0;

1521 
	}
}

1526 
	$≠≥ndAggInfo
(
P¨£
 *
pP¨£
){

1527 if–(
pP¨£
->
nAgg
 & 0x7)==0 ){

1528 
amt
 = 
pP¨£
->
nAgg
 + 8;

1529 
AggEx¥
 *
aAgg
 = 
	`sqlôeRóŒoc
(
pP¨£
->aAgg, 
amt
*(pParse->aAgg[0]));

1530 if–
aAgg
==0 ){

1533 
pP¨£
->
aAgg
 =áAgg;

1535 
	`mem£t
(&
pP¨£
->
aAgg
[pP¨£->
nAgg
], 0, (pParse->aAgg[0]));

1536  
pP¨£
->
nAgg
++;

1537 
	}
}

1550 
	$sqlôeEx¥A«lyzeAggªg©es
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
){

1551 
i
;

1552 
AggEx¥
 *
aAgg
;

1553 
nEº
 = 0;

1555 if–
pEx¥
==0 )  0;

1556  
pEx¥
->
›
 ){

1557 
TK_COLUMN
: {

1558 
aAgg
 = 
pP¨£
->aAgg;

1559 
i
=0; i<
pP¨£
->
nAgg
; i++){

1560 if–
aAgg
[
i
].
isAgg
 ) ;

1561 if–
aAgg
[
i
].
pEx¥
->
iTabÀ
==pExpr->iTable

1562 && 
aAgg
[
i
].
pEx¥
->
iCﬁumn
==pExpr->iColumn ){

1566 if–
i
>=
pP¨£
->
nAgg
 ){

1567 
i
 = 
	`≠≥ndAggInfo
(
pP¨£
);

1568 if–
i
<0 )  1;

1569 
pP¨£
->
aAgg
[
i
].
isAgg
 = 0;

1570 
pP¨£
->
aAgg
[
i
].
pEx¥
 =ÖExpr;

1572 
pEx¥
->
iAgg
 = 
i
;

1575 
TK_AGG_FUNCTION
: {

1576 
aAgg
 = 
pP¨£
->aAgg;

1577 
i
=0; i<
pP¨£
->
nAgg
; i++){

1578 if–!
aAgg
[
i
].
isAgg
 ) ;

1579 if–
	`sqlôeEx¥Com∑ª
(
aAgg
[
i
].
pEx¥
,ÖExpr) ){

1583 if–
i
>=
pP¨£
->
nAgg
 ){

1584 
i
 = 
	`≠≥ndAggInfo
(
pP¨£
);

1585 if–
i
<0 )  1;

1586 
pP¨£
->
aAgg
[
i
].
isAgg
 = 1;

1587 
pP¨£
->
aAgg
[
i
].
pEx¥
 =ÖExpr;

1588 
pP¨£
->
aAgg
[
i
].
pFunc
 = 
	`sqlôeFödFun˘i⁄
’P¨£->
db
,

1589 
pEx¥
->
tokí
.
z
,ÖEx¥->tokí.
n
,

1590 
pEx¥
->
pLi°
 ?ÖEx¥->pLi°->
nEx¥
 : 0, 0);

1592 
pEx¥
->
iAgg
 = 
i
;

1596 if–
pEx¥
->
pLe·
 ){

1597 
nEº
 = 
	`sqlôeEx¥A«lyzeAggªg©es
(
pP¨£
, 
pEx¥
->
pLe·
);

1599 if–
nEº
==0 && 
pEx¥
->
pRight
 ){

1600 
nEº
 = 
	`sqlôeEx¥A«lyzeAggªg©es
(
pP¨£
, 
pEx¥
->
pRight
);

1602 if–
nEº
==0 && 
pEx¥
->
pLi°
 ){

1603 
n
 = 
pEx¥
->
pLi°
->
nEx¥
;

1604 
i
;

1605 
i
=0; 
nEº
==0 && i<
n
; i++){

1606 
nEº
 = 
	`sqlôeEx¥A«lyzeAggªg©es
(
pP¨£
, 
pEx¥
->
pLi°
->
a
[
i
].pExpr);

1612  
nEº
;

1613 
	}
}

1630 
FuncDef
 *
	$sqlôeFödFun˘i⁄
(

1631 
sqlôe
 *
db
,

1632 c⁄° *
zName
,

1633 
nName
,

1634 
nArg
,

1635 
¸óãFœg


1637 
FuncDef
 *
pFú°
, *
p
, *
pMaybe
;

1638 
pFú°
 = 
p
 = (
FuncDef
*)
	`sqlôeHashFöd
(&
db
->
aFunc
, 
zName
, 
nName
);

1639 if–
p
 && !
¸óãFœg
 && 
nArg
<0 ){

1640  
p
 &&Ö->
xFunc
==0 &&Ö->
xSãp
==0 ){Ö =Ö->
pNext
; }

1641  
p
;

1643 
pMaybe
 = 0;

1644  
p
 &&Ö->
nArg
!=nArg ){

1645 if–
p
->
nArg
<0 && !
¸óãFœg
 && (p->
xFunc
 ||Ö->
xSãp
ËË
pMaybe
 =Ö;

1646 
p
 =Ö->
pNext
;

1648 if–
p
 && !
¸óãFœg
 &&Ö->
xFunc
==0 &&Ö->
xSãp
==0 ){

1651 if–
p
==0 && 
pMaybe
 ){

1652 
	`as£π
–
¸óãFœg
==0 );

1653  
pMaybe
;

1655 if–
p
==0 && 
¸óãFœg
 && (∞
	`sqlôeMÆloc
((*p)))!=0 ){

1656 
p
->
nArg
 =ÇArg;

1657 
p
->
pNext
 = 
pFú°
;

1658 
p
->
d©aTy≥
 = 
pFú°
 ?ÖFú°->d©aTy≥ : 
SQLITE_NUMERIC
;

1659 
	`sqlôeHashIn£π
(&
db
->
aFunc
, 
zName
, 
nName
, (*)
p
);

1661  
p
;

1662 
	}
}

	@func.c

21 
	~<˘y≥.h
>

22 
	~<m©h.h
>

23 
	~<°dlib.h
>

24 
	~<as£π.h
>

25 
	~"sqlôeI¡.h
"

26 
	~"os.h
"

31 
	$mömaxFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

32 c⁄° *
zBe°
;

33 
i
;

34 (*
xCom∑ª
)(const *, const *);

35 
mask
;

37 if–
¨gc
==0 ) ;

38 
mask
 = ()
	`sqlôe_u£r_d©a
(
c⁄ãxt
);

39 
zBe°
 = 
¨gv
[0];

40 if–
zBe°
==0 ) ;

41 if–
¨gv
[1][0]=='n' ){

42 
xCom∑ª
 = 
sqlôeCom∑ª
;

44 
xCom∑ª
 = 
°rcmp
;

46 
i
=2; i<
¨gc
; i+=2){

47 if–
¨gv
[
i
]==0 ) ;

48 if–(
	`xCom∑ª
(
¨gv
[
i
], 
zBe°
)^
mask
)<0 ){

49 
zBe°
 = 
¨gv
[
i
];

52 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
zBe°
, -1);

53 
	}
}

58 
	$ty≥ofFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

59 
	`as£π
–
¨gc
==2 );

60 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
¨gv
[1], -1);

61 
	}
}

66 
	$ÀngthFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

67 c⁄° *
z
;

68 
Àn
;

70 
	`as£π
–
¨gc
==1 );

71 
z
 = 
¨gv
[0];

72 if–
z
==0 ) ;

73 #ifde‡
SQLITE_UTF8


74 
Àn
=0; *
z
; z++){ if( (0xc0&*z)!=0x80 )Üen++; }

76 
Àn
 = 
	`°æí
(
z
);

78 
	`sqlôe_£t_ªsu…_öt
(
c⁄ãxt
, 
Àn
);

79 
	}
}

84 
	$absFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

85 c⁄° *
z
;

86 
	`as£π
–
¨gc
==1 );

87 
z
 = 
¨gv
[0];

88 if–
z
==0 ) ;

89 if–
z
[0]=='-' && 
	`isdigô
(z[1]) ) z++;

90 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
z
, -1);

91 
	}
}

96 
	$sub°rFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

97 c⁄° *
z
;

98 #ifde‡
SQLITE_UTF8


99 c⁄° *
z2
;

100 
i
;

102 
p1
, 
p2
, 
Àn
;

103 
	`as£π
–
¨gc
==3 );

104 
z
 = 
¨gv
[0];

105 if–
z
==0 ) ;

106 
p1
 = 
	`©oi
(
¨gv
[1]?argv[1]:0);

107 
p2
 = 
	`©oi
(
¨gv
[2]?argv[2]:0);

108 #ifde‡
SQLITE_UTF8


109 
Àn
=0, 
z2
=
z
; *z2; z2++){ if( (0xc0&*z2)!=0x80 )Üen++; }

111 
Àn
 = 
	`°æí
(
z
);

113 if–
p1
<0 ){

114 
p1
 +
Àn
;

115 if–
p1
<0 ){

116 
p2
 +
p1
;

117 
p1
 = 0;

119 }if–
p1
>0 ){

120 
p1
--;

122 if–
p1
+
p2
>
Àn
 ){

123 
p2
 = 
Àn
-
p1
;

125 #ifde‡
SQLITE_UTF8


126 
i
=0; i<
p1
 && 
z
[i]; i++){

127 if–(
z
[
i
]&0xc0)==0x80 ) 
p1
++;

129  
z
[
i
] && (z[i]&0xc0)==0x80 ){ i++; 
p1
++; }

130 ; 
i
<
p1
+
p2
 && 
z
[i]; i++){

131 if–(
z
[
i
]&0xc0)==0x80 ) 
p2
++;

133  
z
[
i
] && (z[i]&0xc0)==0x80 ){ i++; 
p2
++; }

135 if–
p2
<0 )Ö2 = 0;

136 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, &
z
[
p1
], 
p2
);

137 
	}
}

142 
	$roundFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

143 
n
;

144 
r
;

145 
zBuf
[100];

146 
	`as£π
–
¨gc
==1 ||árgc==2 );

147 if–
¨gv
[0]==0 || (
¨gc
==2 &&árgv[1]==0) ) ;

148 
n
 = 
¨gc
==2 ? 
	`©oi
(
¨gv
[1]) : 0;

149 if–
n
>30 )Ç = 30;

150 if–
n
<0 )Ç = 0;

151 
r
 = 
	`sqlôeAtoF
(
¨gv
[0], 0);

152 
	`•rötf
(
zBuf
,"%.*f",
n
,
r
);

153 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
zBuf
, -1);

154 
	}
}

159 
	$uµîFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

160 *
z
;

161 
i
;

162 if–
¨gc
<1 || 
¨gv
[0]==0 ) ;

163 
z
 = (*)
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
¨gv
[0], -1);

164 if–
z
==0 ) ;

165 
i
=0; 
z
[i]; i++){

166 if–
	`i¶owî
(
z
[
i
]ËËz[i] = 
	`touµî
(z[i]);

168 
	}
}

169 
	$lowîFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

170 *
z
;

171 
i
;

172 if–
¨gc
<1 || 
¨gv
[0]==0 ) ;

173 
z
 = (*)
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
¨gv
[0], -1);

174 if–
z
==0 ) ;

175 
i
=0; 
z
[i]; i++){

176 if–
	`isuµî
(
z
[
i
]ËËz[i] = 
	`tﬁowî
(z[i]);

178 
	}
}

185 
	$i‚uŒFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

186 
i
;

187 
i
=0; i<
¨gc
; i++){

188 if–
¨gv
[
i
] ){

189 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
¨gv
[
i
], -1);

193 
	}
}

198 
	$øndomFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

199 
r
;

200 
	`sqlôeR™dom√ss
((
r
), &r);

201 
	`sqlôe_£t_ªsu…_öt
(
c⁄ãxt
, 
r
);

202 
	}
}

208 
	$œ°_ö£π_rowid
(
sqlôe_func
 *
c⁄ãxt
, 
¨g
, c⁄° **
¨gv
){

209 
sqlôe
 *
db
 = 
	`sqlôe_u£r_d©a
(
c⁄ãxt
);

210 
	`sqlôe_£t_ªsu…_öt
(
c⁄ãxt
, 
	`sqlôe_œ°_ö£π_rowid
(
db
));

211 
	}
}

217 
	$ch™ge_cou¡
(
sqlôe_func
 *
c⁄ãxt
, 
¨g
, c⁄° **
¨gv
){

218 
sqlôe
 *
db
 = 
	`sqlôe_u£r_d©a
(
c⁄ãxt
);

219 
	`sqlôe_£t_ªsu…_öt
(
c⁄ãxt
, 
	`sqlôe_ch™ges
(
db
));

220 
	}
}

226 
	$œ°_°©emít_ch™ge_cou¡
(
sqlôe_func
 *
c⁄ãxt
, 
¨g
,

227 c⁄° **
¨gv
){

228 
sqlôe
 *
db
 = 
	`sqlôe_u£r_d©a
(
c⁄ãxt
);

229 
	`sqlôe_£t_ªsu…_öt
(
c⁄ãxt
, 
	`sqlôe_œ°_°©emít_ch™ges
(
db
));

230 
	}
}

241 
	$likeFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨g
, c⁄° **
¨gv
){

242 if–
¨gv
[0]==0 ||árgv[1]==0 ) ;

243 
	`sqlôe_£t_ªsu…_öt
(
c⁄ãxt
,

244 
	`sqlôeLikeCom∑ª
((c⁄° *)
¨gv
[0],

245 (c⁄° *)
¨gv
[1]));

246 
	}
}

257 
	$globFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨g
, c⁄° **
¨gv
){

258 if–
¨gv
[0]==0 ||árgv[1]==0 ) ;

259 
	`sqlôe_£t_ªsu…_öt
(
c⁄ãxt
,

260 
	`sqlôeGlobCom∑ª
((c⁄° *)
¨gv
[0],

261 (c⁄° *)
¨gv
[1]));

262 
	}
}

269 
	$nuŒifFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

270 if–
¨gv
[0]!=0 && 
	`sqlôeCom∑ª
(argv[0],argv[1])!=0 ){

271 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
¨gv
[0], -1);

273 
	}
}

279 
	$vîsi⁄Func
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

280 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
sqlôe_vîsi⁄
, -1);

281 
	}
}

294 
	$quŸeFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

295 if–
¨gc
<1 ) ;

296 if–
¨gv
[0]==0 ){

297 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, "NULL", 4);

298 }if–
	`sqlôeIsNumbî
(
¨gv
[0]) ){

299 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
¨gv
[0], -1);

301 
i
,
j
,
n
;

302 *
z
;

303 
i
=
n
=0; 
¨gv
[0][i]; i++){ if(árgv[0][i]=='\'' )Ç++; }

304 
z
 = 
	`sqlôeMÆloc
–
i
+
n
+3 );

305 if–
z
==0 ) ;

306 
z
[0] = '\'';

307 
i
=0, 
j
=1; 
¨gv
[0][i]; i++){

308 
z
[
j
++] = 
¨gv
[0][
i
];

309 if–
¨gv
[0][
i
]=='\'' ){

310 
z
[
j
++] = '\'';

313 
z
[
j
++] = '\'';

314 
z
[
j
] = 0;

315 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
z
, 
j
);

316 
	`sqlôeFªe
(
z
);

318 
	}
}

320 #ifde‡
SQLITE_SOUNDEX


324 
	$soundexFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

325 
zResu…
[8];

326 c⁄° *
zIn
;

327 
i
, 
j
;

328 c⁄° 
iCode
[] = {

338 
	`as£π
–
¨gc
==1 );

339 
zIn
 = 
¨gv
[0];

340 
i
=0; 
zIn
[i] && !
	`ißÕha
(zIn[i]); i++){}

341 if–
zIn
[
i
] ){

342 
zResu…
[0] = 
	`touµî
(
zIn
[
i
]);

343 
j
=1; j<4 && 
zIn
[
i
]; i++){

344 
code
 = 
iCode
[
zIn
[
i
]&0x7f];

345 if–
code
>0 ){

346 
zResu…
[
j
++] = 
code
 + '0';

349  
j
<4 ){

350 
zResu…
[
j
++] = '0';

352 
zResu…
[
j
] = 0;

353 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
zResu…
, 4);

355 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, "?000", 4);

357 
	}
}

360 #ifde‡
SQLITE_TEST


365 
	$øndSå
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

366 c⁄° 
zSrc
[] =

371 
iMö
, 
iMax
, 
n
, 
r
, 
i
;

372 
zBuf
[1000];

373 if–
¨gc
>=1 ){

374 
iMö
 = 
	`©oi
(
¨gv
[0]);

375 if–
iMö
<0 ) iMin = 0;

376 if–
iMö
>=(
zBuf
) ) iMin = (zBuf)-1;

378 
iMö
 = 1;

380 if–
¨gc
>=2 ){

381 
iMax
 = 
	`©oi
(
¨gv
[1]);

382 if–
iMax
<
iMö
 ) iMax = iMin;

383 if–
iMax
>=(
zBuf
) ) iMax = (zBuf)-1;

385 
iMax
 = 50;

387 
n
 = 
iMö
;

388 if–
iMax
>
iMö
 ){

389 
	`sqlôeR™dom√ss
((
r
), &r);

390 
r
 &= 0x7fffffff;

391 
n
 +
r
%(
iMax
 + 1 - 
iMö
);

393 
	`as£π
–
n
<(
zBuf
) );

394 
	`sqlôeR™dom√ss
(
n
, 
zBuf
);

395 
i
=0; i<
n
; i++){

396 
zBuf
[
i
] = 
zSrc
[zBuf[i]%((zSrc)-1)];

398 
zBuf
[
n
] = 0;

399 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
zBuf
, 
n
);

400 
	}
}

407 
SumCtx
 
	tSumCtx
;

408 
	sSumCtx
 {

409 
	msum
;

410 
	m˙t
;

416 
	$sumSãp
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

417 
SumCtx
 *
p
;

418 if–
¨gc
<1 ) ;

419 
p
 = 
	`sqlôe_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

420 if–
p
 && 
¨gv
[0] ){

421 
p
->
sum
 +
	`sqlôeAtoF
(
¨gv
[0], 0);

422 
p
->
˙t
++;

424 
	}
}

425 
	$sumFöÆize
(
sqlôe_func
 *
c⁄ãxt
){

426 
SumCtx
 *
p
;

427 
p
 = 
	`sqlôe_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

428 
	`sqlôe_£t_ªsu…_doubÀ
(
c⁄ãxt
, 
p
 ?Ö->
sum
 : 0.0);

429 
	}
}

430 
	$avgFöÆize
(
sqlôe_func
 *
c⁄ãxt
){

431 
SumCtx
 *
p
;

432 
p
 = 
	`sqlôe_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

433 if–
p
 &&Ö->
˙t
>0 ){

434 
	`sqlôe_£t_ªsu…_doubÀ
(
c⁄ãxt
, 
p
->
sum
/(Ì->
˙t
);

436 
	}
}

442 
StdDevCtx
 
	tStdDevCtx
;

443 
	sStdDevCtx
 {

444 
	msum
;

445 
	msum2
;

446 
	m˙t
;

453 
	$°dDevSãp
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

454 
StdDevCtx
 *
p
;

455 
x
;

456 if–
¨gc
<1 ) ;

457 
p
 = 
	`sqlôe_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

458 if–
p
 && 
¨gv
[0] ){

459 
x
 = 
	`sqlôeAtoF
(
¨gv
[0], 0);

460 
p
->
sum
 +
x
;

461 
p
->
sum2
 +
x
*x;

462 
p
->
˙t
++;

464 
	}
}

465 
	$°dDevFöÆize
(
sqlôe_func
 *
c⁄ãxt
){

466 
rN
 = 
	`sqlôe_aggªg©e_cou¡
(
c⁄ãxt
);

467 
StdDevCtx
 *
p
 = 
	`sqlôe_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

468 if–
p
 &&Ö->
˙t
>1 ){

469 
rC¡
 = 
˙t
;

470 
	`sqlôe_£t_ªsu…_doubÀ
(
c⁄ãxt
,

471 
	`sqπ
((
p
->
sum2
 -Ö->
sum
*p->sum/
rC¡
)/(rCnt-1.0)));

473 
	}
}

480 
Cou¡Ctx
 
	tCou¡Ctx
;

481 
	sCou¡Ctx
 {

482 
	mn
;

488 
	$cou¡Sãp
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

489 
Cou¡Ctx
 *
p
;

490 
p
 = 
	`sqlôe_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

491 if–(
¨gc
==0 || 
¨gv
[0]Ë&& 
p
 ){

492 
p
->
n
++;

494 
	}
}

495 
	$cou¡FöÆize
(
sqlôe_func
 *
c⁄ãxt
){

496 
Cou¡Ctx
 *
p
;

497 
p
 = 
	`sqlôe_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

498 
	`sqlôe_£t_ªsu…_öt
(
c⁄ãxt
, 
p
 ?Ö->
n
 : 0);

499 
	}
}

505 
MöMaxCtx
 
	tMöMaxCtx
;

506 
	sMöMaxCtx
 {

507 *
	mz
;

508 
	mzBuf
[28];

514 
	$mömaxSãp
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

515 
MöMaxCtx
 *
p
;

516 (*
xCom∑ª
)(const *, const *);

517 
mask
;

519 
	`as£π
–
¨gc
==2 );

520 if–
¨gv
[0]==0 ) ;

521 if–
¨gv
[1][0]=='n' ){

522 
xCom∑ª
 = 
sqlôeCom∑ª
;

524 
xCom∑ª
 = 
°rcmp
;

526 
mask
 = ()
	`sqlôe_u£r_d©a
(
c⁄ãxt
);

527 
	`as£π
–
mask
==0 || mask==-1 );

528 
p
 = 
	`sqlôe_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

529 if–
p
==0 || 
¨gc
<1 ) ;

530 if–
p
->
z
==0 || (
	`xCom∑ª
(
¨gv
[0],p->z)^
mask
)<0 ){

531 
Àn
;

532 if–
p
->
zBuf
[0] ){

533 
	`sqlôeFªe
(
p
->
z
);

535 
Àn
 = 
	`°æí
(
¨gv
[0]);

536 if–
Àn
 < (
p
->
zBuf
)-1 ){

537 
p
->
z
 = &p->
zBuf
[1];

538 
p
->
zBuf
[0] = 0;

540 
p
->
z
 = 
	`sqlôeMÆloc
–
Àn
+1 );

541 
p
->
zBuf
[0] = 1;

542 if–
p
->
z
==0 ) ;

544 
	`°r˝y
(
p
->
z
, 
¨gv
[0]);

546 
	}
}

547 
	$möMaxFöÆize
(
sqlôe_func
 *
c⁄ãxt
){

548 
MöMaxCtx
 *
p
;

549 
p
 = 
	`sqlôe_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

550 if–
p
 &&Ö->
z
 &&Ö->
zBuf
[0]<2 ){

551 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
p
->
z
, 
	`°æí
(p->z));

553 if–
p
 &&Ö->
zBuf
[0] ){

554 
	`sqlôeFªe
(
p
->
z
);

556 
	}
}

563 
	$sqlôeRegi°îBuûtöFun˘i⁄s
(
sqlôe
 *
db
){

565 *
zName
;

566 sig√d 
nArg
;

567 sig√d 
d©aTy≥
;

568 
u8
 
¨gTy≥
;

569 (*
xFunc
)(
sqlôe_func
*,,const **);

570 } 
aFuncs
[] = {

571 { "mö", -1, 
SQLITE_ARGS
, 0, 
mömaxFunc
 },

573 { "max", -1, 
SQLITE_ARGS
, 2, 
mömaxFunc
 },

575 { "ty≥of", 1, 
SQLITE_TEXT
, 0, 
ty≥ofFunc
 },

576 { "Àngth", 1, 
SQLITE_NUMERIC
, 0, 
ÀngthFunc
 },

577 { "sub°r", 3, 
SQLITE_TEXT
, 0, 
sub°rFunc
 },

578 { "abs", 1, 
SQLITE_NUMERIC
, 0, 
absFunc
 },

579 { "round", 1, 
SQLITE_NUMERIC
, 0, 
roundFunc
 },

580 { "round", 2, 
SQLITE_NUMERIC
, 0, 
roundFunc
 },

581 { "uµî", 1, 
SQLITE_TEXT
, 0, 
uµîFunc
 },

582 { "lowî", 1, 
SQLITE_TEXT
, 0, 
lowîFunc
 },

583 { "cﬂÀs˚", -1, 
SQLITE_ARGS
, 0, 
i‚uŒFunc
 },

586 { "i‚uŒ", 2, 
SQLITE_ARGS
, 0, 
i‚uŒFunc
 },

587 { "øndom", -1, 
SQLITE_NUMERIC
, 0, 
øndomFunc
 },

588 { "like", 2, 
SQLITE_NUMERIC
, 0, 
likeFunc
 },

589 { "glob", 2, 
SQLITE_NUMERIC
, 0, 
globFunc
 },

590 { "nuŒif", 2, 
SQLITE_ARGS
, 0, 
nuŒifFunc
 },

591 { "sqlôe_vîsi⁄",0,
SQLITE_TEXT
, 0, 
vîsi⁄Func
},

592 { "quŸe", 1, 
SQLITE_ARGS
, 0, 
quŸeFunc
 },

593 { "œ°_ö£π_rowid", 0, 
SQLITE_NUMERIC
, 1, 
œ°_ö£π_rowid
 },

594 { "ch™ge_cou¡", 0, 
SQLITE_NUMERIC
, 1, 
ch™ge_cou¡
 },

596 0, 
SQLITE_NUMERIC
, 1, 
œ°_°©emít_ch™ge_cou¡
 },

597 #ifde‡
SQLITE_SOUNDEX


598 { "soundex", 1, 
SQLITE_TEXT
, 0, 
soundexFunc
},

600 #ifde‡
SQLITE_TEST


601 { "ønd°r", 2, 
SQLITE_TEXT
, 0, 
øndSå
 },

605 *
zName
;

606 sig√d 
nArg
;

607 sig√d 
d©aTy≥
;

608 
u8
 
¨gTy≥
;

609 (*
xSãp
)(
sqlôe_func
*,,const **);

610 (*
xFöÆize
)(
sqlôe_func
*);

611 } 
aAggs
[] = {

612 { "mö", 1, 0, 0, 
mömaxSãp
, 
möMaxFöÆize
 },

613 { "max", 1, 0, 2, 
mömaxSãp
, 
möMaxFöÆize
 },

614 { "sum", 1, 
SQLITE_NUMERIC
, 0, 
sumSãp
, 
sumFöÆize
 },

615 { "avg", 1, 
SQLITE_NUMERIC
, 0, 
sumSãp
, 
avgFöÆize
 },

616 { "cou¡", 0, 
SQLITE_NUMERIC
, 0, 
cou¡Sãp
, 
cou¡FöÆize
 },

617 { "cou¡", 1, 
SQLITE_NUMERIC
, 0, 
cou¡Sãp
, 
cou¡FöÆize
 },

619 { "°ddev", 1, 
SQLITE_NUMERIC
, 0, 
°dDevSãp
, 
°dDevFöÆize
 },

622 c⁄° *
azTy≥Funcs
[] = { "min", "max", "typeof" };

623 
i
;

625 
i
=0; i<(
aFuncs
)/(aFuncs[0]); i++){

626 *
pArg
;

627  
aFuncs
[
i
].
¨gTy≥
 ){

628 0: 
pArg
 = 0; ;

629 1: 
pArg
 = 
db
; ;

630 2: 
pArg
 = (*)(-1); ;

632 
	`sqlôe_¸óã_fun˘i⁄
(
db
, 
aFuncs
[
i
].
zName
,

633 
aFuncs
[
i
].
nArg
,áFuncs[i].
xFunc
, 
pArg
);

634 if–
aFuncs
[
i
].
xFunc
 ){

635 
	`sqlôe_fun˘i⁄_ty≥
(
db
, 
aFuncs
[
i
].
zName
,áFuncs[i].
d©aTy≥
);

638 
i
=0; i<(
aAggs
)/(aAggs[0]); i++){

639 *
pArg
;

640  
aAggs
[
i
].
¨gTy≥
 ){

641 0: 
pArg
 = 0; ;

642 1: 
pArg
 = 
db
; ;

643 2: 
pArg
 = (*)(-1); ;

645 
	`sqlôe_¸óã_aggªg©e
(
db
, 
aAggs
[
i
].
zName
,

646 
aAggs
[
i
].
nArg
,áAggs[i].
xSãp
,áAggs[i].
xFöÆize
, 
pArg
);

647 
	`sqlôe_fun˘i⁄_ty≥
(
db
, 
aAggs
[
i
].
zName
,áAggs[i].
d©aTy≥
);

649 
i
=0; i<(
azTy≥Funcs
)/(azTypeFuncs[0]); i++){

650 
n
 = 
	`°æí
(
azTy≥Funcs
[
i
]);

651 
FuncDef
 *
p
 = 
	`sqlôeHashFöd
(&
db
->
aFunc
, 
azTy≥Funcs
[
i
], 
n
);

652  
p
 ){

653 
p
->
ö˛udeTy≥s
 = 1;

654 
p
 =Ö->
pNext
;

657 
	`sqlôeRegi°îD©eTimeFun˘i⁄s
(
db
);

658 
	}
}

	@hash.c

17 
	~"sqlôeI¡.h
"

18 
	~<as£π.h
>

32 
	$sqlôeHashInô
(
Hash
 *
√w
, 
keyCœss
, 
c›yKey
){

33 
	`as£π
–
√w
!=0 );

34 
	`as£π
–
keyCœss
>=
SQLITE_HASH_INT
 && keyCœss<=
SQLITE_HASH_BINARY
 );

35 
√w
->
keyCœss
 = keyClass;

36 
√w
->
c›yKey
 = copyKey &&

37 (
keyCœss
==
SQLITE_HASH_STRING
 || keyCœss==
SQLITE_HASH_BINARY
);

38 
√w
->
fú°
 = 0;

39 
√w
->
cou¡
 = 0;

40 
√w
->
htsize
 = 0;

41 
√w
->
ht
 = 0;

42 
	}
}

48 
	$sqlôeHashCÀ¨
(
Hash
 *
pH
){

49 
HashEÀm
 *
ñem
;

51 
	`as£π
–
pH
!=0 );

52 
ñem
 = 
pH
->
fú°
;

53 
pH
->
fú°
 = 0;

54 if–
pH
->
ht
 ) 
	`sqlôeFªe
(pH->ht);

55 
pH
->
ht
 = 0;

56 
pH
->
htsize
 = 0;

57  
ñem
 ){

58 
HashEÀm
 *
√xt_ñem
 = 
ñem
->
√xt
;

59 if–
pH
->
c›yKey
 && 
ñem
->
pKey
 ){

60 
	`sqlôeFªe
(
ñem
->
pKey
);

62 
	`sqlôeFªe
(
ñem
);

63 
ñem
 = 
√xt_ñem
;

65 
pH
->
cou¡
 = 0;

66 
	}
}

71 
	$ötHash
(c⁄° *
pKey
, 
nKey
){

72  
nKey
 ^ (nKey<<8) ^ (nKey>>8);

73 
	}
}

74 
	$ötCom∑ª
(c⁄° *
pKey1
, 
n1
, c⁄° *
pKey2
, 
n2
){

75  
n2
 - 
n1
;

76 
	}
}

82 
	$±rHash
(c⁄° *
pKey
, 
nKey
){

83 
u±r
 
x
 = 
	`Addr
(
pKey
);

84  
x
 ^ (x<<8) ^ (x>>8);

85 
	}
}

86 
	$±rCom∑ª
(c⁄° *
pKey1
, 
n1
, c⁄° *
pKey2
, 
n2
){

87 if–
pKey1
==
pKey2
 )  0;

88 if–
pKey1
<
pKey2
 )  -1;

90 
	}
}

96 
	$°rHash
(c⁄° *
pKey
, 
nKey
){

97  
	`sqlôeHashNoCa£
((c⁄° *)
pKey
, 
nKey
);

98 
	}
}

99 
	$°rCom∑ª
(c⁄° *
pKey1
, 
n1
, c⁄° *
pKey2
, 
n2
){

100 if–
n1
!=
n2
 ) Ç2-n1;

101  
	`sqlôeSåNICmp
((c⁄° *)
pKey1
,(c⁄° *)
pKey2
,
n1
);

102 
	}
}

107 
	$böHash
(c⁄° *
pKey
, 
nKey
){

108 
h
 = 0;

109 c⁄° *
z
 = (c⁄° *)
pKey
;

110  
nKey
-- > 0 ){

111 
h
 = (h<<3Ë^ h ^ *(
z
++);

113  
h
 & 0x7fffffff;

114 
	}
}

115 
	$böCom∑ª
(c⁄° *
pKey1
, 
n1
, c⁄° *
pKey2
, 
n2
){

116 if–
n1
!=
n2
 ) Ç2-n1;

117  
	`memcmp
(
pKey1
,
pKey2
,
n1
);

118 
	}
}

132 (*
	$hashFun˘i⁄
(
keyCœss
))(const *,){

133  
keyCœss
 ){

134 
SQLITE_HASH_INT
:  &
ötHash
;

136 
SQLITE_HASH_STRING
:  &
°rHash
;

137 
SQLITE_HASH_BINARY
:  &
böHash
;;

141 
	}
}

149 (*
	$com∑ªFun˘i⁄
(
keyCœss
))(const *,,const *,){

150  
keyCœss
 ){

151 
SQLITE_HASH_INT
:  &
ötCom∑ª
;

153 
SQLITE_HASH_STRING
:  &
°rCom∑ª
;

154 
SQLITE_HASH_BINARY
:  &
böCom∑ª
;

158 
	}
}

165 
	$ªhash
(
Hash
 *
pH
, 
√w_size
){

166 
_ht
 *
√w_ht
;

167 
HashEÀm
 *
ñem
, *
√xt_ñem
;

168 
HashEÀm
 *
x
;

169 (*
xHash
)(const *,);

171 
	`as£π
–(
√w_size
 & (new_size-1))==0 );

172 
√w_ht
 = (
_ht
 *)
	`sqlôeMÆloc
–
√w_size
*(_ht) );

173 if–
√w_ht
==0 ) ;

174 if–
pH
->
ht
 ) 
	`sqlôeFªe
(pH->ht);

175 
pH
->
ht
 = 
√w_ht
;

176 
pH
->
htsize
 = 
√w_size
;

177 
xHash
 = 
	`hashFun˘i⁄
(
pH
->
keyCœss
);

178 
ñem
=
pH
->
fú°
,ÖH->fú°=0;ÉÀm;ÉÀm = 
√xt_ñem
){

179 
h
 = (*
xHash
)(
ñem
->
pKey
,ÉÀm->
nKey
Ë& (
√w_size
-1);

180 
√xt_ñem
 = 
ñem
->
√xt
;

181 
x
 = 
√w_ht
[
h
].
chaö
;

182 if–
x
 ){

183 
ñem
->
√xt
 = 
x
;

184 
ñem
->
¥ev
 = 
x
->prev;

185 if–
x
->
¥ev
 ) x->¥ev->
√xt
 = 
ñem
;

186 
pH
->
fú°
 = 
ñem
;

187 
x
->
¥ev
 = 
ñem
;

189 
ñem
->
√xt
 = 
pH
->
fú°
;

190 if–
pH
->
fú°
 )ÖH->fú°->
¥ev
 = 
ñem
;

191 
ñem
->
¥ev
 = 0;

192 
pH
->
fú°
 = 
ñem
;

194 
√w_ht
[
h
].
chaö
 = 
ñem
;

195 
√w_ht
[
h
].
cou¡
++;

197 
	}
}

203 
HashEÀm
 *
	$födEÀmítGivíHash
(

204 c⁄° 
Hash
 *
pH
,

205 c⁄° *
pKey
,

206 
nKey
,

207 
h


209 
HashEÀm
 *
ñem
;

210 
cou¡
;

211 (*
xCom∑ª
)(const *,,const *,);

213 if–
pH
->
ht
 ){

214 
ñem
 = 
pH
->
ht
[
h
].
chaö
;

215 
cou¡
 = 
pH
->
ht
[
h
].count;

216 
xCom∑ª
 = 
	`com∑ªFun˘i⁄
(
pH
->
keyCœss
);

217  
cou¡
-- && 
ñem
 ){

218 if–(*
xCom∑ª
)(
ñem
->
pKey
,ñem->
nKey
,pKey,nKey)==0 ){

219  
ñem
;

221 
ñem
 =ÉÀm->
√xt
;

225 
	}
}

230 
	$ªmoveEÀmítGivíHash
(

231 
Hash
 *
pH
,

232 
HashEÀm
* 
ñem
,

233 
h


235 if–
ñem
->
¥ev
 ){

236 
ñem
->
¥ev
->
√xt
 =Élem->next;

238 
pH
->
fú°
 = 
ñem
->
√xt
;

240 if–
ñem
->
√xt
 ){

241 
ñem
->
√xt
->
¥ev
 =Élem->prev;

243 if–
pH
->
ht
[
h
].
chaö
==
ñem
 ){

244 
pH
->
ht
[
h
].
chaö
 = 
ñem
->
√xt
;

246 
pH
->
ht
[
h
].
cou¡
--;

247 if–
pH
->
ht
[
h
].
cou¡
<=0 ){

248 
pH
->
ht
[
h
].
chaö
 = 0;

250 if–
pH
->
c›yKey
 && 
ñem
->
pKey
 ){

251 
	`sqlôeFªe
(
ñem
->
pKey
);

253 
	`sqlôeFªe
–
ñem
 );

254 
pH
->
cou¡
--;

255 
	}
}

261 *
	$sqlôeHashFöd
(c⁄° 
Hash
 *
pH
, c⁄° *
pKey
, 
nKey
){

262 
h
;

263 
HashEÀm
 *
ñem
;

264 (*
xHash
)(const *,);

266 if–
pH
==0 ||ÖH->
ht
==0 )  0;

267 
xHash
 = 
	`hashFun˘i⁄
(
pH
->
keyCœss
);

268 
	`as£π
–
xHash
!=0 );

269 
h
 = (*
xHash
)(
pKey
,
nKey
);

270 
	`as£π
–(
pH
->
htsize
 & (pH->htsize-1))==0 );

271 
ñem
 = 
	`födEÀmítGivíHash
(
pH
,
pKey
,
nKey
, 
h
 & (pH->
htsize
-1));

272  
ñem
 ?ÉÀm->
d©a
 : 0;

273 
	}
}

290 *
	$sqlôeHashIn£π
(
Hash
 *
pH
, c⁄° *
pKey
, 
nKey
, *
d©a
){

291 
høw
;

292 
h
;

293 
HashEÀm
 *
ñem
;

294 
HashEÀm
 *
√w_ñem
;

295 (*
xHash
)(const *,);

297 
	`as£π
–
pH
!=0 );

298 
xHash
 = 
	`hashFun˘i⁄
(
pH
->
keyCœss
);

299 
	`as£π
–
xHash
!=0 );

300 
høw
 = (*
xHash
)(
pKey
, 
nKey
);

301 
	`as£π
–(
pH
->
htsize
 & (pH->htsize-1))==0 );

302 
h
 = 
høw
 & (
pH
->
htsize
-1);

303 
ñem
 = 
	`födEÀmítGivíHash
(
pH
,
pKey
,
nKey
,
h
);

304 if–
ñem
 ){

305 *
ﬁd_d©a
 = 
ñem
->
d©a
;

306 if–
d©a
==0 ){

307 
	`ªmoveEÀmítGivíHash
(
pH
,
ñem
,
h
);

309 
ñem
->
d©a
 = data;

311  
ﬁd_d©a
;

313 if–
d©a
==0 )  0;

314 
√w_ñem
 = (
HashEÀm
*)
	`sqlôeMÆloc
( (HashElem) );

315 if–
√w_ñem
==0 )  
d©a
;

316 if–
pH
->
c›yKey
 && 
pKey
!=0 ){

317 
√w_ñem
->
pKey
 = 
	`sqlôeMÆlocRaw
–
nKey
 );

318 if–
√w_ñem
->
pKey
==0 ){

319 
	`sqlôeFªe
(
√w_ñem
);

320  
d©a
;

322 
	`mem˝y
((*)
√w_ñem
->
pKey
,ÖKey, 
nKey
);

324 
√w_ñem
->
pKey
 = (*)pKey;

326 
√w_ñem
->
nKey
 =ÇKey;

327 
pH
->
cou¡
++;

328 if–
pH
->
htsize
==0 ) 
	`ªhash
(pH,8);

329 if–
pH
->
htsize
==0 ){

330 
pH
->
cou¡
 = 0;

331 
	`sqlôeFªe
(
√w_ñem
);

332  
d©a
;

334 if–
pH
->
cou¡
 >ÖH->
htsize
 ){

335 
	`ªhash
(
pH
,pH->
htsize
*2);

337 
	`as£π
–(
pH
->
htsize
 & (pH->htsize-1))==0 );

338 
h
 = 
høw
 & (
pH
->
htsize
-1);

339 
ñem
 = 
pH
->
ht
[
h
].
chaö
;

340 if–
ñem
 ){

341 
√w_ñem
->
√xt
 = 
ñem
;

342 
√w_ñem
->
¥ev
 = 
ñem
->prev;

343 if–
ñem
->
¥ev
 ){ÉÀm->¥ev->
√xt
 = 
√w_ñem
; }

344 { 
pH
->
fú°
 = 
√w_ñem
; }

345 
ñem
->
¥ev
 = 
√w_ñem
;

347 
√w_ñem
->
√xt
 = 
pH
->
fú°
;

348 
√w_ñem
->
¥ev
 = 0;

349 if–
pH
->
fú°
 ){ÖH->fú°->
¥ev
 = 
√w_ñem
; }

350 
pH
->
fú°
 = 
√w_ñem
;

352 
pH
->
ht
[
h
].
cou¡
++;

353 
pH
->
ht
[
h
].
chaö
 = 
√w_ñem
;

354 
√w_ñem
->
d©a
 = data;

356 
	}
}

	@hash.h

17 #i‚de‡
_SQLITE_HASH_H_


18 
	#_SQLITE_HASH_H_


	)

21 
Hash
 
	tHash
;

22 
HashEÀm
 
	tHashEÀm
;

32 
	sHash
 {

33 
	mkeyCœss
;

34 
	mc›yKey
;

35 
	mcou¡
;

36 
HashEÀm
 *
	mfú°
;

37 
	mhtsize
;

38 
	s_ht
 {

39 
	mcou¡
;

40 
HashEÀm
 *
	mchaö
;

41 } *
	mht
;

50 
	sHashEÀm
 {

51 
HashEÀm
 *
	m√xt
, *
	m¥ev
;

52 *
	md©a
;

53 *
	mpKey
; 
	mnKey
;

73 
	#SQLITE_HASH_INT
 1

	)

75 
	#SQLITE_HASH_STRING
 3

	)

76 
	#SQLITE_HASH_BINARY
 4

	)

81 
sqlôeHashInô
(
Hash
*, 
keyty≥
, 
c›yKey
);

82 *
sqlôeHashIn£π
(
Hash
*, c⁄° *
pKey
, 
nKey
, *
pD©a
);

83 *
sqlôeHashFöd
(c⁄° 
Hash
*, c⁄° *
pKey
, 
nKey
);

84 
sqlôeHashCÀ¨
(
Hash
*);

98 
	#sqlôeHashFú°
(
H
Ë((H)->
fú°
)

	)

99 
	#sqlôeHashNext
(
E
Ë((E)->
√xt
)

	)

100 
	#sqlôeHashD©a
(
E
Ë((E)->
d©a
)

	)

101 
	#sqlôeHashKey
(
E
Ë((E)->
pKey
)

	)

102 
	#sqlôeHashKeysize
(
E
Ë((E)->
nKey
)

	)

107 
	#sqlôeHashCou¡
(
H
Ë((H)->
cou¡
)

	)

	@insert.c

17 
	~"sqlôeI¡.h
"

86 
	$sqlôeIn£π
(

87 
P¨£
 *
pP¨£
,

88 
SrcLi°
 *
pTabLi°
,

89 
Ex¥Li°
 *
pLi°
,

90 
Sñe˘
 *
pSñe˘
,

91 
IdLi°
 *
pCﬁumn
,

92 
⁄Eº‹


94 
TabÀ
 *
pTab
;

95 *
zTab
;

96 c⁄° *
zDb
;

97 
i
, 
j
, 
idx
;

98 
Vdbe
 *
v
;

99 
Index
 *
pIdx
;

100 
nCﬁumn
;

101 
ba£
;

102 
iC⁄t
, 
iBªak
;

103 
sqlôe
 *
db
;

104 
keyCﬁumn
 = -1;

105 
ídOfLo›
;

106 
u£TempTabÀ
;

107 
§cTab
;

108 
iSñe˘Lo›
;

109 
iCÀ™up
;

110 
iIn£πBlock
;

111 
iC¡Mem
;

112 
isVõw
;

114 
row_åiggîs_exi°
 = 0;

115 
bef‹e_åiggîs
;

116 
a·î_åiggîs
;

117 
√wIdx
 = -1;

119 if–
pP¨£
->
nEº
 || 
sqlôe_mÆloc_Áûed
 ) 
ö£π_˛ónup
;

120 
db
 = 
pP¨£
->db;

124 
	`as£π
–
pTabLi°
->
nSrc
==1 );

125 
zTab
 = 
pTabLi°
->
a
[0].
zName
;

126 if–
zTab
==0 ) 
ö£π_˛ónup
;

127 
pTab
 = 
	`sqlôeSrcLi°Lookup
(
pP¨£
, 
pTabLi°
);

128 if–
pTab
==0 ){

129 
ö£π_˛ónup
;

131 
	`as£π
–
pTab
->
iDb
<
db
->
nDb
 );

132 
zDb
 = 
db
->
aDb
[
pTab
->
iDb
].
zName
;

143 
bef‹e_åiggîs
 = 
	`sqlôeTriggîsExi°
(
pP¨£
, 
pTab
->
pTriggî
, 
TK_INSERT
,

144 
TK_BEFORE
, 
TK_ROW
, 0);

145 
a·î_åiggîs
 = 
	`sqlôeTriggîsExi°
(
pP¨£
, 
pTab
->
pTriggî
, 
TK_INSERT
,

146 
TK_AFTER
, 
TK_ROW
, 0);

147 
row_åiggîs_exi°
 = 
bef‹e_åiggîs
 || 
a·î_åiggîs
;

148 
isVõw
 = 
pTab
->
pSñe˘
!=0;

149 if–
	`sqlôeIsRódO∆y
(
pP¨£
, 
pTab
, 
bef‹e_åiggîs
) ){

150 
ö£π_˛ónup
;

152 if–
pTab
==0 ) 
ö£π_˛ónup
;

156 if–
isVõw
 && 
	`sqlôeVõwGëCﬁumnNames
(
pP¨£
, 
pTab
) ){

157 
ö£π_˛ónup
;

162 
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

163 if–
v
==0 ) 
ö£π_˛ónup
;

164 
	`sqlôeBegöWrôeO≥øti⁄
(
pP¨£
, 
pSñe˘
 || 
row_åiggîs_exi°
, 
pTab
->
iDb
);

167 if–
row_åiggîs_exi°
 ){

168 
√wIdx
 = 
pP¨£
->
nTab
++;

179 if–
pSñe˘
 ){

182 
rc
, 
iInôCode
;

183 
iInôCode
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 0);

184 
iSñe˘Lo›
 = 
	`sqlôeVdbeCuºítAddr
(
v
);

185 
iIn£πBlock
 = 
	`sqlôeVdbeMakeLabñ
(
v
);

186 
rc
 = 
	`sqlôeSñe˘
(
pP¨£
, 
pSñe˘
, 
SRT_Subroutöe
, 
iIn£πBlock
, 0,0,0);

187 if–
rc
 || 
pP¨£
->
nEº
 || 
sqlôe_mÆloc_Áûed
 ) 
ö£π_˛ónup
;

188 
iCÀ™up
 = 
	`sqlôeVdbeMakeLabñ
(
v
);

189 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
iCÀ™up
);

190 
	`as£π
–
pSñe˘
->
pELi°
 );

191 
nCﬁumn
 = 
pSñe˘
->
pELi°
->
nEx¥
;

201 if–
row_åiggîs_exi°
 ){

202 
u£TempTabÀ
 = 1;

204 
addr
 = 
	`sqlôeVdbeFödOp
(
v
, 
OP_O≥nRód
, 
pTab
->
äum
);

205 
u£TempTabÀ
 = 0;

206 if–
addr
>0 ){

207 
VdbeOp
 *
pOp
 = 
	`sqlôeVdbeGëOp
(
v
, 
addr
-2);

208 if–
pOp
->
›code
==
OP_I¡egî
 &&ÖOp->
p1
==
pTab
->
iDb
 ){

209 
u£TempTabÀ
 = 1;

214 if–
u£TempTabÀ
 ){

218 
§cTab
 = 
pP¨£
->
nTab
++;

219 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
iIn£πBlock
);

220 
	`sqlôeVdbeAddOp
(
v
, 
OP_MakeRec‹d
, 
nCﬁumn
, 0);

221 
	`sqlôeVdbeAddOp
(
v
, 
OP_NewRe˙o
, 
§cTab
, 0);

222 
	`sqlôeVdbeAddOp
(
v
, 
OP_PuŒ
, 1, 0);

223 
	`sqlôeVdbeAddOp
(
v
, 
OP_PutI¡Key
, 
§cTab
, 0);

224 
	`sqlôeVdbeAddOp
(
v
, 
OP_Rëu∫
, 0, 0);

230 
	`sqlôeVdbeCh™geP2
(
v
, 
iInôCode
, 
	`sqlôeVdbeCuºítAddr
(v));

231 
	`sqlôeVdbeAddOp
(
v
, 
OP_O≥nTemp
, 
§cTab
, 0);

232 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
iSñe˘Lo›
);

233 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
iCÀ™up
);

235 
	`sqlôeVdbeCh™geP2
(
v
, 
iInôCode
, 
	`sqlôeVdbeCuºítAddr
(v));

241 
SrcLi°
 
dummy
;

242 
	`as£π
–
pLi°
!=0 );

243 
§cTab
 = -1;

244 
u£TempTabÀ
 = 0;

245 
	`as£π
–
pLi°
 );

246 
nCﬁumn
 = 
pLi°
->
nEx¥
;

247 
dummy
.
nSrc
 = 0;

248 
i
=0; i<
nCﬁumn
; i++){

249 if–
	`sqlôeEx¥ResﬁveIds
(
pP¨£
, &
dummy
, 0, 
pLi°
->
a
[
i
].
pEx¥
) ){

250 
ö£π_˛ónup
;

252 if–
	`sqlôeEx¥Check
(
pP¨£
, 
pLi°
->
a
[
i
].
pEx¥
, 0, 0) ){

253 
ö£π_˛ónup
;

261 if–
pCﬁumn
==0 && 
nCﬁumn
!=
pTab
->
nCﬁ
 ){

262 
	`sqlôeEº‹Msg
(
pP¨£
,

264 
pTabLi°
, 0, 
pTab
->
nCﬁ
, 
nCﬁumn
);

265 
ö£π_˛ónup
;

267 if–
pCﬁumn
!=0 && 
nCﬁumn
!ıCﬁumn->
nId
 ){

268 
	`sqlôeEº‹Msg
(
pP¨£
, "%d vÆue†f‹ %d cﬁumns", 
nCﬁumn
, 
pCﬁumn
->
nId
);

269 
ö£π_˛ónup
;

283 if–
pCﬁumn
 ){

284 
i
=0; i<
pCﬁumn
->
nId
; i++){

285 
pCﬁumn
->
a
[
i
].
idx
 = -1;

287 
i
=0; i<
pCﬁumn
->
nId
; i++){

288 
j
=0; j<
pTab
->
nCﬁ
; j++){

289 if–
	`sqlôeSåICmp
(
pCﬁumn
->
a
[
i
].
zName
, 
pTab
->
aCﬁ
[
j
].zName)==0 ){

290 
pCﬁumn
->
a
[
i
].
idx
 = 
j
;

291 if–
j
==
pTab
->
iPKey
 ){

292 
keyCﬁumn
 = 
i
;

297 if–
j
>=
pTab
->
nCﬁ
 ){

298 if–
	`sqlôeIsRowid
(
pCﬁumn
->
a
[
i
].
zName
) ){

299 
keyCﬁumn
 = 
i
;

301 
	`sqlôeEº‹Msg
(
pP¨£
, "table %S hasÇo columnÇamed %s",

302 
pTabLi°
, 0, 
pCﬁumn
->
a
[
i
].
zName
);

303 
pP¨£
->
nEº
++;

304 
ö£π_˛ónup
;

314 if–
pCﬁumn
==0 ){

315 
keyCﬁumn
 = 
pTab
->
iPKey
;

320 if–
row_åiggîs_exi°
 ){

321 
	`sqlôeVdbeAddOp
(
v
, 
OP_O≥nP£udo
, 
√wIdx
, 0);

326 if–
db
->
Êags
 & 
SQLITE_Cou¡Rows
 ){

327 
iC¡Mem
 = 
pP¨£
->
nMem
++;

328 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 0, 0);

329 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemSt‹e
, 
iC¡Mem
, 1);

333 if–!
row_åiggîs_exi°
 ){

334 
ba£
 = 
pP¨£
->
nTab
;

335 
idx
 = 
	`sqlôeO≥nTabÀAndIndi˚s
(
pP¨£
, 
pTab
, 
ba£
);

336 
pP¨£
->
nTab
 +
idx
;

344 if–
u£TempTabÀ
 ){

345 
iBªak
 = 
	`sqlôeVdbeMakeLabñ
(
v
);

346 
	`sqlôeVdbeAddOp
(
v
, 
OP_Rewöd
, 
§cTab
, 
iBªak
);

347 
iC⁄t
 = 
	`sqlôeVdbeCuºítAddr
(
v
);

348 }if–
pSñe˘
 ){

349 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
iSñe˘Lo›
);

350 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
iIn£πBlock
);

355 
ídOfLo›
 = 
	`sqlôeVdbeMakeLabñ
(
v
);

356 if–
bef‹e_åiggîs
 ){

364 if–
keyCﬁumn
<0 ){

365 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, -1, 0);

366 }if–
u£TempTabÀ
 ){

367 
	`sqlôeVdbeAddOp
(
v
, 
OP_Cﬁumn
, 
§cTab
, 
keyCﬁumn
);

368 }if–
pSñe˘
 ){

369 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 
nCﬁumn
 - 
keyCﬁumn
 - 1, 1);

371 
	`sqlôeEx¥Code
(
pP¨£
, 
pLi°
->
a
[
keyCﬁumn
].
pEx¥
);

372 
	`sqlôeVdbeAddOp
(
v
, 
OP_NŸNuŒ
, -1, 
	`sqlôeVdbeCuºítAddr
(v)+3);

373 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 1, 0);

374 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, -1, 0);

375 
	`sqlôeVdbeAddOp
(
v
, 
OP_Mu°BeI¡
, 0, 0);

380 
i
=0; i<
pTab
->
nCﬁ
; i++){

381 if–
pCﬁumn
==0 ){

382 
j
 = 
i
;

384 
j
=0; j<
pCﬁumn
->
nId
; j++){

385 if–
pCﬁumn
->
a
[
j
].
idx
==
i
 ) ;

388 if–
pCﬁumn
 && 
j
>ıCﬁumn->
nId
 ){

389 
	`sqlôeVdbeOp3
(
v
, 
OP_Såög
, 0, 0, 
pTab
->
aCﬁ
[
i
].
zDÊt
, 
P3_STATIC
);

390 }if–
u£TempTabÀ
 ){

391 
	`sqlôeVdbeAddOp
(
v
, 
OP_Cﬁumn
, 
§cTab
, 
j
);

392 }if–
pSñe˘
 ){

393 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 
nCﬁumn
-
j
-1, 1);

395 
	`sqlôeEx¥Code
(
pP¨£
, 
pLi°
->
a
[
j
].
pEx¥
);

398 
	`sqlôeVdbeAddOp
(
v
, 
OP_MakeRec‹d
, 
pTab
->
nCﬁ
, 0);

399 
	`sqlôeVdbeAddOp
(
v
, 
OP_PutI¡Key
, 
√wIdx
, 0);

402 if–
	`sqlôeCodeRowTriggî
(
pP¨£
, 
TK_INSERT
, 0, 
TK_BEFORE
, 
pTab
,

403 
√wIdx
, -1, 
⁄Eº‹
, 
ídOfLo›
) ){

404 
ö£π_˛ónup
;

411 if–
row_åiggîs_exi°
 && !
isVõw
 ){

412 
ba£
 = 
pP¨£
->
nTab
;

413 
idx
 = 
	`sqlôeO≥nTabÀAndIndi˚s
(
pP¨£
, 
pTab
, 
ba£
);

414 
pP¨£
->
nTab
 +
idx
;

422 if–!
isVõw
 ){

423 if–
keyCﬁumn
>=0 ){

424 if–
u£TempTabÀ
 ){

425 
	`sqlôeVdbeAddOp
(
v
, 
OP_Cﬁumn
, 
§cTab
, 
keyCﬁumn
);

426 }if–
pSñe˘
 ){

427 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 
nCﬁumn
 - 
keyCﬁumn
 - 1, 1);

429 
	`sqlôeEx¥Code
(
pP¨£
, 
pLi°
->
a
[
keyCﬁumn
].
pEx¥
);

434 
	`sqlôeVdbeAddOp
(
v
, 
OP_NŸNuŒ
, -1, 
	`sqlôeVdbeCuºítAddr
(v)+3);

435 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 1, 0);

436 
	`sqlôeVdbeAddOp
(
v
, 
OP_NewRe˙o
, 
ba£
, 0);

437 
	`sqlôeVdbeAddOp
(
v
, 
OP_Mu°BeI¡
, 0, 0);

439 
	`sqlôeVdbeAddOp
(
v
, 
OP_NewRe˙o
, 
ba£
, 0);

445 
i
=0; i<
pTab
->
nCﬁ
; i++){

446 if–
i
==
pTab
->
iPKey
 ){

451 
	`sqlôeVdbeAddOp
(
v
, 
OP_Såög
, 0, 0);

454 if–
pCﬁumn
==0 ){

455 
j
 = 
i
;

457 
j
=0; j<
pCﬁumn
->
nId
; j++){

458 if–
pCﬁumn
->
a
[
j
].
idx
==
i
 ) ;

461 if–
pCﬁumn
 && 
j
>ıCﬁumn->
nId
 ){

462 
	`sqlôeVdbeOp3
(
v
, 
OP_Såög
, 0, 0, 
pTab
->
aCﬁ
[
i
].
zDÊt
, 
P3_STATIC
);

463 }if–
u£TempTabÀ
 ){

464 
	`sqlôeVdbeAddOp
(
v
, 
OP_Cﬁumn
, 
§cTab
, 
j
);

465 }if–
pSñe˘
 ){

466 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 
i
+
nCﬁumn
-
j
, 1);

468 
	`sqlôeEx¥Code
(
pP¨£
, 
pLi°
->
a
[
j
].
pEx¥
);

475 
	`sqlôeGíî©eC⁄°øötChecks
(
pP¨£
, 
pTab
, 
ba£
, 0, 
keyCﬁumn
>=0,

476 0, 
⁄Eº‹
, 
ídOfLo›
);

477 
	`sqlôeCom∂ëeIn£πi⁄
(
pP¨£
, 
pTab
, 
ba£
, 0,0,0,

478 
a·î_åiggîs
 ? 
√wIdx
 : -1);

483 if–(
db
->
Êags
 & 
SQLITE_Cou¡Rows
)!=0 ){

484 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemIn¸
, 
iC¡Mem
, 0);

487 if–
row_åiggîs_exi°
 ){

489 if–!
isVõw
 ){

490 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
ba£
, 0);

491 
idx
=1, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, idx++){

492 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
idx
+
ba£
, 0);

497 if–
	`sqlôeCodeRowTriggî
(
pP¨£
, 
TK_INSERT
, 0, 
TK_AFTER
, 
pTab
, 
√wIdx
, -1,

498 
⁄Eº‹
, 
ídOfLo›
) ){

499 
ö£π_˛ónup
;

505 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
ídOfLo›
);

506 if–
u£TempTabÀ
 ){

507 
	`sqlôeVdbeAddOp
(
v
, 
OP_Next
, 
§cTab
, 
iC⁄t
);

508 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
iBªak
);

509 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
§cTab
, 0);

510 }if–
pSñe˘
 ){

511 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 
nCﬁumn
, 0);

512 
	`sqlôeVdbeAddOp
(
v
, 
OP_Rëu∫
, 0, 0);

513 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
iCÀ™up
);

516 if–!
row_åiggîs_exi°
 ){

518 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
ba£
, 0);

519 
idx
=1, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, idx++){

520 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
idx
+
ba£
, 0);

524 
	`sqlôeVdbeAddOp
(
v
, 
OP_SëCou¡s
, 0, 0);

525 
	`sqlôeEndWrôeO≥øti⁄
(
pP¨£
);

530 if–
db
->
Êags
 & 
SQLITE_Cou¡Rows
 ){

531 
	`sqlôeVdbeOp3
(
v
, 
OP_CﬁumnName
, 0, 1, "row†ö£πed", 
P3_STATIC
);

532 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemLﬂd
, 
iC¡Mem
, 0);

533 
	`sqlôeVdbeAddOp
(
v
, 
OP_CÆlback
, 1, 0);

536 
ö£π_˛ónup
:

537 
	`sqlôeSrcLi°Dñëe
(
pTabLi°
);

538 if–
pLi°
 ) 
	`sqlôeEx¥Li°Dñëe
(pList);

539 if–
pSñe˘
 ) 
	`sqlôeSñe˘Dñëe
(pSelect);

540 
	`sqlôeIdLi°Dñëe
(
pCﬁumn
);

541 
	}
}

622 
	$sqlôeGíî©eC⁄°øötChecks
(

623 
P¨£
 *
pP¨£
,

624 
TabÀ
 *
pTab
,

625 
ba£
,

626 *
aIdxU£d
,

627 
ª˙oChng
,

628 
isUpd©e
,

629 
ovîrideEº‹
,

630 
ign‹eDe°


632 
i
;

633 
Vdbe
 *
v
;

634 
nCﬁ
;

635 
⁄Eº‹
;

636 
addr
;

637 
exåa
;

638 
iCur
;

639 
Index
 *
pIdx
;

640 
£íRïœ˚
 = 0;

641 
jumpIn°1
, 
jumpIn°2
;

642 
c⁄tAddr
;

643 
hasTwoRe˙os
 = (
isUpd©e
 && 
ª˙oChng
);

645 
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

646 
	`as£π
–
v
!=0 );

647 
	`as£π
–
pTab
->
pSñe˘
==0 );

648 
nCﬁ
 = 
pTab
->nCol;

652 
i
=0; i<
nCﬁ
; i++){

653 if–
i
==
pTab
->
iPKey
 ){

656 
⁄Eº‹
 = 
pTab
->
aCﬁ
[
i
].
nŸNuŒ
;

657 if–
⁄Eº‹
==
OE_N⁄e
 ) ;

658 if–
ovîrideEº‹
!=
OE_DeÁu…
 ){

659 
⁄Eº‹
 = 
ovîrideEº‹
;

660 }if–
pP¨£
->
db
->
⁄Eº‹
!=
OE_DeÁu…
 ){

661 
⁄Eº‹
 = 
pP¨£
->
db
->onError;

662 }if–
⁄Eº‹
==
OE_DeÁu…
 ){

663 
⁄Eº‹
 = 
OE_Ab‹t
;

665 if–
⁄Eº‹
==
OE_Rïœ˚
 && 
pTab
->
aCﬁ
[
i
].
zDÊt
==0 ){

666 
⁄Eº‹
 = 
OE_Ab‹t
;

668 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 
nCﬁ
-1-
i
, 1);

669 
addr
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_NŸNuŒ
, 1, 0);

670  
⁄Eº‹
 ){

671 
OE_Rﬁlback
:

672 
OE_Ab‹t
:

673 
OE_Faû
: {

674 *
zMsg
 = 0;

675 
	`sqlôeVdbeAddOp
(
v
, 
OP_HÆt
, 
SQLITE_CONSTRAINT
, 
⁄Eº‹
);

676 
	`sqlôeSëSåög
(&
zMsg
, 
pTab
->
zName
, ".",ÖTab->
aCﬁ
[
i
].zName,

678 
	`sqlôeVdbeCh™geP3
(
v
, -1, 
zMsg
, 
P3_DYNAMIC
);

681 
OE_Ign‹e
: {

682 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 
nCﬁ
+1+
hasTwoRe˙os
, 0);

683 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
ign‹eDe°
);

686 
OE_Rïœ˚
: {

687 
	`sqlôeVdbeOp3
(
v
, 
OP_Såög
, 0, 0, 
pTab
->
aCﬁ
[
i
].
zDÊt
, 
P3_STATIC
);

688 
	`sqlôeVdbeAddOp
(
v
, 
OP_Push
, 
nCﬁ
-
i
, 0);

691 : 
	`as£π
(0);

693 
	`sqlôeVdbeCh™geP2
(
v
, 
addr
, 
	`sqlôeVdbeCuºítAddr
(v));

704 if–
ª˙oChng
 ){

705 
⁄Eº‹
 = 
pTab
->
keyC⁄f
;

706 if–
ovîrideEº‹
!=
OE_DeÁu…
 ){

707 
⁄Eº‹
 = 
ovîrideEº‹
;

708 }if–
pP¨£
->
db
->
⁄Eº‹
!=
OE_DeÁu…
 ){

709 
⁄Eº‹
 = 
pP¨£
->
db
->onError;

710 }if–
⁄Eº‹
==
OE_DeÁu…
 ){

711 
⁄Eº‹
 = 
OE_Ab‹t
;

714 if–
isUpd©e
 ){

715 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 
nCﬁ
+1, 1);

716 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 
nCﬁ
+1, 1);

717 
jumpIn°1
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_Eq
, 0, 0);

719 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 
nCﬁ
, 1);

720 
jumpIn°2
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_NŸExi°s
, 
ba£
, 0);

721  
⁄Eº‹
 ){

723 
⁄Eº‹
 = 
OE_Ab‹t
;

726 
OE_Rﬁlback
:

727 
OE_Ab‹t
:

728 
OE_Faû
: {

729 
	`sqlôeVdbeOp3
(
v
, 
OP_HÆt
, 
SQLITE_CONSTRAINT
, 
⁄Eº‹
,

730 "PRIMARY KEY mu° bêunique", 
P3_STATIC
);

733 
OE_Rïœ˚
: {

734 
	`sqlôeGíî©eRowIndexDñëe
(
pP¨£
->
db
, 
v
, 
pTab
, 
ba£
, 0);

735 if–
isUpd©e
 ){

736 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 
nCﬁ
+
hasTwoRe˙os
, 1);

737 
	`sqlôeVdbeAddOp
(
v
, 
OP_MoveTo
, 
ba£
, 0);

739 
£íRïœ˚
 = 1;

742 
OE_Ign‹e
: {

743 
	`as£π
–
£íRïœ˚
==0 );

744 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 
nCﬁ
+1+
hasTwoRe˙os
, 0);

745 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
ign‹eDe°
);

749 
c⁄tAddr
 = 
	`sqlôeVdbeCuºítAddr
(
v
);

750 
	`sqlôeVdbeCh™geP2
(
v
, 
jumpIn°2
, 
c⁄tAddr
);

751 if–
isUpd©e
 ){

752 
	`sqlôeVdbeCh™geP2
(
v
, 
jumpIn°1
, 
c⁄tAddr
);

753 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 
nCﬁ
+1, 1);

754 
	`sqlôeVdbeAddOp
(
v
, 
OP_MoveTo
, 
ba£
, 0);

762 
exåa
 = -1;

763 
iCur
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, iCur++){

764 if–
aIdxU£d
 &&áIdxU£d[
iCur
]==0 ) ;

765 
exåa
++;

768 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 
nCﬁ
+
exåa
, 1);

769 
i
=0; i<
pIdx
->
nCﬁumn
; i++){

770 
idx
 = 
pIdx
->
aiCﬁumn
[
i
];

771 if–
idx
==
pTab
->
iPKey
 ){

772 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 
i
+
exåa
+
nCﬁ
+1, 1);

774 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 
i
+
exåa
+
nCﬁ
-
idx
, 1);

777 
jumpIn°1
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_MakeIdxKey
, 
pIdx
->
nCﬁumn
, 0);

778 if–
pP¨£
->
db
->
fûe_f‹m©
>=4 ) 
	`sqlôeAddIdxKeyTy≥
(
v
, 
pIdx
);

781 
⁄Eº‹
 = 
pIdx
->onError;

782 if–
⁄Eº‹
==
OE_N⁄e
 ) ;

783 if–
ovîrideEº‹
!=
OE_DeÁu…
 ){

784 
⁄Eº‹
 = 
ovîrideEº‹
;

785 }if–
pP¨£
->
db
->
⁄Eº‹
!=
OE_DeÁu…
 ){

786 
⁄Eº‹
 = 
pP¨£
->
db
->onError;

787 }if–
⁄Eº‹
==
OE_DeÁu…
 ){

788 
⁄Eº‹
 = 
OE_Ab‹t
;

790 if–
£íRïœ˚
 ){

791 if–
⁄Eº‹
==
OE_Ign‹e
 ) onEº‹ = 
OE_Rïœ˚
;

792 if–
⁄Eº‹
==
OE_Faû
 ) onEº‹ = 
OE_Ab‹t
;

797 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 
exåa
+
nCﬁ
+1+
hasTwoRe˙os
, 1);

798 
jumpIn°2
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_IsUnique
, 
ba£
+
iCur
+1, 0);

801  
⁄Eº‹
 ){

802 
OE_Rﬁlback
:

803 
OE_Ab‹t
:

804 
OE_Faû
: {

805 
j
, 
n1
, 
n2
;

806 
zEºMsg
[200];

807 
	`°r˝y
(
zEºMsg
, 
pIdx
->
nCﬁumn
>1 ? "columns " : "column ");

808 
n1
 = 
	`°æí
(
zEºMsg
);

809 
j
=0; j<
pIdx
->
nCﬁumn
 && 
n1
<(
zEºMsg
)-30; j++){

810 *
zCﬁ
 = 
pTab
->
aCﬁ
[
pIdx
->
aiCﬁumn
[
j
]].
zName
;

811 
n2
 = 
	`°æí
(
zCﬁ
);

812 if–
j
>0 ){

813 
	`°r˝y
(&
zEºMsg
[
n1
], ", ");

814 
n1
 += 2;

816 if–
n1
+
n2
>(
zEºMsg
)-30 ){

817 
	`°r˝y
(&
zEºMsg
[
n1
], "...");

818 
n1
 += 3;

821 
	`°r˝y
(&
zEºMsg
[
n1
], 
zCﬁ
);

822 
n1
 +
n2
;

825 
	`°r˝y
(&
zEºMsg
[
n1
],

826 
pIdx
->
nCﬁumn
>1 ? "áreÇot unique" : " isÇot unique");

827 
	`sqlôeVdbeOp3
(
v
, 
OP_HÆt
, 
SQLITE_CONSTRAINT
, 
⁄Eº‹
, 
zEºMsg
, 0);

830 
OE_Ign‹e
: {

831 
	`as£π
–
£íRïœ˚
==0 );

832 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 
nCﬁ
+
exåa
+3+
hasTwoRe˙os
, 0);

833 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
ign‹eDe°
);

836 
OE_Rïœ˚
: {

837 
	`sqlôeGíî©eRowDñëe
(
pP¨£
->
db
, 
v
, 
pTab
, 
ba£
, 0);

838 if–
isUpd©e
 ){

839 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 
nCﬁ
+
exåa
+1+
hasTwoRe˙os
, 1);

840 
	`sqlôeVdbeAddOp
(
v
, 
OP_MoveTo
, 
ba£
, 0);

842 
£íRïœ˚
 = 1;

845 : 
	`as£π
(0);

847 
c⁄tAddr
 = 
	`sqlôeVdbeCuºítAddr
(
v
);

848 #i‡
NULL_DISTINCT_FOR_UNIQUE


849 
	`sqlôeVdbeCh™geP2
(
v
, 
jumpIn°1
, 
c⁄tAddr
);

851 
	`sqlôeVdbeCh™geP2
(
v
, 
jumpIn°2
, 
c⁄tAddr
);

853 
	}
}

865 
	$sqlôeCom∂ëeIn£πi⁄
(

866 
P¨£
 *
pP¨£
,

867 
TabÀ
 *
pTab
,

868 
ba£
,

869 *
aIdxU£d
,

870 
ª˙oChng
,

871 
isUpd©e
,

872 
√wIdx


874 
i
;

875 
Vdbe
 *
v
;

876 
nIdx
;

877 
Index
 *
pIdx
;

879 
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

880 
	`as£π
–
v
!=0 );

881 
	`as£π
–
pTab
->
pSñe˘
==0 );

882 
nIdx
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
,ÇIdx++){}

883 
i
=
nIdx
-1; i>=0; i--){

884 if–
aIdxU£d
 &&áIdxU£d[
i
]==0 ) ;

885 
	`sqlôeVdbeAddOp
(
v
, 
OP_IdxPut
, 
ba£
+
i
+1, 0);

887 
	`sqlôeVdbeAddOp
(
v
, 
OP_MakeRec‹d
, 
pTab
->
nCﬁ
, 0);

888 if–
√wIdx
>=0 ){

889 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 1, 0);

890 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 1, 0);

891 
	`sqlôeVdbeAddOp
(
v
, 
OP_PutI¡Key
, 
√wIdx
, 0);

893 
	`sqlôeVdbeAddOp
(
v
, 
OP_PutI¡Key
, 
ba£
,

894 (
pP¨£
->
åigSèck
?0:
OPFLAG_NCHANGE
) |

895 (
isUpd©e
?0:
OPFLAG_LASTROWID
Ë| 
OPFLAG_CSCHANGE
);

896 if–
isUpd©e
 && 
ª˙oChng
 ){

897 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 1, 0);

899 
	}
}

909 
	$sqlôeO≥nTabÀAndIndi˚s
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTab
, 
ba£
){

910 
i
;

911 
Index
 *
pIdx
;

912 
Vdbe
 *
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

913 
	`as£π
–
v
!=0 );

914 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
pTab
->
iDb
, 0);

915 
	`sqlôeVdbeOp3
(
v
, 
OP_O≥nWrôe
, 
ba£
, 
pTab
->
äum
,ÖTab->
zName
, 
P3_STATIC
);

916 
i
=1, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, i++){

917 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
pIdx
->
iDb
, 0);

918 
	`sqlôeVdbeOp3
(
v
, 
OP_O≥nWrôe
, 
i
+
ba£
, 
pIdx
->
äum
,ÖIdx->
zName
, 
P3_STATIC
);

920  
i
;

921 
	}
}

	@main.c

19 
	~"sqlôeI¡.h
"

20 
	~"os.h
"

21 
	~<˘y≥.h
>

28 
sqlôe
 *
	mdb
;

29 **
	mpzEºMsg
;

30 } 
	tInôD©a
;

36 
	$c‹ru±Schema
(
InôD©a
 *
pD©a
, c⁄° *
zExåa
){

37 
	`sqlôeSëSåög
(
pD©a
->
pzEºMsg
, "malformed database schema",

38 
zExåa
!=0 && zExtra[0]!=0 ? " - " : (*)0, zExtra, (*)0);

39 
	}
}

56 
	$sqlôeInôCÆlback
(*
pInô
, 
¨gc
, **
¨gv
, **
azCﬁName
){

57 
InôD©a
 *
pD©a
 = (InôD©a*)
pInô
;

58 
nEº
 = 0;

60 
	`as£π
–
¨gc
==5 );

61 if–
¨gv
==0 )  0;

62 if–
¨gv
[0]==0 ){

63 
	`c‹ru±Schema
(
pD©a
, 0);

66  
¨gv
[0][0] ){

70 
sqlôe
 *
db
 = 
pD©a
->db;

71 if–
¨gv
[2]==0 ||árgv[4]==0 ){

72 
	`c‹ru±Schema
(
pD©a
, 0);

75 if–
¨gv
[3] &&árgv[3][0] ){

81 *
zEº
;

82 
	`as£π
–
db
->
öô
.
busy
 );

83 
db
->
öô
.
iDb
 = 
	`©oi
(
¨gv
[4]);

84 
	`as£π
–
db
->
öô
.
iDb
>=0 && db->öô.iDb<db->
nDb
 );

85 
db
->
öô
.
√wTnum
 = 
	`©oi
(
¨gv
[2]);

86 if–
	`sqlôe_exec
(
db
, 
¨gv
[3], 0, 0, &
zEº
) ){

87 
	`c‹ru±Schema
(
pD©a
, 
zEº
);

88 
	`sqlôe_‰ìmem
(
zEº
);

90 
db
->
öô
.
iDb
 = 0;

98 
iDb
;

99 
Index
 *
pIndex
;

101 
iDb
 = 
	`©oi
(
¨gv
[4]);

102 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

103 
pIndex
 = 
	`sqlôeFödIndex
(
db
, 
¨gv
[1], db->
aDb
[
iDb
].
zName
);

104 if–
pIndex
==0 ||ÖIndex->
äum
!=0 ){

112 
pIndex
->
äum
 = 
	`©oi
(
¨gv
[2]);

119 
nEº
 = 1;

120 
	`as£π
–
nEº
==0 );

123  
nEº
;

124 
	}
}

139 
	$upgøde_3_ˇŒback
(*
pInô
, 
¨gc
, **
¨gv
, **
NŸU£d
){

140 
InôD©a
 *
pD©a
 = (InôD©a*)
pInô
;

141 
rc
;

142 
TabÀ
 *
pTab
;

143 
Triggî
 *
pTrig
;

144 *
zEº
 = 0;

146 
pTab
 = 
	`sqlôeFödTabÀ
(
pD©a
->
db
, 
¨gv
[0], 0);

147 
	`as£π
–
pTab
!=0 );

148 
	`as£π
–
	`sqlôeSåICmp
(
pTab
->
zName
, 
¨gv
[0])==0 );

149 if–
pTab
 ){

150 
pTrig
 = 
pTab
->
pTriggî
;

151 
pTab
->
pTriggî
 = 0;

153 
rc
 = 
	`sqlôe_exec_¥ötf
(
pD©a
->
db
,

158 0, 0, &
zEº
, 
¨gv
[0],árgv[0],árgv[0]);

159 if–
zEº
 ){

160 if–*
pD©a
->
pzEºMsg
 ) 
	`sqlôe_‰ìmem
(*pData->pzErrMsg);

161 *
pD©a
->
pzEºMsg
 = 
zEº
;

169 
pTab
 = 
	`sqlôeFödTabÀ
(
pD©a
->
db
, 
¨gv
[0], 0);

170 if–
pTab
 ){

171 
	`as£π
–
	`sqlôeSåICmp
(
pTab
->
zName
, 
¨gv
[0])==0 );

172 
pTab
->
pTriggî
 = 
pTrig
;

174  
rc
!=
SQLITE_OK
;

175 
	}
}

187 
	$sqlôeInôO√
(
sqlôe
 *
db
, 
iDb
, **
pzEºMsg
){

188 
rc
;

189 
BtCurs‹
 *
curMaö
;

190 
size
;

191 
TabÀ
 *
pTab
;

192 c⁄° *
azArg
[6];

193 
zDbNum
[30];

194 
mëa
[
SQLITE_N_BTREE_META
];

195 
InôD©a
 
öôD©a
;

196 c⁄° *
zMa°îSchema
;

197 c⁄° *
zMa°îName
;

198 *
zSql
 = 0;

203 
ma°î_schema
[] =

212 
ãmp_ma°î_schema
[] =

222 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

228 if–
iDb
==1 ){

229 
zMa°îSchema
 = 
ãmp_ma°î_schema
;

230 
zMa°îName
 = 
TEMP_MASTER_NAME
;

232 
zMa°îSchema
 = 
ma°î_schema
;

233 
zMa°îName
 = 
MASTER_NAME
;

238 
	`sqlôeSa„tyOff
(
db
);

239 
azArg
[0] = "table";

240 
azArg
[1] = 
zMa°îName
;

241 
azArg
[2] = "2";

242 
azArg
[3] = 
zMa°îSchema
;

243 
	`•rötf
(
zDbNum
, "%d", 
iDb
);

244 
azArg
[4] = 
zDbNum
;

245 
azArg
[5] = 0;

246 
öôD©a
.
db
 = db;

247 
öôD©a
.
pzEºMsg
 =ÖzErrMsg;

248 
	`sqlôeInôCÆlback
(&
öôD©a
, 5, (**)
azArg
, 0);

249 
pTab
 = 
	`sqlôeFödTabÀ
(
db
, 
zMa°îName
, db->
aDb
[
iDb
].
zName
);

250 if–
pTab
 ){

251 
pTab
->
ªadO∆y
 = 1;

253  
SQLITE_NOMEM
;

255 
	`sqlôeSa„tyOn
(
db
);

259 if–
db
->
aDb
[
iDb
].
pBt
==0 )  
SQLITE_OK
;

260 
rc
 = 
	`sqlôeBåìCurs‹
(
db
->
aDb
[
iDb
].
pBt
, 2, 0, &
curMaö
);

261 if–
rc
 ){

262 
	`sqlôeSëSåög
(
pzEºMsg
, 
	`sqlôe_îr‹_°rög
(
rc
), (*)0);

263  
rc
;

268 
rc
 = 
	`sqlôeBåìGëMëa
(
db
->
aDb
[
iDb
].
pBt
, 
mëa
);

269 if–
rc
 ){

270 
	`sqlôeSëSåög
(
pzEºMsg
, 
	`sqlôe_îr‹_°rög
(
rc
), (*)0);

271 
	`sqlôeBåìClo£Curs‹
(
curMaö
);

272  
rc
;

274 
db
->
aDb
[
iDb
].
schema_cookõ
 = 
mëa
[1];

275 if–
iDb
==0 ){

276 
db
->
√xt_cookõ
 = 
mëa
[1];

277 
db
->
fûe_f‹m©
 = 
mëa
[2];

278 
size
 = 
mëa
[3];

279 if–
size
==0 ){ sizê
MAX_PAGES
; }

280 
db
->
ˇche_size
 = 
size
;

281 
db
->
ß„ty_Àvñ
 = 
mëa
[4];

282 if–
mëa
[6]>0 && mëa[6]<=2 && 
db
->
ãmp_°‹e
==0 ){

283 
db
->
ãmp_°‹e
 = 
mëa
[6];

285 if–
db
->
ß„ty_Àvñ
==0 ) db->safety_level = 2;

294 if–
db
->
fûe_f‹m©
==0 ){

296 
db
->
fûe_f‹m©
 = 4;

297 }if–
db
->
fûe_f‹m©
>4 ){

298 
	`sqlôeBåìClo£Curs‹
(
curMaö
);

299 
	`sqlôeSëSåög
(
pzEºMsg
, "unsupported file format", (*)0);

300  
SQLITE_ERROR
;

302 }if–
iDb
!=1 && (
db
->
fûe_f‹m©
!=
mëa
[2] || db->file_format<4) ){

303 
	`as£π
–
db
->
fûe_f‹m©
>=4 );

304 if–
mëa
[2]==0 ){

305 
	`sqlôeSëSåög
(
pzEºMsg
, "cannotáttachÉmpty database: ",

306 
db
->
aDb
[
iDb
].
zName
, (*)0);

308 
	`sqlôeSëSåög
(
pzEºMsg
, "incompatible file format ináuxiliary "

309 "d©aba£: ", 
db
->
aDb
[
iDb
].
zName
, (*)0);

311 
	`sqlôeBåìClo£
(
db
->
aDb
[
iDb
].
pBt
);

312 
db
->
aDb
[
iDb
].
pBt
 = 0;

313  
SQLITE_FORMAT
;

315 
	`sqlôeBåìSëCacheSize
(
db
->
aDb
[
iDb
].
pBt
, db->
ˇche_size
);

316 
	`sqlôeBåìSëSa„tyLevñ
(
db
->
aDb
[
iDb
].
pBt
, 
mëa
[4]==0 ? 2 : meta[4]);

320 
	`as£π
–
db
->
öô
.
busy
 );

321 
	`sqlôeSa„tyOff
(
db
);

337 if–
db
->
fûe_f‹m©
>=2 ){

338 
	`sqlôeSëSåög
(&
zSql
,

339 "SELECTÅy≥,Çame,ÑoŸ∑ge, sql, ", 
zDbNum
, " FROM \"",

340 
db
->
aDb
[
iDb
].
zName
, "\".", 
zMa°îName
, (*)0);

342 
	`sqlôeSëSåög
(&
zSql
,

343 "SELECTÅy≥,Çame,ÑoŸ∑ge, sql, ", 
zDbNum
, " FROM \"",

344 
db
->
aDb
[
iDb
].
zName
, "\".", 
zMa°îName
,

348 
rc
 = 
	`sqlôe_exec
(
db
, 
zSql
, 
sqlôeInôCÆlback
, &
öôD©a
, 0);

350 
	`sqlôeFªe
(
zSql
);

351 
	`sqlôeSa„tyOn
(
db
);

352 
	`sqlôeBåìClo£Curs‹
(
curMaö
);

353 if–
sqlôe_mÆloc_Áûed
 ){

354 
	`sqlôeSëSåög
(
pzEºMsg
, "out of memory", (*)0);

355 
rc
 = 
SQLITE_NOMEM
;

356 
	`sqlôeRe£tI¡î«lSchema
(
db
, 0);

358 if–
rc
==
SQLITE_OK
 ){

359 
	`DbSëPr›îty
(
db
, 
iDb
, 
DB_SchemaLﬂded
);

361 
	`sqlôeRe£tI¡î«lSchema
(
db
, 
iDb
);

363  
rc
;

364 
	}
}

379 
	$sqlôeInô
(
sqlôe
 *
db
, **
pzEºMsg
){

380 
i
, 
rc
;

382 if–
db
->
öô
.
busy
 )  
SQLITE_OK
;

383 
	`as£π
–(
db
->
Êags
 & 
SQLITE_Inôülized
)==0 );

384 
rc
 = 
SQLITE_OK
;

385 
db
->
öô
.
busy
 = 1;

386 
i
=0; 
rc
==
SQLITE_OK
 && i<
db
->
nDb
; i++){

387 if–
	`DbHasPr›îty
(
db
, 
i
, 
DB_SchemaLﬂded
) || i==1 ) ;

388 
rc
 = 
	`sqlôeInôO√
(
db
, 
i
, 
pzEºMsg
);

389 if–
rc
 ){

390 
	`sqlôeRe£tI¡î«lSchema
(
db
, 
i
);

398 if–
rc
==
SQLITE_OK
 && 
db
->
nDb
>1 && !
	`DbHasPr›îty
(db, 1, 
DB_SchemaLﬂded
) ){

399 
rc
 = 
	`sqlôeInôO√
(
db
, 1, 
pzEºMsg
);

400 if–
rc
 ){

401 
	`sqlôeRe£tI¡î«lSchema
(
db
, 1);

405 
db
->
öô
.
busy
 = 0;

406 if–
rc
==
SQLITE_OK
 ){

407 
db
->
Êags
 |
SQLITE_Inôülized
;

408 
	`sqlôeCommôI¡î«lCh™ges
(
db
);

416 if–
rc
==
SQLITE_OK
 && 
db
->
fûe_f‹m©
<3 ){

417 *
zEº
 = 0;

418 
InôD©a
 
öôD©a
;

419 
mëa
[
SQLITE_N_BTREE_META
];

421 
db
->
magic
 = 
SQLITE_MAGIC_OPEN
;

422 
öôD©a
.
db
 = db;

423 
öôD©a
.
pzEºMsg
 = &
zEº
;

424 
db
->
fûe_f‹m©
 = 3;

425 
rc
 = 
	`sqlôe_exec
(
db
,

427 
upgøde_3_ˇŒback
,

428 &
öôD©a
,

429 &
zEº
);

430 if–
rc
==
SQLITE_OK
 ){

431 
	`sqlôeBåìGëMëa
(
db
->
aDb
[0].
pBt
, 
mëa
);

432 
mëa
[2] = 4;

433 
	`sqlôeBåìUpd©eMëa
(
db
->
aDb
[0].
pBt
, 
mëa
);

434 
	`sqlôe_exec
(
db
, "COMMIT", 0, 0, 0);

436 if–
rc
!=
SQLITE_OK
 ){

437 
	`sqlôeSëSåög
(
pzEºMsg
,

439 
zEº
 ? ": " : 0, zErr, (*)0);

441 
	`sqlôe_‰ìmem
(
zEº
);

444 if–
rc
!=
SQLITE_OK
 ){

445 
db
->
Êags
 &~
SQLITE_Inôülized
;

447  
rc
;

448 
	}
}

453 c⁄° 
	grcsid
[] = "@(#Ë\044Id: SQLôêvîsi⁄ " 
SQLITE_VERSION
 " $";

454 c⁄° 
	gsqlôe_vîsi⁄
[] = 
SQLITE_VERSION
;

460 #ifde‡
SQLITE_UTF8


461 c⁄° 
	gsqlôe_ícodög
[] = "UTF-8";

463 c⁄° 
	gsqlôe_ícodög
[] = "iso8859";

475 
sqlôe
 *
	$sqlôe_›í
(c⁄° *
zFûíame
, 
mode
, **
pzEºMsg
){

476 
sqlôe
 *
db
;

477 
rc
, 
i
;

480 
db
 = 
	`sqlôeMÆloc
–(
sqlôe
) );

481 if–
pzEºMsg
 ) *pzErrMsg = 0;

482 if–
db
==0 ) 
no_mem_⁄_›í
;

483 
db
->
⁄Eº‹
 = 
OE_DeÁu…
;

484 
db
->
¥i‹NewRowid
 = 0;

485 
db
->
magic
 = 
SQLITE_MAGIC_BUSY
;

486 
db
->
nDb
 = 2;

487 
db
->
aDb
 = db->
aDbSètic
;

489 
	`sqlôeHashInô
(&
db
->
aFunc
, 
SQLITE_HASH_STRING
, 1);

490 
i
=0; i<
db
->
nDb
; i++){

491 
	`sqlôeHashInô
(&
db
->
aDb
[
i
].
tblHash
, 
SQLITE_HASH_STRING
, 0);

492 
	`sqlôeHashInô
(&
db
->
aDb
[
i
].
idxHash
, 
SQLITE_HASH_STRING
, 0);

493 
	`sqlôeHashInô
(&
db
->
aDb
[
i
].
åigHash
, 
SQLITE_HASH_STRING
, 0);

494 
	`sqlôeHashInô
(&
db
->
aDb
[
i
].
aFKey
, 
SQLITE_HASH_STRING
, 1);

498 if–
zFûíame
[0]==':' && 
	`°rcmp
(zFilename,":memory:")==0 ){

499 
db
->
ãmp_°‹e
 = 2;

501 
rc
 = 
	`sqlôeBåìFa˘‹y
(
db
, 
zFûíame
, 0, 
MAX_PAGES
, &db->
aDb
[0].
pBt
);

502 if–
rc
!=
SQLITE_OK
 ){

503  
rc
 ){

505 
	`sqlôeSëSåög
(
pzEºMsg
, "unableÅo open database: ",

506 
zFûíame
, (*)0);

509 
	`sqlôeFªe
(
db
);

510 
	`sqlôeSåRóŒoc
(
pzEºMsg
);

513 
db
->
aDb
[0].
zName
 = "main";

514 
db
->
aDb
[1].
zName
 = "temp";

517 
	`sqlôeRegi°îBuûtöFun˘i⁄s
(
db
);

518 
rc
 = 
	`sqlôeInô
(
db
, 
pzEºMsg
);

519 
db
->
magic
 = 
SQLITE_MAGIC_OPEN
;

520 if–
sqlôe_mÆloc_Áûed
 ){

521 
	`sqlôe_˛o£
(
db
);

522 
no_mem_⁄_›í
;

523 }if–
rc
!=
SQLITE_OK
 &&Ñc!=
SQLITE_BUSY
 ){

524 
	`sqlôe_˛o£
(
db
);

525 
	`sqlôeSåRóŒoc
(
pzEºMsg
);

527 }if–
pzEºMsg
 ){

528 
	`sqlôeFªe
(*
pzEºMsg
);

529 *
pzEºMsg
 = 0;

533  
db
;

535 
no_mem_⁄_›í
:

536 
	`sqlôeSëSåög
(
pzEºMsg
, "out of memory", (*)0);

537 
	`sqlôeSåRóŒoc
(
pzEºMsg
);

539 
	}
}

544 
	$sqlôe_œ°_ö£π_rowid
(
sqlôe
 *
db
){

545  
db
->
œ°Rowid
;

546 
	}
}

551 
	$sqlôe_ch™ges
(
sqlôe
 *
db
){

552  
db
->
nCh™ge
;

553 
	}
}

561 
	$sqlôe_œ°_°©emít_ch™ges
(
sqlôe
 *
db
){

562  
db
->
lsCh™ge
;

563 
	}
}

568 
	$sqlôe_˛o£
(
sqlôe
 *
db
){

569 
HashEÀm
 *
i
;

570 
j
;

571 
db
->
w™t_to_˛o£
 = 1;

572 if–
	`sqlôeSa„tyCheck
(
db
Ë|| 
	`sqlôeSa„tyOn
(db) ){

576 
db
->
magic
 = 
SQLITE_MAGIC_CLOSED
;

577 
j
=0; j<
db
->
nDb
; j++){

578 
Db
 *
pDb
 = &
db
->
aDb
[
j
];

579 if–
pDb
->
pBt
 ){

580 
	`sqlôeBåìClo£
(
pDb
->
pBt
);

581 
pDb
->
pBt
 = 0;

584 
	`sqlôeRe£tI¡î«lSchema
(
db
, 0);

585 
	`as£π
–
db
->
nDb
<=2 );

586 
	`as£π
–
db
->
aDb
==db->
aDbSètic
 );

587 
i
=
	`sqlôeHashFú°
(&
db
->
aFunc
); i; i=
	`sqlôeHashNext
(i)){

588 
FuncDef
 *
pFunc
, *
pNext
;

589 
pFunc
 = (
FuncDef
*)
	`sqlôeHashD©a
(
i
);ÖFunc;ÖFunc=
pNext
){

590 
pNext
 = 
pFunc
->pNext;

591 
	`sqlôeFªe
(
pFunc
);

594 
	`sqlôeHashCÀ¨
(&
db
->
aFunc
);

595 
	`sqlôeFªe
(
db
);

596 
	}
}

601 
	$sqlôeRﬁlbackAŒ
(
sqlôe
 *
db
){

602 
i
;

603 
i
=0; i<
db
->
nDb
; i++){

604 if–
db
->
aDb
[
i
].
pBt
 ){

605 
	`sqlôeBåìRﬁlback
(
db
->
aDb
[
i
].
pBt
);

606 
db
->
aDb
[
i
].
öTøns
 = 0;

609 
	`sqlôeRe£tI¡î«lSchema
(
db
, 0);

611 
	}
}

623 
	$sqlôe_exec
(

624 
sqlôe
 *
db
,

625 c⁄° *
zSql
,

626 
sqlôe_ˇŒback
 
xCÆlback
,

627 *
pArg
,

628 **
pzEºMsg


630 
rc
 = 
SQLITE_OK
;

631 c⁄° *
zLe·ovî
;

632 
sqlôe_vm
 *
pVm
;

633 
nRëry
 = 0;

634 
nCh™ge
 = 0;

635 
nCÆlback
;

637 if–
zSql
==0 )  
SQLITE_OK
;

638  
rc
==
SQLITE_OK
 && 
zSql
[0] ){

639 
pVm
 = 0;

640 
rc
 = 
	`sqlôe_compûe
(
db
, 
zSql
, &
zLe·ovî
, &
pVm
, 
pzEºMsg
);

641 if–
rc
!=
SQLITE_OK
 ){

642 
	`as£π
–
pVm
==0 || 
sqlôe_mÆloc_Áûed
 );

643  
rc
;

645 if–
pVm
==0 ){

649 
db
->
nCh™ge
 +=ÇChange;

650 
nCÆlback
 = 0;

652 
nArg
;

653 **
azArg
, **
azCﬁ
;

654 
rc
 = 
	`sqlôe_°ï
(
pVm
, &
nArg
, (c⁄° ***)&
azArg
,(c⁄° ***)&
azCﬁ
);

655 if–
rc
==
SQLITE_ROW
 ){

656 if–
xCÆlback
!=0 && 
	`xCÆlback
(
pArg
, 
nArg
, 
azArg
, 
azCﬁ
) ){

657 
	`sqlôe_föÆize
(
pVm
, 0);

658  
SQLITE_ABORT
;

660 
nCÆlback
++;

662 if–
rc
==
SQLITE_DONE
 && 
nCÆlback
==0

663 && (
db
->
Êags
 & 
SQLITE_NuŒCÆlback
)!=0 && 
xCÆlback
!=0 ){

664 
	`xCÆlback
(
pArg
, 
nArg
, 
azArg
, 
azCﬁ
);

666 
rc
 = 
	`sqlôe_föÆize
(
pVm
, 
pzEºMsg
);

667 if–
rc
==
SQLITE_SCHEMA
 && 
nRëry
<2 ){

668 
nRëry
++;

669 
rc
 = 
SQLITE_OK
;

672 if–
db
->
pVdbe
==0 ){

673 
nCh™ge
 = 
db
->nChange;

675 
nRëry
 = 0;

676 
zSql
 = 
zLe·ovî
;

677  
	`is•a˚
(
zSql
[0]) ) zSql++;

682  
rc
;

683 
	}
}

691 
	$sqlôe_compûe
(

692 
sqlôe
 *
db
,

693 c⁄° *
zSql
,

694 c⁄° **
pzTaû
,

695 
sqlôe_vm
 **
µVm
,

696 **
pzEºMsg


698 
P¨£
 
sP¨£
;

700 if–
pzEºMsg
 ) *pzErrMsg = 0;

701 if–
	`sqlôeSa„tyOn
(
db
ËË
exec_misu£
;

702 if–!
db
->
öô
.
busy
 ){

703 if–(
db
->
Êags
 & 
SQLITE_Inôülized
)==0 ){

704 
rc
, 
˙t
 = 1;

705  (
rc
 = 
	`sqlôeInô
(
db
, 
pzEºMsg
))==
SQLITE_BUSY


706 && 
db
->
xBusyCÆlback


707 && 
db
->
	`xBusyCÆlback
(db->
pBusyArg
, "", 
˙t
++)!=0 ){}

708 if–
rc
!=
SQLITE_OK
 ){

709 
	`sqlôeSåRóŒoc
(
pzEºMsg
);

710 
	`sqlôeSa„tyOff
(
db
);

711  
rc
;

713 if–
pzEºMsg
 ){

714 
	`sqlôeFªe
(*
pzEºMsg
);

715 *
pzEºMsg
 = 0;

718 if–
db
->
fûe_f‹m©
<3 ){

719 
	`sqlôeSa„tyOff
(
db
);

720 
	`sqlôeSëSåög
(
pzEºMsg
, "obsolete database file format", (*)0);

721  
SQLITE_ERROR
;

724 
	`as£π
–(
db
->
Êags
 & 
SQLITE_Inôülized
)!=0 || db->
öô
.
busy
 );

725 if–
db
->
pVdbe
==0 ){ db->
nCh™ge
 = 0; }

726 
	`mem£t
(&
sP¨£
, 0, (sParse));

727 
sP¨£
.
db
 = db;

728 
	`sqlôeRunP¨£r
(&
sP¨£
, 
zSql
, 
pzEºMsg
);

729 if–
db
->
xTø˚
 && !db->
öô
.
busy
 ){

736 if–
sP¨£
.
zTaû
 && sP¨£.zTaû!=
zSql
 && *sParse.zTail ){

737 *
tmpSql
 = 
	`sqlôeSåNDup
(
zSql
, 
sP¨£
.
zTaû
 - zSql);

738 if–
tmpSql
 ){

739 
db
->
	`xTø˚
(db->
pTø˚Arg
, 
tmpSql
);

740 
	`‰ì
(
tmpSql
);

746 
db
->
	`xTø˚
(db->
pTø˚Arg
, 
zSql
);

749 
db
->
	`xTø˚
(db->
pTø˚Arg
, 
zSql
);

752 if–
sqlôe_mÆloc_Áûed
 ){

753 
	`sqlôeSëSåög
(
pzEºMsg
, "out of memory", (*)0);

754 
sP¨£
.
rc
 = 
SQLITE_NOMEM
;

755 
	`sqlôeRﬁlbackAŒ
(
db
);

756 
	`sqlôeRe£tI¡î«lSchema
(
db
, 0);

757 
db
->
Êags
 &~
SQLITE_InTøns
;

759 if–
sP¨£
.
rc
==
SQLITE_DONE
 ) sP¨£.r¯
SQLITE_OK
;

760 if–
sP¨£
.
rc
!=
SQLITE_OK
 && 
pzEºMsg
 && *pzErrMsg==0 ){

761 
	`sqlôeSëSåög
(
pzEºMsg
, 
	`sqlôe_îr‹_°rög
(
sP¨£
.
rc
), (*)0);

763 
	`sqlôeSåRóŒoc
(
pzEºMsg
);

764 if–
sP¨£
.
rc
==
SQLITE_SCHEMA
 ){

765 
	`sqlôeRe£tI¡î«lSchema
(
db
, 0);

767 
	`as£π
–
µVm
 );

768 *
µVm
 = (
sqlôe_vm
*)
sP¨£
.
pVdbe
;

769 if–
pzTaû
 ) *pzTaû = 
sP¨£
.
zTaû
;

770 if–
	`sqlôeSa„tyOff
(
db
ËË
exec_misu£
;

771  
sP¨£
.
rc
;

773 
exec_misu£
:

774 if–
pzEºMsg
 ){

775 *
pzEºMsg
 = 0;

776 
	`sqlôeSëSåög
(
pzEºMsg
, 
	`sqlôe_îr‹_°rög
(
SQLITE_MISUSE
), (*)0);

777 
	`sqlôeSåRóŒoc
(
pzEºMsg
);

779  
SQLITE_MISUSE
;

780 
	}
}

794 
	$sqlôe_föÆize
(

795 
sqlôe_vm
 *
pVm
,

796 **
pzEºMsg


798 
rc
 = 
	`sqlôeVdbeFöÆize
((
Vdbe
*)
pVm
, 
pzEºMsg
);

799 
	`sqlôeSåRóŒoc
(
pzEºMsg
);

800  
rc
;

801 
	}
}

810 
	$sqlôe_ª£t
(

811 
sqlôe_vm
 *
pVm
,

812 **
pzEºMsg


814 
rc
 = 
	`sqlôeVdbeRe£t
((
Vdbe
*)
pVm
, 
pzEºMsg
);

815 
	`sqlôeVdbeMakeRódy
((
Vdbe
*)
pVm
, -1, 0);

816 
	`sqlôeSåRóŒoc
(
pzEºMsg
);

817  
rc
;

818 
	}
}

824 c⁄° *
	$sqlôe_îr‹_°rög
(
rc
){

825 c⁄° *
z
;

826  
rc
 ){

827 
SQLITE_OK
: 
z
 = "notánÉrror"; ;

828 
SQLITE_ERROR
: 
z
 = "SQLÜogicÉrror or missing database"; ;

829 
SQLITE_INTERNAL
: 
z
 = "internal SQLite implementation flaw"; ;

830 
SQLITE_PERM
: 
z
 = "accessÖermission denied"; ;

831 
SQLITE_ABORT
: 
z
 = "callbackÑequested queryábort"; ;

832 
SQLITE_BUSY
: 
z
 = "database isÜocked"; ;

833 
SQLITE_LOCKED
: 
z
 = "databaseÅable isÜocked"; ;

834 
SQLITE_NOMEM
: 
z
 = "out of memory"; ;

835 
SQLITE_READONLY
: 
z
 = "attemptÅo writeáÑeadonly database"; ;

836 
SQLITE_INTERRUPT
: 
z
 = "interrupted"; ;

837 
SQLITE_IOERR
: 
z
 = "disk I/OÉrror"; ;

838 
SQLITE_CORRUPT
: 
z
 = "database disk image is malformed"; ;

839 
SQLITE_NOTFOUND
: 
z
 = "table orÑecordÇot found"; ;

840 
SQLITE_FULL
: 
z
 = "database is full"; ;

841 
SQLITE_CANTOPEN
: 
z
 = "unableÅo open database file"; ;

842 
SQLITE_PROTOCOL
: 
z
 = "databaseÜockingÖrotocol failure"; ;

843 
SQLITE_EMPTY
: 
z
 = "table containsÇo data"; ;

844 
SQLITE_SCHEMA
: 
z
 = "database schema has changed"; ;

845 
SQLITE_TOOBIG
: 
z
 = "too much data for oneÅableÑow"; ;

846 
SQLITE_CONSTRAINT
: 
z
 = "constraint failed"; ;

847 
SQLITE_MISMATCH
: 
z
 = "datatype mismatch"; ;

848 
SQLITE_MISUSE
: 
z
 = "libraryÑoutine called out of sequence";;

849 
SQLITE_NOLFS
: 
z
 = "kernelÜacksÜarge file support"; ;

850 
SQLITE_AUTH
: 
z
 = "authorization denied"; ;

851 
SQLITE_FORMAT
: 
z
 = "auxiliary database formatÉrror"; ;

852 
SQLITE_RANGE
: 
z
 = "bind index out ofÑange"; ;

853 
SQLITE_NOTADB
: 
z
 = "file isÉncrypted or isÇotá database";;

854 : 
z
 = "unknownÉrror"; ;

856  
z
;

857 
	}
}

865 
	$sqlôeDeÁu…BusyCÆlback
(

866 *
Timeout
,

867 c⁄° *
NŸU£d
,

868 
cou¡


870 #i‡
SQLITE_MIN_SLEEP_MS
==1

871 c⁄° 
dñays
[] =

873 c⁄° 
tŸÆs
[] =

875 
	#NDELAY
 ((
dñays
)/(dñays[0]))

	)

876 
timeout
 = ()()
Timeout
;

877 
dñay
, 
¥i‹
;

879 if–
cou¡
 <
NDELAY
 ){

880 
dñay
 = 
dñays
[
cou¡
-1];

881 
¥i‹
 = 
tŸÆs
[
cou¡
-1];

883 
dñay
 = 
dñays
[
NDELAY
-1];

884 
¥i‹
 = 
tŸÆs
[
NDELAY
-1] + 
dñay
*(
cou¡
-NDELAY-1);

886 if–
¥i‹
 + 
dñay
 > 
timeout
 ){

887 
dñay
 = 
timeout
 - 
¥i‹
;

888 if–
dñay
<=0 )  0;

890 
	`sqlôeOsSÀï
(
dñay
);

893 
timeout
 = ()()
Timeout
;

894 if–(
cou¡
+1)*1000 > 
timeout
 ){

897 
	`sqlôeOsSÀï
(1000);

900 
	}
}

906 
sqlôe_busy_h™dÀr
(

907 
sqlôe
 *
db
,

908 (*
xBusy
)(*,const *,),

909 *
pArg


911 
db
->
xBusyCÆlback
 = 
xBusy
;

912 
db
->
pBusyArg
 = 
pArg
;

913 
	}
}

915 #i‚de‡
SQLITE_OMIT_PROGRESS_CALLBACK


921 
sqlôe_¥ogªss_h™dÀr
(

922 
sqlôe
 *
db
,

923 
nOps
,

924 (*
xProgªss
)(*),

925 *
pArg


927 if–
nOps
>0 ){

928 
db
->
xProgªss
 = xProgress;

929 
db
->
nProgªssOps
 = 
nOps
;

930 
db
->
pProgªssArg
 = 
pArg
;

932 
db
->
xProgªss
 = 0;

933 
db
->
nProgªssOps
 = 0;

934 
db
->
pProgªssArg
 = 0;

936 
	}
}

944 
	$sqlôe_busy_timeout
(
sqlôe
 *
db
, 
ms
){

945 if–
ms
>0 ){

946 
	`sqlôe_busy_h™dÀr
(
db
, 
sqlôeDeÁu…BusyCÆlback
, (*)()
ms
);

948 
	`sqlôe_busy_h™dÀr
(
db
, 0, 0);

950 
	}
}

955 
	$sqlôe_öãºu±
(
sqlôe
 *
db
){

956 
db
->
Êags
 |
SQLITE_I¡îru±
;

957 
	}
}

969 
	$sqlôe_‰ìmem
(*
p
){ 
	`‰ì
’); 
	}
}

976 c⁄° *
	$sqlôe_libvîsi⁄
(){  
sqlôe_vîsi⁄
; 
	}
}

977 c⁄° *
	$sqlôe_libícodög
(){  
sqlôe_ícodög
; 
	}
}

993 
sqlôe_¸óã_fun˘i⁄
(

994 
sqlôe
 *
db
,

995 c⁄° *
zName
,

996 
nArg
,

997 (*
xFunc
)(
sqlôe_func
*,,const **),

998 *
pU£rD©a


1000 
FuncDef
 *
p
;

1001 
nName
;

1002 if–
db
==0 || 
zName
==0 || 
	`sqlôeSa„tyCheck
(db) )  1;

1003 if–
nArg
<-1 ||ÇArg>127 )  1;

1004 
nName
 = 
	`°æí
(
zName
);

1005 if–
nName
>255 )  1;

1006 
p
 = 
	`sqlôeFödFun˘i⁄
(
db
, 
zName
, 
nName
, 
nArg
, 1);

1007 if–
p
==0 )  1;

1008 
p
->
xFunc
 = xFunc;

1009 
p
->
xSãp
 = 0;

1010 
p
->
xFöÆize
 = 0;

1011 
p
->
pU£rD©a
 =ÖUserData;

1013 
	}
}

1014 
sqlôe_¸óã_aggªg©e
(

1015 
sqlôe
 *
db
,

1016 c⁄° *
zName
,

1017 
nArg
,

1018 (*
xSãp
)(
sqlôe_func
*,,const **),

1019 (*
xFöÆize
)(
sqlôe_func
*),

1020 *
pU£rD©a


1022 
FuncDef
 *
p
;

1023 
nName
;

1024 if–
db
==0 || 
zName
==0 || 
	`sqlôeSa„tyCheck
(db) )  1;

1025 if–
nArg
<-1 ||ÇArg>127 )  1;

1026 
nName
 = 
	`°æí
(
zName
);

1027 if–
nName
>255 )  1;

1028 
p
 = 
	`sqlôeFödFun˘i⁄
(
db
, 
zName
, 
nName
, 
nArg
, 1);

1029 if–
p
==0 )  1;

1030 
p
->
xFunc
 = 0;

1031 
p
->
xSãp
 = xStep;

1032 
p
->
xFöÆize
 = xFinalize;

1033 
p
->
pU£rD©a
 =ÖUserData;

1035 
	}
}

1042 
	$sqlôe_fun˘i⁄_ty≥
(
sqlôe
 *
db
, c⁄° *
zName
, 
d©aTy≥
){

1043 
FuncDef
 *
p
 = (FuncDef*)
	`sqlôeHashFöd
(&
db
->
aFunc
, 
zName
, 
	`°æí
(zName));

1044  
p
 ){

1045 
p
->
d©aTy≥
 = dataType;

1046 
p
 =Ö->
pNext
;

1048  
SQLITE_OK
;

1049 
	}
}

1059 *
sqlôe_åa˚
(
sqlôe
 *
db
, (*
xTø˚
)(*,c⁄° *), *
pArg
){

1060 *
pOld
 = 
db
->
pTø˚Arg
;

1061 
db
->
xTø˚
 = xTrace;

1062 
db
->
pTø˚Arg
 = 
pArg
;

1063  
pOld
;

1064 
	}
}

1072 *
sqlôe_commô_hook
(

1073 
sqlôe
 *
db
,

1074 (*
xCÆlback
)(*),

1075 *
pArg


1077 *
pOld
 = 
db
->
pCommôArg
;

1078 
db
->
xCommôCÆlback
 = 
xCÆlback
;

1079 
db
->
pCommôArg
 = 
pArg
;

1080  
pOld
;

1081 
	}
}

1109 
	$sqlôeBåìFa˘‹y
(

1110 c⁄° 
sqlôe
 *
db
,

1111 c⁄° *
zFûíame
,

1112 
omôJou∫Æ
,

1113 
nCache
,

1114 
Båì
 **
µBåì
){

1116 
	`as£π
–
µBåì
 != 0);

1118 #i‚de‡
SQLITE_OMIT_INMEMORYDB


1119 if–
zFûíame
==0 ){

1120 i‡(
TEMP_STORE
 == 0) {

1122  
	`sqlôeBåìO≥n
(0, 
omôJou∫Æ
, 
nCache
, 
µBåì
);

1123 } i‡(
TEMP_STORE
 == 1 || TEMP_STORE == 2) {

1125 
loˇti⁄
 = 
db
->
ãmp_°‹e
==0 ? 
TEMP_STORE
 : db->temp_store;

1127 i‡(
loˇti⁄
 == 1) {

1128  
	`sqlôeBåìO≥n
(
zFûíame
, 
omôJou∫Æ
, 
nCache
, 
µBåì
);

1130  
	`sqlôeRbåìO≥n
(0, 0, 0, 
µBåì
);

1134  
	`sqlôeRbåìO≥n
(0, 0, 0, 
µBåì
);

1136 }if–
zFûíame
[0]==':' && 
	`°rcmp
(zFilename,":memory:")==0 ){

1137  
	`sqlôeRbåìO≥n
(0, 0, 0, 
µBåì
);

1141  
	`sqlôeBåìO≥n
(
zFûíame
, 
omôJou∫Æ
, 
nCache
, 
µBåì
);

1143 
	}
}

	@md5.c

31 
	~<t˛.h
>

32 
	~<°rög.h
>

33 
	~"sqlôe.h
"

43 #i‚de‡
uöt32


44 
	#uöt32
 

	)

47 
	sC⁄ãxt
 {

48 
uöt32
 
	mbuf
[4];

49 
uöt32
 
	mbôs
[2];

50 
	mö
[64];

52 
	tMD5C⁄ãxt
[88];

57 
	$byãRevî£
 (*
buf
, 
l⁄gs
){

58 
uöt32
 
t
;

60 
t
 = (
uöt32
)(()
buf
[3]<<8 | buf[2]) << 16 |

61 (()
buf
[1]<<8 | buf[0]);

62 *(
uöt32
 *)
buf
 = 
t
;

63 
buf
 += 4;

64 } --
l⁄gs
);

65 
	}
}

69 
	#F1
(
x
, 
y
, 
z
Ë(z ^ (x & (y ^ z)))

	)

70 
	#F2
(
x
, 
y
, 
z
Ë
	`F1
(z, x, y)

	)

71 
	#F3
(
x
, 
y
, 
z
Ë(x ^ y ^ z)

	)

72 
	#F4
(
x
, 
y
, 
z
Ë(y ^ (x | ~z))

	)

75 
	#MD5STEP
(
f
, 
w
, 
x
, 
y
, 
z
, 
d©a
, 
s
) \

76 –
w
 +
	`f
(
x
, 
y
, 
z
Ë+ 
d©a
, w = w<<
s
 | w>>(32-s), w +x )

	)

83 
	$MD5Tønsf‹m
(
uöt32
 
buf
[4], c⁄° uöt32 
ö
[16]){

84 
uöt32
 
a
, 
b
, 
c
, 
d
;

86 
a
 = 
buf
[0];

87 
b
 = 
buf
[1];

88 
c
 = 
buf
[2];

89 
d
 = 
buf
[3];

91 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 0]+0xd76aa478, 7);

92 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 1]+0xe8c7b756, 12);

93 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 2]+0x242070db, 17);

94 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 3]+0xc1bdceee, 22);

95 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 4]+0xf57c0faf, 7);

96 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 5]+0x4787c62a, 12);

97 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 6]+0xa8304613, 17);

98 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 7]+0xfd469501, 22);

99 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 8]+0x698098d8, 7);

100 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 9]+0x8b44f7af, 12);

101 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[10]+0xffff5bb1, 17);

102 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[11]+0x895cd7be, 22);

103 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[12]+0x6b901122, 7);

104 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[13]+0xfd987193, 12);

105 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[14]+0xa679438e, 17);

106 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[15]+0x49b40821, 22);

108 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 1]+0xf61e2562, 5);

109 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 6]+0xc040b340, 9);

110 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[11]+0x265e5a51, 14);

111 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 0]+0xe9b6c7aa, 20);

112 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 5]+0xd62f105d, 5);

113 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[10]+0x02441453, 9);

114 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[15]+0xd8a1e681, 14);

115 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 4]+0xe7d3fbc8, 20);

116 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 9]+0x21e1cde6, 5);

117 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[14]+0xc33707d6, 9);

118 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 3]+0xf4d50d87, 14);

119 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 8]+0x455a14ed, 20);

120 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[13]+0xa9e3e905, 5);

121 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 2]+0xfcefa3f8, 9);

122 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 7]+0x676f02d9, 14);

123 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[12]+0x8d2a4c8a, 20);

125 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 5]+0xfffa3942, 4);

126 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 8]+0x8771f681, 11);

127 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[11]+0x6d9d6122, 16);

128 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[14]+0xfde5380c, 23);

129 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 1]+0xa4beea44, 4);

130 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 4]+0x4bdecfa9, 11);

131 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 7]+0xf6bb4b60, 16);

132 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[10]+0xbebfbc70, 23);

133 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[13]+0x289b7ec6, 4);

134 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 0]+0xeaa127fa, 11);

135 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 3]+0xd4ef3085, 16);

136 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 6]+0x04881d05, 23);

137 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 9]+0xd9d4d039, 4);

138 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[12]+0xe6db99e5, 11);

139 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[15]+0x1fa27cf8, 16);

140 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 2]+0xc4ac5665, 23);

142 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 0]+0xf4292244, 6);

143 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 7]+0x432aff97, 10);

144 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[14]+0xab9423a7, 15);

145 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 5]+0xfc93a039, 21);

146 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[12]+0x655b59c3, 6);

147 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 3]+0x8f0ccc92, 10);

148 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[10]+0xffeff47d, 15);

149 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 1]+0x85845dd1, 21);

150 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 8]+0x6fa87e4f, 6);

151 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[15]+0xfe2ce6e0, 10);

152 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 6]+0xa3014314, 15);

153 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[13]+0x4e0811a1, 21);

154 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 4]+0xf7537e82, 6);

155 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[11]+0xbd3af235, 10);

156 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 2]+0x2ad7d2bb, 15);

157 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 9]+0xeb86d391, 21);

159 
buf
[0] +
a
;

160 
buf
[1] +
b
;

161 
buf
[2] +
c
;

162 
buf
[3] +
d
;

163 
	}
}

169 
	$MD5Inô
(
MD5C⁄ãxt
 *
pCtx
){

170 
C⁄ãxt
 *
˘x
 = (C⁄ãxà*)
pCtx
;

171 
˘x
->
buf
[0] = 0x67452301;

172 
˘x
->
buf
[1] = 0xefcdab89;

173 
˘x
->
buf
[2] = 0x98badcfe;

174 
˘x
->
buf
[3] = 0x10325476;

175 
˘x
->
bôs
[0] = 0;

176 
˘x
->
bôs
[1] = 0;

177 
	}
}

184 
	$MD5Upd©e
(
MD5C⁄ãxt
 *
pCtx
, c⁄° *
buf
, 
Àn
){

185 
C⁄ãxt
 *
˘x
 = (C⁄ãxà*)
pCtx
;

186 
uöt32
 
t
;

190 
t
 = 
˘x
->
bôs
[0];

191 i‡((
˘x
->
bôs
[0] = 
t
 + ((
uöt32
)
Àn
 << 3)) <Å)

192 
˘x
->
bôs
[1]++;

193 
˘x
->
bôs
[1] +
Àn
 >> 29;

195 
t
 = (t >> 3) & 0x3f;

199 i‡–
t
 ) {

200 *
p
 = (*)
˘x
->
ö
 + 
t
;

202 
t
 = 64-t;

203 i‡(
Àn
 < 
t
) {

204 
	`mem˝y
(
p
, 
buf
, 
Àn
);

207 
	`mem˝y
(
p
, 
buf
, 
t
);

208 
	`byãRevî£
(
˘x
->
ö
, 16);

209 
	`MD5Tønsf‹m
(
˘x
->
buf
, (
uöt32
 *)˘x->
ö
);

210 
buf
 +
t
;

211 
Àn
 -
t
;

216 
Àn
 >= 64) {

217 
	`mem˝y
(
˘x
->
ö
, 
buf
, 64);

218 
	`byãRevî£
(
˘x
->
ö
, 16);

219 
	`MD5Tønsf‹m
(
˘x
->
buf
, (
uöt32
 *)˘x->
ö
);

220 
buf
 += 64;

221 
Àn
 -= 64;

226 
	`mem˝y
(
˘x
->
ö
, 
buf
, 
Àn
);

227 
	}
}

233 
	$MD5FöÆ
(
dige°
[16], 
MD5C⁄ãxt
 *
pCtx
){

234 
C⁄ãxt
 *
˘x
 = (C⁄ãxà*)
pCtx
;

235 
cou¡
;

236 *
p
;

239 
cou¡
 = (
˘x
->
bôs
[0] >> 3) & 0x3F;

243 
p
 = 
˘x
->
ö
 + 
cou¡
;

244 *
p
++ = 0x80;

247 
cou¡
 = 64 - 1 - count;

250 i‡(
cou¡
 < 8) {

252 
	`mem£t
(
p
, 0, 
cou¡
);

253 
	`byãRevî£
(
˘x
->
ö
, 16);

254 
	`MD5Tønsf‹m
(
˘x
->
buf
, (
uöt32
 *)˘x->
ö
);

257 
	`mem£t
(
˘x
->
ö
, 0, 56);

260 
	`mem£t
(
p
, 0, 
cou¡
-8);

262 
	`byãRevî£
(
˘x
->
ö
, 14);

265 ((
uöt32
 *)
˘x
->
ö
)[ 14 ] = ctx->
bôs
[0];

266 ((
uöt32
 *)
˘x
->
ö
)[ 15 ] = ctx->
bôs
[1];

268 
	`MD5Tønsf‹m
(
˘x
->
buf
, (
uöt32
 *)˘x->
ö
);

269 
	`byãRevî£
((*)
˘x
->
buf
, 4);

270 
	`mem˝y
(
dige°
, 
˘x
->
buf
, 16);

271 
	`mem£t
(
˘x
, 0, (ctx));

272 
	}
}

280 
	$Dige°ToBa£16
(*
dige°
, *
zBuf
){

281 c⁄° 
zEncode
[] = "0123456789abcdef";

282 
i
, 
j
;

284 
j
=
i
=0; i<16; i++){

285 
a
 = 
dige°
[
i
];

286 
zBuf
[
j
++] = 
zEncode
[(
a
>>4)&0xf];

287 
zBuf
[
j
++] = 
zEncode
[
a
 & 0xf];

289 
zBuf
[
j
] = 0;

290 
	}
}

296 
	$md5_cmd
(*
cd
, 
T˛_I¡îp
 *
öãΩ
, 
¨gc
, c⁄° **
¨gv
){

297 
MD5C⁄ãxt
 
˘x
;

298 
dige°
[16];

300 if–
¨gc
!=2 ){

301 
	`T˛_AµídResu…
(
öãΩ
,"wr⁄g #árgs: should bê\"", 
¨gv
[0],

303  
TCL_ERROR
;

305 
	`MD5Inô
(&
˘x
);

306 
	`MD5Upd©e
(&
˘x
, (*)
¨gv
[1], ()
	`°æí
(argv[1]));

307 
	`MD5FöÆ
(
dige°
, &
˘x
);

308 
	`Dige°ToBa£16
(
dige°
, 
öãΩ
->
ªsu…
);

309  
TCL_OK
;

310 
	}
}

316 
	$md5fûe_cmd
(*
cd
, 
T˛_I¡îp
*
öãΩ
, 
¨gc
, c⁄° **
¨gv
){

317 
FILE
 *
ö
;

318 
MD5C⁄ãxt
 
˘x
;

319 
dige°
[16];

320 
zBuf
[10240];

322 if–
¨gc
!=2 ){

323 
	`T˛_AµídResu…
(
öãΩ
,"wr⁄g #árgs: should bê\"", 
¨gv
[0],

325  
TCL_ERROR
;

327 
ö
 = 
	`f›í
(
¨gv
[1],"rb");

328 if–
ö
==0 ){

329 
	`T˛_AµídResu…
(
öãΩ
,"u«bÀÅÿ›í fûê\"", 
¨gv
[1],

331  
TCL_ERROR
;

333 
	`MD5Inô
(&
˘x
);

335 
n
;

336 
n
 = 
	`‰ód
(
zBuf
, 1, (zBuf), 
ö
);

337 if–
n
<=0 ) ;

338 
	`MD5Upd©e
(&
˘x
, (*)
zBuf
, ()
n
);

340 
	`f˛o£
(
ö
);

341 
	`MD5FöÆ
(
dige°
, &
˘x
);

342 
	`Dige°ToBa£16
(
dige°
, 
öãΩ
->
ªsu…
);

343  
TCL_OK
;

344 
	}
}

349 
	$Md5_Inô
(
T˛_I¡îp
 *
öãΩ
){

350 
	`T˛_Cª©eComm™d
(
öãΩ
, "md5", (
T˛_CmdProc
*)
md5_cmd
, 0, 0);

351 
	`T˛_Cª©eComm™d
(
öãΩ
, "md5fûe", (
T˛_CmdProc
*)
md5fûe_cmd
, 0, 0);

352  
TCL_OK
;

353 
	}
}

359 
	$md5°ï
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

360 
MD5C⁄ãxt
 *
p
;

361 
i
;

362 if–
¨gc
<1 ) ;

363 
p
 = 
	`sqlôe_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

364 if–
p
==0 ) ;

365 if–
	`sqlôe_aggªg©e_cou¡
(
c⁄ãxt
)==1 ){

366 
	`MD5Inô
(
p
);

368 
i
=0; i<
¨gc
; i++){

369 if–
¨gv
[
i
] ){

370 
	`MD5Upd©e
(
p
, (*)
¨gv
[
i
], 
	`°æí
(argv[i]));

373 
	}
}

374 
	$md5föÆize
(
sqlôe_func
 *
c⁄ãxt
){

375 
MD5C⁄ãxt
 *
p
;

376 
dige°
[16];

377 
zBuf
[33];

378 
p
 = 
	`sqlôe_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

379 
	`MD5FöÆ
(
dige°
,
p
);

380 
	`Dige°ToBa£16
(
dige°
, 
zBuf
);

381 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
zBuf
, 
	`°æí
(zBuf));

382 
	}
}

383 
	$Md5_Regi°î
(
sqlôe
 *
db
){

384 
	`sqlôe_¸óã_aggªg©e
(
db
, "md5sum", -1, 
md5°ï
, 
md5föÆize
, 0);

385 
	}
}

	@os.c

17 
	~"os.h
"

18 
	~"sqlôeI¡.h
"

20 #i‡
OS_UNIX


21 
	~<time.h
>

22 
	~<î∫o.h
>

23 
	~<uni°d.h
>

24 #i‚de‡
O_LARGEFILE


25 
	#O_LARGEFILE
 0

	)

27 #ifde‡
SQLITE_DISABLE_LFS


28 #unde‡
O_LARGEFILE


29 
	#O_LARGEFILE
 0

	)

31 #i‚de‡
O_NOFOLLOW


32 
	#O_NOFOLLOW
 0

	)

34 #i‚de‡
O_BINARY


35 
	#O_BINARY
 0

	)

40 #i‡
OS_WIN


41 
	~<wöba£.h
>

44 #i‡
OS_MAC


45 
	~<exåas.h
>

46 
	~<∑th2fss.h
>

47 
	~<TextUtûs.h
>

48 
	~<FödîRegi°ry.h
>

49 
	~<Fﬁdîs.h
>

50 
	~<Timî.h
>

51 
	~<OSUtûs.h
>

60 #ifde‡
__DJGPP__


61 
	#f˙é
(
A
,
B
,
C
Ë0

	)

70 #i‡
OS_UNIX
 && 
deföed
(
THREADSAFE
) && THREADSAFE

71 
	~<±hªad.h
>

72 
	#SQLITE_UNIX_THREADS
 1

	)

74 #i‡
OS_WIN
 && 
deföed
(
THREADSAFE
) && THREADSAFE

75 
	#SQLITE_W32_THREADS
 1

	)

77 #i‡
OS_MAC
 && 
deföed
(
THREADSAFE
) && THREADSAFE

78 
	~<Mu…ùro˚ssög.h
>

79 
	#SQLITE_MACOS_MULTITASKING
 1

	)

86 
	gœ°_∑ge
 = 0;

87 
__ölöe__
 
	$hwtime
(){

88 
x
;

89 
	`__asm__
("rdtsc\n\t"

91 :"=A" (
x
));

92  
x
;

93 
	}
}

94 
	gg_°¨t
;

95 
	gñ≠£
;

96 
	#TIMER_START
 
g_°¨t
=
	`hwtime
()

	)

97 
	#TIMER_END
 
ñ≠£
=
	`hwtime
()-
g_°¨t


	)

98 
	#SEEK
(
X
Ë
œ°_∑ge
=(X)

	)

99 
	#TRACE1
(
X
Ë
	`Ârötf
(
°dîr
,X)

	)

100 
	#TRACE2
(
X
,
Y
Ë
	`Ârötf
(
°dîr
,X,Y)

	)

101 
	#TRACE3
(
X
,
Y
,
Z
Ë
	`Ârötf
(
°dîr
,X,Y,Z)

	)

102 
	#TRACE4
(
X
,
Y
,
Z
,
A
Ë
	`Ârötf
(
°dîr
,X,Y,Z,A)

	)

103 
	#TRACE5
(
X
,
Y
,
Z
,
A
,
B
Ë
	`Ârötf
(
°dîr
,X,Y,Z,A,B)

	)

105 
	#TIMER_START


	)

106 
	#TIMER_END


	)

107 
	#SEEK
(
X
)

	)

108 
	#TRACE1
(
X
)

	)

109 
	#TRACE2
(
X
,
Y
)

	)

110 
	#TRACE3
(
X
,
Y
,
Z
)

	)

111 
	#TRACE4
(
X
,
Y
,
Z
,
A
)

	)

112 
	#TRACE5
(
X
,
Y
,
Z
,
A
,
B
)

	)

116 #i‡
OS_UNIX


209 
	slockKey
 {

210 
dev_t
 
	mdev
;

211 
öo_t
 
	möo
;

212 
pid_t
 
	mpid
;

224 
	slockInfo
 {

225 
lockKey
 
	mkey
;

226 
	m˙t
;

227 
	mnRef
;

235 
	s›íKey
 {

236 
dev_t
 
	mdev
;

237 
öo_t
 
	möo
;

247 
	s›íC¡
 {

248 
›íKey
 
	mkey
;

249 
	mnRef
;

250 
	mnLock
;

251 
	mnPídög
;

252 *
	maPídög
;

259 
Hash
 
	glockHash
 = { 
SQLITE_HASH_BINARY
, 0, 0, 0, 0, 0 };

260 
Hash
 
	g›íHash
 = { 
SQLITE_HASH_BINARY
, 0, 0, 0, 0, 0 };

265 
	$ªÀa£LockInfo
(
lockInfo
 *
pLock
){

266 
pLock
->
nRef
--;

267 if–
pLock
->
nRef
==0 ){

268 
	`sqlôeHashIn£π
(&
lockHash
, &
pLock
->
key
, (pLock->key), 0);

269 
	`sqlôeFªe
(
pLock
);

271 
	}
}

276 
	$ªÀa£O≥nC¡
(
›íC¡
 *
pO≥n
){

277 
pO≥n
->
nRef
--;

278 if–
pO≥n
->
nRef
==0 ){

279 
	`sqlôeHashIn£π
(&
›íHash
, &
pO≥n
->
key
, (pOpen->key), 0);

280 
	`sqlôeFªe
(
pO≥n
->
aPídög
);

281 
	`sqlôeFªe
(
pO≥n
);

283 
	}
}

292 
	$födLockInfo
(

293 
fd
,

294 
lockInfo
 **
µLock
,

295 
›íC¡
 **
µO≥n


297 
rc
;

298 
lockKey
 
key1
;

299 
›íKey
 
key2
;

300 
°©
 
°©buf
;

301 
lockInfo
 *
pLock
;

302 
›íC¡
 *
pO≥n
;

303 
rc
 = 
	`f°©
(
fd
, &
°©buf
);

304 if–
rc
!=0 )  1;

305 
	`mem£t
(&
key1
, 0, (key1));

306 
key1
.
dev
 = 
°©buf
.
°_dev
;

307 
key1
.
öo
 = 
°©buf
.
°_öo
;

308 
key1
.
pid
 = 
	`gëpid
();

309 
	`mem£t
(&
key2
, 0, (key2));

310 
key2
.
dev
 = 
°©buf
.
°_dev
;

311 
key2
.
öo
 = 
°©buf
.
°_öo
;

312 
pLock
 = (
lockInfo
*)
	`sqlôeHashFöd
(&
lockHash
, &
key1
, (key1));

313 if–
pLock
==0 ){

314 
lockInfo
 *
pOld
;

315 
pLock
 = 
	`sqlôeMÆlocRaw
( (*pLock) );

316 if–
pLock
==0 )  1;

317 
pLock
->
key
 = 
key1
;

318 
pLock
->
nRef
 = 1;

319 
pLock
->
˙t
 = 0;

320 
pOld
 = 
	`sqlôeHashIn£π
(&
lockHash
, &
pLock
->
key
, (
key1
),ÖLock);

321 if–
pOld
!=0 ){

322 
	`as£π
–
pOld
==
pLock
 );

323 
	`sqlôeFªe
(
pLock
);

327 
pLock
->
nRef
++;

329 *
µLock
 = 
pLock
;

330 
pO≥n
 = (
›íC¡
*)
	`sqlôeHashFöd
(&
›íHash
, &
key2
, (key2));

331 if–
pO≥n
==0 ){

332 
›íC¡
 *
pOld
;

333 
pO≥n
 = 
	`sqlôeMÆlocRaw
( (*pOpen) );

334 if–
pO≥n
==0 ){

335 
	`ªÀa£LockInfo
(
pLock
);

338 
pO≥n
->
key
 = 
key2
;

339 
pO≥n
->
nRef
 = 1;

340 
pO≥n
->
nLock
 = 0;

341 
pO≥n
->
nPídög
 = 0;

342 
pO≥n
->
aPídög
 = 0;

343 
pOld
 = 
	`sqlôeHashIn£π
(&
›íHash
, &
pO≥n
->
key
, (
key2
),ÖOpen);

344 if–
pOld
!=0 ){

345 
	`as£π
–
pOld
==
pO≥n
 );

346 
	`sqlôeFªe
(
pO≥n
);

347 
	`ªÀa£LockInfo
(
pLock
);

351 
pO≥n
->
nRef
++;

353 *
µO≥n
 = 
pO≥n
;

355 
	}
}

364 #ifde‡
SQLITE_TEST


365 
	gsqlôe_io_îr‹_≥ndög
 = 0;

366 
	#SimuœãIOEº‹
(
A
) \

367 if–
sqlôe_io_îr‹_≥ndög
 ) \

368 if–
sqlôe_io_îr‹_≥ndög
-- =1 ){ 
	`loˇl_i€º
();  
A
; }

	)

369 
	$loˇl_i€º
(){

370 
sqlôe_io_îr‹_≥ndög
 = 0;

371 
	}
}

373 
	#SimuœãIOEº‹
(
A
)

	)

379 #ifde‡
SQLITE_TEST


380 
	gsqlôe_›í_fûe_cou¡
 = 0;

381 
	#O≥nCou¡î
(
X
Ë
sqlôe_›í_fûe_cou¡
+=(X)

	)

383 
	#O≥nCou¡î
(
X
)

	)

390 
	$sqlôeOsDñëe
(c⁄° *
zFûíame
){

391 #i‡
OS_UNIX


392 
	`u∆ök
(
zFûíame
);

394 #i‡
OS_WIN


395 
	`DñëeFûe
(
zFûíame
);

397 #i‡
OS_MAC


398 
	`u∆ök
(
zFûíame
);

400  
SQLITE_OK
;

401 
	}
}

406 
	$sqlôeOsFûeExi°s
(c⁄° *
zFûíame
){

407 #i‡
OS_UNIX


408  
	`ac˚ss
(
zFûíame
, 0)==0;

410 #i‡
OS_WIN


411  
	`GëFûeAâribuãs
(
zFûíame
) != 0xffffffff;

413 #i‡
OS_MAC


414  
	`ac˚ss
(
zFûíame
, 0)==0;

416 
	}
}

423 
	$sqlôeOsFûeRíame
(c⁄° *
zOldName
, c⁄° *
zNewName
){

424 #i‡
OS_UNIX


425 if–
	`lök
(
zOldName
, 
zNewName
) ){

426  
SQLITE_ERROR
;

428 
	`u∆ök
(
zOldName
);

429  
SQLITE_OK
;

431 #i‡
OS_WIN


432 if–!
	`MoveFûe
(
zOldName
, 
zNewName
) ){

433  
SQLITE_ERROR
;

435  
SQLITE_OK
;

437 #i‡
OS_MAC


439  
SQLITE_ERROR
;

441 
	}
}

457 
	$sqlôeOsO≥nRódWrôe
(

458 c⁄° *
zFûíame
,

459 
OsFûe
 *
id
,

460 *
pRód⁄ly


462 #i‡
OS_UNIX


463 
rc
;

464 
id
->
dúfd
 = -1;

465 
id
->
fd
 = 
	`›í
(
zFûíame
, 
O_RDWR
|
O_CREAT
|
O_LARGEFILE
|
O_BINARY
, 0644);

466 if–
id
->
fd
<0 ){

467 #ifde‡
EISDIR


468 if–
î∫o
==
EISDIR
 ){

469  
SQLITE_CANTOPEN
;

472 
id
->
fd
 = 
	`›í
(
zFûíame
, 
O_RDONLY
|
O_LARGEFILE
|
O_BINARY
);

473 if–
id
->
fd
<0 ){

474  
SQLITE_CANTOPEN
;

476 *
pRód⁄ly
 = 1;

478 *
pRód⁄ly
 = 0;

480 
	`sqlôeOsE¡îMuãx
();

481 
rc
 = 
	`födLockInfo
(
id
->
fd
, &id->
pLock
, &id->
pO≥n
);

482 
	`sqlôeOsLóveMuãx
();

483 if–
rc
 ){

484 
	`˛o£
(
id
->
fd
);

485  
SQLITE_NOMEM
;

487 
id
->
locked
 = 0;

488 
	`TRACE3
("OPEN %-3d %s\n", 
id
->
fd
, 
zFûíame
);

489 
	`O≥nCou¡î
(+1);

490  
SQLITE_OK
;

492 #i‡
OS_WIN


493 
HANDLE
 
h
 = 
	`Cª©eFûe
(
zFûíame
,

494 
GENERIC_READ
 | 
GENERIC_WRITE
,

495 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
,

496 
NULL
,

497 
OPEN_ALWAYS
,

498 
FILE_ATTRIBUTE_NORMAL
 | 
FILE_FLAG_RANDOM_ACCESS
,

499 
NULL


501 if–
h
==
INVALID_HANDLE_VALUE
 ){

502 
h
 = 
	`Cª©eFûe
(
zFûíame
,

503 
GENERIC_READ
,

504 
FILE_SHARE_READ
,

505 
NULL
,

506 
OPEN_ALWAYS
,

507 
FILE_ATTRIBUTE_NORMAL
 | 
FILE_FLAG_RANDOM_ACCESS
,

508 
NULL


510 if–
h
==
INVALID_HANDLE_VALUE
 ){

511  
SQLITE_CANTOPEN
;

513 *
pRód⁄ly
 = 1;

515 *
pRód⁄ly
 = 0;

517 
id
->
h
 = h;

518 
id
->
locked
 = 0;

519 
	`O≥nCou¡î
(+1);

520  
SQLITE_OK
;

522 #i‡
OS_MAC


523 
FSS≥c
 
fsS≥c
;

524 #ifde‡
_LARGE_FILE


525 
HFSUniSå255
 
dfName
;

526 
FSRef
 
fsRef
;

527 if–
	`__∑th2fss
(
zFûíame
, &
fsS≥c
Ë!
noEº
 ){

528 if–
	`HCª©e
(
fsS≥c
.
vRefNum
, fsS≥c.
∑rID
, fsS≥c.
«me
, 'SQLI', 
cDocumítFûe
Ë!
noEº
 )

529  
SQLITE_CANTOPEN
;

531 if–
	`FSpMakeFSRef
(&
fsS≥c
, &
fsRef
Ë!
noEº
 )

532  
SQLITE_CANTOPEN
;

533 
	`FSGëD©aF‹kName
(&
dfName
);

534 if–
	`FSO≥nF‹k
(&
fsRef
, 
dfName
.
Àngth
, dfName.
unicode
,

535 
fsRdWrShPîm
, &(
id
->
ªfNum
)Ë!
noEº
 ){

536 if–
	`FSO≥nF‹k
(&
fsRef
, 
dfName
.
Àngth
, dfName.
unicode
,

537 
fsRdWrPîm
, &(
id
->
ªfNum
)Ë!
noEº
 ){

538 i‡(
	`FSO≥nF‹k
(&
fsRef
, 
dfName
.
Àngth
, dfName.
unicode
,

539 
fsRdPîm
, &(
id
->
ªfNum
)Ë!
noEº
 )

540  
SQLITE_CANTOPEN
;

542 *
pRód⁄ly
 = 1;

544 *
pRód⁄ly
 = 0;

546 *
pRód⁄ly
 = 0;

548 
	`__∑th2fss
(
zFûíame
, &
fsS≥c
);

549 if–!
	`sqlôeOsFûeExi°s
(
zFûíame
) ){

550 if–
	`HCª©e
(
fsS≥c
.
vRefNum
, fsS≥c.
∑rID
, fsS≥c.
«me
, 'SQLI', 
cDocumítFûe
Ë!
noEº
 )

551  
SQLITE_CANTOPEN
;

553 if–
	`HO≥nDF
(
fsS≥c
.
vRefNum
, fsS≥c.
∑rID
, fsS≥c.
«me
, 
fsRdWrShPîm
, &(
id
->
ªfNum
)Ë!
noEº
 ){

554 if–
	`HO≥nDF
(
fsS≥c
.
vRefNum
, fsS≥c.
∑rID
, fsS≥c.
«me
, 
fsRdWrPîm
, &(
id
->
ªfNum
)Ë!
noEº
 ){

555 if–
	`HO≥nDF
(
fsS≥c
.
vRefNum
, fsS≥c.
∑rID
, fsS≥c.
«me
, 
fsRdPîm
, &(
id
->
ªfNum
)Ë!
noEº
 )

556  
SQLITE_CANTOPEN
;

558 *
pRód⁄ly
 = 1;

560 *
pRód⁄ly
 = 0;

562 *
pRód⁄ly
 = 0;

564 if–
	`HO≥nRF
(
fsS≥c
.
vRefNum
, fsS≥c.
∑rID
, fsS≥c.
«me
, 
fsRdWrShPîm
, &(
id
->
ªfNumRF
)Ë!
noEº
){

565 
id
->
ªfNumRF
 = -1;

567 
id
->
locked
 = 0;

568 
id
->
dñOnClo£
 = 0;

569 
	`O≥nCou¡î
(+1);

570  
SQLITE_OK
;

572 
	}
}

589 
	$sqlôeOsO≥nEx˛usive
(c⁄° *
zFûíame
, 
OsFûe
 *
id
, 
dñFœg
){

590 #i‡
OS_UNIX


591 
rc
;

592 if–
	`ac˚ss
(
zFûíame
, 0)==0 ){

593  
SQLITE_CANTOPEN
;

595 
id
->
dúfd
 = -1;

596 
id
->
fd
 = 
	`›í
(
zFûíame
,

597 
O_RDWR
|
O_CREAT
|
O_EXCL
|
O_NOFOLLOW
|
O_LARGEFILE
|
O_BINARY
, 0600);

598 if–
id
->
fd
<0 ){

599  
SQLITE_CANTOPEN
;

601 
	`sqlôeOsE¡îMuãx
();

602 
rc
 = 
	`födLockInfo
(
id
->
fd
, &id->
pLock
, &id->
pO≥n
);

603 
	`sqlôeOsLóveMuãx
();

604 if–
rc
 ){

605 
	`˛o£
(
id
->
fd
);

606 
	`u∆ök
(
zFûíame
);

607  
SQLITE_NOMEM
;

609 
id
->
locked
 = 0;

610 if–
dñFœg
 ){

611 
	`u∆ök
(
zFûíame
);

613 
	`TRACE3
("OPEN-EX %-3d %s\n", 
id
->
fd
, 
zFûíame
);

614 
	`O≥nCou¡î
(+1);

615  
SQLITE_OK
;

617 #i‡
OS_WIN


618 
HANDLE
 
h
;

619 
fûeÊags
;

620 if–
dñFœg
 ){

621 
fûeÊags
 = 
FILE_ATTRIBUTE_TEMPORARY
 | 
FILE_FLAG_RANDOM_ACCESS


622 | 
FILE_FLAG_DELETE_ON_CLOSE
;

624 
fûeÊags
 = 
FILE_FLAG_RANDOM_ACCESS
;

626 
h
 = 
	`Cª©eFûe
(
zFûíame
,

627 
GENERIC_READ
 | 
GENERIC_WRITE
,

629 
NULL
,

630 
CREATE_ALWAYS
,

631 
fûeÊags
,

632 
NULL


634 if–
h
==
INVALID_HANDLE_VALUE
 ){

635  
SQLITE_CANTOPEN
;

637 
id
->
h
 = h;

638 
id
->
locked
 = 0;

639 
	`O≥nCou¡î
(+1);

640  
SQLITE_OK
;

642 #i‡
OS_MAC


643 
FSS≥c
 
fsS≥c
;

644 #ifde‡
_LARGE_FILE


645 
HFSUniSå255
 
dfName
;

646 
FSRef
 
fsRef
;

647 
	`__∑th2fss
(
zFûíame
, &
fsS≥c
);

648 if–
	`HCª©e
(
fsS≥c
.
vRefNum
, fsS≥c.
∑rID
, fsS≥c.
«me
, 'SQLI', 
cDocumítFûe
Ë!
noEº
 )

649  
SQLITE_CANTOPEN
;

650 if–
	`FSpMakeFSRef
(&
fsS≥c
, &
fsRef
Ë!
noEº
 )

651  
SQLITE_CANTOPEN
;

652 
	`FSGëD©aF‹kName
(&
dfName
);

653 if–
	`FSO≥nF‹k
(&
fsRef
, 
dfName
.
Àngth
, dfName.
unicode
,

654 
fsRdWrPîm
, &(
id
->
ªfNum
)Ë!
noEº
 )

655  
SQLITE_CANTOPEN
;

657 
	`__∑th2fss
(
zFûíame
, &
fsS≥c
);

658 if–
	`HCª©e
(
fsS≥c
.
vRefNum
, fsS≥c.
∑rID
, fsS≥c.
«me
, 'SQLI', 
cDocumítFûe
Ë!
noEº
 )

659  
SQLITE_CANTOPEN
;

660 if–
	`HO≥nDF
(
fsS≥c
.
vRefNum
, fsS≥c.
∑rID
, fsS≥c.
«me
, 
fsRdWrPîm
, &(
id
->
ªfNum
)Ë!
noEº
 )

661  
SQLITE_CANTOPEN
;

663 
id
->
ªfNumRF
 = -1;

664 
id
->
locked
 = 0;

665 
id
->
dñOnClo£
 = 
dñFœg
;

666 i‡(
dñFœg
)

667 
id
->
∑thToDñ
 = 
	`sqlôeOsFuŒP©h«me
(
zFûíame
);

668 
	`O≥nCou¡î
(+1);

669  
SQLITE_OK
;

671 
	}
}

680 
	$sqlôeOsO≥nRódO∆y
(c⁄° *
zFûíame
, 
OsFûe
 *
id
){

681 #i‡
OS_UNIX


682 
rc
;

683 
id
->
dúfd
 = -1;

684 
id
->
fd
 = 
	`›í
(
zFûíame
, 
O_RDONLY
|
O_LARGEFILE
|
O_BINARY
);

685 if–
id
->
fd
<0 ){

686  
SQLITE_CANTOPEN
;

688 
	`sqlôeOsE¡îMuãx
();

689 
rc
 = 
	`födLockInfo
(
id
->
fd
, &id->
pLock
, &id->
pO≥n
);

690 
	`sqlôeOsLóveMuãx
();

691 if–
rc
 ){

692 
	`˛o£
(
id
->
fd
);

693  
SQLITE_NOMEM
;

695 
id
->
locked
 = 0;

696 
	`TRACE3
("OPEN-RO %-3d %s\n", 
id
->
fd
, 
zFûíame
);

697 
	`O≥nCou¡î
(+1);

698  
SQLITE_OK
;

700 #i‡
OS_WIN


701 
HANDLE
 
h
 = 
	`Cª©eFûe
(
zFûíame
,

702 
GENERIC_READ
,

704 
NULL
,

705 
OPEN_EXISTING
,

706 
FILE_ATTRIBUTE_NORMAL
 | 
FILE_FLAG_RANDOM_ACCESS
,

707 
NULL


709 if–
h
==
INVALID_HANDLE_VALUE
 ){

710  
SQLITE_CANTOPEN
;

712 
id
->
h
 = h;

713 
id
->
locked
 = 0;

714 
	`O≥nCou¡î
(+1);

715  
SQLITE_OK
;

717 #i‡
OS_MAC


718 
FSS≥c
 
fsS≥c
;

719 #ifde‡
_LARGE_FILE


720 
HFSUniSå255
 
dfName
;

721 
FSRef
 
fsRef
;

722 if–
	`__∑th2fss
(
zFûíame
, &
fsS≥c
Ë!
noEº
 )

723  
SQLITE_CANTOPEN
;

724 if–
	`FSpMakeFSRef
(&
fsS≥c
, &
fsRef
Ë!
noEº
 )

725  
SQLITE_CANTOPEN
;

726 
	`FSGëD©aF‹kName
(&
dfName
);

727 if–
	`FSO≥nF‹k
(&
fsRef
, 
dfName
.
Àngth
, dfName.
unicode
,

728 
fsRdPîm
, &(
id
->
ªfNum
)Ë!
noEº
 )

729  
SQLITE_CANTOPEN
;

731 
	`__∑th2fss
(
zFûíame
, &
fsS≥c
);

732 if–
	`HO≥nDF
(
fsS≥c
.
vRefNum
, fsS≥c.
∑rID
, fsS≥c.
«me
, 
fsRdPîm
, &(
id
->
ªfNum
)Ë!
noEº
 )

733  
SQLITE_CANTOPEN
;

735 if–
	`HO≥nRF
(
fsS≥c
.
vRefNum
, fsS≥c.
∑rID
, fsS≥c.
«me
, 
fsRdWrShPîm
, &(
id
->
ªfNumRF
)Ë!
noEº
){

736 
id
->
ªfNumRF
 = -1;

738 
id
->
locked
 = 0;

739 
id
->
dñOnClo£
 = 0;

740 
	`O≥nCou¡î
(+1);

741  
SQLITE_OK
;

743 
	}
}

761 
	$sqlôeOsO≥nDúe˘‹y
(

762 c⁄° *
zDú«me
,

763 
OsFûe
 *
id


765 #i‡
OS_UNIX


766 if–
id
->
fd
<0 ){

769  
SQLITE_CANTOPEN
;

771 
	`as£π
–
id
->
dúfd
<0 );

772 
id
->
dúfd
 = 
	`›í
(
zDú«me
, 
O_RDONLY
|
O_BINARY
, 0644);

773 if–
id
->
dúfd
<0 ){

774  
SQLITE_CANTOPEN
;

776 
	`TRACE3
("OPENDIR %-3d %s\n", 
id
->
dúfd
, 
zDú«me
);

778  
SQLITE_OK
;

779 
	}
}

786 c⁄° *
	gsqlôe_ãmp_dúe˘‹y
 = 0;

792 
	$sqlôeOsTempFûeName
(*
zBuf
){

793 #i‡
OS_UNIX


794 c⁄° *
azDús
[] = {

801 
zCh¨s
[] =

805 
i
, 
j
;

806 
°©
 
buf
;

807 c⁄° *
zDú
 = ".";

808 
azDús
[0] = 
sqlôe_ãmp_dúe˘‹y
;

809 
i
=0; i<(
azDús
)/(azDirs[0]); i++){

810 if–
azDús
[
i
]==0 ) ;

811 if–
	`°©
(
azDús
[
i
], &
buf
) ) ;

812 if–!
	`S_ISDIR
(
buf
.
°_mode
) ) ;

813 if–
	`ac˚ss
(
azDús
[
i
], 07) ) ;

814 
zDú
 = 
azDús
[
i
];

818 
	`•rötf
(
zBuf
, "%s/"
TEMP_FILE_PREFIX
, 
zDú
);

819 
j
 = 
	`°æí
(
zBuf
);

820 
	`sqlôeR™dom√ss
(15, &
zBuf
[
j
]);

821 
i
=0; i<15; i++, 
j
++){

822 
zBuf
[
j
] = ()
zCh¨s
[ (()zBuf[j])%((zChars)-1) ];

824 
zBuf
[
j
] = 0;

825 } 
	`ac˚ss
(
zBuf
,0)==0 );

827 #i‡
OS_WIN


828 
zCh¨s
[] =

832 
i
, 
j
;

833 c⁄° *
zDú
;

834 
zTempP©h
[
SQLITE_TEMPNAME_SIZE
];

835 if–
sqlôe_ãmp_dúe˘‹y
==0 ){

836 
	`GëTempP©h
(
SQLITE_TEMPNAME_SIZE
-30, 
zTempP©h
);

837 
i
=
	`°æí
(
zTempP©h
); i>0 && zTempPath[i-1]=='\\'; i--){}

838 
zTempP©h
[
i
] = 0;

839 
zDú
 = 
zTempP©h
;

841 
zDú
 = 
sqlôe_ãmp_dúe˘‹y
;

844 
	`•rötf
(
zBuf
, "%s\\"
TEMP_FILE_PREFIX
, 
zDú
);

845 
j
 = 
	`°æí
(
zBuf
);

846 
	`sqlôeR™dom√ss
(15, &
zBuf
[
j
]);

847 
i
=0; i<15; i++, 
j
++){

848 
zBuf
[
j
] = ()
zCh¨s
[ (()zBuf[j])%((zChars)-1) ];

850 
zBuf
[
j
] = 0;

851 if–!
	`sqlôeOsFûeExi°s
(
zBuf
) ) ;

854 #i‡
OS_MAC


855 
zCh¨s
[] =

859 
i
, 
j
;

860 *
zDú
;

861 
zTempP©h
[
SQLITE_TEMPNAME_SIZE
];

862 
zdúName
[32];

863 
CInfoPBRec
 
öfoRec
;

864 
Så31
 
dúName
;

865 
	`mem£t
(&
öfoRec
, 0, (infoRec));

866 
	`mem£t
(
zTempP©h
, 0, 
SQLITE_TEMPNAME_SIZE
);

867 if–
sqlôe_ãmp_dúe˘‹y
!=0 ){

868 
zDú
 = 
sqlôe_ãmp_dúe˘‹y
;

869 }if–
	`FödFﬁdî
(
kOnSy°emDisk
, 
kTemp‹¨yFﬁdîTy≥
, 
kCª©eFﬁdî
,

870 &(
öfoRec
.
dúInfo
.
ioVRefNum
), &(öfoRec.dúInfo.
ioDrP¨ID
)Ë=
noEº
 ){

871 
öfoRec
.
dúInfo
.
ioNamePå
 = 
dúName
;

873 
öfoRec
.
dúInfo
.
ioFDúIndex
 = -1;

874 
öfoRec
.
dúInfo
.
ioDrDúID
 = infoRec.dúInfo.
ioDrP¨ID
;

875 if–
	`PBGëC©InfoSync
(&
öfoRec
Ë=
noEº
 ){

876 
	`C›yPasˇlSåögToC
(
dúName
, 
zdúName
);

877 
i
 = 
	`°æí
(
zdúName
);

878 
	`memmove
(&(
zTempP©h
[
i
+1]), zTempP©h, 
	`°æí
(zTempPath));

879 
	`°r˝y
(
zTempP©h
, 
zdúName
);

880 
zTempP©h
[
i
] = ':';

882 *
zTempP©h
 = 0;

885 }  
öfoRec
.
dúInfo
.
ioDrDúID
 !
fsRtDúID
 );

886 
zDú
 = 
zTempP©h
;

888 if–
zDú
[0]==0 ){

889 
	`gëcwd
(
zTempP©h
, 
SQLITE_TEMPNAME_SIZE
-24);

890 
zDú
 = 
zTempP©h
;

893 
	`•rötf
(
zBuf
, "%s"
TEMP_FILE_PREFIX
, 
zDú
);

894 
j
 = 
	`°æí
(
zBuf
);

895 
	`sqlôeR™dom√ss
(15, &
zBuf
[
j
]);

896 
i
=0; i<15; i++, 
j
++){

897 
zBuf
[
j
] = ()
zCh¨s
[ (()zBuf[j])%((zChars)-1) ];

899 
zBuf
[
j
] = 0;

900 if–!
	`sqlôeOsFûeExi°s
(
zBuf
) ) ;

903  
SQLITE_OK
;

904 
	}
}

909 
	$sqlôeOsClo£
(
OsFûe
 *
id
){

910 #i‡
OS_UNIX


911 
	`sqlôeOsU∆ock
(
id
);

912 if–
id
->
dúfd
>=0 ) 
	`˛o£
(id->dirfd);

913 
id
->
dúfd
 = -1;

914 
	`sqlôeOsE¡îMuãx
();

915 if–
id
->
pO≥n
->
nLock
 ){

921 *
aNew
;

922 
›íC¡
 *
pO≥n
 = 
id
->pOpen;

923 
pO≥n
->
nPídög
++;

924 
aNew
 = 
	`sqlôeRóŒoc
–
pO≥n
->
aPídög
,ÖO≥n->
nPídög
*() );

925 if–
aNew
==0 ){

928 
pO≥n
->
aPídög
 = 
aNew
;

929 
pO≥n
->
aPídög
[pO≥n->
nPídög
-1] = 
id
->
fd
;

933 
	`˛o£
(
id
->
fd
);

935 
	`ªÀa£LockInfo
(
id
->
pLock
);

936 
	`ªÀa£O≥nC¡
(
id
->
pO≥n
);

937 
	`sqlôeOsLóveMuãx
();

938 
	`TRACE2
("CLOSE %-3d\n", 
id
->
fd
);

939 
	`O≥nCou¡î
(-1);

940  
SQLITE_OK
;

942 #i‡
OS_WIN


943 
	`Clo£H™dÀ
(
id
->
h
);

944 
	`O≥nCou¡î
(-1);

945  
SQLITE_OK
;

947 #i‡
OS_MAC


948 if–
id
->
ªfNumRF
!=-1 )

949 
	`FSClo£
(
id
->
ªfNumRF
);

950 #ifde‡
_LARGE_FILE


951 
	`FSClo£F‹k
(
id
->
ªfNum
);

953 
	`FSClo£
(
id
->
ªfNum
);

955 if–
id
->
dñOnClo£
 ){

956 
	`u∆ök
(
id
->
∑thToDñ
);

957 
	`sqlôeFªe
(
id
->
∑thToDñ
);

959 
	`O≥nCou¡î
(-1);

960  
SQLITE_OK
;

962 
	}
}

969 
	$sqlôeOsRód
(
OsFûe
 *
id
, *
pBuf
, 
amt
){

970 #i‡
OS_UNIX


971 
gŸ
;

972 
	`SimuœãIOEº‹
(
SQLITE_IOERR
);

973 
TIMER_START
;

974 
gŸ
 = 
	`ªad
(
id
->
fd
, 
pBuf
, 
amt
);

975 
TIMER_END
;

976 
	`TRACE4
("READ %-3d %7d %d\n", 
id
->
fd
, 
œ°_∑ge
, 
ñ≠£
);

977 
	`SEEK
(0);

979 if–
gŸ
==
amt
 ){

980  
SQLITE_OK
;

982  
SQLITE_IOERR
;

985 #i‡
OS_WIN


986 
DWORD
 
gŸ
;

987 
	`SimuœãIOEº‹
(
SQLITE_IOERR
);

988 
	`TRACE2
("READ %d\n", 
œ°_∑ge
);

989 if–!
	`RódFûe
(
id
->
h
, 
pBuf
, 
amt
, &
gŸ
, 0) ){

990 
gŸ
 = 0;

992 if–
gŸ
==(
DWORD
)
amt
 ){

993  
SQLITE_OK
;

995  
SQLITE_IOERR
;

998 #i‡
OS_MAC


999 
gŸ
;

1000 
	`SimuœãIOEº‹
(
SQLITE_IOERR
);

1001 
	`TRACE2
("READ %d\n", 
œ°_∑ge
);

1002 #ifde‡
_LARGE_FILE


1003 
	`FSRódF‹k
(
id
->
ªfNum
, 
fsAtM¨k
, 0, (
ByãCou¡
)
amt
, 
pBuf
, (ByãCou¡*)&
gŸ
);

1005 
gŸ
 = 
amt
;

1006 
	`FSRód
(
id
->
ªfNum
, &
gŸ
, 
pBuf
);

1008 if–
gŸ
==
amt
 ){

1009  
SQLITE_OK
;

1011  
SQLITE_IOERR
;

1014 
	}
}

1020 
	$sqlôeOsWrôe
(
OsFûe
 *
id
, c⁄° *
pBuf
, 
amt
){

1021 #i‡
OS_UNIX


1022 
wrŸe
 = 0;

1023 
	`SimuœãIOEº‹
(
SQLITE_IOERR
);

1024 
TIMER_START
;

1025  
amt
>0 && (
wrŸe
 = 
	`wrôe
(
id
->
fd
, 
pBuf
,ámt))>0 ){

1026 
amt
 -
wrŸe
;

1027 
pBuf
 = &((*ÌBuf)[
wrŸe
];

1029 
TIMER_END
;

1030 
	`TRACE4
("WRITE %-3d %7d %d\n", 
id
->
fd
, 
œ°_∑ge
, 
ñ≠£
);

1031 
	`SEEK
(0);

1032 if–
amt
>0 ){

1033  
SQLITE_FULL
;

1035  
SQLITE_OK
;

1037 #i‡
OS_WIN


1038 
rc
;

1039 
DWORD
 
wrŸe
;

1040 
	`SimuœãIOEº‹
(
SQLITE_IOERR
);

1041 
	`TRACE2
("WRITE %d\n", 
œ°_∑ge
);

1042  
amt
>0 && (
rc
 = 
	`WrôeFûe
(
id
->
h
, 
pBuf
,ámt, &
wrŸe
, 0))!=0 && wrote>0 ){

1043 
amt
 -
wrŸe
;

1044 
pBuf
 = &((*ÌBuf)[
wrŸe
];

1046 if–!
rc
 || 
amt
>()
wrŸe
 ){

1047  
SQLITE_FULL
;

1049  
SQLITE_OK
;

1051 #i‡
OS_MAC


1052 
OSEº
 
o£º
;

1053 
wrŸe
 = 0;

1054 
	`SimuœãIOEº‹
(
SQLITE_IOERR
);

1055 
	`TRACE2
("WRITE %d\n", 
œ°_∑ge
);

1056  
amt
>0 ){

1057 #ifde‡
_LARGE_FILE


1058 
o£º
 = 
	`FSWrôeF‹k
(
id
->
ªfNum
, 
fsAtM¨k
, 0,

1059 (
ByãCou¡
)
amt
, 
pBuf
, (ByãCou¡*)&
wrŸe
);

1061 
wrŸe
 = 
amt
;

1062 
o£º
 = 
	`FSWrôe
(
id
->
ªfNum
, &
wrŸe
, 
pBuf
);

1064 if–
wrŸe
 =0 || 
o£º
 !
noEº
)

1066 
amt
 -
wrŸe
;

1067 
pBuf
 = &((*ÌBuf)[
wrŸe
];

1069 if–
o£º
 !
noEº
 || 
amt
>
wrŸe
 ){

1070  
SQLITE_FULL
;

1072  
SQLITE_OK
;

1074 
	}
}

1079 
	$sqlôeOsSìk
(
OsFûe
 *
id
, 
off_t
 
off£t
){

1080 
	`SEEK
(
off£t
/1024 + 1);

1081 #i‡
OS_UNIX


1082 
	`l£ek
(
id
->
fd
, 
off£t
, 
SEEK_SET
);

1083  
SQLITE_OK
;

1085 #i‡
OS_WIN


1087 
LONG
 
uµîBôs
 = 
off£t
>>32;

1088 
LONG
 
lowîBôs
 = 
off£t
 & 0xffffffff;

1089 
DWORD
 
rc
;

1090 
rc
 = 
	`SëFûePoöãr
(
id
->
h
, 
lowîBôs
, &
uµîBôs
, 
FILE_BEGIN
);

1093  
SQLITE_OK
;

1095 #i‡
OS_MAC


1097 
off_t
 
curSize
;

1098 if–
	`sqlôeOsFûeSize
(
id
, &
curSize
Ë!
SQLITE_OK
 ){

1099  
SQLITE_IOERR
;

1101 if–
off£t
 >
curSize
 ){

1102 if–
	`sqlôeOsTrunˇã
(
id
, 
off£t
+1Ë!
SQLITE_OK
 ){

1103  
SQLITE_IOERR
;

1106 #ifde‡
_LARGE_FILE


1107 if–
	`FSSëF‹kPosôi⁄
(
id
->
ªfNum
, 
fsFromSèπ
, 
off£t
Ë!
noEº
 ){

1109 if–
	`SëFPos
(
id
->
ªfNum
, 
fsFromSèπ
, 
off£t
Ë!
noEº
 ){

1111  
SQLITE_IOERR
;

1113  
SQLITE_OK
;

1117 
	}
}

1119 #ifde‡
SQLITE_NOSYNC


1120 
	#fsync
(
X
Ë0

	)

1134 
	$sqlôeOsSync
(
OsFûe
 *
id
){

1135 #i‡
OS_UNIX


1136 
	`SimuœãIOEº‹
(
SQLITE_IOERR
);

1137 
	`TRACE2
("SYNC %-3d\n", 
id
->
fd
);

1138 if–
	`fsync
(
id
->
fd
) ){

1139  
SQLITE_IOERR
;

1141 if–
id
->
dúfd
>=0 ){

1142 
	`TRACE2
("DIRSYNC %-3d\n", 
id
->
dúfd
);

1143 
	`fsync
(
id
->
dúfd
);

1144 
	`˛o£
(
id
->
dúfd
);

1145 
id
->
dúfd
 = -1;

1147  
SQLITE_OK
;

1150 #i‡
OS_WIN


1151 if–
	`FlushFûeBuf„rs
(
id
->
h
) ){

1152  
SQLITE_OK
;

1154  
SQLITE_IOERR
;

1157 #i‡
OS_MAC


1158 #ifde‡
_LARGE_FILE


1159 if–
	`FSFlushF‹k
(
id
->
ªfNum
Ë!
noEº
 ){

1161 
P¨amBlockRec
 
∑øms
;

1162 
	`mem£t
(&
∑øms
, 0, (
P¨amBlockRec
));

1163 
∑øms
.
ioP¨am
.
ioRefNum
 = 
id
->
ªfNum
;

1164 if–
	`PBFlushFûeSync
(&
∑øms
Ë!
noEº
 ){

1166  
SQLITE_IOERR
;

1168  
SQLITE_OK
;

1171 
	}
}

1176 
	$sqlôeOsTrunˇã
(
OsFûe
 *
id
, 
off_t
 
nByã
){

1177 
	`SimuœãIOEº‹
(
SQLITE_IOERR
);

1178 #i‡
OS_UNIX


1179  
	`·runˇã
(
id
->
fd
, 
nByã
)==0 ? 
SQLITE_OK
 : 
SQLITE_IOERR
;

1181 #i‡
OS_WIN


1183 
LONG
 
uµîBôs
 = 
nByã
>>32;

1184 
	`SëFûePoöãr
(
id
->
h
, 
nByã
, &
uµîBôs
, 
FILE_BEGIN
);

1185 
	`SëEndOfFûe
(
id
->
h
);

1187  
SQLITE_OK
;

1189 #i‡
OS_MAC


1190 #ifde‡
_LARGE_FILE


1191 if–
	`FSSëF‹kSize
(
id
->
ªfNum
, 
fsFromSèπ
, 
nByã
Ë!
noEº
){

1193 if–
	`SëEOF
(
id
->
ªfNum
, 
nByã
Ë!
noEº
 ){

1195  
SQLITE_IOERR
;

1197  
SQLITE_OK
;

1200 
	}
}

1205 
	$sqlôeOsFûeSize
(
OsFûe
 *
id
, 
off_t
 *
pSize
){

1206 #i‡
OS_UNIX


1207 
°©
 
buf
;

1208 
	`SimuœãIOEº‹
(
SQLITE_IOERR
);

1209 if–
	`f°©
(
id
->
fd
, &
buf
)!=0 ){

1210  
SQLITE_IOERR
;

1212 *
pSize
 = 
buf
.
°_size
;

1213  
SQLITE_OK
;

1215 #i‡
OS_WIN


1216 
DWORD
 
uµîBôs
, 
lowîBôs
;

1217 
	`SimuœãIOEº‹
(
SQLITE_IOERR
);

1218 
lowîBôs
 = 
	`GëFûeSize
(
id
->
h
, &
uµîBôs
);

1219 *
pSize
 = (((
off_t
)
uµîBôs
)<<32Ë+ 
lowîBôs
;

1220  
SQLITE_OK
;

1222 #i‡
OS_MAC


1223 #ifde‡
_LARGE_FILE


1224 if–
	`FSGëF‹kSize
(
id
->
ªfNum
, 
pSize
Ë!
noEº
){

1226 if–
	`GëEOF
(
id
->
ªfNum
, 
pSize
Ë!
noEº
 ){

1228  
SQLITE_IOERR
;

1230  
SQLITE_OK
;

1233 
	}
}

1235 #i‡
OS_WIN


1247 
	$isNT
(){

1248 
osTy≥
 = 0;

1249 if–
osTy≥
==0 ){

1250 
OSVERSIONINFO
 
sInfo
;

1251 
sInfo
.
dwOSVîsi⁄InfoSize
 = (sInfo);

1252 
	`GëVîsi⁄Ex
(&
sInfo
);

1253 
osTy≥
 = 
sInfo
.
dwPœtf‹mId
==
VER_PLATFORM_WIN32_NT
 ? 2 : 1;

1255  
osTy≥
==2;

1256 
	}
}

1304 
	#N_LOCKBYTE
 10239

	)

1305 #i‡
OS_MAC


1306 
	#FIRST_LOCKBYTE
 (0x000ffff‡- 
N_LOCKBYTE
)

	)

1308 
	#FIRST_LOCKBYTE
 (0xfffffff‡- 
N_LOCKBYTE
)

	)

1320 
	$sqlôeOsRódLock
(
OsFûe
 *
id
){

1321 #i‡
OS_UNIX


1322 
rc
;

1323 
	`sqlôeOsE¡îMuãx
();

1324 if–
id
->
pLock
->
˙t
>0 ){

1325 if–!
id
->
locked
 ){

1326 
id
->
pLock
->
˙t
++;

1327 
id
->
locked
 = 1;

1328 
id
->
pO≥n
->
nLock
++;

1330 
rc
 = 
SQLITE_OK
;

1331 }if–
id
->
locked
 || id->
pLock
->
˙t
==0 ){

1332 
Êock
 
lock
;

1333 
s
;

1334 
lock
.
l_ty≥
 = 
F_RDLCK
;

1335 
lock
.
l_whí˚
 = 
SEEK_SET
;

1336 
lock
.
l_°¨t
 =Üock.
l_Àn
 = 0L;

1337 
s
 = 
	`f˙é
(
id
->
fd
, 
F_SETLK
, &
lock
);

1338 if–
s
!=0 ){

1339 
rc
 = (
î∫o
==
EINVAL
Ë? 
SQLITE_NOLFS
 : 
SQLITE_BUSY
;

1341 
rc
 = 
SQLITE_OK
;

1342 if–!
id
->
locked
 ){

1343 
id
->
pO≥n
->
nLock
++;

1344 
id
->
locked
 = 1;

1346 
id
->
pLock
->
˙t
 = 1;

1349 
rc
 = 
SQLITE_BUSY
;

1351 
	`sqlôeOsLóveMuãx
();

1352  
rc
;

1354 #i‡
OS_WIN


1355 
rc
;

1356 if–
id
->
locked
>0 ){

1357 
rc
 = 
SQLITE_OK
;

1359 
lk
;

1360 
ªs
;

1361 
˙t
 = 100;

1362 
	`sqlôeR™dom√ss
((
lk
), &lk);

1363 
lk
 = (lk & 0x7fffffff)%
N_LOCKBYTE
 + 1;

1364  
˙t
-->0 && (
ªs
 = 
	`LockFûe
(
id
->
h
, 
FIRST_LOCKBYTE
, 0, 1, 0))==0 ){

1365 
	`SÀï
(1);

1367 if–
ªs
 ){

1368 
	`U∆ockFûe
(
id
->
h
, 
FIRST_LOCKBYTE
+1, 0, 
N_LOCKBYTE
, 0);

1369 if–
	`isNT
() ){

1370 
OVERLAPPED
 
ovÕ
;

1371 
ovÕ
.
Off£t
 = 
FIRST_LOCKBYTE
+1;

1372 
ovÕ
.
Off£tHigh
 = 0;

1373 
ovÕ
.
hEvít
 = 0;

1374 
ªs
 = 
	`LockFûeEx
(
id
->
h
, 
LOCKFILE_FAIL_IMMEDIATELY
,

1375 0, 
N_LOCKBYTE
, 0, &
ovÕ
);

1377 
ªs
 = 
	`LockFûe
(
id
->
h
, 
FIRST_LOCKBYTE
+
lk
, 0, 1, 0);

1379 
	`U∆ockFûe
(
id
->
h
, 
FIRST_LOCKBYTE
, 0, 1, 0);

1381 if–
ªs
 ){

1382 
id
->
locked
 = 
lk
;

1383 
rc
 = 
SQLITE_OK
;

1385 
rc
 = 
SQLITE_BUSY
;

1388  
rc
;

1390 #i‡
OS_MAC


1391 
rc
;

1392 if–
id
->
locked
>0 || id->
ªfNumRF
 == -1 ){

1393 
rc
 = 
SQLITE_OK
;

1395 
lk
;

1396 
OSEº
 
ªs
;

1397 
˙t
 = 5;

1398 
P¨amBlockRec
 
∑øms
;

1399 
	`sqlôeR™dom√ss
((
lk
), &lk);

1400 
lk
 = (lk & 0x7fffffff)%
N_LOCKBYTE
 + 1;

1401 
	`mem£t
(&
∑øms
, 0, (params));

1402 
∑øms
.
ioP¨am
.
ioRefNum
 = 
id
->
ªfNumRF
;

1403 
∑øms
.
ioP¨am
.
ioPosMode
 = 
fsFromSèπ
;

1404 
∑øms
.
ioP¨am
.
ioPosOff£t
 = 
FIRST_LOCKBYTE
;

1405 
∑øms
.
ioP¨am
.
ioReqCou¡
 = 1;

1406  
˙t
-->0 && (
ªs
 = 
	`PBLockR™geSync
(&
∑øms
))!=
noEº
 ){

1407 
UI¡32
 
föÆTicks
;

1408 
	`Dñay
(1, &
föÆTicks
);

1410 if–
ªs
 =
noEº
 ){

1411 
∑øms
.
ioP¨am
.
ioPosOff£t
 = 
FIRST_LOCKBYTE
+1;

1412 
∑øms
.
ioP¨am
.
ioReqCou¡
 = 
N_LOCKBYTE
;

1413 
	`PBU∆ockR™geSync
(&
∑øms
);

1414 
∑øms
.
ioP¨am
.
ioPosOff£t
 = 
FIRST_LOCKBYTE
+
lk
;

1415 
∑øms
.
ioP¨am
.
ioReqCou¡
 = 1;

1416 
ªs
 = 
	`PBLockR™geSync
(&
∑øms
);

1417 
∑øms
.
ioP¨am
.
ioPosOff£t
 = 
FIRST_LOCKBYTE
;

1418 
∑øms
.
ioP¨am
.
ioReqCou¡
 = 1;

1419 
	`PBU∆ockR™geSync
(&
∑øms
);

1421 if–
ªs
 =
noEº
 ){

1422 
id
->
locked
 = 
lk
;

1423 
rc
 = 
SQLITE_OK
;

1425 
rc
 = 
SQLITE_BUSY
;

1428  
rc
;

1430 
	}
}

1438 
	$sqlôeOsWrôeLock
(
OsFûe
 *
id
){

1439 #i‡
OS_UNIX


1440 
rc
;

1441 
	`sqlôeOsE¡îMuãx
();

1442 if–
id
->
pLock
->
˙t
==0 || (id->pLock->˙t==1 && id->
locked
==1) ){

1443 
Êock
 
lock
;

1444 
s
;

1445 
lock
.
l_ty≥
 = 
F_WRLCK
;

1446 
lock
.
l_whí˚
 = 
SEEK_SET
;

1447 
lock
.
l_°¨t
 =Üock.
l_Àn
 = 0L;

1448 
s
 = 
	`f˙é
(
id
->
fd
, 
F_SETLK
, &
lock
);

1449 if–
s
!=0 ){

1450 
rc
 = (
î∫o
==
EINVAL
Ë? 
SQLITE_NOLFS
 : 
SQLITE_BUSY
;

1452 
rc
 = 
SQLITE_OK
;

1453 if–!
id
->
locked
 ){

1454 
id
->
pO≥n
->
nLock
++;

1455 
id
->
locked
 = 1;

1457 
id
->
pLock
->
˙t
 = -1;

1460 
rc
 = 
SQLITE_BUSY
;

1462 
	`sqlôeOsLóveMuãx
();

1463  
rc
;

1465 #i‡
OS_WIN


1466 
rc
;

1467 if–
id
->
locked
<0 ){

1468 
rc
 = 
SQLITE_OK
;

1470 
ªs
;

1471 
˙t
 = 100;

1472  
˙t
-->0 && (
ªs
 = 
	`LockFûe
(
id
->
h
, 
FIRST_LOCKBYTE
, 0, 1, 0))==0 ){

1473 
	`SÀï
(1);

1475 if–
ªs
 ){

1476 if–
id
->
locked
>0 ){

1477 if–
	`isNT
() ){

1478 
	`U∆ockFûe
(
id
->
h
, 
FIRST_LOCKBYTE
+1, 0, 
N_LOCKBYTE
, 0);

1480 
ªs
 = 
	`U∆ockFûe
(
id
->
h
, 
FIRST_LOCKBYTE
 + id->
locked
, 0, 1, 0);

1483 if–
ªs
 ){

1484 
ªs
 = 
	`LockFûe
(
id
->
h
, 
FIRST_LOCKBYTE
+1, 0, 
N_LOCKBYTE
, 0);

1486 
ªs
 = 0;

1488 
	`U∆ockFûe
(
id
->
h
, 
FIRST_LOCKBYTE
, 0, 1, 0);

1490 if–
ªs
 ){

1491 
id
->
locked
 = -1;

1492 
rc
 = 
SQLITE_OK
;

1494 
rc
 = 
SQLITE_BUSY
;

1497  
rc
;

1499 #i‡
OS_MAC


1500 
rc
;

1501 if–
id
->
locked
<0 || id->
ªfNumRF
 == -1 ){

1502 
rc
 = 
SQLITE_OK
;

1504 
OSEº
 
ªs
;

1505 
˙t
 = 5;

1506 
P¨amBlockRec
 
∑øms
;

1507 
	`mem£t
(&
∑øms
, 0, (params));

1508 
∑øms
.
ioP¨am
.
ioRefNum
 = 
id
->
ªfNumRF
;

1509 
∑øms
.
ioP¨am
.
ioPosMode
 = 
fsFromSèπ
;

1510 
∑øms
.
ioP¨am
.
ioPosOff£t
 = 
FIRST_LOCKBYTE
;

1511 
∑øms
.
ioP¨am
.
ioReqCou¡
 = 1;

1512  
˙t
-->0 && (
ªs
 = 
	`PBLockR™geSync
(&
∑øms
))!=
noEº
 ){

1513 
UI¡32
 
föÆTicks
;

1514 
	`Dñay
(1, &
föÆTicks
);

1516 if–
ªs
 =
noEº
 ){

1517 
∑øms
.
ioP¨am
.
ioPosOff£t
 = 
FIRST_LOCKBYTE
 + 
id
->
locked
;

1518 
∑øms
.
ioP¨am
.
ioReqCou¡
 = 1;

1519 if–
id
->
locked
==0

1520 || 
	`PBU∆ockR™geSync
(&
∑øms
)==
noEº
 ){

1521 
∑øms
.
ioP¨am
.
ioPosOff£t
 = 
FIRST_LOCKBYTE
+1;

1522 
∑øms
.
ioP¨am
.
ioReqCou¡
 = 
N_LOCKBYTE
;

1523 
ªs
 = 
	`PBLockR™geSync
(&
∑øms
);

1525 
ªs
 = 
aÂR™geNŸLocked
;

1527 
∑øms
.
ioP¨am
.
ioPosOff£t
 = 
FIRST_LOCKBYTE
;

1528 
∑øms
.
ioP¨am
.
ioReqCou¡
 = 1;

1529 
	`PBU∆ockR™geSync
(&
∑øms
);

1531 if–
ªs
 =
noEº
 ){

1532 
id
->
locked
 = -1;

1533 
rc
 = 
SQLITE_OK
;

1535 
rc
 = 
SQLITE_BUSY
;

1538  
rc
;

1540 
	}
}

1548 
	$sqlôeOsU∆ock
(
OsFûe
 *
id
){

1549 #i‡
OS_UNIX


1550 
rc
;

1551 if–!
id
->
locked
 )  
SQLITE_OK
;

1552 
	`sqlôeOsE¡îMuãx
();

1553 
	`as£π
–
id
->
pLock
->
˙t
!=0 );

1554 if–
id
->
pLock
->
˙t
>1 ){

1555 
id
->
pLock
->
˙t
--;

1556 
rc
 = 
SQLITE_OK
;

1558 
Êock
 
lock
;

1559 
s
;

1560 
lock
.
l_ty≥
 = 
F_UNLCK
;

1561 
lock
.
l_whí˚
 = 
SEEK_SET
;

1562 
lock
.
l_°¨t
 =Üock.
l_Àn
 = 0L;

1563 
s
 = 
	`f˙é
(
id
->
fd
, 
F_SETLK
, &
lock
);

1564 if–
s
!=0 ){

1565 
rc
 = (
î∫o
==
EINVAL
Ë? 
SQLITE_NOLFS
 : 
SQLITE_BUSY
;

1567 
rc
 = 
SQLITE_OK
;

1568 
id
->
pLock
->
˙t
 = 0;

1571 if–
rc
==
SQLITE_OK
 ){

1576 
›íC¡
 *
pO≥n
 = 
id
->pOpen;

1577 
pO≥n
->
nLock
--;

1578 
	`as£π
–
pO≥n
->
nLock
>=0 );

1579 if–
pO≥n
->
nLock
==0 &&ÖO≥n->
nPídög
>0 ){

1580 
i
;

1581 
i
=0; i<
pO≥n
->
nPídög
; i++){

1582 
	`˛o£
(
pO≥n
->
aPídög
[
i
]);

1584 
	`sqlôeFªe
(
pO≥n
->
aPídög
);

1585 
pO≥n
->
nPídög
 = 0;

1586 
pO≥n
->
aPídög
 = 0;

1589 
	`sqlôeOsLóveMuãx
();

1590 
id
->
locked
 = 0;

1591  
rc
;

1593 #i‡
OS_WIN


1594 
rc
;

1595 if–
id
->
locked
==0 ){

1596 
rc
 = 
SQLITE_OK
;

1597 }if–
	`isNT
(Ë|| 
id
->
locked
<0 ){

1598 
	`U∆ockFûe
(
id
->
h
, 
FIRST_LOCKBYTE
+1, 0, 
N_LOCKBYTE
, 0);

1599 
rc
 = 
SQLITE_OK
;

1600 
id
->
locked
 = 0;

1602 
	`U∆ockFûe
(
id
->
h
, 
FIRST_LOCKBYTE
+id->
locked
, 0, 1, 0);

1603 
rc
 = 
SQLITE_OK
;

1604 
id
->
locked
 = 0;

1606  
rc
;

1608 #i‡
OS_MAC


1609 
rc
;

1610 
P¨amBlockRec
 
∑øms
;

1611 
	`mem£t
(&
∑øms
, 0, (params));

1612 
∑øms
.
ioP¨am
.
ioRefNum
 = 
id
->
ªfNumRF
;

1613 
∑øms
.
ioP¨am
.
ioPosMode
 = 
fsFromSèπ
;

1614 if–
id
->
locked
==0 || id->
ªfNumRF
 == -1 ){

1615 
rc
 = 
SQLITE_OK
;

1616 }if–
id
->
locked
<0 ){

1617 
∑øms
.
ioP¨am
.
ioPosOff£t
 = 
FIRST_LOCKBYTE
+1;

1618 
∑øms
.
ioP¨am
.
ioReqCou¡
 = 
N_LOCKBYTE
;

1619 
	`PBU∆ockR™geSync
(&
∑øms
);

1620 
rc
 = 
SQLITE_OK
;

1621 
id
->
locked
 = 0;

1623 
∑øms
.
ioP¨am
.
ioPosOff£t
 = 
FIRST_LOCKBYTE
+
id
->
locked
;

1624 
∑øms
.
ioP¨am
.
ioReqCou¡
 = 1;

1625 
	`PBU∆ockR™geSync
(&
∑øms
);

1626 
rc
 = 
SQLITE_OK
;

1627 
id
->
locked
 = 0;

1629  
rc
;

1631 
	}
}

1638 
	$sqlôeOsR™domSìd
(*
zBuf
){

1651 
	`mem£t
(
zBuf
, 0, 256);

1652 #i‡
OS_UNIX
 && !
	`deföed
(
SQLITE_TEST
)

1654 
pid
;

1655 
	`time
((
time_t
*)
zBuf
);

1656 
pid
 = 
	`gëpid
();

1657 
	`mem˝y
(&
zBuf
[(
time_t
)], &
pid
, (pid));

1660 #i‡
OS_WIN
 && !
	`deföed
(
SQLITE_TEST
)

1661 
	`GëSy°emTime
((
LPSYSTEMTIME
)
zBuf
);

1663 #i‡
OS_MAC


1665 
pid
;

1666 
	`Mi¸o£c⁄ds
((
Unsig√dWide
*)
zBuf
);

1667 
pid
 = 
	`gëpid
();

1668 
	`mem˝y
(&
zBuf
[(
Unsig√dWide
)], &
pid
, (pid));

1671  
SQLITE_OK
;

1672 
	}
}

1677 
	$sqlôeOsSÀï
(
ms
){

1678 #i‡
OS_UNIX


1679 #i‡
	`deföed
(
HAVE_USLEEP
) && HAVE_USLEEP

1680 
	`u¶ìp
(
ms
*1000);

1681  
ms
;

1683 
	`¶ìp
((
ms
+999)/1000);

1684  1000*((
ms
+999)/1000);

1687 #i‡
OS_WIN


1688 
	`SÀï
(
ms
);

1689  
ms
;

1691 #i‡
OS_MAC


1692 
UI¡32
 
föÆTicks
;

1693 
UI¡32
 
ticks
 = (((UI¡32)
ms
+16)*3)/50;

1694 
	`Dñay
(
ticks
, &
föÆTicks
);

1695  ()((
ticks
*50)/3);

1697 
	}
}

1702 
	göMuãx
 = 0;

1703 #ifde‡
SQLITE_UNIX_THREADS


1704 
±hªad_muãx_t
 
	gmuãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

1706 #ifde‡
SQLITE_W32_THREADS


1707 
CRITICAL_SECTION
 
	gcs
;

1709 #ifde‡
SQLITE_MACOS_MULTITASKING


1710 
MPCrôiˇlRegi⁄ID
 
	g¸ôiˇlRegi⁄
;

1721 
	$sqlôeOsE¡îMuãx
(){

1722 #ifde‡
SQLITE_UNIX_THREADS


1723 
	`±hªad_muãx_lock
(&
muãx
);

1725 #ifde‡
SQLITE_W32_THREADS


1726 
isInô
 = 0;

1727  !
isInô
 ){

1728 
lock
 = 0;

1729 if–
	`I¡îlockedIn¸emít
(&
lock
)==1 ){

1730 
	`InôülizeCrôiˇlSe˘i⁄
(&
cs
);

1731 
isInô
 = 1;

1733 
	`SÀï
(1);

1736 
	`E¡îCrôiˇlSe˘i⁄
(&
cs
);

1738 #ifde‡
SQLITE_MACOS_MULTITASKING


1739 vﬁ©ûê
nŸInô
 = 1;

1740 if–
nŸInô
 ){

1741 if–
nŸInô
 == 2 )

1742 
	`MPYõld
();

1744 
nŸInô
 = 2;

1745 
	`MPCª©eCrôiˇlRegi⁄
(&
¸ôiˇlRegi⁄
);

1746 
nŸInô
 = 0;

1749 
	`MPE¡îCrôiˇlRegi⁄
(
¸ôiˇlRegi⁄
, 
kDuøti⁄F‹evî
);

1751 
	`as£π
–!
öMuãx
 );

1752 
öMuãx
 = 1;

1753 
	}
}

1754 
	$sqlôeOsLóveMuãx
(){

1755 
	`as£π
–
öMuãx
 );

1756 
öMuãx
 = 0;

1757 #ifde‡
SQLITE_UNIX_THREADS


1758 
	`±hªad_muãx_u∆ock
(&
muãx
);

1760 #ifde‡
SQLITE_W32_THREADS


1761 
	`LóveCrôiˇlSe˘i⁄
(&
cs
);

1763 #ifde‡
SQLITE_MACOS_MULTITASKING


1764 
	`MPExôCrôiˇlRegi⁄
(
¸ôiˇlRegi⁄
);

1766 
	}
}

1774 *
	$sqlôeOsFuŒP©h«me
(c⁄° *
zRñ©ive
){

1775 #i‡
OS_UNIX


1776 *
zFuŒ
 = 0;

1777 if–
zRñ©ive
[0]=='/' ){

1778 
	`sqlôeSëSåög
(&
zFuŒ
, 
zRñ©ive
, (*)0);

1780 
zBuf
[5000];

1781 
zBuf
[0] = 0;

1782 
	`sqlôeSëSåög
(&
zFuŒ
, 
	`gëcwd
(
zBuf
, (zBuf)), "/", 
zRñ©ive
,

1785  
zFuŒ
;

1787 #i‡
OS_WIN


1788 *
zNŸU£d
;

1789 *
zFuŒ
;

1790 
nByã
;

1791 
nByã
 = 
	`GëFuŒP©hName
(
zRñ©ive
, 0, 0, &
zNŸU£d
) + 1;

1792 
zFuŒ
 = 
	`sqlôeMÆloc
–
nByã
 );

1793 if–
zFuŒ
==0 )  0;

1794 
	`GëFuŒP©hName
(
zRñ©ive
, 
nByã
, 
zFuŒ
, &
zNŸU£d
);

1795  
zFuŒ
;

1797 #i‡
OS_MAC


1798 *
zFuŒ
 = 0;

1799 if–
zRñ©ive
[0]==':' ){

1800 
zBuf
[
_MAX_PATH
+1];

1801 
	`sqlôeSëSåög
(&
zFuŒ
, 
	`gëcwd
(
zBuf
, (zBuf)), &(
zRñ©ive
[1]),

1804 if–
	`°rchr
(
zRñ©ive
, ':') ){

1805 
	`sqlôeSëSåög
(&
zFuŒ
, 
zRñ©ive
, (*)0);

1807 
zBuf
[
_MAX_PATH
+1];

1808 
	`sqlôeSëSåög
(&
zFuŒ
, 
	`gëcwd
(
zBuf
, (zBuf)), 
zRñ©ive
, (*)0);

1811  
zFuŒ
;

1813 
	}
}

1819 #ifde‡
SQLITE_TEST


1820 
	gsqlôe_cuºít_time
 = 0;

1828 
	$sqlôeOsCuºítTime
(*
¥Now
){

1829 #i‡
OS_UNIX


1830 
time_t
 
t
;

1831 
	`time
(&
t
);

1832 *
¥Now
 = 
t
/86400.0 + 2440587.5;

1834 #i‡
OS_WIN


1835 
FILETIME
 
·
;

1839 
now
;

1840 
	`GëSy°emTimeAsFûeTime
–&
·
 );

1841 
now
 = (()
·
.
dwHighD©eTime
) * 4294967296.0;

1842 *
¥Now
 = (
now
 + 
·
.
dwLowD©eTime
)/864000000000.0 + 2305813.5;

1844 #ifde‡
SQLITE_TEST


1845 if–
sqlôe_cuºít_time
 ){

1846 *
¥Now
 = 
sqlôe_cuºít_time
/86400.0 + 2440587.5;

1850 
	}
}

	@os.h

17 #i‚de‡
_SQLITE_OS_H_


18 
	#_SQLITE_OS_H_


	)

40 #i‚de‡
SQLITE_DISABLE_LFS


41 
	#_LARGE_FILE
 1

	)

42 #i‚de‡
_FILE_OFFSET_BITS


43 
	#_FILE_OFFSET_BITS
 64

	)

45 
	#_LARGEFILE_SOURCE
 1

	)

57 #i‚de‡
TEMP_FILE_PREFIX


58 
	#TEMP_FILE_PREFIX
 "sqlôe_"

	)

67 #i‚de‡
OS_UNIX


68 #i‚de‡
OS_WIN


69 #i‚de‡
OS_MAC


70 #i‡
deföed
(
__MACOS__
)

71 
	#OS_MAC
 1

	)

72 
	#OS_WIN
 0

	)

73 
	#OS_UNIX
 0

	)

74 #ñi‡
deföed
(
_WIN32
Ë|| deföed(
WIN32
Ë|| deföed(
__CYGWIN__
Ë|| deföed(
__MINGW32__
Ë|| deföed(
__BORLANDC__
)

75 
	#OS_MAC
 0

	)

76 
	#OS_WIN
 1

	)

77 
	#OS_UNIX
 0

	)

79 
	#OS_MAC
 0

	)

80 
	#OS_WIN
 0

	)

81 
	#OS_UNIX
 1

	)

84 
	#OS_WIN
 0

	)

85 
	#OS_UNIX
 0

	)

88 
	#OS_MAC
 0

	)

89 
	#OS_UNIX
 0

	)

92 
	#OS_MAC
 0

	)

93 #i‚de‡
OS_WIN


94 
	#OS_WIN
 0

	)

101 #i‡
OS_UNIX


102 
	~<sys/ty≥s.h
>

103 
	~<sys/°©.h
>

104 
	~<f˙é.h
>

105 
	~<uni°d.h
>

106 
OsFûe
 
	tOsFûe
;

107 
	sOsFûe
 {

108 
›íC¡
 *
	mpO≥n
;

109 
lockInfo
 *
	mpLock
;

110 
	mfd
;

111 
	mlocked
;

112 
	mdúfd
;

114 
	#SQLITE_TEMPNAME_SIZE
 200

	)

115 #i‡
deföed
(
HAVE_USLEEP
) && HAVE_USLEEP

116 
	#SQLITE_MIN_SLEEP_MS
 1

	)

118 
	#SQLITE_MIN_SLEEP_MS
 1000

	)

122 #i‡
OS_WIN


123 
	~<wödows.h
>

124 
	~<wöba£.h
>

125 
OsFûe
 
	tOsFûe
;

126 
	sOsFûe
 {

127 
HANDLE
 
	mh
;

128 
	mlocked
;

130 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__BORLANDC__
)

131 
__öt64
 
	toff_t
;

133 #i‡!
deföed
(
_CYGWIN_TYPES_H
)

134 
	toff_t
;

135 #i‡
deföed
(
__MINGW32__
)

136 
	#_OFF_T_


	)

140 
	#SQLITE_TEMPNAME_SIZE
 (
MAX_PATH
+50)

	)

141 
	#SQLITE_MIN_SLEEP_MS
 1

	)

144 #i‡
OS_MAC


145 
	~<uni°d.h
>

146 
	~<Fûes.h
>

147 
OsFûe
 
	tOsFûe
;

148 
	sOsFûe
 {

149 
SI¡16
 
	mªfNum
;

150 
SI¡16
 
	mªfNumRF
;

151 
	mlocked
;

152 
	mdñOnClo£
;

153 *
	m∑thToDñ
;

155 #ifde‡
_LARGE_FILE


156 
SI¡64
 
	toff_t
;

158 
SI¡32
 
	toff_t
;

160 
	#SQLITE_TEMPNAME_SIZE
 
_MAX_PATH


	)

161 
	#SQLITE_MIN_SLEEP_MS
 17

	)

164 
sqlôeOsDñëe
(const *);

165 
sqlôeOsFûeExi°s
(const *);

166 
sqlôeOsFûeRíame
(const *, const *);

167 
sqlôeOsO≥nRódWrôe
(c⁄° *, 
OsFûe
*, *);

168 
sqlôeOsO≥nEx˛usive
(c⁄° *, 
OsFûe
*, );

169 
sqlôeOsO≥nRódO∆y
(c⁄° *, 
OsFûe
*);

170 
sqlôeOsO≥nDúe˘‹y
(c⁄° *, 
OsFûe
*);

171 
sqlôeOsTempFûeName
(*);

172 
sqlôeOsClo£
(
OsFûe
*);

173 
sqlôeOsRód
(
OsFûe
*, *, 
amt
);

174 
sqlôeOsWrôe
(
OsFûe
*, c⁄° *, 
amt
);

175 
sqlôeOsSìk
(
OsFûe
*, 
off_t
 
off£t
);

176 
sqlôeOsSync
(
OsFûe
*);

177 
sqlôeOsTrunˇã
(
OsFûe
*, 
off_t
 
size
);

178 
sqlôeOsFûeSize
(
OsFûe
*, 
off_t
 *
pSize
);

179 
sqlôeOsRódLock
(
OsFûe
*);

180 
sqlôeOsWrôeLock
(
OsFûe
*);

181 
sqlôeOsU∆ock
(
OsFûe
*);

182 
sqlôeOsR™domSìd
(*);

183 
sqlôeOsSÀï
(
ms
);

184 
sqlôeOsCuºítTime
(*);

185 
sqlôeOsE¡îMuãx
();

186 
sqlôeOsLóveMuãx
();

187 *
sqlôeOsFuŒP©h«me
(const *);

	@pager.c

23 
	~"os.h
"

24 
	~"sqlôeI¡.h
"

25 
	~"∑gî.h
"

26 
	~<as£π.h
>

27 
	~<°rög.h
>

33 
Pagî
 *
	gmaöPagî
 = 0;

34 
	#SET_PAGER
(
X
Ëif–
maöPagî
==0 ) maöPagî = (X)

	)

35 
	#CLR_PAGER
(
X
Ëif–
maöPagî
==(XËËmaöPagî = 0

	)

36 
	#TRACE1
(
X
Ëif–
pPagî
==
maöPagî
 ) 
	`Ârötf
(
°dîr
,X)

	)

37 
	#TRACE2
(
X
,
Y
Ëif–
pPagî
==
maöPagî
 ) 
	`Ârötf
(
°dîr
,X,Y)

	)

38 
	#TRACE3
(
X
,
Y
,
Z
Ëif–
pPagî
==
maöPagî
 ) 
	`Ârötf
(
°dîr
,X,Y,Z)

	)

40 
	#SET_PAGER
(
X
)

	)

41 
	#CLR_PAGER
(
X
)

	)

42 
	#TRACE1
(
X
)

	)

43 
	#TRACE2
(
X
,
Y
)

	)

44 
	#TRACE3
(
X
,
Y
,
Z
)

	)

78 
	#SQLITE_UNLOCK
 0

	)

79 
	#SQLITE_READLOCK
 1

	)

80 
	#SQLITE_WRITELOCK
 2

	)

101 
PgHdr
 
	tPgHdr
;

102 
	sPgHdr
 {

103 
Pagî
 *
	mpPagî
;

104 
Pgno
 
	mpgno
;

105 
PgHdr
 *
	mpNextHash
, *
	mpPªvHash
;

106 
	mnRef
;

107 
PgHdr
 *
	mpNextFªe
, *
	mpPªvFªe
;

108 
PgHdr
 *
	mpNextAŒ
, *
	mpPªvAŒ
;

109 
PgHdr
 *
	mpNextCk±
, *
	mpPªvCk±
;

110 
u8
 
	möJou∫Æ
;

111 
u8
 
	möCk±
;

112 
u8
 
	mdúty
;

113 
u8
 
	m√edSync
;

114 
u8
 
	mÆwaysRﬁlback
;

115 
PgHdr
 *
	mpDúty
;

124 #ifde‡
SQLITE_HAS_CODEC


125 
	#CODEC
(
P
,
D
,
N
,
X
Ëif–P->
xCodec
 ){ P->
	`xCodec
(P->
pCodecArg
,D,N,X); }

	)

127 
	#CODEC
(
P
,
D
,
N
,
X
)

	)

134 
	#PGHDR_TO_DATA
(
P
Ë((*)(&(P)[1]))

	)

135 
	#DATA_TO_PGHDR
(
D
Ë(&((
PgHdr
*)(D))[-1])

	)

136 
	#PGHDR_TO_EXTRA
(
P
Ë((*)&((*)(&(P)[1]))[
SQLITE_PAGE_SIZE
])

	)

142 
	#N_PG_HASH
 2048

	)

147 
	#∑gî_hash
(
PN
Ë((PN)&(
N_PG_HASH
-1))

	)

152 
	sPagî
 {

153 *
	mzFûíame
;

154 *
	mzJou∫Æ
;

155 *
	mzDúe˘‹y
;

156 
OsFûe
 
	mfd
, 
	mjfd
;

157 
OsFûe
 
	m˝fd
;

158 
	mdbSize
;

159 
	m‹igDbSize
;

160 
	mck±Size
;

161 
off_t
 
	mck±JSize
;

162 
	mnRec
;

163 
u32
 
	mcksumInô
;

164 
	mck±NRec
;

165 
	mnExåa
;

166 (*
	mxDe°ru˘‹
)(*);

167 
	mnPage
;

168 
	mnRef
;

169 
	mmxPage
;

170 
	mnHô
, 
	mnMiss
, 
	mnOvÊ
;

171 (*
	mxCodec
)(*,*,
	mPgno
,);

172 *
	mpCodecArg
;

173 
u8
 
	mjou∫ÆO≥n
;

174 
u8
 
	mjou∫ÆSèπed
;

175 
u8
 
	mu£Jou∫Æ
;

176 
u8
 
	mck±O≥n
;

177 
u8
 
	mck±InU£
;

178 
u8
 
	mck±Auto›í
;

179 
u8
 
	mnoSync
;

180 
u8
 
	mfuŒSync
;

181 
u8
 
	m°©e
;

182 
u8
 
	mîrMask
;

183 
u8
 
	mãmpFûe
;

184 
u8
 
	mªadO∆y
;

185 
u8
 
	m√edSync
;

186 
u8
 
	mdútyFûe
;

187 
u8
 
	mÆwaysRﬁlback
;

188 
u8
 *
	maInJou∫Æ
;

189 
u8
 *
	maInCk±
;

190 
PgHdr
 *
	mpFú°
, *
	mpLa°
;

191 
PgHdr
 *
	mpFú°Syn˚d
;

192 
PgHdr
 *
	mpAŒ
;

193 
PgHdr
 *
	mpCk±
;

194 
PgHdr
 *
	maHash
[
N_PG_HASH
];

200 
	#PAGER_ERR_FULL
 0x01

	)

201 
	#PAGER_ERR_MEM
 0x02

	)

202 
	#PAGER_ERR_LOCK
 0x04

	)

203 
	#PAGER_ERR_CORRUPT
 0x08

	)

204 
	#PAGER_ERR_DISK
 0x10

	)

214 
PageRec‹d
 
	tPageRec‹d
;

215 
	sPageRec‹d
 {

216 
Pgno
 
	mpgno
;

217 
	maD©a
[
SQLITE_PAGE_SIZE
];

249 c⁄° 
	gaJou∫ÆMagic1
[] = {

252 c⁄° 
	gaJou∫ÆMagic2
[] = {

255 c⁄° 
	gaJou∫ÆMagic3
[] = {

258 
	#JOURNAL_FORMAT_1
 1

	)

259 
	#JOURNAL_FORMAT_2
 2

	)

260 
	#JOURNAL_FORMAT_3
 3

	)

271 #ifde‡
SQLITE_TEST


272 
	gjou∫Æ_f‹m©
 = 3;

274 
	#jou∫Æ_f‹m©
 3

	)

282 
	#JOURNAL_HDR_SZ
(
X
) \

283 ((
aJou∫ÆMagic1
Ë+ (
Pgno
Ë+ ((
X
)>=3)*2*(
u32
))

	)

284 
	#JOURNAL_PG_SZ
(
X
) \

285 (
SQLITE_PAGE_SIZE
 + (
Pgno
Ë+ ((
X
)>=3)*(
u32
))

	)

290 #ifde‡
SQLITE_TEST


291 
	g∑gî_ªföfo_íabÀ
 = 0;

292 
	$∑gî_ªföfo
(
PgHdr
 *
p
){

293 
˙t
 = 0;

294 if–!
∑gî_ªföfo_íabÀ
 ) ;

295 
	`¥ötf
(

297 
p
->
pgno
, ()
	`PGHDR_TO_DATA
’),Ö->
nRef


299 
˙t
++;

300 
	}
}

301 
	#REFINFO
(
X
Ë
	`∑gî_ªföfo
(X)

	)

303 
	#REFINFO
(
X
)

	)

315 
	$ªad32bôs
(
f‹m©
, 
OsFûe
 *
fd
, 
u32
 *
pRes
){

316 
u32
 
ªs
;

317 
rc
;

318 
rc
 = 
	`sqlôeOsRód
(
fd
, &
ªs
, (res));

319 if–
rc
==
SQLITE_OK
 && 
f‹m©
>
JOURNAL_FORMAT_1
 ){

320 
ac
[4];

321 
	`mem˝y
(
ac
, &
ªs
, 4);

322 
ªs
 = (
ac
[0]<<24) | (ac[1]<<16) | (ac[2]<<8) |ác[3];

324 *
pRes
 = 
ªs
;

325  
rc
;

326 
	}
}

337 
	$wrôe32bôs
(
OsFûe
 *
fd
, 
u32
 
vÆ
){

338 
ac
[4];

339 if–
jou∫Æ_f‹m©
<=1 ){

340  
	`sqlôeOsWrôe
(
fd
, &
vÆ
, 4);

342 
ac
[0] = (
vÆ
>>24) & 0xff;

343 
ac
[1] = (
vÆ
>>16) & 0xff;

344 
ac
[2] = (
vÆ
>>8) & 0xff;

345 
ac
[3] = 
vÆ
 & 0xff;

346  
	`sqlôeOsWrôe
(
fd
, 
ac
, 4);

347 
	}
}

356 
	$°‹e32bôs
(
u32
 
vÆ
, 
PgHdr
 *
p
, 
off£t
){

357 *
ac
;

358 
ac
 = &((*)
	`PGHDR_TO_DATA
(
p
))[
off£t
];

359 if–
jou∫Æ_f‹m©
<=1 ){

360 
	`mem˝y
(
ac
, &
vÆ
, 4);

362 
ac
[0] = (
vÆ
>>24) & 0xff;

363 
ac
[1] = (
vÆ
>>16) & 0xff;

364 
ac
[2] = (
vÆ
>>8) & 0xff;

365 
ac
[3] = 
vÆ
 & 0xff;

367 
	}
}

374 
	$∑gî_îrcode
(
Pagî
 *
pPagî
){

375 
rc
 = 
SQLITE_OK
;

376 if–
pPagî
->
îrMask
 & 
PAGER_ERR_LOCK
 ) 
rc
 = 
SQLITE_PROTOCOL
;

377 if–
pPagî
->
îrMask
 & 
PAGER_ERR_DISK
 ) 
rc
 = 
SQLITE_IOERR
;

378 if–
pPagî
->
îrMask
 & 
PAGER_ERR_FULL
 ) 
rc
 = 
SQLITE_FULL
;

379 if–
pPagî
->
îrMask
 & 
PAGER_ERR_MEM
 ) 
rc
 = 
SQLITE_NOMEM
;

380 if–
pPagî
->
îrMask
 & 
PAGER_ERR_CORRUPT
 ) 
rc
 = 
SQLITE_CORRUPT
;

381  
rc
;

382 
	}
}

393 
	$∑ge_add_to_ck±_li°
(
PgHdr
 *
pPg
){

394 
Pagî
 *
pPagî
 = 
pPg
->pPager;

395 if–
pPg
->
öCk±
 ) ;

396 
	`as£π
–
pPg
->
pPªvCk±
==0 &&ÖPg->
pNextCk±
==0 );

397 
pPg
->
pPªvCk±
 = 0;

398 if–
pPagî
->
pCk±
 ){

399 
pPagî
->
pCk±
->
pPªvCk±
 = 
pPg
;

401 
pPg
->
pNextCk±
 = 
pPagî
->
pCk±
;

402 
pPagî
->
pCk±
 = 
pPg
;

403 
pPg
->
öCk±
 = 1;

404 
	}
}

405 
	$∑ge_ªmove_‰om_ck±_li°
(
PgHdr
 *
pPg
){

406 if–!
pPg
->
öCk±
 ) ;

407 if–
pPg
->
pPªvCk±
 ){

408 
	`as£π
–
pPg
->
pPªvCk±
->
pNextCk±
==pPg );

409 
pPg
->
pPªvCk±
->
pNextCk±
 =ÖPg->pNextCkpt;

411 
	`as£π
–
pPg
->
pPagî
->
pCk±
==pPg );

412 
pPg
->
pPagî
->
pCk±
 =ÖPg->
pNextCk±
;

414 if–
pPg
->
pNextCk±
 ){

415 
	`as£π
–
pPg
->
pNextCk±
->
pPªvCk±
==pPg );

416 
pPg
->
pNextCk±
->
pPªvCk±
 =ÖPg->pPrevCkpt;

418 
pPg
->
pNextCk±
 = 0;

419 
pPg
->
pPªvCk±
 = 0;

420 
pPg
->
öCk±
 = 0;

421 
	}
}

427 
PgHdr
 *
	$∑gî_lookup
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
){

428 
PgHdr
 *
p
 = 
pPagî
->
aHash
[
	`∑gî_hash
(
pgno
)];

429  
p
 &&Ö->
pgno
!=pgno ){

430 
p
 =Ö->
pNextHash
;

432  
p
;

433 
	}
}

441 
	$∑gî_ª£t
(
Pagî
 *
pPagî
){

442 
PgHdr
 *
pPg
, *
pNext
;

443 
pPg
=
pPagî
->
pAŒ
;ÖPg;ÖPg=
pNext
){

444 
pNext
 = 
pPg
->
pNextAŒ
;

445 
	`sqlôeFªe
(
pPg
);

447 
pPagî
->
pFú°
 = 0;

448 
pPagî
->
pFú°Syn˚d
 = 0;

449 
pPagî
->
pLa°
 = 0;

450 
pPagî
->
pAŒ
 = 0;

451 
	`mem£t
(
pPagî
->
aHash
, 0, (pPager->aHash));

452 
pPagî
->
nPage
 = 0;

453 if–
pPagî
->
°©e
>=
SQLITE_WRITELOCK
 ){

454 
	`sqlôïagî_rﬁlback
(
pPagî
);

456 
	`sqlôeOsU∆ock
(&
pPagî
->
fd
);

457 
pPagî
->
°©e
 = 
SQLITE_UNLOCK
;

458 
pPagî
->
dbSize
 = -1;

459 
pPagî
->
nRef
 = 0;

460 
	`as£π
–
pPagî
->
jou∫ÆO≥n
==0 );

461 
	}
}

473 
	$∑gî_unwrôñock
(
Pagî
 *
pPagî
){

474 
rc
;

475 
PgHdr
 *
pPg
;

476 if–
pPagî
->
°©e
<
SQLITE_WRITELOCK
 )  
SQLITE_OK
;

477 
	`sqlôïagî_ck±_commô
(
pPagî
);

478 if–
pPagî
->
ck±O≥n
 ){

479 
	`sqlôeOsClo£
(&
pPagî
->
˝fd
);

480 
pPagî
->
ck±O≥n
 = 0;

482 if–
pPagî
->
jou∫ÆO≥n
 ){

483 
	`sqlôeOsClo£
(&
pPagî
->
jfd
);

484 
pPagî
->
jou∫ÆO≥n
 = 0;

485 
	`sqlôeOsDñëe
(
pPagî
->
zJou∫Æ
);

486 
	`sqlôeFªe
–
pPagî
->
aInJou∫Æ
 );

487 
pPagî
->
aInJou∫Æ
 = 0;

488 
pPg
=
pPagî
->
pAŒ
;ÖPg;ÖPgıPg->
pNextAŒ
){

489 
pPg
->
öJou∫Æ
 = 0;

490 
pPg
->
dúty
 = 0;

491 
pPg
->
√edSync
 = 0;

494 
	`as£π
–
pPagî
->
dútyFûe
==0 ||ÖPagî->
u£Jou∫Æ
==0 );

496 
rc
 = 
	`sqlôeOsRódLock
(&
pPagî
->
fd
);

497 if–
rc
==
SQLITE_OK
 ){

498 
pPagî
->
°©e
 = 
SQLITE_READLOCK
;

504 
pPagî
->
°©e
 = 
SQLITE_UNLOCK
;

506  
rc
;

507 
	}
}

516 
u32
 
	$∑gî_cksum
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
, c⁄° *
aD©a
){

517 
u32
 
cksum
 = 
pPagî
->
cksumInô
 + 
pgno
;

518  
cksum
;

519 
	}
}

528 
	$∑gî_∂ayback_⁄e_∑ge
(
Pagî
 *
pPagî
, 
OsFûe
 *
jfd
, 
f‹m©
){

529 
rc
;

530 
PgHdr
 *
pPg
;

531 
PageRec‹d
 
pgRec
;

532 
u32
 
cksum
;

534 
rc
 = 
	`ªad32bôs
(
f‹m©
, 
jfd
, &
pgRec
.
pgno
);

535 if–
rc
!=
SQLITE_OK
 ) Ñc;

536 
rc
 = 
	`sqlôeOsRód
(
jfd
, &
pgRec
.
aD©a
, (pgRec.aData));

537 if–
rc
!=
SQLITE_OK
 ) Ñc;

544 if–
pgRec
.
pgno
==0 ){

545  
SQLITE_DONE
;

547 if–
pgRec
.
pgno
>()
pPagî
->
dbSize
 ){

548  
SQLITE_OK
;

550 if–
f‹m©
>=
JOURNAL_FORMAT_3
 ){

551 
rc
 = 
	`ªad32bôs
(
f‹m©
, 
jfd
, &
cksum
);

552 if–
rc
 ) Ñc;

553 if–
	`∑gî_cksum
(
pPagî
, 
pgRec
.
pgno
,ÖgRec.
aD©a
)!=
cksum
 ){

554  
SQLITE_DONE
;

561 
pPg
 = 
	`∑gî_lookup
(
pPagî
, 
pgRec
.
pgno
);

562 
	`TRACE2
("PLAYBACK %d\n", 
pgRec
.
pgno
);

563 
	`sqlôeOsSìk
(&
pPagî
->
fd
, (
pgRec
.
pgno
-1)*(
off_t
)
SQLITE_PAGE_SIZE
);

564 
rc
 = 
	`sqlôeOsWrôe
(&
pPagî
->
fd
, 
pgRec
.
aD©a
, 
SQLITE_PAGE_SIZE
);

565 if–
pPg
 ){

570 
	`as£π
–
pPg
->
nRef
==0 ||ÖPg->
pgno
==1 );

571 
	`mem˝y
(
	`PGHDR_TO_DATA
(
pPg
), 
pgRec
.
aD©a
, 
SQLITE_PAGE_SIZE
);

572 
	`mem£t
(
	`PGHDR_TO_EXTRA
(
pPg
), 0, 
pPagî
->
nExåa
);

573 
pPg
->
dúty
 = 0;

574 
pPg
->
√edSync
 = 0;

575 
	`CODEC
(
pPagî
, 
	`PGHDR_TO_DATA
(
pPg
),ÖPg->
pgno
, 3);

577  
rc
;

578 
	}
}

632 
	$∑gî_∂ayback
(
Pagî
 *
pPagî
, 
u£Jou∫ÆSize
){

633 
off_t
 
szJ
;

634 
nRec
;

635 
i
;

636 
Pgno
 
mxPg
 = 0;

637 
f‹m©
;

638 
aMagic
[(
aJou∫ÆMagic1
)];

639 
rc
;

644 
	`as£π
–
pPagî
->
jou∫ÆO≥n
 );

645 
	`sqlôeOsSìk
(&
pPagî
->
jfd
, 0);

646 
rc
 = 
	`sqlôeOsFûeSize
(&
pPagî
->
jfd
, &
szJ
);

647 if–
rc
!=
SQLITE_OK
 ){

648 
íd_∂ayback
;

657 if–
szJ
 < (
aMagic
)+(
Pgno
) ){

658 
íd_∂ayback
;

664 
rc
 = 
	`sqlôeOsRód
(&
pPagî
->
jfd
, 
aMagic
, (aMagic));

665 if–
rc
!=
SQLITE_OK
 ){

666 
rc
 = 
SQLITE_PROTOCOL
;

667 
íd_∂ayback
;

669 if–
	`memcmp
(
aMagic
, 
aJou∫ÆMagic3
, (aMagic))==0 ){

670 
f‹m©
 = 
JOURNAL_FORMAT_3
;

671 }if–
	`memcmp
(
aMagic
, 
aJou∫ÆMagic2
, (aMagic))==0 ){

672 
f‹m©
 = 
JOURNAL_FORMAT_2
;

673 }if–
	`memcmp
(
aMagic
, 
aJou∫ÆMagic1
, (aMagic))==0 ){

674 
f‹m©
 = 
JOURNAL_FORMAT_1
;

676 
rc
 = 
SQLITE_PROTOCOL
;

677 
íd_∂ayback
;

679 if–
f‹m©
>=
JOURNAL_FORMAT_3
 ){

680 if–
szJ
 < (
aMagic
Ë+ 3*(
u32
) ){

687 
íd_∂ayback
;

689 
rc
 = 
	`ªad32bôs
(
f‹m©
, &
pPagî
->
jfd
, (
u32
*)&
nRec
);

690 if–
rc
 ) 
íd_∂ayback
;

691 
rc
 = 
	`ªad32bôs
(
f‹m©
, &
pPagî
->
jfd
, &pPagî->
cksumInô
);

692 if–
rc
 ) 
íd_∂ayback
;

693 if–
nRec
==0xfffffff‡|| 
u£Jou∫ÆSize
 ){

694 
nRec
 = (
szJ
 - 
	`JOURNAL_HDR_SZ
(3))/
	`JOURNAL_PG_SZ
(3);

697 
nRec
 = (
szJ
 - 
	`JOURNAL_HDR_SZ
(2))/
	`JOURNAL_PG_SZ
(2);

698 
	`as£π
–
nRec
*
	`JOURNAL_PG_SZ
(2)+
	`JOURNAL_HDR_SZ
(2)==
szJ
 );

700 
rc
 = 
	`ªad32bôs
(
f‹m©
, &
pPagî
->
jfd
, &
mxPg
);

701 if–
rc
!=
SQLITE_OK
 ){

702 
íd_∂ayback
;

704 
	`as£π
–
pPagî
->
‹igDbSize
==0 ||ÖPagî->‹igDbSize==
mxPg
 );

705 
rc
 = 
	`sqlôeOsTrunˇã
(&
pPagî
->
fd
, 
SQLITE_PAGE_SIZE
*(
off_t
)
mxPg
);

706 if–
rc
!=
SQLITE_OK
 ){

707 
íd_∂ayback
;

709 
pPagî
->
dbSize
 = 
mxPg
;

713 
i
=0; i<
nRec
; i++){

714 
rc
 = 
	`∑gî_∂ayback_⁄e_∑ge
(
pPagî
, &pPagî->
jfd
, 
f‹m©
);

715 if–
rc
!=
SQLITE_OK
 ){

716 if–
rc
==
SQLITE_DONE
 ){

717 
rc
 = 
SQLITE_OK
;

727 if–
rc
==
SQLITE_OK
 ){

728 
PgHdr
 *
pPg
;

729 
pPg
=
pPagî
->
pAŒ
;ÖPg;ÖPgıPg->
pNextAŒ
){

730 
zBuf
[
SQLITE_PAGE_SIZE
];

731 if–!
pPg
->
dúty
 ) ;

732 if–()
pPg
->
pgno
 <
pPagî
->
‹igDbSize
 ){

733 
	`sqlôeOsSìk
(&
pPagî
->
fd
, 
SQLITE_PAGE_SIZE
*(
off_t
)(
pPg
->
pgno
-1));

734 
rc
 = 
	`sqlôeOsRód
(&
pPagî
->
fd
, 
zBuf
, 
SQLITE_PAGE_SIZE
);

735 
	`TRACE2
("REFETCH %d\n", 
pPg
->
pgno
);

736 
	`CODEC
(
pPagî
, 
zBuf
, 
pPg
->
pgno
, 2);

737 if–
rc
 ) ;

739 
	`mem£t
(
zBuf
, 0, 
SQLITE_PAGE_SIZE
);

741 if–
pPg
->
nRef
==0 || 
	`memcmp
(
zBuf
, 
	`PGHDR_TO_DATA
’Pg), 
SQLITE_PAGE_SIZE
) ){

742 
	`mem˝y
(
	`PGHDR_TO_DATA
(
pPg
), 
zBuf
, 
SQLITE_PAGE_SIZE
);

743 
	`mem£t
(
	`PGHDR_TO_EXTRA
(
pPg
), 0, 
pPagî
->
nExåa
);

745 
pPg
->
√edSync
 = 0;

746 
pPg
->
dúty
 = 0;

750 
íd_∂ayback
:

751 if–
rc
!=
SQLITE_OK
 ){

752 
	`∑gî_unwrôñock
(
pPagî
);

753 
pPagî
->
îrMask
 |
PAGER_ERR_CORRUPT
;

754 
rc
 = 
SQLITE_CORRUPT
;

756 
rc
 = 
	`∑gî_unwrôñock
(
pPagî
);

758  
rc
;

759 
	}
}

775 
	$∑gî_ck±_∂ayback
(
Pagî
 *
pPagî
){

776 
off_t
 
szJ
;

777 
nRec
;

778 
i
;

779 
rc
;

783 
rc
 = 
	`sqlôeOsTrunˇã
(&
pPagî
->
fd
, 
SQLITE_PAGE_SIZE
*(
off_t
ÌPagî->
ck±Size
);

784 
pPagî
->
dbSize
 =ÖPagî->
ck±Size
;

788 
	`as£π
–
pPagî
->
ck±InU£
 &&ÖPagî->
jou∫ÆO≥n
 );

789 
	`sqlôeOsSìk
(&
pPagî
->
˝fd
, 0);

790 
nRec
 = 
pPagî
->
ck±NRec
;

797 
i
=
nRec
-1; i>=0; i--){

798 
rc
 = 
	`∑gî_∂ayback_⁄e_∑ge
(
pPagî
, &pPagî->
˝fd
, 2);

799 
	`as£π
–
rc
!=
SQLITE_DONE
 );

800 if–
rc
!=
SQLITE_OK
 ) 
íd_ck±_∂ayback
;

806 
rc
 = 
	`sqlôeOsSìk
(&
pPagî
->
jfd
,ÖPagî->
ck±JSize
);

807 if–
rc
!=
SQLITE_OK
 ){

808 
íd_ck±_∂ayback
;

810 
rc
 = 
	`sqlôeOsFûeSize
(&
pPagî
->
jfd
, &
szJ
);

811 if–
rc
!=
SQLITE_OK
 ){

812 
íd_ck±_∂ayback
;

814 
nRec
 = (
szJ
 - 
pPagî
->
ck±JSize
)/
	`JOURNAL_PG_SZ
(
jou∫Æ_f‹m©
);

815 
i
=
nRec
-1; i>=0; i--){

816 
rc
 = 
	`∑gî_∂ayback_⁄e_∑ge
(
pPagî
, &pPagî->
jfd
, 
jou∫Æ_f‹m©
);

817 if–
rc
!=
SQLITE_OK
 ){

818 
	`as£π
–
rc
!=
SQLITE_DONE
 );

819 
íd_ck±_∂ayback
;

823 
íd_ck±_∂ayback
:

824 if–
rc
!=
SQLITE_OK
 ){

825 
pPagî
->
îrMask
 |
PAGER_ERR_CORRUPT
;

826 
rc
 = 
SQLITE_CORRUPT
;

828  
rc
;

829 
	}
}

841 
	$sqlôïagî_£t_ˇchesize
(
Pagî
 *
pPagî
, 
mxPage
){

842 if–
mxPage
>=0 ){

843 
pPagî
->
noSync
 =ÖPagî->
ãmpFûe
;

844 if–
pPagî
->
noSync
==0 )ÖPagî->
√edSync
 = 0;

846 
pPagî
->
noSync
 = 1;

847 
mxPage
 = -mxPage;

849 if–
mxPage
>10 ){

850 
pPagî
->
mxPage
 = mxPage;

852 
	}
}

880 
	$sqlôïagî_£t_ß„ty_Àvñ
(
Pagî
 *
pPagî
, 
Àvñ
){

881 
pPagî
->
noSync
 = 
Àvñ
==1 ||ÖPagî->
ãmpFûe
;

882 
pPagî
->
fuŒSync
 = 
Àvñ
==3 && !pPagî->
ãmpFûe
;

883 if–
pPagî
->
noSync
==0 )ÖPagî->
√edSync
 = 0;

884 
	}
}

895 
	$sqlôïagî_›íãmp
(*
zFûe
, 
OsFûe
 *
fd
){

896 
˙t
 = 8;

897 
rc
;

899 
˙t
--;

900 
	`sqlôeOsTempFûeName
(
zFûe
);

901 
rc
 = 
	`sqlôeOsO≥nEx˛usive
(
zFûe
, 
fd
, 1);

902 } 
˙t
>0 && 
rc
!=
SQLITE_OK
 );

903  
rc
;

904 
	}
}

916 
	$sqlôïagî_›í
(

917 
Pagî
 **
µPagî
,

918 c⁄° *
zFûíame
,

919 
mxPage
,

920 
nExåa
,

921 
u£Jou∫Æ


923 
Pagî
 *
pPagî
;

924 *
zFuŒP©h«me
;

925 
«meLí
;

926 
OsFûe
 
fd
;

927 
rc
, 
i
;

928 
ãmpFûe
;

929 
ªadO∆y
 = 0;

930 
zTemp
[
SQLITE_TEMPNAME_SIZE
];

932 *
µPagî
 = 0;

933 if–
sqlôe_mÆloc_Áûed
 ){

934  
SQLITE_NOMEM
;

936 if–
zFûíame
 && zFilename[0] ){

937 
zFuŒP©h«me
 = 
	`sqlôeOsFuŒP©h«me
(
zFûíame
);

938 
rc
 = 
	`sqlôeOsO≥nRódWrôe
(
zFuŒP©h«me
, &
fd
, &
ªadO∆y
);

939 
ãmpFûe
 = 0;

941 
rc
 = 
	`sqlôïagî_›íãmp
(
zTemp
, &
fd
);

942 
zFûíame
 = 
zTemp
;

943 
zFuŒP©h«me
 = 
	`sqlôeOsFuŒP©h«me
(
zFûíame
);

944 
ãmpFûe
 = 1;

946 if–
sqlôe_mÆloc_Áûed
 ){

947  
SQLITE_NOMEM
;

949 if–
rc
!=
SQLITE_OK
 ){

950 
	`sqlôeFªe
(
zFuŒP©h«me
);

951  
SQLITE_CANTOPEN
;

953 
«meLí
 = 
	`°æí
(
zFuŒP©h«me
);

954 
pPagî
 = 
	`sqlôeMÆloc
–(*pPagîË+ 
«meLí
*3 + 30 );

955 if–
pPagî
==0 ){

956 
	`sqlôeOsClo£
(&
fd
);

957 
	`sqlôeFªe
(
zFuŒP©h«me
);

958  
SQLITE_NOMEM
;

960 
	`SET_PAGER
(
pPagî
);

961 
pPagî
->
zFûíame
 = (*)&pPager[1];

962 
pPagî
->
zDúe˘‹y
 = &pPagî->
zFûíame
[
«meLí
+1];

963 
pPagî
->
zJou∫Æ
 = &pPagî->
zDúe˘‹y
[
«meLí
+1];

964 
	`°r˝y
(
pPagî
->
zFûíame
, 
zFuŒP©h«me
);

965 
	`°r˝y
(
pPagî
->
zDúe˘‹y
, 
zFuŒP©h«me
);

966 
i
=
«meLí
; i>0 && 
pPagî
->
zDúe˘‹y
[i-1]!='/'; i--){}

967 if–
i
>0 ) 
pPagî
->
zDúe˘‹y
[i-1] = 0;

968 
	`°r˝y
(
pPagî
->
zJou∫Æ
, 
zFuŒP©h«me
);

969 
	`sqlôeFªe
(
zFuŒP©h«me
);

970 
	`°r˝y
(&
pPagî
->
zJou∫Æ
[
«meLí
], "-journal");

971 
pPagî
->
fd
 = fd;

972 
pPagî
->
jou∫ÆO≥n
 = 0;

973 
pPagî
->
u£Jou∫Æ
 = useJournal;

974 
pPagî
->
ck±O≥n
 = 0;

975 
pPagî
->
ck±InU£
 = 0;

976 
pPagî
->
nRef
 = 0;

977 
pPagî
->
dbSize
 = -1;

978 
pPagî
->
ck±Size
 = 0;

979 
pPagî
->
ck±JSize
 = 0;

980 
pPagî
->
nPage
 = 0;

981 
pPagî
->
mxPage
 = mxPage>5 ? mxPage : 10;

982 
pPagî
->
°©e
 = 
SQLITE_UNLOCK
;

983 
pPagî
->
îrMask
 = 0;

984 
pPagî
->
ãmpFûe
 =ÅempFile;

985 
pPagî
->
ªadO∆y
 =ÑeadOnly;

986 
pPagî
->
√edSync
 = 0;

987 
pPagî
->
noSync
 =ÖPagî->
ãmpFûe
 || !
u£Jou∫Æ
;

988 
pPagî
->
pFú°
 = 0;

989 
pPagî
->
pFú°Syn˚d
 = 0;

990 
pPagî
->
pLa°
 = 0;

991 
pPagî
->
nExåa
 =ÇExtra;

992 
	`mem£t
(
pPagî
->
aHash
, 0, (pPager->aHash));

993 *
µPagî
 = 
pPagî
;

994  
SQLITE_OK
;

995 
	}
}

1005 
sqlôïagî_£t_de°ru˘‹
(
Pagî
 *
pPagî
, (*
xDesc
)(*)){

1006 
pPagî
->
xDe°ru˘‹
 = 
xDesc
;

1007 
	}
}

1013 
	$sqlôïagî_∑gecou¡
(
Pagî
 *
pPagî
){

1014 
off_t
 
n
;

1015 
	`as£π
–
pPagî
!=0 );

1016 if–
pPagî
->
dbSize
>=0 ){

1017  
pPagî
->
dbSize
;

1019 if–
	`sqlôeOsFûeSize
(&
pPagî
->
fd
, &
n
)!=
SQLITE_OK
 ){

1020 
pPagî
->
îrMask
 |
PAGER_ERR_DISK
;

1023 
n
 /
SQLITE_PAGE_SIZE
;

1024 if–
pPagî
->
°©e
!=
SQLITE_UNLOCK
 ){

1025 
pPagî
->
dbSize
 = 
n
;

1027  
n
;

1028 
	}
}

1033 
syncJou∫Æ
(
Pagî
*);

1038 
	$sqlôïagî_åunˇã
(
Pagî
 *
pPagî
, 
Pgno
 
nPage
){

1039 
rc
;

1040 if–
pPagî
->
dbSize
<0 ){

1041 
	`sqlôïagî_∑gecou¡
(
pPagî
);

1043 if–
pPagî
->
îrMask
!=0 ){

1044 
rc
 = 
	`∑gî_îrcode
(
pPagî
);

1045  
rc
;

1047 if–
nPage
>=()
pPagî
->
dbSize
 ){

1048  
SQLITE_OK
;

1050 
	`syncJou∫Æ
(
pPagî
);

1051 
rc
 = 
	`sqlôeOsTrunˇã
(&
pPagî
->
fd
, 
SQLITE_PAGE_SIZE
*(
off_t
)
nPage
);

1052 if–
rc
==
SQLITE_OK
 ){

1053 
pPagî
->
dbSize
 = 
nPage
;

1055  
rc
;

1056 
	}
}

1067 
	$sqlôïagî_˛o£
(
Pagî
 *
pPagî
){

1068 
PgHdr
 *
pPg
, *
pNext
;

1069  
pPagî
->
°©e
 ){

1070 
SQLITE_WRITELOCK
: {

1071 
	`sqlôïagî_rﬁlback
(
pPagî
);

1072 
	`sqlôeOsU∆ock
(&
pPagî
->
fd
);

1073 
	`as£π
–
pPagî
->
jou∫ÆO≥n
==0 );

1076 
SQLITE_READLOCK
: {

1077 
	`sqlôeOsU∆ock
(&
pPagî
->
fd
);

1085 
pPg
=
pPagî
->
pAŒ
;ÖPg;ÖPg=
pNext
){

1086 
pNext
 = 
pPg
->
pNextAŒ
;

1087 
	`sqlôeFªe
(
pPg
);

1089 
	`sqlôeOsClo£
(&
pPagî
->
fd
);

1090 
	`as£π
–
pPagî
->
jou∫ÆO≥n
==0 );

1096 
	`CLR_PAGER
(
pPagî
);

1097 if–
pPagî
->
zFûíame
!=(*)&pPager[1] ){

1098 
	`as£π
( 0 );

1099 
	`sqlôeFªe
(
pPagî
->
zFûíame
);

1100 
	`sqlôeFªe
(
pPagî
->
zJou∫Æ
);

1101 
	`sqlôeFªe
(
pPagî
->
zDúe˘‹y
);

1103 
	`sqlôeFªe
(
pPagî
);

1104  
SQLITE_OK
;

1105 
	}
}

1110 
Pgno
 
	$sqlôïagî_∑gíumbî
(*
pD©a
){

1111 
PgHdr
 *
p
 = 
	`DATA_TO_PGHDR
(
pD©a
);

1112  
p
->
pgno
;

1113 
	}
}

1120 
	#∑ge_ªf
(
P
Ë((P)->
nRef
==0?
	`_∑ge_ªf
(P):()(P)->nRef++)

	)

1121 
	$_∑ge_ªf
(
PgHdr
 *
pPg
){

1122 if–
pPg
->
nRef
==0 ){

1124 if–
pPg
=ıPg->
pPagî
->
pFú°Syn˚d
 ){

1125 
PgHdr
 *
p
 = 
pPg
->
pNextFªe
;

1126  
p
 &&Ö->
√edSync
 ){Ö =Ö->
pNextFªe
; }

1127 
pPg
->
pPagî
->
pFú°Syn˚d
 = 
p
;

1129 if–
pPg
->
pPªvFªe
 ){

1130 
pPg
->
pPªvFªe
->
pNextFªe
 =ÖPg->pNextFree;

1132 
pPg
->
pPagî
->
pFú°
 =ÖPg->
pNextFªe
;

1134 if–
pPg
->
pNextFªe
 ){

1135 
pPg
->
pNextFªe
->
pPªvFªe
 =ÖPg->pPrevFree;

1137 
pPg
->
pPagî
->
pLa°
 =ÖPg->
pPªvFªe
;

1139 
pPg
->
pPagî
->
nRef
++;

1141 
pPg
->
nRef
++;

1142 
	`REFINFO
(
pPg
);

1143 
	}
}

1149 
	$sqlôïagî_ªf
(*
pD©a
){

1150 
PgHdr
 *
pPg
 = 
	`DATA_TO_PGHDR
(
pD©a
);

1151 
	`∑ge_ªf
(
pPg
);

1152  
SQLITE_OK
;

1153 
	}
}

1175 
	$syncJou∫Æ
(
Pagî
 *
pPagî
){

1176 
PgHdr
 *
pPg
;

1177 
rc
 = 
SQLITE_OK
;

1182 if–
pPagî
->
√edSync
 ){

1183 if–!
pPagî
->
ãmpFûe
 ){

1184 
	`as£π
–
pPagî
->
jou∫ÆO≥n
 );

1187 #i‚de‡
NDEBUG


1192 
off_t
 
hdrSz
, 
pgSz
, 
jSz
;

1193 
hdrSz
 = 
	`JOURNAL_HDR_SZ
(
jou∫Æ_f‹m©
);

1194 
pgSz
 = 
	`JOURNAL_PG_SZ
(
jou∫Æ_f‹m©
);

1195 
rc
 = 
	`sqlôeOsFûeSize
(&
pPagî
->
jfd
, &
jSz
);

1196 if–
rc
!=0 ) Ñc;

1197 
	`as£π
–
pPagî
->
nRec
*
pgSz
+
hdrSz
==
jSz
 );

1200 if–
jou∫Æ_f‹m©
>=3 ){

1202 
off_t
 
szJ
;

1203 if–
pPagî
->
fuŒSync
 ){

1204 
	`TRACE1
("SYNC\n");

1205 
rc
 = 
	`sqlôeOsSync
(&
pPagî
->
jfd
);

1206 if–
rc
!=0 ) Ñc;

1208 
	`sqlôeOsSìk
(&
pPagî
->
jfd
, (
aJou∫ÆMagic1
));

1209 
rc
 = 
	`wrôe32bôs
(&
pPagî
->
jfd
,ÖPagî->
nRec
);

1210 if–
rc
 ) Ñc;

1211 
szJ
 = 
	`JOURNAL_HDR_SZ
(
jou∫Æ_f‹m©
) +

1212 
pPagî
->
nRec
*
	`JOURNAL_PG_SZ
(
jou∫Æ_f‹m©
);

1213 
	`sqlôeOsSìk
(&
pPagî
->
jfd
, 
szJ
);

1215 
	`TRACE1
("SYNC\n");

1216 
rc
 = 
	`sqlôeOsSync
(&
pPagî
->
jfd
);

1217 if–
rc
!=0 ) Ñc;

1218 
pPagî
->
jou∫ÆSèπed
 = 1;

1220 
pPagî
->
√edSync
 = 0;

1224 
pPg
=
pPagî
->
pAŒ
;ÖPg;ÖPgıPg->
pNextAŒ
){

1225 
pPg
->
√edSync
 = 0;

1227 
pPagî
->
pFú°Syn˚d
 =ÖPagî->
pFú°
;

1230 #i‚de‡
NDEBUG


1236 
pPg
=
pPagî
->
pAŒ
;ÖPg;ÖPgıPg->
pNextAŒ
){

1237 
	`as£π
–
pPg
->
√edSync
==0 );

1239 
	`as£π
–
pPagî
->
pFú°Syn˚d
=ıPagî->
pFú°
 );

1243  
rc
;

1244 
	}
}

1251 
	$∑gî_wrôe_∑gñi°
(
PgHdr
 *
pLi°
){

1252 
Pagî
 *
pPagî
;

1253 
rc
;

1255 if–
pLi°
==0 )  
SQLITE_OK
;

1256 
pPagî
 = 
pLi°
->pPager;

1257  
pLi°
 ){

1258 
	`as£π
–
pLi°
->
dúty
 );

1259 
	`sqlôeOsSìk
(&
pPagî
->
fd
, (
pLi°
->
pgno
-1)*(
off_t
)
SQLITE_PAGE_SIZE
);

1260 
	`CODEC
(
pPagî
, 
	`PGHDR_TO_DATA
(
pLi°
),ÖLi°->
pgno
, 6);

1261 
	`TRACE2
("STORE %d\n", 
pLi°
->
pgno
);

1262 
rc
 = 
	`sqlôeOsWrôe
(&
pPagî
->
fd
, 
	`PGHDR_TO_DATA
(
pLi°
), 
SQLITE_PAGE_SIZE
);

1263 
	`CODEC
(
pPagî
, 
	`PGHDR_TO_DATA
(
pLi°
),ÖLi°->
pgno
, 0);

1264 if–
rc
 ) Ñc;

1265 
pLi°
->
dúty
 = 0;

1266 
pLi°
 =ÖLi°->
pDúty
;

1268  
SQLITE_OK
;

1269 
	}
}

1276 
PgHdr
 *
	$∑gî_gë_Æl_dúty_∑ges
(
Pagî
 *
pPagî
){

1277 
PgHdr
 *
p
, *
pLi°
;

1278 
pLi°
 = 0;

1279 
p
=
pPagî
->
pAŒ
;Ö;Öı->
pNextAŒ
){

1280 if–
p
->
dúty
 ){

1281 
p
->
pDúty
 = 
pLi°
;

1282 
pLi°
 = 
p
;

1285  
pLi°
;

1286 
	}
}

1311 
	$sqlôïagî_gë
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
, **
µPage
){

1312 
PgHdr
 *
pPg
;

1313 
rc
;

1317 
	`as£π
–
pPagî
!=0 );

1318 
	`as£π
–
pgno
!=0 );

1319 *
µPage
 = 0;

1320 if–
pPagî
->
îrMask
 & ~(
PAGER_ERR_FULL
) ){

1321  
	`∑gî_îrcode
(
pPagî
);

1327 if–
pPagî
->
nRef
==0 ){

1328 
rc
 = 
	`sqlôeOsRódLock
(&
pPagî
->
fd
);

1329 if–
rc
!=
SQLITE_OK
 ){

1330  
rc
;

1332 
pPagî
->
°©e
 = 
SQLITE_READLOCK
;

1336 if–
pPagî
->
u£Jou∫Æ
 && 
	`sqlôeOsFûeExi°s
’Pagî->
zJou∫Æ
) ){

1337 
rc
;

1341 
rc
 = 
	`sqlôeOsWrôeLock
(&
pPagî
->
fd
);

1342 if–
rc
!=
SQLITE_OK
 ){

1343 if–
	`sqlôeOsU∆ock
(&
pPagî
->
fd
)!=
SQLITE_OK
 ){

1345 
rc
 = 
SQLITE_INTERNAL
;

1347  
rc
;

1349 
pPagî
->
°©e
 = 
SQLITE_WRITELOCK
;

1359 
rc
 = 
	`sqlôeOsO≥nRódO∆y
(
pPagî
->
zJou∫Æ
, &pPagî->
jfd
);

1360 if–
rc
!=
SQLITE_OK
 ){

1361 
rc
 = 
	`sqlôeOsU∆ock
(&
pPagî
->
fd
);

1362 
	`as£π
–
rc
==
SQLITE_OK
 );

1363  
SQLITE_BUSY
;

1365 
pPagî
->
jou∫ÆO≥n
 = 1;

1366 
pPagî
->
jou∫ÆSèπed
 = 0;

1371 
rc
 = 
	`∑gî_∂ayback
(
pPagî
, 0);

1372 if–
rc
!=
SQLITE_OK
 ){

1373  
rc
;

1376 
pPg
 = 0;

1379 
pPg
 = 
	`∑gî_lookup
(
pPagî
, 
pgno
);

1381 if–
pPg
==0 ){

1383 
h
;

1384 
pPagî
->
nMiss
++;

1385 if–
pPagî
->
nPage
<pPagî->
mxPage
 ||ÖPagî->
pFú°
==0 ){

1387 
pPg
 = 
	`sqlôeMÆlocRaw
–(*pPgË+ 
SQLITE_PAGE_SIZE


1388 + (
u32
Ë+ 
pPagî
->
nExåa
 );

1389 if–
pPg
==0 ){

1390 
	`∑gî_unwrôñock
(
pPagî
);

1391 
pPagî
->
îrMask
 |
PAGER_ERR_MEM
;

1392  
SQLITE_NOMEM
;

1394 
	`mem£t
(
pPg
, 0, (*pPg));

1395 
pPg
->
pPagî
 =ÖPager;

1396 
pPg
->
pNextAŒ
 = 
pPagî
->
pAŒ
;

1397 if–
pPagî
->
pAŒ
 ){

1398 
pPagî
->
pAŒ
->
pPªvAŒ
 = 
pPg
;

1400 
pPg
->
pPªvAŒ
 = 0;

1401 
pPagî
->
pAŒ
 = 
pPg
;

1402 
pPagî
->
nPage
++;

1407 
pPg
 = 
pPagî
->
pFú°Syn˚d
;

1414 if–
pPg
==0 ){

1415 
rc
 = 
	`syncJou∫Æ
(
pPagî
);

1416 if–
rc
!=0 ){

1417 
	`sqlôïagî_rﬁlback
(
pPagî
);

1418  
SQLITE_IOERR
;

1420 
pPg
 = 
pPagî
->
pFú°
;

1422 
	`as£π
–
pPg
->
nRef
==0 );

1426 if–
pPg
->
dúty
 ){

1427 
	`as£π
–
pPg
->
√edSync
==0 );

1428 
pPg
->
pDúty
 = 0;

1429 
rc
 = 
	`∑gî_wrôe_∑gñi°
–
pPg
 );

1430 if–
rc
!=
SQLITE_OK
 ){

1431 
	`sqlôïagî_rﬁlback
(
pPagî
);

1432  
SQLITE_IOERR
;

1435 
	`as£π
–
pPg
->
dúty
==0 );

1445 if–
pPg
->
ÆwaysRﬁlback
 ){

1446 
pPagî
->
ÆwaysRﬁlback
 = 1;

1451 if–
pPg
==
pPagî
->
pFú°Syn˚d
 ){

1452 
PgHdr
 *
p
 = 
pPg
->
pNextFªe
;

1453  
p
 &&Ö->
√edSync
 ){Ö =Ö->
pNextFªe
; }

1454 
pPagî
->
pFú°Syn˚d
 = 
p
;

1456 if–
pPg
->
pPªvFªe
 ){

1457 
pPg
->
pPªvFªe
->
pNextFªe
 =ÖPg->pNextFree;

1459 
	`as£π
–
pPagî
->
pFú°
==
pPg
 );

1460 
pPagî
->
pFú°
 = 
pPg
->
pNextFªe
;

1462 if–
pPg
->
pNextFªe
 ){

1463 
pPg
->
pNextFªe
->
pPªvFªe
 =ÖPg->pPrevFree;

1465 
	`as£π
–
pPagî
->
pLa°
==
pPg
 );

1466 
pPagî
->
pLa°
 = 
pPg
->
pPªvFªe
;

1468 
pPg
->
pNextFªe
 =ÖPg->
pPªvFªe
 = 0;

1469 if–
pPg
->
pNextHash
 ){

1470 
pPg
->
pNextHash
->
pPªvHash
 =ÖPg->pPrevHash;

1472 if–
pPg
->
pPªvHash
 ){

1473 
pPg
->
pPªvHash
->
pNextHash
 =ÖPg->pNextHash;

1475 
h
 = 
	`∑gî_hash
(
pPg
->
pgno
);

1476 
	`as£π
–
pPagî
->
aHash
[
h
]==
pPg
 );

1477 
pPagî
->
aHash
[
h
] = 
pPg
->
pNextHash
;

1479 
pPg
->
pNextHash
 =ÖPg->
pPªvHash
 = 0;

1480 
pPagî
->
nOvÊ
++;

1482 
pPg
->
pgno
 =Ögno;

1483 if–
pPagî
->
aInJou∫Æ
 && ()
pgno
<ıPagî->
‹igDbSize
 ){

1484 
	`sqlôeCheckMem‹y
(
pPagî
->
aInJou∫Æ
, 
pgno
/8);

1485 
	`as£π
–
pPagî
->
jou∫ÆO≥n
 );

1486 
pPg
->
öJou∫Æ
 = (
pPagî
->
aInJou∫Æ
[
pgno
/8] & (1<<(pgno&7)))!=0;

1487 
pPg
->
√edSync
 = 0;

1489 
pPg
->
öJou∫Æ
 = 0;

1490 
pPg
->
√edSync
 = 0;

1492 if–
pPagî
->
aInCk±
 && ()
pgno
<ıPagî->
ck±Size


1493 && (
pPagî
->
aInCk±
[
pgno
/8] & (1<<(pgno&7)))!=0 ){

1494 
	`∑ge_add_to_ck±_li°
(
pPg
);

1496 
	`∑ge_ªmove_‰om_ck±_li°
(
pPg
);

1498 
pPg
->
dúty
 = 0;

1499 
pPg
->
nRef
 = 1;

1500 
	`REFINFO
(
pPg
);

1501 
pPagî
->
nRef
++;

1502 
h
 = 
	`∑gî_hash
(
pgno
);

1503 
pPg
->
pNextHash
 = 
pPagî
->
aHash
[
h
];

1504 
pPagî
->
aHash
[
h
] = 
pPg
;

1505 if–
pPg
->
pNextHash
 ){

1506 
	`as£π
–
pPg
->
pNextHash
->
pPªvHash
==0 );

1507 
pPg
->
pNextHash
->
pPªvHash
 =ÖPg;

1509 if–
pPagî
->
nExåa
>0 ){

1510 
	`mem£t
(
	`PGHDR_TO_EXTRA
(
pPg
), 0, 
pPagî
->
nExåa
);

1512 if–
pPagî
->
dbSize
<0 ) 
	`sqlôïagî_∑gecou¡
(pPager);

1513 if–
pPagî
->
îrMask
!=0 ){

1514 
	`sqlôïagî_uƒef
(
	`PGHDR_TO_DATA
(
pPg
));

1515 
rc
 = 
	`∑gî_îrcode
(
pPagî
);

1516  
rc
;

1518 if–
pPagî
->
dbSize
<()
pgno
 ){

1519 
	`mem£t
(
	`PGHDR_TO_DATA
(
pPg
), 0, 
SQLITE_PAGE_SIZE
);

1521 
rc
;

1522 
	`sqlôeOsSìk
(&
pPagî
->
fd
, (
pgno
-1)*(
off_t
)
SQLITE_PAGE_SIZE
);

1523 
rc
 = 
	`sqlôeOsRód
(&
pPagî
->
fd
, 
	`PGHDR_TO_DATA
(
pPg
), 
SQLITE_PAGE_SIZE
);

1524 
	`TRACE2
("FETCH %d\n", 
pPg
->
pgno
);

1525 
	`CODEC
(
pPagî
, 
	`PGHDR_TO_DATA
(
pPg
),ÖPg->
pgno
, 3);

1526 if–
rc
!=
SQLITE_OK
 ){

1527 
off_t
 
fûeSize
;

1528 if–
	`sqlôeOsFûeSize
(&
pPagî
->
fd
,&
fûeSize
)!=
SQLITE_OK


1529 || 
fûeSize
>=
pgno
*
SQLITE_PAGE_SIZE
 ){

1530 
	`sqlôïagî_uƒef
(
	`PGHDR_TO_DATA
(
pPg
));

1531  
rc
;

1533 
	`mem£t
(
	`PGHDR_TO_DATA
(
pPg
), 0, 
SQLITE_PAGE_SIZE
);

1539 
pPagî
->
nHô
++;

1540 
	`∑ge_ªf
(
pPg
);

1542 *
µPage
 = 
	`PGHDR_TO_DATA
(
pPg
);

1543  
SQLITE_OK
;

1544 
	}
}

1557 *
	$sqlôïagî_lookup
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
){

1558 
PgHdr
 *
pPg
;

1560 
	`as£π
–
pPagî
!=0 );

1561 
	`as£π
–
pgno
!=0 );

1562 if–
pPagî
->
îrMask
 & ~(
PAGER_ERR_FULL
) ){

1569 
pPg
 = 
	`∑gî_lookup
(
pPagî
, 
pgno
);

1570 if–
pPg
==0 )  0;

1571 
	`∑ge_ªf
(
pPg
);

1572  
	`PGHDR_TO_DATA
(
pPg
);

1573 
	}
}

1583 
	$sqlôïagî_uƒef
(*
pD©a
){

1584 
PgHdr
 *
pPg
;

1588 
pPg
 = 
	`DATA_TO_PGHDR
(
pD©a
);

1589 
	`as£π
–
pPg
->
nRef
>0 );

1590 
pPg
->
nRef
--;

1591 
	`REFINFO
(
pPg
);

1596 if–
pPg
->
nRef
==0 ){

1597 
Pagî
 *
pPagî
;

1598 
pPagî
 = 
pPg
->pPager;

1599 
pPg
->
pNextFªe
 = 0;

1600 
pPg
->
pPªvFªe
 = 
pPagî
->
pLa°
;

1601 
pPagî
->
pLa°
 = 
pPg
;

1602 if–
pPg
->
pPªvFªe
 ){

1603 
pPg
->
pPªvFªe
->
pNextFªe
 =ÖPg;

1605 
pPagî
->
pFú°
 = 
pPg
;

1607 if–
pPg
->
√edSync
==0 && 
pPagî
->
pFú°Syn˚d
==0 ){

1608 
pPagî
->
pFú°Syn˚d
 = 
pPg
;

1610 if–
pPagî
->
xDe°ru˘‹
 ){

1611 
pPagî
->
	`xDe°ru˘‹
(
pD©a
);

1617 
pPagî
->
nRef
--;

1618 
	`as£π
–
pPagî
->
nRef
>=0 );

1619 if–
pPagî
->
nRef
==0 ){

1620 
	`∑gî_ª£t
(
pPagî
);

1623  
SQLITE_OK
;

1624 
	}
}

1633 
	$∑gî_›í_jou∫Æ
(
Pagî
 *
pPagî
){

1634 
rc
;

1635 
	`as£π
–
pPagî
->
°©e
==
SQLITE_WRITELOCK
 );

1636 
	`as£π
–
pPagî
->
jou∫ÆO≥n
==0 );

1637 
	`as£π
–
pPagî
->
u£Jou∫Æ
 );

1638 
	`sqlôïagî_∑gecou¡
(
pPagî
);

1639 
pPagî
->
aInJou∫Æ
 = 
	`sqlôeMÆloc
–pPagî->
dbSize
/8 + 1 );

1640 if–
pPagî
->
aInJou∫Æ
==0 ){

1641 
	`sqlôeOsRódLock
(&
pPagî
->
fd
);

1642 
pPagî
->
°©e
 = 
SQLITE_READLOCK
;

1643  
SQLITE_NOMEM
;

1645 
rc
 = 
	`sqlôeOsO≥nEx˛usive
(
pPagî
->
zJou∫Æ
, &pPagî->
jfd
,pPagî->
ãmpFûe
);

1646 if–
rc
!=
SQLITE_OK
 ){

1647 
	`sqlôeFªe
(
pPagî
->
aInJou∫Æ
);

1648 
pPagî
->
aInJou∫Æ
 = 0;

1649 
	`sqlôeOsRódLock
(&
pPagî
->
fd
);

1650 
pPagî
->
°©e
 = 
SQLITE_READLOCK
;

1651  
SQLITE_CANTOPEN
;

1653 
	`sqlôeOsO≥nDúe˘‹y
(
pPagî
->
zDúe˘‹y
, &pPagî->
jfd
);

1654 
pPagî
->
jou∫ÆO≥n
 = 1;

1655 
pPagî
->
jou∫ÆSèπed
 = 0;

1656 
pPagî
->
√edSync
 = 0;

1657 
pPagî
->
ÆwaysRﬁlback
 = 0;

1658 
pPagî
->
nRec
 = 0;

1659 if–
pPagî
->
îrMask
!=0 ){

1660 
rc
 = 
	`∑gî_îrcode
(
pPagî
);

1661  
rc
;

1663 
pPagî
->
‹igDbSize
 =ÖPagî->
dbSize
;

1664 if–
jou∫Æ_f‹m©
==
JOURNAL_FORMAT_3
 ){

1665 
rc
 = 
	`sqlôeOsWrôe
(&
pPagî
->
jfd
, 
aJou∫ÆMagic3
, (aJournalMagic3));

1666 if–
rc
==
SQLITE_OK
 ){

1667 
rc
 = 
	`wrôe32bôs
(&
pPagî
->
jfd
,ÖPagî->
noSync
 ? 0xffffffff : 0);

1669 if–
rc
==
SQLITE_OK
 ){

1670 
	`sqlôeR™dom√ss
((
pPagî
->
cksumInô
), &pPager->cksumInit);

1671 
rc
 = 
	`wrôe32bôs
(&
pPagî
->
jfd
,ÖPagî->
cksumInô
);

1673 }if–
jou∫Æ_f‹m©
==
JOURNAL_FORMAT_2
 ){

1674 
rc
 = 
	`sqlôeOsWrôe
(&
pPagî
->
jfd
, 
aJou∫ÆMagic2
, (aJournalMagic2));

1676 
	`as£π
–
jou∫Æ_f‹m©
==
JOURNAL_FORMAT_1
 );

1677 
rc
 = 
	`sqlôeOsWrôe
(&
pPagî
->
jfd
, 
aJou∫ÆMagic1
, (aJournalMagic1));

1679 if–
rc
==
SQLITE_OK
 ){

1680 
rc
 = 
	`wrôe32bôs
(&
pPagî
->
jfd
,ÖPagî->
dbSize
);

1682 if–
pPagî
->
ck±Auto›í
 && 
rc
==
SQLITE_OK
 ){

1683 
rc
 = 
	`sqlôïagî_ck±_begö
(
pPagî
);

1685 if–
rc
!=
SQLITE_OK
 ){

1686 
rc
 = 
	`∑gî_unwrôñock
(
pPagî
);

1687 if–
rc
==
SQLITE_OK
 ){

1688 
rc
 = 
SQLITE_FULL
;

1691  
rc
;

1692 
	}
}

1714 
	$sqlôïagî_begö
(*
pD©a
){

1715 
PgHdr
 *
pPg
 = 
	`DATA_TO_PGHDR
(
pD©a
);

1716 
Pagî
 *
pPagî
 = 
pPg
->pPager;

1717 
rc
 = 
SQLITE_OK
;

1718 
	`as£π
–
pPg
->
nRef
>0 );

1719 
	`as£π
–
pPagî
->
°©e
!=
SQLITE_UNLOCK
 );

1720 if–
pPagî
->
°©e
==
SQLITE_READLOCK
 ){

1721 
	`as£π
–
pPagî
->
aInJou∫Æ
==0 );

1722 
rc
 = 
	`sqlôeOsWrôeLock
(&
pPagî
->
fd
);

1723 if–
rc
!=
SQLITE_OK
 ){

1724  
rc
;

1726 
pPagî
->
°©e
 = 
SQLITE_WRITELOCK
;

1727 
pPagî
->
dútyFûe
 = 0;

1728 
	`TRACE1
("TRANSACTION\n");

1729 if–
pPagî
->
u£Jou∫Æ
 && !pPagî->
ãmpFûe
 ){

1730 
rc
 = 
	`∑gî_›í_jou∫Æ
(
pPagî
);

1733  
rc
;

1734 
	}
}

1753 
	$sqlôïagî_wrôe
(*
pD©a
){

1754 
PgHdr
 *
pPg
 = 
	`DATA_TO_PGHDR
(
pD©a
);

1755 
Pagî
 *
pPagî
 = 
pPg
->pPager;

1756 
rc
 = 
SQLITE_OK
;

1760 if–
pPagî
->
îrMask
 ){

1761  
	`∑gî_îrcode
(
pPagî
);

1763 if–
pPagî
->
ªadO∆y
 ){

1764  
SQLITE_PERM
;

1770 
pPg
->
dúty
 = 1;

1771 if–
pPg
->
öJou∫Æ
 && (pPg->
öCk±
 || 
pPagî
->
ck±InU£
==0) ){

1772 
pPagî
->
dútyFûe
 = 1;

1773  
SQLITE_OK
;

1783 
	`as£π
–
pPagî
->
°©e
!=
SQLITE_UNLOCK
 );

1784 
rc
 = 
	`sqlôïagî_begö
(
pD©a
);

1785 if–
rc
!=
SQLITE_OK
 ){

1786  
rc
;

1788 
	`as£π
–
pPagî
->
°©e
==
SQLITE_WRITELOCK
 );

1789 if–!
pPagî
->
jou∫ÆO≥n
 &&ÖPagî->
u£Jou∫Æ
 ){

1790 
rc
 = 
	`∑gî_›í_jou∫Æ
(
pPagî
);

1791 if–
rc
!=
SQLITE_OK
 ) Ñc;

1793 
	`as£π
–
pPagî
->
jou∫ÆO≥n
 || !pPagî->
u£Jou∫Æ
 );

1794 
pPagî
->
dútyFûe
 = 1;

1800 if–!
pPg
->
öJou∫Æ
 && 
pPagî
->
u£Jou∫Æ
 ){

1801 if–()
pPg
->
pgno
 <
pPagî
->
‹igDbSize
 ){

1802 
szPg
;

1803 
u32
 
ßved
;

1804 if–
jou∫Æ_f‹m©
>=
JOURNAL_FORMAT_3
 ){

1805 
u32
 
cksum
 = 
	`∑gî_cksum
(
pPagî
, 
pPg
->
pgno
, 
pD©a
);

1806 
ßved
 = *(
u32
*)
	`PGHDR_TO_EXTRA
(
pPg
);

1807 
	`°‹e32bôs
(
cksum
, 
pPg
, 
SQLITE_PAGE_SIZE
);

1808 
szPg
 = 
SQLITE_PAGE_SIZE
+8;

1810 
szPg
 = 
SQLITE_PAGE_SIZE
+4;

1812 
	`°‹e32bôs
(
pPg
->
pgno
,ÖPg, -4);

1813 
	`CODEC
(
pPagî
, 
pD©a
, 
pPg
->
pgno
, 7);

1814 
rc
 = 
	`sqlôeOsWrôe
(&
pPagî
->
jfd
, &((*)
pD©a
)[-4], 
szPg
);

1815 
	`TRACE3
("JOURNAL %d %d\n", 
pPg
->
pgno
,ÖPg->
√edSync
);

1816 
	`CODEC
(
pPagî
, 
pD©a
, 
pPg
->
pgno
, 0);

1817 if–
jou∫Æ_f‹m©
>=
JOURNAL_FORMAT_3
 ){

1818 *(
u32
*)
	`PGHDR_TO_EXTRA
(
pPg
Ë
ßved
;

1820 if–
rc
!=
SQLITE_OK
 ){

1821 
	`sqlôïagî_rﬁlback
(
pPagî
);

1822 
pPagî
->
îrMask
 |
PAGER_ERR_FULL
;

1823  
rc
;

1825 
pPagî
->
nRec
++;

1826 
	`as£π
–
pPagî
->
aInJou∫Æ
!=0 );

1827 
pPagî
->
aInJou∫Æ
[
pPg
->
pgno
/8] |= 1<<(pPg->pgno&7);

1828 
pPg
->
√edSync
 = !
pPagî
->
noSync
;

1829 
pPg
->
öJou∫Æ
 = 1;

1830 if–
pPagî
->
ck±InU£
 ){

1831 
pPagî
->
aInCk±
[
pPg
->
pgno
/8] |= 1<<(pPg->pgno&7);

1832 
	`∑ge_add_to_ck±_li°
(
pPg
);

1835 
pPg
->
√edSync
 = !
pPagî
->
jou∫ÆSèπed
 && !pPagî->
noSync
;

1836 
	`TRACE3
("APPEND %d %d\n", 
pPg
->
pgno
,ÖPg->
√edSync
);

1838 if–
pPg
->
√edSync
 ){

1839 
pPagî
->
√edSync
 = 1;

1848 if–
pPagî
->
ck±InU£
 && !
pPg
->
öCk±
 && (ÌPg->
pgno
<ıPagî->
ck±Size
 ){

1849 
	`as£π
–
pPg
->
öJou∫Æ
 || (ÌPg->
pgno
>
pPagî
->
‹igDbSize
 );

1850 
	`°‹e32bôs
(
pPg
->
pgno
,ÖPg, -4);

1851 
	`CODEC
(
pPagî
, 
pD©a
, 
pPg
->
pgno
, 7);

1852 
rc
 = 
	`sqlôeOsWrôe
(&
pPagî
->
˝fd
, &((*)
pD©a
)[-4], 
SQLITE_PAGE_SIZE
+4);

1853 
	`TRACE2
("CKPT-JOURNAL %d\n", 
pPg
->
pgno
);

1854 
	`CODEC
(
pPagî
, 
pD©a
, 
pPg
->
pgno
, 0);

1855 if–
rc
!=
SQLITE_OK
 ){

1856 
	`sqlôïagî_rﬁlback
(
pPagî
);

1857 
pPagî
->
îrMask
 |
PAGER_ERR_FULL
;

1858  
rc
;

1860 
pPagî
->
ck±NRec
++;

1861 
	`as£π
–
pPagî
->
aInCk±
!=0 );

1862 
pPagî
->
aInCk±
[
pPg
->
pgno
/8] |= 1<<(pPg->pgno&7);

1863 
	`∑ge_add_to_ck±_li°
(
pPg
);

1868 if–
pPagî
->
dbSize
<()
pPg
->
pgno
 ){

1869 
pPagî
->
dbSize
 = 
pPg
->
pgno
;

1871  
rc
;

1872 
	}
}

1879 
	$sqlôïagî_iswrôóbÀ
(*
pD©a
){

1880 
PgHdr
 *
pPg
 = 
	`DATA_TO_PGHDR
(
pD©a
);

1881  
pPg
->
dúty
;

1882 
	}
}

1888 
	$sqlôïagî_ovîwrôe
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
, *
pD©a
){

1889 *
pPage
;

1890 
rc
;

1892 
rc
 = 
	`sqlôïagî_gë
(
pPagî
, 
pgno
, &
pPage
);

1893 if–
rc
==
SQLITE_OK
 ){

1894 
rc
 = 
	`sqlôïagî_wrôe
(
pPage
);

1895 if–
rc
==
SQLITE_OK
 ){

1896 
	`mem˝y
(
pPage
, 
pD©a
, 
SQLITE_PAGE_SIZE
);

1898 
	`sqlôïagî_uƒef
(
pPage
);

1900  
rc
;

1901 
	}
}

1927 
	$sqlôïagî_d⁄t_wrôe
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
){

1928 
PgHdr
 *
pPg
;

1930 
pPg
 = 
	`∑gî_lookup
(
pPagî
, 
pgno
);

1931 
pPg
->
ÆwaysRﬁlback
 = 1;

1932 if–
pPg
 &&ÖPg->
dúty
 && !
pPagî
->
ck±InU£
 ){

1933 if–
pPagî
->
dbSize
==()
pPg
->
pgno
 &&ÖPagî->
‹igDbSize
<pPager->dbSize ){

1943 
	`TRACE2
("DONT_WRITE %d\n", 
pgno
);

1944 
pPg
->
dúty
 = 0;

1947 
	}
}

1955 
	$sqlôïagî_d⁄t_rﬁlback
(*
pD©a
){

1956 
PgHdr
 *
pPg
 = 
	`DATA_TO_PGHDR
(
pD©a
);

1957 
Pagî
 *
pPagî
 = 
pPg
->pPager;

1959 if–
pPagî
->
°©e
!=
SQLITE_WRITELOCK
 ||ÖPagî->
jou∫ÆO≥n
==0 ) ;

1960 if–
pPg
->
ÆwaysRﬁlback
 || 
pPagî
->alwaysRollback ) ;

1961 if–!
pPg
->
öJou∫Æ
 && (ÌPg->
pgno
 <
pPagî
->
‹igDbSize
 ){

1962 
	`as£π
–
pPagî
->
aInJou∫Æ
!=0 );

1963 
pPagî
->
aInJou∫Æ
[
pPg
->
pgno
/8] |= 1<<(pPg->pgno&7);

1964 
pPg
->
öJou∫Æ
 = 1;

1965 if–
pPagî
->
ck±InU£
 ){

1966 
pPagî
->
aInCk±
[
pPg
->
pgno
/8] |= 1<<(pPg->pgno&7);

1967 
	`∑ge_add_to_ck±_li°
(
pPg
);

1969 
	`TRACE2
("DONT_ROLLBACK %d\n", 
pPg
->
pgno
);

1971 if–
pPagî
->
ck±InU£
 && !
pPg
->
öCk±
 && (ÌPg->
pgno
<ıPagî->
ck±Size
 ){

1972 
	`as£π
–
pPg
->
öJou∫Æ
 || (ÌPg->
pgno
>
pPagî
->
‹igDbSize
 );

1973 
	`as£π
–
pPagî
->
aInCk±
!=0 );

1974 
pPagî
->
aInCk±
[
pPg
->
pgno
/8] |= 1<<(pPg->pgno&7);

1975 
	`∑ge_add_to_ck±_li°
(
pPg
);

1977 
	}
}

1986 
	$sqlôïagî_commô
(
Pagî
 *
pPagî
){

1987 
rc
;

1988 
PgHdr
 *
pPg
;

1990 if–
pPagî
->
îrMask
==
PAGER_ERR_FULL
 ){

1991 
rc
 = 
	`sqlôïagî_rﬁlback
(
pPagî
);

1992 if–
rc
==
SQLITE_OK
 ){

1993 
rc
 = 
SQLITE_FULL
;

1995  
rc
;

1997 if–
pPagî
->
îrMask
!=0 ){

1998 
rc
 = 
	`∑gî_îrcode
(
pPagî
);

1999  
rc
;

2001 if–
pPagî
->
°©e
!=
SQLITE_WRITELOCK
 ){

2002  
SQLITE_ERROR
;

2004 
	`TRACE1
("COMMIT\n");

2005 if–
pPagî
->
dútyFûe
==0 ){

2008 
	`as£π
–
pPagî
->
√edSync
==0 );

2009 
rc
 = 
	`∑gî_unwrôñock
(
pPagî
);

2010 
pPagî
->
dbSize
 = -1;

2011  
rc
;

2013 
	`as£π
–
pPagî
->
jou∫ÆO≥n
 );

2014 
rc
 = 
	`syncJou∫Æ
(
pPagî
);

2015 if–
rc
!=
SQLITE_OK
 ){

2016 
commô_ab‹t
;

2018 
pPg
 = 
	`∑gî_gë_Æl_dúty_∑ges
(
pPagî
);

2019 if–
pPg
 ){

2020 
rc
 = 
	`∑gî_wrôe_∑gñi°
(
pPg
);

2021 if–
rc
 || (!
pPagî
->
noSync
 && 
	`sqlôeOsSync
(&pPagî->
fd
)!=
SQLITE_OK
) ){

2022 
commô_ab‹t
;

2025 
rc
 = 
	`∑gî_unwrôñock
(
pPagî
);

2026 
pPagî
->
dbSize
 = -1;

2027  
rc
;

2031 
commô_ab‹t
:

2032 
rc
 = 
	`sqlôïagî_rﬁlback
(
pPagî
);

2033 if–
rc
==
SQLITE_OK
 ){

2034 
rc
 = 
SQLITE_FULL
;

2036  
rc
;

2037 
	}
}

2051 
	$sqlôïagî_rﬁlback
(
Pagî
 *
pPagî
){

2052 
rc
;

2053 
	`TRACE1
("ROLLBACK\n");

2054 if–!
pPagî
->
dútyFûe
 || !pPagî->
jou∫ÆO≥n
 ){

2055 
rc
 = 
	`∑gî_unwrôñock
(
pPagî
);

2056 
pPagî
->
dbSize
 = -1;

2057  
rc
;

2060 if–
pPagî
->
îrMask
!=0 &&ÖPagî->îrMask!=
PAGER_ERR_FULL
 ){

2061 if–
pPagî
->
°©e
>=
SQLITE_WRITELOCK
 ){

2062 
	`∑gî_∂ayback
(
pPagî
, 1);

2064  
	`∑gî_îrcode
(
pPagî
);

2066 if–
pPagî
->
°©e
!=
SQLITE_WRITELOCK
 ){

2067  
SQLITE_OK
;

2069 
rc
 = 
	`∑gî_∂ayback
(
pPagî
, 1);

2070 if–
rc
!=
SQLITE_OK
 ){

2071 
rc
 = 
SQLITE_CORRUPT
;

2072 
pPagî
->
îrMask
 |
PAGER_ERR_CORRUPT
;

2074 
pPagî
->
dbSize
 = -1;

2075  
rc
;

2076 
	}
}

2082 
	$sqlôïagî_i§ód⁄ly
(
Pagî
 *
pPagî
){

2083  
pPagî
->
ªadO∆y
;

2084 
	}
}

2089 *
	$sqlôïagî_°©s
(
Pagî
 *
pPagî
){

2090 
a
[9];

2091 
a
[0] = 
pPagî
->
nRef
;

2092 
a
[1] = 
pPagî
->
nPage
;

2093 
a
[2] = 
pPagî
->
mxPage
;

2094 
a
[3] = 
pPagî
->
dbSize
;

2095 
a
[4] = 
pPagî
->
°©e
;

2096 
a
[5] = 
pPagî
->
îrMask
;

2097 
a
[6] = 
pPagî
->
nHô
;

2098 
a
[7] = 
pPagî
->
nMiss
;

2099 
a
[8] = 
pPagî
->
nOvÊ
;

2100  
a
;

2101 
	}
}

2110 
	$sqlôïagî_ck±_begö
(
Pagî
 *
pPagî
){

2111 
rc
;

2112 
zTemp
[
SQLITE_TEMPNAME_SIZE
];

2113 if–!
pPagî
->
jou∫ÆO≥n
 ){

2114 
pPagî
->
ck±Auto›í
 = 1;

2115  
SQLITE_OK
;

2117 
	`as£π
–
pPagî
->
jou∫ÆO≥n
 );

2118 
	`as£π
–!
pPagî
->
ck±InU£
 );

2119 
pPagî
->
aInCk±
 = 
	`sqlôeMÆloc
–pPagî->
dbSize
/8 + 1 );

2120 if–
pPagî
->
aInCk±
==0 ){

2121 
	`sqlôeOsRódLock
(&
pPagî
->
fd
);

2122  
SQLITE_NOMEM
;

2124 #i‚de‡
NDEBUG


2125 
rc
 = 
	`sqlôeOsFûeSize
(&
pPagî
->
jfd
, &pPagî->
ck±JSize
);

2126 if–
rc
 ) 
ck±_begö_Áûed
;

2127 
	`as£π
–
pPagî
->
ck±JSize
 ==

2128 
pPagî
->
nRec
*
	`JOURNAL_PG_SZ
(
jou∫Æ_f‹m©
)+
	`JOURNAL_HDR_SZ
(journal_format) );

2130 
pPagî
->
ck±JSize
 =ÖPagî->
nRec
*
	`JOURNAL_PG_SZ
(
jou∫Æ_f‹m©
)

2131 + 
	`JOURNAL_HDR_SZ
(
jou∫Æ_f‹m©
);

2132 
pPagî
->
ck±Size
 =ÖPagî->
dbSize
;

2133 if–!
pPagî
->
ck±O≥n
 ){

2134 
rc
 = 
	`sqlôïagî_›íãmp
(
zTemp
, &
pPagî
->
˝fd
);

2135 if–
rc
 ) 
ck±_begö_Áûed
;

2136 
pPagî
->
ck±O≥n
 = 1;

2137 
pPagî
->
ck±NRec
 = 0;

2139 
pPagî
->
ck±InU£
 = 1;

2140  
SQLITE_OK
;

2142 
ck±_begö_Áûed
:

2143 if–
pPagî
->
aInCk±
 ){

2144 
	`sqlôeFªe
(
pPagî
->
aInCk±
);

2145 
pPagî
->
aInCk±
 = 0;

2147  
rc
;

2148 
	}
}

2153 
	$sqlôïagî_ck±_commô
(
Pagî
 *
pPagî
){

2154 if–
pPagî
->
ck±InU£
 ){

2155 
PgHdr
 *
pPg
, *
pNext
;

2156 
	`sqlôeOsSìk
(&
pPagî
->
˝fd
, 0);

2158 
pPagî
->
ck±NRec
 = 0;

2159 
pPagî
->
ck±InU£
 = 0;

2160 
	`sqlôeFªe
–
pPagî
->
aInCk±
 );

2161 
pPagî
->
aInCk±
 = 0;

2162 
pPg
=
pPagî
->
pCk±
;ÖPg;ÖPg=
pNext
){

2163 
pNext
 = 
pPg
->
pNextCk±
;

2164 
	`as£π
–
pPg
->
öCk±
 );

2165 
pPg
->
öCk±
 = 0;

2166 
pPg
->
pPªvCk±
 =ÖPg->
pNextCk±
 = 0;

2168 
pPagî
->
pCk±
 = 0;

2170 
pPagî
->
ck±Auto›í
 = 0;

2171  
SQLITE_OK
;

2172 
	}
}

2177 
	$sqlôïagî_ck±_rﬁlback
(
Pagî
 *
pPagî
){

2178 
rc
;

2179 if–
pPagî
->
ck±InU£
 ){

2180 
rc
 = 
	`∑gî_ck±_∂ayback
(
pPagî
);

2181 
	`sqlôïagî_ck±_commô
(
pPagî
);

2183 
rc
 = 
SQLITE_OK
;

2185 
pPagî
->
ck±Auto›í
 = 0;

2186  
rc
;

2187 
	}
}

2192 c⁄° *
	$sqlôïagî_fûíame
(
Pagî
 *
pPagî
){

2193  
pPagî
->
zFûíame
;

2194 
	}
}

2199 
sqlôïagî_£t_codec
(

2200 
Pagî
 *
pPagî
,

2201 (*
xCodec
)(*,*,
Pgno
,),

2202 *
pCodecArg


2204 
pPagî
->
xCodec
 = xCodec;

2205 
pPagî
->
pCodecArg
 =ÖCodecArg;

2206 
	}
}

2208 #ifde‡
SQLITE_TEST


2212 
	$sqlôïagî_ªfdump
(
Pagî
 *
pPagî
){

2213 
PgHdr
 *
pPg
;

2214 
pPg
=
pPagî
->
pAŒ
;ÖPg;ÖPgıPg->
pNextAŒ
){

2215 if–
pPg
->
nRef
<=0 ) ;

2216 
	`¥ötf
("PAGE %3dáddr=0x%08xÇRef=%d\n",

2217 
pPg
->
pgno
, ()
	`PGHDR_TO_DATA
’Pg),ÖPg->
nRef
);

2219 
	}
}

	@pager.h

32 #i‚de‡
SQLITE_PAGE_SIZE


33 
	#SQLITE_PAGE_SIZE
 1024

	)

41 #i‚de‡
SQLITE_PAGE_RESERVE


42 
	#SQLITE_PAGE_RESERVE
 0

	)

50 
	#SQLITE_USABLE_SIZE
 (
SQLITE_PAGE_SIZE
-
SQLITE_PAGE_RESERVE
)

	)

56 
	#SQLITE_MAX_PAGE
 1073741823

	)

62 
	tPgno
;

67 
Pagî
 
	tPagî
;

73 
sqlôïagî_›í
(
Pagî
 **
µPagî
, c⁄° *
zFûíame
,

74 
nPage
, 
nExåa
, 
u£Jou∫Æ
);

75 
sqlôïagî_£t_de°ru˘‹
(
Pagî
*, (*)(*));

76 
	`sqlôïagî_£t_ˇchesize
(
Pagî
*, );

77 
	`sqlôïagî_˛o£
(
Pagî
 *
pPagî
);

78 
	`sqlôïagî_gë
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
, **
µPage
);

79 *
	`sqlôïagî_lookup
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
);

80 
	`sqlôïagî_ªf
(*);

81 
	`sqlôïagî_uƒef
(*);

82 
Pgno
 
	`sqlôïagî_∑gíumbî
(*);

83 
	`sqlôïagî_wrôe
(*);

84 
	`sqlôïagî_iswrôóbÀ
(*);

85 
	`sqlôïagî_ovîwrôe
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
, *);

86 
	`sqlôïagî_∑gecou¡
(
Pagî
*);

87 
	`sqlôïagî_åunˇã
(
Pagî
*,
Pgno
);

88 
	`sqlôïagî_begö
(*);

89 
	`sqlôïagî_commô
(
Pagî
*);

90 
	`sqlôïagî_rﬁlback
(
Pagî
*);

91 
	`sqlôïagî_i§ód⁄ly
(
Pagî
*);

92 
	`sqlôïagî_ck±_begö
(
Pagî
*);

93 
	`sqlôïagî_ck±_commô
(
Pagî
*);

94 
	`sqlôïagî_ck±_rﬁlback
(
Pagî
*);

95 
	`sqlôïagî_d⁄t_rﬁlback
(*);

96 
	`sqlôïagî_d⁄t_wrôe
(
Pagî
*, 
Pgno
);

97 *
	`sqlôïagî_°©s
(
Pagî
*);

98 
	`sqlôïagî_£t_ß„ty_Àvñ
(
Pagî
*,);

99 c⁄° *
	`sqlôïagî_fûíame
(
Pagî
*);

100 
	`sqlôïagî_ª«me
(
Pagî
*, c⁄° *
zNewName
);

101 
	`sqlôïagî_£t_codec
(
Pagî
*,(*)(*,*,
Pgno
,),*);

103 #ifde‡
SQLITE_TEST


104 
	`sqlôïagî_ªfdump
(
Pagî
*);

105 
∑gî_ªföfo_íabÀ
;

106 
jou∫Æ_f‹m©
;

	@parse.y

19 %
tokí_¥efix
 
TK_


20 %
tokí_ty≥
 {
Tokí
}

21 %
deÁu…_ty≥
 {
Tokí
}

22 %
exåa_¨gumít
 {
P¨£
 *
pP¨£
}

23 %
sy¡ax_îr‹
 {

24 if–
pP¨£
->
zEºMsg
==0 ){

25 if–
TOKEN
.
z
[0] ){

26 
sqlôeEº‹Msg
(
pP¨£
, "√¨ \"%T\": sy¡axÉº‹", &
TOKEN
);

28 
sqlôeEº‹Msg
(
pP¨£
, "incomplete SQL statement");

32 %
«me
 
sqlôeP¨£r


33 %
ö˛ude
 {

34 
	~"sqlôeI¡.h
"

35 
	~"∑r£.h
"

41 
	sLimôVÆ
 {

42 
limô
;

43 
off£t
;

55 
	sTrigEvít
 { 
a
; 
IdLi°
 * 
b
; };

63 %
n⁄assoc
 
END_OF_FILE
 
ILLEGAL
 
SPACE
 
UNCLOSED_STRING
 
COMMENT
 
FUNCTION


64 
COLUMN
 
AGG_FUNCTION
.

67 
öput
 ::
cmdli°
.

68 
cmdli°
 ::cmdli° 
ecmd
.

69 
cmdli°
 ::
ecmd
.

70 
ecmd
 ::
ex∂aö
 
cmdx
 
SEMI
.

71 
ecmd
 ::
SEMI
.

72 
cmdx
 ::
cmd
. { 
sqlôeExec
(
pP¨£
); }

73 
ex∂aö
 ::
EXPLAIN
. { 
sqlôeBegöP¨£
(
pP¨£
, 1); }

74 
ex∂aö
 ::. { 
sqlôeBegöP¨£
(
pP¨£
, 0); }

79 
cmd
 ::
BEGIN
 
å™s_›t
 
⁄c⁄f
(
R
). {
sqlôeBegöTønß˘i⁄
(
pP¨£
,R);}

80 
å™s_›t
 ::= .

81 
å™s_›t
 ::
TRANSACTION
.

82 
å™s_›t
 ::
TRANSACTION
 
nm
.

83 
cmd
 ::
COMMIT
 
å™s_›t
. {
sqlôeCommôTønß˘i⁄
(
pP¨£
);}

84 
cmd
 ::
END
 
å™s_›t
. {
sqlôeCommôTønß˘i⁄
(
pP¨£
);}

85 
cmd
 ::
ROLLBACK
 
å™s_›t
. {
sqlôeRﬁlbackTønß˘i⁄
(
pP¨£
);}

89 
cmd
 ::
¸óã_èbÀ
 
¸óã_èbÀ_¨gs
.

90 
¸óã_èbÀ
 ::
	$CREATE
(
X
Ë
	$ãmp
(
T
Ë
TABLE
 
	`nm
(
Y
). {

91 
	`sqlôeSèπTabÀ
(
pP¨£
,&
X
,&
Y
,
T
,0);

92 
	}
}

93 %
ty≥
 
ãmp
 {}

94 
	$ãmp
(
A
Ë::
TEMP
. {A = 1;
	}
}

95 
	$ãmp
(
A
Ë::. {A = 0;
	}
}

96 
¸óã_èbÀ_¨gs
 ::
LP
 
cﬁum∆i°
 
c⁄¶i°_›t
 
RP
(
X
). {

97 
sqlôeEndTabÀ
(
pP¨£
,&
X
,0);

99 
¸óã_èbÀ_¨gs
 ::
AS
 
£À˘
(
S
). {

100 
sqlôeEndTabÀ
(
pP¨£
,0,
S
);

101 
sqlôeSñe˘Dñëe
(
S
);

103 
cﬁum∆i°
 ::cﬁum∆i° 
COMMA
 
cﬁumn
.

104 
cﬁum∆i°
 ::
cﬁumn
.

110 
cﬁumn
 ::
cﬁumnid
 
ty≥
 
ˇrgli°
.

111 
cﬁumnid
 ::
nm
(
X
). {
sqlôeAddCﬁumn
(
pP¨£
,&X);}

116 %
ty≥
 
id
 {
Tokí
}

117 
	$id
(
A
Ë::
	`ID
(
X
). {A = X;
	}
}

123 %
ÁŒback
 
ID


124 
ABORT
 
AFTER
 
ASC
 
ATTACH
 
BEFORE
 
BEGIN
 
CASCADE
 
CLUSTER
 
CONFLICT


125 
COPY
 
DATABASE
 
DEFERRED
 
DELIMITERS
 
DESC
 
DETACH
 
EACH
 
END
 
EXPLAIN
 
FAIL
 
FOR


126 
GLOB
 
IGNORE
 
IMMEDIATE
 
INITIALLY
 
INSTEAD
 
LIKE
 
MATCH
 
KEY


127 
OF
 
OFFSET
 
PRAGMA
 
RAISE
 
REPLACE
 
RESTRICT
 
ROW
 
STATEMENT


128 
TEMP
 
TRIGGER
 
VACUUM
 
VIEW
.

135 %
À·
 
OR
.

136 %
À·
 
AND
.

137 %
right
 
NOT
.

138 %
À·
 
EQ
 
NE
 
ISNULL
 
NOTNULL
 
IS
 
LIKE
 
GLOB
 
BETWEEN
 
IN
.

139 %
À·
 
GT
 
GE
 
LT
 
LE
.

140 %
À·
 
BITAND
 
BITOR
 
LSHIFT
 
RSHIFT
.

141 %
À·
 
PLUS
 
MINUS
.

142 %
À·
 
STAR
 
SLASH
 
REM
.

143 %
À·
 
CONCAT
.

144 %
right
 
UMINUS
 
UPLUS
 
BITNOT
.

148 %
ty≥
 
ids
 {
Tokí
}

149 
	$ids
(
A
Ë::
	`ID
(
X
). {A = X;
	}
}

150 
	$ids
(
A
Ë::
	`STRING
(
X
). {A = X;
	}
}

154 %
ty≥
 
nm
 {
Tokí
}

155 
	$nm
(
A
Ë::
	`ID
(
X
). {A = X;
	}
}

156 
	$nm
(
A
Ë::
	`STRING
(
X
). {A = X;
	}
}

157 
	$nm
(
A
Ë::
	`JOIN_KW
(
X
). {A = X;
	}
}

159 
ty≥
 ::= .

160 
ty≥
 ::
ty≥«me
(
X
). {
sqlôeAddCﬁumnTy≥
(
pP¨£
,&X,&X);}

161 
ty≥
 ::
	$ty≥«me
(
X
Ë
LP
 sig√d 
	`RP
(
Y
). {
	`sqlôeAddCﬁumnTy≥
(
pP¨£
,&X,&Y);
	}
}

162 
ty≥
 ::
	$ty≥«me
(
X
Ë
LP
 sig√d 
COMMA
 sig√d 
	`RP
(
Y
).

163 {
	`sqlôeAddCﬁumnTy≥
(
pP¨£
,&
X
,&
Y
);
	}
}

164 %
ty≥
 
ty≥«me
 {
Tokí
}

165 
	$ty≥«me
(
A
Ë::
	`ids
(
X
). {A = X;
	}
}

166 
	$ty≥«me
(
A
Ë::
	$ty≥«me
(
X
Ë
ids
. {
A
 = X;
	}
}

167 %
ty≥
 signed {}

168 sig√d(
A
Ë::
	`INTEGER
(
X
). { A = 
	`©oi
(X.
z
); 
	}
}

169 sig√d(
A
Ë::
PLUS
 
	`INTEGER
(
X
). { A = 
	`©oi
(X.
z
); 
	}
}

170 sig√d(
A
Ë::
MINUS
 
	`INTEGER
(
X
). { A = -
	`©oi
(X.
z
); 
	}
}

171 
ˇrgli°
 ::ˇrgli° 
ˇrg
.

172 
ˇrgli°
 ::= .

173 
ˇrg
 ::
CONSTRAINT
 
nm
 
cc⁄s
.

174 
ˇrg
 ::
cc⁄s
.

175 
ˇrg
 ::
DEFAULT
 
STRING
(
X
). {
sqlôeAddDeÁu…VÆue
(
pP¨£
,&X,0);}

176 
ˇrg
 ::
DEFAULT
 
ID
(
X
). {
sqlôeAddDeÁu…VÆue
(
pP¨£
,&X,0);}

177 
ˇrg
 ::
DEFAULT
 
INTEGER
(
X
). {
sqlôeAddDeÁu…VÆue
(
pP¨£
,&X,0);}

178 
ˇrg
 ::
DEFAULT
 
PLUS
 
INTEGER
(
X
). {
sqlôeAddDeÁu…VÆue
(
pP¨£
,&X,0);}

179 
ˇrg
 ::
DEFAULT
 
MINUS
 
INTEGER
(
X
). {
sqlôeAddDeÁu…VÆue
(
pP¨£
,&X,1);}

180 
ˇrg
 ::
DEFAULT
 
FLOAT
(
X
). {
sqlôeAddDeÁu…VÆue
(
pP¨£
,&X,0);}

181 
ˇrg
 ::
DEFAULT
 
PLUS
 
FLOAT
(
X
). {
sqlôeAddDeÁu…VÆue
(
pP¨£
,&X,0);}

182 
ˇrg
 ::
DEFAULT
 
MINUS
 
FLOAT
(
X
). {
sqlôeAddDeÁu…VÆue
(
pP¨£
,&X,1);}

183 
ˇrg
 ::
DEFAULT
 
NULL
.

188 
cc⁄s
 ::
NULL
 
⁄c⁄f
.

189 
cc⁄s
 ::
NOT
 
NULL
 
⁄c⁄f
(
R
). {
sqlôeAddNŸNuŒ
(
pP¨£
, R);}

190 
cc⁄s
 ::
PRIMARY
 
KEY
 
s‹t‹dî
 
⁄c⁄f
(
R
). {
sqlôeAddPrim¨yKey
(
pP¨£
,0,R);}

191 
cc⁄s
 ::
UNIQUE
 
⁄c⁄f
(
R
). {
sqlôeCª©eIndex
(
pP¨£
,0,0,0,R,0,0);}

192 
cc⁄s
 ::
CHECK
 
LP
 
ex¥
 
RP
 
⁄c⁄f
.

193 
cc⁄s
 ::
REFERENCES
 
	$nm
(
T
Ë
	$idxli°_›t
(
TA
Ë
	`ªÁrgs
(
R
).

194 {
	`sqlôeCª©eF‹eignKey
(
pP¨£
,0,&
T
,
TA
,
R
);
	}
}

195 
cc⁄s
 ::
de„r_sub˛au£
(
D
). {
sqlôeDe„rF‹eignKey
(
pP¨£
,D);}

196 
cc⁄s
 ::
COLLATE
 
id
(
C
). {

197 
sqlôeAddCﬁœãTy≥
(
pP¨£
, 
sqlôeCﬁœãTy≥
(
C
.
z
, C.
n
));

205 %
ty≥
 
ªÁrgs
 {}

206 
	$ªÁrgs
(
A
Ë::. { A = 
OE_Re°ri˘
 * 0x010101; 
	}
}

207 
	$ªÁrgs
(
A
Ë::
	$ªÁrgs
(
X
Ë
	`ªÁrg
(
Y
). { 
A
 = (X & Y.
mask
Ë| Y.
vÆue
; 
	}
}

208 %
ty≥
 
ªÁrg
 {°ru˘ {
vÆue
; 
mask
;}}

209 
	$ªÁrg
(
A
Ë::
MATCH
 
nm
. { A.
vÆue
 = 0; A.
mask
 = 0x000000; 
	}
}

210 
	$ªÁrg
(
A
Ë::
ON
 
DELETE
 
	`ªÁ˘
(
X
). { A.
vÆue
 = X; A.
mask
 = 0x0000ff; 
	}
}

211 
	$ªÁrg
(
A
Ë::
ON
 
UPDATE
 
	`ªÁ˘
(
X
). { A.
vÆue
 = X<<8; A.
mask
 = 0x00ff00; 
	}
}

212 
	$ªÁrg
(
A
Ë::
ON
 
INSERT
 
	`ªÁ˘
(
X
). { A.
vÆue
 = X<<16; A.
mask
 = 0xff0000; 
	}
}

213 %
ty≥
 
ªÁ˘
 {}

214 
	$ªÁ˘
(
A
Ë::
SET
 
NULL
. { A = 
OE_SëNuŒ
; 
	}
}

215 
	$ªÁ˘
(
A
Ë::
SET
 
DEFAULT
. { A = 
OE_SëDÊt
; 
	}
}

216 
	$ªÁ˘
(
A
Ë::
CASCADE
. { A = 
OE_Casˇde
; 
	}
}

217 
	$ªÁ˘
(
A
Ë::
RESTRICT
. { A = 
OE_Re°ri˘
; 
	}
}

218 %
ty≥
 
de„r_sub˛au£
 {}

219 
	$de„r_sub˛au£
(
A
Ë::
NOT
 
DEFERRABLE
 
	`öô_de„ºed_¥ed_›t
(
X
). {A = X;
	}
}

220 
	$de„r_sub˛au£
(
A
Ë::
DEFERRABLE
 
	`öô_de„ºed_¥ed_›t
(
X
). {A = X;
	}
}

221 %
ty≥
 
öô_de„ºed_¥ed_›t
 {}

222 
	$öô_de„ºed_¥ed_›t
(
A
Ë::. {A = 0;
	}
}

223 
	$öô_de„ºed_¥ed_›t
(
A
Ë::
INITIALLY
 
DEFERRED
. {A = 1;
	}
}

224 
	$öô_de„ºed_¥ed_›t
(
A
Ë::
INITIALLY
 
IMMEDIATE
. {A = 0;
	}
}

229 
c⁄¶i°_›t
 ::= .

230 
c⁄¶i°_›t
 ::
COMMA
 
c⁄¶i°
.

231 
c⁄¶i°
 ::c⁄¶i° 
COMMA
 
tc⁄s
.

232 
c⁄¶i°
 ::c⁄¶i° 
tc⁄s
.

233 
c⁄¶i°
 ::
tc⁄s
.

234 
tc⁄s
 ::
CONSTRAINT
 
nm
.

235 
tc⁄s
 ::
PRIMARY
 
KEY
 
LP
 
	$idxli°
(
X
Ë
RP
 
	`⁄c⁄f
(
R
).

236 {
	`sqlôeAddPrim¨yKey
(
pP¨£
,
X
,
R
);
	}
}

237 
tc⁄s
 ::
UNIQUE
 
LP
 
	$idxli°
(
X
Ë
RP
 
	`⁄c⁄f
(
R
).

238 {
	`sqlôeCª©eIndex
(
pP¨£
,0,0,
X
,
R
,0,0);
	}
}

239 
tc⁄s
 ::
CHECK
 
ex¥
 
⁄c⁄f
.

240 
tc⁄s
 ::
FOREIGN
 
KEY
 
LP
 
	$idxli°
(
FA
Ë
RP


241 
REFERENCES
 
	$nm
(
T
Ë
	$idxli°_›t
(
TA
Ë
	$ªÁrgs
(
R
Ë
	`de„r_sub˛au£_›t
(
D
). {

242 
	`sqlôeCª©eF‹eignKey
(
pP¨£
, 
FA
, &
T
, 
TA
, 
R
);

243 
	`sqlôeDe„rF‹eignKey
(
pP¨£
, 
D
);

244 
	}
}

245 %
ty≥
 
de„r_sub˛au£_›t
 {}

246 
	$de„r_sub˛au£_›t
(
A
Ë::. {A = 0;
	}
}

247 
	$de„r_sub˛au£_›t
(
A
Ë::
	`de„r_sub˛au£
(
X
). {A = X;
	}
}

252 %
ty≥
 
⁄c⁄f
 {}

253 %
ty≥
 
‹c⁄f
 {}

254 %
ty≥
 
ªsﬁvëy≥
 {}

255 
	$⁄c⁄f
(
A
Ë::. { A = 
OE_DeÁu…
; 
	}
}

256 
	$⁄c⁄f
(
A
Ë::
ON
 
CONFLICT
 
	`ªsﬁvëy≥
(
X
). { A = X; 
	}
}

257 
	$‹c⁄f
(
A
Ë::. { A = 
OE_DeÁu…
; 
	}
}

258 
	$‹c⁄f
(
A
Ë::
OR
 
	`ªsﬁvëy≥
(
X
). { A = X; 
	}
}

259 
	$ªsﬁvëy≥
(
A
Ë::
ROLLBACK
. { A = 
OE_Rﬁlback
; 
	}
}

260 
	$ªsﬁvëy≥
(
A
Ë::
ABORT
. { A = 
OE_Ab‹t
; 
	}
}

261 
	$ªsﬁvëy≥
(
A
Ë::
FAIL
. { A = 
OE_Faû
; 
	}
}

262 
	$ªsﬁvëy≥
(
A
Ë::
IGNORE
. { A = 
OE_Ign‹e
; 
	}
}

263 
	$ªsﬁvëy≥
(
A
Ë::
REPLACE
. { A = 
OE_Rïœ˚
; 
	}
}

267 
cmd
 ::
DROP
 
TABLE
 
nm
(
X
). {
sqlôeDr›TabÀ
(
pP¨£
,&X,0);}

271 
cmd
 ::
	$CREATE
(
X
Ë
	$ãmp
(
T
Ë
VIEW
 
	$nm
(
Y
Ë
AS
 
	`£À˘
(
S
). {

272 
	`sqlôeCª©eVõw
(
pP¨£
, &
X
, &
Y
, 
S
, 
T
);

273 
	}
}

274 
cmd
 ::
DROP
 
VIEW
 
nm
(
X
). {

275 
sqlôeDr›TabÀ
(
pP¨£
, &
X
, 1);

280 
cmd
 ::
£À˘
(
X
). {

281 
sqlôeSñe˘
(
pP¨£
, 
X
, 
SRT_CÆlback
, 0, 0, 0, 0);

282 
sqlôeSñe˘Dñëe
(
X
);

285 %
ty≥
 
£À˘
 {
Sñe˘
*}

286 %
de°ru˘‹
 
£À˘
 {
sqlôeSñe˘Dñëe
(
$$
);}

287 %
ty≥
 
⁄e£À˘
 {
Sñe˘
*}

288 %
de°ru˘‹
 
⁄e£À˘
 {
sqlôeSñe˘Dñëe
(
$$
);}

290 
	$£À˘
(
A
Ë::
	`⁄e£À˘
(
X
). {A = X;
	}
}

291 
	$£À˘
(
A
Ë::
	$£À˘
(
X
Ë
	$mu…i£À˘_›
(
Y
Ë
	`⁄e£À˘
(
Z
). {

292 if–
Z
 ){

293 
Z
->
›
 = 
Y
;

294 
Z
->
pPri‹
 = 
X
;

296 
A
 = 
Z
;

297 
	}
}

298 %
ty≥
 
mu…i£À˘_›
 {}

299 
	$mu…i£À˘_›
(
A
Ë::
UNION
. {A = 
TK_UNION
;
	}
}

300 
	$mu…i£À˘_›
(
A
Ë::
UNION
 
ALL
. {A = 
TK_ALL
;
	}
}

301 
	$mu…i£À˘_›
(
A
Ë::
INTERSECT
. {A = 
TK_INTERSECT
;
	}
}

302 
	$mu…i£À˘_›
(
A
Ë::
EXCEPT
. {A = 
TK_EXCEPT
;
	}
}

303 
	$⁄e£À˘
(
A
Ë::
SELECT
 
	$di°ö˘
(
D
Ë
	$£lcﬁli°
(
W
Ë
	$‰om
(
X
Ë
	$whîe_›t
(
Y
)

304 
	$groupby_›t
(
P
Ë
	$havög_›t
(
Q
Ë
	$‹dîby_›t
(
Z
Ë
	`limô_›t
(
L
). {

305 
A
 = 
	`sqlôeSñe˘New
(
W
,
X
,
Y
,
P
,
Q
,
Z
,
D
,
L
.
limô
,L.
off£t
);

306 
	}
}

311 %
ty≥
 
di°ö˘
 {}

312 
	$di°ö˘
(
A
Ë::
DISTINCT
. {A = 1;
	}
}

313 
	$di°ö˘
(
A
Ë::
ALL
. {A = 0;
	}
}

314 
	$di°ö˘
(
A
Ë::. {A = 0;
	}
}

321 %
ty≥
 
£lcﬁli°
 {
Ex¥Li°
*}

322 %
de°ru˘‹
 
£lcﬁli°
 {
sqlôeEx¥Li°Dñëe
(
$$
);}

323 %
ty≥
 
s˛p
 {
Ex¥Li°
*}

324 %
de°ru˘‹
 
s˛p
 {
sqlôeEx¥Li°Dñëe
(
$$
);}

325 
	$s˛p
(
A
Ë::
	$£lcﬁli°
(
X
Ë
COMMA
. {
A
 = X;
	}
}

326 
	$s˛p
(
A
Ë::. {A = 0;
	}
}

327 
	$£lcﬁli°
(
A
Ë::
	$s˛p
(
P
Ë
	$ex¥
(
X
Ë
	`as
(
Y
). {

328 
A
 = 
	`sqlôeEx¥Li°Aµíd
(
P
,
X
,
Y
.
n
?&Y:0);

329 
	}
}

330 
	$£lcﬁli°
(
A
Ë::
	$s˛p
(
P
Ë
STAR
. {

331 
A
 = 
	`sqlôeEx¥Li°Aµíd
(
P
, 
	`sqlôeEx¥
(
TK_ALL
, 0, 0, 0), 0);

332 
	}
}

333 
	$£lcﬁli°
(
A
Ë::
	$s˛p
(
P
Ë
	$nm
(
X
Ë
DOT
 
STAR
. {

334 
Ex¥
 *
pRight
 = 
	`sqlôeEx¥
(
TK_ALL
, 0, 0, 0);

335 
Ex¥
 *
pLe·
 = 
	`sqlôeEx¥
(
TK_ID
, 0, 0, &
X
);

336 
A
 = 
	`sqlôeEx¥Li°Aµíd
(
P
, 
	`sqlôeEx¥
(
TK_DOT
, 
pLe·
, 
pRight
, 0), 0);

337 
	}
}

342 %
ty≥
 
as
 {
Tokí
}

343 
	$as
(
X
Ë::
AS
 
	`nm
(
Y
). { X = Y; 
	}
}

344 
	$as
(
X
Ë::
	`ids
(
Y
). { X = Y; 
	}
}

345 
	$as
(
X
Ë::. { X.
n
 = 0; 
	}
}

348 %
ty≥
 
£…abli°
 {
SrcLi°
*}

349 %
de°ru˘‹
 
£…abli°
 {
sqlôeSrcLi°Dñëe
(
$$
);}

350 %
ty≥
 
°l_¥efix
 {
SrcLi°
*}

351 %
de°ru˘‹
 
°l_¥efix
 {
sqlôeSrcLi°Dñëe
(
$$
);}

352 %
ty≥
 
‰om
 {
SrcLi°
*}

353 %
de°ru˘‹
 
‰om
 {
sqlôeSrcLi°Dñëe
(
$$
);}

357 
	$‰om
(
A
Ë::. {A = 
	`sqlôeMÆloc
((*A));
	}
}

358 
	$‰om
(
A
Ë::
FROM
 
	`£…abli°
(
X
). {A = X;
	}
}

363 
	$°l_¥efix
(
A
Ë::
	$£…abli°
(
X
Ë
	`joö›
(
Y
). {

364 
A
 = 
X
;

365 if–
A
 && A->
nSrc
>0 ) A->
a
[A->nSrc-1].
joöty≥
 = 
Y
;

366 
	}
}

367 
	$°l_¥efix
(
A
Ë::. {A = 0;
	}
}

368 
	$£…abli°
(
A
Ë::
	$°l_¥efix
(
X
Ë
	$nm
(
Y
Ë
	$dbnm
(
D
Ë
	$as
(
Z
Ë
	$⁄_›t
(
N
Ë
	`usög_›t
(
U
). {

369 
A
 = 
	`sqlôeSrcLi°Aµíd
(
X
,&
Y
,&
D
);

370 if–
Z
.
n
 ) 
	`sqlôeSrcLi°AddAlüs
(
A
,&Z);

371 if–
N
 ){

372 if–
A
 && A->
nSrc
>1 ){ A->
a
[A->nSrc-2].
pOn
 = 
N
; }

373 { 
	`sqlôeEx¥Dñëe
(
N
); }

375 if–
U
 ){

376 if–
A
 && A->
nSrc
>1 ){ A->
a
[A->nSrc-2].
pUsög
 = 
U
; }

377 { 
	`sqlôeIdLi°Dñëe
(
U
); }

379 
	}
}

380 
	$£…abli°
(
A
Ë::
	$°l_¥efix
(
X
Ë
LP
 
	$£…abli°_∑ªn
(
S
Ë
RP


381 
	$as
(
Z
Ë
	$⁄_›t
(
N
Ë
	`usög_›t
(
U
). {

382 
A
 = 
	`sqlôeSrcLi°Aµíd
(
X
,0,0);

383 
A
->
a
[A->
nSrc
-1].
pSñe˘
 = 
S
;

384 if–
Z
.
n
 ) 
	`sqlôeSrcLi°AddAlüs
(
A
,&Z);

385 if–
N
 ){

386 if–
A
 && A->
nSrc
>1 ){ A->
a
[A->nSrc-2].
pOn
 = 
N
; }

387 { 
	`sqlôeEx¥Dñëe
(
N
); }

389 if–
U
 ){

390 if–
A
 && A->
nSrc
>1 ){ A->
a
[A->nSrc-2].
pUsög
 = 
U
; }

391 { 
	`sqlôeIdLi°Dñëe
(
U
); }

393 
	}
}

399 %
ty≥
 
£…abli°_∑ªn
 {
Sñe˘
*}

400 %
de°ru˘‹
 
£…abli°_∑ªn
 {
sqlôeSñe˘Dñëe
(
$$
);}

401 
	$£…abli°_∑ªn
(
A
Ë::
	`£À˘
(
S
). {A = S;
	}
}

402 
	$£…abli°_∑ªn
(
A
Ë::
	`£…abli°
(
F
). {

403 
A
 = 
	`sqlôeSñe˘New
(0,
F
,0,0,0,0,0,-1,0);

404 
	}
}

406 %
ty≥
 
dbnm
 {
Tokí
}

407 
	$dbnm
(
A
Ë::. {A.
z
=0; A.
n
=0;
	}
}

408 
	$dbnm
(
A
Ë::
DOT
 
	`nm
(
X
). {A = X;
	}
}

410 %
ty≥
 
joö›
 {}

411 %
ty≥
 
joö›2
 {}

412 
	$joö›
(
X
Ë::
COMMA
. { X = 
JT_INNER
; 
	}
}

413 
	$joö›
(
X
Ë::
JOIN
. { X = 
JT_INNER
; 
	}
}

414 
	$joö›
(
X
Ë::
	$JOIN_KW
(
A
Ë
JOIN
. { 
X
 = 
	`sqlôeJoöTy≥
(
pP¨£
,&A,0,0); 
	}
}

415 
	$joö›
(
X
Ë::
	$JOIN_KW
(
A
Ë
	$nm
(
B
Ë
JOIN
. { 
X
 = 
	`sqlôeJoöTy≥
(
pP¨£
,&
A
,&B,0); 
	}
}

416 
	$joö›
(
X
Ë::
	$JOIN_KW
(
A
Ë
	$nm
(
B
Ë
	$nm
(
C
Ë
JOIN
.

417 { 
X
 = 
	`sqlôeJoöTy≥
(
pP¨£
,&
A
,&
B
,&
C
); 
	}
}

419 %
ty≥
 
⁄_›t
 {
Ex¥
*}

420 %
de°ru˘‹
 
⁄_›t
 {
sqlôeEx¥Dñëe
(
$$
);}

421 
	$⁄_›t
(
N
Ë::
ON
 
	`ex¥
(
E
). {N = E;
	}
}

422 
	$⁄_›t
(
N
Ë::. {N = 0;
	}
}

424 %
ty≥
 
usög_›t
 {
IdLi°
*}

425 %
de°ru˘‹
 
usög_›t
 {
sqlôeIdLi°Dñëe
(
$$
);}

426 
	$usög_›t
(
U
Ë::
USING
 
LP
 
	$idxli°
(
L
Ë
RP
. {
U
 = L;
	}
}

427 
	$usög_›t
(
U
Ë::. {U = 0;
	}
}

430 %
ty≥
 
‹dîby_›t
 {
Ex¥Li°
*}

431 %
de°ru˘‹
 
‹dîby_›t
 {
sqlôeEx¥Li°Dñëe
(
$$
);}

432 %
ty≥
 
s‹éi°
 {
Ex¥Li°
*}

433 %
de°ru˘‹
 
s‹éi°
 {
sqlôeEx¥Li°Dñëe
(
$$
);}

434 %
ty≥
 
s‹tôem
 {
Ex¥
*}

435 %
de°ru˘‹
 
s‹tôem
 {
sqlôeEx¥Dñëe
(
$$
);}

437 
	$‹dîby_›t
(
A
Ë::. {A = 0;
	}
}

438 
	$‹dîby_›t
(
A
Ë::
ORDER
 
BY
 
	`s‹éi°
(
X
). {A = X;
	}
}

439 
	$s‹éi°
(
A
Ë::
	$s‹éi°
(
X
Ë
COMMA
 
	$s‹tôem
(
Y
Ë
	$cﬁœã
(
C
Ë
	`s‹t‹dî
(
Z
). {

440 
A
 = 
	`sqlôeEx¥Li°Aµíd
(
X
,
Y
,0);

441 if–
A
 ) A->
a
[A->
nEx¥
-1].
s‹tOrdî
 = 
C
+
Z
;

442 
	}
}

443 
	$s‹éi°
(
A
Ë::
	$s‹tôem
(
Y
Ë
	$cﬁœã
(
C
Ë
	`s‹t‹dî
(
Z
). {

444 
A
 = 
	`sqlôeEx¥Li°Aµíd
(0,
Y
,0);

445 if–
A
 ) A->
a
[0].
s‹tOrdî
 = 
C
+
Z
;

446 
	}
}

447 
	$s‹tôem
(
A
Ë::
	`ex¥
(
X
). {A = X;
	}
}

449 %
ty≥
 
s‹t‹dî
 {}

450 %
ty≥
 
cﬁœã
 {}

452 
	$s‹t‹dî
(
A
Ë::
ASC
. {A = 
SQLITE_SO_ASC
;
	}
}

453 
	$s‹t‹dî
(
A
Ë::
DESC
. {A = 
SQLITE_SO_DESC
;
	}
}

454 
	$s‹t‹dî
(
A
Ë::. {A = 
SQLITE_SO_ASC
;
	}
}

455 
	$cﬁœã
(
C
Ë::. {C = 
SQLITE_SO_UNK
;
	}
}

456 
	$cﬁœã
(
C
Ë::
COLLATE
 
	`id
(
X
). {C = 
	`sqlôeCﬁœãTy≥
(X.
z
, X.
n
);
	}
}

458 %
ty≥
 
groupby_›t
 {
Ex¥Li°
*}

459 %
de°ru˘‹
 
groupby_›t
 {
sqlôeEx¥Li°Dñëe
(
$$
);}

460 
	$groupby_›t
(
A
Ë::. {A = 0;
	}
}

461 
	$groupby_›t
(
A
Ë::
GROUP
 
BY
 
	`ex¥li°
(
X
). {A = X;
	}
}

463 %
ty≥
 
havög_›t
 {
Ex¥
*}

464 %
de°ru˘‹
 
havög_›t
 {
sqlôeEx¥Dñëe
(
$$
);}

465 
	$havög_›t
(
A
Ë::. {A = 0;
	}
}

466 
	$havög_›t
(
A
Ë::
HAVING
 
	`ex¥
(
X
). {A = X;
	}
}

468 %
ty≥
 
limô_›t
 {
LimôVÆ
}

469 
	$limô_›t
(
A
Ë::. {A.
limô
 = -1; A.
off£t
 = 0;
	}
}

470 
	$limô_›t
(
A
Ë::
LIMIT
 sig√d(
X
). {A.
limô
 = X; A.
off£t
 = 0;
	}
}

471 
	$limô_›t
(
A
Ë::
LIMIT
 sig√d(
X
Ë
OFFSET
 sig√d(
Y
).

472 {
A
.
limô
 = 
X
; A.
off£t
 = 
Y
;
	}
}

473 
	$limô_›t
(
A
Ë::
LIMIT
 sig√d(
X
Ë
COMMA
 sig√d(
Y
).

474 {
A
.
limô
 = 
Y
; A.
off£t
 = 
X
;
	}
}

478 
cmd
 ::
DELETE
 
FROM
 
	$nm
(
X
Ë
	$dbnm
(
D
Ë
	`whîe_›t
(
Y
). {

479 
	`sqlôeDñëeFrom
(
pP¨£
, 
	`sqlôeSrcLi°Aµíd
(0,&
X
,&
D
), 
Y
);

480 
	}
}

482 %
ty≥
 
whîe_›t
 {
Ex¥
*}

483 %
de°ru˘‹
 
whîe_›t
 {
sqlôeEx¥Dñëe
(
$$
);}

485 
	$whîe_›t
(
A
Ë::. {A = 0;
	}
}

486 
	$whîe_›t
(
A
Ë::
WHERE
 
	`ex¥
(
X
). {A = X;
	}
}

488 %
ty≥
 
£éi°
 {
Ex¥Li°
*}

489 %
de°ru˘‹
 
£éi°
 {
sqlôeEx¥Li°Dñëe
(
$$
);}

493 
cmd
 ::
UPDATE
 
	$‹c⁄f
(
R
Ë
	$nm
(
X
Ë
	$dbnm
(
D
Ë
SET
 
	$£éi°
(
Y
Ë
	`whîe_›t
(
Z
).

494 {
	`sqlôeUpd©e
(
pP¨£
,
	`sqlôeSrcLi°Aµíd
(0,&
X
,&
D
),
Y
,
Z
,
R
);
	}
}

496 
	$£éi°
(
A
Ë::
	$£éi°
(
Z
Ë
COMMA
 
	$nm
(
X
Ë
EQ
 
	`ex¥
(
Y
).

497 {
A
 = 
	`sqlôeEx¥Li°Aµíd
(
Z
,
Y
,&
X
);
	}
}

498 
	$£éi°
(
A
Ë::
	$nm
(
X
Ë
EQ
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôeEx¥Li°Aµíd
(0,Y,&X);
	}
}

502 
cmd
 ::
	$ö£π_cmd
(
R
Ë
INTO
 
	$nm
(
X
Ë
	$dbnm
(
D
Ë
	$öscﬁli°_›t
(
F
)

503 
VALUES
 
LP
 
	$ôemli°
(
Y
Ë
RP
.

504 {
	`sqlôeIn£π
(
pP¨£
, 
	`sqlôeSrcLi°Aµíd
(0,&
X
,&
D
), 
Y
, 0, 
F
, 
R
);
	}
}

505 
cmd
 ::
	$ö£π_cmd
(
R
Ë
INTO
 
	$nm
(
X
Ë
	$dbnm
(
D
Ë
	$öscﬁli°_›t
(
F
Ë
	`£À˘
(
S
).

506 {
	`sqlôeIn£π
(
pP¨£
, 
	`sqlôeSrcLi°Aµíd
(0,&
X
,&
D
), 0, 
S
, 
F
, 
R
);
	}
}

508 %
ty≥
 
ö£π_cmd
 {}

509 
	$ö£π_cmd
(
A
Ë::
INSERT
 
	`‹c⁄f
(
R
). {A = R;
	}
}

510 
	$ö£π_cmd
(
A
Ë::
REPLACE
. {A = 
OE_Rïœ˚
;
	}
}

513 %
ty≥
 
ôemli°
 {
Ex¥Li°
*}

514 %
de°ru˘‹
 
ôemli°
 {
sqlôeEx¥Li°Dñëe
(
$$
);}

516 
	$ôemli°
(
A
Ë::
	$ôemli°
(
X
Ë
COMMA
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôeEx¥Li°Aµíd
(X,Y,0);
	}
}

517 
	$ôemli°
(
A
Ë::
	`ex¥
(
X
). {A = 
	`sqlôeEx¥Li°Aµíd
(0,X,0);
	}
}

519 %
ty≥
 
öscﬁli°_›t
 {
IdLi°
*}

520 %
de°ru˘‹
 
öscﬁli°_›t
 {
sqlôeIdLi°Dñëe
(
$$
);}

521 %
ty≥
 
öscﬁli°
 {
IdLi°
*}

522 %
de°ru˘‹
 
öscﬁli°
 {
sqlôeIdLi°Dñëe
(
$$
);}

524 
	$öscﬁli°_›t
(
A
Ë::. {A = 0;
	}
}

525 
	$öscﬁli°_›t
(
A
Ë::
LP
 
	$öscﬁli°
(
X
Ë
RP
. {
A
 = X;
	}
}

526 
	$öscﬁli°
(
A
Ë::
	$öscﬁli°
(
X
Ë
COMMA
 
	`nm
(
Y
). {
A
 = 
	`sqlôeIdLi°Aµíd
(X,&Y);
	}
}

527 
	$öscﬁli°
(
A
Ë::
	`nm
(
Y
). {A = 
	`sqlôeIdLi°Aµíd
(0,&Y);
	}
}

532 %
ty≥
 
ex¥
 {
Ex¥
*}

533 %
de°ru˘‹
 
ex¥
 {
sqlôeEx¥Dñëe
(
$$
);}

535 
	$ex¥
(
A
Ë::
	$LP
(
B
Ë
	$ex¥
(
X
Ë
	`RP
(
E
). {
A
 = X; 
	`sqlôeEx¥S∑n
(A,&
B
,&E); 
	}
}

536 
	$ex¥
(
A
Ë::
	`NULL
(
X
). {A = 
	`sqlôeEx¥
(
TK_NULL
, 0, 0, &X);
	}
}

537 
	$ex¥
(
A
Ë::
	`ID
(
X
). {A = 
	`sqlôeEx¥
(
TK_ID
, 0, 0, &X);
	}
}

538 
	$ex¥
(
A
Ë::
	`JOIN_KW
(
X
). {A = 
	`sqlôeEx¥
(
TK_ID
, 0, 0, &X);
	}
}

539 
	$ex¥
(
A
Ë::
	$nm
(
X
Ë
DOT
 
	`nm
(
Y
). {

540 
Ex¥
 *
ãmp1
 = 
	`sqlôeEx¥
(
TK_ID
, 0, 0, &
X
);

541 
Ex¥
 *
ãmp2
 = 
	`sqlôeEx¥
(
TK_ID
, 0, 0, &
Y
);

542 
A
 = 
	`sqlôeEx¥
(
TK_DOT
, 
ãmp1
, 
ãmp2
, 0);

543 
	}
}

544 
	$ex¥
(
A
Ë::
	$nm
(
X
Ë
DOT
 
	$nm
(
Y
Ë
DOT
 
	`nm
(
Z
). {

545 
Ex¥
 *
ãmp1
 = 
	`sqlôeEx¥
(
TK_ID
, 0, 0, &
X
);

546 
Ex¥
 *
ãmp2
 = 
	`sqlôeEx¥
(
TK_ID
, 0, 0, &
Y
);

547 
Ex¥
 *
ãmp3
 = 
	`sqlôeEx¥
(
TK_ID
, 0, 0, &
Z
);

548 
Ex¥
 *
ãmp4
 = 
	`sqlôeEx¥
(
TK_DOT
, 
ãmp2
, 
ãmp3
, 0);

549 
A
 = 
	`sqlôeEx¥
(
TK_DOT
, 
ãmp1
, 
ãmp4
, 0);

550 
	}
}

551 
	$ex¥
(
A
Ë::
	`INTEGER
(
X
). {A = 
	`sqlôeEx¥
(
TK_INTEGER
, 0, 0, &X);
	}
}

552 
	$ex¥
(
A
Ë::
	`FLOAT
(
X
). {A = 
	`sqlôeEx¥
(
TK_FLOAT
, 0, 0, &X);
	}
}

553 
	$ex¥
(
A
Ë::
	`STRING
(
X
). {A = 
	`sqlôeEx¥
(
TK_STRING
, 0, 0, &X);
	}
}

554 
	$ex¥
(
A
Ë::
	`VARIABLE
(
X
). {

555 
A
 = 
	`sqlôeEx¥
(
TK_VARIABLE
, 0, 0, &
X
);

556 if–
A
 ) A->
iTabÀ
 = ++
pP¨£
->
nV¨
;

557 
	}
}

558 
	$ex¥
(
A
Ë::
	$ID
(
X
Ë
LP
 
	$ex¥li°
(
Y
Ë
	`RP
(
E
). {

559 
A
 = 
	`sqlôeEx¥Fun˘i⁄
(
Y
, &
X
);

560 
	`sqlôeEx¥S∑n
(
A
,&
X
,&
E
);

561 
	}
}

562 
	$ex¥
(
A
Ë::
	$ID
(
X
Ë
LP
 
STAR
 
	`RP
(
E
). {

563 
A
 = 
	`sqlôeEx¥Fun˘i⁄
(0, &
X
);

564 
	`sqlôeEx¥S∑n
(
A
,&
X
,&
E
);

565 
	}
}

566 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
AND
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôeEx¥
(
TK_AND
, X, Y, 0);
	}
}

567 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
OR
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôeEx¥
(
TK_OR
, X, Y, 0);
	}
}

568 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
LT
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôeEx¥
(
TK_LT
, X, Y, 0);
	}
}

569 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
GT
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôeEx¥
(
TK_GT
, X, Y, 0);
	}
}

570 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
LE
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôeEx¥
(
TK_LE
, X, Y, 0);
	}
}

571 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
GE
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôeEx¥
(
TK_GE
, X, Y, 0);
	}
}

572 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
NE
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôeEx¥
(
TK_NE
, X, Y, 0);
	}
}

573 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
EQ
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôeEx¥
(
TK_EQ
, X, Y, 0);
	}
}

574 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
BITAND
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôeEx¥
(
TK_BITAND
, X, Y, 0);
	}
}

575 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
BITOR
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôeEx¥
(
TK_BITOR
, X, Y, 0);
	}
}

576 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
LSHIFT
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôeEx¥
(
TK_LSHIFT
, X, Y, 0);
	}
}

577 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
RSHIFT
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôeEx¥
(
TK_RSHIFT
, X, Y, 0);
	}
}

578 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
	$like›
(
OP
Ë
	`ex¥
(
Y
). [
LIKE
] {

579 
Ex¥Li°
 *
pLi°
 = 
	`sqlôeEx¥Li°Aµíd
(0, 
Y
, 0);

580 
pLi°
 = 
	`sqlôeEx¥Li°Aµíd
’Li°, 
X
, 0);

581 
A
 = 
	`sqlôeEx¥Fun˘i⁄
(
pLi°
, 0);

582 if–
A
 ) A->
›
 = 
OP
;

583 
	`sqlôeEx¥S∑n
(
A
, &
X
->
•™
, &
Y
->span);

584 
	}
}

585 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
NOT
 
	$like›
(
OP
Ë
	`ex¥
(
Y
). [
LIKE
] {

586 
Ex¥Li°
 *
pLi°
 = 
	`sqlôeEx¥Li°Aµíd
(0, 
Y
, 0);

587 
pLi°
 = 
	`sqlôeEx¥Li°Aµíd
’Li°, 
X
, 0);

588 
A
 = 
	`sqlôeEx¥Fun˘i⁄
(
pLi°
, 0);

589 if–
A
 ) A->
›
 = 
OP
;

590 
A
 = 
	`sqlôeEx¥
(
TK_NOT
, A, 0, 0);

591 
	`sqlôeEx¥S∑n
(
A
,&
X
->
•™
,&
Y
->span);

592 
	}
}

593 %
ty≥
 
like›
 {}

594 
	$like›
(
A
Ë::
LIKE
. {A = 
TK_LIKE
;
	}
}

595 
	$like›
(
A
Ë::
GLOB
. {A = 
TK_GLOB
;
	}
}

596 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
PLUS
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôeEx¥
(
TK_PLUS
, X, Y, 0);
	}
}

597 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
MINUS
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôeEx¥
(
TK_MINUS
, X, Y, 0);
	}
}

598 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
STAR
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôeEx¥
(
TK_STAR
, X, Y, 0);
	}
}

599 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
SLASH
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôeEx¥
(
TK_SLASH
, X, Y, 0);
	}
}

600 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
REM
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôeEx¥
(
TK_REM
, X, Y, 0);
	}
}

601 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
CONCAT
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôeEx¥
(
TK_CONCAT
, X, Y, 0);
	}
}

602 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
	`ISNULL
(
E
). {

603 
A
 = 
	`sqlôeEx¥
(
TK_ISNULL
, 
X
, 0, 0);

604 
	`sqlôeEx¥S∑n
(
A
,&
X
->
•™
,&
E
);

605 
	}
}

606 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
IS
 
	`NULL
(
E
). {

607 
A
 = 
	`sqlôeEx¥
(
TK_ISNULL
, 
X
, 0, 0);

608 
	`sqlôeEx¥S∑n
(
A
,&
X
->
•™
,&
E
);

609 
	}
}

610 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
	`NOTNULL
(
E
). {

611 
A
 = 
	`sqlôeEx¥
(
TK_NOTNULL
, 
X
, 0, 0);

612 
	`sqlôeEx¥S∑n
(
A
,&
X
->
•™
,&
E
);

613 
	}
}

614 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
NOT
 
	`NULL
(
E
). {

615 
A
 = 
	`sqlôeEx¥
(
TK_NOTNULL
, 
X
, 0, 0);

616 
	`sqlôeEx¥S∑n
(
A
,&
X
->
•™
,&
E
);

617 
	}
}

618 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
IS
 
NOT
 
	`NULL
(
E
). {

619 
A
 = 
	`sqlôeEx¥
(
TK_NOTNULL
, 
X
, 0, 0);

620 
	`sqlôeEx¥S∑n
(
A
,&
X
->
•™
,&
E
);

621 
	}
}

622 
	$ex¥
(
A
Ë::
	$NOT
(
B
Ë
	`ex¥
(
X
). {

623 
A
 = 
	`sqlôeEx¥
(
TK_NOT
, 
X
, 0, 0);

624 
	`sqlôeEx¥S∑n
(
A
,&
B
,&
X
->
•™
);

625 
	}
}

626 
	$ex¥
(
A
Ë::
	$BITNOT
(
B
Ë
	`ex¥
(
X
). {

627 
A
 = 
	`sqlôeEx¥
(
TK_BITNOT
, 
X
, 0, 0);

628 
	`sqlôeEx¥S∑n
(
A
,&
B
,&
X
->
•™
);

629 
	}
}

630 
	$ex¥
(
A
Ë::
	$MINUS
(
B
Ë
	`ex¥
(
X
). [
UMINUS
] {

631 
A
 = 
	`sqlôeEx¥
(
TK_UMINUS
, 
X
, 0, 0);

632 
	`sqlôeEx¥S∑n
(
A
,&
B
,&
X
->
•™
);

633 
	}
}

634 
	$ex¥
(
A
Ë::
	$PLUS
(
B
Ë
	`ex¥
(
X
). [
UPLUS
] {

635 
A
 = 
	`sqlôeEx¥
(
TK_UPLUS
, 
X
, 0, 0);

636 
	`sqlôeEx¥S∑n
(
A
,&
B
,&
X
->
•™
);

637 
	}
}

638 
	$ex¥
(
A
Ë::
	$LP
(
B
Ë
	$£À˘
(
X
Ë
	`RP
(
E
). {

639 
A
 = 
	`sqlôeEx¥
(
TK_SELECT
, 0, 0, 0);

640 if–
A
 ) A->
pSñe˘
 = 
X
;

641 
	`sqlôeEx¥S∑n
(
A
,&
B
,&
E
);

642 
	}
}

643 
	$ex¥
(
A
Ë::
	$ex¥
(
W
Ë
BETWEEN
 
	$ex¥
(
X
Ë
AND
 
	`ex¥
(
Y
). {

644 
Ex¥Li°
 *
pLi°
 = 
	`sqlôeEx¥Li°Aµíd
(0, 
X
, 0);

645 
pLi°
 = 
	`sqlôeEx¥Li°Aµíd
’Li°, 
Y
, 0);

646 
A
 = 
	`sqlôeEx¥
(
TK_BETWEEN
, 
W
, 0, 0);

647 if–
A
 ) A->
pLi°
 =ÖList;

648 
	`sqlôeEx¥S∑n
(
A
,&
W
->
•™
,&
Y
->span);

649 
	}
}

650 
	$ex¥
(
A
Ë::
	$ex¥
(
W
Ë
NOT
 
BETWEEN
 
	$ex¥
(
X
Ë
AND
 
	`ex¥
(
Y
). {

651 
Ex¥Li°
 *
pLi°
 = 
	`sqlôeEx¥Li°Aµíd
(0, 
X
, 0);

652 
pLi°
 = 
	`sqlôeEx¥Li°Aµíd
’Li°, 
Y
, 0);

653 
A
 = 
	`sqlôeEx¥
(
TK_BETWEEN
, 
W
, 0, 0);

654 if–
A
 ) A->
pLi°
 =ÖList;

655 
A
 = 
	`sqlôeEx¥
(
TK_NOT
, A, 0, 0);

656 
	`sqlôeEx¥S∑n
(
A
,&
W
->
•™
,&
Y
->span);

657 
	}
}

658 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
IN
 
LP
 
	$ex¥li°
(
Y
Ë
	`RP
(
E
). {

659 
A
 = 
	`sqlôeEx¥
(
TK_IN
, 
X
, 0, 0);

660 if–
A
 ) A->
pLi°
 = 
Y
;

661 
	`sqlôeEx¥S∑n
(
A
,&
X
->
•™
,&
E
);

662 
	}
}

663 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
IN
 
LP
 
	$£À˘
(
Y
Ë
	`RP
(
E
). {

664 
A
 = 
	`sqlôeEx¥
(
TK_IN
, 
X
, 0, 0);

665 if–
A
 ) A->
pSñe˘
 = 
Y
;

666 
	`sqlôeEx¥S∑n
(
A
,&
X
->
•™
,&
E
);

667 
	}
}

668 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
NOT
 
IN
 
LP
 
	$ex¥li°
(
Y
Ë
	`RP
(
E
). {

669 
A
 = 
	`sqlôeEx¥
(
TK_IN
, 
X
, 0, 0);

670 if–
A
 ) A->
pLi°
 = 
Y
;

671 
A
 = 
	`sqlôeEx¥
(
TK_NOT
, A, 0, 0);

672 
	`sqlôeEx¥S∑n
(
A
,&
X
->
•™
,&
E
);

673 
	}
}

674 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
NOT
 
IN
 
LP
 
	$£À˘
(
Y
Ë
	`RP
(
E
). {

675 
A
 = 
	`sqlôeEx¥
(
TK_IN
, 
X
, 0, 0);

676 if–
A
 ) A->
pSñe˘
 = 
Y
;

677 
A
 = 
	`sqlôeEx¥
(
TK_NOT
, A, 0, 0);

678 
	`sqlôeEx¥S∑n
(
A
,&
X
->
•™
,&
E
);

679 
	}
}

680 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
IN
 
	$nm
(
Y
Ë
	`dbnm
(
D
). {

681 
SrcLi°
 *
pSrc
 = 
	`sqlôeSrcLi°Aµíd
(0, &
Y
, &
D
);

682 
A
 = 
	`sqlôeEx¥
(
TK_IN
, 
X
, 0, 0);

683 if–
A
 ) A->
pSñe˘
 = 
	`sqlôeSñe˘New
(0,
pSrc
,0,0,0,0,0,-1,0);

684 
	`sqlôeEx¥S∑n
(
A
,&
X
->
•™
,
D
.
z
?&D:&
Y
);

685 
	}
}

686 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
NOT
 
IN
 
	$nm
(
Y
Ë
	`dbnm
(
D
). {

687 
SrcLi°
 *
pSrc
 = 
	`sqlôeSrcLi°Aµíd
(0, &
Y
, &
D
);

688 
A
 = 
	`sqlôeEx¥
(
TK_IN
, 
X
, 0, 0);

689 if–
A
 ) A->
pSñe˘
 = 
	`sqlôeSñe˘New
(0,
pSrc
,0,0,0,0,0,-1,0);

690 
A
 = 
	`sqlôeEx¥
(
TK_NOT
, A, 0, 0);

691 
	`sqlôeEx¥S∑n
(
A
,&
X
->
•™
,
D
.
z
?&D:&
Y
);

692 
	}
}

696 
	$ex¥
(
A
Ë::
	$CASE
(
C
Ë
	$ˇ£_›î™d
(
X
Ë
	$ˇ£_ex¥li°
(
Y
Ë
	$ˇ£_ñ£
(
Z
Ë
	`END
(
E
). {

697 
A
 = 
	`sqlôeEx¥
(
TK_CASE
, 
X
, 
Z
, 0);

698 if–
A
 ) A->
pLi°
 = 
Y
;

699 
	`sqlôeEx¥S∑n
(
A
, &
C
, &
E
);

700 
	}
}

701 %
ty≥
 
ˇ£_ex¥li°
 {
Ex¥Li°
*}

702 %
de°ru˘‹
 
ˇ£_ex¥li°
 {
sqlôeEx¥Li°Dñëe
(
$$
);}

703 
	$ˇ£_ex¥li°
(
A
Ë::
	$ˇ£_ex¥li°
(
X
Ë
WHEN
 
	$ex¥
(
Y
Ë
THEN
 
	`ex¥
(
Z
). {

704 
A
 = 
	`sqlôeEx¥Li°Aµíd
(
X
, 
Y
, 0);

705 
A
 = 
	`sqlôeEx¥Li°Aµíd
(A, 
Z
, 0);

706 
	}
}

707 
	$ˇ£_ex¥li°
(
A
Ë::
WHEN
 
	$ex¥
(
Y
Ë
THEN
 
	`ex¥
(
Z
). {

708 
A
 = 
	`sqlôeEx¥Li°Aµíd
(0, 
Y
, 0);

709 
A
 = 
	`sqlôeEx¥Li°Aµíd
(A, 
Z
, 0);

710 
	}
}

711 %
ty≥
 
ˇ£_ñ£
 {
Ex¥
*}

712 
	$ˇ£_ñ£
(
A
Ë::
ELSE
 
	`ex¥
(
X
). {A = X;
	}
}

713 
	$ˇ£_ñ£
(
A
Ë::. {A = 0;
	}
}

714 %
ty≥
 
ˇ£_›î™d
 {
Ex¥
*}

715 
	$ˇ£_›î™d
(
A
Ë::
	`ex¥
(
X
). {A = X;
	}
}

716 
	$ˇ£_›î™d
(
A
Ë::. {A = 0;
	}
}

718 %
ty≥
 
ex¥li°
 {
Ex¥Li°
*}

719 %
de°ru˘‹
 
ex¥li°
 {
sqlôeEx¥Li°Dñëe
(
$$
);}

720 %
ty≥
 
ex¥ôem
 {
Ex¥
*}

721 %
de°ru˘‹
 
ex¥ôem
 {
sqlôeEx¥Dñëe
(
$$
);}

723 
	$ex¥li°
(
A
Ë::
	$ex¥li°
(
X
Ë
COMMA
 
	`ex¥ôem
(
Y
).

724 {
A
 = 
	`sqlôeEx¥Li°Aµíd
(
X
,
Y
,0);
	}
}

725 
	$ex¥li°
(
A
Ë::
	`ex¥ôem
(
X
). {A = 
	`sqlôeEx¥Li°Aµíd
(0,X,0);
	}
}

726 
	$ex¥ôem
(
A
Ë::
	`ex¥
(
X
). {A = X;
	}
}

727 
	$ex¥ôem
(
A
Ë::. {A = 0;
	}
}

731 
cmd
 ::
	$CREATE
(
S
Ë
	$uniqueÊag
(
U
Ë
INDEX
 
	$nm
(
X
)

732 
ON
 
	$nm
(
Y
Ë
	$dbnm
(
D
Ë
LP
 
	$idxli°
(
Z
Ë
	$RP
(
E
Ë
	`⁄c⁄f
(
R
). {

733 
SrcLi°
 *
pSrc
 = 
	`sqlôeSrcLi°Aµíd
(0, &
Y
, &
D
);

734 if–
U
!=
OE_N⁄e
 ) U = 
R
;

735 if–
U
==
OE_DeÁu…
ËU = 
OE_Ab‹t
;

736 
	`sqlôeCª©eIndex
(
pP¨£
, &
X
, 
pSrc
, 
Z
, 
U
, &
S
, &
E
);

737 
	}
}

739 %
ty≥
 
uniqueÊag
 {}

740 
	$uniqueÊag
(
A
Ë::
UNIQUE
. { A = 
OE_Ab‹t
; 
	}
}

741 
	$uniqueÊag
(
A
Ë::. { A = 
OE_N⁄e
; 
	}
}

743 %
ty≥
 
idxli°
 {
IdLi°
*}

744 %
de°ru˘‹
 
idxli°
 {
sqlôeIdLi°Dñëe
(
$$
);}

745 %
ty≥
 
idxli°_›t
 {
IdLi°
*}

746 %
de°ru˘‹
 
idxli°_›t
 {
sqlôeIdLi°Dñëe
(
$$
);}

747 %
ty≥
 
idxôem
 {
Tokí
}

749 
	$idxli°_›t
(
A
Ë::. {A = 0;
	}
}

750 
	$idxli°_›t
(
A
Ë::
LP
 
	$idxli°
(
X
Ë
RP
. {
A
 = X;
	}
}

751 
	$idxli°
(
A
Ë::
	$idxli°
(
X
Ë
COMMA
 
	`idxôem
(
Y
). {
A
 = 
	`sqlôeIdLi°Aµíd
(X,&Y);
	}
}

752 
	$idxli°
(
A
Ë::
	`idxôem
(
Y
). {A = 
	`sqlôeIdLi°Aµíd
(0,&Y);
	}
}

753 
	$idxôem
(
A
Ë::
	$nm
(
X
Ë
s‹t‹dî
. {
A
 = X;
	}
}

758 
cmd
 ::
DROP
 
INDEX
 
	$nm
(
X
Ë
	`dbnm
(
Y
). {

759 
	`sqlôeDr›Index
(
pP¨£
, 
	`sqlôeSrcLi°Aµíd
(0,&
X
,&
Y
));

760 
	}
}

777 
cmd
 ::
PRAGMA
 
	$ids
(
X
Ë
EQ
 
	`nm
(
Y
). {
	`sqlôePøgma
(
pP¨£
,&X,&Y,0);
	}
}

778 
cmd
 ::
PRAGMA
 
	$ids
(
X
Ë
EQ
 
	`ON
(
Y
). {
	`sqlôePøgma
(
pP¨£
,&X,&Y,0);
	}
}

779 
cmd
 ::
PRAGMA
 
	$ids
(
X
Ë
EQ
 
	`∂us_num
(
Y
). {
	`sqlôePøgma
(
pP¨£
,&X,&Y,0);
	}
}

780 
cmd
 ::
PRAGMA
 
	$ids
(
X
Ë
EQ
 
	`möus_num
(
Y
). {
	`sqlôePøgma
(
pP¨£
,&X,&Y,1);
	}
}

781 
cmd
 ::
PRAGMA
 
	$ids
(
X
Ë
LP
 
	$nm
(
Y
Ë
RP
. {
	`sqlôePøgma
(
pP¨£
,&
X
,&Y,0);
	}
}

782 
cmd
 ::
PRAGMA
 
ids
(
X
). {
sqlôePøgma
(
pP¨£
,&X,&X,0);}

783 
	$∂us_num
(
A
Ë::
∂us_›t
 
	`numbî
(
X
). {A = X;
	}
}

784 
	$möus_num
(
A
Ë::
MINUS
 
	`numbî
(
X
). {A = X;
	}
}

785 
	$numbî
(
A
Ë::
	`INTEGER
(
X
). {A = X;
	}
}

786 
	$numbî
(
A
Ë::
	`FLOAT
(
X
). {A = X;
	}
}

787 
∂us_›t
 ::
PLUS
.

788 
∂us_›t
 ::= .

792 
cmd
 ::
	$CREATE
(
A
Ë
åiggî_de˛
 
BEGIN
 
	$åiggî_cmd_li°
(
S
Ë
	`END
(
Z
). {

793 
Tokí
 
Æl
;

794 
Æl
.
z
 = 
A
.z;

795 
Æl
.
n
 = (
Z
.
z
 - 
A
.z) + Z.n;

796 
	`sqlôeFöishTriggî
(
pP¨£
, 
S
, &
Æl
);

797 
	}
}

799 
åiggî_de˛
 ::
	$ãmp
(
T
Ë
TRIGGER
 
	$nm
(
B
Ë
	$åiggî_time
(
C
Ë
	$åiggî_evít
(
D
)

800 
ON
 
	$nm
(
E
Ë
	$dbnm
(
DB
Ë
	$f‹óch_˛au£
(
F
Ë
	`whí_˛au£
(
G
). {

801 
SrcLi°
 *
pTab
 = 
	`sqlôeSrcLi°Aµíd
(0, &
E
, &
DB
);

802 
	`sqlôeBegöTriggî
(
pP¨£
, &
B
, 
C
, 
D
.
a
, D.
b
, 
pTab
, 
F
, 
G
, 
T
);

803 
	}
}

805 %
ty≥
 
åiggî_time
 {}

806 
	$åiggî_time
(
A
Ë::
BEFORE
. { A = 
TK_BEFORE
; 
	}
}

807 
	$åiggî_time
(
A
Ë::
AFTER
. { A = 
TK_AFTER
; 
	}
}

808 
	$åiggî_time
(
A
Ë::
INSTEAD
 
OF
. { A = 
TK_INSTEAD
;
	}
}

809 
	$åiggî_time
(
A
Ë::. { A = 
TK_BEFORE
; 
	}
}

811 %
ty≥
 
åiggî_evít
 {
TrigEvít
}

812 %
de°ru˘‹
 
åiggî_evít
 {
sqlôeIdLi°Dñëe
(
$$
.
b
);}

813 
	$åiggî_evít
(
A
Ë::
DELETE
. { A.
a
 = 
TK_DELETE
; A.
b
 = 0; 
	}
}

814 
	$åiggî_evít
(
A
Ë::
INSERT
. { A.
a
 = 
TK_INSERT
; A.
b
 = 0; 
	}
}

815 
	$åiggî_evít
(
A
Ë::
UPDATE
. { A.
a
 = 
TK_UPDATE
; A.
b
 = 0;
	}
}

816 
	$åiggî_evít
(
A
Ë::
UPDATE
 
OF
 
	`öscﬁli°
(
X
). {A.
a
 = 
TK_UPDATE
; A.
b
 = X; 
	}
}

818 %
ty≥
 
f‹óch_˛au£
 {}

819 
	$f‹óch_˛au£
(
A
Ë::. { A = 
TK_ROW
; 
	}
}

820 
	$f‹óch_˛au£
(
A
Ë::
FOR
 
EACH
 
ROW
. { A = 
TK_ROW
; 
	}
}

821 
	$f‹óch_˛au£
(
A
Ë::
FOR
 
EACH
 
STATEMENT
. { A = 
TK_STATEMENT
; 
	}
}

823 %
ty≥
 
whí_˛au£
 {
Ex¥
 *}

824 
	$whí_˛au£
(
A
Ë::. { A = 0; 
	}
}

825 
	$whí_˛au£
(
A
Ë::
WHEN
 
	`ex¥
(
X
). { A = X; 
	}
}

827 %
ty≥
 
åiggî_cmd_li°
 {
TriggîSãp
 *}

828 %
de°ru˘‹
 
åiggî_cmd_li°
 {
sqlôeDñëeTriggîSãp
(
$$
);}

829 
	$åiggî_cmd_li°
(
A
Ë::
	$åiggî_cmd
(
X
Ë
SEMI
 
	`åiggî_cmd_li°
(
Y
). {

830 
X
->
pNext
 = 
Y
;

831 
A
 = 
X
;

832 
	}
}

833 
	$åiggî_cmd_li°
(
A
Ë::. { A = 0; 
	}
}

835 %
ty≥
 
åiggî_cmd
 {
TriggîSãp
 *}

836 %
de°ru˘‹
 
åiggî_cmd
 {
sqlôeDñëeTriggîSãp
(
$$
);}

838 
	$åiggî_cmd
(
A
Ë::
UPDATE
 
	$‹c⁄f
(
R
Ë
	$nm
(
X
Ë
SET
 
	$£éi°
(
Y
Ë
	`whîe_›t
(
Z
).

839 { 
A
 = 
	`sqlôeTriggîUpd©eSãp
(&
X
, 
Y
, 
Z
, 
R
); 
	}
}

842 
	$åiggî_cmd
(
A
Ë::
	$ö£π_cmd
(
R
Ë
INTO
 
	$nm
(
X
Ë
	$öscﬁli°_›t
(
F
)

843 
VALUES
 
LP
 
	$ôemli°
(
Y
Ë
RP
.

844 {
A
 = 
	`sqlôeTriggîIn£πSãp
(&
X
, 
F
, 
Y
, 0, 
R
);
	}
}

846 
	$åiggî_cmd
(
A
Ë::
	$ö£π_cmd
(
R
Ë
INTO
 
	$nm
(
X
Ë
	$öscﬁli°_›t
(
F
Ë
	`£À˘
(
S
).

847 {
A
 = 
	`sqlôeTriggîIn£πSãp
(&
X
, 
F
, 0, 
S
, 
R
);
	}
}

850 
	$åiggî_cmd
(
A
Ë::
DELETE
 
FROM
 
	$nm
(
X
Ë
	`whîe_›t
(
Y
).

851 {
A
 = 
	`sqlôeTriggîDñëeSãp
(&
X
, 
Y
);
	}
}

854 
	$åiggî_cmd
(
A
Ë::
	`£À˘
(
X
). {A = 
	`sqlôeTriggîSñe˘Sãp
(X); 
	}
}

857 
	$ex¥
(
A
Ë::
	$RAISE
(
X
Ë
LP
 
IGNORE
 
	`RP
(
Y
). {

858 
A
 = 
	`sqlôeEx¥
(
TK_RAISE
, 0, 0, 0);

859 
A
->
iCﬁumn
 = 
OE_Ign‹e
;

860 
	`sqlôeEx¥S∑n
(
A
, &
X
, &
Y
);

861 
	}
}

862 
	$ex¥
(
A
Ë::
	$RAISE
(
X
Ë
LP
 
ROLLBACK
 
COMMA
 
	$nm
(
Z
Ë
	`RP
(
Y
). {

863 
A
 = 
	`sqlôeEx¥
(
TK_RAISE
, 0, 0, &
Z
);

864 
A
->
iCﬁumn
 = 
OE_Rﬁlback
;

865 
	`sqlôeEx¥S∑n
(
A
, &
X
, &
Y
);

866 
	}
}

867 
	$ex¥
(
A
Ë::
	$RAISE
(
X
Ë
LP
 
ABORT
 
COMMA
 
	$nm
(
Z
Ë
	`RP
(
Y
). {

868 
A
 = 
	`sqlôeEx¥
(
TK_RAISE
, 0, 0, &
Z
);

869 
A
->
iCﬁumn
 = 
OE_Ab‹t
;

870 
	`sqlôeEx¥S∑n
(
A
, &
X
, &
Y
);

871 
	}
}

872 
	$ex¥
(
A
Ë::
	$RAISE
(
X
Ë
LP
 
FAIL
 
COMMA
 
	$nm
(
Z
Ë
	`RP
(
Y
). {

873 
A
 = 
	`sqlôeEx¥
(
TK_RAISE
, 0, 0, &
Z
);

874 
A
->
iCﬁumn
 = 
OE_Faû
;

875 
	`sqlôeEx¥S∑n
(
A
, &
X
, &
Y
);

876 
	}
}

879 
cmd
 ::
DROP
 
TRIGGER
 
	$nm
(
X
Ë
	`dbnm
(
D
). {

880 
	`sqlôeDr›Triggî
(
pP¨£
,
	`sqlôeSrcLi°Aµíd
(0,&
X
,&
D
));

881 
	}
}

	@pragma.c

16 
	~"sqlôeI¡.h
"

17 
	~<˘y≥.h
>

22 
	$gëBoﬁón
(c⁄° *
z
){

23 *
azTrue
[] = { "yes", "on", "true" };

24 
i
;

25 if–
z
[0]==0 )  0;

26 if–
	`isdigô
(
z
[0]) || (z[0]=='-' && isdigit(z[1])) ){

27  
	`©oi
(
z
);

29 
i
=0; i<(
azTrue
)/(azTrue[0]); i++){

30 if–
	`sqlôeSåICmp
(
z
,
azTrue
[
i
])==0 )  1;

33 
	}
}

45 
	$gëSa„tyLevñ
(*
z
){

47 c⁄° *
zW‹d
;

48 
vÆ
;

49 } 
aKey
[] = {

58 
i
;

59 if–
z
[0]==0 )  1;

60 if–
	`isdigô
(
z
[0]) || (z[0]=='-' && isdigit(z[1])) ){

61  
	`©oi
(
z
);

63 
i
=0; i<(
aKey
)/(aKey[0]); i++){

64 if–
	`sqlôeSåICmp
(
z
,
aKey
[
i
].
zW‹d
)==0 ) áKey[i].
vÆ
;

67 
	}
}

74 
	$gëTempSt‹e
(c⁄° *
z
){

75 if–
z
[0]>='0' && z[0]<='2' ){

76  
z
[0] - '0';

77 }if–
	`sqlôeSåICmp
(
z
, "file")==0 ){

79 }if–
	`sqlôeSåICmp
(
z
, "memory")==0 ){

84 
	}
}

91 
	$ch™geTempSt‹age
(
P¨£
 *
pP¨£
, c⁄° *
zSt‹ageTy≥
){

92 
ts
 = 
	`gëTempSt‹e
(
zSt‹ageTy≥
);

93 
sqlôe
 *
db
 = 
pP¨£
->db;

94 if–
db
->
ãmp_°‹e
==
ts
 )  
SQLITE_OK
;

95 if–
db
->
aDb
[1].
pBt
!=0 ){

96 if–
db
->
Êags
 & 
SQLITE_InTøns
 ){

97 
	`sqlôeEº‹Msg
(
pP¨£
, "temporary storage cannot be changed "

99  
SQLITE_ERROR
;

101 
	`sqlôeBåìClo£
(
db
->
aDb
[1].
pBt
);

102 
db
->
aDb
[1].
pBt
 = 0;

103 
	`sqlôeRe£tI¡î«lSchema
(
db
, 0);

105 
db
->
ãmp_°‹e
 = 
ts
;

106  
SQLITE_OK
;

107 
	}
}

114 
	$ÊagPøgma
(
P¨£
 *
pP¨£
, c⁄° *
zLe·
, c⁄° *
zRight
){

116 c⁄° *
zName
;

117 
mask
;

118 } 
aPøgma
[] = {

119 { "vdbe_åa˚", 
SQLITE_VdbeTø˚
 },

120 { "fuŒ_cﬁumn_«mes", 
SQLITE_FuŒCﬁNames
 },

121 { "sh‹t_cﬁumn_«mes", 
SQLITE_Sh‹tCﬁNames
 },

122 { "show_d©©y≥s", 
SQLITE_Rï‹tTy≥s
 },

123 { "cou¡_ch™ges", 
SQLITE_Cou¡Rows
 },

124 { "em±y_ªsu…_ˇŒbacks", 
SQLITE_NuŒCÆlback
 },

126 
i
;

127 
i
=0; i<(
aPøgma
)/(aPragma[0]); i++){

128 if–
	`sqlôeSåICmp
(
zLe·
, 
aPøgma
[
i
].
zName
)==0 ){

129 
sqlôe
 *
db
 = 
pP¨£
->db;

130 
Vdbe
 *
v
;

131 if–
	`°rcmp
(
zLe·
,
zRight
)==0 && (
v
 = 
	`sqlôeGëVdbe
(
pP¨£
))!=0 ){

132 
	`sqlôeVdbeOp3
(
v
, 
OP_CﬁumnName
, 0, 1, 
aPøgma
[
i
].
zName
, 
P3_STATIC
);

133 
	`sqlôeVdbeOp3
(
v
, 
OP_CﬁumnName
, 1, 0, "boﬁón", 
P3_STATIC
);

134 
	`sqlôeVdbeCode
(
v
, 
OP_I¡egî
, (
db
->
Êags
 & 
aPøgma
[
i
].
mask
)!=0, 0,

135 
OP_CÆlback
, 1, 0,

137 }if–
	`gëBoﬁón
(
zRight
) ){

138 
db
->
Êags
 |
aPøgma
[
i
].
mask
;

140 
db
->
Êags
 &~
aPøgma
[
i
].
mask
;

146 
	}
}

159 
	$sqlôePøgma
(
P¨£
 *
pP¨£
, 
Tokí
 *
pLe·
, Tokí *
pRight
, 
möusFœg
){

160 *
zLe·
 = 0;

161 *
zRight
 = 0;

162 
sqlôe
 *
db
 = 
pP¨£
->db;

163 
Vdbe
 *
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

164 if–
v
==0 ) ;

166 
zLe·
 = 
	`sqlôeSåNDup
(
pLe·
->
z
,ÖLe·->
n
);

167 
	`sqlôeDequŸe
(
zLe·
);

168 if–
möusFœg
 ){

169 
zRight
 = 0;

170 
	`sqlôeSëNSåög
(&
zRight
, "-", 1, 
pRight
->
z
,ÖRight->
n
, 0);

172 
zRight
 = 
	`sqlôeSåNDup
(
pRight
->
z
,ÖRight->
n
);

173 
	`sqlôeDequŸe
(
zRight
);

199 if–
	`sqlôeSåICmp
(
zLe·
,"default_cache_size")==0 ){

200 
VdbeOpLi°
 
gëCacheSize
[] = {

201 { 
OP_RódCookõ
, 0, 2, 0},

202 { 
OP_AbsVÆue
, 0, 0, 0},

203 { 
OP_Dup
, 0, 0, 0},

204 { 
OP_I¡egî
, 0, 0, 0},

205 { 
OP_Ne
, 0, 6, 0},

206 { 
OP_I¡egî
, 0, 0, 0},

207 { 
OP_CﬁumnName
, 0, 1, "cache_size"},

208 { 
OP_CÆlback
, 1, 0, 0},

210 
addr
;

211 if–
pRight
->
z
==
pLe·
->z ){

212 
addr
 = 
	`sqlôeVdbeAddOpLi°
(
v
, 
	`AºaySize
(
gëCacheSize
), getCacheSize);

213 
	`sqlôeVdbeCh™geP1
(
v
, 
addr
+5, 
MAX_PAGES
);

215 
size
 = 
	`©oi
(
zRight
);

216 if–
size
<0 ) size = -size;

217 
	`sqlôeBegöWrôeO≥øti⁄
(
pP¨£
, 0, 0);

218 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
size
, 0);

219 
	`sqlôeVdbeAddOp
(
v
, 
OP_RódCookõ
, 0, 2);

220 
addr
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 0, 0);

221 
	`sqlôeVdbeAddOp
(
v
, 
OP_Ge
, 0, 
addr
+3);

222 
	`sqlôeVdbeAddOp
(
v
, 
OP_Neg©ive
, 0, 0);

223 
	`sqlôeVdbeAddOp
(
v
, 
OP_SëCookõ
, 0, 2);

224 
	`sqlôeEndWrôeO≥øti⁄
(
pP¨£
);

225 
db
->
ˇche_size
 = db->ˇche_size<0 ? -
size
 : size;

226 
	`sqlôeBåìSëCacheSize
(
db
->
aDb
[0].
pBt
, db->
ˇche_size
);

244 if–
	`sqlôeSåICmp
(
zLe·
,"cache_size")==0 ){

245 
VdbeOpLi°
 
gëCacheSize
[] = {

246 { 
OP_CﬁumnName
, 0, 1, "cache_size"},

247 { 
OP_CÆlback
, 1, 0, 0},

249 if–
pRight
->
z
==
pLe·
->z ){

250 
size
 = 
db
->
ˇche_size
;;

251 if–
size
<0 ) size = -size;

252 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
size
, 0);

253 
	`sqlôeVdbeAddOpLi°
(
v
, 
	`AºaySize
(
gëCacheSize
), getCacheSize);

255 
size
 = 
	`©oi
(
zRight
);

256 if–
size
<0 ) size = -size;

257 if–
db
->
ˇche_size
<0 ) 
size
 = -size;

258 
db
->
ˇche_size
 = 
size
;

259 
	`sqlôeBåìSëCacheSize
(
db
->
aDb
[0].
pBt
, db->
ˇche_size
);

282 if–
	`sqlôeSåICmp
(
zLe·
,"default_synchronous")==0 ){

283 
VdbeOpLi°
 
gëSync
[] = {

284 { 
OP_CﬁumnName
, 0, 1, "synchronous"},

285 { 
OP_RódCookõ
, 0, 3, 0},

286 { 
OP_Dup
, 0, 0, 0},

287 { 
OP_If
, 0, 0, 0},

288 { 
OP_RódCookõ
, 0, 2, 0},

289 { 
OP_I¡egî
, 0, 0, 0},

290 { 
OP_Lt
, 0, 5, 0},

291 { 
OP_AddImm
, 1, 0, 0},

292 { 
OP_CÆlback
, 1, 0, 0},

293 { 
OP_HÆt
, 0, 0, 0},

294 { 
OP_AddImm
, -1, 0, 0},

295 { 
OP_CÆlback
, 1, 0, 0}

297 if–
pRight
->
z
==
pLe·
->z ){

298 
addr
 = 
	`sqlôeVdbeAddOpLi°
(
v
, 
	`AºaySize
(
gëSync
), getSync);

299 
	`sqlôeVdbeCh™geP2
(
v
, 
addr
+3,áddr+10);

301 
addr
;

302 
size
 = 
db
->
ˇche_size
;

303 if–
size
<0 ) size = -size;

304 
	`sqlôeBegöWrôeO≥øti⁄
(
pP¨£
, 0, 0);

305 
	`sqlôeVdbeAddOp
(
v
, 
OP_RódCookõ
, 0, 2);

306 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 0, 0);

307 
addr
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 0, 0);

308 
	`sqlôeVdbeAddOp
(
v
, 
OP_Ne
, 0, 
addr
+3);

309 
	`sqlôeVdbeAddOp
(
v
, 
OP_AddImm
, 
MAX_PAGES
, 0);

310 
	`sqlôeVdbeAddOp
(
v
, 
OP_AbsVÆue
, 0, 0);

311 
db
->
ß„ty_Àvñ
 = 
	`gëSa„tyLevñ
(
zRight
)+1;

312 if–
db
->
ß„ty_Àvñ
==1 ){

313 
	`sqlôeVdbeAddOp
(
v
, 
OP_Neg©ive
, 0, 0);

314 
size
 = -size;

316 
	`sqlôeVdbeAddOp
(
v
, 
OP_SëCookõ
, 0, 2);

317 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
db
->
ß„ty_Àvñ
, 0);

318 
	`sqlôeVdbeAddOp
(
v
, 
OP_SëCookõ
, 0, 3);

319 
	`sqlôeEndWrôeO≥øti⁄
(
pP¨£
);

320 
db
->
ˇche_size
 = 
size
;

321 
	`sqlôeBåìSëCacheSize
(
db
->
aDb
[0].
pBt
, db->
ˇche_size
);

322 
	`sqlôeBåìSëSa„tyLevñ
(
db
->
aDb
[0].
pBt
, db->
ß„ty_Àvñ
);

335 if–
	`sqlôeSåICmp
(
zLe·
,"synchronous")==0 ){

336 
VdbeOpLi°
 
gëSync
[] = {

337 { 
OP_CﬁumnName
, 0, 1, "synchronous"},

338 { 
OP_CÆlback
, 1, 0, 0},

340 if–
pRight
->
z
==
pLe·
->z ){

341 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
db
->
ß„ty_Àvñ
-1, 0);

342 
	`sqlôeVdbeAddOpLi°
(
v
, 
	`AºaySize
(
gëSync
), getSync);

344 
size
 = 
db
->
ˇche_size
;

345 if–
size
<0 ) size = -size;

346 
db
->
ß„ty_Àvñ
 = 
	`gëSa„tyLevñ
(
zRight
)+1;

347 if–
db
->
ß„ty_Àvñ
==1 ) 
size
 = -size;

348 
db
->
ˇche_size
 = 
size
;

349 
	`sqlôeBåìSëCacheSize
(
db
->
aDb
[0].
pBt
, db->
ˇche_size
);

350 
	`sqlôeBåìSëSa„tyLevñ
(
db
->
aDb
[0].
pBt
, db->
ß„ty_Àvñ
);

354 #i‚de‡
NDEBUG


355 if–
	`sqlôeSåICmp
(
zLe·
, "trigger_overhead_test")==0 ){

356 if–
	`gëBoﬁón
(
zRight
) ){

357 
Æways_code_åiggî_£tup
 = 1;

359 
Æways_code_åiggî_£tup
 = 0;

364 if–
	`ÊagPøgma
(
pP¨£
, 
zLe·
, 
zRight
) ){

368 if–
	`sqlôeSåICmp
(
zLe·
, "table_info")==0 ){

369 
TabÀ
 *
pTab
;

370 
pTab
 = 
	`sqlôeFödTabÀ
(
db
, 
zRight
, 0);

371 if–
pTab
 ){

372 
VdbeOpLi°
 
èbÀInfoPªÁ˚
[] = {

373 { 
OP_CﬁumnName
, 0, 0, "cid"},

374 { 
OP_CﬁumnName
, 1, 0, "name"},

375 { 
OP_CﬁumnName
, 2, 0, "type"},

376 { 
OP_CﬁumnName
, 3, 0, "notnull"},

377 { 
OP_CﬁumnName
, 4, 0, "dflt_value"},

378 { 
OP_CﬁumnName
, 5, 1, "pk"},

380 
i
;

381 
	`sqlôeVdbeAddOpLi°
(
v
, 
	`AºaySize
(
èbÀInfoPªÁ˚
),ÅableInfoPreface);

382 
	`sqlôeVõwGëCﬁumnNames
(
pP¨£
, 
pTab
);

383 
i
=0; i<
pTab
->
nCﬁ
; i++){

384 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
i
, 0);

385 
	`sqlôeVdbeOp3
(
v
, 
OP_Såög
, 0, 0, 
pTab
->
aCﬁ
[
i
].
zName
, 0);

386 
	`sqlôeVdbeOp3
(
v
, 
OP_Såög
, 0, 0,

387 
pTab
->
aCﬁ
[
i
].
zTy≥
 ?ÖTab->aCol[i].zType : "numeric", 0);

388 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
pTab
->
aCﬁ
[
i
].
nŸNuŒ
, 0);

389 
	`sqlôeVdbeOp3
(
v
, 
OP_Såög
, 0, 0,

390 
pTab
->
aCﬁ
[
i
].
zDÊt
, 
P3_STATIC
);

391 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
pTab
->
aCﬁ
[
i
].
isPrimKey
, 0);

392 
	`sqlôeVdbeAddOp
(
v
, 
OP_CÆlback
, 6, 0);

397 if–
	`sqlôeSåICmp
(
zLe·
, "index_info")==0 ){

398 
Index
 *
pIdx
;

399 
TabÀ
 *
pTab
;

400 
pIdx
 = 
	`sqlôeFödIndex
(
db
, 
zRight
, 0);

401 if–
pIdx
 ){

402 
VdbeOpLi°
 
èbÀInfoPªÁ˚
[] = {

403 { 
OP_CﬁumnName
, 0, 0, "seqno"},

404 { 
OP_CﬁumnName
, 1, 0, "cid"},

405 { 
OP_CﬁumnName
, 2, 1, "name"},

407 
i
;

408 
pTab
 = 
pIdx
->
pTabÀ
;

409 
	`sqlôeVdbeAddOpLi°
(
v
, 
	`AºaySize
(
èbÀInfoPªÁ˚
),ÅableInfoPreface);

410 
i
=0; i<
pIdx
->
nCﬁumn
; i++){

411 
˙um
 = 
pIdx
->
aiCﬁumn
[
i
];

412 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
i
, 0);

413 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
˙um
, 0);

414 
	`as£π
–
pTab
->
nCﬁ
>
˙um
 );

415 
	`sqlôeVdbeOp3
(
v
, 
OP_Såög
, 0, 0, 
pTab
->
aCﬁ
[
˙um
].
zName
, 0);

416 
	`sqlôeVdbeAddOp
(
v
, 
OP_CÆlback
, 3, 0);

421 if–
	`sqlôeSåICmp
(
zLe·
, "index_list")==0 ){

422 
Index
 *
pIdx
;

423 
TabÀ
 *
pTab
;

424 
pTab
 = 
	`sqlôeFödTabÀ
(
db
, 
zRight
, 0);

425 if–
pTab
 ){

426 
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

427 
pIdx
 = 
pTab
->
pIndex
;

429 if–
pTab
 && 
pIdx
 ){

430 
i
 = 0;

431 
VdbeOpLi°
 
ödexLi°PªÁ˚
[] = {

432 { 
OP_CﬁumnName
, 0, 0, "seq"},

433 { 
OP_CﬁumnName
, 1, 0, "name"},

434 { 
OP_CﬁumnName
, 2, 1, "unique"},

437 
	`sqlôeVdbeAddOpLi°
(
v
, 
	`AºaySize
(
ödexLi°PªÁ˚
), indexListPreface);

438 
pIdx
){

439 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
i
, 0);

440 
	`sqlôeVdbeOp3
(
v
, 
OP_Såög
, 0, 0, 
pIdx
->
zName
, 0);

441 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
pIdx
->
⁄Eº‹
!=
OE_N⁄e
, 0);

442 
	`sqlôeVdbeAddOp
(
v
, 
OP_CÆlback
, 3, 0);

443 ++
i
;

444 
pIdx
 =ÖIdx->
pNext
;

449 if–
	`sqlôeSåICmp
(
zLe·
, "foreign_key_list")==0 ){

450 
FKey
 *
pFK
;

451 
TabÀ
 *
pTab
;

452 
pTab
 = 
	`sqlôeFödTabÀ
(
db
, 
zRight
, 0);

453 if–
pTab
 ){

454 
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

455 
pFK
 = 
pTab
->
pFKey
;

457 if–
pTab
 && 
pFK
 ){

458 
i
 = 0;

459 
VdbeOpLi°
 
ödexLi°PªÁ˚
[] = {

460 { 
OP_CﬁumnName
, 0, 0, "id"},

461 { 
OP_CﬁumnName
, 1, 0, "seq"},

462 { 
OP_CﬁumnName
, 2, 0, "table"},

463 { 
OP_CﬁumnName
, 3, 0, "from"},

464 { 
OP_CﬁumnName
, 4, 1, "to"},

467 
	`sqlôeVdbeAddOpLi°
(
v
, 
	`AºaySize
(
ödexLi°PªÁ˚
), indexListPreface);

468 
pFK
){

469 
j
;

470 
j
=0; j<
pFK
->
nCﬁ
; j++){

471 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
i
, 0);

472 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
j
, 0);

473 
	`sqlôeVdbeOp3
(
v
, 
OP_Såög
, 0, 0, 
pFK
->
zTo
, 0);

474 
	`sqlôeVdbeOp3
(
v
, 
OP_Såög
, 0, 0,

475 
pTab
->
aCﬁ
[
pFK
->aCﬁ[
j
].
iFrom
].
zName
, 0);

476 
	`sqlôeVdbeOp3
(
v
, 
OP_Såög
, 0, 0, 
pFK
->
aCﬁ
[
j
].
zCﬁ
, 0);

477 
	`sqlôeVdbeAddOp
(
v
, 
OP_CÆlback
, 5, 0);

479 ++
i
;

480 
pFK
 =ÖFK->
pNextFrom
;

485 if–
	`sqlôeSåICmp
(
zLe·
, "database_list")==0 ){

486 
i
;

487 
VdbeOpLi°
 
ödexLi°PªÁ˚
[] = {

488 { 
OP_CﬁumnName
, 0, 0, "seq"},

489 { 
OP_CﬁumnName
, 1, 0, "name"},

490 { 
OP_CﬁumnName
, 2, 1, "file"},

493 
	`sqlôeVdbeAddOpLi°
(
v
, 
	`AºaySize
(
ödexLi°PªÁ˚
), indexListPreface);

494 
i
=0; i<
db
->
nDb
; i++){

495 if–
db
->
aDb
[
i
].
pBt
==0 ) ;

496 
	`as£π
–
db
->
aDb
[
i
].
zName
!=0 );

497 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
i
, 0);

498 
	`sqlôeVdbeOp3
(
v
, 
OP_Såög
, 0, 0, 
db
->
aDb
[
i
].
zName
, 0);

499 
	`sqlôeVdbeOp3
(
v
, 
OP_Såög
, 0, 0,

500 
	`sqlôeBåìGëFûíame
(
db
->
aDb
[
i
].
pBt
), 0);

501 
	`sqlôeVdbeAddOp
(
v
, 
OP_CÆlback
, 3, 0);

517 if–
	`sqlôeSåICmp
(
zLe·
, "temp_store")==0 ){

518 
VdbeOpLi°
 
gëTmpDbLoc
[] = {

519 { 
OP_CﬁumnName
, 0, 1, "temp_store"},

520 { 
OP_CÆlback
, 1, 0, 0},

522 if–
pRight
->
z
==
pLe·
->z ){

523 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
db
->
ãmp_°‹e
, 0);

524 
	`sqlôeVdbeAddOpLi°
(
v
, 
	`AºaySize
(
gëTmpDbLoc
), getTmpDbLoc);

526 
	`ch™geTempSt‹age
(
pP¨£
, 
zRight
);

541 if–
	`sqlôeSåICmp
(
zLe·
, "default_temp_store")==0 ){

542 
VdbeOpLi°
 
gëTmpDbLoc
[] = {

543 { 
OP_CﬁumnName
, 0, 1, "temp_store"},

544 { 
OP_RódCookõ
, 0, 5, 0},

545 { 
OP_CÆlback
, 1, 0, 0}};

546 if–
pRight
->
z
==
pLe·
->z ){

547 
	`sqlôeVdbeAddOpLi°
(
v
, 
	`AºaySize
(
gëTmpDbLoc
), getTmpDbLoc);

549 
	`sqlôeBegöWrôeO≥øti⁄
(
pP¨£
, 0, 0);

550 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
	`gëTempSt‹e
(
zRight
), 0);

551 
	`sqlôeVdbeAddOp
(
v
, 
OP_SëCookõ
, 0, 5);

552 
	`sqlôeEndWrôeO≥øti⁄
(
pP¨£
);

556 #i‚de‡
NDEBUG


557 if–
	`sqlôeSåICmp
(
zLe·
, "parser_trace")==0 ){

558 
	`sqlôeP¨£rTø˚
(
FILE
*, *);

559 if–
	`gëBoﬁón
(
zRight
) ){

560 
	`sqlôeP¨£rTø˚
(
°dout
, "parser: ");

562 
	`sqlôeP¨£rTø˚
(0, 0);

567 if–
	`sqlôeSåICmp
(
zLe·
, "integrity_check")==0 ){

568 
i
, 
j
, 
addr
;

573 
VdbeOpLi°
 
öôCode
[] = {

574 { 
OP_I¡egî
, 0, 0, 0},

575 { 
OP_MemSt‹e
, 0, 1, 0},

576 { 
OP_CﬁumnName
, 0, 1, "integrity_check"},

581 
VdbeOpLi°
 
checkDb
[] = {

582 { 
OP_SëIn£π
, 0, 0, "2"},

583 { 
OP_I¡egî
, 0, 0, 0},

584 { 
OP_O≥nRód
, 0, 2, 0},

585 { 
OP_Rewöd
, 0, 7, 0},

586 { 
OP_Cﬁumn
, 0, 3, 0},

587 { 
OP_SëIn£π
, 0, 0, 0},

588 { 
OP_Next
, 0, 4, 0},

589 { 
OP_I¡egrôyCk
, 0, 0, 0},

590 { 
OP_Dup
, 0, 1, 0},

591 { 
OP_Såög
, 0, 0, "ok"},

592 { 
OP_SåEq
, 0, 12, 0},

593 { 
OP_MemIn¸
, 0, 0, 0},

594 { 
OP_Såög
, 0, 0, "*** in database "},

595 { 
OP_Såög
, 0, 0, 0},

596 { 
OP_Såög
, 0, 0, " ***\n"},

597 { 
OP_PuŒ
, 3, 0, 0},

598 { 
OP_C⁄ˇt
, 4, 1, 0},

599 { 
OP_CÆlback
, 1, 0, 0},

606 
VdbeOpLi°
 
ídCode
[] = {

607 { 
OP_MemLﬂd
, 0, 0, 0},

608 { 
OP_I¡egî
, 0, 0, 0},

609 { 
OP_Ne
, 0, 0, 0},

610 { 
OP_Såög
, 0, 0, "ok"},

611 { 
OP_CÆlback
, 1, 0, 0},

615 
	`sqlôeVdbeAddOpLi°
(
v
, 
	`AºaySize
(
öôCode
), initCode);

618 
i
=0; i<
db
->
nDb
; i++){

619 
HashEÀm
 *
x
;

623 
addr
 = 
	`sqlôeVdbeAddOpLi°
(
v
, 
	`AºaySize
(
checkDb
), checkDb);

624 
	`sqlôeVdbeCh™geP1
(
v
, 
addr
+1, 
i
);

625 
	`sqlôeVdbeCh™geP2
(
v
, 
addr
+3,áddr+7);

626 
	`sqlôeVdbeCh™geP2
(
v
, 
addr
+6,áddr+4);

627 
	`sqlôeVdbeCh™geP2
(
v
, 
addr
+7, 
i
);

628 
	`sqlôeVdbeCh™geP2
(
v
, 
addr
+10,áddr+
	`AºaySize
(
checkDb
));

629 
	`sqlôeVdbeCh™geP3
(
v
, 
addr
+13, 
db
->
aDb
[
i
].
zName
, 
P3_STATIC
);

633 
	`sqlôeCodeVîifySchema
(
pP¨£
, 
i
);

634 
x
=
	`sqlôeHashFú°
(&
db
->
aDb
[
i
].
tblHash
); x; x=
	`sqlôeHashNext
(x)){

635 
TabÀ
 *
pTab
 = 
	`sqlôeHashD©a
(
x
);

636 
Index
 *
pIdx
;

637 
lo›T›
;

639 if–
pTab
->
pIndex
==0 ) ;

640 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
i
, 0);

641 
	`sqlôeVdbeOp3
(
v
, 
OP_O≥nRód
, 1, 
pTab
->
äum
,ÖTab->
zName
, 0);

642 
j
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, j++){

643 if–
pIdx
->
äum
==0 ) ;

644 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
pIdx
->
iDb
, 0);

645 
	`sqlôeVdbeOp3
(
v
, 
OP_O≥nRód
, 
j
+2, 
pIdx
->
äum
,ÖIdx->
zName
, 0);

647 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 0, 0);

648 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemSt‹e
, 1, 1);

649 
lo›T›
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_Rewöd
, 1, 0);

650 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemIn¸
, 1, 0);

651 
j
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, j++){

652 
k
, 
jmp2
;

653 
VdbeOpLi°
 
idxEº
[] = {

654 { 
OP_MemIn¸
, 0, 0, 0},

655 { 
OP_Såög
, 0, 0, "rowid "},

656 { 
OP_Re˙o
, 1, 0, 0},

657 { 
OP_Såög
, 0, 0, " missing from index "},

658 { 
OP_Såög
, 0, 0, 0},

659 { 
OP_C⁄ˇt
, 4, 0, 0},

660 { 
OP_CÆlback
, 1, 0, 0},

662 
	`sqlôeVdbeAddOp
(
v
, 
OP_Re˙o
, 1, 0);

663 
k
=0; k<
pIdx
->
nCﬁumn
; k++){

664 
idx
 = 
pIdx
->
aiCﬁumn
[
k
];

665 if–
idx
==
pTab
->
iPKey
 ){

666 
	`sqlôeVdbeAddOp
(
v
, 
OP_Re˙o
, 1, 0);

668 
	`sqlôeVdbeAddOp
(
v
, 
OP_Cﬁumn
, 1, 
idx
);

671 
	`sqlôeVdbeAddOp
(
v
, 
OP_MakeIdxKey
, 
pIdx
->
nCﬁumn
, 0);

672 if–
db
->
fûe_f‹m©
>=4 ) 
	`sqlôeAddIdxKeyTy≥
(
v
, 
pIdx
);

673 
jmp2
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_Found
, 
j
+2, 0);

674 
addr
 = 
	`sqlôeVdbeAddOpLi°
(
v
, 
	`AºaySize
(
idxEº
), idxErr);

675 
	`sqlôeVdbeCh™geP3
(
v
, 
addr
+4, 
pIdx
->
zName
, 
P3_STATIC
);

676 
	`sqlôeVdbeCh™geP2
(
v
, 
jmp2
, 
	`sqlôeVdbeCuºítAddr
(v));

678 
	`sqlôeVdbeAddOp
(
v
, 
OP_Next
, 1, 
lo›T›
+1);

679 
	`sqlôeVdbeCh™geP2
(
v
, 
lo›T›
, 
	`sqlôeVdbeCuºítAddr
(v));

680 
j
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, j++){

681 
VdbeOpLi°
 
˙tIdx
[] = {

682 { 
OP_I¡egî
, 0, 0, 0},

683 { 
OP_MemSt‹e
, 2, 1, 0},

684 { 
OP_Rewöd
, 0, 0, 0},

685 { 
OP_MemIn¸
, 2, 0, 0},

686 { 
OP_Next
, 0, 0, 0},

687 { 
OP_MemLﬂd
, 1, 0, 0},

688 { 
OP_MemLﬂd
, 2, 0, 0},

689 { 
OP_Eq
, 0, 0, 0},

690 { 
OP_MemIn¸
, 0, 0, 0},

691 { 
OP_Såög
, 0, 0, "wrong # ofÉntries in index "},

692 { 
OP_Såög
, 0, 0, 0},

693 { 
OP_C⁄ˇt
, 2, 0, 0},

694 { 
OP_CÆlback
, 1, 0, 0},

696 if–
pIdx
->
äum
==0 ) ;

697 
addr
 = 
	`sqlôeVdbeAddOpLi°
(
v
, 
	`AºaySize
(
˙tIdx
), cntIdx);

698 
	`sqlôeVdbeCh™geP1
(
v
, 
addr
+2, 
j
+2);

699 
	`sqlôeVdbeCh™geP2
(
v
, 
addr
+2,áddr+5);

700 
	`sqlôeVdbeCh™geP1
(
v
, 
addr
+4, 
j
+2);

701 
	`sqlôeVdbeCh™geP2
(
v
, 
addr
+4,áddr+3);

702 
	`sqlôeVdbeCh™geP2
(
v
, 
addr
+7,áddr+
	`AºaySize
(
˙tIdx
));

703 
	`sqlôeVdbeCh™geP3
(
v
, 
addr
+10, 
pIdx
->
zName
, 
P3_STATIC
);

707 
addr
 = 
	`sqlôeVdbeAddOpLi°
(
v
, 
	`AºaySize
(
ídCode
),ÉndCode);

708 
	`sqlôeVdbeCh™geP2
(
v
, 
addr
+2,áddr+
	`AºaySize
(
ídCode
));

712 
	`sqlôeFªe
(
zLe·
);

713 
	`sqlôeFªe
(
zRight
);

714 
	}
}

	@printf.c

53 
	~"sqlôeI¡.h
"

59 
	#ëRADIX
 1

	)

60 
	#ëFLOAT
 2

	)

61 
	#ëEXP
 3

	)

62 
	#ëGENERIC
 4

	)

63 
	#ëSIZE
 5

	)

64 
	#ëSTRING
 6

	)

65 
	#ëDYNSTRING
 7

	)

66 
	#ëPERCENT
 8

	)

67 
	#ëCHARX
 9

	)

68 
	#ëERROR
 10

	)

70 
	#ëCHARLIT
 11

	)

71 
	#ëSQLESCAPE
 12

	)

72 
	#ëSQLESCAPE2
 13

	)

74 
	#ëTOKEN
 14

	)

75 
	#ëSRCLIST
 15

	)

81 
	tëByã
;

87 
	së_öfo
 {

88 
	mfmây≥
;

89 
ëByã
 
	mba£
;

90 
ëByã
 
	mÊags
;

91 
ëByã
 
	mty≥
;

92 *
	mch¨£t
;

93 *
	m¥efix
;

94 } 
	të_öfo
;

99 
	#FLAG_SIGNED
 1

	)

100 
	#FLAG_INTERN
 2

	)

107 
ë_öfo
 
	gfmtöfo
[] = {

108 { 'd', 10, 1, 
ëRADIX
, "0123456789", 0 },

109 { 's', 0, 0, 
ëSTRING
, 0, 0 },

110 { 'z', 0, 2, 
ëDYNSTRING
, 0, 0 },

111 { 'q', 0, 0, 
ëSQLESCAPE
, 0, 0 },

112 { 'Q', 0, 0, 
ëSQLESCAPE2
, 0, 0 },

113 { 'c', 0, 0, 
ëCHARX
, 0, 0 },

114 { 'o', 8, 0, 
ëRADIX
, "01234567", "0" },

115 { 'u', 10, 0, 
ëRADIX
, "0123456789", 0 },

116 { 'x', 16, 0, 
ëRADIX
, "0123456789abcdef", "x0" },

117 { 'X', 16, 0, 
ëRADIX
, "0123456789ABCDEF", "X0" },

118 { 'f', 0, 1, 
ëFLOAT
, 0, 0 },

119 { 'e', 0, 1, 
ëEXP
, "e", 0 },

120 { 'E', 0, 1, 
ëEXP
, "E", 0 },

121 { 'g', 0, 1, 
ëGENERIC
, "e", 0 },

122 { 'G', 0, 1, 
ëGENERIC
, "E", 0 },

123 { 'i', 10, 1, 
ëRADIX
, "0123456789", 0 },

124 { 'n', 0, 0, 
ëSIZE
, 0, 0 },

125 { '%', 0, 0, 
ëPERCENT
, 0, 0 },

126 { 'p', 10, 0, 
ëRADIX
, "0123456789", 0 },

127 { 'T', 0, 2, 
ëTOKEN
, 0, 0 },

128 { 'S', 0, 2, 
ëSRCLIST
, 0, 0 },

130 
	#ëNINFO
 ((
fmtöfo
)/(fmtöfo[0]))

	)

136 #i‚de‡
ëNOFLOATINGPOINT


150 
	$ë_gëdigô
(
LONGDOUBLE_TYPE
 *
vÆ
, *
˙t
){

151 
digô
;

152 
LONGDOUBLE_TYPE
 
d
;

153 if–(*
˙t
)++ >= 16 )  '0';

154 
digô
 = ()*
vÆ
;

155 
d
 = 
digô
;

156 
digô
 += '0';

157 *
vÆ
 = (*vÆ - 
d
)*10.0;

158  
digô
;

159 
	}
}

162 
	#ëBUFSIZE
 1000

	)

191 
vx¥ötf
(

192 (*
func
)(*,const *,),

193 *
¨g
,

194 
u£Exãnded
,

195 c⁄° *
fmt
,

196 
va_li°
 
≠


198 
c
;

199 *
buÂt
;

200 
¥ecisi⁄
;

201 
Àngth
;

202 
idx
;

203 
cou¡
;

204 
width
;

205 
ëByã
 
Êag_À·ju°ify
;

206 
ëByã
 
Êag_∂ussign
;

207 
ëByã
 
Êag_bœnksign
;

208 
ëByã
 
Êag_Æã∫©ef‹m
;

209 
ëByã
 
Êag_zî›ad
;

210 
ëByã
 
Êag_l⁄g
;

211 
l⁄gvÆue
;

212 
LONGDOUBLE_TYPE
 
ªÆvÆue
;

213 
ë_öfo
 *
öf›
;

214 
buf
[
ëBUFSIZE
];

215 
¥efix
;

216 
ëByã
 
îr‹Êag
 = 0;

217 
ëByã
 
xty≥
;

218 *
zExåa
;

219 
•a˚s
[] = " ";

220 
	#ëSPACESIZE
 ((
•a˚s
)-1)

	)

221 #i‚de‡
ëNOFLOATINGPOINT


222 
exp
;

223 
roundî
;

224 
ëByã
 
Êag_dp
;

225 
ëByã
 
Êag_πz
;

226 
ëByã
 
Êag_exp
;

227 
nsd
;

230 
	`func
(
¨g
,"",0);

231 
cou¡
 = 
Àngth
 = 0;

232 
buÂt
 = 0;

233 ; (
c
=(*
fmt
))!=0; ++fmt){

234 if–
c
!='%' ){

235 
amt
;

236 
buÂt
 = (*)
fmt
;

237 
amt
 = 1;

238  (
c
=(*++
fmt
))!='%' && c!=0 ) 
amt
++;

239 (*
func
)(
¨g
,
buÂt
,
amt
);

240 
cou¡
 +
amt
;

241 if–
c
==0 ) ;

243 if–(
c
=(*++
fmt
))==0 ){

244 
îr‹Êag
 = 1;

245 (*
func
)(
¨g
,"%",1);

246 
cou¡
++;

250 
Êag_À·ju°ify
 = 
Êag_∂ussign
 = 
Êag_bœnksign
 =

251 
Êag_Æã∫©ef‹m
 = 
Êag_zî›ad
 = 0;

253  
c
 ){

254 '-': 
Êag_À·ju°ify
 = 1; 
c
 = 0; ;

255 '+': 
Êag_∂ussign
 = 1; 
c
 = 0; ;

256 ' ': 
Êag_bœnksign
 = 1; 
c
 = 0; ;

257 '#': 
Êag_Æã∫©ef‹m
 = 1; 
c
 = 0; ;

258 '0': 
Êag_zî›ad
 = 1; 
c
 = 0; ;

261 } 
c
==0 && (c=(*++
fmt
))!=0 );

263 
width
 = 0;

264 if–
c
=='*' ){

265 
width
 = 
	`va_¨g
(
≠
,);

266 if–
width
<0 ){

267 
Êag_À·ju°ify
 = 1;

268 
width
 = -width;

270 
c
 = *++
fmt
;

272  
c
>='0' && c<='9' ){

273 
width
 = width*10 + 
c
 - '0';

274 
c
 = *++
fmt
;

277 if–
width
 > 
ëBUFSIZE
-10 ){

278 
width
 = 
ëBUFSIZE
-10;

281 if–
c
=='.' ){

282 
¥ecisi⁄
 = 0;

283 
c
 = *++
fmt
;

284 if–
c
=='*' ){

285 
¥ecisi⁄
 = 
	`va_¨g
(
≠
,);

286 if–
¥ecisi⁄
<0 )Örecision = -precision;

287 
c
 = *++
fmt
;

289  
c
>='0' && c<='9' ){

290 
¥ecisi⁄
 =Öªcisi⁄*10 + 
c
 - '0';

291 
c
 = *++
fmt
;

295 if–
¥ecisi⁄
>
ëBUFSIZE
-40 )Örecision =ÉtBUFSIZE-40;

297 
¥ecisi⁄
 = -1;

300 if–
c
=='l' ){

301 
Êag_l⁄g
 = 1;

302 
c
 = *++
fmt
;

304 
Êag_l⁄g
 = 0;

307 
öf›
 = 0;

308 
xty≥
 = 
ëERROR
;

309 
idx
=0; idx<
ëNINFO
; idx++){

310 if–
c
==
fmtöfo
[
idx
].
fmây≥
 ){

311 
öf›
 = &
fmtöfo
[
idx
];

312 if–
u£Exãnded
 || (
öf›
->
Êags
 & 
FLAG_INTERN
)==0 ){

313 
xty≥
 = 
öf›
->
ty≥
;

318 
zExåa
 = 0;

338  
xty≥
 ){

339 
ëRADIX
:

340 if–
Êag_l⁄g
 ) 
l⁄gvÆue
 = 
	`va_¨g
(
≠
,);

341 
l⁄gvÆue
 = 
	`va_¨g
(
≠
,);

345 if–
l⁄gvÆue
==0 ) 
Êag_Æã∫©ef‹m
 = 0;

349 if–
l⁄gvÆue
==0 && 
öf›
->
ba£
==8 ) 
Êag_Æã∫©ef‹m
 = 0;

351 if–
öf›
->
Êags
 & 
FLAG_SIGNED
 ){

352 if–*(*)&
l⁄gvÆue
<0 ){

353 
l⁄gvÆue
 = -*(*)&longvalue;

354 
¥efix
 = '-';

355 }if–
Êag_∂ussign
 ) 
¥efix
 = '+';

356 if–
Êag_bœnksign
 ) 
¥efix
 = ' ';

357 
¥efix
 = 0;

358 }
¥efix
 = 0;

359 if–
Êag_zî›ad
 && 
¥ecisi⁄
<
width
-(
¥efix
!=0) ){

360 
¥ecisi⁄
 = 
width
-(
¥efix
!=0);

362 
buÂt
 = &
buf
[
ëBUFSIZE
-1];

364 *
c£t
;

365 
ba£
;

366 
c£t
 = 
öf›
->
ch¨£t
;

367 
ba£
 = 
öf›
->base;

369 *(--
buÂt
Ë
c£t
[
l⁄gvÆue
%
ba£
];

370 
l⁄gvÆue
 =Ü⁄gvÆue/
ba£
;

371 } 
l⁄gvÆue
>0 );

373 
Àngth
 = &
buf
[
ëBUFSIZE
-1]-
buÂt
;

374 
idx
=
¥ecisi⁄
-
Àngth
; idx>0; idx--){

375 *(--
buÂt
) = '0';

377 if–
¥efix
 ) *(--
buÂt
) =Örefix;

378 if–
Êag_Æã∫©ef‹m
 && 
öf›
->
¥efix
 ){

379 *
¥e
, 
x
;

380 
¥e
 = 
öf›
->
¥efix
;

381 if–*
buÂt
!=
¥e
[0] ){

382 
¥e
=
öf›
->
¥efix
; (
x
=(*¥e))!=0;Öª++Ë*(--
buÂt
) = x;

385 
Àngth
 = &
buf
[
ëBUFSIZE
-1]-
buÂt
;

387 
ëFLOAT
:

388 
ëEXP
:

389 
ëGENERIC
:

390 
ªÆvÆue
 = 
	`va_¨g
(
≠
,);

391 #i‚de‡
ëNOFLOATINGPOINT


392 if–
¥ecisi⁄
<0 )Örecision = 6;

393 if–
¥ecisi⁄
>
ëBUFSIZE
-10 )Örecision =ÉtBUFSIZE-10;

394 if–
ªÆvÆue
<0.0 ){

395 
ªÆvÆue
 = -realvalue;

396 
¥efix
 = '-';

398 if–
Êag_∂ussign
 ) 
¥efix
 = '+';

399 if–
Êag_bœnksign
 ) 
¥efix
 = ' ';

400 
¥efix
 = 0;

402 if–
öf›
->
ty≥
==
ëGENERIC
 && 
¥ecisi⁄
>0 )Örecision--;

403 
roundî
 = 0.0;

406 
idx
=
¥ecisi⁄
, 
roundî
=0.4999; idx>0; idx--,Ñounder*=0.1);

409 
idx
=
¥ecisi⁄
, 
roundî
=0.5; idx>0; idx--,Ñounder*=0.1);

411 if–
öf›
->
ty≥
==
ëFLOAT
 ) 
ªÆvÆue
 +
roundî
;

413 
exp
 = 0;

414 if–
ªÆvÆue
>0.0 ){

415  
ªÆvÆue
>=1e8 && 
exp
<=350 ){Ñealvalue *= 1e-8;Éxp+=8; }

416  
ªÆvÆue
>=10.0 && 
exp
<=350 ){Ñealvalue *= 0.1;Éxp++; }

417  
ªÆvÆue
<1e-8 && 
exp
>=-350 ){Ñealvalue *= 1e8;Éxp-=8; }

418  
ªÆvÆue
<1.0 && 
exp
>=-350 ){Ñealvalue *= 10.0;Éxp--; }

419 if–
exp
>350 ||Éxp<-350 ){

420 
buÂt
 = "NaN";

421 
Àngth
 = 3;

425 
buÂt
 = 
buf
;

430 
Êag_exp
 = 
xty≥
==
ëEXP
;

431 if–
xty≥
!=
ëFLOAT
 ){

432 
ªÆvÆue
 +
roundî
;

433 if–
ªÆvÆue
>=10.0 ){ÑólvÆuê*0.1; 
exp
++; }

435 if–
xty≥
==
ëGENERIC
 ){

436 
Êag_πz
 = !
Êag_Æã∫©ef‹m
;

437 if–
exp
<-4 ||Éxp>
¥ecisi⁄
 ){

438 
xty≥
 = 
ëEXP
;

440 
¥ecisi⁄
 =Öªcisi⁄ - 
exp
;

441 
xty≥
 = 
ëFLOAT
;

444 
Êag_πz
 = 0;

450 
nsd
 = 0;

451 if–
xty≥
==
ëFLOAT
 && 
exp
+
¥ecisi⁄
<
ëBUFSIZE
-30 ){

452 
Êag_dp
 = (
¥ecisi⁄
>0 || 
Êag_Æã∫©ef‹m
);

453 if–
¥efix
 ) *(
buÂt
++) =Örefix;

454 if–
exp
<0 ) *(
buÂt
++) = '0';

455 ; 
exp
>=0;Éxp--Ë*(
buÂt
++Ë
	`ë_gëdigô
(&
ªÆvÆue
,&
nsd
);

456 if–
Êag_dp
 ) *(
buÂt
++) = '.';

457 
exp
++;Éxp<0 && 
¥ecisi⁄
>0;Örecision--,Éxp++){

458 *(
buÂt
++) = '0';

460  (
¥ecisi⁄
--)>0 ) *(
buÂt
++Ë
	`ë_gëdigô
(&
ªÆvÆue
,&
nsd
);

461 *(
buÂt
--) = 0;

462 if–
Êag_πz
 && 
Êag_dp
 ){

463  
buÂt
>=
buf
 && *bufpt=='0' ) *(bufpt--) = 0;

464 if–
buÂt
>=
buf
 && *bufpt=='.' ) *(bufpt--) = 0;

466 
buÂt
++;

468 
Êag_dp
 = (
¥ecisi⁄
>0 || 
Êag_Æã∫©ef‹m
);

469 if–
¥efix
 ) *(
buÂt
++) =Örefix;

470 *(
buÂt
++Ë
	`ë_gëdigô
(&
ªÆvÆue
,&
nsd
);

471 if–
Êag_dp
 ) *(
buÂt
++) = '.';

472  (
¥ecisi⁄
--)>0 ) *(
buÂt
++Ë
	`ë_gëdigô
(&
ªÆvÆue
,&
nsd
);

473 
buÂt
--;

474 if–
Êag_πz
 && 
Êag_dp
 ){

475  
buÂt
>=
buf
 && *bufpt=='0' ) *(bufpt--) = 0;

476 if–
buÂt
>=
buf
 && *bufpt=='.' ) *(bufpt--) = 0;

478 
buÂt
++;

479 if–
exp
 || 
Êag_exp
 ){

480 *(
buÂt
++Ë
öf›
->
ch¨£t
[0];

481 if–
exp
<0 ){ *(
buÂt
++) = '-';Éxp = -exp; }

482 { *(
buÂt
++) = '+'; }

483 if–
exp
>=100 ){

484 *(
buÂt
++Ë(
exp
/100)+'0';

485 
exp
 %= 100;

487 *(
buÂt
++Ë
exp
/10+'0';

488 *(
buÂt
++Ë
exp
%10+'0';

494 
Àngth
 = 
buÂt
-
buf
;

495 
buÂt
 = 
buf
;

499 if–
Êag_zî›ad
 && !
Êag_À·ju°ify
 && 
Àngth
 < 
width
){

500 
i
;

501 
nPad
 = 
width
 - 
Àngth
;

502 
i
=
width
; i>=
nPad
; i--){

503 
buÂt
[
i
] = buÂt[i-
nPad
];

505 
i
 = 
¥efix
!=0;

506  
nPad
-- ) 
buÂt
[
i
++] = '0';

507 
Àngth
 = 
width
;

511 
ëSIZE
:

512 *(
	`va_¨g
(
≠
,*)Ë
cou¡
;

513 
Àngth
 = 
width
 = 0;

515 
ëPERCENT
:

516 
buf
[0] = '%';

517 
buÂt
 = 
buf
;

518 
Àngth
 = 1;

520 
ëCHARLIT
:

521 
ëCHARX
:

522 
c
 = 
buf
[0] = (
xty≥
==
ëCHARX
 ? 
	`va_¨g
(
≠
,Ë: *++
fmt
);

523 if–
¥ecisi⁄
>=0 ){

524 
idx
=1; idx<
¥ecisi⁄
; idx++Ë
buf
[idx] = 
c
;

525 
Àngth
 = 
¥ecisi⁄
;

527 
Àngth
 =1;

529 
buÂt
 = 
buf
;

531 
ëSTRING
:

532 
ëDYNSTRING
:

533 
buÂt
 = 
	`va_¨g
(
≠
,*);

534 if–
buÂt
==0 ){

535 
buÂt
 = "";

536 }if–
xty≥
==
ëDYNSTRING
 ){

537 
zExåa
 = 
buÂt
;

539 
Àngth
 = 
	`°æí
(
buÂt
);

540 if–
¥ecisi⁄
>=0 &&Öªcisi⁄<
Àngth
 )Üength =Örecision;

542 
ëSQLESCAPE
:

543 
ëSQLESCAPE2
:

545 
i
, 
j
, 
n
, 
c
, 
i¢uŒ
;

546 *
¨g
 = 
	`va_¨g
(
≠
,*);

547 
i¢uŒ
 = 
¨g
==0;

548 if–
i¢uŒ
 ) 
¨g
 = (
xty≥
==
ëSQLESCAPE2
 ? "NULL" : "(NULL)");

549 
i
=
n
=0; (
c
=
¨g
[i])!=0; i++){

550 if–
c
=='\'' ) 
n
++;

552 
n
 +
i
 + 1 + ((!
i¢uŒ
 && 
xty≥
==
ëSQLESCAPE2
) ? 2 : 0);

553 if–
n
>
ëBUFSIZE
 ){

554 
buÂt
 = 
zExåa
 = 
	`sqlôeMÆloc
–
n
 );

555 if–
buÂt
==0 )  -1;

557 
buÂt
 = 
buf
;

559 
j
 = 0;

560 if–!
i¢uŒ
 && 
xty≥
==
ëSQLESCAPE2
 ) 
buÂt
[
j
++] = '\'';

561 
i
=0; (
c
=
¨g
[i])!=0; i++){

562 
buÂt
[
j
++] = 
c
;

563 if–
c
=='\'' ) 
buÂt
[
j
++] = c;

565 if–!
i¢uŒ
 && 
xty≥
==
ëSQLESCAPE2
 ) 
buÂt
[
j
++] = '\'';

566 
buÂt
[
j
] = 0;

567 
Àngth
 = 
j
;

568 if–
¥ecisi⁄
>=0 &&Öªcisi⁄<
Àngth
 )Üength =Örecision;

571 
ëTOKEN
: {

572 
Tokí
 *
pTokí
 = 
	`va_¨g
(
≠
, Token*);

573 (*
func
)(
¨g
, 
pTokí
->
z
,ÖTokí->
n
);

574 
Àngth
 = 
width
 = 0;

577 
ëSRCLIST
: {

578 
SrcLi°
 *
pSrc
 = 
	`va_¨g
(
≠
, SrcList*);

579 
k
 = 
	`va_¨g
(
≠
, );

580 
SrcLi°_ôem
 *
pIãm
 = &
pSrc
->
a
[
k
];

581 
	`as£π
–
k
>=0 && k<
pSrc
->
nSrc
 );

582 if–
pIãm
->
zD©aba£
 &&ÖItem->zDatabase[0] ){

583 (*
func
)(
¨g
, 
pIãm
->
zD©aba£
, 
	`°æí
(pItem->zDatabase));

584 (*
func
)(
¨g
, ".", 1);

586 (*
func
)(
¨g
, 
pIãm
->
zName
, 
	`°æí
(pItem->zName));

587 
Àngth
 = 
width
 = 0;

590 
ëERROR
:

591 
buf
[0] = '%';

592 
buf
[1] = 
c
;

593 
îr‹Êag
 = 0;

594 
idx
 = 1+(
c
!=0);

595 (*
func
)(
¨g
,"%",
idx
);

596 
cou¡
 +
idx
;

597 if–
c
==0 ) 
fmt
--;

605 if–!
Êag_À·ju°ify
 ){

606 
n•a˚
;

607 
n•a˚
 = 
width
-
Àngth
;

608 if–
n•a˚
>0 ){

609 
cou¡
 +
n•a˚
;

610  
n•a˚
>=
ëSPACESIZE
 ){

611 (*
func
)(
¨g
,
•a˚s
,
ëSPACESIZE
);

612 
n•a˚
 -
ëSPACESIZE
;

614 if–
n•a˚
>0 ) (*
func
)(
¨g
,
•a˚s
,nspace);

617 if–
Àngth
>0 ){

618 (*
func
)(
¨g
,
buÂt
,
Àngth
);

619 
cou¡
 +
Àngth
;

621 if–
Êag_À·ju°ify
 ){

622 
n•a˚
;

623 
n•a˚
 = 
width
-
Àngth
;

624 if–
n•a˚
>0 ){

625 
cou¡
 +
n•a˚
;

626  
n•a˚
>=
ëSPACESIZE
 ){

627 (*
func
)(
¨g
,
•a˚s
,
ëSPACESIZE
);

628 
n•a˚
 -
ëSPACESIZE
;

630 if–
n•a˚
>0 ) (*
func
)(
¨g
,
•a˚s
,nspace);

633 if–
zExåa
 ){

634 
	`sqlôeFªe
(
zExåa
);

637  
îr‹Êag
 ? -1 : 
cou¡
;

638 
	}
}

644 
	ssgM¥ötf
 {

645 *
	mzBa£
;

646 *
	mzText
;

647 
	mnCh¨
;

648 
	mnTŸÆ
;

649 
	mnAŒoc
;

650 *(*
	mxRóŒoc
)(*,);

659 
	$mout
(*
¨g
, c⁄° *
zNewText
, 
nNewCh¨
){

660 
sgM¥ötf
 *
pM
 = (sgM¥ötf*)
¨g
;

661 
pM
->
nTŸÆ
 +
nNewCh¨
;

662 if–
pM
->
nCh¨
 + 
nNewCh¨
 + 1 >ÖM->
nAŒoc
 ){

663 if–
pM
->
xRóŒoc
==0 ){

664 
nNewCh¨
 = 
pM
->
nAŒoc
 -ÖM->
nCh¨
 - 1;

666 
pM
->
nAŒoc
 =ÖM->
nCh¨
 + 
nNewCh¨
*2 + 1;

667 if–
pM
->
zText
=ıM->
zBa£
 ){

668 
pM
->
zText
 =ÖM->
	`xRóŒoc
(0,ÖM->
nAŒoc
);

669 if–
pM
->
zText
 &&ÖM->
nCh¨
 ){

670 
	`mem˝y
(
pM
->
zText
,ÖM->
zBa£
,ÖM->
nCh¨
);

673 
pM
->
zText
 =ÖM->
	`xRóŒoc
’M->zText,ÖM->
nAŒoc
);

677 if–
pM
->
zText
 ){

678 if–
nNewCh¨
>0 ){

679 
	`mem˝y
(&
pM
->
zText
[pM->
nCh¨
], 
zNewText
, 
nNewCh¨
);

680 
pM
->
nCh¨
 +
nNewCh¨
;

682 
pM
->
zText
[pM->
nCh¨
] = 0;

684 
	}
}

690 *
ba£_v¥ötf
(

691 *(*
xRóŒoc
)(*,),

692 
u£I¡î«l
,

693 *
zInôBuf
,

694 
nInôBuf
,

695 c⁄° *
zF‹m©
,

696 
va_li°
 
≠


698 
sgM¥ötf
 
	gsM
;

699 
	gsM
.
	gzBa£
 = 
sM
.
zText
 = 
zInôBuf
;

700 
	gsM
.
	gnCh¨
 = 
sM
.
nTŸÆ
 = 0;

701 
	gsM
.
	gnAŒoc
 = 
nInôBuf
;

702 
	gsM
.
	gxRóŒoc
 = 
xRóŒoc
;

703 
vx¥ötf
(
mout
, &
sM
, 
u£I¡î«l
, 
zF‹m©
, 
≠
);

704 if–
	gxRóŒoc
 ){

705 if–
	gsM
.
	gzText
==
sM
.
zBa£
 ){

706 
sM
.
zText
 = 
xRóŒoc
(0, sM.
nCh¨
+1);

707 
mem˝y
(
sM
.
zText
, sM.
zBa£
, sM.
nCh¨
+1);

708 }if–
	gsM
.
	gnAŒoc
>sM.
	gnCh¨
+10 ){

709 
	gsM
.
	gzText
 = 
xRóŒoc
(
sM
.
zText
, sM.
nCh¨
+1);

712  
	gsM
.
	gzText
;

718 *
	$¥ötf_ªÆloc
(*
ﬁd
, 
size
){

719  
	`sqlôeRóŒoc
(
ﬁd
,
size
);

720 
	}
}

726 *
	$sqlôeVMPrötf
(c⁄° *
zF‹m©
, 
va_li°
 
≠
){

727 
zBa£
[1000];

728  
	`ba£_v¥ötf
(
¥ötf_ªÆloc
, 1, 
zBa£
, (zBa£), 
zF‹m©
, 
≠
);

729 
	}
}

735 *
	$sqlôeMPrötf
(c⁄° *
zF‹m©
, ...){

736 
va_li°
 
≠
;

737 *
z
;

738 
zBa£
[1000];

739 
	`va_°¨t
(
≠
, 
zF‹m©
);

740 
z
 = 
	`ba£_v¥ötf
(
¥ötf_ªÆloc
, 1, 
zBa£
, (zBa£), 
zF‹m©
, 
≠
);

741 
	`va_íd
(
≠
);

742  
z
;

743 
	}
}

749 *
	$sqlôe_m¥ötf
(c⁄° *
zF‹m©
, ...){

750 
va_li°
 
≠
;

751 *
z
;

752 
zBuf
[200];

754 
	`va_°¨t
(
≠
,
zF‹m©
);

755 
z
 = 
	`ba£_v¥ötf
((*(*)(*,))
ªÆloc
, 0,

756 
zBuf
, (zBuf), 
zF‹m©
, 
≠
);

757 
	`va_íd
(
≠
);

758  
z
;

759 
	}
}

763 *
	$sqlôe_vm¥ötf
(c⁄° *
zF‹m©
, 
va_li°
 
≠
){

764 
zBuf
[200];

765  
	`ba£_v¥ötf
((*(*)(*,))
ªÆloc
, 0,

766 
zBuf
, (zBuf), 
zF‹m©
, 
≠
);

767 
	}
}

775 *
	$sqlôe_¢¥ötf
(
n
, *
zBuf
, c⁄° *
zF‹m©
, ...){

776 *
z
;

777 
va_li°
 
≠
;

779 
	`va_°¨t
(
≠
,
zF‹m©
);

780 
z
 = 
	`ba£_v¥ötf
(0, 0, 
zBuf
, 
n
, 
zF‹m©
, 
≠
);

781 
	`va_íd
(
≠
);

782  
z
;

783 
	}
}

793 
	$sqlôe_exec_¥ötf
(

794 
sqlôe
 *
db
,

795 c⁄° *
sqlF‹m©
,

796 
sqlôe_ˇŒback
 
xCÆlback
,

797 *
pArg
,

798 **
îrmsg
,

801 
va_li°
 
≠
;

802 
rc
;

804 
	`va_°¨t
(
≠
, 
îrmsg
);

805 
rc
 = 
	`sqlôe_exec_v¥ötf
(
db
, 
sqlF‹m©
, 
xCÆlback
, 
pArg
, 
îrmsg
, 
≠
);

806 
	`va_íd
(
≠
);

807  
rc
;

808 
	}
}

809 
	$sqlôe_exec_v¥ötf
(

810 
sqlôe
 *
db
,

811 c⁄° *
sqlF‹m©
,

812 
sqlôe_ˇŒback
 
xCÆlback
,

813 *
pArg
,

814 **
îrmsg
,

815 
va_li°
 
≠


817 *
zSql
;

818 
rc
;

820 
zSql
 = 
	`sqlôe_vm¥ötf
(
sqlF‹m©
, 
≠
);

821 
rc
 = 
	`sqlôe_exec
(
db
, 
zSql
, 
xCÆlback
, 
pArg
, 
îrmsg
);

822 
	`‰ì
(
zSql
);

823  
rc
;

824 
	}
}

825 
	$sqlôe_gë_èbÀ_¥ötf
(

826 
sqlôe
 *
db
,

827 c⁄° *
sqlF‹m©
,

828 ***
ªsu…p
,

829 *
ƒow
,

830 *
ncﬁ
,

831 **
îrmsg
,

834 
va_li°
 
≠
;

835 
rc
;

837 
	`va_°¨t
(
≠
, 
îrmsg
);

838 
rc
 = 
	`sqlôe_gë_èbÀ_v¥ötf
(
db
, 
sqlF‹m©
, 
ªsu…p
, 
ƒow
, 
ncﬁ
, 
îrmsg
, 
≠
);

839 
	`va_íd
(
≠
);

840  
rc
;

841 
	}
}

842 
	$sqlôe_gë_èbÀ_v¥ötf
(

843 
sqlôe
 *
db
,

844 c⁄° *
sqlF‹m©
,

845 ***
ªsu…p
,

846 *
ƒow
,

847 *
ncﬁumn
,

848 **
îrmsg
,

849 
va_li°
 
≠


851 *
zSql
;

852 
rc
;

854 
zSql
 = 
	`sqlôe_vm¥ötf
(
sqlF‹m©
, 
≠
);

855 
rc
 = 
	`sqlôe_gë_èbÀ
(
db
, 
zSql
, 
ªsu…p
, 
ƒow
, 
ncﬁumn
, 
îrmsg
);

856 
	`‰ì
(
zSql
);

857  
rc
;

858 
	}
}

	@random.c

20 
	~"sqlôeI¡.h
"

21 
	~"os.h
"

37 
	$øndomByã
(){

38 
t
;

44 
isInô
;

45 
i
, 
j
;

46 
s
[256];

47 } 
¥ng
;

58 if–!
¥ng
.
isInô
 ){

59 
i
;

60 
k
[256];

61 
¥ng
.
j
 = 0;

62 
¥ng
.
i
 = 0;

63 
	`sqlôeOsR™domSìd
(
k
);

64 
i
=0; i<256; i++){

65 
¥ng
.
s
[
i
] = i;

67 
i
=0; i<256; i++){

68 
¥ng
.
j
 +¥ng.
s
[
i
] + 
k
[i];

69 
t
 = 
¥ng
.
s
[¥ng.
j
];

70 
¥ng
.
s
[¥ng.
j
] =Ö∫g.s[
i
];

71 
¥ng
.
s
[
i
] = 
t
;

73 
¥ng
.
isInô
 = 1;

78 
¥ng
.
i
++;

79 
t
 = 
¥ng
.
s
[¥ng.
i
];

80 
¥ng
.
j
 +
t
;

81 
¥ng
.
s
[¥ng.
i
] =Ö∫g.s[¥ng.
j
];

82 
¥ng
.
s
[¥ng.
j
] = 
t
;

83 
t
 +
¥ng
.
s
[¥ng.
i
];

84  
¥ng
.
s
[
t
];

85 
	}
}

90 
	$sqlôeR™dom√ss
(
N
, *
pBuf
){

91 *
zBuf
 = 
pBuf
;

92 
	`sqlôeOsE¡îMuãx
();

93  
N
-- ){

94 *(
zBuf
++Ë
	`øndomByã
();

96 
	`sqlôeOsLóveMuãx
();

97 
	}
}

	@select.c

17 
	~"sqlôeI¡.h
"

24 
Sñe˘
 *
	$sqlôeSñe˘New
(

25 
Ex¥Li°
 *
pELi°
,

26 
SrcLi°
 *
pSrc
,

27 
Ex¥
 *
pWhîe
,

28 
Ex¥Li°
 *
pGroupBy
,

29 
Ex¥
 *
pHavög
,

30 
Ex¥Li°
 *
pOrdîBy
,

31 
isDi°ö˘
,

32 
nLimô
,

33 
nOff£t


35 
Sñe˘
 *
pNew
;

36 
pNew
 = 
	`sqlôeMÆloc
( (*pNew) );

37 if–
pNew
==0 ){

38 
	`sqlôeEx¥Li°Dñëe
(
pELi°
);

39 
	`sqlôeSrcLi°Dñëe
(
pSrc
);

40 
	`sqlôeEx¥Dñëe
(
pWhîe
);

41 
	`sqlôeEx¥Li°Dñëe
(
pGroupBy
);

42 
	`sqlôeEx¥Dñëe
(
pHavög
);

43 
	`sqlôeEx¥Li°Dñëe
(
pOrdîBy
);

45 if–
pELi°
==0 ){

46 
pELi°
 = 
	`sqlôeEx¥Li°Aµíd
(0, 
	`sqlôeEx¥
(
TK_ALL
,0,0,0), 0);

48 
pNew
->
pELi°
 =ÖEList;

49 
pNew
->
pSrc
 =ÖSrc;

50 
pNew
->
pWhîe
 =ÖWhere;

51 
pNew
->
pGroupBy
 =ÖGroupBy;

52 
pNew
->
pHavög
 =ÖHaving;

53 
pNew
->
pOrdîBy
 =ÖOrderBy;

54 
pNew
->
isDi°ö˘
 = isDistinct;

55 
pNew
->
›
 = 
TK_SELECT
;

56 
pNew
->
nLimô
 =ÇLimit;

57 
pNew
->
nOff£t
 =ÇOffset;

58 
pNew
->
iLimô
 = -1;

59 
pNew
->
iOff£t
 = -1;

61  
pNew
;

62 
	}
}

80 
	$sqlôeJoöTy≥
(
P¨£
 *
pP¨£
, 
Tokí
 *
pA
, Tokí *
pB
, Tokí *
pC
){

81 
joöty≥
 = 0;

82 
Tokí
 *
≠AŒ
[3];

83 
Tokí
 *
p
;

85 c⁄° *
zKeyw‹d
;

86 
nCh¨
;

87 
code
;

88 } 
keyw‹ds
[] = {

89 { "«tuøl", 7, 
JT_NATURAL
 },

90 { "À·", 4, 
JT_LEFT
|
JT_OUTER
 },

91 { "right", 5, 
JT_RIGHT
|
JT_OUTER
 },

92 { "fuŒ", 4, 
JT_LEFT
|
JT_RIGHT
|
JT_OUTER
 },

93 { "ouãr", 5, 
JT_OUTER
 },

94 { "ö√r", 5, 
JT_INNER
 },

95 { "¸oss", 5, 
JT_INNER
 },

97 
i
, 
j
;

98 
≠AŒ
[0] = 
pA
;

99 
≠AŒ
[1] = 
pB
;

100 
≠AŒ
[2] = 
pC
;

101 
i
=0; i<3 && 
≠AŒ
[i]; i++){

102 
p
 = 
≠AŒ
[
i
];

103 
j
=0; j<(
keyw‹ds
)/(keywords[0]); j++){

104 if–
p
->
n
==
keyw‹ds
[
j
].
nCh¨


105 && 
	`sqlôeSåNICmp
(
p
->
z
, 
keyw‹ds
[
j
].
zKeyw‹d
,Ö->
n
)==0 ){

106 
joöty≥
 |
keyw‹ds
[
j
].
code
;

110 if–
j
>=(
keyw‹ds
)/(keywords[0]) ){

111 
joöty≥
 |
JT_ERROR
;

116 (
joöty≥
 & (
JT_INNER
|
JT_OUTER
))==(JT_INNER|JT_OUTER) ||

117 (
joöty≥
 & 
JT_ERROR
)!=0

119 
Tokí
 
dummy
 = { 0, 0 };

120 *
zSp1
 = " ", *
zSp2
 = " ";

121 if–
pB
==0 ){ÖB = &
dummy
; 
zSp1
 = 0; }

122 if–
pC
==0 ){ÖC = &
dummy
; 
zSp2
 = 0; }

123 
	`sqlôeSëNSåög
(&
pP¨£
->
zEºMsg
, "unknown or unsupported joinÅype: ", 0,

124 
pA
->
z
,ÖA->
n
, 
zSp1
, 1, 
pB
->z,ÖB->n, 
zSp2
, 1, 
pC
->z,ÖC->n, 0);

125 
pP¨£
->
nEº
++;

126 
joöty≥
 = 
JT_INNER
;

127 }if–
joöty≥
 & 
JT_RIGHT
 ){

128 
	`sqlôeEº‹Msg
(
pP¨£
,

130 
joöty≥
 = 
JT_INNER
;

132  
joöty≥
;

133 
	}
}

139 
	$cﬁumnIndex
(
TabÀ
 *
pTab
, c⁄° *
zCﬁ
){

140 
i
;

141 
i
=0; i<
pTab
->
nCﬁ
; i++){

142 if–
	`sqlôeSåICmp
(
pTab
->
aCﬁ
[
i
].
zName
, 
zCﬁ
)==0 )  i;

145 
	}
}

151 
	$addWhîeTîm
(

152 c⁄° *
zCﬁ
,

153 c⁄° 
TabÀ
 *
pTab1
,

154 c⁄° 
TabÀ
 *
pTab2
,

155 
Ex¥
 **
µEx¥


157 
Tokí
 
dummy
;

158 
Ex¥
 *
pE1a
, *
pE1b
, *
pE1c
;

159 
Ex¥
 *
pE2a
, *
pE2b
, *
pE2c
;

160 
Ex¥
 *
pE
;

162 
dummy
.
z
 = 
zCﬁ
;

163 
dummy
.
n
 = 
	`°æí
(
zCﬁ
);

164 
dummy
.
dyn
 = 0;

165 
pE1a
 = 
	`sqlôeEx¥
(
TK_ID
, 0, 0, &
dummy
);

166 
pE2a
 = 
	`sqlôeEx¥
(
TK_ID
, 0, 0, &
dummy
);

167 
dummy
.
z
 = 
pTab1
->
zName
;

168 
dummy
.
n
 = 
	`°æí
(dummy.
z
);

169 
pE1b
 = 
	`sqlôeEx¥
(
TK_ID
, 0, 0, &
dummy
);

170 
dummy
.
z
 = 
pTab2
->
zName
;

171 
dummy
.
n
 = 
	`°æí
(dummy.
z
);

172 
pE2b
 = 
	`sqlôeEx¥
(
TK_ID
, 0, 0, &
dummy
);

173 
pE1c
 = 
	`sqlôeEx¥
(
TK_DOT
, 
pE1b
, 
pE1a
, 0);

174 
pE2c
 = 
	`sqlôeEx¥
(
TK_DOT
, 
pE2b
, 
pE2a
, 0);

175 
pE
 = 
	`sqlôeEx¥
(
TK_EQ
, 
pE1c
, 
pE2c
, 0);

176 
	`Ex¥SëPr›îty
(
pE
, 
EP_FromJoö
);

177 if–*
µEx¥
 ){

178 *
µEx¥
 = 
	`sqlôeEx¥
(
TK_AND
, *µEx¥, 
pE
, 0);

180 *
µEx¥
 = 
pE
;

182 
	}
}

194 
	$£tJoöEx¥
(
Ex¥
 *
p
){

195  
p
 ){

196 
	`Ex¥SëPr›îty
(
p
, 
EP_FromJoö
);

197 
	`£tJoöEx¥
(
p
->
pLe·
);

198 
p
 =Ö->
pRight
;

200 
	}
}

209 
	$sqlôePro˚ssJoö
(
P¨£
 *
pP¨£
, 
Sñe˘
 *
p
){

210 
SrcLi°
 *
pSrc
;

211 
i
, 
j
;

212 
pSrc
 = 
p
->pSrc;

213 
i
=0; i<
pSrc
->
nSrc
-1; i++){

214 
SrcLi°_ôem
 *
pTîm
 = &
pSrc
->
a
[
i
];

215 
SrcLi°_ôem
 *
pOthî
 = &
pSrc
->
a
[
i
+1];

217 if–
pTîm
->
pTab
==0 || 
pOthî
->pTab==0 ) ;

222 if–
pTîm
->
joöty≥
 & 
JT_NATURAL
 ){

223 
TabÀ
 *
pTab
;

224 if–
pTîm
->
pOn
 ||ÖTîm->
pUsög
 ){

225 
	`sqlôeEº‹Msg
(
pP¨£
, "a NATURAL join mayÇot have "

229 
pTab
 = 
pTîm
->pTab;

230 
j
=0; j<
pTab
->
nCﬁ
; j++){

231 if–
	`cﬁumnIndex
(
pOthî
->
pTab
,ÖTab->
aCﬁ
[
j
].
zName
)>=0 ){

232 
	`addWhîeTîm
(
pTab
->
aCﬁ
[
j
].
zName
,ÖTab, 
pOthî
->pTab, &
p
->
pWhîe
);

239 if–
pTîm
->
pOn
 &&ÖTîm->
pUsög
 ){

240 
	`sqlôeEº‹Msg
(
pP¨£
, "cannot have both ONánd USING "

248 if–
pTîm
->
pOn
 ){

249 
	`£tJoöEx¥
(
pTîm
->
pOn
);

250 if–
p
->
pWhîe
==0 ){

251 
p
->
pWhîe
 = 
pTîm
->
pOn
;

253 
p
->
pWhîe
 = 
	`sqlôeEx¥
(
TK_AND
,Ö->pWhîe, 
pTîm
->
pOn
, 0);

255 
pTîm
->
pOn
 = 0;

265 if–
pTîm
->
pUsög
 ){

266 
IdLi°
 *
pLi°
;

267 
j
;

268 
	`as£π
–
i
<
pSrc
->
nSrc
-1 );

269 
pLi°
 = 
pTîm
->
pUsög
;

270 
j
=0; j<
pLi°
->
nId
; j++){

271 if–
	`cﬁumnIndex
(
pTîm
->
pTab
, 
pLi°
->
a
[
j
].
zName
)<0 ||

272 
	`cﬁumnIndex
(
pOthî
->
pTab
, 
pLi°
->
a
[
j
].
zName
)<0 ){

273 
	`sqlôeEº‹Msg
(
pP¨£
, "cannot join using column %s - column "

274 "nŸÖª£¡ i¿bŸhÅabÀs", 
pLi°
->
a
[
j
].
zName
);

277 
	`addWhîeTîm
(
pLi°
->
a
[
j
].
zName
, 
pTîm
->
pTab
, 
pOthî
->pTab, &
p
->
pWhîe
);

282 
	}
}

287 
	$sqlôeSñe˘Dñëe
(
Sñe˘
 *
p
){

288 if–
p
==0 ) ;

289 
	`sqlôeEx¥Li°Dñëe
(
p
->
pELi°
);

290 
	`sqlôeSrcLi°Dñëe
(
p
->
pSrc
);

291 
	`sqlôeEx¥Dñëe
(
p
->
pWhîe
);

292 
	`sqlôeEx¥Li°Dñëe
(
p
->
pGroupBy
);

293 
	`sqlôeEx¥Dñëe
(
p
->
pHavög
);

294 
	`sqlôeEx¥Li°Dñëe
(
p
->
pOrdîBy
);

295 
	`sqlôeSñe˘Dñëe
(
p
->
pPri‹
);

296 
	`sqlôeFªe
(
p
->
zSñe˘
);

297 
	`sqlôeFªe
(
p
);

298 
	}
}

303 
	$sqlôeAggªg©eInfoRe£t
(
P¨£
 *
pP¨£
){

304 
	`sqlôeFªe
(
pP¨£
->
aAgg
);

305 
pP¨£
->
aAgg
 = 0;

306 
pP¨£
->
nAgg
 = 0;

307 
pP¨£
->
u£Agg
 = 0;

308 
	}
}

314 
	$pushO¡oS‹ãr
(
P¨£
 *
pP¨£
, 
Vdbe
 *
v
, 
Ex¥Li°
 *
pOrdîBy
){

315 *
zS‹tOrdî
;

316 
i
;

317 
zS‹tOrdî
 = 
	`sqlôeMÆloc
–
pOrdîBy
->
nEx¥
 + 1 );

318 if–
zS‹tOrdî
==0 ) ;

319 
i
=0; i<
pOrdîBy
->
nEx¥
; i++){

320 
‹dî
 = 
pOrdîBy
->
a
[
i
].
s‹tOrdî
;

321 
ty≥
;

322 
c
;

323 if–(
‹dî
 & 
SQLITE_SO_TYPEMASK
)==
SQLITE_SO_TEXT
 ){

324 
ty≥
 = 
SQLITE_SO_TEXT
;

325 }if–(
‹dî
 & 
SQLITE_SO_TYPEMASK
)==
SQLITE_SO_NUM
 ){

326 
ty≥
 = 
SQLITE_SO_NUM
;

327 }if–
pP¨£
->
db
->
fûe_f‹m©
>=4 ){

328 
ty≥
 = 
	`sqlôeEx¥Ty≥
(
pOrdîBy
->
a
[
i
].
pEx¥
);

330 
ty≥
 = 
SQLITE_SO_NUM
;

332 if–(
‹dî
 & 
SQLITE_SO_DIRMASK
)==
SQLITE_SO_ASC
 ){

333 
c
 = 
ty≥
==
SQLITE_SO_TEXT
 ? 'A' : '+';

335 
c
 = 
ty≥
==
SQLITE_SO_TEXT
 ? 'D' : '-';

337 
zS‹tOrdî
[
i
] = 
c
;

338 
	`sqlôeEx¥Code
(
pP¨£
, 
pOrdîBy
->
a
[
i
].
pEx¥
);

340 
zS‹tOrdî
[
pOrdîBy
->
nEx¥
] = 0;

341 
	`sqlôeVdbeOp3
(
v
, 
OP_S‹tMakeKey
, 
pOrdîBy
->
nEx¥
, 0, 
zS‹tOrdî
, 
P3_DYNAMIC
);

342 
	`sqlôeVdbeAddOp
(
v
, 
OP_S‹tPut
, 0, 0);

343 
	}
}

355 
	$sqlôeAddKeyTy≥
(
Vdbe
 *
v
, 
Ex¥Li°
 *
pELi°
){

356 
nCﬁumn
 = 
pELi°
->
nEx¥
;

357 *
zTy≥
 = 
	`sqlôeMÆloc
–
nCﬁumn
+1 );

358 
i
;

359 if–
zTy≥
==0 ) ;

360 
i
=0; i<
nCﬁumn
; i++){

361 
zTy≥
[
i
] = 
	`sqlôeEx¥Ty≥
(
pELi°
->
a
[i].
pEx¥
)==
SQLITE_SO_NUM
 ? 'n' : 't';

363 
zTy≥
[
i
] = 0;

364 
	`sqlôeVdbeCh™geP3
(
v
, -1, 
zTy≥
, 
P3_DYNAMIC
);

365 
	}
}

370 
	$codeLimôî
(

371 
Vdbe
 *
v
,

372 
Sñe˘
 *
p
,

373 
iC⁄töue
,

374 
iBªak
,

375 
nP›


377 if–
p
->
iOff£t
>=0 ){

378 
addr
 = 
	`sqlôeVdbeCuºítAddr
(
v
) + 2;

379 if–
nP›
>0 ) 
addr
++;

380 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemIn¸
, 
p
->
iOff£t
, 
addr
);

381 if–
nP›
>0 ){

382 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 
nP›
, 0);

384 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
iC⁄töue
);

386 if–
p
->
iLimô
>=0 ){

387 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemIn¸
, 
p
->
iLimô
, 
iBªak
);

389 
	}
}

400 
	$£À˘I¬îLo›
(

401 
P¨£
 *
pP¨£
,

402 
Sñe˘
 *
p
,

403 
Ex¥Li°
 *
pELi°
,

404 
§cTab
,

405 
nCﬁumn
,

406 
Ex¥Li°
 *
pOrdîBy
,

407 
di°ö˘
,

408 
eDe°
,

409 
iP¨m
,

410 
iC⁄töue
,

411 
iBªak


413 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

414 
i
;

415 
hasDi°ö˘
;

417 if–
v
==0 )  0;

418 
	`as£π
–
pELi°
!=0 );

423 
hasDi°ö˘
 = 
di°ö˘
>=0 && 
pELi°
 &&ÖELi°->
nEx¥
>0;

424 if–
pOrdîBy
==0 && !
hasDi°ö˘
 ){

425 
	`codeLimôî
(
v
, 
p
, 
iC⁄töue
, 
iBªak
, 0);

430 if–
nCﬁumn
>0 ){

431 
i
=0; i<
nCﬁumn
; i++){

432 
	`sqlôeVdbeAddOp
(
v
, 
OP_Cﬁumn
, 
§cTab
, 
i
);

435 
nCﬁumn
 = 
pELi°
->
nEx¥
;

436 
i
=0; i<
pELi°
->
nEx¥
; i++){

437 
	`sqlôeEx¥Code
(
pP¨£
, 
pELi°
->
a
[
i
].
pEx¥
);

445 if–
hasDi°ö˘
 ){

446 #i‡
NULL_ALWAYS_DISTINCT


447 
	`sqlôeVdbeAddOp
(
v
, 
OP_IsNuŒ
, -
pELi°
->
nEx¥
, 
	`sqlôeVdbeCuºítAddr
(v)+7);

449 
	`sqlôeVdbeAddOp
(
v
, 
OP_MakeKey
, 
pELi°
->
nEx¥
, 1);

450 if–
pP¨£
->
db
->
fûe_f‹m©
>=4 ) 
	`sqlôeAddKeyTy≥
(
v
, 
pELi°
);

451 
	`sqlôeVdbeAddOp
(
v
, 
OP_Di°ö˘
, 
di°ö˘
, 
	`sqlôeVdbeCuºítAddr
(v)+3);

452 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 
pELi°
->
nEx¥
+1, 0);

453 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
iC⁄töue
);

454 
	`sqlôeVdbeAddOp
(
v
, 
OP_Såög
, 0, 0);

455 
	`sqlôeVdbeAddOp
(
v
, 
OP_PutSåKey
, 
di°ö˘
, 0);

456 if–
pOrdîBy
==0 ){

457 
	`codeLimôî
(
v
, 
p
, 
iC⁄töue
, 
iBªak
, 
nCﬁumn
);

461  
eDe°
 ){

465 
SRT_Uni⁄
: {

466 
	`sqlôeVdbeAddOp
(
v
, 
OP_MakeRec‹d
, 
nCﬁumn
, 
NULL_ALWAYS_DISTINCT
);

467 
	`sqlôeVdbeAddOp
(
v
, 
OP_Såög
, 0, 0);

468 
	`sqlôeVdbeAddOp
(
v
, 
OP_PutSåKey
, 
iP¨m
, 0);

474 
SRT_TabÀ
:

475 
SRT_TempTabÀ
: {

476 
	`sqlôeVdbeAddOp
(
v
, 
OP_MakeRec‹d
, 
nCﬁumn
, 0);

477 if–
pOrdîBy
 ){

478 
	`pushO¡oS‹ãr
(
pP¨£
, 
v
, 
pOrdîBy
);

480 
	`sqlôeVdbeAddOp
(
v
, 
OP_NewRe˙o
, 
iP¨m
, 0);

481 
	`sqlôeVdbeAddOp
(
v
, 
OP_PuŒ
, 1, 0);

482 
	`sqlôeVdbeAddOp
(
v
, 
OP_PutI¡Key
, 
iP¨m
, 0);

491 
SRT_Ex˚±
: {

492 
addr
;

493 
addr
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_MakeRec‹d
, 
nCﬁumn
, 
NULL_ALWAYS_DISTINCT
);

494 
	`sqlôeVdbeAddOp
(
v
, 
OP_NŸFound
, 
iP¨m
, 
addr
+3);

495 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dñëe
, 
iP¨m
, 0);

503 
SRT_Së
: {

504 
addr1
 = 
	`sqlôeVdbeCuºítAddr
(
v
);

505 
addr2
;

506 
	`as£π
–
nCﬁumn
==1 );

507 
	`sqlôeVdbeAddOp
(
v
, 
OP_NŸNuŒ
, -1, 
addr1
+3);

508 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 1, 0);

509 
addr2
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 0);

510 if–
pOrdîBy
 ){

511 
	`pushO¡oS‹ãr
(
pP¨£
, 
v
, 
pOrdîBy
);

513 
	`sqlôeVdbeAddOp
(
v
, 
OP_Såög
, 0, 0);

514 
	`sqlôeVdbeAddOp
(
v
, 
OP_PutSåKey
, 
iP¨m
, 0);

516 
	`sqlôeVdbeCh™geP2
(
v
, 
addr2
, 
	`sqlôeVdbeCuºítAddr
(v));

524 
SRT_Mem
: {

525 
	`as£π
–
nCﬁumn
==1 );

526 if–
pOrdîBy
 ){

527 
	`pushO¡oS‹ãr
(
pP¨£
, 
v
, 
pOrdîBy
);

529 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemSt‹e
, 
iP¨m
, 1);

530 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
iBªak
);

537 
SRT_CÆlback
:

538 
SRT_S‹ãr
: {

539 if–
pOrdîBy
 ){

540 
	`sqlôeVdbeAddOp
(
v
, 
OP_S‹tMakeRec
, 
nCﬁumn
, 0);

541 
	`pushO¡oS‹ãr
(
pP¨£
, 
v
, 
pOrdîBy
);

543 
	`as£π
–
eDe°
==
SRT_CÆlback
 );

544 
	`sqlôeVdbeAddOp
(
v
, 
OP_CÆlback
, 
nCﬁumn
, 0);

552 
SRT_Subroutöe
: {

553 if–
pOrdîBy
 ){

554 
	`sqlôeVdbeAddOp
(
v
, 
OP_MakeRec‹d
, 
nCﬁumn
, 0);

555 
	`pushO¡oS‹ãr
(
pP¨£
, 
v
, 
pOrdîBy
);

557 
	`sqlôeVdbeAddOp
(
v
, 
OP_Gosub
, 0, 
iP¨m
);

568 
	`as£π
–
eDe°
==
SRT_Disˇrd
 );

569 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 
nCﬁumn
, 0);

574 
	}
}

582 
	$gíî©eS‹tTaû
(

583 
Sñe˘
 *
p
,

584 
Vdbe
 *
v
,

585 
nCﬁumn
,

586 
eDe°
,

587 
iP¨m


589 
íd1
 = 
	`sqlôeVdbeMakeLabñ
(
v
);

590 
íd2
 = 
	`sqlôeVdbeMakeLabñ
(
v
);

591 
addr
;

592 if–
eDe°
==
SRT_S‹ãr
 ) ;

593 
	`sqlôeVdbeAddOp
(
v
, 
OP_S‹t
, 0, 0);

594 
addr
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_S‹tNext
, 0, 
íd1
);

595 
	`codeLimôî
(
v
, 
p
, 
addr
, 
íd2
, 1);

596  
eDe°
 ){

597 
SRT_CÆlback
: {

598 
	`sqlôeVdbeAddOp
(
v
, 
OP_S‹tCÆlback
, 
nCﬁumn
, 0);

601 
SRT_TabÀ
:

602 
SRT_TempTabÀ
: {

603 
	`sqlôeVdbeAddOp
(
v
, 
OP_NewRe˙o
, 
iP¨m
, 0);

604 
	`sqlôeVdbeAddOp
(
v
, 
OP_PuŒ
, 1, 0);

605 
	`sqlôeVdbeAddOp
(
v
, 
OP_PutI¡Key
, 
iP¨m
, 0);

608 
SRT_Së
: {

609 
	`as£π
–
nCﬁumn
==1 );

610 
	`sqlôeVdbeAddOp
(
v
, 
OP_NŸNuŒ
, -1, 
	`sqlôeVdbeCuºítAddr
(v)+3);

611 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 1, 0);

612 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
	`sqlôeVdbeCuºítAddr
(v)+3);

613 
	`sqlôeVdbeAddOp
(
v
, 
OP_Såög
, 0, 0);

614 
	`sqlôeVdbeAddOp
(
v
, 
OP_PutSåKey
, 
iP¨m
, 0);

617 
SRT_Mem
: {

618 
	`as£π
–
nCﬁumn
==1 );

619 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemSt‹e
, 
iP¨m
, 1);

620 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
íd1
);

623 
SRT_Subroutöe
: {

624 
i
;

625 
i
=0; i<
nCﬁumn
; i++){

626 
	`sqlôeVdbeAddOp
(
v
, 
OP_Cﬁumn
, -1-
i
, i);

628 
	`sqlôeVdbeAddOp
(
v
, 
OP_Gosub
, 0, 
iP¨m
);

629 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 1, 0);

637 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
addr
);

638 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
íd2
);

639 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 1, 0);

640 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
íd1
);

641 
	`sqlôeVdbeAddOp
(
v
, 
OP_S‹tRe£t
, 0, 0);

642 
	}
}

659 
	$gíî©eCﬁumnTy≥s
(

660 
P¨£
 *
pP¨£
,

661 
SrcLi°
 *
pTabLi°
,

662 
Ex¥Li°
 *
pELi°


664 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

665 
i
, 
j
;

666 
i
=0; i<
pELi°
->
nEx¥
; i++){

667 
Ex¥
 *
p
 = 
pELi°
->
a
[
i
].
pEx¥
;

668 *
zTy≥
 = 0;

669 if–
p
==0 ) ;

670 if–
p
->
›
==
TK_COLUMN
 && 
pTabLi°
 ){

671 
TabÀ
 *
pTab
;

672 
iCﬁ
 = 
p
->
iCﬁumn
;

673 
j
=0; j<
pTabLi°
->
nSrc
 &&ÖTabLi°->
a
[j].
iCurs‹
!=
p
->
iTabÀ
; j++){}

674 
	`as£π
–
j
<
pTabLi°
->
nSrc
 );

675 
pTab
 = 
pTabLi°
->
a
[
j
].pTab;

676 if–
iCﬁ
<0 ) iCﬁ = 
pTab
->
iPKey
;

677 
	`as£π
–
iCﬁ
==-1 || (iCﬁ>=0 && iCﬁ<
pTab
->
nCﬁ
) );

678 if–
iCﬁ
<0 ){

679 
zTy≥
 = "INTEGER";

681 
zTy≥
 = 
pTab
->
aCﬁ
[
iCﬁ
].zType;

684 if–
	`sqlôeEx¥Ty≥
(
p
)==
SQLITE_SO_TEXT
 ){

685 
zTy≥
 = "TEXT";

687 
zTy≥
 = "NUMERIC";

690 
	`sqlôeVdbeOp3
(
v
, 
OP_CﬁumnName
, 
i
 + 
pELi°
->
nEx¥
, 0, 
zTy≥
, 0);

692 
	}
}

699 
	$gíî©eCﬁumnNames
(

700 
P¨£
 *
pP¨£
,

701 
SrcLi°
 *
pTabLi°
,

702 
Ex¥Li°
 *
pELi°


704 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

705 
i
, 
j
;

706 
sqlôe
 *
db
 = 
pP¨£
->db;

707 
fuŒNames
, 
sh‹tNames
;

709 
	`as£π
–
v
!=0 );

710 if–
pP¨£
->
cﬁNamesSë
 || 
v
==0 || 
sqlôe_mÆloc_Áûed
 ) ;

711 
pP¨£
->
cﬁNamesSë
 = 1;

712 
fuŒNames
 = (
db
->
Êags
 & 
SQLITE_FuŒCﬁNames
)!=0;

713 
sh‹tNames
 = (
db
->
Êags
 & 
SQLITE_Sh‹tCﬁNames
)!=0;

714 
i
=0; i<
pELi°
->
nEx¥
; i++){

715 
Ex¥
 *
p
;

716 
p2
 = 
i
==
pELi°
->
nEx¥
-1;

717 
p
 = 
pELi°
->
a
[
i
].
pEx¥
;

718 if–
p
==0 ) ;

719 if–
pELi°
->
a
[
i
].
zName
 ){

720 *
zName
 = 
pELi°
->
a
[
i
].zName;

721 
	`sqlôeVdbeOp3
(
v
, 
OP_CﬁumnName
, 
i
, 
p2
, 
zName
, 0);

724 if–
p
->
›
==
TK_COLUMN
 && 
pTabLi°
 ){

725 
TabÀ
 *
pTab
;

726 *
zCﬁ
;

727 
iCﬁ
 = 
p
->
iCﬁumn
;

728 
j
=0; j<
pTabLi°
->
nSrc
 &&ÖTabLi°->
a
[j].
iCurs‹
!=
p
->
iTabÀ
; j++){}

729 
	`as£π
–
j
<
pTabLi°
->
nSrc
 );

730 
pTab
 = 
pTabLi°
->
a
[
j
].pTab;

731 if–
iCﬁ
<0 ) iCﬁ = 
pTab
->
iPKey
;

732 
	`as£π
–
iCﬁ
==-1 || (iCﬁ>=0 && iCﬁ<
pTab
->
nCﬁ
) );

733 if–
iCﬁ
<0 ){

734 
zCﬁ
 = "_ROWID_";

736 
zCﬁ
 = 
pTab
->
aCﬁ
[
iCﬁ
].
zName
;

738 if–!
sh‹tNames
 && !
fuŒNames
 && 
p
->
•™
.
z
 &&Ö->span.z[0] ){

739 
addr
 = 
	`sqlôeVdbeOp3
(
v
,
OP_CﬁumnName
, 
i
, 
p2
, 
p
->
•™
.
z
,Ö->•™.
n
);

740 
	`sqlôeVdbeCom¥essS∑˚
(
v
, 
addr
);

741 }if–
fuŒNames
 || (!
sh‹tNames
 && 
pTabLi°
->
nSrc
>1) ){

742 *
zName
 = 0;

743 *
zTab
;

745 
zTab
 = 
pTabLi°
->
a
[
j
].
zAlüs
;

746 if–
fuŒNames
 || 
zTab
==0 ) zTab = 
pTab
->
zName
;

747 
	`sqlôeSëSåög
(&
zName
, 
zTab
, ".", 
zCﬁ
, 0);

748 
	`sqlôeVdbeOp3
(
v
, 
OP_CﬁumnName
, 
i
, 
p2
, 
zName
, 
P3_DYNAMIC
);

750 
	`sqlôeVdbeOp3
(
v
, 
OP_CﬁumnName
, 
i
, 
p2
, 
zCﬁ
, 0);

752 }if–
p
->
•™
.
z
 &&Ö->span.z[0] ){

753 
addr
 = 
	`sqlôeVdbeOp3
(
v
,
OP_CﬁumnName
, 
i
, 
p2
, 
p
->
•™
.
z
,Ö->•™.
n
);

754 
	`sqlôeVdbeCom¥essS∑˚
(
v
, 
addr
);

756 
zName
[30];

757 
	`as£π
–
p
->
›
!=
TK_COLUMN
 || 
pTabLi°
==0 );

758 
	`•rötf
(
zName
, "cﬁumn%d", 
i
+1);

759 
	`sqlôeVdbeOp3
(
v
, 
OP_CﬁumnName
, 
i
, 
p2
, 
zName
, 0);

762 
	}
}

767 c⁄° *
	$£À˘OpName
(
id
){

768 *
z
;

769  
id
 ){

770 
TK_ALL
: 
z
 = "UNION ALL"; ;

771 
TK_INTERSECT
: 
z
 = "INTERSECT"; ;

772 
TK_EXCEPT
: 
z
 = "EXCEPT"; ;

773 : 
z
 = "UNION"; ;

775  
z
;

776 
	}
}

781 
fûlInCﬁumnLi°
(
P¨£
*, 
Sñe˘
*);

787 
TabÀ
 *
	$sqlôeResu…SëOfSñe˘
(
P¨£
 *
pP¨£
, *
zTabName
, 
Sñe˘
 *
pSñe˘
){

788 
TabÀ
 *
pTab
;

789 
i
, 
j
;

790 
Ex¥Li°
 *
pELi°
;

791 
Cﬁumn
 *
aCﬁ
;

793 if–
	`fûlInCﬁumnLi°
(
pP¨£
, 
pSñe˘
) ){

796 
pTab
 = 
	`sqlôeMÆloc
–(
TabÀ
) );

797 if–
pTab
==0 ){

800 
pTab
->
zName
 = 
zTabName
 ? 
	`sqlôeSåDup
(zTabName) : 0;

801 
pELi°
 = 
pSñe˘
->pEList;

802 
pTab
->
nCﬁ
 = 
pELi°
->
nEx¥
;

803 
	`as£π
–
pTab
->
nCﬁ
>0 );

804 
pTab
->
aCﬁ
 =áCﬁ = 
	`sqlôeMÆloc
–’Tab->aCﬁ[0])*pTab->
nCﬁ
 );

805 
i
=0; i<
pTab
->
nCﬁ
; i++){

806 
Ex¥
 *
p
, *
pR
;

807 if–
pELi°
->
a
[
i
].
zName
 ){

808 
aCﬁ
[
i
].
zName
 = 
	`sqlôeSåDup
(
pELi°
->
a
[i].zName);

809 }if–(
p
=
pELi°
->
a
[
i
].
pEx¥
)->
›
==
TK_DOT


810 && (
pR
=
p
->
pRight
)!=0 &&ÖR->
tokí
.
z
 &&ÖR->token.z[0] ){

811 
˙t
;

812 
	`sqlôeSëNSåög
(&
aCﬁ
[
i
].
zName
, 
pR
->
tokí
.
z
,ÖR->tokí.
n
, 0);

813 
j
=
˙t
=0; j<
i
; j++){

814 if–
	`sqlôeSåICmp
(
aCﬁ
[
j
].
zName
,áCﬁ[
i
].zName)==0 ){

815 
n
;

816 
zBuf
[30];

817 
	`•rötf
(
zBuf
,"_%d",++
˙t
);

818 
n
 = 
	`°æí
(
zBuf
);

819 
	`sqlôeSëNSåög
(&
aCﬁ
[
i
].
zName
, 
pR
->
tokí
.
z
,ÖR->tokí.
n
, 
zBuf
,Ç,0);

820 
j
 = -1;

823 }if–
p
->
•™
.
z
 &&Ö->span.z[0] ){

824 
	`sqlôeSëNSåög
(&
pTab
->
aCﬁ
[
i
].
zName
, 
p
->
•™
.
z
,Ö->•™.
n
, 0);

826 
zBuf
[30];

827 
	`•rötf
(
zBuf
, "cﬁumn%d", 
i
+1);

828 
aCﬁ
[
i
].
zName
 = 
	`sqlôeSåDup
(
zBuf
);

830 
	`sqlôeDequŸe
(
aCﬁ
[
i
].
zName
);

832 
pTab
->
iPKey
 = -1;

833  
pTab
;

834 
	}
}

858 
	$fûlInCﬁumnLi°
(
P¨£
 *
pP¨£
, 
Sñe˘
 *
p
){

859 
i
, 
j
, 
k
, 
rc
;

860 
SrcLi°
 *
pTabLi°
;

861 
Ex¥Li°
 *
pELi°
;

862 
TabÀ
 *
pTab
;

864 if–
p
==0 ||Ö->
pSrc
==0 )  1;

865 
pTabLi°
 = 
p
->
pSrc
;

866 
pELi°
 = 
p
->pEList;

870 
i
=0; i<
pTabLi°
->
nSrc
; i++){

871 if–
pTabLi°
->
a
[
i
].
pTab
 ){

875 if–
pTabLi°
->
a
[
i
].
zName
==0 ){

877 
	`as£π
–
pTabLi°
->
a
[
i
].
pSñe˘
!=0 );

878 if–
pTabLi°
->
a
[
i
].
zAlüs
==0 ){

879 
zFakeName
[60];

880 
	`•rötf
(
zFakeName
, "sqlite_subquery_%p_",

881 (*)
pTabLi°
->
a
[
i
].
pSñe˘
);

882 
	`sqlôeSëSåög
(&
pTabLi°
->
a
[
i
].
zAlüs
, 
zFakeName
, 0);

884 
pTabLi°
->
a
[
i
].
pTab
 =ÖTab =

885 
	`sqlôeResu…SëOfSñe˘
(
pP¨£
, 
pTabLi°
->
a
[
i
].
zAlüs
,

886 
pTabLi°
->
a
[
i
].
pSñe˘
);

887 if–
pTab
==0 ){

894 
pTab
->
isTønsõ¡
 = 1;

897 
pTabLi°
->
a
[
i
].
pTab
 =ÖTab =

898 
	`sqlôeLoˇãTabÀ
(
pP¨£
,
pTabLi°
->
a
[
i
].
zName
,pTabLi°->a[i].
zD©aba£
);

899 if–
pTab
==0 ){

902 if–
pTab
->
pSñe˘
 ){

904 if–
	`sqlôeVõwGëCﬁumnNames
(
pP¨£
, 
pTab
) ){

912 if–
pTabLi°
->
a
[
i
].
pSñe˘
==0 ){

913 
pTabLi°
->
a
[
i
].
pSñe˘
 = 
	`sqlôeSñe˘Dup
(
pTab
->pSelect);

921 if–
	`sqlôePro˚ssJoö
(
pP¨£
, 
p
) )  1;

933 
k
=0; k<
pELi°
->
nEx¥
; k++){

934 
Ex¥
 *
pE
 = 
pELi°
->
a
[
k
].
pEx¥
;

935 if–
pE
->
›
==
TK_ALL
 ) ;

936 if–
pE
->
›
==
TK_DOT
 &&ÖE->
pRight
 &&ÖE->pRight->›==
TK_ALL


937 && 
pE
->
pLe·
 &&ÖE->pLe·->
›
==
TK_ID
 ) ;

939 
rc
 = 0;

940 if–
k
<
pELi°
->
nEx¥
 ){

946 
Ex¥Li°_ôem
 *
a
 = 
pELi°
->a;

947 
Ex¥Li°
 *
pNew
 = 0;

948 
k
=0; k<
pELi°
->
nEx¥
; k++){

949 
Ex¥
 *
pE
 = 
a
[
k
].
pEx¥
;

950 if–
pE
->
›
!=
TK_ALL
 &&

951 (
pE
->
›
!=
TK_DOT
 ||ÖE->
pRight
==0 ||ÖE->pRight->›!=
TK_ALL
) ){

954 
pNew
 = 
	`sqlôeEx¥Li°Aµíd
’New, 
a
[
k
].
pEx¥
, 0);

955 
pNew
->
a
[pNew->
nEx¥
-1].
zName
 =á[
k
].zName;

956 
a
[
k
].
pEx¥
 = 0;

957 
a
[
k
].
zName
 = 0;

961 
èbÀSìn
 = 0;

962 *
zTName
;

963 if–
pE
->
›
==
TK_DOT
 &&ÖE->
pLe·
 ){

964 
zTName
 = 
	`sqlôeTabÀNameFromTokí
(&
pE
->
pLe·
->
tokí
);

966 
zTName
 = 0;

968 
i
=0; i<
pTabLi°
->
nSrc
; i++){

969 
TabÀ
 *
pTab
 = 
pTabLi°
->
a
[
i
].pTab;

970 *
zTabName
 = 
pTabLi°
->
a
[
i
].
zAlüs
;

971 if–
zTabName
==0 || zTabName[0]==0 ){

972 
zTabName
 = 
pTab
->
zName
;

974 if–
zTName
 && (
zTabName
==0 || zTabName[0]==0 ||

975 
	`sqlôeSåICmp
(
zTName
, 
zTabName
)!=0) ){

978 
èbÀSìn
 = 1;

979 
j
=0; j<
pTab
->
nCﬁ
; j++){

980 
Ex¥
 *
pEx¥
, *
pLe·
, *
pRight
;

981 *
zName
 = 
pTab
->
aCﬁ
[
j
].zName;

983 if–
i
>0 && (
pTabLi°
->
a
[i-1].
joöty≥
 & 
JT_NATURAL
)!=0 &&

984 
	`cﬁumnIndex
(
pTabLi°
->
a
[
i
-1].
pTab
, 
zName
)>=0 ){

989 if–
i
>0 && 
	`sqlôeIdLi°Index
(
pTabLi°
->
a
[i-1].
pUsög
, 
zName
)>=0 ){

994 
pRight
 = 
	`sqlôeEx¥
(
TK_ID
, 0, 0, 0);

995 if–
pRight
==0 ) ;

996 
pRight
->
tokí
.
z
 = 
zName
;

997 
pRight
->
tokí
.
n
 = 
	`°æí
(
zName
);

998 
pRight
->
tokí
.
dyn
 = 0;

999 if–
zTabName
 && 
pTabLi°
->
nSrc
>1 ){

1000 
pLe·
 = 
	`sqlôeEx¥
(
TK_ID
, 0, 0, 0);

1001 
pEx¥
 = 
	`sqlôeEx¥
(
TK_DOT
, 
pLe·
, 
pRight
, 0);

1002 if–
pEx¥
==0 ) ;

1003 
pLe·
->
tokí
.
z
 = 
zTabName
;

1004 
pLe·
->
tokí
.
n
 = 
	`°æí
(
zTabName
);

1005 
pLe·
->
tokí
.
dyn
 = 0;

1006 
	`sqlôeSëSåög
((**)&
pEx¥
->
•™
.
z
, 
zTabName
, ".", 
zName
, 0);

1007 
pEx¥
->
•™
.
n
 = 
	`°æí
’Ex¥->•™.
z
);

1008 
pEx¥
->
•™
.
dyn
 = 1;

1009 
pEx¥
->
tokí
.
z
 = 0;

1010 
pEx¥
->
tokí
.
n
 = 0;

1011 
pEx¥
->
tokí
.
dyn
 = 0;

1013 
pEx¥
 = 
pRight
;

1014 
pEx¥
->
•™
 =ÖEx¥->
tokí
;

1016 
pNew
 = 
	`sqlôeEx¥Li°Aµíd
’New, 
pEx¥
, 0);

1019 if–!
èbÀSìn
 ){

1020 if–
zTName
 ){

1021 
	`sqlôeEº‹Msg
(
pP¨£
, "nÿsuchÅabÀ: %s", 
zTName
);

1023 
	`sqlôeEº‹Msg
(
pP¨£
, "noÅables specified");

1025 
rc
 = 1;

1027 
	`sqlôeFªe
(
zTName
);

1030 
	`sqlôeEx¥Li°Dñëe
(
pELi°
);

1031 
p
->
pELi°
 = 
pNew
;

1033  
rc
;

1034 
	}
}

1049 
	$sqlôeSñe˘Unböd
(
Sñe˘
 *
p
){

1050 
i
;

1051 
SrcLi°
 *
pSrc
 = 
p
->pSrc;

1052 
TabÀ
 *
pTab
;

1053 if–
p
==0 ) ;

1054 
i
=0; i<
pSrc
->
nSrc
; i++){

1055 if–(
pTab
 = 
pSrc
->
a
[
i
].pTab)!=0 ){

1056 if–
pTab
->
isTønsõ¡
 ){

1057 
	`sqlôeDñëeTabÀ
(0, 
pTab
);

1059 
pSrc
->
a
[
i
].
pTab
 = 0;

1060 if–
pSrc
->
a
[
i
].
pSñe˘
 ){

1061 
	`sqlôeSñe˘Unböd
(
pSrc
->
a
[
i
].
pSñe˘
);

1065 
	}
}

1087 
	$m©chOrdîbyToCﬁumn
(

1088 
P¨£
 *
pP¨£
,

1089 
Sñe˘
 *
pSñe˘
,

1090 
Ex¥Li°
 *
pOrdîBy
,

1091 
iTabÀ
,

1092 
mu°Com∂ëe


1094 
nEº
 = 0;

1095 
i
, 
j
;

1096 
Ex¥Li°
 *
pELi°
;

1098 if–
pSñe˘
==0 || 
pOrdîBy
==0 )  1;

1099 if–
mu°Com∂ëe
 ){

1100 
i
=0; i<
pOrdîBy
->
nEx¥
; i++){ÖOrdîBy->
a
[i].
d⁄e
 = 0; }

1102 if–
	`fûlInCﬁumnLi°
(
pP¨£
, 
pSñe˘
) ){

1105 if–
pSñe˘
->
pPri‹
 ){

1106 if–
	`m©chOrdîbyToCﬁumn
(
pP¨£
, 
pSñe˘
->
pPri‹
, 
pOrdîBy
, 
iTabÀ
, 0) ){

1110 
pELi°
 = 
pSñe˘
->pEList;

1111 
i
=0; i<
pOrdîBy
->
nEx¥
; i++){

1112 
Ex¥
 *
pE
 = 
pOrdîBy
->
a
[
i
].
pEx¥
;

1113 
iCﬁ
 = -1;

1114 if–
pOrdîBy
->
a
[
i
].
d⁄e
 ) ;

1115 if–
	`sqlôeEx¥IsI¡egî
(
pE
, &
iCﬁ
) ){

1116 if–
iCﬁ
<=0 || iCﬁ>
pELi°
->
nEx¥
 ){

1117 
	`sqlôeEº‹Msg
(
pP¨£
,

1119 
iCﬁ
, 
pELi°
->
nEx¥
);

1120 
nEº
++;

1123 if–!
mu°Com∂ëe
 ) ;

1124 
iCﬁ
--;

1126 
j
=0; 
iCﬁ
<0 && j<
pELi°
->
nEx¥
; j++){

1127 if–
pELi°
->
a
[
j
].
zName
 && (
pE
->
›
==
TK_ID
 ||ÖE->›==
TK_STRING
) ){

1128 *
zName
, *
zLabñ
;

1129 
zName
 = 
pELi°
->
a
[
j
].zName;

1130 
	`as£π
–
pE
->
tokí
.
z
 );

1131 
zLabñ
 = 
	`sqlôeSåNDup
(
pE
->
tokí
.
z
,ÖE->tokí.
n
);

1132 
	`sqlôeDequŸe
(
zLabñ
);

1133 if–
	`sqlôeSåICmp
(
zName
, 
zLabñ
)==0 ){

1134 
iCﬁ
 = 
j
;

1136 
	`sqlôeFªe
(
zLabñ
);

1138 if–
iCﬁ
<0 && 
	`sqlôeEx¥Com∑ª
(
pE
, 
pELi°
->
a
[
j
].
pEx¥
) ){

1139 
iCﬁ
 = 
j
;

1142 if–
iCﬁ
>=0 ){

1143 
pE
->
›
 = 
TK_COLUMN
;

1144 
pE
->
iCﬁumn
 = 
iCﬁ
;

1145 
pE
->
iTabÀ
 = iTable;

1146 
pOrdîBy
->
a
[
i
].
d⁄e
 = 1;

1148 if–
iCﬁ
<0 && 
mu°Com∂ëe
 ){

1149 
	`sqlôeEº‹Msg
(
pP¨£
,

1150 "ORDER BYÅîmÇumbî %d d€†nŸ m©chányÑesu… cﬁumn", 
i
+1);

1151 
nEº
++;

1155  
nEº
;

1156 
	}
}

1162 
Vdbe
 *
	$sqlôeGëVdbe
(
P¨£
 *
pP¨£
){

1163 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1164 if–
v
==0 ){

1165 
v
 = 
pP¨£
->
pVdbe
 = 
	`sqlôeVdbeCª©e
’P¨£->
db
);

1167  
v
;

1168 
	}
}

1197 
	$mu…iSñe˘S‹tOrdî
(
Sñe˘
 *
p
, 
Ex¥Li°
 *
pOrdîBy
){

1198 
i
;

1199 
Ex¥Li°
 *
pELi°
;

1200 if–
pOrdîBy
==0 ) ;

1201 if–
p
==0 ){

1202 
i
=0; i<
pOrdîBy
->
nEx¥
; i++){

1203 
pOrdîBy
->
a
[
i
].
pEx¥
->
d©aTy≥
 = 
SQLITE_SO_TEXT
;

1207 
	`mu…iSñe˘S‹tOrdî
(
p
->
pPri‹
, 
pOrdîBy
);

1208 
pELi°
 = 
p
->pEList;

1209 
i
=0; i<
pOrdîBy
->
nEx¥
; i++){

1210 
Ex¥
 *
pE
 = 
pOrdîBy
->
a
[
i
].
pEx¥
;

1211 if–
pE
->
d©aTy≥
==
SQLITE_SO_NUM
 ) ;

1212 
	`as£π
–
pE
->
iCﬁumn
>=0 );

1213 if–
pELi°
->
nEx¥
>
pE
->
iCﬁumn
 ){

1214 
pE
->
d©aTy≥
 = 
	`sqlôeEx¥Ty≥
(
pELi°
->
a
[pE->
iCﬁumn
].
pEx¥
);

1217 
	}
}

1237 
	$compuãLimôRegi°îs
(
P¨£
 *
pP¨£
, 
Sñe˘
 *
p
){

1247 if–
p
->
nLimô
>=0 ){

1248 
iMem
 = 
pP¨£
->
nMem
++;

1249 
Vdbe
 *
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

1250 if–
v
==0 ) ;

1251 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, -
p
->
nLimô
, 0);

1252 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemSt‹e
, 
iMem
, 1);

1253 
p
->
iLimô
 = 
iMem
;

1255 if–
p
->
nOff£t
>0 ){

1256 
iMem
 = 
pP¨£
->
nMem
++;

1257 
Vdbe
 *
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

1258 if–
v
==0 ) ;

1259 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, -
p
->
nOff£t
, 0);

1260 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemSt‹e
, 
iMem
, 1);

1261 
p
->
iOff£t
 = 
iMem
;

1263 
	}
}

1295 
	$mu…iSñe˘
(
P¨£
 *
pP¨£
, 
Sñe˘
 *
p
, 
eDe°
, 
iP¨m
){

1296 
rc
;

1297 
Sñe˘
 *
pPri‹
;

1298 
Vdbe
 *
v
;

1303 if–
p
==0 ||Ö->
pPri‹
==0 )  1;

1304 
pPri‹
 = 
p
->pPrior;

1305 if–
pPri‹
->
pOrdîBy
 ){

1306 
	`sqlôeEº‹Msg
(
pP¨£
,"ORDER BY clause should comeáfter %sÇot before",

1307 
	`£À˘OpName
(
p
->
›
));

1310 if–
pPri‹
->
nLimô
>=0 ||ÖPri‹->
nOff£t
>0 ){

1311 
	`sqlôeEº‹Msg
(
pP¨£
,"LIMIT clause should comeáfter %sÇot before",

1312 
	`£À˘OpName
(
p
->
›
));

1318 
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

1319 if–
v
==0 )  1;

1323 if–
eDe°
==
SRT_TempTabÀ
 ){

1324 
	`sqlôeVdbeAddOp
(
v
, 
OP_O≥nTemp
, 
iP¨m
, 0);

1325 
eDe°
 = 
SRT_TabÀ
;

1330  
p
->
›
 ){

1331 
TK_ALL
: {

1332 if–
p
->
pOrdîBy
==0 ){

1333 
pPri‹
->
nLimô
 = 
p
->nLimit;

1334 
pPri‹
->
nOff£t
 = 
p
->nOffset;

1335 
rc
 = 
	`sqlôeSñe˘
(
pP¨£
, 
pPri‹
, 
eDe°
, 
iP¨m
, 0, 0, 0);

1336 if–
rc
 ) Ñc;

1337 
p
->
pPri‹
 = 0;

1338 
p
->
iLimô
 = 
pPri‹
->iLimit;

1339 
p
->
iOff£t
 = 
pPri‹
->iOffset;

1340 
p
->
nLimô
 = -1;

1341 
p
->
nOff£t
 = 0;

1342 
rc
 = 
	`sqlôeSñe˘
(
pP¨£
, 
p
, 
eDe°
, 
iP¨m
, 0, 0, 0);

1343 
p
->
pPri‹
 =ÖPrior;

1344 if–
rc
 ) Ñc;

1349 
TK_EXCEPT
:

1350 
TK_UNION
: {

1351 
uni⁄Tab
;

1352 
›
;

1353 
¥i‹Op
;

1354 
nLimô
, 
nOff£t
;

1355 
Ex¥Li°
 *
pOrdîBy
;

1357 
¥i‹Op
 = 
p
->
›
==
TK_ALL
 ? 
SRT_TabÀ
 : 
SRT_Uni⁄
;

1358 if–
eDe°
==
¥i‹Op
 && 
p
->
pOrdîBy
==0 &&Ö->
nLimô
<0 &&Ö->
nOff£t
==0 ){

1362 
uni⁄Tab
 = 
iP¨m
;

1367 
uni⁄Tab
 = 
pP¨£
->
nTab
++;

1368 if–
p
->
pOrdîBy


1369 && 
	`m©chOrdîbyToCﬁumn
(
pP¨£
, 
p
,Ö->
pOrdîBy
, 
uni⁄Tab
, 1) ){

1372 if–
p
->
›
!=
TK_ALL
 ){

1373 
	`sqlôeVdbeAddOp
(
v
, 
OP_O≥nTemp
, 
uni⁄Tab
, 1);

1374 
	`sqlôeVdbeAddOp
(
v
, 
OP_KeyAsD©a
, 
uni⁄Tab
, 1);

1376 
	`sqlôeVdbeAddOp
(
v
, 
OP_O≥nTemp
, 
uni⁄Tab
, 0);

1382 
rc
 = 
	`sqlôeSñe˘
(
pP¨£
, 
pPri‹
, 
¥i‹Op
, 
uni⁄Tab
, 0, 0, 0);

1383 if–
rc
 ) Ñc;

1387  
p
->
›
 ){

1388 
TK_EXCEPT
: 
›
 = 
SRT_Ex˚±
; ;

1389 
TK_UNION
: 
›
 = 
SRT_Uni⁄
; ;

1390 
TK_ALL
: 
›
 = 
SRT_TabÀ
; ;

1392 
p
->
pPri‹
 = 0;

1393 
pOrdîBy
 = 
p
->pOrderBy;

1394 
p
->
pOrdîBy
 = 0;

1395 
nLimô
 = 
p
->nLimit;

1396 
p
->
nLimô
 = -1;

1397 
nOff£t
 = 
p
->nOffset;

1398 
p
->
nOff£t
 = 0;

1399 
rc
 = 
	`sqlôeSñe˘
(
pP¨£
, 
p
, 
›
, 
uni⁄Tab
, 0, 0, 0);

1400 
p
->
pPri‹
 =ÖPrior;

1401 
p
->
pOrdîBy
 =ÖOrderBy;

1402 
p
->
nLimô
 =ÇLimit;

1403 
p
->
nOff£t
 =ÇOffset;

1404 if–
rc
 ) Ñc;

1409 if–
eDe°
!=
¥i‹Op
 || 
uni⁄Tab
!=
iP¨m
 ){

1410 
iC⁄t
, 
iBªak
, 
iSèπ
;

1411 
	`as£π
–
p
->
pELi°
 );

1412 if–
eDe°
==
SRT_CÆlback
 ){

1413 
	`gíî©eCﬁumnNames
(
pP¨£
, 0, 
p
->
pELi°
);

1414 
	`gíî©eCﬁumnTy≥s
(
pP¨£
, 
p
->
pSrc
,Ö->
pELi°
);

1416 
iBªak
 = 
	`sqlôeVdbeMakeLabñ
(
v
);

1417 
iC⁄t
 = 
	`sqlôeVdbeMakeLabñ
(
v
);

1418 
	`sqlôeVdbeAddOp
(
v
, 
OP_Rewöd
, 
uni⁄Tab
, 
iBªak
);

1419 
	`compuãLimôRegi°îs
(
pP¨£
, 
p
);

1420 
iSèπ
 = 
	`sqlôeVdbeCuºítAddr
(
v
);

1421 
	`mu…iSñe˘S‹tOrdî
(
p
,Ö->
pOrdîBy
);

1422 
rc
 = 
	`£À˘I¬îLo›
(
pP¨£
, 
p
,Ö->
pELi°
, 
uni⁄Tab
,Ö->pELi°->
nEx¥
,

1423 
p
->
pOrdîBy
, -1, 
eDe°
, 
iP¨m
,

1424 
iC⁄t
, 
iBªak
);

1425 if–
rc
 )  1;

1426 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
iC⁄t
);

1427 
	`sqlôeVdbeAddOp
(
v
, 
OP_Next
, 
uni⁄Tab
, 
iSèπ
);

1428 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
iBªak
);

1429 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
uni⁄Tab
, 0);

1430 if–
p
->
pOrdîBy
 ){

1431 
	`gíî©eS‹tTaû
(
p
, 
v
,Ö->
pELi°
->
nEx¥
, 
eDe°
, 
iP¨m
);

1436 
TK_INTERSECT
: {

1437 
èb1
, 
èb2
;

1438 
iC⁄t
, 
iBªak
, 
iSèπ
;

1439 
nLimô
, 
nOff£t
;

1445 
èb1
 = 
pP¨£
->
nTab
++;

1446 
èb2
 = 
pP¨£
->
nTab
++;

1447 if–
p
->
pOrdîBy
 && 
	`m©chOrdîbyToCﬁumn
(
pP¨£
,p,p->pOrdîBy,
èb1
,1) ){

1450 
	`sqlôeVdbeAddOp
(
v
, 
OP_O≥nTemp
, 
èb1
, 1);

1451 
	`sqlôeVdbeAddOp
(
v
, 
OP_KeyAsD©a
, 
èb1
, 1);

1455 
rc
 = 
	`sqlôeSñe˘
(
pP¨£
, 
pPri‹
, 
SRT_Uni⁄
, 
èb1
, 0, 0, 0);

1456 if–
rc
 ) Ñc;

1460 
	`sqlôeVdbeAddOp
(
v
, 
OP_O≥nTemp
, 
èb2
, 1);

1461 
	`sqlôeVdbeAddOp
(
v
, 
OP_KeyAsD©a
, 
èb2
, 1);

1462 
p
->
pPri‹
 = 0;

1463 
nLimô
 = 
p
->nLimit;

1464 
p
->
nLimô
 = -1;

1465 
nOff£t
 = 
p
->nOffset;

1466 
p
->
nOff£t
 = 0;

1467 
rc
 = 
	`sqlôeSñe˘
(
pP¨£
, 
p
, 
SRT_Uni⁄
, 
èb2
, 0, 0, 0);

1468 
p
->
pPri‹
 =ÖPrior;

1469 
p
->
nLimô
 =ÇLimit;

1470 
p
->
nOff£t
 =ÇOffset;

1471 if–
rc
 ) Ñc;

1476 
	`as£π
–
p
->
pELi°
 );

1477 if–
eDe°
==
SRT_CÆlback
 ){

1478 
	`gíî©eCﬁumnNames
(
pP¨£
, 0, 
p
->
pELi°
);

1479 
	`gíî©eCﬁumnTy≥s
(
pP¨£
, 
p
->
pSrc
,Ö->
pELi°
);

1481 
iBªak
 = 
	`sqlôeVdbeMakeLabñ
(
v
);

1482 
iC⁄t
 = 
	`sqlôeVdbeMakeLabñ
(
v
);

1483 
	`sqlôeVdbeAddOp
(
v
, 
OP_Rewöd
, 
èb1
, 
iBªak
);

1484 
	`compuãLimôRegi°îs
(
pP¨£
, 
p
);

1485 
iSèπ
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_FuŒKey
, 
èb1
, 0);

1486 
	`sqlôeVdbeAddOp
(
v
, 
OP_NŸFound
, 
èb2
, 
iC⁄t
);

1487 
	`mu…iSñe˘S‹tOrdî
(
p
,Ö->
pOrdîBy
);

1488 
rc
 = 
	`£À˘I¬îLo›
(
pP¨£
, 
p
,Ö->
pELi°
, 
èb1
,Ö->pELi°->
nEx¥
,

1489 
p
->
pOrdîBy
, -1, 
eDe°
, 
iP¨m
,

1490 
iC⁄t
, 
iBªak
);

1491 if–
rc
 )  1;

1492 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
iC⁄t
);

1493 
	`sqlôeVdbeAddOp
(
v
, 
OP_Next
, 
èb1
, 
iSèπ
);

1494 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
iBªak
);

1495 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
èb2
, 0);

1496 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
èb1
, 0);

1497 if–
p
->
pOrdîBy
 ){

1498 
	`gíî©eS‹tTaû
(
p
, 
v
,Ö->
pELi°
->
nEx¥
, 
eDe°
, 
iP¨m
);

1503 
	`as£π
–
p
->
pELi°
 && 
pPri‹
->pEList );

1504 if–
p
->
pELi°
->
nEx¥
!=
pPri‹
->pEList->nExpr ){

1505 
	`sqlôeEº‹Msg
(
pP¨£
, "SELECTsÅoÅheÜeftándÑight of %s"

1506 " dÿnŸ havêthêßmênumbî o‡ªsu… cﬁumns", 
	`£À˘OpName
(
p
->
›
));

1510 
	}
}

1525 
sub°Ex¥Li°
(
Ex¥Li°
*,,ExprList*);

1526 
	$sub°Ex¥
(
Ex¥
 *
pEx¥
, 
iTabÀ
, 
Ex¥Li°
 *
pELi°
){

1527 if–
pEx¥
==0 ) ;

1528 if–
pEx¥
->
›
==
TK_COLUMN
 &&ÖEx¥->
iTabÀ
==iTable ){

1529 if–
pEx¥
->
iCﬁumn
<0 ){

1530 
pEx¥
->
›
 = 
TK_NULL
;

1532 
Ex¥
 *
pNew
;

1533 
	`as£π
–
pELi°
!=0 && 
pEx¥
->
iCﬁumn
<pELi°->
nEx¥
 );

1534 
	`as£π
–
pEx¥
->
pLe·
==0 &&ÖEx¥->
pRight
==0 &&ÖEx¥->
pLi°
==0 );

1535 
pNew
 = 
pELi°
->
a
[
pEx¥
->
iCﬁumn
].pExpr;

1536 
	`as£π
–
pNew
!=0 );

1537 
pEx¥
->
›
 = 
pNew
->op;

1538 
pEx¥
->
d©aTy≥
 = 
pNew
->dataType;

1539 
	`as£π
–
pEx¥
->
pLe·
==0 );

1540 
pEx¥
->
pLe·
 = 
	`sqlôeEx¥Dup
(
pNew
->pLeft);

1541 
	`as£π
–
pEx¥
->
pRight
==0 );

1542 
pEx¥
->
pRight
 = 
	`sqlôeEx¥Dup
(
pNew
->pRight);

1543 
	`as£π
–
pEx¥
->
pLi°
==0 );

1544 
pEx¥
->
pLi°
 = 
	`sqlôeEx¥Li°Dup
(
pNew
->pList);

1545 
pEx¥
->
iTabÀ
 = 
pNew
->iTable;

1546 
pEx¥
->
iCﬁumn
 = 
pNew
->iColumn;

1547 
pEx¥
->
iAgg
 = 
pNew
->iAgg;

1548 
	`sqlôeTokíC›y
(&
pEx¥
->
tokí
, &
pNew
->token);

1549 
	`sqlôeTokíC›y
(&
pEx¥
->
•™
, &
pNew
->span);

1552 
	`sub°Ex¥
(
pEx¥
->
pLe·
, 
iTabÀ
, 
pELi°
);

1553 
	`sub°Ex¥
(
pEx¥
->
pRight
, 
iTabÀ
, 
pELi°
);

1554 
	`sub°Ex¥Li°
(
pEx¥
->
pLi°
, 
iTabÀ
, 
pELi°
);

1556 
	}
}

1558 
	$sub°Ex¥Li°
(
Ex¥Li°
 *
pLi°
, 
iTabÀ
, Ex¥Li° *
pELi°
){

1559 
i
;

1560 if–
pLi°
==0 ) ;

1561 
i
=0; i<
pLi°
->
nEx¥
; i++){

1562 
	`sub°Ex¥
(
pLi°
->
a
[
i
].
pEx¥
, 
iTabÀ
, 
pELi°
);

1564 
	}
}

1635 
	$Ê©ãnSubquîy
(

1636 
P¨£
 *
pP¨£
,

1637 
Sñe˘
 *
p
,

1638 
iFrom
,

1639 
isAgg
,

1640 
subquîyIsAgg


1642 
Sñe˘
 *
pSub
;

1643 
SrcLi°
 *
pSrc
;

1644 
SrcLi°
 *
pSubSrc
;

1645 
Ex¥Li°
 *
pLi°
;

1646 
iP¨ít
;

1647 
i
;

1648 
Ex¥
 *
pWhîe
;

1652 if–
p
==0 )  0;

1653 
pSrc
 = 
p
->pSrc;

1654 
	`as£π
–
pSrc
 && 
iFrom
>=0 && iFrom<pSrc->
nSrc
 );

1655 
pSub
 = 
pSrc
->
a
[
iFrom
].
pSñe˘
;

1656 
	`as£π
–
pSub
!=0 );

1657 if–
isAgg
 && 
subquîyIsAgg
 )  0;

1658 if–
subquîyIsAgg
 && 
pSrc
->
nSrc
>1 )  0;

1659 
pSubSrc
 = 
pSub
->
pSrc
;

1660 
	`as£π
–
pSubSrc
 );

1661 if–
pSubSrc
->
nSrc
==0 )  0;

1662 if–(
pSub
->
isDi°ö˘
 ||ÖSub->
nLimô
>=0Ë&& (
pSrc
->
nSrc
>1 || 
isAgg
) ){

1665 if–(
p
->
isDi°ö˘
 ||Ö->
nLimô
>=0Ë&& 
subquîyIsAgg
 )  0;

1666 if–
p
->
pOrdîBy
 && 
pSub
->pOrderBy )  0;

1680 if–
pSubSrc
->
nSrc
>1 && 
iFrom
>0 && (
pSrc
->
a
[iFrom-1].
joöty≥
 & 
JT_OUTER
)!=0 ){

1697 if–
iFrom
>0 && (
pSrc
->
a
[iFrom-1].
joöty≥
 & 
JT_OUTER
)!=0

1698 && 
pSub
->
pWhîe
!=0 ){

1714 
iP¨ít
 = 
pSrc
->
a
[
iFrom
].
iCurs‹
;

1716 
nSubSrc
 = 
pSubSrc
->
nSrc
;

1717 
joöty≥
 = 
pSrc
->
a
[
iFrom
].jointype;

1719 if–
pSrc
->
a
[
iFrom
].
pTab
 &&ÖSrc->a[iFrom].pTab->
isTønsõ¡
 ){

1720 
	`sqlôeDñëeTabÀ
(0, 
pSrc
->
a
[
iFrom
].
pTab
);

1722 
	`sqlôeFªe
(
pSrc
->
a
[
iFrom
].
zD©aba£
);

1723 
	`sqlôeFªe
(
pSrc
->
a
[
iFrom
].
zName
);

1724 
	`sqlôeFªe
(
pSrc
->
a
[
iFrom
].
zAlüs
);

1725 if–
nSubSrc
>1 ){

1726 
exåa
 = 
nSubSrc
 - 1;

1727 
i
=1; i<
nSubSrc
; i++){

1728 
pSrc
 = 
	`sqlôeSrcLi°Aµíd
(pSrc, 0, 0);

1730 
p
->
pSrc
 =ÖSrc;

1731 
i
=
pSrc
->
nSrc
-1; i-
exåa
>=
iFrom
; i--){

1732 
pSrc
->
a
[
i
] =ÖSrc->a[i-
exåa
];

1735 
i
=0; i<
nSubSrc
; i++){

1736 
pSrc
->
a
[
i
+
iFrom
] = 
pSubSrc
->a[i];

1737 
	`mem£t
(&
pSubSrc
->
a
[
i
], 0, (pSubSrc->a[i]));

1739 
pSrc
->
a
[
iFrom
+
nSubSrc
-1].
joöty≥
 = jointype;

1754 
	`sub°Ex¥Li°
(
p
->
pELi°
, 
iP¨ít
, 
pSub
->pEList);

1755 
pLi°
 = 
p
->
pELi°
;

1756 
i
=0; i<
pLi°
->
nEx¥
; i++){

1757 
Ex¥
 *
pEx¥
;

1758 if–
pLi°
->
a
[
i
].
zName
==0 && (
pEx¥
 =ÖLi°->a[i].pEx¥)->
•™
.
z
!=0 ){

1759 
pLi°
->
a
[
i
].
zName
 = 
	`sqlôeSåNDup
(
pEx¥
->
•™
.
z
,ÖEx¥->•™.
n
);

1762 if–
isAgg
 ){

1763 
	`sub°Ex¥Li°
(
p
->
pGroupBy
, 
iP¨ít
, 
pSub
->
pELi°
);

1764 
	`sub°Ex¥
(
p
->
pHavög
, 
iP¨ít
, 
pSub
->
pELi°
);

1766 if–
pSub
->
pOrdîBy
 ){

1767 
	`as£π
–
p
->
pOrdîBy
==0 );

1768 
p
->
pOrdîBy
 = 
pSub
->pOrderBy;

1769 
pSub
->
pOrdîBy
 = 0;

1770 }if–
p
->
pOrdîBy
 ){

1771 
	`sub°Ex¥Li°
(
p
->
pOrdîBy
, 
iP¨ít
, 
pSub
->
pELi°
);

1773 if–
pSub
->
pWhîe
 ){

1774 
pWhîe
 = 
	`sqlôeEx¥Dup
(
pSub
->pWhere);

1776 
pWhîe
 = 0;

1778 if–
subquîyIsAgg
 ){

1779 
	`as£π
–
p
->
pHavög
==0 );

1780 
p
->
pHavög
 =Ö->
pWhîe
;

1781 
p
->
pWhîe
 =ÖWhere;

1782 
	`sub°Ex¥
(
p
->
pHavög
, 
iP¨ít
, 
pSub
->
pELi°
);

1783 if–
pSub
->
pHavög
 ){

1784 
Ex¥
 *
pHavög
 = 
	`sqlôeEx¥Dup
(
pSub
->pHaving);

1785 if–
p
->
pHavög
 ){

1786 
p
->
pHavög
 = 
	`sqlôeEx¥
(
TK_AND
,Ö->pHaving,ÖHaving, 0);

1788 
p
->
pHavög
 =ÖHaving;

1791 
	`as£π
–
p
->
pGroupBy
==0 );

1792 
p
->
pGroupBy
 = 
	`sqlôeEx¥Li°Dup
(
pSub
->pGroupBy);

1793 }if–
p
->
pWhîe
==0 ){

1794 
p
->
pWhîe
 =ÖWhere;

1796 
	`sub°Ex¥
(
p
->
pWhîe
, 
iP¨ít
, 
pSub
->
pELi°
);

1797 if–
pWhîe
 ){

1798 
p
->
pWhîe
 = 
	`sqlôeEx¥
(
TK_AND
,Ö->pWhere,ÖWhere, 0);

1805 
p
->
isDi°ö˘
 =Ö->isDi°ö˘ || 
pSub
->isDistinct;

1810 if–
pSub
->
nLimô
>=0 ){

1811 if–
p
->
nLimô
<0 ){

1812 
p
->
nLimô
 = 
pSub
->nLimit;

1813 }if–
p
->
nLimô
+p->
nOff£t
 > 
pSub
->nLimit+pSub->nOffset ){

1814 
p
->
nLimô
 = 
pSub
->nLimô +ÖSub->
nOff£t
 -Ö->nOffset;

1817 
p
->
nOff£t
 +
pSub
->nOffset;

1822 
	`sqlôeSñe˘Dñëe
(
pSub
);

1824 
	}
}

1846 
	$sim∂eMöMaxQuîy
(
P¨£
 *
pP¨£
, 
Sñe˘
 *
p
, 
eDe°
, 
iP¨m
){

1847 
Ex¥
 *
pEx¥
;

1848 
iCﬁ
;

1849 
TabÀ
 *
pTab
;

1850 
Index
 *
pIdx
;

1851 
ba£
;

1852 
Vdbe
 *
v
;

1853 
£ekOp
;

1854 
c⁄t
;

1855 
Ex¥Li°
 *
pELi°
, *
pLi°
, 
eLi°
;

1856 
Ex¥Li°_ôem
 
eLi°Iãm
;

1857 
SrcLi°
 *
pSrc
;

1863 if–
p
->
pGroupBy
 ||Ö->
pHavög
 ||Ö->
pWhîe
 )  0;

1864 
pSrc
 = 
p
->pSrc;

1865 if–
pSrc
->
nSrc
!=1 )  0;

1866 
pELi°
 = 
p
->pEList;

1867 if–
pELi°
->
nEx¥
!=1 )  0;

1868 
pEx¥
 = 
pELi°
->
a
[0].pExpr;

1869 if–
pEx¥
->
›
!=
TK_AGG_FUNCTION
 )  0;

1870 
pLi°
 = 
pEx¥
->pList;

1871 if–
pLi°
==0 ||ÖLi°->
nEx¥
!=1 )  0;

1872 if–
pEx¥
->
tokí
.
n
!=3 )  0;

1873 if–
	`sqlôeSåNICmp
(
pEx¥
->
tokí
.
z
,"min",3)==0 ){

1874 
£ekOp
 = 
OP_Rewöd
;

1875 }if–
	`sqlôeSåNICmp
(
pEx¥
->
tokí
.
z
,"max",3)==0 ){

1876 
£ekOp
 = 
OP_La°
;

1880 
pEx¥
 = 
pLi°
->
a
[0].pExpr;

1881 if–
pEx¥
->
›
!=
TK_COLUMN
 )  0;

1882 
iCﬁ
 = 
pEx¥
->
iCﬁumn
;

1883 
pTab
 = 
pSrc
->
a
[0].pTab;

1891 if–
iCﬁ
<0 ){

1892 
pIdx
 = 0;

1894 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

1895 
	`as£π
–
pIdx
->
nCﬁumn
>=1 );

1896 if–
pIdx
->
aiCﬁumn
[0]==
iCﬁ
 ) ;

1898 if–
pIdx
==0 )  0;

1905 
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

1906 if–
v
==0 )  0;

1907 if–
eDe°
==
SRT_CÆlback
 ){

1908 
	`gíî©eCﬁumnTy≥s
(
pP¨£
, 
p
->
pSrc
,Ö->
pELi°
);

1913 if–
eDe°
==
SRT_TempTabÀ
 ){

1914 
	`sqlôeVdbeAddOp
(
v
, 
OP_O≥nTemp
, 
iP¨m
, 0);

1922 
	`sqlôeCodeVîifySchema
(
pP¨£
, 
pTab
->
iDb
);

1923 
ba£
 = 
pSrc
->
a
[0].
iCurs‹
;

1924 
	`compuãLimôRegi°îs
(
pP¨£
, 
p
);

1925 if–
pSrc
->
a
[0].
pSñe˘
==0 ){

1926 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
pTab
->
iDb
, 0);

1927 
	`sqlôeVdbeOp3
(
v
, 
OP_O≥nRód
, 
ba£
, 
pTab
->
äum
,ÖTab->
zName
, 0);

1929 
c⁄t
 = 
	`sqlôeVdbeMakeLabñ
(
v
);

1930 if–
pIdx
==0 ){

1931 
	`sqlôeVdbeAddOp
(
v
, 
£ekOp
, 
ba£
, 0);

1933 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
pIdx
->
iDb
, 0);

1934 
	`sqlôeVdbeOp3
(
v
, 
OP_O≥nRód
, 
ba£
+1, 
pIdx
->
äum
,ÖIdx->
zName
, 
P3_STATIC
);

1935 if–
£ekOp
==
OP_Rewöd
 ){

1936 
	`sqlôeVdbeAddOp
(
v
, 
OP_Såög
, 0, 0);

1937 
	`sqlôeVdbeAddOp
(
v
, 
OP_MakeKey
, 1, 0);

1938 
	`sqlôeVdbeAddOp
(
v
, 
OP_In¸Key
, 0, 0);

1939 
£ekOp
 = 
OP_MoveTo
;

1941 
	`sqlôeVdbeAddOp
(
v
, 
£ekOp
, 
ba£
+1, 0);

1942 
	`sqlôeVdbeAddOp
(
v
, 
OP_IdxRe˙o
, 
ba£
+1, 0);

1943 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
ba£
+1, 0);

1944 
	`sqlôeVdbeAddOp
(
v
, 
OP_MoveTo
, 
ba£
, 0);

1946 
eLi°
.
nEx¥
 = 1;

1947 
	`mem£t
(&
eLi°Iãm
, 0, (eListItem));

1948 
eLi°
.
a
 = &
eLi°Iãm
;

1949 
eLi°
.
a
[0].
pEx¥
 =ÖExpr;

1950 
	`£À˘I¬îLo›
(
pP¨£
, 
p
, &
eLi°
, 0, 0, 0, -1, 
eDe°
, 
iP¨m
, 
c⁄t
, cont);

1951 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
c⁄t
);

1952 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
ba£
, 0);

1955 
	}
}

2009 
	$sqlôeSñe˘
(

2010 
P¨£
 *
pP¨£
,

2011 
Sñe˘
 *
p
,

2012 
eDe°
,

2013 
iP¨m
,

2014 
Sñe˘
 *
pP¨ít
,

2015 
∑ª¡Tab
,

2016 *
pP¨ítAgg


2018 
i
;

2019 
WhîeInfo
 *
pWInfo
;

2020 
Vdbe
 *
v
;

2021 
isAgg
 = 0;

2022 
Ex¥Li°
 *
pELi°
;

2023 
SrcLi°
 *
pTabLi°
;

2024 
Ex¥
 *
pWhîe
;

2025 
Ex¥Li°
 *
pOrdîBy
;

2026 
Ex¥Li°
 *
pGroupBy
;

2027 
Ex¥
 *
pHavög
;

2028 
isDi°ö˘
;

2029 
di°ö˘
;

2030 
rc
 = 1;

2032 if–
sqlôe_mÆloc_Áûed
 || 
pP¨£
->
nEº
 || 
p
==0 )  1;

2037 if–
p
->
pPri‹
 ){

2038  
	`mu…iSñe˘
(
pP¨£
, 
p
, 
eDe°
, 
iP¨m
);

2043 
pTabLi°
 = 
p
->
pSrc
;

2044 
pWhîe
 = 
p
->pWhere;

2045 
pOrdîBy
 = 
p
->pOrderBy;

2046 
pGroupBy
 = 
p
->pGroupBy;

2047 
pHavög
 = 
p
->pHaving;

2048 
isDi°ö˘
 = 
p
->isDistinct;

2052 
	`sqlôeSrcLi°AssignCurs‹s
(
pP¨£
, 
pTabLi°
);

2058 if–
pP¨£
->
nEº
>0 ) 
£À˘_íd
;

2064 if–
	`fûlInCﬁumnLi°
(
pP¨£
, 
p
) ){

2065 
£À˘_íd
;

2067 
pWhîe
 = 
p
->pWhere;

2068 
pELi°
 = 
p
->pEList;

2069 if–
pELi°
==0 ) 
£À˘_íd
;

2074 if–(
eDe°
==
SRT_Mem
 ||ÉDe°==
SRT_Së
Ë&& 
pELi°
->
nEx¥
>1 ){

2075 
	`sqlôeEº‹Msg
(
pP¨£
, "onlyá singleÑesultállowed for "

2077 
£À˘_íd
;

2082  
eDe°
 ){

2083 
SRT_Uni⁄
:

2084 
SRT_Ex˚±
:

2085 
SRT_Disˇrd
:

2086 
pOrdîBy
 = 0;

2097 
i
=0; i<
pELi°
->
nEx¥
; i++){

2098 if–
	`sqlôeEx¥ResﬁveIds
(
pP¨£
, 
pTabLi°
, 0, 
pELi°
->
a
[
i
].
pEx¥
) ){

2099 
£À˘_íd
;

2101 if–
	`sqlôeEx¥Check
(
pP¨£
, 
pELi°
->
a
[
i
].
pEx¥
, 1, &
isAgg
) ){

2102 
£À˘_íd
;

2105 if–
pWhîe
 ){

2106 if–
	`sqlôeEx¥ResﬁveIds
(
pP¨£
, 
pTabLi°
, 
pELi°
, 
pWhîe
) ){

2107 
£À˘_íd
;

2109 if–
	`sqlôeEx¥Check
(
pP¨£
, 
pWhîe
, 0, 0) ){

2110 
£À˘_íd
;

2113 if–
pHavög
 ){

2114 if–
pGroupBy
==0 ){

2115 
	`sqlôeEº‹Msg
(
pP¨£
, "a GROUP BY clause isÑequired before HAVING");

2116 
£À˘_íd
;

2118 if–
	`sqlôeEx¥ResﬁveIds
(
pP¨£
, 
pTabLi°
, 
pELi°
, 
pHavög
) ){

2119 
£À˘_íd
;

2121 if–
	`sqlôeEx¥Check
(
pP¨£
, 
pHavög
, 1, &
isAgg
) ){

2122 
£À˘_íd
;

2125 if–
pOrdîBy
 ){

2126 
i
=0; i<
pOrdîBy
->
nEx¥
; i++){

2127 
iCﬁ
;

2128 
Ex¥
 *
pE
 = 
pOrdîBy
->
a
[
i
].
pEx¥
;

2129 if–
	`sqlôeEx¥IsI¡egî
(
pE
, &
iCﬁ
Ë&& iCﬁ>0 && iCﬁ<=
pELi°
->
nEx¥
 ){

2130 
	`sqlôeEx¥Dñëe
(
pE
);

2131 
pE
 = 
pOrdîBy
->
a
[
i
].
pEx¥
 = 
	`sqlôeEx¥Dup
(
pELi°
->a[
iCﬁ
-1].pExpr);

2133 if–
	`sqlôeEx¥ResﬁveIds
(
pP¨£
, 
pTabLi°
, 
pELi°
, 
pE
) ){

2134 
£À˘_íd
;

2136 if–
	`sqlôeEx¥Check
(
pP¨£
, 
pE
, 
isAgg
, 0) ){

2137 
£À˘_íd
;

2139 if–
	`sqlôeEx¥IsC⁄°™t
(
pE
) ){

2140 if–
	`sqlôeEx¥IsI¡egî
(
pE
, &
iCﬁ
)==0 ){

2141 
	`sqlôeEº‹Msg
(
pP¨£
,

2143 
£À˘_íd
;

2144 }if–
iCﬁ
<=0 || iCﬁ>
pELi°
->
nEx¥
 ){

2145 
	`sqlôeEº‹Msg
(
pP¨£
,

2147 "bëwì¿1ánd %d", 
iCﬁ
, 
pELi°
->
nEx¥
);

2148 
£À˘_íd
;

2153 if–
pGroupBy
 ){

2154 
i
=0; i<
pGroupBy
->
nEx¥
; i++){

2155 
iCﬁ
;

2156 
Ex¥
 *
pE
 = 
pGroupBy
->
a
[
i
].
pEx¥
;

2157 if–
	`sqlôeEx¥IsI¡egî
(
pE
, &
iCﬁ
Ë&& iCﬁ>0 && iCﬁ<=
pELi°
->
nEx¥
 ){

2158 
	`sqlôeEx¥Dñëe
(
pE
);

2159 
pE
 = 
pGroupBy
->
a
[
i
].
pEx¥
 = 
	`sqlôeEx¥Dup
(
pELi°
->a[
iCﬁ
-1].pExpr);

2161 if–
	`sqlôeEx¥ResﬁveIds
(
pP¨£
, 
pTabLi°
, 
pELi°
, 
pE
) ){

2162 
£À˘_íd
;

2164 if–
	`sqlôeEx¥Check
(
pP¨£
, 
pE
, 
isAgg
, 0) ){

2165 
£À˘_íd
;

2167 if–
	`sqlôeEx¥IsC⁄°™t
(
pE
) ){

2168 if–
	`sqlôeEx¥IsI¡egî
(
pE
, &
iCﬁ
)==0 ){

2169 
	`sqlôeEº‹Msg
(
pP¨£
,

2171 
£À˘_íd
;

2172 }if–
iCﬁ
<=0 || iCﬁ>
pELi°
->
nEx¥
 ){

2173 
	`sqlôeEº‹Msg
(
pP¨£
,

2175 "bëwì¿1ánd %d", 
iCﬁ
, 
pELi°
->
nEx¥
);

2176 
£À˘_íd
;

2184 
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

2185 if–
v
==0 ) 
£À˘_íd
;

2190 if–
eDe°
==
SRT_CÆlback
 ){

2191 
	`gíî©eCﬁumnNames
(
pP¨£
, 
pTabLi°
, 
pELi°
);

2196 
i
=0; i<
pTabLi°
->
nSrc
; i++){

2197 c⁄° *
zSavedAuthC⁄ãxt
;

2198 
√edRe°‹eC⁄ãxt
;

2200 if–
pTabLi°
->
a
[
i
].
pSñe˘
==0 ) ;

2201 if–
pTabLi°
->
a
[
i
].
zName
!=0 ){

2202 
zSavedAuthC⁄ãxt
 = 
pP¨£
->
zAuthC⁄ãxt
;

2203 
pP¨£
->
zAuthC⁄ãxt
 = 
pTabLi°
->
a
[
i
].
zName
;

2204 
√edRe°‹eC⁄ãxt
 = 1;

2206 
√edRe°‹eC⁄ãxt
 = 0;

2208 
	`sqlôeSñe˘
(
pP¨£
, 
pTabLi°
->
a
[
i
].
pSñe˘
, 
SRT_TempTabÀ
,

2209 
pTabLi°
->
a
[
i
].
iCurs‹
, 
p
, i, &
isAgg
);

2210 if–
√edRe°‹eC⁄ãxt
 ){

2211 
pP¨£
->
zAuthC⁄ãxt
 = 
zSavedAuthC⁄ãxt
;

2213 
pTabLi°
 = 
p
->
pSrc
;

2214 
pWhîe
 = 
p
->pWhere;

2215 if–
eDe°
!=
SRT_Uni⁄
 &&ÉDe°!=
SRT_Ex˚±
 &&ÉDe°!=
SRT_Disˇrd
 ){

2216 
pOrdîBy
 = 
p
->pOrderBy;

2218 
pGroupBy
 = 
p
->pGroupBy;

2219 
pHavög
 = 
p
->pHaving;

2220 
isDi°ö˘
 = 
p
->isDistinct;

2226 if–
	`sim∂eMöMaxQuîy
(
pP¨£
, 
p
, 
eDe°
, 
iP¨m
) ){

2227 
rc
 = 0;

2228 
£À˘_íd
;

2234 if–
pP¨ít
 && 
pP¨ítAgg
 &&

2235 
	`Ê©ãnSubquîy
(
pP¨£
, 
pP¨ít
, 
∑ª¡Tab
, *
pP¨ítAgg
, 
isAgg
) ){

2236 if–
isAgg
 ) *
pP¨ítAgg
 = 1;

2237  
rc
;

2242 
	`compuãLimôRegi°îs
(
pP¨£
, 
p
);

2253 if–
eDe°
==
SRT_CÆlback
 ){

2254 
	`gíî©eCﬁumnTy≥s
(
pP¨£
, 
pTabLi°
, 
pELi°
);

2259 if–
eDe°
==
SRT_TempTabÀ
 ){

2260 
	`sqlôeVdbeAddOp
(
v
, 
OP_O≥nTemp
, 
iP¨m
, 0);

2265 
	`sqlôeAggªg©eInfoRe£t
(
pP¨£
);

2266 if–
isAgg
 || 
pGroupBy
 ){

2267 
	`as£π
–
pP¨£
->
nAgg
==0 );

2268 
isAgg
 = 1;

2269 
i
=0; i<
pELi°
->
nEx¥
; i++){

2270 if–
	`sqlôeEx¥A«lyzeAggªg©es
(
pP¨£
, 
pELi°
->
a
[
i
].
pEx¥
) ){

2271 
£À˘_íd
;

2274 if–
pGroupBy
 ){

2275 
i
=0; i<
pGroupBy
->
nEx¥
; i++){

2276 if–
	`sqlôeEx¥A«lyzeAggªg©es
(
pP¨£
, 
pGroupBy
->
a
[
i
].
pEx¥
) ){

2277 
£À˘_íd
;

2281 if–
pHavög
 && 
	`sqlôeEx¥A«lyzeAggªg©es
(
pP¨£
,ÖHaving) ){

2282 
£À˘_íd
;

2284 if–
pOrdîBy
 ){

2285 
i
=0; i<
pOrdîBy
->
nEx¥
; i++){

2286 if–
	`sqlôeEx¥A«lyzeAggªg©es
(
pP¨£
, 
pOrdîBy
->
a
[
i
].
pEx¥
) ){

2287 
£À˘_íd
;

2295 if–
isAgg
 ){

2296 
	`sqlôeVdbeAddOp
(
v
, 
OP_AggRe£t
, 0, 
pP¨£
->
nAgg
);

2297 
i
=0; i<
pP¨£
->
nAgg
; i++){

2298 
FuncDef
 *
pFunc
;

2299 if–(
pFunc
 = 
pP¨£
->
aAgg
[
i
].pFunc)!=0 &&ÖFunc->
xFöÆize
!=0 ){

2300 
	`sqlôeVdbeOp3
(
v
, 
OP_AggInô
, 0, 
i
, (*)
pFunc
, 
P3_POINTER
);

2303 if–
pGroupBy
==0 ){

2304 
	`sqlôeVdbeAddOp
(
v
, 
OP_Såög
, 0, 0);

2305 
	`sqlôeVdbeAddOp
(
v
, 
OP_AggFocus
, 0, 0);

2311 if–
eDe°
==
SRT_Mem
 ){

2312 
	`sqlôeVdbeAddOp
(
v
, 
OP_Såög
, 0, 0);

2313 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemSt‹e
, 
iP¨m
, 1);

2318 if–
isDi°ö˘
 ){

2319 
di°ö˘
 = 
pP¨£
->
nTab
++;

2320 
	`sqlôeVdbeAddOp
(
v
, 
OP_O≥nTemp
, 
di°ö˘
, 1);

2322 
di°ö˘
 = -1;

2327 
pWInfo
 = 
	`sqlôeWhîeBegö
(
pP¨£
, 
pTabLi°
, 
pWhîe
, 0,

2328 
pGroupBy
 ? 0 : &
pOrdîBy
);

2329 if–
pWInfo
==0 ) 
£À˘_íd
;

2334 if–!
isAgg
 ){

2335 if–
	`£À˘I¬îLo›
(
pP¨£
, 
p
, 
pELi°
, 0, 0, 
pOrdîBy
, 
di°ö˘
, 
eDe°
,

2336 
iP¨m
, 
pWInfo
->
iC⁄töue
,ÖWInfo->
iBªak
) ){

2337 
£À˘_íd
;

2345 
AggEx¥
 *
pAgg
;

2346 if–
pGroupBy
 ){

2347 
lbl1
;

2348 
i
=0; i<
pGroupBy
->
nEx¥
; i++){

2349 
	`sqlôeEx¥Code
(
pP¨£
, 
pGroupBy
->
a
[
i
].
pEx¥
);

2351 
	`sqlôeVdbeAddOp
(
v
, 
OP_MakeKey
, 
pGroupBy
->
nEx¥
, 0);

2352 if–
pP¨£
->
db
->
fûe_f‹m©
>=4 ) 
	`sqlôeAddKeyTy≥
(
v
, 
pGroupBy
);

2353 
lbl1
 = 
	`sqlôeVdbeMakeLabñ
(
v
);

2354 
	`sqlôeVdbeAddOp
(
v
, 
OP_AggFocus
, 0, 
lbl1
);

2355 
i
=0, 
pAgg
=
pP¨£
->
aAgg
; i<pP¨£->
nAgg
; i++,ÖAgg++){

2356 if–
pAgg
->
isAgg
 ) ;

2357 
	`sqlôeEx¥Code
(
pP¨£
, 
pAgg
->
pEx¥
);

2358 
	`sqlôeVdbeAddOp
(
v
, 
OP_AggSë
, 0, 
i
);

2360 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
lbl1
);

2362 
i
=0, 
pAgg
=
pP¨£
->
aAgg
; i<pP¨£->
nAgg
; i++,ÖAgg++){

2363 
Ex¥
 *
pE
;

2364 
nEx¥
;

2365 
FuncDef
 *
pDef
;

2366 if–!
pAgg
->
isAgg
 ) ;

2367 
	`as£π
–
pAgg
->
pFunc
!=0 );

2368 
	`as£π
–
pAgg
->
pFunc
->
xSãp
!=0 );

2369 
pDef
 = 
pAgg
->
pFunc
;

2370 
pE
 = 
pAgg
->
pEx¥
;

2371 
	`as£π
–
pE
!=0 );

2372 
	`as£π
–
pE
->
›
==
TK_AGG_FUNCTION
 );

2373 
nEx¥
 = 
	`sqlôeEx¥CodeEx¥Li°
(
pP¨£
, 
pE
->
pLi°
, 
pDef
->
ö˛udeTy≥s
);

2374 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
i
, 0);

2375 
	`sqlôeVdbeOp3
(
v
, 
OP_AggFunc
, 0, 
nEx¥
, (*)
pDef
, 
P3_POINTER
);

2381 
	`sqlôeWhîeEnd
(
pWInfo
);

2386 if–
isAgg
 ){

2387 
ídagg
 = 
	`sqlôeVdbeMakeLabñ
(
v
);

2388 
°¨ègg
;

2389 
°¨ègg
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_AggNext
, 0, 
ídagg
);

2390 
pP¨£
->
u£Agg
 = 1;

2391 if–
pHavög
 ){

2392 
	`sqlôeEx¥IfFÆ£
(
pP¨£
, 
pHavög
, 
°¨ègg
, 1);

2394 if–
	`£À˘I¬îLo›
(
pP¨£
, 
p
, 
pELi°
, 0, 0, 
pOrdîBy
, 
di°ö˘
, 
eDe°
,

2395 
iP¨m
, 
°¨ègg
, 
ídagg
) ){

2396 
£À˘_íd
;

2398 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
°¨ègg
);

2399 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
ídagg
);

2400 
	`sqlôeVdbeAddOp
(
v
, 
OP_No›
, 0, 0);

2401 
pP¨£
->
u£Agg
 = 0;

2407 if–
pOrdîBy
 ){

2408 
	`gíî©eS‹tTaû
(
p
, 
v
, 
pELi°
->
nEx¥
, 
eDe°
, 
iP¨m
);

2416 if–
pP¨ít
 ){

2417 
	`as£π
–
pP¨ít
->
pSrc
->
nSrc
>
∑ª¡Tab
 );

2418 
	`as£π
–
pP¨ít
->
pSrc
->
a
[
∑ª¡Tab
].
pSñe˘
==
p
 );

2419 
	`sqlôeSñe˘Dñëe
(
p
);

2420 
pP¨ít
->
pSrc
->
a
[
∑ª¡Tab
].
pSñe˘
 = 0;

2426 
rc
 = 0;

2431 
£À˘_íd
:

2432 
	`sqlôeAggªg©eInfoRe£t
(
pP¨£
);

2433  
rc
;

2434 
	}
}

	@shell.c

17 
	~<°dlib.h
>

18 
	~<°rög.h
>

19 
	~<°dio.h
>

20 
	~"sqlôe.h
"

21 
	~<˘y≥.h
>

23 #i‡!
deföed
(
_WIN32
Ë&& !deföed(
WIN32
Ë&& !deföed(
__MACOS__
)

24 
	~<sig«l.h
>

25 
	~<pwd.h
>

26 
	~<uni°d.h
>

27 
	~<sys/ty≥s.h
>

30 #ifde‡
__MACOS__


31 
	~<c⁄sﬁe.h
>

32 
	~<sig«l.h
>

33 
	~<uni°d.h
>

34 
	~<exåas.h
>

35 
	~<Fûes.h
>

36 
	~<Fﬁdîs.h
>

39 #i‡
deföed
(
HAVE_READLINE
) && HAVE_READLINE==1

40 
	~<ªadlöe/ªadlöe.h
>

41 
	~<ªadlöe/hi°‹y.h
>

43 
	#ªadlöe
(
p
Ë
	`loˇl_gëlöe
’,
°dö
)

	)

44 
	#add_hi°‹y
(
X
)

	)

45 
	#ªad_hi°‹y
(
X
)

	)

46 
	#wrôe_hi°‹y
(
X
)

	)

47 
	#°iÊe_hi°‹y
(
X
)

	)

52 
ißây
();

59 
sqlôe
 *
	gdb
 = 0;

64 
	g£íI¡îru±
 = 0;

70 *
	gArgv0
;

76 
	gmaöProm±
[20];

77 
	gc⁄töueProm±
[20];

83 
sqlôeIsNumbî
(const *);

94 *
	$loˇl_gëlöe
(*
zProm±
, 
FILE
 *
ö
){

95 *
zLöe
;

96 
nLöe
;

97 
n
;

98 
eﬁ
;

100 if–
zProm±
 && *zPrompt ){

101 
	`¥ötf
("%s",
zProm±
);

102 
	`fÊush
(
°dout
);

104 
nLöe
 = 100;

105 
zLöe
 = 
	`mÆloc
–
nLöe
 );

106 if–
zLöe
==0 )  0;

107 
n
 = 0;

108 
eﬁ
 = 0;

109  !
eﬁ
 ){

110 if–
n
+100>
nLöe
 ){

111 
nLöe
 =ÇLine*2 + 100;

112 
zLöe
 = 
	`ªÆloc
(zLöe, 
nLöe
);

113 if–
zLöe
==0 )  0;

115 if–
	`fgës
(&
zLöe
[
n
], 
nLöe
 -Ç, 
ö
)==0 ){

116 if–
n
==0 ){

117 
	`‰ì
(
zLöe
);

120 
zLöe
[
n
] = 0;

121 
eﬁ
 = 1;

124  
zLöe
[
n
] ){Ç++; }

125 if–
n
>0 && 
zLöe
[n-1]=='\n' ){

126 
n
--;

127 
zLöe
[
n
] = 0;

128 
eﬁ
 = 1;

131 
zLöe
 = 
	`ªÆloc
–zLöe, 
n
+1 );

132  
zLöe
;

133 
	}
}

144 *
	$⁄e_öput_löe
(c⁄° *
zPri‹
, 
FILE
 *
ö
){

145 *
zProm±
;

146 *
zResu…
;

147 if–
ö
!=0 ){

148  
	`loˇl_gëlöe
(0, 
ö
);

150 if–
zPri‹
 && zPrior[0] ){

151 
zProm±
 = 
c⁄töueProm±
;

153 
zProm±
 = 
maöProm±
;

155 
zResu…
 = 
	`ªadlöe
(
zProm±
);

156 if–
zResu…
 ) 
	`add_hi°‹y
(zResult);

157  
zResu…
;

158 
	}
}

160 
	s¥evious_mode_d©a
 {

161 
	mvÆid
;

162 
	mmode
;

163 
	mshowHódî
;

164 
	mcﬁWidth
[100];

171 
	sˇŒback_d©a
 {

172 
sqlôe
 *
	mdb
;

173 
	mechoOn
;

174 
	m˙t
;

175 
FILE
 *
	mout
;

176 
	mmode
;

177 
	mshowHódî
;

178 *
	mzDe°TabÀ
;

179 
	m£∑øt‹
[20];

180 
	mcﬁWidth
[100];

181 
	ma˘uÆWidth
[100];

182 
	mnuŒvÆue
[20];

184 
¥evious_mode_d©a
 
	mex∂aöPªv
;

187 
	moutfûe
[
FILENAME_MAX
];

188 c⁄° *
	mzDbFûíame
;

189 *
	mzKey
;

195 
	#MODE_Löe
 0

	)

196 
	#MODE_Cﬁumn
 1

	)

197 
	#MODE_Li°
 2

	)

198 
	#MODE_Semi
 3

	)

199 
	#MODE_Html
 4

	)

200 
	#MODE_In£π
 5

	)

201 
	#MODE_NUM_OF
 6

	)

203 *
	gmodeDes¸
[
MODE_NUM_OF
] = {

215 
	#AºaySize
(
X
Ë((X)/(X[0]))

	)

220 
	$ouçut_quŸed_°rög
(
FILE
 *
out
, c⁄° *
z
){

221 
i
;

222 
nSögÀ
 = 0;

223 
i
=0; 
z
[i]; i++){

224 if–
z
[
i
]=='\'' ) 
nSögÀ
++;

226 if–
nSögÀ
==0 ){

227 
	`Ârötf
(
out
,"'%s'",
z
);

229 
	`Ârötf
(
out
,"'");

230  *
z
 ){

231 
i
=0; 
z
[i] && z[i]!='\''; i++){}

232 if–
i
==0 ){

233 
	`Ârötf
(
out
,"''");

234 
z
++;

235 }if–
z
[
i
]=='\'' ){

236 
	`Ârötf
(
out
,"%.*s''",
i
,
z
);

237 
z
 +
i
+1;

239 
	`Ârötf
(
out
,"%s",
z
);

243 
	`Ârötf
(
out
,"'");

245 
	}
}

251 
	$ouçut_html_°rög
(
FILE
 *
out
, c⁄° *
z
){

252 
i
;

253  *
z
 ){

254 
i
=0; 
z
[i] && z[i]!='<' && z[i]!='&'; i++){}

255 if–
i
>0 ){

256 
	`Ârötf
(
out
,"%.*s",
i
,
z
);

258 if–
z
[
i
]=='<' ){

259 
	`Ârötf
(
out
,"&lt;");

260 }if–
z
[
i
]=='&' ){

261 
	`Ârötf
(
out
,"&amp;");

265 
z
 +
i
 + 1;

267 
	}
}

272 
	$öãºu±_h™dÀr
(
NŸU£d
){

273 
£íI¡îru±
 = 1;

274 if–
db
 ) 
	`sqlôe_öãºu±
(db);

275 
	}
}

281 
	$ˇŒback
(*
pArg
, 
nArg
, **
azArg
, **
azCﬁ
){

282 
i
;

283 
ˇŒback_d©a
 *
p
 = (ˇŒback_d©a*)
pArg
;

284  
p
->
mode
 ){

285 
MODE_Löe
: {

286 
w
 = 5;

287 if–
azArg
==0 ) ;

288 
i
=0; i<
nArg
; i++){

289 
Àn
 = 
	`°æí
(
azCﬁ
[
i
]);

290 if–
Àn
>
w
 ) w =Üen;

292 if–
p
->
˙t
++>0 ) 
	`Ârötf
’->
out
,"\n");

293 
i
=0; i<
nArg
; i++){

294 
	`Ârötf
(
p
->
out
,"%*†%s\n", 
w
, 
azCﬁ
[
i
],

295 
azArg
[
i
] ?ázArg[i] : 
p
->
nuŒvÆue
);

299 
MODE_Cﬁumn
: {

300 if–
p
->
˙t
++==0 ){

301 
i
=0; i<
nArg
; i++){

302 
w
, 
n
;

303 if–
i
<
	`AºaySize
(
p
->
cﬁWidth
) ){

304 
w
 = 
p
->
cﬁWidth
[
i
];

306 
w
 = 0;

308 if–
w
<=0 ){

309 
w
 = 
	`°æí
(
azCﬁ
[
i
] ?ázCol[i] : "");

310 if–
w
<10 ) w = 10;

311 
n
 = 
	`°æí
(
azArg
 &&ázArg[
i
] ?ázArg[i] : 
p
->
nuŒvÆue
);

312 if–
w
<
n
 ) w =Ç;

314 if–
i
<
	`AºaySize
(
p
->
a˘uÆWidth
) ){

315 
p
->
a˘uÆWidth
[
i
] = 
w
;

317 if–
p
->
showHódî
 ){

318 
	`Ârötf
(
p
->
out
,"%-*.*s%s",
w
,w,
azCﬁ
[
i
], i==
nArg
-1 ? "\n": " ");

321 if–
p
->
showHódî
 ){

322 
i
=0; i<
nArg
; i++){

323 
w
;

324 if–
i
<
	`AºaySize
(
p
->
a˘uÆWidth
) ){

325 
w
 = 
p
->
a˘uÆWidth
[
i
];

327 
w
 = 10;

329 
	`Ârötf
(
p
->
out
,"%-*.*s%s",
w
,w,"-----------------------------------"

331 
i
==
nArg
-1 ? "\n": " ");

335 if–
azArg
==0 ) ;

336 
i
=0; i<
nArg
; i++){

337 
w
;

338 if–
i
<
	`AºaySize
(
p
->
a˘uÆWidth
) ){

339 
w
 = 
p
->
a˘uÆWidth
[
i
];

341 
w
 = 10;

343 
	`Ârötf
(
p
->
out
,"%-*.*s%s",
w
,w,

344 
azArg
[
i
] ?ázArg[i] : 
p
->
nuŒvÆue
, i==
nArg
-1 ? "\n": " ");

348 
MODE_Semi
:

349 
MODE_Li°
: {

350 if–
p
->
˙t
++==0 &&Ö->
showHódî
 ){

351 
i
=0; i<
nArg
; i++){

352 
	`Ârötf
(
p
->
out
,"%s%s",
azCﬁ
[
i
], i==
nArg
-1 ? "\n" :Ö->
£∑øt‹
);

355 if–
azArg
==0 ) ;

356 
i
=0; i<
nArg
; i++){

357 *
z
 = 
azArg
[
i
];

358 if–
z
==0 ) z = 
p
->
nuŒvÆue
;

359 
	`Ârötf
(
p
->
out
, "%s", 
z
);

360 if–
i
<
nArg
-1 ){

361 
	`Ârötf
(
p
->
out
, "%s",Ö->
£∑øt‹
);

362 }if–
p
->
mode
==
MODE_Semi
 ){

363 
	`Ârötf
(
p
->
out
, ";\n");

365 
	`Ârötf
(
p
->
out
, "\n");

370 
MODE_Html
: {

371 if–
p
->
˙t
++==0 &&Ö->
showHódî
 ){

372 
	`Ârötf
(
p
->
out
,"<TR>");

373 
i
=0; i<
nArg
; i++){

374 
	`Ârötf
(
p
->
out
,"<TH>%s</TH>",
azCﬁ
[
i
]);

376 
	`Ârötf
(
p
->
out
,"</TR>\n");

378 if–
azArg
==0 ) ;

379 
	`Ârötf
(
p
->
out
,"<TR>");

380 
i
=0; i<
nArg
; i++){

381 
	`Ârötf
(
p
->
out
,"<TD>");

382 
	`ouçut_html_°rög
(
p
->
out
, 
azArg
[
i
] ?ázArg[i] :Ö->
nuŒvÆue
);

383 
	`Ârötf
(
p
->
out
,"</TD>\n");

385 
	`Ârötf
(
p
->
out
,"</TR>\n");

388 
MODE_In£π
: {

389 if–
azArg
==0 ) ;

390 
	`Ârötf
(
p
->
out
,"INSERT INTO %†VALUES(",p->
zDe°TabÀ
);

391 
i
=0; i<
nArg
; i++){

392 *
zSï
 = 
i
>0 ? ",": "";

393 if–
azArg
[
i
]==0 ){

394 
	`Ârötf
(
p
->
out
,"%sNULL",
zSï
);

395 }if–
	`sqlôeIsNumbî
(
azArg
[
i
]) ){

396 
	`Ârötf
(
p
->
out
,"%s%s",
zSï
, 
azArg
[
i
]);

398 if–
zSï
[0] ) 
	`Ârötf
(
p
->
out
,"%s",zSep);

399 
	`ouçut_quŸed_°rög
(
p
->
out
, 
azArg
[
i
]);

402 
	`Ârötf
(
p
->
out
,");\n");

407 
	}
}

414 
	$£t_èbÀ_«me
(
ˇŒback_d©a
 *
p
, c⁄° *
zName
){

415 
i
, 
n
;

416 
√edQuŸe
;

417 *
z
;

419 if–
p
->
zDe°TabÀ
 ){

420 
	`‰ì
(
p
->
zDe°TabÀ
);

421 
p
->
zDe°TabÀ
 = 0;

423 if–
zName
==0 ) ;

424 
√edQuŸe
 = !
	`ißÕha
(*
zName
) && *zName!='_';

425 
i
=
n
=0; 
zName
[i]; i++,Ç++){

426 if–!
	`iß um
(
zName
[
i
]) && zName[i]!='_' ){

427 
√edQuŸe
 = 1;

428 if–
zName
[
i
]=='\'' ) 
n
++;

431 if–
√edQuŸe
 ) 
n
 += 2;

432 
z
 = 
p
->
zDe°TabÀ
 = 
	`mÆloc
–
n
+1 );

433 if–
z
==0 ){

434 
	`Ârötf
(
°dîr
,"Out of memory!\n");

435 
	`exô
(1);

437 
n
 = 0;

438 if–
√edQuŸe
 ) 
z
[
n
++] = '\'';

439 
i
=0; 
zName
[i]; i++){

440 
z
[
n
++] = 
zName
[
i
];

441 if–
zName
[
i
]=='\'' ) 
z
[
n
++] = '\'';

443 if–
√edQuŸe
 ) 
z
[
n
++] = '\'';

444 
z
[
n
] = 0;

445 
	}
}

453 
	$dump_ˇŒback
(*
pArg
, 
nArg
, **
azArg
, **
azCﬁ
){

454 
ˇŒback_d©a
 *
p
 = (ˇŒback_d©®*)
pArg
;

455 if–
nArg
!=3 )  1;

456 
	`Ârötf
(
p
->
out
, "%s;\n", 
azArg
[2]);

457 if–
	`°rcmp
(
azArg
[1],"table")==0 ){

458 
ˇŒback_d©a
 
d2
;

459 
d2
 = *
p
;

460 
d2
.
mode
 = 
MODE_In£π
;

461 
d2
.
zDe°TabÀ
 = 0;

462 
	`£t_èbÀ_«me
(&
d2
, 
azArg
[0]);

463 
	`sqlôe_exec_¥ötf
(
p
->
db
,

465 
ˇŒback
, &
d2
, 0, 
azArg
[0]

467 
	`£t_èbÀ_«me
(&
d2
, 0);

470 
	}
}

475 
	gzHñp
[] =

493 #ifde‡
SQLITE_HAS_CODEC


505 
¥o˚ss_öput
(
ˇŒback_d©a
 *
p
, 
FILE
 *
ö
);

511 
	$›í_db
(
ˇŒback_d©a
 *
p
){

512 if–
p
->
db
==0 ){

513 *
zEºMsg
 = 0;

514 #ifde‡
SQLITE_HAS_CODEC


515 
n
 = 
p
->
zKey
 ? 
	`°æí
(p->zKey) : 0;

516 
db
 = 
p
->db = 
	`sqlôe_›í_í¸y±ed
’->
zDbFûíame
,Ö->
zKey
, 
n
, 0, &
zEºMsg
);

518 
db
 = 
p
->db = 
	`sqlôe_›í
’->
zDbFûíame
, 0, &
zEºMsg
);

520 if–
p
->
db
==0 ){

521 if–
zEºMsg
 ){

522 
	`Ârötf
(
°dîr
,"UnableÅo open database \"%s\": %s\n",

523 
p
->
zDbFûíame
, 
zEºMsg
);

525 
	`Ârötf
(
°dîr
,"U«bÀÅÿ›í d©aba£ %s\n", 
p
->
zDbFûíame
);

527 
	`exô
(1);

530 
	}
}

538 
	$do_mëa_comm™d
(*
zLöe
, 
ˇŒback_d©a
 *
p
){

539 
i
 = 1;

540 
nArg
 = 0;

541 
n
, 
c
;

542 
rc
 = 0;

543 *
azArg
[50];

547  
zLöe
[
i
] && 
nArg
<
	`AºaySize
(
azArg
) ){

548  
	`is•a˚
(
zLöe
[
i
]) ){ i++; }

549 if–
zLöe
[
i
]==0 ) ;

550 if–
zLöe
[
i
]=='\'' || zLine[i]=='"' ){

551 
dñim
 = 
zLöe
[
i
++];

552 
azArg
[
nArg
++] = &
zLöe
[
i
];

553  
zLöe
[
i
] && zLöe[i]!=
dñim
 ){ i++; }

554 if–
zLöe
[
i
]==
dñim
 ){

555 
zLöe
[
i
++] = 0;

558 
azArg
[
nArg
++] = &
zLöe
[
i
];

559  
zLöe
[
i
] && !
	`is•a˚
(zLine[i]) ){ i++; }

560 if–
zLöe
[
i
] ) zLine[i++] = 0;

566 if–
nArg
==0 )  
rc
;

567 
n
 = 
	`°æí
(
azArg
[0]);

568 
c
 = 
azArg
[0][0];

569 if–
c
=='d' && 
n
>1 && 
	`°∫cmp
(
azArg
[0], "databases",Ç)==0 ){

570 
ˇŒback_d©a
 
d©a
;

571 *
zEºMsg
 = 0;

572 
	`›í_db
(
p
);

573 
	`mem˝y
(&
d©a
, 
p
, (data));

574 
d©a
.
showHódî
 = 1;

575 
d©a
.
mode
 = 
MODE_Cﬁumn
;

576 
d©a
.
cﬁWidth
[0] = 3;

577 
d©a
.
cﬁWidth
[1] = 15;

578 
d©a
.
cﬁWidth
[2] = 58;

579 
	`sqlôe_exec
(
p
->
db
, "PRAGMA d©aba£_li°; ", 
ˇŒback
, &
d©a
, &
zEºMsg
);

580 if–
zEºMsg
 ){

581 
	`Ârötf
(
°dîr
,"Eº‹: %s\n", 
zEºMsg
);

582 
	`sqlôe_‰ìmem
(
zEºMsg
);

586 if–
c
=='d' && 
	`°∫cmp
(
azArg
[0], "dump", 
n
)==0 ){

587 *
zEºMsg
 = 0;

588 
	`›í_db
(
p
);

589 
	`Ârötf
(
p
->
out
, "BEGIN TRANSACTION;\n");

590 if–
nArg
==1 ){

591 
	`sqlôe_exec
(
p
->
db
,

595 
dump_ˇŒback
, 
p
, &
zEºMsg


598 
i
;

599 
i
=1; i<
nArg
 && 
zEºMsg
==0; i++){

600 
	`sqlôe_exec_¥ötf
(
p
->
db
,

604 
dump_ˇŒback
, 
p
, &
zEºMsg
, 
azArg
[
i
]

608 if–
zEºMsg
 ){

609 
	`Ârötf
(
°dîr
,"Eº‹: %s\n", 
zEºMsg
);

610 
	`sqlôe_‰ìmem
(
zEºMsg
);

612 
	`Ârötf
(
p
->
out
, "COMMIT;\n");

616 if–
c
=='e' && 
	`°∫cmp
(
azArg
[0], "echo", 
n
)==0 && 
nArg
>1 ){

617 
j
;

618 *
z
 = 
azArg
[1];

619 
vÆ
 = 
	`©oi
(
azArg
[1]);

620 
j
=0; 
z
[j]; j++){

621 if–
	`isuµî
(
z
[
j
]ËËz[j] = 
	`tﬁowî
(z[j]);

623 if–
	`°rcmp
(
z
,"on")==0 ){

624 
vÆ
 = 1;

625 }if–
	`°rcmp
(
z
,"yes")==0 ){

626 
vÆ
 = 1;

628 
p
->
echoOn
 = 
vÆ
;

631 if–
c
=='e' && 
	`°∫cmp
(
azArg
[0], "exô", 
n
)==0 ){

632 
rc
 = 1;

635 if–
c
=='e' && 
	`°∫cmp
(
azArg
[0], "ex∂aö", 
n
)==0 ){

636 
j
;

637 *
z
 = 
nArg
>=2 ? 
azArg
[1] : "1";

638 
vÆ
 = 
	`©oi
(
z
);

639 
j
=0; 
z
[j]; j++){

640 if–
	`isuµî
(
z
[
j
]ËËz[j] = 
	`tﬁowî
(z[j]);

642 if–
	`°rcmp
(
z
,"on")==0 ){

643 
vÆ
 = 1;

644 }if–
	`°rcmp
(
z
,"yes")==0 ){

645 
vÆ
 = 1;

647 if(
vÆ
 == 1) {

648 if(!
p
->
ex∂aöPªv
.
vÆid
) {

649 
p
->
ex∂aöPªv
.
vÆid
 = 1;

650 
p
->
ex∂aöPªv
.
mode
 =Ö->mode;

651 
p
->
ex∂aöPªv
.
showHódî
 =Ö->showHeader;

652 
	`mem˝y
(
p
->
ex∂aöPªv
.
cﬁWidth
,p->colWidth,(p->colWidth));

661 
p
->
mode
 = 
MODE_Cﬁumn
;

662 
p
->
showHódî
 = 1;

663 
	`mem£t
(
p
->
cﬁWidth
,0,
	`AºaySize
(p->colWidth));

664 
p
->
cﬁWidth
[0] = 4;

665 
p
->
cﬁWidth
[1] = 12;

666 
p
->
cﬁWidth
[2] = 10;

667 
p
->
cﬁWidth
[3] = 10;

668 
p
->
cﬁWidth
[4] = 35;

669 }i‡(
p
->
ex∂aöPªv
.
vÆid
) {

670 
p
->
ex∂aöPªv
.
vÆid
 = 0;

671 
p
->
mode
 =Ö->
ex∂aöPªv
.mode;

672 
p
->
showHódî
 =Ö->
ex∂aöPªv
.showHeader;

673 
	`mem˝y
(
p
->
cﬁWidth
,p->
ex∂aöPªv
.colWidth,(p->colWidth));

677 if–
c
=='h' && (
	`°∫cmp
(
azArg
[0], "hódî", 
n
)==0

679 
	`°∫cmp
(
azArg
[0], "hódîs", 
n
)==0 )&& 
nArg
>1 ){

680 
j
;

681 *
z
 = 
azArg
[1];

682 
vÆ
 = 
	`©oi
(
azArg
[1]);

683 
j
=0; 
z
[j]; j++){

684 if–
	`isuµî
(
z
[
j
]ËËz[j] = 
	`tﬁowî
(z[j]);

686 if–
	`°rcmp
(
z
,"on")==0 ){

687 
vÆ
 = 1;

688 }if–
	`°rcmp
(
z
,"yes")==0 ){

689 
vÆ
 = 1;

691 
p
->
showHódî
 = 
vÆ
;

694 if–
c
=='h' && 
	`°∫cmp
(
azArg
[0], "hñp", 
n
)==0 ){

695 
	`Ârötf
(
°dîr
,
zHñp
);

698 if–
c
=='i' && 
	`°∫cmp
(
azArg
[0], "ödi˚s", 
n
)==0 && 
nArg
>1 ){

699 
ˇŒback_d©a
 
d©a
;

700 *
zEºMsg
 = 0;

701 
	`›í_db
(
p
);

702 
	`mem˝y
(&
d©a
, 
p
, (data));

703 
d©a
.
showHódî
 = 0;

704 
d©a
.
mode
 = 
MODE_Li°
;

705 
	`sqlôe_exec_¥ötf
(
p
->
db
,

712 
ˇŒback
, &
d©a
, &
zEºMsg
, 
azArg
[1],ázArg[1]

714 if–
zEºMsg
 ){

715 
	`Ârötf
(
°dîr
,"Eº‹: %s\n", 
zEºMsg
);

716 
	`sqlôe_‰ìmem
(
zEºMsg
);

720 if–
c
=='m' && 
	`°∫cmp
(
azArg
[0], "mode", 
n
)==0 && 
nArg
>=2 ){

721 
n2
 = 
	`°æí
(
azArg
[1]);

722 if–
	`°∫cmp
(
azArg
[1],"löe",
n2
)==0

724 
	`°∫cmp
(
azArg
[1],"löes",
n2
)==0 ){

725 
p
->
mode
 = 
MODE_Löe
;

726 }if–
	`°∫cmp
(
azArg
[1],"cﬁumn",
n2
)==0

728 
	`°∫cmp
(
azArg
[1],"cﬁumns",
n2
)==0 ){

729 
p
->
mode
 = 
MODE_Cﬁumn
;

730 }if–
	`°∫cmp
(
azArg
[1],"li°",
n2
)==0 ){

731 
p
->
mode
 = 
MODE_Li°
;

732 }if–
	`°∫cmp
(
azArg
[1],"html",
n2
)==0 ){

733 
p
->
mode
 = 
MODE_Html
;

734 }if–
	`°∫cmp
(
azArg
[1],"ö£π",
n2
)==0 ){

735 
p
->
mode
 = 
MODE_In£π
;

736 if–
nArg
>=3 ){

737 
	`£t_èbÀ_«me
(
p
, 
azArg
[2]);

739 
	`£t_èbÀ_«me
(
p
, "table");

742 
	`Ârötf
(
°dîr
,"mode should be on of: column html insertÜineÜist\n");

746 if–
c
=='n' && 
	`°∫cmp
(
azArg
[0], "nuŒvÆue", 
n
)==0 && 
nArg
==2 ) {

747 
	`•rötf
(
p
->
nuŒvÆue
, "%.*s", ()
	`AºaySize
’->nuŒvÆue)-1, 
azArg
[1]);

750 if–
c
=='o' && 
	`°∫cmp
(
azArg
[0], "ouçut", 
n
)==0 && 
nArg
==2 ){

751 if–
p
->
out
!=
°dout
 ){

752 
	`f˛o£
(
p
->
out
);

754 if–
	`°rcmp
(
azArg
[1],"stdout")==0 ){

755 
p
->
out
 = 
°dout
;

756 
	`°r˝y
(
p
->
outfûe
,"stdout");

758 
p
->
out
 = 
	`f›í
(
azArg
[1], "wb");

759 if–
p
->
out
==0 ){

760 
	`Ârötf
(
°dîr
,"ˇn'àwrôêtÿ\"%s\"\n", 
azArg
[1]);

761 
p
->
out
 = 
°dout
;

763 
	`°r˝y
(
p
->
outfûe
,
azArg
[1]);

768 if–
c
=='p' && 
	`°∫cmp
(
azArg
[0], "¥om±", 
n
)==0 && (
nArg
==2 ||ÇArg==3)){

769 if–
nArg
 >= 2) {

770 
	`°∫˝y
(
maöProm±
,
azArg
[1],()
	`AºaySize
(mainPrompt)-1);

772 if–
nArg
 >= 3) {

773 
	`°∫˝y
(
c⁄töueProm±
,
azArg
[2],()
	`AºaySize
(continuePrompt)-1);

777 if–
c
=='q' && 
	`°∫cmp
(
azArg
[0], "quô", 
n
)==0 ){

778 
rc
 = 1;

781 if–
c
=='r' && 
	`°∫cmp
(
azArg
[0], "ªad", 
n
)==0 && 
nArg
==2 ){

782 
FILE
 *
Æt
 = 
	`f›í
(
azArg
[1], "rb");

783 if–
Æt
==0 ){

784 
	`Ârötf
(
°dîr
,"ˇn'à›í \"%s\"\n", 
azArg
[1]);

786 
	`¥o˚ss_öput
(
p
, 
Æt
);

787 
	`f˛o£
(
Æt
);

791 #ifde‡
SQLITE_HAS_CODEC


792 if–
c
=='r' && 
	`°∫cmp
(
azArg
[0],"ªkey", 
n
)==0 && 
nArg
==4 ){

793 *
zOld
 = 
p
->
zKey
;

794 if–
zOld
==0 ) zOld = "";

795 if–
	`°rcmp
(
azArg
[1],
zOld
) ){

796 
	`Ârötf
(
°dîr
,"old key is incorrect\n");

797 }if–
	`°rcmp
(
azArg
[2],ázArg[3]) ){

798 
	`Ârötf
(
°dîr
,"2nd copy ofÇew key doesÇot matchÅhe 1st\n");

800 
	`sqlôe_‰ìmem
(
p
->
zKey
);

801 
p
->
zKey
 = 
	`sqlôe_m¥ötf
("%s", 
azArg
[2]);

802 
	`sqlôe_ªkey
(
p
->
db
,Ö->
zKey
, 
	`°æí
(p->zKey));

807 if–
c
=='s' && 
	`°∫cmp
(
azArg
[0], "schema", 
n
)==0 ){

808 
ˇŒback_d©a
 
d©a
;

809 *
zEºMsg
 = 0;

810 
	`›í_db
(
p
);

811 
	`mem˝y
(&
d©a
, 
p
, (data));

812 
d©a
.
showHódî
 = 0;

813 
d©a
.
mode
 = 
MODE_Semi
;

814 if–
nArg
>1 ){

815 
	`sqlôeSåICmp
(const *,const *);

816 if–
	`sqlôeSåICmp
(
azArg
[1],"sqlite_master")==0 ){

817 *
√w_¨gv
[2], *
√w_cﬁv
[2];

818 
√w_¨gv
[0] = "CREATE TABLE sqlite_master (\n"

825 
√w_¨gv
[1] = 0;

826 
√w_cﬁv
[0] = "sql";

827 
√w_cﬁv
[1] = 0;

828 
	`ˇŒback
(&
d©a
, 1, 
√w_¨gv
, 
√w_cﬁv
);

829 }if–
	`sqlôeSåICmp
(
azArg
[1],"sqlite_temp_master")==0 ){

830 *
√w_¨gv
[2], *
√w_cﬁv
[2];

831 
√w_¨gv
[0] = "CREATE TEMP TABLE sqlite_temp_master (\n"

838 
√w_¨gv
[1] = 0;

839 
√w_cﬁv
[0] = "sql";

840 
√w_cﬁv
[1] = 0;

841 
	`ˇŒback
(&
d©a
, 1, 
√w_¨gv
, 
√w_cﬁv
);

843 
	`sqlôe_exec_¥ötf
(
p
->
db
,

849 
ˇŒback
, &
d©a
, &
zEºMsg
, 
azArg
[1]);

852 
	`sqlôe_exec
(
p
->
db
,

858 
ˇŒback
, &
d©a
, &
zEºMsg


861 if–
zEºMsg
 ){

862 
	`Ârötf
(
°dîr
,"Eº‹: %s\n", 
zEºMsg
);

863 
	`sqlôe_‰ìmem
(
zEºMsg
);

867 if–
c
=='s' && 
	`°∫cmp
(
azArg
[0], "£∑øt‹", 
n
)==0 && 
nArg
==2 ){

868 
	`•rötf
(
p
->
£∑øt‹
, "%.*s", ()
	`AºaySize
’->£∑øt‹)-1, 
azArg
[1]);

871 if–
c
=='s' && 
	`°∫cmp
(
azArg
[0], "show", 
n
)==0){

872 
i
;

873 
	`Ârötf
(
p
->
out
,"%9.9s: %s\n","echo",Ö->
echoOn
 ? "on" : "off");

874 
	`Ârötf
(
p
->
out
,"%9.9s: %s\n","ex∂aö",Ö->
ex∂aöPªv
.
vÆid
 ? "on" :"off");

875 
	`Ârötf
(
p
->
out
,"%9.9s: %s\n","hódîs",Ö->
showHódî
 ? "on" : "off");

876 
	`Ârötf
(
p
->
out
,"%9.9s: %s\n","mode", 
modeDes¸
[p->
mode
]);

877 
	`Ârötf
(
p
->
out
,"%9.9s: %s\n","nuŒvÆue",Ö->
nuŒvÆue
);

878 
	`Ârötf
(
p
->
out
,"%9.9s: %s\n","output",

879 
	`°æí
(
p
->
outfûe
) ?Ö->outfile : "stdout");

880 
	`Ârötf
(
p
->
out
,"%9.9s: %s\n","£∑øt‹",Ö->
£∑øt‹
);

881 
	`Ârötf
(
p
->
out
,"%9.9s: ","width");

882 
i
=0;i<()
	`AºaySize
(
p
->
cﬁWidth
) &&Ö->colWidth[i] != 0;i++) {

883 
	`Ârötf
(
p
->
out
,"%d ",p->
cﬁWidth
[
i
]);

885 
	`Ârötf
(
p
->
out
,"\n\n");

888 if–
c
=='t' && 
n
>1 && 
	`°∫cmp
(
azArg
[0], "tables",Ç)==0 ){

889 **
azResu…
;

890 
nRow
, 
rc
;

891 *
zEºMsg
;

892 
	`›í_db
(
p
);

893 if–
nArg
==1 ){

894 
rc
 = 
	`sqlôe_gë_èbÀ
(
p
->
db
,

901 &
azResu…
, &
nRow
, 0, &
zEºMsg


904 
rc
 = 
	`sqlôe_gë_èbÀ_¥ötf
(
p
->
db
,

911 &
azResu…
, &
nRow
, 0, &
zEºMsg
, 
azArg
[1],ázArg[1]

914 if–
zEºMsg
 ){

915 
	`Ârötf
(
°dîr
,"Eº‹: %s\n", 
zEºMsg
);

916 
	`sqlôe_‰ìmem
(
zEºMsg
);

918 if–
rc
==
SQLITE_OK
 ){

919 
Àn
, 
maxÀn
 = 0;

920 
i
, 
j
;

921 
nPrötCﬁ
, 
nPrötRow
;

922 
i
=1; i<=
nRow
; i++){

923 if–
azResu…
[
i
]==0 ) ;

924 
Àn
 = 
	`°æí
(
azResu…
[
i
]);

925 if–
Àn
>
maxÀn
 ) maxlen =Üen;

927 
nPrötCﬁ
 = 80/(
maxÀn
+2);

928 if–
nPrötCﬁ
<1 )ÇPrintCol = 1;

929 
nPrötRow
 = (
nRow
 + 
nPrötCﬁ
 - 1)/nPrintCol;

930 
i
=0; i<
nPrötRow
; i++){

931 
j
=
i
+1; j<=
nRow
; j+=
nPrötRow
){

932 *
zSp
 = 
j
<=
nPrötRow
 ? "" : " ";

933 
	`¥ötf
("%s%-*s", 
zSp
, 
maxÀn
, 
azResu…
[
j
] ?ázResult[j] : "");

935 
	`¥ötf
("\n");

938 
	`sqlôe_‰ì_èbÀ
(
azResu…
);

941 if–
c
=='t' && 
n
>1 && 
	`°∫cmp
(
azArg
[0], "timeout",Ç)==0 && 
nArg
>=2 ){

942 
	`›í_db
(
p
);

943 
	`sqlôe_busy_timeout
(
p
->
db
, 
	`©oi
(
azArg
[1]));

946 if–
c
=='w' && 
	`°∫cmp
(
azArg
[0], "width", 
n
)==0 ){

947 
j
;

948 
j
=1; j<
nArg
 && j<
	`AºaySize
(
p
->
cﬁWidth
); j++){

949 
p
->
cﬁWidth
[
j
-1] = 
	`©oi
(
azArg
[j]);

954 
	`Ârötf
(
°dîr
, "unknown command or invalidárguments: "

955 " \"%s\". E¡î \".hñp\" f‹ hñp\n", 
azArg
[0]);

958  
rc
;

959 
	}
}

965 
	$_íds_wôh_£micﬁ⁄
(c⁄° *
z
, 
N
){

966  
N
>0 && 
	`is•a˚
(
z
[N-1]) ){ N--; }

967  
N
>0 && 
z
[N-1]==';';

968 
	}
}

973 
	$_Æl_whôe•a˚
(c⁄° *
z
){

974 ; *
z
; z++){

975 if–
	`is•a˚
(*
z
) ) ;

976 if–*
z
=='/' && z[1]=='*' ){

977 
z
 += 2;

978  *
z
 && (*z!='*' || z[1]!='/') ){ z++; }

979 if–*
z
==0 )  0;

980 
z
++;

983 if–*
z
=='-' && z[1]=='-' ){

984 
z
 += 2;

985  *
z
 && *z!='\n' ){ z++; }

986 if–*
z
==0 )  1;

992 
	}
}

999 
	$_is_comm™d_ãrmö©‹
(c⁄° *
zLöe
){

1000 
	`sqlôeSåNICmp
(const *,const *,);

1001  
	`is•a˚
(*
zLöe
) ){ zLine++; };

1002 if–
zLöe
[0]=='/' && 
	`_Æl_whôe•a˚
(&zLine[1]) )  1;

1003 if–
	`sqlôeSåNICmp
(
zLöe
,"go",2)==0 && 
	`_Æl_whôe•a˚
(&zLine[2]) ){

1007 
	}
}

1016 
	$¥o˚ss_öput
(
ˇŒback_d©a
 *
p
, 
FILE
 *
ö
){

1017 *
zLöe
;

1018 *
zSql
 = 0;

1019 
nSql
 = 0;

1020 *
zEºMsg
;

1021 
rc
;

1022  
	`fÊush
(
p
->
out
), (
zLöe
 = 
	`⁄e_öput_löe
(
zSql
, 
ö
))!=0 ){

1023 if–
£íI¡îru±
 ){

1024 if–
ö
!=0 ) ;

1025 
£íI¡îru±
 = 0;

1027 if–
p
->
echoOn
 ) 
	`¥ötf
("%s\n", 
zLöe
);

1028 if–(
zSql
==0 || zSql[0]==0Ë&& 
	`_Æl_whôe•a˚
(
zLöe
) ) ;

1029 if–
zLöe
 && zLöe[0]=='.' && 
nSql
==0 ){

1030 
rc
 = 
	`do_mëa_comm™d
(
zLöe
, 
p
);

1031 
	`‰ì
(
zLöe
);

1032 if–
rc
 ) ;

1035 if–
	`_is_comm™d_ãrmö©‹
(
zLöe
) ){

1036 
	`°r˝y
(
zLöe
,";");

1038 if–
zSql
==0 ){

1039 
i
;

1040 
i
=0; 
zLöe
[i] && 
	`is•a˚
(zLine[i]); i++){}

1041 if–
zLöe
[
i
]!=0 ){

1042 
nSql
 = 
	`°æí
(
zLöe
);

1043 
zSql
 = 
	`mÆloc
–
nSql
+1 );

1044 
	`°r˝y
(
zSql
, 
zLöe
);

1047 
Àn
 = 
	`°æí
(
zLöe
);

1048 
zSql
 = 
	`ªÆloc
–zSql, 
nSql
 + 
Àn
 + 2 );

1049 if–
zSql
==0 ){

1050 
	`Ârötf
(
°dîr
,"%s: ouào‡mem‹y!\n", 
Argv0
);

1051 
	`exô
(1);

1053 
	`°r˝y
(&
zSql
[
nSql
++], "\n");

1054 
	`°r˝y
(&
zSql
[
nSql
], 
zLöe
);

1055 
nSql
 +
Àn
;

1057 
	`‰ì
(
zLöe
);

1058 if–
zSql
 && 
	`_íds_wôh_£micﬁ⁄
(zSql, 
nSql
Ë&& 
	`sqlôe_com∂ëe
(zSql) ){

1059 
p
->
˙t
 = 0;

1060 
	`›í_db
(
p
);

1061 
rc
 = 
	`sqlôe_exec
(
p
->
db
, 
zSql
, 
ˇŒback
,Ö, &
zEºMsg
);

1062 if–
rc
 || 
zEºMsg
 ){

1063 if–
ö
!=0 && !
p
->
echoOn
 ) 
	`¥ötf
("%s\n",
zSql
);

1064 if–
zEºMsg
!=0 ){

1065 
	`¥ötf
("SQLÉº‹: %s\n", 
zEºMsg
);

1066 
	`sqlôe_‰ìmem
(
zEºMsg
);

1067 
zEºMsg
 = 0;

1069 
	`¥ötf
("SQLÉº‹: %s\n", 
	`sqlôe_îr‹_°rög
(
rc
));

1072 
	`‰ì
(
zSql
);

1073 
zSql
 = 0;

1074 
nSql
 = 0;

1077 if–
zSql
 ){

1078 if–!
	`_Æl_whôe•a˚
(
zSql
ËË
	`¥ötf
("Incomplete SQL: %s\n", zSql);

1079 
	`‰ì
(
zSql
);

1081 
	}
}

1089 *
	$föd_home_dú
(){

1090 *
home_dú
 = 
NULL
;

1092 #i‡!
	`deföed
(
_WIN32
Ë&& !deföed(
WIN32
Ë&& !deföed(
__MACOS__
)

1093 
∑sswd
 *
pwít
;

1094 
uid_t
 
uid
 = 
	`gëuid
();

1095 if–(
pwít
=
	`gëpwuid
(
uid
)Ë!
NULL
) {

1096 
home_dú
 = 
pwít
->
pw_dú
;

1100 #ifde‡
__MACOS__


1101 
home_∑th
[
_MAX_PATH
+1];

1102 
home_dú
 = 
	`gëcwd
(
home_∑th
, 
_MAX_PATH
);

1105 i‡(!
home_dú
) {

1106 
home_dú
 = 
	`gëív
("HOME");

1107 i‡(!
home_dú
) {

1108 
home_dú
 = 
	`gëív
("HOMEPATH");

1112 #i‡
	`deföed
(
_WIN32
Ë|| deföed(
WIN32
)

1113 i‡(!
home_dú
) {

1114 
home_dú
 = "c:";

1118 if–
home_dú
 ){

1119 *
z
 = 
	`mÆloc
–
	`°æí
(
home_dú
)+1 );

1120 if–
z
 ) 
	`°r˝y
(z, 
home_dú
);

1121 
home_dú
 = 
z
;

1124  
home_dú
;

1125 
	}
}

1131 
	$¥o˚ss_sqlôîc
(

1132 
ˇŒback_d©a
 *
p
,

1133 c⁄° *
sqlôîc_ovîride


1135 *
home_dú
 = 
NULL
;

1136 c⁄° *
sqlôîc
 = 
sqlôîc_ovîride
;

1137 *
zBuf
;

1138 
FILE
 *
ö
 = 
NULL
;

1140 i‡(
sqlôîc
 =
NULL
) {

1141 
home_dú
 = 
	`föd_home_dú
();

1142 if–
home_dú
==0 ){

1143 
	`Ârötf
(
°dîr
,"%s: c™nŸÜoˇã you∏homêdúe˘‹y!\n", 
Argv0
);

1146 
zBuf
 = 
	`mÆloc
(
	`°æí
(
home_dú
) + 15);

1147 if–
zBuf
==0 ){

1148 
	`Ârötf
(
°dîr
,"%s: ouào‡mem‹y!\n", 
Argv0
);

1149 
	`exô
(1);

1151 
	`•rötf
(
zBuf
,"%s/.sqlôîc",
home_dú
);

1152 
	`‰ì
(
home_dú
);

1153 
sqlôîc
 = (c⁄° *)
zBuf
;

1155 
ö
 = 
	`f›í
(
sqlôîc
,"rb");

1156 if–
ö
 ){

1157 if–
	`ißây
(
	`fûío
(
°dout
)) ){

1158 
	`¥ötf
("LﬂdögÑesour˚†‰om %s\n",
sqlôîc
);

1160 
	`¥o˚ss_öput
(
p
,
ö
);

1161 
	`f˛o£
(
ö
);

1164 
	}
}

1169 c⁄° 
	gzO±i⁄s
[] =

1175 #ifde‡
SQLITE_HAS_CODEC


1185 
	$ußge
(
showDëaû
){

1186 
	`Ârötf
(
°dîr
, "Ußge: %†[OPTIONS] FILENAME [SQL]\n", 
Argv0
);

1187 if–
showDëaû
 ){

1188 
	`Ârötf
(
°dîr
, "O±i⁄†¨e:\n%s", 
zO±i⁄s
);

1190 
	`Ârötf
(
°dîr
, "UseÅhe -help option forádditional information\n");

1192 
	`exô
(1);

1193 
	}
}

1198 
	$maö_öô
(
ˇŒback_d©a
 *
d©a
) {

1199 
	`mem£t
(
d©a
, 0, (*data));

1200 
d©a
->
mode
 = 
MODE_Li°
;

1201 
	`°r˝y
(
d©a
->
£∑øt‹
,"|");

1202 
d©a
->
showHódî
 = 0;

1203 
	`°r˝y
(
maöProm±
,"sqlite> ");

1204 
	`°r˝y
(
c⁄töueProm±
," ...> ");

1205 
	}
}

1207 
	$maö
(
¨gc
, **
¨gv
){

1208 *
zEºMsg
 = 0;

1209 
ˇŒback_d©a
 
d©a
;

1210 c⁄° *
zInôFûe
 = 0;

1211 *
zFú°Cmd
 = 0;

1212 
i
;

1213 
	`sqlôeOsFûeExi°s
(const *);

1215 #ifde‡
__MACOS__


1216 
¨gc
 = 
	`ccomm™d
(&
¨gv
);

1219 
Argv0
 = 
¨gv
[0];

1220 
	`maö_öô
(&
d©a
);

1225 #ifde‡
SIGINT


1226 
	`sig«l
(
SIGINT
, 
öãºu±_h™dÀr
);

1233 
i
=1; i<
¨gc
-1; i++){

1234 if–
¨gv
[
i
][0]!='-' ) ;

1235 if–
	`°rcmp
(
¨gv
[
i
],"-separator")==0 || strcmp(argv[i],"-nullvalue")==0 ){

1236 
i
++;

1237 }if–
	`°rcmp
(
¨gv
[
i
],"-init")==0 ){

1238 
i
++;

1239 
zInôFûe
 = 
¨gv
[
i
];

1240 }if–
	`°rcmp
(
¨gv
[
i
],"-key")==0 ){

1241 
i
++;

1242 
d©a
.
zKey
 = 
	`sqlôe_m¥ötf
("%s",
¨gv
[
i
]);

1245 if–
i
<
¨gc
 ){

1246 
d©a
.
zDbFûíame
 = 
¨gv
[
i
++];

1248 
d©a
.
zDbFûíame
 = ":memory:";

1250 if–
i
<
¨gc
 ){

1251 
zFú°Cmd
 = 
¨gv
[
i
++];

1253 
d©a
.
out
 = 
°dout
;

1260 if–
	`sqlôeOsFûeExi°s
(
d©a
.
zDbFûíame
) ){

1261 
	`›í_db
(&
d©a
);

1268 
	`¥o˚ss_sqlôîc
(&
d©a
,
zInôFûe
);

1275 
i
=1; i<
¨gc
 && 
¨gv
[i][0]=='-'; i++){

1276 *
z
 = 
¨gv
[
i
];

1277 if–
	`°rcmp
(
z
,"-init")==0 || strcmp(z,"-key")==0 ){

1278 
i
++;

1279 }if–
	`°rcmp
(
z
,"-html")==0 ){

1280 
d©a
.
mode
 = 
MODE_Html
;

1281 }if–
	`°rcmp
(
z
,"-list")==0 ){

1282 
d©a
.
mode
 = 
MODE_Li°
;

1283 }if–
	`°rcmp
(
z
,"-line")==0 ){

1284 
d©a
.
mode
 = 
MODE_Löe
;

1285 }if–
	`°rcmp
(
z
,"-column")==0 ){

1286 
d©a
.
mode
 = 
MODE_Cﬁumn
;

1287 }if–
	`°rcmp
(
z
,"-separator")==0 ){

1288 
i
++;

1289 
	`•rötf
(
d©a
.
£∑øt‹
,"%.*s",()(d©a.£∑øt‹)-1,
¨gv
[
i
]);

1290 }if–
	`°rcmp
(
z
,"-nullvalue")==0 ){

1291 
i
++;

1292 
	`•rötf
(
d©a
.
nuŒvÆue
,"%.*s",()(d©a.nuŒvÆue)-1,
¨gv
[
i
]);

1293 }if–
	`°rcmp
(
z
,"-header")==0 ){

1294 
d©a
.
showHódî
 = 1;

1295 }if–
	`°rcmp
(
z
,"-noheader")==0 ){

1296 
d©a
.
showHódî
 = 0;

1297 }if–
	`°rcmp
(
z
,"-echo")==0 ){

1298 
d©a
.
echoOn
 = 1;

1299 }if–
	`°rcmp
(
z
,"-version")==0 ){

1300 
	`¥ötf
("%s\n", 
sqlôe_vîsi⁄
);

1302 }if–
	`°rcmp
(
z
,"-help")==0 ){

1303 
	`ußge
(1);

1305 
	`Ârötf
(
°dîr
,"%s: unknow¿›ti⁄: %s\n", 
Argv0
, 
z
);

1306 
	`Ârötf
(
°dîr
,"Use -help foráÜist of options.\n");

1311 if–
zFú°Cmd
 ){

1314 if–
zFú°Cmd
[0]=='.' ){

1315 
	`do_mëa_comm™d
(
zFú°Cmd
, &
d©a
);

1316 
	`exô
(0);

1318 
rc
;

1319 
	`›í_db
(&
d©a
);

1320 
rc
 = 
	`sqlôe_exec
(
d©a
.
db
, 
zFú°Cmd
, 
ˇŒback
, &d©a, &
zEºMsg
);

1321 if–
rc
!=0 && 
zEºMsg
!=0 ){

1322 
	`Ârötf
(
°dîr
,"SQLÉº‹: %s\n", 
zEºMsg
);

1323 
	`exô
(1);

1329 if–
	`ißây
(
	`fûío
(
°dout
)Ë&& ißây(fûío(
°dö
)) ){

1330 *
zHome
;

1331 *
zHi°‹y
 = 0;

1332 
	`¥ötf
(

1335 
sqlôe_vîsi⁄


1337 
zHome
 = 
	`föd_home_dú
();

1338 if–
zHome
 && (
zHi°‹y
 = 
	`mÆloc
(
	`°æí
(zHome)+20))!=0 ){

1339 
	`•rötf
(
zHi°‹y
,"%s/.sqlôe_hi°‹y", 
zHome
);

1341 if–
zHi°‹y
 ) 
	`ªad_hi°‹y
(zHistory);

1342 
	`¥o˚ss_öput
(&
d©a
, 0);

1343 if–
zHi°‹y
 ){

1344 
	`°iÊe_hi°‹y
(100);

1345 
	`wrôe_hi°‹y
(
zHi°‹y
);

1348 
	`¥o˚ss_öput
(&
d©a
, 
°dö
);

1351 
	`£t_èbÀ_«me
(&
d©a
, 0);

1352 if–
db
 ) 
	`sqlôe_˛o£
(db);

1354 
	}
}

	@sqliteInt.h

16 
	~"c⁄fig.h
"

17 
	~"sqlôe.h
"

18 
	~"hash.h
"

19 
	~"∑r£.h
"

20 
	~"båì.h
"

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<as£π.h
>

30 
	#MAX_PAGES
 2000

	)

31 
	#TEMP_PAGES
 500

	)

43 
	#NULL_ALWAYS_DISTINCT
 0

	)

57 
	#NULL_DISTINCT_FOR_UNIQUE
 1

	)

65 
	#MAX_ATTACHED
 10

	)

76 #i‚de‡
TEMP_STORE


77 
	#TEMP_STORE
 1

	)

99 #i‚de‡
UINT32_TYPE


100 
	#UINT32_TYPE
 

	)

102 #i‚de‡
UINT16_TYPE


103 
	#UINT16_TYPE
 

	)

105 #i‚de‡
INT16_TYPE


106 
	#INT16_TYPE
 

	)

108 #i‚de‡
UINT8_TYPE


109 
	#UINT8_TYPE
 

	)

111 #i‚de‡
INT8_TYPE


112 
	#INT8_TYPE
 sig√d 

	)

114 #i‚de‡
INTPTR_TYPE


115 #i‡
SQLITE_PTR_SZ
==4

116 
	#INTPTR_TYPE
 

	)

118 
	#INTPTR_TYPE
 

	)

121 
UINT32_TYPE
 
	tu32
;

122 
UINT16_TYPE
 
	tu16
;

123 
INT16_TYPE
 
	ti16
;

124 
UINT8_TYPE
 
	tu8
;

125 
UINT8_TYPE
 
	ti8
;

126 
INTPTR_TYPE
 
	t±r
;

127 
	tINTPTR_TYPE
 
	tu±r
;

132 
	~"vdbe.h
"

139 #i‚de‡
LONGDOUBLE_TYPE


140 
	#LONGDOUBLE_TYPE
 

	)

147 
	#Addr
(
X
Ë((
u±r
)X)

	)

163 
	#MAX_BYTES_PER_ROW
 1048576

	)

180 #ifde‡
MEMORY_DEBUG


181 
	#sqlôeMÆloc
(
X
Ë
	`sqlôeMÆloc_
(X,1,
__FILE__
,
__LINE__
)

	)

182 
	#sqlôeMÆlocRaw
(
X
Ë
	`sqlôeMÆloc_
(X,0,
__FILE__
,
__LINE__
)

	)

183 
	#sqlôeFªe
(
X
Ë
	`sqlôeFªe_
(X,
__FILE__
,
__LINE__
)

	)

184 
	#sqlôeRóŒoc
(
X
,
Y
Ë
	`sqlôeRóŒoc_
(X,Y,
__FILE__
,
__LINE__
)

	)

185 
	#sqlôeSåDup
(
X
Ë
	`sqlôeSåDup_
(X,
__FILE__
,
__LINE__
)

	)

186 
	#sqlôeSåNDup
(
X
,
Y
Ë
	`sqlôeSåNDup_
(X,Y,
__FILE__
,
__LINE__
)

	)

187 
sqlôeSåRóŒoc
(**);

189 
	#sqlôeRóŒoc_
(
X
,
Y
Ë
	`sqlôeRóŒoc
(X,Y)

	)

190 
	#sqlôeSåRóŒoc
(
X
)

	)

197 
sqlôe_mÆloc_Áûed
;

203 #ifde‡
MEMORY_DEBUG


204 
sqlôe_nMÆloc
;

205 
sqlôe_nFªe
;

206 
sqlôe_iMÆlocFaû
;

214 
	#MASTER_NAME
 "sqlôe_ma°î"

	)

215 
	#TEMP_MASTER_NAME
 "sqlôe_ãmp_ma°î"

	)

220 
	#SCHEMA_TABLE
(
x
Ë(x?
TEMP_MASTER_NAME
:
MASTER_NAME
)

	)

226 
	#AºaySize
(
X
Ë((X)/(X[0]))

	)

231 
Cﬁumn
 
	tCﬁumn
;

232 
TabÀ
 
	tTabÀ
;

233 
Index
 
	tIndex
;

234 
In°ru˘i⁄
 
	tIn°ru˘i⁄
;

235 
Ex¥
 
	tEx¥
;

236 
Ex¥Li°
 
	tEx¥Li°
;

237 
P¨£
 
	tP¨£
;

238 
Tokí
 
	tTokí
;

239 
IdLi°
 
	tIdLi°
;

240 
SrcLi°
 
	tSrcLi°
;

241 
WhîeInfo
 
	tWhîeInfo
;

242 
WhîeLevñ
 
	tWhîeLevñ
;

243 
Sñe˘
 
	tSñe˘
;

244 
AggEx¥
 
	tAggEx¥
;

245 
FuncDef
 
	tFuncDef
;

246 
Triggî
 
	tTriggî
;

247 
TriggîSãp
 
	tTriggîSãp
;

248 
TriggîSèck
 
	tTriggîSèck
;

249 
FKey
 
	tFKey
;

250 
Db
 
	tDb
;

251 
AuthC⁄ãxt
 
	tAuthC⁄ãxt
;

260 
	sDb
 {

261 *
	mzName
;

262 
Båì
 *
	mpBt
;

263 
	mschema_cookõ
;

264 
Hash
 
	mtblHash
;

265 
Hash
 
	midxHash
;

266 
Hash
 
	måigHash
;

267 
Hash
 
	maFKey
;

268 
u8
 
	möTøns
;

269 
u16
 
	mÊags
;

270 *
	mpAux
;

271 (*
	mxFªeAux
)(*);

278 
	#DbHasPr›îty
(
D
,
I
,
P
Ë(((D)->
aDb
[I].
Êags
&(P))==(P))

	)

279 
	#DbHasAnyPr›îty
(
D
,
I
,
P
Ë(((D)->
aDb
[I].
Êags
&(P))!=0)

	)

280 
	#DbSëPr›îty
(
D
,
I
,
P
Ë(D)->
aDb
[I].
Êags
|=(P)

	)

281 
	#DbCÀ¨Pr›îty
(
D
,
I
,
P
Ë(D)->
aDb
[I].
Êags
&=~(P)

	)

300 
	#DB_Locked
 0x0001

	)

301 
	#DB_Cookõ
 0x0002

	)

302 
	#DB_SchemaLﬂded
 0x0004

	)

303 
	#DB_Uƒe£tVõws
 0x0008

	)

344 
	ssqlôe
 {

345 
	mnDb
;

346 
Db
 *
	maDb
;

347 
Db
 
	maDbSètic
[2];

348 
	mÊags
;

349 
u8
 
	mfûe_f‹m©
;

350 
u8
 
	mß„ty_Àvñ
;

351 
u8
 
	mw™t_to_˛o£
;

352 
u8
 
	mãmp_°‹e
;

353 
u8
 
	m⁄Eº‹
;

354 
	m√xt_cookõ
;

355 
	mˇche_size
;

356 
	mnTabÀ
;

357 *
	mpBusyArg
;

358 (*
	mxBusyCÆlback
)(*,const *,);

359 *
	mpCommôArg
;

360 (*
	mxCommôCÆlback
)(*);

361 
Hash
 
	maFunc
;

362 
	mœ°Rowid
;

363 
	m¥i‹NewRowid
;

364 
	mmagic
;

365 
	mnCh™ge
;

366 
	mlsCh™ge
;

367 
	mcsCh™ge
;

368 
	ssqlôeInôInfo
 {

369 
	miDb
;

370 
	m√wTnum
;

371 
u8
 
	mbusy
;

372 } 
	möô
;

373 
Vdbe
 *
	mpVdbe
;

374 (*
	mxTø˚
)(*,const *);

375 *
	mpTø˚Arg
;

376 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


377 (*
	mxAuth
)(*,,const *,const *,const *,const *);

379 *
	mpAuthArg
;

381 #i‚de‡
SQLITE_OMIT_PROGRESS_CALLBACK


382 (*
	mxProgªss
)(*);

383 *
	mpProgªssArg
;

384 
	mnProgªssOps
;

395 
	#SQLITE_VdbeTø˚
 0x00000001

	)

396 
	#SQLITE_Inôülized
 0x00000002

	)

397 
	#SQLITE_I¡îru±
 0x00000004

	)

398 
	#SQLITE_InTøns
 0x00000008

	)

399 
	#SQLITE_I¡înCh™ges
 0x00000010

	)

400 
	#SQLITE_FuŒCﬁNames
 0x00000020

	)

401 
	#SQLITE_Sh‹tCﬁNames
 0x00000040

	)

402 
	#SQLITE_Cou¡Rows
 0x00000080

	)

405 
	#SQLITE_NuŒCÆlback
 0x00000100

	)

407 
	#SQLITE_Rï‹tTy≥s
 0x00000200

	)

415 
	#SQLITE_MAGIC_OPEN
 0xa029a697

	)

416 
	#SQLITE_MAGIC_CLOSED
 0x9f3c2d33

	)

417 
	#SQLITE_MAGIC_BUSY
 0xf03b7906

	)

418 
	#SQLITE_MAGIC_ERROR
 0xb5357930

	)

426 
	sFuncDef
 {

427 (*
	mxFunc
)(
	msqlôe_func
*,,const **);

428 (*
	mxSãp
)(
	msqlôe_func
*,,const **);

429 (*
	mxFöÆize
)(
	msqlôe_func
*);

430 sig√d 
	mnArg
;

431 sig√d 
	md©aTy≥
;

433 
u8
 
	mö˛udeTy≥s
;

434 *
	mpU£rD©a
;

435 
FuncDef
 *
	mpNext
;

442 
	sCﬁumn
 {

443 *
	mzName
;

444 *
	mzDÊt
;

445 *
	mzTy≥
;

446 
u8
 
	mnŸNuŒ
;

447 
u8
 
	misPrimKey
;

448 
u8
 
	ms‹tOrdî
;

449 
u8
 
	mdŸãdName
;

458 
	#SQLITE_SO_UNK
 0

	)

459 
	#SQLITE_SO_TEXT
 2

	)

460 
	#SQLITE_SO_NUM
 4

	)

461 
	#SQLITE_SO_TYPEMASK
 6

	)

462 
	#SQLITE_SO_ASC
 0

	)

463 
	#SQLITE_SO_DESC
 1

	)

464 
	#SQLITE_SO_DIRMASK
 1

	)

496 
	sTabÀ
 {

497 *
	mzName
;

498 
	mnCﬁ
;

499 
Cﬁumn
 *
	maCﬁ
;

500 
	miPKey
;

501 
Index
 *
	mpIndex
;

502 
	mäum
;

503 
Sñe˘
 *
	mpSñe˘
;

504 
u8
 
	mªadO∆y
;

505 
u8
 
	miDb
;

506 
u8
 
	misTønsõ¡
;

507 
u8
 
	mhasPrimKey
;

508 
u8
 
	mkeyC⁄f
;

509 
Triggî
 *
	mpTriggî
;

510 
FKey
 *
	mpFKey
;

538 
	sFKey
 {

539 
TabÀ
 *
	mpFrom
;

540 
FKey
 *
	mpNextFrom
;

541 *
	mzTo
;

542 
FKey
 *
	mpNextTo
;

543 
	mnCﬁ
;

544 
	ssCﬁM≠
 {

545 
	miFrom
;

546 *
	mzCﬁ
;

547 } *
	maCﬁ
;

548 
u8
 
	misDe„ºed
;

549 
u8
 
	mupd©eC⁄f
;

550 
u8
 
	mdñëeC⁄f
;

551 
u8
 
	mö£πC⁄f
;

579 
	#OE_N⁄e
 0

	)

580 
	#OE_Rﬁlback
 1

	)

581 
	#OE_Ab‹t
 2

	)

582 
	#OE_Faû
 3

	)

583 
	#OE_Ign‹e
 4

	)

584 
	#OE_Rïœ˚
 5

	)

586 
	#OE_Re°ri˘
 6

	)

587 
	#OE_SëNuŒ
 7

	)

588 
	#OE_SëDÊt
 8

	)

589 
	#OE_Casˇde
 9

	)

591 
	#OE_DeÁu…
 99

	)

619 
	sIndex
 {

620 *
	mzName
;

621 
	mnCﬁumn
;

622 *
	maiCﬁumn
;

623 
TabÀ
 *
	mpTabÀ
;

624 
	mäum
;

625 
u8
 
	m⁄Eº‹
;

626 
u8
 
	mautoIndex
;

627 
u8
 
	miDb
;

628 
Index
 *
	mpNext
;

639 
	sTokí
 {

640 c⁄° *
	mz
;

641 
	mdyn
 : 1;

642 
	mn
 : 31;

681 
	sEx¥
 {

682 
u8
 
	m›
;

683 
u8
 
	md©aTy≥
;

684 
u8
 
	miDb
;

685 
u8
 
	mÊags
;

686 
Ex¥
 *
	mpLe·
, *
	mpRight
;

687 
Ex¥Li°
 *
	mpLi°
;

689 
Tokí
 
	mtokí
;

690 
Tokí
 
	m•™
;

691 
	miTabÀ
, 
	miCﬁumn
;

693 
	miAgg
;

695 
Sñe˘
 *
	mpSñe˘
;

702 
	#EP_FromJoö
 0x0001

	)

708 
	#Ex¥HasPr›îty
(
E
,
P
Ë(((E)->
Êags
&(P))==(P))

	)

709 
	#Ex¥HasAnyPr›îty
(
E
,
P
Ë(((E)->
Êags
&(P))!=0)

	)

710 
	#Ex¥SëPr›îty
(
E
,
P
Ë(E)->
Êags
|=(P)

	)

711 
	#Ex¥CÀ¨Pr›îty
(
E
,
P
Ë(E)->
Êags
&=~(P)

	)

721 
	sEx¥Li°
 {

722 
	mnEx¥
;

723 
	mnAŒoc
;

724 
	sEx¥Li°_ôem
 {

725 
Ex¥
 *
	mpEx¥
;

726 *
	mzName
;

727 
u8
 
	ms‹tOrdî
;

728 
u8
 
	misAgg
;

729 
u8
 
	md⁄e
;

730 } *
	ma
;

748 
	sIdLi°
 {

749 
	mnId
;

750 
	mnAŒoc
;

751 
	sIdLi°_ôem
 {

752 *
	mzName
;

753 
	midx
;

754 } *
	ma
;

768 
	sSrcLi°
 {

769 
i16
 
	mnSrc
;

770 
i16
 
	mnAŒoc
;

771 
	sSrcLi°_ôem
 {

772 *
	mzD©aba£
;

773 *
	mzName
;

774 *
	mzAlüs
;

775 
TabÀ
 *
	mpTab
;

776 
Sñe˘
 *
	mpSñe˘
;

777 
	mjoöty≥
;

778 
	miCurs‹
;

779 
Ex¥
 *
	mpOn
;

780 
IdLi°
 *
	mpUsög
;

781 } 
	ma
[1];

787 
	#JT_INNER
 0x0001

	)

788 
	#JT_NATURAL
 0x0002

	)

789 
	#JT_LEFT
 0x0004

	)

790 
	#JT_RIGHT
 0x0008

	)

791 
	#JT_OUTER
 0x0010

	)

792 
	#JT_ERROR
 0x0020

	)

800 
	sWhîeLevñ
 {

801 
	miMem
;

802 
Index
 *
	mpIdx
;

803 
	miCur
;

804 
	msc‹e
;

805 
	mbrk
;

806 
	mc⁄t
;

807 
	m›
, 
	mp1
, 
	mp2
;

808 
	miLe·Joö
;

809 
	mt›
;

810 
	möOp
, 
	möP1
, 
	möP2
;

811 
	mbRev
;

821 
	sWhîeInfo
 {

822 
P¨£
 *
	mpP¨£
;

823 
SrcLi°
 *
	mpTabLi°
;

824 
	miC⁄töue
;

825 
	miBªak
;

826 
	mnLevñ
;

827 
	mßvedNTab
;

828 
	m≥akNTab
;

829 
WhîeLevñ
 
	ma
[1];

850 
	sSñe˘
 {

851 
Ex¥Li°
 *
	mpELi°
;

852 
u8
 
	m›
;

853 
u8
 
	misDi°ö˘
;

854 
SrcLi°
 *
	mpSrc
;

855 
Ex¥
 *
	mpWhîe
;

856 
Ex¥Li°
 *
	mpGroupBy
;

857 
Ex¥
 *
	mpHavög
;

858 
Ex¥Li°
 *
	mpOrdîBy
;

859 
Sñe˘
 *
	mpPri‹
;

860 
	mnLimô
, 
	mnOff£t
;

861 
	miLimô
, 
	miOff£t
;

862 *
	mzSñe˘
;

868 
	#SRT_CÆlback
 1

	)

869 
	#SRT_Mem
 2

	)

870 
	#SRT_Së
 3

	)

871 
	#SRT_Uni⁄
 5

	)

872 
	#SRT_Ex˚±
 6

	)

873 
	#SRT_TabÀ
 7

	)

874 
	#SRT_TempTabÀ
 8

	)

875 
	#SRT_Disˇrd
 9

	)

876 
	#SRT_S‹ãr
 10

	)

877 
	#SRT_Subroutöe
 11

	)

898 
	sAggEx¥
 {

899 
	misAgg
;

900 
Ex¥
 *
	mpEx¥
;

901 
FuncDef
 *
	mpFunc
;

909 
	sP¨£
 {

910 
sqlôe
 *
	mdb
;

911 
	mrc
;

912 *
	mzEºMsg
;

913 
Tokí
 
	msEºTokí
;

914 
Tokí
 
	msFú°Tokí
;

915 
Tokí
 
	msLa°Tokí
;

916 c⁄° *
	mzTaû
;

917 
TabÀ
 *
	mpNewTabÀ
;

918 
Vdbe
 *
	mpVdbe
;

919 
u8
 
	mcﬁNamesSë
;

920 
u8
 
	mex∂aö
;

921 
u8
 
	m«meCœsh
;

922 
u8
 
	mu£Agg
;

924 
	mnEº
;

925 
	mnTab
;

926 
	mnMem
;

927 
	mnSë
;

928 
	mnAgg
;

929 
	mnV¨
;

930 
AggEx¥
 *
	maAgg
;

931 c⁄° *
	mzAuthC⁄ãxt
;

932 
Triggî
 *
	mpNewTriggî
;

933 
TriggîSèck
 *
	måigSèck
;

940 
	sAuthC⁄ãxt
 {

941 c⁄° *
	mzAuthC⁄ãxt
;

942 
P¨£
 *
	mpP¨£
;

948 
	#OPFLAG_NCHANGE
 1

	)

949 
	#OPFLAG_LASTROWID
 2

	)

950 
	#OPFLAG_CSCHANGE
 4

	)

967 
	sTriggî
 {

968 *
	m«me
;

969 *
	mèbÀ
;

970 
u8
 
	miDb
;

971 
u8
 
	miTabDb
;

972 
u8
 
	m›
;

973 
u8
 
	må_tm
;

974 
Ex¥
 *
	mpWhí
;

975 
IdLi°
 *
	mpCﬁumns
;

977 
	mf‹óch
;

978 
Tokí
 
	m«meTokí
;

980 
TriggîSãp
 *
	m°ï_li°
;

981 
Triggî
 *
	mpNext
;

1022 
	sTriggîSãp
 {

1023 
	m›
;

1024 
	m‹c⁄f
;

1025 
Triggî
 *
	mpTrig
;

1027 
Sñe˘
 *
	mpSñe˘
;

1029 
Tokí
 
	mèrgë
;

1030 
Ex¥
 *
	mpWhîe
;

1031 
Ex¥Li°
 *
	mpEx¥Li°
;

1033 
IdLi°
 *
	mpIdLi°
;

1035 
TriggîSãp
 * 
	mpNext
;

1065 
	sTriggîSèck
 {

1066 
TabÀ
 *
	mpTab
;

1067 
	m√wIdx
;

1068 
	mﬁdIdx
;

1069 
	m‹c⁄f
;

1070 
	mign‹eJump
;

1071 
Triggî
 *
	mpTriggî
;

1072 
TriggîSèck
 *
	mpNext
;

1080 
DbFixî
 
	tDbFixî
;

1081 
	sDbFixî
 {

1082 
P¨£
 *
	mpP¨£
;

1083 c⁄° *
	mzDb
;

1084 c⁄° *
	mzTy≥
;

1085 c⁄° 
Tokí
 *
	mpName
;

1093 
Æways_code_åiggî_£tup
;

1098 
sqlôeSåICmp
(const *, const *);

1099 
sqlôeSåNICmp
(const *, const *, );

1100 
sqlôeHashNoCa£
(const *, );

1101 
sqlôeIsNumbî
(const *);

1102 
sqlôeCom∑ª
(const *, const *);

1103 
sqlôeS‹tCom∑ª
(const *, const *);

1104 
sqlôeRólToS‹èbÀ
(
r
, *);

1105 #ifde‡
MEMORY_DEBUG


1106 *
sqlôeMÆloc_
(,,*,);

1107 
sqlôeFªe_
(*,*,);

1108 *
sqlôeRóŒoc_
(*,,*,);

1109 *
sqlôeSåDup_
(const *,*,);

1110 *
sqlôeSåNDup_
(const *, ,*,);

1111 
sqlôeCheckMem‹y
(*,);

1113 *
sqlôeMÆloc
();

1114 *
sqlôeMÆlocRaw
();

1115 
sqlôeFªe
(*);

1116 *
sqlôeRóŒoc
(*,);

1117 *
sqlôeSåDup
(const *);

1118 *
sqlôeSåNDup
(const *, );

1119 
	#sqlôeCheckMem‹y
(
a
,
b
)

	)

1121 *
sqlôeMPrötf
(const *, ...);

1122 *
sqlôeVMPrötf
(c⁄° *, 
va_li°
);

1123 
sqlôeSëSåög
(**, ...);

1124 
sqlôeSëNSåög
(**, ...);

1125 
sqlôeEº‹Msg
(
P¨£
*, const *, ...);

1126 
sqlôeDequŸe
(*);

1127 
sqlôeKeyw‹dCode
(const *, );

1128 
sqlôeRunP¨£r
(
P¨£
*, const *, **);

1129 
sqlôeExec
(
P¨£
*);

1130 
Ex¥
 *
sqlôeEx¥
(, Ex¥*, Ex¥*, 
Tokí
*);

1131 
sqlôeEx¥S∑n
(
Ex¥
*,
Tokí
*,Token*);

1132 
Ex¥
 *
sqlôeEx¥Fun˘i⁄
(
Ex¥Li°
*, 
Tokí
*);

1133 
sqlôeEx¥Dñëe
(
Ex¥
*);

1134 
Ex¥Li°
 *
sqlôeEx¥Li°Aµíd
(Ex¥Li°*,
Ex¥
*,
Tokí
*);

1135 
sqlôeEx¥Li°Dñëe
(
Ex¥Li°
*);

1136 
sqlôeInô
(
sqlôe
*, **);

1137 
sqlôePøgma
(
P¨£
*,
Tokí
*,Token*,);

1138 
sqlôeRe£tI¡î«lSchema
(
sqlôe
*, );

1139 
sqlôeBegöP¨£
(
P¨£
*,);

1140 
sqlôeRﬁlbackI¡î«lCh™ges
(
sqlôe
*);

1141 
sqlôeCommôI¡î«lCh™ges
(
sqlôe
*);

1142 
TabÀ
 *
sqlôeResu…SëOfSñe˘
(
P¨£
*,*,
Sñe˘
*);

1143 
sqlôeO≥nMa°îTabÀ
(
Vdbe
 *
v
, );

1144 
sqlôeSèπTabÀ
(
P¨£
*,
Tokí
*,Token*,,);

1145 
sqlôeAddCﬁumn
(
P¨£
*,
Tokí
*);

1146 
sqlôeAddNŸNuŒ
(
P¨£
*, );

1147 
sqlôeAddPrim¨yKey
(
P¨£
*, 
IdLi°
*, );

1148 
sqlôeAddCﬁumnTy≥
(
P¨£
*,
Tokí
*,Token*);

1149 
sqlôeAddDeÁu…VÆue
(
P¨£
*,
Tokí
*,);

1150 
sqlôeCﬁœãTy≥
(const *, );

1151 
sqlôeAddCﬁœãTy≥
(
P¨£
*, );

1152 
sqlôeEndTabÀ
(
P¨£
*,
Tokí
*,
Sñe˘
*);

1153 
sqlôeCª©eVõw
(
P¨£
*,
Tokí
*,Tokí*,
Sñe˘
*,);

1154 
sqlôeVõwGëCﬁumnNames
(
P¨£
*,
TabÀ
*);

1155 
sqlôeDr›TabÀ
(
P¨£
*, 
Tokí
*, );

1156 
sqlôeDñëeTabÀ
(
sqlôe
*, 
TabÀ
*);

1157 
sqlôeIn£π
(
P¨£
*, 
SrcLi°
*, 
Ex¥Li°
*, 
Sñe˘
*, 
IdLi°
*, );

1158 
IdLi°
 *
sqlôeIdLi°Aµíd
(IdLi°*, 
Tokí
*);

1159 
sqlôeIdLi°Index
(
IdLi°
*,const *);

1160 
SrcLi°
 *
sqlôeSrcLi°Aµíd
(SrcLi°*, 
Tokí
*, Token*);

1161 
sqlôeSrcLi°AddAlüs
(
SrcLi°
*, 
Tokí
*);

1162 
sqlôeSrcLi°AssignCurs‹s
(
P¨£
*, 
SrcLi°
*);

1163 
sqlôeIdLi°Dñëe
(
IdLi°
*);

1164 
sqlôeSrcLi°Dñëe
(
SrcLi°
*);

1165 
sqlôeCª©eIndex
(
P¨£
*,
Tokí
*,
SrcLi°
*,
IdLi°
*,,Token*,Token*);

1166 
sqlôeDr›Index
(
P¨£
*, 
SrcLi°
*);

1167 
sqlôeAddKeyTy≥
(
Vdbe
*, 
Ex¥Li°
*);

1168 
sqlôeAddIdxKeyTy≥
(
Vdbe
*, 
Index
*);

1169 
sqlôeSñe˘
(
P¨£
*, 
Sñe˘
*, , , Select*, , *);

1170 
Sñe˘
 *
sqlôeSñe˘New
(
Ex¥Li°
*,
SrcLi°
*,
Ex¥
*,ExprList*,Expr*,ExprList*,

1172 
sqlôeSñe˘Dñëe
(
Sñe˘
*);

1173 
sqlôeSñe˘Unböd
(
Sñe˘
*);

1174 
TabÀ
 *
sqlôeSrcLi°Lookup
(
P¨£
*, 
SrcLi°
*);

1175 
sqlôeIsRódO∆y
(
P¨£
*, 
TabÀ
*, );

1176 
sqlôeDñëeFrom
(
P¨£
*, 
SrcLi°
*, 
Ex¥
*);

1177 
sqlôeUpd©e
(
P¨£
*, 
SrcLi°
*, 
Ex¥Li°
*, 
Ex¥
*, );

1178 
WhîeInfo
 *
sqlôeWhîeBegö
(
P¨£
*, 
SrcLi°
*, 
Ex¥
*, , 
Ex¥Li°
**);

1179 
sqlôeWhîeEnd
(
WhîeInfo
*);

1180 
sqlôeEx¥Code
(
P¨£
*, 
Ex¥
*);

1181 
sqlôeEx¥CodeEx¥Li°
(
P¨£
*, 
Ex¥Li°
*, );

1182 
sqlôeEx¥IfTrue
(
P¨£
*, 
Ex¥
*, , );

1183 
sqlôeEx¥IfFÆ£
(
P¨£
*, 
Ex¥
*, , );

1184 
TabÀ
 *
sqlôeFödTabÀ
(
sqlôe
*,const *, const *);

1185 
TabÀ
 *
sqlôeLoˇãTabÀ
(
P¨£
*,const *, const *);

1186 
Index
 *
sqlôeFödIndex
(
sqlôe
*,const *, const *);

1187 
sqlôeU∆ökAndDñëeIndex
(
sqlôe
*,
Index
*);

1191 
sqlôeGlobCom∑ª
(const *,const *);

1192 
sqlôeLikeCom∑ª
(const *,const *);

1193 *
sqlôeTabÀNameFromTokí
(
Tokí
*);

1194 
sqlôeEx¥Check
(
P¨£
*, 
Ex¥
*, , *);

1195 
sqlôeEx¥Ty≥
(
Ex¥
*);

1196 
sqlôeEx¥Com∑ª
(
Ex¥
*, Expr*);

1197 
sqlôeFuncId
(
Tokí
*);

1198 
sqlôeEx¥ResﬁveIds
(
P¨£
*, 
SrcLi°
*, 
Ex¥Li°
*, 
Ex¥
*);

1199 
sqlôeEx¥A«lyzeAggªg©es
(
P¨£
*, 
Ex¥
*);

1200 
Vdbe
 *
sqlôeGëVdbe
(
P¨£
*);

1201 
sqlôeR™dom√ss
(, *);

1202 
sqlôeRﬁlbackAŒ
(
sqlôe
*);

1203 
sqlôeCodeVîifySchema
(
P¨£
*, );

1204 
sqlôeBegöTønß˘i⁄
(
P¨£
*, );

1205 
sqlôeCommôTønß˘i⁄
(
P¨£
*);

1206 
sqlôeRﬁlbackTønß˘i⁄
(
P¨£
*);

1207 
sqlôeEx¥IsC⁄°™t
(
Ex¥
*);

1208 
sqlôeEx¥IsI¡egî
(
Ex¥
*, *);

1209 
sqlôeIsRowid
(const *);

1210 
sqlôeGíî©eRowDñëe
(
sqlôe
*, 
Vdbe
*, 
TabÀ
*, , );

1211 
sqlôeGíî©eRowIndexDñëe
(
sqlôe
*, 
Vdbe
*, 
TabÀ
*, , *);

1212 
sqlôeGíî©eC⁄°øötChecks
(
P¨£
*,
TabÀ
*,,*,,,,);

1213 
sqlôeCom∂ëeIn£πi⁄
(
P¨£
*, 
TabÀ
*, , *, , , );

1214 
sqlôeO≥nTabÀAndIndi˚s
(
P¨£
*, 
TabÀ
*, );

1215 
sqlôeBegöWrôeO≥øti⁄
(
P¨£
*, , );

1216 
sqlôeEndWrôeO≥øti⁄
(
P¨£
*);

1217 
Ex¥
 *
sqlôeEx¥Dup
(Expr*);

1218 
sqlôeTokíC›y
(
Tokí
*, Token*);

1219 
Ex¥Li°
 *
sqlôeEx¥Li°Dup
(ExprList*);

1220 
SrcLi°
 *
sqlôeSrcLi°Dup
(SrcList*);

1221 
IdLi°
 *
sqlôeIdLi°Dup
(IdList*);

1222 
Sñe˘
 *
sqlôeSñe˘Dup
(Select*);

1223 
FuncDef
 *
sqlôeFödFun˘i⁄
(
sqlôe
*,const *,,,);

1224 
sqlôeRegi°îBuûtöFun˘i⁄s
(
sqlôe
*);

1225 
sqlôeRegi°îD©eTimeFun˘i⁄s
(
sqlôe
*);

1226 
sqlôeSa„tyOn
(
sqlôe
*);

1227 
sqlôeSa„tyOff
(
sqlôe
*);

1228 
sqlôeSa„tyCheck
(
sqlôe
*);

1229 
sqlôeCh™geCookõ
(
sqlôe
*, 
Vdbe
*);

1230 
sqlôeBegöTriggî
(
P¨£
*, 
Tokí
*,,,
IdLi°
*,
SrcLi°
*,,
Ex¥
*,);

1231 
sqlôeFöishTriggî
(
P¨£
*, 
TriggîSãp
*, 
Tokí
*);

1232 
sqlôeDr›Triggî
(
P¨£
*, 
SrcLi°
*);

1233 
sqlôeDr›TriggîPå
(
P¨£
*, 
Triggî
*, );

1234 
sqlôeTriggîsExi°
(
P¨£
* , 
Triggî
* , , , , 
Ex¥Li°
*);

1235 
sqlôeCodeRowTriggî
(
P¨£
*, , 
Ex¥Li°
*, , 
TabÀ
 *, , ,

1237 
sqlôeVõwTriggîs
(
P¨£
*, 
TabÀ
*, 
Ex¥
*, , 
Ex¥Li°
*);

1238 
sqlôeDñëeTriggîSãp
(
TriggîSãp
*);

1239 
TriggîSãp
 *
sqlôeTriggîSñe˘Sãp
(
Sñe˘
*);

1240 
TriggîSãp
 *
sqlôeTriggîIn£πSãp
(
Tokí
*, 
IdLi°
*, 
Ex¥Li°
*, 
Sñe˘
*, );

1241 
TriggîSãp
 *
sqlôeTriggîUpd©eSãp
(
Tokí
*, 
Ex¥Li°
*, 
Ex¥
*, );

1242 
TriggîSãp
 *
sqlôeTriggîDñëeSãp
(
Tokí
*, 
Ex¥
*);

1243 
sqlôeDñëeTriggî
(
Triggî
*);

1244 
sqlôeJoöTy≥
(
P¨£
*, 
Tokí
*, Token*, Token*);

1245 
sqlôeCª©eF‹eignKey
(
P¨£
*, 
IdLi°
*, 
Tokí
*, IdList*, );

1246 
sqlôeDe„rF‹eignKey
(
P¨£
*, );

1247 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


1260 
sqlôeBåìFa˘‹y
(c⁄° 
sqlôe
 *
db
, c⁄° *
zFûíame
,

1261 
mode
, 
nPg
, 
Båì
 **
µBåì
);

1268 
sqlôeAtoF
(c⁄° *
z
, const **);

1269 *
sqlôe_¢¥ötf
(,*,const *,...);

1270 
sqlôeFôsIn32Bôs
(const *);

	@table.c

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"sqlôeI¡.h
"

27 
	sTabResu…
 {

28 **
	mazResu…
;

29 *
	mzEºMsg
;

30 
	mnResu…
;

31 
	mnAŒoc
;

32 
	mnRow
;

33 
	mnCﬁumn
;

34 
	mnD©a
;

35 
	mrc
;

36 } 
	tTabResu…
;

43 
	$sqlôe_gë_èbÀ_cb
(*
pArg
, 
nCﬁ
, **
¨gv
, **
cﬁv
){

44 
TabResu…
 *
p
 = (TabResu…*)
pArg
;

45 
√ed
;

46 
i
;

47 *
z
;

52 if–
p
->
nRow
==0 && 
¨gv
!=0 ){

53 
√ed
 = 
nCﬁ
*2;

55 
√ed
 = 
nCﬁ
;

57 if–
p
->
nD©a
 + 
√ed
 >p->
nAŒoc
 ){

58 **
azNew
;

59 
p
->
nAŒoc
 =Ö->nAŒoc*2 + 
√ed
 + 1;

60 
azNew
 = 
	`ªÆloc
–
p
->
azResu…
, (*)*p->
nAŒoc
 );

61 if–
azNew
==0 ){

62 
p
->
rc
 = 
SQLITE_NOMEM
;

65 
p
->
azResu…
 = 
azNew
;

71 if–
p
->
nRow
==0 ){

72 
p
->
nCﬁumn
 = 
nCﬁ
;

73 
i
=0; i<
nCﬁ
; i++){

74 if–
cﬁv
[
i
]==0 ){

75 
z
 = 0;

77 
z
 = 
	`mÆloc
–
	`°æí
(
cﬁv
[
i
])+1 );

78 if–
z
==0 ){

79 
p
->
rc
 = 
SQLITE_NOMEM
;

82 
	`°r˝y
(
z
, 
cﬁv
[
i
]);

84 
p
->
azResu…
[p->
nD©a
++] = 
z
;

86 }if–
p
->
nCﬁumn
!=
nCﬁ
 ){

87 
	`sqlôeSëSåög
(&
p
->
zEºMsg
,

90 
p
->
rc
 = 
SQLITE_ERROR
;

96 if–
¨gv
!=0 ){

97 
i
=0; i<
nCﬁ
; i++){

98 if–
¨gv
[
i
]==0 ){

99 
z
 = 0;

101 
z
 = 
	`mÆloc
–
	`°æí
(
¨gv
[
i
])+1 );

102 if–
z
==0 ){

103 
p
->
rc
 = 
SQLITE_NOMEM
;

106 
	`°r˝y
(
z
, 
¨gv
[
i
]);

108 
p
->
azResu…
[p->
nD©a
++] = 
z
;

110 
p
->
nRow
++;

113 
	}
}

125 
	$sqlôe_gë_èbÀ
(

126 
sqlôe
 *
db
,

127 c⁄° *
zSql
,

128 ***
∑zResu…
,

129 *
≤Row
,

130 *
≤Cﬁumn
,

131 **
pzEºMsg


133 
rc
;

134 
TabResu…
 
ªs
;

135 if–
∑zResu…
==0 ){  
SQLITE_ERROR
; }

136 *
∑zResu…
 = 0;

137 if–
≤Cﬁumn
 ) *pnColumn = 0;

138 if–
≤Row
 ) *pnRow = 0;

139 
ªs
.
zEºMsg
 = 0;

140 
ªs
.
nResu…
 = 0;

141 
ªs
.
nRow
 = 0;

142 
ªs
.
nCﬁumn
 = 0;

143 
ªs
.
nD©a
 = 1;

144 
ªs
.
nAŒoc
 = 20;

145 
ªs
.
rc
 = 
SQLITE_OK
;

146 
ªs
.
azResu…
 = 
	`mÆloc
–(*)*ªs.
nAŒoc
 );

147 if–
ªs
.
azResu…
==0 ){

148  
SQLITE_NOMEM
;

150 
ªs
.
azResu…
[0] = 0;

151 
rc
 = 
	`sqlôe_exec
(
db
, 
zSql
, 
sqlôe_gë_èbÀ_cb
, &
ªs
, 
pzEºMsg
);

152 if–
ªs
.
azResu…
 ){

153 
ªs
.
azResu…
[0] = (*Ïes.
nD©a
;

155 if–
rc
==
SQLITE_ABORT
 ){

156 
	`sqlôe_‰ì_èbÀ
(&
ªs
.
azResu…
[1]);

157 if–
ªs
.
zEºMsg
 ){

158 if–
pzEºMsg
 ){

159 
	`‰ì
(*
pzEºMsg
);

160 *
pzEºMsg
 = 
ªs
.
zEºMsg
;

161 
	`sqlôeSåRóŒoc
(
pzEºMsg
);

163 
	`sqlôeFªe
(
ªs
.
zEºMsg
);

166  
ªs
.
rc
;

168 
	`sqlôeFªe
(
ªs
.
zEºMsg
);

169 if–
rc
!=
SQLITE_OK
 ){

170 
	`sqlôe_‰ì_èbÀ
(&
ªs
.
azResu…
[1]);

171  
rc
;

173 if–
ªs
.
nAŒoc
>ªs.
nD©a
 ){

174 **
azNew
;

175 
azNew
 = 
	`ªÆloc
–
ªs
.
azResu…
, (*)*‘es.
nD©a
+1) );

176 if–
azNew
==0 ){

177 
	`sqlôe_‰ì_èbÀ
(&
ªs
.
azResu…
[1]);

178  
SQLITE_NOMEM
;

180 
ªs
.
nAŒoc
 =Ñes.
nD©a
+1;

181 
ªs
.
azResu…
 = 
azNew
;

183 *
∑zResu…
 = &
ªs
.
azResu…
[1];

184 if–
≤Cﬁumn
 ) *≤Cﬁum¿
ªs
.
nCﬁumn
;

185 if–
≤Row
 ) *≤Row = 
ªs
.
nRow
;

186  
rc
;

187 
	}
}

192 
	$sqlôe_‰ì_èbÀ
(

193 **
azResu…


195 if–
azResu…
 ){

196 
i
, 
n
;

197 
azResu…
--;

198 if–
azResu…
==0 ) ;

199 
n
 = ()()
azResu…
[0];

200 
i
=1; i<
n
; i++){ if–
azResu…
[i] ) 
	`‰ì
(azResult[i]); }

201 
	`‰ì
(
azResu…
);

203 
	}
}

	@tclsqlite.c

16 #i‚de‡
NO_TCL


18 
	~"sqlôeI¡.h
"

19 
	~"t˛.h
"

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<as£π.h
>

30 #i‡
deföed
(
TCL_UTF_MAX
Ë&& !deföed(
SQLITE_UTF8
)

31 
	#UTF_TRANSLATION_NEEDED
 1

	)

38 
SqlFunc
 
	tSqlFunc
;

39 
	sSqlFunc
 {

40 
T˛_I¡îp
 *
	möãΩ
;

41 *
	mzS¸ùt
;

42 
SqlFunc
 *
	mpNext
;

49 
SqlôeDb
 
	tSqlôeDb
;

50 
	sSqlôeDb
 {

51 
sqlôe
 *
	mdb
;

52 
T˛_I¡îp
 *
	möãΩ
;

53 *
	mzBusy
;

54 *
	mzCommô
;

55 *
	mzTø˚
;

56 *
	mzProgªss
;

57 *
	mzAuth
;

58 
SqlFunc
 *
	mpFunc
;

59 
	mrc
;

66 
CÆlbackD©a
 
	tCÆlbackD©a
;

67 
	sCÆlbackD©a
 {

68 
T˛_I¡îp
 *
	möãΩ
;

69 *
	mzAºay
;

70 
T˛_Obj
 *
	mpCode
;

71 
	m⁄˚
;

72 
	mt˛_rc
;

73 
	mnCﬁName
;

74 **
	mazCﬁName
;

77 #ifde‡
UTF_TRANSLATION_NEEDED


85 
	$DbEvÆCÆlback
(

86 *
˛õ¡D©a
,

87 
nCﬁ
,

88 ** 
azCﬁ
,

89 ** 
azN


91 
CÆlbackD©a
 *
cbD©a
 = (CÆlbackD©a*)
˛õ¡D©a
;

92 
i
, 
rc
;

93 
T˛_DSåög
 
dCﬁ
;

94 
	`T˛_DSåögInô
(&
dCﬁ
);

95 if–
cbD©a
->
azCﬁName
==0 ){

96 
	`as£π
–
cbD©a
->
⁄˚
 );

97 
cbD©a
->
⁄˚
 = 0;

98 if–
cbD©a
->
zAºay
[0] ){

99 
	`T˛_SëV¨2
(
cbD©a
->
öãΩ
, cbD©a->
zAºay
, "*", "", 0);

101 
cbD©a
->
azCﬁName
 = 
	`mÆloc
–
nCﬁ
*(*) );

102 if–
cbD©a
->
azCﬁName
==0 ){  1; }

103 
cbD©a
->
nCﬁName
 = 
nCﬁ
;

104 
i
=0; i<
nCﬁ
; i++){

105 
	`T˛_Exã∫ÆToUtfDSåög
(
NULL
, 
azN
[
i
], -1, &
dCﬁ
);

106 
cbD©a
->
azCﬁName
[
i
] = 
	`mÆloc
–
	`T˛_DSåögLígth
(&
dCﬁ
) + 1 );

107 if–
cbD©a
->
azCﬁName
[
i
] ){

108 
	`°r˝y
(
cbD©a
->
azCﬁName
[
i
], 
	`T˛_DSåögVÆue
(&
dCﬁ
));

112 if–
cbD©a
->
zAºay
[0] ){

113 
	`T˛_SëV¨2
(
cbD©a
->
öãΩ
, cbD©a->
zAºay
, "*",

114 
	`T˛_DSåögVÆue
(&
dCﬁ
), 
TCL_LIST_ELEMENT
|
TCL_APPEND_VALUE
);

115 if–
azN
[
nCﬁ
]!=0 ){

116 
T˛_DSåög
 
dTy≥
;

117 
	`T˛_DSåögInô
(&
dTy≥
);

118 
	`T˛_DSåögAµíd
(&
dTy≥
, "typeof:", -1);

119 
	`T˛_DSåögAµíd
(&
dTy≥
, 
	`T˛_DSåögVÆue
(&
dCﬁ
), -1);

120 
	`T˛_DSåögFªe
(&
dCﬁ
);

121 
	`T˛_Exã∫ÆToUtfDSåög
(
NULL
, 
azN
[
i
+
nCﬁ
], -1, &
dCﬁ
);

122 
	`T˛_SëV¨2
(
cbD©a
->
öãΩ
, cbD©a->
zAºay
,

123 
	`T˛_DSåögVÆue
(&
dTy≥
), T˛_DSåögVÆue(&
dCﬁ
),

124 
TCL_LIST_ELEMENT
|
TCL_APPEND_VALUE
);

125 
	`T˛_DSåögFªe
(&
dTy≥
);

129 
	`T˛_DSåögFªe
(&
dCﬁ
);

132 if–
azCﬁ
!=0 ){

133 if–
cbD©a
->
zAºay
[0] ){

134 
i
=0; i<
nCﬁ
; i++){

135 *
z
 = 
azCﬁ
[
i
];

136 if–
z
==0 ) z = "";

137 
	`T˛_DSåögInô
(&
dCﬁ
);

138 
	`T˛_Exã∫ÆToUtfDSåög
(
NULL
, 
z
, -1, &
dCﬁ
);

139 
	`T˛_SëV¨2
(
cbD©a
->
öãΩ
, cbD©a->
zAºay
, cbD©a->
azCﬁName
[
i
],

140 
	`T˛_DSåögVÆue
(&
dCﬁ
), 0);

141 
	`T˛_DSåögFªe
(&
dCﬁ
);

144 
i
=0; i<
nCﬁ
; i++){

145 *
z
 = 
azCﬁ
[
i
];

146 if–
z
==0 ) z = "";

147 
	`T˛_DSåögInô
(&
dCﬁ
);

148 
	`T˛_Exã∫ÆToUtfDSåög
(
NULL
, 
z
, -1, &
dCﬁ
);

149 
	`T˛_SëV¨
(
cbD©a
->
öãΩ
, cbD©a->
azCﬁName
[
i
],

150 
	`T˛_DSåögVÆue
(&
dCﬁ
), 0);

151 
	`T˛_DSåögFªe
(&
dCﬁ
);

155 
rc
 = 
	`T˛_EvÆObj
(
cbD©a
->
öãΩ
, cbD©a->
pCode
);

156 if–
rc
==
TCL_CONTINUE
 )Ñ¯
TCL_OK
;

157 
cbD©a
->
t˛_rc
 = 
rc
;

158  
rc
!=
TCL_OK
;

159 
	}
}

162 #i‚de‡
UTF_TRANSLATION_NEEDED


174 
	$DbEvÆCÆlback
(

175 *
˛õ¡D©a
,

176 
nCﬁ
,

177 ** 
azCﬁ
,

178 ** 
azN


180 
CÆlbackD©a
 *
cbD©a
 = (CÆlbackD©a*)
˛õ¡D©a
;

181 
i
, 
rc
;

182 if–
azCﬁ
==0 || (
cbD©a
->
⁄˚
 && cbD©a->
zAºay
[0]) ){

183 
	`T˛_SëV¨2
(
cbD©a
->
öãΩ
, cbD©a->
zAºay
, "*", "", 0);

184 
i
=0; i<
nCﬁ
; i++){

185 
	`T˛_SëV¨2
(
cbD©a
->
öãΩ
, cbD©a->
zAºay
, "*", 
azN
[
i
],

186 
TCL_LIST_ELEMENT
|
TCL_APPEND_VALUE
);

187 if–
azN
[
nCﬁ
] ){

188 *
z
 = 
	`sqlôe_m¥ötf
("ty≥of:%s", 
azN
[
i
]);

189 
	`T˛_SëV¨2
(
cbD©a
->
öãΩ
, cbD©a->
zAºay
, 
z
, 
azN
[
i
+
nCﬁ
],

190 
TCL_LIST_ELEMENT
|
TCL_APPEND_VALUE
);

191 
	`sqlôe_‰ìmem
(
z
);

194 
cbD©a
->
⁄˚
 = 0;

196 if–
azCﬁ
!=0 ){

197 if–
cbD©a
->
zAºay
[0] ){

198 
i
=0; i<
nCﬁ
; i++){

199 *
z
 = 
azCﬁ
[
i
];

200 if–
z
==0 ) z = "";

201 
	`T˛_SëV¨2
(
cbD©a
->
öãΩ
, cbD©a->
zAºay
, 
azN
[
i
], 
z
, 0);

204 
i
=0; i<
nCﬁ
; i++){

205 *
z
 = 
azCﬁ
[
i
];

206 if–
z
==0 ) z = "";

207 
	`T˛_SëV¨
(
cbD©a
->
öãΩ
, 
azN
[
i
], 
z
, 0);

211 
rc
 = 
	`T˛_EvÆObj
(
cbD©a
->
öãΩ
, cbD©a->
pCode
);

212 if–
rc
==
TCL_CONTINUE
 )Ñ¯
TCL_OK
;

213 
cbD©a
->
t˛_rc
 = 
rc
;

214  
rc
!=
TCL_OK
;

215 
	}
}

224 
	$DbEvÆCÆlback2
(

225 *
˛õ¡D©a
,

226 
nCﬁ
,

227 ** 
azCﬁ
,

228 ** 
azN


230 
T˛_Obj
 *
pLi°
 = (T˛_Obj*)
˛õ¡D©a
;

231 
i
;

232 if–
azCﬁ
==0 )  0;

233 
i
=0; i<
nCﬁ
; i++){

234 
T˛_Obj
 *
pEÀm
;

235 if–
azCﬁ
[
i
] && *azCol[i] ){

236 #ifde‡
UTF_TRANSLATION_NEEDED


237 
T˛_DSåög
 
dCﬁ
;

238 
	`T˛_DSåögInô
(&
dCﬁ
);

239 
	`T˛_Exã∫ÆToUtfDSåög
(
NULL
, 
azCﬁ
[
i
], -1, &
dCﬁ
);

240 
pEÀm
 = 
	`T˛_NewSåögObj
(
	`T˛_DSåögVÆue
(&
dCﬁ
), -1);

241 
	`T˛_DSåögFªe
(&
dCﬁ
);

243 
pEÀm
 = 
	`T˛_NewSåögObj
(
azCﬁ
[
i
], -1);

246 
pEÀm
 = 
	`T˛_NewObj
();

248 
	`T˛_Li°ObjAµídEÀmít
(0, 
pLi°
, 
pEÀm
);

251 
	}
}

257 
	$DbEvÆCÆlback3
(

258 *
˛õ¡D©a
,

259 
nCﬁ
,

260 ** 
azCﬁ
,

261 ** 
azN


263 
T˛_I¡îp
 *
öãΩ
 = (T˛_I¡îp*)
˛õ¡D©a
;

264 
T˛_Obj
 *
pEÀm
;

265 if–
azCﬁ
==0 )  1;

266 if–
nCﬁ
==0 )  1;

267 #ifde‡
UTF_TRANSLATION_NEEDED


269 
T˛_DSåög
 
dCﬁ
;

270 
	`T˛_DSåögInô
(&
dCﬁ
);

271 
	`T˛_Exã∫ÆToUtfDSåög
(
NULL
, 
azCﬁ
[0], -1, &
dCﬁ
);

272 
pEÀm
 = 
	`T˛_NewSåögObj
(
	`T˛_DSåögVÆue
(&
dCﬁ
), -1);

273 
	`T˛_DSåögFªe
(&
dCﬁ
);

276 
pEÀm
 = 
	`T˛_NewSåögObj
(
azCﬁ
[0], -1);

278 
	`T˛_SëObjResu…
(
öãΩ
, 
pEÀm
);

280 
	}
}

285 
	$DbDñëeCmd
(*
db
){

286 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
db
;

287 
	`sqlôe_˛o£
(
pDb
->
db
);

288  
pDb
->
pFunc
 ){

289 
SqlFunc
 *
pFunc
 = 
pDb
->pFunc;

290 
pDb
->
pFunc
 =ÖFunc->
pNext
;

291 
	`T˛_Fªe
((*)
pFunc
);

293 if–
pDb
->
zBusy
 ){

294 
	`T˛_Fªe
(
pDb
->
zBusy
);

296 if–
pDb
->
zTø˚
 ){

297 
	`T˛_Fªe
(
pDb
->
zTø˚
);

299 if–
pDb
->
zAuth
 ){

300 
	`T˛_Fªe
(
pDb
->
zAuth
);

302 
	`T˛_Fªe
((*)
pDb
);

303 
	}
}

309 
	$DbBusyH™dÀr
(*
cd
, c⁄° *
zTabÀ
, 
nTrõs
){

310 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
cd
;

311 
rc
;

312 
zVÆ
[30];

313 *
zCmd
;

314 
T˛_DSåög
 
cmd
;

316 
	`T˛_DSåögInô
(&
cmd
);

317 
	`T˛_DSåögAµíd
(&
cmd
, 
pDb
->
zBusy
, -1);

318 
	`T˛_DSåögAµídEÀmít
(&
cmd
, 
zTabÀ
);

319 
	`•rötf
(
zVÆ
, " %d", 
nTrõs
);

320 
	`T˛_DSåögAµíd
(&
cmd
, 
zVÆ
, -1);

321 
zCmd
 = 
	`T˛_DSåögVÆue
(&
cmd
);

322 
rc
 = 
	`T˛_EvÆ
(
pDb
->
öãΩ
, 
zCmd
);

323 
	`T˛_DSåögFªe
(&
cmd
);

324 if–
rc
!=
TCL_OK
 || 
	`©oi
(
	`T˛_GëSåögResu…
(
pDb
->
öãΩ
)) ){

328 
	}
}

333 
	$DbProgªssH™dÀr
(*
cd
){

334 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
cd
;

335 
rc
;

337 
	`as£π
–
pDb
->
zProgªss
 );

338 
rc
 = 
	`T˛_EvÆ
(
pDb
->
öãΩ
,ÖDb->
zProgªss
);

339 if–
rc
!=
TCL_OK
 || 
	`©oi
(
	`T˛_GëSåögResu…
(
pDb
->
öãΩ
)) ){

343 
	}
}

349 
	$DbTø˚H™dÀr
(*
cd
, c⁄° *
zSql
){

350 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
cd
;

351 
T˛_DSåög
 
°r
;

353 
	`T˛_DSåögInô
(&
°r
);

354 
	`T˛_DSåögAµíd
(&
°r
, 
pDb
->
zTø˚
, -1);

355 
	`T˛_DSåögAµídEÀmít
(&
°r
, 
zSql
);

356 
	`T˛_EvÆ
(
pDb
->
öãΩ
, 
	`T˛_DSåögVÆue
(&
°r
));

357 
	`T˛_DSåögFªe
(&
°r
);

358 
	`T˛_Re£tResu…
(
pDb
->
öãΩ
);

359 
	}
}

367 
	$DbCommôH™dÀr
(*
cd
){

368 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
cd
;

369 
rc
;

371 
rc
 = 
	`T˛_EvÆ
(
pDb
->
öãΩ
,ÖDb->
zCommô
);

372 if–
rc
!=
TCL_OK
 || 
	`©oi
(
	`T˛_GëSåögResu…
(
pDb
->
öãΩ
)) ){

376 
	}
}

382 
	$t˛SqlFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

383 
SqlFunc
 *
p
 = 
	`sqlôe_u£r_d©a
(
c⁄ãxt
);

384 
T˛_DSåög
 
cmd
;

385 
i
;

386 
rc
;

388 
	`T˛_DSåögInô
(&
cmd
);

389 
	`T˛_DSåögAµíd
(&
cmd
, 
p
->
zS¸ùt
, -1);

390 
i
=0; i<
¨gc
; i++){

391 
	`T˛_DSåögAµídEÀmít
(&
cmd
, 
¨gv
[
i
] ?árgv[i] : "");

393 
rc
 = 
	`T˛_EvÆ
(
p
->
öãΩ
, 
	`T˛_DSåögVÆue
(&
cmd
));

394 if–
rc
 ){

395 
	`sqlôe_£t_ªsu…_îr‹
(
c⁄ãxt
, 
	`T˛_GëSåögResu…
(
p
->
öãΩ
), -1);

397 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
	`T˛_GëSåögResu…
(
p
->
öãΩ
), -1);

399 
	}
}

400 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


407 
	$auth_ˇŒback
(

408 *
pArg
,

409 
code
,

410 c⁄° *
zArg1
,

411 c⁄° *
zArg2
,

412 c⁄° *
zArg3
,

413 c⁄° *
zArg4


415 *
zCode
;

416 
T˛_DSåög
 
°r
;

417 
rc
;

418 c⁄° *
zRïly
;

419 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
pArg
;

421  
code
 ){

422 
SQLITE_COPY
 : 
zCode
="SQLITE_COPY"; ;

423 
SQLITE_CREATE_INDEX
 : 
zCode
="SQLITE_CREATE_INDEX"; ;

424 
SQLITE_CREATE_TABLE
 : 
zCode
="SQLITE_CREATE_TABLE"; ;

425 
SQLITE_CREATE_TEMP_INDEX
 : 
zCode
="SQLITE_CREATE_TEMP_INDEX"; ;

426 
SQLITE_CREATE_TEMP_TABLE
 : 
zCode
="SQLITE_CREATE_TEMP_TABLE"; ;

427 
SQLITE_CREATE_TEMP_TRIGGER
: 
zCode
="SQLITE_CREATE_TEMP_TRIGGER"; ;

428 
SQLITE_CREATE_TEMP_VIEW
 : 
zCode
="SQLITE_CREATE_TEMP_VIEW"; ;

429 
SQLITE_CREATE_TRIGGER
 : 
zCode
="SQLITE_CREATE_TRIGGER"; ;

430 
SQLITE_CREATE_VIEW
 : 
zCode
="SQLITE_CREATE_VIEW"; ;

431 
SQLITE_DELETE
 : 
zCode
="SQLITE_DELETE"; ;

432 
SQLITE_DROP_INDEX
 : 
zCode
="SQLITE_DROP_INDEX"; ;

433 
SQLITE_DROP_TABLE
 : 
zCode
="SQLITE_DROP_TABLE"; ;

434 
SQLITE_DROP_TEMP_INDEX
 : 
zCode
="SQLITE_DROP_TEMP_INDEX"; ;

435 
SQLITE_DROP_TEMP_TABLE
 : 
zCode
="SQLITE_DROP_TEMP_TABLE"; ;

436 
SQLITE_DROP_TEMP_TRIGGER
 : 
zCode
="SQLITE_DROP_TEMP_TRIGGER"; ;

437 
SQLITE_DROP_TEMP_VIEW
 : 
zCode
="SQLITE_DROP_TEMP_VIEW"; ;

438 
SQLITE_DROP_TRIGGER
 : 
zCode
="SQLITE_DROP_TRIGGER"; ;

439 
SQLITE_DROP_VIEW
 : 
zCode
="SQLITE_DROP_VIEW"; ;

440 
SQLITE_INSERT
 : 
zCode
="SQLITE_INSERT"; ;

441 
SQLITE_PRAGMA
 : 
zCode
="SQLITE_PRAGMA"; ;

442 
SQLITE_READ
 : 
zCode
="SQLITE_READ"; ;

443 
SQLITE_SELECT
 : 
zCode
="SQLITE_SELECT"; ;

444 
SQLITE_TRANSACTION
 : 
zCode
="SQLITE_TRANSACTION"; ;

445 
SQLITE_UPDATE
 : 
zCode
="SQLITE_UPDATE"; ;

446 
SQLITE_ATTACH
 : 
zCode
="SQLITE_ATTACH"; ;

447 
SQLITE_DETACH
 : 
zCode
="SQLITE_DETACH"; ;

448  : 
zCode
="????"; ;

450 
	`T˛_DSåögInô
(&
°r
);

451 
	`T˛_DSåögAµíd
(&
°r
, 
pDb
->
zAuth
, -1);

452 
	`T˛_DSåögAµídEÀmít
(&
°r
, 
zCode
);

453 
	`T˛_DSåögAµídEÀmít
(&
°r
, 
zArg1
 ? zArg1 : "");

454 
	`T˛_DSåögAµídEÀmít
(&
°r
, 
zArg2
 ? zArg2 : "");

455 
	`T˛_DSåögAµídEÀmít
(&
°r
, 
zArg3
 ? zArg3 : "");

456 
	`T˛_DSåögAµídEÀmít
(&
°r
, 
zArg4
 ? zArg4 : "");

457 
rc
 = 
	`T˛_GlobÆEvÆ
(
pDb
->
öãΩ
, 
	`T˛_DSåögVÆue
(&
°r
));

458 
	`T˛_DSåögFªe
(&
°r
);

459 
zRïly
 = 
	`T˛_GëSåögResu…
(
pDb
->
öãΩ
);

460 if–
	`°rcmp
(
zRïly
,"SQLITE_OK")==0 ){

461 
rc
 = 
SQLITE_OK
;

462 }if–
	`°rcmp
(
zRïly
,"SQLITE_DENY")==0 ){

463 
rc
 = 
SQLITE_DENY
;

464 }if–
	`°rcmp
(
zRïly
,"SQLITE_IGNORE")==0 ){

465 
rc
 = 
SQLITE_IGNORE
;

467 
rc
 = 999;

469  
rc
;

470 
	}
}

486 
	$DbObjCmd
(*
cd
, 
T˛_I¡îp
 *
öãΩ
, 
objc
,
T˛_Obj
 *c⁄°*
objv
){

487 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
cd
;

488 
choi˚
;

489 
rc
 = 
TCL_OK
;

490 c⁄° *
DB_°rs
[] = {

499 
	eDB_íum
 {

500 
DB_AUTHORIZER
, 
DB_BUSY
, 
DB_CHANGES
,

501 
DB_CLOSE
, 
DB_COMMIT_HOOK
, 
DB_COMPLETE
,

502 
DB_ERRORCODE
, 
DB_EVAL
, 
DB_FUNCTION
,

503 
DB_LAST_INSERT_ROWID
, 
DB_LAST_STATEMENT_CHANGES
, 
DB_ONECOLUMN
,

504 
DB_PROGRESS
, 
DB_REKEY
, 
DB_TIMEOUT
,

505 
DB_TRACE


508 if–
objc
<2 ){

509 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "SUBCOMMAND ...");

510  
TCL_ERROR
;

512 if–
	`T˛_GëIndexFromObj
(
öãΩ
, 
objv
[1], 
DB_°rs
, "›ti⁄", 0, &
choi˚
) ){

513  
TCL_ERROR
;

516  (
DB_íum
)
choi˚
 ){

536 
DB_AUTHORIZER
: {

537 if–
objc
>3 ){

538 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?CALLBACK?");

539 }if–
objc
==2 ){

540 if–
pDb
->
zAuth
 ){

541 
	`T˛_AµídResu…
(
öãΩ
, 
pDb
->
zAuth
, 0);

544 *
zAuth
;

545 
Àn
;

546 if–
pDb
->
zAuth
 ){

547 
	`T˛_Fªe
(
pDb
->
zAuth
);

549 
zAuth
 = 
	`T˛_GëSåögFromObj
(
objv
[2], &
Àn
);

550 if–
zAuth
 && 
Àn
>0 ){

551 
pDb
->
zAuth
 = 
	`T˛_AŒoc
–
Àn
 + 1 );

552 
	`°r˝y
(
pDb
->
zAuth
, zAuth);

554 
pDb
->
zAuth
 = 0;

556 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


557 if–
pDb
->
zAuth
 ){

558 
pDb
->
öãΩ
 = interp;

559 
	`sqlôe_£t_auth‹izî
(
pDb
->
db
, 
auth_ˇŒback
,ÖDb);

561 
	`sqlôe_£t_auth‹izî
(
pDb
->
db
, 0, 0);

573 
DB_BUSY
: {

574 if–
objc
>3 ){

575 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "CALLBACK");

576  
TCL_ERROR
;

577 }if–
objc
==2 ){

578 if–
pDb
->
zBusy
 ){

579 
	`T˛_AµídResu…
(
öãΩ
, 
pDb
->
zBusy
, 0);

582 *
zBusy
;

583 
Àn
;

584 if–
pDb
->
zBusy
 ){

585 
	`T˛_Fªe
(
pDb
->
zBusy
);

587 
zBusy
 = 
	`T˛_GëSåögFromObj
(
objv
[2], &
Àn
);

588 if–
zBusy
 && 
Àn
>0 ){

589 
pDb
->
zBusy
 = 
	`T˛_AŒoc
–
Àn
 + 1 );

590 
	`°r˝y
(
pDb
->
zBusy
, zBusy);

592 
pDb
->
zBusy
 = 0;

594 if–
pDb
->
zBusy
 ){

595 
pDb
->
öãΩ
 = interp;

596 
	`sqlôe_busy_h™dÀr
(
pDb
->
db
, 
DbBusyH™dÀr
,ÖDb);

598 
	`sqlôe_busy_h™dÀr
(
pDb
->
db
, 0, 0);

609 
DB_PROGRESS
: {

610 if–
objc
==2 ){

611 if–
pDb
->
zProgªss
 ){

612 
	`T˛_AµídResu…
(
öãΩ
, 
pDb
->
zProgªss
, 0);

614 }if–
objc
==4 ){

615 *
zProgªss
;

616 
Àn
;

617 
N
;

618 if–
TCL_OK
!=
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
N
) ){

619  
TCL_ERROR
;

621 if–
pDb
->
zProgªss
 ){

622 
	`T˛_Fªe
(
pDb
->
zProgªss
);

624 
zProgªss
 = 
	`T˛_GëSåögFromObj
(
objv
[3], &
Àn
);

625 if–
zProgªss
 && 
Àn
>0 ){

626 
pDb
->
zProgªss
 = 
	`T˛_AŒoc
–
Àn
 + 1 );

627 
	`°r˝y
(
pDb
->
zProgªss
, zProgress);

629 
pDb
->
zProgªss
 = 0;

631 #i‚de‡
SQLITE_OMIT_PROGRESS_CALLBACK


632 if–
pDb
->
zProgªss
 ){

633 
pDb
->
öãΩ
 = interp;

634 
	`sqlôe_¥ogªss_h™dÀr
(
pDb
->
db
, 
N
, 
DbProgªssH™dÀr
,ÖDb);

636 
	`sqlôe_¥ogªss_h™dÀr
(
pDb
->
db
, 0, 0, 0);

640 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "N CALLBACK");

641  
TCL_ERROR
;

652 
DB_CHANGES
: {

653 
T˛_Obj
 *
pResu…
;

654 
nCh™ge
;

655 if–
objc
!=2 ){

656 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "");

657  
TCL_ERROR
;

659 
nCh™ge
 = 
	`sqlôe_ch™ges
(
pDb
->
db
);

660 
pResu…
 = 
	`T˛_GëObjResu…
(
öãΩ
);

661 
	`T˛_SëI¡Obj
(
pResu…
, 
nCh™ge
);

672 
DB_LAST_STATEMENT_CHANGES
: {

673 
T˛_Obj
 *
pResu…
;

674 
lsCh™ge
;

675 if–
objc
!=2 ){

676 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "");

677  
TCL_ERROR
;

679 
lsCh™ge
 = 
	`sqlôe_œ°_°©emít_ch™ges
(
pDb
->
db
);

680 
pResu…
 = 
	`T˛_GëObjResu…
(
öãΩ
);

681 
	`T˛_SëI¡Obj
(
pResu…
, 
lsCh™ge
);

689 
DB_CLOSE
: {

690 
	`T˛_DñëeComm™d
(
öãΩ
, 
	`T˛_GëSåögFromObj
(
objv
[0], 0));

701 
DB_COMMIT_HOOK
: {

702 if–
objc
>3 ){

703 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?CALLBACK?");

704 }if–
objc
==2 ){

705 if–
pDb
->
zCommô
 ){

706 
	`T˛_AµídResu…
(
öãΩ
, 
pDb
->
zCommô
, 0);

709 *
zCommô
;

710 
Àn
;

711 if–
pDb
->
zCommô
 ){

712 
	`T˛_Fªe
(
pDb
->
zCommô
);

714 
zCommô
 = 
	`T˛_GëSåögFromObj
(
objv
[2], &
Àn
);

715 if–
zCommô
 && 
Àn
>0 ){

716 
pDb
->
zCommô
 = 
	`T˛_AŒoc
–
Àn
 + 1 );

717 
	`°r˝y
(
pDb
->
zCommô
, zCommit);

719 
pDb
->
zCommô
 = 0;

721 if–
pDb
->
zCommô
 ){

722 
pDb
->
öãΩ
 = interp;

723 
	`sqlôe_commô_hook
(
pDb
->
db
, 
DbCommôH™dÀr
,ÖDb);

725 
	`sqlôe_commô_hook
(
pDb
->
db
, 0, 0);

737 
DB_COMPLETE
: {

738 
T˛_Obj
 *
pResu…
;

739 
isCom∂ëe
;

740 if–
objc
!=3 ){

741 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "SQL");

742  
TCL_ERROR
;

744 
isCom∂ëe
 = 
	`sqlôe_com∂ëe
–
	`T˛_GëSåögFromObj
(
objv
[2], 0) );

745 
pResu…
 = 
	`T˛_GëObjResu…
(
öãΩ
);

746 
	`T˛_SëBoﬁónObj
(
pResu…
, 
isCom∂ëe
);

756 
DB_ERRORCODE
: {

757 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
pDb
->
rc
));

770 
DB_EVAL
: {

771 
CÆlbackD©a
 
cbD©a
;

772 *
zEºMsg
;

773 *
zSql
;

774 #ifde‡
UTF_TRANSLATION_NEEDED


775 
T˛_DSåög
 
dSql
;

776 
i
;

779 if–
objc
!=5 && objc!=3 ){

780 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "SQL ?ARRAY-NAME CODE?");

781  
TCL_ERROR
;

783 
pDb
->
öãΩ
 = interp;

784 
zSql
 = 
	`T˛_GëSåögFromObj
(
objv
[2], 0);

785 #ifde‡
UTF_TRANSLATION_NEEDED


786 
	`T˛_DSåögInô
(&
dSql
);

787 
	`T˛_UtfToExã∫ÆDSåög
(
NULL
, 
zSql
, -1, &
dSql
);

788 
zSql
 = 
	`T˛_DSåögVÆue
(&
dSql
);

790 
	`T˛_In¸RefCou¡
(
objv
[2]);

791 if–
objc
==5 ){

792 
cbD©a
.
öãΩ
 = interp;

793 
cbD©a
.
⁄˚
 = 1;

794 
cbD©a
.
zAºay
 = 
	`T˛_GëSåögFromObj
(
objv
[3], 0);

795 
cbD©a
.
pCode
 = 
objv
[4];

796 
cbD©a
.
t˛_rc
 = 
TCL_OK
;

797 
cbD©a
.
nCﬁName
 = 0;

798 
cbD©a
.
azCﬁName
 = 0;

799 
zEºMsg
 = 0;

800 
	`T˛_In¸RefCou¡
(
objv
[3]);

801 
	`T˛_In¸RefCou¡
(
objv
[4]);

802 
rc
 = 
	`sqlôe_exec
(
pDb
->
db
, 
zSql
, 
DbEvÆCÆlback
, &
cbD©a
, &
zEºMsg
);

803 
	`T˛_De¸RefCou¡
(
objv
[4]);

804 
	`T˛_De¸RefCou¡
(
objv
[3]);

805 if–
cbD©a
.
t˛_rc
==
TCL_BREAK
 ){ cbD©a.t˛_r¯
TCL_OK
; }

807 
T˛_Obj
 *
pLi°
 = 
	`T˛_NewObj
();

808 
cbD©a
.
t˛_rc
 = 
TCL_OK
;

809 
rc
 = 
	`sqlôe_exec
(
pDb
->
db
, 
zSql
, 
DbEvÆCÆlback2
, 
pLi°
, &
zEºMsg
);

810 
	`T˛_SëObjResu…
(
öãΩ
, 
pLi°
);

812 
pDb
->
rc
 =Ñc;

813 if–
rc
==
SQLITE_ABORT
 ){

814 if–
zEºMsg
 ) 
	`‰ì
(zErrMsg);

815 
rc
 = 
cbD©a
.
t˛_rc
;

816 }if–
zEºMsg
 ){

817 
	`T˛_SëResu…
(
öãΩ
, 
zEºMsg
, 
TCL_VOLATILE
);

818 
	`‰ì
(
zEºMsg
);

819 
rc
 = 
TCL_ERROR
;

820 }if–
rc
!=
SQLITE_OK
 ){

821 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe_îr‹_°rög
(
rc
), 0);

822 
rc
 = 
TCL_ERROR
;

825 
	`T˛_De¸RefCou¡
(
objv
[2]);

826 #ifde‡
UTF_TRANSLATION_NEEDED


827 
	`T˛_DSåögFªe
(&
dSql
);

828 if–
objc
==5 && 
cbD©a
.
azCﬁName
 ){

829 
i
=0; i<
cbD©a
.
nCﬁName
; i++){

830 if–
cbD©a
.
azCﬁName
[
i
] ) 
	`‰ì
(cbData.azColName[i]);

832 
	`‰ì
(
cbD©a
.
azCﬁName
);

833 
cbD©a
.
azCﬁName
 = 0;

836  
rc
;

845 
DB_FUNCTION
: {

846 
SqlFunc
 *
pFunc
;

847 *
zName
;

848 *
zS¸ùt
;

849 
nS¸ùt
;

850 if–
objc
!=4 ){

851 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "NAME SCRIPT");

852  
TCL_ERROR
;

854 
zName
 = 
	`T˛_GëSåögFromObj
(
objv
[2], 0);

855 
zS¸ùt
 = 
	`T˛_GëSåögFromObj
(
objv
[3], &
nS¸ùt
);

856 
pFunc
 = (
SqlFunc
*)
	`T˛_AŒoc
–(*pFuncË+ 
nS¸ùt
 + 1 );

857 if–
pFunc
==0 )  
TCL_ERROR
;

858 
pFunc
->
öãΩ
 = interp;

859 
pFunc
->
pNext
 = 
pDb
->pFunc;

860 
pFunc
->
zS¸ùt
 = (*)&pFunc[1];

861 
	`°r˝y
(
pFunc
->
zS¸ùt
, zScript);

862 
	`sqlôe_¸óã_fun˘i⁄
(
pDb
->
db
, 
zName
, -1, 
t˛SqlFunc
, 
pFunc
);

863 
	`sqlôe_fun˘i⁄_ty≥
(
pDb
->
db
, 
zName
, 
SQLITE_NUMERIC
);

872 
DB_LAST_INSERT_ROWID
: {

873 
T˛_Obj
 *
pResu…
;

874 
rowid
;

875 if–
objc
!=2 ){

876 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "");

877  
TCL_ERROR
;

879 
rowid
 = 
	`sqlôe_œ°_ö£π_rowid
(
pDb
->
db
);

880 
pResu…
 = 
	`T˛_GëObjResu…
(
öãΩ
);

881 
	`T˛_SëI¡Obj
(
pResu…
, 
rowid
);

890 
DB_ONECOLUMN
: {

891 *
zSql
;

892 *
zEºMsg
 = 0;

893 if–
objc
!=3 ){

894 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "SQL");

895  
TCL_ERROR
;

897 
zSql
 = 
	`T˛_GëSåögFromObj
(
objv
[2], 0);

898 
rc
 = 
	`sqlôe_exec
(
pDb
->
db
, 
zSql
, 
DbEvÆCÆlback3
, 
öãΩ
, &
zEºMsg
);

899 if–
rc
==
SQLITE_ABORT
 ){

900 
rc
 = 
SQLITE_OK
;

901 }if–
zEºMsg
 ){

902 
	`T˛_SëResu…
(
öãΩ
, 
zEºMsg
, 
TCL_VOLATILE
);

903 
	`‰ì
(
zEºMsg
);

904 
rc
 = 
TCL_ERROR
;

905 }if–
rc
!=
SQLITE_OK
 ){

906 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe_îr‹_°rög
(
rc
), 0);

907 
rc
 = 
TCL_ERROR
;

917 
DB_REKEY
: {

918 
nKey
;

919 *
pKey
;

920 if–
objc
!=3 ){

921 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "KEY");

922  
TCL_ERROR
;

924 
pKey
 = 
	`T˛_GëByãAºayFromObj
(
objv
[2], &
nKey
);

925 #ifde‡
SQLITE_HAS_CODEC


926 
rc
 = 
	`sqlôe_ªkey
(
pDb
->
db
, 
pKey
, 
nKey
);

927 if–
rc
 ){

928 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe_îr‹_°rög
(
rc
), 0);

929 
rc
 = 
TCL_ERROR
;

940 
DB_TIMEOUT
: {

941 
ms
;

942 if–
objc
!=3 ){

943 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "MILLISECONDS");

944  
TCL_ERROR
;

946 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
ms
ËË 
TCL_ERROR
;

947 
	`sqlôe_busy_timeout
(
pDb
->
db
, 
ms
);

957 
DB_TRACE
: {

958 if–
objc
>3 ){

959 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?CALLBACK?");

960 }if–
objc
==2 ){

961 if–
pDb
->
zTø˚
 ){

962 
	`T˛_AµídResu…
(
öãΩ
, 
pDb
->
zTø˚
, 0);

965 *
zTø˚
;

966 
Àn
;

967 if–
pDb
->
zTø˚
 ){

968 
	`T˛_Fªe
(
pDb
->
zTø˚
);

970 
zTø˚
 = 
	`T˛_GëSåögFromObj
(
objv
[2], &
Àn
);

971 if–
zTø˚
 && 
Àn
>0 ){

972 
pDb
->
zTø˚
 = 
	`T˛_AŒoc
–
Àn
 + 1 );

973 
	`°r˝y
(
pDb
->
zTø˚
, zTrace);

975 
pDb
->
zTø˚
 = 0;

977 if–
pDb
->
zTø˚
 ){

978 
pDb
->
öãΩ
 = interp;

979 
	`sqlôe_åa˚
(
pDb
->
db
, 
DbTø˚H™dÀr
,ÖDb);

981 
	`sqlôe_åa˚
(
pDb
->
db
, 0, 0);

988  
rc
;

989 
	}
}

1022 
	$DbMaö
(*
cd
, 
T˛_I¡îp
 *
öãΩ
, 
objc
,
T˛_Obj
 *c⁄°*
objv
){

1023 
mode
;

1024 
SqlôeDb
 *
p
;

1025 *
pKey
 = 0;

1026 
nKey
 = 0;

1027 c⁄° *
zArg
;

1028 *
zEºMsg
;

1029 c⁄° *
zFûe
;

1030 
zBuf
[80];

1031 if–
objc
==2 ){

1032 
zArg
 = 
	`T˛_GëSåögFromObj
(
objv
[1], 0);

1033 if–
	`°rcmp
(
zArg
,"-encoding")==0 ){

1034 
	`T˛_AµídResu…
(
öãΩ
,
sqlôe_ícodög
,0);

1035  
TCL_OK
;

1037 if–
	`°rcmp
(
zArg
,"-version")==0 ){

1038 
	`T˛_AµídResu…
(
öãΩ
,
sqlôe_vîsi⁄
,0);

1039  
TCL_OK
;

1041 if–
	`°rcmp
(
zArg
,"-has-codec")==0 ){

1042 #ifde‡
SQLITE_HAS_CODEC


1043 
	`T˛_AµídResu…
(
öãΩ
,"1",0);

1045 
	`T˛_AµídResu…
(
öãΩ
,"0",0);

1047  
TCL_OK
;

1049 if–
	`°rcmp
(
zArg
,"-tcl-uses-utf")==0 ){

1050 #ifde‡
TCL_UTF_MAX


1051 
	`T˛_AµídResu…
(
öãΩ
,"1",0);

1053 
	`T˛_AµídResu…
(
öãΩ
,"0",0);

1055  
TCL_OK
;

1058 if–
objc
==5 || objc==6 ){

1059 
zArg
 = 
	`T˛_GëSåögFromObj
(
objv
[
objc
-2], 0);

1060 if–
	`°rcmp
(
zArg
,"-key")==0 ){

1061 
pKey
 = 
	`T˛_GëByãAºayFromObj
(
objv
[
objc
-1], &
nKey
);

1062 
objc
 -= 2;

1065 if–
objc
!=3 && objc!=4 ){

1066 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
,

1067 #ifde‡
SQLITE_HAS_CODEC


1073  
TCL_ERROR
;

1075 if–
objc
==3 ){

1076 
mode
 = 0666;

1077 }if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
mode
)!=
TCL_OK
 ){

1078  
TCL_ERROR
;

1080 
zEºMsg
 = 0;

1081 
p
 = (
SqlôeDb
*)
	`T˛_AŒoc
( (*p) );

1082 if–
p
==0 ){

1083 
	`T˛_SëResu…
(
öãΩ
, "mÆlo¯Áûed", 
TCL_STATIC
);

1084  
TCL_ERROR
;

1086 
	`mem£t
(
p
, 0, (*p));

1087 
zFûe
 = 
	`T˛_GëSåögFromObj
(
objv
[2], 0);

1088 #ifde‡
SQLITE_HAS_CODEC


1089 
p
->
db
 = 
	`sqlôe_›í_í¸y±ed
(
zFûe
, 
pKey
, 
nKey
, 0, &
zEºMsg
);

1091 
p
->
db
 = 
	`sqlôe_›í
(
zFûe
, 
mode
, &
zEºMsg
);

1093 if–
p
->
db
==0 ){

1094 
	`T˛_SëResu…
(
öãΩ
, 
zEºMsg
, 
TCL_VOLATILE
);

1095 
	`T˛_Fªe
((*)
p
);

1096 
	`‰ì
(
zEºMsg
);

1097  
TCL_ERROR
;

1099 
zArg
 = 
	`T˛_GëSåögFromObj
(
objv
[1], 0);

1100 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
zArg
, 
DbObjCmd
, (*)
p
, 
DbDñëeCmd
);

1104 
	`•rötf
(
zBuf
, "%p", 
p
->
db
);

1105 if–
	`°∫cmp
(
zBuf
,"0x",2) ){

1106 
	`•rötf
(
zBuf
, "0x%p", 
p
->
db
);

1108 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

1113 #ifde‡
SQLITE_TEST


1115 
	`Md5_Regi°î
(
sqlôe
*);

1116 
	`Md5_Regi°î
(
p
->
db
);

1119  
TCL_OK
;

1120 
	}
}

1126 #i‚de‡
USE_TCL_STUBS


1127 #unde‡
T˛_InôStubs


1128 
	#T˛_InôStubs
(
a
,
b
,
c
)

	)

1140 
	$Sqlôe_Inô
(
T˛_I¡îp
 *
öãΩ
){

1141 
	`T˛_InôStubs
(
öãΩ
, "8.0", 0);

1142 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlôe", (
T˛_ObjCmdProc
*)
DbMaö
, 0, 0);

1143 
	`T˛_PkgProvide
(
öãΩ
, "sqlite", "2.0");

1144  
TCL_OK
;

1145 
	}
}

1146 
	$T˛sqlôe_Inô
(
T˛_I¡îp
 *
öãΩ
){

1147 
	`T˛_InôStubs
(
öãΩ
, "8.0", 0);

1148 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlôe", (
T˛_ObjCmdProc
*)
DbMaö
, 0, 0);

1149 
	`T˛_PkgProvide
(
öãΩ
, "sqlite", "2.0");

1150  
TCL_OK
;

1151 
	}
}

1152 
	$Sqlôe_Sa„Inô
(
T˛_I¡îp
 *
öãΩ
){

1153  
TCL_OK
;

1154 
	}
}

1155 
	$T˛sqlôe_Sa„Inô
(
T˛_I¡îp
 *
öãΩ
){

1156  
TCL_OK
;

1157 
	}
}

1164 
	$Et_AµInô
(
T˛_I¡îp
 *
öãΩ
){

1165  
	`Sqlôe_Inô
(
öãΩ
);

1166 
	}
}

1172 #i‡
deföed
(
TCLSH
) && TCLSH>0

1179 #i‡
TCLSH
==1

1180 
	gzMaölo›
[] =

1204 
	$Libsqlôe_Inô
–
T˛_I¡îp
 *
öãΩ
) {

1205 #ifde‡
TCL_THREADS


1206 i‡(
	`Thªad_Inô
(
öãΩ
Ë=
TCL_ERROR
) {

1207  
TCL_ERROR
;

1210 
	`Sqlôe_Inô
(
öãΩ
);

1211 #ifde‡
SQLITE_TEST


1213 
	`Sqlôëe°1_Inô
(
T˛_I¡îp
*);

1214 
	`Sqlôëe°2_Inô
(
T˛_I¡îp
*);

1215 
	`Sqlôëe°3_Inô
(
T˛_I¡îp
*);

1216 
	`Md5_Inô
(
T˛_I¡îp
*);

1217 
	`Sqlôëe°1_Inô
(
öãΩ
);

1218 
	`Sqlôëe°2_Inô
(
öãΩ
);

1219 
	`Sqlôëe°3_Inô
(
öãΩ
);

1220 
	`Md5_Inô
(
öãΩ
);

1221 
	`T˛_SèticPackage
(
öãΩ
, "sqlôe", 
Libsqlôe_Inô
, Libsqlite_Init);

1224  
TCL_OK
;

1225 
	}
}

1227 
	#TCLSH_MAIN
 
maö


	)

1228 #i‡
TCLSH
==1

1229 
	$TCLSH_MAIN
(
¨gc
, **
¨gv
){

1230 #i‚de‡
TCL_THREADS


1231 
T˛_I¡îp
 *
öãΩ
;

1232 
	`T˛_FödExecuèbÀ
(
¨gv
[0]);

1233 
öãΩ
 = 
	`T˛_Cª©eI¡îp
();

1234 
	`Libsqlôe_Inô
(
öãΩ
);

1235 if–
¨gc
>=2 ){

1236 
i
;

1237 
	`T˛_SëV¨
(
öãΩ
,"¨gv0",
¨gv
[1],
TCL_GLOBAL_ONLY
);

1238 
	`T˛_SëV¨
(
öãΩ
,"¨gv", "", 
TCL_GLOBAL_ONLY
);

1239 
i
=2; i<
¨gc
; i++){

1240 
	`T˛_SëV¨
(
öãΩ
, "¨gv", 
¨gv
[
i
],

1241 
TCL_GLOBAL_ONLY
 | 
TCL_LIST_ELEMENT
 | 
TCL_APPEND_VALUE
);

1243 if–
	`T˛_EvÆFûe
(
öãΩ
, 
¨gv
[1])!=
TCL_OK
 ){

1244 c⁄° *
zInfo
 = 
	`T˛_GëV¨
(
öãΩ
, "îr‹Info", 
TCL_GLOBAL_ONLY
);

1245 if–
zInfo
==0 ) zInfÿ
öãΩ
->
ªsu…
;

1246 
	`Ârötf
(
°dîr
,"%s: %s\n", *
¨gv
, 
zInfo
);

1247  
TCL_ERROR
;

1250 
	`T˛_GlobÆEvÆ
(
öãΩ
, 
zMaölo›
);

1254 
	`T˛_Maö
(
¨gc
, 
¨gv
, 
Libsqlôe_Inô
);

1257 
	}
}

1264 #i‡
TCLSH
==2

1265 
	gzA«lysis
[] =

1266 
	~"•a˚™Æ_t˛.h
"

1269 
	$maö
(
¨gc
, **
¨gv
){

1270 
T˛_I¡îp
 *
öãΩ
;

1271 
i
;

1272 
	`T˛_FödExecuèbÀ
(
¨gv
[0]);

1273 
öãΩ
 = 
	`T˛_Cª©eI¡îp
();

1274 
	`Libsqlôe_Inô
(
öãΩ
);

1275 
	`T˛_SëV¨
(
öãΩ
,"¨gv0",
¨gv
[0],
TCL_GLOBAL_ONLY
);

1276 
	`T˛_SëV¨
(
öãΩ
,"¨gv", "", 
TCL_GLOBAL_ONLY
);

1277 
i
=1; i<
¨gc
; i++){

1278 
	`T˛_SëV¨
(
öãΩ
, "¨gv", 
¨gv
[
i
],

1279 
TCL_GLOBAL_ONLY
 | 
TCL_LIST_ELEMENT
 | 
TCL_APPEND_VALUE
);

1281 if–
	`T˛_GlobÆEvÆ
(
öãΩ
, 
zA«lysis
)!=
TCL_OK
 ){

1282 c⁄° *
zInfo
 = 
	`T˛_GëV¨
(
öãΩ
, "îr‹Info", 
TCL_GLOBAL_ONLY
);

1283 if–
zInfo
==0 ) zInfÿ
öãΩ
->
ªsu…
;

1284 
	`Ârötf
(
°dîr
,"%s: %s\n", *
¨gv
, 
zInfo
);

1285  
TCL_ERROR
;

1288 
	}
}

	@test1.c

18 
	~"sqlôeI¡.h
"

19 
	~"t˛.h
"

20 
	~"os.h
"

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

24 #i‡
OS_WIN


25 
	#PTR_FMT
 "%x"

	)

27 
	#PTR_FMT
 "%p"

	)

33 
	$gëDbPoöãr
(
T˛_I¡îp
 *
öãΩ
, c⁄° *
zA
, 
sqlôe
 **
µDb
){

34 if–
	`ssˇnf
(
zA
, 
PTR_FMT
, (**)
µDb
)!=1 &&

35 (
zA
[0]!='0' || zA[1]!='x' || 
	`ssˇnf
(&zA[2], 
PTR_FMT
, (**)
µDb
)!=1)

37 
	`T˛_AµídResu…
(
öãΩ
, "\"", 
zA
, "\" isÇotá validÖointer value", 0);

38  
TCL_ERROR
;

40  
TCL_OK
;

41 
	}
}

46 
	$gëVmPoöãr
(
T˛_I¡îp
 *
öãΩ
, c⁄° *
zArg
, 
sqlôe_vm
 **
µVm
){

47 if–
	`ssˇnf
(
zArg
, 
PTR_FMT
, (**)
µVm
)!=1 ){

48 
	`T˛_AµídResu…
(
öãΩ
, "\"", 
zArg
, "\" isÇotá validÖointer value", 0);

49  
TCL_ERROR
;

51  
TCL_OK
;

52 
	}
}

67 
	$makePoöãrSå
(
T˛_I¡îp
 *
öãΩ
, *
zPå
, *
p
){

68 *
p2
;

69 
	`•rötf
(
zPå
, 
PTR_FMT
, 
p
);

70 if–
	`ssˇnf
(
zPå
, 
PTR_FMT
, &
p2
)!=1 ||Ö2!=
p
 ){

71 
	`•rötf
(
zPå
, "0x" 
PTR_FMT
, 
p
);

72 if–
	`ssˇnf
(
zPå
, 
PTR_FMT
, &
p2
)!=1 ||Ö2!=
p
 ){

73 
	`T˛_AµídResu…
(
öãΩ
, "unableÅo convertáÖointerÅoá string "

74 "öÅhêfûê" 
__FILE__
 " in function makePointerStr(). Please "

78  
TCL_ERROR
;

81  
TCL_OK
;

82 
	}
}

89 
	$sqlôe_ã°_›í
(

90 *
NŸU£d
,

91 
T˛_I¡îp
 *
öãΩ
,

92 
¨gc
,

93 **
¨gv


95 
sqlôe
 *
db
;

96 *
zEº
 = 0;

97 
zBuf
[100];

98 if–
¨gc
!=2 ){

99 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

101  
TCL_ERROR
;

103 
db
 = 
	`sqlôe_›í
(
¨gv
[1], 0666, &
zEº
);

104 if–
db
==0 ){

105 
	`T˛_AµídResu…
(
öãΩ
, 
zEº
, 0);

106 
	`‰ì
(
zEº
);

107  
TCL_ERROR
;

109 if–
	`makePoöãrSå
(
öãΩ
, 
zBuf
, 
db
ËË 
TCL_ERROR
;

110 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

111  
TCL_OK
;

112 
	}
}

117 
	$exec_¥ötf_cb
(*
pArg
, 
¨gc
, **
¨gv
, **
«me
){

118 
T˛_DSåög
 *
°r
 = (T˛_DSåög*)
pArg
;

119 
i
;

121 if–
	`T˛_DSåögLígth
(
°r
)==0 ){

122 
i
=0; i<
¨gc
; i++){

123 
	`T˛_DSåögAµídEÀmít
(
°r
, 
«me
[
i
] ?Çame[i] : "NULL");

126 
i
=0; i<
¨gc
; i++){

127 
	`T˛_DSåögAµídEÀmít
(
°r
, 
¨gv
[
i
] ?árgv[i] : "NULL");

130 
	}
}

139 
	$ã°_exec_¥ötf
(

140 *
NŸU£d
,

141 
T˛_I¡îp
 *
öãΩ
,

142 
¨gc
,

143 **
¨gv


145 
sqlôe
 *
db
;

146 
T˛_DSåög
 
°r
;

147 
rc
;

148 *
zEº
 = 0;

149 
zBuf
[30];

150 if–
¨gc
!=4 ){

151 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

153  
TCL_ERROR
;

155 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

156 
	`T˛_DSåögInô
(&
°r
);

157 
rc
 = 
	`sqlôe_exec_¥ötf
(
db
, 
¨gv
[2], 
exec_¥ötf_cb
, &
°r
, &
zEº
,árgv[3]);

158 
	`•rötf
(
zBuf
, "%d", 
rc
);

159 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

160 
	`T˛_AµídEÀmít
(
öãΩ
, 
rc
==
SQLITE_OK
 ? 
	`T˛_DSåögVÆue
(&
°r
Ë: 
zEº
);

161 
	`T˛_DSåögFªe
(&
°r
);

162 if–
zEº
 ) 
	`‰ì
(zErr);

163  
TCL_OK
;

164 
	}
}

173 
	$ã°_m¥ötf_z
(

174 *
NŸU£d
,

175 
T˛_I¡îp
 *
öãΩ
,

176 
¨gc
,

177 **
¨gv


179 *
zResu…
 = 0;

180 
i
;

182 
i
=2; i<
¨gc
; i++){

183 
zResu…
 = 
	`sqlôeMPrötf
("%z%s%s", zResu…, 
¨gv
[1],árgv[
i
]);

185 
	`T˛_AµídResu…
(
öãΩ
, 
zResu…
, 0);

186 
	`sqlôeFªe
(
zResu…
);

187  
TCL_OK
;

188 
	}
}

197 
	$ã°_gë_èbÀ_¥ötf
(

198 *
NŸU£d
,

199 
T˛_I¡îp
 *
öãΩ
,

200 
¨gc
,

201 **
¨gv


203 
sqlôe
 *
db
;

204 
T˛_DSåög
 
°r
;

205 
rc
;

206 *
zEº
 = 0;

207 
nRow
, 
nCﬁ
;

208 **
aResu…
;

209 
i
;

210 
zBuf
[30];

211 if–
¨gc
!=4 ){

212 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

214  
TCL_ERROR
;

216 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

217 
	`T˛_DSåögInô
(&
°r
);

218 
rc
 = 
	`sqlôe_gë_èbÀ_¥ötf
(
db
, 
¨gv
[2], &
aResu…
, &
nRow
, &
nCﬁ
,

219 &
zEº
, 
¨gv
[3]);

220 
	`•rötf
(
zBuf
, "%d", 
rc
);

221 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

222 if–
rc
==
SQLITE_OK
 ){

223 
	`•rötf
(
zBuf
, "%d", 
nRow
);

224 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

225 
	`•rötf
(
zBuf
, "%d", 
nCﬁ
);

226 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

227 
i
=0; i<(
nRow
+1)*
nCﬁ
; i++){

228 
	`T˛_AµídEÀmít
(
öãΩ
, 
aResu…
[
i
] ?áResult[i] : "NULL");

231 
	`T˛_AµídEÀmít
(
öãΩ
, 
zEº
);

233 
	`sqlôe_‰ì_èbÀ
(
aResu…
);

234 if–
zEº
 ) 
	`‰ì
(zErr);

235  
TCL_OK
;

236 
	}
}

244 
	$ã°_œ°_rowid
(

245 *
NŸU£d
,

246 
T˛_I¡îp
 *
öãΩ
,

247 
¨gc
,

248 **
¨gv


250 
sqlôe
 *
db
;

251 
zBuf
[30];

253 if–
¨gc
!=2 ){

254 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0], " DB\"", 0);

255  
TCL_ERROR
;

257 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

258 
	`•rötf
(
zBuf
, "%d", 
	`sqlôe_œ°_ö£π_rowid
(
db
));

259 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

260  
SQLITE_OK
;

261 
	}
}

268 
	$sqlôe_ã°_˛o£
(

269 *
NŸU£d
,

270 
T˛_I¡îp
 *
öãΩ
,

271 
¨gc
,

272 **
¨gv


274 
sqlôe
 *
db
;

275 if–
¨gc
!=2 ){

276 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

278  
TCL_ERROR
;

280 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

281 
	`sqlôe_˛o£
(
db
);

282  
TCL_OK
;

283 
	}
}

289 
	$i‚uŒFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

290 
i
;

291 
i
=0; i<
¨gc
; i++){

292 if–
¨gv
[
i
] ){

293 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
¨gv
[
i
], -1);

297 
	}
}

302 
	sd°r
 {

303 
	mnAŒoc
;

304 
	mnU£d
;

305 *
	mz
;

311 
	$d°rAµíd
(
d°r
 *
p
, c⁄° *
z
, 
dividî
){

312 
n
 = 
	`°æí
(
z
);

313 if–
p
->
nU£d
 + 
n
 + 2 >Ö->
nAŒoc
 ){

314 *
zNew
;

315 
p
->
nAŒoc
 =Ö->nAŒoc*2 + 
n
 + 200;

316 
zNew
 = 
	`sqlôeRóŒoc
(
p
->
z
,Ö->
nAŒoc
);

317 if–
zNew
==0 ){

318 
	`sqlôeFªe
(
p
->
z
);

319 
	`mem£t
(
p
, 0, (*p));

322 
p
->
z
 = 
zNew
;

324 if–
dividî
 && 
p
->
nU£d
>0 ){

325 
p
->
z
[p->
nU£d
++] = 
dividî
;

327 
	`mem˝y
(&
p
->
z
[p->
nU£d
], z, 
n
+1);

328 
p
->
nU£d
 +
n
;

329 
	}
}

334 
	$execFuncCÆlback
(*
pD©a
, 
¨gc
, **
¨gv
, **
NŸU£d
){

335 
d°r
 *
p
 = (d°r*)
pD©a
;

336 
i
;

337 
i
=0; i<
¨gc
; i++){

338 if–
¨gv
[
i
]==0 ){

339 
	`d°rAµíd
(
p
, "NULL", ' ');

341 
	`d°rAµíd
(
p
, 
¨gv
[
i
], ' ');

345 
	}
}

358 
	$sqlôeExecFunc
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

359 
d°r
 
x
;

360 
	`mem£t
(&
x
, 0, (x));

361 
	`sqlôe_exec
((
sqlôe
*)
	`sqlôe_u£r_d©a
(
c⁄ãxt
), 
¨gv
[0],

362 
execFuncCÆlback
, &
x
, 0);

363 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
x
.
z
, x.
nU£d
);

364 
	`sqlôeFªe
(
x
.
z
);

365 
	}
}

382 
	$ã°_¸óã_fun˘i⁄
(

383 *
NŸU£d
,

384 
T˛_I¡îp
 *
öãΩ
,

385 
¨gc
,

386 **
¨gv


388 
sqlôe
 *
db
;

389 
	`Md5_Regi°î
(
sqlôe
*);

390 if–
¨gc
!=2 ){

391 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

393  
TCL_ERROR
;

395 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

396 
	`sqlôe_¸óã_fun˘i⁄
(
db
, "x_cﬂÀs˚", -1, 
i‚uŒFunc
, 0);

397 
	`sqlôe_¸óã_fun˘i⁄
(
db
, "x_sqlôe_exec", 1, 
sqlôeExecFunc
, db);

398  
TCL_OK
;

399 
	}
}

404 
Cou¡Ctx
 
	tCou¡Ctx
;

405 
	sCou¡Ctx
 {

406 
	mn
;

408 
	$cou¡Sãp
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

409 
Cou¡Ctx
 *
p
;

410 
p
 = 
	`sqlôe_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

411 if–(
¨gc
==0 || 
¨gv
[0]Ë&& 
p
 ){

412 
p
->
n
++;

414 
	}
}

415 
	$cou¡FöÆize
(
sqlôe_func
 *
c⁄ãxt
){

416 
Cou¡Ctx
 *
p
;

417 
p
 = 
	`sqlôe_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

418 
	`sqlôe_£t_ªsu…_öt
(
c⁄ãxt
, 
p
 ?Ö->
n
 : 0);

419 
	}
}

432 
	$ã°_¸óã_aggªg©e
(

433 *
NŸU£d
,

434 
T˛_I¡îp
 *
öãΩ
,

435 
¨gc
,

436 **
¨gv


438 
sqlôe
 *
db
;

439 if–
¨gc
!=2 ){

440 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

442  
TCL_ERROR
;

444 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

445 
	`sqlôe_¸óã_aggªg©e
(
db
, "x_cou¡", 0, 
cou¡Sãp
, 
cou¡FöÆize
, 0);

446 
	`sqlôe_¸óã_aggªg©e
(
db
, "x_cou¡", 1, 
cou¡Sãp
, 
cou¡FöÆize
, 0);

447  
TCL_OK
;

448 
	}
}

457 
	$sqlôe_m¥ötf_öt
(

458 *
NŸU£d
,

459 
T˛_I¡îp
 *
öãΩ
,

460 
¨gc
,

461 **
¨gv


463 
a
[3], 
i
;

464 *
z
;

465 if–
¨gc
!=5 ){

466 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

468  
TCL_ERROR
;

470 
i
=2; i<5; i++){

471 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[
i
], &
a
[i-2]ËË 
TCL_ERROR
;

473 
z
 = 
	`sqlôe_m¥ötf
(
¨gv
[1], 
a
[0],á[1],á[2]);

474 
	`T˛_AµídResu…
(
öãΩ
, 
z
, 0);

475 
	`sqlôe_‰ìmem
(
z
);

476  
TCL_OK
;

477 
	}
}

484 
	$sqlôe_m¥ötf_°r
(

485 *
NŸU£d
,

486 
T˛_I¡îp
 *
öãΩ
,

487 
¨gc
,

488 **
¨gv


490 
a
[3], 
i
;

491 *
z
;

492 if–
¨gc
<4 ||árgc>5 ){

493 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

495  
TCL_ERROR
;

497 
i
=2; i<4; i++){

498 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[
i
], &
a
[i-2]ËË 
TCL_ERROR
;

500 
z
 = 
	`sqlôe_m¥ötf
(
¨gv
[1], 
a
[0],á[1], 
¨gc
>4 ?árgv[4] : 
NULL
);

501 
	`T˛_AµídResu…
(
öãΩ
, 
z
, 0);

502 
	`sqlôe_‰ìmem
(
z
);

503  
TCL_OK
;

504 
	}
}

511 
	$sqlôe_m¥ötf_doubÀ
(

512 *
NŸU£d
,

513 
T˛_I¡îp
 *
öãΩ
,

514 
¨gc
,

515 **
¨gv


517 
a
[3], 
i
;

518 
r
;

519 *
z
;

520 if–
¨gc
!=5 ){

521 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

523  
TCL_ERROR
;

525 
i
=2; i<4; i++){

526 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[
i
], &
a
[i-2]ËË 
TCL_ERROR
;

528 if–
	`T˛_GëDoubÀ
(
öãΩ
, 
¨gv
[4], &
r
ËË 
TCL_ERROR
;

529 
z
 = 
	`sqlôe_m¥ötf
(
¨gv
[1], 
a
[0],á[1], 
r
);

530 
	`T˛_AµídResu…
(
öãΩ
, 
z
, 0);

531 
	`sqlôe_‰ìmem
(
z
);

532  
TCL_OK
;

533 
	}
}

542 
	$sqlôe_m¥ötf_sˇÀd
(

543 *
NŸU£d
,

544 
T˛_I¡îp
 *
öãΩ
,

545 
¨gc
,

546 **
¨gv


548 
i
;

549 
r
[2];

550 *
z
;

551 if–
¨gc
!=4 ){

552 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

554  
TCL_ERROR
;

556 
i
=2; i<4; i++){

557 if–
	`T˛_GëDoubÀ
(
öãΩ
, 
¨gv
[
i
], &
r
[i-2]ËË 
TCL_ERROR
;

559 
z
 = 
	`sqlôe_m¥ötf
(
¨gv
[1], 
r
[0]*r[1]);

560 
	`T˛_AµídResu…
(
öãΩ
, 
z
, 0);

561 
	`sqlôe_‰ìmem
(
z
);

562  
TCL_OK
;

563 
	}
}

571 #ifde‡
MEMORY_DEBUG


572 
	$sqlôe_mÆloc_Áû
(

573 *
NŸU£d
,

574 
T˛_I¡îp
 *
öãΩ
,

575 
¨gc
,

576 **
¨gv


578 
n
;

579 if–
¨gc
!=2 ){

580 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0], " N\"", 0);

581  
TCL_ERROR
;

583 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], &
n
ËË 
TCL_ERROR
;

584 
sqlôe_iMÆlocFaû
 = 
n
;

585 
sqlôe_mÆloc_Áûed
 = 0;

586  
TCL_OK
;

587 
	}
}

595 #ifde‡
MEMORY_DEBUG


596 
	$sqlôe_mÆloc_°©
(

597 *
NŸU£d
,

598 
T˛_I¡îp
 *
öãΩ
,

599 
¨gc
,

600 **
¨gv


602 
zBuf
[200];

603 
	`•rötf
(
zBuf
, "%d %d %d", 
sqlôe_nMÆloc
, 
sqlôe_nFªe
, 
sqlôe_iMÆlocFaû
);

604 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

605  
TCL_OK
;

606 
	}
}

616 
	$sqlôe_ab‹t
(

617 *
NŸU£d
,

618 
T˛_I¡îp
 *
öãΩ
,

619 
¨gc
,

620 **
¨gv


622 
	`as£π
–
öãΩ
==0 );

623  
TCL_OK
;

624 
	}
}

630 
	$ã°Func
(
sqlôe_func
 *
c⁄ãxt
, 
¨gc
, c⁄° **
¨gv
){

631  
¨gc
>=2 ){

632 if–
¨gv
[0]==0 ){

633 
	`sqlôe_£t_ªsu…_îr‹
(
c⁄ãxt
, "firstárgumentÅoÅest function "

635 }if–
	`sqlôeSåICmp
(
¨gv
[0],"string")==0 ){

636 
	`sqlôe_£t_ªsu…_°rög
(
c⁄ãxt
, 
¨gv
[1], -1);

637 }if–
¨gv
[1]==0 ){

638 
	`sqlôe_£t_ªsu…_îr‹
(
c⁄ãxt
, "2ndárgument mayÇot be NULL ifÅhe "

640 }if–
	`sqlôeSåICmp
(
¨gv
[0],"int")==0 ){

641 
	`sqlôe_£t_ªsu…_öt
(
c⁄ãxt
, 
	`©oi
(
¨gv
[1]));

642 }if–
	`sqlôeSåICmp
(
¨gv
[0],"double")==0 ){

643 
	`sqlôe_£t_ªsu…_doubÀ
(
c⁄ãxt
, 
	`sqlôeAtoF
(
¨gv
[1], 0));

645 
	`sqlôe_£t_ªsu…_îr‹
(
c⁄ãxt
,"firstárgument should be one of: "

648 
¨gc
 -= 2;

649 
¨gv
 += 2;

651 
	}
}

658 
	$ã°_ªgi°î_func
(

659 *
NŸU£d
,

660 
T˛_I¡îp
 *
öãΩ
,

661 
¨gc
,

662 **
¨gv


664 
sqlôe
 *
db
;

665 
rc
;

666 if–
¨gc
!=3 ){

667 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

669  
TCL_ERROR
;

671 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

672 
rc
 = 
	`sqlôe_¸óã_fun˘i⁄
(
db
, 
¨gv
[2], -1, 
ã°Func
, 0);

673 if–
rc
!=0 ){

674 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe_îr‹_°rög
(
rc
), 0);

675  
TCL_ERROR
;

677  
TCL_OK
;

678 
	}
}

688 
	$ªmembîD©aTy≥s
(*
pArg
, 
nCﬁ
, **
¨gv
, **
cﬁv
){

689 
i
;

690 
T˛_I¡îp
 *
öãΩ
 = (T˛_I¡îp*)
pArg
;

691 
T˛_Obj
 *
pLi°
, *
pEÀm
;

692 if–
cﬁv
[
nCﬁ
+1]==0 ){

695 
pLi°
 = 
	`T˛_NewObj
();

696 
i
=0; i<
nCﬁ
; i++){

697 
pEÀm
 = 
	`T˛_NewSåögObj
(
cﬁv
[
i
+
nCﬁ
] ? colv[i+nCol] : "NULL", -1);

698 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pLi°
, 
pEÀm
);

700 
	`T˛_SëObjResu…
(
öãΩ
, 
pLi°
);

702 
	}
}

711 
	$sqlôe_d©©y≥s
(

712 *
NŸU£d
,

713 
T˛_I¡îp
 *
öãΩ
,

714 
¨gc
,

715 **
¨gv


717 
sqlôe
 *
db
;

718 
rc
;

719 if–
¨gc
!=3 ){

720 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

722  
TCL_ERROR
;

724 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

725 
rc
 = 
	`sqlôe_exec
(
db
, 
¨gv
[2], 
ªmembîD©aTy≥s
, 
öãΩ
, 0);

726 if–
rc
!=0 &&Ñc!=
SQLITE_ABORT
 ){

727 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe_îr‹_°rög
(
rc
), 0);

728  
TCL_ERROR
;

730  
TCL_OK
;

731 
	}
}

740 
	$ã°_compûe
(

741 *
NŸU£d
,

742 
T˛_I¡îp
 *
öãΩ
,

743 
¨gc
,

744 **
¨gv


746 
sqlôe
 *
db
;

747 
sqlôe_vm
 *
vm
;

748 
rc
;

749 *
zEº
 = 0;

750 c⁄° *
zTaû
;

751 
zBuf
[50];

752 if–
¨gc
!=3 &&árgc!=4 ){

753 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

755  
TCL_ERROR
;

757 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

758 
rc
 = 
	`sqlôe_compûe
(
db
, 
¨gv
[2], 
¨gc
==4 ? &
zTaû
 : 0, &
vm
, &
zEº
);

759 if–
¨gc
==4 ) 
	`T˛_SëV¨
(
öãΩ
, 
¨gv
[3], 
zTaû
, 0);

760 if–
rc
 ){

761 
	`as£π
–
vm
==0 );

762 
	`•rötf
(
zBuf
, "(%dË", 
rc
);

763 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 
zEº
, 0);

764 
	`sqlôe_‰ìmem
(
zEº
);

765  
TCL_ERROR
;

767 if–
vm
 ){

768 if–
	`makePoöãrSå
(
öãΩ
, 
zBuf
, 
vm
ËË 
TCL_ERROR
;

769 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

771  
TCL_OK
;

772 
	}
}

780 
	$ã°_°ï
(

781 *
NŸU£d
,

782 
T˛_I¡îp
 *
öãΩ
,

783 
¨gc
,

784 **
¨gv


786 
sqlôe_vm
 *
vm
;

787 
rc
, 
i
;

788 c⁄° **
azVÆue
 = 0;

789 c⁄° **
azCﬁName
 = 0;

790 
N
 = 0;

791 *
zRc
;

792 
zBuf
[50];

793 if–
¨gc
<2 ||árgc>5 ){

794 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

796  
TCL_ERROR
;

798 if–
	`gëVmPoöãr
(
öãΩ
, 
¨gv
[1], &
vm
ËË 
TCL_ERROR
;

799 
rc
 = 
	`sqlôe_°ï
(
vm
, 
¨gc
>=3?&
N
:0,árgc>=4?&
azVÆue
:0,árgc==5?&
azCﬁName
:0);

800 if–
¨gc
>=3 ){

801 
	`•rötf
(
zBuf
, "%d", 
N
);

802 
	`T˛_SëV¨
(
öãΩ
, 
¨gv
[2], 
zBuf
, 0);

804 if–
¨gc
>=4 ){

805 
	`T˛_SëV¨
(
öãΩ
, 
¨gv
[3], "", 0);

806 if–
azVÆue
 ){

807 
i
=0; i<
N
; i++){

808 
	`T˛_SëV¨
(
öãΩ
, 
¨gv
[3], 
azVÆue
[
i
] ?ázValue[i] : "",

809 
TCL_APPEND_VALUE
 | 
TCL_LIST_ELEMENT
);

813 if–
¨gc
==5 ){

814 
	`T˛_SëV¨
(
öãΩ
, 
¨gv
[4], "", 0);

815 if–
azCﬁName
 ){

816 
i
=0; i<
N
*2; i++){

817 
	`T˛_SëV¨
(
öãΩ
, 
¨gv
[4], 
azCﬁName
[
i
] ?ázColName[i] : "",

818 
TCL_APPEND_VALUE
 | 
TCL_LIST_ELEMENT
);

822  
rc
 ){

823 
SQLITE_DONE
: 
zRc
 = "SQLITE_DONE"; ;

824 
SQLITE_BUSY
: 
zRc
 = "SQLITE_BUSY"; ;

825 
SQLITE_ROW
: 
zRc
 = "SQLITE_ROW"; ;

826 
SQLITE_ERROR
: 
zRc
 = "SQLITE_ERROR"; ;

827 
SQLITE_MISUSE
: 
zRc
 = "SQLITE_MISUSE"; ;

828 : 
zRc
 = "unknown"; ;

830 
	`T˛_AµídResu…
(
öãΩ
, 
zRc
, 0);

831  
TCL_OK
;

832 
	}
}

839 
	$ã°_föÆize
(

840 *
NŸU£d
,

841 
T˛_I¡îp
 *
öãΩ
,

842 
¨gc
,

843 **
¨gv


845 
sqlôe_vm
 *
vm
;

846 
rc
;

847 *
zEºMsg
 = 0;

848 if–
¨gc
!=2 ){

849 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

851  
TCL_ERROR
;

853 if–
	`gëVmPoöãr
(
öãΩ
, 
¨gv
[1], &
vm
ËË 
TCL_ERROR
;

854 
rc
 = 
	`sqlôe_föÆize
(
vm
, &
zEºMsg
);

855 if–
rc
 ){

856 
zBuf
[50];

857 
	`•rötf
(
zBuf
, "(%dË", 
rc
);

858 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 
zEºMsg
, 0);

859 
	`sqlôe_‰ìmem
(
zEºMsg
);

860  
TCL_ERROR
;

862  
TCL_OK
;

863 
	}
}

870 
	$ã°_ª£t
(

871 *
NŸU£d
,

872 
T˛_I¡îp
 *
öãΩ
,

873 
¨gc
,

874 **
¨gv


876 
sqlôe_vm
 *
vm
;

877 
rc
;

878 *
zEºMsg
 = 0;

879 if–
¨gc
!=2 ){

880 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

882  
TCL_ERROR
;

884 if–
	`gëVmPoöãr
(
öãΩ
, 
¨gv
[1], &
vm
ËË 
TCL_ERROR
;

885 
rc
 = 
	`sqlôe_ª£t
(
vm
, &
zEºMsg
);

886 if–
rc
 ){

887 
zBuf
[50];

888 
	`•rötf
(
zBuf
, "(%dË", 
rc
);

889 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 
zEºMsg
, 0);

890 
	`sqlôe_‰ìmem
(
zEºMsg
);

891  
TCL_ERROR
;

893  
TCL_OK
;

894 
	}
}

900 *
	gsqlôe_°©ic_böd_vÆue
 = 0;

912 
	$ã°_böd
(

913 *
NŸU£d
,

914 
T˛_I¡îp
 *
öãΩ
,

915 
¨gc
,

916 **
¨gv


918 
sqlôe_vm
 *
vm
;

919 
rc
;

920 
idx
;

921 if–
¨gc
!=5 ){

922 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

924  
TCL_ERROR
;

926 if–
	`gëVmPoöãr
(
öãΩ
, 
¨gv
[1], &
vm
ËË 
TCL_ERROR
;

927 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
idx
ËË 
TCL_ERROR
;

928 if–
	`°rcmp
(
¨gv
[4],"null")==0 ){

929 
rc
 = 
	`sqlôe_böd
(
vm
, 
idx
, 0, 0, 0);

930 }if–
	`°rcmp
(
¨gv
[4],"static")==0 ){

931 
rc
 = 
	`sqlôe_böd
(
vm
, 
idx
, 
sqlôe_°©ic_böd_vÆue
, -1, 0);

932 }if–
	`°rcmp
(
¨gv
[4],"normal")==0 ){

933 
rc
 = 
	`sqlôe_böd
(
vm
, 
idx
, 
¨gv
[3], -1, 1);

935 
	`T˛_AµídResu…
(
öãΩ
, "4thárgument should be "

937  
TCL_ERROR
;

939 if–
rc
 ){

940 
zBuf
[50];

941 
	`•rötf
(
zBuf
, "(%dË", 
rc
);

942 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 
	`sqlôe_îr‹_°rög
(
rc
), 0);

943  
TCL_ERROR
;

945  
TCL_OK
;

946 
	}
}

961 
	$ã°_bªakpoöt
(

962 *
NŸU£d
,

963 
T˛_I¡îp
 *
öãΩ
,

964 
¨gc
,

965 **
¨gv


967  
TCL_OK
;

968 
	}
}

973 
	$Sqlôëe°1_Inô
(
T˛_I¡îp
 *
öãΩ
){

974 
sqlôe_£¨ch_cou¡
;

975 
sqlôe_öãºu±_cou¡
;

976 
sqlôe_›í_fûe_cou¡
;

977 
sqlôe_cuºít_time
;

978 
sqlôe_ãmp_dúe˘‹y
;

980 *
zName
;

981 
T˛_CmdProc
 *
xProc
;

982 } 
aCmd
[] = {

983 { "sqlôe_m¥ötf_öt", (
T˛_CmdProc
*)
sqlôe_m¥ötf_öt
 },

984 { "sqlôe_m¥ötf_°r", (
T˛_CmdProc
*)
sqlôe_m¥ötf_°r
 },

985 { "sqlôe_m¥ötf_doubÀ", (
T˛_CmdProc
*)
sqlôe_m¥ötf_doubÀ
 },

986 { "sqlôe_m¥ötf_sˇÀd", (
T˛_CmdProc
*)
sqlôe_m¥ötf_sˇÀd
 },

987 { "sqlôe_m¥ötf_z_ã°", (
T˛_CmdProc
*)
ã°_m¥ötf_z
 },

988 { "sqlôe_›í", (
T˛_CmdProc
*)
sqlôe_ã°_›í
 },

989 { "sqlôe_œ°_ö£π_rowid", (
T˛_CmdProc
*)
ã°_œ°_rowid
 },

990 { "sqlôe_exec_¥ötf", (
T˛_CmdProc
*)
ã°_exec_¥ötf
 },

991 { "sqlôe_gë_èbÀ_¥ötf", (
T˛_CmdProc
*)
ã°_gë_èbÀ_¥ötf
 },

992 { "sqlôe_˛o£", (
T˛_CmdProc
*)
sqlôe_ã°_˛o£
 },

993 { "sqlôe_¸óã_fun˘i⁄", (
T˛_CmdProc
*)
ã°_¸óã_fun˘i⁄
 },

994 { "sqlôe_¸óã_aggªg©e", (
T˛_CmdProc
*)
ã°_¸óã_aggªg©e
 },

995 { "sqlôe_ªgi°î_ã°_fun˘i⁄", (
T˛_CmdProc
*)
ã°_ªgi°î_func
 },

996 { "sqlôe_ab‹t", (
T˛_CmdProc
*)
sqlôe_ab‹t
 },

997 { "sqlôe_d©©y≥s", (
T˛_CmdProc
*)
sqlôe_d©©y≥s
 },

998 #ifde‡
MEMORY_DEBUG


999 { "sqlôe_mÆloc_Áû", (
T˛_CmdProc
*)
sqlôe_mÆloc_Áû
 },

1000 { "sqlôe_mÆloc_°©", (
T˛_CmdProc
*)
sqlôe_mÆloc_°©
 },

1002 { "sqlôe_compûe", (
T˛_CmdProc
*)
ã°_compûe
 },

1003 { "sqlôe_°ï", (
T˛_CmdProc
*)
ã°_°ï
 },

1004 { "sqlôe_föÆize", (
T˛_CmdProc
*)
ã°_föÆize
 },

1005 { "sqlôe_böd", (
T˛_CmdProc
*)
ã°_böd
 },

1006 { "sqlôe_ª£t", (
T˛_CmdProc
*)
ã°_ª£t
 },

1007 { "bªakpoöt", (
T˛_CmdProc
*)
ã°_bªakpoöt
 },

1009 
i
;

1011 
i
=0; i<(
aCmd
)/(aCmd[0]); i++){

1012 
	`T˛_Cª©eComm™d
(
öãΩ
, 
aCmd
[
i
].
zName
,áCmd[i].
xProc
, 0, 0);

1014 
	`T˛_LökV¨
(
öãΩ
, "sqlite_search_count",

1015 (*)&
sqlôe_£¨ch_cou¡
, 
TCL_LINK_INT
);

1016 
	`T˛_LökV¨
(
öãΩ
, "sqlite_interrupt_count",

1017 (*)&
sqlôe_öãºu±_cou¡
, 
TCL_LINK_INT
);

1018 
	`T˛_LökV¨
(
öãΩ
, "sqlite_open_file_count",

1019 (*)&
sqlôe_›í_fûe_cou¡
, 
TCL_LINK_INT
);

1020 
	`T˛_LökV¨
(
öãΩ
, "sqlite_current_time",

1021 (*)&
sqlôe_cuºít_time
, 
TCL_LINK_INT
);

1022 
	`T˛_LökV¨
(
öãΩ
, "sqlite_static_bind_value",

1023 (*)&
sqlôe_°©ic_böd_vÆue
, 
TCL_LINK_STRING
);

1024 
	`T˛_LökV¨
(
öãΩ
, "sqlite_temp_directory",

1025 (*)&
sqlôe_ãmp_dúe˘‹y
, 
TCL_LINK_STRING
);

1026  
TCL_OK
;

1027 
	}
}

	@test2.c

18 
	~"os.h
"

19 
	~"sqlôeI¡.h
"

20 
	~"∑gî.h
"

21 
	~"t˛.h
"

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

28 *
	$îr‹Name
(
rc
){

29 *
zName
;

30  
rc
 ){

31 
SQLITE_OK
: 
zName
 = "SQLITE_OK"; ;

32 
SQLITE_ERROR
: 
zName
 = "SQLITE_ERROR"; ;

33 
SQLITE_INTERNAL
: 
zName
 = "SQLITE_INTERNAL"; ;

34 
SQLITE_PERM
: 
zName
 = "SQLITE_PERM"; ;

35 
SQLITE_ABORT
: 
zName
 = "SQLITE_ABORT"; ;

36 
SQLITE_BUSY
: 
zName
 = "SQLITE_BUSY"; ;

37 
SQLITE_NOMEM
: 
zName
 = "SQLITE_NOMEM"; ;

38 
SQLITE_READONLY
: 
zName
 = "SQLITE_READONLY"; ;

39 
SQLITE_INTERRUPT
: 
zName
 = "SQLITE_INTERRUPT"; ;

40 
SQLITE_IOERR
: 
zName
 = "SQLITE_IOERR"; ;

41 
SQLITE_CORRUPT
: 
zName
 = "SQLITE_CORRUPT"; ;

42 
SQLITE_NOTFOUND
: 
zName
 = "SQLITE_NOTFOUND"; ;

43 
SQLITE_FULL
: 
zName
 = "SQLITE_FULL"; ;

44 
SQLITE_CANTOPEN
: 
zName
 = "SQLITE_CANTOPEN"; ;

45 
SQLITE_PROTOCOL
: 
zName
 = "SQLITE_PROTOCOL"; ;

46 
SQLITE_EMPTY
: 
zName
 = "SQLITE_EMPTY"; ;

47 
SQLITE_SCHEMA
: 
zName
 = "SQLITE_SCHEMA"; ;

48 
SQLITE_TOOBIG
: 
zName
 = "SQLITE_TOOBIG"; ;

49 
SQLITE_CONSTRAINT
: 
zName
 = "SQLITE_CONSTRAINT"; ;

50 
SQLITE_MISMATCH
: 
zName
 = "SQLITE_MISMATCH"; ;

51 
SQLITE_MISUSE
: 
zName
 = "SQLITE_MISUSE"; ;

52 
SQLITE_NOLFS
: 
zName
 = "SQLITE_NOLFS"; ;

53 : 
zName
 = "SQLITE_Unknown"; ;

55  
zName
;

56 
	}
}

63 
	$∑gî_›í
(

64 *
NŸU£d
,

65 
T˛_I¡îp
 *
öãΩ
,

66 
¨gc
,

67 c⁄° **
¨gv


69 
Pagî
 *
pPagî
;

70 
nPage
;

71 
rc
;

72 
zBuf
[100];

73 if–
¨gc
!=3 ){

74 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

76  
TCL_ERROR
;

78 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
nPage
ËË 
TCL_ERROR
;

79 
rc
 = 
	`sqlôïagî_›í
(&
pPagî
, 
¨gv
[1], 
nPage
, 0, 1);

80 if–
rc
!=
SQLITE_OK
 ){

81 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

82  
TCL_ERROR
;

84 
	`•rötf
(
zBuf
,"0x%x",()
pPagî
);

85 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

86  
TCL_OK
;

87 
	}
}

94 
	$∑gî_˛o£
(

95 *
NŸU£d
,

96 
T˛_I¡îp
 *
öãΩ
,

97 
¨gc
,

98 c⁄° **
¨gv


100 
Pagî
 *
pPagî
;

101 
rc
;

102 if–
¨gc
!=2 ){

103 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

105  
TCL_ERROR
;

107 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pPagî
ËË 
TCL_ERROR
;

108 
rc
 = 
	`sqlôïagî_˛o£
(
pPagî
);

109 if–
rc
!=
SQLITE_OK
 ){

110 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

111  
TCL_ERROR
;

113  
TCL_OK
;

114 
	}
}

121 
	$∑gî_rﬁlback
(

122 *
NŸU£d
,

123 
T˛_I¡îp
 *
öãΩ
,

124 
¨gc
,

125 c⁄° **
¨gv


127 
Pagî
 *
pPagî
;

128 
rc
;

129 if–
¨gc
!=2 ){

130 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

132  
TCL_ERROR
;

134 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pPagî
ËË 
TCL_ERROR
;

135 
rc
 = 
	`sqlôïagî_rﬁlback
(
pPagî
);

136 if–
rc
!=
SQLITE_OK
 ){

137 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

138  
TCL_ERROR
;

140  
TCL_OK
;

141 
	}
}

148 
	$∑gî_commô
(

149 *
NŸU£d
,

150 
T˛_I¡îp
 *
öãΩ
,

151 
¨gc
,

152 c⁄° **
¨gv


154 
Pagî
 *
pPagî
;

155 
rc
;

156 if–
¨gc
!=2 ){

157 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

159  
TCL_ERROR
;

161 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pPagî
ËË 
TCL_ERROR
;

162 
rc
 = 
	`sqlôïagî_commô
(
pPagî
);

163 if–
rc
!=
SQLITE_OK
 ){

164 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

165  
TCL_ERROR
;

167  
TCL_OK
;

168 
	}
}

175 
	$∑gî_ck±_begö
(

176 *
NŸU£d
,

177 
T˛_I¡îp
 *
öãΩ
,

178 
¨gc
,

179 c⁄° **
¨gv


181 
Pagî
 *
pPagî
;

182 
rc
;

183 if–
¨gc
!=2 ){

184 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

186  
TCL_ERROR
;

188 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pPagî
ËË 
TCL_ERROR
;

189 
rc
 = 
	`sqlôïagî_ck±_begö
(
pPagî
);

190 if–
rc
!=
SQLITE_OK
 ){

191 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

192  
TCL_ERROR
;

194  
TCL_OK
;

195 
	}
}

202 
	$∑gî_ck±_rﬁlback
(

203 *
NŸU£d
,

204 
T˛_I¡îp
 *
öãΩ
,

205 
¨gc
,

206 c⁄° **
¨gv


208 
Pagî
 *
pPagî
;

209 
rc
;

210 if–
¨gc
!=2 ){

211 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

213  
TCL_ERROR
;

215 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pPagî
ËË 
TCL_ERROR
;

216 
rc
 = 
	`sqlôïagî_ck±_rﬁlback
(
pPagî
);

217 if–
rc
!=
SQLITE_OK
 ){

218 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

219  
TCL_ERROR
;

221  
TCL_OK
;

222 
	}
}

229 
	$∑gî_ck±_commô
(

230 *
NŸU£d
,

231 
T˛_I¡îp
 *
öãΩ
,

232 
¨gc
,

233 c⁄° **
¨gv


235 
Pagî
 *
pPagî
;

236 
rc
;

237 if–
¨gc
!=2 ){

238 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

240  
TCL_ERROR
;

242 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pPagî
ËË 
TCL_ERROR
;

243 
rc
 = 
	`sqlôïagî_ck±_commô
(
pPagî
);

244 if–
rc
!=
SQLITE_OK
 ){

245 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

246  
TCL_ERROR
;

248  
TCL_OK
;

249 
	}
}

256 
	$∑gî_°©s
(

257 *
NŸU£d
,

258 
T˛_I¡îp
 *
öãΩ
,

259 
¨gc
,

260 c⁄° **
¨gv


262 
Pagî
 *
pPagî
;

263 
i
, *
a
;

264 if–
¨gc
!=2 ){

265 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

267  
TCL_ERROR
;

269 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pPagî
ËË 
TCL_ERROR
;

270 
a
 = 
	`sqlôïagî_°©s
(
pPagî
);

271 
i
=0; i<9; i++){

272 *
zName
[] = {

276 
zBuf
[100];

277 
	`T˛_AµídEÀmít
(
öãΩ
, 
zName
[
i
]);

278 
	`•rötf
(
zBuf
,"%d",
a
[
i
]);

279 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

281  
TCL_OK
;

282 
	}
}

289 
	$∑gî_∑gecou¡
(

290 *
NŸU£d
,

291 
T˛_I¡îp
 *
öãΩ
,

292 
¨gc
,

293 c⁄° **
¨gv


295 
Pagî
 *
pPagî
;

296 
zBuf
[100];

297 if–
¨gc
!=2 ){

298 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

300  
TCL_ERROR
;

302 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pPagî
ËË 
TCL_ERROR
;

303 
	`•rötf
(
zBuf
,"%d",
	`sqlôïagî_∑gecou¡
(
pPagî
));

304 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

305  
TCL_OK
;

306 
	}
}

313 
	$∑ge_gë
(

314 *
NŸU£d
,

315 
T˛_I¡îp
 *
öãΩ
,

316 
¨gc
,

317 c⁄° **
¨gv


319 
Pagî
 *
pPagî
;

320 
zBuf
[100];

321 *
pPage
;

322 
pgno
;

323 
rc
;

324 if–
¨gc
!=3 ){

325 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

327  
TCL_ERROR
;

329 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pPagî
ËË 
TCL_ERROR
;

330 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
pgno
ËË 
TCL_ERROR
;

331 
rc
 = 
	`sqlôïagî_gë
(
pPagî
, 
pgno
, &
pPage
);

332 if–
rc
!=
SQLITE_OK
 ){

333 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

334  
TCL_ERROR
;

336 
	`•rötf
(
zBuf
,"0x%x",()
pPage
);

337 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

338  
TCL_OK
;

339 
	}
}

347 
	$∑ge_lookup
(

348 *
NŸU£d
,

349 
T˛_I¡îp
 *
öãΩ
,

350 
¨gc
,

351 c⁄° **
¨gv


353 
Pagî
 *
pPagî
;

354 
zBuf
[100];

355 *
pPage
;

356 
pgno
;

357 if–
¨gc
!=3 ){

358 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

360  
TCL_ERROR
;

362 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pPagî
ËË 
TCL_ERROR
;

363 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
pgno
ËË 
TCL_ERROR
;

364 
pPage
 = 
	`sqlôïagî_lookup
(
pPagî
, 
pgno
);

365 if–
pPage
 ){

366 
	`•rötf
(
zBuf
,"0x%x",()
pPage
);

367 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

369  
TCL_OK
;

370 
	}
}

377 
	$∑ge_uƒef
(

378 *
NŸU£d
,

379 
T˛_I¡îp
 *
öãΩ
,

380 
¨gc
,

381 c⁄° **
¨gv


383 *
pPage
;

384 
rc
;

385 if–
¨gc
!=2 ){

386 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

388  
TCL_ERROR
;

390 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pPage
ËË 
TCL_ERROR
;

391 
rc
 = 
	`sqlôïagî_uƒef
(
pPage
);

392 if–
rc
!=
SQLITE_OK
 ){

393 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

394  
TCL_ERROR
;

396  
TCL_OK
;

397 
	}
}

404 
	$∑ge_ªad
(

405 *
NŸU£d
,

406 
T˛_I¡îp
 *
öãΩ
,

407 
¨gc
,

408 c⁄° **
¨gv


410 
zBuf
[100];

411 *
pPage
;

412 if–
¨gc
!=2 ){

413 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

415  
TCL_ERROR
;

417 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pPage
ËË 
TCL_ERROR
;

418 
	`mem˝y
(
zBuf
, 
pPage
, (zBuf));

419 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

420  
TCL_OK
;

421 
	}
}

428 
	$∑ge_numbî
(

429 *
NŸU£d
,

430 
T˛_I¡îp
 *
öãΩ
,

431 
¨gc
,

432 c⁄° **
¨gv


434 
zBuf
[100];

435 *
pPage
;

436 if–
¨gc
!=2 ){

437 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

439  
TCL_ERROR
;

441 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pPage
ËË 
TCL_ERROR
;

442 
	`•rötf
(
zBuf
, "%d", 
	`sqlôïagî_∑gíumbî
(
pPage
));

443 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

444  
TCL_OK
;

445 
	}
}

452 
	$∑ge_wrôe
(

453 *
NŸU£d
,

454 
T˛_I¡îp
 *
öãΩ
,

455 
¨gc
,

456 c⁄° **
¨gv


458 *
pPage
;

459 
rc
;

460 if–
¨gc
!=3 ){

461 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

463  
TCL_ERROR
;

465 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pPage
ËË 
TCL_ERROR
;

466 
rc
 = 
	`sqlôïagî_wrôe
(
pPage
);

467 if–
rc
!=
SQLITE_OK
 ){

468 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

469  
TCL_ERROR
;

471 
	`°∫˝y
((*)
pPage
, 
¨gv
[2], 
SQLITE_USABLE_SIZE
-1);

472 ((*)
pPage
)[
SQLITE_USABLE_SIZE
-1] = 0;

473  
TCL_OK
;

474 
	}
}

485 
	$Áke_big_fûe
(

486 *
NŸU£d
,

487 
T˛_I¡îp
 *
öãΩ
,

488 
¨gc
,

489 c⁄° **
¨gv


491 
rc
;

492 
n
;

493 
off_t
 
off£t
;

494 
OsFûe
 
fd
;

495 
ªadO∆y
 = 0;

496 if–
¨gc
!=3 ){

497 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

499  
TCL_ERROR
;

501 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], &
n
ËË 
TCL_ERROR
;

502 
rc
 = 
	`sqlôeOsO≥nRódWrôe
(
¨gv
[2], &
fd
, &
ªadO∆y
);

503 if–
rc
 ){

504 
	`T˛_AµídResu…
(
öãΩ
, "›í faûed: ", 
	`îr‹Name
(
rc
), 0);

505  
TCL_ERROR
;

507 
off£t
 = 
n
;

508 
off£t
 *= 1024*1024;

509 
rc
 = 
	`sqlôeOsSìk
(&
fd
, 
off£t
);

510 if–
rc
 ){

511 
	`T˛_AµídResu…
(
öãΩ
, "£ek faûed: ", 
	`îr‹Name
(
rc
), 0);

512  
TCL_ERROR
;

514 
rc
 = 
	`sqlôeOsWrôe
(&
fd
, "Hello, World!", 14);

515 
	`sqlôeOsClo£
(&
fd
);

516 if–
rc
 ){

517 
	`T˛_AµídResu…
(
öãΩ
, "wrôêÁûed: ", 
	`îr‹Name
(
rc
), 0);

518  
TCL_ERROR
;

520  
TCL_OK
;

521 
	}
}

526 
	$Sqlôëe°2_Inô
(
T˛_I¡îp
 *
öãΩ
){

527 
sqlôe_io_îr‹_≥ndög
;

528 
zBuf
[100];

530 *
zName
;

531 
T˛_CmdProc
 *
xProc
;

532 } 
aCmd
[] = {

533 { "∑gî_›í", (
T˛_CmdProc
*)
∑gî_›í
 },

534 { "∑gî_˛o£", (
T˛_CmdProc
*)
∑gî_˛o£
 },

535 { "∑gî_commô", (
T˛_CmdProc
*)
∑gî_commô
 },

536 { "∑gî_rﬁlback", (
T˛_CmdProc
*)
∑gî_rﬁlback
 },

537 { "∑gî_ck±_begö", (
T˛_CmdProc
*)
∑gî_ck±_begö
 },

538 { "∑gî_ck±_commô", (
T˛_CmdProc
*)
∑gî_ck±_commô
 },

539 { "∑gî_ck±_rﬁlback", (
T˛_CmdProc
*)
∑gî_ck±_rﬁlback
 },

540 { "∑gî_°©s", (
T˛_CmdProc
*)
∑gî_°©s
 },

541 { "∑gî_∑gecou¡", (
T˛_CmdProc
*)
∑gî_∑gecou¡
 },

542 { "∑ge_gë", (
T˛_CmdProc
*)
∑ge_gë
 },

543 { "∑ge_lookup", (
T˛_CmdProc
*)
∑ge_lookup
 },

544 { "∑ge_uƒef", (
T˛_CmdProc
*)
∑ge_uƒef
 },

545 { "∑ge_ªad", (
T˛_CmdProc
*)
∑ge_ªad
 },

546 { "∑ge_wrôe", (
T˛_CmdProc
*)
∑ge_wrôe
 },

547 { "∑ge_numbî", (
T˛_CmdProc
*)
∑ge_numbî
 },

548 { "Áke_big_fûe", (
T˛_CmdProc
*)
Áke_big_fûe
 },

550 
i
;

551 
i
=0; i<(
aCmd
)/(aCmd[0]); i++){

552 
	`T˛_Cª©eComm™d
(
öãΩ
, 
aCmd
[
i
].
zName
,áCmd[i].
xProc
, 0, 0);

554 
	`T˛_LökV¨
(
öãΩ
, "sqlite_io_error_pending",

555 (*)&
sqlôe_io_îr‹_≥ndög
, 
TCL_LINK_INT
);

556 #ifde‡
SQLITE_TEST


557 
	`T˛_LökV¨
(
öãΩ
, "journal_format",

558 (*)&
jou∫Æ_f‹m©
, 
TCL_LINK_INT
);

560 
	`•rötf
(
zBuf
, "%d", 
SQLITE_PAGE_SIZE
);

561 
	`T˛_SëV¨
(
öãΩ
, "SQLITE_PAGE_SIZE", 
zBuf
, 
TCL_GLOBAL_ONLY
);

562 
	`•rötf
(
zBuf
, "%d", 
SQLITE_PAGE_RESERVE
);

563 
	`T˛_SëV¨
(
öãΩ
, "SQLITE_PAGE_RESERVE", 
zBuf
, 
TCL_GLOBAL_ONLY
);

564 
	`•rötf
(
zBuf
, "%d", 
SQLITE_USABLE_SIZE
);

565 
	`T˛_SëV¨
(
öãΩ
, "SQLITE_USABLE_SIZE", 
zBuf
, 
TCL_GLOBAL_ONLY
);

566  
TCL_OK
;

567 
	}
}

	@test3.c

18 
	~"sqlôeI¡.h
"

19 
	~"∑gî.h
"

20 
	~"båì.h
"

21 
	~"t˛.h
"

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

28 *
	$îr‹Name
(
rc
){

29 *
zName
;

30  
rc
 ){

31 
SQLITE_OK
: 
zName
 = "SQLITE_OK"; ;

32 
SQLITE_ERROR
: 
zName
 = "SQLITE_ERROR"; ;

33 
SQLITE_INTERNAL
: 
zName
 = "SQLITE_INTERNAL"; ;

34 
SQLITE_PERM
: 
zName
 = "SQLITE_PERM"; ;

35 
SQLITE_ABORT
: 
zName
 = "SQLITE_ABORT"; ;

36 
SQLITE_BUSY
: 
zName
 = "SQLITE_BUSY"; ;

37 
SQLITE_NOMEM
: 
zName
 = "SQLITE_NOMEM"; ;

38 
SQLITE_READONLY
: 
zName
 = "SQLITE_READONLY"; ;

39 
SQLITE_INTERRUPT
: 
zName
 = "SQLITE_INTERRUPT"; ;

40 
SQLITE_IOERR
: 
zName
 = "SQLITE_IOERR"; ;

41 
SQLITE_CORRUPT
: 
zName
 = "SQLITE_CORRUPT"; ;

42 
SQLITE_NOTFOUND
: 
zName
 = "SQLITE_NOTFOUND"; ;

43 
SQLITE_FULL
: 
zName
 = "SQLITE_FULL"; ;

44 
SQLITE_CANTOPEN
: 
zName
 = "SQLITE_CANTOPEN"; ;

45 
SQLITE_PROTOCOL
: 
zName
 = "SQLITE_PROTOCOL"; ;

46 : 
zName
 = "SQLITE_Unknown"; ;

48  
zName
;

49 
	}
}

56 
	$båì_›í
(

57 *
NŸU£d
,

58 
T˛_I¡îp
 *
öãΩ
,

59 
¨gc
,

60 c⁄° **
¨gv


62 
Båì
 *
pBt
;

63 
rc
;

64 
zBuf
[100];

65 if–
¨gc
!=2 ){

66 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

68  
TCL_ERROR
;

70 
rc
 = 
	`sqlôeBåìFa˘‹y
(0, 
¨gv
[1], 0, 1000, &
pBt
);

71 if–
rc
!=
SQLITE_OK
 ){

72 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

73  
TCL_ERROR
;

75 
	`•rötf
(
zBuf
,"%p", 
pBt
);

76 if–
	`°∫cmp
(
zBuf
,"0x",2) ){

77 
	`•rötf
(
zBuf
, "0x%p", 
pBt
);

79 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

80  
TCL_OK
;

81 
	}
}

88 
	$båì_˛o£
(

89 *
NŸU£d
,

90 
T˛_I¡îp
 *
öãΩ
,

91 
¨gc
,

92 c⁄° **
¨gv


94 
Båì
 *
pBt
;

95 
rc
;

96 if–
¨gc
!=2 ){

97 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

99  
TCL_ERROR
;

101 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pBt
ËË 
TCL_ERROR
;

102 
rc
 = 
	`sqlôeBåìClo£
(
pBt
);

103 if–
rc
!=
SQLITE_OK
 ){

104 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

105  
TCL_ERROR
;

107  
TCL_OK
;

108 
	}
}

115 
	$båì_begö_å™ß˘i⁄
(

116 *
NŸU£d
,

117 
T˛_I¡îp
 *
öãΩ
,

118 
¨gc
,

119 c⁄° **
¨gv


121 
Båì
 *
pBt
;

122 
rc
;

123 if–
¨gc
!=2 ){

124 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

126  
TCL_ERROR
;

128 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pBt
ËË 
TCL_ERROR
;

129 
rc
 = 
	`sqlôeBåìBegöTøns
(
pBt
);

130 if–
rc
!=
SQLITE_OK
 ){

131 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

132  
TCL_ERROR
;

134  
TCL_OK
;

135 
	}
}

142 
	$båì_rﬁlback
(

143 *
NŸU£d
,

144 
T˛_I¡îp
 *
öãΩ
,

145 
¨gc
,

146 c⁄° **
¨gv


148 
Båì
 *
pBt
;

149 
rc
;

150 if–
¨gc
!=2 ){

151 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

153  
TCL_ERROR
;

155 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pBt
ËË 
TCL_ERROR
;

156 
rc
 = 
	`sqlôeBåìRﬁlback
(
pBt
);

157 if–
rc
!=
SQLITE_OK
 ){

158 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

159  
TCL_ERROR
;

161  
TCL_OK
;

162 
	}
}

169 
	$båì_commô
(

170 *
NŸU£d
,

171 
T˛_I¡îp
 *
öãΩ
,

172 
¨gc
,

173 c⁄° **
¨gv


175 
Båì
 *
pBt
;

176 
rc
;

177 if–
¨gc
!=2 ){

178 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

180  
TCL_ERROR
;

182 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pBt
ËË 
TCL_ERROR
;

183 
rc
 = 
	`sqlôeBåìCommô
(
pBt
);

184 if–
rc
!=
SQLITE_OK
 ){

185 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

186  
TCL_ERROR
;

188  
TCL_OK
;

189 
	}
}

196 
	$båì_¸óã_èbÀ
(

197 *
NŸU£d
,

198 
T˛_I¡îp
 *
öãΩ
,

199 
¨gc
,

200 c⁄° **
¨gv


202 
Båì
 *
pBt
;

203 
rc
, 
iTabÀ
;

204 
zBuf
[30];

205 if–
¨gc
!=2 ){

206 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

208  
TCL_ERROR
;

210 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pBt
ËË 
TCL_ERROR
;

211 
rc
 = 
	`sqlôeBåìCª©eTabÀ
(
pBt
, &
iTabÀ
);

212 if–
rc
!=
SQLITE_OK
 ){

213 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

214  
TCL_ERROR
;

216 
	`•rötf
(
zBuf
, "%d", 
iTabÀ
);

217 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

218  
TCL_OK
;

219 
	}
}

226 
	$båì_dr›_èbÀ
(

227 *
NŸU£d
,

228 
T˛_I¡îp
 *
öãΩ
,

229 
¨gc
,

230 c⁄° **
¨gv


232 
Båì
 *
pBt
;

233 
iTabÀ
;

234 
rc
;

235 if–
¨gc
!=3 ){

236 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

238  
TCL_ERROR
;

240 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pBt
ËË 
TCL_ERROR
;

241 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
iTabÀ
ËË 
TCL_ERROR
;

242 
rc
 = 
	`sqlôeBåìDr›TabÀ
(
pBt
, 
iTabÀ
);

243 if–
rc
!=
SQLITE_OK
 ){

244 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

245  
TCL_ERROR
;

247  
TCL_OK
;

248 
	}
}

255 
	$båì_˛ór_èbÀ
(

256 *
NŸU£d
,

257 
T˛_I¡îp
 *
öãΩ
,

258 
¨gc
,

259 c⁄° **
¨gv


261 
Båì
 *
pBt
;

262 
iTabÀ
;

263 
rc
;

264 if–
¨gc
!=3 ){

265 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

267  
TCL_ERROR
;

269 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pBt
ËË 
TCL_ERROR
;

270 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
iTabÀ
ËË 
TCL_ERROR
;

271 
rc
 = 
	`sqlôeBåìCÀ¨TabÀ
(
pBt
, 
iTabÀ
);

272 if–
rc
!=
SQLITE_OK
 ){

273 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

274  
TCL_ERROR
;

276  
TCL_OK
;

277 
	}
}

284 
	$båì_gë_mëa
(

285 *
NŸU£d
,

286 
T˛_I¡îp
 *
öãΩ
,

287 
¨gc
,

288 c⁄° **
¨gv


290 
Båì
 *
pBt
;

291 
rc
;

292 
i
;

293 
aMëa
[
SQLITE_N_BTREE_META
];

294 if–
¨gc
!=2 ){

295 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

297  
TCL_ERROR
;

299 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pBt
ËË 
TCL_ERROR
;

300 
rc
 = 
	`sqlôeBåìGëMëa
(
pBt
, 
aMëa
);

301 if–
rc
!=
SQLITE_OK
 ){

302 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

303  
TCL_ERROR
;

305 
i
=0; i<
SQLITE_N_BTREE_META
; i++){

306 
zBuf
[30];

307 
	`•rötf
(
zBuf
,"%d",
aMëa
[
i
]);

308 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

310  
TCL_OK
;

311 
	}
}

318 
	$båì_upd©e_mëa
(

319 *
NŸU£d
,

320 
T˛_I¡îp
 *
öãΩ
,

321 
¨gc
,

322 c⁄° **
¨gv


324 
Båì
 *
pBt
;

325 
rc
;

326 
i
;

327 
aMëa
[
SQLITE_N_BTREE_META
];

329 if–
¨gc
!=2+
SQLITE_N_BTREE_META
 ){

330 
zBuf
[30];

331 
	`•rötf
(
zBuf
,"%d",
SQLITE_N_BTREE_META
);

332 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

333 " ID METADATA...\" (METADATA i†", 
zBuf
, " integers)", 0);

334  
TCL_ERROR
;

336 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pBt
ËË 
TCL_ERROR
;

337 
i
=0; i<
SQLITE_N_BTREE_META
; i++){

338 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[
i
+2], &
aMëa
[i]ËË 
TCL_ERROR
;

340 
rc
 = 
	`sqlôeBåìUpd©eMëa
(
pBt
, 
aMëa
);

341 if–
rc
!=
SQLITE_OK
 ){

342 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

343  
TCL_ERROR
;

345  
TCL_OK
;

346 
	}
}

353 
	$båì_∑ge_dump
(

354 *
NŸU£d
,

355 
T˛_I¡îp
 *
öãΩ
,

356 
¨gc
,

357 c⁄° **
¨gv


359 
Båì
 *
pBt
;

360 
iPage
;

361 
rc
;

363 if–
¨gc
!=3 ){

364 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

366  
TCL_ERROR
;

368 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pBt
ËË 
TCL_ERROR
;

369 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
iPage
ËË 
TCL_ERROR
;

370 
rc
 = 
	`sqlôeBåìPageDump
(
pBt
, 
iPage
, 0);

371 if–
rc
!=
SQLITE_OK
 ){

372 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

373  
TCL_ERROR
;

375  
TCL_OK
;

376 
	}
}

383 
	$båì_åì_dump
(

384 *
NŸU£d
,

385 
T˛_I¡îp
 *
öãΩ
,

386 
¨gc
,

387 c⁄° **
¨gv


389 
Båì
 *
pBt
;

390 
iPage
;

391 
rc
;

393 if–
¨gc
!=3 ){

394 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

396  
TCL_ERROR
;

398 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pBt
ËË 
TCL_ERROR
;

399 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
iPage
ËË 
TCL_ERROR
;

400 
rc
 = 
	`sqlôeBåìPageDump
(
pBt
, 
iPage
, 1);

401 if–
rc
!=
SQLITE_OK
 ){

402 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

403  
TCL_ERROR
;

405  
TCL_OK
;

406 
	}
}

413 
	$båì_∑gî_°©s
(

414 *
NŸU£d
,

415 
T˛_I¡îp
 *
öãΩ
,

416 
¨gc
,

417 c⁄° **
¨gv


419 
Båì
 *
pBt
;

420 
i
;

421 *
a
;

423 if–
¨gc
!=2 ){

424 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

426  
TCL_ERROR
;

428 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pBt
ËË 
TCL_ERROR
;

429 
a
 = 
	`sqlôïagî_°©s
(
	`sqlôeBåìPagî
(
pBt
));

430 
i
=0; i<9; i++){

431 *
zName
[] = {

435 
zBuf
[100];

436 
	`T˛_AµídEÀmít
(
öãΩ
, 
zName
[
i
]);

437 
	`•rötf
(
zBuf
,"%d",
a
[
i
]);

438 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

440  
TCL_OK
;

441 
	}
}

448 
	$båì_∑gî_ªf_dump
(

449 *
NŸU£d
,

450 
T˛_I¡îp
 *
öãΩ
,

451 
¨gc
,

452 c⁄° **
¨gv


454 
Båì
 *
pBt
;

456 if–
¨gc
!=2 ){

457 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

459  
TCL_ERROR
;

461 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pBt
ËË 
TCL_ERROR
;

462 
	`sqlôïagî_ªfdump
(
	`sqlôeBåìPagî
(
pBt
));

463  
TCL_OK
;

464 
	}
}

473 
	$båì_öãgrôy_check
(

474 *
NŸU£d
,

475 
T˛_I¡îp
 *
öãΩ
,

476 
¨gc
,

477 c⁄° **
¨gv


479 
Båì
 *
pBt
;

480 *
zResu…
;

481 
nRoŸ
;

482 *
aRoŸ
;

483 
i
;

485 if–
¨gc
<3 ){

486 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

488  
TCL_ERROR
;

490 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pBt
ËË 
TCL_ERROR
;

491 
nRoŸ
 = 
¨gc
-2;

492 
aRoŸ
 = 
	`mÆloc
–()*(
¨gc
-2) );

493 
i
=0; i<
¨gc
-2; i++){

494 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[
i
+2], &
aRoŸ
[i]ËË 
TCL_ERROR
;

496 
zResu…
 = 
	`sqlôeBåìI¡egrôyCheck
(
pBt
, 
aRoŸ
, 
nRoŸ
);

497 if–
zResu…
 ){

498 
	`T˛_AµídResu…
(
öãΩ
, 
zResu…
, 0);

499 
	`sqlôeFªe
(
zResu…
);

501  
TCL_OK
;

502 
	}
}

509 
	$båì_curs‹
(

510 *
NŸU£d
,

511 
T˛_I¡îp
 *
öãΩ
,

512 
¨gc
,

513 c⁄° **
¨gv


515 
Båì
 *
pBt
;

516 
iTabÀ
;

517 
BtCurs‹
 *
pCur
;

518 
rc
;

519 
wrFœg
;

520 
zBuf
[30];

522 if–
¨gc
!=4 ){

523 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

525  
TCL_ERROR
;

527 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pBt
ËË 
TCL_ERROR
;

528 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
iTabÀ
ËË 
TCL_ERROR
;

529 if–
	`T˛_GëBoﬁón
(
öãΩ
, 
¨gv
[3], &
wrFœg
ËË 
TCL_ERROR
;

530 
rc
 = 
	`sqlôeBåìCurs‹
(
pBt
, 
iTabÀ
, 
wrFœg
, &
pCur
);

531 if–
rc
 ){

532 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

533  
TCL_ERROR
;

535 
	`•rötf
(
zBuf
,"0x%x", ()
pCur
);

536 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

537  
SQLITE_OK
;

538 
	}
}

545 
	$båì_˛o£_curs‹
(

546 *
NŸU£d
,

547 
T˛_I¡îp
 *
öãΩ
,

548 
¨gc
,

549 c⁄° **
¨gv


551 
BtCurs‹
 *
pCur
;

552 
rc
;

554 if–
¨gc
!=2 ){

555 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

557  
TCL_ERROR
;

559 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pCur
ËË 
TCL_ERROR
;

560 
rc
 = 
	`sqlôeBåìClo£Curs‹
(
pCur
);

561 if–
rc
 ){

562 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

563  
TCL_ERROR
;

565  
SQLITE_OK
;

566 
	}
}

573 
	$båì_move_to
(

574 *
NŸU£d
,

575 
T˛_I¡îp
 *
öãΩ
,

576 
¨gc
,

577 c⁄° **
¨gv


579 
BtCurs‹
 *
pCur
;

580 
rc
;

581 
ªs
;

582 
zBuf
[20];

584 if–
¨gc
!=3 ){

585 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

587  
TCL_ERROR
;

589 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pCur
ËË 
TCL_ERROR
;

590 
rc
 = 
	`sqlôeBåìMovëo
(
pCur
, 
¨gv
[2], 
	`°æí
◊rgv[2]), &
ªs
);

591 if–
rc
 ){

592 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

593  
TCL_ERROR
;

595 if–
ªs
<0 )Ñes = -1;

596 if–
ªs
>0 )Ñes = 1;

597 
	`•rötf
(
zBuf
,"%d",
ªs
);

598 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

599  
SQLITE_OK
;

600 
	}
}

607 
	$båì_dñëe
(

608 *
NŸU£d
,

609 
T˛_I¡îp
 *
öãΩ
,

610 
¨gc
,

611 c⁄° **
¨gv


613 
BtCurs‹
 *
pCur
;

614 
rc
;

616 if–
¨gc
!=2 ){

617 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

619  
TCL_ERROR
;

621 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pCur
ËË 
TCL_ERROR
;

622 
rc
 = 
	`sqlôeBåìDñëe
(
pCur
);

623 if–
rc
 ){

624 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

625  
TCL_ERROR
;

627  
SQLITE_OK
;

628 
	}
}

636 
	$båì_ö£π
(

637 *
NŸU£d
,

638 
T˛_I¡îp
 *
öãΩ
,

639 
¨gc
,

640 c⁄° **
¨gv


642 
BtCurs‹
 *
pCur
;

643 
rc
;

645 if–
¨gc
!=4 ){

646 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

648  
TCL_ERROR
;

650 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pCur
ËË 
TCL_ERROR
;

651 
rc
 = 
	`sqlôeBåìIn£π
(
pCur
, 
¨gv
[2], 
	`°æí
(argv[2]),

652 
¨gv
[3], 
	`°æí
(argv[3]));

653 if–
rc
 ){

654 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

655  
TCL_ERROR
;

657  
SQLITE_OK
;

658 
	}
}

667 
	$båì_√xt
(

668 *
NŸU£d
,

669 
T˛_I¡îp
 *
öãΩ
,

670 
¨gc
,

671 c⁄° **
¨gv


673 
BtCurs‹
 *
pCur
;

674 
rc
;

675 
ªs
 = 0;

676 
zBuf
[100];

678 if–
¨gc
!=2 ){

679 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

681  
TCL_ERROR
;

683 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pCur
ËË 
TCL_ERROR
;

684 
rc
 = 
	`sqlôeBåìNext
(
pCur
, &
ªs
);

685 if–
rc
 ){

686 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

687  
TCL_ERROR
;

689 
	`•rötf
(
zBuf
,"%d",
ªs
);

690 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

691  
SQLITE_OK
;

692 
	}
}

701 
	$båì_¥ev
(

702 *
NŸU£d
,

703 
T˛_I¡îp
 *
öãΩ
,

704 
¨gc
,

705 c⁄° **
¨gv


707 
BtCurs‹
 *
pCur
;

708 
rc
;

709 
ªs
 = 0;

710 
zBuf
[100];

712 if–
¨gc
!=2 ){

713 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

715  
TCL_ERROR
;

717 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pCur
ËË 
TCL_ERROR
;

718 
rc
 = 
	`sqlôeBåìPªvious
(
pCur
, &
ªs
);

719 if–
rc
 ){

720 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

721  
TCL_ERROR
;

723 
	`•rötf
(
zBuf
,"%d",
ªs
);

724 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

725  
SQLITE_OK
;

726 
	}
}

734 
	$båì_fú°
(

735 *
NŸU£d
,

736 
T˛_I¡îp
 *
öãΩ
,

737 
¨gc
,

738 c⁄° **
¨gv


740 
BtCurs‹
 *
pCur
;

741 
rc
;

742 
ªs
 = 0;

743 
zBuf
[100];

745 if–
¨gc
!=2 ){

746 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

748  
TCL_ERROR
;

750 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pCur
ËË 
TCL_ERROR
;

751 
rc
 = 
	`sqlôeBåìFú°
(
pCur
, &
ªs
);

752 if–
rc
 ){

753 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

754  
TCL_ERROR
;

756 
	`•rötf
(
zBuf
,"%d",
ªs
);

757 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

758  
SQLITE_OK
;

759 
	}
}

767 
	$båì_œ°
(

768 *
NŸU£d
,

769 
T˛_I¡îp
 *
öãΩ
,

770 
¨gc
,

771 c⁄° **
¨gv


773 
BtCurs‹
 *
pCur
;

774 
rc
;

775 
ªs
 = 0;

776 
zBuf
[100];

778 if–
¨gc
!=2 ){

779 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

781  
TCL_ERROR
;

783 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pCur
ËË 
TCL_ERROR
;

784 
rc
 = 
	`sqlôeBåìLa°
(
pCur
, &
ªs
);

785 if–
rc
 ){

786 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

787  
TCL_ERROR
;

789 
	`•rötf
(
zBuf
,"%d",
ªs
);

790 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

791  
SQLITE_OK
;

792 
	}
}

799 
	$båì_key
(

800 *
NŸU£d
,

801 
T˛_I¡îp
 *
öãΩ
,

802 
¨gc
,

803 c⁄° **
¨gv


805 
BtCurs‹
 *
pCur
;

806 
rc
;

807 
n
;

808 *
zBuf
;

810 if–
¨gc
!=2 ){

811 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

813  
TCL_ERROR
;

815 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pCur
ËË 
TCL_ERROR
;

816 
	`sqlôeBåìKeySize
(
pCur
, &
n
);

817 
zBuf
 = 
	`mÆloc
–
n
+1 );

818 
rc
 = 
	`sqlôeBåìKey
(
pCur
, 0, 
n
, 
zBuf
);

819 if–
rc
!=
n
 ){

820 
zMsg
[100];

821 
	`‰ì
(
zBuf
);

822 
	`•rötf
(
zMsg
, "åunˇãd key: gŸ %d o‡%d byãs", 
rc
, 
n
);

823 
	`T˛_AµídResu…
(
öãΩ
, 
zMsg
, 0);

824  
TCL_ERROR
;

826 
zBuf
[
n
] = 0;

827 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

828 
	`‰ì
(
zBuf
);

829  
SQLITE_OK
;

830 
	}
}

837 
	$båì_d©a
(

838 *
NŸU£d
,

839 
T˛_I¡îp
 *
öãΩ
,

840 
¨gc
,

841 c⁄° **
¨gv


843 
BtCurs‹
 *
pCur
;

844 
rc
;

845 
n
;

846 *
zBuf
;

848 if–
¨gc
!=2 ){

849 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

851  
TCL_ERROR
;

853 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pCur
ËË 
TCL_ERROR
;

854 
	`sqlôeBåìD©aSize
(
pCur
, &
n
);

855 
zBuf
 = 
	`mÆloc
–
n
+1 );

856 
rc
 = 
	`sqlôeBåìD©a
(
pCur
, 0, 
n
, 
zBuf
);

857 if–
rc
!=
n
 ){

858 
zMsg
[100];

859 
	`‰ì
(
zBuf
);

860 
	`•rötf
(
zMsg
, "åunˇãd d©a: gŸ %d o‡%d byãs", 
rc
, 
n
);

861 
	`T˛_AµídResu…
(
öãΩ
, 
zMsg
, 0);

862  
TCL_ERROR
;

864 
zBuf
[
n
] = 0;

865 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

866 
	`‰ì
(
zBuf
);

867  
SQLITE_OK
;

868 
	}
}

875 
	$båì_∑ylﬂd_size
(

876 *
NŸU£d
,

877 
T˛_I¡îp
 *
öãΩ
,

878 
¨gc
,

879 c⁄° **
¨gv


881 
BtCurs‹
 *
pCur
;

882 
n1
, 
n2
;

883 
zBuf
[50];

885 if–
¨gc
!=2 ){

886 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

888  
TCL_ERROR
;

890 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pCur
ËË 
TCL_ERROR
;

891 
	`sqlôeBåìKeySize
(
pCur
, &
n1
);

892 
	`sqlôeBåìD©aSize
(
pCur
, &
n2
);

893 
	`•rötf
(
zBuf
, "%d", 
n1
+
n2
);

894 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

895  
SQLITE_OK
;

896 
	}
}

913 
	$båì_curs‹_dump
(

914 *
NŸU£d
,

915 
T˛_I¡îp
 *
öãΩ
,

916 
¨gc
,

917 c⁄° **
¨gv


919 
BtCurs‹
 *
pCur
;

920 
rc
;

921 
i
, 
j
;

922 
aResu…
[8];

923 
zBuf
[400];

925 if–
¨gc
!=2 ){

926 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

928  
TCL_ERROR
;

930 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
pCur
ËË 
TCL_ERROR
;

931 
rc
 = 
	`sqlôeBåìCurs‹Dump
(
pCur
, 
aResu…
);

932 if–
rc
 ){

933 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

934  
TCL_ERROR
;

936 
j
 = 0;

937 
i
=0; i<(
aResu…
)/(aResult[0]); i++){

938 
	`•rötf
(&
zBuf
[
j
]," %d", 
aResu…
[
i
]);

939 
j
 +
	`°æí
(&
zBuf
[j]);

941 
	`T˛_AµídResu…
(
öãΩ
, &
zBuf
[1], 0);

942  
SQLITE_OK
;

943 
	}
}

948 
	$Sqlôëe°3_Inô
(
T˛_I¡îp
 *
öãΩ
){

950 *
zName
;

951 
T˛_CmdProc
 *
xProc
;

952 } 
aCmd
[] = {

953 { "båì_›í", (
T˛_CmdProc
*)
båì_›í
 },

954 { "båì_˛o£", (
T˛_CmdProc
*)
båì_˛o£
 },

955 { "båì_begö_å™ß˘i⁄", (
T˛_CmdProc
*)
båì_begö_å™ß˘i⁄
 },

956 { "båì_commô", (
T˛_CmdProc
*)
båì_commô
 },

957 { "båì_rﬁlback", (
T˛_CmdProc
*)
båì_rﬁlback
 },

958 { "båì_¸óã_èbÀ", (
T˛_CmdProc
*)
båì_¸óã_èbÀ
 },

959 { "båì_dr›_èbÀ", (
T˛_CmdProc
*)
båì_dr›_èbÀ
 },

960 { "båì_˛ór_èbÀ", (
T˛_CmdProc
*)
båì_˛ór_èbÀ
 },

961 { "båì_gë_mëa", (
T˛_CmdProc
*)
båì_gë_mëa
 },

962 { "båì_upd©e_mëa", (
T˛_CmdProc
*)
båì_upd©e_mëa
 },

963 { "båì_∑ge_dump", (
T˛_CmdProc
*)
båì_∑ge_dump
 },

964 { "båì_åì_dump", (
T˛_CmdProc
*)
båì_åì_dump
 },

965 { "båì_∑gî_°©s", (
T˛_CmdProc
*)
båì_∑gî_°©s
 },

966 { "båì_∑gî_ªf_dump", (
T˛_CmdProc
*)
båì_∑gî_ªf_dump
 },

967 { "båì_curs‹", (
T˛_CmdProc
*)
båì_curs‹
 },

968 { "båì_˛o£_curs‹", (
T˛_CmdProc
*)
båì_˛o£_curs‹
 },

969 { "båì_move_to", (
T˛_CmdProc
*)
båì_move_to
 },

970 { "båì_dñëe", (
T˛_CmdProc
*)
båì_dñëe
 },

971 { "båì_ö£π", (
T˛_CmdProc
*)
båì_ö£π
 },

972 { "båì_√xt", (
T˛_CmdProc
*)
båì_√xt
 },

973 { "båì_¥ev", (
T˛_CmdProc
*)
båì_¥ev
 },

974 { "båì_key", (
T˛_CmdProc
*)
båì_key
 },

975 { "båì_d©a", (
T˛_CmdProc
*)
båì_d©a
 },

976 { "båì_∑ylﬂd_size", (
T˛_CmdProc
*)
båì_∑ylﬂd_size
 },

977 { "båì_fú°", (
T˛_CmdProc
*)
båì_fú°
 },

978 { "båì_œ°", (
T˛_CmdProc
*)
båì_œ°
 },

979 { "båì_curs‹_dump", (
T˛_CmdProc
*)
båì_curs‹_dump
 },

980 { "båì_öãgrôy_check", (
T˛_CmdProc
*)
båì_öãgrôy_check
 },

982 
i
;

984 
i
=0; i<(
aCmd
)/(aCmd[0]); i++){

985 
	`T˛_Cª©eComm™d
(
öãΩ
, 
aCmd
[
i
].
zName
,áCmd[i].
xProc
, 0, 0);

987 
	`T˛_LökV¨
(
öãΩ
, "∑gî_ªföfo_íabÀ", (*)&
∑gî_ªföfo_íabÀ
,

988 
TCL_LINK_INT
);

989 
	`T˛_LökV¨
(
öãΩ
, "båì_«tive_byã_‹dî",(*)&
båì_«tive_byã_‹dî
,

990 
TCL_LINK_INT
);

991  
TCL_OK
;

992 
	}
}

	@test4.c

16 
	~"sqlôeI¡.h
"

17 
	~"t˛.h
"

18 #i‡
deföed
(
OS_UNIX
Ë&& OS_UNIX==1 && deföed(
THREADSAFE
) && THREADSAFE==1

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<±hªad.h
>

22 
	~<sched.h
>

23 
	~<˘y≥.h
>

29 
Thªad
 
	tThªad
;

30 
	sThªad
 {

33 *
	mzFûíame
;

34 (*
	mxOp
)(
	mThªad
*);

35 *
	mzArg
;

36 
	m›num
;

37 
	mbusy
;

41 
	mcom∂ëed
;

42 
sqlôe
 *
	mdb
;

43 
sqlôe_vm
 *
	mvm
;

44 *
	mzEº
;

45 *
	mzSèticEº
;

46 
	mrc
;

47 
	m¨gc
;

48 c⁄° **
	m¨gv
;

49 c⁄° **
	mcﬁv
;

56 
	#N_THREAD
 26

	)

57 
Thªad
 
	gthªad£t
[
N_THREAD
];

63 *
	$thªad_maö
(*
pArg
){

64 
Thªad
 *
p
 = (Thªad*)
pArg
;

65 if–
p
->
db
 ){

66 
	`sqlôe_˛o£
(
p
->
db
);

68 
p
->
db
 = 
	`sqlôe_›í
’->
zFûíame
, 0, &p->
zEº
);

69 
p
->
vm
 = 0;

70 
p
->
com∂ëed
 = 1;

71  
p
->
›num
<ı->
com∂ëed
 ) 
	`sched_yõld
();

72  
p
->
xOp
 ){

73 if–
p
->
zEº
 &&Ö->zEº!ı->
zSèticEº
 ){

74 
	`sqlôe_‰ìmem
(
p
->
zEº
);

75 
p
->
zEº
 = 0;

77 (*
p
->
xOp
)(p);

78 
p
->
com∂ëed
++;

79  
p
->
›num
<ı->
com∂ëed
 ) 
	`sched_yõld
();

81 if–
p
->
vm
 ){

82 
	`sqlôe_föÆize
(
p
->
vm
, 0);

83 
p
->
vm
 = 0;

85 if–
p
->
db
 ){

86 
	`sqlôe_˛o£
(
p
->
db
);

87 
p
->
db
 = 0;

89 if–
p
->
zEº
 &&Ö->zEº!ı->
zSèticEº
 ){

90 
	`sqlôe_‰ìmem
(
p
->
zEº
);

91 
p
->
zEº
 = 0;

93 
p
->
com∂ëed
++;

95 
	}
}

102 
	$∑r£_thªad_id
(
T˛_I¡îp
 *
öãΩ
, c⁄° *
zArg
){

103 if–
zArg
==0 || zArg[0]==0 || zArg[1]!=0 || !
	`isuµî
(zArg[0]) ){

104 
	`T˛_AµídResu…
(
öãΩ
, "thread ID must beán upper caseÜetter", 0);

107  
zArg
[0] - 'A';

108 
	}
}

116 
	$t˛_thªad_¸óã
(

117 *
NŸU£d
,

118 
T˛_I¡îp
 *
öãΩ
,

119 
¨gc
,

120 c⁄° **
¨gv


122 
i
;

123 
±hªad_t
 
x
;

124 
rc
;

126 if–
¨gc
!=3 ){

127 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

129  
TCL_ERROR
;

131 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

132 if–
i
<0 )  
TCL_ERROR
;

133 if–
thªad£t
[
i
].
busy
 ){

134 
	`T˛_AµídResu…
(
öãΩ
, "thªad ", 
¨gv
[1], " isálreadyÑunning", 0);

135  
TCL_ERROR
;

137 
thªad£t
[
i
].
busy
 = 1;

138 
	`sqlôeFªe
(
thªad£t
[
i
].
zFûíame
);

139 
thªad£t
[
i
].
zFûíame
 = 
	`sqlôeSåDup
(
¨gv
[2]);

140 
thªad£t
[
i
].
›num
 = 1;

141 
thªad£t
[
i
].
com∂ëed
 = 0;

142 
rc
 = 
	`±hªad_¸óã
(&
x
, 0, 
thªad_maö
, &
thªad£t
[
i
]);

143 if–
rc
 ){

144 
	`T˛_AµídResu…
(
öãΩ
, "failedÅo createÅheÅhread", 0);

145 
	`sqlôeFªe
(
thªad£t
[
i
].
zFûíame
);

146 
thªad£t
[
i
].
busy
 = 0;

147  
TCL_ERROR
;

149 
	`±hªad_dëach
(
x
);

150  
TCL_OK
;

151 
	}
}

156 
	$thªad_waô
(
Thªad
 *
p
){

157  
p
->
›num
>p->
com∂ëed
 ) 
	`sched_yõld
();

158 
	}
}

165 
	$t˛_thªad_waô
(

166 *
NŸU£d
,

167 
T˛_I¡îp
 *
öãΩ
,

168 
¨gc
,

169 c⁄° **
¨gv


171 
i
;

173 if–
¨gc
!=2 ){

174 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

176  
TCL_ERROR
;

178 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

179 if–
i
<0 )  
TCL_ERROR
;

180 if–!
thªad£t
[
i
].
busy
 ){

181 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

182  
TCL_ERROR
;

184 
	`thªad_waô
(&
thªad£t
[
i
]);

185  
TCL_OK
;

186 
	}
}

191 
	$°›_thªad
(
Thªad
 *
p
){

192 
	`thªad_waô
(
p
);

193 
p
->
xOp
 = 0;

194 
p
->
›num
++;

195 
	`thªad_waô
(
p
);

196 
	`sqlôeFªe
(
p
->
zArg
);

197 
p
->
zArg
 = 0;

198 
	`sqlôeFªe
(
p
->
zFûíame
);

199 
p
->
zFûíame
 = 0;

200 
p
->
busy
 = 0;

201 
	}
}

209 
	$t˛_thªad_hÆt
(

210 *
NŸU£d
,

211 
T˛_I¡îp
 *
öãΩ
,

212 
¨gc
,

213 c⁄° **
¨gv


215 
i
;

217 if–
¨gc
!=2 ){

218 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

220  
TCL_ERROR
;

222 if–
¨gv
[1][0]=='*' &&árgv[1][1]==0 ){

223 
i
=0; i<
N_THREAD
; i++){

224 if–
thªad£t
[
i
].
busy
 ) 
	`°›_thªad
(&threadset[i]);

227 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

228 if–
i
<0 )  
TCL_ERROR
;

229 if–!
thªad£t
[
i
].
busy
 ){

230 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

231  
TCL_ERROR
;

233 
	`°›_thªad
(&
thªad£t
[
i
]);

235  
TCL_OK
;

236 
	}
}

244 
	$t˛_thªad_¨gc
(

245 *
NŸU£d
,

246 
T˛_I¡îp
 *
öãΩ
,

247 
¨gc
,

248 c⁄° **
¨gv


250 
i
;

251 
zBuf
[100];

253 if–
¨gc
!=2 ){

254 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

256  
TCL_ERROR
;

258 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

259 if–
i
<0 )  
TCL_ERROR
;

260 if–!
thªad£t
[
i
].
busy
 ){

261 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

262  
TCL_ERROR
;

264 
	`thªad_waô
(&
thªad£t
[
i
]);

265 
	`•rötf
(
zBuf
, "%d", 
thªad£t
[
i
].
¨gc
);

266 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

267  
TCL_OK
;

268 
	}
}

276 
	$t˛_thªad_¨gv
(

277 *
NŸU£d
,

278 
T˛_I¡îp
 *
öãΩ
,

279 
¨gc
,

280 c⁄° **
¨gv


282 
i
;

283 
n
;

285 if–
¨gc
!=3 ){

286 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

288  
TCL_ERROR
;

290 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

291 if–
i
<0 )  
TCL_ERROR
;

292 if–!
thªad£t
[
i
].
busy
 ){

293 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

294  
TCL_ERROR
;

296 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
n
ËË 
TCL_ERROR
;

297 
	`thªad_waô
(&
thªad£t
[
i
]);

298 if–
n
<0 ||Ç>=
thªad£t
[
i
].
¨gc
 ){

299 
	`T˛_AµídResu…
(
öãΩ
, "columnÇumber out ofÑange", 0);

300  
TCL_ERROR
;

302 
	`T˛_AµídResu…
(
öãΩ
, 
thªad£t
[
i
].
¨gv
[
n
], 0);

303  
TCL_OK
;

304 
	}
}

312 
	$t˛_thªad_cﬁ«me
(

313 *
NŸU£d
,

314 
T˛_I¡îp
 *
öãΩ
,

315 
¨gc
,

316 c⁄° **
¨gv


318 
i
;

319 
n
;

321 if–
¨gc
!=3 ){

322 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

324  
TCL_ERROR
;

326 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

327 if–
i
<0 )  
TCL_ERROR
;

328 if–!
thªad£t
[
i
].
busy
 ){

329 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

330  
TCL_ERROR
;

332 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
n
ËË 
TCL_ERROR
;

333 
	`thªad_waô
(&
thªad£t
[
i
]);

334 if–
n
<0 ||Ç>=
thªad£t
[
i
].
¨gc
 ){

335 
	`T˛_AµídResu…
(
öãΩ
, "columnÇumber out ofÑange", 0);

336  
TCL_ERROR
;

338 
	`T˛_AµídResu…
(
öãΩ
, 
thªad£t
[
i
].
cﬁv
[
n
], 0);

339  
TCL_OK
;

340 
	}
}

348 
	$t˛_thªad_ªsu…
(

349 *
NŸU£d
,

350 
T˛_I¡îp
 *
öãΩ
,

351 
¨gc
,

352 c⁄° **
¨gv


354 
i
;

355 c⁄° *
zName
;

357 if–
¨gc
!=2 ){

358 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

360  
TCL_ERROR
;

362 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

363 if–
i
<0 )  
TCL_ERROR
;

364 if–!
thªad£t
[
i
].
busy
 ){

365 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

366  
TCL_ERROR
;

368 
	`thªad_waô
(&
thªad£t
[
i
]);

369  
thªad£t
[
i
].
rc
 ){

370 
SQLITE_OK
: 
zName
 = "SQLITE_OK"; ;

371 
SQLITE_ERROR
: 
zName
 = "SQLITE_ERROR"; ;

372 
SQLITE_INTERNAL
: 
zName
 = "SQLITE_INTERNAL"; ;

373 
SQLITE_PERM
: 
zName
 = "SQLITE_PERM"; ;

374 
SQLITE_ABORT
: 
zName
 = "SQLITE_ABORT"; ;

375 
SQLITE_BUSY
: 
zName
 = "SQLITE_BUSY"; ;

376 
SQLITE_LOCKED
: 
zName
 = "SQLITE_LOCKED"; ;

377 
SQLITE_NOMEM
: 
zName
 = "SQLITE_NOMEM"; ;

378 
SQLITE_READONLY
: 
zName
 = "SQLITE_READONLY"; ;

379 
SQLITE_INTERRUPT
: 
zName
 = "SQLITE_INTERRUPT"; ;

380 
SQLITE_IOERR
: 
zName
 = "SQLITE_IOERR"; ;

381 
SQLITE_CORRUPT
: 
zName
 = "SQLITE_CORRUPT"; ;

382 
SQLITE_NOTFOUND
: 
zName
 = "SQLITE_NOTFOUND"; ;

383 
SQLITE_FULL
: 
zName
 = "SQLITE_FULL"; ;

384 
SQLITE_CANTOPEN
: 
zName
 = "SQLITE_CANTOPEN"; ;

385 
SQLITE_PROTOCOL
: 
zName
 = "SQLITE_PROTOCOL"; ;

386 
SQLITE_EMPTY
: 
zName
 = "SQLITE_EMPTY"; ;

387 
SQLITE_SCHEMA
: 
zName
 = "SQLITE_SCHEMA"; ;

388 
SQLITE_TOOBIG
: 
zName
 = "SQLITE_TOOBIG"; ;

389 
SQLITE_CONSTRAINT
: 
zName
 = "SQLITE_CONSTRAINT"; ;

390 
SQLITE_MISMATCH
: 
zName
 = "SQLITE_MISMATCH"; ;

391 
SQLITE_MISUSE
: 
zName
 = "SQLITE_MISUSE"; ;

392 
SQLITE_NOLFS
: 
zName
 = "SQLITE_NOLFS"; ;

393 
SQLITE_AUTH
: 
zName
 = "SQLITE_AUTH"; ;

394 
SQLITE_FORMAT
: 
zName
 = "SQLITE_FORMAT"; ;

395 
SQLITE_RANGE
: 
zName
 = "SQLITE_RANGE"; ;

396 
SQLITE_ROW
: 
zName
 = "SQLITE_ROW"; ;

397 
SQLITE_DONE
: 
zName
 = "SQLITE_DONE"; ;

398 : 
zName
 = "SQLITE_Unknown"; ;

400 
	`T˛_AµídResu…
(
öãΩ
, 
zName
, 0);

401  
TCL_OK
;

402 
	}
}

410 
	$t˛_thªad_îr‹
(

411 *
NŸU£d
,

412 
T˛_I¡îp
 *
öãΩ
,

413 
¨gc
,

414 c⁄° **
¨gv


416 
i
;

418 if–
¨gc
!=2 ){

419 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

421  
TCL_ERROR
;

423 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

424 if–
i
<0 )  
TCL_ERROR
;

425 if–!
thªad£t
[
i
].
busy
 ){

426 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

427  
TCL_ERROR
;

429 
	`thªad_waô
(&
thªad£t
[
i
]);

430 
	`T˛_AµídResu…
(
öãΩ
, 
thªad£t
[
i
].
zEº
, 0);

431  
TCL_OK
;

432 
	}
}

437 
	$do_compûe
(
Thªad
 *
p
){

438 if–
p
->
db
==0 ){

439 
p
->
zEº
 =Ö->
zSèticEº
 = "no database is open";

440 
p
->
rc
 = 
SQLITE_ERROR
;

443 if–
p
->
vm
 ){

444 
	`sqlôe_föÆize
(
p
->
vm
, 0);

445 
p
->
vm
 = 0;

447 
p
->
rc
 = 
	`sqlôe_compûe
’->
db
,Ö->
zArg
, 0, &p->
vm
, &p->
zEº
);

448 
	}
}

455 
	$t˛_thªad_compûe
(

456 *
NŸU£d
,

457 
T˛_I¡îp
 *
öãΩ
,

458 
¨gc
,

459 c⁄° **
¨gv


461 
i
;

462 if–
¨gc
!=3 ){

463 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

465  
TCL_ERROR
;

467 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

468 if–
i
<0 )  
TCL_ERROR
;

469 if–!
thªad£t
[
i
].
busy
 ){

470 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

471  
TCL_ERROR
;

473 
	`thªad_waô
(&
thªad£t
[
i
]);

474 
thªad£t
[
i
].
xOp
 = 
do_compûe
;

475 
	`sqlôeFªe
(
thªad£t
[
i
].
zArg
);

476 
thªad£t
[
i
].
zArg
 = 
	`sqlôeSåDup
(
¨gv
[2]);

477 
thªad£t
[
i
].
›num
++;

478  
TCL_OK
;

479 
	}
}

484 
	$do_°ï
(
Thªad
 *
p
){

485 if–
p
->
vm
==0 ){

486 
p
->
zEº
 =Ö->
zSèticEº
 = "no virtual machineávailable";

487 
p
->
rc
 = 
SQLITE_ERROR
;

490 
p
->
rc
 = 
	`sqlôe_°ï
’->
vm
, &p->
¨gc
, &p->
¨gv
, &p->
cﬁv
);

491 
	}
}

498 
	$t˛_thªad_°ï
(

499 *
NŸU£d
,

500 
T˛_I¡îp
 *
öãΩ
,

501 
¨gc
,

502 c⁄° **
¨gv


504 
i
;

505 if–
¨gc
!=2 ){

506 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

508  
TCL_ERROR
;

510 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

511 if–
i
<0 )  
TCL_ERROR
;

512 if–!
thªad£t
[
i
].
busy
 ){

513 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

514  
TCL_ERROR
;

516 
	`thªad_waô
(&
thªad£t
[
i
]);

517 
thªad£t
[
i
].
xOp
 = 
do_°ï
;

518 
thªad£t
[
i
].
›num
++;

519  
TCL_OK
;

520 
	}
}

525 
	$do_föÆize
(
Thªad
 *
p
){

526 if–
p
->
vm
==0 ){

527 
p
->
zEº
 =Ö->
zSèticEº
 = "no virtual machineávailable";

528 
p
->
rc
 = 
SQLITE_ERROR
;

531 
p
->
rc
 = 
	`sqlôe_föÆize
’->
vm
, &p->
zEº
);

532 
p
->
vm
 = 0;

533 
	}
}

540 
	$t˛_thªad_föÆize
(

541 *
NŸU£d
,

542 
T˛_I¡îp
 *
öãΩ
,

543 
¨gc
,

544 c⁄° **
¨gv


546 
i
;

547 if–
¨gc
!=2 ){

548 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

550  
TCL_ERROR
;

552 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

553 if–
i
<0 )  
TCL_ERROR
;

554 if–!
thªad£t
[
i
].
busy
 ){

555 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

556  
TCL_ERROR
;

558 
	`thªad_waô
(&
thªad£t
[
i
]);

559 
thªad£t
[
i
].
xOp
 = 
do_föÆize
;

560 
	`sqlôeFªe
(
thªad£t
[
i
].
zArg
);

561 
thªad£t
[
i
].
zArg
 = 0;

562 
thªad£t
[
i
].
›num
++;

563  
TCL_OK
;

564 
	}
}

571 
	$t˛_thªad_sw≠
(

572 *
NŸU£d
,

573 
T˛_I¡îp
 *
öãΩ
,

574 
¨gc
,

575 c⁄° **
¨gv


577 
i
, 
j
;

578 
sqlôe
 *
ãmp
;

579 if–
¨gc
!=3 ){

580 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

582  
TCL_ERROR
;

584 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

585 if–
i
<0 )  
TCL_ERROR
;

586 if–!
thªad£t
[
i
].
busy
 ){

587 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

588  
TCL_ERROR
;

590 
	`thªad_waô
(&
thªad£t
[
i
]);

591 
j
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[2]);

592 if–
j
<0 )  
TCL_ERROR
;

593 if–!
thªad£t
[
j
].
busy
 ){

594 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

595  
TCL_ERROR
;

597 
	`thªad_waô
(&
thªad£t
[
j
]);

598 
ãmp
 = 
thªad£t
[
i
].
db
;

599 
thªad£t
[
i
].
db
 =Åhªad£t[
j
].db;

600 
thªad£t
[
j
].
db
 = 
ãmp
;

601  
TCL_OK
;

602 
	}
}

607 
	$Sqlôëe°4_Inô
(
T˛_I¡îp
 *
öãΩ
){

609 *
zName
;

610 
T˛_CmdProc
 *
xProc
;

611 } 
aCmd
[] = {

612 { "thªad_¸óã", (
T˛_CmdProc
*)
t˛_thªad_¸óã
 },

613 { "thªad_waô", (
T˛_CmdProc
*)
t˛_thªad_waô
 },

614 { "thªad_hÆt", (
T˛_CmdProc
*)
t˛_thªad_hÆt
 },

615 { "thªad_¨gc", (
T˛_CmdProc
*)
t˛_thªad_¨gc
 },

616 { "thªad_¨gv", (
T˛_CmdProc
*)
t˛_thªad_¨gv
 },

617 { "thªad_cﬁ«me", (
T˛_CmdProc
*)
t˛_thªad_cﬁ«me
 },

618 { "thªad_ªsu…", (
T˛_CmdProc
*)
t˛_thªad_ªsu…
 },

619 { "thªad_îr‹", (
T˛_CmdProc
*)
t˛_thªad_îr‹
 },

620 { "thªad_compûe", (
T˛_CmdProc
*)
t˛_thªad_compûe
 },

621 { "thªad_°ï", (
T˛_CmdProc
*)
t˛_thªad_°ï
 },

622 { "thªad_föÆize", (
T˛_CmdProc
*)
t˛_thªad_föÆize
 },

623 { "thªad_sw≠", (
T˛_CmdProc
*)
t˛_thªad_sw≠
 },

625 
i
;

627 
i
=0; i<(
aCmd
)/(aCmd[0]); i++){

628 
	`T˛_Cª©eComm™d
(
öãΩ
, 
aCmd
[
i
].
zName
,áCmd[i].
xProc
, 0, 0);

630  
TCL_OK
;

631 
	}
}

633 
	$Sqlôëe°4_Inô
(
T˛_I¡îp
 *
öãΩ
){  
TCL_OK
; 
	}
}

	@tokenize.c

20 
	~"sqlôeI¡.h
"

21 
	~"os.h
"

22 
	~<˘y≥.h
>

23 
	~<°dlib.h
>

29 
Keyw‹d
 
	tKeyw‹d
;

30 
	sKeyw‹d
 {

31 *
	mzName
;

32 
u8
 
	mtokíTy≥
;

33 
u8
 
	mÀn
;

34 
u8
 
	miNext
;

40 
Keyw‹d
 
	gaKeyw‹dTabÀ
[] = {

41 { "ABORT", 
TK_ABORT
, },

42 { "AFTER", 
TK_AFTER
, },

43 { "ALL", 
TK_ALL
, },

44 { "AND", 
TK_AND
, },

45 { "AS", 
TK_AS
, },

46 { "ASC", 
TK_ASC
, },

47 { "ATTACH", 
TK_ATTACH
, },

48 { "BEFORE", 
TK_BEFORE
, },

49 { "BEGIN", 
TK_BEGIN
, },

50 { "BETWEEN", 
TK_BETWEEN
, },

51 { "BY", 
TK_BY
, },

52 { "CASCADE", 
TK_CASCADE
, },

53 { "CASE", 
TK_CASE
, },

54 { "CHECK", 
TK_CHECK
, },

55 { "CLUSTER", 
TK_CLUSTER
, },

56 { "COLLATE", 
TK_COLLATE
, },

57 { "COMMIT", 
TK_COMMIT
, },

58 { "CONFLICT", 
TK_CONFLICT
, },

59 { "CONSTRAINT", 
TK_CONSTRAINT
, },

60 { "COPY", 
TK_COPY
, },

61 { "CREATE", 
TK_CREATE
, },

62 { "CROSS", 
TK_JOIN_KW
, },

63 { "DATABASE", 
TK_DATABASE
, },

64 { "DEFAULT", 
TK_DEFAULT
, },

65 { "DEFERRED", 
TK_DEFERRED
, },

66 { "DEFERRABLE", 
TK_DEFERRABLE
, },

67 { "DELETE", 
TK_DELETE
, },

68 { "DELIMITERS", 
TK_DELIMITERS
, },

69 { "DESC", 
TK_DESC
, },

70 { "DETACH", 
TK_DETACH
, },

71 { "DISTINCT", 
TK_DISTINCT
, },

72 { "DROP", 
TK_DROP
, },

73 { "END", 
TK_END
, },

74 { "EACH", 
TK_EACH
, },

75 { "ELSE", 
TK_ELSE
, },

76 { "EXCEPT", 
TK_EXCEPT
, },

77 { "EXPLAIN", 
TK_EXPLAIN
, },

78 { "FAIL", 
TK_FAIL
, },

79 { "FOR", 
TK_FOR
, },

80 { "FOREIGN", 
TK_FOREIGN
, },

81 { "FROM", 
TK_FROM
, },

82 { "FULL", 
TK_JOIN_KW
, },

83 { "GLOB", 
TK_GLOB
, },

84 { "GROUP", 
TK_GROUP
, },

85 { "HAVING", 
TK_HAVING
, },

86 { "IGNORE", 
TK_IGNORE
, },

87 { "IMMEDIATE", 
TK_IMMEDIATE
, },

88 { "IN", 
TK_IN
, },

89 { "INDEX", 
TK_INDEX
, },

90 { "INITIALLY", 
TK_INITIALLY
, },

91 { "INNER", 
TK_JOIN_KW
, },

92 { "INSERT", 
TK_INSERT
, },

93 { "INSTEAD", 
TK_INSTEAD
, },

94 { "INTERSECT", 
TK_INTERSECT
, },

95 { "INTO", 
TK_INTO
, },

96 { "IS", 
TK_IS
, },

97 { "ISNULL", 
TK_ISNULL
, },

98 { "JOIN", 
TK_JOIN
, },

99 { "KEY", 
TK_KEY
, },

100 { "LEFT", 
TK_JOIN_KW
, },

101 { "LIKE", 
TK_LIKE
, },

102 { "LIMIT", 
TK_LIMIT
, },

103 { "MATCH", 
TK_MATCH
, },

104 { "NATURAL", 
TK_JOIN_KW
, },

105 { "NOT", 
TK_NOT
, },

106 { "NOTNULL", 
TK_NOTNULL
, },

107 { "NULL", 
TK_NULL
, },

108 { "OF", 
TK_OF
, },

109 { "OFFSET", 
TK_OFFSET
, },

110 { "ON", 
TK_ON
, },

111 { "OR", 
TK_OR
, },

112 { "ORDER", 
TK_ORDER
, },

113 { "OUTER", 
TK_JOIN_KW
, },

114 { "PRAGMA", 
TK_PRAGMA
, },

115 { "PRIMARY", 
TK_PRIMARY
, },

116 { "RAISE", 
TK_RAISE
, },

117 { "REFERENCES", 
TK_REFERENCES
, },

118 { "REPLACE", 
TK_REPLACE
, },

119 { "RESTRICT", 
TK_RESTRICT
, },

120 { "RIGHT", 
TK_JOIN_KW
, },

121 { "ROLLBACK", 
TK_ROLLBACK
, },

122 { "ROW", 
TK_ROW
, },

123 { "SELECT", 
TK_SELECT
, },

124 { "SET", 
TK_SET
, },

125 { "STATEMENT", 
TK_STATEMENT
, },

126 { "TABLE", 
TK_TABLE
, },

127 { "TEMP", 
TK_TEMP
, },

128 { "TEMPORARY", 
TK_TEMP
, },

129 { "THEN", 
TK_THEN
, },

130 { "TRANSACTION", 
TK_TRANSACTION
, },

131 { "TRIGGER", 
TK_TRIGGER
, },

132 { "UNION", 
TK_UNION
, },

133 { "UNIQUE", 
TK_UNIQUE
, },

134 { "UPDATE", 
TK_UPDATE
, },

135 { "USING", 
TK_USING
, },

136 { "VACUUM", 
TK_VACUUM
, },

137 { "VALUES", 
TK_VALUES
, },

138 { "VIEW", 
TK_VIEW
, },

139 { "WHEN", 
TK_WHEN
, },

140 { "WHERE", 
TK_WHERE
, },

146 
	#KEY_HASH_SIZE
 101

	)

147 
u8
 
	gaiHashTabÀ
[
KEY_HASH_SIZE
];

155 
	$sqlôeKeyw‹dCode
(c⁄° *
z
, 
n
){

156 
h
, 
i
;

157 
Keyw‹d
 *
p
;

158 
√edInô
 = 1;

159 if–
√edInô
 ){

161 
	`sqlôeOsE¡îMuãx
();

162 if–
√edInô
 ){

163 
nk
;

164 
nk
 = (
aKeyw‹dTabÀ
)/(aKeywordTable[0]);

165 
i
=0; i<
nk
; i++){

166 
aKeyw‹dTabÀ
[
i
].
Àn
 = 
	`°æí
◊Keyw‹dTabÀ[i].
zName
);

167 
h
 = 
	`sqlôeHashNoCa£
(
aKeyw‹dTabÀ
[
i
].
zName
,áKeyw‹dTabÀ[i].
Àn
);

168 
h
 %
KEY_HASH_SIZE
;

169 
aKeyw‹dTabÀ
[
i
].
iNext
 = 
aiHashTabÀ
[
h
];

170 
aiHashTabÀ
[
h
] = 
i
+1;

172 
√edInô
 = 0;

174 
	`sqlôeOsLóveMuãx
();

176 
h
 = 
	`sqlôeHashNoCa£
(
z
, 
n
Ë% 
KEY_HASH_SIZE
;

177 
i
=
aiHashTabÀ
[
h
]; i; i=
p
->
iNext
){

178 
p
 = &
aKeyw‹dTabÀ
[
i
-1];

179 if–
p
->
Àn
==
n
 && 
	`sqlôeSåNICmp
’->
zName
, 
z
,Ç)==0 ){

180  
p
->
tokíTy≥
;

183  
TK_ID
;

184 
	}
}

201 c⁄° 
	gisIdCh¨
[] = {

218 
	$sqlôeGëTokí
(c⁄° *
z
, *
tokíTy≥
){

219 
i
;

220  *
z
 ){

222 
i
=1; 
	`is•a˚
(
z
[i]); i++){}

223 *
tokíTy≥
 = 
TK_SPACE
;

224  
i
;

227 if–
z
[1]=='-' ){

228 
i
=2; 
z
[i] && z[i]!='\n'; i++){}

229 *
tokíTy≥
 = 
TK_COMMENT
;

230  
i
;

232 *
tokíTy≥
 = 
TK_MINUS
;

236 *
tokíTy≥
 = 
TK_LP
;

240 *
tokíTy≥
 = 
TK_RP
;

244 *
tokíTy≥
 = 
TK_SEMI
;

248 *
tokíTy≥
 = 
TK_PLUS
;

252 *
tokíTy≥
 = 
TK_STAR
;

256 if–
z
[1]!='*' || z[2]==0 ){

257 *
tokíTy≥
 = 
TK_SLASH
;

260 
i
=3; 
z
[i] && (z[i]!='/' || z[i-1]!='*'); i++){}

261 if–
z
[
i
] ) i++;

262 *
tokíTy≥
 = 
TK_COMMENT
;

263  
i
;

266 *
tokíTy≥
 = 
TK_REM
;

270 *
tokíTy≥
 = 
TK_EQ
;

271  1 + (
z
[1]=='=');

274 if–
z
[1]=='=' ){

275 *
tokíTy≥
 = 
TK_LE
;

277 }if–
z
[1]=='>' ){

278 *
tokíTy≥
 = 
TK_NE
;

280 }if–
z
[1]=='<' ){

281 *
tokíTy≥
 = 
TK_LSHIFT
;

284 *
tokíTy≥
 = 
TK_LT
;

289 if–
z
[1]=='=' ){

290 *
tokíTy≥
 = 
TK_GE
;

292 }if–
z
[1]=='>' ){

293 *
tokíTy≥
 = 
TK_RSHIFT
;

296 *
tokíTy≥
 = 
TK_GT
;

301 if–
z
[1]!='=' ){

302 *
tokíTy≥
 = 
TK_ILLEGAL
;

305 *
tokíTy≥
 = 
TK_NE
;

310 if–
z
[1]!='|' ){

311 *
tokíTy≥
 = 
TK_BITOR
;

314 *
tokíTy≥
 = 
TK_CONCAT
;

319 *
tokíTy≥
 = 
TK_COMMA
;

323 *
tokíTy≥
 = 
TK_BITAND
;

327 *
tokíTy≥
 = 
TK_BITNOT
;

331 
dñim
 = 
z
[0];

332 
i
=1; 
z
[i]; i++){

333 if–
z
[
i
]==
dñim
 ){

334 if–
z
[
i
+1]==
dñim
 ){

335 
i
++;

341 if–
z
[
i
] ) i++;

342 *
tokíTy≥
 = 
TK_STRING
;

343  
i
;

346 *
tokíTy≥
 = 
TK_DOT
;

351 *
tokíTy≥
 = 
TK_INTEGER
;

352 
i
=1; 
	`isdigô
(
z
[i]); i++){}

353 if–
z
[
i
]=='.' && 
	`isdigô
(z[i+1]) ){

354 
i
 += 2;

355  
	`isdigô
(
z
[
i
]) ){ i++; }

356 *
tokíTy≥
 = 
TK_FLOAT
;

358 if–(
z
[
i
]=='e' || z[i]=='E') &&

359 –
	`isdigô
(
z
[
i
+1])

360 || ((
z
[
i
+1]=='+' || z[i+1]=='-'Ë&& 
	`isdigô
(z[i+2]))

363 
i
 += 2;

364  
	`isdigô
(
z
[
i
]) ){ i++; }

365 *
tokíTy≥
 = 
TK_FLOAT
;

367  
i
;

370 
i
=1; 
z
[i] && z[i-1]!=']'; i++){}

371 *
tokíTy≥
 = 
TK_ID
;

372  
i
;

375 *
tokíTy≥
 = 
TK_VARIABLE
;

379 if–(*
z
&0x80)==0 && !
isIdCh¨
[*z] ){

382 
i
=1; (
z
[i]&0x80)!=0 || 
isIdCh¨
[z[i]]; i++){}

383 *
tokíTy≥
 = 
	`sqlôeKeyw‹dCode
((*)
z
, 
i
);

384  
i
;

387 *
tokíTy≥
 = 
TK_ILLEGAL
;

389 
	}
}

398 
	$sqlôeRunP¨£r
(
P¨£
 *
pP¨£
, c⁄° *
zSql
, **
pzEºMsg
){

399 
nEº
 = 0;

400 
i
;

401 *
pEngöe
;

402 
tokíTy≥
;

403 
œ°TokíP¨£d
 = -1;

404 
sqlôe
 *
db
 = 
pP¨£
->db;

405 *
	`sqlôeP¨£rAŒoc
(*(*)());

406 
	`sqlôeP¨£rFªe
(*, (*)(*));

407 
	`sqlôeP¨£r
(*, , 
Tokí
, 
P¨£
*);

409 
db
->
Êags
 &~
SQLITE_I¡îru±
;

410 
pP¨£
->
rc
 = 
SQLITE_OK
;

411 
i
 = 0;

412 
pEngöe
 = 
	`sqlôeP¨£rAŒoc
((*(*)())
mÆloc
);

413 if–
pEngöe
==0 ){

414 
	`sqlôeSëSåög
(
pzEºMsg
, "out of memory", (*)0);

417 
pP¨£
->
sLa°Tokí
.
dyn
 = 0;

418 
pP¨£
->
zTaû
 = 
zSql
;

419  
sqlôe_mÆloc_Áûed
==0 && 
zSql
[
i
]!=0 ){

420 
	`as£π
–
i
>=0 );

421 
pP¨£
->
sLa°Tokí
.
z
 = &
zSql
[
i
];

422 
	`as£π
–
pP¨£
->
sLa°Tokí
.
dyn
==0 );

423 
pP¨£
->
sLa°Tokí
.
n
 = 
	`sqlôeGëTokí
((*)&
zSql
[
i
], &
tokíTy≥
);

424 
i
 +
pP¨£
->
sLa°Tokí
.
n
;

425  
tokíTy≥
 ){

426 
TK_SPACE
:

427 
TK_COMMENT
: {

428 if–(
db
->
Êags
 & 
SQLITE_I¡îru±
)!=0 ){

429 
pP¨£
->
rc
 = 
SQLITE_INTERRUPT
;

430 
	`sqlôeSëSåög
(
pzEºMsg
, "interrupt", (*)0);

431 
ab‹t_∑r£
;

435 
TK_ILLEGAL
: {

436 
	`sqlôeSëNSåög
(
pzEºMsg
, "unrecognizedÅoken: \"", -1,

437 
pP¨£
->
sLa°Tokí
.
z
,ÖP¨£->sLa°Tokí.
n
, "\"", 1, 0);

438 
nEº
++;

439 
ab‹t_∑r£
;

441 
TK_SEMI
: {

442 
pP¨£
->
zTaû
 = &
zSql
[
i
];

446 
	`sqlôeP¨£r
(
pEngöe
, 
tokíTy≥
, 
pP¨£
->
sLa°Tokí
,ÖParse);

447 
œ°TokíP¨£d
 = 
tokíTy≥
;

448 if–
pP¨£
->
rc
!=
SQLITE_OK
 ){

449 
ab‹t_∑r£
;

455 
ab‹t_∑r£
:

456 if–
zSql
[
i
]==0 && 
nEº
==0 && 
pP¨£
->
rc
==
SQLITE_OK
 ){

457 if–
œ°TokíP¨£d
!=
TK_SEMI
 ){

458 
	`sqlôeP¨£r
(
pEngöe
, 
TK_SEMI
, 
pP¨£
->
sLa°Tokí
,ÖParse);

459 
pP¨£
->
zTaû
 = &
zSql
[
i
];

461 
	`sqlôeP¨£r
(
pEngöe
, 0, 
pP¨£
->
sLa°Tokí
,ÖParse);

463 
	`sqlôeP¨£rFªe
(
pEngöe
, 
‰ì
);

464 if–
pP¨£
->
rc
!=
SQLITE_OK
 &&ÖP¨£->rc!=
SQLITE_DONE
 &&ÖP¨£->
zEºMsg
==0 ){

465 
	`sqlôeSëSåög
(&
pP¨£
->
zEºMsg
, 
	`sqlôe_îr‹_°rög
’P¨£->
rc
),

468 if–
pP¨£
->
zEºMsg
 ){

469 if–
pzEºMsg
 && *pzErrMsg==0 ){

470 *
pzEºMsg
 = 
pP¨£
->
zEºMsg
;

472 
	`sqlôeFªe
(
pP¨£
->
zEºMsg
);

474 
pP¨£
->
zEºMsg
 = 0;

475 if–!
nEº
 )ÇErr++;

477 if–
pP¨£
->
pVdbe
 &&ÖP¨£->
nEº
>0 ){

478 
	`sqlôeVdbeDñëe
(
pP¨£
->
pVdbe
);

479 
pP¨£
->
pVdbe
 = 0;

481 if–
pP¨£
->
pNewTabÀ
 ){

482 
	`sqlôeDñëeTabÀ
(
pP¨£
->
db
,ÖP¨£->
pNewTabÀ
);

483 
pP¨£
->
pNewTabÀ
 = 0;

485 if–
pP¨£
->
pNewTriggî
 ){

486 
	`sqlôeDñëeTriggî
(
pP¨£
->
pNewTriggî
);

487 
pP¨£
->
pNewTriggî
 = 0;

489 if–
nEº
>0 && (
pP¨£
->
rc
==
SQLITE_OK
 ||ÖP¨£->rc==
SQLITE_DONE
) ){

490 
pP¨£
->
rc
 = 
SQLITE_ERROR
;

492  
nEº
;

493 
	}
}

499 
	#tkEXPLAIN
 0

	)

500 
	#tkCREATE
 1

	)

501 
	#tkTEMP
 2

	)

502 
	#tkTRIGGER
 3

	)

503 
	#tkEND
 4

	)

504 
	#tkSEMI
 5

	)

505 
	#tkWS
 6

	)

506 
	#tkOTHER
 7

	)

554 
	$sqlôe_com∂ëe
(c⁄° *
zSql
){

555 
u8
 
°©e
 = 0;

556 
u8
 
tokí
;

562 c⁄° 
u8
 
å™s
[7][8] = {

574  *
zSql
 ){

575  *
zSql
 ){

577 
tokí
 = 
tkSEMI
;

585 
tokí
 = 
tkWS
;

589 if–
zSql
[1]!='*' ){

590 
tokí
 = 
tkOTHER
;

593 
zSql
 += 2;

594  
zSql
[0] && (zSql[0]!='*' || zSql[1]!='/') ){ zSql++; }

595 if–
zSql
[0]==0 )  0;

596 
zSql
++;

597 
tokí
 = 
tkWS
;

601 if–
zSql
[1]!='-' ){

602 
tokí
 = 
tkOTHER
;

605  *
zSql
 && *zSql!='\n' ){ zSql++; }

606 if–*
zSql
==0 )  
°©e
==0;

607 
tokí
 = 
tkWS
;

611 
zSql
++;

612  *
zSql
 && *zSql!=']' ){ zSql++; }

613 if–*
zSql
==0 )  0;

614 
tokí
 = 
tkOTHER
;

619 
c
 = *
zSql
;

620 
zSql
++;

621  *
zSql
 && *zSql!=
c
 ){ zSql++; }

622 if–*
zSql
==0 )  0;

623 
tokí
 = 
tkOTHER
;

627 if–
isIdCh¨
[(
u8
)*
zSql
] ){

629 
nId
;

630 
nId
=1; 
isIdCh¨
[(
u8
)
zSql
[nId]];ÇId++){}

631  *
zSql
 ){

633 if–
nId
==6 && 
	`sqlôeSåNICmp
(
zSql
, "create", 6)==0 ){

634 
tokí
 = 
tkCREATE
;

636 
tokí
 = 
tkOTHER
;

641 if–
nId
==7 && 
	`sqlôeSåNICmp
(
zSql
, "trigger", 7)==0 ){

642 
tokí
 = 
tkTRIGGER
;

643 }if–
nId
==4 && 
	`sqlôeSåNICmp
(
zSql
, "temp", 4)==0 ){

644 
tokí
 = 
tkTEMP
;

645 }if–
nId
==9 && 
	`sqlôeSåNICmp
(
zSql
, "temporary", 9)==0 ){

646 
tokí
 = 
tkTEMP
;

648 
tokí
 = 
tkOTHER
;

653 if–
nId
==3 && 
	`sqlôeSåNICmp
(
zSql
, "end", 3)==0 ){

654 
tokí
 = 
tkEND
;

655 }if–
nId
==7 && 
	`sqlôeSåNICmp
(
zSql
, "explain", 7)==0 ){

656 
tokí
 = 
tkEXPLAIN
;

658 
tokí
 = 
tkOTHER
;

663 
tokí
 = 
tkOTHER
;

667 
zSql
 +
nId
-1;

670 
tokí
 = 
tkOTHER
;

675 
°©e
 = 
å™s
[°©e][
tokí
];

676 
zSql
++;

678  
°©e
==0;

679 
	}
}

	@trigger.c

13 
	~"sqlôeI¡.h
"

18 
	$sqlôeDñëeTriggîSãp
(
TriggîSãp
 *
pTriggîSãp
){

19  
pTriggîSãp
 ){

20 
TriggîSãp
 * 
pTmp
 = 
pTriggîSãp
;

21 
pTriggîSãp
 =ÖTriggîSãp->
pNext
;

23 if–
pTmp
->
èrgë
.
dyn
 ) 
	`sqlôeFªe
((*ÌTmp->èrgë.
z
);

24 
	`sqlôeEx¥Dñëe
(
pTmp
->
pWhîe
);

25 
	`sqlôeEx¥Li°Dñëe
(
pTmp
->
pEx¥Li°
);

26 
	`sqlôeSñe˘Dñëe
(
pTmp
->
pSñe˘
);

27 
	`sqlôeIdLi°Dñëe
(
pTmp
->
pIdLi°
);

29 
	`sqlôeFªe
(
pTmp
);

31 
	}
}

41 
	$sqlôeBegöTriggî
(

42 
P¨£
 *
pP¨£
,

43 
Tokí
 *
pName
,

44 
å_tm
,

45 
›
,

46 
IdLi°
 *
pCﬁumns
,

47 
SrcLi°
 *
pTabÀName
,

48 
f‹óch
,

49 
Ex¥
 *
pWhí
,

50 
isTemp


52 
Triggî
 *
¡
;

53 
TabÀ
 *
èb
;

54 *
zName
 = 0;

55 
sqlôe
 *
db
 = 
pP¨£
->db;

56 
iDb
;

57 
DbFixî
 
sFix
;

66 if–
sqlôe_mÆloc_Áûed
 ) 
åiggî_˛ónup
;

67 
	`as£π
–
pTabÀName
->
nSrc
==1 );

68 if–
db
->
öô
.
busy


72 
åiggî_˛ónup
;

74 
èb
 = 
	`sqlôeSrcLi°Lookup
(
pP¨£
, 
pTabÀName
);

75 if–!
èb
 ){

76 
åiggî_˛ónup
;

78 
iDb
 = 
isTemp
 ? 1 : 
èb
->iDb;

79 if–
iDb
>=2 && !
db
->
öô
.
busy
 ){

80 
	`sqlôeEº‹Msg
(
pP¨£
, "triggers mayÇot beáddedÅoáuxiliary "

81 "d©aba£ %s", 
db
->
aDb
[
èb
->
iDb
].
zName
);

82 
åiggî_˛ónup
;

85 
zName
 = 
	`sqlôeSåNDup
(
pName
->
z
,ÖName->
n
);

86 
	`sqlôeDequŸe
(
zName
);

87 if–
	`sqlôeHashFöd
(&(
db
->
aDb
[
iDb
].
åigHash
), 
zName
,
pName
->
n
+1) ){

88 
	`sqlôeEº‹Msg
(
pP¨£
, "åiggî %TáÃódyÉxi°s", 
pName
);

89 
åiggî_˛ónup
;

91 if–
	`sqlôeSåNICmp
(
èb
->
zName
, "sqlite_", 7)==0 ){

92 
	`sqlôeEº‹Msg
(
pP¨£
, "cannot createÅrigger on systemÅable");

93 
pP¨£
->
nEº
++;

94 
åiggî_˛ónup
;

96 if–
èb
->
pSñe˘
 && 
å_tm
 !
TK_INSTEAD
 ){

97 
	`sqlôeEº‹Msg
(
pP¨£
, "cannot create %sÅrigger on view: %S",

98 (
å_tm
 =
TK_BEFORE
)?"BEFORE":"AFTER", 
pTabÀName
, 0);

99 
åiggî_˛ónup
;

101 if–!
èb
->
pSñe˘
 && 
å_tm
 =
TK_INSTEAD
 ){

102 
	`sqlôeEº‹Msg
(
pP¨£
, "cannot create INSTEAD OF"

103 "Åriggî o¿èbÀ: %S", 
pTabÀName
, 0);

104 
åiggî_˛ónup
;

106 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


108 
code
 = 
SQLITE_CREATE_TRIGGER
;

109 c⁄° *
zDb
 = 
db
->
aDb
[
èb
->
iDb
].
zName
;

110 c⁄° *
zDbTrig
 = 
isTemp
 ? 
db
->
aDb
[1].
zName
 : 
zDb
;

111 if–
èb
->
iDb
==1 || 
isTemp
 ) 
code
 = 
SQLITE_CREATE_TEMP_TRIGGER
;

128 i‡(
å_tm
 =
TK_INSTEAD
){

129 
å_tm
 = 
TK_BEFORE
;

133 
¡
 = (
Triggî
*)
	`sqlôeMÆloc
((Trigger));

134 if–
¡
==0 ) 
åiggî_˛ónup
;

135 
¡
->
«me
 = 
zName
;

136 
zName
 = 0;

137 
¡
->
èbÀ
 = 
	`sqlôeSåDup
(
pTabÀName
->
a
[0].
zName
);

138 if–
sqlôe_mÆloc_Áûed
 ) 
åiggî_˛ónup
;

139 
¡
->
iDb
 = iDb;

140 
¡
->
iTabDb
 = 
èb
->
iDb
;

141 
¡
->
›
 = op;

142 
¡
->
å_tm
 =År_tm;

143 
¡
->
pWhí
 = 
	`sqlôeEx¥Dup
(pWhen);

144 
¡
->
pCﬁumns
 = 
	`sqlôeIdLi°Dup
(pColumns);

145 
¡
->
f‹óch
 = foreach;

146 
	`sqlôeTokíC›y
(&
¡
->
«meTokí
,
pName
);

147 
	`as£π
–
pP¨£
->
pNewTriggî
==0 );

148 
pP¨£
->
pNewTriggî
 = 
¡
;

150 
åiggî_˛ónup
:

151 
	`sqlôeFªe
(
zName
);

152 
	`sqlôeSrcLi°Dñëe
(
pTabÀName
);

153 
	`sqlôeIdLi°Dñëe
(
pCﬁumns
);

154 
	`sqlôeEx¥Dñëe
(
pWhí
);

155 
	}
}

161 
	$sqlôeFöishTriggî
(

162 
P¨£
 *
pP¨£
,

163 
TriggîSãp
 *
pSãpLi°
,

164 
Tokí
 *
pAŒ


166 
Triggî
 *
¡
 = 0;

167 
sqlôe
 *
db
 = 
pP¨£
->db;

168 
DbFixî
 
sFix
;

170 if–
pP¨£
->
nEº
 ||ÖP¨£->
pNewTriggî
==0 ) 
åiggîföish_˛ónup
;

171 
¡
 = 
pP¨£
->
pNewTriggî
;

172 
pP¨£
->
pNewTriggî
 = 0;

173 
¡
->
°ï_li°
 = 
pSãpLi°
;

174  
pSãpLi°
 ){

175 
pSãpLi°
->
pTrig
 = 
¡
;

176 
pSãpLi°
 =ÖSãpLi°->
pNext
;

186 if–!
db
->
öô
.
busy
 ){

187 
VdbeOpLi°
 
ö£πTrig
[] = {

188 { 
OP_NewRe˙o
, 0, 0, 0 },

189 { 
OP_Såög
, 0, 0, "trigger" },

190 { 
OP_Såög
, 0, 0, 0 },

191 { 
OP_Såög
, 0, 0, 0 },

192 { 
OP_I¡egî
, 0, 0, 0 },

193 { 
OP_Såög
, 0, 0, 0 },

194 { 
OP_MakeRec‹d
, 5, 0, 0 },

195 { 
OP_PutI¡Key
, 0, 0, 0 },

197 
addr
;

198 
Vdbe
 *
v
;

201 
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

202 if–
v
==0 ) 
åiggîföish_˛ónup
;

203 
	`sqlôeBegöWrôeO≥øti⁄
(
pP¨£
, 0, 0);

204 
	`sqlôeO≥nMa°îTabÀ
(
v
, 
¡
->
iDb
);

205 
addr
 = 
	`sqlôeVdbeAddOpLi°
(
v
, 
	`AºaySize
(
ö£πTrig
), insertTrig);

206 
	`sqlôeVdbeCh™geP3
(
v
, 
addr
+2, 
¡
->
«me
, 0);

207 
	`sqlôeVdbeCh™geP3
(
v
, 
addr
+3, 
¡
->
èbÀ
, 0);

208 
	`sqlôeVdbeCh™geP3
(
v
, 
addr
+5, 
pAŒ
->
z
,ÖAŒ->
n
);

209 if–
¡
->
iDb
==0 ){

210 
	`sqlôeCh™geCookõ
(
db
, 
v
);

212 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 0, 0);

213 
	`sqlôeEndWrôeO≥øti⁄
(
pP¨£
);

216 if–!
pP¨£
->
ex∂aö
 ){

217 
TabÀ
 *
pTab
;

218 
	`sqlôeHashIn£π
(&
db
->
aDb
[
¡
->
iDb
].
åigHash
,

219 
¡
->
«me
, 
	`°æí
(nt->name)+1,Çt);

220 
pTab
 = 
	`sqlôeLoˇãTabÀ
(
pP¨£
, 
¡
->
èbÀ
, 
db
->
aDb
[¡->
iTabDb
].
zName
);

221 
	`as£π
–
pTab
!=0 );

222 
¡
->
pNext
 = 
pTab
->
pTriggî
;

223 
pTab
->
pTriggî
 = 
¡
;

224 
¡
 = 0;

227 
åiggîföish_˛ónup
:

228 
	`sqlôeDñëeTriggî
(
¡
);

229 
	`sqlôeDñëeTriggî
(
pP¨£
->
pNewTriggî
);

230 
pP¨£
->
pNewTriggî
 = 0;

231 
	`sqlôeDñëeTriggîSãp
(
pSãpLi°
);

232 
	}
}

244 
	$sqlôePîsi°TriggîSãp
(
TriggîSãp
 *
p
){

245 if–
p
->
èrgë
.
z
 ){

246 
p
->
èrgë
.
z
 = 
	`sqlôeSåNDup
’->èrgë.z,Ö->èrgë.
n
);

247 
p
->
èrgë
.
dyn
 = 1;

249 if–
p
->
pSñe˘
 ){

250 
Sñe˘
 *
pNew
 = 
	`sqlôeSñe˘Dup
(
p
->
pSñe˘
);

251 
	`sqlôeSñe˘Dñëe
(
p
->
pSñe˘
);

252 
p
->
pSñe˘
 = 
pNew
;

254 if–
p
->
pWhîe
 ){

255 
Ex¥
 *
pNew
 = 
	`sqlôeEx¥Dup
(
p
->
pWhîe
);

256 
	`sqlôeEx¥Dñëe
(
p
->
pWhîe
);

257 
p
->
pWhîe
 = 
pNew
;

259 if–
p
->
pEx¥Li°
 ){

260 
Ex¥Li°
 *
pNew
 = 
	`sqlôeEx¥Li°Dup
(
p
->
pEx¥Li°
);

261 
	`sqlôeEx¥Li°Dñëe
(
p
->
pEx¥Li°
);

262 
p
->
pEx¥Li°
 = 
pNew
;

264 if–
p
->
pIdLi°
 ){

265 
IdLi°
 *
pNew
 = 
	`sqlôeIdLi°Dup
(
p
->
pIdLi°
);

266 
	`sqlôeIdLi°Dñëe
(
p
->
pIdLi°
);

267 
p
->
pIdLi°
 = 
pNew
;

269 
	}
}

278 
TriggîSãp
 *
	$sqlôeTriggîSñe˘Sãp
(
Sñe˘
 *
pSñe˘
){

279 
TriggîSãp
 *
pTriggîSãp
 = 
	`sqlôeMÆloc
((TriggerStep));

280 if–
pTriggîSãp
==0 )  0;

282 
pTriggîSãp
->
›
 = 
TK_SELECT
;

283 
pTriggîSãp
->
pSñe˘
 =ÖSelect;

284 
pTriggîSãp
->
‹c⁄f
 = 
OE_DeÁu…
;

285 
	`sqlôePîsi°TriggîSãp
(
pTriggîSãp
);

287  
pTriggîSãp
;

288 
	}
}

297 
TriggîSãp
 *
	$sqlôeTriggîIn£πSãp
(

298 
Tokí
 *
pTabÀName
,

299 
IdLi°
 *
pCﬁumn
,

300 
Ex¥Li°
 *
pELi°
,

301 
Sñe˘
 *
pSñe˘
,

302 
‹c⁄f


304 
TriggîSãp
 *
pTriggîSãp
 = 
	`sqlôeMÆloc
((TriggerStep));

305 if–
pTriggîSãp
==0 )  0;

307 
	`as£π
(
pELi°
 =0 || 
pSñe˘
 == 0);

308 
	`as£π
(
pELi°
 !0 || 
pSñe˘
 != 0);

310 
pTriggîSãp
->
›
 = 
TK_INSERT
;

311 
pTriggîSãp
->
pSñe˘
 =ÖSelect;

312 
pTriggîSãp
->
èrgë
 = *
pTabÀName
;

313 
pTriggîSãp
->
pIdLi°
 = 
pCﬁumn
;

314 
pTriggîSãp
->
pEx¥Li°
 = 
pELi°
;

315 
pTriggîSãp
->
‹c⁄f
 = orconf;

316 
	`sqlôePîsi°TriggîSãp
(
pTriggîSãp
);

318  
pTriggîSãp
;

319 
	}
}

326 
TriggîSãp
 *
	$sqlôeTriggîUpd©eSãp
(

327 
Tokí
 *
pTabÀName
,

328 
Ex¥Li°
 *
pELi°
,

329 
Ex¥
 *
pWhîe
,

330 
‹c⁄f


332 
TriggîSãp
 *
pTriggîSãp
 = 
	`sqlôeMÆloc
((TriggerStep));

333 if–
pTriggîSãp
==0 )  0;

335 
pTriggîSãp
->
›
 = 
TK_UPDATE
;

336 
pTriggîSãp
->
èrgë
 = *
pTabÀName
;

337 
pTriggîSãp
->
pEx¥Li°
 = 
pELi°
;

338 
pTriggîSãp
->
pWhîe
 =ÖWhere;

339 
pTriggîSãp
->
‹c⁄f
 = orconf;

340 
	`sqlôePîsi°TriggîSãp
(
pTriggîSãp
);

342  
pTriggîSãp
;

343 
	}
}

350 
TriggîSãp
 *
	$sqlôeTriggîDñëeSãp
(
Tokí
 *
pTabÀName
, 
Ex¥
 *
pWhîe
){

351 
TriggîSãp
 *
pTriggîSãp
 = 
	`sqlôeMÆloc
((TriggerStep));

352 if–
pTriggîSãp
==0 )  0;

354 
pTriggîSãp
->
›
 = 
TK_DELETE
;

355 
pTriggîSãp
->
èrgë
 = *
pTabÀName
;

356 
pTriggîSãp
->
pWhîe
 =ÖWhere;

357 
pTriggîSãp
->
‹c⁄f
 = 
OE_DeÁu…
;

358 
	`sqlôePîsi°TriggîSãp
(
pTriggîSãp
);

360  
pTriggîSãp
;

361 
	}
}

366 
	$sqlôeDñëeTriggî
(
Triggî
 *
pTriggî
){

367 if–
pTriggî
==0 ) ;

368 
	`sqlôeDñëeTriggîSãp
(
pTriggî
->
°ï_li°
);

369 
	`sqlôeFªe
(
pTriggî
->
«me
);

370 
	`sqlôeFªe
(
pTriggî
->
èbÀ
);

371 
	`sqlôeEx¥Dñëe
(
pTriggî
->
pWhí
);

372 
	`sqlôeIdLi°Dñëe
(
pTriggî
->
pCﬁumns
);

373 if–
pTriggî
->
«meTokí
.
dyn
 ) 
	`sqlôeFªe
((*ÌTriggî->«meTokí.
z
);

374 
	`sqlôeFªe
(
pTriggî
);

375 
	}
}

390 
	$sqlôeDr›Triggî
(
P¨£
 *
pP¨£
, 
SrcLi°
 *
pName
){

391 
Triggî
 *
pTriggî
;

392 
i
;

393 c⁄° *
zDb
;

394 c⁄° *
zName
;

395 
nName
;

396 
sqlôe
 *
db
 = 
pP¨£
->db;

398 if–
sqlôe_mÆloc_Áûed
 ) 
dr›_åiggî_˛ónup
;

399 
	`as£π
–
pName
->
nSrc
==1 );

400 
zDb
 = 
pName
->
a
[0].
zD©aba£
;

401 
zName
 = 
pName
->
a
[0].zName;

402 
nName
 = 
	`°æí
(
zName
);

403 
i
=0; i<
db
->
nDb
; i++){

404 
j
 = (
i
<2) ? i^1 : i;

405 if–
zDb
 && 
	`sqlôeSåICmp
(
db
->
aDb
[
j
].
zName
, zDb) ) ;

406 
pTriggî
 = 
	`sqlôeHashFöd
(&(
db
->
aDb
[
j
].
åigHash
), 
zName
, 
nName
+1);

407 if–
pTriggî
 ) ;

409 if–!
pTriggî
 ){

410 
	`sqlôeEº‹Msg
(
pP¨£
, "nÿsuchÅriggî: %S", 
pName
, 0);

411 
dr›_åiggî_˛ónup
;

413 
	`sqlôeDr›TriggîPå
(
pP¨£
, 
pTriggî
, 0);

415 
dr›_åiggî_˛ónup
:

416 
	`sqlôeSrcLi°Dñëe
(
pName
);

417 
	}
}

424 
	$sqlôeDr›TriggîPå
(
P¨£
 *
pP¨£
, 
Triggî
 *
pTriggî
, 
√°ed
){

425 
TabÀ
 *
pTabÀ
;

426 
Vdbe
 *
v
;

427 
sqlôe
 *
db
 = 
pP¨£
->db;

429 
	`as£π
–
pTriggî
->
iDb
<
db
->
nDb
 );

430 if–
pTriggî
->
iDb
>=2 ){

431 
	`sqlôeEº‹Msg
(
pP¨£
, "triggers mayÇot beÑemoved from "

432 "auxûüry d©aba£ %s", 
db
->
aDb
[
pTriggî
->
iDb
].
zName
);

435 
pTabÀ
 = 
	`sqlôeFödTabÀ
(
db
, 
pTriggî
->
èbÀ
,db->
aDb
[pTriggî->
iTabDb
].
zName
);

436 
	`as£π
(
pTabÀ
);

437 
	`as£π
–
pTabÀ
->
iDb
==
pTriggî
->iDb ||ÖTrigger->iDb==1 );

438 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


440 
code
 = 
SQLITE_DROP_TRIGGER
;

441 c⁄° *
zDb
 = 
db
->
aDb
[
pTriggî
->
iDb
].
zName
;

442 c⁄° *
zTab
 = 
	`SCHEMA_TABLE
(
pTriggî
->
iDb
);

443 if–
pTriggî
->
iDb
 ) 
code
 = 
SQLITE_DROP_TEMP_TRIGGER
;

455 if–
pTabÀ
!=0 && !
√°ed
 && (
v
 = 
	`sqlôeGëVdbe
(
pP¨£
))!=0 ){

456 
ba£
;

457 
VdbeOpLi°
 
dr›Triggî
[] = {

458 { 
OP_Rewöd
, 0, 
	`ADDR
(9), 0},

459 { 
OP_Såög
, 0, 0, 0},

460 { 
OP_Cﬁumn
, 0, 1, 0},

461 { 
OP_Ne
, 0, 
	`ADDR
(8), 0},

462 { 
OP_Såög
, 0, 0, "trigger"},

463 { 
OP_Cﬁumn
, 0, 0, 0},

464 { 
OP_Ne
, 0, 
	`ADDR
(8), 0},

465 { 
OP_Dñëe
, 0, 0, 0},

466 { 
OP_Next
, 0, 
	`ADDR
(1), 0},

469 
	`sqlôeBegöWrôeO≥øti⁄
(
pP¨£
, 0, 0);

470 
	`sqlôeO≥nMa°îTabÀ
(
v
, 
pTriggî
->
iDb
);

471 
ba£
 = 
	`sqlôeVdbeAddOpLi°
(
v
, 
	`AºaySize
(
dr›Triggî
), dropTrigger);

472 
	`sqlôeVdbeCh™geP3
(
v
, 
ba£
+1, 
pTriggî
->
«me
, 0);

473 if–
pTriggî
->
iDb
==0 ){

474 
	`sqlôeCh™geCookõ
(
db
, 
v
);

476 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 0, 0);

477 
	`sqlôeEndWrôeO≥øti⁄
(
pP¨£
);

483 if–!
pP¨£
->
ex∂aö
 ){

484 c⁄° *
zName
 = 
pTriggî
->
«me
;

485 
nName
 = 
	`°æí
(
zName
);

486 if–
pTabÀ
->
pTriggî
 ==ÖTrigger ){

487 
pTabÀ
->
pTriggî
 =ÖTriggî->
pNext
;

489 
Triggî
 *
cc
 = 
pTabÀ
->
pTriggî
;

490  
cc
 ){

491 if–
cc
->
pNext
 =
pTriggî
 ){

492 
cc
->
pNext
 = cc->pNext->pNext;

495 
cc
 = cc->
pNext
;

497 
	`as£π
(
cc
);

499 
	`sqlôeHashIn£π
(&(
db
->
aDb
[
pTriggî
->
iDb
].
åigHash
), 
zName
, 
nName
+1, 0);

500 
	`sqlôeDñëeTriggî
(
pTriggî
);

502 
	}
}

513 
	$checkCﬁumnOvîL≠
(
IdLi°
 *
pIdLi°
, 
Ex¥Li°
 *
pELi°
){

514 
e
;

515 if–!
pIdLi°
 || !
pELi°
 )  1;

516 
e
=0;É<
pELi°
->
nEx¥
;É++){

517 if–
	`sqlôeIdLi°Index
(
pIdLi°
, 
pELi°
->
a
[
e
].
zName
)>=0 )  1;

520 
	}
}

530 
	gÆways_code_åiggî_£tup
 = 0;

537 
	$sqlôeTriggîsExi°
(

538 
P¨£
 *
pP¨£
,

539 
Triggî
 *
pTriggî
,

540 
›
,

541 
å_tm
,

542 
f‹óch
,

543 
Ex¥Li°
 *
pCh™ges


545 
Triggî
 * 
pTriggîCurs‹
;

547 if–
Æways_code_åiggî_£tup
 ){

551 
pTriggîCurs‹
 = 
pTriggî
;

552  
pTriggîCurs‹
 ){

553 if–
pTriggîCurs‹
->
›
 == op &&

554 
pTriggîCurs‹
->
å_tm
 ==År_tm &&

555 
pTriggîCurs‹
->
f‹óch
 == foreach &&

556 
	`checkCﬁumnOvîL≠
(
pTriggîCurs‹
->
pCﬁumns
, 
pCh™ges
) ){

557 
TriggîSèck
 * 
ss
;

558 
ss
 = 
pP¨£
->
åigSèck
;

559  
ss
 && ss->
pTriggî
 !=ÖTrigger ){

560 
ss
 = ss->
pNext
;

562 if–!
ss
 ) 1;

564 
pTriggîCurs‹
 =ÖTriggîCurs‹->
pNext
;

568 
	}
}

580 
SrcLi°
 *
	$èrgëSrcLi°
(

581 
P¨£
 *
pP¨£
,

582 
TriggîSãp
 *
pSãp


584 
Tokí
 
sDb
;

585 
iDb
;

586 
SrcLi°
 *
pSrc
;

588 
iDb
 = 
pSãp
->
pTrig
->iDb;

589 if–
iDb
==0 || iDb>=2 ){

590 
	`as£π
–
iDb
<
pP¨£
->
db
->
nDb
 );

591 
sDb
.
z
 = 
pP¨£
->
db
->
aDb
[
iDb
].
zName
;

592 
sDb
.
n
 = 
	`°æí
(sDb.
z
);

593 
pSrc
 = 
	`sqlôeSrcLi°Aµíd
(0, &
sDb
, &
pSãp
->
èrgë
);

595 
pSrc
 = 
	`sqlôeSrcLi°Aµíd
(0, &
pSãp
->
èrgë
, 0);

597  
pSrc
;

598 
	}
}

604 
	$codeTriggîProgøm
(

605 
P¨£
 *
pP¨£
,

606 
TriggîSãp
 *
pSãpLi°
,

607 
‹c⁄fö


609 
TriggîSãp
 * 
pTriggîSãp
 = 
pSãpLi°
;

610 
‹c⁄f
;

612  
pTriggîSãp
 ){

613 
ßveNTab
 = 
pP¨£
->
nTab
;

615 
‹c⁄f
 = (
‹c⁄fö
 =
OE_DeÁu…
)?
pTriggîSãp
->orconf:orconfin;

616 
pP¨£
->
åigSèck
->
‹c⁄f
 = orconf;

617  
pTriggîSãp
->
›
 ){

618 
TK_SELECT
: {

619 
Sñe˘
 * 
ss
 = 
	`sqlôeSñe˘Dup
(
pTriggîSãp
->
pSñe˘
);

620 
	`as£π
(
ss
);

621 
	`as£π
(
ss
->
pSrc
);

622 
	`sqlôeSñe˘
(
pP¨£
, 
ss
, 
SRT_Disˇrd
, 0, 0, 0, 0);

623 
	`sqlôeSñe˘Dñëe
(
ss
);

626 
TK_UPDATE
: {

627 
SrcLi°
 *
pSrc
;

628 
pSrc
 = 
	`èrgëSrcLi°
(
pP¨£
, 
pTriggîSãp
);

629 
	`sqlôeVdbeAddOp
(
pP¨£
->
pVdbe
, 
OP_Li°Push
, 0, 0);

630 
	`sqlôeUpd©e
(
pP¨£
, 
pSrc
,

631 
	`sqlôeEx¥Li°Dup
(
pTriggîSãp
->
pEx¥Li°
),

632 
	`sqlôeEx¥Dup
(
pTriggîSãp
->
pWhîe
), 
‹c⁄f
);

633 
	`sqlôeVdbeAddOp
(
pP¨£
->
pVdbe
, 
OP_Li°P›
, 0, 0);

636 
TK_INSERT
: {

637 
SrcLi°
 *
pSrc
;

638 
pSrc
 = 
	`èrgëSrcLi°
(
pP¨£
, 
pTriggîSãp
);

639 
	`sqlôeIn£π
(
pP¨£
, 
pSrc
,

640 
	`sqlôeEx¥Li°Dup
(
pTriggîSãp
->
pEx¥Li°
),

641 
	`sqlôeSñe˘Dup
(
pTriggîSãp
->
pSñe˘
),

642 
	`sqlôeIdLi°Dup
(
pTriggîSãp
->
pIdLi°
), 
‹c⁄f
);

645 
TK_DELETE
: {

646 
SrcLi°
 *
pSrc
;

647 
	`sqlôeVdbeAddOp
(
pP¨£
->
pVdbe
, 
OP_Li°Push
, 0, 0);

648 
pSrc
 = 
	`èrgëSrcLi°
(
pP¨£
, 
pTriggîSãp
);

649 
	`sqlôeDñëeFrom
(
pP¨£
, 
pSrc
, 
	`sqlôeEx¥Dup
(
pTriggîSãp
->
pWhîe
));

650 
	`sqlôeVdbeAddOp
(
pP¨£
->
pVdbe
, 
OP_Li°P›
, 0, 0);

654 
	`as£π
(0);

656 
pP¨£
->
nTab
 = 
ßveNTab
;

657 
pTriggîSãp
 =ÖTriggîSãp->
pNext
;

661 
	}
}

683 
	$sqlôeCodeRowTriggî
(

684 
P¨£
 *
pP¨£
,

685 
›
,

686 
Ex¥Li°
 *
pCh™ges
,

687 
å_tm
,

688 
TabÀ
 *
pTab
,

689 
√wIdx
,

690 
ﬁdIdx
,

691 
‹c⁄f
,

692 
ign‹eJump


694 
Triggî
 * 
pTriggî
;

695 
TriggîSèck
 * 
pTriggîSèck
;

697 
	`as£π
(
›
 =
TK_UPDATE
 || o∞=
TK_INSERT
 || o∞=
TK_DELETE
);

698 
	`as£π
(
å_tm
 =
TK_BEFORE
 ||År_tm =
TK_AFTER
 );

700 
	`as£π
(
√wIdx
 !-1 || 
ﬁdIdx
 != -1);

702 
pTriggî
 = 
pTab
->pTrigger;

703  
pTriggî
 ){

704 
fúe_this
 = 0;

707 if–
pTriggî
->
›
 =› &&ÖTriggî->
å_tm
 ==År_tm &&

708 
pTriggî
->
f‹óch
 =
TK_ROW
 ){

709 
fúe_this
 = 1;

710 
pTriggîSèck
 = 
pP¨£
->
åigSèck
;

711  
pTriggîSèck
 ){

712 if–
pTriggîSèck
->
pTriggî
 ==ÖTrigger ){

713 
fúe_this
 = 0;

715 
pTriggîSèck
 =ÖTriggîSèck->
pNext
;

717 if–
›
 =
TK_UPDATE
 && 
pTriggî
->
pCﬁumns
 &&

718 !
	`checkCﬁumnOvîL≠
(
pTriggî
->
pCﬁumns
, 
pCh™ges
) ){

719 
fúe_this
 = 0;

723 if–
fúe_this
 && (
pTriggîSèck
 = 
	`sqlôeMÆloc
((
TriggîSèck
)))!=0 ){

724 
ídTriggî
;

725 
SrcLi°
 
dummyTabli°
;

726 
Ex¥
 * 
whíEx¥
;

727 
AuthC⁄ãxt
 
sC⁄ãxt
;

729 
dummyTabli°
.
nSrc
 = 0;

732 
pTriggîSèck
->
pTriggî
 =ÖTrigger;

733 
pTriggîSèck
->
√wIdx
 =ÇewIdx;

734 
pTriggîSèck
->
ﬁdIdx
 = oldIdx;

735 
pTriggîSèck
->
pTab
 =ÖTab;

736 
pTriggîSèck
->
pNext
 = 
pP¨£
->
åigSèck
;

737 
pTriggîSèck
->
ign‹eJump
 = ignoreJump;

738 
pP¨£
->
åigSèck
 = 
pTriggîSèck
;

742 
ídTriggî
 = 
	`sqlôeVdbeMakeLabñ
(
pP¨£
->
pVdbe
);

743 
whíEx¥
 = 
	`sqlôeEx¥Dup
(
pTriggî
->
pWhí
);

744 if–
	`sqlôeEx¥ResﬁveIds
(
pP¨£
, &
dummyTabli°
, 0, 
whíEx¥
) ){

745 
pP¨£
->
åigSèck
 =ÖP¨£->åigSèck->
pNext
;

746 
	`sqlôeFªe
(
pTriggîSèck
);

747 
	`sqlôeEx¥Dñëe
(
whíEx¥
);

750 
	`sqlôeEx¥IfFÆ£
(
pP¨£
, 
whíEx¥
, 
ídTriggî
, 1);

751 
	`sqlôeEx¥Dñëe
(
whíEx¥
);

753 
	`sqlôeVdbeAddOp
(
pP¨£
->
pVdbe
, 
OP_C⁄ãxtPush
, 0, 0);

754 
	`codeTriggîProgøm
(
pP¨£
, 
pTriggî
->
°ï_li°
, 
‹c⁄f
);

755 
	`sqlôeVdbeAddOp
(
pP¨£
->
pVdbe
, 
OP_C⁄ãxtP›
, 0, 0);

758 
pP¨£
->
åigSèck
 =ÖP¨£->åigSèck->
pNext
;

760 
	`sqlôeFªe
(
pTriggîSèck
);

762 
	`sqlôeVdbeResﬁveLabñ
(
pP¨£
->
pVdbe
, 
ídTriggî
);

764 
pTriggî
 =ÖTriggî->
pNext
;

768 
	}
}

	@update.c

17 
	~"sqlôeI¡.h
"

26 
	$sqlôeUpd©e
(

27 
P¨£
 *
pP¨£
,

28 
SrcLi°
 *
pTabLi°
,

29 
Ex¥Li°
 *
pCh™ges
,

30 
Ex¥
 *
pWhîe
,

31 
⁄Eº‹


33 
i
, 
j
;

34 
TabÀ
 *
pTab
;

35 
lo›Sèπ
;

36 
jumpIn°
;

37 
WhîeInfo
 *
pWInfo
;

38 
Vdbe
 *
v
;

39 
Index
 *
pIdx
;

40 
nIdx
;

41 
nIdxTŸÆ
;

42 
iCur
;

43 
sqlôe
 *
db
;

44 
Index
 **
≠Idx
 = 0;

45 *
aIdxU£d
 = 0;

46 *
aXRef
 = 0;

49 
chngRe˙o
;

50 
Ex¥
 *
pRe˙oEx¥
;

51 
›íAŒ
;

52 
isVõw
;

53 
iSèckDïth
;

54 
AuthC⁄ãxt
 
sC⁄ãxt
;

56 
bef‹e_åiggîs
;

57 
a·î_åiggîs
;

58 
row_åiggîs_exi°
 = 0;

60 
√wIdx
 = -1;

61 
ﬁdIdx
 = -1;

63 
sC⁄ãxt
.
pP¨£
 = 0;

64 if–
pP¨£
->
nEº
 || 
sqlôe_mÆloc_Áûed
 ) 
upd©e_˛ónup
;

65 
db
 = 
pP¨£
->db;

66 
	`as£π
–
pTabLi°
->
nSrc
==1 );

67 
iSèckDïth
 = 
pP¨£
->
nMem
++;

71 
pTab
 = 
	`sqlôeSrcLi°Lookup
(
pP¨£
, 
pTabLi°
);

72 if–
pTab
==0 ) 
upd©e_˛ónup
;

73 
bef‹e_åiggîs
 = 
	`sqlôeTriggîsExi°
(
pP¨£
, 
pTab
->
pTriggî
,

74 
TK_UPDATE
, 
TK_BEFORE
, 
TK_ROW
, 
pCh™ges
);

75 
a·î_åiggîs
 = 
	`sqlôeTriggîsExi°
(
pP¨£
, 
pTab
->
pTriggî
,

76 
TK_UPDATE
, 
TK_AFTER
, 
TK_ROW
, 
pCh™ges
);

77 
row_åiggîs_exi°
 = 
bef‹e_åiggîs
 || 
a·î_åiggîs
;

78 
isVõw
 = 
pTab
->
pSñe˘
!=0;

79 if–
	`sqlôeIsRódO∆y
(
pP¨£
, 
pTab
, 
bef‹e_åiggîs
) ){

80 
upd©e_˛ónup
;

82 if–
isVõw
 ){

83 if–
	`sqlôeVõwGëCﬁumnNames
(
pP¨£
, 
pTab
) ){

84 
upd©e_˛ónup
;

87 
aXRef
 = 
	`sqlôeMÆloc
–(Ë* 
pTab
->
nCﬁ
 );

88 if–
aXRef
==0 ) 
upd©e_˛ónup
;

89 
i
=0; i<
pTab
->
nCﬁ
; i++Ë
aXRef
[i] = -1;

94 if–
row_åiggîs_exi°
 ){

95 
√wIdx
 = 
pP¨£
->
nTab
++;

96 
ﬁdIdx
 = 
pP¨£
->
nTab
++;

104 
pTabLi°
->
a
[0].
iCurs‹
 = 
iCur
 = 
pP¨£
->
nTab
++;

105 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

106 
pP¨£
->
nTab
++;

115 
chngRe˙o
 = 0;

116 
i
=0; i<
pCh™ges
->
nEx¥
; i++){

117 if–
	`sqlôeEx¥ResﬁveIds
(
pP¨£
, 
pTabLi°
, 0, 
pCh™ges
->
a
[
i
].
pEx¥
) ){

118 
upd©e_˛ónup
;

120 if–
	`sqlôeEx¥Check
(
pP¨£
, 
pCh™ges
->
a
[
i
].
pEx¥
, 0, 0) ){

121 
upd©e_˛ónup
;

123 
j
=0; j<
pTab
->
nCﬁ
; j++){

124 if–
	`sqlôeSåICmp
(
pTab
->
aCﬁ
[
j
].
zName
, 
pCh™ges
->
a
[
i
].zName)==0 ){

125 if–
j
==
pTab
->
iPKey
 ){

126 
chngRe˙o
 = 1;

127 
pRe˙oEx¥
 = 
pCh™ges
->
a
[
i
].
pEx¥
;

129 
aXRef
[
j
] = 
i
;

133 if–
j
>=
pTab
->
nCﬁ
 ){

134 if–
	`sqlôeIsRowid
(
pCh™ges
->
a
[
i
].
zName
) ){

135 
chngRe˙o
 = 1;

136 
pRe˙oEx¥
 = 
pCh™ges
->
a
[
i
].
pEx¥
;

138 
	`sqlôeEº‹Msg
(
pP¨£
, "nÿsuch cﬁumn: %s", 
pCh™ges
->
a
[
i
].
zName
);

139 
upd©e_˛ónup
;

142 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


144 
rc
;

148 if–
rc
==
SQLITE_DENY
 ){

149 
upd©e_˛ónup
;

150 }if–
rc
==
SQLITE_IGNORE
 ){

151 
aXRef
[
j
] = -1;

162 
nIdx
=
nIdxTŸÆ
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
,ÇIdxTotal++){

163 if–
chngRe˙o
 ){

164 
i
 = 0;

166 
i
=0; i<
pIdx
->
nCﬁumn
; i++){

167 if–
aXRef
[
pIdx
->
aiCﬁumn
[
i
]]>=0 ) ;

170 if–
i
<
pIdx
->
nCﬁumn
 ) 
nIdx
++;

172 if–
nIdxTŸÆ
>0 ){

173 
≠Idx
 = 
	`sqlôeMÆloc
–(
Index
*Ë* 
nIdx
 + 
nIdxTŸÆ
 );

174 if–
≠Idx
==0 ) 
upd©e_˛ónup
;

175 
aIdxU£d
 = (*)&
≠Idx
[
nIdx
];

177 
nIdx
=
j
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, j++){

178 if–
chngRe˙o
 ){

179 
i
 = 0;

181 
i
=0; i<
pIdx
->
nCﬁumn
; i++){

182 if–
aXRef
[
pIdx
->
aiCﬁumn
[
i
]]>=0 ) ;

185 if–
i
<
pIdx
->
nCﬁumn
 ){

186 
≠Idx
[
nIdx
++] = 
pIdx
;

187 
aIdxU£d
[
j
] = 1;

189 
aIdxU£d
[
j
] = 0;

196 if–
pWhîe
 ){

197 if–
	`sqlôeEx¥ResﬁveIds
(
pP¨£
, 
pTabLi°
, 0, 
pWhîe
) ){

198 
upd©e_˛ónup
;

200 if–
	`sqlôeEx¥Check
(
pP¨£
, 
pWhîe
, 0, 0) ){

201 
upd©e_˛ónup
;

207 if–
isVõw
 ){

213 
v
 = 
	`sqlôeGëVdbe
(
pP¨£
);

214 if–
v
==0 ) 
upd©e_˛ónup
;

215 
	`sqlôeBegöWrôeO≥øti⁄
(
pP¨£
, 1, 
pTab
->
iDb
);

220 if–
isVõw
 ){

221 
Sñe˘
 *
pVõw
;

222 
pVõw
 = 
	`sqlôeSñe˘Dup
(
pTab
->
pSñe˘
);

223 
	`sqlôeSñe˘
(
pP¨£
, 
pVõw
, 
SRT_TempTabÀ
, 
iCur
, 0, 0, 0);

224 
	`sqlôeSñe˘Dñëe
(
pVõw
);

229 
pWInfo
 = 
	`sqlôeWhîeBegö
(
pP¨£
, 
pTabLi°
, 
pWhîe
, 1, 0);

230 if–
pWInfo
==0 ) 
upd©e_˛ónup
;

234 
	`sqlôeVdbeAddOp
(
v
, 
OP_Li°Wrôe
, 0, 0);

238 
	`sqlôeWhîeEnd
(
pWInfo
);

242 if–
db
->
Êags
 & 
SQLITE_Cou¡Rows
 && !
pP¨£
->
åigSèck
 ){

243 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 0, 0);

246 if–
row_åiggîs_exi°
 ){

249 
	`sqlôeVdbeAddOp
(
v
, 
OP_O≥nP£udo
, 
ﬁdIdx
, 0);

250 
	`sqlôeVdbeAddOp
(
v
, 
OP_O≥nP£udo
, 
√wIdx
, 0);

254 
	`sqlôeVdbeAddOp
(
v
, 
OP_Li°Rewöd
, 0, 0);

255 
	`sqlôeVdbeAddOp
(
v
, 
OP_SèckDïth
, 0, 0);

256 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemSt‹e
, 
iSèckDïth
, 1);

257 
lo›Sèπ
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemLﬂd
, 
iSèckDïth
, 0);

258 
	`sqlôeVdbeAddOp
(
v
, 
OP_SèckRe£t
, 0, 0);

259 
jumpIn°
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_Li°Ród
, 0, 0);

260 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 0, 0);

265 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 0, 0);

266 if–!
isVõw
 ){

267 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
pTab
->
iDb
, 0);

268 
	`sqlôeVdbeAddOp
(
v
, 
OP_O≥nRód
, 
iCur
, 
pTab
->
äum
);

270 
	`sqlôeVdbeAddOp
(
v
, 
OP_MoveTo
, 
iCur
, 0);

274 
	`sqlôeVdbeAddOp
(
v
, 
OP_Re˙o
, 
iCur
, 0);

275 
	`sqlôeVdbeAddOp
(
v
, 
OP_RowD©a
, 
iCur
, 0);

276 
	`sqlôeVdbeAddOp
(
v
, 
OP_PutI¡Key
, 
ﬁdIdx
, 0);

280 if–
chngRe˙o
 ){

281 
	`sqlôeEx¥Code
(
pP¨£
, 
pRe˙oEx¥
);

283 
	`sqlôeVdbeAddOp
(
v
, 
OP_Re˙o
, 
iCur
, 0);

285 
i
=0; i<
pTab
->
nCﬁ
; i++){

286 if–
i
==
pTab
->
iPKey
 ){

287 
	`sqlôeVdbeAddOp
(
v
, 
OP_Såög
, 0, 0);

290 
j
 = 
aXRef
[
i
];

291 if–
j
<0 ){

292 
	`sqlôeVdbeAddOp
(
v
, 
OP_Cﬁumn
, 
iCur
, 
i
);

294 
	`sqlôeEx¥Code
(
pP¨£
, 
pCh™ges
->
a
[
j
].
pEx¥
);

297 
	`sqlôeVdbeAddOp
(
v
, 
OP_MakeRec‹d
, 
pTab
->
nCﬁ
, 0);

298 
	`sqlôeVdbeAddOp
(
v
, 
OP_PutI¡Key
, 
√wIdx
, 0);

299 if–!
isVõw
 ){

300 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
, 0);

305 if–
	`sqlôeCodeRowTriggî
(
pP¨£
, 
TK_UPDATE
, 
pCh™ges
, 
TK_BEFORE
, 
pTab
,

306 
√wIdx
, 
ﬁdIdx
, 
⁄Eº‹
, 
lo›Sèπ
) ){

307 
upd©e_˛ónup
;

311 if–!
isVõw
 ){

318 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
pTab
->
iDb
, 0);

319 
	`sqlôeVdbeAddOp
(
v
, 
OP_O≥nWrôe
, 
iCur
, 
pTab
->
äum
);

320 if–
⁄Eº‹
==
OE_Rïœ˚
 ){

321 
›íAŒ
 = 1;

323 
›íAŒ
 = 0;

324 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

325 if–
pIdx
->
⁄Eº‹
==
OE_Rïœ˚
 ){

326 
›íAŒ
 = 1;

331 
i
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, i++){

332 if–
›íAŒ
 || 
aIdxU£d
[
i
] ){

333 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
pIdx
->
iDb
, 0);

334 
	`sqlôeVdbeAddOp
(
v
, 
OP_O≥nWrôe
, 
iCur
+
i
+1, 
pIdx
->
äum
);

335 
	`as£π
–
pP¨£
->
nTab
>
iCur
+
i
+1 );

345 if–!
row_åiggîs_exi°
 ){

346 
	`sqlôeVdbeAddOp
(
v
, 
OP_Li°Rewöd
, 0, 0);

347 
jumpIn°
 = 
lo›Sèπ
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_Li°Ród
, 0, 0);

348 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 0, 0);

350 
	`sqlôeVdbeAddOp
(
v
, 
OP_NŸExi°s
, 
iCur
, 
lo›Sèπ
);

356 if–
chngRe˙o
 ){

357 
	`sqlôeEx¥Code
(
pP¨£
, 
pRe˙oEx¥
);

358 
	`sqlôeVdbeAddOp
(
v
, 
OP_Mu°BeI¡
, 0, 0);

363 
i
=0; i<
pTab
->
nCﬁ
; i++){

364 if–
i
==
pTab
->
iPKey
 ){

365 
	`sqlôeVdbeAddOp
(
v
, 
OP_Såög
, 0, 0);

368 
j
 = 
aXRef
[
i
];

369 if–
j
<0 ){

370 
	`sqlôeVdbeAddOp
(
v
, 
OP_Cﬁumn
, 
iCur
, 
i
);

372 
	`sqlôeEx¥Code
(
pP¨£
, 
pCh™ges
->
a
[
j
].
pEx¥
);

378 
	`sqlôeGíî©eC⁄°øötChecks
(
pP¨£
, 
pTab
, 
iCur
, 
aIdxU£d
, 
chngRe˙o
, 1,

379 
⁄Eº‹
, 
lo›Sèπ
);

383 
	`sqlôeGíî©eRowIndexDñëe
(
db
, 
v
, 
pTab
, 
iCur
, 
aIdxU£d
);

387 if–
chngRe˙o
 ){

388 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dñëe
, 
iCur
, 0);

393 
	`sqlôeCom∂ëeIn£πi⁄
(
pP¨£
, 
pTab
, 
iCur
, 
aIdxU£d
, 
chngRe˙o
, 1, -1);

398 if–
db
->
Êags
 & 
SQLITE_Cou¡Rows
 && !
pP¨£
->
åigSèck
){

399 
	`sqlôeVdbeAddOp
(
v
, 
OP_AddImm
, 1, 0);

405 if–
row_åiggîs_exi°
 ){

406 if–!
isVõw
 ){

407 
i
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, i++){

408 if–
›íAŒ
 || 
aIdxU£d
[
i
] )

409 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
+
i
+1, 0);

411 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
, 0);

412 
pP¨£
->
nTab
 = 
iCur
;

414 if–
	`sqlôeCodeRowTriggî
(
pP¨£
, 
TK_UPDATE
, 
pCh™ges
, 
TK_AFTER
, 
pTab
,

415 
√wIdx
, 
ﬁdIdx
, 
⁄Eº‹
, 
lo›Sèπ
) ){

416 
upd©e_˛ónup
;

423 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
lo›Sèπ
);

424 
	`sqlôeVdbeCh™geP2
(
v
, 
jumpIn°
, 
	`sqlôeVdbeCuºítAddr
(v));

425 
	`sqlôeVdbeAddOp
(
v
, 
OP_Li°Re£t
, 0, 0);

428 if–!
row_åiggîs_exi°
 ){

429 
i
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, i++){

430 if–
›íAŒ
 || 
aIdxU£d
[
i
] ){

431 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
+
i
+1, 0);

434 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
, 0);

435 
pP¨£
->
nTab
 = 
iCur
;

437 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
√wIdx
, 0);

438 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
ﬁdIdx
, 0);

441 
	`sqlôeVdbeAddOp
(
v
, 
OP_SëCou¡s
, 0, 0);

442 
	`sqlôeEndWrôeO≥øti⁄
(
pP¨£
);

447 if–
db
->
Êags
 & 
SQLITE_Cou¡Rows
 && !
pP¨£
->
åigSèck
 ){

448 
	`sqlôeVdbeOp3
(
v
, 
OP_CﬁumnName
, 0, 1, "row†upd©ed", 
P3_STATIC
);

449 
	`sqlôeVdbeAddOp
(
v
, 
OP_CÆlback
, 1, 0);

452 
upd©e_˛ónup
:

454 
	`sqlôeFªe
(
≠Idx
);

455 
	`sqlôeFªe
(
aXRef
);

456 
	`sqlôeSrcLi°Dñëe
(
pTabLi°
);

457 
	`sqlôeEx¥Li°Dñëe
(
pCh™ges
);

458 
	`sqlôeEx¥Dñëe
(
pWhîe
);

460 
	}
}

	@util.c

19 
	~"sqlôeI¡.h
"

20 
	~<°d¨g.h
>

21 
	~<˘y≥.h
>

27 
	gsqlôe_mÆloc_Áûed
 = 0;

33 #ifde‡
MEMORY_DEBUG


39 
	gsqlôe_nMÆloc
;

40 
	gsqlôe_nFªe
;

41 
	gsqlôe_iMÆlocFaû
;

42 #i‡
MEMORY_DEBUG
>1

43 
	gmem˙t
 = 0;

49 
	#N_GUARD
 1

	)

55 *
	$sqlôeMÆloc_
(
n
, 
bZîo
, *
zFûe
, 
löe
){

56 *
p
;

57 *
pi
;

58 
i
, 
k
;

59 if–
sqlôe_iMÆlocFaû
>=0 ){

60 
sqlôe_iMÆlocFaû
--;

61 if–
sqlôe_iMÆlocFaû
==0 ){

62 
sqlôe_mÆloc_Áûed
++;

63 #i‡
MEMORY_DEBUG
>1

64 
	`Ârötf
(
°dîr
,"**** failedÅoállocate %d bytesát %s:%d\n",

65 
n
, 
zFûe
,
löe
);

67 
sqlôe_iMÆlocFaû
--;

71 if–
n
==0 )  0;

72 
k
 = (
n
+()-1)/();

73 
pi
 = 
	`mÆloc
–(
N_GUARD
*2+1+
k
)*());

74 if–
pi
==0 ){

75 
sqlôe_mÆloc_Áûed
++;

78 
sqlôe_nMÆloc
++;

79 
i
=0; i<
N_GUARD
; i++Ë
pi
[i] = 0xdead1122;

80 
pi
[
N_GUARD
] = 
n
;

81 
i
=0; i<
N_GUARD
; i++Ë
pi
[
k
+1+N_GUARD+i] = 0xdead3344;

82 
p
 = &
pi
[
N_GUARD
+1];

83 
	`mem£t
(
p
, 
bZîo
==0, 
n
);

84 #i‡
MEMORY_DEBUG
>1

85 
	`Ârötf
(
°dîr
,"%06d malloc %d bytesát 0x%x from %s:%d\n",

86 ++
mem˙t
, 
n
, ()
p
, 
zFûe
,
löe
);

88  
p
;

89 
	}
}

98 
	$sqlôeCheckMem‹y
(*
p
, 
N
){

99 *
pi
 = 
p
;

100 
n
, 
i
, 
k
;

101 
pi
 -
N_GUARD
+1;

102 
i
=0; i<
N_GUARD
; i++){

103 
	`as£π
–
pi
[
i
]==0xdead1122 );

105 
n
 = 
pi
[
N_GUARD
];

106 
	`as£π
–
N
>=0 && N<
n
 );

107 
k
 = (
n
+()-1)/();

108 
i
=0; i<
N_GUARD
; i++){

109 
	`as£π
–
pi
[
k
+
N_GUARD
+1+
i
]==0xdead3344 );

111 
	}
}

116 
	$sqlôeFªe_
(*
p
, *
zFûe
, 
löe
){

117 if–
p
 ){

118 *
pi
, 
i
, 
k
, 
n
;

119 
pi
 = 
p
;

120 
pi
 -
N_GUARD
+1;

121 
sqlôe_nFªe
++;

122 
i
=0; i<
N_GUARD
; i++){

123 if–
pi
[
i
]!=0xdead1122 ){

124 
	`Ârötf
(
°dîr
,"Low-íd mem‹y c‹ru±i⁄áà0x%x\n", ()
p
);

128 
n
 = 
pi
[
N_GUARD
];

129 
k
 = (
n
+()-1)/();

130 
i
=0; i<
N_GUARD
; i++){

131 if–
pi
[
k
+
N_GUARD
+1+
i
]!=0xdead3344 ){

132 
	`Ârötf
(
°dîr
,"High-íd mem‹y c‹ru±i⁄áà0x%x\n", ()
p
);

136 
	`mem£t
(
pi
, 0xff, (
k
+
N_GUARD
*2+1)*());

137 #i‡
MEMORY_DEBUG
>1

138 
	`Ârötf
(
°dîr
,"%06d free %d bytesát 0x%x from %s:%d\n",

139 ++
mem˙t
, 
n
, ()
p
, 
zFûe
,
löe
);

141 
	`‰ì
(
pi
);

143 
	}
}

150 *
	$sqlôeRóŒoc_
(*
ﬁdP
, 
n
, *
zFûe
, 
löe
){

151 *
ﬁdPi
, *
pi
, 
i
, 
k
, 
ﬁdN
, 
ﬁdK
;

152 *
p
;

153 if–
ﬁdP
==0 ){

154  
	`sqlôeMÆloc_
(
n
,1,
zFûe
,
löe
);

156 if–
n
==0 ){

157 
	`sqlôeFªe_
(
ﬁdP
,
zFûe
,
löe
);

160 
ﬁdPi
 = 
ﬁdP
;

161 
ﬁdPi
 -
N_GUARD
+1;

162 if–
ﬁdPi
[0]!=0xdead1122 ){

163 
	`Ârötf
(
°dîr
,"Low-íd mem‹y c‹ru±i⁄ i¿ªÆlo¯© 0x%x\n", ()
ﬁdP
);

166 
ﬁdN
 = 
ﬁdPi
[
N_GUARD
];

167 
ﬁdK
 = (
ﬁdN
+()-1)/();

168 
i
=0; i<
N_GUARD
; i++){

169 if–
ﬁdPi
[
ﬁdK
+
N_GUARD
+1+
i
]!=0xdead3344 ){

170 
	`Ârötf
(
°dîr
,"High-end memory corruption inÑeallocát 0x%x\n",

171 ()
ﬁdP
);

175 
k
 = (
n
 + () - 1)/();

176 
pi
 = 
	`mÆloc
–(
k
+
N_GUARD
*2+1)*() );

177 if–
pi
==0 ){

178 
sqlôe_mÆloc_Áûed
++;

181 
i
=0; i<
N_GUARD
; i++Ë
pi
[i] = 0xdead1122;

182 
pi
[
N_GUARD
] = 
n
;

183 
i
=0; i<
N_GUARD
; i++Ë
pi
[
k
+N_GUARD+1+i] = 0xdead3344;

184 
p
 = &
pi
[
N_GUARD
+1];

185 
	`mem˝y
(
p
, 
ﬁdP
, 
n
>
ﬁdN
 ? oldN :Ç);

186 if–
n
>
ﬁdN
 ){

187 
	`mem£t
(&((*)
p
)[
ﬁdN
], 0, 
n
-oldN);

189 
	`mem£t
(
ﬁdPi
, 0xab, (
ﬁdK
+
N_GUARD
+2)*());

190 
	`‰ì
(
ﬁdPi
);

191 #i‡
MEMORY_DEBUG
>1

192 
	`Ârötf
(
°dîr
,"%06dÑealloc %dÅo %d bytesát 0x%xÅo 0x%xát %s:%d\n",

193 ++
mem˙t
, 
ﬁdN
, 
n
, ()
ﬁdP
, ()
p
, 
zFûe
, 
löe
);

195  
p
;

196 
	}
}

206 
	$sqlôeSåRóŒoc
(**
pz
){

207 *
zNew
;

208 if–
pz
==0 || *pz==0 ) ;

209 
zNew
 = 
	`mÆloc
–
	`°æí
(*
pz
) + 1 );

210 if–
zNew
==0 ){

211 
sqlôe_mÆloc_Áûed
++;

212 
	`sqlôeFªe
(*
pz
);

213 *
pz
 = 0;

215 
	`°r˝y
(
zNew
, *
pz
);

216 
	`sqlôeFªe
(*
pz
);

217 *
pz
 = 
zNew
;

218 
	}
}

223 *
	$sqlôeSåDup_
(c⁄° *
z
, *
zFûe
, 
löe
){

224 *
zNew
;

225 if–
z
==0 )  0;

226 
zNew
 = 
	`sqlôeMÆloc_
(
	`°æí
(
z
)+1, 0, 
zFûe
, 
löe
);

227 if–
zNew
 ) 
	`°r˝y
(zNew, 
z
);

228  
zNew
;

229 
	}
}

230 *
	$sqlôeSåNDup_
(c⁄° *
z
, 
n
, *
zFûe
, 
löe
){

231 *
zNew
;

232 if–
z
==0 )  0;

233 
zNew
 = 
	`sqlôeMÆloc_
(
n
+1, 0, 
zFûe
, 
löe
);

234 if–
zNew
 ){

235 
	`mem˝y
(
zNew
, 
z
, 
n
);

236 
zNew
[
n
] = 0;

238  
zNew
;

239 
	}
}

246 #i‡!
deföed
(
MEMORY_DEBUG
)

252 *
	$sqlôeMÆloc
(
n
){

253 *
p
;

254 if–(
p
 = 
	`mÆloc
(
n
))==0 ){

255 if–
n
>0 ) 
sqlôe_mÆloc_Áûed
++;

257 
	`mem£t
(
p
, 0, 
n
);

259  
p
;

260 
	}
}

266 *
	$sqlôeMÆlocRaw
(
n
){

267 *
p
;

268 if–(
p
 = 
	`mÆloc
(
n
))==0 ){

269 if–
n
>0 ) 
sqlôe_mÆloc_Áûed
++;

271  
p
;

272 
	}
}

277 
	$sqlôeFªe
(*
p
){

278 if–
p
 ){

279 
	`‰ì
(
p
);

281 
	}
}

288 *
	$sqlôeRóŒoc
(*
p
, 
n
){

289 *
p2
;

290 if–
p
==0 ){

291  
	`sqlôeMÆloc
(
n
);

293 if–
n
==0 ){

294 
	`sqlôeFªe
(
p
);

297 
p2
 = 
	`ªÆloc
(
p
, 
n
);

298 if–
p2
==0 ){

299 
sqlôe_mÆloc_Áûed
++;

301  
p2
;

302 
	}
}

307 *
	$sqlôeSåDup
(c⁄° *
z
){

308 *
zNew
;

309 if–
z
==0 )  0;

310 
zNew
 = 
	`sqlôeMÆlocRaw
(
	`°æí
(
z
)+1);

311 if–
zNew
 ) 
	`°r˝y
(zNew, 
z
);

312  
zNew
;

313 
	}
}

314 *
	$sqlôeSåNDup
(c⁄° *
z
, 
n
){

315 *
zNew
;

316 if–
z
==0 )  0;

317 
zNew
 = 
	`sqlôeMÆlocRaw
(
n
+1);

318 if–
zNew
 ){

319 
	`mem˝y
(
zNew
, 
z
, 
n
);

320 
zNew
[
n
] = 0;

322  
zNew
;

323 
	}
}

333 
	$sqlôeSëSåög
(**
pz
, ...){

334 
va_li°
 
≠
;

335 
nByã
;

336 c⁄° *
z
;

337 *
zResu…
;

339 if–
pz
==0 ) ;

340 
nByã
 = 1;

341 
	`va_°¨t
(
≠
, 
pz
);

342  (
z
 = 
	`va_¨g
(
≠
, const *))!=0 ){

343 
nByã
 +
	`°æí
(
z
);

345 
	`va_íd
(
≠
);

346 
	`sqlôeFªe
(*
pz
);

347 *
pz
 = 
zResu…
 = 
	`sqlôeMÆlocRaw
–
nByã
 );

348 if–
zResu…
==0 ){

351 *
zResu…
 = 0;

352 
	`va_°¨t
(
≠
, 
pz
);

353  (
z
 = 
	`va_¨g
(
≠
, const *))!=0 ){

354 
	`°r˝y
(
zResu…
, 
z
);

355 
zResu…
 +
	`°æí
(zResult);

357 
	`va_íd
(
≠
);

358 #ifde‡
MEMORY_DEBUG


359 #i‡
MEMORY_DEBUG
>1

360 
	`Ârötf
(
°dîr
,"°rögáà0x%x i†%s\n", ()*
pz
, *pz);

363 
	}
}

372 
	$sqlôeSëNSåög
(**
pz
, ...){

373 
va_li°
 
≠
;

374 
nByã
;

375 c⁄° *
z
;

376 *
zResu…
;

377 
n
;

379 if–
pz
==0 ) ;

380 
nByã
 = 0;

381 
	`va_°¨t
(
≠
, 
pz
);

382  (
z
 = 
	`va_¨g
(
≠
, const *))!=0 ){

383 
n
 = 
	`va_¨g
(
≠
, );

384 if–
n
<=0 )Ç = 
	`°æí
(
z
);

385 
nByã
 +
n
;

387 
	`va_íd
(
≠
);

388 
	`sqlôeFªe
(*
pz
);

389 *
pz
 = 
zResu…
 = 
	`sqlôeMÆlocRaw
–
nByã
 + 1 );

390 if–
zResu…
==0 ) ;

391 
	`va_°¨t
(
≠
, 
pz
);

392  (
z
 = 
	`va_¨g
(
≠
, const *))!=0 ){

393 
n
 = 
	`va_¨g
(
≠
, );

394 if–
n
<=0 )Ç = 
	`°æí
(
z
);

395 
	`°∫˝y
(
zResu…
, 
z
, 
n
);

396 
zResu…
 +
n
;

398 *
zResu…
 = 0;

399 #ifde‡
MEMORY_DEBUG


400 #i‡
MEMORY_DEBUG
>1

401 
	`Ârötf
(
°dîr
,"°rögáà0x%x i†%s\n", ()*
pz
, *pz);

404 
	`va_íd
(
≠
);

405 
	}
}

417 
	$sqlôeEº‹Msg
(
P¨£
 *
pP¨£
, c⁄° *
zF‹m©
, ...){

418 
va_li°
 
≠
;

419 
pP¨£
->
nEº
++;

420 
	`sqlôeFªe
(
pP¨£
->
zEºMsg
);

421 
	`va_°¨t
(
≠
, 
zF‹m©
);

422 
pP¨£
->
zEºMsg
 = 
	`sqlôeVMPrötf
(
zF‹m©
, 
≠
);

423 
	`va_íd
(
≠
);

424 
	}
}

436 
	$sqlôeDequŸe
(*
z
){

437 
quŸe
;

438 
i
, 
j
;

439 if–
z
==0 ) ;

440 
quŸe
 = 
z
[0];

441  
quŸe
 ){

444 '[': 
quŸe
 = ']'; ;

447 
i
=1, 
j
=0; 
z
[i]; i++){

448 if–
z
[
i
]==
quŸe
 ){

449 if–
z
[
i
+1]==
quŸe
 ){

450 
z
[
j
++] = 
quŸe
;

451 
i
++;

453 
z
[
j
++] = 0;

457 
z
[
j
++] = z[
i
];

460 
	}
}

465 
	gUµîToLowî
[] = {

487 
	$sqlôeHashNoCa£
(c⁄° *
z
, 
n
){

488 
h
 = 0;

489 if–
n
<=0 )Ç = 
	`°æí
(
z
);

490  
n
 > 0 ){

491 
h
 = (h<<3Ë^ h ^ 
UµîToLowî
[()*
z
++];

492 
n
--;

494  
h
 & 0x7fffffff;

495 
	}
}

501 
	$sqlôeSåICmp
(c⁄° *
zLe·
, c⁄° *
zRight
){

502 *
a
, *
b
;

503 
a
 = (*)
zLe·
;

504 
b
 = (*)
zRight
;

505  *
a
!=0 && 
UµîToLowî
[*a]==UµîToLowî[*
b
]){á++; b++; }

506  
UµîToLowî
[*
a
] - UµîToLowî[*
b
];

507 
	}
}

508 
	$sqlôeSåNICmp
(c⁄° *
zLe·
, c⁄° *
zRight
, 
N
){

509 *
a
, *
b
;

510 
a
 = (*)
zLe·
;

511 
b
 = (*)
zRight
;

512  
N
-- > 0 && *
a
!=0 && 
UµîToLowî
[*a]==UµîToLowî[*
b
]){á++; b++; }

513  
N
<0 ? 0 : 
UµîToLowî
[*
a
] - UµîToLowî[*
b
];

514 
	}
}

522 
	$sqlôeIsNumbî
(c⁄° *
z
){

523 if–*
z
=='-' || *z=='+' ) z++;

524 if–!
	`isdigô
(*
z
) ){

527 
z
++;

528  
	`isdigô
(*
z
) ){ z++; }

529 if–*
z
=='.' ){

530 
z
++;

531 if–!
	`isdigô
(*
z
) )  0;

532  
	`isdigô
(*
z
) ){ z++; }

534 if–*
z
=='e' || *z=='E' ){

535 
z
++;

536 if–*
z
=='+' || *z=='-' ) z++;

537 if–!
	`isdigô
(*
z
) )  0;

538  
	`isdigô
(*
z
) ){ z++; }

540  *
z
==0;

541 
	}
}

555 
	$sqlôeAtoF
(c⁄° *
z
, c⁄° **
pzEnd
){

556 
sign
 = 1;

557 
LONGDOUBLE_TYPE
 
v1
 = 0.0;

558 if–*
z
=='-' ){

559 
sign
 = -1;

560 
z
++;

561 }if–*
z
=='+' ){

562 
z
++;

564  
	`isdigô
(*
z
) ){

565 
v1
 = v1*10.0 + (*
z
 - '0');

566 
z
++;

568 if–*
z
=='.' ){

569 
LONGDOUBLE_TYPE
 
divis‹
 = 1.0;

570 
z
++;

571  
	`isdigô
(*
z
) ){

572 
v1
 = v1*10.0 + (*
z
 - '0');

573 
divis‹
 *= 10.0;

574 
z
++;

576 
v1
 /
divis‹
;

578 if–*
z
=='e' || *z=='E' ){

579 
esign
 = 1;

580 
evÆ
 = 0;

581 
LONGDOUBLE_TYPE
 
sˇÀ
 = 1.0;

582 
z
++;

583 if–*
z
=='-' ){

584 
esign
 = -1;

585 
z
++;

586 }if–*
z
=='+' ){

587 
z
++;

589  
	`isdigô
(*
z
) ){

590 
evÆ
 =ÉvÆ*10 + *
z
 - '0';

591 
z
++;

593  
evÆ
>=64 ){ 
sˇÀ
 *= 1.0e+64;Éval -= 64; }

594  
evÆ
>=16 ){ 
sˇÀ
 *= 1.0e+16;Éval -= 16; }

595  
evÆ
>=4 ){ 
sˇÀ
 *= 1.0e+4;Éval -= 4; }

596  
evÆ
>=1 ){ 
sˇÀ
 *= 1.0e+1;Éval -= 1; }

597 if–
esign
<0 ){

598 
v1
 /
sˇÀ
;

600 
v1
 *
sˇÀ
;

603 if–
pzEnd
 ) *pzEnd = 
z
;

604  
sign
<0 ? -
v1
 : v1;

605 
	}
}

618 
	$sqlôeFôsIn32Bôs
(c⁄° *
zNum
){

619 
i
, 
c
;

620 if–*
zNum
=='-' || *zNum=='+' ) zNum++;

621 
i
=0; (
c
=
zNum
[i])>='0' && c<='9'; i++){}

622  
i
<10 || (i==10 && 
	`memcmp
(
zNum
,"2147483647",10)<=0);

623 
	}
}

638 
	$sqlôeCom∑ª
(c⁄° *
©ext
, c⁄° *
bãxt
){

639 
ªsu…
;

640 
isNumA
, 
isNumB
;

641 if–
©ext
==0 ){

643 }if–
bãxt
==0 ){

646 
isNumA
 = 
	`sqlôeIsNumbî
(
©ext
);

647 
isNumB
 = 
	`sqlôeIsNumbî
(
bãxt
);

648 if–
isNumA
 ){

649 if–!
isNumB
 ){

650 
ªsu…
 = -1;

652 
rA
, 
rB
;

653 
rA
 = 
	`sqlôeAtoF
(
©ext
, 0);

654 
rB
 = 
	`sqlôeAtoF
(
bãxt
, 0);

655 if–
rA
<
rB
 ){

656 
ªsu…
 = -1;

657 }if–
rA
>
rB
 ){

658 
ªsu…
 = +1;

660 
ªsu…
 = 0;

663 }if–
isNumB
 ){

664 
ªsu…
 = +1;

666 
ªsu…
 = 
	`°rcmp
(
©ext
, 
bãxt
);

668  
ªsu…
;

669 
	}
}

712 
	$sqlôeS‹tCom∑ª
(c⁄° *
a
, c⁄° *
b
){

713 
ªs
 = 0;

714 
isNumA
, 
isNumB
;

715 
dú
 = 0;

717  
ªs
==0 && *
a
 && *
b
 ){

718 if–
a
[0]=='N' || 
b
[0]=='N' ){

719 if–
a
[0]==
b
[0] ){

720 
a
 += 2;

721 
b
 += 2;

724 if–
a
[0]=='N' ){

725 
dú
 = 
b
[0];

726 
ªs
 = -1;

728 
dú
 = 
a
[0];

729 
ªs
 = +1;

733 
	`as£π
–
a
[0]==
b
[0] );

734 if–(
dú
=
a
[0])=='A' ||á[0]=='D' ){

735 
ªs
 = 
	`°rcmp
(&
a
[1],&
b
[1]);

736 if–
ªs
 ) ;

738 
isNumA
 = 
	`sqlôeIsNumbî
(&
a
[1]);

739 
isNumB
 = 
	`sqlôeIsNumbî
(&
b
[1]);

740 if–
isNumA
 ){

741 
rA
, 
rB
;

742 if–!
isNumB
 ){

743 
ªs
 = -1;

746 
rA
 = 
	`sqlôeAtoF
(&
a
[1], 0);

747 
rB
 = 
	`sqlôeAtoF
(&
b
[1], 0);

748 if–
rA
<
rB
 ){

749 
ªs
 = -1;

752 if–
rA
>
rB
 ){

753 
ªs
 = +1;

756 }if–
isNumB
 ){

757 
ªs
 = +1;

760 
ªs
 = 
	`°rcmp
(&
a
[1],&
b
[1]);

761 if–
ªs
 ) ;

764 
a
 +
	`°æí
(&a[1]) + 2;

765 
b
 +
	`°æí
(&b[1]) + 2;

767 if–
dú
=='-' || dú=='D' ) 
ªs
 = -res;

768  
ªs
;

769 
	}
}

775 
	#_64e3
 (64.0 * 64.0 * 64.0)

	)

776 
	#_64e4
 (64.0 * 64.0 * 64.0 * 64.0)

	)

777 
	#_64e15
 (
_64e3
 * 
_64e4
 * _64e4 * _64e4)

	)

778 
	#_64e16
 (
_64e4
 * _64e4 * _64e4 * _64e4)

	)

779 
	#_64e63
 (
_64e15
 * 
_64e16
 * _64e16 * _64e16)

	)

780 
	#_64e64
 (
_64e16
 * _64e16 * _64e16 * _64e16)

	)

797 
	$sqlôeRólToS‹èbÀ
(
r
, *
z
){

798 
√g
;

799 
exp
;

800 
˙t
 = 0;

805 c⁄° 
zDigô
[] =

810 if–
r
<0.0 ){

811 
√g
 = 1;

812 
r
 = -r;

813 *
z
++ = '-';

815 
√g
 = 0;

816 *
z
++ = '0';

818 
exp
 = 0;

820 if–
r
==0.0 ){

821 
exp
 = -1024;

822 }if–
r
<(0.5/64.0) ){

823  
r
 < 0.5/
_64e64
 && 
exp
 > -961 ){Ñ *= _64e64;Éxp -= 64; }

824  
r
 < 0.5/
_64e16
 && 
exp
 > -1009 ){Ñ *= _64e16;Éxp -= 16; }

825  
r
 < 0.5/
_64e4
 && 
exp
 > -1021 ){Ñ *= _64e4;Éxp -= 4; }

826  
r
 < 0.5/64.0 && 
exp
 > -1024 ){Ñ *= 64.0;Éxp -= 1; }

827 }if–
r
>=0.5 ){

828  
r
 >0.5*
_64e63
 && 
exp
 < 960 ){Ñ *1.0/
_64e64
;Éxp += 64; }

829  
r
 >0.5*
_64e15
 && 
exp
 < 1008 ){Ñ *1.0/
_64e16
;Éxp += 16; }

830  
r
 >0.5*
_64e3
 && 
exp
 < 1020 ){Ñ *1.0/
_64e4
;Éxp += 4; }

831  
r
 >0.5 && 
exp
 < 1023 ){Ñ *= 1.0/64.0;Éxp += 1; }

833 if–
√g
 ){

834 
exp
 = -exp;

835 
r
 = -r;

837 
exp
 += 1024;

838 
r
 += 0.5;

839 if–
exp
<0 ) ;

840 if–
exp
>=2048 || 
r
>=1.0 ){

841 
	`°r˝y
(
z
, "~~~~~~~~~~~~");

844 *
z
++ = 
zDigô
[(
exp
>>6)&0x3f];

845 *
z
++ = 
zDigô
[
exp
 & 0x3f];

846  
r
>0.0 && 
˙t
<10 ){

847 
digô
;

848 
r
 *= 64.0;

849 
digô
 = ()
r
;

850 
	`as£π
–
digô
>=0 && digit<64 );

851 *
z
++ = 
zDigô
[
digô
 & 0x3f];

852 
r
 -
digô
;

853 
˙t
++;

855 *
z
 = 0;

856 
	}
}

858 #ifde‡
SQLITE_UTF8


864 
	#sqlôeNextCh¨
(
X
Ë (0xc0&*++(X))==0x80 ){}

	)

865 
	#sqlôeCh¨VÆ
(
X
Ë
	`sqlôe_utf8_to_öt
(X)

	)

871 
	#sqlôeNextCh¨
(
X
Ë(++(X));

	)

872 
	#sqlôeCh¨VÆ
(
X
Ë(()*(X))

	)

877 #ifde‡
SQLITE_UTF8


883 
	$sqlôe_utf8_to_öt
(c⁄° *
z
){

884 
c
;

885 c⁄° 
öôVÆ
[] = {

905 
c
 = 
öôVÆ
[*(
z
++)];

906  (0xc0&*
z
)==0x80 ){

907 
c
 = (c<<6Ë| (0x3f&*(
z
++));

909  
c
;

910 
	}
}

942 
	$sqlôeGlobCom∑ª
(c⁄° *
zP©ã∫
, c⁄° *
zSåög
){

943 
c
;

944 
övît
;

945 
£í
;

946 
c2
;

948  (
c
 = *
zP©ã∫
)!=0 ){

949  
c
 ){

951  (
c
=
zP©ã∫
[1]) == '*' || c == '?' ){

952 if–
c
=='?' ){

953 if–*
zSåög
==0 )  0;

954 
	`sqlôeNextCh¨
(
zSåög
);

956 
zP©ã∫
++;

958 if–
c
==0 )  1;

959 if–
c
=='[' ){

960  *
zSåög
 && 
	`sqlôeGlobCom∑ª
(&
zP©ã∫
[1],zString)==0 ){

961 
	`sqlôeNextCh¨
(
zSåög
);

963  *
zSåög
!=0;

965  (
c2
 = *
zSåög
)!=0 ){

966  
c2
 !0 && c2 !
c
 ){ c2 = *++
zSåög
; }

967 if–
c2
==0 )  0;

968 if–
	`sqlôeGlobCom∑ª
(&
zP©ã∫
[1],
zSåög
) )  1;

969 
	`sqlôeNextCh¨
(
zSåög
);

974 if–*
zSåög
==0 )  0;

975 
	`sqlôeNextCh¨
(
zSåög
);

976 
zP©ã∫
++;

980 
¥i‹_c
 = 0;

981 
£í
 = 0;

982 
övît
 = 0;

983 
c
 = 
	`sqlôeCh¨VÆ
(
zSåög
);

984 if–
c
==0 )  0;

985 
c2
 = *++
zP©ã∫
;

986 if–
c2
=='^' ){ 
övît
 = 1; c2 = *++
zP©ã∫
; }

987 if–
c2
==']' ){

988 if–
c
==']' ) 
£í
 = 1;

989 
c2
 = *++
zP©ã∫
;

991  (
c2
 = 
	`sqlôeCh¨VÆ
(
zP©ã∫
))!=0 && c2!=']' ){

992 if–
c2
=='-' && 
zP©ã∫
[1]!=']' && zP©ã∫[1]!=0 && 
¥i‹_c
>0 ){

993 
zP©ã∫
++;

994 
c2
 = 
	`sqlôeCh¨VÆ
(
zP©ã∫
);

995 if–
c
>=
¥i‹_c
 && c<=
c2
 ) 
£í
 = 1;

996 
¥i‹_c
 = 0;

997 }if–
c
==
c2
 ){

998 
£í
 = 1;

999 
¥i‹_c
 = 
c2
;

1001 
¥i‹_c
 = 
c2
;

1003 
	`sqlôeNextCh¨
(
zP©ã∫
);

1005 if–
c2
==0 || (
£í
 ^ 
övît
)==0 )  0;

1006 
	`sqlôeNextCh¨
(
zSåög
);

1007 
zP©ã∫
++;

1011 if–
c
 !*
zSåög
 )  0;

1012 
zP©ã∫
++;

1013 
zSåög
++;

1018  *
zSåög
==0;

1019 
	}
}

1031 
	$sqlôeLikeCom∑ª
(c⁄° *
zP©ã∫
, c⁄° *
zSåög
){

1032 
c
;

1033 
c2
;

1035  (
c
 = 
UµîToLowî
[*
zP©ã∫
])!=0 ){

1036  
c
 ){

1038  (
c
=
zP©ã∫
[1]) == '%' || c == '_' ){

1039 if–
c
=='_' ){

1040 if–*
zSåög
==0 )  0;

1041 
	`sqlôeNextCh¨
(
zSåög
);

1043 
zP©ã∫
++;

1045 if–
c
==0 )  1;

1046 
c
 = 
UµîToLowî
[c];

1047  (
c2
=
UµîToLowî
[*
zSåög
])!=0 ){

1048  
c2
 !0 && c2 !
c
 ){ c2 = 
UµîToLowî
[*++
zSåög
]; }

1049 if–
c2
==0 )  0;

1050 if–
	`sqlôeLikeCom∑ª
(&
zP©ã∫
[1],
zSåög
) )  1;

1051 
	`sqlôeNextCh¨
(
zSåög
);

1056 if–*
zSåög
==0 )  0;

1057 
	`sqlôeNextCh¨
(
zSåög
);

1058 
zP©ã∫
++;

1062 if–
c
 !
UµîToLowî
[*
zSåög
] )  0;

1063 
zP©ã∫
++;

1064 
zSåög
++;

1069  *
zSåög
==0;

1070 
	}
}

1090 
	$sqlôeSa„tyOn
(
sqlôe
 *
db
){

1091 if–
db
->
magic
==
SQLITE_MAGIC_OPEN
 ){

1092 
db
->
magic
 = 
SQLITE_MAGIC_BUSY
;

1094 }if–
db
->
magic
==
SQLITE_MAGIC_BUSY
 || db->magic==
SQLITE_MAGIC_ERROR


1095 || 
db
->
w™t_to_˛o£
 ){

1096 
db
->
magic
 = 
SQLITE_MAGIC_ERROR
;

1097 
db
->
Êags
 |
SQLITE_I¡îru±
;

1100 
	}
}

1107 
	$sqlôeSa„tyOff
(
sqlôe
 *
db
){

1108 if–
db
->
magic
==
SQLITE_MAGIC_BUSY
 ){

1109 
db
->
magic
 = 
SQLITE_MAGIC_OPEN
;

1111 }if–
db
->
magic
==
SQLITE_MAGIC_OPEN
 || db->magic==
SQLITE_MAGIC_ERROR


1112 || 
db
->
w™t_to_˛o£
 ){

1113 
db
->
magic
 = 
SQLITE_MAGIC_ERROR
;

1114 
db
->
Êags
 |
SQLITE_I¡îru±
;

1117 
	}
}

1128 
	$sqlôeSa„tyCheck
(
sqlôe
 *
db
){

1129 if–
db
->
pVdbe
!=0 ){

1130 
db
->
magic
 = 
SQLITE_MAGIC_ERROR
;

1134 
	}
}

	@vdbe.c

48 
	~"sqlôeI¡.h
"

49 
	~"os.h
"

50 
	~<˘y≥.h
>

51 
	~"vdbeI¡.h
"

60 
	gsqlôe_£¨ch_cou¡
 = 0;

70 
	gsqlôe_öãºu±_cou¡
 = 0;

107 
	$sqlôe_°ï
(

108 
sqlôe_vm
 *
pVm
,

109 *
pN
,

110 c⁄° ***
∑zVÆue
,

111 c⁄° ***
∑zCﬁName


113 
Vdbe
 *
p
 = (Vdbe*)
pVm
;

114 
sqlôe
 *
db
;

115 
rc
;

117 if–
p
->
magic
!=
VDBE_MAGIC_RUN
 ){

118  
SQLITE_MISUSE
;

120 
db
 = 
p
->db;

121 if–
	`sqlôeSa„tyOn
(
db
) ){

122 
p
->
rc
 = 
SQLITE_MISUSE
;

123  
SQLITE_MISUSE
;

125 if–
p
->
ex∂aö
 ){

126 
rc
 = 
	`sqlôeVdbeLi°
(
p
);

128 
rc
 = 
	`sqlôeVdbeExec
(
p
);

130 if–
rc
==
SQLITE_DONE
 ||Ñc==
SQLITE_ROW
 ){

131 if–
∑zCﬁName
 ) *∑zCﬁNamê(c⁄° **)
p
->
azCﬁName
;

132 if–
pN
 ) *pN = 
p
->
nResCﬁumn
;

134 if–
∑zCﬁName
) *pazColName = 0;

135 if–
pN
 ) *pN = 0;

137 if–
∑zVÆue
 ){

138 if–
rc
==
SQLITE_ROW
 ){

139 *
∑zVÆue
 = (c⁄° **)
p
->
azResCﬁumn
;

141 *
∑zVÆue
 = 0;

144 if–
	`sqlôeSa„tyOff
(
db
) ){

145  
SQLITE_MISUSE
;

147  
rc
;

148 
	}
}

156 
	$AggIn£π
(
Agg
 *
p
, *
zKey
, 
nKey
){

157 
AggEÀm
 *
pEÀm
, *
pOld
;

158 
i
;

159 
Mem
 *
pMem
;

160 
pEÀm
 = 
	`sqlôeMÆloc
–(
AggEÀm
Ë+ 
nKey
 +

161 (
p
->
nMem
-1)*(
pEÀm
->
aMem
[0]) );

162 if–
pEÀm
==0 )  1;

163 
pEÀm
->
zKey
 = (*)&pEÀm->
aMem
[
p
->
nMem
];

164 
	`mem˝y
(
pEÀm
->
zKey
, zKey, 
nKey
);

165 
pEÀm
->
nKey
 =ÇKey;

166 
pOld
 = 
	`sqlôeHashIn£π
(&
p
->
hash
, 
pEÀm
->
zKey
,ÖEÀm->
nKey
,ÖElem);

167 if–
pOld
!=0 ){

168 
	`as£π
–
pOld
==
pEÀm
 );

169 
	`sqlôeFªe
(
pOld
);

172 
i
=0, 
pMem
=
pEÀm
->
aMem
; i<
p
->
nMem
; i++,ÖMem++){

173 
pMem
->
Êags
 = 
MEM_NuŒ
;

175 
p
->
pCuºít
 = 
pEÀm
;

177 
	}
}

182 
	#AggInFocus
(
P
Ë((P).
pCuºít
 ? (P).pCuºíà: 
	`_AggInFocus
(&(P)))

	)

183 
AggEÀm
 *
	$_AggInFocus
(
Agg
 *
p
){

184 
HashEÀm
 *
pEÀm
 = 
	`sqlôeHashFú°
(&
p
->
hash
);

185 if–
pEÀm
==0 ){

186 
	`AggIn£π
(
p
,"",1);

187 
pEÀm
 = 
	`sqlôeHashFú°
(&
p
->
hash
);

189  
pEÀm
 ? 
	`sqlôeHashD©a
(pElem) : 0;

190 
	}
}

196 
	#Såögify
(
P
Ëif(((P)->
Êags
 & 
MEM_Så
)==0){
	`h¨dSåögify
(P);}

	)

197 
	$h¨dSåögify
(
Mem
 *
pSèck
){

198 
fg
 = 
pSèck
->
Êags
;

199 if–
fg
 & 
MEM_Ról
 ){

200 
	`sqlôe_¢¥ötf
((
pSèck
->
zSh‹t
),pSèck->zSh‹t,"%.15g",pSèck->
r
);

201 }if–
fg
 & 
MEM_I¡
 ){

202 
	`sqlôe_¢¥ötf
((
pSèck
->
zSh‹t
),pSèck->zSh‹t,"%d",pSèck->
i
);

204 
pSèck
->
zSh‹t
[0] = 0;

206 
pSèck
->
z
 =ÖSèck->
zSh‹t
;

207 
pSèck
->
n
 = 
	`°æí
’Sèck->
zSh‹t
)+1;

208 
pSèck
->
Êags
 = 
MEM_Så
 | 
MEM_Sh‹t
;

210 
	}
}

219 
	#Dy«micify
(
P
Ë(((P)->
Êags
 & 
MEM_Dyn
)==0 ? 
	`h¨dDy«micify
(P):0)

	)

220 
	$h¨dDy«micify
(
Mem
 *
pSèck
){

221 
fg
 = 
pSèck
->
Êags
;

222 *
z
;

223 if–(
fg
 & 
MEM_Så
)==0 ){

224 
	`h¨dSåögify
(
pSèck
);

226 
	`as£π
–(
fg
 & 
MEM_Dyn
)==0 );

227 
z
 = 
	`sqlôeMÆlocRaw
–
pSèck
->
n
 );

228 if–
z
==0 )  1;

229 
	`mem˝y
(
z
, 
pSèck
->z,ÖSèck->
n
);

230 
pSèck
->
z
 = z;

231 
pSèck
->
Êags
 |
MEM_Dyn
;

233 
	}
}

246 
	#DìphemîÆize
(
P
) \

247 if–((
P
)->
Êags
&
MEM_Ephem
)!=0 && 
	`h¨dDìphem
(PË){ 
no_mem
;}

	)

248 
	$h¨dDìphem
(
Mem
 *
pSèck
){

249 *
z
;

250 
	`as£π
–(
pSèck
->
Êags
 & 
MEM_Ephem
)!=0 );

251 
z
 = 
	`sqlôeMÆlocRaw
–
pSèck
->
n
 );

252 if–
z
==0 )  1;

253 
	`mem˝y
(
z
, 
pSèck
->z,ÖSèck->
n
);

254 
pSèck
->
z
 = z;

255 
pSèck
->
Êags
 &~
MEM_Ephem
;

256 
pSèck
->
Êags
 |
MEM_Dyn
;

258 
	}
}

264 
	#Rñó£
(
P
Ëif((P)->
Êags
&
MEM_Dyn
){ 
	`sqlôeFªe
((P)->
z
); }

	)

269 
	$p›Sèck
(
Mem
 **
µTos
, 
N
){

270 
Mem
 *
pTos
 = *
µTos
;

271  
N
>0 ){

272 
N
--;

273 
	`Rñó£
(
pTos
);

274 
pTos
--;

276 *
µTos
 = 
pTos
;

277 
	}
}

288 
	$toI¡
(c⁄° *
zNum
, *
pNum
){

289 
v
 = 0;

290 
√g
;

291 
i
, 
c
;

292 if–*
zNum
=='-' ){

293 
√g
 = 1;

294 
zNum
++;

295 }if–*
zNum
=='+' ){

296 
√g
 = 0;

297 
zNum
++;

299 
√g
 = 0;

301 
i
=0; (
c
=
zNum
[i])>='0' && c<='9'; i++){

302 
v
 = v*10 + 
c
 - '0';

304 *
pNum
 = 
√g
 ? -
v
 : v;

305  
c
==0 && 
i
>0 && (i<10 || (i==10 && 
	`memcmp
(
zNum
,"2147483647",10)<=0));

306 
	}
}

315 
	#I¡egîify
(
P
Ëif(((P)->
Êags
&
MEM_I¡
)==0){ 
	`h¨dI¡egîify
(P); }

	)

316 
	$h¨dI¡egîify
(
Mem
 *
pSèck
){

317 if–
pSèck
->
Êags
 & 
MEM_Ról
 ){

318 
pSèck
->
i
 = (ÌSèck->
r
;

319 
	`Rñó£
(
pSèck
);

320 }if–
pSèck
->
Êags
 & 
MEM_Så
 ){

321 
	`toI¡
(
pSèck
->
z
, &pSèck->
i
);

322 
	`Rñó£
(
pSèck
);

324 
pSèck
->
i
 = 0;

326 
pSèck
->
Êags
 = 
MEM_I¡
;

327 
	}
}

335 
	#Rólify
(
P
Ëif(((P)->
Êags
&
MEM_Ról
)==0){ 
	`h¨dRólify
(P); }

	)

336 
	$h¨dRólify
(
Mem
 *
pSèck
){

337 if–
pSèck
->
Êags
 & 
MEM_Så
 ){

338 
pSèck
->
r
 = 
	`sqlôeAtoF
’Sèck->
z
, 0);

339 }if–
pSèck
->
Êags
 & 
MEM_I¡
 ){

340 
pSèck
->
r
 =ÖSèck->
i
;

342 
pSèck
->
r
 = 0.0;

344 
pSèck
->
Êags
 |
MEM_Ról
;

345 
	}
}

355 
S‹ãr
 *
	$Mîge
(
S‹ãr
 *
pLe·
, S‹ã∏*
pRight
){

356 
S‹ãr
 
sHód
;

357 
S‹ãr
 *
pTaû
;

358 
pTaû
 = &
sHód
;

359 
pTaû
->
pNext
 = 0;

360  
pLe·
 && 
pRight
 ){

361 
c
 = 
	`sqlôeS‹tCom∑ª
(
pLe·
->
zKey
, 
pRight
->zKey);

362 if–
c
<=0 ){

363 
pTaû
->
pNext
 = 
pLe·
;

364 
pLe·
 =ÖLe·->
pNext
;

366 
pTaû
->
pNext
 = 
pRight
;

367 
pRight
 =ÖRight->
pNext
;

369 
pTaû
 =ÖTaû->
pNext
;

371 if–
pLe·
 ){

372 
pTaû
->
pNext
 = 
pLe·
;

373 }if–
pRight
 ){

374 
pTaû
->
pNext
 = 
pRight
;

376  
sHód
.
pNext
;

377 
	}
}

387 *
	$vdbe_fgës
(*
zBuf
, 
nBuf
, 
FILE
 *
ö
){

388 
i
, 
c
;

389 
i
=0; i<
nBuf
-1 && (
c
=
	`gëc
(
ö
))!=
EOF
; i++){

390 
zBuf
[
i
] = 
c
;

391 if–
c
=='\r' || c=='\n' ){

392 if–
c
=='\r' ){

393 
zBuf
[
i
] = '\n';

394 
c
 = 
	`gëc
(
ö
);

395 if–
c
!=
EOF
 && c!='\n' ) 
	`ungëc
(c, 
ö
);

397 
i
++;

401 
zBuf
[
i
] = 0;

402  
i
>0 ? 
zBuf
 : 0;

403 
	}
}

413 
	$ex∑ndCurs‹AºaySize
(
Vdbe
 *
p
, 
mxCurs‹
){

414 if–
mxCurs‹
>=
p
->
nCurs‹
 ){

415 
Curs‹
 *
aC§
 = 
	`sqlôeRóŒoc
–
p
->aC§, (
mxCurs‹
+1)*(Cursor) );

416 if–
aC§
==0 )  1;

417 
p
->
aC§
 =áCsr;

418 
	`mem£t
(&
p
->
aC§
[p->
nCurs‹
], 0, (
Curs‹
)*(
mxCurs‹
+1-p->nCursor));

419 
p
->
nCurs‹
 = 
mxCurs‹
+1;

422 
	}
}

424 #ifde‡
VDBE_PROFILE


431 
__ölöe__
 
	$hwtime
(){

432 
x
;

433 
	`__asm__
("rdtsc\n\t"

435 :"=A" (
x
));

436  
x
;

437 
	}
}

450 
	#CHECK_FOR_INTERRUPT
 \

451 if–
db
->
Êags
 & 
SQLITE_I¡îru±
 ) 
ab‹t_due_to_öãºu±
;

	)

485 
	$sqlôeVdbeExec
(

486 
Vdbe
 *
p


488 
pc
;

489 
Op
 *
pOp
;

490 
rc
 = 
SQLITE_OK
;

491 
sqlôe
 *
db
 = 
p
->db;

492 
Mem
 *
pTos
;

493 
zBuf
[100];

494 #ifde‡
VDBE_PROFILE


495 
°¨t
;

496 
‹igPc
;

498 #i‚de‡
SQLITE_OMIT_PROGRESS_CALLBACK


499 
nProgªssOps
 = 0;

502 if–
p
->
magic
!=
VDBE_MAGIC_RUN
 )  
SQLITE_MISUSE
;

503 
	`as£π
–
db
->
magic
==
SQLITE_MAGIC_BUSY
 );

504 
	`as£π
–
p
->
rc
==
SQLITE_OK
 ||Ö->rc==
SQLITE_BUSY
 );

505 
p
->
rc
 = 
SQLITE_OK
;

506 
	`as£π
–
p
->
ex∂aö
==0 );

507 if–
sqlôe_mÆloc_Áûed
 ) 
no_mem
;

508 
pTos
 = 
p
->pTos;

509 if–
p
->
p›Sèck
 ){

510 
	`p›Sèck
(&
pTos
, 
p
->
p›Sèck
);

511 
p
->
p›Sèck
 = 0;

513 
CHECK_FOR_INTERRUPT
;

514 
pc
=
p
->pc; 
rc
==
SQLITE_OK
;Öc++){

515 
	`as£π
–
pc
>=0 &&Öc<
p
->
nOp
 );

516 
	`as£π
–
pTos
<=&
p
->
aSèck
[
pc
] );

517 #ifde‡
VDBE_PROFILE


518 
‹igPc
 = 
pc
;

519 
°¨t
 = 
	`hwtime
();

521 
pOp
 = &
p
->
aOp
[
pc
];

525 #i‚de‡
NDEBUG


526 if–
p
->
åa˚
 ){

527 
	`sqlôeVdbePrötOp
(
p
->
åa˚
, 
pc
, 
pOp
);

534 #ifde‡
SQLITE_TEST


535 if–
sqlôe_öãºu±_cou¡
>0 ){

536 
sqlôe_öãºu±_cou¡
--;

537 if–
sqlôe_öãºu±_cou¡
==0 ){

538 
	`sqlôe_öãºu±
(
db
);

543 #i‚de‡
SQLITE_OMIT_PROGRESS_CALLBACK


550 if–
db
->
xProgªss
 ){

551 if–
db
->
nProgªssOps
==nProgressOps ){

552 if–
db
->
	`xProgªss
(db->
pProgªssArg
)!=0 ){

553 
rc
 = 
SQLITE_ABORT
;

556 
nProgªssOps
 = 0;

558 
nProgªssOps
++;

562  
pOp
->
›code
 ){

599 
OP_GŸo
: {

600 
CHECK_FOR_INTERRUPT
;

601 
pc
 = 
pOp
->
p2
 - 1;

615 
OP_Gosub
: {

616 if–
p
->
ªtu∫Dïth
>=’->
ªtu∫Sèck
)/(p->returnStack[0]) ){

617 
	`sqlôeSëSåög
(&
p
->
zEºMsg
, "returnáddress stack overflow", (*)0);

618 
p
->
rc
 = 
SQLITE_INTERNAL
;

619  
SQLITE_ERROR
;

621 
p
->
ªtu∫Sèck
[p->
ªtu∫Dïth
++] = 
pc
+1;

622 
pc
 = 
pOp
->
p2
 - 1;

632 
OP_Rëu∫
: {

633 if–
p
->
ªtu∫Dïth
<=0 ){

634 
	`sqlôeSëSåög
(&
p
->
zEºMsg
, "returnáddress stack underflow", (*)0);

635 
p
->
rc
 = 
SQLITE_INTERNAL
;

636  
SQLITE_ERROR
;

638 
p
->
ªtu∫Dïth
--;

639 
pc
 = 
p
->
ªtu∫Sèck
[p->
ªtu∫Dïth
] - 1;

660 
OP_HÆt
: {

661 
p
->
magic
 = 
VDBE_MAGIC_HALT
;

662 
p
->
pTos
 =ÖTos;

663 if–
pOp
->
p1
!=
SQLITE_OK
 ){

664 
p
->
rc
 = 
pOp
->
p1
;

665 
p
->
îr‹A˘i⁄
 = 
pOp
->
p2
;

666 if–
pOp
->
p3
 ){

667 
	`sqlôeSëSåög
(&
p
->
zEºMsg
, 
pOp
->
p3
, (*)0);

669  
SQLITE_ERROR
;

671 
p
->
rc
 = 
SQLITE_OK
;

672  
SQLITE_DONE
;

681 
OP_I¡egî
: {

682 
pTos
++;

683 
pTos
->
i
 = 
pOp
->
p1
;

684 
pTos
->
Êags
 = 
MEM_I¡
;

685 if–
pOp
->
p3
 ){

686 
pTos
->
z
 = 
pOp
->
p3
;

687 
pTos
->
Êags
 |
MEM_Så
 | 
MEM_Sètic
;

688 
pTos
->
n
 = 
	`°æí
(
pOp
->
p3
)+1;

698 
OP_Såög
: {

699 *
z
 = 
pOp
->
p3
;

700 
pTos
++;

701 if–
z
==0 ){

702 
pTos
->
Êags
 = 
MEM_NuŒ
;

704 
pTos
->
z
 = z;

705 
pTos
->
n
 = 
	`°æí
(
z
) + 1;

706 
pTos
->
Êags
 = 
MEM_Så
 | 
MEM_Sètic
;

720 
OP_V¨übÀ
: {

721 
j
 = 
pOp
->
p1
 - 1;

722 
pTos
++;

723 if–
j
>=0 && j<
p
->
nV¨
 &&Ö->
azV¨
[j]!=0 ){

724 
pTos
->
z
 = 
p
->
azV¨
[
j
];

725 
pTos
->
n
 = 
p
->
™V¨
[
j
];

726 
pTos
->
Êags
 = 
MEM_Så
 | 
MEM_Sètic
;

728 
pTos
->
Êags
 = 
MEM_NuŒ
;

737 
OP_P›
: {

738 
	`as£π
–
pOp
->
p1
>=0 );

739 
	`p›Sèck
(&
pTos
, 
pOp
->
p1
);

740 
	`as£π
–
pTos
>=&
p
->
aSèck
[-1] );

759 
OP_Dup
: {

760 
Mem
 *
pFrom
 = &
pTos
[-
pOp
->
p1
];

761 
	`as£π
–
pFrom
<=
pTos
 &&ÖFrom>=
p
->
aSèck
 );

762 
pTos
++;

763 
	`mem˝y
(
pTos
, 
pFrom
, (*pFrom)-
NBFS
);

764 if–
pTos
->
Êags
 & 
MEM_Så
 ){

765 if–
pOp
->
p2
 && (
pTos
->
Êags
 & (
MEM_Dyn
|
MEM_Ephem
)) ){

766 
pTos
->
Êags
 &~
MEM_Dyn
;

767 
pTos
->
Êags
 |
MEM_Ephem
;

768 }if–
pTos
->
Êags
 & 
MEM_Sh‹t
 ){

769 
	`mem˝y
(
pTos
->
zSh‹t
, 
pFrom
->zSh‹t,ÖTos->
n
);

770 
pTos
->
z
 =ÖTos->
zSh‹t
;

771 }if–(
pTos
->
Êags
 & 
MEM_Sètic
)==0 ){

772 
pTos
->
z
 = 
	`sqlôeMÆlocRaw
(
pFrom
->
n
);

773 if–
sqlôe_mÆloc_Áûed
 ) 
no_mem
;

774 
	`mem˝y
(
pTos
->
z
, 
pFrom
->z,ÖFrom->
n
);

775 
pTos
->
Êags
 &~(
MEM_Sètic
|
MEM_Ephem
|
MEM_Sh‹t
);

776 
pTos
->
Êags
 |
MEM_Dyn
;

792 
OP_PuŒ
: {

793 
Mem
 *
pFrom
 = &
pTos
[-
pOp
->
p1
];

794 
i
;

795 
Mem
 
ts
;

797 
ts
 = *
pFrom
;

798 
	`DìphemîÆize
(
pTos
);

799 
i
=0; i<
pOp
->
p1
; i++, 
pFrom
++){

800 
	`DìphemîÆize
(&
pFrom
[1]);

801 *
pFrom
 =ÖFrom[1];

802 
	`as£π
–(
pFrom
->
Êags
 & 
MEM_Ephem
)==0 );

803 if–
pFrom
->
Êags
 & 
MEM_Sh‹t
 ){

804 
	`as£π
–
pFrom
->
Êags
 & 
MEM_Så
 );

805 
	`as£π
–
pFrom
->
z
=ıFrom[1].
zSh‹t
 );

806 
pFrom
->
z
 =ÖFrom->
zSh‹t
;

809 *
pTos
 = 
ts
;

810 if–
pTos
->
Êags
 & 
MEM_Sh‹t
 ){

811 
	`as£π
–
pTos
->
Êags
 & 
MEM_Så
 );

812 
	`as£π
–
pTos
->
z
=ıTos[-
pOp
->
p1
].
zSh‹t
 );

813 
pTos
->
z
 =ÖTos->
zSh‹t
;

824 
OP_Push
: {

825 
Mem
 *
pTo
 = &
pTos
[-
pOp
->
p1
];

827 
	`as£π
–
pTo
>=
p
->
aSèck
 );

828 
	`DìphemîÆize
(
pTos
);

829 
	`Rñó£
(
pTo
);

830 *
pTo
 = *
pTos
;

831 if–
pTo
->
Êags
 & 
MEM_Sh‹t
 ){

832 
	`as£π
–
pTo
->
z
==
pTos
->
zSh‹t
 );

833 
pTo
->
z
 =ÖTo->
zSh‹t
;

835 
pTos
--;

850 
OP_CﬁumnName
: {

851 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nOp
 );

852 
p
->
azCﬁName
[
pOp
->
p1
] =ÖOp->
p3
;

853 
p
->
nCÆlback
 = 0;

854 if–
pOp
->
p2
 ) 
p
->
nResCﬁumn
 =ÖOp->
p1
+1;

864 
OP_CÆlback
: {

865 
i
;

866 **
azArgv
 = 
p
->
zArgv
;

867 
Mem
 *
pCﬁ
;

869 
pCﬁ
 = &
pTos
[1-
pOp
->
p1
];

870 
	`as£π
–
pCﬁ
>=
p
->
aSèck
 );

871 
i
=0; i<
pOp
->
p1
; i++, 
pCﬁ
++){

872 if–
pCﬁ
->
Êags
 & 
MEM_NuŒ
 ){

873 
azArgv
[
i
] = 0;

875 
	`Såögify
(
pCﬁ
);

876 
azArgv
[
i
] = 
pCﬁ
->
z
;

879 
azArgv
[
i
] = 0;

880 
p
->
nCÆlback
++;

881 
p
->
azResCﬁumn
 = 
azArgv
;

882 
	`as£π
–
p
->
nResCﬁumn
==
pOp
->
p1
 );

883 
p
->
p›Sèck
 = 
pOp
->
p1
;

884 
p
->
pc
 =Öc + 1;

885 
p
->
pTos
 =ÖTos;

886  
SQLITE_ROW
;

901 
OP_C⁄ˇt
: {

902 *
zNew
;

903 
nByã
;

904 
nFõld
;

905 
i
, 
j
;

906 *
zSï
;

907 
nSï
;

908 
Mem
 *
pTîm
;

910 
nFõld
 = 
pOp
->
p1
;

911 
zSï
 = 
pOp
->
p3
;

912 if–
zSï
==0 ) zSep = "";

913 
nSï
 = 
	`°æí
(
zSï
);

914 
	`as£π
–&
pTos
[1-
nFõld
] >
p
->
aSèck
 );

915 
nByã
 = 1 - 
nSï
;

916 
pTîm
 = &
pTos
[1-
nFõld
];

917 
i
=0; i<
nFõld
; i++, 
pTîm
++){

918 if–
pTîm
->
Êags
 & 
MEM_NuŒ
 ){

919 
nByã
 = -1;

922 
	`Såögify
(
pTîm
);

923 
nByã
 +
pTîm
->
n
 - 1 + 
nSï
;

926 if–
nByã
<0 ){

927 if–
pOp
->
p2
==0 ){

928 
	`p›Sèck
(&
pTos
, 
nFõld
);

930 
pTos
++;

931 
pTos
->
Êags
 = 
MEM_NuŒ
;

934 
zNew
 = 
	`sqlôeMÆlocRaw
–
nByã
 );

935 if–
zNew
==0 ) 
no_mem
;

936 
j
 = 0;

937 
pTîm
 = &
pTos
[1-
nFõld
];

938 
i
=
j
=0; i<
nFõld
; i++, 
pTîm
++){

939 
	`as£π
–
pTîm
->
Êags
 & 
MEM_Så
 );

940 
	`mem˝y
(&
zNew
[
j
], 
pTîm
->
z
,ÖTîm->
n
-1);

941 
j
 +
pTîm
->
n
-1;

942 if–
nSï
>0 && 
i
<
nFõld
-1 ){

943 
	`mem˝y
(&
zNew
[
j
], 
zSï
, 
nSï
);

944 
j
 +
nSï
;

947 
zNew
[
j
] = 0;

948 if–
pOp
->
p2
==0 ){

949 
	`p›Sèck
(&
pTos
, 
nFõld
);

951 
pTos
++;

952 
pTos
->
n
 = 
nByã
;

953 
pTos
->
Êags
 = 
MEM_Så
|
MEM_Dyn
;

954 
pTos
->
z
 = 
zNew
;

1004 
OP_Add
:

1005 
OP_Subåa˘
:

1006 
OP_Mu…ùly
:

1007 
OP_Divide
:

1008 
OP_Remaödî
: {

1009 
Mem
 *
pNos
 = &
pTos
[-1];

1010 
	`as£π
–
pNos
>=
p
->
aSèck
 );

1011 if–((
pTos
->
Êags
 | 
pNos
->ÊagsË& 
MEM_NuŒ
)!=0 ){

1012 
	`Rñó£
(
pTos
);

1013 
pTos
--;

1014 
	`Rñó£
(
pTos
);

1015 
pTos
->
Êags
 = 
MEM_NuŒ
;

1016 }if–(
pTos
->
Êags
 & 
pNos
->Êag†& 
MEM_I¡
)==MEM_Int ){

1017 
a
, 
b
;

1018 
a
 = 
pTos
->
i
;

1019 
b
 = 
pNos
->
i
;

1020  
pOp
->
›code
 ){

1021 
OP_Add
: 
b
 +
a
; ;

1022 
OP_Subåa˘
: 
b
 -
a
; ;

1023 
OP_Mu…ùly
: 
b
 *
a
; ;

1024 
OP_Divide
: {

1025 if–
a
==0 ) 
divide_by_zîo
;

1026 
b
 /
a
;

1030 if–
a
==0 ) 
divide_by_zîo
;

1031 
b
 %
a
;

1035 
	`Rñó£
(
pTos
);

1036 
pTos
--;

1037 
	`Rñó£
(
pTos
);

1038 
pTos
->
i
 = 
b
;

1039 
pTos
->
Êags
 = 
MEM_I¡
;

1041 
a
, 
b
;

1042 
	`Rólify
(
pTos
);

1043 
	`Rólify
(
pNos
);

1044 
a
 = 
pTos
->
r
;

1045 
b
 = 
pNos
->
r
;

1046  
pOp
->
›code
 ){

1047 
OP_Add
: 
b
 +
a
; ;

1048 
OP_Subåa˘
: 
b
 -
a
; ;

1049 
OP_Mu…ùly
: 
b
 *
a
; ;

1050 
OP_Divide
: {

1051 if–
a
==0.0 ) 
divide_by_zîo
;

1052 
b
 /
a
;

1056 
ü
 = ()
a
;

1057 
ib
 = ()
b
;

1058 if–
ü
==0.0 ) 
divide_by_zîo
;

1059 
b
 = 
ib
 % 
ü
;

1063 
	`Rñó£
(
pTos
);

1064 
pTos
--;

1065 
	`Rñó£
(
pTos
);

1066 
pTos
->
r
 = 
b
;

1067 
pTos
->
Êags
 = 
MEM_Ról
;

1071 
divide_by_zîo
:

1072 
	`Rñó£
(
pTos
);

1073 
pTos
--;

1074 
	`Rñó£
(
pTos
);

1075 
pTos
->
Êags
 = 
MEM_NuŒ
;

1087 
OP_Fun˘i⁄
: {

1088 
n
, 
i
;

1089 
Mem
 *
pArg
;

1090 **
azArgv
;

1091 
sqlôe_func
 
˘x
;

1093 
n
 = 
pOp
->
p1
;

1094 
pArg
 = &
pTos
[1-
n
];

1095 
azArgv
 = 
p
->
zArgv
;

1096 
i
=0; i<
n
; i++, 
pArg
++){

1097 if–
pArg
->
Êags
 & 
MEM_NuŒ
 ){

1098 
azArgv
[
i
] = 0;

1100 
	`Såögify
(
pArg
);

1101 
azArgv
[
i
] = 
pArg
->
z
;

1104 
˘x
.
pFunc
 = (
FuncDef
*)
pOp
->
p3
;

1105 
˘x
.
s
.
Êags
 = 
MEM_NuŒ
;

1106 
˘x
.
s
.
z
 = 0;

1107 
˘x
.
isEº‹
 = 0;

1108 
˘x
.
isSãp
 = 0;

1109 if–
	`sqlôeSa„tyOff
(
db
ËË
ab‹t_due_to_misu£
;

1110 (*
˘x
.
pFunc
->
xFunc
)(&˘x, 
n
, (c⁄° **)
azArgv
);

1111 if–
	`sqlôeSa„tyOn
(
db
ËË
ab‹t_due_to_misu£
;

1112 
	`p›Sèck
(&
pTos
, 
n
);

1113 
pTos
++;

1114 *
pTos
 = 
˘x
.
s
;

1115 if–
pTos
->
Êags
 & 
MEM_Sh‹t
 ){

1116 
pTos
->
z
 =ÖTos->
zSh‹t
;

1118 if–
˘x
.
isEº‹
 ){

1119 
	`sqlôeSëSåög
(&
p
->
zEºMsg
,

1120 (
pTos
->
Êags
 & 
MEM_Så
)!=0 ?ÖTos->
z
 : "user functionÉrror", (*)0);

1121 
rc
 = 
SQLITE_ERROR
;

1154 
OP_BôAnd
:

1155 
OP_BôOr
:

1156 
OP_Shi·Le·
:

1157 
OP_Shi·Right
: {

1158 
Mem
 *
pNos
 = &
pTos
[-1];

1159 
a
, 
b
;

1161 
	`as£π
–
pNos
>=
p
->
aSèck
 );

1162 if–(
pTos
->
Êags
 | 
pNos
->ÊagsË& 
MEM_NuŒ
 ){

1163 
	`p›Sèck
(&
pTos
, 2);

1164 
pTos
++;

1165 
pTos
->
Êags
 = 
MEM_NuŒ
;

1168 
	`I¡egîify
(
pTos
);

1169 
	`I¡egîify
(
pNos
);

1170 
a
 = 
pTos
->
i
;

1171 
b
 = 
pNos
->
i
;

1172  
pOp
->
›code
 ){

1173 
OP_BôAnd
: 
a
 &
b
; ;

1174 
OP_BôOr
: 
a
 |
b
; ;

1175 
OP_Shi·Le·
: 
a
 <<
b
; ;

1176 
OP_Shi·Right
: 
a
 >>
b
; ;

1179 
	`as£π
–(
pTos
->
Êags
 & 
MEM_Dyn
)==0 );

1180 
	`as£π
–(
pNos
->
Êags
 & 
MEM_Dyn
)==0 );

1181 
pTos
--;

1182 
	`Rñó£
(
pTos
);

1183 
pTos
->
i
 = 
a
;

1184 
pTos
->
Êags
 = 
MEM_I¡
;

1195 
OP_AddImm
: {

1196 
	`as£π
–
pTos
>=
p
->
aSèck
 );

1197 
	`I¡egîify
(
pTos
);

1198 
pTos
->
i
 +
pOp
->
p1
;

1212 
OP_F‹˚I¡
: {

1213 
v
;

1214 
	`as£π
–
pTos
>=
p
->
aSèck
 );

1215 if–(
pTos
->
Êags
 & (
MEM_I¡
|
MEM_Ról
))==0

1216 && ((
pTos
->
Êags
 & 
MEM_Så
)==0 || 
	`sqlôeIsNumbî
’Tos->
z
)==0) ){

1217 
	`Rñó£
(
pTos
);

1218 
pTos
--;

1219 
pc
 = 
pOp
->
p2
 - 1;

1222 if–
pTos
->
Êags
 & 
MEM_I¡
 ){

1223 
v
 = 
pTos
->
i
 + (
pOp
->
p1
!=0);

1225 
	`Rólify
(
pTos
);

1226 
v
 = ()
pTos
->
r
;

1227 if–
pTos
->
r
>()
v
 ) v++;

1228 if–
pOp
->
p1
 && 
pTos
->
r
==()
v
 ) v++;

1230 
	`Rñó£
(
pTos
);

1231 
pTos
->
i
 = 
v
;

1232 
pTos
->
Êags
 = 
MEM_I¡
;

1247 
OP_Mu°BeI¡
: {

1248 
	`as£π
–
pTos
>=
p
->
aSèck
 );

1249 if–
pTos
->
Êags
 & 
MEM_I¡
 ){

1251 }if–
pTos
->
Êags
 & 
MEM_Ról
 ){

1252 
i
 = ()
pTos
->
r
;

1253 
r
 = ()
i
;

1254 if–
r
!=
pTos
->r ){

1255 
mism©ch
;

1257 
pTos
->
i
 = i;

1258 }if–
pTos
->
Êags
 & 
MEM_Så
 ){

1259 
v
;

1260 if–!
	`toI¡
(
pTos
->
z
, &
v
) ){

1261 
r
;

1262 if–!
	`sqlôeIsNumbî
(
pTos
->
z
) ){

1263 
mism©ch
;

1265 
	`Rólify
(
pTos
);

1266 
v
 = ()
pTos
->
r
;

1267 
r
 = ()
v
;

1268 if–
r
!=
pTos
->r ){

1269 
mism©ch
;

1272 
pTos
->
i
 = 
v
;

1274 
mism©ch
;

1276 
	`Rñó£
(
pTos
);

1277 
pTos
->
Êags
 = 
MEM_I¡
;

1280 
mism©ch
:

1281 if–
pOp
->
p2
==0 ){

1282 
rc
 = 
SQLITE_MISMATCH
;

1283 
ab‹t_due_to_îr‹
;

1285 if–
pOp
->
p1
 ) 
	`p›Sèck
(&
pTos
, 1);

1286 
pc
 = 
pOp
->
p2
 - 1;

1402 
OP_Eq
:

1403 
OP_Ne
:

1404 
OP_Lt
:

1405 
OP_Le
:

1406 
OP_Gt
:

1407 
OP_Ge
: {

1408 
Mem
 *
pNos
 = &
pTos
[-1];

1409 
c
, 
v
;

1410 
·
, 
‚
;

1411 
	`as£π
–
pNos
>=
p
->
aSèck
 );

1412 
·
 = 
pTos
->
Êags
;

1413 
‚
 = 
pNos
->
Êags
;

1414 if–(
·
 | 
‚
Ë& 
MEM_NuŒ
 ){

1415 
	`p›Sèck
(&
pTos
, 2);

1416 if–
pOp
->
p2
 ){

1417 if–
pOp
->
p1
 ) 
pc
 =ÖOp->
p2
-1;

1419 
pTos
++;

1420 
pTos
->
Êags
 = 
MEM_NuŒ
;

1423 }if–(
·
 & 
‚
 & 
MEM_I¡
)==MEM_Int ){

1424 
c
 = 
pNos
->
i
 - 
pTos
->i;

1425 }if–(
·
 & 
MEM_I¡
)!=0 && (
‚
 & 
MEM_Så
)!=0 && 
	`toI¡
(
pNos
->
z
,&
v
) ){

1426 
c
 = 
v
 - 
pTos
->
i
;

1427 }if–(
‚
 & 
MEM_I¡
)!=0 && (
·
 & 
MEM_Så
)!=0 && 
	`toI¡
(
pTos
->
z
,&
v
) ){

1428 
c
 = 
pNos
->
i
 - 
v
;

1430 
	`Såögify
(
pTos
);

1431 
	`Såögify
(
pNos
);

1432 
c
 = 
	`sqlôeCom∑ª
(
pNos
->
z
, 
pTos
->z);

1434  
pOp
->
›code
 ){

1435 
OP_Eq
: 
c
 = c==0; ;

1436 
OP_Ne
: 
c
 = c!=0; ;

1437 
OP_Lt
: 
c
 = c<0; ;

1438 
OP_Le
: 
c
 = c<=0; ;

1439 
OP_Gt
: 
c
 = c>0; ;

1440 : 
c
 = c>=0; ;

1442 
	`p›Sèck
(&
pTos
, 2);

1443 if–
pOp
->
p2
 ){

1444 if–
c
 ) 
pc
 = 
pOp
->
p2
-1;

1446 
pTos
++;

1447 
pTos
->
i
 = 
c
;

1448 
pTos
->
Êags
 = 
MEM_I¡
;

1559 
OP_SåEq
:

1560 
OP_SåNe
:

1561 
OP_SåLt
:

1562 
OP_SåLe
:

1563 
OP_SåGt
:

1564 
OP_SåGe
: {

1565 
Mem
 *
pNos
 = &
pTos
[-1];

1566 
c
;

1567 
	`as£π
–
pNos
>=
p
->
aSèck
 );

1568 if–(
pNos
->
Êags
 | 
pTos
->ÊagsË& 
MEM_NuŒ
 ){

1569 
	`p›Sèck
(&
pTos
, 2);

1570 if–
pOp
->
p2
 ){

1571 if–
pOp
->
p1
 ) 
pc
 =ÖOp->
p2
-1;

1573 
pTos
++;

1574 
pTos
->
Êags
 = 
MEM_NuŒ
;

1578 
	`Såögify
(
pTos
);

1579 
	`Såögify
(
pNos
);

1580 
c
 = 
	`°rcmp
(
pNos
->
z
, 
pTos
->z);

1587  
pOp
->
›code
 ){

1588 
OP_SåEq
: 
c
 = c==0; 
	`as£π
–
pOp
->
›code
-6==
OP_Eq
 ); ;

1589 
OP_SåNe
: 
c
 = c!=0; 
	`as£π
–
pOp
->
›code
-6==
OP_Ne
 ); ;

1590 
OP_SåLt
: 
c
 = c<0; 
	`as£π
–
pOp
->
›code
-6==
OP_Lt
 ); ;

1591 
OP_SåLe
: 
c
 = c<=0; 
	`as£π
–
pOp
->
›code
-6==
OP_Le
 ); ;

1592 
OP_SåGt
: 
c
 = c>0; 
	`as£π
–
pOp
->
›code
-6==
OP_Gt
 ); ;

1593 : 
c
 = c>=0; 
	`as£π
–
pOp
->
›code
-6==
OP_Ge
 ); ;

1595 
	`p›Sèck
(&
pTos
, 2);

1596 if–
pOp
->
p2
 ){

1597 if–
c
 ) 
pc
 = 
pOp
->
p2
-1;

1599 
pTos
++;

1600 
pTos
->
Êags
 = 
MEM_I¡
;

1601 
pTos
->
i
 = 
c
;

1618 
OP_And
:

1619 
OP_Or
: {

1620 
Mem
 *
pNos
 = &
pTos
[-1];

1621 
v1
, 
v2
;

1623 
	`as£π
–
pNos
>=
p
->
aSèck
 );

1624 if–
pTos
->
Êags
 & 
MEM_NuŒ
 ){

1625 
v1
 = 2;

1627 
	`I¡egîify
(
pTos
);

1628 
v1
 = 
pTos
->
i
==0;

1630 if–
pNos
->
Êags
 & 
MEM_NuŒ
 ){

1631 
v2
 = 2;

1633 
	`I¡egîify
(
pNos
);

1634 
v2
 = 
pNos
->
i
==0;

1636 if–
pOp
->
›code
==
OP_And
 ){

1637 c⁄° 
™d_logic
[] = { 0, 1, 2, 1, 1, 1, 2, 1, 2 };

1638 
v1
 = 
™d_logic
[v1*3+
v2
];

1640 c⁄° 
‹_logic
[] = { 0, 0, 0, 0, 1, 2, 0, 2, 2 };

1641 
v1
 = 
‹_logic
[v1*3+
v2
];

1643 
	`p›Sèck
(&
pTos
, 2);

1644 
pTos
++;

1645 if–
v1
==2 ){

1646 
pTos
->
Êags
 = 
MEM_NuŒ
;

1648 
pTos
->
i
 = 
v1
==0;

1649 
pTos
->
Êags
 = 
MEM_I¡
;

1666 
OP_Neg©ive
:

1667 
OP_AbsVÆue
: {

1668 
	`as£π
–
pTos
>=
p
->
aSèck
 );

1669 if–
pTos
->
Êags
 & 
MEM_Ról
 ){

1670 
	`Rñó£
(
pTos
);

1671 if–
pOp
->
›code
==
OP_Neg©ive
 || 
pTos
->
r
<0.0 ){

1672 
pTos
->
r
 = -pTos->r;

1674 
pTos
->
Êags
 = 
MEM_Ról
;

1675 }if–
pTos
->
Êags
 & 
MEM_I¡
 ){

1676 
	`Rñó£
(
pTos
);

1677 if–
pOp
->
›code
==
OP_Neg©ive
 || 
pTos
->
i
<0 ){

1678 
pTos
->
i
 = -pTos->i;

1680 
pTos
->
Êags
 = 
MEM_I¡
;

1681 }if–
pTos
->
Êags
 & 
MEM_NuŒ
 ){

1684 
	`Rólify
(
pTos
);

1685 
	`Rñó£
(
pTos
);

1686 if–
pOp
->
›code
==
OP_Neg©ive
 || 
pTos
->
r
<0.0 ){

1687 
pTos
->
r
 = -pTos->r;

1689 
pTos
->
Êags
 = 
MEM_Ról
;

1700 
OP_NŸ
: {

1701 
	`as£π
–
pTos
>=
p
->
aSèck
 );

1702 if–
pTos
->
Êags
 & 
MEM_NuŒ
 ) ;

1703 
	`I¡egîify
(
pTos
);

1704 
	`Rñó£
(
pTos
);

1705 
pTos
->
i
 = !pTos->i;

1706 
pTos
->
Êags
 = 
MEM_I¡
;

1716 
OP_BôNŸ
: {

1717 
	`as£π
–
pTos
>=
p
->
aSèck
 );

1718 if–
pTos
->
Êags
 & 
MEM_NuŒ
 ) ;

1719 
	`I¡egîify
(
pTos
);

1720 
	`Rñó£
(
pTos
);

1721 
pTos
->
i
 = ~pTos->i;

1722 
pTos
->
Êags
 = 
MEM_I¡
;

1731 
OP_No›
: {

1755 
OP_If
:

1756 
OP_IfNŸ
: {

1757 
c
;

1758 
	`as£π
–
pTos
>=
p
->
aSèck
 );

1759 if–
pTos
->
Êags
 & 
MEM_NuŒ
 ){

1760 
c
 = 
pOp
->
p1
;

1762 
	`I¡egîify
(
pTos
);

1763 
c
 = 
pTos
->
i
;

1764 if–
pOp
->
›code
==
OP_IfNŸ
 ) 
c
 = !c;

1766 
	`as£π
–(
pTos
->
Êags
 & 
MEM_Dyn
)==0 );

1767 
pTos
--;

1768 if–
c
 ) 
pc
 = 
pOp
->
p2
-1;

1778 
OP_IsNuŒ
: {

1779 
i
, 
˙t
;

1780 
Mem
 *
pTîm
;

1781 
˙t
 = 
pOp
->
p1
;

1782 if–
˙t
<0 ) cnt = -cnt;

1783 
pTîm
 = &
pTos
[1-
˙t
];

1784 
	`as£π
–
pTîm
>=
p
->
aSèck
 );

1785 
i
=0; i<
˙t
; i++, 
pTîm
++){

1786 if–
pTîm
->
Êags
 & 
MEM_NuŒ
 ){

1787 
pc
 = 
pOp
->
p2
-1;

1791 if–
pOp
->
p1
>0 ) 
	`p›Sèck
(&
pTos
, 
˙t
);

1801 
OP_NŸNuŒ
: {

1802 
i
, 
˙t
;

1803 
˙t
 = 
pOp
->
p1
;

1804 if–
˙t
<0 ) cnt = -cnt;

1805 
	`as£π
–&
pTos
[1-
˙t
] >
p
->
aSèck
 );

1806 
i
=0; i<
˙t
 && (
pTos
[1+i-˙t].
Êags
 & 
MEM_NuŒ
)==0; i++){}

1807 if–
i
>=
˙t
 ) 
pc
 = 
pOp
->
p2
-1;

1808 if–
pOp
->
p1
>0 ) 
	`p›Sèck
(&
pTos
, 
˙t
);

1833 
OP_MakeRec‹d
: {

1834 *
zNewRec‹d
;

1835 
nByã
;

1836 
nFõld
;

1837 
i
, 
j
;

1838 
idxWidth
;

1839 
u32
 
addr
;

1840 
Mem
 *
pRec
;

1841 
addUnique
 = 0;

1843 
zTemp
[
NBFS
];

1863 
nFõld
 = 
pOp
->
p1
;

1864 
pRec
 = &
pTos
[1-
nFõld
];

1865 
	`as£π
–
pRec
>=
p
->
aSèck
 );

1866 
nByã
 = 0;

1867 
i
=0; i<
nFõld
; i++, 
pRec
++){

1868 if–
pRec
->
Êags
 & 
MEM_NuŒ
 ){

1869 
addUnique
 = 
pOp
->
p2
;

1871 
	`Såögify
(
pRec
);

1872 
nByã
 +
pRec
->
n
;

1875 if–
addUnique
 ) 
nByã
 +(
p
->
uniqueC¡
);

1876 if–
nByã
 + 
nFõld
 + 1 < 256 ){

1877 
idxWidth
 = 1;

1878 }if–
nByã
 + 2*
nFõld
 + 2 < 65536 ){

1879 
idxWidth
 = 2;

1881 
idxWidth
 = 3;

1883 
nByã
 +
idxWidth
*(
nFõld
 + 1);

1884 if–
nByã
>
MAX_BYTES_PER_ROW
 ){

1885 
rc
 = 
SQLITE_TOOBIG
;

1886 
ab‹t_due_to_îr‹
;

1888 if–
nByã
<=
NBFS
 ){

1889 
zNewRec‹d
 = 
zTemp
;

1891 
zNewRec‹d
 = 
	`sqlôeMÆlocRaw
–
nByã
 );

1892 if–
zNewRec‹d
==0 ) 
no_mem
;

1894 
j
 = 0;

1895 
addr
 = 
idxWidth
*(
nFõld
+1Ë+ 
addUnique
*(
p
->
uniqueC¡
);

1896 
i
=0, 
pRec
=&
pTos
[1-
nFõld
]; i<nField; i++,ÖRec++){

1897 
zNewRec‹d
[
j
++] = 
addr
 & 0xff;

1898 if–
idxWidth
>1 ){

1899 
zNewRec‹d
[
j
++] = (
addr
>>8)&0xff;

1900 if–
idxWidth
>2 ){

1901 
zNewRec‹d
[
j
++] = (
addr
>>16)&0xff;

1904 if–(
pRec
->
Êags
 & 
MEM_NuŒ
)==0 ){

1905 
addr
 +
pRec
->
n
;

1908 
zNewRec‹d
[
j
++] = 
addr
 & 0xff;

1909 if–
idxWidth
>1 ){

1910 
zNewRec‹d
[
j
++] = (
addr
>>8)&0xff;

1911 if–
idxWidth
>2 ){

1912 
zNewRec‹d
[
j
++] = (
addr
>>16)&0xff;

1915 if–
addUnique
 ){

1916 
	`mem˝y
(&
zNewRec‹d
[
j
], &
p
->
uniqueC¡
, (p->uniqueCnt));

1917 
p
->
uniqueC¡
++;

1918 
j
 +(
p
->
uniqueC¡
);

1920 
i
=0, 
pRec
=&
pTos
[1-
nFõld
]; i<nField; i++,ÖRec++){

1921 if–(
pRec
->
Êags
 & 
MEM_NuŒ
)==0 ){

1922 
	`mem˝y
(&
zNewRec‹d
[
j
], 
pRec
->
z
,ÖRec->
n
);

1923 
j
 +
pRec
->
n
;

1926 
	`p›Sèck
(&
pTos
, 
nFõld
);

1927 
pTos
++;

1928 
pTos
->
n
 = 
nByã
;

1929 if–
nByã
<=
NBFS
 ){

1930 
	`as£π
–
zNewRec‹d
==
zTemp
 );

1931 
	`mem˝y
(
pTos
->
zSh‹t
, 
zTemp
, 
nByã
);

1932 
pTos
->
z
 =ÖTos->
zSh‹t
;

1933 
pTos
->
Êags
 = 
MEM_Så
 | 
MEM_Sh‹t
;

1935 
	`as£π
–
zNewRec‹d
!=
zTemp
 );

1936 
pTos
->
z
 = 
zNewRec‹d
;

1937 
pTos
->
Êags
 = 
MEM_Så
 | 
MEM_Dyn
;

2014 
OP_MakeIdxKey
:

2015 
OP_MakeKey
: {

2016 *
zNewKey
;

2017 
nByã
;

2018 
nFõld
;

2019 
addRowid
;

2020 
i
, 
j
;

2021 
c⁄èösNuŒ
 = 0;

2022 
Mem
 *
pRec
;

2023 
zTemp
[
NBFS
];

2025 
addRowid
 = 
pOp
->
›code
==
OP_MakeIdxKey
;

2026 
nFõld
 = 
pOp
->
p1
;

2027 
pRec
 = &
pTos
[1-
nFõld
];

2028 
	`as£π
–
pRec
>=
p
->
aSèck
 );

2029 
nByã
 = 0;

2030 
j
=0, 
i
=0; i<
nFõld
; i++, j++, 
pRec
++){

2031 
Êags
 = 
pRec
->flags;

2032 
Àn
;

2033 *
z
;

2034 if–
Êags
 & 
MEM_NuŒ
 ){

2035 
nByã
 += 2;

2036 
c⁄èösNuŒ
 = 1;

2037 }if–
pOp
->
p3
 &&ÖOp->p3[
j
]=='t' ){

2038 
	`Såögify
(
pRec
);

2039 
pRec
->
Êags
 &~(
MEM_I¡
|
MEM_Ról
);

2040 
nByã
 +
pRec
->
n
+1;

2041 }if–(
Êags
 & (
MEM_Ról
|
MEM_I¡
))!=0 || 
	`sqlôeIsNumbî
(
pRec
->
z
) ){

2042 if–(
Êags
 & (
MEM_Ról
|
MEM_I¡
))==MEM_Int ){

2043 
pRec
->
r
 =ÖRec->
i
;

2044 }if–(
Êags
 & (
MEM_Ról
|
MEM_I¡
))==0 ){

2045 
pRec
->
r
 = 
	`sqlôeAtoF
’Rec->
z
, 0);

2047 
	`Rñó£
(
pRec
);

2048 
z
 = 
pRec
->
zSh‹t
;

2049 
	`sqlôeRólToS‹èbÀ
(
pRec
->
r
, 
z
);

2050 
Àn
 = 
	`°æí
(
z
);

2051 
pRec
->
z
 = 0;

2052 
pRec
->
Êags
 = 
MEM_Ról
;

2053 
pRec
->
n
 = 
Àn
+1;

2054 
nByã
 +
pRec
->
n
+1;

2056 
nByã
 +
pRec
->
n
+1;

2059 if–
nByã
+(
u32
)>
MAX_BYTES_PER_ROW
 ){

2060 
rc
 = 
SQLITE_TOOBIG
;

2061 
ab‹t_due_to_îr‹
;

2063 if–
addRowid
 ) 
nByã
 +(
u32
);

2064 if–
nByã
<=
NBFS
 ){

2065 
zNewKey
 = 
zTemp
;

2067 
zNewKey
 = 
	`sqlôeMÆlocRaw
–
nByã
 );

2068 if–
zNewKey
==0 ) 
no_mem
;

2070 
j
 = 0;

2071 
pRec
 = &
pTos
[1-
nFõld
];

2072 
i
=0; i<
nFõld
; i++, 
pRec
++){

2073 if–
pRec
->
Êags
 & 
MEM_NuŒ
 ){

2074 
zNewKey
[
j
++] = 'a';

2075 
zNewKey
[
j
++] = 0;

2076 }if–
pRec
->
Êags
==
MEM_Ról
 ){

2077 
zNewKey
[
j
++] = 'b';

2078 
	`mem˝y
(&
zNewKey
[
j
], 
pRec
->
zSh‹t
,ÖRec->
n
);

2079 
j
 +
pRec
->
n
;

2081 
	`as£π
–
pRec
->
Êags
 & 
MEM_Så
 );

2082 
zNewKey
[
j
++] = 'c';

2083 
	`mem˝y
(&
zNewKey
[
j
], 
pRec
->
z
,ÖRec->
n
);

2084 
j
 +
pRec
->
n
;

2087 if–
addRowid
 ){

2088 
u32
 
iKey
;

2089 
pRec
 = &
pTos
[-
nFõld
];

2090 
	`as£π
–
pRec
>=
p
->
aSèck
 );

2091 
	`I¡egîify
(
pRec
);

2092 
iKey
 = 
	`ötToKey
(
pRec
->
i
);

2093 
	`mem˝y
(&
zNewKey
[
j
], &
iKey
, (
u32
));

2094 
	`p›Sèck
(&
pTos
, 
nFõld
+1);

2095 if–
pOp
->
p2
 && 
c⁄èösNuŒ
 ) 
pc
 =ÖOp->p2 - 1;

2097 if–
pOp
->
p2
==0 ) 
	`p›Sèck
(&
pTos
, 
nFõld
);

2099 
pTos
++;

2100 
pTos
->
n
 = 
nByã
;

2101 if–
nByã
<=
NBFS
 ){

2102 
	`as£π
–
zNewKey
==
zTemp
 );

2103 
pTos
->
z
 =ÖTos->
zSh‹t
;

2104 
	`mem˝y
(
pTos
->
zSh‹t
, 
zTemp
, 
nByã
);

2105 
pTos
->
Êags
 = 
MEM_Så
 | 
MEM_Sh‹t
;

2107 
pTos
->
z
 = 
zNewKey
;

2108 
pTos
->
Êags
 = 
MEM_Så
 | 
MEM_Dyn
;

2121 
OP_In¸Key
: {

2122 
	`as£π
–
pTos
>=
p
->
aSèck
 );

2128 
	`as£π
–
pTos
->
Êags
 & (
MEM_Dyn
|
MEM_Sh‹t
) );

2129 
pTos
->
z
[pTos->
n
-1]++;

2144 
OP_Checkpoöt
: {

2145 
i
 = 
pOp
->
p1
;

2146 if–
i
>=0 && i<
db
->
nDb
 && db->
aDb
[i].
pBt
 && db->aDb[i].
öTøns
==1 ){

2147 
rc
 = 
	`sqlôeBåìBegöCk±
(
db
->
aDb
[
i
].
pBt
);

2148 if–
rc
==
SQLITE_OK
 ) 
db
->
aDb
[
i
].
öTøns
 = 2;

2169 
OP_Tønß˘i⁄
: {

2170 
busy
 = 1;

2171 
i
 = 
pOp
->
p1
;

2172 
	`as£π
–
i
>=0 && i<
db
->
nDb
 );

2173 if–
db
->
aDb
[
i
].
öTøns
 ) ;

2174  
db
->
aDb
[
i
].
pBt
!=0 && 
busy
 ){

2175 
rc
 = 
	`sqlôeBåìBegöTøns
(
db
->
aDb
[
i
].
pBt
);

2176  
rc
 ){

2177 
SQLITE_BUSY
: {

2178 if–
db
->
xBusyCÆlback
==0 ){

2179 
p
->
pc
 =Öc;

2180 
p
->
undoTønsOnEº‹
 = 1;

2181 
p
->
rc
 = 
SQLITE_BUSY
;

2182 
p
->
pTos
 =ÖTos;

2183  
SQLITE_BUSY
;

2184 }if–(*
db
->
xBusyCÆlback
)(db->
pBusyArg
, "", 
busy
++)==0 ){

2185 
	`sqlôeSëSåög
(&
p
->
zEºMsg
, 
	`sqlôe_îr‹_°rög
(
rc
), (*)0);

2186 
busy
 = 0;

2190 
SQLITE_READONLY
: {

2191 
rc
 = 
SQLITE_OK
;

2194 
SQLITE_OK
: {

2195 
p
->
öTempTøns
 = 0;

2196 
busy
 = 0;

2200 
ab‹t_due_to_îr‹
;

2204 
db
->
aDb
[
i
].
öTøns
 = 1;

2205 
p
->
undoTønsOnEº‹
 = 1;

2217 
OP_Commô
: {

2218 
i
;

2219 if–
db
->
xCommôCÆlback
!=0 ){

2220 if–
	`sqlôeSa„tyOff
(
db
ËË
ab‹t_due_to_misu£
;

2221 if–
db
->
	`xCommôCÆlback
(db->
pCommôArg
)!=0 ){

2222 
rc
 = 
SQLITE_CONSTRAINT
;

2224 if–
	`sqlôeSa„tyOn
(
db
ËË
ab‹t_due_to_misu£
;

2226 
i
=0; 
rc
==
SQLITE_OK
 && i<
db
->
nDb
; i++){

2227 if–
db
->
aDb
[
i
].
öTøns
 ){

2228 
rc
 = 
	`sqlôeBåìCommô
(
db
->
aDb
[
i
].
pBt
);

2229 
db
->
aDb
[
i
].
öTøns
 = 0;

2232 if–
rc
==
SQLITE_OK
 ){

2233 
	`sqlôeCommôI¡î«lCh™ges
(
db
);

2235 
	`sqlôeRﬁlbackAŒ
(
db
);

2254 
OP_Rﬁlback
: {

2255 
	`sqlôeRﬁlbackAŒ
(
db
);

2271 
OP_RódCookõ
: {

2272 
aMëa
[
SQLITE_N_BTREE_META
];

2273 
	`as£π
–
pOp
->
p2
<
SQLITE_N_BTREE_META
 );

2274 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
db
->
nDb
 );

2275 
	`as£π
–
db
->
aDb
[
pOp
->
p1
].
pBt
!=0 );

2276 
rc
 = 
	`sqlôeBåìGëMëa
(
db
->
aDb
[
pOp
->
p1
].
pBt
, 
aMëa
);

2277 
pTos
++;

2278 
pTos
->
i
 = 
aMëa
[1+
pOp
->
p2
];

2279 
pTos
->
Êags
 = 
MEM_I¡
;

2293 
OP_SëCookõ
: {

2294 
aMëa
[
SQLITE_N_BTREE_META
];

2295 
	`as£π
–
pOp
->
p2
<
SQLITE_N_BTREE_META
 );

2296 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
db
->
nDb
 );

2297 
	`as£π
–
db
->
aDb
[
pOp
->
p1
].
pBt
!=0 );

2298 
	`as£π
–
pTos
>=
p
->
aSèck
 );

2299 
	`I¡egîify
(
pTos
)

2300 
rc
 = 
	`sqlôeBåìGëMëa
(
db
->
aDb
[
pOp
->
p1
].
pBt
, 
aMëa
);

2301 if–
rc
==
SQLITE_OK
 ){

2302 
aMëa
[1+
pOp
->
p2
] = 
pTos
->
i
;

2303 
rc
 = 
	`sqlôeBåìUpd©eMëa
(
db
->
aDb
[
pOp
->
p1
].
pBt
, 
aMëa
);

2305 
	`Rñó£
(
pTos
);

2306 
pTos
--;

2326 
OP_VîifyCookõ
: {

2327 
aMëa
[
SQLITE_N_BTREE_META
];

2328 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
db
->
nDb
 );

2329 
rc
 = 
	`sqlôeBåìGëMëa
(
db
->
aDb
[
pOp
->
p1
].
pBt
, 
aMëa
);

2330 if–
rc
==
SQLITE_OK
 && 
aMëa
[1]!=
pOp
->
p2
 ){

2331 
	`sqlôeSëSåög
(&
p
->
zEºMsg
, "database schema has changed", (*)0);

2332 
rc
 = 
SQLITE_SCHEMA
;

2381 
OP_O≥nRód
:

2382 
OP_O≥nWrôe
: {

2383 
busy
 = 0;

2384 
i
 = 
pOp
->
p1
;

2385 
p2
 = 
pOp
->p2;

2386 
wrFœg
;

2387 
Båì
 *
pX
;

2388 
iDb
;

2390 
	`as£π
–
pTos
>=
p
->
aSèck
 );

2391 
	`I¡egîify
(
pTos
);

2392 
iDb
 = 
pTos
->
i
;

2393 
pTos
--;

2394 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

2395 
pX
 = 
db
->
aDb
[
iDb
].
pBt
;

2396 
	`as£π
–
pX
!=0 );

2397 
wrFœg
 = 
pOp
->
›code
==
OP_O≥nWrôe
;

2398 if–
p2
<=0 ){

2399 
	`as£π
–
pTos
>=
p
->
aSèck
 );

2400 
	`I¡egîify
(
pTos
);

2401 
p2
 = 
pTos
->
i
;

2402 
pTos
--;

2403 if–
p2
<2 ){

2404 
	`sqlôeSëSåög
(&
p
->
zEºMsg
, "rootÖageÇumberÜessÅhan 2", (*)0);

2405 
rc
 = 
SQLITE_INTERNAL
;

2409 
	`as£π
–
i
>=0 );

2410 if–
	`ex∑ndCurs‹AºaySize
(
p
, 
i
ËË
no_mem
;

2411 
	`sqlôeVdbeCÀ™upCurs‹
(&
p
->
aC§
[
i
]);

2412 
	`mem£t
(&
p
->
aC§
[
i
], 0, (
Curs‹
));

2413 
p
->
aC§
[
i
].
nuŒRow
 = 1;

2414 if–
pX
==0 ) ;

2416 
rc
 = 
	`sqlôeBåìCurs‹
(
pX
, 
p2
, 
wrFœg
, &
p
->
aC§
[
i
].
pCurs‹
);

2417  
rc
 ){

2418 
SQLITE_BUSY
: {

2419 if–
db
->
xBusyCÆlback
==0 ){

2420 
p
->
pc
 =Öc;

2421 
p
->
rc
 = 
SQLITE_BUSY
;

2422 
p
->
pTos
 = &pTos[1 + (
pOp
->
p2
<=0)];

2423  
SQLITE_BUSY
;

2424 }if–(*
db
->
xBusyCÆlback
)(db->
pBusyArg
, 
pOp
->
p3
, ++
busy
)==0 ){

2425 
	`sqlôeSëSåög
(&
p
->
zEºMsg
, 
	`sqlôe_îr‹_°rög
(
rc
), (*)0);

2426 
busy
 = 0;

2430 
SQLITE_OK
: {

2431 
busy
 = 0;

2435 
ab‹t_due_to_îr‹
;

2438 } 
busy
 );

2460 
OP_O≥nTemp
: {

2461 
i
 = 
pOp
->
p1
;

2462 
Curs‹
 *
pCx
;

2463 
	`as£π
–
i
>=0 );

2464 if–
	`ex∑ndCurs‹AºaySize
(
p
, 
i
ËË
no_mem
;

2465 
pCx
 = &
p
->
aC§
[
i
];

2466 
	`sqlôeVdbeCÀ™upCurs‹
(
pCx
);

2467 
	`mem£t
(
pCx
, 0, (*pCx));

2468 
pCx
->
nuŒRow
 = 1;

2469 
rc
 = 
	`sqlôeBåìFa˘‹y
(
db
, 0, 1, 
TEMP_PAGES
, &
pCx
->
pBt
);

2471 if–
rc
==
SQLITE_OK
 ){

2472 
rc
 = 
	`sqlôeBåìBegöTøns
(
pCx
->
pBt
);

2474 if–
rc
==
SQLITE_OK
 ){

2475 if–
pOp
->
p2
 ){

2476 
pgno
;

2477 
rc
 = 
	`sqlôeBåìCª©eIndex
(
pCx
->
pBt
, &
pgno
);

2478 if–
rc
==
SQLITE_OK
 ){

2479 
rc
 = 
	`sqlôeBåìCurs‹
(
pCx
->
pBt
, 
pgno
, 1, &pCx->
pCurs‹
);

2482 
rc
 = 
	`sqlôeBåìCurs‹
(
pCx
->
pBt
, 2, 1, &pCx->
pCurs‹
);

2498 
OP_O≥nP£udo
: {

2499 
i
 = 
pOp
->
p1
;

2500 
Curs‹
 *
pCx
;

2501 
	`as£π
–
i
>=0 );

2502 if–
	`ex∑ndCurs‹AºaySize
(
p
, 
i
ËË
no_mem
;

2503 
pCx
 = &
p
->
aC§
[
i
];

2504 
	`sqlôeVdbeCÀ™upCurs‹
(
pCx
);

2505 
	`mem£t
(
pCx
, 0, (*pCx));

2506 
pCx
->
nuŒRow
 = 1;

2507 
pCx
->
p£udoTabÀ
 = 1;

2516 
OP_Clo£
: {

2517 
i
 = 
pOp
->
p1
;

2518 if–
i
>=0 && i<
p
->
nCurs‹
 ){

2519 
	`sqlôeVdbeCÀ™upCurs‹
(&
p
->
aC§
[
i
]);

2545 
OP_MoveLt
:

2546 
OP_MoveTo
: {

2547 
i
 = 
pOp
->
p1
;

2548 
Curs‹
 *
pC
;

2550 
	`as£π
–
pTos
>=
p
->
aSèck
 );

2551 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

2552 
pC
 = &
p
->
aC§
[
i
];

2553 if–
pC
->
pCurs‹
!=0 ){

2554 
ªs
, 
oc
;

2555 
pC
->
nuŒRow
 = 0;

2556 if–
pTos
->
Êags
 & 
MEM_I¡
 ){

2557 
iKey
 = 
	`ötToKey
(
pTos
->
i
);

2558 if–
pOp
->
p2
==0 &&ÖOp->
›code
==
OP_MoveTo
 ){

2559 
pC
->
movëoT¨gë
 = 
iKey
;

2560 
pC
->
de„ºedMovëo
 = 1;

2561 
	`Rñó£
(
pTos
);

2562 
pTos
--;

2565 
	`sqlôeBåìMovëo
(
pC
->
pCurs‹
, (*)&
iKey
, (), &
ªs
);

2566 
pC
->
œ°Re˙o
 = 
pTos
->
i
;

2567 
pC
->
ª˙oIsVÆid
 = 
ªs
==0;

2569 
	`Såögify
(
pTos
);

2570 
	`sqlôeBåìMovëo
(
pC
->
pCurs‹
, 
pTos
->
z
,ÖTos->
n
, &
ªs
);

2571 
pC
->
ª˙oIsVÆid
 = 0;

2573 
pC
->
de„ºedMovëo
 = 0;

2574 
sqlôe_£¨ch_cou¡
++;

2575 
oc
 = 
pOp
->
›code
;

2576 if–
oc
==
OP_MoveTo
 && 
ªs
<0 ){

2577 
	`sqlôeBåìNext
(
pC
->
pCurs‹
, &
ªs
);

2578 
pC
->
ª˙oIsVÆid
 = 0;

2579 if–
ªs
 && 
pOp
->
p2
>0 ){

2580 
pc
 = 
pOp
->
p2
 - 1;

2582 }if–
oc
==
OP_MoveLt
 ){

2583 if–
ªs
>=0 ){

2584 
	`sqlôeBåìPªvious
(
pC
->
pCurs‹
, &
ªs
);

2585 
pC
->
ª˙oIsVÆid
 = 0;

2590 
keysize
;

2591 
ªs
 = 
	`sqlôeBåìKeySize
(
pC
->
pCurs‹
,&
keysize
)!=0 || keysize==0;

2593 if–
ªs
 && 
pOp
->
p2
>0 ){

2594 
pc
 = 
pOp
->
p2
 - 1;

2598 
	`Rñó£
(
pTos
);

2599 
pTos
--;

2636 
OP_Di°ö˘
:

2637 
OP_NŸFound
:

2638 
OP_Found
: {

2639 
i
 = 
pOp
->
p1
;

2640 
ÆªadyExi°s
 = 0;

2641 
Curs‹
 *
pC
;

2642 
	`as£π
–
pTos
>=
p
->
aSèck
 );

2643 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

2644 if–(
pC
 = &
p
->
aC§
[
i
])->
pCurs‹
!=0 ){

2645 
ªs
, 
rx
;

2646 
	`Såögify
(
pTos
);

2647 
rx
 = 
	`sqlôeBåìMovëo
(
pC
->
pCurs‹
, 
pTos
->
z
,ÖTos->
n
, &
ªs
);

2648 
ÆªadyExi°s
 = 
rx
==
SQLITE_OK
 && 
ªs
==0;

2649 
pC
->
de„ºedMovëo
 = 0;

2651 if–
pOp
->
›code
==
OP_Found
 ){

2652 if–
ÆªadyExi°s
 ) 
pc
 = 
pOp
->
p2
 - 1;

2654 if–!
ÆªadyExi°s
 ) 
pc
 = 
pOp
->
p2
 - 1;

2656 if–
pOp
->
›code
!=
OP_Di°ö˘
 ){

2657 
	`Rñó£
(
pTos
);

2658 
pTos
--;

2683 
OP_IsUnique
: {

2684 
i
 = 
pOp
->
p1
;

2685 
Mem
 *
pNos
 = &
pTos
[-1];

2686 
BtCurs‹
 *
pCr§
;

2687 
R
;

2691 
	`as£π
–
pNos
>=
p
->
aSèck
 );

2692 
	`I¡egîify
(
pTos
);

2693 
R
 = 
pTos
->
i
;

2694 
pTos
--;

2695 
	`as£π
–
i
>=0 && i<=
p
->
nCurs‹
 );

2696 if–(
pCr§
 = 
p
->
aC§
[
i
].
pCurs‹
)!=0 ){

2697 
ªs
, 
rc
;

2698 
v
;

2699 *
zKey
;

2700 
nKey
;

2704 
	`Såögify
(
pNos
);

2705 
zKey
 = 
pNos
->
z
;

2706 
nKey
 = 
pNos
->
n
;

2707 
	`as£π
–
nKey
 >= 4 );

2712 
	`as£π
–
p
->
aC§
[
i
].
de„ºedMovëo
==0 );

2713 
rc
 = 
	`sqlôeBåìMovëo
(
pCr§
, 
zKey
, 
nKey
-4, &
ªs
);

2714 if–
rc
!=
SQLITE_OK
 ) 
ab‹t_due_to_îr‹
;

2715 if–
ªs
<0 ){

2716 
rc
 = 
	`sqlôeBåìNext
(
pCr§
, &
ªs
);

2717 if–
ªs
 ){

2718 
pc
 = 
pOp
->
p2
 - 1;

2722 
rc
 = 
	`sqlôeBåìKeyCom∑ª
(
pCr§
, 
zKey
, 
nKey
-4, 4, &
ªs
);

2723 if–
rc
!=
SQLITE_OK
 ) 
ab‹t_due_to_îr‹
;

2724 if–
ªs
>0 ){

2725 
pc
 = 
pOp
->
p2
 - 1;

2734 
	`sqlôeBåìKey
(
pCr§
, 
nKey
 - 4, 4, (*)&
v
);

2735 
v
 = 
	`keyToI¡
(v);

2736 if–
v
==
R
 ){

2737 
pc
 = 
pOp
->
p2
 - 1;

2746 
pTos
++;

2747 
pTos
->
i
 = 
v
;

2748 
pTos
->
Êags
 = 
MEM_I¡
;

2766 
OP_NŸExi°s
: {

2767 
i
 = 
pOp
->
p1
;

2768 
BtCurs‹
 *
pCr§
;

2769 
	`as£π
–
pTos
>=
p
->
aSèck
 );

2770 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

2771 if–(
pCr§
 = 
p
->
aC§
[
i
].
pCurs‹
)!=0 ){

2772 
ªs
, 
rx
, 
iKey
;

2773 
	`as£π
–
pTos
->
Êags
 & 
MEM_I¡
 );

2774 
iKey
 = 
	`ötToKey
(
pTos
->
i
);

2775 
rx
 = 
	`sqlôeBåìMovëo
(
pCr§
, (*)&
iKey
, (), &
ªs
);

2776 
p
->
aC§
[
i
].
œ°Re˙o
 = 
pTos
->i;

2777 
p
->
aC§
[
i
].
ª˙oIsVÆid
 = 
ªs
==0;

2778 
p
->
aC§
[
i
].
nuŒRow
 = 0;

2779 if–
rx
!=
SQLITE_OK
 || 
ªs
!=0 ){

2780 
pc
 = 
pOp
->
p2
 - 1;

2781 
p
->
aC§
[
i
].
ª˙oIsVÆid
 = 0;

2784 
	`Rñó£
(
pTos
);

2785 
pTos
--;

2796 
OP_NewRe˙o
: {

2797 
i
 = 
pOp
->
p1
;

2798 
v
 = 0;

2799 
Curs‹
 *
pC
;

2800 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

2801 if–(
pC
 = &
p
->
aC§
[
i
])->
pCurs‹
==0 ){

2802 
v
 = 0;

2835 
ªs
, 
rx
, 
˙t
, 
x
;

2836 
˙t
 = 0;

2837 if–!
pC
->
u£R™domRowid
 ){

2838 if–
pC
->
√xtRowidVÆid
 ){

2839 
v
 = 
pC
->
√xtRowid
;

2841 
rx
 = 
	`sqlôeBåìLa°
(
pC
->
pCurs‹
, &
ªs
);

2842 if–
ªs
 ){

2843 
v
 = 1;

2845 
	`sqlôeBåìKey
(
pC
->
pCurs‹
, 0, (
v
), (*)&v);

2846 
v
 = 
	`keyToI¡
(v);

2847 if–
v
==0x7fffffff ){

2848 
pC
->
u£R™domRowid
 = 1;

2850 
v
++;

2854 if–
v
<0x7fffffff ){

2855 
pC
->
√xtRowidVÆid
 = 1;

2856 
pC
->
√xtRowid
 = 
v
+1;

2858 
pC
->
√xtRowidVÆid
 = 0;

2861 if–
pC
->
u£R™domRowid
 ){

2862 
v
 = 
db
->
¥i‹NewRowid
;

2863 
˙t
 = 0;

2865 if–
v
==0 || 
˙t
>2 ){

2866 
	`sqlôeR™dom√ss
((
v
), &v);

2867 if–
˙t
<5 ) 
v
 &= 0xffffff;

2869 
r
;

2870 
	`sqlôeR™dom√ss
(1, &
r
);

2871 
v
 +
r
 + 1;

2873 if–
v
==0 ) ;

2874 
x
 = 
	`ötToKey
(
v
);

2875 
rx
 = 
	`sqlôeBåìMovëo
(
pC
->
pCurs‹
, &
x
, (), &
ªs
);

2876 
˙t
++;

2877 } 
˙t
<1000 && 
rx
==
SQLITE_OK
 && 
ªs
==0 );

2878 
db
->
¥i‹NewRowid
 = 
v
;

2879 if–
rx
==
SQLITE_OK
 && 
ªs
==0 ){

2880 
rc
 = 
SQLITE_FULL
;

2881 
ab‹t_due_to_îr‹
;

2884 
pC
->
ª˙oIsVÆid
 = 0;

2885 
pC
->
de„ºedMovëo
 = 0;

2887 
pTos
++;

2888 
pTos
->
i
 = 
v
;

2889 
pTos
->
Êags
 = 
MEM_I¡
;

2918 
OP_PutI¡Key
:

2919 
OP_PutSåKey
: {

2920 
Mem
 *
pNos
 = &
pTos
[-1];

2921 
i
 = 
pOp
->
p1
;

2922 
Curs‹
 *
pC
;

2923 
	`as£π
–
pNos
>=
p
->
aSèck
 );

2924 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

2925 if–((
pC
 = &
p
->
aC§
[
i
])->
pCurs‹
!=0 ||ÖC->
p£udoTabÀ
) ){

2926 *
zKey
;

2927 
nKey
, 
iKey
;

2928 if–
pOp
->
›code
==
OP_PutSåKey
 ){

2929 
	`Såögify
(
pNos
);

2930 
nKey
 = 
pNos
->
n
;

2931 
zKey
 = 
pNos
->
z
;

2933 
	`as£π
–
pNos
->
Êags
 & 
MEM_I¡
 );

2934 
nKey
 = ();

2935 
iKey
 = 
	`ötToKey
(
pNos
->
i
);

2936 
zKey
 = (*)&
iKey
;

2937 if–
pOp
->
p2
 & 
OPFLAG_NCHANGE
 ) 
db
->
nCh™ge
++;

2938 if–
pOp
->
p2
 & 
OPFLAG_LASTROWID
 ) 
db
->
œ°Rowid
 = 
pNos
->
i
;

2939 if–
pOp
->
p2
 & 
OPFLAG_CSCHANGE
 ) 
db
->
csCh™ge
++;

2940 if–
pC
->
√xtRowidVÆid
 && 
pTos
->
i
>ıC->
√xtRowid
 ){

2941 
pC
->
√xtRowidVÆid
 = 0;

2944 if–
pTos
->
Êags
 & 
MEM_NuŒ
 ){

2945 
pTos
->
z
 = 0;

2946 
pTos
->
n
 = 0;

2948 
	`as£π
–
pTos
->
Êags
 & 
MEM_Så
 );

2950 if–
pC
->
p£udoTabÀ
 ){

2955 
	`as£π
–
pOp
->
›code
==
OP_PutI¡Key
 );

2956 
	`sqlôeFªe
(
pC
->
pD©a
);

2957 
pC
->
iKey
 = iKey;

2958 
pC
->
nD©a
 = 
pTos
->
n
;

2959 if–
pTos
->
Êags
 & 
MEM_Dyn
 ){

2960 
pC
->
pD©a
 = 
pTos
->
z
;

2961 
pTos
->
Êags
 = 
MEM_NuŒ
;

2963 
pC
->
pD©a
 = 
	`sqlôeMÆlocRaw
–pC->
nD©a
 );

2964 if–
pC
->
pD©a
 ){

2965 
	`mem˝y
(
pC
->
pD©a
, 
pTos
->
z
,ÖC->
nD©a
);

2968 
pC
->
nuŒRow
 = 0;

2970 
rc
 = 
	`sqlôeBåìIn£π
(
pC
->
pCurs‹
, 
zKey
, 
nKey
, 
pTos
->
z
,ÖTos->
n
);

2972 
pC
->
ª˙oIsVÆid
 = 0;

2973 
pC
->
de„ºedMovëo
 = 0;

2975 
	`p›Sèck
(&
pTos
, 2);

2994 
OP_Dñëe
: {

2995 
i
 = 
pOp
->
p1
;

2996 
Curs‹
 *
pC
;

2997 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

2998 
pC
 = &
p
->
aC§
[
i
];

2999 if–
pC
->
pCurs‹
!=0 ){

3000 
	`sqlôeVdbeCurs‹Movëo
(
pC
);

3001 
rc
 = 
	`sqlôeBåìDñëe
(
pC
->
pCurs‹
);

3002 
pC
->
√xtRowidVÆid
 = 0;

3004 if–
pOp
->
p2
 & 
OPFLAG_NCHANGE
 ) 
db
->
nCh™ge
++;

3005 if–
pOp
->
p2
 & 
OPFLAG_CSCHANGE
 ) 
db
->
csCh™ge
++;

3014 
OP_SëCou¡s
: {

3015 
db
->
lsCh™ge
=db->
csCh™ge
;

3016 
db
->
csCh™ge
=0;

3027 
OP_KeyAsD©a
: {

3028 
i
 = 
pOp
->
p1
;

3029 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3030 
p
->
aC§
[
i
].
keyAsD©a
 = 
pOp
->
p2
;

3052 
OP_RowKey
:

3053 
OP_RowD©a
: {

3054 
i
 = 
pOp
->
p1
;

3055 
Curs‹
 *
pC
;

3056 
n
;

3058 
pTos
++;

3059 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3060 
pC
 = &
p
->
aC§
[
i
];

3061 if–
pC
->
nuŒRow
 ){

3062 
pTos
->
Êags
 = 
MEM_NuŒ
;

3063 }if–
pC
->
pCurs‹
!=0 ){

3064 
BtCurs‹
 *
pCr§
 = 
pC
->
pCurs‹
;

3065 
	`sqlôeVdbeCurs‹Movëo
(
pC
);

3066 if–
pC
->
nuŒRow
 ){

3067 
pTos
->
Êags
 = 
MEM_NuŒ
;

3069 }if–
pC
->
keyAsD©a
 || 
pOp
->
›code
==
OP_RowKey
 ){

3070 
	`sqlôeBåìKeySize
(
pCr§
, &
n
);

3072 
	`sqlôeBåìD©aSize
(
pCr§
, &
n
);

3074 
pTos
->
n
 =Ç;

3075 if–
n
<=
NBFS
 ){

3076 
pTos
->
Êags
 = 
MEM_Så
 | 
MEM_Sh‹t
;

3077 
pTos
->
z
 =ÖTos->
zSh‹t
;

3079 *
z
 = 
	`sqlôeMÆlocRaw
–
n
 );

3080 if–
z
==0 ) 
no_mem
;

3081 
pTos
->
Êags
 = 
MEM_Så
 | 
MEM_Dyn
;

3082 
pTos
->
z
 = z;

3084 if–
pC
->
keyAsD©a
 || 
pOp
->
›code
==
OP_RowKey
 ){

3085 
	`sqlôeBåìKey
(
pCr§
, 0, 
n
, 
pTos
->
z
);

3087 
	`sqlôeBåìD©a
(
pCr§
, 0, 
n
, 
pTos
->
z
);

3089 }if–
pC
->
p£udoTabÀ
 ){

3090 
pTos
->
n
 = 
pC
->
nD©a
;

3091 
pTos
->
z
 = 
pC
->
pD©a
;

3092 
pTos
->
Êags
 = 
MEM_Så
|
MEM_Ephem
;

3094 
pTos
->
Êags
 = 
MEM_NuŒ
;

3118 
OP_Cﬁumn
: {

3119 
amt
, 
off£t
, 
íd
, 
∑ylﬂdSize
;

3120 
i
 = 
pOp
->
p1
;

3121 
p2
 = 
pOp
->p2;

3122 
Curs‹
 *
pC
;

3123 *
zRec
;

3124 
BtCurs‹
 *
pCr§
;

3125 
idxWidth
;

3126 
aHdr
[10];

3128 
	`as£π
–
i
<
p
->
nCurs‹
 );

3129 
pTos
++;

3130 if–
i
<0 ){

3131 
	`as£π
–&
pTos
[
i
]>=
p
->
aSèck
 );

3132 
	`as£π
–
pTos
[
i
].
Êags
 & 
MEM_Så
 );

3133 
zRec
 = 
pTos
[
i
].
z
;

3134 
∑ylﬂdSize
 = 
pTos
[
i
].
n
;

3135 }if–(
pC
 = &
p
->
aC§
[
i
])->
pCurs‹
!=0 ){

3136 
	`sqlôeVdbeCurs‹Movëo
(
pC
);

3137 
zRec
 = 0;

3138 
pCr§
 = 
pC
->
pCurs‹
;

3139 if–
pC
->
nuŒRow
 ){

3140 
∑ylﬂdSize
 = 0;

3141 }if–
pC
->
keyAsD©a
 ){

3142 
	`sqlôeBåìKeySize
(
pCr§
, &
∑ylﬂdSize
);

3144 
	`sqlôeBåìD©aSize
(
pCr§
, &
∑ylﬂdSize
);

3146 }if–
pC
->
p£udoTabÀ
 ){

3147 
∑ylﬂdSize
 = 
pC
->
nD©a
;

3148 
zRec
 = 
pC
->
pD©a
;

3149 
	`as£π
–
∑ylﬂdSize
==0 || 
zRec
!=0 );

3151 
∑ylﬂdSize
 = 0;

3157 if–
∑ylﬂdSize
==0 ){

3158 
pTos
->
Êags
 = 
MEM_NuŒ
;

3160 }if–
∑ylﬂdSize
<256 ){

3161 
idxWidth
 = 1;

3162 }if–
∑ylﬂdSize
<65536 ){

3163 
idxWidth
 = 2;

3165 
idxWidth
 = 3;

3170 if–
∑ylﬂdSize
 < 
idxWidth
*(
p2
+1) ){

3171 
rc
 = 
SQLITE_CORRUPT
;

3172 
ab‹t_due_to_îr‹
;

3174 if–
zRec
 ){

3175 
	`mem˝y
(
aHdr
, &
zRec
[
idxWidth
*
p2
], idxWidth*2);

3176 }if–
pC
->
keyAsD©a
 ){

3177 
	`sqlôeBåìKey
(
pCr§
, 
idxWidth
*
p2
, idxWidth*2, (*)
aHdr
);

3179 
	`sqlôeBåìD©a
(
pCr§
, 
idxWidth
*
p2
, idxWidth*2, (*)
aHdr
);

3181 
off£t
 = 
aHdr
[0];

3182 
íd
 = 
aHdr
[
idxWidth
];

3183 if–
idxWidth
>1 ){

3184 
off£t
 |
aHdr
[1]<<8;

3185 
íd
 |
aHdr
[
idxWidth
+1]<<8;

3186 if–
idxWidth
>2 ){

3187 
off£t
 |
aHdr
[2]<<16;

3188 
íd
 |
aHdr
[
idxWidth
+2]<<16;

3191 
amt
 = 
íd
 - 
off£t
;

3192 if–
amt
<0 || 
off£t
<0 || 
íd
>
∑ylﬂdSize
 ){

3193 
rc
 = 
SQLITE_CORRUPT
;

3194 
ab‹t_due_to_îr‹
;

3200 
pTos
->
n
 = 
amt
;

3201 if–
amt
==0 ){

3202 
pTos
->
Êags
 = 
MEM_NuŒ
;

3203 }if–
zRec
 ){

3204 
pTos
->
Êags
 = 
MEM_Så
 | 
MEM_Ephem
;

3205 
pTos
->
z
 = &
zRec
[
off£t
];

3207 if–
amt
<=
NBFS
 ){

3208 
pTos
->
Êags
 = 
MEM_Så
 | 
MEM_Sh‹t
;

3209 
pTos
->
z
 =ÖTos->
zSh‹t
;

3211 *
z
 = 
	`sqlôeMÆlocRaw
–
amt
 );

3212 if–
z
==0 ) 
no_mem
;

3213 
pTos
->
Êags
 = 
MEM_Så
 | 
MEM_Dyn
;

3214 
pTos
->
z
 = z;

3216 if–
pC
->
keyAsD©a
 ){

3217 
	`sqlôeBåìKey
(
pCr§
, 
off£t
, 
amt
, 
pTos
->
z
);

3219 
	`sqlôeBåìD©a
(
pCr§
, 
off£t
, 
amt
, 
pTos
->
z
);

3232 
OP_Re˙o
: {

3233 
i
 = 
pOp
->
p1
;

3234 
Curs‹
 *
pC
;

3235 
v
;

3237 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3238 
pC
 = &
p
->
aC§
[
i
];

3239 
	`sqlôeVdbeCurs‹Movëo
(
pC
);

3240 
pTos
++;

3241 if–
pC
->
ª˙oIsVÆid
 ){

3242 
v
 = 
pC
->
œ°Re˙o
;

3243 }if–
pC
->
p£udoTabÀ
 ){

3244 
v
 = 
	`keyToI¡
(
pC
->
iKey
);

3245 }if–
pC
->
nuŒRow
 ||ÖC->
pCurs‹
==0 ){

3246 
pTos
->
Êags
 = 
MEM_NuŒ
;

3249 
	`as£π
–
pC
->
pCurs‹
!=0 );

3250 
	`sqlôeBåìKey
(
pC
->
pCurs‹
, 0, (
u32
), (*)&
v
);

3251 
v
 = 
	`keyToI¡
(v);

3253 
pTos
->
i
 = 
v
;

3254 
pTos
->
Êags
 = 
MEM_I¡
;

3269 
OP_FuŒKey
: {

3270 
i
 = 
pOp
->
p1
;

3271 
BtCurs‹
 *
pCr§
;

3273 
	`as£π
–
p
->
aC§
[
i
].
keyAsD©a
 );

3274 
	`as£π
–!
p
->
aC§
[
i
].
p£udoTabÀ
 );

3275 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3276 
pTos
++;

3277 if–(
pCr§
 = 
p
->
aC§
[
i
].
pCurs‹
)!=0 ){

3278 
amt
;

3279 *
z
;

3281 
	`sqlôeVdbeCurs‹Movëo
(&
p
->
aC§
[
i
]);

3282 
	`sqlôeBåìKeySize
(
pCr§
, &
amt
);

3283 if–
amt
<=0 ){

3284 
rc
 = 
SQLITE_CORRUPT
;

3285 
ab‹t_due_to_îr‹
;

3287 if–
amt
>
NBFS
 ){

3288 
z
 = 
	`sqlôeMÆlocRaw
–
amt
 );

3289 if–
z
==0 ) 
no_mem
;

3290 
pTos
->
Êags
 = 
MEM_Så
 | 
MEM_Dyn
;

3292 
z
 = 
pTos
->
zSh‹t
;

3293 
pTos
->
Êags
 = 
MEM_Så
 | 
MEM_Sh‹t
;

3295 
	`sqlôeBåìKey
(
pCr§
, 0, 
amt
, 
z
);

3296 
pTos
->
z
 = z;

3297 
pTos
->
n
 = 
amt
;

3308 
OP_NuŒRow
: {

3309 
i
 = 
pOp
->
p1
;

3311 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3312 
p
->
aC§
[
i
].
nuŒRow
 = 1;

3313 
p
->
aC§
[
i
].
ª˙oIsVÆid
 = 0;

3325 
OP_La°
: {

3326 
i
 = 
pOp
->
p1
;

3327 
Curs‹
 *
pC
;

3328 
BtCurs‹
 *
pCr§
;

3330 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3331 
pC
 = &
p
->
aC§
[
i
];

3332 if–(
pCr§
 = 
pC
->
pCurs‹
)!=0 ){

3333 
ªs
;

3334 
rc
 = 
	`sqlôeBåìLa°
(
pCr§
, &
ªs
);

3335 
pC
->
nuŒRow
 = 
ªs
;

3336 
pC
->
de„ºedMovëo
 = 0;

3337 if–
ªs
 && 
pOp
->
p2
>0 ){

3338 
pc
 = 
pOp
->
p2
 - 1;

3341 
pC
->
nuŒRow
 = 0;

3354 
OP_Rewöd
: {

3355 
i
 = 
pOp
->
p1
;

3356 
Curs‹
 *
pC
;

3357 
BtCurs‹
 *
pCr§
;

3359 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3360 
pC
 = &
p
->
aC§
[
i
];

3361 if–(
pCr§
 = 
pC
->
pCurs‹
)!=0 ){

3362 
ªs
;

3363 
rc
 = 
	`sqlôeBåìFú°
(
pCr§
, &
ªs
);

3364 
pC
->
©Fú°
 = 
ªs
==0;

3365 
pC
->
nuŒRow
 = 
ªs
;

3366 
pC
->
de„ºedMovëo
 = 0;

3367 if–
ªs
 && 
pOp
->
p2
>0 ){

3368 
pc
 = 
pOp
->
p2
 - 1;

3371 
pC
->
nuŒRow
 = 0;

3392 
OP_Pªv
:

3393 
OP_Next
: {

3394 
Curs‹
 *
pC
;

3395 
BtCurs‹
 *
pCr§
;

3397 
CHECK_FOR_INTERRUPT
;

3398 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

3399 
pC
 = &
p
->
aC§
[
pOp
->
p1
];

3400 if–(
pCr§
 = 
pC
->
pCurs‹
)!=0 ){

3401 
ªs
;

3402 if–
pC
->
nuŒRow
 ){

3403 
ªs
 = 1;

3405 
	`as£π
–
pC
->
de„ºedMovëo
==0 );

3406 
rc
 = 
pOp
->
›code
==
OP_Next
 ? 
	`sqlôeBåìNext
(
pCr§
, &
ªs
) :

3407 
	`sqlôeBåìPªvious
(
pCr§
, &
ªs
);

3408 
pC
->
nuŒRow
 = 
ªs
;

3410 if–
ªs
==0 ){

3411 
pc
 = 
pOp
->
p2
 - 1;

3412 
sqlôe_£¨ch_cou¡
++;

3415 
pC
->
nuŒRow
 = 1;

3417 
pC
->
ª˙oIsVÆid
 = 0;

3432 
OP_IdxPut
: {

3433 
i
 = 
pOp
->
p1
;

3434 
BtCurs‹
 *
pCr§
;

3435 
	`as£π
–
pTos
>=
p
->
aSèck
 );

3436 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3437 
	`as£π
–
pTos
->
Êags
 & 
MEM_Så
 );

3438 if–(
pCr§
 = 
p
->
aC§
[
i
].
pCurs‹
)!=0 ){

3439 
nKey
 = 
pTos
->
n
;

3440 c⁄° *
zKey
 = 
pTos
->
z
;

3441 if–
pOp
->
p2
 ){

3442 
ªs
, 
n
;

3443 
	`as£π
–
nKey
 >= 4 );

3444 
rc
 = 
	`sqlôeBåìMovëo
(
pCr§
, 
zKey
, 
nKey
-4, &
ªs
);

3445 if–
rc
!=
SQLITE_OK
 ) 
ab‹t_due_to_îr‹
;

3446  
ªs
!=0 ){

3447 
c
;

3448 
	`sqlôeBåìKeySize
(
pCr§
, &
n
);

3449 if–
n
==
nKey


3450 && 
	`sqlôeBåìKeyCom∑ª
(
pCr§
, 
zKey
, 
nKey
-4, 4, &
c
)==
SQLITE_OK


3451 && 
c
==0

3453 
rc
 = 
SQLITE_CONSTRAINT
;

3454 if–
pOp
->
p3
 &&ÖOp->p3[0] ){

3455 
	`sqlôeSëSåög
(&
p
->
zEºMsg
, 
pOp
->
p3
, (*)0);

3457 
ab‹t_due_to_îr‹
;

3459 if–
ªs
<0 ){

3460 
	`sqlôeBåìNext
(
pCr§
, &
ªs
);

3461 
ªs
 = +1;

3467 
rc
 = 
	`sqlôeBåìIn£π
(
pCr§
, 
zKey
, 
nKey
, "", 0);

3468 
	`as£π
–
p
->
aC§
[
i
].
de„ºedMovëo
==0 );

3470 
	`Rñó£
(
pTos
);

3471 
pTos
--;

3480 
OP_IdxDñëe
: {

3481 
i
 = 
pOp
->
p1
;

3482 
BtCurs‹
 *
pCr§
;

3483 
	`as£π
–
pTos
>=
p
->
aSèck
 );

3484 
	`as£π
–
pTos
->
Êags
 & 
MEM_Så
 );

3485 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3486 if–(
pCr§
 = 
p
->
aC§
[
i
].
pCurs‹
)!=0 ){

3487 
rx
, 
ªs
;

3488 
rx
 = 
	`sqlôeBåìMovëo
(
pCr§
, 
pTos
->
z
,ÖTos->
n
, &
ªs
);

3489 if–
rx
==
SQLITE_OK
 && 
ªs
==0 ){

3490 
rc
 = 
	`sqlôeBåìDñëe
(
pCr§
);

3492 
	`as£π
–
p
->
aC§
[
i
].
de„ºedMovëo
==0 );

3494 
	`Rñó£
(
pTos
);

3495 
pTos
--;

3508 
OP_IdxRe˙o
: {

3509 
i
 = 
pOp
->
p1
;

3510 
BtCurs‹
 *
pCr§
;

3512 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3513 
pTos
++;

3514 if–(
pCr§
 = 
p
->
aC§
[
i
].
pCurs‹
)!=0 ){

3515 
v
;

3516 
sz
;

3517 
	`as£π
–
p
->
aC§
[
i
].
de„ºedMovëo
==0 );

3518 
	`sqlôeBåìKeySize
(
pCr§
, &
sz
);

3519 if–
sz
<(
u32
) ){

3520 
pTos
->
Êags
 = 
MEM_NuŒ
;

3522 
	`sqlôeBåìKey
(
pCr§
, 
sz
 - (
u32
), (u32), (*)&
v
);

3523 
v
 = 
	`keyToI¡
(v);

3524 
pTos
->
i
 = 
v
;

3525 
pTos
->
Êags
 = 
MEM_I¡
;

3528 
pTos
->
Êags
 = 
MEM_NuŒ
;

3558 
OP_IdxLT
:

3559 
OP_IdxGT
:

3560 
OP_IdxGE
: {

3561 
i

pOp
->
p1
;

3562 
BtCurs‹
 *
pCr§
;

3564 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3565 
	`as£π
–
pTos
>=
p
->
aSèck
 );

3566 if–(
pCr§
 = 
p
->
aC§
[
i
].
pCurs‹
)!=0 ){

3567 
ªs
, 
rc
;

3569 
	`Såögify
(
pTos
);

3570 
	`as£π
–
p
->
aC§
[
i
].
de„ºedMovëo
==0 );

3571 
rc
 = 
	`sqlôeBåìKeyCom∑ª
(
pCr§
, 
pTos
->
z
,ÖTos->
n
, 4, &
ªs
);

3572 if–
rc
!=
SQLITE_OK
 ){

3575 if–
pOp
->
›code
==
OP_IdxLT
 ){

3576 
ªs
 = -res;

3577 }if–
pOp
->
›code
==
OP_IdxGE
 ){

3578 
ªs
++;

3580 if–
ªs
>0 ){

3581 
pc
 = 
pOp
->
p2
 - 1 ;

3584 
	`Rñó£
(
pTos
);

3585 
pTos
--;

3598 
OP_IdxIsNuŒ
: {

3599 
i
 = 
pOp
->
p1
;

3600 
k
, 
n
;

3601 c⁄° *
z
;

3603 
	`as£π
–
pTos
>=
p
->
aSèck
 );

3604 
	`as£π
–
pTos
->
Êags
 & 
MEM_Så
 );

3605 
z
 = 
pTos
->z;

3606 
n
 = 
pTos
->n;

3607 
k
=0; k<
n
 && 
i
>0; i--){

3608 if–
z
[
k
]=='a' ){

3609 
pc
 = 
pOp
->
p2
-1;

3612  
k
<
n
 && 
z
[k] ){ k++; }

3613 
k
++;

3615 
	`Rñó£
(
pTos
);

3616 
pTos
--;

3631 
OP_De°roy
: {

3632 
rc
 = 
	`sqlôeBåìDr›TabÀ
(
db
->
aDb
[
pOp
->
p2
].
pBt
,ÖOp->
p1
);

3648 
OP_CÀ¨
: {

3649 
rc
 = 
	`sqlôeBåìCÀ¨TabÀ
(
db
->
aDb
[
pOp
->
p2
].
pBt
,ÖOp->
p1
);

3678 
OP_Cª©eIndex
:

3679 
OP_Cª©eTabÀ
: {

3680 
pgno
;

3681 
	`as£π
–
pOp
->
p3
!=0 &&ÖOp->
p3ty≥
==
P3_POINTER
 );

3682 
	`as£π
–
pOp
->
p2
>=0 &&ÖOp->p2<
db
->
nDb
 );

3683 
	`as£π
–
db
->
aDb
[
pOp
->
p2
].
pBt
!=0 );

3684 if–
pOp
->
›code
==
OP_Cª©eTabÀ
 ){

3685 
rc
 = 
	`sqlôeBåìCª©eTabÀ
(
db
->
aDb
[
pOp
->
p2
].
pBt
, &
pgno
);

3687 
rc
 = 
	`sqlôeBåìCª©eIndex
(
db
->
aDb
[
pOp
->
p2
].
pBt
, &
pgno
);

3689 
pTos
++;

3690 if–
rc
==
SQLITE_OK
 ){

3691 
pTos
->
i
 = 
pgno
;

3692 
pTos
->
Êags
 = 
MEM_I¡
;

3693 *(
u32
*)
pOp
->
p3
 = 
pgno
;

3694 
pOp
->
p3
 = 0;

3696 
pTos
->
Êags
 = 
MEM_NuŒ
;

3717 
OP_I¡egrôyCk
: {

3718 
nRoŸ
;

3719 *
aRoŸ
;

3720 
iSë
 = 
pOp
->
p1
;

3721 
Së
 *
pSë
;

3722 
j
;

3723 
HashEÀm
 *
i
;

3724 *
z
;

3726 
	`as£π
–
iSë
>=0 && iSë<
p
->
nSë
 );

3727 
pTos
++;

3728 
pSë
 = &
p
->
aSë
[
iSë
];

3729 
nRoŸ
 = 
	`sqlôeHashCou¡
(&
pSë
->
hash
);

3730 
aRoŸ
 = 
	`sqlôeMÆlocRaw
–()*(
nRoŸ
+1) );

3731 if–
aRoŸ
==0 ) 
no_mem
;

3732 
j
=0, 
i
=
	`sqlôeHashFú°
(&
pSë
->
hash
); i; i=
	`sqlôeHashNext
(i), j++){

3733 
	`toI¡
((*)
	`sqlôeHashKey
(
i
), &
aRoŸ
[
j
]);

3735 
aRoŸ
[
j
] = 0;

3736 
	`sqlôeHashCÀ¨
(&
pSë
->
hash
);

3737 
pSë
->
¥ev
 = 0;

3738 
z
 = 
	`sqlôeBåìI¡egrôyCheck
(
db
->
aDb
[
pOp
->
p2
].
pBt
, 
aRoŸ
, 
nRoŸ
);

3739 if–
z
==0 || z[0]==0 ){

3740 if–
z
 ) 
	`sqlôeFªe
(z);

3741 
pTos
->
z
 = "ok";

3742 
pTos
->
n
 = 3;

3743 
pTos
->
Êags
 = 
MEM_Så
 | 
MEM_Sètic
;

3745 
pTos
->
z
 = z;

3746 
pTos
->
n
 = 
	`°æí
(
z
) + 1;

3747 
pTos
->
Êags
 = 
MEM_Så
 | 
MEM_Dyn
;

3749 
	`sqlôeFªe
(
aRoŸ
);

3758 
OP_Li°Wrôe
: {

3759 
Keyli°
 *
pKeyli°
;

3760 
	`as£π
–
pTos
>=
p
->
aSèck
 );

3761 
pKeyli°
 = 
p
->
pLi°
;

3762 if–
pKeyli°
==0 ||ÖKeyli°->
nU£d
>ıKeyli°->
nKey
 ){

3763 
pKeyli°
 = 
	`sqlôeMÆlocRaw
–(
Keyli°
)+999*’Keyli°->
aKey
[0]) );

3764 if–
pKeyli°
==0 ) 
no_mem
;

3765 
pKeyli°
->
nKey
 = 1000;

3766 
pKeyli°
->
nRód
 = 0;

3767 
pKeyli°
->
nU£d
 = 0;

3768 
pKeyli°
->
pNext
 = 
p
->
pLi°
;

3769 
p
->
pLi°
 = 
pKeyli°
;

3771 
	`I¡egîify
(
pTos
);

3772 
pKeyli°
->
aKey
[pKeyli°->
nU£d
++] = 
pTos
->
i
;

3773 
	`Rñó£
(
pTos
);

3774 
pTos
--;

3782 
OP_Li°Rewöd
: {

3786 
Keyli°
 *
pRev
, *
pT›
;

3787 
pRev
 = 0;

3788  
p
->
pLi°
 ){

3789 
pT›
 = 
p
->
pLi°
;

3790 
p
->
pLi°
 = 
pT›
->
pNext
;

3791 
pT›
->
pNext
 = 
pRev
;

3792 
pRev
 = 
pT›
;

3794 
p
->
pLi°
 = 
pRev
;

3804 
OP_Li°Ród
: {

3805 
Keyli°
 *
pKeyli°
;

3806 
CHECK_FOR_INTERRUPT
;

3807 
pKeyli°
 = 
p
->
pLi°
;

3808 if–
pKeyli°
!=0 ){

3809 
	`as£π
–
pKeyli°
->
nRód
>=0 );

3810 
	`as£π
–
pKeyli°
->
nRód
<pKeyli°->
nU£d
 );

3811 
	`as£π
–
pKeyli°
->
nRód
<pKeyli°->
nKey
 );

3812 
pTos
++;

3813 
pTos
->
i
 = 
pKeyli°
->
aKey
[pKeyli°->
nRód
++];

3814 
pTos
->
Êags
 = 
MEM_I¡
;

3815 if–
pKeyli°
->
nRód
>ıKeyli°->
nU£d
 ){

3816 
p
->
pLi°
 = 
pKeyli°
->
pNext
;

3817 
	`sqlôeFªe
(
pKeyli°
);

3820 
pc
 = 
pOp
->
p2
 - 1;

3829 
OP_Li°Re£t
: {

3830 if–
p
->
pLi°
 ){

3831 
	`sqlôeVdbeKeyli°Fªe
(
p
->
pLi°
);

3832 
p
->
pLi°
 = 0;

3842 
OP_Li°Push
: {

3843 
p
->
keyli°SèckDïth
++;

3844 
	`as£π
(
p
->
keyli°SèckDïth
 > 0);

3845 
p
->
keyli°Sèck
 = 
	`sqlôeRóŒoc
(p->keylistStack,

3846 (
Keyli°
 *Ë* 
p
->
keyli°SèckDïth
);

3847 if–
p
->
keyli°Sèck
==0 ) 
no_mem
;

3848 
p
->
keyli°Sèck
[p->
keyli°SèckDïth
 - 1] =Ö->
pLi°
;

3849 
p
->
pLi°
 = 0;

3858 
OP_Li°P›
: {

3859 
	`as£π
(
p
->
keyli°SèckDïth
 > 0);

3860 
p
->
keyli°SèckDïth
--;

3861 
	`sqlôeVdbeKeyli°Fªe
(
p
->
pLi°
);

3862 
p
->
pLi°
 =Ö->
keyli°Sèck
[p->
keyli°SèckDïth
];

3863 
p
->
keyli°Sèck
[p->
keyli°SèckDïth
] = 0;

3864 if–
p
->
keyli°SèckDïth
 == 0 ){

3865 
	`sqlôeFªe
(
p
->
keyli°Sèck
);

3866 
p
->
keyli°Sèck
 = 0;

3877 
OP_C⁄ãxtPush
: {

3878 
p
->
c⁄ãxtSèckDïth
++;

3879 
	`as£π
(
p
->
c⁄ãxtSèckDïth
 > 0);

3880 
p
->
c⁄ãxtSèck
 = 
	`sqlôeRóŒoc
(p->contextStack,

3881 (
C⁄ãxt
Ë* 
p
->
c⁄ãxtSèckDïth
);

3882 if–
p
->
c⁄ãxtSèck
==0 ) 
no_mem
;

3883 
p
->
c⁄ãxtSèck
[p->
c⁄ãxtSèckDïth
 - 1].
œ°Rowid
 =Ö->
db
->lastRowid;

3884 
p
->
c⁄ãxtSèck
[p->
c⁄ãxtSèckDïth
 - 1].
lsCh™ge
 =Ö->
db
->lsChange;

3885 
p
->
c⁄ãxtSèck
[p->
c⁄ãxtSèckDïth
 - 1].
csCh™ge
 =Ö->
db
->csChange;

3895 
OP_C⁄ãxtP›
: {

3896 
	`as£π
(
p
->
c⁄ãxtSèckDïth
 > 0);

3897 
p
->
c⁄ãxtSèckDïth
--;

3898 
p
->
db
->
œ°Rowid
 =Ö->
c⁄ãxtSèck
[p->
c⁄ãxtSèckDïth
].lastRowid;

3899 
p
->
db
->
lsCh™ge
 =Ö->
c⁄ãxtSèck
[p->
c⁄ãxtSèckDïth
].lsChange;

3900 
p
->
db
->
csCh™ge
 =Ö->
c⁄ãxtSèck
[p->
c⁄ãxtSèckDïth
].csChange;

3901 if–
p
->
c⁄ãxtSèckDïth
 == 0 ){

3902 
	`sqlôeFªe
(
p
->
c⁄ãxtSèck
);

3903 
p
->
c⁄ãxtSèck
 = 0;

3914 
OP_S‹tPut
: {

3915 
Mem
 *
pNos
 = &
pTos
[-1];

3916 
S‹ãr
 *
pS‹ãr
;

3917 
	`as£π
–
pNos
>=
p
->
aSèck
 );

3918 if–
	`Dy«micify
(
pTos
Ë|| Dy«micify(
pNos
ËË
no_mem
;

3919 
pS‹ãr
 = 
	`sqlôeMÆlocRaw
–(
S‹ãr
) );

3920 if–
pS‹ãr
==0 ) 
no_mem
;

3921 
pS‹ãr
->
pNext
 = 
p
->
pS‹t
;

3922 
p
->
pS‹t
 = 
pS‹ãr
;

3923 
	`as£π
–
pTos
->
Êags
 & 
MEM_Dyn
 );

3924 
pS‹ãr
->
nKey
 = 
pTos
->
n
;

3925 
pS‹ãr
->
zKey
 = 
pTos
->
z
;

3926 
	`as£π
–
pNos
->
Êags
 & 
MEM_Dyn
 );

3927 
pS‹ãr
->
nD©a
 = 
pNos
->
n
;

3928 
pS‹ãr
->
pD©a
 = 
pNos
->
z
;

3929 
pTos
 -= 2;

3939 
OP_S‹tMakeRec
: {

3940 *
z
;

3941 **
azArg
;

3942 
nByã
;

3943 
nFõld
;

3944 
i
;

3945 
Mem
 *
pRec
;

3947 
nFõld
 = 
pOp
->
p1
;

3948 
pRec
 = &
pTos
[1-
nFõld
];

3949 
	`as£π
–
pRec
>=
p
->
aSèck
 );

3950 
nByã
 = 0;

3951 
i
=0; i<
nFõld
; i++, 
pRec
++){

3952 if–(
pRec
->
Êags
 & 
MEM_NuŒ
)==0 ){

3953 
	`Såögify
(
pRec
);

3954 
nByã
 +
pRec
->
n
;

3957 
nByã
 +(*)*(
nFõld
+1);

3958 
azArg
 = 
	`sqlôeMÆlocRaw
–
nByã
 );

3959 if–
azArg
==0 ) 
no_mem
;

3960 
z
 = (*)&
azArg
[
nFõld
+1];

3961 
pRec
=&
pTos
[1-
nFõld
], 
i
=0; i<nField; i++,ÖRec++){

3962 if–
pRec
->
Êags
 & 
MEM_NuŒ
 ){

3963 
azArg
[
i
] = 0;

3965 
azArg
[
i
] = 
z
;

3966 
	`mem˝y
(
z
, 
pRec
->z,ÖRec->
n
);

3967 
z
 +
pRec
->
n
;

3970 
	`p›Sèck
(&
pTos
, 
nFõld
);

3971 
pTos
++;

3972 
pTos
->
n
 = 
nByã
;

3973 
pTos
->
z
 = (*)
azArg
;

3974 
pTos
->
Êags
 = 
MEM_Så
 | 
MEM_Dyn
;

3993 
OP_S‹tMakeKey
: {

3994 *
zNewKey
;

3995 
nByã
;

3996 
nFõld
;

3997 
i
, 
j
, 
k
;

3998 
Mem
 *
pRec
;

4000 
nFõld
 = 
	`°æí
(
pOp
->
p3
);

4001 
pRec
 = &
pTos
[1-
nFõld
];

4002 
nByã
 = 1;

4003 
i
=0; i<
nFõld
; i++, 
pRec
++){

4004 if–
pRec
->
Êags
 & 
MEM_NuŒ
 ){

4005 
nByã
 += 2;

4007 
	`Såögify
(
pRec
);

4008 
nByã
 +
pRec
->
n
+2;

4011 
zNewKey
 = 
	`sqlôeMÆlocRaw
–
nByã
 );

4012 if–
zNewKey
==0 ) 
no_mem
;

4013 
j
 = 0;

4014 
k
 = 0;

4015 
pRec
=&
pTos
[1-
nFõld
], 
i
=0; i<nField; i++,ÖRec++){

4016 if–
pRec
->
Êags
 & 
MEM_NuŒ
 ){

4017 
zNewKey
[
j
++] = 'N';

4018 
zNewKey
[
j
++] = 0;

4019 
k
++;

4021 
zNewKey
[
j
++] = 
pOp
->
p3
[
k
++];

4022 
	`mem˝y
(&
zNewKey
[
j
], 
pRec
->
z
,ÖRec->
n
-1);

4023 
j
 +
pRec
->
n
-1;

4024 
zNewKey
[
j
++] = 0;

4027 
zNewKey
[
j
] = 0;

4028 
	`as£π
–
j
<
nByã
 );

4029 
	`p›Sèck
(&
pTos
, 
nFõld
);

4030 
pTos
++;

4031 
pTos
->
n
 = 
nByã
;

4032 
pTos
->
Êags
 = 
MEM_Så
|
MEM_Dyn
;

4033 
pTos
->
z
 = 
zNewKey
;

4042 
OP_S‹t
: {

4043 
i
;

4044 
S‹ãr
 *
pEÀm
;

4045 
S‹ãr
 *
≠S‹ãr
[
NSORT
];

4046 
i
=0; i<
NSORT
; i++){

4047 
≠S‹ãr
[
i
] = 0;

4049  
p
->
pS‹t
 ){

4050 
pEÀm
 = 
p
->
pS‹t
;

4051 
p
->
pS‹t
 = 
pEÀm
->
pNext
;

4052 
pEÀm
->
pNext
 = 0;

4053 
i
=0; i<
NSORT
-1; i++){

4054 if–
≠S‹ãr
[
i
]==0 ){

4055 
≠S‹ãr
[
i
] = 
pEÀm
;

4058 
pEÀm
 = 
	`Mîge
(
≠S‹ãr
[
i
],ÖElem);

4059 
≠S‹ãr
[
i
] = 0;

4062 if–
i
>=
NSORT
-1 ){

4063 
≠S‹ãr
[
NSORT
-1] = 
	`Mîge
◊pS‹ãr[NSORT-1],
pEÀm
);

4066 
pEÀm
 = 0;

4067 
i
=0; i<
NSORT
; i++){

4068 
pEÀm
 = 
	`Mîge
(
≠S‹ãr
[
i
],ÖElem);

4070 
p
->
pS‹t
 = 
pEÀm
;

4081 
OP_S‹tNext
: {

4082 
S‹ãr
 *
pS‹ãr
 = 
p
->
pS‹t
;

4083 
CHECK_FOR_INTERRUPT
;

4084 if–
pS‹ãr
!=0 ){

4085 
p
->
pS‹t
 = 
pS‹ãr
->
pNext
;

4086 
pTos
++;

4087 
pTos
->
z
 = 
pS‹ãr
->
pD©a
;

4088 
pTos
->
n
 = 
pS‹ãr
->
nD©a
;

4089 
pTos
->
Êags
 = 
MEM_Så
|
MEM_Dyn
;

4090 
	`sqlôeFªe
(
pS‹ãr
->
zKey
);

4091 
	`sqlôeFªe
(
pS‹ãr
);

4093 
pc
 = 
pOp
->
p2
 - 1;

4105 
OP_S‹tCÆlback
: {

4106 
	`as£π
–
pTos
>=
p
->
aSèck
 );

4107 
	`as£π
–
pTos
->
Êags
 & 
MEM_Så
 );

4108 
p
->
nCÆlback
++;

4109 
p
->
pc
 =Öc+1;

4110 
p
->
azResCﬁumn
 = (**)
pTos
->
z
;

4111 
	`as£π
–
p
->
nResCﬁumn
==
pOp
->
p1
 );

4112 
p
->
p›Sèck
 = 1;

4113 
p
->
pTos
 =ÖTos;

4114  
SQLITE_ROW
;

4121 
OP_S‹tRe£t
: {

4122 
	`sqlôeVdbeS‹ãrRe£t
(
p
);

4131 
OP_FûeO≥n
: {

4132 
	`as£π
–
pOp
->
p3
!=0 );

4133 if–
p
->
pFûe
 ){

4134 if–
p
->
pFûe
!=
°dö
 ) 
	`f˛o£
(p->pFile);

4135 
p
->
pFûe
 = 0;

4137 if–
	`sqlôeSåICmp
(
pOp
->
p3
,"stdin")==0 ){

4138 
p
->
pFûe
 = 
°dö
;

4140 
p
->
pFûe
 = 
	`f›í
(
pOp
->
p3
, "r");

4142 if–
p
->
pFûe
==0 ){

4143 
	`sqlôeSëSåög
(&
p
->
zEºMsg
,"u«bÀÅÿ›í fûe: ", 
pOp
->
p3
, (*)0);

4144 
rc
 = 
SQLITE_ERROR
;

4162 
OP_FûeRód
: {

4163 
n
, 
eﬁ
, 
nFõld
, 
i
, 
c
, 
nDñim
;

4164 *
zDñim
, *
z
;

4165 
CHECK_FOR_INTERRUPT
;

4166 if–
p
->
pFûe
==0 ) 
fûîód_jump
;

4167 
nFõld
 = 
pOp
->
p1
;

4168 if–
nFõld
<=0 ) 
fûîód_jump
;

4169 if–
nFõld
!=
p
->nFõld ||Ö->
azFõld
==0 ){

4170 **
azFõld
 = 
	`sqlôeRóŒoc
(
p
->azFõld, (*)*
nFõld
+1);

4171 if–
azFõld
==0 ){ 
no_mem
; }

4172 
p
->
azFõld
 =ázField;

4173 
p
->
nFõld
 =ÇField;

4175 
n
 = 0;

4176 
eﬁ
 = 0;

4177  
eﬁ
==0 ){

4178 if–
p
->
zLöe
==0 || 
n
+200>p->
nLöeAŒoc
 ){

4179 *
zLöe
;

4180 
p
->
nLöeAŒoc
 =Ö->nLineAlloc*2 + 300;

4181 
zLöe
 = 
	`sqlôeRóŒoc
(
p
->zLöe,Ö->
nLöeAŒoc
);

4182 if–
zLöe
==0 ){

4183 
p
->
nLöeAŒoc
 = 0;

4184 
	`sqlôeFªe
(
p
->
zLöe
);

4185 
p
->
zLöe
 = 0;

4186 
no_mem
;

4188 
p
->
zLöe
 = zLine;

4190 if–
	`vdbe_fgës
(&
p
->
zLöe
[
n
],Ö->
nLöeAŒoc
-n,Ö->
pFûe
)==0 ){

4191 
eﬁ
 = 1;

4192 
p
->
zLöe
[
n
] = 0;

4194 
c
;

4195  (
c
 = 
p
->
zLöe
[
n
])!=0 ){

4196 if–
c
=='\\' ){

4197 if–
p
->
zLöe
[
n
+1]==0 ) ;

4198 
n
 += 2;

4199 }if–
c
=='\n' ){

4200 
p
->
zLöe
[
n
] = 0;

4201 
eﬁ
 = 1;

4204 
n
++;

4209 if–
n
==0 ) 
fûîód_jump
;

4210 
z
 = 
p
->
zLöe
;

4211 if–
z
[0]=='\\' && z[1]=='.' && z[2]==0 ){

4212 
fûîód_jump
;

4214 
zDñim
 = 
pOp
->
p3
;

4215 if–
zDñim
==0 ) zDelim = "\t";

4216 
c
 = 
zDñim
[0];

4217 
nDñim
 = 
	`°æí
(
zDñim
);

4218 
p
->
azFõld
[0] = 
z
;

4219 
i
=1; *
z
!=0 && i<=
nFõld
; i++){

4220 
‰om
, 
to
;

4221 
‰om
 = 
to
 = 0;

4222 if–
z
[0]=='\\' && z[1]=='N'

4223 && (
z
[2]==0 || 
	`°∫cmp
(&z[2],
zDñim
,
nDñim
)==0) ){

4224 if–
i
<=
nFõld
 ) 
p
->
azFõld
[i-1] = 0;

4225 
z
 +2 + 
nDñim
;

4226 if–
i
<
nFõld
 ) 
p
->
azFõld
[i] = 
z
;

4229  
z
[
‰om
] ){

4230 if–
z
[
‰om
]=='\\' && z[from+1]!=0 ){

4231 
tx
 = 
z
[
‰om
+1];

4232  
tx
 ){

4233 'b': 
tx
 = '\b'; ;

4234 'f': 
tx
 = '\f'; ;

4235 'n': 
tx
 = '\n'; ;

4236 'r': 
tx
 = '\r'; ;

4237 't': 
tx
 = '\t'; ;

4238 'v': 
tx
 = '\v'; ;

4241 
z
[
to
++] = 
tx
;

4242 
‰om
 += 2;

4245 if–
z
[
‰om
]==
c
 && 
	`°∫cmp
(&z[‰om],
zDñim
,
nDñim
)==0 ) ;

4246 
z
[
to
++] = z[
‰om
++];

4248 if–
z
[
‰om
] ){

4249 
z
[
to
] = 0;

4250 
z
 +
‰om
 + 
nDñim
;

4251 if–
i
<
nFõld
 ) 
p
->
azFõld
[i] = 
z
;

4253 
z
[
to
] = 0;

4254 
z
 = "";

4257  
i
<
nFõld
 ){

4258 
p
->
azFõld
[
i
++] = 0;

4264 
fûîód_jump
:

4265 
pc
 = 
pOp
->
p2
 - 1;

4274 
OP_FûeCﬁumn
: {

4275 
i
 = 
pOp
->
p1
;

4276 *
z
;

4277 
	`as£π
–
i
>=0 && i<
p
->
nFõld
 );

4278 if–
p
->
azFõld
 ){

4279 
z
 = 
p
->
azFõld
[
i
];

4281 
z
 = 0;

4283 
pTos
++;

4284 if–
z
 ){

4285 
pTos
->
n
 = 
	`°æí
(
z
) + 1;

4286 
pTos
->
z
 = z;

4287 
pTos
->
Êags
 = 
MEM_Så
 | 
MEM_Ephem
;

4289 
pTos
->
Êags
 = 
MEM_NuŒ
;

4304 
OP_MemSt‹e
: {

4305 
i
 = 
pOp
->
p1
;

4306 
Mem
 *
pMem
;

4307 
	`as£π
–
pTos
>=
p
->
aSèck
 );

4308 if–
i
>=
p
->
nMem
 ){

4309 
nOld
 = 
p
->
nMem
;

4310 
Mem
 *
aMem
;

4311 
p
->
nMem
 = 
i
 + 5;

4312 
aMem
 = 
	`sqlôeRóŒoc
(
p
->aMem,Ö->
nMem
*(p->aMem[0]));

4313 if–
aMem
==0 ) 
no_mem
;

4314 if–
aMem
!=
p
->aMem ){

4315 
j
;

4316 
j
=0; j<
nOld
; j++){

4317 if–
aMem
[
j
].
Êags
 & 
MEM_Sh‹t
 ){

4318 
aMem
[
j
].
z
 =áMem[j].
zSh‹t
;

4322 
p
->
aMem
 =áMem;

4323 if–
nOld
<
p
->
nMem
 ){

4324 
	`mem£t
(&
p
->
aMem
[
nOld
], 0, ’->aMem[0])*’->
nMem
-nOld));

4327 
	`DìphemîÆize
(
pTos
);

4328 
pMem
 = &
p
->
aMem
[
i
];

4329 
	`Rñó£
(
pMem
);

4330 *
pMem
 = *
pTos
;

4331 if–
pMem
->
Êags
 & 
MEM_Dyn
 ){

4332 if–
pOp
->
p2
 ){

4333 
pTos
->
Êags
 = 
MEM_NuŒ
;

4335 
pMem
->
z
 = 
	`sqlôeMÆlocRaw
–pMem->
n
 );

4336 if–
pMem
->
z
==0 ) 
no_mem
;

4337 
	`mem˝y
(
pMem
->
z
, 
pTos
->z,ÖMem->
n
);

4339 }if–
pMem
->
Êags
 & 
MEM_Sh‹t
 ){

4340 
pMem
->
z
 =ÖMem->
zSh‹t
;

4342 if–
pOp
->
p2
 ){

4343 
	`Rñó£
(
pTos
);

4344 
pTos
--;

4358 
OP_MemLﬂd
: {

4359 
i
 = 
pOp
->
p1
;

4360 
	`as£π
–
i
>=0 && i<
p
->
nMem
 );

4361 
pTos
++;

4362 
	`mem˝y
(
pTos
, &
p
->
aMem
[
i
], ’Tos[0])-
NBFS
);;

4363 if–
pTos
->
Êags
 & 
MEM_Så
 ){

4364 
pTos
->
Êags
 |
MEM_Ephem
;

4365 
pTos
->
Êags
 &~(
MEM_Dyn
|
MEM_Sètic
|
MEM_Sh‹t
);

4379 
OP_MemIn¸
: {

4380 
i
 = 
pOp
->
p1
;

4381 
Mem
 *
pMem
;

4382 
	`as£π
–
i
>=0 && i<
p
->
nMem
 );

4383 
pMem
 = &
p
->
aMem
[
i
];

4384 
	`as£π
–
pMem
->
Êags
==
MEM_I¡
 );

4385 
pMem
->
i
++;

4386 if–
pOp
->
p2
>0 && 
pMem
->
i
>0 ){

4387 
pc
 = 
pOp
->
p2
 - 1;

4397 
OP_AggRe£t
: {

4398 
	`sqlôeVdbeAggRe£t
(&
p
->
agg
);

4399 
p
->
agg
.
nMem
 = 
pOp
->
p2
;

4400 
p
->
agg
.
≠Func
 = 
	`sqlôeMÆloc
–p->agg.
nMem
*(p->agg.apFunc[0]) );

4401 if–
p
->
agg
.
≠Func
==0 ) 
no_mem
;

4411 
OP_AggInô
: {

4412 
i
 = 
pOp
->
p2
;

4413 
	`as£π
–
i
>=0 && i<
p
->
agg
.
nMem
 );

4414 
p
->
agg
.
≠Func
[
i
] = (
FuncDef
*)
pOp
->
p3
;

4429 
OP_AggFunc
: {

4430 
n
 = 
pOp
->
p2
;

4431 
i
;

4432 
Mem
 *
pMem
, *
pRec
;

4433 **
azArgv
 = 
p
->
zArgv
;

4434 
sqlôe_func
 
˘x
;

4436 
	`as£π
–
n
>=0 );

4437 
	`as£π
–
pTos
->
Êags
==
MEM_I¡
 );

4438 
pRec
 = &
pTos
[-
n
];

4439 
	`as£π
–
pRec
>=
p
->
aSèck
 );

4440 
i
=0; i<
n
; i++, 
pRec
++){

4441 if–
pRec
->
Êags
 & 
MEM_NuŒ
 ){

4442 
azArgv
[
i
] = 0;

4444 
	`Såögify
(
pRec
);

4445 
azArgv
[
i
] = 
pRec
->
z
;

4448 
i
 = 
pTos
->i;

4449 
	`as£π
–
i
>=0 && i<
p
->
agg
.
nMem
 );

4450 
˘x
.
pFunc
 = (
FuncDef
*)
pOp
->
p3
;

4451 
pMem
 = &
p
->
agg
.
pCuºít
->
aMem
[
i
];

4452 
˘x
.
s
.
z
 = 
pMem
->
zSh‹t
;

4453 
˘x
.
pAgg
 = 
pMem
->
z
;

4454 
˘x
.
˙t
 = ++
pMem
->
i
;

4455 
˘x
.
isEº‹
 = 0;

4456 
˘x
.
isSãp
 = 1;

4457 (
˘x
.
pFunc
->
xSãp
)(&˘x, 
n
, (c⁄° **)
azArgv
);

4458 
pMem
->
z
 = 
˘x
.
pAgg
;

4459 
pMem
->
Êags
 = 
MEM_AggCtx
;

4460 
	`p›Sèck
(&
pTos
, 
n
+1);

4461 if–
˘x
.
isEº‹
 ){

4462 
rc
 = 
SQLITE_ERROR
;

4481 
OP_AggFocus
: {

4482 
AggEÀm
 *
pEÀm
;

4483 *
zKey
;

4484 
nKey
;

4486 
	`as£π
–
pTos
>=
p
->
aSèck
 );

4487 
	`Såögify
(
pTos
);

4488 
zKey
 = 
pTos
->
z
;

4489 
nKey
 = 
pTos
->
n
;

4490 
pEÀm
 = 
	`sqlôeHashFöd
(&
p
->
agg
.
hash
, 
zKey
, 
nKey
);

4491 if–
pEÀm
 ){

4492 
p
->
agg
.
pCuºít
 = 
pEÀm
;

4493 
pc
 = 
pOp
->
p2
 - 1;

4495 
	`AggIn£π
(&
p
->
agg
, 
zKey
, 
nKey
);

4496 if–
sqlôe_mÆloc_Áûed
 ) 
no_mem
;

4498 
	`Rñó£
(
pTos
);

4499 
pTos
--;

4508 
OP_AggSë
: {

4509 
AggEÀm
 *
pFocus
 = 
	`AggInFocus
(
p
->
agg
);

4510 
Mem
 *
pMem
;

4511 
i
 = 
pOp
->
p2
;

4512 
	`as£π
–
pTos
>=
p
->
aSèck
 );

4513 if–
pFocus
==0 ) 
no_mem
;

4514 
	`as£π
–
i
>=0 && i<
p
->
agg
.
nMem
 );

4515 
	`DìphemîÆize
(
pTos
);

4516 
pMem
 = &
pFocus
->
aMem
[
i
];

4517 
	`Rñó£
(
pMem
);

4518 *
pMem
 = *
pTos
;

4519 if–
pMem
->
Êags
 & 
MEM_Dyn
 ){

4520 
pTos
->
Êags
 = 
MEM_NuŒ
;

4521 }if–
pMem
->
Êags
 & 
MEM_Sh‹t
 ){

4522 
pMem
->
z
 =ÖMem->
zSh‹t
;

4524 
	`Rñó£
(
pTos
);

4525 
pTos
--;

4535 
OP_AggGë
: {

4536 
AggEÀm
 *
pFocus
 = 
	`AggInFocus
(
p
->
agg
);

4537 
Mem
 *
pMem
;

4538 
i
 = 
pOp
->
p2
;

4539 if–
pFocus
==0 ) 
no_mem
;

4540 
	`as£π
–
i
>=0 && i<
p
->
agg
.
nMem
 );

4541 
pTos
++;

4542 
pMem
 = &
pFocus
->
aMem
[
i
];

4543 *
pTos
 = *
pMem
;

4544 if–
pTos
->
Êags
 & 
MEM_Så
 ){

4545 
pTos
->
Êags
 &~(
MEM_Dyn
|
MEM_Sètic
|
MEM_Sh‹t
);

4546 
pTos
->
Êags
 |
MEM_Ephem
;

4548 if–
pTos
->
Êags
 & 
MEM_AggCtx
 ){

4549 
	`Rñó£
(
pTos
);

4550 
pTos
->
Êags
 = 
MEM_NuŒ
;

4567 
OP_AggNext
: {

4568 
CHECK_FOR_INTERRUPT
;

4569 if–
p
->
agg
.
pSórch
==0 ){

4570 
p
->
agg
.
pSórch
 = 
	`sqlôeHashFú°
(&p->agg.
hash
);

4572 
p
->
agg
.
pSórch
 = 
	`sqlôeHashNext
(p->agg.pSearch);

4574 if–
p
->
agg
.
pSórch
==0 ){

4575 
pc
 = 
pOp
->
p2
 - 1;

4577 
i
;

4578 
sqlôe_func
 
˘x
;

4579 
Mem
 *
aMem
;

4580 
p
->
agg
.
pCuºít
 = 
	`sqlôeHashD©a
’->agg.
pSórch
);

4581 
aMem
 = 
p
->
agg
.
pCuºít
->aMem;

4582 
i
=0; i<
p
->
agg
.
nMem
; i++){

4583 
‰ìCtx
;

4584 if–
p
->
agg
.
≠Func
[
i
]==0 ) ;

4585 if–
p
->
agg
.
≠Func
[
i
]->
xFöÆize
==0 ) ;

4586 
˘x
.
s
.
Êags
 = 
MEM_NuŒ
;

4587 
˘x
.
s
.
z
 = 
aMem
[
i
].
zSh‹t
;

4588 
˘x
.
pAgg
 = (*)
aMem
[
i
].
z
;

4589 
‰ìCtx
 = 
aMem
[
i
].
z
 &&áMem[i].z!˜Mem[i].
zSh‹t
;

4590 
˘x
.
˙t
 = 
aMem
[
i
].i;

4591 
˘x
.
isSãp
 = 0;

4592 
˘x
.
pFunc
 = 
p
->
agg
.
≠Func
[
i
];

4593 (*
p
->
agg
.
≠Func
[
i
]->
xFöÆize
)(&
˘x
);

4594 if–
‰ìCtx
 ){

4595 
	`sqlôeFªe
–
aMem
[
i
].
z
 );

4597 
aMem
[
i
] = 
˘x
.
s
;

4598 if–
aMem
[
i
].
Êags
 & 
MEM_Sh‹t
 ){

4599 
aMem
[
i
].
z
 =áMem[i].
zSh‹t
;

4612 
OP_SëIn£π
: {

4613 
i
 = 
pOp
->
p1
;

4614 if–
p
->
nSë
<=
i
 ){

4615 
k
;

4616 
Së
 *
aSë
 = 
	`sqlôeRóŒoc
(
p
->aSë, (
i
+1)*(p->aSet[0]) );

4617 if–
aSë
==0 ) 
no_mem
;

4618 
p
->
aSë
 =áSet;

4619 
k
=
p
->
nSë
; k<=
i
; k++){

4620 
	`sqlôeHashInô
(&
p
->
aSë
[
k
].
hash
, 
SQLITE_HASH_BINARY
, 1);

4622 
p
->
nSë
 = 
i
+1;

4624 if–
pOp
->
p3
 ){

4625 
	`sqlôeHashIn£π
(&
p
->
aSë
[
i
].
hash
, 
pOp
->
p3
, 
	`°æí
(pOp->p3)+1,Ö);

4627 
	`as£π
–
pTos
>=
p
->
aSèck
 );

4628 
	`Såögify
(
pTos
);

4629 
	`sqlôeHashIn£π
(&
p
->
aSë
[
i
].
hash
, 
pTos
->
z
,ÖTos->
n
,Ö);

4630 
	`Rñó£
(
pTos
);

4631 
pTos
--;

4633 if–
sqlôe_mÆloc_Áûed
 ) 
no_mem
;

4643 
OP_SëFound
: {

4644 
i
 = 
pOp
->
p1
;

4645 
	`as£π
–
pTos
>=
p
->
aSèck
 );

4646 
	`Såögify
(
pTos
);

4647 if–
i
>=0 && i<
p
->
nSë
 && 
	`sqlôeHashFöd
(&p->
aSë
[i].
hash
, 
pTos
->
z
,ÖTos->
n
)){

4648 
pc
 = 
pOp
->
p2
 - 1;

4650 
	`Rñó£
(
pTos
);

4651 
pTos
--;

4661 
OP_SëNŸFound
: {

4662 
i
 = 
pOp
->
p1
;

4663 
	`as£π
–
pTos
>=
p
->
aSèck
 );

4664 
	`Såögify
(
pTos
);

4665 if–
i
<0 || i>=
p
->
nSë
 ||

4666 
	`sqlôeHashFöd
(&
p
->
aSë
[
i
].
hash
, 
pTos
->
z
,ÖTos->
n
)==0 ){

4667 
pc
 = 
pOp
->
p2
 - 1;

4669 
	`Rñó£
(
pTos
);

4670 
pTos
--;

4686 
OP_SëFú°
:

4687 
OP_SëNext
: {

4688 
Së
 *
pSë
;

4689 
CHECK_FOR_INTERRUPT
;

4690 if–
pOp
->
p1
<0 ||ÖOp->p1>=
p
->
nSë
 ){

4691 if–
pOp
->
›code
==
OP_SëFú°
 ) 
pc
 =ÖOp->
p2
 - 1;

4694 
pSë
 = &
p
->
aSë
[
pOp
->
p1
];

4695 if–
pOp
->
›code
==
OP_SëFú°
 ){

4696 
pSë
->
¥ev
 = 
	`sqlôeHashFú°
(&pSë->
hash
);

4697 if–
pSë
->
¥ev
==0 ){

4698 
pc
 = 
pOp
->
p2
 - 1;

4702 if–
pSë
->
¥ev
 ){

4703 
pSë
->
¥ev
 = 
	`sqlôeHashNext
(pSet->prev);

4705 if–
pSë
->
¥ev
==0 ){

4708 
pc
 = 
pOp
->
p2
 - 1;

4711 
pTos
++;

4712 
pTos
->
z
 = 
	`sqlôeHashKey
(
pSë
->
¥ev
);

4713 
pTos
->
n
 = 
	`sqlôeHashKeysize
(
pSë
->
¥ev
);

4714 
pTos
->
Êags
 = 
MEM_Så
 | 
MEM_Ephem
;

4736 
OP_SèckDïth
: {

4737 
dïth
 = (&
pTos
[1]Ë- 
p
->
aSèck
;

4738 
pTos
++;

4739 
pTos
->
i
 = 
dïth
;

4740 
pTos
->
Êags
 = 
MEM_I¡
;

4750 
OP_SèckRe£t
: {

4751 
dïth
, 
gﬂl
;

4752 
	`as£π
–
pTos
>=
p
->
aSèck
 );

4753 
	`I¡egîify
(
pTos
);

4754 
gﬂl
 = 
pTos
->
i
;

4755 
dïth
 = (&
pTos
[1]Ë- 
p
->
aSèck
;

4756 
	`as£π
–
gﬂl
<
dïth
 );

4757 
	`p›Sèck
(&
pTos
, 
dïth
-
gﬂl
);

4764 
	`sqlôe_¢¥ötf
((
zBuf
),zBuf,"%d",
pOp
->
›code
);

4765 
	`sqlôeSëSåög
(&
p
->
zEºMsg
, "unknow¿›codê", 
zBuf
, (*)0);

4766 
rc
 = 
SQLITE_INTERNAL
;

4778 #ifde‡
VDBE_PROFILE


4780 
ñ≠£
 = 
	`hwtime
(Ë- 
°¨t
;

4781 
pOp
->
cy˛es
 +
ñ≠£
;

4782 
pOp
->
˙t
++;

4784 
	`Ârötf
(
°dout
, "%10Œd ", 
ñ≠£
);

4785 
	`sqlôeVdbePrötOp
(
°dout
, 
‹igPc
, &
p
->
aOp
[origPc]);

4795 #i‚de‡
NDEBUG


4797 if–
pTos
>=
p
->
aSèck
 ){

4798 
	`as£π
–
pTos
->
Êags
!=0 );

4799 if–
pTos
->
Êags
 & 
MEM_Så
 ){

4800 
x
 = 
pTos
->
Êags
 & (
MEM_Sètic
|
MEM_Dyn
|
MEM_Ephem
|
MEM_Sh‹t
);

4801 
	`as£π
–
x
!=0 );

4802 
	`as£π
–(
x
 & (x-1))==0 );

4803 
	`as£π
–
pTos
->
z
!=0 );

4805 
	`as£π
–(
pTos
->
Êags
 & 
MEM_Sh‹t
)==0 ||ÖTos->
z
=ıTos->
zSh‹t
 );

4806 
	`as£π
–(
pTos
->
Êags
 & 
MEM_Sh‹t
)!=0 ||ÖTos->
z
!ıTos->
zSh‹t
 );

4809 
	`as£π
–(
pTos
->
Êags
 & (
MEM_Sètic
|
MEM_Dyn
|
MEM_Ephem
|
MEM_Sh‹t
))==0 );

4812 
	`as£π
–
pTos
->
Êags
==
MEM_NuŒ
 || (pTos->flags&MEM_Null)==0 );

4814 if–
pc
<-1 ||Öc>=
p
->
nOp
 ){

4815 
	`sqlôeSëSåög
(&
p
->
zEºMsg
, "jump destination out ofÑange", (*)0);

4816 
rc
 = 
SQLITE_INTERNAL
;

4818 if–
p
->
åa˚
 && 
pTos
>ı->
aSèck
 ){

4819 
i
;

4820 
	`Ârötf
(
p
->
åa˚
, "Stack:");

4821 
i
=0; i>-5 && &
pTos
[i]>=
p
->
aSèck
; i--){

4822 if–
pTos
[
i
].
Êags
 & 
MEM_NuŒ
 ){

4823 
	`Ârötf
(
p
->
åa˚
, " NULL");

4824 }if–(
pTos
[
i
].
Êags
 & (
MEM_I¡
|
MEM_Så
))==(MEM_Int|MEM_Str) ){

4825 
	`Ârötf
(
p
->
åa˚
, " si:%d", 
pTos
[
i
].i);

4826 }if–
pTos
[
i
].
Êags
 & 
MEM_I¡
 ){

4827 
	`Ârötf
(
p
->
åa˚
, " i:%d", 
pTos
[
i
].i);

4828 }if–
pTos
[
i
].
Êags
 & 
MEM_Ról
 ){

4829 
	`Ârötf
(
p
->
åa˚
, "Ñ:%g", 
pTos
[
i
].
r
);

4830 }if–
pTos
[
i
].
Êags
 & 
MEM_Så
 ){

4831 
j
, 
k
;

4832 
zBuf
[100];

4833 
zBuf
[0] = ' ';

4834 if–
pTos
[
i
].
Êags
 & 
MEM_Dyn
 ){

4835 
zBuf
[1] = 'z';

4836 
	`as£π
–(
pTos
[
i
].
Êags
 & (
MEM_Sètic
|
MEM_Ephem
))==0 );

4837 }if–
pTos
[
i
].
Êags
 & 
MEM_Sètic
 ){

4838 
zBuf
[1] = 't';

4839 
	`as£π
–(
pTos
[
i
].
Êags
 & (
MEM_Dyn
|
MEM_Ephem
))==0 );

4840 }if–
pTos
[
i
].
Êags
 & 
MEM_Ephem
 ){

4841 
zBuf
[1] = 'e';

4842 
	`as£π
–(
pTos
[
i
].
Êags
 & (
MEM_Sètic
|
MEM_Dyn
))==0 );

4844 
zBuf
[1] = 's';

4846 
zBuf
[2] = '[';

4847 
k
 = 3;

4848 
j
=0; j<20 && j<
pTos
[
i
].
n
; j++){

4849 
c
 = 
pTos
[
i
].
z
[
j
];

4850 if–
c
==0 && 
j
==
pTos
[
i
].
n
-1 ) ;

4851 if–
	`i•röt
(
c
Ë&& !
	`is•a˚
(c) ){

4852 
zBuf
[
k
++] = 
c
;

4854 
zBuf
[
k
++] = '.';

4857 
zBuf
[
k
++] = ']';

4858 
zBuf
[
k
++] = 0;

4859 
	`Ârötf
(
p
->
åa˚
, "%s", 
zBuf
);

4861 
	`Ârötf
(
p
->
åa˚
, " ???");

4864 if–
rc
!=0 ) 
	`Ârötf
(
p
->
åa˚
,"Ñc=%d",rc);

4865 
	`Ârötf
(
p
->
åa˚
,"\n");

4872 
vdbe_hÆt
:

4873 
CHECK_FOR_INTERRUPT


4874 if–
rc
 ){

4875 
p
->
rc
 =Ñc;

4876 
rc
 = 
SQLITE_ERROR
;

4878 
rc
 = 
SQLITE_DONE
;

4880 
p
->
magic
 = 
VDBE_MAGIC_HALT
;

4881 
p
->
pTos
 =ÖTos;

4882  
rc
;

4887 
no_mem
:

4888 
	`sqlôeSëSåög
(&
p
->
zEºMsg
, "out of memory", (*)0);

4889 
rc
 = 
SQLITE_NOMEM
;

4890 
vdbe_hÆt
;

4894 
ab‹t_due_to_misu£
:

4895 
rc
 = 
SQLITE_MISUSE
;

4901 
ab‹t_due_to_îr‹
:

4902 if–
p
->
zEºMsg
==0 ){

4903 if–
sqlôe_mÆloc_Áûed
 ) 
rc
 = 
SQLITE_NOMEM
;

4904 
	`sqlôeSëSåög
(&
p
->
zEºMsg
, 
	`sqlôe_îr‹_°rög
(
rc
), (*)0);

4906 
vdbe_hÆt
;

4911 
ab‹t_due_to_öãºu±
:

4912 
	`as£π
–
db
->
Êags
 & 
SQLITE_I¡îru±
 );

4913 
db
->
Êags
 &~
SQLITE_I¡îru±
;

4914 if–
db
->
magic
!=
SQLITE_MAGIC_BUSY
 ){

4915 
rc
 = 
SQLITE_MISUSE
;

4917 
rc
 = 
SQLITE_INTERRUPT
;

4919 
	`sqlôeSëSåög
(&
p
->
zEºMsg
, 
	`sqlôe_îr‹_°rög
(
rc
), (*)0);

4920 
vdbe_hÆt
;

4921 
	}
}

	@vdbe.h

20 #i‚de‡
_SQLITE_VDBE_H_


21 
	#_SQLITE_VDBE_H_


	)

22 
	~<°dio.h
>

29 
Vdbe
 
	tVdbe
;

36 
	sVdbeOp
 {

37 
u8
 
	m›code
;

38 
	mp1
;

39 
	mp2
;

40 *
	mp3
;

41 
	mp3ty≥
;

42 #ifde‡
VDBE_PROFILE


43 
	m˙t
;

44 
	mcy˛es
;

47 
VdbeOp
 
	tVdbeOp
;

53 
	sVdbeOpLi°
 {

54 
u8
 
	m›code
;

55 sig√d 
	mp1
;

56 
	mp2
;

57 *
	mp3
;

59 
VdbeOpLi°
 
	tVdbeOpLi°
;

64 
	#P3_NOTUSED
 0

	)

65 
	#P3_DYNAMIC
 (-1Ë

	)

66 
	#P3_STATIC
 (-2Ë

	)

67 
	#P3_POINTER
 (-3Ë

	)

75 
	#ADDR
(
X
Ë(-1-(X))

	)

81 
	~"›codes.h
"

87 
Vdbe
 *
sqlôeVdbeCª©e
(
sqlôe
*);

88 
sqlôeVdbeCª©eCÆlback
(
Vdbe
*, *);

89 
sqlôeVdbeAddOp
(
Vdbe
*,,,);

90 
sqlôeVdbeOp3
(
Vdbe
*,,,,c⁄° *
zP3
,);

91 
sqlôeVdbeCode
(
Vdbe
*,...);

92 
sqlôeVdbeAddOpLi°
(
Vdbe
*, 
nOp
, 
VdbeOpLi°
 c⁄° *
aOp
);

93 
sqlôeVdbeCh™geP1
(
Vdbe
*, 
addr
, 
P1
);

94 
sqlôeVdbeCh™geP2
(
Vdbe
*, 
addr
, 
P2
);

95 
sqlôeVdbeCh™geP3
(
Vdbe
*, 
addr
, c⁄° *
zP1
, 
N
);

96 
sqlôeVdbeDequŸeP3
(
Vdbe
*, 
addr
);

97 
sqlôeVdbeFödOp
(
Vdbe
*, , );

98 
VdbeOp
 *
sqlôeVdbeGëOp
(
Vdbe
*, );

99 
sqlôeVdbeMakeLabñ
(
Vdbe
*);

100 
sqlôeVdbeDñëe
(
Vdbe
*);

101 
sqlôeVdbeMakeRódy
(
Vdbe
*,,);

102 
sqlôeVdbeExec
(
Vdbe
*);

103 
sqlôeVdbeLi°
(
Vdbe
*);

104 
sqlôeVdbeFöÆize
(
Vdbe
*,**);

105 
sqlôeVdbeResﬁveLabñ
(
Vdbe
*, );

106 
sqlôeVdbeCuºítAddr
(
Vdbe
*);

107 
sqlôeVdbeTø˚
(
Vdbe
*,
FILE
*);

108 
sqlôeVdbeCom¥essS∑˚
(
Vdbe
*,);

109 
sqlôeVdbeRe£t
(
Vdbe
*,**);

110 
sqlôeVdbeSëV¨übÀs
(
Vdbe
*,,const **);

	@vdbeInt.h

25 
	#keyToI¡
(
X
Ë(
	`sqlôeVdbeByãSw≠
(XË^ 0x80000000)

	)

26 
	#ötToKey
(
X
Ë(
	`sqlôeVdbeByãSw≠
((XË^ 0x80000000))

	)

34 *
sqlôeOpcodeNames
[];

41 
VdbeOp
 
	tOp
;

46 
	tBoﬁ
;

63 
	sCurs‹
 {

64 
BtCurs‹
 *
	mpCurs‹
;

65 
	mœ°Re˙o
;

66 
	m√xtRowid
;

67 
Boﬁ
 
	mª˙oIsVÆid
;

68 
Boﬁ
 
	mkeyAsD©a
;

69 
Boﬁ
 
	m©Fú°
;

70 
Boﬁ
 
	mu£R™domRowid
;

71 
Boﬁ
 
	mnuŒRow
;

72 
Boﬁ
 
	m√xtRowidVÆid
;

73 
Boﬁ
 
	mp£udoTabÀ
;

74 
Boﬁ
 
	mde„ºedMovëo
;

75 
	mmovëoT¨gë
;

76 
Båì
 *
	mpBt
;

77 
	mnD©a
;

78 *
	mpD©a
;

79 
	miKey
;

81 
Curs‹
 
	tCurs‹
;

87 
S‹ãr
 
	tS‹ãr
;

88 
	sS‹ãr
 {

89 
	mnKey
;

90 *
	mzKey
;

91 
	mnD©a
;

92 *
	mpD©a
;

93 
S‹ãr
 *
	mpNext
;

99 
	#NSORT
 30

	)

106 
	#NBFS
 32

	)

112 
	sMem
 {

113 
	mi
;

114 
	mn
;

115 
	mÊags
;

116 
	mr
;

117 *
	mz
;

118 
	mzSh‹t
[
NBFS
];

120 
Mem
 
	tMem
;

125 
	#MEM_NuŒ
 0x0001

	)

126 
	#MEM_Så
 0x0002

	)

127 
	#MEM_I¡
 0x0004

	)

128 
	#MEM_Ról
 0x0008

	)

129 
	#MEM_Dyn
 0x0010

	)

130 
	#MEM_Sètic
 0x0020

	)

131 
	#MEM_Ephem
 0x0040

	)

132 
	#MEM_Sh‹t
 0x0080

	)

138 
	#MEM_AggCtx
 0x0100

	)

153 
	ssqlôe_func
 {

154 
FuncDef
 *
	mpFunc
;

155 
Mem
 
	ms
;

156 *
	mpAgg
;

157 
u8
 
	misEº‹
;

158 
u8
 
	misSãp
;

159 
	m˙t
;

169 
Agg
 
	tAgg
;

170 
AggEÀm
 
	tAggEÀm
;

171 
	sAgg
 {

172 
	mnMem
;

173 
AggEÀm
 *
	mpCuºít
;

174 
HashEÀm
 *
	mpSórch
;

175 
Hash
 
	mhash
;

176 
FuncDef
 **
	m≠Func
;

178 
	sAggEÀm
 {

179 *
	mzKey
;

180 
	mnKey
;

181 
Mem
 
	maMem
[1];

190 
Së
 
	tSë
;

191 
	sSë
 {

192 
Hash
 
	mhash
;

193 
HashEÀm
 *
	m¥ev
;

201 
Keyli°
 
	tKeyli°
;

202 
	sKeyli°
 {

203 
	mnKey
;

204 
	mnU£d
;

205 
	mnRód
;

206 
Keyli°
 *
	mpNext
;

207 
	maKey
[1];

216 
C⁄ãxt
 
	tC⁄ãxt
;

217 
	sC⁄ãxt
 {

218 
	mœ°Rowid
;

219 
	mlsCh™ge
;

220 
	mcsCh™ge
;

230 
	sVdbe
 {

231 
sqlôe
 *
	mdb
;

232 
Vdbe
 *
	mpPªv
,*
	mpNext
;

233 
FILE
 *
	måa˚
;

234 
	mnOp
;

235 
	mnOpAŒoc
;

236 
Op
 *
	maOp
;

237 
	mnLabñ
;

238 
	mnLabñAŒoc
;

239 *
	maLabñ
;

240 
Mem
 *
	maSèck
;

241 
Mem
 *
	mpTos
;

242 **
	mzArgv
;

243 **
	mazCﬁName
;

244 
	mnCurs‹
;

245 
Curs‹
 *
	maC§
;

246 
S‹ãr
 *
	mpS‹t
;

247 
FILE
 *
	mpFûe
;

248 
	mnFõld
;

249 **
	mazFõld
;

250 
	mnV¨
;

251 **
	mazV¨
;

252 *
	m™V¨
;

253 
u8
 *
	mabV¨
;

254 *
	mzLöe
;

255 
	mnLöeAŒoc
;

256 
	mmagic
;

257 
	mnMem
;

258 
Mem
 *
	maMem
;

259 
Agg
 
	magg
;

260 
	mnSë
;

261 
Së
 *
	maSë
;

262 
	mnCÆlback
;

263 
Keyli°
 *
	mpLi°
;

264 
	mkeyli°SèckDïth
;

265 
Keyli°
 **
	mkeyli°Sèck
;

266 
	mc⁄ãxtSèckDïth
;

267 
C⁄ãxt
 *
	mc⁄ãxtSèck
;

268 
	mpc
;

269 
	mrc
;

270 
	muniqueC¡
;

271 
	mîr‹A˘i⁄
;

272 
	mundoTønsOnEº‹
;

273 
	möTempTøns
;

274 
	mªtu∫Sèck
[100];

275 
	mªtu∫Dïth
;

276 
	mnResCﬁumn
;

277 **
	mazResCﬁumn
;

278 
	mp›Sèck
;

279 *
	mzEºMsg
;

280 
u8
 
	mex∂aö
;

286 
	#VDBE_MAGIC_INIT
 0x26b˚Ø5

	)

287 
	#VDBE_MAGIC_RUN
 0xbdf20da3

	)

288 
	#VDBE_MAGIC_HALT
 0x519c2973

	)

289 
	#VDBE_MAGIC_DEAD
 0xb606c3c8

	)

294 
sqlôeVdbeCÀ™upCurs‹
(
Curs‹
*);

295 
sqlôeVdbeS‹ãrRe£t
(
Vdbe
*);

296 
sqlôeVdbeAggRe£t
(
Agg
*);

297 
sqlôeVdbeKeyli°Fªe
(
Keyli°
*);

298 
sqlôeVdbeP›Sèck
(
Vdbe
*,);

299 
sqlôeVdbeCurs‹Movëo
(
Curs‹
*);

300 
sqlôeVdbeByãSw≠
();

301 #i‡!
deföed
(
NDEBUG
Ë|| deföed(
VDBE_PROFILE
)

302 
sqlôeVdbePrötOp
(
FILE
*, , 
Op
*);

	@vdbeaux.c

17 
	~"sqlôeI¡.h
"

18 
	~"os.h
"

19 
	~<˘y≥.h
>

20 
	~"vdbeI¡.h
"

28 #i‚de‡
NDEBUG


29 
	gsqlôe_vdbe_add›_åa˚
 = 0;

36 
Vdbe
 *
	$sqlôeVdbeCª©e
(
sqlôe
 *
db
){

37 
Vdbe
 *
p
;

38 
p
 = 
	`sqlôeMÆloc
–(
Vdbe
) );

39 if–
p
==0 )  0;

40 
p
->
db
 = db;

41 if–
db
->
pVdbe
 ){

42 
db
->
pVdbe
->
pPªv
 = 
p
;

44 
p
->
pNext
 = 
db
->
pVdbe
;

45 
p
->
pPªv
 = 0;

46 
db
->
pVdbe
 = 
p
;

47 
p
->
magic
 = 
VDBE_MAGIC_INIT
;

48  
p
;

49 
	}
}

54 
	$sqlôeVdbeTø˚
(
Vdbe
 *
p
, 
FILE
 *
åa˚
){

55 
p
->
åa˚
 =Årace;

56 
	}
}

74 
	$sqlôeVdbeAddOp
(
Vdbe
 *
p
, 
›
, 
p1
, 
p2
){

75 
i
;

76 
VdbeOp
 *
pOp
;

78 
i
 = 
p
->
nOp
;

79 
p
->
nOp
++;

80 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

81 if–
i
>=
p
->
nOpAŒoc
 ){

82 
ﬁdSize
 = 
p
->
nOpAŒoc
;

83 
Op
 *
aNew
;

84 
p
->
nOpAŒoc
 =Ö->nOpAlloc*2 + 100;

85 
aNew
 = 
	`sqlôeRóŒoc
(
p
->
aOp
,Ö->
nOpAŒoc
*(
Op
));

86 if–
aNew
==0 ){

87 
p
->
nOpAŒoc
 = 
ﬁdSize
;

90 
p
->
aOp
 = 
aNew
;

91 
	`mem£t
(&
p
->
aOp
[
ﬁdSize
], 0, (p->
nOpAŒoc
-ﬁdSize)*(
Op
));

93 
pOp
 = &
p
->
aOp
[
i
];

94 
pOp
->
›code
 = 
›
;

95 
pOp
->
p1
 =Ö1;

96 if–
p2
<0 && (-1-p2)<
p
->
nLabñ
 &&Ö->
aLabñ
[-1-p2]>=0 ){

97 
p2
 = 
p
->
aLabñ
[-1-p2];

99 
pOp
->
p2
 =Ö2;

100 
pOp
->
p3
 = 0;

101 
pOp
->
p3ty≥
 = 
P3_NOTUSED
;

102 #i‚de‡
NDEBUG


103 if–
sqlôe_vdbe_add›_åa˚
 ) 
	`sqlôeVdbePrötOp
(0, 
i
, &
p
->
aOp
[i]);

105  
i
;

106 
	}
}

111 
	$sqlôeVdbeOp3
(
Vdbe
 *
p
, 
›
, 
p1
, 
p2
, c⁄° *
zP3
, 
p3ty≥
){

112 
addr
 = 
	`sqlôeVdbeAddOp
(
p
, 
›
, 
p1
, 
p2
);

113 
	`sqlôeVdbeCh™geP3
(
p
, 
addr
, 
zP3
, 
p3ty≥
);

114  
addr
;

115 
	}
}

120 
	$sqlôeVdbeCode
(
Vdbe
 *
p
, ...){

121 
addr
;

122 
va_li°
 
≠
;

123 
›code
, 
p1
, 
p2
;

124 
	`va_°¨t
(
≠
, 
p
);

125 
addr
 = 
p
->
nOp
;

126  (
›code
 = 
	`va_¨g
(
≠
,))!=0 ){

127 
p1
 = 
	`va_¨g
(
≠
,);

128 
p2
 = 
	`va_¨g
(
≠
,);

129 
	`sqlôeVdbeAddOp
(
p
, 
›code
, 
p1
, 
p2
);

131 
	`va_íd
(
≠
);

132  
addr
;

133 
	}
}

149 
	$sqlôeVdbeMakeLabñ
(
Vdbe
 *
p
){

150 
i
;

151 
i
 = 
p
->
nLabñ
++;

152 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

153 if–
i
>=
p
->
nLabñAŒoc
 ){

154 *
aNew
;

155 
p
->
nLabñAŒoc
 =Ö->nLabelAlloc*2 + 10;

156 
aNew
 = 
	`sqlôeRóŒoc
–
p
->
aLabñ
,Ö->
nLabñAŒoc
*(p->aLabel[0]));

157 if–
aNew
==0 ){

158 
	`sqlôeFªe
(
p
->
aLabñ
);

160 
p
->
aLabñ
 = 
aNew
;

162 if–
p
->
aLabñ
==0 ){

163 
p
->
nLabñ
 = 0;

164 
p
->
nLabñAŒoc
 = 0;

167 
p
->
aLabñ
[
i
] = -1;

168  -1-
i
;

169 
	}
}

176 
	$sqlôeVdbeResﬁveLabñ
(
Vdbe
 *
p
, 
x
){

177 
j
;

178 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

179 if–
x
<0 && (-x)<=
p
->
nLabñ
 &&Ö->
aOp
 ){

180 if–
p
->
aLabñ
[-1-
x
]=ı->
nOp
 ) ;

181 
	`as£π
–
p
->
aLabñ
[-1-
x
]<0 );

182 
p
->
aLabñ
[-1-
x
] =Ö->
nOp
;

183 
j
=0; j<
p
->
nOp
; j++){

184 if–
p
->
aOp
[
j
].
p2
==
x
 )Ö->aOp[j].p2 =Ö->
nOp
;

187 
	}
}

192 
	$sqlôeVdbeCuºítAddr
(
Vdbe
 *
p
){

193 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

194  
p
->
nOp
;

195 
	}
}

201 
	$sqlôeVdbeAddOpLi°
(
Vdbe
 *
p
, 
nOp
, 
VdbeOpLi°
 c⁄° *
aOp
){

202 
addr
;

203 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

204 if–
p
->
nOp
 +ÇO∞>p->
nOpAŒoc
 ){

205 
ﬁdSize
 = 
p
->
nOpAŒoc
;

206 
Op
 *
aNew
;

207 
p
->
nOpAŒoc
 =Ö->nOpAŒoc*2 + 
nOp
 + 10;

208 
aNew
 = 
	`sqlôeRóŒoc
(
p
->
aOp
,Ö->
nOpAŒoc
*(
Op
));

209 if–
aNew
==0 ){

210 
p
->
nOpAŒoc
 = 
ﬁdSize
;

213 
p
->
aOp
 = 
aNew
;

214 
	`mem£t
(&
p
->
aOp
[
ﬁdSize
], 0, (p->
nOpAŒoc
-ﬁdSize)*(
Op
));

216 
addr
 = 
p
->
nOp
;

217 if–
nOp
>0 ){

218 
i
;

219 
VdbeOpLi°
 c⁄° *
pIn
 = 
aOp
;

220 
i
=0; i<
nOp
; i++, 
pIn
++){

221 
p2
 = 
pIn
->p2;

222 
VdbeOp
 *
pOut
 = &
p
->
aOp
[
i
+
addr
];

223 
pOut
->
›code
 = 
pIn
->opcode;

224 
pOut
->
p1
 = 
pIn
->p1;

225 
pOut
->
p2
 =Ö2<0 ? 
addr
 + 
	`ADDR
(p2) :Ö2;

226 
pOut
->
p3
 = 
pIn
->p3;

227 
pOut
->
p3ty≥
 = 
pIn
->
p3
 ? 
P3_STATIC
 : 
P3_NOTUSED
;

228 #i‚de‡
NDEBUG


229 if–
sqlôe_vdbe_add›_åa˚
 ){

230 
	`sqlôeVdbePrötOp
(0, 
i
+
addr
, &
p
->
aOp
[i+addr]);

234 
p
->
nOp
 +=ÇOp;

236  
addr
;

237 
	}
}

245 
	$sqlôeVdbeCh™geP1
(
Vdbe
 *
p
, 
addr
, 
vÆ
){

246 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

247 if–
p
 && 
addr
>=0 &&Ö->
nOp
>add∏&&Ö->
aOp
 ){

248 
p
->
aOp
[
addr
].
p1
 = 
vÆ
;

250 
	}
}

256 
	$sqlôeVdbeCh™geP2
(
Vdbe
 *
p
, 
addr
, 
vÆ
){

257 
	`as£π
–
vÆ
>=0 );

258 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

259 if–
p
 && 
addr
>=0 &&Ö->
nOp
>add∏&&Ö->
aOp
 ){

260 
p
->
aOp
[
addr
].
p2
 = 
vÆ
;

262 
	}
}

281 
	$sqlôeVdbeCh™geP3
(
Vdbe
 *
p
, 
addr
, c⁄° *
zP3
, 
n
){

282 
Op
 *
pOp
;

283 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

284 if–
p
==0 ||Ö->
aOp
==0 ) ;

285 if–
addr
<0 ||áddr>=
p
->
nOp
 ){

286 
addr
 = 
p
->
nOp
 - 1;

287 if–
addr
<0 ) ;

289 
pOp
 = &
p
->
aOp
[
addr
];

290 if–
pOp
->
p3
 &&ÖOp->
p3ty≥
==
P3_DYNAMIC
 ){

291 
	`sqlôeFªe
(
pOp
->
p3
);

292 
pOp
->
p3
 = 0;

294 if–
zP3
==0 ){

295 
pOp
->
p3
 = 0;

296 
pOp
->
p3ty≥
 = 
P3_NOTUSED
;

297 }if–
n
<0 ){

298 
pOp
->
p3
 = (*)
zP3
;

299 
pOp
->
p3ty≥
 = 
n
;

301 
	`sqlôeSëNSåög
(&
pOp
->
p3
, 
zP3
, 
n
, 0);

302 
pOp
->
p3ty≥
 = 
P3_DYNAMIC
;

304 
	}
}

315 
	$sqlôeVdbeDequŸeP3
(
Vdbe
 *
p
, 
addr
){

316 
Op
 *
pOp
;

317 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

318 if–
p
->
aOp
==0 ) ;

319 if–
addr
<0 ||áddr>=
p
->
nOp
 ){

320 
addr
 = 
p
->
nOp
 - 1;

321 if–
addr
<0 ) ;

323 
pOp
 = &
p
->
aOp
[
addr
];

324 if–
pOp
->
p3
==0 ||ÖOp->p3[0]==0 ) ;

325 if–
pOp
->
p3ty≥
==
P3_POINTER
 ) ;

326 if–
pOp
->
p3ty≥
!=
P3_DYNAMIC
 ){

327 
pOp
->
p3
 = 
	`sqlôeSåDup
(pOp->p3);

328 
pOp
->
p3ty≥
 = 
P3_DYNAMIC
;

330 
	`sqlôeDequŸe
(
pOp
->
p3
);

331 
	}
}

338 
	$sqlôeVdbeCom¥essS∑˚
(
Vdbe
 *
p
, 
addr
){

339 *
z
;

340 
i
, 
j
;

341 
Op
 *
pOp
;

342 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

343 if–
p
->
aOp
==0 || 
addr
<0 ||áddr>ı->
nOp
 ) ;

344 
pOp
 = &
p
->
aOp
[
addr
];

345 if–
pOp
->
p3ty≥
==
P3_POINTER
 ){

348 if–
pOp
->
p3ty≥
!=
P3_DYNAMIC
 ){

349 
pOp
->
p3
 = 
	`sqlôeSåDup
(pOp->p3);

350 
pOp
->
p3ty≥
 = 
P3_DYNAMIC
;

352 
z
 = (*)
pOp
->
p3
;

353 if–
z
==0 ) ;

354 
i
 = 
j
 = 0;

355  
	`is•a˚
(
z
[
i
]) ){ i++; }

356  
z
[
i
] ){

357 if–
	`is•a˚
(
z
[
i
]) ){

358 
z
[
j
++] = ' ';

359  
	`is•a˚
(
z
[++
i
]) ){}

361 
z
[
j
++] = z[
i
++];

364  
j
>0 && 
	`is•a˚
(
z
[j-1]) ){ j--; }

365 
z
[
j
] = 0;

366 
	}
}

372 
	$sqlôeVdbeFödOp
(
Vdbe
 *
p
, 
›
, 
p2
){

373 
i
;

374 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

375 
i
=0; i<
p
->
nOp
; i++){

376 if–
p
->
aOp
[
i
].
›code
==
›
 &&Ö->aOp[i].
p2
==p2 )  i+1;

379 
	}
}

384 
VdbeOp
 *
	$sqlôeVdbeGëOp
(
Vdbe
 *
p
, 
addr
){

385 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

386 
	`as£π
–
addr
>=0 &&áddr<
p
->
nOp
 );

387  &
p
->
aOp
[
addr
];

388 
	}
}

411 *
	$sqlôe_£t_ªsu…_°rög
(
sqlôe_func
 *
p
, c⁄° *
zResu…
, 
n
){

412 
	`as£π
–!
p
->
isSãp
 );

413 if–
p
->
s
.
Êags
 & 
MEM_Dyn
 ){

414 
	`sqlôeFªe
(
p
->
s
.
z
);

416 if–
zResu…
==0 ){

417 
p
->
s
.
Êags
 = 
MEM_NuŒ
;

418 
n
 = 0;

419 
p
->
s
.
z
 = 0;

420 
p
->
s
.
n
 = 0;

422 if–
n
<0 )Ç = 
	`°æí
(
zResu…
);

423 if–
n
<
NBFS
-1 ){

424 
	`mem˝y
(
p
->
s
.
zSh‹t
, 
zResu…
, 
n
);

425 
p
->
s
.
zSh‹t
[
n
] = 0;

426 
p
->
s
.
Êags
 = 
MEM_Så
 | 
MEM_Sh‹t
;

427 
p
->
s
.
z
 =Ö->s.
zSh‹t
;

429 
p
->
s
.
z
 = 
	`sqlôeMÆlocRaw
–
n
+1 );

430 if–
p
->
s
.
z
 ){

431 
	`mem˝y
(
p
->
s
.
z
, 
zResu…
, 
n
);

432 
p
->
s
.
z
[
n
] = 0;

434 
p
->
s
.
Êags
 = 
MEM_Så
 | 
MEM_Dyn
;

436 
p
->
s
.
n
 =Ç+1;

438  
p
->
s
.
z
;

439 
	}
}

440 
	$sqlôe_£t_ªsu…_öt
(
sqlôe_func
 *
p
, 
iResu…
){

441 
	`as£π
–!
p
->
isSãp
 );

442 if–
p
->
s
.
Êags
 & 
MEM_Dyn
 ){

443 
	`sqlôeFªe
(
p
->
s
.
z
);

445 
p
->
s
.
i
 = 
iResu…
;

446 
p
->
s
.
Êags
 = 
MEM_I¡
;

447 
	}
}

448 
	$sqlôe_£t_ªsu…_doubÀ
(
sqlôe_func
 *
p
, 
rResu…
){

449 
	`as£π
–!
p
->
isSãp
 );

450 if–
p
->
s
.
Êags
 & 
MEM_Dyn
 ){

451 
	`sqlôeFªe
(
p
->
s
.
z
);

453 
p
->
s
.
r
 = 
rResu…
;

454 
p
->
s
.
Êags
 = 
MEM_Ról
;

455 
	}
}

456 
	$sqlôe_£t_ªsu…_îr‹
(
sqlôe_func
 *
p
, c⁄° *
zMsg
, 
n
){

457 
	`as£π
–!
p
->
isSãp
 );

458 
	`sqlôe_£t_ªsu…_°rög
(
p
, 
zMsg
, 
n
);

459 
p
->
isEº‹
 = 1;

460 
	}
}

466 *
	$sqlôe_u£r_d©a
(
sqlôe_func
 *
p
){

467 
	`as£π
–
p
 &&Ö->
pFunc
 );

468  
p
->
pFunc
->
pU£rD©a
;

469 
	}
}

480 *
	$sqlôe_aggªg©e_c⁄ãxt
(
sqlôe_func
 *
p
, 
nByã
){

481 
	`as£π
–
p
 &&Ö->
pFunc
 &&Ö->pFunc->
xSãp
 );

482 if–
p
->
pAgg
==0 ){

483 if–
nByã
<=
NBFS
 ){

484 
p
->
pAgg
 = (*Ì->
s
.
z
;

485 
	`mem£t
(
p
->
pAgg
, 0, 
nByã
);

487 
p
->
pAgg
 = 
	`sqlôeMÆloc
–
nByã
 );

490  
p
->
pAgg
;

491 
	}
}

501 
	$sqlôe_aggªg©e_cou¡
(
sqlôe_func
 *
p
){

502 
	`as£π
–
p
 &&Ö->
pFunc
 &&Ö->pFunc->
xSãp
 );

503  
p
->
˙t
;

504 
	}
}

506 #i‡!
deföed
(
NDEBUG
Ë|| deföed(
VDBE_PROFILE
)

510 
	$sqlôeVdbePrötOp
(
FILE
 *
pOut
, 
pc
, 
Op
 *
pOp
){

511 *
zP3
;

512 
zPå
[40];

513 if–
pOp
->
p3ty≥
==
P3_POINTER
 ){

514 
	`•rötf
(
zPå
, "±r(%#lx)", ()
pOp
->
p3
);

515 
zP3
 = 
zPå
;

517 
zP3
 = 
pOp
->
p3
;

519 if–
pOut
==0 )ÖOuà
°dout
;

520 
	`Ârötf
(
pOut
,"%4d %-12s %4d %4d %s\n",

521 
pc
, 
sqlôeOpcodeNames
[
pOp
->
›code
],ÖOp->
p1
,ÖOp->
p2
, 
zP3
 ? zP3 : "");

522 
	`fÊush
(
pOut
);

523 
	}
}

533 
	$sqlôeVdbeLi°
(

534 
Vdbe
 *
p


536 
sqlôe
 *
db
 = 
p
->db;

537 
i
;

538 
rc
 = 
SQLITE_OK
;

539 *
azCﬁumnNames
[] = {

545 
	`as£π
–
p
->
p›Sèck
==0 );

546 
	`as£π
–
p
->
ex∂aö
 );

547 
p
->
azCﬁName
 = 
azCﬁumnNames
;

548 
p
->
azResCﬁumn
 =Ö->
zArgv
;

549 
i
=0; i<5; i++Ë
p
->
zArgv
[i] =Ö->
aSèck
[i].
zSh‹t
;

550 
i
 = 
p
->
pc
;

551 if–
i
>=
p
->
nOp
 ){

552 
p
->
rc
 = 
SQLITE_OK
;

553 
rc
 = 
SQLITE_DONE
;

554 }if–
db
->
Êags
 & 
SQLITE_I¡îru±
 ){

555 
db
->
Êags
 &~
SQLITE_I¡îru±
;

556 if–
db
->
magic
!=
SQLITE_MAGIC_BUSY
 ){

557 
p
->
rc
 = 
SQLITE_MISUSE
;

559 
p
->
rc
 = 
SQLITE_INTERRUPT
;

561 
rc
 = 
SQLITE_ERROR
;

562 
	`sqlôeSëSåög
(&
p
->
zEºMsg
, 
	`sqlôe_îr‹_°rög
’->
rc
), (*)0);

564 
	`•rötf
(
p
->
zArgv
[0],"%d",
i
);

565 
	`•rötf
(
p
->
zArgv
[2],"%d",Ö->
aOp
[
i
].
p1
);

566 
	`•rötf
(
p
->
zArgv
[3],"%d",Ö->
aOp
[
i
].
p2
);

567 if–
p
->
aOp
[
i
].
p3ty≥
==
P3_POINTER
 ){

568 
	`•rötf
(
p
->
aSèck
[4].
zSh‹t
, "±r(%#lx)", (Ì->
aOp
[
i
].
p3
);

569 
p
->
zArgv
[4] =Ö->
aSèck
[4].
zSh‹t
;

571 
p
->
zArgv
[4] =Ö->
aOp
[
i
].
p3
;

573 
p
->
zArgv
[1] = 
sqlôeOpcodeNames
[p->
aOp
[
i
].
›code
];

574 
p
->
pc
 = 
i
+1;

575 
p
->
azResCﬁumn
 =Ö->
zArgv
;

576 
p
->
nResCﬁumn
 = 5;

577 
p
->
rc
 = 
SQLITE_OK
;

578 
rc
 = 
SQLITE_ROW
;

580  
rc
;

581 
	}
}

589 
	$sqlôeVdbeMakeRódy
(

590 
Vdbe
 *
p
,

591 
nV¨
,

592 
isEx∂aö


594 
n
;

596 
	`as£π
–
p
!=0 );

597 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

601 if–
p
->
nOp
==0 || (p->
aOp
 &&Ö->aOp[p->nOp-1].
›code
!=
OP_HÆt
) ){

602 
	`sqlôeVdbeAddOp
(
p
, 
OP_HÆt
, 0, 0);

612 if–
p
->
aSèck
==0 ){

613 
p
->
nV¨
 =ÇVar;

614 
	`as£π
–
nV¨
>=0 );

615 
n
 = 
isEx∂aö
 ? 10 : 
p
->
nOp
;

616 
p
->
aSèck
 = 
	`sqlôeMÆloc
(

617 
n
*((
p
->
aSèck
[0]) + 2*(*))

618 + 
p
->
nV¨
*((*)+()+1)

620 
p
->
zArgv
 = (**)&p->
aSèck
[
n
];

621 
p
->
azCﬁName
 = (**)&p->
zArgv
[
n
];

622 
p
->
azV¨
 = (**)&p->
azCﬁName
[
n
];

623 
p
->
™V¨
 = (*)&p->
azV¨
[p->
nV¨
];

624 
p
->
abV¨
 = (
u8
*)&p->
™V¨
[p->
nV¨
];

627 
	`sqlôeHashInô
(&
p
->
agg
.
hash
, 
SQLITE_HASH_BINARY
, 0);

628 
p
->
agg
.
pSórch
 = 0;

629 #ifde‡
MEMORY_DEBUG


630 if–
	`sqlôeOsFûeExi°s
("vdbe_trace") ){

631 
p
->
åa˚
 = 
°dout
;

634 
p
->
pTos
 = &p->
aSèck
[-1];

635 
p
->
pc
 = 0;

636 
p
->
rc
 = 
SQLITE_OK
;

637 
p
->
uniqueC¡
 = 0;

638 
p
->
ªtu∫Dïth
 = 0;

639 
p
->
îr‹A˘i⁄
 = 
OE_Ab‹t
;

640 
p
->
undoTønsOnEº‹
 = 0;

641 
p
->
p›Sèck
 = 0;

642 
p
->
ex∂aö
 |
isEx∂aö
;

643 
p
->
magic
 = 
VDBE_MAGIC_RUN
;

644 #ifde‡
VDBE_PROFILE


646 
i
;

647 
i
=0; i<
p
->
nOp
; i++){

648 
p
->
aOp
[
i
].
˙t
 = 0;

649 
p
->
aOp
[
i
].
cy˛es
 = 0;

653 
	}
}

659 
	$sqlôeVdbeS‹ãrRe£t
(
Vdbe
 *
p
){

660  
p
->
pS‹t
 ){

661 
S‹ãr
 *
pS‹ãr
 = 
p
->
pS‹t
;

662 
p
->
pS‹t
 = 
pS‹ãr
->
pNext
;

663 
	`sqlôeFªe
(
pS‹ãr
->
zKey
);

664 
	`sqlôeFªe
(
pS‹ãr
->
pD©a
);

665 
	`sqlôeFªe
(
pS‹ãr
);

667 
	}
}

678 
	$sqlôeVdbeAggRe£t
(
Agg
 *
pAgg
){

679 
i
;

680 
HashEÀm
 *
p
;

681 
p
 = 
	`sqlôeHashFú°
(&
pAgg
->
hash
);Ö;Ö = 
	`sqlôeHashNext
(p)){

682 
AggEÀm
 *
pEÀm
 = 
	`sqlôeHashD©a
(
p
);

683 
	`as£π
–
pAgg
->
≠Func
!=0 );

684 
i
=0; i<
pAgg
->
nMem
; i++){

685 
Mem
 *
pMem
 = &
pEÀm
->
aMem
[
i
];

686 if–
pAgg
->
≠Func
[
i
] && (
pMem
->
Êags
 & 
MEM_AggCtx
)!=0 ){

687 
sqlôe_func
 
˘x
;

688 
˘x
.
pFunc
 = 
pAgg
->
≠Func
[
i
];

689 
˘x
.
s
.
Êags
 = 
MEM_NuŒ
;

690 
˘x
.
pAgg
 = 
pMem
->
z
;

691 
˘x
.
˙t
 = 
pMem
->
i
;

692 
˘x
.
isSãp
 = 0;

693 
˘x
.
isEº‹
 = 0;

694 (*
pAgg
->
≠Func
[
i
]->
xFöÆize
)(&
˘x
);

695 if–
pMem
->
z
!=0 &&ÖMem->z!ıMem->
zSh‹t
 ){

696 
	`sqlôeFªe
(
pMem
->
z
);

698 if–
˘x
.
s
.
Êags
 & 
MEM_Dyn
 ){

699 
	`sqlôeFªe
(
˘x
.
s
.
z
);

701 }if–
pMem
->
Êags
 & 
MEM_Dyn
 ){

702 
	`sqlôeFªe
(
pMem
->
z
);

705 
	`sqlôeFªe
(
pEÀm
);

707 
	`sqlôeHashCÀ¨
(&
pAgg
->
hash
);

708 
	`sqlôeFªe
(
pAgg
->
≠Func
);

709 
pAgg
->
≠Func
 = 0;

710 
pAgg
->
pCuºít
 = 0;

711 
pAgg
->
pSórch
 = 0;

712 
pAgg
->
nMem
 = 0;

713 
	}
}

718 
	$sqlôeVdbeKeyli°Fªe
(
Keyli°
 *
p
){

719  
p
 ){

720 
Keyli°
 *
pNext
 = 
p
->pNext;

721 
	`sqlôeFªe
(
p
);

722 
p
 = 
pNext
;

724 
	}
}

730 
	$sqlôeVdbeCÀ™upCurs‹
(
Curs‹
 *
pCx
){

731 if–
pCx
->
pCurs‹
 ){

732 
	`sqlôeBåìClo£Curs‹
(
pCx
->
pCurs‹
);

734 if–
pCx
->
pBt
 ){

735 
	`sqlôeBåìClo£
(
pCx
->
pBt
);

737 
	`sqlôeFªe
(
pCx
->
pD©a
);

738 
	`mem£t
(
pCx
, 0, (
Curs‹
));

739 
	}
}

744 
	$˛o£AŒCurs‹s
(
Vdbe
 *
p
){

745 
i
;

746 
i
=0; i<
p
->
nCurs‹
; i++){

747 
	`sqlôeVdbeCÀ™upCurs‹
(&
p
->
aC§
[
i
]);

749 
	`sqlôeFªe
(
p
->
aC§
);

750 
p
->
aC§
 = 0;

751 
p
->
nCurs‹
 = 0;

752 
	}
}

761 
	$CÀ™up
(
Vdbe
 *
p
){

762 
i
;

763 if–
p
->
aSèck
 ){

764 
Mem
 *
pTos
 = 
p
->pTos;

765  
pTos
>=
p
->
aSèck
 ){

766 if–
pTos
->
Êags
 & 
MEM_Dyn
 ){

767 
	`sqlôeFªe
(
pTos
->
z
);

769 
pTos
--;

771 
p
->
pTos
 =ÖTos;

773 
	`˛o£AŒCurs‹s
(
p
);

774 if–
p
->
aMem
 ){

775 
i
=0; i<
p
->
nMem
; i++){

776 if–
p
->
aMem
[
i
].
Êags
 & 
MEM_Dyn
 ){

777 
	`sqlôeFªe
(
p
->
aMem
[
i
].
z
);

781 
	`sqlôeFªe
(
p
->
aMem
);

782 
p
->
aMem
 = 0;

783 
p
->
nMem
 = 0;

784 if–
p
->
pLi°
 ){

785 
	`sqlôeVdbeKeyli°Fªe
(
p
->
pLi°
);

786 
p
->
pLi°
 = 0;

788 
	`sqlôeVdbeS‹ãrRe£t
(
p
);

789 if–
p
->
pFûe
 ){

790 if–
p
->
pFûe
!=
°dö
 ) 
	`f˛o£
(p->pFile);

791 
p
->
pFûe
 = 0;

793 if–
p
->
azFõld
 ){

794 
	`sqlôeFªe
(
p
->
azFõld
);

795 
p
->
azFõld
 = 0;

797 
p
->
nFõld
 = 0;

798 if–
p
->
zLöe
 ){

799 
	`sqlôeFªe
(
p
->
zLöe
);

800 
p
->
zLöe
 = 0;

802 
p
->
nLöeAŒoc
 = 0;

803 
	`sqlôeVdbeAggRe£t
(&
p
->
agg
);

804 if–
p
->
aSë
 ){

805 
i
=0; i<
p
->
nSë
; i++){

806 
	`sqlôeHashCÀ¨
(&
p
->
aSë
[
i
].
hash
);

809 
	`sqlôeFªe
(
p
->
aSë
);

810 
p
->
aSë
 = 0;

811 
p
->
nSë
 = 0;

812 if–
p
->
keyli°Sèck
 ){

813 
ii
;

814 
ii
 = 0; iò< 
p
->
keyli°SèckDïth
; ii++){

815 
	`sqlôeVdbeKeyli°Fªe
(
p
->
keyli°Sèck
[
ii
]);

817 
	`sqlôeFªe
(
p
->
keyli°Sèck
);

818 
p
->
keyli°SèckDïth
 = 0;

819 
p
->
keyli°Sèck
 = 0;

821 
	`sqlôeFªe
(
p
->
c⁄ãxtSèck
);

822 
p
->
c⁄ãxtSèck
 = 0;

823 
	`sqlôeFªe
(
p
->
zEºMsg
);

824 
p
->
zEºMsg
 = 0;

825 
	}
}

834 
	$sqlôeVdbeRe£t
(
Vdbe
 *
p
, **
pzEºMsg
){

835 
sqlôe
 *
db
 = 
p
->db;

836 
i
;

838 if–
p
->
magic
!=
VDBE_MAGIC_RUN
 &&Ö->magic!=
VDBE_MAGIC_HALT
 ){

839 
	`sqlôeSëSåög
(
pzEºMsg
, 
	`sqlôe_îr‹_°rög
(
SQLITE_MISUSE
), (*)0);

840  
SQLITE_MISUSE
;

842 if–
p
->
zEºMsg
 ){

843 if–
pzEºMsg
 && *pzErrMsg==0 ){

844 *
pzEºMsg
 = 
p
->
zEºMsg
;

846 
	`sqlôeFªe
(
p
->
zEºMsg
);

848 
p
->
zEºMsg
 = 0;

849 }if–
p
->
rc
 ){

850 
	`sqlôeSëSåög
(
pzEºMsg
, 
	`sqlôe_îr‹_°rög
(
p
->
rc
), (*)0);

852 
	`CÀ™up
(
p
);

853 if–
p
->
rc
!=
SQLITE_OK
 ){

854  
p
->
îr‹A˘i⁄
 ){

855 
OE_Ab‹t
: {

856 if–!
p
->
undoTønsOnEº‹
 ){

857 
i
=0; i<
db
->
nDb
; i++){

858 if–
db
->
aDb
[
i
].
pBt
 ){

859 
	`sqlôeBåìRﬁlbackCk±
(
db
->
aDb
[
i
].
pBt
);

866 
OE_Rﬁlback
: {

867 
	`sqlôeRﬁlbackAŒ
(
db
);

868 
db
->
Êags
 &~
SQLITE_InTøns
;

869 
db
->
⁄Eº‹
 = 
OE_DeÁu…
;

873 if–
p
->
undoTønsOnEº‹
 ){

874 
	`sqlôeRﬁlbackAŒ
(
db
);

875 
db
->
Êags
 &~
SQLITE_InTøns
;

876 
db
->
⁄Eº‹
 = 
OE_DeÁu…
;

881 
	`sqlôeRﬁlbackI¡î«lCh™ges
(
db
);

883 
i
=0; i<
db
->
nDb
; i++){

884 if–
db
->
aDb
[
i
].
pBt
 && db->aDb[i].
öTøns
==2 ){

885 
	`sqlôeBåìCommôCk±
(
db
->
aDb
[
i
].
pBt
);

886 
db
->
aDb
[
i
].
öTøns
 = 1;

889 
	`as£π
–
p
->
pTos
<&p->
aSèck
[p->
pc
] || 
sqlôe_mÆloc_Áûed
==1 );

890 #ifde‡
VDBE_PROFILE


892 
FILE
 *
out
 = 
	`f›í
("vdbe_profile.out", "a");

893 if–
out
 ){

894 
i
;

895 
	`Ârötf
(
out
, "---- ");

896 
i
=0; i<
p
->
nOp
; i++){

897 
	`Ârötf
(
out
, "%02x", 
p
->
aOp
[
i
].
›code
);

899 
	`Ârötf
(
out
, "\n");

900 
i
=0; i<
p
->
nOp
; i++){

901 
	`Ârötf
(
out
, "%6d %10lld %8lld ",

902 
p
->
aOp
[
i
].
˙t
,

903 
p
->
aOp
[
i
].
cy˛es
,

904 
p
->
aOp
[
i
].
˙t
>0 ?Ö->aOp[i].
cy˛es
/p->aOp[i].cnt : 0

906 
	`sqlôeVdbePrötOp
(
out
, 
i
, &
p
->
aOp
[i]);

908 
	`f˛o£
(
out
);

912 
p
->
magic
 = 
VDBE_MAGIC_INIT
;

913  
p
->
rc
;

914 
	}
}

920 
	$sqlôeVdbeFöÆize
(
Vdbe
 *
p
, **
pzEºMsg
){

921 
rc
;

922 
sqlôe
 *
db
;

924 if–
p
->
magic
!=
VDBE_MAGIC_RUN
 &&Ö->magic!=
VDBE_MAGIC_HALT
 ){

925 
	`sqlôeSëSåög
(
pzEºMsg
, 
	`sqlôe_îr‹_°rög
(
SQLITE_MISUSE
), (*)0);

926  
SQLITE_MISUSE
;

928 
db
 = 
p
->db;

929 
rc
 = 
	`sqlôeVdbeRe£t
(
p
, 
pzEºMsg
);

930 
	`sqlôeVdbeDñëe
(
p
);

931 if–
db
->
w™t_to_˛o£
 && db->
pVdbe
==0 ){

932 
	`sqlôe_˛o£
(
db
);

934 if–
rc
==
SQLITE_SCHEMA
 ){

935 
	`sqlôeRe£tI¡î«lSchema
(
db
, 0);

937  
rc
;

938 
	}
}

948 
	$sqlôe_böd
(
sqlôe_vm
 *
pVm
, 
i
, c⁄° *
zVÆ
, 
Àn
, 
c›y
){

949 
Vdbe
 *
p
 = (Vdbe*)
pVm
;

950 if–
p
->
magic
!=
VDBE_MAGIC_RUN
 ||Ö->
pc
!=0 ){

951  
SQLITE_MISUSE
;

953 if–
i
<1 || i>
p
->
nV¨
 ){

954  
SQLITE_RANGE
;

956 
i
--;

957 if–
p
->
abV¨
[
i
] ){

958 
	`sqlôeFªe
(
p
->
azV¨
[
i
]);

960 if–
zVÆ
==0 ){

961 
c›y
 = 0;

962 
Àn
 = 0;

964 if–
Àn
<0 ){

965 
Àn
 = 
	`°æí
(
zVÆ
)+1;

967 if–
c›y
 ){

968 
p
->
azV¨
[
i
] = 
	`sqlôeMÆloc
–
Àn
 );

969 if–
p
->
azV¨
[
i
] ) 
	`mem˝y
’->azV¨[i], 
zVÆ
, 
Àn
);

971 
p
->
azV¨
[
i
] = (*)
zVÆ
;

973 
p
->
abV¨
[
i
] = 
c›y
;

974 
p
->
™V¨
[
i
] = 
Àn
;

975  
SQLITE_OK
;

976 
	}
}

982 
	$sqlôeVdbeDñëe
(
Vdbe
 *
p
){

983 
i
;

984 if–
p
==0 ) ;

985 
	`CÀ™up
(
p
);

986 if–
p
->
pPªv
 ){

987 
p
->
pPªv
->
pNext
 =Ö->pNext;

989 
	`as£π
–
p
->
db
->
pVdbe
==p );

990 
p
->
db
->
pVdbe
 =Ö->
pNext
;

992 if–
p
->
pNext
 ){

993 
p
->
pNext
->
pPªv
 =Ö->pPrev;

995 
p
->
pPªv
 =Ö->
pNext
 = 0;

996 if–
p
->
nOpAŒoc
==0 ){

997 
p
->
aOp
 = 0;

998 
p
->
nOp
 = 0;

1000 
i
=0; i<
p
->
nOp
; i++){

1001 if–
p
->
aOp
[
i
].
p3ty≥
==
P3_DYNAMIC
 ){

1002 
	`sqlôeFªe
(
p
->
aOp
[
i
].
p3
);

1005 
i
=0; i<
p
->
nV¨
; i++){

1006 if–
p
->
abV¨
[
i
] ) 
	`sqlôeFªe
’->
azV¨
[i]);

1008 
	`sqlôeFªe
(
p
->
aOp
);

1009 
	`sqlôeFªe
(
p
->
aLabñ
);

1010 
	`sqlôeFªe
(
p
->
aSèck
);

1011 
p
->
magic
 = 
VDBE_MAGIC_DEAD
;

1012 
	`sqlôeFªe
(
p
);

1013 
	}
}

1030 
	$sqlôeVdbeByãSw≠
(
x
){

1032 
zBuf
[()];

1033 
i
;

1034 } 
ux
;

1035 
ux
.
zBuf
[3] = 
x
&0xff;

1036 
ux
.
zBuf
[2] = (
x
>>8)&0xff;

1037 
ux
.
zBuf
[1] = (
x
>>16)&0xff;

1038 
ux
.
zBuf
[0] = (
x
>>24)&0xff;

1039  
ux
.
i
;

1040 
	}
}

1047 
	$sqlôeVdbeCurs‹Movëo
(
Curs‹
 *
p
){

1048 if–
p
->
de„ºedMovëo
 ){

1049 
ªs
;

1050 
sqlôe_£¨ch_cou¡
;

1051 
	`sqlôeBåìMovëo
(
p
->
pCurs‹
, (*)&p->
movëoT¨gë
, (), &
ªs
);

1052 
p
->
œ°Re˙o
 = 
	`keyToI¡
’->
movëoT¨gë
);

1053 
p
->
ª˙oIsVÆid
 = 
ªs
==0;

1054 if–
ªs
<0 ){

1055 
	`sqlôeBåìNext
(
p
->
pCurs‹
, &
ªs
);

1057 
sqlôe_£¨ch_cou¡
++;

1058 
p
->
de„ºedMovëo
 = 0;

1060  
SQLITE_OK
;

1061 
	}
}

	@where.c

17 
	~"sqlôeI¡.h
"

24 
Ex¥Info
 
	tEx¥Info
;

25 
	sEx¥Info
 {

26 
Ex¥
 *
	mp
;

27 
u8
 
	mödexabÀ
;

28 
	midxLe·
;

30 
	midxRight
;

32 
	m¥îeqLe·
;

33 
	m¥îeqRight
;

34 
	m¥îeqAŒ
;

46 
Ex¥MaskSë
 
	tEx¥MaskSë
;

47 
	sEx¥MaskSë
 {

48 
	mn
;

49 
	mix
[31];

55 
	#ARRAYSIZE
(
X
Ë((X)/(X[0]))

	)

66 
	$ex¥S∂ô
(
nSlŸ
, 
Ex¥Info
 *
aSlŸ
, 
Ex¥
 *
pEx¥
){

67 
˙t
 = 0;

68 if–
pEx¥
==0 || 
nSlŸ
<1 )  0;

69 if–
nSlŸ
==1 || 
pEx¥
->
›
!=
TK_AND
 ){

70 
aSlŸ
[0].
p
 = 
pEx¥
;

73 if–
pEx¥
->
pLe·
->
›
!=
TK_AND
 ){

74 
aSlŸ
[0].
p
 = 
pEx¥
->
pLe·
;

75 
˙t
 = 1 + 
	`ex¥S∂ô
(
nSlŸ
-1, &
aSlŸ
[1], 
pEx¥
->
pRight
);

77 
˙t
 = 
	`ex¥S∂ô
(
nSlŸ
, 
aSlŸ
, 
pEx¥
->
pLe·
);

78 
˙t
 +
	`ex¥S∂ô
(
nSlŸ
-˙t, &
aSlŸ
[˙t], 
pEx¥
->
pRight
);

80  
˙t
;

81 
	}
}

86 
	#öôMaskSë
(
P
Ë
	`mem£t
(P, 0, (*P))

	)

92 
	$gëMask
(
Ex¥MaskSë
 *
pMaskSë
, 
iCurs‹
){

93 
i
;

94 
i
=0; i<
pMaskSë
->
n
; i++){

95 if–
pMaskSë
->
ix
[
i
]==
iCurs‹
 )  1<<i;

97 if–
i
==
pMaskSë
->
n
 && i<
	`ARRAYSIZE
’MaskSë->
ix
) ){

98 
pMaskSë
->
n
++;

99 
pMaskSë
->
ix
[
i
] = 
iCurs‹
;

100  1<<
i
;

103 
	}
}

108 
	#‰ìMaskSë
(
P
Ë

	)

122 
	$ex¥TabÀUßge
(
Ex¥MaskSë
 *
pMaskSë
, 
Ex¥
 *
p
){

123 
mask
 = 0;

124 if–
p
==0 )  0;

125 if–
p
->
›
==
TK_COLUMN
 ){

126 
mask
 = 
	`gëMask
(
pMaskSë
, 
p
->
iTabÀ
);

127 if–
mask
==0 ) mask = -1;

128  
mask
;

130 if–
p
->
pRight
 ){

131 
mask
 = 
	`ex¥TabÀUßge
(
pMaskSë
, 
p
->
pRight
);

133 if–
p
->
pLe·
 ){

134 
mask
 |
	`ex¥TabÀUßge
(
pMaskSë
, 
p
->
pLe·
);

136 if–
p
->
pLi°
 ){

137 
i
;

138 
i
=0; i<
p
->
pLi°
->
nEx¥
; i++){

139 
mask
 |
	`ex¥TabÀUßge
(
pMaskSë
, 
p
->
pLi°
->
a
[
i
].
pEx¥
);

142  
mask
;

143 
	}
}

150 
	$ÆlowedOp
(
›
){

151  
›
 ){

152 
TK_LT
:

153 
TK_LE
:

154 
TK_GT
:

155 
TK_GE
:

156 
TK_EQ
:

157 
TK_IN
:

162 
	}
}

170 
	$ex¥A«lyze
(
Ex¥MaskSë
 *
pMaskSë
, 
Ex¥Info
 *
pInfo
){

171 
Ex¥
 *
pEx¥
 = 
pInfo
->
p
;

172 
pInfo
->
¥îeqLe·
 = 
	`ex¥TabÀUßge
(
pMaskSë
, 
pEx¥
->
pLe·
);

173 
pInfo
->
¥îeqRight
 = 
	`ex¥TabÀUßge
(
pMaskSë
, 
pEx¥
->
pRight
);

174 
pInfo
->
¥îeqAŒ
 = 
	`ex¥TabÀUßge
(
pMaskSë
, 
pEx¥
);

175 
pInfo
->
ödexabÀ
 = 0;

176 
pInfo
->
idxLe·
 = -1;

177 
pInfo
->
idxRight
 = -1;

178 if–
	`ÆlowedOp
(
pEx¥
->
›
Ë&& (
pInfo
->
¥îeqRight
 &ÖInfo->
¥îeqLe·
)==0 ){

179 if–
pEx¥
->
pRight
 &&ÖEx¥->pRight->
›
==
TK_COLUMN
 ){

180 
pInfo
->
idxRight
 = 
pEx¥
->
pRight
->
iTabÀ
;

181 
pInfo
->
ödexabÀ
 = 1;

183 if–
pEx¥
->
pLe·
->
›
==
TK_COLUMN
 ){

184 
pInfo
->
idxLe·
 = 
pEx¥
->
pLe·
->
iTabÀ
;

185 
pInfo
->
ödexabÀ
 = 1;

188 
	}
}

212 
Index
 *
	$födS‹tögIndex
(

213 
TabÀ
 *
pTab
,

214 
ba£
,

215 
Ex¥Li°
 *
pOrdîBy
,

216 
Index
 *
pPª„ºedIdx
,

217 
nEqCﬁ
,

218 *
pbRev


220 
i
, 
j
;

221 
Index
 *
pM©ch
;

222 
Index
 *
pIdx
;

223 
s‹tOrdî
;

225 
	`as£π
–
pOrdîBy
!=0 );

226 
	`as£π
–
pOrdîBy
->
nEx¥
>0 );

227 
s‹tOrdî
 = 
pOrdîBy
->
a
[0].s‹tOrdî & 
SQLITE_SO_DIRMASK
;

228 
i
=0; i<
pOrdîBy
->
nEx¥
; i++){

229 
Ex¥
 *
p
;

230 if–(
pOrdîBy
->
a
[
i
].
s‹tOrdî
 & 
SQLITE_SO_DIRMASK
)!=sortOrder ){

235 if–(
pOrdîBy
->
a
[
i
].
s‹tOrdî
 & 
SQLITE_SO_TYPEMASK
)!=
SQLITE_SO_UNK
 ){

239 
p
 = 
pOrdîBy
->
a
[
i
].
pEx¥
;

240 if–
p
->
›
!=
TK_COLUMN
 ||Ö->
iTabÀ
!=
ba£
 ){

251 
pM©ch
 = 0;

252 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

253 
nEx¥
 = 
pOrdîBy
->nExpr;

254 if–
pIdx
->
nCﬁumn
 < 
nEqCﬁ
 ||ÖIdx->nCﬁum¿< 
nEx¥
 ) ;

255 
i
=
j
=0; i<
nEqCﬁ
; i++){

256 if–
pPª„ºedIdx
->
aiCﬁumn
[
i
]!=
pIdx
->aiColumn[i] ) ;

257 if–
j
<
nEx¥
 && 
pOrdîBy
->
a
[j].
pEx¥
->
iCﬁumn
==
pIdx
->
aiCﬁumn
[
i
] ){ j++; }

259 if–
i
<
nEqCﬁ
 ) ;

260 
i
=0; i+
j
<
nEx¥
; i++){

261 if–
pOrdîBy
->
a
[
i
+
j
].
pEx¥
->
iCﬁumn
!=
pIdx
->
aiCﬁumn
[i+
nEqCﬁ
] ) ;

263 if–
i
+
j
>=
nEx¥
 ){

264 
pM©ch
 = 
pIdx
;

265 if–
pIdx
==
pPª„ºedIdx
 ) ;

268 if–
pM©ch
 && 
pbRev
 ){

269 *
pbRev
 = 
s‹tOrdî
==
SQLITE_SO_DESC
;

271  
pM©ch
;

272 
	}
}

296 
	$dißbÀTîm
(
WhîeLevñ
 *
pLevñ
, 
Ex¥
 **
µEx¥
){

297 
Ex¥
 *
pEx¥
 = *
µEx¥
;

298 if–
pLevñ
->
iLe·Joö
==0 || 
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_FromJoö
) ){

299 *
µEx¥
 = 0;

301 
	}
}

380 
WhîeInfo
 *
	$sqlôeWhîeBegö
(

381 
P¨£
 *
pP¨£
,

382 
SrcLi°
 *
pTabLi°
,

383 
Ex¥
 *
pWhîe
,

384 
pushKey
,

385 
Ex¥Li°
 **
µOrdîBy


387 
i
;

388 
WhîeInfo
 *
pWInfo
;

389 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

390 
brk
, 
c⁄t
 = 0;

391 
nEx¥
;

392 
lo›Mask
;

393 
haveKey
;

394 
Ex¥MaskSë
 
maskSë
;

395 
iDúe˘Eq
[32];

396 
iDúe˘Lt
[32];

397 
iDúe˘Gt
[32];

398 
Ex¥Info
 
aEx¥
[101];

403 
	`as£π
–
pushKey
==0 || 
pTabLi°
->
nSrc
==1 );

410 
	`öôMaskSë
(&
maskSë
);

411 
	`mem£t
(
aEx¥
, 0, (aExpr));

412 
nEx¥
 = 
	`ex¥S∂ô
(
	`ARRAYSIZE
(
aEx¥
),áEx¥, 
pWhîe
);

413 if–
nEx¥
==
	`ARRAYSIZE
(
aEx¥
) ){

414 
	`sqlôeEº‹Msg
(
pP¨£
, "WHERE clauseÅoo complex -Ço more "

415 "th™ %dÅîm†Ælowed", ()
	`ARRAYSIZE
(
aEx¥
)-1);

422 
pWInfo
 = 
	`sqlôeMÆloc
–(
WhîeInfo
Ë+ 
pTabLi°
->
nSrc
*(
WhîeLevñ
));

423 if–
sqlôe_mÆloc_Áûed
 ){

424 
	`sqlôeFªe
(
pWInfo
);

427 
pWInfo
->
pP¨£
 =ÖParse;

428 
pWInfo
->
pTabLi°
 =ÖTabList;

429 
pWInfo
->
≥akNTab
 =ÖWInfo->
ßvedNTab
 = 
pP¨£
->
nTab
;

430 
pWInfo
->
iBªak
 = 
	`sqlôeVdbeMakeLabñ
(
v
);

435 if–
pWhîe
 && (
pTabLi°
->
nSrc
==0 || 
	`sqlôeEx¥IsC⁄°™t
(pWhere)) ){

436 
	`sqlôeEx¥IfFÆ£
(
pP¨£
, 
pWhîe
, 
pWInfo
->
iBªak
, 1);

437 
pWhîe
 = 0;

442 
i
=0; i<
nEx¥
; i++){

443 
	`ex¥A«lyze
(&
maskSë
, &
aEx¥
[
i
]);

448 if–
pP¨£
->
åigSèck
 ){

449 
x
;

450 if–(
x
 = 
pP¨£
->
åigSèck
->
√wIdx
) >= 0 ){

451 
mask
 = ~
	`gëMask
(&
maskSë
, 
x
);

452 
aEx¥
[
i
].
¥îeqRight
 &
mask
;

453 
aEx¥
[
i
].
¥îeqLe·
 &
mask
;

454 
aEx¥
[
i
].
¥îeqAŒ
 &
mask
;

456 if–(
x
 = 
pP¨£
->
åigSèck
->
ﬁdIdx
) >= 0 ){

457 
mask
 = ~
	`gëMask
(&
maskSë
, 
x
);

458 
aEx¥
[
i
].
¥îeqRight
 &
mask
;

459 
aEx¥
[
i
].
¥îeqLe·
 &
mask
;

460 
aEx¥
[
i
].
¥îeqAŒ
 &
mask
;

481 
lo›Mask
 = 0;

482 
i
=0; i<
pTabLi°
->
nSrc
 && i<
	`ARRAYSIZE
(
iDúe˘Eq
); i++){

483 
j
;

484 
iCur
 = 
pTabLi°
->
a
[
i
].
iCurs‹
;

485 
mask
 = 
	`gëMask
(&
maskSë
, 
iCur
);

486 
TabÀ
 *
pTab
 = 
pTabLi°
->
a
[
i
].pTab;

487 
Index
 *
pIdx
;

488 
Index
 *
pBe°Idx
 = 0;

489 
be°Sc‹e
 = 0;

499 
pWInfo
->
a
[
i
].
iCur
 = -1;

500 
iDúe˘Eq
[
i
] = -1;

501 
iDúe˘Lt
[
i
] = -1;

502 
iDúe˘Gt
[
i
] = -1;

503 
j
=0; j<
nEx¥
; j++){

504 if–
aEx¥
[
j
].
idxLe·
==
iCur
 &&áEx¥[j].
p
->
pLe·
->
iCﬁumn
<0

505 && (
aEx¥
[
j
].
¥îeqRight
 & 
lo›Mask
)==aExpr[j].prereqRight ){

506  
aEx¥
[
j
].
p
->
›
 ){

507 
TK_IN
:

508 
TK_EQ
: 
iDúe˘Eq
[
i
] = 
j
; ;

509 
TK_LE
:

510 
TK_LT
: 
iDúe˘Lt
[
i
] = 
j
; ;

511 
TK_GE
:

512 
TK_GT
: 
iDúe˘Gt
[
i
] = 
j
; ;

515 if–
aEx¥
[
j
].
idxRight
==
iCur
 &&áEx¥[j].
p
->
pRight
->
iCﬁumn
<0

516 && (
aEx¥
[
j
].
¥îeqLe·
 & 
lo›Mask
)==aExpr[j].prereqLeft ){

517  
aEx¥
[
j
].
p
->
›
 ){

518 
TK_EQ
: 
iDúe˘Eq
[
i
] = 
j
; ;

519 
TK_LE
:

520 
TK_LT
: 
iDúe˘Gt
[
i
] = 
j
; ;

521 
TK_GE
:

522 
TK_GT
: 
iDúe˘Lt
[
i
] = 
j
; ;

526 if–
iDúe˘Eq
[
i
]>=0 ){

527 
lo›Mask
 |
mask
;

528 
pWInfo
->
a
[
i
].
pIdx
 = 0;

557 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

558 
eqMask
 = 0;

559 
…Mask
 = 0;

560 
gtMask
 = 0;

561 
öMask
 = 0;

562 
nEq
, 
m
, 
sc‹e
;

564 if–
pIdx
->
nCﬁumn
>32 ) ;

565 
j
=0; j<
nEx¥
; j++){

566 if–
aEx¥
[
j
].
idxLe·
==
iCur


567 && (
aEx¥
[
j
].
¥îeqRight
 & 
lo›Mask
)==aExpr[j].prereqRight ){

568 
iCﬁumn
 = 
aEx¥
[
j
].
p
->
pLe·
->iColumn;

569 
k
;

570 
k
=0; k<
pIdx
->
nCﬁumn
; k++){

571 if–
pIdx
->
aiCﬁumn
[
k
]==
iCﬁumn
 ){

572  
aEx¥
[
j
].
p
->
›
 ){

573 
TK_IN
: {

574 if–
k
==0 ) 
öMask
 |= 1;

577 
TK_EQ
: {

578 
eqMask
 |1<<
k
;

581 
TK_LE
:

582 
TK_LT
: {

583 
…Mask
 |1<<
k
;

586 
TK_GE
:

587 
TK_GT
: {

588 
gtMask
 |1<<
k
;

593 
	`as£π
( 0 );

601 if–
aEx¥
[
j
].
idxRight
==
iCur


602 && (
aEx¥
[
j
].
¥îeqLe·
 & 
lo›Mask
)==aExpr[j].prereqLeft ){

603 
iCﬁumn
 = 
aEx¥
[
j
].
p
->
pRight
->iColumn;

604 
k
;

605 
k
=0; k<
pIdx
->
nCﬁumn
; k++){

606 if–
pIdx
->
aiCﬁumn
[
k
]==
iCﬁumn
 ){

607  
aEx¥
[
j
].
p
->
›
 ){

608 
TK_EQ
: {

609 
eqMask
 |1<<
k
;

612 
TK_LE
:

613 
TK_LT
: {

614 
gtMask
 |1<<
k
;

617 
TK_GE
:

618 
TK_GT
: {

619 
…Mask
 |1<<
k
;

624 
	`as£π
( 0 );

637 
nEq
=0;ÇEq<
pIdx
->
nCﬁumn
;ÇEq++){

638 
m
 = (1<<(
nEq
+1))-1;

639 if–(
m
 & 
eqMask
)!=m ) ;

641 
sc‹e
 = 
nEq
*8;

642 
m
 = 1<<
nEq
;

643 if–
m
 & 
…Mask
 ) 
sc‹e
++;

644 if–
m
 & 
gtMask
 ) 
sc‹e
+=2;

645 if–
sc‹e
==0 && 
öMask
 ) score = 4;

646 if–
sc‹e
>
be°Sc‹e
 ){

647 
pBe°Idx
 = 
pIdx
;

648 
be°Sc‹e
 = 
sc‹e
;

651 
pWInfo
->
a
[
i
].
pIdx
 = 
pBe°Idx
;

652 
pWInfo
->
a
[
i
].
sc‹e
 = 
be°Sc‹e
;

653 
pWInfo
->
a
[
i
].
bRev
 = 0;

654 
lo›Mask
 |
mask
;

655 if–
pBe°Idx
 ){

656 
pWInfo
->
a
[
i
].
iCur
 = 
pP¨£
->
nTab
++;

657 
pWInfo
->
≥akNTab
 = 
pP¨£
->
nTab
;

664 if–
µOrdîBy
 && *µOrdîBy && 
pTabLi°
->
nSrc
>0 ){

665 
Index
 *
pS‹tIdx
;

666 
Index
 *
pIdx
;

667 
TabÀ
 *
pTab
;

668 
bRev
 = 0;

670 
pTab
 = 
pTabLi°
->
a
[0].pTab;

671 
pIdx
 = 
pWInfo
->
a
[0].pIdx;

672 if–
pIdx
 && 
pWInfo
->
a
[0].
sc‹e
==4 ){

677 
pS‹tIdx
 = 0;

678 }if–
iDúe˘Eq
[0]>=0 || 
iDúe˘Lt
[0]>=0 || 
iDúe˘Gt
[0]>=0 ){

682 
pS‹tIdx
 = 0;

684 
nEqCﬁ
 = (
pWInfo
->
a
[0].
sc‹e
+4)/8;

685 
pS‹tIdx
 = 
	`födS‹tögIndex
(
pTab
, 
pTabLi°
->
a
[0].
iCurs‹
,

686 *
µOrdîBy
, 
pIdx
, 
nEqCﬁ
, &
bRev
);

688 if–
pS‹tIdx
 && (
pIdx
==0 ||ÖIdx==pSortIdx) ){

689 if–
pIdx
==0 ){

690 
pWInfo
->
a
[0].
pIdx
 = 
pS‹tIdx
;

691 
pWInfo
->
a
[0].
iCur
 = 
pP¨£
->
nTab
++;

692 
pWInfo
->
≥akNTab
 = 
pP¨£
->
nTab
;

694 
pWInfo
->
a
[0].
bRev
 = bRev;

695 *
µOrdîBy
 = 0;

701 
i
=0; i<
pTabLi°
->
nSrc
; i++){

702 
TabÀ
 *
pTab
;

703 
Index
 *
pIx
;

705 
pTab
 = 
pTabLi°
->
a
[
i
].pTab;

706 if–
pTab
->
isTønsõ¡
 ||ÖTab->
pSñe˘
 ) ;

707 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
pTab
->
iDb
, 0);

708 
	`sqlôeVdbeOp3
(
v
, 
OP_O≥nRód
, 
pTabLi°
->
a
[
i
].
iCurs‹
, 
pTab
->
äum
,

709 
pTab
->
zName
, 
P3_STATIC
);

710 
	`sqlôeCodeVîifySchema
(
pP¨£
, 
pTab
->
iDb
);

711 if–(
pIx
 = 
pWInfo
->
a
[
i
].
pIdx
)!=0 ){

712 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 
pIx
->
iDb
, 0);

713 
	`sqlôeVdbeOp3
(
v
, 
OP_O≥nRód
, 
pWInfo
->
a
[
i
].
iCur
, 
pIx
->
äum
,ÖIx->
zName
,0);

719 
lo›Mask
 = 0;

720 
i
=0; i<
pTabLi°
->
nSrc
; i++){

721 
j
, 
k
;

722 
iCur
 = 
pTabLi°
->
a
[
i
].
iCurs‹
;

723 
Index
 *
pIdx
;

724 
WhîeLevñ
 *
pLevñ
 = &
pWInfo
->
a
[
i
];

730 if–
i
>0 && (
pTabLi°
->
a
[i-1].
joöty≥
 & 
JT_LEFT
)!=0 ){

731 if–!
pP¨£
->
nMem
 )ÖParse->nMem++;

732 
pLevñ
->
iLe·Joö
 = 
pP¨£
->
nMem
++;

733 
	`sqlôeVdbeAddOp
(
v
, 
OP_Såög
, 0, 0);

734 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemSt‹e
, 
pLevñ
->
iLe·Joö
, 1);

737 
pIdx
 = 
pLevñ
->pIdx;

738 
pLevñ
->
öOp
 = 
OP_No›
;

739 if–
i
<
	`ARRAYSIZE
(
iDúe˘Eq
) && iDirectEq[i]>=0 ){

745 
k
 = 
iDúe˘Eq
[
i
];

746 
	`as£π
–
k
<
nEx¥
 );

747 
	`as£π
–
aEx¥
[
k
].
p
!=0 );

748 
	`as£π
–
aEx¥
[
k
].
idxLe·
==
iCur
 ||áEx¥[k].
idxRight
==iCur );

749 
brk
 = 
pLevñ
->brk = 
	`sqlôeVdbeMakeLabñ
(
v
);

750 if–
aEx¥
[
k
].
idxLe·
==
iCur
 ){

751 
Ex¥
 *
pX
 = 
aEx¥
[
k
].
p
;

752 if–
pX
->
›
!=
TK_IN
 ){

753 
	`sqlôeEx¥Code
(
pP¨£
, 
aEx¥
[
k
].
p
->
pRight
);

754 }if–
pX
->
pLi°
 ){

755 
	`sqlôeVdbeAddOp
(
v
, 
OP_SëFú°
, 
pX
->
iTabÀ
, 
brk
);

756 
pLevñ
->
öOp
 = 
OP_SëNext
;

757 
pLevñ
->
öP1
 = 
pX
->
iTabÀ
;

758 
pLevñ
->
öP2
 = 
	`sqlôeVdbeCuºítAddr
(
v
);

760 
	`as£π
–
pX
->
pSñe˘
 );

761 
	`sqlôeVdbeAddOp
(
v
, 
OP_Rewöd
, 
pX
->
iTabÀ
, 
brk
);

762 
	`sqlôeVdbeAddOp
(
v
, 
OP_KeyAsD©a
, 
pX
->
iTabÀ
, 1);

763 
pLevñ
->
öP2
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_FuŒKey
, 
pX
->
iTabÀ
, 0);

764 
pLevñ
->
öOp
 = 
OP_Next
;

765 
pLevñ
->
öP1
 = 
pX
->
iTabÀ
;

768 
	`sqlôeEx¥Code
(
pP¨£
, 
aEx¥
[
k
].
p
->
pLe·
);

770 
	`dißbÀTîm
(
pLevñ
, &
aEx¥
[
k
].
p
);

771 
c⁄t
 = 
pLevñ
->c⁄à
	`sqlôeVdbeMakeLabñ
(
v
);

772 
	`sqlôeVdbeAddOp
(
v
, 
OP_Mu°BeI¡
, 1, 
brk
);

773 
haveKey
 = 0;

774 
	`sqlôeVdbeAddOp
(
v
, 
OP_NŸExi°s
, 
iCur
, 
brk
);

775 
pLevñ
->
›
 = 
OP_No›
;

776 }if–
pIdx
!=0 && 
pLevñ
->
sc‹e
>0 &&ÖLevel->score%4==0 ){

780 
°¨t
;

781 
ã°Op
;

782 
nCﬁumn
 = (
pLevñ
->
sc‹e
+4)/8;

783 
brk
 = 
pLevñ
->brk = 
	`sqlôeVdbeMakeLabñ
(
v
);

784 
j
=0; j<
nCﬁumn
; j++){

785 
k
=0; k<
nEx¥
; k++){

786 
Ex¥
 *
pX
 = 
aEx¥
[
k
].
p
;

787 if–
pX
==0 ) ;

788 if–
aEx¥
[
k
].
idxLe·
==
iCur


789 && (
aEx¥
[
k
].
¥îeqRight
 & 
lo›Mask
)==aExpr[k].prereqRight

790 && 
pX
->
pLe·
->
iCﬁumn
==
pIdx
->
aiCﬁumn
[
j
]

792 if–
pX
->
›
==
TK_EQ
 ){

793 
	`sqlôeEx¥Code
(
pP¨£
, 
pX
->
pRight
);

794 
	`dißbÀTîm
(
pLevñ
, &
aEx¥
[
k
].
p
);

797 if–
pX
->
›
==
TK_IN
 && 
nCﬁumn
==1 ){

798 if–
pX
->
pLi°
 ){

799 
	`sqlôeVdbeAddOp
(
v
, 
OP_SëFú°
, 
pX
->
iTabÀ
, 
brk
);

800 
pLevñ
->
öOp
 = 
OP_SëNext
;

801 
pLevñ
->
öP1
 = 
pX
->
iTabÀ
;

802 
pLevñ
->
öP2
 = 
	`sqlôeVdbeCuºítAddr
(
v
);

804 
	`as£π
–
pX
->
pSñe˘
 );

805 
	`sqlôeVdbeAddOp
(
v
, 
OP_Rewöd
, 
pX
->
iTabÀ
, 
brk
);

806 
	`sqlôeVdbeAddOp
(
v
, 
OP_KeyAsD©a
, 
pX
->
iTabÀ
, 1);

807 
pLevñ
->
öP2
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_FuŒKey
, 
pX
->
iTabÀ
, 0);

808 
pLevñ
->
öOp
 = 
OP_Next
;

809 
pLevñ
->
öP1
 = 
pX
->
iTabÀ
;

811 
	`dißbÀTîm
(
pLevñ
, &
aEx¥
[
k
].
p
);

815 if–
aEx¥
[
k
].
idxRight
==
iCur


816 && 
aEx¥
[
k
].
p
->
›
==
TK_EQ


817 && (
aEx¥
[
k
].
¥îeqLe·
 & 
lo›Mask
)==aExpr[k].prereqLeft

818 && 
aEx¥
[
k
].
p
->
pRight
->
iCﬁumn
==
pIdx
->
aiCﬁumn
[
j
]

820 
	`sqlôeEx¥Code
(
pP¨£
, 
aEx¥
[
k
].
p
->
pLe·
);

821 
	`dißbÀTîm
(
pLevñ
, &
aEx¥
[
k
].
p
);

826 
pLevñ
->
iMem
 = 
pP¨£
->
nMem
++;

827 
c⁄t
 = 
pLevñ
->c⁄à
	`sqlôeVdbeMakeLabñ
(
v
);

828 
	`sqlôeVdbeAddOp
(
v
, 
OP_NŸNuŒ
, -
nCﬁumn
, 
	`sqlôeVdbeCuºítAddr
(v)+3);

829 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 
nCﬁumn
, 0);

830 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
brk
);

831 
	`sqlôeVdbeAddOp
(
v
, 
OP_MakeKey
, 
nCﬁumn
, 0);

832 
	`sqlôeAddIdxKeyTy≥
(
v
, 
pIdx
);

833 if–
nCﬁumn
==
pIdx
->nCﬁum¿|| 
pLevñ
->
bRev
 ){

834 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemSt‹e
, 
pLevñ
->
iMem
, 0);

835 
ã°Op
 = 
OP_IdxGT
;

837 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 0, 0);

838 
	`sqlôeVdbeAddOp
(
v
, 
OP_In¸Key
, 0, 0);

839 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemSt‹e
, 
pLevñ
->
iMem
, 1);

840 
ã°Op
 = 
OP_IdxGE
;

842 if–
pLevñ
->
bRev
 ){

844 
	`sqlôeVdbeAddOp
(
v
, 
OP_In¸Key
, 0, 0);

845 
	`sqlôeVdbeAddOp
(
v
, 
OP_MoveLt
, 
pLevñ
->
iCur
, 
brk
);

846 
°¨t
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemLﬂd
, 
pLevñ
->
iMem
, 0);

847 
	`sqlôeVdbeAddOp
(
v
, 
OP_IdxLT
, 
pLevñ
->
iCur
, 
brk
);

848 
pLevñ
->
›
 = 
OP_Pªv
;

851 
	`sqlôeVdbeAddOp
(
v
, 
OP_MoveTo
, 
pLevñ
->
iCur
, 
brk
);

852 
°¨t
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemLﬂd
, 
pLevñ
->
iMem
, 0);

853 
	`sqlôeVdbeAddOp
(
v
, 
ã°Op
, 
pLevñ
->
iCur
, 
brk
);

854 
pLevñ
->
›
 = 
OP_Next
;

856 
	`sqlôeVdbeAddOp
(
v
, 
OP_RowKey
, 
pLevñ
->
iCur
, 0);

857 
	`sqlôeVdbeAddOp
(
v
, 
OP_IdxIsNuŒ
, 
nCﬁumn
, 
c⁄t
);

858 
	`sqlôeVdbeAddOp
(
v
, 
OP_IdxRe˙o
, 
pLevñ
->
iCur
, 0);

859 if–
i
==
pTabLi°
->
nSrc
-1 && 
pushKey
 ){

860 
haveKey
 = 1;

862 
	`sqlôeVdbeAddOp
(
v
, 
OP_MoveTo
, 
iCur
, 0);

863 
haveKey
 = 0;

865 
pLevñ
->
p1
 =ÖLevñ->
iCur
;

866 
pLevñ
->
p2
 = 
°¨t
;

867 }if–
i
<
	`ARRAYSIZE
(
iDúe˘Lt
Ë&& (iDúe˘Lt[i]>=0 || 
iDúe˘Gt
[i]>=0) ){

870 
ã°Op
 = 
OP_No›
;

871 
°¨t
;

873 
brk
 = 
pLevñ
->brk = 
	`sqlôeVdbeMakeLabñ
(
v
);

874 
c⁄t
 = 
pLevñ
->c⁄à
	`sqlôeVdbeMakeLabñ
(
v
);

875 if–
iDúe˘Gt
[
i
]>=0 ){

876 
k
 = 
iDúe˘Gt
[
i
];

877 
	`as£π
–
k
<
nEx¥
 );

878 
	`as£π
–
aEx¥
[
k
].
p
!=0 );

879 
	`as£π
–
aEx¥
[
k
].
idxLe·
==
iCur
 ||áEx¥[k].
idxRight
==iCur );

880 if–
aEx¥
[
k
].
idxLe·
==
iCur
 ){

881 
	`sqlôeEx¥Code
(
pP¨£
, 
aEx¥
[
k
].
p
->
pRight
);

883 
	`sqlôeEx¥Code
(
pP¨£
, 
aEx¥
[
k
].
p
->
pLe·
);

885 
	`sqlôeVdbeAddOp
(
v
, 
OP_F‹˚I¡
,

886 
aEx¥
[
k
].
p
->
›
==
TK_LT
 ||áEx¥[k].p->›==
TK_GT
, 
brk
);

887 
	`sqlôeVdbeAddOp
(
v
, 
OP_MoveTo
, 
iCur
, 
brk
);

888 
	`dißbÀTîm
(
pLevñ
, &
aEx¥
[
k
].
p
);

890 
	`sqlôeVdbeAddOp
(
v
, 
OP_Rewöd
, 
iCur
, 
brk
);

892 if–
iDúe˘Lt
[
i
]>=0 ){

893 
k
 = 
iDúe˘Lt
[
i
];

894 
	`as£π
–
k
<
nEx¥
 );

895 
	`as£π
–
aEx¥
[
k
].
p
!=0 );

896 
	`as£π
–
aEx¥
[
k
].
idxLe·
==
iCur
 ||áEx¥[k].
idxRight
==iCur );

897 if–
aEx¥
[
k
].
idxLe·
==
iCur
 ){

898 
	`sqlôeEx¥Code
(
pP¨£
, 
aEx¥
[
k
].
p
->
pRight
);

900 
	`sqlôeEx¥Code
(
pP¨£
, 
aEx¥
[
k
].
p
->
pLe·
);

903 
pLevñ
->
iMem
 = 
pP¨£
->
nMem
++;

904 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemSt‹e
, 
pLevñ
->
iMem
, 1);

905 if–
aEx¥
[
k
].
p
->
›
==
TK_LT
 ||áEx¥[k].p->›==
TK_GT
 ){

906 
ã°Op
 = 
OP_Ge
;

908 
ã°Op
 = 
OP_Gt
;

910 
	`dißbÀTîm
(
pLevñ
, &
aEx¥
[
k
].
p
);

912 
°¨t
 = 
	`sqlôeVdbeCuºítAddr
(
v
);

913 
pLevñ
->
›
 = 
OP_Next
;

914 
pLevñ
->
p1
 = 
iCur
;

915 
pLevñ
->
p2
 = 
°¨t
;

916 if–
ã°Op
!=
OP_No›
 ){

917 
	`sqlôeVdbeAddOp
(
v
, 
OP_Re˙o
, 
iCur
, 0);

918 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemLﬂd
, 
pLevñ
->
iMem
, 0);

919 
	`sqlôeVdbeAddOp
(
v
, 
ã°Op
, 0, 
brk
);

921 
haveKey
 = 0;

922 }if–
pIdx
==0 ){

926 
°¨t
;

928 
brk
 = 
pLevñ
->brk = 
	`sqlôeVdbeMakeLabñ
(
v
);

929 
c⁄t
 = 
pLevñ
->c⁄à
	`sqlôeVdbeMakeLabñ
(
v
);

930 
	`sqlôeVdbeAddOp
(
v
, 
OP_Rewöd
, 
iCur
, 
brk
);

931 
°¨t
 = 
	`sqlôeVdbeCuºítAddr
(
v
);

932 
pLevñ
->
›
 = 
OP_Next
;

933 
pLevñ
->
p1
 = 
iCur
;

934 
pLevñ
->
p2
 = 
°¨t
;

935 
haveKey
 = 0;

948 
sc‹e
 = 
pLevñ
->score;

949 
nEqCﬁumn
 = 
sc‹e
/8;

950 
°¨t
;

951 
ÀFœg
, 
geFœg
;

952 
ã°Op
;

956 
j
=0; j<
nEqCﬁumn
; j++){

957 
k
=0; k<
nEx¥
; k++){

958 if–
aEx¥
[
k
].
p
==0 ) ;

959 if–
aEx¥
[
k
].
idxLe·
==
iCur


960 && 
aEx¥
[
k
].
p
->
›
==
TK_EQ


961 && (
aEx¥
[
k
].
¥îeqRight
 & 
lo›Mask
)==aExpr[k].prereqRight

962 && 
aEx¥
[
k
].
p
->
pLe·
->
iCﬁumn
==
pIdx
->
aiCﬁumn
[
j
]

964 
	`sqlôeEx¥Code
(
pP¨£
, 
aEx¥
[
k
].
p
->
pRight
);

965 
	`dißbÀTîm
(
pLevñ
, &
aEx¥
[
k
].
p
);

968 if–
aEx¥
[
k
].
idxRight
==
iCur


969 && 
aEx¥
[
k
].
p
->
›
==
TK_EQ


970 && (
aEx¥
[
k
].
¥îeqLe·
 & 
lo›Mask
)==aExpr[k].prereqLeft

971 && 
aEx¥
[
k
].
p
->
pRight
->
iCﬁumn
==
pIdx
->
aiCﬁumn
[
j
]

973 
	`sqlôeEx¥Code
(
pP¨£
, 
aEx¥
[
k
].
p
->
pLe·
);

974 
	`dißbÀTîm
(
pLevñ
, &
aEx¥
[
k
].
p
);

984 
j
=0; j<
nEqCﬁumn
; j++){

985 
	`sqlôeVdbeAddOp
(
v
, 
OP_Dup
, 
nEqCﬁumn
-1, 0);

990 
c⁄t
 = 
pLevñ
->c⁄à
	`sqlôeVdbeMakeLabñ
(
v
);

991 
brk
 = 
pLevñ
->brk = 
	`sqlôeVdbeMakeLabñ
(
v
);

1000 if–(
sc‹e
 & 1)!=0 ){

1001 
k
=0; k<
nEx¥
; k++){

1002 
Ex¥
 *
pEx¥
 = 
aEx¥
[
k
].
p
;

1003 if–
pEx¥
==0 ) ;

1004 if–
aEx¥
[
k
].
idxLe·
==
iCur


1005 && (
pEx¥
->
›
==
TK_LT
 ||ÖEx¥->›==
TK_LE
)

1006 && (
aEx¥
[
k
].
¥îeqRight
 & 
lo›Mask
)==aExpr[k].prereqRight

1007 && 
pEx¥
->
pLe·
->
iCﬁumn
==
pIdx
->
aiCﬁumn
[
j
]

1009 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pRight
);

1010 
ÀFœg
 = 
pEx¥
->
›
==
TK_LE
;

1011 
	`dißbÀTîm
(
pLevñ
, &
aEx¥
[
k
].
p
);

1014 if–
aEx¥
[
k
].
idxRight
==
iCur


1015 && (
pEx¥
->
›
==
TK_GT
 ||ÖEx¥->›==
TK_GE
)

1016 && (
aEx¥
[
k
].
¥îeqLe·
 & 
lo›Mask
)==aExpr[k].prereqLeft

1017 && 
pEx¥
->
pRight
->
iCﬁumn
==
pIdx
->
aiCﬁumn
[
j
]

1019 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1020 
ÀFœg
 = 
pEx¥
->
›
==
TK_GE
;

1021 
	`dißbÀTîm
(
pLevñ
, &
aEx¥
[
k
].
p
);

1025 
ã°Op
 = 
OP_IdxGE
;

1027 
ã°Op
 = 
nEqCﬁumn
>0 ? 
OP_IdxGE
 : 
OP_No›
;

1028 
ÀFœg
 = 1;

1030 if–
ã°Op
!=
OP_No›
 ){

1031 
nCﬁ
 = 
nEqCﬁumn
 + (
sc‹e
 & 1);

1032 
pLevñ
->
iMem
 = 
pP¨£
->
nMem
++;

1033 
	`sqlôeVdbeAddOp
(
v
, 
OP_NŸNuŒ
, -
nCﬁ
, 
	`sqlôeVdbeCuºítAddr
(v)+3);

1034 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 
nCﬁ
, 0);

1035 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
brk
);

1036 
	`sqlôeVdbeAddOp
(
v
, 
OP_MakeKey
, 
nCﬁ
, 0);

1037 
	`sqlôeAddIdxKeyTy≥
(
v
, 
pIdx
);

1038 if–
ÀFœg
 ){

1039 
	`sqlôeVdbeAddOp
(
v
, 
OP_In¸Key
, 0, 0);

1041 if–
pLevñ
->
bRev
 ){

1042 
	`sqlôeVdbeAddOp
(
v
, 
OP_MoveLt
, 
pLevñ
->
iCur
, 
brk
);

1044 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemSt‹e
, 
pLevñ
->
iMem
, 1);

1046 }if–
pLevñ
->
bRev
 ){

1047 
	`sqlôeVdbeAddOp
(
v
, 
OP_La°
, 
pLevñ
->
iCur
, 
brk
);

1059 if–(
sc‹e
 & 2)!=0 ){

1060 
k
=0; k<
nEx¥
; k++){

1061 
Ex¥
 *
pEx¥
 = 
aEx¥
[
k
].
p
;

1062 if–
pEx¥
==0 ) ;

1063 if–
aEx¥
[
k
].
idxLe·
==
iCur


1064 && (
pEx¥
->
›
==
TK_GT
 ||ÖEx¥->›==
TK_GE
)

1065 && (
aEx¥
[
k
].
¥îeqRight
 & 
lo›Mask
)==aExpr[k].prereqRight

1066 && 
pEx¥
->
pLe·
->
iCﬁumn
==
pIdx
->
aiCﬁumn
[
j
]

1068 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pRight
);

1069 
geFœg
 = 
pEx¥
->
›
==
TK_GE
;

1070 
	`dißbÀTîm
(
pLevñ
, &
aEx¥
[
k
].
p
);

1073 if–
aEx¥
[
k
].
idxRight
==
iCur


1074 && (
pEx¥
->
›
==
TK_LT
 ||ÖEx¥->›==
TK_LE
)

1075 && (
aEx¥
[
k
].
¥îeqLe·
 & 
lo›Mask
)==aExpr[k].prereqLeft

1076 && 
pEx¥
->
pRight
->
iCﬁumn
==
pIdx
->
aiCﬁumn
[
j
]

1078 
	`sqlôeEx¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1079 
geFœg
 = 
pEx¥
->
›
==
TK_LE
;

1080 
	`dißbÀTîm
(
pLevñ
, &
aEx¥
[
k
].
p
);

1085 
geFœg
 = 1;

1087 if–
nEqCﬁumn
>0 || (
sc‹e
&2)!=0 ){

1088 
nCﬁ
 = 
nEqCﬁumn
 + ((
sc‹e
&2)!=0);

1089 
	`sqlôeVdbeAddOp
(
v
, 
OP_NŸNuŒ
, -
nCﬁ
, 
	`sqlôeVdbeCuºítAddr
(v)+3);

1090 
	`sqlôeVdbeAddOp
(
v
, 
OP_P›
, 
nCﬁ
, 0);

1091 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
brk
);

1092 
	`sqlôeVdbeAddOp
(
v
, 
OP_MakeKey
, 
nCﬁ
, 0);

1093 
	`sqlôeAddIdxKeyTy≥
(
v
, 
pIdx
);

1094 if–!
geFœg
 ){

1095 
	`sqlôeVdbeAddOp
(
v
, 
OP_In¸Key
, 0, 0);

1097 if–
pLevñ
->
bRev
 ){

1098 
pLevñ
->
iMem
 = 
pP¨£
->
nMem
++;

1099 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemSt‹e
, 
pLevñ
->
iMem
, 1);

1100 
ã°Op
 = 
OP_IdxLT
;

1102 
	`sqlôeVdbeAddOp
(
v
, 
OP_MoveTo
, 
pLevñ
->
iCur
, 
brk
);

1104 }if–
pLevñ
->
bRev
 ){

1105 
ã°Op
 = 
OP_No›
;

1107 
	`sqlôeVdbeAddOp
(
v
, 
OP_Rewöd
, 
pLevñ
->
iCur
, 
brk
);

1114 
°¨t
 = 
	`sqlôeVdbeCuºítAddr
(
v
);

1115 if–
ã°Op
!=
OP_No›
 ){

1116 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemLﬂd
, 
pLevñ
->
iMem
, 0);

1117 
	`sqlôeVdbeAddOp
(
v
, 
ã°Op
, 
pLevñ
->
iCur
, 
brk
);

1119 
	`sqlôeVdbeAddOp
(
v
, 
OP_RowKey
, 
pLevñ
->
iCur
, 0);

1120 
	`sqlôeVdbeAddOp
(
v
, 
OP_IdxIsNuŒ
, 
nEqCﬁumn
 + (
sc‹e
 & 1), 
c⁄t
);

1121 
	`sqlôeVdbeAddOp
(
v
, 
OP_IdxRe˙o
, 
pLevñ
->
iCur
, 0);

1122 if–
i
==
pTabLi°
->
nSrc
-1 && 
pushKey
 ){

1123 
haveKey
 = 1;

1125 
	`sqlôeVdbeAddOp
(
v
, 
OP_MoveTo
, 
iCur
, 0);

1126 
haveKey
 = 0;

1131 
pLevñ
->
›
 =ÖLevñ->
bRev
 ? 
OP_Pªv
 : 
OP_Next
;

1132 
pLevñ
->
p1
 =ÖLevñ->
iCur
;

1133 
pLevñ
->
p2
 = 
°¨t
;

1135 
lo›Mask
 |
	`gëMask
(&
maskSë
, 
iCur
);

1140 
j
=0; j<
nEx¥
; j++){

1141 if–
aEx¥
[
j
].
p
==0 ) ;

1142 if–(
aEx¥
[
j
].
¥îeqAŒ
 & 
lo›Mask
)!=aExpr[j].prereqAll ) ;

1143 if–
pLevñ
->
iLe·Joö
 && !
	`Ex¥HasPr›îty
(
aEx¥
[
j
].
p
,
EP_FromJoö
) ){

1146 if–
haveKey
 ){

1147 
haveKey
 = 0;

1148 
	`sqlôeVdbeAddOp
(
v
, 
OP_MoveTo
, 
iCur
, 0);

1150 
	`sqlôeEx¥IfFÆ£
(
pP¨£
, 
aEx¥
[
j
].
p
, 
c⁄t
, 1);

1151 
aEx¥
[
j
].
p
 = 0;

1153 
brk
 = 
c⁄t
;

1158 if–
pLevñ
->
iLe·Joö
 ){

1159 
pLevñ
->
t›
 = 
	`sqlôeVdbeCuºítAddr
(
v
);

1160 
	`sqlôeVdbeAddOp
(
v
, 
OP_I¡egî
, 1, 0);

1161 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemSt‹e
, 
pLevñ
->
iLe·Joö
, 1);

1162 
j
=0; j<
nEx¥
; j++){

1163 if–
aEx¥
[
j
].
p
==0 ) ;

1164 if–(
aEx¥
[
j
].
¥îeqAŒ
 & 
lo›Mask
)!=aExpr[j].prereqAll ) ;

1165 if–
haveKey
 ){

1170 
haveKey
 = 0;

1171 
	`sqlôeVdbeAddOp
(
v
, 
OP_MoveTo
, 
iCur
, 0);

1173 
	`sqlôeEx¥IfFÆ£
(
pP¨£
, 
aEx¥
[
j
].
p
, 
c⁄t
, 1);

1174 
aEx¥
[
j
].
p
 = 0;

1178 
pWInfo
->
iC⁄töue
 = 
c⁄t
;

1179 if–
pushKey
 && !
haveKey
 ){

1180 
	`sqlôeVdbeAddOp
(
v
, 
OP_Re˙o
, 
pTabLi°
->
a
[0].
iCurs‹
, 0);

1182 
	`‰ìMaskSë
(&
maskSë
);

1183  
pWInfo
;

1184 
	}
}

1190 
	$sqlôeWhîeEnd
(
WhîeInfo
 *
pWInfo
){

1191 
Vdbe
 *
v
 = 
pWInfo
->
pP¨£
->
pVdbe
;

1192 
i
;

1193 
WhîeLevñ
 *
pLevñ
;

1194 
SrcLi°
 *
pTabLi°
 = 
pWInfo
->pTabList;

1196 
i
=
pTabLi°
->
nSrc
-1; i>=0; i--){

1197 
pLevñ
 = &
pWInfo
->
a
[
i
];

1198 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
pLevñ
->
c⁄t
);

1199 if–
pLevñ
->
›
!=
OP_No›
 ){

1200 
	`sqlôeVdbeAddOp
(
v
, 
pLevñ
->
›
,ÖLevñ->
p1
,ÖLevñ->
p2
);

1202 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
pLevñ
->
brk
);

1203 if–
pLevñ
->
öOp
!=
OP_No›
 ){

1204 
	`sqlôeVdbeAddOp
(
v
, 
pLevñ
->
öOp
,ÖLevñ->
öP1
,ÖLevñ->
öP2
);

1206 if–
pLevñ
->
iLe·Joö
 ){

1207 
addr
;

1208 
addr
 = 
	`sqlôeVdbeAddOp
(
v
, 
OP_MemLﬂd
, 
pLevñ
->
iLe·Joö
, 0);

1209 
	`sqlôeVdbeAddOp
(
v
, 
OP_NŸNuŒ
, 1, 
addr
+4 + (
pLevñ
->
iCur
>=0));

1210 
	`sqlôeVdbeAddOp
(
v
, 
OP_NuŒRow
, 
pTabLi°
->
a
[
i
].
iCurs‹
, 0);

1211 if–
pLevñ
->
iCur
>=0 ){

1212 
	`sqlôeVdbeAddOp
(
v
, 
OP_NuŒRow
, 
pLevñ
->
iCur
, 0);

1214 
	`sqlôeVdbeAddOp
(
v
, 
OP_GŸo
, 0, 
pLevñ
->
t›
);

1217 
	`sqlôeVdbeResﬁveLabñ
(
v
, 
pWInfo
->
iBªak
);

1218 
i
=0; i<
pTabLi°
->
nSrc
; i++){

1219 
TabÀ
 *
pTab
 = 
pTabLi°
->
a
[
i
].pTab;

1220 
	`as£π
–
pTab
!=0 );

1221 if–
pTab
->
isTønsõ¡
 ||ÖTab->
pSñe˘
 ) ;

1222 
pLevñ
 = &
pWInfo
->
a
[
i
];

1223 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
pTabLi°
->
a
[
i
].
iCurs‹
, 0);

1224 if–
pLevñ
->
pIdx
!=0 ){

1225 
	`sqlôeVdbeAddOp
(
v
, 
OP_Clo£
, 
pLevñ
->
iCur
, 0);

1229 if–
pWInfo
->
pP¨£
->
nTab
=ıWInfo->
≥akNTab
 ){

1230 
pWInfo
->
pP¨£
->
nTab
 =ÖWInfo->
ßvedNTab
;

1233 
	`sqlôeFªe
(
pWInfo
);

1235 
	}
}

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


120 #unde‡
°©ic_as£π


121 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

137 
f˙é
 (
__fd
, 
__cmd
, ...);

145 #i‚de‡
__USE_FILE_OFFSET64


146 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

148 #ifde‡
__REDIRECT


149 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

150 
	`__n⁄nuŒ
 ((1));

152 
	#›í
 
›í64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__USE_ATFILE


169 #i‚de‡
__USE_FILE_OFFSET64


170 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

171 
	`__n⁄nuŒ
 ((2));

173 #ifde‡
__REDIRECT


174 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

175 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

177 
	#›í©
 
›í©64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__REDIRECT


195 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

196 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

198 
	#¸ót
 
¸ót64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

206 && !
deföed
 
__USE_POSIX
))

215 
	#F_ULOCK
 0

	)

216 
	#F_LOCK
 1

	)

217 
	#F_TLOCK
 2

	)

218 
	#F_TEST
 3

	)

220 #i‚de‡
__USE_FILE_OFFSET64


221 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

223 #ifde‡
__REDIRECT


224 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

226 
	#lockf
 
lockf64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

234 #ifde‡
__USE_XOPEN2K


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

239 
__advi£
Ë
__THROW
;

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

243 
__off64_t
 
__Àn
, 
__advi£
),

244 
posix_Ádvi£64
);

246 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

249 #ifde‡
__USE_LARGEFILE64


250 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

251 
__advi£
Ë
__THROW
;

259 #i‚de‡
__USE_FILE_OFFSET64


260 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

264 
__off64_t
 
__Àn
),

265 
posix_ÁŒoˇã64
);

267 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

270 #ifde‡
__USE_LARGEFILE64


271 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

277 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

278 && 
deföed
 
__va_¨g_∑ck_Àn


279 
	~<bôs/f˙é2.h
>

282 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


32 
	~<bôs/huge_vÆ.h
>

33 #ifde‡
__USE_ISOC99


34 
	~<bôs/huge_vÆf.h
>

35 
	~<bôs/huge_vÆl.h
>

38 
	~<bôs/öf.h
>

41 
	~<bôs/«n.h
>

45 
	~<bôs/m©hdef.h
>

52 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

53 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

54 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

56 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

57 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

58 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

59 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

61 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

62 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

63 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

65 
	#_MdoubÀ_
 

	)

66 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

67 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

68 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

69 
	~<bôs/m©hˇŒs.h
>

70 #unde‡
_MdoubÀ_


71 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


72 #unde‡
_MdoubÀ_END_NAMESPACE


73 #unde‡
__MATH_PRECNAME


75 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


81 #i‚de‡
_MÊﬂt_


82 
	#_MÊﬂt_
 

	)

84 
	#_MdoubÀ_
 
_MÊﬂt_


	)

85 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

86 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

87 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

88 
	~<bôs/m©hˇŒs.h
>

89 #unde‡
_MdoubÀ_


90 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


91 #unde‡
_MdoubÀ_END_NAMESPACE


92 #unde‡
__MATH_PRECNAME


94 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

95 || 
deföed
 
__LDBL_COMPAT


96 #ifde‡
__LDBL_COMPAT


98 #ifde‡
__USE_ISOC99


99 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

100 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

101 #ifde‡
__REDIRECT_NTH


102 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

103 
__∆dbl_√xâow¨df
)

104 
	`__©åibuã__
 ((
__c⁄°__
));

105 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

106 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

107 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

108 (
__x
, 
__y
),

109 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

113 #unde‡
__MATHDECL_1


114 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

115 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

116 
¨gs
, 
Æüs
)

	)

117 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

118 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

124 #i‚de‡
_Ml⁄g_doubÀ_


125 
	#_Ml⁄g_doubÀ_
 

	)

127 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

128 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

129 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

130 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

131 
	#__MATH_DECLARE_LDOUBLE
 1

	)

132 
	~<bôs/m©hˇŒs.h
>

133 #unde‡
_MdoubÀ_


134 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


135 #unde‡
_MdoubÀ_END_NAMESPACE


136 #unde‡
__MATH_PRECNAME


141 #unde‡
__MATHDECL_1


142 #unde‡
__MATHDECL


143 #unde‡
__MATHCALL


146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


148 
signgam
;

153 #ifde‡
__USE_ISOC99


191 
FP_NAN
 =

192 
	#FP_NAN
 0

	)

193 
FP_NAN
,

194 
FP_INFINITE
 =

195 
	#FP_INFINITE
 1

	)

196 
FP_INFINITE
,

197 
FP_ZERO
 =

198 
	#FP_ZERO
 2

	)

199 
FP_ZERO
,

200 
FP_SUBNORMAL
 =

201 
	#FP_SUBNORMAL
 3

	)

202 
FP_SUBNORMAL
,

203 
FP_NORMAL
 =

204 
	#FP_NORMAL
 4

	)

205 
FP_NORMAL


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
	#Â˛assify
(
x
) \

211 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

213 
	#Â˛assify
(
x
) \

214 ( (
x
) ==  () \

215 ? 
	`__Â˛assifyf
 (
x
) \

216 :  (
x
) ==  () \

217 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

221 #ifde‡
__NO_LONG_DOUBLE_MATH


222 
	#signbô
(
x
) \

223 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

225 
	#signbô
(
x
) \

226 ( (
x
) ==  () \

227 ? 
	`__signbôf
 (
x
) \

228 :  (
x
) ==  () \

229 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

233 #ifde‡
__NO_LONG_DOUBLE_MATH


234 
	#isföôe
(
x
) \

235 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

237 
	#isföôe
(
x
) \

238 ( (
x
) ==  () \

239 ? 
	`__föôef
 (
x
) \

240 :  (
x
) ==  () \

241 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

245 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

249 #ifde‡
__NO_LONG_DOUBLE_MATH


250 
	#i¢™
(
x
) \

251 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

253 
	#i¢™
(
x
) \

254 ( (
x
) ==  () \

255 ? 
	`__i¢™f
 (
x
) \

256 :  (
x
) ==  () \

257 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

261 #ifde‡
__NO_LONG_DOUBLE_MATH


262 
	#isöf
(
x
) \

263 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

265 
	#isöf
(
x
) \

266 ( (
x
) ==  () \

267 ? 
	`__isöff
 (
x
) \

268 :  (
x
) ==  () \

269 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

273 
	#MATH_ERRNO
 1

	)

274 
	#MATH_ERREXCEPT
 2

	)

279 #i‚de‡
__FAST_MATH__


280 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

285 #ifde‡
__USE_GNU


287 #ifde‡
__NO_LONG_DOUBLE_MATH


288 
	#issig«lög
(
x
) \

289 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

291 
	#issig«lög
(
x
) \

292 ( (
x
) ==  () \

293 ? 
	`__issig«lögf
 (
x
) \

294 :  (
x
) ==  () \

295 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

299 #ifdef 
__USE_MISC


303 
_IEEE_
 = -1,

304 
_SVID_
,

305 
_XOPEN_
,

306 
_POSIX_
,

307 
_ISOC_


308 } 
	t_LIB_VERSION_TYPE
;

313 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

317 #ifde‡
__USE_SVID


323 #ifde‡
__˝lu•lus


324 
__ex˚±i⁄


326 
ex˚±i⁄


329 
ty≥
;

330 *
«me
;

331 
¨g1
;

332 
¨g2
;

333 
ªtvÆ
;

334 
	}
};

336 #ifde‡
__˝lu•lus


337 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

339 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

342 
	#X_TLOSS
 1.41484755040568800000e+16

	)

345 
	#DOMAIN
 1

	)

346 
	#SING
 2

	)

347 
	#OVERFLOW
 3

	)

348 
	#UNDERFLOW
 4

	)

349 
	#TLOSS
 5

	)

350 
	#PLOSS
 6

	)

353 
	#HUGE
 3.40282347e+38F

	)

357 #ifde‡
__USE_XOPEN


359 
	#MAXFLOAT
 3.40282347e+38F

	)

366 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


367 
	#M_E
 2.7182818284590452354

	)

368 
	#M_LOG2E
 1.4426950408889634074

	)

369 
	#M_LOG10E
 0.43429448190325182765

	)

370 
	#M_LN2
 0.69314718055994530942

	)

371 
	#M_LN10
 2.30258509299404568402

	)

372 
	#M_PI
 3.14159265358979323846

	)

373 
	#M_PI_2
 1.57079632679489661923

	)

374 
	#M_PI_4
 0.78539816339744830962

	)

375 
	#M_1_PI
 0.31830988618379067154

	)

376 
	#M_2_PI
 0.63661977236758134308

	)

377 
	#M_2_SQRTPI
 1.12837916709551257390

	)

378 
	#M_SQRT2
 1.41421356237309504880

	)

379 
	#M_SQRT1_2
 0.70710678118654752440

	)

385 #ifde‡
__USE_GNU


386 
	#M_El
 2.718281828459045235360287471352662498L

	)

387 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

388 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

389 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

390 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

391 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

392 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

393 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

394 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

395 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

396 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

397 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

398 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

405 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


406 
	#__NO_MATH_INLINES
 1

	)

409 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

416 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

417 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

418 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

419 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

420 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

421 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

425 #ifde‡
__USE_EXTERN_INLINES


426 
	~<bôs/m©hölöe.h
>

431 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

432 
	~<bôs/m©h-föôe.h
>

435 #ifde‡
__USE_ISOC99


439 #i‚de‡
isgª©î


440 
	#isgª©î
(
x
, 
y
) \

441 (
__exãnsi⁄__
 \

442 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

443 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

447 #i‚de‡
isgª©îequÆ


448 
	#isgª©îequÆ
(
x
, 
y
) \

449 (
__exãnsi⁄__
 \

450 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

451 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

455 #i‚de‡
i¶ess


456 
	#i¶ess
(
x
, 
y
) \

457 (
__exãnsi⁄__
 \

458 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

459 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

463 #i‚de‡
i¶es£quÆ


464 
	#i¶es£quÆ
(
x
, 
y
) \

465 (
__exãnsi⁄__
 \

466 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

467 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

471 #i‚de‡
i¶essgª©î


472 
	#i¶essgª©î
(
x
, 
y
) \

473 (
__exãnsi⁄__
 \

474 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

475 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

479 #i‚de‡
isun‹dîed


480 
	#isun‹dîed
(
u
, 
v
) \

481 (
__exãnsi⁄__
 \

482 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

483 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

488 
	g__END_DECLS


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 1

87 
	#__PTHREAD_SPINS
 0, 0

	)

88 #ñi‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 2

89 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

91 
	#__PTHREAD_SPINS
 0

	)

94 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


95 
	#PTHREAD_MUTEX_INITIALIZER
 \

96 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

97 #ifde‡
__USE_GNU


98 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

101 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

102 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

104 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

109 
	#PTHREAD_MUTEX_INITIALIZER
 \

110 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

111 #ifde‡
__USE_GNU


112 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

113 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

115 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

116 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

117 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

124 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


127 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

128 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

129 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

130 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


136 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 #i‡
__WORDSIZE
 == 64

138 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

143 
	#PTHREAD_RWLOCK_INITIALIZER
 \

144 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

145 #ifde‡
__USE_GNU


146 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

149 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

151 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


152 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

153 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

154 0, 0, 0, 0 } }

	)

156 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

157 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

158 0 } }

	)

168 
	mPTHREAD_INHERIT_SCHED
,

169 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

170 
	mPTHREAD_EXPLICIT_SCHED


171 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

178 
	mPTHREAD_SCOPE_SYSTEM
,

179 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

180 
	mPTHREAD_SCOPE_PROCESS


181 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

188 
	mPTHREAD_PROCESS_PRIVATE
,

189 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

190 
	mPTHREAD_PROCESS_SHARED


191 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

197 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

201 
	s_±hªad_˛ónup_buf„r


203 (*
	m__routöe
) (*);

204 *
	m__¨g
;

205 
	m__ˇn˚…y≥
;

206 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

212 
	mPTHREAD_CANCEL_ENABLE
,

213 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

214 
	mPTHREAD_CANCEL_DISABLE


215 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

219 
	mPTHREAD_CANCEL_DEFERRED
,

220 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

221 
	mPTHREAD_CANCEL_ASYNCHRONOUS


222 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

224 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

228 
	#PTHREAD_ONCE_INIT
 0

	)

231 #ifde‡
__USE_XOPEN2K


235 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

239 
__BEGIN_DECLS


244 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

245 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

246 *(*
__°¨t_routöe
) (*),

247 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

253 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

261 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

263 #ifde‡
__USE_GNU


266 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

274 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

275 c⁄° 
time•ec
 *
__ab°ime
);

282 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

286 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

290 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

298 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

301 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 *
__dëach°©e
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

311 
__dëach°©e
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

317 
size_t
 *
__gu¨dsize
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

322 
size_t
 
__gu¨dsize
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

328 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

333 c⁄° 
sched_∑øm
 *
__ª°ri˘


334 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

337 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


347 
__©å
, *
__ª°ri˘
 
__öhîô
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

352 
__öhîô
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 *
__ª°ri˘
 
__sc›e
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

362 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1));

366 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

374 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

375 *
__°ackaddr
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

379 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


380 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

387 
size_t
 
__°acksize
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 #ifde‡
__USE_XOPEN2K


392 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

393 **
__ª°ri˘
 
__°ackaddr
,

394 
size_t
 *
__ª°ri˘
 
__°acksize
)

395 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

400 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

401 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

404 #ifde‡
__USE_GNU


407 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

408 
size_t
 
__˝u£tsize
,

409 c⁄° 
˝u_£t_t
 *
__˝u£t
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

414 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

415 
size_t
 
__˝u£tsize
,

416 
˝u_£t_t
 *
__˝u£t
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

420 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((1));

425 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

426 
__THROW
 
	`__n⁄nuŒ
 ((1));

431 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

441 c⁄° 
sched_∑øm
 *
__∑øm
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3));

445 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

446 *
__ª°ri˘
 
__pﬁicy
,

447 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

451 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

452 
__THROW
;

455 #ifde‡
__USE_GNU


457 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

458 
size_t
 
__buÊí
)

459 
__THROW
 
	`__n⁄nuŒ
 ((2));

462 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

463 
__THROW
 
	`__n⁄nuŒ
 ((2));

467 #ifde‡
__USE_UNIX98


469 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

472 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

475 #ifde‡
__USE_GNU


480 
	$±hªad_yõld
 (Ë
__THROW
;

485 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

486 c⁄° 
˝u_£t_t
 *
__˝u£t
)

487 
__THROW
 
	`__n⁄nuŒ
 ((3));

490 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

491 
˝u_£t_t
 *
__˝u£t
)

492 
__THROW
 
	`__n⁄nuŒ
 ((3));

505 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

506 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

517 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

521 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

524 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

529 
	`±hªad_ã°ˇn˚l
 ();

538 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

539 
__mask_was_ßved
;

540 } 
__ˇn˚l_jmp_buf
[1];

541 *
__∑d
[4];

542 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

545 #i‚de‡
__˛ónup_f˘_©åibuã


546 
	#__˛ónup_f˘_©åibuã


	)

551 
	s__±hªad_˛ónup_‰ame


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

559 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


560 #ifde‡
__˝lu•lus


562 ˛as†
	c__±hªad_˛ónup_˛ass


564 (*
__ˇn˚l_routöe
) (*);

565 *
__ˇn˚l_¨g
;

566 
__do_ô
;

567 
__ˇn˚l_ty≥
;

569 
public
:

570 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

571 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

572 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

573 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

574 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

575 &
__ˇn˚l_ty≥
); 
	}
}

576 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

586 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

588 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

592 
	#±hªad_˛ónup_p›
(
execuã
) \

593 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

594 } 0)

	)

596 #ifde‡
__USE_GNU


600 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

602 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

603 
__˛‰ame
.
	`__de„r
 ()

	)

608 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

609 
__˛‰ame
.
	`__ª°‹e
 (); \

610 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

611 } 0)

	)

618 
__exã∫_ölöe
 

619 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

621 i‡(
__‰ame
->
__do_ô
)

622 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

623 
	}
}

632 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

634 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

635 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

636 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

637 .
__do_ô
 = 1 };

	)

641 
	#±hªad_˛ónup_p›
(
execuã
) \

642 
__˛‰ame
.
__do_ô
 = (
execuã
); \

643 } 0)

	)

645 #ifde‡
__USE_GNU


649 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

651 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

652 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

653 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

654 .
__do_ô
 = 1 }; \

655 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

656 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

661 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

662 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

663 
__˛‰ame
.
__do_ô
 = (
execuã
); \

664 } 0)

	)

675 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

696 
	#±hªad_˛ónup_p›
(
execuã
) \

699 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

700 i‡(
execuã
) \

701 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

702 } 0)

	)

703 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

704 
__˛ónup_f˘_©åibuã
;

706 #ifde‡
__USE_GNU


710 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

712 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

713 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

714 *
__ˇn˚l_¨g
 = (
¨g
); \

715 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

716 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

717 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

719 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

720 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

724 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

725 dÿ{

	)

726 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

727 
__˛ónup_f˘_©åibuã
;

732 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

735 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

736 i‡(
execuã
) \

737 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

738 
	}
} 0)

	)

739 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

740 
__˛ónup_f˘_©åibuã
;

744 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

745 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

746 #i‚de‡
SHARED


747 
	`__©åibuã__
 ((
__wók__
))

753 
__jmp_buf_èg
;

754 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

760 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

761 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

762 
__THROW
 
	`__n⁄nuŒ
 ((1));

765 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

766 
__THROW
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

773 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

776 #ifde‡
__USE_XOPEN2K


778 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

779 c⁄° 
time•ec
 *
__ª°ri˘


780 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

784 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

790 
__ª°ri˘
 
__muãx
,

791 *
__ª°ri˘
 
__¥io˚ûög
)

792 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

797 
__¥io˚ûög
,

798 *
__ª°ri˘
 
__ﬁd_˚ûög
)

799 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

802 #ifde‡
__USE_XOPEN2K8


804 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 #ifde‡
__USE_GNU


807 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

817 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__psh¨ed
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__psh¨ed
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

835 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


837 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


838 
__©å
, *
__ª°ri˘
 
__köd
)

839 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

844 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

845 
__THROW
 
	`__n⁄nuŒ
 ((1));

849 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

850 
__ª°ri˘
 
__©å
,

851 *
__ª°ri˘
 
__¥Ÿocﬁ
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥Ÿocﬁ
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

862 
__ª°ri˘
 
__©å
,

863 *
__ª°ri˘
 
__¥io˚ûög
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

867 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__¥io˚ûög
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

871 #ifde‡
__USE_XOPEN2K


873 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

874 *
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

878 *
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

883 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

884 
__robu°√ss
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #ifde‡
__USE_GNU


887 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

888 
__robu°√ss
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

894 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


899 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

900 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


901 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

904 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1));

908 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

909 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

912 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

915 #ifde‡
__USE_XOPEN2K


917 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 c⁄° 
time•ec
 *
__ª°ri˘


919 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

923 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

924 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

927 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

930 #ifde‡
__USE_XOPEN2K


932 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

933 c⁄° 
time•ec
 *
__ª°ri˘


934 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

938 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

939 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

945 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__psh¨ed
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__psh¨ed
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

965 
__ª°ri˘
 
__©å
,

966 *
__ª°ri˘
 
__¥ef
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

970 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

971 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

979 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

980 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

981 
__THROW
 
	`__n⁄nuŒ
 ((1));

984 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

989 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

993 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

1002 
	`__n⁄nuŒ
 ((1, 2));

1011 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1012 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 3));

1019 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1024 
__THROW
 
	`__n⁄nuŒ
 ((1));

1027 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 *
__ª°ri˘
 
__psh¨ed
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 #ifde‡
__USE_XOPEN2K


1038 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1039 
__ª°ri˘
 
__©å
,

1040 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1044 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1045 
__˛ockid_t
 
__˛ock_id
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 #ifde‡
__USE_XOPEN2K


1055 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1056 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1064 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1068 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1072 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1080 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1081 
__©å
, 
__cou¡
)

1082 
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1086 
__THROW
 
	`__n⁄nuŒ
 ((1));

1089 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1090 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1094 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1));

1098 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1103 
__ª°ri˘
 
__©å
,

1104 *
__ª°ri˘
 
__psh¨ed
)

1105 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1108 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1109 
__psh¨ed
)

1110 
__THROW
 
	`__n⁄nuŒ
 ((1));

1122 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1123 (*
__de°r_fun˘i⁄
) (*))

1124 
__THROW
 
	`__n⁄nuŒ
 ((1));

1127 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1130 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1133 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1134 c⁄° *
__poöãr
Ë
__THROW
 ;

1137 #ifde‡
__USE_XOPEN2K


1139 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1140 
__˛ockid_t
 *
__˛ock_id
)

1141 
__THROW
 
	`__n⁄nuŒ
 ((2));

1156 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1157 (*
__∑ª¡
) (),

1158 (*
__chûd
Ë()Ë
__THROW
;

1161 #ifde‡
__USE_EXTERN_INLINES


1163 
__exã∫_ölöe
 

1164 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1166  
__thªad1
 =
__thªad2
;

1167 
	}
}

1170 
	g__END_DECLS


	@/usr/include/pwd.h

22 #i‚def 
_PWD_H


23 
	#_PWD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

34 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 #i‚de‡
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

42 #i‚de‡
__uid_t_deföed


43 
__uid_t
 
	tuid_t
;

44 
	#__uid_t_deföed


	)

49 
	s∑sswd


51 *
	mpw_«me
;

52 *
	mpw_∑sswd
;

53 
__uid_t
 
	mpw_uid
;

54 
__gid_t
 
	mpw_gid
;

55 *
	mpw_gecos
;

56 *
	mpw_dú
;

57 *
	mpw_shñl
;

61 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


62 
	#__√ed_FILE


	)

63 
	~<°dio.h
>

67 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


72 
£çwít
 ();

78 
ídpwít
 ();

84 
∑sswd
 *
gëpwít
 ();

87 #ifdef 
__USE_SVID


94 
∑sswd
 *
fgëpwít
 (
FILE
 *
__°ªam
);

102 
puçwít
 (c⁄° 
∑sswd
 *
__ª°ri˘
 
__p
,

103 
FILE
 *
__ª°ri˘
 
__f
);

110 
∑sswd
 *
gëpwuid
 (
__uid_t
 
__uid
);

116 
∑sswd
 *
gëpw«m
 (c⁄° *
__«me
);

118 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


120 #ifde‡
__USE_MISC


123 
	#NSS_BUFLEN_PASSWD
 1024

	)

134 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


139 
gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

140 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

141 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

144 
gëpwuid_r
 (
__uid_t
 
__uid
,

145 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

146 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

147 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

149 
gëpw«m_r
 (c⁄° *
__ª°ri˘
 
__«me
,

150 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

151 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

152 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

155 #ifdef 
__USE_SVID


163 
fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

164 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

165 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

166 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

171 #ifde‡
__USE_GNU


180 
gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

183 
	g__END_DECLS


	@/usr/include/readline/history.h

22 #i‚de‡
_HISTORY_H_


23 
	#_HISTORY_H_


	)

25 #ifde‡
__˝lu•lus


29 
	~<time.h
>

31 #i‡
deföed
 
READLINE_LIBRARY


32 
	~"æ°dc.h
"

33 
	~"æty≥defs.h
"

35 
	~<°dio.h
>

36 
	~<ªadlöe/æ°dc.h
>

37 
	~<ªadlöe/æty≥defs.h
>

40 #ifde‡
__STDC__


41 *
	thi°d©a_t
;

43 *
	thi°d©a_t
;

47 
	s_hi°_íåy
 {

48 *
löe
;

49 *
time°amp
;

50 
hi°d©a_t
 
d©a
;

51 } 
	tHIST_ENTRY
;

54 
	#HISTENT_BYTES
(
hs
Ë(
	`°æí
 ((hs)->
löe
Ë+ såÀ¿((hs)->
time°amp
))

	)

57 
	s_hi°_°©e
 {

58 
HIST_ENTRY
 **
íåõs
;

59 
off£t
;

60 
Àngth
;

61 
size
;

62 
Êags
;

63 } 
	tHISTORY_STATE
;

66 
	#HS_STIFLED
 0x01

	)

72 
usög_hi°‹y
 
PARAMS
(());

75 
HISTORY_STATE
 *
hi°‹y_gë_hi°‹y_°©e
 
PARAMS
(());

78 
hi°‹y_£t_hi°‹y_°©e
 
PARAMS
((
HISTORY_STATE
 *));

84 
add_hi°‹y
 
PARAMS
((const *));

88 
add_hi°‹y_time
 
PARAMS
((const *));

93 
HIST_ENTRY
 *
ªmove_hi°‹y
 
PARAMS
(());

97 
hi°d©a_t
 
‰ì_hi°‹y_íåy
 
PARAMS
((
HIST_ENTRY
 *));

102 
HIST_ENTRY
 *
ª∂a˚_hi°‹y_íåy
 
PARAMS
((, c⁄° *, 
hi°d©a_t
));

105 
˛ór_hi°‹y
 
PARAMS
(());

108 
°iÊe_hi°‹y
 
PARAMS
(());

113 
un°iÊe_hi°‹y
 
PARAMS
(());

116 
hi°‹y_is_°iÊed
 
PARAMS
(());

123 
HIST_ENTRY
 **
hi°‹y_li°
 
PARAMS
(());

127 
whîe_hi°‹y
 
PARAMS
(());

131 
HIST_ENTRY
 *
cuºít_hi°‹y
 
PARAMS
(());

135 
HIST_ENTRY
 *
hi°‹y_gë
 
PARAMS
(());

139 
time_t
 
hi°‹y_gë_time
 
PARAMS
((
HIST_ENTRY
 *));

143 
hi°‹y_tŸÆ_byãs
 
PARAMS
(());

148 
hi°‹y_£t_pos
 
PARAMS
(());

153 
HIST_ENTRY
 *
¥evious_hi°‹y
 
PARAMS
(());

158 
HIST_ENTRY
 *
√xt_hi°‹y
 
PARAMS
(());

168 
hi°‹y_£¨ch
 
PARAMS
((const *, ));

173 
hi°‹y_£¨ch_¥efix
 
PARAMS
((const *, ));

180 
hi°‹y_£¨ch_pos
 
PARAMS
((const *, , ));

187 
ªad_hi°‹y
 
PARAMS
((const *));

194 
ªad_hi°‹y_ønge
 
PARAMS
((const *, , ));

199 
wrôe_hi°‹y
 
PARAMS
((const *));

203 
≠≥nd_hi°‹y
 
PARAMS
((, const *));

206 
hi°‹y_åunˇã_fûe
 
PARAMS
((const *, ));

222 
hi°‹y_ex∑nd
 
PARAMS
((*, **));

227 *
hi°‹y_¨g_exåa˘
 
PARAMS
((, , const *));

235 *
gë_hi°‹y_evít
 
PARAMS
((const *, *, ));

239 **
hi°‹y_tokíize
 
PARAMS
((const *));

242 
hi°‹y_ba£
;

243 
hi°‹y_Àngth
;

244 
hi°‹y_max_íåõs
;

245 
hi°‹y_ex∑nsi⁄_ch¨
;

246 
hi°‹y_sub°_ch¨
;

247 *
hi°‹y_w‹d_dñimôîs
;

248 
hi°‹y_commít_ch¨
;

249 *
hi°‹y_no_ex∑nd_ch¨s
;

250 *
hi°‹y_£¨ch_dñimôî_ch¨s
;

251 
hi°‹y_quŸes_öhibô_ex∑nsi⁄
;

253 
hi°‹y_wrôe_time°amps
;

256 
max_öput_hi°‹y
;

261 
æ_löebuf_func_t
 *
hi°‹y_öhibô_ex∑nsi⁄_fun˘i⁄
;

263 #ifde‡
__˝lu•lus


	@/usr/include/readline/readline.h

22 #i‡!
deföed
 (
_READLINE_H_
)

23 
	#_READLINE_H_


	)

25 #ifde‡
__˝lu•lus


29 #i‡
deföed
 (
READLINE_LIBRARY
)

30 
	~"æ°dc.h
"

31 
	~"æty≥defs.h
"

32 
	~"keym≠s.h
"

33 
	~"tûde.h
"

35 
	~<°dio.h
>

36 
	~<ªadlöe/æ°dc.h
>

37 
	~<ªadlöe/æty≥defs.h
>

38 
	~<ªadlöe/keym≠s.h
>

39 
	~<ªadlöe/tûde.h
>

43 
	#RL_READLINE_VERSION
 0x0603

	)

44 
	#RL_VERSION_MAJOR
 6

	)

45 
	#RL_VERSION_MINOR
 3

	)

55 
	eundo_code
 { 
UNDO_DELETE
, 
UNDO_INSERT
, 
UNDO_BEGIN
, 
UNDO_END
 };

58 
	sundo_li°
 {

59 
undo_li°
 *
√xt
;

60 
°¨t
, 
íd
;

61 *
ãxt
;

62 
undo_code
 
wh©
;

63 } 
	tUNDO_LIST
;

66 
UNDO_LIST
 *
æ_undo_li°
;

69 
	s_funm≠
 {

70 c⁄° *
	g«me
;

71 
æ_comm™d_func_t
 *
	gfun˘i⁄
;

72 } 
	tFUNMAP
;

74 
FUNMAP
 **
funm≠
;

83 
æ_digô_¨gumít
 
PARAMS
((, ));

84 
æ_univîßl_¨gumít
 
PARAMS
((, ));

87 
æ_f‹w¨d_byã
 
PARAMS
((, ));

88 
æ_f‹w¨d_ch¨
 
PARAMS
((, ));

89 
æ_f‹w¨d
 
PARAMS
((, ));

90 
æ_backw¨d_byã
 
PARAMS
((, ));

91 
æ_backw¨d_ch¨
 
PARAMS
((, ));

92 
æ_backw¨d
 
PARAMS
((, ));

93 
æ_beg_of_löe
 
PARAMS
((, ));

94 
æ_íd_of_löe
 
PARAMS
((, ));

95 
æ_f‹w¨d_w‹d
 
PARAMS
((, ));

96 
æ_backw¨d_w‹d
 
PARAMS
((, ));

97 
æ_ª‰esh_löe
 
PARAMS
((, ));

98 
æ_˛ór_s¸ìn
 
PARAMS
((, ));

99 
æ_skù_csi_£quí˚
 
PARAMS
((, ));

100 
æ_¨row_keys
 
PARAMS
((, ));

103 
æ_ö£π
 
PARAMS
((, ));

104 
æ_quŸed_ö£π
 
PARAMS
((, ));

105 
æ_èb_ö£π
 
PARAMS
((, ));

106 
æ_√wlöe
 
PARAMS
((, ));

107 
æ_do_lowîˇ£_vîsi⁄
 
PARAMS
((, ));

108 
æ_rubout
 
PARAMS
((, ));

109 
æ_dñëe
 
PARAMS
((, ));

110 
æ_rubout_‹_dñëe
 
PARAMS
((, ));

111 
æ_dñëe_h‹iz⁄èl_•a˚
 
PARAMS
((, ));

112 
æ_dñëe_‹_show_com∂ëi⁄s
 
PARAMS
((, ));

113 
æ_ö£π_commít
 
PARAMS
((, ));

116 
æ_upˇ£_w‹d
 
PARAMS
((, ));

117 
æ_downˇ£_w‹d
 
PARAMS
((, ));

118 
æ_ˇpôÆize_w‹d
 
PARAMS
((, ));

121 
æ_å™•o£_w‹ds
 
PARAMS
((, ));

122 
æ_å™•o£_ch¨s
 
PARAMS
((, ));

125 
æ_ch¨_£¨ch
 
PARAMS
((, ));

126 
æ_backw¨d_ch¨_£¨ch
 
PARAMS
((, ));

129 
æ_begönög_of_hi°‹y
 
PARAMS
((, ));

130 
æ_íd_of_hi°‹y
 
PARAMS
((, ));

131 
æ_gë_√xt_hi°‹y
 
PARAMS
((, ));

132 
æ_gë_¥evious_hi°‹y
 
PARAMS
((, ));

135 
æ_£t_m¨k
 
PARAMS
((, ));

136 
æ_exch™ge_poöt_™d_m¨k
 
PARAMS
((, ));

139 
æ_vi_edôög_mode
 
PARAMS
((, ));

140 
æ_emacs_edôög_mode
 
PARAMS
((, ));

143 
æ_ovîwrôe_mode
 
PARAMS
((, ));

146 
æ_ª_ªad_öô_fûe
 
PARAMS
((, ));

147 
æ_dump_fun˘i⁄s
 
PARAMS
((, ));

148 
æ_dump_ma¸os
 
PARAMS
((, ));

149 
æ_dump_v¨übÀs
 
PARAMS
((, ));

152 
æ_com∂ëe
 
PARAMS
((, ));

153 
æ_possibÀ_com∂ëi⁄s
 
PARAMS
((, ));

154 
æ_ö£π_com∂ëi⁄s
 
PARAMS
((, ));

155 
æ_ﬁd_míu_com∂ëe
 
PARAMS
((, ));

156 
æ_míu_com∂ëe
 
PARAMS
((, ));

157 
æ_backw¨d_míu_com∂ëe
 
PARAMS
((, ));

160 
æ_kûl_w‹d
 
PARAMS
((, ));

161 
æ_backw¨d_kûl_w‹d
 
PARAMS
((, ));

162 
æ_kûl_löe
 
PARAMS
((, ));

163 
æ_backw¨d_kûl_löe
 
PARAMS
((, ));

164 
æ_kûl_fuŒ_löe
 
PARAMS
((, ));

165 
æ_unix_w‹d_rubout
 
PARAMS
((, ));

166 
æ_unix_fûíame_rubout
 
PARAMS
((, ));

167 
æ_unix_löe_disˇrd
 
PARAMS
((, ));

168 
æ_c›y_ªgi⁄_to_kûl
 
PARAMS
((, ));

169 
æ_kûl_ªgi⁄
 
PARAMS
((, ));

170 
æ_c›y_f‹w¨d_w‹d
 
PARAMS
((, ));

171 
æ_c›y_backw¨d_w‹d
 
PARAMS
((, ));

172 
æ_y™k
 
PARAMS
((, ));

173 
æ_y™k_p›
 
PARAMS
((, ));

174 
æ_y™k_¡h_¨g
 
PARAMS
((, ));

175 
æ_y™k_œ°_¨g
 
PARAMS
((, ));

177 #ifde‡
__CYGWIN__


178 
æ_∑°e_‰om_˛ùbﬂrd
 
PARAMS
((, ));

182 
æ_ªvî£_£¨ch_hi°‹y
 
PARAMS
((, ));

183 
æ_f‹w¨d_£¨ch_hi°‹y
 
PARAMS
((, ));

186 
æ_°¨t_kbd_ma¸o
 
PARAMS
((, ));

187 
æ_íd_kbd_ma¸o
 
PARAMS
((, ));

188 
æ_ˇŒ_œ°_kbd_ma¸o
 
PARAMS
((, ));

189 
æ_¥öt_œ°_kbd_ma¸o
 
PARAMS
((, ));

192 
æ_ªvît_löe
 
PARAMS
((, ));

193 
æ_undo_comm™d
 
PARAMS
((, ));

196 
æ_tûde_ex∑nd
 
PARAMS
((, ));

199 
æ_ª°¨t_ouçut
 
PARAMS
((, ));

200 
æ_°›_ouçut
 
PARAMS
((, ));

203 
æ_ab‹t
 
PARAMS
((, ));

204 
æ_ây_°©us
 
PARAMS
((, ));

207 
æ_hi°‹y_£¨ch_f‹w¨d
 
PARAMS
((, ));

208 
æ_hi°‹y_£¨ch_backw¨d
 
PARAMS
((, ));

209 
æ_hi°‹y_sub°r_£¨ch_f‹w¨d
 
PARAMS
((, ));

210 
æ_hi°‹y_sub°r_£¨ch_backw¨d
 
PARAMS
((, ));

211 
æ_n⁄öc_f‹w¨d_£¨ch
 
PARAMS
((, ));

212 
æ_n⁄öc_ªvî£_£¨ch
 
PARAMS
((, ));

213 
æ_n⁄öc_f‹w¨d_£¨ch_agaö
 
PARAMS
((, ));

214 
æ_n⁄öc_ªvî£_£¨ch_agaö
 
PARAMS
((, ));

217 
æ_ö£π_˛o£
 
PARAMS
((, ));

220 
æ_ˇŒback_h™dÀr_ö°Æl
 
PARAMS
((c⁄° *, 
æ_v˝func_t
 *));

221 
æ_ˇŒback_ªad_ch¨
 
PARAMS
(());

222 
æ_ˇŒback_h™dÀr_ªmove
 
PARAMS
(());

226 
æ_vi_ªdo
 
PARAMS
((, ));

227 
æ_vi_undo
 
PARAMS
((, ));

228 
æ_vi_y™k_¨g
 
PARAMS
((, ));

229 
æ_vi_„tch_hi°‹y
 
PARAMS
((, ));

230 
æ_vi_£¨ch_agaö
 
PARAMS
((, ));

231 
æ_vi_£¨ch
 
PARAMS
((, ));

232 
æ_vi_com∂ëe
 
PARAMS
((, ));

233 
æ_vi_tûde_ex∑nd
 
PARAMS
((, ));

234 
æ_vi_¥ev_w‹d
 
PARAMS
((, ));

235 
æ_vi_√xt_w‹d
 
PARAMS
((, ));

236 
æ_vi_íd_w‹d
 
PARAMS
((, ));

237 
æ_vi_ö£π_beg
 
PARAMS
((, ));

238 
æ_vi_≠≥nd_mode
 
PARAMS
((, ));

239 
æ_vi_≠≥nd_eﬁ
 
PARAMS
((, ));

240 
æ_vi_eof_maybe
 
PARAMS
((, ));

241 
æ_vi_ö£πi⁄_mode
 
PARAMS
((, ));

242 
æ_vi_ö£π_mode
 
PARAMS
((, ));

243 
æ_vi_movemít_mode
 
PARAMS
((, ));

244 
æ_vi_¨g_digô
 
PARAMS
((, ));

245 
æ_vi_ch™ge_ˇ£
 
PARAMS
((, ));

246 
æ_vi_put
 
PARAMS
((, ));

247 
æ_vi_cﬁumn
 
PARAMS
((, ));

248 
æ_vi_dñëe_to
 
PARAMS
((, ));

249 
æ_vi_ch™ge_to
 
PARAMS
((, ));

250 
æ_vi_y™k_to
 
PARAMS
((, ));

251 
æ_vi_rubout
 
PARAMS
((, ));

252 
æ_vi_dñëe
 
PARAMS
((, ));

253 
æ_vi_back_to_ödít
 
PARAMS
((, ));

254 
æ_vi_fú°_¥öt
 
PARAMS
((, ));

255 
æ_vi_ch¨_£¨ch
 
PARAMS
((, ));

256 
æ_vi_m©ch
 
PARAMS
((, ));

257 
æ_vi_ch™ge_ch¨
 
PARAMS
((, ));

258 
æ_vi_sub°
 
PARAMS
((, ));

259 
æ_vi_ovî°rike
 
PARAMS
((, ));

260 
æ_vi_ovî°rike_dñëe
 
PARAMS
((, ));

261 
æ_vi_ª∂a˚
 
PARAMS
((, ));

262 
æ_vi_£t_m¨k
 
PARAMS
((, ));

263 
æ_vi_gŸo_m¨k
 
PARAMS
((, ));

266 
æ_vi_check
 
PARAMS
(());

267 
æ_vi_domove
 
PARAMS
((, *));

268 
æ_vi_bøckty≥
 
PARAMS
(());

270 
æ_vi_°¨t_ö£πög
 
PARAMS
((, , ));

273 
æ_vi_fW‹d
 
PARAMS
((, ));

274 
æ_vi_bW‹d
 
PARAMS
((, ));

275 
æ_vi_eW‹d
 
PARAMS
((, ));

276 
æ_vi_fw‹d
 
PARAMS
((, ));

277 
æ_vi_bw‹d
 
PARAMS
((, ));

278 
æ_vi_ew‹d
 
PARAMS
((, ));

288 *
ªadlöe
 
PARAMS
((const *));

290 
æ_£t_¥om±
 
PARAMS
((const *));

291 
æ_ex∑nd_¥om±
 
PARAMS
((*));

293 
æ_öôülize
 
PARAMS
(());

296 
æ_disˇrd_¨gumít
 
PARAMS
(());

299 
æ_add_defun
 
PARAMS
((c⁄° *, 
æ_comm™d_func_t
 *, ));

300 
æ_böd_key
 
PARAMS
((, 
æ_comm™d_func_t
 *));

301 
æ_böd_key_ö_m≠
 
PARAMS
((, 
æ_comm™d_func_t
 *, 
Keym≠
));

302 
æ_unböd_key
 
PARAMS
(());

303 
æ_unböd_key_ö_m≠
 
PARAMS
((, 
Keym≠
));

304 
æ_böd_key_if_unbound
 
PARAMS
((, 
æ_comm™d_func_t
 *));

305 
æ_böd_key_if_unbound_ö_m≠
 
PARAMS
((, 
æ_comm™d_func_t
 *, 
Keym≠
));

306 
æ_unböd_fun˘i⁄_ö_m≠
 
PARAMS
((
æ_comm™d_func_t
 *, 
Keym≠
));

307 
æ_unböd_comm™d_ö_m≠
 
PARAMS
((c⁄° *, 
Keym≠
));

308 
æ_böd_key£q
 
PARAMS
((c⁄° *, 
æ_comm™d_func_t
 *));

309 
æ_böd_key£q_ö_m≠
 
PARAMS
((c⁄° *, 
æ_comm™d_func_t
 *, 
Keym≠
));

310 
æ_böd_key£q_if_unbound
 
PARAMS
((c⁄° *, 
æ_comm™d_func_t
 *));

311 
æ_böd_key£q_if_unbound_ö_m≠
 
PARAMS
((c⁄° *, 
æ_comm™d_func_t
 *, 
Keym≠
));

312 
æ_gíîic_böd
 
PARAMS
((, c⁄° *, *, 
Keym≠
));

314 *
æ_v¨übÀ_vÆue
 
PARAMS
((const *));

315 
æ_v¨übÀ_böd
 
PARAMS
((const *, const *));

318 
æ_£t_key
 
PARAMS
((c⁄° *, 
æ_comm™d_func_t
 *, 
Keym≠
));

321 
æ_ma¸o_böd
 
PARAMS
((c⁄° *, c⁄° *, 
Keym≠
));

324 
æ_å™¶©e_key£q
 
PARAMS
((const *, *, *));

325 *
æ_u¡øn¶©e_key£q
 
PARAMS
(());

327 
æ_comm™d_func_t
 *
æ_«med_fun˘i⁄
 
PARAMS
((const *));

328 
æ_comm™d_func_t
 *
æ_fun˘i⁄_of_key£q
 
PARAMS
((c⁄° *, 
Keym≠
, *));

330 
æ_li°_funm≠_«mes
 
PARAMS
(());

331 **
æ_övokög_key£qs_ö_m≠
 
PARAMS
((
æ_comm™d_func_t
 *, 
Keym≠
));

332 **
æ_övokög_key£qs
 
PARAMS
((
æ_comm™d_func_t
 *));

334 
æ_fun˘i⁄_dum≥r
 
PARAMS
(());

335 
æ_ma¸o_dum≥r
 
PARAMS
(());

336 
æ_v¨übÀ_dum≥r
 
PARAMS
(());

338 
æ_ªad_öô_fûe
 
PARAMS
((const *));

339 
æ_∑r£_™d_böd
 
PARAMS
((*));

342 
Keym≠
 
æ_make_b¨e_keym≠
 
PARAMS
(());

343 
Keym≠
 
æ_c›y_keym≠
 
PARAMS
((Keymap));

344 
Keym≠
 
æ_make_keym≠
 
PARAMS
(());

345 
æ_disˇrd_keym≠
 
PARAMS
((
Keym≠
));

346 
æ_‰ì_keym≠
 
PARAMS
((
Keym≠
));

348 
Keym≠
 
æ_gë_keym≠_by_«me
 
PARAMS
((const *));

349 *
æ_gë_keym≠_«me
 
PARAMS
((
Keym≠
));

350 
æ_£t_keym≠
 
PARAMS
((
Keym≠
));

351 
Keym≠
 
æ_gë_keym≠
 
PARAMS
(());

353 
æ_£t_keym≠_‰om_edô_mode
 
PARAMS
(());

354 *
æ_gë_keym≠_«me_‰om_edô_mode
 
PARAMS
(());

357 
æ_add_funm≠_íåy
 
PARAMS
((c⁄° *, 
æ_comm™d_func_t
 *));

358 c⁄° **
æ_funm≠_«mes
 
PARAMS
(());

361 
æ_öôülize_funm≠
 
PARAMS
(());

364 
æ_push_ma¸o_öput
 
PARAMS
((*));

367 
æ_add_undo
 
PARAMS
((
undo_code
, , , *));

368 
æ_‰ì_undo_li°
 
PARAMS
(());

369 
æ_do_undo
 
PARAMS
(());

370 
æ_begö_undo_group
 
PARAMS
(());

371 
æ_íd_undo_group
 
PARAMS
(());

372 
æ_modifyög
 
PARAMS
((, ));

375 
æ_ªdi•œy
 
PARAMS
(());

376 
æ_⁄_√w_löe
 
PARAMS
(());

377 
æ_⁄_√w_löe_wôh_¥om±
 
PARAMS
(());

378 
æ_f‹˚d_upd©e_di•œy
 
PARAMS
(());

379 
æ_˛ór_mesßge
 
PARAMS
(());

380 
æ_ª£t_löe_°©e
 
PARAMS
(());

381 
æ_¸lf
 
PARAMS
(());

383 #i‡
deföed
 (
USE_VARARGS
Ë&& deföed (
PREFER_STDARG
)

384 
æ_mesßge
 (c⁄° *, ...Ë
__æ_©åibuã__
((
__f‹m©__
 (
¥ötf
, 1, 2)));

386 
æ_mesßge
 ();

389 
æ_show_ch¨
 
PARAMS
(());

392 
æ_ch¨a˘î_Àn
 
PARAMS
((, ));

395 
æ_ßve_¥om±
 
PARAMS
(());

396 
æ_ª°‹e_¥om±
 
PARAMS
(());

399 
æ_ª∂a˚_löe
 
PARAMS
((const *, ));

400 
æ_ö£π_ãxt
 
PARAMS
((const *));

401 
æ_dñëe_ãxt
 
PARAMS
((, ));

402 
æ_kûl_ãxt
 
PARAMS
((, ));

403 *
æ_c›y_ãxt
 
PARAMS
((, ));

406 
æ_¥ï_ãrmöÆ
 
PARAMS
(());

407 
æ_dïªp_ãrmöÆ
 
PARAMS
(());

408 
æ_ây_£t_deÁu…_bödögs
 
PARAMS
((
Keym≠
));

409 
æ_ây_un£t_deÁu…_bödögs
 
PARAMS
((
Keym≠
));

411 
æ_ª£t_ãrmöÆ
 
PARAMS
((const *));

412 
æ_ªsize_ãrmöÆ
 
PARAMS
(());

413 
æ_£t_s¸ìn_size
 
PARAMS
((, ));

414 
æ_gë_s¸ìn_size
 
PARAMS
((*, *));

415 
æ_ª£t_s¸ìn_size
 
PARAMS
(());

417 *
æ_gë_ãrmˇp
 
PARAMS
((const *));

420 
æ_°uff_ch¨
 
PARAMS
(());

421 
æ_execuã_√xt
 
PARAMS
(());

422 
æ_˛ór_≥ndög_öput
 
PARAMS
(());

423 
æ_ªad_key
 
PARAMS
(());

424 
æ_gëc
 
PARAMS
((
FILE
 *));

425 
æ_£t_keybﬂrd_öput_timeout
 
PARAMS
(());

428 
æ_exãnd_löe_buf„r
 
PARAMS
(());

429 
æ_dög
 
PARAMS
(());

430 
æ_Æphabëic
 
PARAMS
(());

431 
æ_‰ì
 
PARAMS
((*));

434 
æ_£t_sig«ls
 
PARAMS
(());

435 
æ_˛ór_sig«ls
 
PARAMS
(());

436 
æ_˛ónup_a·î_sig«l
 
PARAMS
(());

437 
æ_ª£t_a·î_sig«l
 
PARAMS
(());

438 
æ_‰ì_löe_°©e
 
PARAMS
(());

440 
æ_echo_sig«l_ch¨
 
PARAMS
(());

442 
æ_£t_∑ªn_blök_timeout
 
PARAMS
(());

446 
æ_˛ór_hi°‹y
 
PARAMS
(());

449 
æ_maybe_ßve_löe
 
PARAMS
(());

450 
æ_maybe_unßve_löe
 
PARAMS
(());

451 
æ_maybe_ª∂a˚_löe
 
PARAMS
(());

454 
æ_com∂ëe_öã∫Æ
 
PARAMS
(());

455 
æ_di•œy_m©ch_li°
 
PARAMS
((**, , ));

457 **
æ_com∂ëi⁄_m©ches
 
PARAMS
((c⁄° *, 
æ_com≥¡ry_func_t
 *));

458 *
æ_u£∫ame_com∂ëi⁄_fun˘i⁄
 
PARAMS
((const *, ));

459 *
æ_fûíame_com∂ëi⁄_fun˘i⁄
 
PARAMS
((const *, ));

461 
æ_com∂ëi⁄_mode
 
PARAMS
((
æ_comm™d_func_t
 *));

465 
‰ì_undo_li°
 
PARAMS
(());

466 
maybe_ßve_löe
 
PARAMS
(());

467 
maybe_unßve_löe
 
PARAMS
(());

468 
maybe_ª∂a˚_löe
 
PARAMS
(());

470 
dög
 
PARAMS
(());

471 
Æphabëic
 
PARAMS
(());

472 
¸lf
 
PARAMS
(());

474 **
com∂ëi⁄_m©ches
 
PARAMS
((*, 
æ_com≥¡ry_func_t
 *));

475 *
u£∫ame_com∂ëi⁄_fun˘i⁄
 
PARAMS
((const *, ));

476 *
fûíame_com∂ëi⁄_fun˘i⁄
 
PARAMS
((const *, ));

486 c⁄° *
æ_libøry_vîsi⁄
;

487 
æ_ªadlöe_vîsi⁄
;

490 
æ_gnu_ªadlöe_p
;

493 
æ_ªadlöe_°©e
;

497 
æ_edôög_mode
;

501 
æ_ö£π_mode
;

505 c⁄° *
æ_ªadlöe_«me
;

509 *
æ_¥om±
;

513 *
æ_di•œy_¥om±
;

516 *
æ_löe_buf„r
;

519 
æ_poöt
;

520 
æ_íd
;

523 
æ_m¨k
;

527 
æ_d⁄e
;

530 
æ_≥ndög_öput
;

535 
æ_di•©chög
;

539 
æ_ex∂icô_¨g
;

542 
æ_numîic_¨g
;

545 
æ_comm™d_func_t
 *
æ_œ°_func
;

548 c⁄° *
æ_ãrmöÆ_«me
;

551 
FILE
 *
æ_ö°ªam
;

552 
FILE
 *
æ_out°ªam
;

557 
æ_¥e„r_ív_wösize
;

561 
æ_hook_func_t
 *
æ_°¨tup_hook
;

566 
æ_hook_func_t
 *
æ_¥e_öput_hook
;

570 
æ_hook_func_t
 *
æ_evít_hook
;

573 
æ_hook_func_t
 *
æ_sig«l_evít_hook
;

577 
æ_hook_func_t
 *
æ_öput_avaûabÀ_hook
;

581 
æ_gëc_func_t
 *
æ_gëc_fun˘i⁄
;

583 
æ_voidfunc_t
 *
æ_ªdi•œy_fun˘i⁄
;

585 
æ_vötfunc_t
 *
æ_¥ï_ãrm_fun˘i⁄
;

586 
æ_voidfunc_t
 *
æ_dïªp_ãrm_fun˘i⁄
;

589 
Keym≠
 
æ_executög_keym≠
;

590 
Keym≠
 
æ_bödög_keym≠
;

592 
æ_executög_key
;

593 *
æ_executög_key£q
;

594 
æ_key_£quí˚_Àngth
;

600 
æ_îa£_em±y_löe
;

605 
æ_Æªady_¥om±ed
;

609 
æ_num_ch¨s_to_ªad
;

612 *
æ_executög_ma¸o
;

617 
æ_ˇtch_sig«ls
;

624 
æ_ˇtch_sigwöch
;

628 
æ_ch™ge_ívú⁄mít
;

634 
æ_com≥¡ry_func_t
 *
æ_com∂ëi⁄_íåy_fun˘i⁄
;

638 
æ_com≥¡ry_func_t
 *
æ_míu_com∂ëi⁄_íåy_fun˘i⁄
;

646 
æ_compign‹e_func_t
 *
æ_ign‹e_some_com∂ëi⁄s_fun˘i⁄
;

655 
æ_com∂ëi⁄_func_t
 *
æ_©ãm±ed_com∂ëi⁄_fun˘i⁄
;

660 c⁄° *
æ_basic_w‹d_bªak_ch¨a˘îs
;

665 *
æ_com∂ëî_w‹d_bªak_ch¨a˘îs
;

670 
æ_˝vfunc_t
 *
æ_com∂ëi⁄_w‹d_bªak_hook
;

676 c⁄° *
æ_com∂ëî_quŸe_ch¨a˘îs
;

679 c⁄° *
æ_basic_quŸe_ch¨a˘îs
;

682 c⁄° *
æ_fûíame_quŸe_ch¨a˘îs
;

687 c⁄° *
æ_•ecül_¥efixes
;

698 
æ_i˝pfunc_t
 *
æ_dúe˘‹y_com∂ëi⁄_hook
;

711 
æ_i˝pfunc_t
 *
æ_dúe˘‹y_ªwrôe_hook
;

718 
æ_i˝pfunc_t
 *
æ_fûíame_°©_hook
;

729 
æ_dequŸe_func_t
 *
æ_fûíame_ªwrôe_hook
;

732 
	#æ_symbﬁic_lök_hook
 
æ_dúe˘‹y_com∂ëi⁄_hook


	)

741 
æ_compdi•_func_t
 *
æ_com∂ëi⁄_di•œy_m©ches_hook
;

746 
æ_fûíame_com∂ëi⁄_desúed
;

753 
æ_fûíame_quŸög_desúed
;

759 
æ_quŸe_func_t
 *
æ_fûíame_quŸög_fun˘i⁄
;

764 
æ_dequŸe_func_t
 *
æ_fûíame_dequŸög_fun˘i⁄
;

769 
æ_löebuf_func_t
 *
æ_ch¨_is_quŸed_p
;

773 
æ_©ãm±ed_com∂ëi⁄_ovî
;

778 
æ_com∂ëi⁄_ty≥
;

781 
æ_com∂ëi⁄_övokög_key
;

786 
æ_com∂ëi⁄_quîy_ôems
;

790 
æ_com∂ëi⁄_≠≥nd_ch¨a˘î
;

794 
æ_com∂ëi⁄_suµªss_≠≥nd
;

798 
æ_com∂ëi⁄_quŸe_ch¨a˘î
;

802 
æ_com∂ëi⁄_found_quŸe
;

807 
æ_com∂ëi⁄_suµªss_quŸe
;

810 
æ_s‹t_com∂ëi⁄_m©ches
;

821 
æ_com∂ëi⁄_m¨k_symlök_dús
;

824 
æ_ign‹e_com∂ëi⁄_du∂iˇãs
;

828 
æ_öhibô_com∂ëi⁄
;

832 
	#READERR
 (-2)

	)

835 
	#RL_PROMPT_START_IGNORE
 '\001'

	)

836 
	#RL_PROMPT_END_IGNORE
 '\002'

	)

840 
	#NO_MATCH
 0

	)

841 
	#SINGLE_MATCH
 1

	)

842 
	#MULT_MATCH
 2

	)

845 
	#RL_STATE_NONE
 0x000000

	)

847 
	#RL_STATE_INITIALIZING
 0x0000001

	)

848 
	#RL_STATE_INITIALIZED
 0x0000002

	)

849 
	#RL_STATE_TERMPREPPED
 0x0000004

	)

850 
	#RL_STATE_READCMD
 0x0000008

	)

851 
	#RL_STATE_METANEXT
 0x0000010

	)

852 
	#RL_STATE_DISPATCHING
 0x0000020

	)

853 
	#RL_STATE_MOREINPUT
 0x0000040

	)

854 
	#RL_STATE_ISEARCH
 0x0000080

	)

855 
	#RL_STATE_NSEARCH
 0x0000100

	)

856 
	#RL_STATE_SEARCH
 0x0000200

	)

857 
	#RL_STATE_NUMERICARG
 0x0000400

	)

858 
	#RL_STATE_MACROINPUT
 0x0000800

	)

859 
	#RL_STATE_MACRODEF
 0x0001000

	)

860 
	#RL_STATE_OVERWRITE
 0x0002000

	)

861 
	#RL_STATE_COMPLETING
 0x0004000

	)

862 
	#RL_STATE_SIGHANDLER
 0x0008000

	)

863 
	#RL_STATE_UNDOING
 0x0010000

	)

864 
	#RL_STATE_INPUTPENDING
 0x0020000

	)

865 
	#RL_STATE_TTYCSAVED
 0x0040000

	)

866 
	#RL_STATE_CALLBACK
 0x0080000

	)

867 
	#RL_STATE_VIMOTION
 0x0100000

	)

868 
	#RL_STATE_MULTIKEY
 0x0200000

	)

869 
	#RL_STATE_VICMDONCE
 0x0400000

	)

870 
	#RL_STATE_REDISPLAYING
 0x0800000

	)

872 
	#RL_STATE_DONE
 0x1000000

	)

874 
	#RL_SETSTATE
(
x
Ë(
æ_ªadlöe_°©e
 |(x))

	)

875 
	#RL_UNSETSTATE
(
x
Ë(
æ_ªadlöe_°©e
 &~(x))

	)

876 
	#RL_ISSTATE
(
x
Ë(
æ_ªadlöe_°©e
 & (x))

	)

878 
	sªadlöe_°©e
 {

880 
	gpoöt
;

881 
	gíd
;

882 
	gm¨k
;

883 *
	gbuf„r
;

884 
	gbuÊí
;

885 
UNDO_LIST
 *
	gul
;

886 *
	g¥om±
;

889 
	gæ°©e
;

890 
	gd⁄e
;

891 
Keym≠
 
	gkm≠
;

894 
æ_comm™d_func_t
 *
	gœ°func
;

895 
	gösmode
;

896 
	gedmode
;

897 
	gk£qÀn
;

898 
FILE
 *
	göf
;

899 
FILE
 *
	goutf
;

900 
	g≥ndögö
;

901 *
	gma¸o
;

904 
	gˇtchsigs
;

905 
	gˇtchsigwöch
;

914 
	gª£rved
[64];

917 
æ_ßve_°©e
 
PARAMS
((
ªadlöe_°©e
 *));

918 
æ_ª°‹e_°©e
 
PARAMS
((
ªadlöe_°©e
 *));

920 #ifde‡
__˝lu•lus


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 
	#__√ed_time_t


	)

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

34 #i‚de‡
__pid_t_deföed


35 
__pid_t
 
	tpid_t
;

36 
	#__pid_t_deföed


	)

41 
	~<bôs/sched.h
>

43 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

46 
__BEGIN_DECLS


49 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

50 
__THROW
;

53 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

56 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

57 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

60 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

63 
	$sched_yõld
 (Ë
__THROW
;

66 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

69 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

72 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

75 #ifde‡
__USE_GNU


77 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

78 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

81 
˝u£ç
)

	)

82 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

83 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

86 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

88 
˝u£ç
)

	)

89 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

90 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

93 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

94 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

97 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

103 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

105 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

107 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

110 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

111 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

112 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

116 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

117 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

120 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

121 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

124 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

167 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

169 #ifde‡
__USE_XOPEN


170 #ifde‡
__GNUC__


171 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

174 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

179 #ifde‡
__USE_BSD


186 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

189 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

192 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

195 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 #ifde‡
__USE_MISC


200 
	#NSIG
 
_NSIG


	)

203 #ifde‡
__USE_GNU


204 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

208 #ifde‡
__USE_BSD


209 
__sigh™dÀr_t
 
	tsig_t
;

212 #ifde‡
__USE_POSIX


215 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

228 
__THROW
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__USE_GNU


232 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

236 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

239 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

240 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

245 
	~<bôs/siga˘i⁄.h
>

248 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

249 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

256 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

259 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

260 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

263 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 #ifde‡
__USE_POSIX199309


278 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

279 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

286 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

288 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

289 
	`__n⁄nuŒ
 ((1));

293 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

294 
__THROW
;

299 #ifde‡
__USE_BSD


303 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

304 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

307 
	ssigvec


309 
__sigh™dÀr_t
 
sv_h™dÀr
;

310 
sv_mask
;

312 
sv_Êags
;

313 
	#sv_⁄°ack
 
sv_Êags


	)

317 
	#SV_ONSTACK
 (1 << 0)

	)

318 
	#SV_INTERRUPT
 (1 << 1)

	)

319 
	#SV_RESETHAND
 (1 << 2)

	)

327 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

328 
sigvec
 *
__ovec
Ë
__THROW
;

332 
	~<bôs/sigc⁄ãxt.h
>

335 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

340 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


341 
	#__√ed_size_t


	)

342 
	~<°ddef.h
>

347 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

349 
	~<bôs/sig°ack.h
>

350 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


352 
	~<sys/uc⁄ãxt.h
>

358 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

359 
__THROW
 
__©åibuã_dïªˇãd__
;

363 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

364 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

368 #ifde‡
__USE_XOPEN_EXTENDED


372 
	$sighﬁd
 (
__sig
Ë
__THROW
;

375 
	$sigªl£
 (
__sig
Ë
__THROW
;

378 
	$sigign‹e
 (
__sig
Ë
__THROW
;

381 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

384 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


387 
	~<bôs/±hªadty≥s.h
>

388 
	~<bôs/sigthªad.h
>

395 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

397 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

401 
__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

30 || 
deföed
 
	g__USE_ATFILE


31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


32 
	#__√ed_time_t


	)

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


35 
	#__√ed_time•ec


	)

37 
	~<time.h
>

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


43 #i‚de‡
__dev_t_deföed


44 
__dev_t
 
	tdev_t
;

45 
	#__dev_t_deföed


	)

48 #i‚de‡
__gid_t_deföed


49 
__gid_t
 
	tgid_t
;

50 
	#__gid_t_deföed


	)

53 #i‚de‡
__öo_t_deföed


54 #i‚de‡
__USE_FILE_OFFSET64


55 
__öo_t
 
	töo_t
;

57 
__öo64_t
 
	töo_t
;

59 
	#__öo_t_deföed


	)

62 #i‚de‡
__mode_t_deföed


63 
__mode_t
 
	tmode_t
;

64 
	#__mode_t_deföed


	)

67 #i‚de‡
__∆ök_t_deföed


68 
__∆ök_t
 
	t∆ök_t
;

69 
	#__∆ök_t_deföed


	)

72 #i‚de‡
__off_t_deföed


73 #i‚de‡
__USE_FILE_OFFSET64


74 
__off_t
 
	toff_t
;

76 
__off64_t
 
	toff_t
;

78 
	#__off_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

87 #ifde‡
__USE_UNIX98


88 #i‚de‡
__blk˙t_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__blk˙t_t
 
	tblk˙t_t
;

92 
__blk˙t64_t
 
	tblk˙t_t
;

94 
	#__blk˙t_t_deföed


	)

97 #i‚de‡
__blksize_t_deföed


98 
__blksize_t
 
	tblksize_t
;

99 
	#__blksize_t_deföed


	)

103 
	g__BEGIN_DECLS


105 
	~<bôs/°©.h
>

107 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


108 
	#S_IFMT
 
__S_IFMT


	)

109 
	#S_IFDIR
 
__S_IFDIR


	)

110 
	#S_IFCHR
 
__S_IFCHR


	)

111 
	#S_IFBLK
 
__S_IFBLK


	)

112 
	#S_IFREG
 
__S_IFREG


	)

113 #ifde‡
__S_IFIFO


114 
	#S_IFIFO
 
__S_IFIFO


	)

116 #ifde‡
__S_IFLNK


117 
	#S_IFLNK
 
__S_IFLNK


	)

119 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

120 && 
deföed
 
	g__S_IFSOCK


121 
	#S_IFSOCK
 
__S_IFSOCK


	)

127 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

129 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

130 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

131 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

132 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

133 #ifde‡
__S_IFIFO


134 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

136 #ifde‡
__S_IFLNK


137 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

140 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


141 
	#S_ISLNK
(
mode
Ë0

	)

144 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

145 && 
deföed
 
	g__S_IFSOCK


146 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

147 #ñi‡
deföed
 
__USE_XOPEN2K


148 
	#S_ISSOCK
(
mode
Ë0

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #i‚de‡
__USE_FILE_OFFSET64


209 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

210 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

216 #ifde‡
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

218 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

219 
	`__n⁄nuŒ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__n⁄nuŒ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

229 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

233 #ifde‡
__USE_ATFILE


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

239 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

242 #ifde‡
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

244 
°©
 *
__ª°ri˘
 
__buf
,

245 
__Êag
),

246 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 #ifde‡
__USE_LARGEFILE64


253 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

254 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

255 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

259 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


260 #i‚de‡
__USE_FILE_OFFSET64


263 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

264 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

266 #ifde‡
__REDIRECT_NTH


267 
	`__REDIRECT_NTH
 (
l°©
,

268 (c⁄° *
__ª°ri˘
 
__fûe
,

269 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

270 
	`__n⁄nuŒ
 ((1, 2));

272 
	#l°©
 
l°©64


	)

275 #ifde‡
__USE_LARGEFILE64


276 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

277 
°©64
 *
__ª°ri˘
 
__buf
)

278 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

284 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

285 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 #ifde‡
__USE_BSD


291 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX


297 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

300 #ifde‡
__USE_ATFILE


303 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

304 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

312 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

314 #ifdef 
__USE_GNU


317 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

321 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1));

324 #ifde‡
__USE_ATFILE


328 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

329 
__THROW
 
	`__n⁄nuŒ
 ((2));

335 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


336 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1));

339 #ifde‡
__USE_ATFILE


343 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

344 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

353 #ifde‡
__USE_ATFILE


357 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 #ifde‡
__USE_ATFILE


364 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

365 c⁄° 
time•ec
 
__times
[2],

366 
__Êags
)

367 
__THROW
 
	`__n⁄nuŒ
 ((2));

370 #ifde‡
__USE_XOPEN2K8


372 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

390 #i‚de‡
_STAT_VER


391 
	#_STAT_VER
 0

	)

393 #i‚de‡
_MKNOD_VER


394 
	#_MKNOD_VER
 0

	)

398 #i‚de‡
__USE_FILE_OFFSET64


399 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

400 
__THROW
 
	`__n⁄nuŒ
 ((3));

401 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

402 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

403 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

406 
°©
 *
__°©_buf
, 
__Êag
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

411 
°©
 *
__°©_buf
), 
__fx°©64
)

412 
	`__n⁄nuŒ
 ((3));

413 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

414 
°©
 *
__°©_buf
), 
__x°©64
)

415 
	`__n⁄nuŒ
 ((2, 3));

416 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

417 
°©
 *
__°©_buf
), 
__lx°©64
)

418 
	`__n⁄nuŒ
 ((2, 3));

419 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

420 c⁄° *
__fûíame
,

421 
°©
 *
__°©_buf
, 
__Êag
),

422 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

425 
	#__fx°©
 
__fx°©64


	)

426 
	#__x°©
 
__x°©64


	)

427 
	#__lx°©
 
__lx°©64


	)

431 #ifde‡
__USE_LARGEFILE64


432 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

433 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

435 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

436 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

439 
°©64
 *
__°©_buf
, 
__Êag
)

440 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

442 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

443 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

446 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

447 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

449 #ifde‡
__USE_EXTERN_INLINES


452 
__exã∫_ölöe
 

453 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

455  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

456 
	}
}

458 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


459 
__exã∫_ölöe
 

460 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

462  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

463 
	}
}

466 
__exã∫_ölöe
 

467 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

469  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

470 
	}
}

472 #ifde‡
__USE_ATFILE


473 
__exã∫_ölöe
 

474 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

475 
__Êag
))

477  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

478 
	}
}

481 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


482 
__exã∫_ölöe
 

483 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

485  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

486 
	}
}

489 #ifde‡
__USE_ATFILE


490 
__exã∫_ölöe
 

491 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

492 
__dev_t
 
__dev
))

494  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

495 
	}
}

498 #i‡
deföed
 
__USE_LARGEFILE64
 \

499 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

500 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

501 
__exã∫_ölöe
 

502 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

504  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

505 
	}
}

507 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


508 
__exã∫_ölöe
 

509 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

511  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

512 
	}
}

515 
__exã∫_ölöe
 

516 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

518  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

519 
	}
}

521 #ifde‡
__USE_ATFILE


522 
__exã∫_ölöe
 

523 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

524 
__Êag
))

526  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

527 
	}
}

534 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_BSD


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #i‡
deföed
 
__USE_BSD
 \

782 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

785 
	$ây¶Ÿ
 (Ë
__THROW
;

790 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

793 #ifde‡
__USE_ATFILE


796 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

797 c⁄° *
__to
, 
__Êags
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

801 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


803 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

810 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

814 #ifde‡
__USE_ATFILE


816 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

817 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

820 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

821 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

822 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

826 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_ATFILE


830 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

831 
__THROW
 
	`__n⁄nuŒ
 ((2));

835 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

842 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

849 *
	`gëlogö
 ();

850 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


857 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

860 #ifdef 
__USE_BSD


862 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__√ed_gë›t


	)

871 
	~<gë›t.h
>

875 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

886 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

887 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

897 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

899 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

906 
	$vh™gup
 (Ë
__THROW
;

909 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

917 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sˇÀ
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

929 *
	$gëu£rshñl
 (Ë
__THROW
;

930 
	$ídu£rshñl
 (Ë
__THROW
;

931 
	$£tu£rshñl
 (Ë
__THROW
;

937 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

941 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

944 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

948 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifde‡
__USE_GNU


962 
	$syncfs
 (
__fd
Ë
__THROW
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


969 
	`gëho°id
 ();

972 
	$sync
 (Ë
__THROW
;

975 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


978 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

983 
	$gëdèbÀsize
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


992 #i‚de‡
__USE_FILE_OFFSET64


993 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

994 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

996 #ifde‡
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
åunˇã
,

998 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

999 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 
	#åunˇã
 
åunˇã64


	)

1004 #ifde‡
__USE_LARGEFILE64


1005 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1012 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1015 #i‚de‡
__USE_FILE_OFFSET64


1016 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1020 
·runˇã64
Ë
__wur
;

1022 
	#·runˇã
 
·runˇã64


	)

1025 #ifde‡
__USE_LARGEFILE64


1026 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1032 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1033 || 
deföed
 
__USE_MISC


1037 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1043 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1047 #ifde‡
__USE_MISC


1058 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1063 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #i‚de‡
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1083 #ifde‡
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1085 
lockf64
Ë
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifde‡
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1102 (
__exãnsi⁄__
 \

1103 ({ 
__ªsu…
; \

1104 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1105 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1106 
__ªsu…
; 
	}
}))

	)

1109 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1112 
fd©async
 (
__fûdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1125 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1126 
__THROW
 
	`__n⁄nuŒ
 ((1));

1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1140 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1142 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1148 
	~<bôs/uni°d.h
>

1151 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/huge_val.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VAL
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

35 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

39 
	~<ídün.h
>

41 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

50 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

51 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VALF
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7f800000UL }).
__d
)

	)

39 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

48 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

49 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

20 #i‚de‡
_MATH_H


24 #i‡
__GNUC_PREREQ
(3,3)

25 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

26 #ñi‡
__GNUC_PREREQ
(2,96)

27 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

30 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

32 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

33 #ifde‡
__GNUC__


34 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

35 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

37 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

38 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

26 #ifde‡
__MATH_DECLARE_LDOUBLE


27 #ifde‡
__NO_LONG_DOUBLE_MATH


28 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

30 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


36 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

37 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

38 #ifde‡
__MATH_DECLARE_LDOUBLE


39 #ifde‡
__NO_LONG_DOUBLE_MATH


40 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

42 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

48 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

49 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

50 #ifde‡
__MATH_DECLARE_LDOUBLE


51 #ifde‡
__NO_LONG_DOUBLE_MATH


52 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

54 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

59 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

60 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

61 #ifde‡
__MATH_DECLARE_LDOUBLE


62 #ifde‡
__NO_LONG_DOUBLE_MATH


63 
__REDIRECT_NTH
 (
©™2l
, (, ),

64 
__©™2_föôe
);

66 
__REDIRECT_NTH
 (
©™2l
, (, ),

67 
__©™2l_föôe
);

71 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


73 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

74 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

75 #ifde‡
__MATH_DECLARE_LDOUBLE


76 #ifde‡
__NO_LONG_DOUBLE_MATH


77 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

79 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

85 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

86 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

87 #ifde‡
__MATH_DECLARE_LDOUBLE


88 #ifde‡
__NO_LONG_DOUBLE_MATH


89 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

91 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

96 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

97 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

102 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

106 #ifde‡
__USE_GNU


108 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

109 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

110 #ifde‡
__MATH_DECLARE_LDOUBLE


111 #ifde‡
__NO_LONG_DOUBLE_MATH


112 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

114 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

119 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

120 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

121 #ifde‡
__MATH_DECLARE_LDOUBLE


122 #ifde‡
__NO_LONG_DOUBLE_MATH


123 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

125 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

130 #ifde‡
__USE_ISOC99


132 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

133 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

134 #ifde‡
__MATH_DECLARE_LDOUBLE


135 #ifde‡
__NO_LONG_DOUBLE_MATH


136 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

138 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

144 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

145 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

146 #ifde‡
__MATH_DECLARE_LDOUBLE


147 #ifde‡
__NO_LONG_DOUBLE_MATH


148 
__REDIRECT_NTH
 (
fmodl
, (, ),

149 
__fmod_föôe
);

151 
__REDIRECT_NTH
 (
fmodl
, (, ),

152 
__fmodl_föôe
);

156 #ifde‡
__USE_ISOC99


158 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

159 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

160 #ifde‡
__MATH_DECLARE_LDOUBLE


161 #ifde‡
__NO_LONG_DOUBLE_MATH


162 
__REDIRECT_NTH
 (
hypŸl
, (, ),

163 
__hypŸ_föôe
);

165 
__REDIRECT_NTH
 (
hypŸl
, (, ),

166 
__hypŸl_föôe
);

171 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


173 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

174 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

175 #ifde‡
__MATH_DECLARE_LDOUBLE


176 #ifde‡
__NO_LONG_DOUBLE_MATH


177 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

179 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

184 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

185 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

186 #ifde‡
__MATH_DECLARE_LDOUBLE


187 #ifde‡
__NO_LONG_DOUBLE_MATH


188 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

190 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

195 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

196 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

197 #ifde‡
__MATH_DECLARE_LDOUBLE


198 #ifde‡
__NO_LONG_DOUBLE_MATH


199 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

201 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

206 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

207 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

208 #ifde‡
__MATH_DECLARE_LDOUBLE


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

212 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

217 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

218 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

219 #ifde‡
__MATH_DECLARE_LDOUBLE


220 #ifde‡
__NO_LONG_DOUBLE_MATH


221 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

223 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

228 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

229 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

230 #ifde‡
__MATH_DECLARE_LDOUBLE


231 #ifde‡
__NO_LONG_DOUBLE_MATH


232 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

234 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

239 #ifde‡
__USE_MISC


241 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

242 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

243 #ifde‡
__MATH_DECLARE_LDOUBLE


244 #ifde‡
__NO_LONG_DOUBLE_MATH


245 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

246 
__lgamma_r_föôe
);

248 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

249 
__lgammÆ_r_föôe
);

254 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


256 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

258 #ifde‡
__USE_ISOC99


259 
__loˇl_signgam
 = 0;

260  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

262  
	`lgamma_r
 (
__d
, &
signgam
);

264 
	}
}

265 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

267 #ifde‡
__USE_ISOC99


268 
__loˇl_signgam
 = 0;

269  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

271  
	`lgammaf_r
 (
__d
, &
signgam
);

273 
	}
}

274 #ifde‡
__MATH_DECLARE_LDOUBLE


275 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

277 #ifde‡
__USE_ISOC99


278 
__loˇl_signgam
 = 0;

279  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

281  
	`lgammÆ_r
 (
__d
, &
signgam
);

283 
	}
}

287 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


289 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

291 #ifde‡
__USE_ISOC99


292 
__loˇl_signgam
 = 0;

293  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

295  
	`lgamma_r
 (
__d
, &
signgam
);

297 
	}
}

298 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

300 #ifde‡
__USE_ISOC99


301 
__loˇl_signgam
 = 0;

302  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

304  
	`lgammaf_r
 (
__d
, &
signgam
);

306 
	}
}

307 #ifde‡
__MATH_DECLARE_LDOUBLE


308 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

310 #ifde‡
__USE_ISOC99


311 
__loˇl_signgam
 = 0;

312  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

314  
	`lgammÆ_r
 (
__d
, &
signgam
);

316 
	}
}

321 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

322 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

323 #ifde‡
__MATH_DECLARE_LDOUBLE


324 #ifde‡
__NO_LONG_DOUBLE_MATH


325 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

327 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

332 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

333 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

334 #ifde‡
__MATH_DECLARE_LDOUBLE


335 #ifde‡
__NO_LONG_DOUBLE_MATH


336 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

338 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

342 #ifde‡
__USE_ISOC99


344 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

345 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

346 #ifde‡
__MATH_DECLARE_LDOUBLE


347 #ifde‡
__NO_LONG_DOUBLE_MATH


348 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

350 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

356 
__REDIRECT_NTH
 (
ldexp
, (, ), 
sˇlbn
);

357 
__REDIRECT_NTH
 (
ldexpf
, (, ), 
sˇlbnf
);

358 #ifde‡
__MATH_DECLARE_LDOUBLE


359 
__REDIRECT_NTH
 (
ldex∂
, (, ), 
sˇlb∆
);

363 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

364 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

365 #ifde‡
__MATH_DECLARE_LDOUBLE


366 #ifde‡
__NO_LONG_DOUBLE_MATH


367 
__REDIRECT_NTH
 (
powl
, (, ),

368 
__pow_föôe
);

370 
__REDIRECT_NTH
 (
powl
, (, ),

371 
__powl_föôe
);

376 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

377 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

378 #ifde‡
__MATH_DECLARE_LDOUBLE


379 #ifde‡
__NO_LONG_DOUBLE_MATH


380 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

381 
__ªmaödî_föôe
);

383 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

384 
__ªmaödîl_föôe
);

388 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


390 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

391 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

392 #ifde‡
__MATH_DECLARE_LDOUBLE


393 #ifde‡
__NO_LONG_DOUBLE_MATH


394 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

395 
__sˇlb_föôe
);

397 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

398 
__sˇlbl_föôe
);

404 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

405 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

406 #ifde‡
__MATH_DECLARE_LDOUBLE


407 #ifde‡
__NO_LONG_DOUBLE_MATH


408 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

410 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

415 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

416 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

417 #ifde‡
__MATH_DECLARE_LDOUBLE


418 #ifde‡
__NO_LONG_DOUBLE_MATH


419 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

421 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

425 #ifde‡
__USE_ISOC99


427 
__gamma_r_föôe
 (, *);

428 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

430 
__loˇl_signgam
 = 0;

431 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

432  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

433 
	}
}

434 
__gammaf_r_föôe
 (, *);

435 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

437 
__loˇl_signgam
 = 0;

438 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

439  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

440 
	}
}

441 #ifde‡
__MATH_DECLARE_LDOUBLE


442 
__gammÆ_r_föôe
 (, *);

443 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

445 
__loˇl_signgam
 = 0;

446 #ifde‡
__NO_LONG_DOUBLE_MATH


447 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

449 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

451  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

452 
	}
}

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
)Ë
__n⁄nuŒ
 ((2));

116 
	g_MdoubÀ_END_NAMESPACE


118 #ifde‡
__USE_GNU


120 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

122 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

125 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

131 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

134 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

135 
	g__END_NAMESPACE_C99


138 #ifde‡
__USE_ISOC99


139 
__BEGIN_NAMESPACE_C99


141 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

144 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

145 
	g__END_NAMESPACE_C99


151 
_MdoubÀ_BEGIN_NAMESPACE


153 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

156 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

157 
	g_MdoubÀ_END_NAMESPACE


159 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


160 
__BEGIN_NAMESPACE_C99


162 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

163 
	g__END_NAMESPACE_C99


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

170 
	g__END_NAMESPACE_C99


176 
_MdoubÀ_BEGIN_NAMESPACE


178 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

181 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

184 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

187 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

192 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

195 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
	g_MdoubÀ_END_NAMESPACE


198 #ifde‡
__USE_MISC


201 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

204 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

207 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

211 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


215 
__BEGIN_NAMESPACE_C99


217 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

218 
	g__END_NAMESPACE_C99


221 #ifde‡
__USE_ISOC99


222 
__BEGIN_NAMESPACE_C99


224 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

225 
	g__END_NAMESPACE_C99


230 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


234 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

237 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

238 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

240 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

241 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

246 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


247 
__BEGIN_NAMESPACE_C99


249 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

250 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

252 
	g__END_NAMESPACE_C99


255 #ifde‡
__USE_ISOC99


256 
__BEGIN_NAMESPACE_C99


258 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

259 
	g__END_NAMESPACE_C99


262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


264 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

267 #ifde‡
__USE_MISC


271 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


276 
__BEGIN_NAMESPACE_C99


279 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

282 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

283 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


284 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

288 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

290 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


292 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

296 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

299 #ifde‡
__USE_ISOC99


301 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

305 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

309 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

313 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

318 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

325 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

326 
__exãnsi⁄__


327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__exãnsi⁄__


333 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

337 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

340 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

343 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

347 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

348 
__©åibuã__
 ((
__c⁄°__
));

351 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

352 
__©åibuã__
 ((
__c⁄°__
));

356 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

359 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


360 
	g__END_NAMESPACE_C99


363 #ifde‡
__USE_GNU


365 
__MATHDECL_1
 (, 
__issig«lög
,, (
_MdoubÀ_
 
__vÆue
))

366 
__©åibuã__
 ((
__c⁄°__
));

369 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


371 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #i‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #i‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #i‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__exãnsi⁄__


202 
__MATH_INLINE
 

203 
__NTH
 (
	$Œrötf
 (
__x
))

205 
__ªs
;

210 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

211  
__ªs
;

212 
	}
}

213 
__exãnsi⁄__


214 
__MATH_INLINE
 

215 
__NTH
 (
	$Œröt
 (
__x
))

217 
__ªs
;

222 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

223  
__ªs
;

224 
	}
}

227 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

228 && 
deföed
 
__SSE2_MATH__


230 
__MATH_INLINE
 

231 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

233 #ifde‡
__AVX__


234 
__ªs
;

235 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

236  
__ªs
;

238 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

239  
__x
;

241 
	}
}

242 
__MATH_INLINE
 

243 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

245 #ifde‡
__AVX__


246 
__ªs
;

247 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

248  
__ªs
;

250 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

251  
__x
;

253 
	}
}

256 
__MATH_INLINE
 

257 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

259 #ifde‡
__AVX__


260 
__ªs
;

261 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

262  
__ªs
;

264 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

265  
__x
;

267 
	}
}

268 
__MATH_INLINE
 

269 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

271 #ifde‡
__AVX__


272 
__ªs
;

273 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

274  
__ªs
;

276 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

277  
__x
;

279 
	}
}

282 
	g__END_NAMESPACE_C99


285 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


286 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


287 
__BEGIN_NAMESPACE_C99


290 
__MATH_INLINE
 

291 
__NTH
 (
	$röt
 (
__x
))

293 
__ªs
;

298 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

299  
__ªs
;

300 
	}
}

301 
__MATH_INLINE
 

302 
__NTH
 (
	$rötf
 (
__x
))

304 
__ªs
;

309 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

310  
__ªs
;

311 
	}
}

313 #ifde‡
__USE_ISOC99


315 
__MATH_INLINE
 

316 
__NTH
 (
	$√¨byöt
 (
__x
))

318 
__ªs
;

323 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

324  
__ªs
;

325 
	}
}

326 
__MATH_INLINE
 

327 
__NTH
 (
	$√¨byötf
 (
__x
))

329 
__ªs
;

334 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

335  
__ªs
;

336 
	}
}

339 
	g__END_NAMESPACE_C99


342 
__BEGIN_NAMESPACE_STD


344 
__MATH_INLINE
 

345 
__NTH
 (
	$˚û
 (
__x
))

347 
__ªs
;

348 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

349  
__ªs
;

350 
	}
}

351 
__END_NAMESPACE_STD


353 
__BEGIN_NAMESPACE_C99


354 
__MATH_INLINE
 

355 
__NTH
 (
	$˚ûf
 (
__x
))

357 
__ªs
;

358 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

359  
__ªs
;

360 
	}
}

361 
__END_NAMESPACE_C99


363 
__BEGIN_NAMESPACE_STD


365 
__MATH_INLINE
 

366 
__NTH
 (
	$Êo‹
 (
__x
))

368 
__ªs
;

369 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

370  
__ªs
;

371 
	}
}

372 
__END_NAMESPACE_STD


374 
__BEGIN_NAMESPACE_C99


375 
__MATH_INLINE
 

376 
__NTH
 (
	$Êo‹f
 (
__x
))

378 
__ªs
;

379 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

380  
__ªs
;

381 
	}
}

382 
	g__END_NAMESPACE_C99


387 #i‚de‡
__SSE2_MATH__


388 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

389 && 
deföed
 
	g__OPTIMIZE__
)

393 #unde‡
m©h_îrh™dlög


402 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


403 
	#__ölöe_m©h›
(
func
, 
›
) \

404 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

405 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

406 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

407 
	#__ölöe_m©h›NP
(
func
, 
›
) \

408 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

409 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

410 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

412 
	#__ölöe_m©h›
(
func
, 
›
) \

413 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

414 
	#__ölöe_m©h›NP
(
func
, 
›
) \

415 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

418 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

419 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

420 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

421 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

424 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


425 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

426 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

427 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

428 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

429 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

430 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

431 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

432 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

434 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

435 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

436 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

437 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

440 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

441 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

442 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

444 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

445 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

447 
Êﬂt_ty≥
 
__ªsu…
; \

448 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

449  
__ªsu…
; \

450 }

	)

453 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


454 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

455 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

456 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

457 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

458 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

459 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

460 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

461 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

462 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

463 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

464 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

465 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

466 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

468 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

469 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

470 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

471 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

472 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

473 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

474 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

476 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

477 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

479 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

480 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

481 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

482 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

483 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

484 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

485 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

486 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

487 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

488 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

489 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

490 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

493 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

494 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

495 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

497 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

498 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

500 
code
; \

501 }

	)

504 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

505 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

506 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

508 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

509 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

511 
code
; \

512 }

	)

514 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

515 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

516 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

518 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

519 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

520 
Êﬂt_ty≥
 
¨g3
)) \

522 
code
; \

523 }

	)

527 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


531 #ifde‡
__FAST_MATH__


532 #ifde‡
__USE_GNU


533 
	#__söcos_code
 \

534 
__co§
; \

535 
__sör
; \

536 
__swtmp
; \

537 
__asm
 
__vﬁ©ûe__
 \

552 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

553 *
__söx
 = 
__sör
; \

554 *
__cosx
 = 
__co§


	)

556 
__MATH_INLINE
 

557 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

559 
__söcos_code
;

560 
	}
}

562 
__MATH_INLINE
 

563 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

565 
__söcos_code
;

566 
	}
}

568 
__MATH_INLINE
 

569 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

571 
__söcos_code
;

572 
	}
}

579 #i‡
__GNUC_PREREQ
 (3, 5)

580 
	#__expm1_code
 \

581 
__ãmp
; \

582 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

583  
__ãmp
 ? __ãm∞: 
__x


	)

585 
	#__expm1_code
 \

586 
__vÆue
; \

587 
__exp⁄ít
; \

588 
__ãmp
; \

589 
__asm
 
__vﬁ©ûe__
 \

598 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

599 
__asm
 
__vﬁ©ûe__
 \

601 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

602 
__ãmp
 -= 1.0; \

603 
__ãmp
 +
__vÆue
; \

604  
__ãmp
 ? __ãm∞: 
__x


	)

606 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

608 #i‡
	`__GNUC_PREREQ
 (3, 4)

609 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

611 
	#__exp_code
 \

612 
__vÆue
; \

613 
__exp⁄ít
; \

614 
__asm
 
__vﬁ©ûe__
 \

622 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

623 
__vÆue
 += 1.0; \

624 
__asm
 
__vﬁ©ûe__
 \

626 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

627  
__vÆue


	)

628 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

629 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

633 #i‡!
	`__GNUC_PREREQ
 (3, 5)

634 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

635 
__vÆue
; \

636 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

637 
__asm
 
__vﬁ©ûe__
 \

639 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

640  
__vÆue
)

645 #i‡
	`__GNUC_PREREQ
 (3, 4)

646 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

647  
	$__buûtö_©™2l
 (
__y
, 
__x
))

649 
	#__©™2_code
 \

650 
__vÆue
; \

651 
__asm
 
__vﬁ©ûe__
 \

653 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

654  
__vÆue


	)

655 #ifde‡
__FAST_MATH__


656 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

658 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

662 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

663 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

664 
__vÆue
; \

665 
__asm
 
__vﬁ©ûe__
 \

670 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

671  
__vÆue
)

675 #ifde‡
__FAST_MATH__


676 #i‡!
	`__GNUC_PREREQ
 (3,3)

677 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

678 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

679 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

681 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

685 #i‡
	`__GNUC_PREREQ
 (2, 8)

686 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

687 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


688 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

689 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

691 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

693 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

694 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

697 #ifde‡
__FAST_MATH__


698 #i‡!
	`__GNUC_PREREQ
 (3, 4)

700 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

702 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

704 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

707 #i‡!
	`__GNUC_PREREQ
 (3, 5)

708 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

710 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

711 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

714 #i‡!
	`__GNUC_PREREQ
 (3, 4)

715 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

719 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

720 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

721 { 
__xld
: 
__x
 
	}
}; \

722 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

723 
	g__n
.
	g__xi
[1] = 0x80000000; \

724 
	g__n
.
	g__xi
[0] = 0; \

725  
	g__n
.
	g__xld
)

728 #ifde‡
__FAST_MATH__


730 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

731 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

732  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

734 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

735 
__ex
 = 
	`__ex∂
 (
__x
); \

736  0.5 * (
__ex
 + 1.0 / __ex))

738 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

739 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

740  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

743 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

744 
__vÆue
; \

745 
__ign‹e
; \

746 
__cw
; \

747 
__cwtmp
; \

748 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

756 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

757 "=m" (
__cw
) \

758 : "0" (
__x
)); \

759  
__vÆue
)

761 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

762 
__vÆue
; \

763 
__ign‹e
; \

764 
__cw
; \

765 
__cwtmp
; \

766 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

774 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

775 "=m" (
__cw
) \

776 : "0" (
__x
)); \

777  
__vÆue
)

779 #ifde‡
__FAST_MATH__


780 
	#__ldexp_code
 \

781 
__vÆue
; \

782 
__asm
 
__vﬁ©ûe__
 \

784 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

785  
__vÆue


	)

787 
__MATH_INLINE
 

788 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

790 
__ldexp_code
;

791 
	}
}

796 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


798 #ifde‡
__FAST_MATH__


799 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

803 
	#__M_SQRT2
 1.41421356237309504880L

	)

805 #i‡!
	`__GNUC_PREREQ
 (3, 5)

806 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

807 
__vÆue
; \

808 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

809 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

811 
__asm
 
__vﬁ©ûe__
 \

815 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

816  
__vÆue
)

821 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

822 
__y
 = 
	`__Áb¶
 (
__x
); \

823  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

824 * 
	$__sgn1l
 (
__x
)))

826 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

827  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

829 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

830 
__y
 = 
	`__Áb¶
 (
__x
); \

831  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

834 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

835  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

837 #i‡!
	`__GNUC_PREREQ
 (3, 5)

838 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

839 
__vÆue
; \

840 
__junk
; \

841 
__asm
 
__vﬁ©ûe__
 \

843 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

844  
__vÆue
)

850 #ifde‡
__USE_ISOC99


851 #ifde‡
__FAST_MATH__


853 #i‡!
	`__GNUC_PREREQ
 (3, 5)

854 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

857 
__MATH_INLINE
 

858 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

860 
__ldexp_code
;

861 
	}
}

863 
__MATH_INLINE
 

864 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

866 
__ldexp_code
;

867 
	}
}

869 
__ölöe_m©h›NP
 (
röt
, "frndint")

872 
	#__Ãöt_code
 \

873 
__Ãöåes
; \

874 
__asm__
 
__vﬁ©ûe__
 \

876 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

877  
__Ãöåes


	)

878 
__MATH_INLINE
 

879 
__NTH
 (
	$Ãötf
 (
__x
))

881 
__Ãöt_code
;

882 
	}
}

883 
__MATH_INLINE
 

884 
__NTH
 (
	$Ãöt
 (
__x
))

886 
__Ãöt_code
;

887 
	}
}

888 
__MATH_INLINE
 

889 
__NTH
 (
	$Ãöé
 (
__x
))

891 
__Ãöt_code
;

892 
	}
}

893 #unde‡
__Ãöt_code


895 
	#__Œröt_code
 \

896 
__Œröåes
; \

897 
__asm__
 
__vﬁ©ûe__
 \

899 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

900  
__Œröåes


	)

901 
__exãnsi⁄__


902 
__MATH_INLINE
 

903 
__NTH
 (
	$Œrötf
 (
__x
))

905 
__Œröt_code
;

906 
	}
}

907 
__exãnsi⁄__


908 
__MATH_INLINE
 

909 
__NTH
 (
	$Œröt
 (
__x
))

911 
__Œröt_code
;

912 
	}
}

913 
__exãnsi⁄__


914 
__MATH_INLINE
 

915 
__NTH
 (
	$Œröé
 (
__x
))

917 
__Œröt_code
;

918 
	}
}

919 #unde‡
__Œröt_code


924 #ifde‡
__USE_MISC


926 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

927 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

928 
__vÆue
; \

929 
__˛obbîed
; \

930 
__asm
 
__vﬁ©ûe__
 \

935 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

936  
__vÆue
)

941 
__MATH_INLINE
 

942 
__NTH
 (
	$__föôe
 (
__x
))

944  (
__exãnsi⁄__


945 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

947 
	}
}

952 #unde‡
__©™2_code


953 #ifde‡
__FAST_MATH__


954 #unde‡
__expm1_code


955 #unde‡
__exp_code


956 #unde‡
__söcos_code


963 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


964 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

965 
__ölöe_m©hcode2
 (
__õì754_©™2
, 
__y
, 
__x
,

966 
__vÆue
;

967 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

968 : "Ò" (
__vÆue
)

969 : "0" (
__x
), "u" (
__y
) : "st(1)");

970  
__vÆue
;)

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__q«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__q«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__q«n_uni⁄


49 
__©åibuã__
 ((
__unu£d__
)Ë{ 
__q«n_byãs
 };

50 
	#NAN
 (
__q«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 
	#__PTHREAD_MUTEX_HAVE_ELISION
 1

	)

110 
	m__nu£rs
;

111 
__exãnsi⁄__
 union

115 
	m__e•ös
;

116 
	m__ñisi⁄
;

117 
	#__•ös
 
d
.
__e•ös


	)

118 
	#__ñisi⁄
 
d
.
__ñisi⁄


	)

119 
	#__PTHREAD_MUTEX_HAVE_ELISION
 2

	)

120 } 
	md
;

121 
__±hªad_¶i°_t
 
	m__li°
;

124 } 
	m__d©a
;

125 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

126 
	m__Æign
;

127 } 
	t±hªad_muãx_t
;

131 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

132 
	m__Æign
;

133 } 
	t±hªad_muãx©å_t
;

142 
	m__lock
;

143 
	m__fuãx
;

144 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

145 
__exãnsi⁄__
 
	m__wakeup_£q
;

146 
__exãnsi⁄__
 
	m__wokí_£q
;

147 *
	m__muãx
;

148 
	m__nwaôîs
;

149 
	m__brﬂdˇ°_£q
;

150 } 
	m__d©a
;

151 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

152 
__exãnsi⁄__
 
	m__Æign
;

153 } 
	t±hªad_c⁄d_t
;

157 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

158 
	m__Æign
;

159 } 
	t±hªad_c⁄d©å_t
;

163 
	t±hªad_key_t
;

167 
	t±hªad_⁄˚_t
;

170 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


175 #ifde‡
__x86_64__


178 
	m__lock
;

179 
	m__ƒ_ªadîs
;

180 
	m__ªadîs_wakeup
;

181 
	m__wrôî_wakeup
;

182 
	m__ƒ_ªadîs_queued
;

183 
	m__ƒ_wrôîs_queued
;

184 
	m__wrôî
;

185 
	m__sh¨ed
;

186 
	m__∑d1
;

187 
	m__∑d2
;

190 
	m__Êags
;

191 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

192 } 
	m__d©a
;

196 
	m__lock
;

197 
	m__ƒ_ªadîs
;

198 
	m__ªadîs_wakeup
;

199 
	m__wrôî_wakeup
;

200 
	m__ƒ_ªadîs_queued
;

201 
	m__ƒ_wrôîs_queued
;

204 
	m__Êags
;

205 
	m__sh¨ed
;

206 
	m__∑d1
;

207 
	m__∑d2
;

208 
	m__wrôî
;

209 } 
	m__d©a
;

211 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

212 
	m__Æign
;

213 } 
	t±hªad_rwlock_t
;

217 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

218 
	m__Æign
;

219 } 
	t±hªad_rwlock©å_t
;

223 #ifde‡
__USE_XOPEN2K


225 vﬁ©ûê
	t±hªad_•ölock_t
;

232 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

233 
	m__Æign
;

234 } 
	t±hªad_b¨rõr_t
;

238 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

239 
	m__Æign
;

240 } 
	t±hªad_b¨rõøâr_t
;

244 #i‚de‡
__x86_64__


246 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/sched.h

20 #i‚de‡
__√ed_sched∑øm


22 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifde‡
__USE_GNU


40 
	#CSIGNAL
 0x000000f‡

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWUTS
 0x04000000

	)

64 
	#CLONE_NEWIPC
 0x08000000

	)

65 
	#CLONE_NEWUSER
 0x10000000

	)

66 
	#CLONE_NEWPID
 0x20000000

	)

67 
	#CLONE_NEWNET
 0x40000000

	)

68 
	#CLONE_IO
 0x80000000

	)

72 
	ssched_∑øm


74 
	m__sched_¥i‹ôy
;

77 
	g__BEGIN_DECLS


79 #ifde‡
__USE_GNU


81 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

82 
__Êags
, *
__¨g
, ...Ë
__THROW
;

85 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

88 
	$sched_gë˝u
 (Ë
__THROW
;

91 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

95 
__END_DECLS


99 #i‡!
deföed
 
__deföed_sched∑øm
 \

100 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

101 
	#__deföed_sched∑øm
 1

	)

103 
	s__sched_∑øm


105 
__sched_¥i‹ôy
;

107 #unde‡
__√ed_sched∑øm


111 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


112 
	#__˝u_£t_t_deföed


	)

114 
	#__CPU_SETSIZE
 1024

	)

115 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

118 
	t__˝u_mask
;

121 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

122 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

127 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

128 } 
	t˝u_£t_t
;

131 #i‡
	`__GNUC_PREREQ
 (2, 91)

132 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

133 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

135 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

137 
size_t
 
__i
; \

138 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

139 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

140 
__i
 = 0; __ò< 
__imax
; ++__i) \

141 
__bôs
[
__i
] = 0; \

142 
	}
} 0)

	)

144 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 / 8 < (
£tsize
) \

148 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

149 |
	`__CPUMASK
 (
__˝u
)) \

150 : 0; }))

	)

151 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

152 (
__exãnsi⁄__
 \

153 ({ 
size_t
 
__˝u
 = (
˝u
); \

154 
__˝u
 / 8 < (
£tsize
) \

155 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

156 &~
	`__CPUMASK
 (
__˝u
)) \

157 : 0; }))

	)

158 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

159 (
__exãnsi⁄__
 \

160 ({ 
size_t
 
__˝u
 = (
˝u
); \

161 
__˝u
 / 8 < (
£tsize
) \

162 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

163 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

164 : 0; }))

	)

166 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

167 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

169 #i‡
__GNUC_PREREQ
 (2, 91)

170 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

171 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

173 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

174 (
__exãnsi⁄__
 \

175 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

176 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

177 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

178 
size_t
 
__i
; \

179 
__i
 = 0; __ò< 
__imax
; ++__i) \

180 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

182 
__i
 =
__imax
; }))

	)

185 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

186 (
__exãnsi⁄__
 \

187 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

188 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

189 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

190 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

191 
size_t
 
__i
; \

192 
__i
 = 0; __ò< 
__imax
; ++__i) \

193 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

194 
__de°
; }))

	)

196 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

197 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

198 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

199 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

201 
__BEGIN_DECLS


203 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

204 
__THROW
;

205 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

206 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

208 
__END_DECLS


	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

111 } 
_sigÁu…
;

116 
si_b™d
;

117 
si_fd
;

118 } 
_sigpﬁl
;

123 *
_ˇŒ_addr
;

124 
_sysˇŒ
;

125 
_¨ch
;

126 } 
_sigsys
;

127 } 
_sifõlds
;

128 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

132 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

133 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

134 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

135 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

136 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

137 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

138 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

139 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

140 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

141 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

142 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

143 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

144 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

145 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

146 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

147 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

148 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

155 
SI_ASYNCNL
 = -60,

156 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

157 
SI_TKILL
 = -6,

158 
	#SI_TKILL
 
SI_TKILL


	)

159 
SI_SIGIO
,

160 
	#SI_SIGIO
 
SI_SIGIO


	)

161 
SI_ASYNCIO
,

162 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

163 
SI_MESGQ
,

164 
	#SI_MESGQ
 
SI_MESGQ


	)

165 
SI_TIMER
,

166 
	#SI_TIMER
 
SI_TIMER


	)

167 
SI_QUEUE
,

168 
	#SI_QUEUE
 
SI_QUEUE


	)

169 
SI_USER
,

170 
	#SI_USER
 
SI_USER


	)

171 
SI_KERNEL
 = 0x80

172 
	#SI_KERNEL
 
SI_KERNEL


	)

179 
ILL_ILLOPC
 = 1,

180 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

181 
ILL_ILLOPN
,

182 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

183 
ILL_ILLADR
,

184 
	#ILL_ILLADR
 
ILL_ILLADR


	)

185 
ILL_ILLTRP
,

186 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

187 
ILL_PRVOPC
,

188 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

189 
ILL_PRVREG
,

190 
	#ILL_PRVREG
 
ILL_PRVREG


	)

191 
ILL_COPROC
,

192 
	#ILL_COPROC
 
ILL_COPROC


	)

193 
ILL_BADSTK


194 
	#ILL_BADSTK
 
ILL_BADSTK


	)

200 
FPE_INTDIV
 = 1,

201 
	#FPE_INTDIV
 
FPE_INTDIV


	)

202 
FPE_INTOVF
,

203 
	#FPE_INTOVF
 
FPE_INTOVF


	)

204 
FPE_FLTDIV
,

205 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

206 
FPE_FLTOVF
,

207 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

208 
FPE_FLTUND
,

209 
	#FPE_FLTUND
 
FPE_FLTUND


	)

210 
FPE_FLTRES
,

211 
	#FPE_FLTRES
 
FPE_FLTRES


	)

212 
FPE_FLTINV
,

213 
	#FPE_FLTINV
 
FPE_FLTINV


	)

214 
FPE_FLTSUB


215 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

221 
SEGV_MAPERR
 = 1,

222 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

223 
SEGV_ACCERR


224 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

230 
BUS_ADRALN
 = 1,

231 
	#BUS_ADRALN
 
BUS_ADRALN


	)

232 
BUS_ADRERR
,

233 
	#BUS_ADRERR
 
BUS_ADRERR


	)

234 
BUS_OBJERR
,

235 
	#BUS_OBJERR
 
BUS_OBJERR


	)

236 
BUS_MCEERR_AR
,

237 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

238 
BUS_MCEERR_AO


239 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

245 
TRAP_BRKPT
 = 1,

246 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

247 
TRAP_TRACE


248 
	#TRAP_TRACE
 
TRAP_TRACE


	)

254 
CLD_EXITED
 = 1,

255 
	#CLD_EXITED
 
CLD_EXITED


	)

256 
CLD_KILLED
,

257 
	#CLD_KILLED
 
CLD_KILLED


	)

258 
CLD_DUMPED
,

259 
	#CLD_DUMPED
 
CLD_DUMPED


	)

260 
CLD_TRAPPED
,

261 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

262 
CLD_STOPPED
,

263 
	#CLD_STOPPED
 
CLD_STOPPED


	)

264 
CLD_CONTINUED


265 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

271 
POLL_IN
 = 1,

272 
	#POLL_IN
 
POLL_IN


	)

273 
POLL_OUT
,

274 
	#POLL_OUT
 
POLL_OUT


	)

275 
POLL_MSG
,

276 
	#POLL_MSG
 
POLL_MSG


	)

277 
POLL_ERR
,

278 
	#POLL_ERR
 
POLL_ERR


	)

279 
POLL_PRI
,

280 
	#POLL_PRI
 
POLL_PRI


	)

281 
POLL_HUP


282 
	#POLL_HUP
 
POLL_HUP


	)

285 #unde‡
__√ed_sigöfo_t


289 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

290 && !
deföed
 
__have_sigevít_t


291 
	#__have_sigevít_t
 1

	)

294 
	#__SIGEV_MAX_SIZE
 64

	)

295 #i‡
__WORDSIZE
 == 64

296 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

298 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

302 #i‚de‡
__have_±hªad_©å_t


303 
±hªad_©å_t
 
	t±hªad_©å_t
;

304 
	#__have_±hªad_©å_t
 1

	)

307 
	ssigevít


309 
sigvÆ_t
 
sigev_vÆue
;

310 
sigev_signo
;

311 
sigev_nŸify
;

315 
_∑d
[
__SIGEV_PAD_SIZE
];

319 
__pid_t
 
_tid
;

323 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

324 
±hªad_©å_t
 *
_©åibuã
;

325 } 
_sigev_thªad
;

326 } 
_sigev_un
;

327 } 
	tsigevít_t
;

330 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

331 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

336 
SIGEV_SIGNAL
 = 0,

337 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

338 
SIGEV_NONE
,

339 
	#SIGEV_NONE
 
SIGEV_NONE


	)

340 
SIGEV_THREAD
,

341 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

343 
SIGEV_THREAD_ID
 = 4

344 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_BSD


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_GNU


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_BSD


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/readline/keymaps.h

22 #i‚de‡
_KEYMAPS_H_


23 
	#_KEYMAPS_H_


	)

25 #ifde‡
__˝lu•lus


29 #i‡
deföed
 (
READLINE_LIBRARY
)

30 
	~"æ°dc.h
"

31 
	~"ch¨defs.h
"

32 
	~"æty≥defs.h
"

34 
	~<ªadlöe/æ°dc.h
>

35 
	~<ªadlöe/ch¨defs.h
>

36 
	~<ªadlöe/æty≥defs.h
>

44 
	s_keym≠_íåy
 {

45 
ty≥
;

46 
æ_comm™d_func_t
 *
fun˘i⁄
;

47 } 
	tKEYMAP_ENTRY
;

52 
	#KEYMAP_SIZE
 257

	)

53 
	#ANYOTHERKEY
 
KEYMAP_SIZE
-1

	)

55 
KEYMAP_ENTRY
 
	tKEYMAP_ENTRY_ARRAY
[
KEYMAP_SIZE
];

56 
KEYMAP_ENTRY
 *
	tKeym≠
;

59 
	#ISFUNC
 0

	)

60 
	#ISKMAP
 1

	)

61 
	#ISMACR
 2

	)

63 
KEYMAP_ENTRY_ARRAY
 
emacs_°™d¨d_keym≠
, 
emacs_mëa_keym≠
, 
emacs_˘lx_keym≠
;

64 
KEYMAP_ENTRY_ARRAY
 
vi_ö£πi⁄_keym≠
, 
vi_movemít_keym≠
;

68 
Keym≠
 
æ_make_b¨e_keym≠
 
PARAMS
(());

71 
Keym≠
 
æ_c›y_keym≠
 
PARAMS
((Keymap));

76 
Keym≠
 
æ_make_keym≠
 
PARAMS
(());

79 
æ_disˇrd_keym≠
 
PARAMS
((
Keym≠
));

85 
Keym≠
 
æ_gë_keym≠_by_«me
 
PARAMS
((const *));

88 
Keym≠
 
æ_gë_keym≠
 
PARAMS
(());

91 
æ_£t_keym≠
 
PARAMS
((
Keym≠
));

93 #ifde‡
__˝lu•lus


	@/usr/include/readline/rlstdc.h

22 #i‡!
deföed
 (
_RL_STDC_H_
)

23 
	#_RL_STDC_H_


	)

31 #i‡!
deföed
 (
PARAMS
)

32 #i‡
deföed
 (
__STDC__
Ë|| deföed (
__GNUC__
Ë|| deföed (
__˝lu•lus
)

33 
	#PARAMS
(
¥Ÿos
Ë
	)
protos

35 
	#PARAMS
(
¥Ÿos
Ë()

	)

39 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 2

40 
	#__æ_©åibuã__
(
x
Ë
	`__©åibuã__
(x)

	)

42 
	#__æ_©åibuã__
(
x
)

	)

47 #i‡
deföed
 (
__STDC__
Ë&& deföed (
HAVE_STDARG_H
)

48 
	#PREFER_STDARG


	)

49 
	#USE_VARARGS


	)

51 #i‡
deföed
 (
HAVE_VARARGS_H
)

52 
	#PREFER_VARARGS


	)

53 
	#USE_VARARGS


	)

	@/usr/include/readline/rltypedefs.h

22 #i‚de‡
_RL_TYPEDEFS_H_


23 
	#_RL_TYPEDEFS_H_


	)

25 #ifde‡
__˝lu•lus


31 #i‡!
deföed
 (
_RL_FUNCTION_TYPEDEF
)

32 
	#_RL_FUNCTION_TYPEDEF


	)

35 
	tæ_comm™d_func_t
 
	tPARAMS
((, ));

38 *
	tæ_com≥¡ry_func_t
 
	tPARAMS
((const *, ));

39 **
	tæ_com∂ëi⁄_func_t
 
	tPARAMS
((const *, , ));

41 *
	tæ_quŸe_func_t
 
	tPARAMS
((*, , *));

42 *
	tæ_dequŸe_func_t
 
	tPARAMS
((*, ));

44 
	tæ_compign‹e_func_t
 
	tPARAMS
((**));

46 
	tæ_compdi•_func_t
 
	tPARAMS
((**, , ));

49 
	tæ_hook_func_t
 
	tPARAMS
(());

52 
	tæ_gëc_func_t
 
	tPARAMS
((
	tFILE
 *));

57 
	tæ_löebuf_func_t
 
	tPARAMS
((*, ));

60 
	tæ_ötfunc_t
 
	tPARAMS
(());

61 
	#æ_ivoidfunc_t
 
æ_hook_func_t


	)

62 
	tæ_i˝func_t
 
	tPARAMS
((*));

63 
	tæ_i˝pfunc_t
 
	tPARAMS
((**));

65 
	tæ_voidfunc_t
 
	tPARAMS
(());

66 
	tæ_vötfunc_t
 
	tPARAMS
(());

67 
	tæ_v˝func_t
 
	tPARAMS
((*));

68 
	tæ_v˝pfunc_t
 
	tPARAMS
((**));

70 *
	tæ_˝vfunc_t
 
	tPARAMS
(());

71 *
	tæ_˝ifunc_t
 
	tPARAMS
(());

72 *
	tæ_˝˝func_t
 
	tPARAMS
((*));

73 *
	tæ_˝˝pfunc_t
 
	tPARAMS
((**));

77 #ifde‡
__˝lu•lus


	@/usr/include/readline/tilde.h

23 #i‡!
deföed
 (
_TILDE_H_
)

24 
	#_TILDE_H_


	)

26 #ifde‡
__˝lu•lus


34 #i‡!
deföed
 (
PARAMS
)

35 #i‡
deföed
 (
__STDC__
Ë|| deföed (
__GNUC__
Ë|| deföed (
__˝lu•lus
)

36 
	#PARAMS
(
¥Ÿos
Ë
	)
protos

38 
	#PARAMS
(
¥Ÿos
Ë()

	)

42 *
	ttûde_hook_func_t
 
	tPARAMS
((*));

48 
tûde_hook_func_t
 *
tûde_ex∑nsi⁄_¥ìx∑nsi⁄_hook
;

54 
tûde_hook_func_t
 *
tûde_ex∑nsi⁄_Áûuª_hook
;

59 **
tûde_addôi⁄Æ_¥efixes
;

64 **
tûde_addôi⁄Æ_suffixes
;

67 *
tûde_ex∑nd
 
PARAMS
((const *));

71 *
tûde_ex∑nd_w‹d
 
PARAMS
((const *));

74 *
tûde_föd_w‹d
 
PARAMS
((const *, , *));

76 #ifde‡
__˝lu•lus


	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 020200000

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

124 #ifde‡
__USE_XOPEN2K8


125 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

126 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

127 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

130 #ifde‡
__USE_GNU


131 
	#O_DIRECT
 
__O_DIRECT


	)

132 
	#O_NOATIME
 
__O_NOATIME


	)

133 
	#O_PATH
 
__O_PATH


	)

134 
	#O_TMPFILE
 
__O_TMPFILE


	)

140 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


141 
	#O_DSYNC
 
__O_DSYNC


	)

142 #i‡
deföed
 
__O_RSYNC


143 
	#O_RSYNC
 
__O_RSYNC


	)

145 
	#O_RSYNC
 
O_SYNC


	)

150 
	#F_DUPFD
 0

	)

151 
	#F_GETFD
 1

	)

152 
	#F_SETFD
 2

	)

153 
	#F_GETFL
 3

	)

154 
	#F_SETFL
 4

	)

156 #i‚de‡
__F_SETOWN


157 
	#__F_SETOWN
 8

	)

158 
	#__F_GETOWN
 9

	)

161 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


162 
	#F_SETOWN
 
__F_SETOWN


	)

163 
	#F_GETOWN
 
__F_GETOWN


	)

166 #i‚de‡
__F_SETSIG


167 
	#__F_SETSIG
 10

	)

168 
	#__F_GETSIG
 11

	)

170 #i‚de‡
__F_SETOWN_EX


171 
	#__F_SETOWN_EX
 15

	)

172 
	#__F_GETOWN_EX
 16

	)

175 #ifde‡
__USE_GNU


176 
	#F_SETSIG
 
__F_SETSIG


	)

177 
	#F_GETSIG
 
__F_GETSIG


	)

178 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

179 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

182 #ifde‡
__USE_GNU


183 
	#F_SETLEASE
 1024

	)

184 
	#F_GETLEASE
 1025

	)

185 
	#F_NOTIFY
 1026

	)

186 
	#F_SETPIPE_SZ
 1031

	)

187 
	#F_GETPIPE_SZ
 1032

	)

189 #ifde‡
__USE_XOPEN2K8


190 
	#F_DUPFD_CLOEXEC
 1030

	)

195 
	#FD_CLOEXEC
 1

	)

197 #i‚de‡
F_RDLCK


199 
	#F_RDLCK
 0

	)

200 
	#F_WRLCK
 1

	)

201 
	#F_UNLCK
 2

	)

206 #i‚de‡
F_EXLCK


207 
	#F_EXLCK
 4

	)

208 
	#F_SHLCK
 8

	)

211 #ifde‡
__USE_BSD


213 
	#LOCK_SH
 1

	)

214 
	#LOCK_EX
 2

	)

215 
	#LOCK_NB
 4

	)

217 
	#LOCK_UN
 8

	)

220 #ifde‡
__USE_GNU


221 
	#LOCK_MAND
 32

	)

222 
	#LOCK_READ
 64

	)

223 
	#LOCK_WRITE
 128

	)

224 
	#LOCK_RW
 192

	)

227 #ifde‡
__USE_GNU


229 
	#DN_ACCESS
 0x00000001

	)

230 
	#DN_MODIFY
 0x00000002

	)

231 
	#DN_CREATE
 0x00000004

	)

232 
	#DN_DELETE
 0x00000008

	)

233 
	#DN_RENAME
 0x00000010

	)

234 
	#DN_ATTRIB
 0x00000020

	)

235 
	#DN_MULTISHOT
 0x80000000

	)

239 #ifde‡
__USE_GNU


241 
	e__pid_ty≥


243 
	mF_OWNER_TID
 = 0,

244 
	mF_OWNER_PID
,

245 
	mF_OWNER_PGRP
,

246 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


250 
	sf_ow√r_ex


252 
__pid_ty≥
 
	mty≥
;

253 
__pid_t
 
	mpid
;

259 #ifdef 
__USE_BSD


260 
	#FAPPEND
 
O_APPEND


	)

261 
	#FFSYNC
 
O_FSYNC


	)

262 
	#FASYNC
 
O_ASYNC


	)

263 
	#FNONBLOCK
 
O_NONBLOCK


	)

264 
	#FNDELAY
 
O_NDELAY


	)

267 #i‚de‡
__POSIX_FADV_DONTNEED


268 
	#__POSIX_FADV_DONTNEED
 4

	)

269 
	#__POSIX_FADV_NOREUSE
 5

	)

272 #ifde‡
__USE_XOPEN2K


273 
	#POSIX_FADV_NORMAL
 0

	)

274 
	#POSIX_FADV_RANDOM
 1

	)

275 
	#POSIX_FADV_SEQUENTIAL
 2

	)

276 
	#POSIX_FADV_WILLNEED
 3

	)

277 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

278 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

282 #ifde‡
__USE_GNU


284 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

287 
	#SYNC_FILE_RANGE_WRITE
 2

	)

290 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

295 
	#SPLICE_F_MOVE
 1

	)

296 
	#SPLICE_F_NONBLOCK
 2

	)

299 
	#SPLICE_F_MORE
 4

	)

300 
	#SPLICE_F_GIFT
 8

	)

304 
	#FALLOC_FL_KEEP_SIZE
 1

	)

307 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

311 
	sfûe_h™dÀ


313 
	mh™dÀ_byãs
;

314 
	mh™dÀ_ty≥
;

316 
	mf_h™dÀ
[0];

320 
	#MAX_HANDLE_SZ
 128

	)

324 #ifde‡
__USE_ATFILE


325 
	#AT_FDCWD
 -100

	)

328 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

329 
	#AT_REMOVEDIR
 0x200

	)

331 
	#AT_SYMLINK_FOLLOW
 0x400

	)

332 #ifde‡
__USE_GNU


333 
	#AT_NO_AUTOMOUNT
 0x800

	)

335 
	#AT_EMPTY_PATH
 0x1000

	)

337 
	#AT_EACCESS
 0x200

	)

341 
	g__BEGIN_DECLS


343 #ifde‡
__USE_GNU


346 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

347 
__THROW
;

354 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

355 
__Êags
);

362 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

363 
size_t
 
__cou¡
, 
__Êags
);

369 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

370 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

371 
__Êags
);

377 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

378 
__Êags
);

384 #i‚de‡
__USE_FILE_OFFSET64


385 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

387 #ifde‡
__REDIRECT


388 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

389 
__off64_t
 
__Àn
),

390 
ÁŒoˇã64
);

392 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

395 #ifde‡
__USE_LARGEFILE64


396 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

397 
__off64_t
 
__Àn
);

402 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

403 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

404 
__Êags
Ë
__THROW
;

410 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

411 
__Êags
);

415 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

23 
	~<lowÀvñlock.h
>

27 
	#_IO_lock_öex≥nsive
 1

	)

29 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

31 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

33 
	#_IO_lock_öô
(
_«me
) \

34 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

36 
	#_IO_lock_föi
(
_«me
) \

37 ((Ë0)

	)

39 
	#_IO_lock_lock
(
_«me
) \

41 *
__£lf
 = 
THREAD_SELF
; \

42 i‡((
_«me
).
ow√r
 !
__£lf
) \

44 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

45 (
_«me
).
ow√r
 = 
__£lf
; \

47 ++(
_«me
).
˙t
; \

48 } 0)

	)

50 
	#_IO_lock_åylock
(
_«me
) \

52 
__ªsu…
 = 0; \

53 *
__£lf
 = 
THREAD_SELF
; \

54 i‡((
_«me
).
ow√r
 !
__£lf
) \

56 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

58 (
_«me
).
ow√r
 = 
__£lf
; \

59 (
_«me
).
˙t
 = 1; \

62 
__ªsu…
 = 
EBUSY
; \

65 ++(
_«me
).
˙t
; \

66 
__ªsu…
; \

67 })

	)

69 
	#_IO_lock_u∆ock
(
_«me
) \

71 i‡(--(
_«me
).
˙t
 == 0) \

73 (
_«me
).
ow√r
 = 
NULL
; \

74 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

76 } 0)

	)

80 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

81 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

82 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

83 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

84 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

85 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

87 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


89 #ifde‡
__EXCEPTIONS


90 
	#_IO_acquúe_lock
(
_Â
) \

92 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

93 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

94 (
_Â
); \

95 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

96 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

98 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

99 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

100 (
_Â
); \

101 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

103 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

104 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

106 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/readline/chardefs.h

22 #i‚de‡
_CHARDEFS_H_


23 
	#_CHARDEFS_H_


	)

25 
	~<˘y≥.h
>

27 
	~<°rög.h
>

29 #i‚de‡
whôe•a˚


30 
	#whôe•a˚
(
c
Ë(((cË=' 'Ë|| ((cË='\t'))

	)

33 #ifde‡
CTRL


34 #unde‡
CTRL


36 #ifde‡
UNCTRL


37 #unde‡
UNCTRL


41 
	#c⁄åﬁ_ch¨a˘î_thªshﬁd
 0x020

	)

42 
	#c⁄åﬁ_ch¨a˘î_mask
 0x1‡

	)

43 
	#mëa_ch¨a˘î_thªshﬁd
 0x07‡

	)

44 
	#c⁄åﬁ_ch¨a˘î_bô
 0x40

	)

45 
	#mëa_ch¨a˘î_bô
 0x080

	)

46 
	#œrge°_ch¨
 255

	)

48 
	#CTRL_CHAR
(
c
Ë((cË< 
c⁄åﬁ_ch¨a˘î_thªshﬁd
 && (((cË& 0x80Ë=0))

	)

49 
	#META_CHAR
(
c
Ë((cË> 
mëa_ch¨a˘î_thªshﬁd
 && (cË<
œrge°_ch¨
)

	)

51 
	#CTRL
(
c
Ë((cË& 
c⁄åﬁ_ch¨a˘î_mask
)

	)

52 
	#META
(
c
Ë((cË| 
mëa_ch¨a˘î_bô
)

	)

54 
	#UNMETA
(
c
Ë((cË& (~
mëa_ch¨a˘î_bô
))

	)

55 
	#UNCTRL
(
c
Ë
	`_æ_to_uµî
(((c)|
c⁄åﬁ_ch¨a˘î_bô
))

	)

57 #i‡
deföed
 
STDC_HEADERS
 || (!deföed (
ißscii
Ë&& !deföed (
HAVE_ISASCII
))

58 
	#IN_CTYPE_DOMAIN
(
c
Ë1

	)

60 
	#IN_CTYPE_DOMAIN
(
c
Ë
	`ißscii
(c)

	)

63 #i‡!
deföed
 (
isxdigô
Ë&& !deföed (
HAVE_ISXDIGIT
Ë&& !deföed (
__˝lu•lus
)

64 
	#isxdigô
(
c
Ë(
	`isdigô
((c)Ë|| ((cË>'a' && (cË<'f'Ë|| ((cË>'A' && (cË<'F'))

	)

67 #i‡
deföed
 (
CTYPE_NON_ASCII
)

68 
	#NON_NEGATIVE
(
c
Ë1

	)

70 
	#NON_NEGATIVE
(
c
Ë(()(cË=(c))

	)

74 #unde‡
ISPRINT


78 
	#ISALNUM
(
c
Ë(
	`IN_CTYPE_DOMAIN
 (cË&& 
	`iß um
 (c))

	)

79 
	#ISALPHA
(
c
Ë(
	`IN_CTYPE_DOMAIN
 (cË&& 
	`ißÕha
 (c))

	)

80 
	#ISDIGIT
(
c
Ë(
	`IN_CTYPE_DOMAIN
 (cË&& 
	`isdigô
 (c))

	)

81 
	#ISLOWER
(
c
Ë(
	`IN_CTYPE_DOMAIN
 (cË&& 
	`i¶owî
 (c))

	)

82 
	#ISPRINT
(
c
Ë(
	`IN_CTYPE_DOMAIN
 (cË&& 
	`i•röt
 (c))

	)

83 
	#ISUPPER
(
c
Ë(
	`IN_CTYPE_DOMAIN
 (cË&& 
	`isuµî
 (c))

	)

84 
	#ISXDIGIT
(
c
Ë(
	`IN_CTYPE_DOMAIN
 (cË&& 
	`isxdigô
 (c))

	)

86 
	#_æ_lowîˇ£_p
(
c
Ë(
	`NON_NEGATIVE
(cË&& 
	`ISLOWER
(c))

	)

87 
	#_æ_uµîˇ£_p
(
c
Ë(
	`NON_NEGATIVE
(cË&& 
	`ISUPPER
(c))

	)

88 
	#_æ_digô_p
(
c
Ë((cË>'0' && (cË<'9')

	)

90 
	#_æ_puª_Æphabëic
(
c
Ë(
	`NON_NEGATIVE
(cË&& 
	`ISALPHA
(c))

	)

91 
	#ALPHABETIC
(
c
Ë(
	`NON_NEGATIVE
(cË&& 
	`ISALNUM
(c))

	)

93 #i‚de‡
_æ_to_uµî


94 
	#_æ_to_uµî
(
c
Ë(
	`_æ_lowîˇ£_p
(cË? 
	`touµî
(()cË: (c))

	)

95 
	#_æ_to_lowî
(
c
Ë(
	`_æ_uµîˇ£_p
(cË? 
	`tﬁowî
(()cË: (c))

	)

98 #i‚de‡
_æ_digô_vÆue


99 
	#_æ_digô_vÆue
(
x
Ë((xË- '0')

	)

102 #i‚de‡
_æ_isidít


103 
	#_æ_isidít
(
c
Ë(
	`ISALNUM
(cË|| (cË='_')

	)

106 #i‚de‡
ISOCTAL


107 
	#ISOCTAL
(
c
Ë((cË>'0' && (cË<'7')

	)

109 
	#OCTVALUE
(
c
Ë((cË- '0')

	)

111 
	#HEXVALUE
(
c
) \

112 (((
c
) >= 'a' && (c) <= 'f') \

113 ? (
c
)-'a'+10 \

114 : (
c
Ë>'A' && (cË<'F' ? (c)-'A'+10 : (c)-'0')

	)

116 #i‚de‡
NEWLINE


117 
	#NEWLINE
 '\n'

	)

120 #i‚de‡
RETURN


121 
	#RETURN
 
	`CTRL
('M')

	)

124 #i‚de‡
RUBOUT


125 
	#RUBOUT
 0x7f

	)

128 #i‚de‡
TAB


129 
	#TAB
 '\t'

	)

132 #ifde‡
ABORT_CHAR


133 #unde‡
ABORT_CHAR


135 
	#ABORT_CHAR
 
	`CTRL
('G')

	)

137 #ifde‡
PAGE


138 #unde‡
PAGE


140 
	#PAGE
 
	`CTRL
('L')

	)

142 #ifde‡
SPACE


143 #unde‡
SPACE


145 
	#SPACE
 ' '

	)

147 #ifde‡
ESC


148 #unde‡
ESC


150 
	#ESC
 
	`CTRL
('[')

	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

134 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

136 #i‡
__GNUC_PREREQ
 (4,3)

137 
	#__w¨nde˛
(
«me
, 
msg
) \

138 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

139 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

140 
	#__îr‹de˛
(
«me
, 
msg
) \

141 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

143 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

144 
	#__w¨«âr
(
msg
)

	)

145 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

149 #i‡
__GNUC_PREREQ
 (2,97)

151 
	#__Êex¨r
 []

	)

153 #ifde‡
__GNUC__


154 
	#__Êex¨r
 [0]

	)

156 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

157 
	#__Êex¨r
 []

	)

160 
	#__Êex¨r
 [1]

	)

176 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

178 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

179 #ifde‡
__˝lu•lus


180 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

181 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

187 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

188 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

190 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

191 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

204 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

205 
	#__©åibuã__
(
xyz
Ë

	)

211 #i‡
__GNUC_PREREQ
 (2,96)

212 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

214 
	#__©åibuã_mÆloc__


	)

219 #i‡
__GNUC_PREREQ
 (4, 3)

220 
	#__©åibuã_Æloc_size__
(
∑øms
) \

221 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

223 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

229 #i‡
__GNUC_PREREQ
 (2,96)

230 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

232 
	#__©åibuã_puª__


	)

236 #i‡
__GNUC_PREREQ
 (2,5)

237 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

239 
	#__©åibuã_c⁄°__


	)

245 #i‡
__GNUC_PREREQ
 (3,1)

246 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

247 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

249 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

250 
	#__©åibuã_noölöe__


	)

254 #i‡
__GNUC_PREREQ
 (3,2)

255 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

257 
	#__©åibuã_dïªˇãd__


	)

266 #i‡
__GNUC_PREREQ
 (2,8)

267 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

269 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

276 #i‡
__GNUC_PREREQ
 (2,97)

277 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

278 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

280 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

285 #i‡
__GNUC_PREREQ
 (3,3)

286 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

288 
	#__n⁄nuŒ
(
∑øms
)

	)

293 #i‡
__GNUC_PREREQ
 (3,4)

294 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

295 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

296 #i‡
__USE_FORTIFY_LEVEL
 > 0

297 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

300 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

302 #i‚de‡
__wur


303 
	#__wur


	)

307 #i‡
__GNUC_PREREQ
 (3,2)

308 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

310 
	#__Æways_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

318 
	#__©åibuã_¨tificül__


	)

321 #ifde‡
__GNUC__


326 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__GNUC_GNU_INLINE__


327 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

328 
	#__exã∫_Æways_ölöe
 \

329 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

331 
	#__exã∫_ölöe
 
__ölöe


	)

332 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

335 
	#__exã∫_ölöe


	)

336 
	#__exã∫_Æways_ölöe


	)

341 #i‡
__GNUC_PREREQ
 (4,3)

342 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

343 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

350 #i‡!
__GNUC_PREREQ
 (2,8)

351 
	#__exãnsi⁄__


	)

355 #i‡!
__GNUC_PREREQ
 (2,92)

356 
	#__ª°ri˘


	)

362 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


363 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

365 #ifde‡
__GNUC__


366 
	#__ª°ri˘_¨r


	)

368 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

369 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

372 
	#__ª°ri˘_¨r


	)

377 #i‡
__GNUC__
 >= 3

378 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

379 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

381 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

382 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

385 
	~<bôs/w‹dsize.h
>

387 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


388 
	#__LDBL_COMPAT
 1

	)

389 #ifde‡
__REDIRECT


390 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

391 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

392 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

393 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

394 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

395 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

396 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

397 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

398 
	#__LDBL_REDIR_DECL
(
«me
) \

399 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

400 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

401 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

402 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

403 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

406 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


407 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

408 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

409 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

410 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

411 
	#__LDBL_REDIR_DECL
(
«me
)

	)

412 #ifde‡
__REDIRECT


413 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

414 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

415 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/libc-lock.h

19 #i‚de‡
_BITS_LIBC_LOCK_H


20 
	#_BITS_LIBC_LOCK_H
 1

	)

22 
	~<±hªad.h
>

23 
	#__√ed_NULL


	)

24 
	~<°ddef.h
>

27 #ifde‡
_LIBC


28 
	~<lowÀvñlock.h
>

29 
	~<és.h
>

30 
	~<±hªad-fun˘i⁄s.h
>

31 
	~<î∫o.h
>

32 
	~<gnu/›ti⁄-groups.h
>

36 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


37 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


38 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

40 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

43 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

53 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

54 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

59 #i‡
LLL_LOCK_INITIALIZER
 == 0

60 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

61 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

63 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

64 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

66 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

67 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

69 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

70 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

71 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

72 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

76 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

77 
	#__libc_lock_öô_ªcursive
(
NAME
) \

78 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

80 
	#__libc_lock_öô_ªcursive
(
NAME
) \

82 i‡(
__±hªad_muãx_öô
 !
NULL
) \

84 
±hªad_muãx©å_t
 
__©å
; \

85 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

86 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

87 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

88 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

90 } 0)

	)

94 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

95 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

97 
	#__libc_lock_föi_ªcursive
(
NAME
) \

98 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
).
muãx
), 0)

	)

102 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

103 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

107 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

108 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

110 #i‡
__OPTION_EGLIBC_BIG_MACROS


111 
	#__libc_lock_lock_ªcursive
(
NAME
) \

113 *
£lf
 = 
THREAD_SELF
; \

114 i‡((
NAME
).
ow√r
 !
£lf
) \

116 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

117 (
NAME
).
ow√r
 = 
£lf
; \

119 ++(
NAME
).
˙t
; \

120 } 0)

	)

122 
	#__libc_lock_lock_ªcursive
(
NAME
) \

123 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

126 
	#__libc_lock_lock_ªcursive
(
NAME
) \

127 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

131 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

132 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

136 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

137 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

139 #i‡
__OPTION_EGLIBC_BIG_MACROS


140 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

142 
ªsu…
 = 0; \

143 *
£lf
 = 
THREAD_SELF
; \

144 i‡((
NAME
).
ow√r
 !
£lf
) \

146 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

148 (
NAME
).
ow√r
 = 
£lf
; \

149 (
NAME
).
˙t
 = 1; \

152 
ªsu…
 = 
EBUSY
; \

155 ++(
NAME
).
˙t
; \

156 
ªsu…
; \

157 })

	)

159 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

160 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

163 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

164 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

168 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

169 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

173 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

174 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

176 #i‡
__OPTION_EGLIBC_BIG_MACROS


178 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

180 i‡(--(
NAME
).
˙t
 == 0) \

182 (
NAME
).
ow√r
 = 
NULL
; \

183 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

185 } 0)

	)

187 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

188 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

191 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

192 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

199 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

200 (*
routöe
Ë(*), *
¨g
);

201 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

202 
execuã
);

205 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

206 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

207 
_avaû
; \

208 i‡(
DOIT
) { \

209 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

210 i‡(
_avaû
) { \

211 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

212 
ARG
)); \

214 
_buf„r
.
__routöe
 = (
FCT
); \

215 
_buf„r
.
__¨g
 = (
ARG
); \

218 
_avaû
 = 0; \

219 }

	)

222 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

223 i‡(
_avaû
) { \

224 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

225 } i‡(
DOIT
) \

226 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

227 
	}

	)
}

232 #ifde‡
_LIBC


233 
	~"libc-lockP.h
"

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_¸óã_moduÀ


	)

13 
	#__°ub_Áâach


	)

14 
	#__°ub_fchÊags


	)

15 
	#__°ub_fdëach


	)

16 
	#__°ub_gë_kî√l_syms


	)

17 
	#__°ub_gëmsg


	)

18 
	#__°ub_gây


	)

19 
	#__°ub_lchmod


	)

20 
	#__°ub_nfs£rv˘l


	)

21 
	#__°ub_putmsg


	)

22 
	#__°ub_quîy_moduÀ


	)

23 
	#__°ub_ªvoke


	)

24 
	#__°ub_£éogö


	)

25 
	#__°ub_sigªtu∫


	)

26 
	#__°ub_s°k


	)

27 
	#__°ub_°ty


	)

28 
	#__°ub_u£lib


	)

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CRYPT
 1

	)

20 
	#__OPTION_EGLIBC_CRYPT_UFC
 1

	)

21 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

22 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

23 
	#__OPTION_EGLIBC_ENVZ
 1

	)

24 
	#__OPTION_EGLIBC_FCVT
 1

	)

25 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

26 
	#__OPTION_EGLIBC_FSTAB
 1

	)

27 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

28 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

29 
	#__OPTION_EGLIBC_IDN
 1

	)

30 
	#__OPTION_EGLIBC_INET
 1

	)

31 
	#__OPTION_EGLIBC_INET_ANL
 1

	)

32 
	#__OPTION_EGLIBC_LIBM
 1

	)

33 
	#__OPTION_EGLIBC_LOCALES
 1

	)

34 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

35 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

36 
	#__OPTION_EGLIBC_NIS
 1

	)

37 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

38 
	#__OPTION_EGLIBC_RCMD
 1

	)

39 
	#__OPTION_EGLIBC_RTLD_DEBUG
 1

	)

40 
	#__OPTION_EGLIBC_SPAWN
 1

	)

41 
	#__OPTION_EGLIBC_STREAMS
 1

	)

42 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

43 
	#__OPTION_EGLIBC_UTMP
 1

	)

44 
	#__OPTION_EGLIBC_UTMPX
 1

	)

45 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

46 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

47 
	#__OPTION_POSIX_REGEXP
 1

	)

48 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

49 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@
1
.
1
/usr/include
146
3224
btree.c
btree.h
btree_rb.c
build.c
date.c
delete.c
encode.c
expr.c
func.c
hash.c
hash.h
insert.c
main.c
md5.c
os.c
os.h
pager.c
pager.h
parse.y
pragma.c
printf.c
random.c
select.c
shell.c
sqliteInt.h
table.c
tclsqlite.c
test1.c
test2.c
test3.c
test4.c
tokenize.c
trigger.c
update.c
util.c
vdbe.c
vdbe.h
vdbeInt.h
vdbeaux.c
where.c
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/math.h
/usr/include/pthread.h
/usr/include/pwd.h
/usr/include/readline/history.h
/usr/include/readline/readline.h
/usr/include/sched.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/stat.h
/usr/include/sys/types.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/math-finite.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/nan.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/sched.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/readline/keymaps.h
/usr/include/readline/rlstdc.h
/usr/include/readline/rltypedefs.h
/usr/include/readline/tilde.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ucontext.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/readline/chardefs.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/asm/errno.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/libc-lock.h
/usr/include/bits/uio.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar.h
/usr/include/bits/wchar2.h
/usr/include/gnu/option-groups.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
